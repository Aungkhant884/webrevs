{"files":[{"patch":"@@ -102,1 +102,2 @@\n-                                                 Register tmp,\n+                                                 Register tmp1,\n+                                                 Register tmp2,\n@@ -114,2 +115,2 @@\n-  assert_different_registers(obj, pre_val, tmp, rscratch1);\n-  assert(pre_val != noreg &&  tmp != noreg, \"expecting a register\");\n+  assert_different_registers(obj, pre_val, tmp1, tmp2);\n+  assert(pre_val != noreg && tmp1 != noreg && tmp2 != noreg, \"expecting a register\");\n@@ -123,1 +124,1 @@\n-    __ ldrw(tmp, in_progress);\n+    __ ldrw(tmp1, in_progress);\n@@ -126,1 +127,1 @@\n-    __ ldrb(tmp, in_progress);\n+    __ ldrb(tmp1, in_progress);\n@@ -128,1 +129,1 @@\n-  __ cbzw(tmp, done);\n+  __ cbzw(tmp1, done);\n@@ -142,2 +143,2 @@\n-  __ ldr(tmp, index);                      \/\/ tmp := *index_adr\n-  __ cbz(tmp, runtime);                    \/\/ tmp == 0?\n+  __ ldr(tmp1, index);                      \/\/ tmp := *index_adr\n+  __ cbz(tmp1, runtime);                    \/\/ tmp == 0?\n@@ -146,4 +147,4 @@\n-  __ sub(tmp, tmp, wordSize);              \/\/ tmp := tmp - wordSize\n-  __ str(tmp, index);                      \/\/ *index_adr := tmp\n-  __ ldr(rscratch1, buffer);\n-  __ add(tmp, tmp, rscratch1);             \/\/ tmp := tmp + *buffer_adr\n+  __ sub(tmp1, tmp1, wordSize);             \/\/ tmp := tmp - wordSize\n+  __ str(tmp1, index);                      \/\/ *index_adr := tmp\n+  __ ldr(tmp2, buffer);\n+  __ add(tmp1, tmp1, tmp2);                 \/\/ tmp := tmp + *buffer_adr\n@@ -152,1 +153,1 @@\n-  __ str(pre_val, Address(tmp, 0));\n+  __ str(pre_val, Address(tmp1, 0));\n@@ -188,1 +189,1 @@\n-                                                  Register tmp,\n+                                                  Register tmp1,\n@@ -191,1 +192,1 @@\n-  assert_different_registers(store_addr, new_val, thread, tmp, tmp2,\n+  assert_different_registers(store_addr, new_val, thread, tmp1, tmp2,\n@@ -193,1 +194,1 @@\n-  assert(store_addr != noreg && new_val != noreg && tmp != noreg\n+  assert(store_addr != noreg && new_val != noreg && tmp1 != noreg\n@@ -208,3 +209,3 @@\n-  __ eor(tmp, store_addr, new_val);\n-  __ lsr(tmp, tmp, HeapRegion::LogOfHRGrainBytes);\n-  __ cbz(tmp, done);\n+  __ eor(tmp1, store_addr, new_val);\n+  __ lsr(tmp1, tmp1, HeapRegion::LogOfHRGrainBytes);\n+  __ cbz(tmp1, done);\n@@ -218,1 +219,1 @@\n-  const Register card_addr = tmp;\n+  const Register card_addr = tmp1;\n@@ -261,1 +262,1 @@\n-                                    Register dst, Address src, Register tmp1, Register tmp_thread) {\n+                                    Register dst, Address src, Register tmp1, Register tmp2) {\n@@ -266,1 +267,1 @@\n-  ModRefBarrierSetAssembler::load_at(masm, decorators, type, dst, src, tmp1, tmp_thread);\n+  ModRefBarrierSetAssembler::load_at(masm, decorators, type, dst, src, tmp1, tmp2);\n@@ -276,1 +277,2 @@\n-                         tmp1 \/* tmp *\/,\n+                         tmp1 \/* tmp1 *\/,\n+                         tmp2 \/* tmp2 *\/,\n@@ -298,1 +300,2 @@\n-                       tmp1  \/* tmp *\/,\n+                       tmp1  \/* tmp1 *\/,\n+                       rscratch2  \/* tmp2 *\/,\n@@ -316,1 +319,1 @@\n-                          tmp1 \/* tmp *\/,\n+                          tmp1 \/* tmp1 *\/,\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/g1\/g1BarrierSetAssembler_aarch64.cpp","additions":28,"deletions":25,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -48,1 +48,2 @@\n-                            Register tmp,\n+                            Register tmp1,\n+                            Register tmp2,\n@@ -56,1 +57,1 @@\n-                             Register tmp,\n+                             Register tmp1,\n@@ -72,1 +73,1 @@\n-               Register dst, Address src, Register tmp1, Register tmp_thread);\n+               Register dst, Address src, Register tmp1, Register tmp2);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/g1\/g1BarrierSetAssembler_aarch64.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-                                  Register dst, Address src, Register tmp1, Register tmp_thread) {\n+                                  Register dst, Address src, Register tmp1, Register tmp2) {\n@@ -288,1 +288,1 @@\n-  __ stp(r10, r11, Address(__ pre(sp, -2 * wordSize)));\n+  __ push(RegSet::of(r10), sp);\n@@ -291,2 +291,1 @@\n-  \/\/ Uses rscratch1 & rscratch2, so we must pass new temporaries.\n-  __ resolve_weak_handle(r10, r11);\n+  __ resolve_weak_handle(r10, rscratch1, rscratch2);\n@@ -294,1 +293,1 @@\n-  __ ldp(r10, r11, Address(__ post(sp, 2 * wordSize)));\n+  __ pop(RegSet::of(r10), sp);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-                       Register dst, Address src, Register tmp1, Register tmp_thread);\n+                       Register dst, Address src, Register tmp1, Register tmp2);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-    satb_write_barrier_pre(masm, obj, pre_val, thread, tmp, tosca_live, expand_call);\n+    satb_write_barrier_pre(masm, obj, pre_val, thread, tmp, rscratch1, tosca_live, expand_call);\n@@ -96,1 +96,2 @@\n-                                                           Register tmp,\n+                                                           Register tmp1,\n+                                                           Register tmp2,\n@@ -108,2 +109,2 @@\n-  assert_different_registers(obj, pre_val, tmp, rscratch1);\n-  assert(pre_val != noreg &&  tmp != noreg, \"expecting a register\");\n+  assert_different_registers(obj, pre_val, tmp1, tmp2);\n+  assert(pre_val != noreg && tmp1 != noreg && tmp2 != noreg, \"expecting a register\");\n@@ -117,1 +118,1 @@\n-    __ ldrw(tmp, in_progress);\n+    __ ldrw(tmp1, in_progress);\n@@ -120,1 +121,1 @@\n-    __ ldrb(tmp, in_progress);\n+    __ ldrb(tmp1, in_progress);\n@@ -122,1 +123,1 @@\n-  __ cbzw(tmp, done);\n+  __ cbzw(tmp1, done);\n@@ -136,2 +137,2 @@\n-  __ ldr(tmp, index);                      \/\/ tmp := *index_adr\n-  __ cbz(tmp, runtime);                    \/\/ tmp == 0?\n+  __ ldr(tmp1, index);                      \/\/ tmp := *index_adr\n+  __ cbz(tmp1, runtime);                    \/\/ tmp == 0?\n@@ -140,4 +141,4 @@\n-  __ sub(tmp, tmp, wordSize);              \/\/ tmp := tmp - wordSize\n-  __ str(tmp, index);                      \/\/ *index_adr := tmp\n-  __ ldr(rscratch1, buffer);\n-  __ add(tmp, tmp, rscratch1);             \/\/ tmp := tmp + *buffer_adr\n+  __ sub(tmp1, tmp1, wordSize);             \/\/ tmp := tmp - wordSize\n+  __ str(tmp1, index);                      \/\/ *index_adr := tmp\n+  __ ldr(tmp2, buffer);\n+  __ add(tmp1, tmp1, tmp2);                 \/\/ tmp := tmp + *buffer_adr\n@@ -146,1 +147,1 @@\n-  __ str(pre_val, Address(tmp, 0));\n+  __ str(pre_val, Address(tmp1, 0));\n@@ -310,1 +311,1 @@\n-    satb_write_barrier_pre(masm, noreg, dst, rthread, tmp, true, false);\n+    satb_write_barrier_pre(masm, noreg, dst, rthread, tmp, rscratch1, true, false);\n@@ -331,1 +332,1 @@\n-                                            Register dst, Address src, Register tmp1, Register tmp_thread) {\n+                                            Register dst, Address src, Register tmp1, Register tmp2) {\n@@ -334,1 +335,1 @@\n-    BarrierSetAssembler::load_at(masm, decorators, type, dst, src, tmp1, tmp_thread);\n+    BarrierSetAssembler::load_at(masm, decorators, type, dst, src, tmp1, tmp2);\n@@ -348,1 +349,1 @@\n-    BarrierSetAssembler::load_at(masm, decorators, type, dst, src, tmp1, tmp_thread);\n+    BarrierSetAssembler::load_at(masm, decorators, type, dst, src, tmp1, tmp2);\n@@ -357,1 +358,1 @@\n-    BarrierSetAssembler::load_at(masm, decorators, type, dst, src, tmp1, tmp_thread);\n+    BarrierSetAssembler::load_at(masm, decorators, type, dst, src, tmp1, tmp2);\n@@ -368,1 +369,2 @@\n-                           tmp1 \/* tmp *\/,\n+                           tmp1 \/* tmp1 *\/,\n+                           tmp2 \/* tmp2 *\/,\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":22,"deletions":20,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -46,1 +46,2 @@\n-                              Register tmp,\n+                              Register tmp1,\n+                              Register tmp2,\n@@ -77,1 +78,1 @@\n-                       Register dst, Address src, Register tmp1, Register tmp_thread);\n+                       Register dst, Address src, Register tmp1, Register tmp2);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -281,1 +281,1 @@\n-  resolve_oop_handle(result, tmp);\n+  resolve_oop_handle(result, tmp, rscratch2);\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2466,1 +2466,1 @@\n-void MacroAssembler::resolve_jobject(Register value, Register thread, Register tmp) {\n+void MacroAssembler::resolve_jobject(Register value, Register tmp1, Register tmp2) {\n@@ -2475,1 +2475,1 @@\n-                 Address(value, -JNIHandles::weak_tag_value), tmp, thread);\n+                 Address(value, -JNIHandles::weak_tag_value), tmp1, tmp2);\n@@ -2481,1 +2481,1 @@\n-  access_load_at(T_OBJECT, IN_NATIVE, value, Address(value, 0), tmp, thread);\n+  access_load_at(T_OBJECT, IN_NATIVE, value, Address(value, 0), tmp1, tmp2);\n@@ -4043,1 +4043,1 @@\n-void MacroAssembler::resolve_oop_handle(Register result, Register tmp) {\n+void MacroAssembler::resolve_oop_handle(Register result, Register tmp1, Register tmp2) {\n@@ -4045,1 +4045,1 @@\n-  access_load_at(T_OBJECT, IN_NATIVE, result, Address(result, 0), tmp, noreg);\n+  access_load_at(T_OBJECT, IN_NATIVE, result, Address(result, 0), tmp1, tmp2);\n@@ -4049,2 +4049,2 @@\n-void MacroAssembler::resolve_weak_handle(Register rresult, Register rtmp) {\n-  assert_different_registers(rresult, rtmp);\n+void MacroAssembler::resolve_weak_handle(Register result, Register tmp1, Register tmp2) {\n+  assert_different_registers(result, tmp1, tmp2);\n@@ -4054,1 +4054,1 @@\n-  cbz(rresult, resolved);\n+  cbz(result, resolved);\n@@ -4057,1 +4057,0 @@\n-  \/\/ Only IN_HEAP loads require a thread_tmp register\n@@ -4060,1 +4059,1 @@\n-                 rresult, Address(rresult), rtmp, \/*tmp_thread*\/noreg);\n+                 result, Address(result), tmp1, tmp2);\n@@ -4064,1 +4063,1 @@\n-void MacroAssembler::load_mirror(Register dst, Register method, Register tmp) {\n+void MacroAssembler::load_mirror(Register dst, Register method, Register tmp1, Register tmp2) {\n@@ -4070,1 +4069,1 @@\n-  resolve_oop_handle(dst, tmp);\n+  resolve_oop_handle(dst, tmp1, tmp2);\n@@ -4392,1 +4391,1 @@\n-                                    Register tmp1, Register thread_tmp) {\n+                                    Register tmp1, Register tmp2) {\n@@ -4397,1 +4396,1 @@\n-    bs->BarrierSetAssembler::load_at(this, decorators, type, dst, src, tmp1, thread_tmp);\n+    bs->BarrierSetAssembler::load_at(this, decorators, type, dst, src, tmp1, tmp2);\n@@ -4399,1 +4398,1 @@\n-    bs->load_at(this, decorators, type, dst, src, tmp1, thread_tmp);\n+    bs->load_at(this, decorators, type, dst, src, tmp1, tmp2);\n@@ -4417,2 +4416,2 @@\n-                                   Register thread_tmp, DecoratorSet decorators) {\n-  access_load_at(T_OBJECT, IN_HEAP | decorators, dst, src, tmp1, thread_tmp);\n+                                   Register tmp2, DecoratorSet decorators) {\n+  access_load_at(T_OBJECT, IN_HEAP | decorators, dst, src, tmp1, tmp2);\n@@ -4422,2 +4421,2 @@\n-                                            Register thread_tmp, DecoratorSet decorators) {\n-  access_load_at(T_OBJECT, IN_HEAP | IS_NOT_NULL | decorators, dst, src, tmp1, thread_tmp);\n+                                            Register tmp2, DecoratorSet decorators) {\n+  access_load_at(T_OBJECT, IN_HEAP | IS_NOT_NULL | decorators, dst, src, tmp1, tmp2);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":18,"deletions":19,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -833,1 +833,1 @@\n-  void resolve_jobject(Register value, Register thread, Register tmp);\n+  void resolve_jobject(Register value, Register tmp1, Register tmp2);\n@@ -846,3 +846,3 @@\n-  void resolve_weak_handle(Register result, Register tmp);\n-  void resolve_oop_handle(Register result, Register tmp = r5);\n-  void load_mirror(Register dst, Register method, Register tmp = r5);\n+  void resolve_weak_handle(Register result, Register tmp1, Register tmp2);\n+  void resolve_oop_handle(Register result, Register tmp1, Register tmp2);\n+  void load_mirror(Register dst, Register method, Register tmp1, Register tmp2);\n@@ -851,1 +851,1 @@\n-                      Register tmp1, Register tmp_thread);\n+                      Register tmp1, Register tmp2);\n@@ -857,1 +857,1 @@\n-                     Register thread_tmp = noreg, DecoratorSet decorators = 0);\n+                     Register tmp2 = noreg, DecoratorSet decorators = 0);\n@@ -860,1 +860,1 @@\n-                              Register thread_tmp = noreg, DecoratorSet decorators = 0);\n+                              Register tmp2 = noreg, DecoratorSet decorators = 0);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1887,1 +1887,1 @@\n-    __ resolve_jobject(r0, rthread, rscratch2);\n+    __ resolve_jobject(r0, r1, r2);\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6781,1 +6781,1 @@\n-  static void jfr_epilogue(MacroAssembler* _masm, Register thread) {\n+  static void jfr_epilogue(MacroAssembler* _masm) {\n@@ -6787,1 +6787,1 @@\n-    bs->load_at(_masm, decorators, T_OBJECT, r0, Address(r0, 0), c_rarg0, thread);\n+    bs->load_at(_masm, decorators, T_OBJECT, r0, Address(r0, 0), rscratch1, rscratch2);\n@@ -6816,1 +6816,1 @@\n-    jfr_epilogue(_masm, rthread);\n+    jfr_epilogue(_masm);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -751,1 +751,1 @@\n-    __ load_mirror(r0, rmethod);\n+    __ load_mirror(r0, rmethod, r5, rscratch2);\n@@ -827,1 +827,1 @@\n-  __ load_mirror(r10, rmethod);\n+  __ load_mirror(r10, rmethod, r5, rscratch2);\n@@ -897,1 +897,1 @@\n-  bs->load_at(_masm, IN_HEAP | ON_WEAK_OOP_REF, T_OBJECT, local_0, field_address, \/*tmp1*\/ rscratch2, \/*tmp2*\/ rscratch1);\n+  bs->load_at(_masm, IN_HEAP | ON_WEAK_OOP_REF, T_OBJECT, local_0, field_address, \/*tmp1*\/ rscratch1, \/*tmp2*\/ rscratch2);\n@@ -1269,1 +1269,1 @@\n-    __ load_mirror(t, rmethod);\n+    __ load_mirror(t, rmethod, r10, rscratch2);\n@@ -1405,1 +1405,1 @@\n-    __ resolve_jobject(r0, rthread, t);\n+    __ resolve_jobject(r0, t, rscratch2);\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-  __ store_heap_oop(dst, val, r10, r1, r3, decorators);\n+  __ store_heap_oop(dst, val, r10, r11, r3, decorators);\n@@ -156,1 +156,1 @@\n-  __ load_heap_oop(dst, src, r10, r1, decorators);\n+  __ load_heap_oop(dst, src, r10, r11, decorators);\n@@ -414,1 +414,1 @@\n-    __ resolve_oop_handle(tmp);\n+    __ resolve_oop_handle(tmp, r5, rscratch2);\n@@ -2319,1 +2319,1 @@\n-    __ resolve_oop_handle(obj);\n+    __ resolve_oop_handle(obj, r5, rscratch2);\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -228,1 +228,1 @@\n-  __ resolve_jobject(shuffle_reg, rthread, rscratch2);\n+  __ resolve_jobject(shuffle_reg, rscratch1, rscratch2);\n","filename":"src\/hotspot\/cpu\/aarch64\/upcallLinker_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}