{"files":[{"patch":"@@ -38,0 +38,2 @@\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n@@ -110,1 +112,1 @@\n-            List<String> protocolNames = new LinkedList<>();\n+            Stream.Builder<String> alpnNames = Stream.builder();\n@@ -121,2 +123,1 @@\n-                String appProtocol = new String(bytes, alpnCharset);\n-                protocolNames.add(appProtocol);\n+                alpnNames.accept(new String(bytes, alpnCharset));\n@@ -126,1 +127,2 @@\n-                    Collections.unmodifiableList(protocolNames);\n+                    alpnNames.build().distinct().\n+                            collect(Collectors.toUnmodifiableList());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/AlpnExtension.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertSignAlgsExtension.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.io.ByteArrayOutputStream;\n@@ -38,0 +39,2 @@\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n@@ -180,2 +183,2 @@\n-            byte[] encodedIds = Record.getBytes16(m);\n-            if (encodedIds.length == 0 || (encodedIds.length & 0x01) != 0) {\n+            int csLen = Short.toUnsignedInt(m.getShort());\n+            if (csLen == 0 || (csLen & 0x01) != 0) {\n@@ -186,5 +189,3 @@\n-\n-            this.cipherSuiteIds = new int[encodedIds.length >> 1];\n-            for (int i = 0, j = 0; i < encodedIds.length; i++, j++) {\n-                cipherSuiteIds[j] =\n-                    ((encodedIds[i++] & 0xFF) << 8) | (encodedIds[i] & 0xFF);\n+            IntStream.Builder csBldr = IntStream.builder();\n+            for (int i = 0; i < csLen; i += 2) {\n+                csBldr.accept(Short.toUnsignedInt(m.getShort()));\n@@ -192,1 +193,2 @@\n-            this.cipherSuites = getCipherSuites(cipherSuiteIds);\n+            this.cipherSuiteIds = csBldr.build().distinct().toArray();\n+            this.cipherSuites = getCipherSuites(this.cipherSuiteIds);\n@@ -194,1 +196,8 @@\n-            this.compressionMethod = Record.getBytes8(m);\n+            int cmpLen = Byte.toUnsignedInt(m.get());\n+            Stream.Builder<Byte> bbldr = Stream.builder();\n+            for (int i = 0; i < cmpLen; i++) {\n+                bbldr.accept(m.get());\n+            }\n+            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+            bbldr.build().distinct().forEach(bVal -> bos.write(bVal));\n+            this.compressionMethod = bos.toByteArray();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ClientHello.java","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.util.stream.IntStream;\n@@ -92,2 +93,2 @@\n-            byte[] algs = Record.getBytes16(buffer);\n-            if (buffer.hasRemaining()) {\n+            int algsLen = Record.getInt16(buffer);\n+            if (algsLen == 0 || (algsLen & 0x01) != 0) {\n@@ -96,1 +97,1 @@\n-                    \"Invalid signature_algorithms: unknown extra data\"));\n+                                \"Invalid signature_algorithms: incomplete data\"));\n@@ -99,4 +100,3 @@\n-            if (algs == null || algs.length == 0 || (algs.length & 0x01) != 0) {\n-                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n-                        new SSLProtocolException(\n-                    \"Invalid signature_algorithms: incomplete data\"));\n+            IntStream.Builder schBldr = IntStream.builder();\n+            for (int i = 0; i < algsLen; i += 2) {\n+                schBldr.accept(Short.toUnsignedInt(buffer.getShort()));\n@@ -105,5 +105,4 @@\n-            int[] schemes = new int[algs.length \/ 2];\n-            for (int i = 0, j = 0; i < algs.length;) {\n-                byte hash = algs[i++];\n-                byte sign = algs[i++];\n-                schemes[j++] = ((hash & 0xFF) << 8) | (sign & 0xFF);\n+            if (buffer.hasRemaining()) {\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid signature_algorithms: unknown extra data\"));\n@@ -112,1 +111,1 @@\n-            this.signatureSchemes = schemes;\n+            this.signatureSchemes = schBldr.build().distinct().toArray();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SignatureAlgorithmsExtension.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.util.stream.IntStream;\n@@ -91,2 +92,2 @@\n-            byte[] ngs = Record.getBytes16(m);\n-            if (m.hasRemaining()) {\n+            int ngLen = Record.getInt16(m);\n+            if ((ngLen == 0) || (ngLen % 2 != 0)) {\n@@ -95,1 +96,1 @@\n-                    \"Invalid supported_groups extension: unknown extra data\"));\n+                                \"Invalid supported_groups extension: incomplete data\"));\n@@ -98,4 +99,3 @@\n-            if ((ngs == null) || (ngs.length == 0) || (ngs.length % 2 != 0)) {\n-                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n-                        new SSLProtocolException(\n-                    \"Invalid supported_groups extension: incomplete data\"));\n+            IntStream.Builder ngBldr = IntStream.builder();\n+            for (int i = 0; i < ngLen; i += 2) {\n+                ngBldr.accept(Short.toUnsignedInt(m.getShort()));\n@@ -104,3 +104,4 @@\n-            int[] ids = new int[ngs.length \/ 2];\n-            for (int i = 0, j = 0; i < ngs.length;) {\n-                ids[j++] = ((ngs[i++] & 0xFF) << 8) | (ngs[i++] & 0xFF);\n+            if (m.hasRemaining()) {\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid supported_groups extension: unknown extra data\"));\n@@ -109,1 +110,1 @@\n-            this.namedGroupsIds = ids;\n+            this.namedGroupsIds = ngBldr.build().distinct().toArray();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SupportedGroupsExtension.java","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.util.stream.IntStream;\n@@ -85,2 +86,2 @@\n-            byte[] vbs = Record.getBytes8(m);   \/\/ Get the version bytes.\n-            if (m.hasRemaining()) {\n+            int versLen = Record.getInt8(m);   \/\/ Get the version bytes.\n+            if (versLen == 0 || (versLen & 0x01) != 0) {\n@@ -89,1 +90,1 @@\n-                    \"Invalid supported_versions extension: unknown extra data\"));\n+                                \"Invalid supported_versions extension: incomplete data\"));\n@@ -92,4 +93,3 @@\n-            if (vbs == null || vbs.length == 0 || (vbs.length & 0x01) != 0) {\n-                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n-                        new SSLProtocolException(\n-                    \"Invalid supported_versions extension: incomplete data\"));\n+            IntStream.Builder pvBldr = IntStream.builder();\n+            for (int i = 0; i < versLen; i += 2) {\n+                pvBldr.accept(Short.toUnsignedInt(m.getShort()));\n@@ -98,5 +98,4 @@\n-            int[] protocols = new int[vbs.length >> 1];\n-            for (int i = 0, j = 0; i < vbs.length;) {\n-                byte major = vbs[i++];\n-                byte minor = vbs[i++];\n-                protocols[j++] = ((major & 0xFF) << 8) | (minor & 0xFF);\n+            if (m.hasRemaining()) {\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid supported_versions extension: unknown extra data\"));\n@@ -105,1 +104,1 @@\n-            this.requestedProtocols = protocols;\n+            this.requestedProtocols = pvBldr.build().distinct().toArray();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SupportedVersionsExtension.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"}]}