{"files":[{"patch":"@@ -73,1 +73,13 @@\n-void MethodHandles::throw_AME(Klass* rcvr, Method* interface_method, TRAPS) {\n+void MethodHandles::setup_frame_anchor(JavaThread* thread) {\n+  assert(!thread->has_last_Java_frame(), \"Do not need to call this otherwise\");\n+\n+  intptr_t *sp = thread->zero_stack()->sp();\n+  ZeroFrame *frame = thread->top_zero_frame();\n+  while (frame) {\n+    if (frame->is_interpreter_frame()) {\n+      interpreterState istate = frame->as_interpreter_frame()->interpreter_state();\n+      if (istate->self_link() == istate) break;\n+    }\n+    sp = ((intptr_t *) frame) + 1;\n+    frame = frame->next();\n+  }\n@@ -75,2 +87,10 @@\n-  JavaThread *thread = THREAD->as_Java_thread();\n-  \/\/ Set up the frame anchor if it isn't already\n+  assert(frame != NULL, \"must be\");\n+  thread->set_last_Java_frame(frame, sp);\n+}\n+\n+void MethodHandles::teardown_frame_anchor(JavaThread* thread) {\n+  thread->reset_last_Java_frame();\n+}\n+\n+void MethodHandles::throw_AME(Klass* rcvr, Method* interface_method, TRAPS) {\n+  JavaThread* thread = THREAD->as_Java_thread();\n@@ -79,16 +99,1 @@\n-    intptr_t *sp = thread->zero_stack()->sp();\n-    ZeroFrame *frame = thread->top_zero_frame();\n-    while (frame) {\n-      if (frame->is_interpreter_frame()) {\n-        interpreterState istate =\n-          frame->as_interpreter_frame()->interpreter_state();\n-        if (istate->self_link() == istate)\n-          break;\n-      }\n-\n-      sp = ((intptr_t *) frame) + 1;\n-      frame = frame->next();\n-    }\n-\n-    assert(frame != NULL, \"must be\");\n-    thread->set_last_Java_frame(frame, sp);\n+    setup_frame_anchor(thread);\n@@ -97,1 +102,0 @@\n-  \/\/ Reset the frame anchor if necessary\n@@ -99,1 +103,1 @@\n-    thread->reset_last_Java_frame();\n+    teardown_frame_anchor(thread);\n@@ -101,0 +105,1 @@\n+}\n@@ -102,0 +107,10 @@\n+void MethodHandles::throw_NPE(TRAPS) {\n+  JavaThread* thread = THREAD->as_Java_thread();\n+  bool has_last_Java_frame = thread->has_last_Java_frame();\n+  if (!has_last_Java_frame) {\n+    setup_frame_anchor(thread);\n+  }\n+  InterpreterRuntime::throw_NullPointerException(thread);\n+  if (!has_last_Java_frame) {\n+    teardown_frame_anchor(thread);\n+  }\n@@ -113,1 +128,8 @@\n-  oop lform1 = java_lang_invoke_MethodHandle::form(STACK_OBJECT(-numArgs)); \/\/ this.form\n+\n+  oop recv = STACK_OBJECT(-numArgs);\n+  if (recv == NULL) {\n+    throw_NPE(THREAD);\n+    return 0;\n+  }\n+\n+  oop lform1 = java_lang_invoke_MethodHandle::form(recv); \/\/ this.form\n@@ -153,0 +175,4 @@\n+  if (recv == NULL) {\n+    throw_NPE(THREAD);\n+    return 0;\n+  }\n@@ -190,0 +216,1 @@\n+\n@@ -192,0 +219,5 @@\n+  if (recv == NULL) {\n+    throw_NPE(THREAD);\n+    return 0;\n+  }\n+\n","filename":"src\/hotspot\/cpu\/zero\/methodHandles_zero.cpp","additions":54,"deletions":22,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+  static void setup_frame_anchor(JavaThread* thread);\n+  static void teardown_frame_anchor(JavaThread* thread);\n@@ -36,0 +38,1 @@\n+  static void throw_NPE(TRAPS);\n","filename":"src\/hotspot\/cpu\/zero\/methodHandles_zero.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -635,0 +635,4 @@\n+JRT_ENTRY(void, InterpreterRuntime::throw_NullPointerException(JavaThread* thread))\n+  THROW(vmSymbols::java_lang_NullPointerException());\n+JRT_END\n+\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,0 +85,2 @@\n+  static void    throw_NullPointerException(JavaThread* thread);\n+\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}