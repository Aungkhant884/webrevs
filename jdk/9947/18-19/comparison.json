{"files":[{"patch":"@@ -399,1 +399,1 @@\n-  if (Matcher::use_asm_for_ldiv_by_con(d)) {\n+  if (Matcher::use_asm_for_ldiv_by_con(divisor)) {\n@@ -679,1 +679,1 @@\n-  assert(q != nullptr || !Matcher::use_asm_for_ldiv_by_con(i2_con), \"sanity\");\n+  assert(q != nullptr || Matcher::use_asm_for_ldiv_by_con(i2_con), \"sanity\");\n@@ -848,1 +848,1 @@\n-  assert(q != nullptr || Matcher::match_rule_supported(Op_UMulHiL), \"sanity\");\n+  assert(q != nullptr || !Matcher::match_rule_supported(Op_UMulHiL), \"sanity\");\n@@ -1434,1 +1434,1 @@\n-    assert(Matcher::match_rule_supported(Op_UMulHiL), \"sanity\");\n+    assert(!Matcher::match_rule_supported(Op_UMulHiL), \"sanity\");\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1084,1 +1084,1 @@\n-  return (x > 0) ? x : U(0) - U(x);\n+  return (x >= 0) ? x : U(0) - U(x);\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -181,0 +181,1 @@\n+template void magic_divide_constants<std::make_unsigned_t<jlong>>(julong, julong, julong, juint, julong&, bool&, juint&);\n","filename":"src\/hotspot\/share\/utilities\/javaArithmetic.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-  using UT = typename std::make_unsigned<T>::type;\n+  using UT = typename std::make_unsigned_t<T>;\n@@ -105,1 +105,1 @@\n-  using UT = typename std::make_unsigned<T>::type;\n+  using UT = typename std::make_unsigned_t<T>;\n","filename":"test\/hotspot\/gtest\/opto\/test_constant_division.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}