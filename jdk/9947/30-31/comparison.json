{"files":[{"patch":"@@ -30,0 +30,3 @@\n+\n+#undef assert\n+\n","filename":"test\/hotspot\/gtest\/opto\/test_constant_division.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -114,0 +114,7 @@\n+    @Benchmark\n+    public void testDivideConstantBounded() {\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            quotients[i] = (short)dividends[i] \/ 7;\n+        }\n+    }\n+\n@@ -121,0 +128,7 @@\n+    @Benchmark\n+    public void testDivideUnsignedConstantBounded() {\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            quotients[i] = Integer.divideUnsigned((char)dividends[i], 15);\n+        }\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/IntegerDivMod.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -107,0 +107,7 @@\n+    @Benchmark\n+    public void testDivideConstantBounded() {\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            quotients[i] = (int)dividends[i] \/ 7L;\n+        }\n+    }\n+\n@@ -114,0 +121,7 @@\n+    @Benchmark\n+    public void testDivideUnsignedConstantBounded() {\n+        for (int i = 0; i < BUFFER_SIZE; i++) {\n+            quotients[i] = Long.divideUnsigned(Integer.toUnsignedLong((int)dividends[i]), 15);\n+        }\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/LongDivMod.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"}]}