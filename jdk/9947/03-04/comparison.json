{"files":[{"patch":"@@ -231,1 +231,1 @@\n-   do_name(     divideUnsigned_name,                             \"divideUnsigned\")                                      \\\n+   do_name(     divideUnsigned_name,                             \"divideUnsigned0\")                                     \\\n@@ -234,1 +234,1 @@\n-   do_name(     remainderUnsigned_name,                          \"remainderUnsigned\")                                   \\\n+   do_name(     remainderUnsigned_name,                          \"remainderUnsigned0\")                                  \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1547,1 +1547,0 @@\n-    @IntrinsicCandidate\n@@ -1549,0 +1548,11 @@\n+        if (divisor > 0) {\n+            return divideUnsigned0(dividend, divisor);\n+        } else if (divisor < 0) {\n+            return compareUnsigned(dividend, divisor) >= 0 ? 1 : 0;\n+        } else {\n+            throw new ArithmeticException(\"\/ by zero\");\n+        }\n+    }\n+\n+    @IntrinsicCandidate\n+    private static int divideUnsigned0(int dividend, int divisor) {\n@@ -1565,1 +1575,0 @@\n-    @IntrinsicCandidate\n@@ -1567,0 +1576,13 @@\n+        if (divisor > 0) {\n+            return remainderUnsigned0(dividend, divisor);\n+        } else if (divisor < 0) {\n+            return compareUnsigned(dividend, divisor) >= 0\n+                    ? (dividend - divisor)\n+                    : dividend;\n+        } else {\n+            throw new ArithmeticException(\"\/ by zero\");\n+        }\n+    }\n+\n+    @IntrinsicCandidate\n+    private static int remainderUnsigned0(int dividend, int divisor) {\n@@ -1571,1 +1593,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":24,"deletions":3,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1668,1 +1668,0 @@\n-    @IntrinsicCandidate\n@@ -1670,0 +1669,11 @@\n+        if (divisor > 0) {\n+            return divideUnsigned0(dividend, divisor);\n+        } else if (divisor < 0) {\n+            return compareUnsigned(dividend, divisor) >= 0 ? 1 : 0;\n+        } else {\n+            throw new ArithmeticException(\"\/ by zero\");\n+        }\n+    }\n+\n+    @IntrinsicCandidate\n+    private static long divideUnsigned0(long dividend, long divisor) {\n@@ -1691,1 +1701,0 @@\n-    @IntrinsicCandidate\n@@ -1693,0 +1702,13 @@\n+        if (divisor > 0) {\n+            return remainderUnsigned0(dividend, divisor);\n+        } else if (divisor < 0) {\n+            return compareUnsigned(dividend, divisor) >= 0 \n+                    ? (dividend - divisor)\n+                    : dividend;\n+        } else {\n+            throw new ArithmeticException(\"\/ by zero\");\n+        }\n+    }\n+\n+    @IntrinsicCandidate\n+    private static long remainderUnsigned0(long dividend, long divisor) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-    @IR(counts = {IRNode.DIV_BY_ZERO_TRAP, \"1\"})\n+    @IR(counts = {IRNode.ALLOC_OF, \"java\/lang\/ArithmeticException\", \"1\"})\n@@ -140,1 +140,1 @@\n-    @IR(counts = {IRNode.DIV_BY_ZERO_TRAP, \"1\"})\n+    @IR(counts = {IRNode.ALLOC_OF, \"java\/lang\/ArithmeticException\", \"1\"})\n@@ -149,1 +149,1 @@\n-                  IRNode.DIV_BY_ZERO_TRAP, \"1\"\n+                  IRNode.ALLOC_OF, \"java\/lang\/ArithmeticException\", \"1\"\n@@ -204,1 +204,1 @@\n-    @IR(counts = {IRNode.DIV_BY_ZERO_TRAP, \"1\"})\n+    @IR(counts = {IRNode.ALLOC_OF, \"java\/lang\/ArithmeticException\", \"1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/UDivINodeIdealizationTests.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-    @IR(counts = {IRNode.DIV_BY_ZERO_TRAP, \"1\"})\n+    @IR(counts = {IRNode.ALLOC_OF, \"java\/lang\/ArithmeticException\", \"1\"})\n@@ -141,1 +141,1 @@\n-    @IR(counts = {IRNode.DIV_BY_ZERO_TRAP, \"1\"})\n+    @IR(counts = {IRNode.ALLOC_OF, \"java\/lang\/ArithmeticException\", \"1\"})\n@@ -150,1 +150,1 @@\n-                  IRNode.DIV_BY_ZERO_TRAP, \"1\"\n+                  IRNode.ALLOC_OF, \"java\/lang\/ArithmeticException\", \"1\"\n@@ -202,1 +202,1 @@\n-    @IR(counts = {IRNode.DIV_BY_ZERO_TRAP, \"1\"})\n+    @IR(counts = {IRNode.ALLOC_OF, \"java\/lang\/ArithmeticException\", \"1\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/UDivLNodeIdealizationTests.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import java.util.random.RandomGenerator;\n+import java.util.random.RandomGeneratorFactory;\n@@ -50,0 +50,2 @@\n+    @Param({\"mixed\", \"positive\", \"negative\"})\n+    String divisorType;\n@@ -52,0 +54,1 @@\n+\n@@ -60,1 +63,1 @@\n-        var rng = RandomGenerator.getDefault();\n+        var rng = RandomGeneratorFactory.getDefault().create(0);\n@@ -64,1 +67,13 @@\n-            divisors[i] = divisor == 0 ? 1 : divisor;\n+            divisor = divisor == 0 ? 1 : divisor;\n+            if (divisorType.equals(\"positive\")) {\n+                if (divisor == Integer.MIN_VALUE) {\n+                    divisor = Integer.MAX_VALUE;\n+                } else if (divisor < 0) {\n+                    divisor = -divisor;\n+                }\n+            } else if (divisorType.equals(\"negative\")) {\n+                if (divisor > 0) {\n+                    divisor = -divisor;\n+                }\n+            }\n+            divisors[i] = divisor;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/IntegerDivMod.java","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import java.util.random.RandomGenerator;\n@@ -27,0 +26,1 @@\n+import java.util.random.RandomGeneratorFactory;\n@@ -50,0 +50,2 @@\n+    @Param({\"mixed\", \"positive\", \"negative\"})\n+    String divisorType;\n@@ -52,0 +54,1 @@\n+\n@@ -60,1 +63,1 @@\n-        var rng = RandomGenerator.getDefault();\n+        var rng = RandomGeneratorFactory.getDefault().create(0);\n@@ -64,1 +67,13 @@\n-            divisors[i] = divisor == 0 ? 1 : divisor;\n+            divisor = divisor == 0 ? 1 : divisor;\n+            if (divisorType.equals(\"positive\")) {\n+                if (divisor == Long.MIN_VALUE) {\n+                    divisor = Long.MAX_VALUE;\n+                } else if (divisor < 0) {\n+                    divisor = -divisor;\n+                }\n+            } else if (divisorType.equals(\"negative\")) {\n+                if (divisor > 0) {\n+                    divisor = -divisor;\n+                }\n+            }\n+            divisors[i] = divisor;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/LongDivMod.java","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"}]}