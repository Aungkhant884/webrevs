{"files":[{"patch":"@@ -89,2 +89,1 @@\n-\/\/ by constant into a multiply\/add\/shift series. Return false if calculations\n-\/\/ fail.\n+\/\/ by constant into a multiply\/add\/shift series.\n@@ -133,2 +132,1 @@\n-\/\/ by constant into a multiply\/add\/shift series. Return false if calculations\n-\/\/ fail.\n+\/\/ by constant into a multiply\/add\/shift series.\n@@ -155,1 +153,1 @@\n-static Node *transform_int_divide( PhaseGVN *phase, Node *dividend, jint divisor ) {\n+static Node* transform_int_divide( PhaseGVN* phase, Node* dividend, jint divisor ) {\n@@ -166,1 +164,1 @@\n-  Node *q = NULL;\n+  Node* q = NULL;\n@@ -179,2 +177,2 @@\n-    const Type *dt = phase->type(dividend);\n-    const TypeInt *dti = dt->isa_int();\n+    const Type* dt = phase->type(dividend);\n+    const TypeInt* dti = dt->isa_int();\n@@ -187,1 +185,1 @@\n-      const TypeInt *andconi_t = phase->type( dividend->in(2) )->isa_int();\n+      const TypeInt* andconi_t = phase->type( dividend->in(2) )->isa_int();\n@@ -209,1 +207,1 @@\n-      Node *sign = phase->transform(new RShiftINode(dividend, phase->intcon(N - 1)));\n+      Node* sign = phase->transform(new RShiftINode(dividend, phase->intcon(N - 1)));\n@@ -211,1 +209,1 @@\n-      Node *round = phase->transform(new URShiftINode(sign, phase->intcon(N - l)));\n+      Node* round = phase->transform(new URShiftINode(sign, phase->intcon(N - l)));\n@@ -236,2 +234,2 @@\n-    Node *magic = phase->longcon(magic_const);\n-    Node *dividend_long = phase->transform(new ConvI2LNode(dividend));\n+    Node* magic = phase->longcon(magic_const);\n+    Node* dividend_long = phase->transform(new ConvI2LNode(dividend));\n@@ -240,1 +238,1 @@\n-    Node *mul_hi = phase->transform(new MulLNode(dividend_long, magic));\n+    Node* mul_hi = phase->transform(new MulLNode(dividend_long, magic));\n@@ -247,2 +245,2 @@\n-    Node *addend0 = mul_hi;\n-    Node *addend1 = phase->transform(new RShiftINode(dividend, phase->intcon(N-1)));\n+    Node* addend0 = mul_hi;\n+    Node* addend1 = phase->transform(new RShiftINode(dividend, phase->intcon(N-1)));\n@@ -253,1 +251,1 @@\n-      Node *temp = addend0; addend0 = addend1; addend1 = temp;\n+      Node* temp = addend0; addend0 = addend1; addend1 = temp;\n@@ -267,1 +265,1 @@\n-static Node *transform_int_udivide( PhaseGVN *phase, Node *dividend, juint divisor ) {\n+static Node* transform_int_udivide( PhaseGVN* phase, Node* dividend, juint divisor ) {\n@@ -272,1 +270,1 @@\n-  Node *q = NULL;\n+  Node* q = NULL;\n@@ -283,1 +281,1 @@\n-    Node *dividend_long = phase->transform(new ConvI2LNode(dividend));\n+    Node* dividend_long = phase->transform(new ConvI2LNode(dividend));\n@@ -301,1 +299,1 @@\n-      Node *magic = phase->longcon(magic_const);\n+      Node* magic = phase->longcon(magic_const);\n@@ -304,1 +302,1 @@\n-      Node *mul_hi = phase->transform(new MulLNode(dividend_long, magic));\n+      Node* mul_hi = phase->transform(new MulLNode(dividend_long, magic));\n@@ -318,1 +316,1 @@\n-      Node *mul_hi = phase->transform(new AddLNode(dividend_long, phase->longcon(1)));\n+      Node* mul_hi = phase->transform(new AddLNode(dividend_long, phase->longcon(1)));\n@@ -332,2 +330,1 @@\n-\/\/ by constant into a multiply\/shift\/add series. Return false if calculations\n-\/\/ fail.\n+\/\/ by constant into a multiply\/shift\/add series.\n@@ -617,1 +614,1 @@\n-static Node *transform_long_udivide( PhaseGVN *phase, Node *dividend, julong divisor ) {\n+static Node* transform_long_udivide( PhaseGVN* phase, Node* dividend, julong divisor ) {\n@@ -622,1 +619,1 @@\n-  Node *q = NULL;\n+  Node* q = NULL;\n@@ -642,1 +639,1 @@\n-    Node *magic = phase->longcon(magic_const);\n+    Node* magic = phase->longcon(magic_const);\n@@ -644,1 +641,1 @@\n-    Node *mul_hi = phase->transform(new UMulHiLNode(dividend, magic));\n+    Node* mul_hi = phase->transform(new UMulHiLNode(dividend, magic));\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":26,"deletions":29,"binary":false,"changes":55,"status":"modified"}]}