{"files":[{"patch":"@@ -284,0 +284,1 @@\n+  GrowableArray<JavaObjectNode*> jobj_worklist;\n@@ -285,0 +286,1 @@\n+  bool found_nsr_alloc = false;\n@@ -295,1 +297,3 @@\n-        alloc_worklist.append(ptn->ideal_node());\n+        jobj_worklist.push(ptn);\n+      } else {\n+        found_nsr_alloc = true;\n@@ -300,0 +304,12 @@\n+  \/\/ Propagate NSR (Not Scalar Replaceable) state.\n+  if (found_nsr_alloc) {\n+    find_scalar_replaceable_allocs(jobj_worklist);\n+  }\n+\n+  for (int next = 0; next < jobj_worklist.length(); ++next) {\n+    JavaObjectNode* jobj = jobj_worklist.at(next);\n+    if (jobj->scalar_replaceable()) {\n+      alloc_worklist.append(jobj->ideal_node());\n+    }\n+  }\n+\n@@ -1864,9 +1880,13 @@\n-      \/\/ 2. An object is not scalar replaceable if the field into which it is\n-      \/\/ stored has multiple bases one of which is null.\n-      if (field->base_count() > 1) {\n-        for (BaseIterator i(field); i.has_next(); i.next()) {\n-          PointsToNode* base = i.get();\n-          if (base == null_obj) {\n-            set_not_scalar_replaceable(jobj NOT_PRODUCT(COMMA \"is stored into field with potentially null base\"));\n-            return;\n-          }\n+      for (BaseIterator i(field); i.has_next(); i.next()) {\n+        PointsToNode* base = i.get();\n+        \/\/ 2. An object is not scalar replaceable if the field into which it is\n+        \/\/ stored has multiple bases one of which is null.\n+        if ((base == null_obj) && (field->base_count() > 1)) {\n+          set_not_scalar_replaceable(jobj NOT_PRODUCT(COMMA \"is stored into field with potentially null base\"));\n+          return;\n+        }\n+        \/\/ 2.5. An object is not scalar replaceable if the field into which it is\n+        \/\/ stored has NSR base.\n+        if (!base->scalar_replaceable()) {\n+          set_not_scalar_replaceable(jobj NOT_PRODUCT(COMMA \"is stored into field with NSR base\"));\n+          return;\n@@ -1962,0 +1982,30 @@\n+\/\/ Propagate NSR (Not scalar replaceable) state.\n+void ConnectionGraph::find_scalar_replaceable_allocs(GrowableArray<JavaObjectNode*>& jobj_worklist) {\n+  int jobj_length = jobj_worklist.length();\n+  bool found_nsr_alloc = true;\n+  while (found_nsr_alloc) {\n+    found_nsr_alloc = false;\n+    for (int next = 0; next < jobj_length; ++next) {\n+      JavaObjectNode* jobj = jobj_worklist.at(next);\n+      for (UseIterator i(jobj); (jobj->scalar_replaceable() && i.has_next()); i.next()) {\n+        PointsToNode* use = i.get();\n+        if (use->is_Field()) {\n+          FieldNode* field = use->as_Field();\n+          assert(field->is_oop() && field->scalar_replaceable(), \"sanity\");\n+          assert(field->offset() != Type::OffsetBot, \"sanity\");\n+          for (BaseIterator i(field); i.has_next(); i.next()) {\n+            PointsToNode* base = i.get();\n+            \/\/ An object is not scalar replaceable if the field into which\n+            \/\/ it is stored has NSR base.\n+            if ((base != null_obj) && !base->scalar_replaceable()) {\n+              set_not_scalar_replaceable(jobj NOT_PRODUCT(COMMA \"is stored into field with NSR base\"));\n+              found_nsr_alloc = true;\n+              break;\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":60,"deletions":10,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -466,0 +466,3 @@\n+  \/\/ Propagate NSR (Not scalar replaceable) state.\n+  void find_scalar_replaceable_allocs(GrowableArray<JavaObjectNode*>& jobj_worklist);\n+\n","filename":"src\/hotspot\/share\/opto\/escape.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/* Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8285835\n+ * @summary EA does not propagate NSR (not scalar replaceable) state.\n+ * @run main\/othervm -XX:-TieredCompilation -XX:-BackgroundCompilation -XX:-UseOnStackReplacement TestBrokenEA\n+ *\/\n+\n+public class TestBrokenEA {\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 20_000; i++) {\n+            test1(true);\n+            test1(false);\n+            test2(true);\n+            test2(false);\n+        }\n+    }\n+\n+    private static void test1(boolean flag) {\n+        A[] array = new A[1];\n+        if (flag) {\n+            C c = new C();\n+            B b = new B();\n+            b.c = c;\n+            A a = new A();\n+            a.b = b;\n+            array[0] = a;\n+        }\n+        A a = array[0];\n+        if (a != null) {\n+            a.b.c.f = 0x42;\n+        }\n+    }\n+\n+    private static void test2(boolean flag) {\n+        A a = null;\n+        if (flag) {\n+            C c = new C();\n+            B b = new B();\n+            b.c = c;\n+            a = new A();\n+            a.b = b;\n+        }\n+        if (a != null) {\n+            a.b.c.f = 0x42;\n+        }\n+    }\n+\n+    private static class A {\n+        public B b;\n+    }\n+\n+    private static class B {\n+        public C c;\n+    }\n+\n+    private static class C {\n+        public int f;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/escapeAnalysis\/TestBrokenEA.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}