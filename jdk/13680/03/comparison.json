{"files":[{"patch":"@@ -292,0 +292,2 @@\n+        Objects.checkFromToIndex(start, end, csq.length());\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Heap-X-Buffer.java.template","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2048,0 +2048,2 @@\n+            Objects.checkFromToIndex(start, end, csq.length());\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/X-Buffer.java.template","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -633,1 +633,1 @@\n-        \/\/ 8306623\n+        \/\/ 8306623 and 8306959\n@@ -664,0 +664,4 @@\n+                CharBuffer cb = f.apply(7);\n+                tryCatch(cbBOE, BufferOverflowException.class, () ->\n+                    cb.append(csq.subSequence(0, 8), 0, 8));\n+\n@@ -669,0 +673,11 @@\n+\n+                tryCatch(cb, IndexOutOfBoundsException.class, () ->\n+                    cb.append(csq.subSequence(0, 8), 4, 12));\n+\n+                \/\/ should append nothing\n+                int rem = cb.remaining();\n+                ck(cb, cb.append(csq, 0, 0).remaining(), rem);\n+\n+                \/\/ should fill the buffer\n+                int start = (csq.length() - rem)\/2;\n+                ck(cb, cb.append(csq, start, start + rem).remaining(), 0);\n@@ -671,1 +686,1 @@\n-        \/\/ end 8306623\n+        \/\/ end 8306623 and 8306959\n","filename":"test\/jdk\/java\/nio\/Buffer\/Basic-X.java.template","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- *      7199551 8065556 8149469 8230665 8237514 8306374 8306623\n+ *      7199551 8065556 8149469 8230665 8237514 8306374 8306623 8306959\n","filename":"test\/jdk\/java\/nio\/Buffer\/Basic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,3 @@\n+\n+\n+\n@@ -644,0 +647,54 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicByte.java","additions":58,"deletions":1,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -633,1 +633,1 @@\n-        \/\/ 8306623\n+        \/\/ 8306623 and 8306959\n@@ -664,0 +664,4 @@\n+                CharBuffer cb = f.apply(7);\n+                tryCatch(cbBOE, BufferOverflowException.class, () ->\n+                    cb.append(csq.subSequence(0, 8), 0, 8));\n+\n@@ -669,0 +673,11 @@\n+\n+                tryCatch(cb, IndexOutOfBoundsException.class, () ->\n+                    cb.append(csq.subSequence(0, 8), 4, 12));\n+\n+                \/\/ should append nothing\n+                int rem = cb.remaining();\n+                ck(cb, cb.append(csq, 0, 0).remaining(), rem);\n+\n+                \/\/ should fill the buffer\n+                int start = (csq.length() - rem)\/2;\n+                ck(cb, cb.append(csq, start, start + rem).remaining(), 0);\n@@ -671,1 +686,1 @@\n-        \/\/ end 8306623\n+        \/\/ end 8306623 and 8306959\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicChar.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,3 @@\n+\n+\n+\n@@ -644,0 +647,54 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicDouble.java","additions":58,"deletions":1,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,3 @@\n+\n+\n+\n@@ -644,0 +647,54 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicFloat.java","additions":58,"deletions":1,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,3 @@\n+\n+\n+\n@@ -644,0 +647,54 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicInt.java","additions":58,"deletions":1,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,3 @@\n+\n+\n+\n@@ -644,0 +647,54 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicLong.java","additions":58,"deletions":1,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,3 @@\n+\n+\n+\n@@ -644,0 +647,54 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicShort.java","additions":58,"deletions":1,"binary":false,"changes":59,"status":"modified"}]}