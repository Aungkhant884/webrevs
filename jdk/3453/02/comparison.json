{"files":[{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"gc\/z\/zAbort.hpp\"\n+#include \"runtime\/atomic.hpp\"\n+\n+volatile bool ZAbort::_should_abort = false;\n+\n+void ZAbort::abort() {\n+  Atomic::release_store_fence(&_should_abort, true);\n+}\n","filename":"src\/hotspot\/share\/gc\/z\/zAbort.cpp","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifndef SHARE_GC_Z_ZABORT_HPP\n+#define SHARE_GC_Z_ZABORT_HPP\n+\n+#include \"memory\/allocation.hpp\"\n+\n+class ZAbort : public AllStatic {\n+private:\n+  static volatile bool _should_abort;\n+\n+public:\n+  static bool should_abort();\n+  static void abort();\n+};\n+\n+#endif \/\/ SHARE_GC_Z_ZABORT_HPP\n","filename":"src\/hotspot\/share\/gc\/z\/zAbort.hpp","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifndef SHARE_GC_Z_ZABORT_INLINE_HPP\n+#define SHARE_GC_Z_ZABORT_INLINE_HPP\n+\n+#include \"gc\/z\/zAbort.hpp\"\n+#include \"runtime\/atomic.hpp\"\n+\n+inline bool ZAbort::should_abort() {\n+  return Atomic::load_acquire(&_should_abort);\n+}\n+\n+#endif \/\/ SHARE_GC_Z_ZABORT_INLINE_HPP\n","filename":"src\/hotspot\/share\/gc\/z\/zAbort.inline.hpp","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/z\/zAbort.inline.hpp\"\n@@ -400,0 +401,8 @@\n+#define concurrent(f)                 \\\n+  do {                                \\\n+    concurrent_##f();                 \\\n+    if (should_terminate()) {         \\\n+      return;                         \\\n+    }                                 \\\n+  } while (false)\n+\n@@ -407,1 +416,1 @@\n-  concurrent_mark();\n+  concurrent(mark);\n@@ -412,1 +421,1 @@\n-    concurrent_mark_continue();\n+    concurrent(mark_continue);\n@@ -416,1 +425,1 @@\n-  concurrent_process_non_strong_references();\n+  concurrent(process_non_strong_references);\n@@ -419,1 +428,1 @@\n-  concurrent_reset_relocation_set();\n+  concurrent(reset_relocation_set);\n@@ -425,1 +434,1 @@\n-  concurrent_select_relocation_set();\n+  concurrent(select_relocation_set);\n@@ -431,1 +440,1 @@\n-  concurrent_relocate();\n+  concurrent(relocate);\n@@ -459,0 +468,1 @@\n+  ZAbort::abort();\n","filename":"src\/hotspot\/share\/gc\/z\/zDriver.cpp","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -61,1 +61,2 @@\n-      wait_page_released();\n+      const bool success = wait_page_released();\n+      assert(success, \"Should always succeed\");\n@@ -132,1 +133,1 @@\n-void ZForwarding::wait_page_released() const {\n+bool ZForwarding::wait_page_released() const {\n@@ -134,1 +135,0 @@\n-    ZStatTimer timer(ZCriticalPhaseRelocationStall);\n@@ -136,0 +136,5 @@\n+    if (_ref_abort) {\n+      return false;\n+    }\n+\n+    ZStatTimer timer(ZCriticalPhaseRelocationStall);\n@@ -137,0 +142,4 @@\n+      if (_ref_abort) {\n+        return false;\n+      }\n+\n@@ -140,0 +149,2 @@\n+\n+  return true;\n@@ -157,0 +168,8 @@\n+void ZForwarding::abort_page() {\n+  ZLocker<ZConditionLock> locker(&_ref_lock);\n+  assert(Atomic::load(&_ref_count) > 0, \"Invalid state\");\n+  assert(!_ref_abort, \"Invalid state\");\n+  _ref_abort = true;\n+  _ref_lock.notify_all();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zForwarding.cpp","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+  bool                   _ref_abort;\n@@ -73,1 +74,1 @@\n-  void wait_page_released() const;\n+  bool wait_page_released() const;\n@@ -75,0 +76,1 @@\n+  void abort_page();\n","filename":"src\/hotspot\/share\/gc\/z\/zForwarding.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+    _ref_abort(false),\n","filename":"src\/hotspot\/share\/gc\/z\/zForwarding.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"gc\/z\/zAbort.inline.hpp\"\n@@ -349,1 +350,1 @@\n-  return true;\n+  return !timeout->has_expired();\n@@ -489,1 +490,2 @@\n-    return false;\n+    \/\/ No timeout, but check for signal to abort\n+    return ZAbort::should_abort();\n@@ -498,1 +500,4 @@\n-    drain_and_flush(stripe, stacks, cache, &no_timeout);\n+    if (!drain_and_flush(stripe, stacks, cache, &no_timeout)) {\n+      \/\/ Abort\n+      break;\n+    }\n","filename":"src\/hotspot\/share\/gc\/z\/zMark.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc\/z\/zAbort.inline.hpp\"\n@@ -106,3 +107,8 @@\n-    \/\/ Failed to relocate object. Wait for a worker thread to\n-    \/\/ complete relocation of this page, and then forward object.\n-    forwarding->wait_page_released();\n+    \/\/ Failed to relocate object. Wait for a worker thread to complete\n+    \/\/ relocation of this page, and then forward the object. If the GC\n+    \/\/ aborts the relocation phase before the page has been relocated,\n+    \/\/ then wait return false and we just forward the object in-place.\n+    if (!forwarding->wait_page_released()) {\n+      \/\/ Forward object in-place\n+      return forwarding_insert(forwarding, from_addr, from_addr, &cursor);\n+    }\n@@ -342,1 +348,0 @@\n-    \/\/ Relocate objects\n@@ -344,0 +349,8 @@\n+\n+    \/\/ Check if we should abort\n+    if (ZAbort::should_abort()) {\n+      _forwarding->abort_page();\n+      return;\n+    }\n+\n+    \/\/ Relocate objects\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocate.cpp","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc\/z\/zAbort.inline.hpp\"\n@@ -645,0 +646,6 @@\n+  if (ZAbort::should_abort()) {\n+    log_info(gc)(\"Garbage Collection (%s) Aborted\",\n+                 GCCause::to_string(ZCollectedHeap::heap()->gc_cause()));\n+    return;\n+  }\n+\n@@ -715,0 +722,4 @@\n+  if (ZAbort::should_abort()) {\n+    return;\n+  }\n+\n@@ -733,0 +744,4 @@\n+  if (ZAbort::should_abort()) {\n+    return;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}