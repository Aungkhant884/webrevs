{"files":[{"patch":"@@ -42,4 +42,4 @@\n-    private Base64.Encoder encoder, mimeEncoder;\n-    private Base64.Decoder decoder, mimeDecoder;\n-    private ArrayList<byte[]> encoded, mimeEncoded, errorEncoded;\n-    private byte[] decoded, mimeDecoded, errorDecoded;\n+    private Base64.Encoder encoder, mimeEncoder, urlEncoder;\n+    private Base64.Decoder decoder, mimeDecoder, urlDecoder;\n+    private ArrayList<byte[]> encoded, mimeEncoded, urlEncoded, errorEncoded;\n+    private byte[] decoded, mimeDecoded, urlDecoded, errorDecoded;\n@@ -63,0 +63,3 @@\n+    @Param({\"0\"})\n+    private int addSpecial;\n+\n@@ -77,0 +80,5 @@\n+        urlDecoded = new byte[maxNumBytes + 1];\n+        urlEncoder = Base64.getUrlEncoder();\n+        urlDecoder = Base64.getUrlDecoder();\n+        urlEncoded = new ArrayList<byte[]> ();\n+\n@@ -86,0 +94,4 @@\n+            if(addSpecial != 0){\n+              dst[0] = '\/';\n+              dst[1] = '+';\n+            }\n@@ -95,0 +107,11 @@\n+            int urlSrcLen = 1 + r.nextInt(maxNumBytes);\n+            byte[] urlSrc = new byte[urlSrcLen];\n+            byte[] urlDst = new byte[((urlSrcLen + 2) \/ 3) * 4];\n+            r.nextBytes(urlSrc);\n+            urlEncoder.encode(urlSrc, urlDst);\n+            if(addSpecial != 0){\n+              urlDst[0] = '_';\n+              urlDst[1] = '-';\n+            }\n+            urlEncoded.add(urlDst);\n+\n@@ -100,1 +123,0 @@\n-            errorEncoded.add(errorDst);\n@@ -102,0 +124,1 @@\n+            errorEncoded.add(errorDst);\n@@ -123,0 +146,9 @@\n+    @Benchmark\n+    @OperationsPerInvocation(TESTSIZE)\n+    public void testBase64URLDecode(Blackhole bh) {\n+        for (byte[] s : urlEncoded) {\n+            urlDecoder.decode(s, urlDecoded);\n+            bh.consume(urlDecoded);\n+        }\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/Base64Decode.java","additions":37,"deletions":5,"binary":false,"changes":42,"status":"modified"}]}