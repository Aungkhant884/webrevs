{"files":[{"patch":"@@ -3992,24 +3992,0 @@\n-    \/\/ At least one method is live in this previous version.\n-    \/\/ Reset dead EMCP methods not to get breakpoints.\n-    \/\/ All methods are deallocated when all of the methods for this class are no\n-    \/\/ longer running.\n-    Array<Method*>* method_refs = pv_node->methods();\n-    if (method_refs != NULL) {\n-      log_trace(redefine, class, iklass, purge)(\"previous methods length=%d\", method_refs->length());\n-      for (int j = 0; j < method_refs->length(); j++) {\n-        Method* method = method_refs->at(j);\n-\n-        if (!method->on_stack()) {\n-          \/\/ no breakpoints for non-running methods\n-          if (method->is_running_emcp()) {\n-            method->set_running_emcp(false);\n-          }\n-        } else {\n-          assert (method->is_obsolete() || method->is_running_emcp(),\n-                  \"emcp method cannot run after emcp bit is cleared\");\n-          log_trace(redefine, class, iklass, purge)\n-            (\"purge: %s(%s): prev method @%d in version @%d is alive\",\n-             method->name()->as_C_string(), method->signature()->as_C_string(), j, version);\n-        }\n-      }\n-    }\n@@ -4115,23 +4091,0 @@\n-  if (emcp_method_count != 0) {\n-    \/\/ At least one method is still running, check for EMCP methods\n-    for (int i = 0; i < old_methods->length(); i++) {\n-      Method* old_method = old_methods->at(i);\n-      if (!old_method->is_obsolete() && old_method->on_stack()) {\n-        \/\/ if EMCP method (not obsolete) is on the stack, mark as EMCP so that\n-        \/\/ we can add breakpoints for it.\n-\n-        \/\/ We set the method->on_stack bit during safepoints for class redefinition\n-        \/\/ and use this bit to set the is_running_emcp bit.\n-        \/\/ After the safepoint, the on_stack bit is cleared and the running emcp\n-        \/\/ method may exit.   If so, we would set a breakpoint in a method that\n-        \/\/ is never reached, but this won't be noticeable to the programmer.\n-        old_method->set_running_emcp(true);\n-        log_trace(redefine, class, iklass, add)\n-          (\"EMCP method %s is on_stack \" INTPTR_FORMAT, old_method->name_and_sig_as_C_string(), p2i(old_method));\n-      } else if (!old_method->is_obsolete()) {\n-        log_trace(redefine, class, iklass, add)\n-          (\"EMCP method %s is NOT on_stack \" INTPTR_FORMAT, old_method->name_and_sig_as_C_string(), p2i(old_method));\n-      }\n-    }\n-  }\n-\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":0,"deletions":47,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2233,2 +2233,0 @@\n-  assert(!value || !is_old() || is_obsolete() || is_running_emcp(),\n-         \"emcp methods cannot run after emcp bit is cleared\");\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,4 +91,3 @@\n-    _running_emcp          = 1 << 5,\n-    _intrinsic_candidate   = 1 << 6,\n-    _reserved_stack_access = 1 << 7,\n-    _scoped                = 1 << 8\n+    _intrinsic_candidate   = 1 << 5,\n+    _reserved_stack_access = 1 << 6,\n+    _scoped                = 1 << 7\n@@ -746,14 +745,0 @@\n-  bool is_running_emcp() const {\n-    \/\/ EMCP methods are old but not obsolete or deleted. Equivalent\n-    \/\/ Modulo Constant Pool means the method is equivalent except\n-    \/\/ the constant pool and instructions that access the constant\n-    \/\/ pool might be different.\n-    \/\/ If a breakpoint is set in a redefined method, its EMCP methods that are\n-    \/\/ still running must have a breakpoint also.\n-    return (_flags & _running_emcp) != 0;\n-  }\n-\n-  void set_running_emcp(bool x) {\n-    _flags = x ? (_flags | _running_emcp) : (_flags & ~_running_emcp);\n-  }\n-\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":3,"deletions":18,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -246,2 +246,11 @@\n-      \/\/ Only set breakpoints in running EMCP methods.\n-      if (method->is_running_emcp() &&\n+      \/\/ Only set breakpoints in EMCP methods.\n+      \/\/ EMCP methods are old but not obsolete. Equivalent\n+      \/\/ Modulo Constant Pool means the method is equivalent except\n+      \/\/ the constant pool and instructions that access the constant\n+      \/\/ pool might be different.\n+      \/\/ If a breakpoint is set in a redefined method, its EMCP methods\n+      \/\/ must have a breakpoint also.\n+      \/\/ None of the methods are deleted until none are running.\n+      \/\/ This code could set a breakpoint in a method that\n+      \/\/ is never reached, but this won't be noticeable to the programmer.\n+      if (!method->is_obsolete() &&\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"}]}