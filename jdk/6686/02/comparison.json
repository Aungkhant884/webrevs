{"files":[{"patch":"@@ -74,1 +74,1 @@\n-      EXCLUDES := sun, \\\n+      EXCLUDES := sun javax\/tools\/snippet-files, \\\n","filename":"make\/CompileInterimLangtools.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+\n+EXCLUDES += javax\/tools\/snippet-files\n","filename":"make\/modules\/java.compiler\/Java.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.net.URI;\n@@ -109,3 +110,3 @@\n- *     <pre>\n- *       File[] files1 = ... ; \/\/ input for first compilation task\n- *       File[] files2 = ... ; \/\/ input for second compilation task\n+ *     {@snippet id=\"use-sjfm\" lang=java :\n+ *       File[] files1 = null ; \/\/ input for first compilation task     \/\/ @replace substring=null replacement=\"...\"\n+ *       File[] files2 = null ; \/\/ input for second compilation task    \/\/ @replace substring=null replacement=\"...\"\n@@ -116,2 +117,2 @@\n- *       {@code Iterable<? extends JavaFileObject>} compilationUnits1 =\n- *           fileManager.getJavaFileObjectsFromFiles({@linkplain java.util.Arrays#asList Arrays.asList}(files1));\n+ *       Iterable<? extends JavaFileObject> compilationUnits1 =\n+ *           fileManager.getJavaFileObjectsFromFiles(Arrays.asList(files1));  \/\/ @link substring=Arrays.asList target=\"java.util.Arrays#asList\"\n@@ -120,1 +121,1 @@\n- *       {@code Iterable<? extends JavaFileObject>} compilationUnits2 =\n+ *       Iterable<? extends JavaFileObject> compilationUnits2 =\n@@ -125,1 +126,2 @@\n- *       fileManager.close();<\/pre>\n+ *       fileManager.close();\n+ *       }\n@@ -132,2 +134,2 @@\n- *     <pre>\n- *       {@code Iterable<? extends JavaFileObject>} compilationUnits = ...;\n+ *     {@snippet id=\"use-diag-collector\" lang=java :\n+ *       Iterable<? extends JavaFileObject> compilationUnits = null;        \/\/ @replace substring=null replacement=\"...\"\n@@ -135,1 +137,1 @@\n- *       {@code DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<JavaFileObject>();}\n+ *       DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<JavaFileObject>();\n@@ -139,1 +141,1 @@\n- *       for ({@code Diagnostic<? extends JavaFileObject>} diagnostic : diagnostics.getDiagnostics())\n+ *       for (Diagnostic<? extends JavaFileObject> diagnostic : diagnostics.getDiagnostics()) {\n@@ -143,0 +145,1 @@\n+ *       }\n@@ -144,1 +147,2 @@\n- *       fileManager.close();<\/pre>\n+ *       fileManager.close();\n+ *       }\n@@ -161,3 +165,3 @@\n- *     <pre>\n- *       final  Logger logger = ...;\n- *       {@code Iterable<? extends JavaFileObject>} compilationUnits = ...;\n+ *     {@snippet id=\"forward-fm\" lang=java :\n+ *       final  Logger logger = null;                                       \/\/ @replace substring=null replacement=\"...\"\n+ *       Iterable<? extends JavaFileObject> compilationUnits = null;        \/\/ @replace substring=null replacement=\"...\"\n@@ -173,1 +177,2 @@\n- *       compiler.getTask(null, fileManager, null, null, null, compilationUnits).call();<\/pre>\n+ *       compiler.getTask(null, fileManager, null, null, null, compilationUnits).call();\n+ *       }\n@@ -184,26 +189,1 @@\n- *     <pre>\n- *       \/**\n- *        * A file object used to represent source coming from a string.\n- *        {@code *}\/\n- *       public class JavaSourceFromString extends SimpleJavaFileObject {\n- *           \/**\n- *            * The source code of this \"file\".\n- *            {@code *}\/\n- *           final String code;\n- *\n- *           \/**\n- *            * Constructs a new JavaSourceFromString.\n- *            * {@code @}param name the name of the compilation unit represented by this file object\n- *            * {@code @}param code the source code for the compilation unit represented by this file object\n- *            {@code *}\/\n- *           JavaSourceFromString(String name, String code) {\n- *               super({@linkplain java.net.URI#create URI.create}(\"string:\/\/\/\" + name.replace('.','\/') + Kind.SOURCE.extension),\n- *                     Kind.SOURCE);\n- *               this.code = code;\n- *           }\n- *\n- *           {@code @}Override\n- *           public CharSequence getCharContent(boolean ignoreEncodingErrors) {\n- *               return code;\n- *           }\n- *       }<\/pre>\n+ *     {@snippet id=fileObject class=JavaSourceFromString }\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/JavaCompiler.java","additions":22,"deletions":42,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.net.URI;\n@@ -81,2 +82,4 @@\n- * <!-- URI.create(relativeName).normalize().getPath().equals(relativeName) -->\n- * <pre>  URI.{@linkplain java.net.URI#create create}(relativeName).{@linkplain java.net.URI#normalize() normalize}().{@linkplain java.net.URI#getPath getPath}().equals(relativeName)<\/pre>\n+ * {@snippet id=\"valid-relative-name\" lang=java :\n+ *     \/\/ @link substring=\"create\" target=\"URI#create\" : @link substring=normalize target=\"URI#normalize\" : @link substring=getPath target=\"URI#getPath\" :\n+ *     URI.create(relativeName).normalize().getPath().equals(relativeName)\n+ *     }\n@@ -359,1 +362,3 @@\n-     * <pre>getFileForInput(SOURCE_PATH, \"com.sun.tools.javac\", \"resources\/compiler.properties\");<\/pre>\n+     * {@snippet id=\"call-getFileForInput\" lang=java :\n+     * getFileForInput(SOURCE_PATH, \"com.sun.tools.javac\", \"resources\/compiler.properties\");\n+     * }\n@@ -569,4 +574,5 @@\n-     * <pre>\n-     *     getFileForInput(location, <i>packageName<\/i>, <i>relativeName<\/i>)\n-     *     getFileForOutput(location, <i>packageName<\/i>, <i>relativeName<\/i>, null)\n-     * <\/pre>\n+     * {@snippet :\n+     *     \/\/ @highlight region substring=packageName type=italic @highlight region substring=relativeName type=italic :\n+     *     getFileForInput(location, packageName, relativeName)\n+     *     getFileForOutput(location, packageName, relativeName, null) \/\/ @end @end\n+     *     }\n@@ -576,3 +582,3 @@\n-     * <pre>\n-     *     getLocationForModule(location, <i>moduleName<\/i>)\n-     * <\/pre>\n+     * {@snippet id=\"call-getLocationForModule\" lang=java :\n+     *     getLocationForModule(location, moduleName) \/\/ @highlight substring=moduleName type=italic\n+     *     }\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/JavaFileManager.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -78,3 +78,4 @@\n- *         <blockquote>\n- *           <pre>new {@linkplain java.io.FileInputStream#FileInputStream(File) FileInputStream}(new {@linkplain File#File(java.net.URI) File}({@linkplain FileObject fileObject}.{@linkplain FileObject#toUri() toUri}()))<\/pre>\n- *         <\/blockquote>\n+ *         {@snippet id=\"equiv-input\" lang=java :\n+ *             \/\/ @link substring=FileInputStream target=\"java.io.FileInputStream#FileInputStream(File)\" : @link regex=\"File\\W\" target=\"File#File(java.net.URI)\" : @link substring=fileObject target=FileObject :  @link substring=toURI target=\"FileObject#toUri()\" :\n+ *             new FileInputStream(new File(fileObject.toURI()))\n+ *             }\n@@ -88,3 +89,4 @@\n- *         <blockquote>\n- *           <pre>new {@linkplain java.io.FileOutputStream#FileOutputStream(File) FileOutputStream}(new {@linkplain File#File(java.net.URI) File}({@linkplain FileObject fileObject}.{@linkplain FileObject#toUri() toUri}()))<\/pre>\n- *         <\/blockquote>\n+ *         {@snippet id=\"equiv-output\" lang=java :\n+ *             \/\/ @link substring=FileOutputStream target=\"java.io.FileOutputStream#FileOutputStream(File)\" : @link regex=\"File\\W\" target=\"File#File(java.net.URI)\" : @link substring=fileObject target=FileObject :  @link substring=toURI target=\"FileObject#toUri()\" :\n+ *             new FileOutputStream(new File(fileObject.toURI()))\n+ *             }\n@@ -244,3 +246,3 @@\n-     * <pre>\n-     *     getJavaFileObjectsFromFiles({@linkplain java.util.Arrays#asList Arrays.asList}(files))\n-     * <\/pre>\n+     * {@snippet id=\"equiv-getJavaFileObjects\" lang=java :\n+     *     getJavaFileObjectsFromFiles(Arrays.asList(files)) \/\/ @link substring=\"Arrays.asList\" target=\"Arrays#asList\"\n+     *     }\n@@ -262,3 +264,3 @@\n-     * <pre>\n-     *     getJavaFileObjectsFromPaths({@linkplain java.util.Arrays#asList Arrays.asList}(paths))\n-     * <\/pre>\n+     * {@snippet id=\"equiv-getJavaFileObjectsFromPaths\" lang=java :\n+     *     getJavaFileObjectsFromPaths(Arrays.asList(paths)) \/\/ @link substring=\"Arrays.asList\" target=\"Arrays#asList\"\n+     *     }\n@@ -299,3 +301,3 @@\n-     * <pre>\n-     *     getJavaFileObjectsFromStrings({@linkplain java.util.Arrays#asList Arrays.asList}(names))\n-     * <\/pre>\n+     * {@snippet id=\"equiv-getJavaFileObjectsFromStrings\" lang=java :\n+     *     getJavaFileObjectsFromStrings(Arrays.asList(names)) \/\/ @link substring=\"Arrays.asList\" target=\"Arrays#asList\"\n+     *     }\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/StandardJavaFileManager.java","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -55,1 +55,3 @@\n- * <p>{@code JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();}\n+ * {@snippet id=\"show-getSystemJavaCompiler\" lang=java :\n+ *     JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+ *     }\n@@ -67,1 +69,3 @@\n- * <p>{@code com.vendor.VendorJavaCompiler}\n+ * {@snippet id=\"show-service\" :\n+ *     com.vendor.VendorJavaCompiler\n+ *     }\n@@ -69,1 +73,1 @@\n- * <p>If the jar file is on the class path, VendorJavaCompiler can be\n+ * <p>If the jar file is on the class path, {@code VendorJavaCompiler} can be\n@@ -72,1 +76,3 @@\n- * <p>{@code JavaCompiler compiler = ServiceLoader.load(JavaCompiler.class).iterator().next();}\n+ * {@snippet id=\"show-serviceLoader\" lang=java :\n+ *     JavaCompiler compiler = ServiceLoader.load(JavaCompiler.class).iterator().next();\n+ *     }\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/package-info.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/\/ @replace region replacement=\"\"\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.tools.SimpleJavaFileObject;\n+import java.net.URI;\n+\/\/ @end\n+\/**\n+ * A file object used to represent source coming from a string.\n+ *\/\n+public class JavaSourceFromString extends SimpleJavaFileObject {\n+    \/**\n+     * The source code of this \"file\".\n+     *\/\n+    final String code;\n+\n+    \/**\n+     * Constructs a new JavaSourceFromString.\n+     * @param name the name of the compilation unit represented by this file object\n+     * @param code the source code for the compilation unit represented by this file object\n+     *\/\n+    JavaSourceFromString(String name, String code) {\n+        super(URI.create(\"string:\/\/\/\" + name.replace('.','\/') + Kind.SOURCE.extension), \/\/ @link substring=\"URI.create\" target=\"URI#create(String)\"\n+              Kind.SOURCE);\n+        this.code = code;\n+    }\n+\n+    @Override\n+    public CharSequence getCharContent(boolean ignoreEncodingErrors) {\n+        return code;\n+    }\n+}\n","filename":"src\/java.compiler\/share\/classes\/javax\/tools\/snippet-files\/JavaSourceFromString.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}