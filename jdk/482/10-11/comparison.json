{"files":[{"patch":"@@ -57,1 +57,3 @@\n- *\n+ * For conversions from hexadecimal characters the digits and uppercase and lowercase\n+ * characters in {@code \"0-9\", \"a-f\", and \"A-F\"} are converted to corresponding values\n+ * {@code 0-15}.\n@@ -146,1 +148,16 @@\n-\n+    \/\/ Analysis has shown that generating the whole array allows the JIT to generate\n+    \/\/ better code compared to a slimmed down array, such as one cutting off after 'f'\n+    private static final byte[] DIGITS = new byte[] {\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1,\n+            -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12,\n+            13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };\n@@ -832,4 +849,6 @@\n-     * A character is a valid hexadecimal character if\n-     * {@link Character#digit(int, int) Character.digit(int, 16)} returns\n-     * a positive value.\n-     *\n+     * The valid hexadecimal characters are:\n+     * <ul>\n+     * <li>{@code '0' ('\\u005Cu0030')} through {@code '9' ('\\u005Cu0039')} inclusive,\n+     * <li>{@code 'A' ('\\u005Cu0041')} through {@code 'F' ('\\u005Cu0046')} inclusive, and\n+     * <li>{@code 'a' ('\\u005Cu0061')} through {@code 'f' ('\\u005Cu0066')} inclusive.\n+     * <\/ul>\n@@ -841,1 +860,1 @@\n-        return Character.digit(ch, 16) >= 0;\n+        return ((ch >>> 8) == 0 && DIGITS[ch] >= 0);\n@@ -846,3 +865,6 @@\n-     * The characters {@code \"0-9\", \"A-F\", \"a-f\"} are parsed\n-     * using {@link Character#digit(int, int) Character.digit(int, 16)}.\n-     *\n+     * The value is:\n+     * <ul>\n+     * <li>{@code (ch - '0')} for {@code '0'} through {@code '9'} inclusive,\n+     * <li>{@code (ch - 'A' + 10)} for {@code 'A'} through {@code 'F'} inclusive, and\n+     * <li>{@code (ch - 'a' + 10)} for {@code 'a'} through {@code 'f'} inclusive.\n+     * <\/ul>\n@@ -850,1 +872,1 @@\n-     * @return the value {@code 0..15}\n+     * @return the value {@code 0-15}\n@@ -854,4 +876,5 @@\n-        int value = Character.digit(ch, 16);\n-        if (value < 0)\n-            throw new NumberFormatException(\"not a hexadecimal digit: \\\"\" + (char)ch + \"\\\" + \" + ch);\n-        return value;\n+        int value;\n+        if ((ch >>> 8) == 0 && (value = DIGITS[ch]) >= 0) {\n+            return value;\n+        }\n+        throw new NumberFormatException(\"not a hexadecimal digit: \\\"\" + (char) ch + \"\\\" = \" + ch);\n","filename":"src\/java.base\/share\/classes\/java\/util\/HexFormat.java","additions":38,"deletions":15,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -187,7 +187,8 @@\n-        \/\/ An assortment of invalid characters\n-        String chars = \"\\u0000 \/:\\u0040G\\u0060g\\u007f\";\n-        for (int i = 0; i < chars.length(); i++) {\n-            char ch = chars.charAt(i);\n-            Throwable ex = expectThrows(NumberFormatException.class,\n-                    () -> hex.fromHexDigit(ch));\n-            System.out.println(ex);\n+        for (int i = 0; i < 65536; i++) {\n+            char ch = (char)i;\n+            if (ch > 0xff || Character.digit(ch, 16) < 0) {\n+                assertFalse(hex.isHexDigit(ch), \"isHexDigit incorrect for '\" + ch + \"'  = \" + i);\n+                expectThrows(NumberFormatException.class,\n+                        () -> hex.fromHexDigit(ch));\n+\n+            }\n","filename":"test\/jdk\/java\/util\/HexFormat\/HexFormatTest.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"}]}