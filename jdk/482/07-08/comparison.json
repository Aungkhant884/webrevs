{"files":[{"patch":"@@ -260,0 +260,7 @@\n+     * <p>\n+     * @apiNote\n+     * {@link java.util.HexFormat} provides formatting and parsing\n+     * of byte arrays and primitives to return a string or adding to an {@link Appendable}.\n+     * HexFormat formats and parses uppercase or lowercase hexadecimal characters,\n+     * with leading zeros and for byte arrays includes for each byte\n+     * a delimiter, prefix, and suffix.\n@@ -264,0 +271,1 @@\n+     * @see java.util.HexFormat\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -295,0 +295,7 @@\n+     * <p>\n+     * @apiNote\n+     * {@link java.util.HexFormat} provides formatting and parsing\n+     * of byte arrays and primitives to return a string or adding to an {@link Appendable}.\n+     * HexFormat formats and parses uppercase or lowercase hexadecimal characters,\n+     * with leading zeros and for byte arrays includes for each byte\n+     * a delimiter, prefix, and suffix.\n@@ -300,0 +307,1 @@\n+     * @see java.util.HexFormat\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n- * A delimiter appears after each formatted value, except the last.\n+ * A delimiter follows each formatted value, except the last.\n@@ -73,3 +73,2 @@\n- * Each byte value is parsed as the prefix, two hexadecimal characters from the\n- * uppercase or lowercase digits, and the suffix.\n- * The delimiter is required after each formatted value, except the last.\n+ * Each byte value is parsed as the prefix, two case insensitive hexadecimal characters,\n+ * and the suffix. A delimiter follows each formatted value, except the last.\n@@ -107,1 +106,1 @@\n- * and uppercase letters the {@code HexFormat} is:\n+ * and uppercase characters the {@code HexFormat} is:\n@@ -144,2 +143,2 @@\n-            '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7',\n-            '8' , '9' , 'a' , 'b' , 'c' , 'd' , 'e' , 'f',\n+            '0', '1', '2', '3', '4', '5', '6', '7',\n+            '8', '9', 'a', 'b', 'c', 'd', 'e', 'f',\n@@ -149,2 +148,2 @@\n-     * Format each byte of an array as a pair of hex digits.\n-     * The hex characters are from lowercase alpha digits.\n+     * Format each byte of an array as a pair of hexadecimal digits.\n+     * The hexadecimal characters are from lowercase alpha digits.\n@@ -179,1 +178,1 @@\n-     * The hex characters are lowercase and the delimiter, prefix, and suffix are empty.\n+     * The delimiter, prefix, and suffix are empty.\n@@ -185,1 +184,1 @@\n-     * @return a hex formatter\n+     * @return a hexadecimal formatter with no delimiter and lowercase characters\n@@ -192,1 +191,1 @@\n-     * Returns a hexadecimal formatter with a delimiter and lowercase letters.\n+     * Returns a hexadecimal formatter with the delimiter and lowercase characters.\n@@ -200,1 +199,1 @@\n-     * @return a {@link HexFormat} with the delimiter and lowercase letters\n+     * @return a {@link HexFormat} with the delimiter and lowercase characters\n@@ -236,1 +235,1 @@\n-     * Returns a copy of this {@code HexFormat} to use uppercase hex characters.\n+     * Returns a copy of this {@code HexFormat} to use uppercase hexadecimal characters.\n@@ -246,1 +245,1 @@\n-     * Returns a copy of this {@code HexFormat} to use lowercase hex characters.\n+     * Returns a copy of this {@code HexFormat} to use lowercase hexadecimal characters.\n@@ -249,1 +248,1 @@\n-     * @return a copy of this {@code HexFormat} with lowercase hex characters\n+     * @return a copy of this {@code HexFormat} with lowercase hexadecimal characters\n@@ -258,1 +257,1 @@\n-     * @return return the delimiter, non-null, may be empty {@code \"\"}\n+     * @return the delimiter, non-null, may be empty {@code \"\"}\n@@ -267,1 +266,1 @@\n-     * @return returns the prefix\n+     * @return the prefix\n@@ -276,1 +275,1 @@\n-     * @return returns the suffix\n+     * @return the suffix\n@@ -283,3 +282,4 @@\n-     * Returns {@code true} if the hexadecimal digits will be uppercase,\n-     *          otherwise {@code false}.\n-     * @return returns {@code true} if the hexadecimal digits will be uppercase,\n+     * Returns {@code true} if the hexadecimal digits are uppercase,\n+     * otherwise {@code false}.\n+     *\n+     * @return {@code true} if the hexadecimal digits are uppercase,\n@@ -296,1 +296,1 @@\n-     * A delimiter appears after each formatted value, except the last.\n+     * A delimiter follows each formatted value, except the last.\n@@ -312,1 +312,1 @@\n-     * A delimiter appears after each formatted value, except the last.\n+     * A delimiter follows each formatted value, except the last.\n@@ -315,3 +315,3 @@\n-     * @param index the starting index\n-     * @param length the number of bytes to format\n-     * @return a string hex formatting each byte of the array range\n+     * @param fromIndex the initial index of the range, inclusive\n+     * @param toIndex the final index of the range, exclusive.\n+     * @return a string hexadecimal formatting each byte of the array range\n@@ -320,1 +320,1 @@\n-    public String formatHex(byte[] bytes, int index, int length) {\n+    public String formatHex(byte[] bytes, int fromIndex, int toIndex) {\n@@ -322,2 +322,2 @@\n-        Objects.checkFromIndexSize(index, length, bytes.length);\n-        if (length == 0) {\n+        Objects.checkFromToIndex(fromIndex, toIndex, bytes.length);\n+        if (toIndex - fromIndex == 0) {\n@@ -327,1 +327,1 @@\n-        String s = formatOptDelimiter(bytes, index, length);\n+        String s = formatOptDelimiter(bytes, fromIndex, toIndex);\n@@ -329,1 +329,1 @@\n-            StringBuilder sb = new StringBuilder(length *\n+            StringBuilder sb = new StringBuilder((toIndex - fromIndex) *\n@@ -331,1 +331,1 @@\n-            formatHex(sb, bytes, index, length);\n+            formatHex(sb, bytes, fromIndex, toIndex);\n@@ -338,1 +338,1 @@\n-     * Appends a hexadecimal string formatted from a byte array to the {@link Appendable}.\n+     * Appends formatted bytes from a byte array to the {@link Appendable}.\n@@ -341,3 +341,2 @@\n-     * A delimiter appears after each formatted value, except the last.\n-     * The behavior is equivalent to\n-     * {@link #formatHex(byte[]) out.append(formatHex(bytes))}.\n+     * A delimiter follows each formatted value, except the last.\n+     * The formatted bytes are appended in zero or more calls to the {@link Appendable} methods.\n@@ -356,1 +355,1 @@\n-     * Appends a hexadecimal string formatted from a byte array range to the {@link Appendable}.\n+     * Appends formatted bytes from a byte array range to the {@link Appendable}.\n@@ -359,3 +358,2 @@\n-     * A delimiter appears after each formatted value, except the last.\n-     * The behavior is equivalent to\n-     * {@link #formatHex(byte[], int, int)  out.append(formatHex(bytes, index, length))}.\n+     * A delimiter follows each formatted value, except the last.\n+     * The formatted bytes are appended in zero or more calls to the {@link Appendable} methods.\n@@ -366,2 +364,2 @@\n-     * @param index the starting index\n-     * @param length the number of bytes to format\n+     * @param fromIndex the initial index of the range, inclusive\n+     * @param toIndex the final index of the range, exclusive.\n@@ -372,1 +370,1 @@\n-    public <A extends Appendable> A formatHex(A out, byte[] bytes, int index, int length) {\n+    public <A extends Appendable> A formatHex(A out, byte[] bytes, int fromIndex, int toIndex) {\n@@ -375,1 +373,1 @@\n-        Objects.checkFromIndexSize(index, length, bytes.length);\n+        Objects.checkFromToIndex(fromIndex, toIndex, bytes.length);\n@@ -377,0 +375,1 @@\n+        int length = toIndex - fromIndex;\n@@ -381,1 +380,1 @@\n-                toHexDigits(out, bytes[index]);\n+                toHexDigits(out, bytes[fromIndex]);\n@@ -384,1 +383,1 @@\n-                        toHexDigits(out, bytes[index + i]);\n+                        toHexDigits(out, bytes[fromIndex + i]);\n@@ -389,1 +388,1 @@\n-                        toHexDigits(out, bytes[index + i]);\n+                        toHexDigits(out, bytes[fromIndex + i]);\n@@ -407,2 +406,2 @@\n-     * @param index the starting index\n-     * @param length the length\n+     * @param fromIndex the initial index of the range, inclusive\n+     * @param toIndex the final index of the range, exclusive.\n@@ -410,2 +409,2 @@\n-    *\/\n-    private String formatOptDelimiter(byte[] bytes, int index, int length) {\n+     *\/\n+    private String formatOptDelimiter(byte[] bytes, int fromIndex, int toIndex) {\n@@ -416,0 +415,1 @@\n+        int length = toIndex - fromIndex;\n@@ -420,2 +420,2 @@\n-                rep[i * 2] = (byte)toHighHexDigit(bytes[index + i]);\n-                rep[i * 2 + 1] = (byte)toLowHexDigit(bytes[index + i]);\n+                rep[i * 2] = (byte)toHighHexDigit(bytes[fromIndex + i]);\n+                rep[i * 2 + 1] = (byte)toLowHexDigit(bytes[fromIndex + i]);\n@@ -425,1 +425,1 @@\n-            \/\/ Then insert the delimiter and hex characters for each of the remaining bytes\n+            \/\/ Then insert the delimiter and hexadecimal characters for each of the remaining bytes\n@@ -428,2 +428,2 @@\n-            rep[0] = (byte) toHighHexDigit(bytes[index]);\n-            rep[1] = (byte) toLowHexDigit(bytes[index]);\n+            rep[0] = (byte) toHighHexDigit(bytes[fromIndex]);\n+            rep[1] = (byte) toLowHexDigit(bytes[fromIndex]);\n@@ -432,2 +432,2 @@\n-                rep[i * 3    ] = (byte) toHighHexDigit(bytes[index + i]);\n-                rep[i * 3 + 1] = (byte) toLowHexDigit(bytes[index + i]);\n+                rep[i * 3    ] = (byte) toHighHexDigit(bytes[fromIndex + i]);\n+                rep[i * 3 + 1] = (byte) toLowHexDigit(bytes[fromIndex + i]);\n@@ -450,3 +450,2 @@\n-     * Each byte value is parsed as the prefix, two hexadecimal characters from the\n-     * uppercase or lowercase digits, and the suffix.\n-     * A delimiters, prefixes, and suffixes appears after each formatted value, except the last.\n+     * Each byte value is parsed as the prefix, two case insensitive hexadecimal characters,\n+     * and the suffix. A delimiter follows each formatted value, except the last.\n@@ -458,1 +457,1 @@\n-     * @return a byte array\n+     * @return a byte array with the values parsed from the string\n@@ -461,1 +460,1 @@\n-     *          after all but the last byte value.\n+     *          after all but the last byte value\n@@ -470,3 +469,2 @@\n-     * Each byte value is parsed as the prefix, two hexadecimal characters from the\n-     * uppercase or lowercase digits, and the suffix.\n-     * A delimiter appears after each formatted value, except the last.\n+     * Each byte value is parsed as the prefix, two case insensitive hexadecimal characters,\n+     * and the suffix. A delimiter follows each formatted value, except the last.\n@@ -476,1 +474,1 @@\n-     * @param string a string range containing hex digits,\n+     * @param string a string range containing hexadecimal digits,\n@@ -478,6 +476,6 @@\n-     * @param index of the start of the character range\n-     * @param length of the character range\n-     * @return a byte array\n-     * @throws IllegalArgumentException if the string length is not valid or\n-     *          the string contains non-hex characters,\n-     *          or the delimiter, prefix, or suffix are not found\n+     * @param fromIndex the initial index of the range, inclusive\n+     * @param toIndex the final index of the range, exclusive.\n+     * @return a byte array with the values parsed from the string range\n+     * @throws IllegalArgumentException if the prefix or suffix is not present for each byte value,\n+     *          the byte values are not hexadecimal characters, or if the delimiter is not present\n+     *          after all but the last byte value\n@@ -486,1 +484,1 @@\n-    public byte[] parseHex(CharSequence string, int index, int length) {\n+    public byte[] parseHex(CharSequence string, int fromIndex, int toIndex) {\n@@ -488,1 +486,1 @@\n-        Objects.checkFromIndexSize(index, length, string.length());\n+        Objects.checkFromToIndex(fromIndex, toIndex, string.length());\n@@ -490,2 +488,2 @@\n-        if (index != 0 || length != string.length()) {\n-            string = string.subSequence(index, index + length);\n+        if (fromIndex != 0 || toIndex != string.length()) {\n+            string = string.subSequence(fromIndex, toIndex);\n@@ -503,1 +501,1 @@\n-                    \"or values consisting of prefix, two hex digits, and suffix\");\n+                    \"or values consisting of prefix, two hexadecimal digits, and suffix\");\n@@ -514,1 +512,1 @@\n-                throw new IllegalArgumentException(\"input contains non-hex characters\");\n+                throw new IllegalArgumentException(\"input contains non-hexadecimal characters\");\n@@ -520,1 +518,1 @@\n-            throw new IllegalArgumentException(\"input contains non-hex characters\");\n+            throw new IllegalArgumentException(\"input contains non-hexadecimal characters\");\n@@ -530,3 +528,2 @@\n-     * Each byte value is parsed as the prefix, two hexadecimal characters from the\n-     * uppercase or lowercase digits, and the suffix.\n-     * A delimiter appears after each formatted value, except the last.\n+     * Each byte value is parsed as the prefix, two case insensitive hexadecimal characters,\n+     * and the suffix. A delimiter follows each formatted value, except the last.\n@@ -534,1 +531,1 @@\n-     * A valid string consists only of the above format.\n+     * A valid character array range consists only of the above format.\n@@ -536,1 +533,1 @@\n-     * @param chars a char array range containing an even number of hex digits,\n+     * @param chars a character array range containing an even number of hexadecimal digits,\n@@ -538,7 +535,7 @@\n-     * @param index the starting index\n-     * @param length the length to parse\n-     * @return a byte array\n-     * @throws IllegalArgumentException if the string length is not valid or\n-     *          the character array contains non-hex characters,\n-     *          or the delimiter, prefix, or suffix are not found\n-     * @throws IndexOutOfBoundsException if the char array range is out of bounds\n+     * @param fromIndex the initial index of the range, inclusive\n+     * @param toIndex the final index of the range, exclusive.\n+     * @return a byte array with the values parsed from the character array range\n+     * @throws IllegalArgumentException if the prefix or suffix is not present for each byte value,\n+     *          the byte values are not hexadecimal characters, or if the delimiter is not present\n+     *          after all but the last byte value\n+     * @throws IndexOutOfBoundsException if the character array range is out of bounds\n@@ -546,1 +543,1 @@\n-    public byte[] parseHex(char[] chars, int index, int length) {\n+    public byte[] parseHex(char[] chars, int fromIndex, int toIndex) {\n@@ -548,2 +545,2 @@\n-        Objects.checkFromIndexSize(index, length, chars.length);\n-        CharBuffer cb = CharBuffer.wrap(chars, index, length);\n+        Objects.checkFromToIndex(fromIndex, toIndex, chars.length);\n+        CharBuffer cb = CharBuffer.wrap(chars, fromIndex, toIndex - fromIndex);\n@@ -590,1 +587,1 @@\n-     * Returns the hex character for the low 4 bits of the value considering it to be a byte.\n+     * Returns the hexadecimal character for the low 4 bits of the value considering it to be a byte.\n@@ -597,1 +594,1 @@\n-     * @return the hex character for the low 4 bits {@code 0-3} of the value\n+     * @return the hexadecimal character for the low 4 bits {@code 0-3} of the value\n@@ -604,1 +601,1 @@\n-     * Returns the hex character for the high 4 bits of the value considering it to be a byte.\n+     * Returns the hexadecimal character for the high 4 bits of the value considering it to be a byte.\n@@ -611,1 +608,1 @@\n-     * @return the hex character for the bits {@code 4-7} of the value are used\n+     * @return the hexadecimal character for the bits {@code 4-7} of the value\n@@ -618,1 +615,1 @@\n-     * Returns the two hex characters for the {@code byte} value.\n+     * Returns the two hexadecimal characters for the {@code byte} value.\n@@ -624,1 +621,1 @@\n-     * @return the two hex characters for the byte value\n+     * @return the two hexadecimal characters for the byte value\n@@ -638,1 +635,1 @@\n-     * Appends two hex characters for the byte value to the {@link Appendable}.\n+     * Appends two hexadecimal characters for the byte value to the {@link Appendable}.\n@@ -641,2 +638,2 @@\n-     * The behavior is equivalent to\n-     * {@link #toHexDigits(byte) out.append(toHexDigits((byte)value))}.\n+     * The hexadecimal characters are appended in one or more calls to the\n+     * {@link Appendable} methods.\n@@ -662,1 +659,1 @@\n-     * Returns the four hex characters for the {@code char} value.\n+     * Returns the four hexadecimal characters for the {@code char} value.\n@@ -668,1 +665,1 @@\n-     * @return the four hex characters for the {@code char} value\n+     * @return the four hexadecimal characters for the {@code char} value\n@@ -675,1 +672,1 @@\n-     * Returns the four hex characters for the {@code short} value.\n+     * Returns the four hexadecimal characters for the {@code short} value.\n@@ -681,1 +678,1 @@\n-     * @return the four hex characters for the {@code short} value\n+     * @return the four hexadecimal characters for the {@code short} value\n@@ -698,1 +695,1 @@\n-     * Returns the eight hex characters for the {@code int} value.\n+     * Returns the eight hexadecimal characters for the {@code int} value.\n@@ -704,1 +701,1 @@\n-     * @return the eight hex characters for the {@code int} value\n+     * @return the eight hexadecimal characters for the {@code int} value\n@@ -725,1 +722,2 @@\n-     * Returns the sixteen hex characters for the {@code long} value.\n+     * Returns the sixteen hexadecimal characters for the {@code long} value\n+     * considering it to be unsigned.\n@@ -731,1 +729,1 @@\n-     * @return the sixteen hex characters for the {@code long} value\n+     * @return the sixteen hexadecimal characters for the {@code long} value\n@@ -760,1 +758,1 @@\n-     * Returns up to sixteen hex characters for the {@code long} value.\n+     * Returns up to sixteen hexadecimal characters for the {@code long} value.\n@@ -765,1 +763,1 @@\n-     * @param value an {@code long} value\n+     * @param value a {@code long} value\n@@ -767,1 +765,1 @@\n-     * @return the hex characters for the {@code long} value\n+     * @return the hexadecimal characters for the {@code long} value\n@@ -794,1 +792,1 @@\n-     *          the string contains non-hex characters\n+     *          the string contains non-hexadecimal characters\n@@ -810,1 +808,1 @@\n-            throw new IllegalArgumentException(\"input contains non-hex characters\");\n+            throw new IllegalArgumentException(\"input contains non-hexadecimal characters\");\n@@ -818,1 +816,2 @@\n-     * @param digits the number of digits requested\n+     * @param fromIndex the initial index of the range, inclusive\n+     * @param toIndex the final index of the range, exclusive.\n@@ -820,0 +819,1 @@\n+     * @return the length of the range\n@@ -821,3 +821,6 @@\n-    private static void checkDigitCount(int digits, int limit) {\n-        if (digits > limit)\n-            throw new IllegalArgumentException(\"digits greater than \" + limit + \": \" + digits);\n+    private static int checkDigitCount(int fromIndex, int toIndex, int limit) {\n+        int length = toIndex - fromIndex;\n+        if (length > limit)\n+            throw new IllegalArgumentException(\"string length greater than \" +\n+                    limit + \": \" + length);\n+        return length;\n@@ -827,1 +830,1 @@\n-     * Returns {@code true} if the character is a valid hex character or codepoint.\n+     * Returns {@code true} if the character is a valid hexadecimal character or codepoint.\n@@ -857,2 +860,2 @@\n-     * Returns a value parsed from two hex characters in a string.\n-     * The characters in the range from {@code index} to {@code index + 1} ,\n+     * Returns a value parsed from two hexadecimal characters in a string.\n+     * The characters in the range from {@code index} to {@code index + 1},\n@@ -867,1 +870,1 @@\n-     * @throws  IndexOutOfBoundsException if the sub-range is out of bounds\n+     * @throws  IndexOutOfBoundsException if the range is out of bounds\n@@ -883,1 +886,1 @@\n-     * @param string a CharSequence containing up to eight hex characters\n+     * @param string a CharSequence containing up to eight hexadecimal characters\n@@ -890,2 +893,1 @@\n-        int len = string.length();\n-        checkDigitCount(len, 8);\n+        int length = checkDigitCount(0, string.length(), 8);\n@@ -893,1 +895,1 @@\n-        for (int i = 0; i < len; i++) {\n+        for (int i = 0; i < length; i++) {\n@@ -902,1 +904,1 @@\n-     * The characters in the range from {@code index} to {@code index + length - 1}, inclusive,\n+     * The characters in the range {@code fromIndex} to {@code toIndex}, exclusive,\n@@ -907,2 +909,2 @@\n-     * @param index the index of the first character of the range\n-     * @param length the number of hexadecimal digits to parse\n+     * @param fromIndex the initial index of the range, inclusive\n+     * @param toIndex the final index of the range, exclusive.\n@@ -910,1 +912,1 @@\n-     * @throws  IndexOutOfBoundsException if the sub-range is out of bounds\n+     * @throws  IndexOutOfBoundsException if the range is out of bounds\n@@ -912,2 +914,2 @@\n-     * @throws  IllegalArgumentException if length is greater than eight (8) or if\n-     *          any of the characters is not a hexadecimal character\n+     * @throws  IllegalArgumentException if length of the range is greater than eight (8) or\n+     *          if any of the characters is not a hexadecimal character\n@@ -915,1 +917,1 @@\n-    public int fromHexDigits(CharSequence string, int index, int length) {\n+    public int fromHexDigits(CharSequence string, int fromIndex, int toIndex) {\n@@ -917,2 +919,2 @@\n-        checkDigitCount(length, 8);\n-        Objects.checkFromIndexSize(index, length, string.length());\n+        Objects.checkFromToIndex(fromIndex, toIndex, string.length());\n+        int length = checkDigitCount(fromIndex, toIndex, 8);\n@@ -921,1 +923,1 @@\n-            value = (value << 4) + fromHexDigit(string.charAt(index + i));\n+            value = (value << 4) + fromHexDigit(string.charAt(fromIndex + i));\n@@ -932,1 +934,1 @@\n-     * @param string a CharSequence containing up to sixteen hex characters\n+     * @param string a CharSequence containing up to sixteen hexadecimal characters\n@@ -939,2 +941,1 @@\n-        int len = string.length();\n-        checkDigitCount(len, 16);\n+        int length = checkDigitCount(0, string.length(), 16);\n@@ -942,1 +943,1 @@\n-        for (int i = 0; i < len; i++) {\n+        for (int i = 0; i < length; i++) {\n@@ -949,1 +950,1 @@\n-     * Returns the long value parsed parsed from a string range of up to sixteen hexadecimal\n+     * Returns the long value parsed from a string range of up to sixteen hexadecimal\n@@ -951,1 +952,1 @@\n-     * The characters in the range from {@code index} to {@code index + length - 1}, inclusive,\n+     * The characters in the range {@code fromIndex} to {@code toIndex}, exclusive,\n@@ -956,2 +957,2 @@\n-     * @param index the index of the first character of the range\n-     * @param length the number of hexadecimal digits to parse\n+     * @param fromIndex the initial index of the range, inclusive\n+     * @param toIndex the final index of the range, exclusive.\n@@ -959,1 +960,1 @@\n-     * @throws  IndexOutOfBoundsException if the sub-range is out of bounds\n+     * @throws  IndexOutOfBoundsException if the range is out of bounds\n@@ -961,1 +962,1 @@\n-     * @throws  IllegalArgumentException if {@code length} is greater than sixteen (16) or\n+     * @throws  IllegalArgumentException if the length of the range is greater than sixteen (16) or\n@@ -964,1 +965,1 @@\n-    public long fromHexDigitsToLong(CharSequence string, int index, int length) {\n+    public long fromHexDigitsToLong(CharSequence string, int fromIndex, int toIndex) {\n@@ -966,2 +967,2 @@\n-        checkDigitCount(length, 16);\n-        Objects.checkFromIndexSize(index, length, string.length());\n+        Objects.checkFromToIndex(fromIndex, toIndex, string.length());\n+        int length = checkDigitCount(fromIndex, toIndex, 16);\n@@ -970,1 +971,1 @@\n-            value = (value << 4) + fromHexDigit(string.charAt(index + i));\n+            value = (value << 4) + fromHexDigit(string.charAt(fromIndex + i));\n@@ -1013,1 +1014,1 @@\n-     * @return return a description of this {@code HexFormat}\n+     * @return a description of this {@code HexFormat}\n","filename":"src\/java.base\/share\/classes\/java\/util\/HexFormat.java","additions":156,"deletions":155,"binary":false,"changes":311,"status":"modified"},{"patch":"@@ -97,6 +97,6 @@\n-                {new byte[1], 0, 2},        \/\/ bad length\n-                {new byte[1], 1, 1},        \/\/ bad offset + length\n-                {new byte[1], -1, 2},       \/\/ bad length\n-                {new byte[1], -1, 1},       \/\/ bad offset + length\n-                {new byte[1], 0, -1},       \/\/ bad length\n-                {new byte[1], 1, -1},       \/\/ bad offset + length\n+                {new byte[1], 0, 2},        \/\/ bad toIndex\n+                {new byte[1], 1, 2},        \/\/ bad fromIndex + toIndex\n+                {new byte[1], -1, 2},       \/\/ bad fromIndex\n+                {new byte[1], -1, 1},       \/\/ bad fromIndex\n+                {new byte[1], 0, -1},       \/\/ bad toIndex\n+                {new byte[1], 1, -1},       \/\/ bad toIndex\n@@ -109,6 +109,6 @@\n-                {\"a\", 0, 2, IndexOutOfBoundsException.class},        \/\/ bad length\n-                {\"b\", 1, 1, IndexOutOfBoundsException.class},        \/\/ bad offset + length\n-                {\"a\", -1, 2, IndexOutOfBoundsException.class},       \/\/ bad length\n-                {\"b\", -1, 1, IndexOutOfBoundsException.class},       \/\/ bad offset + length\n-                {\"a\", 0, -1, IndexOutOfBoundsException.class},       \/\/ bad length\n-                {\"b\", 1, -1, IndexOutOfBoundsException.class},       \/\/ bad offset + length\n+                {\"a\", 0, 2, IndexOutOfBoundsException.class},        \/\/ bad toIndex\n+                {\"b\", 1, 2, IndexOutOfBoundsException.class},        \/\/ bad toIndex\n+                {\"a\", -1, 2, IndexOutOfBoundsException.class},       \/\/ bad fromIndex\n+                {\"b\", -1, 1, IndexOutOfBoundsException.class},       \/\/ bad fromIndex\n+                {\"a\", 0, -1, IndexOutOfBoundsException.class},       \/\/ bad toIndex\n+                {\"b\", 1, -1, IndexOutOfBoundsException.class},       \/\/ bad fromIndex + toIndex\n@@ -124,6 +124,6 @@\n-                {\"a\", 0, 2, IndexOutOfBoundsException.class},        \/\/ bad length\n-                {\"b\", 1, 1, IndexOutOfBoundsException.class},        \/\/ bad offset + length\n-                {\"a\", -1, 2, IndexOutOfBoundsException.class},       \/\/ bad length\n-                {\"b\", -1, 1, IndexOutOfBoundsException.class},       \/\/ bad offset + length\n-                {\"a\", 0, -1, IndexOutOfBoundsException.class},       \/\/ bad length\n-                {\"b\", 1, -1, IndexOutOfBoundsException.class},       \/\/ bad offset + length\n+                {\"a\", 0, 2, IndexOutOfBoundsException.class},        \/\/ bad toIndex\n+                {\"b\", 1, 2, IndexOutOfBoundsException.class},        \/\/ bad fromIndex + toIndex\n+                {\"a\", -1, 2, IndexOutOfBoundsException.class},       \/\/ bad toIndex\n+                {\"b\", -1, 1, IndexOutOfBoundsException.class},       \/\/ bad fromIndex + toIndex\n+                {\"a\", 0, -1, IndexOutOfBoundsException.class},       \/\/ bad toIndex\n+                {\"b\", 1, -1, IndexOutOfBoundsException.class},       \/\/ bad fromIndex + toIndex\n@@ -312,1 +312,1 @@\n-    static void badFromHexDigits(String string, int offset, int length,\n+    static void badFromHexDigits(String string, int fromIndex, int toIndex,\n@@ -315,1 +315,1 @@\n-                () -> HexFormat.of().fromHexDigits(string, offset, length));\n+                () -> HexFormat.of().fromHexDigits(string, fromIndex, toIndex));\n@@ -317,1 +317,1 @@\n-                () -> HexFormat.of().fromHexDigitsToLong(string, offset, length));\n+                () -> HexFormat.of().fromHexDigitsToLong(string, fromIndex, toIndex));\n@@ -395,1 +395,1 @@\n-                high * stride - delimiter.length() - low * stride);\n+                high * stride - delimiter.length());\n@@ -420,1 +420,1 @@\n-        String s = hex.formatHex(expected, low, high - low);\n+        String s = hex.formatHex(expected, low, high);\n@@ -451,1 +451,1 @@\n-        StringBuilder s = hex.formatHex(sb, expected, low, high - low);\n+        StringBuilder s = hex.formatHex(sb, expected, low, high);\n@@ -496,1 +496,1 @@\n-                (high - low ) * stride - delimiter.length());\n+                high * stride - delimiter.length());\n","filename":"test\/jdk\/java\/util\/HexFormat\/HexFormatTest.java","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"}]}