{"files":[{"patch":"@@ -41,1 +41,1 @@\n- * There are two {@code HexFormat}ters with preset parameters {@link #of()} and\n+ * There are two factories of {@code HexFormat} with preset parameters {@link #of()} and\n@@ -43,1 +43,1 @@\n- * the {@code withXXX} methods return copies of {@code HexFormat}ters modified\n+ * the {@code withXXX} methods return copies of {@code HexFormat} modified\n@@ -65,3 +65,3 @@\n- * Each byte value is formatted as the {@code prefix}, two hexadecimal characters from the\n- * uppercase or lowercase digits, and the {@code suffix}.\n- * A {@code delimiter} appears after each formatted value, except the last.\n+ * Each byte value is formatted as the prefix, two hexadecimal characters from the\n+ * uppercase or lowercase digits, and the suffix.\n+ * A delimiter appears after each formatted value, except the last.\n@@ -74,3 +74,3 @@\n- * Each byte value is parsed as the {@code prefix}, two hexadecimal characters from the\n- * uppercase or lowercase digits, and the {@code suffix}.\n- * The {@code delimiter} is required after each formatted value, except the last.\n+ * Each byte value is parsed as the prefix, two hexadecimal characters from the\n+ * uppercase or lowercase digits, and the suffix.\n+ * The delimiter is required after each formatted value, except the last.\n@@ -194,1 +194,1 @@\n-     * Returns a hexadecimal formatter with a {@code delimiter} and lowercase letters.\n+     * Returns a hexadecimal formatter with a delimiter and lowercase letters.\n@@ -201,2 +201,2 @@\n-     * @param delimiter a {@code delimiter}, non-null, may be empty\n-     * @return a {@link HexFormat} with the {@code delimiter} and lowercase letters\n+     * @param delimiter a delimiter, non-null, may be empty\n+     * @return a {@link HexFormat} with the delimiter and lowercase letters\n@@ -209,3 +209,3 @@\n-     * Returns a copy of this {@code HexFormat} with the {@code delimiter}.\n-     * @param delimiter the {@code delimiter}, non-null, may be empty\n-     * @return a copy of this {@code HexFormat} with the {@code delimiter}\n+     * Returns a copy of this {@code HexFormat} with the delimiter.\n+     * @param delimiter the delimiter, non-null, may be empty\n+     * @return a copy of this {@code HexFormat} with the delimiter\n@@ -218,1 +218,1 @@\n-     * Returns a copy of this {@code HexFormat} with the {@code prefix}.\n+     * Returns a copy of this {@code HexFormat} with the prefix.\n@@ -221,1 +221,1 @@\n-     * @return a copy of this {@code HexFormat} with the {@code prefix}\n+     * @return a copy of this {@code HexFormat} with the prefix\n@@ -228,1 +228,1 @@\n-     * Returns a copy of this {@code HexFormat} with the {@code suffix}.\n+     * Returns a copy of this {@code HexFormat} with the suffix.\n@@ -230,2 +230,2 @@\n-     * @param suffix a {@code suffix}, non-null, may be empty\n-     * @return a copy of this {@code HexFormat} with the {@code suffix}\n+     * @param suffix a suffix, non-null, may be empty\n+     * @return a copy of this {@code HexFormat} with the suffix\n@@ -258,1 +258,1 @@\n-     * Returns the {@code delimiter} between hexadecimal values in a formatted byte array.\n+     * Returns the delimiter between hexadecimal values in a formatted byte array.\n@@ -260,1 +260,1 @@\n-     * @return return the {@code delimiter}, non-null, may be empty {@code \"\"}\n+     * @return return the delimiter, non-null, may be empty {@code \"\"}\n@@ -267,1 +267,1 @@\n-     * Returns the {@code prefix} used for each hexadecimal value in a formatted byte array.\n+     * Returns the prefix used for each hexadecimal value in a formatted byte array.\n@@ -269,1 +269,1 @@\n-     * @return returns the {@code prefix}\n+     * @return returns the prefix\n@@ -276,1 +276,1 @@\n-     * Returns the {@code suffix} used for each hexadecimal value in a formatted byte array.\n+     * Returns the suffix used for each hexadecimal value in a formatted byte array.\n@@ -278,1 +278,1 @@\n-     * @return returns the {@code suffix}\n+     * @return returns the suffix\n@@ -296,3 +296,3 @@\n-     * Each byte value is formatted as the {@code prefix}, two hexadecimal characters\n-     * {@linkplain #isUpperCase selected from} uppercase or lowercase digits, and the {@code suffix}.\n-     * A {@code delimiter} appears after each formatted value, except the last.\n+     * Each byte value is formatted as the prefix, two hexadecimal characters\n+     * {@linkplain #isUpperCase selected from} uppercase or lowercase digits, and the suffix.\n+     * A delimiter appears after each formatted value, except the last.\n@@ -312,3 +312,3 @@\n-     * Each byte value is formatted as the {@code prefix}, two hexadecimal characters\n-     * {@linkplain #isUpperCase selected from} uppercase or lowercase digits, and the {@code suffix}.\n-     * A {@code delimiter} appears after each formatted value, except the last.\n+     * Each byte value is formatted as the prefix, two hexadecimal characters\n+     * {@linkplain #isUpperCase selected from} uppercase or lowercase digits, and the suffix.\n+     * A delimiter appears after each formatted value, except the last.\n@@ -341,3 +341,3 @@\n-     * Each byte value is formatted as the {@code prefix}, two hexadecimal characters\n-     * {@linkplain #isUpperCase selected from} uppercase or lowercase digits, and the {@code suffix}.\n-     * A {@code delimiter} appears after each formatted value, except the last.\n+     * Each byte value is formatted as the prefix, two hexadecimal characters\n+     * {@linkplain #isUpperCase selected from} uppercase or lowercase digits, and the suffix.\n+     * A delimiter appears after each formatted value, except the last.\n@@ -359,3 +359,3 @@\n-     * Each byte value is formatted as the {@code prefix}, two hexadecimal characters\n-     * {@linkplain #isUpperCase selected from} uppercase or lowercase digits, and the {@code suffix}.\n-     * A {@code delimiter} appears after each formatted value, except the last.\n+     * Each byte value is formatted as the prefix, two hexadecimal characters\n+     * {@linkplain #isUpperCase selected from} uppercase or lowercase digits, and the suffix.\n+     * A delimiter appears after each formatted value, except the last.\n@@ -452,5 +452,4 @@\n-     * Each byte value is parsed as the {@code prefix}, two hexadecimal characters from the\n-     * uppercase or lowercase digits, and the {@code suffix}.\n-     * A {@code delimiter} appears after each formatted value, except the last.\n-     * The {@code delimiter}s, {@code prefix}es, and {@code suffix}es strings must be present;\n-     * they may be empty strings.\n+     * Each byte value is parsed as the prefix, two hexadecimal characters from the\n+     * uppercase or lowercase digits, and the suffix.\n+     * A delimiters, prefixes, and suffixes appears after each formatted value, except the last.\n+     * The delimiters, prefixes, and suffixes strings must be present; they may be empty strings.\n@@ -459,1 +458,1 @@\n-     * @param string a string containing the byte values with {@code prefix}, hexadecimal digits, {@code suffix},\n+     * @param string a string containing the byte values with prefix, hexadecimal digits, suffix,\n@@ -462,2 +461,2 @@\n-     * @throws IllegalArgumentException if the {@code prefix} or {@code suffix} is not present for each byte value,\n-     *          the byte values are not hexadecimal characters, or if the {@code delimiter} is not present\n+     * @throws IllegalArgumentException if the prefix or suffix is not present for each byte value,\n+     *          the byte values are not hexadecimal characters, or if the delimiter is not present\n@@ -473,5 +472,4 @@\n-     * Each byte value is parsed as the {@code prefix}, two hexadecimal characters from the\n-     * uppercase or lowercase digits, and the {@code suffix}.\n-     * A {@code delimiter} appears after each formatted value, except the last.\n-     * The {@code delimiter}s, {@code prefix}es, and {@code suffix}es strings must be present;\n-     * they may be empty strings.\n+     * Each byte value is parsed as the prefix, two hexadecimal characters from the\n+     * uppercase or lowercase digits, and the suffix.\n+     * A delimiter appears after each formatted value, except the last.\n+     * The delimiters, prefixes, and suffixes strings must be present; they may be empty strings.\n@@ -481,1 +479,1 @@\n-     *           {@code delimiters}, {@code prefix}, and {@code suffix}.\n+     *           delimiters, prefix, and suffix.\n@@ -487,1 +485,1 @@\n-     *          or the {@code delimiter}, {@code prefix}, or {@code suffix} are not found\n+     *          or the delimiter, prefix, or suffix are not found\n@@ -534,5 +532,4 @@\n-     * Each byte value is parsed as the {@code prefix}, two hexadecimal characters from the\n-     * uppercase or lowercase digits, and the {@code suffix}.\n-     * A {@code delimiter} appears after each formatted value, except the last.\n-     * The {@code delimiter}s, {@code prefix}es, and {@code suffix}es strings must be present;\n-     * they may be empty strings.\n+     * Each byte value is parsed as the prefix, two hexadecimal characters from the\n+     * uppercase or lowercase digits, and the suffix.\n+     * A delimiter appears after each formatted value, except the last.\n+     * The delimiters, prefixes, and suffixes strings must be present; they may be empty strings.\n@@ -542,1 +539,1 @@\n-     *          {@code delimiters}, {@code prefix}, and {@code suffix}.\n+     *          delimiters, prefix, and suffix.\n@@ -548,1 +545,1 @@\n-     *          or the {@code delimiter}, {@code prefix}, or {@code suffix} are not found\n+     *          or the delimiter, prefix, or suffix are not found\n@@ -623,1 +620,1 @@\n-     * The {@code delimiter}, {@code prefix} and {@code suffix} are not used.\n+     * The delimiter, prefix and suffix are not used.\n@@ -666,1 +663,1 @@\n-     * The {@code delimiter}, {@code prefix} and {@code suffix} are not used.\n+     * The delimiter, prefix and suffix are not used.\n@@ -679,1 +676,1 @@\n-     * The {@code delimiter}, {@code prefix} and {@code suffix} are not used.\n+     * The delimiter, prefix and suffix are not used.\n@@ -702,1 +699,1 @@\n-     * The {@code delimiter}, {@code prefix} and {@code suffix} are not used.\n+     * The delimiter, prefix and suffix are not used.\n@@ -729,1 +726,1 @@\n-     * The {@code delimiter}, {@code prefix} and {@code suffix} are not used.\n+     * The delimiter, prefix and suffix are not used.\n@@ -764,1 +761,1 @@\n-     * The {@code delimiter}, {@code prefix} and {@code suffix} are not used.\n+     * The delimiter, prefix and suffix are not used.\n@@ -861,1 +858,1 @@\n-     * The {@code delimiter}, {@code prefix} and {@code suffix} are not used.\n+     * The delimiter, prefix and suffix are not used.\n@@ -882,1 +879,1 @@\n-     * The {@code delimiter}, {@code prefix} and {@code suffix} are not used.\n+     * The delimiter, prefix and suffix are not used.\n@@ -905,1 +902,1 @@\n-     * The {@code delimiter}, {@code prefix} and {@code suffix} are not used.\n+     * The delimiter, prefix and suffix are not used.\n@@ -931,1 +928,1 @@\n-     * The {@code delimiter}, {@code prefix} and {@code suffix} are not used.\n+     * The delimiter, prefix and suffix are not used.\n@@ -954,1 +951,1 @@\n-     * The {@code delimiter}, {@code prefix} and {@code suffix} are not used.\n+     * The delimiter, prefix and suffix are not used.\n@@ -982,1 +979,1 @@\n-     *         {@code uppercase}, {@code delimiter}, {@code prefix}, and {@code suffix} are equal;\n+     *         uppercase, delimiter, prefix, and suffix are equal;\n@@ -999,2 +996,1 @@\n-     * Returns a hashcode for this {@code HexFormat} that is consistent with\n-     * {@link #equals(Object) equals}.\n+     * Returns a hashcode for this {@code HexFormat}.\n@@ -1012,2 +1008,2 @@\n-     * Returns a description of the formatter parameters for {@code uppercase},\n-     * {@code delimiter}, {@code prefix}, and {@code suffix}.\n+     * Returns a description of the formatter parameters for uppercase,\n+     * delimiter, prefix, and suffix.\n","filename":"src\/java.base\/share\/classes\/java\/util\/HexFormat.java","additions":71,"deletions":75,"binary":false,"changes":146,"status":"modified"},{"patch":"@@ -386,0 +386,1 @@\n+        String allHex = \"fedcba9876543210\";\n@@ -392,0 +393,3 @@\n+            Assert.assertEquals(s, allHex.substring(16 - digits, 16));\n+            long expected = (digits < 16) ? orig & ~(0xffffffffffffffffL << (4 * digits)) : orig;\n+            Assert.assertEquals(actual, expected);\n@@ -395,0 +399,6 @@\n+    \/**\n+     * Example code from the HexFormat javadoc.\n+     * Showing simple usage of the API using \"assert\" to express the correct results\n+     * when shown in the javadoc.\n+     * The additional TestNG asserts verify the correctness of the same code.\n+     *\/\n@@ -397,1 +407,0 @@\n-\n@@ -409,0 +418,3 @@\n+            Assert.assertTrue(byteStr.equals(\"7f\"));\n+            Assert.assertTrue(b == byteVal);\n+\n@@ -415,0 +427,1 @@\n+            Assert.assertTrue(c == charVal);\n@@ -421,0 +434,1 @@\n+            Assert.assertTrue(i == intVal);\n@@ -427,0 +441,1 @@\n+            Assert.assertTrue(l == longVal);\n@@ -439,0 +454,1 @@\n+            Assert.assertTrue(Arrays.equals(bytes, parsed));\n@@ -451,0 +467,1 @@\n+            Assert.assertTrue(Arrays.equals(bytes, parsed));\n@@ -462,0 +479,1 @@\n+            Assert.assertTrue(Arrays.equals(bytes, parsed));\n","filename":"test\/jdk\/java\/util\/HexFormat\/HexFormatTest.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"}]}