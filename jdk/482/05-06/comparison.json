{"files":[{"patch":"@@ -45,2 +45,1 @@\n- * or choice of {@link #withUpperCase()} or {@link #withLowerCase()} parameters using\n- * a fluent builder style.\n+ * or choice of {@link #withUpperCase()} or {@link #withLowerCase()} parameters.\n@@ -50,2 +49,2 @@\n- * {@link #toHexDigits(long)}, etc.\n- * For conversions producing uppercase hexadecimal strings use {@link #withUpperCase()}.\n+ * {@link #toHexDigits(long)}, etc. The default is to use lowercase characters {@code \"0-9\",\"a-f\"}.\n+ * For conversions producing uppercase hexadecimal the characters are {@code \"0-9\",\"A-F\"}.\n@@ -63,2 +62,2 @@\n- * The formatted output can be appended to {@link StringBuilder}, {@link System#out},\n- * {@link java.io.Writer}, and {@link java.io.PrintStream}, all of which are {@link Appendable}.\n+ * The formatted output is a string or to {@link Appendable} types including\n+ * {@link StringBuilder}, {@link java.io.Writer}, and {@link java.io.PrintStream}.\n@@ -87,1 +86,1 @@\n- *     int byteVal = hex.fromHexDigits(byteStr);\n+ *     byte byteVal = (byte)hex.fromHexDigits(byteStr);\n@@ -126,1 +125,0 @@\n- * @implSpec\n@@ -565,1 +563,1 @@\n-        assert index + literal.length() <= string.length() : \"pre-checked invariant error\";\n+        assert index <= string.length() - literal.length()  : \"pre-checked invariant error\";\n","filename":"src\/java.base\/share\/classes\/java\/util\/HexFormat.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -640,1 +640,1 @@\n-            int byteVal = hex.fromHexDigits(byteStr);\n+            byte byteVal = (byte)hex.fromHexDigits(byteStr);\n","filename":"test\/jdk\/java\/util\/HexFormat\/HexFormatTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}