{"files":[{"patch":"@@ -45,1 +45,1 @@\n- * or choice of {@link #withUppercase()} or {@link #withLowercase()} parameters using\n+ * or choice of {@link #withUpperCase()} or {@link #withLowerCase()} parameters using\n@@ -51,1 +51,1 @@\n- * For conversions producing uppercase hexadecimal strings use {@link #withUppercase()}.\n+ * For conversions producing uppercase hexadecimal strings use {@link #withUpperCase()}.\n@@ -68,1 +68,1 @@\n- * For conversions producing uppercase hexadecimal strings use {@link #withUppercase()}.\n+ * For conversions producing uppercase hexadecimal strings use {@link #withUpperCase()}.\n@@ -77,1 +77,0 @@\n- * <p>\n@@ -108,1 +107,1 @@\n- * For a fingerprint of byte values that uses the delimiter colon ({@code \":\"\"})\n+ * For a fingerprint of byte values that uses the delimiter colon ({@code \":\"})\n@@ -111,2 +110,2 @@\n- *     HexFormat formatFingerprint = HexFormat.ofDelimiter(\":\").withUppercase();\n- *     byte[] bytes = { 0, 1, 2, 3, 124, 125, 126, 127};\n+ *     HexFormat formatFingerprint = HexFormat.ofDelimiter(\":\").withUpperCase();\n+ *     byte[] bytes = {0, 1, 2, 3, 124, 125, 126, 127};\n@@ -165,1 +164,1 @@\n-     * Construct a formatter with a delimiter, prefix, suffix, and array of digits.\n+     * Returns a HexFormat with a delimiter, prefix, suffix, and array of digits.\n@@ -184,1 +183,1 @@\n-     * {@link #withUppercase() withUppercase}, {@link #withLowercase() withLowercase},\n+     * {@link #withUpperCase() withUpperCase}, {@link #withLowerCase() withLowerCase},\n@@ -198,1 +197,1 @@\n-     * {@link #withUppercase() withUppercase}, {@link #withLowercase() withLowercase},\n+     * {@link #withUpperCase() withUpperCase}, {@link #withLowerCase() withLowerCase},\n@@ -203,1 +202,1 @@\n-     * @return a {@link Formatter} with the {@code delimiter} and lowercase letters\n+     * @return a {@link HexFormat} with the {@code delimiter} and lowercase letters\n@@ -206,1 +205,1 @@\n-        return new HexFormat(delimiter, \"\", \"\", HexFormat.LOWERCASE_DIGITS);\n+        return new HexFormat(delimiter, \"\", \"\", LOWERCASE_DIGITS);\n@@ -244,2 +243,2 @@\n-    public HexFormat withUppercase() {\n-        return new HexFormat(this.delimiter, this.prefix, this.suffix, HexFormat.UPPERCASE_DIGITS);\n+    public HexFormat withUpperCase() {\n+        return new HexFormat(this.delimiter, this.prefix, this.suffix, UPPERCASE_DIGITS);\n@@ -254,2 +253,2 @@\n-    public HexFormat withLowercase() {\n-        return new HexFormat(this.delimiter, this.prefix, this.suffix, HexFormat.LOWERCASE_DIGITS);\n+    public HexFormat withLowerCase() {\n+        return new HexFormat(this.delimiter, this.prefix, this.suffix, LOWERCASE_DIGITS);\n@@ -291,1 +290,1 @@\n-    public boolean uppercase() {\n+    public boolean isUpperCase() {\n@@ -298,1 +297,1 @@\n-     * {@linkplain #uppercase selected from} uppercase or lowercase digits, and the {@code suffix}.\n+     * {@linkplain #isUpperCase selected from} uppercase or lowercase digits, and the {@code suffix}.\n@@ -314,1 +313,1 @@\n-     * {@linkplain #uppercase selected from} uppercase or lowercase digits, and the {@code suffix}.\n+     * {@linkplain #isUpperCase selected from} uppercase or lowercase digits, and the {@code suffix}.\n@@ -343,1 +342,1 @@\n-     * {@linkplain #uppercase selected from} uppercase or lowercase digits, and the {@code suffix}.\n+     * {@linkplain #isUpperCase selected from} uppercase or lowercase digits, and the {@code suffix}.\n@@ -361,1 +360,1 @@\n-     * {@linkplain #uppercase selected from} uppercase or lowercase digits, and the {@code suffix}.\n+     * {@linkplain #isUpperCase selected from} uppercase or lowercase digits, and the {@code suffix}.\n@@ -521,1 +520,1 @@\n-            HexFormat.checkLiteral(string, offset + 2, between);\n+            checkLiteral(string, offset + 2, between);\n@@ -594,1 +593,1 @@\n-     * If the parameter {@link #uppercase()} is {@code true} the\n+     * If the parameter {@link #isUpperCase()} is {@code true} the\n@@ -608,1 +607,1 @@\n-     * If the parameter {@link #uppercase()} is {@code true} the\n+     * If the parameter {@link #isUpperCase()} is {@code true} the\n@@ -622,2 +621,2 @@\n-     * Each nibble (4 bits) of the value is formatted as if by\n-     * {@link #toLowHexDigit(int) toLowHexDigit(nibble)}.\n+     * Each nibble (4 bits) from most significant to least significant of the value\n+     * is formatted as if by {@link #toLowHexDigit(int) toLowHexDigit(nibble)}.\n@@ -642,0 +641,2 @@\n+     * Each nibble (4 bits) from most significant to least significant of the value\n+     * is formatted as if by {@link #toLowHexDigit(int) toLowHexDigit(nibble)}.\n@@ -663,2 +664,2 @@\n-     * Each nibble (4 bits) of the value is formatted as if by\n-     * {@link #toLowHexDigit(int) toLowHexDigit(nibble)}.\n+     * Each nibble (4 bits) from most significant to least significant of the value\n+     * is formatted as if by {@link #toLowHexDigit(int) toLowHexDigit(nibble)}.\n@@ -676,2 +677,2 @@\n-     * Each nibble (4 bits) of the value is formatted as if by\n-     * {@link #toLowHexDigit(int) toLowHexDigit(nibble)}.\n+     * Each nibble (4 bits) from most significant to least significant of the value\n+     * is formatted as if by {@link #toLowHexDigit(int) toLowHexDigit(nibble)}.\n@@ -699,2 +700,2 @@\n-     * Each nibble (4 bits) of the value is formatted as if by\n-     * {@link #toLowHexDigit(int) toLowHexDigit(nibble)}.\n+     * Each nibble (4 bits) from most significant to least significant of the value\n+     * is formatted as if by {@link #toLowHexDigit(int) toLowHexDigit(nibble)}.\n@@ -726,2 +727,2 @@\n-     * Each nibble (4 bits) of the value is formatted as if by\n-     * {@link #toLowHexDigit(int) toLowHexDigit(nibble)}.\n+     * Each nibble (4 bits) from most significant to least significant of the value\n+     * is formatted as if by {@link #toLowHexDigit(int) toLowHexDigit(nibble)}.\n@@ -761,2 +762,2 @@\n-     * Each nibble (4 bits) of the value is formatted as if by\n-     * {@link #toLowHexDigit(int) toLowHexDigit(nibble)}.\n+     * Each nibble (4 bits) from most significant to least significant of the value\n+     * is formatted as if by {@link #toLowHexDigit(int) toLowHexDigit(nibble)}.\n@@ -879,1 +880,2 @@\n-     * All of the characters must be valid hex digits according to {@link #fromHexDigit(int)}.\n+     * The hexadecimal characters are parsed from most significant to least significant\n+     * using {@link #fromHexDigit(int)}.\n@@ -901,2 +903,2 @@\n-     * The characters in the range from {@code index} to {@code index + length - 1},\n-     * inclusive, must be valid hex length according to {@link #fromHexDigit(int)}.\n+     * The characters in the range from {@code index} to {@code index + length - 1}, inclusive,\n+     * are parsed from most significant to least significant using {@link #fromHexDigit(int)}.\n@@ -927,1 +929,2 @@\n-     * All of the characters must be valid hex digits according to {@link #fromHexDigit(int)}.\n+     * The hexadecimal characters are parsed from most significant to least significant\n+     * using {@link #fromHexDigit(int)}.\n@@ -949,2 +952,2 @@\n-     * The characters in the range from {@code index} to {@code index + length - 1},\n-     * inclusive, must be valid hex digits according to {@link #fromHexDigit(int)}.\n+     * The characters in the range from {@code index} to {@code index + length - 1}, inclusive,\n+     * are parsed from most significant to least significant using {@link #fromHexDigit(int)}.\n@@ -1012,1 +1015,1 @@\n-     * @return return a description of this {@code Formatter}\n+     * @return return a description of this {@code HexFormat}\n@@ -1016,1 +1019,1 @@\n-        return escapeNL(\"uppercase: \" + (digits == UPPERCASE_DIGITS) +\n+        return escapeNL(\"uppercase: \" + Arrays.equals(digits, UPPERCASE_DIGITS) +\n","filename":"src\/java.base\/share\/classes\/java\/util\/HexFormat.java","additions":47,"deletions":44,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -704,1 +704,1 @@\n-        HexFormat hex = HexFormat.of().withUppercase();\n+        HexFormat hex = HexFormat.of().withUpperCase();\n@@ -751,1 +751,1 @@\n-        HexFormat hex = HexFormat.of().withUppercase();\n+        HexFormat hex = HexFormat.of().withUpperCase();\n","filename":"src\/java.base\/share\/classes\/java\/util\/Properties.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-        return HexFormat.ofDelimiter(\":\").withUppercase().formatHex(bytes);\n+        return HexFormat.ofDelimiter(\":\").withUpperCase().formatHex(bytes);\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SNIServerName.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    private static final HexFormat HEX_UPPERCASE = HexFormat.of().withUppercase();\n+    private static final HexFormat HEX_UPPERCASE = HexFormat.of().withUpperCase();\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/ParseUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-        HexFormat hex = HexFormat.of().withUppercase();\n+        HexFormat hex = HexFormat.of().withUpperCase();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixUriUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.util.HexFormat;\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/Filter.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -490,1 +490,1 @@\n-            HexFormat hex = HexFormat.of().withUppercase().withPrefix(\"\\\\\");\n+            HexFormat hex = HexFormat.of().withUpperCase().withPrefix(\"\\\\\");\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/toolkit\/dir\/SearchFilter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1116,1 +1116,1 @@\n-        HexFormat format = HexFormat.of().withUppercase();\n+        HexFormat format = HexFormat.of().withUpperCase();\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/Utils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.Locale;\n@@ -49,1 +50,1 @@\n-                        HexFormat.of().withUppercase()},\n+                        HexFormat.of().withUpperCase()},\n@@ -57,1 +58,1 @@\n-                        HexFormat.ofDelimiter(\",\").withUppercase().withPrefix(\"0x\").withSuffix(\"\")},\n+                        HexFormat.ofDelimiter(\",\").withUpperCase().withPrefix(\"0x\").withSuffix(\"\")},\n@@ -327,1 +328,1 @@\n-                        (uppercase) ? cc.toUpperCase() : cc.toLowerCase(),\n+                        (uppercase) ? cc.toUpperCase(Locale.ROOT) : cc.toLowerCase(Locale.ROOT),\n@@ -430,1 +431,1 @@\n-            HexFormat formatFingerprint = HexFormat.ofDelimiter(\":\").withUppercase();\n+            HexFormat formatFingerprint = HexFormat.ofDelimiter(\":\").withUpperCase();\n","filename":"test\/jdk\/java\/util\/HexFormat\/HexFormatTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}