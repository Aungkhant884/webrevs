{"files":[{"patch":"@@ -331,1 +331,1 @@\n-            StringBuilder sb = new StringBuilder(bytes.length *\n+            StringBuilder sb = new StringBuilder(length *\n@@ -383,1 +383,1 @@\n-                toHexDigits(out, bytes[0]);\n+                toHexDigits(out, bytes[index]);\n@@ -385,2 +385,2 @@\n-                    for (int i = 1; i < bytes.length; i++) {\n-                        toHexDigits(out, bytes[i]);\n+                    for (int i = 1; i < length; i++) {\n+                        toHexDigits(out, bytes[index + i]);\n@@ -389,1 +389,1 @@\n-                    for (int i = 1; i < bytes.length; i++) {\n+                    for (int i = 1; i < length; i++) {\n@@ -391,1 +391,1 @@\n-                        toHexDigits(out, bytes[i]);\n+                        toHexDigits(out, bytes[index + i]);\n@@ -429,4 +429,4 @@\n-            rep = new byte[bytes.length * 3 - 1];\n-            rep[0] = (byte) toHighHexDigit(bytes[0]);\n-            rep[1] = (byte) toLowHexDigit(bytes[0]);\n-            for (int i = 1; i < bytes.length; i++) {\n+            rep = new byte[length * 3 - 1];\n+            rep[0] = (byte) toHighHexDigit(bytes[index]);\n+            rep[1] = (byte) toLowHexDigit(bytes[index]);\n+            for (int i = 1; i < length; i++) {\n@@ -434,2 +434,2 @@\n-                rep[i * 3    ] = (byte) toHighHexDigit(bytes[i]);\n-                rep[i * 3 + 1] = (byte) toLowHexDigit(bytes[i]);\n+                rep[i * 3    ] = (byte) toHighHexDigit(bytes[index + i]);\n+                rep[i * 3 + 1] = (byte) toLowHexDigit(bytes[index + i]);\n@@ -493,1 +493,1 @@\n-            string = string.subSequence(index, length);\n+            string = string.subSequence(index, index + length);\n@@ -572,1 +572,2 @@\n-                        \"\\\", expected: \\\"\" + literal + \"\\\"\"));\n+                        \"\\\", expected: \\\"\" + literal + \"\\\", index: \" + index +\n+                        \" ch: \" + (int)string.charAt(index + i)));\n@@ -643,0 +644,1 @@\n+     * @param <A> The type of Appendable\n@@ -648,1 +650,1 @@\n-    public Appendable toHexDigits(Appendable out, byte value) {\n+    public <A extends Appendable> A toHexDigits(A out, byte value) {\n@@ -850,1 +852,1 @@\n-            throw new NumberFormatException(\"not a hexadecimal digit: \\\"\" + (char)ch + \"\\\"\");\n+            throw new NumberFormatException(\"not a hexadecimal digit: \\\"\" + (char)ch + \"\\\" + \" + ch);\n","filename":"src\/java.base\/share\/classes\/java\/util\/HexFormat.java","additions":18,"deletions":16,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n@@ -26,1 +24,0 @@\n-import org.testng.Assert;\n@@ -30,0 +27,4 @@\n+import java.io.CharArrayWriter;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.CharBuffer;\n@@ -34,0 +35,7 @@\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertSame;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.expectThrows;\n+\n@@ -36,1 +44,1 @@\n- * @summary Check Hex formatting and parsing\n+ * @summary Check HexFormat formatting and parsing\n@@ -42,0 +50,1 @@\n+    static final Class<NullPointerException> NPE = NullPointerException.class;\n@@ -45,3 +54,0 @@\n-        String codeDelim = \", \";\n-        String codePrefix = \"0x\";\n-        String codeSuffix = \"\";\n@@ -57,4 +63,6 @@\n-                {\",\", \"0x\", \"\", true,\n-                        HexFormat.ofDelimiter(\",\").withUpperCase().withPrefix(\"0x\").withSuffix(\"\")},\n-                {codeDelim, codePrefix, codeSuffix, false,\n-                        HexFormat.ofDelimiter(codeDelim).withPrefix(codePrefix).withSuffix(codeSuffix)},\n+                {\", \", \"0x\", \"\", true,\n+                        HexFormat.ofDelimiter(\", \").withUpperCase().withPrefix(\"0x\")},\n+                {\"\\u0202\", \"\\u0203\", \"\\u0204\", false,\n+                        HexFormat.ofDelimiter(\"\\u0202\").withPrefix(\"\\u0203\").withSuffix(\"\\u0204\")},\n+                {\"\\u0202\", \"\", \"\", false,\n+                        HexFormat.ofDelimiter(\"\\u0202\")},\n@@ -108,0 +116,2 @@\n+                {\"zz00\", 0, 4, IllegalArgumentException.class},      \/\/ non-hex digits\n+                {\"00zz\", 0, 4, IllegalArgumentException.class},      \/\/ non-hex digits\n@@ -136,1 +146,1 @@\n-            Assert.assertEquals(c, expected.charAt(0), \"toHex formatting\");\n+            assertEquals(c, expected.charAt(0), \"toHex formatting\");\n@@ -141,1 +151,1 @@\n-    static void testToHexPair() {\n+    static void testToHexDigits() {\n@@ -146,2 +156,2 @@\n-            Assert.assertEquals(expected, i, \"byteFromHex formatting\");\n-            Assert.assertEquals(actual.charAt(0), hex.toHighHexDigit((byte)i),\n+            assertEquals(expected, i, \"fromHexDigits\");\n+            assertEquals(actual.charAt(0), hex.toHighHexDigit((byte)i),\n@@ -149,1 +159,1 @@\n-            Assert.assertEquals(actual.charAt(1), hex.toLowHexDigit((byte)i),\n+            assertEquals(actual.charAt(1), hex.toLowHexDigit((byte)i),\n@@ -155,1 +165,11 @@\n-    static void testFromHex() {\n+    static void testIsHexDigit() {\n+        HexFormat hex = HexFormat.of();\n+        for (int i = 0; i < 0x3ff; i++) {\n+            boolean actual = hex.isHexDigit(i);\n+            boolean expected = Character.digit(i, 16) >= 0;\n+            assertEquals(actual, expected, \"isHexDigit: \" + i);\n+        }\n+    }\n+\n+    @Test\n+    static void testFromHexDigit() {\n@@ -160,1 +180,1 @@\n-            Assert.assertEquals(v, i & 0xf, \"fromHex decode\");\n+            assertEquals(v, i & 0xf, \"fromHex decode\");\n@@ -171,1 +191,1 @@\n-            Throwable ex = Assert.expectThrows(NumberFormatException.class,\n+            Throwable ex = expectThrows(NumberFormatException.class,\n@@ -178,1 +198,1 @@\n-    static void testAppendHexByte() {\n+    static void testAppendHexByteWithStringBuilder() {\n@@ -183,4 +203,5 @@\n-            hex.toHexDigits(sb, (byte)i);\n-            Assert.assertEquals(sb.length(), 2, \"wrong length after append: \" + i);\n-            Assert.assertEquals(sb.charAt(0), hex.toHighHexDigit((byte)i), \"MSB converted wrong\");\n-            Assert.assertEquals(sb.charAt(1), hex.toLowHexDigit((byte)i), \"LSB converted wrong\");\n+            StringBuilder sb1 = hex.toHexDigits(sb, (byte)i);\n+            assertSame(sb1, sb, \"toHexDigits returned different StringBuilder\");\n+            assertEquals(sb.length(), 2, \"wrong length after append: \" + i);\n+            assertEquals(sb.charAt(0), hex.toHighHexDigit((byte)i), \"MSB converted wrong\");\n+            assertEquals(sb.charAt(1), hex.toLowHexDigit((byte)i), \"LSB converted wrong\");\n@@ -188,1 +209,24 @@\n-            Assert.assertEquals(hex.fromHexDigits(sb), i, \"hex.format(sb, byte) wrong\");\n+            assertEquals(hex.fromHexDigits(sb), i, \"hex.format(sb, byte) wrong\");\n+        }\n+    }\n+\n+    @Test\n+    static void testAppendHexByteWithCharBuffer() {\n+        HexFormat hex = HexFormat.of();\n+        CharBuffer cb = CharBuffer.allocate(256);\n+        for (int i = 1; i <= 128; i++) {\n+            CharBuffer cb1 = hex.toHexDigits(cb, (byte)i);\n+            assertTrue(cb1 == cb);\n+            assertEquals(cb.position(), i * 2);\n+        }\n+        assertEquals(cb.remaining(), 0);\n+    }\n+\n+    @Test\n+    static void testAppendHexByteWithCharArrayWriter() {\n+        HexFormat hex = HexFormat.of();\n+        CharArrayWriter caw = new CharArrayWriter();\n+        for (int i = 1; i <= 128; i++) {\n+            CharArrayWriter caw1 = hex.toHexDigits(caw, (byte)i);\n+            assertTrue(caw1 == caw);\n+            assertEquals(caw.size(), i * 2);\n@@ -194,1 +238,1 @@\n-                HexFormat hex = HexFormat.of();\n+        HexFormat hex = HexFormat.of();\n@@ -200,1 +244,1 @@\n-            Throwable ex = Assert.expectThrows(NumberFormatException.class,\n+            Throwable ex = expectThrows(NumberFormatException.class,\n@@ -209,1 +253,1 @@\n-        Throwable ex = Assert.expectThrows(IllegalArgumentException.class,\n+        Throwable ex = expectThrows(IllegalArgumentException.class,\n@@ -220,4 +264,4 @@\n-        Assert.assertThrows(NullPointerException.class, () -> HexFormat.ofDelimiter(null));\n-        Assert.assertThrows(NullPointerException.class, () -> HexFormat.of().withDelimiter(null));\n-        Assert.assertThrows(NullPointerException.class, () -> HexFormat.of().withPrefix(null));\n-        Assert.assertThrows(NullPointerException.class, () -> HexFormat.of().withSuffix(null));\n+        assertThrows(NPE, () -> HexFormat.ofDelimiter(null));\n+        assertThrows(NPE, () -> HexFormat.of().withDelimiter(null));\n+        assertThrows(NPE, () -> HexFormat.of().withPrefix(null));\n+        assertThrows(NPE, () -> HexFormat.of().withSuffix(null));\n@@ -228,8 +272,4 @@\n-        Assert.assertThrows(NullPointerException.class,\n-                () -> HexFormat.of().formatHex(null));\n-        Assert.assertThrows(NullPointerException.class,\n-                () -> HexFormat.of().formatHex(null, 0, 1));\n-        Assert.assertThrows(NullPointerException.class,\n-                () -> HexFormat.of().formatHex(null, null));\n-        Assert.assertThrows(NullPointerException.class,\n-                () -> HexFormat.of().formatHex(null, null, 0, 0));\n+        assertThrows(NPE, () -> HexFormat.of().formatHex(null));\n+        assertThrows(NPE, () -> HexFormat.of().formatHex(null, 0, 1));\n+        assertThrows(NPE, () -> HexFormat.of().formatHex(null, null));\n+        assertThrows(NPE,  () -> HexFormat.of().formatHex(null, null, 0, 0));\n@@ -237,4 +277,2 @@\n-        Assert.assertThrows(NullPointerException.class,\n-                () -> HexFormat.of().formatHex(sb, null));\n-        Assert.assertThrows(NullPointerException.class,\n-                () -> HexFormat.of().formatHex(sb, null, 0, 1));\n+        assertThrows(NPE, () -> HexFormat.of().formatHex(sb, null));\n+        assertThrows(NPE, () -> HexFormat.of().formatHex(sb, null, 0, 1));\n@@ -245,6 +283,3 @@\n-        Assert.assertThrows(NullPointerException.class,\n-                () -> HexFormat.of().parseHex(null));\n-        Assert.assertThrows(NullPointerException.class,\n-                () -> HexFormat.of().parseHex((String)null, 0, 0));\n-        Assert.assertThrows(NullPointerException.class,\n-                () -> HexFormat.of().parseHex((char[])null, 0, 0));\n+        assertThrows(NPE, () -> HexFormat.of().parseHex(null));\n+        assertThrows(NPE, () -> HexFormat.of().parseHex((String)null, 0, 0));\n+        assertThrows(NPE, () -> HexFormat.of().parseHex((char[])null, 0, 0));\n@@ -255,8 +290,4 @@\n-        Assert.assertThrows(NullPointerException.class,\n-                () -> HexFormat.of().fromHexDigits(null));\n-        Assert.assertThrows(NullPointerException.class,\n-                () -> HexFormat.of().fromHexDigits(null, 0, 0));\n-        Assert.assertThrows(NullPointerException.class,\n-                () -> HexFormat.of().fromHexDigitsToLong(null));\n-        Assert.assertThrows(NullPointerException.class,\n-                () -> HexFormat.of().fromHexDigitsToLong(null, 0, 0));\n+        assertThrows(NPE, () -> HexFormat.of().fromHexDigits(null));\n+        assertThrows(NPE, () -> HexFormat.of().fromHexDigits(null, 0, 0));\n+        assertThrows(NPE, () -> HexFormat.of().fromHexDigitsToLong(null));\n+        assertThrows(NPE, () -> HexFormat.of().fromHexDigitsToLong(null, 0, 0));\n@@ -267,2 +298,1 @@\n-        Assert.assertThrows(NullPointerException.class,\n-                () -> HexFormat.of().toHexDigits(null, (byte)0));\n+        assertThrows(NPE, () -> HexFormat.of().toHexDigits(null, (byte)0));\n@@ -274,1 +304,1 @@\n-        Assert.assertThrows(exClass,\n+        assertThrows(exClass,\n@@ -277,1 +307,1 @@\n-        Assert.assertThrows(exClass,\n+        assertThrows(exClass,\n@@ -284,1 +314,1 @@\n-        Assert.assertThrows(exClass,\n+        assertThrows(exClass,\n@@ -286,1 +316,1 @@\n-        Assert.assertThrows(exClass,\n+        assertThrows(exClass,\n@@ -294,1 +324,1 @@\n-        Assert.assertThrows(IllegalArgumentException.class,\n+        assertThrows(IllegalArgumentException.class,\n@@ -296,1 +326,1 @@\n-        Assert.assertThrows(IllegalArgumentException.class,\n+        assertThrows(IllegalArgumentException.class,\n@@ -298,1 +328,1 @@\n-        Assert.assertThrows(IllegalArgumentException.class,\n+        assertThrows(IllegalArgumentException.class,\n@@ -300,1 +330,1 @@\n-        Assert.assertThrows(IllegalArgumentException.class,\n+        assertThrows(IllegalArgumentException.class,\n@@ -310,2 +340,2 @@\n-        Assert.assertTrue(res.startsWith(prefix), \"Prefix not found\");\n-        Assert.assertTrue(res.endsWith(suffix), \"Suffix not found\");\n+        assertTrue(res.startsWith(prefix), \"Prefix not found\");\n+        assertTrue(res.endsWith(suffix), \"Suffix not found\");\n@@ -314,1 +344,1 @@\n-        Assert.assertEquals(res.length(), expectedLen, \"String length\");\n+        assertEquals(res.length(), expectedLen, \"String length\");\n@@ -322,2 +352,2 @@\n-                Assert.assertTrue(value.startsWith(prefix), \"wrong prefix\");\n-                Assert.assertTrue(value.endsWith(suffix), \"wrong suffix\");\n+                assertTrue(value.startsWith(prefix), \"wrong prefix\");\n+                assertTrue(value.endsWith(suffix), \"wrong suffix\");\n@@ -327,1 +357,1 @@\n-                Assert.assertEquals(cc,\n+                assertEquals(cc,\n@@ -332,1 +362,1 @@\n-                    Assert.assertEquals(res.substring(offset + valueChars,\n+                    assertEquals(res.substring(offset + valueChars,\n@@ -340,1 +370,14 @@\n-    static void testDecoderString(String unused1, String unused2, String unused3,\n+    static void testFormatHexString(String unused1, String unused2, String unused3,\n+                                   boolean unused4, HexFormat hex) {\n+        byte[] expected = genBytes('A', 15);\n+        String s = hex.formatHex(expected);\n+        System.out.println(\"    formatted: \" + s);\n+\n+        byte[] actual = hex.parseHex(s);\n+        System.out.println(\"    parsed as: \" + Arrays.toString(actual));\n+        int mismatch = Arrays.mismatch(expected, actual);\n+        assertEquals(actual, expected, \"format\/parse cycle failed, mismatch: \" + mismatch);\n+    }\n+\n+    @Test(dataProvider=\"HexFormattersParsers\")\n+    static void testParseHexStringRange(String delimiter, String prefix, String suffix,\n@@ -344,0 +387,34 @@\n+\n+        \/\/ Parse values 2, 3, 4 from the generated string\n+        int low = 2;\n+        int high = 5;\n+        int stride = prefix.length() + 2 + suffix.length() + delimiter.length();\n+        System.out.println(\"    formatted subrange: \" +\n+                s.substring(low * stride, high * stride - delimiter.length()));\n+        byte[] actual = hex.parseHex(s, low * stride,\n+                high * stride - delimiter.length() - low * stride);\n+        System.out.println(\"    parsed as: \" + Arrays.toString(actual));\n+\n+        assertEquals(actual.length, (high - low), \"array length\");\n+        int mismatch = Arrays.mismatch(expected, low, high, actual, 0, high - low);\n+        assertEquals(mismatch, -1, \"format\/parse cycle failed, mismatch: \" + mismatch);\n+    }\n+\n+    @Test(dataProvider=\"HexFormattersParsers\")\n+    static void testParseHexEmptyString(String delimiter, String prefix, String suffix,\n+                                        boolean unused4, HexFormat hex) {\n+        byte[] actual = hex.parseHex(\"\");\n+        assertEquals(actual.length, 0, \"empty string parse\");\n+        actual = hex.parseHex(\"abc\", 0, 0);\n+        assertEquals(actual.length, 0, \"empty string range parse\");\n+        actual = hex.parseHex(new char[1], 0, 0);\n+        assertEquals(actual.length, 0, \"empty char array subrange empty parse\");\n+    }\n+\n+        @Test(dataProvider=\"HexFormattersParsers\")\n+    static void testFormatHexRangeString(String unused1, String unused2, String unused3,\n+                                   boolean unused4, HexFormat hex) {\n+        byte[] expected = genBytes('A', 15);\n+        int low = 1;\n+        int high = expected.length - 2;\n+        String s = hex.formatHex(expected, low, high - low);\n@@ -347,1 +424,16 @@\n-        System.out.println(\"    parsed as: \" + Arrays.toString(expected));\n+        System.out.println(\"    parsed as: \" + Arrays.toString(actual));\n+        int mismatch = Arrays.mismatch(expected, low, high, actual, 0, high - low);\n+        assertEquals(mismatch, -1, \"format\/parse cycle failed, mismatch: \" + mismatch);\n+    }\n+\n+    @Test(dataProvider=\"HexFormattersParsers\")\n+    static void testFormatHexAppendable(String unused1, String unused2, String unused3,\n+                                     boolean unused4, HexFormat hex) {\n+        byte[] expected = genBytes('A', 15);\n+        StringBuilder sb = new StringBuilder();\n+        StringBuilder s = hex.formatHex(sb, expected);\n+        assertEquals(s, sb, \"formatHex returned unknown StringBuilder\");\n+        System.out.println(\"    formatted: \" + s);\n+\n+        byte[] actual = hex.parseHex(s.toString());\n+        System.out.println(\"    parsed as: \" + Arrays.toString(actual));\n@@ -349,1 +441,23 @@\n-        Assert.assertEquals(actual, expected, \"encode\/decode cycle failed, mismatch: \" + mismatch);\n+        assertEquals(actual, expected, \"format\/parse cycle failed, mismatch: \" + mismatch);\n+    }\n+\n+    @Test(dataProvider=\"HexFormattersParsers\")\n+    static void testFormatHexRangeAppendable(String unused1, String unused2, String unused3,\n+                                     boolean unused4, HexFormat hex) {\n+        byte[] expected = genBytes('A', 15);\n+        int low = 1;\n+        int high = expected.length - 2;\n+        StringBuilder sb = new StringBuilder();\n+        StringBuilder s = hex.formatHex(sb, expected, low, high - low);\n+        assertEquals(s, sb, \"formatHex returned unknown StringBuilder\");\n+        System.out.println(\"    formatted: \" + s);\n+\n+        byte[] actual = hex.parseHex(s.toString());\n+        System.out.println(\"    parsed as: \" + Arrays.toString(actual));\n+        byte[] sub = Arrays.copyOfRange(expected, low, high);\n+        System.out.println(\"actual: \" + Arrays.toString(actual));\n+        System.out.println(\"sub   : \" + Arrays.toString(sub));\n+        int mismatch = Arrays.mismatch(expected, low, high, actual, 0, high - low);\n+\n+        assertEquals(actual, sub, \"format\/parse cycle failed, mismatch: \" + mismatch);\n+        assertEquals(mismatch, -1, \"format\/parse cycle failed, mismatch: \" + mismatch);\n@@ -353,1 +467,1 @@\n-    static void testDecoderCharArray(String unused1, String unused2, String unused3,\n+    static void testFormatHexCharArray(String unused1, String unused2, String unused3,\n@@ -361,1 +475,1 @@\n-        System.out.println(\"    parsed as: \" + Arrays.toString(expected));\n+        System.out.println(\"    parsed as: \" + Arrays.toString(actual));\n@@ -363,1 +477,1 @@\n-        Assert.assertEquals(actual, expected, \"format\/parse cycle failed, mismatch: \" + mismatch);\n+        assertEquals(actual, expected, \"format\/parse cycle failed, mismatch: \" + mismatch);\n@@ -374,1 +488,1 @@\n-        Assert.assertEquals(actual, hex.toString(), \"Formatter toString mismatch\");\n+        assertEquals(actual, hex.toString(), \"Formatter toString mismatch\");\n@@ -377,0 +491,45 @@\n+    @Test(dataProvider=\"HexFormattersParsers\")\n+    static void testFormatterParameterMethods(String delimiter, String prefix, String suffix,\n+                                    boolean uppercase,\n+                                    HexFormat hex) {\n+        assertEquals(hex.delimiter(), delimiter);\n+        assertEquals(hex.prefix(), prefix);\n+        assertEquals(hex.suffix(), suffix);\n+        assertEquals(hex.isUpperCase(), uppercase);\n+    }\n+\n+    @Test(dataProvider=\"HexFormattersParsers\")\n+    static void testFormatterTestEquals(String delimiter, String prefix, String suffix,\n+                                    boolean uppercase,\n+                                    HexFormat expected) {\n+        HexFormat actual = HexFormat.of()\n+                .withDelimiter(delimiter)\n+                .withPrefix(prefix)\n+                .withSuffix(suffix);\n+        actual = uppercase ? actual.withUpperCase() : actual.withLowerCase();\n+\n+        assertEquals(actual.delimiter(), delimiter, \"delimiter\");\n+        assertEquals(actual.prefix(), prefix, \"prefix\");\n+        assertEquals(actual.suffix(), suffix, \"suffix\");\n+        assertEquals(actual.isUpperCase(), uppercase, \"uppercase\");\n+        assertTrue(actual.equals(expected), \"equals method\");\n+        assertEquals(actual.hashCode(), expected.hashCode(), \"hashCode\");\n+\n+        assertTrue(actual.equals(actual));   \/\/ equals self\n+        assertFalse(actual.equals(null));    \/\/ never equals null\n+    }\n+\n+    @Test(dataProvider=\"HexFormattersParsers\")\n+    static void testZeroLength(String delimiter, String prefix, String suffix, boolean uppercase,\n+                                HexFormat hex) {\n+        \/\/ Test formatting of zero length byte arrays, should produce no output\n+        StringBuilder sb = new StringBuilder();\n+        assertEquals(hex.formatHex(new byte[0]), \"\", \"Zero length\");\n+        assertEquals(hex.formatHex(new byte[0], 0, 0), \"\", \"Zero length\");\n+\n+        hex.formatHex(sb, new byte[0]);\n+        assertEquals(sb.length(), 0, \"length should not change\");\n+        hex.formatHex(sb, new byte[0], 0, 0);\n+        assertEquals(sb.length(), 0, \"length should not change\");\n+\n+    }\n@@ -383,1 +542,18 @@\n-    static void testVariableLength() {\n+    static void testfromHexDigitsToInt() {\n+        HexFormat hex = HexFormat.of();\n+\n+        String allHex = \"76543210\";\n+        final int orig = 0x76543210;\n+        for (int digits = 0; digits <= 8; digits++) {\n+            String s = hex.toHexDigits(orig, digits);\n+            long actual = hex.fromHexDigits(s, 0, digits);\n+            System.out.printf(\"    digits: %2d, formatted: \\\"%s\\\", parsed as: 0x%08x%n\",\n+                    digits, s, actual);\n+            assertEquals(s, allHex.substring(8 - digits, 8));\n+            long expected = (digits < 8) ? orig & ~(0xffffffff << (4 * digits)) : orig;\n+            assertEquals(actual, expected);\n+        }\n+    }\n+\n+    @Test\n+    static void testfromHexDigitsToLong() {\n@@ -393,1 +569,1 @@\n-            Assert.assertEquals(s, allHex.substring(16 - digits, 16));\n+            assertEquals(s, allHex.substring(16 - digits, 16));\n@@ -395,1 +571,1 @@\n-            Assert.assertEquals(actual, expected);\n+            assertEquals(actual, expected);\n@@ -399,0 +575,25 @@\n+    @Test\n+    static void testToHexDigitsLong() {\n+        HexFormat hex = HexFormat.of();\n+\n+        String allHex = \"fedcba9876543210\";\n+        final long expected = 0xfedcba9876543210L;\n+        String s = hex.toHexDigits(expected);\n+        long actual = hex.fromHexDigitsToLong(s);\n+        System.out.printf(\"    formatted: \\\"%s\\\", parsed as: 0x%016xL%n\", s, actual);\n+        assertEquals(s, allHex);\n+        assertEquals(actual, expected);\n+    }\n+\n+    @Test(dataProvider=\"HexFormattersParsers\")\n+    static void testIOException(String delimiter, String prefix, String suffix, boolean uppercase,\n+                               HexFormat hex) {\n+        Appendable throwingAppendable = new ThrowingAppendable();\n+        assertThrows(UncheckedIOException.class,\n+                () -> hex.formatHex(throwingAppendable, new byte[1]));\n+        assertThrows(UncheckedIOException.class,\n+                () -> hex.formatHex(throwingAppendable, new byte[1], 0, 1));\n+        assertThrows(UncheckedIOException.class,\n+                () -> hex.toHexDigits(throwingAppendable, (byte)1));\n+    }\n+\n@@ -418,2 +619,2 @@\n-            Assert.assertTrue(byteStr.equals(\"7f\"));\n-            Assert.assertTrue(b == byteVal);\n+            assertTrue(byteStr.equals(\"7f\"));\n+            assertTrue(b == byteVal);\n@@ -427,1 +628,1 @@\n-            Assert.assertTrue(c == charVal);\n+            assertTrue(c == charVal);\n@@ -434,1 +635,1 @@\n-            Assert.assertTrue(i == intVal);\n+            assertTrue(i == intVal);\n@@ -441,1 +642,1 @@\n-            Assert.assertTrue(l == longVal);\n+            assertTrue(l == longVal);\n@@ -454,1 +655,1 @@\n-            Assert.assertTrue(Arrays.equals(bytes, parsed));\n+            assertTrue(Arrays.equals(bytes, parsed));\n@@ -467,1 +668,1 @@\n-            Assert.assertTrue(Arrays.equals(bytes, parsed));\n+            assertTrue(Arrays.equals(bytes, parsed));\n@@ -479,1 +680,21 @@\n-            Assert.assertTrue(Arrays.equals(bytes, parsed));\n+            assertTrue(Arrays.equals(bytes, parsed));\n+        }\n+    }\n+\n+    \/**\n+     * A test implementation of Appendable that throws IOException on all methods.\n+     *\/\n+    static class ThrowingAppendable implements Appendable {\n+        @Override\n+        public Appendable append(CharSequence csq) throws IOException {\n+            throw new IOException(\".append(CharSequence) always throws\");\n+        }\n+\n+        @Override\n+        public Appendable append(CharSequence csq, int start, int end) throws IOException {\n+            throw new IOException(\".append(CharSequence, start, end) always throws\");\n+        }\n+\n+        @Override\n+        public Appendable append(char c) throws IOException {\n+            throw new IOException(\".append(char) always throws\");\n","filename":"test\/jdk\/java\/util\/HexFormat\/HexFormatTest.java","additions":315,"deletions":94,"binary":false,"changes":409,"status":"modified"}]}