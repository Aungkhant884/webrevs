{"files":[{"patch":"@@ -315,1 +315,2 @@\n-  const size_t alignment = MAX2(page_size(false, 8), os::vm_allocation_granularity());\n+  const size_t ps = page_size(false, 8);\n+  const size_t alignment = MAX2(ps, os::vm_allocation_granularity());\n@@ -320,27 +321,0 @@\n-  \/\/ Check that code heap segments fit in cache when using large pages\n-  size_t ps = page_size();\n-  if (UseLargePages) {\n-    size_t temp_ps = ps;\n-    while (temp_ps > 0 &&\n-           align_up(non_nmethod_size, temp_ps) +\n-           align_up(profiled_size, temp_ps) +\n-           align_up(non_profiled_size, temp_ps) > cache_size) {\n-      temp_ps = os::page_sizes().next_smaller(temp_ps);\n-    }\n-    if (temp_ps <= 0) {\n-      \/\/ No small enough page found\n-      vm_exit_during_initialization(err_msg(\"Could not reserve enough space for code cache with any page size\"));\n-    } else if (temp_ps != ps){\n-      \/\/ Smaller page found\n-      char msg[256];\n-      jio_snprintf(msg, sizeof(msg),\n-                   \"Failed to reserve large page memory for segmented code cache (\" SIZE_FORMAT \"%s). \"\n-                   \"Reverting to smaller page size (\" SIZE_FORMAT \"%s).\",\n-                   byte_size_in_exact_unit(ps), exact_unit_for_byte_size(ps),\n-                   byte_size_in_exact_unit(temp_ps), exact_unit_for_byte_size(temp_ps));\n-      log_warning(codecache)(\"%s\", msg);\n-      warning(\"%s\", msg);\n-      ps = temp_ps;\n-    }\n-  }\n-\n@@ -384,1 +358,1 @@\n-ReservedCodeSpace CodeCache::reserve_heap_memory(size_t size, size_t page_size) {\n+ReservedCodeSpace CodeCache::reserve_heap_memory(size_t size, size_t rs_ps) {\n@@ -386,1 +360,14 @@\n-  const size_t rs_align = MAX2(page_size, os::vm_allocation_granularity());\n+  if (UseLargePages) {\n+    const size_t ps = page_size();\n+    if (rs_ps < ps) {\n+      char msg[256];\n+      jio_snprintf(msg, sizeof(msg),\n+                   \"Failed to reserve large page memory for code cache (\" SIZE_FORMAT \"%s). \"\n+                   \"Reverting to smaller page size (\" SIZE_FORMAT \"%s).\",\n+                   byte_size_in_exact_unit(ps), exact_unit_for_byte_size(ps),\n+                   byte_size_in_exact_unit(rs_ps), exact_unit_for_byte_size(rs_ps));\n+      log_warning(codecache)(\"%s\", msg);\n+      warning(\"%s\", msg);\n+    };\n+  }\n+  const size_t rs_align = MAX2(rs_ps, os::vm_allocation_granularity());\n@@ -388,1 +375,1 @@\n-  ReservedCodeSpace rs(rs_size, rs_align, page_size);\n+  ReservedCodeSpace rs(rs_size, rs_align, rs_ps);\n@@ -1223,1 +1210,1 @@\n-    ReservedCodeSpace rs = reserve_heap_memory(ReservedCodeCacheSize);\n+    ReservedCodeSpace rs = reserve_heap_memory(ReservedCodeCacheSize, page_size(false, 8));\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":19,"deletions":32,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -124,4 +124,1 @@\n-  static ReservedCodeSpace reserve_heap_memory(size_t size, size_t page_size);  \/\/ Reserves one continuous chunk of memory for the CodeHeaps\n-  static ReservedCodeSpace reserve_heap_memory(size_t size) { \/\/ Calls the above with current page size\n-    return reserve_heap_memory(size, page_size());\n-  };\n+  static ReservedCodeSpace reserve_heap_memory(size_t size, size_t rs_ps); \/\/ Reserves one continuous chunk of memory for the CodeHeaps\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-            out.shouldContain(\"Failed to reserve large page memory for segmented code cache\");\n+            out.shouldContain(\"Failed to reserve large page memory for code cache\");\n","filename":"test\/hotspot\/jtreg\/compiler\/codecache\/CheckLargePages.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}