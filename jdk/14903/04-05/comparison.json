{"files":[{"patch":"@@ -38,0 +38,1 @@\n+import jdk.test.lib.Asserts;\n@@ -42,0 +43,3 @@\n+import java.util.Arrays;\n+import java.util.List;\n+\n@@ -55,0 +59,1 @@\n+                    \"-Xlog:pagesize=info\",\n@@ -59,0 +64,9 @@\n+            \/\/ Parse page sizes to find next smaller page\n+            String sizes = out.firstMatch(\"Usable page sizes:(.*)\", 1);\n+            List<Long> sizeList = Arrays.stream(sizes.trim().split(\"\\\\s*,\\\\s*\")).map(CheckLargePages::parseMemoryString).sorted().toList();\n+            final int smallerPageSizeIndex = sizeList.indexOf(largePageSize) - 1;\n+            Asserts.assertGreaterThanOrEqual(smallerPageSizeIndex, 0);\n+            final long smallerPageSize = sizeList.get(smallerPageSizeIndex);\n+            \/\/ Retrieve reverted page size from code cache warning\n+            String revertedSizeString = out.firstMatch(\"Failed to use large page memory for code cache \\\\((.*)\\\\)\\\\. Reverting to smaller page size \\\\((.*)\\\\)\\\\.\", 2);\n+            Asserts.assertEquals(parseMemoryString(revertedSizeString), smallerPageSize);\n@@ -64,0 +78,20 @@\n+\n+    public static long parseMemoryString(String value) {\n+        value = value.toUpperCase();\n+        long multiplier = 1;\n+        if (value.endsWith(\"B\")) {\n+            multiplier = 1;\n+        } else if (value.endsWith(\"K\")) {\n+            multiplier = 1024;\n+        } else if (value.endsWith(\"M\")) {\n+            multiplier = 1024 * 1024;\n+        } else if (value.endsWith(\"G\")) {\n+            multiplier = 1024 * 1024 * 1024;\n+        } else {\n+            throw new IllegalArgumentException(\"Expected memory string '\" + value + \"'to end with either of: B, K, M, G\");\n+        }\n+\n+        long longValue = Long.parseUnsignedLong(value.substring(0, value.length() - 1));\n+\n+        return longValue * multiplier;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/codecache\/CheckLargePages.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"}]}