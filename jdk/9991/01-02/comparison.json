{"files":[{"patch":"@@ -377,5 +377,9 @@\n-        var ci = getText();\n-        var begin = ci.getBeginIndex();\n-        if (offset < begin || offset > ci.getEndIndex()) {\n-            throw new IllegalArgumentException(\"offset is out of bounds: \" + offset);\n-        } else if (offset == begin) {\n+        \/\/ NOTE: This implementation probably is wrong for most situations\n+        \/\/ because it fails to take into account the possibility that a\n+        \/\/ CharacterIterator passed to setText() may not have a begin offset\n+        \/\/ of 0.  But since the abstract BreakIterator doesn't have that\n+        \/\/ knowledge, it assumes the begin offset is 0.  If you subclass\n+        \/\/ BreakIterator, copy the SimpleTextBoundary implementation of this\n+        \/\/ function into your subclass.  [This should have been abstract at\n+        \/\/ this level, but it's too late to fix that now.]\n+        if (offset == 0) {\n@@ -383,6 +387,0 @@\n-        } else {\n-            int boundary = following(offset - 1);\n-            if (boundary == DONE) {\n-                throw new IllegalArgumentException();\n-            }\n-            return boundary == offset;\n@@ -390,0 +388,5 @@\n+        int boundary = following(offset - 1);\n+        if (boundary == DONE) {\n+            throw new IllegalArgumentException();\n+        }\n+        return boundary == offset;\n","filename":"src\/java.base\/share\/classes\/java\/text\/BreakIterator.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -295,0 +295,10 @@\n+        \/\/ Had to override to suppress the bug in the BreakIterator's default impl.\n+        \/\/ See the comments in the default impl.\n+        @Override\n+        public boolean isBoundary(int offset) {\n+            if (offset < boundaries.get(0) || offset > boundaries.get(boundaries.size() - 1)) {\n+                throw new IllegalArgumentException(\"offset is out of bounds: \" + offset);\n+            }\n+            return Collections.binarySearch(boundaries, offset) >= 0;\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/provider\/BreakIteratorProviderImpl.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,1 +125,1 @@\n-        \/\/ Call the default impelementation in BreakIterator\n+        \/\/ Call the default implementation in BreakIterator\n","filename":"test\/jdk\/java\/text\/BreakIterator\/MirroredBreakIterator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}