{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,5 +97,0 @@\n-        if (info.containsKey(\"CharacterData\")) {\n-            generateDataFile(info.getString(\"CharacterData\"),\n-                             rules.getString(\"CharacterBreakRules\"),\n-                             classNames[0]);\n-        }\n@@ -105,1 +100,1 @@\n-                             classNames[1]);\n+                             classNames[0]);\n@@ -110,1 +105,1 @@\n-                             classNames[2]);\n+                             classNames[1]);\n@@ -115,1 +110,1 @@\n-                             classNames[3]);\n+                             classNames[2]);\n","filename":"make\/jdk\/src\/classes\/build\/tools\/generatebreakiteratordata\/GenerateBreakIteratorData.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-        Objects.checkFromToIndex(0, limit - off, src.length());\n+        Objects.checkFromToIndex(off, limit, src.length());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/regex\/Grapheme.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,0 @@\n-                    \"RuleBasedBreakIterator\",  \/\/ character-break iterator class\n@@ -61,1 +60,0 @@\n-            {\"CharacterData\", \"CharacterBreakIteratorData\"},\n","filename":"src\/java.base\/share\/classes\/sun\/text\/resources\/BreakIteratorInfo.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,45 +71,0 @@\n-            { \"CharacterBreakRules\",\n-\n-              \/\/ ignore non-spacing marks and enclosing marks (since we never\n-              \/\/ put a break before ignore characters, this keeps combining\n-              \/\/ accents with the base characters they modify)\n-              \"<enclosing>=[:Mn::Me:];\"\n-\n-              \/\/ other category definitions\n-              + \"<choseong>=[\\u1100-\\u115f];\"\n-              + \"<jungseong>=[\\u1160-\\u11a7];\"\n-              + \"<jongseong>=[\\u11a8-\\u11ff];\"\n-              + \"<surr-hi>=[\\ud800-\\udbff];\"\n-              + \"<surr-lo>=[\\udc00-\\udfff];\"\n-\n-              \/\/ break after every character, except as follows:\n-              + \".;\"\n-\n-              \/\/ keep base and combining characters togethers\n-              + \"<base>=[^<enclosing>^[:Cc::Cf::Zl::Zp:]];\"\n-              + \"<base><enclosing><enclosing>*;\"\n-\n-              \/\/ keep CRLF sequences together\n-              + \"\\r\\n;\"\n-\n-              \/\/ keep surrogate pairs together\n-              + \"<surr-hi><surr-lo>;\"\n-\n-              \/\/ keep Hangul syllables spelled out using conjoining jamo together\n-              + \"<choseong>*<jungseong>*<jongseong>*;\"\n-\n-              \/\/ various additions for Hindi support\n-              + \"<nukta>=[\\u093c];\"\n-              + \"<danda>=[\\u0964\\u0965];\"\n-              + \"<virama>=[\\u094d];\"\n-              + \"<devVowelSign>=[\\u093e-\\u094c\\u0962\\u0963];\"\n-              + \"<devConsonant>=[\\u0915-\\u0939];\"\n-              + \"<devNuktaConsonant>=[\\u0958-\\u095f];\"\n-              + \"<devCharEnd>=[\\u0902\\u0903\\u0951-\\u0954];\"\n-              + \"<devCAMN>=(<devConsonant>{<nukta>});\"\n-              + \"<devConsonant1>=(<devNuktaConsonant>|<devCAMN>);\"\n-              + \"<zwj>=[\\u200d];\"\n-              + \"<devConjunct>=({<devConsonant1><virama>{<zwj>}}<devConsonant1>);\"\n-              + \"<devConjunct>{<devVowelSign>}{<devCharEnd>};\"\n-              + \"<danda><nukta>;\"\n-            },\n","filename":"src\/java.base\/share\/classes\/sun\/text\/resources\/BreakIteratorRules.java","additions":1,"deletions":46,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -53,3 +53,3 @@\n-    private static final int WORD_INDEX = 1;\n-    private static final int LINE_INDEX = 2;\n-    private static final int SENTENCE_INDEX = 3;\n+    private static final int WORD_INDEX = 0;\n+    private static final int LINE_INDEX = 1;\n+    private static final int SENTENCE_INDEX = 2;\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/provider\/BreakIteratorProviderImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,0 @@\n-                    \"RuleBasedBreakIterator\",  \/\/ character-break iterator class\n","filename":"src\/jdk.localedata\/share\/classes\/sun\/text\/resources\/ext\/BreakIteratorInfo_th.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-                    jresResult[i] = \"sun.text.\" + classNames[i];\n+                    jresResult[i] = \"sun.text.\" + classNames[i - 1];\n","filename":"test\/jdk\/java\/util\/PluggableLocale\/BreakIteratorProviderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}