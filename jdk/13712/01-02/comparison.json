{"files":[{"patch":"@@ -34,0 +34,1 @@\n+import javax.lang.model.element.ElementKind;\n@@ -55,1 +56,0 @@\n-import java.util.concurrent.atomic.AtomicReference;\n@@ -95,0 +95,4 @@\n+    ProgramDescriptor getProgramDescriptor() {\n+        return descriptor;\n+    }\n+\n@@ -108,1 +112,1 @@\n-     * @return the name of the first class found in the source file\n+     * @return the list of top-level types defined in the source file\n@@ -111,1 +115,1 @@\n-    String compileProgram() throws Fault {\n+    List<String> compileProgram() throws Fault {\n@@ -121,1 +125,1 @@\n-        var mainClassNameReference = new AtomicReference<String>();\n+        var names = new ArrayList<String>();\n@@ -125,1 +129,0 @@\n-                if (mainClassNameReference.get() != null) return;\n@@ -132,1 +135,7 @@\n-                var mainClassName = element.isUnnamed()\n+                ElementKind kind = element.getKind();\n+                if (kind != ElementKind.CLASS\n+                        && kind != ElementKind.ENUM\n+                        && kind != ElementKind.INTERFACE\n+                        && kind != ElementKind.RECORD)\n+                    return;\n+                var name = element.isUnnamed()\n@@ -135,1 +144,1 @@\n-                mainClassNameReference.compareAndSet(null, mainClassName);\n+                names.add(name);\n@@ -142,1 +151,1 @@\n-        if (mainClassNameReference.get() == null) {\n+        if (names.isEmpty()) {\n@@ -145,1 +154,1 @@\n-        return mainClassNameReference.get();\n+        return List.copyOf(names);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/MemoryContext.java","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.util.List;\n@@ -150,1 +151,1 @@\n-        String mainClassName = context.compileProgram();\n+        List<String> names = context.compileProgram();\n@@ -153,1 +154,1 @@\n-        var appClass = execute(mainClassName, mainArgs, context);\n+        var appClass = execute(names, mainArgs, context);\n@@ -184,1 +185,1 @@\n-     * Invokes the {@code main} method of a specified class, using a class loader that\n+     * Invokes the {@code main} method of a program class, using a class loader that\n@@ -187,1 +188,1 @@\n-     * @param mainClassName the class to be executed\n+     * @param topLevelClassNames the names of classes in the program compilation unit\n@@ -193,1 +194,1 @@\n-    private Class<?> execute(String mainClassName, String[] mainArgs, MemoryContext context)\n+    private Class<?> execute(List<String> topLevelClassNames, String[] mainArgs, MemoryContext context)\n@@ -198,1 +199,3 @@\n-        Class<?> appClass;\n+        \/\/ 1. Find a main method in the first class and if there is one - invoke it\n+        String mainClassName = topLevelClassNames.getFirst();\n+        Class<?> firstClass;\n@@ -200,1 +203,1 @@\n-            appClass = context.loadApplicationClass(parentLoader, mainClassName);\n+            firstClass = context.loadApplicationClass(parentLoader, mainClassName);\n@@ -205,1 +208,1 @@\n-        Method mainMethod;\n+        Method mainMethod = null;\n@@ -207,2 +210,1 @@\n-            mainMethod = MainMethodFinder.findMainMethod(appClass);\n-            \/\/ mainMethod = appClass.getMethod(\"main\", String[].class);\n+            mainMethod = MainMethodFinder.findMainMethod(firstClass);\n@@ -210,1 +212,28 @@\n-            throw new Fault(Errors.CantFindMainMethod(mainClassName));\n+            \/\/ 2. If the first class doesn't have a main method, look for a top-level public class\n+            var compilationUnitName = context.getProgramDescriptor().fileObject().getFile().getFileName().toString();\n+            assert compilationUnitName.endsWith(\".java\");\n+            var expectedPublicName = compilationUnitName.substring(0, compilationUnitName.length() - 5);\n+            for (var name : topLevelClassNames) {\n+                Class<?> nextClass;\n+                try {\n+                    nextClass = Class.forName(name, true, firstClass.getClassLoader());\n+                }  catch (ClassNotFoundException ignore) {\n+                    throw new Fault(Errors.CantFindClass(name));\n+                }\n+                if (Modifier.isPublic(nextClass.getModifiers())) {\n+                    \/\/ 3. If there's a top-level public class and doesn't match the name - fail\n+                    if (!nextClass.getName().equals(expectedPublicName)) {\n+                        throw new Fault(Errors.CantFindClass(expectedPublicName));\n+                    }\n+                    \/\/ 4. If the top-level public class has a main method - invoke it\n+                    try {\n+                        mainMethod = MainMethodFinder.findMainMethod(nextClass);\n+                        break;\n+                    } catch (NoSuchMethodException ignore) {\n+                        \/\/ continue with next class\n+                    }\n+                }\n+            }\n+            if (mainMethod == null) {\n+                throw new Fault(Errors.CantFindMainMethod(mainClassName));\n+            }\n@@ -231,1 +260,1 @@\n-                constructor = appClass.getDeclaredConstructor();\n+                constructor = firstClass.getDeclaredConstructor();\n@@ -248,1 +277,1 @@\n-            Object receiver = isStatic ? appClass : instance;\n+            Object receiver = isStatic ? firstClass : instance;\n@@ -266,1 +295,1 @@\n-        return appClass;\n+        return firstClass;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/SourceLauncher.java","additions":43,"deletions":14,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -252,5 +252,0 @@\n-                class Prog {\n-                  public static void main(String... args) {\n-                    Helper.run();\n-                  }\n-                }\n@@ -262,0 +257,5 @@\n+                public class Prog {\n+                  public static void main(String... args) {\n+                    Helper.run();\n+                  }\n+                }\n","filename":"test\/langtools\/tools\/javac\/launcher\/MultiFileSourceLauncherTests.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}