{"files":[{"patch":"@@ -1203,0 +1203,10 @@\n+        long U1 = rng.nextLong();\n+        \/\/ Experimentation on a variety of machines indicates that it is overall much faster\n+        \/\/ to do the following & and < operations on longs rather than first cast U1 to int\n+        \/\/ (but then we need to cast to int before doing the array indexing operation).\n+        long i = U1 & DoubleZigguratTables.exponentialLayerMask;\n+        if (i < DoubleZigguratTables.exponentialNumberOfLayers) {\n+            \/\/ This is the fast path (occurring more than 98% of the time).  Make an early exit.\n+            return DoubleZigguratTables.exponentialX[(int)i] * (U1 >>> 1);\n+        }\n+        \/\/ We didn't use the upper part of U1 after all.  We'll probably be able to use it later.\n@@ -1213,10 +1223,0 @@\n-        long U1 = rng.nextLong();\n-        \/\/ Experimentation on a variety of machines indicates that it is overall much faster\n-        \/\/ to do the following & and < operations on longs rather than first cast U1 to int\n-        \/\/ (but then we need to cast to int before doing the array indexing operation).\n-        long i = U1 & DoubleZigguratTables.exponentialLayerMask;\n-        if (i < DoubleZigguratTables.exponentialNumberOfLayers) {\n-            \/\/ This is the fast path (occurring more than 98% of the time).  Make an early exit.\n-            return DoubleZigguratTables.exponentialX[(int)i] * (U1 >>> 1);\n-        }\n-        \/\/ We didn't use the upper part of U1 after all.  We'll be able to use it later.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}