{"files":[{"patch":"@@ -1133,0 +1133,18 @@\n+     * @param rng an instance of {@code RandomGenerator}, used to generate uniformly\n+     *            pseudorandomly chosen {@code long} values\n+     *\n+     * @return a nonnegative {@code double} value chosen pseudorandomly\n+     *         from an exponential distribution whose mean is 1\n+     *\/\n+    public static double computeNextExponential(RandomGenerator rng) {\n+        return computeNextExponentialSoftCapped(rng, MAX_EXPONENTIAL);\n+    }\n+\n+    \/**\n+     * Generates a pseudorandom value {@code x} such that {@code Math.min(x, maxValue)}\n+     * follows the same distribution as it would if {@code x} was exponentially distributed\n+     * with mean 1, but with a worst-case number of calls to {@link\n+     * RandomGenerator#nextLong()} that's linear with {@code maxValue}. {@code maxValue} is\n+     * a \"soft\" cap in that a value larger than {@code maxValue} may be returned in order\n+     * to save a calculation.\n+     *\n@@ -1149,11 +1167,0 @@\n-    public static double computeNextExponential(RandomGenerator rng) {\n-        return computeNextExponentialSoftCapped(rng, MAX_EXPONENTIAL);\n-    }\n-\n-    \/**\n-     * Generates a pseudorandom value {@code x} such that {@code Math.min(x, maxValue)} follows the same distribution\n-     * as it would if {@code x} was exponentially distributed with mean 1, but with a worst-case number of calls to\n-     * {@link RandomGenerator#nextLong()} that's linear with {@code maxValue}.\n-     * @param rng the random generator whose nextLong method will be used\n-     * @param maxValue a soft limit on the value to return\n-     *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":18,"deletions":11,"binary":false,"changes":29,"status":"modified"}]}