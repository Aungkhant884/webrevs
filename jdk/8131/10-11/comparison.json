{"files":[{"patch":"@@ -1150,1 +1150,1 @@\n-        return computeWinsorizedNextExponential(rng, MAX_EXPONENTIAL);\n+        return computeNextExponentialSoftCapped(rng, MAX_EXPONENTIAL);\n@@ -1154,4 +1154,3 @@\n-     * Equivalent to {@code Math.min(computeNextExponential(rng), maxValue)} except\n-     * that the worst-case running time is linear with {@code maxValue} provided that\n-     * {@code rng.nextLong()} runs in constant time.\n-     * @param maxValue a non-negative limit on the value to return\n+     * Generates an exponentially-distributed value with a \"soft\" maximum value. When the exponential distribution would\n+     * produce a value larger than {@code maxValue}, returns either {@code maxValue} or that value.\n+     * @param maxValue a soft limit on the value to return\n@@ -1159,1 +1158,1 @@\n-    public static double computeWinsorizedNextExponential(RandomGenerator rng, double maxValue) {\n+    public static double computeNextExponentialSoftCapped(RandomGenerator rng, double maxValue) {\n@@ -1179,4 +1178,1 @@\n-        if (maxValue < 0.0) {\n-            throw new IllegalArgumentException(\"maxValue can't be negative\");\n-        }\n-        if (maxValue == 0.0) {\n+        if (maxValue <= 0.0) {\n@@ -1199,1 +1195,1 @@\n-            return Math.min(maxValue, DoubleZigguratTables.exponentialX[(int)i] * (U1 >>> 1));\n+            return DoubleZigguratTables.exponentialX[(int)i] * (U1 >>> 1);\n@@ -1233,1 +1229,1 @@\n-                        return Math.min(maxValue, Math.fma(extra, DoubleZigguratTables.exponentialX0, x));   \/\/ The chosen point is way below the curve; accept it.\n+                        return Math.fma(extra, DoubleZigguratTables.exponentialX0, x);   \/\/ The chosen point is way below the curve; accept it.\n@@ -1239,1 +1235,1 @@\n-                        return Math.min(maxValue, Math.fma(extra, DoubleZigguratTables.exponentialX0, x));   \/\/ The chosen point is below the curve; accept it.\n+                        return Math.fma(extra, DoubleZigguratTables.exponentialX0, x);   \/\/ The chosen point is below the curve; accept it.\n@@ -1245,1 +1241,1 @@\n-                \/\/ Can't keep track of any larger \"extra\"\n+                \/\/ We've reached the maximum, so don't waste any more time\n@@ -1255,2 +1251,1 @@\n-                return Math.min(maxValue,\n-                        Math.fma(extra, DoubleZigguratTables.exponentialX0, DoubleZigguratTables.exponentialX[(int)i] * (U1 >>> 1)));\n+                return Math.fma(extra, DoubleZigguratTables.exponentialX0, DoubleZigguratTables.exponentialX[(int)i] * (U1 >>> 1));\n@@ -1382,1 +1377,1 @@\n-            } while (computeWinsorizedNextExponential(rng, limit) < limit);\n+            } while (computeNextExponentialSoftCapped(rng, limit) < limit);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"}]}