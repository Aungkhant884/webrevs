{"files":[{"patch":"@@ -1124,0 +1124,5 @@\n+    \/**\n+     * Largest value that {@link #computeNextExponential} can ever return.\n+     *\/\n+    private static final double MAX_EXPONENTIAL = 0x1.0p63 * DoubleZigguratTables.exponentialX0;\n+\n@@ -1145,0 +1150,10 @@\n+        return computeWinsorizedNextExponential(rng, MAX_EXPONENTIAL);\n+    }\n+\n+    \/**\n+     * Equivalent to {@code Math.min(computeNextExponential(rng), maxValue)} except\n+     * that the worst-case running time is linear with {@code maxValue} provided that\n+     * {@code rng.nextLong()} runs in constant time.\n+     * @param maxValue a non-negative limit on the value to return\n+     *\/\n+    public static double computeWinsorizedNextExponential(RandomGenerator rng, double maxValue) {\n@@ -1164,0 +1179,13 @@\n+        if (maxValue < 0.0) {\n+            throw new IllegalArgumentException(\"maxValue can't be negative\");\n+        }\n+        if (maxValue == 0.0) {\n+            return 0.0;\n+        }\n+        final long maxExtraMinus1;\n+        if (maxValue >= MAX_EXPONENTIAL) {\n+            maxExtraMinus1 = Long.MAX_VALUE;\n+        } else {\n+            \/\/ Conversion to long rounds toward zero\n+            maxExtraMinus1 = (long) (maxValue \/ DoubleZigguratTables.exponentialX0);\n+        }\n@@ -1171,1 +1199,1 @@\n-            return DoubleZigguratTables.exponentialX[(int)i] * (U1 >>> 1);\n+            return Math.min(maxValue, DoubleZigguratTables.exponentialX[(int)i] * (U1 >>> 1));\n@@ -1174,2 +1202,1 @@\n-\n-        for (double extra = 0.0; ; ) {\n+        for (long extra = 0; ; ) {\n@@ -1206,1 +1233,1 @@\n-                        return x + extra;   \/\/ The chosen point is way below the curve; accept it.\n+                        return Math.min(maxValue, Math.fma(extra, DoubleZigguratTables.exponentialX0, x));   \/\/ The chosen point is way below the curve; accept it.\n@@ -1212,1 +1239,1 @@\n-                        return x + extra;   \/\/ The chosen point is below the curve; accept it.\n+                        return Math.min(maxValue, Math.fma(extra, DoubleZigguratTables.exponentialX0, x));   \/\/ The chosen point is below the curve; accept it.\n@@ -1217,0 +1244,4 @@\n+            if (extra == maxExtraMinus1) {\n+                \/\/ Can't keep track of any larger \"extra\"\n+                return maxValue;\n+            }\n@@ -1219,2 +1250,2 @@\n-            extra += DoubleZigguratTables.exponentialX0;\n-            \/\/ This is like the first five lines of this method, but if it returns, it first adds \"extra\".\n+            extra++;\n+            \/\/ This is like the first five lines of this method, but if it returns, it first adds \"extra\" times X0.\n@@ -1224,1 +1255,2 @@\n-                return DoubleZigguratTables.exponentialX[(int)i] * (U1 >>> 1) + extra;\n+                return Math.min(maxValue,\n+                        Math.fma(extra, DoubleZigguratTables.exponentialX0, DoubleZigguratTables.exponentialX[(int)i] * (U1 >>> 1)));\n@@ -1379,1 +1411,1 @@\n-                x = (X[j] * 0x1.0p63) + ((X[j-1] - X[j]) * (double)U1);\n+                x = Math.fma(X[j-1] - X[j], (double)U1, X[j] * 0x1.0p63));\n@@ -1389,1 +1421,1 @@\n-                double y = (Y[j] * 0x1.0p63) + ((Y[j-1] - Y[j]) * (double)U2);\n+                double y = Math.fma(Y[j-1] - Y[j], (double)U2), Y[j] * 0x1.0p63);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":42,"deletions":10,"binary":false,"changes":52,"status":"modified"}]}