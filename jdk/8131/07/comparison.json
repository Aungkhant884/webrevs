{"files":[{"patch":"@@ -1124,0 +1124,5 @@\n+    \/**\n+     * Largest value that {@link #computeNextExponential} can ever return.\n+     *\/\n+    private static final double MAX_EXPONENTIAL = 0x1.0p63 * DoubleZigguratTables.exponentialX0;\n+\n@@ -1145,0 +1150,10 @@\n+        return computeWinsorizedNextExponential(rng, MAX_EXPONENTIAL);\n+    }\n+\n+    \/**\n+     * Equivalent to {@code Math.min(computeNextExponential(rng), maxValue)} except\n+     * that the worst-case running time is linear with {@code maxValue} provided that\n+     * {@code rng.nextLong()} runs in constant time.\n+     * @param maxValue a non-negative limit on the value to return\n+     *\/\n+    public static double computeWinsorizedNextExponential(RandomGenerator rng, double maxValue) {\n@@ -1164,0 +1179,13 @@\n+        if (maxValue < 0.0) {\n+            throw new IllegalArgumentException(\"maxValue can't be negative\");\n+        }\n+        if (maxValue == 0.0) {\n+            return 0.0;\n+        }\n+        final long maxExtraMinus1;\n+        if (maxValue >= MAX_EXPONENTIAL) {\n+            maxExtraMinus1 = Long.MAX_VALUE;\n+        } else {\n+            \/\/ Conversion to long rounds toward zero\n+            maxExtraMinus1 = (long) (maxValue \/ DoubleZigguratTables.exponentialX0);\n+        }\n@@ -1171,1 +1199,1 @@\n-            return DoubleZigguratTables.exponentialX[(int)i] * (U1 >>> 1);\n+            return Math.min(maxValue, DoubleZigguratTables.exponentialX[(int)i] * (U1 >>> 1));\n@@ -1174,2 +1202,1 @@\n-\n-        for (double extra = 0.0; ; ) {\n+        for (long extra = 0; ; ) {\n@@ -1206,1 +1233,1 @@\n-                        return x + extra;   \/\/ The chosen point is way below the curve; accept it.\n+                        return Math.min(maxValue, Math.fma(extra, DoubleZigguratTables.exponentialX0, x));   \/\/ The chosen point is way below the curve; accept it.\n@@ -1212,1 +1239,1 @@\n-                        return x + extra;   \/\/ The chosen point is below the curve; accept it.\n+                        return Math.min(maxValue, Math.fma(extra, DoubleZigguratTables.exponentialX0, x));   \/\/ The chosen point is below the curve; accept it.\n@@ -1217,0 +1244,4 @@\n+            if (extra == maxExtraMinus1) {\n+                \/\/ Can't keep track of any larger \"extra\"\n+                return maxValue;\n+            }\n@@ -1219,2 +1250,2 @@\n-            extra += DoubleZigguratTables.exponentialX0;\n-            \/\/ This is like the first five lines of this method, but if it returns, it first adds \"extra\".\n+            extra++;\n+            \/\/ This is like the first five lines of this method, but if it returns, it first adds \"extra\" times X0.\n@@ -1224,1 +1255,2 @@\n-                return DoubleZigguratTables.exponentialX[(int)i] * (U1 >>> 1) + extra;\n+                return Math.min(maxValue,\n+                        Math.fma(extra, DoubleZigguratTables.exponentialX0, DoubleZigguratTables.exponentialX[(int)i] * (U1 >>> 1)));\n@@ -1346,0 +1378,1 @@\n+            double limit;\n@@ -1348,1 +1381,2 @@\n-            } while (computeNextExponential(rng) < 0.5*x*x);\n+                limit = 0.5*x*x;\n+            } while (computeWinsorizedNextExponential(rng, limit) < limit);\n@@ -1379,1 +1413,1 @@\n-                x = (X[j] * 0x1.0p63) + ((X[j-1] - X[j]) * (double)U1);\n+                x = Math.fma(X[j-1] - X[j], (double)U1, X[j] * 0x1.0p63);\n@@ -1389,1 +1423,1 @@\n-                double y = (Y[j] * 0x1.0p63) + ((Y[j-1] - Y[j]) * (double)U2);\n+                double y = Math.fma(Y[j-1] - Y[j], (double)U2, Y[j] * 0x1.0p63);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":45,"deletions":11,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.util.random;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Param;\n+import java.util.random.RandomGenerator;\n+import java.util.random.RandomGeneratorFactory;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Tests java.util.random.RandomGenerator's implementations of nextExponential and nextGaussian\n+ *\/\n+@BenchmarkMode({Mode.SampleTime, Mode.Throughput})\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class RandomGeneratorExponentialGaussian {\n+\n+    ThreadLocal<RandomGenerator> randomGeneratorThreadLocal;\n+\n+    @Param({\"L64X128MixRandom\", \"L64X1024MixRandom\"})\n+    String randomGeneratorName;\n+\n+    double[] buffer;\n+\n+    @Param(\"1024\")\n+    int size;\n+\n+    @Setup\n+    public void setup() {\n+        buffer = new double[size];\n+        randomGeneratorThreadLocal = ThreadLocal.withInitial(() ->\n+            RandomGeneratorFactory.of(randomGeneratorName).create(ThreadLocalRandom.current().nextLong()));\n+    }\n+\n+    @Benchmark\n+    public double testNextGaussian() {\n+        return randomGeneratorThreadLocal.get().nextGaussian();\n+    }\n+\n+    @Benchmark\n+    public double[] testFillBufferWithNextGaussian() {\n+        RandomGenerator randomGenerator = randomGeneratorThreadLocal.get();\n+        for (int i = 0; i < size; i++) buffer[i] = randomGenerator.nextGaussian();\n+        return buffer;\n+    }\n+\n+    @Benchmark\n+    public double testNextExponential() {\n+        return randomGeneratorThreadLocal.get().nextExponential();\n+    }\n+\n+    @Benchmark\n+    public double[] testFillBufferWithNextExponential() {\n+        RandomGenerator randomGenerator = randomGeneratorThreadLocal.get();\n+        for (int i = 0; i < size; i++) buffer[i] = randomGenerator.nextExponential();\n+        return buffer;\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/random\/RandomGeneratorExponentialGaussian.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.bench.java.util;\n+package org.openjdk.bench.java.util.random;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/random\/RandomGeneratorNext.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/RandomGeneratorNext.java","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.bench.java.util;\n+package org.openjdk.bench.java.util.random;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/random\/RandomNext.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/RandomNext.java","status":"renamed"}]}