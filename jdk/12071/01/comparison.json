{"files":[{"patch":"@@ -563,0 +563,36 @@\n+\n+  check_virtualizations();\n+}\n+\n+void VM_Version::check_virtualizations() {\n+#if defined(LINUX)\n+  const char* info_file = \"\/sys\/devices\/virtual\/dmi\/id\/product_name\";\n+  \/\/ check for various strings in the dmi data indicating virtualizations\n+  char line[500];\n+  FILE* fp = os::fopen(info_file, \"r\");\n+  if (fp == nullptr) {\n+    return;\n+  }\n+  while (fgets(line, sizeof(line), fp) != nullptr) {\n+    if (strcasestr(line, \"KVM\") != 0) {\n+      Abstract_VM_Version::_detected_virtualization = KVM;\n+      break;\n+    }\n+    if (strcasestr(line, \"VMware\") != 0) {\n+      Abstract_VM_Version::_detected_virtualization = VMWare;\n+      break;\n+    }\n+  }\n+  fclose(fp);\n+#endif\n+}\n+\n+void VM_Version::print_platform_virtualization_info(outputStream* st) {\n+#if defined(LINUX)\n+    VirtualizationType vrt = VM_Version::get_detected_virtualization();\n+    if (vrt == KVM) {\n+      st->print_cr(\"KVM virtualization detected\");\n+    } else if (vrt == VMWare) {\n+      st->print_cr(\"VMWare virtualization detected\");\n+    }\n+#endif\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -66,0 +66,3 @@\n+  static void check_virtualizations();\n+\n+  static void print_platform_virtualization_info(outputStream*);\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}