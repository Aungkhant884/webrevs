{"files":[{"patch":"@@ -157,1 +157,0 @@\n-vmTestbase\/vm\/mlvm\/anonloader\/stress\/oome\/metaspace\/Test.java 8267404 linux-aarch64\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @modules java.base\/jdk.internal.misc\n@@ -32,2 +31,1 @@\n- * @library \/vmTestbase\n- *          \/test\/lib\n+ * @library \/test\/lib\n@@ -35,5 +33,1 @@\n- * @comment build test class and indify classes\n- * @build vm.mlvm.anonloader.stress.oome.metaspace.Test\n- * @run driver vm.mlvm.share.IndifiedClassesBuilder\n- *\n- * @run main\/othervm -Xmx256m -XX:-UseGCOverheadLimit -XX:MaxMetaspaceSize=8m vm.mlvm.anonloader.stress.oome.metaspace.Test\n+ * @run driver vm.mlvm.anonloader.stress.oome.metaspace.Test\n@@ -44,4 +38,2 @@\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodHandles.Lookup;\n-import java.util.List;\n-import java.io.IOException;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -49,5 +41,1 @@\n-import vm.mlvm.anonloader.share.AnonkTestee01;\n-import vm.mlvm.share.MlvmOOMTest;\n-import vm.mlvm.share.MlvmTestExecutor;\n-import vm.mlvm.share.Env;\n-import vm.share.FileUtils;\n+public class Test {\n@@ -55,11 +43,10 @@\n-\/**\n- * This test loads classes using defineHiddenClass and stores them,\n- * expecting Metaspace OOME.\n- *\n- *\/\n-public class Test extends MlvmOOMTest {\n-    @Override\n-    protected void checkOOME(OutOfMemoryError oome) {\n-        String message = oome.getMessage();\n-        if (!\"Metaspace\".equals(message) && !\"Compressed class space\".equals(message)) {\n-            throw new RuntimeException(\"TEST FAIL : wrong OOME\", oome);\n+    public static void main(String[] args) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+            \"-Xshare:off\", \"-XX:MaxMetaspaceSize=512k\", \"-version\");\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+\n+        analyzer.shouldNotHaveExitValue(0);\n+\n+        if (!analyzer.getStdout().contains(\"OutOfMemoryError\")) {\n+            throw new RuntimeException(\"TEST FAIL : no OOME\");\n@@ -67,1 +54,0 @@\n-    }\n@@ -69,7 +55,3 @@\n-    @Override\n-    protected void eatMemory(List<Object> list) {\n-        byte[] classBytes = null;\n-        try {\n-            classBytes = FileUtils.readClass(AnonkTestee01.class.getName());\n-        } catch (IOException e) {\n-            Env.throwAsUncheckedException(e);\n+        if (!analyzer.getStdout().contains(\"Metaspace\") &&\n+            !analyzer.getStdout().contains(\"Compressed class space\")) {\n+            throw new RuntimeException(\"TEST FAIL : wrong OOME\");\n@@ -77,10 +59,0 @@\n-        try {\n-            while (true) {\n-                Lookup lookup = MethodHandles.lookup();\n-                Lookup ank_lookup = MethodHandles.privateLookupIn(AnonkTestee01.class, lookup);\n-                Class<?> c = ank_lookup.defineHiddenClass(classBytes, true).lookupClass();\n-                list.add(c.newInstance());\n-             }\n-         } catch (InstantiationException | IllegalAccessException e) {\n-             Env.throwAsUncheckedException(e);\n-         }\n@@ -89,3 +61,0 @@\n-    public static void main(String[] args) {\n-        MlvmTestExecutor.launch(args);\n-    }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/oome\/metaspace\/Test.java","additions":18,"deletions":49,"binary":false,"changes":67,"status":"modified"}]}