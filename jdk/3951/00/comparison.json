{"files":[{"patch":"@@ -1365,0 +1365,1 @@\n+  assert(_jvms == NULL || ((uintptr_t)_jvms->map() & 1) || _jvms->map() == this, \"inconsistent JVMState\");\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -355,0 +355,12 @@\n+  virtual bool needs_clone_jvms(Compile* C) { return false; }\n+  void clone_jvms(Compile* C) {\n+    if (jvms() != NULL) {\n+      if (needs_clone_jvms(C)) {\n+        set_jvms(jvms()->clone_deep(C));\n+        jvms()->set_map_deep(this);\n+      } else {\n+        jvms()->clone_shallow(C)->bind_map(this);\n+      }\n+    }\n+  }\n+\n@@ -620,6 +632,0 @@\n-  void clone_jvms(Compile* C) {\n-    if ((jvms() != NULL) && needs_clone_jvms(C)) {\n-      set_jvms(jvms()->clone_deep(C));\n-      jvms()->set_map_deep(this);\n-    }\n-  }\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -561,2 +561,0 @@\n-    \/\/ cloning CallNode may need to clone JVMState\n-    n->as_Call()->clone_jvms(C);\n@@ -575,0 +573,3 @@\n+    \/\/ Scalar replacement and macro expansion might modify the JVMState.\n+    \/\/ Clone it to make sure it's not shared between SafePointNodes.\n+    n->as_SafePoint()->clone_jvms(C);\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}