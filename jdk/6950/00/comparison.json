{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -796,1 +796,1 @@\n-            toolEnv.notice(\"main.Loading_source_files_for_package\", modpkg.toString());\n+            toolEnv.printInfo(\"main.Loading_source_files_for_package\", modpkg.toString());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/ElementsTable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -295,6 +295,0 @@\n-    private int getSourcePos(DocTreePath path, int offset) {\n-        DCTree.DCDocComment docComment = (DCTree.DCDocComment) path.getDocComment();\n-        DCTree tree = (DCTree) path.getLeaf();\n-        return docComment.getSourcePosition(tree.getStartPosition() + offset);\n-    }\n-\n@@ -453,1 +447,1 @@\n-     * Prints a \"notice\" message to the standard writer.\n+     * Prints a \"notice\" message.\n@@ -455,2 +449,1 @@\n-     * @param key  the resource key for the message\n-     * @param args the arguments for the message\n+     * @param message the message\n@@ -458,2 +451,7 @@\n-    public void noticeUsingKey(String key, Object... args) {\n-        printRawLines(getStandardWriter(), getText(key, args));\n+    public void printNote(String message) {\n+        \/\/ Ideally, for consistency with errors and warnings, we would use the following:\n+        \/\/      report(Kind.NOTE, null, null, message);\n+        \/\/ but the default formatting in Log for Kind.NOTE is to prefix the line with \"Note:\"\n+        \/\/ which is undesirable and inconsistent with existing javadoc output.\n+        \/\/ For now, to avoid the prefix, we write directly to the underlying stream.\n+        printRawLines(WriterKind.NOTICE, message);\n@@ -463,1 +461,1 @@\n-     * Prints a \"notice\" message to the standard writer.\n+     * Prints a \"notice\" message.\n@@ -465,1 +463,2 @@\n-     * @param message the message\n+     * @param key the resource key for the message\n+     * @param args the arguments for the message\n@@ -467,2 +466,2 @@\n-    public void notice(String message) {\n-        printRawLines(getStandardWriter(), message);\n+    public void printNoteUsingKey(String key, Object... args) {\n+        printNote(getText(key, args));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/JavadocLog.java","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -210,1 +210,1 @@\n-            toolEnv.notice(\"main.Building_tree\");\n+            toolEnv.printInfo(\"main.Building_tree\");\n@@ -287,1 +287,1 @@\n-                    toolEnv.notice(\"main.Loading_source_file\", fo.getName());\n+                    toolEnv.printInfo(\"main.Loading_source_file\", fo.getName());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/JavadocTool.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -199,1 +199,1 @@\n-        log.noticeUsingKey(headerKey);\n+        showLinesUsingKey(headerKey);\n@@ -208,2 +208,3 @@\n-        if (footerKey != null)\n-            log.noticeUsingKey(footerKey);\n+        if (footerKey != null) {\n+            showLinesUsingKey(footerKey);\n+        }\n@@ -213,1 +214,1 @@\n-        log.noticeUsingKey(labelKey, log.programName, value);\n+        showLinesUsingKey(labelKey, log.programName, value);\n@@ -256,1 +257,1 @@\n-        log.noticeUsingKey(\"main.doclet.usage.header\", name);\n+        showLinesUsingKey(\"main.doclet.usage.header\", name);\n@@ -311,1 +312,1 @@\n-            log.notice(String.format(COMPACT_FORMAT, synopses, description));\n+            showLines(String.format(COMPACT_FORMAT, synopses, description));\n@@ -318,1 +319,1 @@\n-            log.notice(SMALL_INDENT + synopses);\n+            showLines(SMALL_INDENT + synopses);\n@@ -321,1 +322,1 @@\n-                log.notice(SMALL_INDENT + name + parameters);\n+                showLines(SMALL_INDENT + name + parameters);\n@@ -326,1 +327,9 @@\n-        log.notice(LARGE_INDENT + description.replace(\"\\n\", \"\\n\" + LARGE_INDENT));\n+        showLines(LARGE_INDENT + description.replace(\"\\n\", \"\\n\" + LARGE_INDENT));\n+    }\n+\n+    private void showLinesUsingKey(String key, Object... args) {\n+        showLines(log.getText(key, args));\n+    }\n+\n+    private void showLines(String message) {\n+        log.printRawLines(Log.WriterKind.STDOUT, message);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/Start.java","additions":19,"deletions":10,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -194,1 +194,1 @@\n-     * Print a notice, iff <em>quiet<\/em> is not specified.\n+     * Prints a notice unless {@code -quiet} was specified.\n@@ -198,3 +198,3 @@\n-    public void notice(String key) {\n-        if (quiet) {\n-            return;\n+    public void printInfo(String key, Object... args) {\n+        if (!quiet) {\n+            log.printNoteUsingKey(key, args);\n@@ -202,14 +202,0 @@\n-        JavadocLog.printRawLines(log.getDiagnosticWriter(), log.getText(key));\n-    }\n-\n-    \/**\n-     * Print a notice, iff <em>quiet<\/em> is not specified.\n-     *\n-     * @param key selects message from resource\n-     * @param a1 first argument\n-     *\/\n-    public void notice(String key, String a1) {\n-        if (quiet) {\n-            return;\n-        }\n-        JavadocLog.printRawLines(log.getDiagnosticWriter(), log.getText(key, a1));\n@@ -250,4 +236,0 @@\n-\n-    public boolean isQuiet() {\n-        return quiet;\n-    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/ToolEnvironment.java","additions":5,"deletions":23,"binary":false,"changes":28,"status":"modified"}]}