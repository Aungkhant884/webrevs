{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,1 +87,1 @@\n-                \"LingeredApp.main\"));\n+                \"LingeredApp.steadyState\"));\n@@ -108,2 +108,2 @@\n-                \"Java Stack Trace for main\",\n-                \"public static void main\"));\n+                \"Java Stack Trace for SteadyStateThread\",\n+                \"private static void steadyState\"));\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbCDSJstackPrintAll.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,2 +46,2 @@\n-            if (!output.contains(\"LingeredApp.main\")) {\n-                throw new RuntimeException(\"'LingeredApp.main' missing from stdout\/stderr\");\n+            if (!output.contains(\"LingeredApp.steadyState\")) {\n+                throw new RuntimeException(\"'LingeredApp.steadyState' missing from stdout\/stderr\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbDumpheap.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-            theApp = new LingeredAppWithTrivialMain();\n+            theApp = new LingeredApp();\n@@ -137,1 +137,1 @@\n-            \/\/   - LingeredAppWithTrivialMain.main(java.lang.String[]) @bci=1, line=33, pc=0x00007ff18ff519f0, ...\n+            \/\/   - LingeredApp.steadyState(java.lang.Object) @bci=1, line=33, pc=0x00007ff18ff519f0, ...\n@@ -139,1 +139,1 @@\n-            String[] parts = jStackOutput.split(\"LingeredAppWithTrivialMain.main\");\n+            String[] parts = jStackOutput.split(\"LingeredApp.steadyState\");\n@@ -150,1 +150,1 @@\n-                throw new RuntimeException(\"Cannot find LingeredAppWithTrivialMain.main pc in output\");\n+                throw new RuntimeException(\"Cannot find LingeredApp.steadyState pc in output\");\n@@ -160,1 +160,1 @@\n-                            \"In code in NMethod for LingeredAppWithTrivialMain.main\",\n+                            \"In code in NMethod for jdk\/test\/lib\/apps\/LingeredApp.steadyState\",\n@@ -171,1 +171,1 @@\n-            \/\/ - LingeredAppWithTrivialMain.main(java.lang.String[]) @bci=1, line=33, pc=..., Method*=0x0000008041000208 ...\n+            \/\/ - LingeredApp.steadyState(java.lang.Object) @bci=1, line=33, pc=..., Method*=0x0000008041000208 ...\n@@ -173,1 +173,1 @@\n-            parts = jStackOutput.split(\"LingeredAppWithTrivialMain.main\");\n+            parts = jStackOutput.split(\"LingeredApp.steadyState\");\n@@ -181,1 +181,1 @@\n-                                          \"LingeredAppWithTrivialMain.main\",\n+                                          \"LingeredApp.steadyState\",\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbFindPC.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-            String[] parts = output.split(\"LingeredApp.main\");\n+            String[] parts = output.split(\"LingeredApp.steadyState\");\n@@ -75,1 +75,1 @@\n-                    \"public static void main\\\\(java\\\\.lang\\\\.String\\\\[\\\\]\\\\)\",\n+                    \"private static void steadyState\\\\(java\\\\.lang\\\\.Object\\\\)\",\n@@ -96,1 +96,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbJdis.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                    \"LingeredApp.main\"));\n+                    \"LingeredApp.steadyState\"));\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbJstack.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-            \/\/ representing LingeredApp.main\n+            \/\/ representing LingeredApp.steadyState\n@@ -58,1 +58,1 @@\n-            String[] snippets = jstackOutput.split(\"LingeredApp.main\");\n+            String[] snippets = jstackOutput.split(\"LingeredApp.steadyState\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbPrintAs.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-                    \"LingeredApp.main\",\n+                    \"LingeredApp.steadyState\",\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbSource.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,2 +62,2 @@\n-                    \"Java Stack Trace for main\",\n-                    \"public static void main\"));\n+                    \"Java Stack Trace for SteadyStateThread\",\n+                    \"private static void steadyState\"));\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbWhere.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import jdk.test.lib.apps.LingeredApp;\n-\n-\/**\n- * This is a wrapper around LingeredApp.main to ensure we reliably get a\n- * compiled main nmethod in the stack trace on all platforms when using\n- * -Xcomp.\n- *\/\n-public class LingeredAppWithTrivialMain extends LingeredApp {\n-    public static void main(String args[]) {\n-        LingeredApp.main(args);\n-    }\n- }\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/LingeredAppWithTrivialMain.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,2 +103,2 @@\n-            if (!output.contains(\"LingeredAppWithExtendedChars.main\")) {\n-                throw new RuntimeException(\"'LingeredAppWithExtendedChars.main' missing from stdout\/stderr\");\n+            if (!output.contains(\"LingeredApp.steadyState\")) {\n+                throw new RuntimeException(\"'LingeredApp.steadyState' missing from stdout\/stderr\");\n","filename":"test\/jdk\/sun\/tools\/jhsdb\/HeapDumpTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -498,0 +498,37 @@\n+    \/**\n+     * Support for creating a thread whose stack trace is always readable. There are\n+     * occassional isues trying to get the stack trace for LingeredApp.main() since\n+     * it sometimes wakes up from sleep and may breifly have an unreadable thread\n+     * stack trace. The code below is used to create \"SteadyStateThread\" whose\n+     * stack trace is always readable.\n+     *\/\n+\n+    private static volatile boolean steadyStateReached = false;\n+\n+    private static void steadyState(Object steadyStateObj) {\n+        steadyStateReached = true;\n+        synchronized(steadyStateObj) {\n+        }\n+    }\n+\n+    private static void startSteadyStateThread(Object steadyStateObj) {\n+        Thread steadyStateThread = new Thread() {\n+            public void run() {\n+                steadyState(steadyStateObj);\n+            }\n+        };\n+        steadyStateThread.setName(\"SteadyStateThread\");\n+        steadyStateThread.start();\n+\n+        \/\/ Wait until the thread has started running.\n+        while (!steadyStateReached) {\n+            Thread.onSpinWait();\n+        }\n+\n+        \/\/ Now wait until we get into the synchronized block.\n+        while (steadyStateThread.getState() != Thread.State.BLOCKED) {\n+            Thread.onSpinWait();\n+        }\n+    }\n+\n+\n@@ -526,8 +563,12 @@\n-            if (forceCrash) {\n-                System.loadLibrary(\"LingeredApp\"); \/\/ location of native crash() method\n-                crash();\n-            }\n-            while (Files.exists(path)) {\n-                \/\/ Touch the lock to indicate our readiness\n-                setLastModified(theLockFileName, epoch());\n-                Thread.sleep(spinDelay);\n+            Object steadyStateObj = new Object();\n+            synchronized(steadyStateObj) {\n+                startSteadyStateThread(steadyStateObj);\n+                if (forceCrash) {\n+                    System.loadLibrary(\"LingeredApp\"); \/\/ location of native crash() method\n+                    crash();\n+                }\n+                while (Files.exists(path)) {\n+                    \/\/ Touch the lock to indicate our readiness\n+                    setLastModified(theLockFileName, epoch());\n+                    Thread.sleep(spinDelay);\n+                }\n","filename":"test\/lib\/jdk\/test\/lib\/apps\/LingeredApp.java","additions":50,"deletions":9,"binary":false,"changes":59,"status":"modified"}]}