{"files":[{"patch":"@@ -28,1 +28,1 @@\n-#include \"memory\/resourceArea.hpp\"\n+#include \"oops\/constantPool.hpp\"\n@@ -31,1 +31,1 @@\n-#include \"oops\/oop.inline.hpp\"\n+#include \"oops\/symbol.hpp\"\n@@ -33,2 +33,4 @@\n-#include \"runtime\/safepoint.hpp\"\n-#include \"utilities\/hashtable.inline.hpp\"\n+#include \"runtime\/mutexLocker.hpp\"\n+#include \"utilities\/resourceHash.hpp\"\n+\n+ResourceHashtable<uintptr_t, ResolutionErrorEntry*, 107, ResourceObj::C_HEAP, mtClass> _resolution_error_table;\n@@ -37,2 +39,1 @@\n-void ResolutionErrorTable::add_entry(int index, unsigned int hash,\n-                                     const constantPoolHandle& pool, int cp_index,\n+void ResolutionErrorTable::add_entry(const constantPoolHandle& pool, int cp_index,\n@@ -45,9 +46,2 @@\n-  ResolutionErrorEntry* entry = (ResolutionErrorEntry*)Hashtable<ConstantPool*, mtClass>::new_entry(hash, pool());\n-  entry->set_cp_index(cp_index);\n-  entry->set_error(error);\n-  entry->set_message(message);\n-  entry->set_nest_host_error(NULL);\n-  entry->set_cause(cause);\n-  entry->set_cause_msg(cause_msg);\n-\n-  add_entry(index, entry);\n+  ResolutionErrorEntry* entry = new ResolutionErrorEntry(pool(), cp_index, error, message, cause, cause_msg);\n+  _resolution_error_table.put(convert_key(pool, cp_index), entry);\n@@ -57,2 +51,1 @@\n-void ResolutionErrorTable::add_entry(int index, unsigned int hash,\n-                                     const constantPoolHandle& pool, int cp_index,\n+void ResolutionErrorTable::add_entry(const constantPoolHandle& pool, int cp_index,\n@@ -64,9 +57,2 @@\n-  ResolutionErrorEntry* entry = (ResolutionErrorEntry*)Hashtable<ConstantPool*, mtClass>::new_entry(hash, pool());\n-  entry->set_cp_index(cp_index);\n-  entry->set_nest_host_error(message);\n-  entry->set_error(NULL);\n-  entry->set_message(NULL);\n-  entry->set_cause(NULL);\n-  entry->set_cause_msg(NULL);\n-\n-  add_entry(index, entry);\n+  ResolutionErrorEntry* entry = new ResolutionErrorEntry(pool(), cp_index, message);\n+  _resolution_error_table.put(convert_key(pool, cp_index), entry);\n@@ -76,3 +62,1 @@\n-ResolutionErrorEntry* ResolutionErrorTable::find_entry(int index, unsigned int hash,\n-                                                       const constantPoolHandle& pool, int cp_index)\n-{\n+ResolutionErrorEntry* ResolutionErrorTable::find_entry(const constantPoolHandle& pool, int cp_index) {\n@@ -80,7 +64,5 @@\n-\n-  for (ResolutionErrorEntry *error_probe = bucket(index);\n-                         error_probe != NULL;\n-                         error_probe = error_probe->next()) {\n-  if (error_probe->hash() == hash && error_probe->pool() == pool()) {\n-      return error_probe;;\n-    }\n+  ResolutionErrorEntry** entry = _resolution_error_table.get(convert_key(pool, cp_index));\n+  if (entry != nullptr) {\n+    return *entry;\n+  } else {\n+    return nullptr;\n@@ -88,1 +70,1 @@\n-  return NULL;\n+\n@@ -91,3 +73,11 @@\n-void ResolutionErrorEntry::set_error(Symbol* e) {\n-  _error = e;\n-  if (_error != NULL) {\n+ResolutionErrorEntry::ResolutionErrorEntry(ConstantPool* pool, int cp_index, Symbol* error, Symbol* message,\n+      Symbol* cause, Symbol* cause_msg):\n+        _cp_index(cp_index),\n+        _error(error),\n+        _message(message),\n+        _cause(cause),\n+        _cause_msg(cause_msg),\n+        _pool(pool),\n+        _nest_host_error(nullptr) {\n+\n+  if (_error != nullptr) {\n@@ -96,1 +86,0 @@\n-}\n@@ -98,3 +87,1 @@\n-void ResolutionErrorEntry::set_message(Symbol* c) {\n-  _message = c;\n-  if (_message != NULL) {\n+  if (_message != nullptr) {\n@@ -103,1 +90,0 @@\n-}\n@@ -105,3 +91,1 @@\n-void ResolutionErrorEntry::set_cause(Symbol* c) {\n-  _cause = c;\n-  if (_cause != NULL) {\n+  if (_cause != nullptr) {\n@@ -110,1 +94,0 @@\n-}\n@@ -112,3 +95,1 @@\n-void ResolutionErrorEntry::set_cause_msg(Symbol* c) {\n-  _cause_msg = c;\n-  if (_cause_msg != NULL) {\n+  if (_cause_msg != nullptr) {\n@@ -119,5 +100,1 @@\n-void ResolutionErrorEntry::set_nest_host_error(const char* message) {\n-  _nest_host_error = message;\n-}\n-\n-void ResolutionErrorTable::free_entry(ResolutionErrorEntry *entry) {\n+ResolutionErrorEntry::~ResolutionErrorEntry() {\n@@ -125,2 +102,2 @@\n-  if (entry->error() != NULL) {\n-    entry->error()->decrement_refcount();\n+  if (error() != NULL) {\n+    error()->decrement_refcount();\n@@ -128,2 +105,2 @@\n-  if (entry->message() != NULL) {\n-    entry->message()->decrement_refcount();\n+  if (message() != NULL) {\n+    message()->decrement_refcount();\n@@ -131,2 +108,2 @@\n-  if (entry->cause() != NULL) {\n-    entry->cause()->decrement_refcount();\n+  if (cause() != NULL) {\n+    cause()->decrement_refcount();\n@@ -134,2 +111,2 @@\n-  if (entry->cause_msg() != NULL) {\n-    entry->cause_msg()->decrement_refcount();\n+  if (cause_msg() != NULL) {\n+    cause_msg()->decrement_refcount();\n@@ -137,2 +114,2 @@\n-  if (entry->nest_host_error() != NULL) {\n-    FREE_C_HEAP_ARRAY(char, entry->nest_host_error());\n+  if (nest_host_error() != NULL) {\n+    FREE_C_HEAP_ARRAY(char, nest_host_error());\n@@ -140,1 +117,0 @@\n-  BasicHashtable<mtClass>::free_entry(entry);\n@@ -143,0 +119,3 @@\n+class ResolutionErrorDeleteIterate : StackObj {\n+private:\n+  ConstantPool* p;\n@@ -144,4 +123,3 @@\n-\/\/ create resolution error table\n-ResolutionErrorTable::ResolutionErrorTable(int table_size)\n-    : Hashtable<ConstantPool*, mtClass>(table_size, sizeof(ResolutionErrorEntry)) {\n-}\n+public:\n+  ResolutionErrorDeleteIterate(ConstantPool* pool):\n+    p(pool) {};\n@@ -149,2 +127,6 @@\n-\/\/ RedefineClasses support - remove matching entry of a\n-\/\/ constant pool that is going away\n+  bool do_entry(uintptr_t key, ResolutionErrorEntry* value){\n+    return (value -> pool() == p);\n+  }\n+};\n+\n+\/\/ Delete entries in the table that match with ConstantPool c\n@@ -153,12 +135,3 @@\n-  for (int i = 0; i < table_size(); i++) {\n-    for (ResolutionErrorEntry** p = bucket_addr(i); *p != NULL; ) {\n-      ResolutionErrorEntry* entry = *p;\n-      assert(entry->pool() != NULL, \"resolution error table is corrupt\");\n-      if (entry->pool() == c) {\n-        *p = entry->next();\n-        free_entry(entry);\n-      } else {\n-        p = entry->next_addr();\n-      }\n-    }\n-  }\n+\n+  ResolutionErrorDeleteIterate deleteIterator(c);\n+  _resolution_error_table.unlink(&deleteIterator);\n@@ -167,0 +140,7 @@\n+class ResolutionIteratePurgeErrors : StackObj {\n+public:\n+  bool do_entry(uintptr_t key, ResolutionErrorEntry* value) {\n+    ConstantPool* pool = value -> pool();\n+    return !(pool->pool_holder()->is_loader_alive());\n+  }\n+};\n@@ -171,15 +151,3 @@\n-  for (int i = 0; i < table_size(); i++) {\n-    for (ResolutionErrorEntry** p = bucket_addr(i); *p != NULL; ) {\n-      ResolutionErrorEntry* entry = *p;\n-      assert(entry->pool() != (ConstantPool*)NULL, \"resolution error table is corrupt\");\n-      ConstantPool* pool = entry->pool();\n-      assert(pool->pool_holder() != NULL, \"Constant pool without a class?\");\n-\n-      if (pool->pool_holder()->is_loader_alive()) {\n-        p = entry->next_addr();\n-      } else {\n-        *p = entry->next();\n-        free_entry(entry);\n-      }\n-    }\n-  }\n+\n+  ResolutionIteratePurgeErrors purgeErrorsIterator;\n+  _resolution_error_table.unlink(&purgeErrorsIterator);\n@@ -187,0 +155,1 @@\n+\n","filename":"src\/hotspot\/share\/classfile\/resolutionErrors.cpp","additions":70,"deletions":101,"binary":false,"changes":171,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"utilities\/hashtable.hpp\"\n@@ -42,4 +41,1 @@\n-class ResolutionErrorTable : public Hashtable<ConstantPool*, mtClass> {\n-\n-private:\n-  void free_entry(ResolutionErrorEntry *entry);\n+class ResolutionErrorTable : AllStatic {\n@@ -48,14 +44,0 @@\n-  ResolutionErrorTable(int table_size);\n-\n-  ResolutionErrorEntry* bucket(int i) {\n-    return (ResolutionErrorEntry*)Hashtable<ConstantPool*, mtClass>::bucket(i);\n-  }\n-\n-  ResolutionErrorEntry** bucket_addr(int i) {\n-    return (ResolutionErrorEntry**)Hashtable<ConstantPool*, mtClass>::bucket_addr(i);\n-  }\n-\n-  void add_entry(int index, ResolutionErrorEntry* new_entry) {\n-    Hashtable<ConstantPool*, mtClass>::add_entry(index,\n-      (HashtableEntry<ConstantPool*, mtClass>*)new_entry);\n-  }\n@@ -63,2 +45,1 @@\n-  void add_entry(int index, unsigned int hash,\n-                 const constantPoolHandle& pool, int which, Symbol* error, Symbol* message,\n+  static void add_entry(const constantPoolHandle& pool, int which, Symbol* error, Symbol* message,\n@@ -67,2 +48,1 @@\n-  void add_entry(int index, unsigned int hash,\n-                 const constantPoolHandle& pool, int which, const char* message);\n+  static void add_entry(const constantPoolHandle& pool, int which, const char* message);\n@@ -71,7 +51,1 @@\n-  ResolutionErrorEntry* find_entry(int index, unsigned int hash,\n-                                   const constantPoolHandle& pool, int cp_index);\n-\n-\n-  unsigned int compute_hash(const constantPoolHandle& pool, int cp_index) {\n-    return (unsigned int) pool->identity_hash() + cp_index;\n-  }\n+  static ResolutionErrorEntry* find_entry(const constantPoolHandle& pool, int cp_index);\n@@ -80,1 +54,1 @@\n-  void purge_resolution_errors();\n+  static void purge_resolution_errors();\n@@ -83,1 +57,1 @@\n-  void delete_entry(ConstantPool* c);\n+  static void delete_entry(ConstantPool* c);\n@@ -92,0 +66,4 @@\n+\n+  static uintptr_t convert_key(const constantPoolHandle& pool, int cp_index) {\n+    return (uintptr_t) (pool() + cp_index);\n+  }\n@@ -95,1 +73,1 @@\n-class ResolutionErrorEntry : public HashtableEntry<ConstantPool*, mtClass> {\n+class ResolutionErrorEntry : public CHeapObj<mtClass> {\n@@ -102,0 +80,1 @@\n+  ConstantPool*     _pool;\n@@ -105,1 +84,0 @@\n-  ConstantPool*      pool() const               { return literal(); }\n@@ -107,2 +85,2 @@\n-  int                cp_index() const           { return _cp_index; }\n-  void               set_cp_index(int cp_index) { _cp_index = cp_index; }\n+    ResolutionErrorEntry(ConstantPool* pool, int cp_index, Symbol* error, Symbol* message,\n+      Symbol* cause, Symbol* cause_msg);\n@@ -110,2 +88,8 @@\n-  Symbol*            error() const              { return _error; }\n-  void               set_error(Symbol* e);\n+    ResolutionErrorEntry(ConstantPool* pool, int cp_index, const char* message):\n+        _cp_index(cp_index),\n+        _error(nullptr),\n+        _message(nullptr),\n+        _cause(nullptr),\n+        _cause_msg(nullptr),\n+        _pool(pool),\n+        _nest_host_error(message) {}\n@@ -113,2 +97,1 @@\n-  Symbol*            message() const            { return _message; }\n-  void               set_message(Symbol* c);\n+    ~ResolutionErrorEntry();\n@@ -116,2 +99,3 @@\n-  Symbol*            cause() const              { return _cause; }\n-  void               set_cause(Symbol* c);\n+    void set_nest_host_error(const char* message) {\n+      _nest_host_error = message;\n+    }\n@@ -119,2 +103,0 @@\n-  Symbol*            cause_msg() const          { return _cause_msg; }\n-  void               set_cause_msg(Symbol* c);\n@@ -122,0 +104,6 @@\n+  ConstantPool*      pool() const               { return _pool; }\n+  int                cp_index() const           { return _cp_index; }\n+  Symbol*            error() const              { return _error; }\n+  Symbol*            message() const            { return _message; }\n+  Symbol*            cause() const              { return _cause; }\n+  Symbol*            cause_msg() const          { return _cause_msg; }\n@@ -123,1 +111,0 @@\n-  void               set_nest_host_error(const char* message);\n@@ -125,7 +112,0 @@\n-  ResolutionErrorEntry* next() const {\n-    return (ResolutionErrorEntry*)HashtableEntry<ConstantPool*, mtClass>::next();\n-  }\n-\n-  ResolutionErrorEntry** next_addr() {\n-    return (ResolutionErrorEntry**)HashtableEntry<ConstantPool*, mtClass>::next_addr();\n-  }\n","filename":"src\/hotspot\/share\/classfile\/resolutionErrors.hpp","additions":32,"deletions":52,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -90,1 +90,0 @@\n-ResolutionErrorTable*  SystemDictionary::_resolution_errors   = NULL;\n@@ -1608,1 +1607,1 @@\n-      resolution_errors()->purge_resolution_errors();\n+      ResolutionErrorTable::purge_resolution_errors();\n@@ -1650,1 +1649,0 @@\n-  _resolution_errors   = new ResolutionErrorTable(_resolution_error_size);\n@@ -1851,2 +1849,0 @@\n-  unsigned int hash = resolution_errors()->compute_hash(pool, which);\n-  int index = resolution_errors()->hash_to_index(hash);\n@@ -1855,1 +1851,1 @@\n-    ResolutionErrorEntry* entry = resolution_errors()->find_entry(index, hash, pool, which);\n+    ResolutionErrorEntry* entry = ResolutionErrorTable::find_entry(pool, which);\n@@ -1857,1 +1853,1 @@\n-      resolution_errors()->add_entry(index, hash, pool, which, error, message, cause, cause_msg);\n+      ResolutionErrorTable::add_entry(pool, which, error, message, cause, cause_msg);\n@@ -1864,1 +1860,1 @@\n-  resolution_errors()->delete_entry(pool);\n+  ResolutionErrorTable::delete_entry(pool);\n@@ -1870,2 +1866,1 @@\n-  unsigned int hash = resolution_errors()->compute_hash(pool, which);\n-  int index = resolution_errors()->hash_to_index(hash);\n+\n@@ -1874,1 +1869,1 @@\n-    ResolutionErrorEntry* entry = resolution_errors()->find_entry(index, hash, pool, which);\n+    ResolutionErrorEntry* entry = ResolutionErrorTable::find_entry(pool, which);\n@@ -1890,0 +1885,1 @@\n+\n@@ -1893,2 +1889,0 @@\n-  unsigned int hash = resolution_errors()->compute_hash(pool, which);\n-  int index = resolution_errors()->hash_to_index(hash);\n@@ -1897,1 +1891,1 @@\n-    ResolutionErrorEntry* entry = resolution_errors()->find_entry(index, hash, pool, which);\n+    ResolutionErrorEntry* entry = ResolutionErrorTable::find_entry(pool, which);\n@@ -1905,1 +1899,1 @@\n-      resolution_errors()->add_entry(index, hash, pool, which, message);\n+      ResolutionErrorTable::add_entry(pool, which, message);\n@@ -1912,2 +1906,0 @@\n-  unsigned int hash = resolution_errors()->compute_hash(pool, which);\n-  int index = resolution_errors()->hash_to_index(hash);\n@@ -1916,1 +1908,1 @@\n-    ResolutionErrorEntry* entry = resolution_errors()->find_entry(index, hash, pool, which);\n+    ResolutionErrorEntry* entry = ResolutionErrorTable::find_entry(pool, which);\n@@ -1925,1 +1917,0 @@\n-\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":10,"deletions":19,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -74,1 +74,0 @@\n-class ResolutionErrorTable;\n@@ -296,3 +295,0 @@\n-  \/\/ Resolution errors\n-  static ResolutionErrorTable*   _resolution_errors;\n-\n@@ -315,1 +311,0 @@\n-  static ResolutionErrorTable* resolution_errors() { return _resolution_errors; }\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"classfile\/resolutionErrors.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-#include \"classfile\/resolutionErrors.hpp\"\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+* @test 8289164\n+* @summary Test that tests the ResolutionErrorTable\n+*\/\n+\n+import java.io.File;\n+import java.io.*;\n+\n+\n+public class ErrorsDemoTest {\n+    static int x = 0;\n+\n+    public static void main(String args[]) {\n+        String classDirectory = System.getProperty(\"test.classes\");\n+        String filename = classDirectory + File.separator + \"DeleteMe.class\";\n+        File file = new File(filename);\n+        boolean success = file.delete();\n+        String oldMessage = null;\n+\n+        for (int i = 0; i < 2; i++) {\n+            try {\n+                ErrorInResolution.doit();\n+            }\n+            catch (Throwable t) {\n+                String s = t.getMessage();\n+                if (oldMessage == null){\n+                oldMessage = s;\n+                }\n+                else {\n+                    if(!s.equals(oldMessage)){\n+                        RuntimeException e = new RuntimeException();\n+                        throw e;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+class DeleteMe {\n+    static int x;\n+}\n+\n+class ErrorInResolution {\n+    static int doit() {\n+        return DeleteMe.x;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassResolutionFail\/ErrorsDemoTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}