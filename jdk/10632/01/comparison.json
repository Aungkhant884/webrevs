{"files":[{"patch":"@@ -26,1 +26,0 @@\n-#include \"nativeInst_ppc.hpp\"\n@@ -171,2 +170,6 @@\n-  \/\/ Oops may have been changed; exploiting isync semantics (used as acquire) to make those updates observable.\n-  __ isync();\n+  \/\/ Oops may have been changed. Make those updates observable.\n+  \/\/ \"isync\" can serve both, data and instruction patching.\n+  \/\/ But, many GCs don't modify nmethods during a concurrent phase.\n+  if (nmethod_patching_type() != NMethodPatchingType::stw_instruction_and_data_patch) {\n+    __ isync();\n+  }\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetAssembler_ppc.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,1 +33,5 @@\n-class InterpreterMacroAssembler;\n+enum class NMethodPatchingType {\n+  stw_instruction_and_data_patch,\n+  conc_instruction_and_data_patch,\n+  conc_data_patch\n+};\n@@ -61,0 +65,2 @@\n+  virtual NMethodPatchingType nmethod_patching_type() { return NMethodPatchingType::stw_instruction_and_data_patch; }\n+\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetAssembler_ppc.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+#include \"gc\/shared\/barrierSet.hpp\"\n+#include \"gc\/shared\/barrierSetAssembler.hpp\"\n@@ -85,1 +87,1 @@\n-    verify_op_code(current_instruction, Assembler::ISYNC_OPCODE);\n+    \/\/ isync is optional\n@@ -103,1 +105,5 @@\n-  address barrier_address = nm->code_begin() + nm->frame_complete_offset() + (-9 * 4);\n+  BarrierSetAssembler* bs_asm = BarrierSet::barrier_set()->barrier_set_assembler();\n+  address barrier_address = nm->code_begin() + nm->frame_complete_offset() + (-8 * 4);\n+  if (bs_asm->nmethod_patching_type() != NMethodPatchingType::stw_instruction_and_data_patch) {\n+    barrier_address -= 4; \/\/ isync (see nmethod_entry_barrier)\n+  }\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetNMethod_ppc.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+  virtual NMethodPatchingType nmethod_patching_type() { return NMethodPatchingType::conc_data_patch; }\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoahBarrierSetAssembler_ppc.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -67,0 +67,2 @@\n+  virtual NMethodPatchingType nmethod_patching_type() { return NMethodPatchingType::conc_data_patch; }\n+\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/zBarrierSetAssembler_ppc.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}