{"files":[{"patch":"@@ -2778,0 +2778,6 @@\n+      if (FLAG_SET_CMDLINE(ErrorFileWithStderr, false) != JVMFlag::SUCCESS) {\n+        return JNI_EINVAL;\n+      }\n+      if (FLAG_SET_CMDLINE(ErrorFileWithStdout, false) != JVMFlag::SUCCESS) {\n+        return JNI_EINVAL;\n+      }\n@@ -2785,0 +2791,6 @@\n+      if (FLAG_SET_CMDLINE(ErrorFileWithStderr, false) != JVMFlag::SUCCESS) {\n+        return JNI_EINVAL;\n+      }\n+      if (FLAG_SET_CMDLINE(ErrorFileWithStdout, false) != JVMFlag::SUCCESS) {\n+        return JNI_EINVAL;\n+      }\n@@ -2788,0 +2800,26 @@\n+    } else if (match_option(option, \"-XX:+ErrorFileWithStderr\")) {\n+      if (FLAG_SET_CMDLINE(ErrorFileToStderr, false) != JVMFlag::SUCCESS) {\n+        return JNI_EINVAL;\n+      }\n+      if (FLAG_SET_CMDLINE(ErrorFileToStdout, false) != JVMFlag::SUCCESS) {\n+        return JNI_EINVAL;\n+      }\n+      if (FLAG_SET_CMDLINE(ErrorFileWithStdout, false) != JVMFlag::SUCCESS) {\n+        return JNI_EINVAL;\n+      }\n+      if (FLAG_SET_CMDLINE(ErrorFileWithStderr, true) != JVMFlag::SUCCESS) {\n+        return JNI_EINVAL;\n+      }\n+    } else if (match_option(option, \"-XX:+ErrorFileWithStdout\")) {\n+      if (FLAG_SET_CMDLINE(ErrorFileToStderr, false) != JVMFlag::SUCCESS) {\n+        return JNI_EINVAL;\n+      }\n+      if (FLAG_SET_CMDLINE(ErrorFileToStdout, false) != JVMFlag::SUCCESS) {\n+        return JNI_EINVAL;\n+      }\n+      if (FLAG_SET_CMDLINE(ErrorFileWithStderr, false) != JVMFlag::SUCCESS) {\n+        return JNI_EINVAL;\n+      }\n+      if (FLAG_SET_CMDLINE(ErrorFileWithStdout, true) != JVMFlag::SUCCESS) {\n+        return JNI_EINVAL;\n+      }\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -1056,0 +1056,6 @@\n+  product(bool, ErrorFileWithStderr, false,                                 \\\n+          \"If true, error data is printed to stderr and a file\")            \\\n+                                                                            \\\n+  product(bool, ErrorFileWithStdout, false,                                 \\\n+          \"If true, error data is printed to stdout and a file\")            \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1715,1 +1715,1 @@\n-  \/\/ Part 1: print an abbreviated version (the '#' section) to stdout.\n+  \/\/ Part 1: print to screen\n@@ -1717,4 +1717,5 @@\n-    \/\/ Suppress this output if we plan to print Part 2 to stdout too.\n-    \/\/ No need to have the \"#\" section twice.\n-    if (!(ErrorFileToStdout && out.fd() == 1)) {\n-      report(&out, false);\n+    \/\/ print an abbreviated version (the '#' section) to stdout by default.\n+    \/\/ full error log is printed if the print option to stdout and stderr is specified\n+    bool verbose = false;\n+    if (ErrorFileToStdout || ErrorFileToStderr || ErrorFileWithStdout || ErrorFileWithStderr) {\n+      verbose = true;\n@@ -1722,0 +1723,5 @@\n+    if (ErrorFileToStderr || ErrorFileWithStderr) {\n+      out.set_fd(2);\n+    }\n+\n+    report(&out, verbose);\n@@ -1724,0 +1730,1 @@\n+    out.set_fd(fd_out);\n@@ -1729,3 +1736,2 @@\n-  \/\/ Part 2: print a full error log file (optionally to stdout or stderr).\n-  \/\/ print to error log file\n-  if (!log_done) {\n+  \/\/ Part 2: print a full error log file\n+  if (!log_done && !ErrorFileToStdout && !ErrorFileToStderr) {\n@@ -1735,13 +1741,5 @@\n-      if (ErrorFileToStdout) {\n-        fd_log = 1;\n-      } else if (ErrorFileToStderr) {\n-        fd_log = 2;\n-      } else {\n-        fd_log = prepare_log_file(ErrorFile, \"hs_err_pid%p.log\", true,\n-                 buffer, sizeof(buffer));\n-        if (fd_log != -1) {\n-          out.print_raw(\"# An error report file with more information is saved as:\\n# \");\n-          out.print_raw_cr(buffer);\n-        } else {\n-          out.print_raw_cr(\"# Can not save log file, dump to screen..\");\n-          fd_log = 1;\n+      fd_log = prepare_log_file(ErrorFile, \"hs_err_pid%p.log\", true, buffer, sizeof(buffer));\n+      if (fd_log != -1) {\n+        out.print_raw(\"# An error report file \");\n+        if (!ErrorFileWithStdout && !ErrorFileWithStderr) {\n+          out.print_raw(\"with more information \");\n@@ -1749,0 +1747,5 @@\n+        out.print_raw(\"is saved as:\\n# \");\n+        out.print_raw_cr(buffer);\n+      } else {\n+        out.print_raw_cr(\"# Can not save log file, dump to screen..\");\n+        fd_log = 1;\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":24,"deletions":21,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,2 @@\n-  public static void do_test(boolean redirectStdout, boolean redirectStderr) throws Exception {\n+  public static void do_test(boolean errorFileToStdout, boolean errorFileToStderr,\n+                             boolean errorFileWithStdout, boolean errorFileWithStderr) throws Exception {\n@@ -54,2 +55,4 @@\n-            \"-XX:\" + (redirectStdout ? \"+\" : \"-\") + \"ErrorFileToStdout\",\n-            \"-XX:\" + (redirectStderr ? \"+\" : \"-\") + \"ErrorFileToStderr\",\n+            \"-XX:\" + (errorFileWithStdout ? \"+\" : \"-\") + \"ErrorFileWithStdout\",\n+            \"-XX:\" + (errorFileWithStderr ? \"+\" : \"-\") + \"ErrorFileWithStderr\",\n+            \"-XX:\" + (errorFileToStdout ? \"+\" : \"-\") + \"ErrorFileToStdout\",\n+            \"-XX:\" + (errorFileToStderr ? \"+\" : \"-\") + \"ErrorFileToStderr\",\n@@ -65,0 +68,2 @@\n+    \/\/ Note that last override the prior switch when more than one of the following options are specified:\n+    \/\/ ErrorFileToStdout, ErrorFileToStderr, ErrorFileWithStdout or ErrorFileWithStderr\n@@ -66,1 +71,1 @@\n-    if (redirectStdout == false && redirectStderr == false) {\n+    if (errorFileToStdout == false && errorFileToStderr == false) {\n@@ -81,1 +86,10 @@\n-    if (redirectStdout == true && redirectStderr == false) {\n+    if (errorFileToStdout == false && errorFileToStderr == false) {\n+      output_detail.stderrShouldNotMatch(\"# A fatal error has been detected by the Java Runtime Environment:.*\");\n+      output_detail.stderrShouldNotMatch(\"# +(?:SIGSEGV|SIGBUS|EXCEPTION_ACCESS_VIOLATION).*\");\n+      output_detail.shouldNotContain(\"---------------  S U M M A R Y ------------\");\n+      output_detail.stdoutShouldContain(\"# An error report file with more information is saved as\");\n+      output_detail.stderrShouldNotContain(\"# An error report file\");\n+      System.out.println(\"Default behaviour - ok! \");\n+    } else if (errorFileToStdout == true && errorFileToStderr == false) {\n+      output_detail.stderrShouldNotMatch(\"# A fatal error has been detected by the Java Runtime Environment:.*\");\n+      output_detail.stderrShouldNotMatch(\"# +(?:SIGSEGV|SIGBUS|EXCEPTION_ACCESS_VIOLATION).*\");\n@@ -84,2 +98,5 @@\n-      System.out.println(\"Found report on stderr - ok! \");\n-    } else if (redirectStderr == true) {\n+      output_detail.shouldNotContain(\"# An error report file\");\n+      System.out.println(\"Found report on stdout - ok! \");\n+    } else if (errorFileToStderr == true) {\n+      output_detail.stdoutShouldNotMatch(\"# A fatal error has been detected by the Java Runtime Environment:.*\");\n+      output_detail.stdoutShouldNotMatch(\"# +(?:SIGSEGV|SIGBUS|EXCEPTION_ACCESS_VIOLATION).*\");\n@@ -88,1 +105,4 @@\n-      System.out.println(\"Found report on stdout - ok! \");\n+      output_detail.shouldNotContain(\"# An error report file\");\n+      System.out.println(\"Found report on stderr - ok! \");\n+    } else {\n+      throw new RuntimeException(\"Should not reach here.\");\n@@ -96,4 +116,10 @@\n-    do_test(false, false);\n-    do_test(false, true);\n-    do_test(true, false);\n-    do_test(true, true);\n+    do_test(false, false, false, false);\n+    do_test(false, true, false, false);\n+    do_test(true, false, false, false);\n+\n+    \/\/ ErrorFileToStdout, ErrorFileToStderr, ErrorFileWithStdout and ErrorFileWithStderr options should be exclusive.\n+    do_test(true, true, false, false);\n+    do_test(false, true, true, false);\n+    do_test(true, false, true, false);\n+    do_test(false, true, false, true);\n+    do_test(true, false, false, true);\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ErrorFileRedirectTest.java","additions":39,"deletions":13,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @bug 8308751\n+ * @summary Test ErrorFileWithStderr and ErrorFileWithStdout\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ * @requires (vm.debug == true)\n+ * @run driver ErrorFileWithRedirectTest\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStreamReader;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+public class ErrorFileWithRedirectTest {\n+\n+  public static void do_test(boolean errorFileWithStdout, boolean errorFileWithStderr,\n+                             boolean errorFileToStdout, boolean errorFileToStderr) throws Exception {\n+\n+    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+            \"-Xmx64M\",\n+            \"-XX:-CreateCoredumpOnCrash\",\n+            \"-XX:ErrorHandlerTest=14\",\n+            \"-XX:\" + (errorFileToStdout ? \"+\" : \"-\") + \"ErrorFileToStdout\",\n+            \"-XX:\" + (errorFileToStderr ? \"+\" : \"-\") + \"ErrorFileToStderr\",\n+            \"-XX:\" + (errorFileWithStdout ? \"+\" : \"-\") + \"ErrorFileWithStdout\",\n+            \"-XX:\" + (errorFileWithStderr ? \"+\" : \"-\") + \"ErrorFileWithStderr\",\n+            \"-version\");\n+\n+    OutputAnalyzer output_detail = new OutputAnalyzer(pb.start());\n+\n+    \/\/ we should have crashed with a SIGSEGV\n+    output_detail.shouldMatch(\"# A fatal error has been detected by the Java Runtime Environment:.*\");\n+    output_detail.shouldMatch(\"# +(?:SIGSEGV|SIGBUS|EXCEPTION_ACCESS_VIOLATION).*\");\n+\n+    \/\/ Note that last override the prior switch when more than one of the following options are specified:\n+    \/\/ ErrorFileToStdout, ErrorFileToStderr, ErrorFileWithStdout or ErrorFileWithStderr\n+    String hs_err_file = output_detail.firstMatch(\"# *(\\\\S*hs_err_pid\\\\d+\\\\.log)\", 1);\n+    if (hs_err_file == null) {\n+      throw new RuntimeException(\"Expected hs-err file but none found.\");\n+    } else {\n+      System.out.println(\"Found hs error file mentioned as expected: \" + hs_err_file);\n+    }\n+\n+    \/\/ Check the output. Note that since stderr was specified last it has preference if both are set.\n+    if (errorFileWithStdout == false && errorFileWithStderr == false) {\n+      output_detail.stderrShouldNotMatch(\"# A fatal error has been detected by the Java Runtime Environment:.*\");\n+      output_detail.stderrShouldNotMatch(\"# +(?:SIGSEGV|SIGBUS|EXCEPTION_ACCESS_VIOLATION).*\");\n+      output_detail.shouldNotContain(\"---------------  S U M M A R Y ------------\");\n+      output_detail.stdoutShouldContain(\"# An error report file with more information is saved as\");\n+      output_detail.stderrShouldNotContain(\"# An error report file\");\n+      System.out.println(\"Default behaviour - ok! \");\n+    } else if (errorFileWithStdout == true && errorFileWithStderr == false) {\n+      output_detail.stderrShouldNotMatch(\"# A fatal error has been detected by the Java Runtime Environment:.*\");\n+      output_detail.stderrShouldNotMatch(\"# +(?:SIGSEGV|SIGBUS|EXCEPTION_ACCESS_VIOLATION).*\");\n+      output_detail.stdoutShouldContain(\"---------------  S U M M A R Y ------------\");\n+      output_detail.stderrShouldNotContain(\"---------------  S U M M A R Y ------------\");\n+      output_detail.stdoutShouldContain(\"# An error report file is saved as\");\n+      output_detail.stderrShouldNotContain(\"# An error report file\");\n+      System.out.println(\"Found report on stdout - ok! \");\n+    } else if (errorFileWithStderr == true) {\n+      output_detail.stdoutShouldNotMatch(\"# A fatal error has been detected by the Java Runtime Environment:.*\");\n+      output_detail.stdoutShouldNotMatch(\"# +(?:SIGSEGV|SIGBUS|EXCEPTION_ACCESS_VIOLATION).*\");\n+      output_detail.stderrShouldContain(\"---------------  S U M M A R Y ------------\");\n+      output_detail.stdoutShouldNotContain(\"---------------  S U M M A R Y ------------\");\n+      output_detail.stdoutShouldContain(\"# An error report file is saved as\");\n+      output_detail.stderrShouldNotContain(\"# An error report file\");\n+      System.out.println(\"Found report on stderr - ok! \");\n+    } else {\n+      throw new RuntimeException(\"Should not reach here.\");\n+    }\n+\n+    System.out.println(\"OK.\");\n+\n+  }\n+\n+  public static void main(String[] args) throws Exception {\n+    do_test(false, false, false, false);\n+    do_test(false, true, false, false);\n+    do_test(true, false, false, false);\n+\n+    \/\/ ErrorFileWithStdout, ErrorFileWithStderr, ErrorFileToStdout and ErrorFileToStderr options should be exclusive.\n+    do_test(true, true, false, false);\n+    do_test(false, true, true, false);\n+    do_test(true, false, true, false);\n+    do_test(false, true, false, true);\n+    do_test(true, false, false, true);\n+  }\n+\n+}\n+\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ErrorFileWithRedirectTest.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"}]}