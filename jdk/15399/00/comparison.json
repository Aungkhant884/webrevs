{"files":[{"patch":"@@ -1802,0 +1802,8 @@\n+  \/\/ Sinking a node from a pre loop to its main loop pins the node between the pre and main loops. If that node is input\n+  \/\/ to a check that's eliminated by range check elimination, it becomes input to an expression that feeds into the exit\n+  \/\/ test of the pre loop above the point in the graph where it's pinned.\n+  if (n_loop->_head->is_CountedLoop() && n_loop->_head->as_CountedLoop()->is_pre_loop() &&\n+      u_loop->_head->is_CountedLoop() && u_loop->_head->as_CountedLoop()->is_main_loop() &&\n+      n_loop->_next == get_loop(u_loop->_head->as_CountedLoop()->skip_strip_mined())) {\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8314024\n+ * @summary Node used in check in main loop sunk from pre loop before RC elimination\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:-UseLoopPredicate TestNodeSunkFromPreLoop\n+ *\n+ *\/\n+\n+public class TestNodeSunkFromPreLoop {\n+    private static int unusedField;\n+\n+    public static void main(String[] args) {\n+        A object = new A();\n+        for (int i = 0; i < 20_000; i++) {\n+            test(object, 1000, 0);\n+        }\n+    }\n+\n+    private static int test(A object, int stop, int inv) {\n+        int res = 0;\n+        \/\/ pre\/main\/post loops created for this loop\n+        for (int i = 0; i < stop; i++) {\n+            \/\/ Optimized out. Delay transformation of loop above.\n+            for (int j = 0; j < 10; j++) {\n+                for (int k = 0; k < 10; k++) {\n+                }\n+            }\n+            \/\/ null check in pre loop so field load also in pre loop\n+            int v = object.field;\n+            int v2 = (v + inv);\n+            if (i > 1000) {\n+                \/\/ never taken. v + inv has a use out of loop at an unc.\n+                unusedField = v2;\n+            }\n+            \/\/ transformed in the main loop to i + (v + inv)\n+            int v3 = (v + (i + inv));\n+            if (v3 > 1000) {\n+                break;\n+            }\n+        }\n+        return res;\n+    }\n+\n+    private static class A {\n+        public int field;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestNodeSunkFromPreLoop.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}