{"files":[{"patch":"@@ -27,0 +27,1 @@\n+ * @requires vm.compiler1.enabled | vm.compiler2.enabled\n@@ -30,2 +31,5 @@\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI AsyncExceptionTest\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -Xcomp\n+                     -XX:CompileCommand=dontinline,AsyncExceptionTest::internalRun2\n+                     -XX:CompileCommand=compileonly,AsyncExceptionTest::internalRun1\n+                     -XX:CompileCommand=compileonly,AsyncExceptionTest::internalRun2\n+                     AsyncExceptionTest\n@@ -34,2 +38,0 @@\n-import compiler.testlibrary.CompilerUtils;\n-import compiler.whitebox.CompilerWhiteBoxTest;\n@@ -37,1 +39,0 @@\n-import sun.hotspot.WhiteBox;\n@@ -43,2 +44,0 @@\n-    public static final WhiteBox WB = WhiteBox.getWhiteBox();\n-\n@@ -48,1 +47,0 @@\n-    private boolean realRun;\n@@ -53,32 +51,0 @@\n-    public void setDontInline(String method) {\n-        java.lang.reflect.Method m;\n-        try {\n-            m = AsyncExceptionTest.class.getMethod(method);\n-        } catch(NoSuchMethodException e) {\n-            throw new RuntimeException(\"Unexpected: \" + e);\n-        }\n-        WB.testSetDontInlineMethod(m, true);\n-    }\n-\n-    public void checkCompLevel(String method) {\n-        int highestLevel = CompilerUtils.getMaxCompilationLevel();\n-        java.lang.reflect.Method m;\n-        try {\n-            m = AsyncExceptionTest.class.getMethod(method);\n-        } catch(NoSuchMethodException e) {\n-            throw new RuntimeException(\"Unexpected: \" + e);\n-        }\n-        int compLevel = WB.getMethodCompilationLevel(m);\n-        long start_time = System.currentTimeMillis();\n-        while (compLevel < (highestLevel - 1)) {\n-            try {\n-                Thread.sleep(200);\n-            } catch (InterruptedException e) { \/* ignored *\/ }\n-            if (System.currentTimeMillis() - start_time > 20000) {\n-                \/\/ if more than 20 seconds have elapsed just bail out\n-                break;\n-            }\n-            compLevel = WB.getMethodCompilationLevel(m);\n-        }\n-    }\n-\n@@ -88,14 +54,0 @@\n-            setDontInline(\"internalRun1\");\n-            setDontInline(\"internalRun2\");\n-\n-            int callCount = CompilerWhiteBoxTest.THRESHOLD;\n-            while (callCount-- > 0) {\n-                receivedThreadDeathinInternal2 = false;\n-                realRun = false;\n-                internalRun1();\n-            }\n-            checkCompLevel(\"internalRun1\");\n-            checkCompLevel(\"internalRun2\");\n-\n-            receivedThreadDeathinInternal2 = false;\n-            realRun = true;\n@@ -116,1 +68,0 @@\n-        long start_time = System.currentTimeMillis();\n@@ -131,1 +82,1 @@\n-            if (realRun && firstEntry) {\n+            if (firstEntry) {\n@@ -138,4 +89,0 @@\n-                if (!realRun) {\n-                    receivedThreadDeathinInternal2 = true;\n-                    break;\n-                }\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/AsyncExceptionTest.java","additions":7,"deletions":60,"binary":false,"changes":67,"status":"modified"}]}