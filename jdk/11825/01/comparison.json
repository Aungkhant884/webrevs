{"files":[{"patch":"@@ -2,2 +2,2 @@\n-\/\/ Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ Copyright (c) 2020, 2022, Arm Limited. All rights reserved.\n+\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2023, Arm Limited. All rights reserved.\n@@ -4162,0 +4162,46 @@\n+\/\/ VectorCastHF2F\n+\n+instruct vcvtHFtoF(vReg dst, vReg src) %{\n+  match(Set dst (VectorCastHF2F src));\n+  format %{ \"vcvtHFtoF $dst, $src\" %}\n+  ins_encode %{\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    if (VM_Version::use_neon_for_vector(length_in_bytes)) {\n+      \/\/ 4HF to 4F\n+      __ fcvtl($dst$$FloatRegister, __ T4S, $src$$FloatRegister, __ T4H);\n+    } else {\n+      assert(UseSVE > 0, \"must be sve\");\n+      __ sve_vector_extend($dst$$FloatRegister, __ S, $src$$FloatRegister, __ H);\n+      __ sve_fcvt($dst$$FloatRegister, __ S, ptrue, $dst$$FloatRegister, __ H);\n+    }\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ VectorCastF2HF\n+\n+instruct vcvtFtoHF_neon(vReg dst, vReg src) %{\n+  predicate(VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(1))));\n+  match(Set dst (VectorCastF2HF src));\n+  format %{ \"vcvtFtoHF_neon $dst, $src\\t# 4F to 4HF\" %}\n+  ins_encode %{\n+    \/\/ 4F to 4HF\n+    __ fcvtn($dst$$FloatRegister, __ T4H, $src$$FloatRegister, __ T4S);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtFtoHF_sve(vReg dst, vReg src, vReg tmp) %{\n+  predicate(!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(1))));\n+  match(Set dst (VectorCastF2HF src));\n+  effect(TEMP_DEF dst, TEMP tmp);\n+  format %{ \"vcvtFtoHF_sve $dst, $src\\t# KILL $tmp\" %}\n+  ins_encode %{\n+    assert(UseSVE > 0, \"must be sve\");\n+    __ sve_fcvt($dst$$FloatRegister, __ H, ptrue, $src$$FloatRegister, __ S);\n+    __ sve_vector_narrow($dst$$FloatRegister, __ H,\n+                         $dst$$FloatRegister, __ S, $tmp$$FloatRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":48,"deletions":2,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-\/\/ Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ Copyright (c) 2020, 2022, Arm Limited. All rights reserved.\n+\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2023, Arm Limited. All rights reserved.\n@@ -2734,0 +2734,46 @@\n+\/\/ VectorCastHF2F\n+\n+instruct vcvtHFtoF(vReg dst, vReg src) %{\n+  match(Set dst (VectorCastHF2F src));\n+  format %{ \"vcvtHFtoF $dst, $src\" %}\n+  ins_encode %{\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    if (VM_Version::use_neon_for_vector(length_in_bytes)) {\n+      \/\/ 4HF to 4F\n+      __ fcvtl($dst$$FloatRegister, __ T4S, $src$$FloatRegister, __ T4H);\n+    } else {\n+      assert(UseSVE > 0, \"must be sve\");\n+      __ sve_vector_extend($dst$$FloatRegister, __ S, $src$$FloatRegister, __ H);\n+      __ sve_fcvt($dst$$FloatRegister, __ S, ptrue, $dst$$FloatRegister, __ H);\n+    }\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ VectorCastF2HF\n+\n+instruct vcvtFtoHF_neon(vReg dst, vReg src) %{\n+  predicate(VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(1))));\n+  match(Set dst (VectorCastF2HF src));\n+  format %{ \"vcvtFtoHF_neon $dst, $src\\t# 4F to 4HF\" %}\n+  ins_encode %{\n+    \/\/ 4F to 4HF\n+    __ fcvtn($dst$$FloatRegister, __ T4H, $src$$FloatRegister, __ T4S);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtFtoHF_sve(vReg dst, vReg src, vReg tmp) %{\n+  predicate(!VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n->in(1))));\n+  match(Set dst (VectorCastF2HF src));\n+  effect(TEMP_DEF dst, TEMP tmp);\n+  format %{ \"vcvtFtoHF_sve $dst, $src\\t# KILL $tmp\" %}\n+  ins_encode %{\n+    assert(UseSVE > 0, \"must be sve\");\n+    __ sve_fcvt($dst$$FloatRegister, __ H, ptrue, $src$$FloatRegister, __ S);\n+    __ sve_vector_narrow($dst$$FloatRegister, __ H,\n+                         $dst$$FloatRegister, __ S, $tmp$$FloatRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":48,"deletions":2,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -3933,3 +3933,23 @@\n-    guarantee(T_src != H && T_dst != H, \"half-precision unsupported\");\n-    f(0b01100101, 31, 24), f(0b11, 23, 22), f(0b0010, 21, 18);\n-    f(T_dst, 17, 16), f(0b101, 15, 13);\n+    \/\/ The encodings of fields op1 (bits 17-16) and op2 (bits 23-22)\n+    \/\/ depend on T_src and T_dst as given below -\n+    \/\/ +-----+------+---------------------------------------------+\n+    \/\/ | op2 | op1  |             Instruction Details             |\n+    \/\/ +-----+------+---------------------------------------------+\n+    \/\/ |  10 |  01  | FCVT - half-precision to single-precision   |\n+    \/\/ |  11 |  01  | FCVT - half-precision to double-precision   |\n+    \/\/ |  10 |  00  | FCVT - single-precision to half-precision   |\n+    \/\/ |  11 |  11  | FCVT - single-precision to double-precision |\n+    \/\/ |  11 |  00  | FCVT - double-preciison to half-precision   |\n+    \/\/ |  11 |  10  | FCVT - double-precision to single-precision |\n+    \/\/ +-----+------+---+-----------------------------------------+\n+    int op1 = 0b00;\n+    int op2 = (T_src == D || T_dst == D) ? 0b11 : 0b10;\n+    if (T_src == H) {\n+      op1 = 0b01;\n+    } else if (T_dst == S) {\n+      op1 = 0b10;\n+    } else if (T_dst == D) {\n+      op1 = 0b11;\n+    }\n+    f(0b01100101, 31, 24), f(op2, 23, 22), f(0b0010, 21, 18);\n+    f(op1, 17, 16), f(0b101, 15, 13);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":24,"deletions":4,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1775,0 +1775,4 @@\n+                        [\"fcvt\",     \"__ sve_fcvt(z5, __ S, p3, z4, __ H);\",               \"fcvt\\tz5.s, p3\/m, z4.h\"],\n+                        [\"fcvt\",     \"__ sve_fcvt(z1, __ H, p3, z0, __ S);\",               \"fcvt\\tz1.h, p3\/m, z0.s\"],\n+                        [\"fcvt\",     \"__ sve_fcvt(z5, __ D, p3, z4, __ H);\",               \"fcvt\\tz5.d, p3\/m, z4.h\"],\n+                        [\"fcvt\",     \"__ sve_fcvt(z1, __ H, p3, z0, __ D);\",               \"fcvt\\tz1.h, p3\/m, z0.d\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -918,0 +918,4 @@\n+    __ sve_fcvt(z5, __ S, p3, z4, __ H);               \/\/       fcvt    z5.s, p3\/m, z4.h\n+    __ sve_fcvt(z1, __ H, p3, z0, __ S);               \/\/       fcvt    z1.h, p3\/m, z0.s\n+    __ sve_fcvt(z5, __ D, p3, z4, __ H);               \/\/       fcvt    z5.d, p3\/m, z4.h\n+    __ sve_fcvt(z1, __ H, p3, z0, __ D);               \/\/       fcvt    z1.h, p3\/m, z0.d\n@@ -1248,7 +1252,7 @@\n-    0x14000000,     0x17ffffd7,     0x14000405,     0x94000000,\n-    0x97ffffd4,     0x94000402,     0x3400000a,     0x34fffa2a,\n-    0x34007fea,     0x35000008,     0x35fff9c8,     0x35007f88,\n-    0xb400000b,     0xb4fff96b,     0xb4007f2b,     0xb500001d,\n-    0xb5fff91d,     0xb5007edd,     0x10000013,     0x10fff8b3,\n-    0x10007e73,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36307df6,     0x3758000c,     0x375ff7cc,     0x37587d8c,\n+    0x14000000,     0x17ffffd7,     0x14000409,     0x94000000,\n+    0x97ffffd4,     0x94000406,     0x3400000a,     0x34fffa2a,\n+    0x3400806a,     0x35000008,     0x35fff9c8,     0x35008008,\n+    0xb400000b,     0xb4fff96b,     0xb4007fab,     0xb500001d,\n+    0xb5fff91d,     0xb5007f5d,     0x10000013,     0x10fff8b3,\n+    0x10007ef3,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36307e76,     0x3758000c,     0x375ff7cc,     0x37587e0c,\n@@ -1259,13 +1263,13 @@\n-    0x54007b60,     0x54000001,     0x54fff541,     0x54007b01,\n-    0x54000002,     0x54fff4e2,     0x54007aa2,     0x54000002,\n-    0x54fff482,     0x54007a42,     0x54000003,     0x54fff423,\n-    0x540079e3,     0x54000003,     0x54fff3c3,     0x54007983,\n-    0x54000004,     0x54fff364,     0x54007924,     0x54000005,\n-    0x54fff305,     0x540078c5,     0x54000006,     0x54fff2a6,\n-    0x54007866,     0x54000007,     0x54fff247,     0x54007807,\n-    0x54000008,     0x54fff1e8,     0x540077a8,     0x54000009,\n-    0x54fff189,     0x54007749,     0x5400000a,     0x54fff12a,\n-    0x540076ea,     0x5400000b,     0x54fff0cb,     0x5400768b,\n-    0x5400000c,     0x54fff06c,     0x5400762c,     0x5400000d,\n-    0x54fff00d,     0x540075cd,     0x5400000e,     0x54ffefae,\n-    0x5400756e,     0x5400000f,     0x54ffef4f,     0x5400750f,\n+    0x54007be0,     0x54000001,     0x54fff541,     0x54007b81,\n+    0x54000002,     0x54fff4e2,     0x54007b22,     0x54000002,\n+    0x54fff482,     0x54007ac2,     0x54000003,     0x54fff423,\n+    0x54007a63,     0x54000003,     0x54fff3c3,     0x54007a03,\n+    0x54000004,     0x54fff364,     0x540079a4,     0x54000005,\n+    0x54fff305,     0x54007945,     0x54000006,     0x54fff2a6,\n+    0x540078e6,     0x54000007,     0x54fff247,     0x54007887,\n+    0x54000008,     0x54fff1e8,     0x54007828,     0x54000009,\n+    0x54fff189,     0x540077c9,     0x5400000a,     0x54fff12a,\n+    0x5400776a,     0x5400000b,     0x54fff0cb,     0x5400770b,\n+    0x5400000c,     0x54fff06c,     0x540076ac,     0x5400000d,\n+    0x54fff00d,     0x5400764d,     0x5400000e,     0x54ffefae,\n+    0x540075ee,     0x5400000f,     0x54ffef4f,     0x5400758f,\n@@ -1437,1 +1441,2 @@\n-    0x65caac01,     0x65dea833,     0x659ca509,     0x65d8a801,\n+    0x65caac01,     0x6589ac85,     0x6588ac01,     0x65c9ac85,\n+    0x65c8ac01,     0x65dea833,     0x659ca509,     0x65d8a801,\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":26,"deletions":21,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @requires os.simpleArch == \"x64\"\n+ * @requires (os.simpleArch == \"x64\" & (vm.cpu.features ~= \".*avx512f.*\" | vm.cpu.features ~= \".*f16c.*\")) | os.arch == \"aarch64\"\n@@ -37,0 +37,1 @@\n+import jdk.test.lib.Asserts;\n@@ -39,6 +40,6 @@\n-  private static final int ARRLEN = 1024;\n-  private static final int ITERS  = 11000;\n-  private static float  [] finp;\n-  private static short  [] sout;\n-  private static short  [] sinp;\n-  private static float  [] fout;\n+    private static final int ARRLEN = 1024;\n+    private static final int ITERS  = 11000;\n+    private static float  [] finp;\n+    private static short  [] sout;\n+    private static short  [] sinp;\n+    private static float  [] fout;\n@@ -46,5 +47,5 @@\n-  public static void main(String args[]) {\n-      TestFramework.runWithFlags(\"-XX:-TieredCompilation\",\n-                                 \"-XX:CompileThresholdScaling=0.3\");\n-      System.out.println(\"PASSED\");\n-  }\n+    public static void main(String args[]) {\n+        TestFramework.runWithFlags(\"-XX:-TieredCompilation\",\n+                                   \"-XX:CompileThresholdScaling=0.3\");\n+        System.out.println(\"PASSED\");\n+    }\n@@ -52,7 +53,7 @@\n-  @Test\n-  @IR(counts = {IRNode.VECTOR_CAST_F2HF, \"> 0\"}, applyIfCPUFeatureOr = {\"avx512f\", \"true\", \"f16c\", \"true\"})\n-  public void test_float_float16(short[] sout, float[] finp) {\n-      for (int i = 0; i < finp.length; i++) {\n-          sout[i] = Float.floatToFloat16(finp[i]);\n-      }\n-  }\n+    @Test\n+    @IR(counts = {IRNode.VECTOR_CAST_F2HF, \"> 0\"})\n+    public void test_float_float16(short[] sout, float[] finp) {\n+        for (int i = 0; i < finp.length; i++) {\n+            sout[i] = Float.floatToFloat16(finp[i]);\n+        }\n+    }\n@@ -60,4 +61,4 @@\n-  @Run(test = {\"test_float_float16\"}, mode = RunMode.STANDALONE)\n-  public void kernel_test_float_float16() {\n-      finp = new float[ARRLEN];\n-      sout = new short[ARRLEN];\n+    @Run(test = {\"test_float_float16\"}, mode = RunMode.STANDALONE)\n+    public void kernel_test_float_float16() {\n+        finp = new float[ARRLEN];\n+        sout = new short[ARRLEN];\n@@ -65,3 +66,3 @@\n-      for (int i = 0; i < ARRLEN; i++) {\n-          finp[i] = (float) i * 1.4f;\n-      }\n+        for (int i = 0; i < ARRLEN; i++) {\n+            finp[i] = (float) i * 1.4f;\n+        }\n@@ -69,4 +70,3 @@\n-      for (int i = 0; i < ITERS; i++) {\n-         test_float_float16(sout, finp);\n-      }\n-  }\n+        for (int i = 0; i < ITERS; i++) {\n+            test_float_float16(sout, finp);\n+        }\n@@ -74,7 +74,5 @@\n-  @Test\n-  @IR(counts = {IRNode.VECTOR_CAST_HF2F, \"> 0\"}, applyIfCPUFeatureOr = {\"avx512f\", \"true\", \"f16c\", \"true\"})\n-  public void test_float16_float(float[] fout, short[] sinp) {\n-      for (int i = 0; i < sinp.length; i++) {\n-          fout[i] = Float.float16ToFloat(sinp[i]);\n-      }\n-  }\n+        \/\/ Verifying the result\n+        for (int i = 0; i < ARRLEN; i++) {\n+            Asserts.assertEquals(Float.floatToFloat16(finp[i]), sout[i]);\n+        }\n+    }\n@@ -82,4 +80,7 @@\n-  @Run(test = {\"test_float16_float\"}, mode = RunMode.STANDALONE)\n-  public void kernel_test_float16_float() {\n-      sinp = new short[ARRLEN];\n-      fout = new float[ARRLEN];\n+    @Test\n+    @IR(counts = {IRNode.VECTOR_CAST_HF2F, \"> 0\"})\n+    public void test_float16_float(float[] fout, short[] sinp) {\n+        for (int i = 0; i < sinp.length; i++) {\n+            fout[i] = Float.float16ToFloat(sinp[i]);\n+        }\n+    }\n@@ -87,3 +88,4 @@\n-      for (int i = 0; i < ARRLEN; i++) {\n-          sinp[i] = (short)i;\n-      }\n+    @Run(test = {\"test_float16_float\"}, mode = RunMode.STANDALONE)\n+    public void kernel_test_float16_float() {\n+        sinp = new short[ARRLEN];\n+        fout = new float[ARRLEN];\n@@ -91,4 +93,13 @@\n-      for (int i = 0; i < ITERS; i++) {\n-          test_float16_float(fout , sinp);\n-      }\n-  }\n+        for (int i = 0; i < ARRLEN; i++) {\n+            sinp[i] = (short)i;\n+        }\n+\n+        for (int i = 0; i < ITERS; i++) {\n+            test_float16_float(fout, sinp);\n+        }\n+\n+        \/\/ Verifying the result\n+        for (int i = 0; i < ARRLEN; i++) {\n+            Asserts.assertEquals(Float.float16ToFloat(sinp[i]), fout[i]);\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFloatConversionsVector.java","additions":60,"deletions":49,"binary":false,"changes":109,"status":"modified"}]}