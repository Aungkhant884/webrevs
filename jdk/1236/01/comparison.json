{"files":[{"patch":"@@ -2975,21 +2975,0 @@\n-\/\/ Returns true iff super_method can be overridden by a method in targetclassname\n-\/\/ See JLS 3rd edition 8.4.6.1\n-\/\/ Assumes name-signature match\n-\/\/ \"this\" is InstanceKlass of super_method which must exist\n-\/\/ note that the InstanceKlass of the method in the targetclassname has not always been created yet\n-bool InstanceKlass::is_override(const methodHandle& super_method, Handle targetclassloader, Symbol* targetclassname, TRAPS) {\n-   \/\/ Private methods can not be overridden\n-   if (super_method->is_private()) {\n-     return false;\n-   }\n-   \/\/ If super method is accessible, then override\n-   if ((super_method->is_protected()) ||\n-       (super_method->is_public())) {\n-     return true;\n-   }\n-   \/\/ Package-private methods are not inherited outside of package\n-   assert(super_method->is_package_private(), \"must be package private\");\n-   return(is_same_class_package(targetclassloader(), targetclassname));\n-}\n-\n-\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -515,3 +515,0 @@\n-  \/\/ method override check\n-  bool is_override(const methodHandle& super_method, Handle targetclassloader, Symbol* targetclassname, TRAPS);\n-\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -83,2 +83,1 @@\n-    assert(methods->at(i)->is_method(), \"must be a Method*\");\n-    methodHandle mh(THREAD, methods->at(i));\n+    Method* method = methods->at(i);\n@@ -86,2 +85,2 @@\n-    if (needs_new_vtable_entry(mh, super, classloader, classname, class_flags, major_version, THREAD)) {\n-      assert(!methods->at(i)->is_private(), \"private methods should not need a vtable entry\");\n+    if (needs_new_vtable_entry(method, super, classloader, classname, class_flags, major_version)) {\n+      assert(!method->is_private(), \"private methods should not need a vtable entry\");\n@@ -202,2 +201,0 @@\n-      HandleMark hm(THREAD);\n-      assert(methods->at(i)->is_method(), \"must be a Method*\");\n@@ -206,1 +203,1 @@\n-      bool needs_new_entry = update_inherited_vtable(ik(), mh, super_vtable_len, -1, checkconstraints, CHECK);\n+      bool needs_new_entry = update_inherited_vtable(mh, super_vtable_len, -1, checkconstraints, CHECK);\n@@ -210,1 +207,1 @@\n-        mh()->set_vtable_index(initialized); \/\/ set primary vtable index\n+        mh->set_vtable_index(initialized); \/\/ set primary vtable index\n@@ -228,2 +225,0 @@\n-          HandleMark hm(THREAD);\n-          assert(default_methods->at(i)->is_method(), \"must be a Method*\");\n@@ -232,1 +227,1 @@\n-          bool needs_new_entry = update_inherited_vtable(ik(), mh, super_vtable_len, i, checkconstraints, CHECK);\n+          bool needs_new_entry = update_inherited_vtable(mh, super_vtable_len, i, checkconstraints, CHECK);\n@@ -275,0 +270,19 @@\n+\/\/ Returns true iff super_method can be overridden by a method in targetclassname\n+\/\/ See JLS 3rd edition 8.4.6.1\n+\/\/ Assumes name-signature match\n+\/\/ Note that the InstanceKlass of the method in the targetclassname has not always been created yet\n+static bool is_override(Method* super_method, Handle targetclassloader, Symbol* targetclassname) {\n+   \/\/ Private methods can not be overridden\n+   assert(!super_method->is_private(), \"shouldn't call with a private method\");\n+\n+   \/\/ If super method is accessible, then override\n+   if ((super_method->is_protected()) ||\n+       (super_method->is_public())) {\n+     return true;\n+   }\n+   \/\/ Package-private methods are not inherited outside of package\n+   assert(super_method->is_package_private(), \"must be package private\");\n+   return(super_method->method_holder()->is_same_class_package(targetclassloader(), targetclassname));\n+}\n+\n+\n@@ -290,2 +304,6 @@\n-InstanceKlass* klassVtable::find_transitive_override(InstanceKlass* initialsuper, const methodHandle& target_method,\n-                            int vtable_index, Handle target_loader, Symbol* target_classname, Thread * THREAD) {\n+InstanceKlass* klassVtable::find_transitive_override(InstanceKlass* initialsuper,\n+                                                     const methodHandle& target_method,\n+                                                     int vtable_index,\n+                                                     Handle target_loader,\n+                                                     Symbol* target_classname) {\n+\n@@ -297,3 +315,0 @@\n-      \/\/ get the class holding the matching method\n-      \/\/ make sure you use that class for is_override\n-      InstanceKlass* supermethodholder = super_method->method_holder();\n@@ -306,1 +321,1 @@\n-      if (supermethodholder->is_override(methodHandle(THREAD, super_method), target_loader, target_classname, THREAD)) {\n+      if (is_override(super_method, target_loader, target_classname)) {\n@@ -308,1 +323,1 @@\n-          ResourceMark rm(THREAD);\n+          ResourceMark rm;\n@@ -313,1 +328,1 @@\n-                       supermethodholder->internal_name(),\n+                       super_method->method_holder()->internal_name(),\n@@ -363,1 +378,1 @@\n-bool klassVtable::update_inherited_vtable(InstanceKlass* klass, const methodHandle& target_method,\n+bool klassVtable::update_inherited_vtable(const methodHandle& target_method,\n@@ -368,1 +383,2 @@\n-  assert(klass->is_instance_klass(), \"must be InstanceKlass\");\n+\n+  InstanceKlass* klass = ik();\n@@ -381,1 +397,1 @@\n-    assert(!target_method()->is_private(), \"private interface method flagged as default\");\n+    assert(!target_method->is_private(), \"private interface method flagged as default\");\n@@ -385,1 +401,1 @@\n-    assert(klass == target_method()->method_holder(), \"caller resp.\");\n+    assert(klass == target_method->method_holder(), \"caller resp.\");\n@@ -388,1 +404,1 @@\n-    target_method()->set_vtable_index(Method::nonvirtual_vtable_index);\n+    target_method->set_vtable_index(Method::nonvirtual_vtable_index);\n@@ -392,2 +408,2 @@\n-  if (target_method()->is_private() || target_method()->is_static() ||\n-      (target_method()->name()->fast_compare(vmSymbols::object_initializer_name()) == 0)) {\n+  if (target_method->is_private() || target_method->is_static() ||\n+      (target_method->name()->fast_compare(vmSymbols::object_initializer_name()) == 0)) {\n@@ -413,2 +429,2 @@\n-    if ((!is_default || !target_method()->has_itable_index())) {\n-      target_method()->set_vtable_index(Method::pending_itable_index);\n+    if ((!is_default || !target_method->has_itable_index())) {\n+      target_method->set_vtable_index(Method::pending_itable_index);\n@@ -429,2 +445,2 @@\n-  Symbol* name = target_method()->name();\n-  Symbol* signature = target_method()->signature();\n+  Symbol* name = target_method->name();\n+  Symbol* signature = target_method->signature();\n@@ -432,1 +448,2 @@\n-  Klass* target_klass = target_method()->method_holder();\n+  Klass* target_klass = target_method->method_holder();\n+  assert(target_klass != NULL, \"impossible\");\n@@ -437,0 +454,1 @@\n+  HandleMark hm(THREAD);\n@@ -455,1 +473,1 @@\n-        (!_klass->is_interface() ||\n+        (!klass->is_interface() ||\n@@ -466,8 +484,7 @@\n-          (is_default\n-          || ((super_klass->is_override(methodHandle(THREAD, super_method), target_loader, target_classname, THREAD))\n-          || ((klass->major_version() >= VTABLE_TRANSITIVE_OVERRIDE_VERSION)\n-          && ((super_klass = find_transitive_override(super_klass,\n-                             target_method, i, target_loader,\n-                             target_classname, THREAD))\n-                             != (InstanceKlass*)NULL)))))\n-        {\n+          (is_default ||\n+           is_override(super_method, target_loader, target_classname) ||\n+           (klass->major_version() >= VTABLE_TRANSITIVE_OVERRIDE_VERSION &&\n+             (super_klass = find_transitive_override(super_klass,\n+                                                     target_method, i, target_loader,\n+                                                     target_classname)) != NULL))) {\n+\n@@ -476,1 +493,1 @@\n-        if (!target_method()->is_package_private()) {\n+        if (!target_method->is_package_private()) {\n@@ -482,1 +499,1 @@\n-        if (checkconstraints && !target_method()->is_overpass()) {\n+        if (checkconstraints && !target_method->is_overpass()) {\n@@ -501,1 +518,1 @@\n-              target_method()->print_external_name(&ss),\n+              target_method->print_external_name(&ss),\n@@ -520,1 +537,1 @@\n-          target_method()->set_vtable_index(i);\n+          target_method->set_vtable_index(i);\n@@ -547,0 +564,1 @@\n+  JVMTI_ONLY(assert(!m->is_old() || ik()->is_being_redefined(), \"old methods should not be in vtable\"));\n@@ -579,1 +597,1 @@\n-bool klassVtable::needs_new_vtable_entry(const methodHandle& target_method,\n+bool klassVtable::needs_new_vtable_entry(Method* target_method,\n@@ -584,2 +602,1 @@\n-                                         u2 major_version,\n-                                         TRAPS) {\n+                                         u2 major_version) {\n@@ -598,1 +615,1 @@\n-      (target_method()->is_private()) ||\n+      (target_method->is_private()) ||\n@@ -600,1 +617,1 @@\n-      (target_method()->is_static()) ||\n+      (target_method->is_static()) ||\n@@ -602,1 +619,1 @@\n-      (target_method()->name()->fast_compare(vmSymbols::object_initializer_name()) == 0)\n+      (target_method->name()->fast_compare(vmSymbols::object_initializer_name()) == 0)\n@@ -610,4 +627,4 @@\n-  if (target_method()->method_holder() != NULL &&\n-      target_method()->method_holder()->is_interface()  &&\n-      !target_method()->is_abstract()) {\n-    assert(target_method()->is_default_method(),\n+  if (target_method->method_holder() != NULL &&\n+      target_method->method_holder()->is_interface()  &&\n+      !target_method->is_abstract()) {\n+    assert(target_method->is_default_method(),\n@@ -625,1 +642,1 @@\n-  if (target_method()->is_package_private()) {\n+  if (target_method->is_package_private()) {\n@@ -631,3 +648,2 @@\n-  ResourceMark rm(THREAD);\n-  Symbol* name = target_method()->name();\n-  Symbol* signature = target_method()->signature();\n+  Symbol* name = target_method->name();\n+  Symbol* signature = target_method->signature();\n@@ -646,1 +662,0 @@\n-    \/\/ make sure you use that class for is_override\n@@ -654,3 +669,3 @@\n-    if ((!super_method->is_static()) &&\n-       (!super_method->is_private())) {\n-      if (superk->is_override(methodHandle(THREAD, super_method), classloader, classname, THREAD)) {\n+    if (!super_method->is_static() &&\n+        !super_method->is_private()) {\n+      if (is_override(super_method, classloader, classname)) {\n@@ -658,1 +673,1 @@\n-      \/\/ else keep looking for transitive overrides\n+        \/\/ else keep looking for transitive overrides\n@@ -721,2 +736,1 @@\n-  Klass* method_holder = m->method_holder();\n-  InstanceKlass *mhk = InstanceKlass::cast(method_holder);\n+  InstanceKlass* holder = m->method_holder();\n@@ -725,1 +739,1 @@\n-  if (mhk->is_interface()) {\n+  if (holder->is_interface()) {\n@@ -727,1 +741,1 @@\n-    assert(ik()->implements_interface(method_holder) , \"this class should implement the interface\");\n+    assert(ik()->implements_interface(holder) , \"this class should implement the interface\");\n@@ -891,1 +905,1 @@\n-    InstanceKlass *ik = InstanceKlass::cast(local_interfaces->at(i));\n+    InstanceKlass *ik = local_interfaces->at(i);\n@@ -1110,1 +1124,1 @@\n-      Klass* interf = ioe->interface_klass();\n+      InstanceKlass* interf = ioe->interface_klass();\n@@ -1112,1 +1126,1 @@\n-      initialize_itable_for_interface(ioe->offset(), InstanceKlass::cast(interf), checkconstraints, CHECK);\n+      initialize_itable_for_interface(ioe->offset(), interf, checkconstraints, CHECK);\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":84,"deletions":70,"binary":false,"changes":154,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-  static bool needs_new_vtable_entry(const methodHandle& m,\n+  static bool needs_new_vtable_entry(Method* m,\n@@ -117,6 +117,9 @@\n-                                     u2 major_version,\n-                                     TRAPS);\n-\n-  bool update_inherited_vtable(InstanceKlass* klass, const methodHandle& target_method, int super_vtable_len, int default_index, bool checkconstraints, TRAPS);\n- InstanceKlass* find_transitive_override(InstanceKlass* initialsuper, const methodHandle& target_method, int vtable_index,\n-                                         Handle target_loader, Symbol* target_classname, Thread* THREAD);\n+                                     u2 major_version);\n+\n+  bool update_inherited_vtable(const methodHandle& target_method,\n+                               int super_vtable_len,\n+                               int default_index,\n+                               bool checkconstraints, TRAPS);\n+ InstanceKlass* find_transitive_override(InstanceKlass* initialsuper,\n+                                         const methodHandle& target_method, int vtable_index,\n+                                         Handle target_loader, Symbol* target_classname);\n","filename":"src\/hotspot\/share\/oops\/klassVtable.hpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"}]}