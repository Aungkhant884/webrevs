{"files":[{"patch":"@@ -1118,7 +1118,1 @@\n-  MethodCounters* mcs = Method::build_method_counters(m, thread);\n-  if (HAS_PENDING_EXCEPTION) {\n-    \/\/ Only metaspace OOM is expected. No Java code executed.\n-    assert((PENDING_EXCEPTION->is_a(vmClasses::OutOfMemoryError_klass())), \"we expect only an OOM error here\");\n-    CLEAR_PENDING_EXCEPTION;\n-  }\n-  return mcs;\n+  return Method::build_method_counters(thread, m);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-  static MethodCounters* build_method_counters(JavaThread* thread, Method* m);\n+  static MethodCounters* build_method_counters(JavaThread* current, Method* m);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-  \/\/ Klass has it's own operator new\n+  \/\/ Klass has its own operator new\n@@ -86,0 +86,7 @@\n+void* MetaspaceObj::operator new(size_t size, ClassLoaderData* loader_data,\n+                                 size_t word_size,\n+                                 MetaspaceObj::Type type) throw() {\n+  assert(!Thread::current()->is_Java_thread(), \"only allowed by non-Java thread\");\n+  return Metaspace::allocate(loader_data, word_size, type);\n+}\n+\n","filename":"src\/hotspot\/share\/memory\/allocation.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -348,0 +348,3 @@\n+  void* operator new(size_t size, ClassLoaderData* loader_data,\n+                     size_t word_size,\n+                     Type type) throw();\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -792,0 +792,3 @@\n+\/\/ This version of Metaspace::allocate does not throw OOM but simply returns NULL, and\n+\/\/ is suitable for calling from non-Java threads.\n+\/\/ Callers are responsible for checking null.\n@@ -793,1 +796,1 @@\n-                              MetaspaceObj::Type type, TRAPS) {\n+                              MetaspaceObj::Type type) {\n@@ -797,6 +800,0 @@\n-  assert(!(DumpSharedSpaces && THREAD->is_VM_thread()), \"sanity\");\n-\n-  if (HAS_PENDING_EXCEPTION) {\n-    assert(false, \"Should not allocate with exception pending\");\n-    return NULL;  \/\/ caller does a CHECK_NULL too\n-  }\n@@ -812,0 +809,22 @@\n+  if (result != NULL) {\n+    \/\/ Zero initialize.\n+    Copy::fill_to_words((HeapWord*)result, word_size, 0);\n+\n+    log_trace(metaspace)(\"Metaspace::allocate: type %d return \" PTR_FORMAT \".\", (int)type, p2i(result));\n+  }\n+\n+  return result;\n+}\n+\n+MetaWord* Metaspace::allocate(ClassLoaderData* loader_data, size_t word_size,\n+                              MetaspaceObj::Type type, TRAPS) {\n+\n+  assert(THREAD->is_Java_thread(), \"can't allocate in non-Java thread because we cannot throw exception\");\n+\n+  if (HAS_PENDING_EXCEPTION) {\n+    assert(false, \"Should not allocate with exception pending\");\n+    return NULL;  \/\/ caller does a CHECK_NULL too\n+  }\n+\n+  MetaWord* result = allocate(loader_data, word_size, type);\n+\n@@ -813,0 +832,1 @@\n+    MetadataType mdtype = (type == MetaspaceObj::ClassType) ? ClassType : NonClassType;\n@@ -822,1 +842,0 @@\n-  }\n@@ -824,5 +843,5 @@\n-  if (result == NULL) {\n-    report_metadata_oome(loader_data, word_size, type, mdtype, THREAD);\n-    assert(HAS_PENDING_EXCEPTION, \"sanity\");\n-    return NULL;\n-  }\n+    if (result == NULL) {\n+      report_metadata_oome(loader_data, word_size, type, mdtype, THREAD);\n+      assert(HAS_PENDING_EXCEPTION, \"sanity\");\n+      return NULL;\n+    }\n@@ -830,2 +849,2 @@\n-  \/\/ Zero initialize.\n-  Copy::fill_to_words((HeapWord*)result, word_size, 0);\n+    \/\/ Zero initialize.\n+    Copy::fill_to_words((HeapWord*)result, word_size, 0);\n@@ -833,1 +852,2 @@\n-  log_trace(metaspace)(\"Metaspace::allocate: type %d return \" PTR_FORMAT \".\", (int)type, p2i(result));\n+    log_trace(metaspace)(\"Metaspace::allocate: type %d return \" PTR_FORMAT \".\", (int)type, p2i(result));\n+  }\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":36,"deletions":16,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -127,0 +127,5 @@\n+  \/\/ Non-TRAPS version of allocate which can be called by a non-Java thread, that returns\n+  \/\/ NULL on failure.\n+  static MetaWord* allocate(ClassLoaderData* loader_data, size_t word_size,\n+                            MetaspaceObj::Type type);\n+\n","filename":"src\/hotspot\/share\/memory\/metaspace.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -560,1 +560,1 @@\n-MethodCounters* Method::build_method_counters(Method* m, TRAPS) {\n+MethodCounters* Method::build_method_counters(Thread* current, Method* m) {\n@@ -566,3 +566,10 @@\n-  methodHandle mh(THREAD, m);\n-  MethodCounters* counters = MethodCounters::allocate(mh, THREAD);\n-  if (HAS_PENDING_EXCEPTION) {\n+  methodHandle mh(current, m);\n+  MethodCounters* counters;\n+  if (current->is_Java_thread()) {\n+    \/\/ For when TRAPS is JavaThread.\n+    counters = MethodCounters::allocate(mh, current->as_Java_thread());\n+  } else {\n+    counters = MethodCounters::allocate(mh);\n+  }\n+  if (counters == NULL || current->has_pending_exception()) {\n+    current->clear_pending_exception(); \/\/ MethodData above doesn't clear exception\n@@ -571,1 +578,1 @@\n-    return NULL;   \/\/ return the exception (which is cleared)\n+    return NULL;\n@@ -578,1 +585,1 @@\n-    mh->log_touched(CHECK_NULL);\n+    mh->log_touched(current);\n@@ -2377,1 +2384,1 @@\n-void Method::log_touched(TRAPS) {\n+void Method::log_touched(Thread* current) {\n@@ -2389,1 +2396,1 @@\n-  MutexLocker ml(THREAD, TouchedMethodLog_lock);\n+  MutexLocker ml(current, TouchedMethodLog_lock);\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-  u2   number_of_breakpoints()             const {\n+  u2   number_of_breakpoints() const {\n@@ -239,2 +239,2 @@\n-  void incr_number_of_breakpoints(TRAPS)         {\n-    MethodCounters* mcs = get_method_counters(CHECK);\n+  void incr_number_of_breakpoints(Thread* current) {\n+    MethodCounters* mcs = get_method_counters(current);\n@@ -245,2 +245,2 @@\n-  void decr_number_of_breakpoints(TRAPS)         {\n-    MethodCounters* mcs = get_method_counters(CHECK);\n+  void decr_number_of_breakpoints(Thread* current) {\n+    MethodCounters* mcs = get_method_counters(current);\n@@ -252,1 +252,1 @@\n-  void clear_number_of_breakpoints()             {\n+  void clear_number_of_breakpoints() {\n@@ -295,2 +295,2 @@\n-  void interpreter_throwout_increment(TRAPS) {\n-    MethodCounters* mcs = get_method_counters(CHECK);\n+  void interpreter_throwout_increment(Thread* current) {\n+    MethodCounters* mcs = get_method_counters(current);\n@@ -435,1 +435,1 @@\n-  static MethodCounters* build_method_counters(Method* m, TRAPS);\n+  static MethodCounters* build_method_counters(Thread* current, Method* m);\n@@ -947,1 +947,1 @@\n-  MethodCounters* get_method_counters(TRAPS) {\n+  MethodCounters* get_method_counters(Thread* current) {\n@@ -949,1 +949,1 @@\n-      build_method_counters(this, CHECK_AND_CLEAR_NULL);\n+      build_method_counters(current, this);\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -58,0 +58,5 @@\n+MethodCounters* MethodCounters::allocate(const methodHandle& mh) {\n+  ClassLoaderData* loader_data = mh->method_holder()->class_loader_data();\n+  return new(loader_data, method_counters_size(), MetaspaceObj::MethodCountersType) MethodCounters(mh);\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/methodCounters.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+  static MethodCounters* allocate(const methodHandle& mh);\n","filename":"src\/hotspot\/share\/oops\/methodCounters.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}