{"files":[{"patch":"@@ -82,1 +82,1 @@\n-  \/\/ Klass has it's own operator new\n+  \/\/ Klass has its own operator new\n@@ -89,1 +89,1 @@\n-  \/\/ Klass has it's own operator new\n+  assert(!Thread::current()->is_Java_thread(), \"only allowed by non-Java thread\");\n","filename":"src\/hotspot\/share\/memory\/allocation.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -567,2 +567,9 @@\n-  MethodCounters* counters = MethodCounters::allocate(mh);\n-  if (counters == NULL) {\n+  MethodCounters* counters;\n+  if (current->is_Java_thread()) {\n+    \/\/ For when TRAPS is JavaThread.\n+    counters = MethodCounters::allocate(mh, current->as_Java_thread());\n+  } else {\n+    counters = MethodCounters::allocate(mh);\n+  }\n+  if (counters == NULL || current->has_pending_exception()) {\n+    current->clear_pending_exception(); \/\/ MethodData above doesn't clear exception\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -63,0 +63,5 @@\n+MethodCounters* MethodCounters::allocate(const methodHandle& mh, TRAPS) {\n+  ClassLoaderData* loader_data = mh->method_holder()->class_loader_data();\n+  return new(loader_data, method_counters_size(), MetaspaceObj::MethodCountersType, THREAD) MethodCounters(mh);\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/methodCounters.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+  static MethodCounters* allocate(const methodHandle& mh, TRAPS);\n","filename":"src\/hotspot\/share\/oops\/methodCounters.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}