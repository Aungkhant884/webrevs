{"files":[{"patch":"@@ -294,1 +294,1 @@\n-        0,\n+        61,\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/AWTEvent.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,182 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8311922\n+ * @key headful\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary To test both option key press and release event on Mac OS\n+ * @run main\/manual OptionKeyEventTest\n+ * @requires (os.family == \"mac\")\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Dimension;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextArea;\n+import javax.swing.JTextField;\n+import javax.swing.SwingUtilities;\n+\n+public class OptionKeyEventTest extends JFrame\n+        implements KeyListener, ActionListener {\n+    private static JTextArea displayArea;\n+    private static JTextField typingArea;\n+    private static final String newline = System.getProperty(\"line.separator\");\n+    private static final String INSTRUCTIONS =\n+            \"This test checks if the key events for the left and right\\n\" +\n+            \"option keys are correct. To complete the test, click on the \\n\" +\n+            \"OptionKeyEventTest window's typing area at the top to focus it.\\n\" +\n+            \"Press and release the left option key. Then press and release\\n\" +\n+            \"the right option key. Confirm in the display area and pass the\\n\" +\n+            \"test if these are correct, otherwise this test fails: \\n\\n\" +\n+            \"1. 'KEY PRESSED' appears first, followed by a 'KEY RELEASED'\\n\" +\n+            \"for each option button\\n\" +\n+            \"2. 'key location' shows 'left' or 'right' accordingly, not\\n\" +\n+            \"'standard' or 'unknown'\";\n+\n+    public static void main(String[] args)\n+            throws InterruptedException, InvocationTargetException {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame(\"OptionKeyEventTest\",\n+                INSTRUCTIONS, 5, 15, 35);\n+        createAndShowGUI();\n+        passFailJFrame.awaitAndCheck();\n+    }\n+\n+    private static void createAndShowGUI()\n+            throws InterruptedException, InvocationTargetException {\n+        SwingUtilities.invokeAndWait(() -> {\n+            OptionKeyEventTest frame =\n+                    new OptionKeyEventTest(\"OptionKeyEventTest\");\n+            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+            frame.addComponentsToPane();\n+            frame.pack();\n+            frame.setVisible(true);\n+            PassFailJFrame.addTestWindow(frame);\n+            PassFailJFrame.positionTestWindow(frame,\n+                    PassFailJFrame.Position.HORIZONTAL);\n+        });\n+    }\n+\n+    private void addComponentsToPane() {\n+        JButton button = new JButton(\"Clear\");\n+        button.addActionListener(this);\n+\n+        typingArea = new JTextField(20);\n+        typingArea.addKeyListener(this);\n+\n+        displayArea = new JTextArea();\n+        displayArea.setEditable(false);\n+        JScrollPane scrollPane = new JScrollPane(displayArea);\n+        scrollPane.setPreferredSize(new Dimension(375, 125));\n+\n+        getContentPane().add(typingArea, BorderLayout.PAGE_START);\n+        getContentPane().add(scrollPane, BorderLayout.CENTER);\n+        getContentPane().add(button, BorderLayout.PAGE_END);\n+    }\n+\n+    public OptionKeyEventTest(String name) {\n+        super(name);\n+    }\n+\n+    public void keyTyped(KeyEvent e) {\n+        displayInfo(e, \"KEY TYPED: \");\n+    }\n+\n+    public void keyPressed(KeyEvent e) {\n+        displayInfo(e, \"KEY PRESSED: \");\n+    }\n+\n+    public void keyReleased(KeyEvent e) {\n+        displayInfo(e, \"KEY RELEASED: \");\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        \/\/Clear the text components.\n+        displayArea.setText(\"\");\n+        typingArea.setText(\"\");\n+\n+        typingArea.requestFocusInWindow();\n+    }\n+\n+    private void displayInfo(KeyEvent e, String keyStatus) {\n+        int id = e.getID();\n+        String keyString;\n+        if (id == KeyEvent.KEY_TYPED) {\n+            char c = e.getKeyChar();\n+            keyString = \"key character = '\" + c + \"'\";\n+        } else {\n+            int keyCode = e.getKeyCode();\n+            keyString = \"key code = \" + keyCode\n+                    + \" (\"\n+                    + KeyEvent.getKeyText(keyCode)\n+                    + \")\";\n+        }\n+\n+        int modifiersEx = e.getModifiersEx();\n+        String modString = \"extended modifiers = \" + modifiersEx;\n+        String tmpString = KeyEvent.getModifiersExText(modifiersEx);\n+        if (tmpString.length() > 0) {\n+            modString += \" (\" + tmpString + \")\";\n+        } else {\n+            modString += \" (no extended modifiers)\";\n+        }\n+\n+        String actionString = \"action key? \";\n+        if (e.isActionKey()) {\n+            actionString += \"YES\";\n+        } else {\n+            actionString += \"NO\";\n+        }\n+\n+        String locationString = \"key location: \";\n+        int location = e.getKeyLocation();\n+        if (location == KeyEvent.KEY_LOCATION_STANDARD) {\n+            locationString += \"standard\";\n+        } else if (location == KeyEvent.KEY_LOCATION_LEFT) {\n+            locationString += \"left\";\n+        } else if (location == KeyEvent.KEY_LOCATION_RIGHT) {\n+            locationString += \"right\";\n+        } else if (location == KeyEvent.KEY_LOCATION_NUMPAD) {\n+            locationString += \"numpad\";\n+        } else { \/\/ (location == KeyEvent.KEY_LOCATION_UNKNOWN)\n+            locationString += \"unknown\";\n+        }\n+\n+        displayArea.append(keyStatus + newline\n+                + \" \" + keyString + newline\n+                + \" \" + modString + newline\n+                + \" \" + actionString + newline\n+                + \" \" + locationString + newline);\n+        displayArea.setCaretPosition(displayArea.getDocument().getLength());\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/OptionKeyEventTest.java","additions":182,"deletions":0,"binary":false,"changes":182,"status":"added"}]}