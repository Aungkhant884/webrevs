{"files":[{"patch":"@@ -675,1 +675,0 @@\n-    assert(vect_type() != NULL, \"sanity\");\n@@ -684,1 +683,0 @@\n-    assert(n1->vect_type() != NULL && n2->vect_type() != NULL, \"sanity\");\n@@ -1033,1 +1031,0 @@\n-    assert(vect_type() != NULL, \"sanity\");\n@@ -1177,1 +1174,0 @@\n-  assert(vect_type() != NULL, \"sanity\");\n@@ -1188,1 +1184,0 @@\n-  assert(vect_type() != NULL, \"sanity\");\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -63,17 +63,3 @@\n-  const TypeVect* vect_type() const { return type()->isa_vect(); }\n-\n-  uint length() const {\n-    if (vect_type() != NULL) {\n-      return vect_type()->length();\n-    } else {\n-      return 0;\n-    }\n-  } \/\/ Vector length\n-\n-  uint length_in_bytes() const {\n-    if (vect_type() != NULL) {\n-      return vect_type()->length_in_bytes();\n-    } else {\n-      return 0;\n-    }\n-  }\n+  const TypeVect* vect_type() const { return type()->is_vect(); }\n+  uint length() const { return vect_type()->length(); } \/\/ Vector length\n+  uint length_in_bytes() const { return vect_type()->length_in_bytes(); }\n@@ -83,1 +69,1 @@\n-  virtual uint ideal_reg() const { return Matcher::vector_ideal_reg(length_in_bytes()); }\n+  virtual uint ideal_reg() const { return Matcher::vector_ideal_reg(vect_type()->length_in_bytes()); }\n@@ -719,9 +705,2 @@\n-  const TypeVect* vect_type() const { return type()->isa_vect(); }\n-\n-  uint length() const {\n-    if (vect_type() != NULL) {\n-      return vect_type()->length();\n-    } else {\n-      return 0;\n-    }\n-  } \/\/ Vector length\n+  const TypeVect* vect_type() const { return type()->is_vect(); }\n+  uint length() const { return vect_type()->length(); } \/\/ Vector length\n@@ -733,8 +712,1 @@\n-\n-  virtual int memory_size() const {\n-    if (vect_type() != NULL) {\n-      return vect_type()->length_in_bytes();\n-    } else {\n-      return 0;\n-    }\n-  }\n+  virtual int memory_size() const { return vect_type()->length_in_bytes(); }\n@@ -748,8 +720,1 @@\n-\n-  uint element_size(void) {\n-    if (vect_type() != NULL) {\n-      return type2aelembytes(vect_type()->element_basic_type());\n-    } else {\n-      return 0;\n-    }\n-  }\n+  uint element_size(void) { return type2aelembytes(vect_type()->element_basic_type()); }\n@@ -777,0 +742,2 @@\n+ private:\n+  const TypeVect* _vect_type;\n@@ -779,1 +746,1 @@\n-    : StoreNode(c, mem, adr, at, val, MemNode::unordered) {\n+    : StoreNode(c, mem, adr, at, val, MemNode::unordered), _vect_type(val->bottom_type()->is_vect()) {\n@@ -784,9 +751,2 @@\n-  const TypeVect* vect_type() const { return in(MemNode::ValueIn)->bottom_type()->isa_vect(); }\n-\n-  uint length() const {\n-    if (vect_type() != NULL) {\n-      return vect_type()->length();\n-    } else {\n-      return 0;\n-    }\n-  } \/\/ Vector length\n+  const TypeVect* vect_type() const { return _vect_type; }\n+  uint length() const { return vect_type()->length(); } \/\/ Vector length\n@@ -798,8 +758,1 @@\n-\n-  virtual int memory_size() const {\n-    if (vect_type() != NULL) {\n-      return vect_type()->length_in_bytes();\n-    } else {\n-      return 0;\n-    }\n-  }\n+  virtual int memory_size() const { return vect_type()->length_in_bytes(); }\n@@ -811,7 +764,4 @@\n-  uint element_size(void) {\n-    if (vect_type() != NULL) {\n-      return type2aelembytes(vect_type()->element_basic_type());\n-    } else {\n-      return 0;\n-    }\n-  }\n+  uint element_size(void) { return type2aelembytes(vect_type()->element_basic_type()); }\n+\n+  \/\/ Needed for proper cloning.\n+  virtual uint size_of() const { return sizeof(*this); }\n@@ -1250,7 +1200,1 @@\n-  int GetOutShuffleSize() const {\n-    if (vect_type() != NULL) {\n-      return type2aelembytes(vect_type()->element_basic_type());\n-    } else {\n-      return 0;\n-    }\n-  }\n+  int GetOutShuffleSize() const { return type2aelembytes(vect_type()->element_basic_type()); }\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":19,"deletions":75,"binary":false,"changes":94,"status":"modified"}]}