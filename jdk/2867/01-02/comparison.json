{"files":[{"patch":"@@ -675,0 +675,1 @@\n+    assert(vect_type() != NULL, \"sanity\");\n@@ -683,0 +684,1 @@\n+    assert(n1->vect_type() != NULL && n2->vect_type() != NULL, \"sanity\");\n@@ -1031,0 +1033,1 @@\n+    assert(vect_type() != NULL, \"sanity\");\n@@ -1174,0 +1177,1 @@\n+  assert(vect_type() != NULL, \"sanity\");\n@@ -1184,0 +1188,1 @@\n+  assert(vect_type() != NULL, \"sanity\");\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -63,3 +63,17 @@\n-  const TypeVect* vect_type() const { return type()->is_vect(); }\n-  uint length() const { return vect_type()->length(); } \/\/ Vector length\n-  uint length_in_bytes() const { return vect_type()->length_in_bytes(); }\n+  const TypeVect* vect_type() const { return type()->isa_vect(); }\n+\n+  uint length() const {\n+    if (vect_type() != NULL) {\n+      return vect_type()->length();\n+    } else {\n+      return 0;\n+    }\n+  } \/\/ Vector length\n+\n+  uint length_in_bytes() const {\n+    if (vect_type() != NULL) {\n+      return vect_type()->length_in_bytes();\n+    } else {\n+      return 0;\n+    }\n+  }\n@@ -69,1 +83,1 @@\n-  virtual uint ideal_reg() const { return Matcher::vector_ideal_reg(vect_type()->length_in_bytes()); }\n+  virtual uint ideal_reg() const { return Matcher::vector_ideal_reg(length_in_bytes()); }\n@@ -705,2 +719,9 @@\n-  const TypeVect* vect_type() const { return type()->is_vect(); }\n-  uint length() const { return vect_type()->length(); } \/\/ Vector length\n+  const TypeVect* vect_type() const { return type()->isa_vect(); }\n+\n+  uint length() const {\n+    if (vect_type() != NULL) {\n+      return vect_type()->length();\n+    } else {\n+      return 0;\n+    }\n+  } \/\/ Vector length\n@@ -712,1 +733,8 @@\n-  virtual int memory_size() const { return vect_type()->length_in_bytes(); }\n+\n+  virtual int memory_size() const {\n+    if (vect_type() != NULL) {\n+      return vect_type()->length_in_bytes();\n+    } else {\n+      return 0;\n+    }\n+  }\n@@ -720,1 +748,8 @@\n-  uint element_size(void) { return type2aelembytes(vect_type()->element_basic_type()); }\n+\n+  uint element_size(void) {\n+    if (vect_type() != NULL) {\n+      return type2aelembytes(vect_type()->element_basic_type());\n+    } else {\n+      return 0;\n+    }\n+  }\n@@ -749,8 +784,1 @@\n-  const TypeVect* vect_type() const {\n-    const Type* type = in(MemNode::ValueIn)->bottom_type();\n-    if (type != Type::TOP) {\n-      return type->is_vect();\n-    } else {\n-      return NULL;\n-    }\n-  }\n+  const TypeVect* vect_type() const { return in(MemNode::ValueIn)->bottom_type()->isa_vect(); }\n@@ -1222,1 +1250,7 @@\n-  int GetOutShuffleSize() const { return type2aelembytes(vect_type()->element_basic_type()); }\n+  int GetOutShuffleSize() const {\n+    if (vect_type() != NULL) {\n+      return type2aelembytes(vect_type()->element_basic_type());\n+    } else {\n+      return 0;\n+    }\n+  }\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":51,"deletions":17,"binary":false,"changes":68,"status":"modified"}]}