{"files":[{"patch":"@@ -712,9 +712,1 @@\n-  virtual int memory_size() const {\n-    if (type()->isa_vect() != NULL) {\n-      return vect_type()->length_in_bytes();\n-    } else {\n-      \/\/ It's possible to be non-vector type during C2's optimization (e.g., Type::TOP).\n-      \/\/ Return 0 for this case.\n-      return 0;\n-    }\n-  }\n+  virtual int memory_size() const { return vect_type()->length_in_bytes(); }\n@@ -757,2 +749,16 @@\n-  const TypeVect* vect_type() const { return in(MemNode::ValueIn)->bottom_type()->is_vect(); }\n-  uint length() const { return vect_type()->length(); } \/\/ Vector length\n+  const TypeVect* vect_type() const {\n+    const Type* type = in(MemNode::ValueIn)->bottom_type();\n+    if (type != Type::TOP) {\n+      return type->is_vect();\n+    } else {\n+      return NULL;\n+    }\n+  }\n+\n+  uint length() const {\n+    if (vect_type() != NULL) {\n+      return vect_type()->length();\n+    } else {\n+      return 0;\n+    }\n+  } \/\/ Vector length\n@@ -764,0 +770,1 @@\n+\n@@ -765,1 +772,1 @@\n-    if (in(MemNode::ValueIn)->bottom_type()->isa_vect() != NULL) {\n+    if (vect_type() != NULL) {\n@@ -768,2 +775,0 @@\n-      \/\/ It's possible to be non-vector type during C2's optimization (e.g., Type::TOP).\n-      \/\/ Return 0 for this case.\n@@ -778,1 +783,7 @@\n-  uint element_size(void) { return type2aelembytes(vect_type()->element_basic_type()); }\n+  uint element_size(void) {\n+    if (vect_type() != NULL) {\n+      return type2aelembytes(vect_type()->element_basic_type());\n+    } else {\n+      return 0;\n+    }\n+  }\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":26,"deletions":15,"binary":false,"changes":41,"status":"modified"}]}