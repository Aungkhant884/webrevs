{"files":[{"patch":"@@ -1,1 +1,1 @@\n-# Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,0 +83,1 @@\n+    -taglet build.tools.taglet.SealedGraph \\\n@@ -190,1 +191,1 @@\n-# GenGraphs tool.\n+# GenGraphs tool for a module.\n@@ -194,2 +195,2 @@\n-define setup_gengraph_dot_to_svg\n-  $1_$2_DOT_SRC :=  $$($1_GENGRAPHS_DIR)\/$2.dot\n+define setup_module_graph_dot_to_svg\n+  $1_$2_DOT_SRC :=  $$($1_MODULE_GRAPHS_DIR)\/$2.dot\n@@ -200,1 +201,1 @@\n-    $$(eval $$(call SetupExecute, gengraphs_svg_$1_$2, \\\n+    $$(eval $$(call SetupExecute, module_graphs_svg_$1_$2, \\\n@@ -202,1 +203,1 @@\n-        DEPS := $$(gengraphs_$1_TARGET), \\\n+        DEPS := $$(module_graphs_dot_$1_TARGET), \\\n@@ -204,1 +205,1 @@\n-        SUPPORT_DIR := $$($1_GENGRAPHS_DIR), \\\n+        SUPPORT_DIR := $$($1_MODULE_GRAPHS_DIR), \\\n@@ -208,1 +209,31 @@\n-  $1_MODULEGRAPH_TARGETS += $$($1_$2_SVG_TARGET)\n+  $1_GRAPHS_TARGETS += $$($1_$2_SVG_TARGET)\n+endef\n+\n+# Helper function for creating a svg file for a class for which the SealedGraph\n+# taglet has generated a dot file. The dot file has a special name which\n+# encodes the module and class the graph belongs to.\n+#\n+# param 1: SetupJavadocGeneration namespace ($1)\n+# param 2: dot file name\n+#\n+define setup_sealed_graph_dot_to_svg\n+  $1_$2_DOT_SRC :=  $$($1_SEALED_GRAPHS_DIR)\/$2.dot\n+  $1_$2_TARGET_CLASS := $$(word 2, $$(subst _, , $2))\n+  $1_$2_SLASHED_NAME := $$(subst .,\/, $$($1_$2_TARGET_CLASS))\n+  $1_$2_TARGET_MODULE := $$(word 1, $$(subst _, , $2))\n+  $1_$2_TARGET_PATH := $$($1_TARGET_DIR)\/$$($1_$2_TARGET_MODULE)\/$$(dir $$($1_$2_SLASHED_NAME))\n+  $1_$2_TARGET_NAME := $$(notdir $$($1_$2_SLASHED_NAME))\n+  $1_$2_SVG_TARGET := $$($1_$2_TARGET_PATH)\/$$($1_$2_TARGET_NAME)-sealed-graph.svg\n+  $$(call MakeDir, $$($1_$2_TARGET_PATH))\n+\n+    # For each class needing a graph, create a svg file from the dot file\n+    # generated by the SealedGraph taglet and store it in the target dir.\n+    $$(eval $$(call SetupExecute, sealed_graphs_svg_$1_$2, \\\n+        INFO := Running dot for sealed graphs for $$($1_$2_TARGET_MODULE)\/$$($1_$2_TARGET_CLASS), \\\n+        DEPS := $$($1_$2_DOT_SRC), \\\n+        OUTPUT_FILE := $$($1_$2_SVG_TARGET), \\\n+        SUPPORT_DIR := $$($1_SEALED_GRAPHS_DIR), \\\n+        COMMAND := $$(DOT) -Tsvg -o $$($1_$2_SVG_TARGET) $$($1_$2_DOT_SRC), \\\n+    ))\n+\n+  $1_GRAPHS_TARGETS += $$($1_$2_SVG_TARGET)\n@@ -256,1 +287,1 @@\n-# $1_MODULEGRAPH_TARGETS. Note that the index.html file will work as a \"touch\n+# $1_GRAPHS_TARGETS. Note that the index.html file will work as a \"touch\n@@ -279,3 +310,6 @@\n-    # Tell the ModuleGraph taglet to generate html links to soon-to-be-created\n-    # svg files with module graphs.\n-    $1_JAVA_ARGS += -DenableModuleGraph=true\n+    $1_SEALED_GRAPHS_DIR := $$(SUPPORT_OUTPUTDIR)\/docs\/$1-sealed-graphs\n+\n+    # Tell the ModuleGraph and SealedGraph taglets to generate html links to\n+    # soon-to-be-created svg files with module\/sealed graphs.\n+    $1_JAVA_ARGS += -DenableModuleGraph=true -DsealedGraphDotPath=$$($1_SEALED_GRAPHS_DIR)\n+    $$(call MakeDir, $$($1_SEALED_GRAPHS_DIR))\n@@ -387,1 +421,1 @@\n-    GENGRAPHS_PROPS := \\\n+    MODULE_GRAPHS_PROPS := \\\n@@ -390,1 +424,1 @@\n-    $1_GENGRAPHS_DIR := $$(SUPPORT_OUTPUTDIR)\/docs\/$1-gengraphs\n+    $1_MODULE_GRAPHS_DIR := $$(SUPPORT_OUTPUTDIR)\/docs\/$1-module-graphs\n@@ -392,6 +426,6 @@\n-    $$(eval $$(call SetupExecute, gengraphs_$1, \\\n-        INFO := Running gengraphs for $1 documentation, \\\n-        DEPS := $$(BUILD_JIGSAW_TOOLS) $$(GENGRAPHS_PROPS), \\\n-        OUTPUT_DIR := $$($1_GENGRAPHS_DIR), \\\n-        COMMAND := $$(TOOL_GENGRAPHS) --spec --output $$($1_GENGRAPHS_DIR) \\\n-            --dot-attributes $$(GENGRAPHS_PROPS), \\\n+    $$(eval $$(call SetupExecute, module_graphs_dot_$1, \\\n+        INFO := Generating module graphs for $1 documentation, \\\n+        DEPS := $$(BUILD_JIGSAW_TOOLS) $$(MODULE_GRAPHS_PROPS), \\\n+        OUTPUT_DIR := $$($1_MODULE_GRAPHS_DIR), \\\n+        COMMAND := $$(TOOL_GENGRAPHS) --spec --output $$($1_MODULE_GRAPHS_DIR) \\\n+            --dot-attributes $$(MODULE_GRAPHS_PROPS), \\\n@@ -402,1 +436,2 @@\n-    # They will depend on gengraphs_$1_TARGET, and will be added to $1.\n+    # They will depend on module_graphs_dot_$1_TARGET, and will be added to\n+    # $1_GRAPHS_TARGETS.\n@@ -404,1 +439,16 @@\n-      $$(eval $$(call setup_gengraph_dot_to_svg,$1,$$m)) \\\n+      $$(eval $$(call setup_module_graph_dot_to_svg,$1,$$m)) \\\n+    )\n+\n+    # We have asked SealedGraph to generate dot files and links to svg files.\n+    # Now we must produce the svg files from the dot files.\n+\n+    # Get a list of classes for which SealedGraph has generated dot files\n+    $1_SEALED_CLASSES := $$(patsubst %.dot,%,$$(patsubst \\\n+        $$($1_SEALED_GRAPHS_DIR)\/%,%, \\\n+        $$(wildcard $$($1_SEALED_GRAPHS_DIR)\/*.dot)))\n+\n+    # For each class needing a graph, create a svg file from the dot file\n+    # generated by the SealedGraph taglet and store it in the target dir.\n+    # They will will be added to $1_GRAPHS_TARGETS.\n+    $$(foreach c, $$($1_SEALED_CLASSES), \\\n+      $$(eval $$(call setup_sealed_graph_dot_to_svg,$1,$$c)) \\\n@@ -410,1 +460,1 @@\n-# Setup generation of the JDK API documentation (javadoc + modulegraph)\n+# Setup generation of the JDK API documentation (javadoc + graphs)\n@@ -459,1 +509,1 @@\n-# JDK_API_MODULEGRAPH_TARGETS.\n+# JDK_API_GRAPHS_TARGETS.\n@@ -462,1 +512,1 @@\n-# Setup generation of the Java SE API documentation (javadoc + modulegraph)\n+# Setup generation of the Java SE API documentation (javadoc + graphs)\n@@ -476,1 +526,1 @@\n-# JAVASE_API_MODULEGRAPH_TARGETS.\n+# JAVASE_API_GRAPHS_TARGETS.\n@@ -479,1 +529,1 @@\n-# Setup generation of the reference Java SE API documentation (javadoc + modulegraph)\n+# Setup generation of the reference Java SE API documentation (javadoc + graphs)\n@@ -497,1 +547,1 @@\n-# REFERENCE_API_MODULEGRAPH_TARGETS.\n+# REFERENCE_API_GRAPHS_TARGETS.\n@@ -695,1 +745,1 @@\n-    EXTRA_DEPS := $(JDK_API_JAVADOC_TARGETS) $(JDK_API_MODULEGRAPH_TARGETS) \\\n+    EXTRA_DEPS := $(JDK_API_JAVADOC_TARGETS) $(JDK_API_GRAPHS_TARGETS) \\\n@@ -723,1 +773,1 @@\n-docs-jdk-api-modulegraph: $(JDK_API_MODULEGRAPH_TARGETS)\n+docs-jdk-api-graphs: $(JDK_API_GRAPHS_TARGETS)\n@@ -727,1 +777,1 @@\n-docs-javase-api-modulegraph: $(JAVASE_API_MODULEGRAPH_TARGETS)\n+docs-javase-api-graphs: $(JAVASE_API_GRAPHS_TARGETS)\n@@ -731,1 +781,1 @@\n-docs-reference-api-modulegraph: $(REFERENCE_API_MODULEGRAPH_TARGETS)\n+docs-reference-api-graphs: $(REFERENCE_API_GRAPHS_TARGETS)\n@@ -741,3 +791,3 @@\n-all: docs-jdk-api-javadoc docs-jdk-api-modulegraph docs-javase-api-javadoc \\\n-    docs-javase-api-modulegraph docs-reference-api-javadoc \\\n-    docs-reference-api-modulegraph docs-jdk-specs docs-jdk-index docs-zip \\\n+all: docs-jdk-api-javadoc docs-jdk-api-graphs docs-javase-api-javadoc \\\n+    docs-javase-api-graphs docs-reference-api-javadoc \\\n+    docs-reference-api-graphs docs-jdk-specs docs-jdk-index docs-zip \\\n@@ -746,3 +796,3 @@\n-.PHONY: default all docs-jdk-api-javadoc docs-jdk-api-modulegraph \\\n-    docs-javase-api-javadoc docs-javase-api-modulegraph \\\n-    docs-reference-api-javadoc docs-reference-api-modulegraph docs-jdk-specs \\\n+.PHONY: default all docs-jdk-api-javadoc docs-jdk-api-graphs \\\n+    docs-javase-api-javadoc docs-javase-api-graphs \\\n+    docs-reference-api-javadoc docs-reference-api-graphs docs-jdk-specs \\\n","filename":"make\/Docs.gmk","additions":88,"deletions":38,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -469,1 +469,1 @@\n-# modulegraph targets.\n+# graphs targets.\n@@ -475,1 +475,1 @@\n-$(eval $(call SetupTarget, docs-jdk-api-modulegraph, \\\n+$(eval $(call SetupTarget, docs-jdk-api-graphs, \\\n@@ -477,1 +477,1 @@\n-    TARGET := docs-jdk-api-modulegraph, \\\n+    TARGET := docs-jdk-api-graphs, \\\n@@ -486,1 +486,1 @@\n-$(eval $(call SetupTarget, docs-javase-api-modulegraph, \\\n+$(eval $(call SetupTarget, docs-javase-api-graphs, \\\n@@ -488,1 +488,1 @@\n-    TARGET := docs-javase-api-modulegraph, \\\n+    TARGET := docs-javase-api-graphs, \\\n@@ -497,1 +497,1 @@\n-$(eval $(call SetupTarget, docs-reference-api-modulegraph, \\\n+$(eval $(call SetupTarget, docs-reference-api-graphs, \\\n@@ -499,1 +499,1 @@\n-    TARGET := docs-reference-api-modulegraph, \\\n+    TARGET := docs-reference-api-graphs, \\\n@@ -1110,3 +1110,8 @@\n-  docs-jdk-api: docs-jdk-api-modulegraph\n-  docs-javase-api: docs-javase-api-modulegraph\n-  docs-reference-api: docs-reference-api-modulegraph\n+  docs-jdk-api: docs-jdk-api-graphs\n+  docs-javase-api: docs-javase-api-graphs\n+  docs-reference-api: docs-reference-api-graphs\n+\n+  # We must generated javadoc first so we know what graphs are needed\n+  docs-jdk-api-graphs: docs-jdk-api-javadoc\n+  docs-javase-api-graphs: docs-javase-api-javadoc\n+  docs-reference-api-graphs: docs-reference-api-javadoc\n","filename":"make\/Main.gmk","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,260 @@\n+\/*\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package build.tools.taglet;\n+\n+import com.sun.source.doctree.DocTree;\n+import java.nio.file.Path;\n+import jdk.javadoc.doclet.Doclet;\n+import jdk.javadoc.doclet.DocletEnvironment;\n+import jdk.javadoc.doclet.Taglet;\n+\n+import javax.lang.model.element.*;\n+import javax.lang.model.type.DeclaredType;\n+\n+import java.io.*;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static java.lang.System.lineSeparator;\n+import static jdk.javadoc.doclet.Taglet.Location.TYPE;\n+\n+\/**\n+ * A block tag to optionally insert a reference to a sealed class hierarchy graph,\n+ * and generate the corresponding dot file.\n+ *\/\n+public final class SealedGraph implements Taglet {\n+    private static final String sealedGraphDotPath =\n+            System.getProperty(\"sealedGraphDotPath\");\n+\n+    private DocletEnvironment docletEnvironment;\n+\n+    \/**\n+     * Returns the set of locations in which a taglet may be used.\n+     *\/\n+    @Override\n+    public Set<Location> getAllowedLocations() {\n+        return EnumSet.of(TYPE);\n+    }\n+\n+    @Override\n+    public boolean isInlineTag() {\n+        return false;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"sealedGraph\";\n+    }\n+\n+    @Override\n+    public void init(DocletEnvironment env, Doclet doclet) {\n+        docletEnvironment = env;\n+    }\n+\n+    @Override\n+    public String toString(List<? extends DocTree> tags, Element element) {\n+        if (sealedGraphDotPath == null || sealedGraphDotPath.isEmpty()) {\n+            return \"\";\n+        }\n+        if (docletEnvironment == null || !(element instanceof TypeElement typeElement)) {\n+            return \"\";\n+        }\n+\n+        ModuleElement module = docletEnvironment.getElementUtils().getModuleOf(element);\n+        Path dotFile = Path.of(sealedGraphDotPath,\n+                module.getQualifiedName() + \"_\" + typeElement.getQualifiedName() + \".dot\");\n+\n+        Set<String> exports = module.getDirectives().stream()\n+                .filter(ModuleElement.ExportsDirective.class::isInstance)\n+                .map(ModuleElement.ExportsDirective.class::cast)\n+                \/\/ Only include packages that are globally exported (i.e. no \"to\" exports)\n+                .filter(ed -> ed.getTargetModules() == null)\n+                .map(ModuleElement.ExportsDirective::getPackage)\n+                .map(PackageElement::getQualifiedName)\n+                .map(Objects::toString)\n+                .collect(Collectors.toUnmodifiableSet());\n+\n+        String dotContent = Renderer.graph(typeElement, exports);\n+\n+        try (PrintWriter pw = new PrintWriter(dotFile.toFile())) {\n+            pw.println(dotContent);\n+        } catch (FileNotFoundException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        String simpleTypeName = element.getSimpleName().toString();\n+        String imageFile = simpleTypeName + \"-sealed-graph.svg\";\n+        int thumbnailHeight = 100; \/\/ also appears in the stylesheet\n+        String hoverImage = \"<span>\"\n+            + getImage(simpleTypeName, imageFile, -1, true)\n+            + \"<\/span>\";\n+\n+        return \"<dt>Sealed Class Hierarchy Graph:<\/dt>\"\n+                + \"<dd>\"\n+                + \"<a class=\\\"sealed-graph\\\" href=\\\"\" + imageFile + \"\\\">\"\n+                + getImage(simpleTypeName, imageFile, thumbnailHeight, false)\n+                + hoverImage\n+                + \"<\/a>\"\n+                + \"<\/dd>\";\n+    }\n+\n+    private static final String VERTICAL_ALIGN = \"vertical-align:top\";\n+    private static final String BORDER = \"border: solid lightgray 1px;\";\n+\n+    private String getImage(String typeName, String file, int height, boolean useBorder) {\n+        return String.format(\"<img style=\\\"%s\\\" alt=\\\"Sealed class hierarchy graph for %s\\\" src=\\\"%s\\\"%s>\",\n+                useBorder ? BORDER + \" \" + VERTICAL_ALIGN : VERTICAL_ALIGN,\n+                typeName,\n+                file,\n+                (height <= 0 ? \"\" : \" height=\\\"\" + height + \"\\\"\"));\n+    }\n+\n+    private static final class Renderer {\n+\n+        private Renderer() {\n+        }\n+\n+        \/\/ Generates a graph in DOT format\n+        static String graph(TypeElement rootClass, Set<String> exports) {\n+            final State state = new State(rootClass);\n+            traverse(state, rootClass, exports);\n+            return state.render();\n+        }\n+\n+        static void traverse(State state, TypeElement node, Set<String> exports) {\n+            state.addNode(node);\n+            for (TypeElement subNode : permittedSubclasses(node, exports)) {\n+                if (isInPublicApi(node, exports) && isInPublicApi(subNode, exports)) {\n+                    state.addEdge(node, subNode);\n+                }\n+                traverse(state, subNode, exports);\n+            }\n+        }\n+\n+        private static final class State {\n+\n+            private static final String LABEL = \"label\";\n+            private static final String TOOLTIP = \"tooltip\";\n+            private static final String STYLE = \"style\";\n+\n+            private final StringBuilder builder;\n+\n+            private final Map<String, Map<String, String>> nodeStyleMap;\n+\n+            public State(TypeElement rootNode) {\n+                nodeStyleMap = new LinkedHashMap<>();\n+                builder = new StringBuilder()\n+                        .append(\"digraph G {\")\n+                        .append(lineSeparator())\n+                        .append(\"  nodesep=0.500000;\")\n+                        .append(lineSeparator())\n+                        .append(\"  ranksep=0.600000;\")\n+                        .append(lineSeparator())\n+                        .append(\"  pencolor=transparent;\")\n+                        .append(lineSeparator())\n+                        .append(\"  node [shape=plaintext, fontcolor=\\\"#e76f00\\\", fontname=\\\"DejaVuSans\\\", fontsize=12, margin=\\\".2,.2\\\"];\")\n+                        .append(lineSeparator())\n+                        .append(\"  edge [penwidth=2, color=\\\"#999999\\\", arrowhead=open, arrowsize=1];\")\n+                        .append(lineSeparator())\n+                        .append(\"  rankdir=\\\"BT\\\";\")\n+                        .append(lineSeparator());\n+            }\n+\n+            public void addNode(TypeElement node) {\n+                var styles = nodeStyleMap.computeIfAbsent(id(node), n -> new LinkedHashMap<>());\n+                styles.put(LABEL, node.getSimpleName().toString());\n+                styles.put(TOOLTIP, node.getQualifiedName().toString());\n+                if (!(node.getModifiers().contains(Modifier.SEALED) || node.getModifiers().contains(Modifier.FINAL))) {\n+                    \/\/ This indicates that the hierarchy is not closed\n+                    styles.put(STYLE, \"dashed\");\n+                }\n+            }\n+\n+            public void addEdge(TypeElement node, TypeElement subNode) {\n+                builder.append(\"  \")\n+                        .append(quotedId(subNode))\n+                        .append(\" -> \")\n+                        .append(quotedId(node))\n+                        .append(\";\")\n+                        .append(lineSeparator());\n+            }\n+\n+            public String render() {\n+                nodeStyleMap.forEach((nodeName, styles) -> {\n+                    builder.append(\"  \")\n+                            .append('\"').append(nodeName).append(\"\\\" \")\n+                            .append(styles.entrySet().stream()\n+                                    .map(e -> e.getKey() + \"=\\\"\" + e.getValue() + \"\\\"\")\n+                                    .collect(Collectors.joining(\" \", \"[\", \"]\")))\n+                            .append(System.lineSeparator());\n+                });\n+                builder.append(\"}\");\n+                return builder.toString();\n+            }\n+\n+            private String id(TypeElement node) {\n+                return node.getQualifiedName().toString();\n+            }\n+\n+            private String quotedId(TypeElement node) {\n+                return \"\\\"\" + id(node) + \"\\\"\";\n+            }\n+\n+            private String simpleName(String name) {\n+                int lastDot = name.lastIndexOf('.');\n+                return lastDot < 0\n+                        ? name\n+                        : name.substring(lastDot);\n+            }\n+\n+        }\n+\n+        private static List<TypeElement> permittedSubclasses(TypeElement node, Set<String> exports) {\n+            return node.getPermittedSubclasses().stream()\n+                    .filter(DeclaredType.class::isInstance)\n+                    .map(DeclaredType.class::cast)\n+                    .map(DeclaredType::asElement)\n+                    .filter(TypeElement.class::isInstance)\n+                    .map(TypeElement.class::cast)\n+                    .filter(te -> isInPublicApi(te, exports))\n+                    .toList();\n+        }\n+\n+        private static boolean isInPublicApi(TypeElement typeElement, Set<String> exports) {\n+           return (exports.contains(packageName(typeElement.getQualifiedName().toString())) ||\n+                   exports.contains(packageName(typeElement.getSuperclass().toString()))) &&\n+                   typeElement.getModifiers().contains(Modifier.PUBLIC);\n+        }\n+\n+        private static String packageName(String name) {\n+            int lastDot = name.lastIndexOf('.');\n+            return lastDot < 0\n+                    ? \"\"\n+                    : name.substring(0, lastDot);\n+        }\n+    }\n+}\n+\n","filename":"make\/jdk\/src\/classes\/build\/tools\/taglet\/SealedGraph.java","additions":260,"deletions":0,"binary":false,"changes":260,"status":"added"},{"patch":"@@ -838,1 +838,1 @@\n-.module-graph span {\n+.module-graph span, .sealed-graph span {\n@@ -842,1 +842,1 @@\n-.module-graph:hover span {\n+.module-graph:hover span, .sealed-graph:hover span {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/resources\/stylesheet.css","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -145,0 +145,1 @@\n+        styleSheetNames.remove(\"sealed-graph\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/checkStylesheetClasses\/CheckStylesheetClasses.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}