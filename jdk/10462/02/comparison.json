{"files":[{"patch":"@@ -190,24 +190,0 @@\n-void Assembler::ret() {\n-  jalr(x0, x1, 0);\n-}\n-\n-#define INSN(NAME, REGISTER)                                      \\\n-  void Assembler::NAME(const address &dest, Register temp) {      \\\n-    assert_cond(dest != NULL);                                    \\\n-    assert(temp != noreg, \"temp must not be empty register!\");    \\\n-    int64_t distance = dest - pc();                               \\\n-    if (is_offset_in_range(distance, 32)) {                       \\\n-      auipc(temp, distance + 0x800);                              \\\n-      jalr(REGISTER, temp, ((int32_t)distance << 20) >> 20);      \\\n-    } else {                                                      \\\n-      int32_t offset = 0;                                         \\\n-      movptr(temp, dest, offset);                                 \\\n-      jalr(REGISTER, temp, offset);                               \\\n-    }                                                             \\\n-  }\n-\n-  INSN(call, x1);\n-  INSN(tail, x0);\n-\n-#undef INSN\n-\n@@ -235,2 +211,0 @@\n-  INSN(call, x1);\n-  INSN(tail, x0);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.cpp","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -305,1 +305,2 @@\n-      movptr(Rd, (address)(uintptr_t)adr.offset(), offset);\n+      offset = ((int32_t)adr.offset() << 20) >> 20;\n+      li(Rd, adr.offset() - offset);\n@@ -334,11 +335,0 @@\n-  void ret();\n-  void call(const address &dest, Register temp = t0);\n-  void call(const Address &adr, Register temp = t0);\n-  void tail(const address &dest, Register temp = t0);\n-  void tail(const Address &adr, Register temp = t0);\n-  void call(Label &l, Register temp) {\n-    call(target(l), temp);\n-  }\n-  void tail(Label &l, Register temp) {\n-    tail(target(l), temp);\n-  }\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -285,0 +285,1 @@\n+  address target = NULL;\n@@ -287,1 +288,1 @@\n-      __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong_narrow));\n+      target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong_narrow);\n@@ -289,1 +290,1 @@\n-      __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong));\n+      target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong);\n@@ -293,1 +294,1 @@\n-      __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow));\n+      target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow);\n@@ -295,1 +296,1 @@\n-      __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak));\n+      target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak);\n@@ -300,1 +301,1 @@\n-    __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak));\n+    target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak);\n@@ -302,1 +303,1 @@\n-  __ jalr(ra);\n+  __ call(target);\n@@ -682,0 +683,1 @@\n+  address target  = NULL;\n@@ -684,1 +686,1 @@\n-      __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong));\n+      target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong);\n@@ -687,1 +689,1 @@\n-        __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong_narrow));\n+        target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong_narrow);\n@@ -689,1 +691,1 @@\n-        __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong));\n+        target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong);\n@@ -695,1 +697,1 @@\n-      __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow));\n+      target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow);\n@@ -697,1 +699,1 @@\n-      __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak));\n+      target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak);\n@@ -702,1 +704,1 @@\n-    __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_phantom));\n+    target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_phantom);\n@@ -704,1 +706,1 @@\n-  __ jalr(ra);\n+  __ call(target);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.cpp","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -566,1 +566,0 @@\n-  int32_t offset = 0;\n@@ -568,2 +567,1 @@\n-  movptr(t0, entry_point, offset);\n-  jalr(x1, t0, offset);\n+  call(entry_point);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -530,1 +530,5 @@\n-  void mv(Register Rd, address addr)          { li(Rd, (int64_t)addr); }\n+  void mv(Register Rd, address addr)                  { li(Rd, (int64_t)addr); }\n+  void mv(Register Rd, address addr, int32_t &offset) {\n+    offset = ((int32_t)(uintptr_t)addr << 20) >> 20;\n+    li(Rd, (uintptr_t)addr - offset);\n+  }\n@@ -533,1 +537,1 @@\n-  inline void mv(Register Rd, T o)            { li(Rd, (int64_t)o); }\n+  inline void mv(Register Rd, T o)                    { li(Rd, (int64_t)o); }\n@@ -535,1 +539,1 @@\n-  inline void mvw(Register Rd, int32_t imm32) { mv(Rd, imm32); }\n+  inline void mvw(Register Rd, int32_t imm32)         { mv(Rd, imm32); }\n@@ -893,0 +897,12 @@\n+  void call(const address &dest, Register temp = t0) {\n+    assert_cond(dest != NULL);\n+    assert(temp != noreg, \"temp must not be empty register!\");\n+    int32_t offset = 0;\n+    mv(temp, dest, offset);\n+    jalr(x1, temp, offset);\n+  }\n+\n+  void ret() {\n+    jalr(x0, x1, 0);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -654,3 +654,1 @@\n-    int32_t offset = 0;\n-    __ movptr(t0, CAST_FROM_FN_PTR(address, MacroAssembler::debug64), offset);\n-    __ jalr(x1, t0, offset);\n+    __ call(CAST_FROM_FN_PTR(address, MacroAssembler::debug64));\n@@ -3743,3 +3741,1 @@\n-    int32_t offset = 0;\n-    __ movptr(t0, runtime_entry, offset);\n-    __ jalr(x1, t0, offset);\n+    __ call(runtime_entry);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -193,2 +193,1 @@\n-      __ mv(t0, fn);\n-      __ jalr(t0);\n+      __ call(fn);\n@@ -207,2 +206,1 @@\n-      __ mv(t0, fn);\n-      __ jalr(t0);\n+      __ call(fn);\n@@ -221,2 +219,1 @@\n-      __ mv(t0, fn);\n-      __ jalr(t0);\n+      __ call(fn);\n@@ -235,2 +232,1 @@\n-      __ mv(t0, fn);\n-      __ jalr(t0);\n+      __ call(fn);\n@@ -249,2 +245,1 @@\n-      __ mv(t0, fn);\n-      __ jalr(t0);\n+      __ call(fn);\n@@ -263,2 +258,1 @@\n-      __ mv(t0, fn);\n-      __ jalr(t0);\n+      __ call(fn);\n@@ -278,2 +272,1 @@\n-      __ mv(t0, fn);\n-      __ jalr(t0);\n+      __ call(fn);\n@@ -1172,2 +1165,1 @@\n-    __ mv(t1, CAST_FROM_FN_PTR(address, JavaThread::check_special_condition_for_native_trans));\n-    __ jalr(t1);\n+    __ call(CAST_FROM_FN_PTR(address, JavaThread::check_special_condition_for_native_trans));\n@@ -1222,2 +1214,1 @@\n-    __ mv(t1, CAST_FROM_FN_PTR(address, SharedRuntime::reguard_yellow_pages));\n-    __ jalr(t1);\n+    __ call(CAST_FROM_FN_PTR(address, SharedRuntime::reguard_yellow_pages));\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":9,"deletions":18,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -390,1 +390,1 @@\n-    __ movptr(rarg, Universe::the_null_sentinel_addr(), offset);\n+    __ mv(rarg, Universe::the_null_sentinel_addr(), offset);\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}