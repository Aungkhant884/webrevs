{"files":[{"patch":"@@ -119,25 +119,0 @@\n-void Assembler::li(Register Rd, int64_t imm, int32_t &offset) {\n-  \/\/ int64_t is in range 0x8000 0000 0000 0000 ~ 0x7fff ffff ffff ffff\n-  int shift = 12;\n-  int64_t upper = imm, lower = imm;\n-  \/\/ Split imm to a lower 12-bit sign-extended part and the remainder,\n-  \/\/ because addi will sign-extend the lower imm.\n-  lower = ((int32_t)imm << 20) >> 20;\n-  upper -= lower;\n-\n-  \/\/ Test whether imm is a 32-bit integer.\n-  if (!(((imm) & ~(int64_t)0x7fffffff) == 0 ||\n-        (((imm) & ~(int64_t)0x7fffffff) == ~(int64_t)0x7fffffff))) {\n-    while (((upper >> shift) & 1) == 0) { shift++; }\n-    upper >>= shift;\n-    li(Rd, upper);\n-    slli(Rd, Rd, shift);\n-  } else {\n-    \/\/ 32-bit integer\n-    if (upper != 0) {\n-      lui(Rd, (int32_t)upper);\n-    }\n-  }\n-  offset = lower;\n-}\n-\n@@ -215,18 +190,0 @@\n-void Assembler::ret() {\n-  jalr(x0, x1, 0);\n-}\n-\n-#define INSN(NAME, REGISTER)                                      \\\n-  void Assembler::NAME(const address &dest, Register temp) {      \\\n-    assert_cond(dest != NULL);                                    \\\n-    assert(temp != noreg, \"temp must not be empty register!\");    \\\n-    int32_t offset = 0;                                           \\\n-    li(temp, (uintptr_t)dest, offset);                            \\\n-    jalr(REGISTER, temp, offset);                                 \\\n-  }\n-\n-  INSN(call, x1);\n-  INSN(tail, x0);\n-\n-#undef INSN\n-\n@@ -254,2 +211,0 @@\n-  INSN(call, x1);\n-  INSN(tail, x0);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.cpp","additions":0,"deletions":45,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -305,1 +305,2 @@\n-      li(Rd, adr.offset(), offset);\n+      offset = ((int32_t)adr.offset() << 20) >> 20;\n+      li(Rd, adr.offset() - offset);\n@@ -321,1 +322,0 @@\n-  void li(Register Rd, int64_t imm, int32_t &offset);\n@@ -335,11 +335,0 @@\n-  void ret();\n-  void call(const address &dest, Register temp = t0);\n-  void call(const Address &adr, Register temp = t0);\n-  void tail(const address &dest, Register temp = t0);\n-  void tail(const Address &adr, Register temp = t0);\n-  void call(Label &l, Register temp) {\n-    call(target(l), temp);\n-  }\n-  void tail(Label &l, Register temp) {\n-    tail(target(l), temp);\n-  }\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -303,1 +303,1 @@\n-  __ call(target, ra);\n+  __ call(target);\n@@ -706,1 +706,1 @@\n-  __ call(target, ra);\n+  __ call(target);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -567,1 +567,1 @@\n-  call(entry_point, t0);\n+  call(entry_point);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -531,1 +531,4 @@\n-  void mv(Register Rd, address addr, int32_t &offset) { li(Rd, (int64_t)addr, offset); }\n+  void mv(Register Rd, address addr, int32_t &offset) {\n+    offset = ((int32_t)(uintptr_t)addr << 20) >> 20;\n+    li(Rd, (uintptr_t)addr - offset);\n+  }\n@@ -894,0 +897,12 @@\n+  void call(const address &dest, Register temp = t0) {\n+    assert_cond(dest != NULL);\n+    assert(temp != noreg, \"temp must not be empty register!\");\n+    int32_t offset = 0;\n+    mv(temp, dest, offset);\n+    jalr(x1, temp, offset);\n+  }\n+\n+  void ret() {\n+    jalr(x0, x1, 0);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -654,1 +654,1 @@\n-    __ call(CAST_FROM_FN_PTR(address, MacroAssembler::debug64), t0);\n+    __ call(CAST_FROM_FN_PTR(address, MacroAssembler::debug64));\n@@ -3741,1 +3741,1 @@\n-    __ call(runtime_entry, t0);\n+    __ call(runtime_entry);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-      __ call(fn, t0);\n+      __ call(fn);\n@@ -206,1 +206,1 @@\n-      __ call(fn, t0);\n+      __ call(fn);\n@@ -219,1 +219,1 @@\n-      __ call(fn, t0);\n+      __ call(fn);\n@@ -232,1 +232,1 @@\n-      __ call(fn, t0);\n+      __ call(fn);\n@@ -245,1 +245,1 @@\n-      __ call(fn, t0);\n+      __ call(fn);\n@@ -258,1 +258,1 @@\n-      __ call(fn, t0);\n+      __ call(fn);\n@@ -272,1 +272,1 @@\n-      __ call(fn, t0);\n+      __ call(fn);\n@@ -1165,1 +1165,1 @@\n-    __ call(CAST_FROM_FN_PTR(address, JavaThread::check_special_condition_for_native_trans), t1);\n+    __ call(CAST_FROM_FN_PTR(address, JavaThread::check_special_condition_for_native_trans));\n@@ -1214,1 +1214,1 @@\n-    __ call(CAST_FROM_FN_PTR(address, SharedRuntime::reguard_yellow_pages), t1);\n+    __ call(CAST_FROM_FN_PTR(address, SharedRuntime::reguard_yellow_pages));\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}