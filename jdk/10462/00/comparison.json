{"files":[{"patch":"@@ -119,0 +119,25 @@\n+void Assembler::li(Register Rd, int64_t imm, int32_t &offset) {\n+  \/\/ int64_t is in range 0x8000 0000 0000 0000 ~ 0x7fff ffff ffff ffff\n+  int shift = 12;\n+  int64_t upper = imm, lower = imm;\n+  \/\/ Split imm to a lower 12-bit sign-extended part and the remainder,\n+  \/\/ because addi will sign-extend the lower imm.\n+  lower = ((int32_t)imm << 20) >> 20;\n+  upper -= lower;\n+\n+  \/\/ Test whether imm is a 32-bit integer.\n+  if (!(((imm) & ~(int64_t)0x7fffffff) == 0 ||\n+        (((imm) & ~(int64_t)0x7fffffff) == ~(int64_t)0x7fffffff))) {\n+    while (((upper >> shift) & 1) == 0) { shift++; }\n+    upper >>= shift;\n+    li(Rd, upper);\n+    slli(Rd, Rd, shift);\n+  } else {\n+    \/\/ 32-bit integer\n+    if (upper != 0) {\n+      lui(Rd, (int32_t)upper);\n+    }\n+  }\n+  offset = lower;\n+}\n+\n@@ -204,1 +229,1 @@\n-      movptr(temp, dest, offset);                                 \\\n+      li(temp, (uintptr_t)dest, offset);                          \\\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.cpp","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -305,1 +305,1 @@\n-      movptr(Rd, (address)(uintptr_t)adr.offset(), offset);\n+      li(Rd, adr.offset(), offset);\n@@ -321,0 +321,1 @@\n+  void li(Register Rd, int64_t imm, int32_t &offset);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -285,0 +285,1 @@\n+  address target = NULL;\n@@ -287,1 +288,1 @@\n-      __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong_narrow));\n+      target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong_narrow);\n@@ -289,1 +290,1 @@\n-      __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong));\n+      target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong);\n@@ -293,1 +294,1 @@\n-      __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow));\n+      target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow);\n@@ -295,1 +296,1 @@\n-      __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak));\n+      target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak);\n@@ -300,1 +301,1 @@\n-    __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak));\n+    target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak);\n@@ -302,1 +303,1 @@\n-  __ jalr(ra);\n+  __ call(target, ra);\n@@ -682,0 +683,1 @@\n+  address target  = NULL;\n@@ -684,1 +686,1 @@\n-      __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong));\n+      target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong);\n@@ -687,1 +689,1 @@\n-        __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong_narrow));\n+        target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong_narrow);\n@@ -689,1 +691,1 @@\n-        __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong));\n+        target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong);\n@@ -695,1 +697,1 @@\n-      __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow));\n+      target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow);\n@@ -697,1 +699,1 @@\n-      __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak));\n+      target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak);\n@@ -702,1 +704,1 @@\n-    __ mv(ra, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_phantom));\n+    target = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_phantom);\n@@ -704,1 +706,1 @@\n-  __ jalr(ra);\n+  __ call(target, ra);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.cpp","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -566,1 +566,0 @@\n-  int32_t offset = 0;\n@@ -568,2 +567,1 @@\n-  movptr(t0, entry_point, offset);\n-  jalr(x1, t0, offset);\n+  call(entry_point, t0);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -530,1 +530,2 @@\n-  void mv(Register Rd, address addr)          { li(Rd, (int64_t)addr); }\n+  void mv(Register Rd, address addr)                  { li(Rd, (int64_t)addr); }\n+  void mv(Register Rd, address addr, int32_t &offset) { li(Rd, (int64_t)addr, offset); }\n@@ -533,1 +534,1 @@\n-  inline void mv(Register Rd, T o)            { li(Rd, (int64_t)o); }\n+  inline void mv(Register Rd, T o)                    { li(Rd, (int64_t)o); }\n@@ -535,1 +536,1 @@\n-  inline void mvw(Register Rd, int32_t imm32) { mv(Rd, imm32); }\n+  inline void mvw(Register Rd, int32_t imm32)         { mv(Rd, imm32); }\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -654,3 +654,1 @@\n-    int32_t offset = 0;\n-    __ movptr(t0, CAST_FROM_FN_PTR(address, MacroAssembler::debug64), offset);\n-    __ jalr(x1, t0, offset);\n+    __ call(CAST_FROM_FN_PTR(address, MacroAssembler::debug64), t0);\n@@ -3743,3 +3741,1 @@\n-    int32_t offset = 0;\n-    __ movptr(t0, runtime_entry, offset);\n-    __ jalr(x1, t0, offset);\n+    __ call(runtime_entry, t0);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -193,2 +193,1 @@\n-      __ mv(t0, fn);\n-      __ jalr(t0);\n+      __ call(fn, t0);\n@@ -207,2 +206,1 @@\n-      __ mv(t0, fn);\n-      __ jalr(t0);\n+      __ call(fn, t0);\n@@ -221,2 +219,1 @@\n-      __ mv(t0, fn);\n-      __ jalr(t0);\n+      __ call(fn, t0);\n@@ -235,2 +232,1 @@\n-      __ mv(t0, fn);\n-      __ jalr(t0);\n+      __ call(fn, t0);\n@@ -249,2 +245,1 @@\n-      __ mv(t0, fn);\n-      __ jalr(t0);\n+      __ call(fn, t0);\n@@ -263,2 +258,1 @@\n-      __ mv(t0, fn);\n-      __ jalr(t0);\n+      __ call(fn, t0);\n@@ -278,2 +272,1 @@\n-      __ mv(t0, fn);\n-      __ jalr(t0);\n+      __ call(fn, t0);\n@@ -1172,2 +1165,1 @@\n-    __ mv(t1, CAST_FROM_FN_PTR(address, JavaThread::check_special_condition_for_native_trans));\n-    __ jalr(t1);\n+    __ call(CAST_FROM_FN_PTR(address, JavaThread::check_special_condition_for_native_trans), t1);\n@@ -1222,2 +1214,1 @@\n-    __ mv(t1, CAST_FROM_FN_PTR(address, SharedRuntime::reguard_yellow_pages));\n-    __ jalr(t1);\n+    __ call(CAST_FROM_FN_PTR(address, SharedRuntime::reguard_yellow_pages), t1);\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":9,"deletions":18,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -390,1 +390,1 @@\n-    __ movptr(rarg, Universe::the_null_sentinel_addr(), offset);\n+    __ mv(rarg, Universe::the_null_sentinel_addr(), offset);\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}