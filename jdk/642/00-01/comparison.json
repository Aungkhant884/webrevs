{"files":[{"patch":"@@ -44,2 +44,2 @@\n-  bool is_hidden_from_external_view() const      { return true; }\n-  bool is_monitor_deflation_thread() const       { return true; }\n+  bool is_hidden_from_external_view() const { return true; }\n+  bool is_monitor_deflation_thread() const { return true; }\n","filename":"src\/hotspot\/share\/runtime\/monitorDeflationThread.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-  \/\/ its the cache line with _header.\n+  \/\/ its cache line with _header.\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,2 +60,3 @@\n-  for (;;) {\n-    ObjectMonitor* head = Atomic::load(&_head);\n+  ObjectMonitor* head;\n+  do {\n+    head = Atomic::load(&_head);\n@@ -63,4 +64,2 @@\n-    if (Atomic::cmpxchg(&_head, head, m) == head) {\n-      break;\n-    }\n-  }\n+  } while (Atomic::cmpxchg(&_head, head, m) != head);\n+\n@@ -221,1 +220,1 @@\n-\/\/ Start the ceiling with one thread:\n+\/\/ Start the ceiling with the estimate for one thread:\n@@ -1501,2 +1500,5 @@\n-        ls->print_cr(\"before handshaking: unlinked_count=\" SIZE_FORMAT \", in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n-                     unlinked_count, in_use_list_ceiling(), _in_use_list.count(), _in_use_list.max());\n+        ls->print_cr(\"before handshaking: unlinked_count=\" SIZE_FORMAT\n+                     \", in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\"\n+                     SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+                     unlinked_count, in_use_list_ceiling(),\n+                     _in_use_list.count(), _in_use_list.max());\n@@ -1511,1 +1513,2 @@\n-        ls->print_cr(\"after handshaking: in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+        ls->print_cr(\"after handshaking: in_use_list stats: ceiling=\"\n+                     SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -173,0 +173,10 @@\n+  \/\/ The ratio of the current _in_use_list count to the ceiling is used\n+  \/\/ to determine if we are above MonitorUsedDeflationThreshold and need\n+  \/\/ to do an async monitor deflation cycle. The ceiling is increased by\n+  \/\/ AvgMonitorsPerThreadEstimate when a thread is added to the system\n+  \/\/ and is decreased by AvgMonitorsPerThreadEstimate when a thread is\n+  \/\/ removed from the system.\n+  \/\/ Note: If the _in_use_list max exceeds the ceiling, then\n+  \/\/ monitors_used_above_threshold() will use the in_use_list max instead\n+  \/\/ of the thread count derived ceiling because we have used more\n+  \/\/ ObjectMonitors than the estimated average.\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}