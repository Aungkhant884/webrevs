{"files":[{"patch":"@@ -125,17 +125,5 @@\n-    if (self->is_Java_thread() &&\n-        SafepointMechanism::should_process(self->as_Java_thread())) {\n-      \/\/ A safepoint\/handshake has started.\n-      if (ls != NULL) {\n-        timer_p->stop();\n-        ls->print_cr(\"pausing unlinking: unlinked_count=\" SIZE_FORMAT \", in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n-                     unlinked_count, ObjectSynchronizer::in_use_list_ceiling(), count(), max());\n-      }\n-\n-      \/\/ Honor block request.\n-      ThreadBlockInVM tbivm(self->as_Java_thread());\n-\n-      if (ls != NULL) {\n-        ls->print_cr(\"resuming unlinking: in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n-                     ObjectSynchronizer::in_use_list_ceiling(), count(), max());\n-        timer_p->start();\n-      }\n+    if (self->is_Java_thread()) {\n+      \/\/ A JavaThread must check for a safepoint\/handshake and honor it.\n+      ObjectSynchronizer::chk_for_block_req(self->as_Java_thread(), \"unlinking\",\n+                                            \"unlinked_count\", unlinked_count,\n+                                            ls, timer_p);\n@@ -1408,0 +1396,27 @@\n+void ObjectSynchronizer::chk_for_block_req(JavaThread* self, const char* op_name,\n+                                           const char* cnt_name, size_t cnt,\n+                                           LogStream* ls, elapsedTimer* timer_p) {\n+  if (!SafepointMechanism::should_process(self)) {\n+    return;\n+  }\n+\n+  \/\/ A safepoint\/handshake has started.\n+  if (ls != NULL) {\n+    timer_p->stop();\n+    ls->print_cr(\"pausing %s: %s=\" SIZE_FORMAT \", in_use_list stats: ceiling=\"\n+                 SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+                 op_name, cnt_name, cnt, in_use_list_ceiling(),\n+                 _in_use_list.count(), _in_use_list.max());\n+  }\n+\n+  \/\/ Honor block request.\n+  ThreadBlockInVM tbivm(self);\n+\n+  if (ls != NULL) {\n+    ls->print_cr(\"resuming %s: in_use_list stats: ceiling=\" SIZE_FORMAT\n+                 \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT, op_name,\n+                 in_use_list_ceiling(), _in_use_list.count(), _in_use_list.max());\n+    timer_p->start();\n+  }\n+}\n+\n@@ -1424,17 +1439,4 @@\n-    if (self->is_Java_thread() &&\n-        SafepointMechanism::should_process(self->as_Java_thread())) {\n-      \/\/ A safepoint\/handshake has started.\n-      if (ls != NULL) {\n-        timer_p->stop();\n-        ls->print_cr(\"pausing deflation: deflated_count=\" SIZE_FORMAT \", in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n-                     deflated_count, in_use_list_ceiling(), _in_use_list.count(), _in_use_list.max());\n-      }\n-\n-      \/\/ Honor block request.\n-      ThreadBlockInVM tbivm(self->as_Java_thread());\n-\n-      if (ls != NULL) {\n-        ls->print_cr(\"resuming deflation: in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n-                     in_use_list_ceiling(), _in_use_list.count(), _in_use_list.max());\n-        timer_p->start();\n-      }\n+    if (self->is_Java_thread()) {\n+      \/\/ A JavaThread must check for a safepoint\/handshake and honor it.\n+      chk_for_block_req(self->as_Java_thread(), \"deflation\", \"deflated_count\",\n+                        deflated_count, ls, timer_p);\n@@ -1526,8 +1528,0 @@\n-      if (self->is_Java_thread() &&\n-          SafepointMechanism::should_process(self->as_Java_thread())) {\n-        \/\/ A safepoint\/handshake has started.\n-        if (ls != NULL) {\n-          timer.stop();\n-          ls->print_cr(\"pausing deletion: deleted_count=\" SIZE_FORMAT \", in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n-                       deleted_count, in_use_list_ceiling(), _in_use_list.count(), _in_use_list.max());\n-        }\n@@ -1535,8 +1529,4 @@\n-        \/\/ Honor block request.\n-        ThreadBlockInVM tbivm(self->as_Java_thread());\n-\n-        if (ls != NULL) {\n-          ls->print_cr(\"resuming deletion: in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n-                       in_use_list_ceiling(), _in_use_list.count(), _in_use_list.max());\n-          timer.start();\n-        }\n+      if (self->is_Java_thread()) {\n+        \/\/ A JavaThread must check for a safepoint\/handshake and honor it.\n+        chk_for_block_req(self->as_Java_thread(), \"deletion\", \"deleted_count\",\n+                          deleted_count, ls, &timer);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":40,"deletions":50,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -147,0 +147,3 @@\n+  static void chk_for_block_req(JavaThread* self, const char* op_name,\n+                                const char* cnt_name, size_t cnt, LogStream* ls,\n+                                elapsedTimer* timer_p);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}