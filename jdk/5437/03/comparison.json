{"files":[{"patch":"@@ -248,0 +248,1 @@\n+    virtual jlong pids_current() = 0;\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -269,0 +269,15 @@\n+\n+\/* pids_current\n+ *\n+ * The number of tasks currently in the cgroup (and its descendants) of the process\n+ *\n+ * return:\n+ *    current number of tasks\n+ *    OSCONTAINER_ERROR for not supported\n+ *\/\n+jlong CgroupV1Subsystem::pids_current() {\n+  if (_pids == NULL) return OSCONTAINER_ERROR;\n+  GET_CONTAINER_INFO(jlong, _pids, \"\/pids.current\",\n+                     \"Current number of tasks is: \" JLONG_FORMAT, JLONG_FORMAT, pids_current);\n+  return pids_current;\n+}\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -91,0 +91,1 @@\n+    jlong pids_current();\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -252,0 +252,13 @@\n+\/* pids_current\n+ *\n+ * The number of tasks currently in the cgroup (and its descendants) of the process\n+ *\n+ * return:\n+ *    current number of tasks\n+ *    OSCONTAINER_ERROR for not supported\n+ *\/\n+jlong CgroupV2Subsystem::pids_current() {\n+  GET_CONTAINER_INFO(jlong, _unified, \"\/pids.current\",\n+                     \"Current number of tasks is: \" JLONG_FORMAT, JLONG_FORMAT, pids_current);\n+  return pids_current;\n+}\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -83,0 +83,1 @@\n+    jlong pids_current();\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -137,0 +137,5 @@\n+\n+jlong OSContainer::pids_current() {\n+  assert(cgroup_subsystem != NULL, \"cgroup subsystem not available\");\n+  return cgroup_subsystem->pids_current();\n+}\n","filename":"src\/hotspot\/os\/linux\/osContainer_linux.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+  static jlong pids_current();\n","filename":"src\/hotspot\/os\/linux\/osContainer_linux.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2330,0 +2330,10 @@\n+  j = OSContainer::OSContainer::pids_current();\n+  st->print(\"current number of tasks: \");\n+  if (j > 0) {\n+    st->print_cr(JLONG_FORMAT, j);\n+  } else {\n+    if (j == OSCONTAINER_ERROR) {\n+      st->print_cr(\"not supported\");\n+    }\n+  }\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Red Hat Inc.\n+ * Copyright (c) 2020, 2021, Red Hat Inc.\n@@ -157,0 +157,5 @@\n+    @Override\n+    public long getPidsCurrent() {\n+        return subsystem.getPidsCurrent();\n+    }\n+\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupMetrics.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -419,0 +419,4 @@\n+    public long getPidsCurrent() {\n+        return getLongValue(pids, \"pids.current\");\n+    }\n+\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv1\/CgroupV1Subsystem.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -314,0 +314,5 @@\n+    @Override\n+    public long getPidsCurrent() {\n+        return getLongVal(\"pids.current\");\n+    }\n+\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv2\/CgroupV2Subsystem.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -368,0 +368,8 @@\n+    \/**\n+     * Returns the current number of tasks in the Isolation Group.\n+     *\n+     * @return The current number of tasks or -2 if not supported\n+     *\n+     *\/\n+    public long getPidsCurrent();\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/platform\/Metrics.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -109,1 +109,2 @@\n-            \"maximum number of tasks\"\n+            \"maximum number of tasks\",\n+            \"current number of tasks\"\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMisc.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+    static final String warning_kernel_no_pids_support = \"WARNING: Your kernel does not support pids limit capabilities\";\n+\n@@ -86,1 +88,1 @@\n-            if (line.contains(\"WARNING: Your kernel does not support pids limit capabilities\")) {\n+            if (line.contains(warning_kernel_no_pids_support)) {\n@@ -96,0 +98,11 @@\n+                if (expectedValue.equals(\"any_integer\")) {\n+                    Asserts.assertEquals(parts.length, 2);\n+                    String ivalue = parts[1].replaceAll(\"\\\\s\",\"\");\n+                    try {\n+                        int ai = Integer.parseInt(ivalue);\n+                        System.out.println(\"Found \" + lineMarker + \" with value: \" + ai + \". PASS.\");\n+                    } catch (NumberFormatException ex) {\n+                        throw new RuntimeException(\"Could not convert \" + ivalue + \" to an integer, log line was \" + line);\n+                    }\n+                    break;\n+                }\n@@ -140,0 +153,2 @@\n+        \/\/ current number of tasks value is hard to predict, so better expect no value\n+        checkResult(lines, \"Current number of tasks is: \", \"any_integer\");\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestPids.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"}]}