[{"commit":{"message":"Update benchmark to avoid potential optimization"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/StoreMaskTrueCount.java"}],"sha":"567f69a2809a314cc59a0e0e5573bd2312ac00f8"},{"commit":{"message":"Merge branch 'openjdk:master' into optimize_truecount_neon"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java"}],"sha":"49e35b63bbf918c8c1f862812f7d190ca9175dba"},{"commit":{"message":"8307795: AArch64: Optimize VectorMask.truecount() on Neon\n\nIn Vector API Java level, vector mask is represented as a boolean array\nwith 0x00\/0x01 (8 bits of each element) as values, aka in-memory format.\nWhen it is loaded into vector register, e.g. Neon, the in-memory format\nwill be converted to in-register format with 0\/-1 value for each lane\n(lane width aligned to its type) by VectorLoadMask [4] operation, and\nconvert back to in-memory format by VectorStoreMask[2]. In Neon, a\ntypical VectorStoreMask operation will first narrow given vector\nregisters by xtn insn into byte element type, and then do a vector\nnegate to convert to 0x00\/0x01 value for each element.\n\nFor most of the vector mask operations, the input mask is in-register\nformat. And a vector mask also works in-register format all through\nthe compilation. But for some operations like VectorMask.trueCount()[3]\nwhich counts the elements of true value, the expected input mask is\nin-memory format. So a VectorStoreMask [2] is generated to convert the\nmask from in-register format to in-memory format before those operations.\n\nHowever, for trueCount() these xtn instructions in VectorStoreMask can\nbe saved, since the narrowing operations will not influence the number\nof active lane (value of 0x01) of its input.\n\nThis patch adds an optimized rule\n`VectorMaskTrueCount (VectorStoreMask mask)` to save the unnecessary\nnarrowing operations.\n\nFor example,\n\n```\nvar m = VectorMask.fromArray(IntVector.SPECIES_PREFERRED, ba, 0);\nm.not().trueCount();\n```\n\nwill produce following assembly on a Neon machine before this patch:\n\n```\n...\nmvn     v16.16b, v16.16b           \/\/ VectorMask.not()\nxtn     v16.4h, v16.4s\nxtn     v16.8b, v16.8h\nneg     v16.8b, v16.8b             \/\/ VectorStoreMask\naddv    b17, v16.8b\numov    w0, v17.b[0]               \/\/ VectorMask.trueCount()\n...\n```\n\nAfter this patch:\n\n```\n...\nmvn     v16.16b, v16.16b           \/\/ VectorMask.not()\naddv    s17, v16.4s\nsmov    x0, v17.b[0]\nneg     x0, x0                     \/\/ Optimized VectorMask.trueCount()\n...\n```\n\nIn this case, we can save two xtn insns.\n\nPerformance:\n\nBenchmark     Before            After             Unit\ntestInt       723.822 ± 1.029 1182.375 ± 12.363 ops\/ms\ntestLong      632.154 ± 0.197 1382.74 ± 2.188   ops\/ms\ntestShort     788.665 ± 1.852 1152.38 ± 3.77  ops\/ms\n\n[1]: https:\/\/developer.arm.com\/documentation\/dui0801\/h\/A64-SIMD-Vector-Instructions\/XTN--XTN2--vector-\n[2]: https:\/\/github.com\/openjdk\/jdk\/blob\/f968da97a5a5c68c28ad29d13fdfbe3a4adf5ef7\/src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad#L4841\n[3]: https:\/\/docs.oracle.com\/en\/java\/javase\/16\/docs\/api\/jdk.incubator.vector\/jdk\/incubator\/vector\/VectorMask.html#trueCount()\n[4]: https:\/\/github.com\/openjdk\/jdk\/blob\/e1e758a7b43c29840296d337bd2f0213ab0ca3c9\/src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad#L4740"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorMaskTrueCount.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/StoreMaskTrueCount.java"}],"sha":"b0eb53247640a2b211f446ca6e85eace99c1cd2d"}]