{"files":[{"patch":"@@ -3044,0 +3044,1 @@\n+  policy()->decide_on_concurrent_start_pause();\n@@ -3047,1 +3048,1 @@\n-  bool should_start_concurrent_mark_operation = policy()->decide_on_concurrent_start_pause();\n+  bool should_start_concurrent_mark_operation = collector_state()->in_concurrent_start_gc();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1049,1 +1049,1 @@\n-bool G1Policy::decide_on_concurrent_start_pause() {\n+void G1Policy::decide_on_concurrent_start_pause() {\n@@ -1062,1 +1062,1 @@\n-    return false;\n+    return;\n@@ -1119,2 +1119,0 @@\n-\n-  return collector_state()->in_concurrent_start_gc();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -377,7 +377,6 @@\n-  \/\/ pause. This must be called at the very beginning of an evacuation pause.\n-  \/\/ If initiate_conc_mark_if_possible() is true, and the concurrent\n-  \/\/ marking thread has completed its work for the previous cycle, and we are\n-  \/\/ not shutting down the VM this method will return that this should be a\n-  \/\/ concurrent start pause.\n-  \/\/ It also updates the collector state accordingly.\n-  bool decide_on_concurrent_start_pause();\n+  \/\/ pause and update the collector state accordingly.\n+  \/\/ We decide on a concurrent start pause if initiate_conc_mark_if_possible() is\n+  \/\/ true, the concurrent marking thread has completed its work for the previous\n+  \/\/ cycle, and we are not shutting down the VM.\n+  \/\/ This must be called at the very beginning of an evacuation pause.\n+  void decide_on_concurrent_start_pause();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"}]}