{"files":[{"patch":"@@ -1154,1 +1154,1 @@\n-  if (!n->is_If() || n->is_CountedLoopEnd()) {\n+  if (!n->is_If() || n->is_BaseCountedLoopEnd()) {\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8260407\n+ * @summary cmp != __null && cmp->Opcode() == Op_CmpL failure with -XX:StressLongCountedLoop=200000000 in lucene\n+ *\n+ * @run main\/othervm -XX:-BackgroundCompilation TestLongCountedLoopSplitIf\n+ *\n+ *\/\n+\n+public class TestLongCountedLoopSplitIf {\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 20_000; i++) {\n+            test(0, 100);\n+            test_helper(100, 0, 0);\n+        }\n+    }\n+\n+    private static float test(long start, long stop) {\n+        for (int i = 0; i < 10; i++) {\n+            for (int j = 0; j < 10; j++) {\n+            }\n+        }\n+        float res = 1;\n+\n+        long l = start;\n+\n+        for (; ; ) {\n+            res = test_helper(l, stop, res);\n+            if (shouldStop(l, stop)) {\n+                break;\n+            }\n+            l++;\n+        }\n+        return res;\n+    }\n+\n+    private static boolean shouldStop(long l, long stop) {\n+        return l >= stop;\n+    }\n+\n+    private static float test_helper(long l, long stop, float res) {\n+        if (l < stop) {\n+            res += l;\n+        } else {\n+            res *= l;\n+        }\n+        return res;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/longcountedloops\/TestLongCountedLoopSplitIf.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}