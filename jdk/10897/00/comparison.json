{"files":[{"patch":"@@ -340,0 +340,11 @@\n+        \/* if any of the inference vars is a captured variable bail out, this is because\n+         * we could end up generating more than necessary captured variables in an outer\n+         * inference context and then when we need to propagate back to an inner inference\n+         * context that has been minimized it could be that some bounds constraints doesn't\n+         * hold like subtyping constraints between bonds etc.\n+         *\/\n+        for (Type iv : inferencevars) {\n+            if (iv.hasTag(TypeTag.TYPEVAR) && ((TypeVar)iv).isCaptured()) {\n+                return this;\n+            }\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/InferenceContext.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8232933\n+ * @summary Javac inferred type does not conform to equality constraint\n+ * @compile DontMinimizeInfContextTest.java\n+ *\/\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+class DontMinimizeInfContextTest {\n+    void m() {\n+        List<? extends A<?, ?>> a = new LinkedList<>();\n+        Map<String, List<A<?, ?>>> b = a.stream().collect(\n+                Collectors.groupingBy(A::getval, Collectors.toList())\n+        );\n+    }\n+\n+    class A<K, V> {\n+        String getval() {\n+            return \"s\";\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/inference_context_min\/DontMinimizeInfContextTest.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"}]}