{"files":[{"patch":"@@ -1080,6 +1080,0 @@\n-\/\/ Just marks the methods in this class as needing deoptimization\n-void CodeCache::mark_for_evol_deoptimization(InstanceKlass* dependee) {\n-  assert(SafepointSynchronize::is_at_safepoint(), \"Can only do this at a safepoint!\");\n-}\n-\n-\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -274,1 +274,0 @@\n-  static void mark_for_evol_deoptimization(InstanceKlass* dependee);\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4071,1 +4071,1 @@\n-\/\/ Deoptimize all compiled code that depends on this class.\n+\/\/ Deoptimize all compiled code that depends on the classes redefined.\n@@ -4087,12 +4087,0 @@\n-\/\/ First step is to walk the code cache for each class redefined and mark\n-\/\/ dependent methods.  Wait until all classes are processed to deoptimize everything.\n-void VM_RedefineClasses::mark_dependent_code(InstanceKlass* ik) {\n-  assert_locked_or_safepoint(Compile_lock);\n-\n-  \/\/ All dependencies have been recorded from startup or this is a second or\n-  \/\/ subsequent use of RedefineClasses\n-  if (JvmtiExport::all_dependencies_are_recorded()) {\n-    CodeCache::mark_for_evol_deoptimization(ik);\n-  }\n-}\n-\n@@ -4223,3 +4211,0 @@\n-\n-  \/\/ Mark all compiled code that depends on this class\n-  mark_dependent_code(the_class);\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -496,1 +496,0 @@\n-  void mark_dependent_code(InstanceKlass* ik);\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}