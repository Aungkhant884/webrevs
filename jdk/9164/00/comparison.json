{"files":[{"patch":"@@ -50,0 +50,1 @@\n+        public static final String WARNING_REGION_WITH_MULTIPLE_SUCCS = \"Region with multiple successors\";\n@@ -57,0 +58,1 @@\n+        public static final String WARNING_CFG_WITHOUT_SUCCESSORS = \"CFG node without control successors\";\n@@ -328,1 +330,0 @@\n-            connectOrphansAndWidows();\n@@ -469,0 +470,3 @@\n+        \/\/ Schedule non-CFG, reachable nodes without block. CFG nodes should\n+        \/\/ have been all scheduled by buildBlocks, otherwise it means they are\n+        \/\/ control-unreachable and they should remain unscheduled.\n@@ -471,1 +475,1 @@\n-            if (n.block == null && reachable.contains(n)) {\n+            if (n.block == null && reachable.contains(n) && !n.isCFG) {\n@@ -498,11 +502,0 @@\n-        Set<Node> curReachable = new HashSet<>(reachable);\n-        for (Node n : curReachable) {\n-            if (n.block != null) {\n-                for (Node s : n.succs) {\n-                    if (!reachable.contains(s)) {\n-                        markWithBlock(s, n.block, reachable);\n-                    }\n-                }\n-            }\n-        }\n-\n@@ -545,30 +538,0 @@\n-    private void markWithBlock(Node n, InputBlock b, Set<Node> reachable) {\n-        assert !reachable.contains(n);\n-        Stack<Node> stack = new Stack<>();\n-        stack.push(n);\n-        n.block = b;\n-        b.addNode(n.inputNode.getId());\n-        reachable.add(n);\n-\n-        while (!stack.isEmpty()) {\n-            Node cur = stack.pop();\n-            for (Node s : cur.succs) {\n-                if (!reachable.contains(s)) {\n-                    reachable.add(s);\n-                    s.block = b;\n-                    b.addNode(s.inputNode.getId());\n-                    stack.push(s);\n-                }\n-            }\n-\n-            for (Node s : cur.preds) {\n-                if (!reachable.contains(s)) {\n-                    reachable.add(s);\n-                    s.block = b;\n-                    b.addNode(s.inputNode.getId());\n-                    stack.push(s);\n-                }\n-            }\n-        }\n-    }\n-\n@@ -846,37 +809,0 @@\n-    \/\/ Fix ill-formed graphs with orphan\/widow control-flow nodes by adding\n-    \/\/ edges from\/to the Root node. Such edges are assumed by different parts of\n-    \/\/ the scheduling algorithm, but are not always present, e.g. for certain\n-    \/\/ 'Safepoint' nodes in the 'Before RemoveUseless' phase.\n-    public void connectOrphansAndWidows() {\n-        Node root = findRoot();\n-        if (root == null) {\n-            return;\n-        }\n-        for (Node n : nodes) {\n-            if (n.isCFG) {\n-                boolean orphan = true;\n-                for (Node p : n.preds) {\n-                    if (p != n && p.isCFG) {\n-                        orphan = false;\n-                    }\n-                }\n-                if (orphan) {\n-                    \/\/ Add edge from root to this node.\n-                    root.succs.add(n);\n-                    n.preds.add(0, root);\n-                }\n-                boolean widow = true;\n-                for (Node s : n.succs) {\n-                    if (s != n && s.isCFG) {\n-                        widow = false;\n-                    }\n-                }\n-                if (widow) {\n-                    \/\/ Add edge from this node to root.\n-                    root.preds.add(n);\n-                    n.succs.add(root);\n-                }\n-            }\n-        }\n-    }\n-\n@@ -892,0 +818,6 @@\n+            if (isRegion(n) && controlSuccs.get(n).size() > 1) {\n+                n.addWarning(Node.WARNING_REGION_WITH_MULTIPLE_SUCCS);\n+            }\n+            if (n.isCFG && controlSuccs.get(n).isEmpty()) {\n+                n.addWarning(Node.WARNING_CFG_WITHOUT_SUCCESSORS);\n+            }\n","filename":"src\/utils\/IdealGraphVisualizer\/ServerCompiler\/src\/main\/java\/com\/sun\/hotspot\/igv\/servercompiler\/ServerCompilerScheduler.java","additions":12,"deletions":80,"binary":false,"changes":92,"status":"modified"}]}