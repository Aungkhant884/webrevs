{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import java.net.UnixDomainSocketAddress;\n@@ -47,0 +48,1 @@\n+import static java.net.StandardProtocolFamily.UNIX;\n@@ -70,0 +72,1 @@\n+        private final boolean preferUnixDomain;\n@@ -74,1 +77,1 @@\n-        private Initializer(SelectorProvider sp) {\n+        private Initializer(SelectorProvider sp, boolean preferUnixDomain) {\n@@ -76,0 +79,1 @@\n+            this.preferUnixDomain = preferUnixDomain;\n@@ -123,1 +127,1 @@\n-                            ssc = createListener();\n+                            ssc = createListener(preferUnixDomain);\n@@ -165,0 +169,3 @@\n+                        if (sa instanceof UnixDomainSocketAddress uaddr) {\n+                            Files.deleteIfExists(uaddr.getPath());\n+                        }\n@@ -172,1 +179,1 @@\n-     * Creates a Pipe implementation that supports buffering.\n+     * Creates a (TCP) Pipe implementation that supports buffering.\n@@ -175,1 +182,1 @@\n-        this(sp, true);\n+        this(sp, true, false);\n@@ -179,1 +186,5 @@\n-     * Creates Pipe implementation that supports optionally buffering.\n+     * Creates Pipe implementation that supports optionally buffering\n+     * and is TCP by default, but if Unix domain is supported and\n+     * preferAfUnix is true, then Unix domain sockets are used.\n+     *\n+     * @param preferAfUnix use Unix domain sockets if supported\n@@ -181,2 +192,1 @@\n-     * @implNote Uses a loopback connection. When buffering is\n-     * disabled then it sets TCP_NODELAY on the sink channel.\n+     * @param buffering if false set TCP_NODELAY on TCP sockets\n@@ -185,2 +195,2 @@\n-    PipeImpl(SelectorProvider sp, boolean buffering) throws IOException {\n-        Initializer initializer = new Initializer(sp);\n+    PipeImpl(SelectorProvider sp, boolean preferAfUnix, boolean buffering) throws IOException {\n+        Initializer initializer = new Initializer(sp, preferAfUnix);\n@@ -208,2 +218,13 @@\n-    private static ServerSocketChannel createListener() throws IOException {\n-        ServerSocketChannel listener = ServerSocketChannel.open();\n+    private static ServerSocketChannel createListener(boolean preferUnixDomain) throws IOException {\n+        ServerSocketChannel listener = null;\n+        if (preferUnixDomain && UnixDomainSockets.isSupported()) {\n+            try {\n+                listener = ServerSocketChannel.open(UNIX);\n+                listener.bind(null);\n+                return listener;\n+            } catch (IOException | UnsupportedOperationException e) {\n+                if (listener != null)\n+                    listener.close();\n+            }\n+        }\n+        listener = ServerSocketChannel.open();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/PipeImpl.java","additions":32,"deletions":11,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-            this.pipe = new PipeImpl(sp, \/*buffering*\/ false);\n+            this.pipe = new PipeImpl(sp, \/* AF_UNIX *\/ true, \/*buffering*\/ false);\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WEPollSelectorImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-        wakeupPipe = new PipeImpl(sp, false);\n+        wakeupPipe = new PipeImpl(sp, \/* AF_UNIX *\/ true, \/*buffering*\/ false);\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/WindowsSelectorImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}