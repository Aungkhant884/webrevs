{"files":[{"patch":"@@ -167,8 +167,15 @@\n-        BigInteger p = null;\n-        int i = 0;\n-        while (i++ < 10*lp) {\n-            BigInteger tmpP = BigInteger.probablePrime(lp, random);\n-            if ((!useNew || tmpP.compareTo(minValue) == 1) &&\n-                    isRelativePrime(e, tmpP.subtract(ONE))) {\n-                p = tmpP;\n-                break;\n+        while (true) {\n+            BigInteger p = null;\n+            BigInteger q = null;\n+\n+            int i = 0;\n+            while (i++ < 10*lp) {\n+                BigInteger tmpP = BigInteger.probablePrime(lp, random);\n+                if ((!useNew || tmpP.compareTo(minValue) == 1) &&\n+                        isRelativePrime(e, tmpP.subtract(ONE))) {\n+                    p = tmpP;\n+                    break;\n+                }\n+            }\n+            if (p == null) {\n+                throw new ProviderException(\"Cannot find prime P\");\n@@ -176,4 +183,0 @@\n-        }\n-        if (p == null) {\n-            throw new ProviderException(\"Cannot find prime P\");\n-        }\n@@ -181,19 +184,11 @@\n-        BigInteger q = null;\n-        i = 0;\n-\n-        while (i++ < 20*lq) {\n-            BigInteger tmpQ = BigInteger.probablePrime(lq, random);\n-\n-            if ((!useNew || tmpQ.compareTo(minValue) == 1) &&\n-                    (p.subtract(tmpQ).abs().compareTo\n-                            (TWO.pow(pqDiffSize)) == 1) &&\n-                    isRelativePrime(e, tmpQ.subtract(ONE))) {\n-                q = tmpQ;\n-                BigInteger n = p.multiply(q);\n-                if (!useNew && n.bitLength() != keySize) {\n-                    \/\/ regenerate Q if n is not the right length\n-                    continue;\n-                }\n-                KeyPair kp = createKeyPair(type, keyParams, n, e, p, q);\n-                if (kp != null) {\n-                    return kp;\n+            i = 0;\n+\n+            while (i++ < 20*lq) {\n+                BigInteger tmpQ = BigInteger.probablePrime(lq, random);\n+\n+                if ((!useNew || tmpQ.compareTo(minValue) == 1) &&\n+                        (p.subtract(tmpQ).abs().compareTo\n+                                (TWO.pow(pqDiffSize)) == 1) &&\n+                        isRelativePrime(e, tmpQ.subtract(ONE))) {\n+                    q = tmpQ;\n+                    break;\n@@ -202,0 +197,14 @@\n+            if (q == null) {\n+                throw new ProviderException(\"Cannot find prime Q\");\n+            }\n+\n+            BigInteger n = p.multiply(q);\n+            if (n.bitLength() != keySize) {\n+                \/\/ regenerate P, Q if n is not the right length; should\n+                \/\/ never happen for the new case but check it anyway\n+                continue;\n+            }\n+\n+            KeyPair kp = createKeyPair(type, keyParams, n, e, p, q);\n+            \/\/ done, return the generated keypair;\n+            if (kp != null) return kp;\n@@ -203,1 +212,0 @@\n-        throw new ProviderException(\"Cannot find prime Q\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAKeyPairGenerator.java","additions":40,"deletions":32,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run main SpecTest 1024 65537\n+ * @run main SpecTest 1024 167971\n","filename":"test\/jdk\/sun\/security\/rsa\/SpecTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}