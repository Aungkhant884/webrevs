{"files":[{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 5040740\n+ * @summary annotations cause memory leak\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.process.*\n+ * @run testng LoaderLeakTest\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.ProcessTools;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import java.io.FileInputStream;\n+import java.lang.annotation.Retention;\n+import java.lang.ref.Reference;\n+import java.lang.ref.WeakReference;\n+import java.nio.file.*;\n+import java.util.*;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+public class LoaderLeakTest {\n+\n+    @Test\n+    public void testWithoutReadingAnnotations() throws Throwable {\n+        runJavaProcessExpectSuccessExitCode(\"Main\");\n+    }\n+\n+    @Test\n+    public void testWithReadingAnnotations() throws Throwable {\n+        runJavaProcessExpectSuccessExitCode(\"Main\",  \"foo\");\n+    }\n+\n+    private void runJavaProcessExpectSuccessExitCode(String ... command) throws Throwable {\n+        var processBuilder = ProcessTools.createJavaProcessBuilder(command)\n+                                                      .directory(Paths.get(Utils.TEST_CLASSES).toFile());\n+        ProcessTools.executeCommand(processBuilder).shouldHaveExitValue(0);\n+    }\n+\n+}\n+\n+class Main {\n+\n+    public static void main(String[] args) throws Exception {\n+        for (int i = 0; i < 100; i++) {\n+            doTest(args.length != 0);\n+        }\n+    }\n+\n+    static void doTest(boolean readAnn) throws Exception {\n+        ClassLoader loader = new SimpleClassLoader();\n+        var c = new WeakReference<Class<?>>(loader.loadClass(\"C\"));\n+        if (c.get() == null) throw new AssertionError(\"class missing after loadClass\");\n+        if (c.get().getClassLoader() != loader) throw new AssertionError(\"wrong classloader\");\n+        if (readAnn) System.out.println(c.get().getAnnotations()[0]);\n+        if (c.get() == null) throw new AssertionError(\"class missing before GC\");\n+        System.gc();\n+        System.gc();\n+        if (c.get() == null) throw new AssertionError(\"class missing after GC but before loader is unreachable\");\n+        System.gc();\n+        System.gc();\n+        Reference.reachabilityFence(loader);\n+        loader = null;\n+\n+        \/\/ Might require multiple calls to System.gc() for weak-references\n+        \/\/ processing to be complete. If the weak-reference is not cleared as\n+        \/\/ expected we will hang here until timed out by the test harness.\n+        while (true) {\n+            System.gc();\n+            Thread.sleep(20);\n+            if (c.get() == null) {\n+                break;\n+            }\n+        }\n+    }\n+}\n+\n+@Retention(RUNTIME)\n+@interface A {\n+    B b();\n+}\n+\n+@interface B { }\n+\n+@A(b=@B()) class C { }\n+\n+class SimpleClassLoader extends ClassLoader {\n+    public SimpleClassLoader() { }\n+\n+    private byte[] getClassImplFromDataBase(String className) {\n+        try {\n+            return Files.readAllBytes(Paths.get(className + \".class\"));\n+        } catch (Exception e) {\n+            throw new Error(\"could not load class \" + className, e);\n+        }\n+    }\n+\n+    @Override\n+    public Class<?> loadClass(String className, boolean resolveIt)\n+            throws ClassNotFoundException {\n+        switch (className) {\n+            case \"A\", \"B\", \"C\" -> {\n+                var classData = getClassImplFromDataBase(className);\n+                return defineClass(className, classData, 0, classData.length);\n+            }\n+        }\n+        return super.loadClass(className, resolveIt);\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/lang\/annotation\/LoaderLeakTest.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -1,28 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public\n-@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)\n-@interface A {\n-    B b();\n-}\n","filename":"test\/jdk\/java\/lang\/annotation\/loaderLeak\/A.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -1,24 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public @interface B {}\n","filename":"test\/jdk\/java\/lang\/annotation\/loaderLeak\/B.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"deleted"},{"patch":"@@ -1,24 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public @A(b=@B()) class C {}\n","filename":"test\/jdk\/java\/lang\/annotation\/loaderLeak\/C.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"deleted"},{"patch":"@@ -1,93 +0,0 @@\n-#!\/bin\/sh\n-\n-# Copyright (c) 2004, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-\n-if [ \"${TESTSRC}\" = \"\" ]\n-then\n-  echo \"TESTSRC not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-echo \"TESTSRC=${TESTSRC}\"\n-if [ \"${TESTJAVA}\" = \"\" ]\n-then\n-  echo \"TESTJAVA not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-echo \"TESTJAVA=${TESTJAVA}\"\n-if [ \"${COMPILEJAVA}\" = \"\" ]; then\n-  COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-echo \"COMPILEJAVA=${COMPILEJAVA}\"\n-if [ \"${TESTCLASSES}\" = \"\" ]\n-then\n-  echo \"TESTCLASSES not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-echo \"TESTCLASSES=${TESTCLASSES}\"\n-echo \"CLASSPATH=${CLASSPATH}\"\n-\n-# set platform-dependent variables\n-OS=`uname -s`\n-case \"$OS\" in\n-  Linux | Darwin | AIX )\n-    NULL=\/dev\/null\n-    PS=\":\"\n-    FS=\"\/\"\n-    ;;\n-  CYGWIN* )\n-    NULL=\/dev\/null\n-    PS=\";\"\n-    FS=\"\/\"\n-    ;;\n-  Windows* )\n-    NULL=NUL\n-    PS=\";\"\n-    FS=\"\\\\\"\n-    ;;\n-  * )\n-    echo \"Unrecognized system!\"\n-    exit 1;\n-    ;;\n-esac\n-\n-mkdir -p classes\n-cp ${TESTSRC}${FS}*.java .\n-${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -d classes A.java B.java C.java\n-${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} Main.java\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} Main\n-result=$?\n-if [ $result -eq 0 ]\n-then\n-  echo \"Passed 1 of 2\"\n-else\n-  echo \"Failed 1 of 2\"\n-  exit $result\n-fi\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} Main foo\n-result=$?\n-if [ $result -eq 0 ]\n-then\n-  echo \"Passed 2 of 2\"\n-else\n-  echo \"Failed 2 of 2\"\n-fi\n-exit $result\n","filename":"test\/jdk\/java\/lang\/annotation\/loaderLeak\/LoaderLeak.sh","additions":0,"deletions":93,"binary":false,"changes":93,"status":"deleted"},{"patch":"@@ -1,136 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 5040740\n- * @summary annotations cause memory leak\n- * @author gafter\n- *\n- * @run shell LoaderLeak.sh\n- *\/\n-\n-import java.net.*;\n-import java.lang.ref.*;\n-import java.util.*;\n-import java.io.*;\n-\n-public class Main {\n-    public static void main(String[] args) throws Exception {\n-        for (int i=0; i<100; i++)\n-            doTest(args.length != 0);\n-    }\n-\n-    static void doTest(boolean readAnn) throws Exception {\n-        \/\/ URL classes = new URL(\"file:\/\/\" + System.getProperty(\"user.dir\") + \"\/classes\");\n-        \/\/ URL[] path = { classes };\n-        \/\/ URLClassLoader loader = new URLClassLoader(path);\n-        ClassLoader loader = new SimpleClassLoader();\n-        WeakReference<Class<?>> c = new WeakReference(loader.loadClass(\"C\"));\n-        if (c.get() == null) throw new AssertionError();\n-        if (c.get().getClassLoader() != loader) throw new AssertionError();\n-        if (readAnn) System.out.println(c.get().getAnnotations()[0]);\n-        if (c.get() == null) throw new AssertionError();\n-        System.gc();\n-        System.gc();\n-        if (c.get() == null) throw new AssertionError();\n-        System.gc();\n-        System.gc();\n-        Reference.reachabilityFence(loader);\n-        loader = null;\n-\n-        \/\/ Might require multiple calls to System.gc() for weak-references\n-        \/\/ processing to be complete. If the weak-reference is not cleared as\n-        \/\/ expected we will hang here until timed out by the test harness.\n-        while (true) {\n-            System.gc();\n-            Thread.sleep(20);\n-            if (c.get() == null) {\n-                break;\n-            }\n-        }\n-    }\n-}\n-\n-class SimpleClassLoader extends ClassLoader {\n-    private Hashtable classes = new Hashtable();\n-\n-    public SimpleClassLoader() {\n-    }\n-    private byte getClassImplFromDataBase(String className)[] {\n-        byte result[];\n-        try {\n-            FileInputStream fi = new FileInputStream(\"classes\/\"+className+\".class\");\n-            result = new byte[fi.available()];\n-            fi.read(result);\n-            return result;\n-        } catch (Exception e) {\n-\n-            \/*\n-             * If we caught an exception, either the class wasnt found or it\n-             * was unreadable by our process.\n-             *\/\n-            return null;\n-        }\n-    }\n-    public Class loadClass(String className) throws ClassNotFoundException {\n-        return (loadClass(className, true));\n-    }\n-    public synchronized Class loadClass(String className, boolean resolveIt)\n-        throws ClassNotFoundException {\n-        Class result;\n-        byte  classData[];\n-\n-        \/* Check our local cache of classes *\/\n-        result = (Class)classes.get(className);\n-        if (result != null) {\n-            return result;\n-        }\n-\n-        \/* Check with the primordial class loader *\/\n-        try {\n-            result = super.findSystemClass(className);\n-            return result;\n-        } catch (ClassNotFoundException e) {\n-        }\n-\n-        \/* Try to load it from our repository *\/\n-        classData = getClassImplFromDataBase(className);\n-        if (classData == null) {\n-            throw new ClassNotFoundException();\n-        }\n-\n-        \/* Define it (parse the class file) *\/\n-        result = defineClass(classData, 0, classData.length);\n-        if (result == null) {\n-            throw new ClassFormatError();\n-        }\n-\n-        if (resolveIt) {\n-            resolveClass(result);\n-        }\n-\n-        classes.put(className, result);\n-        return result;\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/annotation\/loaderLeak\/Main.java","additions":0,"deletions":136,"binary":false,"changes":136,"status":"deleted"}]}