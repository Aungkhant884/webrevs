{"files":[{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.lang.foreign;\n+\n+import java.lang.foreign.ValueLayout;\n+import java.lang.invoke.VarHandle;\n+\n+import static java.lang.foreign.ValueLayout.JAVA_FLOAT;\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n+import static java.lang.foreign.ValueLayout.JAVA_LONG;\n+\n+\/**\n+ * Some useful Java {@link ValueLayout} and associated {@link ValueLayout#arrayElementVarHandle(int...)} var handles.\n+ *\/\n+public class JavaLayouts {\n+    static final ValueLayout.OfInt JAVA_INT_UNALIGNED = JAVA_INT.withBitAlignment(8);\n+\n+    static final ValueLayout.OfFloat JAVA_FLOAT_UNALIGNED = JAVA_FLOAT.withBitAlignment(8);\n+\n+    static final ValueLayout.OfLong JAVA_LONG_UNALIGNED = JAVA_LONG.withBitAlignment(8);\n+\n+    static final VarHandle VH_INT_UNALIGNED = JAVA_INT_UNALIGNED.arrayElementVarHandle();\n+\n+    static final VarHandle VH_INT = JAVA_INT.arrayElementVarHandle();\n+\n+    static final VarHandle VH_FLOAT_UNALIGNED = JAVA_FLOAT_UNALIGNED.arrayElementVarHandle();\n+\n+    static final VarHandle VH_FLOAT = JAVA_FLOAT.arrayElementVarHandle();\n+\n+    static final VarHandle VH_LONG_UNALIGNED = JAVA_LONG_UNALIGNED.arrayElementVarHandle();\n+\n+    static final VarHandle VH_LONG = JAVA_LONG.arrayElementVarHandle();\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/JavaLayouts.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -25,1 +25,0 @@\n-import java.lang.foreign.MemoryLayout;\n@@ -41,1 +40,0 @@\n-import java.lang.invoke.VarHandle;\n@@ -46,1 +44,0 @@\n-import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;\n@@ -55,1 +52,1 @@\n-public class LoopOverConstant {\n+public class LoopOverConstant extends JavaLayouts {\n@@ -76,1 +73,0 @@\n-    static final VarHandle VH_int = JAVA_INT.arrayElementVarHandle();\n@@ -80,1 +76,1 @@\n-            VH_int.set(segment, (long) i, i);\n+            VH_INT.set(segment, (long) i, i);\n@@ -103,1 +99,1 @@\n-        return (int)VH_int.get(segment, 0L);\n+        return (int)VH_INT.get(segment, 0L);\n@@ -125,1 +121,1 @@\n-            res += (int) VH_int.get(segment, (long)i);\n+            res += (int) VH_INT.get(segment, (long)i);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverConstant.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import java.lang.invoke.VarHandle;\n@@ -46,1 +45,0 @@\n-import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;\n@@ -55,1 +53,1 @@\n-public class LoopOverNew {\n+public class LoopOverNew extends JavaLayouts {\n@@ -63,3 +61,0 @@\n-\n-    static final VarHandle VH_int = JAVA_INT.arrayElementVarHandle();\n-\n@@ -88,1 +83,1 @@\n-                VH_int.set(segment, (long) i, i);\n+                VH_INT.set(segment, (long) i, i);\n@@ -98,1 +93,1 @@\n-                VH_int.set(segment, (long) i, i);\n+                VH_INT.set(segment, (long) i, i);\n@@ -107,1 +102,1 @@\n-            VH_int.set(segment, (long) i, i);\n+            VH_INT.set(segment, (long) i, i);\n@@ -143,1 +138,1 @@\n-            VH_int.set(segment, (long) i, i);\n+            VH_INT.set(segment, (long) i, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNew.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import java.lang.foreign.MemoryLayout;\n@@ -41,1 +40,0 @@\n-import java.lang.invoke.VarHandle;\n@@ -45,1 +43,0 @@\n-import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;\n@@ -54,1 +51,1 @@\n-public class LoopOverNewHeap {\n+public class LoopOverNewHeap extends JavaLayouts {\n@@ -61,2 +58,0 @@\n-    static final VarHandle VH_int = JAVA_INT.arrayElementVarHandle();\n-\n@@ -91,1 +86,1 @@\n-            VH_int.set(segment, (long) i, i);\n+            VH_INT.set(segment, (long) i, i);\n@@ -100,1 +95,1 @@\n-            VH_int.set(segment, (long) i, i);\n+            VH_INT.set(segment, (long) i, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNewHeap.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-import java.lang.foreign.MemoryAddress;\n-import java.lang.foreign.MemoryLayout;\n@@ -41,2 +39,0 @@\n-import java.lang.foreign.ValueLayout;\n-import java.lang.invoke.VarHandle;\n@@ -47,1 +43,0 @@\n-import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;\n@@ -56,1 +51,1 @@\n-public class LoopOverNonConstant {\n+public class LoopOverNonConstant extends JavaLayouts {\n@@ -63,6 +58,0 @@\n-\n-    static final VarHandle VH_int = JAVA_INT.arrayElementVarHandle();\n-\n-    static final ValueLayout.OfInt JAVA_INT_ALIGNED = JAVA_INT.withBitAlignment(32);\n-    static final VarHandle VH_int_aligned = JAVA_INT_ALIGNED.arrayElementVarHandle();\n-\n@@ -82,1 +71,1 @@\n-            VH_int.set(segment, (long) i, i);\n+            VH_INT.set(segment, (long) i, i);\n@@ -106,1 +95,1 @@\n-        return (int) VH_int.get(segment, 0L);\n+        return (int) VH_INT.get(segment, 0L);\n@@ -128,1 +117,1 @@\n-            sum += (int) VH_int.get(segment, (long) i);\n+            sum += (int) VH_INT.get(segment, (long) i);\n@@ -134,1 +123,1 @@\n-    public int segment_loop_aligned() {\n+    public int segment_loop_unaligned() {\n@@ -137,1 +126,1 @@\n-            sum += (int) VH_int_aligned.get(segment, (long) i);\n+            sum += (int) VH_INT_UNALIGNED.get(segment, (long) i);\n@@ -163,1 +152,1 @@\n-    public int segment_loop_instance_aligned() {\n+    public int segment_loop_instance_unaligned() {\n@@ -166,1 +155,1 @@\n-            res += segment.get(JAVA_INT_ALIGNED, i * CARRIER_SIZE);\n+            res += segment.get(JAVA_INT_UNALIGNED, i * CARRIER_SIZE);\n@@ -194,1 +183,1 @@\n-            sum += (int) VH_int.get(base, (long) i);\n+            sum += (int) VH_INT.get(base, (long) i);\n@@ -204,1 +193,1 @@\n-            sum += (int) VH_int.get(base, (long) i);\n+            sum += (int) VH_INT.get(base, (long) i);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstant.java","additions":10,"deletions":21,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantFP.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.lang.foreign.ValueLayout;\n@@ -41,1 +40,0 @@\n-import java.lang.invoke.VarHandle;\n@@ -57,1 +55,1 @@\n-public class LoopOverNonConstantHeap {\n+public class LoopOverNonConstantHeap extends JavaLayouts {\n@@ -65,5 +63,0 @@\n-\n-    static final VarHandle VH_INT = JAVA_INT.arrayElementVarHandle();\n-\n-    static final ValueLayout.OfInt JAVA_INT_UNALIGNED = JAVA_INT.withBitAlignment(8);\n-    static final VarHandle VH_INT_UNALIGNED = JAVA_INT_UNALIGNED.arrayElementVarHandle();\n@@ -139,1 +132,1 @@\n-    public int segment_loop() {\n+    public int segment_loop_unaligned() {\n@@ -148,1 +141,1 @@\n-    public int segment_loop_aligned() {\n+    public int segment_loop() {\n@@ -157,1 +150,1 @@\n-    public int segment_loop_instance() {\n+    public int segment_loop_instance_unaligned() {\n@@ -166,1 +159,1 @@\n-    public int segment_loop_instance_aligned() {\n+    public int segment_loop_instance() {\n@@ -177,1 +170,1 @@\n-        MemorySegment base = segment.asSlice(0, segment.byteSize());\n+        MemorySegment base = alignedSegment.asSlice(0, alignedSegment.byteSize());\n@@ -179,1 +172,1 @@\n-            sum += (int) VH_INT_UNALIGNED.get(base, (long) i);\n+            sum += (int) VH_INT.get(base, (long) i);\n@@ -187,1 +180,1 @@\n-        MemorySegment base = segment.asReadOnly();\n+        MemorySegment base = alignedSegment.asReadOnly();\n@@ -189,1 +182,1 @@\n-            sum += (int) VH_INT_UNALIGNED.get(base, (long) i);\n+            sum += (int) VH_INT.get(base, (long) i);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantHeap.java","additions":9,"deletions":16,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import java.lang.foreign.MemoryLayout;\n@@ -42,1 +41,0 @@\n-import java.lang.invoke.VarHandle;\n@@ -52,1 +50,0 @@\n-import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;\n@@ -61,1 +58,1 @@\n-public class LoopOverNonConstantMapped {\n+public class LoopOverNonConstantMapped extends JavaLayouts {\n@@ -83,1 +80,0 @@\n-    static final VarHandle VH_int = JAVA_INT.arrayElementVarHandle();\n@@ -120,1 +116,1 @@\n-        return (int) VH_int.get(segment, 0L);\n+        return (int) VH_INT.get(segment, 0L);\n@@ -142,1 +138,1 @@\n-            sum += (int) VH_int.get(segment, (long) i);\n+            sum += (int) VH_INT.get(segment, (long) i);\n@@ -170,1 +166,1 @@\n-            sum += (int) VH_int.get(base, (long) i);\n+            sum += (int) VH_INT.get(base, (long) i);\n@@ -180,1 +176,1 @@\n-            sum += (int) VH_int.get(base, (long) i);\n+            sum += (int) VH_INT.get(base, (long) i);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantMapped.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import java.lang.foreign.MemoryLayout;\n@@ -40,1 +39,0 @@\n-import java.lang.invoke.VarHandle;\n@@ -45,1 +43,0 @@\n-import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;\n@@ -54,1 +51,1 @@\n-public class LoopOverNonConstantShared {\n+public class LoopOverNonConstantShared extends JavaLayouts {\n@@ -61,2 +58,0 @@\n-\n-    static final VarHandle VH_int = JAVA_INT.arrayElementVarHandle();\n@@ -76,1 +71,1 @@\n-            VH_int.set(segment, (long) i, i);\n+            VH_INT.set(segment, (long) i, i);\n@@ -100,1 +95,1 @@\n-        return (int) VH_int.get(segment, 0L);\n+        return (int) VH_INT.get(segment, 0L);\n@@ -140,1 +135,1 @@\n-            sum += (int) VH_int.get(segment, (long) i);\n+            sum += (int) VH_INT.get(segment, (long) i);\n@@ -150,1 +145,1 @@\n-            sum += (int) VH_int.get(base, (long) i);\n+            sum += (int) VH_INT.get(base, (long) i);\n@@ -160,1 +155,1 @@\n-            sum += (int) VH_int.get(base, (long) i);\n+            sum += (int) VH_INT.get(base, (long) i);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantShared.java","additions":6,"deletions":11,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import java.lang.foreign.MemoryLayout;\n@@ -40,2 +39,0 @@\n-import java.lang.foreign.ValueLayout;\n-import java.lang.invoke.VarHandle;\n@@ -44,1 +41,0 @@\n-import static java.lang.foreign.ValueLayout.JAVA_FLOAT;\n@@ -53,1 +49,1 @@\n-public class LoopOverPollutedSegments {\n+public class LoopOverPollutedSegments extends JavaLayouts {\n@@ -67,5 +63,0 @@\n-    static final ValueLayout.OfInt JAVA_INT_UNALIGNED = JAVA_INT.withBitAlignment(8);\n-    static final ValueLayout.OfFloat JAVA_FLOAT_UNALIGNED = JAVA_FLOAT.withBitAlignment(8);\n-    static final VarHandle intHandleUnaligned = JAVA_INT_UNALIGNED.arrayElementVarHandle();\n-\n-\n@@ -91,1 +82,1 @@\n-                intHandleUnaligned.set(nativeSegment, (long)i, i);\n+                VH_INT_UNALIGNED.set(nativeSegment, (long)i, i);\n@@ -94,1 +85,1 @@\n-                intHandleUnaligned.set(heapSegmentBytes, (long)i, i);\n+                VH_INT_UNALIGNED.set(heapSegmentBytes, (long)i, i);\n@@ -97,1 +88,1 @@\n-                intHandleUnaligned.set(heapSegmentFloats, (long)i, i);\n+                VH_INT_UNALIGNED.set(heapSegmentFloats, (long)i, i);\n@@ -115,2 +106,2 @@\n-            intHandleUnaligned.set(nativeSegment, (long)k, k + 1);\n-            int v = (int) intHandleUnaligned.get(nativeSegment, (long)k);\n+            VH_INT_UNALIGNED.set(nativeSegment, (long)k, k + 1);\n+            int v = (int) VH_INT_UNALIGNED.get(nativeSegment, (long)k);\n@@ -137,2 +128,2 @@\n-            intHandleUnaligned.set(heapSegmentBytes, (long)k, k + 1);\n-            int v = (int) intHandleUnaligned.get(heapSegmentBytes, (long)k);\n+            VH_INT_UNALIGNED.set(heapSegmentBytes, (long)k, k + 1);\n+            int v = (int) VH_INT_UNALIGNED.get(heapSegmentBytes, (long)k);\n@@ -159,2 +150,2 @@\n-            intHandleUnaligned.set(heapSegmentFloats, (long)k, k + 1);\n-            int v = (int)intHandleUnaligned.get(heapSegmentFloats, (long)k);\n+            VH_INT_UNALIGNED.set(heapSegmentFloats, (long)k, k + 1);\n+            int v = (int)VH_INT_UNALIGNED.get(heapSegmentFloats, (long)k);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverPollutedSegments.java","additions":10,"deletions":19,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import java.lang.invoke.VarHandle;\n@@ -54,3 +53,0 @@\n-import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;\n-import static java.lang.foreign.ValueLayout.JAVA_INT;\n-\n@@ -63,1 +59,1 @@\n-public class ParallelSum {\n+public class ParallelSum extends JavaLayouts {\n@@ -68,1 +64,0 @@\n-    static final VarHandle VH_int = JAVA_INT.arrayElementVarHandle();\n@@ -87,1 +82,1 @@\n-            VH_int.set(segment, (long) i, i);\n+            VH_INT.set(segment, (long) i, i);\n@@ -101,1 +96,1 @@\n-            res += (int)VH_int.get(segment, (long) i);\n+            res += (int)VH_INT.get(segment, (long) i);\n@@ -136,1 +131,1 @@\n-            (int) VH_int.get(slice, 0L);\n+            (int) VH_INT.get(slice, 0L);\n@@ -141,1 +136,1 @@\n-            res += (int)VH_int.get(slice, (long) i);\n+            res += (int)VH_INT.get(slice, (long) i);\n@@ -175,1 +170,1 @@\n-            (int)VH_int.get(slice, 0L) == (ELEM_SIZE - 1);\n+            (int)VH_INT.get(slice, 0L) == (ELEM_SIZE - 1);\n@@ -179,1 +174,1 @@\n-            if ((int)VH_int.get(slice, (long)i) == (ELEM_SIZE - 1)) {\n+            if ((int)VH_INT.get(slice, (long)i) == (ELEM_SIZE - 1)) {\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/ParallelSum.java","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.lang.foreign.MemoryLayout;\n@@ -29,1 +28,1 @@\n-import java.lang.foreign.ValueLayout;\n+\n@@ -52,1 +51,1 @@\n-public class TestAdaptVarHandles {\n+public class TestAdaptVarHandles extends JavaLayouts {\n@@ -83,3 +82,1 @@\n-    static final VarHandle VH_int = MethodHandles.arrayElementVarHandle(int[].class);\n-\n-    static final VarHandle VH_box_int = MethodHandles.filterValue(VH_int, INTBOX_TO_INT, INT_TO_INTBOX);\n+    static final VarHandle VH_ARR_INT = MethodHandles.arrayElementVarHandle(int[].class);\n@@ -87,1 +84,1 @@\n-    static final VarHandle VH_addr_int = ValueLayout.JAVA_INT.arrayElementVarHandle();\n+    static final VarHandle VH_BOX_ARR_INT = MethodHandles.filterValue(VH_ARR_INT, INTBOX_TO_INT, INT_TO_INTBOX);\n@@ -89,1 +86,1 @@\n-    static final VarHandle VH_addr_box_int = MethodHandles.filterValue(VH_addr_int, INTBOX_TO_INT, INT_TO_INTBOX);\n+    static final VarHandle VH_BOX_INT = MethodHandles.filterValue(VH_INT, INTBOX_TO_INT, INT_TO_INTBOX);\n@@ -91,1 +88,1 @@\n-    static final MethodHandle MH_int = VH_int.toMethodHandle(VarHandle.AccessMode.GET);\n+    static final MethodHandle MH_INT = VH_ARR_INT.toMethodHandle(VarHandle.AccessMode.GET);\n@@ -93,1 +90,1 @@\n-    static final MethodHandle MH_box_int = MethodHandles.filterReturnValue(MH_int, INT_TO_INTBOX);\n+    static final MethodHandle MH_BOX_INT = MethodHandles.filterReturnValue(MH_INT, INT_TO_INTBOX);\n@@ -109,1 +106,1 @@\n-            sum += (int)VH_int.get(base, i);\n+            sum += (int) VH_ARR_INT.get(base, i);\n@@ -118,1 +115,1 @@\n-            sum += ((IntBox)VH_box_int.get(base, i)).intValue();\n+            sum += ((IntBox) VH_BOX_ARR_INT.get(base, i)).intValue();\n@@ -127,1 +124,1 @@\n-            sum += (int)MH_int.invokeExact(base, i);\n+            sum += (int) MH_INT.invokeExact(base, i);\n@@ -136,1 +133,1 @@\n-            sum += ((IntBox)MH_box_int.invokeExact(base, i)).intValue();\n+            sum += ((IntBox) MH_BOX_INT.invokeExact(base, i)).intValue();\n@@ -145,1 +142,1 @@\n-            sum += (int)VH_addr_int.get(segment, (long)i);\n+            sum += (int)VH_INT.get(segment, (long)i);\n@@ -154,1 +151,1 @@\n-            sum += ((IntBox)VH_addr_box_int.get(segment, (long)i)).intValue();\n+            sum += ((IntBox)VH_BOX_INT.get(segment, (long)i)).intValue();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/TestAdaptVarHandles.java","additions":13,"deletions":16,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-import java.lang.invoke.VarHandle;\n-\n@@ -44,1 +42,1 @@\n-public class UnrolledAccess {\n+public class UnrolledAccess extends JavaLayouts {\n@@ -50,8 +48,0 @@\n-    static final ValueLayout.OfLong JAVA_LONG_UNALIGNED = JAVA_LONG.withBitAlignment(8);\n-\n-    static final VarHandle LONG_HANDLE = MemoryLayout.sequenceLayout(SIZE, JAVA_LONG)\n-            .varHandle(MemoryLayout.PathElement.sequenceElement());\n-\n-    static final VarHandle LONG_HANDLE_UNALIGNED = MemoryLayout.sequenceLayout(SIZE, JAVA_LONG_UNALIGNED)\n-            .varHandle(MemoryLayout.PathElement.sequenceElement());\n-\n@@ -97,4 +87,4 @@\n-            LONG_HANDLE.set(os, (long) (i),   (long) LONG_HANDLE.get(is, (long) (i))   + (long) LONG_HANDLE.get(os, (long) (i)));\n-            LONG_HANDLE.set(os, (long) (i+1), (long) LONG_HANDLE.get(is, (long) (i+1)) + (long) LONG_HANDLE.get(os, (long) (i+1)));\n-            LONG_HANDLE.set(os, (long) (i+2), (long) LONG_HANDLE.get(is, (long) (i+2)) + (long) LONG_HANDLE.get(os, (long) (i+2)));\n-            LONG_HANDLE.set(os, (long) (i+3), (long) LONG_HANDLE.get(is, (long) (i+3)) + (long) LONG_HANDLE.get(os, (long) (i+3)));\n+            VH_LONG.set(os, (long) (i),   (long) VH_LONG.get(is, (long) (i))   + (long) VH_LONG.get(os, (long) (i)));\n+            VH_LONG.set(os, (long) (i+1), (long) VH_LONG.get(is, (long) (i+1)) + (long) VH_LONG.get(os, (long) (i+1)));\n+            VH_LONG.set(os, (long) (i+2), (long) VH_LONG.get(is, (long) (i+2)) + (long) VH_LONG.get(os, (long) (i+2)));\n+            VH_LONG.set(os, (long) (i+3), (long) VH_LONG.get(is, (long) (i+3)) + (long) VH_LONG.get(os, (long) (i+3)));\n@@ -123,4 +113,4 @@\n-            LONG_HANDLE_UNALIGNED.set(os, (long) (i),   (long) LONG_HANDLE_UNALIGNED.get(is, (long) (i))   + (long) LONG_HANDLE_UNALIGNED.get(os, (long) (i)));\n-            LONG_HANDLE_UNALIGNED.set(os, (long) (i+1), (long) LONG_HANDLE_UNALIGNED.get(is, (long) (i+1)) + (long) LONG_HANDLE_UNALIGNED.get(os, (long) (i+1)));\n-            LONG_HANDLE_UNALIGNED.set(os, (long) (i+2), (long) LONG_HANDLE_UNALIGNED.get(is, (long) (i+2)) + (long) LONG_HANDLE_UNALIGNED.get(os, (long) (i+2)));\n-            LONG_HANDLE_UNALIGNED.set(os, (long) (i+3), (long) LONG_HANDLE_UNALIGNED.get(is, (long) (i+3)) + (long) LONG_HANDLE_UNALIGNED.get(os, (long) (i+3)));\n+            VH_LONG_UNALIGNED.set(os, (long) (i),   (long) VH_LONG_UNALIGNED.get(is, (long) (i))   + (long) VH_LONG_UNALIGNED.get(os, (long) (i)));\n+            VH_LONG_UNALIGNED.set(os, (long) (i+1), (long) VH_LONG_UNALIGNED.get(is, (long) (i+1)) + (long) VH_LONG_UNALIGNED.get(os, (long) (i+1)));\n+            VH_LONG_UNALIGNED.set(os, (long) (i+2), (long) VH_LONG_UNALIGNED.get(is, (long) (i+2)) + (long) VH_LONG_UNALIGNED.get(os, (long) (i+2)));\n+            VH_LONG_UNALIGNED.set(os, (long) (i+3), (long) VH_LONG_UNALIGNED.get(is, (long) (i+3)) + (long) VH_LONG_UNALIGNED.get(os, (long) (i+3)));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/UnrolledAccess.java","additions":9,"deletions":19,"binary":false,"changes":28,"status":"modified"}]}