{"files":[{"patch":"@@ -474,1 +474,1 @@\n-     * Adjusts the exact size of the resulting stream using source spliterator size.\n+     * Returns the exact output size of the pipeline given the exact size reported by the source spliterator.\n@@ -476,2 +476,2 @@\n-     * @param size exact size of the output reported by source spliterator\n-     * @return adjusted size\n+     * @param sourceSize the exact size reported by the source spliterator\n+     * @return the exact output size\n@@ -479,2 +479,2 @@\n-    long adjustSize(long size) {\n-        return previousStage == null ? size : previousStage.adjustSize(size);\n+    long exactOutputSize(long sourceSize) {\n+        return previousStage == null ? sourceSize : previousStage.exactOutputSize(sourceSize);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/AbstractPipeline.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -113,4 +113,8 @@\n-            long adjustSize(long size) {\n-                \/\/ For parallel streams, spliterator size is already adjusted\n-                return isParallel() ? super.adjustSize(size)\n-                    : calcSize(super.adjustSize(size), skip, adjustedLimit);\n+            long exactOutputSize(long sourceSize) {\n+                \/\/ For parallel streams, the exact output size is that reported by the slice op's spliterator,\n+                \/\/ since a slice op is a stateful op whose spliterator is the source spliterator\n+                \/\/ (see AbstractPipeline.sourceSpliterator).\n+                \/\/ Otherwise, for sequential streams the extract output size that of the prior pipeline stage reduced\n+                \/\/ by the skip and limit\n+                return isParallel() ? sourceSize\n+                    : calcSize(super.exactOutputSize(sourceSize), skip, normalizedLimit);\n@@ -118,1 +122,0 @@\n-\n@@ -232,1 +235,1 @@\n-        long adjustedLimit = limit >= 0 ? limit : Long.MAX_VALUE;\n+        long normalizedLimit = limit >= 0 ? limit : Long.MAX_VALUE;\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/SliceOps.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,152 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.util.stream.ops.value;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.DoubleStream;\n+import java.util.stream.IntStream;\n+import java.util.stream.LongStream;\n+import java.util.stream.Stream;\n+\n+\/**\n+ * Benchmark for count operation in sized streams.\n+ *\/\n+@Fork(5)\n+@Warmup(iterations = 10, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 20, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class SizedCount {\n+    @Param(\"10000\")\n+    private int size;\n+\n+    @Param({\"true\", \"false\"})\n+    private boolean polluteTypeProfile;\n+\n+    @Setup\n+    public void setup() {\n+        if (!polluteTypeProfile) return;\n+        for(int i=0; i<10000; i++) {\n+            IntStream.empty().skip(1).count();\n+            LongStream.empty().skip(1).count();\n+            DoubleStream.empty().skip(1).count();\n+            Stream.empty().skip(1).count();\n+        }\n+    }\n+\n+    @Benchmark\n+    public long count0() {\n+        return IntStream.range(0, size)\n+            .count();\n+    }\n+\n+    @Benchmark\n+    public long count2() {\n+        return IntStream.range(0, size)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .count();\n+    }\n+\n+    @Benchmark\n+    public long count4() {\n+        return IntStream.range(0, size)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .count();\n+    }\n+\n+    @Benchmark\n+    public long count6() {\n+        return IntStream.range(0, size)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .count();\n+    }\n+\n+    @Benchmark\n+    public long count8() {\n+        return IntStream.range(0, size)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .count();\n+    }\n+\n+    @Benchmark\n+    public long count10() {\n+        return IntStream.range(0, size)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .count();\n+    }\n+\n+    @Benchmark\n+    public long count10Skip() {\n+        return IntStream.range(0, size)\n+            .skip(1)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .count();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/stream\/ops\/value\/SizedCount.java","additions":152,"deletions":0,"binary":false,"changes":152,"status":"added"},{"patch":"@@ -0,0 +1,152 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.util.stream.ops.value;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.DoubleStream;\n+import java.util.stream.IntStream;\n+import java.util.stream.LongStream;\n+import java.util.stream.Stream;\n+\n+\/**\n+ * Benchmark for sum operation in sized streams.\n+ *\/\n+@Fork(5)\n+@Warmup(iterations = 10, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 20, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class SizedSum {\n+    @Param({\"5\", \"10\"})\n+    private int size;\n+\n+    @Param({\"true\", \"false\"})\n+    private boolean polluteTypeProfile;\n+\n+    @Setup\n+    public void setup() {\n+        if (!polluteTypeProfile) return;\n+        for(int i=0; i<10000; i++) {\n+            IntStream.empty().skip(1).count();\n+            LongStream.empty().skip(1).count();\n+            DoubleStream.empty().skip(1).count();\n+            Stream.empty().skip(1).count();\n+        }\n+    }\n+\n+    @Benchmark\n+    public long sum0() {\n+        return IntStream.range(0, size)\n+            .sum();\n+    }\n+\n+    @Benchmark\n+    public long sum2() {\n+        return IntStream.range(0, size)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .sum();\n+    }\n+\n+    @Benchmark\n+    public long sum4() {\n+        return IntStream.range(0, size)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .sum();\n+    }\n+\n+    @Benchmark\n+    public long sum6() {\n+        return IntStream.range(0, size)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .sum();\n+    }\n+\n+    @Benchmark\n+    public long sum8() {\n+        return IntStream.range(0, size)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .sum();\n+    }\n+\n+    @Benchmark\n+    public long sum10() {\n+        return IntStream.range(0, size)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .sum();\n+    }\n+\n+    @Benchmark\n+    public long sum10Skip() {\n+        return IntStream.range(0, size)\n+            .skip(1)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .map(x -> x)\n+            .sum();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/stream\/ops\/value\/SizedSum.java","additions":152,"deletions":0,"binary":false,"changes":152,"status":"added"}]}