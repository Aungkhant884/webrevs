{"files":[{"patch":"@@ -114,0 +114,1 @@\n+                \/\/ For parallel streams, spliterator size is already adjusted\n@@ -237,0 +238,1 @@\n+                \/\/ For parallel streams, spliterator size is already adjusted\n@@ -353,0 +355,1 @@\n+                \/\/ For parallel streams, spliterator size is already adjusted\n@@ -469,0 +472,1 @@\n+                \/\/ For parallel streams, spliterator size is already adjusted\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/SliceOps.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.util.function.Supplier;\n@@ -180,0 +181,1 @@\n+    @Test\n@@ -181,67 +183,44 @@\n-        {\n-            AtomicInteger ai = new AtomicInteger();\n-            assertEquals(Stream.of(1, 2, 3, 4).peek(e -> ai.getAndIncrement()).count(), 4);\n-            assertEquals(ai.get(), 0);\n-\n-            assertEquals(Stream.of(1, 2, 3, 4).peek(e -> ai.getAndIncrement()).parallel().count(), 4);\n-            assertEquals(ai.get(), 0);\n-\n-            assertEquals(Stream.of(1, 2, 3, 4).peek(e -> ai.getAndIncrement())\n-                .skip(1).limit(2).skip(1).count(), 1);\n-            assertEquals(ai.get(), 0);\n-\n-            assertEquals(Stream.of(1, 2, 3, 4).peek(e -> ai.getAndIncrement())\n-                .parallel().skip(1).limit(2).skip(1).count(), 1);\n-            assertEquals(ai.get(), 0);\n-        }\n-\n-        {\n-            AtomicInteger ai = new AtomicInteger();\n-            assertEquals(IntStream.of(1, 2, 3, 4).peek(e -> ai.getAndIncrement()).count(), 4);\n-            assertEquals(ai.get(), 0);\n-\n-            assertEquals(IntStream.of(1, 2, 3, 4).peek(e -> ai.getAndIncrement()).parallel().count(), 4);\n-            assertEquals(ai.get(), 0);\n-\n-            assertEquals(IntStream.of(1, 2, 3, 4).peek(e -> ai.getAndIncrement())\n-                .skip(1).limit(2).skip(1).count(), 1);\n-            assertEquals(ai.get(), 0);\n-\n-            assertEquals(IntStream.of(1, 2, 3, 4).peek(e -> ai.getAndIncrement())\n-                .parallel().skip(1).limit(2).skip(1).count(), 1);\n-            assertEquals(ai.get(), 0);\n-        }\n-\n-        {\n-            AtomicInteger ai = new AtomicInteger();\n-            assertEquals(LongStream.of(1, 2, 3, 4).peek(e -> ai.getAndIncrement()).count(), 4);\n-            assertEquals(ai.get(), 0);\n-\n-            assertEquals(LongStream.of(1, 2, 3, 4).peek(e -> ai.getAndIncrement()).parallel().count(), 4);\n-            assertEquals(ai.get(), 0);\n-\n-            assertEquals(LongStream.of(1, 2, 3, 4).peek(e -> ai.getAndIncrement())\n-                .skip(1).limit(2).skip(1).count(), 1);\n-            assertEquals(ai.get(), 0);\n-\n-            assertEquals(LongStream.of(1, 2, 3, 4).peek(e -> ai.getAndIncrement())\n-                .parallel().skip(1).limit(2).skip(1).count(), 1);\n-            assertEquals(ai.get(), 0);\n-        }\n-\n-        {\n-            AtomicInteger ai = new AtomicInteger();\n-            DoubleStream.of(1, 2, 3, 4).peek(e -> ai.getAndIncrement()).count();\n-            assertEquals(ai.get(), 0);\n-\n-            DoubleStream.of(1, 2, 3, 4).peek(e -> ai.getAndIncrement()).parallel().count();\n-            assertEquals(ai.get(), 0);\n-\n-            assertEquals(DoubleStream.of(1, 2, 3, 4).peek(e -> ai.getAndIncrement())\n-                .skip(1).limit(2).skip(1).count(), 1);\n-            assertEquals(ai.get(), 0);\n-\n-            assertEquals(DoubleStream.of(1, 2, 3, 4).peek(e -> ai.getAndIncrement())\n-                .parallel().skip(1).limit(2).skip(1).count(), 1);\n-            assertEquals(ai.get(), 0);\n-        }\n+        checkStreamDoesNotConsumeElements(() -> Stream.of(1, 2, 3, 4), 4);\n+        checkStreamDoesNotConsumeElements(() -> Stream.of(1, 2, 3, 4).skip(1).limit(2).skip(1), 1);\n+        checkIntStreamDoesNotConsumeElements(() -> IntStream.of(1, 2, 3, 4), 4);\n+        checkIntStreamDoesNotConsumeElements(() -> IntStream.of(1, 2, 3, 4).skip(1).limit(2).skip(1), 1);\n+        checkLongStreamDoesNotConsumeElements(() -> LongStream.of(1, 2, 3, 4), 4);\n+        checkLongStreamDoesNotConsumeElements(() -> LongStream.of(1, 2, 3, 4).skip(1).limit(2).skip(1), 1);\n+        checkDoubleStreamDoesNotConsumeElements(() -> DoubleStream.of(1, 2, 3, 4), 4);\n+        checkDoubleStreamDoesNotConsumeElements(() -> DoubleStream.of(1, 2, 3, 4).skip(1).limit(2).skip(1), 1);\n+    }\n+\n+    private void checkStreamDoesNotConsumeElements(Supplier<Stream<?>> supplier, long expectedCount) {\n+        AtomicInteger ai = new AtomicInteger();\n+        assertEquals(supplier.get().peek(e -> ai.getAndIncrement()).count(), expectedCount);\n+        assertEquals(ai.get(), 0);\n+\n+        assertEquals(supplier.get().peek(e -> ai.getAndIncrement()).parallel().count(), expectedCount);\n+        assertEquals(ai.get(), 0);\n+    }\n+\n+    private void checkIntStreamDoesNotConsumeElements(Supplier<IntStream> supplier, long expectedCount) {\n+        AtomicInteger ai = new AtomicInteger();\n+        assertEquals(supplier.get().peek(e -> ai.getAndIncrement()).count(), expectedCount);\n+        assertEquals(ai.get(), 0);\n+\n+        assertEquals(supplier.get().peek(e -> ai.getAndIncrement()).parallel().count(), expectedCount);\n+        assertEquals(ai.get(), 0);\n+    }\n+\n+    private void checkLongStreamDoesNotConsumeElements(Supplier<LongStream> supplier, long expectedCount) {\n+        AtomicInteger ai = new AtomicInteger();\n+        assertEquals(supplier.get().peek(e -> ai.getAndIncrement()).count(), expectedCount);\n+        assertEquals(ai.get(), 0);\n+\n+        assertEquals(supplier.get().peek(e -> ai.getAndIncrement()).parallel().count(), expectedCount);\n+        assertEquals(ai.get(), 0);\n+    }\n+\n+    private void checkDoubleStreamDoesNotConsumeElements(Supplier<DoubleStream> supplier, long expectedCount) {\n+        AtomicInteger ai = new AtomicInteger();\n+        assertEquals(supplier.get().peek(e -> ai.getAndIncrement()).count(), expectedCount);\n+        assertEquals(ai.get(), 0);\n+\n+        assertEquals(supplier.get().peek(e -> ai.getAndIncrement()).parallel().count(), expectedCount);\n+        assertEquals(ai.get(), 0);\n","filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/CountTest.java","additions":46,"deletions":67,"binary":false,"changes":113,"status":"modified"}]}