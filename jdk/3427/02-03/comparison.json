{"files":[{"patch":"@@ -108,1 +108,1 @@\n-        long adjustedLimit = limit >= 0 ? limit : Long.MAX_VALUE;\n+        long normalizedLimit = limit >= 0 ? limit : Long.MAX_VALUE;\n@@ -117,1 +117,1 @@\n-                \/\/ Otherwise, for sequential streams the extract output size that of the prior pipeline stage reduced\n+                \/\/ Otherwise, for sequential streams the extact output size that of the prior pipeline stage reduced\n@@ -193,1 +193,1 @@\n-                    long m = adjustedLimit;\n+                    long m = normalizedLimit;\n@@ -240,4 +240,8 @@\n-            long adjustSize(long size) {\n-                \/\/ For parallel streams, spliterator size is already adjusted\n-                return isParallel() ? super.adjustSize(size)\n-                    : calcSize(super.adjustSize(size), skip, adjustedLimit);\n+            long exactOutputSize(long sourceSize) {\n+                \/\/ For parallel streams, the exact output size is that reported by the slice op's spliterator,\n+                \/\/ since a slice op is a stateful op whose spliterator is the source spliterator\n+                \/\/ (see AbstractPipeline.sourceSpliterator).\n+                \/\/ Otherwise, for sequential streams the extact output size that of the prior pipeline stage reduced\n+                \/\/ by the skip and limit\n+                return isParallel() ? sourceSize\n+                    : calcSize(super.exactOutputSize(sourceSize), skip, normalizedLimit);\n@@ -310,1 +314,1 @@\n-                    long m = adjustedLimit;\n+                    long m = normalizedLimit;\n@@ -352,1 +356,1 @@\n-        long adjustedLimit = limit >= 0 ? limit : Long.MAX_VALUE;\n+        long normalizedLimit = limit >= 0 ? limit : Long.MAX_VALUE;\n@@ -357,4 +361,8 @@\n-            long adjustSize(long size) {\n-                \/\/ For parallel streams, spliterator size is already adjusted\n-                return isParallel() ? super.adjustSize(size)\n-                    : calcSize(super.adjustSize(size), skip, adjustedLimit);\n+            long exactOutputSize(long sourceSize) {\n+                \/\/ For parallel streams, the exact output size is that reported by the slice op's spliterator,\n+                \/\/ since a slice op is a stateful op whose spliterator is the source spliterator\n+                \/\/ (see AbstractPipeline.sourceSpliterator).\n+                \/\/ Otherwise, for sequential streams the extact output size that of the prior pipeline stage reduced\n+                \/\/ by the skip and limit\n+                return isParallel() ? sourceSize\n+                    : calcSize(super.exactOutputSize(sourceSize), skip, normalizedLimit);\n@@ -427,1 +435,1 @@\n-                    long m = adjustedLimit;\n+                    long m = normalizedLimit;\n@@ -469,1 +477,1 @@\n-        long adjustedLimit = limit >= 0 ? limit : Long.MAX_VALUE;\n+        long normalizedLimit = limit >= 0 ? limit : Long.MAX_VALUE;\n@@ -474,4 +482,8 @@\n-            long adjustSize(long size) {\n-                \/\/ For parallel streams, spliterator size is already adjusted\n-                return isParallel() ? super.adjustSize(size)\n-                    : calcSize(super.adjustSize(size), skip, adjustedLimit);\n+            long exactOutputSize(long sourceSize) {\n+                \/\/ For parallel streams, the exact output size is that reported by the slice op's spliterator,\n+                \/\/ since a slice op is a stateful op whose spliterator is the source spliterator\n+                \/\/ (see AbstractPipeline.sourceSpliterator).\n+                \/\/ Otherwise, for sequential streams the extact output size that of the prior pipeline stage reduced\n+                \/\/ by the skip and limit\n+                return isParallel() ? sourceSize\n+                    : calcSize(super.exactOutputSize(sourceSize), skip, normalizedLimit);\n@@ -544,1 +556,1 @@\n-                    long m = adjustedLimit;\n+                    long m = normalizedLimit;\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/SliceOps.java","additions":32,"deletions":20,"binary":false,"changes":52,"status":"modified"}]}