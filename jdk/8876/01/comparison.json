{"files":[{"patch":"@@ -670,0 +670,4 @@\n+     * @apiNote\n+     * This method corresponds to the isNaN operation defined in IEEE\n+     * 754.\n+     *\n@@ -682,0 +686,4 @@\n+     * @apiNote\n+     * This method corresponds to the isInfinite operation defined in\n+     * IEEE 754.\n+     *\n@@ -695,0 +703,4 @@\n+     * @apiNote\n+     * This method corresponds to the isFinite operation defined in\n+     * IEEE 754.\n+     *\n@@ -838,0 +850,4 @@\n+     * @apiNote\n+     * This method corresponds to the convertFormat operation defined\n+     * in IEEE 754.\n+     *\n@@ -1147,0 +1163,3 @@\n+     * @apiNote This method corresponds to the addition operation\n+     * defined in IEEE 754.\n+     *\n@@ -1162,0 +1181,4 @@\n+     * @apiNote\n+     * This method corresponds to the maximum operation defined in\n+     * IEEE 754.\n+     *\n@@ -1176,0 +1199,4 @@\n+     * @apiNote\n+     * This method corresponds to the minimum operation defined in\n+     * IEEE 754.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Double.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -495,0 +495,4 @@\n+     * @apiNote\n+     * This method corresponds to the isNaN operation defined in IEEE\n+     * 754.\n+     *\n@@ -507,0 +511,4 @@\n+     * @apiNote\n+     * This method corresponds to the isInfinite operation defined in\n+     * IEEE 754.\n+     *\n@@ -521,0 +529,4 @@\n+     * @apiNote\n+     * This method corresponds to the isFinite operation defined in\n+     * IEEE 754.\n+     *\n@@ -689,0 +701,4 @@\n+     * @apiNote\n+     * This method corresponds to the convertFormat operation defined\n+     * in IEEE 754.\n+     *\n@@ -974,0 +990,3 @@\n+     * @apiNote This method corresponds to the addition operation\n+     * defined in IEEE 754.\n+     *\n@@ -989,0 +1008,4 @@\n+     * @apiNote\n+     * This method corresponds to the maximum operation defined in\n+     * IEEE 754.\n+     *\n@@ -1003,0 +1026,4 @@\n+     * @apiNote\n+     * This method corresponds to the minimum operation defined in\n+     * IEEE 754.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Float.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -401,0 +401,4 @@\n+     * @apiNote\n+     * This method corresponds to the squareRoot operation defined in\n+     * IEEE 754.\n+     *\n@@ -484,0 +488,3 @@\n+     * @apiNote\n+     * This method corresponds to the roundToIntegralTowardPositive\n+     * operation defined in IEEE 754.\n@@ -505,0 +512,4 @@\n+     * @apiNote\n+     * This method corresponds to the roundToIntegralTowardNegative\n+     * operation defined in IEEE 754.\n+     *\n@@ -526,0 +537,4 @@\n+     * @apiNote\n+     * This method corresponds to the roundToIntegralTiesToEven\n+     * operation defined in IEEE 754.\n+     *\n@@ -753,0 +768,4 @@\n+     * @apiNote\n+     * This method corresponds to the convertTowardPositive operation\n+     * defined in IEEE 754.\n+     *\n@@ -802,0 +821,4 @@\n+     * @apiNote\n+     * This method corresponds to the convertTowardPositive operation\n+     * defined in IEEE 754.\n+     *\n@@ -2036,0 +2059,4 @@\n+     * @apiNote\n+     * This method corresponds to the maximum operation defined in\n+     * IEEE 754.\n+     *\n@@ -2063,0 +2090,4 @@\n+     * @apiNote\n+     * This method corresponds to the maximum operation defined in\n+     * IEEE 754.\n+     *\n@@ -2119,0 +2150,4 @@\n+     * @apiNote\n+     * This method corresponds to the minimum operation defined in\n+     * IEEE 754.\n+     *\n@@ -2146,0 +2181,4 @@\n+     * @apiNote\n+     * This method corresponds to the minimum operation defined in\n+     * IEEE 754.\n+     *\n@@ -2201,1 +2240,1 @@\n-     * operation defined in IEEE 754-2008.\n+     * operation defined in IEEE 754.\n@@ -2315,1 +2354,1 @@\n-     * operation defined in IEEE 754-2008.\n+     * operation defined in IEEE 754.\n@@ -2695,0 +2734,4 @@\n+     * @apiNote\n+     * This method corresponds to the copySign operation defined in\n+     * IEEE 754.\n+     *\n@@ -2719,0 +2762,4 @@\n+     * @apiNote\n+     * This method corresponds to the copySign operation defined in\n+     * IEEE 754.\n+     *\n@@ -2742,1 +2789,1 @@\n-     * {@link Float#MIN_EXPONENT} -1.\n+     * {@link Float#MIN_EXPONENT} - 1.\n@@ -2744,0 +2791,4 @@\n+     * @apiNote\n+     * This method is analogous to the logB operation defined in IEEE\n+     * 754, but returns a different value on subnormal arguments.\n+     *\n@@ -2766,1 +2817,1 @@\n-     * {@link Double#MIN_EXPONENT} -1.\n+     * {@link Double#MIN_EXPONENT} - 1.\n@@ -2768,0 +2819,4 @@\n+     * @apiNote\n+     * This method is analogous to the logB operation defined in IEEE\n+     * 754, but returns a different value on subnormal arguments.\n+     *\n@@ -2971,0 +3026,3 @@\n+     * @apiNote This method corresponds to the nextUp\n+     * operation defined in IEEE 754.\n+     *\n@@ -3007,0 +3065,3 @@\n+     * @apiNote This method corresponds to the nextUp\n+     * operation defined in IEEE 754.\n+     *\n@@ -3043,0 +3104,3 @@\n+     * @apiNote This method corresponds to the nextDown\n+     * operation defined in IEEE 754.\n+     *\n@@ -3080,0 +3144,3 @@\n+     * @apiNote This method corresponds to the nextDown\n+     * operation defined in IEEE 754.\n+     *\n@@ -3119,0 +3186,3 @@\n+     * @apiNote This method corresponds to the scaleB operation\n+     * defined in IEEE 754.\n+     *\n@@ -3203,0 +3273,3 @@\n+     * @apiNote This method corresponds to the scaleB operation\n+     * defined in IEEE 754.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java","additions":77,"deletions":4,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -42,0 +42,15 @@\n+ * <p>More generally, a rounding policy defines a mapping from the\n+ * real numbers to a subset of representable values. In the case of\n+ * {@link BigDecimal}, the representable values are a function of the\n+ * {@linkplain MathContext#getPrecision() precision} being used in the\n+ * computation. Assuming the mathematical result is within the\n+ * exponent range of {@code BigDecimal}, the mathematical result will\n+ * be exactly representable in the result precision or will fall between\n+ * two adjacent representable values. In the case of falling between two\n+ * representable values, the rounding policy determines which of those\n+ * two bracketing values is the result. For in-range real numbers, for\n+ * a given set of representable values, a rounding policy maps a\n+ * continuous segment of real number line to a single representable\n+ * value where the real number numerically equal to a representable\n+ * value is mapped to that value.\n+ *\n@@ -93,1 +108,1 @@\n- * for Floating-Point Arithmetic<\/cite>, IEEE 754-2019. Where present,\n+ * for Floating-Point Arithmetic<\/cite>. Where present,\n@@ -101,0 +116,1 @@\n+ * @jls 15.4 Floating-point Expressions\n@@ -143,1 +159,7 @@\n-         * This mode corresponds to the IEEE 754-2019 rounding-direction\n+         *\n+         * @apiNote\n+         * This rounding mode is analogous to the rounding policy used\n+         * for the {@code float} and {@code double} operators\n+         * remainder and conversion to an integer value (JLS {@jls\n+         * 15.4}).\n+         * This mode corresponds to the IEEE 754 rounding-direction\n@@ -174,1 +196,1 @@\n-         * This mode corresponds to the IEEE 754-2019 rounding-direction\n+         * This mode corresponds to the IEEE 754 rounding-direction\n@@ -205,1 +227,1 @@\n-         * This mode corresponds to the IEEE 754-2019 rounding-direction\n+         * This mode corresponds to the IEEE 754 rounding-direction\n@@ -238,1 +260,1 @@\n-         * This mode corresponds to the IEEE 754-2019 rounding-direction\n+         * This mode corresponds to the IEEE 754 rounding-direction\n@@ -300,1 +322,3 @@\n-         * {@code RoundingMode.HALF_DOWN} if it's even.  Note that this\n+         * {@code RoundingMode.HALF_DOWN} if it's even.\n+         * @apiNote\n+         * This\n@@ -305,3 +329,3 @@\n-         * the rounding policy used for {@code float} and {@code double}\n-         * arithmetic in Java.\n-         * This mode corresponds to the IEEE 754-2019 rounding-direction\n+         * the rounding policy used for most {@code float} and {@code double}\n+         * arithmetic operators in Java (JLS {@jls 15.4}).\n+         * This mode corresponds to the IEEE 754 rounding-direction\n","filename":"src\/java.base\/share\/classes\/java\/math\/RoundingMode.java","additions":33,"deletions":9,"binary":false,"changes":42,"status":"modified"}]}