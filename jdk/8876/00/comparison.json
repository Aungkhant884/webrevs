{"files":[{"patch":"@@ -838,0 +838,4 @@\n+     * @apiNote\n+     * This method corresponds to the convertFormat operation defined\n+     * in IEEE 754.\n+     *\n@@ -1147,0 +1151,3 @@\n+     * @apiNote This method corresponds to the addition operation\n+     * defined in IEEE 754.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Double.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -689,0 +689,4 @@\n+     * @apiNote\n+     * This method corresponds to the convertFormat operation defined\n+     * in IEEE 754.\n+     *\n@@ -974,0 +978,3 @@\n+     * @apiNote This method corresponds to the addition operation\n+     * defined in IEEE 754.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Float.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -401,0 +401,4 @@\n+     * @apiNote\n+     * This method corresponds to the squareRoot operation defined in\n+     * IEEE 754.\n+     *\n@@ -484,0 +488,3 @@\n+     * @apiNote\n+     * This method corresponds to the roundToIntegralTowardPositive\n+     * operation defined in IEEE 754.\n@@ -505,0 +512,4 @@\n+     * @apiNote\n+     * This method corresponds to the roundToIntegralTowardNegative\n+     * operation defined in IEEE 754.\n+     *\n@@ -526,0 +537,4 @@\n+     * @apiNote\n+     * This method corresponds to the roundToIntegralTiesToEven\n+     * operation defined in IEEE 754.\n+     *\n@@ -753,0 +768,4 @@\n+     * @apiNote\n+     * This method corresponds to the convertToIntegerTiesToEven\n+     * operation defined in IEEE 754.\n+     *\n@@ -802,0 +821,4 @@\n+     * @apiNote\n+     * This method corresponds to the convertToIntegerTiesToEven\n+     * operation defined in IEEE 754.\n+     *\n@@ -2036,0 +2059,4 @@\n+     * @apiNote\n+     * This method corresponds to the maximum operation defined in\n+     * IEEE 754.\n+     *\n@@ -2063,0 +2090,4 @@\n+     * @apiNote\n+     * This method corresponds to the maximum operation defined in\n+     * IEEE 754.\n+     *\n@@ -2119,0 +2150,4 @@\n+     * @apiNote\n+     * This method corresponds to the minimum operation defined in\n+     * IEEE 754.\n+     *\n@@ -2146,0 +2181,4 @@\n+     * @apiNote\n+     * This method corresponds to the minimum operation defined in\n+     * IEEE 754.\n+     *\n@@ -2201,1 +2240,1 @@\n-     * operation defined in IEEE 754-2008.\n+     * operation defined in IEEE 754.\n@@ -2315,1 +2354,1 @@\n-     * operation defined in IEEE 754-2008.\n+     * operation defined in IEEE 754.\n@@ -2695,0 +2734,4 @@\n+     * @apiNote\n+     * This method corresponds to the copySign operation defined in\n+     * IEEE 754.\n+     *\n@@ -2719,0 +2762,4 @@\n+     * @apiNote\n+     * This method corresponds to the copySign operation defined in\n+     * IEEE 754.\n+     *\n@@ -2971,0 +3018,3 @@\n+     * @apiNote This method corresponds to the nextUp\n+     * operation defined in IEEE 754.\n+     *\n@@ -3007,0 +3057,3 @@\n+     * @apiNote This method corresponds to the nextUp\n+     * operation defined in IEEE 754.\n+     *\n@@ -3043,0 +3096,3 @@\n+     * @apiNote This method corresponds to the nextDown\n+     * operation defined in IEEE 754.\n+     *\n@@ -3080,0 +3136,3 @@\n+     * @apiNote This method corresponds to the nextDown\n+     * operation defined in IEEE 754.\n+     *\n@@ -3119,0 +3178,3 @@\n+     * @apiNote This method corresponds to the scaleB operation\n+     * defined in IEEE 754.\n+     *\n@@ -3203,0 +3265,3 @@\n+     * @apiNote This method corresponds to the scaleB operation\n+     * defined in IEEE 754.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java","additions":67,"deletions":2,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -42,0 +42,15 @@\n+ * <p>More generally, a rounding policy defines a mapping from the\n+ * real numbers to a subset of representable values. In the case of\n+ * {@link BigDecimal}, the representable values are a function of the\n+ * {@linkplain MathContext#getPrecision() precision} being used in the\n+ * computation. Assuming the mathematical result is within the\n+ * exponent range of {@code BigDecimal}, the mathematical result will\n+ * be exactly representable in the result precision or fall between\n+ * two representable values. In the case of falling between two\n+ * representable values, the rounding policy determines which of those\n+ * two bracketing values is the result. For in-range real numbers, for\n+ * a given set of representable values, a rounding policy maps a\n+ * continuous segment of real number line to a singe representable\n+ * value where the real number numerically equal to a representable\n+ * value is mapped to that value.\n+ *\n@@ -101,0 +116,1 @@\n+ * @jls 15.4 Floating-point Expressions\n@@ -143,0 +159,6 @@\n+         *\n+         * @apiNote\n+         * This rounding mode is analogous to the rounding policy used\n+         * for the {@code float} and {@code double} operators\n+         * conversion to an integer value and remainder (JLS {@jls\n+         * 15.4}).\n@@ -300,1 +322,3 @@\n-         * {@code RoundingMode.HALF_DOWN} if it's even.  Note that this\n+         * {@code RoundingMode.HALF_DOWN} if it's even.\n+         * @apiNote\n+         * Note that this\n@@ -305,2 +329,2 @@\n-         * the rounding policy used for {@code float} and {@code double}\n-         * arithmetic in Java.\n+         * the rounding policy used for most {@code float} and {@code double}\n+         * arithmetic operators in Java (JLS {@jls 15.4}).\n","filename":"src\/java.base\/share\/classes\/java\/math\/RoundingMode.java","additions":27,"deletions":3,"binary":false,"changes":30,"status":"modified"}]}