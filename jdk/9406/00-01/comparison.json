{"files":[{"patch":"@@ -702,20 +702,0 @@\n-static bool is_locked_by_another_process(const char* dirname, const char* filename, int& fd) {\n-  bool is_locked = false;\n-\n-#if defined(LINUX)\n-  fd = ::open(filename, O_RDONLY);\n-  if (fd >= 0) {\n-    is_locked = (flock(fd, LOCK_EX|LOCK_NB) != 0);\n-    \/\/ The locking protocol works only with JVMs that have the JDK-8286030 fix.\n-    \/\/ If you are sharing the \/tmp difrectory among different containers, do not\n-    \/\/ use older JVMs that don't have this fix.\n-    if (!is_locked) {\n-      ::close(fd);\n-    }\n-  }\n-  log_info(perf, memops)(\"is_locked %s\/%s (fd = %d) = %s\", dirname, filename, fd, is_locked ? \"true\" : \"false\");\n-#endif\n-\n-  return is_locked;\n-}\n-\n@@ -748,2 +728,2 @@\n-\n-    pid_t pid = filename_to_pid(entry->d_name);\n+    const char* filename = entry->d_name;\n+    pid_t pid = filename_to_pid(filename);\n@@ -753,1 +733,1 @@\n-      if (strcmp(entry->d_name, \".\") != 0 && strcmp(entry->d_name, \"..\") != 0) {\n+      if (strcmp(filename, \".\") != 0 && strcmp(filename, \"..\") != 0) {\n@@ -755,1 +735,1 @@\n-        unlink(entry->d_name);\n+        unlink(filename);\n@@ -767,4 +747,2 @@\n-    \/\/ \/tmp directory as the current process. See comments in\n-    \/\/ create_sharedmem_file() and is_locked_by_another_process().\n-    \/\/ If it's already locked by another process, then obviously it's\n-    \/\/ not stale\n+    \/\/ \/tmp directory as the current process. If it's already\n+    \/\/ locked by another process, then obviously it's not stale.\n@@ -783,2 +761,34 @@\n-    int fd = -1;\n-    if (!is_locked_by_another_process(dirname, entry->d_name, fd)) {\n+\n+    bool is_locked_by_another_process = false;\n+ #if defined(LINUX)\n+    \/\/ The locking protocol works only with JVMs that have the JDK-8286030 fix.\n+    \/\/ If you are sharing the \/tmp difrectory among different containers, do not\n+    \/\/ use older JVMs that don't have this fix.\n+    int fd;\n+    RESTARTABLE(os::open(filename, O_RDONLY, 0), fd);\n+    if (fd == OS_ERR) {\n+      \/\/ Something wrong happened. Ignore the error and don't try to remove the\n+      \/\/ file.\n+      continue;\n+    }\n+    int n;\n+    RESTARTABLE(::flock(fd, LOCK_EX|LOCK_NB), n);\n+    if (n != 0) {\n+      if (errno == EWOULDBLOCK) {\n+        \/\/ Another process holds the exclusive lock on this file.\n+        is_locked_by_another_process = true;\n+      } else {\n+        \/\/ Something wrong happened. Ignore the error and don't try to remove the\n+        \/\/ file.\n+        ::close(fd);\n+        continue;\n+      }\n+    } else {\n+      \/\/ I have successfully locked the file. No other process will try to write to\n+      \/\/ it, so I can safely remove it below.\n+    }\n+    log_info(perf, memops)(\"is_locked_by_another_process %s\/%s = %s\", dirname, filename,\n+                            is_locked_by_another_process ? \"true\" : \"false\");\n+#endif\n+\n+    if (!is_locked_by_another_process) {\n@@ -788,1 +798,2 @@\n-        unlink(entry->d_name);\n+        log_info(perf, memops)(\"Remove stale file %s\/%s\", dirname, filename);\n+        unlink(filename);\n@@ -791,5 +802,7 @@\n-    if (fd >= 0) {\n-      \/\/ LINUX: hold the lock to prevent other JVMs from using this file while we\n-      \/\/ are in the middle of deleting it.\n-      ::close(fd);\n-    }\n+\n+ #if defined(LINUX)\n+    \/\/ LINUX: hold the lock to prevent other JVMs from using this file while we\n+    \/\/ are in the middle of deleting it.\n+    ::close(fd);\n+#endif\n+\n@@ -902,1 +915,2 @@\n-  int n = flock(fd, LOCK_EX|LOCK_NB);\n+  int n;\n+  RESTARTABLE(::flock(fd, LOCK_EX|LOCK_NB), n);\n@@ -904,1 +918,4 @@\n-    log_warning(perf, memops)(\"Cannot use file %s\/%s because it is locked by another process\", dirname, filename);\n+    log_warning(perf, memops)(\"Cannot use file %s\/%s because %s\", dirname, filename,\n+                              (errno == EWOULDBLOCK) ?\n+                              \"it is locked by another process\" :\n+                              \"flock() failed\");\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":55,"deletions":38,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-        opts.addJavaOpts(\"-Xlog:os+container=trace\", \"-Xlog:perf+memops\", \"-cp\", \"\/test-classes\/\");\n+        opts.addJavaOpts(\"-Xlog:os+container=trace\", \"-Xlog:perf+memops=debug\", \"-cp\", \"\/test-classes\/\");\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/ShareTmpDir.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}