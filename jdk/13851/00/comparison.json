{"files":[{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.openjdk.jmh.infra.Blackhole;\n@@ -35,6 +34,1 @@\n-    static long val = 0;\n-\n-    @Setup(Level.Invocation)\n-    public void BmSetup() {\n-        val++;\n-    }\n+    private static final int ITERATION = 20000;\n@@ -43,3 +37,8 @@\n-    public int microMaskFromLong_Byte64() {\n-        VectorMask mask = VectorMask.fromLong(ByteVector.SPECIES_64, val);\n-        return mask.laneIsSet(1) ? 1 : 0;\n+    public long microMaskFromLong_Byte64() {\n+        long res = 0;\n+        for (int i = 0; i < ITERATION; i++) {\n+            VectorMask mask = VectorMask.fromLong(ByteVector.SPECIES_64, res);\n+            res += mask.trueCount();\n+        }\n+\n+        return res;\n@@ -49,3 +48,8 @@\n-    public int microMaskFromLong_Byte128() {\n-        VectorMask mask = VectorMask.fromLong(ByteVector.SPECIES_128, val);\n-        return mask.laneIsSet(1) ? 1 : 0;\n+    public long microMaskFromLong_Byte128() {\n+        long res = 0;\n+        for (int i = 0; i < ITERATION; i++) {\n+            VectorMask mask = VectorMask.fromLong(ByteVector.SPECIES_128, res);\n+            res += mask.trueCount();\n+        }\n+\n+        return res;\n@@ -55,3 +59,8 @@\n-    public int microMaskFromLong_Byte256() {\n-        VectorMask mask = VectorMask.fromLong(ByteVector.SPECIES_256, val);\n-        return mask.laneIsSet(1) ? 1 : 0;\n+    public long microMaskFromLong_Byte256() {\n+        long res = 0;\n+        for (int i = 0; i < ITERATION; i++) {\n+            VectorMask mask = VectorMask.fromLong(ByteVector.SPECIES_256, res);\n+            res += mask.trueCount();\n+        }\n+\n+        return res;\n@@ -61,3 +70,8 @@\n-    public int microMaskFromLong_Byte512() {\n-        VectorMask mask = VectorMask.fromLong(ByteVector.SPECIES_512, val);\n-        return mask.laneIsSet(1) ? 1 : 0;\n+    public long microMaskFromLong_Byte512() {\n+        long res = 0;\n+        for (int i = 0; i < ITERATION; i++) {\n+            VectorMask mask = VectorMask.fromLong(ByteVector.SPECIES_512, res);\n+            res += mask.trueCount();\n+        }\n+\n+        return res;\n@@ -67,3 +81,8 @@\n-    public int microMaskFromLong_Short64() {\n-        VectorMask mask = VectorMask.fromLong(ShortVector.SPECIES_64, val);\n-        return mask.laneIsSet(1) ? 1 : 0;\n+    public long microMaskFromLong_Short64() {\n+        long res = 0;\n+        for (int i = 0; i < ITERATION; i++) {\n+            VectorMask mask = VectorMask.fromLong(ShortVector.SPECIES_64, res);\n+            res += mask.trueCount();\n+        }\n+\n+        return res;\n@@ -73,3 +92,8 @@\n-    public int microMaskFromLong_Short128() {\n-        VectorMask mask = VectorMask.fromLong(ShortVector.SPECIES_128, val);\n-        return mask.laneIsSet(1) ? 1 : 0;\n+    public long microMaskFromLong_Short128() {\n+        long res = 0;\n+        for (int i = 0; i < ITERATION; i++) {\n+            VectorMask mask = VectorMask.fromLong(ShortVector.SPECIES_128, res);\n+            res += mask.trueCount();\n+        }\n+\n+        return res;\n@@ -79,3 +103,8 @@\n-    public int microMaskFromLong_Short256() {\n-        VectorMask mask = VectorMask.fromLong(ShortVector.SPECIES_256, val);\n-        return mask.laneIsSet(1) ? 1 : 0;\n+    public long microMaskFromLong_Short256() {\n+        long res = 0;\n+        for (int i = 0; i < ITERATION; i++) {\n+            VectorMask mask = VectorMask.fromLong(ShortVector.SPECIES_256, res);\n+            res += mask.trueCount();\n+        }\n+\n+        return res;\n@@ -85,3 +114,8 @@\n-    public int microMaskFromLong_Short512() {\n-        VectorMask mask = VectorMask.fromLong(ShortVector.SPECIES_512, val);\n-        return mask.laneIsSet(1) ? 1 : 0;\n+    public long microMaskFromLong_Short512() {\n+        long res = 0;\n+        for (int i = 0; i < ITERATION; i++) {\n+            VectorMask mask = VectorMask.fromLong(ShortVector.SPECIES_512, res);\n+            res += mask.trueCount();\n+        }\n+\n+        return res;\n@@ -91,3 +125,8 @@\n-    public int microMaskFromLong_Integer64() {\n-        VectorMask mask = VectorMask.fromLong(IntVector.SPECIES_64, val);\n-        return mask.laneIsSet(1) ? 1 : 0;\n+    public long microMaskFromLong_Integer64() {\n+        long res = 0;\n+        for (int i = 0; i < ITERATION; i++) {\n+            VectorMask mask = VectorMask.fromLong(IntVector.SPECIES_64, res);\n+            res += mask.trueCount();\n+        }\n+\n+        return res;\n@@ -97,3 +136,8 @@\n-    public int microMaskFromLong_Integer128() {\n-        VectorMask mask = VectorMask.fromLong(IntVector.SPECIES_128, val);\n-        return mask.laneIsSet(1) ? 1 : 0;\n+    public long microMaskFromLong_Integer128() {\n+        long res = 0;\n+        for (int i = 0; i < ITERATION; i++) {\n+            VectorMask mask = VectorMask.fromLong(IntVector.SPECIES_128, res);\n+            res += mask.trueCount();\n+        }\n+\n+        return res;\n@@ -103,3 +147,8 @@\n-    public int microMaskFromLong_Integer256() {\n-        VectorMask mask = VectorMask.fromLong(IntVector.SPECIES_256, val);\n-        return mask.laneIsSet(1) ? 1 : 0;\n+    public long microMaskFromLong_Integer256() {\n+        long res = 0;\n+        for (int i = 0; i < ITERATION; i++) {\n+            VectorMask mask = VectorMask.fromLong(IntVector.SPECIES_256, res);\n+            res += mask.trueCount();\n+        }\n+\n+        return res;\n@@ -109,3 +158,8 @@\n-    public int microMaskFromLong_Integer512() {\n-        VectorMask mask = VectorMask.fromLong(IntVector.SPECIES_512, val);\n-        return mask.laneIsSet(1) ? 1 : 0;\n+    public long microMaskFromLong_Integer512() {\n+        long res = 0;\n+        for (int i = 0; i < ITERATION; i++) {\n+            VectorMask mask = VectorMask.fromLong(IntVector.SPECIES_512, res);\n+            res += mask.trueCount();\n+        }\n+\n+        return res;\n@@ -115,3 +169,8 @@\n-    public int microMaskFromLong_Long64() {\n-        VectorMask mask = VectorMask.fromLong(LongVector.SPECIES_64, val);\n-        return mask.laneIsSet(0) ? 1 : 0;\n+    public long microMaskFromLong_Long64() {\n+        long res = 0;\n+        for (int i = 0; i < ITERATION; i++) {\n+            VectorMask mask = VectorMask.fromLong(LongVector.SPECIES_64, res);\n+            res += mask.trueCount();\n+        }\n+\n+        return res;\n@@ -121,3 +180,8 @@\n-    public int microMaskFromLong_Long128() {\n-        VectorMask mask = VectorMask.fromLong(LongVector.SPECIES_128, val);\n-        return mask.laneIsSet(1) ? 1 : 0;\n+    public long microMaskFromLong_Long128() {\n+        long res = 0;\n+        for (int i = 0; i < ITERATION; i++) {\n+            VectorMask mask = VectorMask.fromLong(LongVector.SPECIES_128, res);\n+            res += mask.trueCount();\n+        }\n+\n+        return res;\n@@ -127,3 +191,8 @@\n-    public int microMaskFromLong_Long256() {\n-        VectorMask mask = VectorMask.fromLong(LongVector.SPECIES_256, val);\n-        return mask.laneIsSet(1) ? 1 : 0;\n+    public long microMaskFromLong_Long256() {\n+        long res = 0;\n+        for (int i = 0; i < ITERATION; i++) {\n+            VectorMask mask = VectorMask.fromLong(LongVector.SPECIES_256, res);\n+            res += mask.trueCount();\n+        }\n+\n+        return res;\n@@ -133,3 +202,8 @@\n-    public int microMaskFromLong_Long512() {\n-        VectorMask mask = VectorMask.fromLong(LongVector.SPECIES_512, val);\n-        return mask.laneIsSet(1) ? 1 : 0;\n+    public long microMaskFromLong_Long512() {\n+        long res = 0;\n+        for (int i = 0; i < ITERATION; i++) {\n+            VectorMask mask = VectorMask.fromLong(LongVector.SPECIES_512, res);\n+            res += mask.trueCount();\n+        }\n+\n+        return res;\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskFromLongBenchmark.java","additions":130,"deletions":56,"binary":false,"changes":186,"status":"modified"}]}