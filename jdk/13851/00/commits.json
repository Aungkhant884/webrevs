[{"commit":{"message":"8307523: [vectorapi] Optimize MaskFromLongBenchmark.java\n\nTo avoid dead code elimination, a use-point laneIsSet() is added in\neach benchmark method in MaskFromLongBenchmark.java.\n\nHowever, currently laneIsSet() [1] is implemented by toLong(). So it may\ngenerate a fromLong-toLong pair [2], making this benchmark to be\nnoneffective after inlining laneIsSet() into the outer method. The\nassembly of maskFromLong_byte128 benchmark on SVE2 is shown in [3]. We\ncannot see the bdep instruction used by fromLong on AArch64 [4].\nSo, in this case, we cannot measure fromLong()'s performance by\nusing this benchmark.\n\nThis patch uses trueCount() [5] instead of toLong() to measure the\nfromLong()'s performance effectively. After this patch, we can see the\nbdep instruction in the hot loop [6] of maskFromLong_byte128\nbenchmark.\n\n[1]: https:\/\/github.com\/openjdk\/jdk\/blob\/96fa2751e8bbc05d6d064d80c07720cc9db05c54\/src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractMask.java#L70\n[2]: https:\/\/github.com\/openjdk\/jdk\/blob\/ff368d504e9101e11c7182185f56255f429d31e3\/src\/hotspot\/share\/opto\/vectornode.cpp#L1736\n[3]: https:\/\/gist.github.com\/changpeng1997\/467f6056f78d99c055030fa5888b6baa\n[4]: https:\/\/github.com\/openjdk\/jdk\/blob\/787832a58677205c9a11ae100dd8a2fbddb30a4a\/src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp#L1099\n[5]: https:\/\/docs.oracle.com\/en\/java\/javase\/16\/docs\/api\/jdk.incubator.vector\/jdk\/incubator\/vector\/VectorMask.html#trueCount()\n[6]: https:\/\/gist.github.com\/changpeng1997\/79bea0a9f80530bec89978950897000d"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskFromLongBenchmark.java"}],"sha":"4599f133535c572dd5440fa4971bad2f97a19944"}]