{"files":[{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+\n+#include \"cds.h\"\n+#include \"cds\/cdsConstants.hpp\"\n+#include \"cds\/dynamicArchive.hpp\"\n+#include \"cds\/filemap.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+CDSConst CDSConstants::offsets[] = {\n+  { \"CDSFileMapHeaderBase::_magic\",           offset_of(CDSFileMapHeaderBase, _magic)           },\n+  { \"CDSFileMapHeaderBase::_crc\",             offset_of(CDSFileMapHeaderBase, _crc)             },\n+  { \"CDSFileMapHeaderBase::_version\",         offset_of(CDSFileMapHeaderBase, _version)         },\n+  { \"CDSFileMapHeaderBase::_space[0]\",        offset_of(CDSFileMapHeaderBase, _space)           },\n+  { \"FileMapHeader::_jvm_ident\",              offset_of(FileMapHeader, _jvm_ident)              },\n+  { \"FileMapHeader::_base_archive_name_size\", offset_of(FileMapHeader, _base_archive_name_size) },\n+  { \"CDSFileMapRegion::_crc\",                 offset_of(CDSFileMapRegion, _crc)                 },\n+  { \"CDSFileMapRegion::_used\",                offset_of(CDSFileMapRegion, _used)                },\n+  { \"DynamicArchiveHeader::_base_region_crc\", offset_of(DynamicArchiveHeader, _base_region_crc) }\n+};\n+\n+CDSConst CDSConstants::constants[] = {\n+  { \"static_magic\",                 (size_t)CDS_ARCHIVE_MAGIC         },\n+  { \"dynamic_magic\",                (size_t)CDS_DYNAMIC_ARCHIVE_MAGIC },\n+  { \"int_size\",                     sizeof(int)                       },\n+  { \"CDSFileMapRegion_size\",        sizeof(CDSFileMapRegion)          },\n+  { \"static_file_header_size\",      sizeof(FileMapHeader)             },\n+  { \"dynamic_archive_header_size\",  sizeof(DynamicArchiveHeader)      },\n+  { \"size_t_size\",                  sizeof(size_t)                    }\n+};\n+\n+size_t CDSConstants::get_cds_offset(const char* name) {\n+  for (int i = 0; i < (int)ARRAY_SIZE(offsets); i++) {\n+    if (strcmp(name, offsets[i]._name) == 0) {\n+        return offsets[i]._value;\n+    }\n+  }\n+  return -1;\n+}\n+\n+size_t CDSConstants::get_cds_constant(const char* name) {\n+  for (int i = 0; i < (int)ARRAY_SIZE(constants); i++) {\n+    if (strcmp(name, constants[i]._name) == 0) {\n+        return constants[i]._value;\n+    }\n+  }\n+  return -1;\n+}\n","filename":"src\/hotspot\/share\/cds\/cdsConstants.cpp","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_CDS_CDSCONSTANTS_HPP\n+#define SHARE_CDS_CDSCONSTANTS_HPP\n+\n+#include \"memory\/allStatic.hpp\"\n+typedef struct {\n+  const char* _name;\n+  size_t _value;\n+} CDSConst;\n+\n+class CDSConstants : AllStatic {\n+ private:\n+  static CDSConst offsets[];\n+  static CDSConst constants[];\n+ public:\n+  static size_t get_cds_constant(const char* name);\n+  static size_t get_cds_offset(const char* name);\n+};\n+#endif \/\/ SHARE_CDS_CDSCONSTANTS_HPP\n","filename":"src\/hotspot\/share\/cds\/cdsConstants.hpp","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -1,77 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"cds\/cdsoffsets.hpp\"\n-#include \"cds\/dynamicArchive.hpp\"\n-#include \"cds\/filemap.hpp\"\n-#include \"runtime\/os.hpp\"\n-#include \"memory\/allocation.hpp\"\n-#include \"memory\/allocation.inline.hpp\"\n-#include \"utilities\/macros.hpp\"\n-\n-CDSOffsets::CDSOffsets(const char* name, int offset, CDSOffsets* next) {\n-  _name = NEW_C_HEAP_ARRAY(char, strlen(name) + 1, mtInternal);\n-  strcpy(_name, name);\n-  _offset = offset;\n-  _next = next;\n-}\n-\n-CDSOffsets* CDSOffsets::_all = NULL;\n-#define ADD_NEXT(list, name, value) \\\n-  list->add_end(new CDSOffsets(name, value, NULL))\n-\n-#define CREATE_OFFSET_MAPS                                                                  \\\n-    _all = new CDSOffsets(\"size_t_size\", sizeof(size_t), NULL);                             \\\n-    ADD_NEXT(_all, \"int_size\", sizeof(int));                                                \\\n-    ADD_NEXT(_all, \"FileMapHeader::_magic\", offset_of(FileMapHeader, _magic));              \\\n-    ADD_NEXT(_all, \"FileMapHeader::_crc\", offset_of(FileMapHeader, _crc));                  \\\n-    ADD_NEXT(_all, \"FileMapHeader::_version\", offset_of(FileMapHeader, _version));          \\\n-    ADD_NEXT(_all, \"FileMapHeader::_jvm_ident\", offset_of(FileMapHeader, _jvm_ident));      \\\n-    ADD_NEXT(_all, \"FileMapHeader::_space[0]\", offset_of(FileMapHeader, _space));           \\\n-    ADD_NEXT(_all, \"CDSFileMapRegion::_crc\", offset_of(CDSFileMapRegion, _crc));            \\\n-    ADD_NEXT(_all, \"CDSFileMapRegion::_used\", offset_of(CDSFileMapRegion, _used));          \\\n-    ADD_NEXT(_all, \"file_header_size\", sizeof(FileMapHeader));                              \\\n-    ADD_NEXT(_all, \"DynamicArchiveHeader::_base_region_crc\", offset_of(DynamicArchiveHeader, _base_region_crc)); \\\n-    ADD_NEXT(_all, \"CDSFileMapRegion_size\", sizeof(CDSFileMapRegion));\n-\n-int CDSOffsets::find_offset(const char* name) {\n-  if (_all == NULL) {\n-    CREATE_OFFSET_MAPS\n-  }\n-  CDSOffsets* it = _all;\n-  while(it) {\n-    if (!strcmp(name, it->get_name())) {\n-      return it->get_offset();\n-    }\n-    it = it->next();\n-  }\n-  return -1; \/\/ not found\n-}\n-\n-void CDSOffsets::add_end(CDSOffsets* n) {\n-  CDSOffsets* p = this;\n-  while(p && p->_next) { p = p->_next; }\n-  p->_next = n;\n-}\n","filename":"src\/hotspot\/share\/cds\/cdsoffsets.cpp","additions":0,"deletions":77,"binary":false,"changes":77,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_CDS_CDSOFFSETS_HPP\n-#define SHARE_CDS_CDSOFFSETS_HPP\n-\n-#include \"memory\/allocation.hpp\"\n-\n-class CDSOffsets: public CHeapObj<mtInternal> {\n- private:\n-  char* _name;\n-  int   _offset;\n-  CDSOffsets* _next;\n-  static CDSOffsets* _all;  \/\/ sole list for cds\n- public:\n-  CDSOffsets(const char* name, int offset, CDSOffsets* next);\n-\n-  char* get_name() const { return _name; }\n-  int   get_offset() const { return _offset; }\n-  CDSOffsets* next() const { return _next; }\n-  void add_end(CDSOffsets* n);\n-\n-  static int find_offset(const char* name);\n-};\n-\n-#endif \/\/ SHARE_CDS_CDSOFFSETS_HPP\n","filename":"src\/hotspot\/share\/cds\/cdsoffsets.hpp","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -41,1 +41,1 @@\n-  friend class CDSOffsets;\n+  friend class CDSConstants;\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -183,1 +183,0 @@\n-  friend class CDSOffsets;\n@@ -185,0 +184,1 @@\n+  friend class CDSConstants;\n@@ -186,0 +186,1 @@\n+private:\n@@ -212,1 +213,0 @@\n-\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"cds\/cdsoffsets.hpp\"\n+#include \"cds\/cdsConstants.hpp\"\n@@ -2019,1 +2019,1 @@\n-WB_ENTRY(jint, WB_GetOffsetForName(JNIEnv* env, jobject o, jstring name))\n+WB_ENTRY(jint, WB_GetCDSOffsetForName(JNIEnv* env, jobject o, jstring name))\n@@ -2022,2 +2022,9 @@\n-  int result = CDSOffsets::find_offset(c_name);\n-  return (jint)result;\n+  jint result = (jint)CDSConstants::get_cds_offset(c_name);\n+  return result;\n+WB_END\n+\n+WB_ENTRY(jint, WB_GetCDSConstantForName(JNIEnv* env, jobject o, jstring name))\n+  ResourceMark rm;\n+  char* c_name = java_lang_String::as_utf8_string(JNIHandles::resolve_non_null(name));\n+  jint result = (jint)CDSConstants::get_cds_constant(c_name);\n+  return result;\n@@ -2460,1 +2467,2 @@\n-  {CC\"getOffsetForName0\", CC\"(Ljava\/lang\/String;)I\",  (void*)&WB_GetOffsetForName},\n+  {CC\"getCDSOffsetForName0\", CC\"(Ljava\/lang\/String;)I\",  (void*)&WB_GetCDSOffsetForName},\n+  {CC\"getCDSConstantForName0\", CC\"(Ljava\/lang\/String;)I\",  (void*)&WB_GetCDSConstantForName},\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -48,11 +48,17 @@\n-    public static int offsetMagic;           \/\/ CDSFileMapHeaderBase::_magic\n-    public static int offsetVersion;         \/\/ CDSFileMapHeaderBase::_version\n-    public static int offsetJvmIdent;        \/\/ FileMapHeader::_jvm_ident\n-    public static int spOffsetCrc;           \/\/ CDSFileMapRegion::_crc\n-    public static int fileHeaderSize;        \/\/ total size of header, aligned with alignment\n-    public static int cdsFileMapRegionSize;  \/\/ size of CDSFileMapRegion\n-    public static int spOffset;              \/\/ offset of CDSFileMapRegion\n-    public static int spUsedOffset;          \/\/ offset of CDSFileMapRegion::_used\n-    public static int sizetSize;             \/\/ size of size_t\n-    public static int intSize;               \/\/ size of int\n-    public static long alignment;            \/\/ MetaspaceShared::core_region_alignment\n+    \/\/ offsets\n+    public static int offsetMagic;                \/\/ CDSFileMapHeaderBase::_magic\n+    public static int offsetVersion;              \/\/ CDSFileMapHeaderBase::_version\n+    public static int offsetJvmIdent;             \/\/ FileMapHeader::_jvm_ident\n+    public static int offsetBaseArchiveNameSize;  \/\/ FileMapHeader::_base_archive_name_size\n+    public static int spOffsetCrc;                \/\/ CDSFileMapRegion::_crc\n+    public static int spOffset;                   \/\/ offset of CDSFileMapRegion\n+    public static int spUsedOffset;               \/\/ offset of CDSFileMapRegion::_used\n+    \/\/ constants\n+    public static int staticMagic;                \/\/ static magic value defined in hotspot\n+    public static int dynamicMagic;               \/\/ dyamic magic value defined in hotspot\n+    public static int sizetSize;                  \/\/ size of size_t\n+    public static int intSize;                    \/\/ size of int\n+    public static int staticArchiveHeaderSize;    \/\/ static archive file header size\n+    public static int dynamicArchiveHeaderSize;   \/\/ dynamic archive file header size\n+    public static int cdsFileMapRegionSize;       \/\/ size of CDSFileMapRegion\n+    public static long alignment;                 \/\/ MetaspaceShared::core_region_alignment\n@@ -76,9 +82,16 @@\n-            offsetMagic = wb.getOffsetForName(\"FileMapHeader::_magic\");\n-            offsetVersion = wb.getOffsetForName(\"FileMapHeader::_version\");\n-            offsetJvmIdent = wb.getOffsetForName(\"FileMapHeader::_jvm_ident\");\n-            spOffsetCrc = wb.getOffsetForName(\"CDSFileMapRegion::_crc\");\n-            spOffset = wb.getOffsetForName(\"FileMapHeader::_space[0]\") - offsetMagic;\n-            spUsedOffset = wb.getOffsetForName(\"CDSFileMapRegion::_used\") - spOffsetCrc;\n-            sizetSize = wb.getOffsetForName(\"size_t_size\");\n-            intSize = wb.getOffsetForName(\"int_size\");\n-            cdsFileMapRegionSize  = wb.getOffsetForName(\"CDSFileMapRegion_size\");\n+            \/\/ offsets\n+            offsetMagic = wb.getCDSOffsetForName(\"CDSFileMapHeaderBase::_magic\");\n+            offsetVersion = wb.getCDSOffsetForName(\"CDSFileMapHeaderBase::_version\");\n+            offsetJvmIdent = wb.getCDSOffsetForName(\"FileMapHeader::_jvm_ident\");\n+            offsetBaseArchiveNameSize = wb.getCDSOffsetForName(\"FileMapHeader::_base_archive_name_size\");\n+            spOffsetCrc = wb.getCDSOffsetForName(\"CDSFileMapRegion::_crc\");\n+            spUsedOffset = wb.getCDSOffsetForName(\"CDSFileMapRegion::_used\") - spOffsetCrc;\n+            spOffset = wb.getCDSOffsetForName(\"CDSFileMapHeaderBase::_space[0]\") - offsetMagic;\n+            \/\/ constants\n+            staticMagic = wb.getCDSConstantForName(\"static_magic\");\n+            dynamicMagic = wb.getCDSConstantForName(\"dynamic_magic\");\n+            staticArchiveHeaderSize = wb.getCDSConstantForName(\"static_file_header_size\");\n+            dynamicArchiveHeaderSize = wb.getCDSConstantForName(\"dynamic_archive_header_size\");\n+            sizetSize = wb.getCDSConstantForName(\"size_t_size\");\n+            intSize = wb.getCDSConstantForName(\"int_size\");\n+            cdsFileMapRegionSize  = wb.getCDSConstantForName(\"CDSFileMapRegion_size\");\n@@ -88,1 +101,0 @@\n-            fileHeaderSize = (int)alignUpWithAlignment(wb.getOffsetForName(\"file_header_size\"));\n@@ -94,1 +106,1 @@\n-            int nonExistOffset = wb.getOffsetForName(\"FileMapHeader::_non_exist_offset\");\n+            int nonExistOffset = wb.getCDSOffsetForName(\"FileMapHeader::_non_exist_offset\");\n@@ -101,0 +113,13 @@\n+    public static long fileHeaderSize(File jsaFile) throws Exception {\n+      long magicValue = readInt(jsaFile, offsetMagic, 4);\n+      if (magicValue == staticMagic) {\n+          return alignUpWithAlignment((long)staticArchiveHeaderSize);\n+      } else if (magicValue == dynamicMagic) {\n+          \/\/ dynamic archive store base archive name after header, so we count it in header size.\n+          int baseArchiveNameSize = (int)readInt(jsaFile, (long)offsetBaseArchiveNameSize, 4);\n+          return alignUpWithAlignment((long)dynamicArchiveHeaderSize + baseArchiveNameSize);\n+      } else {\n+          throw new RuntimeException(\"Wrong magic value from archive file: \" + magicValue);\n+      }\n+    }\n+\n@@ -137,1 +162,1 @@\n-        start0 = fileHeaderSize;\n+        start0 = fileHeaderSize(jsaFile);\n@@ -166,1 +191,1 @@\n-        start0 = fileHeaderSize;\n+        start0 = fileHeaderSize(jsaFile);\n@@ -203,1 +228,1 @@\n-        long regionStartOffset = fileHeaderSize;\n+        long regionStartOffset = fileHeaderSize(jsaFile);\n@@ -208,1 +233,1 @@\n-                           + \" (header_size + 0x\" + Long.toHexString(regionStartOffset - fileHeaderSize) + \")\");\n+                           + \" (header_size + 0x\" + Long.toHexString(regionStartOffset - fileHeaderSize(jsaFile)) + \")\");\n@@ -236,1 +261,1 @@\n-        byte[] buf = new byte[fileHeaderSize];\n+        byte[] buf = new byte[(int)fileHeaderSize(jsaFile)];\n@@ -260,0 +285,1 @@\n+\n@@ -268,1 +294,1 @@\n-    private static FileChannel getFileChannel(File file) throws Exception {\n+    private static FileChannel getFileChannel(File file, boolean write) throws Exception {\n@@ -271,1 +297,3 @@\n-        arry.add(WRITE);\n+        if (write) {\n+            arry.add(WRITE);\n+        }\n@@ -276,1 +304,1 @@\n-        try (FileChannel fc = getFileChannel(file)) {\n+        try (FileChannel fc = getFileChannel(file, false \/*read only*\/)) {\n@@ -291,1 +319,1 @@\n-        try (FileChannel fc = getFileChannel(file)) {\n+        try (FileChannel fc = getFileChannel(file, true \/*write*\/)) {\n@@ -298,1 +326,1 @@\n-        try (FileChannel fc = getFileChannel(file)) {\n+        try (FileChannel fc = getFileChannel(file, true \/*write*\/)) {\n@@ -306,1 +334,1 @@\n-        long offset = fileHeaderSize + getRandomBetween(0L, 4096L);\n+        long offset = fileHeaderSize(orgFile) + getRandomBetween(0L, 4096L);\n@@ -321,1 +349,1 @@\n-        long offset = fileHeaderSize + getRandomBetween(0L, 4096L);\n+        long offset = fileHeaderSize(orgFile) + getRandomBetween(0L, 4096L);\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSArchiveUtils.java","additions":62,"deletions":34,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -562,3 +562,3 @@\n-  public native int getOffsetForName0(String name);\n-  public int getOffsetForName(String name) throws Exception {\n-    int offset = getOffsetForName0(name);\n+  public native int getCDSOffsetForName0(String name);\n+  public int getCDSOffsetForName(String name) throws Exception {\n+    int offset = getCDSOffsetForName0(name);\n@@ -570,0 +570,8 @@\n+  public native int getCDSConstantForName0(String name);\n+  public int getCDSConstantForName(String name) throws Exception {\n+    int constant = getCDSConstantForName0(name);\n+    if (constant == -1) {\n+      throw new RuntimeException(name + \" not found\");\n+    }\n+    return constant;\n+  }\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -563,3 +563,3 @@\n-  public native int getOffsetForName0(String name);\n-  public int getOffsetForName(String name) throws Exception {\n-    int offset = getOffsetForName0(name);\n+  public native int getCDSOffsetForName0(String name);\n+  public int getCDSOffsetForName(String name) throws Exception {\n+    int offset = getCDSOffsetForName0(name);\n@@ -571,0 +571,8 @@\n+  public native int getCDSConstantForName0(String name);\n+  public int getCDSConstantForName(String name) throws Exception {\n+    int constant = getCDSConstantForName0(name);\n+    if (constant == -1) {\n+      throw new RuntimeException(name + \" not found\");\n+    }\n+    return constant;\n+  }\n","filename":"test\/lib\/sun\/hotspot\/WhiteBox.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"}]}