{"files":[{"patch":"@@ -40,1 +40,1 @@\n-BFSClosure::BFSClosure(EdgeQueue* edge_queue, EdgeStore* edge_store, BitSet* mark_bits) :\n+BFSClosure::BFSClosure(EdgeQueue* edge_queue, EdgeStore* edge_store, BitSet<mtTracing>* mark_bits) :\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/bfsClosure.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+template<MEMFLAGS F>\n@@ -41,1 +42,1 @@\n-  BitSet* _mark_bits;\n+  BitSet<mtTracing>* _mark_bits;\n@@ -68,1 +69,1 @@\n-  BFSClosure(EdgeQueue* edge_queue, EdgeStore* edge_store, BitSet* mark_bits);\n+  BFSClosure(EdgeQueue* edge_queue, EdgeStore* edge_store, BitSet<mtTracing>* mark_bits);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/bfsClosure.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-                                      BitSet* mark_bits,\n+                                      BitSet<mtTracing>* mark_bits,\n@@ -55,1 +55,1 @@\n-                                          BitSet* mark_bits) {\n+                                          BitSet<mtTracing>* mark_bits) {\n@@ -71,1 +71,1 @@\n-DFSClosure::DFSClosure(EdgeStore* edge_store, BitSet* mark_bits, const Edge* start_edge)\n+DFSClosure::DFSClosure(EdgeStore* edge_store, BitSet<mtTracing>* mark_bits, const Edge* start_edge)\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/dfsClosure.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+template<MEMFLAGS F>\n@@ -44,1 +45,1 @@\n-  BitSet* _mark_bits;\n+  BitSet<mtTracing>* _mark_bits;\n@@ -50,1 +51,1 @@\n-  DFSClosure(EdgeStore* edge_store, BitSet* mark_bits, const Edge* start_edge);\n+  DFSClosure(EdgeStore* edge_store, BitSet<mtTracing>* mark_bits, const Edge* start_edge);\n@@ -58,2 +59,2 @@\n-  static void find_leaks_from_edge(EdgeStore* edge_store, BitSet* mark_bits, const Edge* start_edge);\n-  static void find_leaks_from_root_set(EdgeStore* edge_store, BitSet* mark_bits);\n+  static void find_leaks_from_edge(EdgeStore* edge_store, BitSet<mtTracing>* mark_bits, const Edge* start_edge);\n+  static void find_leaks_from_root_set(EdgeStore* edge_store, BitSet<mtTracing>* mark_bits);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/dfsClosure.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-  BitSet mark_bits;\n+  BitSet<mtTracing> mark_bits;\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/pathToGcRootsOperation.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1340,1 +1340,1 @@\n-  static BitSet* _bitset;\n+  static BitSet<mtServiceability>* _bitset;\n@@ -1344,1 +1344,1 @@\n-    _bitset = new BitSet();\n+    _bitset = new BitSet<mtServiceability>();\n@@ -1364,1 +1364,1 @@\n-BitSet* ObjectMarker::_bitset = NULL;\n+BitSet<mtServiceability>* ObjectMarker::_bitset = NULL;\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-#include \"precompiled.hpp\"\n-#include \"utilities\/bitset.inline.hpp\"\n-\n-BitSet::BitMapFragment::BitMapFragment(uintptr_t granule, BitMapFragment* next) :\n-    _bits(_bitmap_granularity_size >> LogMinObjAlignmentInBytes, mtTracing, true \/* clear *\/),\n-    _next(next) {\n-}\n-\n-BitSet::BitSet() :\n-    _bitmap_fragments(32),\n-    _fragment_list(NULL),\n-    _last_fragment_bits(NULL),\n-    _last_fragment_granule(UINTPTR_MAX) {\n-}\n-\n-BitSet::~BitSet() {\n-  BitMapFragment* current = _fragment_list;\n-  while (current != NULL) {\n-    BitMapFragment* next = current->next();\n-    delete current;\n-    current = next;\n-  }\n-}\n","filename":"src\/hotspot\/share\/utilities\/bitset.cpp","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -36,1 +36,2 @@\n-class BitSet : public CHeapObj<mtTracing> {\n+template<MEMFLAGS F>\n+class BitSet : public CHeapObj<F> {\n@@ -43,2 +44,2 @@\n-  class BitMapFragmentTable : public BasicHashtable<mtTracing> {\n-    class Entry : public BasicHashtableEntry<mtTracing> {\n+  class BitMapFragmentTable : public BasicHashtable<F> {\n+    class Entry : public BasicHashtableEntry<F> {\n@@ -50,1 +51,1 @@\n-        return (Entry*)BasicHashtableEntry<mtTracing>::next();\n+        return (Entry*)BasicHashtableEntry<F>::next();\n@@ -65,1 +66,1 @@\n-      return hash & (BasicHashtable<mtTracing>::table_size() - 1);\n+      return hash & (BasicHashtable<F>::table_size() - 1);\n@@ -69,1 +70,1 @@\n-    BitMapFragmentTable(int table_size) : BasicHashtable<mtTracing>(table_size, sizeof(Entry)) {}\n+    BitMapFragmentTable(int table_size) : BasicHashtable<F>(table_size, sizeof(Entry)) {}\n@@ -100,1 +101,2 @@\n-class BitSet::BitMapFragment : public CHeapObj<mtTracing> {\n+template<MEMFLAGS F>\n+class BitSet<F>::BitMapFragment : public CHeapObj<F> {\n","filename":"src\/hotspot\/share\/utilities\/bitset.hpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -34,2 +34,4 @@\n-inline BitSet::BitMapFragmentTable::Entry* BitSet::BitMapFragmentTable::bucket(int i) const {\n-  return (Entry*)BasicHashtable<mtTracing>::bucket(i);\n+template<MEMFLAGS F>\n+BitSet<F>::BitMapFragment::BitMapFragment(uintptr_t granule, BitMapFragment* next) :\n+        _bits(_bitmap_granularity_size >> LogMinObjAlignmentInBytes, F, true \/* clear *\/),\n+        _next(next) {\n@@ -38,4 +40,28 @@\n-inline BitSet::BitMapFragmentTable::Entry* BitSet::BitMapFragmentTable::new_entry(unsigned int hash,\n-                                                                                  uintptr_t key,\n-                                                                                  CHeapBitMap* value) {\n-  Entry* entry = (Entry*)BasicHashtable<mtTracing>::new_entry(hash);\n+template<MEMFLAGS F>\n+BitSet<F>::BitSet() :\n+        _bitmap_fragments(32),\n+        _fragment_list(NULL),\n+        _last_fragment_bits(NULL),\n+        _last_fragment_granule(UINTPTR_MAX) {\n+}\n+\n+template<MEMFLAGS F>\n+BitSet<F>::~BitSet() {\n+  BitMapFragment* current = _fragment_list;\n+  while (current != NULL) {\n+    BitMapFragment* next = current->next();\n+    delete current;\n+    current = next;\n+  }\n+}\n+\n+template<MEMFLAGS F>\n+inline typename BitSet<F>::BitMapFragmentTable::Entry* BitSet<F>::BitMapFragmentTable::bucket(int i) const {\n+  return (Entry*)BasicHashtable<F>::bucket(i);\n+}\n+\n+template<MEMFLAGS F>\n+inline typename BitSet<F>::BitMapFragmentTable::Entry* BitSet<F>::BitMapFragmentTable::new_entry(unsigned int hash,\n+                                                                                                 uintptr_t key,\n+                                                                                                 CHeapBitMap* value) {\n+  Entry* entry = (Entry*)BasicHashtable<F>::new_entry(hash);\n@@ -47,1 +73,2 @@\n-inline void BitSet::BitMapFragmentTable::add(uintptr_t key, CHeapBitMap* value) {\n+template<MEMFLAGS F>\n+inline void BitSet<F>::BitMapFragmentTable::add(uintptr_t key, CHeapBitMap* value) {\n@@ -50,1 +77,1 @@\n-  BasicHashtable<mtTracing>::add_entry(hash_to_index(hash), entry);\n+  BasicHashtable<F>::add_entry(hash_to_index(hash), entry);\n@@ -53,1 +80,2 @@\n-inline CHeapBitMap** BitSet::BitMapFragmentTable::lookup(uintptr_t key) {\n+template<MEMFLAGS F>\n+inline CHeapBitMap** BitSet<F>::BitMapFragmentTable::lookup(uintptr_t key) {\n@@ -64,1 +92,2 @@\n-inline BitMap::idx_t BitSet::addr_to_bit(uintptr_t addr) const {\n+template<MEMFLAGS F>\n+inline BitMap::idx_t BitSet<F>::addr_to_bit(uintptr_t addr) const {\n@@ -68,1 +97,2 @@\n-inline CHeapBitMap* BitSet::get_fragment_bits(uintptr_t addr) {\n+template<MEMFLAGS F>\n+inline CHeapBitMap* BitSet<F>::get_fragment_bits(uintptr_t addr) {\n@@ -94,1 +124,2 @@\n-inline void BitSet::mark_obj(uintptr_t addr) {\n+template<MEMFLAGS F>\n+inline void BitSet<F>::mark_obj(uintptr_t addr) {\n@@ -100,1 +131,2 @@\n-inline bool BitSet::is_marked(uintptr_t addr) {\n+template<MEMFLAGS F>\n+inline bool BitSet<F>::is_marked(uintptr_t addr) {\n","filename":"src\/hotspot\/share\/utilities\/bitset.inline.hpp","additions":45,"deletions":13,"binary":false,"changes":58,"status":"modified"}]}