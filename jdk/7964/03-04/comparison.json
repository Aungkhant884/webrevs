{"files":[{"patch":"@@ -38,1 +38,1 @@\n-#include \"utilities\/bitset.inline.hpp\"\n+#include \"utilities\/objectBitSet.inline.hpp\"\n@@ -40,1 +40,1 @@\n-BFSClosure::BFSClosure(EdgeQueue* edge_queue, EdgeStore* edge_store, BitSet<mtTracing>* mark_bits) :\n+BFSClosure::BFSClosure(EdgeQueue* edge_queue, EdgeStore* edge_store, JFRBitSet* mark_bits) :\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/bfsClosure.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-template<MEMFLAGS F>\n-class BitSet;\n@@ -36,0 +34,4 @@\n+template<MEMFLAGS F>\n+class ObjectBitSet;\n+\n+typedef ObjectBitSet<mtTracing> JFRBitSet;\n@@ -42,1 +44,1 @@\n-  BitSet<mtTracing>* _mark_bits;\n+  JFRBitSet* _mark_bits;\n@@ -69,1 +71,1 @@\n-  BFSClosure(EdgeQueue* edge_queue, EdgeStore* edge_store, BitSet<mtTracing>* mark_bits);\n+  BFSClosure(EdgeQueue* edge_queue, EdgeStore* edge_store, JFRBitSet* mark_bits);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/bfsClosure.hpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-#include \"utilities\/bitset.inline.hpp\"\n+#include \"utilities\/objectBitSet.inline.hpp\"\n@@ -43,1 +43,1 @@\n-                                      BitSet<mtTracing>* mark_bits,\n+                                      JFRBitSet* mark_bits,\n@@ -55,1 +55,1 @@\n-                                          BitSet<mtTracing>* mark_bits) {\n+                                          JFRBitSet* mark_bits) {\n@@ -71,1 +71,1 @@\n-DFSClosure::DFSClosure(EdgeStore* edge_store, BitSet<mtTracing>* mark_bits, const Edge* start_edge)\n+DFSClosure::DFSClosure(EdgeStore* edge_store, JFRBitSet* mark_bits, const Edge* start_edge)\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/dfsClosure.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-template<MEMFLAGS F>\n-class BitSet;\n@@ -36,0 +34,4 @@\n+template<MEMFLAGS F>\n+class ObjectBitSet;\n+\n+typedef ObjectBitSet<mtTracing> JFRBitSet;\n@@ -45,1 +47,1 @@\n-  BitSet<mtTracing>* _mark_bits;\n+  JFRBitSet* _mark_bits;\n@@ -51,1 +53,1 @@\n-  DFSClosure(EdgeStore* edge_store, BitSet<mtTracing>* mark_bits, const Edge* start_edge);\n+  DFSClosure(EdgeStore* edge_store, JFRBitSet* mark_bits, const Edge* start_edge);\n@@ -59,2 +61,2 @@\n-  static void find_leaks_from_edge(EdgeStore* edge_store, BitSet<mtTracing>* mark_bits, const Edge* start_edge);\n-  static void find_leaks_from_root_set(EdgeStore* edge_store, BitSet<mtTracing>* mark_bits);\n+  static void find_leaks_from_edge(EdgeStore* edge_store, JFRBitSet* mark_bits, const Edge* start_edge);\n+  static void find_leaks_from_root_set(EdgeStore* edge_store, JFRBitSet* mark_bits);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/dfsClosure.hpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-#include \"utilities\/bitset.inline.hpp\"\n+#include \"utilities\/objectBitSet.inline.hpp\"\n@@ -87,1 +87,1 @@\n-  BitSet<mtTracing> mark_bits;\n+  JFRBitSet mark_bits;\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/pathToGcRootsOperation.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-#include \"utilities\/bitset.inline.hpp\"\n+#include \"utilities\/objectBitSet.inline.hpp\"\n@@ -71,0 +71,2 @@\n+typedef ObjectBitSet<mtServiceability> JVMTIBitSet;\n+\n@@ -1335,31 +1337,0 @@\n-\/\/ Stack allocated class to help ensure that ObjectMarker is used\n-\/\/ correctly. Constructor initializes ObjectMarker, destructor calls\n-\/\/ ObjectMarker's done() function to restore object headers.\n-class ObjectMarker : public StackObj {\n-private:\n-  static BitSet<mtServiceability>* _bitset;\n-public:\n-  ObjectMarker() {\n-    assert(_bitset == NULL, \"don't initialize bitset twice\");\n-    _bitset = new BitSet<mtServiceability>();\n-  }\n-\n-  ~ObjectMarker() {\n-    assert(_bitset != NULL, \"bitset must be initialized\");\n-    delete _bitset;\n-    _bitset = NULL;\n-  }\n-\n-  static void mark(oop o) {\n-    assert(_bitset != NULL, \"bitset must be initialized\");\n-    _bitset->mark_obj(o);\n-  }\n-\n-  static bool is_marked(oop o) {\n-    assert(_bitset != NULL, \"bitset must be initialized\");\n-    return _bitset->is_marked(o);\n-  }\n-};\n-\n-BitSet<mtServiceability>* ObjectMarker::_bitset = NULL;\n-\n@@ -1498,0 +1469,1 @@\n+  static JVMTIBitSet* _bitset;\n@@ -1507,1 +1479,1 @@\n-    if (!ObjectMarker::is_marked(obj)) visit_stack()->push(obj);\n+    if (!_bitset->is_marked(obj)) visit_stack()->push(obj);\n@@ -1538,1 +1510,2 @@\n-                                             BasicHeapWalkContext context);\n+                                             BasicHeapWalkContext context,\n+                                             JVMTIBitSet* bitset);\n@@ -1544,1 +1517,2 @@\n-                                                AdvancedHeapWalkContext context);\n+                                                AdvancedHeapWalkContext context,\n+                                                JVMTIBitSet* bitset);\n@@ -1577,0 +1551,1 @@\n+JVMTIBitSet* CallbackInvoker::_bitset;\n@@ -1582,1 +1557,2 @@\n-                                                     BasicHeapWalkContext context) {\n+                                                     BasicHeapWalkContext context,\n+                                                     JVMTIBitSet* bitset) {\n@@ -1589,0 +1565,1 @@\n+  _bitset = bitset;\n@@ -1595,1 +1572,2 @@\n-                                                        AdvancedHeapWalkContext context) {\n+                                                        AdvancedHeapWalkContext context,\n+                                                        JVMTIBitSet* bitset) {\n@@ -1602,0 +1580,1 @@\n+  _bitset = bitset;\n@@ -2273,0 +2252,2 @@\n+  JVMTIBitSet* _bitset;\n+\n@@ -2340,0 +2321,1 @@\n+  _bitset = new ObjectBitSet<mtServiceability>();\n@@ -2341,2 +2323,1 @@\n-\n-  CallbackInvoker::initialize_for_basic_heap_walk(tag_map, _visit_stack, user_data, callbacks);\n+  CallbackInvoker::initialize_for_basic_heap_walk(tag_map, _visit_stack, user_data, callbacks, _bitset);\n@@ -2357,2 +2338,2 @@\n-\n-  CallbackInvoker::initialize_for_advanced_heap_walk(tag_map, _visit_stack, user_data, callbacks);\n+  _bitset = new ObjectBitSet<mtServiceability>();\n+  CallbackInvoker::initialize_for_advanced_heap_walk(tag_map, _visit_stack, user_data, callbacks, _bitset);\n@@ -2367,0 +2348,1 @@\n+  delete _bitset;\n@@ -2794,2 +2776,2 @@\n-  assert(!ObjectMarker::is_marked(o), \"can't visit same object more than once\");\n-  ObjectMarker::mark(o);\n+  assert(!_bitset->is_marked(o), \"can't visit same object more than once\");\n+  _bitset->mark_obj(o);\n@@ -2824,1 +2806,0 @@\n-  ObjectMarker marker;\n@@ -2849,1 +2830,1 @@\n-      if (!ObjectMarker::is_marked(o)) {\n+      if (!_bitset->is_marked(o)) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp","additions":26,"deletions":45,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -1,118 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_UTILITIES_BITSET_HPP\n-#define SHARE_UTILITIES_BITSET_HPP\n-\n-#include \"memory\/allocation.hpp\"\n-#include \"oops\/oop.hpp\"\n-#include \"oops\/oopsHierarchy.hpp\"\n-#include \"utilities\/bitMap.hpp\"\n-#include \"utilities\/hashtable.hpp\"\n-\n-class MemRegion;\n-\n-template<MEMFLAGS F>\n-class BitSet : public CHeapObj<F> {\n-  const static size_t _bitmap_granularity_shift = 26; \/\/ 64M\n-  const static size_t _bitmap_granularity_size = (size_t)1 << _bitmap_granularity_shift;\n-  const static size_t _bitmap_granularity_mask = _bitmap_granularity_size - 1;\n-\n-  class BitMapFragment;\n-\n-  class BitMapFragmentTable : public BasicHashtable<F> {\n-    class Entry : public BasicHashtableEntry<F> {\n-    public:\n-      uintptr_t _key;\n-      CHeapBitMap* _value;\n-\n-      Entry* next() {\n-        return (Entry*)BasicHashtableEntry<F>::next();\n-      }\n-    };\n-\n-  protected:\n-    Entry* bucket(int i) const;\n-\n-    Entry* new_entry(unsigned int hashValue, uintptr_t key, CHeapBitMap* value);\n-\n-    unsigned hash_segment(uintptr_t key) {\n-      unsigned hash = (unsigned)key;\n-      return hash ^ (hash >> 3);\n-    }\n-\n-    unsigned hash_to_index(unsigned hash) {\n-      return hash & (BasicHashtable<F>::table_size() - 1);\n-    }\n-\n-  public:\n-    BitMapFragmentTable(int table_size) : BasicHashtable<F>(table_size, sizeof(Entry)) {}\n-    void add(uintptr_t key, CHeapBitMap* value);\n-    CHeapBitMap** lookup(uintptr_t key);\n-  };\n-\n-  CHeapBitMap* get_fragment_bits(uintptr_t addr);\n-\n-  BitMapFragmentTable _bitmap_fragments;\n-  BitMapFragment* _fragment_list;\n-  CHeapBitMap* _last_fragment_bits;\n-  uintptr_t _last_fragment_granule;\n-\n- public:\n-  BitSet();\n-  ~BitSet();\n-\n-  BitMap::idx_t addr_to_bit(uintptr_t addr) const;\n-\n-  void mark_obj(uintptr_t addr);\n-\n-  void mark_obj(oop obj) {\n-    return mark_obj(cast_from_oop<uintptr_t>(obj));\n-  }\n-\n-  bool is_marked(uintptr_t addr);\n-\n-  bool is_marked(oop obj) {\n-    return is_marked(cast_from_oop<uintptr_t>(obj));\n-  }\n-};\n-\n-template<MEMFLAGS F>\n-class BitSet<F>::BitMapFragment : public CHeapObj<F> {\n-  CHeapBitMap _bits;\n-  BitMapFragment* _next;\n-\n-public:\n-  BitMapFragment(uintptr_t granule, BitMapFragment* next);\n-\n-  BitMapFragment* next() const {\n-    return _next;\n-  }\n-\n-  CHeapBitMap* bits() {\n-    return &_bits;\n-  }\n-};\n-\n-#endif \/\/ SHARE_UTILITIES_BITSET_HPP\n","filename":"src\/hotspot\/share\/utilities\/bitset.hpp","additions":0,"deletions":118,"binary":false,"changes":118,"status":"deleted"},{"patch":"@@ -1,138 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_UTILITIES_BITSET_INLINE_HPP\n-#define SHARE_UTILITIES_BITSET_INLINE_HPP\n-\n-#include \"utilities\/bitset.hpp\"\n-\n-#include \"memory\/memRegion.hpp\"\n-#include \"utilities\/bitMap.inline.hpp\"\n-#include \"utilities\/hashtable.inline.hpp\"\n-\n-template<MEMFLAGS F>\n-BitSet<F>::BitMapFragment::BitMapFragment(uintptr_t granule, BitMapFragment* next) :\n-        _bits(_bitmap_granularity_size >> LogMinObjAlignmentInBytes, F, true \/* clear *\/),\n-        _next(next) {\n-}\n-\n-template<MEMFLAGS F>\n-BitSet<F>::BitSet() :\n-        _bitmap_fragments(32),\n-        _fragment_list(NULL),\n-        _last_fragment_bits(NULL),\n-        _last_fragment_granule(UINTPTR_MAX) {\n-}\n-\n-template<MEMFLAGS F>\n-BitSet<F>::~BitSet() {\n-  BitMapFragment* current = _fragment_list;\n-  while (current != NULL) {\n-    BitMapFragment* next = current->next();\n-    delete current;\n-    current = next;\n-  }\n-}\n-\n-template<MEMFLAGS F>\n-inline typename BitSet<F>::BitMapFragmentTable::Entry* BitSet<F>::BitMapFragmentTable::bucket(int i) const {\n-  return (Entry*)BasicHashtable<F>::bucket(i);\n-}\n-\n-template<MEMFLAGS F>\n-inline typename BitSet<F>::BitMapFragmentTable::Entry* BitSet<F>::BitMapFragmentTable::new_entry(unsigned int hash,\n-                                                                                                 uintptr_t key,\n-                                                                                                 CHeapBitMap* value) {\n-  Entry* entry = (Entry*)BasicHashtable<F>::new_entry(hash);\n-  entry->_key = key;\n-  entry->_value = value;\n-  return entry;\n-}\n-\n-template<MEMFLAGS F>\n-inline void BitSet<F>::BitMapFragmentTable::add(uintptr_t key, CHeapBitMap* value) {\n-  unsigned hash = hash_segment(key);\n-  Entry* entry = new_entry(hash, key, value);\n-  BasicHashtable<F>::add_entry(hash_to_index(hash), entry);\n-}\n-\n-template<MEMFLAGS F>\n-inline CHeapBitMap** BitSet<F>::BitMapFragmentTable::lookup(uintptr_t key) {\n-  unsigned hash = hash_segment(key);\n-  int index = hash_to_index(hash);\n-  for (Entry* e = bucket(index); e != NULL; e = e->next()) {\n-    if (e->hash() == hash && e->_key == key) {\n-      return &(e->_value);\n-    }\n-  }\n-  return NULL;\n-}\n-\n-template<MEMFLAGS F>\n-inline BitMap::idx_t BitSet<F>::addr_to_bit(uintptr_t addr) const {\n-  return (addr & _bitmap_granularity_mask) >> LogMinObjAlignmentInBytes;\n-}\n-\n-template<MEMFLAGS F>\n-inline CHeapBitMap* BitSet<F>::get_fragment_bits(uintptr_t addr) {\n-  uintptr_t granule = addr >> _bitmap_granularity_shift;\n-  if (granule == _last_fragment_granule) {\n-    return _last_fragment_bits;\n-  }\n-  CHeapBitMap* bits = NULL;\n-\n-  CHeapBitMap** found = _bitmap_fragments.lookup(granule);\n-  if (found != NULL) {\n-    bits = *found;\n-  } else {\n-    BitMapFragment* fragment = new BitMapFragment(granule, _fragment_list);\n-    bits = fragment->bits();\n-    _fragment_list = fragment;\n-    if (_bitmap_fragments.number_of_entries() * 100 \/ _bitmap_fragments.table_size() > 25) {\n-      _bitmap_fragments.resize(_bitmap_fragments.table_size() * 2);\n-    }\n-    _bitmap_fragments.add(granule, bits);\n-  }\n-\n-  _last_fragment_bits = bits;\n-  _last_fragment_granule = granule;\n-\n-  return bits;\n-}\n-\n-template<MEMFLAGS F>\n-inline void BitSet<F>::mark_obj(uintptr_t addr) {\n-  CHeapBitMap* bits = get_fragment_bits(addr);\n-  const BitMap::idx_t bit = addr_to_bit(addr);\n-  bits->set_bit(bit);\n-}\n-\n-template<MEMFLAGS F>\n-inline bool BitSet<F>::is_marked(uintptr_t addr) {\n-  CHeapBitMap* bits = get_fragment_bits(addr);\n-  const BitMap::idx_t bit = addr_to_bit(addr);\n-  return bits->at(bit);\n-}\n-\n-#endif \/\/ SHARE_UTILITIES_BITSET_INLINE_HPP\n","filename":"src\/hotspot\/share\/utilities\/bitset.inline.hpp","additions":0,"deletions":138,"binary":false,"changes":138,"status":"deleted"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_UTILITIES_OBJECTBITSET_HPP\n+#define SHARE_UTILITIES_OBJECTBITSET_HPP\n+\n+#include \"memory\/allocation.hpp\"\n+#include \"oops\/oop.hpp\"\n+#include \"oops\/oopsHierarchy.hpp\"\n+#include \"utilities\/bitMap.hpp\"\n+#include \"utilities\/hashtable.hpp\"\n+\n+class MemRegion;\n+\n+\/*\n+ * ObjectBitSet is a sparse bitmap for marking objects in the Java heap.\n+ * It holds one bit per ObjAlignmentInBytes-aligned address. Its underlying backing memory is\n+ * allocated on-demand only, in fragments covering 64M heap ranges. Fragments are never deleted\n+ * during the lifetime of the ObjectBitSet. The underlying memory is allocated from C-Heap.\n+ *\/\n+template<MEMFLAGS F>\n+class ObjectBitSet : public CHeapObj<F> {\n+  const static size_t _bitmap_granularity_shift = 26; \/\/ 64M\n+  const static size_t _bitmap_granularity_size = (size_t)1 << _bitmap_granularity_shift;\n+  const static size_t _bitmap_granularity_mask = _bitmap_granularity_size - 1;\n+\n+  class BitMapFragment;\n+\n+  class BitMapFragmentTable : public BasicHashtable<F> {\n+    class Entry : public BasicHashtableEntry<F> {\n+    public:\n+      uintptr_t _key;\n+      CHeapBitMap* _value;\n+\n+      Entry* next() {\n+        return (Entry*)BasicHashtableEntry<F>::next();\n+      }\n+    };\n+\n+  protected:\n+    Entry* bucket(int i) const;\n+\n+    Entry* new_entry(unsigned int hashValue, uintptr_t key, CHeapBitMap* value);\n+\n+    unsigned hash_segment(uintptr_t key) {\n+      unsigned hash = (unsigned)key;\n+      return hash ^ (hash >> 3);\n+    }\n+\n+    unsigned hash_to_index(unsigned hash) {\n+      return hash & (BasicHashtable<F>::table_size() - 1);\n+    }\n+\n+  public:\n+    BitMapFragmentTable(int table_size) : BasicHashtable<F>(table_size, sizeof(Entry)) {}\n+    void add(uintptr_t key, CHeapBitMap* value);\n+    CHeapBitMap** lookup(uintptr_t key);\n+  };\n+\n+  CHeapBitMap* get_fragment_bits(uintptr_t addr);\n+\n+  BitMapFragmentTable _bitmap_fragments;\n+  BitMapFragment* _fragment_list;\n+  CHeapBitMap* _last_fragment_bits;\n+  uintptr_t _last_fragment_granule;\n+\n+ public:\n+  ObjectBitSet();\n+  ~ObjectBitSet();\n+\n+  BitMap::idx_t addr_to_bit(uintptr_t addr) const;\n+\n+  void mark_obj(uintptr_t addr);\n+\n+  void mark_obj(oop obj) {\n+    return mark_obj(cast_from_oop<uintptr_t>(obj));\n+  }\n+\n+  bool is_marked(uintptr_t addr);\n+\n+  bool is_marked(oop obj) {\n+    return is_marked(cast_from_oop<uintptr_t>(obj));\n+  }\n+};\n+\n+template<MEMFLAGS F>\n+class ObjectBitSet<F>::BitMapFragment : public CHeapObj<F> {\n+  CHeapBitMap _bits;\n+  BitMapFragment* _next;\n+\n+public:\n+  BitMapFragment(uintptr_t granule, BitMapFragment* next);\n+\n+  BitMapFragment* next() const {\n+    return _next;\n+  }\n+\n+  CHeapBitMap* bits() {\n+    return &_bits;\n+  }\n+};\n+\n+#endif \/\/ SHARE_UTILITIES_OBJECTBITSET_HPP\n","filename":"src\/hotspot\/share\/utilities\/objectBitSet.hpp","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_UTILITIES_OBJECTBITSET_INLINE_HPP\n+#define SHARE_UTILITIES_OBJECTBITSET_INLINE_HPP\n+\n+#include \"utilities\/objectBitSet.hpp\"\n+\n+#include \"memory\/memRegion.hpp\"\n+#include \"utilities\/bitMap.inline.hpp\"\n+#include \"utilities\/hashtable.inline.hpp\"\n+\n+template<MEMFLAGS F>\n+ObjectBitSet<F>::BitMapFragment::BitMapFragment(uintptr_t granule, BitMapFragment* next) :\n+        _bits(_bitmap_granularity_size >> LogMinObjAlignmentInBytes, F, true \/* clear *\/),\n+        _next(next) {\n+}\n+\n+template<MEMFLAGS F>\n+ObjectBitSet<F>::ObjectBitSet() :\n+        _bitmap_fragments(32),\n+        _fragment_list(NULL),\n+        _last_fragment_bits(NULL),\n+        _last_fragment_granule(UINTPTR_MAX) {\n+}\n+\n+template<MEMFLAGS F>\n+ObjectBitSet<F>::~ObjectBitSet() {\n+  BitMapFragment* current = _fragment_list;\n+  while (current != NULL) {\n+    BitMapFragment* next = current->next();\n+    delete current;\n+    current = next;\n+  }\n+}\n+\n+template<MEMFLAGS F>\n+inline typename ObjectBitSet<F>::BitMapFragmentTable::Entry* ObjectBitSet<F>::BitMapFragmentTable::bucket(int i) const {\n+  return (Entry*)BasicHashtable<F>::bucket(i);\n+}\n+\n+template<MEMFLAGS F>\n+inline typename ObjectBitSet<F>::BitMapFragmentTable::Entry*\n+  ObjectBitSet<F>::BitMapFragmentTable::new_entry(unsigned int hash, uintptr_t key, CHeapBitMap* value) {\n+\n+  Entry* entry = (Entry*)BasicHashtable<F>::new_entry(hash);\n+  entry->_key = key;\n+  entry->_value = value;\n+  return entry;\n+}\n+\n+template<MEMFLAGS F>\n+inline void ObjectBitSet<F>::BitMapFragmentTable::add(uintptr_t key, CHeapBitMap* value) {\n+  unsigned hash = hash_segment(key);\n+  Entry* entry = new_entry(hash, key, value);\n+  BasicHashtable<F>::add_entry(hash_to_index(hash), entry);\n+}\n+\n+template<MEMFLAGS F>\n+inline CHeapBitMap** ObjectBitSet<F>::BitMapFragmentTable::lookup(uintptr_t key) {\n+  unsigned hash = hash_segment(key);\n+  int index = hash_to_index(hash);\n+  for (Entry* e = bucket(index); e != NULL; e = e->next()) {\n+    if (e->hash() == hash && e->_key == key) {\n+      return &(e->_value);\n+    }\n+  }\n+  return NULL;\n+}\n+\n+template<MEMFLAGS F>\n+inline BitMap::idx_t ObjectBitSet<F>::addr_to_bit(uintptr_t addr) const {\n+  return (addr & _bitmap_granularity_mask) >> LogMinObjAlignmentInBytes;\n+}\n+\n+template<MEMFLAGS F>\n+inline CHeapBitMap* ObjectBitSet<F>::get_fragment_bits(uintptr_t addr) {\n+  uintptr_t granule = addr >> _bitmap_granularity_shift;\n+  if (granule == _last_fragment_granule) {\n+    return _last_fragment_bits;\n+  }\n+  CHeapBitMap* bits = NULL;\n+\n+  CHeapBitMap** found = _bitmap_fragments.lookup(granule);\n+  if (found != NULL) {\n+    bits = *found;\n+  } else {\n+    BitMapFragment* fragment = new BitMapFragment(granule, _fragment_list);\n+    bits = fragment->bits();\n+    _fragment_list = fragment;\n+    if (_bitmap_fragments.number_of_entries() * 100 \/ _bitmap_fragments.table_size() > 25) {\n+      _bitmap_fragments.resize(_bitmap_fragments.table_size() * 2);\n+    }\n+    _bitmap_fragments.add(granule, bits);\n+  }\n+\n+  _last_fragment_bits = bits;\n+  _last_fragment_granule = granule;\n+\n+  return bits;\n+}\n+\n+template<MEMFLAGS F>\n+inline void ObjectBitSet<F>::mark_obj(uintptr_t addr) {\n+  CHeapBitMap* bits = get_fragment_bits(addr);\n+  const BitMap::idx_t bit = addr_to_bit(addr);\n+  bits->set_bit(bit);\n+}\n+\n+template<MEMFLAGS F>\n+inline bool ObjectBitSet<F>::is_marked(uintptr_t addr) {\n+  CHeapBitMap* bits = get_fragment_bits(addr);\n+  const BitMap::idx_t bit = addr_to_bit(addr);\n+  return bits->at(bit);\n+}\n+\n+#endif \/\/ SHARE_UTILITIES_OBJECTBITSET_INLINE_HPP\n","filename":"src\/hotspot\/share\/utilities\/objectBitSet.inline.hpp","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"}]}