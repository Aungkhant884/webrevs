{"files":[{"patch":"@@ -41,0 +41,1 @@\n+#include \"gc\/shared\/objectMarker.hpp\"\n@@ -658,0 +659,4 @@\n+\n+ObjectMarker* CollectedHeap::init_object_marker() {\n+  return new HeaderObjectMarker();\n+}\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+class ObjectMarker;\n+class ObjectMarkerController;\n@@ -99,0 +101,1 @@\n+  friend class ObjectMarkerController;\n@@ -430,0 +433,2 @@\n+  virtual ObjectMarker* init_object_marker();\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"gc\/shared\/collectedHeap.hpp\"\n+#include \"gc\/shared\/objectMarker.hpp\"\n+#include \"memory\/universe.hpp\"\n+#include \"oops\/markWord.hpp\"\n+#include \"oops\/oop.inline.hpp\"\n+#include \"utilities\/growableArray.hpp\"\n+\n+ObjectMarker* ObjectMarkerController::_marker = NULL;\n+\n+ObjectMarkerController::ObjectMarkerController() {\n+  \/\/ prepare heap for iteration\n+  CollectedHeap* heap = Universe::heap();\n+  heap->ensure_parsability(false);  \/\/ no need to retire TLABs\n+  _marker = heap->init_object_marker();\n+}\n+\n+ObjectMarkerController::~ObjectMarkerController() {\n+  delete _marker;\n+  _marker = NULL;\n+}\n+\n+void ObjectMarkerController::mark(oop o) {\n+  assert(_marker != NULL, \"need object marker\");\n+  _marker->mark(o);\n+}\n+\n+bool ObjectMarkerController::is_marked(oop o) {\n+  assert(_marker != NULL, \"need object marker\");\n+  return _marker->is_marked(o);\n+}\n+\n+void ObjectMarkerController::set_needs_reset(bool needs_reset) {\n+  assert(_marker != NULL, \"need object marker\");\n+  return _marker->set_needs_reset(needs_reset);\n+}\n+\n+class RestoreMarksClosure : public ObjectClosure {\n+public:\n+  void do_object(oop o) {\n+    if (o != NULL) {\n+      markWord mark = o->mark();\n+      if (mark.is_marked()) {\n+        o->init_mark();\n+      }\n+    }\n+  }\n+};\n+\n+HeaderObjectMarker::HeaderObjectMarker() :\n+ _saved_oop_stack(new (ResourceObj::C_HEAP, mtGC) GrowableArray<oop>(4000, mtGC)),\n+ _saved_mark_stack(new (ResourceObj::C_HEAP, mtGC) GrowableArray<markWord>(4000, mtGC)),\n+ _needs_reset(false) {\n+}\n+\n+\/\/ object marking done, so restore headers\n+HeaderObjectMarker::~HeaderObjectMarker() {\n+  \/\/ iterate over all objects and restore the mark bits to\n+  \/\/ their initial value\n+  RestoreMarksClosure blk;\n+  if (_needs_reset) {\n+    Universe::heap()->object_iterate(&blk);\n+  }\n+\n+  \/\/ Now restore the interesting headers\n+  for (int i = 0; i < _saved_oop_stack->length(); i++) {\n+    oop o = _saved_oop_stack->at(i);\n+    markWord mark = _saved_mark_stack->at(i);\n+    o->set_mark(mark);\n+  }\n+\n+  \/\/ free the stacks\n+  delete _saved_oop_stack;\n+  delete _saved_mark_stack;\n+}\n+\n+void HeaderObjectMarker::set_needs_reset(bool needs_reset) {\n+  _needs_reset = needs_reset;\n+}\n+\n+\/\/ mark an object\n+void HeaderObjectMarker::mark(oop o) {\n+  assert(Universe::heap()->is_in(o), \"sanity check\");\n+  assert(!o->mark().is_marked(), \"should only mark an object once\");\n+\n+  \/\/ object's mark word\n+  markWord mark = o->mark();\n+\n+  if (o->mark_must_be_preserved(mark)) {\n+    _saved_mark_stack->push(mark);\n+    _saved_oop_stack->push(o);\n+  }\n+\n+  \/\/ mark the object\n+  o->set_mark(markWord::prototype().set_marked());\n+}\n+\n+\/\/ return true if object is marked\n+bool HeaderObjectMarker::is_marked(oop o) {\n+  return o->mark().is_marked();\n+}\n","filename":"src\/hotspot\/share\/gc\/shared\/objectMarker.cpp","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_SHARED_OBJECTMARKER_HPP\n+#define SHARE_GC_SHARED_OBJECTMARKER_HPP\n+\n+#include \"memory\/allocation.hpp\"\n+#include \"oops\/oopsHierarchy.hpp\"\n+\n+\/\/ ObjectMarker is used to support the marking objects when walking the\n+\/\/ heap.\n+class ObjectMarker : public CHeapObj<mtGC>{\n+public:\n+  virtual ~ObjectMarker() {};\n+  virtual void mark(oop o) = 0;\n+  virtual bool is_marked(oop o) = 0;\n+\n+  virtual void set_needs_reset(bool needs_reset) {};\n+};\n+\n+\/\/ Stack allocated class to help ensure that ObjectMarker is used\n+\/\/ correctly. Constructor initializes ObjectMarker, destructor calls\n+\/\/ ObjectMarker's done() function to restore object headers.\n+class ObjectMarkerController : public StackObj {\n+private:\n+  static ObjectMarker* _marker;\n+public:\n+  ObjectMarkerController();\n+  ~ObjectMarkerController();\n+\n+  static void mark(oop o);\n+  static bool is_marked(oop o);\n+\n+  static void set_needs_reset(bool needs_reset);\n+};\n+\n+\/\/ ObjectMarker is used to support the marking objects when walking the\n+\/\/ heap.\n+\/\/\n+\/\/ This implementation uses the existing mark bits in an object for\n+\/\/ marking. Objects that are marked must later have their headers restored.\n+\/\/ As most objects are unlocked and don't have their identity hash computed\n+\/\/ we don't have to save their headers. Instead we save the headers that\n+\/\/ are \"interesting\". Later when the headers are restored this implementation\n+\/\/ restores all headers to their initial value and then restores the few\n+\/\/ objects that had interesting headers.\n+\/\/\n+\/\/ Future work: This implementation currently uses growable arrays to save\n+\/\/ the oop and header of interesting objects. As an optimization we could\n+\/\/ use the same technique as the GC and make use of the unused area\n+\/\/ between top() and end().\n+class HeaderObjectMarker : public ObjectMarker {\n+private:\n+  GrowableArray<oop>* _saved_oop_stack;\n+  GrowableArray<markWord>* _saved_mark_stack;\n+  bool _needs_reset;\n+public:\n+  HeaderObjectMarker();\n+  ~HeaderObjectMarker();\n+  void mark(oop o) override;\n+  bool is_marked(oop o) override;\n+  void set_needs_reset(bool needs_reset) override;\n+};\n+\n+#endif \/\/ SHARE_GC_SHARED_OBJECTMARKER_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/objectMarker.hpp","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shared\/objectMarker.hpp\"\n@@ -1335,127 +1336,0 @@\n-\/\/ ObjectMarker is used to support the marking objects when walking the\n-\/\/ heap.\n-\/\/\n-\/\/ This implementation uses the existing mark bits in an object for\n-\/\/ marking. Objects that are marked must later have their headers restored.\n-\/\/ As most objects are unlocked and don't have their identity hash computed\n-\/\/ we don't have to save their headers. Instead we save the headers that\n-\/\/ are \"interesting\". Later when the headers are restored this implementation\n-\/\/ restores all headers to their initial value and then restores the few\n-\/\/ objects that had interesting headers.\n-\/\/\n-\/\/ Future work: This implementation currently uses growable arrays to save\n-\/\/ the oop and header of interesting objects. As an optimization we could\n-\/\/ use the same technique as the GC and make use of the unused area\n-\/\/ between top() and end().\n-\/\/\n-\n-\/\/ An ObjectClosure used to restore the mark bits of an object\n-class RestoreMarksClosure : public ObjectClosure {\n- public:\n-  void do_object(oop o) {\n-    if (o != NULL) {\n-      markWord mark = o->mark();\n-      if (mark.is_marked()) {\n-        o->init_mark();\n-      }\n-    }\n-  }\n-};\n-\n-\/\/ ObjectMarker provides the mark and visited functions\n-class ObjectMarker : AllStatic {\n- private:\n-  \/\/ saved headers\n-  static GrowableArray<oop>* _saved_oop_stack;\n-  static GrowableArray<markWord>* _saved_mark_stack;\n-  static bool _needs_reset;                  \/\/ do we need to reset mark bits?\n-\n- public:\n-  static void init();                       \/\/ initialize\n-  static void done();                       \/\/ clean-up\n-\n-  static inline void mark(oop o);           \/\/ mark an object\n-  static inline bool visited(oop o);        \/\/ check if object has been visited\n-\n-  static inline bool needs_reset()            { return _needs_reset; }\n-  static inline void set_needs_reset(bool v)  { _needs_reset = v; }\n-};\n-\n-GrowableArray<oop>* ObjectMarker::_saved_oop_stack = NULL;\n-GrowableArray<markWord>* ObjectMarker::_saved_mark_stack = NULL;\n-bool ObjectMarker::_needs_reset = true;  \/\/ need to reset mark bits by default\n-\n-\/\/ initialize ObjectMarker - prepares for object marking\n-void ObjectMarker::init() {\n-  assert(Thread::current()->is_VM_thread(), \"must be VMThread\");\n-  assert(SafepointSynchronize::is_at_safepoint(), \"must be at a safepoint\");\n-\n-  \/\/ prepare heap for iteration\n-  Universe::heap()->ensure_parsability(false);  \/\/ no need to retire TLABs\n-\n-  \/\/ create stacks for interesting headers\n-  _saved_mark_stack = new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<markWord>(4000, mtServiceability);\n-  _saved_oop_stack = new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<oop>(4000, mtServiceability);\n-}\n-\n-\/\/ Object marking is done so restore object headers\n-void ObjectMarker::done() {\n-  \/\/ iterate over all objects and restore the mark bits to\n-  \/\/ their initial value\n-  RestoreMarksClosure blk;\n-  if (needs_reset()) {\n-    Universe::heap()->object_iterate(&blk);\n-  } else {\n-    \/\/ We don't need to reset mark bits on this call, but reset the\n-    \/\/ flag to the default for the next call.\n-    set_needs_reset(true);\n-  }\n-\n-  \/\/ now restore the interesting headers\n-  for (int i = 0; i < _saved_oop_stack->length(); i++) {\n-    oop o = _saved_oop_stack->at(i);\n-    markWord mark = _saved_mark_stack->at(i);\n-    o->set_mark(mark);\n-  }\n-\n-  \/\/ free the stacks\n-  delete _saved_oop_stack;\n-  delete _saved_mark_stack;\n-}\n-\n-\/\/ mark an object\n-inline void ObjectMarker::mark(oop o) {\n-  assert(Universe::heap()->is_in(o), \"sanity check\");\n-  assert(!o->mark().is_marked(), \"should only mark an object once\");\n-\n-  \/\/ object's mark word\n-  markWord mark = o->mark();\n-\n-  if (o->mark_must_be_preserved(mark)) {\n-    _saved_mark_stack->push(mark);\n-    _saved_oop_stack->push(o);\n-  }\n-\n-  \/\/ mark the object\n-  o->set_mark(markWord::prototype().set_marked());\n-}\n-\n-\/\/ return true if object is marked\n-inline bool ObjectMarker::visited(oop o) {\n-  return o->mark().is_marked();\n-}\n-\n-\/\/ Stack allocated class to help ensure that ObjectMarker is used\n-\/\/ correctly. Constructor initializes ObjectMarker, destructor calls\n-\/\/ ObjectMarker's done() function to restore object headers.\n-class ObjectMarkerController : public StackObj {\n- public:\n-  ObjectMarkerController() {\n-    ObjectMarker::init();\n-  }\n-  ~ObjectMarkerController() {\n-    ObjectMarker::done();\n-  }\n-};\n-\n-\n@@ -1603,1 +1477,1 @@\n-    if (!ObjectMarker::visited(obj)) visit_stack()->push(obj);\n+    if (!ObjectMarkerController::is_marked(obj)) visit_stack()->push(obj);\n@@ -2890,2 +2764,2 @@\n-  assert(!ObjectMarker::visited(o), \"can't visit same object more than once\");\n-  ObjectMarker::mark(o);\n+  assert(!ObjectMarkerController::is_marked(o), \"can't visit same object more than once\");\n+  ObjectMarkerController::mark(o);\n@@ -2929,6 +2803,0 @@\n-    \/\/ If either collect_stack_roots() or collect_simple_roots()\n-    \/\/ returns false at this point, then there are no mark bits\n-    \/\/ to reset.\n-    ObjectMarker::set_needs_reset(false);\n-\n-    \/\/ Calling collect_stack_roots() before collect_simple_roots()\n@@ -2941,2 +2809,2 @@\n-    \/\/ no early return so enable heap traversal to reset the mark bits\n-    ObjectMarker::set_needs_reset(true);\n+    \/\/ no early return so enable heap traversal to reset its state, if necessary\n+    ObjectMarkerController::set_needs_reset(true);\n@@ -2954,1 +2822,1 @@\n-      if (!ObjectMarker::visited(o)) {\n+      if (!ObjectMarkerController::is_marked(o)) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp","additions":7,"deletions":139,"binary":false,"changes":146,"status":"modified"}]}