{"files":[{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"memory\/allocation.hpp\"\n+#include \"utilities\/objectBitSet.inline.hpp\"\n+#include \"unittest.hpp\"\n+\n+TEST_VM(ObjectBitSet, empty) {\n+  ObjectBitSet<mtTracing> obs;\n+  oopDesc obj1;\n+  ASSERT_FALSE(obs.is_marked(&obj1));\n+}\n+\n+\/\/ NOTE: This is a little weird. NULL is not treated any special: ObjectBitSet will happily\n+\/\/ allocate a fragement for the memory range starting at 0 and mark the first bit when passing NULL.\n+\/\/ In the absense of any error handling, I am not sure what would possibly be a reasonable better\n+\/\/ way to do it, though.\n+TEST_VM(ObjectBitSet, null) {\n+  ObjectBitSet<mtTracing> obs;\n+  ASSERT_FALSE(obs.is_marked((oop)NULL));\n+  obs.mark_obj((oop) NULL);\n+  ASSERT_TRUE(obs.is_marked((oop)NULL));\n+}\n+\n+TEST_VM(ObjectBitSet, mark_single) {\n+  ObjectBitSet<mtTracing> obs;\n+  oopDesc obj1;\n+  ASSERT_FALSE(obs.is_marked(&obj1));\n+  obs.mark_obj(&obj1);\n+  ASSERT_TRUE(obs.is_marked(&obj1));\n+}\n+\n+TEST_VM(ObjectBitSet, mark_multi) {\n+  ObjectBitSet<mtTracing> obs;\n+  oopDesc obj1;\n+  oopDesc obj2;\n+  ASSERT_FALSE(obs.is_marked(&obj1));\n+  ASSERT_FALSE(obs.is_marked(&obj2));\n+  obs.mark_obj(&obj1);\n+  ASSERT_TRUE(obs.is_marked(&obj1));\n+  ASSERT_FALSE(obs.is_marked(&obj2));\n+  obs.mark_obj(&obj2);\n+  ASSERT_TRUE(obs.is_marked(&obj1));\n+  ASSERT_TRUE(obs.is_marked(&obj2));\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_objectBitSet.cpp","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}