{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+import com.sun.org.apache.xerces.internal.util.XMLChar;\n@@ -57,1 +58,1 @@\n- * @LastModified: June 2021\n+ * @LastModified: Mar 2022\n@@ -1748,4 +1749,5 @@\n-                \/*  This if check is added to support control characters in XML 1.1.\n-                 *  If a character is a Control Character within C0 and C1 range, it is desirable\n-                 *  to write it out as Numeric Character Reference(NCR) regardless of XML Version\n-                 *  being used for output document.\n+                \/*\n+                 *  The check was added to support control characters in XML 1.1.\n+                 *  It previously wrote Control Characters within C0 and C1 range\n+                 *  as Numeric Character Reference(NCR) regardless of XML Version,\n+                 *  which was incorrect as Control Characters are invalid in XML 1.0.\n@@ -1753,2 +1755,7 @@\n-                if (isCharacterInC0orC1Range(ch) ||\n-                        (XMLVERSION11.equals(getVersion()) && isNELorLSEPCharacter(ch)))\n+                boolean isVer11 = XMLVERSION11.equals(getVersion());\n+                if (!isVer11 && XMLChar.isInvalid(ch)) {\n+                    throw new org.xml.sax.SAXException(Utils.messages.createMessage(\n+                            MsgKey.ER_WF_INVALID_CHARACTER_IN_TEXT,\n+                            new Object[]{Integer.toHexString(ch)}));\n+                }\n+                if (isCharacterInC0orC1Range(ch) || (isVer11 && isNELorLSEPCharacter(ch)))\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/ToStream.java","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import com.sun.org.apache.xerces.internal.util.XMLChar;\n@@ -35,1 +36,0 @@\n-import org.testng.annotations.Listeners;\n@@ -41,3 +41,2 @@\n- * @bug 6883209\n- * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n- * @run testng\/othervm -DrunSecMngr=true -Djava.security.manager=allow transform.OpenJDK100017Test\n+ * @bug 6883209 8273370\n+ * @modules java.xml\/com.sun.org.apache.xerces.internal.util\n@@ -47,1 +46,0 @@\n-@Listeners({jaxp.library.BasePolicy.class})\n@@ -59,1 +57,3 @@\n-                sb.append((char) x);\n+                if (XMLChar.isValid(x)) {\n+                    sb.append((char)x);\n+                }\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/OpenJDK100017Test.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,160 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package transform;\n+\n+import java.io.BufferedWriter;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.util.prefs.InvalidPreferencesFormatException;\n+import java.util.prefs.Preferences;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.w3c.dom.DOMImplementation;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.DocumentType;\n+import org.w3c.dom.Element;\n+\n+\/*\n+ * @test\n+ * @bug 8273370\n+ * @run testng transform.SerializationTest\n+ * @summary Verifies that the characters are written correctly during serialization.\n+ *\/\n+public class SerializationTest {\n+\n+    private static final String PREFS_DTD_URI\n+            = \"http:\/\/java.sun.com\/dtd\/preferences.dtd\";\n+    private static String CLS_DIR = System.getProperty(\"test.classes\", \".\");\n+    private static String SRC_DIR = System.getProperty(\"test.src\");\n+\n+    \/**\n+     * Verifies that the XMLSupport for exportSubtree handles control characters\n+     * correctly by reporting en error.\n+     *\n+     * Note: exportSubtree currently throws AssertionError. It would be more\n+     * appropriate to throw InvalidPreferencesFormatException as the import\n+     * method does. Since this is an edge case however, we'll keep it as is to\n+     * avoid signature change.\n+     *\n+     * The following was the original test:\n+            Preferences p = Preferences.userRoot().node(\"test\");\n+            p.put(\"key\", \"[\\u0018\\u0019]\");\n+            p.exportSubtree(new ByteArrayOutputStream());\n+     *\n+     * The code however, hanged when running in JTReg. This test therefore replaced\n+     * the above code with the process extracted from the exportSubtree routine.\n+     *\n+     * @throws Exception if the test fails\n+     *\/\n+    @Test\n+    public void testTrasformer() throws Exception {\n+        Assert.assertThrows(AssertionError.class,\n+                () -> export(new ByteArrayOutputStream()));\n+    }\n+\n+    private void export(OutputStream os) throws IOException {\n+        Document doc = createPrefsDoc(\"preferences\");\n+        Element preferences = doc.getDocumentElement();\n+        preferences.setAttribute(\"EXTERNAL_XML_VERSION\", \"1.0\");\n+        Element xmlRoot = (Element) preferences.appendChild(doc.createElement(\"root\"));\n+        xmlRoot.setAttribute(\"type\", \"user\");\n+\n+        Element e = xmlRoot;\n+\n+        e.appendChild(doc.createElement(\"map\"));\n+        e = (Element) e.appendChild(doc.createElement(\"node\"));\n+        e.setAttribute(\"name\", \"test\");\n+\n+        putPreferencesInXml(e, doc);\n+\n+        writeDoc(doc, os);\n+    }\n+\n+    private static Document createPrefsDoc(String qname) {\n+        try {\n+            DOMImplementation di = DocumentBuilderFactory.newInstance().\n+                    newDocumentBuilder().getDOMImplementation();\n+            DocumentType dt = di.createDocumentType(qname, null, PREFS_DTD_URI);\n+            return di.createDocument(null, qname, dt);\n+        } catch (ParserConfigurationException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    private static void putPreferencesInXml(Element elt, Document doc) {\n+        Element map = (Element) elt.appendChild(doc.createElement(\"map\"));\n+        Element entry = (Element) map.appendChild(doc.createElement(\"entry\"));\n+        entry.setAttribute(\"key\", \"key\");\n+        entry.setAttribute(\"value\", \"[\\u0018\\u0019]\");\n+    }\n+\n+    private void writeDoc(Document doc, OutputStream out)\n+            throws IOException {\n+        try {\n+            TransformerFactory tf = TransformerFactory.newInstance();\n+            tf.setAttribute(\"indent-number\", 2);\n+            Transformer t = tf.newTransformer();\n+            t.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, doc.getDoctype().getSystemId());\n+            t.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+            \/\/Transformer resets the \"indent\" info if the \"result\" is a StreamResult with\n+            \/\/an OutputStream object embedded, creating a Writer object on top of that\n+            \/\/OutputStream object however works.\n+            t.transform(new DOMSource(doc),\n+                    new StreamResult(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"))));\n+        } catch (TransformerException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    \/**\n+     * Verifies that the XMLSupport for importPreferences handles control\n+     * characters correctly by reporting en error.\n+     *\n+     * Note: this is the existing behavior. This test is here to match with the\n+     * export method.\n+     *\n+     * \"preferences.xml\" was generated by calling the exportSubtree method\n+     * before the patch.\n+     *\n+     * @throws Exception if the test fails\n+     *\/\n+    @Test\n+    public void testParser() throws Exception {\n+        Assert.assertThrows(InvalidPreferencesFormatException.class, () -> {\n+            Preferences.importPreferences(\n+                    new FileInputStream(new File(SRC_DIR + \"\/preferences.xml\")));\n+        });\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/SerializationTest.java","additions":160,"deletions":0,"binary":false,"changes":160,"status":"added"},{"patch":"@@ -0,0 +1,12 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE preferences SYSTEM \"http:\/\/java.sun.com\/dtd\/preferences.dtd\">\n+<preferences EXTERNAL_XML_VERSION=\"1.0\">\n+  <root type=\"user\">\n+    <map\/>\n+    <node name=\"test\">\n+      <map>\n+        <entry key=\"key\" value=\"[&#24;&#25;]\"\/>\n+      <\/map>\n+    <\/node>\n+  <\/root>\n+<\/preferences>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/preferences.xml","additions":12,"deletions":0,"binary":false,"changes":12,"status":"added"}]}