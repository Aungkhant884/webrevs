{"files":[{"patch":"@@ -80,2 +80,2 @@\n-                case 14 -> CharacterData0E.instance; \/\/ Private Use\n-                case 15, 16 -> CharacterDataPrivateUse.instance; \/\/ Private Use\n+                case 14 -> CharacterData0E.instance;\n+                case 15, 16 -> CharacterDataPrivateUse.instance; \/\/ Both cases Private Use\n","filename":"src\/java.base\/share\/classes\/java\/lang\/CharacterData.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-                case REF_invokeSpecial: {\n+                case REF_invokeSpecial -> {\n@@ -100,1 +100,1 @@\n-                case REF_invokeInterface: {\n+                case REF_invokeInterface -> {\n@@ -107,1 +107,1 @@\n-                default: {\n+                default -> {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1657,6 +1657,6 @@\n-        switch (type) {\n-            case I_TYPE -> mv.visitInsn(Opcodes.ICONST_0);\n-            case J_TYPE -> mv.visitInsn(Opcodes.LCONST_0);\n-            case F_TYPE -> mv.visitInsn(Opcodes.FCONST_0);\n-            case D_TYPE -> mv.visitInsn(Opcodes.DCONST_0);\n-            case L_TYPE -> mv.visitInsn(Opcodes.ACONST_NULL);\n+        mv.visitInsn(switch (type) {\n+            case I_TYPE -> Opcodes.ICONST_0;\n+            case J_TYPE -> Opcodes.LCONST_0;\n+            case F_TYPE -> Opcodes.FCONST_0;\n+            case D_TYPE -> Opcodes.DCONST_0;\n+            case L_TYPE -> Opcodes.ACONST_NULL;\n@@ -1664,1 +1664,1 @@\n-        }\n+        });\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InvokerBytecodeGenerator.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -316,6 +316,14 @@\n-        if (refKind == originalRefKind)  return true;\n-        return switch (originalRefKind) {\n-            case REF_invokeInterface -> {\n-                \/\/ Looking up an interface method, can get (e.g.) Object.hashCode\n-                assert (refKind == REF_invokeVirtual || refKind == REF_invokeSpecial) : this;\n-                yield true;\n+        if (refKind == originalRefKind) return true;\n+        if (getClass().desiredAssertionStatus()) {\n+            switch (originalRefKind) {\n+                case REF_invokeInterface -> {\n+                    \/\/ Looking up an interface method, can get (e.g.) Object.hashCode\n+                    assert (refKind == REF_invokeVirtual || refKind == REF_invokeSpecial) : this;\n+                }\n+                case REF_invokeVirtual, REF_newInvokeSpecial -> {\n+                    \/\/ Looked up a virtual, can get (e.g.) final String.hashCode.\n+                    assert (refKind == REF_invokeSpecial) : this;\n+                }\n+                default -> {\n+                    assert (false) : this + \" != \" + MethodHandleNatives.refKindName((byte) originalRefKind);\n+                }\n@@ -323,10 +331,2 @@\n-            case REF_invokeVirtual, REF_newInvokeSpecial -> {\n-                \/\/ Looked up a virtual, can get (e.g.) final String.hashCode.\n-                assert (refKind == REF_invokeSpecial) : this;\n-                yield true;\n-            }\n-            default -> {\n-                assert(false) : this+\" != \"+MethodHandleNatives.refKindName((byte)originalRefKind);\n-                yield true;\n-            }\n-        };\n+        }\n+        return true;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -278,7 +278,7 @@\n-            case \"toString\" -> (m.getReturnType() == String.class\n-                                && m.getParameterCount() == 0);\n-            case \"hashCode\" -> (m.getReturnType() == int.class\n-                                && m.getParameterCount() == 0);\n-            case \"equals\"   -> (m.getReturnType() == boolean.class\n-                                && m.getParameterCount() == 1\n-                                && m.getParameterTypes()[0] == Object.class);\n+            case \"toString\" -> m.getReturnType() == String.class\n+                               && m.getParameterCount() == 0;\n+            case \"hashCode\" -> m.getReturnType() == int.class\n+                               && m.getParameterCount() == 0;\n+            case \"equals\"   -> m.getReturnType() == boolean.class\n+                               && m.getParameterCount() == 1\n+                               && m.getParameterTypes()[0] == Object.class;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleProxies.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -342,2 +342,1 @@\n-        MethodHandle handle;\n-        return switch (methodName) {\n+        MethodHandle handle = switch (methodName) {\n@@ -347,2 +346,1 @@\n-                handle = makeEquals(recordClass, getterList);\n-                yield methodType != null ? new ConstantCallSite(handle) : handle;\n+                yield makeEquals(recordClass, getterList);\n@@ -353,2 +351,1 @@\n-                handle = makeHashCode(recordClass, getterList);\n-                yield methodType != null ? new ConstantCallSite(handle) : handle;\n+                yield makeHashCode(recordClass, getterList);\n@@ -362,2 +359,1 @@\n-                handle = makeToString(recordClass, getterList, nameList);\n-                yield methodType != null ? new ConstantCallSite(handle) : handle;\n+                yield makeToString(recordClass, getterList, nameList);\n@@ -367,0 +363,1 @@\n+        return methodType != null ? new ConstantCallSite(handle) : handle;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ObjectMethods.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"}]}