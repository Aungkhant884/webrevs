{"files":[{"patch":"@@ -742,1 +742,0 @@\n-            out.write(\"#include \\\"jfr\/support\/jfrEpochSynchronization.hpp\\\"\");\n@@ -872,4 +871,0 @@\n-        if ((\"_thread_in_native\").equals(type.commitState)) {\n-            out.write(\"    \/\/ explicit epoch synchronization check\");\n-            out.write(\"    JfrEpochSynchronization sync;\");\n-        }\n","filename":"make\/src\/classes\/build\/tools\/jfr\/GenerateJfrFiles.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/interfaceSupport.inline.hpp\"\n@@ -31,0 +32,1 @@\n+#include \"runtime\/thread.inline.hpp\"\n@@ -117,0 +119,12 @@\n+\/\/ As part of event commit, a Method* is tagged as a function of an epoch.\n+\/\/ Epochs evolve during safepoints. To ensure the event is tagged in the correct epoch,\n+\/\/ that is, to avoid a race, the thread will participate in the safepoint protocol\n+\/\/ by transitioning from _thread_in_native to _thread_in_vm.\n+template <typename EventType>\n+static inline void commit(EventType& event) {\n+  JavaThread* thread = JavaThread::current();\n+  assert(thread->thread_state() == _thread_in_native, \"invariant\");\n+  ThreadInVMfromNative transition(thread);\n+  event.commit();\n+ }\n+\n@@ -126,1 +140,1 @@\n-  event.commit();\n+  commit(event);\n@@ -150,1 +164,1 @@\n-  event.commit();\n+  commit(event);\n","filename":"src\/hotspot\/share\/compiler\/compilerEvent.cpp","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -561,1 +561,1 @@\n-  <Event name=\"Compilation\" category=\"Java Virtual Machine, Compiler\" label=\"Compilation\" thread=\"true\" commitState=\"_thread_in_native\">\n+  <Event name=\"Compilation\" category=\"Java Virtual Machine, Compiler\" label=\"Compilation\" thread=\"true\">\n@@ -589,1 +589,1 @@\n-  <Event name=\"CompilerInlining\" category=\"Java Virtual Machine, Compiler, Optimization\" label=\"Method Inlining\" thread=\"true\" startTime=\"false\" commitState=\"_thread_in_native\">\n+  <Event name=\"CompilerInlining\" category=\"Java Virtual Machine, Compiler, Optimization\" label=\"Method Inlining\" thread=\"true\" startTime=\"false\">\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,1 +75,0 @@\n-              <xs:attribute name=\"commitState\" type=\"xs:string\" use=\"optional\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xsd","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,39 +0,0 @@\n-\/*\n-* Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n-* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-*\n-* This code is free software; you can redistribute it and\/or modify it\n-* under the terms of the GNU General Public License version 2 only, as\n-* published by the Free Software Foundation.\n-*\n-* This code is distributed in the hope that it will be useful, but WITHOUT\n-* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-* version 2 for more details (a copy is included in the LICENSE file that\n-* accompanied this code).\n-*\n-* You should have received a copy of the GNU General Public License version\n-* 2 along with this work; if not, write to the Free Software Foundation,\n-* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-*\n-* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-* or visit www.oracle.com if you need additional information or have any\n-* questions.\n-*\n-*\/\n-\n-#include \"precompiled.hpp\"\n-#include \"jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdEpoch.hpp\"\n-#include \"jfr\/support\/jfrEpochSynchronization.hpp\"\n-#include \"runtime\/interfaceSupport.inline.hpp\"\n-#include \"runtime\/thread.inline.hpp\"\n-\n-JfrEpochSynchronization::JfrEpochSynchronization() {\n-  if (JfrTraceIdEpoch::is_synchronizing()) {\n-    \/\/ only at a safepoint\n-    JavaThread* const jt = JavaThread::current();\n-    assert(jt->thread_state() == _thread_in_native, \"invariant\");\n-    \/\/ use ordinary transition to have the thread block and await the new epoch\n-    ThreadInVMfromNative transition(jt);\n-  }\n-}\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrEpochSynchronization.cpp","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -1,39 +0,0 @@\n-\/*\n-* Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n-* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-*\n-* This code is free software; you can redistribute it and\/or modify it\n-* under the terms of the GNU General Public License version 2 only, as\n-* published by the Free Software Foundation.\n-*\n-* This code is distributed in the hope that it will be useful, but WITHOUT\n-* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-* version 2 for more details (a copy is included in the LICENSE file that\n-* accompanied this code).\n-*\n-* You should have received a copy of the GNU General Public License version\n-* 2 along with this work; if not, write to the Free Software Foundation,\n-* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-*\n-* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-* or visit www.oracle.com if you need additional information or have any\n-* questions.\n-*\n-*\/\n-\n-#ifndef SHARE_JFR_SUPPORT_JFREPOCHSYNCHRONIZATION_HPP\n-#define SHARE_JFR_SUPPORT_JFREPOCHSYNCHRONIZATION_HPP\n-\n-#include \"jfr\/support\/jfrThreadId.hpp\"\n-\n-\/*\n- * JavaThreads running _thread_in_native (Compiler threads) must synchronize\n- * with the upcoming epoch in case there is an epoch shift in-progress.\n- *\/\n-class JfrEpochSynchronization {\n- public:\n-  JfrEpochSynchronization();\n-};\n-\n-#endif \/\/ SHARE_JFR_SUPPORT_JFREPOCHSYNCHRONIZATION_HPP\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrEpochSynchronization.hpp","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"}]}