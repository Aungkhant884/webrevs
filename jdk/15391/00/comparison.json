{"files":[{"patch":"@@ -27,0 +27,2 @@\n+ * @library ..\n+ * @build CopyInterference\n@@ -115,11 +117,16 @@\n-        \/\/ symblic link, followed\n-        Path link = dir.resolve(\"link\");\n-        Files.createSymbolicLink(link, sourceFile);\n-        args = Arguments.of(link, dir.resolve(\"linkFollowed\"),\n-                            new CopyOption[] {REPLACE_EXISTING});\n-        list.add(args);\n-\n-        \/\/ symblic link, not followed\n-        args = Arguments.of(link, dir.resolve(\"linkNotFollowed\"),\n-                            new CopyOption[] {REPLACE_EXISTING, NOFOLLOW_LINKS});\n-        list.add(args);\n+        if (TestUtil.supportsLinks(dir)) {\n+            \/\/ symbolic link, followed\n+            Path link = dir.resolve(\"link\");\n+            Files.createSymbolicLink(link, sourceFile);\n+            args = Arguments.of(link, dir.resolve(\"linkFollowed\"),\n+                                new CopyOption[] {REPLACE_EXISTING});\n+            list.add(args);\n+\n+            \/\/ symblic link, not followed\n+            args = Arguments.of(link, dir.resolve(\"linkNotFollowed\"),\n+                                new CopyOption[] {REPLACE_EXISTING,\n+                                                  NOFOLLOW_LINKS});\n+            list.add(args);\n+        } else {\n+            System.out.println(\"Links not supported: not testing links\");\n+        }\n","filename":"test\/jdk\/java\/nio\/file\/Files\/CopyInterference.java","additions":18,"deletions":11,"binary":false,"changes":29,"status":"modified"}]}