{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.lang.management.ThreadInfo;\n@@ -35,0 +36,2 @@\n+import java.util.Set;\n+import java.util.TreeSet;\n@@ -37,0 +40,13 @@\n+\n+    \/\/ Thread names permitted to appear during test:\n+    public static final String [] permittedThreadNames = { \"ForkJoinPool\", \"JVMCI\" };\n+\n+    public static boolean isPermittedNewThread(String name) {\n+        for (String s : permittedThreadNames) {\n+            if (name.contains(s)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n@@ -53,1 +69,1 @@\n-        int activeCount = top.activeCount();\n+        int tgActiveCount = top.activeCount();\n@@ -56,7 +72,8 @@\n-        \/\/ Ensure the array is big enough for a few extras.\n-        Thread[] threads = new Thread[activeCount * 2];\n-        int newCount = top.enumerate(threads);\n-        if (newCount != activeCount) {\n-            System.out.println(\"Found different threads after enumeration:\");\n-        } else {\n-            System.out.println(\"Initial set of enumerated threads:\");\n+        \/\/ Ensure array is big enough for a few extras.\n+        Thread[] tgThreads = new Thread[tgActiveCount * 2];\n+        int tgNewCount = top.enumerate(tgThreads);\n+        Map<Thread, StackTraceElement[]> stackTraces = Thread.getAllStackTraces();\n+\n+        if (tgNewCount != tgActiveCount) {\n+            System.out.println(\"Found different Thread Group thread count after enumeration: tgActiveCount=\"\n+                               + tgActiveCount + \" enumerated=\" + tgNewCount);\n@@ -64,2 +81,7 @@\n-        for (int i = 0; i < newCount; i++) {\n-            System.out.println(\" - Thread: \" + threads[i].getName());\n+        if (tgNewCount != stackTraces.size()) {\n+            System.out.println(\"Found difference in counts: thread group new count=\"\n+                               + tgNewCount + \" stackTraces.size()=\" + stackTraces.size());\n+        }\n+        System.out.println(\"Initial set of enumerated threads:\");\n+        for (int i = 0; i < tgNewCount; i++) {\n+            System.out.println(\" - Thread: \" + tgThreads[i].getName());\n@@ -68,2 +90,1 @@\n-        Map<Thread, StackTraceElement[]> stackTraces = Thread.getAllStackTraces();\n-\n+        \/\/ Get Threads from MXBean.  Retry to ensure count and id count match.\n@@ -71,2 +92,7 @@\n-        int threadCount = threadBean.getThreadCount();\n-        long[] threadIds = threadBean.getAllThreadIds();\n+        int threadCountBean = 0;\n+        long[] threadIdsBean = null;\n+        do {\n+            System.out.println(\"Gathering Thread info from MXBean...\");\n+            threadCountBean = threadBean.getThreadCount();\n+            threadIdsBean = threadBean.getAllThreadIds();\n+        } while (threadCountBean != threadIdsBean.length);\n@@ -74,4 +100,24 @@\n-        System.out.println(\"ThreadGroup: \" + activeCount + \" active thread(s)\");\n-        System.out.println(\"Thread: \" + stackTraces.size() + \" stack trace(s) returned\");\n-        System.out.println(\"ThreadMXBean: \" + threadCount + \" live threads(s)\");\n-        System.out.println(\"ThreadMXBean: \" + threadIds.length + \" thread Id(s)\");\n+        System.out.println(\"ThreadGroup:              \" + tgActiveCount + \" active thread(s)\");\n+        System.out.println(\"Thread.getAllStackTraces: \" + stackTraces.size() + \" stack trace(s) returned\");\n+        System.out.println(\"ThreadMXBean:             \" + threadCountBean + \" live threads(s)\");\n+        System.out.println(\"ThreadMXBean:             \" + threadIdsBean.length + \" thread Id(s)\");\n+\n+        if (threadIdsBean.length > tgActiveCount) {\n+            \/\/ Find the new Threads: some Thead names are permitted to appear: ignore them.\n+            Set<Long> seenTids = new TreeSet<>();\n+            for (Thread t : stackTraces.keySet()) {\n+                if (t != null) {\n+                    seenTids.add(t.getId());\n+                }\n+            }\n+            for (long tid : threadIdsBean) {\n+                if (!seenTids.contains(tid)) {\n+                    \/\/ New Thread from MBean, compared to Thread Group:\n+                    ThreadInfo threadInfo = threadBean.getThreadInfo(tid);\n+                    if (threadInfo != null && isPermittedNewThread(threadInfo.getThreadName())) {\n+                        System.out.print(\"New thread permitted: \" + threadInfo);\n+                        threadCountBean--;\n+                    }\n+                }\n+            }\n+        }\n@@ -81,3 +127,3 @@\n-        if (activeCount != stackTraces.size()) failed = true;\n-        if (activeCount != threadCount) failed = true;\n-        if (activeCount != threadIds.length) failed = true;\n+        if (tgActiveCount != stackTraces.size()) failed = true;\n+        if (tgActiveCount != threadCountBean) failed = true;\n+        \/\/ We know threadCountBean == threadIdsBean.length\n@@ -86,1 +132,2 @@\n-            System.out.println(\"Set of stack-traced threads:\");\n+            System.out.println(\"Failed.\");\n+            System.out.println(\"Set of Threads from getAllStackTraces:\");\n@@ -91,0 +138,6 @@\n+            System.out.println(\"Set of Thread IDs from MXBean:\");\n+            for (long tid : threadIdsBean) {\n+                System.out.print(tid + \" \");\n+                ThreadInfo threadInfo = threadBean.getThreadInfo(tid);\n+                System.out.println(threadInfo != null ? threadInfo.getThreadName() : \"\");\n+            }\n","filename":"test\/jdk\/java\/lang\/management\/ThreadMXBean\/ThreadLists.java","additions":76,"deletions":23,"binary":false,"changes":99,"status":"modified"}]}