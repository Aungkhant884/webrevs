[{"commit":{"message":"8309583: AArch64: Optimize firstTrue() when amount of elements < 8\n\nThis patch optimizes VectorMask.firstTrue() on Neon when there are 2\nor 4 elements in vector registers.\n\nVectorMask.firstTrue() should return VLEGNTH when vector mask is all\nfalse [1]. Current implementation uses rbit and then clz [2] to count\nleading zeros, then uses csel [3] (conditional select) to get the\nsmaller value between VLENGTH and the number of unset lanes to ensure\ncorrectness.\n\nThis patch sets the 16th or 32nd bit as 1, when there are only 2 or 4\nelements in boolean masks, before rbit and clz. With this trick, maximum\nvalue calculated in such case will be VLENGTH (2 or 4).\n\nTest:\nAll vector and vectorapi test passed.\n\nPerformance:\nThe benchmark function is like:\n\n```\n@Benchmark\npublic static int testInt() {\n    int res = 0;\n    for (int i = 0; i < LENGTH; i += INT_SPECIES.length()) {\n        VectorMask<Integer> m = VectorMask.fromArray(INT_SPECIES, ia, i);\n        res += m.firstTrue();\n    }\n\n    return res;\n}\n```\n\nFollowing data is collected on a 128-bit Neon machine.\n\nBenchmark     Before     After     Unit\ntestInt       22214.740  25627.833 ops\/ms\ntestLong      11649.898  13698.535 ops\/ms\n\n[1]: https:\/\/docs.oracle.com\/en\/java\/javase\/20\/docs\/api\/jdk.incubator.vector\/jdk\/incubator\/vector\/VectorMask.html#firstTrue()\n[2]: https:\/\/github.com\/openjdk\/jdk\/blob\/master\/src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad#L5540\n[3]: https:\/\/developer.arm.com\/documentation\/ddi0602\/2021-12\/Base-Instructions\/CSEL--Conditional-Select-\n\nChange-Id: I4a2de805ffa4469f88d510c96617eae165f0e025"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"}],"sha":"24b6d738cfe6755f035ca31426dbf1b140bfb43c"}]