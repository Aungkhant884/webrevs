{"files":[{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import org.openjdk.jmh.infra.Blackhole;\n@@ -35,0 +36,3 @@\n+    @Param({\"128\",\"256\",\"512\"})\n+    int bits;\n+\n@@ -38,5 +42,8 @@\n-    static final Random RD = new Random();\n-    static final VectorSpecies<Byte> bspecies = ByteVector.SPECIES_PREFERRED;\n-    static final VectorSpecies<Short> sspecies = ShortVector.SPECIES_PREFERRED;\n-    static final VectorSpecies<Integer> ispecies = IntVector.SPECIES_PREFERRED;\n-    static final VectorSpecies<Long> lspecies = LongVector.SPECIES_PREFERRED;\n+    VectorSpecies<Byte> bspecies;\n+    VectorSpecies<Short> sspecies;\n+    VectorSpecies<Integer> ispecies;\n+    VectorSpecies<Long> lspecies;\n+    VectorMask<Byte> bmask;\n+    VectorMask<Short> smask;\n+    VectorMask<Integer> imask;\n+    VectorMask<Long> lmask;\n@@ -44,16 +51,33 @@\n-    static final int LENGTH = 512;\n-\n-    static final boolean [] mask_avg_case;\n-    static final boolean [] mask_best_case;\n-    static final boolean [] mask_worst_case;\n-    static {\n-        mask_avg_case = new boolean[LENGTH];\n-        mask_best_case = new boolean[LENGTH];\n-        mask_worst_case = new boolean[LENGTH];\n-\n-        for (int i = 0; i < LENGTH; i++) {\n-            mask_best_case[i] = true;\n-            mask_worst_case[i] = false;\n-            mask_avg_case[i] = RD.nextBoolean();\n-        }\n-    }\n+\n+    static final boolean [] mask_avg_case = {\n+       false, false, false, true, false, false, false, false,\n+       false, false, false, true, false, false, false, false,\n+       false, false, false, true, false, false, false, false,\n+       true, true, true, true, true, true, true, true,\n+       true, true, true, true, true, true, true, true,\n+       false, false, false, true, false, false, false, false,\n+       false, false, false, true, false, false, false, false,\n+       false, false, false, true, false, false, false, false\n+    };\n+\n+    static final boolean [] mask_best_case  = {\n+       true, true, true, true, true, true, true, true,\n+       true, true, true, true, true, true, true, true,\n+       true, true, true, true, true, true, true, true,\n+       true, true, true, true, true, true, true, true,\n+       true, true, true, true, true, true, true, true,\n+       true, true, true, true, true, true, true, true,\n+       true, true, true, true, true, true, true, true,\n+       true, true, true, true, true, true, true, true\n+    };\n+\n+    static final boolean [] mask_worst_case  = {\n+       false, false, false, false, false, false, false, false,\n+       false, false, false, false, false, false, false, false,\n+       false, false, false, false, false, false, false, false,\n+       false, false, false, false, false, false, false, false,\n+       false, false, false, false, false, false, false, false,\n+       false, false, false, false, false, false, false, false,\n+       false, false, false, false, false, false, false, false,\n+       false, false, false, false, false, false, false, false\n+    };\n@@ -62,2 +86,7 @@\n-    public void bmSetup() {\n-        if (1 == inputs) {\n+    public void BmSetup() {\n+        bspecies = VectorSpecies.of(byte.class, VectorShape.forBitSize(bits));\n+        sspecies = VectorSpecies.of(short.class, VectorShape.forBitSize(bits));\n+        ispecies = VectorSpecies.of(int.class, VectorShape.forBitSize(bits));\n+        lspecies = VectorSpecies.of(long.class, VectorShape.forBitSize(bits));\n+\n+        if( 1 == inputs) {\n@@ -65,1 +94,1 @@\n-        } else if (2 == inputs) {\n+        } else if ( 2 == inputs ) {\n@@ -70,0 +99,5 @@\n+\n+        bmask   = VectorMask.fromArray(bspecies, mask_arr, 0);\n+        smask   = VectorMask.fromArray(sspecies, mask_arr, 0);\n+        imask   = VectorMask.fromArray(ispecies, mask_arr, 0);\n+        lmask   = VectorMask.fromArray(lspecies, mask_arr, 0);\n@@ -73,8 +107,2 @@\n-    public int testTrueCountByte() {\n-        int res = 0;\n-        for (int i = 0; i < LENGTH; i += bspecies.length()) {\n-            VectorMask<Byte> m = VectorMask.fromArray(bspecies, mask_arr, i);\n-            res += m.trueCount();\n-        }\n-\n-        return res;\n+    public int testTrueCountByte(Blackhole bh) {\n+        return bmask.trueCount();\n@@ -84,8 +112,2 @@\n-    public int testTrueCountShort() {\n-        int res = 0;\n-        for (int i = 0; i < LENGTH; i += sspecies.length()) {\n-            VectorMask<Short> m = VectorMask.fromArray(sspecies, mask_arr, i);\n-            res += m.trueCount();\n-        }\n-\n-        return res;\n+    public int testTrueCountShort(Blackhole bh) {\n+        return smask.trueCount();\n@@ -93,1 +115,0 @@\n-\n@@ -95,8 +116,2 @@\n-    public int testTrueCountInt() {\n-        int res = 0;\n-        for (int i = 0; i < LENGTH; i += ispecies.length()) {\n-            VectorMask<Integer> m = VectorMask.fromArray(ispecies, mask_arr, i);\n-            res += m.trueCount();\n-        }\n-\n-        return res;\n+    public int testTrueCountInt(Blackhole bh) {\n+        return imask.trueCount();\n@@ -104,1 +119,0 @@\n-\n@@ -106,8 +120,2 @@\n-    public int testTrueCountLong() {\n-        int res = 0;\n-        for (int i = 0; i < LENGTH; i += lspecies.length()) {\n-            VectorMask<Long> m = VectorMask.fromArray(lspecies, mask_arr, i);\n-            res += m.trueCount();\n-        }\n-\n-        return res;\n+    public int testTrueCountLong(Blackhole bh) {\n+        return lmask.trueCount();\n@@ -117,8 +125,2 @@\n-    public int testFirstTrueByte() {\n-        int res = 0;\n-        for (int i = 0; i < LENGTH; i += bspecies.length()) {\n-            VectorMask<Byte> m = VectorMask.fromArray(bspecies, mask_arr, i);\n-            res += m.firstTrue();\n-        }\n-\n-        return res;\n+    public int testFirstTrueByte(Blackhole bh) {\n+        return bmask.firstTrue();\n@@ -128,8 +130,2 @@\n-    public int testFirstTrueShort() {\n-        int res = 0;\n-        for (int i = 0; i < LENGTH; i += sspecies.length()) {\n-            VectorMask<Short> m = VectorMask.fromArray(sspecies, mask_arr, i);\n-            res += m.firstTrue();\n-        }\n-\n-        return res;\n+    public int testFirstTrueShort(Blackhole bh) {\n+        return smask.firstTrue();\n@@ -137,1 +133,0 @@\n-\n@@ -139,8 +134,2 @@\n-    public int testFirstTrueInt() {\n-        int res = 0;\n-        for (int i = 0; i < LENGTH; i += ispecies.length()) {\n-            VectorMask<Integer> m = VectorMask.fromArray(ispecies, mask_arr, i);\n-            res += m.firstTrue();\n-        }\n-\n-        return res;\n+    public int testFirstTrueInt(Blackhole bh) {\n+        return imask.firstTrue();\n@@ -148,1 +137,0 @@\n-\n@@ -150,8 +138,2 @@\n-    public int testFirstTrueLong() {\n-        int res = 0;\n-        for (int i = 0; i < LENGTH; i += lspecies.length()) {\n-            VectorMask<Long> m = VectorMask.fromArray(lspecies, mask_arr, i);\n-            res += m.firstTrue();\n-        }\n-\n-        return res;\n+    public int testFirstTrueLong(Blackhole bh) {\n+        return lmask.firstTrue();\n@@ -161,8 +143,2 @@\n-    public int testLastTrueByte() {\n-        int res = 0;\n-        for (int i = 0; i < LENGTH; i += bspecies.length()) {\n-            VectorMask<Byte> m = VectorMask.fromArray(bspecies, mask_arr, i);\n-            res += m.lastTrue();\n-        }\n-\n-        return res;\n+    public int testLastTrueByte(Blackhole bh) {\n+        return bmask.lastTrue();\n@@ -172,8 +148,2 @@\n-    public int testLastTrueShort() {\n-        int res = 0;\n-        for (int i = 0; i < LENGTH; i += sspecies.length()) {\n-            VectorMask<Short> m = VectorMask.fromArray(sspecies, mask_arr, i);\n-            res += m.lastTrue();\n-        }\n-\n-        return res;\n+    public int testLastTrueShort(Blackhole bh) {\n+        return smask.lastTrue();\n@@ -181,1 +151,0 @@\n-\n@@ -183,8 +152,2 @@\n-    public int testLastTrueInt() {\n-        int res = 0;\n-        for (int i = 0; i < LENGTH; i += ispecies.length()) {\n-            VectorMask<Integer> m = VectorMask.fromArray(ispecies, mask_arr, i);\n-            res += m.lastTrue();\n-        }\n-\n-        return res;\n+    public int testLastTrueInt(Blackhole bh) {\n+        return imask.lastTrue();\n@@ -192,1 +155,0 @@\n-\n@@ -194,8 +156,2 @@\n-    public int testLastTrueLong() {\n-        int res = 0;\n-        for (int i = 0; i < LENGTH; i += lspecies.length()) {\n-            VectorMask<Long> m = VectorMask.fromArray(lspecies, mask_arr, i);\n-            res += m.lastTrue();\n-        }\n-\n-        return res;\n+    public int testLastTrueLong(Blackhole bh) {\n+        return lmask.lastTrue();\n@@ -205,8 +161,2 @@\n-    public long testToLongByte() {\n-        long res = 0;\n-        for (int i = 0; i < LENGTH; i += bspecies.length()) {\n-            VectorMask<Byte> m = VectorMask.fromArray(bspecies, mask_arr, i);\n-            res += m.toLong();\n-        }\n-\n-        return res;\n+    public long testToLongByte(Blackhole bh) {\n+        return bmask.toLong();\n@@ -216,8 +166,2 @@\n-    public long testToLongShort() {\n-        long res = 0;\n-        for (int i = 0; i < LENGTH; i += sspecies.length()) {\n-            VectorMask<Short> m = VectorMask.fromArray(sspecies, mask_arr, i);\n-            res += m.toLong();\n-        }\n-\n-        return res;\n+    public long testToLongShort(Blackhole bh) {\n+        return smask.toLong();\n@@ -225,1 +169,0 @@\n-\n@@ -227,8 +170,2 @@\n-    public long testToLongInt() {\n-        long res = 0;\n-        for (int i = 0; i < LENGTH; i += ispecies.length()) {\n-            VectorMask<Integer> m = VectorMask.fromArray(ispecies, mask_arr, i);\n-            res += m.toLong();\n-        }\n-\n-        return res;\n+    public long testToLongInt(Blackhole bh) {\n+        return imask.toLong();\n@@ -236,1 +173,0 @@\n-\n@@ -238,8 +174,2 @@\n-    public long testToLongLong() {\n-        long res = 0;\n-        for (int i = 0; i < LENGTH; i += lspecies.length()) {\n-            VectorMask<Long> m = VectorMask.fromArray(lspecies, mask_arr, i);\n-            res += m.toLong();\n-        }\n-\n-        return res;\n+    public long testToLongLong(Blackhole bh) {\n+        return lmask.toLong();\n@@ -247,0 +177,1 @@\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskQueryOperationsBenchmark.java","additions":92,"deletions":161,"binary":false,"changes":253,"status":"modified"}]}