{"files":[{"patch":"@@ -24,0 +24,4 @@\n+import java.lang.ref.Reference;\n+import java.lang.ref.WeakReference;\n+\n+import javax.swing.UIManager;\n@@ -26,1 +30,1 @@\n-\/*\n+\/**\n@@ -30,1 +34,3 @@\n- * @run main\/othervm -Xmx10M TestTitledBorderLeak\n+ * @library \/javax\/swing\/regtesthelpers\n+ * @build Util\n+ * @run main\/timeout=60\/othervm -mx32m TestTitledBorderLeak\n@@ -32,1 +38,2 @@\n-public class TestTitledBorderLeak {\n+public final class TestTitledBorderLeak {\n+\n@@ -34,14 +41,12 @@\n-        int max = 100000;\n-        long initialFreeMemory = 0L;\n-        long currentFreeMemory;\n-        try {\n-            for (int i = 1; i <= max; i++) {\n-                new TitledBorder(\"\");\n-                if ((i % 1000) == 0) {\n-                    System.gc();\n-                    currentFreeMemory = dumpMemoryStatus(\"After \" + i);\n-                    if(initialFreeMemory == 0L) {\n-                        initialFreeMemory = currentFreeMemory;\n-                    } else if( currentFreeMemory < initialFreeMemory\/2) {\n-                        throw new RuntimeException(\"Memory halved: there's a leak\");\n-                    }\n+        int ul = UIManager.getPropertyChangeListeners().length;\n+        int dl = UIManager.getDefaults().getPropertyChangeListeners().length;\n+\n+        Reference<TitledBorder> border = getTitleBorder();\n+        int attempt = 0;\n+        while (border.get() != null) {\n+            Util.generateOOME();\n+            System.out.println(\"Not freed, attempt: \" + attempt++);\n+        }\n+        check(ul, UIManager.getPropertyChangeListeners().length);\n+        check(dl, UIManager.getDefaults().getPropertyChangeListeners().length);\n+    }\n@@ -49,6 +54,5 @@\n-                }\n-            }\n-        }catch(OutOfMemoryError e) {\n-            \/\/ Don't think it would work; should not happen\n-            System.gc();\n-            throw new RuntimeException(\"There was OOM\");\n+    private static void check(int expected, int actual) {\n+        if (expected != actual) {\n+            System.err.println(\"Expected: \" + expected);\n+            System.err.println(\"Actual: \" + actual);\n+            throw new RuntimeException(\"Wrong number of listeners\");\n@@ -56,1 +60,0 @@\n-        System.out.println(\"Passed\");\n@@ -58,5 +61,4 @@\n-    private static long dumpMemoryStatus(String msg) {\n-        Runtime rt = Runtime.getRuntime();\n-        long freeMem = rt.freeMemory();\n-        System.out.println(msg + \": \" + freeMem + \" free\");\n-        return freeMem;\n+\n+    private static Reference<TitledBorder> getTitleBorder() {\n+        TitledBorder tb = new TitledBorder(\"\");\n+        return new WeakReference<>(tb);\n@@ -65,1 +67,0 @@\n-\n","filename":"test\/jdk\/javax\/swing\/border\/TestTitledBorderLeak.java","additions":31,"deletions":30,"binary":false,"changes":61,"status":"modified"}]}