{"files":[{"patch":"@@ -26,1 +26,1 @@\n- * @bug 6960894 8194486 8139348\n+ * @bug 6960894 8194486\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/NewSalt.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 6844909 8012679\n+ * @bug 6844909 8012679 8139348\n@@ -34,1 +34,0 @@\n-import java.io.File;\n@@ -38,0 +37,2 @@\n+import java.util.Arrays;\n+import java.util.List;\n@@ -39,0 +40,1 @@\n+import sun.security.krb5.EncryptionKey;\n@@ -43,0 +45,8 @@\n+\n+    static List<Integer> weakOnes = List.of(\n+            EncryptedData.ETYPE_DES_CBC_CRC,\n+            EncryptedData.ETYPE_DES_CBC_MD5,\n+            EncryptedData.ETYPE_DES3_CBC_HMAC_SHA1_KD,\n+            EncryptedData.ETYPE_ARCFOUR_HMAC\n+    );\n+\n@@ -44,0 +54,1 @@\n+\n@@ -49,2 +60,5 @@\n-        boolean expected = args.length != 0 && args[0].equals(\"true\");\n-        int[] etypes = EType.getBuiltInDefaults();\n+        \/\/ expected number of supported weak etypes\n+        int expected = 0;\n+        if (args.length != 0 && args[0].equals(\"true\")) {\n+            expected = weakOnes.size();\n+        }\n@@ -52,7 +66,5 @@\n-        boolean found = false;\n-        for (int i=0, length = etypes.length; i<length; i++) {\n-            if (etypes[i] == EncryptedData.ETYPE_DES_CBC_CRC ||\n-                    etypes[i] == EncryptedData.ETYPE_DES_CBC_MD4 ||\n-                    etypes[i] == EncryptedData.ETYPE_DES_CBC_MD5) {\n-                found = true;\n-            }\n+        \/\/ Ensure EType.getBuiltInDefaults() has the correct etypes\n+        if (Arrays.stream(EType.getBuiltInDefaults())\n+                .filter(weakOnes::contains)\n+                .count() != expected) {\n+            throw new Exception(\"getBuiltInDefaults fails\");\n@@ -60,2 +72,8 @@\n-        if (expected != found) {\n-            throw new Exception();\n+\n+        \/\/ Ensure keys generated have the correct etypes\n+        if (Arrays.stream(EncryptionKey.acquireSecretKeys(\n+                    \"password\".toCharArray(), \"salt\"))\n+                .map(EncryptionKey::getEType)\n+                .filter(weakOnes::contains)\n+                .count() != expected) {\n+            throw new Exception(\"acquireSecretKeys fails\");\n","filename":"test\/jdk\/sun\/security\/krb5\/etype\/WeakCrypto.java","additions":32,"deletions":14,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -1,2 +0,0 @@\n-[libdefaults]\n-allow_weak_crypto = false\n","filename":"test\/jdk\/sun\/security\/krb5\/etype\/weakcrypto.conf","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -52,2 +52,3 @@\n-        \/\/ This test uses a krb5.conf file that only permits\n-        \/\/ 3 etypes: aes128-cts(17) aes256-cts(18) aes128-sha2(19).\n+        \/\/ This test uses a krb5.conf file (onlythree.conf) in which\n+        \/\/ only 3 etypes in the default_tkt_enctypes setting are enabled\n+        \/\/ by default: aes128-cts(17), aes256-cts(18), and aes128-sha2(19).\n","filename":"test\/jdk\/sun\/security\/krb5\/tools\/KtabCheck.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-default_tkt_enctypes = aes128-cts aes256-cts aes128-sha2\n+default_tkt_enctypes = des-cbc-crc des-cbc-md5 des3-cbc-sha1 rc4-hmac aes128-cts aes256-cts aes128-sha2\n","filename":"test\/jdk\/sun\/security\/krb5\/tools\/onlythree.conf","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}