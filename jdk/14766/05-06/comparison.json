{"files":[{"patch":"@@ -1114,1 +1114,1 @@\n-            SwingUtilities2.drawHLine(g, 0, w-2, 0 );\n+            SwingUtilities2.drawHLine(g, 0, w-2, 0);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/metal\/MetalBorders.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import javax.swing.table.TableCellRenderer;\n@@ -42,1 +41,1 @@\n- * aligned with data grid lines (Metal L&F).\n+ *          aligned with data grid lines (Metal L&F).\n@@ -47,1 +46,0 @@\n-    static JTable table;\n@@ -55,1 +53,1 @@\n-            TableHeaderBorderPositionTest.Test();\n+            test();\n@@ -59,7 +57,1 @@\n-    public static void Test() {\n-        int verticalLineCol;\n-        int expectedRGB;\n-        BufferedImage imgData;\n-        BufferedImage imgHeader;\n-        double w;\n-        double h;\n+    private static void test() {\n@@ -67,2 +59,1 @@\n-                { \"1\", \"1\", \"Green\"},\n-                { \"2\", \"2\", \"Blue\"}\n+                { \"1\", \"1\"}\n@@ -71,3 +62,2 @@\n-        String[] columnNames = { \"Number\", \"Size\", \"Color\"};\n-\n-        table = new JTable(data, columnNames);\n+        String[] columnNames = { \"Size\", \"Size\"};\n+        JTable table = new JTable(data, columnNames);\n@@ -77,4 +67,0 @@\n-        TableCellRenderer renderer = header.getDefaultRenderer();\n-        header.setDefaultRenderer(renderer);\n-        table.updateUI();\n-\n@@ -83,3 +69,6 @@\n-        w = SCALE * size.width;\n-        h = SCALE * size.height;\n-        imgHeader = new BufferedImage((int)(w), (int)(h), BufferedImage.TYPE_INT_RGB);\n+\n+        int w = (int)Math.ceil(SCALE * size.width);\n+        int h = (int)Math.ceil(SCALE * size.height);\n+\n+        BufferedImage imgHeader = new BufferedImage(w, h,\n+                BufferedImage.TYPE_INT_RGB);\n@@ -94,4 +83,4 @@\n-        w = SCALE * WIDTH;\n-        h = SCALE * HEIGHT;\n-\n-        imgData = new BufferedImage((int)w, (int)h, BufferedImage.TYPE_INT_RGB);\n+        w = (int)Math.ceil(SCALE * WIDTH);\n+        h = (int)Math.ceil(SCALE * HEIGHT);\n+        BufferedImage imgData = new BufferedImage(w, h,\n+                BufferedImage.TYPE_INT_RGB);\n@@ -106,1 +95,1 @@\n-        verticalLineCol = (int)(table.getTableHeader().\n+        int verticalLineCol = (int)(table.getTableHeader().\n@@ -108,10 +97,6 @@\n-        expectedRGB = imgData.getRGB(verticalLineCol, 0);\n-\n-        for (int i = 0; i < imgHeader.getHeight(); i++) {\n-            for (int j = verticalLineCol; j < verticalLineCol + 3; j++) {\n-                if (expectedRGB != imgHeader.getRGB(j, i)) {\n-                    try {\n-                        ImageIO.write(imgHeader, \"png\",new File(\"FailureImageHeader.png\"));\n-                    } catch (IOException e) {\n-                        e.printStackTrace();\n-                    }\n+        int expectedRGB = imgData.getRGB(verticalLineCol, 0);\n+\n+        for (int y = 0; y < imgHeader.getHeight(); y++) {\n+            for (int x = verticalLineCol; x < verticalLineCol + 3; x++) {\n+                if (expectedRGB != imgHeader.getRGB(x, y)) {\n+                    saveImage(imgHeader, \"FailureImageHeader.png\");\n@@ -123,8 +108,6 @@\n-        for (int i = 0; i < table.getRowCount() * table.getRowHeight() * SCALE; i++) {\n-            for (int j = verticalLineCol; j < verticalLineCol + 3; j++) {\n-                if (expectedRGB != imgData.getRGB(j, i)) {\n-                    try {\n-                        ImageIO.write(imgData, \"png\", new File(\"FailureImageData.png\"));\n-                    } catch (IOException e) {\n-                        e.printStackTrace();\n-                    }\n+        int maxVerticalLine = (int) Math.ceil(\n+                table.getRowCount() * table.getRowHeight() * SCALE);\n+        for (int y = 0; y < maxVerticalLine; y++) {\n+            for (int x = verticalLineCol; x < verticalLineCol + 3; x++) {\n+                if (expectedRGB != imgData.getRGB(x, y)) {\n+                    saveImage(imgData,\"FailureImageData.png\");\n@@ -135,1 +118,9 @@\n-        System.out.println(\"Test Pass!!\");\n+        System.out.println(\"Test Passed\");\n+    }\n+\n+    private static void saveImage(BufferedImage img, String fileName) {\n+        try {\n+            ImageIO.write(img, \"png\", new File(fileName));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n","filename":"test\/jdk\/javax\/swing\/JTableHeader\/TableHeaderBorderPositionTest.java","additions":38,"deletions":47,"binary":false,"changes":85,"status":"modified"}]}