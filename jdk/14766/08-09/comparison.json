{"files":[{"patch":"@@ -44,1 +44,0 @@\n-\n@@ -68,4 +67,1 @@\n-        int w = (int)Math.ceil(SCALE * size.width);\n-        int h = (int)Math.ceil(SCALE * size.height);\n-\n-        BufferedImage imgHeader = new BufferedImage(w, h,\n+        BufferedImage bufferedImage = new BufferedImage(WIDTH, HEIGHT,\n@@ -73,1 +69,1 @@\n-        Graphics2D g2d = imgHeader.createGraphics();\n+        Graphics2D g2d = bufferedImage.createGraphics();\n@@ -75,5 +71,0 @@\n-        try {\n-            header.paint(g2d);\n-        } finally {\n-            g2d.dispose();\n-        }\n@@ -81,6 +72,0 @@\n-        w = (int)Math.ceil(SCALE * WIDTH);\n-        h = (int)Math.ceil(SCALE * HEIGHT);\n-        BufferedImage imgData = new BufferedImage(w, h,\n-                BufferedImage.TYPE_INT_RGB);\n-        g2d = imgData.createGraphics();\n-        g2d.scale(SCALE, SCALE);\n@@ -88,0 +73,2 @@\n+            header.paint(g2d);\n+            g2d.translate(0, header.getHeight());\n@@ -93,3 +80,7 @@\n-        int verticalLineCol = (int)(table.getTableHeader().\n-                getColumnModel().getColumn(0).getWidth() * SCALE) - 2;\n-        int expectedRGB = imgData.getRGB(verticalLineCol, 0);\n+        int verticalLineCol = (int) (table.getTableHeader()\n+                                          .getColumnModel()\n+                                          .getColumn(0)\n+                                          .getWidth() * SCALE) - 2;\n+        int expectedRGB = bufferedImage.getRGB(verticalLineCol, 0);\n+        int maxHeight = (int)(((double)table.getTableHeader().getHeight() * SCALE )\n+                + ((double)table.getRowHeight() * SCALE));\n@@ -97,1 +88,1 @@\n-        for (int y = 0; y < imgHeader.getHeight(); y++) {\n+        for (int y = 0; y < maxHeight; y++) {\n@@ -99,16 +90,8 @@\n-                if (expectedRGB != imgHeader.getRGB(x, y)) {\n-                    saveImage(imgHeader, \"FailureImageHeader.png\");\n-                    throw new RuntimeException(\"Header Comparison Test \" +\n-                            \"Failed at <\" + x + \", \" + y + \">\");\n-                }\n-            }\n-        }\n-\n-        int maxVerticalLine = (int) Math.ceil(\n-                table.getRowCount() * table.getRowHeight() * SCALE);\n-        for (int y = 0; y < maxVerticalLine; y++) {\n-            for (int x = verticalLineCol; x < verticalLineCol + 3; x++) {\n-                if (expectedRGB != imgData.getRGB(x, y)) {\n-                    saveImage(imgData,\"FailureImageData.png\");\n-                    throw new RuntimeException(\"TableData Comparison Test \" +\n-                            \"Failed at <\" + x + \", \" + y + \">\");\n+                if (expectedRGB != bufferedImage.getRGB(x, y)) {\n+                    try {\n+                        ImageIO.write(bufferedImage, \"png\",\n+                                new File(\"FailureImage.png\"));\n+                    } catch (IOException e) {\n+                        e.printStackTrace();\n+                    }\n+                    throw new RuntimeException(\"Test Failed at <\" + x + \", \" + y + \">\");\n@@ -120,8 +103,0 @@\n-\n-    private static void saveImage(BufferedImage img, String fileName) {\n-        try {\n-            ImageIO.write(img, \"png\", new File(fileName));\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-    }\n","filename":"test\/jdk\/javax\/swing\/JTableHeader\/TableHeaderBorderPositionTest.java","additions":20,"deletions":45,"binary":false,"changes":65,"status":"modified"}]}