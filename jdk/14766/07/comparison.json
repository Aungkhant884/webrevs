{"files":[{"patch":"@@ -1111,2 +1111,2 @@\n-            g.drawLine( w-1, 0, w-1, h-1 );\n-            g.drawLine( 1, h-1, w-1, h-1 );\n+            SwingUtilities2.drawVLine(g, w-1, 0, h-1);\n+            SwingUtilities2.drawHLine(g, 1, w-1, h-1);\n@@ -1114,2 +1114,2 @@\n-            g.drawLine( 0, 0, w-2, 0 );\n-            g.drawLine( 0, 0, 0, h-2 );\n+            SwingUtilities2.drawHLine(g, 0, w-2, 0);\n+            SwingUtilities2.drawVLine(g, 0, 0, h-2);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/metal\/MetalBorders.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.table.JTableHeader;\n+import javax.swing.UIManager;\n+\n+import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+\/*\n+ * @test\n+ * @bug 8311031\n+ * @summary Test to validate JTable header border vertical line is\n+ *          aligned with data grid lines (Metal L&F).\n+ * @run main TableHeaderBorderPositionTest\n+ *\/\n+\n+public class TableHeaderBorderPositionTest {\n+    private static final int WIDTH = 300;\n+    private static final int HEIGHT = 150;\n+    private static final double SCALE = 2.25;\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n+        SwingUtilities.invokeAndWait(TableHeaderBorderPositionTest::test);\n+    }\n+\n+    private static void test() {\n+        String[][] data = {\n+                {\"1\", \"1\"}\n+        };\n+\n+        String[] columnNames = {\"Size\", \"Size\"};\n+        JTable table = new JTable(data, columnNames);\n+        table.setSize(WIDTH, HEIGHT);\n+\n+        final JTableHeader header = table.getTableHeader();\n+        Dimension size = header.getPreferredSize();\n+        header.setSize(size);\n+\n+        int w = (int)Math.ceil(SCALE * size.width);\n+        int h = (int)Math.ceil(SCALE * size.height);\n+\n+        BufferedImage imgHeader = new BufferedImage(w, h,\n+                BufferedImage.TYPE_INT_RGB);\n+        Graphics2D g2d = imgHeader.createGraphics();\n+        g2d.scale(SCALE, SCALE);\n+        try {\n+            header.paint(g2d);\n+        } finally {\n+            g2d.dispose();\n+        }\n+\n+        w = (int)Math.ceil(SCALE * WIDTH);\n+        h = (int)Math.ceil(SCALE * HEIGHT);\n+        BufferedImage imgData = new BufferedImage(w, h,\n+                BufferedImage.TYPE_INT_RGB);\n+        g2d = imgData.createGraphics();\n+        g2d.scale(SCALE, SCALE);\n+        try {\n+            table.paint(g2d);\n+        } finally {\n+            g2d.dispose();\n+        }\n+\n+        int verticalLineCol = (int)(table.getTableHeader().\n+                getColumnModel().getColumn(0).getWidth() * SCALE) - 2;\n+        int expectedRGB = imgData.getRGB(verticalLineCol, 0);\n+\n+        for (int y = 0; y < imgHeader.getHeight(); y++) {\n+            for (int x = verticalLineCol; x < verticalLineCol + 3; x++) {\n+                if (expectedRGB != imgHeader.getRGB(x, y)) {\n+                    saveImage(imgHeader, \"FailureImageHeader.png\");\n+                    throw new RuntimeException(\"Header Comparison Test Failed\" +\n+                            \"(At Pos_x : \" + x + \", Pos_y : \" + y +\")\");\n+                }\n+            }\n+        }\n+\n+        int maxVerticalLine = (int) Math.ceil(\n+                table.getRowCount() * table.getRowHeight() * SCALE);\n+        for (int y = 0; y < maxVerticalLine; y++) {\n+            for (int x = verticalLineCol; x < verticalLineCol + 3; x++) {\n+                if (expectedRGB != imgData.getRGB(x, y)) {\n+                    saveImage(imgData,\"FailureImageData.png\");\n+                    throw new RuntimeException(\"TableData Comparison Test Failed\" +\n+                            \"(At Pos_x : \" + x + \", Pos_y : \" + y +\")\");\n+                }\n+            }\n+        }\n+        System.out.println(\"Test Passed\");\n+    }\n+\n+    private static void saveImage(BufferedImage img, String fileName) {\n+        try {\n+            ImageIO.write(img, \"png\", new File(fileName));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTableHeader\/TableHeaderBorderPositionTest.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"}]}