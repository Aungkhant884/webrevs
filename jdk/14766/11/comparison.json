{"files":[{"patch":"@@ -1111,2 +1111,2 @@\n-            g.drawLine( w-1, 0, w-1, h-1 );\n-            g.drawLine( 1, h-1, w-1, h-1 );\n+            SwingUtilities2.drawVLine(g, w-1, 0, h-1);\n+            SwingUtilities2.drawHLine(g, 1, w-1, h-1);\n@@ -1114,2 +1114,2 @@\n-            g.drawLine( 0, 0, w-2, 0 );\n-            g.drawLine( 0, 0, 0, h-2 );\n+            SwingUtilities2.drawHLine(g, 0, w-2, 0);\n+            SwingUtilities2.drawVLine(g, 0, 0, h-2);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/metal\/MetalBorders.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.table.JTableHeader;\n+import javax.swing.UIManager;\n+\n+import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+\/*\n+ * @test\n+ * @bug 8311031\n+ * @summary Test to validate JTable header border vertical line is\n+ *          aligned with data grid lines (Metal L&F).\n+ * @run main TableHeaderBorderPositionTest\n+ *\/\n+public class TableHeaderBorderPositionTest {\n+    private static final double SCALE = 2.25;\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n+        SwingUtilities.invokeAndWait(TableHeaderBorderPositionTest::test);\n+    }\n+\n+    private static void test() {\n+        String[][] data = {\n+                {\"1\", \"1\"}\n+        };\n+\n+        String[] columnNames = {\"Size\", \"Size\"};\n+\n+        JTable table = new JTable(data, columnNames);\n+        Dimension tableSize = table.getPreferredSize();\n+        table.setSize(tableSize);\n+\n+        final JTableHeader header = table.getTableHeader();\n+        Dimension headerSize = header.getPreferredSize();\n+        header.setSize(headerSize);\n+\n+        Dimension size = new Dimension(Math.max(headerSize.width, tableSize.width),\n+                headerSize.height + tableSize.height);\n+\n+        BufferedImage bufferedImage =\n+                new BufferedImage((int)Math.ceil(size.width * SCALE),\n+                        (int)Math.ceil(size.height * SCALE),\n+                        BufferedImage.TYPE_INT_RGB);\n+\n+        Graphics2D g2d = bufferedImage.createGraphics();\n+        g2d.scale(SCALE, SCALE);\n+\n+        try {\n+            header.paint(g2d);\n+            g2d.translate(0, header.getHeight());\n+            table.paint(g2d);\n+        } finally {\n+            g2d.dispose();\n+        }\n+\n+        int verticalLineCol = (int)(table.getTableHeader()\n+                                         .getColumnModel()\n+                                         .getColumn(0)\n+                                         .getWidth() * SCALE) - 2;\n+        int expectedRGB = bufferedImage.getRGB(verticalLineCol, 0);\n+        int maxHeight = (int)(((double)table.getTableHeader().getHeight() * SCALE)\n+                + ((double)table.getRowHeight() * SCALE));\n+\n+        for (int y = 0; y < maxHeight; y++) {\n+            for (int x = verticalLineCol; x < verticalLineCol + 3; x++) {\n+                if (expectedRGB != bufferedImage.getRGB(x, y)) {\n+                    saveBufferedImage(bufferedImage, \"failureImage.png\");\n+                    throw new RuntimeException(\"Test Failed at <\" + x + \", \" + y + \">\");\n+                }\n+            }\n+        }\n+        System.out.println(\"Test Passed\");\n+    }\n+\n+    private static void saveBufferedImage(BufferedImage image, String fileName) {\n+        try {\n+            ImageIO.write(image, \"png\", new File(fileName));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTableHeader\/TableHeaderBorderPositionTest.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"}]}