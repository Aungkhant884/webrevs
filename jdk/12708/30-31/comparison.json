{"files":[{"patch":"@@ -34,6 +34,1 @@\n-\n-    @Override\n-    protected boolean useABIv2() {\n-        return true;\n-    }\n-\n+    \/\/ Currently no specific content, but CallArranger detects usage of ABIv2 for this class.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ppc64\/ABIv2CallArranger.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-    protected abstract boolean useABIv2();\n+    final boolean useABIv2 = (this instanceof ABIv2CallArranger);\n@@ -82,1 +82,1 @@\n-        useABIv2() ? 32 : 48, \/\/ ABI header (excluding argument register spill slots)\n+        useABIv2 ? 32 : 48, \/\/ ABI header (excluding argument register spill slots)\n@@ -151,1 +151,1 @@\n-            .filter(layout -> !TypeClass.isStructHFAorReturnRegisterAggregate(layout, useABIv2()))\n+            .filter(layout -> !TypeClass.isStructHFAorReturnRegisterAggregate(layout, useABIv2))\n@@ -201,1 +201,1 @@\n-            if (!useABIv2() && is32Bit) {\n+            if (!useABIv2 && is32Bit) {\n@@ -217,1 +217,1 @@\n-            \/\/ !useABIv2() && layout.byteSize() > 8 && layout.byteSize() % 8 != 0\n+            \/\/ !useABIv2 && layout.byteSize() > 8 && layout.byteSize() % 8 != 0\n@@ -326,1 +326,1 @@\n-            TypeClass argumentClass = TypeClass.classifyLayout(layout, useABIv2());\n+            TypeClass argumentClass = TypeClass.classifyLayout(layout, useABIv2);\n@@ -403,1 +403,1 @@\n-            TypeClass argumentClass = TypeClass.classifyLayout(layout, useABIv2());\n+            TypeClass argumentClass = TypeClass.classifyLayout(layout, useABIv2);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ppc64\/CallArranger.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}