{"files":[{"patch":"@@ -157,2 +157,2 @@\n-  \/\/ (even if they are passed in registers), at least 8.\n-  \/\/ This may be a bit more than needed when HFA is used (see CallArranger.java).\n+  \/\/ (even if they are passed in registers), at least 8 (exception for ABIv2: see below).\n+  \/\/ This may be a bit more than needed when single precision HFA is used (see CallArranger.java).\n@@ -162,2 +162,3 @@\n-  \/\/ ABIv2 allows omitting it when all parameters can get passed in registers. We currently don't optimize this.\n-  \/\/ For ABIv2, we only need (_input_registers.length() > 8) ? _input_registers.length() : 0\n+  \/\/ ABIv2 allows omitting it if the callee's prototype indicates that all parameters can be passed in registers.\n+  \/\/ For ABIv2, we typically only need (_input_registers.length() > 8) ? _input_registers.length() : 0,\n+  \/\/ but this may be wrong for VarArgs. So, we currently don't optimize this.\n","filename":"src\/hotspot\/cpu\/ppc\/downcallLinker_ppc.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -200,0 +200,3 @@\n+            \/\/ Stack layout computation: We need to count all arguments in order to get the correct\n+            \/\/ offset for the next argument which will really use the stack.\n+            \/\/ The reserved space for the Parameter Save Area is determined by the DowncallStubGenerator.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ppc64\/CallArranger.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}