{"files":[{"patch":"@@ -44,1 +44,1 @@\n-                                           Label& Lfailure) {\n+                                           Label& Lfailure, bool ascii) {\n@@ -47,0 +47,1 @@\n+  const int byte_mask = ascii ? 0x7F : 0xFF;\n@@ -51,1 +52,1 @@\n-  lis(tmp1, 0xFF);                \/\/ tmp1 = 0x00FF00FF00FF00FF\n+  lis(tmp1, byte_mask);           \/\/ tmp1 = 0x00FF00FF00FF00FF (non ascii case)\n@@ -54,1 +55,1 @@\n-  ori(tmp1, tmp1, 0xFF);\n+  ori(tmp1, tmp1, byte_mask);\n@@ -70,1 +71,1 @@\n-  bne(CCR0, Lfailure);            \/\/ Not latin1.\n+  bne(CCR0, Lfailure);            \/\/ Not latin1\/ascii.\n@@ -90,1 +91,3 @@\n-void C2_MacroAssembler::string_compress(Register src, Register dst, Register cnt, Register tmp, Label& Lfailure) {\n+void C2_MacroAssembler::string_compress(Register src, Register dst, Register cnt, Register tmp,\n+                                        Label& Lfailure, bool ascii) {\n+  const int byte_mask = ascii ? 0x7F : 0xFF;\n@@ -96,2 +99,2 @@\n-  cmplwi(CCR0, tmp, 0xff);\n-  bgt(CCR0, Lfailure);            \/\/ Not latin1.\n+  cmplwi(CCR0, tmp, byte_mask);\n+  bgt(CCR0, Lfailure);            \/\/ Not latin1\/ascii.\n@@ -104,0 +107,27 @@\n+void C2_MacroAssembler::encode_iso_array(Register src, Register dst, Register len,\n+                                         Register tmp1, Register tmp2, Register tmp3, Register tmp4, Register tmp5,\n+                                         Register result, bool ascii) {\n+  Label Lslow, Lfailure1, Lfailure2, Ldone;\n+\n+  string_compress_16(src, dst, len, tmp1, tmp2, tmp3, tmp4, tmp5, Lfailure1, ascii);\n+  rldicl_(result, len, 0, 64-3); \/\/ Remaining characters.\n+  beq(CCR0, Ldone);\n+  bind(Lslow);\n+  string_compress(src, dst, result, tmp2, Lfailure2, ascii);\n+  li(result, 0);\n+  b(Ldone);\n+\n+  bind(Lfailure1);\n+  mr(result, len);\n+  mfctr(tmp1);\n+  rldimi_(result, tmp1, 3, 0); \/\/ Remaining characters.\n+  beq(CCR0, Ldone);\n+  b(Lslow);\n+\n+  bind(Lfailure2);\n+  mfctr(result); \/\/ Remaining characters.\n+\n+  bind(Ldone);\n+  subf(result, result, len);\n+}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/c2_MacroAssembler_ppc.cpp","additions":37,"deletions":7,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-                          Label& Lfailure);\n+                          Label& Lfailure, bool ascii = false);\n@@ -38,1 +38,7 @@\n-  void string_compress(Register src, Register dst, Register cnt, Register tmp, Label& Lfailure);\n+  void string_compress(Register src, Register dst, Register cnt, Register tmp,\n+                       Label& Lfailure, bool ascii = false);\n+\n+  \/\/ Encode UTF16 to ISO_8859_1 or ASCII. Return len on success or position of first mismatch.\n+  void encode_iso_array(Register src, Register dst, Register len,\n+                        Register tmp1, Register tmp2, Register tmp3, Register tmp4, Register tmp5,\n+                        Register result, bool ascii);\n","filename":"src\/hotspot\/cpu\/ppc\/c2_MacroAssembler_ppc.hpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -12809,1 +12809,1 @@\n-  format %{ \"Encode array $src,$dst,$len -> $result \\t\/\/ KILL $tmp1, $tmp2, $tmp3, $tmp4, $tmp5\" %}\n+  format %{ \"Encode iso array $src,$dst,$len -> $result \\t\/\/ KILL $tmp1, $tmp2, $tmp3, $tmp4, $tmp5\" %}\n@@ -12811,19 +12811,5 @@\n-    Label Lslow, Lfailure1, Lfailure2, Ldone;\n-    __ string_compress_16($src$$Register, $dst$$Register, $len$$Register, $tmp1$$Register,\n-                          $tmp2$$Register, $tmp3$$Register, $tmp4$$Register, $tmp5$$Register, Lfailure1);\n-    __ rldicl_($result$$Register, $len$$Register, 0, 64-3); \/\/ Remaining characters.\n-    __ beq(CCR0, Ldone);\n-    __ bind(Lslow);\n-    __ string_compress($src$$Register, $dst$$Register, $result$$Register, $tmp2$$Register, Lfailure2);\n-    __ li($result$$Register, 0);\n-    __ b(Ldone);\n-\n-    __ bind(Lfailure1);\n-    __ mr($result$$Register, $len$$Register);\n-    __ mfctr($tmp1$$Register);\n-    __ rldimi_($result$$Register, $tmp1$$Register, 3, 0); \/\/ Remaining characters.\n-    __ beq(CCR0, Ldone);\n-    __ b(Lslow);\n-\n-    __ bind(Lfailure2);\n-    __ mfctr($result$$Register); \/\/ Remaining characters.\n+    __ encode_iso_array($src$$Register, $dst$$Register, $len$$Register, $tmp1$$Register, $tmp2$$Register,\n+                        $tmp3$$Register, $tmp4$$Register, $tmp5$$Register, $result$$Register, false);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n@@ -12831,2 +12817,12 @@\n-    __ bind(Ldone);\n-    __ subf($result$$Register, $result$$Register, $len$$Register);\n+\/\/ encode char[] to byte[] in ASCII\n+instruct encode_ascii_array(rarg1RegP src, rarg2RegP dst, iRegIsrc len, iRegIdst result, iRegLdst tmp1,\n+                          iRegLdst tmp2, iRegLdst tmp3, iRegLdst tmp4, iRegLdst tmp5, regCTR ctr, flagsRegCR0 cr0) %{\n+  predicate(((EncodeISOArrayNode*)n)->is_ascii());\n+  match(Set result (EncodeISOArray src (Binary dst len)));\n+  effect(TEMP_DEF result, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP tmp5,\n+         USE_KILL src, USE_KILL dst, KILL ctr, KILL cr0);\n+  ins_cost(300);\n+  format %{ \"Encode ascii array $src,$dst,$len -> $result \\t\/\/ KILL $tmp1, $tmp2, $tmp3, $tmp4, $tmp5\" %}\n+  ins_encode %{\n+    __ encode_iso_array($src$$Register, $dst$$Register, $len$$Register, $tmp1$$Register, $tmp2$$Register,\n+                        $tmp3$$Register, $tmp4$$Register, $tmp5$$Register, $result$$Register, true);\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":18,"deletions":22,"binary":false,"changes":40,"status":"modified"}]}