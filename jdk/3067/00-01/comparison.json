{"files":[{"patch":"@@ -465,1 +465,1 @@\n-  jlong next_arg(BasicType expectedType) {\n+  jlong next_arg() {\n@@ -487,0 +487,6 @@\n+  Handle next_object() {\n+    guarantee(!_pushed, \"one argument\");\n+    _pushed = true;\n+    return Handle(Thread::current(), (oop) (address) _argument);\n+  }\n+\n@@ -488,1 +494,1 @@\n-  ArgumentPusher(Symbol* signature, JavaCallArguments*  jca, jlong argument, bool is_static) : SignatureIterator(signature) {\n+  ArgumentPusher(Symbol* signature, JavaCallArguments*  jca, jlong argument) : SignatureIterator(signature) {\n@@ -493,1 +499,1 @@\n-    iterate();\n+    do_parameters_on(this);\n@@ -496,16 +502,15 @@\n-  inline void do_object() {       _jca->push_oop((oop) (address) next_arg(T_OBJECT)); }\n-\n-  inline void do_bool()   { if (!is_return_type()) _jca->push_int((jboolean) next_arg(T_BOOLEAN)); }\n-  inline void do_char()   { if (!is_return_type()) _jca->push_int((jchar) next_arg(T_CHAR)); }\n-  inline void do_short()  { if (!is_return_type()) _jca->push_int((jint)  next_arg(T_SHORT)); }\n-  inline void do_byte()   { if (!is_return_type()) _jca->push_int((jbyte) next_arg(T_BYTE)); }\n-  inline void do_int()    { if (!is_return_type()) _jca->push_int((jint)  next_arg(T_INT)); }\n-\n-  inline void do_long()   { if (!is_return_type()) _jca->push_long((jlong) next_arg(T_LONG)); }\n-  inline void do_float()  { if (!is_return_type()) _jca->push_float(next_float()); }\n-  inline void do_double() { if (!is_return_type()) _jca->push_double(next_double()); }\n-\n-  inline void do_object(int begin, int end) { if (!is_return_type()) do_object(); }\n-  inline void do_array(int begin, int end)  { if (!is_return_type()) do_object(); }\n-\n-  inline void do_void()                     { }\n+  void do_type(BasicType type) {\n+    switch (type) {\n+      case T_OBJECT:\n+      case T_ARRAY:   _jca->push_oop(next_object());         break;\n+      case T_BOOLEAN: _jca->push_int((jboolean) next_arg()); break;\n+      case T_CHAR:    _jca->push_int((jchar) next_arg());    break;\n+      case T_SHORT:   _jca->push_int((jint)  next_arg());    break;\n+      case T_BYTE:    _jca->push_int((jbyte) next_arg());    break;\n+      case T_INT:     _jca->push_int((jint)  next_arg());    break;\n+      case T_LONG:    _jca->push_long((jlong) next_arg());   break;\n+      case T_FLOAT:   _jca->push_float(next_float());        break;\n+      case T_DOUBLE:  _jca->push_double(next_double());      break;\n+      default:        fatal(\"Unexpected type %s\", type2name(type));\n+    }\n+  }\n@@ -517,1 +522,1 @@\n-  HandleMark hm;\n+  HandleMark hm(THREAD);\n@@ -526,2 +531,3 @@\n-  ArgumentPusher jap(signature, &jca, argument, mh->is_static());\n-  JavaValue result(jap.get_ret_type());\n+  ArgumentPusher jap(signature, &jca, argument);\n+  BasicType return_type = jap.return_type();\n+  JavaValue result(return_type);\n@@ -530,1 +536,1 @@\n-  if (jap.get_ret_type() == T_VOID) {\n+  if (return_type == T_VOID) {\n@@ -532,1 +538,1 @@\n-  } else if (jap.get_ret_type() == T_OBJECT || jap.get_ret_type() == T_ARRAY) {\n+  } else if (return_type == T_OBJECT || return_type == T_ARRAY) {\n@@ -538,1 +544,1 @@\n-    switch (jap.get_ret_type()) {\n+    switch (return_type) {\n@@ -554,1 +560,1 @@\n-        ShouldNotReachHere();\n+        fatal(\"Unexpected type %s\", type2name(return_type));\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":32,"deletions":26,"binary":false,"changes":58,"status":"modified"}]}