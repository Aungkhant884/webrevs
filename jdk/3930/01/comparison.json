{"files":[{"patch":"@@ -1091,1 +1091,1 @@\n-void itableMethodEntry::initialize(Method* m) {\n+void itableMethodEntry::initialize(InstanceKlass* klass, Method* m) {\n@@ -1097,1 +1097,2 @@\n-     !MetaspaceShared::is_old_class(m->method_holder())) {\n+     !MetaspaceShared::is_old_class(m->method_holder()) &&\n+     !MetaspaceShared::is_old_class(klass)) {\n@@ -1101,0 +1102,2 @@\n+    \/\/ For a shared old class which was not linked during dump time, we can't compare the dumptime\n+    \/\/ itable method entry with the runtime entry.\n@@ -1339,1 +1342,1 @@\n-            initialize(Universe::throw_illegal_access_error());\n+            initialize(_klass, Universe::throw_illegal_access_error());\n@@ -1352,1 +1355,1 @@\n-      itableOffsetEntry::method_entry(_klass, method_table_offset)[ime_num].initialize(target);\n+      itableOffsetEntry::method_entry(_klass, method_table_offset)[ime_num].initialize(_klass, target);\n@@ -1384,1 +1387,1 @@\n-    ime->initialize(new_method);\n+    ime->initialize(_klass, new_method);\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -252,1 +252,1 @@\n-  void initialize(Method* method);\n+  void initialize(InstanceKlass* klass, Method* method);\n","filename":"src\/hotspot\/share\/oops\/klassVtable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8266330\n+ * @summary CDS support of old classes with major version < JDK_6 (50) for static archive.\n+ *          Test a scenario that a class implements an old interface but the\n+ *          implementation is in another class.\n+ * @requires vm.cds\n+ * @library \/test\/lib\n+ * @compile test-classes\/OldInf.jasm\n+ * @compile test-classes\/InfMethod.java\n+ * @compile test-classes\/IndirectImpInf.java\n+ * @compile test-classes\/IndirectImpInfApp.java\n+ * @run driver OldSuperInfIndirect\n+ *\/\n+\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class OldSuperInfIndirect {\n+\n+    public static void main(String[] args) throws Exception {\n+        String mainClass = \"IndirectImpInfApp\";\n+        String namePrefix = \"indirectimpinfapp\";\n+        String appClasses[] = TestCommon.list(\"OldInf\", \"InfMethod\", \"IndirectImpInf\", mainClass);\n+        JarBuilder.build(namePrefix, appClasses);\n+\n+        String appJar = TestCommon.getTestJar(namePrefix + \".jar\");\n+        String archiveName = namePrefix + \".jsa\";\n+\n+        boolean dynamicMode = CDSTestUtils.DYNAMIC_DUMP;\n+\n+        \/\/ create archive with class list\n+        OutputAnalyzer output = TestCommon.dump(appJar, appClasses, \"-Xlog:class+load,cds=debug,verification=trace\");\n+        TestCommon.checkExecReturn(output, 0,\n+                                   dynamicMode ? true : false,\n+                                   \"Pre JDK 6 class not supported by CDS: 49.0 OldInf\",\n+                                   \"Skipping IndirectImpInf: Old class has been linked\");\n+\n+        \/\/ run with archive\n+        TestCommon.run(\n+            \"-cp\", appJar,\n+            \"-Xlog:class+load,cds=debug,verification=trace\",\n+            mainClass)\n+          .assertNormalExit(out -> {\n+              out.shouldContain(\"Verifying class OldInf with old format\")\n+                 .shouldContain(\"Verifying class IndirectImpInf with new format\");\n+              if (!dynamicMode) {\n+                  out.shouldContain(\"OldInf source: shared objects file\")\n+                     .shouldContain(\"InfMethod source: shared objects file\")\n+                     .shouldContain(\"IndirectImpInf source: shared objects file\");\n+              } else {\n+                  \/\/ Old classes were already linked before dynamic dump happened,\n+                  \/\/ so they couldn't be archived.\n+                  out.shouldMatch(\".class.load.*OldInf source:.*indirectimpinfapp.jar\")\n+                     .shouldMatch(\".class.load.*IndirectImpInf source:.*indirectimpinfapp.jar\")\n+                     .shouldContain(\"InfMethod source: shared objects file (top)\");\n+              }\n+          });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/OldSuperInfIndirect.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public class IndirectImpInf extends InfMethod implements OldInf {\n+    \/\/ This class implements an old interface (OldInf) but the implementation\n+    \/\/ is in InfMethod.\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/IndirectImpInf.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public class IndirectImpInfApp {\n+    public static void main(String args[]) {\n+        IndirectImpInf i = new IndirectImpInf();\n+        System.out.println(i.doit());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/IndirectImpInfApp.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public class InfMethod {\n+    public String doit() {\n+        return \"doit from InfMethod\";\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/InfMethod.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"}]}