{"files":[{"patch":"@@ -30,0 +30,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/aot\/aotCodeHeap.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"ci\/ciSymbols.hpp\"\n@@ -1480,1 +1481,1 @@\n-  if (method()->name() == ciSymbol::object_initializer_name() &&\n+  if (method()->name() == ciSymbols::object_initializer_name() &&\n@@ -3823,1 +3824,1 @@\n-    if (callee->name() == ciSymbol::object_initializer_name() &&\n+    if (callee->name() == ciSymbols::object_initializer_name() &&\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_InstructionPrinter.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"classfile\/vmIntrinsics.hpp\"\n@@ -1207,2 +1208,2 @@\n-vmIntrinsics::ID BCEscapeAnalyzer::known_intrinsic() {\n-  vmIntrinsics::ID iid = method()->intrinsic_id();\n+vmIntrinsicID BCEscapeAnalyzer::known_intrinsic() {\n+  vmIntrinsicID iid = method()->intrinsic_id();\n@@ -1217,1 +1218,1 @@\n-void BCEscapeAnalyzer::compute_escape_for_intrinsic(vmIntrinsics::ID iid) {\n+void BCEscapeAnalyzer::compute_escape_for_intrinsic(vmIntrinsicID iid) {\n@@ -1296,1 +1297,1 @@\n-  vmIntrinsics::ID iid = known_intrinsic();\n+  vmIntrinsicID iid = known_intrinsic();\n","filename":"src\/hotspot\/share\/ci\/bcEscapeAnalyzer.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -101,2 +101,2 @@\n-  vmIntrinsics::ID known_intrinsic();\n-  void compute_escape_for_intrinsic(vmIntrinsics::ID iid);\n+  vmIntrinsicID known_intrinsic();\n+  void compute_escape_for_intrinsic(vmIntrinsicID iid);\n","filename":"src\/hotspot\/share\/ci\/bcEscapeAnalyzer.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"ci\/ciSymbols.hpp\"\n@@ -801,1 +802,1 @@\n-    ciSymbol*        name      = ciSymbol::invokeBasic_name();\n+    ciSymbol*        name      = ciSymbols::invokeBasic_name();\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"ci\/ciSymbols.hpp\"\n@@ -221,1 +222,1 @@\n-  if (holder->name() == ciSymbol::java_lang_System())\n+  if (holder->name() == ciSymbols::java_lang_System())\n@@ -242,1 +243,1 @@\n-  if (holder->name() == ciSymbol::java_lang_String())\n+  if (holder->name() == ciSymbols::java_lang_String())\n@@ -246,4 +247,4 @@\n-  if (holder->name() == ciSymbol::java_util_concurrent_atomic_AtomicIntegerFieldUpdater_Impl() ||\n-      holder->name() == ciSymbol::java_util_concurrent_atomic_AtomicLongFieldUpdater_CASUpdater() ||\n-      holder->name() == ciSymbol::java_util_concurrent_atomic_AtomicLongFieldUpdater_LockedUpdater() ||\n-      holder->name() == ciSymbol::java_util_concurrent_atomic_AtomicReferenceFieldUpdater_Impl()) {\n+  if (holder->name() == ciSymbols::java_util_concurrent_atomic_AtomicIntegerFieldUpdater_Impl() ||\n+      holder->name() == ciSymbols::java_util_concurrent_atomic_AtomicLongFieldUpdater_CASUpdater() ||\n+      holder->name() == ciSymbols::java_util_concurrent_atomic_AtomicLongFieldUpdater_LockedUpdater() ||\n+      holder->name() == ciSymbols::java_util_concurrent_atomic_AtomicReferenceFieldUpdater_Impl()) {\n@@ -420,0 +421,18 @@\n+bool ciField::is_call_site_target() {\n+  ciInstanceKlass* callsite_klass = CURRENT_ENV->CallSite_klass();\n+  if (callsite_klass == NULL)\n+    return false;\n+  return (holder()->is_subclass_of(callsite_klass) && (name() == ciSymbols::target_name()));\n+}\n+\n+bool ciField::is_autobox_cache() {\n+  ciSymbol* klass_name = holder()->name();\n+  return (name() == ciSymbols::cache_field_name() &&\n+          holder()->uses_default_loader() &&\n+          (klass_name == ciSymbols::java_lang_Character_CharacterCache() ||\n+            klass_name == ciSymbols::java_lang_Byte_ByteCache() ||\n+            klass_name == ciSymbols::java_lang_Short_ShortCache() ||\n+            klass_name == ciSymbols::java_lang_Integer_IntegerCache() ||\n+            klass_name == ciSymbols::java_lang_Long_LongCache()));\n+}\n+\n","filename":"src\/hotspot\/share\/ci\/ciField.cpp","additions":25,"deletions":6,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -181,6 +181,1 @@\n-  bool is_call_site_target() {\n-    ciInstanceKlass* callsite_klass = CURRENT_ENV->CallSite_klass();\n-    if (callsite_klass == NULL)\n-      return false;\n-    return (holder()->is_subclass_of(callsite_klass) && (name() == ciSymbol::target_name()));\n-  }\n+  bool is_call_site_target();\n@@ -188,10 +183,1 @@\n-  bool is_autobox_cache() {\n-    ciSymbol* klass_name = holder()->name();\n-    return (name() == ciSymbol::cache_field_name() &&\n-            holder()->uses_default_loader() &&\n-            (klass_name == ciSymbol::java_lang_Character_CharacterCache() ||\n-             klass_name == ciSymbol::java_lang_Byte_ByteCache() ||\n-             klass_name == ciSymbol::java_lang_Short_ShortCache() ||\n-             klass_name == ciSymbol::java_lang_Integer_IntegerCache() ||\n-             klass_name == ciSymbol::java_lang_Long_LongCache()));\n-  }\n+  bool is_autobox_cache();\n","filename":"src\/hotspot\/share\/ci\/ciField.hpp","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"ci\/ciSymbols.hpp\"\n@@ -949,1 +950,1 @@\n-   return name() == ciSymbol::object_initializer_name();\n+   return name() == ciSymbols::object_initializer_name();\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"classfile\/vmIntrinsics.hpp\"\n@@ -78,1 +79,1 @@\n-  vmIntrinsics::ID _intrinsic_id;\n+  vmIntrinsicID _intrinsic_id;\n@@ -184,1 +185,1 @@\n-  vmIntrinsics::ID intrinsic_id() const          { check_is_loaded(); return _intrinsic_id; }\n+  vmIntrinsicID intrinsic_id() const             { check_is_loaded(); return _intrinsic_id; }\n","filename":"src\/hotspot\/share\/ci\/ciMethod.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"ci\/ciSymbols.hpp\"\n@@ -139,1 +140,1 @@\n-    assert(ciSymbol::void_class_signature()->get_symbol() == vmSymbols::void_class_signature(), \"spot check\");\n+    assert(ciSymbols::void_class_signature()->get_symbol() == vmSymbols::void_class_signature(), \"spot check\");\n","filename":"src\/hotspot\/share\/ci\/ciObjectFactory.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"ci\/ciSymbols.hpp\"\n@@ -479,1 +480,1 @@\n-    return CURRENT_ENV->get_klass_by_name(_holder, ciSymbol::java_lang_invoke_MethodHandle(), false);\n+    return CURRENT_ENV->get_klass_by_name(_holder, ciSymbols::java_lang_invoke_MethodHandle(), false);\n","filename":"src\/hotspot\/share\/ci\/ciStreams.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"ci\/ciSymbols.hpp\"\n@@ -29,0 +30,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n@@ -42,0 +44,2 @@\n+DEBUG_ONLY(bool ciSymbol::sid_ok() { return vmSymbols::find_sid(get_symbol()) == _sid; })\n+\n","filename":"src\/hotspot\/share\/ci\/ciSymbol.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-#include \"ci\/ciObjectFactory.hpp\"\n-#include \"classfile\/vmSymbols.hpp\"\n@@ -53,1 +51,0 @@\n-  DEBUG_ONLY( bool sid_ok() { return vmSymbols::find_sid(get_symbol()) == _sid; } )\n@@ -55,1 +52,3 @@\n-  ciSymbol(Symbol* s, vmSymbolID sid = vmSymbolID::NO_SID);\n+  ciSymbol(Symbol* s, vmSymbolID sid);\n+\n+  DEBUG_ONLY(bool sid_ok();)\n@@ -70,1 +69,1 @@\n-  \/\/ The enumeration ID from vmSymbols, or vmSymbols::NO_SID if none.\n+  \/\/ The enumeration ID from vmSymbols, or vmSymbolID::NO_SID if none.\n@@ -100,5 +99,0 @@\n-#define CI_SYMBOL_DECLARE(name, ignore_def) \\\n-  static ciSymbol* name() { return ciObjectFactory::vm_symbol_at(VM_SYMBOL_ENUM_NAME(name)); }\n-  VM_SYMBOLS_DO(CI_SYMBOL_DECLARE, CI_SYMBOL_DECLARE)\n-#undef CI_SYMBOL_DECLARE\n-\n","filename":"src\/hotspot\/share\/ci\/ciSymbol.hpp","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_CI_CISYMBOLS_HPP\n+#define SHARE_CI_CISYMBOLS_HPP\n+\n+#include \"ci\/ciObjectFactory.hpp\"\n+#include \"ci\/ciSymbol.hpp\"\n+#include \"classfile\/vmSymbols.hpp\"\n+#include \"oops\/symbol.hpp\"\n+\n+class ciSymbols {\n+ public:\n+#define CI_SYMBOL_DECLARE(name, ignore_def) \\\n+  static ciSymbol* name() { return ciObjectFactory::vm_symbol_at(VM_SYMBOL_ENUM_NAME(name)); }\n+\n+  VM_SYMBOLS_DO(CI_SYMBOL_DECLARE, CI_SYMBOL_DECLARE)\n+#undef CI_SYMBOL_DECLARE\n+\n+};\n+\n+#endif \/\/ SHARE_CI_CISYMBOLS_HPP\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/ci\/ciSymbols.hpp","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"classfile\/vmIntrinsics.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"classfile\/vmIntrinsics.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/methodLiveness.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/compilerRuntime.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n@@ -45,0 +46,10 @@\n+JVMCICompiler* JVMCICompiler::instance(bool require_non_null, TRAPS) {\n+  if (!EnableJVMCI) {\n+    THROW_MSG_NULL(vmSymbols::java_lang_InternalError(), \"JVMCI is not enabled\")\n+  }\n+  if (_instance == NULL && require_non_null) {\n+    THROW_MSG_NULL(vmSymbols::java_lang_InternalError(), \"The JVMCI compiler instance has not been created\");\n+  }\n+  return _instance;\n+}\n+\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompiler.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -61,9 +61,1 @@\n-  static JVMCICompiler* instance(bool require_non_null, TRAPS) {\n-    if (!EnableJVMCI) {\n-      THROW_MSG_NULL(vmSymbols::java_lang_InternalError(), \"JVMCI is not enabled\")\n-    }\n-    if (_instance == NULL && require_non_null) {\n-      THROW_MSG_NULL(vmSymbols::java_lang_InternalError(), \"The JVMCI compiler instance has not been created\");\n-    }\n-    return _instance;\n-  }\n+  static JVMCICompiler* instance(bool require_non_null, TRAPS);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompiler.hpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"ci\/ciSymbols.hpp\"\n@@ -1123,1 +1124,1 @@\n-        callee->name() != ciSymbol::finalize_method_name()) {\n+        callee->name() != ciSymbols::finalize_method_name()) {\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"classfile\/vmSymbols.hpp\"\n+#include \"classfile\/vmIntrinsics.hpp\"\n@@ -63,1 +63,1 @@\n-  vmIntrinsics::ID id = m->intrinsic_id();\n+  vmIntrinsicID id = m->intrinsic_id();\n@@ -92,1 +92,1 @@\n-                                (vmIntrinsics::ID) id);\n+                                id);\n@@ -675,1 +675,1 @@\n-    \/\/ to the list in vmSymbols.hpp without implementing it here.\n+    \/\/ to the list in vmIntrinsics.hpp without implementing it here.\n@@ -711,1 +711,1 @@\n-    \/\/ to the list in vmSymbols.hpp without implementing it here.\n+    \/\/ to the list in vmIntrinsics.hpp without implementing it here.\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"ci\/ciSymbols.hpp\"\n@@ -248,1 +249,1 @@\n-      klass->name() == ciSymbol::java_lang_Class() ||\n+      klass->name() == ciSymbols::java_lang_Class() ||\n","filename":"src\/hotspot\/share\/opto\/parseHelper.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"ci\/ciSymbols.hpp\"\n@@ -420,3 +421,3 @@\n-    string_sig = ciSymbol::String_StringBuilder_signature();\n-    int_sig = ciSymbol::int_StringBuilder_signature();\n-    char_sig = ciSymbol::char_StringBuilder_signature();\n+    string_sig = ciSymbols::String_StringBuilder_signature();\n+    int_sig = ciSymbols::int_StringBuilder_signature();\n+    char_sig = ciSymbols::char_StringBuilder_signature();\n@@ -424,3 +425,3 @@\n-    string_sig = ciSymbol::String_StringBuffer_signature();\n-    int_sig = ciSymbol::int_StringBuffer_signature();\n-    char_sig = ciSymbol::char_StringBuffer_signature();\n+    string_sig = ciSymbols::String_StringBuffer_signature();\n+    int_sig = ciSymbols::int_StringBuffer_signature();\n+    char_sig = ciSymbols::char_StringBuffer_signature();\n@@ -473,1 +474,1 @@\n-            use->method()->name() == ciSymbol::object_initializer_name() &&\n+            use->method()->name() == ciSymbols::object_initializer_name() &&\n@@ -477,4 +478,4 @@\n-          if (sig == ciSymbol::void_method_signature() ||\n-              sig == ciSymbol::int_void_signature() ||\n-              sig == ciSymbol::string_void_signature()) {\n-            if (sig == ciSymbol::string_void_signature()) {\n+          if (sig == ciSymbols::void_method_signature() ||\n+              sig == ciSymbols::int_void_signature() ||\n+              sig == ciSymbols::string_void_signature()) {\n+            if (sig == ciSymbols::string_void_signature()) {\n@@ -537,1 +538,1 @@\n-               cnode->method()->name() == ciSymbol::append_name() &&\n+               cnode->method()->name() == ciSymbols::append_name() &&\n@@ -602,1 +603,1 @@\n-                                                                  ciSymbol::make(\"[I\"), true);\n+                                                                  ciSymbols::int_array_signature(), true);\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"ci\/ciSymbols.hpp\"\n@@ -361,2 +362,2 @@\n-  ciField* field = ciEnv::current()->vector_VectorPayload_klass()->get_field_by_name(ciSymbol::payload_name(),\n-                                                                                     ciSymbol::object_signature(),\n+  ciField* field = ciEnv::current()->vector_VectorPayload_klass()->get_field_by_name(ciSymbols::payload_name(),\n+                                                                                     ciSymbols::object_signature(),\n@@ -406,2 +407,2 @@\n-    ciField* field = ciEnv::current()->vector_VectorPayload_klass()->get_field_by_name(ciSymbol::payload_name(),\n-                                                                                       ciSymbol::object_signature(),\n+    ciField* field = ciEnv::current()->vector_VectorPayload_klass()->get_field_by_name(ciSymbols::payload_name(),\n+                                                                                       ciSymbols::object_signature(),\n","filename":"src\/hotspot\/share\/opto\/vector.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"ci\/ciSymbols.hpp\"\n@@ -43,1 +44,1 @@\n-  ciField* fd1 = ik->get_field_by_name(ciSymbol::ETYPE_name(), ciSymbol::class_signature(), \/* is_static *\/ true);\n+  ciField* fd1 = ik->get_field_by_name(ciSymbols::ETYPE_name(), ciSymbols::class_signature(), \/* is_static *\/ true);\n@@ -50,1 +51,1 @@\n-  ciField* fd2 = ik->get_field_by_name(ciSymbol::VLENGTH_name(), ciSymbol::int_signature(), \/* is_static *\/ true);\n+  ciField* fd2 = ik->get_field_by_name(ciSymbols::VLENGTH_name(), ciSymbols::int_signature(), \/* is_static *\/ true);\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}