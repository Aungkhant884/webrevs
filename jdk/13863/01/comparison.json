{"files":[{"patch":"@@ -433,5 +433,0 @@\n-     * <p>\n-     * This method is <a href=\"package-summary.html#restricted\"><em>restricted<\/em><\/a>.\n-     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n-     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n-     * restricted methods, and use safe and supported functionalities, where possible.\n@@ -446,1 +441,0 @@\n-     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n@@ -448,1 +442,0 @@\n-    @CallerSensitive\n@@ -450,1 +443,0 @@\n-        Reflection.ensureNativeAccess(Reflection.getCallerClass(), Linker.class, \"nativeLinker\");\n@@ -461,0 +453,5 @@\n+     * <p>\n+     * This method is <a href=\"package-summary.html#restricted\"><em>restricted<\/em><\/a>.\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n+     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n+     * restricted methods, and use safe and supported functionalities, where possible.\n@@ -469,0 +466,1 @@\n+     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n@@ -470,4 +468,2 @@\n-    default MethodHandle downcallHandle(MemorySegment symbol, FunctionDescriptor function, Option... options) {\n-        SharedUtils.checkSymbol(symbol);\n-        return downcallHandle(function, options).bindTo(symbol);\n-    }\n+    @CallerSensitive\n+    MethodHandle downcallHandle(MemorySegment symbol, FunctionDescriptor function, Option... options);\n@@ -505,0 +501,5 @@\n+     * <p>\n+     * This method is <a href=\"package-summary.html#restricted\"><em>restricted<\/em><\/a>.\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n+     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n+     * restricted methods, and use safe and supported functionalities, where possible.\n@@ -512,0 +513,1 @@\n+     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n@@ -513,0 +515,1 @@\n+    @CallerSensitive\n@@ -536,0 +539,5 @@\n+     * <p>\n+     * This method is <a href=\"package-summary.html#restricted\"><em>restricted<\/em><\/a>.\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n+     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n+     * restricted methods, and use safe and supported functionalities, where possible.\n@@ -548,0 +556,1 @@\n+     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n@@ -549,0 +558,1 @@\n+    @CallerSensitive\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":22,"deletions":12,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+import jdk.internal.reflect.CallerSensitive;\n+import jdk.internal.reflect.Reflection;\n@@ -71,1 +73,15 @@\n-    public MethodHandle downcallHandle(FunctionDescriptor function, Option... options) {\n+    @CallerSensitive\n+    public final MethodHandle downcallHandle(MemorySegment symbol, FunctionDescriptor function, Option... options) {\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), Linker.class, \"downcallHandle\");\n+        SharedUtils.checkSymbol(symbol);\n+        return downcallHandle0(function, options).bindTo(symbol);\n+    }\n+\n+    @Override\n+    @CallerSensitive\n+    public final MethodHandle downcallHandle(FunctionDescriptor function, Option... options) {\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), Linker.class, \"downcallHandle\");\n+        return downcallHandle0(function, options);\n+    }\n+\n+    private final MethodHandle downcallHandle0(FunctionDescriptor function, Option... options) {\n@@ -86,0 +102,1 @@\n+\n@@ -89,1 +106,3 @@\n-    public MemorySegment upcallStub(MethodHandle target, FunctionDescriptor function, Arena arena, Linker.Option... options) {\n+    @CallerSensitive\n+    public final MemorySegment upcallStub(MethodHandle target, FunctionDescriptor function, Arena arena, Linker.Option... options) {\n+        Reflection.ensureNativeAccess(Reflection.getCallerClass(), Linker.class, \"upcallStub\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.lang.foreign.Linker.Option;\n+import java.lang.invoke.MethodHandle;\n@@ -39,1 +41,0 @@\n-        testSetAccessible();\n@@ -46,8 +47,3 @@\n-       Method method = Linker.class.getDeclaredMethod(\"nativeLinker\");\n-       method.invoke(null);\n-   }\n-\n-   public static void testSetAccessible() throws Throwable {\n-       Method method = Linker.class.getDeclaredMethod(\"nativeLinker\");\n-       method.setAccessible(true);\n-       method.invoke(null);\n+       Linker linker = Linker.nativeLinker();\n+       Method method = Linker.class.getDeclaredMethod(\"downcallHandle\", FunctionDescriptor.class, Option[].class);\n+       method.invoke(linker, FunctionDescriptor.ofVoid(), new Linker.Option[0]);\n@@ -57,3 +53,3 @@\n-       var mh = MethodHandles.lookup().findStatic(Linker.class, \"nativeLinker\",\n-           MethodType.methodType(Linker.class));\n-       var linker = (Linker)mh.invokeExact();\n+       var mh = MethodHandles.lookup().findVirtual(Linker.class, \"downcallHandle\",\n+           MethodType.methodType(MethodHandle.class, FunctionDescriptor.class, Linker.Option[].class));\n+       var downcall = (MethodHandle)mh.invokeExact(Linker.nativeLinker(), FunctionDescriptor.ofVoid(), new Linker.Option[0]);\n@@ -63,1 +59,1 @@\n-       Linker.nativeLinker();\n+       Linker.nativeLinker().downcallHandle(FunctionDescriptor.ofVoid());\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/org\/openjdk\/foreigntest\/PanamaMainUnnamedModule.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -30,3 +30,3 @@\n-       System.out.println(\"Trying to get Linker\");\n-       Linker.nativeLinker();\n-       System.out.println(\"Got Linker\");\n+       System.out.println(\"Trying to obtain a downcall handle\");\n+       Linker.nativeLinker().downcallHandle(FunctionDescriptor.ofVoid());\n+       System.out.println(\"Got downcall handle\");\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/PanamaMain.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,3 +36,3 @@\n-        System.out.println(\"Trying to get Linker\");\n-        Linker.nativeLinker();\n-        System.out.println(\"Got Linker\");\n+        System.out.println(\"Trying to obtain a downcall handle\");\n+        Linker.nativeLinker().downcallHandle(FunctionDescriptor.ofVoid());\n+        System.out.println(\"Got downcall handle\");\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/PanamaMainDirect.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,5 +37,6 @@\n-        System.out.println(\"Trying to get Linker\");\n-        var mh = MethodHandles.lookup().findStatic(Linker.class, \"nativeLinker\",\n-                MethodType.methodType(Linker.class));\n-        var linker = (Linker)mh.invokeExact();\n-        System.out.println(\"Got Linker\");\n+        Linker linker = Linker.nativeLinker();\n+        System.out.println(\"Trying to obtain a downcall handle\");\n+        var mh = MethodHandles.lookup().findVirtual(Linker.class, \"downcallHandle\",\n+                MethodType.methodType(MethodHandle.class, FunctionDescriptor.class, Linker.Option[].class));\n+        var handle = (MethodHandle)mh.invokeExact(linker, FunctionDescriptor.ofVoid(), new Linker.Option[0]);\n+        System.out.println(\"Got downcall handle\");\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/PanamaMainInvoke.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -3,0 +3,3 @@\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+\n@@ -14,3 +17,3 @@\n-        System.out.println(\"Trying to get Linker\");\n-        nativeLinker0();\n-        System.out.println(\"Got Linker\");\n+        System.out.println(\"Trying to get downcall handle\");\n+        nativeLinker0(Linker.nativeLinker(), FunctionDescriptor.ofVoid(), new Linker.Option[0]);\n+        System.out.println(\"Got downcall handle\");\n@@ -19,1 +22,1 @@\n-    static native void nativeLinker0();\n+    static native void nativeLinker0(Linker linker, FunctionDescriptor desc, Linker.Option[] options);\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/PanamaMainJNI.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.foreign.Linker.Option;\n@@ -37,4 +38,5 @@\n-        System.out.println(\"Trying to get Linker\");\n-        Method method = Linker.class.getDeclaredMethod(\"nativeLinker\");\n-        method.invoke(null);\n-        System.out.println(\"Got Linker\");\n+        Linker linker = Linker.nativeLinker();\n+        System.out.println(\"Trying to get downcall handle\");\n+        Method method = Linker.class.getDeclaredMethod(\"downcallHandle\", FunctionDescriptor.class, Option[].class);\n+        method.invoke(linker, FunctionDescriptor.ofVoid(), new Linker.Option[0]);\n+        System.out.println(\"Got downcall handle\");\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/PanamaMainReflection.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,2 +28,9 @@\n-void call(void* ctxt) {\n-    JavaVM *jvm = (JavaVM*) ctxt;\n+typedef struct {\n+   JavaVM* jvm;\n+   jobject linker;\n+   jobject desc;\n+   jarray opts;\n+} Context;\n+\n+void call(void* arg) {\n+    Context* context = (Context*)arg;\n@@ -31,1 +38,1 @@\n-    jvm->AttachCurrentThread((void**)&env, NULL);\n+    context->jvm->AttachCurrentThread((void**)&env, NULL);\n@@ -33,3 +40,4 @@\n-    jmethodID nativeLinkerMethod = env->GetStaticMethodID(linkerClass, \"nativeLinker\", \"()Ljava\/lang\/foreign\/Linker;\");\n-    env->CallStaticVoidMethod(linkerClass, nativeLinkerMethod);\n-    jvm->DetachCurrentThread();\n+    jmethodID nativeLinkerMethod = env->GetMethodID(linkerClass, \"downcallHandle\",\n+            \"(Ljava\/lang\/foreign\/FunctionDescriptor;[Ljava\/lang\/foreign\/Linker$Option;)Ljava\/lang\/invoke\/MethodHandle;\");\n+    env->CallVoidMethod(context->linker, nativeLinkerMethod, context->desc, context->opts);\n+    context->jvm->DetachCurrentThread();\n@@ -40,4 +48,7 @@\n-    Java_org_openjdk_foreigntest_PanamaMainJNI_nativeLinker0(JNIEnv *env, jclass cls) {\n-        JavaVM* jvm;\n-        env->GetJavaVM(&jvm);\n-        run_in_new_thread_and_join(call, jvm);\n+    Java_org_openjdk_foreigntest_PanamaMainJNI_nativeLinker0(JNIEnv *env, jclass cls, jobject linker, jobject desc, jarray opts) {\n+        Context context;\n+        env->GetJavaVM(&context.jvm);\n+        context.linker = linker;\n+        context.desc = desc;\n+        context.opts = opts;\n+        run_in_new_thread_and_join(call, &context);\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/libLinkerInvokerModule.cpp","additions":21,"deletions":10,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-    static <Z> void addDefaultMapping(Class<Z> carrier, Z value) {\n+    static void addDefaultMapping(Class<?> carrier, Object value) {\n@@ -70,1 +70,1 @@\n-        addDefaultMapping(Runnable.class, () -> {});\n+        addDefaultMapping(Runnable.class, (Runnable)() -> {});\n@@ -91,0 +91,2 @@\n+        addDefaultMapping(FunctionDescriptor.class, FunctionDescriptor.ofVoid());\n+        addDefaultMapping(Linker.Option[].class, null);\n@@ -108,2 +110,1 @@\n-        Object value = DEFAULT_VALUES.get(clazz);\n-        if (value == null) {\n+        if (!DEFAULT_VALUES.containsKey(clazz)) {\n@@ -112,1 +113,1 @@\n-        return value;\n+        return DEFAULT_VALUES.get(clazz);\n","filename":"test\/jdk\/java\/foreign\/handles\/invoker_module\/handle\/invoker\/MethodHandleInvoker.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.foreign.FunctionDescriptor;\n@@ -52,2 +53,6 @@\n-                    { MethodHandles.lookup().findStatic(Linker.class, \"nativeLinker\",\n-                            MethodType.methodType(Linker.class)), \"Linker::nativeLinker\" },\n+                    { MethodHandles.lookup().findVirtual(Linker.class, \"downcallHandle\",\n+                            MethodType.methodType(MethodHandle.class, FunctionDescriptor.class, Linker.Option[].class)), \"Linker::downcallHandle\/1\" },\n+                    { MethodHandles.lookup().findVirtual(Linker.class, \"downcallHandle\",\n+                            MethodType.methodType(MethodHandle.class, MemorySegment.class, FunctionDescriptor.class, Linker.Option[].class)), \"Linker::downcallHandle\/2\" },\n+                    { MethodHandles.lookup().findVirtual(Linker.class, \"upcallStub\",\n+                            MethodType.methodType(MemorySegment.class, MethodHandle.class, FunctionDescriptor.class, Arena.class, Linker.Option[].class)), \"Linker::upcallStub\" },\n","filename":"test\/jdk\/java\/foreign\/handles\/lookup_module\/handle\/lookup\/MethodHandleLookup.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}