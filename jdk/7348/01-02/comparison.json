{"files":[{"patch":"@@ -829,1 +829,2 @@\n-     *         zip file entry\n+     *         zip file entry or null if the zip file entry does not exist\n+     *         within the jar file\n@@ -855,1 +856,6 @@\n-\n+        \/\/ Return null InputStream when the specified entry is not found in the\n+        \/\/ Jar\n+        var je = verifiableEntry(ze);\n+        if (je == null) {\n+            return null;\n+        }\n@@ -859,1 +865,1 @@\n-                verifiableEntry(ze),\n+                je,\n@@ -871,2 +877,3 @@\n-        if(ze.getName() != null) {\n-            ze = getJarEntry(ze.getName());\n+        var entryName = ze.getName();\n+        if (entryName != null) {\n+            ze = getJarEntry(entryName);\n@@ -874,5 +881,1 @@\n-            throw new ZipException(\"Error: ZipEntry::getName returned null!\");\n-        }\n-        \/\/ ZipEntry returned from JarFile::getJarEntry should not be null\n-        if(ze == null) {\n-            throw new ZipException(\"Error: ZipEntry should not be null!\");\n+            throw new ZipException(\"ZipEntry::getName returned null\");\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarFile.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -348,1 +348,2 @@\n-     * zip file entry.\n+     * zip file entry or null if the zip file entry does not exist\n+     * within the zip file.\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -71,5 +71,3 @@\n-            = \"Error: ZipEntry::getName returned null!\";\n-    \/\/ Error message from JarFile::verifiableEntry when JarFile::getJarEntry\n-    \/\/ returns null\n-    public static final String ZIPENTRY_NULL_ERROR_MSG\n-            = \"Error: ZipEntry should not be null!\";\n+            = \"ZipEntry::getName returned null\";\n+    \/\/ Zip Entry name that does not exist within the JarFile\n+    public static final String ZIP_ENTRY_THAT_DOES_NOT_EXIST = \"org\/gotham\/Batcave.class\";\n@@ -850,2 +848,2 @@\n-            JarEntry ze = jf.getJarEntry(CEN_FILENAME_TO_MODIFY);\n-            var is = jf.getInputStream(ze);\n+            JarEntry je = jf.getJarEntry(CEN_FILENAME_TO_MODIFY);\n+            var is = jf.getInputStream(je);\n@@ -883,1 +881,1 @@\n-            \/\/ The entry will not be found and resulting in the ZipEntry being null\n+            \/\/ The entry will not be found resulting in the ZipEntry being null\n@@ -901,1 +899,1 @@\n-            \/\/ The entry will not be found and resulting in the ZipEntry being null\n+            \/\/ The entry will not be found resulting in the ZipEntry being null\n@@ -919,1 +917,1 @@\n-            \/\/ The entry will not be found and resulting in the ZipEntry being null\n+            \/\/ The entry will not be found resulting in the ZipEntry being null\n@@ -938,1 +936,1 @@\n-            \/\/ The entry will not be found and resulting in the ZipEntry being null\n+            \/\/ The entry will not be found resulting in the ZipEntry being null\n@@ -957,1 +955,1 @@\n-            \/\/ The entry will not be found and resulting in the ZipEntry being null\n+            \/\/ The entry will not be found resulting in the ZipEntry being null\n@@ -968,1 +966,2 @@\n-     * if the ZipEntry returned from JarFile::getJarEntry is null.\n+     * if the ZipEntry passed as a parameter returns null when ZipEntry::getName\n+     * is invoked.\n@@ -972,1 +971,1 @@\n-    public static void verifiableEntryZipEntryNullTest() throws Exception {\n+    public static void verifiableEntryZipEntryGetNameNullTest() throws Exception {\n@@ -974,1 +973,1 @@\n-            var ze = new InvalidZipEntry(\"javax\/inject\/Singleton.class\");\n+            var ze = new InvalidZipEntry(CEN_FILENAME_TO_MODIFY);\n@@ -978,1 +977,1 @@\n-            \/\/ JarFile::verifiableEntry when JarFile::getJarEntry returns null\n+            \/\/ JarFile::verifiableEntry when ZipEntry::getName returns null\n@@ -980,1 +979,1 @@\n-                    ex.getMessage().equals(ZIPENTRY_NULL_ERROR_MSG));\n+                    ex.getMessage().equals(ZIPENTRY_GETNAME_NULL_ERROR_MSG));\n@@ -985,2 +984,2 @@\n-     * Validate that JarFile::verifiableEntry will throw the correct ZipException\n-     * if the ZipEntry passed to it returns null when ZipEntry::getName is invoked.\n+     * Validate that JarFile::getInputStream will return null when the specified\n+     * Zip File entry does not exist in the Jar file\n@@ -990,1 +989,15 @@\n-    public static void verifiableEntryZipEntryGetNameNullTest() throws Exception {\n+    public static void JarFileZipEntryNullGetInputStreamTest() throws Exception {\n+        \/\/ Unsigned Jar\n+        try (JarFile jf = new JarFile(VALID_ENTRY_NAME_JAR.toFile())) {\n+            var ze = new ZipEntry(ZIP_ENTRY_THAT_DOES_NOT_EXIST);\n+            var is = jf.getInputStream(ze);\n+            \/\/ As the ZipEntry cannot be found, the returned InputStream is null\n+            assertNull(is);\n+        }\n+        \/\/ Signed Jar is used for the next checks\n+        try (JarFile jf = new JarFile(SIGNED_INVALID_ENTRY_NAME_JAR.toFile(), false)) {\n+            var ze = new ZipEntry(ZIP_ENTRY_THAT_DOES_NOT_EXIST);\n+            var is = jf.getInputStream(ze);\n+            \/\/ As the ZipEntry cannot be found, the returned InputStream is null\n+            assertNull(is);\n+        }\n@@ -992,7 +1005,25 @@\n-            var ze = new InvalidZipEntry2(\"jjavax\/inject\/Singleton.class\");\n-            var ex= expectThrows(ZipException.class,\n-                    () -> jf.getInputStream(ze) );\n-            \/\/ Validate that we receive the expected message from\n-            \/\/ JarFile::verifiableEntry when ZipEntry::getName returns null\n-            assertTrue( ex != null &&\n-                    ex.getMessage().equals(ZIPENTRY_GETNAME_NULL_ERROR_MSG));\n+            var ze = new ZipEntry(ZIP_ENTRY_THAT_DOES_NOT_EXIST);\n+            var is = jf.getInputStream(ze);\n+            \/\/ As the ZipEntry cannot be found, the returned InputStream is null\n+            assertNull(is);\n+        }\n+        try (JarFile jf = new JarFile(SIGNED_VALID_ENTRY_NAME_JAR.toFile())) {\n+            var ze = new ZipEntry(ZIP_ENTRY_THAT_DOES_NOT_EXIST);\n+            var is = jf.getInputStream(ze);\n+            \/\/ As the ZipEntry cannot be found, the returned InputStream is null\n+            assertNull(is);\n+        }\n+    }\n+\n+    \/**\n+     * Validate that ZipFile::getInputStream will return null when the specified\n+     * Zip File entry does not exist in the Jar file\n+     * @throws Exception if an error occurs\n+     *\/\n+    @Test\n+    public static void ZipFileZipEntryNullGetInputStreamTest() throws Exception {\n+        try (ZipFile zf = new ZipFile(VALID_ENTRY_NAME_JAR.toFile())) {\n+            var ze = new ZipEntry(ZIP_ENTRY_THAT_DOES_NOT_EXIST);\n+            var is = zf.getInputStream(ze);\n+            \/\/ As the ZipEntry cannot be found, the returned InpuStream is null\n+            assertNull(is);\n@@ -1031,13 +1062,0 @@\n-    \/**\n-     * Overridden ZipEntry class which will always return an invalid name\n-     * for the Zip entry\n-     *\/\n-    public static class InvalidZipEntry extends ZipEntry {\n-        public InvalidZipEntry(String name) {\n-            super(name);\n-        }\n-        public String getName() {\n-            return \"NameDoesNotExist\";\n-        }\n-    }\n-\n@@ -1048,2 +1066,2 @@\n-    public static class InvalidZipEntry2 extends ZipEntry {\n-        public InvalidZipEntry2(String name) {\n+    public static class InvalidZipEntry extends ZipEntry {\n+        public InvalidZipEntry(String name) {\n@@ -1056,1 +1074,0 @@\n-\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/GetInputStreamNPETest.java","additions":60,"deletions":43,"binary":false,"changes":103,"status":"modified"}]}