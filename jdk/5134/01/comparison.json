{"files":[{"patch":"@@ -51,1 +51,1 @@\n-        DockerTestUtils.buildJdkDockerImage(imageNameAndTag, \"Dockerfile-BasicTest\", \"jdk-docker\");\n+        DockerTestUtils.buildJdkContainerImage(imageNameAndTag);\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/DockerBasicTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        DockerTestUtils.buildJdkDockerImage(imageName, \"Dockerfile-BasicTest\", \"jdk-docker\");\n+        DockerTestUtils.buildJdkContainerImage(imageName);\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestCPUAwareness.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        DockerTestUtils.buildJdkDockerImage(imageName, \"Dockerfile-BasicTest\", \"jdk-docker\");\n+        DockerTestUtils.buildJdkContainerImage(imageName);\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestCPUSets.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-        DockerTestUtils.buildJdkDockerImage(imageName, \"Dockerfile-BasicTest\", \"jdk-docker\");\n+        DockerTestUtils.buildJdkContainerImage(imageName);\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestJFREvents.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        DockerTestUtils.buildJdkDockerImage(imageName, \"Dockerfile-BasicTest\", \"jdk-docker\");\n+        DockerTestUtils.buildJdkContainerImage(imageName);\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestJFRNetworkEvents.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-        DockerTestUtils.buildJdkDockerImage(imageName, \"Dockerfile-BasicTest\", \"jdk-docker\");\n+        DockerTestUtils.buildJdkContainerImage(imageName);\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestJFRWithJMX.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        DockerTestUtils.buildJdkDockerImage(IMAGE_NAME, \"Dockerfile-BasicTest\", \"jdk-docker\");\n+        DockerTestUtils.buildJdkContainerImage(IMAGE_NAME);\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestJcmdWithSideCar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        DockerTestUtils.buildJdkDockerImage(imageName, \"Dockerfile-BasicTest\", \"jdk-docker\");\n+        DockerTestUtils.buildJdkContainerImage(imageName);\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        DockerTestUtils.buildJdkDockerImage(imageName, \"Dockerfile-BasicTest\", \"jdk-docker\");\n+        DockerTestUtils.buildJdkContainerImage(imageName);\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMisc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        DockerTestUtils.buildJdkDockerImage(imageName, \"Dockerfile-BasicTest\", \"jdk-docker\");\n+        DockerTestUtils.buildJdkContainerImage(imageName);\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestPids.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-        DockerTestUtils.buildJdkDockerImage(imageName, \"Dockerfile-BasicTest\", \"jdk-docker\");\n+        DockerTestUtils.buildJdkContainerImage(imageName);\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestDockerCpuMetrics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        DockerTestUtils.buildJdkDockerImage(imageName, \"Dockerfile-BasicTest\", \"jdk-docker\");\n+        DockerTestUtils.buildJdkContainerImage(imageName);\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestDockerMemoryMetrics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-        DockerTestUtils.buildJdkDockerImage(imageName, \"Dockerfile-BasicTest\", \"jdk-docker\");\n+        DockerTestUtils.buildJdkContainerImage(imageName);\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestGetFreeSwapSpaceSize.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        DockerTestUtils.buildJdkDockerImage(imageName, \"Dockerfile-BasicTest\", \"jdk-docker\");\n+        DockerTestUtils.buildJdkContainerImage(imageName);\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestPidsLimit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-        DockerTestUtils.buildJdkDockerImage(imageName, \"Dockerfile-BasicTest\", \"jdk-docker\");\n+        DockerTestUtils.buildJdkContainerImage(imageName);\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestSystemMetrics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-        DockerTestUtils.buildJdkDockerImage(imageName, \"Dockerfile-BasicTest\", \"jdk-docker\");\n+        DockerTestUtils.buildJdkContainerImage(imageName);\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestUseContainerSupport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,0 +123,10 @@\n+     \/**\n+     * Build a container image that contains JDK under test.\n+     * The jdk will be placed under the \"\/jdk\/\" folder inside the image\/container file system.\n+     *\n+     * @param imageName name of the image to be created, including version tag\n+     * @throws Exception\n+     *\/\n+    public static void buildJdkContainerImage(String imageName) throws Exception {\n+        buildJdkContainerImage(imageName, null);\n+    }\n@@ -124,3 +134,3 @@\n-    \/**\n-     * Build a docker image that contains JDK under test.\n-     * The jdk will be placed under the \"\/jdk\/\" folder inside the docker file system.\n+     \/**\n+     * Build a container image that contains JDK under test.\n+     * The jdk will be placed under the \"\/jdk\/\" folder inside the image\/container file system.\n@@ -128,6 +138,2 @@\n-     * @param imageName     name of the image to be created, including version tag\n-     * @param dockerfile    name of the dockerfile residing in the test source;\n-     *                      we check for a platform specific dockerfile as well\n-     *                      and use this one in case it exists\n-     * @param buildDirName  name of the docker build\/staging directory, which will\n-     *                      be created in the jtreg's scratch folder\n+     * @param imageName         name of the image to be created, including version tag\n+     * @param dockerfileContent content of the Dockerfile; use null to generate default content\n@@ -136,3 +142,3 @@\n-    public static void\n-        buildJdkDockerImage(String imageName, String dockerfile, String buildDirName)\n-            throws Exception {\n+    public static void buildJdkContainerImage(String imageName, String dockerfileContent) throws Exception {\n+        \/\/ image name may contain tag, hence replace ':'\n+        String imageDirName = imageName.replace(\":\", \"-\");\n@@ -140,1 +146,2 @@\n-        Path buildDir = Paths.get(\".\", buildDirName);\n+        \/\/ Create an image build\/staging directory\n+        Path buildDir = Paths.get(imageDirName);\n@@ -144,0 +151,1 @@\n+        Files.createDirectories(buildDir);\n@@ -145,4 +153,8 @@\n-        Path jdkSrcDir = Paths.get(JDK_UNDER_TEST);\n-        Path jdkDstDir = buildDir.resolve(\"jdk\");\n-\n-        Files.createDirectories(jdkDstDir);\n+        \/\/ Generate Dockerfile\n+        if (dockerfileContent != null) {\n+            Files.writeString(buildDir.resolve(\"Dockerfile\"), dockerfileContent);\n+        } else {\n+            generateDockerFile(buildDir.resolve(\"Dockerfile\"),\n+                           DockerfileConfig.getBaseImageName(),\n+                           DockerfileConfig.getBaseImageVersion());\n+        }\n@@ -152,0 +164,3 @@\n+        Path jdkSrcDir = Paths.get(JDK_UNDER_TEST);\n+        Path jdkDstDir = buildDir.resolve(\"jdk\");\n+        Files.createDirectories(jdkDstDir);\n@@ -153,1 +168,2 @@\n-        buildDockerImage(imageName, Paths.get(Utils.TEST_SRC, dockerfile), buildDir);\n+\n+        buildImage(imageName, buildDir);\n@@ -158,1 +174,1 @@\n-     * Build a docker image based on given docker file and docker build directory.\n+     * Build a container image based on given Dockerfile and image build directory.\n@@ -161,5 +177,2 @@\n-     * @param dockerfile  path to the Dockerfile to be used for building the docker\n-     *        image. The specified dockerfile will be copied to the docker build\n-     *        directory as 'Dockerfile'\n-     * @param buildDir  build directory; it should already contain all the content\n-     *        needed to build the docker image.\n+     * @param buildDir   build directory; it should already contain all the content\n+     *                   needed to build the image.\n@@ -168,6 +181,1 @@\n-    public static void\n-        buildDockerImage(String imageName, Path dockerfile, Path buildDir) throws Exception {\n-\n-        generateDockerFile(buildDir.resolve(\"Dockerfile\"),\n-                           DockerfileConfig.getBaseImageName(),\n-                           DockerfileConfig.getBaseImageVersion());\n+    private static void buildImage(String imageName, Path buildDir) throws Exception {\n@@ -175,1 +183,0 @@\n-            \/\/ Build the docker\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/docker\/DockerTestUtils.java","additions":39,"deletions":32,"binary":false,"changes":71,"status":"modified"}]}