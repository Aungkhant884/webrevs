{"files":[{"patch":"@@ -2113,0 +2113,7 @@\n+     * <p> If the {@code directory} argument is not {@code null} and its\n+     * abstract pathname is valid and denotes an existing, writable directory,\n+     * then the file will be created in that directory. Otherwise the file will\n+     * not be created and an {@code IOException} will be thrown.  Under no\n+     * circumstances will a directory be created at the location specified by\n+     * the {@code directory} argument.\n+     *\n@@ -2130,1 +2137,2 @@\n-     * @throws  IOException  If a file could not be created\n+     * @throws  IOException\n+     *          If a file could not be created\n@@ -2152,0 +2160,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/File.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4847239\n+ * @summary Verify directory parameter behavior in File.createTempFile(String,String,File)\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.AclEntry;\n+import java.nio.file.attribute.AclEntryPermission;\n+import java.nio.file.attribute.AclFileAttributeView;\n+import java.nio.file.attribute.PosixFileAttributeView;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class TargetDirectory {\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Target directory exists and is writable\n+        Path dir = Path.of(\"target\");\n+        File target = Files.createDirectory(dir).toFile();\n+        File tmp = File.createTempFile(\"passes\", null, target);\n+        if (!Files.exists(tmp.toPath())) {\n+            throw new RuntimeException(\"Temp file not created\");\n+        }\n+        tmp.delete();\n+\n+        \/\/ Make target directory read-only\n+        if (Files.getFileStore(dir).supportsFileAttributeView(\"posix\")) {\n+            PosixFileAttributeView view =\n+                (PosixFileAttributeView)Files.getFileAttributeView(dir,\n+                    PosixFileAttributeView.class);\n+            Set<PosixFilePermission> perms = new HashSet<>();\n+            perms.add(PosixFilePermission.valueOf(\"OWNER_READ\"));\n+            view.setPermissions(perms);\n+        } else if (Files.getFileStore(dir).supportsFileAttributeView(\"acl\")) {\n+            AclFileAttributeView view = Files.getFileAttributeView(dir,\n+                AclFileAttributeView.class);\n+            List<AclEntry> entries = new ArrayList<>();\n+            for (AclEntry entry : view.getAcl()) {\n+                Set<AclEntryPermission> perms =\n+                    new HashSet<>(entry.permissions());\n+                perms.remove(AclEntryPermission.ADD_FILE);\n+                entries.add(AclEntry.newBuilder().setType(entry.type())\n+                    .setPrincipal(entry.principal()).setPermissions(perms)\n+                    .build());\n+            }\n+            view.setAcl(entries);\n+        } else {\n+            throw new RuntimeException(\"Required attribute view not supported\");\n+        }\n+\n+        \/\/ Target directory exists but is read-only\n+        try {\n+            File.createTempFile(\"readonly\", null, target);\n+            throw new RuntimeException(\"Exception not thrown\");\n+        } catch (IOException expected) {\n+        } finally {\n+            target.delete();\n+        }\n+\n+        \/\/ Target directory does not exist\n+        try {\n+            File.createTempFile(\"nonexistent\", null, new File(\"void\"));\n+            throw new RuntimeException(\"Exception not thrown\");\n+        } catch (IOException expected) {\n+        }\n+\n+        \/\/ Target is a file, not a directory\n+        target = Files.createFile(Path.of(\"file\")).toFile();\n+        try {\n+            File.createTempFile(\"file\", null, target);\n+            throw new RuntimeException(\"Exception not thrown\");\n+        } catch (IOException expected) {\n+        } finally {\n+            target.delete();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/File\/createTempFile\/TargetDirectory.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"}]}