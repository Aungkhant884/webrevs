{"files":[{"patch":"@@ -442,1 +442,3 @@\n-            JCBlock speculativeTree = (JCBlock)attribSpeculative(lambdaBlock, localEnv, resultInfo, argumentAttr.withLocalCacheContext());\n+            JCBlock speculativeTree = hasTypeDeclaration(that) ?\n+                    (JCBlock)attribSpeculative(lambdaBlock, localEnv, resultInfo, argumentAttr.withLocalCacheContext()) :\n+                    (JCBlock)attribSpeculative(lambdaBlock, localEnv, resultInfo);\n@@ -460,0 +462,36 @@\n+    boolean hasTypeDeclaration(JCLambda lambda) {\n+        TypeDeclVisitor typeDeclVisitor = new TypeDeclVisitor();\n+        if (lambda.getBodyKind() == JCLambda.BodyKind.EXPRESSION) {\n+            lambda.getBody().accept(typeDeclVisitor);\n+            return typeDeclVisitor.result;\n+        } else {\n+            JCBlock body = (JCBlock)lambda.body;\n+            for (JCTree stat : body.stats) {\n+                stat.accept(typeDeclVisitor);\n+                if (typeDeclVisitor.result) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+    }\n+\n+    static class TypeDeclVisitor extends JCTree.Visitor {\n+        boolean result = false;\n+\n+        @Override\n+        public void visitTree(JCTree that) {\n+            \/\/ ignore\n+        }\n+\n+        @Override\n+        public void visitParens(JCParens tree) {\n+            tree.expr.accept(this);\n+        }\n+\n+        @Override\n+        public void visitClassDef(JCClassDecl that) {\n+            result = true;\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/DeferredAttr.java","additions":39,"deletions":1,"binary":false,"changes":40,"status":"modified"}]}