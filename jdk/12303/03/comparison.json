{"files":[{"patch":"@@ -442,1 +442,9 @@\n-            JCBlock speculativeTree = (JCBlock)attribSpeculative(lambdaBlock, localEnv, resultInfo);\n+            \/* we should be on the safe side for lambdas that declare a local type as it could be that the cache\n+             * we use for speculative attribution gets corrupted, see JDK-8295019, so it is better to use a local cache.\n+             * This approach could potentially imply a performance hit but most lambdas in general don't declare local\n+             * types so this should impact only a fraction of the lambda expressions. Worst case scenario, the local type\n+             * can be declared outside of the lambda body.\n+             *\/\n+            JCBlock speculativeTree = hasTypeDeclaration(that) ?\n+                    (JCBlock)attribSpeculative(lambdaBlock, localEnv, resultInfo, argumentAttr.withLocalCacheContext()) :\n+                    (JCBlock)attribSpeculative(lambdaBlock, localEnv, resultInfo);\n@@ -460,0 +468,15 @@\n+    boolean hasTypeDeclaration(JCTree tree) {\n+        TypeDeclVisitor typeDeclVisitor = new TypeDeclVisitor();\n+        typeDeclVisitor.scan(tree);\n+        return typeDeclVisitor.result;\n+    }\n+\n+    static class TypeDeclVisitor extends TreeScanner {\n+        boolean result = false;\n+\n+        @Override\n+        public void visitClassDef(JCClassDecl that) {\n+            result = true;\n+        }\n+    }\n+\n@@ -468,1 +491,1 @@\n-                null, AttributionMode.SPECULATIVE, null);\n+                null, AttributionMode.SPECULATIVE, !hasTypeDeclaration(tree) ? null : argumentAttr.withLocalCacheContext());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/DeferredAttr.java","additions":25,"deletions":2,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8295019\n+ * @summary Cannot call a method with a parameter of a local class declared in a lambda\n+ * @compile TypeDeclarationInsideExpressionTest.java\n+ *\/\n+\n+class TypeDeclarationInsideExpressionTest {\n+    class LambdaTest {\n+        void run(Runnable r) {}\n+\n+        void m() {\n+            run(() -> {\n+                class C {\n+                    static void takeC(C c) {}\n+                    static C giveC() {\n+                        return null;\n+                    }\n+                }\n+                C.takeC(C.giveC());\n+\n+                record R() {\n+                    static void takeR(R r) {}\n+                    static R giveR() { return null; }\n+                }\n+                R.takeR(R.giveR());\n+\n+                interface I {\n+                    static void takeI(I i) {}\n+                    static I giveI() { return null; }\n+                }\n+                I.takeI(I.giveI());\n+\n+                enum E {\n+                    A;\n+                    static void takeE(E e) {}\n+                    static E giveE() { return null; }\n+                }\n+                E.takeE(E.giveE());\n+            });\n+        }\n+    }\n+\n+    class SwitchExprTest {\n+        void run(int i) {}\n+        void m(int o) {\n+            run(switch(o) {\n+                case 1 -> {\n+                    class C {\n+                        static int takeC(C c) { return 0; }\n+                        static C giveC() { return null; }\n+                    }\n+                    yield C.takeC(C.giveC());\n+                }\n+                case 2 -> {\n+                    record R() {\n+                        static int takeR(R r) { return 0; }\n+                        static R giveR() { return null; }\n+                    }\n+                    yield R.takeR(R.giveR());\n+                }\n+                case 3 -> {\n+                    interface I {\n+                        static int takeI(I i) { return 0; }\n+                        static I giveI() { return null; }\n+                    }\n+                    yield I.takeI(I.giveI());\n+                }\n+                case 4 -> {\n+                    enum E {\n+                        A;\n+                        static int takeE(E e) { return 0; }\n+                        static E giveE() { return null; }\n+                    }\n+                    yield E.takeE(E.giveE());\n+                }\n+                default -> throw new AssertionError();\n+            });\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/typeDeclarationInsideExpression\/TypeDeclarationInsideExpressionTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"}]}