{"files":[{"patch":"@@ -442,1 +442,3 @@\n-            JCBlock speculativeTree = (JCBlock)attribSpeculative(lambdaBlock, localEnv, resultInfo);\n+            JCBlock speculativeTree = hasTypeDeclaration(that) ?\n+                    (JCBlock)attribSpeculative(lambdaBlock, localEnv, resultInfo, argumentAttr.withLocalCacheContext()) :\n+                    (JCBlock)attribSpeculative(lambdaBlock, localEnv, resultInfo);\n@@ -460,0 +462,36 @@\n+    boolean hasTypeDeclaration(JCLambda lambda) {\n+        TypeDeclVisitor typeDeclVisitor = new TypeDeclVisitor();\n+        if (lambda.getBodyKind() == JCLambda.BodyKind.EXPRESSION) {\n+            lambda.getBody().accept(typeDeclVisitor);\n+            return typeDeclVisitor.result;\n+        } else {\n+            JCBlock body = (JCBlock)lambda.body;\n+            for (JCTree stat : body.stats) {\n+                stat.accept(typeDeclVisitor);\n+                if (typeDeclVisitor.result) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+    }\n+\n+    static class TypeDeclVisitor extends JCTree.Visitor {\n+        boolean result = false;\n+\n+        @Override\n+        public void visitTree(JCTree that) {\n+            \/\/ ignore\n+        }\n+\n+        @Override\n+        public void visitParens(JCParens tree) {\n+            tree.expr.accept(this);\n+        }\n+\n+        @Override\n+        public void visitClassDef(JCClassDecl that) {\n+            result = true;\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/DeferredAttr.java","additions":39,"deletions":1,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8295019\n+ * @summary Cannot call a method with a parameter of a local class declared in a lambda\n+ * @compile TypeDeclarationInsideLambdaTest.java\n+ *\/\n+\n+class TypeDeclarationInsideLambdaTest {\n+    void run(Runnable r) {}\n+\n+    void m() {\n+        run(() -> {\n+            class C {\n+                static void takeC(C c) {}\n+                static C giveC() {\n+                    return null;\n+                }\n+            }\n+            C.takeC(C.giveC());\n+\n+            record R() {\n+                static void takeR(R r) {}\n+                static R giveR() { return null; }\n+            }\n+            R.takeR(R.giveR());\n+\n+            interface I {\n+                static void takeI(I i) {}\n+                static I giveI() { return null; }\n+            }\n+            I.takeI(I.giveI());\n+\n+            enum E {\n+                A;\n+                static void takeE(E e) {}\n+                static E giveE() { return null; }\n+            }\n+            E.takeE(E.giveE());\n+        });\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/TypeDeclarationInsideLambdaTest.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}