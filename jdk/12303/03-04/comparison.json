{"files":[{"patch":"@@ -442,9 +442,1 @@\n-            \/* we should be on the safe side for lambdas that declare a local type as it could be that the cache\n-             * we use for speculative attribution gets corrupted, see JDK-8295019, so it is better to use a local cache.\n-             * This approach could potentially imply a performance hit but most lambdas in general don't declare local\n-             * types so this should impact only a fraction of the lambda expressions. Worst case scenario, the local type\n-             * can be declared outside of the lambda body.\n-             *\/\n-            JCBlock speculativeTree = hasTypeDeclaration(that) ?\n-                    (JCBlock)attribSpeculative(lambdaBlock, localEnv, resultInfo, argumentAttr.withLocalCacheContext()) :\n-                    (JCBlock)attribSpeculative(lambdaBlock, localEnv, resultInfo);\n+            JCBlock speculativeTree = (JCBlock)attribSpeculative(lambdaBlock, localEnv, resultInfo);\n@@ -468,15 +460,0 @@\n-    boolean hasTypeDeclaration(JCTree tree) {\n-        TypeDeclVisitor typeDeclVisitor = new TypeDeclVisitor();\n-        typeDeclVisitor.scan(tree);\n-        return typeDeclVisitor.result;\n-    }\n-\n-    static class TypeDeclVisitor extends TreeScanner {\n-        boolean result = false;\n-\n-        @Override\n-        public void visitClassDef(JCClassDecl that) {\n-            result = true;\n-        }\n-    }\n-\n@@ -490,0 +467,3 @@\n+        \/* When performing speculative attribution on an argument expression, we should make sure that argument type\n+         * cache does not get polluted with local types, as that leads to spurious type errors (see JDK-8295019)\n+         *\/\n@@ -494,0 +474,16 @@\n+    \/\/ where\n+        private boolean hasTypeDeclaration(JCTree tree) {\n+            TypeDeclVisitor typeDeclVisitor = new TypeDeclVisitor();\n+            typeDeclVisitor.scan(tree);\n+            return typeDeclVisitor.result;\n+        }\n+\n+        private static class TypeDeclVisitor extends TreeScanner {\n+            boolean result = false;\n+\n+            @Override\n+            public void visitClassDef(JCClassDecl that) {\n+                result = true;\n+            }\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/DeferredAttr.java","additions":20,"deletions":24,"binary":false,"changes":44,"status":"modified"}]}