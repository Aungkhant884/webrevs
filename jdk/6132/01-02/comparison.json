{"files":[{"patch":"@@ -27,0 +27,1 @@\n+#include \"logging\/logAsyncWriter.hpp\"\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -86,3 +86,3 @@\n-  int write(const LogDecorations& decorations, const char* msg) override;\n-  int write(LogMessageBuffer::Iterator msg_iterator) override;\n-  int write_blocking(const LogDecorations& decorations, const char* msg) override;\n+  virtual int write(const LogDecorations& decorations, const char* msg);\n+  virtual int write(LogMessageBuffer::Iterator msg_iterator);\n+  virtual int write_blocking(const LogDecorations& decorations, const char* msg);\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"logging\/logAsyncWriter.hpp\"\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"logging\/logAsyncWriter.hpp\"\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-            \/\/ the reason we throw a RuntimeException because the normal exit of JVM still needs\n+            \/\/ The reason we throw a RuntimeException because the normal exit of JVM still needs\n@@ -144,1 +144,1 @@\n-        \/\/ not portable. Therefore, the test uses pipe to simulate suspending stdout.\n+        \/\/ not portable. Therefore, the test uses pipe to simulate the suspending stdout.\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/BlockedLoggingTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}