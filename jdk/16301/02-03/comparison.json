{"files":[{"patch":"@@ -31,1 +31,1 @@\n-void MemMapPrinter::pd_iterate_all_mappings(MappingPrintClosure& closure) {}\n+bool MemMapPrinter::pd_iterate_all_mappings(MappingPrintClosure& closure) { return true; }\n","filename":"src\/hotspot\/os\/aix\/memMapPrinter_aix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-void MemMapPrinter::pd_iterate_all_mappings(MappingPrintClosure& closure) {}\n+bool MemMapPrinter::pd_iterate_all_mappings(MappingPrintClosure& closure) { return true; }\n","filename":"src\/hotspot\/os\/bsd\/memMapPrinter_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include <limits.h>\n@@ -32,3 +33,3 @@\n-struct proc_maps_info_t {\n-  unsigned long long from = 0;\n-  unsigned long long to = 0;\n+struct ProcMapsInfo {\n+  void* from = 0;\n+  void* to = 0;\n@@ -43,1 +44,1 @@\n-    const int items_read = ::sscanf(line, \"%llx-%llx %20s %20s %20s %20s %1024s\",\n+    const int items_read = ::sscanf(line, \"%p-%p %20s %20s %20s %20s %1024s\",\n@@ -45,3 +46,0 @@\n-    if (items_read < 2) {\n-      return false;\n-    }\n@@ -53,1 +51,1 @@\n-  const proc_maps_info_t _info;\n+  const ProcMapsInfo _info;\n@@ -56,1 +54,1 @@\n-  LinuxMappingPrintInformation(const void* from, const void* to, const proc_maps_info_t* info) :\n+  LinuxMappingPrintInformation(const void* from, const void* to, const ProcMapsInfo* info) :\n@@ -59,1 +57,1 @@\n-  void print_details_1(outputStream* st) const override {\n+  void print_OS_specific_details_heading(outputStream* st) const override {\n@@ -62,1 +60,1 @@\n-  void print_details_2(outputStream* st) const override {\n+  void print_OS_specific_details_trailing(outputStream* st) const override {\n@@ -70,0 +68,1 @@\n+  \/\/   0x0000000000000000 - 0x0000000000000000\n@@ -72,0 +71,1 @@\n+  \/\/   0x00000000 - 0x00000000\n@@ -78,1 +78,1 @@\n-void MemMapPrinter::pd_iterate_all_mappings(MappingPrintClosure& closure) {\n+bool MemMapPrinter::pd_iterate_all_mappings(MappingPrintClosure& closure) {\n@@ -80,0 +80,1 @@\n+  bool ok = true;\n@@ -81,2 +82,3 @@\n-    char line[1024];\n-    while(fgets(line, sizeof(line), f) == line) {\n+    static constexpr size_t linesize = sizeof(ProcMapsInfo);\n+    char line[linesize];\n+    while(ok && fgets(line, sizeof(line), f) == line) {\n@@ -84,1 +86,1 @@\n-      proc_maps_info_t info;\n+      ProcMapsInfo info;\n@@ -86,2 +88,2 @@\n-        LinuxMappingPrintInformation mapinfo((void*)info.from, (void*)info.to, &info);\n-        closure.do_it(&mapinfo);\n+        LinuxMappingPrintInformation mapinfo(info.from, info.to, &info);\n+        ok = closure.do_it(&mapinfo);\n@@ -92,0 +94,1 @@\n+  return ok;\n","filename":"src\/hotspot\/os\/linux\/memMapPrinter_linux.cpp","additions":20,"deletions":17,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-void MemMapPrinter::pd_iterate_all_mappings(MappingPrintClosure& closure) {}\n+bool MemMapPrinter::pd_iterate_all_mappings(MappingPrintClosure& closure) { return false; }\n","filename":"src\/hotspot\/os\/windows\/memMapPrinter_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -245,0 +245,1 @@\n+\n@@ -254,2 +255,2 @@\n-MappingPrintClosure::MappingPrintClosure(outputStream* st, bool human_readable) :\n-    _out(st), _humam_readable(human_readable), _total_count(0), _total_vsize(0) {}\n+MappingPrintClosure::MappingPrintClosure(outputStream* st, bool human_readable, jlong timeout_at) :\n+    _out(st), _human_readable(human_readable), _timeout_at(timeout_at), _total_count(0), _total_vsize(0) {}\n@@ -257,1 +258,1 @@\n-void MappingPrintClosure::do_it(const MappingPrintInformation* info) {\n+bool MappingPrintClosure::do_it(const MappingPrintInformation* info) {\n@@ -262,1 +263,1 @@\n-  if (_humam_readable) {\n+  if (_human_readable) {\n@@ -269,1 +270,1 @@\n-  info->print_details_1(_out);\n+  info->print_OS_specific_details_heading(_out);\n@@ -273,1 +274,1 @@\n-  info->print_details_2(_out);\n+  info->print_OS_specific_details_trailing(_out);\n@@ -275,0 +276,2 @@\n+\n+  return _timeout_at > os::javaTimeNanos(); \/\/ false if timeout\n@@ -288,4 +291,12 @@\n-  MappingPrintClosure closure(st, human_readable);\n-  pd_iterate_all_mappings(closure);\n-  st->print_cr(\"Total: \" UINTX_FORMAT \" mappings with a total vsize of %zu (\" PROPERFMT \")\",\n-            closure.total_count(), closure.total_vsize(), PROPERFMTARGS(closure.total_vsize()));\n+  \/\/ Under rare circumstances the process memory map may be insanely large and\/or fragmented. We cap\n+  \/\/ the absolute runtime of printing to blocking other VM operations too long.\n+  const jlong timeout_at = os::javaTimeNanos() +\n+                           ((jlong)(SafepointTimeoutDelay * NANOSECS_PER_MILLISEC) \/ 2);\n+  MappingPrintClosure closure(st, human_readable, timeout_at);\n+  bool ok = pd_iterate_all_mappings(closure);\n+  if (!ok) {\n+    st->print_cr(\"Aborted after printing \" UINTX_FORMAT \" mappings, took too long.\", closure.total_count());\n+  } else {\n+    st->print_cr(\"Total: \" UINTX_FORMAT \" mappings with a total vsize of %zu (\" PROPERFMT \")\",\n+                 closure.total_count(), closure.total_vsize(), PROPERFMTARGS(closure.total_vsize()));\n+  }\n","filename":"src\/hotspot\/share\/services\/memMapPrinter.cpp","additions":21,"deletions":10,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -42,2 +42,7 @@\n-  virtual void print_details_1(outputStream* st) const {} \/\/ To be printed before VM annotations\n-  virtual void print_details_2(outputStream* st) const {} \/\/ To be printed before VM annotations\n+  \/\/ Will be called for each mapping before VM annotations are printed.\n+  \/\/ Platforms should print any details that should appear between the mapping addresses\n+  \/\/  and the VM annotations.\n+  virtual void print_OS_specific_details_heading(outputStream* st) const {}\n+  \/\/ Will be called for each mapping before VM annotations are printed.\n+  \/\/ Platforms should print any details that should appear at the end of the line.\n+  virtual void print_OS_specific_details_trailing(outputStream* st) const {}\n@@ -48,1 +53,2 @@\n-  const bool _humam_readable;\n+  const bool _human_readable;\n+  const int64_t _timeout_at;\n@@ -52,2 +58,2 @@\n-  MappingPrintClosure(outputStream* st, bool human_readable);\n-  void do_it(const MappingPrintInformation* info);\n+  MappingPrintClosure(outputStream* st, bool human_readable, jlong timeout_ms);\n+  bool do_it(const MappingPrintInformation* info); \/\/ returns false if timeout reached.\n@@ -60,1 +66,1 @@\n-  static void pd_iterate_all_mappings(MappingPrintClosure& closure);\n+  static bool pd_iterate_all_mappings(MappingPrintClosure& closure);\n","filename":"src\/hotspot\/share\/services\/memMapPrinter.hpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -45,4 +45,1 @@\n-        boolean have_nmt = true;\n-        if (output.getOutput().contains(\"please enable Native Memory Tracking\")) {\n-            have_nmt = false;\n-        }\n+        boolean have_nmt = !output.getOutput().contains(\"please enable Native Memory Tracking\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/vm\/SystemMapTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"}]}