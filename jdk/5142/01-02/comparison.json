{"files":[{"patch":"@@ -665,3 +665,6 @@\n-  if (offset && phase->is_dominator(predicate_proj, phase->get_ctrl(offset))) {\n-    \/\/ offset must be able to float before predicte projection node\n-    return false;\n+  if (offset && phase->has_ctrl(offset)) {\n+    Node* offset_ctrl = phase->get_ctrl(offset);\n+    if (phase->get_loop(predicate_proj) == phase->get_loop(offset_ctrl) &&\n+        phase->is_dominator(predicate_proj, offset_ctrl)) {\n+      return false;\n+    }\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8272574\n+ * @summary Crashes in PhaseIdealLoop::build_loop_late_post_work\n+ * @requires vm.compiler2.enabled\n+ *\n+ * @run main TestLoopPredicateDep\n+ *\n+ *\/\n+\n+public class TestLoopPredicateDep {\n+    public static void getPermutations(byte[] inputArray, byte[][] outputArray) {\n+        int[] indexes = new int[]{0, 2};\n+\n+        for (int a = 0; a < (int)(a + 16); a++) {\n+            int oneIdx = indexes[0]++;\n+            for (int b = a + 1; b < inputArray.length; b++) {\n+                int twoIdx = indexes[1]++;\n+                outputArray[twoIdx][0] = inputArray[a];\n+                outputArray[twoIdx][1] = inputArray[b];\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        final byte[] inputArray = new byte[]{0, 1};\n+        final byte[][] outputArray = new byte[3][2];\n+\n+        for (int i = 0; i < 10; ++i) {\n+            Thread t = new Thread(new Runnable() {\n+                public void run() {\n+                    for (int i = 0; i < 1000000; i++) {\n+                        getPermutations(inputArray, outputArray);\n+                    }\n+                }\n+            });\n+            t.setDaemon(true);\n+            t.start();\n+            try {\n+                Thread.sleep(100);\n+            } catch (Exception e) {\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestLoopPredicateDep.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n@@ -49,13 +49,0 @@\n-    public static void getPermutations1(byte[] inputArray, byte[][] outputArray) {\n-        int[] indexes = new int[]{0, 2};\n-\n-        for (int a = 0; a < (int)(a + 16); a++) {\n-            int oneIdx = indexes[0]++;\n-            for (int b = a + 1; b < inputArray.length; b++) {\n-                int twoIdx = indexes[1]++;\n-                outputArray[twoIdx][0] = inputArray[a];\n-                outputArray[twoIdx][1] = inputArray[b];\n-            }\n-        }\n-    }\n-\n@@ -70,17 +57,0 @@\n-\n-        for (int i = 0; i < 100; ++i) {\n-            Thread t = new Thread(new Runnable() {\n-                public void run() {\n-                    for (int i = 0; i < 1000000; i++) {\n-                        getPermutations1(inputArray, outputArray);\n-                    }\n-                }\n-            });\n-            t.start();\n-            try {\n-                Thread.sleep(100);\n-                t.stop();\n-                t.join();\n-            } catch (Exception e) {\n-            }\n-        }\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/LoadSplitThruPhi.java","additions":1,"deletions":31,"binary":false,"changes":32,"status":"modified"}]}