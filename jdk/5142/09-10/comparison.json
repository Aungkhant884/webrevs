{"files":[{"patch":"@@ -624,1 +624,1 @@\n-bool IdealLoopTree::is_range_check_if(IfNode *iff, PhaseIdealLoop *phase, Invariance& invar, ProjNode *predicate_proj) const {\n+bool IdealLoopTree::is_range_check_if(IfNode *iff, PhaseIdealLoop *phase, Invariance& invar DEBUG_ONLY(COMMA ProjNode *predicate_proj)) const {\n@@ -665,1 +665,1 @@\n-#ifndef PRODUCT\n+#ifdef ASSERT\n@@ -675,1 +675,2 @@\n-      assert(false, \"cyclic dependency prevents range check elimination\");\n+      assert(false, \"cyclic dependency prevents range check elimination, idx: offset %d, offset_ctrl %d, predicate_proj %d\",\n+             offset->_idx, offset_ctrl->_idx, predicate_proj->_idx);\n@@ -1158,1 +1159,1 @@\n-  } else if (cl != NULL && loop->is_range_check_if(iff, this, invar, predicate_proj)) {\n+  } else if (cl != NULL && loop->is_range_check_if(iff, this, invar DEBUG_ONLY(COMMA predicate_proj))) {\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -740,1 +740,1 @@\n-  bool is_range_check_if(IfNode *iff, PhaseIdealLoop *phase, Invariance& invar, ProjNode *predicate_proj) const;\n+  bool is_range_check_if(IfNode *iff, PhaseIdealLoop *phase, Invariance& invar DEBUG_ONLY(COMMA ProjNode *predicate_proj)) const;\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}