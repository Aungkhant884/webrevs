{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -624,1 +624,1 @@\n-bool IdealLoopTree::is_range_check_if(IfNode *iff, PhaseIdealLoop *phase, Invariance& invar) const {\n+bool IdealLoopTree::is_range_check_if(IfNode *iff, PhaseIdealLoop *phase, Invariance& invar, ProjNode *predicate_proj) const {\n@@ -665,0 +665,4 @@\n+  if (offset && phase->is_dominator(predicate_proj, phase->get_ctrl(offset))) {\n+    \/\/ offset must be able to float before predicte projection node\n+    return false;\n+  }\n@@ -1144,1 +1148,1 @@\n-  } else if (cl != NULL && loop->is_range_check_if(iff, this, invar)) {\n+  } else if (cl != NULL && loop->is_range_check_if(iff, this, invar, predicate_proj)) {\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -740,1 +740,1 @@\n-  bool is_range_check_if(IfNode *iff, PhaseIdealLoop *phase, Invariance& invar) const;\n+  bool is_range_check_if(IfNode *iff, PhaseIdealLoop *phase, Invariance& invar, ProjNode *predicate_proj) const;\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n@@ -49,0 +49,13 @@\n+    public static void getPermutations1(byte[] inputArray, byte[][] outputArray) {\n+        int[] indexes = new int[]{0, 2};\n+\n+        for (int a = 0; a < (int)(a + 16); a++) {\n+            int oneIdx = indexes[0]++;\n+            for (int b = a + 1; b < inputArray.length; b++) {\n+                int twoIdx = indexes[1]++;\n+                outputArray[twoIdx][0] = inputArray[a];\n+                outputArray[twoIdx][1] = inputArray[b];\n+            }\n+        }\n+    }\n+\n@@ -57,0 +70,17 @@\n+\n+        for (int i = 0; i < 100; ++i) {\n+            Thread t = new Thread(new Runnable() {\n+                public void run() {\n+                    for (int i = 0; i < 1000000; i++) {\n+                        getPermutations1(inputArray, outputArray);\n+                    }\n+                }\n+            });\n+            t.start();\n+            try {\n+                Thread.sleep(100);\n+                t.stop();\n+                t.join();\n+            } catch (Exception e) {\n+            }\n+        }\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/LoadSplitThruPhi.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"}]}