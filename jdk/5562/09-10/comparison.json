{"files":[{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2021, Amazon.com Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Group;\n+import org.openjdk.jmh.annotations.GroupThreads;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Three threads counting up to maxNum(default: 1 000 000). Two of them do pauses.\n+ * One thread counts without a pause.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+public class ThreadOnSpinWait {\n+    @Param({\"1000000\"})\n+    public int maxNum;\n+\n+    @Benchmark\n+    @Group(\"count\")\n+    @GroupThreads(1)\n+    public void withOnSpinWait() {\n+        for (int i = 0; i < maxNum; ++i) {\n+            nowork(i);\n+            Thread.onSpinWait();\n+        }\n+    }\n+\n+    @Benchmark\n+    @Group(\"count\")\n+    @GroupThreads(1)\n+    public void withSleep0() throws InterruptedException {\n+        for (int i = 0; i < maxNum; ++i) {\n+            nowork(i);\n+            Thread.sleep(0);\n+        }\n+    }\n+\n+    @Benchmark\n+    @Group(\"count\")\n+    @GroupThreads(1)\n+    public void withoutPause() {\n+        for (int i = 0; i < maxNum; ++i) {\n+            nowork(i);\n+        }\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public static void nowork(int v) {\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/ThreadOnSpinWait.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}