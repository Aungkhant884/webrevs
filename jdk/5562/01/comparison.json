{"files":[{"patch":"@@ -2376,0 +2376,2 @@\n+    case Op_OnSpinWait:\n+      return VM_Version::supports_on_spin_wait();\n@@ -14349,0 +14351,45 @@\n+instruct onspinwait() %{\n+  match(OnSpinWait);\n+  ins_cost(INSN_COST);\n+\n+  format %{\n+    $$template\n+    int inst_count = VM_Version::pause_impl_desc().inst_count();\n+    #define PRINT_N_INST(inst) \\\n+      st->print(\"%s\\t! membar_onspinwait\\n\", #inst); \\\n+      for (int i = 1; i < inst_count; ++i) st->print(\"\\t%s\\n\", #inst);\n+    switch (VM_Version::pause_impl_desc().inst()) {\n+      case NOP:\n+        PRINT_N_INST(nop)\n+        break;\n+      case ISB:\n+        PRINT_N_INST(isb)\n+        break;\n+      case YIELD:\n+        PRINT_N_INST(yield)\n+        break;\n+      default:\n+        ShouldNotReachHere();\n+    }\n+    #undef EMIT_N_ASM_STRINGS\n+  %}\n+\n+  ins_encode %{\n+    int inst_count = VM_Version::pause_impl_desc().inst_count();\n+    switch (VM_Version::pause_impl_desc().inst()) {\n+      case NOP:\n+        EMIT_N_INST(inst_count, nop);\n+        break;\n+      case ISB:\n+        EMIT_N_INST(inst_count, isb);\n+        break;\n+      case YIELD:\n+        EMIT_N_INST(inst_count, yield);\n+        break;\n+      default:\n+        ShouldNotReachHere();\n+    }\n+  %}\n+  ins_pipe(pipe_class_empty);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2987,1 +2987,14 @@\n-  Unimplemented();\n+  int inst_count = VM_Version::pause_impl_desc().inst_count();\n+  switch (VM_Version::pause_impl_desc().inst()) {\n+    case NOP:\n+      EMIT_N_INST(inst_count, nop);\n+      break;\n+    case ISB:\n+      EMIT_N_INST(inst_count, isb);\n+      break;\n+    case YIELD:\n+      EMIT_N_INST(inst_count, yield);\n+      break;\n+    default:\n+      ShouldNotReachHere();\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -113,1 +113,4 @@\n-          range(-1, 4096)\n+          range(-1, 4096)                                               \\\n+  product(ccstr, UsePauseImpl, \"none\",                                  \\\n+          \"Use instructions to implement pauses.\"                       \\\n+          \"Options: none, Nnop, Nisb, Nyield, where optional N is 2..9.\")\n","filename":"src\/hotspot\/cpu\/aarch64\/globals_aarch64.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1418,0 +1418,3 @@\n+#define EMIT_N_INST(n, inst) \\\n+  for (int i = 0; i < (n); ++i) __ inst()\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2021, Amazon.com Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_AARCH64_PAUSE_AARCH64_HPP\n+#define CPU_AARCH64_PAUSE_AARCH64_HPP\n+\n+enum PauseInst {\n+  NONE = -1,\n+  NOP,\n+  ISB,\n+  YIELD\n+};\n+\n+class PauseImplDesc {\n+private:\n+  PauseInst _inst;\n+  int _count;\n+\n+public:\n+  PauseImplDesc(PauseInst inst = NONE, unsigned int count = 0) : _inst(inst), _count(count) {}\n+\n+  PauseInst inst() const { return _inst; }\n+  int inst_count() const { return _count; }\n+};\n+\n+#endif \/\/ CPU_AARCH64_PAUSE_AARCH64_HPP\n","filename":"src\/hotspot\/cpu\/aarch64\/pause_aarch64.hpp","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -49,0 +49,25 @@\n+PauseImplDesc VM_Version::_pause_impl_desc;\n+\n+static PauseImplDesc get_pause_impl_desc() {\n+  const char *s = UsePauseImpl;\n+  unsigned int count = 1;\n+  if (isdigit(*s)) {\n+    count = *s - '0';\n+    if (count == 0) {\n+      vm_exit_during_initialization(\"Invalid value for UsePauseImpl: zero instruction count\", UsePauseImpl);\n+    }\n+    s += 1;\n+  }\n+  if (strcmp(s, \"nop\") == 0) {\n+    return PauseImplDesc(NOP, count);\n+  } else if (strcmp(s, \"isb\") == 0) {\n+    return PauseImplDesc(ISB, count);\n+  } else if (strcmp(s, \"yield\") == 0) {\n+    return PauseImplDesc(YIELD, count);\n+  } else if (strcmp(s, \"none\") != 0) {\n+    vm_exit_during_initialization(\"Invalid value for UsePauseImpl\", UsePauseImpl);\n+  }\n+\n+  return PauseImplDesc{};\n+}\n+\n@@ -451,0 +476,2 @@\n+  _pause_impl_desc = get_pause_impl_desc();\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"pause_aarch64.hpp\"\n@@ -48,0 +49,2 @@\n+  static PauseImplDesc _pause_impl_desc;\n+\n@@ -145,0 +148,4 @@\n+  static const PauseImplDesc& pause_impl_desc() { return _pause_impl_desc; }\n+\n+  static bool supports_on_spin_wait() { return _pause_impl_desc.inst() != NONE; }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2021, Amazon.com Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test TestOnSpinWaitImplAArch64\n+ * @summary Checks that java.lang.Thread.onSpinWait is intrinsified with instructions specified in '-XX:UsePauseImpl'\n+ * @bug 8186670\n+ * @library \/test\/lib\n+ *\n+ * @requires vm.flagless\n+ * @requires os.arch==\"aarch64\"\n+ *\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitImplAArch64 4 nop\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitImplAArch64 3 isb\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitImplAArch64 2 yield\n+ *\/\n+\n+package compiler.onSpinWait;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.regex.Pattern;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestOnSpinWaitImplAArch64 {\n+    public static void main(String[] args) throws Exception {\n+        String pauseImplInst = args[1];\n+        String pauseImplInstCount = args[0];\n+        ArrayList<String> command = new ArrayList<String>();\n+        command.add(\"-XX:+IgnoreUnrecognizedVMOptions\");\n+        command.add(\"-showversion\");\n+        command.add(\"-XX:-BackgroundCompilation\");\n+        command.add(\"-XX:+UnlockDiagnosticVMOptions\");\n+        command.add(\"-XX:+PrintOptoAssembly\");\n+        command.add(\"-XX:-TieredCompilation\");\n+        command.add(\"-Xbatch\");\n+        command.add(\"-XX:UsePauseImpl=\" + pauseImplInstCount + pauseImplInst);\n+        command.add(\"-XX:CompileCommand=compileonly,\" + Launcher.class.getName() + \"::\" + \"test\");\n+        command.add(Launcher.class.getName());\n+\n+        \/\/ Test C2 compiler\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(command);\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+\n+        analyzer.shouldHaveExitValue(0);\n+\n+        checkOutput(analyzer, pauseImplInst, Integer.parseInt(pauseImplInstCount));\n+    }\n+\n+    private static void checkOutput(OutputAnalyzer output, String pauseImplInst, int pauseImplInstCount) {\n+        Iterator<String> iter = output.asLines().listIterator();\n+\n+        String match = skipTo(iter, Pattern.quote(\"{method}\"));\n+        if (match == null) {\n+            throw new RuntimeException(\"Missing compiler output for the method 'test'!\\n\\n\" + output.getOutput());\n+        }\n+\n+        match = skipTo(iter, Pattern.quote(\"- name:\"));\n+        if (match == null) {\n+            throw new RuntimeException(\"Missing compiled method name!\\n\\n\" + output.getOutput());\n+        }\n+        if (!match.contains(\"test\")) {\n+            throw new RuntimeException(\"Wrong method \" + match + \"!\\n  -- expecting 'test'\\n\\n\" + output.getOutput());\n+        }\n+\n+        match = skipTo(iter, Pattern.quote(\"! membar_onspinwait\"));\n+        if (match == null) {\n+            throw new RuntimeException(\"Missing 'membar_onspinwait'!\\n\\n\" + output.getOutput());\n+        }\n+        if (!match.contains(pauseImplInst)) {\n+            throw new RuntimeException(\"Wrong intruction \" + match + \"!\\n  -- expecting \" + pauseImplInst + \"\\n\\n\" + output.getOutput());\n+        }\n+        int foundInstCount = 1;\n+        while (foundInstCount < pauseImplInstCount) {\n+            if (!iter.hasNext()) {\n+                break;\n+            }\n+            String nextLine = iter.next();\n+            if (!nextLine.contains(pauseImplInst)) {\n+                break;\n+            }\n+            ++foundInstCount;\n+        }\n+        if (foundInstCount != pauseImplInstCount) {\n+            throw new RuntimeException(\"Wrong intruction \" + pauseImplInst + \" count \" + foundInstCount + \"!\\n  -- expecting \" + pauseImplInstCount + \"\\n\\n\" + output.getOutput());\n+        }\n+    }\n+\n+    private static String skipTo(Iterator<String> iter, String substring) {\n+        while (iter.hasNext()) {\n+            String nextLine = iter.next();\n+            if (nextLine.matches(\".*\" + substring + \".*\")) {\n+                return nextLine;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    static class Launcher {\n+\n+        public static void main(final String[] args) throws Exception {\n+            int end = 20_000;\n+\n+            for (int i=0; i < end; i++) {\n+                test();\n+            }\n+        }\n+        static void test() {\n+            java.lang.Thread.onSpinWait();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/onSpinWait\/TestOnSpinWaitImplAArch64.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2021, Amazon.com Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test TestOnSpinWaitImplC1AArch64\n+ * @summary Checks that java.lang.Thread.onSpinWait is intrinsified\n+ * @bug 8186670\n+ * @library \/test\/lib\n+ *\n+ * @requires vm.flagless\n+ * @requires os.arch==\"aarch64\"\n+ * @requires vm.compiler1.enabled\n+ *\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitImplC1AArch64 4 nop\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitImplC1AArch64 3 isb\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitImplC1AArch64 2 yield\n+ *\/\n+\n+package compiler.onSpinWait;\n+\n+import java.util.ArrayList;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestOnSpinWaitImplC1AArch64 {\n+\n+    public static void main(String[] args) throws Exception {\n+        String pauseImplInst = args[1];\n+        String pauseImplInstCount = args[0];\n+        ArrayList<String> command = new ArrayList<String>();\n+        command.add(\"-XX:+IgnoreUnrecognizedVMOptions\");\n+        command.add(\"-showversion\");\n+        command.add(\"-XX:+TieredCompilation\");\n+        command.add(\"-XX:TieredStopAtLevel=1\");\n+        command.add(\"-Xbatch\");\n+        command.add(\"-XX:+PrintCompilation\");\n+        command.add(\"-XX:+UnlockDiagnosticVMOptions\");\n+        command.add(\"-XX:+PrintInlining\");\n+        command.add(\"-XX:UsePauseImpl=\" + pauseImplInstCount + pauseImplInst);\n+        command.add(Launcher.class.getName());\n+\n+        \/\/ Test C1 compiler\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(command);\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.shouldContain(\"java.lang.Thread::onSpinWait (1 bytes)   intrinsic\");\n+    }\n+\n+    static class Launcher {\n+\n+        public static void main(final String[] args) throws Exception {\n+            int end = 20_000;\n+\n+            for (int i=0; i < end; i++) {\n+                test();\n+            }\n+        }\n+        static void test() {\n+            java.lang.Thread.onSpinWait();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/onSpinWait\/TestOnSpinWaitImplC1AArch64.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2021, Amazon.com Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test TestOnSpinWaitPauseImplNone\n+ * @summary Checks that java.lang.Thread.onSpinWait is not intrinsified when '-XX:UsePauseImpl=none' is used\n+ * @bug 8186670\n+ * @library \/test\/lib\n+ *\n+ * @requires vm.flagless\n+ * @requires os.arch==\"aarch64\"\n+ *\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitPauseImplNone\n+ *\/\n+\n+package compiler.onSpinWait;\n+\n+import java.util.ArrayList;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestOnSpinWaitPauseImplNone {\n+\n+    public static void main(String[] args) throws Exception {\n+        ArrayList<String> command = new ArrayList<String>();\n+        command.add(\"-XX:+IgnoreUnrecognizedVMOptions\");\n+        command.add(\"-showversion\");\n+        command.add(\"-XX:-TieredCompilation\");\n+        command.add(\"-Xbatch\");\n+        command.add(\"-XX:+PrintCompilation\");\n+        command.add(\"-XX:+UnlockDiagnosticVMOptions\");\n+        command.add(\"-XX:+PrintInlining\");\n+        command.add(\"-XX:UsePauseImpl=none\");\n+        command.add(Launcher.class.getName());\n+\n+        \/\/ Test C2 compiler\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(command);\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+\n+        analyzer.shouldHaveExitValue(0);\n+\n+        \/\/ The test is applicable only to C2 (present in Server VM).\n+        if (analyzer.getStderr().contains(\"Server VM\")) {\n+            analyzer.shouldNotContain(\"java.lang.Thread::onSpinWait (1 bytes)   (intrinsic)\");\n+        }\n+    }\n+\n+    static class Launcher {\n+\n+        public static void main(final String[] args) throws Exception {\n+            int end = 20_000;\n+\n+            for (int i=0; i < end; i++) {\n+                test();\n+            }\n+        }\n+        static void test() {\n+            java.lang.Thread.onSpinWait();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/onSpinWait\/TestOnSpinWaitPauseImplNone.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}