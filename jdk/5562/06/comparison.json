{"files":[{"patch":"@@ -2376,0 +2376,2 @@\n+    case Op_OnSpinWait:\n+      return VM_Version::supports_on_spin_wait();\n@@ -14349,0 +14351,12 @@\n+instruct onspinwait() %{\n+  match(OnSpinWait);\n+  ins_cost(INSN_COST);\n+\n+  format %{ \"onspinwait\" %}\n+\n+  ins_encode %{\n+    __ spin_wait();\n+  %}\n+  ins_pipe(pipe_class_empty);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2987,1 +2987,1 @@\n-  Unimplemented();\n+  __ spin_wait();\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,1 +113,4 @@\n-          range(-1, 4096)\n+          range(-1, 4096)                                               \\\n+  product(ccstr, OnSpinWaitImpl, \"none\",                                \\\n+          \"Use instructions to implement java.lang.Thread.onSpinWait().\"\\\n+          \"Options: none, Nnop, Nisb, Nyield, where optional N is 2..9.\")\n","filename":"src\/hotspot\/cpu\/aarch64\/globals_aarch64.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -5157,0 +5157,18 @@\n+\n+void MacroAssembler::spin_wait() {\n+  for (int i = 0; i < VM_Version::spin_wait_desc().inst_count(); ++i) {\n+    switch (VM_Version::spin_wait_desc().inst()) {\n+      case SpinWait::NOP:\n+        nop();\n+        break;\n+      case SpinWait::ISB:\n+        isb();\n+        break;\n+      case SpinWait::YIELD:\n+        yield();\n+        break;\n+      default:\n+        ShouldNotReachHere();\n+    }\n+  }\n+}\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1383,0 +1383,3 @@\n+  \/\/ Code for java.lang.Thread::onSpinWait() intrinsic.\n+  void spin_wait();\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2021, Amazon.com Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_AARCH64_SPIN_WAIT_AARCH64_HPP\n+#define CPU_AARCH64_SPIN_WAIT_AARCH64_HPP\n+\n+class SpinWait {\n+public:\n+  enum Inst {\n+    NONE = -1,\n+    NOP,\n+    ISB,\n+    YIELD\n+  };\n+\n+private:\n+  Inst _inst;\n+  int _count;\n+\n+public:\n+  SpinWait(Inst inst = NONE, int count = 0) : _inst(inst), _count(count) {}\n+\n+  Inst inst() const { return _inst; }\n+  int inst_count() const { return _count; }\n+};\n+\n+#endif \/\/ CPU_AARCH64_SPIN_WAIT_AARCH64_HPP\n","filename":"src\/hotspot\/cpu\/aarch64\/spin_wait_aarch64.hpp","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -49,0 +49,25 @@\n+SpinWait VM_Version::_spin_wait;\n+\n+static SpinWait get_spin_wait_desc() {\n+  const char *s = OnSpinWaitImpl;\n+  unsigned int count = 1;\n+  if (isdigit(*s)) {\n+    count = *s - '0';\n+    if (count == 0) {\n+      vm_exit_during_initialization(\"Invalid value for OnSpinWaitImpl: zero instruction count\", OnSpinWaitImpl);\n+    }\n+    s += 1;\n+  }\n+  if (strcmp(s, \"nop\") == 0) {\n+    return SpinWait(SpinWait::NOP, count);\n+  } else if (strcmp(s, \"isb\") == 0) {\n+    return SpinWait(SpinWait::ISB, count);\n+  } else if (strcmp(s, \"yield\") == 0) {\n+    return SpinWait(SpinWait::YIELD, count);\n+  } else if (strcmp(s, \"none\") != 0) {\n+    vm_exit_during_initialization(\"Invalid value for OnSpinWaitImpl\", OnSpinWaitImpl);\n+  }\n+\n+  return SpinWait{};\n+}\n+\n@@ -451,0 +476,2 @@\n+  _spin_wait = get_spin_wait_desc();\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"spin_wait_aarch64.hpp\"\n@@ -48,0 +49,2 @@\n+  static SpinWait _spin_wait;\n+\n@@ -145,0 +148,4 @@\n+  static const SpinWait& spin_wait_desc() { return _spin_wait; }\n+\n+  static bool supports_on_spin_wait() { return _spin_wait.inst() != SpinWait::NONE; }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,188 @@\n+\/*\n+ * Copyright (c) 2021, Amazon.com Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test TestOnSpinWaitAArch64\n+ * @summary Checks that java.lang.Thread.onSpinWait is intrinsified with instructions specified in '-XX:OnSpinWaitImpl'\n+ * @bug 8186670\n+ * @library \/test\/lib\n+ *\n+ * @requires vm.flagless\n+ * @requires os.arch==\"aarch64\"\n+ *\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitAArch64 c2 7 nop\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitAArch64 c2 3 isb\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitAArch64 c2 1 yield\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitAArch64 c1 7 nop\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitAArch64 c1 3 isb\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitAArch64 c1 1 yield\n+ *\/\n+\n+package compiler.onSpinWait;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.ListIterator;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestOnSpinWaitAArch64 {\n+    public static void main(String[] args) throws Exception {\n+        String compiler = args[0];\n+        String spinWaitInstCount = args[1];\n+        String spinWaitInst = args[2];\n+        ArrayList<String> command = new ArrayList<String>();\n+        command.add(\"-XX:+IgnoreUnrecognizedVMOptions\");\n+        command.add(\"-showversion\");\n+        command.add(\"-XX:-BackgroundCompilation\");\n+        command.add(\"-XX:+UnlockDiagnosticVMOptions\");\n+        command.add(\"-XX:+PrintAssembly\");\n+        if (compiler.equals(\"c2\")) {\n+            command.add(\"-XX:-TieredCompilation\");\n+        } else if (compiler.equals(\"c1\")) {\n+            command.add(\"-XX:+TieredCompilation\");\n+            command.add(\"-XX:TieredStopAtLevel=1\");\n+        } else {\n+            throw new RuntimeException(\"Unknown compiler: \" + compiler);\n+        }\n+        command.add(\"-Xbatch\");\n+        command.add(\"-XX:OnSpinWaitImpl=\" + spinWaitInstCount + spinWaitInst);\n+        command.add(\"-XX:CompileCommand=compileonly,\" + Launcher.class.getName() + \"::\" + \"test\");\n+        command.add(Launcher.class.getName());\n+\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(command);\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+\n+        analyzer.shouldHaveExitValue(0);\n+\n+        System.out.println(analyzer.getOutput());\n+\n+        checkOutput(analyzer, getSpinWaitInstHex(spinWaitInst), Integer.parseInt(spinWaitInstCount));\n+    }\n+\n+    private static String getSpinWaitInstHex(String spinWaitInst) {\n+      if (\"nop\".equals(spinWaitInst)) {\n+          return \"1f20 03d5\";\n+      } else if (\"isb\".equals(spinWaitInst)) {\n+          return \"df3f 03d5\";\n+      } else if (\"yield\".equals(spinWaitInst)) {\n+          return \"3f20 03d5\";\n+      } else {\n+          throw new RuntimeException(\"Unknown spin wait instruction: \" + spinWaitInst);\n+      }\n+    }\n+\n+    private static void addInstrs(String line, ArrayList<String> instrs) {\n+        for (String instr : line.split(\"\\\\|\")) {\n+            instrs.add(instr.trim());\n+        }\n+    }\n+\n+    \/\/ The expected output of PrintAssembly for example for a spin wait with three NOPs:\n+    \/\/\n+    \/\/ # {method} {0x0000ffff6ac00370} 'test' '()V' in 'compiler\/onSpinWait\/TestOnSpinWaitAArch64$Launcher'\n+    \/\/ #           [sp+0x40]  (sp of caller)\n+    \/\/ 0x0000ffff9d557680: 1f20 03d5 | e953 40d1 | 3f01 00f9 | ff03 01d1 | fd7b 03a9 | 1f20 03d5 | 1f20 03d5\n+    \/\/\n+    \/\/ 0x0000ffff9d5576ac: ;*invokestatic onSpinWait {reexecute=0 rethrow=0 return_oop=0}\n+    \/\/                     ; - compiler.onSpinWait.TestOnSpinWaitAArch64$Launcher::test@0 (line 161)\n+    \/\/ 0x0000ffff9d5576ac: 1f20 03d5 | fd7b 43a9 | ff03 0191\n+    \/\/\n+    \/\/ The checkOutput method adds hex instructions before 'invokestatic onSpinWait' and from the line after\n+    \/\/ it to a list. The list is traversed from the end to count spin wait instructions.\n+    private static void checkOutput(OutputAnalyzer output, String spinWaitInstHex, int spinWaitInstCount) {\n+        Iterator<String> iter = output.asLines().listIterator();\n+\n+        String match = skipTo(iter, \"'test' '()V' in 'compiler\/onSpinWait\/TestOnSpinWaitAArch64$Launcher'\");\n+        if (match == null) {\n+            throw new RuntimeException(\"Missing compiler output for the method compiler.onSpinWait.TestOnSpinWaitAArch64$Launcher::test\");\n+        }\n+\n+        ArrayList<String> instrs = new ArrayList<String>();\n+        while (iter.hasNext()) {\n+            String line = iter.next();\n+            if (line.contains(\"*invokestatic onSpinWait\")) {\n+                break;\n+            }\n+            if (line.contains(\"0x\") && !line.contains(\";\")) {\n+                addInstrs(line, instrs);\n+            }\n+        }\n+\n+        if (!iter.hasNext() || !iter.next().contains(\"- compiler.onSpinWait.TestOnSpinWaitAArch64$Launcher::test@0\") || !iter.hasNext()) {\n+            throw new RuntimeException(\"Missing compiler output for Thread.onSpinWait intrinsic\");\n+        }\n+\n+        String line = iter.next();\n+        if (!line.contains(\"0x\") || line.contains(\";\")) {\n+            throw new RuntimeException(\"Expected hex instructions\");\n+        }\n+\n+        addInstrs(line, instrs);\n+\n+        int foundInstCount = 0;\n+\n+        ListIterator<String> instrReverseIter = instrs.listIterator(instrs.size());\n+        while (instrReverseIter.hasPrevious()) {\n+            if (instrReverseIter.previous().endsWith(spinWaitInstHex)) {\n+                foundInstCount = 1;\n+                break;\n+            }\n+        }\n+\n+        while (instrReverseIter.hasPrevious()) {\n+            if (!instrReverseIter.previous().endsWith(spinWaitInstHex)) {\n+                break;\n+            }\n+            ++foundInstCount;\n+        }\n+\n+        if (foundInstCount != spinWaitInstCount) {\n+            throw new RuntimeException(\"Wrong instruction \" + spinWaitInstHex + \" count \" + foundInstCount + \"!\\n  -- expecting \" + spinWaitInstCount);\n+        }\n+    }\n+\n+    private static String skipTo(Iterator<String> iter, String substring) {\n+        while (iter.hasNext()) {\n+            String nextLine = iter.next();\n+            if (nextLine.contains(substring)) {\n+                return nextLine;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    static class Launcher {\n+        public static void main(final String[] args) throws Exception {\n+            int end = 20_000;\n+\n+            for (int i=0; i < end; i++) {\n+                test();\n+            }\n+        }\n+        static void test() {\n+            java.lang.Thread.onSpinWait();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/onSpinWait\/TestOnSpinWaitAArch64.java","additions":188,"deletions":0,"binary":false,"changes":188,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2021, Amazon.com Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test TestOnSpinWaitNoneAArch64\n+ * @summary Checks that java.lang.Thread.onSpinWait is not intrinsified when '-XX:OnSpinWaitImpl=none' is used\n+ * @bug 8186670\n+ * @library \/test\/lib\n+ *\n+ * @requires vm.flagless\n+ * @requires os.arch==\"aarch64\"\n+ *\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitNoneAArch64\n+ *\/\n+\n+package compiler.onSpinWait;\n+\n+import java.util.ArrayList;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestOnSpinWaitNoneAArch64 {\n+\n+    public static void main(String[] args) throws Exception {\n+        ArrayList<String> command = new ArrayList<String>();\n+        command.add(\"-XX:+IgnoreUnrecognizedVMOptions\");\n+        command.add(\"-showversion\");\n+        command.add(\"-XX:-TieredCompilation\");\n+        command.add(\"-Xbatch\");\n+        command.add(\"-XX:+PrintCompilation\");\n+        command.add(\"-XX:+UnlockDiagnosticVMOptions\");\n+        command.add(\"-XX:+PrintInlining\");\n+        command.add(\"-XX:OnSpinWaitImpl=none\");\n+        command.add(Launcher.class.getName());\n+\n+        \/\/ Test C2 compiler\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(command);\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+\n+        analyzer.shouldHaveExitValue(0);\n+\n+        \/\/ The test is applicable only to C2 (present in Server VM).\n+        if (analyzer.getStderr().contains(\"Server VM\")) {\n+            analyzer.shouldNotContain(\"java.lang.Thread::onSpinWait (1 bytes)   (intrinsic)\");\n+        }\n+    }\n+\n+    static class Launcher {\n+\n+        public static void main(final String[] args) throws Exception {\n+            int end = 20_000;\n+\n+            for (int i=0; i < end; i++) {\n+                test();\n+            }\n+        }\n+        static void test() {\n+            java.lang.Thread.onSpinWait();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/onSpinWait\/TestOnSpinWaitNoneAArch64.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}