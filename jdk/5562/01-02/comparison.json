{"files":[{"patch":"@@ -14355,21 +14355,1 @@\n-  format %{\n-    $$template\n-    int inst_count = VM_Version::pause_impl_desc().inst_count();\n-    #define PRINT_N_INST(inst) \\\n-      st->print(\"%s\\t! membar_onspinwait\\n\", #inst); \\\n-      for (int i = 1; i < inst_count; ++i) st->print(\"\\t%s\\n\", #inst);\n-    switch (VM_Version::pause_impl_desc().inst()) {\n-      case NOP:\n-        PRINT_N_INST(nop)\n-        break;\n-      case ISB:\n-        PRINT_N_INST(isb)\n-        break;\n-      case YIELD:\n-        PRINT_N_INST(yield)\n-        break;\n-      default:\n-        ShouldNotReachHere();\n-    }\n-    #undef EMIT_N_ASM_STRINGS\n-  %}\n+  format %{ \"onspinwait\" %}\n@@ -14378,14 +14358,1 @@\n-    int inst_count = VM_Version::pause_impl_desc().inst_count();\n-    switch (VM_Version::pause_impl_desc().inst()) {\n-      case NOP:\n-        EMIT_N_INST(inst_count, nop);\n-        break;\n-      case ISB:\n-        EMIT_N_INST(inst_count, isb);\n-        break;\n-      case YIELD:\n-        EMIT_N_INST(inst_count, yield);\n-        break;\n-      default:\n-        ShouldNotReachHere();\n-    }\n+    __ spin_wait();\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":2,"deletions":35,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2987,14 +2987,1 @@\n-  int inst_count = VM_Version::pause_impl_desc().inst_count();\n-  switch (VM_Version::pause_impl_desc().inst()) {\n-    case NOP:\n-      EMIT_N_INST(inst_count, nop);\n-      break;\n-    case ISB:\n-      EMIT_N_INST(inst_count, isb);\n-      break;\n-    case YIELD:\n-      EMIT_N_INST(inst_count, yield);\n-      break;\n-    default:\n-      ShouldNotReachHere();\n-  }\n+  __ spin_wait();\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -114,2 +114,2 @@\n-  product(ccstr, UsePauseImpl, \"none\",                                  \\\n-          \"Use instructions to implement pauses.\"                       \\\n+  product(ccstr, OnSpinWaitImpl, \"none\",                                \\\n+          \"Use instructions to implement java.lang.Thread.onSpinWait().\"\\\n","filename":"src\/hotspot\/cpu\/aarch64\/globals_aarch64.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1383,0 +1383,21 @@\n+  \/\/ Code for java.lang.Thread::onSpinWait() intrinsic.\n+  void spin_wait() {\n+#define EMIT_N_INST(n, inst) for (int i = 0; i < (n); ++i) inst()\n+\n+    int inst_count = VM_Version::pause_impl_desc().inst_count();\n+    switch (VM_Version::pause_impl_desc().inst()) {\n+      case NOP:\n+        EMIT_N_INST(inst_count, nop);\n+        break;\n+      case ISB:\n+        EMIT_N_INST(inst_count, isb);\n+        break;\n+      case YIELD:\n+        EMIT_N_INST(inst_count, yield);\n+        break;\n+      default:\n+        ShouldNotReachHere();\n+    }\n+#undef EMIT_N_INST\n+  }\n+\n@@ -1418,3 +1439,0 @@\n-#define EMIT_N_INST(n, inst) \\\n-  for (int i = 0; i < (n); ++i) __ inst()\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  const char *s = UsePauseImpl;\n+  const char *s = OnSpinWaitImpl;\n@@ -57,1 +57,1 @@\n-      vm_exit_during_initialization(\"Invalid value for UsePauseImpl: zero instruction count\", UsePauseImpl);\n+      vm_exit_during_initialization(\"Invalid value for OnSpinWaitImpl: zero instruction count\", OnSpinWaitImpl);\n@@ -68,1 +68,1 @@\n-    vm_exit_during_initialization(\"Invalid value for UsePauseImpl\", UsePauseImpl);\n+    vm_exit_during_initialization(\"Invalid value for OnSpinWaitImpl\", OnSpinWaitImpl);\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Checks that java.lang.Thread.onSpinWait is intrinsified with instructions specified in '-XX:UsePauseImpl'\n+ * @summary Checks that java.lang.Thread.onSpinWait is intrinsified with instructions specified in '-XX:OnSpinWaitImpl'\n@@ -33,3 +33,6 @@\n- * @run driver compiler.onSpinWait.TestOnSpinWaitImplAArch64 4 nop\n- * @run driver compiler.onSpinWait.TestOnSpinWaitImplAArch64 3 isb\n- * @run driver compiler.onSpinWait.TestOnSpinWaitImplAArch64 2 yield\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitImplAArch64 c2 7 nop\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitImplAArch64 c2 3 isb\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitImplAArch64 c2 1 yield\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitImplAArch64 c1 7 nop\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitImplAArch64 c1 3 isb\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitImplAArch64 c1 1 yield\n@@ -42,1 +45,1 @@\n-import java.util.regex.Pattern;\n+import java.util.ListIterator;\n@@ -48,2 +51,3 @@\n-        String pauseImplInst = args[1];\n-        String pauseImplInstCount = args[0];\n+        String compiler = args[0];\n+        String pauseImplInstCount = args[1];\n+        String pauseImplInst = args[2];\n@@ -55,2 +59,9 @@\n-        command.add(\"-XX:+PrintOptoAssembly\");\n-        command.add(\"-XX:-TieredCompilation\");\n+        command.add(\"-XX:+PrintAssembly\");\n+        if (compiler.equals(\"c2\")) {\n+            command.add(\"-XX:-TieredCompilation\");\n+        } else if (compiler.equals(\"c1\")) {\n+            command.add(\"-XX:+TieredCompilation\");\n+            command.add(\"-XX:TieredStopAtLevel=1\");\n+        } else {\n+            throw new RuntimeException(\"Unknown compiler: \" + compiler);\n+        }\n@@ -58,1 +69,1 @@\n-        command.add(\"-XX:UsePauseImpl=\" + pauseImplInstCount + pauseImplInst);\n+        command.add(\"-XX:OnSpinWaitImpl=\" + pauseImplInstCount + pauseImplInst);\n@@ -62,1 +73,0 @@\n-        \/\/ Test C2 compiler\n@@ -69,1 +79,3 @@\n-        checkOutput(analyzer, pauseImplInst, Integer.parseInt(pauseImplInstCount));\n+        System.out.println(analyzer.getOutput());\n+\n+        checkOutput(analyzer, getPauseImplInstHex(pauseImplInst), Integer.parseInt(pauseImplInstCount));\n@@ -72,2 +84,11 @@\n-    private static void checkOutput(OutputAnalyzer output, String pauseImplInst, int pauseImplInstCount) {\n-        Iterator<String> iter = output.asLines().listIterator();\n+    private static String getPauseImplInstHex(String pauseImplInst) {\n+      if (\"nop\".equals(pauseImplInst)) {\n+          return \"1f20 03d5\";\n+      } else if (\"isb\".equals(pauseImplInst)) {\n+          return \"df3f 03d5\";\n+      } else if (\"yield\".equals(pauseImplInst)) {\n+          return \"3f20 03d5\";\n+      } else {\n+          throw new RuntimeException(\"Unknown pause implementation: \" + pauseImplInst);\n+      }\n+    }\n@@ -75,3 +96,3 @@\n-        String match = skipTo(iter, Pattern.quote(\"{method}\"));\n-        if (match == null) {\n-            throw new RuntimeException(\"Missing compiler output for the method 'test'!\\n\\n\" + output.getOutput());\n+    private static void addInstrs(String line, ArrayList<String> instrs) {\n+        for (String instr : line.split(\"\\\\|\")) {\n+            instrs.add(instr.trim());\n@@ -79,0 +100,1 @@\n+    }\n@@ -80,1 +102,4 @@\n-        match = skipTo(iter, Pattern.quote(\"- name:\"));\n+    private static void checkOutput(OutputAnalyzer output, String pauseImplInstHex, int pauseImplInstCount) {\n+        Iterator<String> iter = output.asLines().listIterator();\n+\n+        String match = skipTo(iter, \"'test' '()V' in 'compiler\/onSpinWait\/TestOnSpinWaitImplAArch64$Launcher'\");\n@@ -82,1 +107,1 @@\n-            throw new RuntimeException(\"Missing compiled method name!\\n\\n\" + output.getOutput());\n+            throw new RuntimeException(\"Missing compiler output for the method compiler.onSpinWait.TestOnSpinWaitImplAArch64$Launcher::test\");\n@@ -84,2 +109,10 @@\n-        if (!match.contains(\"test\")) {\n-            throw new RuntimeException(\"Wrong method \" + match + \"!\\n  -- expecting 'test'\\n\\n\" + output.getOutput());\n+\n+        ArrayList<String> instrs = new ArrayList<String>();\n+        while (iter.hasNext()) {\n+            String line = iter.next();\n+            if (line.contains(\"*invokestatic onSpinWait\")) {\n+                break;\n+            }\n+            if (line.contains(\"0x\") && !line.contains(\";\")) {\n+                addInstrs(line, instrs);\n+            }\n@@ -88,3 +121,2 @@\n-        match = skipTo(iter, Pattern.quote(\"! membar_onspinwait\"));\n-        if (match == null) {\n-            throw new RuntimeException(\"Missing 'membar_onspinwait'!\\n\\n\" + output.getOutput());\n+        if (!iter.hasNext() || !iter.next().contains(\"- compiler.onSpinWait.TestOnSpinWaitImplAArch64$Launcher::test@0\") || !iter.hasNext()) {\n+            throw new RuntimeException(\"Missing compiler output for Thread.onSpinWait intrinsic\");\n@@ -92,2 +124,4 @@\n-        if (!match.contains(pauseImplInst)) {\n-            throw new RuntimeException(\"Wrong intruction \" + match + \"!\\n  -- expecting \" + pauseImplInst + \"\\n\\n\" + output.getOutput());\n+\n+        String line = iter.next();\n+        if (!line.contains(\"0x\") || line.contains(\";\")) {\n+            throw new RuntimeException(\"Expected hex instructions\");\n@@ -95,3 +129,9 @@\n-        int foundInstCount = 1;\n-        while (foundInstCount < pauseImplInstCount) {\n-            if (!iter.hasNext()) {\n+\n+        addInstrs(line, instrs);\n+\n+        int foundInstCount = 0;\n+\n+        ListIterator<String> instrReverseIter = instrs.listIterator(instrs.size());\n+        while (instrReverseIter.hasPrevious()) {\n+            if (instrReverseIter.previous().endsWith(pauseImplInstHex)) {\n+                foundInstCount = 1;\n@@ -100,2 +140,4 @@\n-            String nextLine = iter.next();\n-            if (!nextLine.contains(pauseImplInst)) {\n+        }\n+\n+        while (instrReverseIter.hasPrevious()) {\n+            if (!instrReverseIter.previous().endsWith(pauseImplInstHex)) {\n@@ -106,0 +148,1 @@\n+\n@@ -107,1 +150,1 @@\n-            throw new RuntimeException(\"Wrong intruction \" + pauseImplInst + \" count \" + foundInstCount + \"!\\n  -- expecting \" + pauseImplInstCount + \"\\n\\n\" + output.getOutput());\n+            throw new RuntimeException(\"Wrong instruction \" + pauseImplInstHex + \" count \" + foundInstCount + \"!\\n  -- expecting \" + pauseImplInstCount);\n@@ -114,1 +157,1 @@\n-            if (nextLine.matches(\".*\" + substring + \".*\")) {\n+            if (nextLine.contains(substring)) {\n","filename":"test\/hotspot\/jtreg\/compiler\/onSpinWait\/TestOnSpinWaitImplAArch64.java","additions":76,"deletions":33,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Amazon.com Inc. or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test TestOnSpinWaitImplC1AArch64\n- * @summary Checks that java.lang.Thread.onSpinWait is intrinsified\n- * @bug 8186670\n- * @library \/test\/lib\n- *\n- * @requires vm.flagless\n- * @requires os.arch==\"aarch64\"\n- * @requires vm.compiler1.enabled\n- *\n- * @run driver compiler.onSpinWait.TestOnSpinWaitImplC1AArch64 4 nop\n- * @run driver compiler.onSpinWait.TestOnSpinWaitImplC1AArch64 3 isb\n- * @run driver compiler.onSpinWait.TestOnSpinWaitImplC1AArch64 2 yield\n- *\/\n-\n-package compiler.onSpinWait;\n-\n-import java.util.ArrayList;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class TestOnSpinWaitImplC1AArch64 {\n-\n-    public static void main(String[] args) throws Exception {\n-        String pauseImplInst = args[1];\n-        String pauseImplInstCount = args[0];\n-        ArrayList<String> command = new ArrayList<String>();\n-        command.add(\"-XX:+IgnoreUnrecognizedVMOptions\");\n-        command.add(\"-showversion\");\n-        command.add(\"-XX:+TieredCompilation\");\n-        command.add(\"-XX:TieredStopAtLevel=1\");\n-        command.add(\"-Xbatch\");\n-        command.add(\"-XX:+PrintCompilation\");\n-        command.add(\"-XX:+UnlockDiagnosticVMOptions\");\n-        command.add(\"-XX:+PrintInlining\");\n-        command.add(\"-XX:UsePauseImpl=\" + pauseImplInstCount + pauseImplInst);\n-        command.add(Launcher.class.getName());\n-\n-        \/\/ Test C1 compiler\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(command);\n-\n-        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n-\n-        analyzer.shouldHaveExitValue(0);\n-        analyzer.shouldContain(\"java.lang.Thread::onSpinWait (1 bytes)   intrinsic\");\n-    }\n-\n-    static class Launcher {\n-\n-        public static void main(final String[] args) throws Exception {\n-            int end = 20_000;\n-\n-            for (int i=0; i < end; i++) {\n-                test();\n-            }\n-        }\n-        static void test() {\n-            java.lang.Thread.onSpinWait();\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/onSpinWait\/TestOnSpinWaitImplC1AArch64.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -53,1 +53,1 @@\n-        command.add(\"-XX:UsePauseImpl=none\");\n+        command.add(\"-XX:OnSpinWaitImpl=none\");\n","filename":"test\/hotspot\/jtreg\/compiler\/onSpinWait\/TestOnSpinWaitPauseImplNone.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}