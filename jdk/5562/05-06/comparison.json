{"files":[{"patch":"@@ -0,0 +1,188 @@\n+\/*\n+ * Copyright (c) 2021, Amazon.com Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test TestOnSpinWaitAArch64\n+ * @summary Checks that java.lang.Thread.onSpinWait is intrinsified with instructions specified in '-XX:OnSpinWaitImpl'\n+ * @bug 8186670\n+ * @library \/test\/lib\n+ *\n+ * @requires vm.flagless\n+ * @requires os.arch==\"aarch64\"\n+ *\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitAArch64 c2 7 nop\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitAArch64 c2 3 isb\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitAArch64 c2 1 yield\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitAArch64 c1 7 nop\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitAArch64 c1 3 isb\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitAArch64 c1 1 yield\n+ *\/\n+\n+package compiler.onSpinWait;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.ListIterator;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestOnSpinWaitAArch64 {\n+    public static void main(String[] args) throws Exception {\n+        String compiler = args[0];\n+        String spinWaitInstCount = args[1];\n+        String spinWaitInst = args[2];\n+        ArrayList<String> command = new ArrayList<String>();\n+        command.add(\"-XX:+IgnoreUnrecognizedVMOptions\");\n+        command.add(\"-showversion\");\n+        command.add(\"-XX:-BackgroundCompilation\");\n+        command.add(\"-XX:+UnlockDiagnosticVMOptions\");\n+        command.add(\"-XX:+PrintAssembly\");\n+        if (compiler.equals(\"c2\")) {\n+            command.add(\"-XX:-TieredCompilation\");\n+        } else if (compiler.equals(\"c1\")) {\n+            command.add(\"-XX:+TieredCompilation\");\n+            command.add(\"-XX:TieredStopAtLevel=1\");\n+        } else {\n+            throw new RuntimeException(\"Unknown compiler: \" + compiler);\n+        }\n+        command.add(\"-Xbatch\");\n+        command.add(\"-XX:OnSpinWaitImpl=\" + spinWaitInstCount + spinWaitInst);\n+        command.add(\"-XX:CompileCommand=compileonly,\" + Launcher.class.getName() + \"::\" + \"test\");\n+        command.add(Launcher.class.getName());\n+\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(command);\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+\n+        analyzer.shouldHaveExitValue(0);\n+\n+        System.out.println(analyzer.getOutput());\n+\n+        checkOutput(analyzer, getSpinWaitInstHex(spinWaitInst), Integer.parseInt(spinWaitInstCount));\n+    }\n+\n+    private static String getSpinWaitInstHex(String spinWaitInst) {\n+      if (\"nop\".equals(spinWaitInst)) {\n+          return \"1f20 03d5\";\n+      } else if (\"isb\".equals(spinWaitInst)) {\n+          return \"df3f 03d5\";\n+      } else if (\"yield\".equals(spinWaitInst)) {\n+          return \"3f20 03d5\";\n+      } else {\n+          throw new RuntimeException(\"Unknown spin wait instruction: \" + spinWaitInst);\n+      }\n+    }\n+\n+    private static void addInstrs(String line, ArrayList<String> instrs) {\n+        for (String instr : line.split(\"\\\\|\")) {\n+            instrs.add(instr.trim());\n+        }\n+    }\n+\n+    \/\/ The expected output of PrintAssembly for example for a spin wait with three NOPs:\n+    \/\/\n+    \/\/ # {method} {0x0000ffff6ac00370} 'test' '()V' in 'compiler\/onSpinWait\/TestOnSpinWaitAArch64$Launcher'\n+    \/\/ #           [sp+0x40]  (sp of caller)\n+    \/\/ 0x0000ffff9d557680: 1f20 03d5 | e953 40d1 | 3f01 00f9 | ff03 01d1 | fd7b 03a9 | 1f20 03d5 | 1f20 03d5\n+    \/\/\n+    \/\/ 0x0000ffff9d5576ac: ;*invokestatic onSpinWait {reexecute=0 rethrow=0 return_oop=0}\n+    \/\/                     ; - compiler.onSpinWait.TestOnSpinWaitAArch64$Launcher::test@0 (line 161)\n+    \/\/ 0x0000ffff9d5576ac: 1f20 03d5 | fd7b 43a9 | ff03 0191\n+    \/\/\n+    \/\/ The checkOutput method adds hex instructions before 'invokestatic onSpinWait' and from the line after\n+    \/\/ it to a list. The list is traversed from the end to count spin wait instructions.\n+    private static void checkOutput(OutputAnalyzer output, String spinWaitInstHex, int spinWaitInstCount) {\n+        Iterator<String> iter = output.asLines().listIterator();\n+\n+        String match = skipTo(iter, \"'test' '()V' in 'compiler\/onSpinWait\/TestOnSpinWaitAArch64$Launcher'\");\n+        if (match == null) {\n+            throw new RuntimeException(\"Missing compiler output for the method compiler.onSpinWait.TestOnSpinWaitAArch64$Launcher::test\");\n+        }\n+\n+        ArrayList<String> instrs = new ArrayList<String>();\n+        while (iter.hasNext()) {\n+            String line = iter.next();\n+            if (line.contains(\"*invokestatic onSpinWait\")) {\n+                break;\n+            }\n+            if (line.contains(\"0x\") && !line.contains(\";\")) {\n+                addInstrs(line, instrs);\n+            }\n+        }\n+\n+        if (!iter.hasNext() || !iter.next().contains(\"- compiler.onSpinWait.TestOnSpinWaitAArch64$Launcher::test@0\") || !iter.hasNext()) {\n+            throw new RuntimeException(\"Missing compiler output for Thread.onSpinWait intrinsic\");\n+        }\n+\n+        String line = iter.next();\n+        if (!line.contains(\"0x\") || line.contains(\";\")) {\n+            throw new RuntimeException(\"Expected hex instructions\");\n+        }\n+\n+        addInstrs(line, instrs);\n+\n+        int foundInstCount = 0;\n+\n+        ListIterator<String> instrReverseIter = instrs.listIterator(instrs.size());\n+        while (instrReverseIter.hasPrevious()) {\n+            if (instrReverseIter.previous().endsWith(spinWaitInstHex)) {\n+                foundInstCount = 1;\n+                break;\n+            }\n+        }\n+\n+        while (instrReverseIter.hasPrevious()) {\n+            if (!instrReverseIter.previous().endsWith(spinWaitInstHex)) {\n+                break;\n+            }\n+            ++foundInstCount;\n+        }\n+\n+        if (foundInstCount != spinWaitInstCount) {\n+            throw new RuntimeException(\"Wrong instruction \" + spinWaitInstHex + \" count \" + foundInstCount + \"!\\n  -- expecting \" + spinWaitInstCount);\n+        }\n+    }\n+\n+    private static String skipTo(Iterator<String> iter, String substring) {\n+        while (iter.hasNext()) {\n+            String nextLine = iter.next();\n+            if (nextLine.contains(substring)) {\n+                return nextLine;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    static class Launcher {\n+        public static void main(final String[] args) throws Exception {\n+            int end = 20_000;\n+\n+            for (int i=0; i < end; i++) {\n+                test();\n+            }\n+        }\n+        static void test() {\n+            java.lang.Thread.onSpinWait();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/onSpinWait\/TestOnSpinWaitAArch64.java","additions":188,"deletions":0,"binary":false,"changes":188,"status":"added"},{"patch":"@@ -1,189 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Amazon.com Inc. or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test TestOnSpinWaitImplAArch64\n- * @summary Checks that java.lang.Thread.onSpinWait is intrinsified with instructions specified in '-XX:OnSpinWaitImpl'\n- * @bug 8186670\n- * @library \/test\/lib\n- *\n- * @requires vm.flagless\n- * @requires os.arch==\"aarch64\"\n- *\n- * @run driver compiler.onSpinWait.TestOnSpinWaitImplAArch64 c2 7 nop\n- * @run driver compiler.onSpinWait.TestOnSpinWaitImplAArch64 c2 3 isb\n- * @run driver compiler.onSpinWait.TestOnSpinWaitImplAArch64 c2 1 yield\n- * @run driver compiler.onSpinWait.TestOnSpinWaitImplAArch64 c1 7 nop\n- * @run driver compiler.onSpinWait.TestOnSpinWaitImplAArch64 c1 3 isb\n- * @run driver compiler.onSpinWait.TestOnSpinWaitImplAArch64 c1 1 yield\n- *\/\n-\n-package compiler.onSpinWait;\n-\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.ListIterator;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class TestOnSpinWaitImplAArch64 {\n-    public static void main(String[] args) throws Exception {\n-        String compiler = args[0];\n-        String spinWaitInstCount = args[1];\n-        String spinWaitInst = args[2];\n-        ArrayList<String> command = new ArrayList<String>();\n-        command.add(\"-XX:+IgnoreUnrecognizedVMOptions\");\n-        command.add(\"-showversion\");\n-        command.add(\"-XX:-BackgroundCompilation\");\n-        command.add(\"-XX:+UnlockDiagnosticVMOptions\");\n-        command.add(\"-XX:+PrintAssembly\");\n-        if (compiler.equals(\"c2\")) {\n-            command.add(\"-XX:-TieredCompilation\");\n-        } else if (compiler.equals(\"c1\")) {\n-            command.add(\"-XX:+TieredCompilation\");\n-            command.add(\"-XX:TieredStopAtLevel=1\");\n-        } else {\n-            throw new RuntimeException(\"Unknown compiler: \" + compiler);\n-        }\n-        command.add(\"-Xbatch\");\n-        command.add(\"-XX:OnSpinWaitImpl=\" + spinWaitInstCount + spinWaitInst);\n-        command.add(\"-XX:CompileCommand=compileonly,\" + Launcher.class.getName() + \"::\" + \"test\");\n-        command.add(Launcher.class.getName());\n-\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(command);\n-\n-        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n-\n-        analyzer.shouldHaveExitValue(0);\n-\n-        System.out.println(analyzer.getOutput());\n-\n-        checkOutput(analyzer, getSpinWaitInstHex(spinWaitInst), Integer.parseInt(spinWaitInstCount));\n-    }\n-\n-    private static String getSpinWaitInstHex(String spinWaitInst) {\n-      if (\"nop\".equals(spinWaitInst)) {\n-          return \"1f20 03d5\";\n-      } else if (\"isb\".equals(spinWaitInst)) {\n-          return \"df3f 03d5\";\n-      } else if (\"yield\".equals(spinWaitInst)) {\n-          return \"3f20 03d5\";\n-      } else {\n-          throw new RuntimeException(\"Unknown spin wait instruction: \" + spinWaitInst);\n-      }\n-    }\n-\n-    private static void addInstrs(String line, ArrayList<String> instrs) {\n-        for (String instr : line.split(\"\\\\|\")) {\n-            instrs.add(instr.trim());\n-        }\n-    }\n-\n-    \/\/ The expected output of PrintAssembly for example for a spin wait with three NOPs:\n-    \/\/\n-    \/\/ # {method} {0x0000ffff6ac00370} 'test' '()V' in 'compiler\/onSpinWait\/TestOnSpinWaitImplAArch64$Launcher'\n-    \/\/ #           [sp+0x40]  (sp of caller)\n-    \/\/ 0x0000ffff9d557680: 1f20 03d5 | e953 40d1 | 3f01 00f9 | ff03 01d1 | fd7b 03a9 | 1f20 03d5 | 1f20 03d5\n-    \/\/\n-    \/\/ 0x0000ffff9d5576ac: ;*invokestatic onSpinWait {reexecute=0 rethrow=0 return_oop=0}\n-    \/\/                     ; - compiler.onSpinWait.TestOnSpinWaitImplAArch64$Launcher::test@0 (line 161)\n-    \/\/ 0x0000ffff9d5576ac: 1f20 03d5 | fd7b 43a9 | ff03 0191\n-    \/\/\n-    \/\/ The checkOutput method adds hex instructions before 'invokestatic onSpinWait' and from the line after\n-    \/\/ it to a list. The list is traversed from the end to count spin wait instructions.\n-    private static void checkOutput(OutputAnalyzer output, String spinWaitInstHex, int spinWaitInstCount) {\n-        Iterator<String> iter = output.asLines().listIterator();\n-\n-        String match = skipTo(iter, \"'test' '()V' in 'compiler\/onSpinWait\/TestOnSpinWaitImplAArch64$Launcher'\");\n-        if (match == null) {\n-            throw new RuntimeException(\"Missing compiler output for the method compiler.onSpinWait.TestOnSpinWaitImplAArch64$Launcher::test\");\n-        }\n-\n-        ArrayList<String> instrs = new ArrayList<String>();\n-        while (iter.hasNext()) {\n-            String line = iter.next();\n-            if (line.contains(\"*invokestatic onSpinWait\")) {\n-                break;\n-            }\n-            if (line.contains(\"0x\") && !line.contains(\";\")) {\n-                addInstrs(line, instrs);\n-            }\n-        }\n-\n-        if (!iter.hasNext() || !iter.next().contains(\"- compiler.onSpinWait.TestOnSpinWaitImplAArch64$Launcher::test@0\") || !iter.hasNext()) {\n-            throw new RuntimeException(\"Missing compiler output for Thread.onSpinWait intrinsic\");\n-        }\n-\n-        String line = iter.next();\n-        if (!line.contains(\"0x\") || line.contains(\";\")) {\n-            throw new RuntimeException(\"Expected hex instructions\");\n-        }\n-\n-        addInstrs(line, instrs);\n-\n-        int foundInstCount = 0;\n-\n-        ListIterator<String> instrReverseIter = instrs.listIterator(instrs.size());\n-        while (instrReverseIter.hasPrevious()) {\n-            if (instrReverseIter.previous().endsWith(spinWaitInstHex)) {\n-                foundInstCount = 1;\n-                break;\n-            }\n-        }\n-\n-        while (instrReverseIter.hasPrevious()) {\n-            if (!instrReverseIter.previous().endsWith(spinWaitInstHex)) {\n-                break;\n-            }\n-            ++foundInstCount;\n-        }\n-\n-        if (foundInstCount != spinWaitInstCount) {\n-            throw new RuntimeException(\"Wrong instruction \" + spinWaitInstHex + \" count \" + foundInstCount + \"!\\n  -- expecting \" + spinWaitInstCount);\n-        }\n-    }\n-\n-    private static String skipTo(Iterator<String> iter, String substring) {\n-        while (iter.hasNext()) {\n-            String nextLine = iter.next();\n-            if (nextLine.contains(substring)) {\n-                return nextLine;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    static class Launcher {\n-\n-        public static void main(final String[] args) throws Exception {\n-            int end = 20_000;\n-\n-            for (int i=0; i < end; i++) {\n-                test();\n-            }\n-        }\n-        static void test() {\n-            java.lang.Thread.onSpinWait();\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/onSpinWait\/TestOnSpinWaitImplAArch64.java","additions":0,"deletions":189,"binary":false,"changes":189,"status":"deleted"},{"patch":"@@ -25,2 +25,2 @@\n- * @test TestOnSpinWaitPauseImplNone\n- * @summary Checks that java.lang.Thread.onSpinWait is not intrinsified when '-XX:UsePauseImpl=none' is used\n+ * @test TestOnSpinWaitNoneAArch64\n+ * @summary Checks that java.lang.Thread.onSpinWait is not intrinsified when '-XX:OnSpinWaitImpl=none' is used\n@@ -33,1 +33,1 @@\n- * @run driver compiler.onSpinWait.TestOnSpinWaitPauseImplNone\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitNoneAArch64\n@@ -42,1 +42,1 @@\n-public class TestOnSpinWaitPauseImplNone {\n+public class TestOnSpinWaitNoneAArch64 {\n","filename":"test\/hotspot\/jtreg\/compiler\/onSpinWait\/TestOnSpinWaitNoneAArch64.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"test\/hotspot\/jtreg\/compiler\/onSpinWait\/TestOnSpinWaitPauseImplNone.java","status":"renamed"}]}