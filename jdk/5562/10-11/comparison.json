{"files":[{"patch":"@@ -27,3 +27,0 @@\n-import org.openjdk.jmh.annotations.CompilerControl;\n-import org.openjdk.jmh.annotations.Group;\n-import org.openjdk.jmh.annotations.GroupThreads;\n@@ -32,3 +29,1 @@\n-import org.openjdk.jmh.annotations.Param;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n@@ -38,4 +33,0 @@\n-\/**\n- * Three threads counting up to maxNum(default: 1 000 000). Two of them do pauses.\n- * One thread counts without a pause.\n- *\/\n@@ -43,2 +34,1 @@\n-@OutputTimeUnit(TimeUnit.MILLISECONDS)\n-@State(Scope.Benchmark)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n@@ -46,3 +36,0 @@\n-    @Param({\"1000000\"})\n-    public int maxNum;\n-\n@@ -50,7 +37,3 @@\n-    @Group(\"count\")\n-    @GroupThreads(1)\n-    public void withOnSpinWait() {\n-        for (int i = 0; i < maxNum; ++i) {\n-            nowork(i);\n-            Thread.onSpinWait();\n-        }\n+    @Threads(1)\n+    public void testOnSpinWait() {\n+        Thread.onSpinWait();\n@@ -60,7 +43,3 @@\n-    @Group(\"count\")\n-    @GroupThreads(1)\n-    public void withSleep0() throws InterruptedException {\n-        for (int i = 0; i < maxNum; ++i) {\n-            nowork(i);\n-            Thread.sleep(0);\n-        }\n+    @Threads(1)\n+    public void testSleep0() throws InterruptedException {\n+        Thread.sleep(0);\n@@ -70,10 +49,2 @@\n-    @Group(\"count\")\n-    @GroupThreads(1)\n-    public void withoutPause() {\n-        for (int i = 0; i < maxNum; ++i) {\n-            nowork(i);\n-        }\n-    }\n-\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    public static void nowork(int v) {\n+    @Threads(1)\n+    public void testEmpty() {\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/ThreadOnSpinWait.java","additions":10,"deletions":39,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2021, Amazon.com Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+\/**\n+ * This microbenchmark model producer-consumer.\n+ * The consumer goes to 1ms sleep if data is not available.\n+ * To avoid this it uses Thread.onSpinWait() to wait for data from the producer.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+public class ThreadOnSpinWaitProducerConsumer {\n+    @Param({\"100\"})\n+    public int maxNum;\n+\n+    @Param({\"30\"})\n+    public int spinNum;\n+\n+    AtomicInteger counter;\n+    Thread threadProducer;\n+    Thread threadConsumer;\n+    volatile boolean consumed;\n+\n+    void produce() {\n+        try {\n+            for (int i = 0; i < maxNum; ++i) {\n+                while (!consumed) {\n+                    Thread.sleep(0);\n+                }\n+                counter.incrementAndGet();\n+                consumed = false;\n+            }\n+        } catch (InterruptedException e) {}\n+    }\n+\n+    void consume() {\n+        try {\n+            for (;;) {\n+                boolean goToSleep = true;\n+                for (int i = 0; i < spinNum; ++i) {\n+                    if (!consumed) {\n+                        goToSleep = false;\n+                        break;\n+                    }\n+                    Thread.onSpinWait();\n+                }\n+\n+                if (goToSleep) {\n+                    while (consumed) {\n+                      Thread.sleep(1);\n+                    }\n+                }\n+                int v = counter.get();\n+                consumed = true;\n+                if (v >= maxNum) {\n+                    break;\n+                }\n+            }\n+        } catch (InterruptedException e) {}\n+    }\n+\n+    @Setup(Level.Trial)\n+    public void foo() {\n+        counter = new AtomicInteger();\n+    }\n+\n+    @Setup(Level.Invocation)\n+    public void setup() {\n+        counter.set(0);\n+        consumed = false;\n+        threadProducer = new Thread(this::produce);\n+        threadConsumer = new Thread(this::consume);\n+    }\n+\n+    @Benchmark\n+    public void trial() throws Exception {\n+        threadProducer.start();\n+        threadConsumer.start();\n+        threadProducer.join();\n+        threadConsumer.join();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/ThreadOnSpinWaitProducerConsumer.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+public class ThreadOnSpinWaitSharedCounter {\n+    @Param({\"1000000\"})\n+    public int maxNum;\n+\n+    @Param({\"4\"})\n+    public int threadCount;\n+\n+    AtomicInteger theCounter;\n+\n+    Thread threads[];\n+\n+    void work() {\n+        for (;;) {\n+            int prev = theCounter.get();\n+            if (prev >= maxNum) {\n+                break;\n+            }\n+            if (theCounter.compareAndExchange(prev, prev + 1) != prev) {\n+                Thread.onSpinWait();\n+            }\n+        }\n+    }\n+\n+    @Setup(Level.Trial)\n+    public void foo() {\n+        theCounter = new AtomicInteger();\n+    }\n+\n+    @Setup(Level.Invocation)\n+    public void setup() {\n+        theCounter.set(0);\n+        threads = new Thread[threadCount];\n+\n+        for (int i = 0; i < threads.length; i++) {\n+            threads[i] = new Thread(this::work);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void trial() throws Exception {\n+        for (int i = 0; i < threads.length; i++) {\n+            threads[i].start();\n+        }\n+        for (int i = 0; i < threads.length; i++) {\n+            threads[i].join();\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/ThreadOnSpinWaitSharedCounter.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"}]}