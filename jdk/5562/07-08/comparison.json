{"files":[{"patch":"@@ -82,1 +82,1 @@\n-        checkOutput(analyzer, getSpinWaitInstHex(spinWaitInst), Integer.parseInt(spinWaitInstCount));\n+        checkOutput(analyzer, spinWaitInst, Integer.parseInt(spinWaitInstCount));\n@@ -115,1 +115,18 @@\n-    private static void checkOutput(OutputAnalyzer output, String spinWaitInstHex, int spinWaitInstCount) {\n+    \/\/\n+    \/\/ If JVM finds the hsdis library the output is like:\n+    \/\/\n+    \/\/ # {method} {0x0000ffff63000370} 'test' '()V' in 'compiler\/onSpinWait\/TestOnSpinWaitAArch64$Launcher'\n+    \/\/ #           [sp+0x20]  (sp of caller)\n+    \/\/ 0x0000ffffa409da80:   nop\n+    \/\/ 0x0000ffffa409da84:   sub sp, sp, #0x20\n+    \/\/ 0x0000ffffa409da88:   stp x29, x30, [sp, #16]         ;*synchronization entry\n+    \/\/                                                       ; - compiler.onSpinWait.TestOnSpinWaitAArch64$Launcher::test@-1 (line 187)\n+    \/\/ 0x0000ffffa409da8c:   nop\n+    \/\/ 0x0000ffffa409da90:   nop\n+    \/\/ 0x0000ffffa409da94:   nop\n+    \/\/ 0x0000ffffa409da98:   nop\n+    \/\/ 0x0000ffffa409da9c:   nop\n+    \/\/ 0x0000ffffa409daa0:   nop\n+    \/\/ 0x0000ffffa409daa4:   nop                                 ;*invokestatic onSpinWait {reexecute=0 rethrow=0 return_oop=0}\n+    \/\/                                                           ; - compiler.onSpinWait.TestOnSpinWaitAArch64$Launcher::test@0 (line 187)\n+    private static void checkOutput(OutputAnalyzer output, String spinWaitInst, int spinWaitInstCount) {\n@@ -124,0 +141,2 @@\n+        String line = null;\n+        boolean hasHexInstInOutput = false;\n@@ -125,1 +144,1 @@\n-            String line = iter.next();\n+            line = iter.next();\n@@ -129,0 +148,3 @@\n+            if (!hasHexInstInOutput) {\n+                hasHexInstInOutput = line.contains(\"|\");\n+            }\n@@ -138,4 +160,9 @@\n-        String line = iter.next();\n-        if (!line.contains(\"0x\") || line.contains(\";\")) {\n-            throw new RuntimeException(\"Expected hex instructions\");\n-        }\n+        String strToSearch = null;\n+        if (!hasHexInstInOutput) {\n+            instrs.add(line.split(\";\")[0].trim());\n+            strToSearch = spinWaitInst;\n+        } else {\n+            line = iter.next();\n+            if (!line.contains(\"0x\") || line.contains(\";\")) {\n+                throw new RuntimeException(\"Expected hex instructions\");\n+            }\n@@ -143,1 +170,3 @@\n-        addInstrs(line, instrs);\n+            addInstrs(line, instrs);\n+            strToSearch = getSpinWaitInstHex(spinWaitInst);\n+        }\n@@ -149,1 +178,1 @@\n-            if (instrReverseIter.previous().endsWith(spinWaitInstHex)) {\n+            if (instrReverseIter.previous().endsWith(strToSearch)) {\n@@ -156,1 +185,1 @@\n-            if (!instrReverseIter.previous().endsWith(spinWaitInstHex)) {\n+            if (!instrReverseIter.previous().endsWith(strToSearch)) {\n@@ -163,1 +192,1 @@\n-            throw new RuntimeException(\"Wrong instruction \" + spinWaitInstHex + \" count \" + foundInstCount + \"!\\n  -- expecting \" + spinWaitInstCount);\n+            throw new RuntimeException(\"Wrong instruction \" + strToSearch + \" count \" + foundInstCount + \"!\\n  -- expecting \" + spinWaitInstCount);\n","filename":"test\/hotspot\/jtreg\/compiler\/onSpinWait\/TestOnSpinWaitAArch64.java","additions":40,"deletions":11,"binary":false,"changes":51,"status":"modified"}]}