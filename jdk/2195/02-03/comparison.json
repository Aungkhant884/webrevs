{"files":[{"patch":"@@ -152,1 +152,0 @@\n-        long pid = -1;\n@@ -162,1 +161,1 @@\n-                var outAndPID = ProcessTools.executeProcessPreservePID(\n+                crashOut = ProcessTools.executeProcess(\n@@ -165,2 +164,0 @@\n-                crashOut = outAndPID.output();\n-                pid = outAndPID.pid();\n@@ -182,1 +179,1 @@\n-                String coreFileLocation = CoreUtils.getCoreFileLocation(crashOutputString, pid);\n+                String coreFileLocation = CoreUtils.getCoreFileLocation(crashOutputString, crashOut.pid());\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/CiReplayBase.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -89,1 +89,0 @@\n-            long pid = -1;\n@@ -96,3 +95,1 @@\n-               var outAndPID = ProcessTools.executeProcessPreservePID(pb);\n-               crashOutput = outAndPID.output();\n-               pid = outAndPID.pid();\n+               crashOutput = ProcessTools.executeProcess(pb);\n@@ -104,1 +101,1 @@\n-                coreFileName = CoreUtils.getCoreFileLocation(crashOutput.getStdout(), pid);\n+                coreFileName = CoreUtils.getCoreFileLocation(crashOutput.getStdout(), crashOutput.pid());\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbCDSCore.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -80,2 +80,1 @@\n-        var outAndPID =  ProcessTools.executeProcessPreservePID(pb);\n-        OutputAnalyzer output = outAndPID.output();\n+        OutputAnalyzer output = ProcessTools.executeProcess(pb);\n@@ -83,1 +82,1 @@\n-        String coreFileName = CoreUtils.getCoreFileLocation(output.getStdout(), outAndPID.pid());\n+        String coreFileName = CoreUtils.getCoreFileLocation(output.getStdout(), output.pid());\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestJmapCore.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -569,0 +569,9 @@\n+    \/**\n+     * Get the process' pid\n+     *\n+     * @return pid\n+     *\/\n+    public long pid() {\n+        return buffer.pid();\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/process\/OutputAnalyzer.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -72,0 +72,7 @@\n+  \/**\n+   * Returns the pid if available\n+   *\n+   * @return pid\n+   *\/\n+  public long pid();\n+\n@@ -160,0 +167,5 @@\n+\n+    @Override\n+    public long pid() {\n+      return p.pid();\n+    }\n@@ -187,0 +199,5 @@\n+\n+    @Override\n+    public long pid() {\n+      throw new RuntimeException(\"no process\");\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/process\/OutputBuffer.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -407,12 +407,0 @@\n-    \/**\n-     * Executes a process, waits for it to finish and returns the\n-     * process output and pid.  The process will have exited before\n-     * this method returns.\n-     *\n-     * @param pb The ProcessBuilder to execute.\n-     * @return The {@linkplain OutputAnalyzerAndPID} instance wrapping the process.\n-     *\/\n-    public static OutputAnalyzerAndPID executeProcessPreservePID(ProcessBuilder pb) throws Exception {\n-        return executeProcessPreservePID(pb, null);\n-    }\n-\n@@ -432,13 +420,0 @@\n-    \/**\n-     * Executes a process, pipe some text into its STDIN, waits for it\n-     * to finish and returns the process output and pid. The process\n-     * will have exited before this method returns.\n-     *\n-     * @param pb    The ProcessBuilder to execute.\n-     * @param input The text to pipe into STDIN. Can be null.\n-     * @return The {@linkplain OutputAnalyzerAndPID} instance wrapping the process.\n-     *\/\n-    public static OutputAnalyzerAndPID executeProcessPreservePID(ProcessBuilder pb, String input) throws Exception {\n-        return executeProcessPreservePID(pb, input, null);\n-    }\n-\n@@ -458,35 +433,0 @@\n-        return executeProcessPreservePID(pb, input, cs).output();\n-    }\n-\n-    static public class OutputAnalyzerAndPID {\n-        private OutputAnalyzer output;\n-        private long pid;\n-\n-        OutputAnalyzerAndPID(OutputAnalyzer output, long pid) {\n-            this.output = output;\n-            this.pid = pid;\n-        }\n-\n-        public OutputAnalyzer output() {\n-            return output;\n-        }\n-\n-        public long pid() {\n-            return pid;\n-        }\n-\n-    }\n-\n-    \/**\n-     * Executes a process, pipe some text into its STDIN, waits for it\n-     * to finish and returns the process output and pid. The process\n-     * will have exited before this method returns.\n-     *\n-     * @param pb    The ProcessBuilder to execute.\n-     * @param input The text to pipe into STDIN. Can be null.\n-     * @param cs    The charset used to convert from bytes to chars or null for\n-     *              the default charset.\n-     * @return The {@linkplain OutputAnalyzerAndPID} instance wrapping the process.\n-     *\/\n-    public static OutputAnalyzerAndPID executeProcessPreservePID(ProcessBuilder pb, String input,\n-                                                                 Charset cs) throws Exception {\n@@ -519,1 +459,1 @@\n-            return new OutputAnalyzerAndPID(output, p.pid());\n+            return output;\n@@ -547,13 +487,0 @@\n-    \/**\n-     * Executes a process, waits for it to finish and returns the\n-     * process outputa and pid.\n-     * <p>\n-     * The process will have exited before this method returns.\n-     *\n-     * @param cmds The command line to execute.\n-     * @return The output from the process.\n-     *\/\n-    public static OutputAnalyzerAndPID executeProcessPreservePID(String... cmds) throws Throwable {\n-        return executeProcessPreservePID(new ProcessBuilder(cmds));\n-    }\n-\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":1,"deletions":74,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-                                    OutputAnalyzer out = ProcessTools.executeProcess(\"coredumpctl\", \"dump\",  \"-1\",  \"-o\", core, Long.valueOf(pid).toString());\n+                                    OutputAnalyzer out = ProcessTools.executeProcess(\"coredumpctl\", \"dump\",  \"-1\",  \"-o\", core, String.valueOf(pid));\n","filename":"test\/lib\/jdk\/test\/lib\/util\/CoreUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}