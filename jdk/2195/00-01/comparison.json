{"files":[{"patch":"@@ -46,0 +46,1 @@\n+import jdk.test.lib.util.CoreUtils;\n@@ -158,1 +159,1 @@\n-                \/\/ CiReplayBase$TestMain needs to be quoted because shell eval\n+                \/\/ CiReplayBase$TestMain needs to be quoted because of shell eval\n@@ -161,2 +162,3 @@\n-                var outAndPID= ProcessTools.executeProcessPreservePID(getTestJvmCommandlineWithPrefix(\n-                        RUN_SHELL_NO_LIMIT, options.toArray(new String[0])));\n+                var outAndPID= ProcessTools.executeProcessPreservePID(\n+                        CoreUtils.addCoreUlimitCommand(\n+                                ProcessTools.createTestJvm(options.toArray(new String[0]))));\n@@ -179,10 +181,0 @@\n-            String coreFileLocation = getCoreFileLocation(crashOutputString, pid);\n-            if (coreFileLocation == null) {\n-                if (Platform.isOSX()) {\n-                    File coresDir = new File(\"\/cores\");\n-                    if (!coresDir.isDirectory() || !coresDir.canWrite()) {\n-                        return false;\n-                    }\n-                }\n-                throw new Error(\"Couldn't find core file location in: '\" + crashOutputString + \"'\");\n-            }\n@@ -190,1 +182,1 @@\n-                Asserts.assertGT(new File(coreFileLocation).length(), 0L, \"Unexpected core size\");\n+                String coreFileLocation = CoreUtils.getCoreFileLocation(crashOutputString);\n@@ -270,63 +262,0 @@\n-    \/\/ lets search few possible locations using process output and return existing location\n-    private String getCoreFileLocation(String crashOutputString, long pid) {\n-        Asserts.assertTrue(crashOutputString.contains(LOCATIONS_STRING),\n-                \"Output doesn't contain the location of core file, see crash.out\");\n-        String stringWithLocation = Arrays.stream(crashOutputString.split(\"\\\\r?\\\\n\"))\n-                .filter(str -> str.contains(LOCATIONS_STRING))\n-                .findFirst()\n-                .get();\n-        stringWithLocation = stringWithLocation.substring(stringWithLocation\n-                .indexOf(LOCATIONS_STRING) + LOCATIONS_STRING.length());\n-        String coreWithPid;\n-        if (stringWithLocation.contains(\"or \") && !Platform.isWindows()) {\n-            Matcher m = Pattern.compile(\"or.* ([^ ]+[^\\\\)])\\\\)?\").matcher(stringWithLocation);\n-            if (!m.find()) {\n-                throw new Error(\"Couldn't find path to core inside location string\");\n-            }\n-            coreWithPid = m.group(1);\n-        } else {\n-            coreWithPid = stringWithLocation.trim();\n-        }\n-\n-        if (new File(coreWithPid).exists()) {\n-            return coreWithPid;\n-        }\n-        String justCore = Paths.get(\"core\").toString();\n-        if (new File(justCore).exists()) {\n-            return justCore;\n-        }\n-        Path coreWithPidPath = Paths.get(coreWithPid);\n-        String justFile = coreWithPidPath.getFileName().toString();\n-        if (new File(justFile).exists()) {\n-            return justFile;\n-        }\n-        Path parent = coreWithPidPath.getParent();\n-        if (parent != null) {\n-            String coreWithoutPid = parent.resolve(\"core\").toString();\n-            if (new File(coreWithoutPid).exists()) {\n-                return coreWithoutPid;\n-            }\n-        }\n-        if (Platform.isLinux()) {\n-            \/\/ Maybe a systemd linux system. Try to retrieve core\n-            \/\/ file. It can take a few seconds for the system to\n-            \/\/ process the just produced core file so we may need to\n-            \/\/ retry a few times.\n-            try {\n-                for (int i = 0; i < 10; i++) {\n-                    Thread.sleep(5000);\n-                    OutputAnalyzer out = ProcessTools.executeProcess(\"coredumpctl\", \"dump\",  \"-1\",  \"-o\", coreWithPid, Long.valueOf(pid).toString());\n-                    if (!out.getOutput().contains(\"output may be incomplete\")) {\n-                        break;\n-                    }\n-                }\n-            } catch(Throwable t) {\n-            }\n-            if (new File(coreWithPid).exists()) {\n-                return coreWithPid;\n-            }\n-        }\n-\n-        return null;\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/CiReplayBase.java","additions":6,"deletions":77,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-    public static String getCoreFileLocation(String crashOutputString) throws IOException {\n+    public static String getCoreFileLocation(String crashOutputString, long pid) throws IOException {\n@@ -155,0 +155,24 @@\n+                        if (line.split(\"\\s\", 2)[0].endsWith(\"systemd-coredump\")) {\n+                            \/\/ A systemd linux system. Try to retrieve core\n+                            \/\/ file. It can take a few seconds for the system to\n+                            \/\/ process the just produced core file so we may need to\n+                            \/\/ retry a few times.\n+                            System.out.println(\"Running systemd-coredump: trying coredumpctl command\");\n+                            String core = \"core\";\n+                            try {\n+                                for (int i = 0; i < 10; i++) {\n+                                    Thread.sleep(5000);\n+                                    OutputAnalyzer out = ProcessTools.executeProcess(\"coredumpctl\", \"dump\",  \"-1\",  \"-o\", core, Long.valueOf(pid).toString());\n+                                    if (!out.getOutput().contains(\"output may be incomplete\")) {\n+                                        break;\n+                                    }\n+                                }\n+                            } catch(Throwable t) {\n+                            }\n+                            final File coreFile = new File(core);\n+                            if (coreFile.exists()) {\n+                                Asserts.assertGT(coreFile.length(), 0L, \"Unexpected core size\");\n+                                System.out.println(\"coredumpctl succeeded\");\n+                                return core;\n+                            }\n+                        }\n@@ -167,0 +191,4 @@\n+    public static String getCoreFileLocation(String crashOutputString) throws IOException {\n+        return getCoreFileLocation(crashOutputString, -1);\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/util\/CoreUtils.java","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"}]}