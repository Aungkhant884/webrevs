{"files":[{"patch":"@@ -1460,7 +1460,7 @@\n-  const int flag_source_str_is_null_terminated = -1;\n-  const int flag_estimate_chars_count = 0;\n-  int utf16_chars_count_estimated = MultiByteToWideChar(source_encoding,\n-                                                        MB_ERR_INVALID_CHARS,\n-                                                        source_str, flag_source_str_is_null_terminated,\n-                                                        NULL, flag_estimate_chars_count);\n-  if (utf16_chars_count_estimated == 0) {\n+  const int len_estimated = MultiByteToWideChar(source_encoding,\n+                                                MB_ERR_INVALID_CHARS,\n+                                                source_str,\n+                                                -1, \/\/ source is null-terminated\n+                                                NULL,\n+                                                0); \/\/ estimate characters count\n+  if (len_estimated == 0) {\n@@ -1472,1 +1472,1 @@\n-  *dest_utf16_str = NEW_C_HEAP_ARRAY(WCHAR, utf16_chars_count_estimated, mtInternal);\n+  *dest_utf16_str = NEW_C_HEAP_ARRAY(WCHAR, len_estimated, mtInternal);\n@@ -1474,5 +1474,6 @@\n-  int utf16_chars_count_real = MultiByteToWideChar(source_encoding,\n-                                                   MB_ERR_INVALID_CHARS,\n-                                                   source_str, flag_source_str_is_null_terminated,\n-                                                   *dest_utf16_str, utf16_chars_count_estimated);\n-  assert(utf16_chars_count_real == utf16_chars_count_estimated, \"length already checked above\");\n+  const int len_real = MultiByteToWideChar(source_encoding,\n+                                           MB_ERR_INVALID_CHARS,\n+                                           source_str,\n+                                           -1, \/\/ source is null-terminated\n+                                           *dest_utf16_str, len_estimated);\n+  assert(len_real == len_estimated, \"length already checked above\");\n@@ -1496,7 +1497,8 @@\n-  const int flag_source_str_is_null_terminated = -1;\n-  const int flag_estimate_chars_count = 0;\n-  int chars_count_estimated = WideCharToMultiByte(CP_ACP,\n-                                                  0,\n-                                                  source_utf16_str, flag_source_str_is_null_terminated,\n-                                                  NULL, flag_estimate_chars_count, NULL, NULL);\n-  if (chars_count_estimated == 0) {\n+  const int len_estimated = WideCharToMultiByte(CP_ACP,\n+                                                0,\n+                                                source_utf16_str,\n+                                                -1, \/\/ source is null-terminated\n+                                                NULL,\n+                                                0, \/\/ estimate characters count\n+                                                NULL, NULL);\n+  if (len_estimated == 0) {\n@@ -1507,1 +1509,1 @@\n-  dest_str = NEW_C_HEAP_ARRAY(CHAR, chars_count_estimated, mtInternal);\n+  dest_str = NEW_C_HEAP_ARRAY(CHAR, len_estimated, mtInternal);\n@@ -1509,5 +1511,6 @@\n-  int chars_count_real = WideCharToMultiByte(CP_ACP,\n-                                             0,\n-                                             source_utf16_str, flag_source_str_is_null_terminated,\n-                                             dest_str, chars_count_estimated, NULL, NULL);\n-  assert(chars_count_real == chars_count_estimated, \"length already checked above\");\n+  const int len_real = WideCharToMultiByte(CP_ACP,\n+                                           0,\n+                                           source_utf16_str,\n+                                           -1, \/\/ source is null-terminated\n+                                           dest_str, len_estimated, NULL, NULL);\n+  assert(len_real == len_estimated, \"length already checked above\");\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":29,"deletions":26,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -38,0 +38,4 @@\n+    private static String toPlatformLibraryName(String name) {\n+        return (Platform.isWindows() ? \"\" : \"lib\") + name + \".\" + Platform.sharedLibraryExt();\n+    }\n+\n@@ -39,10 +43,1 @@\n-        String osDependentLibraryFileName = null;\n-        if (Platform.isLinux()) {\n-            osDependentLibraryFileName = \"libLoadLibraryUnicode.so\";\n-        } else if (Platform.isOSX()) {\n-            osDependentLibraryFileName = \"libLoadLibraryUnicode.dylib\";\n-        } else if (Platform.isWindows()) {\n-            osDependentLibraryFileName = \"LoadLibraryUnicode.dll\";\n-        } else {\n-            throw new Error(\"Unsupported OS\");\n-        }\n+        final String osDependentLibraryFileName = toPlatformLibraryName(\"LoadLibraryUnicode\");\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/loadLibraryUnicode\/LoadLibraryUnicode.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"}]}