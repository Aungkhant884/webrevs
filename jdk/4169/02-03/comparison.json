{"files":[{"patch":"@@ -126,8 +126,3 @@\n-    const int utf8_len    = (*env)->GetStringUTFLength(env, name);\n-    const int chars_count = (*env)->GetStringLength(env, name);\n-    char * utf8_name = malloc(utf8_len + 1);\n-    if (utf8_name == NULL) {\n-      JNU_ThrowOutOfMemoryError(env, NULL);\n-      return JNI_FALSE;\n-    }\n-    (*env)->GetStringUTFRegion(env, name, 0, chars_count, utf8_name);\n+    const char * utf8_name = GetStringUTF8Chars(env, name);\n+    if (utf8_name == NULL)\n+            return JNI_FALSE;\n@@ -186,1 +181,1 @@\n-    free(utf8_name);\n+    ReleaseStringUTF8Chars(env, name, utf8_name);\n","filename":"src\/java.base\/share\/native\/libjava\/NativeLibraries.c","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -633,0 +633,1 @@\n+static jstring utf8Encoding = NULL;     \/* Java String \"UTF-8\" *\/\n@@ -642,1 +643,0 @@\n-static jboolean isJNUEncodingSupported = JNI_FALSE;\n@@ -644,0 +644,1 @@\n+    static jboolean isJNUEncodingSupported = JNI_FALSE;\n@@ -657,0 +658,24 @@\n+\/* Tests true if encoding by the name of \"UTF-8\" is supported by java.nio *\/\n+static jboolean utf8EncodingSupported(JNIEnv *env) {\n+    if (utf8Encoding == NULL) { \/\/ Cache jstring \"UTF-8\"\n+        jstring utf8Str = (*env)->NewStringUTF(env, \"UTF-8\");\n+        if (utf8Str == NULL) {\n+            return JNI_FALSE;\n+        }\n+        utf8Encoding = (jstring)(*env)->NewGlobalRef(env, utf8Str);\n+        (*env)->DeleteLocalRef(env, utf8Str);\n+    }\n+    static jboolean isUTF8EncodingSupported = JNI_FALSE;\n+    if (isUTF8EncodingSupported == JNI_TRUE) {\n+        return JNI_TRUE;\n+    }\n+    jboolean sawException;\n+    isUTF8EncodingSupported = (jboolean) JNU_CallStaticMethodByName (\n+            env, &sawException,\n+            \"java\/nio\/charset\/Charset\",\n+            \"isSupported\",\n+            \"(Ljava\/lang\/String;)Z\",\n+            utf8Encoding).z;\n+    return isUTF8EncodingSupported;\n+}\n+\n@@ -818,1 +843,5 @@\n-static const char* getStringBytes(JNIEnv *env, jstring jstr) {\n+\/* Convert the given Java string into a null-terminated byte sequence according\n+ * to the platform encoding (if needUTF8 is false) or to UTF-8 encoding (if\n+ * needUTF8 is true).\n+ *\/\n+static const char* getStringBytes(JNIEnv *env, jstring jstr, jboolean needUTF8) {\n@@ -825,1 +854,3 @@\n-    if (jnuEncodingSupported(env)) {\n+    if (needUTF8 && utf8EncodingSupported(env)) {\n+      hab = (*env)->CallObjectMethod(env, jstr, String_getBytes_ID, utf8Encoding);\n+    } else if (!needUTF8 && jnuEncodingSupported(env)) {\n@@ -866,1 +897,2 @@\n-        return getStringBytes(env, jstr);\n+        const jboolean forceUTF8 = (fastEncoding != FAST_UTF_8);\n+        return getStringBytes(env, jstr, forceUTF8);\n@@ -909,0 +941,12 @@\n+JNIEXPORT const char * JNICALL\n+GetStringUTF8Chars(JNIEnv *env, jstring jstr)\n+{\n+    return getStringUTF8(env, jstr);\n+}\n+\n+JNIEXPORT void\n+ReleaseStringUTF8Chars(JNIEnv* env, jstring jstr, const char *str)\n+{\n+    free((void *)str);\n+}\n+\n@@ -928,1 +972,1 @@\n-        return getStringBytes(env, jstr);\n+        return getStringBytes(env, jstr, JNI_FALSE \/* Need platform encoding *\/);\n","filename":"src\/java.base\/share\/native\/libjava\/jni_util.c","additions":49,"deletions":5,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -99,0 +99,7 @@\n+\/* Convert the Java string to UTF-8 (not \"modified UTF-8\") *\/\n+JNIEXPORT const char *\n+GetStringUTF8Chars(JNIEnv *env, jstring jstr);\n+\n+JNIEXPORT void\n+ReleaseStringUTF8Chars(JNIEnv* env, jstring jstr, const char *str);\n+\n","filename":"src\/java.base\/share\/native\/libjava\/jni_util.h","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -40,0 +40,5 @@\n+        if (!java.nio.charset.Charset.isSupported(\"UTF-8\")) {\n+            System.out.println(\"Test requires UTF-8 support; will not run and is considered passed.\");\n+            return;\n+        }\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/loadLibraryUnicode\/LoadLibraryUnicodeTest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}