{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.nio.ReadOnlyBufferException;\n@@ -187,0 +188,3 @@\n+        if (target.isReadOnly())\n+            throw new ReadOnlyBufferException();\n+\n@@ -201,0 +205,2 @@\n+            \/\/ If a read-only check had not been done above, then\n+            \/\/ the stream would be incorrectly advanced here.\n","filename":"src\/java.base\/share\/classes\/java\/io\/Reader.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.ReadOnlyBufferException;\n+\n+\/*\n+ * @test\n+ * @bug 8266078\n+ * @summary Tests that attempting to read into a read-only CharBuffer\n+ *          does not advance the Reader position\n+ * @run main ReadIntoReadOnlyBuffer\n+ *\/\n+public class ReadIntoReadOnlyBuffer {\n+    private static final String THE_STRING = \"123\";\n+    public static void main(String[] args) throws Exception {\n+        CharBuffer buf = CharBuffer.allocate(8).asReadOnlyBuffer();\n+        StringReader r = new StringReader(THE_STRING);\n+        read(r, buf);\n+        buf = ByteBuffer.allocateDirect(16).asCharBuffer().asReadOnlyBuffer();\n+        r = new StringReader(THE_STRING);\n+        read(r, buf);\n+    }\n+\n+    private static void read(Reader r, CharBuffer b) throws IOException {\n+        try {\n+            r.read(b);\n+            throw new RuntimeException(\"ReadOnlyBufferException expected\");\n+        } catch (ReadOnlyBufferException expected) {\n+        }\n+\n+        char[] c = new char[3];\n+        int n = r.read(c);\n+        if (n != c.length) {\n+            throw new RuntimeException(\"Expected \" + c.length + \", got \" + n);\n+        }\n+\n+        String s = new String(c);\n+        if (!s.equals(THE_STRING)) {\n+            throw new RuntimeException(\"Expected \" + THE_STRING + \", got \" + s);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/Reader\/ReadIntoReadOnlyBuffer.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"}]}