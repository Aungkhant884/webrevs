{"files":[{"patch":"@@ -98,1 +98,1 @@\n-DISABLED_WARNINGS_microsoft := 4100 4127 4201 4244 4291 4351 \\\n+DISABLED_WARNINGS_microsoft := 4100 4127 4146 4201 4244 4291 4351 \\\n","filename":"make\/hotspot\/lib\/CompileJvm.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -220,1 +220,1 @@\n-    guarantee(val < (1U << nbits), \"Field too big for insn\");\n+    guarantee(val < (1ULL << nbits), \"Field too big for insn\");\n@@ -448,2 +448,2 @@\n-    guarantee((_mode == base_plus_offset | _mode == base_plus_offset_reg\n-               | _mode == post | _mode == post_reg),\n+    guarantee((_mode == base_plus_offset || _mode == base_plus_offset_reg\n+               || _mode == post || _mode == post_reg),\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -665,5 +665,6 @@\n-#define DESCRIBE_FP_OFFSET(name)                                        \\\n-  {                                                                     \\\n-    uintptr_t *p = (uintptr_t *)fp;                                     \\\n-    printf(\"0x%016lx 0x%016lx %s\\n\", (uintptr_t)(p + frame::name##_offset), \\\n-           p[frame::name##_offset], #name);                             \\\n+#define DESCRIBE_FP_OFFSET(name)                     \\\n+  {                                                  \\\n+    uintptr_t *p = (uintptr_t *)fp;                  \\\n+    printf(INTPTR_FORMAT \" \" INTPTR_FORMAT \" %s\\n\",  \\\n+           (uintptr_t)(p + frame::name##_offset),    \\\n+           p[frame::name##_offset], #name);          \\\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1831,1 +1831,1 @@\n-    const unsigned mask = size_in_bytes - 1;\n+    const uint64_t mask = size_in_bytes - 1;\n@@ -2895,1 +2895,1 @@\n-  const int sz = prev_ldst->size_in_bytes();\n+  const size_t sz = prev_ldst->size_in_bytes();\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -658,1 +658,1 @@\n-  size_t size_in_bytes() { return 1 << size(); }\n+  size_t size_in_bytes() { return 1ULL << size(); }\n","filename":"src\/hotspot\/cpu\/aarch64\/nativeInst_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1528,1 +1528,2 @@\n-    __ bang_stack_with_offset(StackOverflow::stack_shadow_zone_size());\n+    assert(StackOverflow::stack_shadow_zone_size() == (int)StackOverflow::stack_shadow_zone_size(), \"must be same\");\n+    __ bang_stack_with_offset((int)StackOverflow::stack_shadow_zone_size());\n@@ -2482,1 +2483,1 @@\n-  __ mov(rscratch1, (address)0xDEADDEAD);        \/\/ Make a recognizable pattern\n+  __ mov(rscratch1, (uint64_t)0xDEADDEAD);        \/\/ Make a recognizable pattern\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1308,1 +1308,1 @@\n-  void verify_oop_array (size_t size, Register a, Register count, Register temp) {\n+  void verify_oop_array (int size, Register a, Register count, Register temp) {\n@@ -1315,1 +1315,1 @@\n-    if (size == (size_t)wordSize) {\n+    if (size == wordSize) {\n@@ -1346,1 +1346,1 @@\n-  address generate_disjoint_copy(size_t size, bool aligned, bool is_oop, address *entry,\n+  address generate_disjoint_copy(int size, bool aligned, bool is_oop, address *entry,\n@@ -1412,1 +1412,1 @@\n-  address generate_conjoint_copy(size_t size, bool aligned, bool is_oop, address nooverlap_target,\n+  address generate_conjoint_copy(int size, bool aligned, bool is_oop, address nooverlap_target,\n@@ -1663,1 +1663,1 @@\n-    const size_t size = UseCompressedOops ? sizeof (jint) : sizeof (jlong);\n+    const int size = UseCompressedOops ? sizeof (jint) : sizeof (jlong);\n@@ -1681,1 +1681,1 @@\n-    const size_t size = UseCompressedOops ? sizeof (jint) : sizeof (jlong);\n+    const int size = UseCompressedOops ? sizeof (jint) : sizeof (jlong);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1123,1 +1123,1 @@\n-    const int n_shadow_pages = StackOverflow::stack_shadow_zone_size() \/ os::vm_page_size();\n+    const int n_shadow_pages = (int)(StackOverflow::stack_shadow_zone_size() \/ os::vm_page_size());\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}