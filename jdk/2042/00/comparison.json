{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1404,0 +1404,29 @@\n+    private String checkWeakKey(PublicKey key) {\n+        int kLen = KeyUtil.getKeySize(key);\n+        if (DISABLED_CHECK.permits(SIG_PRIMITIVE_SET, key)) {\n+            if (LEGACY_CHECK.permits(SIG_PRIMITIVE_SET, key)) {\n+                if (kLen >= 0) {\n+                    return String.format(rb.getString(\"key.bit\"), kLen);\n+                } else {\n+                    return rb.getString(\"unknown.size\");\n+                }\n+            } else {\n+                return String.format(rb.getString(\"key.bit.weak\"), kLen);\n+            }\n+        } else {\n+           return String.format(rb.getString(\"key.bit.disabled\"), kLen);\n+        }\n+    }\n+\n+    private String checkWeakAlg(String alg) {\n+        if (DISABLED_CHECK.permits(SIG_PRIMITIVE_SET, alg, null)) {\n+            if (LEGACY_CHECK.permits(SIG_PRIMITIVE_SET, alg, null)) {\n+                return alg;\n+            } else {\n+                return String.format(rb.getString(\"with.weak\"), alg);\n+            }\n+        } else {\n+            return String.format(rb.getString(\"with.disabled\"), alg);\n+        }\n+    }\n+\n@@ -1447,0 +1476,10 @@\n+            PublicKey key = x509Cert.getPublicKey();\n+            String sigalg = x509Cert.getSigAlgName();\n+\n+            \/\/ process the certificate in the signer's cert chain to see if\n+            \/\/ weak algorithms are used, and provide warnings as needed.\n+            certStr.append(\"\\n\").append(tab)\n+                    .append(\"Signature algorithm: \")\n+                    .append(checkWeakAlg(sigalg))\n+                    .append(rb.getString(\"COMMA\"))\n+                    .append(checkWeakKey(key));\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8259401\n+ * @summary Check certificates in signer's cert chain to see if warning emitted\n+ * @library \/test\/lib\n+ *\/\n+\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.util.JarUtils;\n+\n+import java.nio.file.Path;\n+\n+public class CheckSignerCertChain {\n+\n+    static OutputAnalyzer kt(String cmd, String ks) throws Exception {\n+        return SecurityTools.keytool(\"-storepass changeit \" + cmd +\n+                \" -keystore \" + ks);\n+    }\n+\n+    static void gencert(String owner, String cmd) throws Exception {\n+        kt(\"-certreq -alias \" + owner + \" -file tmp.req\", \"ks\");\n+        kt(\"-gencert -infile tmp.req -outfile tmp.cert \" + cmd, \"ks\");\n+        kt(\"-importcert -alias \" + owner + \" -file tmp.cert\", \"ks\");\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ root certificate using SHA1withRSA and 1024-bit key\n+        kt(\"-genkeypair -keyalg rsa -alias ca -dname CN=CA -ext bc:c \" +\n+                \"-keysize 1024 -sigalg SHA1withRSA\", \"ks\");\n+        kt(\"-genkeypair -keyalg rsa -alias ca1 -dname CN=CA1\", \"ks\");\n+        kt(\"-genkeypair -keyalg rsa -alias e1 -dname CN=E1\", \"ks\");\n+\n+        \/\/ intermediate certificate SHA1withRSA and 2048-bit key\n+        gencert(\"ca1\", \"-alias ca -ext san=dns:ca1 -ext bc:c \" +\n+                \"-sigalg SHA1withRSA \");\n+\n+        \/\/ end entity certificate using SHA256withRSA and 2048-bit key\n+        gencert(\"e1\", \"-alias ca1 -ext san=dns:e1 \");\n+\n+        JarUtils.createJarFile(Path.of(\"a.jar\"), Path.of(\".\"), Path.of(\"ks\"));\n+\n+        SecurityTools.jarsigner(\"-keystore ks -storepass changeit \" +\n+                \"-signedjar signeda.jar \" +\n+                \"-sigalg SHA256withRSA \" +\n+                \"-verbose\" +\n+                \" a.jar e1\")\n+                .shouldContain(\"Signature algorithm: SHA1withRSA (weak), 2048-bit key\")\n+                .shouldContain(\"Signature algorithm: SHA1withRSA (weak), 1024-bit key (weak)\")\n+                .shouldHaveExitValue(0);\n+\n+        kt(\"-exportcert -alias ca -rfc -file cacert\", \"ks\");\n+        kt(\"-importcert -noprompt -file cacert\", \"caks\");\n+\n+        SecurityTools.jarsigner(\"-verify -certs signeda.jar \" +\n+                \"-keystore caks -storepass changeit -verbose -debug\")\n+                .shouldContain(\"Signature algorithm: SHA1withRSA (weak), 2048-bit key\")\n+                .shouldContain(\"Signature algorithm: SHA1withRSA (weak), 1024-bit key (weak)\")\n+                .shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/CheckSignerCertChain.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"}]}