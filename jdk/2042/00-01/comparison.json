{"files":[{"patch":"@@ -1404,1 +1404,1 @@\n-    private String checkWeakKey(PublicKey key) {\n+    private static String checkWeakKey(PublicKey key) {\n@@ -1421,1 +1421,1 @@\n-    private String checkWeakAlg(String alg) {\n+    private static String checkWeakAlg(String alg) {\n@@ -1479,1 +1479,1 @@\n-            \/\/ process the certificate in the signer's cert chain to see if\n+            \/\/ Process the certificate in the signer's cert chain to see if\n@@ -1481,8 +1481,0 @@\n-            certStr.append(\"\\n\").append(tab)\n-                    .append(\"Signature algorithm: \")\n-                    .append(checkWeakAlg(sigalg))\n-                    .append(rb.getString(\"COMMA\"))\n-                    .append(checkWeakKey(key));\n-\n-            certStr.append(\"\\n\").append(tab).append(\"[\");\n-\n@@ -1490,0 +1482,10 @@\n+                \/\/ If the cert is trusted, only check its key size, but not its\n+                \/\/ signature algorithm. This is because warning should not be\n+                \/\/ generated for SHA-1 roots which are not an issue.\n+                certStr.append(\"\\n\").append(tab)\n+                        .append(\"Signature algorithm: \")\n+                        .append(sigalg)\n+                        .append(rb.getString(\"COMMA\"))\n+                        .append(checkWeakKey(key));\n+\n+                certStr.append(\"\\n\").append(tab).append(\"[\");\n@@ -1492,0 +1494,8 @@\n+                certStr.append(\"\\n\").append(tab)\n+                        .append(\"Signature algorithm: \")\n+                        .append(checkWeakAlg(sigalg))\n+                        .append(rb.getString(\"COMMA\"))\n+                        .append(checkWeakKey(key));\n+\n+                certStr.append(\"\\n\").append(tab).append(\"[\");\n+\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+        System.out.println(\"Generating a root cert using SHA1withRSA and 1024-bit key\");\n@@ -58,1 +59,2 @@\n-        \/\/ intermediate certificate SHA1withRSA and 2048-bit key\n+        \/\/ intermediate certificate using SHA1withRSA and 2048-bit key\n+        System.out.println(\"Generating an intermediate cert using SHA1withRSA and 2048-bit key\");\n@@ -63,0 +65,1 @@\n+        System.out.println(\"Generating an end entity cert using SHA256withRSA and 2048-bit key\");\n@@ -73,1 +76,3 @@\n-                .shouldContain(\"Signature algorithm: SHA1withRSA (weak), 1024-bit key (weak)\")\n+                \/\/ For trusted cert, warning should be generated for its weak 1024-bit\n+                \/\/ key, but not for its SHA1withRSA algorithm.\n+                .shouldContain(\"Signature algorithm: SHA1withRSA, 1024-bit key (weak)\")\n@@ -82,1 +87,3 @@\n-                .shouldContain(\"Signature algorithm: SHA1withRSA (weak), 1024-bit key (weak)\")\n+                \/\/ For trusted cert, warning should be generated for its weak 1024-bit\n+                \/\/ key, but not for its SHA1withRSA algorithm.\n+                .shouldContain(\"Signature algorithm: SHA1withRSA, 1024-bit key (weak)\")\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/CheckSignerCertChain.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"}]}