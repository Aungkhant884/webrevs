{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-  if (ptr == NULL && size != 0) {\n+  if (ptr == nullptr && size != 0) {\n@@ -39,1 +39,1 @@\n-  if (ptr == NULL && size != 0) {\n+  if (ptr == nullptr && size != 0) {\n@@ -56,1 +56,1 @@\n-  _next = NULL;         \/\/ Chain on the linked list\n+  _next = nullptr;      \/\/ Chain on the linked list\n@@ -74,1 +74,1 @@\n-  _next = NULL;\n+  _next = nullptr;\n@@ -167,2 +167,2 @@\n-  _first = _chunk = NULL;       \/\/ Normal, new-arena initialization\n-  _hwm = _max = NULL;\n+  _first = _chunk = nullptr;    \/\/ Normal, new-arena initialization\n+  _hwm = _max = nullptr;\n","filename":"src\/hotspot\/share\/adlc\/adlArena.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-  _curline         = _ptr = NULL;            \/\/ No pointers into buffer yet\n+  _curline         = _ptr = nullptr;            \/\/ No pointers into buffer yet\n@@ -93,1 +93,1 @@\n-  for( next_line(); _curline != NULL; next_line()) {\n+  for( next_line(); _curline != nullptr; next_line()) {\n@@ -97,1 +97,1 @@\n-    if (ident == NULL) {         \/\/ Empty line\n+    if (ident == nullptr) {         \/\/ Empty line\n@@ -122,1 +122,1 @@\n-  if (regBlock == NULL) {\n+  if (regBlock == nullptr) {\n@@ -135,1 +135,1 @@\n-  if (_globalNames[AttributeForm::_ins_cost] == NULL) {\n+  if (_globalNames[AttributeForm::_ins_cost] == nullptr) {\n@@ -138,1 +138,1 @@\n-  if (_globalNames[AttributeForm::_op_cost] == NULL) {\n+  if (_globalNames[AttributeForm::_op_cost] == nullptr) {\n@@ -154,1 +154,1 @@\n-  if( (ident = get_unique_ident(_globalNames,\"instruction\")) == NULL )\n+  if( (ident = get_unique_ident(_globalNames,\"instruction\")) == nullptr )\n@@ -180,1 +180,1 @@\n-    if (ident == NULL) {\n+    if (ident == nullptr) {\n@@ -188,1 +188,1 @@\n-      if (rule == NULL) {\n+      if (rule == nullptr) {\n@@ -203,1 +203,1 @@\n-        while (rule->_next != NULL)\n+        while (rule->_next != nullptr)\n@@ -248,1 +248,1 @@\n-      AttributeForm *attr = form ? form->is_attribute() : NULL;\n+      AttributeForm *attr = form ? form->is_attribute() : nullptr;\n@@ -286,1 +286,1 @@\n-  if (rule != NULL) {\n+  if (rule != nullptr) {\n@@ -288,1 +288,1 @@\n-    while (rule != NULL) {\n+    while (rule != nullptr) {\n@@ -300,1 +300,1 @@\n-      clone->_matrule->_next = NULL; \/\/ One match rule per clone\n+      clone->_matrule->_next = nullptr; \/\/ One match rule per clone\n@@ -321,1 +321,1 @@\n-  if (instr->_matrule == NULL || instr->_matrule->_rChild == NULL) return;\n+  if (instr->_matrule == nullptr || instr->_matrule->_rChild == nullptr) return;\n@@ -328,3 +328,3 @@\n-    const char *result   = NULL;\n-    const char *name     = NULL;\n-    const char *optype   = NULL;\n+    const char *result   = nullptr;\n+    const char *name     = nullptr;\n+    const char *optype   = nullptr;\n@@ -334,3 +334,3 @@\n-      const char *result2  = NULL;\n-      const char *name2    = NULL;\n-      const char *optype2  = NULL;\n+      const char *result2  = nullptr;\n+      const char *name2    = nullptr;\n+      const char *optype2  = nullptr;\n@@ -339,1 +339,1 @@\n-        if (instr->_predicate != NULL)\n+        if (instr->_predicate != nullptr)\n@@ -344,1 +344,1 @@\n-        if (lst == NULL) {\n+        if (lst == nullptr) {\n@@ -350,1 +350,1 @@\n-          if (cost == NULL) {\n+          if (cost == nullptr) {\n@@ -355,1 +355,1 @@\n-          if( frm->is_operand() == NULL || frm->is_operand()->_predicate == NULL ) {\n+          if( frm->is_operand() == nullptr || frm->is_operand()->_predicate == nullptr ) {\n@@ -361,1 +361,1 @@\n-        if (lst == NULL) {\n+        if (lst == nullptr) {\n@@ -367,1 +367,1 @@\n-          if (cost == NULL) {\n+          if (cost == nullptr) {\n@@ -381,1 +381,1 @@\n-            const char *chain_op = NULL;\n+            const char *chain_op = nullptr;\n@@ -387,1 +387,1 @@\n-              if (lst == NULL) {\n+              if (lst == nullptr) {\n@@ -393,1 +393,1 @@\n-              if (cost == NULL) {\n+              if (cost == nullptr) {\n@@ -418,1 +418,1 @@\n-  if( (ident = get_unique_ident(_globalNames,\"operand\")) == NULL )\n+  if( (ident = get_unique_ident(_globalNames,\"operand\")) == nullptr )\n@@ -443,1 +443,1 @@\n-    if (ident == NULL) {\n+    if (ident == nullptr) {\n@@ -488,1 +488,1 @@\n-    else if (((attr = _globalNames[ident]->is_attribute()) != NULL) &&\n+    else if (((attr = _globalNames[ident]->is_attribute()) != nullptr) &&\n@@ -513,1 +513,1 @@\n-  if( (ident = get_unique_ident(_globalNames,\"opclass\")) == NULL )\n+  if( (ident = get_unique_ident(_globalNames,\"opclass\")) == nullptr )\n@@ -531,1 +531,1 @@\n-    if (ident == NULL) {\n+    if (ident == nullptr) {\n@@ -537,1 +537,1 @@\n-    opForm     = form ? form->is_operand() : NULL;\n+    opForm     = form ? form->is_operand() : nullptr;\n@@ -572,1 +572,1 @@\n-  if( (ident = get_unique_ident(_globalNames,\"inst_attrib\")) == NULL )\n+  if( (ident = get_unique_ident(_globalNames,\"inst_attrib\")) == nullptr )\n@@ -579,1 +579,1 @@\n-  if ((aexpr = get_paren_expr(\"attribute default expression string\")) == NULL) {\n+  if ((aexpr = get_paren_expr(\"attribute default expression string\")) == nullptr) {\n@@ -607,1 +607,1 @@\n-  if( (ident = get_unique_ident(_globalNames,\"op_attrib\")) == NULL )\n+  if( (ident = get_unique_ident(_globalNames,\"op_attrib\")) == nullptr )\n@@ -614,1 +614,1 @@\n-  if ((aexpr = get_paren_expr(\"attribute default expression string\")) == NULL) {\n+  if ((aexpr = get_paren_expr(\"attribute default expression string\")) == nullptr) {\n@@ -643,1 +643,1 @@\n-      if (token == NULL) {\n+      if (token == nullptr) {\n@@ -664,2 +664,2 @@\n-  char *name        = NULL;         \/\/ Name of definition\n-  char *value       = NULL;         \/\/ its value,\n+  char *name        = nullptr;         \/\/ Name of definition\n+  char *value       = nullptr;         \/\/ its value,\n@@ -667,1 +667,1 @@\n-  char *description = NULL;         \/\/ textual description\n+  char *description = nullptr;         \/\/ textual description\n@@ -672,1 +672,1 @@\n-  if (name == NULL) {\n+  if (name == nullptr) {\n@@ -684,1 +684,1 @@\n-    if (value == NULL) {\n+    if (value == nullptr) {\n@@ -699,1 +699,1 @@\n-      if (description == NULL) {\n+      if (description == nullptr) {\n@@ -730,1 +730,1 @@\n-  if (old_expr != NULL) {\n+  if (old_expr != nullptr) {\n@@ -742,1 +742,1 @@\n-  char   *rule = NULL;            \/\/ String representation of encode rule\n+  char   *rule = nullptr;            \/\/ String representation of encode rule\n@@ -745,1 +745,1 @@\n-  if ( (rule = find_cpp_block(\"source block\")) == NULL ) {\n+  if ( (rule = find_cpp_block(\"source block\")) == nullptr ) {\n@@ -765,1 +765,1 @@\n-  char   *rule = NULL;            \/\/ String representation of encode rule\n+  char   *rule = nullptr;            \/\/ String representation of encode rule\n@@ -768,1 +768,1 @@\n-  if ( (rule = find_cpp_block(\"source_hpp block\")) == NULL ) {\n+  if ( (rule = find_cpp_block(\"source_hpp block\")) == nullptr ) {\n@@ -775,1 +775,1 @@\n-  if (_AD.get_registers() == NULL) {\n+  if (_AD.get_registers() == nullptr) {\n@@ -789,1 +789,1 @@\n-  if (regBlock == NULL) {\n+  if (regBlock == nullptr) {\n@@ -801,1 +801,1 @@\n-      if (token == NULL) {\n+      if (token == nullptr) {\n@@ -825,1 +825,1 @@\n-  if ( encBlock == NULL) {\n+  if ( encBlock == nullptr) {\n@@ -837,1 +837,1 @@\n-      if (token == NULL) {\n+      if (token == nullptr) {\n@@ -858,1 +858,1 @@\n-  if (ec_name == NULL) {\n+  if (ec_name == nullptr) {\n@@ -870,2 +870,2 @@\n-      char *pType = NULL;        \/\/ parameter type\n-      char *pName = NULL;        \/\/ parameter name\n+      char *pType = nullptr;     \/\/ parameter type\n+      char *pName = nullptr;     \/\/ parameter name\n@@ -879,1 +879,1 @@\n-      if (pType == NULL) {\n+      if (pType == nullptr) {\n@@ -887,1 +887,1 @@\n-      if (pName == NULL) {\n+      if (pName == nullptr) {\n@@ -973,1 +973,1 @@\n-  char       *desc = NULL;        \/\/ String representation of frame\n+  char       *desc = nullptr;     \/\/ String representation of frame\n@@ -985,1 +985,1 @@\n-      if (token == NULL) {\n+      if (token == nullptr) {\n@@ -1062,1 +1062,1 @@\n-  if(frame->_frame_pointer == NULL) {\n+  if(frame->_frame_pointer == nullptr) {\n@@ -1067,1 +1067,1 @@\n-  \/\/ if(frame->_interpreter_frame_ptr_reg == NULL) {\n+  \/\/ if(frame->_interpreter_frame_ptr_reg == nullptr) {\n@@ -1071,1 +1071,1 @@\n-  if(frame->_alignment == NULL) {\n+  if(frame->_alignment == nullptr) {\n@@ -1075,1 +1075,1 @@\n-  if(frame->_return_addr == NULL) {\n+  if(frame->_return_addr == nullptr) {\n@@ -1079,1 +1079,1 @@\n-  if(frame->_varargs_C_out_slots_killed == NULL) {\n+  if(frame->_varargs_C_out_slots_killed == nullptr) {\n@@ -1083,1 +1083,1 @@\n-  if(frame->_return_value == NULL) {\n+  if(frame->_return_value == nullptr) {\n@@ -1088,1 +1088,1 @@\n-  if(frame->_c_frame_pointer == NULL) {\n+  if(frame->_c_frame_pointer == nullptr) {\n@@ -1091,1 +1091,1 @@\n-  if(frame->_c_return_addr == NULL) {\n+  if(frame->_c_return_addr == nullptr) {\n@@ -1095,1 +1095,1 @@\n-  if(frame->_c_return_value == NULL) {\n+  if(frame->_c_return_value == nullptr) {\n@@ -1145,1 +1145,1 @@\n-  char *token = NULL;\n+  char *token = nullptr;\n@@ -1150,1 +1150,1 @@\n-    if (token == NULL) {\n+    if (token == nullptr) {\n@@ -1152,1 +1152,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -1157,1 +1157,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -1163,1 +1163,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -1177,1 +1177,1 @@\n-    if (token == NULL) {\n+    if (token == nullptr) {\n@@ -1198,1 +1198,1 @@\n-    if (token2 == NULL) {\n+    if (token2 == nullptr) {\n@@ -1219,1 +1219,1 @@\n-  char   *desc = NULL;          \/\/ String representation of return_value\n+  char   *desc = nullptr;       \/\/ String representation of return_value\n@@ -1222,1 +1222,1 @@\n-  if ( (desc = find_cpp_block(\"return value block\")) == NULL ) {\n+  if ( (desc = find_cpp_block(\"return value block\")) == nullptr ) {\n@@ -1241,1 +1241,1 @@\n-  if (ident == NULL) {\n+  if (ident == nullptr) {\n@@ -1291,1 +1291,1 @@\n-    if (ident == NULL) {\n+    if (ident == nullptr) {\n@@ -1308,1 +1308,1 @@\n-      if (node_class == NULL) {\n+      if (node_class == nullptr) {\n@@ -1321,1 +1321,1 @@\n-      if (pipe_class == NULL) {\n+      if (pipe_class == nullptr) {\n@@ -1365,1 +1365,1 @@\n-        if (ident == NULL)\n+        if (ident == nullptr)\n@@ -1519,1 +1519,1 @@\n-            if (ident == NULL) {\n+            if (ident == nullptr) {\n@@ -1600,1 +1600,1 @@\n-      if (ident != NULL) {\n+      if (ident != nullptr) {\n@@ -1605,1 +1605,1 @@\n-    if (ident == NULL) {\n+    if (ident == nullptr) {\n@@ -1617,1 +1617,1 @@\n-      if (expr == NULL) {\n+      if (expr == nullptr) {\n@@ -1622,1 +1622,1 @@\n-      if (resource == NULL) {\n+      if (resource == nullptr) {\n@@ -1633,1 +1633,1 @@\n-        if (expr == NULL) {\n+        if (expr == nullptr) {\n@@ -1639,1 +1639,1 @@\n-        if (resource == NULL) {\n+        if (resource == nullptr) {\n@@ -1679,1 +1679,1 @@\n-    if (ident == NULL) {\n+    if (ident == nullptr) {\n@@ -1715,1 +1715,1 @@\n-  if (ident == NULL) {\n+  if (ident == nullptr) {\n@@ -1743,1 +1743,1 @@\n-    if (ident == NULL) {\n+    if (ident == nullptr) {\n@@ -1897,1 +1897,1 @@\n-    if (parm != NULL) {\n+    if (parm != nullptr) {\n@@ -1899,1 +1899,1 @@\n-      if (oper == NULL && !parm->is_opclass()) {\n+      if (oper == nullptr && !parm->is_opclass()) {\n@@ -1910,1 +1910,1 @@\n-      if (stage == NULL) {\n+      if (stage == nullptr) {\n@@ -1923,1 +1923,1 @@\n-      if (read_or_write == NULL) {\n+      if (read_or_write == nullptr) {\n@@ -1973,1 +1973,1 @@\n-    if (res != NULL) {\n+    if (res != nullptr) {\n@@ -1981,1 +1981,1 @@\n-      if (stage == NULL) {\n+      if (stage == nullptr) {\n@@ -2033,1 +2033,1 @@\n-  char      *desc = NULL;         \/\/ String representation of rule\n+  char      *desc = nullptr;      \/\/ String representation of rule\n@@ -2045,1 +2045,1 @@\n-      if (token == NULL) {\n+      if (token == nullptr) {\n@@ -2086,1 +2086,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -2093,1 +2093,1 @@\n-  if (func == NULL) {\n+  if (func == nullptr) {\n@@ -2095,1 +2095,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -2103,1 +2103,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -2110,1 +2110,1 @@\n-    if (arg == NULL) {\n+    if (arg == nullptr) {\n@@ -2112,1 +2112,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -2118,1 +2118,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -2123,1 +2123,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -2130,1 +2130,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -2136,1 +2136,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -2147,1 +2147,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -2158,1 +2158,1 @@\n-  if (rname == NULL) {\n+  if (rname == nullptr) {\n@@ -2166,5 +2166,5 @@\n-  char *callconv  = NULL;\n-  char *c_conv    = NULL;\n-  char *idealtype = NULL;\n-  char *encoding  = NULL;\n-  char *concrete = NULL;\n+  char *callconv  = nullptr;\n+  char *c_conv    = nullptr;\n+  char *idealtype = nullptr;\n+  char *encoding  = nullptr;\n+  char *concrete = nullptr;\n@@ -2175,1 +2175,1 @@\n-    if (callconv == NULL) {\n+    if (callconv == nullptr) {\n@@ -2192,1 +2192,1 @@\n-    if (c_conv == NULL) {\n+    if (c_conv == nullptr) {\n@@ -2210,1 +2210,1 @@\n-    if (idealtype == NULL) {\n+    if (idealtype == nullptr) {\n@@ -2224,1 +2224,1 @@\n-    if (encoding == NULL) {\n+    if (encoding == nullptr) {\n@@ -2238,1 +2238,1 @@\n-    if (concrete == NULL) {\n+    if (concrete == nullptr) {\n@@ -2276,1 +2276,1 @@\n-  if (cname == NULL) {\n+  if (cname == nullptr) {\n@@ -2293,1 +2293,1 @@\n-      if (rname==NULL) {\n+      if (rname==nullptr) {\n@@ -2317,1 +2317,1 @@\n-    if (code == NULL) {\n+    if (code == nullptr) {\n@@ -2345,1 +2345,1 @@\n-  if (cname == NULL) {\n+  if (cname == nullptr) {\n@@ -2368,1 +2368,1 @@\n-    if (name == NULL) {\n+    if (name == nullptr) {\n@@ -2373,1 +2373,1 @@\n-    if (rc == NULL) {\n+    if (rc == nullptr) {\n@@ -2392,1 +2392,1 @@\n-    if (code == NULL) {\n+    if (code == nullptr) {\n@@ -2426,1 +2426,1 @@\n-  if (name == NULL) {\n+  if (name == nullptr) {\n@@ -2442,1 +2442,1 @@\n-      if (rname==NULL) {\n+      if (rname==nullptr) {\n@@ -2480,1 +2480,1 @@\n-  char      *token  = NULL;\n+  char      *token  = nullptr;\n@@ -2483,1 +2483,1 @@\n-  InstructForm *inst_seen  = NULL;\n+  InstructForm *inst_seen  = nullptr;\n@@ -2513,1 +2513,1 @@\n-    else if ((token = get_ident_dup()) != NULL) {\n+    else if ((token = get_ident_dup()) != nullptr) {\n@@ -2518,1 +2518,1 @@\n-        if( inst_seen == NULL ) {\n+        if( inst_seen == nullptr ) {\n@@ -2533,1 +2533,1 @@\n-        return NULL;\n+        return nullptr;\n@@ -2538,1 +2538,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -2544,1 +2544,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -2594,1 +2594,1 @@\n-  if( root == NULL ) {\n+  if( root == nullptr ) {\n@@ -2762,2 +2762,2 @@\n-  char        *str    = NULL;\n-  char        *token  = NULL;\n+  char        *str    = nullptr;\n+  char        *token  = nullptr;\n@@ -2779,1 +2779,1 @@\n-  if( form == NULL || form->is_instruction() == NULL ) {\n+  if( form == nullptr || form->is_instruction() == nullptr ) {\n@@ -2813,1 +2813,1 @@\n-    if( inst_op == NULL ) {\n+    if( inst_op == nullptr ) {\n@@ -2852,1 +2852,1 @@\n-  char      *rule = NULL;         \/\/ String representation of predicate\n+  char      *rule = nullptr;         \/\/ String representation of predicate\n@@ -2856,1 +2856,1 @@\n-  if ( (rule = get_paren_expr(\"pred expression\", true)) == NULL ) {\n+  if ( (rule = get_paren_expr(\"pred expression\", true)) == nullptr ) {\n@@ -2858,1 +2858,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -2864,1 +2864,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -2884,1 +2884,1 @@\n-  assert(_AD._encode->encClass(ec_name) == NULL, \"shouldn't already exist\");\n+  assert(_AD._encode->encClass(ec_name) == nullptr, \"shouldn't already exist\");\n@@ -2890,1 +2890,1 @@\n-  const char* param = NULL;\n+  const char* param = nullptr;\n@@ -2892,1 +2892,1 @@\n-  while ((param = inst._parameters.iter()) != NULL) {\n+  while ((param = inst._parameters.iter()) != nullptr) {\n@@ -2894,1 +2894,1 @@\n-    assert(opForm != NULL, \"sanity\");\n+    assert(opForm != nullptr, \"sanity\");\n@@ -2914,1 +2914,1 @@\n-  while ((param = inst._parameters.iter()) != NULL) {\n+  while ((param = inst._parameters.iter()) != nullptr) {\n@@ -2920,1 +2920,1 @@\n-  if (inst._insencode != NULL) {\n+  if (inst._insencode != nullptr) {\n@@ -3053,1 +3053,1 @@\n-  char      *ec_name  = NULL;      \/\/ String representation of encode rule\n+  char      *ec_name  = nullptr;      \/\/ String representation of encode rule\n@@ -3057,1 +3057,1 @@\n-    if (ec_name == NULL) {\n+    if (ec_name == nullptr) {\n@@ -3063,1 +3063,1 @@\n-    if (encode_class == NULL) {\n+    if (encode_class == nullptr) {\n@@ -3079,1 +3079,1 @@\n-        if ( param != NULL ) {\n+        if ( param != nullptr ) {\n@@ -3101,1 +3101,1 @@\n-            if ( (inst._localNames[param] == NULL) &&\n+            if ( (inst._localNames[param] == nullptr) &&\n@@ -3104,1 +3104,1 @@\n-                 ((_AD._register == NULL ) || (_AD._register->getRegDef(param) == NULL)) ) {\n+                 ((_AD._register == nullptr ) || (_AD._register->getRegDef(param) == nullptr)) ) {\n@@ -3159,1 +3159,1 @@\n-    \/\/   return NULL;\n+    \/\/   return nullptr;\n@@ -3179,1 +3179,1 @@\n-  if (inst._insencode != NULL) {\n+  if (inst._insencode != nullptr) {\n@@ -3223,1 +3223,1 @@\n-  char      *ec_name = NULL;       \/\/ String representation of encode rule.\n+  char      *ec_name = nullptr;       \/\/ String representation of encode rule.\n@@ -3227,1 +3227,1 @@\n-    if (ec_name == NULL) {\n+    if (ec_name == nullptr) {\n@@ -3245,1 +3245,1 @@\n-        if (param != NULL) {\n+        if (param != nullptr) {\n@@ -3278,1 +3278,1 @@\n-          else if ((inst._localNames[param] == NULL) &&\n+          else if ((inst._localNames[param] == nullptr) &&\n@@ -3281,1 +3281,1 @@\n-                   ((_AD._register == NULL) || (_AD._register->getRegDef(param) == NULL))) {\n+                   ((_AD._register == nullptr) || (_AD._register->getRegDef(param) == nullptr))) {\n@@ -3356,1 +3356,1 @@\n-  assert(_AD._encode->encClass(ec_name) == NULL, \"shouldn't already exist\");\n+  assert(_AD._encode->encClass(ec_name) == nullptr, \"shouldn't already exist\");\n@@ -3362,1 +3362,1 @@\n-  const char* param = NULL;\n+  const char* param = nullptr;\n@@ -3364,1 +3364,1 @@\n-  while ((param = inst._parameters.iter()) != NULL) {\n+  while ((param = inst._parameters.iter()) != nullptr) {\n@@ -3366,1 +3366,1 @@\n-    assert(opForm != NULL, \"sanity\");\n+    assert(opForm != nullptr, \"sanity\");\n@@ -3378,1 +3378,1 @@\n-  while ((param = inst._parameters.iter()) != NULL) {\n+  while ((param = inst._parameters.iter()) != nullptr) {\n@@ -3459,1 +3459,1 @@\n-  char* sizeOfInstr = NULL;\n+  char* sizeOfInstr = nullptr;\n@@ -3466,1 +3466,1 @@\n-  if (sizeOfInstr == NULL) {\n+  if (sizeOfInstr == nullptr) {\n@@ -3468,1 +3468,1 @@\n-     return NULL;\n+     return nullptr;\n@@ -3476,1 +3476,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3483,1 +3483,1 @@\n-    if (sizeOfInstr != NULL) {\n+    if (sizeOfInstr != nullptr) {\n@@ -3494,3 +3494,3 @@\n-  char *primary   = NULL;\n-  char *secondary = NULL;\n-  char *tertiary  = NULL;\n+  char *primary   = nullptr;\n+  char *secondary = nullptr;\n+  char *tertiary  = nullptr;\n@@ -3498,2 +3498,2 @@\n-  char   *val    = NULL;\n-  Opcode *opcode = NULL;\n+  char   *val    = nullptr;\n+  Opcode *opcode = nullptr;\n@@ -3505,1 +3505,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3511,1 +3511,1 @@\n-    if ( (primary = get_ident_or_literal_constant(\"primary opcode\")) == NULL ) {\n+    if ( (primary = get_ident_or_literal_constant(\"primary opcode\")) == nullptr ) {\n@@ -3513,1 +3513,1 @@\n-        return NULL;\n+        return nullptr;\n@@ -3520,1 +3520,1 @@\n-      if ( (secondary = get_ident_or_literal_constant(\"secondary opcode\")) == NULL ) {\n+      if ( (secondary = get_ident_or_literal_constant(\"secondary opcode\")) == nullptr ) {\n@@ -3522,1 +3522,1 @@\n-        return NULL;\n+        return nullptr;\n@@ -3529,1 +3529,1 @@\n-        if ( (tertiary = get_ident_or_literal_constant(\"tertiary opcode\")) == NULL ) {\n+        if ( (tertiary = get_ident_or_literal_constant(\"tertiary opcode\")) == nullptr ) {\n@@ -3531,1 +3531,1 @@\n-          return NULL;\n+          return nullptr;\n@@ -3539,1 +3539,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -3547,1 +3547,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3554,3 +3554,3 @@\n-    if (primary   != NULL) fprintf(stderr,\"primary   opcode: %s\\n\", primary);\n-    if (secondary != NULL) fprintf(stderr,\"secondary opcode: %s\\n\", secondary);\n-    if (tertiary  != NULL) fprintf(stderr,\"tertiary  opcode: %s\\n\", tertiary);\n+    if (primary   != nullptr) fprintf(stderr,\"primary   opcode: %s\\n\", primary);\n+    if (secondary != nullptr) fprintf(stderr,\"secondary opcode: %s\\n\", secondary);\n+    if (tertiary  != nullptr) fprintf(stderr,\"tertiary  opcode: %s\\n\", tertiary);\n@@ -3567,2 +3567,2 @@\n-  char *iface_name  = NULL;      \/\/ Name of interface class being used\n-  char *iface_code  = NULL;      \/\/ Describe components of this class\n+  char *iface_name  = nullptr;      \/\/ Name of interface class being used\n+  char *iface_code  = nullptr;      \/\/ Describe components of this class\n@@ -3574,1 +3574,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3579,1 +3579,1 @@\n-  if (iface_name == NULL) {\n+  if (iface_name == nullptr) {\n@@ -3581,1 +3581,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3586,1 +3586,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3592,1 +3592,1 @@\n-  Interface *inter = NULL;\n+  Interface *inter = nullptr;\n@@ -3607,1 +3607,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -3632,4 +3632,4 @@\n-  char *base        = NULL;\n-  char *index       = NULL;\n-  char *scale       = NULL;\n-  char *disp        = NULL;\n+  char *base        = nullptr;\n+  char *index       = nullptr;\n+  char *scale       = nullptr;\n+  char *disp        = nullptr;\n@@ -3639,1 +3639,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3644,1 +3644,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3650,1 +3650,1 @@\n-    if (field == NULL) {\n+    if (field == nullptr) {\n@@ -3652,1 +3652,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -3668,1 +3668,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -3674,1 +3674,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3705,1 +3705,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3710,1 +3710,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3716,1 +3716,1 @@\n-    if (field == NULL) {\n+    if (field == nullptr) {\n@@ -3718,1 +3718,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -3746,1 +3746,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -3752,1 +3752,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3771,1 +3771,1 @@\n-  char *iface_field = NULL;\n+  char *iface_field = nullptr;\n@@ -3777,1 +3777,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3783,1 +3783,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3786,1 +3786,1 @@\n-  if (iface_field == NULL) {\n+  if (iface_field == nullptr) {\n@@ -3788,1 +3788,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3791,1 +3791,1 @@\n-  if (format != NULL && _curchar == ',') {\n+  if (format != nullptr && _curchar == ',') {\n@@ -3796,1 +3796,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -3807,1 +3807,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -3819,1 +3819,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3825,1 +3825,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3837,1 +3837,1 @@\n-  char      *cnstr = NULL;        \/\/ Code for constructor\n+  char      *cnstr = nullptr;     \/\/ Code for constructor\n@@ -3847,1 +3847,1 @@\n-    cnstr = NULL;                 \/\/ no constructor for this form\n+    cnstr = nullptr;              \/\/ no constructor for this form\n@@ -3850,1 +3850,1 @@\n-  else if ((cnstr = find_cpp_block(\"match constructor\")) == NULL ) {\n+  else if ((cnstr = find_cpp_block(\"match constructor\")) == nullptr ) {\n@@ -3853,1 +3853,1 @@\n-    return NULL;                  \/\/ No MatchRule to return\n+    return nullptr;               \/\/ No MatchRule to return\n@@ -3865,1 +3865,1 @@\n-  char       *desc   = NULL;\n+  char       *desc   = nullptr;\n@@ -3871,1 +3871,1 @@\n-    desc  = NULL;                 \/\/ no constructor for this form\n+    desc  = nullptr;              \/\/ no constructor for this form\n@@ -3883,1 +3883,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -3901,1 +3901,1 @@\n-            return NULL;\n+            return nullptr;\n@@ -3956,1 +3956,1 @@\n-        return NULL;\n+        return nullptr;\n@@ -3964,1 +3964,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -3971,1 +3971,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -3983,1 +3983,1 @@\n-  char       *desc   = NULL;\n+  char       *desc   = nullptr;\n@@ -4037,1 +4037,1 @@\n-              return NULL;\n+              return nullptr;\n@@ -4095,1 +4095,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -4110,1 +4110,1 @@\n-  char* desc   = NULL;\n+  char* desc   = nullptr;\n@@ -4132,1 +4132,1 @@\n-  NameAndList  *instr_and_operands = NULL;\n+  NameAndList  *instr_and_operands = nullptr;\n@@ -4142,1 +4142,1 @@\n-    return(NULL);\n+    return(nullptr);\n@@ -4147,1 +4147,1 @@\n-    if (ident == NULL) {\n+    if (ident == nullptr) {\n@@ -4156,1 +4156,1 @@\n-    if (form == NULL) {\n+    if (form == nullptr) {\n@@ -4174,1 +4174,1 @@\n-      if (oper == NULL) {\n+      if (oper == nullptr) {\n@@ -4181,1 +4181,1 @@\n-      if (ident == NULL) {\n+      if (ident == nullptr) {\n@@ -4189,1 +4189,1 @@\n-      char *c = NULL;\n+      char *c = nullptr;\n@@ -4193,1 +4193,1 @@\n-        if (c == NULL) {\n+        if (c == nullptr) {\n@@ -4223,1 +4223,1 @@\n-        if (ident2 == NULL) {\n+        if (ident2 == nullptr) {\n@@ -4233,1 +4233,1 @@\n-        if (oper == NULL && !form2->is_opclass()) {\n+        if (oper == nullptr && !form2->is_opclass()) {\n@@ -4260,1 +4260,1 @@\n-    return(NULL);\n+    return(nullptr);\n@@ -4273,2 +4273,2 @@\n-  char* params = NULL;\n-  char* desc   = NULL;\n+  char* params = nullptr;\n+  char* desc   = nullptr;\n@@ -4281,1 +4281,1 @@\n-  if ((params = get_paren_expr(\"rewrite parameters\")) == NULL) {\n+  if ((params = get_paren_expr(\"rewrite parameters\")) == nullptr) {\n@@ -4283,1 +4283,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -4290,1 +4290,1 @@\n-  if ( (desc = find_cpp_block(\"rewrite block\")) == NULL ) {\n+  if ( (desc = find_cpp_block(\"rewrite block\")) == nullptr ) {\n@@ -4292,1 +4292,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -4304,1 +4304,1 @@\n-  char      *cost = NULL;         \/\/ String representation of cost attribute\n+  char      *cost = nullptr;      \/\/ String representation of cost attribute\n@@ -4307,1 +4307,1 @@\n-  if ( (cost = get_paren_expr(\"attribute\")) == NULL ) {\n+  if ( (cost = get_paren_expr(\"attribute\")) == nullptr ) {\n@@ -4309,1 +4309,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -4315,1 +4315,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -4332,2 +4332,2 @@\n-  MatchNode *lChild = NULL;\n-  MatchNode *rChild = NULL;\n+  MatchNode *lChild = nullptr;\n+  MatchNode *rChild = nullptr;\n@@ -4338,1 +4338,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -4344,1 +4344,1 @@\n-  if (token == NULL) {\n+  if (token == nullptr) {\n@@ -4346,1 +4346,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -4361,3 +4361,3 @@\n-  const char  *result    = NULL;  \/\/ Result type will be filled in later\n-  const char  *name      = token; \/\/ local name associated with this node\n-  const char  *operation = token; \/\/ remember valid operation for later\n+  const char  *result    = nullptr;  \/\/ Result type will be filled in later\n+  const char  *name      = token;    \/\/ local name associated with this node\n+  const char  *operation = token;    \/\/ remember valid operation for later\n@@ -4365,2 +4365,2 @@\n-  OpClassForm *opcForm = form ? form->is_opclass() : NULL;\n-  if (opcForm != NULL) {\n+  OpClassForm *opcForm = form ? form->is_opclass() : nullptr;\n+  if (opcForm != nullptr) {\n@@ -4373,1 +4373,1 @@\n-    else                        name = NULL;\n+    else                        name = nullptr;\n@@ -4399,1 +4399,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -4418,4 +4418,4 @@\n-  MatchNode  *child  = NULL;\n-  const char *result = NULL;\n-  const char *token  = NULL;\n-  const char *opType = NULL;\n+  MatchNode  *child  = nullptr;\n+  const char *result = nullptr;\n+  const char *token  = nullptr;\n+  const char *opType = nullptr;\n@@ -4430,2 +4430,2 @@\n-    OpClassForm *opcForm = form ? form->is_opclass() : NULL;\n-    if (opcForm != NULL) {\n+    OpClassForm *opcForm = form ? form->is_opclass() : nullptr;\n+    if (opcForm != nullptr) {\n@@ -4436,1 +4436,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -4439,1 +4439,1 @@\n-    if (opType == NULL) {\n+    if (opType == nullptr) {\n@@ -4457,1 +4457,1 @@\n-  char* cppBlock = NULL;          \/\/ Beginning of C++ code block\n+  char* cppBlock = nullptr;       \/\/ Beginning of C++ code block\n@@ -4463,1 +4463,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -4476,1 +4476,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -4501,1 +4501,1 @@\n-  char* expr = NULL;\n+  char* expr = nullptr;\n@@ -4515,1 +4515,1 @@\n-        return NULL;\n+        return nullptr;\n@@ -4528,1 +4528,1 @@\n-          return NULL;\n+          return nullptr;\n@@ -4535,1 +4535,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -4539,1 +4539,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -4565,1 +4565,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -4588,1 +4588,1 @@\n-\/\/ NULL if some other token is found instead.\n+\/\/ null if some other token is found instead.\n@@ -4594,2 +4594,2 @@\n-  if( _curline == NULL )          \/\/ Return NULL at EOF.\n-    return NULL;\n+  if( _curline == nullptr )          \/\/ Return null at EOF.\n+    return nullptr;\n@@ -4618,1 +4618,1 @@\n-    start = NULL;\n+    start = nullptr;\n@@ -4622,1 +4622,1 @@\n-    *end = '\\0';                  \/\/ NULL terminate the string in place\n+    *end = '\\0';                  \/\/ null terminate the string in place\n@@ -4627,2 +4627,2 @@\n-  \/\/ NULL an error was already reported.\n-  if (do_preproc && start != NULL) {\n+  \/\/ null an error was already reported.\n+  if (do_preproc && start != nullptr) {\n@@ -4630,1 +4630,1 @@\n-    if (def != NULL && strcmp(def, start)) {\n+    if (def != nullptr && strcmp(def, start)) {\n@@ -4634,1 +4634,1 @@\n-      if (def2 != NULL && strcmp(def2, def1)) {\n+      if (def2 != nullptr && strcmp(def2, def1)) {\n@@ -4637,1 +4637,1 @@\n-        if (def3 != NULL && strcmp(def3, def2) && strcmp(def3, def1)) {\n+        if (def3 != nullptr && strcmp(def3, def2) && strcmp(def3, def1)) {\n@@ -4651,1 +4651,1 @@\n-\/\/ or NULL if some other token is found instead.\n+\/\/ or null if some other token is found instead.\n@@ -4656,1 +4656,1 @@\n-  if( ident != NULL ) {\n+  if( ident != nullptr ) {\n@@ -4667,1 +4667,1 @@\n-  char* param = NULL;\n+  char* param = nullptr;\n@@ -4712,1 +4712,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -4717,1 +4717,1 @@\n-  assert( rep_var_name != NULL,\n+  assert( rep_var_name != nullptr,\n@@ -4729,1 +4729,1 @@\n-\/\/ Returns a pointer to a copy of the string, or NULL on failure\n+\/\/ Returns a pointer to a copy of the string, or null on failure\n@@ -4731,1 +4731,1 @@\n-  if( _curchar != '$' ) return NULL;\n+  if( _curchar != '$' ) return nullptr;\n@@ -4750,1 +4750,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -4755,1 +4755,1 @@\n-  assert( rep_var_name != NULL,\n+  assert( rep_var_name != nullptr,\n@@ -4765,1 +4765,1 @@\n-\/\/ Looks for an identifier in the buffer, terminates it with a NULL,\n+\/\/ Looks for an identifier in the buffer, terminates it with a null,\n@@ -4770,1 +4770,1 @@\n-  if (ident == NULL) {\n+  if (ident == nullptr) {\n@@ -4774,1 +4774,1 @@\n-    if (dict[ident] != NULL) {\n+    if (dict[ident] != nullptr) {\n@@ -4776,1 +4776,1 @@\n-      ident = NULL;\n+      ident = nullptr;\n@@ -4794,1 +4794,1 @@\n-  if( _curline == NULL )          \/\/ Return NULL at EOF.\n+  if( _curline == nullptr )       \/\/ Return null at EOF.\n@@ -4810,1 +4810,1 @@\n-    *end = '\\0';                  \/\/ NULL terminate the string in place\n+    *end = '\\0';                  \/\/ null terminate the string in place\n@@ -4827,1 +4827,1 @@\n-  char         *result = NULL;    \/\/ relational operator being returned\n+  char         *result = nullptr; \/\/ relational operator being returned\n@@ -4829,2 +4829,2 @@\n-  if( _curline == NULL )          \/\/ Return NULL at EOF.\n-    return  NULL;\n+  if( _curline == nullptr )       \/\/ Return null at EOF.\n+    return  nullptr;\n@@ -4841,1 +4841,1 @@\n-      *_ptr = '\\0';               \/\/ NULL terminate\n+      *_ptr = '\\0';               \/\/ null terminate\n@@ -4861,2 +4861,2 @@\n-  OpClassForm *opclass = NULL;\n-  char        *ident   = NULL;\n+  OpClassForm *opclass = nullptr;\n+  char        *ident   = nullptr;\n@@ -4871,1 +4871,1 @@\n-    if (ident == NULL) {\n+    if (ident == nullptr) {\n@@ -4877,1 +4877,1 @@\n-      if( form == NULL ) {\n+      if( form == nullptr ) {\n@@ -4885,1 +4885,1 @@\n-      if((oper == NULL) && (opc == NULL)) {\n+      if((oper == nullptr) && (opc == nullptr)) {\n@@ -4895,1 +4895,1 @@\n-    if( (ident = get_unique_ident(operands, \"operand\")) == NULL) {\n+    if( (ident = get_unique_ident(operands, \"operand\")) == nullptr) {\n@@ -4899,1 +4899,1 @@\n-    if( _globalNames[ident] != NULL ) {\n+    if( _globalNames[ident] != nullptr ) {\n@@ -4935,1 +4935,1 @@\n-    if (ident == NULL) {\n+    if (ident == nullptr) {\n@@ -4942,1 +4942,1 @@\n-      if( form == NULL ) {\n+      if( form == nullptr ) {\n@@ -4947,1 +4947,1 @@\n-        if( (eForm = form->is_effect()) == NULL) {\n+        if( (eForm = form->is_effect()) == nullptr) {\n@@ -4961,1 +4961,1 @@\n-      if( (ident = get_unique_ident(effects, \"effect\")) == NULL) {\n+      if( (ident = get_unique_ident(effects, \"effect\")) == nullptr) {\n@@ -4966,2 +4966,2 @@\n-      opForm = form ? form->is_operand() : NULL;\n-      if( opForm == NULL ) {\n+      opForm = form ? form->is_operand() : nullptr;\n+      if( opForm == nullptr ) {\n@@ -4996,1 +4996,1 @@\n-  const char* file = NULL;\n+  const char* file = nullptr;\n@@ -5015,1 +5015,1 @@\n-  if (file != NULL)\n+  if (file != nullptr)\n@@ -5040,1 +5040,1 @@\n-  _AD.set_preproc_def(flag, NULL);\n+  _AD.set_preproc_def(flag, nullptr);\n@@ -5131,2 +5131,2 @@\n-  char* ident = (_curchar == '\\n') ? NULL : get_ident_no_preproc();\n-  if (ident == NULL) {\n+  char* ident = (_curchar == '\\n') ? nullptr : get_ident_no_preproc();\n+  if (ident == nullptr) {\n@@ -5139,1 +5139,1 @@\n-    bool flag_def  = preproc_taken() && (_AD.get_preproc_def(flag) != NULL);\n+    bool flag_def  = preproc_taken() && (_AD.get_preproc_def(flag) != nullptr);\n@@ -5188,1 +5188,1 @@\n-  while(_curline != NULL) {                \/\/ Check for end of file\n+  while(_curline != nullptr) {             \/\/ Check for end of file\n@@ -5202,1 +5202,1 @@\n-          if (_curline == NULL) {          \/\/ check for end of file\n+          if (_curline == nullptr) {       \/\/ check for end of file\n@@ -5241,1 +5241,1 @@\n-  if( _curline != NULL )            \/\/ at end of file _curchar isn't valid\n+  if( _curline != nullptr )         \/\/ at end of file _curchar isn't valid\n@@ -5336,2 +5336,2 @@\n-      assert(eol != NULL, \"must find end of line\");\n-      if (eol == NULL)  eol = cp + strlen(cp);\n+      assert(eol != nullptr, \"must find end of line\");\n+      if (eol == nullptr)  eol = cp + strlen(cp);\n@@ -5350,1 +5350,1 @@\n-  else if (str1 == NULL || str2 == NULL)\n+  else if (str1 == nullptr || str2 == nullptr)\n","filename":"src\/hotspot\/share\/adlc\/adlparse.cpp","additions":352,"deletions":352,"binary":false,"changes":704,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -175,1 +175,1 @@\n-  char          *interface_field_parse(const char** format = NULL);\/\/ Parse field contents\n+  char          *interface_field_parse(const char** format = nullptr);\/\/ Parse field contents\n","filename":"src\/hotspot\/share\/adlc\/adlparse.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,3 +88,3 @@\n-  const char   *cost  = NULL;\n-  const char   *name  = NULL;\n-  const char   *rule  = NULL;\n+  const char   *cost  = nullptr;\n+  const char   *name  = nullptr;\n+  const char   *rule  = nullptr;\n@@ -116,1 +116,1 @@\n-        char * prStr = pr?pr->_pred:NULL;\n+        char * prStr = pr?pr->_pred:nullptr;\n@@ -149,1 +149,1 @@\n-    _cisc_spill_operand(NULL),\n+    _cisc_spill_operand(nullptr),\n@@ -152,1 +152,1 @@\n-      \/\/ Initialize the opcode to MatchList table with NULLs\n+      \/\/ Initialize the opcode to MatchList table with nulls\n@@ -154,1 +154,1 @@\n-        _mlistab[i] = NULL;\n+        _mlistab[i] = nullptr;\n@@ -188,1 +188,1 @@\n-      _ADL_file._name = NULL; _ADL_file._fp = NULL;\n+      _ADL_file._name = nullptr; _ADL_file._fp = nullptr;\n@@ -190,4 +190,4 @@\n-      _DFA_file._name    = NULL;  _DFA_file._fp = NULL;\n-      _HPP_file._name    = NULL;  _HPP_file._fp = NULL;\n-      _CPP_file._name    = NULL;  _CPP_file._fp = NULL;\n-      _bug_file._name    = \"bugs.out\";      _bug_file._fp = NULL;\n+      _DFA_file._name    = nullptr;  _DFA_file._fp = nullptr;\n+      _HPP_file._name    = nullptr;  _HPP_file._fp = nullptr;\n+      _CPP_file._name    = nullptr;  _CPP_file._fp = nullptr;\n+      _bug_file._name    = \"bugs.out\";      _bug_file._fp = nullptr;\n@@ -196,4 +196,4 @@\n-      _register = NULL;\n-      _encode = NULL;\n-      _pipeline = NULL;\n-      _frame = NULL;\n+      _register = nullptr;\n+      _encode = nullptr;\n+      _pipeline = nullptr;\n+      _frame = nullptr;\n@@ -235,1 +235,1 @@\n-  for( ; (op = (OperandForm*)_operands.iter()) != NULL;) {\n+  for( ; (op = (OperandForm*)_operands.iter()) != nullptr;) {\n@@ -240,1 +240,1 @@\n-    if ( op->_matrule == NULL )  continue;\n+    if ( op->_matrule == nullptr )  continue;\n@@ -277,1 +277,1 @@\n-    for (; mrule != NULL; mrule = mrule->_next) {\n+    for (; mrule != nullptr; mrule = mrule->_next) {\n@@ -290,1 +290,1 @@\n-  for( ; (instr = (InstructForm*)_instructions.iter()) != NULL; ) {\n+  for( ; (instr = (InstructForm*)_instructions.iter()) != nullptr; ) {\n@@ -295,1 +295,1 @@\n-    if ( instr->_matrule == NULL )  continue;\n+    if ( instr->_matrule == nullptr )  continue;\n@@ -319,1 +319,1 @@\n-    while (attr != NULL) {\n+    while (attr != nullptr) {\n@@ -361,1 +361,1 @@\n-  const char *left  = NULL;\n+  const char *left  = nullptr;\n@@ -373,1 +373,1 @@\n-  const char *right  = NULL;\n+  const char *right  = nullptr;\n@@ -391,1 +391,1 @@\n-  \/\/     if (mrule->_opType == NULL) {\n+  \/\/     if (mrule->_opType == nullptr) {\n@@ -393,2 +393,2 @@\n-  \/\/     OpClassForm *opcForm = form ? form->is_opclass() : NULL;\n-  \/\/     assert(opcForm != NULL, \"Match Rule contains invalid operand name.\");\n+  \/\/     OpClassForm *opcForm = form ? form->is_opclass() : nullptr;\n+  \/\/     assert(opcForm != nullptr, \"Match Rule contains invalid operand name.\");\n@@ -405,1 +405,1 @@\n-  if (lst == NULL) {\n+  if (lst == nullptr) {\n@@ -410,1 +410,1 @@\n-    if (cost == NULL) {\n+    if (cost == nullptr) {\n@@ -423,2 +423,2 @@\n-  if ((oper->_matrule) && (oper->_matrule->_lChild == NULL) &&\n-      (oper->_matrule->_rChild == NULL)) {\n+  if ((oper->_matrule) && (oper->_matrule->_lChild == nullptr) &&\n+      (oper->_matrule->_rChild == nullptr)) {\n@@ -444,1 +444,1 @@\n-      } while(rule->_next != NULL);\n+      } while(rule->_next != nullptr);\n@@ -456,1 +456,1 @@\n-        assert( oper->cost(), \"This case expects NULL cost, not default cost\");\n+        assert( oper->cost(), \"This case expects null cost, not default cost\");\n@@ -459,1 +459,1 @@\n-    } while(rule->_next != NULL);\n+    } while(rule->_next != nullptr);\n@@ -472,1 +472,1 @@\n-  leftstr = rightstr = NULL;\n+  leftstr = rightstr = nullptr;\n@@ -510,1 +510,1 @@\n-    buildMList(mnode, NULL, NULL, NULL, NULL);\n+    buildMList(mnode, nullptr, nullptr, nullptr, nullptr);\n@@ -515,1 +515,1 @@\n-    buildMList(mnode, NULL, NULL, NULL, NULL);\n+    buildMList(mnode, nullptr, nullptr, nullptr, nullptr);\n@@ -519,1 +519,1 @@\n-  if ((_mlistab[index] == NULL) ||\n+  if ((_mlistab[index] == nullptr) ||\n@@ -540,1 +540,1 @@\n-  leftstr = rightstr = NULL;\n+  leftstr = rightstr = nullptr;\n@@ -542,2 +542,2 @@\n-  if ((node) && (node->_lChild == NULL) && (node->_rChild == NULL) &&\n-      ((form = (Form *)_globalNames[node->_opType]) != NULL) &&\n+  if ((node) && (node->_lChild == nullptr) && (node->_rChild == nullptr) &&\n+      ((form = (Form *)_globalNames[node->_opType]) != nullptr) &&\n@@ -557,2 +557,2 @@\n-  if (node == NULL) {\n-    fprintf(stderr, \"error: node is NULL\\n\");\n+  if (node == nullptr) {\n+    fprintf(stderr, \"error: node is null\\n\");\n@@ -566,1 +566,1 @@\n-    buildMList(mnode, NULL, NULL, NULL, NULL);\n+    buildMList(mnode, nullptr, nullptr, nullptr, nullptr);\n@@ -571,1 +571,1 @@\n-    buildMList(mnode, NULL, NULL, NULL, NULL);\n+    buildMList(mnode, nullptr, nullptr, nullptr, nullptr);\n@@ -575,1 +575,1 @@\n-  if (rootOp == NULL) {\n+  if (rootOp == nullptr) {\n@@ -581,1 +581,1 @@\n-  if (resultOp == NULL) {\n+  if (resultOp == nullptr) {\n@@ -586,1 +586,1 @@\n-  if ((_mlistab[index] == NULL) || (_mlistab[index] &&\n+  if ((_mlistab[index] == nullptr) || (_mlistab[index] &&\n@@ -598,1 +598,1 @@\n-  \/\/ Only interested in ones with non-NULL match rule\n+  \/\/ Only interested in ones with non-null match rule\n@@ -601,2 +601,2 @@\n-  for( ; (cur = (OperandForm*)_operands.iter()) != NULL; ) {\n-    if (cur->_matrule != NULL) ++count;\n+  for( ; (cur = (OperandForm*)_operands.iter()) != nullptr; ) {\n+    if (cur->_matrule != nullptr) ++count;\n@@ -609,1 +609,1 @@\n-  \/\/ Only interested in ones with non-NULL match rule\n+  \/\/ Only interested in ones with non-null match rule\n@@ -612,1 +612,1 @@\n-  for( ; (cur = (OpClassForm*)_opclass.iter()) != NULL; ) {\n+  for( ; (cur = (OpClassForm*)_opclass.iter()) != nullptr; ) {\n@@ -620,1 +620,1 @@\n-  \/\/ Only interested in ones with non-NULL match rule\n+  \/\/ Only interested in ones with non-null match rule\n@@ -623,2 +623,2 @@\n-  for( ; (cur = (InstructForm*)_instructions.iter()) != NULL; ) {\n-    if (cur->_matrule != NULL) ++count;\n+  for( ; (cur = (InstructForm*)_instructions.iter()) != nullptr; ) {\n+    if (cur->_matrule != nullptr) ++count;\n@@ -632,1 +632,1 @@\n-\/\/ Return NULL if there is no binding, or it has been #undef-ed.\n+\/\/ Return null if there is no binding, or it has been #undef-ed.\n@@ -634,3 +634,3 @@\n-  \/\/ In case of syntax errors, flag may take the value NULL.\n-  SourceForm* deff = NULL;\n-  if (flag != NULL)\n+  \/\/ In case of syntax errors, flag may take the value null.\n+  SourceForm* deff = nullptr;\n+  if (flag != nullptr)\n@@ -638,1 +638,1 @@\n-  return (deff == NULL) ? NULL : deff->_code;\n+  return (deff == nullptr) ? nullptr : deff->_code;\n@@ -644,1 +644,1 @@\n-\/\/ Giving NULL means the flag name is to be #undef-ed.\n+\/\/ Giving null means the flag name is to be #undef-ed.\n@@ -648,2 +648,2 @@\n-  if (deff == NULL) {\n-    deff = new SourceForm(NULL);\n+  if (deff == nullptr) {\n+    deff = new SourceForm(nullptr);\n@@ -716,1 +716,1 @@\n-  \/\/ Insert keyword strings into Global Name Table.  Keywords have a NULL value\n+  \/\/ Insert keyword strings into Global Name Table.  Keywords have a null value\n@@ -718,23 +718,23 @@\n-  names.Insert(\"instruct\", NULL);\n-  names.Insert(\"operand\", NULL);\n-  names.Insert(\"attribute\", NULL);\n-  names.Insert(\"source\", NULL);\n-  names.Insert(\"register\", NULL);\n-  names.Insert(\"pipeline\", NULL);\n-  names.Insert(\"constraint\", NULL);\n-  names.Insert(\"predicate\", NULL);\n-  names.Insert(\"encode\", NULL);\n-  names.Insert(\"enc_class\", NULL);\n-  names.Insert(\"interface\", NULL);\n-  names.Insert(\"opcode\", NULL);\n-  names.Insert(\"ins_encode\", NULL);\n-  names.Insert(\"match\", NULL);\n-  names.Insert(\"effect\", NULL);\n-  names.Insert(\"expand\", NULL);\n-  names.Insert(\"rewrite\", NULL);\n-  names.Insert(\"reg_def\", NULL);\n-  names.Insert(\"reg_class\", NULL);\n-  names.Insert(\"alloc_class\", NULL);\n-  names.Insert(\"resource\", NULL);\n-  names.Insert(\"pipe_class\", NULL);\n-  names.Insert(\"pipe_desc\", NULL);\n+  names.Insert(\"instruct\", nullptr);\n+  names.Insert(\"operand\", nullptr);\n+  names.Insert(\"attribute\", nullptr);\n+  names.Insert(\"source\", nullptr);\n+  names.Insert(\"register\", nullptr);\n+  names.Insert(\"pipeline\", nullptr);\n+  names.Insert(\"constraint\", nullptr);\n+  names.Insert(\"predicate\", nullptr);\n+  names.Insert(\"encode\", nullptr);\n+  names.Insert(\"enc_class\", nullptr);\n+  names.Insert(\"interface\", nullptr);\n+  names.Insert(\"opcode\", nullptr);\n+  names.Insert(\"ins_encode\", nullptr);\n+  names.Insert(\"match\", nullptr);\n+  names.Insert(\"effect\", nullptr);\n+  names.Insert(\"expand\", nullptr);\n+  names.Insert(\"rewrite\", nullptr);\n+  names.Insert(\"reg_def\", nullptr);\n+  names.Insert(\"reg_class\", nullptr);\n+  names.Insert(\"alloc_class\", nullptr);\n+  names.Insert(\"resource\", nullptr);\n+  names.Insert(\"pipe_class\", nullptr);\n+  names.Insert(\"pipe_desc\", nullptr);\n@@ -805,1 +805,1 @@\n-  if( reg_class_name == NULL ) return \"RegMask::Empty\";\n+  if( reg_class_name == nullptr ) return \"RegMask::Empty\";\n@@ -830,1 +830,1 @@\n-    if (reg_class == NULL) {\n+    if (reg_class == nullptr) {\n@@ -849,1 +849,1 @@\n-  if (result_class == NULL) {\n+  if (result_class == nullptr) {\n@@ -866,1 +866,1 @@\n-  if (result == NULL) {\n+  if (result == nullptr) {\n@@ -881,1 +881,1 @@\n-  if (form == NULL) {\n+  if (form == nullptr) {\n@@ -887,1 +887,1 @@\n-  if (oper == NULL) {\n+  if (oper == nullptr) {\n@@ -901,1 +901,1 @@\n-  if (reg_mask_name == NULL) {\n+  if (reg_mask_name == nullptr) {\n@@ -962,1 +962,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -968,1 +968,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1133,1 +1133,1 @@\n-  for (_preproc_list.reset(); (flag = _preproc_list.iter()) != NULL; ) {\n+  for (_preproc_list.reset(); (flag = _preproc_list.iter()) != nullptr; ) {\n","filename":"src\/hotspot\/share\/adlc\/archDesc.cpp","additions":98,"deletions":98,"binary":false,"changes":196,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,2 +75,2 @@\n-  MatchList(MatchList *nxt, Predicate *prd): _next(nxt), _pred(prd), _cost(NULL){\n-    _resultStr = _lchild = _rchild = _opcode = NULL; }\n+  MatchList(MatchList *nxt, Predicate *prd): _next(nxt), _pred(prd), _cost(nullptr){\n+    _resultStr = _lchild = _rchild = _opcode = nullptr; }\n@@ -85,1 +85,1 @@\n-  char       *get_pred(void)  { return (_pred?_pred->_pred:NULL); }\n+  char       *get_pred(void)  { return (_pred?_pred->_pred:nullptr); }\n@@ -87,1 +87,1 @@\n-  const char *get_cost(void) { return _cost == NULL ? \"0\" :_cost; }\n+  const char *get_cost(void) { return _cost == nullptr ? \"0\" :_cost; }\n@@ -355,1 +355,1 @@\n-  bool          can_cisc_spill() { return _cisc_spill_operand != NULL; }\n+  bool          can_cisc_spill() { return _cisc_spill_operand != nullptr; }\n","filename":"src\/hotspot\/share\/adlc\/archDesc.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,1 @@\n-  Dict _production;    \/\/ map result of production, char*, to information or NULL\n+  Dict _production;    \/\/ map result of production, char*, to information or null\n@@ -195,2 +195,2 @@\n-      \/\/ child should be NULL, to distinguish from the predicated version.\n-      fprintf(fp, \" && _kids[1] == NULL\");\n+      \/\/ child should be null, to distinguish from the predicated version.\n+      fprintf(fp, \" && _kids[1] == nullptr\");\n@@ -294,1 +294,1 @@\n-  OperandForm *op = form ? form->is_operand() : NULL;\n+  OperandForm *op = form ? form->is_operand() : nullptr;\n@@ -301,1 +301,1 @@\n-    while( (oclass = op->_classes.iter()) != NULL )\n+    while( (oclass = op->_classes.iter()) != nullptr )\n@@ -313,1 +313,1 @@\n-  if( operands_chained_from[operand] != NULL ) {\n+  if( operands_chained_from[operand] != nullptr ) {\n@@ -326,1 +326,1 @@\n-      if( operands_chained_from[result] != NULL ) {\n+      if( operands_chained_from[result] != nullptr ) {\n@@ -418,1 +418,1 @@\n-      if (_mlistab[i] == NULL) continue;\n+      if (_mlistab[i] == nullptr) continue;\n@@ -433,1 +433,1 @@\n-    if (_mlistab[i] == NULL) continue;\n+    if (_mlistab[i] == nullptr) continue;\n@@ -521,1 +521,1 @@\n-    for( MatchList *mList = matchList; mList != NULL; mList = mList->get_next() ) {\n+    for( MatchList *mList = matchList; mList != nullptr; mList = mList->get_next() ) {\n@@ -524,1 +524,1 @@\n-      if( pred != NULL ) {\n+      if( pred != nullptr ) {\n@@ -540,1 +540,1 @@\n-    if( pred != NULL ) {\n+    if( pred != nullptr ) {\n@@ -543,1 +543,1 @@\n-      shared_pred_loc != NULL && dfa_shared_preds::valid_loc(new_pred,shared_pred_loc);\n+      shared_pred_loc != nullptr && dfa_shared_preds::valid_loc(new_pred,shared_pred_loc);\n@@ -613,1 +613,1 @@\n-  } while(mList != NULL);\n+  } while(mList != nullptr);\n@@ -629,1 +629,1 @@\n-  } while(mList != NULL);\n+  } while(mList != nullptr);\n@@ -642,1 +642,1 @@\n-Expr *Expr::_unknown_expr = NULL;\n+Expr *Expr::_unknown_expr = nullptr;\n@@ -648,1 +648,1 @@\n-  _external_name = NULL;\n+  _external_name = nullptr;\n@@ -654,1 +654,1 @@\n-  _external_name = NULL;\n+  _external_name = nullptr;\n@@ -657,1 +657,1 @@\n-  if( cost == NULL ) {\n+  if( cost == nullptr ) {\n@@ -714,1 +714,1 @@\n-  if( e != NULL ) {\n+  if( e != nullptr ) {\n@@ -724,1 +724,1 @@\n-  const char * result = NULL;\n+  const char * result = nullptr;\n@@ -727,1 +727,1 @@\n-  if( c1->_external_name != NULL ) {\n+  if( c1->_external_name != nullptr ) {\n@@ -736,1 +736,1 @@\n-  else if( c2->_external_name != NULL ) {\n+  else if( c2->_external_name != nullptr ) {\n@@ -793,1 +793,1 @@\n-  if( _external_name != NULL ) {\n+  if( _external_name != nullptr ) {\n@@ -801,1 +801,1 @@\n-  assert( _external_name != NULL, \"definition does not have a name\");\n+  assert( _external_name != nullptr, \"definition does not have a name\");\n@@ -808,1 +808,1 @@\n-  assert( _external_name != NULL, \"definition does not have a name\");\n+  assert( _external_name != nullptr, \"definition does not have a name\");\n@@ -814,1 +814,1 @@\n-  if( Expr::_unknown_expr == NULL ) {\n+  if( Expr::_unknown_expr == nullptr ) {\n@@ -862,1 +862,1 @@\n-  assert(old_expr == NULL, \"Implementation does not support redefinition\");\n+  assert(old_expr == nullptr, \"Implementation does not support redefinition\");\n@@ -871,1 +871,1 @@\n-\/\/ value of the key is returned; NULL if the key was not previously defined.\n+\/\/ value of the key is returned; null if the key was not previously defined.\n@@ -876,1 +876,1 @@\n-\/\/ Finds the value of a given key; or NULL if not found.\n+\/\/ Finds the value of a given key; or null if not found.\n@@ -884,2 +884,2 @@\n-  const char *name = NULL;\n-  for( _defines.reset(); (name = _defines.iter()) != NULL; ) {\n+  const char *name = nullptr;\n+  for( _defines.reset(); (name = _defines.iter()) != nullptr; ) {\n@@ -887,1 +887,1 @@\n-    assert( expr != NULL, \"name in ExprDict without matching Expr in dictionary\");\n+    assert( expr != nullptr, \"name in ExprDict without matching Expr in dictionary\");\n@@ -894,2 +894,2 @@\n-  const char *name = NULL;\n-  for( _defines.reset(); (name = _defines.iter()) != NULL; ) {\n+  const char *name = nullptr;\n+  for( _defines.reset(); (name = _defines.iter()) != nullptr; ) {\n@@ -897,1 +897,1 @@\n-    assert( expr != NULL, \"name in ExprDict without matching Expr in dictionary\");\n+    assert( expr != nullptr, \"name in ExprDict without matching Expr in dictionary\");\n@@ -942,2 +942,2 @@\n-  _result     = NULL;\n-  _constraint = NULL;\n+  _result     = nullptr;\n+  _constraint = nullptr;\n@@ -950,3 +950,3 @@\n-  printf(\"%s\", (_result     == NULL ? \"NULL\" : _result ) );\n-  printf(\"%s\", (_constraint == NULL ? \"NULL\" : _constraint ) );\n-  printf(\"%s\", (_valid      == NULL ? \"NULL\" : _valid ) );\n+  printf(\"%s\", (_result     == nullptr ? \"nullptr\" : _result ) );\n+  printf(\"%s\", (_constraint == nullptr ? \"nullptr\" : _constraint ) );\n+  printf(\"%s\", (_valid      == nullptr ? \"nullptr\" : _valid ) );\n@@ -964,1 +964,1 @@\n-  const void *x, *y = NULL;\n+  const void *x, *y = nullptr;\n@@ -969,1 +969,1 @@\n-    if( p != NULL ) {\n+    if( p != nullptr ) {\n@@ -977,1 +977,1 @@\n-  if( p == NULL ) {\n+  if( p == nullptr ) {\n","filename":"src\/hotspot\/share\/adlc\/dfa.cpp","additions":45,"deletions":45,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-Dict::Dict(CmpKey initcmp, Hash inithash) : _hash(inithash), _cmp(initcmp), _arena(NULL) {\n+Dict::Dict(CmpKey initcmp, Hash inithash) : _hash(inithash), _cmp(initcmp), _arena(nullptr) {\n@@ -175,1 +175,1 @@\n-\/\/ replaced is returned (NULL if this is a 1st insertion of that key).  If\n+\/\/ replaced is returned (null if this is a 1st insertion of that key).  If\n@@ -207,1 +207,1 @@\n-  return NULL;                  \/\/ Nothing found prior\n+  return nullptr;               \/\/ Nothing found prior\n@@ -224,1 +224,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -228,1 +228,1 @@\n-\/\/ Find a key-value pair in the given dictionary.  If not found, return NULL.\n+\/\/ Find a key-value pair in the given dictionary.  If not found, return null.\n@@ -236,1 +236,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -338,1 +338,1 @@\n-\/\/ Find the next key-value pair in the dictionary, or return a NULL key and\n+\/\/ Find the next key-value pair in the dictionary, or return a null key and\n@@ -355,1 +355,1 @@\n-  _key = _value = NULL;\n+  _key = _value = nullptr;\n","filename":"src\/hotspot\/share\/adlc\/dict2.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,1 +73,1 @@\n-  \/\/ value of the key is returned; NULL if the key was not previously defined.\n+  \/\/ value of the key is returned; null if the key was not previously defined.\n@@ -77,1 +77,1 @@\n-  \/\/ Find finds the value of a given key; or NULL if not found.\n+  \/\/ Find finds the value of a given key; or null if not found.\n","filename":"src\/hotspot\/share\/adlc\/dict2.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-  *(_bufmax+1) = '\\0';           \/\/ Then end with a sentinel NULL\n+  *(_bufmax+1) = '\\0';           \/\/ Then end with a sentinel null\n@@ -77,2 +77,2 @@\n-  \/\/ Check for end of file & return NULL\n-  if (_bufeol >= _bufmax) return NULL;\n+  \/\/ Check for end of file & return null\n+  if (_bufeol >= _bufmax) return nullptr;\n@@ -82,1 +82,1 @@\n-  if (*retval == '\\0') return NULL; \/\/ Check for EOF sentinel\n+  if (*retval == '\\0') return nullptr; \/\/ Check for EOF sentinel\n","filename":"src\/hotspot\/share\/adlc\/filebuff.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-  inline BufferedFile() { _name = NULL; _fp = NULL; };\n+  inline BufferedFile() { _name = nullptr; _fp = nullptr; };\n","filename":"src\/hotspot\/share\/adlc\/filebuff.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,2 +71,2 @@\n-  if (_justReset) {_justReset=false; return (_iter < _cur ? _names[_iter] : NULL);}\n-  else return (_iter <_cur-1 ? _names[++_iter] : NULL);\n+  if (_justReset) {_justReset=false; return (_iter < _cur ? _names[_iter] : nullptr);}\n+  else return (_iter <_cur-1 ? _names[++_iter] : nullptr);\n@@ -74,2 +74,2 @@\n-const char  *NameList::current() { return (_iter < _cur ? _names[_iter] : NULL); }\n-const char  *NameList::peek(int skip) { return (_iter + skip < _cur ? _names[_iter + skip] : NULL); }\n+const char  *NameList::current() { return (_iter < _cur ? _names[_iter] : nullptr); }\n+const char  *NameList::peek(int skip) { return (_iter + skip < _cur ? _names[_iter + skip] : nullptr); }\n@@ -91,1 +91,1 @@\n-  for(reset(); (entry = iter()) != NULL; ) {\n+  for(reset(); (entry = iter()) != nullptr; ) {\n@@ -101,1 +101,1 @@\n-  for(reset(); (entry = iter()) != NULL; ) {\n+  for(reset(); (entry = iter()) != nullptr; ) {\n@@ -110,1 +110,1 @@\n-  return ( index < _cur ? _names[index] : NULL);\n+  return ( index < _cur ? _names[index] : nullptr);\n@@ -119,1 +119,1 @@\n-  const char *name       = NULL;\n+  const char *name       = nullptr;\n@@ -124,3 +124,3 @@\n-                    (justReset=false, (iter < _cur ? _names[iter] : NULL)) :\n-                    (iter < _cur-1 ? _names[++iter] : NULL)) )\n-         != NULL ) {\n+                    (justReset=false, (iter < _cur ? _names[iter] : nullptr)) :\n+                    (iter < _cur-1 ? _names[++iter] : nullptr)) )\n+         != nullptr ) {\n@@ -174,1 +174,1 @@\n-  for (reset(); (name = iter()) != NULL;) {\n+  for (reset(); (name = iter()) != nullptr;) {\n@@ -183,1 +183,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -187,1 +187,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -191,1 +191,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -195,1 +195,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -199,1 +199,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -203,1 +203,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -207,1 +207,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -211,1 +211,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -215,1 +215,1 @@\n-  if( name == NULL ) { return Form::none; }\n+  if( name == nullptr ) { return Form::none; }\n@@ -230,1 +230,1 @@\n-  if( name == NULL ) { return Form::none; }\n+  if( name == nullptr ) { return Form::none; }\n@@ -241,1 +241,1 @@\n-  if( name == NULL ) { return Form::none; }\n+  if( name == nullptr ) { return Form::none; }\n@@ -305,2 +305,2 @@\n-  \/\/ Form *next = NULL;\n-  \/\/ for( ; (cur = next) != NULL; ) {\n+  \/\/ Form *next = nullptr;\n+  \/\/ for( ; (cur = next) != nullptr; ) {\n@@ -326,1 +326,1 @@\n-\/\/ value of the key is returned; NULL if the key was not previously defined.\n+\/\/ value of the key is returned; null if the key was not previously defined.\n@@ -331,1 +331,1 @@\n-\/\/ Finds the value of a given key; or NULL if not found.\n+\/\/ Finds the value of a given key; or null if not found.\n","filename":"src\/hotspot\/share\/adlc\/forms.cpp","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,1 +87,1 @@\n-  Dict         _form;              \/\/ map names, char*, to their Form* or NULL\n+  Dict         _form;              \/\/ map names, char*, to their Form* or null\n@@ -108,1 +108,1 @@\n-  \/\/ value of the key is returned; NULL if the key was not previously defined.\n+  \/\/ value of the key is returned; null if the key was not previously defined.\n@@ -111,1 +111,1 @@\n-  \/\/ Find finds the value of a given key; or NULL if not found.\n+  \/\/ Find finds the value of a given key; or null if not found.\n@@ -150,1 +150,1 @@\n-    : _next(NULL), _linenum(line), _ftype(formType) { };\n+    : _next(nullptr), _linenum(line), _ftype(formType) { };\n@@ -268,1 +268,1 @@\n-    if (_tail==NULL) { _root = _tail = _cur = entry;}\n+    if (_tail==nullptr) { _root = _tail = _cur = entry;}\n@@ -286,1 +286,1 @@\n-    for( Form *cur; (cur =  iter()) != NULL; ) { ++count; };\n+    for( Form *cur; (cur =  iter()) != nullptr; ) { ++count; };\n@@ -293,1 +293,1 @@\n-    for(; (cur =  iter()) != NULL; ) {\n+    for(; (cur =  iter()) != nullptr; ) {\n@@ -303,1 +303,1 @@\n-    for(; (cur =  iter()) != NULL; ) {\n+    for(; (cur =  iter()) != nullptr; ) {\n@@ -313,1 +313,1 @@\n-    for( ; (cur =  iter()) != NULL; ) {\n+    for( ; (cur =  iter()) != nullptr; ) {\n@@ -318,1 +318,1 @@\n-  FormList() { _justReset = 1; _justReset2 = 1; _root = NULL; _tail = NULL; _cur = NULL; _cur2 = NULL;};\n+  FormList() { _justReset = 1; _justReset2 = 1; _root = nullptr; _tail = nullptr; _cur = nullptr; _cur2 = nullptr;};\n@@ -444,1 +444,1 @@\n-  \/\/ Return element at \"position\", else NULL\n+  \/\/ Return element at \"position\", else null\n@@ -517,1 +517,1 @@\n-  const char *_external_name;  \/\/ if !NULL, then print this instead of _expr\n+  const char *_external_name;  \/\/ if not null, then print this instead of _expr\n@@ -536,1 +536,1 @@\n-  const char *as_string()  const { return (_external_name != NULL ? _external_name : _expr); }\n+  const char *as_string()  const { return (_external_name != nullptr ? _external_name : _expr); }\n@@ -562,1 +562,1 @@\n-  Dict         _expr;              \/\/ map names, char*, to their Expr* or NULL\n+  Dict         _expr;              \/\/ map names, char*, to their Expr* or null\n@@ -587,1 +587,1 @@\n-  \/\/ value of the key is returned; NULL if the key was not previously defined.\n+  \/\/ value of the key is returned; null if the key was not previously defined.\n@@ -590,1 +590,1 @@\n-  \/\/ Find finds the value of a given key; or NULL if not found.\n+  \/\/ Find finds the value of a given key; or null if not found.\n","filename":"src\/hotspot\/share\/adlc\/forms.hpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,1 +96,1 @@\n-  _current_ac = NULL;\n+  _current_ac = nullptr;\n@@ -102,1 +102,1 @@\n-  if ( _current_ac == NULL ) {\n+  if ( _current_ac == nullptr ) {\n@@ -104,1 +104,1 @@\n-    if( ac_name == NULL )   return NULL;   \/\/ No more allocation classes\n+    if( ac_name == nullptr )   return nullptr;   \/\/ No more allocation classes\n@@ -107,1 +107,1 @@\n-    assert( _current_ac != NULL, \"Name must match an allocation class\");\n+    assert( _current_ac != nullptr, \"Name must match an allocation class\");\n@@ -111,1 +111,1 @@\n-  if( rd_name == NULL ) {\n+  if( rd_name == nullptr ) {\n@@ -113,1 +113,1 @@\n-    _current_ac = NULL;\n+    _current_ac = nullptr;\n@@ -117,1 +117,1 @@\n-  assert( reg_def != NULL, \"Name must match a register definition\");\n+  assert( reg_def != nullptr, \"Name must match a register definition\");\n@@ -140,1 +140,1 @@\n-  const char *rc_name = NULL;\n+  const char *rc_name = nullptr;\n@@ -142,1 +142,1 @@\n-  while ( (rc_name = _rclasses.iter()) != NULL ) {\n+  while ( (rc_name = _rclasses.iter()) != nullptr ) {\n@@ -145,1 +145,1 @@\n-    assert( reg_class != NULL, \"InternalError() no matching register class\");\n+    assert( reg_class != nullptr, \"InternalError() no matching register class\");\n@@ -149,1 +149,1 @@\n-  RegDef *reg_def = NULL;\n+  RegDef *reg_def = nullptr;\n@@ -152,1 +152,1 @@\n-  while ( (reg_def = iter_RegDefs()) != NULL ) {\n+  while ( (reg_def = iter_RegDefs()) != nullptr ) {\n@@ -186,1 +186,1 @@\n-  for(_rdefs.reset(); (name = _rdefs.iter()) != NULL;) {\n+  for(_rdefs.reset(); (name = _rdefs.iter()) != nullptr;) {\n@@ -190,1 +190,1 @@\n-  for (_rclasses.reset(); (name = _rclasses.iter()) != NULL;) {\n+  for (_rclasses.reset(); (name = _rclasses.iter()) != nullptr;) {\n@@ -194,1 +194,1 @@\n-  for (_aclasses.reset(); (name = _aclasses.iter()) != NULL;) {\n+  for (_aclasses.reset(); (name = _aclasses.iter()) != nullptr;) {\n@@ -273,1 +273,1 @@\n-  RegDef     *reg_def  = rd_name ? (RegDef*)_regDef[rd_name] : NULL;\n+  RegDef     *reg_def  = rd_name ? (RegDef*)_regDef[rd_name] : nullptr;\n@@ -278,2 +278,2 @@\n-  const RegDef* first = NULL;\n-  const RegDef* def = NULL;\n+  const RegDef* first = nullptr;\n+  const RegDef* def = nullptr;\n@@ -282,2 +282,2 @@\n-  while ((def = RegDef_iter()) != NULL) {\n-    if (first == NULL || def->register_num() < first->register_num()) {\n+  while ((def = RegDef_iter()) != nullptr) {\n+    if (first == nullptr || def->register_num() < first->register_num()) {\n@@ -288,1 +288,1 @@\n-  assert(first != NULL, \"empty mask?\");\n+  assert(first != nullptr, \"empty mask?\");\n@@ -296,1 +296,1 @@\n-  for(_regDefs.reset(); (name = _regDefs.iter()) != NULL;) {\n+  for(_regDefs.reset(); (name = _regDefs.iter()) != nullptr;) {\n@@ -318,1 +318,1 @@\n-  for(_regDefs.reset(); (name = _regDefs.iter()) != NULL;) {\n+  for(_regDefs.reset(); (name = _regDefs.iter()) != nullptr;) {\n@@ -359,1 +359,1 @@\n-CodeSnippetRegClass::CodeSnippetRegClass(const char* classid) : RegClass(classid), _code_snippet(NULL) {\n+CodeSnippetRegClass::CodeSnippetRegClass(const char* classid) : RegClass(classid), _code_snippet(nullptr) {\n@@ -374,1 +374,1 @@\n-ConditionalRegClass::ConditionalRegClass(const char *classid) : RegClass(classid), _condition_code(NULL) {\n+ConditionalRegClass::ConditionalRegClass(const char *classid) : RegClass(classid), _condition_code(nullptr) {\n@@ -416,1 +416,1 @@\n-  assert( regDef != NULL, \"Can not add a NULL to an allocation class\");\n+  assert( regDef != nullptr, \"Can not add a null to an allocation class\");\n@@ -430,1 +430,1 @@\n-  for(_regDefs.reset(); (name = _regDefs.iter()) != NULL;) {\n+  for(_regDefs.reset(); (name = _regDefs.iter()) != nullptr;) {\n@@ -439,9 +439,9 @@\n-  _frame_pointer = NULL;\n-  _c_frame_pointer = NULL;\n-  _alignment = NULL;\n-  _return_addr = NULL;\n-  _c_return_addr = NULL;\n-  _varargs_C_out_slots_killed = NULL;\n-  _return_value = NULL;\n-  _c_return_value = NULL;\n-  _interpreter_frame_pointer_reg = NULL;\n+  _frame_pointer = nullptr;\n+  _c_frame_pointer = nullptr;\n+  _alignment = nullptr;\n+  _return_addr = nullptr;\n+  _c_return_addr = nullptr;\n+  _varargs_C_out_slots_killed = nullptr;\n+  _return_value = nullptr;\n+  _c_return_value = nullptr;\n+  _interpreter_frame_pointer_reg = nullptr;\n@@ -523,1 +523,1 @@\n-  for ( _reslist.reset(); (res = _reslist.iter()) != NULL; )\n+  for ( _reslist.reset(); (res = _reslist.iter()) != nullptr; )\n@@ -528,1 +528,1 @@\n-  for ( _stages.reset(); (stage = _stages.iter()) != NULL; )\n+  for ( _stages.reset(); (stage = _stages.iter()) != nullptr; )\n@@ -533,1 +533,1 @@\n-  for ( _classlist.reset(); (cls = _classlist.iter()) != NULL; )\n+  for ( _classlist.reset(); (cls = _classlist.iter()) != nullptr; )\n@@ -537,1 +537,1 @@\n-  for ( _noplist.reset(); (nop = _noplist.iter()) != NULL; )\n+  for ( _noplist.reset(); (nop = _noplist.iter()) != nullptr; )\n@@ -638,2 +638,2 @@\n-Peephole::Peephole() : _predicate(NULL), _match(NULL), _procedure(NULL),\n-                       _constraint(NULL), _replace(NULL), _next(NULL) {\n+Peephole::Peephole() : _predicate(nullptr), _match(nullptr), _procedure(nullptr),\n+                       _constraint(nullptr), _replace(nullptr), _next(nullptr) {\n@@ -647,1 +647,1 @@\n-  if( _next == NULL ) {\n+  if( _next == nullptr ) {\n@@ -656,1 +656,1 @@\n-  assert( _predicate == NULL, \"fatal()\" );\n+  assert( _predicate == nullptr, \"fatal()\" );\n@@ -662,1 +662,1 @@\n-  assert( _match == NULL, \"fatal()\" );\n+  assert( _match == nullptr, \"fatal()\" );\n@@ -668,1 +668,1 @@\n-  assert( _procedure == NULL, \"fatal()\" );\n+  assert( _procedure == nullptr, \"fatal()\" );\n@@ -673,1 +673,1 @@\n-  if( _constraint == NULL ) {\n+  if( _constraint == nullptr ) {\n@@ -681,1 +681,1 @@\n-  assert( _replace == NULL, \"fatal()\" );\n+  assert( _replace == nullptr, \"fatal()\" );\n@@ -694,3 +694,3 @@\n-  if( _match != NULL )       _match->output(fp);\n-  if( _constraint != NULL )  _constraint->output(fp);\n-  if( _replace != NULL )     _replace->output(fp);\n+  if( _match != nullptr )       _match->output(fp);\n+  if( _constraint != nullptr )  _constraint->output(fp);\n+  if( _replace != nullptr )     _replace->output(fp);\n@@ -796,1 +796,1 @@\n-    _right_inst(right_inst), _right_op(right_op), _next(NULL) {}\n+    _right_inst(right_inst), _right_op(right_op), _next(nullptr) {}\n@@ -807,1 +807,1 @@\n-  if( _next == NULL )  return false;\n+  if( _next == nullptr )  return false;\n@@ -813,1 +813,1 @@\n-  if( _next == NULL ) {\n+  if( _next == nullptr ) {\n","filename":"src\/hotspot\/share\/adlc\/formsopt.cpp","additions":55,"deletions":55,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -286,2 +286,2 @@\n-    assert((_rclasses[0] != NULL), \"Register class NULL for condition code == true\");\n-    assert((_rclasses[1] != NULL), \"Register class NULL for condition code == false\");\n+    assert((_rclasses[0] != nullptr), \"Register class null for condition code == true\");\n+    assert((_rclasses[1] != nullptr), \"Register class null for condition code == false\");\n@@ -692,1 +692,1 @@\n-  const char *_inst_op;          \/\/ Instruction's operand, NULL if number == -1\n+  const char *_inst_op;          \/\/ Instruction's operand, null if number == -1\n@@ -697,1 +697,1 @@\n-    : _inst_num(-1), _inst_op(NULL), _inst_name(inst_name) {};\n+    : _inst_num(-1), _inst_op(nullptr), _inst_name(inst_name) {};\n","filename":"src\/hotspot\/share\/adlc\/formsopt.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,3 +42,3 @@\n-      _matrule              = NULL;\n-      _insencode            = NULL;\n-      _constant             = NULL;\n+      _matrule              = nullptr;\n+      _insencode            = nullptr;\n+      _constant             = nullptr;\n@@ -46,10 +46,10 @@\n-      _opcode               = NULL;\n-      _size                 = NULL;\n-      _attribs              = NULL;\n-      _predicate            = NULL;\n-      _exprule              = NULL;\n-      _rewrule              = NULL;\n-      _format               = NULL;\n-      _peephole             = NULL;\n-      _ins_pipe             = NULL;\n-      _uniq_idx             = NULL;\n+      _opcode               = nullptr;\n+      _size                 = nullptr;\n+      _attribs              = nullptr;\n+      _predicate            = nullptr;\n+      _exprule              = nullptr;\n+      _rewrule              = nullptr;\n+      _format               = nullptr;\n+      _peephole             = nullptr;\n+      _ins_pipe             = nullptr;\n+      _uniq_idx             = nullptr;\n@@ -58,2 +58,2 @@\n-      _cisc_spill_alternate = NULL;            \/\/ possible cisc replacement\n-      _cisc_reg_mask_name   = NULL;\n+      _cisc_spill_alternate = nullptr;            \/\/ possible cisc replacement\n+      _cisc_reg_mask_name   = nullptr;\n@@ -62,1 +62,1 @@\n-      _short_branch_form    = NULL;\n+      _short_branch_form    = nullptr;\n@@ -92,2 +92,2 @@\n-      _cisc_spill_alternate  = NULL;               \/\/ possible cisc replacement\n-      _cisc_reg_mask_name    = NULL;\n+      _cisc_spill_alternate  = nullptr;               \/\/ possible cisc replacement\n+      _cisc_reg_mask_name    = nullptr;\n@@ -96,1 +96,1 @@\n-      _short_branch_form     = NULL;\n+      _short_branch_form     = nullptr;\n@@ -101,1 +101,1 @@\n-     for (; (name = instr->_parameters.iter()) != NULL;)\n+     for (; (name = instr->_parameters.iter()) != nullptr;)\n@@ -117,1 +117,1 @@\n-  return (_matrule != NULL && _matrule->sets_result());\n+  return (_matrule != nullptr && _matrule->sets_result());\n@@ -122,1 +122,1 @@\n-  for( Component *comp; (comp = _components.iter()) != NULL; ) {\n+  for( Component *comp; (comp = _components.iter()) != nullptr; ) {\n@@ -136,1 +136,1 @@\n-    Component *comp = NULL;\n+    Component *comp = nullptr;\n@@ -138,1 +138,1 @@\n-    while ((comp = _components.iter()) != NULL) {\n+    while ((comp = _components.iter()) != nullptr) {\n@@ -152,1 +152,1 @@\n-  for( Component *comp; (comp = _components.iter()) != NULL; ) {\n+  for( Component *comp; (comp = _components.iter()) != nullptr; ) {\n@@ -163,1 +163,1 @@\n-  return ( _exprule != NULL );\n+  return ( _exprule != nullptr );\n@@ -178,1 +178,1 @@\n-  if( _peephole == NULL ) {\n+  if( _peephole == nullptr ) {\n@@ -268,1 +268,1 @@\n-  if (_matrule == NULL)  return 0;\n+  if (_matrule == nullptr)  return 0;\n@@ -276,1 +276,1 @@\n-  if (_insencode != NULL) {\n+  if (_insencode != nullptr) {\n@@ -278,1 +278,1 @@\n-    if (_insencode->encode_class_iter() == NULL) {\n+    if (_insencode->encode_class_iter() == nullptr) {\n@@ -282,1 +282,1 @@\n-  if (_size != NULL && strcmp(_size, \"0\") == 0) {\n+  if (_size != nullptr && strcmp(_size, \"0\") == 0) {\n@@ -289,1 +289,1 @@\n-  if (_ident != NULL &&\n+  if (_ident != nullptr &&\n@@ -295,1 +295,1 @@\n-  if (_matrule != NULL && _insencode != NULL) {\n+  if (_matrule != nullptr && _insencode != nullptr) {\n@@ -301,1 +301,1 @@\n-              (_ident == NULL ? \"NULL\" : _ident));\n+              (_ident == nullptr ? \"nullptr\" : _ident));\n@@ -312,1 +312,1 @@\n-  if( _matrule == NULL ) return false;\n+  if( _matrule == nullptr ) return false;\n@@ -319,1 +319,1 @@\n-  if( _matrule == NULL ) return false;\n+  if( _matrule == nullptr ) return false;\n@@ -326,1 +326,1 @@\n-  if( _matrule == NULL ) return false;\n+  if( _matrule == nullptr ) return false;\n@@ -333,1 +333,1 @@\n-  if( _matrule == NULL ) return false;\n+  if( _matrule == nullptr ) return false;\n@@ -340,1 +340,1 @@\n-  if( _matrule == NULL ) return false;\n+  if( _matrule == nullptr ) return false;\n@@ -347,1 +347,1 @@\n-  if( _matrule == NULL ) return false;\n+  if( _matrule == nullptr ) return false;\n@@ -354,1 +354,1 @@\n-  if( _matrule == NULL ) return false;\n+  if( _matrule == nullptr ) return false;\n@@ -361,1 +361,1 @@\n-  if( _matrule == NULL ) return false;\n+  if( _matrule == nullptr ) return false;\n@@ -369,1 +369,1 @@\n-  if( _matrule == NULL ) return false;\n+  if( _matrule == nullptr ) return false;\n@@ -406,1 +406,1 @@\n-  if( _matrule == NULL ) return Form::invalid_type;\n+  if( _matrule == nullptr ) return Form::invalid_type;\n@@ -432,1 +432,1 @@\n-  if( _matrule == NULL ) return Form::none;\n+  if( _matrule == nullptr ) return Form::none;\n@@ -439,1 +439,1 @@\n-  if( _matrule == NULL ) return false;\n+  if( _matrule == nullptr ) return false;\n@@ -446,1 +446,1 @@\n-  if( _matrule == NULL ) return Form::none;\n+  if( _matrule == nullptr ) return Form::none;\n@@ -453,1 +453,1 @@\n-  if( _matrule == NULL ) return false;\n+  if( _matrule == nullptr ) return false;\n@@ -474,1 +474,1 @@\n-      if( op->constrained_reg_class() != NULL &&\n+      if( op->constrained_reg_class() != nullptr &&\n@@ -483,1 +483,1 @@\n-        } while( (comp = _components.iter()) != NULL);\n+        } while( (comp = _components.iter()) != nullptr);\n@@ -494,2 +494,2 @@\n-  const char *dummy  = NULL;\n-  const char *dummy2 = NULL;\n+  const char *dummy  = nullptr;\n+  const char *dummy2 = nullptr;\n@@ -500,1 +500,1 @@\n-  const char *result = NULL;\n+  const char *result = nullptr;\n@@ -513,3 +513,3 @@\n-  const char  *result   = NULL;\n-  const char  *name     = NULL;\n-  const char  *opType   = NULL;\n+  const char  *result   = nullptr;\n+  const char  *name     = nullptr;\n+  const char  *opType   = nullptr;\n@@ -536,1 +536,1 @@\n-      && _matrule->_rChild->_lChild == NULL\n+      && _matrule->_rChild->_lChild == nullptr\n@@ -586,1 +586,1 @@\n-          if( (type != NULL) && !strcmp(type, \"RegFlags\") )\n+          if( (type != nullptr) && !strcmp(type, \"RegFlags\") )\n@@ -623,1 +623,1 @@\n-  Component     *comp = NULL;\n+  Component     *comp = nullptr;\n@@ -627,1 +627,1 @@\n-  while( (comp = components.iter()) != NULL ) {\n+  while( (comp = components.iter()) != nullptr ) {\n@@ -654,4 +654,4 @@\n-  const char*    last_memory_DEF = NULL; \/\/ to test DEF\/USE pairing in asserts\n-  const char*    last_memory_USE = NULL;\n-  Component     *unique          = NULL;\n-  Component     *comp            = NULL;\n+  const char*    last_memory_DEF = nullptr; \/\/ to test DEF\/USE pairing in asserts\n+  const char*    last_memory_USE = nullptr;\n+  Component     *unique          = nullptr;\n+  Component     *comp            = nullptr;\n@@ -661,1 +661,1 @@\n-  while( (comp = components.iter()) != NULL ) {\n+  while( (comp = components.iter()) != nullptr ) {\n@@ -673,1 +673,1 @@\n-        if( last_memory_DEF != NULL ) {\n+        if( last_memory_DEF != nullptr ) {\n@@ -675,1 +675,1 @@\n-          last_memory_DEF = NULL;\n+          last_memory_DEF = nullptr;\n@@ -678,1 +678,1 @@\n-        if (last_memory_USE != NULL) {\n+        if (last_memory_USE != nullptr) {\n@@ -690,1 +690,1 @@\n-        assert(last_memory_DEF == NULL, \"unpaired memory DEF\");\n+        assert(last_memory_DEF == nullptr, \"unpaired memory DEF\");\n@@ -694,1 +694,1 @@\n-  assert(last_memory_DEF == NULL, \"unpaired memory DEF\");\n+  assert(last_memory_DEF == nullptr, \"unpaired memory DEF\");\n@@ -708,1 +708,1 @@\n-      assert(unique != NULL, \"\");\n+      assert(unique != nullptr, \"\");\n@@ -714,1 +714,1 @@\n-        \/\/ unique = NULL;\n+        \/\/ unique = nullptr;\n@@ -718,1 +718,1 @@\n-        unique = NULL;\n+        unique = nullptr;\n@@ -723,1 +723,1 @@\n-      unique = NULL;\n+      unique = nullptr;\n@@ -726,1 +726,1 @@\n-      assert(unique != NULL, \"\");\n+      assert(unique != nullptr, \"\");\n@@ -729,1 +729,1 @@\n-      unique = NULL;\n+      unique = nullptr;\n@@ -734,1 +734,1 @@\n-    if( unique == NULL ) {\n+    if( unique == nullptr ) {\n@@ -809,1 +809,1 @@\n-\/\/ Access instr_cost attribute or return NULL.\n+\/\/ Access instr_cost attribute or return null.\n@@ -811,1 +811,1 @@\n-  for (Attribute* cur = _attribs; cur != NULL; cur = (Attribute*)cur->_next) {\n+  for (Attribute* cur = _attribs; cur != nullptr; cur = (Attribute*)cur->_next) {\n@@ -816,1 +816,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -846,1 +846,1 @@\n-  return (_components.at(i) != NULL) ? _components.at(i)->_name : \"\";\n+  return (_components.at(i) != nullptr) ? _components.at(i)->_name : \"\";\n@@ -879,1 +879,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -939,2 +939,2 @@\n-  const char *kill_name = NULL;\n-  for (_parameters.reset(); (name = _parameters.iter()) != NULL;) {\n+  const char *kill_name = nullptr;\n+  for (_parameters.reset(); (name = _parameters.iter()) != nullptr;) {\n@@ -942,1 +942,1 @@\n-    assert(opForm != NULL, \"sanity\");\n+    assert(opForm != nullptr, \"sanity\");\n@@ -944,1 +944,1 @@\n-    Effect* e = NULL;\n+    Effect* e = nullptr;\n@@ -947,1 +947,1 @@\n-      e = form ? form->is_effect() : NULL;\n+      e = form ? form->is_effect() : nullptr;\n@@ -950,1 +950,1 @@\n-    if (e != NULL) {\n+    if (e != nullptr) {\n@@ -957,1 +957,1 @@\n-      if (kill_name != NULL &&\n+      if (kill_name != nullptr &&\n@@ -960,1 +960,1 @@\n-        assert(kill != NULL, \"sanity\");\n+        assert(kill != nullptr, \"sanity\");\n@@ -969,1 +969,1 @@\n-    if ( component  == NULL ) {\n+    if ( component  == nullptr ) {\n@@ -984,1 +984,1 @@\n-        \/\/ if (_matrule != NULL && !expands()) {\n+        \/\/ if (_matrule != nullptr && !expands()) {\n@@ -1019,1 +1019,1 @@\n-  if (_matrule == NULL && has_temp) {\n+  if (_matrule == nullptr && has_temp) {\n@@ -1055,1 +1055,1 @@\n-  if ( _matrule != NULL ) {\n+  if ( _matrule != nullptr ) {\n@@ -1057,3 +1057,3 @@\n-    const char  *result   = NULL;\n-    const char  *name     = NULL;\n-    const char  *opType   = NULL;\n+    const char  *result   = nullptr;\n+    const char  *name     = nullptr;\n+    const char  *opType   = nullptr;\n@@ -1074,1 +1074,1 @@\n-  while ( (comp = _components.iter()) != NULL ) {\n+  while ( (comp = _components.iter()) != nullptr ) {\n@@ -1079,1 +1079,1 @@\n-    if ( opc && (oper == NULL) ) {\n+    if ( opc && (oper == nullptr) ) {\n@@ -1110,1 +1110,1 @@\n-  if (comp != NULL && comp->isa(Component::DEF)) {\n+  if (comp != nullptr && comp->isa(Component::DEF)) {\n@@ -1121,1 +1121,1 @@\n-\/\/ Return NULL if there is no right hand side\n+\/\/ Return null if there is no right hand side\n@@ -1123,1 +1123,1 @@\n-  if( _matrule == NULL ) return NULL;\n+  if( _matrule == nullptr ) return nullptr;\n@@ -1129,1 +1129,1 @@\n-  if( _matrule == NULL ) return NULL;\n+  if( _matrule == nullptr ) return nullptr;\n@@ -1184,1 +1184,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1191,1 +1191,1 @@\n-  if( pred1 == NULL && pred2 == NULL ) {\n+  if( pred1 == nullptr && pred2 == nullptr ) {\n@@ -1195,1 +1195,1 @@\n-  if( pred1 != NULL && pred2 != NULL ) {\n+  if( pred1 != nullptr && pred2 != nullptr ) {\n@@ -1207,1 +1207,1 @@\n-  assert( _matrule != NULL && instr->_matrule != NULL, \"must have match rules\");\n+  assert( _matrule != nullptr && instr->_matrule != nullptr, \"must have match rules\");\n@@ -1212,4 +1212,4 @@\n-  char       *result             = NULL;\n-  char       *result2            = NULL;\n-  const char *op_name            = NULL;\n-  const char *reg_type           = NULL;\n+  char       *result             = nullptr;\n+  char       *result2            = nullptr;\n+  const char *op_name            = nullptr;\n+  const char *reg_type           = nullptr;\n@@ -1218,1 +1218,1 @@\n-  if( (cisc_spill_operand != Not_cisc_spillable) && (op_name != NULL) && equivalent_predicates(this, instr) ) {\n+  if( (cisc_spill_operand != Not_cisc_spillable) && (op_name != nullptr) && equivalent_predicates(this, instr) ) {\n@@ -1233,1 +1233,1 @@\n-      assert( oper != NULL, \"cisc-spilling non operand\");\n+      assert( oper != nullptr, \"cisc-spilling non operand\");\n@@ -1253,1 +1253,1 @@\n-  if (_matrule != NULL &&\n+  if (_matrule != nullptr &&\n@@ -1256,2 +1256,2 @@\n-      reduce_result() != NULL &&\n-      strstr(_ident, \"restoreMask\") == NULL && \/\/ Don't match side effects\n+      reduce_result() != nullptr &&\n+      strstr(_ident, \"restoreMask\") == nullptr && \/\/ Don't match side effects\n@@ -1274,1 +1274,1 @@\n-      while ((comp = _components.iter()) != NULL) {\n+      while ((comp = _components.iter()) != nullptr) {\n@@ -1276,1 +1276,1 @@\n-        if (short_comp == NULL ||\n+        if (short_comp == nullptr ||\n@@ -1283,1 +1283,1 @@\n-      if (short_branch->_components.iter() != NULL)\n+      if (short_branch->_components.iter() != nullptr)\n@@ -1320,1 +1320,1 @@\n-  if (form == NULL) {\n+  if (form == nullptr) {\n@@ -1340,1 +1340,1 @@\n-    if (oper != NULL && oper->is_bound_register()) {\n+    if (oper != nullptr && oper->is_bound_register()) {\n@@ -1358,1 +1358,1 @@\n-  uint* uniq_idx = NULL;\n+  uint* uniq_idx = nullptr;\n@@ -1376,1 +1376,1 @@\n-  if (nopnds > 0 && _matrule != NULL && _exprule == NULL) {\n+  if (nopnds > 0 && _matrule != nullptr && _exprule == nullptr) {\n@@ -1382,1 +1382,1 @@\n-    while ((name = _parameters.iter()) != NULL) {\n+    while ((name = _parameters.iter()) != nullptr) {\n@@ -1387,1 +1387,1 @@\n-      Component *comp = NULL;\n+      Component *comp = nullptr;\n@@ -1393,1 +1393,1 @@\n-      for (; (comp = _components.iter()) != NULL; ++position) {\n+      for (; (comp = _components.iter()) != nullptr; ++position) {\n@@ -1517,1 +1517,1 @@\n-  if (mnode != NULL) mnode->count_instr_names(names);\n+  if (mnode != nullptr) mnode->count_instr_names(names);\n@@ -1550,1 +1550,1 @@\n-  if( s == buf ) s = NULL;\n+  if( s == buf ) s = nullptr;\n@@ -1576,1 +1576,1 @@\n-  assert( className != NULL, \"Must provide a defined encoding name\");\n+  assert( className != nullptr, \"Must provide a defined encoding name\");\n@@ -1584,1 +1584,1 @@\n-  if( className == NULL ) return NULL;\n+  if( className == nullptr ) return nullptr;\n@@ -1587,1 +1587,1 @@\n-  assert( encClass != NULL, \"Encode Class is missing.\");\n+  assert( encClass != nullptr, \"Encode Class is missing.\");\n@@ -1590,1 +1590,1 @@\n-  assert( code != NULL, \"Found an empty encode class body.\");\n+  assert( code != nullptr, \"Found an empty encode class body.\");\n@@ -1597,1 +1597,1 @@\n-  assert( className != NULL, \"Encode class name must be non NULL.\");\n+  assert( className != nullptr, \"Encode class name must be non null.\");\n@@ -1610,1 +1610,1 @@\n-  for (_eclasses.reset(); (name = _eclasses.iter()) != NULL;) {\n+  for (_eclasses.reset(); (name = _eclasses.iter()) != nullptr;) {\n@@ -1648,1 +1648,1 @@\n-  const char *name     = NULL;\n+  const char *name     = nullptr;\n@@ -1651,1 +1651,1 @@\n-  while ( (name = _parameter_name.iter()) != NULL ) {\n+  while ( (name = _parameter_name.iter()) != nullptr ) {\n@@ -1682,1 +1682,1 @@\n-  for ( ; (type != NULL) && (name != NULL);\n+  for ( ; (type != nullptr) && (name != nullptr);\n@@ -1692,1 +1692,1 @@\n-  while ( (code = _code.iter()) != NULL ) {\n+  while ( (code = _code.iter()) != nullptr ) {\n@@ -1728,2 +1728,2 @@\n-  const char *description = NULL;\n-  const char *value       = NULL;\n+  const char *description = nullptr;\n+  const char *value       = nullptr;\n@@ -1735,1 +1735,1 @@\n-    if( _primary   != NULL)  { value = _primary;     }\n+    if( _primary   != nullptr)  { value = _primary;     }\n@@ -1739,1 +1739,1 @@\n-    if( _secondary != NULL ) { value = _secondary;   }\n+    if( _secondary != nullptr ) { value = _secondary;   }\n@@ -1743,1 +1743,1 @@\n-    if( _tertiary  != NULL ) { value = _tertiary;    }\n+    if( _tertiary  != nullptr ) { value = _tertiary;    }\n@@ -1750,1 +1750,1 @@\n-  if (value != NULL) {\n+  if (value != nullptr) {\n@@ -1753,1 +1753,1 @@\n-  return value != NULL;\n+  return value != nullptr;\n@@ -1762,3 +1762,3 @@\n-  if (_primary   != NULL) fprintf(fp,\"Primary   opcode: %s\\n\", _primary);\n-  if (_secondary != NULL) fprintf(fp,\"Secondary opcode: %s\\n\", _secondary);\n-  if (_tertiary  != NULL) fprintf(fp,\"Tertiary  opcode: %s\\n\", _tertiary);\n+  if (_primary   != nullptr) fprintf(fp,\"Primary   opcode: %s\\n\", _primary);\n+  if (_secondary != nullptr) fprintf(fp,\"Secondary opcode: %s\\n\", _secondary);\n+  if (_tertiary  != nullptr) fprintf(fp,\"Tertiary  opcode: %s\\n\", _tertiary);\n@@ -1775,1 +1775,1 @@\n-  assert( encoding != NULL, \"Must provide name for encoding\");\n+  assert( encoding != nullptr, \"Must provide name for encoding\");\n@@ -1791,1 +1791,1 @@\n-  return  ( encode_class != NULL ? encode_class->name() : NULL );\n+  return  ( encode_class != nullptr ? encode_class->name() : nullptr );\n@@ -1796,1 +1796,1 @@\n-  assert( params != NULL, \"Internal Error\");\n+  assert( params != nullptr, \"Internal Error\");\n@@ -1800,1 +1800,1 @@\n-  return ( param != NULL && *param == '$') ? (param+1) : param;\n+  return ( param != nullptr && *param == '$') ? (param+1) : param;\n@@ -1809,2 +1809,2 @@\n-  NameAndList *encoding  = NULL;\n-  const char  *parameter = NULL;\n+  NameAndList *encoding  = nullptr;\n+  const char  *parameter = nullptr;\n@@ -1923,2 +1923,2 @@\n-  NameAndList *expand_instr = NULL;\n-  const char *opid = NULL;\n+  NameAndList *expand_instr = nullptr;\n+  const char *opid = nullptr;\n@@ -1929,1 +1929,1 @@\n-  for(reset_instructions(); (expand_instr = iter_instructions()) != NULL; ) {\n+  for(reset_instructions(); (expand_instr = iter_instructions()) != nullptr; ) {\n@@ -1933,1 +1933,1 @@\n-    for( expand_instr->reset(); (opid = expand_instr->iter()) != NULL; ) {\n+    for( expand_instr->reset(); (opid = expand_instr->iter()) != nullptr; ) {\n@@ -1994,1 +1994,1 @@\n-  while( (op_name = op_list.iter()) != NULL ) {\n+  while( (op_name = op_list.iter()) != nullptr ) {\n@@ -2014,1 +2014,1 @@\n-  while( (op_name = op_list.iter()) != NULL ) {\n+  while( (op_name = op_list.iter()) != nullptr ) {\n@@ -2032,1 +2032,1 @@\n-  for(_oplst.reset(); (name = _oplst.iter()) != NULL;) {\n+  for(_oplst.reset(); (name = _oplst.iter()) != nullptr;) {\n@@ -2046,7 +2046,7 @@\n-      _matrule   = NULL;\n-      _interface = NULL;\n-      _attribs   = NULL;\n-      _predicate = NULL;\n-      _constraint= NULL;\n-      _construct = NULL;\n-      _format    = NULL;\n+      _matrule   = nullptr;\n+      _interface = nullptr;\n+      _attribs   = nullptr;\n+      _predicate = nullptr;\n+      _constraint= nullptr;\n+      _construct = nullptr;\n+      _format    = nullptr;\n@@ -2059,7 +2059,7 @@\n-      _matrule   = NULL;\n-      _interface = NULL;\n-      _attribs   = NULL;\n-      _predicate = NULL;\n-      _constraint= NULL;\n-      _construct = NULL;\n-      _format    = NULL;\n+      _matrule   = nullptr;\n+      _interface = nullptr;\n+      _attribs   = nullptr;\n+      _predicate = nullptr;\n+      _constraint= nullptr;\n+      _construct = nullptr;\n+      _format    = nullptr;\n@@ -2080,1 +2080,1 @@\n-  if( _interface == NULL )  return Form::no_interface;\n+  if( _interface == nullptr )  return Form::no_interface;\n@@ -2087,1 +2087,1 @@\n-  if( _constraint == NULL )  return false;\n+  if( _constraint == nullptr )  return false;\n@@ -2092,1 +2092,1 @@\n-\/\/ Access op_cost attribute or return NULL.\n+\/\/ Access op_cost attribute or return null.\n@@ -2094,1 +2094,1 @@\n-  for (Attribute* cur = _attribs; cur != NULL; cur = (Attribute*)cur->_next) {\n+  for (Attribute* cur = _attribs; cur != nullptr; cur = (Attribute*)cur->_next) {\n@@ -2099,1 +2099,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -2145,1 +2145,1 @@\n-    if( constrained_reg_class() != NULL ) {\n+    if( constrained_reg_class() != nullptr ) {\n@@ -2149,1 +2149,1 @@\n-          && (_matrule->_lChild == NULL) && (_matrule->_rChild == NULL) ) {\n+          && (_matrule->_lChild == nullptr) && (_matrule->_rChild == nullptr) ) {\n@@ -2151,1 +2151,1 @@\n-        OperandForm *oper = form ? form->is_operand() : NULL;\n+        OperandForm *oper = form ? form->is_operand() : nullptr;\n@@ -2178,1 +2178,1 @@\n-  if( _matrule == NULL ) return false;\n+  if( _matrule == nullptr ) return false;\n@@ -2186,1 +2186,1 @@\n-  if( _ident != NULL ) {\n+  if( _ident != nullptr ) {\n@@ -2193,1 +2193,1 @@\n-  assert((data_type == none) || (_matrule == NULL), \"No match-rule for stackSlotX\");\n+  assert((data_type == none) || (_matrule == nullptr), \"No match-rule for stackSlotX\");\n@@ -2201,1 +2201,1 @@\n-  const char *type = NULL;\n+  const char *type = nullptr;\n@@ -2203,1 +2203,1 @@\n-  else if( _matrule == NULL ) {\n+  else if( _matrule == nullptr ) {\n@@ -2207,1 +2207,1 @@\n-    if (rc_name == NULL) return NULL;\n+    if (rc_name == nullptr) return nullptr;\n@@ -2212,1 +2212,1 @@\n-      assert( reg_class != NULL, \"Register class is not defined\");\n+      assert( reg_class != nullptr, \"Register class is not defined\");\n@@ -2217,2 +2217,2 @@\n-      assert( reg_def != NULL, \"No entries in register class\");\n-      assert( reg_def->_idealtype != NULL, \"Did not define ideal type for register\");\n+      assert( reg_def != nullptr, \"No entries in register class\");\n+      assert( reg_def->_idealtype != nullptr, \"Did not define ideal type for register\");\n@@ -2226,1 +2226,1 @@\n-  else if( _matrule->_lChild == NULL && _matrule->_rChild == NULL ) {\n+  else if( _matrule->_lChild == nullptr && _matrule->_rChild == nullptr ) {\n@@ -2244,2 +2244,2 @@\n-  const char  *ideal_type = NULL;\n-  const char  *value      = NULL;\n+  const char  *ideal_type = nullptr;\n+  const char  *value      = nullptr;\n@@ -2260,1 +2260,1 @@\n-  if (_interface && !_interface->is_RegInterface()) return NULL;\n+  if (_interface && !_interface->is_RegInterface()) return nullptr;\n@@ -2267,1 +2267,1 @@\n-  if (reg_class == NULL) {\n+  if (reg_class == nullptr) {\n@@ -2272,1 +2272,1 @@\n-  if (name == NULL) {\n+  if (name == nullptr) {\n@@ -2305,1 +2305,1 @@\n-  const char *reg_class  = NULL;\n+  const char *reg_class  = nullptr;\n@@ -2320,1 +2320,1 @@\n-  const char *reg_class = NULL; \/\/ \"RegMask::Empty\";\n+  const char *reg_class = nullptr; \/\/ \"RegMask::Empty\";\n@@ -2322,1 +2322,1 @@\n-  if((_matrule == NULL) || (_matrule->is_chain_rule(globals))) {\n+  if((_matrule == nullptr) || (_matrule->is_chain_rule(globals))) {\n@@ -2326,3 +2326,3 @@\n-  const char *result   = NULL;\n-  const char *name     = NULL;\n-  const char *type     = NULL;\n+  const char *result   = nullptr;\n+  const char *name     = nullptr;\n+  const char *type     = nullptr;\n@@ -2335,1 +2335,1 @@\n-    OperandForm *oper = form ? form->is_operand() : NULL;\n+    OperandForm *oper = form ? form->is_operand() : nullptr;\n@@ -2348,1 +2348,1 @@\n-    if( reg_class == NULL)    ++leaf;\n+    if( reg_class == nullptr)    ++leaf;\n@@ -2351,1 +2351,1 @@\n-    \/\/ May iterate through all base operands if reg_class for 'leaf' is NULL\n+    \/\/ May iterate through all base operands if reg_class for 'leaf' is null\n@@ -2364,1 +2364,1 @@\n-  for (_parameters.reset(); (name = _parameters.iter()) != NULL;) {\n+  for (_parameters.reset(); (name = _parameters.iter()) != nullptr;) {\n@@ -2366,1 +2366,1 @@\n-    assert(opForm != NULL, \"sanity\");\n+    assert(opForm != nullptr, \"sanity\");\n@@ -2388,1 +2388,1 @@\n-  while( (comp = _components.iter()) != NULL  && (comp != last) ) {\n+  while( (comp = _components.iter()) != nullptr  && (comp != last) ) {\n@@ -2396,2 +2396,2 @@\n-    assert( form != NULL, \"Component's type not found\");\n-    OperandForm *oper = form ? form->is_operand() : NULL;\n+    assert( form != nullptr, \"Component's type not found\");\n+    OperandForm *oper = form ? form->is_operand() : nullptr;\n@@ -2426,1 +2426,1 @@\n-  while( (comp = _components.iter()) != NULL\n+  while( (comp = _components.iter()) != nullptr\n@@ -2435,2 +2435,2 @@\n-    assert( form != NULL, \"Component's type not found\");\n-    OperandForm *oper = form ? form->is_operand() : NULL;\n+    assert( form != nullptr, \"Component's type not found\");\n+    OperandForm *oper = form ? form->is_operand() : nullptr;\n@@ -2452,1 +2452,1 @@\n-\/\/ Return NULL if there is no right hand side\n+\/\/ Return null if there is no right hand side\n@@ -2454,1 +2454,1 @@\n-  return  ( _matrule ? _matrule->reduce_right(globals) : NULL );\n+  return  ( _matrule ? _matrule->reduce_right(globals) : nullptr );\n@@ -2459,1 +2459,1 @@\n-  return  ( _matrule ? _matrule->reduce_left(globals) : NULL );\n+  return  ( _matrule ? _matrule->reduce_left(globals) : nullptr );\n@@ -2468,1 +2468,1 @@\n-  if ( this->_interface == NULL ) return;\n+  if ( this->_interface == nullptr ) return;\n@@ -2470,1 +2470,1 @@\n-  if ( mem_interface == NULL )    return;\n+  if ( mem_interface == nullptr )    return;\n@@ -2477,1 +2477,1 @@\n-  assert( comp != NULL, \"Replacement variable not found in components\");\n+  assert( comp != nullptr, \"Replacement variable not found in components\");\n@@ -2481,1 +2481,1 @@\n-  assert( form != NULL, \"Replacement variable's type not found\");\n+  assert( form != nullptr, \"Replacement variable's type not found\");\n@@ -2566,1 +2566,1 @@\n-\/\/ Return the operand form corresponding to the given index, else NULL.\n+\/\/ Return the operand form corresponding to the given index, else null.\n@@ -2577,1 +2577,1 @@\n-    if ((comp = _components.iter()) == NULL) {\n+    if ((comp = _components.iter()) == nullptr) {\n@@ -2583,1 +2583,1 @@\n-    } \/\/ end if NULL\n+    } \/\/ end if null\n@@ -2597,1 +2597,1 @@\n-      } while((comp = _components.iter()) != NULL);\n+      } while((comp = _components.iter()) != nullptr);\n@@ -2602,1 +2602,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -2614,1 +2614,1 @@\n-  if ( _matrule == NULL )    return Form::none;\n+  if ( _matrule == nullptr )    return Form::none;\n@@ -2680,1 +2680,1 @@\n-  assert((_func != NULL && _arg != NULL),\"missing constraint function or arg\");\n+  assert((_func != nullptr && _arg != nullptr),\"missing constraint function or arg\");\n@@ -2716,1 +2716,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -2720,1 +2720,1 @@\n-  if ( strcmp(_name,\"MEMORY_INTER\") != 0 )  return NULL;\n+  if ( strcmp(_name,\"MEMORY_INTER\") != 0 )  return nullptr;\n@@ -2724,1 +2724,1 @@\n-  if ( strcmp(_name,\"CONST_INTER\") != 0 )  return NULL;\n+  if ( strcmp(_name,\"CONST_INTER\") != 0 )  return nullptr;\n@@ -2728,1 +2728,1 @@\n-  if ( strcmp(_name,\"COND_INTER\") != 0 )  return NULL;\n+  if ( strcmp(_name,\"COND_INTER\") != 0 )  return nullptr;\n@@ -2787,4 +2787,4 @@\n-  if ( _base  != NULL ) fprintf(fp,\"  base  == %s\\n\", _base);\n-  if ( _index != NULL ) fprintf(fp,\"  index == %s\\n\", _index);\n-  if ( _scale != NULL ) fprintf(fp,\"  scale == %s\\n\", _scale);\n-  if ( _disp  != NULL ) fprintf(fp,\"  disp  == %s\\n\", _disp);\n+  if ( _base  != nullptr ) fprintf(fp,\"  base  == %s\\n\", _base);\n+  if ( _index != nullptr ) fprintf(fp,\"  index == %s\\n\", _index);\n+  if ( _scale != nullptr ) fprintf(fp,\"  scale == %s\\n\", _scale);\n+  if ( _disp  != nullptr ) fprintf(fp,\"  disp  == %s\\n\", _disp);\n@@ -2824,8 +2824,8 @@\n-  if ( _equal  != NULL )     fprintf(fp,\" equal        == %s\\n\", _equal);\n-  if ( _not_equal  != NULL ) fprintf(fp,\" not_equal    == %s\\n\", _not_equal);\n-  if ( _less  != NULL )      fprintf(fp,\" less         == %s\\n\", _less);\n-  if ( _greater_equal  != NULL ) fprintf(fp,\" greater_equal    == %s\\n\", _greater_equal);\n-  if ( _less_equal  != NULL ) fprintf(fp,\" less_equal   == %s\\n\", _less_equal);\n-  if ( _greater  != NULL )    fprintf(fp,\" greater      == %s\\n\", _greater);\n-  if ( _overflow != NULL )    fprintf(fp,\" overflow     == %s\\n\", _overflow);\n-  if ( _no_overflow != NULL ) fprintf(fp,\" no_overflow  == %s\\n\", _no_overflow);\n+  if ( _equal  != nullptr )     fprintf(fp,\" equal        == %s\\n\", _equal);\n+  if ( _not_equal  != nullptr ) fprintf(fp,\" not_equal    == %s\\n\", _not_equal);\n+  if ( _less  != nullptr )      fprintf(fp,\" less         == %s\\n\", _less);\n+  if ( _greater_equal  != nullptr ) fprintf(fp,\" greater_equal    == %s\\n\", _greater_equal);\n+  if ( _less_equal  != nullptr ) fprintf(fp,\" less_equal   == %s\\n\", _less_equal);\n+  if ( _greater  != nullptr )    fprintf(fp,\" greater      == %s\\n\", _greater);\n+  if ( _overflow != nullptr )    fprintf(fp,\" overflow     == %s\\n\", _overflow);\n+  if ( _no_overflow != nullptr ) fprintf(fp,\" no_overflow  == %s\\n\", _no_overflow);\n@@ -2921,1 +2921,1 @@\n-  if (frm == NULL) return NULL;\n+  if (frm == nullptr) return nullptr;\n@@ -2923,1 +2923,1 @@\n-  if (op == NULL) return NULL;\n+  if (op == nullptr) return nullptr;\n@@ -2947,1 +2947,1 @@\n-  \/\/ for (reset(); (component = iter()) != NULL;) {\n+  \/\/ for (reset(); (component = iter()) != nullptr;) {\n@@ -2965,1 +2965,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -2970,1 +2970,1 @@\n-  if ( comp == NULL ) {\n+  if ( comp == nullptr ) {\n@@ -2986,1 +2986,1 @@\n-  if (position >= count()) return NULL;\n+  if (position >= count()) return nullptr;\n@@ -2989,2 +2989,2 @@\n-  Component *component = NULL;\n-  for (reset(); (component = iter()) != NULL;) {\n+  Component *component = nullptr;\n+  for (reset(); (component = iter()) != nullptr;) {\n@@ -2997,1 +2997,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -3003,1 +3003,1 @@\n-  for( Component *comp = NULL; ((comp = iter()) != NULL); ) {\n+  for( Component *comp = nullptr; ((comp = iter()) != nullptr); ) {\n@@ -3007,1 +3007,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -3018,2 +3018,2 @@\n-  Component *component  = NULL;\n-  for( reset(); (component = iter()) != NULL; ++position ) {\n+  Component *component  = nullptr;\n+  for( reset(); (component = iter()) != nullptr; ++position ) {\n@@ -3036,3 +3036,3 @@\n-  Component* preceding_non_use = NULL;\n-  Component* first_def = NULL;\n-  for (reset(); (component = iter()) != NULL; ++position) {\n+  Component* preceding_non_use = nullptr;\n+  Component* first_def = nullptr;\n+  for (reset(); (component = iter()) != nullptr; ++position) {\n@@ -3082,1 +3082,1 @@\n-      preceding_non_use = NULL;\n+      preceding_non_use = nullptr;\n@@ -3093,1 +3093,1 @@\n-  for (reset(); (component = iter()) != NULL; ++position) {\n+  for (reset(); (component = iter()) != nullptr; ++position) {\n@@ -3123,1 +3123,1 @@\n-  for( Component *comp; (comp = iter()) != NULL; ++position) {\n+  for( Component *comp; (comp = iter()) != nullptr; ++position) {\n@@ -3146,1 +3146,1 @@\n-  for( Component *comp; (comp = iter()) != NULL; ++position) {\n+  for( Component *comp; (comp = iter()) != nullptr; ++position) {\n@@ -3171,1 +3171,1 @@\n-  for (reset(); (component = iter()) != NULL;) {\n+  for (reset(); (component = iter()) != nullptr;) {\n@@ -3202,1 +3202,1 @@\n-    _lChild = NULL;\n+    _lChild = nullptr;\n@@ -3207,1 +3207,1 @@\n-    _rChild = NULL;\n+    _rChild = nullptr;\n@@ -3218,2 +3218,2 @@\n-  if ( (_lChild != NULL) && (_lChild->find_type(type, position)) ) return true;\n-  if ( (_rChild != NULL) && (_rChild->find_type(type, position)) ) return true;\n+  if ( (_lChild != nullptr) && (_lChild->find_type(type, position)) ) return true;\n+  if ( (_rChild != nullptr) && (_rChild->find_type(type, position)) ) return true;\n@@ -3236,1 +3236,1 @@\n-  assert (_name != NULL, \"MatchNode::build_components encountered empty node\\n\");\n+  assert (_name != nullptr, \"MatchNode::build_components encountered empty node\\n\");\n@@ -3238,1 +3238,1 @@\n-  if (_lChild==NULL && _rChild==NULL) {\n+  if (_lChild==nullptr && _rChild==nullptr) {\n@@ -3241,1 +3241,1 @@\n-    if( f != NULL ) {\n+    if( f != nullptr ) {\n@@ -3265,1 +3265,1 @@\n-  assert (_name != NULL, \"MatchNode::base_operand encountered empty node\\n\");\n+  assert (_name != nullptr, \"MatchNode::base_operand encountered empty node\\n\");\n@@ -3267,1 +3267,1 @@\n-  if (_lChild==NULL && _rChild==NULL) {\n+  if (_lChild==nullptr && _rChild==nullptr) {\n@@ -3282,1 +3282,1 @@\n-    MatchNode *matchNode = NULL;\n+    MatchNode *matchNode = nullptr;\n@@ -3372,2 +3372,2 @@\n-  \/\/ If there is no right reduction, return NULL.\n-  const char      *rightStr    = NULL;\n+  \/\/ If there is no right reduction, return null.\n+  const char      *rightStr    = nullptr;\n@@ -3385,1 +3385,1 @@\n-  \/\/ Else, May be simple chain rule: (Set dst operand_form), rightStr=NULL;\n+  \/\/ Else, May be simple chain rule: (Set dst operand_form), rightStr=nullptr;\n@@ -3390,2 +3390,2 @@\n-  \/\/ If there is no left reduction, return NULL.\n-  const char  *leftStr  = NULL;\n+  \/\/ If there is no left reduction, return null.\n+  const char  *leftStr  = nullptr;\n@@ -3483,1 +3483,1 @@\n-  if (iop == NULL) {\n+  if (iop == nullptr) {\n@@ -3642,3 +3642,3 @@\n-    const InstructForm *form2_inst = form2 ? form2->is_instruction() : NULL;\n-    const char *name_left  = mRule2->_lChild ? mRule2->_lChild->_opType : NULL;\n-    const char *name_right = mRule2->_rChild ? mRule2->_rChild->_opType : NULL;\n+    const InstructForm *form2_inst = form2 ? form2->is_instruction() : nullptr;\n+    const char *name_left  = mRule2->_lChild ? mRule2->_lChild->_opType : nullptr;\n+    const char *name_right = mRule2->_rChild ? mRule2->_rChild->_opType : nullptr;\n@@ -3655,2 +3655,2 @@\n-        && (name_left != NULL)       \/\/ NOT (load)\n-        && (name_right == NULL) ) {  \/\/ NOT (load memory foo)\n+        && (name_left != nullptr)       \/\/ NOT (load)\n+        && (name_right == nullptr) ) {  \/\/ NOT (load memory foo)\n@@ -3668,1 +3668,1 @@\n-    else if (form->is_cisc_reg(globals) && form2 != NULL && form2->is_cisc_mem(globals)) {\n+    else if (form->is_cisc_reg(globals) && form2 != nullptr && form2->is_cisc_mem(globals)) {\n@@ -3684,1 +3684,1 @@\n-    if( (_lChild == NULL) && (mRule2->_lChild == NULL) ) {\n+    if( (_lChild == nullptr) && (mRule2->_lChild == nullptr) ) {\n@@ -3686,1 +3686,1 @@\n-    } else  if (_lChild != NULL) {\n+    } else  if (_lChild != nullptr) {\n@@ -3691,1 +3691,1 @@\n-    if( (_rChild == NULL) && (mRule2->_rChild == NULL) ) {\n+    if( (_rChild == nullptr) && (mRule2->_rChild == nullptr) ) {\n@@ -3693,1 +3693,1 @@\n-    } else if (_rChild != NULL) {\n+    } else if (_rChild != nullptr) {\n@@ -3721,1 +3721,1 @@\n-  if( (_lChild == NULL) || (mRule2->_lChild == NULL) ) {\n+  if( (_lChild == nullptr) || (mRule2->_lChild == nullptr) ) {\n@@ -3733,2 +3733,2 @@\n-  if (_rChild == NULL) {\n-    if (mRule2->_rChild == NULL) {\n+  if (_rChild == nullptr) {\n+    if (mRule2->_rChild == nullptr) {\n@@ -3737,1 +3737,1 @@\n-      assert(0, \"_rChild should not be NULL\");\n+      assert(0, \"_rChild should not be null\");\n@@ -3771,1 +3771,1 @@\n-    return false; \/\/ I have NULL left child, mRule2 has non-NULL left child.\n+    return false; \/\/ I have null left child, mRule2 has non-null left child.\n@@ -3778,1 +3778,1 @@\n-    return false; \/\/ I have NULL right child, mRule2 has non-NULL right child.\n+    return false; \/\/ I have null right child, mRule2 has non-null right child.\n@@ -3806,1 +3806,1 @@\n-    return false; \/\/ I have NULL left child, mNode2 has non-NULL left child.\n+    return false; \/\/ I have null left child, mNode2 has non-null left child.\n@@ -3813,1 +3813,1 @@\n-    return false; \/\/ I have NULL right child, mNode2 has non-NULL right child.\n+    return false; \/\/ I have null right child, mNode2 has non-null right child.\n@@ -3843,1 +3843,1 @@\n-    if (_rChild->_lChild == NULL && _rChild->_rChild == NULL) {\n+    if (_rChild->_lChild == nullptr && _rChild->_rChild == nullptr) {\n@@ -3941,2 +3941,2 @@\n-  : MatchNode(ad), _depth(0), _construct(NULL), _numchilds(0) {\n-    _next = NULL;\n+  : MatchNode(ad), _depth(0), _construct(nullptr), _numchilds(0) {\n+    _next = nullptr;\n@@ -3948,1 +3948,1 @@\n-    _next = NULL;\n+    _next = nullptr;\n@@ -3955,3 +3955,3 @@\n-      _next = NULL;\n-      mroot->_lChild = NULL;\n-      mroot->_rChild = NULL;\n+      _next = nullptr;\n+      mroot->_lChild = nullptr;\n+      mroot->_rChild = nullptr;\n@@ -3968,1 +3968,1 @@\n-  assert (_name != NULL, \"MatchNode::build_components encountered empty node\\n\");\n+  assert (_name != nullptr, \"MatchNode::build_components encountered empty node\\n\");\n@@ -3989,3 +3989,3 @@\n-  const char  *result   = NULL;\n-  const char  *name     = NULL;\n-  const char  *opType   = NULL;\n+  const char  *result   = nullptr;\n+  const char  *name     = nullptr;\n+  const char  *opType   = nullptr;\n@@ -4017,3 +4017,3 @@\n-  const char  *result   = NULL;\n-  const char  *name     = NULL;\n-  const char  *opType   = NULL;\n+  const char  *result   = nullptr;\n+  const char  *name     = nullptr;\n+  const char  *opType   = nullptr;\n@@ -4032,1 +4032,1 @@\n-  if ((_lChild == NULL) && (_rChild == NULL) ) {\n+  if ((_lChild == nullptr) && (_rChild == nullptr) ) {\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":315,"deletions":315,"binary":false,"changes":630,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -142,1 +142,1 @@\n-  \/\/ Return this instruction's first peephole rule, or NULL\n+  \/\/ Return this instruction's first peephole rule, or null\n@@ -241,1 +241,1 @@\n-  \/\/ Return NULL if there is no right hand side\n+  \/\/ Return null if there is no right hand side\n@@ -271,1 +271,1 @@\n-  bool                has_short_branch_form() { return _short_branch_form != NULL; }\n+  bool                has_short_branch_form() { return _short_branch_form != nullptr; }\n@@ -283,1 +283,1 @@\n-    if (_uniq_idx != NULL && idx > 0) {\n+    if (_uniq_idx != nullptr && idx > 0) {\n@@ -344,1 +344,1 @@\n-  \/\/ There is an entry in _strings, perhaps NULL, that precedes each _rep_vars\n+  \/\/ There is an entry in _strings, perhaps null, that precedes each _rep_vars\n@@ -626,1 +626,1 @@\n-  virtual const char *ideal_type(FormDict &globals, RegisterForm *registers = NULL) const;\n+  virtual const char *ideal_type(FormDict &globals, RegisterForm *registers = nullptr) const;\n@@ -634,1 +634,1 @@\n-  \/\/ Return the Register class for this operand.  Returns NULL if\n+  \/\/ Return the Register class for this operand.  Returns null if\n@@ -663,1 +663,1 @@\n-  \/\/ Return the operand form corresponding to the given index, else NULL.\n+  \/\/ Return the operand form corresponding to the given index, else null.\n@@ -671,1 +671,1 @@\n-  \/\/ Return NULL if there is no right hand side\n+  \/\/ Return null if there is no right hand side\n@@ -946,2 +946,2 @@\n-            const char *opType=0, MatchNode *lChild=NULL,\n-            MatchNode *rChild=NULL);\n+            const char *opType=0, MatchNode *lChild=nullptr,\n+            MatchNode *rChild=nullptr);\n@@ -977,1 +977,1 @@\n-  \/\/ Return NULL if there is no left or right hand side\n+  \/\/ Return null if there is no left or right hand side\n@@ -1083,1 +1083,1 @@\n-  \/\/ There is an entry in _strings, perhaps NULL, that precedes each _rep_vars\n+  \/\/ There is an entry in _strings, perhaps null, that precedes each _rep_vars\n","filename":"src\/hotspot\/share\/adlc\/formssel.hpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-ArchDesc* globalAD = NULL;      \/\/ global reference to Architecture Description object\n+ArchDesc* globalAD = nullptr;      \/\/ global reference to Architecture Description object\n@@ -121,1 +121,1 @@\n-            if (def == NULL)  def = (char*)\"1\";\n+            if (def == nullptr)  def = (char*)\"1\";\n@@ -130,1 +130,1 @@\n-            AD.set_preproc_def(flag, NULL);\n+            AD.set_preproc_def(flag, nullptr);\n@@ -369,1 +369,1 @@\n-      (ADF._fp = fopen(ADF._name, action)) == NULL) {\n+      (ADF._fp = fopen(ADF._name, action)) == nullptr) {\n@@ -380,1 +380,1 @@\n-  if (_ADL_file._name == NULL)\n+  if (_ADL_file._name == nullptr)\n","filename":"src\/hotspot\/share\/adlc\/main.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -58,2 +58,2 @@\n-    RegDef *reg_def = NULL;\n-    RegDef *next = NULL;\n+    RegDef *reg_def = nullptr;\n+    RegDef *next = nullptr;\n@@ -61,1 +61,1 @@\n-    for (reg_def = registers->iter_RegDefs(); reg_def != NULL; reg_def = next) {\n+    for (reg_def = registers->iter_RegDefs(); reg_def != nullptr; reg_def = next) {\n@@ -63,1 +63,1 @@\n-      const char *comma = (next != NULL) ? \",\" : \" \/\/ no trailing comma\";\n+      const char *comma = (next != nullptr) ? \",\" : \" \/\/ no trailing comma\";\n@@ -73,2 +73,2 @@\n-    reg_def = NULL;\n-    next = NULL;\n+    reg_def = nullptr;\n+    next = nullptr;\n@@ -76,1 +76,1 @@\n-    for (reg_def = registers->iter_RegDefs(); reg_def != NULL; reg_def = next) {\n+    for (reg_def = registers->iter_RegDefs(); reg_def != nullptr; reg_def = next) {\n@@ -78,1 +78,1 @@\n-      const char *comma = (next != NULL) ? \",\" : \" \/\/ no trailing comma\";\n+      const char *comma = (next != nullptr) ? \",\" : \" \/\/ no trailing comma\";\n@@ -98,2 +98,2 @@\n-    RegDef *reg_def = NULL;\n-    RegDef *next    = NULL;\n+    RegDef *reg_def = nullptr;\n+    RegDef *next    = nullptr;\n@@ -101,1 +101,1 @@\n-    for (reg_def = registers->iter_RegDefs(); reg_def != NULL; reg_def = next) {\n+    for (reg_def = registers->iter_RegDefs(); reg_def != nullptr; reg_def = next) {\n@@ -104,1 +104,1 @@\n-      const char *comma = (next != NULL) ? \",\" : \" \/\/ no trailing comma\";\n+      const char *comma = (next != nullptr) ? \",\" : \" \/\/ no trailing comma\";\n@@ -128,1 +128,1 @@\n-    for (const char *class_name = NULL; (class_name = registers->_rclasses.iter()) != NULL;) {\n+    for (const char *class_name = nullptr; (class_name = registers->_rclasses.iter()) != nullptr;) {\n@@ -152,1 +152,1 @@\n-    for (rc_name = NULL; (rc_name = _register->_rclasses.iter()) != NULL;) {\n+    for (rc_name = nullptr; (rc_name = _register->_rclasses.iter()) != nullptr;) {\n@@ -170,1 +170,1 @@\n-    for (rc_name = NULL; (rc_name = _register->_rclasses.iter()) != NULL;) {\n+    for (rc_name = nullptr; (rc_name = _register->_rclasses.iter()) != nullptr;) {\n@@ -195,1 +195,1 @@\n-  while ( (paramname = pipeclass->_parameters.iter()) != NULL ) {\n+  while ( (paramname = pipeclass->_parameters.iter()) != nullptr ) {\n@@ -224,1 +224,1 @@\n-  while ( (paramname = pipeclass->_parameters.iter()) != NULL ) {\n+  while ( (paramname = pipeclass->_parameters.iter()) != nullptr ) {\n@@ -264,1 +264,1 @@\n-       (piperesource = (const PipeClassResourceForm *)pipeclass->_resUsage.iter()) != NULL; ) {\n+       (piperesource = (const PipeClassResourceForm *)pipeclass->_resUsage.iter()) != nullptr; ) {\n@@ -350,1 +350,1 @@\n-       (piperesource = (const PipeClassResourceForm *)pipeclass->_resUsage.iter()) != NULL; ) {\n+       (piperesource = (const PipeClassResourceForm *)pipeclass->_resUsage.iter()) != nullptr; ) {\n@@ -442,1 +442,1 @@\n-       (piperesource = (const PipeClassResourceForm*)pipeclass->_resUsage.iter()) != NULL; ) {\n+       (piperesource = (const PipeClassResourceForm*)pipeclass->_resUsage.iter()) != nullptr; ) {\n@@ -472,1 +472,1 @@\n-  char * last_comma = NULL;\n+  char * last_comma = nullptr;\n@@ -477,1 +477,1 @@\n-       (piperesource = (const PipeClassResourceForm*)pipeclass->_resUsage.iter()) != NULL; ) {\n+       (piperesource = (const PipeClassResourceForm*)pipeclass->_resUsage.iter()) != nullptr; ) {\n@@ -729,2 +729,2 @@\n-  fprintf(fp_cpp, \"  assert(this, \\\"NULL pipeline info\\\");\\n\");\n-  fprintf(fp_cpp, \"  assert(pred, \\\"NULL predecessor pipline info\\\");\\n\\n\");\n+  fprintf(fp_cpp, \"  assert(this, \\\"null pipeline info\\\");\\n\");\n+  fprintf(fp_cpp, \"  assert(pred, \\\"null predecessor pipline info\\\");\\n\\n\");\n@@ -793,1 +793,1 @@\n-       (resourcename = _pipeline->_reslist.iter()) != NULL;\n+       (resourcename = _pipeline->_reslist.iter()) != nullptr;\n@@ -798,2 +798,2 @@\n-  fprintf(fp_cpp, \"static const Pipeline pipeline_class_Zero_Instructions(0, 0, true, 0, 0, false, false, false, false, NULL, NULL, NULL, Pipeline_Use(0, 0, 0, NULL));\\n\\n\");\n-  fprintf(fp_cpp, \"static const Pipeline pipeline_class_Unknown_Instructions(0, 0, true, 0, 0, false, true, true, false, NULL, NULL, NULL, Pipeline_Use(0, 0, 0, NULL));\\n\\n\");\n+  fprintf(fp_cpp, \"static const Pipeline pipeline_class_Zero_Instructions(0, 0, true, 0, 0, false, false, false, false, nullptr, nullptr, nullptr, Pipeline_Use(0, 0, 0, nullptr));\\n\\n\");\n+  fprintf(fp_cpp, \"static const Pipeline pipeline_class_Unknown_Instructions(0, 0, true, 0, 0, false, true, true, false, nullptr, nullptr, nullptr, Pipeline_Use(0, 0, 0, nullptr));\\n\\n\");\n@@ -814,1 +814,1 @@\n-  for (_pipeline->_classlist.reset(); (classname = _pipeline->_classlist.iter()) != NULL; ) {\n+  for (_pipeline->_classlist.reset(); (classname = _pipeline->_classlist.iter()) != nullptr; ) {\n@@ -826,1 +826,1 @@\n-    for (pipeclass->_parameters.reset(); (paramname = pipeclass->_parameters.iter()) != NULL; ) {\n+    for (pipeclass->_parameters.reset(); (paramname = pipeclass->_parameters.iter()) != nullptr; ) {\n@@ -866,1 +866,1 @@\n-         (piperesource = (const PipeClassResourceForm *)pipeclass->_resUsage.iter()) != NULL; ) {\n+         (piperesource = (const PipeClassResourceForm *)pipeclass->_resUsage.iter()) != nullptr; ) {\n@@ -879,1 +879,1 @@\n-           (piperesource = (const PipeClassResourceForm *)pipeclass->_resUsage.iter()) != NULL;\n+           (piperesource = (const PipeClassResourceForm *)pipeclass->_resUsage.iter()) != nullptr;\n@@ -913,1 +913,1 @@\n-      fprintf(fp_cpp, \" NULL,\");\n+      fprintf(fp_cpp, \" nullptr,\");\n@@ -924,1 +924,1 @@\n-      fprintf(fp_cpp, \"NULL\");\n+      fprintf(fp_cpp, \"nullptr\");\n@@ -985,1 +985,1 @@\n-  for ( _pipeline->_noplist.reset(); (nop = _pipeline->_noplist.iter()) != NULL; nopcnt++ );\n+  for ( _pipeline->_noplist.reset(); (nop = _pipeline->_noplist.iter()) != nullptr; nopcnt++ );\n@@ -989,1 +989,1 @@\n-  for ( _pipeline->_noplist.reset(); (nop = _pipeline->_noplist.iter()) != NULL; i++ ) {\n+  for ( _pipeline->_noplist.reset(); (nop = _pipeline->_noplist.iter()) != nullptr; i++ ) {\n@@ -1061,1 +1061,1 @@\n-  const char* inst_name     = NULL;\n+  const char* inst_name     = nullptr;\n@@ -1066,1 +1066,1 @@\n-       inst_name != NULL;\n+       inst_name != nullptr;\n@@ -1078,1 +1078,1 @@\n-        fprintf(fp, \"n->as_Mach() : NULL;\\n  }\\n\");\n+        fprintf(fp, \"n->as_Mach() : nullptr;\\n  }\\n\");\n@@ -1084,1 +1084,1 @@\n-        fprintf(fp, \"  matches = matches && (inst%d != NULL) && (inst%d->rule() == %s_rule);\\n\",\n+        fprintf(fp, \"  matches = matches && (inst%d != nullptr) && (inst%d->rule() == %s_rule);\\n\",\n@@ -1099,1 +1099,1 @@\n-  const char* inst_name     = NULL;\n+  const char* inst_name     = nullptr;\n@@ -1104,1 +1104,1 @@\n-       inst_name != NULL;\n+       inst_name != nullptr;\n@@ -1110,1 +1110,1 @@\n-      if( inst != NULL ) {\n+      if( inst != nullptr ) {\n@@ -1130,1 +1130,1 @@\n-  if( pconstraint != NULL ) {\n+  if( pconstraint != nullptr ) {\n@@ -1133,1 +1133,1 @@\n-    while( pconstraint != NULL ) {\n+    while( pconstraint != nullptr ) {\n@@ -1317,1 +1317,1 @@\n-  if( preplace != NULL ) {\n+  if( preplace != nullptr ) {\n@@ -1319,1 +1319,1 @@\n-    const char *root_inst = NULL;\n+    const char *root_inst = nullptr;\n@@ -1322,1 +1322,1 @@\n-    assert( root_form != NULL, \"Replacement instruction was not previously defined\");\n+    assert( root_form != nullptr, \"Replacement instruction was not previously defined\");\n@@ -1331,1 +1331,1 @@\n-         op_name != NULL;\n+         op_name != nullptr;\n@@ -1366,1 +1366,1 @@\n-        if( (op_form == NULL) || (op_form->is_base_constant(globals) == Form::none) ) {\n+        if( (op_form == nullptr) || (op_form->is_base_constant(globals) == Form::none) ) {\n@@ -1413,1 +1413,1 @@\n-  \/\/   MachNode  *inst0 = NULL;\n+  \/\/   MachNode  *inst0 = nullptr;\n@@ -1415,1 +1415,1 @@\n-  \/\/   MachNode  *instMAX = NULL;\n+  \/\/   MachNode  *instMAX = nullptr;\n@@ -1419,2 +1419,2 @@\n-  for( peep = node->peepholes(); peep != NULL; peep = peep->next() ) {\n-    if (peep->procedure() != NULL) {\n+  for( peep = node->peepholes(); peep != nullptr; peep = peep->next() ) {\n+    if (peep->procedure() != nullptr) {\n@@ -1424,1 +1424,1 @@\n-    assert( pmatch != NULL, \"fatal(), missing peepmatch rule\");\n+    assert( pmatch != nullptr, \"fatal(), missing peepmatch rule\");\n@@ -1431,1 +1431,1 @@\n-      fprintf(fp, \"  MachNode *inst%d = NULL;\\n\", i);\n+      fprintf(fp, \"  MachNode *inst%d = nullptr;\\n\", i);\n@@ -1439,1 +1439,1 @@\n-  for( peep = node->peepholes(); peep != NULL; peep = peep->next() ) {\n+  for( peep = node->peepholes(); peep != nullptr; peep = peep->next() ) {\n@@ -1453,2 +1453,2 @@\n-            peephole_number, ppredicate != NULL ? ppredicate->rule() : \"true\");\n-    if (pprocedure == NULL) {\n+            peephole_number, ppredicate != nullptr ? ppredicate->rule() : \"true\");\n+    if (pprocedure == nullptr) {\n@@ -1472,1 +1472,1 @@\n-      const char* replace_inst = NULL;\n+      const char* replace_inst = nullptr;\n@@ -1482,1 +1482,1 @@\n-      const char* inst_name     = NULL;\n+      const char* inst_name     = nullptr;\n@@ -1486,1 +1486,1 @@\n-           inst_name != NULL;\n+           inst_name != nullptr;\n@@ -1520,4 +1520,4 @@\n-    const char   *new_id   = NULL;\n-    const Form   *frm      = NULL;\n-    InstructForm *new_inst = NULL;\n-    OperandForm  *new_oper = NULL;\n+    const char   *new_id   = nullptr;\n+    const Form   *frm      = nullptr;\n+    InstructForm *new_inst = nullptr;\n+    OperandForm  *new_oper = nullptr;\n@@ -1530,1 +1530,1 @@\n-          (new_id = node->_exprule->_newopers.iter()) != NULL; cnt++) {\n+          (new_id = node->_exprule->_newopers.iter()) != nullptr; cnt++) {\n@@ -1535,1 +1535,1 @@\n-        if (tmp == NULL) {\n+        if (tmp == nullptr) {\n@@ -1552,1 +1552,1 @@\n-        fprintf(fp,\"  MachNode *tmp%d = NULL;\\n\", i);\n+        fprintf(fp,\"  MachNode *tmp%d = nullptr;\\n\", i);\n@@ -1582,1 +1582,1 @@\n-    fprintf(fp,\"  MachNode *result = NULL;\\n\");\n+    fprintf(fp,\"  MachNode *result = nullptr;\\n\");\n@@ -1586,1 +1586,1 @@\n-    NameAndList *expand_instr = NULL;\n+    NameAndList *expand_instr = nullptr;\n@@ -1588,1 +1588,1 @@\n-         (expand_instr = expand->iter_instructions()) != NULL; cnt++) {\n+         (expand_instr = expand->iter_instructions()) != nullptr; cnt++) {\n@@ -1649,1 +1649,1 @@\n-      for( expand_instr->reset(); (opid = expand_instr->iter()) != NULL; ) {\n+      for( expand_instr->reset(); (opid = expand_instr->iter()) != nullptr; ) {\n@@ -1670,1 +1670,1 @@\n-            fprintf(fp,\"  if(tmp%d != NULL)\\n\", exp_pos);\n+            fprintf(fp,\"  if(tmp%d != nullptr)\\n\", exp_pos);\n@@ -1679,1 +1679,1 @@\n-          if (prev_pos > exp_pos && expand_instruction->_matrule != NULL) {\n+          if (prev_pos > exp_pos && expand_instruction->_matrule != nullptr) {\n@@ -1751,1 +1751,1 @@\n-    Component *comp = NULL;\n+    Component *comp = nullptr;\n@@ -1757,1 +1757,1 @@\n-    while ((comp = node->_components.iter()) != NULL) {\n+    while ((comp = node->_components.iter()) != nullptr) {\n@@ -1810,1 +1810,1 @@\n-  if( !node->expands() && node->_matrule != NULL ) {\n+  if( !node->expands() && node->_matrule != nullptr ) {\n@@ -1817,1 +1817,1 @@\n-      Component *comp = NULL;\n+      Component *comp = nullptr;\n@@ -1958,2 +1958,2 @@\n-    _opclass       = NULL;\n-    _operand       = NULL;\n+    _opclass       = nullptr;\n+    _operand       = nullptr;\n@@ -1989,1 +1989,1 @@\n-        assert( _opclass == NULL,\n+        assert( _opclass == nullptr,\n@@ -2013,1 +2013,1 @@\n-        if (inst_rep_var == NULL) {\n+        if (inst_rep_var == nullptr) {\n@@ -2017,1 +2017,1 @@\n-          assert(false, \"inst_rep_var == NULL, cannot continue.\");\n+          assert(false, \"inst_rep_var == null, cannot continue.\");\n@@ -2022,1 +2022,1 @@\n-        OpClassForm *opc       = (local != NULL) ? local->is_opclass() : NULL;\n+        OpClassForm *opc       = (local != nullptr) ? local->is_opclass() : nullptr;\n@@ -2026,1 +2026,1 @@\n-        int idx  = (opc != NULL) ? _inst.operand_position_format(inst_rep_var) : -1;\n+        int idx  = (opc != nullptr) ? _inst.operand_position_format(inst_rep_var) : -1;\n@@ -2038,1 +2038,1 @@\n-          assert( _operand == NULL, \"Unimplemented()\");\n+          assert( _operand == nullptr, \"Unimplemented()\");\n@@ -2051,1 +2051,1 @@\n-        else if((_AD.get_registers() != NULL ) && (_AD.get_registers()->getRegDef(inst_rep_var) != NULL)) {\n+        else if((_AD.get_registers() != nullptr ) && (_AD.get_registers()->getRegDef(inst_rep_var) != nullptr)) {\n@@ -2058,1 +2058,1 @@\n-          assert(opc != NULL && strcmp(opc->_ident, \"label\") == 0, \"Unimplemented Label\");\n+          assert(opc != nullptr && strcmp(opc->_ident, \"label\") == 0, \"Unimplemented Label\");\n@@ -2071,1 +2071,1 @@\n-        if( _operand == NULL ) {\n+        if( _operand == nullptr ) {\n@@ -2080,1 +2080,1 @@\n-          assert( ( _operand->_interface != NULL ),\n+          assert( ( _operand->_interface != nullptr ),\n@@ -2083,1 +2083,1 @@\n-          assert( mem_interface != NULL,\n+          assert( mem_interface != nullptr,\n@@ -2087,1 +2087,1 @@\n-          if( disp != NULL && (*disp == '$') ) {\n+          if( disp != nullptr && (*disp == '$') ) {\n@@ -2094,1 +2094,1 @@\n-            assert( comp != NULL,\"Replacement variable not found in components\");\n+            assert( comp != nullptr,\"Replacement variable not found in components\");\n@@ -2098,1 +2098,1 @@\n-            assert( form != NULL, \"Replacement variable's type not found\");\n+            assert( form != nullptr, \"Replacement variable's type not found\");\n@@ -2158,1 +2158,1 @@\n-        if (strcmp(rep_var,\"$reg\") == 0 || reg_conversion(rep_var) != NULL) {\n+        if (strcmp(rep_var,\"$reg\") == 0 || reg_conversion(rep_var) != nullptr) {\n@@ -2221,1 +2221,1 @@\n-    while ( (rep_var = _strings_to_emit.iter()) != NULL ) {\n+    while ( (rep_var = _strings_to_emit.iter()) != nullptr ) {\n@@ -2227,1 +2227,1 @@\n-        if (_strings_to_emit.peek() != NULL &&\n+        if (_strings_to_emit.peek() != nullptr &&\n@@ -2261,1 +2261,1 @@\n-          if (next != NULL && next2 != NULL && strcmp(next2, \"$Register\") == 0 &&\n+          if (next != nullptr && next2 != nullptr && strcmp(next2, \"$Register\") == 0 &&\n@@ -2366,1 +2366,1 @@\n-    return NULL;\n+    return nullptr;\n@@ -2373,1 +2373,1 @@\n-    if ( strcmp(rep_var, \"$reg\") == 0 || reg_convert != NULL) {\n+    if ( strcmp(rep_var, \"$reg\") == 0 || reg_convert != nullptr) {\n@@ -2382,1 +2382,1 @@\n-          if (reg_convert != NULL) {\n+          if (reg_convert != nullptr) {\n@@ -2388,1 +2388,1 @@\n-          fprintf(_fp,\"->%s(ra_,this\", reg_convert != NULL ? reg_convert : \"reg\");\n+          fprintf(_fp,\"->%s(ra_,this\", reg_convert != nullptr ? reg_convert : \"reg\");\n@@ -2462,1 +2462,1 @@\n-      if ((_inst._opcode == NULL) || !_inst._opcode->print_opcode(_fp, Opcode::as_opcode_type(rep_var) )) {\n+      if ((_inst._opcode == nullptr) || !_inst._opcode->print_opcode(_fp, Opcode::as_opcode_type(rep_var) )) {\n@@ -2491,1 +2491,1 @@\n-      OpClassForm *opc       = (local != NULL) ? local->is_opclass() : NULL;\n+      OpClassForm *opc       = (local != nullptr) ? local->is_opclass() : nullptr;\n@@ -2495,1 +2495,1 @@\n-      int idx  = (opc != NULL) ? _inst.operand_position_format(inst_rep_var) : -1;\n+      int idx  = (opc != nullptr) ? _inst.operand_position_format(inst_rep_var) : -1;\n@@ -2518,1 +2518,1 @@\n-        if ((_inst._opcode == NULL) || !_inst._opcode->print_opcode(_fp, Opcode::as_opcode_type(inst_rep_var) )) {\n+        if ((_inst._opcode == nullptr) || !_inst._opcode->print_opcode(_fp, Opcode::as_opcode_type(inst_rep_var) )) {\n@@ -2527,1 +2527,1 @@\n-      else if((_AD.get_registers() != NULL ) && (_AD.get_registers()->getRegDef(inst_rep_var) != NULL)) {\n+      else if((_AD.get_registers() != nullptr ) && (_AD.get_registers()->getRegDef(inst_rep_var) != nullptr)) {\n@@ -2536,1 +2536,1 @@\n-        assert(opc != NULL && strcmp(opc->_ident, \"label\") == 0, \"Unimplemented Label\");\n+        assert(opc != nullptr && strcmp(opc->_ident, \"label\") == 0, \"Unimplemented Label\");\n@@ -2571,1 +2571,1 @@\n-  assert((_encode != NULL) && (ins_encode != NULL), \"You must define an encode section.\");\n+  assert((_encode != nullptr) && (ins_encode != nullptr), \"You must define an encode section.\");\n@@ -2580,1 +2580,1 @@\n-  assert(ec_name != NULL, \"Postalloc expand must specify an encoding.\");\n+  assert(ec_name != nullptr, \"Postalloc expand must specify an encoding.\");\n@@ -2583,1 +2583,1 @@\n-  if (encoding == NULL) {\n+  if (encoding == nullptr) {\n@@ -2604,1 +2604,1 @@\n-  for (; (type != NULL) && (name != NULL);\n+  for (; (type != nullptr) && (name != nullptr);\n@@ -2634,2 +2634,2 @@\n-  const char *ec_code    = NULL;\n-  const char *ec_rep_var = NULL;\n+  const char *ec_code    = nullptr;\n+  const char *ec_rep_var = nullptr;\n@@ -2644,1 +2644,1 @@\n-  while ((ec_code = encoding->_code.iter()) != NULL) {\n+  while ((ec_code = encoding->_code.iter()) != nullptr) {\n@@ -2666,1 +2666,1 @@\n-  assert(ec_name == NULL, \"Postalloc expand may only have one encoding.\");\n+  assert(ec_name == nullptr, \"Postalloc expand may only have one encoding.\");\n@@ -2679,1 +2679,1 @@\n-  if( (_encode == NULL) || (encode == NULL) ) {\n+  if( (_encode == nullptr) || (encode == nullptr) ) {\n@@ -2700,1 +2700,1 @@\n-  while ((ec_name = encode->encode_class_iter()) != NULL) {\n+  while ((ec_name = encode->encode_class_iter()) != nullptr) {\n@@ -2705,2 +2705,2 @@\n-    const char *ec_code    = NULL;\n-    const char *ec_rep_var = NULL;\n+    const char *ec_code    = nullptr;\n+    const char *ec_rep_var = nullptr;\n@@ -2708,1 +2708,1 @@\n-    if (encoding == NULL) {\n+    if (encoding == nullptr) {\n@@ -2725,1 +2725,1 @@\n-    while ((ec_code = encoding->_code.iter()) != NULL) {\n+    while ((ec_code = encoding->_code.iter()) != nullptr) {\n@@ -2769,1 +2769,1 @@\n-  if ((_encode == NULL) || (encode == NULL)) {\n+  if ((_encode == nullptr) || (encode == nullptr)) {\n@@ -2779,1 +2779,1 @@\n-  while ((ec_name = encode->encode_class_iter()) != NULL) {\n+  while ((ec_name = encode->encode_class_iter()) != nullptr) {\n@@ -2784,2 +2784,2 @@\n-    const char *ec_code    = NULL;\n-    const char *ec_rep_var = NULL;\n+    const char *ec_code    = nullptr;\n+    const char *ec_rep_var = nullptr;\n@@ -2787,1 +2787,1 @@\n-    if (encoding == NULL) {\n+    if (encoding == nullptr) {\n@@ -2804,1 +2804,1 @@\n-    while ((ec_code = encoding->_code.iter()) != NULL) {\n+    while ((ec_code = encoding->_code.iter()) != nullptr) {\n@@ -2852,1 +2852,1 @@\n-    assert(first_reg_class != NULL, \"did not find register mask\");\n+    assert(first_reg_class != nullptr, \"did not find register mask\");\n@@ -2856,1 +2856,1 @@\n-      assert(some_reg_class != NULL, \"did not find register mask\");\n+      assert(some_reg_class != nullptr, \"did not find register mask\");\n@@ -2879,1 +2879,1 @@\n-        assert(reg_class != NULL, \"did not find register mask\");\n+        assert(reg_class != nullptr, \"did not find register mask\");\n@@ -2890,1 +2890,1 @@\n-      fprintf(fp,\"  return NULL;\\n\");\n+      fprintf(fp,\"  return nullptr;\\n\");\n@@ -2931,1 +2931,1 @@\n-  OperandForm *op = NULL;\n+  OperandForm *op = nullptr;\n@@ -2938,1 +2938,1 @@\n-    assert( comp != NULL, \"Replacement variable not found in components\");\n+    assert( comp != nullptr, \"Replacement variable not found in components\");\n@@ -2942,1 +2942,1 @@\n-    assert( form != NULL, \"Replacement variable's type not found\");\n+    assert( form != nullptr, \"Replacement variable's type not found\");\n@@ -2958,1 +2958,1 @@\n-    assert( comp != NULL, \"Replacement variable not found in components\");\n+    assert( comp != nullptr, \"Replacement variable not found in components\");\n@@ -2962,1 +2962,1 @@\n-    assert( form != NULL, \"Replacement variable's type not found\");\n+    assert( form != nullptr, \"Replacement variable's type not found\");\n@@ -2978,1 +2978,1 @@\n-  if( op != NULL ) {\n+  if( op != nullptr ) {\n@@ -2994,1 +2994,1 @@\n-  if( op != NULL ) {\n+  if( op != nullptr ) {\n@@ -3031,1 +3031,1 @@\n-    assert( comp != NULL, \"Replacement variable not found in components\");\n+    assert( comp != nullptr, \"Replacement variable not found in components\");\n@@ -3035,1 +3035,1 @@\n-    assert( form != NULL, \"Replacement variable's type not found\");\n+    assert( form != nullptr, \"Replacement variable's type not found\");\n@@ -3083,2 +3083,2 @@\n-        && base != NULL && is_regI(base, oper, globals)\n-        && disp != NULL && is_conP(disp, oper, globals) ) {\n+        && base != nullptr && is_regI(base, oper, globals)\n+        && disp != nullptr && is_conP(disp, oper, globals) ) {\n@@ -3089,1 +3089,1 @@\n-      \/\/ Provide a non-NULL return for disp_as_type() that will allow adr_type()\n+      \/\/ Provide a non-null return for disp_as_type() that will allow adr_type()\n@@ -3158,1 +3158,1 @@\n-  for( ; (oper = (OperandForm*)_operands.iter()) != NULL; ) {\n+  for( ; (oper = (OperandForm*)_operands.iter()) != nullptr; ) {\n@@ -3220,1 +3220,1 @@\n-  for( ; (instr = (InstructForm*)_instructions.iter()) != NULL; ) {\n+  for( ; (instr = (InstructForm*)_instructions.iter()) != nullptr; ) {\n@@ -3230,1 +3230,1 @@\n-  for( ; (instr = (InstructForm*)_instructions.iter()) != NULL; ) {\n+  for( ; (instr = (InstructForm*)_instructions.iter()) != nullptr; ) {\n@@ -3238,1 +3238,1 @@\n-        (instr->_matrule != NULL &&\n+        (instr->_matrule != nullptr &&\n@@ -3257,1 +3257,1 @@\n-  while( (instr = (InstructForm*)_instructions.iter()) != NULL ) {\n+  while( (instr = (InstructForm*)_instructions.iter()) != nullptr ) {\n@@ -3283,1 +3283,1 @@\n-  while( (instr = (InstructForm*)_instructions.iter()) != NULL ) {\n+  while( (instr = (InstructForm*)_instructions.iter()) != nullptr ) {\n@@ -3301,1 +3301,1 @@\n-  while( (instr = (InstructForm*)_instructions.iter()) != NULL ) {\n+  while( (instr = (InstructForm*)_instructions.iter()) != nullptr ) {\n@@ -3321,1 +3321,1 @@\n-  for( ; (instr = (InstructForm*)_instructions.iter()) != NULL; ) {\n+  for( ; (instr = (InstructForm*)_instructions.iter()) != nullptr; ) {\n@@ -3344,1 +3344,1 @@\n-  for( ; (instr = (InstructForm*)_instructions.iter()) != NULL; ) {\n+  for( ; (instr = (InstructForm*)_instructions.iter()) != nullptr; ) {\n@@ -3365,1 +3365,1 @@\n-  for ( ; (instr = (InstructForm*)_instructions.iter()) != NULL; ) {\n+  for ( ; (instr = (InstructForm*)_instructions.iter()) != nullptr; ) {\n@@ -3375,1 +3375,1 @@\n-    max_ident_len, \"Node\", _pipeline ? \"(&pipeline_class_Zero_Instructions)\" : \"NULL\");\n+    max_ident_len, \"Node\", _pipeline ? \"(&pipeline_class_Zero_Instructions)\" : \"nullptr\");\n@@ -3377,1 +3377,1 @@\n-    max_ident_len, \"Node\", _pipeline ? \"(&pipeline_class_Zero_Instructions)\" : \"NULL\");\n+    max_ident_len, \"Node\", _pipeline ? \"(&pipeline_class_Zero_Instructions)\" : \"nullptr\");\n@@ -3381,1 +3381,1 @@\n-    max_ident_len, \"MachNode\", _pipeline ? \"(&pipeline_class_Unknown_Instructions)\" : \"NULL\");\n+    max_ident_len, \"MachNode\", _pipeline ? \"(&pipeline_class_Unknown_Instructions)\" : \"nullptr\");\n@@ -3389,2 +3389,2 @@\n-  if (_pipeline != NULL) {\n-    for ( ; (machnode = (MachNodeForm*)_machnodes.iter()) != NULL; ) {\n+  if (_pipeline != nullptr) {\n+    for ( ; (machnode = (MachNodeForm*)_machnodes.iter()) != nullptr; ) {\n@@ -3401,2 +3401,2 @@\n-  if (_pipeline != NULL) {\n-    for ( ; (instr = (InstructForm*)_instructions.iter()) != NULL; ) {\n+  if (_pipeline != nullptr) {\n+    for ( ; (instr = (InstructForm*)_instructions.iter()) != nullptr; ) {\n@@ -3435,1 +3435,1 @@\n-    const char *reduce = (oper._matrule ? oper.reduce_result() : NULL);\n+    const char *reduce = (oper._matrule ? oper.reduce_result() : nullptr);\n@@ -3442,1 +3442,1 @@\n-    const char *reduce = (inst._matrule ? inst.reduce_result() : NULL);\n+    const char *reduce = (inst._matrule ? inst.reduce_result() : nullptr);\n@@ -3591,1 +3591,1 @@\n-  for(; (op = (OperandForm*)_operands.iter()) != NULL; ) {\n+  for(; (op = (OperandForm*)_operands.iter()) != nullptr; ) {\n@@ -3604,1 +3604,1 @@\n-  for(; (opc = (OpClassForm*)_opclass.iter()) != NULL; ) {\n+  for(; (opc = (OpClassForm*)_opclass.iter()) != nullptr; ) {\n@@ -3613,2 +3613,2 @@\n-  char *name = NULL;\n-  for(; (name = (char *)_internalOpNames.iter()) != NULL; ) {\n+  char *name = nullptr;\n+  for(; (name = (char *)_internalOpNames.iter()) != nullptr; ) {\n@@ -3627,1 +3627,1 @@\n-      for(; (inst = (InstructForm*)_instructions.iter()) != NULL; ) {\n+      for(; (inst = (InstructForm*)_instructions.iter()) != nullptr; ) {\n@@ -3638,1 +3638,1 @@\n-      for(; (inst = (InstructForm*)_instructions.iter()) != NULL; ) {\n+      for(; (inst = (InstructForm*)_instructions.iter()) != nullptr; ) {\n@@ -3652,1 +3652,1 @@\n-      for(; (inst = (InstructForm*)_instructions.iter()) != NULL; ) {\n+      for(; (inst = (InstructForm*)_instructions.iter()) != nullptr; ) {\n@@ -3663,1 +3663,1 @@\n-      for(; (inst = (InstructForm*)_instructions.iter()) != NULL; ) {\n+      for(; (inst = (InstructForm*)_instructions.iter()) != nullptr; ) {\n@@ -3752,1 +3752,1 @@\n-  for( rdef = _register->iter_RegDefs(); rdef != NULL; rdef = next ) {\n+  for( rdef = _register->iter_RegDefs(); rdef != nullptr; rdef = next ) {\n@@ -3755,1 +3755,1 @@\n-    const char *comma = (next != NULL) ? \",\" : \" \/\/ no trailing comma\";\n+    const char *comma = (next != nullptr) ? \",\" : \" \/\/ no trailing comma\";\n@@ -3764,1 +3764,1 @@\n-  for( rdef = _register->iter_RegDefs(); rdef != NULL; rdef = next ) {\n+  for( rdef = _register->iter_RegDefs(); rdef != nullptr; rdef = next ) {\n@@ -3767,1 +3767,1 @@\n-    const char *comma = (next != NULL) ? \",\" : \" \/\/ no trailing comma\";\n+    const char *comma = (next != nullptr) ? \",\" : \" \/\/ no trailing comma\";\n@@ -3776,1 +3776,1 @@\n-  for( rdef = _register->iter_RegDefs(); rdef != NULL; rdef = next ) {\n+  for( rdef = _register->iter_RegDefs(); rdef != nullptr; rdef = next ) {\n@@ -3778,1 +3778,1 @@\n-    const char *comma = (next != NULL) ? \",\" : \" \/\/ no trailing comma\";\n+    const char *comma = (next != nullptr) ? \",\" : \" \/\/ no trailing comma\";\n@@ -3815,3 +3815,3 @@\n-  const char *result   = NULL;\n-  const char *name     = NULL;\n-  const char *optype   = NULL;\n+  const char *result   = nullptr;\n+  const char *name     = nullptr;\n+  const char *optype   = nullptr;\n@@ -3821,1 +3821,1 @@\n-  if ( (mnode->_lChild == NULL) && (mnode->_rChild == NULL)\n+  if ( (mnode->_lChild == nullptr) && (mnode->_rChild == nullptr)\n@@ -3915,1 +3915,1 @@\n-  for( ; (op =  (OperandForm*)_operands.iter()) != NULL; ) {\n+  for( ; (op =  (OperandForm*)_operands.iter()) != nullptr; ) {\n@@ -3927,1 +3927,1 @@\n-  for( ; (iopn =  _internalOpNames.iter()) != NULL; ) {\n+  for( ; (iopn =  _internalOpNames.iter()) != nullptr; ) {\n@@ -3931,1 +3931,1 @@\n-    fprintf(fp_cpp, \"    return NULL;\\n\");\n+    fprintf(fp_cpp, \"    return nullptr;\\n\");\n@@ -3943,1 +3943,1 @@\n-  fprintf(fp_cpp, \"  return NULL;\\n\");\n+  fprintf(fp_cpp, \"  return nullptr;\\n\");\n@@ -3951,1 +3951,1 @@\n-  const char *opType  = NULL;\n+  const char *opType  = nullptr;\n@@ -3963,1 +3963,1 @@\n-    Component     *comp      = NULL;\n+    Component     *comp      = nullptr;\n@@ -3965,1 +3965,1 @@\n-    if ( comp_list.match_iter() != NULL )    dont_care = true;\n+    if ( comp_list.match_iter() != nullptr )    dont_care = true;\n@@ -4044,1 +4044,1 @@\n-    if (inst_cisc != NULL) {\n+    if (inst_cisc != nullptr) {\n@@ -4057,1 +4057,1 @@\n-  if( AD.can_cisc_spill() && (inst_cisc != NULL) ) {\n+  if( AD.can_cisc_spill() && (inst_cisc != nullptr) ) {\n@@ -4061,1 +4061,1 @@\n-    assert( cisc_oper != NULL, \"insanity check\");\n+    assert( cisc_oper != nullptr, \"insanity check\");\n@@ -4063,1 +4063,1 @@\n-    assert( cisc_oper_name != NULL, \"insanity check\");\n+    assert( cisc_oper_name != nullptr, \"insanity check\");\n@@ -4173,1 +4173,1 @@\n-  for( ; (inst = (InstructForm*)_instructions.iter()) != NULL; ) {\n+  for( ; (inst = (InstructForm*)_instructions.iter()) != nullptr; ) {\n@@ -4175,1 +4175,1 @@\n-    if ( inst->_matrule == NULL ) continue;\n+    if ( inst->_matrule == nullptr ) continue;\n@@ -4179,1 +4179,1 @@\n-    char       *opType  = NULL;\n+    char       *opType  = nullptr;\n@@ -4202,1 +4202,1 @@\n-  fprintf(fp_cpp, \"  return NULL;\\n\");\n+  fprintf(fp_cpp, \"  return nullptr;\\n\");\n@@ -4271,1 +4271,1 @@\n-  if (_frame->_interpreter_frame_pointer_reg == NULL)\n+  if (_frame->_interpreter_frame_pointer_reg == nullptr)\n@@ -4295,1 +4295,1 @@\n-  while( (rdef = _register->iter_RegDefs()) != NULL ) {\n+  while( (rdef = _register->iter_RegDefs()) != nullptr ) {\n@@ -4311,1 +4311,1 @@\n-  if (_frame == NULL)\n+  if (_frame == nullptr)\n@@ -4315,1 +4315,1 @@\n-  if( _frame->_cisc_spilling_operand_name != NULL ) {\n+  if( _frame->_cisc_spilling_operand_name != nullptr ) {\n@@ -4317,1 +4317,1 @@\n-    OperandForm *oper = form ? form->is_operand() : NULL;\n+    OperandForm *oper = form ? form->is_operand() : nullptr;\n@@ -4319,1 +4319,1 @@\n-    if( oper != NULL ) {\n+    if( oper != nullptr ) {\n@@ -4321,1 +4321,1 @@\n-      if ( oper->_matrule != NULL )  {\n+      if ( oper->_matrule != nullptr )  {\n@@ -4326,1 +4326,1 @@\n-          if( left != NULL && right != NULL ) {\n+          if( left != nullptr && right != nullptr ) {\n@@ -4329,1 +4329,1 @@\n-            if(  (left_op != NULL && right_op != NULL)\n+            if(  (left_op != nullptr && right_op != nullptr)\n@@ -4344,1 +4344,1 @@\n-  if( cisc_spill_operand() != NULL ) {\n+  if( cisc_spill_operand() != nullptr ) {\n@@ -4348,1 +4348,1 @@\n-    for( ; (instr = (InstructForm*)_instructions.iter()) != NULL; ) {\n+    for( ; (instr = (InstructForm*)_instructions.iter()) != nullptr; ) {\n@@ -4350,1 +4350,1 @@\n-      if ( instr->_matrule == NULL )  continue;\n+      if ( instr->_matrule == nullptr )  continue;\n@@ -4366,1 +4366,1 @@\n-      for( ; !found_cisc_alternate && (instr2 = (InstructForm*)_instructions.iter2()) != NULL; ) {\n+      for( ; !found_cisc_alternate && (instr2 = (InstructForm*)_instructions.iter2()) != nullptr; ) {\n@@ -4369,1 +4369,1 @@\n-        if ( instr2->_matrule != NULL\n+        if ( instr2->_matrule != nullptr\n@@ -4371,1 +4371,1 @@\n-            && (instr2->reduce_result() != NULL) \/\/ want same result\n+            && (instr2->reduce_result() != nullptr) \/\/ want same result\n@@ -4388,2 +4388,2 @@\n-  InstructForm *inst = NULL;\n-  for(; (inst = (InstructForm*)_instructions.iter()) != NULL; ) {\n+  InstructForm *inst = nullptr;\n+  for(; (inst = (InstructForm*)_instructions.iter()) != nullptr; ) {\n@@ -4409,1 +4409,1 @@\n-  while( (instr = (InstructForm*)_instructions.iter()) != NULL ) {\n+  while( (instr = (InstructForm*)_instructions.iter()) != nullptr ) {\n@@ -4411,1 +4411,1 @@\n-    if (instr->_matrule != NULL &&\n+    if (instr->_matrule != nullptr &&\n@@ -4416,1 +4416,1 @@\n-      while( (instr2 = (InstructForm*)_instructions.iter2()) != NULL ) {\n+      while( (instr2 = (InstructForm*)_instructions.iter2()) != nullptr ) {\n@@ -4430,1 +4430,1 @@\n-  while( (instr = (InstructForm*)_instructions.iter()) != NULL ) {\n+  while( (instr = (InstructForm*)_instructions.iter()) != nullptr ) {\n","filename":"src\/hotspot\/share\/adlc\/output_c.cpp","additions":217,"deletions":217,"binary":false,"changes":434,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    RegDef *reg_def = NULL;\n+    RegDef *reg_def = nullptr;\n@@ -65,1 +65,1 @@\n-    while( (reg_def = _register->iter_RegDefs()) != NULL ) {\n+    while( (reg_def = _register->iter_RegDefs()) != nullptr ) {\n@@ -87,1 +87,1 @@\n-    while( (reg_def = _register->iter_RegDefs()) != NULL ) {\n+    while( (reg_def = _register->iter_RegDefs()) != nullptr ) {\n@@ -125,2 +125,2 @@\n-    RegDef *reg_def = NULL;\n-    RegDef *reg_def_next = NULL;\n+    RegDef *reg_def = nullptr;\n+    RegDef *reg_def_next = nullptr;\n@@ -139,1 +139,1 @@\n-    while (reg_def != NULL) {\n+    while (reg_def != nullptr) {\n@@ -148,1 +148,1 @@\n-    while( (reg_def = reg_def_next) != NULL ) {\n+    while( (reg_def = reg_def_next) != nullptr ) {\n@@ -152,1 +152,1 @@\n-      fprintf(fp_hpp,\" = %3s%s\\n\", reg_def->register_encode(), reg_def_next == NULL? \"\" : \",\" );\n+      fprintf(fp_hpp,\" = %3s%s\\n\", reg_def->register_encode(), reg_def_next == nullptr? \"\" : \",\" );\n@@ -209,1 +209,1 @@\n-  if ((comp = oper->_components.iter()) == NULL) {\n+  if ((comp = oper->_components.iter()) == nullptr) {\n@@ -248,1 +248,1 @@\n-  } \/\/ end if NULL\n+  } \/\/ end if null\n@@ -251,1 +251,1 @@\n-    while ((comp = oper->_components.iter()) != NULL) {\n+    while ((comp = oper->_components.iter()) != nullptr) {\n@@ -306,1 +306,1 @@\n-  if ((comp = lst.iter()) == NULL) {\n+  if ((comp = lst.iter()) == nullptr) {\n@@ -323,1 +323,1 @@\n-  } \/\/ end if NULL\n+  } \/\/ end if null\n@@ -326,1 +326,1 @@\n-    while((comp = lst.iter()) != NULL) {\n+    while((comp = lst.iter()) != nullptr) {\n@@ -387,1 +387,1 @@\n-  assert(oper != NULL, \"what\");\n+  assert(oper != nullptr, \"what\");\n@@ -465,1 +465,1 @@\n-      const char  *string  = NULL;\n+      const char  *string  = nullptr;\n@@ -468,1 +468,1 @@\n-      while ( (string = oper._format->_strings.iter()) != NULL ) {\n+      while ( (string = oper._format->_strings.iter()) != nullptr ) {\n@@ -480,1 +480,1 @@\n-          if (form == NULL) {\n+          if (form == nullptr) {\n@@ -497,1 +497,1 @@\n-          if ( op != NULL ) op->int_format(fp, globals, idx);\n+          if ( op != nullptr ) op->int_format(fp, globals, idx);\n@@ -511,1 +511,1 @@\n-  } else { \/\/ oper._format == NULL\n+  } else { \/\/ oper._format == null\n@@ -536,1 +536,1 @@\n-      const char  *string  = NULL;\n+      const char  *string  = nullptr;\n@@ -539,1 +539,1 @@\n-      while ( (string = oper._format->_strings.iter()) != NULL ) {\n+      while ( (string = oper._format->_strings.iter()) != nullptr ) {\n@@ -551,1 +551,1 @@\n-          if (form == NULL) {\n+          if (form == nullptr) {\n@@ -567,1 +567,1 @@\n-          if ( op != NULL )   op->ext_format(fp, globals, idx);\n+          if ( op != nullptr )   op->ext_format(fp, globals, idx);\n@@ -583,1 +583,1 @@\n-  } else { \/\/ oper._format == NULL\n+  } else { \/\/ oper._format is null\n@@ -620,1 +620,1 @@\n-    const char  *string  = NULL;\n+    const char  *string  = nullptr;\n@@ -623,1 +623,1 @@\n-    while( (string = inst._format->_strings.iter()) != NULL ) {\n+    while( (string = inst._format->_strings.iter()) != nullptr ) {\n@@ -632,1 +632,1 @@\n-        if (form == NULL) {\n+        if (form == nullptr) {\n@@ -715,1 +715,1 @@\n-    fprintf(fp,  \"  if (ra->C->alias_type(adr_type())->field() != NULL) {\\n\");\n+    fprintf(fp,  \"  if (ra->C->alias_type(adr_type())->field() != nullptr) {\\n\");\n@@ -828,1 +828,1 @@\n-  for (_pipeline->_reslist.reset(); (resource = _pipeline->_reslist.iter()) != NULL;) {\n+  for (_pipeline->_reslist.reset(); (resource = _pipeline->_reslist.iter()) != nullptr;) {\n@@ -1115,1 +1115,1 @@\n-\/\/  for (_pipeline->_classlist.reset(); (classname = _pipeline->_classlist.iter()) != NULL; ) {\n+\/\/  for (_pipeline->_classlist.reset(); (classname = _pipeline->_classlist.iter()) != nullptr; ) {\n@@ -1137,1 +1137,1 @@\n-  for (_operands.reset(); (op = (OperandForm*)_operands.iter()) != NULL; ) {\n+  for (_operands.reset(); (op = (OperandForm*)_operands.iter()) != nullptr; ) {\n@@ -1145,1 +1145,1 @@\n-  for (_opclass.reset(); (opc = (OpClassForm*)_opclass.iter()) != NULL; ) {\n+  for (_opclass.reset(); (opc = (OpClassForm*)_opclass.iter()) != nullptr; ) {\n@@ -1165,1 +1165,1 @@\n-  for( ; (oper = (OperandForm*)_operands.iter()) != NULL;) {\n+  for( ; (oper = (OperandForm*)_operands.iter()) != nullptr;) {\n@@ -1252,2 +1252,2 @@\n-    if ((oper->_matrule) && (oper->_matrule->_lChild == NULL) &&\n-        (oper->_matrule->_rChild == NULL)) {\n+    if ((oper->_matrule) && (oper->_matrule->_lChild == nullptr) &&\n+        (oper->_matrule->_rChild == nullptr)) {\n@@ -1259,1 +1259,1 @@\n-      if( type != NULL ) {\n+      if( type != nullptr ) {\n@@ -1277,1 +1277,1 @@\n-        const char *type = NULL;\n+        const char *type = nullptr;\n@@ -1313,1 +1313,1 @@\n-    if (oper->_interface != NULL) {\n+    if (oper->_interface != nullptr) {\n@@ -1316,1 +1316,1 @@\n-      if ( oper->_interface->is_MemInterface() != NULL ) {\n+      if ( oper->_interface->is_MemInterface() != nullptr ) {\n@@ -1319,1 +1319,1 @@\n-        if( base != NULL ) {\n+        if( base != nullptr ) {\n@@ -1323,1 +1323,1 @@\n-        if( index != NULL ) {\n+        if( index != nullptr ) {\n@@ -1327,1 +1327,1 @@\n-        if( scale != NULL ) {\n+        if( scale != nullptr ) {\n@@ -1331,1 +1331,1 @@\n-        if( disp != NULL ) {\n+        if( disp != nullptr ) {\n@@ -1338,1 +1338,1 @@\n-        } else if ( disp != NULL ) {\n+        } else if ( disp != nullptr ) {\n@@ -1343,1 +1343,1 @@\n-      else if (oper->_interface->is_CondInterface() != NULL) {\n+      else if (oper->_interface->is_CondInterface() != nullptr) {\n@@ -1346,1 +1346,1 @@\n-        if( equal != NULL ) {\n+        if( equal != nullptr ) {\n@@ -1350,1 +1350,1 @@\n-        if( not_equal != NULL ) {\n+        if( not_equal != nullptr ) {\n@@ -1354,1 +1354,1 @@\n-        if( less != NULL ) {\n+        if( less != nullptr ) {\n@@ -1358,1 +1358,1 @@\n-        if( greater_equal != NULL ) {\n+        if( greater_equal != nullptr ) {\n@@ -1362,1 +1362,1 @@\n-        if( less_equal != NULL ) {\n+        if( less_equal != nullptr ) {\n@@ -1366,1 +1366,1 @@\n-        if( greater != NULL ) {\n+        if( greater != nullptr ) {\n@@ -1370,1 +1370,1 @@\n-        if( overflow != NULL ) {\n+        if( overflow != nullptr ) {\n@@ -1374,1 +1374,1 @@\n-        if( no_overflow != NULL ) {\n+        if( no_overflow != nullptr ) {\n@@ -1379,1 +1379,1 @@\n-      else if (oper->_interface->is_ConstInterface() != NULL ) {\n+      else if (oper->_interface->is_ConstInterface() != nullptr ) {\n@@ -1445,1 +1445,1 @@\n-      else if (oper->_interface->is_RegInterface() != NULL) {\n+      else if (oper->_interface->is_RegInterface() != nullptr) {\n@@ -1491,1 +1491,1 @@\n-      if ((comp = oper->_components.iter()) == NULL) {\n+      if ((comp = oper->_components.iter()) == nullptr) {\n@@ -1496,1 +1496,1 @@\n-      } \/\/ end if NULL\n+      } \/\/ end if null\n@@ -1501,1 +1501,1 @@\n-        while((comp = oper->_components.iter()) != NULL) {\n+        while((comp = oper->_components.iter()) != nullptr) {\n@@ -1503,1 +1503,1 @@\n-          i = dump_spec_constant( fp, type, i, NULL );\n+          i = dump_spec_constant( fp, type, i, nullptr );\n@@ -1530,1 +1530,1 @@\n-  for( ; (instr = (InstructForm*)_instructions.iter()) != NULL; ) {\n+  for( ; (instr = (InstructForm*)_instructions.iter()) != nullptr; ) {\n@@ -1548,1 +1548,1 @@\n-    while (att != NULL) {\n+    while (att != nullptr) {\n@@ -1573,1 +1573,1 @@\n-    if( can_cisc_spill() && (instr->cisc_spill_alternate() != NULL) ) {\n+    if( can_cisc_spill() && (instr->cisc_spill_alternate() != nullptr) ) {\n@@ -1601,2 +1601,2 @@\n-    Attribute *avoid_back_to_back_attr = NULL;\n-    while (attr != NULL) {\n+    Attribute *avoid_back_to_back_attr = nullptr;\n+    while (attr != nullptr) {\n@@ -1669,1 +1669,1 @@\n-      for( Component *comp; (comp = instr->_components.iter()) != NULL; ) {\n+      for( Component *comp; (comp = instr->_components.iter()) != nullptr; ) {\n@@ -1672,2 +1672,2 @@\n-        OperandForm *opForm = form ? form->is_operand() : NULL;\n-        if( opForm == NULL ) continue;\n+        OperandForm *opForm = form ? form->is_operand() : nullptr;\n+        if( opForm == nullptr ) continue;\n@@ -1705,1 +1705,1 @@\n-    if ( instr->peepholes() != NULL ) {\n+    if ( instr->peepholes() != nullptr ) {\n@@ -1736,2 +1736,2 @@\n-      if( can_cisc_spill() && (instr->cisc_spill_alternate() != NULL) ) {\n-        fprintf(fp,\"_cisc_RegMask = NULL; \");\n+      if( can_cisc_spill() && (instr->cisc_spill_alternate() != nullptr) ) {\n+        fprintf(fp,\"_cisc_RegMask = nullptr; \");\n@@ -1752,2 +1752,2 @@\n-    const char     *opType = NULL;\n-    const char     *result = NULL;\n+    const char     *opType = nullptr;\n+    const char     *result = nullptr;\n@@ -1786,1 +1786,1 @@\n-    if (avoid_back_to_back_attr != NULL) {\n+    if (avoid_back_to_back_attr != nullptr) {\n@@ -1832,1 +1832,1 @@\n-        (instr->_matrule != NULL &&\n+        (instr->_matrule != nullptr &&\n@@ -2060,1 +2060,1 @@\n-      if (_mlistab[i] == NULL) continue;\n+      if (_mlistab[i] == nullptr) continue;\n@@ -2194,1 +2194,1 @@\n-    for ( _pipeline->_stages.reset(); (stage = _pipeline->_stages.iter()) != NULL; ) {\n+    for ( _pipeline->_stages.reset(); (stage = _pipeline->_stages.iter()) != nullptr; ) {\n@@ -2208,1 +2208,1 @@\n-    for ( _pipeline->_stages.reset(); (stage = _pipeline->_stages.iter()) != NULL; )\n+    for ( _pipeline->_stages.reset(); (stage = _pipeline->_stages.iter()) != nullptr; )\n@@ -2225,1 +2225,1 @@\n-    for ( _pipeline->_reslist.reset(); (resource = _pipeline->_reslist.iter()) != NULL; ) {\n+    for ( _pipeline->_reslist.reset(); (resource = _pipeline->_reslist.iter()) != nullptr; ) {\n@@ -2231,1 +2231,1 @@\n-    for ( _pipeline->_reslist.reset(); (resource = _pipeline->_reslist.iter()) != NULL; ) {\n+    for ( _pipeline->_reslist.reset(); (resource = _pipeline->_reslist.iter()) != nullptr; ) {\n@@ -2238,1 +2238,1 @@\n-    for ( _pipeline->_reslist.reset(); (resource = _pipeline->_reslist.iter()) != NULL; ) {\n+    for ( _pipeline->_reslist.reset(); (resource = _pipeline->_reslist.iter()) != nullptr; ) {\n","filename":"src\/hotspot\/share\/adlc\/output_h.cpp","additions":81,"deletions":81,"binary":false,"changes":162,"status":"modified"}]}