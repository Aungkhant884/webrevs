{"files":[{"patch":"@@ -69,1 +69,1 @@\n-    \/**md\n+    \/**\n@@ -73,5 +73,5 @@\n-     *\n-     * The general contract of `hashCode` is:\n-     *\n-     * -   Whenever it is invoked on the same object more than once during\n-     *     an execution of a Java application, the `hashCode` method\n+     * <p>\n+     * The general contract of {@code hashCode} is:\n+     * <ul>\n+     * <li>Whenever it is invoked on the same object more than once during\n+     *     an execution of a Java application, the {@code hashCode} method\n@@ -79,1 +79,1 @@\n-     *     used in `equals` comparisons on the object is modified.\n+     *     used in {@code equals} comparisons on the object is modified.\n@@ -82,3 +82,3 @@\n-     * -   If two objects are equal according to the {@link\n-     *     #equals(Object) equals} method, then calling the\n-     *     `hashCode` method on each of the two objects must produce the\n+     * <li>If two objects are equal according to the {@link\n+     *     #equals(Object) equals} method, then calling the {@code\n+     *     hashCode} method on each of the two objects must produce the\n@@ -86,1 +86,1 @@\n-     * -   It is _not_ required that if two objects are unequal\n+     * <li>It is <em>not<\/em> required that if two objects are unequal\n@@ -88,1 +88,1 @@\n-     *     calling the `hashCode` method on each of the two objects\n+     *     calling the {@code hashCode} method on each of the two objects\n@@ -92,0 +92,1 @@\n+     * <\/ul>\n@@ -94,2 +95,2 @@\n-     * As far as is reasonably practical, the `hashCode` method defined\n-     * by class `Object` returns distinct integers for distinct objects.\n+     * As far as is reasonably practical, the {@code hashCode} method defined\n+     * by class {@code Object} returns distinct integers for distinct objects.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Object.java","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"}]}