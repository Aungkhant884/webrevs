{"files":[{"patch":"@@ -157,1 +157,1 @@\n-         * Used for instances of {@link MarkdownTree}\n+         * Used for instances of {@link RawTextTree}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/DocTree.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -210,15 +210,0 @@\n-    \/**\n-     * Visits a {@code MarkdownTree} node.\n-     * @param node the node being visited\n-     * @param p a parameter value\n-     * @return a result value\n-     *\n-     * @implSpec Visits the provided {@code MarkdownTree} node\n-     * by calling {@code visitOther(node, p)}.\n-     *\n-     * @since 21\n-     *\/\n-    default R visitMarkdown(MarkdownTree node, P p) {\n-        return visitOther(node, p);\n-    }\n-\n@@ -249,0 +234,15 @@\n+    \/**\n+     * Visits a {@code RawTextTree} node.\n+     * @param node the node being visited\n+     * @param p a parameter value\n+     * @return a result value\n+     *\n+     * @implSpec Visits the provided {@code RawTextTree} node\n+     * by calling {@code visitOther(node, p)}.\n+     *\n+     * @since 21\n+     *\/\n+    default R visitRawText(RawTextTree node, P p) {\n+        return visitOther(node, p);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/DocTreeVisitor.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.source.doctree;\n-\n-\/**\n- * A tree node for a fragment of Markdown content.\n- *\n- * <p>\n- * The content may contain plain text, entities and HTML elements,\n- * all represented directly in the text of the content,\n- * but not {@linkplain InlineTagTree inline tags}.\n- *\n- * @apiNote\n- * {@code MarkdownTree} nodes will typically exist in a list of\n- * {@code DocTree} nodes, along with other kinds of {@code DocTree}\n- * nodes, such as for inline tags. When processing any such list,\n- * any non-Markdown nodes will be processed recursively first, and then\n- * treated as opaque objects within the remaining stream of Markdown nodes.\n- * Thus, the content of any non-Markdown nodes will not affect how the\n- * Markdown nodes will be processed.\n- *\n- * Note: malformed entities and HTML elements will typically be\n- * processed as literal text, with no warnings or errors being\n- * reported.\n- *\n- * @since 21\n- *\/\n-public interface MarkdownTree extends DocTree {\n-    \/**\n-     * {@return the content}\n-     *\/\n-    String getContent();\n-}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/MarkdownTree.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.source.doctree;\n+\n+\/**\n+ * A tree node for a fragment of uninterpreted raw text content.\n+ *\n+ * <p>\n+ * The content may contain any text except that for\n+ * {@linkplain InlineTagTree inline tags}.\n+ *\n+ * <p>The format of the content is indicated by the {@linkplain #getKind() kind}\n+ * of the tree node.\n+ *\n+ * @apiNote\n+ * This class may be used to represent tree nodes containing\n+ * {@linkplain DocTree.Kind#MARKDOWN Markdown} text.\n+ * Such nodes will typically exist in a list of {@code DocTree} nodes,\n+ * along with other kinds of {@code DocTree} nodes, such as for inline tags.\n+ * When processing any such list, any non-Markdown nodes will be processed\n+ * recursively first, and then treated as opaque objects within the remaining\n+ * stream of Markdown nodes. Thus, the content of any non-Markdown nodes will\n+ * not affect how the Markdown nodes will be processed.\n+ *\n+ * @since 21\n+ *\/\n+public interface RawTextTree extends DocTree {\n+    \/**\n+     * {@return the content}\n+     *\/\n+    String getContent();\n+}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/RawTextTree.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -36,4 +36,1 @@\n- * and {@linkplain MarkdownTree Markdown content}. In such lists, if there is at least\n- * one Markdown node, the entire list will be treated as Markdown, although all\n- * non-Markdown nodes will be treated as opaque objects and will not be parsed as\n- * part of the Markdown content.\n+ * and uninterpreted {@linkplain RawTextTree raw text}, such as for Markdown.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/package-info.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-import com.sun.source.doctree.MarkdownTree;\n+import com.sun.source.doctree.RawTextTree;\n@@ -239,9 +239,0 @@\n-    \/**\n-     * Creates a new {@code MarkdownTree} object, to represent a fragment of Markdown content.\n-     * @param code the code\n-     * @return a {@code MarkdownTree} object\n-     *\n-     * @since 21\n-     *\/\n-    MarkdownTree newMarkdownTree(String code);\n-\n@@ -265,0 +256,12 @@\n+    \/**\n+     * Creates a new {@code RawTextTree} object, to represent a fragment of uninterpreted raw text.\n+     *\n+     * @param kind the kind of text\n+     * @param code the code\n+     * @return a {@code RawTextTree} object\n+     * @throws IllegalArgumentException if the kind is not a recognized kind for raw text\n+     *\n+     * @since 21\n+     *\/\n+    RawTextTree newRawTextTree(DocTree.Kind kind, String code) throws IllegalArgumentException;\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTreeFactory.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -371,1 +371,1 @@\n-     * @implSpec This implementation returns {@code null}.\n+     * @implSpec This implementation scans the children in left to right order.\n@@ -376,2 +376,0 @@\n-     *\n-     * @since 21\n@@ -380,2 +378,4 @@\n-    public R visitMarkdown(MarkdownTree node, P p) {\n-        return null;\n+    public R visitParam(ParamTree node, P p) {\n+        R r = scan(node.getName(), p);\n+        r = scanAndReduce(node.getDescription(), p, r);\n+        return r;\n@@ -394,2 +394,2 @@\n-    public R visitParam(ParamTree node, P p) {\n-        R r = scan(node.getName(), p);\n+    public R visitProvides(ProvidesTree node, P p) {\n+        R r = scan(node.getServiceType(), p);\n@@ -403,1 +403,1 @@\n-     * @implSpec This implementation scans the children in left to right order.\n+     * @implSpec This implementation returns {@code null}.\n@@ -408,0 +408,2 @@\n+     *\n+     * @since 21\n@@ -410,4 +412,2 @@\n-    public R visitProvides(ProvidesTree node, P p) {\n-        R r = scan(node.getServiceType(), p);\n-        r = scanAndReduce(node.getDescription(), p, r);\n-        return r;\n+    public R visitRawText(RawTextTree node, P p) {\n+        return null;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTreeScanner.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -331,2 +331,0 @@\n-     *\n-     * @since 21\n@@ -335,1 +333,1 @@\n-    public R visitMarkdown(MarkdownTree node, P p) {\n+    public R visitParam(ParamTree node, P p) {\n@@ -347,0 +345,2 @@\n+     *\n+     * @since 9\n@@ -349,1 +349,1 @@\n-    public R visitParam(ParamTree node, P p) {\n+    public R visitProvides(ProvidesTree node, P p) {\n@@ -362,1 +362,1 @@\n-     * @since 9\n+     * @since 21\n@@ -365,1 +365,1 @@\n-    public R visitProvides(ProvidesTree node, P p) {\n+    public R visitRawText(RawTextTree node, P p) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/SimpleDocTreeVisitor.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import com.sun.source.doctree.DocTree;\n@@ -86,1 +87,1 @@\n-    private final boolean isMarkdown;\n+    private final DocTree.Kind textKind;\n@@ -107,0 +108,1 @@\n+    \/\/ TODO: isFileContent should be replaces by file extension if applicable\n@@ -115,2 +117,1 @@\n-        String t = comment.getText();\n-        this.isMarkdown = t.startsWith(MARKDOWN_PREFIX) && Character.isWhitespace(t.charAt(MARKDOWN_PREFIX.length()));\n+        textKind = getTextKind(comment);\n@@ -121,0 +122,7 @@\n+    private static DocTree.Kind getTextKind(Comment c) {\n+        String t = c.getText();\n+        return (t.startsWith(MARKDOWN_PREFIX) && Character.isWhitespace(t.charAt(MARKDOWN_PREFIX.length())))\n+                ? DocTree.Kind.MARKDOWN\n+                : DocTree.Kind.TEXT;\n+    }\n+\n@@ -135,1 +143,1 @@\n-        bp = -1 + (isMarkdown ? MARKDOWN_PREFIX.length() : 0);\n+        bp = -1 + (textKind == DocTree.Kind.MARKDOWN ? MARKDOWN_PREFIX.length() : 0);\n@@ -143,1 +151,1 @@\n-        int pos = isMarkdown ? 0\n+        int pos = textKind == DocTree.Kind.MARKDOWN  ? 0\n@@ -191,4 +199,4 @@\n-                    if (isMarkdown) {\n-                        defaultBlockCharacter();\n-                    } else {\n-                        entity(trees);\n+                    switch (textKind) {\n+                        case MARKDOWN -> defaultBlockCharacter();\n+                        case TEXT -> entity(trees);\n+                        default -> throw unknownTextKind(textKind);\n@@ -199,12 +207,24 @@\n-                    if (isMarkdown) {\n-                        defaultBlockCharacter();\n-                    } else {\n-                        newline = false;\n-                        if (isFileContent) {\n-                            switch (phase) {\n-                                case PREAMBLE:\n-                                    if (isEndPreamble()) {\n-                                        trees.add(html());\n-                                        if (textStart == -1) {\n-                                            textStart = bp;\n-                                            lastNonWhite = -1;\n+                    switch (textKind) {\n+                        case MARKDOWN -> {\n+                            defaultBlockCharacter();\n+                        }\n+                        case TEXT -> {\n+                            newline = false;\n+                            if (isFileContent) {\n+                                switch (phase) {\n+                                    case PREAMBLE:\n+                                        if (isEndPreamble()) {\n+                                            trees.add(html());\n+                                            if (textStart == -1) {\n+                                                textStart = bp;\n+                                                lastNonWhite = -1;\n+                                            }\n+                                            \/\/ mark this as the start, for processing purposes\n+                                            newline = true;\n+                                            break loop;\n+                                        }\n+                                        break;\n+                                    case BODY:\n+                                        if (isEndBody()) {\n+                                            addPendingText(trees, lastNonWhite);\n+                                            break loop;\n@@ -212,13 +232,4 @@\n-                                        \/\/ mark this as the start, for processing purposes\n-                                        newline = true;\n-                                        break loop;\n-                                    }\n-                                    break;\n-                                case BODY:\n-                                    if (isEndBody()) {\n-                                        addPendingText(trees, lastNonWhite);\n-                                        break loop;\n-                                    }\n-                                    break;\n-                                default:\n-                                    \/\/ fallthrough\n+                                        break;\n+                                    default:\n+                                        \/\/ fallthrough\n+                                }\n@@ -226,3 +237,2 @@\n-                        }\n-                        addPendingText(trees, bp - 1);\n-                        trees.add(html());\n+                            addPendingText(trees, bp - 1);\n+                            trees.add(html());\n@@ -230,6 +240,7 @@\n-                        if (phase == Phase.PREAMBLE || phase == Phase.POSTAMBLE) {\n-                            break; \/\/ Ignore newlines after html tags, in the meta content\n-                        }\n-                        if (textStart == -1) {\n-                            textStart = bp;\n-                            lastNonWhite = -1;\n+                            if (phase == Phase.PREAMBLE || phase == Phase.POSTAMBLE) {\n+                                break; \/\/ Ignore newlines after html tags, in the meta content\n+                            }\n+                            if (textStart == -1) {\n+                                textStart = bp;\n+                                lastNonWhite = -1;\n+                            }\n@@ -237,0 +248,1 @@\n+                        default -> throw unknownTextKind(textKind);\n@@ -270,0 +282,4 @@\n+    private IllegalStateException unknownTextKind(DocTree.Kind textKind) {\n+        return new IllegalStateException(textKind.toString());\n+    }\n+\n@@ -616,4 +632,4 @@\n-                    if (isMarkdown) {\n-                        defaultInlineCharacter();\n-                    } else {\n-                        entity(trees);\n+                    switch (textKind) {\n+                        case MARKDOWN -> defaultInlineCharacter();\n+                        case TEXT -> entity(trees);\n+                        default -> throw unknownTextKind(textKind);\n@@ -624,8 +640,10 @@\n-                    if (isMarkdown) {\n-                        defaultInlineCharacter();\n-                    } else {\n-                        newline = false;\n-                        addPendingText(trees, bp - 1);\n-                        trees.add(html());\n-                        textStart = bp;\n-                        lastNonWhite = -1;\n+                    switch (textKind) {\n+                        case MARKDOWN -> defaultInlineCharacter();\n+                        case TEXT -> {\n+                            newline = false;\n+                            addPendingText(trees, bp - 1);\n+                            trees.add(html());\n+                            textStart = bp;\n+                            lastNonWhite = -1;\n+                        }\n+                        default -> throw unknownTextKind(textKind);\n@@ -983,1 +1001,1 @@\n-                    addPendingText(v, bp - 1, false);\n+                    addPendingText(v, bp - 1, DocTree.Kind.TEXT);\n@@ -991,1 +1009,1 @@\n-                    addPendingText(v, bp - 1, false);\n+                    addPendingText(v, bp - 1, DocTree.Kind.TEXT);\n@@ -1019,1 +1037,1 @@\n-        addPendingText(list, textEnd, isMarkdown);\n+        addPendingText(list, textEnd, textKind);\n@@ -1022,1 +1040,1 @@\n-    protected void addPendingText(ListBuffer<DCTree> list, int textEnd, boolean useMarkdown) {\n+    protected void addPendingText(ListBuffer<DCTree> list, int textEnd, DocTree.Kind kind) {\n@@ -1025,4 +1043,7 @@\n-                if (useMarkdown) {\n-                    list.add(m.at(textStart).newMarkdownTree(newString(textStart, textEnd + 1)));\n-                } else {\n-                    list.add(m.at(textStart).newTextTree(newString(textStart, textEnd + 1)));\n+                switch (kind) {\n+                    case TEXT ->\n+                            list.add(m.at(textStart).newTextTree(newString(textStart, textEnd + 1)));\n+                    case MARKDOWN ->\n+                            list.add(m.at(textStart).newRawTextTree(DocTree.Kind.MARKDOWN, newString(textStart, textEnd + 1)));\n+                    default ->\n+                        throw new IllegalArgumentException(kind.toString());\n@@ -1573,1 +1594,1 @@\n-                                addPendingText(v, bp - 1, false);\n+                                addPendingText(v, bp - 1, DocTree.Kind.TEXT);\n@@ -1582,1 +1603,1 @@\n-                                addPendingText(v, bp - 1, false);\n+                                addPendingText(v, bp - 1, DocTree.Kind.TEXT);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/DocCommentParser.java","additions":86,"deletions":65,"binary":false,"changes":151,"status":"modified"},{"patch":"@@ -162,1 +162,1 @@\n-                DCMarkdown markdown = (DCMarkdown) this;\n+                DCRawText markdown = (DCRawText) this;\n@@ -799,28 +799,0 @@\n-    public static class DCMarkdown extends DCTree implements MarkdownTree {\n-        public final String code;\n-\n-        DCMarkdown(String code) {\n-            this.code = code;\n-        }\n-\n-        @Override\n-        public boolean isBlank() {\n-            return code.isBlank();\n-        }\n-\n-        @Override @DefinedBy(Api.COMPILER_TREE)\n-        public Kind getKind() {\n-            return Kind.MARKDOWN;\n-        }\n-\n-        @Override @DefinedBy(Api.COMPILER_TREE)\n-        public <R, D> R accept(DocTreeVisitor<R, D> v, D d) {\n-            return v.visitMarkdown(this, d);\n-        }\n-\n-        @Override @DefinedBy(Api.COMPILER_TREE)\n-        public String getContent() {\n-            return code;\n-        }\n-    }\n-\n@@ -894,0 +866,33 @@\n+    public static class DCRawText extends DCTree implements RawTextTree {\n+        public final Kind kind;\n+        public final String code;\n+\n+        DCRawText(Kind kind, String code) {\n+            if (kind != Kind.MARKDOWN) {\n+                throw new IllegalArgumentException(kind.toString());\n+            }\n+            this.kind = kind;\n+            this.code = code;\n+        }\n+\n+        @Override\n+        public boolean isBlank() {\n+            return code.isBlank();\n+        }\n+\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public Kind getKind() {\n+            return Kind.MARKDOWN;\n+        }\n+\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public <R, D> R accept(DocTreeVisitor<R, D> v, D d) {\n+            return v.visitRawText(this, d);\n+        }\n+\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public String getContent() {\n+            return code;\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DCTree.java","additions":34,"deletions":29,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -382,10 +382,0 @@\n-    @Override @DefinedBy(Api.COMPILER_TREE)\n-    public Void visitMarkdown(MarkdownTree node, Void p) {\n-        try {\n-            print(node.getContent());\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n-        return null;\n-    }\n-\n@@ -426,0 +416,10 @@\n+    @Override @DefinedBy(Api.COMPILER_TREE)\n+    public Void visitRawText(RawTextTree node, Void p) {\n+        try {\n+            print(node.getContent());\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        return null;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocPretty.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -69,1 +69,0 @@\n-import com.sun.tools.javac.tree.DCTree.DCMarkdown;\n@@ -73,0 +72,1 @@\n+import com.sun.tools.javac.tree.DCTree.DCRawText;\n@@ -338,2 +338,2 @@\n-    public DCMarkdown newMarkdownTree(String text) {\n-        DCMarkdown tree = new DCMarkdown(text);\n+    public DCRawText newRawTextTree(DocTree.Kind kind, String text) {\n+        DCTree.DCRawText tree = new DCRawText(kind, text);\n@@ -555,1 +555,1 @@\n-                        DCMarkdown mt = (DCMarkdown) dt;\n+                        DCRawText mt = (DCRawText) dt;\n@@ -563,1 +563,1 @@\n-                            DCMarkdown text = this.at(spos).newMarkdownTree(s);\n+                            DCRawText text = this.at(spos).newRawTextTree(DocTree.Kind.MARKDOWN, s);\n@@ -568,1 +568,1 @@\n-                                DCMarkdown text2 = this.at(spos + nwPos).newMarkdownTree(mt.getContent().substring(nwPos));\n+                                DCRawText text2 = this.at(spos + nwPos).newRawTextTree(Kind.MARKDOWN, mt.getContent().substring(nwPos));\n@@ -579,1 +579,1 @@\n-                                DCMarkdown text = this.at(spos).newMarkdownTree(s);\n+                                DCRawText text = this.at(spos).newRawTextTree(Kind.MARKDOWN, s);\n@@ -581,1 +581,1 @@\n-                                body.add((DCMarkdown) next);  \/\/ TODO: why the cast?\n+                                body.add((DCRawText) next);  \/\/ TODO: why the cast?\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocTreeMaker.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-import com.sun.source.doctree.MarkdownTree;\n+import com.sun.source.doctree.RawTextTree;\n@@ -1258,1 +1258,4 @@\n-            if (tree instanceof MarkdownTree t) {\n+            if (tree instanceof RawTextTree t) {\n+                if (t.getKind() != Kind.MARKDOWN) {\n+                    throw new IllegalStateException(t.getKind().toString());\n+                }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -513,5 +513,0 @@\n-            public Void visitMarkdown(MarkdownTree node, Void p) {\n-                header(node, compress(node.getContent()));\n-                return null;\n-            }\n-\n@@ -540,0 +535,5 @@\n+            public Void visitRawText(RawTextTree node, Void p) {\n+                header(node, compress(node.getContent()));\n+                return null;\n+            }\n+\n","filename":"test\/langtools\/tools\/javac\/doctree\/DocCommentTester.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -247,1 +247,1 @@\n-    Markdown[MARKDOWN, pos:5, abc_<_def]\n+    RawText[MARKDOWN, pos:5, abc_<_def]\n","filename":"test\/langtools\/tools\/javac\/doctree\/ElementTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-    Markdown[MARKDOWN, pos:5, abc_&_def]\n+    RawText[MARKDOWN, pos:5, abc_&_def]\n","filename":"test\/langtools\/tools\/javac\/doctree\/EntityTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    Markdown[MARKDOWN, pos:4, abc_<_def_&_ghi_]\n+    RawText[MARKDOWN, pos:4, abc_<_def_&_ghi_]\n@@ -46,1 +46,1 @@\n-    Markdown[MARKDOWN, pos:31, _jkl_]\n+    RawText[MARKDOWN, pos:31, _jkl_]\n@@ -52,1 +52,1 @@\n-    Markdown[MARKDOWN, pos:46, _mno.]\n+    RawText[MARKDOWN, pos:46, _mno.]\n@@ -69,1 +69,1 @@\n-        Markdown[MARKDOWN, pos:11, abc_<_def_&_ghi_]\n+        RawText[MARKDOWN, pos:11, abc_<_def_&_ghi_]\n@@ -71,1 +71,1 @@\n-        Markdown[MARKDOWN, pos:38, _jkl_]\n+        RawText[MARKDOWN, pos:38, _jkl_]\n@@ -77,1 +77,1 @@\n-        Markdown[MARKDOWN, pos:53, _mno.]\n+        RawText[MARKDOWN, pos:53, _mno.]\n@@ -89,1 +89,1 @@\n-    Markdown[MARKDOWN, pos:4, 123_]\n+    RawText[MARKDOWN, pos:4, 123_]\n@@ -94,1 +94,1 @@\n-        Markdown[MARKDOWN, pos:22, abc_<_def_&_ghi_]\n+        RawText[MARKDOWN, pos:22, abc_<_def_&_ghi_]\n@@ -96,1 +96,1 @@\n-        Markdown[MARKDOWN, pos:49, _jkl_]\n+        RawText[MARKDOWN, pos:49, _jkl_]\n@@ -102,1 +102,1 @@\n-        Markdown[MARKDOWN, pos:64, _mno]\n+        RawText[MARKDOWN, pos:64, _mno]\n@@ -104,1 +104,1 @@\n-    Markdown[MARKDOWN, pos:69, _456.]\n+    RawText[MARKDOWN, pos:69, _456.]\n","filename":"test\/langtools\/tools\/javac\/doctree\/MarkdownTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"}]}