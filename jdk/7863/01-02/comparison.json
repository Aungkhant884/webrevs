{"files":[{"patch":"@@ -97,8 +97,5 @@\n-    public static void main(String[] args) throws Exception {\n-        String[] testTable = testTableShared;\n-        int iter = 0;\n-        do {\n-            int mid = testTable.length \/ 2;\n-            int start = args[0].equals(\"0\") ? 0 : mid;\n-            int end   = args[0].equals(\"0\") ? mid : testTable.length;\n-            boolean provoke = (args.length > 1 && args[1].equals(\"provoke\"));\n+    public static void test(String[] args, String[] testTable) throws Exception {\n+        int mid = testTable.length \/ 2;\n+        int start = args[0].equals(\"0\") ? 0 : mid;\n+        int end   = args[0].equals(\"0\") ? mid : testTable.length;\n+        boolean provoke = (args.length > 1 && args[1].equals(\"provoke\"));\n@@ -106,3 +103,3 @@\n-            \/\/ provoke == true: we want to increase the chance that mapping the generated archive at the designated base\n-            \/\/ succeeds, to test Klass pointer encoding at that weird location. We do this by sizing heap + class space\n-            \/\/ small, and by switching off compressed oops.\n+        \/\/ provoke == true: we want to increase the chance that mapping the generated archive at the designated base\n+        \/\/ succeeds, to test Klass pointer encoding at that weird location. We do this by sizing heap + class space\n+        \/\/ small, and by switching off compressed oops.\n@@ -110,15 +107,15 @@\n-            \/\/ provoke == false:  we just go with default parameters. This is more of a test of\n-            \/\/ CDS' ability to recover if mapping at runtime fails.\n-            for (int i = start; i < end; i++) {\n-                String testEntry = testTable[i];\n-                String filename = \"SharedBaseAddress-base\" + testEntry + \".jsa\";\n-                System.out.println(\"sharedBaseAddress = \" + testEntry);\n-                CDSOptions opts = (new CDSOptions())\n-                            .setArchiveName(filename)\n-                            .addPrefix(\"-XX:SharedBaseAddress=\" + testEntry)\n-                            .addPrefix(\"-Xlog:cds=debug\")\n-                            .addPrefix(\"-Xlog:cds+reloc=debug\")\n-                            .addPrefix(\"-Xlog:nmt=debug\")\n-                            .addPrefix(\"-Xlog:os=debug\")\n-                            .addPrefix(\"-Xlog:gc+metaspace\")\n-                            .addPrefix(\"-XX:NativeMemoryTracking=detail\");\n+        \/\/ provoke == false:  we just go with default parameters. This is more of a test of\n+        \/\/ CDS' ability to recover if mapping at runtime fails.\n+        for (int i = start; i < end; i++) {\n+            String testEntry = testTable[i];\n+            String filename = \"SharedBaseAddress-base\" + testEntry + \".jsa\";\n+            System.out.println(\"sharedBaseAddress = \" + testEntry);\n+            CDSOptions opts = (new CDSOptions())\n+                        .setArchiveName(filename)\n+                        .addPrefix(\"-XX:SharedBaseAddress=\" + testEntry)\n+                        .addPrefix(\"-Xlog:cds=debug\")\n+                        .addPrefix(\"-Xlog:cds+reloc=debug\")\n+                        .addPrefix(\"-Xlog:nmt=debug\")\n+                        .addPrefix(\"-Xlog:os=debug\")\n+                        .addPrefix(\"-Xlog:gc+metaspace\")\n+                        .addPrefix(\"-XX:NativeMemoryTracking=detail\");\n@@ -126,9 +123,9 @@\n-                if (provoke) {\n-                    opts.addPrefix(\"-Xmx128m\")\n-                        .addPrefix(\"-XX:CompressedClassSpaceSize=32m\")\n-                        .addPrefix(\"-XX:-UseCompressedOops\");\n-                }\n-                if (Platform.isDebugBuild()) {\n-                    \/\/ Make VM start faster in debug build with large heap.\n-                    opts.addPrefix(\"-XX:-ZapUnusedHeapArea\");\n-                }\n+            if (provoke) {\n+                opts.addPrefix(\"-Xmx128m\")\n+                    .addPrefix(\"-XX:CompressedClassSpaceSize=32m\")\n+                    .addPrefix(\"-XX:-UseCompressedOops\");\n+            }\n+            if (Platform.isDebugBuild()) {\n+                \/\/ Make VM start faster in debug build with large heap.\n+                opts.addPrefix(\"-XX:-ZapUnusedHeapArea\");\n+            }\n@@ -136,7 +133,6 @@\n-                CDSTestUtils.createArchiveAndCheck(opts);\n-                OutputAnalyzer out = CDSTestUtils.runWithArchiveAndCheck(opts);\n-                if (testEntry.equals(\"0\")) {\n-                    out.shouldContain(\"Archive(s) were created with -XX:SharedBaseAddress=0. Always map at os-selected address.\")\n-                       .shouldContain(\"Try to map archive(s) at an alternative address\")\n-                       .shouldNotMatch(failedPattern);\n-                }\n+            CDSTestUtils.createArchiveAndCheck(opts);\n+            OutputAnalyzer out = CDSTestUtils.runWithArchiveAndCheck(opts);\n+            if (testEntry.equals(\"0\")) {\n+                out.shouldContain(\"Archive(s) were created with -XX:SharedBaseAddress=0. Always map at os-selected address.\")\n+                   .shouldContain(\"Try to map archive(s) at an alternative address\")\n+                   .shouldNotMatch(failedPattern);\n@@ -144,3 +140,8 @@\n-            iter++;\n-            testTable = testTable64;\n-        } while (iter < 2 && Platform.is64bit());\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        test(args, testTableShared);\n+        if (Platform.is64bit()) {\n+            test(args, testTable64);\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/SharedBaseAddress.java","additions":46,"deletions":45,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public static void test(String[] testTable) throws Exception {\n@@ -55,5 +55,0 @@\n-        String[] testTable = testTableShared;\n-        int iter = 0;\n-        do {\n-            for (String testEntry : testTable) {\n-                System.out.println(\"sharedBaseAddress = \" + testEntry);\n@@ -61,6 +56,9 @@\n-                \/\/ Note: some platforms may restrict valid values for SharedBaseAddress; the VM should print\n-                \/\/ a warning and use the default value instead. Similar, ASLR may prevent the given address\n-                \/\/ from being used; this too should handled gracefully by using the default base address.\n-                OutputAnalyzer dumpOutput = TestCommon.dump(\n-                    appJar, new String[] {\"Hello\"}, \"-XX:SharedBaseAddress=\" + testEntry);\n-                TestCommon.checkDump(dumpOutput, \"Loading classes to share\");\n+        for (String testEntry : testTable) {\n+            System.out.println(\"sharedBaseAddress = \" + testEntry);\n+\n+            \/\/ Note: some platforms may restrict valid values for SharedBaseAddress; the VM should print\n+            \/\/ a warning and use the default value instead. Similar, ASLR may prevent the given address\n+            \/\/ from being used; this too should handled gracefully by using the default base address.\n+            OutputAnalyzer dumpOutput = TestCommon.dump(\n+                appJar, new String[] {\"Hello\"}, \"-XX:SharedBaseAddress=\" + testEntry);\n+            TestCommon.checkDump(dumpOutput, \"Loading classes to share\");\n@@ -68,6 +66,10 @@\n-                OutputAnalyzer execOutput = TestCommon.exec(appJar, \"Hello\");\n-                TestCommon.checkExec(execOutput, \"Hello World\");\n-            }\n-            iter++;\n-            testTable = testTable64;\n-        } while (iter < 2 && Platform.is64bit());\n+            OutputAnalyzer execOutput = TestCommon.exec(appJar, \"Hello\");\n+            TestCommon.checkExec(execOutput, \"Hello World\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        test(testTableShared);\n+        if (Platform.is64bit()) {\n+            test(testTable64);\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SharedBaseAddress.java","additions":20,"deletions":18,"binary":false,"changes":38,"status":"modified"}]}