{"files":[{"patch":"@@ -30,1 +30,0 @@\n- * @requires vm.bits == 64\n@@ -41,1 +40,0 @@\n- * @requires vm.bits == 64\n@@ -75,4 +73,3 @@\n-    \/\/ shared base address test table\n-    private static final String[] testTable = {\n-        \"1g\", \"8g\", \"64g\",\"512g\", \"4t\",\n-        \"32t\", \"128t\", \"0\",\n+    \/\/ shared base address test table for {32, 64}bit VM\n+    private static final String[] testTableShared = {\n+        \"1g\", \"0\",\n@@ -80,0 +77,9 @@\n+        \"0xfff80000\",         \/\/ archive top wraps around 32-bit address space\n+        \"0xffffffff\",         \/\/ archive bottom wraps around 32-bit address space -- due to align_up()\n+        \"0\"                   \/\/ always let OS pick the base address at runtime (ASLR for CDS archive)\n+    };\n+\n+    \/\/ shared base address test table for 64bit VM only\n+    private static final String[] testTable64 = {\n+        \"8g\", \"64g\",\"512g\", \"4t\",\n+        \"32t\", \"128t\",\n@@ -82,1 +88,0 @@\n-        \"0xfff80000\",         \/\/ archive top wraps around 32-bit address space\n@@ -84,1 +89,0 @@\n-        \"0xffffffff\",         \/\/ archive bottom wraps around 32-bit address space -- due to align_up()\n@@ -86,1 +90,1 @@\n-        \"0x500000000\",        \/\/ (20g) below 32g at a 4g aligned address, but cannot be expressed with a logical\n+        \"0x500000000\"         \/\/ (20g) below 32g at a 4g aligned address, but cannot be expressed with a logical\n@@ -88,1 +92,0 @@\n-        \"0\",                  \/\/ always let OS pick the base address at runtime (ASLR for CDS archive)\n@@ -95,4 +98,7 @@\n-        int mid = testTable.length \/ 2;\n-        int start = args[0].equals(\"0\") ? 0 : mid;\n-        int end   = args[0].equals(\"0\") ? mid : testTable.length;\n-        boolean provoke = (args.length > 1 && args[1].equals(\"provoke\"));\n+        String[] testTable = testTableShared;\n+        int iter = 0;\n+        do {\n+            int mid = testTable.length \/ 2;\n+            int start = args[0].equals(\"0\") ? 0 : mid;\n+            int end   = args[0].equals(\"0\") ? mid : testTable.length;\n+            boolean provoke = (args.length > 1 && args[1].equals(\"provoke\"));\n@@ -100,3 +106,3 @@\n-        \/\/ provoke == true: we want to increase the chance that mapping the generated archive at the designated base\n-        \/\/ succeeds, to test Klass pointer encoding at that weird location. We do this by sizing heap + class space\n-        \/\/ small, and by switching off compressed oops.\n+            \/\/ provoke == true: we want to increase the chance that mapping the generated archive at the designated base\n+            \/\/ succeeds, to test Klass pointer encoding at that weird location. We do this by sizing heap + class space\n+            \/\/ small, and by switching off compressed oops.\n@@ -104,15 +110,15 @@\n-        \/\/ provoke == false:  we just go with default parameters. This is more of a test of\n-        \/\/ CDS' ability to recover if mapping at runtime fails.\n-        for (int i = start; i < end; i++) {\n-            String testEntry = testTable[i];\n-            String filename = \"SharedBaseAddress-base\" + testEntry + \".jsa\";\n-            System.out.println(\"sharedBaseAddress = \" + testEntry);\n-            CDSOptions opts = (new CDSOptions())\n-                        .setArchiveName(filename)\n-                        .addPrefix(\"-XX:SharedBaseAddress=\" + testEntry)\n-                        .addPrefix(\"-Xlog:cds=debug\")\n-                        .addPrefix(\"-Xlog:cds+reloc=debug\")\n-                        .addPrefix(\"-Xlog:nmt=debug\")\n-                        .addPrefix(\"-Xlog:os=debug\")\n-                        .addPrefix(\"-Xlog:gc+metaspace\")\n-                        .addPrefix(\"-XX:NativeMemoryTracking=detail\");\n+            \/\/ provoke == false:  we just go with default parameters. This is more of a test of\n+            \/\/ CDS' ability to recover if mapping at runtime fails.\n+            for (int i = start; i < end; i++) {\n+                String testEntry = testTable[i];\n+                String filename = \"SharedBaseAddress-base\" + testEntry + \".jsa\";\n+                System.out.println(\"sharedBaseAddress = \" + testEntry);\n+                CDSOptions opts = (new CDSOptions())\n+                            .setArchiveName(filename)\n+                            .addPrefix(\"-XX:SharedBaseAddress=\" + testEntry)\n+                            .addPrefix(\"-Xlog:cds=debug\")\n+                            .addPrefix(\"-Xlog:cds+reloc=debug\")\n+                            .addPrefix(\"-Xlog:nmt=debug\")\n+                            .addPrefix(\"-Xlog:os=debug\")\n+                            .addPrefix(\"-Xlog:gc+metaspace\")\n+                            .addPrefix(\"-XX:NativeMemoryTracking=detail\");\n@@ -120,9 +126,9 @@\n-            if (provoke) {\n-                opts.addPrefix(\"-Xmx128m\")\n-                    .addPrefix(\"-XX:CompressedClassSpaceSize=32m\")\n-                    .addPrefix(\"-XX:-UseCompressedOops\");\n-            }\n-            if (Platform.isDebugBuild()) {\n-                \/\/ Make VM start faster in debug build with large heap.\n-                opts.addPrefix(\"-XX:-ZapUnusedHeapArea\");\n-            }\n+                if (provoke) {\n+                    opts.addPrefix(\"-Xmx128m\")\n+                        .addPrefix(\"-XX:CompressedClassSpaceSize=32m\")\n+                        .addPrefix(\"-XX:-UseCompressedOops\");\n+                }\n+                if (Platform.isDebugBuild()) {\n+                    \/\/ Make VM start faster in debug build with large heap.\n+                    opts.addPrefix(\"-XX:-ZapUnusedHeapArea\");\n+                }\n@@ -130,6 +136,7 @@\n-            CDSTestUtils.createArchiveAndCheck(opts);\n-            OutputAnalyzer out = CDSTestUtils.runWithArchiveAndCheck(opts);\n-            if (testEntry.equals(\"0\")) {\n-                out.shouldContain(\"Archive(s) were created with -XX:SharedBaseAddress=0. Always map at os-selected address.\")\n-                   .shouldContain(\"Try to map archive(s) at an alternative address\")\n-                   .shouldNotMatch(failedPattern);\n+                CDSTestUtils.createArchiveAndCheck(opts);\n+                OutputAnalyzer out = CDSTestUtils.runWithArchiveAndCheck(opts);\n+                if (testEntry.equals(\"0\")) {\n+                    out.shouldContain(\"Archive(s) were created with -XX:SharedBaseAddress=0. Always map at os-selected address.\")\n+                       .shouldContain(\"Try to map archive(s) at an alternative address\")\n+                       .shouldNotMatch(failedPattern);\n+                }\n@@ -137,1 +144,3 @@\n-        }\n+            iter++;\n+            testTable = testTable64;\n+        } while (iter < 2 && Platform.is64bit());\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/SharedBaseAddress.java","additions":57,"deletions":48,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n- * @requires vm.bits == 64\n@@ -37,0 +36,1 @@\n+import jdk.test.lib.Platform;\n@@ -41,5 +41,9 @@\n-    \/\/ shared base address test table\n-    private static final String[] testTable = {\n-        \"1g\", \"8g\", \"64g\",\"512g\", \"4t\",\n-        \"32t\", \"128t\", \"0\",\n-        \"1\", \"64k\", \"64M\", \"320g\",\n+    \/\/ shared base address test table for {32, 64}bit VM\n+    private static final String[] testTableShared = {\n+        \"1g\", \"0\", \"1\", \"64k\", \"64M\"\n+    };\n+\n+    \/\/ shared base address test table for 64bit VM only\n+    private static final String[] testTable64 = {\n+        \"8g\", \"64g\",\"512g\", \"4t\",\n+        \"32t\", \"128t\", \"320g\",\n@@ -51,0 +55,5 @@\n+        String[] testTable = testTableShared;\n+        int iter = 0;\n+        do {\n+            for (String testEntry : testTable) {\n+                System.out.println(\"sharedBaseAddress = \" + testEntry);\n@@ -52,9 +61,6 @@\n-        for (String testEntry : testTable) {\n-            System.out.println(\"sharedBaseAddress = \" + testEntry);\n-\n-            \/\/ Note: some platforms may restrict valid values for SharedBaseAddress; the VM should print\n-            \/\/ a warning and use the default value instead. Similar, ASLR may prevent the given address\n-            \/\/ from being used; this too should handled gracefully by using the default base address.\n-            OutputAnalyzer dumpOutput = TestCommon.dump(\n-                appJar, new String[] {\"Hello\"}, \"-XX:SharedBaseAddress=\" + testEntry);\n-            TestCommon.checkDump(dumpOutput, \"Loading classes to share\");\n+                \/\/ Note: some platforms may restrict valid values for SharedBaseAddress; the VM should print\n+                \/\/ a warning and use the default value instead. Similar, ASLR may prevent the given address\n+                \/\/ from being used; this too should handled gracefully by using the default base address.\n+                OutputAnalyzer dumpOutput = TestCommon.dump(\n+                    appJar, new String[] {\"Hello\"}, \"-XX:SharedBaseAddress=\" + testEntry);\n+                TestCommon.checkDump(dumpOutput, \"Loading classes to share\");\n@@ -62,3 +68,6 @@\n-            OutputAnalyzer execOutput = TestCommon.exec(appJar, \"Hello\");\n-            TestCommon.checkExec(execOutput, \"Hello World\");\n-        }\n+                OutputAnalyzer execOutput = TestCommon.exec(appJar, \"Hello\");\n+                TestCommon.checkExec(execOutput, \"Hello World\");\n+            }\n+            iter++;\n+            testTable = testTable64;\n+        } while (iter < 2 && Platform.is64bit());\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SharedBaseAddress.java","additions":27,"deletions":18,"binary":false,"changes":45,"status":"modified"}]}