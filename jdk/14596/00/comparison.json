{"files":[{"patch":"@@ -655,0 +655,1 @@\n+            paintIcon(g, tabPlacement, tabIndex, icon, iconRect, isSelected);\n@@ -658,1 +659,1 @@\n-            paintIcon(g, tabPlacement, tabIndex, icon, iconRect, isSelected);\n+\n@@ -676,1 +677,1 @@\n-                         SwingUtilities.LEADING, SwingUtilities.CENTER,\n+                         SwingUtilities.TRAILING, SwingUtilities.CENTER,\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthTabbedPaneUI.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6875229\n+ * @key headful\n+ * @summary  Verifies icon is drawn after text in NimbusL&F\n+ * @run main TestNimbusTabbedPaneIconPosition\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import javax.imageio.ImageIO;\n+import javax.swing.Icon;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+public class TestNimbusTabbedPaneIconPosition {\n+    static JTabbedPane tabbedPane;\n+    static JFrame frame;\n+    static volatile Point pt;\n+    static volatile Rectangle bounds;\n+    private static void addTab(JTabbedPane aTabbedPane, int anIndex) {\n+        aTabbedPane.addTab(\"\\u2588\", new Icon() {\n+            @Override\n+            public void paintIcon(Component aComponent, Graphics aGraphics, int anX, int aY) {\n+                aGraphics.setColor(Color.RED);\n+                aGraphics.fillRect(anX, aY, 16, 16);\n+            }\n+\n+            @Override\n+            public int getIconWidth() {\n+                return 16;\n+            }\n+\n+            @Override\n+            public int getIconHeight() {\n+                return 16;\n+            }\n+        }, null);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(100);\n+            UIManager.setLookAndFeel(\"javax.swing.plaf.nimbus.NimbusLookAndFeel\");\n+            SwingUtilities.invokeAndWait(() -> {\n+                tabbedPane = new JTabbedPane();\n+                addTab(tabbedPane, 0);\n+                frame = new JFrame();\n+                frame.add(tabbedPane);\n+                frame.pack();\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                pt = tabbedPane.getLocationOnScreen();\n+                bounds = tabbedPane.getBoundsAt(0);\n+            });\n+            BufferedImage img = robot.createScreenCapture(\n+                    new Rectangle(pt.x + bounds.x,\n+                            pt.y + bounds.y,\n+                            bounds.width,\n+                            bounds.height));\n+\n+            robot.delay(500);\n+            int y = pt.y + bounds.height \/ 2;\n+            boolean expected = false;\n+            for (int x = pt.x + bounds.x; x <= pt.x + bounds.width; x++) {\n+                Color col = robot.getPixelColor(x, y);\n+                if (col.equals(Color.RED)) {\n+                    expected = true;\n+                    break;\n+                }\n+                if (col.equals(Color.BLACK)) {\n+                    expected = false;\n+                    break;\n+                }\n+            }\n+            if (!expected) {\n+                ImageIO.write(img, \"png\", new File(\"tab.png\"));\n+                throw new RuntimeException(\"icon drawn after text\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/plaf\/nimbus\/TestNimbusTabbedPaneIconPosition.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"}]}