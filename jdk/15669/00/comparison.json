{"files":[{"patch":"@@ -63,1 +63,0 @@\n-  SHENANDOAH_CHECK_FLAG_SET(ShenandoahNMethodBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahIUMode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-  SHENANDOAH_ERGO_DISABLE_FLAG(ShenandoahNMethodBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahPassiveMode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-  SHENANDOAH_CHECK_FLAG_SET(ShenandoahNMethodBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahSATBMode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-             ShenandoahNMethodBarrier ? new ShenandoahBarrierSetNMethod(heap) : nullptr,\n+             new ShenandoahBarrierSetNMethod(heap),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,0 +107,14 @@\n+bool ShenandoahCodeRoots::should_use_nmethod_barriers() {\n+  \/\/ Continuations need nmethod barriers for scanning stack chunk nmethods.\n+  if (Continuations::enabled()) return true;\n+\n+  \/\/ Concurrent class unloading needs nmethod barriers.\n+  \/\/ When a nmethod is about to be executed, we need to make sure that all its\n+  \/\/ metadata are marked. The alternative is to remark thread roots at final mark\n+  \/\/ pause, which would cause latency issues.\n+  if (ShenandoahHeap::heap()->unload_classes()) return true;\n+\n+  \/\/ Otherwise, we can go without nmethod barriers.\n+  return false;\n+}\n+\n@@ -122,2 +136,3 @@\n-  assert(BarrierSet::barrier_set()->barrier_set_nmethod() != nullptr, \"Sanity\");\n-  BarrierSet::barrier_set()->barrier_set_nmethod()->arm_all_nmethods();\n+  if (should_use_nmethod_barriers()) {\n+    BarrierSet::barrier_set()->barrier_set_nmethod()->arm_all_nmethods();\n+  }\n@@ -166,1 +181,1 @@\n-  if (ShenandoahNMethodBarrier) {\n+  if (should_use_nmethod_barriers()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCodeRoots.cpp","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -105,0 +105,2 @@\n+  static bool should_use_nmethod_barriers();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCodeRoots.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -548,6 +548,3 @@\n-  \/\/ Arm nmethods for concurrent marking. When a nmethod is about to be executed,\n-  \/\/ we need to make sure that all its metadata are marked. alternative is to remark\n-  \/\/ thread roots at final mark pause, but it can be potential latency killer.\n-  if (heap->unload_classes()) {\n-    ShenandoahCodeRoots::arm_nmethods();\n-  }\n+\n+  \/\/ Arm nmethods for concurrent mark\n+  ShenandoahCodeRoots::arm_nmethods();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -184,5 +184,3 @@\n-      if (ClassUnloading) {\n-         \/\/ Disarm nmethods that armed in concurrent cycle.\n-         \/\/ In above case, update roots should disarm them\n-         ShenandoahCodeRoots::disarm_nmethods();\n-      }\n+      \/\/ Disarm nmethods that armed in concurrent cycle.\n+      \/\/ In above case, update roots should disarm them\n+      ShenandoahCodeRoots::disarm_nmethods();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -83,3 +83,1 @@\n-  assert(bs != nullptr || !ShenandoahNMethodBarrier,\n-        \"Must have nmethod barrier for concurrent GC\");\n-  if (bs != nullptr && bs->is_armed(nm)) {\n+  if (bs->is_armed(nm)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNMethod.inline.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -209,1 +209,1 @@\n-  CodeBlobToOopClosure* adjust_code_closure = (ClassUnloading && ShenandoahNMethodBarrier) ?\n+  CodeBlobToOopClosure* adjust_code_closure = ShenandoahCodeRoots::should_use_nmethod_barriers() ?\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-  CodeBlobToOopClosure* codes_cl = (ClassUnloading && ShenandoahNMethodBarrier) ?\n+  CodeBlobToOopClosure* codes_cl = ShenandoahCodeRoots::should_use_nmethod_barriers() ?\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,1 +92,0 @@\n-  \/\/ Weak reference processing\n@@ -94,0 +93,6 @@\n+\n+  \/\/ Arm all nmethods. Even though this is STW mark, some marking code\n+  \/\/ piggybacks on nmethod barriers for special instances.\n+  ShenandoahCodeRoots::arm_nmethods();\n+\n+  \/\/ Weak reference processing\n@@ -123,0 +128,3 @@\n+  \/\/ Mark is finished, can disarm the nmethods now.\n+  ShenandoahCodeRoots::disarm_nmethods();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSTWMark.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -355,3 +355,0 @@\n-  product(bool, ShenandoahNMethodBarrier, true, DIAGNOSTIC,                 \\\n-          \"Turn on\/off NMethod entry barriers in Shenandoah\")               \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-                new String[] { \"ShenandoahNMethodBarrier\" },\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestSelectiveBarrierFlags.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-                \"ShenandoahNMethodBarrier\",\n@@ -53,1 +52,0 @@\n-                \"ShenandoahNMethodBarrier\",\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestWrongBarrierDisable.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}