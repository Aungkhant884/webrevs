{"files":[{"patch":"@@ -515,0 +515,11 @@\n+        \/\/ Set the main launcher variable to use it from Shortcut and FileAssociations\n+        final String mainLauncherLocation;\n+        if (StandardBundlerParam.isRuntimeInstaller(params)) {\n+            mainLauncherLocation = \"\";\n+        } else {\n+            Path appImageRoot = WIN_APP_IMAGE.fetchFrom(params);\n+            var launchers = AppImageFile.getLaunchers(appImageRoot, params);\n+            mainLauncherLocation = String.format(\"[INSTALLDIR]%s.exe\", launchers.get(0).getName());\n+        }\n+        data.put(\"JpMainLauncherLocation\", mainLauncherLocation);\n+\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WinMsiBundler.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -491,2 +491,1 @@\n-            xml.writeAttribute(\"Target\", String.format(\"[#%s]\",\n-                    Component.File.idOf(launcherPath)));\n+            xml.writeAttribute(\"Target\", \"[ARPMAINLAUNCHERLOCATION]\");\n@@ -533,1 +532,1 @@\n-                xml.writeAttribute(\"TargetFile\", Id.File.of(fa.launcherPath));\n+                xml.writeAttribute(\"TargetProperty\", \"ARPMAINLAUNCHERLOCATION\");\n@@ -539,0 +538,6 @@\n+        \/\/ Adding icon file Component to FA group because ICE69 warning becomes\n+        \/\/ an error if Icon attribute value points to an .ico file that\n+        \/\/ belongs to other Feature.\n+        if (fa.iconPath != null) {\n+            components.add(\"c\" + Id.File.of(getInstalledFaIcoPath(fa)));\n+        }\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WixAppImageFragmentBuilder.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -76,3 +76,9 @@\n-      <ComponentGroupRef Id=\"Shortcuts\"\/>\n-      <ComponentGroupRef Id=\"Files\"\/>\n-      <ComponentGroupRef Id=\"FileAssociations\"\/>\n+      <Feature Id=\"DefaultFeature_Files\" Title=\"!(loc.MainFeatureTitle) (Files)\" Level=\"1\">\n+          <ComponentGroupRef Id=\"Files\"\/>\n+      <\/Feature>\n+      <Feature Id=\"DefaultFeature_Shortcuts\" Title=\"!(loc.MainFeatureTitle) (Shortcuts)\" Level=\"1\">\n+          <ComponentGroupRef Id=\"Shortcuts\"\/>\n+      <\/Feature>\n+      <Feature Id=\"DefaultFeature_FileAssociations\" Title=\"!(loc.MainFeatureTitle) (File Associations)\" Level=\"1\">\n+          <ComponentGroupRef Id=\"FileAssociations\"\/>\n+      <\/Feature>\n@@ -82,0 +88,1 @@\n+    <CustomAction Id=\"JpSetARPMAINLAUNCHERLOCATION\" Property=\"ARPMAINLAUNCHERLOCATION\" Value=\"$(var.JpMainLauncherLocation)\" \/>\n@@ -107,0 +114,1 @@\n+      <Custom Action=\"JpSetARPMAINLAUNCHERLOCATION\" After=\"CostFinalize\">Not Installed<\/Custom>\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/main.wxs","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Arrays;\n@@ -67,0 +68,1 @@\n+        installArguments = new ArrayList<>();\n@@ -79,0 +81,1 @@\n+        installArguments = new ArrayList<>(cmd.installArguments);\n@@ -181,0 +184,4 @@\n+    public List<String> getInstallArguments() {\n+        return installArguments;\n+    }\n+\n@@ -185,0 +192,5 @@\n+    public JPackageCommand addInstallArguments(String... args) {\n+        this.installArguments.addAll(Arrays.asList(args));\n+        return this;\n+    }\n+\n@@ -1063,0 +1075,1 @@\n+    private final List<String> installArguments;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -67,0 +67,2 @@\n+import static jdk.jpackage.test.WindowsHelper.faFeatureInstalled;\n+import static jdk.jpackage.test.WindowsHelper.filesFeatureInstalled;\n@@ -268,1 +270,2 @@\n-            if (cmd.isFakeRuntime(noActionMsg) || cmd.isPackageUnpacked(noActionMsg)) {\n+            if (cmd.isFakeRuntime(noActionMsg) || cmd.isPackageUnpacked(noActionMsg) ||\n+                    !faFeatureInstalled(cmd)) {\n@@ -621,4 +624,6 @@\n-            Optional.ofNullable(cmd.unpackedPackageDirectory()).ifPresent(\n-                    unpackedDir -> {\n-                        verifyRootCountInUnpackedPackage(cmd, unpackedDir);\n-                    });\n+            if (filesFeatureInstalled(cmd)) {\n+                Optional.ofNullable(cmd.unpackedPackageDirectory()).ifPresent(\n+                        unpackedDir -> {\n+                            verifyRootCountInUnpackedPackage(cmd, unpackedDir);\n+                        });\n+            }\n@@ -644,1 +649,3 @@\n-            cmd.assertAppLayout();\n+            if (filesFeatureInstalled(cmd)) {\n+                cmd.assertAppLayout();\n+            }\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageTest.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -94,2 +94,7 @@\n-            runMsiexecWithRetries(Executor.of(\"msiexec\", \"\/qn\", \"\/norestart\",\n-                    install ? \"\/i\" : \"\/x\").addArgument(cmd.outputBundle().normalize()));\n+            Executor exec = Executor.of(\"msiexec\", \"\/qn\", \"\/norestart\",\n+                    install ? \"\/i\" : \"\/x\");\n+            exec.addArgument(cmd.outputBundle().normalize());\n+            if (install) {\n+                exec.addArguments(cmd.getInstallArguments());\n+            }\n+            runMsiexecWithRetries(exec);\n@@ -137,0 +142,1 @@\n+                exec.addArguments(cmd.getInstallArguments());\n@@ -204,1 +210,2 @@\n-            appInstalled = cmd.appLauncherPath(launcherName).toFile().exists();\n+            appInstalled = cmd.appLauncherPath(launcherName).toFile().exists() ||\n+                    !filesFeatureInstalled(cmd);\n@@ -223,1 +230,2 @@\n-            verifyStartMenuShortcut();\n+            if (shortcutsFeatureInstalled(cmd)) {\n+                verifyStartMenuShortcut();\n@@ -225,1 +233,2 @@\n-            verifyDesktopShortcut();\n+                verifyDesktopShortcut();\n+            }\n@@ -227,2 +236,4 @@\n-            Stream.of(cmd.getAllArgumentValues(\"--file-associations\")).map(\n-                    Path::of).forEach(this::verifyFileAssociationsRegistry);\n+            if (faFeatureInstalled(cmd)) {\n+                Stream.of(cmd.getAllArgumentValues(\"--file-associations\")).map(\n+                        Path::of).forEach(this::verifyFileAssociationsRegistry);\n+            }\n@@ -417,0 +428,26 @@\n+    public static boolean filesFeatureInstalled(JPackageCommand cmd) {\n+        return featureInstalled(cmd, \"_Files\");\n+    }\n+\n+    public static boolean shortcutsFeatureInstalled(JPackageCommand cmd) {\n+        return featureInstalled(cmd, \"_Shortcuts\");\n+    }\n+\n+    public static boolean faFeatureInstalled(JPackageCommand cmd) {\n+        return featureInstalled(cmd, \"_FileAssociations\");\n+    }\n+\n+    \/\/ Always true if no ADDLOCAL specified, checks the suffix matches otherwise.\n+    private static boolean featureInstalled(JPackageCommand cmd, String suffix) {\n+        boolean addlocalFound = false;\n+        for (String iarg : cmd.getInstallArguments()) {\n+            if (iarg.startsWith(\"ADDLOCAL=\")) {\n+                addlocalFound = true;\n+                if (iarg.endsWith(suffix)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return !addlocalFound;\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/WindowsHelper.java","additions":44,"deletions":7,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat Inc. and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.jpackage.internal.ApplicationLayout;\n+import jdk.jpackage.test.FileAssociations;\n+import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.Annotations.Parameter;\n+import jdk.jpackage.test.Annotations.Test;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static jdk.jpackage.test.WindowsHelper.filesFeatureInstalled;\n+\n+\/*\n+ * @test\n+ * @summary check that features can be installed separately\n+ * @library ..\/helpers\n+ * @key jpackagePlatformPackage\n+ * @build jdk.jpackage.test.*\n+ * @requires (os.family == \"windows\")\n+ * @modules jdk.jpackage\/jdk.jpackage.internal\n+ * @compile WinFeaturesTest.java\n+ * @run main\/othervm\/timeout=540 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=WinFeaturesTest\n+ *\/\n+\n+public class WinFeaturesTest {\n+    @Test\n+    @Parameter(\"DefaultFeature_Files\")\n+    @Parameter(\"DefaultFeature_FileAssociations\")\n+    @Parameter(\"DefaultFeature_Shortcuts\")\n+    public static void test(String feature) {\n+        PackageTest packageTest = new PackageTest()\n+                .forTypes(PackageType.WINDOWS)\n+                .configureHelloApp()\n+                .addInitializer(cmd -> {\n+                    cmd.addArgument(\"--win-menu\");\n+                    cmd.addArgument(\"--win-shortcut\");\n+                    cmd.addInstallArguments(String.format(\"ADDLOCAL=%s\", feature));\n+                })\n+                .addInstallVerifier(cmd -> {\n+                    ApplicationLayout appLayout = cmd.appLayout();\n+                    String launcherName = String.format(\"%s.exe\", WinFeaturesTest.class.getName());\n+                    Path launcherPath = appLayout.launchersDirectory().resolve(launcherName);\n+                    if (filesFeatureInstalled(cmd)) {\n+                        TKit.assertFileExists(launcherPath);\n+                    } else if (!cmd.isPackageUnpacked()) { \/\/ ADDLOCAL is not supported with \"msiexec \/a\"\n+                        TKit.assertFalse(Files.exists(launcherPath), launcherPath.toString());\n+                    }\n+                });\n+\n+        Path icon = TKit.TEST_SRC_ROOT.resolve(Path.of(\"resources\", \"icon\"\n+                + TKit.ICON_SUFFIX));\n+        icon = TKit.createRelativePathCopy(icon);\n+        new FileAssociations(\"jptest1\")\n+                .setFilename(\"fa1\")\n+                .setIcon(icon)\n+                .applyTo(packageTest);\n+\n+        packageTest.run();\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinFeaturesTest.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"}]}