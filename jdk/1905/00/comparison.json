{"files":[{"patch":"@@ -4588,0 +4588,4 @@\n+                ClassSymbol outerEnclClass = null;\n+                if (env.outer != null) {\n+                    outerEnclClass = env.outer.info.scope.owner.enclClass();\n+                }\n@@ -4592,4 +4596,7 @@\n-                \/\/ See if the enclosing class is the enum (or a\n-                \/\/ subclass thereof) declaring v.  If not, this\n-                \/\/ reference is OK.\n-                if (v.owner != enclClass && !types.isSubtype(enclClass.type, v.owner.type))\n+                \/\/ See if the enclosing class or the outer enclosing class\n+                \/\/ is the enum (or a subclass thereof) declaring v.\n+                \/\/ If not, this reference is OK.\n+                \/\/ See JDK-8173165 for more information.\n+                if (v.owner != enclClass && !types.isSubtype(enclClass.type, v.owner.type) &&\n+                        (Flags.isEnum(enclClass) || outerEnclClass == null ||\n+                                (v.owner != outerEnclClass && !types.isSubtype(outerEnclClass.type, v.owner.type))))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8173165\n+ * @summary javac should reject references to enum constants from nested classes inside instance initializers\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main T8173165\n+ *\/\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import toolbox.ToolBox;\n+import toolbox.JavacTask;\n+import toolbox.TestRunner;\n+import toolbox.Task;\n+\n+public class T8173165 extends TestRunner {\n+    ToolBox tb;\n+\n+    public T8173165() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    @Override\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        T8173165 t = new T8173165();\n+        t.runTests();\n+    }\n+\n+    @Test\n+    public void testEnumConstantInInstanceVariableInitializer(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        Path classes = base.resolve(\"classes\");\n+        Files.createDirectories(classes);\n+        String code = \"\"\"\n+                import java.util.HashSet;\n+                public enum Test {\n+                    FOO;\n+                    public HashSet<Test> vals = new HashSet<Test>(){\n+                        Test test = FOO;\n+                        {\n+                            add(FOO);\n+                        }\n+                    };\n+                }\"\"\";\n+        tb.writeJavaFiles(src, code);\n+        List<String> output = new JavacTask(tb)\n+                .files(tb.findJavaFiles(src))\n+                .outdir(classes)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"Test.java:5:21: compiler.err.illegal.enum.static.ref\",\n+                \"Test.java:7:17: compiler.err.illegal.enum.static.ref\",\n+                \"2 errors\");\n+        tb.checkEqual(expected, output);\n+    }\n+\n+    @Test\n+    public void testEnumConstantInNestedEnum(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        Path classes = base.resolve(\"classes\");\n+        Files.createDirectories(classes);\n+        String code = \"\"\"\n+                import java.util.HashSet;\n+                public enum OuterTest {\n+                    FOO;\n+                    enum InnerTest {\n+                        APPLE {\n+                            OuterTest test1 = FOO;\n+                        };\n+                        public HashSet<OuterTest> vals = new HashSet<OuterTest>(){\n+                            OuterTest test2 = FOO;\n+                            {\n+                                add(FOO);\n+                            }\n+                        };\n+                        OuterTest test3 = FOO;\n+                    }\n+                }\"\"\";\n+        tb.writeJavaFiles(src, code);\n+        new JavacTask(tb)\n+                .files(tb.findJavaFiles(src))\n+                .outdir(classes)\n+                .run()\n+                .writeAll();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/enum\/forwardRef\/T8173165.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"}]}