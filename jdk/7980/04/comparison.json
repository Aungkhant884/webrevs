{"files":[{"patch":"@@ -138,0 +138,3 @@\n+    \/\/ Maintenance note: if the ability to create module-info files\n+    \/\/ through the Filer is added, add link to this method from\n+    \/\/ ModuleElement interface-level discussion.\n@@ -220,0 +223,3 @@\n+    \/\/ Maintenance note: if the ability to create module-info files\n+    \/\/ through the Filer is added, add link to this method from\n+    \/\/ ModuleElement interface-level discussion.\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/Filer.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,19 @@\n+ * @apiNote\n+ * The represented module may have an explicit {@linkplain\n+ * javax.lang.model.util.Elements#getFileObjectOf(Element) reference\n+ * representation} (either source code or executable output) or may be\n+ * created from implicit information. The explicit and standalone\n+ * source code construct for a module is typically a {@code\n+ * module-info.java} file (JLS {@jls 7.7}). {@linkplain\n+ * javax.lang.model.util.Elements#isAutomaticModule(ModuleElement)\n+ * Automatic modules} (JLS {@jls 7.7.1}) are named modules that do\n+ * <em>not<\/em> have a {@code module-info} file. Implicit information\n+ * is used to model {@linkplain #isUnnamed unnamed modules}.\n+ * <p>In the context of annotation processing, a module element can\n+ * be:\n+ * <ul>\n+ * <li>created from the initial inputs to a run of the tool\n+ * <li>{@linkplain javax.lang.model.util.Elements#getModuleElement(CharSequence)\n+ * queried for} in the configured environment\n+ * <\/ul>\n+ *\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/ModuleElement.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -35,0 +35,22 @@\n+ * @apiNote\n+ * The represented package may have an explicit {@linkplain\n+ * javax.lang.model.util.Elements#getFileObjectOf(Element) reference\n+ * representation} (either source code or executable output) or may be\n+ * created from implicit information. The explicit and standalone\n+ * source code construct for a package is typically a {@code\n+ * package-info.java} file (JLS {@jls 7.4.1}). Implicit information is\n+ * used to model {@linkplain #isUnnamed unnamed packages}.\n+ * <p>In the context of annotation processing, a package element can\n+ * be:\n+ * <ul>\n+ * <li>created from the initial inputs to a run of the tool\n+ * <li>created from {@linkplain\n+ * javax.annotation.processing.Filer#createSourceFile(CharSequence,\n+ * Element...) source code} or {@linkplain\n+ * javax.annotation.processing.Filer#createClassFile(CharSequence,\n+ * Element...) class files} written by a processor\n+ * <li>{@linkplain\n+ * javax.lang.model.util.Elements#getAllPackageElements(CharSequence)\n+ * queried for} in the configured environment\n+ * <\/ul>\n+ *\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/PackageElement.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -56,0 +56,27 @@\n+ * @apiNote\n+ * The represented class or interface may have a {@linkplain\n+ * javax.lang.model.util.Elements#getFileObjectOf(Element) reference\n+ * representation} (either source code or executable output). Multiple\n+ * classes and interfaces can share the same reference representation\n+ * backing construct. For example, multiple classes and interface can\n+ * be declared in the same source file, including, but are not limited\n+ * to:\n+ * <ul>\n+ * <li> a {@linkplain NestingKind#TOP_LEVEL top-level} class or\n+ * interface and auxiliary classes and interfaces\n+ * <li>a top-level class or interface and {@linkplain\n+ * NestingKind#isNested() nested class and interfaces} within it\n+ * <\/ul>\n+ * <p>In the context of annotation processing, a type element can\n+ * be:\n+ * <ul>\n+ * <li>created from the initial inputs to a run of the tool\n+ * <li>created from {@linkplain\n+ * javax.annotation.processing.Filer#createSourceFile(CharSequence,\n+ * Element...) source code} or {@linkplain\n+ * javax.annotation.processing.Filer#createClassFile(CharSequence,\n+ * Element...) class files} written by a processor\n+ * <li>{@linkplain\n+ * javax.lang.model.util.Elements#getAllTypeElements(CharSequence)\n+ * queried for} in the configured environment\n+ * <\/ul>\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/TypeElement.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n- * quality of implementation issue.  If a program is syntactically\n+ * quality of implementation issue.  If a program for a class or interface is syntactically\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}