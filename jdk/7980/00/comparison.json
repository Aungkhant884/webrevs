{"files":[{"patch":"@@ -138,0 +138,3 @@\n+    \/\/ Maintenance note: if the ability to create module-info files\n+    \/\/ through the Filer is added, add link to this method from\n+    \/\/ ModuleElement interface-level discussion.\n@@ -220,0 +223,3 @@\n+    \/\/ Maintenance note: if the ability to create module-info files\n+    \/\/ through the Filer is added, add link to this method from\n+    \/\/ ModuleElement interface-level discussion.\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/Filer.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,9 @@\n+ * @apiNote\n+ * The represented module may have an explicit source code or\n+ * executable output {@linkplain\n+ * javax.lang.model.util.Elements#getFileObjectOf(Element) backing\n+ * construct} or may be created from implicit information. The\n+ * explicit source code construct for a module is typically a {@code\n+ * module-info.java} file (JLS {@jls 7.7}). Implicit information is\n+ * used to model {@linkplain #isUnnamed unnamed modules}.\n+ *\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/ModuleElement.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -35,0 +35,13 @@\n+ * @apiNote\n+ * The represented package may have an explicit {@linkplain\n+ * javax.annotation.processing.Filer#createSourceFile(CharSequence,\n+ * Element...) source code} or {@linkplain\n+ * javax.annotation.processing.Filer#createClassFile(CharSequence,\n+ * Element...)  executable output} {@linkplain\n+ * javax.lang.model.util.Elements#getFileObjectOf(Element) backing\n+ * construct} or may be created from implicit information. The\n+ * explicit source code construct for a package is typically a {@code\n+ * package-info.java} file (JLS {@jls 7.4.1}). Implicit information is\n+ * used to model {@linkplain #isUnnamed unnamed packages} as well as\n+ * named packages without explicit declarations.\n+ *\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/PackageElement.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -56,0 +56,15 @@\n+ * @apiNote\n+ * The represented class or interface may have an explicit {@linkplain\n+ * javax.annotation.processing.Filer#createSourceFile(CharSequence,\n+ * Element...) source code} or {@linkplain\n+ * javax.annotation.processing.Filer#createClassFile(CharSequence,\n+ * Element...) executable output} backing construct. Multiple classes\n+ * and interfaces can share the same {@linkplain\n+ * javax.lang.model.util.Elements#getFileObjectOf(Element) backing\n+ * construct}. For example, multiple classes and interface can be\n+ * declared in the same source file, including, but are not limited\n+ * to, a {@linkplain NestingKind#TOP_LEVEL top-level} class or\n+ * interface and auxiliary classes and interfaces or a top-level class\n+ * or interface and {@linkplain NestingKind#isNested() nested classes}\n+ * within it.\n+ *\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/TypeElement.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n- * quality of implementation issue.  If a program is syntactically\n+ * quality of implementation issue.  If a program for a class or interface is syntactically\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}