{"files":[{"patch":"@@ -138,0 +138,3 @@\n+    \/\/ Maintenance note: if the ability to create module-info files\n+    \/\/ through the Filer is added, add link to this method from\n+    \/\/ ModuleElement interface-level discussion.\n@@ -220,0 +223,3 @@\n+    \/\/ Maintenance note: if the ability to create module-info files\n+    \/\/ through the Filer is added, add link to this method from\n+    \/\/ ModuleElement interface-level discussion.\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/Filer.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,11 @@\n+ * @apiNote\n+ * The represented module may have an explicit {@linkplain\n+ * javax.lang.model.util.Elements#getFileObjectOf(Element) backing\n+ * construct} (either source code or executable output) or may be\n+ * created from implicit information. The explicit and standalone source code\n+ * construct for a module is typically a {@code module-info.java} file\n+ * (JLS {@jls 7.7}). Implicit information is used to model {@linkplain\n+ * #isUnnamed unnamed modules} and may be used for {@linkplain\n+ * javax.lang.model.util.Elements#isAutomaticModule(ModuleElement)\n+ * automatic modules} (JLS {@jls 7.7.1}).\n+ *\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/ModuleElement.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -35,0 +35,13 @@\n+ * @apiNote\n+ * The represented package may have an explicit {@linkplain\n+ * javax.lang.model.util.Elements#getFileObjectOf(Element) backing\n+ * construct} (either {@linkplain\n+ * javax.annotation.processing.Filer#createSourceFile(CharSequence,\n+ * Element...) source code} or {@linkplain\n+ * javax.annotation.processing.Filer#createClassFile(CharSequence,\n+ * Element...) executable output}) or may be created from implicit\n+ * information. The explicit and standalone source code construct for\n+ * a package is typically a {@code package-info.java} file (JLS {@jls\n+ * 7.4.1}). Implicit information is used to model {@linkplain\n+ * #isUnnamed unnamed packages}.\n+ *\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/PackageElement.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -56,0 +56,19 @@\n+ * @apiNote\n+ * The represented class or interface may have an explicit backing\n+ * construct (either {@linkplain\n+ * javax.annotation.processing.Filer#createSourceFile(CharSequence,\n+ * Element...) source code} or {@linkplain\n+ * javax.annotation.processing.Filer#createClassFile(CharSequence,\n+ * Element...) executable output}). Multiple classes and interfaces\n+ * can share the same {@linkplain\n+ * javax.lang.model.util.Elements#getFileObjectOf(Element) backing\n+ * construct}. For example, multiple classes and interface can be\n+ * declared in the same source file, including, but are not limited\n+ * to:\n+ * <ul>\n+ * <li> a {@linkplain NestingKind#TOP_LEVEL top-level} class or\n+ * interface and auxiliary classes and interfaces\n+ * <li>a top-level class or interface and {@linkplain\n+ * NestingKind#isNested() nested class and interfaces} within it\n+ * <\/ul>\n+ *\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/TypeElement.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n- * quality of implementation issue.  If a program is syntactically\n+ * quality of implementation issue.  If a program for a class or interface is syntactically\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}