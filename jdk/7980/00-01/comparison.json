{"files":[{"patch":"@@ -36,2 +36,1 @@\n- * The represented module may have an explicit source code or\n- * executable output {@linkplain\n+ * The represented module may have an explicit {@linkplain\n@@ -39,4 +38,5 @@\n- * construct} or may be created from implicit information. The\n- * explicit source code construct for a module is typically a {@code\n- * module-info.java} file (JLS {@jls 7.7}). Implicit information is\n- * used to model {@linkplain #isUnnamed unnamed modules}.\n+ * construct} (either source code or executable output) or may be\n+ * created from implicit information. The explicit source code\n+ * construct for a module is typically a {@code module-info.java} file\n+ * (JLS {@jls 7.7}). Implicit information is used to model {@linkplain\n+ * #isUnnamed unnamed modules}.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/ModuleElement.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+ * javax.lang.model.util.Elements#getFileObjectOf(Element) backing\n+ * construct} (either {@linkplain\n@@ -40,7 +42,5 @@\n- * Element...)  executable output} {@linkplain\n- * javax.lang.model.util.Elements#getFileObjectOf(Element) backing\n- * construct} or may be created from implicit information. The\n- * explicit source code construct for a package is typically a {@code\n- * package-info.java} file (JLS {@jls 7.4.1}). Implicit information is\n- * used to model {@linkplain #isUnnamed unnamed packages} as well as\n- * named packages without explicit declarations.\n+ * Element...) executable output}) or may be created from implicit\n+ * information. The explicit and standalone source code construct for\n+ * a package is typically a {@code package-info.java} file (JLS {@jls\n+ * 7.4.1}). Implicit information is used to model {@linkplain\n+ * #isUnnamed unnamed packages}.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/PackageElement.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -57,1 +57,2 @@\n- * The represented class or interface may have an explicit {@linkplain\n+ * The represented class or interface may have an explicit backing\n+ * construct (either {@linkplain\n@@ -61,2 +62,2 @@\n- * Element...) executable output} backing construct. Multiple classes\n- * and interfaces can share the same {@linkplain\n+ * Element...) executable output}). Multiple classes and interfaces\n+ * can share the same {@linkplain\n@@ -66,4 +67,7 @@\n- * to, a {@linkplain NestingKind#TOP_LEVEL top-level} class or\n- * interface and auxiliary classes and interfaces or a top-level class\n- * or interface and {@linkplain NestingKind#isNested() nested classes}\n- * within it.\n+ * to:\n+ * <ul>\n+ * <li> a {@linkplain NestingKind#TOP_LEVEL top-level} class or\n+ * interface and auxiliary classes and interfaces\n+ * <li>a top-level class or interface and {@linkplain\n+ * NestingKind#isNested() nested class and interfaces} within it\n+ * <\/ul>\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/TypeElement.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"}]}