{"files":[{"patch":"@@ -37,6 +37,5 @@\n- * javax.lang.model.util.Elements#getFileObjectOf(Element) backing\n- * construct} (either source code or executable output) or may be\n- * created from implicit information. The explicit and standalone source code\n- * construct for a module is typically a {@code module-info.java} file\n- * (JLS {@jls 7.7}). Implicit information is used to model {@linkplain\n- * #isUnnamed unnamed modules} and may be used for {@linkplain\n+ * javax.lang.model.util.Elements#getFileObjectOf(Element) reference\n+ * representation} (either source code or executable output) or may be\n+ * created from implicit information. The explicit and standalone\n+ * source code construct for a module is typically a {@code\n+ * module-info.java} file (JLS {@jls 7.7}). {@linkplain\n@@ -44,1 +43,10 @@\n- * automatic modules} (JLS {@jls 7.7.1}).\n+ * Automatic modules} (JLS {@jls 7.7.1}) are named modules that do\n+ * <em>not<\/em> have a {@code module-info} file. Implicit information\n+ * is used to model {@linkplain #isUnnamed unnamed modules}.\n+ * <p>In the context of annotation processing, a module element can\n+ * be:\n+ * <ul>\n+ * <li>created from the initial inputs to a run of the tool\n+ * <li>{@linkplain javax.lang.model.util.Elements#getModuleElement(CharSequence)\n+ * queried for} in the configured environment\n+ * <\/ul>\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/ModuleElement.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -37,2 +37,11 @@\n- * javax.lang.model.util.Elements#getFileObjectOf(Element) backing\n- * construct} (either {@linkplain\n+ * javax.lang.model.util.Elements#getFileObjectOf(Element) reference\n+ * representation} (either source code or executable output) or may be\n+ * created from implicit information. The explicit and standalone\n+ * source code construct for a package is typically a {@code\n+ * package-info.java} file (JLS {@jls 7.4.1}). Implicit information is\n+ * used to model {@linkplain #isUnnamed unnamed packages}.\n+ * <p>In the context of annotation processing, a package element can\n+ * be:\n+ * <ul>\n+ * <li>created from the initial inputs to a run of the tool\n+ * <li>created from {@linkplain\n@@ -42,5 +51,5 @@\n- * Element...) executable output}) or may be created from implicit\n- * information. The explicit and standalone source code construct for\n- * a package is typically a {@code package-info.java} file (JLS {@jls\n- * 7.4.1}). Implicit information is used to model {@linkplain\n- * #isUnnamed unnamed packages}.\n+ * Element...) class files} written by a processor\n+ * <li>{@linkplain\n+ * javax.lang.model.util.Elements#getAllPackageElements(CharSequence)\n+ * queried for} in the configured environment\n+ * <\/ul>\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/PackageElement.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -57,10 +57,6 @@\n- * The represented class or interface may have an explicit backing\n- * construct (either {@linkplain\n- * javax.annotation.processing.Filer#createSourceFile(CharSequence,\n- * Element...) source code} or {@linkplain\n- * javax.annotation.processing.Filer#createClassFile(CharSequence,\n- * Element...) executable output}). Multiple classes and interfaces\n- * can share the same {@linkplain\n- * javax.lang.model.util.Elements#getFileObjectOf(Element) backing\n- * construct}. For example, multiple classes and interface can be\n- * declared in the same source file, including, but are not limited\n+ * The represented class or interface may have a {@linkplain\n+ * javax.lang.model.util.Elements#getFileObjectOf(Element) reference\n+ * representation} (either source code or executable output). Multiple\n+ * classes and interfaces can share the same reference representation\n+ * backing construct. For example, multiple classes and interface can\n+ * be declared in the same source file, including, but are not limited\n@@ -74,1 +70,13 @@\n- *\n+ * <p>In the context of annotation processing, a type element can\n+ * be:\n+ * <ul>\n+ * <li>created from the initial inputs to a run of the tool\n+ * <li>created from {@linkplain\n+ * javax.annotation.processing.Filer#createSourceFile(CharSequence,\n+ * Element...) source code} or {@linkplain\n+ * javax.annotation.processing.Filer#createClassFile(CharSequence,\n+ * Element...) class files} written by a processor\n+ * <li>{@linkplain\n+ * javax.lang.model.util.Elements#getAllTypeElements(CharSequence)\n+ * queried for} in the configured environment\n+ * <\/ul>\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/TypeElement.java","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"}]}