{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+import javax.xml.catalog.CatalogResolver.NotFoundAction;\n@@ -62,2 +63,2 @@\n-    \/\/Value of the resolve attribute\n-    ResolveType resolveType = ResolveType.STRICT;\n+    \/\/Value of the resolve attribute mapped to the resolver's action type\n+    NotFoundAction resolveType = NotFoundAction.STRICT;\n@@ -262,1 +263,1 @@\n-        resolveType = ResolveType.getType(value);\n+        resolveType = NotFoundAction.getType(value);\n@@ -270,1 +271,1 @@\n-    public final ResolveType getResolve() {\n+    public final NotFoundAction getResolve() {\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/CatalogImpl.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -80,2 +80,5 @@\n-     * @apiNote Calling this method is equivalent to calling\n-     * {@code catalogResolver(Catalog, null)}.\n+     * @apiNote The {@code CatalogResolver} created by this method delegates to\n+     * the underlying {@code catalog}'s RESOLVE property. The {@code CatalogResolver}\n+     * created by {@link #catalogResolver(Catalog, CatalogResolver.NotFoundAction)\n+     * catalogResover(Catalog, CatalogResolver.NotFoundAction)} is based on the\n+     * specified action type when it is unable to resolve a reference.\n@@ -92,2 +95,6 @@\n-     * Creates an instance of a {@code CatalogResolver} using the specified catalog\n-     * and the value of the {@link CatalogFeatures.Feature#RESOLVE RESOLVE} property.\n+     * Creates a {@code CatalogResolver} that resolves external references with the given\n+     * {@code catalog} and {@link CatalogResolver.NotFoundAction action} type\n+     * that determines the behavior when unable to resolve a reference.\n+     * <p>\n+     * The {@link CatalogResolver.NotFoundAction action} types are mapped to the values\n+     * of the {@link CatalogFeatures.Feature#RESOLVE RESOLVE} property.\n@@ -96,6 +103,1 @@\n-     * @param resolve the value of the {@link CatalogFeatures.Feature#RESOLVE RESOLVE}\n-     * property that overrides the previous setting used for creating the {@code catalog}\n-     * object. The supported values are: {@code strict}, {@code continue},\n-     * and {@code ignore}. {@code null} may be specified to indicate that the\n-     * {@code catalog} object's current {@link CatalogFeatures.Feature#RESOLVE RESOLVE}\n-     * value remains unchanged.\n+     * @param action the action to be taken when unable to resolve a reference\n@@ -103,4 +105,1 @@\n-     * @return an instance of a {@code CatalogResolver}\n-     * @throws IllegalArgumentException if the value of the {@code resolve} property is\n-     * not a supported value or {@code null}.\n-     * @throws NullPointerException if {@code catalog} is null\n+     * @return a {@code CatalogResolver} with the {@code catalog} and {@code action} type\n@@ -110,1 +109,1 @@\n-    public static CatalogResolver catalogResolver(Catalog catalog, String resolve) {\n+    public static CatalogResolver catalogResolver(Catalog catalog, CatalogResolver.NotFoundAction action) {\n@@ -112,0 +111,1 @@\n+        if (action == null) CatalogMessages.reportNPEOnNull(\"action\", null);\n@@ -113,5 +113,1 @@\n-        if (resolve != null && GroupEntry.ResolveType.getType(resolve) == null) {\n-            CatalogMessages.reportIAE(CatalogMessages.ERR_INVALID_ARGUMENT,\n-                    new Object[]{resolve, \"RESOLVE\"}, null);\n-        }\n-        return new CatalogResolverImpl(catalog, resolve);\n+        return new CatalogResolverImpl(catalog, action);\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/CatalogManager.java","additions":16,"deletions":20,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -162,1 +162,1 @@\n-                        resolve = catalog.getResolve().literal;\n+                        resolve = catalog.getResolve().toString();\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/CatalogReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -238,0 +238,49 @@\n+    \/**\n+     * Defines the actions that a CatalogResolver may take when it is unable to\n+     * resolve an external reference. The actions are mapped to the string values\n+     * of the {@link CatalogFeatures.Feature#RESOLVE RESOLVE} property.\n+     *\n+     * @since 22\n+     *\/\n+    public static enum NotFoundAction {\n+        \/**\n+         * Indicates that the processing should continue as defined by the\n+         * {@link CatalogFeatures.Feature#RESOLVE RESOLVE} property.\n+         *\/\n+        CONTINUE {\n+            @Override\n+            public String toString() { return \"continue\"; }\n+        },\n+        \/**\n+         * Indicates that the reference is skipped as defined by the\n+         * {@link CatalogFeatures.Feature#RESOLVE RESOLVE} property.\n+         *\/\n+        IGNORE {\n+            @Override\n+            public String toString() { return \"ignore\"; }\n+        },\n+        \/**\n+         * Indicates that the resolver should throw a CatalogException as defined\n+         * by the {@link CatalogFeatures.Feature#RESOLVE RESOLVE} property.\n+         *\/\n+        STRICT {\n+            @Override\n+            public String toString() { return \"strict\"; }\n+        };\n+\n+        \/**\n+         * Returns the action type mapped to the specified\n+         * {@link CatalogFeatures.Feature#RESOLVE resolve} property.\n+         *\n+         * @param resolve the value of the RESOLVE property\n+         * @return the action type\n+         *\/\n+        static public NotFoundAction getType(String resolve) {\n+            for (NotFoundAction type : NotFoundAction.values()) {\n+                if (type.toString().equals(resolve)) {\n+                    return type;\n+                }\n+            }\n+            return null;\n+        }\n+    }\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/CatalogResolver.java","additions":50,"deletions":1,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -54,1 +54,2 @@\n-    GroupEntry.ResolveType resolveType;\n+    \/\/ resolution action type\n+    NotFoundAction resolveType;\n@@ -66,2 +67,2 @@\n-     * Construct an instance of the CatalogResolver from a Catalog and the resolve\n-     * property.\n+     * Construct an instance of the CatalogResolver from a Catalog and the\n+     * {@link CatalogResolver.NotFoundAction action} type.\n@@ -70,1 +71,1 @@\n-     * @param resolve the resolve property\n+     * @param action the action type\n@@ -72,1 +73,1 @@\n-    public CatalogResolverImpl(Catalog catalog, String resolve) {\n+    public CatalogResolverImpl(Catalog catalog, NotFoundAction action) {\n@@ -74,1 +75,2 @@\n-        if (resolve == null) {\n+        \/\/ Note: can only happen in this impl\n+        if (action == null) {\n@@ -77,1 +79,1 @@\n-            resolveType = GroupEntry.ResolveType.getType(resolve);\n+            resolveType = action;\n@@ -163,1 +165,0 @@\n-            GroupEntry.ResolveType resolveType = c.getResolve();\n@@ -247,1 +248,0 @@\n-        GroupEntry.ResolveType resolveType = ((CatalogImpl) catalog).getResolve();\n@@ -268,1 +268,0 @@\n-        GroupEntry.ResolveType resolveType = ((CatalogImpl) catalog).getResolve();\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/CatalogResolverImpl.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,28 +110,0 @@\n-    \/**\n-     * PreferType represents possible values of the resolve property\n-     *\/\n-    public static enum ResolveType {\n-        STRICT(CatalogFeatures.RESOLVE_STRICT),\n-        CONTINUE(CatalogFeatures.RESOLVE_CONTINUE),\n-        IGNORE(CatalogFeatures.RESOLVE_IGNORE);\n-\n-        final String literal;\n-\n-        ResolveType(String literal) {\n-            this.literal = literal;\n-        }\n-\n-        static public ResolveType getType(String resolveType) {\n-            for (ResolveType type : ResolveType.values()) {\n-                if (type.isType(resolveType)) {\n-                    return type;\n-                }\n-            }\n-            return null;\n-        }\n-\n-        public boolean isType(String type) {\n-            return literal.equals(type);\n-        }\n-    }\n-\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/GroupEntry.java","additions":1,"deletions":29,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import javax.xml.catalog.CatalogResolver.NotFoundAction;\n@@ -73,1 +74,1 @@\n-            {\"continue\", \"strict\", SYSTEM_ID, \"system.dtd\", null},\n+            {\"continue\", NotFoundAction.STRICT, SYSTEM_ID, \"system.dtd\", null},\n@@ -75,1 +76,1 @@\n-            {\"continue\", \"strict\", \"bogusID\", \"\", CatalogException.class},\n+            {\"continue\", NotFoundAction.STRICT, \"bogusID\", \"\", CatalogException.class},\n@@ -79,4 +80,4 @@\n-            {\"strict\", \"ignore\", \"bogusID\", null, null},\n-            {\"strict\", \"continue\", \"bogusID\", null, null},\n-            \/\/ null indicates not explicitly set\n-            {\"continue\", null, \"bogusID\", null, null},\n+            {\"strict\", NotFoundAction.IGNORE, \"bogusID\", null, null},\n+            {\"strict\", NotFoundAction.CONTINUE, \"bogusID\", null, null},\n+         };\n+    }\n@@ -84,3 +85,5 @@\n-            \/\/ invalid values, expect IAE\n-            {\"continue\", \"invalidValue\", \"bogusID\", \"\", IllegalArgumentException.class},\n-            {\"continue\", \"\", \"bogusID\", \"\", IllegalArgumentException.class},\n+    @DataProvider(name = \"NPETest\")\n+    public Object[][] getNPETest() throws Exception {\n+        return new Object[][]{\n+            {null, null},\n+            {getCatalog(\"ignore\"), null},\n@@ -91,5 +94,6 @@\n-     * Tests the factory method for creating CatalogResolver with a RESOLVE property.\n-     * The 2-arg {@link javax.xml.catalog.CatalogManager#catalogResolver(javax.xml.catalog.Catalog, java.lang.String) catalogResolver}\n-     * method adds the RESOLVE property on top of the single arg\n-     * {@link javax.xml.catalog.CatalogManager#catalogResolver(javax.xml.catalog.Catalog) catalogResolver}\n-     * method.\n+     * Tests the factory method for creating CatalogResolver with an\n+     * {@link javax.xml.catalog.CatalogResolver.NotFoundAction action} type.\n+     * The 2-arg {@link javax.xml.catalog.CatalogManager#catalogResolver(\n+     * javax.xml.catalog.Catalog, javax.xml.catalog.CatalogResolver.NotFoundAction)\n+     * catalogResolver} method adds the action type to be used for determining\n+     * the behavior instead of relying on the underlying catalog.\n@@ -98,1 +102,1 @@\n-     * @param crResolve the resolve property set on the CatalogResolver to override\n+     * @param action the resolve property set on the CatalogResolver to override\n@@ -106,5 +110,4 @@\n-    public void testResolveProperty(String cResolve, String crResolve, String systemId, String expectedResult, Class<Throwable> expectedThrow) throws Exception {\n-        URI catalogFile = getClass().getResource(\"catalog.xml\").toURI();\n-        Catalog c = CatalogManager.catalog(\n-                CatalogFeatures.builder().with(CatalogFeatures.Feature.RESOLVE, cResolve).build(),\n-                catalogFile);\n+    public void testResolveProperty(String cResolve, NotFoundAction action,\n+            String systemId, String expectedResult, Class<Throwable> expectedThrow)\n+            throws Exception {\n+        Catalog c = getCatalog(cResolve);\n@@ -114,1 +117,1 @@\n-                () -> resolveRef(c, crResolve, systemId));\n+                () -> resolveRef(c, action, systemId));\n@@ -117,1 +120,1 @@\n-            String sysId = resolveRef(c, crResolve, systemId);\n+            String sysId = resolveRef(c, action, systemId);\n@@ -123,1 +126,0 @@\n-\n@@ -128,2 +130,1 @@\n-     * the {@code catalog} parameter is null. Note that the {@code resolve} parameter\n-     * is tested with {@code testResolveProperty}.\n+     * any of the parameters is null.\n@@ -131,3 +132,3 @@\n-    @Test(expectedExceptions = NullPointerException.class)\n-    public void testCatalogProperty() {\n-        CatalogManager.catalogResolver((Catalog)null, (String)null);\n+    @Test(dataProvider = \"NPETest\", expectedExceptions = NullPointerException.class)\n+    public void testCatalogProperty(Catalog c, NotFoundAction action) {\n+        CatalogManager.catalogResolver(c, action);\n@@ -136,2 +137,2 @@\n-    private String resolveRef(Catalog c, String crResolve, String systemId) throws Exception {\n-        CatalogResolver cr = CatalogManager.catalogResolver(c, crResolve);\n+    private String resolveRef(Catalog c, NotFoundAction action, String systemId) throws Exception {\n+        CatalogResolver cr = CatalogManager.catalogResolver(c, action);\n@@ -141,0 +142,8 @@\n+\n+    private Catalog getCatalog(String cResolve) throws Exception {\n+        URI catalogFile = getClass().getResource(\"catalog.xml\").toURI();\n+        Catalog c = CatalogManager.catalog(\n+                CatalogFeatures.builder().with(CatalogFeatures.Feature.RESOLVE, cResolve).build(),\n+                catalogFile);\n+        return c;\n+    }\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/CatalogResolverTest.java","additions":39,"deletions":30,"binary":false,"changes":69,"status":"modified"}]}