{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,0 +80,3 @@\n+     * @apiNote Calling this method is equivalent to calling\n+     * {@code catalogResolver(Catalog, null)}.\n+     *\n@@ -88,0 +91,28 @@\n+    \/**\n+     * Creates an instance of a {@code CatalogResolver} using the specified catalog\n+     * and the value of the {@link CatalogFeatures.Feature#RESOLVE RESOLVE} property.\n+     *\n+     * @param catalog the catalog instance\n+     * @param resolve the value of the {@link CatalogFeatures.Feature#RESOLVE RESOLVE}\n+     * property that overrides the previous setting used for creating the {@code catalog}\n+     * object. The supported values are: {@code strict}, {@code continue},\n+     * and {@code ignore}. {@code null} may be specified to indicate that the\n+     * {@code catalog} object's current {@link CatalogFeatures.Feature#RESOLVE RESOLVE}\n+     * value remains unchanged.\n+     *\n+     * @return an instance of a {@code CatalogResolver}\n+     * @throws IllegalArgumentException if the value of the {@code resolve} property is\n+     * not a supported value or {@code null}.\n+     *\n+     * @since 22\n+     *\/\n+    public static CatalogResolver catalogResolver(Catalog catalog, String resolve) {\n+        if (catalog == null) CatalogMessages.reportNPEOnNull(\"catalog\", null);\n+\n+        if (resolve != null && GroupEntry.ResolveType.getType(resolve) == null) {\n+            CatalogMessages.reportIAE(CatalogMessages.ERR_INVALID_ARGUMENT,\n+                    new Object[]{resolve, \"RESOLVE\"}, null);\n+        }\n+        return new CatalogResolverImpl(catalog, resolve);\n+    }\n+\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/CatalogManager.java","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -175,1 +175,1 @@\n-                group = new GroupEntry(catalog, base, prefer);\n+                group = new GroupEntry(catalog, Util.getAbsoluteURI(catalog.systemId, base), prefer);\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/CatalogReader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,1 @@\n+    GroupEntry.ResolveType resolveType;\n@@ -61,1 +62,1 @@\n-        this.catalog = catalog;\n+        this(catalog, null);\n@@ -64,0 +65,15 @@\n+    \/**\n+     * Construct an instance of the CatalogResolver from a Catalog and the resolve\n+     * property.\n+     *\n+     * @param catalog a Catalog object\n+     * @param resolve the resolve property\n+     *\/\n+    public CatalogResolverImpl(Catalog catalog, String resolve) {\n+        this.catalog = catalog;\n+        if (resolve == null) {\n+            resolveType = ((CatalogImpl) catalog).getResolve();\n+        } else {\n+            resolveType = GroupEntry.ResolveType.getType(resolve);\n+        }\n+    }\n@@ -94,1 +110,0 @@\n-        GroupEntry.ResolveType resolveType = ((CatalogImpl) catalog).getResolve();\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/CatalogResolverImpl.java","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,2 @@\n+import java.net.URL;\n+import java.nio.file.Paths;\n@@ -270,0 +272,30 @@\n+\n+    \/**\n+     * Returns the absolute form of the specified uri after resolving it against\n+     * the base. Returns the uri as is if it's already absolute.\n+     *\n+     * @param base the base, that is the system id of the catalog within the\n+     * Catalog implementation\n+     * @param uri the specified uri\n+     * @return Returns the absolute form of the specified uri\n+     *\/\n+    static String getAbsoluteURI(String base, String uri) {\n+        try {\n+            URI baseURI = URI.create(base);\n+            URI specURI = URI.create(uri);\n+            String temp;\n+            if (specURI.isAbsolute()) {\n+                temp = specURI.toURL().toString();\n+            } else {\n+                if (SCHEME_JAR.equalsIgnoreCase(baseURI.getScheme())) {\n+                    temp = Paths.get(base, uri).toString();\n+                } else {\n+                    temp = baseURI.resolve(uri).toString();\n+                }\n+            }\n+            return temp;\n+        } catch (MalformedURLException ex) {\n+            \/\/ no action, shouldn't happen as the base has already been validated\n+        }\n+        return uri;\n+    }\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/Util.java","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package catalog;\n+\n+import java.net.URI;\n+import java.nio.file.Paths;\n+import javax.xml.catalog.Catalog;\n+import javax.xml.catalog.CatalogException;\n+import javax.xml.catalog.CatalogFeatures;\n+import javax.xml.catalog.CatalogManager;\n+import javax.xml.catalog.CatalogResolver;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Listeners;\n+import org.testng.annotations.Test;\n+import org.xml.sax.InputSource;\n+\n+\/*\n+ * @test\n+ * @bug 8316996\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @run testng\/othervm catalog.CatalogResolverTest\n+ * @summary Tests CatalogResolver functions. See CatalogTest for existing basic\n+ * functional tests.\n+ *\/\n+@Listeners({jaxp.library.FilePolicy.class})\n+public class CatalogResolverTest extends CatalogSupportBase {\n+    static final String KEY_FILES = \"javax.xml.catalog.files\";\n+    static final String SYSTEM_ID = \"http:\/\/openjdk_java_net\/xml\/catalog\/dtd\/system.dtd\";\n+\n+    \/*\n+     * Initializing fields\n+     *\/\n+    @BeforeClass\n+    public void setUpClass() throws Exception {\n+        super.setUp();\n+    }\n+\n+    \/*\n+       DataProvider: data used to verify the RESOLVE property, including the valid\n+                     values and the effect of overriding that on the Catalog.\n+        Data columns:\n+        resolve property for the Catalog, resolve property for the CatalogResolver,\n+        system ID to be resolved, expected result, expected exception\n+     *\/\n+    @DataProvider(name = \"factoryMethodInput\")\n+    public Object[][] getInputs() throws Exception {\n+\n+        return new Object[][]{\n+            \/\/ Valid values and overriding verification\n+            \/\/ RESOLVE=strict but expected match\n+            {\"continue\", \"strict\", SYSTEM_ID, \"system.dtd\", null},\n+            \/\/ RESOLVE=strict plus no match: expect exception\n+            {\"continue\", \"strict\", \"bogusID\", \"\", CatalogException.class},\n+            \/\/ RESOLVE=ignore, continue: expect no match but without an exception\n+            \/\/ Note that these tests do not differentiate empty InputSource from\n+            \/\/ null, in both cases, the returned ID is null\n+            {\"strict\", \"ignore\", \"bogusID\", null, null},\n+            {\"strict\", \"continue\", \"bogusID\", null, null},\n+            \/\/ null indicates not explicitly set\n+            {\"continue\", null, \"bogusID\", null, null},\n+\n+            \/\/ invalid values, expect IAE\n+            {\"continue\", \"invalidValue\", \"bogusID\", \"\", IllegalArgumentException.class},\n+            {\"continue\", \"\", \"bogusID\", \"\", IllegalArgumentException.class},\n+         };\n+    }\n+\n+    \/**\n+     * Tests the factory method for creating CatalogResolver with a RESOLVE property.\n+     * The 2-arg {@link javax.xml.catalog.CatalogManager#catalogResolver(javax.xml.catalog.Catalog, java.lang.String) catalogResolver}\n+     * method adds the RESOLVE property on top of the single arg\n+     * {@link javax.xml.catalog.CatalogManager#catalogResolver(javax.xml.catalog.Catalog) catalogResolver}\n+     * method.\n+     *\n+     * @param cResolve the resolve property set on the Catalog object\n+     * @param crResolve the resolve property set on the CatalogResolver to override\n+     *                  that of the Catalog\n+     * @param systemId the system ID to be resolved\n+     * @param expectedResult the expected result\n+     * @param expectedThrow the expected exception\n+     * @throws Exception if the test fails\n+     *\/\n+    @Test(dataProvider = \"factoryMethodInput\")\n+    public void testResolveProperty(String cResolve, String crResolve, String systemId, String expectedResult, Class<Throwable> expectedThrow) throws Exception {\n+        URI catalogFile = getClass().getResource(\"catalog.xml\").toURI();\n+        Catalog c = CatalogManager.catalog(\n+                CatalogFeatures.builder().with(CatalogFeatures.Feature.RESOLVE, cResolve).build(),\n+                catalogFile);\n+\n+        if (expectedThrow != null) {\n+            Assert.assertThrows(expectedThrow,\n+                () -> resolveRef(c, crResolve, systemId));\n+        } else {\n+\n+            String sysId = resolveRef(c, crResolve, systemId);\n+            System.out.println(sysId);\n+            Assert.assertEquals(sysId,\n+                    (expectedResult == null) ? null : Paths.get(filepath + expectedResult).toUri().toString().replace(\"\/\/\/\", \"\/\"),\n+                    \"System ID match not right\");\n+        }\n+\n+    }\n+\n+    private String resolveRef(Catalog c, String crResolve, String systemId) throws Exception {\n+        CatalogResolver cr = CatalogManager.catalogResolver(c, crResolve);\n+        InputSource is = cr.resolveEntity(\"\", systemId);\n+        return is == null ? null : is.getSystemId();\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/CatalogResolverTest.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -509,1 +509,1 @@\n-        CatalogResolver resolver = CatalogManager.catalogResolver(null, null);\n+        CatalogResolver resolver = CatalogManager.catalogResolver((CatalogFeatures)null, (URI)null);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/CatalogTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}