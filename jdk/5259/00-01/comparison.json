{"files":[{"patch":"@@ -4073,2 +4073,2 @@\n-\/\/----------------------needs_mem_bar-------------------------\n-bool LibraryCallKit::needs_mem_bar(Node* base, Node* addr) {\n+\/\/----------------------has_wide_mem-------------------------\n+bool LibraryCallKit::has_wide_mem(Node* addr, Node* base) {\n@@ -4076,0 +4076,1 @@\n+\n@@ -4077,1 +4078,1 @@\n-  bool in_heap = !TypePtr::NULL_PTR->higher_equal(base_t);\n+  bool in_heap   = !TypePtr::NULL_PTR->higher_equal(base_t);\n@@ -4093,5 +4094,5 @@\n-  Node* src_ptr =         argument(1);   \/\/ type: oop\n-  Node* src_off = ConvL2X(argument(2));  \/\/ type: long\n-  Node* dst_ptr =         argument(4);   \/\/ type: oop\n-  Node* dst_off = ConvL2X(argument(5));  \/\/ type: long\n-  Node* size    = ConvL2X(argument(7));  \/\/ type: long\n+  Node* src_base =         argument(1);   \/\/ type: oop\n+  Node* src_off  = ConvL2X(argument(2));  \/\/ type: long\n+  Node* dst_base =         argument(4);   \/\/ type: oop\n+  Node* dst_off  = ConvL2X(argument(5));  \/\/ type: long\n+  Node* size     = ConvL2X(argument(7));  \/\/ type: long\n@@ -4102,10 +4103,2 @@\n-  Node* src = make_unsafe_address(src_ptr, src_off);\n-  Node* dst = make_unsafe_address(dst_ptr, dst_off);\n-\n-  bool needs_cpu_mem_bar = needs_mem_bar(src_ptr, src) ||\n-                           needs_mem_bar(dst_ptr, dst);\n-\n-  if (needs_cpu_mem_bar) {\n-    \/\/ Do not let writes of the copy source or destination float below the copy.\n-    insert_mem_bar(Op_MemBarCPUOrder);\n-  }\n+  Node* src_addr = make_unsafe_address(src_base, src_off);\n+  Node* dst_addr = make_unsafe_address(dst_base, dst_off);\n@@ -4121,2 +4114,0 @@\n-  \/\/ Adjust memory effects\n-  const TypePtr* dst_type = TypeRawPtr::BOTTOM;\n@@ -4124,8 +4115,10 @@\n-  if (!needs_cpu_mem_bar) {\n-    dst_type = _gvn.type(dst)->is_ptr(); \/\/ narrow out memory\n-\n-    const TypePtr* src_type = _gvn.type(src)->is_ptr();\n-    bool wide_out = (C->get_alias_index(dst_type) == Compile::AliasIdxBot);\n-    bool has_narrow_mem = !wide_out && (C->get_alias_index(src_type) == C->get_alias_index(dst_type));\n-    if (has_narrow_mem) {\n-      flags |= RC_NARROW_MEM;\n+\n+  const TypePtr* dst_type = TypePtr::BOTTOM;\n+\n+  \/\/ Adjust memory effects\n+  if (!has_wide_mem(src_addr, src_base) && !has_wide_mem(dst_addr, dst_base)) {\n+    dst_type = _gvn.type(dst_addr)->is_ptr(); \/\/ narrow out memory\n+\n+    const TypePtr* src_type = _gvn.type(src_addr)->is_ptr();\n+    if (C->get_alias_index(src_type) == C->get_alias_index(dst_type)) {\n+      flags |= RC_NARROW_MEM; \/\/ narrow in memory\n@@ -4141,1 +4134,1 @@\n-                    src, dst, size XTOP);\n+                    src_addr, dst_addr, size XTOP);\n@@ -4145,5 +4138,0 @@\n-  if (needs_cpu_mem_bar) {\n-    \/\/ Do not let reads of the copy destination float above the copy.\n-    insert_mem_bar(Op_MemBarCPUOrder);\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":22,"deletions":34,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-  bool needs_mem_bar(Node* base, Node* addr);\n+  bool has_wide_mem(Node* addr, Node* base);\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}