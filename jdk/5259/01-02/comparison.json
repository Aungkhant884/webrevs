{"files":[{"patch":"@@ -4075,1 +4075,2 @@\n-  const Type* base_t = _gvn.type(base);\n+  const TypeAryPtr* addr_t = _gvn.type(addr)->isa_aryptr();\n+  const Type*       base_t = _gvn.type(base);\n@@ -4081,2 +4082,3 @@\n-  bool is_array = _gvn.type(addr)->isa_aryptr();\n-  return is_mixed || (in_heap && !is_array);\n+  bool is_prim_array = (addr_t != NULL) && (addr_t->elem() != Type::BOTTOM);\n+\n+  return is_mixed || (in_heap && !is_prim_array);\n@@ -4094,5 +4096,5 @@\n-  Node* src_base =         argument(1);   \/\/ type: oop\n-  Node* src_off  = ConvL2X(argument(2));  \/\/ type: long\n-  Node* dst_base =         argument(4);   \/\/ type: oop\n-  Node* dst_off  = ConvL2X(argument(5));  \/\/ type: long\n-  Node* size     = ConvL2X(argument(7));  \/\/ type: long\n+  Node* src_base =         argument(1);  \/\/ type: oop\n+  Node* src_off  = ConvL2X(argument(2)); \/\/ type: long\n+  Node* dst_base =         argument(4);  \/\/ type: oop\n+  Node* dst_off  = ConvL2X(argument(5)); \/\/ type: long\n+  Node* size     = ConvL2X(argument(7)); \/\/ type: long\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-                dstArr, Unsafe.ARRAY_INT_BASE_OFFSET, 4);\n+                          dstArr, Unsafe.ARRAY_INT_BASE_OFFSET, 4);\n@@ -91,1 +91,1 @@\n-                dstObj, Unsafe.ARRAY_INT_BASE_OFFSET, 4); \/\/ mixed\n+                          dstObj, Unsafe.ARRAY_INT_BASE_OFFSET, 4); \/\/ mixed\n@@ -106,1 +106,1 @@\n-                dstArrL, Unsafe.ARRAY_LONG_BASE_OFFSET, 4); \/\/ mismatched\n+                          dstArrL, Unsafe.ARRAY_LONG_BASE_OFFSET, 4); \/\/ mismatched\n@@ -123,1 +123,1 @@\n-                dstArr,      Unsafe.ARRAY_INT_BASE_OFFSET, 4);\n+                          dstArr,      Unsafe.ARRAY_INT_BASE_OFFSET, 4);\n@@ -140,1 +140,1 @@\n-                dstArrLocal, Unsafe.ARRAY_INT_BASE_OFFSET, 4);\n+                          dstArrLocal, Unsafe.ARRAY_INT_BASE_OFFSET, 4);\n@@ -149,0 +149,47 @@\n+    static int testHeapToHeapLocalSrcMismatched(int v1, int v2, int v3, int v4, int writeIdx, boolean flag) {\n+        \/\/ assert(writeIdx == 0);\n+        \/\/ assert(b == true);\n+        int[]  srcArrIntLocal  = new int[1];\n+        long[] srcArrLongLocal = new long[1];\n+\n+        Object srcArrLocal = (flag ? srcArrIntLocal               : srcArrLongLocal);\n+        long   srcOffset   = (flag ? Unsafe.ARRAY_INT_BASE_OFFSET : Unsafe.ARRAY_LONG_BASE_OFFSET);\n+\n+        srcArrIntLocal[0]  = v1;\n+        srcArrLongLocal[0] = v1;\n+        dstArr[writeIdx] = v2;\n+\n+        UNSAFE.copyMemory(srcArrLocal, srcOffset,\n+                          dstArr,      Unsafe.ARRAY_INT_BASE_OFFSET, 4);\n+        int r = resArr[0]; \/\/ snapshot\n+\n+        srcArrIntLocal[0]  = v3;\n+        srcArrLongLocal[0] = v3;\n+        dstArr[writeIdx] = v4;\n+\n+        return r;\n+    }\n+\n+    static int testHeapToHeapLocalDstMismatched(int v1, int v2, int v3, int v4, int readIdx, boolean flag) {\n+        \/\/ assert(readIdx == 0);\n+        int[]  dstArrIntLocal  = new int[1];\n+        long[] dstArrLongLocal = new long[1];\n+\n+        Object dstArrLocal = (flag ? dstArrIntLocal               : dstArrLongLocal);\n+        long   dstOffset   = (flag ? Unsafe.ARRAY_INT_BASE_OFFSET : Unsafe.ARRAY_LONG_BASE_OFFSET);\n+\n+        srcArr[readIdx] = v1;\n+        dstArrIntLocal[0]  = v2;\n+        dstArrLongLocal[0] = v2;\n+\n+        UNSAFE.copyMemory(srcArr,     Unsafe.ARRAY_INT_BASE_OFFSET,\n+                          dstArrLocal, dstOffset, 4);\n+        int r = UNSAFE.getInt(dstArrLocal, dstOffset); \/\/ snapshot\n+\n+        srcArr[readIdx] = v3;\n+        dstArrIntLocal[0]  = v4;\n+        dstArrLongLocal[0] = v4;\n+\n+        return r;\n+    }\n+\n@@ -159,2 +206,1 @@\n-                null, DST_BASE,\n-                4);\n+                          null, DST_BASE, 4);\n@@ -174,1 +220,2 @@\n-        UNSAFE.copyMemory(srcObj, Unsafe.ARRAY_INT_BASE_OFFSET, null, DST_BASE, 4); \/\/ mixed\n+        UNSAFE.copyMemory(srcObj, Unsafe.ARRAY_INT_BASE_OFFSET,\n+                          null, DST_BASE, 4); \/\/ mixed\n@@ -192,1 +239,2 @@\n-        UNSAFE.copyMemory(null, SRC_BASE, dstArr, Unsafe.ARRAY_INT_BASE_OFFSET, 4);\n+        UNSAFE.copyMemory(null, SRC_BASE,\n+                          dstArr, Unsafe.ARRAY_INT_BASE_OFFSET, 4);\n@@ -206,1 +254,2 @@\n-        UNSAFE.copyMemory(null, SRC_BASE, dstObj, Unsafe.ARRAY_INT_BASE_OFFSET, 4); \/\/ mixed dst\n+        UNSAFE.copyMemory(null, SRC_BASE,\n+                          dstObj, Unsafe.ARRAY_INT_BASE_OFFSET, 4); \/\/ mixed dst\n@@ -223,1 +272,2 @@\n-        UNSAFE.copyMemory(null, SRC_BASE, null, DST_BASE, 4);\n+        UNSAFE.copyMemory(null, SRC_BASE,\n+                          null, DST_BASE, 4);\n@@ -237,1 +287,2 @@\n-        UNSAFE.copyMemory(base, SRC_BASE, base, DST_BASE, 4); \/\/ mixed\n+        UNSAFE.copyMemory(base, SRC_BASE,\n+                          base, DST_BASE, 4); \/\/ mixed\n@@ -306,0 +357,17 @@\n+        {\n+            reset();\n+            int r1 = testHeapToHeapLocalSrcMismatched(v1, v2, v3, v4, writeIdx0, flag);\n+            int r2 = resArr[0];\n+            if (print) {\n+                System.out.println(\"testHeapToHeapLocalSrcMismatched: \" + r1 + \" \" + r2);\n+            }\n+            assertEQ(r1, v1); assertEQ(r2, v4);\n+        }\n+        {\n+            reset();\n+            int r = testHeapToHeapLocalDstMismatched(v1, v2, v3, v4, readIdx0, flag);\n+            if (print) {\n+                System.out.println(\"testHeapToHeapLocalDstMismatched: \" + r);\n+            }\n+            assertEQ(r, v1);\n+        }\n@@ -364,0 +432,2 @@\n+    static boolean flag = false;\n+\n@@ -367,0 +437,1 @@\n+            flag = (i % 2 == 0);\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/UnsafeCopyMemory.java","additions":83,"deletions":12,"binary":false,"changes":95,"status":"modified"}]}