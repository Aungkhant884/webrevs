{"files":[{"patch":"@@ -4073,1 +4073,1 @@\n-  const Klass* const super = ik->super();\n+  const InstanceKlass* const super = ik->java_super();\n@@ -4352,1 +4352,1 @@\n-      const Klass* k = this_klass->super();\n+      const InstanceKlass* k = this_klass->java_super();\n@@ -4384,1 +4384,1 @@\n-          k = super_m->method_holder()->super();\n+          k = super_m->method_holder()->java_super();\n@@ -4388,1 +4388,1 @@\n-        k = k->super();\n+        k = k->java_super();\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2136,1 +2136,0 @@\n-  if (k->has_final_method()) buf[i++] = 'f';\n@@ -2139,0 +2138,1 @@\n+    if (ik->has_final_method()) buf[i++] = 'f';\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -762,0 +762,7 @@\n+  bool has_vanilla_constructor() const  { return _misc_flags.has_vanilla_constructor(); }\n+  void set_has_vanilla_constructor()    { _misc_flags.set_has_vanilla_constructor(true); }\n+  bool has_miranda_methods () const     { return _misc_flags.has_miranda_methods(); }\n+  void set_has_miranda_methods()        { _misc_flags.set_has_miranda_methods(true); }\n+  bool has_final_method() const         { return _misc_flags.has_final_method(); }\n+  void set_has_final_method()           { _misc_flags.set_has_final_method(true); }\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -52,1 +52,5 @@\n-    flag(has_localvariable_table            , 1 << 11) \/* has localvariable information *\/\n+    flag(has_localvariable_table            , 1 << 11) \/* has localvariable information *\/ \\\n+    flag(has_miranda_methods                , 1 << 12) \/* True if this class has miranda methods in it's vtable *\/ \\\n+    flag(has_vanilla_constructor            , 1 << 13) \/* True if klass has a vanilla default constructor *\/ \\\n+    flag(has_final_method                   , 1 << 14) \/* True if klass has final method *\/ \\\n+    \/* end of list *\/\n@@ -85,1 +89,1 @@\n-  InstanceKlassFlags() : _flags(0) {}\n+  InstanceKlassFlags() : _flags(0), _status(0) {}\n","filename":"src\/hotspot\/share\/oops\/instanceKlassFlags.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -662,1 +662,0 @@\n-  bool has_final_method() const         { return _access_flags.has_final_method(); }\n@@ -664,5 +663,0 @@\n-  void set_has_final_method()           { _access_flags.set_has_final_method(); }\n-  bool has_vanilla_constructor() const  { return _access_flags.has_vanilla_constructor(); }\n-  void set_has_vanilla_constructor()    { _access_flags.set_has_vanilla_constructor(); }\n-  bool has_miranda_methods () const     { return access_flags().has_miranda_methods(); }\n-  void set_has_miranda_methods()        { _access_flags.set_has_miranda_methods(); }\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2098,2 +2098,0 @@\n-  declare_constant(JVM_ACC_HAS_MIRANDA_METHODS)                           \\\n-  declare_constant(JVM_ACC_HAS_VANILLA_CONSTRUCTOR)                       \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,2 +64,0 @@\n-  JVM_ACC_HAS_MIRANDA_METHODS     = 0x10000000,     \/\/ True if this class has miranda methods in it's vtable\n-  JVM_ACC_HAS_VANILLA_CONSTRUCTOR = 0x20000000,     \/\/ True if klass has a vanilla default constructor\n@@ -68,1 +66,0 @@\n-  JVM_ACC_HAS_FINAL_METHOD        = 0x01000000,     \/\/ True if klass has final method\n@@ -121,2 +118,0 @@\n-  bool has_miranda_methods     () const { return (_flags & JVM_ACC_HAS_MIRANDA_METHODS    ) != 0; }\n-  bool has_vanilla_constructor () const { return (_flags & JVM_ACC_HAS_VANILLA_CONSTRUCTOR) != 0; }\n@@ -124,1 +119,0 @@\n-  bool has_final_method        () const { return (_flags & JVM_ACC_HAS_FINAL_METHOD       ) != 0; }\n@@ -183,1 +177,0 @@\n-  void set_has_vanilla_constructor()   { atomic_set_bits(JVM_ACC_HAS_VANILLA_CONSTRUCTOR); }\n@@ -185,1 +178,0 @@\n-  void set_has_final_method()          { atomic_set_bits(JVM_ACC_HAS_FINAL_METHOD);        }\n@@ -187,1 +179,0 @@\n-  void set_has_miranda_methods()       { atomic_set_bits(JVM_ACC_HAS_MIRANDA_METHODS);     }\n","filename":"src\/hotspot\/share\/utilities\/accessFlags.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -73,2 +73,0 @@\n-  public boolean hasMirandaMethods    () { return (flags & JVM_ACC_HAS_MIRANDA_METHODS    ) != 0; }\n-  public boolean hasVanillaConstructor() { return (flags & JVM_ACC_HAS_VANILLA_CONSTRUCTOR) != 0; }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/AccessFlags.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -235,2 +235,0 @@\n-  public boolean hasVanillaConstructor()    { return getAccessFlagsObj().hasVanillaConstructor(); }\n-  public boolean hasMirandaMethods ()       { return getAccessFlagsObj().hasMirandaMethods(); }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Klass.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -128,4 +128,0 @@\n-    \/\/ True if this class has miranda methods in it's vtable\n-    public static final long JVM_ACC_HAS_MIRANDA_METHODS      = 0x10000000;\n-    \/\/ True if klass has a vanilla default constructor\n-    public static final long JVM_ACC_HAS_VANILLA_CONSTRUCTOR  = 0x20000000;\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/ClassConstants.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}