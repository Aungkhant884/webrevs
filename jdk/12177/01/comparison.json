{"files":[{"patch":"@@ -263,1 +263,1 @@\n-  assert(cache != tmp, \"must use different register\");\n+  assert_different_registers(cache, tmp);\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -716,27 +716,0 @@\n-void MacroAssembler::baseOffset32(Register Rd, const Address &adr, int32_t &offset) {\n-  assert(Rd != noreg, \"Rd must not be empty register!\");\n-  guarantee(Rd != adr.base(), \"should use different registers!\");\n-  if (is_offset_in_range(adr.offset(), 32)) {\n-    int32_t imm = adr.offset();\n-    int32_t upper = imm, lower = imm;\n-    lower = (imm << 20) >> 20;\n-    upper -= lower;\n-    lui(Rd, upper);\n-    offset = lower;\n-  } else {\n-    offset = ((int32_t)adr.offset() << 20) >> 20;\n-    li(Rd, adr.offset() - offset);\n-  }\n-  add(Rd, Rd, adr.base());\n-}\n-\n-void MacroAssembler::baseOffset(Register Rd, const Address &adr, int32_t &offset) {\n-  if (is_offset_in_range(adr.offset(), 12)) {\n-    assert(Rd != noreg, \"Rd must not be empty register!\");\n-    addi(Rd, adr.base(), adr.offset());\n-    offset = 0;\n-  } else {\n-    baseOffset32(Rd, adr, offset);\n-  }\n-}\n-\n@@ -767,3 +740,4 @@\n-      int32_t offset = 0;\n-      baseOffset(Rd, adr, offset);\n-      addi(Rd, Rd, offset);\n+      Address new_adr = legitimize_address(Rd, adr);\n+      if (!(new_adr.base() == Rd && new_adr.offset() == 0)) {\n+        addi(Rd, new_adr.base(), new_adr.offset());\n+      }\n@@ -866,1 +840,1 @@\n-      assert(temp != noreg, \"temp must not be empty register!\");   \\\n+      assert(temp != noreg, \"expecting a register\");               \\\n@@ -888,2 +862,2 @@\n-        int32_t offset = 0;                                        \\\n-        baseOffset(temp, adr, offset);                             \\\n+        int32_t offset = ((int32_t)adr.offset() << 20) >> 20;      \\\n+        la(temp, Address(adr.base(), adr.offset() - offset));      \\\n@@ -2414,1 +2388,1 @@\n-Address MacroAssembler::form_address(Register Rd, Register base, long byte_offset) {\n+Address MacroAssembler::form_address(Register Rd, Register base, int64_t byte_offset) {\n@@ -2419,0 +2393,3 @@\n+  assert(Rd != noreg, \"expecting a register\");\n+  assert_different_registers(Rd, base);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":11,"deletions":34,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -267,1 +267,12 @@\n-  Address form_address(Register Rd, Register base, long byte_offset);\n+  Address form_address(Register Rd, Register base, int64_t byte_offset);\n+\n+  \/\/ Sometimes we get misaligned loads and stores, usually from Unsafe\n+  \/\/ accesses, and these can exceed the offset range.\n+  Address legitimize_address(Register Rd, const Address &adr) {\n+    if (adr.getMode() == Address::base_plus_offset) {\n+      if (!is_offset_in_range(adr.offset(), 12)) {\n+        return form_address(Rd, adr.base(), adr.offset());\n+      }\n+    }\n+    return adr;\n+  }\n@@ -671,3 +682,0 @@\n-  void baseOffset(Register Rd, const Address &adr, int32_t &offset);\n-  void baseOffset32(Register Rd, const Address &adr, int32_t &offset);\n-\n@@ -796,1 +804,1 @@\n-          int32_t offset = 0;                                                                      \\\n+          int32_t offset = ((int32_t)adr.offset() << 20) >> 20;                                    \\\n@@ -798,1 +806,1 @@\n-            baseOffset32(temp, adr, offset);                                                       \\\n+            la(temp, Address(adr.base(), adr.offset() - offset));                                  \\\n@@ -801,1 +809,1 @@\n-            baseOffset32(Rd, adr, offset);                                                         \\\n+            la(Rd, Address(adr.base(), adr.offset() - offset));                                    \\\n@@ -854,2 +862,2 @@\n-          int32_t offset = 0;                                                                      \\\n-          baseOffset32(temp, adr, offset);                                                         \\\n+          int32_t offset = ((int32_t)adr.offset() << 20) >> 20;                                    \\\n+          la(temp, Address(adr.base(), adr.offset() - offset));                                    \\\n@@ -912,1 +920,0 @@\n-          int32_t offset = 0;                                                                      \\\n@@ -914,1 +921,2 @@\n-          baseOffset32(temp, adr, offset);                                                         \\\n+          int32_t offset = ((int32_t)adr.offset() << 20) >> 20;                                    \\\n+          la(temp, Address(adr.base(), adr.offset() - offset));                                    \\\n@@ -956,2 +964,2 @@\n-          int32_t offset = 0;                                                                      \\\n-          baseOffset32(temp, adr, offset);                                                         \\\n+          int32_t offset = ((int32_t)adr.offset() << 20) >> 20;                                    \\\n+          la(temp, Address(adr.base(), adr.offset() - offset));                                    \\\n@@ -1321,1 +1329,1 @@\n-    assert(temp != noreg, \"temp must not be empty register!\");\n+    assert(temp != noreg, \"expecting a register\");\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":22,"deletions":14,"binary":false,"changes":36,"status":"modified"}]}