{"files":[{"patch":"@@ -303,2 +303,1 @@\n-  assert((op1 & 0x01) == 1, \"should be 32bit operation\");\n-  assert((op1 & 0x02) == 0, \"sign-extension bit should not be set\");\n+  assert(op1 == 0x81, \"Unexpected opcode\");\n@@ -309,0 +308,13 @@\n+  } else if (dst == rax) {\n+    switch (op2) {\n+      case 0xD0: emit_int8(0x15); break; \/\/ adc\n+      case 0xC0: emit_int8(0x05); break; \/\/ add\n+      case 0xE0: emit_int8(0x25); break; \/\/ and\n+      case 0xF8: emit_int8(0x3D); break; \/\/ cmp\n+      case 0xC8: emit_int8(0x0D); break; \/\/ or\n+      case 0xD8: emit_int8(0x1D); break; \/\/ sbb\n+      case 0xE8: emit_int8(0x2D); break; \/\/ sub\n+      case 0xF0: emit_int8(0x35); break; \/\/ xor\n+      default: ShouldNotReachHere();\n+    }\n+    emit_int32(imm32);\n@@ -919,1 +931,1 @@\n-  case 0x81: \/\/ addl a, #32; addl r, #32\n+  case 0x81: \/\/ addl r, #32\n@@ -932,0 +944,10 @@\n+  case 0x15: \/\/ adc a, #32\n+  case 0x05: \/\/ add a, #32\n+  case 0x25: \/\/ and a, #32\n+  case 0x3D: \/\/ cmp a, #32\n+  case 0x0D: \/\/ or  a, #32\n+  case 0x1D: \/\/ sbb a, #32\n+  case 0x2D: \/\/ sub a, #32\n+  case 0x35: \/\/ xor a, #32\n+    return which == end_pc_operand ? ip + 4 : ip;\n+\n@@ -957,0 +979,5 @@\n+  case 0xA8: \/\/ testb a, #8\n+    return which == end_pc_operand ? ip + 1 : ip;\n+  case 0xA9: \/\/ testl\/testq a, #32\n+    return which == end_pc_operand ? ip + 4 : ip;\n+\n@@ -5778,2 +5805,7 @@\n-  (void) prefix_and_encode(dst->encoding(), true);\n-  emit_arith_b(0xF6, 0xC0, dst, imm8);\n+  if (dst == rax) {\n+    emit_int8((unsigned char)0xA8);\n+    emit_int8(imm8);\n+  } else {\n+    (void) prefix_and_encode(dst->encoding(), true);\n+    emit_arith_b(0xF6, 0xC0, dst, imm8);\n+  }\n@@ -5790,0 +5822,11 @@\n+void Assembler::testl(Address dst, int32_t imm32) {\n+  if (imm32 >= 0 && is8bit(imm32)) {\n+    testb(dst, imm32);\n+    return;\n+  }\n+  InstructionMark im(this);\n+  emit_int8((unsigned char)0xF7);\n+  emit_operand(as_Register(0), dst);\n+  emit_int32(imm32);\n+}\n+\n@@ -5791,0 +5834,4 @@\n+  if (imm32 >= 0 && is8bit(imm32) && dst->has_byte_register()) {\n+    testb(dst, imm32);\n+    return;\n+  }\n@@ -5794,4 +5841,9 @@\n-  int encode = dst->encoding();\n-  encode = prefix_and_encode(encode);\n-  emit_int16((unsigned char)0xF7, (0xC0 | encode));\n-  emit_int32(imm32);\n+  if (dst == rax) {\n+    emit_int8((unsigned char)0xA9);\n+    emit_int32(imm32);\n+  } else {\n+    int encode = dst->encoding();\n+    encode = prefix_and_encode(encode);\n+    emit_int16((unsigned char)0xF7, (0xC0 | encode));\n+    emit_int32(imm32);\n+  }\n@@ -12996,0 +13048,4 @@\n+  if (imm32 >= 0) {\n+    testl(dst, imm32);\n+    return;\n+  }\n@@ -13003,0 +13059,4 @@\n+  if (imm32 >= 0) {\n+    testl(dst, imm32);\n+    return;\n+  }\n@@ -13006,4 +13066,10 @@\n-  int encode = dst->encoding();\n-  encode = prefixq_and_encode(encode);\n-  emit_int16((unsigned char)0xF7, (0xC0 | encode));\n-  emit_int32(imm32);\n+  if (dst == rax) {\n+    prefix(REX_W);\n+    emit_int8((unsigned char)0xA9);\n+    emit_int32(imm32);\n+  } else {\n+    int encode = dst->encoding();\n+    encode = prefixq_and_encode(encode);\n+    emit_int16((unsigned char)0xF7, (0xC0 | encode));\n+    emit_int32(imm32);\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":79,"deletions":13,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -2095,1 +2095,0 @@\n-  void testb(Register dst, int imm8);\n@@ -2097,0 +2096,1 @@\n+  void testb(Register dst, int imm8);\n@@ -2098,0 +2098,1 @@\n+  void testl(Address dst, int32_t imm32);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}