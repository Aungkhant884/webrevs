{"files":[{"patch":"@@ -113,0 +113,4 @@\n+\n+            \/\/ 8254841: We need to tell the peer we have finished resizing\n+            \/\/ to resume posting mouseEntered and mouseExit events.\n+            peer.finishResizing();\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/opengl\/CGLLayer.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -134,0 +134,3 @@\n+    \/\/ 8254841: Keep track of whether the window is currently being resized\n+    private volatile boolean isResizing = false;\n+\n@@ -312,0 +315,8 @@\n+    public void startResizing() {\n+        isResizing = true;\n+    }\n+\n+    public void finishResizing() {\n+        isResizing = false;\n+    }\n+\n@@ -707,0 +718,4 @@\n+        \/\/ 8254841: We need to tell the peer we have begun resizing\n+        \/\/ to stop posting mouseEntered and mouseExit events.\n+        startResizing();\n+\n@@ -985,5 +1000,8 @@\n-        postEvent(new MouseEvent(target,\n-                MouseEvent.MOUSE_ENTERED,\n-                when, modifiers,\n-                loc.x, loc.y, xAbs, yAbs,\n-                clickCount, popupTrigger, button));\n+        \/\/ 8254841: If currently resizing, prevent mouseEntered event from posting\n+        if (!isResizing) {\n+            postEvent(new MouseEvent(target,\n+                    MouseEvent.MOUSE_ENTERED,\n+                    when, modifiers,\n+                    loc.x, loc.y, xAbs, yAbs,\n+                    clickCount, popupTrigger, button));\n+        }\n@@ -998,5 +1016,8 @@\n-        postEvent(new MouseEvent(target,\n-                MouseEvent.MOUSE_EXITED,\n-                when, modifiers,\n-                loc.x, loc.y, xAbs, yAbs,\n-                clickCount, popupTrigger, button));\n+        \/\/ 8254841: If currently resizing, prevent mouseExit event from posting\n+        if (!isResizing) {\n+            postEvent(new MouseEvent(target,\n+                    MouseEvent.MOUSE_EXITED,\n+                    when, modifiers,\n+                    loc.x, loc.y, xAbs, yAbs,\n+                    clickCount, popupTrigger, button));\n+        }\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/LWWindowPeer.java","additions":31,"deletions":10,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -872,1 +872,0 @@\n-java\/awt\/event\/MouseEvent\/SpuriousExitEnter\/SpuriousExitEnter.java 8254841 macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,181 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.SwingUtilities;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+\/**\n+ * @test\n+ * @bug 8254841\n+ * @summary Tests spurious firing of mouseEntered and mouseExit on resize\n+ * @run main ResizeMouseExitEnterMisfire\n+ *\/\n+public class ResizeMouseExitEnterMisfire {\n+\n+    \/\/ Keep track of number of mouseEntered and mouseExited events\n+    private static volatile int mouseEntered = 0;\n+    private static volatile int mouseExited = 0;\n+\n+    JFrame frame;\n+    JLabel label;\n+    int xLocInnerCorner;\n+    int yLocInnerCorner;\n+    int xLocOuterCorner;\n+    int yLocOuterCorner;\n+    int xLocNewEdge;\n+    int yLocNewEdge;\n+\n+    Robot robot;\n+\n+    public void createAndShowFrame() throws Exception {\n+        SwingUtilities.invokeLater(new Runnable() {\n+            @Override\n+            public void run() {\n+                frame = new JFrame();\n+                frame.setSize(200, 200);\n+                label = new JLabel();\n+                label.addMouseListener(new MouseAdapter() {\n+                    @Override\n+                    public void mouseEntered (MouseEvent ev) {\n+                        System.err.println(\"mouseEntered\");\n+                        mouseEntered++;\n+                    }\n+                    @Override\n+                    public void mouseExited (MouseEvent ev) {\n+                        System.err.println(\"mouseExited\");\n+                        mouseExited++;\n+                    }\n+                });\n+\n+                frame.add(label);\n+                frame.setVisible(true);\n+            }\n+        });\n+    }\n+\n+    public void createRobot() throws Exception {\n+        try {\n+            robot = new Robot();\n+            robot.setAutoDelay(100);\n+            robot.waitForIdle();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void getFrameCoords() {\n+        SwingUtilities.invokeLater(new Runnable() {\n+            @Override\n+            public void run() {\n+                Rectangle rect = frame.getBounds();\n+                xLocInnerCorner = rect.x + rect.width - 5;\n+                yLocInnerCorner = rect.y + rect.height - 5;\n+                xLocOuterCorner = rect.x + rect.width + 3;\n+                yLocOuterCorner = rect.y + rect.height + 3;\n+                xLocNewEdge = rect.x + rect.width + 500;\n+                yLocNewEdge = rect.y + rect.height + 500;\n+            }\n+        });\n+    }\n+\n+    public void resizeFromInsideWindowTest() throws RuntimeException {\n+        \/\/ Testing for resizing while cursor starts from inside the window\n+        robot.mouseMove(xLocInnerCorner, yLocInnerCorner);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseMove(xLocNewEdge, yLocNewEdge);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(100);\n+\n+        robot.mouseMove(xLocNewEdge, yLocNewEdge);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseMove(xLocInnerCorner, yLocInnerCorner);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(500);\n+        robot.waitForIdle();\n+\n+        \/* Expected behavior should be a mouseEntered event when the mouse initially\n+         * enters the window, then no mouse events when the window size is changed.\n+         *\/\n+        if(mouseEntered != 1) {\n+\n+            throw new RuntimeException(\"mouseEntered = \" + mouseEntered\n+                    + \", expected value =  \" + 1);\n+        }\n+        if(mouseExited != 0) {\n+            throw new RuntimeException(\"mouseExited = \" + mouseExited\n+                    + \", expected value =  \" + 0);\n+        }\n+        mouseEntered = 0;\n+        mouseExited = 0;\n+    }\n+\n+    public void resizeFromOutsideWindowTest() throws RuntimeException {\n+        \/\/ Testing for resizing while cursor starts outside the window\n+        robot.mouseMove(xLocOuterCorner, yLocOuterCorner);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseMove(xLocNewEdge, yLocNewEdge);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(100);\n+\n+        robot.mouseMove(xLocNewEdge, yLocNewEdge);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseMove(xLocOuterCorner, yLocOuterCorner);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(500);\n+        robot.waitForIdle();\n+\n+        \/* Expected behavior should be a mouseExit event when the mouse initially\n+         * exits the window, then no mouse events when the window size is changed.\n+         *\/\n+        if(mouseEntered != 0) {\n+            throw new RuntimeException(\"mouseEntered = \" + mouseEntered\n+                    + \", expected value =  \" + 0);\n+        }\n+        if(mouseExited != 1) {\n+            throw new RuntimeException(\"mouseExited = \" + mouseExited\n+                    + \", expected value =  \" + 1);\n+        }\n+    }\n+\n+    public void done() {\n+        frame.dispose();\n+    }\n+\n+    public static void main (String[] args) throws Exception {\n+        ResizeMouseExitEnterMisfire test = new ResizeMouseExitEnterMisfire();\n+        test.createAndShowFrame();\n+        test.getFrameCoords();\n+        test.createRobot();\n+\n+        test.resizeFromInsideWindowTest();\n+        test.resizeFromOutsideWindowTest();\n+\n+        test.done();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/ResizeMouseExitEnterMisfire\/ResizeMouseExitEnterMisfire.java","additions":181,"deletions":0,"binary":false,"changes":181,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n-  @bug 6479820\n+  @bug 6479820 8254841\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/SpuriousExitEnter\/SpuriousExitEnter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}