{"files":[{"patch":"@@ -2409,0 +2409,3 @@\n+        } else if (widget_type == PASSWORD_FIELD && state_type == GTK_STATE_INSENSITIVE\n+            && color_type == TEXT_FOREGROUND) {\n+            widget_type = TEXT_AREA;\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/gtk3_interface.c","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8258970\n+ * @key headful\n+ * @requires (os.family == \"linux\")\n+ * @summary Verifies if disabled password field foreground color grayed out\n+ * @run main TestDisabledPasswordFieldForegroundColor\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import javax.imageio.ImageIO;\n+import javax.swing.JFrame;\n+import javax.swing.JPasswordField;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import java.lang.Math;\n+\n+public class TestDisabledPasswordFieldForegroundColor {\n+\n+    private static JFrame frame;\n+    private static JPasswordField passwordField;\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.gtk.GTKLookAndFeel\");\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(1000);\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                createAndShowUI();\n+            });\n+\n+            robot.waitForIdle();\n+            robot.delay(500);\n+            Point pt = passwordField.getLocationOnScreen();\n+            BufferedImage enabledImg =\n+                    robot.createScreenCapture(new Rectangle(pt.x, pt.y,\n+                            passwordField.getWidth(), passwordField.getHeight()));\n+            passwordField.setEnabled(false);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+            BufferedImage disabledImg =\n+                    robot.createScreenCapture(new Rectangle(pt.x, pt.y,\n+                            passwordField.getWidth(), passwordField.getHeight()));\n+            boolean passed = compareImage(enabledImg,disabledImg);\n+\n+            if (!passed) {\n+                ImageIO.write(enabledImg, \"png\", new File(\"JPasswordFieldEnabledImg.png\"));\n+                ImageIO.write(disabledImg, \"png\", new File(\"JPasswordFieldDisabledImg.png\"));\n+                throw new RuntimeException(\"Disabled JPasswordField foreground color not grayed out\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        frame = new JFrame(\"Test Disabled Password Field Foreground Color\");\n+        passwordField = new JPasswordField(\"passwordpassword\");\n+        passwordField.setEnabled(true);\n+        frame.add(passwordField);\n+        frame.pack();\n+        frame.setSize(150, 100);\n+        frame.setLocationRelativeTo(null);\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setVisible(true);\n+    }\n+\n+    \/*\n+    * Compare JPasswordField enabled and disabled state image and if both images\n+    * width and height are equal but pixel's RGB values are not equal,\n+    * method returns true; false otherwise.\n+    *\/\n+\n+    private static boolean compareImage(BufferedImage img1, BufferedImage img2) {\n+        int tolerance = 5;\n+        if (img1.getWidth() == img2.getWidth()\n+                && img1.getHeight() == img2.getHeight()) {\n+            for (int x = 10; x < img1.getWidth()\/2; ++x) {\n+                for (int y = 10; y < img1.getHeight()-10; ++y) {\n+                    Color c1 = new Color(img1.getRGB(x, y));\n+                    Color c2 = new Color(img2.getRGB(x, y));\n+\n+                    if (Math.abs(c1.getRed() - c2.getRed()) > tolerance ||\n+                            Math.abs(c1.getRed() - c2.getRed()) > tolerance ||\n+                            Math.abs(c1.getRed() - c2.getRed()) > tolerance) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            return false;\n+        } else {\n+            return false;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JPasswordField\/TestDisabledPasswordFieldForegroundColor.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"}]}