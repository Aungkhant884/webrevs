{"files":[{"patch":"@@ -5280,0 +5280,2 @@\n+  const int fill64_per_loop = 4;\n+  const int max_unrolled_fill64 = 8;\n@@ -5283,1 +5285,17 @@\n-  for (int i = 0; i < vector64_count; i++) {\n+  int start64 = 0;\n+  if (vector64_count > max_unrolled_fill64) {\n+    Label LOOP;\n+    Register index = rtmp;\n+\n+    start64 = vector64_count - (vector64_count % fill64_per_loop);\n+\n+    movl(index, 0);\n+    BIND(LOOP);\n+    for (int i = 0; i < fill64_per_loop; i++) {\n+      fill64(Address(base, index, Address::times_1, i * 64), xtmp, use64byteVector);\n+    }\n+    addl(index, fill64_per_loop * 64);\n+    cmpl(index, start64 * 64);\n+    jccb(Assembler::less, LOOP);\n+  }\n+  for (int i = start64; i < vector64_count; i++) {\n@@ -8877,1 +8895,1 @@\n-void MacroAssembler::fill32(Register dst, int disp, XMMRegister xmm) {\n+void MacroAssembler::fill32(Address dst, XMMRegister xmm) {\n@@ -8879,1 +8897,1 @@\n-  vmovdqu(Address(dst, disp), xmm);\n+  vmovdqu(dst, xmm);\n@@ -8882,1 +8900,5 @@\n-void MacroAssembler::fill64(Register dst, int disp, XMMRegister xmm, bool use64byteVector) {\n+void MacroAssembler::fill32(Register dst, int disp, XMMRegister xmm) {\n+  fill32(Address(dst, disp), xmm);\n+}\n+\n+void MacroAssembler::fill64(Address dst, XMMRegister xmm, bool use64byteVector) {\n@@ -8884,1 +8906,0 @@\n-  BasicType type[] = {T_BYTE,  T_SHORT,  T_INT,   T_LONG};\n@@ -8886,2 +8907,2 @@\n-    fill32(dst, disp, xmm);\n-    fill32(dst, disp + 32, xmm);\n+    fill32(dst, xmm);\n+    fill32(dst.plus_disp(32), xmm);\n@@ -8889,1 +8910,1 @@\n-    evmovdquq(Address(dst, disp), xmm, Assembler::AVX_512bit);\n+    evmovdquq(dst, xmm, Assembler::AVX_512bit);\n@@ -8893,0 +8914,4 @@\n+void MacroAssembler::fill64(Register dst, int disp, XMMRegister xmm, bool use64byteVector) {\n+  fill64(Address(dst, disp), xmm, use64byteVector);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":33,"deletions":8,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -1988,0 +1988,2 @@\n+  void fill32(Address dst, XMMRegister xmm);\n+\n@@ -1990,0 +1992,2 @@\n+  void fill64(Address dst, XMMRegister xmm, bool use64byteVector = false);\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -11675,3 +11675,1 @@\n-               ((UseAVX > 2) && VM_Version::supports_avx512vlbw()) &&\n-               n->in(2)->get_int() < 256 \/* rough limit to prevent overflowing scratch buffer *\/);\n-\n+               ((UseAVX > 2) && VM_Version::supports_avx512vlbw()));\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -11379,2 +11379,1 @@\n-              ((UseAVX > 2) && VM_Version::supports_avx512vlbw()) &&\n-              n->in(2)->get_long() < 256 \/* rough limit to prevent overflowing scratch buffer *\/);\n+              ((UseAVX > 2) && VM_Version::supports_avx512vlbw()));\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    static int[] STATIC;\n+    static long[] STATIC;\n@@ -43,1 +43,1 @@\n-        STATIC = new int[4096];\n+        STATIC = new long[2048 - 1];\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/ClearArray.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}