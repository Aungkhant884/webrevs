{"files":[{"patch":"@@ -33,3 +33,2 @@\n- *  {@link jdk.internal.classfile.ClassElement}, {@link jdk.internal.classfile.FieldElement}, or\n- *  {@link jdk.internal.classfile.MethodElement} when traversing\n- *  the corresponding model type.\n+ * {@link ClassElement}, {@link FieldElement}, or {@link MethodElement}\n+ * when traversing the corresponding model type.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/AccessFlags.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -656,1 +656,1 @@\n-    \/** Attribute mapper for the {@code SourceDebug} attribute *\/\n+    \/** Attribute mapper for the {@code SourceDebugExtension} attribute *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Attributes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+     * @throws IllegalArgumentException if a class shouldn't be queried for hierarchy\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassHierarchyResolver.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-     *                               additional information about the class hiearchy\n+     *                               additional information about the class hierarchy\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassModel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,3 +43,2 @@\n-public\n-interface ClassfileBuilder<E extends ClassfileElement, B extends ClassfileBuilder<E, B>>\n-        extends Consumer<E> {\n+public sealed interface ClassfileBuilder<E extends ClassfileElement, B extends ClassfileBuilder<E, B>>\n+        extends Consumer<E> permits ClassBuilder, FieldBuilder, MethodBuilder, CodeBuilder {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassfileBuilder.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * assocation between a label's identity and the position it represents is\n+ * association between a label's identity and the position it represents is\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Label.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-     * @param exceptions sigantures for the exceptions\n+     * @param exceptions signatures for the exceptions\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/MethodSignature.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -457,1 +457,1 @@\n-         * @return the table of local variable location\/indicies.\n+         * @return the table of local variable location\/indices.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/TypeAnnotation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,2 +57,1 @@\n-     * {@return the name of the class or interface of which this class is a\n-     * member, if it is a member of a class or interface}\n+     * {@return the simple name of this class, or empty if this class is anonymous}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/InnerClassInfo.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-     * in the list correponds to the i'th parameter in the method declaration.\n+     * in the list corresponds to the i'th parameter in the method declaration.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/MethodParametersAttribute.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * Models a single \"exports\" declaration in the {@link jdk.internal.classfile.attribute.ModuleAttribute}.\n+ * Models a single \"exports\" declaration in the {@link ModuleAttribute}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleExportInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * Models hash information for a single module in the {@link jdk.internal.classfile.attribute.ModuleHashesAttribute}.\n+ * Models hash information for a single module in the {@link ModuleHashesAttribute}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleHashInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * Models a single \"opens\" declaration in the {@link jdk.internal.classfile.attribute.ModuleAttribute}.\n+ * Models a single \"opens\" declaration in the {@link ModuleAttribute}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleOpenInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * Models a single \"provides\" declaration in the {@link jdk.internal.classfile.attribute.ModuleAttribute}.\n+ * Models a single \"provides\" declaration in the {@link ModuleAttribute}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleProvideInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * Models a single \"requires\" declaration in the {@link jdk.internal.classfile.attribute.ModuleAttribute}.\n+ * Models a single \"requires\" declaration in the {@link ModuleAttribute}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleRequireInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-     * @param resolutionFlags the resolution falgs\n+     * @param resolutionFlags the resolution flags\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleResolutionAttribute.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-     * Parse the siganture as a class signature.\n+     * Parse the signature as a class signature.\n@@ -74,1 +74,1 @@\n-     * Parse the siganture as a type signature.\n+     * Parse the signature as a type signature.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/SignatureAttribute.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,3 @@\n- * SourceDebugExtensionAttribute.\n+ * Models the {@code SourceDebugExtension} attribute (@@@ need reference).\n+ * Delivered as a {@link jdk.internal.classfile.ClassElement} when traversing the elements of\n+ * a {@link jdk.internal.classfile.ClassModel}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/SourceDebugExtensionAttribute.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * Models the {@code SourceFile} attribute (@@@ reference needed), which can\n+ * Models the {@code SourceID} attribute (@@@ reference needed), which can\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/SourceIDAttribute.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n- * Single class remappigng example:\n+ * Single class remapping example:\n@@ -93,1 +93,1 @@\n- * replacing all occurences of {@link jdk.internal.classfile.Label} in the\n+ * replacing all occurrences of {@link jdk.internal.classfile.Label} in the\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/package-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -106,2 +106,2 @@\n-        \/\/extra check if fromClass is an interface is necessay to handle situation when thisClass might not been fully resolved and so it is potentially an unidentified interface\n-        \/\/this special corner-case handling has been added based on better success rate of constructing stack maps with simulated broken resulution of classes and interfaces\n+        \/\/extra check if fromClass is an interface is necessary to handle situation when thisClass might not been fully resolved and so it is potentially an unidentified interface\n+        \/\/this special corner-case handling has been added based on better success rate of constructing stack maps with simulated broken resolution of classes and interfaces\n@@ -113,1 +113,1 @@\n-        \/\/if other common ancestor is calculated (which works even when their grand-parents could not be resolved) then it is clear that thisClass could not be asigned from fromClass\n+        \/\/if other common ancestor is calculated (which works even when their grandparents could not be resolved) then it is clear that thisClass could not be assigned from fromClass\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -500,1 +500,1 @@\n-                                    \"contant name\", ev.constantName().stringValue());\n+                                    \"constant name\", ev.constantName().stringValue());\n@@ -538,1 +538,1 @@\n-                    ret.accept(\"UNITIALIZED @\" + lr.labelToBci(u.newTarget()));\n+                    ret.accept(\"UNINITIALIZED @\" + lr.labelToBci(u.newTarget()));\n@@ -917,1 +917,1 @@\n-                    nodes.add(list(\"excceptions\", \"exc\", exa.exceptions().stream()\n+                    nodes.add(list(\"exceptions\", \"exc\", exa.exceptions().stream()\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-     * @param labelContext <code>LableContext<\/code> instance used to resolve or patch <code>ExceptionHandler<\/code>\n+     * @param labelContext <code>LabelContext<\/code> instance used to resolve or patch <code>ExceptionHandler<\/code>\n@@ -215,1 +215,1 @@\n-     * @param cp R\/W <code>ConstantPoolBuilder<\/code> instance used to resolve all involved CP entries and also generate new entries referenced from the generted stack maps\n+     * @param cp R\/W <code>ConstantPoolBuilder<\/code> instance used to resolve all involved CP entries and also generate new entries referenced from the generated stack maps\n@@ -829,1 +829,1 @@\n-     * @param offset bytecode offset where the error occured\n+     * @param offset bytecode offset where the error occurred\n@@ -1294,1 +1294,1 @@\n-        @Override \/\/mandatory overrride to avoid use of method reference during JDK bootstrap\n+        @Override \/\/mandatory override to avoid use of method reference during JDK bootstrap\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-                            \/\/ Primitive values (type descriminator stored in most-signifcant bytes)\n+                            \/\/ Primitive values (type discriminator stored in most-significant bytes)\n@@ -134,1 +134,1 @@\n-                            \/\/ A bci of -1 is an Unintialized-This\n+                            \/\/ A bci of -1 is an Uninitialized-This\n@@ -215,1 +215,1 @@\n-        \/\/ Since noone should call this on a query type anyway, this is ok.\n+        \/\/ Since no one should call this on a query type anyway, this is ok.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerificationType.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -70,2 +70,2 @@\n-     * @param tryStart the beginning of the instruction range for the gaurded instructions\n-     * @param tryEnd the end of the instruction range for the gaurded instructions\n+     * @param tryStart the beginning of the instruction range for the guarded instructions\n+     * @param tryEnd the end of the instruction range for the guarded instructions\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/ExceptionCatch.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-     * @param slot the local varaible slot to load from\n+     * @param slot the local variable slot to load from\n@@ -64,1 +64,1 @@\n-     * @param slot the local varaible slot to load from\n+     * @param slot the local variable slot to load from\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LoadInstruction.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-     * {@return the number of dimensions of the aray}\n+     * {@return the number of dimensions of the array}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/NewMultiArrayInstruction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-     * @param slot the local varaible slot to store to\n+     * @param slot the local variable slot to store to\n@@ -62,1 +62,1 @@\n-     * @param slot the local varaible slot to store to\n+     * @param slot the local variable slot to store to\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/StoreInstruction.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}