[{"commit":{"message":"8287325: AArch64: fix virtual threads with -XX:UseBranchProtection=pac-ret\n\nThe continuation free\/thaw mechanism relies on being able to move thread\nstacks around in memory.  However when PAC is enabled on supported\nAArch64 CPUs, the saved LR on the stack contains a \"pointer\nauthentication code\" signed with the stack pointer at the time the frame\nwas created.  When a stack frame is relocated we need to re-sign the LR\nwith the new stack pointer to ensure it authenticates successfully when\nthe method returns.\n\nAlso introduced ContinuationHelper::return_pc_at() to avoid directly\nreading the saved PC from the stack in shared code.  On AArch64 with PAC\nit enabled it strips the PAC from the address after reading it, on all\nother platforms it just loads the PC from the stack as before."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/continuationFreezeThaw_aarch64.inline.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/continuationHelper_aarch64.inline.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/pauth_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stackChunkFrameStream_aarch64.inline.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/arm\/continuationHelper_arm.inline.hpp"},{"filename":"src\/hotspot\/cpu\/ppc\/continuationHelper_ppc.inline.hpp"},{"filename":"src\/hotspot\/cpu\/riscv\/continuationHelper_riscv.inline.hpp"},{"filename":"src\/hotspot\/cpu\/s390\/continuationHelper_s390.inline.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/continuationHelper_x86.inline.hpp"},{"filename":"src\/hotspot\/cpu\/zero\/continuationHelper_zero.inline.hpp"},{"filename":"src\/hotspot\/share\/runtime\/continuationEntry.cpp"},{"filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp"},{"filename":"src\/hotspot\/share\/runtime\/continuationHelper.hpp"},{"filename":"src\/hotspot\/share\/runtime\/continuationHelper.inline.hpp"}],"sha":"b374acb9a7e0c894524ee1a74338fcfe79d682e5"}]