{"files":[{"patch":"@@ -28,1 +28,8 @@\n-class SpinWait {\n+\/\/ SpinWait provides a description for implementations of spin wait\/pause.\n+\/\/ The description includes:\n+\/\/ - what an instruction should be used by an implementation.\n+\/\/ - how many of the instructions.\n+\/\/ - a runner which can execute the requested number of instructions.\n+\/\/\n+\/\/ Creation of SpinWait is controlled by VM_Version.\n+class SpinWait final {\n@@ -36,0 +43,1 @@\n+  using InstRunner = void (*)(int count);\n@@ -40,0 +48,1 @@\n+  InstRunner _inst_runner;\n@@ -41,2 +50,19 @@\n-public:\n-  SpinWait(Inst inst = NONE, int count = 0) : _inst(inst), _count(count) {}\n+  static void run_nop(int count) {\n+    while (count-- > 0) {\n+      __asm volatile(\"nop\");\n+    }\n+  }\n+\n+  static void run_isb(int count) {\n+    while (count-- > 0) {\n+      __asm volatile(\"isb\");\n+    }\n+  }\n+\n+  static void run_yield(int count) {\n+    while (count-- > 0) {\n+      __asm volatile(\"yield\");\n+    }\n+  }\n+\n+  static void run_none(int) {}\n@@ -44,0 +70,4 @@\n+  SpinWait(Inst inst = NONE, int count = 0, InstRunner inst_runner = run_none) :\n+      _inst(inst), _count(count), _inst_runner(inst_runner)  {}\n+\n+public:\n@@ -46,0 +76,3 @@\n+  InstRunner inst_runner() const { return _inst_runner; }\n+\n+  friend class VM_Version;\n","filename":"src\/hotspot\/cpu\/aarch64\/spin_wait_aarch64.hpp","additions":36,"deletions":3,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-static SpinWait get_spin_wait_desc() {\n+SpinWait VM_Version::get_spin_wait_desc() {\n@@ -53,1 +53,1 @@\n-    return SpinWait(SpinWait::NOP, OnSpinWaitInstCount);\n+    return SpinWait(SpinWait::NOP, OnSpinWaitInstCount, SpinWait::run_nop);\n@@ -55,1 +55,1 @@\n-    return SpinWait(SpinWait::ISB, OnSpinWaitInstCount);\n+    return SpinWait(SpinWait::ISB, OnSpinWaitInstCount, SpinWait::run_isb);\n@@ -57,1 +57,1 @@\n-    return SpinWait(SpinWait::YIELD, OnSpinWaitInstCount);\n+    return SpinWait(SpinWait::YIELD, OnSpinWaitInstCount, SpinWait::run_yield);\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -60,0 +60,4 @@\n+  \/\/ Get SpinWait based on values of OnSpinWaitInst\/OnSpinWaitInstCount options\n+  \/\/ describing it.\n+  static SpinWait get_spin_wait_desc();\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -385,1 +385,7 @@\n-    return 0;\n+    const SpinWait& spin_wait = VM_Version::spin_wait_desc();\n+    if (spin_wait.inst() == SpinWait::NONE) {\n+      return 0;\n+    }\n+    SpinWait::InstRunner run_inst = spin_wait.inst_runner();\n+    (*run_inst)(spin_wait.inst_count());\n+    return 1;\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test TestSpinPause\n+ * @summary JVM runtime can use SpinPause function for synchronized statements.\n+ *          Check different implementations of JVM SpinPause don't crash JVM.\n+ * @bug 8278241\n+ * @library \/test\/lib\n+ *\n+ * @requires os.arch==\"aarch64\"\n+ *\n+ * @run main\/othervm TestSpinPause\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=none TestSpinPause\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=nop TestSpinPause\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=isb TestSpinPause\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=yield TestSpinPause\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=nop -XX:OnSpinWaitInstCount=10 TestSpinPause\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=isb -XX:OnSpinWaitInstCount=3 TestSpinPause\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=yield -XX:OnSpinWaitInstCount=3 TestSpinPause\n+ * @run main\/othervm -Xint TestSpinPause\n+ * @run main\/othervm -Xint -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=none TestSpinPause\n+ * @run main\/othervm -Xint -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=nop TestSpinPause\n+ * @run main\/othervm -Xint -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=isb TestSpinPause\n+ * @run main\/othervm -Xint -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=yield TestSpinPause\n+ * @run main\/othervm -Xint -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=nop -XX:OnSpinWaitInstCount=10 TestSpinPause\n+ * @run main\/othervm -Xint -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=isb -XX:OnSpinWaitInstCount=3 TestSpinPause\n+ * @run main\/othervm -Xint -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=yield -XX:OnSpinWaitInstCount=3 TestSpinPause\n+ * @run main\/othervm -Xcomp TestSpinPause\n+ * @run main\/othervm -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=none TestSpinPause\n+ * @run main\/othervm -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=nop TestSpinPause\n+ * @run main\/othervm -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=isb TestSpinPause\n+ * @run main\/othervm -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=yield TestSpinPause\n+ * @run main\/othervm -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=nop -XX:OnSpinWaitInstCount=10 TestSpinPause\n+ * @run main\/othervm -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=isb -XX:OnSpinWaitInstCount=3 TestSpinPause\n+ * @run main\/othervm -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=yield -XX:OnSpinWaitInstCount=3 TestSpinPause\n+ *\/\n+\n+public class TestSpinPause {\n+    private Integer[] valueHolder;\n+\n+    private TestSpinPause () {\n+        valueHolder = new Integer[] {Integer.valueOf(101)};\n+    }\n+\n+    private void getSet() {\n+        final int iterCount = 1000;\n+        for (int i = 0; i < iterCount; ++i) {\n+           synchronized (valueHolder) {\n+               Integer v = valueHolder[0];\n+               valueHolder[0] = Integer.reverse(v);\n+           }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        TestSpinPause test = new TestSpinPause();\n+        Thread t1 = new Thread(test::getSet);\n+        Thread t2 = new Thread(test::getSet);\n+        t1.start();\n+        t2.start();\n+        t1.join();\n+        t2.join();\n+        System.out.println(\"Done: \" + test.valueHolder[0]);\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/TestSpinPause.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}