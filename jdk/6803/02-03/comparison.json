{"files":[{"patch":"@@ -6406,1 +6406,3 @@\n-    __ spin_wait();\n+    if (VM_Version::spin_wait_desc().inst() != SpinWait::NONE) {\n+      __ spin_wait();\n+    }\n@@ -7730,3 +7732,1 @@\n-    if (VM_Version::spin_wait_desc().inst() != SpinWait::NONE) {\n-      StubRoutines::aarch64::_spin_wait = generate_spin_wait();\n-    }\n+    StubRoutines::aarch64::_spin_wait = generate_spin_wait();\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -387,3 +387,1 @@\n-    if (func == nullptr) {\n-      return 0;\n-    }\n+    assert(func != nullptr, \"StubRoutines::aarch64::spin_wait must not be null.\");\n@@ -391,0 +389,9 @@\n+    \/\/ If StubRoutines::aarch64::spin_wait consists of only a RET,\n+    \/\/ SpinPause can be considered as implemented. There will be a sequence\n+    \/\/ of instructions for:\n+    \/\/ - call of SpinPause\n+    \/\/ - load of StubRoutines::aarch64::spin_wait stub pointer\n+    \/\/ - indirect call of the stub\n+    \/\/ - return from the stub\n+    \/\/ - return from SpinPause\n+    \/\/ So '1' always is returned.\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.cpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"}]}