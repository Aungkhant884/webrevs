{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;\n@@ -659,0 +660,9 @@\n+        TypeVariable<?>[] v = enclosingClass.getTypeParameters();\n+        Type o = resolveOwner(enclosingClass);\n+        Type t;\n+        if (o != null || v.length > 0) {\n+            t = ParameterizedTypeImpl.make(enclosingClass, v, o);\n+        } else {\n+            t = enclosingClass;\n+        }\n+\n@@ -665,1 +675,1 @@\n-                enclosingClass,\n+                t,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Constructor.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;\n@@ -694,1 +695,1 @@\n-        if (Modifier.isStatic(this.getModifiers()))\n+        if (Modifier.isStatic(this.getModifiers())) {\n@@ -696,0 +697,10 @@\n+        }\n+        Class<?> c = getDeclaringClass();\n+        TypeVariable<?>[] v = c.getTypeParameters();\n+        Type o = resolveOwner(c);\n+        Type t;\n+        if (o != null || v.length > 0) {\n+            t = ParameterizedTypeImpl.make(c, v, o);\n+        } else {\n+            t = c;\n+        }\n@@ -697,2 +708,1 @@\n-                SharedSecrets.getJavaLangAccess().\n-                        getConstantPool(getDeclaringClass()),\n+                SharedSecrets.getJavaLangAccess().getConstantPool(c),\n@@ -700,2 +710,2 @@\n-                getDeclaringClass(),\n-                getDeclaringClass(),\n+                c,\n+                t,\n@@ -705,0 +715,8 @@\n+    static Type resolveOwner(Class<?> t) {\n+        if (Modifier.isStatic(t.getModifiers()) || !(t.isLocalClass() || t.isMemberClass() || t.isAnonymousClass())) {\n+            return null;\n+        }\n+        Class<?> d = t.getDeclaringClass();\n+        return ParameterizedTypeImpl.make(d, d.getTypeParameters(), resolveOwner(d));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":23,"deletions":5,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -88,4 +88,10 @@\n-        \/\/ check that getType() matches the receiver\n-        assertEquals(annotatedReceiverType.getType(),\n-                ctorParamType,\n-                \"getType() doesn't match receiver type: \" + ctorParamType);\n+        \/\/ check that getType() matches the receiver (which can be parameterized)\n+        if (annotatedReceiverType.getType() instanceof ParameterizedType) {\n+            assertEquals(((ParameterizedType) annotatedReceiverType.getType()).getRawType(),\n+                    ctorParamType,\n+                    \"getType() doesn't match receiver type: \" + ctorParamType);\n+        } else {\n+            assertEquals(annotatedReceiverType.getType(),\n+                    ctorParamType,\n+                    \"getType() doesn't match receiver type: \" + ctorParamType);\n+        }\n","filename":"test\/jdk\/java\/lang\/annotation\/typeAnnotations\/ConstructorReceiverTest.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-        testReceiverType0(e);\n+        testParameterizedReceiverType0(e);\n@@ -139,0 +139,9 @@\n+    private void testParameterizedReceiverType0(Executable e) {\n+        if (Modifier.isStatic(e.getModifiers()))\n+            assertNull(e.getAnnotatedReceiverType());\n+        else {\n+            assertTrue(e.getAnnotatedReceiverType().getType() instanceof ParameterizedType);\n+            assertSame(((ParameterizedType) e.getAnnotatedReceiverType().getType()).getRawType(), e.getDeclaringClass());\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/annotation\/typeAnnotations\/TestExecutableGetAnnotatedType.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8202471\n+ * @summary A nested class's owner can be type annotated if used as a receiver type\n+ *\/\n+\n+import java.lang.annotation.Target;\n+import java.lang.annotation.*;\n+import java.lang.reflect.AnnotatedParameterizedType;\n+import java.lang.reflect.AnnotatedType;\n+import java.lang.reflect.Method;\n+\n+public class TestReceiverTypeOwner<T> {\n+\n+    public static void main(String[] args) throws NoSuchMethodException {\n+        Method method = TestReceiverTypeOwner.Inner.class.getDeclaredMethod(\"m\");\n+        AnnotatedType receiverType = method.getAnnotatedReceiverType();\n+        AnnotatedParameterizedType parameterizedType = (AnnotatedParameterizedType) receiverType;\n+        AnnotatedType owner = parameterizedType.getAnnotatedOwnerType();\n+        Annotation[] annotations = owner.getAnnotations();\n+        if (annotations.length != 1 || !(annotations[0] instanceof TypeAnnotation)) {\n+            throw new AssertionError();\n+        }\n+    }\n+\n+    class Inner {\n+        void m(@TypeAnnotation TestReceiverTypeOwner<T>.Inner this) { }\n+    }\n+\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.TYPE_USE)\n+    @interface TypeAnnotation { }\n+}\n","filename":"test\/jdk\/java\/lang\/annotation\/typeAnnotations\/TestReceiverTypeOwner.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8202471\n+ * @summary A constructor's parameterized receiver type's type variables can be type annotated\n+ *\/\n+\n+import java.lang.annotation.Target;\n+import java.lang.annotation.*;\n+import java.lang.reflect.AnnotatedParameterizedType;\n+import java.lang.reflect.AnnotatedType;\n+import java.lang.reflect.Constructor;\n+\n+public class TestReceiverTypeParameterizedConstructor<T> {\n+\n+    public static void main(String[] args) throws NoSuchMethodException {\n+        Constructor<?> constructor = TestReceiverTypeParameterizedConstructor.Inner.class.getDeclaredConstructor(TestReceiverTypeParameterizedConstructor.class);\n+        AnnotatedType receiverType = constructor.getAnnotatedReceiverType();\n+        AnnotatedParameterizedType parameterizedType = (AnnotatedParameterizedType) receiverType;\n+        AnnotatedType[] arguments = parameterizedType.getAnnotatedActualTypeArguments();\n+        Annotation[] annotations = arguments[0].getAnnotations();\n+        if (annotations.length != 1 || !(annotations[0] instanceof TypeAnnotation)) {\n+            throw new AssertionError();\n+        }\n+    }\n+\n+    class Inner {\n+        Inner(TestReceiverTypeParameterizedConstructor<@TypeAnnotation T> TestReceiverTypeParameterizedConstructor.this) { }\n+    }\n+\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.TYPE_USE)\n+    @interface TypeAnnotation { }\n+}\n","filename":"test\/jdk\/java\/lang\/annotation\/typeAnnotations\/TestReceiverTypeParameterizedConstructor.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8202471\n+ * @summary A method's parameterized receiver type's type variables can be type annotated\n+ *\/\n+\n+import java.lang.annotation.Target;\n+import java.lang.annotation.*;\n+import java.lang.reflect.AnnotatedParameterizedType;\n+import java.lang.reflect.AnnotatedType;\n+import java.lang.reflect.Method;\n+\n+public class TestReceiverTypeParameterizedMethod<T> {\n+\n+    void m(TestReceiverTypeParameterizedMethod<@TypeAnnotation T> this) { }\n+\n+    public static void main(String[] args) throws NoSuchMethodException {\n+        Method method = TestReceiverTypeParameterizedMethod.class.getDeclaredMethod(\"m\");\n+        AnnotatedType receiverType = method.getAnnotatedReceiverType();\n+        AnnotatedParameterizedType parameterizedType = (AnnotatedParameterizedType) receiverType;\n+        AnnotatedType[] arguments = parameterizedType.getAnnotatedActualTypeArguments();\n+        Annotation[] annotations = arguments[0].getAnnotations();\n+        if (annotations.length != 1 || !(annotations[0] instanceof TypeAnnotation)) {\n+            throw new AssertionError();\n+        }\n+    }\n+\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.TYPE_USE)\n+    @interface TypeAnnotation { }\n+}\n","filename":"test\/jdk\/java\/lang\/annotation\/typeAnnotations\/TestReceiverTypeParameterizedMethod.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}