{"files":[{"patch":"@@ -665,1 +665,1 @@\n-                CoreReflectionFactory.ownerType(enclosingClass),\n+                resolveToOwnerType(enclosingClass),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Constructor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-import sun.reflect.generics.factory.CoreReflectionFactory;\n+import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;\n@@ -702,1 +702,1 @@\n-                CoreReflectionFactory.ownerType(getDeclaringClass()),\n+                resolveToOwnerType(getDeclaringClass()),\n@@ -757,0 +757,19 @@\n+    static Type resolveToOwnerType(Class<?> c) {\n+        TypeVariable<?>[] v = c.getTypeParameters();\n+        Type o = resolveOwner(c);\n+        Type t;\n+        if (o != null || v.length > 0) {\n+            t = ParameterizedTypeImpl.make(c, v, o);\n+        } else {\n+            t = c;\n+        }\n+        return t;\n+    }\n+\n+    private static Type resolveOwner(Class<?> t) {\n+        if (Modifier.isStatic(t.getModifiers()) || !(t.isLocalClass() || t.isMemberClass() || t.isAnonymousClass())) {\n+            return null;\n+        }\n+        Class<?> d = t.getDeclaringClass();\n+        return ParameterizedTypeImpl.make(d, d.getTypeParameters(), resolveOwner(d));\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.lang.reflect.Modifier;\n@@ -93,20 +92,0 @@\n-    public static Type ownerType(Class<?> c) {\n-        TypeVariable<?>[] v = c.getTypeParameters();\n-        Type o = resolveOwner(c);\n-        Type t;\n-        if (o != null || v.length > 0) {\n-            t = ParameterizedTypeImpl.make(c, v, o);\n-        } else {\n-            t = c;\n-        }\n-        return t;\n-    }\n-\n-    private static Type resolveOwner(Class<?> t) {\n-        if (Modifier.isStatic(t.getModifiers()) || !(t.isLocalClass() || t.isMemberClass() || t.isAnonymousClass())) {\n-            return null;\n-        }\n-        Class<?> d = t.getDeclaringClass();\n-        return ParameterizedTypeImpl.make(d, d.getTypeParameters(), resolveOwner(d));\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/generics\/factory\/CoreReflectionFactory.java","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -39,1 +39,6 @@\n-        Constructor<?> constructor = TestReceiverTypeParameterizedConstructor.Inner.class.getDeclaredConstructor(TestReceiverTypeParameterizedConstructor.class);\n+        doAssert(TestReceiverTypeParameterizedConstructor.Inner.class);\n+        doAssert(TestReceiverTypeParameterizedConstructor.Inner.Inner2.class);\n+    }\n+\n+    private static void doAssert(Class<?> c) throws NoSuchMethodException {\n+        Constructor<?> constructor = c.getDeclaredConstructor(c.getDeclaringClass());\n@@ -42,5 +47,11 @@\n-        AnnotatedType[] arguments = parameterizedType.getAnnotatedActualTypeArguments();\n-        Annotation[] annotations = arguments[0].getAnnotations();\n-        if (annotations.length != 1 || !(annotations[0] instanceof TypeAnnotation)) {\n-            throw new AssertionError();\n-        }\n+        int count = 0;\n+        do {\n+            AnnotatedType[] arguments = parameterizedType.getAnnotatedActualTypeArguments();\n+            Annotation[] annotations = arguments[0].getAnnotations();\n+            if (annotations.length != 1\n+                    || !(annotations[0] instanceof TypeAnnotation)\n+                    || ((TypeAnnotation) annotations[0]).value() != count++) {\n+                throw new AssertionError();\n+            }\n+            parameterizedType = (AnnotatedParameterizedType) parameterizedType.getAnnotatedOwnerType();\n+        } while (parameterizedType != null);\n@@ -49,2 +60,6 @@\n-    class Inner {\n-        Inner(TestReceiverTypeParameterizedConstructor<@TypeAnnotation T> TestReceiverTypeParameterizedConstructor.this) { }\n+    class Inner<S> {\n+        Inner(TestReceiverTypeParameterizedConstructor<@TypeAnnotation(0) T> TestReceiverTypeParameterizedConstructor.this) { }\n+\n+        class Inner2 {\n+            Inner2(TestReceiverTypeParameterizedConstructor<@TypeAnnotation(1) T>.Inner<@TypeAnnotation(0) S> TestReceiverTypeParameterizedConstructor.Inner.this) { }\n+        }\n@@ -55,1 +70,3 @@\n-    @interface TypeAnnotation { }\n+    @interface TypeAnnotation {\n+        int value();\n+    }\n","filename":"test\/jdk\/java\/lang\/annotation\/typeAnnotations\/TestReceiverTypeParameterizedConstructor.java","additions":26,"deletions":9,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8202471\n- * @summary A constructor's nested parameterized receiver type's type variables can be type annotated\n- *\/\n-\n-import java.lang.annotation.Target;\n-import java.lang.annotation.*;\n-import java.lang.reflect.AnnotatedParameterizedType;\n-import java.lang.reflect.AnnotatedType;\n-import java.lang.reflect.Constructor;\n-\n-public class TestReceiverTypeParameterizedConstructorNested {\n-\n-    public static void main(String[] args) throws NoSuchMethodException {\n-        Constructor<?> constructor = TestReceiverTypeParameterizedConstructorNested.Inner.Inner2.class.getDeclaredConstructor(TestReceiverTypeParameterizedConstructorNested.Inner.class);\n-        AnnotatedType receiverType = constructor.getAnnotatedReceiverType();\n-        AnnotatedParameterizedType parameterizedType = (AnnotatedParameterizedType) receiverType;\n-        AnnotatedType[] arguments = parameterizedType.getAnnotatedActualTypeArguments();\n-        Annotation[] annotations = arguments[0].getAnnotations();\n-        if (annotations.length != 1 || !(annotations[0] instanceof TypeAnnotation)) {\n-            throw new AssertionError();\n-        }\n-    }\n-\n-    class Inner<S> {\n-        class Inner2 {\n-            Inner2(TestReceiverTypeParameterizedConstructorNested.Inner<@TypeAnnotation S> TestReceiverTypeParameterizedConstructorNested.Inner.this) { }\n-        }\n-    }\n-\n-    @Retention(RetentionPolicy.RUNTIME)\n-    @Target(ElementType.TYPE_USE)\n-    @interface TypeAnnotation { }\n-}\n","filename":"test\/jdk\/java\/lang\/annotation\/typeAnnotations\/TestReceiverTypeParameterizedConstructorNested.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -38,2 +38,0 @@\n-    void m(TestReceiverTypeParameterizedMethod<@TypeAnnotation T> this) { }\n-\n@@ -41,1 +39,6 @@\n-        Method method = TestReceiverTypeParameterizedMethod.class.getDeclaredMethod(\"m\");\n+        doAssert(TestReceiverTypeParameterizedMethod.class);\n+        doAssert(TestReceiverTypeParameterizedMethod.Inner.class);\n+    }\n+\n+    private static void doAssert(Class<?> c) throws NoSuchMethodException {\n+        Method method = c.getDeclaredMethod(\"m\");\n@@ -44,5 +47,17 @@\n-        AnnotatedType[] arguments = parameterizedType.getAnnotatedActualTypeArguments();\n-        Annotation[] annotations = arguments[0].getAnnotations();\n-        if (annotations.length != 1 || !(annotations[0] instanceof TypeAnnotation)) {\n-            throw new AssertionError();\n-        }\n+        int count = 0;\n+        do {\n+            AnnotatedType[] arguments = parameterizedType.getAnnotatedActualTypeArguments();\n+            Annotation[] annotations = arguments[0].getAnnotations();\n+            if (annotations.length != 1\n+                    || !(annotations[0] instanceof TypeAnnotation)\n+                    || ((TypeAnnotation) annotations[0]).value() != count++) {\n+                throw new AssertionError();\n+            }\n+            parameterizedType = (AnnotatedParameterizedType) parameterizedType.getAnnotatedOwnerType();\n+        } while (parameterizedType != null);\n+    }\n+\n+    void m(TestReceiverTypeParameterizedMethod<@TypeAnnotation(0) T> this) { }\n+\n+    class Inner<S> {\n+        void m(TestReceiverTypeParameterizedMethod<@TypeAnnotation(1) T>.Inner<@TypeAnnotation(0) S> this) { }\n@@ -53,1 +68,3 @@\n-    @interface TypeAnnotation { }\n+    @interface TypeAnnotation {\n+        int value();\n+    }\n","filename":"test\/jdk\/java\/lang\/annotation\/typeAnnotations\/TestReceiverTypeParameterizedMethod.java","additions":26,"deletions":9,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8202471\n- * @summary A method's nested parameterized receiver type's type variables can be type annotated\n- *\/\n-\n-import java.lang.annotation.Target;\n-import java.lang.annotation.*;\n-import java.lang.reflect.AnnotatedParameterizedType;\n-import java.lang.reflect.AnnotatedType;\n-import java.lang.reflect.Method;\n-\n-public class TestReceiverTypeParameterizedMethodNested {\n-\n-    public static void main(String[] args) throws NoSuchMethodException {\n-        Method method = TestReceiverTypeParameterizedMethodNested.Inner.class.getDeclaredMethod(\"m\");\n-        AnnotatedType receiverType = method.getAnnotatedReceiverType();\n-        AnnotatedParameterizedType parameterizedType = (AnnotatedParameterizedType) receiverType;\n-        AnnotatedType[] arguments = parameterizedType.getAnnotatedActualTypeArguments();\n-        Annotation[] annotations = arguments[0].getAnnotations();\n-        if (annotations.length != 1 || !(annotations[0] instanceof TypeAnnotation)) {\n-            throw new AssertionError();\n-        }\n-    }\n-\n-    class Inner<T> {\n-        void m(TestReceiverTypeParameterizedMethodNested.Inner<@TypeAnnotation T> this) { }\n-    }\n-\n-    @Retention(RetentionPolicy.RUNTIME)\n-    @Target(ElementType.TYPE_USE)\n-    @interface TypeAnnotation { }\n-}\n","filename":"test\/jdk\/java\/lang\/annotation\/typeAnnotations\/TestReceiverTypeParameterizedMethodNested.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"}]}