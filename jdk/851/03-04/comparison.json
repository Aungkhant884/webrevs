{"files":[{"patch":"@@ -35,1 +35,0 @@\n-import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;\n@@ -660,9 +659,0 @@\n-        TypeVariable<?>[] v = enclosingClass.getTypeParameters();\n-        Type o = resolveOwner(enclosingClass);\n-        Type t;\n-        if (o != null || v.length > 0) {\n-            t = ParameterizedTypeImpl.make(enclosingClass, v, o);\n-        } else {\n-            t = enclosingClass;\n-        }\n-\n@@ -675,1 +665,1 @@\n-                t,\n+                CoreReflectionFactory.ownerType(enclosingClass),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Constructor.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;\n+import sun.reflect.generics.factory.CoreReflectionFactory;\n@@ -695,1 +695,1 @@\n-        if (Modifier.isStatic(this.getModifiers())) {\n+        if (Modifier.isStatic(this.getModifiers()))\n@@ -697,10 +697,0 @@\n-        }\n-        Class<?> c = getDeclaringClass();\n-        TypeVariable<?>[] v = c.getTypeParameters();\n-        Type o = resolveOwner(c);\n-        Type t;\n-        if (o != null || v.length > 0) {\n-            t = ParameterizedTypeImpl.make(c, v, o);\n-        } else {\n-            t = c;\n-        }\n@@ -708,1 +698,2 @@\n-                SharedSecrets.getJavaLangAccess().getConstantPool(c),\n+                SharedSecrets.getJavaLangAccess().\n+                        getConstantPool(getDeclaringClass()),\n@@ -710,2 +701,2 @@\n-                c,\n-                t,\n+                getDeclaringClass(),\n+                CoreReflectionFactory.ownerType(getDeclaringClass()),\n@@ -715,8 +706,0 @@\n-    static Type resolveOwner(Class<?> t) {\n-        if (Modifier.isStatic(t.getModifiers()) || !(t.isLocalClass() || t.isMemberClass() || t.isAnonymousClass())) {\n-            return null;\n-        }\n-        Class<?> d = t.getDeclaringClass();\n-        return ParameterizedTypeImpl.make(d, d.getTypeParameters(), resolveOwner(d));\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":6,"deletions":23,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.reflect.Modifier;\n@@ -92,0 +93,20 @@\n+    public static Type ownerType(Class<?> c) {\n+        TypeVariable<?>[] v = c.getTypeParameters();\n+        Type o = resolveOwner(c);\n+        Type t;\n+        if (o != null || v.length > 0) {\n+            t = ParameterizedTypeImpl.make(c, v, o);\n+        } else {\n+            t = c;\n+        }\n+        return t;\n+    }\n+\n+    private static Type resolveOwner(Class<?> t) {\n+        if (Modifier.isStatic(t.getModifiers()) || !(t.isLocalClass() || t.isMemberClass() || t.isAnonymousClass())) {\n+            return null;\n+        }\n+        Class<?> d = t.getDeclaringClass();\n+        return ParameterizedTypeImpl.make(d, d.getTypeParameters(), resolveOwner(d));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/generics\/factory\/CoreReflectionFactory.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8202471\n+ * @summary A constructor's nested parameterized receiver type's type variables can be type annotated\n+ *\/\n+\n+import java.lang.annotation.Target;\n+import java.lang.annotation.*;\n+import java.lang.reflect.AnnotatedParameterizedType;\n+import java.lang.reflect.AnnotatedType;\n+import java.lang.reflect.Constructor;\n+\n+public class TestReceiverTypeParameterizedConstructorNested {\n+\n+    public static void main(String[] args) throws NoSuchMethodException {\n+        Constructor<?> constructor = TestReceiverTypeParameterizedConstructorNested.Inner.Inner2.class.getDeclaredConstructor(TestReceiverTypeParameterizedConstructorNested.Inner.class);\n+        AnnotatedType receiverType = constructor.getAnnotatedReceiverType();\n+        AnnotatedParameterizedType parameterizedType = (AnnotatedParameterizedType) receiverType;\n+        AnnotatedType[] arguments = parameterizedType.getAnnotatedActualTypeArguments();\n+        Annotation[] annotations = arguments[0].getAnnotations();\n+        if (annotations.length != 1 || !(annotations[0] instanceof TypeAnnotation)) {\n+            throw new AssertionError();\n+        }\n+    }\n+\n+    class Inner<S> {\n+        class Inner2 {\n+            Inner2(TestReceiverTypeParameterizedConstructorNested.Inner<@TypeAnnotation S> TestReceiverTypeParameterizedConstructorNested.Inner.this) { }\n+        }\n+    }\n+\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.TYPE_USE)\n+    @interface TypeAnnotation { }\n+}\n","filename":"test\/jdk\/java\/lang\/annotation\/typeAnnotations\/TestReceiverTypeParameterizedConstructorNested.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8202471\n+ * @summary A method's nested parameterized receiver type's type variables can be type annotated\n+ *\/\n+\n+import java.lang.annotation.Target;\n+import java.lang.annotation.*;\n+import java.lang.reflect.AnnotatedParameterizedType;\n+import java.lang.reflect.AnnotatedType;\n+import java.lang.reflect.Method;\n+\n+public class TestReceiverTypeParameterizedMethodNested<T> {\n+\n+    public static void main(String[] args) throws NoSuchMethodException {\n+        Method method = TestReceiverTypeParameterizedMethodNested.Inner.class.getDeclaredMethod(\"m\");\n+        AnnotatedType receiverType = method.getAnnotatedReceiverType();\n+        AnnotatedParameterizedType parameterizedType = (AnnotatedParameterizedType) receiverType;\n+        AnnotatedType[] arguments = parameterizedType.getAnnotatedActualTypeArguments();\n+        Annotation[] annotations = arguments[0].getAnnotations();\n+        if (annotations.length != 1 || !(annotations[0] instanceof TypeAnnotation)) {\n+            throw new AssertionError();\n+        }\n+    }\n+\n+    class Inner<T> {\n+        void m(TestReceiverTypeParameterizedMethodNested.Inner<@TypeAnnotation T> this) { }\n+    }\n+\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.TYPE_USE)\n+    @interface TypeAnnotation { }\n+}\n","filename":"test\/jdk\/java\/lang\/annotation\/typeAnnotations\/TestReceiverTypeParameterizedMethodNested.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"}]}