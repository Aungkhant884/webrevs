{"files":[{"patch":"@@ -260,1 +260,1 @@\n-            int offset = buf.arrayOffset();\n+            int offset = buf.arrayOffset() + buf.position();\n@@ -266,0 +266,1 @@\n+            buf.position(offset + blockMultipleLength);\n@@ -267,1 +268,1 @@\n-            while (blockMultipleLength > 0) {\n+            while (blockMultipleLength >= BLOCK_LENGTH) {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/Poly1305.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+                rnd.nextBytes(message);\n@@ -66,1 +67,1 @@\n-                if (rnd.nextBoolean()) {\n+                if (rnd.nextBoolean() && message.length > 16) {\n@@ -68,3 +69,4 @@\n-                        int initDataLen = rnd.nextInt(8, 24);\n-                        fastUpdate(authenticator, rnd, message, 0, initDataLen);\n-                        slowUpdate(authenticatorSlow, message, 0, initDataLen);\n+                        int initDataLen = rnd.nextInt(1, 16);\n+                        int initDataOffset = rnd.nextInt(0, message.length - initDataLen);\n+                        fastUpdate(authenticator, rnd, message, initDataOffset, initDataLen);\n+                        slowUpdate(authenticatorSlow, message, initDataOffset, initDataLen);\n@@ -75,2 +77,3 @@\n-                        fastUpdate(authenticator, rnd, message, 0, message.length);\n-                        slowUpdate(authenticatorSlow, message, 0, message.length);\n+                        int initDataOffset = rnd.nextInt(0, message.length);\n+                        fastUpdate(authenticator, rnd, message, initDataOffset, message.length - initDataOffset);\n+                        slowUpdate(authenticatorSlow, message, initDataOffset, message.length - initDataOffset);\n@@ -91,2 +94,1 @@\n-                len = Math.min(message.length, offset + len);\n-                for (int i = offset; i < len; i++) {\n+                for (int i = offset; i < offset + len; i++) {\n@@ -98,1 +100,2 @@\n-                switch(rnd.nextInt(3)) {\n+                ByteBuffer buf;\n+                switch(rnd.nextInt(4)) {\n@@ -103,1 +106,9 @@\n-                                authenticator.engineUpdate(ByteBuffer.wrap(message, offset, len));\n+                                buf = ByteBuffer.wrap(message, offset, len)\n+                                                .order(java.nio.ByteOrder.LITTLE_ENDIAN);\n+                                authenticator.engineUpdate(buf);\n+                                break;\n+                        case 2: \/\/ ByteArray with backing array (non-zero position)\n+                                buf = ByteBuffer.wrap(message, 0, len+offset)\n+                                                .order(java.nio.ByteOrder.LITTLE_ENDIAN)\n+                                                .position(offset);\n+                                authenticator.engineUpdate(buf);\n@@ -105,2 +116,7 @@\n-                        case 2: \/\/ ByteArray without backing array (wont be sent to intrinsic)\n-                                authenticator.engineUpdate(ByteBuffer.wrap(message, offset, len).asReadOnlyBuffer());\n+                        case 3: \/\/ ByteArray without backing array (wont be sent to intrinsic)\n+                                buf = ByteBuffer.wrap(message, offset, len)\n+                                                \/\/.order(java.nio.ByteOrder.LITTLE_ENDIAN)\n+                                                \/\/ .order(java.nio.ByteOrder.BIG_ENDIAN)\n+                                                .asReadOnlyBuffer()\n+                                                .order(java.nio.ByteOrder.LITTLE_ENDIAN);\n+                                authenticator.engineUpdate(buf);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/ChaCha20\/unittest\/java.base\/com\/sun\/crypto\/provider\/Poly1305IntrinsicFuzzTest.java","additions":28,"deletions":12,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.nio.ByteBuffer;\n@@ -52,1 +53,1 @@\n-    private static MethodHandle polyEngineInit, polyEngineUpdate, polyEngineFinal;\n+    private static MethodHandle polyEngineInit, polyEngineUpdate, polyEngineUpdateBuf, polyEngineFinal;\n@@ -71,0 +72,4 @@\n+            m = polyClazz.getDeclaredMethod(\"engineUpdate\", ByteBuffer.class);\n+            m.setAccessible(true);\n+            polyEngineUpdateBuf = lookup.unreflect(m);\n+\n@@ -86,1 +91,1 @@\n-    public byte[] digest() {\n+    public byte[] digestBytes() {\n@@ -97,0 +102,13 @@\n+\n+    @Benchmark\n+    public byte[] digestBuffer() {\n+        try {\n+            byte[] d = data[index];\n+            index = (index +1) % SET_SIZE;\n+            polyEngineInit.invoke(polyObj, new SecretKeySpec(d, 0, 32, \"Poly1305\"), null);\n+            polyEngineUpdateBuf.invoke(polyObj, ByteBuffer.wrap(d, 0, d.length));\n+            return (byte[])polyEngineFinal.invoke(polyObj);\n+        } catch (Throwable ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/javax\/crypto\/full\/Poly1305DigestBench.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"}]}