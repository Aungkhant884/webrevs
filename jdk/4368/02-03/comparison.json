{"files":[{"patch":"@@ -4553,2 +4553,4 @@\n-void Assembler::evpmaddubsw(XMMRegister dst, XMMRegister src1, XMMRegister src2, int vector_len) {\n-  assert(VM_Version::supports_avx512bw(), \"\");\n+void Assembler::vpmaddubsw(XMMRegister dst, XMMRegister src1, XMMRegister src2, int vector_len) {\n+assert(vector_len == AVX_128bit? VM_Version::supports_avx() :\n+       vector_len == AVX_256bit? VM_Version::supports_avx2() :\n+       vector_len == AVX_512bit? VM_Version::supports_avx512bw() : 0, \"\");\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1815,1 +1815,1 @@\n-  void evpmaddubsw(XMMRegister dst, XMMRegister src1, XMMRegister src2, int vector_len);\n+  void vpmaddubsw(XMMRegister dst, XMMRegister src1, XMMRegister src2, int vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5688,1 +5688,1 @@\n-    StubCodeMark mark(this, \"StubRoutines\", \"lookup_lo\");\n+    StubCodeMark mark(this, \"StubRoutines\", \"lookup_lo_base64\");\n@@ -5704,1 +5704,1 @@\n-    StubCodeMark mark(this, \"StubRoutines\", \"lookup_hi\");\n+    StubCodeMark mark(this, \"StubRoutines\", \"lookup_hi_base64\");\n@@ -5719,1 +5719,1 @@\n-    StubCodeMark mark(this, \"StubRoutines\", \"lookup_lo_url\");\n+    StubCodeMark mark(this, \"StubRoutines\", \"lookup_lo_base64url\");\n@@ -5735,1 +5735,1 @@\n-    StubCodeMark mark(this, \"StubRoutines\", \"lookup_hi_url\");\n+    StubCodeMark mark(this, \"StubRoutines\", \"lookup_hi_base64url\");\n@@ -5751,1 +5751,1 @@\n-    StubCodeMark mark(this, \"StubRoutines\", \"pack_vec\");\n+    StubCodeMark mark(this, \"StubRoutines\", \"pack_vec_base64\");\n@@ -5767,1 +5767,1 @@\n-    StubCodeMark mark(this, \"StubRoutines\", \"join_0_1\");\n+    StubCodeMark mark(this, \"StubRoutines\", \"join_0_1_base64\");\n@@ -5783,1 +5783,1 @@\n-    StubCodeMark mark(this, \"StubRoutines\", \"join_1_2\");\n+    StubCodeMark mark(this, \"StubRoutines\", \"join_1_2_base64\");\n@@ -5799,1 +5799,1 @@\n-    StubCodeMark mark(this, \"StubRoutines\", \"join_2_3\");\n+    StubCodeMark mark(this, \"StubRoutines\", \"join_2_3_base64\");\n@@ -5814,1 +5814,1 @@\n-    StubCodeMark mark(this, \"StubRoutines\", \"decoding_table\");\n+    StubCodeMark mark(this, \"StubRoutines\", \"decoding_table_base64\");\n@@ -5982,2 +5982,2 @@\n-    __ movq(length, end_offset);\n-    __ subq(length, start_offset);\n+    __ movl(length, end_offset);\n+    __ subl(length, start_offset);\n@@ -5987,2 +5987,3 @@\n-    if(VM_Version::supports_avx512_vbmi()) {\n-      __ cmpq(length, 128);     \/\/ 128-bytes is break-even for AVX-512\n+    if(VM_Version::supports_avx512_vbmi() &&\n+       VM_Version::supports_avx512bw()) {\n+      __ cmpl(length, 128);     \/\/ 128-bytes is break-even for AVX-512\n@@ -6011,1 +6012,1 @@\n-      __ cmpq(length, 0xff);\n+      __ cmpl(length, 0xff);\n@@ -6066,4 +6067,4 @@\n-      __ evpmaddubsw(merge_ab_bc0, translated0, tmp16_op3, Assembler::AVX_512bit);\n-      __ evpmaddubsw(merge_ab_bc1, translated1, tmp16_op2, Assembler::AVX_512bit);\n-      __ evpmaddubsw(merge_ab_bc2, translated2, tmp16_op1, Assembler::AVX_512bit);\n-      __ evpmaddubsw(merge_ab_bc3, translated3, pack16_op, Assembler::AVX_512bit);\n+      __ vpmaddubsw(merge_ab_bc0, translated0, tmp16_op3, Assembler::AVX_512bit);\n+      __ vpmaddubsw(merge_ab_bc1, translated1, tmp16_op2, Assembler::AVX_512bit);\n+      __ vpmaddubsw(merge_ab_bc2, translated2, tmp16_op1, Assembler::AVX_512bit);\n+      __ vpmaddubsw(merge_ab_bc3, translated3, pack16_op, Assembler::AVX_512bit);\n@@ -6092,4 +6093,4 @@\n-      __ addq(source, 0x100);\n-      __ addq(dest, 0xc0);\n-      __ subq(length, 0x100);\n-      __ cmpq(length, 64 * 4);\n+      __ addptr(source, 0x100);\n+      __ addptr(dest, 0xc0);\n+      __ subl(length, 0x100);\n+      __ cmpl(length, 64 * 4);\n@@ -6105,1 +6106,1 @@\n-      __ cmpq(length, 63);\n+      __ cmpl(length, 63);\n@@ -6113,1 +6114,1 @@\n-      __ evmovdquq(input0, Address(source, start_offset, Address::times_1, 0x0), Assembler::AVX_512bit);\n+      __ evmovdquq(input0, Address(source, start_offset), Assembler::AVX_512bit);\n@@ -6126,1 +6127,1 @@\n-      __ evpmaddubsw(merge_ab_bc0, translated0, pack16_op, Assembler::AVX_512bit);\n+      __ vpmaddubsw(merge_ab_bc0, translated0, pack16_op, Assembler::AVX_512bit);\n@@ -6130,1 +6131,1 @@\n-      __ evmovdquq(Address(dest, dp, Address::times_1, 0x00), merged0, Assembler::AVX_512bit);\n+      __ evmovdquq(Address(dest, dp), merged0, Assembler::AVX_512bit);\n@@ -6132,3 +6133,3 @@\n-      __ subq(length, 64);\n-      __ addq(source, 64);\n-      __ addq(dest, 48);\n+      __ subl(length, 64);\n+      __ addptr(source, 64);\n+      __ addptr(dest, 48);\n@@ -6136,1 +6137,1 @@\n-      __ cmpq(length, 64);\n+      __ cmpl(length, 64);\n@@ -6139,1 +6140,1 @@\n-      __ cmpq(length, 0);\n+      __ cmpl(length, 0);\n@@ -6148,2 +6149,2 @@\n-      __ movq(output_size, 0x40);\n-      __ subq(output_size, length);\n+      __ movl(output_size, 0x40);\n+      __ subl(output_size, length);\n@@ -6155,2 +6156,2 @@\n-      __ movq(output_size, length);\n-      __ shrq(output_size, 2);   \/\/ Find (len \/ 4) * 3 (output length)\n+      __ movl(output_size, length);\n+      __ shrl(output_size, 2);   \/\/ Find (len \/ 4) * 3 (output length)\n@@ -6200,1 +6201,1 @@\n-      __ evpmaddubsw(tmp, tmp, pack16_op, Assembler::AVX_512bit);\n+      __ vpmaddubsw(tmp, tmp, pack16_op, Assembler::AVX_512bit);\n@@ -6205,1 +6206,1 @@\n-      __ evmovdqub(Address(dest, dp, Address::times_1, 0x00), k1, tmp, true, Assembler::AVX_512bit);\n+      __ evmovdqub(Address(dest, dp), k1, tmp, true, Assembler::AVX_512bit);\n@@ -6207,1 +6208,1 @@\n-      __ addq(dest, output_size);\n+      __ addptr(dest, output_size);\n@@ -6212,2 +6213,2 @@\n-      __ subq(dest, rax);      \/\/ Number of bytes converted\n-      __ movq(rax, dest);\n+      __ subptr(dest, rax);      \/\/ Number of bytes converted\n+      __ movptr(rax, dest);\n@@ -6272,2 +6273,2 @@\n-    __ shrq(length, 2);    \/\/ Multiple of 4 bytes only - length is # 4-byte chunks\n-    __ cmpq(length, 0);\n+    __ shrl(length, 2);    \/\/ Multiple of 4 bytes only - length is # 4-byte chunks\n+    __ cmpl(length, 0);\n@@ -6277,2 +6278,2 @@\n-    __ addq(source, start_offset);     \/\/ Initial offset\n-    __ addq(dest, dp);\n+    __ addptr(source, start_offset);     \/\/ Initial offset\n+    __ addptr(dest, dp);\n@@ -6284,1 +6285,1 @@\n-    __ addq(decode_table, isURL);\n+    __ addptr(decode_table, isURL);\n@@ -6297,1 +6298,1 @@\n-    __ incrementq(source, 4);\n+    __ addptr(source, 4);\n@@ -6299,1 +6300,1 @@\n-    __ movb(Address(dest, RegisterOrConstant(), Address::times_1, 2), byte1);\n+    __ movb(Address(dest, 2), byte1);\n@@ -6301,1 +6302,1 @@\n-    __ movb(Address(dest, RegisterOrConstant(), Address::times_1, 1), byte1);\n+    __ movb(Address(dest, 1), byte1);\n@@ -6303,1 +6304,1 @@\n-    __ movb(Address(dest, RegisterOrConstant(), Address::times_1, 0), byte1);\n+    __ movb(Address(dest, 0), byte1);\n@@ -6305,1 +6306,1 @@\n-    __ incrementq(dest, 3);\n+    __ addptr(dest, 3);\n@@ -6310,8 +6311,8 @@\n-    __ load_signed_byte(byte1, Address(source, RegisterOrConstant(), Address::times_1, 0));\n-    __ load_signed_byte(byte2, Address(source, RegisterOrConstant(), Address::times_1, 1));\n-    __ load_signed_byte(byte1, Address(decode_table, byte1, Address::times_1, 0));\n-    __ load_signed_byte(byte2, Address(decode_table, byte2, Address::times_1, 0));\n-    __ load_signed_byte(byte3, Address(source, RegisterOrConstant(), Address::times_1, 2));\n-    __ load_signed_byte(byte4, Address(source, RegisterOrConstant(), Address::times_1, 3));\n-    __ load_signed_byte(byte3, Address(decode_table, byte3, Address::times_1, 0));\n-    __ load_signed_byte(byte4, Address(decode_table, byte4, Address::times_1, 0));\n+    __ load_signed_byte(byte1, Address(source, 0));\n+    __ load_signed_byte(byte2, Address(source, 1));\n+    __ load_signed_byte(byte1, Address(decode_table, byte1));\n+    __ load_signed_byte(byte2, Address(decode_table, byte2));\n+    __ load_signed_byte(byte3, Address(source, 2));\n+    __ load_signed_byte(byte4, Address(source, 3));\n+    __ load_signed_byte(byte3, Address(decode_table, byte3));\n+    __ load_signed_byte(byte4, Address(decode_table, byte4));\n@@ -6327,2 +6328,2 @@\n-    __ subq(dest, rax);      \/\/ Number of bytes converted\n-    __ movq(rax, dest);\n+    __ subptr(dest, rax);      \/\/ Number of bytes converted\n+    __ movptr(rax, dest);\n@@ -7627,9 +7628,10 @@\n-      if (VM_Version::supports_avx512_vbmi()) {\n-        StubRoutines::x86::_lookup_lo = base64_vbmi_lookup_lo_addr();\n-        StubRoutines::x86::_lookup_hi = base64_vbmi_lookup_hi_addr();\n-        StubRoutines::x86::_lookup_lo_url = base64_vbmi_lookup_lo_url_addr();\n-        StubRoutines::x86::_lookup_hi_url = base64_vbmi_lookup_hi_url_addr();\n-        StubRoutines::x86::_pack_vec = base64_vbmi_pack_vec_addr();\n-        StubRoutines::x86::_join_0_1 = base64_vbmi_join_0_1_addr();\n-        StubRoutines::x86::_join_1_2 = base64_vbmi_join_1_2_addr();\n-        StubRoutines::x86::_join_2_3 = base64_vbmi_join_2_3_addr();\n+      if(VM_Version::supports_avx512_vbmi() &&\n+         VM_Version::supports_avx512bw()) {\n+        StubRoutines::x86::_lookup_lo_base64 = base64_vbmi_lookup_lo_addr();\n+        StubRoutines::x86::_lookup_hi_base64 = base64_vbmi_lookup_hi_addr();\n+        StubRoutines::x86::_lookup_lo_base64url = base64_vbmi_lookup_lo_url_addr();\n+        StubRoutines::x86::_lookup_hi_base64url = base64_vbmi_lookup_hi_url_addr();\n+        StubRoutines::x86::_pack_vec_base64 = base64_vbmi_pack_vec_addr();\n+        StubRoutines::x86::_join_0_1_base64 = base64_vbmi_join_0_1_addr();\n+        StubRoutines::x86::_join_1_2_base64 = base64_vbmi_join_1_2_addr();\n+        StubRoutines::x86::_join_2_3_base64 = base64_vbmi_join_2_3_addr();\n@@ -7637,1 +7639,1 @@\n-      StubRoutines::x86::_decoding_table = base64_decoding_table_addr();\n+      StubRoutines::x86::_decoding_table_base64 = base64_decoding_table_addr();\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":72,"deletions":70,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -76,9 +76,9 @@\n-address StubRoutines::x86::_lookup_lo = NULL;\n-address StubRoutines::x86::_lookup_hi = NULL;\n-address StubRoutines::x86::_lookup_lo_url = NULL;\n-address StubRoutines::x86::_lookup_hi_url = NULL;\n-address StubRoutines::x86::_pack_vec = NULL;\n-address StubRoutines::x86::_join_0_1 = NULL;\n-address StubRoutines::x86::_join_1_2 = NULL;\n-address StubRoutines::x86::_join_2_3 = NULL;\n-address StubRoutines::x86::_decoding_table = NULL;\n+address StubRoutines::x86::_lookup_lo_base64 = NULL;\n+address StubRoutines::x86::_lookup_hi_base64 = NULL;\n+address StubRoutines::x86::_lookup_lo_base64url = NULL;\n+address StubRoutines::x86::_lookup_hi_base64url = NULL;\n+address StubRoutines::x86::_pack_vec_base64 = NULL;\n+address StubRoutines::x86::_join_0_1_base64 = NULL;\n+address StubRoutines::x86::_join_1_2_base64 = NULL;\n+address StubRoutines::x86::_join_2_3_base64 = NULL;\n+address StubRoutines::x86::_decoding_table_base64 = NULL;\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -194,9 +194,9 @@\n-  static address _lookup_lo;\n-  static address _lookup_hi;\n-  static address _lookup_lo_url;\n-  static address _lookup_hi_url;\n-  static address _pack_vec;\n-  static address _join_0_1;\n-  static address _join_1_2;\n-  static address _join_2_3;\n-  static address _decoding_table;\n+  static address _lookup_lo_base64;\n+  static address _lookup_hi_base64;\n+  static address _lookup_lo_base64url;\n+  static address _lookup_hi_base64url;\n+  static address _pack_vec_base64;\n+  static address _join_0_1_base64;\n+  static address _join_1_2_base64;\n+  static address _join_2_3_base64;\n+  static address _decoding_table_base64;\n@@ -348,9 +348,9 @@\n-  static address base64_vbmi_lookup_lo_addr() { return _lookup_lo; }\n-  static address base64_vbmi_lookup_hi_addr() { return _lookup_hi; }\n-  static address base64_vbmi_lookup_lo_url_addr() { return _lookup_lo_url; }\n-  static address base64_vbmi_lookup_hi_url_addr() { return _lookup_hi_url; }\n-  static address base64_vbmi_pack_vec_addr() { return _pack_vec; }\n-  static address base64_vbmi_join_0_1_addr() { return _join_0_1; }\n-  static address base64_vbmi_join_1_2_addr() { return _join_1_2; }\n-  static address base64_vbmi_join_2_3_addr() { return _join_2_3; }\n-  static address base64_decoding_table_addr() { return _decoding_table; }\n+  static address base64_vbmi_lookup_lo_addr() { return _lookup_lo_base64; }\n+  static address base64_vbmi_lookup_hi_addr() { return _lookup_hi_base64; }\n+  static address base64_vbmi_lookup_lo_url_addr() { return _lookup_lo_base64url; }\n+  static address base64_vbmi_lookup_hi_url_addr() { return _lookup_hi_base64url; }\n+  static address base64_vbmi_pack_vec_addr() { return _pack_vec_base64; }\n+  static address base64_vbmi_join_0_1_addr() { return _join_0_1_base64; }\n+  static address base64_vbmi_join_1_2_addr() { return _join_1_2_base64; }\n+  static address base64_vbmi_join_2_3_addr() { return _join_2_3_base64; }\n+  static address base64_decoding_table_addr() { return _decoding_table_base64; }\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86.hpp","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"}]}