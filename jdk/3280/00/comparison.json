{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+const char * OSContainer::_runtime = NULL;\n@@ -51,0 +52,1 @@\n+  _runtime = NULL;\n@@ -71,0 +73,23 @@\n+  if (getpid() == 1) {\n+    \/\/ This process is in container\n+    _runtime = os::strdup_check_oom(getenv(\"container\"));\n+  } else {\n+    \/\/ This process might be child of container process.\n+    \/\/ So we check environment variable in PID 1.\n+    int env_fd = open(\"\/proc\/1\/environ\", O_RDONLY);\n+    if (env_fd != -1) {\n+      const int buf_sz = 8192;\n+      char buf[buf_sz];\n+      int read_sz = read(env_fd, buf, buf_sz);\n+      close(env_fd);\n+      if (read_sz > 0) {\n+        buf[read_sz - 1] = '\\0';\n+        const char *envname = \"container=\";\n+        char *container_env = (char *)memmem(buf, read_sz, envname, strlen(envname));\n+        if (container_env != NULL) {\n+          _runtime = os::strdup_check_oom(container_env + strlen(envname));\n+        }\n+      }\n+    }\n+  }\n+  log_info(os, container)(\"Container runtime: %s\", _runtime == NULL ? \"none\" : _runtime);\n","filename":"src\/hotspot\/os\/linux\/osContainer_linux.cpp","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+  static const char * _runtime;\n@@ -47,0 +48,1 @@\n+  static inline const char * runtime();\n@@ -71,0 +73,4 @@\n+inline const char * OSContainer::runtime() {\n+  return _runtime;\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/osContainer_linux.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -200,1 +200,1 @@\n-      log_debug(os, container)(\"container memory limit %s: \" JLONG_FORMAT \", using host value\",\n+      log_debug(os, container)(\"cgroup memory limit %s: \" JLONG_FORMAT \", using host value\",\n@@ -204,1 +204,1 @@\n-      log_debug(os, container)(\"container memory usage failed: \" JLONG_FORMAT \", using host value\", mem_usage);\n+      log_debug(os, container)(\"cgroup memory usage failed: \" JLONG_FORMAT \", using host value\", mem_usage);\n@@ -208,1 +208,1 @@\n-      log_trace(os)(\"available container memory: \" JULONG_FORMAT, avail_mem);\n+      log_trace(os)(\"available cgroup memory: \" JULONG_FORMAT, avail_mem);\n@@ -224,1 +224,1 @@\n-      log_trace(os)(\"total container memory: \" JLONG_FORMAT, mem_limit);\n+      log_trace(os)(\"total cgroup memory: \" JLONG_FORMAT, mem_limit);\n@@ -227,1 +227,1 @@\n-    log_debug(os, container)(\"container memory limit %s: \" JLONG_FORMAT \", using host value\",\n+    log_debug(os, container)(\"cgroup memory limit %s: \" JLONG_FORMAT \", using host value\",\n@@ -2222,1 +2222,1 @@\n-  st->print_cr(\"container (cgroup) information:\");\n+  st->print_cr(\"cgroup information:\");\n@@ -2224,2 +2224,5 @@\n-  const char *p_ct = OSContainer::container_type();\n-  st->print_cr(\"container_type: %s\", p_ct != NULL ? p_ct : \"not supported\");\n+  const char *cp = OSContainer::container_type();\n+  st->print_cr(\"cgroup_type: %s\", cp != NULL ? cp : \"not supported\");\n+\n+  cp = OSContainer::runtime();\n+  st->print_cr(\"container runtime: %s\", cp != NULL ? cp : \"none\");\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"}]}