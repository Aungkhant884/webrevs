{"files":[{"patch":"@@ -351,13 +351,1 @@\n-void G1FullCollector::phase2c_prepare_serial_compaction() {\n-  GCTraceTime(Debug, gc, phases) debug(\"Phase 2: Prepare serial compaction\", scope()->timer());\n-  \/\/ At this point, we know that after parallel compaction there will be regions that\n-  \/\/ are partially compacted into. Thus, the last compaction region of all\n-  \/\/ compaction queues still have space in them. We try to re-compact these regions\n-  \/\/ in serial to avoid a premature OOM when the mutator wants to allocate the first\n-  \/\/ eden region after gc.\n-\n-  \/\/ For maximum compaction, we need to re-prepare all objects above the lowest\n-  \/\/ region among the current regions for all thread compaction points. It may\n-  \/\/ happen that due to the uneven distribution of objects to parallel threads, holes\n-  \/\/ have been created as threads compact to different target regions between the\n-  \/\/ lowest and the highest region in the tails of the compaction points.\n+uint G1FullCollector::truncate_parallel_cps() {\n@@ -379,0 +367,19 @@\n+  return lowest_current;\n+}\n+\n+void G1FullCollector::phase2c_prepare_serial_compaction() {\n+  GCTraceTime(Debug, gc, phases) debug(\"Phase 2: Prepare serial compaction\", scope()->timer());\n+  \/\/ At this point, we know that after parallel compaction there will be regions that\n+  \/\/ are partially compacted into. Thus, the last compaction region of all\n+  \/\/ compaction queues still have space in them. We try to re-compact these regions\n+  \/\/ in serial to avoid a premature OOM when the mutator wants to allocate the first\n+  \/\/ eden region after gc.\n+\n+  \/\/ For maximum compaction, we need to re-prepare all objects above the lowest\n+  \/\/ region among the current regions for all thread compaction points. It may\n+  \/\/ happen that due to the uneven distribution of objects to parallel threads, holes\n+  \/\/ have been created as threads compact to different target regions between the\n+  \/\/ lowest and the highest region in the tails of the compaction points.\n+\n+  uint start_serial = truncate_parallel_cps();\n+\n@@ -381,2 +388,2 @@\n-  for (uint i = lowest_current; i < _heap->max_reserved_regions(); i++) {\n-    if (_region_attr_table.is_free(i) || _region_attr_table.is_compacting(i)) {\n+  for (uint i = start_serial; i < _heap->max_reserved_regions(); i++) {\n+    if (is_compaction_target(i)) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":22,"deletions":15,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -140,0 +140,2 @@\n+  uint truncate_parallel_cps();\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}