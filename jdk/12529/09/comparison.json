{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -330,1 +330,1 @@\n-  if (!has_free_compaction_targets) {\n+  if (scope()->do_maximal_compaction() || !has_free_compaction_targets) {\n@@ -351,7 +351,14 @@\n-void G1FullCollector::phase2c_prepare_serial_compaction() {\n-  GCTraceTime(Debug, gc, phases) debug(\"Phase 2: Prepare serial compaction\", scope()->timer());\n-  \/\/ At this point we know that after parallel compaction there will be no\n-  \/\/ completely free regions. That means that the last region of\n-  \/\/ all compaction queues still have data in them. We try to compact\n-  \/\/ these regions in serial to avoid a premature OOM when the mutator wants\n-  \/\/ to allocate the first eden region after gc.\n+uint G1FullCollector::truncate_parallel_cps() {\n+  uint lowest_current = (uint)-1;\n+  for (uint i = 0; i < workers(); i++) {\n+    G1FullGCCompactionPoint* cp = compaction_point(i);\n+    if (cp->has_regions()) {\n+      lowest_current = MIN2(lowest_current, cp->current_region()->hrm_index());\n+    }\n+  }\n+\n+  if (lowest_current == (uint)-1) {\n+    \/\/ worker compaction points are empty\n+    return lowest_current;\n+  }\n+\n@@ -361,1 +368,1 @@\n-      serial_compaction_point()->add(cp->remove_last());\n+      cp->remove_at_or_above(lowest_current);\n@@ -364,0 +371,31 @@\n+  return lowest_current;\n+}\n+\n+void G1FullCollector::phase2c_prepare_serial_compaction() {\n+  GCTraceTime(Debug, gc, phases) debug(\"Phase 2: Prepare serial compaction\", scope()->timer());\n+  \/\/ At this point, we know that after parallel compaction there will be regions that\n+  \/\/ are partially compacted into. Thus, the last compaction region of all\n+  \/\/ compaction queues still have space in them. We try to re-compact these regions\n+  \/\/ in serial to avoid a premature OOM when the mutator wants to allocate the first\n+  \/\/ eden region after gc.\n+\n+  \/\/ For maximum compaction, we need to re-prepare all objects above the lowest\n+  \/\/ region among the current regions for all thread compaction points. It may\n+  \/\/ happen that due to the uneven distribution of objects to parallel threads, holes\n+  \/\/ have been created as threads compact to different target regions between the\n+  \/\/ lowest and the highest region in the tails of the compaction points.\n+\n+  uint start_serial = truncate_parallel_cps();\n+  if (start_serial >= _heap->max_reserved_regions()) {\n+    return;\n+  }\n+\n+  G1FullGCCompactionPoint* serial_cp = serial_compaction_point();\n+  assert(!serial_cp->is_initialized(), \"sanity!\");\n+\n+  HeapRegion* start_hr = _heap->region_at(start_serial);\n+  serial_cp->add(start_hr);\n+  serial_cp->initialize(start_hr);\n+\n+  HeapWord* dense_prefix_top = compaction_top(start_hr);\n+  G1SerialRePrepareClosure re_prepare(serial_cp, dense_prefix_top);\n@@ -365,12 +403,3 @@\n-  \/\/ Update the forwarding information for the regions in the serial\n-  \/\/ compaction point.\n-  G1FullGCCompactionPoint* cp = serial_compaction_point();\n-  for (GrowableArrayIterator<HeapRegion*> it = cp->regions()->begin(); it != cp->regions()->end(); ++it) {\n-    HeapRegion* current = *it;\n-    if (!cp->is_initialized()) {\n-      \/\/ Initialize the compaction point. Nothing more is needed for the first heap region\n-      \/\/ since it is already prepared for compaction.\n-      cp->initialize(current);\n-    } else {\n-      assert(!current->is_humongous(), \"Should be no humongous regions in compaction queue\");\n-      G1SerialRePrepareClosure re_prepare(cp, current);\n+  for (uint i = start_serial + 1; i < _heap->max_reserved_regions(); i++) {\n+    if (is_compaction_target(i)) {\n+      HeapRegion* current = _heap->region_at(i);\n@@ -378,0 +407,1 @@\n+      serial_cp->add(current);\n@@ -381,1 +411,1 @@\n-  cp->update();\n+  serial_cp->update();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":53,"deletions":23,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -140,0 +140,2 @@\n+  uint truncate_parallel_cps();\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,2 +119,13 @@\n-HeapRegion* G1FullGCCompactionPoint::remove_last() {\n-  return _compaction_regions->pop();\n+void G1FullGCCompactionPoint::remove_at_or_above(uint bottom) {\n+  HeapRegion* cur = current_region();\n+  assert(cur->hrm_index() >= bottom, \"Sanity!\");\n+\n+  int start_index = 0;\n+  for (HeapRegion* r : *_compaction_regions) {\n+    if (r->hrm_index() < bottom) {\n+      start_index++;\n+    }\n+  }\n+\n+  assert(start_index >= 0, \"Should have at least one region\");\n+  _compaction_regions->trunc_to(start_index);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.cpp","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-  HeapRegion* remove_last();\n+  void remove_at_or_above(uint bottom);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,1 +122,1 @@\n-  HeapRegion* _current;\n+  HeapWord* _dense_prefix_top;\n@@ -125,1 +125,1 @@\n-  G1SerialRePrepareClosure(G1FullGCCompactionPoint* hrcp, HeapRegion* hr) :\n+  G1SerialRePrepareClosure(G1FullGCCompactionPoint* hrcp, HeapWord* dense_prefix_top) :\n@@ -127,1 +127,1 @@\n-    _current(hr) { }\n+    _dense_prefix_top(dense_prefix_top) { }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,4 +113,6 @@\n-  \/\/ We only re-prepare objects forwarded within the current region, so\n-  \/\/ skip objects that are already forwarded to another region.\n-  if (obj->is_forwarded() && !_current->is_in(obj->forwardee())) {\n-    return obj->size();\n+  if (obj->is_forwarded()) {\n+    \/\/ We skip objects compiled into the first region or\n+    \/\/ into regions not part of the serial compaction point.\n+    if (cast_from_oop<HeapWord*>(obj->forwardee()) < _dense_prefix_top) {\n+      return obj->size();\n+    }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.inline.hpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+    _do_maximal_compaction(do_maximal_compaction),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCScope.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+  bool                    _do_maximal_compaction;\n@@ -71,0 +72,1 @@\n+  bool do_maximal_compaction() { return _do_maximal_compaction; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCScope.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}