{"files":[{"patch":"@@ -363,1 +363,1 @@\n-  uint lowest_current_hr = (uint)-1;\n+  uint lowest_current = (uint)-1;\n@@ -367,1 +367,1 @@\n-      lowest_current_hr = MIN2(lowest_current_hr, cp->current_region()->hrm_index());\n+      lowest_current = MIN2(lowest_current, cp->current_region()->hrm_index());\n@@ -371,1 +371,0 @@\n-  G1FullGCCompactionPoint* serial_cp = serial_compaction_point();\n@@ -375,1 +374,1 @@\n-      cp->move_regions_with_higher_hrm_index(serial_cp, lowest_current_hr);\n+      cp->remove_at_or_above(lowest_current);\n@@ -379,4 +378,7 @@\n-  \/\/ We use regions as compaction targets in the order they appear in the compaction\n-  \/\/ point. To get maximum compaction and reduce fragmentation, we sort the regions\n-  \/\/ by hrm_index so that we compact objects to one end of the heap.\n-  serial_cp->sort_regions();\n+  G1FullGCCompactionPoint* serial_cp = serial_compaction_point();\n+\n+  for (uint i = lowest_current; i < _heap->max_reserved_regions(); i++) {\n+    if (_region_attr_table.is_free(i) || _region_attr_table.is_compacting(i)) {\n+      serial_cp->add(_heap->region_at(i));\n+    }\n+  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -119,18 +119,1 @@\n-int G1FullGCCompactionPoint::compare(HeapRegion* const& hr, HeapRegion* const& e) {\n-  return compare(hr->hrm_index(), e->hrm_index());\n-}\n-\n-void G1FullGCCompactionPoint::sort_regions(){\n-  regions()->sort(compare_ptr);\n-}\n-\n-int G1FullGCCompactionPoint::find_sorted(HeapRegion* hr) {\n-  bool found = false;\n-  int pos = _compaction_regions->find_sorted<HeapRegion*, compare>(hr, found);\n-  if (found) {\n-    return pos;\n-  }\n-  return -1;\n-}\n-\n-void G1FullGCCompactionPoint::move_regions_with_higher_hrm_index(G1FullGCCompactionPoint* cp, uint bottom) {\n+void G1FullGCCompactionPoint::remove_at_or_above(uint bottom) {\n@@ -140,1 +123,1 @@\n-  HeapRegion* start = nullptr;\n+  int start_index = 0;\n@@ -142,5 +125,2 @@\n-    if (r->hrm_index() >= bottom) {\n-      cp->add(r);\n-      if (start == nullptr) {\n-        start = r;\n-      }\n+    if (r->hrm_index() < bottom) {\n+      start_index++;\n@@ -150,2 +130,1 @@\n-  int start_index = find_sorted(start);\n-  assert(start_index >= 0, \"Should have atleast one region\");\n+  assert(start_index >= 0, \"Should have at least one region\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.cpp","additions":5,"deletions":26,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -47,11 +47,0 @@\n-  static int compare(uint a, uint b) {\n-    return a > b ? 1 : (a < b) ? -1 : 0;\n-  }\n-\n-  static int compare_ptr(HeapRegion** hr1, HeapRegion** hr2) {\n-    return compare(*hr1, *hr2);\n-  }\n-\n-  static int compare(HeapRegion* const& hr, HeapRegion* const& e);\n-  int find_sorted(HeapRegion* hr);\n-\n@@ -69,2 +58,1 @@\n-  void move_regions_with_higher_hrm_index(G1FullGCCompactionPoint* cp, uint bottom);\n-  void sort_regions();\n+  void remove_at_or_above(uint bottom);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.hpp","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"}]}