{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -990,5 +990,1 @@\n-            byte[] buff = new byte[1024];\n-            int ret;\n-            while ((ret = stream.read(buff)) != -1) {\n-                data_chunk.write(buff, 0, ret);\n-            }\n+            stream.transferTo(data_chunk);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/DLSSoundbank.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,2 +63,0 @@\n-    private static final int BUFFER_SIZE = 16384; \/\/ number of bytes written each time to the source data line\n-\n@@ -362,13 +360,3 @@\n-        byte[] buffer = new byte[16384];\n-        int bytesRead = 0;\n-        int totalBytesRead = 0;\n-\n-        \/\/ this loop may throw an IOException\n-        while( true ) {\n-            bytesRead = as.read(buffer, 0, buffer.length);\n-            if (bytesRead <= 0) {\n-                as.close();\n-                break;\n-            }\n-            totalBytesRead += bytesRead;\n-            baos.write(buffer, 0, bytesRead);\n+        int totalBytesRead;\n+        try (as) {\n+            totalBytesRead = (int) as.transferTo(baos);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/JavaSoundAudioClip.java","additions":4,"deletions":16,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -204,5 +204,1 @@\n-                byte[] buff = new byte[1024];\n-                int ret;\n-                while ((ret = is.read(buff)) != -1) {\n-                    out.write(buff, 0, ret);\n-                }\n+                is.transferTo(out);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/ModelByteBuffer.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,0 @@\n-    private static final int bufferSize = 16384;  \/\/ buffersize for write\n@@ -120,5 +119,0 @@\n-        byte [] buffer = null;\n-\n-        int bytesRead = 0;\n-        long bytesWritten = 0;\n-\n@@ -130,6 +124,1 @@\n-        buffer = new byte[bufferSize];\n-\n-        while( (bytesRead = fileStream.read( buffer )) >= 0 ) {\n-            out.write( buffer, 0, bytesRead );\n-            bytesWritten += bytesRead;\n-        }\n+        long bytesWritten = fileStream.transferTo(out);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/StandardMidiFileWriter.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,5 +83,1 @@\n-            byte[] buff = new byte[1024];\n-            int len;\n-            while ((len = stream.read(buff, 0, buff.length)) != -1) {\n-                data_chunk.write(buff, 0, len);\n-            }\n+            stream.transferTo(data_chunk);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/WaveFloatFileWriter.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -2083,8 +2083,2 @@\n-                        BufferedInputStream in =\n-                            new BufferedInputStream(resource);\n-                        ByteArrayOutputStream out =\n-                            new ByteArrayOutputStream(1024);\n-                        byte[] buffer = new byte[1024];\n-                        int n;\n-                        while ((n = in.read(buffer)) > 0) {\n-                            out.write(buffer, 0, n);\n+                        try (BufferedInputStream in = new BufferedInputStream(resource)) {\n+                            return in.readAllBytes();\n@@ -2092,4 +2086,0 @@\n-                        in.close();\n-                        out.flush();\n-                        buffer = out.toByteArray();\n-                        return buffer;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicLookAndFeel.java","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,12 +96,1 @@\n-        byte[] buf;\n-        int count;\n-\n-        buf = new byte[16384];\n-\n-        while(true) {\n-            count = in.read(buf);\n-            if (count < 0)\n-                break;\n-\n-            this.write(buf, 0, count);\n-        }\n+        in.transferTo(this);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/rtf\/AbstractFilter.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1981,10 +1981,1 @@\n-        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n-            int len = 0;\n-            byte[] buf = new byte[8192];\n-\n-            while ((len = str.read(buf)) != -1) {\n-                baos.write(buf, 0, len);\n-            }\n-\n-            return baos.toByteArray();\n-        }\n+        return str.readAllBytes();\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/datatransfer\/DataTransferer.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,0 @@\n-import java.io.ByteArrayOutputStream;\n@@ -1757,8 +1756,2 @@\n-                try (BufferedInputStream in\n-                        = new BufferedInputStream(resource);\n-                        ByteArrayOutputStream out\n-                        = new ByteArrayOutputStream(1024)) {\n-                            byte[] buffer = new byte[1024];\n-                            int n;\n-                            while ((n = in.read(buffer)) > 0) {\n-                                out.write(buffer, 0, n);\n+                            try (BufferedInputStream in = new BufferedInputStream(resource)) {\n+                                return in.readAllBytes();\n@@ -1766,3 +1759,0 @@\n-                            out.flush();\n-                            return out.toByteArray();\n-                }\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/SwingUtilities2.java","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -599,12 +599,3 @@\n-            BufferedInputStream bin = new BufferedInputStream(instream);\n-            BufferedOutputStream bout = new BufferedOutputStream(output);\n-            byte[] buffer = new byte[1024];\n-            int bread = 0;\n-\n-            try {\n-                while ((bread = bin.read(buffer)) >= 0) {\n-                    bout.write(buffer, 0, bread);\n-                }\n-                bin.close();\n-                bout.flush();\n-                bout.close();\n+            try (BufferedInputStream bin = new BufferedInputStream(instream);\n+                 BufferedOutputStream bout = new BufferedOutputStream(output)) {\n+                bin.transferTo(bout);\n@@ -613,1 +604,1 @@\n-                throw new PrintException (e);\n+                throw new PrintException(e);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/print\/UnixPrintJob.java","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import java.io.BufferedOutputStream;\n@@ -32,3 +31,0 @@\n-import java.io.FileOutputStream;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n@@ -37,1 +33,0 @@\n-import java.io.FileNotFoundException;\n@@ -40,0 +35,3 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n@@ -45,1 +43,0 @@\n-import javax.print.DocPrintJob;\n@@ -53,1 +50,0 @@\n-import javax.print.attribute.AttributeSet;\n@@ -440,12 +436,1 @@\n-                    FileOutputStream fos = new FileOutputStream(mDestination);\n-                    byte []buffer = new byte[1024];\n-                    int cread;\n-\n-                    while ((cread = instream.read(buffer, 0, buffer.length)) >=0) {\n-                        fos.write(buffer, 0, cread);\n-                    }\n-                    fos.flush();\n-                    fos.close();\n-                } catch (FileNotFoundException fnfe) {\n-                    notifyEvent(PrintJobEvent.JOB_FAILED);\n-                    throw new PrintException(fnfe.toString());\n+                    Files.copy(instream, Path.of(mDestination), StandardCopyOption.REPLACE_EXISTING);\n","filename":"src\/java.desktop\/windows\/classes\/sun\/print\/Win32PrintJob.java","additions":5,"deletions":20,"binary":false,"changes":25,"status":"modified"}]}