{"files":[{"patch":"@@ -256,0 +256,1 @@\n+    public final boolean useStackBanging = getFlag(\"UseStackBanging\", Boolean.class, true, JDK < 17);\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.hotspot\/src\/org\/graalvm\/compiler\/hotspot\/GraalHotSpotVMConfig.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -133,31 +133,33 @@\n-        \/\/ Each code entry causes one stack bang n pages down the stack where n\n-        \/\/ is configurable by StackShadowPages. The setting depends on the maximum\n-        \/\/ depth of VM call stack or native before going back into java code,\n-        \/\/ since only java code can raise a stack overflow exception using the\n-        \/\/ stack banging mechanism. The VM and native code does not detect stack\n-        \/\/ overflow.\n-        \/\/ The code in JavaCalls::call() checks that there is at least n pages\n-        \/\/ available, so all entry code needs to do is bang once for the end of\n-        \/\/ this shadow zone.\n-        \/\/ The entry code may need to bang additional pages if the framesize\n-        \/\/ is greater than a page.\n-\n-        int pageSize = config.vmPageSize;\n-        int bangEnd = NumUtil.roundUp(config.stackShadowPages * 4 * K, pageSize);\n-\n-        \/\/ This is how far the previous frame's stack banging extended.\n-        int bangEndSafe = bangEnd;\n-\n-        int frameSize = Math.max(crb.frameMap.frameSize(), crb.compilationResult.getMaxInterpreterFrameSize());\n-        if (frameSize > pageSize) {\n-            bangEnd += frameSize;\n-        }\n-\n-        int bangOffset = bangEndSafe;\n-        if (bangOffset <= bangEnd) {\n-            crb.blockComment(\"[stack overflow check]\");\n-        }\n-        while (bangOffset <= bangEnd) {\n-            \/\/ Need at least one stack bang at end of shadow zone.\n-            bangStackWithOffset(crb, bangOffset);\n-            bangOffset += pageSize;\n+        if (config.useStackBanging) {\n+            \/\/ Each code entry causes one stack bang n pages down the stack where n\n+            \/\/ is configurable by StackShadowPages. The setting depends on the maximum\n+            \/\/ depth of VM call stack or native before going back into java code,\n+            \/\/ since only java code can raise a stack overflow exception using the\n+            \/\/ stack banging mechanism. The VM and native code does not detect stack\n+            \/\/ overflow.\n+            \/\/ The code in JavaCalls::call() checks that there is at least n pages\n+            \/\/ available, so all entry code needs to do is bang once for the end of\n+            \/\/ this shadow zone.\n+            \/\/ The entry code may need to bang additional pages if the framesize\n+            \/\/ is greater than a page.\n+\n+            int pageSize = config.vmPageSize;\n+            int bangEnd = NumUtil.roundUp(config.stackShadowPages * 4 * K, pageSize);\n+\n+            \/\/ This is how far the previous frame's stack banging extended.\n+            int bangEndSafe = bangEnd;\n+\n+            int frameSize = Math.max(crb.frameMap.frameSize(), crb.compilationResult.getMaxInterpreterFrameSize());\n+            if (frameSize > pageSize) {\n+                bangEnd += frameSize;\n+            }\n+\n+            int bangOffset = bangEndSafe;\n+            if (bangOffset <= bangEnd) {\n+                crb.blockComment(\"[stack overflow check]\");\n+            }\n+            while (bangOffset <= bangEnd) {\n+                \/\/ Need at least one stack bang at end of shadow zone.\n+                bangStackWithOffset(crb, bangOffset);\n+                bangOffset += pageSize;\n+            }\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.hotspot\/src\/org\/graalvm\/compiler\/hotspot\/HotSpotHostBackend.java","additions":34,"deletions":32,"binary":false,"changes":66,"status":"modified"}]}