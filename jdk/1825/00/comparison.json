{"files":[{"patch":"@@ -369,14 +369,0 @@\n-\/\/ On Posix platforms, reservations are done using mmap which can be released in parts. So splitting is a no-op.\n-void os::split_reserved_memory(char *base, size_t size, size_t split) {\n-  char* const split_address = base + split;\n-  assert(size > 0, \"Sanity\");\n-  assert(size > split, \"Sanity\");\n-  assert(split > 0, \"Sanity\");\n-  assert(is_aligned(base, os::vm_allocation_granularity()), \"Sanity\");\n-  assert(is_aligned(split_address, os::vm_allocation_granularity()), \"Sanity\");\n-\n-  \/\/ NMT: tell NMT to track both parts individually from now on.\n-  MemTracker::record_virtual_memory_split_reserved(base, size, split);\n-\n-}\n-\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -3196,28 +3196,0 @@\n-\/\/ On win32, one cannot release just a part of reserved memory, it's an\n-\/\/ all or nothing deal.  When we split a reservation, we must break the\n-\/\/ reservation into two reservations.\n-void os::split_reserved_memory(char *base, size_t size, size_t split) {\n-\n-  char* const split_address = base + split;\n-  assert(size > 0, \"Sanity\");\n-  assert(size > split, \"Sanity\");\n-  assert(split > 0, \"Sanity\");\n-  assert(is_aligned(base, os::vm_allocation_granularity()), \"Sanity\");\n-  assert(is_aligned(split_address, os::vm_allocation_granularity()), \"Sanity\");\n-\n-  const bool rc = release_memory(base, size) &&\n-                  (attempt_reserve_memory_at(base, split) != NULL) &&\n-                  (attempt_reserve_memory_at(split_address, size - split) != NULL);\n-  if (!rc) {\n-    log_warning(os)(\"os::split_reserved_memory failed for \" RANGE_FORMAT,\n-                    RANGE_FORMAT_ARGS(base, size));\n-    os::print_memory_mappings(base, size, tty);\n-    assert(false, \"os::split_reserved_memory failed for \" RANGE_FORMAT,\n-                    RANGE_FORMAT_ARGS(base, size));\n-  }\n-\n-  \/\/ NMT: nothing to do here. Since Windows implements the split by\n-  \/\/  releasing and re-reserving memory, the parts are already registered\n-  \/\/  as individual mappings with NMT.\n-}\n-\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1671,2 +1671,1 @@\n-                                                 (size_t)os::vm_allocation_granularity(),\n-                                                 \/*split=*\/false);\n+                                                 (size_t)os::vm_allocation_granularity());\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -255,1 +255,1 @@\n-ReservedSpace ReservedSpace::first_part(size_t partition_size, size_t alignment, bool split) {\n+ReservedSpace ReservedSpace::first_part(size_t partition_size, size_t alignment) {\n@@ -257,5 +257,1 @@\n-  if (split && partition_size > 0 && partition_size < size()) {\n-    os::split_reserved_memory(base(), size(), partition_size);\n-  }\n-  ReservedSpace result(base(), partition_size, alignment, special(),\n-                       executable());\n+  ReservedSpace result(base(), partition_size, alignment, special(), executable());\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -79,7 +79,1 @@\n-  \/\/ If split==true, the resulting two spaces can be released independently from each other.\n-  \/\/  This may cause the original space to loose its content.\n-  \/\/  They also will be tracked individually by NMT and can be tagged with different flags.\n-  \/\/  Note that this may cause the original space to loose its content.\n-  \/\/ If split==false, the resulting space will be just a hotspot-internal representation\n-  \/\/  of a sub section of the underlying mapping.\n-  ReservedSpace first_part(size_t partition_size, size_t alignment, bool split = false);\n+  ReservedSpace first_part(size_t partition_size, size_t alignment);\n@@ -89,1 +83,1 @@\n-  inline ReservedSpace first_part(size_t partition_size, bool split = false);\n+  inline ReservedSpace first_part(size_t partition_size\/*, bool split = false*\/);\n@@ -104,1 +98,1 @@\n-ReservedSpace::first_part(size_t partition_size, bool split)\n+ReservedSpace::first_part(size_t partition_size)\n@@ -106,1 +100,1 @@\n-  return first_part(partition_size, alignment(), split);\n+  return first_part(partition_size, alignment());\n","filename":"src\/hotspot\/share\/memory\/virtualspace.hpp","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -339,10 +339,0 @@\n-  \/\/ Split a reserved memory region [base, base+size) into two regions [base, base+split) and\n-  \/\/  [base+split, base+size).\n-  \/\/  This may remove the original mapping, so its content may be lost.\n-  \/\/ Both base and split point must be aligned to allocation granularity; split point shall\n-  \/\/  be >0 and <size.\n-  \/\/ Splitting guarantees that the resulting two memory regions can be released independently\n-  \/\/  from each other using os::release_memory(). It also means NMT will track these regions\n-  \/\/  individually, allowing different tags to be set.\n-  static void   split_reserved_memory(char *base, size_t size, size_t split);\n-\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"}]}