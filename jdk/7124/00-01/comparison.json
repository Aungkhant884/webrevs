{"files":[{"patch":"@@ -218,9 +218,0 @@\n-\/\/ Only used by oldgen allocation.\n-bool MutableSpace::needs_expand(size_t word_size) const {\n-  assert_lock_strong(ParallelExpandHeap_lock);\n-  \/\/ Holding the lock means end is stable.  So while top may be advancing\n-  \/\/ via concurrent allocations, there is no need to order the reads of top\n-  \/\/ and end here, unlike in cas_allocate.\n-  return pointer_delta(end(), top()) < word_size;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -145,5 +145,0 @@\n-  \/\/ Return true if this space needs to be expanded in order to satisfy an\n-  \/\/ allocation request of the indicated size.  Concurrent allocations and\n-  \/\/ resizes may change the result of a later call.  Used by oldgen allocator.\n-  \/\/ precondition: holding ParallelExpandHeap_lock\n-  bool needs_expand(size_t word_size) const;\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,1 +43,2 @@\n-  _max_gen_size(max_size)\n+  _max_gen_size(max_size),\n+  _Expand_lock(Heap_lock->rank()-1, \"PSOldGenExpand_lock\", true)\n@@ -166,1 +167,1 @@\n-    MutexLocker x(ParallelExpandHeap_lock);\n+    MutexLocker x(&_Expand_lock);\n@@ -173,1 +174,3 @@\n-    if (object_space()->needs_expand(word_size)) {\n+    bool needs_expand =\n+      pointer_delta(object_space()->end(), object_space()->top()) < word_size;\n+    if (needs_expand) {\n@@ -184,1 +187,1 @@\n-  assert_lock_strong(ParallelExpandHeap_lock);\n+  assert_lock_strong(&_Expand_lock);\n@@ -222,1 +225,1 @@\n-  assert_lock_strong(ParallelExpandHeap_lock);\n+  assert_lock_strong(&_Expand_lock);\n@@ -258,1 +261,1 @@\n-  assert_lock_strong(ParallelExpandHeap_lock);\n+  assert_lock_strong(&_Expand_lock);\n@@ -271,1 +274,1 @@\n-  assert_lock_strong(ParallelExpandHeap_lock);\n+  assert_lock_strong(&_Expand_lock);\n@@ -276,1 +279,1 @@\n-    assert_lock_strong(ParallelExpandHeap_lock);\n+    assert_lock_strong(&_Expand_lock);\n@@ -315,1 +318,1 @@\n-    MutexLocker x(ParallelExpandHeap_lock);\n+    MutexLocker x(&_Expand_lock);\n@@ -319,1 +322,1 @@\n-    MutexLocker x(ParallelExpandHeap_lock);\n+    MutexLocker x(&_Expand_lock);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -50,0 +50,2 @@\n+  PaddedMutex _Expand_lock;\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,3 +57,0 @@\n-#ifdef INCLUDE_PARALLELGC\n-Mutex*   ParallelExpandHeap_lock      = NULL;\n-#endif\n@@ -366,5 +363,0 @@\n-#ifdef INCLUDE_PARALLELGC\n-  if (UseParallelGC) {\n-    defl(ParallelExpandHeap_lock   , PaddedMutex , Heap_lock, true);\n-  }\n-#endif\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -49,3 +49,0 @@\n-#ifdef INCLUDE_PARALLELGC\n-extern Mutex*   ParallelExpandHeap_lock;         \/\/ a lock on expanding the heap\n-#endif\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}