{"files":[{"patch":"@@ -218,0 +218,9 @@\n+\/\/ Only used by oldgen allocation.\n+bool MutableSpace::needs_expand(size_t word_size) const {\n+  assert_lock_strong(PSOldGenExpand_lock);\n+  \/\/ Holding the lock means end is stable.  So while top may be advancing\n+  \/\/ via concurrent allocations, there is no need to order the reads of top\n+  \/\/ and end here, unlike in cas_allocate.\n+  return pointer_delta(end(), top()) < word_size;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -145,0 +145,5 @@\n+  \/\/ Return true if this space needs to be expanded in order to satisfy an\n+  \/\/ allocation request of the indicated size.  Concurrent allocations and\n+  \/\/ resizes may change the result of a later call.  Used by oldgen allocator.\n+  \/\/ precondition: holding PSOldGenExpand_lock\n+  bool needs_expand(size_t word_size) const;\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,6 +43,1 @@\n-  _max_gen_size(max_size),\n-#ifdef ASSERT\n-  _expand_lock(Heap_lock->rank()-1, \"PSOldGenExpand_lock\", true)\n-#else\n-  _expand_lock(Mutex::safepoint, \"PSOldGenExpand_lock\", true)\n-#endif\n+  _max_gen_size(max_size)\n@@ -171,1 +166,1 @@\n-    MutexLocker x(&_expand_lock);\n+    MutexLocker x(PSOldGenExpand_lock);\n@@ -178,3 +173,1 @@\n-    bool needs_expand =\n-      pointer_delta(object_space()->end(), object_space()->top()) < word_size;\n-    if (needs_expand) {\n+    if (object_space()->needs_expand(word_size)) {\n@@ -191,1 +184,1 @@\n-  assert_lock_strong(&_expand_lock);\n+  assert_lock_strong(PSOldGenExpand_lock);\n@@ -229,1 +222,1 @@\n-  assert_lock_strong(&_expand_lock);\n+  assert_lock_strong(PSOldGenExpand_lock);\n@@ -265,1 +258,1 @@\n-  assert_lock_strong(&_expand_lock);\n+  assert_lock_strong(PSOldGenExpand_lock);\n@@ -278,1 +271,1 @@\n-  assert_lock_strong(&_expand_lock);\n+  assert_lock_strong(PSOldGenExpand_lock);\n@@ -283,1 +276,0 @@\n-    assert_lock_strong(&_expand_lock);\n@@ -322,1 +314,1 @@\n-    MutexLocker x(&_expand_lock);\n+    MutexLocker x(PSOldGenExpand_lock);\n@@ -326,1 +318,1 @@\n-    MutexLocker x(&_expand_lock);\n+    MutexLocker x(PSOldGenExpand_lock);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -50,2 +50,0 @@\n-  PaddedMutex _expand_lock;\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,0 +57,3 @@\n+#ifdef INCLUDE_PARALLELGC\n+Mutex*   PSOldGenExpand_lock      = NULL;\n+#endif\n@@ -363,0 +366,5 @@\n+#ifdef INCLUDE_PARALLELGC\n+  if (UseParallelGC) {\n+    defl(PSOldGenExpand_lock   , PaddedMutex , Heap_lock, true);\n+  }\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -49,0 +49,3 @@\n+#ifdef INCLUDE_PARALLELGC\n+extern Mutex*   PSOldGenExpand_lock;         \/\/ a lock on expanding the heap\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}