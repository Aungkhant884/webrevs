{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,2 @@\n-    native static void getReady();\n-    native static int check();\n+    native static void getReady(Thread thread);\n+    native static int check(Thread thread);\n@@ -54,1 +54,7 @@\n-        getReady();\n+        Thread otherTread = new Thread(() -> {\n+            new TestClass2().run();\n+        });\n+\n+        getReady(Thread.currentThread());\n+\n+        \/\/ should generate the events\n@@ -56,1 +62,9 @@\n-        return check();\n+\n+        \/\/ loading classes on other thread should not generate the events\n+        otherTread.start();\n+        try {\n+            otherTread.join();\n+        } catch (InterruptedException e) {\n+        }\n+\n+        return check(Thread.currentThread());\n@@ -59,1 +73,1 @@\n-    static interface TestInterface {\n+    interface TestInterface {\n@@ -74,0 +88,9 @@\n+\n+    interface TestInterface2 {\n+        void run();\n+    }\n+\n+    static class TestClass2 implements TestInterface2 {\n+        public void run() {\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/ClassPrepare\/classprep001.java","additions":29,"deletions":6,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,6 @@\n+\/\/ These classes are loaded on a different thread.\n+\/\/ We should not get ClassPrepare events for them.\n+static const class_info unexpectedClasses[] = {\n+    { \"Lnsk\/jvmti\/ClassPrepare\/classprep001$TestInterface2;\", 0, 0, 0, 0 },\n+    { \"Lnsk\/jvmti\/ClassPrepare\/classprep001$TestClass2;\", 0, 0, 0, 0}\n+};\n@@ -90,0 +96,11 @@\n+const size_t NOT_FOUND = (size_t)(-1);\n+\n+size_t findClass(const char *classSig, const class_info *arr, int size) {\n+    for (int i = 0; i < size; i++) {\n+        if (strcmp(classSig, arr[i].sig) == 0) {\n+            return i;\n+        }\n+    }\n+    return NOT_FOUND;\n+}\n+\n@@ -191,4 +208,9 @@\n-    if (eventsCount >= eventsExpected) {\n-        printf(\"(#%\" PRIuPTR \") too many events: %\" PRIuPTR \", expected: %\" PRIuPTR \"\\n\",\n-               eventsCount, eventsCount + 1, eventsExpected);\n-        result = STATUS_FAILED;\n+    size_t expectedClassIdx = findClass(inf.sig, classes, sizeof(classes)\/sizeof(class_info));\n+    \/\/ Test classes loading may cause system classes loading - skip them.\n+    if (expectedClassIdx == NOT_FOUND) {\n+        size_t unexpectedClassIdx = findClass(inf.sig, unexpectedClasses,\n+                                              sizeof(unexpectedClasses)\/sizeof(class_info));\n+        if (unexpectedClassIdx != NOT_FOUND) {\n+            printf(\"# wrong class: \\\"%s\\\"\\n\", inf.sig);\n+            result = STATUS_FAILED;\n+        }\n@@ -198,4 +220,3 @@\n-    if (inf.sig == NULL || strcmp(inf.sig, classes[eventsCount].sig) != 0) {\n-        printf(\"(#%\" PRIuPTR \") wrong class: \\\"%s\\\"\",\n-               eventsCount, inf.sig);\n-        printf(\", expected: \\\"%s\\\"\\n\", classes[eventsCount].sig);\n+    if (eventsCount != expectedClassIdx) {\n+        printf(\"(#%\" PRIuPTR \") unexpected order: %\" PRIuPTR \", expected: %\" PRIuPTR \"\\n\",\n+               eventsCount, expectedClassIdx, eventsCount);\n@@ -203,0 +224,1 @@\n+        return;\n@@ -204,0 +226,1 @@\n+\n@@ -269,1 +292,1 @@\n-Java_nsk_jvmti_ClassPrepare_classprep001_getReady(JNIEnv *env, jclass cls) {\n+Java_nsk_jvmti_ClassPrepare_classprep001_getReady(JNIEnv *env, jclass cls, jthread thread) {\n@@ -271,1 +294,0 @@\n-    jthread prep_thread;\n@@ -278,7 +300,0 @@\n-    err = jvmti->GetCurrentThread(&prep_thread);\n-    if (err != JVMTI_ERROR_NONE) {\n-        printf(\"Failed to get current thread: %s (%d)\\n\", TranslateError(err), err);\n-        result = STATUS_FAILED;\n-        return;\n-    }\n-\n@@ -286,1 +301,1 @@\n-            JVMTI_EVENT_CLASS_PREPARE, prep_thread);\n+            JVMTI_EVENT_CLASS_PREPARE, thread);\n@@ -297,1 +312,1 @@\n-Java_nsk_jvmti_ClassPrepare_classprep001_check(JNIEnv *env, jclass cls) {\n+Java_nsk_jvmti_ClassPrepare_classprep001_check(JNIEnv *env, jclass cls, jthread thread) {\n@@ -299,1 +314,0 @@\n-    jthread prep_thread;\n@@ -306,6 +320,0 @@\n-    err = jvmti->GetCurrentThread(&prep_thread);\n-    if (err != JVMTI_ERROR_NONE) {\n-        printf(\"Failed to get current thread: %s (%d)\\n\", TranslateError(err), err);\n-        return STATUS_FAILED;\n-    }\n-\n@@ -313,1 +321,1 @@\n-            JVMTI_EVENT_CLASS_PREPARE, prep_thread);\n+            JVMTI_EVENT_CLASS_PREPARE, thread);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/ClassPrepare\/classprep001\/classprep001.cpp","additions":36,"deletions":28,"binary":false,"changes":64,"status":"modified"}]}