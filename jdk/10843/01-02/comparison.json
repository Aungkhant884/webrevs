{"files":[{"patch":"@@ -42,1 +42,1 @@\n-    boolean isCaseInsensitiveAndRetentive() {\n+    boolean isCaseInsensitiveAndPreserving() {\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/MacOSXFileSystem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-    boolean isCaseInsensitiveAndRetentive() {\n+    boolean isCaseInsensitiveAndPreserving() {\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -871,1 +871,1 @@\n-        if (!fs.isCaseInsensitiveAndRetentive())\n+        if (!fs.isCaseInsensitiveAndPreserving())\n@@ -882,1 +882,1 @@\n-            UnixPath elt = result.getName(i);\n+            UnixPath element = result.getName(i);\n@@ -885,2 +885,2 @@\n-            if (elt.toString().equals(\"..\")) {\n-                path = path.resolve(elt);\n+            if (element.toString().equals(\"..\")) {\n+                path = path.resolve(element);\n@@ -891,3 +891,1 @@\n-            UnixPath eltPath = path.resolve(elt);\n-            if (sm != null)\n-                sm.checkRead(eltPath.getPathForPermissionCheck());\n+            UnixPath elementPath = path.resolve(element);\n@@ -898,1 +896,1 @@\n-                attrs = UnixFileAttributes.get(eltPath, false);\n+                attrs = UnixFileAttributes.get(elementPath, false);\n@@ -902,17 +900,1 @@\n-            final UnixFileKey eltKey = attrs.fileKey();\n-\n-            \/\/ Check readbility of path thus far\n-            if (sm != null)\n-                sm.checkRead(path.getPathForPermissionCheck());\n-\n-            \/\/ Filter entries whose UnixFileKey equals 'eltKey'\n-            DirectoryStream.Filter<Path> filter = (p) -> {\n-                UnixFileAttributes attributes = null;\n-                try {\n-                    attributes = UnixFileAttributes.get(toUnixPath(p), false);\n-                } catch (UnixException x) {\n-                    x.rethrowAsIOException(this);\n-                }\n-                UnixFileKey key = attributes.fileKey();\n-                return key.equals(eltKey);\n-            };\n+            final UnixFileKey elementKey = attrs.fileKey();\n@@ -923,0 +905,1 @@\n+            DirectoryStream.Filter<Path> filter = (p) -> { return true; };\n@@ -927,3 +910,13 @@\n-                    path = path.resolve(entry.getFileName());\n-                    found = true;\n-                    break;\n+                    UnixPath p = path.resolve(entry.getFileName());\n+                    UnixFileAttributes attributes = null;\n+                    try {\n+                        attributes = UnixFileAttributes.get(p, false);\n+                        UnixFileKey key = attributes.fileKey();\n+                        if (key.equals(elementKey)) {\n+                            path = path.resolve(entry);\n+                            found = true;\n+                            break;\n+                        }\n+                    } catch (UnixException ignore) {\n+                        continue;\n+                    }\n@@ -932,1 +925,1 @@\n-                \/\/ Fallback which should never happen\n+                \/\/ Fallback which should in theory never happen\n@@ -934,1 +927,1 @@\n-                    path = path.resolve(elt);\n+                    path = path.resolve(element);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixPath.java","additions":23,"deletions":30,"binary":false,"changes":53,"status":"modified"}]}