{"files":[{"patch":"@@ -33,2 +33,0 @@\n-import java.util.function.Predicate;\n-import java.util.stream.Stream;\n@@ -816,0 +814,1 @@\n+    @SuppressWarnings(\"removal\")\n@@ -834,1 +833,1 @@\n-        for (int i=0; i<absolute.getNameCount(); i++) {\n+        for (int i = 0; i < absolute.getNameCount(); i++) {\n@@ -864,1 +863,1 @@\n-        \/\/ check file exists (without following links)\n+        \/\/ check whether file exists (without following links)\n@@ -877,0 +876,2 @@\n+        SecurityManager sm = System.getSecurityManager();\n+\n@@ -879,1 +880,1 @@\n-        \/\/ entry in the same directory to which it is equal ignoring case\n+        \/\/ entry in the same directory which has an equal key\n@@ -882,1 +883,0 @@\n-            String els = elt.toString();\n@@ -885,1 +885,1 @@\n-            if (els.equals(\"..\")) {\n+            if (elt.toString().equals(\"..\")) {\n@@ -890,0 +890,30 @@\n+            \/\/ Derive full path to element and check readability\n+            UnixPath eltPath = path.resolve(elt);\n+            if (sm != null)\n+                sm.checkRead(eltPath.getPathForPermissionCheck());\n+\n+            \/\/ Derive element key\n+            UnixFileAttributes attrs = null;\n+            try {\n+                attrs = UnixFileAttributes.get(eltPath, false);\n+            } catch (UnixException x) {\n+                x.rethrowAsIOException(result);\n+            }\n+            final UnixFileKey eltKey = attrs.fileKey();\n+\n+            \/\/ Check readbility of path thus far\n+            if (sm != null)\n+                sm.checkRead(path.getPathForPermissionCheck());\n+\n+            \/\/ Filter entries whose UnixFileKey equals 'eltKey'\n+            DirectoryStream.Filter<Path> filter = (p) -> {\n+                UnixFileAttributes attributes = null;\n+                try {\n+                    attributes = UnixFileAttributes.get(toUnixPath(p), false);\n+                } catch (UnixException x) {\n+                    x.rethrowAsIOException(this);\n+                }\n+                UnixFileKey key = attributes.fileKey();\n+                return key.equals(eltKey);\n+            };\n+\n@@ -892,8 +922,14 @@\n-            \/\/ name is equal ignoring case to the name of the current element\n-            try (Stream<Path> entries = Files.list(path)) {\n-                Predicate<Path> predicate =\n-                    (f) -> f.getFileName().toString().equalsIgnoreCase(els);\n-                Optional<Path> op = entries.filter(predicate).findFirst();\n-\n-                \/\/ Use entry if found, otherwise use the current element\n-                path = path.resolve(op.isPresent() ? op.get() : elt);\n+            \/\/ key is equal to the key of the current element\n+            try (DirectoryStream<Path> entries =\n+                getFileSystem().provider().newDirectoryStream(path, filter)) {\n+                boolean found = false;\n+                for (Path entry : entries) {\n+                    path = path.resolve(entry.getFileName());\n+                    found = true;\n+                    break;\n+                }\n+\n+                \/\/ Fallback which should never happen\n+                if (!found) {\n+                    path = path.resolve(elt);\n+                }\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixPath.java","additions":51,"deletions":15,"binary":false,"changes":66,"status":"modified"}]}