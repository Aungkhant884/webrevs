{"files":[{"patch":"@@ -4444,8 +4444,0 @@\n-\/\/ Parse diagnostic NMT switch \"MallocLimit\" and return the found limits.\n-\/\/ 1) If option is not given, it will set all limits to 0 (aka \"no limit\").\n-\/\/ 2) If option is given in the global form (-XX:MallocLimit=<size>), it\n-\/\/    will return the size in *total_limit.\n-\/\/ 3) If option is given in its per-NMT-category form (-XX:MallocLimit=<category>:<size>[,<category>:<size>]),\n-\/\/    it will return all found limits in the limits array.\n-\/\/ 4) If option is malformed, it will exit the VM.\n-\/\/ For (2) and (3), limits not affected by the switch will be set to 0.\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1369,2 +1369,3 @@\n-          \"Limit malloc allocation size from hotspot (requires NMT). \"      \\\n-          \"Reaching the limit will trigger a fatal error.\"                  \\\n+          \"Limit malloc allocation size from VM. Reaching the limit will \"  \\\n+          \"trigger a fatal error. This feature requires \"                   \\\n+          \"NativeMemoryTracking=summary or NativeMemoryTracking=detail.\"    \\\n@@ -1373,1 +1374,1 @@\n-          \"- MallocLimit=<NMT category>:<size>[,<NMT category>:<size>...] \"  \\\n+          \"- MallocLimit=<NMT category>:<size>[,<NMT category>:<size>...] \" \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -105,1 +105,3 @@\n-    log_info(nmt)(\"MallocLimit: total limit: \" SIZE_FORMAT, _total_limit);\n+    log_info(nmt)(\"MallocLimit: total limit: \" SIZE_FORMAT \"%s\",\n+                  byte_size_in_proper_unit(_total_limit),\n+                  proper_unit_for_byte_size(_total_limit));\n@@ -108,3 +110,6 @@\n-      if (_limits_per_category[i] > 0) {\n-        log_info(nmt)(\"MallocLimit: category \\\"%s\\\" limit: \" SIZE_FORMAT,\n-                      NMTUtil::flag_to_name((MEMFLAGS)i), _limits_per_category[i]);\n+      size_t catlim = _limits_per_category[i];\n+      if (catlim > 0) {\n+        log_info(nmt)(\"MallocLimit: category \\\"%s\\\" limit: \" SIZE_FORMAT \"%s\",\n+                      NMTUtil::flag_to_name((MEMFLAGS)i),\n+                      byte_size_in_proper_unit(catlim),\n+                      proper_unit_for_byte_size(catlim));\n@@ -119,3 +124,2 @@\n-    guarantee(false,\n-              \"MallocLimit: reached limit (size: \" SIZE_FORMAT \", limit: \" SIZE_FORMAT \") \",\n-              size, limit);\n+    fatal(\"MallocLimit: reached limit (size: \" SIZE_FORMAT \", limit: \" SIZE_FORMAT \") \",\n+          size, limit);\n@@ -128,3 +132,2 @@\n-    guarantee(false,\n-              \"MallocLimit: category \\\"%s\\\" reached limit (size: \" SIZE_FORMAT \", limit: \" SIZE_FORMAT \") \",\n-              NMTUtil::flag_to_name(flag), size, limit);\n+    fatal(\"MallocLimit: category \\\"%s\\\" reached limit (size: \" SIZE_FORMAT \", limit: \" SIZE_FORMAT \") \",\n+          NMTUtil::flag_to_name(flag), size, limit);\n","filename":"src\/hotspot\/share\/services\/mallocTracker.cpp","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -90,3 +90,0 @@\n-\/\/ Given a string, return associated flag. mtNone if name is invalid.\n-\/\/ String can be either the human readable name or the\n-\/\/ stringified enum (with or without leading \"mt\"). In all cases, case is ignored.\n","filename":"src\/hotspot\/share\/services\/nmtCommon.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @test id=global_limit\n+ * @test id=global-limit\n@@ -31,1 +31,1 @@\n- * @run driver MallocLimitTest global_limit\n+ * @run driver MallocLimitTest global-limit\n@@ -35,1 +35,1 @@\n- * @test id=compiler_limit\n+ * @test id=compiler-limit\n@@ -39,1 +39,1 @@\n- * @run driver MallocLimitTest compiler_limit\n+ * @run driver MallocLimitTest compiler-limit\n@@ -43,1 +43,1 @@\n- * @test id=test_multi_limit\n+ * @test id=multi-limit\n@@ -47,1 +47,1 @@\n- * @run driver MallocLimitTest multi_limit\n+ * @run driver MallocLimitTest multi-limit\n@@ -51,1 +51,1 @@\n- * @test id=test_valid_settings\n+ * @test id=valid-settings\n@@ -55,1 +55,1 @@\n- * @run driver MallocLimitTest valid_settings\n+ * @run driver MallocLimitTest valid-settings\n@@ -59,1 +59,1 @@\n- * @test id=test_invalid_settings\n+ * @test id=invalid-settings\n@@ -63,1 +63,1 @@\n- * @run driver MallocLimitTest invalid_settings\n+ * @run driver MallocLimitTest invalid-settings\n@@ -67,1 +67,1 @@\n- * @test id=test_limit_without_nmt\n+ * @test id=limit-without-nmt\n@@ -71,1 +71,1 @@\n- * @run driver MallocLimitTest limit_without_nmt\n+ * @run driver MallocLimitTest limit-without-nmt\n@@ -80,0 +80,1 @@\n+import java.util.ArrayList;\n@@ -81,1 +82,1 @@\n-import java.util.stream.Stream;\n+import java.util.List;\n@@ -85,1 +86,1 @@\n-    private static ProcessBuilder processBuilderWithSetting(String... extra_settings) {\n+    private static ProcessBuilder processBuilderWithSetting(String... extraSettings) {\n@@ -92,1 +93,1 @@\n-        args.addAll(Arrays.asList(extra_settings));\n+        args.addAll(Arrays.asList(extraSettings));\n@@ -98,3 +99,3 @@\n-    private static void test_global_limit() throws IOException {\n-        long small_memory_size = 1024*1024; \/\/ 1m\n-        ProcessBuilder pb = processBuilderWithSetting(\"-XX:MallocLimit=\" + small_memory_size);\n+    private static void testGlobalLimit() throws IOException {\n+        long smallMemorySize = 1024*1024; \/\/ 1m\n+        ProcessBuilder pb = processBuilderWithSetting(\"-XX:MallocLimit=\" + smallMemorySize);\n@@ -102,1 +103,0 @@\n-        output.reportDiagnosticSummary();\n@@ -104,2 +104,2 @@\n-        output.shouldContain(\"[nmt] MallocLimit: total limit: \" + small_memory_size);\n-        String s = output.firstMatch(\".*MallocLimit: reached limit \\\\(size: (\\\\d+), limit: \" + small_memory_size + \"\\\\).*\", 1);\n+        output.shouldContain(\"[nmt] MallocLimit: total limit: 1024K\"); \/\/ printed by byte_size_in_proper_unit()\n+        String s = output.firstMatch(\".*MallocLimit: reached limit \\\\(size: (\\\\d+), limit: \" + smallMemorySize + \"\\\\).*\", 1);\n@@ -108,1 +108,1 @@\n-        Asserts.assertGreaterThan(size, small_memory_size);\n+        Asserts.assertGreaterThan(size, smallMemorySize);\n@@ -111,1 +111,1 @@\n-    private static void test_compiler_limit() throws IOException {\n+    private static void testCompilerLimit() throws IOException {\n@@ -117,2 +117,2 @@\n-        long small_memory_size = 1024*1024; \/\/ 1m\n-        ProcessBuilder pb = processBuilderWithSetting(\"-XX:MallocLimit=compiler:\" + small_memory_size,\n+        long smallMemorySize = 1024*1024; \/\/ 1m\n+        ProcessBuilder pb = processBuilderWithSetting(\"-XX:MallocLimit=compiler:\" + smallMemorySize,\n@@ -122,1 +122,0 @@\n-        output.reportDiagnosticSummary();\n@@ -124,2 +123,2 @@\n-        output.shouldContain(\"[nmt] MallocLimit: category \\\"Compiler\\\" limit: \" + small_memory_size);\n-        String s = output.firstMatch(\".*MallocLimit: category \\\"Compiler\\\" reached limit \\\\(size: (\\\\d+), limit: \" + small_memory_size + \"\\\\).*\", 1);\n+        output.shouldContain(\"[nmt] MallocLimit: category \\\"Compiler\\\" limit: 1024K\"); \/\/ printed by byte_size_in_proper_unit\n+        String s = output.firstMatch(\".*MallocLimit: category \\\"Compiler\\\" reached limit \\\\(size: (\\\\d+), limit: \" + smallMemorySize + \"\\\\).*\", 1);\n@@ -129,1 +128,1 @@\n-        Asserts.assertGreaterThan(size, small_memory_size);\n+        Asserts.assertGreaterThan(size, smallMemorySize);\n@@ -132,3 +131,3 @@\n-    private static void test_multi_limit() throws IOException {\n-        long small_memory_size = 1024; \/\/ 1k\n-        ProcessBuilder pb = processBuilderWithSetting(\"-XX:MallocLimit=mtOther:2g,compiler:1g,internal:\" + small_memory_size);\n+    private static void testMultiLimit() throws IOException {\n+        long smallMemorySize = 1024; \/\/ 1k\n+        ProcessBuilder pb = processBuilderWithSetting(\"-XX:MallocLimit=mtOther:2g,compiler:1g,internal:\" + smallMemorySize);\n@@ -136,1 +135,0 @@\n-        output.reportDiagnosticSummary();\n@@ -138,4 +136,4 @@\n-        output.shouldContain(\"[nmt] MallocLimit: category \\\"Compiler\\\" limit: 1073741824\");\n-        output.shouldContain(\"[nmt] MallocLimit: category \\\"Internal\\\" limit: \" + small_memory_size);\n-        output.shouldContain(\"[nmt] MallocLimit: category \\\"Other\\\" limit: 2147483648\");\n-        String s = output.firstMatch(\".*MallocLimit: category \\\"Internal\\\" reached limit \\\\(size: (\\\\d+), limit: \" + small_memory_size + \"\\\\).*\", 1);\n+        output.shouldContain(\"[nmt] MallocLimit: category \\\"Compiler\\\" limit: 1024M\");\n+        output.shouldContain(\"[nmt] MallocLimit: category \\\"Internal\\\" limit: 1024B\");\n+        output.shouldContain(\"[nmt] MallocLimit: category \\\"Other\\\" limit: 2048M\");\n+        String s = output.firstMatch(\".*MallocLimit: category \\\"Internal\\\" reached limit \\\\(size: (\\\\d+), limit: \" + smallMemorySize + \"\\\\).*\", 1);\n@@ -143,1 +141,1 @@\n-        Asserts.assertGreaterThan(size, small_memory_size);\n+        Asserts.assertGreaterThan(size, smallMemorySize);\n@@ -146,1 +144,1 @@\n-    private static void test_valid_setting(String setting, String... expected_output) throws IOException {\n+    private static void testValidSetting(String setting, String... expected_output) throws IOException {\n@@ -149,1 +147,0 @@\n-        output.reportDiagnosticSummary();\n@@ -156,1 +153,1 @@\n-    private static void test_valid_settings() throws IOException {\n+    private static void testValidSettings() throws IOException {\n@@ -158,1 +155,1 @@\n-        test_valid_setting(\n+        testValidSetting(\n@@ -160,1 +157,1 @@\n-                \"[nmt] MallocLimit: total limit: 2147483648\",\n+                \"[nmt] MallocLimit: total limit: 2048M\",\n@@ -163,1 +160,1 @@\n-        test_valid_setting(\n+        testValidSetting(\n@@ -165,3 +162,3 @@\n-                \"[nmt] MallocLimit: category \\\"GC\\\" limit: 1234567891\",\n-                \"[nmt] MallocLimit: category \\\"Internal\\\" limit: 987654321\",\n-                \"[nmt] MallocLimit: category \\\"Object Monitors\\\" limit: 1073741824\",\n+                \"[nmt] MallocLimit: category \\\"GC\\\" limit: 1177M\",\n+                \"[nmt] MallocLimit: category \\\"Internal\\\" limit: 941M\",\n+                \"[nmt] MallocLimit: category \\\"Object Monitors\\\" limit: 1024M\",\n@@ -171,1 +168,1 @@\n-        test_valid_setting(\n+        testValidSetting(\n@@ -175,27 +172,27 @@\n-                \"[nmt] MallocLimit: category \\\"Java Heap\\\" limit: 1073741824\",\n-                \"[nmt] MallocLimit: category \\\"Class\\\" limit: 1074790400\",\n-                \"[nmt] MallocLimit: category \\\"Thread\\\" limit: 1075838976\",\n-                \"[nmt] MallocLimit: category \\\"Thread Stack\\\" limit: 1076887552\",\n-                \"[nmt] MallocLimit: category \\\"Code\\\" limit: 1077936128\",\n-                \"[nmt] MallocLimit: category \\\"GC\\\" limit: 1078984704\",\n-                \"[nmt] MallocLimit: category \\\"GCCardSet\\\" limit: 1080033280\",\n-                \"[nmt] MallocLimit: category \\\"Compiler\\\" limit: 1081081856\",\n-                \"[nmt] MallocLimit: category \\\"JVMCI\\\" limit: 1082130432\",\n-                \"[nmt] MallocLimit: category \\\"Internal\\\" limit: 1083179008\",\n-                \"[nmt] MallocLimit: category \\\"Other\\\" limit: 1084227584\",\n-                \"[nmt] MallocLimit: category \\\"Symbol\\\" limit: 1085276160\",\n-                \"[nmt] MallocLimit: category \\\"Native Memory Tracking\\\" limit: 1086324736\",\n-                \"[nmt] MallocLimit: category \\\"Shared class space\\\" limit: 1087373312\",\n-                \"[nmt] MallocLimit: category \\\"Arena Chunk\\\" limit: 1088421888\",\n-                \"[nmt] MallocLimit: category \\\"Test\\\" limit: 1089470464\",\n-                \"[nmt] MallocLimit: category \\\"Tracing\\\" limit: 1090519040\",\n-                \"[nmt] MallocLimit: category \\\"Logging\\\" limit: 1091567616\",\n-                \"[nmt] MallocLimit: category \\\"Statistics\\\" limit: 1092616192\",\n-                \"[nmt] MallocLimit: category \\\"Arguments\\\" limit: 1093664768\",\n-                \"[nmt] MallocLimit: category \\\"Module\\\" limit: 1094713344\",\n-                \"[nmt] MallocLimit: category \\\"Safepoint\\\" limit: 1095761920\",\n-                \"[nmt] MallocLimit: category \\\"Synchronization\\\" limit: 1096810496\",\n-                \"[nmt] MallocLimit: category \\\"Serviceability\\\" limit: 1097859072\",\n-                \"[nmt] MallocLimit: category \\\"Metaspace\\\" limit: 1098907648\",\n-                \"[nmt] MallocLimit: category \\\"String Deduplication\\\" limit: 1099956224\",\n-                \"[nmt] MallocLimit: category \\\"Object Monitors\\\" limit: 1101004800\",\n+                \"[nmt] MallocLimit: category \\\"Java Heap\\\" limit: 1024M\",\n+                \"[nmt] MallocLimit: category \\\"Class\\\" limit: 1025M\",\n+                \"[nmt] MallocLimit: category \\\"Thread\\\" limit: 1026M\",\n+                \"[nmt] MallocLimit: category \\\"Thread Stack\\\" limit: 1027M\",\n+                \"[nmt] MallocLimit: category \\\"Code\\\" limit: 1028M\",\n+                \"[nmt] MallocLimit: category \\\"GC\\\" limit: 1029M\",\n+                \"[nmt] MallocLimit: category \\\"GCCardSet\\\" limit: 1030M\",\n+                \"[nmt] MallocLimit: category \\\"Compiler\\\" limit: 1031M\",\n+                \"[nmt] MallocLimit: category \\\"JVMCI\\\" limit: 1032M\",\n+                \"[nmt] MallocLimit: category \\\"Internal\\\" limit: 1033M\",\n+                \"[nmt] MallocLimit: category \\\"Other\\\" limit: 1034M\",\n+                \"[nmt] MallocLimit: category \\\"Symbol\\\" limit: 1035M\",\n+                \"[nmt] MallocLimit: category \\\"Native Memory Tracking\\\" limit: 1036M\",\n+                \"[nmt] MallocLimit: category \\\"Shared class space\\\" limit: 1037M\",\n+                \"[nmt] MallocLimit: category \\\"Arena Chunk\\\" limit: 1038M\",\n+                \"[nmt] MallocLimit: category \\\"Test\\\" limit: 1039M\",\n+                \"[nmt] MallocLimit: category \\\"Tracing\\\" limit: 1040M\",\n+                \"[nmt] MallocLimit: category \\\"Logging\\\" limit: 1041M\",\n+                \"[nmt] MallocLimit: category \\\"Statistics\\\" limit: 1042M\",\n+                \"[nmt] MallocLimit: category \\\"Arguments\\\" limit: 1043M\",\n+                \"[nmt] MallocLimit: category \\\"Module\\\" limit: 1044M\",\n+                \"[nmt] MallocLimit: category \\\"Safepoint\\\" limit: 1045M\",\n+                \"[nmt] MallocLimit: category \\\"Synchronization\\\" limit: 1046M\",\n+                \"[nmt] MallocLimit: category \\\"Serviceability\\\" limit: 1047M\",\n+                \"[nmt] MallocLimit: category \\\"Metaspace\\\" limit: 1048M\",\n+                \"[nmt] MallocLimit: category \\\"String Deduplication\\\" limit: 1049M\",\n+                \"[nmt] MallocLimit: category \\\"Object Monitors\\\" limit: 1050M\",\n@@ -206,1 +203,1 @@\n-    private static void test_invalid_setting(String setting, String expected_error) throws IOException {\n+    private static void testInvalidSetting(String setting, String expected_error) throws IOException {\n@@ -214,1 +211,1 @@\n-    private static void test_invalid_settings() throws IOException {\n+    private static void testInvalidSettings() throws IOException {\n@@ -216,6 +213,6 @@\n-        test_invalid_setting(\"gc\", \"MallocLimit: colon missing: gc\");\n-        test_invalid_setting(\"gc:abc\", \"Invalid MallocLimit size: abc\");\n-        test_invalid_setting(\"abcd:10m\", \"MallocLimit: invalid nmt category: abcd\");\n-        test_invalid_setting(\"nmt:100m,abcd:10m\", \"MallocLimit: invalid nmt category: abcd\");\n-        test_invalid_setting(\"0\", \"MallocLimit: limit must be > 0\");\n-        test_invalid_setting(\"GC:0\", \"MallocLimit: limit must be > 0\");\n+        testInvalidSetting(\"gc\", \"MallocLimit: colon missing: gc\");\n+        testInvalidSetting(\"gc:abc\", \"Invalid MallocLimit size: abc\");\n+        testInvalidSetting(\"abcd:10m\", \"MallocLimit: invalid nmt category: abcd\");\n+        testInvalidSetting(\"nmt:100m,abcd:10m\", \"MallocLimit: invalid nmt category: abcd\");\n+        testInvalidSetting(\"0\", \"MallocLimit: limit must be > 0\");\n+        testInvalidSetting(\"GC:0\", \"MallocLimit: limit must be > 0\");\n@@ -224,1 +221,1 @@\n-    private static void test_limit_without_nmt() throws IOException {\n+    private static void testLimitWithoutNmt() throws IOException {\n@@ -235,12 +232,12 @@\n-        if (args[0].equals(\"global_limit\")) {\n-            test_global_limit();\n-        } else if (args[0].equals(\"compiler_limit\")) {\n-            test_compiler_limit();\n-        } else if (args[0].equals(\"multi_limit\")) {\n-            test_multi_limit();\n-        } else if (args[0].equals(\"valid_settings\")) {\n-            test_valid_settings();\n-        } else if (args[0].equals(\"invalid_settings\")) {\n-            test_invalid_settings();\n-        } else if (args[0].equals(\"limit_without_nmt\")) {\n-            test_limit_without_nmt();\n+        if (args[0].equals(\"global-limit\")) {\n+            testGlobalLimit();\n+        } else if (args[0].equals(\"compiler-limit\")) {\n+            testCompilerLimit();\n+        } else if (args[0].equals(\"multi-limit\")) {\n+            testMultiLimit();\n+        } else if (args[0].equals(\"valid-settings\")) {\n+            testValidSettings();\n+        } else if (args[0].equals(\"invalid-settings\")) {\n+            testInvalidSettings();\n+        } else if (args[0].equals(\"limit-without-nmt\")) {\n+            testLimitWithoutNmt();\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/MallocLimitTest.java","additions":93,"deletions":96,"binary":false,"changes":189,"status":"modified"}]}