{"files":[{"patch":"@@ -4412,1 +4412,3 @@\n-  case ArgsRange::arg_in_range: *out = (size_t)limit; return true;\n+  case ArgsRange::arg_in_range:\n+    *out = (size_t)limit;\n+    return true;\n@@ -4420,1 +4422,0 @@\n-    \/\/ fall through\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1373,1 +1373,1 @@\n-          \"- MallocLimit=<NMT category>:<size>[,<NMT category>:<size>..] \"  \\\n+          \"- MallocLimit=<NMT category>:<size>[,<NMT category>:<size>...] \"  \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,9 +86,9 @@\n-        String[] vmargs = new String[] {\n-            \"-XX:+UnlockDiagnosticVMOptions\", \/\/ MallocLimit is diagnostic\n-            \"-Xmx64m\", \"-XX:-CreateCoredumpOnCrash\", \"-Xlog:nmt\",\n-            \"-XX:NativeMemoryTracking=summary\"\n-        };\n-        String[] vmargs2 = new String[] { \"-version\" };\n-        String[] both = Stream.concat(Stream.concat(Arrays.stream(vmargs), Arrays.stream(extra_settings)), Arrays.stream(vmargs2))\n-                .toArray(String[]::new);\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(both);\n+        List<String> args = new ArrayList<>();\n+        args.add(\"-XX:+UnlockDiagnosticVMOptions\"); \/\/ MallocLimit is diagnostic\n+        args.add(\"-Xmx64m\");\n+        args.add(\"-XX:-CreateCoredumpOnCrash\");\n+        args.add(\"-Xlog:nmt\");\n+        args.add(\"-XX:NativeMemoryTracking=summary\");\n+        args.addAll(Arrays.asList(extra_settings));\n+        args.add(\"-version\");\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(args);\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/MallocLimitTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}