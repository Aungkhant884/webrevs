{"files":[{"patch":"@@ -454,0 +454,44 @@\n+\n+\/\/\/\/\/ Synchronous (non-deferrable) error signals (ILL, SEGV, FPE, BUS, TRAP):\n+\n+\/\/ These signals are special because they cannot be deferred and, if they\n+\/\/  happen while delivery is blocked for the receiving thread, will cause UB\n+\/\/  (in practice typically resulting in sudden process deaths or hangs, see\n+\/\/   JDK-8252533). So we must take care never to block them when we cannot be\n+\/\/  absolutely sure they won't happen. In practice, this is always.\n+\/\/\n+\/\/ Relevant Posix quote:\n+\/\/ <quote>\n+\/\/ The behavior of a process is undefined after it ignores a SIGFPE, SIGILL,\n+\/\/ SIGSEGV, or SIGBUS signal that was not generated by kill(), sigqueue(), or\n+\/\/ raise().\n+\/\/ <\/quote>\n+\/\/\n+\/\/ We also include SIGTRAP in that list of never-to-block-signals. While not\n+\/\/  mentioned by the Posix documentation, in our (SAPs) experience blocking it\n+\/\/  causes similar problems. Beside, during normal operation - outside of error\n+\/\/  handling - SIGTRAP may be used for implicit NULL checking, so it makes sense\n+\/\/  to never block it.\n+\/\/\n+\/\/ We deal with those signals in two ways:\n+\/\/ - we just never explicitly block them, which includes not accidentally blocking\n+\/\/   them via sa_mask when establishing signal handlers.\n+\/\/ - as an additional safety measure, at the entrance of a signal handler, we\n+\/\/   unblock them explicitly.\n+\n+static void add_error_signals_to_set(sigset_t* set) {\n+  sigaddset(set, SIGILL);\n+  sigaddset(set, SIGBUS);\n+  sigaddset(set, SIGFPE);\n+  sigaddset(set, SIGSEGV);\n+  sigaddset(set, SIGTRAP);\n+}\n+\n+static void remove_error_signals_from_set(sigset_t* set) {\n+  sigdelset(set, SIGILL);\n+  sigdelset(set, SIGBUS);\n+  sigdelset(set, SIGFPE);\n+  sigdelset(set, SIGSEGV);\n+  sigdelset(set, SIGTRAP);\n+}\n+\n@@ -459,15 +503,2 @@\n-  sigaddset(&set, SIGILL);\n-  sigaddset(&set, SIGBUS);\n-  sigaddset(&set, SIGFPE);\n-  sigaddset(&set, SIGSEGV);\n-  \/\/ We also unblock SIGTRAP, which is not in the list of POSIX lists of signals\n-  \/\/  which would cause undefined behavior when blocked\n-  \/\/  (https:\/\/pubs.opengroup.org\/onlinepubs\/009695399\/functions\/sigprocmask.html)\n-  \/\/  but in our experience cause the same problems when occurring when blocked.\n-  sigaddset(&set, SIGTRAP);\n-  int rc = ::pthread_sigmask(SIG_UNBLOCK, &set, NULL);\n-#ifdef ASSERT\n-  if (rc != 0) {\n-    log_warning(os)(\"pthread_sigmask failed (%d)\", errno);\n-  }\n-#endif\n+  add_error_signals_to_set(&set);\n+  ::pthread_sigmask(SIG_UNBLOCK, &set, NULL);\n@@ -494,0 +525,3 @@\n+\n+  PosixSignals::unblock_error_signals();\n+\n@@ -692,0 +726,2 @@\n+  remove_error_signals_from_set(&(sigAct.sa_mask));\n+\n@@ -1071,0 +1107,1 @@\n+  remove_error_signals_from_set(&(sigAct.sa_mask));\n@@ -1438,0 +1475,1 @@\n+\n@@ -1442,0 +1480,2 @@\n+  PosixSignals::unblock_error_signals();\n+\n@@ -1535,0 +1575,1 @@\n+  remove_error_signals_from_set(&(act.sa_mask));\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":56,"deletions":15,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -135,4 +135,0 @@\n-  \/\/ install signal handlers for all synchronous program error signals\n-  sigset_t newset;\n-  sigemptyset(&newset);\n-\n@@ -142,1 +138,0 @@\n-    sigaddset(&newset, SIGNALS[i]);\n","filename":"src\/hotspot\/os\/posix\/vmError_posix.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}