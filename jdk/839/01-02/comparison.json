{"files":[{"patch":"@@ -458,4 +458,4 @@\n-\/\/  happen while delivery is blocked for the receiving thread, will cause UB\n-\/\/  (in practice typically resulting in sudden process deaths or hangs, see\n-\/\/   JDK-8252533). So we must take care never to block them when we cannot be\n-\/\/  absolutely sure they won't happen. In practice, this is always.\n+\/\/ happen while delivery is blocked for the receiving thread, will cause UB\n+\/\/ (in practice typically resulting in sudden process deaths or hangs, see\n+\/\/ JDK-8252533). So we must take care never to block them when we cannot be\n+\/\/ absolutely sure they won't happen. In practice, this is always.\n@@ -464,5 +464,3 @@\n-\/\/ <quote>\n-\/\/ The behavior of a process is undefined after it ignores a SIGFPE, SIGILL,\n-\/\/ SIGSEGV, or SIGBUS signal that was not generated by kill(), sigqueue(), or\n-\/\/ raise().\n-\/\/ <\/quote>\n+\/\/ \"The behavior of a process is undefined after it ignores a SIGFPE, SIGILL,\n+\/\/  SIGSEGV, or SIGBUS signal that was not generated by kill(), sigqueue(), or\n+\/\/  raise().\"\n@@ -471,4 +469,4 @@\n-\/\/  mentioned by the Posix documentation, in our (SAPs) experience blocking it\n-\/\/  causes similar problems. Beside, during normal operation - outside of error\n-\/\/  handling - SIGTRAP may be used for implicit NULL checking, so it makes sense\n-\/\/  to never block it.\n+\/\/ mentioned by the Posix documentation, in our (SAPs) experience blocking it\n+\/\/ causes similar problems. Beside, during normal operation - outside of error\n+\/\/ handling - SIGTRAP may be used for implicit NULL checking, so it makes sense\n+\/\/ to never block it.\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"}]}