{"files":[{"patch":"@@ -30,0 +30,5 @@\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertThrows;\n+\n@@ -34,0 +39,1 @@\n+ * @run testng EmptyComment\n@@ -37,11 +43,23 @@\n-    public static void main(String[] args) throws Exception {\n-        \/\/ Simple cases where the comment is set to empty text\n-        test(zos -> {\n-            \/\/ do nothing\n-        });\n-        test(zos -> {\n-            zos.setComment(null);\n-        });\n-        test(zos -> {\n-            zos.setComment(\"\");\n-        });\n+    @DataProvider()\n+    Object[][] longLengths() {\n+        return new Object[][]{{0xFFFF + 1}, {0xFFFF + 2}, {0xFFFF * 2}};\n+    }\n+\n+    \/**\n+     * Overflow, the text is too long to be stored as a comment.\n+     *\/\n+    @Test(dataProvider = \"longLengths\")\n+    void testOverflow(int length) throws Exception {\n+        test(zos -> assertThrows(IllegalArgumentException.class, () -> {\n+            zos.setComment(\"X\".repeat(length));\n+        }));\n+    }\n+\n+    \/**\n+     * Simple cases where the comment is set to the empty text.\n+     *\/\n+    @Test\n+    void testSimpleCases() throws Exception {\n+        test(zos -> {\/* do nothing *\/});\n+        test(zos -> zos.setComment(null));\n+        test(zos -> zos.setComment(\"\"));\n@@ -64,11 +82,0 @@\n-\n-        \/\/ Overflow, the text is too long to be stored as a comment\n-        for (int count : new int[]{0xFFFF + 1, 0xFFFF + 2, 0xFFFF * 2}) {\n-            test(zos -> {\n-                try {\n-                    zos.setComment(\"X\".repeat(count));\n-                } catch (IllegalArgumentException ignored) {\n-                    \/\/ skip\n-                }\n-            });\n-        }\n@@ -87,0 +94,8 @@\n+\n+            if (data.length > 0xFFFF) { \/\/ just in case\n+                throw new RuntimeException(\"data is too big: \" + data.length);\n+            }\n+            int pk = data.length - ZipFile.ENDHDR;\n+            if (data[pk] != 'P' || data[pk + 1] != 'K') {\n+                throw new RuntimeException(\"PK is not found\");\n+            }\n@@ -89,0 +104,1 @@\n+\n@@ -95,1 +111,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/jdk\/java\/util\/zip\/ZipOutputStream\/EmptyComment.java","additions":39,"deletions":23,"binary":false,"changes":62,"status":"modified"}]}