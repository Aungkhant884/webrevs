{"files":[{"patch":"@@ -168,1 +168,1 @@\n-  \/\/ Notifies this compiler that the current thread (`thread`) is about to stop.\n+  \/\/ Notifies this compiler that the current thread (`current`) is about to stop.\n@@ -170,1 +170,1 @@\n-  virtual void stopping_compiler_thread(CompilerThread* thread) {\n+  virtual void stopping_compiler_thread(CompilerThread* current) {\n","filename":"src\/hotspot\/share\/compiler\/abstractCompiler.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -444,1 +444,1 @@\n-    guarantee(compiler != NULL, \"Compiler object must exist\");\n+    guarantee(compiler != nullptr, \"Compiler object must exist\");\n@@ -2261,1 +2261,1 @@\n-    if (runtime != NULL) {\n+    if (runtime != nullptr) {\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,3 +40,3 @@\n-JVMCIRuntime* JVMCI::_compiler_runtimes = NULL;\n-JVMCIRuntime* JVMCI::_java_runtime = NULL;\n-JVMCIRuntime* JVMCI::_shutdown_compiler_runtime = NULL;\n+JVMCIRuntime* JVMCI::_compiler_runtimes = nullptr;\n+JVMCIRuntime* JVMCI::_java_runtime = nullptr;\n+JVMCIRuntime* JVMCI::_shutdown_compiler_runtime = nullptr;\n@@ -45,2 +45,2 @@\n-void* JVMCI::_shared_library_handle = NULL;\n-char* JVMCI::_shared_library_path = NULL;\n+void* JVMCI::_shared_library_handle = nullptr;\n+char* JVMCI::_shared_library_path = nullptr;\n@@ -48,2 +48,2 @@\n-StringEventLog* JVMCI::_events = NULL;\n-StringEventLog* JVMCI::_verbose_events = NULL;\n+StringEventLog* JVMCI::_events = nullptr;\n+StringEventLog* JVMCI::_verbose_events = nullptr;\n@@ -52,1 +52,1 @@\n-const char* JVMCI::_fatal_log_filename = NULL;\n+const char* JVMCI::_fatal_log_filename = nullptr;\n@@ -131,1 +131,1 @@\n-  _java_runtime = new JVMCIRuntime(NULL, -1, false);\n+  _java_runtime = new JVMCIRuntime(nullptr, -1, false);\n@@ -133,1 +133,1 @@\n-    JVMCI::_compiler_runtimes = new JVMCIRuntime(NULL, 0, true);\n+    JVMCI::_compiler_runtimes = new JVMCIRuntime(nullptr, 0, true);\n@@ -167,1 +167,1 @@\n-  if (runtime == NULL && create) {\n+  if (runtime == nullptr && create) {\n@@ -187,1 +187,1 @@\n-  if (_java_runtime != NULL) {\n+  if (_java_runtime != nullptr) {\n@@ -190,1 +190,1 @@\n-  for (JVMCIRuntime* runtime = _compiler_runtimes; runtime != NULL; runtime = runtime->_next) {\n+  for (JVMCIRuntime* runtime = _compiler_runtimes; runtime != nullptr; runtime = runtime->_next) {\n@@ -193,1 +193,1 @@\n-  if (_shutdown_compiler_runtime != NULL) {\n+  if (_shutdown_compiler_runtime != nullptr) {\n@@ -200,1 +200,1 @@\n-    if (_java_runtime != NULL) {\n+    if (_java_runtime != nullptr) {\n@@ -203,1 +203,1 @@\n-    for (JVMCIRuntime* runtime = _compiler_runtimes; runtime != NULL; runtime = runtime->_next) {\n+    for (JVMCIRuntime* runtime = _compiler_runtimes; runtime != nullptr; runtime = runtime->_next) {\n@@ -206,1 +206,1 @@\n-    if (_shutdown_compiler_runtime != NULL) {\n+    if (_shutdown_compiler_runtime != nullptr) {\n@@ -219,1 +219,1 @@\n-    guarantee(events != NULL, \"JVMCI event log not yet initialized\");\n+    guarantee(events != nullptr, \"JVMCI event log not yet initialized\");\n@@ -221,1 +221,1 @@\n-    if (thread != NULL) {\n+    if (thread != nullptr) {\n@@ -230,1 +230,1 @@\n-    if (thread != NULL) {\n+    if (thread != nullptr) {\n@@ -261,1 +261,1 @@\n-  if (java_runtime != NULL) {\n+  if (java_runtime != nullptr) {\n@@ -265,1 +265,1 @@\n-  if (runtime != NULL) {\n+  if (runtime != nullptr) {\n@@ -273,1 +273,1 @@\n-    for (JVMCIRuntime* rt = JVMCI::_compiler_runtimes; rt != NULL; rt = rt->_next) {\n+    for (JVMCIRuntime* rt = JVMCI::_compiler_runtimes; rt != nullptr; rt = rt->_next) {\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.cpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-  \/\/ never returns NULL.\n+  \/\/ never returns nullptr.\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-void JVMCICompiler::stopping_compiler_thread(CompilerThread* thread) {\n+void JVMCICompiler::stopping_compiler_thread(CompilerThread* current) {\n@@ -158,2 +158,2 @@\n-    JVMCIRuntime* runtime = JVMCI::compiler_runtime(thread, false);\n-    if (runtime != NULL) {\n+    JVMCIRuntime* runtime = JVMCI::compiler_runtime(current, false);\n+    if (runtime != nullptr) {\n@@ -161,1 +161,1 @@\n-      runtime->detach_thread(thread, \"stopping idle compiler thread\");\n+      runtime->detach_thread(current, \"stopping idle compiler thread\");\n@@ -172,1 +172,1 @@\n-    if (runtime != NULL && delay > 0 && tty->time_stamp().milliseconds() > DEFAULT_COMPILER_IDLE_DELAY) {\n+    if (runtime != nullptr && delay > 0 && tty->time_stamp().milliseconds() > DEFAULT_COMPILER_IDLE_DELAY) {\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompiler.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-  virtual void stopping_compiler_thread(CompilerThread* thread);\n+  virtual void stopping_compiler_thread(CompilerThread* current);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompiler.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2073,1 +2073,1 @@\n-  return JVMCIENV->resolve_handle(xHandle) == JVMCIENV->resolve_handle(yHandle);\n+  return JVMCIENV->resolve_oop_handle(xHandle) == JVMCIENV->resolve_oop_handle(yHandle);\n@@ -2163,4 +2163,3 @@\n-C2V_VMENTRY(void, deleteGlobalHandle, (JNIEnv* env, jobject, jlong h))\n-  jobject handle = (jobject)(address)h;\n-  if (handle != NULL) {\n-    JVMCIENV->runtime()->destroy_global(handle);\n+C2V_VMENTRY(void, deleteGlobalHandle, (JNIEnv* env, jobject, jlong handle))\n+  if (handle != 0) {\n+    JVMCIENV->runtime()->destroy_oop_handle(handle);\n@@ -2262,1 +2261,1 @@\n-  if (thread == NULL || thread->libjvmci_runtime() == NULL) {\n+  if (thread == nullptr || thread->libjvmci_runtime() == nullptr) {\n@@ -2271,1 +2270,1 @@\n-    if (runtime == NULL || !runtime->has_shared_library_javavm()) {\n+    if (runtime == nullptr || !runtime->has_shared_library_javavm()) {\n@@ -2291,1 +2290,1 @@\n-  JavaVM* javaVM = NULL;\n+  JavaVM* javaVM = nullptr;\n@@ -2307,1 +2306,1 @@\n-  attach_args.group = NULL;\n+  attach_args.group = nullptr;\n@@ -2321,1 +2320,1 @@\n-  if (attach_error != NULL) {\n+  if (attach_error != nullptr) {\n@@ -2327,1 +2326,1 @@\n-  if (thread == NULL) {\n+  if (thread == nullptr) {\n@@ -2357,1 +2356,1 @@\n-      if (JVMCI::get_shared_library(sl_path, false) == NULL) {\n+      if (JVMCI::get_shared_library(sl_path, false) == nullptr) {\n@@ -2365,1 +2364,1 @@\n-    attach_args.group = NULL;\n+    attach_args.group = nullptr;\n@@ -2370,1 +2369,1 @@\n-      guarantee(peerJNIEnv != NULL, \"must be\");\n+      guarantee(peerJNIEnv != nullptr, \"must be\");\n@@ -2382,1 +2381,1 @@\n-  if (thread == NULL) {\n+  if (thread == nullptr) {\n@@ -2393,1 +2392,1 @@\n-    if (runtime == NULL || !runtime->has_shared_library_javavm()) {\n+    if (runtime == nullptr || !runtime->has_shared_library_javavm()) {\n@@ -2416,1 +2415,1 @@\n-    if (runtime == NULL) {\n+    if (runtime == nullptr) {\n@@ -2528,1 +2527,1 @@\n-  JVMCIObject global_handle_obj = JVMCIENV->wrap((jobject) obj_handle);\n+  JVMCIObject global_handle_obj = JVMCIENV->wrap(global_handle);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -1386,1 +1386,1 @@\n-    jlong handle = make_handle(obj);\n+    jlong handle = make_oop_handle(obj);\n@@ -1410,1 +1410,1 @@\n-    oop result = resolve_handle(object_handle);\n+    oop result = resolve_oop_handle(object_handle);\n@@ -1424,1 +1424,1 @@\n-jlong JVMCIEnv::make_handle(const Handle& obj) {\n+jlong JVMCIEnv::make_oop_handle(const Handle& obj) {\n@@ -1426,2 +1426,1 @@\n-  jobject handle = _runtime->make_global(obj);\n-  return (jlong) handle;\n+  return _runtime->make_oop_handle(obj);\n@@ -1430,3 +1429,3 @@\n-oop JVMCIEnv::resolve_handle(jlong objectHandle) {\n-  assert(objectHandle != 0, \"should be a valid handle\");\n-  oop obj = *((oopDesc**)objectHandle);\n+oop JVMCIEnv::resolve_oop_handle(jlong oopHandle) {\n+  assert(oopHandle != 0, \"should be a valid handle\");\n+  oop obj = *((oopDesc**) oopHandle);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -395,2 +395,5 @@\n-  jlong make_handle(const Handle& obj);\n-  oop resolve_handle(jlong objectHandle);\n+  \/\/ Makes a handle to a HotSpot heap object. These handles are\n+  \/\/ individually reclaimed by JVMCIRuntime::destroy_oop_handle and\n+  \/\/ bulk reclaimed by JVMCIRuntime::release_and_clear_globals.\n+  jlong make_oop_handle(const Handle& obj);\n+  oop resolve_oop_handle(jlong oopHandle);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-    if (current != NULL) {                                                               \\\n+    if (current != nullptr) {                                                            \\\n@@ -318,1 +318,1 @@\n-    if (current != NULL) {\n+    if (current != nullptr) {\n@@ -336,1 +336,1 @@\n-  if (JVMCILibDumpJNIConfig != NULL) {                                                      \\\n+  if (JVMCILibDumpJNIConfig != nullptr) {                                                   \\\n@@ -342,1 +342,1 @@\n-    assert(k != NULL, #fullClassName \" not initialized\");                                   \\\n+    assert(k != nullptr, #fullClassName \" not initialized\");                                \\\n@@ -350,1 +350,1 @@\n-      if (current != NULL) {                                                                \\\n+      if (current != nullptr) {                                                             \\\n@@ -372,1 +372,1 @@\n-    if (JVMCILibDumpJNIConfig != NULL) {                                                       \\\n+    if (JVMCILibDumpJNIConfig != nullptr) {                                                    \\\n@@ -378,1 +378,1 @@\n-      assert(dst != NULL, \"uninitialized\");                                                    \\\n+      assert(dst != nullptr, \"uninitialized\");                                                 \\\n@@ -384,1 +384,1 @@\n-        if (current != NULL) {                                                                 \\\n+        if (current != nullptr) {                                                              \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -836,1 +836,1 @@\n-jobject JVMCIRuntime::make_global(const Handle& obj) {\n+jlong JVMCIRuntime::make_oop_handle(const Handle& obj) {\n@@ -840,3 +840,3 @@\n-  jobject res = NULL;\n-  if (ptr != NULL) {\n-    assert(*ptr == NULL, \"invariant\");\n+  jlong res = 0;\n+  if (ptr != nullptr) {\n+    assert(*ptr == nullptr, \"invariant\");\n@@ -844,1 +844,1 @@\n-    res = reinterpret_cast<jobject>(ptr);\n+    res = (jlong) ptr;\n@@ -850,1 +850,1 @@\n-  _jobjects->append(res);\n+  _oop_handles.append(ptr);\n@@ -854,3 +854,4 @@\n-bool JVMCIRuntime::probe_jobject(const jobject& key, int index) {\n-  if (_jobjects->at(index) == key) {\n-    _last_found_jobject_index = index;\n+bool JVMCIRuntime::probe_oop_handle(jlong handle, int index) {\n+  oop* key = (oop*) handle;\n+  if (key == _oop_handles.at(index)) {\n+    _last_found_oop_handle_index = index;\n@@ -862,4 +863,4 @@\n-int JVMCIRuntime::find_jobject(const jobject& key) {\n-  int len = _jobjects->length();\n-  int next = _last_found_jobject_index + 1;\n-  int prev = MAX2(_last_found_jobject_index, 0) - 1;\n+int JVMCIRuntime::find_oop_handle(jlong handle) {\n+  int len = _oop_handles.length();\n+  int next = _last_found_oop_handle_index + 1;\n+  int prev = MAX2(_last_found_oop_handle_index, 0) - 1;\n@@ -872,1 +873,1 @@\n-      if (probe_jobject(key, next)) {\n+      if (probe_oop_handle(handle, next)) {\n@@ -878,1 +879,1 @@\n-      if (probe_jobject(key, prev)) {\n+      if (probe_oop_handle(handle, prev)) {\n@@ -889,1 +890,1 @@\n-  if (_jobjects->length() != 0) {\n+  if (_oop_handles.length() != 0) {\n@@ -893,5 +894,4 @@\n-    oop** ptrs = NEW_RESOURCE_ARRAY(oop*, _jobjects->length());\n-    for (int i = 0; i < _jobjects->length(); i++) {\n-      jobject obj = _jobjects->at(i);\n-      if (obj != NULL) {\n-        oop* oop_ptr = reinterpret_cast<oop*>(obj);\n+    oop** ptrs = NEW_RESOURCE_ARRAY(oop*, _oop_handles.length());\n+    for (int i = 0; i < _oop_handles.length(); i++) {\n+      oop* oop_ptr = _oop_handles.at(i);\n+      if (oop_ptr != nullptr) {\n@@ -899,1 +899,1 @@\n-        NativeAccess<>::oop_store(oop_ptr, (oop) NULL);\n+        NativeAccess<>::oop_store(oop_ptr, (oop) nullptr);\n@@ -905,2 +905,2 @@\n-  _jobjects->clear();\n-  _last_found_jobject_index = -1;\n+  _oop_handles.clear();\n+  _last_found_oop_handle_index = -1;\n@@ -910,1 +910,1 @@\n-void JVMCIRuntime::destroy_global(jobject handle) {\n+void JVMCIRuntime::destroy_oop_handle(jlong handle) {\n@@ -912,3 +912,3 @@\n-  assert(is_global_handle(handle), \"precondition\");\n-  oop* oop_ptr = reinterpret_cast<oop*>(handle);\n-  NativeAccess<>::oop_store(oop_ptr, (oop)NULL);\n+  assert(is_oop_handle(handle), \"precondition\");\n+  oop* oop_ptr = (oop*) handle;\n+  NativeAccess<>::oop_store(oop_ptr, (oop) nullptr);\n@@ -918,3 +918,3 @@\n-  int index = find_jobject(handle);\n-  guarantee(index != -1, \"global not allocated in JVMCI runtime %d: \" INTPTR_FORMAT, id(), p2i(handle));\n-  _jobjects->at_put(index, NULL);\n+  int index = find_oop_handle(handle);\n+  guarantee(index != -1, \"global not allocated in JVMCI runtime %d: \" INTPTR_FORMAT, id(), handle);\n+  _oop_handles.at_put(index, nullptr);\n@@ -923,2 +923,2 @@\n-bool JVMCIRuntime::is_global_handle(jobject handle) {\n-  const oop* ptr = reinterpret_cast<oop*>(handle);\n+bool JVMCIRuntime::is_oop_handle(jlong handle) {\n+  const oop* ptr = (oop*) handle;\n@@ -962,1 +962,1 @@\n-  if (thread != NULL && thread->is_Java_thread()) {\n+  if (thread != nullptr && thread->is_Java_thread()) {\n@@ -965,1 +965,1 @@\n-    if (runtime != NULL) {\n+    if (runtime != nullptr) {\n@@ -974,13 +974,20 @@\n-JVMCIRuntime::JVMCIRuntime(JVMCIRuntime* next, int id, bool for_compile_broker) {\n-  _init_state = uninitialized;\n-  _shared_library_javavm = NULL;\n-  _shared_library_javavm_id = 0;\n-  _id = id;\n-  _for_compile_broker = for_compile_broker;\n-  _next = next;\n-  _metadata_handles = new MetadataHandles();\n-  _jobjects = new (ResourceObj::C_HEAP, mtJVMCI) GrowableArray<jobject>(100, mtJVMCI);\n-  _last_found_jobject_index = -1;\n-\n-  _lock = new Monitor(Mutex::JVMCIRuntime_lock_rank, \"JVMCIRuntimeLock\");\n-  _num_attached_threads = 0;\n+JVMCIRuntime::JVMCIRuntime(JVMCIRuntime* next, int id, bool for_compile_broker) :\n+  _init_state(uninitialized),\n+  _shared_library_javavm(nullptr),\n+  _shared_library_javavm_id(0),\n+  _id(id),\n+  _next(next),\n+  _metadata_handles(new MetadataHandles()),\n+  _oop_handles(100, mtJVMCI),\n+  _num_attached_threads(0),\n+  _for_compile_broker(for_compile_broker),\n+  _last_found_oop_handle_index(-1)\n+{\n+  if (id == -1) {\n+    _lock = JVMCIRuntime_lock;\n+  } else {\n+    stringStream lock_name;\n+    lock_name.print(\"%s@%d\", JVMCIRuntime_lock->name(), id);\n+    Mutex::Rank lock_rank = DEBUG_ONLY(JVMCIRuntime_lock->rank()) NOT_DEBUG(Mutex::safepoint);\n+    _lock = new PaddedMonitor(lock_rank, lock_name.as_string(\/*c_heap*\/true));\n+  }\n@@ -988,1 +995,1 @@\n-      id == -1 ? \"Java\" : for_compile_broker ? \"CompilerBroker\" : \"Compiler\", id, p2i(this));\n+      id == -1 ? \"Java\" : for_compile_broker ? \"CompileBroker\" : \"Compiler\", id, p2i(this));\n@@ -994,1 +1001,1 @@\n-  for (JVMCIRuntime* runtime = JVMCI::_compiler_runtimes; runtime != NULL; runtime = runtime->_next) {\n+  for (JVMCIRuntime* runtime = JVMCI::_compiler_runtimes; runtime != nullptr; runtime = runtime->_next) {\n@@ -1003,2 +1010,2 @@\n-  if (JVMCI::_shutdown_compiler_runtime == NULL) {\n-    JVMCI::_shutdown_compiler_runtime = new JVMCIRuntime(NULL, -2, true);\n+  if (JVMCI::_shutdown_compiler_runtime == nullptr) {\n+    JVMCI::_shutdown_compiler_runtime = new JVMCIRuntime(nullptr, -2, true);\n@@ -1014,2 +1021,2 @@\n-  for (JVMCIRuntime* runtime = JVMCI::_compiler_runtimes; runtime != NULL; runtime = runtime->_next) {\n-    if (count != NULL) {\n+  for (JVMCIRuntime* runtime = JVMCI::_compiler_runtimes; runtime != nullptr; runtime = runtime->_next) {\n+    if (count != nullptr) {\n@@ -1025,1 +1032,1 @@\n-      if (skip != NULL && !runtime->has_shared_library_javavm()) {\n+      if (skip != nullptr && !runtime->has_shared_library_javavm()) {\n@@ -1036,1 +1043,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1045,1 +1052,1 @@\n-    guarantee(runtime != NULL, \"must be\");\n+    guarantee(runtime != nullptr, \"must be\");\n@@ -1053,1 +1060,1 @@\n-    runtime = select_runtime(thread, NULL, &id);\n+    runtime = select_runtime(thread, nullptr, &id);\n@@ -1055,1 +1062,1 @@\n-  if (runtime == NULL) {\n+  if (runtime == nullptr) {\n@@ -1064,1 +1071,1 @@\n-  assert(thread->libjvmci_runtime() == NULL, \"must be\");\n+  assert(thread->libjvmci_runtime() == nullptr, \"must be\");\n@@ -1066,1 +1073,1 @@\n-  JVMCIRuntime* runtime = NULL;\n+  JVMCIRuntime* runtime = nullptr;\n@@ -1077,1 +1084,1 @@\n-  for (JVMCIRuntime* runtime = JVMCI::_compiler_runtimes; runtime != NULL; runtime = runtime->_next) {\n+  for (JVMCIRuntime* runtime = JVMCI::_compiler_runtimes; runtime != nullptr; runtime = runtime->_next) {\n@@ -1084,1 +1091,1 @@\n-      return NULL;\n+      return nullptr;\n@@ -1096,1 +1103,1 @@\n-  assert(thread->libjvmci_runtime() == NULL, \"must be\");\n+  assert(thread->libjvmci_runtime() == nullptr, \"must be\");\n@@ -1105,1 +1112,1 @@\n-  JVMCIRuntime* new_runtime = NULL;\n+  JVMCIRuntime* new_runtime = nullptr;\n@@ -1111,1 +1118,1 @@\n-    new_runtime = select_runtime(thread, this, NULL);\n+    new_runtime = select_runtime(thread, this, nullptr);\n@@ -1113,1 +1120,1 @@\n-  if (new_runtime != NULL) {\n+  if (new_runtime != nullptr) {\n@@ -1123,1 +1130,1 @@\n-    thread->set_libjvmci_runtime(NULL);\n+    thread->set_libjvmci_runtime(nullptr);\n@@ -1178,1 +1185,1 @@\n-  thread->set_libjvmci_runtime(NULL);\n+  thread->set_libjvmci_runtime(nullptr);\n@@ -1186,1 +1193,1 @@\n-  if (javaVM == NULL) {\n+  if (javaVM == nullptr) {\n@@ -1194,1 +1201,1 @@\n-    if (JNI_CreateJavaVM == NULL) {\n+    if (JNI_CreateJavaVM == nullptr) {\n@@ -1224,1 +1231,1 @@\n-    JNIEnv* env = NULL;\n+    JNIEnv* env = nullptr;\n@@ -1227,1 +1234,1 @@\n-      guarantee(env != NULL, \"missing env\");\n+      guarantee(env != nullptr, \"missing env\");\n@@ -1236,1 +1243,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1240,1 +1247,1 @@\n-  if (info != NULL) {\n+  if (info != nullptr) {\n@@ -1254,1 +1261,1 @@\n-  guarantee(thread != NULL && _shared_library_javavm != NULL, \"npe\"); \\\n+  guarantee(thread != nullptr && _shared_library_javavm != nullptr, \"npe\"); \\\n@@ -1519,2 +1526,2 @@\n-    if (javaVM != NULL) {\n-      _shared_library_javavm = NULL;\n+    if (javaVM != nullptr) {\n+      _shared_library_javavm = nullptr;\n@@ -1524,1 +1531,1 @@\n-  if (javaVM != NULL) {\n+  if (javaVM != nullptr) {\n@@ -1954,1 +1961,1 @@\n-      if (runtime != NULL) {\n+      if (runtime != nullptr) {\n@@ -1987,1 +1994,1 @@\n-        if (compile_state->task()->code() == NULL) {\n+        if (compile_state->task()->code() == nullptr) {\n@@ -2213,1 +2220,1 @@\n-    if (thread->libjvmci_runtime() != NULL) {\n+    if (thread->libjvmci_runtime() != nullptr) {\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":89,"deletions":82,"binary":false,"changes":171,"status":"modified"},{"patch":"@@ -165,2 +165,2 @@\n-  \/\/ List of jobjects allocated via make_global. This is to support\n-  \/\/ destroying remaining JNI handles when the JavaVM associated\n+  \/\/ List of oop handles allocated via make_oop_handle. This is to support\n+  \/\/ destroying remaining oop handles when the JavaVM associated\n@@ -168,1 +168,1 @@\n-  GrowableArray<jobject>* _jobjects;\n+  GrowableArray<oop*> _oop_handles;\n@@ -176,3 +176,1 @@\n-  enum {\n-    cannot_be_attached = -1 \/\/ See _num_attached_threads\n-  };\n+  static const int cannot_be_attached = -1;\n@@ -218,1 +216,1 @@\n-  \/\/ If NULL is returned, then `*count` contains the number of JVMCIRuntimes\n+  \/\/ If nullptr is returned, then `*count` contains the number of JVMCIRuntimes\n@@ -231,4 +229,4 @@\n-  \/\/ Helpers for destroy_global\n-  int _last_found_jobject_index;\n-  bool probe_jobject(const jobject& obj, int index);\n-  int find_jobject(const jobject& obj);\n+  \/\/ Helpers for destroy_oop_handle\n+  int _last_found_oop_handle_index;\n+  bool probe_oop_handle(jlong handle, int index);\n+  int find_oop_handle(jlong handle);\n@@ -236,1 +234,1 @@\n-  \/\/ Releases all the non-null entries in _jobjects and then clears\n+  \/\/ Releases all the non-null entries in _oop_handles and then clears\n@@ -248,1 +246,1 @@\n-  \/\/ interface pointer for the JavaVM is returned otherwise NULL is returned.\n+  \/\/ interface pointer for the JavaVM is returned otherwise nullptr is returned.\n@@ -252,1 +250,1 @@\n-  bool has_shared_library_javavm() { return _shared_library_javavm != NULL; }\n+  bool has_shared_library_javavm() { return _shared_library_javavm != nullptr; }\n@@ -278,2 +276,2 @@\n-  \/\/ Allocation and management of JNI global object handles\n-  \/\/ whose lifetime is scoped by this JVMCIRuntime. The lifetime\n+  \/\/ Allocation and management of handles to HotSpot heap objects\n+  \/\/ whose lifetime is scoped by this JVMCIRuntime. The max lifetime\n@@ -282,1 +280,1 @@\n-  \/\/ used when creating a IndirectHotSpotObjectConstantImpl in the\n+  \/\/ used when creating an IndirectHotSpotObjectConstantImpl in the\n@@ -284,3 +282,5 @@\n-  jobject make_global(const Handle& obj);\n-  void destroy_global(jobject handle);\n-  bool is_global_handle(jobject handle);\n+  jlong make_oop_handle(const Handle& obj);\n+  bool is_oop_handle(jlong handle);\n+\n+  \/\/ Called from IndirectHotSpotObjectConstantImpl.clear(Object)\n+  void destroy_oop_handle(jlong handle);\n@@ -347,1 +347,1 @@\n-  \/\/ `_HotSpotJVMCIRuntime_instance` is set to NULL and `_init_state`\n+  \/\/ `_HotSpotJVMCIRuntime_instance` is set to nullptr and `_init_state`\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.hpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -159,0 +159,1 @@\n+Monitor* JVMCIRuntime_lock            = NULL;\n@@ -340,1 +341,1 @@\n-  def(JVMCI_lock                   , PaddedMonitor, JVMCIRuntime_lock_rank-1, true);\n+  def(JVMCIRuntime_lock            , PaddedMonitor, safepoint, true);\n@@ -373,0 +374,4 @@\n+#if INCLUDE_JVMCI\n+  \/\/ JVMCIRuntime_lock must be acquired before JVMCI_lock to avoid deadlock\n+  defl(JVMCI_lock                  , PaddedMonitor, JVMCIRuntime_lock);\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -151,2 +151,2 @@\n-#define JVMCIRuntime_lock_rank safepoint\n-extern Monitor* JVMCI_lock;                      \/\/ Monitor to control initialization of JVMCI\n+extern Monitor* JVMCI_lock;                      \/\/ protects global JVMCI critical sections\n+extern Monitor* JVMCIRuntime_lock;               \/\/ protects critical sections for a specific JVMCIRuntime object\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1230,1 +1230,1 @@\n-    assert((_libjvmci_runtime == NULL && rt != NULL) || (_libjvmci_runtime != NULL && rt == NULL), \"must be\");\n+    assert((_libjvmci_runtime == nullptr && rt != nullptr) || (_libjvmci_runtime != nullptr && rt == nullptr), \"must be\");\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}