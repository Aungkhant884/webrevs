[{"commit":{"message":"Split the original patch and leave the existing logic in Assembler entirely untouched\n\nChange-Id: Ia85fdd3a8d14830f51ad659efada53b3b0f5cbdc"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"}],"sha":"5ffd5cb116f7c1c4a8bd080cc927a7ef503f3a6d"},{"commit":{"message":"Merge branch 'master' of github.com:fg1417\/jdk into fg1417-20211026\n\nChange-Id: Ia5cea44c615c9a00495cfc5123b1ebfe73dc3d1a"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"}],"sha":"ddfcf211d12b33ba2d75f4861814783d1a8f17ac"},{"commit":{"message":"8274179: AArch64: Support SVE operations with encodable immediates\n\n    for(int i = 0; i < LENGTH; i++) {\n      c[i] = a[i] + 2;\n    }\n\nFor the case showed above, after superword optimization with SVE,\nwithout the patch, the vector add operation always has 2 z-reg inputs,\nlike:\nmov     z16.s, #2\nadd\tz17.s, z17.s, z16.s\n\nConsidering sve has supported basic binary operations with immediate,\nthis pattern could be further optimized to:\nadd     z16.s, z16.s, #2\n\nTo implement it, we added some new match rules and assembler rules in\nthe aarch64 backend. We also made some extensions on immediate types\nand functions to keep backward compatible.\n\nWith the patch, only these binary integer vector operations, +(add),\n-(sub), &(and), |(orr), and ^(eor) with immediate are supported for\nthe optimization. Other vector operations are not supported currently.\n\nTested tier1 and test\/hotspot\/jtreg\/compiler on SVE featured AArch64\nCPU, no new failure.\n\nThere is no obvious performance uplift but it can help remove one\nredundant mov instruction.\n\nChange-Id: Iaec40e362918118691083fb171cc4dff390b35a2"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"},{"filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestByteVect.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestCharVect.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestIntVect.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestLongVect.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestShortVect.java"}],"sha":"6b66eee44bfac3d7345a33815cec615e08559e38"}]