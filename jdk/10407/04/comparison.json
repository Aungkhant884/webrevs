{"files":[{"patch":"@@ -1371,0 +1371,24 @@\n+\/\/ vector eor3 (unpredicated)\n+\n+instruct veor3_neon(vReg dst, vReg src1, vReg src2, vReg src3) %{\n+  predicate(VM_Version::supports_sha3() &&\n+            VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n)));\n+  match(Set dst (XorV src1 (XorV src2 src3)));\n+  format %{ \"veor3_neon $dst, $src1, $src2, $src3\" %}\n+  ins_encode %{\n+    __ eor3($dst$$FloatRegister, __ T16B, $src1$$FloatRegister,\n+            $src2$$FloatRegister, $src3$$FloatRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct veor3_sve(vReg dst_src1, vReg src2, vReg src3) %{\n+  predicate(UseSVE == 2 && !VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n)));\n+  match(Set dst_src1 (XorV dst_src1 (XorV src2 src3)));\n+  format %{ \"veor3_sve $dst_src1, $dst_src1, $src2, $src3\" %}\n+  ins_encode %{\n+    __ sve_eor3($dst_src1$$FloatRegister, $src2$$FloatRegister, $src3$$FloatRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -698,0 +698,24 @@\n+\/\/ vector eor3 (unpredicated)\n+\n+instruct veor3_neon(vReg dst, vReg src1, vReg src2, vReg src3) %{\n+  predicate(VM_Version::supports_sha3() &&\n+            VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n)));\n+  match(Set dst (XorV src1 (XorV src2 src3)));\n+  format %{ \"veor3_neon $dst, $src1, $src2, $src3\" %}\n+  ins_encode %{\n+    __ eor3($dst$$FloatRegister, __ T16B, $src1$$FloatRegister,\n+            $src2$$FloatRegister, $src3$$FloatRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct veor3_sve(vReg dst_src1, vReg src2, vReg src3) %{\n+  predicate(UseSVE == 2 && !VM_Version::use_neon_for_vector(Matcher::vector_length_in_bytes(n)));\n+  match(Set dst_src1 (XorV dst_src1 (XorV src2 src3)));\n+  format %{ \"veor3_sve $dst_src1, $dst_src1, $src2, $src3\" %}\n+  ins_encode %{\n+    __ sve_eor3($dst_src1$$FloatRegister, $src2$$FloatRegister, $src3$$FloatRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -3851,0 +3851,11 @@\n+\/\/ SVE2 bitwise ternary operations\n+#define INSN(NAME, opc)                                               \\\n+  void NAME(FloatRegister Zdn, FloatRegister Zm, FloatRegister Zk) {  \\\n+    starti;                                                           \\\n+    f(0b00000100, 31, 24), f(opc, 23, 21), rf(Zm, 16);                \\\n+    f(0b001110, 15, 10), rf(Zk, 5), rf(Zdn, 0);                       \\\n+  }\n+\n+  INSN(sve_eor3, 0b001); \/\/ Bitwise exclusive OR of three vectors\n+#undef INSN\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1014,1 +1014,1 @@\n-        elif not self._isPredicated and (name in [\"and\", \"eor\", \"orr\", \"bic\"]):\n+        elif not self._isPredicated and (name in [\"and\", \"eor\", \"orr\", \"bic\", \"eor3\"]):\n@@ -1043,1 +1043,4 @@\n-        formatStr = \"%s%s\" + ''.join([\", %s\" for i in range(1, self.numRegs)])\n+        if self._name == \"eor3\":\n+            formatStr = \"%s%s\" + ''.join([\", %s\" for i in range(0, self.numRegs)])\n+        else:\n+            formatStr = \"%s%s\" + ''.join([\", %s\" for i in range(1, self.numRegs)])\n@@ -1053,1 +1056,4 @@\n-            restRegs = dnReg + [str(self.reg[i]) + self._width.astr() for i in range(1, self.numRegs)]\n+            if self._name == \"eor3\":\n+                restRegs = dnReg + [str(self.reg[i]) + self._width.astr() for i in range(0, self.numRegs)]\n+            else:\n+                restRegs = dnReg + [str(self.reg[i]) + self._width.astr() for i in range(1, self.numRegs)]\n@@ -1929,0 +1935,1 @@\n+                       [\"eor3\", \"ZZZ\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1215,0 +1215,1 @@\n+    __ sve_eor3(z20, z5, z1);                          \/\/       eor3    z20.d, z20.d, z5.d, z1.d\n@@ -1217,9 +1218,9 @@\n-    __ sve_andv(v20, __ H, p1, z1);                    \/\/       andv h20, p1, z1.h\n-    __ sve_orv(v13, __ H, p0, z7);                     \/\/       orv h13, p0, z7.h\n-    __ sve_eorv(v11, __ D, p4, z4);                    \/\/       eorv d11, p4, z4.d\n-    __ sve_smaxv(v15, __ D, p0, z3);                   \/\/       smaxv d15, p0, z3.d\n-    __ sve_sminv(v0, __ S, p5, z5);                    \/\/       sminv s0, p5, z5.s\n-    __ sve_fminv(v30, __ S, p7, z13);                  \/\/       fminv s30, p7, z13.s\n-    __ sve_fmaxv(v8, __ S, p3, z29);                   \/\/       fmaxv s8, p3, z29.s\n-    __ sve_fadda(v14, __ S, p7, z3);                   \/\/       fadda s14, p7, s14, z3.s\n-    __ sve_uaddv(v25, __ H, p2, z24);                  \/\/       uaddv d25, p2, z24.h\n+    __ sve_andv(v13, __ H, p0, z7);                    \/\/       andv h13, p0, z7.h\n+    __ sve_orv(v11, __ D, p4, z4);                     \/\/       orv d11, p4, z4.d\n+    __ sve_eorv(v15, __ D, p0, z3);                    \/\/       eorv d15, p0, z3.d\n+    __ sve_smaxv(v0, __ S, p5, z5);                    \/\/       smaxv s0, p5, z5.s\n+    __ sve_sminv(v30, __ H, p7, z13);                  \/\/       sminv h30, p7, z13.h\n+    __ sve_fminv(v8, __ S, p3, z29);                   \/\/       fminv s8, p3, z29.s\n+    __ sve_fmaxv(v14, __ S, p7, z3);                   \/\/       fmaxv s14, p7, z3.s\n+    __ sve_fadda(v25, __ S, p2, z24);                  \/\/       fadda s25, p2, s25, z24.s\n+    __ sve_uaddv(v1, __ H, p6, z10);                   \/\/       uaddv d1, p6, z10.h\n@@ -1244,7 +1245,7 @@\n-    0x14000000,     0x17ffffd7,     0x14000401,     0x94000000,\n-    0x97ffffd4,     0x940003fe,     0x3400000a,     0x34fffa2a,\n-    0x34007f6a,     0x35000008,     0x35fff9c8,     0x35007f08,\n-    0xb400000b,     0xb4fff96b,     0xb4007eab,     0xb500001d,\n-    0xb5fff91d,     0xb5007e5d,     0x10000013,     0x10fff8b3,\n-    0x10007df3,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36307d76,     0x3758000c,     0x375ff7cc,     0x37587d0c,\n+    0x14000000,     0x17ffffd7,     0x14000402,     0x94000000,\n+    0x97ffffd4,     0x940003ff,     0x3400000a,     0x34fffa2a,\n+    0x34007f8a,     0x35000008,     0x35fff9c8,     0x35007f28,\n+    0xb400000b,     0xb4fff96b,     0xb4007ecb,     0xb500001d,\n+    0xb5fff91d,     0xb5007e7d,     0x10000013,     0x10fff8b3,\n+    0x10007e13,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36307d96,     0x3758000c,     0x375ff7cc,     0x37587d2c,\n@@ -1255,13 +1256,13 @@\n-    0x54007ae0,     0x54000001,     0x54fff541,     0x54007a81,\n-    0x54000002,     0x54fff4e2,     0x54007a22,     0x54000002,\n-    0x54fff482,     0x540079c2,     0x54000003,     0x54fff423,\n-    0x54007963,     0x54000003,     0x54fff3c3,     0x54007903,\n-    0x54000004,     0x54fff364,     0x540078a4,     0x54000005,\n-    0x54fff305,     0x54007845,     0x54000006,     0x54fff2a6,\n-    0x540077e6,     0x54000007,     0x54fff247,     0x54007787,\n-    0x54000008,     0x54fff1e8,     0x54007728,     0x54000009,\n-    0x54fff189,     0x540076c9,     0x5400000a,     0x54fff12a,\n-    0x5400766a,     0x5400000b,     0x54fff0cb,     0x5400760b,\n-    0x5400000c,     0x54fff06c,     0x540075ac,     0x5400000d,\n-    0x54fff00d,     0x5400754d,     0x5400000e,     0x54ffefae,\n-    0x540074ee,     0x5400000f,     0x54ffef4f,     0x5400748f,\n+    0x54007b00,     0x54000001,     0x54fff541,     0x54007aa1,\n+    0x54000002,     0x54fff4e2,     0x54007a42,     0x54000002,\n+    0x54fff482,     0x540079e2,     0x54000003,     0x54fff423,\n+    0x54007983,     0x54000003,     0x54fff3c3,     0x54007923,\n+    0x54000004,     0x54fff364,     0x540078c4,     0x54000005,\n+    0x54fff305,     0x54007865,     0x54000006,     0x54fff2a6,\n+    0x54007806,     0x54000007,     0x54fff247,     0x540077a7,\n+    0x54000008,     0x54fff1e8,     0x54007748,     0x54000009,\n+    0x54fff189,     0x540076e9,     0x5400000a,     0x54fff12a,\n+    0x5400768a,     0x5400000b,     0x54fff0cb,     0x5400762b,\n+    0x5400000c,     0x54fff06c,     0x540075cc,     0x5400000d,\n+    0x54fff00d,     0x5400756d,     0x5400000e,     0x54ffefae,\n+    0x5400750e,     0x5400000f,     0x54ffef4f,     0x540074af,\n@@ -1498,3 +1499,4 @@\n-    0x4591b33e,     0x45ccb56e,     0x045a2434,     0x045820ed,\n-    0x04d9308b,     0x04c8206f,     0x048a34a0,     0x65873dbe,\n-    0x65862fa8,     0x65983c6e,     0x04412b19,\n+    0x4591b33e,     0x45ccb56e,     0x04253834,     0x045a20ed,\n+    0x04d8308b,     0x04d9206f,     0x048834a0,     0x044a3dbe,\n+    0x65872fa8,     0x65863c6e,     0x65982b19,     0x04413941,\n+\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":34,"deletions":32,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorization;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+import java.util.Random;\n+\n+import jdk.test.lib.Utils;\n+\n+\/*\n+ * @test\n+ * @bug 8293488\n+ * @summary Test EOR3 Neon\/SVE2 instruction for aarch64 SHA3 extension\n+ * @library \/test\/lib \/\n+ * @requires os.arch == \"aarch64\"\n+ * @run driver compiler.vectorization.TestEor3AArch64\n+ *\/\n+\n+public class TestEor3AArch64 {\n+\n+    private static final int LENGTH = 2048;\n+    private static final Random RD = Utils.getRandomInstance();\n+\n+    private static int[] ia;\n+    private static int[] ib;\n+    private static int[] ic;\n+    private static int[] ir;\n+\n+    private static long[] la;\n+    private static long[] lb;\n+    private static long[] lc;\n+    private static long[] lr;\n+\n+    static {\n+        ia = new int[LENGTH];\n+        ib = new int[LENGTH];\n+        ic = new int[LENGTH];\n+        ir = new int[LENGTH];\n+\n+        la = new long[LENGTH];\n+        lb = new long[LENGTH];\n+        lc = new long[LENGTH];\n+        lr = new long[LENGTH];\n+\n+        for (int i = 0; i < LENGTH; i++) {\n+            ia[i] = RD.nextInt(30);\n+            ib[i] = RD.nextInt(30);\n+            ic[i] = RD.nextInt(30);\n+\n+            la[i] = RD.nextLong(30);\n+            lb[i] = RD.nextLong(30);\n+            lc[i] = RD.nextLong(30);\n+        }\n+    }\n+\n+    \/\/ Test for eor3 Neon and SVE2 instruction for integers\n+    @Test\n+    @IR(counts = {\"veor3_neon\", \"> 0\"}, applyIf = {\"MaxVectorSize\", \"16\"}, applyIfCPUFeature = {\"sha3\", \"true\"})\n+    @IR(counts = {\"veor3_sve\", \"> 0\"}, applyIfAnd = {\"UseSVE\", \"2\", \"MaxVectorSize\", \"> 16\"})\n+    public static void testIntEor3() {\n+        for (int i = 0; i < LENGTH; i++) {\n+            ir[i] = ia[i] ^ ib[i] ^ ic[i];\n+        }\n+    }\n+\n+    @Run(test = \"testIntEor3\")\n+    public static void testIntEor3_runner() {\n+        testIntEor3();\n+        for (int i = 0; i < LENGTH; i++) {\n+            Asserts.assertEquals((ia[i] ^ ib[i] ^ ic[i]), ir[i]);\n+        }\n+    }\n+\n+    \/\/ Test for eor3 Neon and SVE2 instruction for longs\n+    @Test\n+    @IR(counts = {\"veor3_neon\", \"> 0\"}, applyIf = {\"MaxVectorSize\", \"16\"}, applyIfCPUFeature = {\"sha3\", \"true\"})\n+    @IR(counts = {\"veor3_sve\", \"> 0\"}, applyIfAnd = {\"UseSVE\", \"2\", \"MaxVectorSize\", \"> 16\"})\n+    public static void testLongEor3() {\n+        for (int i = 0; i < LENGTH; i++) {\n+            lr[i] = la[i] ^ lb[i] ^ lc[i];\n+        }\n+    }\n+\n+    @Run(test = \"testLongEor3\")\n+    public static void testLongEor3_runner() {\n+        testLongEor3();\n+        for (int i = 0; i < LENGTH; i++) {\n+            Asserts.assertEquals((la[i] ^ lb[i] ^ lc[i]), lr[i]);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestEor3AArch64.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.*;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.Random;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 4, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 4, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 3)\n+public class TestEor3 {\n+    @Param({\"2048\"})\n+    private int LENGTH;\n+\n+    private int[] ia;\n+    private int[] ib;\n+    private int[] ic;\n+    private int[] id;\n+\n+    private long[] la;\n+    private long[] lb;\n+    private long[] lc;\n+    private long[] ld;\n+\n+    @Param(\"0\")\n+    private int seed;\n+    private Random random = new Random(seed);\n+\n+    @Setup\n+    public void init() {\n+        ia = new int[LENGTH];\n+        ib = new int[LENGTH];\n+        ic = new int[LENGTH];\n+        id = new int[LENGTH];\n+\n+        la = new long[LENGTH];\n+        lb = new long[LENGTH];\n+        lc = new long[LENGTH];\n+        ld = new long[LENGTH];\n+\n+        for (int i = 0; i < LENGTH; i++) {\n+            ia[i] = random.nextInt();\n+            ib[i] = random.nextInt();\n+            ic[i] = random.nextInt();\n+\n+            la[i] = random.nextLong();\n+            lb[i] = random.nextLong();\n+            lc[i] = random.nextLong();\n+        }\n+    }\n+\n+    \/\/ Test EOR3 for int arrays\n+    @Benchmark\n+    public void test1Int() {\n+        for (int i = 0; i < LENGTH; i++) {\n+            id[i] = ia[i] ^ ib[i] ^ ic[i];\n+        }\n+    }\n+\n+    \/\/ Test EOR3 for int arrays with multiple eor operations\n+    @Benchmark\n+    public void test2Int() {\n+        for (int i = 0; i < LENGTH; i++) {\n+            id[i] = ia[i] ^ ib[i] ^ ic[i] ^ ia[i] ^ ib[i];\n+        }\n+    }\n+\n+    \/\/ Test EOR3 for long arrays\n+    @Benchmark\n+    public void test1Long() {\n+        for (int i = 0; i < LENGTH; i++) {\n+            ld[i] = la[i] ^ lb[i] ^ lc[i];\n+        }\n+    }\n+\n+    \/\/ Test EOR3 for long arrays with multiple eor operations\n+    @Benchmark\n+    public void test2Long() {\n+        for (int i = 0; i < LENGTH; i++) {\n+            ld[i] = la[i] ^ lb[i] ^ lc[i] ^ la[i] ^ lb[i];\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/TestEor3.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"}]}