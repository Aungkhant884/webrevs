{"files":[{"patch":"@@ -111,0 +111,11 @@\n+\n+    protected static final Context.Key<JavacFiler> filerKey = new Context.Key<>();\n+\n+    \/** Get the JavacFiler instance for this context. *\/\n+    public static JavacFiler instance(Context context) {\n+        JavacFiler instance = context.get(filerKey);\n+        if (instance == null)\n+            instance = new JavacFiler(context);\n+        return instance;\n+    }\n+\n@@ -401,1 +412,3 @@\n-    JavacFiler(Context context) {\n+    protected JavacFiler(Context context) {\n+        context.put(filerKey, this);\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacFiler.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -227,1 +227,1 @@\n-        filer = new JavacFiler(context);\n+        filer = JavacFiler.instance(context);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacProcessingEnvironment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,282 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8274817\n+ * @summary Verify JavacFiler is subclassable, and can be registered as a service into Context.\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.processing\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.TestRunner toolbox.ToolBox TestFilerAsAService\n+ * @run main TestFilerAsAService\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.TypeElement;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import javax.annotation.processing.Filer;\n+import javax.annotation.processing.SupportedOptions;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ModuleElement;\n+import javax.lang.model.element.PackageElement;\n+import javax.tools.FileObject;\n+import javax.tools.JavaFileManager;\n+import javax.tools.StandardLocation;\n+\n+import com.sun.tools.javac.api.JavacTaskImpl;\n+import com.sun.tools.javac.processing.JavacFiler;\n+import com.sun.tools.javac.util.Context;\n+import com.sun.tools.javac.util.Context.Factory;\n+import java.util.*;\n+\n+import toolbox.JavacTask;\n+import toolbox.TestRunner;\n+import toolbox.TestRunner.Test;\n+import toolbox.ToolBox;\n+import toolbox.ToolBox.MemoryFileManager;\n+\n+public class TestFilerAsAService extends TestRunner {\n+\n+    public static void main(String... args) throws Exception {\n+        new TestFilerAsAService().runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    private static final JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+    private final ToolBox tb = new ToolBox();\n+\n+    public TestFilerAsAService() {\n+        super(System.err);\n+    }\n+\n+    @Test\n+    public void testOriginatingElements(Path outerBase) throws Exception {\n+        Path libSrc = outerBase.resolve(\"lib-src\");\n+        tb.writeJavaFiles(libSrc,\n+                          \"\"\"\n+                          module lib { exports lib1; exports lib2; }\n+                          \"\"\",\n+                          \"\"\"\n+                          package lib1;\n+                          public @interface A {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package lib2;\n+                          public class Lib {\n+                          }\n+                          \"\"\");\n+        tb.writeFile(libSrc.resolve(\"lib1\/package-info.java\"), \"@A package lib1;\");\n+        Path libClasses = outerBase.resolve(\"lib-classes\");\n+        Path libClassesModule = libClasses.resolve(\"lib\");\n+        Files.createDirectories(libClassesModule);\n+\n+        List<String> log = new ArrayList<>();\n+\n+        new JavacTask(tb)\n+                .files(tb.findJavaFiles(libSrc))\n+                .outdir(libClassesModule)\n+                .run();\n+\n+        Path src = outerBase.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                          \"\"\"\n+                          module m {}\n+                          \"\"\",\n+                          \"\"\"\n+                          package t;\n+                          public class T1 {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package t;\n+                          public class T2 {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package t;\n+                          public class T3 {\n+                          }\n+                          \"\"\");\n+        tb.writeFile(src.resolve(\"p\/package-info.java\"), \"package p;\");\n+        Path classes = outerBase.resolve(\"classes\");\n+        Files.createDirectories(classes);\n+        try (StandardJavaFileManager sjfm = compiler.getStandardFileManager(null, null, null)) {\n+            List<String> testOutput = new ArrayList<>();\n+            try {\n+                String generatedData;\n+                try (MemoryFileManager mfm = new MemoryFileManager(sjfm)) {\n+                    compiler.getTask(null, mfm, null, null, null,\n+                                     List.of(new ToolBox.JavaSource(\"package test; public class Generated2 {}\")))\n+                            .call();\n+                    generatedData =\n+                            Base64.getEncoder().encodeToString(mfm.getFileBytes(StandardLocation.CLASS_OUTPUT, \"test.Generated2\"));\n+                }\n+                List<String> options = List.of(\"-sourcepath\", src.toString(),\n+                                               \"-processor\", \"TestFilerAsAService$P\",\n+                                               \"-processorpath\", System.getProperty(\"test.classes\"),\n+                                               \"--module-path\", libClasses.toString(),\n+                                               \"--add-modules\", \"lib\",\n+                                               \"-d\", classes.toString(),\n+                                               \"-AgeneratedData=\" + generatedData);\n+                JavacTaskImpl task = (JavacTaskImpl) ToolProvider.getSystemJavaCompiler()\n+                        .getTask(null, null, null, options, null, sjfm.getJavaFileObjects(tb.findJavaFiles(src)));\n+\n+                TestJavacFiler.preRegister(task.getContext(), testOutput);\n+                task.call();\n+\n+                List<String> expectedOriginatingFiles = List.of(\"t.T1\", \"java.lang.String\", \"p\", \"lib1\", \"lib2\", \"m\", \"java.base\",\n+                                                                \"t.T2\", \"java.lang.CharSequence\", \"p\", \"lib1\", \"lib2\", \"m\", \"java.base\",\n+                                                                \"t.T3\", \"java.lang.Exception\", \"p\", \"lib1\", \"lib2\", \"m\", \"java.base\");\n+                assertEquals(expectedOriginatingFiles, testOutput);\n+            } catch (IOException ex) {\n+                throw new IllegalStateException(ex);\n+            }\n+        }\n+    }\n+\n+    @SupportedAnnotationTypes(\"*\")\n+    @SupportedOptions(\"generatedData\")\n+    public static class P extends AbstractProcessor {\n+        int round;\n+        @Override\n+        public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+            System.err.println(\"nazdar\");\n+            if (round++ == 0) {\n+                ModuleElement mdl = processingEnv.getElementUtils().getModuleElement(\"m\");\n+                ModuleElement java_base = processingEnv.getElementUtils().getModuleElement(\"java.base\");\n+                PackageElement pack = processingEnv.getElementUtils().getPackageElement(\"p\");\n+                PackageElement lib1Pack = processingEnv.getElementUtils().getPackageElement(\"lib1\");\n+                PackageElement lib2Pack = processingEnv.getElementUtils().getPackageElement(\"lib2\");\n+                Filer filer = processingEnv.getFiler();\n+                try {\n+                    filer.createSourceFile(\"test.Generated1\",\n+                                           element(\"t.T1\"),\n+                                           element(\"java.lang.String\"),\n+                                           pack,\n+                                           lib1Pack,\n+                                           lib2Pack,\n+                                           mdl,\n+                                           java_base).openOutputStream().close();\n+                    try (OutputStream out = filer.createClassFile(\"test.Generated2\",\n+                                                                  element(\"t.T2\"),\n+                                                                  element(\"java.lang.CharSequence\"),\n+                                                                  pack,\n+                                                                  lib1Pack,\n+                                                                  lib2Pack,\n+                                                                  mdl,\n+                                                                  java_base).openOutputStream()) {\n+                        out.write(Base64.getDecoder().decode(processingEnv.getOptions().get(\"generatedData\")));\n+                    }\n+                    filer.createResource(StandardLocation.CLASS_OUTPUT,\n+                                         \"test\",\n+                                         \"Generated3.txt\",\n+                                         element(\"t.T3\"),\n+                                         element(\"java.lang.Exception\"),\n+                                         pack,\n+                                         lib1Pack,\n+                                         lib2Pack,\n+                                         mdl,\n+                                         java_base).openOutputStream().close();\n+                } catch (IOException ex) {\n+                    throw new AssertionError(ex);\n+                }\n+            }\n+            return false;\n+        }\n+\n+        private Element element(String type) {\n+            return processingEnv.getElementUtils().getTypeElement(type);\n+        }\n+\n+        @Override\n+        public SourceVersion getSupportedSourceVersion() {\n+            return SourceVersion.latest();\n+        }\n+    }\n+\n+    public static class TestJavacFiler extends JavacFiler {\n+\n+\n+        protected static void preRegister(Context context, List<String> log) {\n+            context.put(filerKey, (Factory<JavacFiler>) c -> new TestJavacFiler(c, log));\n+        }\n+\n+        private final List<String> log;\n+\n+        public TestJavacFiler(Context c, List<String> log) {\n+            super(c);\n+            this.log = log;\n+        }\n+\n+        @Override\n+        public JavaFileObject createSourceFile(CharSequence nameAndModule, Element... originatingElements) throws IOException {\n+            logOriginatingElements(originatingElements);\n+            return super.createSourceFile(nameAndModule, originatingElements);\n+        }\n+\n+        @Override\n+        public JavaFileObject createClassFile(CharSequence nameAndModule, Element... originatingElements) throws IOException {\n+            logOriginatingElements(originatingElements);\n+            return super.createClassFile(nameAndModule, originatingElements);\n+        }\n+\n+        @Override\n+        public FileObject createResource(JavaFileManager.Location location, CharSequence moduleAndPkg, CharSequence relativeName, Element... originatingElements) throws IOException {\n+            logOriginatingElements(originatingElements);\n+            return super.createResource(location, moduleAndPkg, relativeName, originatingElements);\n+        }\n+\n+        private void logOriginatingElements(Element[] originatingElements) {\n+            Arrays.stream(originatingElements)\n+                    .map(e -> e.toString())\n+                    .forEach(log::add);\n+        }\n+\n+    }\n+    private void assertEquals(Object expected, Object actual) throws AssertionError {\n+        if (!expected.equals(actual)) {\n+            throw new AssertionError(\"Unexpected  output: \" + actual + \", expected: \" + expected);\n+        }\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/filer\/TestFilerAsAService.java","additions":282,"deletions":0,"binary":false,"changes":282,"status":"added"}]}