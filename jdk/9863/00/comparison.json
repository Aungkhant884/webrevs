{"files":[{"patch":"@@ -400,0 +400,7 @@\n+        System.err.println(\n+            \"\"\"\n+            WARNING: sun.awt.AppContext.dispose() no longer stops threads.\n+            Additionally AppContext will be removed in a future release.\n+            Remove all uses of this internal class as soon as possible.\n+            There is no replacement.\n+            \"\"\");\n@@ -505,27 +512,0 @@\n-        \/\/ Then, we stop any remaining Threads\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            Thread[] threads;\n-            int len, threadCount;\n-            do {\n-                len = threadGroup.activeCount() + 4;\n-                threads = new Thread[len];\n-                threadCount = threadGroup.enumerate(threads);\n-            } while (threadCount == len);\n-            for (int i = 0; i < threadCount; i++) {\n-                threads[i].stop();\n-            }\n-            return null;\n-        });\n-\n-        \/\/ Next, we sleep 10ms at a time, waiting for all of the active\n-        \/\/ Threads in the ThreadGroup to die.\n-\n-        startTime = System.currentTimeMillis();\n-        endTime = startTime + THREAD_INTERRUPT_TIMEOUT;\n-        while ((this.threadGroup.activeCount() > 0) &&\n-               (System.currentTimeMillis() < endTime)) {\n-            try {\n-                Thread.sleep(10);\n-            } catch (InterruptedException e) { }\n-        }\n-\n@@ -545,7 +525,0 @@\n-        \/\/ Finally, we destroy the ThreadGroup entirely.\n-        try {\n-            this.threadGroup.destroy();\n-        } catch (IllegalThreadStateException e) {\n-            \/\/ Fired if not all the Threads died, ignore it and proceed\n-        }\n-\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/AppContext.java","additions":7,"deletions":34,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -1,77 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.AWTException;\n-import java.awt.Frame;\n-import java.awt.Robot;\n-\n-import sun.awt.AppContext;\n-import sun.awt.SunToolkit;\n-\n-\/**\n- * @test\n- * @key headful\n- * @bug 8136858\n- * @modules java.desktop\/sun.awt\n- * @run main\/othervm\/java.security.policy=java.policy -Djava.security.manager ApplicationThreadsStop\n- *\/\n-public final class ApplicationThreadsStop implements Runnable {\n-\n-    private static AppContext contextToDispose;\n-    private static Thread thread;\n-\n-    public static void main(final String[] args) throws Exception {\n-        ThreadGroup tg = new ThreadGroup(\"TestThreadGroup\");\n-        Thread t = new Thread(tg, new ApplicationThreadsStop());\n-        t.start();\n-        t.join();\n-        contextToDispose.dispose();\n-        \/\/ wait for appcontext to be destroyed\n-        Thread.sleep(10000);\n-        if(thread.isAlive()){\n-            throw new RuntimeException(\"Thread is alive\");\n-        }\n-    }\n-\n-    @Override\n-    public void run() {\n-        contextToDispose = SunToolkit.createNewAppContext();\n-        Frame f = new Frame();\n-        f.setSize(300, 300);\n-        f.setLocationRelativeTo(null);\n-        f.setVisible(true);\n-        thread = new Thread(() -> {\n-            while(true);\n-        });\n-        thread.start();\n-        sync();\n-    }\n-\n-    private static void sync() {\n-        try {\n-            new Robot().waitForIdle();\n-        } catch (AWTException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/AppContext\/ApplicationThreadsStop\/ApplicationThreadsStop.java","additions":0,"deletions":77,"binary":false,"changes":77,"status":"deleted"}]}