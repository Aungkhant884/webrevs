{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-  _startThread_lock = new Monitor(Mutex::event, \"startThread_lock\", true,\n+  _startThread_lock = new Monitor(Mutex::event, \"startThread_lock\",\n","filename":"src\/hotspot\/os\/aix\/osThread_aix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-  _startThread_lock = new Monitor(Mutex::event, \"startThread_lock\", true,\n+  _startThread_lock = new Monitor(Mutex::event, \"startThread_lock\",\n","filename":"src\/hotspot\/os\/bsd\/osThread_bsd.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-  _startThread_lock = new Monitor(Mutex::event, \"startThread_lock\", true,\n+  _startThread_lock = new Monitor(Mutex::event, \"startThread_lock\",\n","filename":"src\/hotspot\/os\/linux\/osThread_linux.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,1 +107,1 @@\n-    _lock = new Monitor(Mutex::nonleaf+2, \"CompileTaskLock\");\n+    _lock = new Monitor(Mutex::nonleaf+2, \"CompileTaskLock\", Mutex::_safepoint_check_always);\n","filename":"src\/hotspot\/share\/compiler\/compileTask.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-  _par_alloc_lock(Mutex::leaf, \"HeapRegion par alloc lock\", true),\n+  _par_alloc_lock(Mutex::leaf, \"HeapRegion par alloc lock\", Mutex::_safepoint_check_always, true),\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -780,1 +780,2 @@\n-  _par_alloc_lock(Mutex::leaf, \"OffsetTableContigSpace par alloc lock\", true)\n+  _par_alloc_lock(Mutex::leaf, \"OffsetTableContigSpace par alloc lock\",\n+                  Mutex::_safepoint_check_always, true)\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n-  _alloc_failure_waiters_lock(Mutex::leaf, \"ShenandoahAllocFailureGC_lock\", true, Monitor::_safepoint_check_always),\n-  _gc_waiters_lock(Mutex::leaf, \"ShenandoahRequestedGC_lock\", true, Monitor::_safepoint_check_always),\n+  _alloc_failure_waiters_lock(Mutex::leaf, \"ShenandoahAllocFailureGC_lock\", Monitor::_safepoint_check_always, true),\n+  _gc_waiters_lock(Mutex::leaf, \"ShenandoahRequestedGC_lock\", Monitor::_safepoint_check_always, true),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-          _wait_monitor(new Monitor(Mutex::leaf, \"_wait_monitor\", true, Monitor::_safepoint_check_always)),\n+          _wait_monitor(new Monitor(Mutex::leaf, \"_wait_monitor\", Monitor::_safepoint_check_always, true)),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahPacer.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -248,1 +248,1 @@\n-      _mutex(Mutex::leaf, \"Parallel heap iteration data merge lock\") {}\n+      _mutex(Mutex::leaf, \"Parallel heap iteration data merge lock\", Mutex::_safepoint_check_always) {}\n","filename":"src\/hotspot\/share\/memory\/heapInspection.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1209,1 +1209,1 @@\n-    _extra_data_lock(Mutex::leaf, \"MDO extra data lock\"),\n+    _extra_data_lock(Mutex::leaf, \"MDO extra data lock\", Mutex::_safepoint_check_always),\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -277,2 +277,2 @@\n-Mutex::Mutex(int Rank, const char * name, bool allow_vm_block,\n-             SafepointCheckRequired safepoint_check_required) : _owner(NULL) {\n+Mutex::Mutex(int Rank, const char * name, SafepointCheckRequired safepoint_check_required,\n+             bool allow_vm_block) : _owner(NULL) {\n","filename":"src\/hotspot\/share\/runtime\/mutex.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -161,2 +161,2 @@\n-  Mutex(int rank, const char *name, bool allow_vm_block = false,\n-        SafepointCheckRequired safepoint_check_required = _safepoint_check_always);\n+  Mutex(int rank, const char *name, SafepointCheckRequired safepoint_check_required, bool allow_vm_block);\n+\n@@ -164,1 +164,2 @@\n-    Mutex(rank, name, safepoint_check_required == _safepoint_check_never ? true : false, safepoint_check_required) {}\n+    Mutex(rank, name, safepoint_check_required,\n+          safepoint_check_required == _safepoint_check_never ? true : false) {}\n@@ -205,3 +206,2 @@\n-  Monitor(int rank, const char *name, bool allow_vm_block = false,\n-         SafepointCheckRequired safepoint_check_required = _safepoint_check_always) :\n-    Mutex(rank, name, allow_vm_block, safepoint_check_required) {}\n+  Monitor(int rank, const char *name, SafepointCheckRequired safepoint_check_required, bool allow_vm_block)  :\n+    Mutex(rank, name, safepoint_check_required, allow_vm_block) {}\n@@ -230,3 +230,2 @@\n-  PaddedMutex(int rank, const char *name, bool allow_vm_block = false,\n-              SafepointCheckRequired safepoint_check_required = _safepoint_check_always) :\n-    Mutex(rank, name, allow_vm_block, safepoint_check_required) {};\n+  PaddedMutex(int rank, const char *name, SafepointCheckRequired safepoint_check_required, bool allow_vm_block) :\n+    Mutex(rank, name, safepoint_check_required, allow_vm_block) {};\n@@ -244,3 +243,2 @@\n-  PaddedMonitor(int rank, const char *name, bool allow_vm_block = false,\n-               SafepointCheckRequired safepoint_check_required = _safepoint_check_always) :\n-    Monitor(rank, name, allow_vm_block, safepoint_check_required) {};\n+  PaddedMonitor(int rank, const char *name, SafepointCheckRequired safepoint_check_required, bool allow_vm_block) :\n+    Monitor(rank, name, safepoint_check_required, allow_vm_block) {};\n","filename":"src\/hotspot\/share\/runtime\/mutex.hpp","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -203,4 +203,4 @@\n-#define def(var, type, pri, vm_block, safepoint_check_allowed ) {      \\\n-  var = new type(Mutex::pri, #var, vm_block, Mutex::safepoint_check_allowed); \\\n-  assert(_num_mutex < MAX_NUM_MUTEX, \"increase MAX_NUM_MUTEX\");        \\\n-  _mutex_array[_num_mutex++] = var;                                      \\\n+#define def(var, type, pri, vm_block, safepoint_check_allowed ) {             \\\n+  var = new type(Mutex::pri, #var, Mutex::safepoint_check_allowed, vm_block); \\\n+  assert(_num_mutex < MAX_NUM_MUTEX, \"increase MAX_NUM_MUTEX\");               \\\n+  _mutex_array[_num_mutex++] = var;                                           \\\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -62,2 +62,2 @@\n-  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\", false, Mutex::_safepoint_check_always);\n-  Mutex* mutex_rankA_plus_one = new Mutex(rankA + 1, \"mutex_rankA_plus_one\", false, Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\", Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA_plus_one = new Mutex(rankA + 1, \"mutex_rankA_plus_one\", Mutex::_safepoint_check_always);\n@@ -76,2 +76,2 @@\n-  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\", false, Mutex::_safepoint_check_always);\n-  Mutex* mutex_rankA_plus_one = new Mutex(rankA + 1, \"mutex_rankA_plus_one\", false, Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\", Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA_plus_one = new Mutex(rankA + 1, \"mutex_rankA_plus_one\", Mutex::_safepoint_check_always);\n@@ -90,2 +90,2 @@\n-  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\", false, Mutex::_safepoint_check_always);\n-  Mutex* mutex_rankB = new Mutex(rankA, \"mutex_rankB\", false, Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\", Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankB = new Mutex(rankA, \"mutex_rankB\", Mutex::_safepoint_check_always);\n@@ -103,3 +103,3 @@\n-  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\", false, Mutex::_safepoint_check_always);\n-  Mutex* mutex_rankA_plus_one = new Mutex(rankA + 1, \"mutex_rankA_plus_one\", false, Mutex::_safepoint_check_always);\n-  Mutex* mutex_rankA_plus_two = new Mutex(rankA + 2, \"mutex_rankA_plus_two\", false, Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\", Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA_plus_one = new Mutex(rankA + 1, \"mutex_rankA_plus_one\", Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA_plus_two = new Mutex(rankA + 2, \"mutex_rankA_plus_two\", Mutex::_safepoint_check_always);\n@@ -120,2 +120,2 @@\n-  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\", false, Mutex::_safepoint_check_always);\n-  Mutex* mutex_rankA_plus_one = new Mutex(rankA + 1, \"mutex_rankA_plus_one\", false, Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA = new Mutex(rankA, \"mutex_rankA\", Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA_plus_one = new Mutex(rankA + 1, \"mutex_rankA_plus_one\", Mutex::_safepoint_check_always);\n@@ -165,2 +165,2 @@\n-  Monitor* monitor_rankA = new Monitor(rankA, \"monitor_rankA\", false, Mutex::_safepoint_check_always);\n-  Monitor* monitor_rankA_plus_one = new Monitor(rankA + 1, \"monitor_rankA_plus_one\", false, Mutex::_safepoint_check_always);\n+  Monitor* monitor_rankA = new Monitor(rankA, \"monitor_rankA\", Mutex::_safepoint_check_always);\n+  Monitor* monitor_rankA_plus_one = new Monitor(rankA + 1, \"monitor_rankA_plus_one\", Mutex::_safepoint_check_always);\n@@ -181,2 +181,2 @@\n-  Monitor* monitor_rankA = new Monitor(rankA, \"monitor_rankA\", false, Mutex::_safepoint_check_always);\n-  Monitor* monitor_rankA_plus_one = new Monitor(rankA + 1, \"monitor_rankA_plus_one\", false, Mutex::_safepoint_check_always);\n+  Monitor* monitor_rankA = new Monitor(rankA, \"monitor_rankA\", Mutex::_safepoint_check_always);\n+  Monitor* monitor_rankA_plus_one = new Monitor(rankA + 1, \"monitor_rankA_plus_one\", Mutex::_safepoint_check_always);\n@@ -197,2 +197,2 @@\n-  Monitor* monitor_rankA = new Monitor(rankA, \"monitor_rankA\", false, Mutex::_safepoint_check_always);\n-  Monitor* monitor_rankA_plus_one = new Monitor(rankA + 1, \"monitor_rankA_plus_one\", false, Mutex::_safepoint_check_always);\n+  Monitor* monitor_rankA = new Monitor(rankA, \"monitor_rankA\", Mutex::_safepoint_check_always);\n+  Monitor* monitor_rankA_plus_one = new Monitor(rankA + 1, \"monitor_rankA_plus_one\", Mutex::_safepoint_check_always);\n@@ -260,1 +260,1 @@\n-  Monitor* monitor_rank_special = new Monitor(Mutex::special, \"monitor_rank_special\", false, Mutex::_safepoint_check_never);\n+  Monitor* monitor_rank_special = new Monitor(Mutex::special, \"monitor_rank_special\", Mutex::_safepoint_check_never, false);\n","filename":"test\/hotspot\/gtest\/runtime\/test_mutex.cpp","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-  MutexLocker ml(new Mutex(Mutex::leaf, \"SFPT_Test_lock\", true, Mutex::_safepoint_check_always),\n+  MutexLocker ml(new Mutex(Mutex::leaf, \"SFPT_Test_lock\", Mutex::_safepoint_check_always),\n@@ -47,1 +47,1 @@\n-  MutexLocker ml(new Mutex(Mutex::special, \"SpecialTest_lock\", \/*vm_block*\/true, Mutex::_safepoint_check_always),\n+  MutexLocker ml(new Mutex(Mutex::special, \"SpecialTest_lock\", Mutex::_safepoint_check_always),\n","filename":"test\/hotspot\/gtest\/runtime\/test_safepoint_locks.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}