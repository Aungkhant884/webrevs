{"files":[{"patch":"@@ -136,1 +136,1 @@\n-  _metaspace_lock(new Mutex(Mutex::leaf+1, \"Metaspace allocation lock\", true,\n+  _metaspace_lock(new Mutex(Mutex::leaf+1, \"Metaspace allocation lock\",\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -170,1 +170,1 @@\n-    _lock(Mutex::leaf, \"G1 mapper lock\", true, Mutex::_safepoint_check_never) {\n+    _lock(Mutex::leaf, \"G1 mapper lock\", Mutex::_safepoint_check_never) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionToSpaceMapper.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-             true,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-  _m(Mutex::leaf + 1, FormatBuffer<128>(\"HeapRegionRemSet lock #%u\", hr->hrm_index()), true, Monitor::_safepoint_check_never),\n+  _m(Mutex::leaf + 1, FormatBuffer<128>(\"HeapRegionRemSet lock #%u\", hr->hrm_index()), Monitor::_safepoint_check_never),\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-                                       Mutex::_allow_vm_block_flag, Monitor::_safepoint_check_never);\n+                                       Monitor::_safepoint_check_never);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-                    true,\n","filename":"src\/hotspot\/share\/gc\/shared\/gcLogPrecious.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -817,1 +817,1 @@\n-  return new PaddedMutex(rank, name, true, Mutex::_safepoint_check_never);\n+  return new PaddedMutex(rank, name, Mutex::_safepoint_check_never);\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-  _blocker(Mutex::leaf, \"TaskTerminator\", false, Monitor::_safepoint_check_never),\n+  _blocker(Mutex::leaf, \"TaskTerminator\", Monitor::_safepoint_check_never),\n","filename":"src\/hotspot\/share\/gc\/shared\/taskTerminator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -269,1 +269,1 @@\n-  : _monitor(Mutex::safepoint, \"work gang barrier sync\", true,\n+  : _monitor(Mutex::safepoint, \"work gang barrier sync\",\n@@ -275,1 +275,1 @@\n-  : _monitor(Mutex::safepoint, name, true, Monitor::_safepoint_check_never),\n+  : _monitor(Mutex::safepoint, name, Monitor::_safepoint_check_never),\n","filename":"src\/hotspot\/share\/gc\/shared\/workgroup.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,1 +71,0 @@\n-             Monitor::_allow_vm_block_flag,\n","filename":"src\/hotspot\/share\/gc\/z\/zMessagePort.inline.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-    _monitor(Monitor::leaf, \"ZMetronome\", false, Monitor::_safepoint_check_never),\n+    _monitor(Monitor::leaf, \"ZMetronome\", Monitor::_safepoint_check_never),\n","filename":"src\/hotspot\/share\/gc\/z\/zMetronome.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-  Mutex* lock = new Mutex(Monitor::leaf, \"MetaspaceTestArea-lock\", false, Monitor::_safepoint_check_never);\n+  Mutex* lock = new Mutex(Monitor::leaf, \"MetaspaceTestArea-lock\", Monitor::_safepoint_check_never);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/testHelpers.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,2 +75,1 @@\n-  _lock(Mutex::nonleaf+1, \"JvmtiTagMap_lock\", Mutex::_allow_vm_block_flag,\n-        Mutex::_safepoint_check_never),\n+  _lock(Mutex::nonleaf+1, \"JvmtiTagMap_lock\", Mutex::_safepoint_check_never),\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -411,1 +411,1 @@\n-  _lock(Monitor::leaf, \"HandshakeState\", Mutex::_allow_vm_block_flag, Monitor::_safepoint_check_never),\n+  _lock(Monitor::leaf, \"HandshakeState\", Monitor::_safepoint_check_never),\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -290,0 +290,5 @@\n+\n+  \/\/ The allow_vm_block also includes allowing other non-Java threads to block or\n+  \/\/ allowing Java threads to block in native.\n+  assert(_safepoint_check_required == _safepoint_check_always || _allow_vm_block,\n+         \"Safepoint check never locks should always allow the vm to block\");\n@@ -293,4 +298,0 @@\n-Monitor::Monitor(int Rank, const char * name, bool allow_vm_block,\n-             SafepointCheckRequired safepoint_check_required) :\n-  Mutex(Rank, name, allow_vm_block, safepoint_check_required) {}\n-\n","filename":"src\/hotspot\/share\/runtime\/mutex.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -163,0 +163,3 @@\n+  Mutex(int rank, const char *name, SafepointCheckRequired safepoint_check_required) :\n+    Mutex(rank, name, safepoint_check_required == _safepoint_check_never ? true : false, safepoint_check_required) {}\n+\n@@ -202,3 +205,7 @@\n-   Monitor(int rank, const char *name, bool allow_vm_block = false,\n-         SafepointCheckRequired safepoint_check_required = _safepoint_check_always);\n-   \/\/ default destructor\n+  Monitor(int rank, const char *name, bool allow_vm_block = false,\n+         SafepointCheckRequired safepoint_check_required = _safepoint_check_always) :\n+    Mutex(rank, name, allow_vm_block, safepoint_check_required) {}\n+\n+  Monitor(int rank, const char *name, SafepointCheckRequired safepoint_check_required) :\n+    Mutex(rank, name, safepoint_check_required) {}\n+  \/\/ default destructor\n@@ -226,0 +233,2 @@\n+  PaddedMutex(int rank, const char *name, SafepointCheckRequired safepoint_check_required) :\n+    Mutex(rank, name, safepoint_check_required) {};\n@@ -238,0 +247,2 @@\n+  PaddedMonitor(int rank, const char *name, SafepointCheckRequired safepoint_check_required) :\n+    Monitor(rank, name, safepoint_check_required) {};\n","filename":"src\/hotspot\/share\/runtime\/mutex.hpp","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -291,1 +291,1 @@\n-  def(CompiledIC_lock              , PaddedMutex  , nonleaf+2,   false, _safepoint_check_never);      \/\/ locks VtableStubs_lock, InlineCacheBuffer_lock\n+  def(CompiledIC_lock              , PaddedMutex  , nonleaf+2,   true,  _safepoint_check_never);      \/\/ locks VtableStubs_lock, InlineCacheBuffer_lock\n@@ -298,1 +298,1 @@\n-  def(EscapeBarrier_lock           , PaddedMonitor, leaf,        false, _safepoint_check_never);  \/\/ Used to synchronize object reallocation\/relocking triggered by JVMTI\n+  def(EscapeBarrier_lock           , PaddedMonitor, leaf,        true,  _safepoint_check_never);  \/\/ Used to synchronize object reallocation\/relocking triggered by JVMTI\n@@ -316,1 +316,1 @@\n-    def(Compilation_lock           , PaddedMonitor, leaf,        false, _safepoint_check_never);\n+    def(Compilation_lock           , PaddedMonitor, leaf,        true,  _safepoint_check_never);\n@@ -322,1 +322,1 @@\n-  def(JfrStream_lock               , PaddedMutex  , nonleaf + 1, false, _safepoint_check_never);\n+  def(JfrStream_lock               , PaddedMutex  , nonleaf + 1, true,  _safepoint_check_never);\n@@ -328,1 +328,1 @@\n-  def(UnsafeJlong_lock             , PaddedMutex  , special,     false, _safepoint_check_never);\n+  def(UnsafeJlong_lock             , PaddedMutex  , special,     true,  _safepoint_check_never);\n@@ -350,1 +350,1 @@\n-  def(Bootclasspath_lock           , PaddedMutex  , leaf,        false, _safepoint_check_never);\n+  def(Bootclasspath_lock           , PaddedMutex  , leaf,        true,  _safepoint_check_never);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-    _lock(Mutex::tty - 1, \"stack_watermark_lock\", true, Mutex::_safepoint_check_never),\n+    _lock(Mutex::tty - 1, \"stack_watermark_lock\", Mutex::_safepoint_check_never),\n","filename":"src\/hotspot\/share\/runtime\/stackWatermark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -371,2 +371,1 @@\n-  Monitor timer(Mutex::leaf, \"VM_Exit timer\", true,\n-                Monitor::_safepoint_check_never);\n+  Monitor timer(Mutex::leaf, \"VM_Exit timer\", Monitor::_safepoint_check_never);\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-  _terminate_lock = new Monitor(Mutex::safepoint, \"VMThread::_terminate_lock\", true,\n+  _terminate_lock = new Monitor(Mutex::safepoint, \"VMThread::_terminate_lock\",\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -204,1 +204,1 @@\n-    true, Mutex::_safepoint_check_never)) {\n+    Mutex::_safepoint_check_never)) {\n","filename":"src\/hotspot\/share\/services\/heapDumperCompression.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-  _last_gc_lock = new Mutex(Mutex::leaf, \"_last_gc_lock\", true,\n+  _last_gc_lock = new Mutex(Mutex::leaf, \"_last_gc_lock\",\n","filename":"src\/hotspot\/share\/services\/memoryManager.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1017,1 +1017,1 @@\n-    new Mutex(Mutex::leaf, \"ConcurrentHashTable\", true,\n+    new Mutex(Mutex::leaf, \"ConcurrentHashTable\",\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,1 +103,1 @@\n-    _mutex(Mutex::event, name, true, Mutex::_safepoint_check_never),\n+    _mutex(Mutex::event, name, Mutex::_safepoint_check_never),\n","filename":"src\/hotspot\/share\/utilities\/events.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    _lock = new Mutex(Monitor::leaf, \"gtest-IsMetaspaceObjTest-lock\", false, Monitor::_safepoint_check_never);\n+    _lock = new Mutex(Monitor::leaf, \"gtest-IsMetaspaceObjTest-lock\", Monitor::_safepoint_check_never);\n","filename":"test\/hotspot\/gtest\/metaspace\/test_is_metaspace_obj.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-    _lock = new Mutex(Monitor::leaf, \"gtest-MetaspaceArenaTest-lock\", false, Monitor::_safepoint_check_never);\n+    _lock = new Mutex(Monitor::leaf, \"gtest-MetaspaceArenaTest-lock\", Monitor::_safepoint_check_never);\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metaspacearena.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-    _lock = new Mutex(Monitor::leaf, \"gtest-MetaspaceArenaTestBed-lock\", false, Monitor::_safepoint_check_never);\n+    _lock = new Mutex(Monitor::leaf, \"gtest-MetaspaceArenaTestBed-lock\", Monitor::_safepoint_check_never);\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metaspacearena_stress.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  m[i] = new Mutex(Mutex::leaf, FormatBuffer<128>(\"MyLock lock #%u\", i), true, Mutex::_safepoint_check_never);\n+  m[i] = new Mutex(Mutex::leaf, FormatBuffer<128>(\"MyLock lock #%u\", i), Mutex::_safepoint_check_never);\n@@ -137,2 +137,2 @@\n-  Mutex* mutex_rank_access = new Mutex(Mutex::access, \"mutex_rank_access\", false, Mutex::_safepoint_check_never);\n-  Mutex* mutex_rank_leaf = new Mutex(Mutex::leaf, \"mutex_rank_leaf\", false, Mutex::_safepoint_check_never);\n+  Mutex* mutex_rank_access = new Mutex(Mutex::access, \"mutex_rank_access\", Mutex::_safepoint_check_never);\n+  Mutex* mutex_rank_leaf = new Mutex(Mutex::leaf, \"mutex_rank_leaf\", Mutex::_safepoint_check_never);\n@@ -152,2 +152,2 @@\n-  Mutex* mutex_rank_tty = new Mutex(Mutex::tty, \"mutex_rank_tty\", false, Mutex::_safepoint_check_never);\n-  Mutex* mutex_rank_special = new Mutex(Mutex::special, \"mutex_rank_special\", false, Mutex::_safepoint_check_never);\n+  Mutex* mutex_rank_tty = new Mutex(Mutex::tty, \"mutex_rank_tty\", Mutex::_safepoint_check_never);\n+  Mutex* mutex_rank_special = new Mutex(Mutex::special, \"mutex_rank_special\", Mutex::_safepoint_check_never);\n@@ -213,2 +213,2 @@\n-  Monitor* monitor_rank_special = new Monitor(Mutex::special, \"monitor_rank_special\", false, Mutex::_safepoint_check_never);\n-  Monitor* monitor_rank_special_minus_one = new Monitor(Mutex::special - 1, \"monitor_rank_special_minus_one\", false, Mutex::_safepoint_check_never);\n+  Monitor* monitor_rank_special = new Monitor(Mutex::special, \"monitor_rank_special\", Mutex::_safepoint_check_never);\n+  Monitor* monitor_rank_special_minus_one = new Monitor(Mutex::special - 1, \"monitor_rank_special_minus_one\", Mutex::_safepoint_check_never);\n@@ -229,2 +229,2 @@\n-  Monitor* monitor_rank_tty = new Monitor(Mutex::tty, \"monitor_rank_tty\", false, Mutex::_safepoint_check_never);\n-  Monitor* monitor_rank_access = new Monitor(Mutex::access, \"monitor_rank_access\", false, Mutex::_safepoint_check_never);\n+  Monitor* monitor_rank_tty = new Monitor(Mutex::tty, \"monitor_rank_tty\", Mutex::_safepoint_check_never);\n+  Monitor* monitor_rank_access = new Monitor(Mutex::access, \"monitor_rank_access\", Mutex::_safepoint_check_never);\n@@ -245,2 +245,2 @@\n-  Monitor* monitor_rank_special = new Monitor(Mutex::special, \"monitor_rank_special\", false, Mutex::_safepoint_check_never);\n-  Monitor* monitor_rank_tty = new Monitor(Mutex::tty, \"monitor_rank_tty\", false, Mutex::_safepoint_check_never);\n+  Monitor* monitor_rank_special = new Monitor(Mutex::special, \"monitor_rank_special\", Mutex::_safepoint_check_never);\n+  Monitor* monitor_rank_tty = new Monitor(Mutex::tty, \"monitor_rank_tty\", Mutex::_safepoint_check_never);\n@@ -254,0 +254,10 @@\n+\n+TEST_VM_ASSERT_MSG(MutexRank, monitor_special_vm_block,\n+                   \".*Safepoint check never locks should always allow the vm to block\") {\n+  JavaThread* THREAD = JavaThread::current();\n+  ThreadInVMfromNative invm(THREAD);\n+\n+  Monitor* monitor_rank_special = new Monitor(Mutex::special, \"monitor_rank_special\", false, Mutex::_safepoint_check_never);\n+  monitor_rank_special->lock_without_safepoint_check();\n+  monitor_rank_special->unlock();\n+}\n","filename":"test\/hotspot\/gtest\/runtime\/test_mutex.cpp","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-  MutexLocker ml(new Mutex(Mutex::leaf, \"SFPT_Test_lock\", true, Mutex::_safepoint_check_never),\n+  MutexLocker ml(new Mutex(Mutex::leaf, \"SFPT_Test_lock\", Mutex::_safepoint_check_never),\n@@ -55,1 +55,1 @@\n-  MutexLocker ml(new Mutex(Mutex::special, \"SpecialTest_lock\", \/*vm_block*\/true, Mutex::_safepoint_check_never),\n+  MutexLocker ml(new Mutex(Mutex::special, \"SpecialTest_lock\", Mutex::_safepoint_check_never),\n","filename":"test\/hotspot\/gtest\/runtime\/test_safepoint_locks.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -199,1 +199,1 @@\n-  Mutex lock(Mutex::leaf, \"Test Lock\", true, Mutex::_safepoint_check_never);\n+  Mutex lock(Mutex::leaf, \"Test Lock\", Mutex::_safepoint_check_never);\n","filename":"test\/hotspot\/gtest\/utilities\/test_filterQueue.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}