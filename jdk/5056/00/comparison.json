{"files":[{"patch":"","filename":"test\/jdk\/tools\/jpackage\/apps\/Hello.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/tools\/jpackage\/apps\/image\/Hello.java","status":"renamed"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.stream.Stream;\n+\n+public class PrintEnv {\n+\n+    public static void main(String[] args) throws IOException {\n+        Path outputFile = Path.of(args[0]);\n+\n+        List<String> lines = printArgs(Stream.of(args).skip(1).toArray(String[]::new));\n+\n+        lines.forEach(System.out::println);\n+        Files.write(outputFile, lines);\n+    }\n+\n+    private static List<String> printArgs(String[] args) {\n+        List<String> lines = new ArrayList<>();\n+\n+        for (String arg : args) {\n+            if (arg.startsWith(PRINT_ENV_VAR)) {\n+                String name = arg.substring(PRINT_ENV_VAR.length());\n+                lines.add(name + \"=\" + System.getenv(name));\n+            } else if (arg.startsWith(PRINT_SYS_PROP)) {\n+                String name = arg.substring(PRINT_SYS_PROP.length());\n+                lines.add(name + \"=\" + System.getProperty(name));\n+            } else {\n+                throw new IllegalArgumentException();\n+            }\n+        }\n+\n+        return lines;\n+    }\n+\n+    private final static String PRINT_ENV_VAR = \"--print-env-var=\";\n+    private final static String PRINT_SYS_PROP = \"--print-sys-prop=\";\n+}\n","filename":"test\/jdk\/tools\/jpackage\/apps\/PrintEnv.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -1,113 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.BufferedWriter;\n-import java.io.File;\n-import java.io.FileWriter;\n-import java.io.PrintWriter;\n-import java.awt.Desktop;\n-import java.awt.desktop.OpenFilesEvent;\n-import java.awt.desktop.OpenFilesHandler;\n-import java.util.List;\n-\n-public class Hello implements OpenFilesHandler {\n-\n-    private static final String MSG = \"jpackage test application\";\n-    private static final int EXPECTED_NUM_OF_PARAMS = 3; \/\/ Starts at 1\n-    private static List<File> files;\n-\n-    public static void main(String[] args) {\n-        if(Desktop.getDesktop().isSupported(Desktop.Action.APP_OPEN_FILE)) {\n-            Desktop.getDesktop().setOpenFileHandler(new Hello());\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n-                e.printStackTrace();\n-            }\n-        }\n-        printToStdout(args);\n-        if (args.length == 1 || (files != null && files.size() == 1)) { \/\/ Called via file association\n-            printToFile(args);\n-        }\n-    }\n-\n-    private static void printToStdout(String[] args) {\n-        System.out.println(MSG);\n-\n-        System.out.println(\"args.length: \" + (files == null ? args.length : args.length + files.size()));\n-\n-        for (String arg : args) {\n-            System.out.println(arg);\n-        }\n-\n-        if (files != null) {\n-            for (File file : files) {\n-                System.out.println(file.getAbsolutePath());\n-            }\n-        }\n-\n-        for (int index = 1; index <= EXPECTED_NUM_OF_PARAMS; index++) {\n-            String value = System.getProperty(\"param\" + index);\n-            if (value != null) {\n-                System.out.println(\"-Dparam\" + index + \"=\" + value);\n-            }\n-        }\n-    }\n-\n-    private static void printToFile(String[] args) {\n-        File inputFile = files == null ? new File(args[0]) : files.get(0);\n-        String outputFile = inputFile.getParent() + File.separator + \"appOutput.txt\";\n-        File file = new File(outputFile);\n-\n-        try (PrintWriter out\n-                = new PrintWriter(new BufferedWriter(new FileWriter(file)))) {\n-            out.println(MSG);\n-\n-            out.println(\"args.length: \" + (files == null ? args.length : args.length + files.size()));\n-\n-            for (String arg : args) {\n-                out.println(arg);\n-            }\n-\n-            if (files != null) {\n-                for (File f : files) {\n-                    out.println(f.getAbsolutePath());\n-                }\n-            }\n-\n-            for (int index = 1; index <= EXPECTED_NUM_OF_PARAMS; index++) {\n-                String value = System.getProperty(\"param\" + index);\n-                if (value != null) {\n-                    out.println(\"-Dparam\" + index + \"=\" + value);\n-                }\n-            }\n-        } catch (Exception ex) {\n-            System.err.println(ex.getMessage());\n-        }\n-    }\n-\n-    @Override\n-    public void openFiles(OpenFilesEvent e) {\n-        files = e.getFiles();\n-    }\n-}\n","filename":"test\/jdk\/tools\/jpackage\/apps\/installer\/Hello.java","additions":0,"deletions":113,"binary":false,"changes":113,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,0 +59,2 @@\n+        final String srcClassName = appDesc.srcClassName();\n+\n@@ -86,1 +88,1 @@\n-        Pattern classNameRegex = Pattern.compile(\"\\\\bHello\\\\b\");\n+        Pattern classNameRegex = Pattern.compile(\"\\\\b\" + srcClassName + \"\\\\b\");\n@@ -88,1 +90,1 @@\n-                \"(^.*\\\\bclass\\\\s+)\\\\bHello\\\\b(.*$)\");\n+                \"(^.*\\\\bclass\\\\s+)\\\\b\" + srcClassName + \"\\\\b(.*$)\");\n@@ -100,1 +102,2 @@\n-        Files.write(srcFile, Files.readAllLines(HELLO_JAVA).stream().map(line -> {\n+        Files.write(srcFile,\n+                Files.readAllLines(appDesc.srcJavaPath()).stream().map(line -> {\n@@ -147,1 +150,2 @@\n-        if (moduleName == null && CLASS_NAME.equals(qualifiedClassName)) {\n+        if (moduleName == null && CLASS_NAME.equals(qualifiedClassName)\n+                && HELLO_JAVA.equals(appDesc.srcJavaPath())) {\n@@ -153,1 +157,1 @@\n-                            HELLO_JAVA).create();\n+                            appDesc.srcJavaPath()).create();\n@@ -162,1 +166,1 @@\n-            \/\/ Modular app in .jar file\n+            \/\/ Modular\/non-modular app in .jar file\n@@ -198,1 +202,1 @@\n-        return new JavaAppDesc().setClassName(CLASS_NAME).setBundleFileName(\"hello.jar\");\n+        return new JavaAppDesc().setSrcJavaPath(HELLO_JAVA).setClassName(CLASS_NAME).setBundleFileName(\"hello.jar\");\n@@ -465,1 +469,1 @@\n-            \"apps\/image\/Hello.java\");\n+            \"apps\/Hello.java\");\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/HelloApp.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,5 @@\n+    public JavaAppDesc setSrcJavaPath(Path v) {\n+        srcJavaPath = v;\n+        return this;\n+    }\n+\n@@ -58,0 +63,9 @@\n+    public Path srcJavaPath() {\n+        return srcJavaPath;\n+    }\n+\n+    public String srcClassName() {\n+        String fname = srcJavaPath().getFileName().toString();\n+        return fname.substring(0, fname.lastIndexOf('.'));\n+    }\n+\n@@ -116,0 +130,3 @@\n+        if (srcJavaPath != null) {\n+            sb.append(srcJavaPath.toString()).append('*');\n+        }\n@@ -138,1 +155,1 @@\n-     * [(jar_file|jmods_file|exploded_jmods_file):][module_name\/]qualified_class_name[!][@module_version].\n+     * [src_java_file*][(jar_file|jmods_file|exploded_jmods_file):][module_name\/]qualified_class_name[!][@module_version].\n@@ -171,0 +188,8 @@\n+        String srcJavaPathAndOther = Functional.identity(() -> {\n+            String[] components = javaAppDesc.split(\"\\\\*\", 2);\n+            if (components.length == 2) {\n+                desc.setSrcJavaPath(Path.of(components[0]));\n+            }\n+            return components[components.length - 1];\n+        }).get();\n+\n@@ -172,1 +197,1 @@\n-            String[] components = javaAppDesc.split(\":\", 2);\n+            String[] components = srcJavaPathAndOther.split(\":\", 2);\n@@ -209,0 +234,1 @@\n+    private Path srcJavaPath;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JavaAppDesc.java","additions":29,"deletions":3,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -188,0 +188,5 @@\n+        final String expectedMod = JavaAppDesc.parse(modularAppDesc.toString())\n+                .setBundleFileName(null)\n+                .setSrcJavaPath(null)\n+                .toString();\n+\n@@ -189,2 +194,1 @@\n-        .addRawProperties(Map.entry(\"module\", JavaAppDesc.parse(\n-                modularAppDesc.toString()).setBundleFileName(null).toString()))\n+        .addRawProperties(Map.entry(\"module\", expectedMod))\n@@ -211,2 +215,0 @@\n-        String expectedMod = JavaAppDesc.parse(\n-                modularAppDesc.toString()).setBundleFileName(null).toString();\n","filename":"test\/jdk\/tools\/jpackage\/share\/AddLauncherTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.Executor;\n+import jdk.jpackage.test.TKit;\n+\n+\/**\n+ * Tests values of environment variables altered by jpackage launcher.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Tests values of environment variables altered by jpackage launcher\n+ * @library ..\/helpers\n+ * @library \/test\/lib\n+ * @build AppLauncherEnvTest\n+ * @build jdk.jpackage.test.*\n+ * @build AppLauncherEnvTest\n+ * @modules jdk.jpackage\/jdk.jpackage.internal\n+ * @run main\/othervm -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=AppLauncherEnvTest\n+ *\/\n+public class AppLauncherEnvTest {\n+\n+    @Test\n+    public static void test() throws Exception {\n+        final String testAddDirProp = \"jpackage.test.AppDir\";\n+\n+        JPackageCommand cmd = JPackageCommand\n+                .helloAppImage(TEST_APP_JAVA + \"*Hello\")\n+                .addArguments(\"--java-options\", \"-D\" + testAddDirProp\n+                        + \"=$APPDIR\");\n+\n+        cmd.executeAndAssertImageCreated();\n+\n+        final String envVarName = envVarName();\n+\n+        Path outputFile = TKit.workDir().resolve(\"output.txt\");\n+\n+        final int attempts = 3;\n+        final int waitBetweenAttemptsSeconds = 5;\n+        List<String> output = new Executor()\n+                .saveOutput()\n+                .setExecutable(cmd.appLauncherPath().toAbsolutePath())\n+                .addArguments(outputFile.toString())\n+                .addArguments(\"--print-env-var=\" + envVarName)\n+                .addArguments(\"--print-sys-prop=\" + testAddDirProp)\n+                .addArguments(\"--print-sys-prop=\" + \"java.library.path\")\n+                .executeAndRepeatUntilExitCode(0, attempts,\n+                        waitBetweenAttemptsSeconds).getOutput();\n+\n+        BiFunction<Integer, String, String> getValue = (idx, name) -> {\n+            return  output.get(idx).substring((name + \"=\").length());\n+        };\n+\n+        final String actualEnvVarValue = getValue.apply(0, envVarName);\n+        final String appDir = getValue.apply(1, testAddDirProp);\n+\n+        final String expectedEnvVarValue = Optional.ofNullable(System.getenv(\n+                envVarName)).orElse(\"\") + File.pathSeparator + appDir;\n+\n+        TKit.assertEquals(expectedEnvVarValue, actualEnvVarValue, String.format(\n+                \"Check value of %s env variable\", envVarName));\n+\n+        final String javaLibraryPath = getValue.apply(2, \"java.library.path\");\n+        TKit.assertTrue(\n+                Set.of(javaLibraryPath.split(File.pathSeparator)).contains(\n+                        appDir), String.format(\n+                        \"Check java.library.path system property [%s] contains app dir [%s]\",\n+                        javaLibraryPath, appDir));\n+    }\n+\n+    private static String envVarName() {\n+        if (TKit.isLinux()) {\n+            return \"LD_LIBRARY_PATH\";\n+        } else if (TKit.isWindows()) {\n+            return \"PATH\";\n+        } else if (TKit.isOSX()) {\n+            return \"DYLD_LIBRARY_PATH\";\n+        } else {\n+            throw new IllegalStateException();\n+        }\n+    }\n+\n+    private static final Path TEST_APP_JAVA = TKit.TEST_SRC_ROOT.resolve(\n+            \"apps\/PrintEnv.java\");\n+}\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppLauncherEnvTest.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}