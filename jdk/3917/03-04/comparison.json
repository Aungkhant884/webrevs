{"files":[{"patch":"@@ -897,5 +897,5 @@\n-void Canonicalizer::do_RoundFP(RoundFP* x) {}\n-void Canonicalizer::do_UnsafeGetObject(UnsafeGetObject* x) {}\n-void Canonicalizer::do_UnsafePutObject(UnsafePutObject* x) {}\n-void Canonicalizer::do_UnsafeGetAndSetObject(UnsafeGetAndSetObject* x) {}\n-void Canonicalizer::do_ProfileCall(ProfileCall* x) {}\n+void Canonicalizer::do_RoundFP        (RoundFP*         x) {}\n+void Canonicalizer::do_UnsafeGet      (UnsafeGet*       x) {}\n+void Canonicalizer::do_UnsafePut      (UnsafePut*       x) {}\n+void Canonicalizer::do_UnsafeGetAndSet(UnsafeGetAndSet* x) {}\n+void Canonicalizer::do_ProfileCall    (ProfileCall*     x) {}\n@@ -903,2 +903,2 @@\n-void Canonicalizer::do_ProfileInvoke(ProfileInvoke* x) {}\n-void Canonicalizer::do_RuntimeCall(RuntimeCall* x) {}\n+void Canonicalizer::do_ProfileInvoke  (ProfileInvoke*   x) {}\n+void Canonicalizer::do_RuntimeCall    (RuntimeCall*     x) {}\n@@ -907,1 +907,1 @@\n-void Canonicalizer::do_Assert(Assert* x) {}\n+void Canonicalizer::do_Assert         (Assert*          x) {}\n@@ -909,1 +909,1 @@\n-void Canonicalizer::do_MemBar(MemBar* x) {}\n+void Canonicalizer::do_MemBar         (MemBar*          x) {}\n","filename":"src\/hotspot\/share\/c1\/c1_Canonicalizer.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -97,3 +97,3 @@\n-  virtual void do_UnsafeGetObject(UnsafeGetObject* x);\n-  virtual void do_UnsafePutObject(UnsafePutObject* x);\n-  virtual void do_UnsafeGetAndSetObject(UnsafeGetAndSetObject* x);\n+  virtual void do_UnsafeGet      (UnsafeGet*       x);\n+  virtual void do_UnsafePut      (UnsafePut*       x);\n+  virtual void do_UnsafeGetAndSet(UnsafeGetAndSet* x);\n","filename":"src\/hotspot\/share\/c1\/c1_Canonicalizer.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3152,4 +3152,4 @@\n-      get = append(new UnsafeGetObject(as_BasicType(local->type()), e,\n-                                       off_val,\n-                                       false\/*is_volatile*\/,\n-                                       true\/*is_raw*\/));\n+      get = append(new UnsafeGet(as_BasicType(local->type()), e,\n+                                 off_val,\n+                                 false\/*is_volatile*\/,\n+                                 true\/*is_raw*\/));\n@@ -3482,44 +3482,44 @@\n-  case vmIntrinsics::_getReference       : append_unsafe_get_obj(callee, T_OBJECT,  false); return;\n-  case vmIntrinsics::_getBoolean         : append_unsafe_get_obj(callee, T_BOOLEAN, false); return;\n-  case vmIntrinsics::_getByte            : append_unsafe_get_obj(callee, T_BYTE,    false); return;\n-  case vmIntrinsics::_getShort           : append_unsafe_get_obj(callee, T_SHORT,   false); return;\n-  case vmIntrinsics::_getChar            : append_unsafe_get_obj(callee, T_CHAR,    false); return;\n-  case vmIntrinsics::_getInt             : append_unsafe_get_obj(callee, T_INT,     false); return;\n-  case vmIntrinsics::_getLong            : append_unsafe_get_obj(callee, T_LONG,    false); return;\n-  case vmIntrinsics::_getFloat           : append_unsafe_get_obj(callee, T_FLOAT,   false); return;\n-  case vmIntrinsics::_getDouble          : append_unsafe_get_obj(callee, T_DOUBLE,  false); return;\n-  case vmIntrinsics::_putReference       : append_unsafe_put_obj(callee, T_OBJECT,  false); return;\n-  case vmIntrinsics::_putBoolean         : append_unsafe_put_obj(callee, T_BOOLEAN, false); return;\n-  case vmIntrinsics::_putByte            : append_unsafe_put_obj(callee, T_BYTE,    false); return;\n-  case vmIntrinsics::_putShort           : append_unsafe_put_obj(callee, T_SHORT,   false); return;\n-  case vmIntrinsics::_putChar            : append_unsafe_put_obj(callee, T_CHAR,    false); return;\n-  case vmIntrinsics::_putInt             : append_unsafe_put_obj(callee, T_INT,     false); return;\n-  case vmIntrinsics::_putLong            : append_unsafe_put_obj(callee, T_LONG,    false); return;\n-  case vmIntrinsics::_putFloat           : append_unsafe_put_obj(callee, T_FLOAT,   false); return;\n-  case vmIntrinsics::_putDouble          : append_unsafe_put_obj(callee, T_DOUBLE,  false); return;\n-  case vmIntrinsics::_getShortUnaligned  : append_unsafe_get_obj(callee, T_SHORT,   false); return;\n-  case vmIntrinsics::_getCharUnaligned   : append_unsafe_get_obj(callee, T_CHAR,    false); return;\n-  case vmIntrinsics::_getIntUnaligned    : append_unsafe_get_obj(callee, T_INT,     false); return;\n-  case vmIntrinsics::_getLongUnaligned   : append_unsafe_get_obj(callee, T_LONG,    false); return;\n-  case vmIntrinsics::_putShortUnaligned  : append_unsafe_put_obj(callee, T_SHORT,   false); return;\n-  case vmIntrinsics::_putCharUnaligned   : append_unsafe_put_obj(callee, T_CHAR,    false); return;\n-  case vmIntrinsics::_putIntUnaligned    : append_unsafe_put_obj(callee, T_INT,     false); return;\n-  case vmIntrinsics::_putLongUnaligned   : append_unsafe_put_obj(callee, T_LONG,    false); return;\n-  case vmIntrinsics::_getReferenceVolatile  : append_unsafe_get_obj(callee, T_OBJECT,  true); return;\n-  case vmIntrinsics::_getBooleanVolatile : append_unsafe_get_obj(callee, T_BOOLEAN, true); return;\n-  case vmIntrinsics::_getByteVolatile    : append_unsafe_get_obj(callee, T_BYTE,    true); return;\n-  case vmIntrinsics::_getShortVolatile   : append_unsafe_get_obj(callee, T_SHORT,   true); return;\n-  case vmIntrinsics::_getCharVolatile    : append_unsafe_get_obj(callee, T_CHAR,    true); return;\n-  case vmIntrinsics::_getIntVolatile     : append_unsafe_get_obj(callee, T_INT,     true); return;\n-  case vmIntrinsics::_getLongVolatile    : append_unsafe_get_obj(callee, T_LONG,    true); return;\n-  case vmIntrinsics::_getFloatVolatile   : append_unsafe_get_obj(callee, T_FLOAT,   true); return;\n-  case vmIntrinsics::_getDoubleVolatile  : append_unsafe_get_obj(callee, T_DOUBLE,  true); return;\n-  case vmIntrinsics::_putReferenceVolatile : append_unsafe_put_obj(callee, T_OBJECT,  true); return;\n-  case vmIntrinsics::_putBooleanVolatile : append_unsafe_put_obj(callee, T_BOOLEAN, true); return;\n-  case vmIntrinsics::_putByteVolatile    : append_unsafe_put_obj(callee, T_BYTE,    true); return;\n-  case vmIntrinsics::_putShortVolatile   : append_unsafe_put_obj(callee, T_SHORT,   true); return;\n-  case vmIntrinsics::_putCharVolatile    : append_unsafe_put_obj(callee, T_CHAR,    true); return;\n-  case vmIntrinsics::_putIntVolatile     : append_unsafe_put_obj(callee, T_INT,     true); return;\n-  case vmIntrinsics::_putLongVolatile    : append_unsafe_put_obj(callee, T_LONG,    true); return;\n-  case vmIntrinsics::_putFloatVolatile   : append_unsafe_put_obj(callee, T_FLOAT,   true); return;\n-  case vmIntrinsics::_putDoubleVolatile  : append_unsafe_put_obj(callee, T_DOUBLE,  true); return;\n+  case vmIntrinsics::_getReference           : append_unsafe_get(callee, T_OBJECT,  false); return;\n+  case vmIntrinsics::_getBoolean             : append_unsafe_get(callee, T_BOOLEAN, false); return;\n+  case vmIntrinsics::_getByte                : append_unsafe_get(callee, T_BYTE,    false); return;\n+  case vmIntrinsics::_getShort               : append_unsafe_get(callee, T_SHORT,   false); return;\n+  case vmIntrinsics::_getChar                : append_unsafe_get(callee, T_CHAR,    false); return;\n+  case vmIntrinsics::_getInt                 : append_unsafe_get(callee, T_INT,     false); return;\n+  case vmIntrinsics::_getLong                : append_unsafe_get(callee, T_LONG,    false); return;\n+  case vmIntrinsics::_getFloat               : append_unsafe_get(callee, T_FLOAT,   false); return;\n+  case vmIntrinsics::_getDouble              : append_unsafe_get(callee, T_DOUBLE,  false); return;\n+  case vmIntrinsics::_putReference           : append_unsafe_put(callee, T_OBJECT,  false); return;\n+  case vmIntrinsics::_putBoolean             : append_unsafe_put(callee, T_BOOLEAN, false); return;\n+  case vmIntrinsics::_putByte                : append_unsafe_put(callee, T_BYTE,    false); return;\n+  case vmIntrinsics::_putShort               : append_unsafe_put(callee, T_SHORT,   false); return;\n+  case vmIntrinsics::_putChar                : append_unsafe_put(callee, T_CHAR,    false); return;\n+  case vmIntrinsics::_putInt                 : append_unsafe_put(callee, T_INT,     false); return;\n+  case vmIntrinsics::_putLong                : append_unsafe_put(callee, T_LONG,    false); return;\n+  case vmIntrinsics::_putFloat               : append_unsafe_put(callee, T_FLOAT,   false); return;\n+  case vmIntrinsics::_putDouble              : append_unsafe_put(callee, T_DOUBLE,  false); return;\n+  case vmIntrinsics::_getShortUnaligned      : append_unsafe_get(callee, T_SHORT,   false); return;\n+  case vmIntrinsics::_getCharUnaligned       : append_unsafe_get(callee, T_CHAR,    false); return;\n+  case vmIntrinsics::_getIntUnaligned        : append_unsafe_get(callee, T_INT,     false); return;\n+  case vmIntrinsics::_getLongUnaligned       : append_unsafe_get(callee, T_LONG,    false); return;\n+  case vmIntrinsics::_putShortUnaligned      : append_unsafe_put(callee, T_SHORT,   false); return;\n+  case vmIntrinsics::_putCharUnaligned       : append_unsafe_put(callee, T_CHAR,    false); return;\n+  case vmIntrinsics::_putIntUnaligned        : append_unsafe_put(callee, T_INT,     false); return;\n+  case vmIntrinsics::_putLongUnaligned       : append_unsafe_put(callee, T_LONG,    false); return;\n+  case vmIntrinsics::_getReferenceVolatile   : append_unsafe_get(callee, T_OBJECT,  true); return;\n+  case vmIntrinsics::_getBooleanVolatile     : append_unsafe_get(callee, T_BOOLEAN, true); return;\n+  case vmIntrinsics::_getByteVolatile        : append_unsafe_get(callee, T_BYTE,    true); return;\n+  case vmIntrinsics::_getShortVolatile       : append_unsafe_get(callee, T_SHORT,   true); return;\n+  case vmIntrinsics::_getCharVolatile        : append_unsafe_get(callee, T_CHAR,    true); return;\n+  case vmIntrinsics::_getIntVolatile         : append_unsafe_get(callee, T_INT,     true); return;\n+  case vmIntrinsics::_getLongVolatile        : append_unsafe_get(callee, T_LONG,    true); return;\n+  case vmIntrinsics::_getFloatVolatile       : append_unsafe_get(callee, T_FLOAT,   true); return;\n+  case vmIntrinsics::_getDoubleVolatile      : append_unsafe_get(callee, T_DOUBLE,  true); return;\n+  case vmIntrinsics::_putReferenceVolatile   : append_unsafe_put(callee, T_OBJECT,  true); return;\n+  case vmIntrinsics::_putBooleanVolatile     : append_unsafe_put(callee, T_BOOLEAN, true); return;\n+  case vmIntrinsics::_putByteVolatile        : append_unsafe_put(callee, T_BYTE,    true); return;\n+  case vmIntrinsics::_putShortVolatile       : append_unsafe_put(callee, T_SHORT,   true); return;\n+  case vmIntrinsics::_putCharVolatile        : append_unsafe_put(callee, T_CHAR,    true); return;\n+  case vmIntrinsics::_putIntVolatile         : append_unsafe_put(callee, T_INT,     true); return;\n+  case vmIntrinsics::_putLongVolatile        : append_unsafe_put(callee, T_LONG,    true); return;\n+  case vmIntrinsics::_putFloatVolatile       : append_unsafe_put(callee, T_FLOAT,   true); return;\n+  case vmIntrinsics::_putDoubleVolatile      : append_unsafe_put(callee, T_DOUBLE,  true); return;\n@@ -3530,6 +3530,6 @@\n-  case vmIntrinsics::_getAndAddLong      : append_unsafe_get_and_set_obj(callee, true); return;\n-  case vmIntrinsics::_getAndSetInt       :\n-  case vmIntrinsics::_getAndSetLong      :\n-  case vmIntrinsics::_getAndSetReference : append_unsafe_get_and_set_obj(callee, false); return;\n-  case vmIntrinsics::_getCharStringU     : append_char_access(callee, false); return;\n-  case vmIntrinsics::_putCharStringU     : append_char_access(callee, true); return;\n+  case vmIntrinsics::_getAndAddLong          : append_unsafe_get_and_set(callee, true); return;\n+  case vmIntrinsics::_getAndSetInt           :\n+  case vmIntrinsics::_getAndSetLong          :\n+  case vmIntrinsics::_getAndSetReference     : append_unsafe_get_and_set(callee, false); return;\n+  case vmIntrinsics::_getCharStringU         : append_char_access(callee, false); return;\n+  case vmIntrinsics::_putCharStringU         : append_char_access(callee, true); return;\n@@ -4222,1 +4222,1 @@\n-void GraphBuilder::append_unsafe_get_obj(ciMethod* callee, BasicType t, bool is_volatile) {\n+void GraphBuilder::append_unsafe_get(ciMethod* callee, BasicType t, bool is_volatile) {\n@@ -4229,1 +4229,1 @@\n-  Instruction* op = append(new UnsafeGetObject(t, args->at(1), offset, is_volatile));\n+  Instruction* op = append(new UnsafeGet(t, args->at(1), offset, is_volatile));\n@@ -4235,1 +4235,1 @@\n-void GraphBuilder::append_unsafe_put_obj(ciMethod* callee, BasicType t, bool is_volatile) {\n+void GraphBuilder::append_unsafe_put(ciMethod* callee, BasicType t, bool is_volatile) {\n@@ -4247,1 +4247,1 @@\n-  Instruction* op = append(new UnsafePutObject(t, args->at(1), offset, val, is_volatile));\n+  Instruction* op = append(new UnsafePut(t, args->at(1), offset, val, is_volatile));\n@@ -4339,1 +4339,1 @@\n-void GraphBuilder::append_unsafe_get_and_set_obj(ciMethod* callee, bool is_add) {\n+void GraphBuilder::append_unsafe_get_and_set(ciMethod* callee, bool is_add) {\n@@ -4347,1 +4347,1 @@\n-  Instruction* op = append(new UnsafeGetAndSetObject(t, args->at(1), offset, args->at(3), is_add));\n+  Instruction* op = append(new UnsafeGetAndSet(t, args->at(1), offset, args->at(3), is_add));\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":60,"deletions":60,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -376,2 +376,2 @@\n-  void append_unsafe_get_obj(ciMethod* callee, BasicType t, bool is_volatile);\n-  void append_unsafe_put_obj(ciMethod* callee, BasicType t, bool is_volatile);\n+  void append_unsafe_get(ciMethod* callee, BasicType t, bool is_volatile);\n+  void append_unsafe_put(ciMethod* callee, BasicType t, bool is_volatile);\n@@ -379,1 +379,1 @@\n-  void append_unsafe_get_and_set_obj(ciMethod* callee, bool is_add);\n+  void append_unsafe_get_and_set(ciMethod* callee, bool is_add);\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -99,4 +99,3 @@\n-class     UnsafeObjectOp;\n-class       UnsafeGetObject;\n-class       UnsafePutObject;\n-class         UnsafeGetAndSetObject;\n+class     UnsafeGet;\n+class     UnsafePut;\n+class     UnsafeGetAndSet;\n@@ -197,3 +196,3 @@\n-  virtual void do_UnsafeGetObject(UnsafeGetObject* x) = 0;\n-  virtual void do_UnsafePutObject(UnsafePutObject* x) = 0;\n-  virtual void do_UnsafeGetAndSetObject(UnsafeGetAndSetObject* x) = 0;\n+  virtual void do_UnsafeGet      (UnsafeGet*       x) = 0;\n+  virtual void do_UnsafePut      (UnsafePut*       x) = 0;\n+  virtual void do_UnsafeGetAndSet(UnsafeGetAndSet* x) = 0;\n@@ -2256,1 +2255,4 @@\n-  BasicType _basic_type;    \/\/ ValueType can not express byte-sized integers\n+  Value _object;                                 \/\/ Object to be fetched from or mutated\n+  Value _offset;                                 \/\/ Offset within object\n+  bool  _is_volatile;                            \/\/ true if volatile - dl\/JSR166\n+  BasicType _basic_type;                         \/\/ ValueType can not express byte-sized integers\n@@ -2260,3 +2262,3 @@\n-  UnsafeOp(BasicType basic_type, bool is_put)\n-  : Instruction(is_put ? voidType : as_ValueType(basic_type))\n-  , _basic_type(basic_type)\n+  UnsafeOp(BasicType basic_type, Value object, Value offset, bool is_put, bool is_volatile)\n+    : Instruction(is_put ? voidType : as_ValueType(basic_type)),\n+    _object(object), _offset(offset), _is_volatile(is_volatile), _basic_type(basic_type)\n@@ -2273,18 +2275,0 @@\n-\n-  \/\/ generic\n-  virtual void input_values_do(ValueVisitor* f)   { }\n-};\n-\n-\n-BASE(UnsafeObjectOp, UnsafeOp)\n- private:\n-  Value _object;                                 \/\/ Object to be fetched from or mutated\n-  Value _offset;                                 \/\/ Offset within object\n-  bool  _is_volatile;                            \/\/ true if volatile - dl\/JSR166\n- public:\n-  UnsafeObjectOp(BasicType basic_type, Value object, Value offset, bool is_put, bool is_volatile)\n-    : UnsafeOp(basic_type, is_put), _object(object), _offset(offset), _is_volatile(is_volatile)\n-  {\n-  }\n-\n-  \/\/ accessors\n@@ -2294,0 +2278,1 @@\n+\n@@ -2295,3 +2280,2 @@\n-  virtual void input_values_do(ValueVisitor* f)   { UnsafeOp::input_values_do(f);\n-                                                   f->visit(&_object);\n-                                                   f->visit(&_offset); }\n+  virtual void input_values_do(ValueVisitor* f)   { f->visit(&_object);\n+                                                    f->visit(&_offset); }\n@@ -2300,2 +2284,1 @@\n-\n-LEAF(UnsafeGetObject, UnsafeObjectOp)\n+LEAF(UnsafeGet, UnsafeOp)\n@@ -2305,2 +2288,2 @@\n-  UnsafeGetObject(BasicType basic_type, Value object, Value offset, bool is_volatile)\n-  : UnsafeObjectOp(basic_type, object, offset, false, is_volatile)\n+  UnsafeGet(BasicType basic_type, Value object, Value offset, bool is_volatile)\n+  : UnsafeOp(basic_type, object, offset, false, is_volatile)\n@@ -2311,2 +2294,2 @@\n-  UnsafeGetObject(BasicType basic_type, Value object, Value offset, bool is_volatile, bool is_raw)\n-  : UnsafeObjectOp(basic_type, object, offset, false, is_volatile), _is_raw(is_raw)\n+  UnsafeGet(BasicType basic_type, Value object, Value offset, bool is_volatile, bool is_raw)\n+  : UnsafeOp(basic_type, object, offset, false, is_volatile), _is_raw(is_raw)\n@@ -2322,1 +2305,1 @@\n-LEAF(UnsafePutObject, UnsafeObjectOp)\n+LEAF(UnsafePut, UnsafeOp)\n@@ -2326,2 +2309,2 @@\n-  UnsafePutObject(BasicType basic_type, Value object, Value offset, Value value, bool is_volatile)\n-  : UnsafeObjectOp(basic_type, object, offset, true, is_volatile)\n+  UnsafePut(BasicType basic_type, Value object, Value offset, Value value, bool is_volatile)\n+  : UnsafeOp(basic_type, object, offset, true, is_volatile)\n@@ -2337,1 +2320,1 @@\n-  virtual void input_values_do(ValueVisitor* f)   { UnsafeObjectOp::input_values_do(f);\n+  virtual void input_values_do(ValueVisitor* f)   { UnsafeOp::input_values_do(f);\n@@ -2341,1 +2324,1 @@\n-LEAF(UnsafeGetAndSetObject, UnsafeObjectOp)\n+LEAF(UnsafeGetAndSet, UnsafeOp)\n@@ -2346,2 +2329,2 @@\n-  UnsafeGetAndSetObject(BasicType basic_type, Value object, Value offset, Value value, bool is_add)\n-  : UnsafeObjectOp(basic_type, object, offset, false, false)\n+  UnsafeGetAndSet(BasicType basic_type, Value object, Value offset, Value value, bool is_add)\n+  : UnsafeOp(basic_type, object, offset, false, false)\n@@ -2359,1 +2342,1 @@\n-  virtual void input_values_do(ValueVisitor* f)   { UnsafeObjectOp::input_values_do(f);\n+  virtual void input_values_do(ValueVisitor* f)   { UnsafeOp::input_values_do(f);\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.hpp","additions":29,"deletions":46,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -266,5 +266,0 @@\n-  output()->print(\".(\");\n-}\n-\n-void InstructionPrinter::print_unsafe_object_op(UnsafeObjectOp* op, const char* name) {\n-  print_unsafe_op(op, name);\n@@ -806,2 +801,2 @@\n-void InstructionPrinter::do_UnsafeGetObject(UnsafeGetObject* x) {\n-  print_unsafe_object_op(x, \"UnsafeGetObject\");\n+void InstructionPrinter::do_UnsafeGet(UnsafeGet* x) {\n+  print_unsafe_op(x, x->is_raw() ? \"UnsafeGet (raw)\" : \"UnsafeGet\");\n@@ -811,2 +806,2 @@\n-void InstructionPrinter::do_UnsafePutObject(UnsafePutObject* x) {\n-  print_unsafe_object_op(x, \"UnsafePutObject\");\n+void InstructionPrinter::do_UnsafePut(UnsafePut* x) {\n+  print_unsafe_op(x, \"UnsafePut\");\n@@ -818,2 +813,2 @@\n-void InstructionPrinter::do_UnsafeGetAndSetObject(UnsafeGetAndSetObject* x) {\n-  print_unsafe_object_op(x, x->is_add()?\"UnsafeGetAndSetObject (add)\":\"UnsafeGetAndSetObject\");\n+void InstructionPrinter::do_UnsafeGetAndSet(UnsafeGetAndSet* x) {\n+  print_unsafe_op(x, x->is_add()?\"UnsafeGetAndSet (add)\":\"UnsafeGetAndSet\");\n","filename":"src\/hotspot\/share\/c1\/c1_InstructionPrinter.cpp","additions":6,"deletions":11,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -77,1 +77,0 @@\n-  void print_unsafe_object_op(UnsafeObjectOp* op, const char* name);\n@@ -126,3 +125,3 @@\n-  virtual void do_UnsafeGetObject(UnsafeGetObject* x);\n-  virtual void do_UnsafePutObject(UnsafePutObject* x);\n-  virtual void do_UnsafeGetAndSetObject(UnsafeGetAndSetObject* x);\n+  virtual void do_UnsafeGet      (UnsafeGet*       x);\n+  virtual void do_UnsafePut      (UnsafePut*       x);\n+  virtual void do_UnsafeGetAndSet(UnsafeGetAndSet* x);\n","filename":"src\/hotspot\/share\/c1\/c1_InstructionPrinter.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2080,1 +2080,1 @@\n-void LIRGenerator::do_UnsafeGetObject(UnsafeGetObject* x) {\n+void LIRGenerator::do_UnsafeGet(UnsafeGet* x) {\n@@ -2122,1 +2122,1 @@\n-void LIRGenerator::do_UnsafePutObject(UnsafePutObject* x) {\n+void LIRGenerator::do_UnsafePut(UnsafePut* x) {\n@@ -2148,1 +2148,1 @@\n-void LIRGenerator::do_UnsafeGetAndSetObject(UnsafeGetAndSetObject* x) {\n+void LIRGenerator::do_UnsafeGetAndSet(UnsafeGetAndSet* x) {\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -588,3 +588,3 @@\n-  virtual void do_UnsafeGetObject(UnsafeGetObject* x);\n-  virtual void do_UnsafePutObject(UnsafePutObject* x);\n-  virtual void do_UnsafeGetAndSetObject(UnsafeGetAndSetObject* x);\n+  virtual void do_UnsafeGet      (UnsafeGet*       x);\n+  virtual void do_UnsafePut      (UnsafePut*       x);\n+  virtual void do_UnsafeGetAndSet(UnsafeGetAndSet* x);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -533,3 +533,3 @@\n-  void do_UnsafeGetObject(UnsafeGetObject* x);\n-  void do_UnsafePutObject(UnsafePutObject* x);\n-  void do_UnsafeGetAndSetObject(UnsafeGetAndSetObject* x);\n+  void do_UnsafeGet      (UnsafeGet*       x);\n+  void do_UnsafePut      (UnsafePut*       x);\n+  void do_UnsafeGetAndSet(UnsafeGetAndSet* x);\n@@ -717,3 +717,3 @@\n-void NullCheckVisitor::do_UnsafeGetObject(UnsafeGetObject* x) {}\n-void NullCheckVisitor::do_UnsafePutObject(UnsafePutObject* x) {}\n-void NullCheckVisitor::do_UnsafeGetAndSetObject(UnsafeGetAndSetObject* x) {}\n+void NullCheckVisitor::do_UnsafeGet      (UnsafeGet*       x) {}\n+void NullCheckVisitor::do_UnsafePut      (UnsafePut*       x) {}\n+void NullCheckVisitor::do_UnsafeGetAndSet(UnsafeGetAndSet* x) {}\n","filename":"src\/hotspot\/share\/c1\/c1_Optimizer.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -136,1 +136,0 @@\n-    void do_UnsafePutObject(UnsafePutObject* x) { \/* nothing to do *\/ };\n@@ -166,2 +165,3 @@\n-    void do_UnsafeGetObject(UnsafeGetObject* x) { \/* nothing to do *\/ };\n-    void do_UnsafeGetAndSetObject(UnsafeGetAndSetObject* x) { \/* nothing to do *\/ };\n+    void do_UnsafePut      (UnsafePut*       x) { \/* nothing to do *\/ };\n+    void do_UnsafeGet      (UnsafeGet*       x) { \/* nothing to do *\/ };\n+    void do_UnsafeGetAndSet(UnsafeGetAndSet* x) { \/* nothing to do *\/ };\n","filename":"src\/hotspot\/share\/c1\/c1_RangeCheckElimination.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -157,3 +157,3 @@\n-  void do_UnsafePutObject(UnsafePutObject* x) { kill_memory(); }\n-  void do_UnsafeGetAndSetObject(UnsafeGetAndSetObject* x) { kill_memory(); }\n-  void do_UnsafeGetObject(UnsafeGetObject* x) {\n+  void do_UnsafePut      (UnsafePut*       x) { kill_memory(); }\n+  void do_UnsafeGetAndSet(UnsafeGetAndSet* x) { kill_memory(); }\n+  void do_UnsafeGet      (UnsafeGet*       x) {\n","filename":"src\/hotspot\/share\/c1\/c1_ValueMap.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}