{"files":[{"patch":"@@ -53,1 +53,1 @@\n-    _monitoring_scope(monitoring_support, true \/* full_gc *\/, true \/* all_memory_pools_affected *\/),\n+    _monitoring_scope(monitoring_support),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCScope.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  G1MonitoringScope       _monitoring_scope;\n+  G1FullGCMonitoringScope _monitoring_scope;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCScope.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,0 +93,1 @@\n+  _conc_gc_memory_manager(\"G1 Concurrent GC\", \"end of concurrent GC pause\"),\n@@ -202,0 +203,2 @@\n+  _conc_gc_memory_manager.add_pool(_old_gen_pool);\n+\n@@ -213,1 +216,1 @@\n-  GrowableArray<GCMemoryManager*> memory_managers(2);\n+  GrowableArray<GCMemoryManager*> memory_managers(3);\n@@ -216,0 +219,1 @@\n+  memory_managers.append(&_conc_gc_memory_manager);\n@@ -347,1 +351,4 @@\n-G1MonitoringScope::G1MonitoringScope(G1MonitoringSupport* monitoring_support, bool full_gc, bool all_memory_pools_affected) :\n+G1MonitoringScope::G1MonitoringScope(G1MonitoringSupport* monitoring_support,\n+                                     CollectorCounters* collection_counters,\n+                                     GCMemoryManager* gc_memory_manager,\n+                                     bool all_memory_pools_affected) :\n@@ -349,2 +356,2 @@\n-  _tcs(full_gc ? monitoring_support->_full_collection_counters : monitoring_support->_incremental_collection_counters),\n-  _tms(full_gc ? &monitoring_support->_full_gc_memory_manager : &monitoring_support->_incremental_memory_manager,\n+  _tcs(collection_counters),\n+  _tms(gc_memory_manager,\n@@ -359,0 +366,20 @@\n+\n+G1YoungGCMonitoringScope::G1YoungGCMonitoringScope(G1MonitoringSupport* monitoring_support,\n+                                                   bool all_memory_pools_affected) :\n+  G1MonitoringScope(monitoring_support,\n+                    monitoring_support->_incremental_collection_counters,\n+                    &monitoring_support->_incremental_memory_manager,\n+                    all_memory_pools_affected) {\n+}\n+\n+G1FullGCMonitoringScope::G1FullGCMonitoringScope(G1MonitoringSupport* monitoring_support) :\n+  G1MonitoringScope(monitoring_support,\n+                    monitoring_support->_full_collection_counters,\n+                    &monitoring_support->_full_gc_memory_manager) {\n+}\n+\n+G1ConcGCMonitoringScope::G1ConcGCMonitoringScope(G1MonitoringSupport* monitoring_support) :\n+  G1MonitoringScope(monitoring_support,\n+                    monitoring_support->_conc_collection_counters,\n+                    &monitoring_support->_conc_gc_memory_manager) {\n+}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonitoringSupport.cpp","additions":31,"deletions":4,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -124,1 +124,3 @@\n-  friend class G1MonitoringScope;\n+  friend class G1YoungGCMonitoringScope;\n+  friend class G1FullGCMonitoringScope;\n+  friend class G1ConcGCMonitoringScope;\n@@ -131,0 +133,1 @@\n+  GCMemoryManager _conc_gc_memory_manager;\n@@ -213,4 +216,0 @@\n-  CollectorCounters* conc_collection_counters() {\n-    return _conc_collection_counters;\n-  }\n-\n@@ -245,1 +244,4 @@\n-  G1MonitoringScope(G1MonitoringSupport* monitoring_support, bool full_gc, bool all_memory_pools_affected);\n+  G1MonitoringScope(G1MonitoringSupport* monitoring_support,\n+                    CollectorCounters* collection_counters,\n+                    GCMemoryManager* gc_memory_manager,\n+                    bool all_memory_pools_affected = true);\n@@ -249,0 +251,17 @@\n+class G1YoungGCMonitoringScope : public G1MonitoringScope {\n+public:\n+  G1YoungGCMonitoringScope(G1MonitoringSupport* monitoring_support, bool all_memory_pools_affected);\n+  ~G1YoungGCMonitoringScope() { }\n+};\n+\n+class G1FullGCMonitoringScope : public G1MonitoringScope {\n+public:\n+  G1FullGCMonitoringScope(G1MonitoringSupport* monitoring_support);\n+  ~G1FullGCMonitoringScope() { }\n+};\n+\n+class G1ConcGCMonitoringScope : public G1MonitoringScope {\n+public:\n+  G1ConcGCMonitoringScope(G1MonitoringSupport* monitoring_support);\n+  ~G1ConcGCMonitoringScope() { }\n+};\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonitoringSupport.hpp","additions":25,"deletions":6,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-  TraceCollectorStats tcs(g1h->monitoring_support()->conc_collection_counters());\n+  G1ConcGCMonitoringScope monitoring_scope(g1h->monitoring_support());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1VMOperations.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1049,3 +1049,2 @@\n-  G1MonitoringScope ms(monitoring_support(),\n-                       false \/* full_gc *\/,\n-                       collector_state()->in_mixed_phase() \/* all_memory_pools_affected *\/);\n+  G1YoungGCMonitoringScope ms(monitoring_support(),\n+                              collector_state()->in_mixed_phase() \/* all_memory_pools_affected *\/);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -99,1 +99,2 @@\n-                     new GCBeanDescription(\"G1 Old Generation\",   new String[] {\"G1 Eden Space\", \"G1 Survivor Space\", \"G1 Old Gen\"}));\n+                     new GCBeanDescription(\"G1 Old Generation\",   new String[] {\"G1 Eden Space\", \"G1 Survivor Space\", \"G1 Old Gen\"}),\n+                     new GCBeanDescription(\"G1 Concurrent GC\",    new String[] {\"G1 Old Gen\"}));\n","filename":"test\/hotspot\/jtreg\/gc\/TestMemoryMXBeansAndPoolsPresence.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2022, Alibaba Group Holding Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc.g1;\n+\n+\/*\n+ * @test TestRemarkCleanupMXBean\n+ * @bug 8297247\n+ * @summary Test that Remark and Cleanup are correctly reported by\n+ *          a GarbageCollectorMXBean\n+ * @requires vm.gc.G1 & vm.compMode != \"Xcomp\"\n+ * @library \/test\/lib \/\n+ * @build   jdk.test.whitebox.WhiteBox\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run     driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -XX:+UseG1GC -Xlog:gc\n+ *                   -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   gc.g1.TestRemarkCleanupMXBean\n+ *\/\n+\n+import java.lang.management.GarbageCollectorMXBean;\n+import java.lang.management.ManagementFactory;\n+import jdk.test.whitebox.WhiteBox;\n+import jdk.test.whitebox.gc.GC;\n+import gc.testlibrary.g1.MixedGCProvoker;\n+\n+public class TestRemarkCleanupMXBean {\n+    public static void main(String[] args) throws Exception {\n+        GarbageCollectorMXBean g1ConcGCBean = null;\n+        String expectedName = \"G1 Concurrent GC\";\n+        for (GarbageCollectorMXBean bean : ManagementFactory.getGarbageCollectorMXBeans()) {\n+            if (expectedName.equals(bean.getName())) {\n+                g1ConcGCBean = bean;\n+                break;\n+            }\n+        }\n+        if (g1ConcGCBean == null) {\n+            throw new RuntimeException(\"Unable to find GC bean: \" + expectedName);\n+        }\n+\n+        long before = g1ConcGCBean.getCollectionCount();\n+        MixedGCProvoker.provokeConcMarkCycle();\n+        long after = g1ConcGCBean.getCollectionCount();\n+\n+        if (after >= before + 2) { \/\/ Must report a Remark and a Cleanup\n+            System.out.println(g1ConcGCBean.getName() + \" reports a difference \" +\n+                               after + \" - \" + before + \" = \" + (after - before));\n+        } else {\n+            throw new RuntimeException(\"Remark or Cleanup not reported by \" +\n+                                       g1ConcGCBean.getName());\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestRemarkCleanupMXBean.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -107,0 +107,4 @@\n+                } else if (info.getGcName().startsWith(\"G1\")) {\n+                    if (\"end of minor GC\".equals(info.getGcAction())) {\n+                        gcCount++;\n+                    }\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationTools.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,2 +76,1 @@\n-     * Provoke at least one mixed gc by starting a marking cycle, waiting for its end and triggering two GCs.\n-     * @param liveOldObjects The objects supposed to survive this marking cycle.\n+     * Provoke a concurrent mark cycle, and wait for it to end.\n@@ -79,1 +78,1 @@\n-    public static void provokeMixedGC(List<byte[]> liveOldObjects) {\n+    public static void provokeConcMarkCycle() {\n@@ -83,0 +82,8 @@\n+    }\n+\n+    \/**\n+     * Provoke at least one mixed gc by starting a marking cycle, waiting for its end and triggering two GCs.\n+     * @param liveOldObjects The objects supposed to survive this marking cycle.\n+     *\/\n+    public static void provokeMixedGC(List<byte[]> liveOldObjects) {\n+        provokeConcMarkCycle();\n","filename":"test\/hotspot\/jtreg\/gc\/testlibrary\/g1\/MixedGCProvoker.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,1 +32,5 @@\n- * @run     main\/othervm -Xms64m -Xmx64m GarbageCollectionNotificationContentTest\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\n+ * @build   jdk.test.whitebox.WhiteBox\n+ * @run     driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run     main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                       -Xms64m -Xmx64m GarbageCollectionNotificationContentTest\n@@ -45,0 +49,2 @@\n+import jdk.test.whitebox.gc.GC;\n+import gc.testlibrary.g1.MixedGCProvoker;\n@@ -103,0 +109,4 @@\n+        \/\/ Trigger G1's concurrent mark\n+        if (GC.G1.isSelected()) {\n+            MixedGCProvoker.provokeConcMarkCycle();\n+        }\n","filename":"test\/jdk\/com\/sun\/management\/GarbageCollectorMXBean\/GarbageCollectionNotificationContentTest.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,1 +32,5 @@\n- * @run     main\/othervm GarbageCollectionNotificationTest\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\n+ * @build   jdk.test.whitebox.WhiteBox\n+ * @run     driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run     main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                       GarbageCollectionNotificationTest\n@@ -45,0 +49,2 @@\n+import jdk.test.whitebox.gc.GC;\n+import gc.testlibrary.g1.MixedGCProvoker;\n@@ -102,0 +108,4 @@\n+        \/\/ Trigger G1's concurrent mark\n+        if (GC.G1.isSelected()) {\n+            MixedGCProvoker.provokeConcMarkCycle();\n+        }\n","filename":"test\/jdk\/com\/sun\/management\/GarbageCollectorMXBean\/GarbageCollectionNotificationTest.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @requires vm.gc != \"Z\" & vm.gc != \"Shenandoah\"\n+ * @requires vm.gc != \"Z\" & vm.gc != \"Shenandoah\" & !vm.gc.G1\n@@ -48,0 +48,12 @@\n+\/*\n+ * @test\n+ * @bug     4530538\n+ * @summary Basic unit test of MemoryMXBean.getMemoryPools() and\n+ *          MemoryMXBean.getMemoryManager().\n+ * @requires vm.gc.G1\n+ * @author  Mandy Chung\n+ *\n+ * @modules jdk.management\n+ * @run main MemoryTest 3 3\n+ *\/\n+\n","filename":"test\/jdk\/java\/lang\/management\/MemoryMXBean\/MemoryTest.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -178,0 +178,1 @@\n+        beanCollectorTypes.put(\"G1 Concurrent GC\", false);\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/GCHelper.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}