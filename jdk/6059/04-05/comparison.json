{"files":[{"patch":"@@ -68,2 +68,3 @@\n-    region_size = MAX2(max_heap_size \/ HeapRegionBounds::target_number(),\n-                       HeapRegionBounds::min_size());\n+    region_size = MIN2(MAX2(max_heap_size \/ HeapRegionBounds::target_number(),\n+                            HeapRegionBounds::min_size()),\n+                       HeapRegionBounds::max_ergonomics_size());\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+  \/\/ Maximum region size determined ergonomically.\n+  static const size_t MAX_ERGONOMICS_SIZE = 32 * 1024 * 1024;\n@@ -50,0 +52,1 @@\n+  static inline size_t max_ergonomics_size();\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionBounds.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,0 +34,4 @@\n+size_t HeapRegionBounds::max_ergonomics_size() {\n+  return MAX_ERGONOMICS_SIZE;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionBounds.inline.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,0 +90,1 @@\n+      checkG1HeapRegionSize(new String[] { \"-Xmx128g\" }, 32*M, 0);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1HeapRegionSize.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}