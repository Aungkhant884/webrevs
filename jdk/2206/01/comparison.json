{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,2 @@\n+bool ClassLoaderDataShared::_full_module_graph_loaded = false;\n+\n@@ -217,0 +219,1 @@\n+  _full_module_graph_loaded = true;\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataShared.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+  static bool _full_module_graph_loaded;\n@@ -46,0 +47,1 @@\n+  static bool is_full_module_graph_loaded() { return _full_module_graph_loaded; }\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataShared.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -225,2 +225,5 @@\n-  assert(ptr != NULL && *ptr != NULL, \"must have been allocated\");\n-  return *ptr;\n+  if (ptr != NULL) {\n+    return *ptr;\n+  } else {\n+    return NULL;\n+  }\n","filename":"src\/hotspot\/share\/classfile\/packageEntry.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1056,3 +1056,9 @@\n-PackageEntry* SystemDictionaryShared::get_package_entry_from_class_name(Handle class_loader, Symbol* class_name) {\n-  PackageEntry* pkg_entry = NULL;\n-  TempNewSymbol pkg_name = ClassLoader::package_from_class_name(class_name);\n+PackageEntry* SystemDictionaryShared::get_package_entry_from_class_name(InstanceKlass* ik, Handle class_loader) {\n+  PackageEntry* pkg_entry = ik->package();\n+  if (MetaspaceShared::use_full_module_graph() && ik->is_shared() && pkg_entry != NULL) {\n+    assert(MetaspaceShared::is_in_shared_metaspace(pkg_entry), \"must be\");\n+    assert(!ik->is_shared_unregistered_class(), \"unexpected archived package entry for an unregistered class\");\n+    assert(ik->module()->is_named(), \"unexpected archived package entry for a class in an unnamed module\");\n+    return pkg_entry;\n+  }\n+  TempNewSymbol pkg_name = ClassLoader::package_from_class_name(ik->name());\n@@ -1061,0 +1067,2 @@\n+  } else {\n+    pkg_entry = NULL;\n@@ -1075,1 +1083,1 @@\n-      PackageEntry* pkg_entry = get_package_entry_from_class_name(class_loader, class_name);\n+      PackageEntry* pkg_entry = get_package_entry_from_class_name(ik, class_loader);\n@@ -1175,1 +1183,1 @@\n-  PackageEntry* pkg_entry = get_package_entry_from_class_name(class_loader, ik->name());\n+  PackageEntry* pkg_entry = get_package_entry_from_class_name(ik, class_loader);\n@@ -1687,1 +1695,1 @@\n-  PackageEntry* pkg_entry = get_package_entry_from_class_name(class_loader, caller_ik->name());\n+  PackageEntry* pkg_entry = get_package_entry_from_class_name(caller_ik, class_loader);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -138,1 +138,1 @@\n-  static PackageEntry* get_package_entry_from_class_name(Handle class_loader, Symbol* class_name);\n+  static PackageEntry* get_package_entry_from_class_name(InstanceKlass* ik, Handle class_loader);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1847,0 +1847,5 @@\n+#if INCLUDE_CDS_JAVA_HEAP\n+  if (ClassLoaderDataShared::is_full_module_graph_loaded()) {\n+    return true;\n+  }\n+#endif\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2552,1 +2552,1 @@\n-  _package_entry = NULL;\n+  init_shared_package_entry();\n@@ -2565,0 +2565,21 @@\n+void InstanceKlass::init_shared_package_entry() {\n+#if !INCLUDE_CDS_JAVA_HEAP\n+  _package_entry = NULL;\n+#else\n+  if (!MetaspaceShared::use_full_module_graph()) {\n+    _package_entry = NULL;\n+  } else if (DynamicDumpSharedSpaces) {\n+    if (!MetaspaceShared::is_in_shared_metaspace(_package_entry)) {\n+      _package_entry = NULL;\n+    }\n+  } else {\n+    if (is_shared_unregistered_class()) {\n+      _package_entry = NULL;\n+    } else {\n+      _package_entry = PackageEntry::get_archived_entry(_package_entry);\n+    }\n+  }\n+  ArchivePtrMarker::mark_pointer((address**)&_package_entry);\n+#endif\n+}\n+\n@@ -2848,0 +2869,9 @@\n+  if (is_shared() && _package_entry == pkg_entry) {\n+    if (MetaspaceShared::use_full_module_graph()) {\n+      \/\/ we can use the saved package\n+      return;\n+    } else {\n+      _package_entry = NULL;\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"}]}