{"files":[{"patch":"@@ -73,6 +73,0 @@\n- *\n- * <p>There is a tool to load the saved .class file.\n- * The tool tries to load class using a number of class loaders. For more\n- * information, please see tool documentation: {@link vm.mlvm.tools.LoadClass}.\n- *\n- * @see vm.mlvm.tools.LoadClass\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/share\/StressClassLoadingTest.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -68,3 +68,0 @@\n- * <p>NB: There is a tool to load invalid classes saved by this test.\n- * Please see tool documentation at {@link vm.mlvm.tools.LoadClass}\n- *\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/byteMutation\/Test.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -65,3 +65,0 @@\n- * <p>NB: There is a tool to load invalid classes saved by this test.\n- * Please see tool documentation at {@link vm.mlvm.tools.LoadClass}.\n- *\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/randomBytecodes\/Test.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,114 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package vm.mlvm.tools;\n-\n-import java.io.File;\n-import vm.share.UnsafeAccess;\n-import vm.share.FileUtils;\n-import vm.mlvm.share.CustomClassLoaders;\n-import vm.mlvm.anonloader.share.AnonkTestee01;\n-\n-import vm.mlvm.share.Env;\n-\n-\/**\n- * A tool, which loads a class file specified in command line into VM using:\n- * <ul>\n- *   <li>A custom class loader,\n- *   <li>{@link sun.misc.Unsafe#defineAnonymousClass(Class, byte[], Object[])}\n- *   call.\n- * <\/ul>\n- *\n- * <p>Syntax:\n- * <pre>{@code\n- * $ java [options...] vm.mlvm.tool.LoadClass class-file-name [class-FQDN]\n- * }<\/pre>\n- *\n- * The first argument, class file name is mandatory.\n- * The second one is optional &mdash; a fully qualified class name.\n- * If the second argument is not specified, it is constructed from the first\n- * argument, replacing '\/' with '.'\n- *\n- * <p>The tool can be used for investigating failures of vm.mlvm.anon tests.\n- *\n- *\/\n-public class LoadClass {\n-\n-    private static final Class<?> HOST_CLASS = AnonkTestee01.class;\n-\n-    private static void usage() {\n-        System.out.println(\"Usage: java \" + LoadClass.class.getName()\n-                + \" <class-file-to-load> [class-name]\");\n-    }\n-\n-    \/**\n-     * Runs the tool.\n-     * @param args Tool arguments\n-     *\/\n-    @SuppressWarnings(\"deprecation\")\n-    public static void main(String[] args) {\n-        if (args.length < 1) {\n-            usage();\n-            System.exit(1);\n-        }\n-\n-        try {\n-            final String classFileName = args[0];\n-            final String className = (args.length > 1) ? args[1]\n-                    : classFileName.replaceAll(\"\\\\.class$\", \"\")\n-                            .replace(\"\/\", \".\");\n-            final byte[] classBytes = FileUtils\n-                    .readFile(new File(classFileName));\n-\n-            Env.traceImportant(\"Loading class '%s' from file '%s'...\",\n-                    className, classFileName);\n-\n-            Env.traceImportant(\"...using custom ClassLoader\");\n-            try {\n-                ClassLoader cl = CustomClassLoaders\n-                        .makeClassBytesLoader(classBytes, className);\n-                Class<?> c = cl.loadClass(className);\n-                c.newInstance();\n-                Env.traceImportant(\"OK\");\n-            } catch (Throwable e) {\n-                Env.traceImportant(e,\n-                        \"Couldn't load class '%s' via custom ClassLoader\",\n-                        classFileName);\n-            }\n-\n-            Env.traceImportant(\n-                    \"...using sun.misc.Unsafe.defineAnonymousClass():\");\n-            try {\n-                Class<?> c = UnsafeAccess.unsafe.defineAnonymousClass(HOST_CLASS,\n-                        classBytes, new Object[0]);\n-                c.newInstance();\n-                Env.traceImportant(\"OK\");\n-            } catch (Throwable e) {\n-                Env.traceImportant(e, \"Couldn't load class '%s' via sun.misc.\"\n-                        + \"Unsafe.defineAnonymousClass()\", classFileName);\n-            }\n-        } catch (Throwable e) {\n-            Env.traceImportant(e, \"Can't load class\");\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/tools\/LoadClass.java","additions":0,"deletions":114,"binary":false,"changes":114,"status":"deleted"}]}