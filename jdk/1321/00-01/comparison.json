{"files":[{"patch":"@@ -548,1 +548,1 @@\n-      bool walkable = has_mh && cur_frame.fp() != 0; \/\/ whether the traced frame should be walkable\n+      if (cur_frame.fp() != 0) {  \/\/ not walkable\n@@ -550,3 +550,1 @@\n-      if (walkable) {\n-\n-        \/\/ Robust search of trace_calling_frame (independant of inlining).\n+        \/\/ Robust search of trace_calling_frame (independent of inlining).\n@@ -564,8 +562,15 @@\n-        \/\/ The previous definition of walkable may have to be refined\n-        \/\/ if new call sites cause the next frame constructor to start\n-        \/\/ failing. Alternatively, frame constructors could be\n-        \/\/ modified to support the current or future non walkable\n-        \/\/ frames (but this is more intrusive and is not considered as\n-        \/\/ part of this RFE, which will instead use a simpler output).\n-        frame dump_frame = frame(dump_sp, dump_fp);\n-        dump_frame.describe(values, 1);\n+        if (has_mh) {\n+          \/\/ The previous definition of walkable may have to be refined\n+          \/\/ if new call sites cause the next frame constructor to start\n+          \/\/ failing. Alternatively, frame constructors could be\n+          \/\/ modified to support the current or future non walkable\n+          \/\/ frames (but this is more intrusive and is not considered as\n+          \/\/ part of this RFE, which will instead use a simpler output).\n+          frame dump_frame = frame(dump_sp, dump_fp);\n+          dump_frame.describe(values, 1);\n+        } else {\n+          \/\/ Stack may not be walkable (invalid PC above FP):\n+          \/\/ Add descriptions without building a Java frame to avoid issues\n+          values.describe(-1, dump_fp, \"fp for #1 <not parsed, cannot trust pc>\");\n+          values.describe(-1, dump_sp, \"sp for #1\");\n+        }\n","filename":"src\/hotspot\/cpu\/x86\/methodHandles_x86.cpp","additions":17,"deletions":12,"binary":false,"changes":29,"status":"modified"}]}