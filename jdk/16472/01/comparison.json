{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -131,62 +131,0 @@\n-    \/\/ TODO: needs to ported to jx.l.m.\n-    public TypeElement searchClass(TypeElement klass, String className) {\n-        TypeElement te;\n-\n-        \/\/ search by qualified name in current module first\n-        ModuleElement me = utils.containingModule(klass);\n-        if (me != null) {\n-            te = elementUtils.getTypeElement(me, className);\n-            if (te != null) {\n-                return te;\n-            }\n-        }\n-\n-        \/\/ search inner classes\n-        for (TypeElement ite : utils.getClasses(klass)) {\n-            TypeElement innerClass = searchClass(ite, className);\n-            if (innerClass != null) {\n-                return innerClass;\n-            }\n-        }\n-\n-        \/\/ check in this package\n-        te = utils.findClassInPackageElement(utils.containingPackage(klass), className);\n-        if (te != null) {\n-            return te;\n-        }\n-\n-        ClassSymbol tsym = (ClassSymbol)klass;\n-        \/\/ make sure that this symbol has been completed\n-        \/\/ TODO: do we need this anymore ?\n-        if (tsym.completer != null) {\n-            tsym.complete();\n-        }\n-\n-        \/\/ search imports\n-        if (tsym.sourcefile != null) {\n-\n-            \/\/### This information is available only for source classes.\n-            Env<AttrContext> compenv = toolEnv.getEnv(tsym);\n-            if (compenv == null) {\n-                return null;\n-            }\n-            Names names = tsym.name.table.names;\n-            Scope s = compenv.toplevel.namedImportScope;\n-            for (Symbol sym : s.getSymbolsByName(names.fromString(className))) {\n-                if (sym.kind == TYP) {\n-                    return (TypeElement)sym;\n-                }\n-            }\n-\n-            s = compenv.toplevel.starImportScope;\n-            for (Symbol sym : s.getSymbolsByName(names.fromString(className))) {\n-                if (sym.kind == TYP) {\n-                    return (TypeElement)sym;\n-                }\n-            }\n-        }\n-\n-        \/\/ finally, search by qualified name in all modules\n-        return elementUtils.getTypeElement(className);\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/WorkArounds.java","additions":1,"deletions":63,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -808,14 +808,0 @@\n-    \/**\n-     * Lookup for a class within this package.\n-     *\n-     * @return TypeElement of found class, or null if not found.\n-     *\/\n-    public TypeElement findClassInPackageElement(PackageElement pkg, String className) {\n-        for (TypeElement c : getAllClasses(pkg)) {\n-            if (getSimpleName(c).equals(className)) {\n-                return c;\n-            }\n-        }\n-        return null;\n-    }\n-\n@@ -837,24 +823,0 @@\n-    \/**\n-     * TODO: FIXME: port to javax.lang.model\n-     * Find a class within the context of this class. Search order: qualified name, in this class\n-     * (inner), in this package, in the class imports, in the package imports. Return the\n-     * TypeElement if found, null if not found.\n-     *\/\n-    \/\/### The specified search order is not the normal rule the\n-    \/\/### compiler would use.  Leave as specified or change it?\n-    public TypeElement findClass(Element element, String className) {\n-        TypeElement encl = getEnclosingTypeElement(element);\n-        TypeElement searchResult = configuration.workArounds.searchClass(encl, className);\n-        if (searchResult == null) {\n-            encl = getEnclosingTypeElement(encl);\n-            \/\/Expand search space to include enclosing class.\n-            while (encl != null && getEnclosingTypeElement(encl) != null) {\n-                encl = getEnclosingTypeElement(encl);\n-            }\n-            searchResult = encl == null\n-                    ? null\n-                    : configuration.workArounds.searchClass(encl, className);\n-        }\n-        return searchResult;\n-    }\n-\n@@ -1566,11 +1528,0 @@\n-    \/**\n-     * Returns the documented classes in an element,\n-     * such as a package element or type element.\n-     *\n-     * @param e the element\n-     * @return the classes\n-     *\/\n-    public List<TypeElement> getClasses(Element e) {\n-        return getDocumentedItems(e, CLASS, TypeElement.class);\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"modified"}]}