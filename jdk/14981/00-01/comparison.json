{"files":[{"patch":"@@ -240,0 +240,2 @@\n+    private native int readBytes0(byte[] b, int off, int len) throws IOException;\n+\n@@ -247,1 +249,24 @@\n-    private native int readBytes(byte[] b, int off, int len) throws IOException;\n+    private int readBytes(byte[] b, int off, int len) throws IOException {\n+        Objects.checkFromIndexSize(off, len, b.length);\n+        final int start = off;\n+        long comp = Blocker.begin();\n+        try {\n+            while (len > 0) {\n+                int n = readBytes0(b, off, len);\n+                if (n < 0) {\n+                    if (off == start)\n+                        return -1;\n+                    break;\n+                }\n+                off += n;\n+                len -= n;\n+            }\n+        } catch (IOException e) {\n+            \/\/ Throw only if no bytes have been read\n+            if (off == start)\n+                throw e;\n+        } finally {\n+            Blocker.end(comp);\n+        }\n+        return off - start;\n+    }\n@@ -262,6 +287,1 @@\n-        long comp = Blocker.begin();\n-        try {\n-            return readBytes(b, 0, b.length);\n-        } finally {\n-            Blocker.end(comp);\n-        }\n+        return readBytes(b, 0, b.length);\n@@ -286,7 +306,1 @@\n-        Objects.checkFromIndexSize(off, len, b.length);\n-        long comp = Blocker.begin();\n-        try {\n-            return readBytes(b, off, len);\n-        } finally {\n-            Blocker.end(comp);\n-        }\n+        return readBytes(b, off, len);\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileInputStream.java","additions":28,"deletions":14,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -303,1 +303,1 @@\n-    private native void write(int b, boolean append) throws IOException;\n+    private native void write0(int b, boolean append) throws IOException;\n@@ -317,1 +317,1 @@\n-            write(b, append);\n+            write0(b, append);\n@@ -323,0 +323,3 @@\n+    private native int writeBytes0(byte[] b, int off, int len, boolean append)\n+        throws IOException;\n+\n@@ -328,2 +331,0 @@\n-     * @param append {@code true} to first advance the position to the\n-     *     end of file\n@@ -332,2 +333,16 @@\n-    private native int writeBytes(byte[] b, int off, int len, boolean append)\n-        throws IOException;\n+    private void writeBytes(byte[] b, int off, int len)\n+        throws IOException\n+    {\n+        Objects.checkFromIndexSize(off, len, b.length);\n+        boolean append = FD_ACCESS.getAppend(fd);\n+        long comp = Blocker.begin();\n+        try {\n+            while (len > 0) {\n+                int n = writeBytes0(b, off, len, append);\n+                off += n;\n+                len -= n;\n+            }\n+        } finally {\n+            Blocker.end(comp);\n+        }\n+    }\n@@ -344,1 +359,1 @@\n-        write(b, 0, b.length);\n+        writeBytes(b, 0, b.length);\n@@ -359,14 +374,1 @@\n-        Objects.checkFromIndexSize(off, len, b.length);\n-        boolean append = FD_ACCESS.getAppend(fd);\n-        long comp = Blocker.begin();\n-        try {\n-            while (len > 0) {\n-                int n = writeBytes(b, off, len, append);\n-                if (n == -1)\n-                    break;\n-                off += n;\n-                len -= n;\n-            }\n-        } finally {\n-            Blocker.end(comp);\n-        }\n+        writeBytes(b, off, len);\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java","additions":23,"deletions":21,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -400,0 +400,1 @@\n+        final int start = off;\n@@ -402,1 +403,14 @@\n-            return readBytes0(b, off, len);\n+            while (len > 0) {\n+                int n = readBytes0(b, off, len);\n+                if (n < 0) {\n+                    if (off == start)\n+                        return -1;\n+                    break;\n+                }\n+                off += n;\n+                len -= n;\n+            }\n+        } catch (IOException e) {\n+            \/\/ Throw only if no bytes have been read\n+            if (off == start)\n+                throw e;\n@@ -406,0 +420,1 @@\n+        return off - start;\n@@ -577,2 +592,0 @@\n-                if (n == -1)\n-                    break;\n","filename":"src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-Java_java_io_FileInputStream_readBytes(JNIEnv *env, jobject this,\n+Java_java_io_FileInputStream_readBytes0(JNIEnv *env, jobject this,\n","filename":"src\/java.base\/share\/native\/libjava\/FileInputStream.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-Java_java_io_FileOutputStream_write(JNIEnv *env, jobject this, jint byte, jboolean append) {\n+Java_java_io_FileOutputStream_write0(JNIEnv *env, jobject this, jint byte, jboolean append) {\n@@ -68,1 +68,1 @@\n-Java_java_io_FileOutputStream_writeBytes(JNIEnv *env,\n+Java_java_io_FileOutputStream_writeBytes0(JNIEnv *env,\n","filename":"src\/java.base\/share\/native\/libjava\/FileOutputStream.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-#define MAX_MALLOC_SIZE 2097152\n+#define MAX_MALLOC_SIZE 1572864\n","filename":"src\/java.base\/share\/native\/libjava\/io_util.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}