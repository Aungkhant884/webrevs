{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Objects;\n@@ -285,0 +286,1 @@\n+        Objects.checkFromIndexSize(off, len, b.length);\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileInputStream.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.Objects;\n@@ -331,1 +332,1 @@\n-    private native void writeBytes(byte[] b, int off, int len, boolean append)\n+    private native int writeBytes(byte[] b, int off, int len, boolean append)\n@@ -343,7 +344,1 @@\n-        boolean append = FD_ACCESS.getAppend(fd);\n-        long comp = Blocker.begin();\n-        try {\n-            writeBytes(b, 0, b.length, append);\n-        } finally {\n-            Blocker.end(comp);\n-        }\n+        write(b, 0, b.length);\n@@ -364,0 +359,1 @@\n+        Objects.checkFromIndexSize(off, len, b.length);\n@@ -367,1 +363,7 @@\n-            writeBytes(b, off, len, append);\n+            while (len > 0) {\n+                int n = writeBytes(b, off, len, append);\n+                if (n == -1)\n+                    break;\n+                off += n;\n+                len -= n;\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.Objects;\n@@ -398,0 +399,1 @@\n+        Objects.checkFromIndexSize(off, len, b.length);\n@@ -570,0 +572,1 @@\n+        Objects.checkFromIndexSize(off, len, b.length);\n@@ -572,1 +575,7 @@\n-            writeBytes0(b, off, len);\n+            while (len > 0) {\n+                int n = writeBytes0(b, off, len);\n+                if (n == -1)\n+                    break;\n+                off += n;\n+                len -= n;\n+            }\n@@ -578,1 +587,1 @@\n-    private native void writeBytes0(byte[] b, int off, int len) throws IOException;\n+    private native int writeBytes0(byte[] b, int off, int len) throws IOException;\n","filename":"src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-JNIEXPORT void JNICALL\n+JNIEXPORT int JNICALL\n@@ -70,1 +70,1 @@\n-    writeBytes(env, this, bytes, off, len, append, fos_fd);\n+    return writeBytes(env, this, bytes, off, len, append, fos_fd);\n","filename":"src\/java.base\/share\/native\/libjava\/FileOutputStream.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-JNIEXPORT void JNICALL\n+JNIEXPORT int JNICALL\n@@ -89,1 +89,1 @@\n-    writeBytes(env, this, bytes, off, len, JNI_FALSE, raf_fd);\n+    return writeBytes(env, this, bytes, off, len, JNI_FALSE, raf_fd);\n","filename":"src\/java.base\/share\/native\/libjava\/RandomAccessFile.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,0 +60,4 @@\n+\/* The maximum size of a dynamically-allocated buffer.\n+ *\/\n+#define MAX_MALLOC_SIZE 2097152\n+\n@@ -79,1 +83,1 @@\n-    char *buf = NULL;\n+    char *buf = stackBuf;\n@@ -95,1 +99,3 @@\n-        buf = malloc(len);\n+        if (len > MAX_MALLOC_SIZE)\n+            len = MAX_MALLOC_SIZE;\n+        buf = (char*)malloc(len*sizeof(char));\n@@ -100,2 +106,0 @@\n-    } else {\n-        buf = stackBuf;\n@@ -119,1 +123,1 @@\n-    if (buf != stackBuf) {\n+    if (buf != stackBuf)\n@@ -121,1 +125,1 @@\n-    }\n+\n@@ -145,1 +149,1 @@\n-void\n+int\n@@ -149,1 +153,1 @@\n-    jint n;\n+    jint nwritten = -1;\n@@ -151,1 +155,1 @@\n-    char *buf = NULL;\n+    char *buf = stackBuf;\n@@ -156,1 +160,1 @@\n-        return;\n+        return -1;\n@@ -161,1 +165,1 @@\n-        return;\n+        return -1;\n@@ -165,1 +169,1 @@\n-        return;\n+        return 0;\n@@ -167,1 +171,3 @@\n-        buf = malloc(len);\n+        if (len > MAX_MALLOC_SIZE)\n+            len = MAX_MALLOC_SIZE;\n+        buf = (char*)malloc(len*sizeof(char));\n@@ -170,1 +176,1 @@\n-            return;\n+            return 0;\n@@ -172,2 +178,0 @@\n-    } else {\n-        buf = stackBuf;\n@@ -179,18 +183,13 @@\n-        off = 0;\n-        while (len > 0) {\n-            fd = getFD(env, this, fid);\n-            if (fd == -1) {\n-                JNU_ThrowIOException(env, \"Stream Closed\");\n-                break;\n-            }\n-            if (append == JNI_TRUE) {\n-                n = IO_Append(fd, buf+off, len);\n-            } else {\n-                n = IO_Write(fd, buf+off, len);\n-            }\n-            if (n == -1) {\n-                JNU_ThrowIOExceptionWithLastError(env, \"Write error\");\n-                break;\n-            }\n-            off += n;\n-            len -= n;\n+        fd = getFD(env, this, fid);\n+        if (fd == -1) {\n+            JNU_ThrowIOException(env, \"Stream Closed\");\n+            nwritten = -1;\n+        } else {\n+             if (append == JNI_TRUE) {\n+                 nwritten = IO_Append(fd, buf, len);\n+             } else {\n+                 nwritten = IO_Write(fd, buf, len);\n+             }\n+             if (nwritten == -1) {\n+                 JNU_ThrowIOExceptionWithLastError(env, \"Write error\");\n+             }\n@@ -199,1 +198,2 @@\n-    if (buf != stackBuf) {\n+\n+    if (buf != stackBuf)\n@@ -201,1 +201,2 @@\n-    }\n+\n+    return nwritten;\n","filename":"src\/java.base\/share\/native\/libjava\/io_util.c","additions":37,"deletions":36,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-void writeBytes(JNIEnv *env, jobject this, jbyteArray bytes, jint off,\n+int writeBytes(JNIEnv *env, jobject this, jbyteArray bytes, jint off,\n","filename":"src\/java.base\/share\/native\/libjava\/io_util.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}