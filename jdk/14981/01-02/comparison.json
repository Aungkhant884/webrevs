{"files":[{"patch":"@@ -251,1 +251,3 @@\n-        final int start = off;\n+        int nread = 0;\n+        int pos = off;\n+        int remaining = len;\n@@ -254,6 +256,22 @@\n-            while (len > 0) {\n-                int n = readBytes0(b, off, len);\n-                if (n < 0) {\n-                    if (off == start)\n-                        return -1;\n-                    break;\n+            do {\n+                int size = Math.min(remaining, 1572864);\n+                try {\n+                    int n = readBytes0(b, pos, size);\n+                    if (n < 0) {\n+                        \/\/ EOF\n+                        if (nread == 0)\n+                            nread = -1;\n+                        break;\n+                    }\n+                    nread += n;\n+                    if (n < size) {\n+                        \/\/ buffer not filled\n+                        break;\n+                    }\n+                    pos += n;\n+                    remaining -= n;\n+                } catch (IOException ioe) {\n+                    if (nread > 0) {\n+                        break;\n+                    }\n+                    throw ioe;\n@@ -261,7 +279,1 @@\n-                off += n;\n-                len -= n;\n-            }\n-        } catch (IOException e) {\n-            \/\/ Throw only if no bytes have been read\n-            if (off == start)\n-                throw e;\n+            } while (remaining > 0);\n@@ -271,1 +283,1 @@\n-        return off - start;\n+        return nread;\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileInputStream.java","additions":27,"deletions":15,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -338,0 +338,2 @@\n+        int pos = off;\n+        int remaining = len;\n@@ -340,5 +342,6 @@\n-            while (len > 0) {\n-                int n = writeBytes0(b, off, len, append);\n-                off += n;\n-                len -= n;\n-            }\n+            do {\n+                int size = Math.min(remaining, 1572864);\n+                int n = writeBytes0(b, pos, size, append);\n+                pos += n;\n+                remaining -= n;\n+            } while (remaining > 0);\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -400,1 +400,3 @@\n-        final int start = off;\n+        int nread = 0;\n+        int pos = off;\n+        int remaining = len;\n@@ -403,6 +405,22 @@\n-            while (len > 0) {\n-                int n = readBytes0(b, off, len);\n-                if (n < 0) {\n-                    if (off == start)\n-                        return -1;\n-                    break;\n+            do {\n+                int size = Math.min(remaining, 1572864);\n+                try {\n+                    int n = readBytes0(b, pos, size);\n+                    if (n < 0) {\n+                        \/\/ EOF\n+                        if (nread == 0)\n+                            nread = -1;\n+                        break;\n+                    }\n+                    nread += n;\n+                    if (n < size) {\n+                        \/\/ buffer not filled\n+                        break;\n+                    }\n+                    pos += n;\n+                    remaining -= n;\n+                } catch (IOException ioe) {\n+                    if (nread > 0) {\n+                        break;\n+                    }\n+                    throw ioe;\n@@ -410,7 +428,1 @@\n-                off += n;\n-                len -= n;\n-            }\n-        } catch (IOException e) {\n-            \/\/ Throw only if no bytes have been read\n-            if (off == start)\n-                throw e;\n+            } while (remaining > 0);\n@@ -420,1 +432,1 @@\n-        return off - start;\n+        return nread;\n@@ -588,0 +600,2 @@\n+        int pos = off;\n+        int remaining = len;\n@@ -590,5 +604,6 @@\n-            while (len > 0) {\n-                int n = writeBytes0(b, off, len);\n-                off += n;\n-                len -= n;\n-            }\n+            do {\n+                int size = Math.min(remaining, 1572864);\n+                int n = writeBytes0(b, pos, size);\n+                pos += n;\n+                remaining -= n;\n+            } while (remaining > 0);\n","filename":"src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java","additions":35,"deletions":20,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -60,4 +60,0 @@\n-\/* The maximum size of a dynamically-allocated buffer.\n- *\/\n-#define MAX_MALLOC_SIZE 1572864\n-\n@@ -83,1 +79,1 @@\n-    char *buf = stackBuf;\n+    char *buf = NULL;\n@@ -99,3 +95,1 @@\n-        if (len > MAX_MALLOC_SIZE)\n-            len = MAX_MALLOC_SIZE;\n-        buf = (char*)malloc(len*sizeof(char));\n+        buf = (char*)malloc(len * sizeof(char));\n@@ -106,0 +100,2 @@\n+    } else {\n+        buf = stackBuf;\n@@ -123,1 +119,1 @@\n-    if (buf != stackBuf)\n+    if (buf != stackBuf) {\n@@ -125,0 +121,1 @@\n+    }\n@@ -155,1 +152,1 @@\n-    char *buf = stackBuf;\n+    char *buf = NULL;\n@@ -171,3 +168,1 @@\n-        if (len > MAX_MALLOC_SIZE)\n-            len = MAX_MALLOC_SIZE;\n-        buf = (char*)malloc(len*sizeof(char));\n+        buf = (char*)malloc(len * sizeof(char));\n@@ -178,0 +173,2 @@\n+    } else {\n+        buf = stackBuf;\n@@ -199,1 +196,1 @@\n-    if (buf != stackBuf)\n+    if (buf != stackBuf) {\n@@ -201,0 +198,1 @@\n+    }\n","filename":"src\/java.base\/share\/native\/libjava\/io_util.c","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"}]}