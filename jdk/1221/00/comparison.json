{"files":[{"patch":"@@ -1457,0 +1457,1 @@\n+            super.visitNewClass(tree);\n@@ -1461,1 +1462,0 @@\n-            super.visitNewClass(tree);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2830,1 +2830,8 @@\n-            translate(tree.def);\n+            Map<Symbol, Symbol> prevLambdaTranslationMap = lambdaTranslationMap;\n+            try {\n+                lambdaTranslationMap = null;\n+                translate(tree.def);\n+            } finally {\n+                lambdaTranslationMap = prevLambdaTranslationMap;\n+            }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8229862\n+ * @summary Verifying lambdas anonymous classes whose supertype captures works.\n+ * @compile LambdaConv30.java\n+ * @run main LambdaConv30\n+ *\/\n+public class LambdaConv30 {\n+\n+     public static void main(String[] args) {\n+        Integer a = 1;\n+        class Inner {\n+            int i;\n+            Inner(int i) {\n+                this.i = i;\n+            }\n+\n+            public int result() {\n+                return a * 1000 + i;\n+            }\n+        }\n+        SAM s = v -> new Inner(v) { }.result();\n+        if (s.m(2) != 1002) {\n+            throw new AssertionError(\"Unexpected value!\");\n+        }\n+     }\n+\n+     interface SAM {\n+         int m(int v);\n+     }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/LambdaConv30.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}