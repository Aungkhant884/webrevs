{"files":[{"patch":"@@ -1281,2 +1281,2 @@\n-  static int emit_exception_handler(CodeBuffer &cbuf);\n-  static int emit_deopt_handler(CodeBuffer& cbuf);\n+  static int emit_exception_handler(C2_MacroAssembler &masm);\n+  static int emit_deopt_handler(C2_MacroAssembler &masm);\n@@ -1740,1 +1740,1 @@\n-#define __ _masm.\n+#define __ masm.\n@@ -1795,2 +1795,1 @@\n-void MachBreakpointNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachBreakpointNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -1812,2 +1811,1 @@\n-  void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc*) const {\n-    C2_MacroAssembler _masm(&cbuf);\n+  void MachNopNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc*) const {\n@@ -1835,1 +1833,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n+void MachConstantBaseNode::emit(C2_MacroAssembler& masm, PhaseRegAlloc* ra_) const {\n@@ -1889,1 +1887,1 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachPrologNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -1891,1 +1889,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1923,1 +1920,1 @@\n-    bs->nmethod_entry_barrier(&_masm);\n+    bs->nmethod_entry_barrier(&masm);\n@@ -1930,1 +1927,1 @@\n-  C->output()->set_frame_complete(cbuf.insts_size());\n+  C->output()->set_frame_complete(masm.offset());\n@@ -1984,1 +1981,1 @@\n-void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachEpilogNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -1986,1 +1983,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -2056,1 +2052,1 @@\n-uint MachSpillCopyNode::implementation(CodeBuffer *cbuf, PhaseRegAlloc *ra_, bool do_size, outputStream *st) const {\n+uint MachSpillCopyNode::implementation(C2_MacroAssembler *masm, PhaseRegAlloc *ra_, bool do_size, outputStream *st) const {\n@@ -2089,2 +2085,1 @@\n-    if (ireg == Op_VecA && cbuf) {\n-      C2_MacroAssembler _masm(cbuf);\n+    if (ireg == Op_VecA && masm) {\n@@ -2094,1 +2089,1 @@\n-        __ spill_copy_sve_vector_stack_to_stack(src_offset, dst_offset,\n+        masm->spill_copy_sve_vector_stack_to_stack(src_offset, dst_offset,\n@@ -2097,1 +2092,1 @@\n-        __ spill_sve_vector(as_FloatRegister(Matcher::_regEncode[src_lo]), ra_->reg2offset(dst_lo),\n+        masm->spill_sve_vector(as_FloatRegister(Matcher::_regEncode[src_lo]), ra_->reg2offset(dst_lo),\n@@ -2100,1 +2095,1 @@\n-        __ unspill_sve_vector(as_FloatRegister(Matcher::_regEncode[dst_lo]), ra_->reg2offset(src_lo),\n+        masm->unspill_sve_vector(as_FloatRegister(Matcher::_regEncode[dst_lo]), ra_->reg2offset(src_lo),\n@@ -2103,1 +2098,1 @@\n-        __ sve_orr(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n+        masm->sve_orr(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n@@ -2109,1 +2104,1 @@\n-    } else if (cbuf) {\n+    } else if (masm) {\n@@ -2111,1 +2106,0 @@\n-      C2_MacroAssembler _masm(cbuf);\n@@ -2117,2 +2111,2 @@\n-          __ unspill(rscratch1, true, src_offset);\n-          __ spill(rscratch1, true, dst_offset);\n+          masm->unspill(rscratch1, true, src_offset);\n+          masm->spill(rscratch1, true, dst_offset);\n@@ -2120,1 +2114,1 @@\n-          __ spill_copy128(src_offset, dst_offset);\n+          masm->spill_copy128(src_offset, dst_offset);\n@@ -2123,2 +2117,2 @@\n-        __ mov(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n-               ireg == Op_VecD ? __ T8B : __ T16B,\n+        masm->mov(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n+               ireg == Op_VecD ? masm->T8B : masm->T16B,\n@@ -2127,2 +2121,2 @@\n-        __ spill(as_FloatRegister(Matcher::_regEncode[src_lo]),\n-                 ireg == Op_VecD ? __ D : __ Q,\n+        masm->spill(as_FloatRegister(Matcher::_regEncode[src_lo]),\n+                 ireg == Op_VecD ? masm->D : masm->Q,\n@@ -2131,2 +2125,2 @@\n-        __ unspill(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n-                   ireg == Op_VecD ? __ D : __ Q,\n+        masm->unspill(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n+                   ireg == Op_VecD ? masm->D : masm->Q,\n@@ -2138,2 +2132,1 @@\n-  } else if (cbuf) {\n-    C2_MacroAssembler _masm(cbuf);\n+  } else if (masm) {\n@@ -2144,1 +2137,1 @@\n-            __ mov(as_Register(Matcher::_regEncode[dst_lo]),\n+            masm->mov(as_Register(Matcher::_regEncode[dst_lo]),\n@@ -2147,2 +2140,1 @@\n-            C2_MacroAssembler _masm(cbuf);\n-            __ movw(as_Register(Matcher::_regEncode[dst_lo]),\n+            masm->movw(as_Register(Matcher::_regEncode[dst_lo]),\n@@ -2153,1 +2145,1 @@\n-            __ fmovd(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n+            masm->fmovd(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n@@ -2156,1 +2148,1 @@\n-            __ fmovs(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n+            masm->fmovs(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n@@ -2161,1 +2153,1 @@\n-        __ spill(as_Register(Matcher::_regEncode[src_lo]), is64, dst_offset);\n+        masm->spill(as_Register(Matcher::_regEncode[src_lo]), is64, dst_offset);\n@@ -2167,1 +2159,1 @@\n-            __ fmovd(as_Register(Matcher::_regEncode[dst_lo]),\n+            masm->fmovd(as_Register(Matcher::_regEncode[dst_lo]),\n@@ -2170,1 +2162,1 @@\n-            __ fmovs(as_Register(Matcher::_regEncode[dst_lo]),\n+            masm->fmovs(as_Register(Matcher::_regEncode[dst_lo]),\n@@ -2175,1 +2167,1 @@\n-            __ fmovd(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n+            masm->fmovd(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n@@ -2178,1 +2170,1 @@\n-            __ fmovs(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n+            masm->fmovs(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n@@ -2183,2 +2175,2 @@\n-        __ spill(as_FloatRegister(Matcher::_regEncode[src_lo]),\n-                 is64 ? __ D : __ S, dst_offset);\n+        masm->spill(as_FloatRegister(Matcher::_regEncode[src_lo]),\n+                 is64 ? masm->D : masm->S, dst_offset);\n@@ -2189,1 +2181,1 @@\n-        __ unspill(as_Register(Matcher::_regEncode[dst_lo]), is64, src_offset);\n+        masm->unspill(as_Register(Matcher::_regEncode[dst_lo]), is64, src_offset);\n@@ -2191,2 +2183,2 @@\n-        __ unspill(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n-                   is64 ? __ D : __ S, src_offset);\n+        masm->unspill(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n+                   is64 ? masm->D : masm->S, src_offset);\n@@ -2194,1 +2186,1 @@\n-        __ unspill_sve_predicate(as_PRegister(Matcher::_regEncode[dst_lo]), ra_->reg2offset(src_lo),\n+        masm->unspill_sve_predicate(as_PRegister(Matcher::_regEncode[dst_lo]), ra_->reg2offset(src_lo),\n@@ -2199,1 +2191,1 @@\n-          __ spill_copy_sve_predicate_stack_to_stack(src_offset, dst_offset,\n+          masm->spill_copy_sve_predicate_stack_to_stack(src_offset, dst_offset,\n@@ -2202,2 +2194,2 @@\n-          __ unspill(rscratch1, is64, src_offset);\n-          __ spill(rscratch1, is64, dst_offset);\n+          masm->unspill(rscratch1, is64, src_offset);\n+          masm->spill(rscratch1, is64, dst_offset);\n@@ -2209,1 +2201,1 @@\n-        __ sve_mov(as_PRegister(Matcher::_regEncode[dst_lo]), as_PRegister(Matcher::_regEncode[src_lo]));\n+        masm->sve_mov(as_PRegister(Matcher::_regEncode[dst_lo]), as_PRegister(Matcher::_regEncode[src_lo]));\n@@ -2211,1 +2203,1 @@\n-        __ spill_sve_predicate(as_PRegister(Matcher::_regEncode[src_lo]), ra_->reg2offset(dst_lo),\n+        masm->spill_sve_predicate(as_PRegister(Matcher::_regEncode[src_lo]), ra_->reg2offset(dst_lo),\n@@ -2275,2 +2267,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation(&cbuf, ra_, false, NULL);\n+void MachSpillCopyNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n+  implementation(&masm, ra_, false, NULL);\n@@ -2294,3 +2286,1 @@\n-void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+void BoxLockNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -2335,1 +2325,1 @@\n-void MachUEPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const\n+void MachUEPNode::emit(C2_MacroAssembler& masm, PhaseRegAlloc* ra_) const\n@@ -2337,3 +2327,0 @@\n-  \/\/ This is the unverified entry point.\n-  C2_MacroAssembler _masm(&cbuf);\n-\n@@ -2359,1 +2346,1 @@\n-int HandlerImpl::emit_exception_handler(CodeBuffer& cbuf)\n+int HandlerImpl::emit_exception_handler(C2_MacroAssembler& masm)\n@@ -2365,1 +2352,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -2379,1 +2365,1 @@\n-int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf)\n+int HandlerImpl::emit_deopt_handler(C2_MacroAssembler& masm)\n@@ -2383,1 +2369,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -2797,1 +2782,0 @@\n-  C2_MacroAssembler _masm(&cbuf);                                       \\\n@@ -2945,1 +2929,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2955,1 +2938,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrsbw, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrsbw, dst_reg, $mem->opcode(),\n@@ -2963,1 +2946,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrsb, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrsb, dst_reg, $mem->opcode(),\n@@ -2971,1 +2954,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrb, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrb, dst_reg, $mem->opcode(),\n@@ -2979,1 +2962,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrb, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrb, dst_reg, $mem->opcode(),\n@@ -2987,1 +2970,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrshw, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrshw, dst_reg, $mem->opcode(),\n@@ -2995,1 +2978,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrsh, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrsh, dst_reg, $mem->opcode(),\n@@ -3003,1 +2986,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrh, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrh, dst_reg, $mem->opcode(),\n@@ -3011,1 +2994,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrh, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrh, dst_reg, $mem->opcode(),\n@@ -3019,1 +3002,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrw, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrw, dst_reg, $mem->opcode(),\n@@ -3027,1 +3010,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrw, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrw, dst_reg, $mem->opcode(),\n@@ -3035,1 +3018,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrsw, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrsw, dst_reg, $mem->opcode(),\n@@ -3043,1 +3026,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldr, dst_reg, $mem->opcode(),\n@@ -3051,1 +3034,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrs, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrs, dst_reg, $mem->opcode(),\n@@ -3059,1 +3042,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrd, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrd, dst_reg, $mem->opcode(),\n@@ -3067,1 +3050,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strb, src_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strb, src_reg, $mem->opcode(),\n@@ -3074,2 +3057,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    loadStore(_masm, &MacroAssembler::strb, zr, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strb, zr, $mem->opcode(),\n@@ -3083,1 +3065,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strh, src_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strh, src_reg, $mem->opcode(),\n@@ -3090,2 +3072,2 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    loadStore(_masm, &MacroAssembler::strh, zr, $mem->opcode(),\n+\n+    loadStore(masm, &MacroAssembler::strh, zr, $mem->opcode(),\n@@ -3099,1 +3081,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strw, src_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strw, src_reg, $mem->opcode(),\n@@ -3106,2 +3088,2 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    loadStore(_masm, &MacroAssembler::strw, zr, $mem->opcode(),\n+\n+    loadStore(masm, &MacroAssembler::strw, zr, $mem->opcode(),\n@@ -3118,1 +3100,1 @@\n-      C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3123,1 +3105,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::str, src_reg, $mem->opcode(),\n@@ -3130,2 +3112,2 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    loadStore(_masm, &MacroAssembler::str, zr, $mem->opcode(),\n+\n+    loadStore(masm, &MacroAssembler::str, zr, $mem->opcode(),\n@@ -3139,1 +3121,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strs, src_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strs, src_reg, $mem->opcode(),\n@@ -3147,1 +3129,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strd, src_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strd, src_reg, $mem->opcode(),\n@@ -3154,1 +3136,1 @@\n-      C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3156,1 +3138,1 @@\n-      loadStore(_masm, &MacroAssembler::strb, zr, $mem->opcode(),\n+      loadStore(masm, &MacroAssembler::strb, zr, $mem->opcode(),\n@@ -3165,1 +3147,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::H,\n+    loadStore(masm, &MacroAssembler::ldr, dst_reg, MacroAssembler::H,\n@@ -3171,1 +3153,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::S,\n+    loadStore(masm, &MacroAssembler::ldr, dst_reg, MacroAssembler::S,\n@@ -3177,1 +3159,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::D,\n+    loadStore(masm, &MacroAssembler::ldr, dst_reg, MacroAssembler::D,\n@@ -3183,1 +3165,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::Q,\n+    loadStore(masm, &MacroAssembler::ldr, dst_reg, MacroAssembler::Q,\n@@ -3189,1 +3171,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::H,\n+    loadStore(masm, &MacroAssembler::str, src_reg, MacroAssembler::H,\n@@ -3195,1 +3177,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::S,\n+    loadStore(masm, &MacroAssembler::str, src_reg, MacroAssembler::S,\n@@ -3201,1 +3183,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::D,\n+    loadStore(masm, &MacroAssembler::str, src_reg, MacroAssembler::D,\n@@ -3207,1 +3189,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::Q,\n+    loadStore(masm, &MacroAssembler::str, src_reg, MacroAssembler::Q,\n@@ -3323,1 +3305,1 @@\n-      C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3339,1 +3321,1 @@\n-      C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3349,1 +3331,1 @@\n-      C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3360,1 +3342,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3389,1 +3371,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3419,1 +3401,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3427,1 +3409,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3435,1 +3417,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3443,1 +3425,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3456,1 +3438,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3464,1 +3446,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3472,1 +3454,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3480,1 +3462,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3489,1 +3471,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3497,1 +3479,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3518,1 +3500,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3529,1 +3511,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3540,1 +3522,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3565,1 +3547,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3571,1 +3553,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3577,1 +3559,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3582,1 +3564,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3595,1 +3577,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3601,1 +3583,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3616,1 +3598,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3630,1 +3612,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3644,1 +3626,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3652,1 +3634,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3660,1 +3642,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3668,1 +3650,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3678,1 +3660,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3685,1 +3667,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3696,1 +3678,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3704,1 +3686,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3711,1 +3693,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3726,1 +3708,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3734,1 +3716,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3741,1 +3723,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3748,1 +3730,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3754,1 +3736,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3760,1 +3742,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3766,1 +3748,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3772,1 +3754,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3785,1 +3767,1 @@\n-     C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3796,2 +3778,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -3802,1 +3782,1 @@\n-      call = __ trampoline_call(Address(addr, relocInfo::runtime_call_type), &cbuf);\n+      call = __ trampoline_call(Address(addr, relocInfo::runtime_call_type), &masm);\n@@ -3808,1 +3788,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -3811,1 +3791,1 @@\n-      call = __ trampoline_call(Address(addr, rspec), &cbuf);\n+      call = __ trampoline_call(Address(addr, rspec), &masm);\n@@ -3817,1 +3797,1 @@\n-      address stub = CompiledStaticCall::emit_to_interp_stub(cbuf);\n+      address stub = CompiledStaticCall::emit_to_interp_stub(masm);\n@@ -3824,1 +3804,1 @@\n-    _masm.clear_inst_mark();\n+    __ clear_inst_mark();\n@@ -3834,2 +3814,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    int method_index = resolved_method_index(cbuf);\n+    int method_index = resolved_method_index(masm);\n@@ -3841,1 +3820,1 @@\n-    _masm.clear_inst_mark();\n+    __ clear_inst_mark();\n@@ -3849,1 +3828,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3857,1 +3836,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3871,1 +3850,1 @@\n-      _masm.clear_inst_mark();\n+      __ clear_inst_mark();\n@@ -3890,1 +3869,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3895,1 +3874,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3905,1 +3884,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3911,1 +3890,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -3921,1 +3900,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n+\n@@ -4014,1 +3993,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -8695,1 +8673,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrs, tmp_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrs, tmp_reg, $mem->opcode(),\n@@ -8736,1 +8714,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrd, tmp_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrd, tmp_reg, $mem->opcode(),\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":152,"deletions":174,"binary":false,"changes":326,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, dst_reg, ptrue,\n+    loadStoreA_predicated(masm, false, dst_reg, ptrue,\n@@ -206,1 +206,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, src_reg, ptrue,\n+    loadStoreA_predicated(masm, true, src_reg, ptrue,\n@@ -318,1 +318,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, dst_reg,\n+    loadStoreA_predicated(masm, false, dst_reg,\n@@ -338,1 +338,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, src_reg,\n+    loadStoreA_predicated(masm, true, src_reg,\n@@ -354,1 +354,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, as_FloatRegister($dst$$reg),\n+    loadStoreA_predicated(masm, false, as_FloatRegister($dst$$reg),\n@@ -368,1 +368,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, as_FloatRegister($src$$reg),\n+    loadStoreA_predicated(masm, true, as_FloatRegister($src$$reg),\n@@ -2344,1 +2344,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, as_FloatRegister($tmp$$reg),\n+    loadStoreA_predicated(masm, false, as_FloatRegister($tmp$$reg),\n@@ -2368,1 +2368,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, as_FloatRegister($vtmp$$reg),\n+    loadStoreA_predicated(masm, false, as_FloatRegister($vtmp$$reg),\n@@ -2391,1 +2391,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, as_FloatRegister($tmp$$reg),\n+    loadStoreA_predicated(masm, true, as_FloatRegister($tmp$$reg),\n@@ -2415,1 +2415,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, as_FloatRegister($vtmp$$reg),\n+    loadStoreA_predicated(masm, true, as_FloatRegister($vtmp$$reg),\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -37,4 +37,4 @@\n-#define __ _masm.\n-address CompiledStaticCall::emit_to_interp_stub(CodeBuffer &cbuf, address mark) {\n-  precond(cbuf.stubs()->start() != badAddress);\n-  precond(cbuf.stubs()->end() != badAddress);\n+#define __ masm.\n+address CompiledStaticCall::emit_to_interp_stub(MacroAssembler &masm, address mark) {\n+  precond(__ code()->stubs()->start() != badAddress);\n+  precond(__ code()->stubs()->end() != badAddress);\n@@ -48,1 +48,1 @@\n-    mark = cbuf.insts_mark();  \/\/ Get mark within main instrs section.\n+    mark = __ inst_mark();  \/\/ Get mark within main instrs section.\n@@ -51,4 +51,0 @@\n-  \/\/ Note that the code buffer's insts_mark is always relative to insts.\n-  \/\/ That's why we must use the macroassembler to generate a stub.\n-  MacroAssembler _masm(&cbuf);\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/compiledIC_aarch64.cpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -36,1 +35,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n@@ -41,1 +40,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -45,1 +43,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n@@ -80,1 +78,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register, \/*acquire*\/ false, \/*release*\/ true, \/*is_cae*\/ false, $res$$Register);\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register, \/*acquire*\/ false, \/*release*\/ true, \/*is_cae*\/ false, $res$$Register);\n@@ -118,1 +116,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register, \/*acquire*\/ true, \/*release*\/ true, \/*is_cae*\/ false, $res$$Register);\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register, \/*acquire*\/ true, \/*release*\/ true, \/*is_cae*\/ false, $res$$Register);\n@@ -134,1 +132,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n@@ -150,1 +148,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n@@ -167,1 +165,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n@@ -184,1 +182,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n@@ -202,1 +200,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n@@ -219,1 +217,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n@@ -238,1 +236,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n@@ -257,1 +255,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoah_aarch64.ad","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-static void z_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, uint8_t barrier_data) {\n+static void z_load_barrier(MacroAssembler& masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, uint8_t barrier_data) {\n@@ -45,1 +45,1 @@\n-static void z_load_barrier_slow_path(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n+static void z_load_barrier_slow_path(MacroAssembler& masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n@@ -67,1 +67,1 @@\n-    z_load_barrier(_masm, this, ref_addr, $dst$$Register, rscratch2 \/* tmp *\/, barrier_data());\n+    z_load_barrier(masm, this, ref_addr, $dst$$Register, rscratch2 \/* tmp *\/, barrier_data());\n@@ -86,1 +86,1 @@\n-    z_load_barrier(_masm, this, Address($mem$$Register), $dst$$Register, rscratch2 \/* tmp *\/, barrier_data());\n+    z_load_barrier(masm, this, Address($mem$$Register), $dst$$Register, rscratch2 \/* tmp *\/, barrier_data());\n@@ -113,1 +113,1 @@\n-      z_load_barrier_slow_path(_masm, this, Address($mem$$Register), rscratch2 \/* ref *\/, rscratch1 \/* tmp *\/);\n+      z_load_barrier_slow_path(masm, this, Address($mem$$Register), rscratch2 \/* ref *\/, rscratch1 \/* tmp *\/);\n@@ -145,1 +145,1 @@\n-      z_load_barrier_slow_path(_masm, this, Address($mem$$Register), rscratch2 \/* ref *\/, rscratch1 \/* tmp *\/ );\n+      z_load_barrier_slow_path(masm, this, Address($mem$$Register), rscratch2 \/* ref *\/, rscratch1 \/* tmp *\/ );\n@@ -174,1 +174,1 @@\n-      z_load_barrier_slow_path(_masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, rscratch1 \/* tmp *\/);\n+      z_load_barrier_slow_path(masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, rscratch1 \/* tmp *\/);\n@@ -202,1 +202,1 @@\n-      z_load_barrier_slow_path(_masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, rscratch1 \/* tmp *\/);\n+      z_load_barrier_slow_path(masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, rscratch1 \/* tmp *\/);\n@@ -223,1 +223,1 @@\n-    z_load_barrier(_masm, this, Address(noreg, 0), $prev$$Register, rscratch2 \/* tmp *\/, barrier_data());\n+    z_load_barrier(masm, this, Address(noreg, 0), $prev$$Register, rscratch2 \/* tmp *\/, barrier_data());\n@@ -240,1 +240,1 @@\n-    z_load_barrier(_masm, this, Address(noreg, 0), $prev$$Register, rscratch2 \/* tmp *\/, barrier_data());\n+    z_load_barrier(masm, this, Address(noreg, 0), $prev$$Register, rscratch2 \/* tmp *\/, barrier_data());\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/z_aarch64.ad","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -616,1 +616,1 @@\n-address MacroAssembler::trampoline_call1(Address entry, CodeBuffer* cbuf, bool check_emit_size) {\n+address MacroAssembler::trampoline_call1(Address entry, MacroAssembler* masm, bool check_emit_size) {\n@@ -644,1 +644,1 @@\n-  if (cbuf) cbuf->set_insts_mark();\n+  if (masm) masm->set_inst_mark();\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1185,2 +1185,2 @@\n-  address trampoline_call(Address entry, CodeBuffer* cbuf = NULL) { return trampoline_call1(entry, cbuf, true); }\n-  address trampoline_call1(Address entry, CodeBuffer* cbuf, bool check_emit_size = true);\n+  address trampoline_call(Address entry, MacroAssembler* masm = NULL) { return trampoline_call1(entry, masm, true); }\n+  address trampoline_call1(Address entry, MacroAssembler* masm, bool check_emit_size = true);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1083,2 +1083,1 @@\n-  CodeBuffer* cbuf = masm->code_section()->outer();\n-  address stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, mark);\n+  address stub = CompiledStaticCall::emit_to_interp_stub(*masm, mark);\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -105,2 +105,2 @@\n-  static int emit_exception_handler(CodeBuffer &cbuf);\n-  static int emit_deopt_handler(CodeBuffer& cbuf);\n+  static int emit_exception_handler(C2_MacroAssembler &masm);\n+  static int emit_deopt_handler(C2_MacroAssembler &masm);\n@@ -138,1 +138,1 @@\n-#define __ _masm.\n+#define __ masm.\n@@ -159,2 +159,1 @@\n-void emit_break(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+void emit_break(C2_MacroAssembler &masm) {\n@@ -170,2 +169,2 @@\n-void MachBreakpointNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  emit_break(cbuf);\n+void MachBreakpointNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n+  emit_break(masm);\n@@ -179,2 +178,1 @@\n-void emit_nop(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+void emit_nop(C2_MacroAssembler &masm) {\n@@ -185,1 +183,1 @@\n-void emit_call_reloc(CodeBuffer &cbuf, const MachCallNode *n, MachOper *m, RelocationHolder const& rspec) {\n+void emit_call_reloc(C2_MacroAssembler &masm, const MachCallNode *n, MachOper *m, RelocationHolder const& rspec) {\n@@ -187,2 +185,1 @@\n-  int call_site_offset = cbuf.insts()->mark_off();\n-  C2_MacroAssembler _masm(&cbuf);\n+  int call_site_offset = masm.code_section()->mark_off();\n@@ -210,2 +207,2 @@\n-void emit_lo(CodeBuffer &cbuf, int val) {  }\n-void emit_hi(CodeBuffer &cbuf, int val) {  }\n+void emit_lo(C2_MacroAssembler &masm, int val) {  }\n+void emit_hi(C2_MacroAssembler &masm, int val) {  }\n@@ -232,1 +229,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n+void MachConstantBaseNode::emit(C2_MacroAssembler& masm, PhaseRegAlloc* ra_) const {\n@@ -235,1 +232,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -290,1 +286,1 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachPrologNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -292,1 +288,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -320,1 +315,1 @@\n-  if (strcmp(cbuf.name(), \"Compile::Fill_buffer\") == 0) {\n+  if (strcmp(masm.code()->name(), \"Compile::Fill_buffer\") == 0) {\n@@ -361,2 +356,1 @@\n-void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachEpilogNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -412,1 +406,1 @@\n-uint MachSpillCopyNode::implementation( CodeBuffer *cbuf,\n+uint MachSpillCopyNode::implementation( C2_MacroAssembler *masm,\n@@ -445,2 +439,0 @@\n-  C2_MacroAssembler _masm(cbuf);\n-\n@@ -452,1 +444,1 @@\n-    if (cbuf && !is_memoryfp(offset)) {\n+    if (masm && !is_memoryfp(offset)) {\n@@ -462,2 +454,2 @@\n-        if (cbuf) {\n-          __ ldr_double(Rmemcopy, Address(SP, offset));\n+        if (masm) {\n+          masm->ldr_double(Rmemcopy, Address(SP, offset));\n@@ -470,2 +462,2 @@\n-        if (cbuf) {\n-          __ ldr_float(Rmemcopy, Address(SP, offset));\n+        if (masm) {\n+          masm->ldr_float(Rmemcopy, Address(SP, offset));\n@@ -489,2 +481,2 @@\n-    if (cbuf) {\n-      __ mov(reg_to_register_object(Matcher::_regEncode[dst_first]), reg_to_register_object(Matcher::_regEncode[src_first]));\n+    if (masm) {\n+      masm->mov(reg_to_register_object(Matcher::_regEncode[dst_first]), reg_to_register_object(Matcher::_regEncode[src_first]));\n@@ -504,1 +496,1 @@\n-    if (cbuf && !is_memoryI(offset)) {\n+    if (masm && !is_memoryI(offset)) {\n@@ -510,2 +502,2 @@\n-        if (cbuf) {\n-          __ str_64(reg_to_register_object(Matcher::_regEncode[src_first]), Address(SP, offset));\n+        if (masm) {\n+          masm->str_64(reg_to_register_object(Matcher::_regEncode[src_first]), Address(SP, offset));\n@@ -520,2 +512,2 @@\n-        if (cbuf) {\n-          __ str_32(reg_to_register_object(Matcher::_regEncode[src_first]), Address(SP, offset));\n+        if (masm) {\n+          masm->str_32(reg_to_register_object(Matcher::_regEncode[src_first]), Address(SP, offset));\n@@ -536,1 +528,1 @@\n-    if (cbuf && !is_memoryI(offset)) {\n+    if (masm && !is_memoryI(offset)) {\n@@ -542,2 +534,2 @@\n-        if (cbuf) {\n-          __ ldr_64(reg_to_register_object(Matcher::_regEncode[dst_first]), Address(SP, offset));\n+        if (masm) {\n+          masm->ldr_64(reg_to_register_object(Matcher::_regEncode[dst_first]), Address(SP, offset));\n@@ -552,2 +544,2 @@\n-        if (cbuf) {\n-          __ ldr_32(reg_to_register_object(Matcher::_regEncode[dst_first]), Address(SP, offset));\n+        if (masm) {\n+          masm->ldr_32(reg_to_register_object(Matcher::_regEncode[dst_first]), Address(SP, offset));\n@@ -569,2 +561,2 @@\n-      if (cbuf) {\n-      __ mov_double(reg_to_FloatRegister_object(Matcher::_regEncode[dst_first]), reg_to_FloatRegister_object(Matcher::_regEncode[src_first]));\n+      if (masm) {\n+        masm->mov_double(reg_to_FloatRegister_object(Matcher::_regEncode[dst_first]), reg_to_FloatRegister_object(Matcher::_regEncode[src_first]));\n@@ -580,2 +572,2 @@\n-    if (cbuf) {\n-      __ mov_float(reg_to_FloatRegister_object(Matcher::_regEncode[dst_first]), reg_to_FloatRegister_object(Matcher::_regEncode[src_first]));\n+    if (masm) {\n+      masm->mov_float(reg_to_FloatRegister_object(Matcher::_regEncode[dst_first]), reg_to_FloatRegister_object(Matcher::_regEncode[src_first]));\n@@ -595,1 +587,1 @@\n-    if (cbuf && !is_memoryfp(offset)) {\n+    if (masm && !is_memoryfp(offset)) {\n@@ -602,2 +594,2 @@\n-        if (cbuf) {\n-          __ str_double(reg_to_FloatRegister_object(Matcher::_regEncode[src_first]), Address(SP, offset));\n+        if (masm) {\n+          masm->str_double(reg_to_FloatRegister_object(Matcher::_regEncode[src_first]), Address(SP, offset));\n@@ -612,2 +604,2 @@\n-        if (cbuf) {\n-          __ str_float(reg_to_FloatRegister_object(Matcher::_regEncode[src_first]), Address(SP, offset));\n+        if (masm) {\n+          masm->str_float(reg_to_FloatRegister_object(Matcher::_regEncode[src_first]), Address(SP, offset));\n@@ -628,1 +620,1 @@\n-    if (cbuf && !is_memoryfp(offset)) {\n+    if (masm && !is_memoryfp(offset)) {\n@@ -635,2 +627,2 @@\n-        if (cbuf) {\n-          __ ldr_double(reg_to_FloatRegister_object(Matcher::_regEncode[dst_first]), Address(SP, offset));\n+        if (masm) {\n+          masm->ldr_double(reg_to_FloatRegister_object(Matcher::_regEncode[dst_first]), Address(SP, offset));\n@@ -645,2 +637,2 @@\n-        if (cbuf) {\n-          __ ldr_float(reg_to_FloatRegister_object(Matcher::_regEncode[dst_first]), Address(SP, offset));\n+        if (masm) {\n+          masm->ldr_float(reg_to_FloatRegister_object(Matcher::_regEncode[dst_first]), Address(SP, offset));\n@@ -665,2 +657,2 @@\n-      if (cbuf) {\n-        __ fmdrr(reg_to_FloatRegister_object(Matcher::_regEncode[dst_first]), reg_to_register_object(Matcher::_regEncode[src_first]), reg_to_register_object(Matcher::_regEncode[src_second]));\n+      if (masm) {\n+        masm->fmdrr(reg_to_FloatRegister_object(Matcher::_regEncode[dst_first]), reg_to_register_object(Matcher::_regEncode[src_first]), reg_to_register_object(Matcher::_regEncode[src_second]));\n@@ -675,2 +667,2 @@\n-      if (cbuf) {\n-        __ fmsr(reg_to_FloatRegister_object(Matcher::_regEncode[dst_first]), reg_to_register_object(Matcher::_regEncode[src_first]));\n+      if (masm) {\n+        masm->fmsr(reg_to_FloatRegister_object(Matcher::_regEncode[dst_first]), reg_to_register_object(Matcher::_regEncode[src_first]));\n@@ -694,2 +686,2 @@\n-      if (cbuf) {\n-        __ fmrrd(reg_to_register_object(Matcher::_regEncode[dst_first]), reg_to_register_object(Matcher::_regEncode[dst_second]), reg_to_FloatRegister_object(Matcher::_regEncode[src_first]));\n+      if (masm) {\n+        masm->fmrrd(reg_to_register_object(Matcher::_regEncode[dst_first]), reg_to_register_object(Matcher::_regEncode[dst_second]), reg_to_FloatRegister_object(Matcher::_regEncode[src_first]));\n@@ -704,2 +696,2 @@\n-      if (cbuf) {\n-        __ fmrs(reg_to_register_object(Matcher::_regEncode[dst_first]), reg_to_FloatRegister_object(Matcher::_regEncode[src_first]));\n+      if (masm) {\n+        masm->fmrs(reg_to_register_object(Matcher::_regEncode[dst_first]), reg_to_FloatRegister_object(Matcher::_regEncode[src_first]));\n@@ -728,2 +720,2 @@\n-    if (cbuf) {\n-      __ mov(reg_to_register_object(Matcher::_regEncode[dst_second]), reg_to_register_object(Matcher::_regEncode[src_second]));\n+    if (masm) {\n+      masm->mov(reg_to_register_object(Matcher::_regEncode[dst_second]), reg_to_register_object(Matcher::_regEncode[src_second]));\n@@ -745,1 +737,1 @@\n-    if (cbuf && !is_memoryP(offset)) {\n+    if (masm && !is_memoryP(offset)) {\n@@ -749,2 +741,2 @@\n-      if (cbuf) {\n-        __ str(reg_to_register_object(Matcher::_regEncode[src_second]), Address(SP, offset));\n+      if (masm) {\n+        masm->str(reg_to_register_object(Matcher::_regEncode[src_second]), Address(SP, offset));\n@@ -764,1 +756,1 @@\n-    if (cbuf && !is_memoryP(offset)) {\n+    if (masm && !is_memoryP(offset)) {\n@@ -768,2 +760,2 @@\n-      if (cbuf) {\n-        __ ldr(reg_to_register_object(Matcher::_regEncode[dst_second]), Address(SP, offset));\n+      if (masm) {\n+        masm->ldr(reg_to_register_object(Matcher::_regEncode[dst_second]), Address(SP, offset));\n@@ -790,2 +782,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation( &cbuf, ra_, false, NULL );\n+void MachSpillCopyNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n+  implementation( &masm, ra_, false, NULL );\n@@ -805,2 +797,1 @@\n-void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc * ) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachNopNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc * ) const {\n@@ -826,2 +817,1 @@\n-void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void BoxLockNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -862,2 +852,1 @@\n-void MachUEPNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachUEPNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -881,3 +870,1 @@\n-int HandlerImpl::emit_exception_handler(CodeBuffer& cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+int HandlerImpl::emit_exception_handler(C2_MacroAssembler& masm) {\n@@ -902,1 +889,1 @@\n-int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf) {\n+int HandlerImpl::emit_deopt_handler(C2_MacroAssembler& masm) {\n@@ -905,2 +892,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n-\n@@ -1195,1 +1180,1 @@\n-    emit_call_reloc(cbuf, as_MachCall(), $meth, runtime_call_Relocation::spec());\n+    emit_call_reloc(masm, as_MachCall(), $meth, runtime_call_Relocation::spec());\n@@ -1203,1 +1188,1 @@\n-      emit_call_reloc(cbuf, as_MachCall(), $meth, runtime_call_Relocation::spec());\n+      emit_call_reloc(masm, as_MachCall(), $meth, runtime_call_Relocation::spec());\n@@ -1205,1 +1190,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -1208,1 +1193,1 @@\n-      emit_call_reloc(cbuf, as_MachCall(), $meth, rspec);\n+      emit_call_reloc(masm, as_MachCall(), $meth, rspec);\n@@ -1211,1 +1196,1 @@\n-      address stub = CompiledStaticCall::emit_to_interp_stub(cbuf);\n+      address stub = CompiledStaticCall::emit_to_interp_stub(masm);\n@@ -1221,3 +1206,2 @@\n-    address mark = cbuf.insts()->mark();\n-    debug_only(int off0 = cbuf.insts_size());\n-    C2_MacroAssembler _masm(&cbuf);\n+    address mark = masm.insts()->mark();\n+    debug_only(int off0 = masm.inst_size());\n@@ -1227,1 +1211,1 @@\n-    debug_only(int off1 = cbuf.insts_size());\n+    debug_only(int off1 = masm.inst_size());\n@@ -1230,1 +1214,1 @@\n-    cbuf.insts()->set_mark(mark);\n+    masm.insts()->set_mark(mark);\n@@ -1235,3 +1219,2 @@\n-    address mark = cbuf.insts()->mark();\n-    debug_only(int off0 = cbuf.insts_size());\n-    C2_MacroAssembler _masm(&cbuf);\n+    address mark = masm.inst_mark();\n+    debug_only(int off0 = masm.offset());\n@@ -1241,1 +1224,1 @@\n-    debug_only(int off1 = cbuf.insts_size());\n+    debug_only(int off1 = masm.offset());\n@@ -1244,1 +1227,1 @@\n-    cbuf.insts()->set_mark(mark);\n+    masm.set_inst_mark(mark);\n@@ -1248,1 +1231,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1253,1 +1235,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1262,1 +1243,1 @@\n-    int method_index = resolved_method_index(cbuf);\n+    int method_index = resolved_method_index(masm);\n@@ -1264,1 +1245,1 @@\n-    emit_call_reloc(cbuf, as_MachCall(), $meth, RelocationHolder::none);\n+    emit_call_reloc(masm, as_MachCall(), $meth, RelocationHolder::none);\n@@ -1281,1 +1262,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1298,1 +1278,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1313,1 +1292,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1405,1 +1383,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1467,1 +1444,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":85,"deletions":109,"binary":false,"changes":194,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-#define __ _masm.\n+#define __ masm.\n@@ -39,1 +39,1 @@\n-address CompiledStaticCall::emit_to_interp_stub(CodeBuffer &cbuf, address mark) {\n+address CompiledStaticCall::emit_to_interp_stub(MacroAssembler &masm, address mark) {\n@@ -46,1 +46,1 @@\n-    mark = cbuf.insts_mark();  \/\/ get mark within main instrs section\n+    mark = __ inst_mark();  \/\/ get mark within main instrs section\n@@ -49,2 +49,0 @@\n-  MacroAssembler _masm(&cbuf);\n-\n","filename":"src\/hotspot\/cpu\/arm\/compiledIC_arm.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -81,2 +81,2 @@\n-#define __ _masm.\n-address CompiledStaticCall::emit_to_interp_stub(CodeBuffer &cbuf, address mark\/* = NULL*\/) {\n+#define __ masm.\n+address CompiledStaticCall::emit_to_interp_stub(MacroAssembler &masm, address mark\/* = NULL*\/) {\n@@ -86,1 +86,1 @@\n-    mark = cbuf.insts_mark();\n+    mark = __ inst_mark();\n@@ -89,4 +89,0 @@\n-  \/\/ Note that the code buffer's insts_mark is always relative to insts.\n-  \/\/ That's why we must use the macroassembler to generate a stub.\n-  MacroAssembler _masm(&cbuf);\n-\n","filename":"src\/hotspot\/cpu\/ppc\/compiledIC_ppc.cpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-        &_masm,\n+        &masm,\n@@ -68,1 +68,1 @@\n-        &_masm,\n+        &masm,\n@@ -89,1 +89,1 @@\n-        &_masm,\n+        &masm,\n@@ -115,1 +115,1 @@\n-        &_masm,\n+        &masm,\n@@ -140,1 +140,1 @@\n-        &_masm,\n+        &masm,\n@@ -160,1 +160,1 @@\n-        &_masm,\n+        &masm,\n@@ -180,1 +180,1 @@\n-        &_masm,\n+        &masm,\n@@ -205,1 +205,1 @@\n-        &_masm,\n+        &masm,\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoah_ppc.ad","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-static void z_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref,\n+static void z_load_barrier(MacroAssembler& masm, const MachNode* node, Address ref_addr, Register ref,\n@@ -48,1 +48,1 @@\n-static void z_load_barrier_slow_path(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref,\n+static void z_load_barrier_slow_path(MacroAssembler& masm, const MachNode* node, Address ref_addr, Register ref,\n@@ -55,1 +55,1 @@\n-static void z_compare_and_swap(MacroAssembler& _masm, const MachNode* node,\n+static void z_compare_and_swap(MacroAssembler& masm, const MachNode* node,\n@@ -73,1 +73,1 @@\n-    z_load_barrier_slow_path(_masm, node, Address(mem), tmp_xchg, res \/* used as tmp *\/);\n+    z_load_barrier_slow_path(masm, node, Address(mem), tmp_xchg, res \/* used as tmp *\/);\n@@ -92,1 +92,1 @@\n-static void z_compare_and_exchange(MacroAssembler& _masm, const MachNode* node,\n+static void z_compare_and_exchange(MacroAssembler& masm, const MachNode* node,\n@@ -107,1 +107,1 @@\n-    z_load_barrier_slow_path(_masm, node, Address(mem), res, tmp);\n+    z_load_barrier_slow_path(masm, node, Address(mem), res, tmp);\n@@ -141,1 +141,1 @@\n-    z_load_barrier(_masm, this, Address($mem$$base$$Register, $mem$$disp), $dst$$Register, $tmp$$Register, barrier_data());\n+    z_load_barrier(masm, this, Address($mem$$base$$Register, $mem$$disp), $dst$$Register, $tmp$$Register, barrier_data());\n@@ -159,1 +159,1 @@\n-    z_load_barrier(_masm, this, Address($mem$$base$$Register, $mem$$disp), $dst$$Register, $tmp$$Register, barrier_data());\n+    z_load_barrier(masm, this, Address($mem$$base$$Register, $mem$$disp), $dst$$Register, $tmp$$Register, barrier_data());\n@@ -178,1 +178,1 @@\n-    z_compare_and_swap(_masm, this,\n+    z_compare_and_swap(masm, this,\n@@ -196,1 +196,1 @@\n-    z_compare_and_swap(_masm, this,\n+    z_compare_and_swap(masm, this,\n@@ -214,1 +214,1 @@\n-    z_compare_and_swap(_masm, this,\n+    z_compare_and_swap(masm, this,\n@@ -232,1 +232,1 @@\n-    z_compare_and_swap(_masm, this,\n+    z_compare_and_swap(masm, this,\n@@ -253,1 +253,1 @@\n-    z_compare_and_exchange(_masm, this,\n+    z_compare_and_exchange(masm, this,\n@@ -273,1 +273,1 @@\n-    z_compare_and_exchange(_masm, this,\n+    z_compare_and_exchange(masm, this,\n@@ -289,1 +289,1 @@\n-    z_load_barrier(_masm, this, Address(noreg, (intptr_t) 0), $res$$Register, $tmp$$Register, barrier_data());\n+    z_load_barrier(masm, this, Address(noreg, (intptr_t) 0), $res$$Register, $tmp$$Register, barrier_data());\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/z_ppc.ad","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1079,1 +1079,1 @@\n-#define __ _masm.\n+#define __ masm.\n@@ -1189,2 +1189,1 @@\n-void emit_break(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+void emit_break(C2_MacroAssembler &masm) {\n@@ -1200,2 +1199,2 @@\n-void MachBreakpointNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  emit_break(cbuf);\n+void MachBreakpointNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n+  emit_break(masm);\n@@ -1210,2 +1209,1 @@\n-void emit_nop(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+void emit_nop(C2_MacroAssembler &masm) {\n@@ -1215,3 +1213,3 @@\n-static inline void emit_long(CodeBuffer &cbuf, int value) {\n-  *((int*)(cbuf.insts_end())) = value;\n-  cbuf.set_insts_end(cbuf.insts_end() + BytesPerInstWord);\n+static inline void emit_long(C2_MacroAssembler &masm, int value) {\n+  *((int*)(masm.pc())) = value;\n+  masm.set_inst_end(masm.pc() + BytesPerInstWord);\n@@ -1237,1 +1235,1 @@\n-  static void emit_trampoline_stub(C2_MacroAssembler &_masm, int destination_toc_offset, int insts_call_instruction_offset);\n+  static void emit_trampoline_stub(C2_MacroAssembler &masm, int destination_toc_offset, int insts_call_instruction_offset);\n@@ -1268,1 +1266,1 @@\n-void CallStubImpl::emit_trampoline_stub(C2_MacroAssembler &_masm, int destination_toc_offset, int insts_call_instruction_offset) {\n+void CallStubImpl::emit_trampoline_stub(C2_MacroAssembler &masm, int destination_toc_offset, int insts_call_instruction_offset) {\n@@ -1299,1 +1297,1 @@\n-EmitCallOffsets emit_call_with_trampoline_stub(C2_MacroAssembler &_masm, address entry_point, relocInfo::relocType rtype) {\n+EmitCallOffsets emit_call_with_trampoline_stub(C2_MacroAssembler &masm, address entry_point, relocInfo::relocType rtype) {\n@@ -1316,1 +1314,1 @@\n-  CallStubImpl::emit_trampoline_stub(_masm, entry_point_toc_offset, offsets.insts_call_instruction_offset);\n+  CallStubImpl::emit_trampoline_stub(masm, entry_point_toc_offset, offsets.insts_call_instruction_offset);\n@@ -1366,1 +1364,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n+void MachConstantBaseNode::emit(C2_MacroAssembler& masm, PhaseRegAlloc* ra_) const {\n@@ -1404,1 +1402,1 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachPrologNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -1406,1 +1404,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1556,1 +1553,1 @@\n-    bs->nmethod_entry_barrier(&_masm, push_frame_temp);\n+    bs->nmethod_entry_barrier(&masm, push_frame_temp);\n@@ -1559,1 +1556,1 @@\n-  C->output()->set_frame_complete(cbuf.insts_size());\n+  C->output()->set_frame_complete(masm.offset());\n@@ -1588,1 +1585,1 @@\n-void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachEpilogNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -1590,1 +1587,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1666,1 +1662,1 @@\n-static int ld_st_helper(CodeBuffer *cbuf, const char *op_str, uint opcode, int reg, int offset,\n+static int ld_st_helper(C2_MacroAssembler *masm, const char *op_str, uint opcode, int reg, int offset,\n@@ -1679,1 +1675,1 @@\n-  if (cbuf) {\n+  if (masm) {\n@@ -1684,1 +1680,1 @@\n-    emit_long(*cbuf, opcode | Assembler::rt(Matcher::_regEncode[reg]) | d | Assembler::ra(R1_SP));\n+    emit_long(*masm, opcode | Assembler::rt(Matcher::_regEncode[reg]) | d | Assembler::ra(R1_SP));\n@@ -1697,1 +1693,1 @@\n-uint MachSpillCopyNode::implementation(CodeBuffer *cbuf, PhaseRegAlloc *ra_, bool do_size, outputStream *st) const {\n+uint MachSpillCopyNode::implementation(C2_MacroAssembler *masm, PhaseRegAlloc *ra_, bool do_size, outputStream *st) const {\n@@ -1727,6 +1723,5 @@\n-      if (cbuf) {\n-        C2_MacroAssembler _masm(cbuf);\n-        __ ld(R0, src_offset, R1_SP);\n-        __ std(R0, dst_offset, R1_SP);\n-        __ ld(R0, src_offset+8, R1_SP);\n-        __ std(R0, dst_offset+8, R1_SP);\n+      if (masm) {\n+        masm->ld(R0, src_offset, R1_SP);\n+        masm->std(R0, dst_offset, R1_SP);\n+        masm->ld(R0, src_offset+8, R1_SP);\n+        masm->std(R0, dst_offset+8, R1_SP);\n@@ -1740,4 +1735,3 @@\n-      if (cbuf) {\n-        C2_MacroAssembler _masm(cbuf);\n-        __ addi(R0, R1_SP, dst_offset);\n-        __ stxvd2x(Rsrc, R0);\n+      if (masm) {\n+        masm->addi(R0, R1_SP, dst_offset);\n+        masm->stxvd2x(Rsrc, R0);\n@@ -1751,4 +1745,3 @@\n-      if (cbuf) {\n-        C2_MacroAssembler _masm(cbuf);\n-        __ addi(R0, R1_SP, src_offset);\n-        __ lxvd2x(Rdst, R0);\n+      if (masm) {\n+        masm->addi(R0, R1_SP, src_offset);\n+        masm->lxvd2x(Rdst, R0);\n@@ -1762,3 +1755,2 @@\n-      if (cbuf) {\n-        C2_MacroAssembler _masm(cbuf);\n-        __ xxlor(Rdst, Rsrc, Rsrc);\n+      if (masm) {\n+        masm->xxlor(Rdst, Rsrc, Rsrc);\n@@ -1782,3 +1774,3 @@\n-      size += ld_st_helper(cbuf, \"LD  \", Assembler::LD_OPCODE,  R0_num, src_offset, !do_size, C, st);\n-      if (!cbuf && !do_size) st->print(\"\\n\\t\");\n-      size += ld_st_helper(cbuf, \"STD \", Assembler::STD_OPCODE, R0_num, dst_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"LD  \", Assembler::LD_OPCODE,  R0_num, src_offset, !do_size, C, st);\n+      if (!masm && !do_size) st->print(\"\\n\\t\");\n+      size += ld_st_helper(masm, \"STD \", Assembler::STD_OPCODE, R0_num, dst_offset, !do_size, C, st);\n@@ -1786,3 +1778,3 @@\n-      size += ld_st_helper(cbuf, \"LWZ \", Assembler::LWZ_OPCODE, R0_num, src_offset, !do_size, C, st);\n-      if (!cbuf && !do_size) st->print(\"\\n\\t\");\n-      size += ld_st_helper(cbuf, \"STW \", Assembler::STW_OPCODE, R0_num, dst_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"LWZ \", Assembler::LWZ_OPCODE, R0_num, src_offset, !do_size, C, st);\n+      if (!masm && !do_size) st->print(\"\\n\\t\");\n+      size += ld_st_helper(masm, \"STW \", Assembler::STW_OPCODE, R0_num, dst_offset, !do_size, C, st);\n@@ -1806,2 +1798,1 @@\n-      if (cbuf) {\n-        C2_MacroAssembler _masm(cbuf);\n+      if (masm) {\n@@ -1809,1 +1800,1 @@\n-          __ mr(Rdst, Rsrc);\n+          masm->mr(Rdst, Rsrc);\n@@ -1830,1 +1821,1 @@\n-      size += ld_st_helper(cbuf, \"STD \", Assembler::STD_OPCODE, src_lo, dst_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"STD \", Assembler::STD_OPCODE, src_lo, dst_offset, !do_size, C, st);\n@@ -1832,1 +1823,1 @@\n-      size += ld_st_helper(cbuf, \"STW \", Assembler::STW_OPCODE, src_lo, dst_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"STW \", Assembler::STW_OPCODE, src_lo, dst_offset, !do_size, C, st);\n@@ -1843,1 +1834,1 @@\n-      size += ld_st_helper(cbuf, \"LD  \", Assembler::LD_OPCODE, dst_lo, src_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"LD  \", Assembler::LD_OPCODE, dst_lo, src_offset, !do_size, C, st);\n@@ -1845,1 +1836,1 @@\n-      size += ld_st_helper(cbuf, \"LWZ \", Assembler::LWZ_OPCODE, dst_lo, src_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"LWZ \", Assembler::LWZ_OPCODE, dst_lo, src_offset, !do_size, C, st);\n@@ -1852,2 +1843,1 @@\n-    if (cbuf) {\n-      C2_MacroAssembler _masm(cbuf);\n+    if (masm) {\n@@ -1856,1 +1846,1 @@\n-      __ fmr(Rdst, Rsrc);\n+      masm->fmr(Rdst, Rsrc);\n@@ -1872,1 +1862,1 @@\n-      size += ld_st_helper(cbuf, \"STFD\", Assembler::STFD_OPCODE, src_lo, dst_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"STFD\", Assembler::STFD_OPCODE, src_lo, dst_offset, !do_size, C, st);\n@@ -1874,1 +1864,1 @@\n-      size += ld_st_helper(cbuf, \"STFS\", Assembler::STFS_OPCODE, src_lo, dst_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"STFS\", Assembler::STFS_OPCODE, src_lo, dst_offset, !do_size, C, st);\n@@ -1885,1 +1875,1 @@\n-      size += ld_st_helper(cbuf, \"LFD \", Assembler::LFD_OPCODE, dst_lo, src_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"LFD \", Assembler::LFD_OPCODE, dst_lo, src_offset, !do_size, C, st);\n@@ -1887,1 +1877,1 @@\n-      size += ld_st_helper(cbuf, \"LFS \", Assembler::LFS_OPCODE, dst_lo, src_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"LFS \", Assembler::LFS_OPCODE, dst_lo, src_offset, !do_size, C, st);\n@@ -1912,2 +1902,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation(&cbuf, ra_, false, NULL);\n+void MachSpillCopyNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n+  implementation(&masm, ra_, false, NULL);\n@@ -1926,2 +1916,1 @@\n-void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachNopNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *) const {\n@@ -1947,3 +1936,1 @@\n-void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+void BoxLockNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -1972,1 +1959,1 @@\n-void MachUEPNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachUEPNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -1974,2 +1961,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n-\n@@ -2030,2 +2015,2 @@\n-  static int emit_exception_handler(CodeBuffer &cbuf);\n-  static int emit_deopt_handler(CodeBuffer& cbuf);\n+  static int emit_exception_handler(C2_MacroAssembler &masm);\n+  static int emit_deopt_handler(C2_MacroAssembler& masm);\n@@ -2056,3 +2041,1 @@\n-int HandlerImpl::emit_exception_handler(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+int HandlerImpl::emit_exception_handler(C2_MacroAssembler &masm) {\n@@ -2073,3 +2056,1 @@\n-int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+int HandlerImpl::emit_deopt_handler(C2_MacroAssembler& masm) {\n@@ -2433,1 +2414,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2439,1 +2419,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2446,1 +2425,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2453,1 +2431,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2461,2 +2438,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2469,2 +2444,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2478,2 +2451,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2486,2 +2457,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2495,1 +2464,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2504,1 +2472,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2514,1 +2481,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2520,2 +2486,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2543,3 +2507,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -2777,2 +2738,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2809,2 +2768,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2943,1 +2900,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2949,1 +2905,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2957,1 +2912,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2963,1 +2917,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3162,2 +3115,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3175,2 +3126,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3188,1 +3137,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3193,3 +3141,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -3205,3 +3150,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -3217,2 +3159,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3227,2 +3167,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3236,2 +3174,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3265,2 +3201,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3341,1 +3275,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3395,2 +3328,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3401,1 +3332,1 @@\n-      emit_call_with_trampoline_stub(_masm, entry_point, relocInfo::runtime_call_type);\n+      emit_call_with_trampoline_stub(masm, entry_point, relocInfo::runtime_call_type);\n@@ -3420,1 +3351,1 @@\n-      CallStubImpl::emit_trampoline_stub(_masm, entry_point_toc_offset, start_offset);\n+      CallStubImpl::emit_trampoline_stub(masm, entry_point_toc_offset, start_offset);\n@@ -3422,1 +3353,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -3430,1 +3361,1 @@\n-      cbuf.set_insts_mark();\n+      masm.set_inst_mark();\n@@ -3434,1 +3365,1 @@\n-      address stub = CompiledStaticCall::emit_to_interp_stub(cbuf);\n+      address stub = CompiledStaticCall::emit_to_interp_stub(masm);\n@@ -3444,3 +3375,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -3456,1 +3384,1 @@\n-      CallStubImpl::emit_trampoline_stub(_masm, entry_point_const_toc_offset, __ offset());\n+      CallStubImpl::emit_trampoline_stub(masm, entry_point_const_toc_offset, __ offset());\n@@ -3472,1 +3400,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -3546,1 +3474,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3569,1 +3496,1 @@\n-      emit_call_with_trampoline_stub(_masm, (address)$meth$$method, relocInfo::none);\n+      emit_call_with_trampoline_stub(masm, (address)$meth$$method, relocInfo::none);\n@@ -3598,2 +3525,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3631,1 +3556,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -14634,1 +14558,1 @@\n-    cbuf.set_insts_mark();\n+    masm.set_inst_mark();\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":70,"deletions":146,"binary":false,"changes":216,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n@@ -65,1 +65,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n@@ -87,1 +87,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n@@ -109,1 +109,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n@@ -129,1 +129,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n@@ -149,1 +149,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n@@ -171,1 +171,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n@@ -192,1 +192,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n@@ -213,1 +213,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n@@ -233,1 +233,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n@@ -256,1 +256,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n@@ -279,1 +279,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm, $mem$$Register, tmp, $newval$$Register,\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoah_riscv64.ad","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-static void z_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, int barrier_data) {\n+static void z_load_barrier(MacroAssembler& masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, int barrier_data) {\n@@ -46,1 +46,1 @@\n-static void z_load_barrier_slow_path(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n+static void z_load_barrier_slow_path(MacroAssembler& masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n@@ -68,1 +68,1 @@\n-    z_load_barrier(_masm, this, ref_addr, $dst$$Register, t0 \/* tmp *\/, barrier_data());\n+    z_load_barrier(masm, this, ref_addr, $dst$$Register, t0 \/* tmp *\/, barrier_data());\n@@ -99,1 +99,1 @@\n-      z_load_barrier_slow_path(_masm, this, Address($mem$$Register), t0 \/* ref *\/, t1 \/* tmp *\/);\n+      z_load_barrier_slow_path(masm, this, Address($mem$$Register), t0 \/* ref *\/, t1 \/* tmp *\/);\n@@ -135,1 +135,1 @@\n-      z_load_barrier_slow_path(_masm, this, Address($mem$$Register), t0 \/* ref *\/, t1 \/* tmp *\/);\n+      z_load_barrier_slow_path(masm, this, Address($mem$$Register), t0 \/* ref *\/, t1 \/* tmp *\/);\n@@ -164,1 +164,1 @@\n-      z_load_barrier_slow_path(_masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, t0 \/* tmp *\/);\n+      z_load_barrier_slow_path(masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, t0 \/* tmp *\/);\n@@ -192,1 +192,1 @@\n-      z_load_barrier_slow_path(_masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, t0 \/* tmp *\/);\n+      z_load_barrier_slow_path(masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, t0 \/* tmp *\/);\n@@ -213,1 +213,1 @@\n-    z_load_barrier(_masm, this, Address(noreg, 0), $prev$$Register, t0 \/* tmp *\/, barrier_data());\n+    z_load_barrier(masm, this, Address(noreg, 0), $prev$$Register, t0 \/* tmp *\/, barrier_data());\n@@ -230,1 +230,1 @@\n-    z_load_barrier(_masm, this, Address(noreg, 0), $prev$$Register, t0 \/* tmp *\/, barrier_data());\n+    z_load_barrier(masm, this, Address(noreg, 0), $prev$$Register, t0 \/* tmp *\/, barrier_data());\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/z_riscv64.ad","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -642,1 +642,1 @@\n-  address trampoline_call(Address entry, CodeBuffer* cbuf = NULL);\n+  address trampoline_call(Address entry, MacroAssembler* masm = NULL);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -994,2 +994,2 @@\n-  static int emit_exception_handler(CodeBuffer &cbuf);\n-  static int emit_deopt_handler(CodeBuffer& cbuf);\n+  static int emit_exception_handler(C2_MacroAssembler &masm);\n+  static int emit_deopt_handler(C2_MacroAssembler &masm);\n@@ -1141,1 +1141,1 @@\n-#define __ _masm.\n+#define __ masm.\n@@ -1225,3 +1225,2 @@\n-void MachBreakpointNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n-  Assembler::CompressibleRegion cr(&_masm);\n+void MachBreakpointNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n+  Assembler::CompressibleRegion cr(&masm);\n@@ -1243,3 +1242,2 @@\n-  void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc*) const {\n-    C2_MacroAssembler _masm(&cbuf);\n-    Assembler::CompressibleRegion cr(&_masm); \/\/ nops shall be 2-byte under RVC for alignment purposes.\n+  void MachNopNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc*) const {\n+    Assembler::CompressibleRegion cr(&masm); \/\/ nops shall be 2-byte under RVC for alignment purposes.\n@@ -1267,1 +1265,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n+void MachConstantBaseNode::emit(C2_MacroAssembler& masm, PhaseRegAlloc* ra_) const {\n@@ -1311,1 +1309,1 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachPrologNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -1314,1 +1312,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1345,1 +1342,1 @@\n-    bs->nmethod_entry_barrier(&_masm);\n+    bs->nmethod_entry_barrier(&masm);\n@@ -1352,1 +1349,1 @@\n-  C->output()->set_frame_complete(cbuf.insts_size());\n+  C->output()->set_frame_complete(masm.offset());\n@@ -1403,1 +1400,1 @@\n-void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachEpilogNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -1406,1 +1403,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1478,1 +1474,1 @@\n-uint MachSpillCopyNode::implementation(CodeBuffer *cbuf, PhaseRegAlloc *ra_, bool do_size, outputStream *st) const {\n+uint MachSpillCopyNode::implementation(C2_MacroAssembler *masm, PhaseRegAlloc *ra_, bool do_size, outputStream *st) const {\n@@ -1512,3 +1508,2 @@\n-    if (ireg == Op_VecA && cbuf) {\n-      C2_MacroAssembler _masm(cbuf);\n-      Assembler::CompressibleRegion cr(&_masm);\n+    if (ireg == Op_VecA && masm) {\n+      Assembler::CompressibleRegion cr(masm);\n@@ -1518,1 +1513,1 @@\n-        __ spill_copy_vector_stack_to_stack(src_offset, dst_offset,\n+        masm->spill_copy_vector_stack_to_stack(src_offset, dst_offset,\n@@ -1522,1 +1517,1 @@\n-        __ spill(as_VectorRegister(Matcher::_regEncode[src_lo]), ra_->reg2offset(dst_lo));\n+        masm->spill(as_VectorRegister(Matcher::_regEncode[src_lo]), ra_->reg2offset(dst_lo));\n@@ -1525,1 +1520,1 @@\n-        __ unspill(as_VectorRegister(Matcher::_regEncode[dst_lo]), ra_->reg2offset(src_lo));\n+        masm->unspill(as_VectorRegister(Matcher::_regEncode[dst_lo]), ra_->reg2offset(src_lo));\n@@ -1528,1 +1523,1 @@\n-        __ vmv1r_v(as_VectorRegister(Matcher::_regEncode[dst_lo]), as_VectorRegister(Matcher::_regEncode[src_lo]));\n+        masm->vmv1r_v(as_VectorRegister(Matcher::_regEncode[dst_lo]), as_VectorRegister(Matcher::_regEncode[src_lo]));\n@@ -1533,3 +1528,2 @@\n-  } else if (cbuf != NULL) {\n-    C2_MacroAssembler _masm(cbuf);\n-    Assembler::CompressibleRegion cr(&_masm);\n+  } else if (masm != NULL) {\n+    Assembler::CompressibleRegion cr(masm);\n@@ -1540,1 +1534,1 @@\n-            __ zero_extend(as_Register(Matcher::_regEncode[dst_lo]), as_Register(Matcher::_regEncode[src_lo]), 32);\n+            masm->zero_extend(as_Register(Matcher::_regEncode[dst_lo]), as_Register(Matcher::_regEncode[src_lo]), 32);\n@@ -1542,1 +1536,1 @@\n-            __ mv(as_Register(Matcher::_regEncode[dst_lo]), as_Register(Matcher::_regEncode[src_lo]));\n+            masm->mv(as_Register(Matcher::_regEncode[dst_lo]), as_Register(Matcher::_regEncode[src_lo]));\n@@ -1546,1 +1540,1 @@\n-            __ fmv_d_x(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n+            masm->fmv_d_x(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n@@ -1549,1 +1543,1 @@\n-            __ fmv_w_x(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n+            masm->fmv_w_x(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n@@ -1554,1 +1548,1 @@\n-          __ spill(as_Register(Matcher::_regEncode[src_lo]), is64, dst_offset);\n+          masm->spill(as_Register(Matcher::_regEncode[src_lo]), is64, dst_offset);\n@@ -1560,1 +1554,1 @@\n-            __ fmv_x_d(as_Register(Matcher::_regEncode[dst_lo]),\n+            masm->fmv_x_d(as_Register(Matcher::_regEncode[dst_lo]),\n@@ -1563,1 +1557,1 @@\n-            __ fmv_x_w(as_Register(Matcher::_regEncode[dst_lo]),\n+            masm->fmv_x_w(as_Register(Matcher::_regEncode[dst_lo]),\n@@ -1568,1 +1562,1 @@\n-            __ fmv_d(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n+            masm->fmv_d(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n@@ -1571,1 +1565,1 @@\n-            __ fmv_s(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n+            masm->fmv_s(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n@@ -1576,1 +1570,1 @@\n-          __ spill(as_FloatRegister(Matcher::_regEncode[src_lo]),\n+          masm->spill(as_FloatRegister(Matcher::_regEncode[src_lo]),\n@@ -1583,1 +1577,1 @@\n-            __ unspill(as_Register(Matcher::_regEncode[dst_lo]), is64, src_offset);\n+            masm->unspill(as_Register(Matcher::_regEncode[dst_lo]), is64, src_offset);\n@@ -1585,1 +1579,1 @@\n-            __ unspillu(as_Register(Matcher::_regEncode[dst_lo]), is64, src_offset);\n+            masm->unspillu(as_Register(Matcher::_regEncode[dst_lo]), is64, src_offset);\n@@ -1588,1 +1582,1 @@\n-          __ unspill(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n+          masm->unspill(as_FloatRegister(Matcher::_regEncode[dst_lo]),\n@@ -1593,1 +1587,1 @@\n-            __ unspill(t0, is64, src_offset);\n+            masm->unspill(t0, is64, src_offset);\n@@ -1595,1 +1589,1 @@\n-            __ unspillu(t0, is64, src_offset);\n+            masm->unspillu(t0, is64, src_offset);\n@@ -1597,1 +1591,1 @@\n-          __ spill(t0, is64, dst_offset);\n+          masm->spill(t0, is64, dst_offset);\n@@ -1643,2 +1637,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation(&cbuf, ra_, false, NULL);\n+void MachSpillCopyNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n+  implementation(&masm, ra_, false, NULL);\n@@ -1663,3 +1657,1 @@\n-void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+void BoxLockNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -1712,1 +1704,1 @@\n-void MachUEPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const\n+void MachUEPNode::emit(C2_MacroAssembler& masm, PhaseRegAlloc* ra_) const\n@@ -1714,3 +1706,0 @@\n-  \/\/ This is the unverified entry point.\n-  C2_MacroAssembler _masm(&cbuf);\n-\n@@ -1734,1 +1723,1 @@\n-int HandlerImpl::emit_exception_handler(CodeBuffer& cbuf)\n+int HandlerImpl::emit_exception_handler(C2_MacroAssembler& masm)\n@@ -1742,1 +1731,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1756,1 +1744,1 @@\n-int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf)\n+int HandlerImpl::emit_deopt_handler(C2_MacroAssembler& masm)\n@@ -1760,1 +1748,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -2076,2 +2063,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -2084,1 +2070,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2103,2 +2088,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -2110,1 +2094,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2115,1 +2098,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2128,1 +2110,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2134,1 +2115,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2147,1 +2127,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2154,1 +2133,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2161,1 +2139,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2168,1 +2145,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2175,1 +2151,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2182,1 +2157,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2191,1 +2165,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2197,1 +2170,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2221,1 +2193,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2240,2 +2211,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -2247,1 +2216,1 @@\n-      call = __ trampoline_call(Address(addr, relocInfo::runtime_call_type), &cbuf);\n+      call = __ trampoline_call(Address(addr, relocInfo::runtime_call_type), &masm);\n@@ -2253,1 +2222,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -2256,1 +2225,1 @@\n-      call = __ trampoline_call(Address(addr, rspec), &cbuf);\n+      call = __ trampoline_call(Address(addr, rspec), &masm);\n@@ -2263,1 +2232,1 @@\n-      address stub = CompiledStaticCall::emit_to_interp_stub(cbuf);\n+      address stub = CompiledStaticCall::emit_to_interp_stub(masm);\n@@ -2272,2 +2241,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    int method_index = resolved_method_index(cbuf);\n+    int method_index = resolved_method_index(masm);\n@@ -2282,1 +2250,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2290,2 +2257,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -2319,1 +2284,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2413,1 +2377,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2484,1 +2447,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2492,1 +2454,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2500,1 +2461,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2508,1 +2468,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2516,2 +2475,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -2523,2 +2481,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -2534,1 +2491,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2539,2 +2495,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -4525,1 +4480,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -4541,1 +4496,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -4572,1 +4527,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -4604,1 +4559,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -4635,1 +4590,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -4681,1 +4636,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -4966,1 +4921,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -4996,1 +4951,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -5027,1 +4982,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -5058,1 +5013,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -5103,1 +5058,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -5119,1 +5074,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -6415,1 +6370,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -6431,1 +6386,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -6448,1 +6403,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -6465,1 +6420,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -6481,1 +6436,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -6497,1 +6452,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -6514,1 +6469,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -6530,1 +6485,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -6548,1 +6503,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -6565,1 +6520,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -6582,1 +6537,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -6598,1 +6553,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -6728,1 +6683,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -6884,1 +6839,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -6920,1 +6875,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -6939,1 +6894,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -6975,1 +6930,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -7477,1 +7432,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -7494,1 +7449,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -7511,1 +7466,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -7544,1 +7499,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -7577,1 +7532,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -7594,1 +7549,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -7611,1 +7566,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -7644,1 +7599,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -7846,1 +7801,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -7862,1 +7817,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -8017,1 +7972,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -8172,1 +8127,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -8190,1 +8145,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -8287,1 +8242,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -8324,1 +8279,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -8343,1 +8298,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -8380,1 +8335,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -8399,1 +8354,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n@@ -8418,1 +8373,1 @@\n-    Assembler::CompressibleRegion cr(&_masm);\n+    Assembler::CompressibleRegion cr(&masm);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":101,"deletions":146,"binary":false,"changes":247,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), false, dst_reg,\n+    loadStore(masm, false, dst_reg,\n@@ -123,1 +123,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), true, src_reg,\n+    loadStore(masm, true, src_reg,\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-#define __ _masm.\n+#define __ masm.\n@@ -43,1 +43,1 @@\n-address CompiledStaticCall::emit_to_interp_stub(CodeBuffer &cbuf, address mark\/* = NULL*\/) {\n+address CompiledStaticCall::emit_to_interp_stub(MacroAssembler &masm, address mark\/* = NULL*\/) {\n@@ -49,1 +49,1 @@\n-    mark = cbuf.insts_mark();\n+    mark = __ inst_mark();\n@@ -53,4 +53,0 @@\n-  \/\/ Note that the code buffer's insts_mark is always relative to insts.\n-  \/\/ That's why we must use the macroassembler to generate a stub.\n-  MacroAssembler _masm(&cbuf);\n-\n","filename":"src\/hotspot\/cpu\/s390\/compiledIC_s390.cpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -587,1 +587,1 @@\n-#define __ _masm.\n+#define __ masm.\n@@ -669,2 +669,1 @@\n-void emit_nop(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+void emit_nop(C2_MacroAssembler &masm) {\n@@ -675,2 +674,1 @@\n-void emit_break(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+void emit_break(C2_MacroAssembler &masm) {\n@@ -686,2 +684,2 @@\n-void MachBreakpointNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  emit_break(cbuf);\n+void MachBreakpointNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n+  emit_break(masm);\n@@ -694,2 +692,1 @@\n-static inline void z_emit16(CodeBuffer &cbuf, long value) {\n-  C2_MacroAssembler _masm(&cbuf);\n+static inline void z_emit16(C2_MacroAssembler &masm, long value) {\n@@ -699,2 +696,1 @@\n-static inline void z_emit32(CodeBuffer &cbuf, long value) {\n-  C2_MacroAssembler _masm(&cbuf);\n+static inline void z_emit32(C2_MacroAssembler &masm, long value) {\n@@ -704,2 +700,1 @@\n-static inline void z_emit48(CodeBuffer &cbuf, long value) {\n-  C2_MacroAssembler _masm(&cbuf);\n+static inline void z_emit48(C2_MacroAssembler &masm, long value) {\n@@ -709,1 +704,1 @@\n-static inline unsigned int z_emit_inst(CodeBuffer &cbuf, long value) {\n+static inline unsigned int z_emit_inst(C2_MacroAssembler &masm, long value) {\n@@ -715,1 +710,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -721,3 +715,1 @@\n-static inline void z_assert_aligned(CodeBuffer &cbuf, int disp, Register index, Register base, int alignment) {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+static inline void z_assert_aligned(C2_MacroAssembler &masm, int disp, Register index, Register base, int alignment) {\n@@ -730,1 +722,1 @@\n-int emit_call_reloc(C2_MacroAssembler &_masm, intptr_t entry_point, relocInfo::relocType rtype,\n+int emit_call_reloc(C2_MacroAssembler &masm, intptr_t entry_point, relocInfo::relocType rtype,\n@@ -761,1 +753,1 @@\n-static int emit_call_reloc(C2_MacroAssembler &_masm, intptr_t entry_point, RelocationHolder const& rspec) {\n+static int emit_call_reloc(C2_MacroAssembler &masm, intptr_t entry_point, RelocationHolder const& rspec) {\n@@ -793,2 +785,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachConstantBaseNode::emit(C2_MacroAssembler& masm, PhaseRegAlloc* ra_) const {\n@@ -843,1 +834,1 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachPrologNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -845,1 +836,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -918,2 +908,1 @@\n-void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachEpilogNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -988,1 +977,1 @@\n-static unsigned int z_ld_st_helper(CodeBuffer *cbuf, const char *op_str, unsigned long opcode,\n+static unsigned int z_ld_st_helper(C2_MacroAssembler *masm, const char *op_str, unsigned long opcode,\n@@ -991,1 +980,1 @@\n-  if (cbuf) {\n+  if (masm) {\n@@ -993,1 +982,1 @@\n-      return z_emit_inst(*cbuf, opcode | Assembler::reg(Matcher::_regEncode[reg], 8, 48) |\n+      return z_emit_inst(*masm, opcode | Assembler::reg(Matcher::_regEncode[reg], 8, 48) |\n@@ -996,1 +985,1 @@\n-      return z_emit_inst(*cbuf, opcode | Assembler::reg(Matcher::_regEncode[reg], 8, 32) |\n+      return z_emit_inst(*masm, opcode | Assembler::reg(Matcher::_regEncode[reg], 8, 32) |\n@@ -1009,4 +998,3 @@\n-static unsigned int z_mvc_helper(CodeBuffer *cbuf, int len, int dst_off, int src_off, bool do_print, outputStream *os) {\n-  if (cbuf) {\n-    C2_MacroAssembler _masm(cbuf);\n-    __ z_mvc(dst_off, len-1, Z_SP, src_off, Z_SP);\n+static unsigned int z_mvc_helper(C2_MacroAssembler *masm, int len, int dst_off, int src_off, bool do_print, outputStream *os) {\n+  if (masm) {\n+    masm->z_mvc(dst_off, len-1, Z_SP, src_off, Z_SP);\n@@ -1024,1 +1012,1 @@\n-uint MachSpillCopyNode::implementation(CodeBuffer *cbuf, PhaseRegAlloc *ra_, bool do_size, outputStream *os) const {\n+uint MachSpillCopyNode::implementation(C2_MacroAssembler *masm, PhaseRegAlloc *ra_, bool do_size, outputStream *os) const {\n@@ -1064,1 +1052,1 @@\n-      return z_mvc_helper(cbuf, is64 ? 8 : 4, dst_offset, src_offset, print, os);\n+      return z_mvc_helper(masm, is64 ? 8 : 4, dst_offset, src_offset, print, os);\n@@ -1069,2 +1057,2 @@\n-      return z_ld_st_helper(cbuf, \"LG  \", LG_ZOPC, r0, src_offset, print, os) +\n-             z_ld_st_helper(cbuf, \"STG \", STG_ZOPC, r0, dst_offset, print, os);\n+      return z_ld_st_helper(masm, \"LG  \", LG_ZOPC, r0, src_offset, print, os) +\n+             z_ld_st_helper(masm, \"STG \", STG_ZOPC, r0, dst_offset, print, os);\n@@ -1073,2 +1061,2 @@\n-    return z_ld_st_helper(cbuf, \"LY   \", LY_ZOPC, r0, src_offset, print, os) +\n-           z_ld_st_helper(cbuf, \"STY  \", STY_ZOPC, r0, dst_offset, print, os);\n+    return z_ld_st_helper(masm, \"LY   \", LY_ZOPC, r0, src_offset, print, os) +\n+           z_ld_st_helper(masm, \"STY  \", STY_ZOPC, r0, dst_offset, print, os);\n@@ -1084,2 +1072,1 @@\n-    if (cbuf) {\n-      C2_MacroAssembler _masm(cbuf);\n+    if (masm) {\n@@ -1088,1 +1075,1 @@\n-      __ z_lgr(Rdst, Rsrc);\n+      masm->z_lgr(Rdst, Rsrc);\n@@ -1106,1 +1093,1 @@\n-      return z_ld_st_helper(cbuf, \"STG \", STG_ZOPC, src_lo, dst_offset, print, os);\n+      return z_ld_st_helper(masm, \"STG \", STG_ZOPC, src_lo, dst_offset, print, os);\n@@ -1113,1 +1100,1 @@\n-    return z_ld_st_helper(cbuf, mnemo, opc, src_lo, dst_offset, print, os);\n+    return z_ld_st_helper(masm, mnemo, opc, src_lo, dst_offset, print, os);\n@@ -1126,1 +1113,1 @@\n-    return z_ld_st_helper(cbuf, mnemo, opc, dst_lo, src_offset, print, os);\n+    return z_ld_st_helper(masm, mnemo, opc, dst_lo, src_offset, print, os);\n@@ -1131,2 +1118,1 @@\n-    if (cbuf) {\n-      C2_MacroAssembler _masm(cbuf);\n+    if (masm) {\n@@ -1135,1 +1121,1 @@\n-      __ z_ldr(Rdst, Rsrc);\n+      masm->z_ldr(Rdst, Rsrc);\n@@ -1155,1 +1141,1 @@\n-      return z_ld_st_helper(cbuf, mnemo, opc, src_lo, dst_offset, print, os);\n+      return z_ld_st_helper(masm, mnemo, opc, src_lo, dst_offset, print, os);\n@@ -1161,1 +1147,1 @@\n-    return z_ld_st_helper(cbuf, mnemo, opc, src_lo, dst_offset, print, os);\n+    return z_ld_st_helper(masm, mnemo, opc, src_lo, dst_offset, print, os);\n@@ -1172,1 +1158,1 @@\n-      return z_ld_st_helper(cbuf, mnemo, opc, dst_lo, src_offset, print, os);\n+      return z_ld_st_helper(masm, mnemo, opc, dst_lo, src_offset, print, os);\n@@ -1178,1 +1164,1 @@\n-    return z_ld_st_helper(cbuf, mnemo, opc, dst_lo, src_offset, print, os);\n+    return z_ld_st_helper(masm, mnemo, opc, dst_lo, src_offset, print, os);\n@@ -1214,2 +1200,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation(&cbuf, ra_, false, NULL);\n+void MachSpillCopyNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n+  implementation(&masm, ra_, false, NULL);\n@@ -1230,3 +1216,1 @@\n-void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc * ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+void MachNopNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc * ra_) const {\n@@ -1235,1 +1219,1 @@\n-    rem_space = cbuf.insts()->remaining();\n+    rem_space = masm.code_section()->remaining();\n@@ -1247,1 +1231,1 @@\n-      int rem_space2 = cbuf.insts()->remaining();\n+      int rem_space2 = masm.code_section()->remaining();\n@@ -1270,3 +1254,1 @@\n-void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+void BoxLockNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -1338,2 +1320,1 @@\n-void MachUEPNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachUEPNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -1400,2 +1381,2 @@\n-  static int emit_exception_handler(CodeBuffer &cbuf);\n-  static int emit_deopt_handler(CodeBuffer& cbuf);\n+  static int emit_exception_handler(C2_MacroAssembler &masm);\n+  static int emit_deopt_handler(C2_MacroAssembler& masm);\n@@ -1439,1 +1420,1 @@\n-int HandlerImpl::emit_exception_handler(CodeBuffer &cbuf) {\n+int HandlerImpl::emit_exception_handler(C2_MacroAssembler &masm) {\n@@ -1441,2 +1422,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n-\n@@ -1461,2 +1440,1 @@\n-int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+int HandlerImpl::emit_deopt_handler(C2_MacroAssembler& masm) {\n@@ -1724,1 +1702,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1730,1 +1707,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1738,1 +1714,1 @@\n-    z_emit16(cbuf, $primary |\n+    z_emit16(masm, $primary |\n@@ -1745,1 +1721,1 @@\n-    z_emit32(cbuf, $primary |\n+    z_emit32(masm, $primary |\n@@ -1752,1 +1728,1 @@\n-    z_emit32(cbuf, $primary |\n+    z_emit32(masm, $primary |\n@@ -1760,1 +1736,1 @@\n-    z_emit32(cbuf, $primary |\n+    z_emit32(masm, $primary |\n@@ -1767,1 +1743,1 @@\n-    z_emit32(cbuf, $primary |\n+    z_emit32(masm, $primary |\n@@ -1774,1 +1750,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1782,1 +1758,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1789,1 +1765,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1795,1 +1771,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1802,1 +1778,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1811,1 +1787,1 @@\n-    z_emit32(cbuf, $primary |\n+    z_emit32(masm, $primary |\n@@ -1820,1 +1796,1 @@\n-    z_emit32(cbuf, $primary |\n+    z_emit32(masm, $primary |\n@@ -1827,1 +1803,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1835,1 +1811,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1848,1 +1824,1 @@\n-    z_emit_inst(cbuf, $primary |\n+    z_emit_inst(masm, $primary |\n@@ -1855,1 +1831,1 @@\n-    z_emit_inst(cbuf, $primary |\n+    z_emit_inst(masm, $primary |\n@@ -1866,1 +1842,1 @@\n-      z_emit_inst(cbuf, $primary |\n+      z_emit_inst(masm, $primary |\n@@ -1872,1 +1848,1 @@\n-      z_emit_inst(cbuf, $primary |\n+      z_emit_inst(masm, $primary |\n@@ -1884,1 +1860,1 @@\n-      z_emit_inst(cbuf, $primary |\n+      z_emit_inst(masm, $primary |\n@@ -1890,1 +1866,1 @@\n-      z_emit_inst(cbuf, $primary |\n+      z_emit_inst(masm, $primary |\n@@ -1904,1 +1880,1 @@\n-      z_emit_inst(cbuf, $secondary |\n+      z_emit_inst(masm, $secondary |\n@@ -1910,1 +1886,1 @@\n-      z_emit_inst(cbuf, $primary |\n+      z_emit_inst(masm, $primary |\n@@ -1916,1 +1892,0 @@\n-        C2_MacroAssembler _masm(&cbuf);\n@@ -1919,1 +1894,1 @@\n-        z_emit_inst(cbuf, $secondary |\n+        z_emit_inst(masm, $secondary |\n@@ -1928,1 +1903,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1941,1 +1915,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1954,1 +1927,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1967,1 +1939,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1980,1 +1951,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2004,1 +1974,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2030,1 +1999,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2055,1 +2023,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2082,2 +2049,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -2110,1 +2075,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2114,1 +2078,1 @@\n-      ret_offset = emit_call_reloc(_masm, $meth$$method,\n+      ret_offset = emit_call_reloc(masm, $meth$$method,\n@@ -2117,1 +2081,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -2119,1 +2083,1 @@\n-        ret_offset = emit_call_reloc(_masm, $meth$$method,\n+        ret_offset = emit_call_reloc(masm, $meth$$method,\n@@ -2122,1 +2086,1 @@\n-        ret_offset = emit_call_reloc(_masm, $meth$$method,\n+        ret_offset = emit_call_reloc(masm, $meth$$method,\n@@ -2129,1 +2093,1 @@\n-      address stub = CompiledStaticCall::emit_to_interp_stub(cbuf);\n+      address stub = CompiledStaticCall::emit_to_interp_stub(masm);\n@@ -2139,1 +2103,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2157,1 +2120,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -2161,1 +2124,1 @@\n-      ret_off += emit_call_reloc(_masm, $meth$$method, relocInfo::none, ra_);\n+      ret_off += emit_call_reloc(masm, $meth$$method, relocInfo::none, ra_);\n@@ -2194,1 +2157,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2215,1 +2177,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2232,1 +2193,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2249,1 +2209,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2258,1 +2217,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2267,1 +2225,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2283,1 +2240,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -9736,1 +9692,1 @@\n-    cbuf.set_insts_mark();\n+    masm.set_inst_mark();\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":81,"deletions":125,"binary":false,"changes":206,"status":"modified"},{"patch":"@@ -3998,0 +3998,1 @@\n+  InstructionMark im(this);\n@@ -4415,0 +4416,1 @@\n+  InstructionMark im(this);\n@@ -4432,0 +4434,1 @@\n+  InstructionMark im(this);\n@@ -4449,0 +4452,1 @@\n+  InstructionMark im(this);\n@@ -4466,0 +4470,1 @@\n+  InstructionMark im(this);\n@@ -4483,0 +4488,1 @@\n+  InstructionMark im(this);\n@@ -4507,0 +4513,1 @@\n+  InstructionMark im(this);\n@@ -4531,0 +4538,1 @@\n+  InstructionMark im(this);\n@@ -4548,0 +4556,1 @@\n+  InstructionMark im(this);\n@@ -12575,0 +12584,1 @@\n+  InstructionMark im(this);\n@@ -12586,0 +12596,1 @@\n+  InstructionMark im(this);\n@@ -12601,0 +12612,1 @@\n+  InstructionMark im(this);\n@@ -12735,0 +12747,1 @@\n+  InstructionMark im(this);\n@@ -12740,0 +12753,1 @@\n+  InstructionMark im(this);\n@@ -12745,0 +12759,1 @@\n+  InstructionMark im(this);\n@@ -12750,0 +12765,1 @@\n+  InstructionMark im(this);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-#define __ _masm.\n-address CompiledStaticCall::emit_to_interp_stub(CodeBuffer &cbuf, address mark) {\n+#define __ masm.\n+address CompiledStaticCall::emit_to_interp_stub(MacroAssembler &masm, address mark) {\n@@ -45,1 +45,1 @@\n-    mark = cbuf.insts_mark();  \/\/ Get mark within main instrs section.\n+    mark = __ inst_mark();  \/\/ Get mark within main instrs section.\n@@ -48,4 +48,0 @@\n-  \/\/ Note that the code buffer's insts_mark is always relative to insts.\n-  \/\/ That's why we must use the macroassembler to generate a stub.\n-  MacroAssembler _masm(&cbuf);\n-\n","filename":"src\/hotspot\/cpu\/x86\/compiledIC_x86.cpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm,\n@@ -64,1 +64,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm,\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoah_x86_32.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm,\n@@ -65,1 +65,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm,\n@@ -84,1 +84,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm,\n@@ -106,1 +106,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&masm,\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoah_x86_64.ad","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -377,1 +377,1 @@\n-extern void vec_spill_helper(CodeBuffer *cbuf, bool is_load,\n+extern void vec_spill_helper(MacroAssembler *masm, bool is_load,\n@@ -439,1 +439,1 @@\n-    vec_spill_helper(__ code(), false \/* is_load *\/, _spill_offset, opto_reg, ideal_reg, tty);\n+    vec_spill_helper(_masm, false \/* is_load *\/, _spill_offset, opto_reg, ideal_reg, tty);\n@@ -445,1 +445,1 @@\n-    vec_spill_helper(__ code(), true \/* is_load *\/, _spill_offset, opto_reg, ideal_reg, tty);\n+    vec_spill_helper(_masm, true \/* is_load *\/, _spill_offset, opto_reg, ideal_reg, tty);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/zBarrierSetAssembler_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-static void z_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, uint8_t barrier_data) {\n+static void z_load_barrier(MacroAssembler& masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, uint8_t barrier_data) {\n@@ -42,1 +42,1 @@\n-    IntelJccErratumAlignment intel_alignment(_masm, 10 \/* jcc_size *\/);\n+    IntelJccErratumAlignment intel_alignment(masm, 10 \/* jcc_size *\/);\n@@ -49,1 +49,1 @@\n-static void z_load_barrier_cmpxchg(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, Label& good) {\n+static void z_load_barrier_cmpxchg(MacroAssembler& masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, Label& good) {\n@@ -52,1 +52,1 @@\n-    IntelJccErratumAlignment intel_alignment(_masm, 10 \/* jcc_size *\/);\n+    IntelJccErratumAlignment intel_alignment(masm, 10 \/* jcc_size *\/);\n@@ -57,1 +57,1 @@\n-    IntelJccErratumAlignment intel_alignment(_masm, 5 \/* jcc_size *\/);\n+    IntelJccErratumAlignment intel_alignment(masm, 5 \/* jcc_size *\/);\n@@ -78,1 +78,1 @@\n-    z_load_barrier(_masm, this, $mem$$Address, $dst$$Register, noreg \/* tmp *\/, barrier_data());\n+    z_load_barrier(masm, this, $mem$$Address, $dst$$Register, noreg \/* tmp *\/, barrier_data());\n@@ -101,1 +101,1 @@\n-      z_load_barrier_cmpxchg(_masm, this, $mem$$Address, $oldval$$Register, $tmp$$Register, good);\n+      z_load_barrier_cmpxchg(masm, this, $mem$$Address, $oldval$$Register, $tmp$$Register, good);\n@@ -132,1 +132,1 @@\n-      z_load_barrier_cmpxchg(_masm, this, $mem$$Address, $oldval$$Register, $tmp$$Register, good);\n+      z_load_barrier_cmpxchg(masm, this, $mem$$Address, $oldval$$Register, $tmp$$Register, good);\n@@ -155,1 +155,1 @@\n-    z_load_barrier(_masm, this, Address(noreg, 0), $newval$$Register, noreg \/* tmp *\/, barrier_data());\n+    z_load_barrier(masm, this, Address(noreg, 0), $newval$$Register, noreg \/* tmp *\/, barrier_data());\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/z_x86_64.ad","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1327,2 +1327,1 @@\n-  CodeBuffer* cbuf = masm->code_section()->outer();\n-  address stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, __ pc());\n+  address stub = CompiledStaticCall::emit_to_interp_stub(*masm, __ pc());\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1190,2 +1190,2 @@\n-  static int emit_exception_handler(CodeBuffer &cbuf);\n-  static int emit_deopt_handler(CodeBuffer& cbuf);\n+  static int emit_exception_handler(C2_MacroAssembler &masm);\n+  static int emit_deopt_handler(C2_MacroAssembler &masm);\n@@ -1303,1 +1303,1 @@\n-int HandlerImpl::emit_exception_handler(CodeBuffer& cbuf) {\n+int HandlerImpl::emit_exception_handler(C2_MacroAssembler &masm) {\n@@ -1307,1 +1307,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1321,1 +1320,1 @@\n-int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf) {\n+int HandlerImpl::emit_deopt_handler(C2_MacroAssembler &masm) {\n@@ -1325,1 +1324,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -2523,1 +2521,1 @@\n-static void vec_mov_helper(CodeBuffer *cbuf, int src_lo, int dst_lo,\n+static void vec_mov_helper(MacroAssembler *masm, int src_lo, int dst_lo,\n@@ -2529,2 +2527,1 @@\n-  if (cbuf) {\n-    C2_MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -2536,1 +2533,1 @@\n-      __ movdqu(as_XMMRegister(Matcher::_regEncode[dst_lo]), as_XMMRegister(Matcher::_regEncode[src_lo]));\n+      masm->movdqu(as_XMMRegister(Matcher::_regEncode[dst_lo]), as_XMMRegister(Matcher::_regEncode[src_lo]));\n@@ -2539,1 +2536,1 @@\n-        __ movdqu(as_XMMRegister(Matcher::_regEncode[dst_lo]), as_XMMRegister(Matcher::_regEncode[src_lo]));\n+        masm->movdqu(as_XMMRegister(Matcher::_regEncode[dst_lo]), as_XMMRegister(Matcher::_regEncode[src_lo]));\n@@ -2541,1 +2538,1 @@\n-        __ vextractf32x4(as_XMMRegister(Matcher::_regEncode[dst_lo]), as_XMMRegister(Matcher::_regEncode[src_lo]), 0x0);\n+        masm->vextractf32x4(as_XMMRegister(Matcher::_regEncode[dst_lo]), as_XMMRegister(Matcher::_regEncode[src_lo]), 0x0);\n@@ -2547,1 +2544,1 @@\n-      __ vmovdqu(as_XMMRegister(Matcher::_regEncode[dst_lo]), as_XMMRegister(Matcher::_regEncode[src_lo]));\n+      masm->vmovdqu(as_XMMRegister(Matcher::_regEncode[dst_lo]), as_XMMRegister(Matcher::_regEncode[src_lo]));\n@@ -2550,1 +2547,1 @@\n-        __ vmovdqu(as_XMMRegister(Matcher::_regEncode[dst_lo]), as_XMMRegister(Matcher::_regEncode[src_lo]));\n+        masm->vmovdqu(as_XMMRegister(Matcher::_regEncode[dst_lo]), as_XMMRegister(Matcher::_regEncode[src_lo]));\n@@ -2552,1 +2549,1 @@\n-        __ vextractf64x4(as_XMMRegister(Matcher::_regEncode[dst_lo]), as_XMMRegister(Matcher::_regEncode[src_lo]), 0x0);\n+        masm->vextractf64x4(as_XMMRegister(Matcher::_regEncode[dst_lo]), as_XMMRegister(Matcher::_regEncode[src_lo]), 0x0);\n@@ -2557,1 +2554,1 @@\n-      __ evmovdquq(as_XMMRegister(Matcher::_regEncode[dst_lo]), as_XMMRegister(Matcher::_regEncode[src_lo]), 2);\n+      masm->evmovdquq(as_XMMRegister(Matcher::_regEncode[dst_lo]), as_XMMRegister(Matcher::_regEncode[src_lo]), 2);\n@@ -2581,1 +2578,1 @@\n-void vec_spill_helper(CodeBuffer *cbuf, bool is_load,\n+void vec_spill_helper(MacroAssembler *masm, bool is_load,\n@@ -2583,2 +2580,1 @@\n-  if (cbuf) {\n-    C2_MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -2588,1 +2584,1 @@\n-        __ movdl(as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset));\n+        masm->movdl(as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset));\n@@ -2591,1 +2587,1 @@\n-        __ movq(as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset));\n+        masm->movq(as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset));\n@@ -2595,1 +2591,1 @@\n-        __ movdqu(as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset));\n+        masm->movdqu(as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset));\n@@ -2598,1 +2594,1 @@\n-          __ movdqu(as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset));\n+          masm->movdqu(as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset));\n@@ -2600,2 +2596,2 @@\n-          __ vpxor(as_XMMRegister(Matcher::_regEncode[reg]), as_XMMRegister(Matcher::_regEncode[reg]), as_XMMRegister(Matcher::_regEncode[reg]), 2);\n-          __ vinsertf32x4(as_XMMRegister(Matcher::_regEncode[reg]), as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset),0x0);\n+          masm->vpxor(as_XMMRegister(Matcher::_regEncode[reg]), as_XMMRegister(Matcher::_regEncode[reg]), as_XMMRegister(Matcher::_regEncode[reg]), 2);\n+          masm->vinsertf32x4(as_XMMRegister(Matcher::_regEncode[reg]), as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset),0x0);\n@@ -2607,1 +2603,1 @@\n-        __ vmovdqu(as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset));\n+        masm->vmovdqu(as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset));\n@@ -2610,1 +2606,1 @@\n-          __ vmovdqu(as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset));\n+          masm->vmovdqu(as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset));\n@@ -2612,2 +2608,2 @@\n-          __ vpxor(as_XMMRegister(Matcher::_regEncode[reg]), as_XMMRegister(Matcher::_regEncode[reg]), as_XMMRegister(Matcher::_regEncode[reg]), 2);\n-          __ vinsertf64x4(as_XMMRegister(Matcher::_regEncode[reg]), as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset),0x0);\n+          masm->vpxor(as_XMMRegister(Matcher::_regEncode[reg]), as_XMMRegister(Matcher::_regEncode[reg]), as_XMMRegister(Matcher::_regEncode[reg]), 2);\n+          masm->vinsertf64x4(as_XMMRegister(Matcher::_regEncode[reg]), as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset),0x0);\n@@ -2618,1 +2614,1 @@\n-        __ evmovdquq(as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset), 2);\n+        masm->evmovdquq(as_XMMRegister(Matcher::_regEncode[reg]), Address(rsp, stack_offset), 2);\n@@ -2626,1 +2622,1 @@\n-        __ movdl(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]));\n+        masm->movdl(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]));\n@@ -2629,1 +2625,1 @@\n-        __ movq(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]));\n+        masm->movq(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]));\n@@ -2633,1 +2629,1 @@\n-        __ movdqu(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]));\n+        masm->movdqu(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]));\n@@ -2636,1 +2632,1 @@\n-          __ movdqu(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]));\n+          masm->movdqu(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]));\n@@ -2639,1 +2635,1 @@\n-          __ vextractf32x4(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]), 0x0);\n+          masm->vextractf32x4(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]), 0x0);\n@@ -2645,1 +2641,1 @@\n-        __ vmovdqu(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]));\n+        masm->vmovdqu(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]));\n@@ -2648,1 +2644,1 @@\n-          __ vmovdqu(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]));\n+          masm->vmovdqu(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]));\n@@ -2651,1 +2647,1 @@\n-          __ vextractf64x4(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]), 0x0);\n+          masm->vextractf64x4(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]), 0x0);\n@@ -2656,1 +2652,1 @@\n-        __ evmovdquq(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]), 2);\n+        masm->evmovdquq(Address(rsp, stack_offset), as_XMMRegister(Matcher::_regEncode[reg]), 2);\n@@ -2742,2 +2738,1 @@\n-  void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc*) const {\n-    C2_MacroAssembler _masm(&cbuf);\n+  void MachNopNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc*) const {\n@@ -2757,2 +2752,1 @@\n-  void MachBreakpointNode::emit(CodeBuffer &cbuf, PhaseRegAlloc* ra_) const {\n-    C2_MacroAssembler _masm(&cbuf);\n+  void MachBreakpointNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc* ra_) const {\n@@ -2771,1 +2765,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":37,"deletions":44,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -255,1 +255,1 @@\n-#define __ _masm.\n+#define __ masm.\n@@ -339,1 +339,1 @@\n-void emit_rm(CodeBuffer &cbuf, int f1, int f2, int f3) {\n+void emit_rm(C2_MacroAssembler &masm, int f1, int f2, int f3) {\n@@ -341,1 +341,1 @@\n-  cbuf.insts()->emit_int8(c);\n+  masm.code()->insts()->emit_int8(c);\n@@ -345,1 +345,1 @@\n-void emit_cc(CodeBuffer &cbuf, int f1, int f2) {\n+void emit_cc(C2_MacroAssembler &masm, int f1, int f2) {\n@@ -347,1 +347,1 @@\n-  cbuf.insts()->emit_int8(c);\n+  masm.code()->insts()->emit_int8(c);\n@@ -351,2 +351,2 @@\n-void emit_opcode(CodeBuffer &cbuf, int code) {\n-  cbuf.insts()->emit_int8((unsigned char) code);\n+void emit_opcode(C2_MacroAssembler &masm, int code) {\n+  masm.code()->insts()->emit_int8((unsigned char) code);\n@@ -356,3 +356,3 @@\n-void emit_opcode(CodeBuffer &cbuf, int code, relocInfo::relocType reloc, int offset = 0) {\n-  cbuf.relocate(cbuf.insts_mark() + offset, reloc);\n-  emit_opcode(cbuf, code);\n+void emit_opcode(C2_MacroAssembler &masm, int code, relocInfo::relocType reloc, int offset = 0) {\n+  masm.relocate(masm.inst_mark() + offset, reloc);\n+  emit_opcode(masm, code);\n@@ -362,2 +362,2 @@\n-void emit_d8(CodeBuffer &cbuf, int d8) {\n-  cbuf.insts()->emit_int8((unsigned char) d8);\n+void emit_d8(C2_MacroAssembler &masm, int d8) {\n+  masm.code()->insts()->emit_int8((unsigned char) d8);\n@@ -367,2 +367,2 @@\n-void emit_d16(CodeBuffer &cbuf, int d16) {\n-  cbuf.insts()->emit_int16(d16);\n+void emit_d16(C2_MacroAssembler &masm, int d16) {\n+  masm.code()->insts()->emit_int16(d16);\n@@ -372,2 +372,2 @@\n-void emit_d32(CodeBuffer &cbuf, int d32) {\n-  cbuf.insts()->emit_int32(d32);\n+void emit_d32(C2_MacroAssembler &masm, int d32) {\n+  masm.code()->insts()->emit_int32(d32);\n@@ -377,1 +377,1 @@\n-void emit_d32_reloc(CodeBuffer &cbuf, int d32, relocInfo::relocType reloc,\n+void emit_d32_reloc(C2_MacroAssembler &masm, int d32, relocInfo::relocType reloc,\n@@ -379,2 +379,2 @@\n-  cbuf.relocate(cbuf.insts_mark(), reloc, format);\n-  cbuf.insts()->emit_int32(d32);\n+  masm.relocate(masm.inst_mark(), reloc, format);\n+  masm.code()->insts()->emit_int32(d32);\n@@ -384,1 +384,1 @@\n-void emit_d32_reloc(CodeBuffer &cbuf, int d32, RelocationHolder const& rspec,\n+void emit_d32_reloc(C2_MacroAssembler &masm, int d32, RelocationHolder const& rspec,\n@@ -391,2 +391,2 @@\n-  cbuf.relocate(cbuf.insts_mark(), rspec, format);\n-  cbuf.insts()->emit_int32(d32);\n+  masm.relocate(masm.inst_mark(), rspec, format);\n+  masm.code()->insts()->emit_int32(d32);\n@@ -396,2 +396,2 @@\n-void store_to_stackslot(CodeBuffer &cbuf, int opcode, int rm_field, int disp) {\n-  emit_opcode( cbuf, opcode );               \/\/ (e.g., FILD   [ESP+src])\n+void store_to_stackslot(C2_MacroAssembler &masm, int opcode, int rm_field, int disp) {\n+  emit_opcode( masm, opcode );               \/\/ (e.g., FILD   [ESP+src])\n@@ -399,3 +399,3 @@\n-    emit_rm( cbuf, 0x01, rm_field, ESP_enc );  \/\/ R\/M byte\n-    emit_rm( cbuf, 0x00, ESP_enc, ESP_enc);    \/\/ SIB byte\n-    emit_d8 (cbuf, disp);     \/\/ Displacement  \/\/ R\/M byte\n+    emit_rm( masm, 0x01, rm_field, ESP_enc );  \/\/ R\/M byte\n+    emit_rm( masm, 0x00, ESP_enc, ESP_enc);    \/\/ SIB byte\n+    emit_d8 (masm, disp);     \/\/ Displacement  \/\/ R\/M byte\n@@ -403,3 +403,3 @@\n-    emit_rm( cbuf, 0x02, rm_field, ESP_enc );  \/\/ R\/M byte\n-    emit_rm( cbuf, 0x00, ESP_enc, ESP_enc);    \/\/ SIB byte\n-    emit_d32(cbuf, disp);     \/\/ Displacement  \/\/ R\/M byte\n+    emit_rm( masm, 0x02, rm_field, ESP_enc );  \/\/ R\/M byte\n+    emit_rm( masm, 0x00, ESP_enc, ESP_enc);    \/\/ SIB byte\n+    emit_d32(masm, disp);     \/\/ Displacement  \/\/ R\/M byte\n@@ -410,1 +410,1 @@\n-void encode_RegMem( CodeBuffer &cbuf, int reg_encoding, int base, int index, int scale, int displace, relocInfo::relocType disp_reloc ) {\n+void encode_RegMem( C2_MacroAssembler &masm, int reg_encoding, int base, int index, int scale, int displace, relocInfo::relocType disp_reloc ) {\n@@ -416,1 +416,1 @@\n-      emit_rm(cbuf, 0x0, reg_encoding, base);\n+      emit_rm(masm, 0x0, reg_encoding, base);\n@@ -421,2 +421,2 @@\n-        emit_rm(cbuf, 0x1, reg_encoding, base);\n-        emit_d8(cbuf, displace);\n+        emit_rm(masm, 0x1, reg_encoding, base);\n+        emit_d8(masm, displace);\n@@ -426,1 +426,1 @@\n-          emit_rm(cbuf, 0x0, reg_encoding, 0x5);\n+          emit_rm(masm, 0x0, reg_encoding, 0x5);\n@@ -429,1 +429,1 @@\n-            emit_d32_reloc(cbuf, displace, disp_reloc, 1);\n+            emit_d32_reloc(masm, displace, disp_reloc, 1);\n@@ -431,1 +431,1 @@\n-            emit_d32      (cbuf, displace);\n+            emit_d32      (masm, displace);\n@@ -435,1 +435,1 @@\n-          emit_rm(cbuf, 0x2, reg_encoding, base);\n+          emit_rm(masm, 0x2, reg_encoding, base);\n@@ -437,1 +437,1 @@\n-            emit_d32_reloc(cbuf, displace, disp_reloc, 1);\n+            emit_d32_reloc(masm, displace, disp_reloc, 1);\n@@ -439,1 +439,1 @@\n-            emit_d32      (cbuf, displace);\n+            emit_d32      (masm, displace);\n@@ -448,2 +448,2 @@\n-      emit_rm(cbuf, 0x0, reg_encoding, 0x4);\n-      emit_rm(cbuf, scale, index, base);\n+      emit_rm(masm, 0x0, reg_encoding, 0x4);\n+      emit_rm(masm, scale, index, base);\n@@ -454,3 +454,3 @@\n-        emit_rm(cbuf, 0x1, reg_encoding, 0x4);\n-        emit_rm(cbuf, scale, index, base);\n-        emit_d8(cbuf, displace);\n+        emit_rm(masm, 0x1, reg_encoding, 0x4);\n+        emit_rm(masm, scale, index, base);\n+        emit_d8(masm, displace);\n@@ -460,2 +460,2 @@\n-          emit_rm(cbuf, 0x2, reg_encoding, 0x4);\n-          emit_rm(cbuf, scale, index, 0x04);\n+          emit_rm(masm, 0x2, reg_encoding, 0x4);\n+          emit_rm(masm, scale, index, 0x04);\n@@ -463,2 +463,2 @@\n-          emit_rm(cbuf, 0x2, reg_encoding, 0x4);\n-          emit_rm(cbuf, scale, index, base);\n+          emit_rm(masm, 0x2, reg_encoding, 0x4);\n+          emit_rm(masm, scale, index, base);\n@@ -467,1 +467,1 @@\n-          emit_d32_reloc(cbuf, displace, disp_reloc, 1);\n+          emit_d32_reloc(masm, displace, disp_reloc, 1);\n@@ -469,1 +469,1 @@\n-          emit_d32      (cbuf, displace);\n+          emit_d32      (masm, displace);\n@@ -477,1 +477,1 @@\n-void encode_Copy( CodeBuffer &cbuf, int dst_encoding, int src_encoding ) {\n+void encode_Copy( C2_MacroAssembler &masm, int dst_encoding, int src_encoding ) {\n@@ -481,2 +481,2 @@\n-    emit_opcode( cbuf, 0x8B );\n-    emit_rm(cbuf, 0x3, dst_encoding, src_encoding );\n+    emit_opcode( masm, 0x8B );\n+    emit_rm(masm, 0x3, dst_encoding, src_encoding );\n@@ -486,1 +486,1 @@\n-void emit_cmpfp_fixup(MacroAssembler& _masm) {\n+void emit_cmpfp_fixup(MacroAssembler& masm) {\n@@ -506,1 +506,1 @@\n-void emit_cmpfp3(MacroAssembler& _masm, Register dst) {\n+void emit_cmpfp3(MacroAssembler& masm, Register dst) {\n@@ -529,1 +529,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n+void MachConstantBaseNode::emit(C2_MacroAssembler& masm, PhaseRegAlloc* ra_) const {\n@@ -609,1 +609,1 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachPrologNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -611,1 +611,0 @@\n-  MacroAssembler _masm(&cbuf);\n@@ -618,1 +617,1 @@\n-  C->output()->set_frame_complete(cbuf.insts_size());\n+  C->output()->set_frame_complete(masm.offset());\n@@ -666,1 +665,1 @@\n-void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachEpilogNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -668,1 +667,0 @@\n-  MacroAssembler _masm(&cbuf);\n@@ -673,1 +671,1 @@\n-    _masm.vzeroupper();\n+    masm.vzeroupper();\n@@ -677,1 +675,1 @@\n-    _masm.fldcw(ExternalAddress(StubRoutines::x86::addr_fpu_cntrl_wrd_std()));\n+    masm.fldcw(ExternalAddress(StubRoutines::x86::addr_fpu_cntrl_wrd_std()));\n@@ -688,3 +686,3 @@\n-    emit_opcode(cbuf, 0x81); \/\/ add  SP, #framesize\n-    emit_rm(cbuf, 0x3, 0x00, ESP_enc);\n-    emit_d32(cbuf, framesize);\n+    emit_opcode(masm, 0x81); \/\/ add  SP, #framesize\n+    emit_rm(masm, 0x3, 0x00, ESP_enc);\n+    emit_d32(masm, framesize);\n@@ -692,3 +690,3 @@\n-    emit_opcode(cbuf, 0x83); \/\/ add  SP, #framesize\n-    emit_rm(cbuf, 0x3, 0x00, ESP_enc);\n-    emit_d8(cbuf, framesize);\n+    emit_opcode(masm, 0x83); \/\/ add  SP, #framesize\n+    emit_rm(masm, 0x3, 0x00, ESP_enc);\n+    emit_d8(masm, framesize);\n@@ -697,1 +695,1 @@\n-  emit_opcode(cbuf, 0x58 | EBP_enc);\n+  emit_opcode(masm, 0x58 | EBP_enc);\n@@ -705,1 +703,0 @@\n-    MacroAssembler masm(&cbuf);\n@@ -712,0 +709,1 @@\n+    __ set_inst_mark();\n@@ -713,0 +711,1 @@\n+    __ clear_inst_mark();\n@@ -749,1 +748,1 @@\n-static int impl_helper( CodeBuffer *cbuf, bool do_size, bool is_load, int offset, int reg,\n+static int impl_helper( C2_MacroAssembler *masm, bool do_size, bool is_load, int offset, int reg,\n@@ -751,3 +750,5 @@\n-  if( cbuf ) {\n-    emit_opcode  (*cbuf, opcode );\n-    encode_RegMem(*cbuf, Matcher::_regEncode[reg], ESP_enc, 0x4, 0, offset, relocInfo::none);\n+  if( masm ) {\n+    masm->set_inst_mark();\n+    emit_opcode  (*masm, opcode );\n+    encode_RegMem(*masm, Matcher::_regEncode[reg], ESP_enc, 0x4, 0, offset, relocInfo::none);\n+    masm->clear_inst_mark();\n@@ -770,1 +771,1 @@\n-static int impl_x_helper( CodeBuffer *cbuf, bool do_size, bool is_load,\n+static int impl_x_helper( C2_MacroAssembler *masm, bool do_size, bool is_load,\n@@ -778,2 +779,1 @@\n-  if (cbuf) {\n-    MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -782,1 +782,1 @@\n-    _masm.set_managed();\n+    masm->set_managed();\n@@ -785,1 +785,1 @@\n-        __ movdbl(as_XMMRegister(Matcher::_regEncode[reg_lo]), Address(rsp, offset));\n+        masm->movdbl(as_XMMRegister(Matcher::_regEncode[reg_lo]), Address(rsp, offset));\n@@ -787,1 +787,1 @@\n-        __ movdbl(Address(rsp, offset), as_XMMRegister(Matcher::_regEncode[reg_lo]));\n+        masm->movdbl(Address(rsp, offset), as_XMMRegister(Matcher::_regEncode[reg_lo]));\n@@ -791,1 +791,1 @@\n-        __ movflt(as_XMMRegister(Matcher::_regEncode[reg_lo]), Address(rsp, offset));\n+        masm->movflt(as_XMMRegister(Matcher::_regEncode[reg_lo]), Address(rsp, offset));\n@@ -793,1 +793,1 @@\n-        __ movflt(Address(rsp, offset), as_XMMRegister(Matcher::_regEncode[reg_lo]));\n+        masm->movflt(Address(rsp, offset), as_XMMRegister(Matcher::_regEncode[reg_lo]));\n@@ -829,1 +829,1 @@\n-static int impl_movx_helper( CodeBuffer *cbuf, bool do_size, int src_lo, int dst_lo,\n+static int impl_movx_helper( C2_MacroAssembler *masm, bool do_size, int src_lo, int dst_lo,\n@@ -831,2 +831,1 @@\n-  if (cbuf) {\n-    MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -834,1 +833,1 @@\n-    _masm.set_managed();\n+    masm->set_managed();\n@@ -836,1 +835,1 @@\n-      __ movdbl(as_XMMRegister(Matcher::_regEncode[dst_lo]),\n+      masm->movdbl(as_XMMRegister(Matcher::_regEncode[dst_lo]),\n@@ -839,1 +838,1 @@\n-      __ movflt(as_XMMRegister(Matcher::_regEncode[dst_lo]),\n+      masm->movflt(as_XMMRegister(Matcher::_regEncode[dst_lo]),\n@@ -868,1 +867,1 @@\n-static int impl_movgpr2x_helper( CodeBuffer *cbuf, bool do_size, int src_lo, int dst_lo,\n+static int impl_movgpr2x_helper( C2_MacroAssembler *masm, bool do_size, int src_lo, int dst_lo,\n@@ -871,2 +870,1 @@\n-  if (cbuf) {\n-    MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -874,2 +872,2 @@\n-    _masm.set_managed();\n-    __ movdl(as_XMMRegister(Matcher::_regEncode[dst_lo]),\n+    masm->set_managed();\n+    masm->movdl(as_XMMRegister(Matcher::_regEncode[dst_lo]),\n@@ -886,1 +884,1 @@\n-static int impl_movx2gpr_helper( CodeBuffer *cbuf, bool do_size, int src_lo, int dst_lo,\n+static int impl_movx2gpr_helper( C2_MacroAssembler *masm, bool do_size, int src_lo, int dst_lo,\n@@ -889,2 +887,1 @@\n-  if (cbuf) {\n-    MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -892,2 +889,2 @@\n-    _masm.set_managed();\n-    __ movdl(as_Register(Matcher::_regEncode[dst_lo]),\n+    masm->set_managed();\n+    masm->movdl(as_Register(Matcher::_regEncode[dst_lo]),\n@@ -903,4 +900,4 @@\n-static int impl_mov_helper( CodeBuffer *cbuf, bool do_size, int src, int dst, int size, outputStream* st ) {\n-  if( cbuf ) {\n-    emit_opcode(*cbuf, 0x8B );\n-    emit_rm    (*cbuf, 0x3, Matcher::_regEncode[dst], Matcher::_regEncode[src] );\n+static int impl_mov_helper( C2_MacroAssembler *masm, bool do_size, int src, int dst, int size, outputStream* st ) {\n+  if( masm ) {\n+    emit_opcode(*masm, 0x8B );\n+    emit_rm    (*masm, 0x3, Matcher::_regEncode[dst], Matcher::_regEncode[src] );\n@@ -916,1 +913,1 @@\n-static int impl_fp_store_helper( CodeBuffer *cbuf, bool do_size, int src_lo, int src_hi, int dst_lo, int dst_hi,\n+static int impl_fp_store_helper( C2_MacroAssembler *masm, bool do_size, int src_lo, int src_hi, int dst_lo, int dst_hi,\n@@ -919,3 +916,3 @@\n-    if( cbuf ) {\n-      emit_opcode( *cbuf, 0xD9 );  \/\/ FLD (i.e., push it)\n-      emit_d8( *cbuf, 0xC0-1+Matcher::_regEncode[src_lo] );\n+    if( masm ) {\n+      emit_opcode( *masm, 0xD9 );  \/\/ FLD (i.e., push it)\n+      emit_d8( *masm, 0xC0-1+Matcher::_regEncode[src_lo] );\n@@ -943,1 +940,1 @@\n-  return impl_helper(cbuf,do_size,false,offset,st_op,op,op_str,size, st);\n+  return impl_helper(masm,do_size,false,offset,st_op,op,op_str,size, st);\n@@ -947,1 +944,1 @@\n-static void vec_mov_helper(CodeBuffer *cbuf, int src_lo, int dst_lo,\n+static void vec_mov_helper(MacroAssembler *masm, int src_lo, int dst_lo,\n@@ -950,1 +947,1 @@\n-void vec_spill_helper(CodeBuffer *cbuf, bool is_load,\n+void vec_spill_helper(MacroAssembler *masm, bool is_load,\n@@ -953,1 +950,1 @@\n-static void vec_stack_to_stack_helper(CodeBuffer *cbuf, int src_offset,\n+static void vec_stack_to_stack_helper(MacroAssembler *masm, int src_offset,\n@@ -955,2 +952,1 @@\n-  if (cbuf) {\n-    MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -959,2 +955,2 @@\n-      __ pushl(Address(rsp, src_offset));\n-      __ popl (Address(rsp, dst_offset));\n+      masm->pushl(Address(rsp, src_offset));\n+      masm->popl (Address(rsp, dst_offset));\n@@ -963,4 +959,4 @@\n-      __ pushl(Address(rsp, src_offset));\n-      __ popl (Address(rsp, dst_offset));\n-      __ pushl(Address(rsp, src_offset+4));\n-      __ popl (Address(rsp, dst_offset+4));\n+      masm->pushl(Address(rsp, src_offset));\n+      masm->popl (Address(rsp, dst_offset));\n+      masm->pushl(Address(rsp, src_offset+4));\n+      masm->popl (Address(rsp, dst_offset+4));\n@@ -969,4 +965,4 @@\n-      __ movdqu(Address(rsp, -16), xmm0);\n-      __ movdqu(xmm0, Address(rsp, src_offset));\n-      __ movdqu(Address(rsp, dst_offset), xmm0);\n-      __ movdqu(xmm0, Address(rsp, -16));\n+      masm->movdqu(Address(rsp, -16), xmm0);\n+      masm->movdqu(xmm0, Address(rsp, src_offset));\n+      masm->movdqu(Address(rsp, dst_offset), xmm0);\n+      masm->movdqu(xmm0, Address(rsp, -16));\n@@ -975,4 +971,4 @@\n-      __ vmovdqu(Address(rsp, -32), xmm0);\n-      __ vmovdqu(xmm0, Address(rsp, src_offset));\n-      __ vmovdqu(Address(rsp, dst_offset), xmm0);\n-      __ vmovdqu(xmm0, Address(rsp, -32));\n+      masm->vmovdqu(Address(rsp, -32), xmm0);\n+      masm->vmovdqu(xmm0, Address(rsp, src_offset));\n+      masm->vmovdqu(Address(rsp, dst_offset), xmm0);\n+      masm->vmovdqu(xmm0, Address(rsp, -32));\n@@ -981,4 +977,4 @@\n-      __ evmovdquq(Address(rsp, -64), xmm0, 2);\n-      __ evmovdquq(xmm0, Address(rsp, src_offset), 2);\n-      __ evmovdquq(Address(rsp, dst_offset), xmm0, 2);\n-      __ evmovdquq(xmm0, Address(rsp, -64), 2);\n+      masm->evmovdquq(Address(rsp, -64), xmm0, 2);\n+      masm->evmovdquq(xmm0, Address(rsp, src_offset), 2);\n+      masm->evmovdquq(Address(rsp, dst_offset), xmm0, 2);\n+      masm->evmovdquq(xmm0, Address(rsp, -64), 2);\n@@ -1032,1 +1028,1 @@\n-uint MachSpillCopyNode::implementation( CodeBuffer *cbuf, PhaseRegAlloc *ra_, bool do_size, outputStream* st ) const {\n+uint MachSpillCopyNode::implementation( C2_MacroAssembler *masm, PhaseRegAlloc *ra_, bool do_size, outputStream* st ) const {\n@@ -1061,1 +1057,1 @@\n-      vec_stack_to_stack_helper(cbuf, src_offset, dst_offset, ireg, st);\n+      vec_stack_to_stack_helper(masm, src_offset, dst_offset, ireg, st);\n@@ -1063,1 +1059,1 @@\n-      vec_mov_helper(cbuf, src_first, dst_first, src_second, dst_second, ireg, st);\n+      vec_mov_helper(masm, src_first, dst_first, src_second, dst_second, ireg, st);\n@@ -1066,1 +1062,1 @@\n-      vec_spill_helper(cbuf, false, stack_offset, src_first, ireg, st);\n+      vec_spill_helper(masm, false, stack_offset, src_first, ireg, st);\n@@ -1069,1 +1065,1 @@\n-      vec_spill_helper(cbuf, true,  stack_offset, dst_first, ireg, st);\n+      vec_spill_helper(masm, true,  stack_offset, dst_first, ireg, st);\n@@ -1081,2 +1077,2 @@\n-      size = impl_helper(cbuf,do_size,true ,ra_->reg2offset(src_second),ESI_num,0xFF,\"PUSH  \",size, st);\n-      size = impl_helper(cbuf,do_size,false,ra_->reg2offset(dst_second),EAX_num,0x8F,\"POP   \",size, st);\n+      size = impl_helper(masm,do_size,true ,ra_->reg2offset(src_second),ESI_num,0xFF,\"PUSH  \",size, st);\n+      size = impl_helper(masm,do_size,false,ra_->reg2offset(dst_second),EAX_num,0x8F,\"POP   \",size, st);\n@@ -1086,2 +1082,2 @@\n-    size = impl_helper(cbuf,do_size,true ,ra_->reg2offset(src_first),ESI_num,0xFF,\"PUSH  \",size, st);\n-    size = impl_helper(cbuf,do_size,false,ra_->reg2offset(dst_first),EAX_num,0x8F,\"POP   \",size, st);\n+    size = impl_helper(masm,do_size,true ,ra_->reg2offset(src_first),ESI_num,0xFF,\"PUSH  \",size, st);\n+    size = impl_helper(masm,do_size,false,ra_->reg2offset(dst_first),EAX_num,0x8F,\"POP   \",size, st);\n@@ -1089,2 +1085,2 @@\n-      size = impl_helper(cbuf,do_size,true ,ra_->reg2offset(src_second),ESI_num,0xFF,\"PUSH  \",size, st);\n-      size = impl_helper(cbuf,do_size,false,ra_->reg2offset(dst_second),EAX_num,0x8F,\"POP   \",size, st);\n+      size = impl_helper(masm,do_size,true ,ra_->reg2offset(src_second),ESI_num,0xFF,\"PUSH  \",size, st);\n+      size = impl_helper(masm,do_size,false,ra_->reg2offset(dst_second),EAX_num,0x8F,\"POP   \",size, st);\n@@ -1098,1 +1094,1 @@\n-    size = impl_mov_helper(cbuf,do_size,src_first,dst_first,size, st);\n+    size = impl_mov_helper(masm,do_size,src_first,dst_first,size, st);\n@@ -1102,1 +1098,1 @@\n-    size = impl_helper(cbuf,do_size,false,ra_->reg2offset(dst_first),src_first,0x89,\"MOV \",size, st);\n+    size = impl_helper(masm,do_size,false,ra_->reg2offset(dst_first),src_first,0x89,\"MOV \",size, st);\n@@ -1106,1 +1102,1 @@\n-    size = impl_helper(cbuf,do_size,true ,ra_->reg2offset(src_first),dst_first,0x8B,\"MOV \",size, st);\n+    size = impl_helper(masm,do_size,true ,ra_->reg2offset(src_first),dst_first,0x8B,\"MOV \",size, st);\n@@ -1112,1 +1108,1 @@\n-    return impl_movgpr2x_helper(cbuf,do_size,src_first,dst_first,src_second, dst_second, size, st);\n+    return impl_movgpr2x_helper(masm,do_size,src_first,dst_first,src_second, dst_second, size, st);\n@@ -1119,1 +1115,1 @@\n-    if( cbuf ) {\n+    if( masm ) {\n@@ -1126,4 +1122,4 @@\n-        emit_opcode  (*cbuf, 0xD9 );           \/\/ FLD    ST(i)\n-        emit_d8      (*cbuf, 0xC0+Matcher::_regEncode[src_first]-1 );\n-        emit_opcode  (*cbuf, 0xDD );           \/\/ FSTP   ST(i)\n-        emit_d8      (*cbuf, 0xD8+Matcher::_regEncode[dst_first] );\n+        emit_opcode  (*masm, 0xD9 );           \/\/ FLD    ST(i)\n+        emit_d8      (*masm, 0xC0+Matcher::_regEncode[src_first]-1 );\n+        emit_opcode  (*masm, 0xDD );           \/\/ FSTP   ST(i)\n+        emit_d8      (*masm, 0xD8+Matcher::_regEncode[dst_first] );\n@@ -1131,2 +1127,2 @@\n-        emit_opcode  (*cbuf, 0xDD );           \/\/ FST    ST(i)\n-        emit_d8      (*cbuf, 0xD0+Matcher::_regEncode[dst_first]-1 );\n+        emit_opcode  (*masm, 0xDD );           \/\/ FST    ST(i)\n+        emit_d8      (*masm, 0xD0+Matcher::_regEncode[dst_first]-1 );\n@@ -1146,1 +1142,1 @@\n-    return impl_fp_store_helper(cbuf,do_size,src_first,src_second,dst_first,dst_second,ra_->reg2offset(dst_first),size, st);\n+    return impl_fp_store_helper(masm,do_size,src_first,src_second,dst_first,dst_second,ra_->reg2offset(dst_first),size, st);\n@@ -1162,5 +1158,7 @@\n-    if( cbuf ) {\n-      emit_opcode  (*cbuf, op );\n-      encode_RegMem(*cbuf, 0x0, ESP_enc, 0x4, 0, offset, relocInfo::none);\n-      emit_opcode  (*cbuf, 0xDD );           \/\/ FSTP   ST(i)\n-      emit_d8      (*cbuf, 0xD8+Matcher::_regEncode[dst_first] );\n+    if( masm ) {\n+      masm->set_inst_mark();\n+      emit_opcode  (*masm, op );\n+      encode_RegMem(*masm, 0x0, ESP_enc, 0x4, 0, offset, relocInfo::none);\n+      emit_opcode  (*masm, 0xDD );           \/\/ FSTP   ST(i)\n+      emit_d8      (*masm, 0xD8+Matcher::_regEncode[dst_first] );\n+      masm->clear_inst_mark();\n@@ -1182,1 +1180,1 @@\n-    return impl_movx_helper(cbuf,do_size,src_first,dst_first,src_second, dst_second, size, st);\n+    return impl_movx_helper(masm,do_size,src_first,dst_first,src_second, dst_second, size, st);\n@@ -1189,1 +1187,1 @@\n-    return impl_movx2gpr_helper(cbuf,do_size,src_first,dst_first,src_second, dst_second, size, st);\n+    return impl_movx2gpr_helper(masm,do_size,src_first,dst_first,src_second, dst_second, size, st);\n@@ -1194,1 +1192,1 @@\n-    return impl_x_helper(cbuf,do_size,false,ra_->reg2offset(dst_first), src_first, src_second, size, st);\n+    return impl_x_helper(masm,do_size,false,ra_->reg2offset(dst_first), src_first, src_second, size, st);\n@@ -1199,1 +1197,1 @@\n-    return impl_x_helper(cbuf,do_size,true ,ra_->reg2offset(src_first),dst_first, dst_second, size, st);\n+    return impl_x_helper(masm,do_size,true ,ra_->reg2offset(src_first),dst_first, dst_second, size, st);\n@@ -1206,5 +1204,5 @@\n-    if( cbuf ) {\n-      emit_opcode(*cbuf,0x8D);  \/\/ LEA  ESP,[ESP-8]\n-      emit_rm(*cbuf, 0x1, ESP_enc, 0x04);\n-      emit_rm(*cbuf, 0x0, 0x04, ESP_enc);\n-      emit_d8(*cbuf,0xF8);\n+    if( masm ) {\n+      emit_opcode(*masm,0x8D);  \/\/ LEA  ESP,[ESP-8]\n+      emit_rm(*masm, 0x1, ESP_enc, 0x04);\n+      emit_rm(*masm, 0x0, 0x04, ESP_enc);\n+      emit_d8(*masm,0xF8);\n@@ -1219,1 +1217,1 @@\n-    size = impl_fp_store_helper(cbuf,do_size,src_first,src_second,dst_first,dst_second,0,size, st);\n+    size = impl_fp_store_helper(masm,do_size,src_first,src_second,dst_first,dst_second,0,size, st);\n@@ -1222,1 +1220,1 @@\n-    size = impl_x_helper(cbuf,do_size,true ,0,dst_first, dst_second, size, st);\n+    size = impl_x_helper(masm,do_size,true ,0,dst_first, dst_second, size, st);\n@@ -1224,5 +1222,5 @@\n-    if( cbuf ) {\n-      emit_opcode(*cbuf,0x8D);  \/\/ LEA  ESP,[ESP+8]\n-      emit_rm(*cbuf, 0x1, ESP_enc, 0x04);\n-      emit_rm(*cbuf, 0x0, 0x04, ESP_enc);\n-      emit_d8(*cbuf,0x08);\n+    if( masm ) {\n+      emit_opcode(*masm,0x8D);  \/\/ LEA  ESP,[ESP+8]\n+      emit_rm(*masm, 0x1, ESP_enc, 0x04);\n+      emit_rm(*masm, 0x0, 0x04, ESP_enc);\n+      emit_d8(*masm,0x08);\n@@ -1243,1 +1241,0 @@\n-    MacroAssembler _masm(cbuf);\n@@ -1245,1 +1242,1 @@\n-    __ kmov(as_KRegister(Matcher::_regEncode[dst_first]), Address(rsp, offset));\n+    masm->kmov(as_KRegister(Matcher::_regEncode[dst_first]), Address(rsp, offset));\n@@ -1252,1 +1249,0 @@\n-    MacroAssembler _masm(cbuf);\n@@ -1254,1 +1250,1 @@\n-    __ kmov(Address(rsp, offset), as_KRegister(Matcher::_regEncode[src_first]));\n+    masm->kmov(Address(rsp, offset), as_KRegister(Matcher::_regEncode[src_first]));\n@@ -1271,2 +1267,1 @@\n-    MacroAssembler _masm(cbuf);\n-    __ kmov(as_KRegister(Matcher::_regEncode[dst_first]), as_KRegister(Matcher::_regEncode[src_first]));\n+    masm->kmov(as_KRegister(Matcher::_regEncode[dst_first]), as_KRegister(Matcher::_regEncode[src_first]));\n@@ -1286,1 +1281,1 @@\n-    return impl_mov_helper(cbuf,do_size,src_second,dst_second,size, st);\n+    return impl_mov_helper(masm,do_size,src_second,dst_second,size, st);\n@@ -1290,1 +1285,1 @@\n-    return impl_helper(cbuf,do_size,false,ra_->reg2offset(dst_second),src_second,0x89,\"MOV \",size, st);\n+    return impl_helper(masm,do_size,false,ra_->reg2offset(dst_second),src_second,0x89,\"MOV \",size, st);\n@@ -1294,1 +1289,1 @@\n-    return impl_helper(cbuf,do_size,true ,ra_->reg2offset(src_second),dst_second,0x8B,\"MOV \",size, st);\n+    return impl_helper(masm,do_size,true ,ra_->reg2offset(src_second),dst_second,0x8B,\"MOV \",size, st);\n@@ -1306,2 +1301,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation( &cbuf, ra_, false, NULL );\n+void MachSpillCopyNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n+  implementation( &masm, ra_, false, NULL );\n@@ -1324,1 +1319,1 @@\n-void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void BoxLockNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -1328,4 +1323,4 @@\n-    emit_opcode(cbuf, 0x8D);      \/\/ LEA  reg,[SP+offset]\n-    emit_rm(cbuf, 0x2, reg, 0x04);\n-    emit_rm(cbuf, 0x0, 0x04, ESP_enc);\n-    emit_d32(cbuf, offset);\n+    emit_opcode(masm, 0x8D);      \/\/ LEA  reg,[SP+offset]\n+    emit_rm(masm, 0x2, reg, 0x04);\n+    emit_rm(masm, 0x0, 0x04, ESP_enc);\n+    emit_d32(masm, offset);\n@@ -1334,4 +1329,4 @@\n-    emit_opcode(cbuf, 0x8D);      \/\/ LEA  reg,[SP+offset]\n-    emit_rm(cbuf, 0x1, reg, 0x04);\n-    emit_rm(cbuf, 0x0, 0x04, ESP_enc);\n-    emit_d8(cbuf, offset);\n+    emit_opcode(masm, 0x8D);      \/\/ LEA  reg,[SP+offset]\n+    emit_rm(masm, 0x1, reg, 0x04);\n+    emit_rm(masm, 0x0, 0x04, ESP_enc);\n+    emit_d8(masm, offset);\n@@ -1363,2 +1358,1 @@\n-void MachUEPNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  MacroAssembler masm(&cbuf);\n+void MachUEPNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -1366,1 +1360,1 @@\n-  uint insts_size = cbuf.insts_size();\n+  uint insts_size = masm.offset();\n@@ -1378,1 +1372,1 @@\n-  assert(cbuf.insts_size() - insts_size == size(ra_), \"checking code size of inline cache node\");\n+  assert(masm.offset() - insts_size == size(ra_), \"checking code size of inline cache node\");\n@@ -1522,0 +1516,12 @@\n+  \/\/ Set instruction mark in MacroAssembler. This is used only in\n+  \/\/ instructions that emit bytes directly to the CodeBuffer wraped\n+  \/\/ in the MacroAssembler. Should go away once all \"instruct\" are\n+  \/\/ patched to emit bytes only using methods in MacroAssembler.\n+  enc_class SetInstMark %{\n+    __ set_inst_mark();\n+  %}\n+\n+  enc_class ClearInstMark %{\n+    __ clear_inst_mark();\n+  %}\n+\n@@ -1524,1 +1530,1 @@\n-    emit_opcode(cbuf, $primary);\n+    emit_opcode(masm, $primary);\n@@ -1529,1 +1535,1 @@\n-    emit_opcode(cbuf, $secondary);\n+    emit_opcode(masm, $secondary);\n@@ -1534,1 +1540,1 @@\n-    emit_opcode(cbuf, $d8$$constant);\n+    emit_opcode(masm, $d8$$constant);\n@@ -1538,1 +1544,1 @@\n-    emit_opcode(cbuf,0x66);\n+    emit_opcode(masm,0x66);\n@@ -1542,1 +1548,1 @@\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -1546,2 +1552,2 @@\n-    emit_opcode(cbuf,$opcode$$constant);\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_opcode(masm,$opcode$$constant);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -1551,2 +1557,2 @@\n-    emit_opcode( cbuf, 0xB8 + $dst$$reg ); \/\/ 0xB8+ rd   -- MOV r32  ,imm32\n-    emit_d32   ( cbuf, 0x0  );             \/\/                         imm32==0x0\n+    emit_opcode( masm, 0xB8 + $dst$$reg ); \/\/ 0xB8+ rd   -- MOV r32  ,imm32\n+    emit_d32   ( masm, 0x0  );             \/\/                         imm32==0x0\n@@ -1579,11 +1585,11 @@\n-    emit_opcode(cbuf,0x81); emit_d8(cbuf,0xF8);\n-    emit_opcode(cbuf,0x00); emit_d8(cbuf,0x00);\n-    emit_opcode(cbuf,0x00); emit_d8(cbuf,0x80);                     \/\/ cmp rax,80000000h\n-    emit_opcode(cbuf,0x0F); emit_d8(cbuf,0x85);\n-    emit_opcode(cbuf,0x0B); emit_d8(cbuf,0x00);\n-    emit_opcode(cbuf,0x00); emit_d8(cbuf,0x00);                     \/\/ jne normal_case\n-    emit_opcode(cbuf,0x33); emit_d8(cbuf,0xD2);                     \/\/ xor rdx,edx\n-    emit_opcode(cbuf,0x83); emit_d8(cbuf,0xF9); emit_d8(cbuf,0xFF); \/\/ cmp rcx,0FFh\n-    emit_opcode(cbuf,0x0F); emit_d8(cbuf,0x84);\n-    emit_opcode(cbuf,0x03); emit_d8(cbuf,0x00);\n-    emit_opcode(cbuf,0x00); emit_d8(cbuf,0x00);                     \/\/ je done\n+    emit_opcode(masm,0x81); emit_d8(masm,0xF8);\n+    emit_opcode(masm,0x00); emit_d8(masm,0x00);\n+    emit_opcode(masm,0x00); emit_d8(masm,0x80);                     \/\/ cmp rax,80000000h\n+    emit_opcode(masm,0x0F); emit_d8(masm,0x85);\n+    emit_opcode(masm,0x0B); emit_d8(masm,0x00);\n+    emit_opcode(masm,0x00); emit_d8(masm,0x00);                     \/\/ jne normal_case\n+    emit_opcode(masm,0x33); emit_d8(masm,0xD2);                     \/\/ xor rdx,edx\n+    emit_opcode(masm,0x83); emit_d8(masm,0xF9); emit_d8(masm,0xFF); \/\/ cmp rcx,0FFh\n+    emit_opcode(masm,0x0F); emit_d8(masm,0x84);\n+    emit_opcode(masm,0x03); emit_d8(masm,0x00);\n+    emit_opcode(masm,0x00); emit_d8(masm,0x00);                     \/\/ je done\n@@ -1591,1 +1597,1 @@\n-    emit_opcode(cbuf,0x99);                                         \/\/ cdq\n+    emit_opcode(masm,0x99);                                         \/\/ cdq\n@@ -1598,1 +1604,1 @@\n-    emit_opcode(cbuf, $opcode$$constant + $reg$$reg);\n+    emit_opcode(masm, $opcode$$constant + $reg$$reg);\n@@ -1606,1 +1612,1 @@\n-      emit_opcode(cbuf, $primary | 0x02);\n+      emit_opcode(masm, $primary | 0x02);\n@@ -1609,1 +1615,1 @@\n-      emit_opcode(cbuf, $primary);\n+      emit_opcode(masm, $primary);\n@@ -1617,1 +1623,1 @@\n-      emit_opcode(cbuf, $primary | 0x02);    }\n+      emit_opcode(masm, $primary | 0x02);    }\n@@ -1619,1 +1625,1 @@\n-      emit_opcode(cbuf, $primary);\n+      emit_opcode(masm, $primary);\n@@ -1622,1 +1628,1 @@\n-    emit_rm(cbuf, 0x3, $secondary, $dst$$reg);\n+    emit_rm(masm, 0x3, $secondary, $dst$$reg);\n@@ -1640,1 +1646,1 @@\n-    emit_opcode(cbuf, ((con >= -128) && (con <= 127)) ? ($primary | 0x02) : $primary);\n+    emit_opcode(masm, ((con >= -128) && (con <= 127)) ? ($primary | 0x02) : $primary);\n@@ -1642,3 +1648,3 @@\n-    emit_rm(cbuf, 0x3, $secondary, $dst$$reg);\n-    if ((con >= -128) && (con <= 127)) emit_d8 (cbuf,con);\n-    else                               emit_d32(cbuf,con);\n+    emit_rm(masm, 0x3, $secondary, $dst$$reg);\n+    if ((con >= -128) && (con <= 127)) emit_d8 (masm,con);\n+    else                               emit_d32(masm,con);\n@@ -1651,1 +1657,1 @@\n-    emit_opcode(cbuf, ((con >= -128) && (con <= 127)) ? ($primary | 0x02) : $primary);\n+    emit_opcode(masm, ((con >= -128) && (con <= 127)) ? ($primary | 0x02) : $primary);\n@@ -1653,3 +1659,3 @@\n-    emit_rm(cbuf, 0x3, $tertiary, HIGH_FROM_LOW($dst$$reg));\n-    if ((con >= -128) && (con <= 127)) emit_d8 (cbuf,con);\n-    else                               emit_d32(cbuf,con);\n+    emit_rm(masm, 0x3, $tertiary, HIGH_FROM_LOW($dst$$reg));\n+    if ((con >= -128) && (con <= 127)) emit_d8 (masm,con);\n+    else                               emit_d32(masm,con);\n@@ -1659,1 +1665,1 @@\n-    emit_cc(cbuf, $secondary, $dst$$reg );\n+    emit_cc(masm, $secondary, $dst$$reg );\n@@ -1666,2 +1672,2 @@\n-    emit_opcode(cbuf, 0x0F);\n-    emit_cc(cbuf, 0xC8, destlo);\n+    emit_opcode(masm, 0x0F);\n+    emit_cc(masm, 0xC8, destlo);\n@@ -1669,2 +1675,2 @@\n-    emit_opcode(cbuf, 0x0F);\n-    emit_cc(cbuf, 0xC8, desthi);\n+    emit_opcode(masm, 0x0F);\n+    emit_cc(masm, 0xC8, desthi);\n@@ -1672,2 +1678,2 @@\n-    emit_opcode(cbuf, 0x87);\n-    emit_rm(cbuf, 0x3, destlo, desthi);\n+    emit_opcode(masm, 0x87);\n+    emit_rm(masm, 0x3, destlo, desthi);\n@@ -1677,1 +1683,1 @@\n-    emit_rm(cbuf, 0x3, $secondary, $div$$reg );\n+    emit_rm(masm, 0x3, $secondary, $div$$reg );\n@@ -1682,1 +1688,1 @@\n-    emit_cc(cbuf, $secondary, $cop$$cmpcode);\n+    emit_cc(masm, $secondary, $cop$$cmpcode);\n@@ -1687,2 +1693,2 @@\n-    emit_d8(cbuf, op >> 8 );\n-    emit_d8(cbuf, op & 255);\n+    emit_d8(masm, op >> 8 );\n+    emit_d8(masm, op & 255);\n@@ -1694,2 +1700,2 @@\n-    emit_cc( cbuf, 0x70, ($cop$$cmpcode^1) );\n-    emit_d8( cbuf, $brOffs$$constant );\n+    emit_cc( masm, 0x70, ($cop$$cmpcode^1) );\n+    emit_d8( masm, $brOffs$$constant );\n@@ -1705,1 +1711,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -1716,1 +1721,0 @@\n-    MacroAssembler masm(&cbuf);\n@@ -1736,1 +1740,0 @@\n-      MacroAssembler masm(&cbuf);\n@@ -1743,2 +1746,1 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n+    __ set_inst_mark();\n@@ -1747,1 +1749,1 @@\n-    emit_d32_reloc(cbuf, ($meth$$method - (int)(cbuf.insts_end()) - 4),\n+    emit_d32_reloc(masm, ($meth$$method - (int)(masm.pc()) - 4),\n@@ -1749,0 +1751,1 @@\n+    __ clear_inst_mark();\n@@ -1752,1 +1755,0 @@\n-      MacroAssembler _masm(&cbuf);\n@@ -1777,1 +1779,1 @@\n-    debug_only(int off0 = cbuf.insts_size());\n+    debug_only(int off0 = masm.offset());\n@@ -1779,1 +1781,0 @@\n-      MacroAssembler _masm(&cbuf);\n@@ -1784,1 +1785,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -1786,1 +1786,1 @@\n-    debug_only(int off1 = cbuf.insts_size());\n+    debug_only(int off1 = masm.offset());\n@@ -1793,1 +1793,0 @@\n-      MacroAssembler masm(&cbuf);\n@@ -1801,2 +1800,1 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n+    __ set_inst_mark();\n@@ -1806,1 +1804,1 @@\n-      emit_d32_reloc(cbuf, ($meth$$method - (int)(cbuf.insts_end()) - 4),\n+      emit_d32_reloc(masm, ($meth$$method - (int)(masm.pc()) - 4),\n@@ -1809,0 +1807,1 @@\n+      __ clear_inst_mark();\n@@ -1811,1 +1810,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -1814,1 +1813,1 @@\n-      emit_d32_reloc(cbuf, ($meth$$method - (int)(cbuf.insts_end()) - 4),\n+      emit_d32_reloc(masm, ($meth$$method - (int)(masm.pc()) - 4),\n@@ -1818,1 +1817,2 @@\n-      address stub = CompiledStaticCall::emit_to_interp_stub(cbuf);\n+      address stub = CompiledStaticCall::emit_to_interp_stub(masm);\n+      masm.clear_inst_mark();\n@@ -1827,2 +1827,1 @@\n-    MacroAssembler _masm(&cbuf);\n-    __ ic_call((address)$meth$$method, resolved_method_index(cbuf));\n+    __ ic_call((address)$meth$$method, resolved_method_index(masm));\n@@ -1837,2 +1836,1 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n+    __ set_inst_mark();\n@@ -1840,2 +1838,3 @@\n-    emit_rm(cbuf, 0x01, $secondary, EAX_enc );  \/\/ R\/M byte\n-    emit_d8(cbuf, disp);             \/\/ Displacement\n+    emit_rm(masm, 0x01, $secondary, EAX_enc );  \/\/ R\/M byte\n+    emit_d8(masm, disp);             \/\/ Displacement\n+    __ clear_inst_mark();\n@@ -1857,2 +1856,2 @@\n-\/\/     \/\/ emit_opcode(cbuf, 0x8B);                     \/\/ MOV    imo_reg,ic_reg  # method_ptr\n-\/\/     \/\/ emit_rm(cbuf, 0x03, imo_encode, ic_encode ); \/\/ R\/M byte\n+\/\/     \/\/ emit_opcode(masm, 0x8B);                     \/\/ MOV    imo_reg,ic_reg  # method_ptr\n+\/\/     \/\/ emit_rm(masm, 0x03, imo_encode, ic_encode ); \/\/ R\/M byte\n@@ -1861,2 +1860,2 @@\n-\/\/     emit_opcode(cbuf, 0x33);\n-\/\/     emit_rm(cbuf, 0x3, EBP_enc, EBP_enc);\n+\/\/     emit_opcode(masm, 0x33);\n+\/\/     emit_rm(masm, 0x3, EBP_enc, EBP_enc);\n@@ -1865,1 +1864,1 @@\n-\/\/     cbuf.set_insts_mark();\n+\/\/     masm.set_inst_mark();\n@@ -1867,1 +1866,1 @@\n-\/\/     emit_d32_reloc(cbuf, ($labl$$label - (int)(cbuf.insts_end()) - 4),\n+\/\/     emit_d32_reloc(masm, ($labl$$label - (int)(masm.pc()) - 4),\n@@ -1873,1 +1872,1 @@\n-    emit_rm(cbuf, 0x3, $secondary, $dst$$reg);\n+    emit_rm(masm, 0x3, $secondary, $dst$$reg);\n@@ -1880,1 +1879,1 @@\n-    emit_opcode(cbuf, 0xB8 + $dst$$reg);\n+    emit_opcode(masm, 0xB8 + $dst$$reg);\n@@ -1887,1 +1886,1 @@\n-    emit_opcode(cbuf, $primary + $dst$$reg);\n+    emit_opcode(masm, $primary + $dst$$reg);\n@@ -1898,2 +1897,2 @@\n-      emit_opcode(cbuf, 0x33);\n-      emit_rm(cbuf, 0x3, dst_enc, dst_enc);\n+      emit_opcode(masm, 0x33);\n+      emit_rm(masm, 0x3, dst_enc, dst_enc);\n@@ -1901,2 +1900,2 @@\n-      emit_opcode(cbuf, $primary + dst_enc);\n-      emit_d32(cbuf, src_con);\n+      emit_opcode(masm, $primary + dst_enc);\n+      emit_d32(masm, src_con);\n@@ -1913,2 +1912,2 @@\n-      emit_opcode(cbuf, 0x33);\n-      emit_rm(cbuf, 0x3, dst_enc, dst_enc);\n+      emit_opcode(masm, 0x33);\n+      emit_rm(masm, 0x3, dst_enc, dst_enc);\n@@ -1916,2 +1915,2 @@\n-      emit_opcode(cbuf, $primary + dst_enc);\n-      emit_d32(cbuf, src_con);\n+      emit_opcode(masm, $primary + dst_enc);\n+      emit_d32(masm, src_con);\n@@ -1924,1 +1923,1 @@\n-    encode_Copy( cbuf, $dst$$reg, $src$$reg );\n+    encode_Copy( masm, $dst$$reg, $src$$reg );\n@@ -1928,1 +1927,1 @@\n-    encode_Copy( cbuf, $dst$$reg, $src$$reg );\n+    encode_Copy( masm, $dst$$reg, $src$$reg );\n@@ -1932,1 +1931,1 @@\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -1937,1 +1936,1 @@\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -1942,1 +1941,1 @@\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW($dst$$reg), HIGH_FROM_LOW($src$$reg));\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW($dst$$reg), HIGH_FROM_LOW($src$$reg));\n@@ -1946,1 +1945,1 @@\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -1950,1 +1949,1 @@\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW($dst$$reg), HIGH_FROM_LOW($src$$reg));\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW($dst$$reg), HIGH_FROM_LOW($src$$reg));\n@@ -1954,1 +1953,1 @@\n-    emit_rm(cbuf, 0x3, $dst$$reg, HIGH_FROM_LOW($src$$reg));\n+    emit_rm(masm, 0x3, $dst$$reg, HIGH_FROM_LOW($src$$reg));\n@@ -1966,1 +1965,1 @@\n-    emit_d32(cbuf, jf_as_bits);\n+    emit_d32(masm, jf_as_bits);\n@@ -1973,1 +1972,1 @@\n-    emit_d32(cbuf, jf_as_bits);\n+    emit_d32(masm, jf_as_bits);\n@@ -1982,1 +1981,1 @@\n-    emit_d32(cbuf,$src$$constant);\n+    emit_d32(masm,$src$$constant);\n@@ -1987,2 +1986,2 @@\n-    emit_rm(cbuf, 0x00, $t1$$reg, 0x05 );\n-    emit_d32(cbuf, 0x00);\n+    emit_rm(masm, 0x00, $t1$$reg, 0x05 );\n+    emit_d32(masm, 0x00);\n@@ -1992,1 +1991,1 @@\n-    emit_opcode(cbuf,0xF0);         \/\/ [Lock]\n+    emit_opcode(masm,0xF0);         \/\/ [Lock]\n@@ -2003,2 +2002,2 @@\n-    emit_opcode(cbuf,0x87);\n-    emit_opcode(cbuf,0xD9);\n+    emit_opcode(masm,0x87);\n+    emit_opcode(masm,0xD9);\n@@ -2006,1 +2005,1 @@\n-    emit_opcode(cbuf,0xF0);\n+    emit_opcode(masm,0xF0);\n@@ -2008,3 +2007,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xC7);\n-    emit_rm( cbuf, 0x0, 1, $mem_ptr$$reg );\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xC7);\n+    emit_rm( masm, 0x0, 1, $mem_ptr$$reg );\n@@ -2012,2 +2011,2 @@\n-    emit_opcode(cbuf,0x87);\n-    emit_opcode(cbuf,0xD9);\n+    emit_opcode(masm,0x87);\n+    emit_opcode(masm,0xD9);\n@@ -2018,1 +2017,1 @@\n-    emit_opcode(cbuf,0xF0);\n+    emit_opcode(masm,0xF0);\n@@ -2021,3 +2020,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xB1);\n-    emit_rm( cbuf, 0x0, 1, $mem_ptr$$reg );\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xB1);\n+    emit_rm( masm, 0x0, 1, $mem_ptr$$reg );\n@@ -2028,1 +2027,1 @@\n-    emit_opcode(cbuf,0xF0);\n+    emit_opcode(masm,0xF0);\n@@ -2031,3 +2030,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xB0);\n-    emit_rm( cbuf, 0x0, 1, $mem_ptr$$reg );\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xB0);\n+    emit_rm( masm, 0x0, 1, $mem_ptr$$reg );\n@@ -2038,1 +2037,1 @@\n-    emit_opcode(cbuf,0xF0);\n+    emit_opcode(masm,0xF0);\n@@ -2041,1 +2040,1 @@\n-    emit_opcode(cbuf, 0x66);\n+    emit_opcode(masm, 0x66);\n@@ -2044,3 +2043,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xB1);\n-    emit_rm( cbuf, 0x0, 1, $mem_ptr$$reg );\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xB1);\n+    emit_rm( masm, 0x0, 1, $mem_ptr$$reg );\n@@ -2053,2 +2052,2 @@\n-    emit_opcode( cbuf, 0xB8 + res_encoding);\n-    emit_d32( cbuf, 0 );\n+    emit_opcode( masm, 0xB8 + res_encoding);\n+    emit_d32( masm, 0 );\n@@ -2056,2 +2055,2 @@\n-    emit_opcode(cbuf,0x75);\n-    emit_d8(cbuf, 5 );\n+    emit_opcode(masm,0x75);\n+    emit_d8(masm, 5 );\n@@ -2059,2 +2058,2 @@\n-    emit_opcode( cbuf, 0xB8 + res_encoding);\n-    emit_d32( cbuf, 1 );\n+    emit_opcode( masm, 0xB8 + res_encoding);\n+    emit_d32( masm, 1 );\n@@ -2064,4 +2063,0 @@\n-  enc_class set_instruction_start( ) %{\n-    cbuf.set_insts_mark();            \/\/ Mark start of opcode for reloc info in mem operand\n-  %}\n-\n@@ -2075,1 +2070,1 @@\n-    encode_RegMem(cbuf, reg_encoding, base, index, scale, displace, disp_reloc);\n+    encode_RegMem(masm, reg_encoding, base, index, scale, displace, disp_reloc);\n@@ -2085,1 +2080,1 @@\n-    encode_RegMem(cbuf, reg_encoding, base, index, scale, displace, relocInfo::none);\n+    encode_RegMem(masm, reg_encoding, base, index, scale, displace, relocInfo::none);\n@@ -2092,7 +2087,7 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,$tertiary);\n-    emit_rm(cbuf, 0x3, r1, r2);\n-    emit_d8(cbuf,$cnt$$constant);\n-    emit_d8(cbuf,$primary);\n-    emit_rm(cbuf, 0x3, $secondary, r1);\n-    emit_d8(cbuf,$cnt$$constant);\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,$tertiary);\n+    emit_rm(masm, 0x3, r1, r2);\n+    emit_d8(masm,$cnt$$constant);\n+    emit_d8(masm,$primary);\n+    emit_rm(masm, 0x3, $secondary, r1);\n+    emit_d8(masm,$cnt$$constant);\n@@ -2102,2 +2097,2 @@\n-    emit_opcode( cbuf, 0x8B ); \/\/ Move\n-    emit_rm(cbuf, 0x3, $dst$$reg, HIGH_FROM_LOW($dst$$reg));\n+    emit_opcode( masm, 0x8B ); \/\/ Move\n+    emit_rm(masm, 0x3, $dst$$reg, HIGH_FROM_LOW($dst$$reg));\n@@ -2105,3 +2100,3 @@\n-      emit_d8(cbuf,$primary);\n-      emit_rm(cbuf, 0x3, $secondary, $dst$$reg);\n-      emit_d8(cbuf,$cnt$$constant-32);\n+      emit_d8(masm,$primary);\n+      emit_rm(masm, 0x3, $secondary, $dst$$reg);\n+      emit_d8(masm,$cnt$$constant-32);\n@@ -2109,3 +2104,3 @@\n-    emit_d8(cbuf,$primary);\n-    emit_rm(cbuf, 0x3, $secondary, HIGH_FROM_LOW($dst$$reg));\n-    emit_d8(cbuf,31);\n+    emit_d8(masm,$primary);\n+    emit_rm(masm, 0x3, $secondary, HIGH_FROM_LOW($dst$$reg));\n+    emit_d8(masm,31);\n@@ -2119,2 +2114,2 @@\n-    emit_opcode( cbuf, 0x8B ); \/\/ Move r1,r2\n-    emit_rm(cbuf, 0x3, r1, r2);\n+    emit_opcode( masm, 0x8B ); \/\/ Move r1,r2\n+    emit_rm(masm, 0x3, r1, r2);\n@@ -2122,3 +2117,3 @@\n-      emit_opcode(cbuf,$primary);\n-      emit_rm(cbuf, 0x3, $secondary, r1);\n-      emit_d8(cbuf,$cnt$$constant-32);\n+      emit_opcode(masm,$primary);\n+      emit_rm(masm, 0x3, $secondary, r1);\n+      emit_d8(masm,$cnt$$constant-32);\n@@ -2126,2 +2121,2 @@\n-    emit_opcode(cbuf,0x33);  \/\/ XOR r2,r2\n-    emit_rm(cbuf, 0x3, r2, r2);\n+    emit_opcode(masm,0x33);  \/\/ XOR r2,r2\n+    emit_rm(masm, 0x3, r2, r2);\n@@ -2133,1 +2128,1 @@\n-    emit_opcode(cbuf,$opcode$$constant);\n+    emit_opcode(masm,$opcode$$constant);\n@@ -2140,1 +2135,1 @@\n-    encode_RegMem(cbuf, reg_encoding, base, index, scale, displace, disp_reloc);\n+    encode_RegMem(masm, reg_encoding, base, index, scale, displace, disp_reloc);\n@@ -2155,1 +2150,1 @@\n-    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace, relocInfo::none);\n+    encode_RegMem(masm, rm_byte_opcode, base, index, scale, displace, relocInfo::none);\n@@ -2165,1 +2160,1 @@\n-    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace, disp_reloc);\n+    encode_RegMem(masm, rm_byte_opcode, base, index, scale, displace, disp_reloc);\n@@ -2175,1 +2170,1 @@\n-    encode_RegMem(cbuf, reg_encoding, base, index, scale, displace, disp_reloc);\n+    encode_RegMem(masm, reg_encoding, base, index, scale, displace, disp_reloc);\n@@ -2180,2 +2175,2 @@\n-    emit_opcode(cbuf,0x3B);\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_opcode(masm,0x3B);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -2183,2 +2178,2 @@\n-    emit_opcode(cbuf,0x7C);\n-    emit_d8(cbuf,2);\n+    emit_opcode(masm,0x7C);\n+    emit_d8(masm,2);\n@@ -2186,2 +2181,2 @@\n-    emit_opcode(cbuf,0x8B);\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_opcode(masm,0x8B);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -2192,2 +2187,2 @@\n-    emit_opcode(cbuf,0x3B);\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_opcode(masm,0x3B);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -2195,2 +2190,2 @@\n-    emit_opcode(cbuf,0x7F);\n-    emit_d8(cbuf,2);\n+    emit_opcode(masm,0x7F);\n+    emit_d8(masm,2);\n@@ -2198,2 +2193,2 @@\n-    emit_opcode(cbuf,0x8B);\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_opcode(masm,0x8B);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -2213,2 +2208,2 @@\n-      emit_opcode( cbuf, 0xD9 ); \/\/ FLD (i.e., push it)\n-      emit_d8( cbuf, 0xC0-1+$src$$reg );\n+      emit_opcode( masm, 0xD9 ); \/\/ FLD (i.e., push it)\n+      emit_d8( masm, 0xC0-1+$src$$reg );\n@@ -2216,3 +2211,4 @@\n-    cbuf.set_insts_mark();       \/\/ Mark start of opcode for reloc info in mem operand\n-    emit_opcode(cbuf,$primary);\n-    encode_RegMem(cbuf, reg_encoding, base, index, scale, displace, disp_reloc);\n+    masm.set_inst_mark();       \/\/ Mark start of opcode for reloc info in mem operand\n+    emit_opcode(masm,$primary);\n+    encode_RegMem(masm, reg_encoding, base, index, scale, displace, disp_reloc);\n+    masm.clear_inst_mark();\n@@ -2223,2 +2219,2 @@\n-    emit_opcode(cbuf,0xF7);\n-    emit_rm(cbuf, 0x3, 0x03, $dst$$reg );\n+    emit_opcode(masm,0xF7);\n+    emit_rm(masm, 0x3, 0x03, $dst$$reg );\n@@ -2229,3 +2225,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0x9C);\n-    emit_rm( cbuf, 0x3, 0x4, $dst$$reg );\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0x9C);\n+    emit_rm( masm, 0x3, 0x4, $dst$$reg );\n@@ -2238,2 +2234,2 @@\n-    emit_opcode(cbuf,0x2B);\n-    emit_rm(cbuf, 0x3, $p$$reg, $q$$reg);\n+    emit_opcode(masm,0x2B);\n+    emit_rm(masm, 0x3, $p$$reg, $q$$reg);\n@@ -2241,2 +2237,2 @@\n-    emit_opcode(cbuf,0x1B);\n-    emit_rm(cbuf, 0x3, tmpReg, tmpReg);\n+    emit_opcode(masm,0x1B);\n+    emit_rm(masm, 0x3, tmpReg, tmpReg);\n@@ -2244,2 +2240,2 @@\n-    emit_opcode(cbuf,0x23);\n-    emit_rm(cbuf, 0x3, tmpReg, $y$$reg);\n+    emit_opcode(masm,0x23);\n+    emit_rm(masm, 0x3, tmpReg, $y$$reg);\n@@ -2247,2 +2243,2 @@\n-    emit_opcode(cbuf,0x03);\n-    emit_rm(cbuf, 0x3, $p$$reg, tmpReg);\n+    emit_opcode(masm,0x03);\n+    emit_rm(masm, 0x3, $p$$reg, tmpReg);\n@@ -2253,3 +2249,3 @@\n-    emit_opcode(cbuf,0xF7);\n-    emit_rm(cbuf, 0x3, 0, ECX_enc);\n-    emit_d32(cbuf,0x20);\n+    emit_opcode(masm,0xF7);\n+    emit_rm(masm, 0x3, 0, ECX_enc);\n+    emit_d32(masm,0x20);\n@@ -2257,2 +2253,2 @@\n-    emit_opcode(cbuf, 0x74);\n-    emit_d8(cbuf, 0x04);\n+    emit_opcode(masm, 0x74);\n+    emit_d8(masm, 0x04);\n@@ -2260,2 +2256,2 @@\n-    emit_opcode( cbuf, 0x8B );\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW($dst$$reg), $dst$$reg );\n+    emit_opcode( masm, 0x8B );\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW($dst$$reg), $dst$$reg );\n@@ -2263,2 +2259,2 @@\n-    emit_opcode(cbuf, 0x33);\n-    emit_rm(cbuf, 0x3, $dst$$reg, $dst$$reg);\n+    emit_opcode(masm, 0x33);\n+    emit_rm(masm, 0x3, $dst$$reg, $dst$$reg);\n@@ -2267,3 +2263,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xA5);\n-    emit_rm(cbuf, 0x3, $dst$$reg, HIGH_FROM_LOW($dst$$reg));\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xA5);\n+    emit_rm(masm, 0x3, $dst$$reg, HIGH_FROM_LOW($dst$$reg));\n@@ -2271,2 +2267,2 @@\n-    emit_opcode(cbuf,0xD3);\n-    emit_rm(cbuf, 0x3, 0x4, $dst$$reg );\n+    emit_opcode(masm,0xD3);\n+    emit_rm(masm, 0x3, 0x4, $dst$$reg );\n@@ -2277,3 +2273,3 @@\n-    emit_opcode(cbuf,0xF7);\n-    emit_rm(cbuf, 0x3, 0, ECX_enc);\n-    emit_d32(cbuf,0x20);\n+    emit_opcode(masm,0xF7);\n+    emit_rm(masm, 0x3, 0, ECX_enc);\n+    emit_d32(masm,0x20);\n@@ -2281,2 +2277,2 @@\n-    emit_opcode(cbuf, 0x74);\n-    emit_d8(cbuf, 0x04);\n+    emit_opcode(masm, 0x74);\n+    emit_d8(masm, 0x04);\n@@ -2284,2 +2280,2 @@\n-    emit_opcode( cbuf, 0x8B );\n-    emit_rm(cbuf, 0x3, $dst$$reg, HIGH_FROM_LOW($dst$$reg) );\n+    emit_opcode( masm, 0x8B );\n+    emit_rm(masm, 0x3, $dst$$reg, HIGH_FROM_LOW($dst$$reg) );\n@@ -2287,2 +2283,2 @@\n-    emit_opcode(cbuf, 0x33);\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW($dst$$reg), HIGH_FROM_LOW($dst$$reg));\n+    emit_opcode(masm, 0x33);\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW($dst$$reg), HIGH_FROM_LOW($dst$$reg));\n@@ -2291,3 +2287,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xAD);\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW($dst$$reg), $dst$$reg);\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xAD);\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW($dst$$reg), $dst$$reg);\n@@ -2295,2 +2291,2 @@\n-    emit_opcode(cbuf,0xD3);\n-    emit_rm(cbuf, 0x3, 0x5, HIGH_FROM_LOW($dst$$reg) );\n+    emit_opcode(masm,0xD3);\n+    emit_rm(masm, 0x3, 0x5, HIGH_FROM_LOW($dst$$reg) );\n@@ -2301,3 +2297,3 @@\n-    emit_opcode(cbuf,0xF7);\n-    emit_rm(cbuf, 0x3, 0, ECX_enc);\n-    emit_d32(cbuf,0x20);\n+    emit_opcode(masm,0xF7);\n+    emit_rm(masm, 0x3, 0, ECX_enc);\n+    emit_d32(masm,0x20);\n@@ -2305,2 +2301,2 @@\n-    emit_opcode(cbuf, 0x74);\n-    emit_d8(cbuf, 0x05);\n+    emit_opcode(masm, 0x74);\n+    emit_d8(masm, 0x05);\n@@ -2308,2 +2304,2 @@\n-    emit_opcode( cbuf, 0x8B );\n-    emit_rm(cbuf, 0x3, $dst$$reg, HIGH_FROM_LOW($dst$$reg) );\n+    emit_opcode( masm, 0x8B );\n+    emit_rm(masm, 0x3, $dst$$reg, HIGH_FROM_LOW($dst$$reg) );\n@@ -2311,3 +2307,3 @@\n-    emit_opcode(cbuf, 0xC1);\n-    emit_rm(cbuf, 0x3, 7, HIGH_FROM_LOW($dst$$reg) );\n-    emit_d8(cbuf, 0x1F );\n+    emit_opcode(masm, 0xC1);\n+    emit_rm(masm, 0x3, 7, HIGH_FROM_LOW($dst$$reg) );\n+    emit_d8(masm, 0x1F );\n@@ -2316,3 +2312,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xAD);\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW($dst$$reg), $dst$$reg);\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xAD);\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW($dst$$reg), $dst$$reg);\n@@ -2320,2 +2316,2 @@\n-    emit_opcode(cbuf,0xD3);\n-    emit_rm(cbuf, 0x3, 0x7, HIGH_FROM_LOW($dst$$reg) );\n+    emit_opcode(masm,0xD3);\n+    emit_rm(masm, 0x3, 0x7, HIGH_FROM_LOW($dst$$reg) );\n@@ -2329,1 +2325,1 @@\n-    emit_rm(cbuf, 0x3, $secondary, $src$$reg );\n+    emit_rm(masm, 0x3, $secondary, $src$$reg );\n@@ -2334,2 +2330,2 @@\n-    emit_opcode( cbuf, 0xDD );\n-    emit_d8( cbuf, 0xD8 );\n+    emit_opcode( masm, 0xDD );\n+    emit_d8( masm, 0xD8 );\n@@ -2340,2 +2336,2 @@\n-    emit_opcode( cbuf, 0xDD );           \/\/ FSTP   ST(i)\n-    emit_d8( cbuf, 0xD8+$dst$$reg );\n+    emit_opcode( masm, 0xDD );           \/\/ FSTP   ST(i)\n+    emit_d8( masm, 0xD8+$dst$$reg );\n@@ -2345,2 +2341,2 @@\n-    emit_opcode( cbuf, 0xD9 );\n-    emit_d8( cbuf, 0xC0-1+$dst$$reg );   \/\/ FLD ST(i-1)\n+    emit_opcode( masm, 0xD9 );\n+    emit_d8( masm, 0xC0-1+$dst$$reg );   \/\/ FLD ST(i-1)\n@@ -2350,5 +2346,5 @@\n-    emit_opcode( cbuf, 0xDB );           \/\/ FLD m80real\n-    emit_opcode( cbuf, 0x2D );\n-    emit_d32( cbuf, (int)StubRoutines::x86::addr_fpu_subnormal_bias1() );\n-    emit_opcode( cbuf, 0xDE );           \/\/ FMULP ST(dst), ST0\n-    emit_opcode( cbuf, 0xC8+$dst$$reg );\n+    emit_opcode( masm, 0xDB );           \/\/ FLD m80real\n+    emit_opcode( masm, 0x2D );\n+    emit_d32( masm, (int)StubRoutines::x86::addr_fpu_subnormal_bias1() );\n+    emit_opcode( masm, 0xDE );           \/\/ FMULP ST(dst), ST0\n+    emit_opcode( masm, 0xC8+$dst$$reg );\n@@ -2358,5 +2354,5 @@\n-    emit_opcode( cbuf, 0xDB );           \/\/ FLD m80real\n-    emit_opcode( cbuf, 0x2D );\n-    emit_d32( cbuf, (int)StubRoutines::x86::addr_fpu_subnormal_bias2() );\n-    emit_opcode( cbuf, 0xDE );           \/\/ FMULP ST(dst), ST0\n-    emit_opcode( cbuf, 0xC8+$dst$$reg );\n+    emit_opcode( masm, 0xDB );           \/\/ FLD m80real\n+    emit_opcode( masm, 0x2D );\n+    emit_d32( masm, (int)StubRoutines::x86::addr_fpu_subnormal_bias2() );\n+    emit_opcode( masm, 0xDE );           \/\/ FMULP ST(dst), ST0\n+    emit_opcode( masm, 0xC8+$dst$$reg );\n@@ -2367,1 +2363,1 @@\n-    store_to_stackslot( cbuf, $primary, $src$$reg, $dst$$disp );\n+    store_to_stackslot( masm, $primary, $src$$reg, $dst$$disp );\n@@ -2373,3 +2369,3 @@\n-    emit_rm( cbuf, 0x02, $src$$reg, ESP_enc );   \/\/ R\/M byte\n-    emit_rm( cbuf, 0x00, ESP_enc, ESP_enc);          \/\/ SIB byte\n-    emit_d32(cbuf, $dst$$disp);   \/\/ Displacement\n+    emit_rm( masm, 0x02, $src$$reg, ESP_enc );   \/\/ R\/M byte\n+    emit_rm( masm, 0x00, ESP_enc, ESP_enc);          \/\/ SIB byte\n+    emit_d32(masm, $dst$$disp);   \/\/ Displacement\n@@ -2380,1 +2376,1 @@\n-    store_to_stackslot( cbuf, $primary, $secondary, $src$$disp );\n+    store_to_stackslot( masm, $primary, $secondary, $src$$disp );\n@@ -2385,1 +2381,1 @@\n-    store_to_stackslot( cbuf, 0xD9, 0x03, $dst$$disp );\n+    store_to_stackslot( masm, 0xD9, 0x03, $dst$$disp );\n@@ -2391,1 +2387,1 @@\n-    store_to_stackslot( cbuf, 0xDD, 0x03, $dst$$disp );\n+    store_to_stackslot( masm, 0xDD, 0x03, $dst$$disp );\n@@ -2395,2 +2391,2 @@\n-    emit_opcode( cbuf, 0xDD );           \/\/ FSTP   ST(i)\n-    emit_d8( cbuf, 0xD8+$dst$$reg );\n+    emit_opcode( masm, 0xDD );           \/\/ FSTP   ST(i)\n+    emit_d8( masm, 0xD8+$dst$$reg );\n@@ -2400,2 +2396,2 @@\n-    emit_opcode( cbuf, 0xD9 );           \/\/ FLD    ST(i-1)\n-    emit_d8( cbuf, 0xC0-1+$dst$$reg );\n+    emit_opcode( masm, 0xD9 );           \/\/ FLD    ST(i-1)\n+    emit_d8( masm, 0xC0-1+$dst$$reg );\n@@ -2408,2 +2404,2 @@\n-      emit_opcode( cbuf, 0xD9 );         \/\/ FLD    ST(i-1)\n-      emit_d8( cbuf, 0xC0-1+$src$$reg );\n+      emit_opcode( masm, 0xD9 );         \/\/ FLD    ST(i-1)\n+      emit_d8( masm, 0xC0-1+$src$$reg );\n@@ -2412,1 +2408,1 @@\n-    store_to_stackslot( cbuf, 0xD9, pop, $dst$$disp ); \/\/ FST<P>_S  [ESP+dst]\n+    store_to_stackslot( masm, 0xD9, pop, $dst$$disp ); \/\/ FST<P>_S  [ESP+dst]\n@@ -2419,2 +2415,2 @@\n-      emit_opcode( cbuf, 0xD9 );         \/\/ FLD    ST(i-1)\n-      emit_d8( cbuf, 0xC0-1+$src$$reg );\n+      emit_opcode( masm, 0xD9 );         \/\/ FLD    ST(i-1)\n+      emit_d8( masm, 0xC0-1+$src$$reg );\n@@ -2423,1 +2419,1 @@\n-    store_to_stackslot( cbuf, 0xDD, pop, $dst$$disp ); \/\/ FST<P>_D  [ESP+dst]\n+    store_to_stackslot( masm, 0xDD, pop, $dst$$disp ); \/\/ FST<P>_D  [ESP+dst]\n@@ -2430,2 +2426,2 @@\n-      emit_opcode( cbuf, 0xD9 );         \/\/ FLD    ST(src-1)\n-      emit_d8( cbuf, 0xC0-1+$src$$reg );\n+      emit_opcode( masm, 0xD9 );         \/\/ FLD    ST(src-1)\n+      emit_d8( masm, 0xC0-1+$src$$reg );\n@@ -2434,2 +2430,2 @@\n-    emit_opcode( cbuf, 0xDD );\n-    emit_d8( cbuf, pop+$dst$$reg );      \/\/ FST<P> ST(i)\n+    emit_opcode( masm, 0xDD );\n+    emit_d8( masm, pop+$dst$$reg );      \/\/ FST<P> ST(i)\n@@ -2441,2 +2437,2 @@\n-    emit_opcode( cbuf, 0xD9 );\n-    emit_d8( cbuf, 0xC0-1+$dst$$reg );\n+    emit_opcode( masm, 0xD9 );\n+    emit_d8( masm, 0xC0-1+$dst$$reg );\n@@ -2445,2 +2441,2 @@\n-      emit_opcode (cbuf, 0xD9);\n-      emit_opcode (cbuf, 0xF7);\n+      emit_opcode (masm, 0xD9);\n+      emit_opcode (masm, 0xF7);\n@@ -2449,2 +2445,2 @@\n-      emit_opcode(cbuf, 0xD9);\n-      emit_d8(cbuf, 0xC8-1+$src$$reg );\n+      emit_opcode(masm, 0xD9);\n+      emit_d8(masm, 0xC8-1+$src$$reg );\n@@ -2452,2 +2448,2 @@\n-      emit_opcode (cbuf, 0xD9);\n-      emit_opcode (cbuf, 0xF6);\n+      emit_opcode (masm, 0xD9);\n+      emit_opcode (masm, 0xF6);\n@@ -2458,1 +2454,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2467,1 +2462,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2476,1 +2470,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2483,1 +2476,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2490,1 +2482,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2497,1 +2488,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2502,1 +2492,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2507,1 +2496,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2515,2 +2503,2 @@\n-      emit_opcode (cbuf, 0xD9);\n-      emit_opcode (cbuf, 0xF7);\n+      emit_opcode (masm, 0xD9);\n+      emit_opcode (masm, 0xF7);\n@@ -2518,2 +2506,2 @@\n-      emit_opcode(cbuf, 0xD9);\n-      emit_d8(cbuf, 0xC8-1+$src$$reg );\n+      emit_opcode(masm, 0xD9);\n+      emit_d8(masm, 0xC8-1+$src$$reg );\n@@ -2521,2 +2509,2 @@\n-      emit_opcode (cbuf, 0xD9);\n-      emit_opcode (cbuf, 0xF6);\n+      emit_opcode (masm, 0xD9);\n+      emit_opcode (masm, 0xF6);\n@@ -2526,2 +2514,2 @@\n-    \/\/ emit_opcode( cbuf, 0xDD );\n-    \/\/ emit_d8( cbuf, 0xD8+$dst$$reg );\n+    \/\/ emit_opcode( masm, 0xDD );\n+    \/\/ emit_d8( masm, 0xD8+$dst$$reg );\n@@ -2532,2 +2520,2 @@\n-    emit_opcode( cbuf, 0xDF );\n-    emit_opcode( cbuf, 0xE0 );\n+    emit_opcode( masm, 0xDF );\n+    emit_opcode( masm, 0xE0 );\n@@ -2535,1 +2523,1 @@\n-    emit_opcode( cbuf, 0x9E );\n+    emit_opcode( masm, 0x9E );\n@@ -2537,2 +2525,2 @@\n-    emit_opcode( cbuf, 0x7B );\n-    emit_opcode( cbuf, 0x05 );\n+    emit_opcode( masm, 0x7B );\n+    emit_opcode( masm, 0x05 );\n@@ -2545,2 +2533,2 @@\n-    emit_opcode( cbuf, 0xD9 );\n-    emit_opcode( cbuf, 0xF8 );\n+    emit_opcode( masm, 0xD9 );\n+    emit_opcode( masm, 0xF8 );\n@@ -2548,1 +2536,1 @@\n-    emit_opcode( cbuf, 0x9b );\n+    emit_opcode( masm, 0x9b );\n@@ -2550,2 +2538,2 @@\n-    emit_opcode( cbuf, 0xDF );\n-    emit_opcode( cbuf, 0xE0 );\n+    emit_opcode( masm, 0xDF );\n+    emit_opcode( masm, 0xE0 );\n@@ -2553,1 +2541,1 @@\n-    emit_opcode( cbuf, 0x9E );\n+    emit_opcode( masm, 0x9E );\n@@ -2555,6 +2543,6 @@\n-    emit_opcode( cbuf, 0x0F );\n-    emit_opcode( cbuf, 0x8A );\n-    emit_opcode( cbuf, 0xF4 );\n-    emit_opcode( cbuf, 0xFF );\n-    emit_opcode( cbuf, 0xFF );\n-    emit_opcode( cbuf, 0xFF );\n+    emit_opcode( masm, 0x0F );\n+    emit_opcode( masm, 0x8A );\n+    emit_opcode( masm, 0xF4 );\n+    emit_opcode( masm, 0xFF );\n+    emit_opcode( masm, 0xFF );\n+    emit_opcode( masm, 0xFF );\n@@ -2565,2 +2553,2 @@\n-    emit_opcode( cbuf, 0xDF);\n-    emit_opcode( cbuf, 0xE0);\n+    emit_opcode( masm, 0xDF);\n+    emit_opcode( masm, 0xE0);\n@@ -2568,3 +2556,3 @@\n-    emit_opcode( cbuf, 0x66 );   \/\/ operand-size prefix for 16-bit immediate\n-    emit_opcode( cbuf, 0xA9 );\n-    emit_d16   ( cbuf, 0x0400 );\n+    emit_opcode( masm, 0x66 );   \/\/ operand-size prefix for 16-bit immediate\n+    emit_opcode( masm, 0xA9 );\n+    emit_d16   ( masm, 0x0400 );\n@@ -2573,2 +2561,2 @@\n-    \/\/ emit_opcode( cbuf, 0xA9 );\n-    \/\/ emit_d32   ( cbuf, 0x00000400 );\n+    \/\/ emit_opcode( masm, 0xA9 );\n+    \/\/ emit_d32   ( masm, 0x00000400 );\n@@ -2577,2 +2565,2 @@\n-    emit_opcode( cbuf, 0x74 );\n-    emit_d8    ( cbuf, 0x02 );\n+    emit_opcode( masm, 0x74 );\n+    emit_d8    ( masm, 0x02 );\n@@ -2580,2 +2568,2 @@\n-    emit_opcode( cbuf, 0xB4 );\n-    emit_d8    ( cbuf, 0x01 );\n+    emit_opcode( masm, 0xB4 );\n+    emit_d8    ( masm, 0x01 );\n@@ -2583,1 +2571,1 @@\n-    emit_opcode( cbuf, 0x9E);\n+    emit_opcode( masm, 0x9E);\n@@ -2590,2 +2578,2 @@\n-    emit_opcode( cbuf, 0x7B );\n-    emit_d8    ( cbuf, 0x03 );\n+    emit_opcode( masm, 0x7B );\n+    emit_d8    ( masm, 0x03 );\n@@ -2593,2 +2581,2 @@\n-    emit_opcode( cbuf, 0xB4 );\n-    emit_d8    ( cbuf, 0x01 );\n+    emit_opcode( masm, 0xB4 );\n+    emit_d8    ( masm, 0x01 );\n@@ -2596,1 +2584,1 @@\n-    emit_opcode( cbuf, 0x9E);\n+    emit_opcode( masm, 0x9E);\n@@ -2598,1 +2586,1 @@\n-    emit_opcode( cbuf, 0x90);\n+    emit_opcode( masm, 0x90);\n@@ -2618,2 +2606,2 @@\n-    emit_opcode( cbuf, 0xDF);\n-    emit_opcode( cbuf, 0xE0);\n+    emit_opcode( masm, 0xDF);\n+    emit_opcode( masm, 0xE0);\n@@ -2621,1 +2609,1 @@\n-    emit_opcode( cbuf, 0x9E);\n+    emit_opcode( masm, 0x9E);\n@@ -2623,2 +2611,2 @@\n-    emit_opcode( cbuf, 0xB8 + $dst$$reg);\n-    emit_d32( cbuf, -1 );\n+    emit_opcode( masm, 0xB8 + $dst$$reg);\n+    emit_d32( masm, -1 );\n@@ -2626,2 +2614,2 @@\n-    emit_opcode( cbuf, 0x7A );\n-    emit_d8    ( cbuf, 0x13 );\n+    emit_opcode( masm, 0x7A );\n+    emit_d8    ( masm, 0x13 );\n@@ -2629,2 +2617,2 @@\n-    emit_opcode( cbuf, 0xB8 + $dst$$reg);\n-    emit_d32( cbuf, -1 );\n+    emit_opcode( masm, 0xB8 + $dst$$reg);\n+    emit_d32( masm, -1 );\n@@ -2632,2 +2620,2 @@\n-    emit_opcode( cbuf, 0x72 );\n-    emit_d8    ( cbuf, 0x0C );\n+    emit_opcode( masm, 0x72 );\n+    emit_d8    ( masm, 0x0C );\n@@ -2635,2 +2623,2 @@\n-    emit_opcode( cbuf, 0xB8 + $dst$$reg);\n-    emit_d32( cbuf, 0 );\n+    emit_opcode( masm, 0xB8 + $dst$$reg);\n+    emit_d32( masm, 0 );\n@@ -2638,2 +2626,2 @@\n-    emit_opcode( cbuf, 0x74 );\n-    emit_d8    ( cbuf, 0x05 );\n+    emit_opcode( masm, 0x74 );\n+    emit_d8    ( masm, 0x05 );\n@@ -2641,2 +2629,2 @@\n-    emit_opcode( cbuf, 0xB8 + $dst$$reg);\n-    emit_d32( cbuf, 1 );\n+    emit_opcode( masm, 0xB8 + $dst$$reg);\n+    emit_d32( masm, 1 );\n@@ -2650,2 +2638,2 @@\n-    emit_opcode( cbuf, 0x3B );\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW($src1$$reg), HIGH_FROM_LOW($src2$$reg) );\n+    emit_opcode( masm, 0x3B );\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW($src1$$reg), HIGH_FROM_LOW($src2$$reg) );\n@@ -2653,2 +2641,2 @@\n-    emit_opcode(cbuf,0x75);\n-    emit_d8(cbuf, 2 );\n+    emit_opcode(masm,0x75);\n+    emit_d8(masm, 2 );\n@@ -2656,2 +2644,2 @@\n-    emit_opcode( cbuf, 0x3B );\n-    emit_rm(cbuf, 0x3, $src1$$reg, $src2$$reg );\n+    emit_opcode( masm, 0x3B );\n+    emit_rm(masm, 0x3, $src1$$reg, $src2$$reg );\n@@ -2665,1 +2653,1 @@\n-    encode_Copy( cbuf, dst_encoding  , src_encoding );\n+    encode_Copy( masm, dst_encoding  , src_encoding );\n@@ -2667,1 +2655,1 @@\n-    encode_Copy( cbuf, HIGH_FROM_LOW(dst_encoding), src_encoding );\n+    encode_Copy( masm, HIGH_FROM_LOW(dst_encoding), src_encoding );\n@@ -2669,3 +2657,3 @@\n-    emit_opcode( cbuf, 0xC1 );\n-    emit_rm(cbuf, 0x3, 7, HIGH_FROM_LOW(dst_encoding) );\n-    emit_d8(cbuf, 0x1F );\n+    emit_opcode( masm, 0xC1 );\n+    emit_rm(masm, 0x3, 7, HIGH_FROM_LOW(dst_encoding) );\n+    emit_d8(masm, 0x1F );\n@@ -2676,1 +2664,1 @@\n-    emit_opcode(cbuf, 0x50+HIGH_FROM_LOW($src$$reg));\n+    emit_opcode(masm, 0x50+HIGH_FROM_LOW($src$$reg));\n@@ -2678,1 +2666,1 @@\n-    emit_opcode(cbuf, 0x50+$src$$reg  );\n+    emit_opcode(masm, 0x50+$src$$reg  );\n@@ -2680,4 +2668,4 @@\n-    emit_opcode(cbuf,0xdf);\n-    emit_d8(cbuf, 0x6C);\n-    emit_d8(cbuf, 0x24);\n-    emit_d8(cbuf, 0x00);\n+    emit_opcode(masm,0xdf);\n+    emit_d8(masm, 0x6C);\n+    emit_d8(masm, 0x24);\n+    emit_d8(masm, 0x00);\n@@ -2685,3 +2673,3 @@\n-    emit_opcode(cbuf, 0x83); \/\/ add  SP, #8\n-    emit_rm(cbuf, 0x3, 0x00, ESP_enc);\n-    emit_d8(cbuf, 0x8);\n+    emit_opcode(masm, 0x83); \/\/ add  SP, #8\n+    emit_rm(masm, 0x3, 0x00, ESP_enc);\n+    emit_d8(masm, 0x8);\n@@ -2692,2 +2680,2 @@\n-    emit_opcode( cbuf, 0xF7 );\n-    emit_rm( cbuf, 0x3, 0x5, $src1$$reg );\n+    emit_opcode( masm, 0xF7 );\n+    emit_rm( masm, 0x3, 0x5, $src1$$reg );\n@@ -2697,3 +2685,3 @@\n-      emit_opcode(cbuf, 0xC1);\n-      emit_rm(cbuf, 0x3, 7, $dst$$reg );\n-      emit_d8(cbuf, shift_count);\n+      emit_opcode(masm, 0xC1);\n+      emit_rm(masm, 0x3, 7, $dst$$reg );\n+      emit_d8(masm, shift_count);\n@@ -2706,1 +2694,1 @@\n-    emit_opcode(cbuf, 0x50+HIGH_FROM_LOW($src$$reg));\n+    emit_opcode(masm, 0x50+HIGH_FROM_LOW($src$$reg));\n@@ -2708,1 +2696,1 @@\n-    emit_opcode(cbuf, 0x50+$src$$reg  );\n+    emit_opcode(masm, 0x50+$src$$reg  );\n@@ -2710,4 +2698,4 @@\n-    emit_opcode(cbuf,0xdf);\n-    emit_d8(cbuf, 0x6C);\n-    emit_d8(cbuf, 0x24);\n-    emit_d8(cbuf, 0x00);\n+    emit_opcode(masm,0xdf);\n+    emit_d8(masm, 0x6C);\n+    emit_d8(masm, 0x24);\n+    emit_d8(masm, 0x00);\n@@ -2719,2 +2707,2 @@\n-    emit_opcode( cbuf, 0xF7 );\n-    emit_rm( cbuf, 0x3, 0x5, $src$$reg);\n+    emit_opcode( masm, 0xF7 );\n+    emit_rm( masm, 0x3, 0x5, $src$$reg);\n@@ -2726,2 +2714,2 @@\n-    emit_opcode( cbuf, 0xF7 );\n-    emit_rm( cbuf, 0x3, 0x4, $src$$reg);\n+    emit_opcode( masm, 0xF7 );\n+    emit_rm( masm, 0x3, 0x4, $src$$reg);\n@@ -2734,1 +2722,1 @@\n-    encode_Copy( cbuf, $tmp$$reg, $src$$reg );\n+    encode_Copy( masm, $tmp$$reg, $src$$reg );\n@@ -2736,3 +2724,3 @@\n-    emit_opcode( cbuf, 0x0F );\n-    emit_opcode( cbuf, 0xAF );\n-    emit_rm( cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW($dst$$reg) );\n+    emit_opcode( masm, 0x0F );\n+    emit_opcode( masm, 0xAF );\n+    emit_rm( masm, 0x3, $tmp$$reg, HIGH_FROM_LOW($dst$$reg) );\n@@ -2740,1 +2728,1 @@\n-    encode_Copy( cbuf, HIGH_FROM_LOW($dst$$reg), HIGH_FROM_LOW($src$$reg) );\n+    encode_Copy( masm, HIGH_FROM_LOW($dst$$reg), HIGH_FROM_LOW($src$$reg) );\n@@ -2742,3 +2730,3 @@\n-    emit_opcode( cbuf, 0x0F );\n-    emit_opcode( cbuf, 0xAF );\n-    emit_rm( cbuf, 0x3, HIGH_FROM_LOW($dst$$reg), $dst$$reg );\n+    emit_opcode( masm, 0x0F );\n+    emit_opcode( masm, 0xAF );\n+    emit_rm( masm, 0x3, HIGH_FROM_LOW($dst$$reg), $dst$$reg );\n@@ -2746,2 +2734,2 @@\n-    emit_opcode( cbuf, 0x03 );\n-    emit_rm( cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW($dst$$reg) );\n+    emit_opcode( masm, 0x03 );\n+    emit_rm( masm, 0x3, $tmp$$reg, HIGH_FROM_LOW($dst$$reg) );\n@@ -2749,2 +2737,2 @@\n-    emit_opcode( cbuf, 0xF7 );\n-    emit_rm( cbuf, 0x3, 0x4, $src$$reg );\n+    emit_opcode( masm, 0xF7 );\n+    emit_rm( masm, 0x3, 0x4, $src$$reg );\n@@ -2752,2 +2740,2 @@\n-    emit_opcode( cbuf, 0x03 );\n-    emit_rm( cbuf, 0x3, HIGH_FROM_LOW($dst$$reg), $tmp$$reg );\n+    emit_opcode( masm, 0x03 );\n+    emit_rm( masm, 0x3, HIGH_FROM_LOW($dst$$reg), $tmp$$reg );\n@@ -2760,3 +2748,3 @@\n-    emit_opcode( cbuf, 0x6B );\n-    emit_rm( cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW($dst$$reg) );\n-    emit_d8( cbuf, (int)$src$$constant );\n+    emit_opcode( masm, 0x6B );\n+    emit_rm( masm, 0x3, $tmp$$reg, HIGH_FROM_LOW($dst$$reg) );\n+    emit_d8( masm, (int)$src$$constant );\n@@ -2764,2 +2752,2 @@\n-    emit_opcode(cbuf, 0xB8 + EDX_enc);\n-    emit_d32( cbuf, (int)$src$$constant );\n+    emit_opcode(masm, 0xB8 + EDX_enc);\n+    emit_d32( masm, (int)$src$$constant );\n@@ -2767,2 +2755,2 @@\n-    emit_opcode( cbuf, 0xF7 );\n-    emit_rm( cbuf, 0x3, 0x4, EDX_enc );\n+    emit_opcode( masm, 0xF7 );\n+    emit_rm( masm, 0x3, 0x4, EDX_enc );\n@@ -2770,2 +2758,2 @@\n-    emit_opcode( cbuf, 0x03 );\n-    emit_rm( cbuf, 0x3, EDX_enc, $tmp$$reg );\n+    emit_opcode( masm, 0x03 );\n+    emit_rm( masm, 0x3, EDX_enc, $tmp$$reg );\n@@ -2776,1 +2764,1 @@\n-    emit_opcode(cbuf, HIGH_FROM_LOW(0x50+$src1$$reg) );\n+    emit_opcode(masm, HIGH_FROM_LOW(0x50+$src1$$reg) );\n@@ -2778,1 +2766,1 @@\n-    emit_opcode(cbuf,               0x50+$src1$$reg  );\n+    emit_opcode(masm,               0x50+$src1$$reg  );\n@@ -2780,1 +2768,1 @@\n-    emit_opcode(cbuf, HIGH_FROM_LOW(0x50+$src2$$reg) );\n+    emit_opcode(masm, HIGH_FROM_LOW(0x50+$src2$$reg) );\n@@ -2782,1 +2770,1 @@\n-    emit_opcode(cbuf,               0x50+$src2$$reg  );\n+    emit_opcode(masm,               0x50+$src2$$reg  );\n@@ -2784,4 +2772,4 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n-    emit_opcode(cbuf,0xE8);       \/\/ Call into runtime\n-    emit_d32_reloc(cbuf, (CAST_FROM_FN_PTR(address, SharedRuntime::ldiv) - cbuf.insts_end()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ set_inst_mark();\n+    emit_opcode(masm,0xE8);       \/\/ Call into runtime\n+    emit_d32_reloc(masm, (CAST_FROM_FN_PTR(address, SharedRuntime::ldiv) - masm.pc()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ clear_inst_mark();\n@@ -2790,3 +2778,3 @@\n-    emit_opcode(cbuf, 0x83); \/\/ add  SP, #framesize\n-    emit_rm(cbuf, 0x3, 0x00, ESP_enc);\n-    emit_d8(cbuf, 4*4);\n+    emit_opcode(masm, 0x83); \/\/ add  SP, #framesize\n+    emit_rm(masm, 0x3, 0x00, ESP_enc);\n+    emit_d8(masm, 4*4);\n@@ -2797,1 +2785,1 @@\n-    emit_opcode(cbuf, HIGH_FROM_LOW(0x50+$src1$$reg) );\n+    emit_opcode(masm, HIGH_FROM_LOW(0x50+$src1$$reg) );\n@@ -2799,1 +2787,1 @@\n-    emit_opcode(cbuf,               0x50+$src1$$reg  );\n+    emit_opcode(masm,               0x50+$src1$$reg  );\n@@ -2801,1 +2789,1 @@\n-    emit_opcode(cbuf, HIGH_FROM_LOW(0x50+$src2$$reg) );\n+    emit_opcode(masm, HIGH_FROM_LOW(0x50+$src2$$reg) );\n@@ -2803,1 +2791,1 @@\n-    emit_opcode(cbuf,               0x50+$src2$$reg  );\n+    emit_opcode(masm,               0x50+$src2$$reg  );\n@@ -2805,4 +2793,4 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n-    emit_opcode(cbuf,0xE8);       \/\/ Call into runtime\n-    emit_d32_reloc(cbuf, (CAST_FROM_FN_PTR(address, SharedRuntime::lrem ) - cbuf.insts_end()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ set_inst_mark();\n+    emit_opcode(masm,0xE8);       \/\/ Call into runtime\n+    emit_d32_reloc(masm, (CAST_FROM_FN_PTR(address, SharedRuntime::lrem ) - masm.pc()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ clear_inst_mark();\n@@ -2811,3 +2799,3 @@\n-    emit_opcode(cbuf, 0x83); \/\/ add  SP, #framesize\n-    emit_rm(cbuf, 0x3, 0x00, ESP_enc);\n-    emit_d8(cbuf, 4*4);\n+    emit_opcode(masm, 0x83); \/\/ add  SP, #framesize\n+    emit_rm(masm, 0x3, 0x00, ESP_enc);\n+    emit_d8(masm, 4*4);\n@@ -2818,2 +2806,2 @@\n-    emit_opcode(cbuf, 0x8B);\n-    emit_rm(cbuf, 0x3, $tmp$$reg, $src$$reg);\n+    emit_opcode(masm, 0x8B);\n+    emit_rm(masm, 0x3, $tmp$$reg, $src$$reg);\n@@ -2821,2 +2809,2 @@\n-    emit_opcode(cbuf, 0x0B);\n-    emit_rm(cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW($src$$reg));\n+    emit_opcode(masm, 0x0B);\n+    emit_rm(masm, 0x3, $tmp$$reg, HIGH_FROM_LOW($src$$reg));\n@@ -2827,2 +2815,2 @@\n-    emit_opcode( cbuf, 0x3B );\n-    emit_rm(cbuf, 0x3, $src1$$reg, $src2$$reg );\n+    emit_opcode( masm, 0x3B );\n+    emit_rm(masm, 0x3, $src1$$reg, $src2$$reg );\n@@ -2830,2 +2818,2 @@\n-    emit_cc(cbuf, 0x70, 0x5);\n-    emit_d8(cbuf,2);\n+    emit_cc(masm, 0x70, 0x5);\n+    emit_d8(masm,2);\n@@ -2833,2 +2821,2 @@\n-    emit_opcode( cbuf, 0x3B );\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW($src1$$reg), HIGH_FROM_LOW($src2$$reg) );\n+    emit_opcode( masm, 0x3B );\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW($src1$$reg), HIGH_FROM_LOW($src2$$reg) );\n@@ -2839,2 +2827,2 @@\n-    emit_opcode( cbuf, 0x3B );\n-    emit_rm(cbuf, 0x3, $src1$$reg, $src2$$reg );\n+    emit_opcode( masm, 0x3B );\n+    emit_rm(masm, 0x3, $src1$$reg, $src2$$reg );\n@@ -2842,2 +2830,2 @@\n-    emit_opcode( cbuf, 0x8B );\n-    emit_rm(cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW($src1$$reg) );\n+    emit_opcode( masm, 0x8B );\n+    emit_rm(masm, 0x3, $tmp$$reg, HIGH_FROM_LOW($src1$$reg) );\n@@ -2845,2 +2833,2 @@\n-    emit_opcode( cbuf, 0x1B );\n-    emit_rm(cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW($src2$$reg) );\n+    emit_opcode( masm, 0x1B );\n+    emit_rm(masm, 0x3, $tmp$$reg, HIGH_FROM_LOW($src2$$reg) );\n@@ -2851,2 +2839,2 @@\n-    emit_opcode(cbuf,0x33);  \/\/ XOR\n-    emit_rm(cbuf,0x3, $tmp$$reg, $tmp$$reg);\n+    emit_opcode(masm,0x33);  \/\/ XOR\n+    emit_rm(masm,0x3, $tmp$$reg, $tmp$$reg);\n@@ -2854,2 +2842,2 @@\n-    emit_opcode( cbuf, 0x3B );\n-    emit_rm(cbuf, 0x3, $tmp$$reg, $src$$reg );\n+    emit_opcode( masm, 0x3B );\n+    emit_rm(masm, 0x3, $tmp$$reg, $src$$reg );\n@@ -2857,2 +2845,2 @@\n-    emit_opcode( cbuf, 0x1B );\n-    emit_rm(cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW($src$$reg) );\n+    emit_opcode( masm, 0x1B );\n+    emit_rm(masm, 0x3, $tmp$$reg, HIGH_FROM_LOW($src$$reg) );\n@@ -2863,7 +2851,7 @@\n-    emit_opcode(cbuf,0xF7);    \/\/ NEG hi\n-    emit_rm    (cbuf,0x3, 0x3, HIGH_FROM_LOW($dst$$reg));\n-    emit_opcode(cbuf,0xF7);    \/\/ NEG lo\n-    emit_rm    (cbuf,0x3, 0x3,               $dst$$reg );\n-    emit_opcode(cbuf,0x83);    \/\/ SBB hi,0\n-    emit_rm    (cbuf,0x3, 0x3, HIGH_FROM_LOW($dst$$reg));\n-    emit_d8    (cbuf,0 );\n+    emit_opcode(masm,0xF7);    \/\/ NEG hi\n+    emit_rm    (masm,0x3, 0x3, HIGH_FROM_LOW($dst$$reg));\n+    emit_opcode(masm,0xF7);    \/\/ NEG lo\n+    emit_rm    (masm,0x3, 0x3,               $dst$$reg );\n+    emit_opcode(masm,0x83);    \/\/ SBB hi,0\n+    emit_rm    (masm,0x3, 0x3, HIGH_FROM_LOW($dst$$reg));\n+    emit_d8    (masm,0 );\n@@ -2873,1 +2861,1 @@\n-    emit_opcode(cbuf,0x5A);\n+    emit_opcode(masm,0x5A);\n@@ -2877,4 +2865,3 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n-    emit_opcode(cbuf, 0xE9);        \/\/ jmp    entry\n-    emit_d32_reloc(cbuf, (int)OptoRuntime::rethrow_stub() - ((int)cbuf.insts_end())-4,\n+    __ set_inst_mark();\n+    emit_opcode(masm, 0xE9);        \/\/ jmp    entry\n+    emit_d32_reloc(masm, (int)OptoRuntime::rethrow_stub() - ((int)masm.pc())-4,\n@@ -2882,0 +2869,1 @@\n+    __ clear_inst_mark();\n@@ -2899,3 +2887,3 @@\n-    emit_opcode(cbuf,0xD9);            \/\/ FLDCW  trunc\n-    emit_opcode(cbuf,0x2D);\n-    emit_d32(cbuf,(int)StubRoutines::x86::addr_fpu_cntrl_wrd_trunc());\n+    emit_opcode(masm,0xD9);            \/\/ FLDCW  trunc\n+    emit_opcode(masm,0x2D);\n+    emit_d32(masm,(int)StubRoutines::x86::addr_fpu_cntrl_wrd_trunc());\n@@ -2903,3 +2891,3 @@\n-    emit_opcode(cbuf,0x83);            \/\/ SUB ESP,4\n-    emit_opcode(cbuf,0xEC);\n-    emit_d8(cbuf,0x04);\n+    emit_opcode(masm,0x83);            \/\/ SUB ESP,4\n+    emit_opcode(masm,0xEC);\n+    emit_d8(masm,0x04);\n@@ -2908,3 +2896,3 @@\n-    emit_opcode(cbuf,0xDB);            \/\/ FISTP [ESP]\n-    emit_opcode(cbuf,0x1C);\n-    emit_d8(cbuf,0x24);\n+    emit_opcode(masm,0xDB);            \/\/ FISTP [ESP]\n+    emit_opcode(masm,0x1C);\n+    emit_d8(masm,0x24);\n@@ -2912,3 +2900,3 @@\n-    emit_opcode(cbuf,0xD9);            \/\/ FLDCW   std\/24-bit mode\n-    emit_opcode(cbuf,0x2D);\n-    emit_d32( cbuf, Compile::current()->in_24_bit_fp_mode()\n+    emit_opcode(masm,0xD9);            \/\/ FLDCW   std\/24-bit mode\n+    emit_opcode(masm,0x2D);\n+    emit_d32( masm, Compile::current()->in_24_bit_fp_mode()\n@@ -2919,5 +2907,5 @@\n-    emit_opcode(cbuf,0x58);       \/\/ POP EAX\n-    emit_opcode(cbuf,0x3D);       \/\/ CMP EAX,imm\n-    emit_d32   (cbuf,0x80000000); \/\/         0x80000000\n-    emit_opcode(cbuf,0x75);       \/\/ JNE around_slow_call\n-    emit_d8    (cbuf,0x07);       \/\/ Size of slow_call\n+    emit_opcode(masm,0x58);       \/\/ POP EAX\n+    emit_opcode(masm,0x3D);       \/\/ CMP EAX,imm\n+    emit_d32   (masm,0x80000000); \/\/         0x80000000\n+    emit_opcode(masm,0x75);       \/\/ JNE around_slow_call\n+    emit_d8    (masm,0x07);       \/\/ Size of slow_call\n@@ -2925,2 +2913,2 @@\n-    emit_opcode(cbuf,0xD9 );      \/\/ FLD     ST(i)\n-    emit_d8    (cbuf,0xC0-1+$src$$reg );\n+    emit_opcode(masm,0xD9 );      \/\/ FLD     ST(i)\n+    emit_d8    (masm,0xC0-1+$src$$reg );\n@@ -2928,4 +2916,4 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n-    emit_opcode(cbuf,0xE8);       \/\/ Call into runtime\n-    emit_d32_reloc(cbuf, (StubRoutines::x86::d2i_wrapper() - cbuf.insts_end()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ set_inst_mark();\n+    emit_opcode(masm,0xE8);       \/\/ Call into runtime\n+    emit_d32_reloc(masm, (StubRoutines::x86::d2i_wrapper() - masm.pc()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ clear_inst_mark();\n@@ -2937,3 +2925,3 @@\n-    emit_opcode(cbuf,0xD9);            \/\/ FLDCW  trunc\n-    emit_opcode(cbuf,0x2D);\n-    emit_d32(cbuf,(int)StubRoutines::x86::addr_fpu_cntrl_wrd_trunc());\n+    emit_opcode(masm,0xD9);            \/\/ FLDCW  trunc\n+    emit_opcode(masm,0x2D);\n+    emit_d32(masm,(int)StubRoutines::x86::addr_fpu_cntrl_wrd_trunc());\n@@ -2941,3 +2929,3 @@\n-    emit_opcode(cbuf,0x83);            \/\/ SUB ESP,8\n-    emit_opcode(cbuf,0xEC);\n-    emit_d8(cbuf,0x08);\n+    emit_opcode(masm,0x83);            \/\/ SUB ESP,8\n+    emit_opcode(masm,0xEC);\n+    emit_d8(masm,0x08);\n@@ -2946,3 +2934,3 @@\n-    emit_opcode(cbuf,0xDF);            \/\/ FISTP [ESP]\n-    emit_opcode(cbuf,0x3C);\n-    emit_d8(cbuf,0x24);\n+    emit_opcode(masm,0xDF);            \/\/ FISTP [ESP]\n+    emit_opcode(masm,0x3C);\n+    emit_d8(masm,0x24);\n@@ -2950,3 +2938,3 @@\n-    emit_opcode(cbuf,0xD9);            \/\/ FLDCW   std\/24-bit mode\n-    emit_opcode(cbuf,0x2D);\n-    emit_d32( cbuf, Compile::current()->in_24_bit_fp_mode()\n+    emit_opcode(masm,0xD9);            \/\/ FLDCW   std\/24-bit mode\n+    emit_opcode(masm,0x2D);\n+    emit_d32( masm, Compile::current()->in_24_bit_fp_mode()\n@@ -2957,11 +2945,11 @@\n-    emit_opcode(cbuf,0x58);       \/\/ POP EAX\n-    emit_opcode(cbuf,0x5A);       \/\/ POP EDX\n-    emit_opcode(cbuf,0x81);       \/\/ CMP EDX,imm\n-    emit_d8    (cbuf,0xFA);       \/\/ rdx\n-    emit_d32   (cbuf,0x80000000); \/\/         0x80000000\n-    emit_opcode(cbuf,0x75);       \/\/ JNE around_slow_call\n-    emit_d8    (cbuf,0x07+4);     \/\/ Size of slow_call\n-    emit_opcode(cbuf,0x85);       \/\/ TEST EAX,EAX\n-    emit_opcode(cbuf,0xC0);       \/\/ 2\/rax,\/rax,\n-    emit_opcode(cbuf,0x75);       \/\/ JNE around_slow_call\n-    emit_d8    (cbuf,0x07);       \/\/ Size of slow_call\n+    emit_opcode(masm,0x58);       \/\/ POP EAX\n+    emit_opcode(masm,0x5A);       \/\/ POP EDX\n+    emit_opcode(masm,0x81);       \/\/ CMP EDX,imm\n+    emit_d8    (masm,0xFA);       \/\/ rdx\n+    emit_d32   (masm,0x80000000); \/\/         0x80000000\n+    emit_opcode(masm,0x75);       \/\/ JNE around_slow_call\n+    emit_d8    (masm,0x07+4);     \/\/ Size of slow_call\n+    emit_opcode(masm,0x85);       \/\/ TEST EAX,EAX\n+    emit_opcode(masm,0xC0);       \/\/ 2\/rax,\/rax,\n+    emit_opcode(masm,0x75);       \/\/ JNE around_slow_call\n+    emit_d8    (masm,0x07);       \/\/ Size of slow_call\n@@ -2969,2 +2957,2 @@\n-    emit_opcode(cbuf,0xD9 );      \/\/ FLD     ST(i)\n-    emit_d8    (cbuf,0xC0-1+$src$$reg );\n+    emit_opcode(masm,0xD9 );      \/\/ FLD     ST(i)\n+    emit_d8    (masm,0xC0-1+$src$$reg );\n@@ -2972,4 +2960,4 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n-    emit_opcode(cbuf,0xE8);       \/\/ Call into runtime\n-    emit_d32_reloc(cbuf, (StubRoutines::x86::d2l_wrapper() - cbuf.insts_end()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ set_inst_mark();\n+    emit_opcode(masm,0xE8);       \/\/ Call into runtime\n+    emit_d32_reloc(masm, (StubRoutines::x86::d2l_wrapper() - masm.pc()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ clear_inst_mark();\n@@ -2983,2 +2971,2 @@\n-    emit_opcode(cbuf, 0xD8);\n-    emit_opcode(cbuf, 0xC8 + $src1$$reg);\n+    emit_opcode(masm, 0xD8);\n+    emit_opcode(masm, 0xC8 + $src1$$reg);\n@@ -2989,2 +2977,2 @@\n-    emit_opcode(cbuf, 0xD8);\n-    emit_opcode(cbuf, 0xC0 + $src2$$reg);\n+    emit_opcode(masm, 0xD8);\n+    emit_opcode(masm, 0xC0 + $src2$$reg);\n@@ -2996,2 +2984,2 @@\n-    emit_opcode(cbuf, 0xDE);\n-    emit_opcode(cbuf, 0xC0 + $src2$$reg);\n+    emit_opcode(masm, 0xDE);\n+    emit_opcode(masm, 0xC0 + $src2$$reg);\n@@ -3003,2 +2991,2 @@\n-      emit_opcode(cbuf, 0xD8);\n-      emit_opcode(cbuf, 0xE0 + $src1$$reg);\n+      emit_opcode(masm, 0xD8);\n+      emit_opcode(masm, 0xE0 + $src1$$reg);\n@@ -3007,2 +2995,2 @@\n-      emit_opcode(cbuf, 0xD8);\n-      emit_opcode(cbuf, 0xF0 + $src2$$reg);\n+      emit_opcode(masm, 0xD8);\n+      emit_opcode(masm, 0xF0 + $src2$$reg);\n@@ -3014,2 +3002,2 @@\n-    emit_opcode(cbuf, 0xD8);\n-    emit_opcode(cbuf, 0xC0 + $src1$$reg);\n+    emit_opcode(masm, 0xD8);\n+    emit_opcode(masm, 0xC0 + $src1$$reg);\n@@ -3018,2 +3006,2 @@\n-    emit_opcode(cbuf, 0xD8);\n-    emit_opcode(cbuf, 0xC8 + $src2$$reg);\n+    emit_opcode(masm, 0xD8);\n+    emit_opcode(masm, 0xC8 + $src2$$reg);\n@@ -3026,2 +3014,2 @@\n-    emit_opcode(cbuf, 0xD8);\n-    emit_opcode(cbuf, 0xC0 + $src1$$reg);\n+    emit_opcode(masm, 0xD8);\n+    emit_opcode(masm, 0xC0 + $src1$$reg);\n@@ -3030,2 +3018,2 @@\n-    emit_opcode(cbuf, 0xDE);\n-    emit_opcode(cbuf, 0xC8 + $src2$$reg);\n+    emit_opcode(masm, 0xDE);\n+    emit_opcode(masm, 0xC8 + $src2$$reg);\n@@ -3036,1 +3024,1 @@\n-    emit_opcode(cbuf,0xDF);\n+    emit_opcode(masm,0xDF);\n@@ -3043,2 +3031,2 @@\n-    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace, disp_reloc);\n-    store_to_stackslot( cbuf, 0x0DF, 0x07, $dst$$disp );\n+    encode_RegMem(masm, rm_byte_opcode, base, index, scale, displace, disp_reloc);\n+    store_to_stackslot( masm, 0x0DF, 0x07, $dst$$disp );\n@@ -3052,3 +3040,3 @@\n-    store_to_stackslot( cbuf, 0x0DF, 0x05, $src$$disp );\n-    cbuf.set_insts_mark();            \/\/ Mark start of FIST in case $mem has an oop\n-    emit_opcode(cbuf,0xDF);\n+    store_to_stackslot( masm, 0x0DF, 0x05, $src$$disp );\n+    masm.set_inst_mark();            \/\/ Mark start of FIST in case $mem has an oop\n+    emit_opcode(masm,0xDF);\n@@ -3061,1 +3049,2 @@\n-    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace, disp_reloc);\n+    encode_RegMem(masm, rm_byte_opcode, base, index, scale, displace, disp_reloc);\n+    masm.clear_inst_mark();\n@@ -5836,1 +5825,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5848,1 +5837,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5859,1 +5848,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5872,2 +5861,2 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),\n-              Pop_Reg_DPR(dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),\n+              Pop_Reg_DPR(dst), ClearInstMark );\n@@ -5922,2 +5911,2 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),\n-              Pop_Reg_FPR(dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),\n+              Pop_Reg_FPR(dst), ClearInstMark );\n@@ -5934,1 +5923,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5944,1 +5933,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5954,1 +5943,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5964,1 +5953,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5974,1 +5963,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5983,1 +5972,1 @@\n-  ins_encode( LdImmI(dst, src) );\n+  ins_encode( SetInstMark, LdImmI(dst, src), ClearInstMark );\n@@ -6004,1 +5993,1 @@\n-  ins_encode( LdImmP(dst, src) );\n+  ins_encode( SetInstMark, LdImmP(dst, src), ClearInstMark );\n@@ -6162,1 +6151,1 @@\n-  ins_encode( OpcP, RegMem(dst,src));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,src), ClearInstMark);\n@@ -6173,1 +6162,1 @@\n-  ins_encode( OpcP, RegMem( dst, src ), OpcS, RegMem_Hi( dst, src ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, src ), OpcS, RegMem_Hi( dst, src ), ClearInstMark );\n@@ -6184,1 +6173,1 @@\n-  ins_encode( OpcP, RegMem(dst,src));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,src), ClearInstMark);\n@@ -6196,2 +6185,2 @@\n-  ins_encode( OpcP, RMopc_Mem_no_oop(0x00,src),\n-              Pop_Reg_FPR(dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem_no_oop(0x00,src),\n+              Pop_Reg_FPR(dst), ClearInstMark );\n@@ -6209,2 +6198,2 @@\n-  ins_encode( OpcP, RMopc_Mem_no_oop(0x00,src),\n-              Pop_Reg_DPR(dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem_no_oop(0x00,src),\n+              Pop_Reg_DPR(dst), ClearInstMark );\n@@ -6284,1 +6273,1 @@\n-  ins_encode( OpcP, RegMem( src, mem ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, mem ), ClearInstMark );\n@@ -6295,1 +6284,1 @@\n-  ins_encode( OpcS, OpcP, RegMem( src, mem ) );\n+  ins_encode( SetInstMark, OpcS, OpcP, RegMem( src, mem ), ClearInstMark );\n@@ -6306,1 +6295,1 @@\n-  ins_encode( OpcP, RegMem( src, mem ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, mem ), ClearInstMark );\n@@ -6319,1 +6308,1 @@\n-  ins_encode( OpcP, RegMem( src, mem ), OpcS, RegMem_Hi( src, mem ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, mem ), OpcS, RegMem_Hi( src, mem ), ClearInstMark );\n@@ -6347,1 +6336,1 @@\n-  ins_encode( OpcP, RegMem( EAX, mem ), enc_storeL_volatile(mem,src));\n+  ins_encode( SetInstMark, OpcP, RegMem( EAX, mem ), enc_storeL_volatile(mem,src), ClearInstMark);\n@@ -6394,1 +6383,1 @@\n-  ins_encode( OpcP, RegMem( src, mem ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, mem ), ClearInstMark );\n@@ -6405,1 +6394,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),  Con32( src ));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem), Con32(src), ClearInstMark);\n@@ -6417,1 +6406,1 @@\n-  ins_encode( SizePrefix, OpcP, RMopc_Mem(0x00,mem),  Con16( src ));\n+  ins_encode( SetInstMark, SizePrefix, OpcP, RMopc_Mem(0x00,mem), Con16(src), ClearInstMark);\n@@ -6429,1 +6418,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),  Con32( src ));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem), Con32( src ), ClearInstMark);\n@@ -6440,1 +6429,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),  Con8or32( src ));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem), Con8or32(src), ClearInstMark);\n@@ -6451,1 +6440,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),  Con8or32( src ));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem), Con8or32(src), ClearInstMark);\n@@ -6550,1 +6539,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),  Con32FPR_as_bits( src ));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),  Con32FPR_as_bits(src), ClearInstMark);\n@@ -6562,1 +6551,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),  Con32F_as_bits( src ));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),  Con32F_as_bits(src), ClearInstMark);\n@@ -6596,1 +6585,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ), OpcS, RegMem_Hi( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), OpcS, RegMem_Hi( src, dst ), ClearInstMark );\n@@ -6771,1 +6760,1 @@\n-  ins_encode( enc_cmov(cop), RegMem( dst, src ) );\n+  ins_encode( SetInstMark, enc_cmov(cop), RegMem( dst, src ), ClearInstMark );\n@@ -6782,1 +6771,1 @@\n-  ins_encode( enc_cmov(cop), RegMem( dst, src ) );\n+  ins_encode( SetInstMark, enc_cmov(cop), RegMem( dst, src ), ClearInstMark );\n@@ -7080,1 +7069,1 @@\n-  ins_encode( OpcP, RegLea( dst, src0, src1 ) );\n+  ins_encode( SetInstMark, OpcP, RegLea( dst, src0, src1 ), ClearInstMark );\n@@ -7090,1 +7079,1 @@\n-  ins_encode( OpcP, RegLea( dst, src0, src1 ) );\n+  ins_encode( SetInstMark, OpcP, RegLea( dst, src0, src1 ), ClearInstMark );\n@@ -7135,1 +7124,1 @@\n-  ins_encode( OpcP, RegMem( dst, src) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, src), ClearInstMark );\n@@ -7146,1 +7135,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), ClearInstMark );\n@@ -7158,1 +7147,1 @@\n-  ins_encode( OpcSE( src ), RMopc_Mem(0x00,dst), Con8or32( src ) );\n+  ins_encode( SetInstMark, OpcSE( src ), RMopc_Mem(0x00,dst), Con8or32(src), ClearInstMark );\n@@ -7169,1 +7158,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,dst));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,dst), ClearInstMark);\n@@ -7180,1 +7169,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x01,dst));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x01,dst), ClearInstMark);\n@@ -7260,1 +7249,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -7272,1 +7261,1 @@\n-  ins_encode( lock_prefix, Opcode(0x0F), Opcode(0xB1), RegMem(newval,heap_top_ptr) );\n+  ins_encode( SetInstMark, lock_prefix, Opcode(0x0F), Opcode(0xB1), RegMem(newval,heap_top_ptr), ClearInstMark );\n@@ -7282,1 +7271,1 @@\n-  ins_encode( lock_prefix, Opcode(0x0F), Opcode(0xB1), RegMem(newval, mem) );\n+  ins_encode( SetInstMark, lock_prefix, Opcode(0x0F), Opcode(0xB1), RegMem(newval, mem), ClearInstMark );\n@@ -7559,1 +7548,1 @@\n-  ins_encode( OpcP, RegMem( dst, src) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, src), ClearInstMark );\n@@ -7570,1 +7559,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), ClearInstMark );\n@@ -7676,1 +7665,1 @@\n-  ins_encode( OpcSE(imm), RegMem( dst, src ), Con8or32( imm ) );\n+  ins_encode( SetInstMark, OpcSE(imm), RegMem( dst, src ), Con8or32( imm ), ClearInstMark );\n@@ -7688,1 +7677,1 @@\n-  ins_encode( OpcS, OpcP, RegMem( dst, src) );\n+  ins_encode( SetInstMark, OpcS, OpcP, RegMem( dst, src), ClearInstMark );\n@@ -8093,1 +8082,1 @@\n-  ins_encode( OpcP, RMopc_Mem(secondary,dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(secondary,dst), ClearInstMark );\n@@ -8116,1 +8105,1 @@\n-  ins_encode( OpcP, RMopc_Mem(secondary, dst ), Con8or32( shift ) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(secondary, dst ), Con8or32(shift), ClearInstMark );\n@@ -8232,1 +8221,1 @@\n-  ins_encode( OpcP, RegMem( dst, src) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, src), ClearInstMark );\n@@ -8244,1 +8233,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), ClearInstMark );\n@@ -8257,1 +8246,1 @@\n-  ins_encode( OpcSE( src ), RMopc_Mem(secondary, dst ), Con8or32( src ) );\n+  ins_encode( SetInstMark, OpcSE( src ), RMopc_Mem(secondary, dst ), Con8or32(src), ClearInstMark );\n@@ -8423,1 +8412,1 @@\n-  ins_encode( OpcP, RegMem( dst, src) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, src), ClearInstMark );\n@@ -8435,1 +8424,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), ClearInstMark );\n@@ -8448,1 +8437,1 @@\n-  ins_encode( OpcSE( src ), RMopc_Mem(secondary, dst ), Con8or32( src ) );\n+  ins_encode( SetInstMark, OpcSE( src ), RMopc_Mem(secondary, dst ), Con8or32(src), ClearInstMark );\n@@ -8630,1 +8619,1 @@\n-  ins_encode( OpcP, RegMem(dst, src) );\n+  ins_encode( SetInstMark, OpcP, RegMem(dst, src), ClearInstMark );\n@@ -8642,1 +8631,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), ClearInstMark );\n@@ -8654,1 +8643,1 @@\n-  ins_encode( OpcSE( src ), RMopc_Mem(secondary, dst ), Con8or32( src ) );\n+  ins_encode( SetInstMark, OpcSE( src ), RMopc_Mem(secondary, dst ), Con8or32(src), ClearInstMark );\n@@ -8940,1 +8929,1 @@\n-  ins_encode( OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem), ClearInstMark );\n@@ -8975,1 +8964,1 @@\n-  ins_encode( OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem), ClearInstMark );\n@@ -9018,1 +9007,1 @@\n-  ins_encode( OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem), ClearInstMark );\n@@ -9256,1 +9245,1 @@\n-  ins_encode( OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem), ClearInstMark );\n@@ -9302,1 +9291,1 @@\n-  ins_encode( OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem), ClearInstMark );\n@@ -9584,1 +9573,1 @@\n-    emit_cmpfp_fixup(_masm);\n+    emit_cmpfp_fixup(masm);\n@@ -9613,1 +9602,1 @@\n-    emit_cmpfp_fixup(_masm);\n+    emit_cmpfp_fixup(masm);\n@@ -9644,1 +9633,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -9664,1 +9653,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -9706,2 +9695,2 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src),\n-              OpcP, RegOpc(dst) );\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src),\n+              OpcP, RegOpc(dst), ClearInstMark );\n@@ -9768,2 +9757,2 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src),\n-              OpcP, RegOpc(dst) );\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src),\n+              OpcP, RegOpc(dst), ClearInstMark );\n@@ -9783,4 +9772,5 @@\n-  ins_encode( Opcode(0xDD), RMopc_Mem(0x00,dst),\n-              Opcode(0xD8), RegOpc(src),\n-              set_instruction_start,\n-              Opcode(0xDD), RMopc_Mem(0x03,dst) );\n+  ins_encode( SetInstMark, Opcode(0xDD), RMopc_Mem(0x00,dst),\n+              Opcode(0xD8), RegOpc(src), ClearInstMark,\n+              SetInstMark,\n+              Opcode(0xDD), RMopc_Mem(0x03,dst),\n+              ClearInstMark);\n@@ -9891,2 +9881,2 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src),\n-              OpcP, RegOpc(dst) );\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src),\n+              OpcP, RegOpc(dst), ClearInstMark );\n@@ -9906,1 +9896,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,mem),\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,mem),\n@@ -9908,1 +9898,1 @@\n-              Pop_Reg_DPR(dst) );\n+              Pop_Reg_DPR(dst), ClearInstMark );\n@@ -10167,1 +10157,1 @@\n-    emit_cmpfp_fixup(_masm);\n+    emit_cmpfp_fixup(masm);\n@@ -10196,1 +10186,1 @@\n-    emit_cmpfp_fixup(_masm);\n+    emit_cmpfp_fixup(masm);\n@@ -10227,1 +10217,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -10247,1 +10237,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -10333,1 +10323,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src2),\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src2),\n@@ -10335,1 +10325,1 @@\n-              Pop_Mem_FPR(dst) );\n+              Pop_Mem_FPR(dst), ClearInstMark );\n@@ -10347,2 +10337,2 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src),\n-              OpcP, RegOpc(dst) );\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src),\n+              OpcP, RegOpc(dst), ClearInstMark );\n@@ -10360,1 +10350,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src1),\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src1),\n@@ -10362,1 +10352,1 @@\n-              Pop_Mem_FPR(dst) );\n+              Pop_Mem_FPR(dst), ClearInstMark );\n@@ -10374,2 +10364,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src2),\n-              set_instruction_start,\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src2),\n@@ -10377,1 +10366,2 @@\n-              Pop_Mem_FPR(dst) );\n+              Pop_Mem_FPR(dst),\n+              ClearInstMark);\n@@ -10388,2 +10378,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src2),\n-              set_instruction_start,\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src2),\n@@ -10391,1 +10380,2 @@\n-              Pop_Mem_FPR(dst) );\n+              Pop_Mem_FPR(dst),\n+              ClearInstMark);\n@@ -10467,1 +10457,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src2),\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src2),\n@@ -10469,1 +10459,1 @@\n-              Pop_Mem_FPR(dst) );\n+              Pop_Mem_FPR(dst), ClearInstMark );\n@@ -10481,1 +10471,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src2),\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src2),\n@@ -10483,1 +10473,1 @@\n-              Pop_Reg_FPR(dst) );\n+              Pop_Reg_FPR(dst), ClearInstMark );\n@@ -10494,2 +10484,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src2),\n-              set_instruction_start,\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src2),\n@@ -10497,1 +10486,2 @@\n-              Pop_Mem_FPR(dst) );\n+              Pop_Mem_FPR(dst),\n+              ClearInstMark );\n@@ -10545,1 +10535,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,mem1),\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,mem1),\n@@ -10547,1 +10537,1 @@\n-              Pop_Reg_FPR(dst) );\n+              Pop_Reg_FPR(dst), ClearInstMark );\n@@ -10563,1 +10553,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem1),\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem1),\n@@ -10566,1 +10556,1 @@\n-              Pop_Reg_FPR(dst) );\n+              Pop_Reg_FPR(dst), ClearInstMark );\n@@ -11105,2 +11095,2 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),\n-              Pop_Reg_DPR(dst));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),\n+              Pop_Reg_DPR(dst), ClearInstMark);\n@@ -11143,2 +11133,2 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),\n-              Pop_Mem_FPR(dst));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),\n+              Pop_Mem_FPR(dst), ClearInstMark);\n@@ -11167,2 +11157,2 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),\n-              Pop_Reg_FPR(dst));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),\n+              Pop_Reg_FPR(dst), ClearInstMark);\n@@ -11366,2 +11356,2 @@\n-  ins_encode( OpcP, RMopc_Mem_no_oop(0x00,src),\n-              Pop_Reg_FPR(dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem_no_oop(0x00,src),\n+              Pop_Reg_FPR(dst), ClearInstMark );\n@@ -11405,1 +11395,1 @@\n-  ins_encode( OpcP, RegMem(dst,src), OpcS, RegMem_Hi(dst,src));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,src), OpcS, RegMem_Hi(dst,src), ClearInstMark);\n@@ -11456,1 +11446,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ), OpcS, RegMem_Hi( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), OpcS, RegMem_Hi( src, dst ), ClearInstMark );\n@@ -11470,2 +11460,2 @@\n-  ins_encode( OpcP, RMopc_Mem_no_oop(0x00,src),\n-              Pop_Reg_DPR(dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem_no_oop(0x00,src),\n+              Pop_Reg_DPR(dst), ClearInstMark );\n@@ -12385,1 +12375,1 @@\n-  ins_encode( OpcP, RegMem( op1, op2) );\n+  ins_encode( SetInstMark, OpcP, RegMem( op1, op2), ClearInstMark );\n@@ -12413,1 +12403,1 @@\n-  ins_encode( OpcP, RegMem( src, mem ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, mem ), ClearInstMark );\n@@ -12444,1 +12434,1 @@\n-  ins_encode( OpcP, RegMem( op1, op2) );\n+  ins_encode( SetInstMark, OpcP, RegMem( op1, op2), ClearInstMark );\n@@ -12482,1 +12472,1 @@\n-  ins_encode( OpcSErm( op1, op2 ), Con8or32( op2 ) );\n+  ins_encode( SetInstMark, OpcSErm( op1, op2 ), Con8or32( op2 ), ClearInstMark );\n@@ -12493,1 +12483,1 @@\n-  ins_encode( OpcP, RegMem( op1, op2) );\n+  ins_encode( SetInstMark, OpcP, RegMem( op1, op2), ClearInstMark );\n@@ -12516,1 +12506,1 @@\n-  ins_encode( OpcP, RegMem( op1, op2) );\n+  ins_encode( SetInstMark, OpcP, RegMem( op1, op2), ClearInstMark );\n@@ -12541,1 +12531,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,op), Con_d32(0xFFFFFFFF) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,op), Con_d32(0xFFFFFFFF), ClearInstMark );\n@@ -13169,1 +13159,1 @@\n-  ins_encode( enc_cmov(cmp), RegMem(dst, src), enc_cmov(cmp), RegMem_Hi(dst, src) );\n+  ins_encode( SetInstMark, enc_cmov(cmp), RegMem(dst, src), enc_cmov(cmp), RegMem_Hi(dst, src), ClearInstMark );\n@@ -13208,1 +13198,1 @@\n-  ins_encode( enc_cmov(cmp), RegMem( dst, src ) );\n+  ins_encode( SetInstMark, enc_cmov(cmp), RegMem( dst, src ), ClearInstMark );\n@@ -13378,1 +13368,1 @@\n-  ins_encode( enc_cmov(cmp), RegMem(dst, src), enc_cmov(cmp), RegMem_Hi(dst, src) );\n+  ins_encode( SetInstMark, enc_cmov(cmp), RegMem(dst, src), enc_cmov(cmp), RegMem_Hi(dst, src), ClearInstMark );\n@@ -13399,1 +13389,1 @@\n-  ins_encode( enc_cmov(cmp), RegMem( dst, src ) );\n+  ins_encode( SetInstMark, enc_cmov(cmp), RegMem( dst, src ), ClearInstMark );\n@@ -13579,1 +13569,1 @@\n-  ins_encode( enc_cmov(cmp), RegMem(dst, src), enc_cmov(cmp), RegMem_Hi(dst, src) );\n+  ins_encode( SetInstMark, enc_cmov(cmp), RegMem(dst, src), enc_cmov(cmp), RegMem_Hi(dst, src), ClearInstMark );\n@@ -13618,1 +13608,1 @@\n-  ins_encode( enc_cmov(cmp), RegMem( dst, src ) );\n+  ins_encode( SetInstMark, enc_cmov(cmp), RegMem( dst, src ), ClearInstMark );\n@@ -13936,0 +13926,1 @@\n+    __ set_inst_mark();\n@@ -13937,0 +13928,1 @@\n+    __ clear_inst_mark();\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":868,"deletions":876,"binary":false,"changes":1744,"status":"modified"},{"patch":"@@ -353,1 +353,1 @@\n-#define __ _masm.\n+#define __ masm.\n@@ -514,1 +514,1 @@\n-void emit_rm(CodeBuffer &cbuf, int f1, int f2, int f3) {\n+void emit_rm(C2_MacroAssembler &masm, int f1, int f2, int f3) {\n@@ -516,1 +516,1 @@\n-  cbuf.insts()->emit_int8(c);\n+  masm.emit_int8(c);\n@@ -520,1 +520,1 @@\n-void emit_cc(CodeBuffer &cbuf, int f1, int f2) {\n+void emit_cc(C2_MacroAssembler &masm, int f1, int f2) {\n@@ -522,1 +522,1 @@\n-  cbuf.insts()->emit_int8(c);\n+  masm.emit_int8(c);\n@@ -526,2 +526,2 @@\n-void emit_opcode(CodeBuffer &cbuf, int code) {\n-  cbuf.insts()->emit_int8((unsigned char) code);\n+void emit_opcode(C2_MacroAssembler &masm, int code) {\n+  masm.emit_int8((unsigned char) code);\n@@ -531,1 +531,1 @@\n-void emit_opcode(CodeBuffer &cbuf,\n+void emit_opcode(C2_MacroAssembler &masm,\n@@ -534,2 +534,2 @@\n-  cbuf.relocate(cbuf.insts_mark() + offset, reloc, format);\n-  emit_opcode(cbuf, code);\n+  masm.relocate(masm.inst_mark() + offset, reloc, format);\n+  emit_opcode(masm, code);\n@@ -539,2 +539,2 @@\n-void emit_d8(CodeBuffer &cbuf, int d8) {\n-  cbuf.insts()->emit_int8((unsigned char) d8);\n+void emit_d8(C2_MacroAssembler &masm, int d8) {\n+  masm.emit_int8((unsigned char) d8);\n@@ -544,2 +544,2 @@\n-void emit_d16(CodeBuffer &cbuf, int d16) {\n-  cbuf.insts()->emit_int16(d16);\n+void emit_d16(C2_MacroAssembler &masm, int d16) {\n+  masm.emit_int16(d16);\n@@ -549,2 +549,2 @@\n-void emit_d32(CodeBuffer &cbuf, int d32) {\n-  cbuf.insts()->emit_int32(d32);\n+void emit_d32(C2_MacroAssembler &masm, int d32) {\n+  masm.emit_int32(d32);\n@@ -554,2 +554,2 @@\n-void emit_d64(CodeBuffer &cbuf, int64_t d64) {\n-  cbuf.insts()->emit_int64(d64);\n+void emit_d64(C2_MacroAssembler &masm, int64_t d64) {\n+  masm.emit_int64(d64);\n@@ -559,1 +559,1 @@\n-void emit_d32_reloc(CodeBuffer& cbuf,\n+void emit_d32_reloc(C2_MacroAssembler &masm,\n@@ -565,2 +565,2 @@\n-  cbuf.relocate(cbuf.insts_mark(), reloc, format);\n-  cbuf.insts()->emit_int32(d32);\n+  masm.relocate(masm.inst_mark(), reloc, format);\n+  masm.emit_int32(d32);\n@@ -570,1 +570,1 @@\n-void emit_d32_reloc(CodeBuffer& cbuf, int d32, RelocationHolder const& rspec, int format) {\n+void emit_d32_reloc(C2_MacroAssembler &masm, int d32, RelocationHolder const& rspec, int format) {\n@@ -578,2 +578,2 @@\n-  cbuf.relocate(cbuf.insts_mark(), rspec, format);\n-  cbuf.insts()->emit_int32(d32);\n+  masm.relocate(masm.inst_mark(), rspec, format);\n+  masm.emit_int32(d32);\n@@ -582,3 +582,3 @@\n-void emit_d32_reloc(CodeBuffer& cbuf, address addr) {\n-  address next_ip = cbuf.insts_end() + 4;\n-  emit_d32_reloc(cbuf, (int) (addr - next_ip),\n+void emit_d32_reloc(C2_MacroAssembler &masm, address addr) {\n+  address next_ip = masm.pc() + 4;\n+  emit_d32_reloc(masm, (int) (addr - next_ip),\n@@ -589,1 +589,0 @@\n-\n@@ -591,3 +590,3 @@\n-void emit_d64_reloc(CodeBuffer& cbuf, int64_t d64, relocInfo::relocType reloc, int format) {\n-  cbuf.relocate(cbuf.insts_mark(), reloc, format);\n-  cbuf.insts()->emit_int64(d64);\n+void emit_d64_reloc(C2_MacroAssembler &masm, int64_t d64, relocInfo::relocType reloc, int format) {\n+  masm.relocate(masm.inst_mark(), reloc, format);\n+  masm.emit_int64(d64);\n@@ -597,1 +596,1 @@\n-void emit_d64_reloc(CodeBuffer& cbuf, int64_t d64, RelocationHolder const& rspec, int format) {\n+void emit_d64_reloc(C2_MacroAssembler &masm, int64_t d64, RelocationHolder const& rspec, int format) {\n@@ -605,2 +604,2 @@\n-  cbuf.relocate(cbuf.insts_mark(), rspec, format);\n-  cbuf.insts()->emit_int64(d64);\n+  masm.relocate(masm.inst_mark(), rspec, format);\n+  masm.emit_int64(d64);\n@@ -610,1 +609,1 @@\n-void store_to_stackslot(CodeBuffer &cbuf, int opcode, int rm_field, int disp)\n+void store_to_stackslot(C2_MacroAssembler &masm, int opcode, int rm_field, int disp)\n@@ -612,1 +611,1 @@\n-  emit_opcode(cbuf, opcode);                  \/\/ (e.g., FILD   [RSP+src])\n+  emit_opcode(masm, opcode);                  \/\/ (e.g., FILD   [RSP+src])\n@@ -614,3 +613,3 @@\n-    emit_rm(cbuf, 0x01, rm_field, RSP_enc);   \/\/ R\/M byte\n-    emit_rm(cbuf, 0x00, RSP_enc, RSP_enc);    \/\/ SIB byte\n-    emit_d8(cbuf, disp);     \/\/ Displacement  \/\/ R\/M byte\n+    emit_rm(masm, 0x01, rm_field, RSP_enc);   \/\/ R\/M byte\n+    emit_rm(masm, 0x00, RSP_enc, RSP_enc);    \/\/ SIB byte\n+    emit_d8(masm, disp);     \/\/ Displacement  \/\/ R\/M byte\n@@ -618,3 +617,3 @@\n-    emit_rm(cbuf, 0x02, rm_field, RSP_enc);   \/\/ R\/M byte\n-    emit_rm(cbuf, 0x00, RSP_enc, RSP_enc);    \/\/ SIB byte\n-    emit_d32(cbuf, disp);     \/\/ Displacement \/\/ R\/M byte\n+    emit_rm(masm, 0x02, rm_field, RSP_enc);   \/\/ R\/M byte\n+    emit_rm(masm, 0x00, RSP_enc, RSP_enc);    \/\/ SIB byte\n+    emit_d32(masm, disp);     \/\/ Displacement \/\/ R\/M byte\n@@ -625,1 +624,1 @@\n-void encode_RegMem(CodeBuffer &cbuf,\n+void encode_RegMem(C2_MacroAssembler &masm,\n@@ -638,1 +637,1 @@\n-      emit_rm(cbuf, 0x0, regenc, baseenc); \/\/ *\n+      emit_rm(masm, 0x0, regenc, baseenc); \/\/ *\n@@ -641,2 +640,2 @@\n-      emit_rm(cbuf, 0x1, regenc, baseenc); \/\/ *\n-      emit_d8(cbuf, disp);\n+      emit_rm(masm, 0x1, regenc, baseenc); \/\/ *\n+      emit_d8(masm, disp);\n@@ -646,1 +645,1 @@\n-        emit_rm(cbuf, 0x0, regenc, 0x5); \/\/ *\n+        emit_rm(masm, 0x0, regenc, 0x5); \/\/ *\n@@ -648,1 +647,1 @@\n-          emit_d32_reloc(cbuf, disp, relocInfo::oop_type, RELOC_DISP32);\n+          emit_d32_reloc(masm, disp, relocInfo::oop_type, RELOC_DISP32);\n@@ -650,1 +649,1 @@\n-          emit_d32(cbuf, disp);\n+          emit_d32(masm, disp);\n@@ -654,1 +653,1 @@\n-        emit_rm(cbuf, 0x2, regenc, baseenc); \/\/ *\n+        emit_rm(masm, 0x2, regenc, baseenc); \/\/ *\n@@ -656,1 +655,1 @@\n-          emit_d32_reloc(cbuf, disp, relocInfo::oop_type, RELOC_DISP32);\n+          emit_d32_reloc(masm, disp, relocInfo::oop_type, RELOC_DISP32);\n@@ -658,1 +657,1 @@\n-          emit_d32(cbuf, disp);\n+          emit_d32(masm, disp);\n@@ -667,2 +666,2 @@\n-      emit_rm(cbuf, 0x0, regenc, 0x4); \/\/ *\n-      emit_rm(cbuf, scale, indexenc, baseenc);\n+      emit_rm(masm, 0x0, regenc, 0x4); \/\/ *\n+      emit_rm(masm, scale, indexenc, baseenc);\n@@ -672,3 +671,3 @@\n-        emit_rm(cbuf, 0x1, regenc, 0x4); \/\/ *\n-        emit_rm(cbuf, scale, indexenc, baseenc);\n-        emit_d8(cbuf, disp);\n+        emit_rm(masm, 0x1, regenc, 0x4); \/\/ *\n+        emit_rm(masm, scale, indexenc, baseenc);\n+        emit_d8(masm, disp);\n@@ -678,2 +677,2 @@\n-          emit_rm(cbuf, 0x2, regenc, 0x4);\n-          emit_rm(cbuf, scale, indexenc, 0x04); \/\/ XXX is this valid???\n+          emit_rm(masm, 0x2, regenc, 0x4);\n+          emit_rm(masm, scale, indexenc, 0x04); \/\/ XXX is this valid???\n@@ -681,2 +680,2 @@\n-          emit_rm(cbuf, 0x2, regenc, 0x4);\n-          emit_rm(cbuf, scale, indexenc, baseenc); \/\/ *\n+          emit_rm(masm, 0x2, regenc, 0x4);\n+          emit_rm(masm, scale, indexenc, baseenc); \/\/ *\n@@ -685,1 +684,1 @@\n-          emit_d32_reloc(cbuf, disp, relocInfo::oop_type, RELOC_DISP32);\n+          emit_d32_reloc(masm, disp, relocInfo::oop_type, RELOC_DISP32);\n@@ -687,1 +686,1 @@\n-          emit_d32(cbuf, disp);\n+          emit_d32(masm, disp);\n@@ -695,1 +694,1 @@\n-void emit_cmpfp_fixup(MacroAssembler& _masm) {\n+void emit_cmpfp_fixup(MacroAssembler& masm) {\n@@ -697,2 +696,2 @@\n-  __ jccb(Assembler::noParity, exit);\n-  __ pushf();\n+  masm.jccb(Assembler::noParity, exit);\n+  masm.pushf();\n@@ -710,3 +709,3 @@\n-  __ andq(Address(rsp, 0), 0xffffff2b);\n-  __ popf();\n-  __ bind(exit);\n+  masm.andq(Address(rsp, 0), 0xffffff2b);\n+  masm.popf();\n+  masm.bind(exit);\n@@ -715,1 +714,1 @@\n-void emit_cmpfp3(MacroAssembler& _masm, Register dst) {\n+void emit_cmpfp3(MacroAssembler& masm, Register dst) {\n@@ -717,6 +716,6 @@\n-  __ movl(dst, -1);\n-  __ jcc(Assembler::parity, done);\n-  __ jcc(Assembler::below, done);\n-  __ setb(Assembler::notEqual, dst);\n-  __ movzbl(dst, dst);\n-  __ bind(done);\n+  masm.movl(dst, -1);\n+  masm.jcc(Assembler::parity, done);\n+  masm.jcc(Assembler::below, done);\n+  masm.setb(Assembler::notEqual, dst);\n+  masm.movzbl(dst, dst);\n+  masm.bind(done);\n@@ -734,1 +733,1 @@\n-void emit_fp_min_max(MacroAssembler& _masm, XMMRegister dst,\n+void emit_fp_min_max(MacroAssembler& masm, XMMRegister dst,\n@@ -819,1 +818,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n+void MachConstantBaseNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc* ra_) const {\n@@ -895,1 +894,1 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachPrologNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -897,1 +896,0 @@\n-  MacroAssembler _masm(&cbuf);\n@@ -909,2 +907,2 @@\n-    __ mov_metadata(klass, C->method()->holder()->constant_encoding());\n-    __ clinit_barrier(klass, r15_thread, &L_skip_barrier \/*L_fast_path*\/);\n+    masm.mov_metadata(klass, C->method()->holder()->constant_encoding());\n+    masm.clinit_barrier(klass, r15_thread, &L_skip_barrier \/*L_fast_path*\/);\n@@ -912,1 +910,1 @@\n-    __ jump(RuntimeAddress(SharedRuntime::get_handle_wrong_method_stub())); \/\/ slow path\n+    masm.jump(RuntimeAddress(SharedRuntime::get_handle_wrong_method_stub())); \/\/ slow path\n@@ -914,1 +912,1 @@\n-    __ bind(L_skip_barrier);\n+    masm.bind(L_skip_barrier);\n@@ -917,1 +915,1 @@\n-  __ verified_entry(framesize, C->output()->need_stack_bang(bangsize)?bangsize:0, false, C->stub_function() != NULL);\n+  masm.verified_entry(framesize, C->output()->need_stack_bang(bangsize)?bangsize:0, false, C->stub_function() != NULL);\n@@ -919,1 +917,1 @@\n-  C->output()->set_frame_complete(cbuf.insts_size());\n+  C->output()->set_frame_complete(masm.offset());\n@@ -971,1 +969,1 @@\n-void MachEpilogNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const\n+void MachEpilogNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc* ra_) const\n@@ -974,1 +972,0 @@\n-  MacroAssembler _masm(&cbuf);\n@@ -979,1 +976,1 @@\n-    __ vzeroupper();\n+    masm.vzeroupper();\n@@ -991,1 +988,1 @@\n-    emit_opcode(cbuf, Assembler::REX_W);\n+    emit_opcode(masm, Assembler::REX_W);\n@@ -993,3 +990,3 @@\n-      emit_opcode(cbuf, 0x83); \/\/ addq rsp, #framesize\n-      emit_rm(cbuf, 0x3, 0x00, RSP_enc);\n-      emit_d8(cbuf, framesize);\n+      emit_opcode(masm, 0x83); \/\/ addq rsp, #framesize\n+      emit_rm(masm, 0x3, 0x00, RSP_enc);\n+      emit_d8(masm, framesize);\n@@ -997,3 +994,3 @@\n-      emit_opcode(cbuf, 0x81); \/\/ addq rsp, #framesize\n-      emit_rm(cbuf, 0x3, 0x00, RSP_enc);\n-      emit_d32(cbuf, framesize);\n+      emit_opcode(masm, 0x81); \/\/ addq rsp, #framesize\n+      emit_rm(masm, 0x3, 0x00, RSP_enc);\n+      emit_d32(masm, framesize);\n@@ -1004,1 +1001,1 @@\n-  emit_opcode(cbuf, 0x58 | RBP_enc);\n+  emit_opcode(masm, 0x58 | RBP_enc);\n@@ -1007,1 +1004,1 @@\n-    __ reserved_stack_check();\n+    masm.reserved_stack_check();\n@@ -1011,1 +1008,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -1017,2 +1013,2 @@\n-    __ relocate(relocInfo::poll_return_type);\n-    __ safepoint_poll(*code_stub, r15_thread, true \/* at_return *\/, true \/* in_nmethod *\/);\n+    masm.relocate(relocInfo::poll_return_type);\n+    masm.safepoint_poll(*code_stub, r15_thread, true \/* at_return *\/, true \/* in_nmethod *\/);\n@@ -1065,1 +1061,1 @@\n-static void vec_mov_helper(CodeBuffer *cbuf, int src_lo, int dst_lo,\n+static void vec_mov_helper(MacroAssembler *masm, int src_lo, int dst_lo,\n@@ -1068,1 +1064,1 @@\n-void vec_spill_helper(CodeBuffer *cbuf, bool is_load,\n+void vec_spill_helper(MacroAssembler *masm, bool is_load,\n@@ -1071,1 +1067,1 @@\n-static void vec_stack_to_stack_helper(CodeBuffer *cbuf, int src_offset,\n+static void vec_stack_to_stack_helper(MacroAssembler *masm, int src_offset,\n@@ -1073,2 +1069,1 @@\n-  if (cbuf) {\n-    MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -1077,4 +1072,4 @@\n-      __ movq(Address(rsp, -8), rax);\n-      __ movl(rax, Address(rsp, src_offset));\n-      __ movl(Address(rsp, dst_offset), rax);\n-      __ movq(rax, Address(rsp, -8));\n+      masm->movq(Address(rsp, -8), rax);\n+      masm->movl(rax, Address(rsp, src_offset));\n+      masm->movl(Address(rsp, dst_offset), rax);\n+      masm->movq(rax, Address(rsp, -8));\n@@ -1083,2 +1078,2 @@\n-      __ pushq(Address(rsp, src_offset));\n-      __ popq (Address(rsp, dst_offset));\n+      masm->pushq(Address(rsp, src_offset));\n+      masm->popq (Address(rsp, dst_offset));\n@@ -1087,4 +1082,4 @@\n-      __ pushq(Address(rsp, src_offset));\n-      __ popq (Address(rsp, dst_offset));\n-      __ pushq(Address(rsp, src_offset+8));\n-      __ popq (Address(rsp, dst_offset+8));\n+      masm->pushq(Address(rsp, src_offset));\n+      masm->popq (Address(rsp, dst_offset));\n+      masm->pushq(Address(rsp, src_offset+8));\n+      masm->popq (Address(rsp, dst_offset+8));\n@@ -1093,4 +1088,4 @@\n-      __ vmovdqu(Address(rsp, -32), xmm0);\n-      __ vmovdqu(xmm0, Address(rsp, src_offset));\n-      __ vmovdqu(Address(rsp, dst_offset), xmm0);\n-      __ vmovdqu(xmm0, Address(rsp, -32));\n+      masm->vmovdqu(Address(rsp, -32), xmm0);\n+      masm->vmovdqu(xmm0, Address(rsp, src_offset));\n+      masm->vmovdqu(Address(rsp, dst_offset), xmm0);\n+      masm->vmovdqu(xmm0, Address(rsp, -32));\n@@ -1099,4 +1094,4 @@\n-      __ evmovdquq(Address(rsp, -64), xmm0, 2);\n-      __ evmovdquq(xmm0, Address(rsp, src_offset), 2);\n-      __ evmovdquq(Address(rsp, dst_offset), xmm0, 2);\n-      __ evmovdquq(xmm0, Address(rsp, -64), 2);\n+      masm->evmovdquq(Address(rsp, -64), xmm0, 2);\n+      masm->evmovdquq(xmm0, Address(rsp, src_offset), 2);\n+      masm->evmovdquq(Address(rsp, dst_offset), xmm0, 2);\n+      masm->evmovdquq(xmm0, Address(rsp, -64), 2);\n@@ -1150,1 +1145,1 @@\n-uint MachSpillCopyNode::implementation(CodeBuffer* cbuf,\n+uint MachSpillCopyNode::implementation(C2_MacroAssembler *masm,\n@@ -1154,1 +1149,1 @@\n-  assert(cbuf != NULL || st  != NULL, \"sanity\");\n+  assert(masm != NULL || st  != NULL, \"sanity\");\n@@ -1181,1 +1176,1 @@\n-      vec_stack_to_stack_helper(cbuf, src_offset, dst_offset, ireg, st);\n+      vec_stack_to_stack_helper(masm, src_offset, dst_offset, ireg, st);\n@@ -1183,1 +1178,1 @@\n-      vec_mov_helper(cbuf, src_first, dst_first, src_second, dst_second, ireg, st);\n+      vec_mov_helper(masm, src_first, dst_first, src_second, dst_second, ireg, st);\n@@ -1186,1 +1181,1 @@\n-      vec_spill_helper(cbuf, false, stack_offset, src_first, ireg, st);\n+      vec_spill_helper(masm, false, stack_offset, src_first, ireg, st);\n@@ -1189,1 +1184,1 @@\n-      vec_spill_helper(cbuf, true,  stack_offset, dst_first, ireg, st);\n+      vec_spill_helper(masm, true,  stack_offset, dst_first, ireg, st);\n@@ -1205,4 +1200,3 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ pushq(Address(rsp, src_offset));\n-          __ popq (Address(rsp, dst_offset));\n+        if (masm) {\n+          masm->pushq(Address(rsp, src_offset));\n+          masm->popq (Address(rsp, dst_offset));\n@@ -1223,6 +1217,5 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ movq(Address(rsp, -8), rax);\n-          __ movl(rax, Address(rsp, src_offset));\n-          __ movl(Address(rsp, dst_offset), rax);\n-          __ movq(rax, Address(rsp, -8));\n+        if (masm) {\n+          masm->movq(Address(rsp, -8), rax);\n+          masm->movl(rax, Address(rsp, src_offset));\n+          masm->movl(Address(rsp, dst_offset), rax);\n+          masm->movq(rax, Address(rsp, -8));\n@@ -1246,3 +1239,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ movq(as_Register(Matcher::_regEncode[dst_first]), Address(rsp, offset));\n+        if (masm) {\n+          masm->movq(as_Register(Matcher::_regEncode[dst_first]), Address(rsp, offset));\n@@ -1261,3 +1253,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ movl(as_Register(Matcher::_regEncode[dst_first]), Address(rsp, offset));\n+        if (masm) {\n+          masm->movl(as_Register(Matcher::_regEncode[dst_first]), Address(rsp, offset));\n@@ -1279,3 +1270,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ movdbl( as_XMMRegister(Matcher::_regEncode[dst_first]), Address(rsp, offset));\n+        if (masm) {\n+          masm->movdbl( as_XMMRegister(Matcher::_regEncode[dst_first]), Address(rsp, offset));\n@@ -1295,3 +1285,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ movflt( as_XMMRegister(Matcher::_regEncode[dst_first]), Address(rsp, offset));\n+        if (masm) {\n+          masm->movflt( as_XMMRegister(Matcher::_regEncode[dst_first]), Address(rsp, offset));\n@@ -1313,3 +1302,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ kmov(as_KRegister(Matcher::_regEncode[dst_first]), Address(rsp, offset));\n+        if (masm) {\n+          masm->kmov(as_KRegister(Matcher::_regEncode[dst_first]), Address(rsp, offset));\n@@ -1334,3 +1322,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ movq(Address(rsp, offset), as_Register(Matcher::_regEncode[src_first]));\n+        if (masm) {\n+          masm->movq(Address(rsp, offset), as_Register(Matcher::_regEncode[src_first]));\n@@ -1349,3 +1336,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ movl(Address(rsp, offset), as_Register(Matcher::_regEncode[src_first]));\n+        if (masm) {\n+          masm->movl(Address(rsp, offset), as_Register(Matcher::_regEncode[src_first]));\n@@ -1366,3 +1352,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ movq(as_Register(Matcher::_regEncode[dst_first]),\n+        if (masm) {\n+          masm->movq(as_Register(Matcher::_regEncode[dst_first]),\n@@ -1382,3 +1367,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ movl(as_Register(Matcher::_regEncode[dst_first]),\n+        if (masm) {\n+          masm->movl(as_Register(Matcher::_regEncode[dst_first]),\n@@ -1400,3 +1384,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ movdq( as_XMMRegister(Matcher::_regEncode[dst_first]), as_Register(Matcher::_regEncode[src_first]));\n+        if (masm) {\n+          masm->movdq( as_XMMRegister(Matcher::_regEncode[dst_first]), as_Register(Matcher::_regEncode[src_first]));\n@@ -1414,3 +1397,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ movdl( as_XMMRegister(Matcher::_regEncode[dst_first]), as_Register(Matcher::_regEncode[src_first]));\n+        if (masm) {\n+          masm->movdl( as_XMMRegister(Matcher::_regEncode[dst_first]), as_Register(Matcher::_regEncode[src_first]));\n@@ -1430,3 +1412,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ kmov(as_KRegister(Matcher::_regEncode[dst_first]), as_Register(Matcher::_regEncode[src_first]));\n+        if (masm) {\n+          masm->kmov(as_KRegister(Matcher::_regEncode[dst_first]), as_Register(Matcher::_regEncode[src_first]));\n@@ -1452,3 +1433,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ movdbl( Address(rsp, offset), as_XMMRegister(Matcher::_regEncode[src_first]));\n+        if (masm) {\n+          masm->movdbl( Address(rsp, offset), as_XMMRegister(Matcher::_regEncode[src_first]));\n@@ -1467,3 +1447,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ movflt(Address(rsp, offset), as_XMMRegister(Matcher::_regEncode[src_first]));\n+        if (masm) {\n+          masm->movflt(Address(rsp, offset), as_XMMRegister(Matcher::_regEncode[src_first]));\n@@ -1484,3 +1463,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ movdq( as_Register(Matcher::_regEncode[dst_first]), as_XMMRegister(Matcher::_regEncode[src_first]));\n+        if (masm) {\n+          masm->movdq( as_Register(Matcher::_regEncode[dst_first]), as_XMMRegister(Matcher::_regEncode[src_first]));\n@@ -1498,3 +1476,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ movdl( as_Register(Matcher::_regEncode[dst_first]), as_XMMRegister(Matcher::_regEncode[src_first]));\n+        if (masm) {\n+          masm->movdl( as_Register(Matcher::_regEncode[dst_first]), as_XMMRegister(Matcher::_regEncode[src_first]));\n@@ -1515,3 +1492,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ movdbl( as_XMMRegister(Matcher::_regEncode[dst_first]), as_XMMRegister(Matcher::_regEncode[src_first]));\n+        if (masm) {\n+          masm->movdbl( as_XMMRegister(Matcher::_regEncode[dst_first]), as_XMMRegister(Matcher::_regEncode[src_first]));\n@@ -1530,3 +1506,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ movflt( as_XMMRegister(Matcher::_regEncode[dst_first]), as_XMMRegister(Matcher::_regEncode[src_first]));\n+        if (masm) {\n+          masm->movflt( as_XMMRegister(Matcher::_regEncode[dst_first]), as_XMMRegister(Matcher::_regEncode[src_first]));\n@@ -1554,3 +1529,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ kmov(Address(rsp, offset), as_KRegister(Matcher::_regEncode[src_first]));\n+        if (masm) {\n+          masm->kmov(Address(rsp, offset), as_KRegister(Matcher::_regEncode[src_first]));\n@@ -1570,3 +1544,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ kmov(as_Register(Matcher::_regEncode[dst_first]), as_KRegister(Matcher::_regEncode[src_first]));\n+        if (masm) {\n+          masm->kmov(as_Register(Matcher::_regEncode[dst_first]), as_KRegister(Matcher::_regEncode[src_first]));\n@@ -1587,3 +1560,2 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n-          __ kmov(as_KRegister(Matcher::_regEncode[dst_first]), as_KRegister(Matcher::_regEncode[src_first]));\n+        if (masm) {\n+          masm->kmov(as_KRegister(Matcher::_regEncode[dst_first]), as_KRegister(Matcher::_regEncode[src_first]));\n@@ -1616,2 +1588,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation(&cbuf, ra_, false, NULL);\n+void MachSpillCopyNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n+  implementation(&masm, ra_, false, NULL);\n@@ -1635,1 +1607,1 @@\n-void BoxLockNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const\n+void BoxLockNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc* ra_) const\n@@ -1640,5 +1612,5 @@\n-    emit_opcode(cbuf, reg < 8 ? Assembler::REX_W : Assembler::REX_WR);\n-    emit_opcode(cbuf, 0x8D); \/\/ LEA  reg,[SP+offset]\n-    emit_rm(cbuf, 0x2, reg & 7, 0x04);\n-    emit_rm(cbuf, 0x0, 0x04, RSP_enc);\n-    emit_d32(cbuf, offset);\n+    emit_opcode(masm, reg < 8 ? Assembler::REX_W : Assembler::REX_WR);\n+    emit_opcode(masm, 0x8D); \/\/ LEA  reg,[SP+offset]\n+    emit_rm(masm, 0x2, reg & 7, 0x04);\n+    emit_rm(masm, 0x0, 0x04, RSP_enc);\n+    emit_d32(masm, offset);\n@@ -1646,5 +1618,5 @@\n-    emit_opcode(cbuf, reg < 8 ? Assembler::REX_W : Assembler::REX_WR);\n-    emit_opcode(cbuf, 0x8D); \/\/ LEA  reg,[SP+offset]\n-    emit_rm(cbuf, 0x1, reg & 7, 0x04);\n-    emit_rm(cbuf, 0x0, 0x04, RSP_enc);\n-    emit_d8(cbuf, offset);\n+    emit_opcode(masm, reg < 8 ? Assembler::REX_W : Assembler::REX_WR);\n+    emit_opcode(masm, 0x8D); \/\/ LEA  reg,[SP+offset]\n+    emit_rm(masm, 0x1, reg & 7, 0x04);\n+    emit_rm(masm, 0x0, 0x04, RSP_enc);\n+    emit_d8(masm, offset);\n@@ -1677,1 +1649,1 @@\n-void MachUEPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const\n+void MachUEPNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc* ra_) const\n@@ -1679,2 +1651,1 @@\n-  MacroAssembler masm(&cbuf);\n-  uint insts_size = cbuf.insts_size();\n+  uint insts_size = masm.offset();\n@@ -1692,1 +1663,1 @@\n-  int nops_cnt = 4 - ((cbuf.insts_size() - insts_size) & 0x3);\n+  int nops_cnt = 4 - ((masm.offset() - insts_size) & 0x3);\n@@ -1858,0 +1829,12 @@\n+  \/\/ Set instruction mark in MacroAssembler. This is used only in\n+  \/\/ instructions that emit bytes directly to the CodeBuffer wraped\n+  \/\/ in the MacroAssembler. Should go away once all \"instruct\" are\n+  \/\/ patched to emit bytes only using methods in MacroAssembler.\n+  enc_class SetInstMark %{\n+    __ set_inst_mark();\n+  %}\n+\n+  enc_class ClearInstMark %{\n+    __ clear_inst_mark();\n+  %}\n+\n@@ -1861,1 +1844,1 @@\n-    emit_opcode(cbuf, $primary);\n+    emit_opcode(masm, $primary);\n@@ -1867,1 +1850,1 @@\n-    emit_opcode(cbuf, $secondary);\n+    emit_opcode(masm, $secondary);\n@@ -1873,1 +1856,1 @@\n-    emit_opcode(cbuf, $tertiary);\n+    emit_opcode(masm, $tertiary);\n@@ -1879,1 +1862,1 @@\n-    emit_opcode(cbuf, $d8$$constant);\n+    emit_opcode(masm, $d8$$constant);\n@@ -1885,1 +1868,1 @@\n-    emit_opcode(cbuf, 0x66);\n+    emit_opcode(masm, 0x66);\n@@ -1890,1 +1873,1 @@\n-    emit_rm(cbuf, 0x3, 0, $reg$$reg & 7);\n+    emit_rm(masm, 0x3, 0, $reg$$reg & 7);\n@@ -1895,1 +1878,1 @@\n-    emit_rm(cbuf, 0x3, $dst$$reg & 7, $src$$reg & 7);\n+    emit_rm(masm, 0x3, $dst$$reg & 7, $src$$reg & 7);\n@@ -1900,2 +1883,2 @@\n-    emit_opcode(cbuf, $opcode$$constant);\n-    emit_rm(cbuf, 0x3, $dst$$reg & 7, $src$$reg & 7);\n+    emit_opcode(masm, $opcode$$constant);\n+    emit_rm(masm, 0x3, $dst$$reg & 7, $src$$reg & 7);\n@@ -1932,1 +1915,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -1988,1 +1970,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2027,1 +2008,1 @@\n-      emit_opcode(cbuf, $primary | 0x02);\n+      emit_opcode(masm, $primary | 0x02);\n@@ -2030,1 +2011,1 @@\n-      emit_opcode(cbuf, $primary);\n+      emit_opcode(masm, $primary);\n@@ -2039,1 +2020,1 @@\n-      emit_opcode(cbuf, Assembler::REX_B);\n+      emit_opcode(masm, Assembler::REX_B);\n@@ -2045,1 +2026,1 @@\n-      emit_opcode(cbuf, $primary | 0x02);\n+      emit_opcode(masm, $primary | 0x02);\n@@ -2048,1 +2029,1 @@\n-      emit_opcode(cbuf, $primary);\n+      emit_opcode(masm, $primary);\n@@ -2051,1 +2032,1 @@\n-    emit_rm(cbuf, 0x3, $secondary, dstenc);\n+    emit_rm(masm, 0x3, $secondary, dstenc);\n@@ -2059,1 +2040,1 @@\n-      emit_opcode(cbuf, Assembler::REX_W);\n+      emit_opcode(masm, Assembler::REX_W);\n@@ -2061,1 +2042,1 @@\n-      emit_opcode(cbuf, Assembler::REX_WB);\n+      emit_opcode(masm, Assembler::REX_WB);\n@@ -2067,1 +2048,1 @@\n-      emit_opcode(cbuf, $primary | 0x02);\n+      emit_opcode(masm, $primary | 0x02);\n@@ -2070,1 +2051,1 @@\n-      emit_opcode(cbuf, $primary);\n+      emit_opcode(masm, $primary);\n@@ -2073,1 +2054,1 @@\n-    emit_rm(cbuf, 0x3, $secondary, dstenc);\n+    emit_rm(masm, 0x3, $secondary, dstenc);\n@@ -2090,1 +2071,1 @@\n-    emit_cc(cbuf, $secondary, $dst$$reg);\n+    emit_cc(masm, $secondary, $dst$$reg);\n@@ -2096,1 +2077,1 @@\n-    emit_cc(cbuf, $tertiary, $dst$$reg);\n+    emit_cc(masm, $tertiary, $dst$$reg);\n@@ -2102,1 +2083,1 @@\n-    emit_rm(cbuf, 0x3, $secondary, $div$$reg & 7);\n+    emit_rm(masm, 0x3, $secondary, $div$$reg & 7);\n@@ -2109,1 +2090,1 @@\n-    emit_cc(cbuf, $secondary, $cop$$cmpcode);\n+    emit_cc(masm, $secondary, $cop$$cmpcode);\n@@ -2121,1 +2102,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2132,1 +2112,1 @@\n-    debug_only(int off0 = cbuf.insts_size());\n+    debug_only(int off0 = masm.offset());\n@@ -2137,1 +2117,0 @@\n-      MacroAssembler _masm(&cbuf);\n@@ -2140,1 +2119,1 @@\n-    debug_only(int off1 = cbuf.insts_size());\n+    debug_only(int off1 = masm.offset());\n@@ -2146,1 +2125,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2157,2 +2135,1 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n+    __ set_inst_mark();\n@@ -2162,1 +2139,1 @@\n-      emit_d32_reloc(cbuf, (int) ($meth$$method - ((intptr_t) cbuf.insts_end()) - 4),\n+      emit_d32_reloc(masm, (int) ($meth$$method - ((intptr_t) masm.pc()) - 4),\n@@ -2165,0 +2142,1 @@\n+      __ clear_inst_mark();\n@@ -2166,1 +2144,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -2169,1 +2147,1 @@\n-      emit_d32_reloc(cbuf, (int) ($meth$$method - ((intptr_t) cbuf.insts_end()) - 4),\n+      emit_d32_reloc(masm, (int) ($meth$$method - ((intptr_t) masm.pc()) - 4),\n@@ -2172,2 +2150,3 @@\n-      address mark = cbuf.insts_mark();\n-      address stub = CompiledStaticCall::emit_to_interp_stub(cbuf, mark);\n+      address mark = masm.inst_mark();\n+      address stub = CompiledStaticCall::emit_to_interp_stub(masm, mark);\n+      __ clear_inst_mark();\n@@ -2179,1 +2158,1 @@\n-    _masm.clear_inst_mark();\n+    __ clear_inst_mark();\n@@ -2184,2 +2163,1 @@\n-    MacroAssembler _masm(&cbuf);\n-    __ ic_call((address)$meth$$method, resolved_method_index(cbuf));\n+    __ ic_call((address)$meth$$method, resolved_method_index(masm));\n@@ -2194,1 +2172,1 @@\n-      emit_opcode(cbuf, Assembler::REX_B);\n+      emit_opcode(masm, Assembler::REX_B);\n@@ -2198,1 +2176,1 @@\n-    emit_rm(cbuf, 0x3, $secondary, dstenc);\n+    emit_rm(masm, 0x3, $secondary, dstenc);\n@@ -2207,1 +2185,1 @@\n-      emit_opcode(cbuf, Assembler::REX_W);\n+      emit_opcode(masm, Assembler::REX_W);\n@@ -2209,1 +2187,1 @@\n-      emit_opcode(cbuf, Assembler::REX_WB);\n+      emit_opcode(masm, Assembler::REX_WB);\n@@ -2213,1 +2191,1 @@\n-    emit_rm(cbuf, 0x3, $secondary, dstenc);\n+    emit_rm(masm, 0x3, $secondary, dstenc);\n@@ -2221,1 +2199,1 @@\n-      emit_opcode(cbuf, Assembler::REX_B);\n+      emit_opcode(masm, Assembler::REX_B);\n@@ -2224,1 +2202,1 @@\n-    emit_opcode(cbuf, 0xB8 | dstenc);\n+    emit_opcode(masm, 0xB8 | dstenc);\n@@ -2232,1 +2210,1 @@\n-      emit_opcode(cbuf, Assembler::REX_W);\n+      emit_opcode(masm, Assembler::REX_W);\n@@ -2234,1 +2212,1 @@\n-      emit_opcode(cbuf, Assembler::REX_WB);\n+      emit_opcode(masm, Assembler::REX_WB);\n@@ -2237,2 +2215,2 @@\n-    emit_opcode(cbuf, 0xB8 | dstenc);\n-    emit_d64(cbuf, $src$$constant);\n+    emit_opcode(masm, 0xB8 | dstenc);\n+    emit_d64(masm, $src$$constant);\n@@ -2246,1 +2224,1 @@\n-      emit_opcode(cbuf, Assembler::REX_B);\n+      emit_opcode(masm, Assembler::REX_B);\n@@ -2249,1 +2227,1 @@\n-    emit_opcode(cbuf, 0xB8 | dstenc);\n+    emit_opcode(masm, 0xB8 | dstenc);\n@@ -2257,1 +2235,1 @@\n-      emit_opcode(cbuf, Assembler::REX_W);\n+      emit_opcode(masm, Assembler::REX_W);\n@@ -2259,1 +2237,1 @@\n-      emit_opcode(cbuf, Assembler::REX_WB);\n+      emit_opcode(masm, Assembler::REX_WB);\n@@ -2262,2 +2240,2 @@\n-    emit_opcode(cbuf, 0xC7);\n-    emit_rm(cbuf, 0x03, 0x00, dstenc);\n+    emit_opcode(masm, 0xC7);\n+    emit_rm(masm, 0x03, 0x00, dstenc);\n@@ -2272,1 +2250,1 @@\n-      emit_opcode(cbuf, Assembler::REX_B);\n+      emit_opcode(masm, Assembler::REX_B);\n@@ -2275,1 +2253,1 @@\n-    emit_opcode(cbuf, 0xB8 | dstenc);\n+    emit_opcode(masm, 0xB8 | dstenc);\n@@ -2283,1 +2261,1 @@\n-      emit_opcode(cbuf, Assembler::REX_W);\n+      emit_opcode(masm, Assembler::REX_W);\n@@ -2285,1 +2263,1 @@\n-      emit_opcode(cbuf, Assembler::REX_WB);\n+      emit_opcode(masm, Assembler::REX_WB);\n@@ -2288,1 +2266,1 @@\n-    emit_opcode(cbuf, 0xB8 | dstenc);\n+    emit_opcode(masm, 0xB8 | dstenc);\n@@ -2291,1 +2269,1 @@\n-      emit_d64_reloc(cbuf, $src$$constant, $src->constant_reloc(), RELOC_IMM64);\n+      emit_d64_reloc(masm, $src$$constant, $src->constant_reloc(), RELOC_IMM64);\n@@ -2293,1 +2271,1 @@\n-      emit_d64(cbuf, $src$$constant);\n+      emit_d64(masm, $src$$constant);\n@@ -2308,1 +2286,1 @@\n-    emit_d32(cbuf, jf_as_bits);\n+    emit_d32(masm, jf_as_bits);\n@@ -2320,1 +2298,1 @@\n-    emit_d32(cbuf,$src$$constant);\n+    emit_d32(masm,$src$$constant);\n@@ -2325,2 +2303,2 @@\n-    emit_rm(cbuf, 0x00, $t1$$reg, 0x05 );\n-    emit_d32(cbuf, 0x00);\n+    emit_rm(masm, 0x00, $t1$$reg, 0x05 );\n+    emit_d32(masm, 0x00);\n@@ -2331,1 +2309,1 @@\n-    emit_opcode(cbuf, 0xF0); \/\/ lock\n+    emit_opcode(masm, 0xF0); \/\/ lock\n@@ -2338,1 +2316,1 @@\n-        emit_opcode(cbuf, Assembler::REX_B);\n+        emit_opcode(masm, Assembler::REX_B);\n@@ -2340,1 +2318,1 @@\n-        emit_opcode(cbuf, Assembler::REX_XB);\n+        emit_opcode(masm, Assembler::REX_XB);\n@@ -2344,1 +2322,1 @@\n-        emit_opcode(cbuf, Assembler::REX_X);\n+        emit_opcode(masm, Assembler::REX_X);\n@@ -2353,1 +2331,1 @@\n-        emit_opcode(cbuf, Assembler::REX_WB);\n+        emit_opcode(masm, Assembler::REX_WB);\n@@ -2355,1 +2333,1 @@\n-        emit_opcode(cbuf, Assembler::REX_WXB);\n+        emit_opcode(masm, Assembler::REX_WXB);\n@@ -2359,1 +2337,1 @@\n-        emit_opcode(cbuf, Assembler::REX_W);\n+        emit_opcode(masm, Assembler::REX_W);\n@@ -2361,1 +2339,1 @@\n-        emit_opcode(cbuf, Assembler::REX_WX);\n+        emit_opcode(masm, Assembler::REX_WX);\n@@ -2370,1 +2348,1 @@\n-      emit_opcode(cbuf, $reg$$reg < 8 ? Assembler::REX : Assembler::REX_B);\n+      emit_opcode(masm, $reg$$reg < 8 ? Assembler::REX : Assembler::REX_B);\n@@ -2379,1 +2357,1 @@\n-        emit_opcode(cbuf, $src$$reg < 8 ? Assembler::REX : Assembler::REX_B);\n+        emit_opcode(masm, $src$$reg < 8 ? Assembler::REX : Assembler::REX_B);\n@@ -2383,1 +2361,1 @@\n-        emit_opcode(cbuf, Assembler::REX_R);\n+        emit_opcode(masm, Assembler::REX_R);\n@@ -2385,1 +2363,1 @@\n-        emit_opcode(cbuf, Assembler::REX_RB);\n+        emit_opcode(masm, Assembler::REX_RB);\n@@ -2396,1 +2374,1 @@\n-          emit_opcode(cbuf, Assembler::REX_X);\n+          emit_opcode(masm, Assembler::REX_X);\n@@ -2398,1 +2376,1 @@\n-          emit_opcode(cbuf, Assembler::REX);\n+          emit_opcode(masm, Assembler::REX);\n@@ -2402,1 +2380,1 @@\n-          emit_opcode(cbuf, Assembler::REX_B);\n+          emit_opcode(masm, Assembler::REX_B);\n@@ -2404,1 +2382,1 @@\n-          emit_opcode(cbuf, Assembler::REX_XB);\n+          emit_opcode(masm, Assembler::REX_XB);\n@@ -2410,1 +2388,1 @@\n-          emit_opcode(cbuf, Assembler::REX_R);\n+          emit_opcode(masm, Assembler::REX_R);\n@@ -2412,1 +2390,1 @@\n-          emit_opcode(cbuf, Assembler::REX_RX);\n+          emit_opcode(masm, Assembler::REX_RX);\n@@ -2416,1 +2394,1 @@\n-          emit_opcode(cbuf, Assembler::REX_RB);\n+          emit_opcode(masm, Assembler::REX_RB);\n@@ -2418,1 +2396,1 @@\n-          emit_opcode(cbuf, Assembler::REX_RXB);\n+          emit_opcode(masm, Assembler::REX_RXB);\n@@ -2427,1 +2405,1 @@\n-      emit_opcode(cbuf, Assembler::REX_B);\n+      emit_opcode(masm, Assembler::REX_B);\n@@ -2434,1 +2412,1 @@\n-      emit_opcode(cbuf, Assembler::REX_W);\n+      emit_opcode(masm, Assembler::REX_W);\n@@ -2436,1 +2414,1 @@\n-      emit_opcode(cbuf, Assembler::REX_WB);\n+      emit_opcode(masm, Assembler::REX_WB);\n@@ -2444,1 +2422,1 @@\n-        emit_opcode(cbuf, Assembler::REX_B);\n+        emit_opcode(masm, Assembler::REX_B);\n@@ -2448,1 +2426,1 @@\n-        emit_opcode(cbuf, Assembler::REX_R);\n+        emit_opcode(masm, Assembler::REX_R);\n@@ -2450,1 +2428,1 @@\n-        emit_opcode(cbuf, Assembler::REX_RB);\n+        emit_opcode(masm, Assembler::REX_RB);\n@@ -2459,1 +2437,1 @@\n-        emit_opcode(cbuf, Assembler::REX_W);\n+        emit_opcode(masm, Assembler::REX_W);\n@@ -2461,1 +2439,1 @@\n-        emit_opcode(cbuf, Assembler::REX_WB);\n+        emit_opcode(masm, Assembler::REX_WB);\n@@ -2465,1 +2443,1 @@\n-        emit_opcode(cbuf, Assembler::REX_WR);\n+        emit_opcode(masm, Assembler::REX_WR);\n@@ -2467,1 +2445,1 @@\n-        emit_opcode(cbuf, Assembler::REX_WRB);\n+        emit_opcode(masm, Assembler::REX_WRB);\n@@ -2477,1 +2455,1 @@\n-          emit_opcode(cbuf, Assembler::REX_X);\n+          emit_opcode(masm, Assembler::REX_X);\n@@ -2481,1 +2459,1 @@\n-          emit_opcode(cbuf, Assembler::REX_B);\n+          emit_opcode(masm, Assembler::REX_B);\n@@ -2483,1 +2461,1 @@\n-          emit_opcode(cbuf, Assembler::REX_XB);\n+          emit_opcode(masm, Assembler::REX_XB);\n@@ -2489,1 +2467,1 @@\n-          emit_opcode(cbuf, Assembler::REX_R);\n+          emit_opcode(masm, Assembler::REX_R);\n@@ -2491,1 +2469,1 @@\n-          emit_opcode(cbuf, Assembler::REX_RX);\n+          emit_opcode(masm, Assembler::REX_RX);\n@@ -2495,1 +2473,1 @@\n-          emit_opcode(cbuf, Assembler::REX_RB);\n+          emit_opcode(masm, Assembler::REX_RB);\n@@ -2497,1 +2475,1 @@\n-          emit_opcode(cbuf, Assembler::REX_RXB);\n+          emit_opcode(masm, Assembler::REX_RXB);\n@@ -2508,1 +2486,1 @@\n-          emit_opcode(cbuf, Assembler::REX_W);\n+          emit_opcode(masm, Assembler::REX_W);\n@@ -2510,1 +2488,1 @@\n-          emit_opcode(cbuf, Assembler::REX_WX);\n+          emit_opcode(masm, Assembler::REX_WX);\n@@ -2514,1 +2492,1 @@\n-          emit_opcode(cbuf, Assembler::REX_WB);\n+          emit_opcode(masm, Assembler::REX_WB);\n@@ -2516,1 +2494,1 @@\n-          emit_opcode(cbuf, Assembler::REX_WXB);\n+          emit_opcode(masm, Assembler::REX_WXB);\n@@ -2522,1 +2500,1 @@\n-          emit_opcode(cbuf, Assembler::REX_WR);\n+          emit_opcode(masm, Assembler::REX_WR);\n@@ -2524,1 +2502,1 @@\n-          emit_opcode(cbuf, Assembler::REX_WRX);\n+          emit_opcode(masm, Assembler::REX_WRX);\n@@ -2528,1 +2506,1 @@\n-          emit_opcode(cbuf, Assembler::REX_WRB);\n+          emit_opcode(masm, Assembler::REX_WRB);\n@@ -2530,1 +2508,1 @@\n-          emit_opcode(cbuf, Assembler::REX_WRXB);\n+          emit_opcode(masm, Assembler::REX_WRXB);\n@@ -2546,1 +2524,1 @@\n-    encode_RegMem(cbuf, reg, base, index, scale, disp, disp_reloc);\n+    encode_RegMem(masm, reg, base, index, scale, disp, disp_reloc);\n@@ -2562,1 +2540,1 @@\n-    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace,\n+    encode_RegMem(masm, rm_byte_opcode, base, index, scale, displace,\n@@ -2574,1 +2552,1 @@\n-    encode_RegMem(cbuf, reg_encoding, base, index, scale, displace,\n+    encode_RegMem(masm, reg_encoding, base, index, scale, displace,\n@@ -2582,1 +2560,1 @@\n-      emit_opcode(cbuf, Assembler::REX_B);\n+      emit_opcode(masm, Assembler::REX_B);\n@@ -2586,2 +2564,2 @@\n-    emit_opcode(cbuf, 0xF7);\n-    emit_rm(cbuf, 0x3, 0x03, dstenc);\n+    emit_opcode(masm, 0xF7);\n+    emit_rm(masm, 0x3, 0x03, dstenc);\n@@ -2594,1 +2572,1 @@\n-      emit_opcode(cbuf, Assembler::REX_W);\n+      emit_opcode(masm, Assembler::REX_W);\n@@ -2596,1 +2574,1 @@\n-      emit_opcode(cbuf, Assembler::REX_WB);\n+      emit_opcode(masm, Assembler::REX_WB);\n@@ -2600,2 +2578,2 @@\n-    emit_opcode(cbuf, 0xF7);\n-    emit_rm(cbuf, 0x3, 0x03, dstenc);\n+    emit_opcode(masm, 0xF7);\n+    emit_rm(masm, 0x3, 0x03, dstenc);\n@@ -2608,1 +2586,1 @@\n-      emit_opcode(cbuf, Assembler::REX_B);\n+      emit_opcode(masm, Assembler::REX_B);\n@@ -2611,1 +2589,1 @@\n-      emit_opcode(cbuf, Assembler::REX);\n+      emit_opcode(masm, Assembler::REX);\n@@ -2614,3 +2592,3 @@\n-    emit_opcode(cbuf, 0x0F);\n-    emit_opcode(cbuf, 0x9C);\n-    emit_rm(cbuf, 0x3, 0x0, dstenc);\n+    emit_opcode(masm, 0x0F);\n+    emit_opcode(masm, 0x9C);\n+    emit_rm(masm, 0x3, 0x0, dstenc);\n@@ -2623,1 +2601,1 @@\n-      emit_opcode(cbuf, Assembler::REX_B);\n+      emit_opcode(masm, Assembler::REX_B);\n@@ -2626,1 +2604,1 @@\n-      emit_opcode(cbuf, Assembler::REX);\n+      emit_opcode(masm, Assembler::REX);\n@@ -2629,3 +2607,3 @@\n-    emit_opcode(cbuf, 0x0F);\n-    emit_opcode(cbuf, 0x95);\n-    emit_rm(cbuf, 0x3, 0x0, dstenc);\n+    emit_opcode(masm, 0x0F);\n+    emit_opcode(masm, 0x95);\n+    emit_rm(masm, 0x3, 0x0, dstenc);\n@@ -2645,1 +2623,1 @@\n-        emit_opcode(cbuf, Assembler::REX_W);\n+        emit_opcode(masm, Assembler::REX_W);\n@@ -2647,1 +2625,1 @@\n-        emit_opcode(cbuf, Assembler::REX_WB);\n+        emit_opcode(masm, Assembler::REX_WB);\n@@ -2651,1 +2629,1 @@\n-        emit_opcode(cbuf, Assembler::REX_WR);\n+        emit_opcode(masm, Assembler::REX_WR);\n@@ -2653,1 +2631,1 @@\n-        emit_opcode(cbuf, Assembler::REX_WRB);\n+        emit_opcode(masm, Assembler::REX_WRB);\n@@ -2656,2 +2634,2 @@\n-    emit_opcode(cbuf, 0x3B);\n-    emit_rm(cbuf, 0x3, src1enc & 7, src2enc & 7);\n+    emit_opcode(masm, 0x3B);\n+    emit_rm(masm, 0x3, src1enc & 7, src2enc & 7);\n@@ -2661,1 +2639,1 @@\n-      emit_opcode(cbuf, Assembler::REX_B);\n+      emit_opcode(masm, Assembler::REX_B);\n@@ -2663,2 +2641,2 @@\n-    emit_opcode(cbuf, 0xB8 | (dstenc & 7));\n-    emit_d32(cbuf, -1);\n+    emit_opcode(masm, 0xB8 | (dstenc & 7));\n+    emit_d32(masm, -1);\n@@ -2667,2 +2645,2 @@\n-    emit_opcode(cbuf, 0x7C);\n-    emit_d8(cbuf, dstenc < 4 ? 0x06 : 0x08);\n+    emit_opcode(masm, 0x7C);\n+    emit_d8(masm, dstenc < 4 ? 0x06 : 0x08);\n@@ -2672,1 +2650,1 @@\n-      emit_opcode(cbuf, dstenc < 8 ? Assembler::REX : Assembler::REX_B);\n+      emit_opcode(masm, dstenc < 8 ? Assembler::REX : Assembler::REX_B);\n@@ -2674,3 +2652,3 @@\n-    emit_opcode(cbuf, 0x0F);\n-    emit_opcode(cbuf, 0x95);\n-    emit_opcode(cbuf, 0xC0 | (dstenc & 7));\n+    emit_opcode(masm, 0x0F);\n+    emit_opcode(masm, 0x95);\n+    emit_opcode(masm, 0xC0 | (dstenc & 7));\n@@ -2680,1 +2658,1 @@\n-      emit_opcode(cbuf, dstenc < 8 ? Assembler::REX : Assembler::REX_RB);\n+      emit_opcode(masm, dstenc < 8 ? Assembler::REX : Assembler::REX_RB);\n@@ -2682,3 +2660,3 @@\n-    emit_opcode(cbuf, 0x0F);\n-    emit_opcode(cbuf, 0xB6);\n-    emit_rm(cbuf, 0x3, dstenc & 7, dstenc & 7);\n+    emit_opcode(masm, 0x0F);\n+    emit_opcode(masm, 0xB6);\n+    emit_rm(masm, 0x3, dstenc & 7, dstenc & 7);\n@@ -2688,1 +2666,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2695,1 +2672,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2701,1 +2677,0 @@\n-\n@@ -2704,4 +2679,4 @@\n-    cbuf.set_insts_mark();\n-    emit_opcode(cbuf, 0xE9); \/\/ jmp entry\n-    emit_d32_reloc(cbuf,\n-                   (int) (OptoRuntime::rethrow_stub() - cbuf.insts_end() - 4),\n+    masm.set_inst_mark();\n+    emit_opcode(masm, 0xE9); \/\/ jmp entry\n+    emit_d32_reloc(masm,\n+                   (int) (OptoRuntime::rethrow_stub() - masm.pc() - 4),\n@@ -2710,0 +2685,1 @@\n+    masm.clear_inst_mark();\n@@ -5394,1 +5370,1 @@\n-    emit_fp_min_max(_masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n+    emit_fp_min_max(masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n@@ -5430,1 +5406,1 @@\n-    emit_fp_min_max(_masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n+    emit_fp_min_max(masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n@@ -5466,1 +5442,1 @@\n-    emit_fp_min_max(_masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n+    emit_fp_min_max(masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n@@ -5502,1 +5478,1 @@\n-    emit_fp_min_max(_masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n+    emit_fp_min_max(masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n@@ -5913,1 +5889,1 @@\n-  ins_encode(REX_reg_mem(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode(SetInstMark, REX_reg_mem(dst, src), OpcP, reg_mem(dst, src), ClearInstMark);\n@@ -5924,1 +5900,1 @@\n-  ins_encode(REX_reg_mem_wide(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode(SetInstMark, REX_reg_mem_wide(dst, src), OpcP, reg_mem(dst, src), ClearInstMark);\n@@ -5935,1 +5911,1 @@\n-  ins_encode(REX_reg_mem_wide(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode(SetInstMark, REX_reg_mem_wide(dst, src), OpcP, reg_mem(dst, src), ClearInstMark);\n@@ -6392,1 +6368,1 @@\n-  ins_encode(REX_reg_mem(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode(SetInstMark, REX_reg_mem(src, dst), OpcP, reg_mem(src, dst), ClearInstMark);\n@@ -6403,1 +6379,1 @@\n-  ins_encode(REX_reg_mem_wide(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode(SetInstMark, REX_reg_mem_wide(src, dst), OpcP, reg_mem(src, dst), ClearInstMark);\n@@ -6414,1 +6390,1 @@\n-  ins_encode(REX_reg_mem_wide(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode(SetInstMark, REX_reg_mem_wide(src, dst), OpcP, reg_mem(src, dst), ClearInstMark);\n@@ -8063,1 +8039,2 @@\n-  ins_encode(lock_prefix,\n+  ins_encode(SetInstMark,\n+             lock_prefix,\n@@ -8066,1 +8043,2 @@\n-             reg_mem(newval, mem));\n+             reg_mem(newval, mem),\n+             ClearInstMark);\n@@ -8654,1 +8632,1 @@\n-  ins_encode(REX_reg_reg_wide(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode(SetInstMark, REX_reg_reg_wide(dst, src), OpcP, reg_reg(dst, src), ClearInstMark);\n@@ -11021,1 +10999,1 @@\n-    emit_cmpfp_fixup(_masm);\n+    emit_cmpfp_fixup(masm);\n@@ -11072,1 +11050,1 @@\n-    emit_cmpfp_fixup(_masm);\n+    emit_cmpfp_fixup(masm);\n@@ -11125,1 +11103,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -11146,1 +11124,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -11166,1 +11144,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -11187,1 +11165,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -11208,1 +11186,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -11228,1 +11206,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":379,"deletions":401,"binary":false,"changes":780,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_ZERO_C2_MACROASSEMBLER_ZERO_HPP\n+#define CPU_ZERO_C2_MACROASSEMBLER_ZERO_HPP\n+\n+\/\/ C2_MacroAssembler contains high-level macros for C2\n+\n+#endif \/\/ CPU_ZERO_C2_MACROASSEMBLER_ZERO_HPP\n","filename":"src\/hotspot\/cpu\/zero\/c2_MacroAssembler_zero.hpp","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -46,1 +46,1 @@\n-address CompiledStaticCall::emit_to_interp_stub(CodeBuffer &cbuf, address mark) {\n+address CompiledStaticCall::emit_to_interp_stub(MacroAssembler &masm, address mark) {\n","filename":"src\/hotspot\/cpu\/zero\/compiledIC_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2825,8 +2825,0 @@\n-  if (!inst._is_postalloc_expand) {\n-    \/\/ Define a MacroAssembler instance for use by the encoding.  The\n-    \/\/ name is chosen to match the __ idiom used for assembly in other\n-    \/\/ parts of hotspot and assumes the existence of the standard\n-    \/\/ #define __ _masm.\n-    encoding->add_code(\"    C2_MacroAssembler _masm(&cbuf);\\n\");\n-  }\n-\n","filename":"src\/hotspot\/share\/adlc\/adlparse.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1819,1 +1819,1 @@\n-\/\/ (1) void  ___Node::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+\/\/ (1) void  ___Node::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -2218,1 +2218,1 @@\n-        fprintf( _fp, \"emit_%s(cbuf, \", d32_hi_lo );\n+        fprintf( _fp, \"emit_%s(masm, \", d32_hi_lo );\n@@ -2232,1 +2232,1 @@\n-        fprintf(_fp,\"emit_%s_reloc(cbuf, \", d32_hi_lo );\n+        fprintf(_fp,\"emit_%s_reloc(masm, \", d32_hi_lo );\n@@ -2239,1 +2239,1 @@\n-        fprintf(_fp,\"  emit_%s(cbuf, \", d32_hi_lo);\n+        fprintf(_fp,\"  emit_%s(masm, \", d32_hi_lo);\n@@ -2245,1 +2245,1 @@\n-      fprintf(_fp,\"emit_d16(cbuf, \");\n+      fprintf(_fp,\"emit_d16(masm, \");\n@@ -2251,1 +2251,1 @@\n-      fprintf(_fp,\"emit_d8(cbuf, \");\n+      fprintf(_fp,\"emit_d8(masm, \");\n@@ -2589,1 +2589,1 @@\n-  fprintf(fp, \"void %sNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\\n\", inst._ident);\n+  fprintf(fp, \"void %sNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc* ra_) const {\\n\", inst._ident);\n@@ -2599,3 +2599,0 @@\n-  \/\/ Save current instruction's starting address (helps with relocation).\n-  fprintf(fp, \"  cbuf.set_insts_mark();\\n\");\n-\n@@ -2604,1 +2601,1 @@\n-    fprintf(fp, \"  ra_->C->output()->constant_table().fill_jump_table(cbuf, (MachConstantNode*) this, _index2label);\\n\");\n+    fprintf(fp, \"  ra_->C->output()->constant_table().fill_jump_table(masm, (MachConstantNode*) this, _index2label);\\n\");\n","filename":"src\/hotspot\/share\/adlc\/output_c.cpp","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1632,1 +1632,1 @@\n-        fprintf(fp,\"  virtual void           emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\\n\");\n+        fprintf(fp,\"  virtual void           emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const;\\n\");\n","filename":"src\/hotspot\/share\/adlc\/output_h.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -336,3 +336,6 @@\n-  address       inst_mark() const { return code_section()->mark();       }\n-  void      set_inst_mark()       {        code_section()->set_mark();   }\n-  void    clear_inst_mark()       {        code_section()->clear_mark(); }\n+  address       inst_mark() const         { return code_section()->mark();          }\n+  void      set_inst_mark()               {        code_section()->set_mark();      }\n+  void      set_inst_mark(address addr)   {        code_section()->set_mark(addr);  }\n+  void    clear_inst_mark()               {        code_section()->clear_mark();    }\n+\n+  void set_inst_end(address addr)         {        code_section()->set_end(addr);   }\n@@ -349,0 +352,6 @@\n+  }\n+  void relocate(address addr, relocInfo::relocType rtype, int format = 0) {\n+    code_section()->relocate(addr, rtype, format);\n+  }\n+  void relocate(address addr, RelocationHolder const& rspec, int format = 0) {\n+    code_section()->relocate(addr, rspec, format);\n","filename":"src\/hotspot\/share\/asm\/assembler.hpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"opto\/c2_MacroAssembler.hpp\"\n@@ -341,1 +342,1 @@\n-  static address emit_to_interp_stub(CodeBuffer &cbuf, address mark = NULL);\n+  static address emit_to_interp_stub(MacroAssembler &masm, address mark = NULL);\n","filename":"src\/hotspot\/share\/code\/compiledIC.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1152,1 +1152,2 @@\n-      CompiledStaticCall::emit_to_interp_stub(buffer, _instructions->start() + pc_offset);\n+      C2_MacroAssembler masm(&buffer);\n+      CompiledStaticCall::emit_to_interp_stub(masm, _instructions->start() + pc_offset);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -615,1 +615,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const { }\n+  virtual void emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const { }\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,2 +124,1 @@\n-bool ConstantTable::emit(CodeBuffer& cb) const {\n-  MacroAssembler _masm(&cb);\n+bool ConstantTable::emit(C2_MacroAssembler& masm) const {\n@@ -130,1 +129,1 @@\n-      constant_addr = _masm.array_constant(con.type(), con.get_array());\n+      constant_addr = masm.array_constant(con.type(), con.get_array());\n@@ -133,4 +132,4 @@\n-      case T_INT:    constant_addr = _masm.int_constant(   con.get_jint()   ); break;\n-      case T_LONG:   constant_addr = _masm.long_constant(  con.get_jlong()  ); break;\n-      case T_FLOAT:  constant_addr = _masm.float_constant( con.get_jfloat() ); break;\n-      case T_DOUBLE: constant_addr = _masm.double_constant(con.get_jdouble()); break;\n+      case T_INT:    constant_addr = masm.int_constant(   con.get_jint()   ); break;\n+      case T_LONG:   constant_addr = masm.long_constant(  con.get_jlong()  ); break;\n+      case T_FLOAT:  constant_addr = masm.float_constant( con.get_jfloat() ); break;\n+      case T_DOUBLE: constant_addr = masm.double_constant(con.get_jdouble()); break;\n@@ -139,2 +138,2 @@\n-        int oop_index = _masm.oop_recorder()->find_index(obj);\n-        constant_addr = _masm.address_constant((address) obj, oop_Relocation::spec(oop_index));\n+        int oop_index = masm.oop_recorder()->find_index(obj);\n+        constant_addr = masm.address_constant((address) obj, oop_Relocation::spec(oop_index));\n@@ -145,1 +144,1 @@\n-        constant_addr = _masm.address_constant(addr);\n+        constant_addr = masm.address_constant(addr);\n@@ -155,1 +154,1 @@\n-        constant_addr = _masm.address_constant(dummy);\n+        constant_addr = masm.address_constant(dummy);\n@@ -159,2 +158,2 @@\n-        assert((constant_addr - _masm.code()->consts()->start()) == con.offset(),\n-              \"must be: %d == %d\", (int)(constant_addr - _masm.code()->consts()->start()), (int)(con.offset()));\n+        assert((constant_addr - masm.code()->consts()->start()) == con.offset(),\n+              \"must be: %d == %d\", (int)(constant_addr - masm.code()->consts()->start()), (int)(con.offset()));\n@@ -165,1 +164,1 @@\n-          last_addr = _masm.address_constant(dummy + j);\n+          last_addr = masm.address_constant(dummy + j);\n@@ -171,1 +170,1 @@\n-        address start = _masm.code()->consts()->start();\n+        address start = masm.code()->consts()->start();\n@@ -183,2 +182,2 @@\n-        int metadata_index = _masm.oop_recorder()->find_index(obj);\n-        constant_addr = _masm.address_constant((address) obj, metadata_Relocation::spec(metadata_index));\n+        int metadata_index = masm.oop_recorder()->find_index(obj);\n+        constant_addr = masm.address_constant((address) obj, metadata_Relocation::spec(metadata_index));\n@@ -194,2 +193,2 @@\n-    assert((constant_addr - _masm.code()->consts()->start()) == con.offset(),\n-            \"must be: %d == %d\", (int)(constant_addr - _masm.code()->consts()->start()), (int)(con.offset()));\n+    assert((constant_addr - masm.code()->consts()->start()) == con.offset(),\n+            \"must be: %d == %d\", (int)(constant_addr - masm.code()->consts()->start()), (int)(con.offset()));\n@@ -265,1 +264,1 @@\n-void ConstantTable::fill_jump_table(CodeBuffer& cb, MachConstantNode* n, GrowableArray<Label*> labels) const {\n+void ConstantTable::fill_jump_table(C2_MacroAssembler& masm, MachConstantNode* n, GrowableArray<Label*> labels) const {\n@@ -277,2 +276,1 @@\n-  MacroAssembler _masm(&cb);\n-  address* jump_table_base = (address*) (_masm.code()->consts()->start() + offset);\n+  address* jump_table_base = (address*) (masm.code()->consts()->start() + offset);\n@@ -283,2 +281,2 @@\n-    *constant_addr = cb.consts()->target(*labels.at(i), (address) constant_addr);\n-    cb.consts()->relocate((address) constant_addr, relocInfo::internal_word_type);\n+    *constant_addr = masm.code()->consts()->target(*labels.at(i), (address) constant_addr);\n+    masm.code()->consts()->relocate((address) constant_addr, relocInfo::internal_word_type);\n","filename":"src\/hotspot\/share\/opto\/constantTable.cpp","additions":22,"deletions":24,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+class C2_MacroAssembler;\n@@ -136,1 +137,1 @@\n-  bool emit(CodeBuffer& cb) const;\n+  bool emit(C2_MacroAssembler& masm) const;\n@@ -168,1 +169,1 @@\n-  void     fill_jump_table(CodeBuffer& cb, MachConstantNode* n, GrowableArray<Label*> labels) const;\n+  void     fill_jump_table(C2_MacroAssembler& masm, MachConstantNode* n, GrowableArray<Label*> labels) const;\n","filename":"src\/hotspot\/share\/opto\/constantTable.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const;\n","filename":"src\/hotspot\/share\/opto\/locknode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-void MachNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n@@ -571,1 +571,1 @@\n-void MachNullCheckNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachNullCheckNode::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {\n","filename":"src\/hotspot\/share\/opto\/machnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"opto\/c2_MacroAssembler.hpp\"\n@@ -280,2 +281,2 @@\n-  \/\/ Emit bytes into cbuf\n-  virtual void  emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  \/\/ Emit machine instructions\n+  virtual void  emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const;\n@@ -417,1 +418,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const;\n@@ -443,1 +444,1 @@\n-  virtual void emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const;\n+  virtual void emit(C2_MacroAssembler &masm, PhaseRegAlloc* ra_) const;\n@@ -494,1 +495,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const;\n@@ -508,1 +509,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const;\n@@ -523,1 +524,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const;\n@@ -548,1 +549,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const;\n@@ -606,1 +607,1 @@\n-  uint implementation( CodeBuffer *cbuf, PhaseRegAlloc *ra_, bool do_size, outputStream* st ) const;\n+  uint implementation(C2_MacroAssembler *masm, PhaseRegAlloc *ra_, bool do_size, outputStream* st ) const;\n@@ -608,1 +609,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const;\n@@ -671,1 +672,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const { }\n+  virtual void emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const { }\n@@ -711,1 +712,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const;\n@@ -942,1 +943,1 @@\n-  int resolved_method_index(CodeBuffer &cbuf) const {\n+  int resolved_method_index(C2_MacroAssembler &masm) const {\n@@ -948,1 +949,1 @@\n-      return cbuf.oop_recorder()->find_index(_method->constant_encoding());\n+      return masm.oop_recorder()->find_index(_method->constant_encoding());\n@@ -1053,1 +1054,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {}\n+  virtual void emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {}\n","filename":"src\/hotspot\/share\/opto\/machnode.hpp","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -1096,1 +1096,1 @@\n-void Node::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {}\n+void Node::emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const {}\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -178,0 +178,7 @@\n+class C2_MacroAssembler;\n+\n+\/\/ The type of all node counts and indexes.\n+\/\/ It must hold at least 16 bits, but must also be fast to load and store.\n+\/\/ This type, if less than 32 bits, could limit the number of possible nodes.\n+\/\/ (To make this type platform-specific, move to globalDefinitions_xxx.hpp.)\n+typedef unsigned int node_idx_t;\n@@ -1115,1 +1122,1 @@\n-  virtual void format( PhaseRegAlloc *, outputStream* st = tty ) const;\n+  virtual void format(PhaseRegAlloc *, outputStream* st = tty) const;\n@@ -1118,1 +1125,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler &masm, PhaseRegAlloc *ra_) const;\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -426,1 +426,2 @@\n-  fill_buffer(cb, blk_starts);\n+  C2_MacroAssembler masm(cb);\n+  fill_buffer(masm, blk_starts);\n@@ -1348,1 +1349,1 @@\n-void PhaseOutput::fill_buffer(CodeBuffer* cb, uint* blk_starts) {\n+void PhaseOutput::fill_buffer(C2_MacroAssembler& masm, uint* blk_starts) {\n@@ -1404,1 +1405,1 @@\n-    if (!constant_table().emit(*cb)) {\n+    if (!constant_table().emit(masm)) {\n@@ -1427,1 +1428,1 @@\n-      cb->flush_bundle(true);\n+      masm.code()->flush_bundle(true);\n@@ -1434,1 +1435,1 @@\n-      MacroAssembler(cb).block_comment(st.as_string());\n+      masm.block_comment(st.as_string());\n@@ -1444,1 +1445,1 @@\n-    MacroAssembler(cb).bind(blk_labels[block->_pre_order]);\n+    masm.bind(blk_labels[block->_pre_order]);\n@@ -1468,1 +1469,1 @@\n-        cb->flush_bundle(false);\n+        masm.code()->flush_bundle(false);\n@@ -1479,2 +1480,2 @@\n-          cb->flush_bundle(true);\n-          current_offset = cb->insts_size();\n+          masm.code()->flush_bundle(true);\n+          current_offset = masm.offset();\n@@ -1507,2 +1508,2 @@\n-          cb->insts()->maybe_expand_to_ensure_remaining(MAX_inst_size);\n-          if ((cb->blob() == NULL) || (!CompileBroker::should_compile_new_jobs())) {\n+          masm.code()->insts()->maybe_expand_to_ensure_remaining(MAX_inst_size);\n+          if ((masm.code()->blob() == NULL) || (!CompileBroker::should_compile_new_jobs())) {\n@@ -1512,3 +1513,3 @@\n-          nop->emit(*cb, C->regalloc());\n-          cb->flush_bundle(true);\n-          current_offset = cb->insts_size();\n+          nop->emit(masm, C->regalloc());\n+          masm.code()->flush_bundle(true);\n+          current_offset = masm.offset();\n@@ -1592,3 +1593,3 @@\n-                nop->emit(*cb, C->regalloc());\n-                cb->flush_bundle(true);\n-                current_offset = cb->insts_size();\n+                nop->emit(masm, C->regalloc());\n+                masm.code()->flush_bundle(true);\n+                current_offset = masm.offset();\n@@ -1659,2 +1660,2 @@\n-      cb->insts()->maybe_expand_to_ensure_remaining(MAX_inst_size);\n-      if ((cb->blob() == NULL) || (!CompileBroker::should_compile_new_jobs())) {\n+      masm.code()->insts()->maybe_expand_to_ensure_remaining(MAX_inst_size);\n+      if ((masm.code()->blob() == NULL) || (!CompileBroker::should_compile_new_jobs())) {\n@@ -1668,1 +1669,1 @@\n-        node_offsets[n->_idx] = cb->insts_size();\n+        node_offsets[n->_idx] = masm.offset();\n@@ -1674,3 +1675,3 @@\n-      DEBUG_ONLY(uint instr_offset = cb->insts_size());\n-      n->emit(*cb, C->regalloc());\n-      current_offset = cb->insts_size();\n+      DEBUG_ONLY(uint instr_offset = masm.offset());\n+      n->emit(masm, C->regalloc());\n+      current_offset = masm.offset();\n@@ -1695,1 +1696,1 @@\n-        Disassembler::decode(cb->insts_begin() + instr_offset, cb->insts_begin() + current_offset + 1, tty);\n+        Disassembler::decode(masm.code()->insts_begin() + instr_offset, masm.code()->insts_begin() + current_offset + 1, tty);\n@@ -1726,1 +1727,1 @@\n-        cb->set_insts_end(cb->insts_end() - Pipeline::instr_unit_size());\n+        masm.code()->set_insts_end(masm.code()->insts_end() - Pipeline::instr_unit_size());\n@@ -1731,1 +1732,1 @@\n-          node_offsets[delay_slot->_idx] = cb->insts_size();\n+          node_offsets[delay_slot->_idx] = masm.offset();\n@@ -1753,1 +1754,1 @@\n-        delay_slot->emit(*cb, C->regalloc());\n+        delay_slot->emit(masm, C->regalloc());\n@@ -1770,2 +1771,2 @@\n-        nop->emit(*cb, C->regalloc());\n-        current_offset = cb->insts_size();\n+        nop->emit(masm, C->regalloc());\n+        current_offset = masm.offset();\n@@ -1789,1 +1790,1 @@\n-  MacroAssembler(cb).bind( blk_labels[nblocks] );\n+  masm.bind( blk_labels[nblocks] );\n@@ -1808,1 +1809,1 @@\n-  bs->emit_stubs(*cb);\n+  bs->emit_stubs(*masm.code());\n@@ -1812,1 +1813,1 @@\n-  safepoint_poll_table()->emit(*cb);\n+  safepoint_poll_table()->emit(*masm.code());\n@@ -1817,1 +1818,1 @@\n-  Scheduling::increment_method_size(cb->insts_size());\n+  Scheduling::increment_method_size(masm.offset());\n@@ -1828,1 +1829,1 @@\n-    _code_offsets.set_value(CodeOffsets::Exceptions, HandlerImpl::emit_exception_handler(*cb));\n+    _code_offsets.set_value(CodeOffsets::Exceptions, HandlerImpl::emit_exception_handler(masm));\n@@ -1833,1 +1834,1 @@\n-    _code_offsets.set_value(CodeOffsets::Deopt, HandlerImpl::emit_deopt_handler(*cb));\n+    _code_offsets.set_value(CodeOffsets::Deopt, HandlerImpl::emit_deopt_handler(masm));\n@@ -1839,1 +1840,1 @@\n-      _code_offsets.set_value(CodeOffsets::DeoptMH, HandlerImpl::emit_deopt_handler(*cb));\n+      _code_offsets.set_value(CodeOffsets::DeoptMH, HandlerImpl::emit_deopt_handler(masm));\n@@ -1844,1 +1845,1 @@\n-  if ((cb->blob() == NULL) || (!CompileBroker::should_compile_new_jobs())) {\n+  if ((masm.code()->blob() == NULL) || (!CompileBroker::should_compile_new_jobs())) {\n@@ -3285,0 +3286,1 @@\n+  C2_MacroAssembler masm(&buf);\n@@ -3291,1 +3293,0 @@\n-    MacroAssembler masm(&buf);\n@@ -3296,1 +3297,1 @@\n-  n->emit(buf, C->regalloc());\n+  n->emit(masm, C->regalloc());\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":40,"deletions":39,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -196,1 +196,1 @@\n-  void fill_buffer(CodeBuffer* cb, uint* blk_starts);\n+  void fill_buffer(C2_MacroAssembler& masm, uint* blk_starts);\n","filename":"src\/hotspot\/share\/opto\/output.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}