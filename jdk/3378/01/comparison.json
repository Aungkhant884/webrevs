{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,2 +78,2 @@\n-    static int pageCount(long size) {\n-        return (int)(size + (long)pageSize() - 1L) \/ pageSize();\n+    static long pageCount(long size) {\n+        return (size + (long)pageSize() - 1L) \/ pageSize();\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Bits.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-        int count = Bits.pageCount(length);\n+        long count = Bits.pageCount(length);\n@@ -67,1 +67,1 @@\n-        for (int i=0; i<count; i++) {\n+        for (long i=0; i<count; i++) {\n@@ -109,1 +109,1 @@\n-    private static native boolean isLoaded0(long address, long length, int pageCount);\n+    private static native boolean isLoaded0(long address, long length, long pageCount);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/MappedMemoryUtils.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-                                         jlong len, jint numPages)\n+                                         jlong len, jlong numPages)\n@@ -63,1 +63,1 @@\n-    int i = 0;\n+    long i = 0;\n@@ -73,1 +73,1 @@\n-    numPages = (jint) calculate_number_of_pages_in_range(a, len, pagesize);\n+    numPages = (jlong) calculate_number_of_pages_in_range(a, len, pagesize);\n","filename":"src\/java.base\/unix\/native\/libnio\/MappedMemoryUtils.c","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-                                         jlong len, jint numPages)\n+                                         jlong len, jlong numPages)\n","filename":"src\/java.base\/windows\/native\/libnio\/MappedMemoryUtils.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -300,0 +300,23 @@\n+    static final long LARGE_SIZE = 3L * 1024L * 1024L * 1024L; \/\/ 3GB\n+\n+    @Test\n+    public void testLargeMappedSegment() throws Throwable {\n+        if (System.getProperty(\"sun.arch.data.model\").equals(\"32\")) {\n+            throw new SkipException(\"large mapped files not supported on 32-bit systems\");\n+        }\n+\n+        File f = new File(\"testLargeMappedSegment.out\");\n+        f.createNewFile();\n+        f.deleteOnExit();\n+\n+        try (MemorySegment segment = MemorySegment.mapFile(f.toPath(), 0, LARGE_SIZE, FileChannel.MapMode.READ_WRITE)) {\n+            MappedMemorySegments.isLoaded(segment);\n+            MappedMemorySegments.load(segment);\n+            MappedMemorySegments.isLoaded(segment);\n+            MappedMemorySegments.force(segment);\n+            MappedMemorySegments.isLoaded(segment);\n+            MappedMemorySegments.unload(segment);\n+            MappedMemorySegments.isLoaded(segment);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"}]}