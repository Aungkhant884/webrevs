{"files":[{"patch":"@@ -29,2 +29,0 @@\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodType;\n@@ -32,1 +30,0 @@\n-import java.util.EnumSet;\n@@ -35,2 +32,0 @@\n-import java.util.Set;\n-import java.util.function.Function;\n@@ -47,1 +42,0 @@\n-import jdk.internal.vm.annotation.ForceInline;\n@@ -407,11 +401,1 @@\n-    @ForceInline\n-    default long scale(long offset, long index) {\n-        if (offset < 0) {\n-            throw new IllegalArgumentException(\"Negative offset: \" + offset);\n-        }\n-        if (index < 0) {\n-            throw new IllegalArgumentException(\"Negative index: \" + index);\n-        }\n-\n-        return Math.addExact(offset, Math.multiplyExact(byteSize(), index));\n-    }\n+    long scale(long offset, long index);\n@@ -422,14 +406,1 @@\n-    default MethodHandle scaleHandle() {\n-        class Holder {\n-            static final MethodHandle MH_SCALE;\n-            static {\n-                try {\n-                    MH_SCALE = MethodHandles.lookup().findVirtual(MemoryLayout.class, \"scale\",\n-                            MethodType.methodType(long.class, long.class, long.class));\n-                } catch (ReflectiveOperationException e) {\n-                    throw new ExceptionInInitializerError(e);\n-                }\n-            }\n-        }\n-        return Holder.MH_SCALE.bindTo(this);\n-    }\n+    MethodHandle scaleHandle();\n@@ -447,4 +418,1 @@\n-    default long byteOffset(PathElement... elements) {\n-        return computePathOp(LayoutPath.rootPath(this), LayoutPath::offset,\n-                EnumSet.of(PathKind.SEQUENCE_ELEMENT, PathKind.SEQUENCE_RANGE, PathKind.DEREF_ELEMENT), elements);\n-    }\n+    long byteOffset(PathElement... elements);\n@@ -485,4 +453,1 @@\n-    default MethodHandle byteOffsetHandle(PathElement... elements) {\n-        return computePathOp(LayoutPath.rootPath(this), LayoutPath::offsetHandle,\n-                EnumSet.of(PathKind.DEREF_ELEMENT), elements);\n-    }\n+    MethodHandle byteOffsetHandle(PathElement... elements);\n@@ -580,8 +545,1 @@\n-    default VarHandle varHandle(PathElement... elements) {\n-        Objects.requireNonNull(elements);\n-        if (this instanceof ValueLayout vl && elements.length == 0) {\n-            return vl.varHandle(); \/\/ fast path\n-        }\n-        return computePathOp(LayoutPath.rootPath(this), LayoutPath::dereferenceHandle,\n-                Set.of(), elements);\n-    }\n+    VarHandle varHandle(PathElement... elements);\n@@ -626,4 +584,1 @@\n-    default MethodHandle sliceHandle(PathElement... elements) {\n-        return computePathOp(LayoutPath.rootPath(this), LayoutPath::sliceHandle,\n-                Set.of(PathKind.DEREF_ELEMENT), elements);\n-    }\n+    MethodHandle sliceHandle(PathElement... elements);\n@@ -641,17 +596,1 @@\n-    default MemoryLayout select(PathElement... elements) {\n-        return computePathOp(LayoutPath.rootPath(this), LayoutPath::layout,\n-                EnumSet.of(PathKind.SEQUENCE_ELEMENT_INDEX, PathKind.SEQUENCE_RANGE, PathKind.DEREF_ELEMENT), elements);\n-    }\n-\n-    private static <Z> Z computePathOp(LayoutPath path, Function<LayoutPath, Z> finalizer,\n-                                       Set<PathKind> badKinds, PathElement... elements) {\n-        Objects.requireNonNull(elements);\n-        for (PathElement e : elements) {\n-            LayoutPath.PathElementImpl pathElem = (LayoutPath.PathElementImpl)Objects.requireNonNull(e);\n-            if (badKinds.contains(pathElem.kind())) {\n-                throw new IllegalArgumentException(String.format(\"Invalid %s selection in layout path\", pathElem.kind().description()));\n-            }\n-            path = pathElem.apply(path);\n-        }\n-        return finalizer.apply(path);\n-    }\n+    MemoryLayout select(PathElement... elements);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":7,"deletions":68,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -576,4 +576,1 @@\n-    default MemorySegment asSlice(long offset, MemoryLayout layout) {\n-        Objects.requireNonNull(layout);\n-        return asSlice(offset, layout.byteSize(), layout.byteAlignment());\n-    }\n+    MemorySegment asSlice(long offset, MemoryLayout layout);\n@@ -791,4 +788,1 @@\n-    default MemorySegment copyFrom(MemorySegment src) {\n-        MemorySegment.copy(src, 0, this, 0, src.byteSize());\n-        return this;\n-    }\n+    MemorySegment copyFrom(MemorySegment src);\n@@ -823,4 +817,1 @@\n-    default long mismatch(MemorySegment other) {\n-        Objects.requireNonNull(other);\n-        return MemorySegment.mismatch(this, 0, byteSize(), other, 0, other.byteSize());\n-    }\n+    long mismatch(MemorySegment other);\n@@ -1071,3 +1062,1 @@\n-    default String getString(long offset) {\n-        return getString(offset, sun.nio.cs.UTF_8.INSTANCE);\n-    }\n+    String getString(long offset);\n@@ -1102,4 +1091,1 @@\n-    default String getString(long offset, Charset charset) {\n-        Objects.requireNonNull(charset);\n-        return StringSupport.read(this, offset, charset);\n-    }\n+    String getString(long offset, Charset charset);\n@@ -1126,4 +1112,1 @@\n-    default void setString(long offset, String str) {\n-        Objects.requireNonNull(str);\n-        setString(offset, str, sun.nio.cs.UTF_8.INSTANCE);\n-    }\n+    void setString(long offset, String str);\n@@ -1163,5 +1146,1 @@\n-    default void setString(long offset, String str, Charset charset) {\n-        Objects.requireNonNull(charset);\n-        Objects.requireNonNull(str);\n-        StringSupport.write(this, offset, charset, str);\n-    }\n+    void setString(long offset, String str, Charset charset);\n@@ -1414,4 +1393,1 @@\n-    @ForceInline\n-    default byte get(ValueLayout.OfByte layout, long offset) {\n-        return (byte) layout.varHandle().get(this, offset);\n-    }\n+    byte get(ValueLayout.OfByte layout, long offset);\n@@ -1434,4 +1410,1 @@\n-    @ForceInline\n-    default void set(ValueLayout.OfByte layout, long offset, byte value) {\n-        layout.varHandle().set(this, offset, value);\n-    }\n+    void set(ValueLayout.OfByte layout, long offset, byte value);\n@@ -1453,4 +1426,1 @@\n-    @ForceInline\n-    default boolean get(ValueLayout.OfBoolean layout, long offset) {\n-        return (boolean) layout.varHandle().get(this, offset);\n-    }\n+    boolean get(ValueLayout.OfBoolean layout, long offset);\n@@ -1473,4 +1443,1 @@\n-    @ForceInline\n-    default void set(ValueLayout.OfBoolean layout, long offset, boolean value) {\n-        layout.varHandle().set(this, offset, value);\n-    }\n+    void set(ValueLayout.OfBoolean layout, long offset, boolean value);\n@@ -1492,4 +1459,1 @@\n-    @ForceInline\n-    default char get(ValueLayout.OfChar layout, long offset) {\n-        return (char) layout.varHandle().get(this, offset);\n-    }\n+    char get(ValueLayout.OfChar layout, long offset);\n@@ -1512,4 +1476,1 @@\n-    @ForceInline\n-    default void set(ValueLayout.OfChar layout, long offset, char value) {\n-        layout.varHandle().set(this, offset, value);\n-    }\n+    void set(ValueLayout.OfChar layout, long offset, char value);\n@@ -1531,4 +1492,1 @@\n-    @ForceInline\n-    default short get(ValueLayout.OfShort layout, long offset) {\n-        return (short) layout.varHandle().get(this, offset);\n-    }\n+    short get(ValueLayout.OfShort layout, long offset);\n@@ -1551,4 +1509,1 @@\n-    @ForceInline\n-    default void set(ValueLayout.OfShort layout, long offset, short value) {\n-        layout.varHandle().set(this, offset, value);\n-    }\n+    void set(ValueLayout.OfShort layout, long offset, short value);\n@@ -1570,4 +1525,1 @@\n-    @ForceInline\n-    default int get(ValueLayout.OfInt layout, long offset) {\n-        return (int) layout.varHandle().get(this, offset);\n-    }\n+    int get(ValueLayout.OfInt layout, long offset);\n@@ -1590,4 +1542,1 @@\n-    @ForceInline\n-    default void set(ValueLayout.OfInt layout, long offset, int value) {\n-        layout.varHandle().set(this, offset, value);\n-    }\n+    void set(ValueLayout.OfInt layout, long offset, int value);\n@@ -1609,4 +1558,1 @@\n-    @ForceInline\n-    default float get(ValueLayout.OfFloat layout, long offset) {\n-        return (float)layout.varHandle().get(this, offset);\n-    }\n+    float get(ValueLayout.OfFloat layout, long offset);\n@@ -1629,4 +1575,1 @@\n-    @ForceInline\n-    default void set(ValueLayout.OfFloat layout, long offset, float value) {\n-        layout.varHandle().set(this, offset, value);\n-    }\n+    void set(ValueLayout.OfFloat layout, long offset, float value);\n@@ -1648,4 +1591,1 @@\n-    @ForceInline\n-    default long get(ValueLayout.OfLong layout, long offset) {\n-        return (long) layout.varHandle().get(this, offset);\n-    }\n+    long get(ValueLayout.OfLong layout, long offset);\n@@ -1668,4 +1608,1 @@\n-    @ForceInline\n-    default void set(ValueLayout.OfLong layout, long offset, long value) {\n-        layout.varHandle().set(this, offset, value);\n-    }\n+    void set(ValueLayout.OfLong layout, long offset, long value);\n@@ -1687,4 +1624,1 @@\n-    @ForceInline\n-    default double get(ValueLayout.OfDouble layout, long offset) {\n-        return (double) layout.varHandle().get(this, offset);\n-    }\n+    double get(ValueLayout.OfDouble layout, long offset);\n@@ -1707,4 +1641,1 @@\n-    @ForceInline\n-    default void set(ValueLayout.OfDouble layout, long offset, double value) {\n-        layout.varHandle().set(this, offset, value);\n-    }\n+    void set(ValueLayout.OfDouble layout, long offset, double value);\n@@ -1732,4 +1663,1 @@\n-    @ForceInline\n-    default MemorySegment get(AddressLayout layout, long offset) {\n-        return (MemorySegment) layout.varHandle().get(this, offset);\n-    }\n+    MemorySegment get(AddressLayout layout, long offset);\n@@ -1753,4 +1681,1 @@\n-    @ForceInline\n-    default void set(AddressLayout layout, long offset, MemorySegment value) {\n-        layout.varHandle().set(this, offset, value);\n-    }\n+    void set(AddressLayout layout, long offset, MemorySegment value);\n@@ -1775,6 +1700,1 @@\n-    @ForceInline\n-    default byte getAtIndex(ValueLayout.OfByte layout, long index) {\n-        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n-        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n-        return (byte) layout.varHandle().get(this, index * layout.byteSize());\n-    }\n+    byte getAtIndex(ValueLayout.OfByte layout, long index);\n@@ -1799,6 +1719,1 @@\n-    @ForceInline\n-    default boolean getAtIndex(ValueLayout.OfBoolean layout, long index) {\n-        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n-        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n-        return (boolean) layout.varHandle().get(this, index * layout.byteSize());\n-    }\n+    boolean getAtIndex(ValueLayout.OfBoolean layout, long index);\n@@ -1823,6 +1738,1 @@\n-    @ForceInline\n-    default char getAtIndex(ValueLayout.OfChar layout, long index) {\n-        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n-        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n-        return (char) layout.varHandle().get(this, index * layout.byteSize());\n-    }\n+    char getAtIndex(ValueLayout.OfChar layout, long index);\n@@ -1848,6 +1758,1 @@\n-    @ForceInline\n-    default void setAtIndex(ValueLayout.OfChar layout, long index, char value) {\n-        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n-        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n-        layout.varHandle().set(this, index * layout.byteSize(), value);\n-    }\n+    void setAtIndex(ValueLayout.OfChar layout, long index, char value);\n@@ -1872,6 +1777,1 @@\n-    @ForceInline\n-    default short getAtIndex(ValueLayout.OfShort layout, long index) {\n-        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n-        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n-        return (short) layout.varHandle().get(this, index * layout.byteSize());\n-    }\n+    short getAtIndex(ValueLayout.OfShort layout, long index);\n@@ -1897,7 +1797,1 @@\n-    @ForceInline\n-    default void setAtIndex(ValueLayout.OfByte layout, long index, byte value) {\n-        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n-        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n-        layout.varHandle().set(this, index * layout.byteSize(), value);\n-\n-    }\n+    void setAtIndex(ValueLayout.OfByte layout, long index, byte value);\n@@ -1923,6 +1817,1 @@\n-    @ForceInline\n-    default void setAtIndex(ValueLayout.OfBoolean layout, long index, boolean value) {\n-        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n-        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n-        layout.varHandle().set(this, index * layout.byteSize(), value);\n-    }\n+    void setAtIndex(ValueLayout.OfBoolean layout, long index, boolean value);\n@@ -1948,6 +1837,1 @@\n-    @ForceInline\n-    default void setAtIndex(ValueLayout.OfShort layout, long index, short value) {\n-        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n-        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n-        layout.varHandle().set(this, index * layout.byteSize(), value);\n-    }\n+    void setAtIndex(ValueLayout.OfShort layout, long index, short value);\n@@ -1972,6 +1856,1 @@\n-    @ForceInline\n-    default int getAtIndex(ValueLayout.OfInt layout, long index) {\n-        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n-        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n-        return (int) layout.varHandle().get(this, index * layout.byteSize());\n-    }\n+    int getAtIndex(ValueLayout.OfInt layout, long index);\n@@ -1997,6 +1876,1 @@\n-    @ForceInline\n-    default void setAtIndex(ValueLayout.OfInt layout, long index, int value) {\n-        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n-        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n-        layout.varHandle().set(this, index * layout.byteSize(), value);\n-    }\n+    void setAtIndex(ValueLayout.OfInt layout, long index, int value);\n@@ -2021,6 +1895,1 @@\n-    @ForceInline\n-    default float getAtIndex(ValueLayout.OfFloat layout, long index) {\n-        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n-        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n-        return (float) layout.varHandle().get(this, index * layout.byteSize());\n-    }\n+    float getAtIndex(ValueLayout.OfFloat layout, long index);\n@@ -2046,6 +1915,1 @@\n-    @ForceInline\n-    default void setAtIndex(ValueLayout.OfFloat layout, long index, float value) {\n-        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n-        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n-        layout.varHandle().set(this, index * layout.byteSize(), value);\n-    }\n+    void setAtIndex(ValueLayout.OfFloat layout, long index, float value);\n@@ -2070,6 +1934,1 @@\n-    @ForceInline\n-    default long getAtIndex(ValueLayout.OfLong layout, long index) {\n-        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n-        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n-        return (long) layout.varHandle().get(this, index * layout.byteSize());\n-    }\n+    long getAtIndex(ValueLayout.OfLong layout, long index);\n@@ -2095,6 +1954,1 @@\n-    @ForceInline\n-    default void setAtIndex(ValueLayout.OfLong layout, long index, long value) {\n-        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n-        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n-        layout.varHandle().set(this, index * layout.byteSize(), value);\n-    }\n+    void setAtIndex(ValueLayout.OfLong layout, long index, long value);\n@@ -2119,6 +1973,1 @@\n-    @ForceInline\n-    default double getAtIndex(ValueLayout.OfDouble layout, long index) {\n-        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n-        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n-        return (double) layout.varHandle().get(this, index * layout.byteSize());\n-    }\n+    double getAtIndex(ValueLayout.OfDouble layout, long index);\n@@ -2144,6 +1993,1 @@\n-    @ForceInline\n-    default void setAtIndex(ValueLayout.OfDouble layout, long index, double value) {\n-        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n-        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n-        layout.varHandle().set(this, index * layout.byteSize(), value);\n-    }\n+    void setAtIndex(ValueLayout.OfDouble layout, long index, double value);\n@@ -2174,6 +2018,1 @@\n-    @ForceInline\n-    default MemorySegment getAtIndex(AddressLayout layout, long index) {\n-        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n-        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n-        return (MemorySegment) layout.varHandle().get(this, index * layout.byteSize());\n-    }\n+    MemorySegment getAtIndex(AddressLayout layout, long index);\n@@ -2200,6 +2039,1 @@\n-    @ForceInline\n-    default void setAtIndex(AddressLayout layout, long index, MemorySegment value) {\n-        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n-        \/\/ note: we know size is a small value (as it comes from ValueLayout::byteSize())\n-        layout.varHandle().set(this, index * layout.byteSize(), value);\n-    }\n+    void setAtIndex(AddressLayout layout, long index, MemorySegment value);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":43,"deletions":209,"binary":false,"changes":252,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.nio.charset.Charset;\n@@ -125,0 +126,6 @@\n+    @Override\n+    public MemorySegment asSlice(long offset, MemoryLayout layout) {\n+        Objects.requireNonNull(layout);\n+        return asSlice(offset, layout.byteSize(), layout.byteAlignment());\n+    }\n+\n@@ -275,0 +282,12 @@\n+    @Override\n+    public MemorySegment copyFrom(MemorySegment src) {\n+        MemorySegment.copy(src, 0, this, 0, src.byteSize());\n+        return this;\n+    }\n+\n+    @Override\n+    public long mismatch(MemorySegment other) {\n+        Objects.requireNonNull(other);\n+        return MemorySegment.mismatch(this, 0, byteSize(), other, 0, other.byteSize());\n+    }\n+\n@@ -735,0 +754,260 @@\n+\n+    \/\/ accessors\n+\n+    @ForceInline\n+    @Override\n+    public byte get(ValueLayout.OfByte layout, long offset) {\n+        return (byte) layout.varHandle().get(this, offset);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public void set(ValueLayout.OfByte layout, long offset, byte value) {\n+        layout.varHandle().set(this, offset, value);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public boolean get(ValueLayout.OfBoolean layout, long offset) {\n+        return (boolean) layout.varHandle().get(this, offset);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public void set(ValueLayout.OfBoolean layout, long offset, boolean value) {\n+        layout.varHandle().set(this, offset, value);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public char get(ValueLayout.OfChar layout, long offset) {\n+        return (char) layout.varHandle().get(this, offset);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public void set(ValueLayout.OfChar layout, long offset, char value) {\n+        layout.varHandle().set(this, offset, value);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public short get(ValueLayout.OfShort layout, long offset) {\n+        return (short) layout.varHandle().get(this, offset);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public void set(ValueLayout.OfShort layout, long offset, short value) {\n+        layout.varHandle().set(this, offset, value);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public int get(ValueLayout.OfInt layout, long offset) {\n+        return (int) layout.varHandle().get(this, offset);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public void set(ValueLayout.OfInt layout, long offset, int value) {\n+        layout.varHandle().set(this, offset, value);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public float get(ValueLayout.OfFloat layout, long offset) {\n+        return (float) layout.varHandle().get(this, offset);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public void set(ValueLayout.OfFloat layout, long offset, float value) {\n+        layout.varHandle().set(this, offset, value);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public long get(ValueLayout.OfLong layout, long offset) {\n+        return (long) layout.varHandle().get(this, offset);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public void set(ValueLayout.OfLong layout, long offset, long value) {\n+        layout.varHandle().set(this, offset, value);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public double get(ValueLayout.OfDouble layout, long offset) {\n+        return (double) layout.varHandle().get(this, offset);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public void set(ValueLayout.OfDouble layout, long offset, double value) {\n+        layout.varHandle().set(this, offset, value);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public MemorySegment get(AddressLayout layout, long offset) {\n+        return (MemorySegment) layout.varHandle().get(this, offset);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public void set(AddressLayout layout, long offset, MemorySegment value) {\n+        layout.varHandle().set(this, offset, value);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public byte getAtIndex(ValueLayout.OfByte layout, long index) {\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n+        return (byte) layout.varHandle().get(this, index * layout.byteSize());\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public boolean getAtIndex(ValueLayout.OfBoolean layout, long index) {\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n+        return (boolean) layout.varHandle().get(this, index * layout.byteSize());\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public char getAtIndex(ValueLayout.OfChar layout, long index) {\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n+        return (char) layout.varHandle().get(this, index * layout.byteSize());\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public void setAtIndex(ValueLayout.OfChar layout, long index, char value) {\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n+        layout.varHandle().set(this, index * layout.byteSize(), value);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public short getAtIndex(ValueLayout.OfShort layout, long index) {\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n+        return (short) layout.varHandle().get(this, index * layout.byteSize());\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public void setAtIndex(ValueLayout.OfByte layout, long index, byte value) {\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n+        layout.varHandle().set(this, index * layout.byteSize(), value);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public void setAtIndex(ValueLayout.OfBoolean layout, long index, boolean value) {\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n+        layout.varHandle().set(this, index * layout.byteSize(), value);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public void setAtIndex(ValueLayout.OfShort layout, long index, short value) {\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n+        layout.varHandle().set(this, index * layout.byteSize(), value);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public int getAtIndex(ValueLayout.OfInt layout, long index) {\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n+        return (int) layout.varHandle().get(this, index * layout.byteSize());\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public void setAtIndex(ValueLayout.OfInt layout, long index, int value) {\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n+        layout.varHandle().set(this, index * layout.byteSize(), value);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public float getAtIndex(ValueLayout.OfFloat layout, long index) {\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n+        return (float) layout.varHandle().get(this, index * layout.byteSize());\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public void setAtIndex(ValueLayout.OfFloat layout, long index, float value) {\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n+        layout.varHandle().set(this, index * layout.byteSize(), value);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public long getAtIndex(ValueLayout.OfLong layout, long index) {\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n+        return (long) layout.varHandle().get(this, index * layout.byteSize());\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public void setAtIndex(ValueLayout.OfLong layout, long index, long value) {\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n+        layout.varHandle().set(this, index * layout.byteSize(), value);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public double getAtIndex(ValueLayout.OfDouble layout, long index) {\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n+        return (double) layout.varHandle().get(this, index * layout.byteSize());\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public void setAtIndex(ValueLayout.OfDouble layout, long index, double value) {\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n+        layout.varHandle().set(this, index * layout.byteSize(), value);\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public MemorySegment getAtIndex(AddressLayout layout, long index) {\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n+        return (MemorySegment) layout.varHandle().get(this, index * layout.byteSize());\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public void setAtIndex(AddressLayout layout, long index, MemorySegment value) {\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n+        layout.varHandle().set(this, index * layout.byteSize(), value);\n+    }\n+\n+    @Override\n+    public String getString(long offset) {\n+        return getString(offset, sun.nio.cs.UTF_8.INSTANCE);\n+    }\n+\n+    @Override\n+    public String getString(long offset, Charset charset) {\n+        Objects.requireNonNull(charset);\n+        return StringSupport.read(this, offset, charset);\n+    }\n+\n+    @Override\n+    public void setString(long offset, String str) {\n+        Objects.requireNonNull(str);\n+        setString(offset, str, sun.nio.cs.UTF_8.INSTANCE);\n+    }\n+\n+    @Override\n+    public void setString(long offset, String str, Charset charset) {\n+        Objects.requireNonNull(charset);\n+        Objects.requireNonNull(str);\n+        StringSupport.write(this, offset, charset, str);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":279,"deletions":0,"binary":false,"changes":279,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.foreign.LayoutPath;\n+import jdk.internal.foreign.LayoutPath.PathElementImpl.PathKind;\n@@ -32,0 +34,1 @@\n+import java.lang.foreign.MemoryLayout.PathElement;\n@@ -36,0 +39,5 @@\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.lang.invoke.VarHandle;\n+import java.util.EnumSet;\n@@ -38,0 +46,2 @@\n+import java.util.Set;\n+import java.util.function.Function;\n@@ -143,0 +153,68 @@\n+    public long scale(long offset, long index) {\n+        if (offset < 0) {\n+            throw new IllegalArgumentException(\"Negative offset: \" + offset);\n+        }\n+        if (index < 0) {\n+            throw new IllegalArgumentException(\"Negative index: \" + index);\n+        }\n+\n+        return Math.addExact(offset, Math.multiplyExact(byteSize(), index));\n+    }\n+\n+    public MethodHandle scaleHandle() {\n+        class Holder {\n+            static final MethodHandle MH_SCALE;\n+            static {\n+                try {\n+                    MH_SCALE = MethodHandles.lookup().findVirtual(MemoryLayout.class, \"scale\",\n+                            MethodType.methodType(long.class, long.class, long.class));\n+                } catch (ReflectiveOperationException e) {\n+                    throw new ExceptionInInitializerError(e);\n+                }\n+            }\n+        }\n+        return Holder.MH_SCALE.bindTo(this);\n+    }\n+\n+\n+    public long byteOffset(PathElement... elements) {\n+        return computePathOp(LayoutPath.rootPath((MemoryLayout) this), LayoutPath::offset,\n+                EnumSet.of(PathKind.SEQUENCE_ELEMENT, PathKind.SEQUENCE_RANGE, PathKind.DEREF_ELEMENT), elements);\n+    }\n+\n+    public MethodHandle byteOffsetHandle(PathElement... elements) {\n+        return computePathOp(LayoutPath.rootPath((MemoryLayout) this), LayoutPath::offsetHandle,\n+                EnumSet.of(PathKind.DEREF_ELEMENT), elements);\n+    }\n+\n+    public VarHandle varHandle(PathElement... elements) {\n+        Objects.requireNonNull(elements);\n+        if (this instanceof ValueLayout vl && elements.length == 0) {\n+            return vl.varHandle(); \/\/ fast path\n+        }\n+        return computePathOp(LayoutPath.rootPath((MemoryLayout) this), LayoutPath::dereferenceHandle,\n+                Set.of(), elements);\n+    }\n+\n+    public MethodHandle sliceHandle(PathElement... elements) {\n+        return computePathOp(LayoutPath.rootPath((MemoryLayout) this), LayoutPath::sliceHandle,\n+                Set.of(PathKind.DEREF_ELEMENT), elements);\n+    }\n+\n+    public MemoryLayout select(PathElement... elements) {\n+        return computePathOp(LayoutPath.rootPath((MemoryLayout) this), LayoutPath::layout,\n+                EnumSet.of(PathKind.SEQUENCE_ELEMENT_INDEX, PathKind.SEQUENCE_RANGE, PathKind.DEREF_ELEMENT), elements);\n+    }\n+\n+    private static <Z> Z computePathOp(LayoutPath path, Function<LayoutPath, Z> finalizer,\n+                                       Set<PathKind> badKinds, PathElement... elements) {\n+        Objects.requireNonNull(elements);\n+        for (PathElement e : elements) {\n+            LayoutPath.PathElementImpl pathElem = (LayoutPath.PathElementImpl)Objects.requireNonNull(e);\n+            if (badKinds.contains(pathElem.kind())) {\n+                throw new IllegalArgumentException(String.format(\"Invalid %s selection in layout path\", pathElem.kind().description()));\n+            }\n+            path = pathElem.apply(path);\n+        }\n+        return finalizer.apply(path);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractLayout.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"modified"}]}