{"files":[{"patch":"@@ -98,1 +98,1 @@\n-    get_interpreterState()->set_thread(thread->as_Java_thread());\n+    get_interpreterState()->set_thread(JavaThread::cast(thread));\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2291,1 +2291,1 @@\n-    thread->as_Java_thread()->set_saved_exception_pc((address)(DWORD_PTR)exceptionInfo->ContextRecord->PC_NAME);\n+    JavaThread::cast(thread)->set_saved_exception_pc((address)(DWORD_PTR)exceptionInfo->ContextRecord->PC_NAME);\n@@ -2585,1 +2585,1 @@\n-    JavaThread* thread = t->as_Java_thread();\n+    JavaThread* thread = JavaThread::cast(t);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    return thread->as_Java_thread()->thread_state() == _thread_in_vm;\n+    return JavaThread::cast(thread)->thread_state() == _thread_in_vm;\n","filename":"src\/hotspot\/share\/code\/dependencies.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1279,1 +1279,1 @@\n-        vframeStream vfst(thread->as_Java_thread());\n+        vframeStream vfst(JavaThread::cast(thread));\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1696,1 +1696,1 @@\n-        thread->as_Java_thread()->nmethods_do(&_code_cl);\n+        JavaThread::cast(thread)->nmethods_do(&_code_cl);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-    flush_deferred_card_mark_barrier(thread->as_Java_thread());\n+    flush_deferred_card_mark_barrier(JavaThread::cast(thread));\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTableBarrierSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-  _thread->as_Java_thread()->check_for_valid_safepoint_state();\n+  JavaThread::cast(_thread)->check_for_valid_safepoint_state();\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-      JavaThread* const jt = thread->as_Java_thread();\n+      JavaThread* const jt = JavaThread::cast(thread);\n@@ -125,1 +125,1 @@\n-        StackWatermarkSet::finish_processing(thread->as_Java_thread(), &oops, StackWatermarkKind::gc);\n+        StackWatermarkSet::finish_processing(JavaThread::cast(thread), &oops, StackWatermarkKind::gc);\n@@ -128,1 +128,1 @@\n-        StackWatermarkSet::finish_processing(thread->as_Java_thread(), &oops, StackWatermarkKind::gc);\n+        StackWatermarkSet::finish_processing(JavaThread::cast(thread), &oops, StackWatermarkKind::gc);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -624,1 +624,1 @@\n-  JavaThread* const jt = thread->as_Java_thread();\n+  JavaThread* const jt = JavaThread::cast(thread);\n@@ -937,1 +937,1 @@\n-    JavaThread* jt = thread->as_Java_thread();\n+    JavaThread* jt = JavaThread::cast(thread);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1753,1 +1753,1 @@\n-      ThreadBlockInVM sp(thread->as_Java_thread());\n+      ThreadBlockInVM sp(JavaThread::cast(thread));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-  JavaThread* const jt = thread->as_Java_thread();\n+  JavaThread* const jt = JavaThread::cast(thread);\n@@ -205,1 +205,1 @@\n-        ShenandoahStackWatermark* wm = StackWatermarkSet::get<ShenandoahStackWatermark>(thr->as_Java_thread(), StackWatermarkKind::gc);\n+        ShenandoahStackWatermark* wm = StackWatermarkSet::get<ShenandoahStackWatermark>(JavaThread::cast(thr), StackWatermarkKind::gc);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,1 @@\n-    JavaThread* const jt = thread->as_Java_thread();\n+    JavaThread* const jt = JavaThread::cast(thread);\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-    _sema.wait_with_safepoint_check(thread->as_Java_thread());\n+    _sema.wait_with_safepoint_check(JavaThread::cast(thread));\n","filename":"src\/hotspot\/share\/gc\/z\/zFuture.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -625,1 +625,1 @@\n-    JavaThread* const jt = thread->as_Java_thread();\n+    JavaThread* const jt = JavaThread::cast(thread);\n","filename":"src\/hotspot\/share\/gc\/z\/zMark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-      ThreadBlockInVM tbivm(_thread->as_Java_thread());\n+      ThreadBlockInVM tbivm(JavaThread::cast(_thread));\n","filename":"src\/hotspot\/share\/gc\/z\/zObjArrayAllocator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-    JavaThread* const jt = thread->as_Java_thread();\n+    JavaThread* const jt = JavaThread::cast(thread);\n","filename":"src\/hotspot\/share\/gc\/z\/zVerify.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -824,1 +824,1 @@\n-  DEBUG_ONLY(check_new_unstarted_java_thread(t->as_Java_thread());)\n+  DEBUG_ONLY(check_new_unstarted_java_thread(JavaThread::cast(t));)\n@@ -826,1 +826,1 @@\n-  if (check_exclusion_state_on_thread_start(t->as_Java_thread())) {\n+  if (check_exclusion_state_on_thread_start(JavaThread::cast(t))) {\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -178,1 +178,1 @@\n-  JavaThread* jth = context.thread()->as_Java_thread();\n+  JavaThread* jth = JavaThread::cast(context.thread());\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampler.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -452,1 +452,1 @@\n-      ThreadInVMfromNative transition(thread->as_Java_thread());\n+      ThreadInVMfromNative transition(JavaThread::cast(thread));\n@@ -481,1 +481,1 @@\n-    JfrJavaEventWriter::notify(thread->as_Java_thread());\n+    JfrJavaEventWriter::notify(JavaThread::cast(thread));\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointManager.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-  const oop thread_obj = t->as_Java_thread()->threadObj();\n+  const oop thread_obj = JavaThread::cast(t)->threadObj();\n@@ -126,1 +126,1 @@\n-  return t->is_Java_thread() ? get_java_thread_name(t->as_Java_thread()) : t->name();\n+  return t->is_Java_thread() ? get_java_thread_name(JavaThread::cast(t)) : t->name();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrThreadState.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-    _writer.write(JfrThreadGroup::thread_group_id(t->as_Java_thread(), _curthread));\n+    _writer.write(JfrThreadGroup::thread_group_id(JavaThread::cast(t), _curthread));\n@@ -279,1 +279,1 @@\n-    JavaThread* const jt = _thread->as_Java_thread();\n+    JavaThread* const jt = JavaThread::cast(_thread);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrType.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -504,1 +504,1 @@\n-  JavaThreadInVMAndNative(Thread* t) : _jt(t->is_Java_thread() ? t->as_Java_thread() : NULL),\n+  JavaThreadInVMAndNative(Thread* t) : _jt(t->is_Java_thread() ? JavaThread::cast(t) : NULL),\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrEmergencyDump.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-  return (thread->is_Java_thread() && thread->as_Java_thread()->thread_state() != _thread_in_vm) || thread->is_VM_thread();\n+  return (thread->is_Java_thread() && JavaThread::cast(thread)->thread_state() != _thread_in_vm) || thread->is_VM_thread();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrPostBox.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-  return instance().record_for(thread->as_Java_thread(), skip, frames, tl->stackdepth());\n+  return instance().record_for(JavaThread::cast(thread), skip, frames, tl->stackdepth());\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTraceRepository.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,1 +98,1 @@\n-        send_java_thread_start_event(t->as_Java_thread());\n+        send_java_thread_start_event(JavaThread::cast(t));\n@@ -163,1 +163,1 @@\n-      JavaThread* const jt = t->as_Java_thread();\n+      JavaThread* const jt = JavaThread::cast(t);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-       JfrJavaEventWriter::notify(t->as_Java_thread());\n+       JfrJavaEventWriter::notify(JavaThread::cast(t));\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrJavaEventWriter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-  return thread->as_Java_thread();\n+  return JavaThread::cast(thread);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -317,1 +317,1 @@\n-        JavaThread* THREAD = thread->as_Java_thread(); \/\/ For exception macros.\n+        JavaThread* THREAD = JavaThread::cast(thread); \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -589,1 +589,1 @@\n-      JavaThread* THREAD = current->as_Java_thread(); \/\/ For exception macros.\n+      JavaThread* THREAD = JavaThread::cast(current); \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2155,1 +2155,1 @@\n-    _exception = Exceptions::new_exception(current->as_Java_thread(),\n+    _exception = Exceptions::new_exception(JavaThread::cast(current),\n","filename":"src\/hotspot\/share\/oops\/generateOopMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3627,1 +3627,1 @@\n-        current->as_Java_thread()->security_get_caller_class(1):\n+        JavaThread::cast(current)->security_get_caller_class(1):\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -616,1 +616,1 @@\n-    JavaThread* THREAD = current->as_Java_thread(); \/\/ For exception macros.\n+    JavaThread* THREAD = JavaThread::cast(current); \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3770,1 +3770,1 @@\n-      *(JNIEnv**)penv = t->as_Java_thread()->jni_environment();\n+      *(JNIEnv**)penv = JavaThread::cast(t)->jni_environment();\n@@ -3907,1 +3907,1 @@\n-  JavaThread* thread = current->as_Java_thread();\n+  JavaThread* thread = JavaThread::cast(current);\n@@ -3969,1 +3969,1 @@\n-      *(JNIEnv**)penv = thread->as_Java_thread()->jni_environment();\n+      *(JNIEnv**)penv = JavaThread::cast(thread)->jni_environment();\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-    JavaThread* thr = cur->as_Java_thread();                             \\\n+    JavaThread* thr = JavaThread::cast(cur);                             \\\n","filename":"src\/hotspot\/share\/prims\/jniCheck.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -436,1 +436,1 @@\n-    <xsl:text>JavaThread* current_thread = this_thread->as_Java_thread();<\/xsl:text>\n+    <xsl:text>JavaThread* current_thread = JavaThread::cast(this_thread);<\/xsl:text>\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnter.xsl","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1272,1 +1272,1 @@\n-  JavaThread *jt = target->as_Java_thread();\n+  JavaThread *jt = JavaThread::cast(target);\n@@ -1396,1 +1396,1 @@\n-  JavaThread* java_thread = target->as_Java_thread();\n+  JavaThread* java_thread = JavaThread::cast(target);\n@@ -1531,1 +1531,1 @@\n-  JavaThread* java_thread = target->as_Java_thread();\n+  JavaThread* java_thread = JavaThread::cast(target);\n@@ -1621,1 +1621,1 @@\n-  JavaThread* java_thread = target->as_Java_thread();\n+  JavaThread* java_thread = JavaThread::cast(target);\n@@ -1652,1 +1652,1 @@\n-  JavaThread *jt = target->as_Java_thread();\n+  JavaThread *jt = JavaThread::cast(target);\n@@ -1662,1 +1662,1 @@\n-  JavaThread *jt = target->as_Java_thread();\n+  JavaThread *jt = JavaThread::cast(target);\n@@ -1672,1 +1672,1 @@\n-  JavaThread *jt = target->as_Java_thread();\n+  JavaThread *jt = JavaThread::cast(target);\n@@ -1691,1 +1691,1 @@\n-  JavaThread *jt = target->as_Java_thread();\n+  JavaThread *jt = JavaThread::cast(target);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -258,1 +258,1 @@\n-    JavaThread *jt = target->as_Java_thread();\n+    JavaThread *jt = JavaThread::cast(target);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvThreadState.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -204,1 +204,1 @@\n-    JavaThread* jt = th->as_Java_thread();\n+    JavaThread* jt = JavaThread::cast(th);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEventController.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-       _jthread = thread->as_Java_thread();\n+       _jthread = JavaThread::cast(thread);\n@@ -2311,1 +2311,1 @@\n-    JvmtiThreadState *state = thread->as_Java_thread()->jvmti_thread_state();\n+    JvmtiThreadState *state = JavaThread::cast(thread)->jvmti_thread_state();\n@@ -2335,1 +2335,1 @@\n-    JvmtiThreadState *state = thread->as_Java_thread()->jvmti_thread_state();\n+    JvmtiThreadState *state = JavaThread::cast(thread)->jvmti_thread_state();\n@@ -2871,1 +2871,1 @@\n-    JavaThread* current_thread = thread->as_Java_thread();\n+    JavaThread* current_thread = JavaThread::cast(thread);\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -239,1 +239,1 @@\n-    JavaThread* jt = self->as_Java_thread();\n+    JavaThread* jt = JavaThread::cast(self);\n@@ -329,1 +329,1 @@\n-    JavaThread* jt = self->as_Java_thread();\n+    JavaThread* jt = JavaThread::cast(self);\n@@ -382,1 +382,1 @@\n-    JavaThread* jt = self->as_Java_thread();\n+    JavaThread* jt = JavaThread::cast(self);\n","filename":"src\/hotspot\/share\/prims\/jvmtiRawMonitor.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -280,1 +280,1 @@\n-  oop threadObj = thread->as_Java_thread()->threadObj();\n+  oop threadObj = JavaThread::cast(thread)->threadObj();\n","filename":"src\/hotspot\/share\/prims\/jvmtiTrace.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,1 @@\n-    upcall_helper(thread->as_Java_thread(), rec, buff);\n+    upcall_helper(JavaThread::cast(thread), rec, buff);\n","filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2025,1 +2025,1 @@\n-      JavaThread* jt = th->as_Java_thread();\n+      JavaThread* jt = JavaThread::cast(th);\n@@ -2061,1 +2061,1 @@\n-      JavaThread* jt = th->as_Java_thread();\n+      JavaThread* jt = JavaThread::cast(th);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -872,1 +872,1 @@\n-    JavaThread* jt = thread->as_Java_thread();\n+    JavaThread* jt = JavaThread::cast(thread);\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -169,1 +169,1 @@\n-        wait_blocked(self->as_Java_thread(), now);\n+        wait_blocked(JavaThread::cast(self), now);\n@@ -303,1 +303,1 @@\n-    StackWatermarkSet::start_processing(_requester->as_Java_thread(), StackWatermarkKind::gc);\n+    StackWatermarkSet::start_processing(JavaThread::cast(_requester), StackWatermarkKind::gc);\n@@ -620,1 +620,1 @@\n-    JavaThread* current = thr->as_Java_thread();\n+    JavaThread* current = JavaThread::cast(thr);\n@@ -663,1 +663,1 @@\n-    JavaThread* target = thr->as_Java_thread();\n+    JavaThread* target = JavaThread::cast(thr);\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-  JavaThread *current_thread = thread->as_Java_thread();\n+  JavaThread *current_thread = JavaThread::cast(thread);\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-      JavaThread* t2 = t->as_Java_thread();\n+      JavaThread* t2 = JavaThread::cast(t);\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -564,1 +564,1 @@\n-      thread->as_Java_thread()->set_thread_state(_thread_in_vm);\n+      JavaThread::cast(thread)->set_thread_state(_thread_in_vm);\n@@ -612,1 +612,1 @@\n-      JavaThread* jt = thread->as_Java_thread();\n+      JavaThread* jt = JavaThread::cast(thread);\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-           is_frame_handle(thread->as_Java_thread(), handle))) {\n+           is_frame_handle(JavaThread::cast(thread), handle))) {\n@@ -305,1 +305,1 @@\n-          thread->as_Java_thread()->thread_state() == _thread_in_native);\n+          JavaThread::cast(thread)->thread_state() == _thread_in_native);\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    thread->as_Java_thread()->check_for_valid_safepoint_state();\n+    JavaThread::cast(thread)->check_for_valid_safepoint_state();\n@@ -88,1 +88,1 @@\n-      { ThreadBlockInVM tbivmdc(self->as_Java_thread(), &in_flight_mutex);\n+      { ThreadBlockInVM tbivmdc(JavaThread::cast(self), &in_flight_mutex);\n@@ -443,1 +443,1 @@\n-      new_owner->as_Java_thread()->inc_no_safepoint_count();\n+      JavaThread::cast(new_owner)->inc_no_safepoint_count();\n@@ -480,1 +480,1 @@\n-      old_owner->as_Java_thread()->dec_no_safepoint_count();\n+      JavaThread::cast(old_owner)->dec_no_safepoint_count();\n","filename":"src\/hotspot\/share\/runtime\/mutex.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -255,1 +255,1 @@\n-    JavaThread* jt = self->as_Java_thread();\n+    JavaThread* jt = JavaThread::cast(self);\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1472,1 +1472,1 @@\n-  address limit = thread->as_Java_thread()->stack_end() +\n+  address limit = JavaThread::cast(thread)->stack_end() +\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -513,1 +513,1 @@\n-      StackWatermarkSet::start_processing(thread->as_Java_thread(), StackWatermarkKind::gc);\n+      StackWatermarkSet::start_processing(JavaThread::cast(thread), StackWatermarkKind::gc);\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    _thread->as_Java_thread()->inc_no_safepoint_count();\n+    JavaThread::cast(_thread)->inc_no_safepoint_count();\n@@ -42,1 +42,1 @@\n-    _thread->as_Java_thread()->dec_no_safepoint_count();\n+    JavaThread::cast(_thread)->dec_no_safepoint_count();\n@@ -50,1 +50,1 @@\n-    _nsv->_thread->as_Java_thread()->dec_no_safepoint_count();\n+    JavaThread::cast(_nsv->_thread)->dec_no_safepoint_count();\n@@ -56,1 +56,1 @@\n-    _nsv->_thread->as_Java_thread()->inc_no_safepoint_count();\n+    JavaThread::cast(_nsv->_thread)->inc_no_safepoint_count();\n","filename":"src\/hotspot\/share\/runtime\/safepointVerifiers.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -995,1 +995,1 @@\n-      oop obj = thread->as_Java_thread()->threadObj();\n+      oop obj = JavaThread::cast(thread)->threadObj();\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,1 @@\n-    JavaThread* jt = thread->as_Java_thread();\n+    JavaThread* jt = JavaThread::cast(thread);\n","filename":"src\/hotspot\/share\/runtime\/stackWatermarkSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -161,1 +161,1 @@\n-      thread->as_Java_thread()->nmethods_do(_cl);\n+      JavaThread::cast(thread)->nmethods_do(_cl);\n","filename":"src\/hotspot\/share\/runtime\/sweeper.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-      ObjectSynchronizer::chk_for_block_req(current->as_Java_thread(), \"unlinking\",\n+      ObjectSynchronizer::chk_for_block_req(JavaThread::cast(current), \"unlinking\",\n@@ -862,1 +862,1 @@\n-        BiasedLocking::revoke(current->as_Java_thread(), hobj);\n+        BiasedLocking::revoke(JavaThread::cast(current), hobj);\n@@ -1420,1 +1420,1 @@\n-      chk_for_block_req(current->as_Java_thread(), \"deflation\", \"deflated_count\",\n+      chk_for_block_req(JavaThread::cast(current), \"deflation\", \"deflated_count\",\n@@ -1510,1 +1510,1 @@\n-        chk_for_block_req(current->as_Java_thread(), \"deletion\", \"deleted_count\",\n+        chk_for_block_req(JavaThread::cast(current), \"deletion\", \"deleted_count\",\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -352,1 +352,1 @@\n-    as_Java_thread()->stack_overflow_state()->initialize(stack_base(), stack_end());\n+    JavaThread::cast(this)->stack_overflow_state()->initialize(stack_base(), stack_end());\n@@ -464,2 +464,2 @@\n-         thread->as_Java_thread()->is_handshake_safe_for(Thread::current()) ||\n-         !thread->as_Java_thread()->on_thread_list() ||\n+         JavaThread::cast(thread)->is_handshake_safe_for(Thread::current()) ||\n+         !JavaThread::cast(thread)->on_thread_list() ||\n@@ -467,1 +467,1 @@\n-         ThreadsSMRSupport::is_a_protected_JavaThread_with_lock(thread->as_Java_thread()),\n+         ThreadsSMRSupport::is_a_protected_JavaThread_with_lock(JavaThread::cast(thread)),\n@@ -539,1 +539,1 @@\n-    java_lang_Thread::set_thread_status(thread->as_Java_thread()->threadObj(),\n+    java_lang_Thread::set_thread_status(JavaThread::cast(thread)->threadObj(),\n@@ -708,1 +708,1 @@\n-  return os::create_main_thread(this->as_Java_thread());\n+  return os::create_main_thread(JavaThread::cast(this));\n@@ -1550,1 +1550,1 @@\n-    return thread->as_Java_thread();\n+    return JavaThread::cast(thread);\n@@ -1554,1 +1554,1 @@\n-    JavaThread *ret = op == NULL ? NULL : op->calling_thread()->as_Java_thread();\n+    JavaThread *ret = op == NULL ? NULL : JavaThread::cast(op->calling_thread());\n@@ -1712,1 +1712,1 @@\n-    JavaThread* target = thr->as_Java_thread();\n+    JavaThread* target = JavaThread::cast(thr);\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -358,4 +358,0 @@\n-  \/\/ Casts\n-  inline JavaThread* as_Java_thread();\n-  inline const JavaThread* as_Java_thread() const;\n-\n@@ -1423,1 +1419,14 @@\n-  static inline JavaThread* current();\n+  static inline JavaThread* current() {\n+    return JavaThread::cast(Thread::current());\n+  }\n+\n+  \/\/ Casts\n+  static inline JavaThread* cast(Thread* t) {\n+    assert(t->is_Java_thread(), \"incorrect cast to JavaThread\");\n+    return static_cast<JavaThread*>(t);\n+  }\n+\n+  static inline const JavaThread* cast(const Thread* t) {\n+    assert(t->is_Java_thread(), \"incorrect cast to const JavaThread\");\n+    return static_cast<const JavaThread*>(t);\n+  }\n@@ -1589,15 +1598,0 @@\n-\/\/ Inline implementation of JavaThread::current\n-inline JavaThread* JavaThread::current() {\n-  return Thread::current()->as_Java_thread();\n-}\n-\n-inline JavaThread* Thread::as_Java_thread() {\n-  assert(is_Java_thread(), \"incorrect cast to JavaThread\");\n-  return static_cast<JavaThread*>(this);\n-}\n-\n-inline const JavaThread* Thread::as_Java_thread() const {\n-  assert(is_Java_thread(), \"incorrect cast to const JavaThread\");\n-  return static_cast<const JavaThread*>(this);\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":14,"deletions":20,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-  calling_thread()->as_Java_thread()->make_zombies();\n+  JavaThread::cast(calling_thread())->make_zombies();\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -286,1 +286,1 @@\n-    thread->as_Java_thread()->verify_states_for_handshake();\n+    JavaThread::cast(thread)->verify_states_for_handshake();\n@@ -525,1 +525,1 @@\n-    t->as_Java_thread()->check_for_valid_safepoint_state();\n+    JavaThread::cast(t)->check_for_valid_safepoint_state();\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -430,1 +430,1 @@\n-          currentThread = owner->as_Java_thread();\n+          currentThread = JavaThread::cast(owner);\n@@ -994,1 +994,1 @@\n-          currentThread = owner->as_Java_thread();\n+          currentThread = JavaThread::cast(owner);\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-    if (thread->as_Java_thread()->thread_state() == _thread_in_native) {\n+    if (JavaThread::cast(thread)->thread_state() == _thread_in_native) {\n@@ -267,1 +267,1 @@\n-          RegisterMap map(t->as_Java_thread(), false); \/\/ No update\n+          RegisterMap map(JavaThread::cast(t), false); \/\/ No update\n@@ -753,1 +753,1 @@\n-       print_stack_trace(st, _thread->as_Java_thread(), buf, sizeof(buf));\n+       print_stack_trace(st, JavaThread::cast(_thread), buf, sizeof(buf));\n@@ -762,1 +762,1 @@\n-         JavaThread* jt = thread->as_Java_thread();\n+         JavaThread* jt = JavaThread::cast(thread);\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}