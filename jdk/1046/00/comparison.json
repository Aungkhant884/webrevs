{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,2 @@\n+import jtreg.SkippedException;\n+\n@@ -27,1 +29,1 @@\n-    static native boolean gotExhaustedEvent();\n+    static native int getExhaustedEventFlags();\n@@ -30,2 +32,7 @@\n-    static boolean checkResult(String eventName) {\n-        if ( ! gotExhaustedEvent() ) {\n+    static final int JVMTI_RESOURCE_EXHAUSTED_OOM_ERROR = 1;\n+    static final int JVMTI_RESOURCE_EXHAUSTED_JAVA_HEAP = 2;\n+    static final int JVMTI_RESOURCE_EXHAUSTED_THREADS = 4;\n+\n+    static boolean checkResult(int expectedFlag, String eventName) {\n+        int got = getExhaustedEventFlags();\n+        if (got == 0) {\n@@ -36,0 +43,4 @@\n+        if ((got & expectedFlag) == 0) {\n+            System.err.println(\"Warning: did not get expected flag bit (expected: \"+ expectedFlag + \", got: \" + got + \")\");\n+            throw new SkippedException(\"Test did not get expected flag value\");\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/ResourceExhausted\/Helper.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-static volatile jboolean gGotEvent = JNI_FALSE;\n+static volatile jint gEventFlags = 0;\n@@ -49,1 +49,1 @@\n-    gGotEvent = JNI_TRUE;\n+    gEventFlags = flags;\n@@ -52,2 +52,2 @@\n-JNIEXPORT jboolean JNICALL\n-Java_nsk_jvmti_ResourceExhausted_Helper_gotExhaustedEvent(JNIEnv* env, jclass cls)\n+JNIEXPORT jint JNICALL\n+Java_nsk_jvmti_ResourceExhausted_Helper_getExhaustedEventFlags(JNIEnv* env, jclass cls)\n@@ -55,1 +55,1 @@\n-    return gGotEvent;\n+    return gEventFlags;\n@@ -61,1 +61,1 @@\n-    gGotEvent = JNI_FALSE;\n+    gEventFlags = 0;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/ResourceExhausted\/resexhausted.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.test.lib.Platform;\n@@ -45,0 +46,5 @@\n+        \/\/ Check platform here (instead of @requires) as this test is also called from resexhausted004\n+        if (Platform.isWindows()) {\n+            throw new SkippedException(\"Cannot get JVMTI_RESOURCE_EXHAUSTED_THREADS on Windows\");\n+        }\n+\n@@ -59,1 +65,2 @@\n-            System.out.println(\"Can't reproduce OOME due to a limit on iterations\/execution time. Test was useless.\");\n+            System.out.println(\"Can't reproduce OOME due to a limit on iterations\/execution time. Test was useless.\"\n+                    + \" threadCount=\" + threadCount.get());\n@@ -65,1 +72,0 @@\n-            threadsDone = true;\n@@ -67,0 +73,1 @@\n+                threadsDone = true;\n@@ -77,1 +84,2 @@\n-        if (!Helper.checkResult(\"creating \" + count + \" threads\")) {\n+        System.out.println(\"got OOME with threadCount=\" + count);\n+        if (!Helper.checkResult(Helper.JVMTI_RESOURCE_EXHAUSTED_THREADS, \"creating \" + count + \" threads\")) {\n@@ -88,3 +96,3 @@\n-                while (!threadsDone) {\n-                    try {\n-                        synchronized (hanger) {\n+                synchronized (hanger) {\n+                    while (!threadsDone) {\n+                        try {\n@@ -92,2 +100,2 @@\n-                        }\n-                    } catch (InterruptedException ignored) {}\n+                        } catch (InterruptedException ignored) {}\n+                    }\n@@ -98,0 +106,1 @@\n+        thr.setDaemon(true);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/ResourceExhausted\/resexhausted001.java","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+ *      -Xms16m\n+ *      -Xmx16m\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/ResourceExhausted\/resexhausted001\/TestDescription.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        if ( ! Helper.checkResult(\"creating \" + count + \" objects\") )\n+        if (!Helper.checkResult(Helper.JVMTI_RESOURCE_EXHAUSTED_JAVA_HEAP, \"creating \" + count + \" objects\")) {\n@@ -69,0 +69,1 @@\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/ResourceExhausted\/resexhausted002.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -128,1 +128,2 @@\n-        if ( ! Helper.checkResult(\"loading \" + count + \" classes of \" + bloatBytes.length + \" bytes\") )\n+        if (!Helper.checkResult(Helper.JVMTI_RESOURCE_EXHAUSTED_OOM_ERROR,\n+                                \"loading \" + count + \" classes of \" + bloatBytes.length + \" bytes\")) {\n@@ -130,0 +131,1 @@\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/ResourceExhausted\/resexhausted003.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}