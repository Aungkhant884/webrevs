{"files":[{"patch":"@@ -535,1 +535,1 @@\n-#ifdef AARCH64\n+#if defined(AARCH64) || defined(PPC64)\n@@ -545,0 +545,7 @@\n+  \/\/ PPC64: smaller heaps up to 2g will be mapped just below 4g. Then the\n+  \/\/ attempt to place the compressed class space just after the heap fails on\n+  \/\/ Linux 4.1.42 and higher because the launcher is loaded at 4g\n+  \/\/ (ELF_ET_DYN_BASE). In that case we reach here and search the address space\n+  \/\/ below 32g to get a zerobased CCS. For simplicity we reuse the search\n+  \/\/ strategy for AARCH64.\n+\n@@ -568,0 +575,1 @@\n+#endif \/\/ defined(AARCH64) || defined(PPC64)\n@@ -569,0 +577,1 @@\n+#ifdef AARCH64\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-        if (Platform.isWindows() || Platform.isPPC()) {\n+        if (Platform.isWindows()) {\n@@ -101,1 +101,5 @@\n-        if (testNarrowKlassBase()) {\n+        if (testNarrowKlassBase() && !Platform.isAix()) {\n+            \/\/ AIX: the heap cannot be placed below 32g. The first attempt to\n+            \/\/ place the CCS behind the heap fails (luckily). Subsequently CCS\n+            \/\/ is successfully placed below 32g. So we get 0x0 as narrow klass\n+            \/\/ base.\n","filename":"test\/hotspot\/jtreg\/runtime\/CompressedOops\/CompressedClassPointers.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}