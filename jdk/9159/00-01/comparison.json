{"files":[{"patch":"@@ -0,0 +1,251 @@\n+\/*\n+ * @(#)SampleAcn.java\t\n+ *\n+ * Copyright 2001-2002 Sun Microsystems, Inc. All Rights Reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or \n+ * without modification, are permitted provided that the following \n+ * conditions are met:\n+ * \n+ * -Redistributions of source code must retain the above copyright  \n+ * notice, this  list of conditions and the following disclaimer.\n+ * \n+ * -Redistribution in binary form must reproduct the above copyright \n+ * notice, this list of conditions and the following disclaimer in \n+ * the documentation and\/or other materials provided with the \n+ * distribution.\n+ * \n+ * Neither the name of Sun Microsystems, Inc. or the names of \n+ * contributors may be used to endorse or promote products derived \n+ * from this software without specific prior written permission.\n+ * \n+ * This software is provided \"AS IS,\" without a warranty of any \n+ * kind. ALL EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND \n+ * WARRANTIES, INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY, \n+ * FITNESS FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT, ARE HEREBY \n+ * EXCLUDED. SUN AND ITS LICENSORS SHALL NOT BE LIABLE FOR ANY \n+ * DAMAGES OR LIABILITIES  SUFFERED BY LICENSEE AS A RESULT OF  OR \n+ * RELATING TO USE, MODIFICATION OR DISTRIBUTION OF THE SOFTWARE OR \n+ * ITS DERIVATIVES. IN NO EVENT WILL SUN OR ITS LICENSORS BE LIABLE \n+ * FOR ANY LOST REVENUE, PROFIT OR DATA, OR FOR DIRECT, INDIRECT, \n+ * SPECIAL, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER \n+ * CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF \n+ * THE USE OF OR INABILITY TO USE SOFTWARE, EVEN IF SUN HAS BEEN \n+ * ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n+ * \n+ * You acknowledge that Software is not designed, licensed or \n+ * intended for use in the design, construction, operation or \n+ * maintenance of any nuclear facility. \n+ *\/\n+\n+package sample;\n+\n+import java.io.*;\n+import java.util.*;\n+import javax.security.auth.login.*;\n+import javax.security.auth.*;\n+import javax.security.auth.callback.*;\n+\n+\/*\n+ * @test\n+ * @bug 8215916\n+ * @summary This Sample application attempts to authenticate a user\n+ * and reports whether or not the authentication was successful.\n+ * @compile SampleAcn.java module\/SampleLoginModule.java principal\/SamplePrincipal.java\n+ * @run main\/othervm -Djava.security.auth.login.config==samplejaas.config sample.SampleAcn\n+ *\/\n+\n+\/**\n+ * <p> This Sample application attempts to authenticate a user\n+ * and reports whether or not the authentication was successful.\n+ *\/\n+public class SampleAcn {\n+\n+   \/**\n+    * Attempt to authenticate the user.\n+    *\n+    * <p>\n+    * \n+    * @param args input arguments for this application.  These are ignored.\n+    *\/\n+    public static void main(String[] args) {\n+\n+\t\/\/ Obtain a LoginContext, needed for authentication. Tell it \n+\t\/\/ to use the LoginModule implementation specified by the \n+\t\/\/ entry named \"Sample\" in the JAAS login configuration \n+\t\/\/ file and to also use the specified CallbackHandler.\n+\tLoginContext lc = null;\n+\ttry {\n+\t    lc = new LoginContext(\"Sample\", new MyCallbackHandler());\n+\t} catch (LoginException le) {\n+\t    System.err.println(\"Cannot create LoginContext. \"\n+\t        + le.getMessage());\n+\t    System.exit(-1);\n+\t} catch (SecurityException se) {\n+\t    System.err.println(\"Cannot create LoginContext. \"\n+\t        + se.getMessage());\n+\t    System.exit(-1);\n+\t} \n+\n+\t\/\/ the user has 3 attempts to authenticate successfully\n+\tint i;\n+\tfor (i = 0; i < 3; i++) {\n+\t    try {\n+\n+\t\t\/\/ attempt authentication\n+\t\tlc.login();\n+\n+\t\t\/\/ if we return with no exception, authentication succeeded\n+\t\tbreak;\n+\n+\t    } catch (LoginException le) {\n+\n+\t\t  System.err.println(\"Authentication failed:\");\n+\t\t  System.err.println(\"  \" + le.getMessage());\n+\t\t  try {\n+\t\t      Thread.currentThread().sleep(3000);\n+\t\t  } catch (Exception e) {\n+\t\t      \/\/ ignore\n+\t\t  } \n+\t\n+\t    }\n+\t}\n+\n+\t\/\/ did they fail three times?\n+\tif (i == 3) {\n+\t    System.out.println(\"Sorry\");\n+\t    System.exit(-1);\n+\t}\n+\n+\tSystem.out.println(\"Authentication succeeded!\");\n+\n+    }\n+}\n+\n+\n+\/**\n+ * The application implements the CallbackHandler.\n+ *\n+ * <p> This application is text-based.  Therefore it displays information\n+ * to the user using the OutputStreams System.out and System.err,\n+ * and gathers input from the user using the InputStream System.in.\n+ *\/\n+class MyCallbackHandler implements CallbackHandler {\n+\n+    \/**\n+     * Invoke an array of Callbacks.\n+     *\n+     * <p>\n+     *\n+     * @param callbacks an array of <code>Callback<\/code> objects which contain\n+     *\t\t\tthe information requested by an underlying security\n+     *\t\t\tservice to be retrieved or displayed.\n+     *\n+     * @exception java.io.IOException if an input or output error occurs. <p>\n+     *\n+     * @exception UnsupportedCallbackException if the implementation of this\n+     *\t\t\tmethod does not support one or more of the Callbacks\n+     *\t\t\tspecified in the <code>callbacks<\/code> parameter.\n+     *\/\n+    public void handle(Callback[] callbacks)\n+    throws IOException, UnsupportedCallbackException {\n+      \n+\tfor (int i = 0; i < callbacks.length; i++) {\n+\t    if (callbacks[i] instanceof TextOutputCallback) {\n+      \n+\t\t\/\/ display the message according to the specified type\n+\t\tTextOutputCallback toc = (TextOutputCallback)callbacks[i];\n+\t\tswitch (toc.getMessageType()) {\n+\t\tcase TextOutputCallback.INFORMATION:\n+ \t\t    System.out.println(toc.getMessage());\n+ \t\t    break;\n+ \t\tcase TextOutputCallback.ERROR:\n+ \t\t    System.out.println(\"ERROR: \" + toc.getMessage());\n+ \t\t    break;\n+ \t\tcase TextOutputCallback.WARNING:\n+ \t\t    System.out.println(\"WARNING: \" + toc.getMessage());\n+ \t\t    break;\n+ \t\tdefault:\n+ \t\t    throw new IOException(\"Unsupported message type: \" +\n+ \t\t\t\t\ttoc.getMessageType());\n+ \t\t}\n+ \n+ \t    } else if (callbacks[i] instanceof NameCallback) {\n+  \n+ \t\t\/\/ prompt the user for a username\n+ \t\tNameCallback nc = (NameCallback)callbacks[i];\n+  \n+ \t\tSystem.err.print(nc.getPrompt());\n+ \t\tSystem.err.flush();\n+ \t\tnc.setName((new BufferedReader\n+\t\t\t(new InputStreamReader(System.in))).readLine());\n+ \n+ \t    } else if (callbacks[i] instanceof PasswordCallback) {\n+  \n+ \t\t\/\/ prompt the user for sensitive information\n+ \t\tPasswordCallback pc = (PasswordCallback)callbacks[i];\n+ \t\tSystem.err.print(pc.getPrompt());\n+ \t\tSystem.err.flush();\n+ \t\tpc.setPassword(readPassword(System.in));\n+  \n+ \t    } else {\n+ \t\tthrow new UnsupportedCallbackException\n+ \t\t\t(callbacks[i], \"Unrecognized Callback\");\n+ \t    }\n+\t}\n+    }\n+   \n+    \/\/ Reads user password from given input stream.\n+    private char[] readPassword(InputStream in) throws IOException {\n+\t\n+\tchar[] lineBuffer;\n+\tchar[] buf;\n+\tint i;\n+\n+\tbuf = lineBuffer = new char[128];\n+\n+\tint room = buf.length;\n+\tint offset = 0;\n+\tint c;\n+\n+loop:\twhile (true) {\n+ \t    switch (c = in.read()) {\n+ \t    case -1:\n+ \t    case '\\n':\n+\t\tbreak loop;\n+\n+ \t    case '\\r':\n+ \t\tint c2 = in.read();\n+ \t\tif ((c2 != '\\n') && (c2 != -1)) {\n+ \t\t    if (!(in instanceof PushbackInputStream)) {\n+ \t\t\tin = new PushbackInputStream(in);\n+ \t\t    }\n+ \t\t    ((PushbackInputStream)in).unread(c2);\n+ \t\t} else\n+ \t\t    break loop;\n+\n+ \t    default:\n+ \t\tif (--room < 0) {\n+ \t\t    buf = new char[offset + 128];\n+ \t\t    room = buf.length - offset - 1;\n+ \t\t    System.arraycopy(lineBuffer, 0, buf, 0, offset);\n+ \t\t    Arrays.fill(lineBuffer, ' ');\n+ \t\t    lineBuffer = buf;\n+ \t\t}\n+ \t\tbuf[offset++] = (char) c;\n+ \t\tbreak;\n+ \t    }\n+ \t}\n+\n+ \tif (offset == 0) {\n+ \t    return null;\n+ \t}\n+\n+ \tchar[] ret = new char[offset];\n+ \tSystem.arraycopy(buf, 0, ret, 0, offset);\n+ \tArrays.fill(buf, ' ');\n+\n+ \treturn ret;\n+    }\n+}\n+\n","filename":"test\/jdk\/javax\/security\/auth\/login\/LoginContext\/jaaslogin\/sample\/SampleAcn.java","additions":251,"deletions":0,"binary":false,"changes":251,"status":"added"},{"patch":"@@ -0,0 +1,337 @@\n+\/*\n+ * @(#)SampleLoginModule.java\t1.18 00\/01\/11\n+ *\n+ * Copyright 2000-2002 Sun Microsystems, Inc. All Rights Reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or \n+ * without modification, are permitted provided that the following \n+ * conditions are met:\n+ * \n+ * -Redistributions of source code must retain the above copyright  \n+ * notice, this  list of conditions and the following disclaimer.\n+ * \n+ * -Redistribution in binary form must reproduct the above copyright \n+ * notice, this list of conditions and the following disclaimer in \n+ * the documentation and\/or other materials provided with the \n+ * distribution.\n+ * \n+ * Neither the name of Sun Microsystems, Inc. or the names of \n+ * contributors may be used to endorse or promote products derived \n+ * from this software without specific prior written permission.\n+ * \n+ * This software is provided \"AS IS,\" without a warranty of any \n+ * kind. ALL EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND \n+ * WARRANTIES, INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY, \n+ * FITNESS FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT, ARE HEREBY \n+ * EXCLUDED. SUN AND ITS LICENSORS SHALL NOT BE LIABLE FOR ANY \n+ * DAMAGES OR LIABILITIES  SUFFERED BY LICENSEE AS A RESULT OF  OR \n+ * RELATING TO USE, MODIFICATION OR DISTRIBUTION OF THE SOFTWARE OR \n+ * ITS DERIVATIVES. IN NO EVENT WILL SUN OR ITS LICENSORS BE LIABLE \n+ * FOR ANY LOST REVENUE, PROFIT OR DATA, OR FOR DIRECT, INDIRECT, \n+ * SPECIAL, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER \n+ * CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF \n+ * THE USE OF OR INABILITY TO USE SOFTWARE, EVEN IF SUN HAS BEEN \n+ * ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n+ * \n+ * You acknowledge that Software is not designed, licensed or \n+ * intended for use in the design, construction, operation or \n+ * maintenance of any nuclear facility. \n+ *\/\n+\n+package sample.module;\n+\n+import java.util.*;\n+import java.io.IOException;\n+import javax.security.auth.*;\n+import javax.security.auth.callback.*;\n+import javax.security.auth.login.*;\n+import javax.security.auth.spi.*;\n+import sample.principal.SamplePrincipal;\n+\n+\/**\n+ * <p> This sample LoginModule authenticates users with a password.\n+ * \n+ * <p> This LoginModule only recognizes one user:\ttestUser\n+ * <p> testUser's password is:\ttestPassword\n+ *\n+ * <p> If testUser successfully authenticates itself,\n+ * a <code>SamplePrincipal<\/code> with the testUser's user name\n+ * is added to the Subject.\n+ *\n+ * <p> This LoginModule recognizes the debug option.\n+ * If set to true in the login Configuration,\n+ * debug messages will be output to the output stream, System.out.\n+ *\n+ * @version 1.18, 01\/11\/00\n+ *\/\n+public class SampleLoginModule implements LoginModule {\n+\n+    \/\/ initial state\n+    private Subject subject;\n+    private CallbackHandler callbackHandler;\n+    private Map sharedState;\n+    private Map options;\n+\n+    \/\/ configurable option\n+    private boolean debug = false;\n+\n+    \/\/ the authentication status\n+    private boolean succeeded = false;\n+    private boolean commitSucceeded = false;\n+\n+    \/\/ username and password\n+    private String username;\n+    private char[] password;\n+\n+    \/\/ testUser's SamplePrincipal\n+    private SamplePrincipal userPrincipal;\n+\n+    \/**\n+     * Initialize this <code>LoginModule<\/code>.\n+     *\n+     * <p>\n+     *\n+     * @param subject the <code>Subject<\/code> to be authenticated. <p>\n+     *\n+     * @param callbackHandler a <code>CallbackHandler<\/code> for communicating\n+     *\t\t\twith the end user (prompting for user names and\n+     *\t\t\tpasswords, for example). <p>\n+     *\n+     * @param sharedState shared <code>LoginModule<\/code> state. <p>\n+     *\n+     * @param options options specified in the login\n+     *\t\t\t<code>Configuration<\/code> for this particular\n+     *\t\t\t<code>LoginModule<\/code>.\n+     *\/\n+    public void initialize(Subject subject, CallbackHandler callbackHandler,\n+\t\t\tMap sharedState, Map options) {\n+ \n+\tthis.subject = subject;\n+\tthis.callbackHandler = callbackHandler;\n+\tthis.sharedState = sharedState;\n+\tthis.options = options;\n+\n+\t\/\/ initialize any configured options\n+\tdebug = \"true\".equalsIgnoreCase((String)options.get(\"debug\"));\n+    }\n+\n+    \/**\n+     * Authenticate the user by prompting for a user name and password.\n+     *\n+     * <p>\n+     *\n+     * @return true in all cases since this <code>LoginModule<\/code>\n+     *\t\tshould not be ignored.\n+     *\n+     * @exception FailedLoginException if the authentication fails. <p>\n+     *\n+     * @exception LoginException if this <code>LoginModule<\/code>\n+     *\t\tis unable to perform the authentication.\n+     *\/\n+    public boolean login() throws LoginException {\n+\n+\t\/\/ prompt for a user name and password\n+\tif (callbackHandler == null)\n+\t    throw new LoginException(\"Error: no CallbackHandler available \" +\n+\t\t\t\"to garner authentication information from the user\");\n+\n+\tCallback[] callbacks = new Callback[2];\n+\tcallbacks[0] = new NameCallback(\"user name: \");\n+\tcallbacks[1] = new PasswordCallback(\"password: \", false);\n+ \n+\ttry {\n+\t    callbackHandler.handle(callbacks);\n+\t    username = ((NameCallback)callbacks[0]).getName();\n+\t    char[] tmpPassword = ((PasswordCallback)callbacks[1]).getPassword();\n+\t    if (tmpPassword == null) {\n+\t\t\/\/ treat a NULL password as an empty password\n+\t\ttmpPassword = new char[0];\n+\t    }\n+\t    password = new char[tmpPassword.length];\n+\t    System.arraycopy(tmpPassword, 0,\n+\t\t\tpassword, 0, tmpPassword.length);\n+\t    ((PasswordCallback)callbacks[1]).clearPassword();\n+ \n+\t} catch (java.io.IOException ioe) {\n+\t    throw new LoginException(ioe.toString());\n+\t} catch (UnsupportedCallbackException uce) {\n+\t    throw new LoginException(\"Error: \" + uce.getCallback().toString() +\n+\t\t\" not available to garner authentication information \" +\n+\t\t\"from the user\");\n+\t}\n+\n+\t\/\/ print debugging information\n+\tif (debug) {\n+\t    System.out.println(\"\\t\\t[SampleLoginModule] \" +\n+\t\t\t\t\"user entered user name: \" +\n+\t\t\t\tusername);\n+\t    System.out.print(\"\\t\\t[SampleLoginModule] \" +\n+\t\t\t\t\"user entered password: \");\n+\t    for (int i = 0; i < password.length; i++)\n+\t\tSystem.out.print(password[i]);\n+\t    System.out.println();\n+\t}\n+\n+\t\/\/ verify the username\/password\n+\tboolean usernameCorrect = false;\n+\tboolean passwordCorrect = false;\n+\tif (username.equals(\"testUser\"))\n+\t    usernameCorrect = true;\n+\tif (usernameCorrect &&\n+\t    password.length == 12 &&\n+\t    password[0] == 't' &&\n+\t    password[1] == 'e' &&\n+\t    password[2] == 's' &&\n+\t    password[3] == 't' &&\n+\t    password[4] == 'P' &&\n+\t    password[5] == 'a' &&\n+\t    password[6] == 's' &&\n+\t    password[7] == 's' &&\n+\t    password[8] == 'w' &&\n+\t    password[9] == 'o' &&\n+\t    password[10] == 'r' &&\n+\t    password[11] == 'd') {\n+\n+\t    \/\/ authentication succeeded!!!\n+\t    passwordCorrect = true;\n+\t    if (debug)\n+\t\tSystem.out.println(\"\\t\\t[SampleLoginModule] \" +\n+\t\t\t\t\"authentication succeeded\");\n+\t    succeeded = true;\n+\t    return true;\n+\t} else {\n+\n+\t    \/\/ authentication failed -- clean out state\n+\t    if (debug)\n+\t\tSystem.out.println(\"\\t\\t[SampleLoginModule] \" +\n+\t\t\t\t\"authentication failed\");\n+\t    succeeded = false;\n+\t    username = null;\n+\t    for (int i = 0; i < password.length; i++)\n+\t\tpassword[i] = ' ';\n+\t    password = null;\n+\t    if (!usernameCorrect) {\n+\t\tthrow new FailedLoginException(\"User Name Incorrect\");\n+\t    } else {\n+\t\tthrow new FailedLoginException(\"Password Incorrect\");\n+\t    }\n+\t}\n+    }\n+\n+    \/**\n+     * <p> This method is called if the LoginContext's\n+     * overall authentication succeeded\n+     * (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules\n+     * succeeded).\n+     *\n+     * <p> If this LoginModule's own authentication attempt\n+     * succeeded (checked by retrieving the private state saved by the\n+     * <code>login<\/code> method), then this method associates a\n+     * <code>SamplePrincipal<\/code>\n+     * with the <code>Subject<\/code> located in the\n+     * <code>LoginModule<\/code>.  If this LoginModule's own\n+     * authentication attempted failed, then this method removes\n+     * any state that was originally saved.\n+     *\n+     * <p>\n+     *\n+     * @exception LoginException if the commit fails.\n+     *\n+     * @return true if this LoginModule's own login and commit\n+     *\t\tattempts succeeded, or false otherwise.\n+     *\/\n+    public boolean commit() throws LoginException {\n+\tif (succeeded == false) {\n+\t    return false;\n+\t} else {\n+\t    \/\/ add a Principal (authenticated identity)\n+\t    \/\/ to the Subject\n+\n+\t    \/\/ assume the user we authenticated is the SamplePrincipal\n+\t    userPrincipal = new SamplePrincipal(username);\n+\t    if (!subject.getPrincipals().contains(userPrincipal))\n+\t\tsubject.getPrincipals().add(userPrincipal);\n+\n+\t    if (debug) {\n+\t\tSystem.out.println(\"\\t\\t[SampleLoginModule] \" +\n+\t\t\t\t\"added SamplePrincipal to Subject\");\n+\t    }\n+\n+\t    \/\/ in any case, clean out state\n+\t    username = null;\n+\t    for (int i = 0; i < password.length; i++)\n+\t\tpassword[i] = ' ';\n+\t    password = null;\n+\n+\t    commitSucceeded = true;\n+\t    return true;\n+\t}\n+    }\n+\n+    \/**\n+     * <p> This method is called if the LoginContext's\n+     * overall authentication failed.\n+     * (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules\n+     * did not succeed).\n+     *\n+     * <p> If this LoginModule's own authentication attempt\n+     * succeeded (checked by retrieving the private state saved by the\n+     * <code>login<\/code> and <code>commit<\/code> methods),\n+     * then this method cleans up any state that was originally saved.\n+     *\n+     * <p>\n+     *\n+     * @exception LoginException if the abort fails.\n+     *\n+     * @return false if this LoginModule's own login and\/or commit attempts\n+     *\t\tfailed, and true otherwise.\n+     *\/\n+    public boolean abort() throws LoginException {\n+\tif (succeeded == false) {\n+\t    return false;\n+\t} else if (succeeded == true && commitSucceeded == false) {\n+\t    \/\/ login succeeded but overall authentication failed\n+\t    succeeded = false;\n+\t    username = null;\n+\t    if (password != null) {\n+\t\tfor (int i = 0; i < password.length; i++)\n+\t\t    password[i] = ' ';\n+\t\tpassword = null;\n+\t    }\n+\t    userPrincipal = null;\n+\t} else {\n+\t    \/\/ overall authentication succeeded and commit succeeded,\n+\t    \/\/ but someone else's commit failed\n+\t    logout();\n+\t}\n+\treturn true;\n+    }\n+\n+    \/**\n+     * Logout the user.\n+     *\n+     * <p> This method removes the <code>SamplePrincipal<\/code>\n+     * that was added by the <code>commit<\/code> method.\n+     *\n+     * <p>\n+     *\n+     * @exception LoginException if the logout fails.\n+     *\n+     * @return true in all cases since this <code>LoginModule<\/code>\n+     *          should not be ignored.\n+     *\/\n+    public boolean logout() throws LoginException {\n+\n+\tsubject.getPrincipals().remove(userPrincipal);\n+\tsucceeded = false;\n+\tsucceeded = commitSucceeded;\n+\tusername = null;\n+\tif (password != null) {\n+\t    for (int i = 0; i < password.length; i++)\n+\t\tpassword[i] = ' ';\n+\t    password = null;\n+\t}\n+\tuserPrincipal = null;\n+\treturn true;\n+    }\n+}\n","filename":"test\/jdk\/javax\/security\/auth\/login\/LoginContext\/jaaslogin\/sample\/module\/SampleLoginModule.java","additions":337,"deletions":0,"binary":false,"changes":337,"status":"added"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * @(#)SamplePrincipal.java\t1.4 00\/01\/11\n+ *\n+ * Copyright 2000-2002 Sun Microsystems, Inc. All Rights Reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or \n+ * without modification, are permitted provided that the following \n+ * conditions are met:\n+ * \n+ * -Redistributions of source code must retain the above copyright  \n+ * notice, this  list of conditions and the following disclaimer.\n+ * \n+ * -Redistribution in binary form must reproduct the above copyright \n+ * notice, this list of conditions and the following disclaimer in \n+ * the documentation and\/or other materials provided with the \n+ * distribution.\n+ * \n+ * Neither the name of Sun Microsystems, Inc. or the names of \n+ * contributors may be used to endorse or promote products derived \n+ * from this software without specific prior written permission.\n+ * \n+ * This software is provided \"AS IS,\" without a warranty of any \n+ * kind. ALL EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND \n+ * WARRANTIES, INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY, \n+ * FITNESS FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT, ARE HEREBY \n+ * EXCLUDED. SUN AND ITS LICENSORS SHALL NOT BE LIABLE FOR ANY \n+ * DAMAGES OR LIABILITIES  SUFFERED BY LICENSEE AS A RESULT OF  OR \n+ * RELATING TO USE, MODIFICATION OR DISTRIBUTION OF THE SOFTWARE OR \n+ * ITS DERIVATIVES. IN NO EVENT WILL SUN OR ITS LICENSORS BE LIABLE \n+ * FOR ANY LOST REVENUE, PROFIT OR DATA, OR FOR DIRECT, INDIRECT, \n+ * SPECIAL, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER \n+ * CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF \n+ * THE USE OF OR INABILITY TO USE SOFTWARE, EVEN IF SUN HAS BEEN \n+ * ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n+ * \n+ * You acknowledge that Software is not designed, licensed or \n+ * intended for use in the design, construction, operation or \n+ * maintenance of any nuclear facility. \n+ *\/\n+\n+package sample.principal;\n+\n+import java.security.Principal;\n+\n+\/**\n+ * <p> This class implements the <code>Principal<\/code> interface\n+ * and represents a Sample user.\n+ *\n+ * <p> Principals such as this <code>SamplePrincipal<\/code>\n+ * may be associated with a particular <code>Subject<\/code>\n+ * to augment that <code>Subject<\/code> with an additional\n+ * identity.  Refer to the <code>Subject<\/code> class for more information\n+ * on how to achieve this.  Authorization decisions can then be based upon \n+ * the Principals associated with a <code>Subject<\/code>.\n+ * \n+ * @version 1.4, 01\/11\/00\n+ * @see java.security.Principal\n+ * @see javax.security.auth.Subject\n+ *\/\n+public class SamplePrincipal implements Principal, java.io.Serializable {\n+\n+    \/**\n+     * @serial\n+     *\/\n+    private String name;\n+\n+    \/**\n+     * Create a SamplePrincipal with a Sample username.\n+     *\n+     * <p>\n+     *\n+     * @param name the Sample username for this user.\n+     *\n+     * @exception NullPointerException if the <code>name<\/code>\n+     *\t\t\tis <code>null<\/code>.\n+     *\/\n+    public SamplePrincipal(String name) {\n+\tif (name == null)\n+\t    throw new NullPointerException(\"illegal null input\");\n+\n+\tthis.name = name;\n+    }\n+\n+    \/**\n+     * Return the Sample username for this <code>SamplePrincipal<\/code>.\n+     *\n+     * <p>\n+     *\n+     * @return the Sample username for this <code>SamplePrincipal<\/code>\n+     *\/\n+    public String getName() {\n+\treturn name;\n+    }\n+\n+    \/**\n+     * Return a string representation of this <code>SamplePrincipal<\/code>.\n+     *\n+     * <p>\n+     *\n+     * @return a string representation of this <code>SamplePrincipal<\/code>.\n+     *\/\n+    public String toString() {\n+\treturn(\"SamplePrincipal:  \" + name);\n+    }\n+\n+    \/**\n+     * Compares the specified Object with this <code>SamplePrincipal<\/code>\n+     * for equality.  Returns true if the given object is also a\n+     * <code>SamplePrincipal<\/code> and the two SamplePrincipals\n+     * have the same username.\n+     *\n+     * <p>\n+     *\n+     * @param o Object to be compared for equality with this\n+     *\t\t<code>SamplePrincipal<\/code>.\n+     *\n+     * @return true if the specified Object is equal equal to this\n+     *\t\t<code>SamplePrincipal<\/code>.\n+     *\/\n+    public boolean equals(Object o) {\n+\tif (o == null)\n+\t    return false;\n+\n+        if (this == o)\n+            return true;\n+ \n+        if (!(o instanceof SamplePrincipal))\n+            return false;\n+        SamplePrincipal that = (SamplePrincipal)o;\n+\n+\tif (this.getName().equals(that.getName()))\n+\t    return true;\n+\treturn false;\n+    }\n+ \n+    \/**\n+     * Return a hash code for this <code>SamplePrincipal<\/code>.\n+     *\n+     * <p>\n+     *\n+     * @return a hash code for this <code>SamplePrincipal<\/code>.\n+     *\/\n+    public int hashCode() {\n+\treturn name.hashCode();\n+    }\n+}\n","filename":"test\/jdk\/javax\/security\/auth\/login\/LoginContext\/jaaslogin\/sample\/principal\/SamplePrincipal.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"},{"patch":"@@ -0,0 +1,5 @@\n+\/** Login Configuration for the JAAS Sample Application **\/\n+\n+Sample {\n+   sample.module.SampleLoginModule required debug=true;\n+};\n","filename":"test\/jdk\/javax\/security\/auth\/login\/LoginContext\/jaaslogin\/samplejaas.config","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"}]}