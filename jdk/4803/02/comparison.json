{"files":[{"patch":"@@ -273,2 +273,8 @@\n-  ik->vtable().initialize_vtable();\n-  ik->itable().initialize_itable();\n+  if (ik->is_linked()) {\n+    \/\/ If the class has already been linked, we must relayout the i\/v tables, whose order depends\n+    \/\/ on the method sorting order.\n+    \/\/ If the class is unlinked, we cannot layout the i\/v tables yet. This is OK, as the\n+    \/\/ i\/v tables will be initialized at runtime after bytecode verification.\n+    ik->vtable().initialize_vtable();\n+    ik->itable().initialize_itable();\n+  }\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -395,1 +395,1 @@\n-    if (ik->can_be_verified_at_dumptime()) {\n+    if (ik->can_be_verified_at_dumptime() && ik->is_linked()) {\n@@ -574,4 +574,20 @@\n-bool MetaspaceShared::linking_required(InstanceKlass* ik) {\n-  \/\/ For static CDS dump, do not link old classes.\n-  \/\/ For dynamic CDS dump, only link classes loaded by the builtin class loaders.\n-  return DumpSharedSpaces ? ik->can_be_verified_at_dumptime() : !ik->is_shared_unregistered_class();\n+\/\/ Check if we can eagerly link this class at dump time, so we can avoid the\n+\/\/ runtime linking overhead (especially verification)\n+bool MetaspaceShared::may_be_eagerly_linked(InstanceKlass* ik) {\n+  if (!ik->can_be_verified_at_dumptime()) {\n+    \/\/ For old classes, try to leave them in the unlinked state, so\n+    \/\/ we can still store them in the archive. They must be\n+    \/\/ linked\/verified at runtime.\n+    return false;\n+  }\n+  if (DynamicDumpSharedSpaces && ik->is_shared_unregistered_class()) {\n+    \/\/ Linking of unregistered classes at this stage may cause more\n+    \/\/ classes to be resolved, resulting in calls to ClassLoader.loadClass()\n+    \/\/ that may not be expected by custom class loaders.\n+    \/\/\n+    \/\/ It's OK to do this for the built-in loaders as we know they can\n+    \/\/ tolerate this. (Note that unregistered classes are loaded by the NULL\n+    \/\/ loader during DumpSharedSpaces).\n+    return false;\n+  }\n+  return true;\n@@ -617,1 +633,1 @@\n-          if (linking_required(ik)) {\n+          if (may_be_eagerly_linked(ik)) {\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-  static bool linking_required(InstanceKlass* ik) NOT_CDS_RETURN_(false);\n+  static bool may_be_eagerly_linked(InstanceKlass* ik) NOT_CDS_RETURN_(false);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -265,0 +265,6 @@\n+  if (k->is_scratch_class()) {\n+    return warn_excluded(k, \"A scratch class\");\n+  }\n+  if (!k->is_loaded()) {\n+    return warn_excluded(k, \"Not in loaded state\");\n+  }\n@@ -286,11 +292,2 @@\n-  if (k->init_state() < InstanceKlass::linked) {\n-    \/\/ In CDS dumping, we will attempt to link all classes. Those that fail to link will\n-    \/\/ be recorded in DumpTimeClassInfo.\n-    Arguments::assert_is_dumping_archive();\n-\n-    \/\/ TODO -- rethink how this can be handled.\n-    \/\/ We should try to link ik, however, we can't do it here because\n-    \/\/ 1. We are at VM exit\n-    \/\/ 2. linking a class may cause other classes to be loaded, which means\n-    \/\/    a custom ClassLoader.loadClass() may be called, at a point where the\n-    \/\/    class loader doesn't expect it.\n+\n+  if (!k->is_linked()) {\n@@ -299,4 +296,0 @@\n-    } else {\n-      if (k->can_be_verified_at_dumptime()) {\n-        return warn_excluded(k, \"Not linked\");\n-      }\n@@ -304,12 +297,10 @@\n-  }\n-  if (DynamicDumpSharedSpaces && k->major_version() < 50 \/*JAVA_6_VERSION*\/) {\n-    \/\/ In order to support old classes during dynamic dump, class rewriting needs to\n-    \/\/ be reverted. This would result in more complex code and testing but not much gain.\n-    ResourceMark rm;\n-    log_warning(cds)(\"Pre JDK 6 class not supported by CDS: %u.%u %s\",\n-                     k->major_version(),  k->minor_version(), k->name()->as_C_string());\n-    return true;\n-  }\n-\n-  if (!k->can_be_verified_at_dumptime() && k->is_linked()) {\n-    return warn_excluded(k, \"Old class has been linked\");\n+  } else {\n+    if (!k->can_be_verified_at_dumptime()) {\n+      \/\/ We have an old class that has been linked (e.g., it's been executed during\n+      \/\/ dump time). This class has been verified using the old verifier, which\n+      \/\/ doesn't save the verification constraints, so check_verification_constraints()\n+      \/\/ won't work at runtime.\n+      \/\/ As a result, we cannot store this class. It must be loaded and fully verified\n+      \/\/ at runtime.\n+      return warn_excluded(k, \"Old class has been linked\");\n+    }\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":18,"deletions":27,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -574,1 +574,0 @@\n-    assert(!klass->can_be_verified_at_dumptime(), \"only shared old classes aren't rewritten\");\n","filename":"src\/hotspot\/share\/interpreter\/rewriter.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -373,0 +373,6 @@\n+  \/\/ Shared ConstantPools are in the RO region, so the _flags cannot be modified.\n+  \/\/ The _on_stack flag is used to prevent ConstantPools from deallocation during\n+  \/\/ class redefinition. Since shared ConstantPools cannot be deallocated anyway,\n+  \/\/ we always set _on_stack to true to avoid having to change _flags during runtime.\n+  _flags |= (_on_stack | _is_shared);\n+\n@@ -385,5 +391,0 @@\n-  \/\/ Shared ConstantPools are in the RO region, so the _flags cannot be modified.\n-  \/\/ The _on_stack flag is used to prevent ConstantPools from deallocation during\n-  \/\/ class redefinition. Since shared ConstantPools cannot be deallocated anyway,\n-  \/\/ we always set _on_stack to true to avoid having to change _flags during runtime.\n-  _flags |= (_on_stack | _is_shared);\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -904,0 +904,3 @@\n+        if (is_shared()) {\n+          assert(!verified_at_dump_time(), \"must be\");\n+        }\n@@ -935,1 +938,2 @@\n-      \/\/ 2) the class is loaded by built-in class loader but failed to add archived loader constraints\n+      \/\/ 2) the class is loaded by built-in class loader but failed to add archived loader constraints or\n+      \/\/ 3) the class was not verified during dump time\n@@ -937,1 +941,2 @@\n-      if (is_shared() && SystemDictionaryShared::check_linking_constraints(THREAD, this)) {\n+      if (is_shared() && verified_at_dump_time() &&\n+          SystemDictionaryShared::check_linking_constraints(THREAD, this)) {\n@@ -2398,1 +2403,2 @@\n-  if (can_be_verified_at_dumptime()) {\n+  if (is_linked()) {\n+    assert(can_be_verified_at_dumptime(), \"must be\");\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -525,3 +525,8 @@\n-  it->push((Klass**)&_subklass);\n-  it->push((Klass**)&_next_sibling);\n-  it->push(&_next_link);\n+  if (!Arguments::is_dumping_archive()) {\n+    \/\/ If dumping archive, these may point to excluded classes. There's no need\n+    \/\/ to follow these pointers anyway, as they will be set to NULL in\n+    \/\/ remove_unshareable_info().\n+    it->push((Klass**)&_subklass);\n+    it->push((Klass**)&_next_sibling);\n+    it->push(&_next_link);\n+  }\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-                               \"Pre JDK 6 class not supported by CDS\");\n+                               \"Skipping Hello: Old class has been linked\");\n@@ -86,1 +86,1 @@\n-                               \"Pre JDK 6 class not supported by CDS\");\n+                               \"Skipping Hello: Old class has been linked\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/OldClassTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-                                   \"Pre JDK 6 class not supported by CDS: 49.0 OldInfDefMeth\");\n+                                   \"Skipping OldInfDefMeth: Old class has been linked\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/OldInfExtendsInfDefMeth.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-                                   \"Pre JDK 6 class not supported by CDS: 49.0 OldSuper\",\n+                                   \"Skipping OldSuper: Old class has been linked\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/OldSuperClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-                                   \"Pre JDK 6 class not supported by CDS: 49.0 OldInf\",\n+                                   \"Skipping OldInf: Old class has been linked\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/OldSuperInf.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-                                   \"Pre JDK 6 class not supported by CDS: 49.0 OldInf\",\n+                                   \"Skipping OldInf: Old class has been linked\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/OldSuperInfIndirect.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+        \/\/ 1. Host class loaded by a custom loader is initialized during dump time.\n@@ -51,1 +52,1 @@\n-            \"-cp\", appJar, mainClass, appJar)\n+            \"-cp\", appJar, mainClass, appJar, \"init\")\n@@ -59,1 +60,1 @@\n-            \"-cp\", appJar, mainClass, appJar)\n+            \"-cp\", appJar, mainClass, appJar, \"init\")\n@@ -62,0 +63,17 @@\n+                      .shouldContain(\"LambHello source: shared objects file (top)\")\n+                      .shouldHaveExitValue(0);\n+            });\n+\n+        \/\/ 2. Host class loaded by a custom loader is NOT initialized during dump time.\n+        dump(topArchiveName,\n+            \"-Xlog:class+load,cds=debug,cds+dynamic\",\n+            \"-cp\", appJar, mainClass, appJar)\n+            .assertNormalExit(output -> {\n+                output.shouldHaveExitValue(0);\n+            });\n+\n+        run(topArchiveName,\n+            \"-Xlog:class+load,class+unload\",\n+            \"-cp\", appJar, mainClass, appJar)\n+            .assertNormalExit(output -> {\n+                output.shouldContain(\"LambHello source: shared objects file (top)\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaCustomLoader.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -63,2 +63,2 @@\n-                \/\/ Nest host should be skipped since it is not in the linked state.\n-                output.shouldContain(\"Skipping Outer: Not linked\")\n+                \/\/ Nest host should not be skipped although it is not in the linked state.\n+                output.shouldNotContain(\"Skipping Outer: Not linked\")\n@@ -78,2 +78,1 @@\n-                \/\/ Only the Inner class is loaded from the dynamic archive.\n-                \/\/ The nest host (Outer) and its lambda proxy are not loaded\n+                \/\/ Only the nest host (Outer) and the Inner class are loaded\n@@ -81,1 +80,2 @@\n-                output.shouldMatch(\"class.load.*Outer.source:.*lambda_proxy_shutdown.jar\")\n+                \/\/ The lambda proxy is not loaded from the dynamic archive.\n+                output.shouldMatch(\"class.load.*Outer.source:.*shared.*objects.*file.*(top)\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaProxyDuringShutdown.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -87,3 +87,0 @@\n-                       .shouldContain(\"Pre JDK 6 class not supported by CDS: 49.0 \" + loadeesArray[0])\n-                       .shouldMatch(\"Skipping \" + loadeesArray[1] +\":.*\" + loadeesArray[0] + \" is excluded\")\n-                       .shouldMatch(\"Skipping \" + loadeesArray[2] +\": super.*\" + loadeesArray[1] + \" is excluded\")\n@@ -108,1 +105,1 @@\n-                    output.shouldMatch(\".class.load. \" + loadee + \" source:.*\" + loadeesJar);\n+                    output.shouldContain(loadee + \" source: shared objects file (top)\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/OldClassAndInf.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,0 +39,5 @@\n+        boolean init = false;\n+        if (args.length ==2 && args[1].equals(\"init\")) {\n+            init = true;\n+        }\n+\n@@ -41,1 +46,1 @@\n-        Class c = Class.forName(className, true, urlClassLoader);\n+        Class c = Class.forName(className, init, urlClassLoader);\n@@ -44,2 +49,0 @@\n-        Object o = c.newInstance();\n-\n@@ -51,3 +54,6 @@\n-        Method method = c.getMethod(\"main\", String[].class);\n-        String[] params = null;\n-        method.invoke(null, (Object)params);\n+        if (init) {\n+            Object o = c.newInstance();\n+            Method method = c.getMethod(\"main\", String[].class);\n+            String[] params = null;\n+            method.invoke(null, (Object)params);\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\/CustomLoaderApp.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import jdk.test.lib.cds.CDSTestUtils;\n@@ -58,2 +57,0 @@\n-        boolean dynamicMode = CDSTestUtils.DYNAMIC_DUMP;\n-\n@@ -61,7 +58,2 @@\n-        \/\/ which have been linked during static CDS dump.\n-        \/\/ Dynamic CDS dump doesn't support old class.\n-        if (!dynamicMode) {\n-            output.shouldContain(\"Skipping OldSuper: Old class has been linked\");\n-        } else {\n-            output.shouldContain(\"Pre JDK 6 class not supported by CDS: 49.0 OldSuper\");\n-        }\n+        \/\/ which have been linked during CDS dump.\n+        output.shouldContain(\"Skipping OldSuper: Old class has been linked\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/dumpingWithAgent\/OldClassWithJavaAgent.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"}]}