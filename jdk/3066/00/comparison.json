{"files":[{"patch":"@@ -828,0 +828,64 @@\n+#ifdef ASSERT\n+inline static void assert_valid_fd(fieldDescriptor* fd) {\n+  assert(fd->has_initial_value(), \"caller should have checked this\");\n+  assert(fd->field_type() == T_OBJECT, \"caller should have checked this\");\n+  \/\/ Can't use vmSymbols::string_signature() as fd->signature() may have been relocated\n+  \/\/ during DumpSharedSpaces\n+  assert(fd->signature()->equals(\"Ljava\/lang\/String;\"), \"just checking\");\n+}\n+#endif\n+\n+static void initialize_static_string_field(fieldDescriptor* fd, Handle mirror, TRAPS) {\n+  DEBUG_ONLY(assert_valid_fd(fd);)\n+  oop string = fd->string_initial_value(CHECK);\n+  mirror()->obj_field_put(fd->offset(), string);\n+}\n+\n+static void initialize_static_string_field_for_dump(fieldDescriptor* fd, Handle mirror) {\n+  DEBUG_ONLY(assert_valid_fd(fd);)\n+  assert(DumpSharedSpaces, \"must be\");\n+  if (HeapShared::is_archived_object(mirror())) {\n+    \/\/ Archive the String field and update the pointer.\n+    oop s = mirror()->obj_field(fd->offset());\n+    oop archived_s = StringTable::create_archived_string(s);\n+    mirror()->obj_field_put(fd->offset(), archived_s);\n+  } else {\n+    guarantee(false, \"Unexpected\");\n+  }\n+}\n+\n+static void initialize_static_primitive_field(fieldDescriptor* fd, Handle mirror) {\n+  assert(fd->has_initial_value(), \"caller should have checked this\");\n+  BasicType t = fd->field_type();\n+  switch (t) {\n+  case T_BYTE:\n+    mirror()->byte_field_put(fd->offset(), fd->int_initial_value());\n+    break;\n+  case T_BOOLEAN:\n+    mirror()->bool_field_put(fd->offset(), fd->int_initial_value());\n+    break;\n+  case T_CHAR:\n+    mirror()->char_field_put(fd->offset(), fd->int_initial_value());\n+    break;\n+  case T_SHORT:\n+    mirror()->short_field_put(fd->offset(), fd->int_initial_value());\n+    break;\n+  case T_INT:\n+    mirror()->int_field_put(fd->offset(), fd->int_initial_value());\n+    break;\n+  case T_FLOAT:\n+    mirror()->float_field_put(fd->offset(), fd->float_initial_value());\n+    break;\n+  case T_DOUBLE:\n+    mirror()->double_field_put(fd->offset(), fd->double_initial_value());\n+    break;\n+  case T_LONG:\n+    mirror()->long_field_put(fd->offset(), fd->long_initial_value());\n+    break;\n+  default:\n+    \/\/ Illegal ConstantValue attribute in class file should have been\n+    \/\/ caught during classfile parsing.\n+    ShouldNotReachHere();\n+  }\n+}\n+\n@@ -831,46 +895,4 @@\n-    BasicType t = fd->field_type();\n-    switch (t) {\n-      case T_BYTE:\n-        mirror()->byte_field_put(fd->offset(), fd->int_initial_value());\n-              break;\n-      case T_BOOLEAN:\n-        mirror()->bool_field_put(fd->offset(), fd->int_initial_value());\n-              break;\n-      case T_CHAR:\n-        mirror()->char_field_put(fd->offset(), fd->int_initial_value());\n-              break;\n-      case T_SHORT:\n-        mirror()->short_field_put(fd->offset(), fd->int_initial_value());\n-              break;\n-      case T_INT:\n-        mirror()->int_field_put(fd->offset(), fd->int_initial_value());\n-        break;\n-      case T_FLOAT:\n-        mirror()->float_field_put(fd->offset(), fd->float_initial_value());\n-        break;\n-      case T_DOUBLE:\n-        mirror()->double_field_put(fd->offset(), fd->double_initial_value());\n-        break;\n-      case T_LONG:\n-        mirror()->long_field_put(fd->offset(), fd->long_initial_value());\n-        break;\n-      case T_OBJECT:\n-        {\n-          \/\/ Can't use vmSymbols::string_signature() as fd->signature() may have been relocated\n-          \/\/ during DumpSharedSpaces\n-          assert(fd->signature()->equals(\"Ljava\/lang\/String;\"),\n-                 \"just checking\");\n-          if (DumpSharedSpaces && HeapShared::is_archived_object(mirror())) {\n-            \/\/ Archive the String field and update the pointer.\n-            oop s = mirror()->obj_field(fd->offset());\n-            oop archived_s = StringTable::create_archived_string(s);\n-            mirror()->obj_field_put(fd->offset(), archived_s);\n-          } else {\n-            oop string = fd->string_initial_value(CHECK);\n-            mirror()->obj_field_put(fd->offset(), string);\n-          }\n-        }\n-        break;\n-      default:\n-        THROW_MSG(vmSymbols::java_lang_ClassFormatError(),\n-                  \"Illegal ConstantValue attribute in class file\");\n+    if (fd->field_type() != T_OBJECT) {\n+      initialize_static_primitive_field(fd, mirror);\n+    } else {\n+      initialize_static_string_field(fd, mirror, CHECK);\n@@ -881,0 +903,10 @@\n+static void initialize_static_field_for_dump(fieldDescriptor* fd, Handle mirror) {\n+  assert(mirror.not_null() && fd->is_static(), \"just checking\");\n+  if (fd->has_initial_value()) {\n+    if (fd->field_type() != T_OBJECT) {\n+      initialize_static_primitive_field(fd, mirror);\n+    } else {\n+      initialize_static_string_field_for_dump(fd, mirror);\n+    }\n+  }\n+}\n@@ -1083,1 +1115,1 @@\n-      initialize_static_field(fd, _m, Thread::current());\n+      initialize_static_field_for_dump(fd, _m);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":79,"deletions":47,"binary":false,"changes":126,"status":"modified"}]}