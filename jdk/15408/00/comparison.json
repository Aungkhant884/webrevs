{"files":[{"patch":"@@ -27,14 +27,3 @@\n-import com.sun.tools.classfile.Annotation;\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.Attributes;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPool;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Field;\n-import com.sun.tools.classfile.LocalVariableTable_attribute;\n-import com.sun.tools.classfile.LocalVariableTypeTable_attribute;\n-import com.sun.tools.classfile.Method;\n-import com.sun.tools.classfile.RuntimeInvisibleAnnotations_attribute;\n-import com.sun.tools.classfile.RuntimeParameterAnnotations_attribute;\n-import com.sun.tools.classfile.RuntimeVisibleAnnotations_attribute;\n-import com.sun.tools.classfile.Signature_attribute;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.constantpool.*;\n@@ -83,1 +72,1 @@\n-            private final ClassFile cf;\n+            private final ClassModel cm;\n@@ -85,2 +74,2 @@\n-            private DescriptorsScanner(ClassFile cf) {\n-                this.cf = cf;\n+            private DescriptorsScanner(ClassModel cm) {\n+                this.cm = cm;\n@@ -97,1 +86,1 @@\n-                scanAttributes(cf.attributes, utf8Descriptors);\n+                scanAttributes(cm.attributes(), utf8Descriptors);\n@@ -102,1 +91,1 @@\n-            private void scanAttributes(Attributes attributes,\n+            private void scanAttributes(List<Attribute<?>> attributes,\n@@ -104,9 +93,4 @@\n-                for (Attribute a : attributes) {\n-                    if (a instanceof Signature_attribute) {\n-                        Signature_attribute sig = (Signature_attribute) a;\n-                        utf8Descriptors.add(sig.signature_index);\n-                    } else if (a instanceof RuntimeVisibleAnnotations_attribute) {\n-                        RuntimeVisibleAnnotations_attribute an\n-                                = (RuntimeVisibleAnnotations_attribute) a;\n-                        for (Annotation annotation : an.annotations) {\n-                            scanAnnotation(annotation, utf8Descriptors);\n+                for (Attribute<?> a : attributes) {\n+                    switch (a) {\n+                        case SignatureAttribute sig -> {\n+                            utf8Descriptors.add(sig.signature().index());\n@@ -114,5 +98,3 @@\n-                    } else if (a instanceof RuntimeInvisibleAnnotations_attribute) {\n-                        RuntimeInvisibleAnnotations_attribute an\n-                                = (RuntimeInvisibleAnnotations_attribute) a;\n-                        for (Annotation annotation : an.annotations) {\n-                            scanAnnotation(annotation, utf8Descriptors);\n+                        case RuntimeVisibleAnnotationsAttribute an -> {\n+                            for (Annotation annotation : an.annotations())\n+                                scanAnnotation(annotation, utf8Descriptors);\n@@ -120,6 +102,14 @@\n-                    } else if (a instanceof RuntimeParameterAnnotations_attribute) {\n-                        RuntimeParameterAnnotations_attribute rap\n-                                = (RuntimeParameterAnnotations_attribute) a;\n-                        for (Annotation[] arr : rap.parameter_annotations) {\n-                            for (Annotation an : arr) {\n-                                scanAnnotation(an, utf8Descriptors);\n+                        case RuntimeInvisibleAnnotationsAttribute an -> {\n+                            for (Annotation annotation : an.annotations())\n+                                scanAnnotation(annotation, utf8Descriptors);\n+                        }\n+                        case RuntimeVisibleParameterAnnotationsAttribute rap -> {\n+                            for (List<Annotation> arr : rap.parameterAnnotations()) {\n+                                for (Annotation an : arr)\n+                                    scanAnnotation(an, utf8Descriptors);\n+                            }\n+                        }\n+                        case RuntimeInvisibleParameterAnnotationsAttribute rap -> {\n+                            for (List<Annotation> arr : rap.parameterAnnotations()) {\n+                                for (Annotation an : arr)\n+                                    scanAnnotation(an, utf8Descriptors);\n@@ -128,6 +118,3 @@\n-                    } else if (a instanceof LocalVariableTable_attribute) {\n-                        LocalVariableTable_attribute lvt\n-                                = (LocalVariableTable_attribute) a;\n-                        for (LocalVariableTable_attribute.Entry entry\n-                                : lvt.local_variable_table) {\n-                            utf8Descriptors.add(entry.descriptor_index);\n+                        case LocalVariableTableAttribute lvt -> {\n+                            for (LocalVariableInfo entry: lvt.localVariables())\n+                                utf8Descriptors.add(entry.name().index());\n@@ -135,6 +122,3 @@\n-                    } else if (a instanceof LocalVariableTypeTable_attribute) {\n-                        LocalVariableTypeTable_attribute lvt\n-                                = (LocalVariableTypeTable_attribute) a;\n-                        for (LocalVariableTypeTable_attribute.Entry entry\n-                                : lvt.local_variable_table) {\n-                            utf8Descriptors.add(entry.signature_index);\n+                        case LocalVariableTypeTableAttribute lvt -> {\n+                            for (LocalVariableTypeInfo entry: lvt.localVariableTypes())\n+                                utf8Descriptors.add(entry.signature().index());\n@@ -142,0 +126,1 @@\n+                        default -> {}\n@@ -148,4 +133,4 @@\n-                utf8Descriptors.add(annotation.type_index);\n-                for (Annotation.element_value_pair evp : annotation.element_value_pairs) {\n-                    utf8Descriptors.add(evp.element_name_index);\n-                    scanElementValue(evp.value, utf8Descriptors);\n+                utf8Descriptors.add(annotation.className().index());\n+                for (AnnotationElement evp : annotation.elements()) {\n+                    utf8Descriptors.add(evp.name().index());\n+                    scanElementValue(evp.value(), utf8Descriptors);\n@@ -155,1 +140,1 @@\n-            private void scanElementValue(Annotation.element_value value,\n+            private void scanElementValue(AnnotationValue value,\n@@ -157,20 +142,10 @@\n-                if (value instanceof Annotation.Enum_element_value) {\n-                    Annotation.Enum_element_value eev\n-                            = (Annotation.Enum_element_value) value;\n-                    utf8Descriptors.add(eev.type_name_index);\n-                }\n-                if (value instanceof Annotation.Class_element_value) {\n-                    Annotation.Class_element_value eev\n-                            = (Annotation.Class_element_value) value;\n-                    utf8Descriptors.add(eev.class_info_index);\n-                }\n-                if (value instanceof Annotation.Annotation_element_value) {\n-                    Annotation.Annotation_element_value aev\n-                            = (Annotation.Annotation_element_value) value;\n-                    scanAnnotation(aev.annotation_value, utf8Descriptors);\n-                }\n-                if (value instanceof Annotation.Array_element_value) {\n-                    Annotation.Array_element_value aev\n-                            = (Annotation.Array_element_value) value;\n-                    for (Annotation.element_value v : aev.values) {\n-                        scanElementValue(v, utf8Descriptors);\n+                switch (value) {\n+                    case AnnotationValue.OfEnum eev ->\n+                        utf8Descriptors.add(eev.className().index());\n+                    case AnnotationValue.OfClass eev ->\n+                        utf8Descriptors.add(eev.className().index());\n+                    case AnnotationValue.OfAnnotation aev ->\n+                        scanAnnotation(aev.annotation(), utf8Descriptors);\n+                    case AnnotationValue.OfArray aev -> {\n+                        for (AnnotationValue v : aev.values())\n+                            scanElementValue(v, utf8Descriptors);\n@@ -178,0 +153,1 @@\n+                    default -> {}\n@@ -183,2 +159,2 @@\n-                for (Field field : cf.fields) {\n-                    int descriptorIndex = field.descriptor.index;\n+                for (FieldModel field : cm.fields()) {\n+                    int descriptorIndex = field.fieldType().index();\n@@ -186,1 +162,1 @@\n-                    scanAttributes(field.attributes, utf8Descriptors);\n+                    scanAttributes(field.attributes(), utf8Descriptors);\n@@ -193,2 +169,2 @@\n-                for (Method m : cf.methods) {\n-                    int descriptorIndex = m.descriptor.index;\n+                for (MethodModel m : cm.methods()) {\n+                    int descriptorIndex = m.methodType().index();\n@@ -196,1 +172,1 @@\n-                    scanAttributes(m.attributes, utf8Descriptors);\n+                    scanAttributes(m.attributes(), utf8Descriptors);\n@@ -202,1 +178,1 @@\n-                for (int i = 1; i < cf.constant_pool.size(); i++) {\n+                for (int i = 1; i < cm.constantPool().entryCount(); i += cm.constantPool().entryByIndex(i).width()) {\n@@ -204,5 +180,7 @@\n-                        ConstantPool.CPInfo info = cf.constant_pool.get(i);\n-                        if (info instanceof ConstantPool.CONSTANT_NameAndType_info) {\n-                            ConstantPool.CONSTANT_NameAndType_info nameAndType\n-                                    = (ConstantPool.CONSTANT_NameAndType_info) info;\n-                            utf8Descriptors.add(nameAndType.type_index);\n+                        PoolEntry info = cm.constantPool().entryByIndex(i);\n+                        switch (info) {\n+                            case NameAndTypeEntry nameAndType ->\n+                                utf8Descriptors.add(nameAndType.type().index());\n+                            case MethodTypeEntry mt ->\n+                                utf8Descriptors.add(mt.descriptor().index());\n+                            default -> {}\n@@ -210,11 +188,1 @@\n-                        if (info instanceof ConstantPool.CONSTANT_MethodType_info) {\n-                            ConstantPool.CONSTANT_MethodType_info mt\n-                                    = (ConstantPool.CONSTANT_MethodType_info) info;\n-                            utf8Descriptors.add(mt.descriptor_index);\n-                        }\n-\n-                        if (info instanceof ConstantPool.CONSTANT_Double_info\n-                                || info instanceof ConstantPool.CONSTANT_Long_info) {\n-                            i++;\n-                        }\n-                    } catch (ConstantPool.InvalidIndex ex) {\n+                    } catch (ConstantPoolException ex) {\n@@ -230,7 +198,1 @@\n-            ClassFile cf;\n-            try (InputStream stream = new ByteArrayInputStream(content)) {\n-                cf = ClassFile.read(stream);\n-            } catch (ConstantPoolException ex) {\n-                throw new IOException(\"Compressor EX \" + ex + \" for \"\n-                        + resource.path() + \" content.length \" + content.length, ex);\n-            }\n+            ClassModel cf = Classfile.of().parse(content);\n@@ -257,1 +219,1 @@\n-                    case ConstantPool.CONSTANT_Utf8: {\n+                    case Classfile.TAG_UTF8: {\n@@ -264,3 +226,1 @@\n-                                    = parseResult.types.stream().map((type) -> {\n-                                        return strings.addString(type);\n-                                    }).toList();\n+                                    = parseResult.types.stream().map(strings::addString).toList();\n@@ -283,3 +243,2 @@\n-\n-                    case ConstantPool.CONSTANT_Long:\n-                    case ConstantPool.CONSTANT_Double: {\n+                    case Classfile.TAG_LONG:\n+                    case Classfile.TAG_DOUBLE:\n@@ -287,1 +246,0 @@\n-                    }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StringSharingPlugin.java","additions":72,"deletions":114,"binary":false,"changes":186,"status":"modified"}]}