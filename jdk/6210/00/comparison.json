{"files":[{"patch":"@@ -675,0 +675,7 @@\n+\n+        \/\/ Scan the annotation element value and then attribute\n+        \/\/ the internal annotations to prevent the compiler from crashing\n+        if (tree.type != null && tree.type.tsym != null) {\n+            queueScanTreeAndTypeAnnotate(tree, env, tree.type.tsym, tree.pos());\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Annotate.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8274942\n+ * @summary javac should attribute the internal annotations of the annotation element value\n+ * @compile NestTypeAnnotation.java\n+ *\/\n+\n+import java.lang.annotation.*;\n+\n+public class NestTypeAnnotation {\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER})\n+    public @interface OuterAnnotation {\n+        int intVal();\n+        float floatVal();\n+    }\n+\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER})\n+    public @interface InnerAnnotation { }\n+\n+    public static void main(String[] args) {\n+        int intVal1 = (@OuterAnnotation(intVal = (@InnerAnnotation() int) 2.5, floatVal = (@InnerAnnotation() float) 2.5) int) 2.4;\n+        int[] arr = new int []{1, 2}; \/\/ use `2.4 * arr[0] + arr[1]` to prevent optimization.\n+        int intVal2 = (@OuterAnnotation(intVal = (@InnerAnnotation() int) 2.5, floatVal = (@InnerAnnotation() float) 2.5) int) (2.4 * arr[0] + arr[1]);\n+\n+        int[] singleArr1 = new @OuterAnnotation(intVal = (@InnerAnnotation() int) 2.5, floatVal = (@InnerAnnotation() float) 2.5) int [2];\n+        @OuterAnnotation(intVal = (@InnerAnnotation() int) 2.5, floatVal = (@InnerAnnotation() float) 2.5) int[] singleArr2 = new int [2];\n+        int[] singleArr3 = new  int @OuterAnnotation(intVal = (@InnerAnnotation() int) 2.5, floatVal = (@InnerAnnotation() float) 2.5) [2];\n+\n+        int[][] multiArr1 = new int @OuterAnnotation(intVal = (@InnerAnnotation() int) 2.5, floatVal = (@InnerAnnotation() float) 2.5) [2][3];\n+        int[][] multiArr2 = new int [2] @OuterAnnotation(intVal = (@InnerAnnotation() int) 2.5, floatVal = (@InnerAnnotation() float) 2.5) [3];\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/NestTypeAnnotation.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}