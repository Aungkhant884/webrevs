{"files":[{"patch":"@@ -197,1 +197,1 @@\n-  bool walk_all_metadata = InstanceKlass::has_previous_versions_and_reset();\n+  bool walk_all_metadata = InstanceKlass::should_clean_previous_versions_and_reset();\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataGraph.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-  do_cleaning = do_cleaning && (_should_clean_deallocate_lists || InstanceKlass::has_previous_versions());\n+  do_cleaning = do_cleaning && (_should_clean_deallocate_lists || InstanceKlass::clean_previous_versions());\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataGraph.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4024,1 +4024,1 @@\n-bool InstanceKlass::_has_previous_versions = false;\n+bool InstanceKlass::_clean_previous_versions = false;\n@@ -4031,3 +4031,3 @@\n-bool InstanceKlass::has_previous_versions_and_reset() {\n-  bool ret = _has_previous_versions;\n-  log_trace(redefine, class, iklass, purge)(\"Class unloading: has_previous_versions = %s\",\n+bool InstanceKlass::should_clean_previous_versions_and_reset() {\n+  bool ret = _clean_previous_versions;\n+  log_trace(redefine, class, iklass, purge)(\"Class unloading: clean_previous_versions = %s\",\n@@ -4035,1 +4035,1 @@\n-  _has_previous_versions = false;\n+  _clean_previous_versions = false;\n@@ -4092,1 +4092,0 @@\n-      log_trace(redefine, class, iklass, purge)(\"previous version \" PTR_FORMAT \" is alive\", p2i(pv_node));\n@@ -4096,2 +4095,8 @@\n-      \/\/ found a previous version for next time we do class unloading\n-      _has_previous_versions = true;\n+      if (pvcp->is_shared()) {\n+        \/\/ Shared previous versions can never be removed so no cleaning is needed.\n+        log_trace(redefine, class, iklass, purge)(\"previous version \" PTR_FORMAT \" is shared\", p2i(pv_node));\n+      } else {\n+        \/\/ Previous version alive, set that clean is needed for next time.\n+        _clean_previous_versions = true;\n+        log_trace(redefine, class, iklass, purge)(\"previous version \" PTR_FORMAT \" is alive\", p2i(pv_node));\n+      }\n@@ -4197,4 +4202,2 @@\n-  \/\/ Add previous version if any methods are still running.\n-  \/\/ Set has_previous_version flag for processing during class unloading.\n-  _has_previous_versions = true;\n-  log_trace(redefine, class, iklass, add) (\"scratch class added; one of its methods is on_stack.\");\n+  \/\/ Add previous version if any methods are still running or if this is\n+  \/\/ a shared class which should never be removed.\n@@ -4204,0 +4207,8 @@\n+  if (cp_ref->is_shared()) {\n+    log_trace(redefine, class, iklass, add) (\"scratch class added; class is shared\");\n+  } else {\n+    \/\/  We only set clean_previous_versions flag for processing during class\n+    \/\/ unloading for non-shared classes.\n+    _clean_previous_versions = true;\n+    log_trace(redefine, class, iklass, add) (\"scratch class added; one of its methods is on_stack.\");\n+  }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":23,"deletions":12,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -718,1 +718,1 @@\n-  static bool  _has_previous_versions;\n+  static bool  _clean_previous_versions;\n@@ -726,2 +726,2 @@\n-  static bool has_previous_versions_and_reset();\n-  static bool has_previous_versions() { return _has_previous_versions; }\n+  static bool should_clean_previous_versions_and_reset();\n+  static bool clean_previous_versions() { return _clean_previous_versions; }\n@@ -747,1 +747,1 @@\n-  static bool has_previous_versions_and_reset() { return false; }\n+  static bool should_clean_previous_versions_and_reset() { return false; }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary Test has_previous_versions flag and processing during class unloading.\n+ * @summary Test clean_previous_versions flag and processing during class unloading.\n@@ -91,2 +91,2 @@\n-              .shouldContain(\"Class unloading: has_previous_versions = false\")\n-              .shouldContain(\"Class unloading: has_previous_versions = true\")\n+              .shouldContain(\"Class unloading: clean_previous_versions = false\")\n+              .shouldContain(\"Class unloading: clean_previous_versions = true\")\n@@ -102,1 +102,1 @@\n-        \/\/ previous_version_list and the flag _has_previous_versions should stay false\n+        \/\/ previous_version_list and the flag _clean_previous_versions should stay false\n@@ -122,1 +122,1 @@\n-        \/\/ of Running, and _has_previous_versions should return true at class unloading.\n+        \/\/ of Running, and _clean_previous_versions should return true at class unloading.\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefinePreviousVersions.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8306929\n+ * @summary Verify clean_previous_versions when run with JFR and CDS\n+ * @requires vm.jvmti\n+ * @requires vm.cds\n+ * @requires vm.hasJFR\n+ * @requires vm.opt.final.ClassUnloading\n+ * @requires vm.flagless\n+ * @library \/test\/lib\n+ * @run driver RedefineSharedClassJFR xshare-off\n+ * @run driver RedefineSharedClassJFR xshare-on\n+ *\/\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import jtreg.SkippedException;\n+\n+public class RedefineSharedClassJFR {\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Skip test if default archive is supported.\n+        if (!Platform.isDefaultCDSArchiveSupported()) {\n+            throw new SkippedException(\"Supported platform\");\n+        }\n+\n+        \/\/ Test is run with JFR which will transform a number of classes. Depending\n+        \/\/ on if the test is run with or without CDS the output will be different,\n+        \/\/ due to the fact that shared classes can never be cleaned out after retranform.\n+        if (args.length > 0) {\n+            \/\/ When run with an argument the class is used as driver and should parse\n+            \/\/ the output.\n+            if (args[0].equals(\"xshare-off\")) {\n+                \/\/ First case is with -Xshare:off. In this case no classes are shared\n+                \/\/ and we should be able to clean out the retransformed classes. Verify\n+                \/\/ that the cleaning is done when the GC is triggered.\n+                ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                    \"-XX:StartFlightRecording\",\n+                    \"-Xshare:off\",\n+                    \"-Xlog:redefine+class+iklass+add=trace,redefine+class+iklass+purge=trace\",\n+                    \"RedefineSharedClassJFR\");\n+                new OutputAnalyzer(pb.start())\n+                    .shouldContain(\"Class unloading: clean_previous_versions = true\")\n+                    .shouldNotContain(\"Class unloading: clean_previous_versions = false\")\n+                    \/\/ We expect at least one of the transformed classes to be in use, if\n+                    \/\/ not the above check that clean_previous should be true will also\n+                    \/\/ fail. This check is to show what is expected.\n+                    .shouldContain(\"scratch class added; one of its methods is on_stack.\")\n+                    .shouldNotContain(\"scratch class added; class is shared\")\n+                    .shouldHaveExitValue(0);\n+                return;\n+            } else if (args[0].equals(\"xshare-on\")) {\n+                \/\/ With -Xshare:on, the shared classes can never be cleaned out. Check the\n+                \/\/ logs to verify we don't try to clean when we know it is not needed.\n+                ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                    \"-XX:StartFlightRecording\",\n+                    \"-Xshare:on\",\n+                    \"-Xlog:redefine+class+iklass+add=trace,redefine+class+iklass+purge=trace\",\n+                    \"RedefineSharedClassJFR\");\n+                new OutputAnalyzer(pb.start())\n+                    .shouldContain(\"Class unloading: clean_previous_versions = false\")\n+                    .shouldNotContain(\"Class unloading: clean_previous_versions = true\")\n+                    .shouldContain(\"scratch class added; class is shared\")\n+                    \/\/ If the below line occurs, then clean_previous_versions will be\n+                    \/\/ true and the above shouldContain will trigger. This check is to\n+                    \/\/ show the intention that we don't expect any non-shared transformed\n+                    \/\/ classes to be in use.\n+                    .shouldNotContain(\"scratch class added; one of its methods is on_stack.\")\n+                    .shouldHaveExitValue(0);\n+                return;\n+            }\n+        }\n+\n+        \/\/ When run without any argument this class acts as test and we do a system GC\n+        \/\/ to trigger cleaning and get the output we want to check.\n+        System.gc();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineSharedClassJFR.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"}]}