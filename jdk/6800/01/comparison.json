{"files":[{"patch":"@@ -1517,1 +1517,1 @@\n-    FLAG_SET_DEFAULT(UseSharedSpaces, false);\n+    UseSharedSpaces = false;\n@@ -2706,3 +2706,1 @@\n-      if (FLAG_SET_CMDLINE(DumpSharedSpaces, true) != JVMFlag::SUCCESS) {\n-        return JNI_EINVAL;\n-      }\n+      DumpSharedSpaces = true;\n@@ -2711,6 +2709,2 @@\n-      if (FLAG_SET_CMDLINE(UseSharedSpaces, true) != JVMFlag::SUCCESS) {\n-        return JNI_EINVAL;\n-      }\n-      if (FLAG_SET_CMDLINE(RequireSharedSpaces, true) != JVMFlag::SUCCESS) {\n-        return JNI_EINVAL;\n-      }\n+      UseSharedSpaces = true;\n+      RequireSharedSpaces = true;\n@@ -2719,6 +2713,2 @@\n-      if (FLAG_SET_CMDLINE(UseSharedSpaces, true) != JVMFlag::SUCCESS) {\n-        return JNI_EINVAL;\n-      }\n-      if (FLAG_SET_CMDLINE(RequireSharedSpaces, false) != JVMFlag::SUCCESS) {\n-        return JNI_EINVAL;\n-      }\n+      UseSharedSpaces = true;\n+      RequireSharedSpaces = false;\n@@ -2727,6 +2717,2 @@\n-      if (FLAG_SET_CMDLINE(UseSharedSpaces, false) != JVMFlag::SUCCESS) {\n-        return JNI_EINVAL;\n-      }\n-      if (FLAG_SET_CMDLINE(RequireSharedSpaces, false) != JVMFlag::SUCCESS) {\n-        return JNI_EINVAL;\n-      }\n+      UseSharedSpaces = false;\n+      RequireSharedSpaces = false;\n@@ -2986,6 +2972,2 @@\n-    if (FLAG_SET_CMDLINE(UseSharedSpaces, true) != JVMFlag::SUCCESS) {\n-      return JNI_EINVAL;\n-    }\n-    if (FLAG_SET_CMDLINE(RequireSharedSpaces, true) != JVMFlag::SUCCESS) {\n-      return JNI_EINVAL;\n-    }\n+    UseSharedSpaces = true;\n+    RequireSharedSpaces = true;\n@@ -3147,1 +3129,1 @@\n-    \/\/ unsafe with DumpSharedSpaces (which modifies the class metadata in place). Let's disable\n+    \/\/ unsafe with -Xshare:dump (which modifies the class metadata in place). Let's disable\n@@ -3150,2 +3132,2 @@\n-    \/\/ Note: this is not a concern for DynamicDumpSharedSpaces, which makes a copy of the class metadata\n-    \/\/ instead of modifying them in place. The copy is inaccessible to the compiler.\n+    \/\/ Note: this is not a concern for dynamically dumping shared spaces, which makes a copy of the\n+    \/\/ class metadata instead of modifying them in place. The copy is inaccessible to the compiler.\n@@ -3164,1 +3146,1 @@\n-    FLAG_SET_DEFAULT(DynamicDumpSharedSpaces, false);\n+    DynamicDumpSharedSpaces = false;\n@@ -3166,1 +3148,1 @@\n-    FLAG_SET_DEFAULT(DynamicDumpSharedSpaces, true);\n+    DynamicDumpSharedSpaces = true;\n@@ -3173,1 +3155,1 @@\n-    FLAG_SET_DEFAULT(UseSharedSpaces, false);\n+    UseSharedSpaces = false;\n@@ -4016,1 +3998,1 @@\n-    FLAG_SET_DEFAULT(UseSharedSpaces, false);\n+    UseSharedSpaces = false;\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":17,"deletions":35,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -1808,3 +1808,0 @@\n-  product(bool, UseSharedSpaces, true,                                      \\\n-          \"(Deprecated) Use shared spaces for metadata\")                    \\\n-                                                                            \\\n@@ -1814,11 +1811,0 @@\n-  product(bool, RequireSharedSpaces, false,                                 \\\n-          \"(Deprecated) Require shared spaces for metadata\")                \\\n-                                                                            \\\n-  product(bool, DumpSharedSpaces, false,                                    \\\n-          \"(Deprecated) Special mode: JVM reads a class list, loads \"       \\\n-          \"classes, builds shared spaces, and dumps the shared spaces to \"  \\\n-          \"a file to be used in future JVM runs\")                           \\\n-                                                                            \\\n-  product(bool, DynamicDumpSharedSpaces, false,                             \\\n-          \"(Deprecated) Dynamic archive\")                                   \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -42,0 +42,8 @@\n+\/\/ Old CDS options\n+bool DumpSharedSpaces;\n+bool DynamicDumpSharedSpaces;\n+bool RequireSharedSpaces;\n+extern \"C\" {\n+JNIEXPORT jboolean UseSharedSpaces = true;\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -511,0 +511,10 @@\n+\/\/----------------------------------------------------------------------------------------------------\n+\/\/ old CDS options\n+extern bool DumpSharedSpaces;\n+extern bool DynamicDumpSharedSpaces;\n+extern bool RequireSharedSpaces;\n+extern \"C\" {\n+\/\/ Make sure UseSharedSpaces is accessible to the serviceability agent.\n+extern JNIEXPORT jboolean UseSharedSpaces;\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-      * Is sharing enabled via the UseSharedSpaces flag.\n+      * Is sharing enabled.\n@@ -235,2 +235,0 @@\n-         \"-XX:+DumpSharedSpaces\",\n-         \"-XX:+DynamicDumpSharedSpaces\",\n@@ -241,3 +239,1 @@\n-         \"-XX:ArchiveClassesAtExit=\",\n-         \"-XX:+UseSharedSpaces\",\n-         \"-XX:+RequireSharedSpaces\"};\n+         \"-XX:ArchiveClassesAtExit=\"};\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/CDS.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -946,3 +946,7 @@\n-      Flag flag = getCommandLineFlag(\"UseSharedSpaces\");\n-      sharingEnabled = (flag == null)? Boolean.FALSE :\n-          (flag.getBool()? Boolean.TRUE: Boolean.FALSE);\n+        Address address = VM.getVM().getDebugger().lookup(null, \"UseSharedSpaces\");\n+        if (address == null && getOS().equals(\"win32\")) {\n+            \/\/ On Win32 symbols are prefixed with the dll name. So look for\n+            \/\/ UseSharedSpaces as a symbol in jvm.dll.\n+            address = VM.getVM().getDebugger().lookup(null, \"jvm!UseSharedSpaces\");\n+        }\n+        sharingEnabled = address.getJBooleanAt(0);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/VM.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -303,1 +303,1 @@\n-        print_debug(\"can't lookup 'UseSharedSpaces' flag\\n\");\n+        print_debug(\"can't lookup 'UseSharedSpaces' symbol\\n\");\n@@ -311,1 +311,1 @@\n-        print_debug(\"can't read the value of 'UseSharedSpaces' flag\\n\");\n+        print_debug(\"can't read the value of 'UseSharedSpaces' symbol\\n\");\n","filename":"src\/jdk.hotspot.agent\/share\/native\/libsaproc\/ps_core_common.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,6 +48,0 @@\n-        \/\/ -XX:+DumpSharedSpaces should behave the same as -Xshare:dump\n-        opts = (new CDSOptions())\n-            .addPrefix(\"-XX:+DumpSharedSpaces\", \"-Xlog:cds\")\n-            .setArchiveName(\".\/SharedArchiveFile.jsa\");\n-        CDSTestUtils.createArchiveAndCheck(opts);\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/SharedArchiveFile.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -283,1 +283,1 @@\n-     * Return true if the UseSharedSpaces flag has been disabled.\n+     * Return true if sharing has been disabled.\n@@ -285,2 +285,2 @@\n-     * The UseSharedSpaces flag will be disabled by the VM if there's some\n-     * problem in using the default CDS archive. It could happen under some\n+     * Sharing will be disabled by the VM if there's some problem\n+     * in using the default CDS archive. It could happen under some\n@@ -297,1 +297,1 @@\n-        return (WB.getBooleanVMFlag(\"UseSharedSpaces\") == false);\n+        return !WB.isSharingEnabled();\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/DynamicArchiveTestBase.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,39 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @summary The DynamicDumpShareSpaces flag is internal, setting it at the command line should have no effect.\n- * @requires vm.cds\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n- * @compile ..\/test-classes\/Hello.java\n- * @run driver DynamicFlag\n- *\/\n-\n-public class DynamicFlag {\n-  public static void main(String[] args) throws Exception {\n-      TestCommon.test(JarBuilder.getOrCreateHelloJar(),\n-          TestCommon.list(\"Hello\"), \"-XX:+DynamicDumpSharedSpaces\", \"Hello\");\n-  }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/DynamicFlag.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -99,1 +99,1 @@\n-        boolean cdsEnabled = WhiteBox.getWhiteBox().getBooleanVMFlag(\"UseSharedSpaces\");\n+        boolean cdsEnabled = WhiteBox.getWhiteBox().isSharingEnabled();\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestDumpBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,3 +84,3 @@\n-        \/\/ Test dynamic dump with flags -XX:+RecordDynamicDumpInfo -XX:-DynamicDumpSharedSpaces.\n-        print2ln(test_count++ + \" Test dynamic dump with flags -XX:+RecordDynamicDumpInfo -XX:-DynamicDumpSharedSpaces.\");\n-        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\", \"-XX:-DynamicDumpSharedSpaces\");\n+        \/\/ Test dynamic dump with flag -XX:+RecordDynamicDumpInfo\n+        print2ln(test_count++ + \" Test dynamic dump with flag -XX:+RecordDynamicDumpInfo.\");\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\");\n@@ -91,7 +91,0 @@\n-        \/\/ Test dynamic dump with flags -XX:-DynamicDumpSharedSpaces -XX:+RecordDynamicDumpInfo.\n-        print2ln(test_count++ + \" Test dynamic dump with flags -XX:-DynamicDumpSharedSpaces -XX:+RecordDynamicDumpInfo.\");\n-        app = createLingeredApp(\"-cp\", allJars, \"-XX:-DynamicDumpSharedSpaces\", \"-XX:+RecordDynamicDumpInfo\");\n-        pid = app.getPid();\n-        test(null, pid, noBoot,  EXPECT_PASS, DYNAMIC_MESSAGES);\n-        app.stopApp();\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestDynamicDump.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    \/\/ Those two flags will not create a successful LingeredApp.\n+    \/\/ This flag will not create a successful LingeredApp.\n@@ -50,2 +50,1 @@\n-        {\"-XX:+DumpSharedSpaces\",\n-         \"-Xshare:dump\"};\n+        {\"-Xshare:dump\"};\n@@ -56,3 +55,0 @@\n-         \/\/ this flag just dump archive, won't run app normally.\n-         \/\/ \"-XX:+DumpSharedSpaces\",\n-         \"-XX:+DynamicDumpSharedSpaces\",\n@@ -64,3 +60,1 @@\n-         \"-XX:ArchiveClassesAtExit=tmp.jsa\",\n-         \"-XX:+UseSharedSpaces\",\n-         \"-XX:+RequireSharedSpaces\"};\n+         \"-XX:ArchiveClassesAtExit=tmp.jsa\"};\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestStaticDump.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"}]}