{"files":[{"patch":"@@ -29,0 +29,1 @@\n+#include \"sanitizers\/address.hpp\"\n@@ -66,1 +67,1 @@\n-static bool _SafeFetchXX_internal(const T *adr, T* result) {\n+ATTRIBUTE_NO_SANITIZE_ADDRESS static bool _SafeFetchXX_internal(const T *adr, T* result) {\n","filename":"src\/hotspot\/os\/posix\/safefetch_sigjmp.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"sanitizers\/address.hpp\"\n@@ -34,1 +35,1 @@\n-inline T SafeFetchXX(const T* adr, T errValue) {\n+ATTRIBUTE_NO_SANITIZE_ADDRESS inline T SafeFetchXX(const T* adr, T errValue) {\n","filename":"src\/hotspot\/os\/windows\/safefetch_windows.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+#include \"sanitizers\/address.hpp\"\n@@ -943,0 +944,10 @@\n+ATTRIBUTE_NO_SANITIZE_ADDRESS static void print_hex_readable_pointer(outputStream* st, address p,\n+                                                                     int unitsize) {\n+  switch (unitsize) {\n+    case 1: st->print(\"%02x\", *(u1*)p); break;\n+    case 2: st->print(\"%04x\", *(u2*)p); break;\n+    case 4: st->print(\"%08x\", *(u4*)p); break;\n+    case 8: st->print(\"%016\" FORMAT64_MODIFIER \"x\", *(u8*)p); break;\n+  }\n+}\n+\n@@ -961,6 +972,1 @@\n-      switch (unitsize) {\n-        case 1: st->print(\"%02x\", *(u1*)p); break;\n-        case 2: st->print(\"%04x\", *(u2*)p); break;\n-        case 4: st->print(\"%08x\", *(u4*)p); break;\n-        case 8: st->print(\"%016\" FORMAT64_MODIFIER \"x\", *(u8*)p); break;\n-      }\n+      print_hex_readable_pointer(st, p, unitsize);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -32,0 +32,19 @@\n+\/\/ ATTRIBUTE_NO_SANITIZE_ADDRESS\n+\/\/\n+\/\/ Function attribute which informs the compiler to not instrument memory accesses in the function.\n+\/\/ Useful if the function is known to do something dangerous, such as reading previous stack frames\n+\/\/ or reading arbitrary regions of memory when dumping during a crash.\n+#ifdef ADDRESS_SANITIZER\n+#if defined(TARGET_COMPILER_gcc)\n+\/\/ GCC-like, including Clang.\n+#define ATTRIBUTE_NO_SANITIZE_ADDRESS __attribute__((no_sanitize_address))\n+#elif defined(TARGET_COMPILER_visCPP)\n+\/\/ Microsoft Visual C++\n+#define ATTRIBUTE_NO_SANITIZE_ADDRESS __declspec(no_sanitize_address)\n+#endif\n+#endif\n+\n+#ifndef ATTRIBUTE_NO_SANITIZE_ADDRESS\n+#define ATTRIBUTE_NO_SANITIZE_ADDRESS\n+#endif\n+\n","filename":"src\/hotspot\/share\/sanitizers\/address.hpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"}]}