{"files":[{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"mallocInfoDcmd.hpp\"\n+#include \"os_linux.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"utilities\/ostream.hpp\"\n+\n+#include <malloc.h>\n+\n+constexpr const char* malloc_info_unavailable = \"Error: malloc_info(3) not available.\";\n+\n+void MallocInfoDcmd::execute(DCmdSource source, TRAPS) {\n+#ifdef __GLIBC__\n+  char* buf;\n+  size_t size;\n+  ALLOW_C_FUNCTION(::open_memstream, FILE* stream = ::open_memstream(&buf, &size);)\n+  if (stream == nullptr) {\n+    _output->print_cr(\"Error: Could not call malloc_info(3)\");\n+    return;\n+  }\n+\n+  int err = os::Linux::malloc_info(stream);\n+  if (err == 0) {\n+    ALLOW_C_FUNCTION(::fflush, fflush(stream);)\n+    _output->print_raw(buf);\n+    _output->cr();\n+  } else if (err == -1) {\n+    _output->print_cr(\"Error: %s\", os::strerror(errno));\n+  } else if (err == -2) {\n+    _output->print_cr(malloc_info_unavailable);\n+  } else {\n+    ShouldNotReachHere();\n+  }\n+  ALLOW_C_FUNCTION(::fclose, ::fclose(stream);)\n+  ALLOW_C_FUNCTION(::free, ::free(buf);)\n+#else\n+  _output->print(malloc_info_unavailable);\n+#endif \/\/ __GLIBC__\n+}\n","filename":"src\/hotspot\/os\/linux\/mallocInfoDcmd.cpp","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_LINUX_MALLOCINFODCMD_HPP\n+#define OS_LINUX_MALLOCINFODCMD_HPP\n+\n+#include \"services\/diagnosticCommand.hpp\"\n+\n+class outputStream;\n+\n+class MallocInfoDcmd : public DCmd {\n+public:\n+  MallocInfoDcmd(outputStream* output, bool heap) : DCmd(output, heap) {}\n+  static const char* name() {\n+    return \"System.native_heap_info\";\n+  }\n+  static const char* description() {\n+    return \"Attempts to output information regarding native heap usage through malloc_info(3). If unsuccessful outputs \\\"Error: \\\" and a reason.\";\n+  }\n+  static const char* impact() {\n+    return \"Low\";\n+  }\n+  static const JavaPermission permission() {\n+    JavaPermission p = { \"java.lang.management.ManagementPermission\", \"monitor\", nullptr };\n+    return p;\n+  }\n+  void execute(DCmdSource source, TRAPS) override;\n+};\n+\n+#endif \/\/ OS_LINUX_MALLOCINFODCMD_HPP\n","filename":"src\/hotspot\/os\/linux\/mallocInfoDcmd.hpp","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -203,0 +203,3 @@\n+\n+typedef int (*malloc_info_func_t)(int options, FILE *stream);\n+static malloc_info_func_t g_malloc_info = nullptr;\n@@ -4297,0 +4300,1 @@\n+  g_malloc_info = CAST_TO_FN_PTR(malloc_info_func_t, dlsym(RTLD_DEFAULT, \"malloc_info\"));\n@@ -5388,0 +5392,7 @@\n+\n+int os::Linux::malloc_info(FILE* stream) {\n+  if (g_malloc_info == nullptr) {\n+    return -2;\n+  }\n+  return g_malloc_info(0, stream);\n+}\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -427,0 +427,4 @@\n+\n+  \/\/ Calls out to GNU extension malloc_info if available\n+  \/\/ otherwise does nothing and returns -2.\n+  static int malloc_info(FILE* stream);\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+#include \"mallocInfoDcmd.hpp\"\n@@ -129,0 +130,1 @@\n+  DCmdFactory::register_DCmdFactory(new DCmdFactoryImpl<MallocInfoDcmd>(full_export, true, false));\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-.TH \"JCMD\" \"1\" \"2023\" \"JDK 21-ea\" \"JDK Commands\"\n+.TH \"JCMD\" \"1\" \"2023\" \"JDK 21\" \"JDK Commands\"\n@@ -778,0 +778,9 @@\n+\\f[V]System.native_heap_info\\f[R] (Linux only)\n+Prints information about native heap usage through malloc_info(3).\n+.RS\n+.PP\n+Impact: Low\n+.PP\n+Permission: \\f[V]java.lang.management.ManagementPermission(monitor)\\f[R]\n+.RE\n+.TP\n","filename":"src\/jdk.jcmd\/share\/man\/jcmd.1","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+import jdk.test.lib.dcmd.CommandExecutor;\n+import jdk.test.lib.dcmd.JMXExecutor;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+\/*\n+ * @test\n+ * @summary Test of diagnostic command System.native_heap_info\n+ * @library \/test\/lib\n+ * @requires (os.family==\"linux\") & !vm.musl\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run testng MallocInfoTest\n+ *\/\n+public class MallocInfoTest {\n+    public void run(CommandExecutor executor) {\n+        OutputAnalyzer output = executor.execute(\"System.native_heap_info\");\n+        output.shouldNotContain(\"Error: \");\n+        output.shouldContain(\"<malloc version=\");\n+        output.reportDiagnosticSummary();\n+    }\n+\n+    @Test\n+    public void jmx() {\n+        run(new JMXExecutor());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/vm\/MallocInfoTest.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"}]}