{"files":[{"patch":"@@ -26,1 +26,0 @@\n-#include \"runtime\/os.inline.hpp\"\n@@ -28,1 +27,1 @@\n-#include \"utilities\/debug.hpp\"\n+#include \"os_linux.hpp\"\n@@ -34,0 +33,2 @@\n+constexpr const char* malloc_info_unavailable = \"Error: malloc_info(3) not available.\";\n+\n@@ -35,1 +36,1 @@\n-#ifdef LINUX\n+#ifdef __GLIBC__\n@@ -39,1 +40,7 @@\n-  if (!os::Linux::malloc_info(stream)) {\n+  if (stream == nullptr) {\n+    _output->print(\"Error: Could not call malloc_info(3)\");\n+    return;\n+  }\n+\n+  int err = os::Linux::malloc_info(stream);\n+  if (err == 0) {\n@@ -41,1 +48,7 @@\n-    _output->print_raw(buf);\n+      _output->print_raw(buf);\n+  } else if (err == -1) {\n+    _output->print(\"Error: %s\", os::strerror(errno));\n+  } else if (err == -2) {\n+    _output->print(malloc_info_unavailable);\n+  } else {\n+    ShouldNotReachHere();\n@@ -46,2 +59,2 @@\n-    \/\/ Nothing.\n-#endif \/\/ LINUX\n+    _output->print(malloc_info_unavailable);\n+#endif \/\/ __GLIBC__\n","filename":"src\/hotspot\/os\/linux\/mallocInfoDcmd.cpp","additions":20,"deletions":7,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    return \"System.malloc_info\";\n+    return \"System.native_heap_info\";\n@@ -39,1 +39,1 @@\n-    return \"Prints the malloc information if available. Otherwise, prints nothing.\";\n+    return \"Attempts to output information regarding native heap usage through malloc_info(3). If unsuccessful outputs \\\"Error: \\\" and a reason.\";\n","filename":"src\/hotspot\/os\/linux\/mallocInfoDcmd.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -117,3 +117,0 @@\n-\/\/ Forward (re-)declare malloc_info in order to support Alpine Linux.\n-int __attribute__((weak)) malloc_info(int options, FILE *stream);\n-\n@@ -206,0 +203,3 @@\n+\n+typedef int (*malloc_info_func_t)(int options, FILE *stream);\n+static malloc_info_func_t g_malloc_info = nullptr;\n@@ -223,7 +223,0 @@\n-int os::Linux::malloc_info(FILE* stream) {\n-  if (::malloc_info) {\n-    return ::malloc_info(0, stream);\n-  }\n-  return 0;\n-}\n-\n@@ -4307,0 +4300,1 @@\n+  g_malloc_info = CAST_TO_FN_PTR(malloc_info_func_t, dlsym(RTLD_DEFAULT, \"malloc_info\"));\n@@ -5398,0 +5392,7 @@\n+\n+int os::Linux::malloc_info(FILE* stream) {\n+  if (g_malloc_info == nullptr) {\n+    return -2;\n+  }\n+  return g_malloc_info(0, stream);\n+}\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -196,4 +196,0 @@\n-  \/\/ Calls out to GNU extension malloc_info if available\n-  \/\/ otherwise does nothing and returns 0.\n-  static int malloc_info(FILE* stream);\n-\n@@ -431,0 +427,4 @@\n+\n+  \/\/ Calls out to GNU extension malloc_info if available\n+  \/\/ otherwise does nothing and returns -2.\n+  static int malloc_info(FILE* stream);\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+import jdk.test.lib.dcmd.CommandExecutor;\n+import jdk.test.lib.dcmd.JMXExecutor;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+\/*\n+ * @test\n+ * @summary Test of diagnostic command System.native_heap_info\n+ * @library \/test\/lib\n+ * @requires (os.family==\"linux\") & !vm.musl\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run testng MallocInfoTest\n+ *\/\n+public class MallocInfoTest {\n+    public void run(CommandExecutor executor) {\n+        OutputAnalyzer output = executor.execute(\"System.native_heap_info\");\n+        output.reportDiagnosticSummary();\n+        output.shouldNotMatch(\".*Error.*\");\n+        output.shouldMatch(\".*<malloc version=.*\");\n+    }\n+\n+    @Test\n+    public void jmx() {\n+        run(new JMXExecutor());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/vm\/MallocInfoTest.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"}]}