{"files":[{"patch":"@@ -1197,7 +1197,11 @@\n-  __ allocate_object(op->obj()->as_register(),\n-                     op->tmp1()->as_register(),\n-                     op->tmp2()->as_register(),\n-                     op->header_size(),\n-                     op->object_size(),\n-                     op->klass()->as_register(),\n-                     *op->stub()->entry());\n+  address tpc = __ allocate_object(op->obj()->as_register(),\n+                                   op->tmp1()->as_register(),\n+                                   op->tmp2()->as_register(),\n+                                   op->header_size(),\n+                                   op->object_size(),\n+                                   op->klass()->as_register(),\n+                                   *op->stub()->entry());\n+  if (tpc == nullptr) {\n+    bailout(\"trampoline stub overflow\");\n+    return;\n+  }\n@@ -1228,8 +1232,12 @@\n-    __ allocate_array(op->obj()->as_register(),\n-                      len,\n-                      tmp1,\n-                      tmp2,\n-                      arrayOopDesc::header_size(op->type()),\n-                      array_element_size(op->type()),\n-                      op->klass()->as_register(),\n-                      *op->stub()->entry());\n+    address tpc = __ allocate_array(op->obj()->as_register(),\n+                                    len,\n+                                    tmp1,\n+                                    tmp2,\n+                                    arrayOopDesc::header_size(op->type()),\n+                                    array_element_size(op->type()),\n+                                    op->klass()->as_register(),\n+                                    *op->stub()->entry());\n+    if (tpc == nullptr) {\n+      bailout(\"trampoline stub overflow\");\n+      return;\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":23,"deletions":15,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-void C1_MacroAssembler::initialize_body(Register obj, Register len_in_bytes, int hdr_size_in_bytes, Register t1, Register t2) {\n+address C1_MacroAssembler::initialize_body(Register obj, Register len_in_bytes, int hdr_size_in_bytes, Register t1, Register t2) {\n@@ -202,2 +202,1 @@\n-  zero_words(t1, t2);\n-\n+  address tpc = zero_words(t1, t2);\n@@ -205,0 +204,1 @@\n+  return tpc;\n@@ -208,1 +208,1 @@\n-void C1_MacroAssembler::allocate_object(Register obj, Register t1, Register t2, int header_size, int object_size, Register klass, Label& slow_case) {\n+address C1_MacroAssembler::allocate_object(Register obj, Register t1, Register t2, int header_size, int object_size, Register klass, Label& slow_case) {\n@@ -214,1 +214,1 @@\n-  initialize_object(obj, klass, noreg, object_size * HeapWordSize, t1, t2, UseTLAB);\n+  return initialize_object(obj, klass, noreg, object_size * HeapWordSize, t1, t2, UseTLAB);\n@@ -218,1 +218,1 @@\n-void C1_MacroAssembler::initialize_object(Register obj, Register klass, Register var_size_in_bytes, int con_size_in_bytes, Register t1, Register t2, bool is_tlab_allocated) {\n+address C1_MacroAssembler::initialize_object(Register obj, Register klass, Register var_size_in_bytes, int con_size_in_bytes, Register t1, Register t2, bool is_tlab_allocated) {\n@@ -230,1 +230,4 @@\n-       initialize_body(obj, index, hdr_size_in_bytes, t1, t2);\n+       address tpc = initialize_body(obj, index, hdr_size_in_bytes, t1, t2);\n+       if (tpc == nullptr) {\n+         return nullptr;\n+       }\n@@ -234,1 +237,4 @@\n-       zero_words(t1, con_size_in_bytes \/ BytesPerWord);\n+       address tpc = zero_words(t1, con_size_in_bytes \/ BytesPerWord);\n+       if (tpc == nullptr) {\n+         return nullptr;\n+       }\n@@ -246,0 +252,1 @@\n+  return pc();\n@@ -247,1 +254,2 @@\n-void C1_MacroAssembler::allocate_array(Register obj, Register len, Register t1, Register t2, int header_size, int f, Register klass, Label& slow_case) {\n+address C1_MacroAssembler::allocate_array(Register obj, Register len, Register t1, Register t2, int header_size, int f, Register klass, Label& slow_case) {\n+  address tpc = nullptr;\n@@ -269,1 +277,1 @@\n-  initialize_body(obj, arr_size, header_size * BytesPerWord, t1, t2);\n+  tpc = initialize_body(obj, arr_size, header_size * BytesPerWord, t1, t2);\n@@ -279,0 +287,1 @@\n+  return tpc;\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":19,"deletions":10,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  void initialize_body(Register obj, Register len_in_bytes, int hdr_size_in_bytes, Register t1, Register t2);\n+  address initialize_body(Register obj, Register len_in_bytes, int hdr_size_in_bytes, Register t1, Register t2);\n@@ -70,1 +70,1 @@\n-  void initialize_object(\n+  address initialize_object(\n@@ -88,1 +88,1 @@\n-  void allocate_object(Register obj, Register t1, Register t2, int header_size, int object_size, Register klass, Label& slow_case);\n+  address allocate_object(Register obj, Register t1, Register t2, int header_size, int object_size, Register klass, Label& slow_case);\n@@ -101,1 +101,1 @@\n-  void allocate_array(Register obj, Register len, Register t, Register t2, int header_size, int f, Register klass, Label& slow_case);\n+  address allocate_array(Register obj, Register len, Register t, Register t2, int header_size, int f, Register klass, Label& slow_case);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -301,1 +301,6 @@\n-    trampoline_call(stub);\n+    address call = trampoline_call(stub);\n+    if (call == nullptr) {\n+      DEBUG_ONLY(reset_labels(LINEARSEARCH, LINEAR_MEDIUM, DONE, NOMATCH, MATCH));\n+      ciEnv::current()->record_failure(\"CodeCache is full\");\n+      return;\n+    }\n@@ -860,1 +865,6 @@\n-    trampoline_call(stub);\n+    address call = trampoline_call(stub);\n+    if (call == nullptr) {\n+      DEBUG_ONLY(reset_labels(DONE, SHORT_LOOP, SHORT_STRING, SHORT_LAST, SHORT_LOOP_TAIL, SHORT_LAST2, SHORT_LAST_INIT, SHORT_LOOP_START));\n+      ciEnv::current()->record_failure(\"CodeCache is full\");\n+      return;\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1087,3 +1087,0 @@\n-private:\n-  void compare_eq(Register rn, Register rm, enum operand_size size);\n-\n@@ -1104,0 +1101,3 @@\n+private:\n+  void compare_eq(Register rn, Register rm, enum operand_size size);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1106,0 +1106,3 @@\n+    if (tr_call == nullptr) {\n+      fatal(\"CodeCache is full at gen_continuation_enter\");\n+    }\n@@ -1113,1 +1116,4 @@\n-    CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+    address stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+    if (stub == nullptr) {\n+      fatal(\"CodeCache is full at gen_continuation_enter\");\n+    }\n@@ -1130,0 +1136,3 @@\n+  if (tr_call == nullptr) {\n+    fatal(\"CodeCache is full at gen_continuation_enter\");\n+  }\n@@ -1171,1 +1180,4 @@\n-  CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+  address stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+  if (stub == nullptr) {\n+    fatal(\"CodeCache is full at gen_continuation_enter\");\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2364,1 +2364,4 @@\n-      __ zero_words(bz_base, cnt_words);\n+      address tpc = __ zero_words(bz_base, cnt_words);\n+      if (tpc == nullptr) {\n+        fatal(\"CodeCache is full at generate_fill\");\n+      }\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -565,1 +565,6 @@\n-  trampoline_call(stub);\n+  address call = trampoline_call(stub);\n+  if (call == nullptr) {\n+    DEBUG_ONLY(reset_labels(LINEARSEARCH, DONE, NOMATCH));\n+    ciEnv::current()->record_failure(\"CodeCache is full\");\n+    return;\n+  }\n@@ -968,1 +973,6 @@\n-  trampoline_call(stub);\n+  address call = trampoline_call(stub);\n+  if (call == nullptr) {\n+    DEBUG_ONLY(reset_labels(DONE, SHORT_LOOP, SHORT_STRING, SHORT_LAST, SHORT_LOOP_TAIL, SHORT_LAST2, SHORT_LAST_INIT, SHORT_LOOP_START));\n+    ciEnv::current()->record_failure(\"CodeCache is full\");\n+    return;\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1331,2 +1331,0 @@\n-private:\n-\n@@ -1346,0 +1344,3 @@\n+\n+private:\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -981,0 +981,3 @@\n+    if (tr_call == nullptr) {\n+      fatal(\"CodeCache is full at gen_continuation_enter\");\n+    }\n@@ -988,1 +991,4 @@\n-    CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+    address stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+    if (stub == nullptr) {\n+      fatal(\"CodeCache is full at gen_continuation_enter\");\n+    }\n@@ -1008,0 +1014,3 @@\n+  if (tr_call == nullptr) {\n+    fatal(\"CodeCache is full at gen_continuation_enter\");\n+  }\n@@ -1048,1 +1057,4 @@\n-  CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+  address stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+  if (stub == nullptr) {\n+    fatal(\"CodeCache is full at gen_continuation_enter\");\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"}]}