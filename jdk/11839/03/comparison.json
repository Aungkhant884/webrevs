{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -202,1 +202,1 @@\n-  zero_words(t1, t2);\n+  address tpc = zero_words(t1, t2);\n@@ -205,0 +205,3 @@\n+  if (tpc == nullptr) {\n+    Compilation::current()->bailout(\"no space for trampoline stub\");\n+  }\n@@ -231,0 +234,3 @@\n+       if (Compilation::current()->bailed_out()) {\n+         return;\n+       }\n@@ -234,1 +240,5 @@\n-       zero_words(t1, con_size_in_bytes \/ BytesPerWord);\n+       address tpc = zero_words(t1, con_size_in_bytes \/ BytesPerWord);\n+       if (tpc == nullptr) {\n+         Compilation::current()->bailout(\"no space for trampoline stub\");\n+         return;\n+       }\n@@ -270,0 +280,3 @@\n+  if (Compilation::current()->bailed_out()) {\n+    return;\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -301,1 +301,6 @@\n-    trampoline_call(stub);\n+    address call = trampoline_call(stub);\n+    if (call == nullptr) {\n+      DEBUG_ONLY(reset_labels(LINEARSEARCH, LINEAR_MEDIUM, DONE, NOMATCH, MATCH));\n+      ciEnv::current()->record_failure(\"CodeCache is full\");\n+      return;\n+    }\n@@ -860,1 +865,6 @@\n-    trampoline_call(stub);\n+    address call = trampoline_call(stub);\n+    if (call == nullptr) {\n+      DEBUG_ONLY(reset_labels(DONE, SHORT_LOOP, SHORT_STRING, SHORT_LAST, SHORT_LOOP_TAIL, SHORT_LAST2, SHORT_LAST_INIT, SHORT_LOOP_START));\n+      ciEnv::current()->record_failure(\"CodeCache is full\");\n+      return;\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1087,3 +1087,0 @@\n-private:\n-  void compare_eq(Register rn, Register rm, enum operand_size size);\n-\n@@ -1104,0 +1101,3 @@\n+private:\n+  void compare_eq(Register rn, Register rm, enum operand_size size);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1106,0 +1106,3 @@\n+    if (tr_call == nullptr) {\n+      fatal(\"CodeCache is full at gen_continuation_enter\");\n+    }\n@@ -1113,1 +1116,4 @@\n-    CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+    address stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+    if (stub == nullptr) {\n+      fatal(\"CodeCache is full at gen_continuation_enter\");\n+    }\n@@ -1130,0 +1136,3 @@\n+  if (tr_call == nullptr) {\n+    fatal(\"CodeCache is full at gen_continuation_enter\");\n+  }\n@@ -1171,1 +1180,4 @@\n-  CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+  address stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+  if (stub == nullptr) {\n+    fatal(\"CodeCache is full at gen_continuation_enter\");\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -2364,1 +2364,4 @@\n-      __ zero_words(bz_base, cnt_words);\n+      address tpc = __ zero_words(bz_base, cnt_words);\n+      if (tpc == nullptr) {\n+        fatal(\"CodeCache is full at generate_fill\");\n+      }\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -565,1 +565,6 @@\n-  trampoline_call(stub);\n+  address call = trampoline_call(stub);\n+  if (call == nullptr) {\n+    DEBUG_ONLY(reset_labels(LINEARSEARCH, DONE, NOMATCH));\n+    ciEnv::current()->record_failure(\"CodeCache is full\");\n+    return;\n+  }\n@@ -968,1 +973,6 @@\n-  trampoline_call(stub);\n+  address call = trampoline_call(stub);\n+  if (call == nullptr) {\n+    DEBUG_ONLY(reset_labels(DONE, SHORT_LOOP, SHORT_STRING, SHORT_LAST, SHORT_LOOP_TAIL, SHORT_LAST2, SHORT_LAST_INIT, SHORT_LOOP_START));\n+    ciEnv::current()->record_failure(\"CodeCache is full\");\n+    return;\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1331,2 +1331,0 @@\n-private:\n-\n@@ -1346,0 +1344,3 @@\n+\n+private:\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -981,0 +981,3 @@\n+    if (tr_call == nullptr) {\n+      fatal(\"CodeCache is full at gen_continuation_enter\");\n+    }\n@@ -988,1 +991,4 @@\n-    CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+    address stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+    if (stub == nullptr) {\n+      fatal(\"CodeCache is full at gen_continuation_enter\");\n+    }\n@@ -1008,0 +1014,3 @@\n+  if (tr_call == nullptr) {\n+    fatal(\"CodeCache is full at gen_continuation_enter\");\n+  }\n@@ -1048,1 +1057,4 @@\n-  CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+  address stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+  if (stub == nullptr) {\n+    fatal(\"CodeCache is full at gen_continuation_enter\");\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"}]}