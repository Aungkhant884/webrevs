{"files":[{"patch":"@@ -1197,11 +1197,7 @@\n-  address tpc = __ allocate_object(op->obj()->as_register(),\n-                                   op->tmp1()->as_register(),\n-                                   op->tmp2()->as_register(),\n-                                   op->header_size(),\n-                                   op->object_size(),\n-                                   op->klass()->as_register(),\n-                                   *op->stub()->entry());\n-  if (tpc == nullptr) {\n-    bailout(\"no space for trampoline stub\");\n-    return;\n-  }\n+  __ allocate_object(op->obj()->as_register(),\n+                     op->tmp1()->as_register(),\n+                     op->tmp2()->as_register(),\n+                     op->header_size(),\n+                     op->object_size(),\n+                     op->klass()->as_register(),\n+                     *op->stub()->entry());\n@@ -1232,12 +1228,8 @@\n-    address tpc = __ allocate_array(op->obj()->as_register(),\n-                                    len,\n-                                    tmp1,\n-                                    tmp2,\n-                                    arrayOopDesc::header_size(op->type()),\n-                                    array_element_size(op->type()),\n-                                    op->klass()->as_register(),\n-                                    *op->stub()->entry());\n-    if (tpc == nullptr) {\n-      bailout(\"no space for trampoline stub\");\n-      return;\n-    }\n+    __ allocate_array(op->obj()->as_register(),\n+                      len,\n+                      tmp1,\n+                      tmp2,\n+                      arrayOopDesc::header_size(op->type()),\n+                      array_element_size(op->type()),\n+                      op->klass()->as_register(),\n+                      *op->stub()->entry());\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":15,"deletions":23,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-address C1_MacroAssembler::initialize_body(Register obj, Register len_in_bytes, int hdr_size_in_bytes, Register t1, Register t2) {\n+void C1_MacroAssembler::initialize_body(Register obj, Register len_in_bytes, int hdr_size_in_bytes, Register t1, Register t2) {\n@@ -203,0 +203,1 @@\n+\n@@ -204,1 +205,3 @@\n-  return tpc;\n+  if (tpc == nullptr) {\n+    Compilation::current()->bailout(\"no space for trampoline stub\");\n+  }\n@@ -208,1 +211,1 @@\n-address C1_MacroAssembler::allocate_object(Register obj, Register t1, Register t2, int header_size, int object_size, Register klass, Label& slow_case) {\n+void C1_MacroAssembler::allocate_object(Register obj, Register t1, Register t2, int header_size, int object_size, Register klass, Label& slow_case) {\n@@ -214,1 +217,1 @@\n-  return initialize_object(obj, klass, noreg, object_size * HeapWordSize, t1, t2, UseTLAB);\n+  initialize_object(obj, klass, noreg, object_size * HeapWordSize, t1, t2, UseTLAB);\n@@ -218,1 +221,1 @@\n-address C1_MacroAssembler::initialize_object(Register obj, Register klass, Register var_size_in_bytes, int con_size_in_bytes, Register t1, Register t2, bool is_tlab_allocated) {\n+void C1_MacroAssembler::initialize_object(Register obj, Register klass, Register var_size_in_bytes, int con_size_in_bytes, Register t1, Register t2, bool is_tlab_allocated) {\n@@ -230,3 +233,3 @@\n-       address tpc = initialize_body(obj, index, hdr_size_in_bytes, t1, t2);\n-       if (tpc == nullptr) {\n-         return nullptr;\n+       initialize_body(obj, index, hdr_size_in_bytes, t1, t2);\n+       if (Compilation::current()->bailed_out()) {\n+         return;\n@@ -239,1 +242,2 @@\n-         return nullptr;\n+         Compilation::current()->bailout(\"no space for trampoline stub\");\n+         return;\n@@ -252,1 +256,0 @@\n-  return pc();\n@@ -254,2 +257,1 @@\n-address C1_MacroAssembler::allocate_array(Register obj, Register len, Register t1, Register t2, int header_size, int f, Register klass, Label& slow_case) {\n-  address tpc = nullptr;\n+void C1_MacroAssembler::allocate_array(Register obj, Register len, Register t1, Register t2, int header_size, int f, Register klass, Label& slow_case) {\n@@ -277,1 +279,4 @@\n-  tpc = initialize_body(obj, arr_size, header_size * BytesPerWord, t1, t2);\n+  initialize_body(obj, arr_size, header_size * BytesPerWord, t1, t2);\n+  if (Compilation::current()->bailed_out()) {\n+    return;\n+  }\n@@ -287,1 +292,0 @@\n-  return tpc;\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":18,"deletions":14,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  address initialize_body(Register obj, Register len_in_bytes, int hdr_size_in_bytes, Register t1, Register t2);\n+  void initialize_body(Register obj, Register len_in_bytes, int hdr_size_in_bytes, Register t1, Register t2);\n@@ -70,1 +70,1 @@\n-  address initialize_object(\n+  void initialize_object(\n@@ -88,1 +88,1 @@\n-  address allocate_object(Register obj, Register t1, Register t2, int header_size, int object_size, Register klass, Label& slow_case);\n+  void allocate_object(Register obj, Register t1, Register t2, int header_size, int object_size, Register klass, Label& slow_case);\n@@ -101,1 +101,1 @@\n-  address allocate_array(Register obj, Register len, Register t, Register t2, int header_size, int f, Register klass, Label& slow_case);\n+  void allocate_array(Register obj, Register len, Register t, Register t2, int header_size, int f, Register klass, Label& slow_case);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}