{"files":[{"patch":"@@ -131,1 +131,1 @@\n- * in Java; Legacy group, LXM group and Xoroshiro\/Xoshiro group.\n+ * in Java: the Legacy group, the LXM group, and the Xoroshiro\/Xoshiro group.\n@@ -134,2 +134,2 @@\n- * before JDK 17; Random, ThreadLocalRandom, SplittableRandom and\n- * SecureRandom. Random (LCG) is the weakest of available algorithms and it\n+ * before JDK 17: Random, ThreadLocalRandom, SplittableRandom, and\n+ * SecureRandom. Random (LCG) is the weakest of the available algorithms, and it\n@@ -141,5 +141,6 @@\n- * <p> The algorithms in the LXM group use a similar algorithm. The parameters\n- * of the algorithm can be found in algorithm name. The numbers indicate the\n- * number of bits in the lower and upper state bits respectively. Mix indicates\n- * the algorithm uses mix congruency. StarStar indicates use a double\n- * multiplier.\n+ * <p> The algorithms in the LXM group are similar to each other. The parameters\n+ * of each algorithm can be found in the algorithm name. The number after \"L\" indicates the\n+ * number of state bits for the LCG subgenerator, and the number after \"X\" indicates the\n+ * number of state bits for the XBG subgenerator. \"Mix\" indicates that\n+ * the algorithm uses an 8-operation bit-mixing function; \"StarStar\" indicates use\n+ * of a 3-operation bit-scrambler.\n@@ -147,2 +148,4 @@\n- * <p> The algorithms in the Xoroshiro\/Xoshiro are more traditional algorithms\n- * where the number in the name indicates the period.\n+ * <p> The algorithms in the Xoroshiro\/Xoshiro group are more traditional algorithms\n+ * (see David Blackman and Sebastiano Vigna, \"Scrambled Linear Pseudorandom\n+ * Number Generators,\" ACM Transactions on Mathematical Software, 2021);\n+ * the number in the name indicates the number of state bits.\n@@ -212,1 +215,1 @@\n- * algorithms; check the JDK's documentation for details. The set of algorithm\n+ * algorithms; check the JDK's documentation for details. The set of algorithms\n@@ -238,1 +241,1 @@\n- *      <td style=\"text-align:left\">BigInteger.ONE.shiftLeft(N*64).subtract(BigInteger.ONE).shiftLeft(128)<\/td>\n+ *      <td style=\"text-align:left\">BigInteger.ONE.shiftLeft(1024).subtract(BigInteger.ONE).shiftLeft(128)<\/td>\n@@ -266,1 +269,1 @@\n- *      <td style=\"text-align:left\">BigInteger.ONE.shiftLeft(N*64).subtract(BigInteger.ONE).shiftLeft(64)<\/td>\n+ *      <td style=\"text-align:left\">BigInteger.ONE.shiftLeft(1024).subtract(BigInteger.ONE).shiftLeft(64)<\/td>\n@@ -275,1 +278,1 @@\n- *      <td style=\"text-align:right\">1<\/td>\n+ *      <td style=\"text-align:right\">2<\/td>\n@@ -282,1 +285,1 @@\n- *      <td style=\"text-align:right\">1<\/td>\n+ *      <td style=\"text-align:right\">2<\/td>\n@@ -317,1 +320,1 @@\n- *      <td style=\"text-align:right\">2<\/td>\n+ *      <td style=\"text-align:right\">1<\/td>\n@@ -324,1 +327,1 @@\n- *      <td style=\"text-align:right\">4<\/td>\n+ *      <td style=\"text-align:right\">3<\/td>\n@@ -376,2 +379,3 @@\n- * that using one LCG subgenerator and one xor-based subgenerator (rather\n- * than two LCG subgenerators) would provide a longer period, superior\n+ * that using one Linear Congruential Generator (LCG) as a first subgenerator\n+ * and one Xor-Based Generator (XBG) as a second subgenerator (rather\n+ * than using two LCG subgenerators) would provide a longer period, superior\n@@ -380,3 +384,3 @@\n- * xor-based generators (xoroshiro or xoshiro, described by Blackman and\n- * Vigna in \"Scrambled Linear Pseudorandom Number Generators\", ACM\n- * Trans. Math. Softw., 2021) with an LCG that uses one of the best\n+ * XBG algorithms (xoroshiro128 or xoshiro256, described by Blackman and\n+ * Vigna in \"Scrambled Linear Pseudorandom Number Generators\", ACM Transactions\n+ * on Mathematical Software, 2021) with an LCG that uses one of the best\n@@ -384,10 +388,11 @@\n- * in 2019 by Steele and Vigna), and then applies a mixing function\n- * identified by Doug Lea. Testing has confirmed that the LXM algorithm\n- * is far superior in quality to the SplitMix algorithm (2014) used by\n- * SplittableRandom.\n- *\n- * Each class with a name of the form {@code L}<i>p<\/i>{@code X}<i>q<\/i>{@code\n- * SomethingRandom} uses some specific member of the LXM family of random number\n- * algorithms; \"LXM\" is short for \"LCG, Xorshift, Mixing function\". Every LXM\n- * generator consists of two subgenerators; one is an LCG (Linear Congruential\n- * Generator) and the other is an Xorshift generator. Each output of an LXM\n+ * in 2019 by Steele and Vigna), and then applies either a mixing function\n+ * identified by Doug Lea or a simple scrambler proposed by Blackman and Vigna.\n+ * Testing has confirmed that the LXM algorithm is far superior in quality to\n+ * the SplitMix algorithm (2014) used by {@code SplittableRandom}.\n+ *\n+ * Each class with a name of the form\n+ * {@code L}<i>p<\/i>{@code X}<i>q<\/i>{@code SomethingRandom}\n+ * uses some specific member of the LXM family of random number\n+ * algorithms; \"LXM\" is short for \"LCG, XBG, Mixer\". Every LXM\n+ * generator has two subgenerators; one is an LCG (Linear Congruential\n+ * Generator) and the other is an XBG (Xor-Based Generator). Each output of an LXM\n@@ -395,2 +400,2 @@\n- * Xorshift generator by using a Mixing function (and then the state of the LCG\n- * and the state of the Xorshift generator are advanced).\n+ * XBG using a Mixing function (and then the state of the LCG\n+ * and the state of the XBG are advanced).\n@@ -409,2 +414,2 @@\n- * <p> The Xorshift subgenerator can in principle be any one of a wide variety\n- * of xorshift algorithms; in this package it is always either\n+ * <p> The XBG subgenerator can in principle be any one of a wide variety\n+ * of XBG algorithms; in this package it is always either\n@@ -412,1 +417,2 @@\n- * case without any final scrambler such as \"+\" or \"**\". Its state consists of\n+ * case without any final scrambler (such as \"+\" or \"**\") because LXM uses\n+ * a separate Mixer later in the process. The XBG state consists of\n@@ -430,1 +436,1 @@\n- * (If <i>q<\/i> is 1024 or larger, the Xorshift state is represented as an\n+ * (If <i>q<\/i> is 1024 or larger, the XBG state is represented as an\n@@ -548,1 +554,1 @@\n- * all of them (2<sup>256<\/sup>%minus;2<sup>64<\/sup>) occur 2<sup>64<\/sup> times\n+ * all of them (2<sup>256<\/sup>&minus;2<sup>64<\/sup>) occur 2<sup>64<\/sup> times\n@@ -563,1 +569,1 @@\n- * Xorshift algorithm used, the specific numeric parameters for that Xorshift\n+ * XBG algorithm used, the specific numeric parameters for that XBG\n@@ -577,2 +583,2 @@\n- *       <th style=\"text-align:left\">Xorshift algorithm<\/th>\n- *       <th style=\"text-align:left\">Xorshift parameters<\/th>\n+ *       <th style=\"text-align:left\">XBG algorithm<\/th>\n+ *       <th style=\"text-align:left\">XBG parameters<\/th>\n","filename":"src\/java.base\/share\/classes\/java\/util\/random\/package-info.java","additions":48,"deletions":42,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-     * The per-instance state: sh and sl for the LCG; the array x for the xorshift;\n+     * The per-instance state: sh and sl for the LCG; the array x for the XBG;\n@@ -168,16 +168,16 @@\n-     * @param x0 first word of the initial state for the xorshift generator\n-     * @param x1 second word of the initial state for the xorshift generator\n-     * @param x2 third word of the initial state for the xorshift generator\n-     * @param x3 fourth word of the initial state for the xorshift generator\n-     * @param x4 fifth word of the initial state for the xorshift generator\n-     * @param x5 sixth word of the initial state for the xorshift generator\n-     * @param x6 seventh word of the initial state for the xorshift generator\n-     * @param x7 eight word of the initial state for the xorshift generator\n-     * @param x8 ninth word of the initial state for the xorshift generator\n-     * @param x9 tenth word of the initial state for the xorshift generator\n-     * @param x10 eleventh word of the initial state for the xorshift generator\n-     * @param x11 twelfth word of the initial state for the xorshift generator\n-     * @param x12 thirteenth word of the initial state for the xorshift generator\n-     * @param x13 fourteenth word of the initial state for the xorshift generator\n-     * @param x14 fifteenth word of the initial state for the xorshift generator\n-     * @param x15 sixteenth word of the initial state for the xorshift generator\n+     * @param x0 first word of the initial state for the XBG\n+     * @param x1 second word of the initial state for the XBG\n+     * @param x2 third word of the initial state for the XBG\n+     * @param x3 fourth word of the initial state for the XBG\n+     * @param x4 fifth word of the initial state for the XBG\n+     * @param x5 sixth word of the initial state for the XBG\n+     * @param x6 seventh word of the initial state for the XBG\n+     * @param x7 eight word of the initial state for the XBG\n+     * @param x8 ninth word of the initial state for the XBG\n+     * @param x9 tenth word of the initial state for the XBG\n+     * @param x10 eleventh word of the initial state for the XBG\n+     * @param x11 twelfth word of the initial state for the XBG\n+     * @param x12 thirteenth word of the initial state for the XBG\n+     * @param x13 fourteenth word of the initial state for the XBG\n+     * @param x14 fifteenth word of the initial state for the XBG\n+     * @param x15 sixteenth word of the initial state for the XBG\n","filename":"src\/jdk.random\/share\/classes\/jdk\/random\/L128X1024MixRandom.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-     * The per-instance state: sh and sl for the LCG; x0 and x1 for the xorshift.\n+     * The per-instance state: sh and sl for the LCG; x0 and x1 for the XBG.\n@@ -155,2 +155,2 @@\n-     * @param x0 first word of the initial state for the xorshift generator\n-     * @param x1 second word of the initial state for the xorshift generator\n+     * @param x0 first word of the initial state for the XBG\n+     * @param x1 second word of the initial state for the XBG\n@@ -265,1 +265,1 @@\n-       \/\/ Update the Xorshift subgenerator\n+       \/\/ Update the XBG subgenerator\n","filename":"src\/jdk.random\/share\/classes\/jdk\/random\/L128X128MixRandom.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-     * The per-instance state: sh and sl for the LCG; x0, x1, x2, and x3 for the xorshift.\n+     * The per-instance state: sh and sl for the LCG; x0, x1, x2, and x3 for the XBG.\n@@ -164,4 +164,4 @@\n-     * @param x0 first word of the initial state for the xorshift generator\n-     * @param x1 second word of the initial state for the xorshift generator\n-     * @param x2 third word of the initial state for the xorshift generator\n-     * @param x3 fourth word of the initial state for the xorshift generator\n+     * @param x0 first word of the initial state for the XBG\n+     * @param x1 second word of the initial state for the XBG\n+     * @param x2 third word of the initial state for the XBG\n+     * @param x3 fourth word of the initial state for the XBG\n@@ -285,1 +285,1 @@\n-       \/\/ Update the Xorshift subgenerator\n+       \/\/ Update the XBG subgenerator\n","filename":"src\/jdk.random\/share\/classes\/jdk\/random\/L128X256MixRandom.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-     * The per-instance state: s for the LCG; x0 and x1 for the xorshift.\n+     * The per-instance state: s for the LCG; x0 and x1 for the XBG.\n@@ -151,2 +151,2 @@\n-     * @param x0 first word of the initial state for the xorshift generator\n-     * @param x1 second word of the initial state for the xorshift generator\n+     * @param x0 first word of the initial state for the XBG\n+     * @param x1 second word of the initial state for the XBG\n@@ -238,1 +238,1 @@\n-       \/\/ Update the Xorshift subgenerator\n+       \/\/ Update the XBG subgenerator\n","filename":"src\/jdk.random\/share\/classes\/jdk\/random\/L32X64MixRandom.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-     * The per-instance state: s for the LCG; the array x for the xorshift;\n+     * The per-instance state: s for the LCG; the array x for the XBG;\n@@ -161,16 +161,16 @@\n-     * @param x0 first word of the initial state for the xorshift generator\n-     * @param x1 second word of the initial state for the xorshift generator\n-     * @param x2 third word of the initial state for the xorshift generator\n-     * @param x3 fourth word of the initial state for the xorshift generator\n-     * @param x4 fifth word of the initial state for the xorshift generator\n-     * @param x5 sixth word of the initial state for the xorshift generator\n-     * @param x6 seventh word of the initial state for the xorshift generator\n-     * @param x7 eight word of the initial state for the xorshift generator\n-     * @param x8 ninth word of the initial state for the xorshift generator\n-     * @param x9 tenth word of the initial state for the xorshift generator\n-     * @param x10 eleventh word of the initial state for the xorshift generator\n-     * @param x11 twelfth word of the initial state for the xorshift generator\n-     * @param x12 thirteenth word of the initial state for the xorshift generator\n-     * @param x13 fourteenth word of the initial state for the xorshift generator\n-     * @param x14 fifteenth word of the initial state for the xorshift generator\n-     * @param x15 sixteenth word of the initial state for the xorshift generator\n+     * @param x0 first word of the initial state for the XBG\n+     * @param x1 second word of the initial state for the XBG\n+     * @param x2 third word of the initial state for the XBG\n+     * @param x3 fourth word of the initial state for the XBG\n+     * @param x4 fifth word of the initial state for the XBG\n+     * @param x5 sixth word of the initial state for the XBG\n+     * @param x6 seventh word of the initial state for the XBG\n+     * @param x7 eight word of the initial state for the XBG\n+     * @param x8 ninth word of the initial state for the XBG\n+     * @param x9 tenth word of the initial state for the XBG\n+     * @param x10 eleventh word of the initial state for the XBG\n+     * @param x11 twelfth word of the initial state for the XBG\n+     * @param x12 thirteenth word of the initial state for the XBG\n+     * @param x13 fourteenth word of the initial state for the XBG\n+     * @param x14 fifteenth word of the initial state for the XBG\n+     * @param x15 sixteenth word of the initial state for the XBG\n","filename":"src\/jdk.random\/share\/classes\/jdk\/random\/L64X1024MixRandom.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-        equidistribution = 1\n+        equidistribution = 2\n@@ -138,1 +138,1 @@\n-     * The per-instance state: s for the LCG; x0 and x1 for the xorshift.\n+     * The per-instance state: s for the LCG; x0 and x1 for the XBG.\n@@ -152,2 +152,2 @@\n-     * @param x0 first word of the initial state for the xorshift generator\n-     * @param x1 second word of the initial state for the xorshift generator\n+     * @param x0 first word of the initial state for the XBG\n+     * @param x1 second word of the initial state for the XBG\n@@ -241,1 +241,1 @@\n-       \/\/ Update the Xorshift subgenerator\n+       \/\/ Update the XBG subgenerator\n","filename":"src\/jdk.random\/share\/classes\/jdk\/random\/L64X128MixRandom.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-        equidistribution = 1\n+        equidistribution = 2\n@@ -138,1 +138,1 @@\n-     * The per-instance state: s for the LCG; x0 and x1 for the xorshift.\n+     * The per-instance state: s for the LCG; x0 and x1 for the XBG.\n@@ -152,2 +152,2 @@\n-     * @param x0 first word of the initial state for the xorshift generator\n-     * @param x1 second word of the initial state for the xorshift generator\n+     * @param x0 first word of the initial state for the XBG\n+     * @param x1 second word of the initial state for the XBG\n@@ -241,1 +241,1 @@\n-       \/\/ Update the Xorshift subgenerator\n+       \/\/ Update the XBG subgenerator\n","filename":"src\/jdk.random\/share\/classes\/jdk\/random\/L64X128StarStarRandom.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-     * The per-instance state: s for the LCG; x0, x1, x2, and x3 for the xorshift.\n+     * The per-instance state: s for the LCG; x0, x1, x2, and x3 for the XBG.\n@@ -153,4 +153,4 @@\n-     * @param x0 first word of the initial state for the xorshift generator\n-     * @param x1 second word of the initial state for the xorshift generator\n-     * @param x2 third word of the initial state for the xorshift generator\n-     * @param x3 fourth word of the initial state for the xorshift generator\n+     * @param x0 first word of the initial state for the XBG\n+     * @param x1 second word of the initial state for the XBG\n+     * @param x2 third word of the initial state for the XBG\n+     * @param x3 fourth word of the initial state for the XBG\n@@ -253,1 +253,1 @@\n-       \/\/ Update the Xorshift subgenerator\n+       \/\/ Update the XBG subgenerator\n","filename":"src\/jdk.random\/share\/classes\/jdk\/random\/L64X256MixRandom.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -46,0 +46,2 @@\n+ * (See David Blackman and Sebastiano Vigna, \"Scrambled Linear Pseudorandom\n+ * Number Generators,\" ACM Transactions on Mathematical Software, 2021.)\n@@ -77,1 +79,1 @@\n-        equidistribution = 2\n+        equidistribution = 1\n@@ -86,10 +88,0 @@\n-     * See http:\/\/xoshiro.di.unimi.it and these two papers:\n-     *\n-     *    Sebastiano Vigna. 2016. An Experimental Exploration of Marsaglia's\n-     *    xorshift Generators, Scrambled. ACM Transactions on Mathematical\n-     *    Software 42, 4, Article 30 (June 2016), 23 pages.\n-     *    https:\/\/doi.org\/10.1145\/2845077\n-     *\n-     *    David Blackman and Sebastiano Vigna.  2018.  Scrambled Linear\n-     *    Pseudorandom Number Generators.  Computing Research Repository (CoRR).\n-     *    http:\/\/arxiv.org\/abs\/1805.01407\n","filename":"src\/jdk.random\/share\/classes\/jdk\/random\/Xoroshiro128PlusPlus.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -60,0 +60,2 @@\n+ * (See David Blackman and Sebastiano Vigna, \"Scrambled Linear Pseudorandom\n+ * Number Generators,\" ACM Transactions on Mathematical Software, 2021.)\n@@ -92,1 +94,1 @@\n-        equidistribution = 4\n+        equidistribution = 3\n@@ -99,1 +101,1 @@\n-     * This is an implementation of the xoroshiro128++ algorithm version 1.0,\n+     * This is an implementation of the xoshiro256++ algorithm version 1.0,\n@@ -101,10 +103,0 @@\n-     * See http:\/\/xoshiro.di.unimi.it and these two papers:\n-     *\n-     *    Sebastiano Vigna. 2016. An Experimental Exploration of Marsaglia's\n-     *    xorshift Generators, Scrambled. ACM Transactions on Mathematical\n-     *    Software 42, 4, Article 30 (June 2016), 23 pages.\n-     *    https:\/\/doi.org\/10.1145\/2845077\n-     *\n-     *    David Blackman and Sebastiano Vigna.  2018.  Scrambled Linear\n-     *    Pseudorandom Number Generators.  Computing Research Repository (CoRR).\n-     *    http:\/\/arxiv.org\/abs\/1805.01407\n","filename":"src\/jdk.random\/share\/classes\/jdk\/random\/Xoshiro256PlusPlus.java","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"}]}