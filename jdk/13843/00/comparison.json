{"files":[{"patch":"@@ -33,0 +33,1 @@\n+#include \"runtime\/atomic.hpp\"\n@@ -154,7 +155,1 @@\n-  \/\/ Atomically update the flags with the bits given\n-  u1 old_flags, new_flags, witness;\n-  do {\n-    old_flags = flags;\n-    new_flags = old_flags | mask;\n-    witness = Atomic::cmpxchg(&flags, old_flags, new_flags);\n-  } while (witness != old_flags);\n+  Atomic::fetch_then_or(&flags, mask);\n@@ -164,7 +159,2 @@\n-  \/\/ Atomically update the flags with the bits given\n-  u1 old_flags, new_flags, witness;\n-  do {\n-    old_flags = flags;\n-    new_flags = old_flags & ~mask;\n-    witness = Atomic::cmpxchg(&flags, old_flags, new_flags);\n-  } while (witness != old_flags);\n+  u1 val = (~mask);\n+  Atomic::fetch_then_and(&flags, val);\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.inline.hpp","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"runtime\/atomic.hpp\"\n@@ -34,21 +33,0 @@\n-\/\/ This can be removed for the atomic bitset functions, when available.\n-void InstanceKlassFlags::atomic_set_bits(u1 bits) {\n-  \/\/ Atomically update the status with the bits given\n-  u1 old_status, new_status, f;\n-  do {\n-    old_status = _status;\n-    new_status = old_status | bits;\n-    f = Atomic::cmpxchg(&_status, old_status, new_status);\n-  } while(f != old_status);\n-}\n-\n-void InstanceKlassFlags::atomic_clear_bits(u1 bits) {\n-  \/\/ Atomically update the status with the bits given\n-  u1 old_status, new_status, f;\n-  do {\n-    old_status = _status;\n-    new_status = old_status & ~bits;\n-    f = Atomic::cmpxchg(&_status, old_status, new_status);\n-  } while(f != old_status);\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/instanceKlassFlags.cpp","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#include \"runtime\/atomic.hpp\"\n+\n@@ -124,2 +126,2 @@\n-  void atomic_set_bits(u1 bits);\n-  void atomic_clear_bits(u1 bits);\n+  void atomic_set_bits(u1 bits)   { Atomic::fetch_then_or(&_status, bits); }\n+  void atomic_clear_bits(u1 bits) { u1 val = (~bits); Atomic::fetch_then_and(&_status, val); }\n","filename":"src\/hotspot\/share\/oops\/instanceKlassFlags.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"runtime\/atomic.hpp\"\n@@ -30,21 +29,0 @@\n-\/\/ This can be removed for the atomic bitset functions, when available.\n-void MethodFlags::atomic_set_bits(u4 bits) {\n-  \/\/ Atomically update the status with the bits given\n-  u4 old_status, new_status, f;\n-  do {\n-    old_status = _status;\n-    new_status = old_status | bits;\n-    f = Atomic::cmpxchg(&_status, old_status, new_status);\n-  } while(f != old_status);\n-}\n-\n-void MethodFlags::atomic_clear_bits(u4 bits) {\n-  \/\/ Atomically update the status with the bits given\n-  u4 old_status, new_status, f;\n-  do {\n-    old_status = _status;\n-    new_status = old_status & ~bits;\n-    f = Atomic::cmpxchg(&_status, old_status, new_status);\n-  } while(f != old_status);\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/methodFlags.cpp","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"runtime\/atomic.hpp\"\n@@ -89,2 +90,2 @@\n-  void atomic_set_bits(u4 bits);\n-  void atomic_clear_bits(u4 bits);\n+  void atomic_set_bits(u4 bits)   { Atomic::fetch_then_or(&_status, bits); }\n+  void atomic_clear_bits(u4 bits) { u4 val = (~bits); Atomic::fetch_then_and(&_status, val); }\n","filename":"src\/hotspot\/share\/oops\/methodFlags.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}