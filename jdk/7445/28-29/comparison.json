{"files":[{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8266670\n+ * @summary Test expected AccessFlag's on module-related structures.\n+ *\/\n+\n+import java.lang.reflect.AccessFlag;\n+import java.lang.module.*;\n+import java.util.Set;\n+\n+public class ModuleDescriptorAccessFlagTest {\n+    public static void main(String... args) {\n+        \/\/ Test ModuleDescriptor.Modifier\n+        var openMod = ModuleDescriptor.newModule(\"foo\",\n+                                                 Set.of(ModuleDescriptor.Modifier.OPEN,\n+                                                        ModuleDescriptor.Modifier.SYNTHETIC,\n+                                                        ModuleDescriptor.Modifier.MANDATED)).build();\n+        checkAccessFlags(openMod, openMod.accessFlags(), \"[OPEN, SYNTHETIC, MANDATED]\");\n+        \/\/ AUTOMATIC does not have a corresponding access flag so is\n+        \/\/ *not* tested here.\n+\n+        \/\/ Test ModuleDescriptor.Requires.Modifier\n+        var requireMod = ModuleDescriptor.newModule(\"bar\")\n+            .requires(Set.of(ModuleDescriptor.Requires.Modifier.STATIC,\n+                             ModuleDescriptor.Requires.Modifier.SYNTHETIC,\n+                             ModuleDescriptor.Requires.Modifier.TRANSITIVE), \"baz\")\n+            .build();\n+\n+        for (ModuleDescriptor.Requires requires : requireMod.requires()) {\n+            if (\"java.base\".equals(requires.name())) {\n+                checkAccessFlags(requires, requires.accessFlags(), \"[MANDATED]\");\n+            } else {\n+                \/\/ Note \"STATIC_PHASE\" rather than \"STATIC\"\n+                checkAccessFlags(requires, requires.accessFlags(), \"[TRANSITIVE, STATIC_PHASE, SYNTHETIC]\");\n+            }\n+        }\n+\n+        \/\/ Test ModuleDescriptor.Exports.Modifier\n+        var exportMod = ModuleDescriptor.newModule(\"baz\")\n+            .exports(Set.of(ModuleDescriptor.Exports.Modifier.MANDATED,\n+                            ModuleDescriptor.Exports.Modifier.SYNTHETIC), \"quux\")\n+            .build();\n+        for (ModuleDescriptor.Exports exports : exportMod.exports()) {\n+            checkAccessFlags(exports, exports.accessFlags(), \"[SYNTHETIC, MANDATED]\");\n+        }\n+\n+        \/\/ Test ModuleDescriptor.Opens.Modifier\n+        var opensMod = ModuleDescriptor.newModule(\"quux\")\n+            .exports(Set.of(ModuleDescriptor.Exports.Modifier.MANDATED,\n+                            ModuleDescriptor.Exports.Modifier.SYNTHETIC), \"xxyzzy\")\n+            .build();\n+        for (ModuleDescriptor.Opens opens : exportMod.opens()) {\n+            checkAccessFlags(opens, opens.accessFlags(), \"[SYNTHETIC, MANDATED]\");\n+        }\n+    }\n+\n+    private static void checkAccessFlags(Object o, Set<AccessFlag> accessFlags, String expected) {\n+        String actual = accessFlags.toString();\n+        if (!expected.equals(actual)) {\n+            throw new RuntimeException(\"On \" + o.toString() +\n+                                       \" expected \" + expected +\n+                                       \" got \" + actual);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/ModuleDescriptorAccessFlagTest.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"}]}