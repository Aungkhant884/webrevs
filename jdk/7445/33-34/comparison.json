{"files":[{"patch":"@@ -42,0 +42,12 @@\n+ *\n+ * This test is written on top of the facilities of core reflection.\n+ *\n+ * Note that core reflection does not offer a supported mechanism to\n+ * return the Class object created from a module-info.class\n+ * file. Therefore, this test does not attempt to probe the setting of\n+ * that access flag.\n+ *\n+ * For a class, the VM must treat the class as if the ACC_SUPER bit\n+ * were set, but that bit is cleared by HotSpot when it is passed out\n+ * to the core reflection libraries. Therefore, this test does not\n+ * attempt to check whether or not AccessFlag.SUPER is set.\n@@ -43,1 +55,2 @@\n-public class ClassAccessFlagTest {\n+@ExpectedClassFlags(\"[PUBLIC, FINAL]\")\n+public final class ClassAccessFlagTest {\n@@ -45,6 +58,12 @@\n-        for (var clazz :\n-                 ClassAccessFlagTest.class.getDeclaredClasses()) {\n-            checkClass(clazz);\n-        }\n-        checkClass(TestInterface.class);\n-        checkClass(ExpectedClassFlags.class);\n+        \/\/ Top-level and axuillary classes; i.e. non-inner classes\n+        Class<?>[] testClasses = {\n+            ClassAccessFlagTest.class,\n+            TestInterface.class,\n+            ExpectedClassFlags.class,\n+            TestOuterEnum.class\n+        };\n+        checkClasses(testClasses);\n+\n+        \/\/ Nested classes of ClassAccessFlagTest\n+        checkClasses(ClassAccessFlagTest.class.getDeclaredClasses());\n+\n@@ -55,0 +74,6 @@\n+    private static void checkClasses(Class<?>[] classes) {\n+        for (var clazz : classes) {\n+            checkClass(clazz);\n+        }\n+    }\n+\n@@ -148,0 +173,6 @@\n+    \/\/ inner classes and interfaces; possible flags on INNER_CLASS\n+    \/\/ locations:\n+    \/\/ PUBLIC, PRIVATE, PROTECTED, STATIC, FINAL, INTERFACE, ABSTRACT,\n+    \/\/ SYNTHETIC, ANNOTATION, ENUM.\n+\n+    @ExpectedClassFlags(\"[PUBLIC, STATIC, INTERFACE, ABSTRACT]\")\n@@ -149,0 +180,1 @@\n+    @ExpectedClassFlags(\"[PROTECTED, STATIC, INTERFACE, ABSTRACT]\")\n@@ -150,0 +182,1 @@\n+    @ExpectedClassFlags(\"[PRIVATE, STATIC, INTERFACE, ABSTRACT]\")\n@@ -151,0 +184,1 @@\n+    @ExpectedClassFlags(\"[STATIC, INTERFACE, ABSTRACT]\")\n@@ -153,1 +187,9 @@\n-    \/\/ Classes\n+    @ExpectedClassFlags(\"[FINAL]\")\n+    \/*package*\/ final class TestFinalClass {}\n+\n+    @ExpectedClassFlags(\"[ABSTRACT]\")\n+    \/*package*\/ abstract class TestAbstractClass {}\n+\n+    @ExpectedClassFlags(\"[STATIC, INTERFACE, ABSTRACT, ANNOTATION]\")\n+    \/*package*\/ @interface TestMarkerAnnotation {}\n+\n@@ -185,0 +227,6 @@\n+\n+\n+@ExpectedClassFlags(\"[FINAL, ENUM]\")\n+enum TestOuterEnum {\n+    INSTANCE;\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/ClassAccessFlagTest.java","additions":56,"deletions":8,"binary":false,"changes":64,"status":"modified"}]}