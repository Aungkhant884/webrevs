{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -1308,0 +1309,1 @@\n+     * @see #accessFlags()\n@@ -1318,0 +1320,11 @@\n+    \/**\n+     * {@return an immutable set of the {@linkplain AccessFlag access\n+     * flags} for this class}\n+     * @see #getModifiers()\n+     * @jvms 4.1 The ClassFile Structure\n+     * @jvms 4.7.6 The InnerClasses Attribute\n+     * @since 19\n+     *\/\n+    public Set<AccessFlag> accessFlags() {\n+        return Set.of(); \/\/ stubbed out empty set\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,274 @@\n+\/*\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.reflect;\n+\n+import java.lang.annotation.ElementType;\n+import java.util.Set;\n+import static java.lang.annotation.ElementType.*;\n+\n+\/**\n+ * Represents a JVM access flag on a runtime member, such as a\n+ * {@linkplain Class class}, {@linkplain Field field}, or {@linkplain\n+ * Executable method}.\n+ *\n+ * <P>JVM access flags are related to, but distinct from Java language\n+ * {@linkplain Modifier modifiers}. Some modifiers and access flags\n+ * have a one-to-one correspondence, such as {@code public}. In other\n+ * cases, some language-level modifiers do <em>not<\/em> have an access\n+ * flag, such as {@code sealed} (JVMS {@jvms 4.7.31}) and some access\n+ * flags have no corresponding modifier, such as {@linkplain SYNTHETIC\n+ * synthetic}\n+ *\n+ * <p>The values for the constants representing the access flags are\n+ * taken from the tables in sections {@jvms 4.1}, {@jvms 4.4}, {@jvms\n+ * 4.5}, and {@jvms 4.7} of <cite>The Java Virtual Machine\n+ * Specification<\/cite>.\n+ *\n+ * @see java.lang.reflect.Modifier\n+ * @see java.compiler\/javax.lang.model.element.Modifier\n+ * @since 19\n+ *\/\n+@SuppressWarnings(\"doclint:reference\") \/\/ cross-module link\n+public enum AccessFlag {\n+    \/**\n+     * The access flag {@code ACC_PUBLIC}, corresponding to the source\n+     * modifier {@link Modifier#PUBLIC public}.\n+     *\/\n+    PUBLIC(Modifier.PUBLIC, true, Set.of(TYPE, CONSTRUCTOR, METHOD, FIELD)),\n+\n+    \/**\n+     * The access flag {@code ACC_PROTECTED}, corresponding to the\n+     * source modifier {@link Modifier#PROTECTED protected}.\n+     *\/\n+    PROTECTED(Modifier.PROTECTED, true, Set.of(CONSTRUCTOR, METHOD, FIELD)),\n+\n+    \/**\n+     * The access flag {@code ACC_PRIVATE}, corresponding to the\n+     * source modifier {@link Modifier#PRIVATE private}.\n+     *\/\n+    PRIVATE(Modifier.PRIVATE, true, Set.of(CONSTRUCTOR, METHOD, FIELD)),\n+\n+    \/**\n+     * The access flag {@code ACC_ABSTRACT}, corresponding to the\n+     * source modifier {@code link Modifier#ABSTRACT abstract}.\n+     *\/\n+    ABSTRACT(Modifier.ABSTRACT, true, Set.of(TYPE, METHOD)),\n+\n+    \/**\n+     * The access flag {@code ACC_STATIC}, corresponding to the source\n+     * modifier {@link Modifier#STATIC static}.\n+     *\/\n+    STATIC(Modifier.STATIC, true, Set.of(FIELD, METHOD)),\n+\n+    \/**\n+     * The access flag {@code ACC_FINAL}, corresponding to the source\n+     * modifier {@link Modifier#FINAL final}.\n+     *\/\n+    FINAL(Modifier.FINAL, true, Set.of(FIELD, METHOD, PARAMETER, TYPE)),\n+\n+    \/**\n+     * The access flag {@code ACC_TRANSIENT}, corresponding to the\n+     * source modifier {@link Modifier#TRANSIENT transient}.\n+     *\/\n+    TRANSIENT(Modifier.TRANSIENT, true, Set.of(FIELD)),\n+\n+     \/**\n+      * The access flag {@code ACC_VOLATILE}, corresponding to the\n+      * source modifier {@link Modifier#VOLATILE volatile}.\n+      *\/\n+    VOLATILE(Modifier.VOLATILE, true, Set.of(FIELD)),\n+\n+    \/**\n+     * The access flag {@code ACC_SYNCHRONIZED}, corresponding to the\n+     * source modifier {@link Modifier#SYNCHRONIZED synchronized}.\n+     *\/\n+    SYNCHRONIZED(Modifier.SYNCHRONIZED, true, Set.of(METHOD, CONSTRUCTOR)),\n+\n+    \/**\n+     * The access flag {@code ACC_NATIVE}, corresponding to the source\n+     * modifier {@link Modifier#NATIVE native}.\n+     *\/\n+    NATIVE(Modifier.NATIVE, true, Set.of(METHOD)),\n+\n+    \/**\n+     * The access flag {@code ACC_INTERFACE}.\n+     * @see Class#isInterface()\n+     *\/\n+    INTERFACE(Modifier.INTERFACE, false, Set.of(TYPE)),\n+\n+    \/**\n+     * The access flag {@code ACC_STRICT}, corresponding to the source\n+     * modifier {@link Modifier#STRICT strictfp}.\n+     *\/\n+    STRICT(Modifier.STRICT, true, Set.of(METHOD, CONSTRUCTOR)),\n+\n+    \/**\n+     * The access flag {@code ACC_BRIDGE}\n+     * @see Method#isBridge()\n+     *\/\n+    BRIDGE(0x00000040, false, Set.of(METHOD, CONSTRUCTOR)),\n+\n+    \/**\n+     * The access flag {@code ACC_VARARGS}.\n+     * @see Executable#isVarArgs()\n+     *\/\n+    VARARGS(0x00000080, false, Set.of(METHOD, CONSTRUCTOR)),\n+\n+    \/**\n+     * The access flag {@code ACC_SYNTHETIC}.\n+     * @see Class#isSynthetic()\n+     * @see Executable#isSynthetic()\n+     *\/\n+    SYNTHETIC(0x00001000, false,\n+              Set.of(TYPE, FIELD, METHOD, CONSTRUCTOR, ElementType.MODULE, PARAMETER)),\n+\n+    \/**\n+     * The access flag {@code ACC_MANDATED}.\n+     *\/\n+    MANDATED(0x00008000, false, Set.of(ElementType.MODULE, PARAMETER)),\n+\n+    \/**\n+     * The access flag {@code ACC_ANNOTATION}.\n+     * @see Class#isAnnotation()\n+     *\/\n+    ANNOTATION(0x00002000, false, Set.of(TYPE)),\n+\n+   \/**\n+    * The access flag {@code ACC_ENUM}.\n+    * @see Class#isEnum()\n+    *\/\n+    ENUM(0x00004000, false, Set.of(TYPE, FIELD)),\n+\n+   \/**\n+    * The access flag {@code ACC_MODULE}.\n+    *\/\n+    MODULE(0x8000, false, Set.of(TYPE))\n+    ;\n+\n+    \/\/ May want to override toString for a different enum constant ->\n+    \/\/ name mapping.\n+\n+    private int mask;\n+    private boolean sourceModifier;\n+\n+    \/\/ For now, reuse ElementType rather than defining a separate\n+    \/\/ type.\n+    \/\/ Intentionally using Set rather than EnumSet since EnumSet is\n+    \/\/ mutable.\n+    private Set<ElementType> targets;\n+\n+    private AccessFlag(Set<ElementType> targets) {\n+        this.mask = 0x0;\n+        this.sourceModifier = false;\n+        this.targets = targets;\n+    }\n+\n+    private AccessFlag(int mask, boolean sourceModifier, Set<ElementType> targets) {\n+        this.mask = mask;\n+        this.sourceModifier = sourceModifier;\n+        this.targets = targets;\n+    }\n+\n+    \/**\n+     * {@return corresponding integer mask for the flag; 0 if none}\n+     *\/\n+    public int mask() {\n+        return mask;\n+    }\n+\n+    \/**\n+     * {@return whether or not the flag has a directly corresponding\n+     * modifier in the Java programming language}\n+     *\/\n+    public boolean sourceModifier() {\n+        return sourceModifier;\n+    }\n+\n+    \/**\n+     * {@return kinds of constructs the flag can be applied to}\n+     *\/\n+    public Set<ElementType> targets() {\n+        return targets;\n+    }\n+    \/\/ -------------------------------------------------------------\n+\n+    \/\/ Future utilities and static factories of this enum class will\n+    \/\/ be written using the information below, copied from Modifier\n+    \/\/ for bootstrapping.\n+\n+    \/\/ \/**\n+    \/\/ * The Java source modifiers that can be applied to a class.\n+    \/\/ * @jls 8.1.1 Class Modifiers\n+    \/\/ *\/\n+    \/\/ private static final int CLASS_MODIFIERS =\n+    \/\/ Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE |\n+    \/\/ Modifier.ABSTRACT | Modifier.STATIC | Modifier.FINAL |\n+    \/\/ Modifier.STRICT;\n+\n+    \/\/ \/**\n+    \/\/ * The Java source modifiers that can be applied to an interface.\n+    \/\/ * @jls 9.1.1 Interface Modifiers\n+    \/\/ *\/\n+    \/\/ private static final int INTERFACE_MODIFIERS =\n+    \/\/ Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE |\n+    \/\/ Modifier.ABSTRACT | Modifier.STATIC | Modifier.STRICT;\n+\n+\n+    \/\/ \/**\n+    \/\/ * The Java source modifiers that can be applied to a constructor.\n+    \/\/ * @jls 8.8.3 Constructor Modifiers\n+    \/\/ *\/\n+    \/\/ private static final int CONSTRUCTOR_MODIFIERS =\n+    \/\/ Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE;\n+\n+    \/\/ \/**\n+    \/\/ * The Java source modifiers that can be applied to a method.\n+    \/\/ * @jls 8.4.3 Method Modifiers\n+    \/\/ *\/\n+    \/\/ private static final int METHOD_MODIFIERS =\n+    \/\/ Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE |\n+    \/\/ Modifier.ABSTRACT | Modifier.STATIC | Modifier.FINAL |\n+    \/\/ Modifier.SYNCHRONIZED | Modifier.NATIVE | Modifier.STRICT;\n+\n+    \/\/ \/**\n+    \/\/ * The Java source modifiers that can be applied to a field.\n+    \/\/ * @jls 8.3.1 Field Modifiers\n+    \/\/ *\/\n+    \/\/ private static final int FIELD_MODIFIERS =\n+    \/\/ Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE |\n+    \/\/ Modifier.STATIC | Modifier.FINAL | Modifier.TRANSIENT |\n+    \/\/ Modifier.VOLATILE;\n+\n+    \/\/ \/**\n+    \/\/ * The Java source modifiers that can be applied to a method or constructor parameter.\n+    \/\/ * @jls 8.4.1 Formal Parameters\n+    \/\/ *\/\n+    \/\/ private static final int PARAMETER_MODIFIERS =\n+    \/\/ Modifier.FINAL;\n+\n+    \/\/ static final int ACCESS_MODIFIERS =\n+    \/\/ Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE;\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":274,"deletions":0,"binary":false,"changes":274,"status":"added"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Set;\n@@ -207,0 +208,1 @@\n+     * @see #accessFlags\n@@ -210,0 +212,13 @@\n+    \/**\n+     * {@return an immutable set of the {@linkplain AccessFlag access\n+     * flags} for the executable represented by this object}\n+     * @implSpec\n+     * TBD\n+     * @see #getModifiers()\n+     * @jvms 4.6 Methods\n+     * @since 19\n+     *\/\n+    public Set<AccessFlag> accessFlags() {\n+        return Set.of(); \/\/ stubbed out empty set\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.util.Set;\n@@ -205,0 +206,1 @@\n+     * @see #accessFlags()\n@@ -212,0 +214,11 @@\n+    \/**\n+     * {@return an immutable set of the {@linkplain AccessFlag access\n+     * flags} for this field}\n+     * @see #getModifiers()\n+     * @jvms 4.5 Fields\n+     * @since 19\n+     *\/\n+    public Set<AccessFlag> accessFlags() {\n+        return Set.of(); \/\/ stubbed out empty set\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Field.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.util.Set;\n+\n@@ -79,0 +81,1 @@\n+     * @see #accessFlags()\n@@ -82,0 +85,14 @@\n+\n+    \/**\n+     * {@return an immutable set of the {@linkplain AccessFlag access\n+     * flags} for this member}\n+     *\n+     * @implSpec\n+     * The default implementation returns an empty set.\n+     * @see #getModifiers()\n+     * @since 19\n+     *\/\n+    public default Set<AccessFlag> accessFlags() {\n+        return Set.of();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Member.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Set;\n@@ -164,0 +165,12 @@\n+    \/**\n+     * {@return an immutable set of the {@linkplain AccessFlag access\n+     * flags} for the parameter represented by this object}\n+     *\n+     * @see #getModifiers()\n+     * @jvms 4.7.24 The MethodParameters Attribute\n+     * @since 19\n+     *\/\n+    public Set<AccessFlag> accessFlags() {\n+        return Set.of(); \/\/ stubbed out empty set\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Parameter.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}