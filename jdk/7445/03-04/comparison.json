{"files":[{"patch":"@@ -50,0 +50,16 @@\n+ * <p>The {@linkplain #mask() mask} values for the different access\n+ * flags are <em>not<\/em> distinct. Flags are defined for different\n+ * kinds of JVM structures and the same bit position has different\n+ * meanings in different contexts. For example, {@code 0x0000_0040}\n+ * indicates a {@link #VOLATILE volatile} field but a {@linkplain\n+ * #BRIDGE bridge method}; {@code 0x0000_0080} indicates a {@link\n+ * #TRANSIENT transient} field but a {@linkplain #VARARGS variable\n+ * arity (varargs)} method.\n+ *\n+ * <p>The access flag constants are ordered by non-decreasing mask\n+ * value; that is the mask value of a constant is greater than or\n+ * equal to the mask value of an immediate neighbor to its (syntactic)\n+ * left. If new constants are added, this property will be\n+ * maintained. That implies new constants will not necessarily be\n+ * added at the end of the existing list.\n+ *\n@@ -62,6 +78,0 @@\n-    \/**\n-     * The access flag {@code ACC_PROTECTED}, corresponding to the\n-     * source modifier {@link Modifier#PROTECTED protected}.\n-     *\/\n-    PROTECTED(Modifier.PROTECTED, true, Set.of(CONSTRUCTOR, METHOD, FIELD)),\n-\n@@ -75,2 +85,2 @@\n-     * The access flag {@code ACC_ABSTRACT}, corresponding to the\n-     * source modifier {@code link Modifier#ABSTRACT abstract}.\n+     * The access flag {@code ACC_PROTECTED}, corresponding to the\n+     * source modifier {@link Modifier#PROTECTED protected}.\n@@ -78,1 +88,1 @@\n-    ABSTRACT(Modifier.ABSTRACT, true, Set.of(TYPE, METHOD)),\n+    PROTECTED(Modifier.PROTECTED, true, Set.of(CONSTRUCTOR, METHOD, FIELD)),\n@@ -93,2 +103,1 @@\n-     * The access flag {@code ACC_TRANSIENT}, corresponding to the\n-     * source modifier {@link Modifier#TRANSIENT transient}.\n+     * The access flag {@code ACC_SUPER}.\n@@ -96,1 +105,7 @@\n-    TRANSIENT(Modifier.TRANSIENT, true, Set.of(FIELD)),\n+    SUPER(0x0000_0020, false, Set.of(TYPE)),\n+\n+    \/**\n+     * The access flag {@code ACC_SYNCHRONIZED}, corresponding to the\n+     * source modifier {@link Modifier#SYNCHRONIZED synchronized}.\n+     *\/\n+    SYNCHRONIZED(Modifier.SYNCHRONIZED, true, Set.of(METHOD, CONSTRUCTOR)),\n@@ -105,2 +120,2 @@\n-     * The access flag {@code ACC_SYNCHRONIZED}, corresponding to the\n-     * source modifier {@link Modifier#SYNCHRONIZED synchronized}.\n+     * The access flag {@code ACC_BRIDGE}\n+     * @see Method#isBridge()\n@@ -108,1 +123,13 @@\n-    SYNCHRONIZED(Modifier.SYNCHRONIZED, true, Set.of(METHOD, CONSTRUCTOR)),\n+    BRIDGE(0x0000_0040, false, Set.of(METHOD, CONSTRUCTOR)),\n+\n+    \/**\n+     * The access flag {@code ACC_TRANSIENT}, corresponding to the\n+     * source modifier {@link Modifier#TRANSIENT transient}.\n+     *\/\n+    TRANSIENT(Modifier.TRANSIENT, true, Set.of(FIELD)),\n+\n+    \/**\n+     * The access flag {@code ACC_VARARGS}.\n+     * @see Executable#isVarArgs()\n+     *\/\n+    VARARGS(0x0000_0080, false, Set.of(METHOD, CONSTRUCTOR)),\n@@ -123,8 +150,2 @@\n-     * The access flag {@code ACC_STRICT}, corresponding to the source\n-     * modifier {@link Modifier#STRICT strictfp}.\n-     *\/\n-    STRICT(Modifier.STRICT, true, Set.of(METHOD, CONSTRUCTOR)),\n-\n-    \/**\n-     * The access flag {@code ACC_BRIDGE}\n-     * @see Method#isBridge()\n+     * The access flag {@code ACC_ABSTRACT}, corresponding to the\n+     * source modifier {@code link Modifier#ABSTRACT abstract}.\n@@ -132,1 +153,1 @@\n-    BRIDGE(0x00000040, false, Set.of(METHOD, CONSTRUCTOR)),\n+    ABSTRACT(Modifier.ABSTRACT, true, Set.of(TYPE, METHOD)),\n@@ -135,2 +156,2 @@\n-     * The access flag {@code ACC_VARARGS}.\n-     * @see Executable#isVarArgs()\n+     * The access flag {@code ACC_STRICT}, corresponding to the source\n+     * modifier {@link Modifier#STRICT strictfp}.\n@@ -138,1 +159,1 @@\n-    VARARGS(0x00000080, false, Set.of(METHOD, CONSTRUCTOR)),\n+    STRICT(Modifier.STRICT, true, Set.of(METHOD, CONSTRUCTOR)),\n@@ -145,1 +166,1 @@\n-    SYNTHETIC(0x00001000, false,\n+    SYNTHETIC(0x0000_1000, false,\n@@ -148,5 +169,0 @@\n-    \/**\n-     * The access flag {@code ACC_MANDATED}.\n-     *\/\n-    MANDATED(0x00008000, false, Set.of(ElementType.MODULE, PARAMETER)),\n-\n@@ -157,1 +173,1 @@\n-    ANNOTATION(0x00002000, false, Set.of(TYPE)),\n+    ANNOTATION(0x0000_2000, false, Set.of(TYPE)),\n@@ -163,1 +179,6 @@\n-    ENUM(0x00004000, false, Set.of(TYPE, FIELD)),\n+    ENUM(0x0000_4000, false, Set.of(TYPE, FIELD)),\n+\n+    \/**\n+     * The access flag {@code ACC_MANDATED}.\n+     *\/\n+    MANDATED(0x0000_8000, false, Set.of(ElementType.MODULE, PARAMETER)),\n@@ -168,1 +189,1 @@\n-    MODULE(0x8000, false, Set.of(TYPE))\n+   MODULE(0x0000_8000, false, Set.of(TYPE))\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":57,"deletions":36,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+        testMaskOrdering();\n@@ -53,0 +54,16 @@\n+\n+    \/\/ The mask values of the enum constants must be non-decreasing;\n+    \/\/ in other words stay the same (for colliding mask values) or go\n+    \/\/ up.\n+    private static void testMaskOrdering() {\n+        AccessFlag[] values = AccessFlag.values();\n+        for (int i = 1; i < values.length; i++) {\n+            AccessFlag left  = values[i-1];\n+            AccessFlag right = values[i];\n+            if (left.mask() > right.mask()) {\n+                throw new RuntimeException(left\n+                                           + \"has a greater mas than \"\n+                                           + right);\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/BasicAccessFlagTest.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}