{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -206,0 +207,11 @@\n+        \/**\n+         * {@return an immutable set of the module {@linkplain AccessFlag\n+         * requires flags}}\n+         * @see #modifiers()\n+         * @jvms 4.7.25 The Module Attribute\n+         * @since 19\n+         *\/\n+        public Set<AccessFlag> accessFlags() {\n+            return Set.of(); \/\/ stubbed out empty set\n+        }\n+\n@@ -420,0 +432,11 @@\n+        \/**\n+         * {@return an immutable set of the {@linkplain AccessFlag\n+         * module flags} for this module descriptor}\n+         * @see #modifiers()\n+         * @jvms 4.7.25 The Module Attribute\n+         * @since 19\n+         *\/\n+        public Set<AccessFlag> accessFlags() {\n+            return Set.of(); \/\/ stubbed out empty set\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/ModuleDescriptor.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -33,3 +33,3 @@\n- * Represents a JVM access flag on a runtime member, such as a\n- * {@linkplain Class class}, {@linkplain Field field}, or {@linkplain\n- * Executable method}.\n+ * Represents a JVM access or module-related flag on a runtime member,\n+ * such as a {@linkplain Class class}, {@linkplain Field field}, or\n+ * {@linkplain Executable method}.\n@@ -37,7 +37,7 @@\n- * <P>JVM access flags are related to, but distinct from Java language\n- * {@linkplain Modifier modifiers}. Some modifiers and access flags\n- * have a one-to-one correspondence, such as {@code public}. In other\n- * cases, some language-level modifiers do <em>not<\/em> have an access\n- * flag, such as {@code sealed} (JVMS {@jvms 4.7.31}) and some access\n- * flags have no corresponding modifier, such as {@linkplain SYNTHETIC\n- * synthetic}\n+ * <P>JVM access and module-related flags are related to, but distinct\n+ * from Java language {@linkplain Modifier modifiers}. Some modifiers\n+ * and access flags have a one-to-one correspondence, such as {@code\n+ * public}. In other cases, some language-level modifiers do\n+ * <em>not<\/em> have an access flag, such as {@code sealed} (JVMS\n+ * {@jvms 4.7.31}) and some access flags have no corresponding\n+ * modifier, such as {@linkplain SYNTHETIC synthetic}\n@@ -45,2 +45,3 @@\n- * <p>The values for the constants representing the access flags are\n- * taken from the tables in sections {@jvms 4.1} (class access and\n+ * <p>The values for the constants representing the access and module\n+ * flags are taken from sections of <cite>The Java Virtual Machine\n+ * Specification<\/cite> including {@jvms 4.1} (class access and\n@@ -48,3 +49,3 @@\n- * {@jvms 4.6} (method access and property flags), and {@jvms 4.7.6}\n- * (nested class access and property flags) of <cite>The Java Virtual\n- * Machine Specification<\/cite>.\n+ * {@jvms 4.6} (method access and property flags), {@jvms 4.7.6}\n+ * (nested class access and property flags), {@jvms 4.7.24} (method\n+ * parameters), and {@jvms 4.7.25} (module flags and requires flags).\n@@ -69,0 +70,2 @@\n+ * @see java.lang.module.ModuleDescriptor.Modifier\n+ * @see java.lang.module.ModuleDescriptor.Requires.Modifier\n@@ -109,0 +112,12 @@\n+    \/**\n+     * The module flag {@code ACC_OPEN}.\n+     * @see java.lang.module.ModuleDescriptor#isOpen\n+     *\/\n+    OPEN(0x0000_0020, false, Set.of(ElementType.MODULE)),\n+\n+    \/**\n+     * The module requires flag {@code ACC_TRANSITIVE}.\n+     * @see java.lang.module.ModuleDescriptor.Requires.Modifier#TRANSITIVE\n+     *\/\n+    TRANSITIVE(0x0000_0020, false, Set.of()),\n+\n@@ -115,0 +130,6 @@\n+    \/**\n+     * The module requires flag {@code ACC_STATIC_PHASE}.\n+     * @see java.lang.module.ModuleDescriptor.Requires.Modifier#STATIC\n+     *\/\n+    STATIC_PHASE(0x0000_0040, false, Set.of()),\n+\n@@ -167,0 +188,1 @@\n+     * @see java.lang.module.ModuleDescriptor.Modifier#SYNTHETIC\n@@ -188,4 +210,4 @@\n-   \/**\n-    * The access flag {@code ACC_MODULE}.\n-    *\/\n-   MODULE(0x0000_8000, false, Set.of(TYPE))\n+    \/**\n+     * The access flag {@code ACC_MODULE}.\n+     *\/\n+    MODULE(0x0000_8000, false, Set.of(TYPE))\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":41,"deletions":19,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-                                           + \"has a greater mas than \"\n+                                           + \"has a greater mask than \"\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/BasicAccessFlagTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}