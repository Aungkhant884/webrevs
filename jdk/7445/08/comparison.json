{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -1308,0 +1309,1 @@\n+     * @see #accessFlags()\n@@ -1318,0 +1320,11 @@\n+    \/**\n+     * {@return an immutable set of the {@linkplain AccessFlag access\n+     * flags} for this class}\n+     * @see #getModifiers()\n+     * @jvms 4.1 The ClassFile Structure\n+     * @jvms 4.7.6 The InnerClasses Attribute\n+     * @since 19\n+     *\/\n+    public Set<AccessFlag> accessFlags() {\n+        return Set.of(); \/\/ stubbed out empty set\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -206,0 +207,11 @@\n+        \/**\n+         * {@return an immutable set of the module {@linkplain AccessFlag\n+         * requires flags}}\n+         * @see #modifiers()\n+         * @jvms 4.7.25 The Module Attribute\n+         * @since 19\n+         *\/\n+        public Set<AccessFlag> accessFlags() {\n+            return Set.of(); \/\/ stubbed out empty set\n+        }\n+\n@@ -420,0 +432,11 @@\n+        \/**\n+         * {@return an immutable set of the module {@linkplain AccessFlag\n+         * export flags} for this module descriptor}\n+         * @see #modifiers()\n+         * @jvms 4.7.25 The Module Attribute\n+         * @since 19\n+         *\/\n+        public Set<AccessFlag> accessFlags() {\n+            return Set.of(); \/\/ stubbed out empty set\n+        }\n+\n@@ -623,0 +646,11 @@\n+        \/**\n+         * {@return an immutable set of the module {@linkplain AccessFlag\n+         * opens flags}}\n+         * @see #modifiers()\n+         * @jvms 4.7.25 The Module Attribute\n+         * @since 19\n+         *\/\n+        public Set<AccessFlag> accessFlags() {\n+            return Set.of(); \/\/ stubbed out empty set\n+        }\n+\n@@ -1293,0 +1327,11 @@\n+    \/**\n+     * {@return an immutable set of the {@linkplain AccessFlag\n+     * module flags}}\n+     * @see #modifiers()\n+     * @jvms 4.7.25 The Module Attribute\n+     * @since 19\n+     *\/\n+    public Set<AccessFlag> accessFlags() {\n+        return Set.of(); \/\/ stubbed out empty set\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/ModuleDescriptor.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,397 @@\n+\/*\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.reflect;\n+\n+import java.lang.annotation.ElementType;\n+import java.util.Set;\n+import static java.lang.annotation.ElementType.*;\n+\n+\/**\n+ * Represents a JVM access or module-related flag on a runtime member,\n+ * such as a {@linkplain Class class}, {@linkplain Field field}, or\n+ * {@linkplain Executable method}.\n+ *\n+ * <P>JVM access and module-related flags are related to, but distinct\n+ * from Java language {@linkplain Modifier modifiers}. Some modifiers\n+ * and access flags have a one-to-one correspondence, such as {@code\n+ * public}. In other cases, some language-level modifiers do\n+ * <em>not<\/em> have an access flag, such as {@code sealed} (JVMS\n+ * {@jvms 4.7.31}) and some access flags have no corresponding\n+ * modifier, such as {@linkplain SYNTHETIC synthetic}\n+ *\n+ * <p>The values for the constants representing the access and module\n+ * flags are taken from sections of <cite>The Java Virtual Machine\n+ * Specification<\/cite> including {@jvms 4.1} (class access and\n+ * property modifiers), {@jvms 4.5} (field access and property flags),\n+ * {@jvms 4.6} (method access and property flags), {@jvms 4.7.6}\n+ * (nested class access and property flags), {@jvms 4.7.24} (method\n+ * parameters), and {@jvms 4.7.25} (module flags and requires flags).\n+ *\n+ * <p>The {@linkplain #mask() mask} values for the different access\n+ * flags are <em>not<\/em> distinct. Flags are defined for different\n+ * kinds of JVM structures and the same bit position has different\n+ * meanings in different contexts. For example, {@code 0x0000_0040}\n+ * indicates a {@link #VOLATILE volatile} field but a {@linkplain\n+ * #BRIDGE bridge method}; {@code 0x0000_0080} indicates a {@link\n+ * #TRANSIENT transient} field but a {@linkplain #VARARGS variable\n+ * arity (varargs)} method.\n+ *\n+ * <p>The access flag constants are ordered by non-decreasing mask\n+ * value; that is the mask value of a constant is greater than or\n+ * equal to the mask value of an immediate neighbor to its (syntactic)\n+ * left. If new constants are added, this property will be\n+ * maintained. That implies new constants will not necessarily be\n+ * added at the end of the existing list.\n+ *\n+ * @see java.lang.reflect.Modifier\n+ * @see java.lang.module.ModuleDescriptor.Modifier\n+ * @see java.lang.module.ModuleDescriptor.Requires.Modifier\n+ * @see java.compiler\/javax.lang.model.element.Modifier\n+ * @since 19\n+ *\/\n+@SuppressWarnings(\"doclint:reference\") \/\/ cross-module link\n+public enum AccessFlag {\n+    \/**\n+     * The access flag {@code ACC_PUBLIC}, corresponding to the source\n+     * modifier {@link Modifier#PUBLIC public}.\n+     *\/\n+    PUBLIC(Modifier.PUBLIC, true,\n+           Set.of(Location.CLASS, Location.FIELD, Location.METHOD,\n+                  Location.INNER_CLASS)),\n+\n+    \/**\n+     * The access flag {@code ACC_PRIVATE}, corresponding to the\n+     * source modifier {@link Modifier#PRIVATE private}.\n+     *\/\n+    PRIVATE(Modifier.PRIVATE, true,\n+            Set.of(Location.FIELD, Location.METHOD, Location.INNER_CLASS)),\n+\n+    \/**\n+     * The access flag {@code ACC_PROTECTED}, corresponding to the\n+     * source modifier {@link Modifier#PROTECTED protected}.\n+     *\/\n+    PROTECTED(Modifier.PROTECTED, true,\n+              Set.of(Location.FIELD, Location.METHOD, Location.INNER_CLASS)),\n+\n+    \/**\n+     * The access flag {@code ACC_STATIC}, corresponding to the source\n+     * modifier {@link Modifier#STATIC static}.\n+     *\/\n+    STATIC(Modifier.STATIC, true,\n+           Set.of(Location.FIELD, Location.METHOD, Location.INNER_CLASS)),\n+\n+    \/**\n+     * The access flag {@code ACC_FINAL}, corresponding to the source\n+     * modifier {@link Modifier#FINAL final}.\n+     *\/\n+    FINAL(Modifier.FINAL, true,\n+          Set.of(Location.CLASS, Location.FIELD, Location.METHOD,\n+                 Location.INNER_CLASS, Location.METHOD_PARAMETER)),\n+\n+    \/**\n+     * The access flag {@code ACC_SUPER}.\n+     *\/\n+    SUPER(0x0000_0020, false, Set.of(Location.CLASS)),\n+\n+    \/**\n+     * The module flag {@code ACC_OPEN}.\n+     * @see java.lang.module.ModuleDescriptor#isOpen\n+     *\/\n+    OPEN(0x0000_0020, false, Set.of(Location.MODULE)),\n+\n+    \/**\n+     * The module requires flag {@code ACC_TRANSITIVE}.\n+     * @see java.lang.module.ModuleDescriptor.Requires.Modifier#TRANSITIVE\n+     *\/\n+    TRANSITIVE(0x0000_0020, false, Set.of(Location.MODULE_REQUIRES)),\n+\n+    \/**\n+     * The access flag {@code ACC_SYNCHRONIZED}, corresponding to the\n+     * source modifier {@link Modifier#SYNCHRONIZED synchronized}.\n+     *\/\n+    SYNCHRONIZED(Modifier.SYNCHRONIZED, true, Set.of(Location.METHOD)),\n+\n+    \/**\n+     * The module requires flag {@code ACC_STATIC_PHASE}.\n+     * @see java.lang.module.ModuleDescriptor.Requires.Modifier#STATIC\n+     *\/\n+    STATIC_PHASE(0x0000_0040, false, Set.of(Location.MODULE_REQUIRES)),\n+\n+     \/**\n+      * The access flag {@code ACC_VOLATILE}, corresponding to the\n+      * source modifier {@link Modifier#VOLATILE volatile}.\n+      *\/\n+    VOLATILE(Modifier.VOLATILE, true, Set.of(Location.FIELD)),\n+\n+    \/**\n+     * The access flag {@code ACC_BRIDGE}\n+     * @see Method#isBridge()\n+     *\/\n+    BRIDGE(0x0000_0040, false, Set.of(Location.METHOD)),\n+\n+    \/**\n+     * The access flag {@code ACC_TRANSIENT}, corresponding to the\n+     * source modifier {@link Modifier#TRANSIENT transient}.\n+     *\/\n+    TRANSIENT(Modifier.TRANSIENT, true, Set.of(Location.FIELD)),\n+\n+    \/**\n+     * The access flag {@code ACC_VARARGS}.\n+     * @see Executable#isVarArgs()\n+     *\/\n+    VARARGS(0x0000_0080, false, Set.of(Location.METHOD)),\n+\n+    \/**\n+     * The access flag {@code ACC_NATIVE}, corresponding to the source\n+     * modifier {@link Modifier#NATIVE native}.\n+     *\/\n+    NATIVE(Modifier.NATIVE, true, Set.of(Location.METHOD)),\n+\n+    \/**\n+     * The access flag {@code ACC_INTERFACE}.\n+     * @see Class#isInterface()\n+     *\/\n+    INTERFACE(Modifier.INTERFACE, false,\n+              Set.of(Location.CLASS, Location.INNER_CLASS)),\n+\n+    \/**\n+     * The access flag {@code ACC_ABSTRACT}, corresponding to the\n+     * source modifier {@code link Modifier#ABSTRACT abstract}.\n+     *\/\n+    ABSTRACT(Modifier.ABSTRACT, true,\n+             Set.of(Location.CLASS, Location.METHOD, Location.INNER_CLASS)),\n+\n+    \/**\n+     * The access flag {@code ACC_STRICT}, corresponding to the source\n+     * modifier {@link Modifier#STRICT strictfp}.\n+     *\/\n+    STRICT(Modifier.STRICT, true, Set.of(Location.METHOD)),\n+\n+    \/**\n+     * The access flag {@code ACC_SYNTHETIC}.\n+     * @see Class#isSynthetic()\n+     * @see Executable#isSynthetic()\n+     * @see java.lang.module.ModuleDescriptor.Modifier#SYNTHETIC\n+     *\/\n+    SYNTHETIC(0x0000_1000, false,\n+              Set.of(Location.CLASS, Location.FIELD, Location.METHOD,\n+                     Location.INNER_CLASS, Location.METHOD_PARAMETER,\n+                     Location.MODULE, Location.MODULE_REQUIRES,\n+                     Location.MODULE_EXPORTS, Location.MODULE_OPENS)),\n+\n+    \/**\n+     * The access flag {@code ACC_ANNOTATION}.\n+     * @see Class#isAnnotation()\n+     *\/\n+    ANNOTATION(0x0000_2000, false,\n+               Set.of(Location.CLASS, Location.INNER_CLASS)),\n+\n+    \/**\n+     * The access flag {@code ACC_ENUM}.\n+     * @see Class#isEnum()\n+     *\/\n+    ENUM(0x0000_4000, false,\n+         Set.of(Location.CLASS, Location.FIELD, Location.INNER_CLASS)),\n+\n+    \/**\n+     * The access flag {@code ACC_MANDATED}.\n+     *\/\n+    MANDATED(0x0000_8000, false,\n+             Set.of(Location.METHOD_PARAMETER,\n+                    Location.MODULE, Location.MODULE_REQUIRES,\n+                    Location.MODULE_EXPORTS, Location.MODULE_OPENS)),\n+\n+    \/**\n+     * The access flag {@code ACC_MODULE}.\n+     *\/\n+    MODULE(0x0000_8000, false, Set.of(Location.CLASS))\n+    ;\n+\n+    \/\/ May want to override toString for a different enum constant ->\n+    \/\/ name mapping.\n+\n+    private int mask;\n+    private boolean sourceModifier;\n+\n+    \/\/ For now, reuse ElementType rather than defining a separate\n+    \/\/ type.\n+    \/\/ Intentionally using Set rather than EnumSet since EnumSet is\n+    \/\/ mutable.\n+    private Set<Location> locations;\n+\n+    private AccessFlag(Set<Location> locations) {\n+        this.mask = 0x0;\n+        this.sourceModifier = false;\n+        this.locations = locations;\n+    }\n+\n+    private AccessFlag(int mask, boolean sourceModifier, Set<Location> locations) {\n+        this.mask = mask;\n+        this.sourceModifier = sourceModifier;\n+        this.locations = locations;\n+    }\n+\n+    \/**\n+     * {@return the corresponding integer mask for the access flag}\n+     *\/\n+    public int mask() {\n+        return mask;\n+    }\n+\n+    \/**\n+     * {@return whether or not the flag has a directly corresponding\n+     * modifier in the Java programming language}\n+     *\/\n+    public boolean sourceModifier() {\n+        return sourceModifier;\n+    }\n+\n+    \/**\n+     * {@return kinds of constructs the flag can be applied to}\n+     *\/\n+    public Set<Location> locations() {\n+        return locations;\n+    }\n+\n+    \/**\n+     * A location within a class file where flags can be applied.\n+     * <em>Just stub-out constant descriptions for now<\/em>.\n+     *\/\n+    public enum Location {\n+        \/**\n+         * Class location.\n+         * @jvms 4.1 The ClassFile Structure\n+         *\/\n+        CLASS,\n+\n+        \/**\n+         * Field location.\n+         * @jvms 4.5 Fields\n+         *\/\n+        FIELD,\n+\n+        \/**\n+         * Method location.\n+         * @jvms 4.6 Method\n+         *\/\n+        METHOD,\n+\n+        \/**\n+         * Inner class location.\n+         * @jvms 4.7.6 The InnerClasses Attribute\n+         *\/\n+        INNER_CLASS,\n+\n+        \/**\n+         * Method parameter loccation.\n+         * @jvms 4.7.24. The MethodParameters Attribute\n+         *\/\n+        METHOD_PARAMETER,\n+\n+        \/**\n+         * Module location\n+         * @jvms 4.7.25. The Module Attribute\n+         *\/\n+        MODULE,\n+\n+        \/**\n+         * Module requires location\n+         * @jvms 4.7.25. The Module Attribute\n+         *\/\n+        MODULE_REQUIRES,\n+\n+        \/**\n+         * Module exports location\n+         * @jvms 4.7.25. The Module Attribute\n+         *\/\n+        MODULE_EXPORTS,\n+\n+        \/**\n+         * Module opens location\n+         * @jvms 4.7.25. The Module Attribute\n+         *\/\n+        MODULE_OPENS;\n+    }\n+\n+    \/\/ -------------------------------------------------------------\n+\n+    \/\/ Future utilities and static factories of this enum class will\n+    \/\/ be written using the information below, copied from Modifier\n+    \/\/ for bootstrapping.\n+\n+    \/\/ \/**\n+    \/\/ * The Java source modifiers that can be applied to a class.\n+    \/\/ * @jls 8.1.1 Class Modifiers\n+    \/\/ *\/\n+    \/\/ private static final int CLASS_MODIFIERS =\n+    \/\/ Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE |\n+    \/\/ Modifier.ABSTRACT | Modifier.STATIC | Modifier.FINAL |\n+    \/\/ Modifier.STRICT;\n+\n+    \/\/ \/**\n+    \/\/ * The Java source modifiers that can be applied to an interface.\n+    \/\/ * @jls 9.1.1 Interface Modifiers\n+    \/\/ *\/\n+    \/\/ private static final int INTERFACE_MODIFIERS =\n+    \/\/ Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE |\n+    \/\/ Modifier.ABSTRACT | Modifier.STATIC | Modifier.STRICT;\n+\n+\n+    \/\/ \/**\n+    \/\/ * The Java source modifiers that can be applied to a constructor.\n+    \/\/ * @jls 8.8.3 Constructor Modifiers\n+    \/\/ *\/\n+    \/\/ private static final int CONSTRUCTOR_MODIFIERS =\n+    \/\/ Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE;\n+\n+    \/\/ \/**\n+    \/\/ * The Java source modifiers that can be applied to a method.\n+    \/\/ * @jls 8.4.3 Method Modifiers\n+    \/\/ *\/\n+    \/\/ private static final int METHOD_MODIFIERS =\n+    \/\/ Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE |\n+    \/\/ Modifier.ABSTRACT | Modifier.STATIC | Modifier.FINAL |\n+    \/\/ Modifier.SYNCHRONIZED | Modifier.NATIVE | Modifier.STRICT;\n+\n+    \/\/ \/**\n+    \/\/ * The Java source modifiers that can be applied to a field.\n+    \/\/ * @jls 8.3.1 Field Modifiers\n+    \/\/ *\/\n+    \/\/ private static final int FIELD_MODIFIERS =\n+    \/\/ Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE |\n+    \/\/ Modifier.STATIC | Modifier.FINAL | Modifier.TRANSIENT |\n+    \/\/ Modifier.VOLATILE;\n+\n+    \/\/ \/**\n+    \/\/ * The Java source modifiers that can be applied to a method or constructor parameter.\n+    \/\/ * @jls 8.4.1 Formal Parameters\n+    \/\/ *\/\n+    \/\/ private static final int PARAMETER_MODIFIERS =\n+    \/\/ Modifier.FINAL;\n+\n+    \/\/ static final int ACCESS_MODIFIERS =\n+    \/\/ Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE;\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":397,"deletions":0,"binary":false,"changes":397,"status":"added"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Set;\n@@ -207,0 +208,1 @@\n+     * @see #accessFlags\n@@ -210,0 +212,14 @@\n+    \/**\n+     * {@return an immutable set of the {@linkplain AccessFlag access\n+     * flags} for the executable represented by this object}\n+     * @implSpec\n+     * TBD\n+     * @see #getModifiers()\n+     * @jvms 4.6 Methods\n+     * @since 19\n+     *\/\n+    @Override\n+    public Set<AccessFlag> accessFlags() {\n+        return Set.of(); \/\/ stubbed out empty set\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.util.Set;\n@@ -205,0 +206,1 @@\n+     * @see #accessFlags()\n@@ -212,0 +214,12 @@\n+    \/**\n+     * {@return an immutable set of the {@linkplain AccessFlag access\n+     * flags} for this field}\n+     * @see #getModifiers()\n+     * @jvms 4.5 Fields\n+     * @since 19\n+     *\/\n+    @Override\n+    public Set<AccessFlag> accessFlags() {\n+        return Set.of(); \/\/ stubbed out empty set\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Field.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.util.Set;\n+\n@@ -79,0 +81,1 @@\n+     * @see #accessFlags()\n@@ -82,0 +85,14 @@\n+\n+    \/**\n+     * {@return an immutable set of the {@linkplain AccessFlag access\n+     * flags} for this member}\n+     *\n+     * @implSpec\n+     * The default implementation returns an empty set.\n+     * @see #getModifiers()\n+     * @since 19\n+     *\/\n+    public default Set<AccessFlag> accessFlags() {\n+        return Set.of();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Member.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -257,0 +257,1 @@\n+     * @see AccessFlag#PUBLIC\n@@ -263,0 +264,1 @@\n+     * @see AccessFlag#PRIVATE\n@@ -269,0 +271,1 @@\n+     * @see AccessFlag#PROTECTED\n@@ -275,0 +278,1 @@\n+     * @see AccessFlag#STATIC\n@@ -281,0 +285,1 @@\n+     * @see AccessFlag#FINAL\n@@ -287,0 +292,1 @@\n+     * @see AccessFlag#SYNCHRONIZED\n@@ -293,0 +299,1 @@\n+     * @see AccessFlag#VOLATILE\n@@ -299,0 +306,1 @@\n+     * @see AccessFlag#TRANSIENT\n@@ -305,0 +313,1 @@\n+     * @see AccessFlag#NATIVE\n@@ -311,0 +320,1 @@\n+     * @see AccessFlag#INTERFACE\n@@ -317,0 +327,1 @@\n+     * @see AccessFlag#ABSTRACT\n@@ -323,0 +334,1 @@\n+     * @see AccessFlag#STRICT\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Modifier.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Set;\n@@ -164,0 +165,12 @@\n+    \/**\n+     * {@return an immutable set of the {@linkplain AccessFlag access\n+     * flags} for the parameter represented by this object}\n+     *\n+     * @see #getModifiers()\n+     * @jvms 4.7.24 The MethodParameters Attribute\n+     * @since 19\n+     *\/\n+    public Set<AccessFlag> accessFlags() {\n+        return Set.of(); \/\/ stubbed out empty set\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Parameter.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8266670\n+ * @summary Basic tests of AccessFlag\n+ *\/\n+\n+import java.lang.reflect.AccessFlag;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+\n+public class BasicAccessFlagTest {\n+    public static void main(String... args) throws Exception {\n+        testSourceModifiers();\n+        testMaskOrdering();\n+    }\n+\n+    private static void testSourceModifiers() throws Exception {\n+        Class<?> modifierClass = Modifier.class;\n+\n+        for(AccessFlag accessFlag : AccessFlag.values()) {\n+            if (accessFlag.sourceModifier()) {\n+                \/\/ Check for consistency\n+                Field f = modifierClass.getField(accessFlag.name());\n+                if (accessFlag.mask() != f.getInt(null) ) {\n+                    throw new RuntimeException(\"Unexpected mask for \" +\n+                                               accessFlag);\n+                }\n+            }\n+        }\n+    }\n+\n+    \/\/ The mask values of the enum constants must be non-decreasing;\n+    \/\/ in other words stay the same (for colliding mask values) or go\n+    \/\/ up.\n+    private static void testMaskOrdering() {\n+        AccessFlag[] values = AccessFlag.values();\n+        for (int i = 1; i < values.length; i++) {\n+            AccessFlag left  = values[i-1];\n+            AccessFlag right = values[i];\n+            if (left.mask() > right.mask()) {\n+                throw new RuntimeException(left\n+                                           + \"has a greater mask than \"\n+                                           + right);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/BasicAccessFlagTest.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}