{"files":[{"patch":"@@ -108,2 +108,1 @@\n-    PRIVATE(Modifier.PRIVATE, true,\n-            Set.of(Location.FIELD, Location.METHOD, Location.INNER_CLASS)),\n+    PRIVATE(Modifier.PRIVATE, true, Location.SET_FIELD_METHOD_INNER_CLASS),\n@@ -116,2 +115,1 @@\n-    PROTECTED(Modifier.PROTECTED, true,\n-              Set.of(Location.FIELD, Location.METHOD, Location.INNER_CLASS)),\n+    PROTECTED(Modifier.PROTECTED, true, Location.SET_FIELD_METHOD_INNER_CLASS),\n@@ -124,2 +122,1 @@\n-    STATIC(Modifier.STATIC, true,\n-           Set.of(Location.FIELD, Location.METHOD, Location.INNER_CLASS)),\n+    STATIC(Modifier.STATIC, true, Location.SET_FIELD_METHOD_INNER_CLASS),\n@@ -144,1 +141,1 @@\n-    SUPER(0x0000_0020, false, Set.of(Location.CLASS)),\n+    SUPER(0x0000_0020, false, Location.SET_CLASS),\n@@ -158,1 +155,1 @@\n-    TRANSITIVE(0x0000_0020, false, Set.of(Location.MODULE_REQUIRES)),\n+    TRANSITIVE(0x0000_0020, false, Location.SET_MODULE_REQUIRES),\n@@ -165,1 +162,1 @@\n-    SYNCHRONIZED(Modifier.SYNCHRONIZED, true, Set.of(Location.METHOD)),\n+    SYNCHRONIZED(Modifier.SYNCHRONIZED, true, Location.SET_METHOD),\n@@ -172,1 +169,1 @@\n-    STATIC_PHASE(0x0000_0040, false, Set.of(Location.MODULE_REQUIRES)),\n+    STATIC_PHASE(0x0000_0040, false, Location.SET_MODULE_REQUIRES),\n@@ -179,1 +176,1 @@\n-    VOLATILE(Modifier.VOLATILE, true, Set.of(Location.FIELD)),\n+    VOLATILE(Modifier.VOLATILE, true, Location.SET_FIELD),\n@@ -186,1 +183,1 @@\n-    BRIDGE(Modifier.BRIDGE, false, Set.of(Location.METHOD)),\n+    BRIDGE(Modifier.BRIDGE, false, Location.SET_METHOD),\n@@ -193,1 +190,1 @@\n-    TRANSIENT(Modifier.TRANSIENT, true, Set.of(Location.FIELD)),\n+    TRANSIENT(Modifier.TRANSIENT, true, Location.SET_FIELD),\n@@ -200,1 +197,1 @@\n-    VARARGS(Modifier.VARARGS, false, Set.of(Location.METHOD)),\n+    VARARGS(Modifier.VARARGS, false, Location.SET_METHOD),\n@@ -207,1 +204,1 @@\n-    NATIVE(Modifier.NATIVE, true, Set.of(Location.METHOD)),\n+    NATIVE(Modifier.NATIVE, true, Location.SET_METHOD),\n@@ -214,2 +211,1 @@\n-    INTERFACE(Modifier.INTERFACE, false,\n-              Set.of(Location.CLASS, Location.INNER_CLASS)),\n+    INTERFACE(Modifier.INTERFACE, false, Location.SET_CLASS_INNER_CLASS),\n@@ -235,1 +231,1 @@\n-    STRICT(Modifier.STRICT, true, Set.of(Location.METHOD)),\n+    STRICT(Modifier.STRICT, true, Location.SET_METHOD),\n@@ -255,2 +251,1 @@\n-    ANNOTATION(Modifier.ANNOTATION, false,\n-               Set.of(Location.CLASS, Location.INNER_CLASS)),\n+    ANNOTATION(Modifier.ANNOTATION, false, Location.SET_CLASS_INNER_CLASS),\n@@ -279,1 +274,1 @@\n-    MODULE(0x0000_8000, false, Set.of(Location.CLASS))\n+    MODULE(0x0000_8000, false, Location.SET_CLASS)\n@@ -285,2 +280,2 @@\n-    private int mask;\n-    private boolean sourceModifier;\n+    private final int mask;\n+    private final boolean sourceModifier;\n@@ -290,1 +285,1 @@\n-    private Set<Location> locations;\n+    private final Set<Location> locations;\n@@ -409,0 +404,10 @@\n+        \/\/ Repeated sets of locations used by AccessFlag constants\n+        private static final Set<Location> SET_FIELD_METHOD_INNER_CLASS =\n+            Set.of(FIELD, METHOD, INNER_CLASS);\n+        private static final Set<Location> SET_METHOD = Set.of(METHOD);\n+        private static final Set<Location> SET_FIELD = Set.of(FIELD);\n+        private static final Set<Location> SET_CLASS = Set.of(CLASS);\n+        private static final Set<Location> SET_CLASS_INNER_CLASS =\n+            Set.of(CLASS, INNER_CLASS);\n+        private static final Set<Location> SET_MODULE_REQUIRES =\n+            Set.of(MODULE_REQUIRES);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessFlag.java","additions":29,"deletions":24,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -47,0 +47,4 @@\n+    \/*\n+     * Verify sourceModifier() == true access flags have a\n+     * corresponding constant in java.lang.reflect.Modifier.\n+     *\/\n@@ -97,1 +101,1 @@\n-        \/\/ Then test for disjointness\n+        \/\/ ...then test for disjointness\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/BasicAccessFlagTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary Test expected AccessFlag's on fields.\n+ * @summary Test expected AccessFlag's on classes.\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/ClassAccessFlagTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}