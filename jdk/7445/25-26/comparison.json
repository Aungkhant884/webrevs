{"files":[{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8266670\n+ * @summary Test expected AccessFlag's on fields.\n+ *\/\n+\n+import java.lang.annotation.*;\n+import java.lang.reflect.*;\n+\n+\/*\n+ * Class access flags that can directly or indirectly declared in\n+ * source include:\n+ * public, private, protected, static, final, interface, abstract,\n+ * annotation, enum.\n+ *\n+ * Additionally, the access flags super and synthetic cannot be\n+ * explicitly applied.\n+ *\/\n+public class ClassAccessFlagTest {\n+    public static void main(String... args) {\n+        for (var clazz :\n+                 ClassAccessFlagTest.class.getDeclaredClasses()) {\n+            checkClass(clazz);\n+        }\n+        checkClass(TestInterface.class);\n+        checkClass(ExpectedClassFlags.class);\n+    }\n+\n+    private static void checkClass(Class<?> clazz) {\n+        ExpectedClassFlags expected =\n+            clazz.getAnnotation(ExpectedClassFlags.class);\n+        if (expected != null) {\n+            String actual = clazz.accessFlags().toString();\n+            if (!expected.value().equals(actual)) {\n+                throw new RuntimeException(\"On \" + clazz +\n+                                           \" expected \" + expected.value() + \n+                                           \" got \" + actual);\n+            }\n+        }\n+    }\n+\n+    \/\/ Classes\n+    @ExpectedClassFlags(\"[PUBLIC, STATIC, FINAL, ENUM]\")\n+    public enum MetaSynVar {\n+        QUUX;\n+    }\n+\n+    \/\/ Is there is at least one special enum constant, the enum class\n+    \/\/ itself is implicitly abstract rather than final.\n+    @ExpectedClassFlags(\"[PROTECTED, STATIC, ABSTRACT, ENUM]\")\n+    protected enum MetaSynVar2 {\n+        WOMBAT{\n+            @Override\n+            public int foo() {return 42;}\n+        };\n+        public abstract int foo();\n+    }\n+\n+    @ExpectedClassFlags(\"[PRIVATE, ABSTRACT]\")\n+    private abstract class Foo {}\n+\n+    @ExpectedClassFlags(\"[STATIC, INTERFACE, ABSTRACT]\")\n+    interface StaticTestInterface {}\n+}\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+@ExpectedClassFlags(\"[INTERFACE, ABSTRACT, ANNOTATION]\")\n+@interface ExpectedClassFlags {\n+    String value();\n+}\n+\n+@ExpectedClassFlags(\"[INTERFACE, ABSTRACT]\")\n+interface TestInterface {}\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/ClassAccessFlagTest.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8266670\n+ * @summary Test expected AccessFlag's on fields.\n+ *\/\n+\n+import java.lang.annotation.*;\n+import java.lang.reflect.*;\n+\n+\/*\n+ * Field modifiers include:\n+ * public, private, protected, static, final, volatile, transient, \n+ *\n+ * Additionall, the access flags enum and synthetic cannot be\n+ * explicitly applied.\n+ *\/\n+public class FieldAccessFlagTest {\n+    public static void main(String... args) {\n+        for (var field :\n+                 FieldAccessFlagTest.class.getDeclaredFields()) {\n+            checkField(field);\n+        }\n+\n+        for (var field :\n+                 MetaSynVar.class.getDeclaredFields()) {\n+            checkField(field);\n+        }\n+    }\n+\n+    private static void checkField(Field field) {\n+        ExpectedFieldFlags expected =\n+            field.getAnnotation(ExpectedFieldFlags.class);\n+        if (expected != null) {\n+            String actual = field.accessFlags().toString();\n+            if (!expected.value().equals(actual)) {\n+                throw new RuntimeException(\"On \" + field +\n+                                           \" expected \" + expected.value() + \n+                                           \" got \" + actual);\n+            }\n+        }\n+    }\n+\n+    \/\/ Fields\n+    @ExpectedFieldFlags(\"[PUBLIC, STATIC, FINAL]\")\n+    public static final String f1 = \"foo\";\n+\n+    @ExpectedFieldFlags(\"[PRIVATE, VOLATILE, TRANSIENT]\")\n+    private volatile transient String secret = \"xxyzzy\";\n+\n+    @ExpectedFieldFlags(\"[PROTECTED]\")\n+    protected String meadow = \"\";\n+\n+    \/\/ Enum constant should have the enum access flag set\n+    static enum MetaSynVar {\n+        @ExpectedFieldFlags(\"[PUBLIC, STATIC, FINAL, ENUM]\")\n+        FOO,\n+\n+        @ExpectedFieldFlags(\"[PUBLIC, STATIC, FINAL, ENUM]\")\n+        BAR;\n+\n+        @ExpectedFieldFlags(\"[PRIVATE]\") \/\/ no \"ENUM\"\n+        private int field = 0;\n+    }\n+\n+    @Retention(RetentionPolicy.RUNTIME)\n+    private @interface ExpectedFieldFlags {\n+        String value();\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/FieldAccessFlagTest.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8266670\n+ * @summary Test expected AccessFlag's on methods\n+ *\/\n+\n+import java.lang.annotation.*;\n+import java.lang.reflect.*;\n+\n+\/*\n+ * Method modifiers include:\n+ * public, private, protected, static, final, synchronized,\n+ * bridge, varargs, native, abstract, strictfp, synthetic,\n+ *\n+ * At a source level, constructors can be modifiers as public,\n+ * protected, or private.\n+ *\n+ * The modifiers bridge and synthetic cannot be applied directly and\n+ * strictfp can only be applied in older source versions.\n+ *\/\n+public abstract class MethodAccessFlagTest {\n+    @ExpectedMethodFlags(\"[PUBLIC, STATIC, VARARGS]\")\n+    public static void main(String... args) {\n+        for (var ctor :\n+                 MethodAccessFlagTest.class.getDeclaredConstructors()) {\n+            checkExecutable(ctor);\n+        }\n+\n+        for (var method :\n+                 MethodAccessFlagTest.class.getDeclaredMethods()) {\n+            checkExecutable(method);\n+        }\n+    }\n+\n+    private static void checkExecutable(Executable method) {\n+        ExpectedMethodFlags emf =\n+            method.getAnnotation(ExpectedMethodFlags.class);\n+        if (emf != null) {\n+            String actual = method.accessFlags().toString();\n+            if (!emf.value().equals(actual)) {\n+                throw new RuntimeException(\"On \" + method +\n+                                           \" expected \" + emf.value() + \n+                                           \" got \" + actual);\n+            }\n+        }\n+    }\n+\n+    \/\/ Constructors\n+    @ExpectedMethodFlags(\"[PUBLIC]\")\n+    public MethodAccessFlagTest() {}\n+\n+    @ExpectedMethodFlags(\"[PROTECTED]\")\n+    protected MethodAccessFlagTest(int i) {super();}\n+\n+    @ExpectedMethodFlags(\"[PRIVATE]\")\n+    private MethodAccessFlagTest(String s) {super();}\n+\n+    \/\/ Methods\n+    @ExpectedMethodFlags(\"[PROTECTED, SYNCHRONIZED]\")\n+    protected synchronized void m0() {}\n+\n+    @ExpectedMethodFlags(\"[PRIVATE]\")\n+    private void m1() {}\n+\n+    @ExpectedMethodFlags(\"[ABSTRACT]\")\n+    abstract void m2();\n+\n+    @ExpectedMethodFlags(\"[PUBLIC, FINAL]\")\n+    public final void m3() {}\n+\n+    @ExpectedMethodFlags(\"[NATIVE]\")\n+    native void m4();\n+\n+    @Retention(RetentionPolicy.RUNTIME)\n+    private @interface ExpectedMethodFlags {\n+        String value();\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/MethodAccessFlagTest.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8266670\n+ * @summary Test expected value of STRICT AccessFlag\n+ * @compile -source 16 -target 16 StrictAccessFlagTest.java\n+ * @run main StrictAccessFlagTest\n+ *\/\n+\n+\/\/ Note: cannot use --release 16 because the accessFlags() method is\n+\/\/ not found in release 16; therefore -source and -target are used\n+\/\/ instead.\n+\n+import java.lang.annotation.*;\n+import java.lang.reflect.*;\n+\n+\/*\n+ * Test expected value of ACC_STRICT access flag.\n+ *\/\n+\/\/ Declaring the class strictfp implicitly sets ACC_STRICT on all its\n+\/\/ methods and constructors.\n+public strictfp class StrictAccessFlagTest {\n+    @ExpectedFlags(\"[PUBLIC, STATIC, VARARGS, STRICT]\")\n+    public static void main(String... args) {\n+        for (var ctor :\n+                 StrictAccessFlagTest.class.getDeclaredConstructors()) {\n+            checkExecutable(ctor);\n+        }\n+\n+        for (var method :\n+                 StrictAccessFlagTest.class.getDeclaredMethods()) {\n+            checkExecutable(method);\n+        }\n+    }\n+\n+    private static void checkExecutable(Executable method) {\n+        ExpectedFlags expected =\n+            method.getAnnotation(ExpectedFlags.class);\n+        if (expected != null) {\n+            String actual = method.accessFlags().toString();\n+            if (!expected.value().equals(actual)) {\n+                throw new RuntimeException(\"On \" + method +\n+                                           \" expected \" + expected.value() + \n+                                           \" got \" + actual);\n+            }\n+        }\n+    }\n+\n+    \/\/ Constructor\n+    @ExpectedFlags(\"[PUBLIC, STRICT]\")\n+    public StrictAccessFlagTest() {}\n+\n+    @Retention(RetentionPolicy.RUNTIME)\n+    private @interface ExpectedFlags {\n+        String value();\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/StrictAccessFlagTest.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}