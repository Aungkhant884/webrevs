{"files":[{"patch":"@@ -1329,1 +1329,9 @@\n-        return Set.of(); \/\/ stubbed out empty set\n+        \/\/ This likely needs some refinement. Exploration of hidden\n+        \/\/ classes, array classes.  Location.CLASS allows SUPER and\n+        \/\/ AccessFlag.MODULE with INNER_CLASS forbids. INNER_CLASS\n+        \/\/ allows PRIVATE, PROTECTED, and STATIC, which are not\n+        \/\/ allowed on Location.CLASS.\n+        return AccessFlag.maskToAccessFlags(getModifiers(),\n+                                            (isMemberClass() || isLocalClass() || isAnonymousClass()) ?\n+                                            AccessFlag.Location.INNER_CLASS :\n+                                            AccessFlag.Location.CLASS);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-            TRANSITIVE,\n+            TRANSITIVE(AccessFlag.TRANSITIVE.mask()),\n@@ -162,1 +162,1 @@\n-            STATIC,\n+            STATIC(AccessFlag.STATIC.mask()),\n@@ -168,1 +168,1 @@\n-            SYNTHETIC,\n+            SYNTHETIC(AccessFlag.SYNTHETIC.mask()),\n@@ -174,2 +174,6 @@\n-            MANDATED;\n-\n+            MANDATED(AccessFlag.MANDATED.mask());\n+            private int mask;\n+            private Modifier(int mask) {\n+                this.mask = mask;\n+            }\n+            private int mask() {return mask;}\n@@ -177,1 +181,0 @@\n-\n@@ -215,1 +218,5 @@\n-            return Set.of(); \/\/ stubbed out empty set\n+            int mask = 0;\n+            for (var modifier : mods) {\n+                mask |= modifier.mask();\n+            }\n+            return AccessFlag.maskToAccessFlags(mask, AccessFlag.Location.MODULE);\n@@ -391,1 +398,1 @@\n-            SYNTHETIC,\n+            SYNTHETIC(AccessFlag.SYNTHETIC.mask()),\n@@ -397,1 +404,1 @@\n-            MANDATED;\n+            MANDATED(AccessFlag.MANDATED.mask());\n@@ -399,0 +406,5 @@\n+            private int mask;\n+            private Modifier(int mask) {\n+                this.mask = mask;\n+            }\n+            private int mask() {return mask;}\n@@ -440,1 +452,5 @@\n-            return Set.of(); \/\/ stubbed out empty set\n+            int mask = 0;\n+            for (var modifier : mods) {\n+                mask |= modifier.mask();\n+            }\n+            return AccessFlag.maskToAccessFlags(mask, AccessFlag.Location.MODULE_EXPORTS);\n@@ -605,1 +621,1 @@\n-            SYNTHETIC,\n+            SYNTHETIC(AccessFlag.SYNTHETIC.mask()),\n@@ -611,2 +627,6 @@\n-            MANDATED;\n-\n+            MANDATED(AccessFlag.MANDATED.mask());\n+            private int mask;\n+            private Modifier(int mask) {\n+                this.mask = mask;\n+            }\n+            private int mask() {return mask;}\n@@ -654,1 +674,5 @@\n-            return Set.of(); \/\/ stubbed out empty set\n+            int mask = 0;\n+            for (var modifier : mods) {\n+                mask |= modifier.mask();\n+            }\n+            return AccessFlag.maskToAccessFlags(mask, AccessFlag.Location.MODULE_OPENS);\n@@ -1335,1 +1359,1 @@\n-        return Set.of(); \/\/ stubbed out empty set\n+        return Set.of();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/ModuleDescriptor.java","additions":39,"deletions":15,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -223,1 +223,1 @@\n-        return Set.of(); \/\/ stubbed out empty set\n+        return AccessFlag.maskToAccessFlags(getModifiers(), AccessFlag.Location.METHOD);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -223,1 +223,1 @@\n-        return Set.of(); \/\/ stubbed out empty set\n+        return AccessFlag.maskToAccessFlags(getModifiers(), AccessFlag.Location.FIELD);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Field.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -174,1 +174,2 @@\n-        return Set.of(); \/\/ stubbed out empty set\n+        return AccessFlag.maskToAccessFlags(getModifiers(),\n+                                            AccessFlag.Location.METHOD_PARAMETER);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Parameter.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}