{"files":[{"patch":"@@ -60,1 +60,1 @@\n-         _segmented_array.num_available_slots() * _segmented_array.slot_size();\n+         _segmented_array.num_total_slots() * _segmented_array.slot_size();\n@@ -64,1 +64,1 @@\n-  uint num_unused_slots = _segmented_array.num_available_slots() -\n+  uint num_unused_slots = _segmented_array.num_total_slots() -\n@@ -76,1 +76,1 @@\n-  uint num_available_slots = _segmented_array.num_available_slots();\n+  uint num_total_slots = _segmented_array.num_total_slots();\n@@ -82,1 +82,1 @@\n-  os->print(\"MA \" PTR_FORMAT \": %u slots pending (allocated %u available %u) used %.3f highest %u segments %u size %zu \",\n+  os->print(\"MA \" PTR_FORMAT \": %u slots pending (allocated %u total %u) used %.3f highest %u segments %u size %zu \",\n@@ -86,2 +86,2 @@\n-            num_available_slots,\n-            percent_of(num_allocated_slots - num_pending_slots, num_available_slots),\n+            num_total_slots,\n+            percent_of(num_allocated_slots - num_pending_slots, num_total_slots),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-    Atomic::add(&_num_available_slots, next->num_slots(), memory_order_relaxed);\n+    Atomic::add(&_num_total_slots, next->num_slots(), memory_order_relaxed);\n@@ -140,1 +140,1 @@\n-  _num_available_slots(0),\n+  _num_total_slots(0),\n@@ -185,1 +185,1 @@\n-  _num_available_slots = 0;\n+  _num_total_slots = 0;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArray.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n-  volatile uint _num_available_slots; \/\/ Number of slots available in all segments (allocated + not yet used).\n+  volatile uint _num_total_slots; \/\/ Number of slots available in all segments (allocated + not yet used).\n@@ -229,1 +229,1 @@\n-  uint num_available_slots() const { return Atomic::load(&_num_available_slots); }\n+  uint num_total_slots() const { return Atomic::load(&_num_total_slots); }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArray.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}