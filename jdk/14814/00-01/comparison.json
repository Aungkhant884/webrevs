{"files":[{"patch":"@@ -44,4 +44,4 @@\n- * The general idea of Loop Predication is to hoist a check inside a loop body by inserting a Hoisted Predicate with an\n- * uncommon trap on the entry path to the loop. The old check inside the loop can be eliminated. If the condition of the\n- * Hoisted Predicate fails at runtime, we'll execute the uncommon trap to avoid entering the loop which misses the check.\n- * Loop Predication can currently remove array range checks and loop invariant checks (such as null checks).\n+ * The general idea of Loop Predication is to hoist a check inside a loop body by inserting a Hoisted Check Predicate with\n+ * an uncommon trap on the entry path to the loop. The old check inside the loop can be eliminated. If the condition of\n+ * the Hoisted Check Predicate fails at runtime, we'll execute the uncommon trap to avoid entering the loop which misses\n+ * the check. Loop Predication can currently remove array range checks and loop invariant checks (such as null checks).\n@@ -687,3 +687,3 @@\n-    \/\/ If we create a Hoisted Range Check Predicate for this wrong pattern, it could succeed at runtime (i.e. true\n-    \/\/ for the value of \"scale*iv + offset\" in the first loop iteration and true for the value of \"scale*iv + offset\"\n-    \/\/ in the last loop iteration) while the check to be hoisted could fail in other loop iterations.\n+    \/\/ If we create a Range Check Predicate for this wrong pattern, it could succeed at runtime (i.e. true for the\n+    \/\/ value of \"scale*iv + offset\" in the first loop iteration and true for the value of \"scale*iv + offset\" in the\n+    \/\/ last loop iteration) while the check to be hoisted could fail in other loop iterations.\n@@ -697,1 +697,1 @@\n-    \/\/ Hoisted Range Check Predicate is always true:\n+    \/\/ Range Check Predicate is always true:\n@@ -1304,3 +1304,3 @@\n-\/\/ Each newly created Hoisted Predicate is accompanied by two Template Assertion Predicates. Later, we initialize them\n-\/\/ by making a copy of them when splitting a loop into sub loops. The Assertion Predicates ensure that dead sub loops\n-\/\/ are removed properly.\n+\/\/ Each newly created Hoisted Check Predicate is accompanied by two Template Assertion Predicates. Later, we initialize\n+\/\/ them by making a copy of them when splitting a loop into sub loops. The Assertion Predicates ensure that dead sub\n+\/\/ loops are removed properly.\n@@ -1351,1 +1351,2 @@\n-\/\/ Insert Hoisted Predicates for null checks and range checks and additional Template Assertion Predicates for range checks.\n+\/\/ Insert Hoisted Check Predicates for null checks and range checks and additional Template Assertion Predicates for\n+\/\/ range checks.\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -42,12 +42,8 @@\n- * - Runtime Predicate: This term is used to refer to a Hoisted Predicate (either a Loop Predicate or a Profiled Loop\n- *                      Predicate) or a Loop Limit Check Predicate. These predicates will be checked at runtime while the\n- *                      Parse and Assertion Predicates are always removed before code generation (except for Initialized\n- *                      Assertion Predicates which are kept in debug builds while being removed in product builds).\n- *     - Hoisted Predicate: Either a Loop Predicate or a Profiled Loop Predicate that is created during Loop Predication\n- *                          to hoist a check out of a loop.\n- *         - Hoisted Invariant Check Predicate: A Hoisted Predicate to hoist a loop-invariant check out of a loop.\n- *         - Hoisted Range Check Predicate:     A Hoisted Predicate to hoist a range check of the form\n- *                                              \"a[i*scale + offset]\", where scale and offset are loop-invariant, out of\n- *                                              a counted loop. Each Hoisted Range Check Predicate is accompanied by\n- *                                              additional Assertion Predicates.\n- *         - Loop Predicate:     This Hoisted Predicate is created to hoist a loop-invariant check a range check of the\n+ * - Runtime Predicate: This term is used to refer to a Hoisted Check Predicate (either a Loop Predicate or a Profiled\n+ *                      Loop Predicate) or a Loop Limit Check Predicate. These predicates will be checked at runtime while\n+ *                      the Parse and Assertion Predicates are always removed before code generation (except for\n+ *                      Initialized Assertion Predicates which are kept in debug builds while being removed in product\n+ *                      builds).\n+ *     - Hoisted Check Predicate: Either a Loop Predicate or a Profiled Loop Predicate that is created during Loop\n+ *                                Predication to hoist a check out of a loop.\n+ *         - Loop Predicate:     This predicate is created to hoist a loop-invariant check or a range check of the\n@@ -56,1 +52,2 @@\n- *                               is created during Loop Predication and is inserted above the Loop Parse Predicate.\n+ *                               is created during Loop Predication and is inserted above the Loop Parse Predicate. Each\n+ *                               predicate for a range check is accompanied by additional Assertion Predicates (see below).\n@@ -71,2 +68,2 @@\n- *                        Hoisted Predicate or the main-loop entry guard) but is required in order to fold away a dead\n- *                        sub loop inside which some data could be proven to be dead (by the type system) and replaced\n+ *                        Hoisted Check Predicate or the main-loop entry guard) but is required in order to fold away a\n+ *                        dead sub loop in which some data could be proven to be dead (by the type system) and replaced\n@@ -91,2 +88,2 @@\n- *                                                           by an earlier check (a Hoisted Predicate or the main-loop\n- *                                                           entry guard).\n+ *                                                           by an earlier check (a Hoisted Check Predicate or the\n+ *                                                           main-loop entry guard).\n@@ -96,3 +93,3 @@\n- *                        - Loop Predication:        A range check inside a loop is replaced by a Hoisted Predicate before\n- *                                                   the loop. We add two additional Template Assertion Predicates from\n- *                                                   which we can later create Initialized Assertion Predicates. One\n+ *                        - Loop Predication:        A range check inside a loop is replaced by a Hoisted Check Predicate\n+ *                                                   before the loop. We add two additional Template Assertion Predicates\n+ *                                                   from which we can later create Initialized Assertion Predicates. One\n@@ -122,1 +119,1 @@\n- *                                                   their range is covered by a corresponding Hoisted Predicate.\n+ *                                                   their range is covered by a corresponding Hoisted Check Predicate.\n@@ -136,1 +133,1 @@\n- *                                                   checks which we were not possible to remove with Loop Predication\n+ *                                                   checks which were not possible to remove with Loop Predication\n@@ -138,1 +135,1 @@\n- *                                                   before the loop to create Hoisted Predicates with).\n+ *                                                   before the loop to create Hoisted Check Predicates with).\n@@ -142,4 +139,4 @@\n- * - Predicate Block: A block containing all Runtime Predicates, including the Assertion Predicates for Hoisted\n- *                    Range Check Predicates, and the associated Parse Predicate which all share the same uncommon trap.\n- *                    This block could be empty if there were no Runtime Predicates created and the Parse Predicate was\n- *                    already removed.\n+ * - Predicate Block: A block containing all Runtime Predicates, including the Assertion Predicates for Range Check\n+ *                    Predicates, and the associated Parse Predicate which all share the same uncommon trap. This block\n+ *                    could be empty if there were no Runtime Predicates created and the Parse Predicate was already\n+ *                    removed.\n@@ -159,5 +156,5 @@\n- *   [Loop Hoisted Predicate 1 + two Template Assertion Predicates]            \\\n- *   [Loop Hoisted Predicate 2 + two Template Assertion Predicates]            |\n- *   ...                                                                       | Loop Predicate Block\n- *   [Loop Hoisted Predicate n + two Template Assertion Predicates]            |\n- * Loop Parse Predicate                                                        \/\n+ *   [Loop Predicate 1 + two Template Assertion Predicates]            \\\n+ *   [Loop Predicate 2 + two Template Assertion Predicates]            |\n+ *   ...                                                               | Loop Predicate Block\n+ *   [Loop Predicate n + two Template Assertion Predicates]            |\n+ * Loop Parse Predicate                                                \/\n@@ -165,5 +162,5 @@\n- *   [Profiled Loop Hoisted Predicate 1 + two Template Assertion Predicates]   \\\n- *   [Profiled Loop Hoisted Predicate 2 + two Template Assertion Predicates]   | Profiled Loop\n- *   ...                                                                       | Predicate Block\n- *   [Profiled Loop Hoisted Predicate m + two Template Assertion Predicates]   |\n- * Profiled Loop Parse Predicate                                               \/\n+ *   [Profiled Loop Predicate 1 + two Template Assertion Predicates]   \\\n+ *   [Profiled Loop Predicate 2 + two Template Assertion Predicates]   | Profiled Loop\n+ *   ...                                                               | Predicate Block\n+ *   [Profiled Loop Predicate m + two Template Assertion Predicates]   |\n+ * Profiled Loop Parse Predicate                                       \/\n@@ -171,2 +168,2 @@\n- *   [Loop Limit Check Predicate] (at most one)                                \\ Loop Limit Check\n- * Loop Limit Check Parse Predicate                                            \/ Predicate Block\n+ *   [Loop Limit Check Predicate] (at most one)                        \\ Loop Limit Check\n+ * Loop Limit Check Parse Predicate                                    \/ Predicate Block\n@@ -211,1 +208,1 @@\n-  \/\/ Returns the control input node into the first assertion predicate If. If there are no assertion predicates, it.\n+  \/\/ Returns the control input node into the first assertion predicate If. If there are no assertion predicates, it\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":37,"deletions":40,"binary":false,"changes":77,"status":"modified"}]}