{"files":[{"patch":"@@ -274,1 +274,1 @@\n-                    \"WRITE: \" + protocolVersion + \" \" +\n+                    \"WRITE: \" + protocolVersion.name + \" \" +\n@@ -502,1 +502,1 @@\n-                        \"WRITE: \" + protocolVersion + \" \" +\n+                        \"WRITE: \" + protocolVersion.name + \" \" +\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DTLSOutputRecord.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -300,1 +300,1 @@\n-                             \" for \" + protocol);\n+                             \" for \" + protocol.name);\n@@ -306,1 +306,1 @@\n-                    \"No available cipher suite for \" + protocol);\n+                    \"No available cipher suite for \" + protocol.name);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/HandshakeContext.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -272,1 +272,1 @@\n-                        \"WRITE: \" + protocolVersion + \" \" +\n+                        \"WRITE: \" + protocolVersion.name + \" \" +\n@@ -512,1 +512,1 @@\n-                        \"WRITE: \" + protocolVersion + \" \" +\n+                        \"WRITE: \" + protocolVersion.name + \" \" +\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLEngineOutputRecord.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-                SSLLogger.fine(\"WRITE: \" + protocolVersion +\n+                SSLLogger.fine(\"WRITE: \" + protocolVersion.name +\n@@ -182,1 +182,1 @@\n-                            \"WRITE: \" + protocolVersion +\n+                            \"WRITE: \" + protocolVersion.name +\n@@ -257,1 +257,1 @@\n-                        \"WRITE: \" + protocolVersion +\n+                        \"WRITE: \" + protocolVersion.name +\n@@ -330,1 +330,1 @@\n-                            \"WRITE: \" + protocolVersion +\n+                            \"WRITE: \" + protocolVersion.name +\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketOutputRecord.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-            output.shouldContain(\"WRITE: TLS10 application_data, length = 8\");\n+            output.shouldContain(\"WRITE: TLSv1 application_data, length = 8\");\n","filename":"test\/jdk\/sun\/security\/ssl\/EngineArgs\/DebugReportsOneExtraByte.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,300 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8211227\n+ * @library ..\/..\/\n+ * @library \/test\/lib\n+ * @summary Tests for consistency in logging format of TLS Versions\n+ * @run main\/othervm LoggingFormatConsistency\n+ *\/\n+\n+\/*\n+ * This test runs in another process so we can monitor the debug\n+ * results. The OutputAnalyzer must see correct debug output to return a\n+ * success.\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.security.SecurityUtils;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLServerSocket;\n+import javax.net.ssl.SSLServerSocketFactory;\n+import javax.net.ssl.SSLSocket;\n+import java.io.PrintStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.URL;\n+\n+public class LoggingFormatConsistency {\n+    \/*\n+     * Should we run the client or server in a separate thread?\n+     * Both sides can throw exceptions, but do you have a preference\n+     * as to which side should be the main thread.\n+     *\/\n+    static boolean separateServerThread = true;\n+\n+    static char[] passphrase = \"passphrase\".toCharArray();\n+\n+    \/*\n+     * Is the server ready to serve?\n+     *\/\n+    volatile static boolean serverReady = false;\n+\n+    \/*\n+     * Is the connection ready to close?\n+     *\/\n+    volatile static boolean closeReady = false;\n+\n+    \/*\n+     * Turn on SSL debugging?\n+     *\/\n+\n+    \/\/ use any free port by default\n+    volatile int serverPort = 0;\n+\n+    volatile Exception serverException = null;\n+    volatile Exception clientException = null;\n+\n+    Thread clientThread = null;\n+    Thread serverThread = null;\n+\n+    private static final String pathToStores = \"..\/..\/..\/..\/javax\/net\/ssl\/etc\";\n+    private static final String keyStoreFile = \"keystore\";\n+    private static final String trustStoreFile = \"truststore\";\n+    private static final String password = \"passphrase\";\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length != 0) {\n+            \/\/ A non-empty set of arguments occurs when the \"runTest\" argument\n+            \/\/ is passed to the test via ProcessTools::executeTestJvm.\n+            \/\/\n+            \/\/ This is done because an OutputAnalyzer is unable to read\n+            \/\/ the output of the current running JVM, and must therefore create\n+            \/\/ a test JVM. When this case occurs, it will inherit all specified\n+            \/\/ JVM properties (keyStore, trustStore, tls protocols, etc.)\n+            new LoggingFormatConsistency();\n+        } else {\n+            \/\/ We are in the main JVM that the test is being ran in.\n+            var keyStoreFileName = System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores + \"\/\" + keyStoreFile;\n+            var trustStoreFileName = System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores + \"\/\" + trustStoreFile;\n+\n+            \/\/ Setting up JVM system properties\n+            var keyStoreArg = \"-Djavax.net.ssl.keyStore=\" + keyStoreFileName;\n+            var keyStorePassword = \"-Djavax.net.ssl.keyStorePassword=\" + password;\n+            var trustStoreArg = \"-Djavax.net.ssl.trustStore=\" + trustStoreFileName;\n+            var trustStorePassword = \"-Djavax.net.ssl.trustStorePassword=\" + password;\n+            var testSrc = \"-Dtest.src=\" + System.getProperty(\"test.src\");\n+            var javaxNetDebug = \"-Djavax.net.debug=all\";\n+\n+            var correctTlsVersionsFormat = new String[]{\"TLSv1\", \"TLSv1.1\", \"TLSv1.2\", \"TLSv1.3\"};\n+            var incorrectTLSVersionsFormat = new String[]{\"TLS10\", \"TLS11\", \"TLS12\", \"TLS13\"};\n+\n+            for (int i = 0; i < correctTlsVersionsFormat.length; i++) {\n+                String expectedTLSVersion = correctTlsVersionsFormat[i];\n+                String incorrectTLSVersion = incorrectTLSVersionsFormat[i];\n+\n+                System.out.println(\"TESTING \" + expectedTLSVersion);\n+                String activeTLSProtocol = \"-Djdk.tls.client.protocols=\" + expectedTLSVersion;\n+                var output = ProcessTools.executeTestJvm(\n+                        testSrc,\n+                        keyStoreArg,\n+                        keyStorePassword,\n+                        trustStoreArg,\n+                        trustStorePassword,\n+                        activeTLSProtocol,\n+                        javaxNetDebug,\n+                        \"LoggingFormatConsistency\",\n+                        \"runTest\"); \/\/ Ensuring args.length is greater than 0\n+\n+                output.shouldContain(expectedTLSVersion);\n+                output.shouldNotContain(incorrectTLSVersion);\n+            }\n+        }\n+    }\n+\n+    \/*\n+     * Primary constructor, used to drive remainder of the test.\n+     *\n+     * Fork off the other side, then do your work.\n+     *\/\n+    LoggingFormatConsistency() throws Exception {\n+        \/\/ Test depends on these being enabled\n+        SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1\", \"TLSv1.1\");\n+        if (separateServerThread) {\n+            startServer(true);\n+            startClient(false);\n+        } else {\n+            startClient(true);\n+            startServer(false);\n+        }\n+\n+        \/*\n+         * Wait for other side to close down.\n+         *\/\n+        if (separateServerThread) {\n+            serverThread.join();\n+        } else {\n+            clientThread.join();\n+        }\n+\n+        \/*\n+         * When we get here, the test is pretty much over.\n+         *\n+         * If the main thread excepted, that propagates back\n+         * immediately.  If the other thread threw an exception, we\n+         * should report back.\n+         *\/\n+        if (serverException != null) {\n+            throw serverException;\n+        }\n+        if (clientException != null) {\n+            throw clientException;\n+        }\n+    }\n+\n+    \/*\n+     * Define the server side of the test.\n+     *\n+     * If the server prematurely exits, serverReady will be set to true\n+     * to avoid infinite hangs.\n+     *\/\n+    void doServerSide() throws Exception {\n+\n+        SSLServerSocketFactory sslServerSocketFactory = SSLContext.getDefault().getServerSocketFactory();\n+\n+        InetAddress localHost = InetAddress.getByName(\"localhost\");\n+        InetSocketAddress address = new InetSocketAddress(localHost, serverPort);\n+\n+        SSLServerSocket sslServerSocket = (SSLServerSocket) sslServerSocketFactory.createServerSocket();\n+        sslServerSocket.bind(address);\n+        serverPort = sslServerSocket.getLocalPort();\n+\n+        \/*\n+         * Signal Client, we're ready for its connect.\n+         *\/\n+        serverReady = true;\n+\n+        SSLSocket sslSocket = (SSLSocket) sslServerSocket.accept();\n+        sslSocket.setNeedClientAuth(true);\n+\n+        PrintStream out =\n+                new PrintStream(sslSocket.getOutputStream());\n+\n+        try {\n+            \/\/ ignore request data\n+\n+            \/\/ send the response\n+            out.print(\"HTTP\/1.1 200 OK\\r\\n\");\n+            out.print(\"Content-Type: text\/html; charset=iso-8859-1\\r\\n\");\n+            out.print(\"Content-Length: \"+ 9 +\"\\r\\n\");\n+            out.print(\"\\r\\n\");\n+            out.print(\"Testing\\r\\n\");\n+            out.flush();\n+        } finally {\n+            \/\/ close the socket\n+            while (!closeReady) {\n+                Thread.sleep(50);\n+            }\n+\n+            System.out.println(\"Server closing socket\");\n+            sslSocket.close();\n+            serverReady = false;\n+        }\n+    }\n+\n+    \/*\n+     * Define the client side of the test.\n+     *\n+     * If the server prematurely exits, serverReady will be set to true\n+     * to avoid infinite hangs.\n+     *\/\n+    void doClientSide() throws Exception {\n+        while (!serverReady) {\n+            Thread.sleep(50);\n+        }\n+\n+        HttpsURLConnection http = null;\n+\n+        \/* establish http connection to server *\/\n+        URL url = new URL(\"https:\/\/localhost:\" + serverPort+\"\/\");\n+        System.out.println(\"url is \"+url.toString());\n+\n+        try {\n+            http = (HttpsURLConnection)url.openConnection(Proxy.NO_PROXY);\n+\n+            int responseCode = http.getResponseCode();\n+            System.out.println(\"respCode = \" + responseCode);\n+        } finally {\n+            if (http != null) {\n+                http.disconnect();\n+            }\n+            closeReady = true;\n+        }\n+    }\n+\n+    void startServer(boolean newThread) throws Exception {\n+        if (newThread) {\n+            serverThread = new Thread(() -> {\n+                try {\n+                    doServerSide();\n+                } catch (Exception e) {\n+                    \/*\n+                     * Our server thread just died.\n+                     *\n+                     * Release the client, if not active already...\n+                     *\/\n+                    System.err.println(\"Server died...\");\n+                    serverReady = true;\n+                    serverException = e;\n+                }\n+            });\n+            serverThread.start();\n+        } else {\n+            doServerSide();\n+        }\n+    }\n+\n+    void startClient(boolean newThread) throws Exception {\n+        if (newThread) {\n+            clientThread = new Thread(() -> {\n+                try {\n+                    doClientSide();\n+                } catch (Exception e) {\n+                    \/*\n+                     * Our client thread just died.\n+                     *\/\n+                    System.err.println(\"Client died...\");\n+                    clientException = e;\n+                }\n+            });\n+            clientThread.start();\n+        } else {\n+            doClientSide();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLLogger\/LoggingFormatConsistency.java","additions":300,"deletions":0,"binary":false,"changes":300,"status":"added"}]}