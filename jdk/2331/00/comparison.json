{"files":[{"patch":"@@ -274,1 +274,1 @@\n-                    \"WRITE: \" + protocolVersion + \" \" +\n+                    \"WRITE: \" + protocolVersion.name + \" \" +\n@@ -502,1 +502,1 @@\n-                        \"WRITE: \" + protocolVersion + \" \" +\n+                        \"WRITE: \" + protocolVersion.name + \" \" +\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DTLSOutputRecord.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -300,1 +300,1 @@\n-                             \" for \" + protocol);\n+                             \" for \" + protocol.name);\n@@ -306,1 +306,1 @@\n-                    \"No available cipher suite for \" + protocol);\n+                    \"No available cipher suite for \" + protocol.name);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/HandshakeContext.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -272,1 +272,1 @@\n-                        \"WRITE: \" + protocolVersion + \" \" +\n+                        \"WRITE: \" + protocolVersion.name + \" \" +\n@@ -512,1 +512,1 @@\n-                        \"WRITE: \" + protocolVersion + \" \" +\n+                        \"WRITE: \" + protocolVersion.name + \" \" +\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLEngineOutputRecord.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-                SSLLogger.fine(\"WRITE: \" + protocolVersion +\n+                SSLLogger.fine(\"WRITE: \" + protocolVersion.name +\n@@ -182,1 +182,1 @@\n-                            \"WRITE: \" + protocolVersion +\n+                            \"WRITE: \" + protocolVersion.name +\n@@ -257,1 +257,1 @@\n-                        \"WRITE: \" + protocolVersion +\n+                        \"WRITE: \" + protocolVersion.name +\n@@ -330,1 +330,1 @@\n-                            \"WRITE: \" + protocolVersion +\n+                            \"WRITE: \" + protocolVersion.name +\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketOutputRecord.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-            output.shouldContain(\"WRITE: TLS10 application_data, length = 8\");\n+            output.shouldContain(\"WRITE: TLSv1 application_data, length = 8\");\n","filename":"test\/jdk\/sun\/security\/ssl\/EngineArgs\/DebugReportsOneExtraByte.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8211227\n+ * @library ..\/..\/\n+ * @library \/test\/lib\n+ * @summary Tests for consistency in logging format of TLS Versions\n+ *\n+ * @run main LoggingFormatConsistency\n+ *\/\n+\n+\/*\n+ * This test runs in another process so we can monitor the debug\n+ * results.  The OutputAnalyzer must see correct debug output to return a\n+ * success.\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.security.SecurityUtils;\n+\n+import javax.net.ssl.SSLHandshakeException;\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+\n+public class LoggingFormatConsistency {\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0){\n+\n+            var testSrc = \"-Dtest.src=\" + System.getProperty(\"test.src\");\n+            var javaxNetDebug = \"-Djavax.net.debug=all\";\n+            var correctTlsVersionsFormat = new String[]{\"TLSv1\", \"TLSv1.1\", \"TLSv1.2\", \"TLSv1.3\"};\n+            var incorrectTLSVersionsFormat = new String[]{\"TLS10\", \"TLS11\", \"TLS12\", \"TLS13\"};\n+\n+            for (int i = 0; i < correctTlsVersionsFormat.length; i++) {\n+                String expectedTLSVersion = correctTlsVersionsFormat[i];\n+                String incorrectTLSVersion = incorrectTLSVersionsFormat[i];\n+\n+                System.out.println(\"TESTING \" + expectedTLSVersion);\n+                String activeTLSProtocol = \"-Djdk.tls.client.protocols=\" + expectedTLSVersion;\n+                var output = ProcessTools.executeTestJvm(\n+                        testSrc,\n+                        activeTLSProtocol,\n+                        javaxNetDebug,\n+                        \"LoggingFormatConsistency\",\n+                        \"t\");\n+\n+                output.shouldContain(expectedTLSVersion);\n+                output.shouldNotContain(incorrectTLSVersion);\n+            }\n+        }\n+        else {\n+            var test = new LoggingFormatConsistency();\n+            test.simpleSSLConnectionTest();\n+        }\n+    }\n+\n+    private void simpleSSLConnectionTest() throws Exception {\n+        \/\/ Re-enabling as test depends on these algorithms\n+        SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1\", \"TLSv1.1\");\n+        var url = new URL(\"https:\/\/jpg-data.us.oracle.com\/\");\n+        try {\n+            var in = new BufferedReader(new InputStreamReader(url.openStream()));\n+        }\n+        catch(SSLHandshakeException sslEx) {\n+            System.out.println(sslEx.getMessage());\n+            System.out.println(sslEx.getCause());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLLogger\/LoggingFormatConsistency.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"}]}