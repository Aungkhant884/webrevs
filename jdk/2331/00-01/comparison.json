{"files":[{"patch":"@@ -30,2 +30,1 @@\n- *\n- * @run main LoggingFormatConsistency\n+ * @run main\/othervm LoggingFormatConsistency\n@@ -36,1 +35,1 @@\n- * results.  The OutputAnalyzer must see correct debug output to return a\n+ * results. The OutputAnalyzer must see correct debug output to return a\n@@ -43,3 +42,9 @@\n-import javax.net.ssl.SSLHandshakeException;\n-import java.io.BufferedReader;\n-import java.io.InputStreamReader;\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLServerSocket;\n+import javax.net.ssl.SSLServerSocketFactory;\n+import javax.net.ssl.SSLSocket;\n+import java.io.PrintStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n@@ -49,0 +54,37 @@\n+    \/*\n+     * Should we run the client or server in a separate thread?\n+     * Both sides can throw exceptions, but do you have a preference\n+     * as to which side should be the main thread.\n+     *\/\n+    static boolean separateServerThread = true;\n+\n+    static char[] passphrase = \"passphrase\".toCharArray();\n+\n+    \/*\n+     * Is the server ready to serve?\n+     *\/\n+    volatile static boolean serverReady = false;\n+\n+    \/*\n+     * Is the connection ready to close?\n+     *\/\n+    volatile static boolean closeReady = false;\n+\n+    \/*\n+     * Turn on SSL debugging?\n+     *\/\n+\n+    \/\/ use any free port by default\n+    volatile int serverPort = 0;\n+\n+    volatile Exception serverException = null;\n+    volatile Exception clientException = null;\n+\n+    Thread clientThread = null;\n+    Thread serverThread = null;\n+\n+    private static final String pathToStores = \"..\/..\/..\/..\/javax\/net\/ssl\/etc\";\n+    private static final String keyStoreFile = \"keystore\";\n+    private static final String trustStoreFile = \"truststore\";\n+    private static final String password = \"passphrase\";\n+\n@@ -50,1 +92,13 @@\n-        if (args.length == 0){\n+        if (args.length != 0) {\n+            \/\/ A non-empty set of arguments occurs when the \"runTest\" argument\n+            \/\/ is passed to the test via ProcessTools::executeTestJvm.\n+            \/\/\n+            \/\/ This is done because an OutputAnalyzer is unable to read\n+            \/\/ the output of the current running JVM, and must therefore create\n+            \/\/ a test JVM. When this case occurs, it will inherit all specified\n+            \/\/ JVM properties (keyStore, trustStore, tls protocols, etc.)\n+            new LoggingFormatConsistency();\n+        } else {\n+            \/\/ We are in the main JVM that the test is being ran in.\n+            var keyStoreFileName = System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores + \"\/\" + keyStoreFile;\n+            var trustStoreFileName = System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores + \"\/\" + trustStoreFile;\n@@ -52,0 +106,5 @@\n+            \/\/ Setting up JVM system properties\n+            var keyStoreArg = \"-Djavax.net.ssl.keyStore=\" + keyStoreFileName;\n+            var keyStorePassword = \"-Djavax.net.ssl.keyStorePassword=\" + password;\n+            var trustStoreArg = \"-Djavax.net.ssl.trustStore=\" + trustStoreFileName;\n+            var trustStorePassword = \"-Djavax.net.ssl.trustStorePassword=\" + password;\n@@ -54,0 +113,1 @@\n+\n@@ -65,0 +125,4 @@\n+                        keyStoreArg,\n+                        keyStorePassword,\n+                        trustStoreArg,\n+                        trustStorePassword,\n@@ -68,1 +132,1 @@\n-                        \"t\");\n+                        \"runTest\"); \/\/ Ensuring args.length is greater than 0\n@@ -74,4 +138,0 @@\n-        else {\n-            var test = new LoggingFormatConsistency();\n-            test.simpleSSLConnectionTest();\n-        }\n@@ -80,2 +140,7 @@\n-    private void simpleSSLConnectionTest() throws Exception {\n-        \/\/ Re-enabling as test depends on these algorithms\n+    \/*\n+     * Primary constructor, used to drive remainder of the test.\n+     *\n+     * Fork off the other side, then do your work.\n+     *\/\n+    LoggingFormatConsistency() throws Exception {\n+        \/\/ Test depends on these being enabled\n@@ -83,1 +148,99 @@\n-        var url = new URL(\"https:\/\/jpg-data.us.oracle.com\/\");\n+        if (separateServerThread) {\n+            startServer(true);\n+            startClient(false);\n+        } else {\n+            startClient(true);\n+            startServer(false);\n+        }\n+\n+        \/*\n+         * Wait for other side to close down.\n+         *\/\n+        if (separateServerThread) {\n+            serverThread.join();\n+        } else {\n+            clientThread.join();\n+        }\n+\n+        \/*\n+         * When we get here, the test is pretty much over.\n+         *\n+         * If the main thread excepted, that propagates back\n+         * immediately.  If the other thread threw an exception, we\n+         * should report back.\n+         *\/\n+        if (serverException != null) {\n+            throw serverException;\n+        }\n+        if (clientException != null) {\n+            throw clientException;\n+        }\n+    }\n+\n+    \/*\n+     * Define the server side of the test.\n+     *\n+     * If the server prematurely exits, serverReady will be set to true\n+     * to avoid infinite hangs.\n+     *\/\n+    void doServerSide() throws Exception {\n+\n+        SSLServerSocketFactory sslServerSocketFactory = SSLContext.getDefault().getServerSocketFactory();\n+\n+        InetAddress localHost = InetAddress.getByName(\"localhost\");\n+        InetSocketAddress address = new InetSocketAddress(localHost, serverPort);\n+\n+        SSLServerSocket sslServerSocket = (SSLServerSocket) sslServerSocketFactory.createServerSocket();\n+        sslServerSocket.bind(address);\n+        serverPort = sslServerSocket.getLocalPort();\n+\n+        \/*\n+         * Signal Client, we're ready for its connect.\n+         *\/\n+        serverReady = true;\n+\n+        SSLSocket sslSocket = (SSLSocket) sslServerSocket.accept();\n+        sslSocket.setNeedClientAuth(true);\n+\n+        PrintStream out =\n+                new PrintStream(sslSocket.getOutputStream());\n+\n+        try {\n+            \/\/ ignore request data\n+\n+            \/\/ send the response\n+            out.print(\"HTTP\/1.1 200 OK\\r\\n\");\n+            out.print(\"Content-Type: text\/html; charset=iso-8859-1\\r\\n\");\n+            out.print(\"Content-Length: \"+ 9 +\"\\r\\n\");\n+            out.print(\"\\r\\n\");\n+            out.print(\"Testing\\r\\n\");\n+            out.flush();\n+        } finally {\n+            \/\/ close the socket\n+            while (!closeReady) {\n+                Thread.sleep(50);\n+            }\n+\n+            System.out.println(\"Server closing socket\");\n+            sslSocket.close();\n+            serverReady = false;\n+        }\n+    }\n+\n+    \/*\n+     * Define the client side of the test.\n+     *\n+     * If the server prematurely exits, serverReady will be set to true\n+     * to avoid infinite hangs.\n+     *\/\n+    void doClientSide() throws Exception {\n+        while (!serverReady) {\n+            Thread.sleep(50);\n+        }\n+\n+        HttpsURLConnection http = null;\n+\n+        \/* establish http connection to server *\/\n+        URL url = new URL(\"https:\/\/localhost:\" + serverPort+\"\/\");\n+        System.out.println(\"url is \"+url.toString());\n+\n@@ -85,1 +248,9 @@\n-            var in = new BufferedReader(new InputStreamReader(url.openStream()));\n+            http = (HttpsURLConnection)url.openConnection(Proxy.NO_PROXY);\n+\n+            int responseCode = http.getResponseCode();\n+            System.out.println(\"respCode = \" + responseCode);\n+        } finally {\n+            if (http != null) {\n+                http.disconnect();\n+            }\n+            closeReady = true;\n@@ -87,3 +258,40 @@\n-        catch(SSLHandshakeException sslEx) {\n-            System.out.println(sslEx.getMessage());\n-            System.out.println(sslEx.getCause());\n+    }\n+\n+    void startServer(boolean newThread) throws Exception {\n+        if (newThread) {\n+            serverThread = new Thread(() -> {\n+                try {\n+                    doServerSide();\n+                } catch (Exception e) {\n+                    \/*\n+                     * Our server thread just died.\n+                     *\n+                     * Release the client, if not active already...\n+                     *\/\n+                    System.err.println(\"Server died...\");\n+                    serverReady = true;\n+                    serverException = e;\n+                }\n+            });\n+            serverThread.start();\n+        } else {\n+            doServerSide();\n+        }\n+    }\n+\n+    void startClient(boolean newThread) throws Exception {\n+        if (newThread) {\n+            clientThread = new Thread(() -> {\n+                try {\n+                    doClientSide();\n+                } catch (Exception e) {\n+                    \/*\n+                     * Our client thread just died.\n+                     *\/\n+                    System.err.println(\"Client died...\");\n+                    clientException = e;\n+                }\n+            });\n+            clientThread.start();\n+        } else {\n+            doClientSide();\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLLogger\/LoggingFormatConsistency.java","additions":227,"deletions":19,"binary":false,"changes":246,"status":"modified"}]}