{"files":[{"patch":"@@ -50,0 +50,1 @@\n+import javax.swing.SwingUtilities;\n@@ -213,1 +214,3 @@\n-        win.setVisible(true);\n+        if (windows != 0) {\n+            win.setVisible(true);\n+        }\n@@ -347,6 +350,13 @@\n-        WindowPanel.buildAndShowWindow(\n-            frame,\n-            new Label(\"Owner: none\"),\n-            new TestPanel(new TextArea(10, 30)),\n-            new WindowPanel()\n-        );\n+        SwingUtilities.invokeAndWait(() ->{\n+            WindowPanel.buildAndShowWindow(\n+                frame,\n+                new Label(\"Owner: none\"),\n+                new TestPanel(new TextArea(10, 30)),\n+                new WindowPanel()\n+            );\n+\n+            \/\/ adding only the root frame to be positioned\n+            \/\/ w.r.t instruction frame\n+            passFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n+            frame.setVisible(true);\n+        });\n@@ -354,3 +364,0 @@\n-        \/\/ adding only the root frame to be positioned\n-        \/\/ w.r.t instruction frame\n-        passFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n","filename":"test\/jdk\/java\/awt\/Dialog\/ModalDialogTest\/ModalDialogTest.java","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -84,0 +84,4 @@\n+        \/\/ does not have a test window,\n+        \/\/ hence only the instruction frame is positioned\n+        PassFailJFrame.positionTestWindow(null,\n+                PassFailJFrame.Position.HORIZONTAL);\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/TrayIconScalingTest.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+    private static Frame frame;\n@@ -103,1 +104,1 @@\n-        Frame frame = new Frame(\"Clipped Src Area Image Printing Test\");\n+        frame = new Frame(\"Clipped Src Area Image Printing Test\");\n@@ -126,1 +127,0 @@\n-        frame.setVisible(true);\n@@ -130,0 +130,1 @@\n+        frame.setVisible(true);\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/ImagePrinting\/ClippedImages.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.awt.Dialog;\n@@ -43,1 +42,0 @@\n-import java.awt.Label;\n@@ -54,0 +52,1 @@\n+    private static Frame f;\n@@ -131,1 +130,1 @@\n-        Frame f = new Frame(\"Test PrintGlyphVector\");\n+        f = new Frame(\"Test PrintGlyphVector\");\n@@ -152,1 +151,0 @@\n-        f.setVisible(true);\n@@ -159,0 +157,1 @@\n+        f.setVisible(true);\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintGlyphVectorTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -77,2 +77,0 @@\n-            frame.setLocationRelativeTo(null);\n-            frame.setVisible(true);\n@@ -86,0 +84,1 @@\n+            frame.setVisible(true);\n@@ -103,1 +102,1 @@\n-                \"Frame\", info, 10, 40, 5);\n+                \"Frame\", info, 10, 10, 45);\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintLatinCJKTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,0 +26,4 @@\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Insets;\n+import java.awt.Rectangle;\n@@ -44,0 +48,1 @@\n+\n@@ -63,1 +68,1 @@\n-    public enum Position {HORIZONTAL, VERTICAL}\n+    public enum Position {HORIZONTAL, VERTICAL, TOP_LEFT_CORNER}\n@@ -174,1 +179,0 @@\n-        frame.setVisible(true);\n@@ -260,4 +264,14 @@\n-     * Position the instruction frame with testWindow (testcase created\n-     * window) by the specified position.\n-     * Note: This method should be invoked from the method that creates\n-     * testWindow.\n+     * Approximately positions the instruction frame relative to the test\n+     * window as specified by the {@code position} parameter. If testWindow\n+     * is null, only the instruction frame is positioned according to\n+     * {@code position} parameter. This method should be called before making\n+     * the test window visible.\n+     *\n+     * @param testWindow test window that the test is created.\n+     *                   May be {@code null}.\n+     *\n+     * @param position  position must be one of:\n+     *                  HORIZONTAL - the test instruction frame is positioned\n+     *                  such that its right edge aligns with screen's horizontal\n+     *                  center and the test window (if not null) is placed to\n+     *                  the right of the instruction frame.\n@@ -265,5 +279,9 @@\n-     * @param testWindow test window that the test is created\n-     * @param position  position can be either HORIZONTAL (both test\n-     *                  instruction frame and test window as arranged\n-     *                  side by side) or VERTICAL (both test instruction\n-     *                  frame and test window as arranged up and down)\n+     *                  VERTICAL - the test instruction frame is positioned such\n+     *                  that its bottom edge aligns with the screen's vertical\n+     *                  center and the test window (if not null) is placed below\n+     *                  the instruction frame.\n+     *\n+     *                  TOP_LEFT_CORNER - the test instruction frame is positioned\n+     *                  such that its top left corner is at the top left corner of\n+     *                  the screen and the test window (if not null) is placed to\n+     *                  the right of the instruction frame.\n@@ -273,0 +291,7 @@\n+\n+        \/\/ to get the screen insets inorder to position the frame by taking into\n+        \/\/ account the location of taskbar\/menubars on screen\n+        GraphicsConfiguration gc = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                .getDefaultScreenDevice().getDefaultConfiguration();\n+        Insets screenInsets = Toolkit.getDefaultToolkit().getScreenInsets(gc);\n+\n@@ -275,3 +300,7 @@\n-            frame.setLocation(newX, frame.getY());\n-\n-            testWindow.setLocation((frame.getLocation().x + frame.getWidth() + 5), frame.getY());\n+            frame.setLocation((newX + screenInsets.left),\n+                    (frame.getY() + screenInsets.top));\n+            syncLocationToWindowManager();\n+            if (testWindow != null) {\n+                testWindow.setLocation((frame.getX() + frame.getWidth() + 5),\n+                        frame.getY());\n+            }\n@@ -280,1 +309,34 @@\n-            frame.setLocation(frame.getX(), newY);\n+            frame.setLocation((frame.getX() + screenInsets.left),\n+                    (newY + screenInsets.top));\n+            syncLocationToWindowManager();\n+            if (testWindow != null) {\n+                testWindow.setLocation(frame.getX(),\n+                        (frame.getY() + frame.getHeight() + 5));\n+            }\n+        } else if (position.equals(Position.TOP_LEFT_CORNER)) {\n+            frame.setLocation(screenInsets.left, screenInsets.top);\n+            syncLocationToWindowManager();\n+            if (testWindow != null) {\n+                testWindow.setLocation((frame.getX() + frame.getWidth() + 5),\n+                        frame.getY());\n+            }\n+        }\n+        \/\/ make instruction frame visible after updating\n+        \/\/ frame & window positions\n+        frame.setVisible(true);\n+    }\n+\n+    \/**\n+     * To ensure the frame location is updated by the window manager\n+     * if it adjusts the frame location after {@code setLocation}\n+     *\n+     * @see #positionTestWindow\n+     *\/\n+    private static void syncLocationToWindowManager() {\n+        Toolkit.getDefaultToolkit().sync();\n+        try {\n+            Thread.sleep(500);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+        }\n+    }\n@@ -282,2 +344,25 @@\n-            testWindow.setLocation(frame.getX(),\n-                    (frame.getLocation().y + frame.getHeight() + 5));\n+    \/**\n+     * Returns the current position and size of the test instruction frame.\n+     * This method can be used in scenarios when custom positioning of\n+     * multiple test windows w.r.t test instruction frame is necessary,\n+     * at test-case level and the desired configuration is not available\n+     * as a {@code Position} option.\n+     *\n+     * @return Rectangle bounds of test instruction frame\n+     * @see #positionTestWindow\n+     *\n+     * @throws InterruptedException      exception thrown when thread is\n+     *                                   interrupted\n+     * @throws InvocationTargetException if an exception is thrown while\n+     *                                   obtaining frame bounds on EDT\n+     *\/\n+    public static Rectangle getInstructionFrameBounds()\n+            throws InterruptedException, InvocationTargetException {\n+        final Rectangle[] bounds = {null};\n+\n+        if (isEventDispatchThread()) {\n+            bounds[0] = frame != null ? frame.getBounds() : null;\n+        } else {\n+            invokeAndWait(() -> {\n+                bounds[0] = frame != null ? frame.getBounds() : null;\n+            });\n@@ -285,0 +370,1 @@\n+        return bounds[0];\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":103,"deletions":17,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -23,9 +23,0 @@\n-\/* @test\n- * @bug 4380543\n- * @key headful\n- * @library \/java\/awt\/regtesthelpers\n- * @build PassFailJFrame\n- * @summary setMargin() does not work for AbstractButton\n- * @run main\/manual bug4380543\n-*\/\n-\n@@ -48,0 +39,8 @@\n+\/* @test\n+ * @bug 4380543\n+ * @key headful\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary setMargin() does not work for AbstractButton\n+ * @run main\/manual bug4380543\n+ *\/\n@@ -65,11 +64,10 @@\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            public void run() {\n-                try {\n-                    passFailJFrame = new PassFailJFrame(instructions);\n-                    testObj = new TestFrame();\n-                    \/\/Adding the Test Frame to handle dispose\n-                    PassFailJFrame.addTestWindow(testObj);\n-                    PassFailJFrame.positionTestWindow(testObj, PassFailJFrame.Position.HORIZONTAL);\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n-                }\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                passFailJFrame = new PassFailJFrame(instructions);\n+                testObj = new TestFrame();\n+                \/\/Adding the Test Frame to handle dispose\n+                PassFailJFrame.addTestWindow(testObj);\n+                PassFailJFrame.positionTestWindow(testObj, PassFailJFrame.Position.HORIZONTAL);\n+                testObj.setVisible(true);\n+            } catch (Exception e) {\n+                e.printStackTrace();\n@@ -114,1 +112,0 @@\n-\n@@ -116,1 +113,0 @@\n-        setVisible(true);\n","filename":"test\/jdk\/javax\/swing\/JRadioButton\/bug4380543.java","additions":18,"deletions":22,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -24,0 +24,7 @@\n+import java.lang.reflect.InvocationTargetException;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+\n@@ -33,8 +40,0 @@\n-import java.lang.reflect.InvocationTargetException;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JTabbedPane;\n-import javax.swing.SwingUtilities;\n-\n-\n@@ -50,6 +49,1 @@\n-    public static void createAndShowGUI() throws InterruptedException,\n-            InvocationTargetException {\n-        SwingUtilities.invokeAndWait(() -> {\n-            frame = new JFrame(\"JTabbedPane\");\n-\n-            JTabbedPane tp = new JTabbedPane();\n+    public static void createAndShowGUI() {\n@@ -57,6 +51,2 @@\n-            tp.addTab(\"<html><center><font size=+3>big<\/font><\/center><\/html>\",\n-                    new JLabel());\n-            tp.addTab(\"<html><center><font color=red>red<\/font><\/center><\/html>\",\n-                    new JLabel());\n-            tp.addTab(\"<html><center><em><b>Bold Italic!<\/b><\/em><\/center><\/html>\",\n-                    new JLabel());\n+        frame = new JFrame(\"JTabbedPane\");\n+        JTabbedPane tp = new JTabbedPane();\n@@ -64,4 +54,6 @@\n-            frame.getContentPane().add(tp);\n-            frame.setSize(400, 400);\n-            frame.setLocationRelativeTo(null);\n-            frame.setVisible(true);\n+        tp.addTab(\"<html><center><font size=+3>big<\/font><\/center><\/html>\",\n+                new JLabel());\n+        tp.addTab(\"<html><center><font color=red>red<\/font><\/center><\/html>\",\n+                new JLabel());\n+        tp.addTab(\"<html><center><em><b>Bold Italic!<\/b><\/em><\/center><\/html>\",\n+                new JLabel());\n@@ -69,0 +61,2 @@\n+        frame.getContentPane().add(tp);\n+        frame.setSize(400, 400);\n@@ -70,4 +64,4 @@\n-            PassFailJFrame.addTestWindow(frame);\n-            PassFailJFrame.positionTestWindow(frame,\n-                    PassFailJFrame.Position.HORIZONTAL);\n-        });\n+        PassFailJFrame.addTestWindow(frame);\n+        PassFailJFrame.positionTestWindow(frame,\n+                PassFailJFrame.Position.HORIZONTAL);\n+        frame.setVisible(true);\n@@ -80,1 +74,1 @@\n-        createAndShowGUI();\n+        SwingUtilities.invokeAndWait(bug4209065::createAndShowGUI);\n@@ -83,1 +77,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/4209065\/bug4209065.java","additions":24,"deletions":30,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -68,4 +68,2 @@\n-        });\n-\n-        \/\/ add the test frame to dispose\n-        PassFailJFrame.addTestWindow(f);\n+            \/\/ add the test frame to dispose\n+            PassFailJFrame.addTestWindow(f);\n@@ -73,4 +71,3 @@\n-        \/\/ Arrange the test instruction frame and test frame side by side\n-        PassFailJFrame.positionTestWindow(f, PassFailJFrame.Position.HORIZONTAL);\n-\n-        SwingUtilities.invokeAndWait(() -> {\n+            \/\/ Arrange the test instruction frame and test frame side by side\n+            PassFailJFrame.positionTestWindow(f, PassFailJFrame.Position.HORIZONTAL);\n+            f.setVisible(true);\n@@ -82,0 +79,3 @@\n+            if (!ret) {\n+                throw new RuntimeException(\"Printing cancelled\/failed\");\n+            }\n@@ -83,4 +83,0 @@\n-\n-        if (!ret) {\n-            throw new RuntimeException(\"Printing cancelled\/failed\");\n-        }\n@@ -110,1 +106,2 @@\n-        table.scrollRectToVisible(table.getCellRect(table.getRowCount() - 1, 0, false));\n+        table.scrollRectToVisible(table.getCellRect(table.getRowCount() - 1,\n+                0, false));\n@@ -115,1 +112,0 @@\n-        f.setVisible(true);\n","filename":"test\/jdk\/javax\/swing\/JTable\/PrintAllPagesTest.java","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -66,1 +66,0 @@\n-            frame.setVisible(true);\n@@ -68,1 +67,0 @@\n-            frame.setLocationRelativeTo(null);\n@@ -73,0 +71,1 @@\n+            frame.setVisible(true);\n@@ -84,1 +83,0 @@\n-\n","filename":"test\/jdk\/javax\/swing\/text\/html\/HtmlScriptTagParserTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}