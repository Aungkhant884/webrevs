{"files":[{"patch":"@@ -50,0 +50,1 @@\n+import javax.swing.SwingUtilities;\n@@ -213,1 +214,3 @@\n-        win.setVisible(true);\n+        if (windows != 0) {\n+            win.setVisible(true);\n+        }\n@@ -347,6 +350,13 @@\n-        WindowPanel.buildAndShowWindow(\n-            frame,\n-            new Label(\"Owner: none\"),\n-            new TestPanel(new TextArea(10, 30)),\n-            new WindowPanel()\n-        );\n+        SwingUtilities.invokeAndWait(() ->{\n+            WindowPanel.buildAndShowWindow(\n+                frame,\n+                new Label(\"Owner: none\"),\n+                new TestPanel(new TextArea(10, 30)),\n+                new WindowPanel()\n+            );\n+\n+            \/\/ adding only the root frame to be positioned\n+            \/\/ w.r.t instruction frame\n+            passFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n+            frame.setVisible(true);\n+        });\n@@ -354,3 +364,0 @@\n-        \/\/ adding only the root frame to be positioned\n-        \/\/ w.r.t instruction frame\n-        passFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n","filename":"test\/jdk\/java\/awt\/Dialog\/ModalDialogTest\/ModalDialogTest.java","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+    private static Frame frame;\n@@ -103,1 +104,1 @@\n-        Frame frame = new Frame(\"Clipped Src Area Image Printing Test\");\n+        frame = new Frame(\"Clipped Src Area Image Printing Test\");\n@@ -126,1 +127,0 @@\n-        frame.setVisible(true);\n@@ -130,0 +130,1 @@\n+        frame.setVisible(true);\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/ImagePrinting\/ClippedImages.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.awt.Dialog;\n@@ -43,1 +42,0 @@\n-import java.awt.Label;\n@@ -54,0 +52,1 @@\n+    private static Frame f;\n@@ -131,1 +130,1 @@\n-        Frame f = new Frame(\"Test PrintGlyphVector\");\n+        f = new Frame(\"Test PrintGlyphVector\");\n@@ -152,1 +151,0 @@\n-        f.setVisible(true);\n@@ -159,0 +157,1 @@\n+        f.setVisible(true);\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintGlyphVectorTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -77,2 +77,0 @@\n-            frame.setLocationRelativeTo(null);\n-            frame.setVisible(true);\n@@ -86,0 +84,1 @@\n+            frame.setVisible(true);\n@@ -103,1 +102,1 @@\n-                \"Frame\", info, 10, 40, 5);\n+                \"Frame\", info, 10, 10, 45);\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintLatinCJKTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,0 +26,4 @@\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Insets;\n+import java.awt.Rectangle;\n@@ -44,0 +48,1 @@\n+\n@@ -63,1 +68,1 @@\n-    public enum Position {HORIZONTAL, VERTICAL}\n+    public enum Position {HORIZONTAL, VERTICAL, TOP_LEFT_CORNER}\n@@ -174,1 +179,0 @@\n-        frame.setVisible(true);\n@@ -263,1 +267,2 @@\n-     * testWindow.\n+     * testWindow. At test-level, the testWindow must be made visible\n+     * after calling this method.\n@@ -266,4 +271,15 @@\n-     * @param position  position can be either HORIZONTAL (both test\n-     *                  instruction frame and test window as arranged\n-     *                  side by side) or VERTICAL (both test instruction\n-     *                  frame and test window as arranged up and down)\n+     * @param position  position can either be:\n+     *                  HORIZONTAL - the test instruction frame is positioned\n+     *                  such that its right edge aligns with screen's vertical\n+     *                  center and the test window is placed to the right of\n+     *                  the instruction frame.\n+     *\n+     *                  VERTICAL - the test instruction frame is positioned such\n+     *                  that its bottom edge aligns with the screen's horizontal\n+     *                  center and the test window is placed below the instruction\n+     *                  frame.\n+     *\n+     *                  TOP_LEFT_CORNER - the test instruction frame is positioned\n+     *                  such that its top left corner is at the top left corner of\n+     *                  the screen and the test window is placed to the right of\n+     *                  the instruction frame.\n@@ -273,0 +289,7 @@\n+\n+        \/\/ to get the screen insets inorder to position the frame by taking into\n+        \/\/ account the location of taskbar\/menubars on screen\n+        GraphicsConfiguration gc = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                .getDefaultScreenDevice().getDefaultConfiguration();\n+        Insets screenInsets = Toolkit.getDefaultToolkit().getScreenInsets(gc);\n+\n@@ -275,1 +298,13 @@\n-            frame.setLocation(newX, frame.getY());\n+            frame.setLocation((newX + screenInsets.left),\n+                    (frame.getY() + screenInsets.top));\n+            \/\/ added to push the updated frame location to window manager\n+            \/\/ before using it to reposition the test window.\n+            Toolkit.getDefaultToolkit().sync();\n+            try {\n+                Thread.sleep(500);\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+\n+            testWindow.setLocation((frame.getX() + frame.getWidth() + 5),\n+                    frame.getY());\n@@ -277,1 +312,0 @@\n-            testWindow.setLocation((frame.getLocation().x + frame.getWidth() + 5), frame.getY());\n@@ -280,1 +314,9 @@\n-            frame.setLocation(frame.getX(), newY);\n+            frame.setLocation((frame.getX() + screenInsets.left),\n+                    (newY + screenInsets.top));\n+\n+            Toolkit.getDefaultToolkit().sync();\n+            try {\n+                Thread.sleep(500);\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n@@ -283,1 +325,44 @@\n-                    (frame.getLocation().y + frame.getHeight() + 5));\n+                    (frame.getY() + frame.getHeight() + 5));\n+\n+        } else if (position.equals(Position.TOP_LEFT_CORNER)) {\n+            frame.setLocation(screenInsets.left, screenInsets.top);\n+\n+            Toolkit.getDefaultToolkit().sync();\n+            try {\n+                Thread.sleep(500);\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+\n+            testWindow.setLocation((frame.getX() + frame.getWidth() + 5),\n+                    frame.getY());\n+        }\n+        \/\/ make instruction frame visible after updating frame & window positions\n+        frame.setVisible(true);\n+    }\n+\n+    \/**\n+     * Returns the current position and size of the test instruction frame.\n+     * This method can be used in scenarios when custom positioning of\n+     * multiple test windows w.r.t test instruction frame is necessary,\n+     * at test-case level and the desired configuration is not available\n+     * as a {@code Position} option.\n+     *\n+     * @return Rectangle bounds of test instruction frame\n+     * @see #positionTestWindow\n+     *\n+     * @throws InterruptedException      exception thrown when thread is\n+     *                                   interrupted\n+     * @throws InvocationTargetException if an exception is thrown while\n+     *                                   obtaining frame bounds on EDT\n+     *\/\n+    public static Rectangle getInstructionFrameBounds()\n+            throws InterruptedException, InvocationTargetException {\n+        final Rectangle[] bounds = {null};\n+\n+        if (isEventDispatchThread()) {\n+            bounds[0] = frame != null ? frame.getBounds() : null;\n+        } else {\n+            invokeAndWait(() -> {\n+                bounds[0] = frame != null ? frame.getBounds() : null;\n+            });\n@@ -285,0 +370,1 @@\n+        return bounds[0];\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":97,"deletions":11,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -23,9 +23,0 @@\n-\/* @test\n- * @bug 4380543\n- * @key headful\n- * @library \/java\/awt\/regtesthelpers\n- * @build PassFailJFrame\n- * @summary setMargin() does not work for AbstractButton\n- * @run main\/manual bug4380543\n-*\/\n-\n@@ -48,0 +39,8 @@\n+\/* @test\n+ * @bug 4380543\n+ * @key headful\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary setMargin() does not work for AbstractButton\n+ * @run main\/manual bug4380543\n+ *\/\n@@ -65,11 +64,10 @@\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            public void run() {\n-                try {\n-                    passFailJFrame = new PassFailJFrame(instructions);\n-                    testObj = new TestFrame();\n-                    \/\/Adding the Test Frame to handle dispose\n-                    PassFailJFrame.addTestWindow(testObj);\n-                    PassFailJFrame.positionTestWindow(testObj, PassFailJFrame.Position.HORIZONTAL);\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n-                }\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                passFailJFrame = new PassFailJFrame(instructions);\n+                testObj = new TestFrame();\n+                \/\/Adding the Test Frame to handle dispose\n+                PassFailJFrame.addTestWindow(testObj);\n+                PassFailJFrame.positionTestWindow(testObj, PassFailJFrame.Position.HORIZONTAL);\n+                testObj.setVisible(true);\n+            } catch (Exception e) {\n+                e.printStackTrace();\n@@ -114,1 +112,0 @@\n-\n@@ -116,1 +113,0 @@\n-        setVisible(true);\n","filename":"test\/jdk\/javax\/swing\/JRadioButton\/bug4380543.java","additions":18,"deletions":22,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -24,0 +24,7 @@\n+import java.lang.reflect.InvocationTargetException;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+\n@@ -33,8 +40,0 @@\n-import java.lang.reflect.InvocationTargetException;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JTabbedPane;\n-import javax.swing.SwingUtilities;\n-\n-\n@@ -50,4 +49,1 @@\n-    public static void createAndShowGUI() throws InterruptedException,\n-            InvocationTargetException {\n-        SwingUtilities.invokeAndWait(() -> {\n-            frame = new JFrame(\"JTabbedPane\");\n+    public static void createAndShowGUI() {\n@@ -55,0 +51,1 @@\n+            frame = new JFrame(\"JTabbedPane\");\n@@ -66,3 +63,0 @@\n-            frame.setLocationRelativeTo(null);\n-            frame.setVisible(true);\n-\n@@ -73,1 +67,1 @@\n-        });\n+            frame.setVisible(true);\n@@ -80,1 +74,1 @@\n-        createAndShowGUI();\n+        SwingUtilities.invokeAndWait(bug4209065::createAndShowGUI);\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/4209065\/bug4209065.java","additions":11,"deletions":17,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -66,3 +66,1 @@\n-        SwingUtilities.invokeAndWait(() -> {\n-            printAllPagesTest();\n-        });\n+        SwingUtilities.invokeAndWait(PrintAllPagesTest::printAllPagesTest);\n@@ -75,0 +73,1 @@\n+        f.setVisible(true);\n@@ -115,1 +114,0 @@\n-        f.setVisible(true);\n","filename":"test\/jdk\/javax\/swing\/JTable\/PrintAllPagesTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -66,1 +66,0 @@\n-            frame.setVisible(true);\n@@ -68,1 +67,0 @@\n-            frame.setLocationRelativeTo(null);\n@@ -73,0 +71,1 @@\n+            frame.setVisible(true);\n@@ -84,1 +83,0 @@\n-\n","filename":"test\/jdk\/javax\/swing\/text\/html\/HtmlScriptTagParserTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}