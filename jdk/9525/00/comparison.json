{"files":[{"patch":"@@ -26,0 +26,1 @@\n+import java.awt.Rectangle;\n@@ -63,1 +64,1 @@\n-    public enum Position {HORIZONTAL, VERTICAL}\n+    public enum Position {HORIZONTAL, VERTICAL, LEFT_HALF}\n@@ -269,1 +270,4 @@\n-     *                  frame and test window as arranged up and down)\n+     *                  frame and test window as arranged up and down) or\n+     *                  LEFT_HALF (both test instruction frame and test\n+     *                  window as arranged up and down, to the left half\n+     *                  of the screen)\n@@ -273,0 +277,1 @@\n+\n@@ -277,1 +282,2 @@\n-            testWindow.setLocation((frame.getLocation().x + frame.getWidth() + 5), frame.getY());\n+            testWindow.setLocation((frame.getLocation().x + frame.getWidth() + 5),\n+                    frame.getY());\n@@ -285,0 +291,23 @@\n+        else if (position.equals(Position.LEFT_HALF)) {\n+            frame.setLocation(0,0);\n+            testWindow.setLocation(frame.getX(),\n+                    (frame.getLocation().y + frame.getHeight() + 5));\n+        }\n+    }\n+\n+    \/**\n+     * Returns the current position and size of the test instruction frame.\n+     * This method can be used in scenarios when custom positioning of\n+     * multiple test windows w.r.t test instruction frame is necessary,\n+     * at test-case level and the desired configuration is not available\n+     * as a {@code Position} option.\n+     *\n+     * @return Rectangle bounds of test instruction frame\n+     * @see #positionTestWindow\n+     *\/\n+    public static Rectangle getInstructionFrameBounds() {\n+        Rectangle bounds = null;\n+        if (frame != null) {\n+            bounds = frame.getBounds();\n+        }\n+        return bounds;\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":32,"deletions":3,"binary":false,"changes":35,"status":"modified"}]}