{"files":[{"patch":"@@ -78,0 +78,2 @@\n+    -Dkeystore.pkcs12.certProtectionAlgorithm=NONE \\\n+    -Dkeystore.pkcs12.macAlgorithm=NONE \\\n","filename":"make\/ToolsJdk.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.io.DataOutputStream;\n@@ -30,1 +29,0 @@\n-import java.io.IOException;\n@@ -33,1 +31,0 @@\n-import java.io.UnsupportedEncodingException;\n@@ -36,4 +33,1 @@\n-import java.security.DigestOutputStream;\n-import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.cert.CertificateException;\n+import java.security.KeyStore;\n@@ -42,1 +36,1 @@\n-import java.util.Arrays;\n+import java.util.Collections;\n@@ -54,1 +48,1 @@\n-            store(args[0], fos, \"changeit\".toCharArray());\n+            store(args[0], fos);\n@@ -58,1 +52,1 @@\n-    \/\/ The following code are copied from JavaKeyStore.java.\n+    public static void store(String dir, OutputStream stream) throws Exception {\n@@ -60,2 +54,1 @@\n-    private static final int MAGIC = 0xfeedfeed;\n-    private static final int VERSION_2 = 0x02;\n+        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n@@ -63,18 +56,2 @@\n-    \/\/ This method is a simplified version of JavaKeyStore::engineStore.\n-    \/\/ A new \"dir\" argument is added. All cert names in \"dir\" is collected into\n-    \/\/ a sorted array. Each cert is stored with a creation date set to its\n-    \/\/ notBefore value. Thus the output is determined as long as the certs\n-    \/\/ are the same.\n-    public static void store(String dir, OutputStream stream, char[] password)\n-            throws IOException, NoSuchAlgorithmException, CertificateException\n-    {\n-        byte[] encoded; \/\/ the certificate encoding\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X509\");\n-\n-        MessageDigest md = getPreKeyedHash(password);\n-        DataOutputStream dos\n-                = new DataOutputStream(new DigestOutputStream(stream, md));\n-\n-        dos.writeInt(MAGIC);\n-        \/\/ always write the latest version\n-        dos.writeInt(VERSION_2);\n+        KeyStore ks = KeyStore.getInstance(\"pkcs12\");\n+        ks.load(null, null);\n@@ -91,2 +68,0 @@\n-        dos.writeInt(entries.size());\n-\n@@ -94,1 +69,0 @@\n-\n@@ -100,14 +74,1 @@\n-\n-            dos.writeInt(2);\n-\n-            \/\/ Write the alias\n-            dos.writeUTF(alias);\n-\n-            \/\/ Write the (entry creation) date, which is notBefore of the cert\n-            dos.writeLong(cert.getNotBefore().getTime());\n-\n-            \/\/ Write the trusted certificate\n-            encoded = cert.getEncoded();\n-            dos.writeUTF(cert.getType());\n-            dos.writeInt(encoded.length);\n-            dos.write(encoded);\n+            ks.setCertificateEntry(alias, cert);\n@@ -116,31 +77,1 @@\n-        \/*\n-         * Write the keyed hash which is used to detect tampering with\n-         * the keystore (such as deleting or modifying key or\n-         * certificate entries).\n-         *\/\n-        byte[] digest = md.digest();\n-\n-        dos.write(digest);\n-        dos.flush();\n-    }\n-\n-    private static MessageDigest getPreKeyedHash(char[] password)\n-            throws NoSuchAlgorithmException, UnsupportedEncodingException\n-    {\n-\n-        MessageDigest md = MessageDigest.getInstance(\"SHA\");\n-        byte[] passwdBytes = convertToBytes(password);\n-        md.update(passwdBytes);\n-        Arrays.fill(passwdBytes, (byte) 0x00);\n-        md.update(\"Mighty Aphrodite\".getBytes(\"UTF8\"));\n-        return md;\n-    }\n-\n-    private static byte[] convertToBytes(char[] password) {\n-        int i, j;\n-        byte[] passwdBytes = new byte[password.length * 2];\n-        for (i=0, j=0; i<password.length; i++) {\n-            passwdBytes[j++] = (byte)(password[i] >> 8);\n-            passwdBytes[j++] = (byte)password[i];\n-        }\n-        return passwdBytes;\n+        ks.store(stream, null);\n","filename":"make\/jdk\/src\/classes\/build\/tools\/generatecacerts\/GenerateCacerts.java","additions":10,"deletions":79,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-            = \"CC:AD:BB:49:70:97:3F:42:AD:73:91:A0:A2:C4:B8:AA:D1:95:59:F3:B3:22:09:2A:1F:2C:AB:04:47:08:EF:AA\";\n+            = \"0D:9C:40:8F:CE:B1:C7:27:89:54:FD:80:DA:B6:91:F4:C9:94:15:C4:8D:25:62:34:D4:70:32:60:1A:6F:13:27\";\n","filename":"test\/jdk\/sun\/security\/lib\/cacerts\/VerifyCACerts.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}