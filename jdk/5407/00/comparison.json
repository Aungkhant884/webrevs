{"files":[{"patch":"@@ -407,1 +407,21 @@\n-  bool success = parse_log_arguments(output, what, decorators, output_options, &ss);\n+  bool success = true;\n+\n+  \/\/ If output is stdout\/err, their options (e.g. foldmultilines) need to be handled\n+  \/\/ at first because it will be cause of error in parse_log_arguments().\n+  \/\/ (options for existing output can't be applied.)\n+  \/\/ StdoutLog and StderrLog are already instantiated at static initializer\n+  \/\/ in logFileStreamOutput.cpp.\n+  if (output == NULL || strlen(output) == 0 ||\n+      strcmp(\"stdout\", output) == 0 || strcmp(\"#0\", output) == 0) {\n+    success = StdoutLog.parse_options(output_options, &ss);\n+    \/\/ We are no longer to need to pass output options to parse_log_arguments().\n+    output_options = NULL;\n+  } else if (strcmp(\"stderr\", output) == 0 || strcmp(\"#1\", output) == 0) {\n+    success = StderrLog.parse_options(output_options, &ss);\n+    \/\/ We are no longer to need to pass output options to parse_log_arguments().\n+    output_options = NULL;\n+  }\n+\n+  if (success) {\n+    success = parse_log_arguments(output, what, decorators, output_options, &ss);\n+  }\n@@ -562,0 +582,9 @@\n+  out->print_cr(\"\\nAvailable log output options:\");\n+  out->print_cr(\" foldmultilines=.. - If set to true, a log event that consists of multiple lines\"\n+                                       \" will be folded into a single line by replacing newline characters\"\n+                                       \" with the sequence '\\\\' and 'n' in the output.\"\n+                                       \" Existing single backslash characters will also be replaced\"\n+                                       \" with a sequence of two backslashes so that the conversion can be reversed.\"\n+                                       \" This option is safe to use with UTF-8 character encodings,\"\n+                                       \" but other encodings may not work.\");\n+\n@@ -573,7 +602,0 @@\n-  out->print_cr(\"   foldmultilines=.. - If set to true, a log event that consists of multiple lines\"\n-                                         \" will be folded into a single line by replacing newline characters\"\n-                                         \" with the sequence '\\\\' and 'n' in the output.\"\n-                                         \" Existing single backslash characters will also be replaced\"\n-                                         \" with a sequence of two backslashes so that the conversion can be reversed.\"\n-                                         \" This option is safe to use with UTF-8 character encodings,\"\n-                                         \" but other encodings may not work.\");\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":30,"deletions":8,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -4436,1 +4436,0 @@\n-This option is available only for file outputs.\n","filename":"src\/java.base\/share\/man\/java.1","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.util.regex.Pattern;\n@@ -39,2 +40,6 @@\n-    private static Path EXCEPTION_LOG_FILE = Path.of(\"exceptions.log\");\n-    private static String XLOG_BASE = \"-Xlog:exceptions=info:file=\" + EXCEPTION_LOG_FILE.toString();\n+    private static String EXCEPTION_LOG_FILE = \"exceptions.log\";\n+    private static String XLOG_BASE = \"-Xlog:exceptions=info:\";\n+    private static String EXCEPTION_MESSAGE = \"line 1\\nline 2\\\\nstring\";\n+    private static String FOLDED_EXCEPTION_MESSAGE = \"line 1\\\\nline 2\\\\\\\\nstring\";\n+    \/\/ Windows may out \"\\r\\n\" even though UL outs \"\\n\" only, so we need to evaluate regex with \\R.\n+    private static Pattern NEWLINE_LOG_PATTERN = Pattern.compile(\"line 1\\\\Rline 2\\\\\\\\nstring\", Pattern.MULTILINE);\n@@ -42,1 +47,1 @@\n-    private static void analyzeFoldMultilinesOn(ProcessBuilder pb) throws Exception {\n+    private static void analyzeFoldMultilinesOn(ProcessBuilder pb, String out) throws Exception {\n@@ -46,3 +51,8 @@\n-        String logs = Files.readString(EXCEPTION_LOG_FILE);\n-        if (!logs.contains(\"line 1\\\\nline 2\\\\\\\\nstring\")) {\n-            throw new RuntimeException(\"foldmultilines=true did not work.\");\n+        String logs = switch (out) {\n+            case \"stdout\" -> output.getStdout();\n+            case \"stderr\" -> output.getStderr();\n+            default -> Files.readString(Path.of(EXCEPTION_LOG_FILE));\n+        };\n+\n+        if (!logs.contains(FOLDED_EXCEPTION_MESSAGE)) {\n+            throw new RuntimeException(out + \": foldmultilines=true did not work.\");\n@@ -52,1 +62,1 @@\n-    private static void analyzeFoldMultilinesOff(ProcessBuilder pb) throws Exception {\n+    private static void analyzeFoldMultilinesOff(ProcessBuilder pb, String out) throws Exception {\n@@ -56,3 +66,8 @@\n-        String logs = Files.readString(EXCEPTION_LOG_FILE);\n-        if (!logs.contains(\"line 1\" + System.lineSeparator() + \"line 2\\\\nstring\")) {\n-            throw new RuntimeException(\"foldmultilines=false did not work.\");\n+        String logs = switch (out) {\n+            case \"stdout\" -> output.getStdout();\n+            case \"stderr\" -> output.getStderr();\n+            default -> Files.readString(Path.of(EXCEPTION_LOG_FILE));\n+        };\n+\n+        if (!NEWLINE_LOG_PATTERN.matcher(logs).find()) {\n+            throw new RuntimeException(out + \": foldmultilines=false did not work.\");\n@@ -68,1 +83,1 @@\n-    public static void main(String[] args) throws Exception {\n+    private static void test(String out) throws Exception {\n@@ -72,1 +87,1 @@\n-        Xlog = XLOG_BASE + \"::foldmultilines=true\";\n+        Xlog = XLOG_BASE + out +  \"::foldmultilines=true\";\n@@ -74,1 +89,1 @@\n-        analyzeFoldMultilinesOn(pb);\n+        analyzeFoldMultilinesOn(pb, out);\n@@ -76,1 +91,1 @@\n-        Xlog = XLOG_BASE + \"::foldmultilines=false\";\n+        Xlog = XLOG_BASE + out + \"::foldmultilines=false\";\n@@ -78,1 +93,1 @@\n-        analyzeFoldMultilinesOff(pb);\n+        analyzeFoldMultilinesOff(pb, out);\n@@ -80,1 +95,1 @@\n-        Xlog = XLOG_BASE + \"::foldmultilines=invalid\";\n+        Xlog = XLOG_BASE + out + \"::foldmultilines=invalid\";\n@@ -85,0 +100,6 @@\n+    public static void main(String[] args) throws Exception {\n+        test(\"file=\" + EXCEPTION_LOG_FILE);\n+        test(\"stdout\");\n+        test(\"stderr\");\n+    }\n+\n@@ -88,1 +109,1 @@\n-                throw new RuntimeException(\"line 1\\nline 2\\\\nstring\");\n+                throw new RuntimeException(EXCEPTION_MESSAGE);\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/FoldMultilinesTest.java","additions":38,"deletions":17,"binary":false,"changes":55,"status":"modified"}]}