{"files":[{"patch":"@@ -409,5 +409,4 @@\n-  \/\/ If output is stdout\/err, their options (e.g. foldmultilines) need to be handled\n-  \/\/ at first because it will be cause of error in parse_log_arguments().\n-  \/\/ (options for existing output can't be applied.)\n-  \/\/ StdoutLog and StderrLog are already instantiated at static initializer\n-  \/\/ in logFileStreamOutput.cpp.\n+  \/\/ Normally options can't be used to change an existing output\n+  \/\/ (parse_log_arguments() will report an error), and\n+  \/\/ both StdoutLog and StderrLog are created by static initializers,\n+  \/\/ so we have to process their options (e.g. foldmultilines) directly first.\n@@ -417,1 +416,1 @@\n-    \/\/ We are no longer to need to pass output options to parse_log_arguments().\n+    \/\/ We no longer need to pass output options to parse_log_arguments().\n@@ -421,1 +420,1 @@\n-    \/\/ We are no longer to need to pass output options to parse_log_arguments().\n+    \/\/ We no longer need to pass output options to parse_log_arguments().\n@@ -581,0 +580,7 @@\n+  out->cr();\n+\n+  out->print_cr(\"Available log outputs:\");\n+  out->print_cr(\" stdout\/stderr\");\n+  out->print_cr(\" file=<filename>\");\n+  out->print_cr(\"  If the filename contains %%p and\/or %%t, they will expand to the JVM's PID and startup timestamp, respectively.\");\n+  out->cr();\n@@ -582,1 +588,1 @@\n-  out->print_cr(\"\\nAvailable log output options:\");\n+  out->print_cr(\"Available log output options:\");\n@@ -590,0 +596,1 @@\n+  out->cr();\n@@ -591,12 +598,7 @@\n-  out->print_cr(\"\\nAvailable log outputs:\");\n-  out->print_cr(\" stdout\/stderr\");\n-  out->print_cr(\" file=<filename>\");\n-  out->print_cr(\"  If the filename contains %%p and\/or %%t, they will expand to the JVM's PID and startup timestamp, respectively.\");\n-  out->print_cr(\"  Additional output-options for file outputs:\");\n-  out->print_cr(\"   filesize=..       - Target byte size for log rotation (supports K\/M\/G suffix).\"\n-                                         \" If set to 0, log rotation will not trigger automatically,\"\n-                                         \" but can be performed manually (see the VM.log DCMD).\");\n-  out->print_cr(\"   filecount=..      - Number of files to keep in rotation (not counting the active file).\"\n-                                         \" If set to 0, log rotation is disabled.\"\n-                                         \" This will cause existing log files to be overwritten.\");\n-\n+  out->print_cr(\"Additional file output options:\");\n+  out->print_cr(\" filesize=..       - Target byte size for log rotation (supports K\/M\/G suffix).\"\n+                                       \" If set to 0, log rotation will not trigger automatically,\"\n+                                       \" but can be performed manually (see the VM.log DCMD).\");\n+  out->print_cr(\" filecount=..      - Number of files to keep in rotation (not counting the active file).\"\n+                                       \" If set to 0, log rotation is disabled.\"\n+                                       \" This will cause existing log files to be overwritten.\");\n@@ -604,1 +606,2 @@\n-  out->print_cr(\"\\nAsynchronous logging (off by default):\");\n+\n+  out->print_cr(\"Asynchronous logging (off by default):\");\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":24,"deletions":21,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @bug 8271186\n+ * @bug 8271186 8273471\n@@ -44,1 +44,0 @@\n-    \/\/ Windows may out \"\\r\\n\" even though UL outs \"\\n\" only, so we need to evaluate regex with \\R.\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/FoldMultilinesTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}