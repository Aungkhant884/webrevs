{"files":[{"patch":"@@ -407,1 +407,20 @@\n-  bool success = parse_log_arguments(output, what, decorators, output_options, &ss);\n+  bool success = true;\n+\n+  \/\/ Normally options can't be used to change an existing output\n+  \/\/ (parse_log_arguments() will report an error), and\n+  \/\/ both StdoutLog and StderrLog are created by static initializers,\n+  \/\/ so we have to process their options (e.g. foldmultilines) directly first.\n+  if (output == NULL || strlen(output) == 0 ||\n+      strcmp(\"stdout\", output) == 0 || strcmp(\"#0\", output) == 0) {\n+    success = StdoutLog.parse_options(output_options, &ss);\n+    \/\/ We no longer need to pass output options to parse_log_arguments().\n+    output_options = NULL;\n+  } else if (strcmp(\"stderr\", output) == 0 || strcmp(\"#1\", output) == 0) {\n+    success = StderrLog.parse_options(output_options, &ss);\n+    \/\/ We no longer need to pass output options to parse_log_arguments().\n+    output_options = NULL;\n+  }\n+\n+  if (success) {\n+    success = parse_log_arguments(output, what, decorators, output_options, &ss);\n+  }\n@@ -561,0 +580,1 @@\n+  out->cr();\n@@ -562,1 +582,1 @@\n-  out->print_cr(\"\\nAvailable log outputs:\");\n+  out->print_cr(\"Available log outputs:\");\n@@ -566,14 +586,11 @@\n-  out->print_cr(\"  Additional output-options for file outputs:\");\n-  out->print_cr(\"   filesize=..       - Target byte size for log rotation (supports K\/M\/G suffix).\"\n-                                         \" If set to 0, log rotation will not trigger automatically,\"\n-                                         \" but can be performed manually (see the VM.log DCMD).\");\n-  out->print_cr(\"   filecount=..      - Number of files to keep in rotation (not counting the active file).\"\n-                                         \" If set to 0, log rotation is disabled.\"\n-                                         \" This will cause existing log files to be overwritten.\");\n-  out->print_cr(\"   foldmultilines=.. - If set to true, a log event that consists of multiple lines\"\n-                                         \" will be folded into a single line by replacing newline characters\"\n-                                         \" with the sequence '\\\\' and 'n' in the output.\"\n-                                         \" Existing single backslash characters will also be replaced\"\n-                                         \" with a sequence of two backslashes so that the conversion can be reversed.\"\n-                                         \" This option is safe to use with UTF-8 character encodings,\"\n-                                         \" but other encodings may not work.\");\n+  out->cr();\n+\n+  out->print_cr(\"Available log output options:\");\n+  out->print_cr(\" foldmultilines=.. - If set to true, a log event that consists of multiple lines\"\n+                                       \" will be folded into a single line by replacing newline characters\"\n+                                       \" with the sequence '\\\\' and 'n' in the output.\"\n+                                       \" Existing single backslash characters will also be replaced\"\n+                                       \" with a sequence of two backslashes so that the conversion can be reversed.\"\n+                                       \" This option is safe to use with UTF-8 character encodings,\"\n+                                       \" but other encodings may not work.\");\n+  out->cr();\n@@ -581,0 +598,7 @@\n+  out->print_cr(\"Additional file output options:\");\n+  out->print_cr(\" filesize=..       - Target byte size for log rotation (supports K\/M\/G suffix).\"\n+                                       \" If set to 0, log rotation will not trigger automatically,\"\n+                                       \" but can be performed manually (see the VM.log DCMD).\");\n+  out->print_cr(\" filecount=..      - Number of files to keep in rotation (not counting the active file).\"\n+                                       \" If set to 0, log rotation is disabled.\"\n+                                       \" This will cause existing log files to be overwritten.\");\n@@ -582,1 +606,2 @@\n-  out->print_cr(\"\\nAsynchronous logging (off by default):\");\n+\n+  out->print_cr(\"Asynchronous logging (off by default):\");\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":42,"deletions":17,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -4436,1 +4436,0 @@\n-This option is available only for file outputs.\n","filename":"src\/java.base\/share\/man\/java.1","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @bug 8271186\n+ * @bug 8271186 8273471\n@@ -34,0 +34,1 @@\n+import java.util.regex.Pattern;\n@@ -39,2 +40,5 @@\n-    private static Path EXCEPTION_LOG_FILE = Path.of(\"exceptions.log\");\n-    private static String XLOG_BASE = \"-Xlog:exceptions=info:file=\" + EXCEPTION_LOG_FILE.toString();\n+    private static String EXCEPTION_LOG_FILE = \"exceptions.log\";\n+    private static String XLOG_BASE = \"-Xlog:exceptions=info:\";\n+    private static String EXCEPTION_MESSAGE = \"line 1\\nline 2\\\\nstring\";\n+    private static String FOLDED_EXCEPTION_MESSAGE = \"line 1\\\\nline 2\\\\\\\\nstring\";\n+    private static Pattern NEWLINE_LOG_PATTERN = Pattern.compile(\"line 1\\\\Rline 2\\\\\\\\nstring\", Pattern.MULTILINE);\n@@ -42,1 +46,1 @@\n-    private static void analyzeFoldMultilinesOn(ProcessBuilder pb) throws Exception {\n+    private static void analyzeFoldMultilinesOn(ProcessBuilder pb, String out) throws Exception {\n@@ -46,3 +50,8 @@\n-        String logs = Files.readString(EXCEPTION_LOG_FILE);\n-        if (!logs.contains(\"line 1\\\\nline 2\\\\\\\\nstring\")) {\n-            throw new RuntimeException(\"foldmultilines=true did not work.\");\n+        String logs = switch (out) {\n+            case \"stdout\" -> output.getStdout();\n+            case \"stderr\" -> output.getStderr();\n+            default -> Files.readString(Path.of(EXCEPTION_LOG_FILE));\n+        };\n+\n+        if (!logs.contains(FOLDED_EXCEPTION_MESSAGE)) {\n+            throw new RuntimeException(out + \": foldmultilines=true did not work.\");\n@@ -52,1 +61,1 @@\n-    private static void analyzeFoldMultilinesOff(ProcessBuilder pb) throws Exception {\n+    private static void analyzeFoldMultilinesOff(ProcessBuilder pb, String out) throws Exception {\n@@ -56,3 +65,8 @@\n-        String logs = Files.readString(EXCEPTION_LOG_FILE);\n-        if (!logs.contains(\"line 1\" + System.lineSeparator() + \"line 2\\\\nstring\")) {\n-            throw new RuntimeException(\"foldmultilines=false did not work.\");\n+        String logs = switch (out) {\n+            case \"stdout\" -> output.getStdout();\n+            case \"stderr\" -> output.getStderr();\n+            default -> Files.readString(Path.of(EXCEPTION_LOG_FILE));\n+        };\n+\n+        if (!NEWLINE_LOG_PATTERN.matcher(logs).find()) {\n+            throw new RuntimeException(out + \": foldmultilines=false did not work.\");\n@@ -68,1 +82,1 @@\n-    public static void main(String[] args) throws Exception {\n+    private static void test(String out) throws Exception {\n@@ -72,1 +86,1 @@\n-        Xlog = XLOG_BASE + \"::foldmultilines=true\";\n+        Xlog = XLOG_BASE + out +  \"::foldmultilines=true\";\n@@ -74,1 +88,1 @@\n-        analyzeFoldMultilinesOn(pb);\n+        analyzeFoldMultilinesOn(pb, out);\n@@ -76,1 +90,1 @@\n-        Xlog = XLOG_BASE + \"::foldmultilines=false\";\n+        Xlog = XLOG_BASE + out + \"::foldmultilines=false\";\n@@ -78,1 +92,1 @@\n-        analyzeFoldMultilinesOff(pb);\n+        analyzeFoldMultilinesOff(pb, out);\n@@ -80,1 +94,1 @@\n-        Xlog = XLOG_BASE + \"::foldmultilines=invalid\";\n+        Xlog = XLOG_BASE + out + \"::foldmultilines=invalid\";\n@@ -85,0 +99,6 @@\n+    public static void main(String[] args) throws Exception {\n+        test(\"file=\" + EXCEPTION_LOG_FILE);\n+        test(\"stdout\");\n+        test(\"stderr\");\n+    }\n+\n@@ -88,1 +108,1 @@\n-                throw new RuntimeException(\"line 1\\nline 2\\\\nstring\");\n+                throw new RuntimeException(EXCEPTION_MESSAGE);\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/FoldMultilinesTest.java","additions":38,"deletions":18,"binary":false,"changes":56,"status":"modified"}]}