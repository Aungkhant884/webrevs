{"files":[{"patch":"@@ -13100,0 +13100,22 @@\n+instruct cmovLL_reg_LEGT_U(cmpOpU_commute cmp, flagsReg_ulong_LEGT flags, eRegL dst, eRegL src) %{\n+  match(Set dst (CMoveL (Binary cmp flags) (Binary dst src)));\n+  predicate(VM_Version::supports_cmov() && ( _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt ));\n+  ins_cost(400);\n+  format %{ \"CMOV$cmp $dst.lo,$src.lo\\n\\t\"\n+            \"CMOV$cmp $dst.hi,$src.hi\" %}\n+  opcode(0x0F,0x40);\n+  ins_encode( enc_cmov(cmp), RegReg_Lo2( dst, src ), enc_cmov(cmp), RegReg_Hi2( dst, src ) );\n+  ins_pipe( pipe_cmov_reg_long );\n+%}\n+\n+instruct cmovLL_mem_LEGT_U(cmpOpU_commute cmp, flagsReg_ulong_LEGT flags, eRegL dst, load_long_memory src) %{\n+  match(Set dst (CMoveL (Binary cmp flags) (Binary dst (LoadL src))));\n+  predicate(VM_Version::supports_cmov() && ( _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt ));\n+  ins_cost(500);\n+  format %{ \"CMOV$cmp $dst.lo,$src.lo\\n\\t\"\n+            \"CMOV$cmp $dst.hi,$src.hi+4\" %}\n+  opcode(0x0F,0x40);\n+  ins_encode( enc_cmov(cmp), RegMem(dst, src), enc_cmov(cmp), RegMem_Hi(dst, src) );\n+  ins_pipe( pipe_cmov_reg_long );\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}