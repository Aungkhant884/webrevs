{"files":[{"patch":"@@ -51,0 +51,1 @@\n+  _control_lock(Mutex::leaf - 1, \"ShenandoahControlGC_lock\", true, Monitor::_safepoint_check_never),\n@@ -320,1 +321,7 @@\n-    os::naked_short_sleep(sleep);\n+\n+    {\n+      \/\/ The timed wait is necessary because this thread has a responsibility to send\n+      \/\/ 'alloc_words' to the pacer when it does not perform a GC.\n+      MonitorLocker lock(&_control_lock, Mutex::_no_safepoint_check_flag);\n+      lock.wait(ShenandoahControlIntervalMax);\n+    }\n@@ -510,0 +517,1 @@\n+    notify_control_thread();\n@@ -518,0 +526,5 @@\n+void ShenandoahControlThread::notify_control_thread() {\n+  MonitorLocker locker(&_control_lock, Mutex::_no_safepoint_check_flag);\n+  _control_lock.notify();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+  Monitor _control_lock;\n@@ -119,0 +120,1 @@\n+  void notify_control_thread();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}