{"files":[{"patch":"@@ -29,0 +29,2 @@\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n@@ -45,0 +47,2 @@\n+    private List<ImageConsumer> imageConsumers = new CopyOnWriteArrayList<>();\n+\n@@ -61,3 +65,0 @@\n-    \/\/ We can only have one consumer since we immediately return the data...\n-    private ImageConsumer theConsumer;\n-\n@@ -65,2 +66,4 @@\n-        theConsumer = ic;\n-        produce();\n+        if (ic == null)\n+            return;\n+        imageConsumers.add(ic);\n+        produce(ic);\n@@ -70,1 +73,1 @@\n-        return (ic == theConsumer);\n+        return imageConsumers.contains(ic);\n@@ -74,3 +77,1 @@\n-        if (theConsumer == ic) {\n-            theConsumer = null;\n-        }\n+        imageConsumers.remove(ic);\n@@ -86,3 +87,1 @@\n-    private void sendPixels() {\n-        if (theConsumer == null) return;\n-\n+    private void sendPixels(ImageConsumer theConsumer) {\n@@ -98,1 +97,2 @@\n-            theConsumer.setColorModel(cm);\n+            if (isConsumer(theConsumer))\n+                theConsumer.setColorModel(cm);\n@@ -103,1 +103,2 @@\n-                    if (theConsumer == null) return;\n+                    if (!isConsumer(theConsumer))\n+                        return;\n@@ -113,1 +114,2 @@\n-                    if (theConsumer == null) return;\n+                    if (!isConsumer(theConsumer))\n+                        return;\n@@ -128,1 +130,2 @@\n-                    if (theConsumer == null) return;\n+                    if (!isConsumer(theConsumer))\n+                        return;\n@@ -136,1 +139,2 @@\n-            theConsumer.setColorModel(cm);\n+            if (isConsumer(theConsumer))\n+                theConsumer.setColorModel(cm);\n@@ -141,1 +145,2 @@\n-                    if (theConsumer == null) return;\n+                    if (!isConsumer(theConsumer))\n+                        return;\n@@ -150,1 +155,2 @@\n-                    if (theConsumer == null) return;\n+                    if (!isConsumer(theConsumer))\n+                        return;\n@@ -162,1 +168,2 @@\n-                    if (theConsumer == null) return;\n+                    if (!isConsumer(theConsumer))\n+                        return;\n@@ -179,1 +186,2 @@\n-            theConsumer.setColorModel(newcm);\n+            if (isConsumer(theConsumer))\n+                theConsumer.setColorModel(newcm);\n@@ -182,1 +190,2 @@\n-                if (theConsumer == null) return;\n+                if (!isConsumer(theConsumer))\n+                    return;\n@@ -192,1 +201,1 @@\n-    private void produce() {\n+    private void produce(ImageConsumer theConsumer) {\n@@ -194,1 +203,1 @@\n-            if (theConsumer == null) return;\n+            \/\/ isConsumer(theConsumer) MUST be true at this point:\n@@ -196,8 +205,7 @@\n-            if (theConsumer == null) return;\n-            theConsumer.setProperties(properties);\n-            sendPixels();\n-            if (theConsumer == null) return;\n-            theConsumer.imageComplete(ImageConsumer.SINGLEFRAMEDONE);\n-\n-            \/\/ If 'theconsumer' has not unregistered itself after previous call\n-            if (theConsumer != null) {\n+            if (isConsumer(theConsumer))\n+                theConsumer.setProperties(properties);\n+            sendPixels(theConsumer);\n+            if (isConsumer(theConsumer))\n+                theConsumer.imageComplete(ImageConsumer.SINGLEFRAMEDONE);\n+\n+            if (isConsumer(theConsumer)) {\n@@ -218,1 +226,1 @@\n-            if (theConsumer != null) {\n+            if (isConsumer(theConsumer))\n@@ -220,1 +228,0 @@\n-            }\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/OffScreenImageSource.java","additions":41,"deletions":34,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n-                if (x instanceof Throwable)\n-                    System.exit(1);\n+                if (x instanceof NullPointerException e)\n+                    throw new RuntimeException(e);\n@@ -55,0 +55,1 @@\n+        runNullTest();\n@@ -71,2 +72,1 @@\n-        BufferedImage bufferedImage = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB);\n-        Image img = bufferedImage.getScaledInstance(2, 2, Image.SCALE_SMOOTH);\n+        Image img = createAbstractImage();\n@@ -93,0 +93,16 @@\n+    \/**\n+     * This creates an Image that is not a BufferedImage.\n+     * <p>\n+     * This specific implementation happens to rely on scaling an existing\n+     * BufferedImage, because that seemed like an easy way to avoid bundling a\n+     * JPG\/PNG with this unit test. But this return value still happens to be\n+     * a ToolkitImage, which is what a JPG\/PNG would also be (when loaded\n+     * via the Toolkit class and not ImageIO).\n+     * <\/p>\n+     *\/\n+    private static Image createAbstractImage() {\n+        BufferedImage bufferedImage = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB);\n+        Image img = bufferedImage.getScaledInstance(2, 2, Image.SCALE_SMOOTH);\n+        return img;\n+    }\n+\n@@ -105,1 +121,4 @@\n-            Image img = bufferedImage.getScaledInstance(20, 20, Image.SCALE_SMOOTH);\n+            if (!\"sun.awt.image.OffScreenImageSource\".equals(\n+                    bufferedImage.getSource().getClass().getName())) {\n+                throw new IllegalStateException(\"This isn't necessarily a problem, but it invalidates the usefulness of this test.\");\n+            }\n@@ -110,1 +129,1 @@\n-                    if (!img.getSource().isConsumer(this))\n+                    if (!bufferedImage.getSource().isConsumer(this))\n@@ -113,1 +132,1 @@\n-                        img.getSource().removeConsumer(this);\n+                        bufferedImage.getSource().removeConsumer(this);\n@@ -155,1 +174,1 @@\n-            img.getSource().startProduction(consumer);\n+            bufferedImage.getSource().startProduction(consumer);\n@@ -157,1 +176,1 @@\n-            if (img.getSource().isConsumer(consumer)) {\n+            if (bufferedImage.getSource().isConsumer(consumer)) {\n@@ -159,1 +178,1 @@\n-                System.exit(1);\n+                throw new IllegalStateException(\"This test is not executing as expected.\");\n@@ -163,0 +182,10 @@\n+\n+    \/**\n+     * This makes sure if OffScreenImageSource#addConsumer(null) is called: we\n+     * treat that as a no-op and return immediately without printing anything\n+     * to System.err.\n+     *\/\n+    public static void runNullTest() {\n+        BufferedImage bufferedImage = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB);\n+        bufferedImage.getSource().addConsumer(null);\n+    }\n","filename":"test\/jdk\/sun\/awt\/image\/OffScreenImageSource\/bug4200096.java","additions":39,"deletions":10,"binary":false,"changes":49,"status":"modified"}]}