{"files":[{"patch":"@@ -57,2 +57,2 @@\n-  int *lgrp_ids = NEW_C_HEAP_ARRAY(int, lgrp_limit, mtGC);\n-  int lgrp_num = (int)os::numa_get_leaf_groups(lgrp_ids, lgrp_limit);\n+  uint *lgrp_ids = NEW_C_HEAP_ARRAY(uint, lgrp_limit, mtGC);\n+  size_t lgrp_num = os::numa_get_leaf_groups(reinterpret_cast<int*>(lgrp_ids), lgrp_limit);\n@@ -61,1 +61,1 @@\n-  lgrp_spaces()->reserve(lgrp_num);\n+  lgrp_spaces()->reserve(checked_cast<int>(lgrp_num));\n@@ -63,1 +63,1 @@\n-  for (int i = 0; i < lgrp_num; i++) {\n+  for (size_t i = 0; i < lgrp_num; i++) {\n@@ -67,1 +67,1 @@\n-  FREE_C_HEAP_ARRAY(int, lgrp_ids);\n+  FREE_C_HEAP_ARRAY(uint, lgrp_ids);\n@@ -210,1 +210,1 @@\n-void MutableNUMASpace::bias_region(MemRegion mr, int lgrp_id) {\n+void MutableNUMASpace::bias_region(MemRegion mr, uint lgrp_id) {\n@@ -227,1 +227,1 @@\n-    os::numa_make_local((char*)aligned_region.start(), aligned_region.byte_size(), lgrp_id);\n+    os::numa_make_local((char*)aligned_region.start(), aligned_region.byte_size(), checked_cast<int>(lgrp_id));\n@@ -626,1 +626,1 @@\n-    st->print(\"lgrp %d: \", lgrp_spaces()->at(i)->lgrp_id());\n+    st->print(\"lgrp %u: \", lgrp_spaces()->at(i)->lgrp_id());\n@@ -639,1 +639,1 @@\n-    st->print(\"    lgrp %d\", ls->lgrp_id());\n+    st->print(\"    lgrp %u\", ls->lgrp_id());\n@@ -682,1 +682,1 @@\n-        } else if (lgrp_ids[i] == lgrp_id()) {\n+        } else if (checked_cast<uint>(lgrp_ids[i]) == lgrp_id()) {\n@@ -712,1 +712,1 @@\n-  page_expected.lgrp_id = lgrp_id();\n+  page_expected.lgrp_id = checked_cast<uint>(lgrp_id());\n@@ -723,1 +723,1 @@\n-      if ((page_expected.size != page_size || page_expected.lgrp_id != lgrp_id())\n+      if ((page_expected.size != page_size || checked_cast<uint>(page_expected.lgrp_id) != lgrp_id())\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-    int _lgrp_id;\n+    uint _lgrp_id;\n@@ -90,1 +90,1 @@\n-    LGRPSpace(int l, size_t alignment) : _lgrp_id(l), _allocation_failed(false), _last_page_scanned(nullptr) {\n+    LGRPSpace(uint l, size_t alignment) : _lgrp_id(l), _allocation_failed(false), _last_page_scanned(nullptr) {\n@@ -100,1 +100,1 @@\n-      return *(int*)lgrp_id_value == p->lgrp_id();\n+      return *(uint*)lgrp_id_value == p->lgrp_id();\n@@ -120,1 +120,1 @@\n-    int lgrp_id() const                             { return _lgrp_id;             }\n+    uint lgrp_id() const                             { return _lgrp_id;             }\n@@ -151,1 +151,1 @@\n-  void bias_region(MemRegion mr, int lgrp_id);\n+  void bias_region(MemRegion mr, uint lgrp_id);\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}