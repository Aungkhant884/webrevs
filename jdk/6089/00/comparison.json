{"files":[{"patch":"@@ -28,1 +28,3 @@\n-import java.util.*;\n+import javax.security.auth.DestroyFailedException;\n+import javax.security.auth.Destroyable;\n+import java.io.Serializable;\n@@ -42,1 +44,1 @@\n-public final class KeyPair implements java.io.Serializable {\n+public final class KeyPair implements Serializable, Destroyable {\n@@ -48,1 +50,1 @@\n-    private PrivateKey privateKey;\n+    private final PrivateKey privateKey;\n@@ -51,1 +53,1 @@\n-    private PublicKey publicKey;\n+    private final PublicKey publicKey;\n@@ -86,0 +88,29 @@\n+\n+    \/**\n+     * Check if the private key has been destroyed.\n+     *\n+     * @return true is if the private key has been destroyed.\n+     *\n+     * @since 18\n+     *\/\n+    @Override\n+    public boolean isDestroyed() {\n+        return (privateKey == null || privateKey.isDestroyed());\n+    }\n+\n+    \/**\n+     * Call to destroy the private key in this key pair. DestroyFailedException\n+     * will be thrown if the private key object does not implement a destroy\n+     * method.\n+     *\n+     * @throws DestroyFailedException if the destroy operation fails or there is\n+     * no underlying destroy method.\n+     *\n+     * @since 18\n+     *\/\n+    @Override\n+    public void destroy() throws DestroyFailedException {\n+        if (privateKey != null) {\n+            privateKey.destroy();\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyPair.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,3 @@\n- * @bug 6263419\n- * @summary No way to clean the memory for a java.security.Key\n+ * @bug 6263419 8158689\n+ * @summary Tests Destroyable interface on SecretKey, PublicKey, PrivateKey,\n+ * and KeyPair classes.\n@@ -43,0 +44,2 @@\n+        testKeyPairDestruction(new KeyPair(keypair.getPublic(),\n+            new MyDestroyablePrivateKey()));\n@@ -127,0 +130,21 @@\n+    \/\/ Check the behaviour of a key that does not implement key destruction\n+    private static void testKeyPairDestruction(KeyPair keypair)\n+        throws Exception {\n+\n+        if (keypair.isDestroyed()) {\n+            throw new Exception(\"KeyPair.privateKey unexpectedly destroyed.\");\n+        }\n+\n+        try {\n+            keypair.destroy();\n+        } catch (DestroyFailedException dfe) {\n+            throw new Exception(\"KeyPair.privateKey wasn't able to be\" +\n+                \" destroyed\");\n+        }\n+\n+        if (!keypair.isDestroyed()) {\n+            throw new Exception(\"KeyPair.privateKey should have been \" +\n+                \"destroyed\");\n+        }\n+    }\n+\n","filename":"test\/jdk\/javax\/security\/auth\/Destroyable\/KeyDestructionTest.java","additions":27,"deletions":3,"binary":false,"changes":30,"status":"modified"}]}