{"files":[{"patch":"@@ -259,1 +259,2 @@\n-    private static final double DOUBLE_UNIT = 0x1.0p-53; \/\/ 1.0 \/ (1L << 53)\n+    private static final double DOUBLE_UNIT = 0x1.0p-53; \/\/ 1.0 \/ (1L << Double.PRECISION)\n+    private static final float FLOAT_UNIT = 0x1.0p-24f; \/\/ 1.0f \/ (1 << Float.PRECISION)\n@@ -601,1 +602,1 @@\n-     *         value between {@code 0.0} and {@code 1.0} from this\n+     *         value between {@code 0.0f} and {@code 1.0f} from this\n@@ -606,1 +607,1 @@\n-        return next(24) \/ ((float)(1 << 24));\n+        return next(Float.PRECISION) * FLOAT_UNIT;\n@@ -647,1 +648,1 @@\n-        return (((long)(next(26)) << 27) + next(27)) * DOUBLE_UNIT;\n+        return (((long)(next(Double.PRECISION - 27)) << 27) + next(27)) * DOUBLE_UNIT;\n@@ -1032,2 +1033,2 @@\n-     * pseudorandom {@code double} values, each between zero\n-     * (inclusive) and one (exclusive).\n+     * pseudorandom {@code double} values, each (approximately) uniformly\n+     * distributed between zero (inclusive) and one (exclusive).\n@@ -1051,2 +1052,2 @@\n-     * double} values, each between zero (inclusive) and one\n-     * (exclusive).\n+     * double} values, each (approximately) uniformly\n+     * distributed between zero (inclusive) and one (exclusive).\n@@ -1070,13 +1071,2 @@\n-     * pseudorandom {@code double} values, each conforming to the given origin\n-     * (inclusive) and bound (exclusive).\n-     *\n-     * <p>A pseudorandom {@code double} value is generated as if it's the result\n-     * of calling the following method with the origin and bound:\n-     * <pre> {@code\n-     * double nextDouble(double origin, double bound) {\n-     *   double r = nextDouble();\n-     *   r = r * (bound - origin) + origin;\n-     *   if (r >= bound) \/\/ correct for rounding\n-     *     r = Math.nextDown(bound);\n-     *   return r;\n-     * }}<\/pre>\n+     * pseudorandom {@code double} values, each uniformly distributed between\n+     * the given origin (inclusive) and bound (exclusive).\n@@ -1102,14 +1092,3 @@\n-     * double} values, each conforming to the given origin (inclusive) and bound\n-     * (exclusive).\n-     *\n-     * <p>A pseudorandom {@code double} value is generated as if it's the result\n-     * of calling the following method with the origin and bound:\n-     * <pre> {@code\n-     * double nextDouble(double origin, double bound) {\n-     *   double r = nextDouble();\n-     *   r = r * (bound - origin) + origin;\n-     *   if (r >= bound) \/\/ correct for rounding\n-     *     r = Math.nextDown(bound);\n-     *   return r;\n-     * }}<\/pre>\n-     *\n+     * double} values, each uniformly distributed between\n+     * the given origin (inclusive) and bound (exclusive).\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/Random.java","additions":14,"deletions":35,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -543,4 +543,1 @@\n-     *         is greater than or equal to {@code bound}, or\n-     *         the difference between {@code bound} and {@code origin}\n-     *         is so large that it cannot be represented as a finite\n-     *         {@code float} value\n+     *         is greater than or equal to {@code bound}\n@@ -609,5 +606,2 @@\n-     *         is greater than or equal to {@code bound}, or\n-     *         the difference between {@code bound} and {@code origin}\n-     *         is so large that it cannot be represented as a finite\n-     *         {@code double} value\n-     *\n+     *         is greater than or equal to {@code bound}\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/random\/RandomGenerator.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-        if (!(bound > 0.0 && bound < Float.POSITIVE_INFINITY)) {\n+        if (!(0.0f < bound && bound < Float.POSITIVE_INFINITY)) {\n@@ -161,1 +161,1 @@\n-        if (!(bound > 0.0 && bound < Double.POSITIVE_INFINITY)) {\n+        if (!(0.0 < bound && bound < Double.POSITIVE_INFINITY)) {\n@@ -198,2 +198,3 @@\n-     * @throws IllegalArgumentException if {@code origin} is not finite, {@code bound} is not finite,\n-     *                                  or {@code bound - origin} is not finite\n+     * @throws IllegalArgumentException if {@code origin} is not finite,\n+     *          or {@code bound} is not finite, or {@code origin}\n+     *          is greater than or equal to {@code bound}\n@@ -202,1 +203,2 @@\n-        if (!(origin < bound && (bound - origin) < Float.POSITIVE_INFINITY)) {\n+        if (!(Float.NEGATIVE_INFINITY < origin && origin < bound &&\n+                bound < Float.POSITIVE_INFINITY)) {\n@@ -213,2 +215,3 @@\n-     * @throws IllegalArgumentException if {@code origin} is not finite, {@code bound} is not finite,\n-     *                                  or {@code bound - origin} is not finite\n+     * @throws IllegalArgumentException if {@code origin} is not finite,\n+     *          or {@code bound} is not finite, or {@code origin}\n+     *          is greater than or equal to {@code bound}\n@@ -217,1 +220,2 @@\n-        if (!(origin < bound && (bound - origin) < Double.POSITIVE_INFINITY)) {\n+        if (!(Double.NEGATIVE_INFINITY < origin && origin < bound &&\n+                bound < Double.POSITIVE_INFINITY)) {\n@@ -346,2 +350,2 @@\n-     * {@code origin} is greater than {@code bound}, then this method simply\n-     * calls the unbounded version of\n+     * {@code origin} is greater than or equal to {@code bound},\n+     * then this method simply calls the unbounded version of\n@@ -511,2 +515,2 @@\n-     * {@code origin} is greater than {@code bound}, then this method simply\n-     * calls the unbounded version of\n+     * {@code origin} is greater than or equal to {@code bound},\n+     * then this method simply calls the unbounded version of\n@@ -607,2 +611,2 @@\n-     * If {@code origin} is greater than {@code bound}, then this method simply\n-     * calls the unbounded version of\n+     * {@code origin} is greater than or equal to {@code bound},\n+     * then this method simply calls the unbounded version of\n@@ -646,1 +650,7 @@\n-            r = r * (bound - origin) + origin;\n+            if (bound - origin < Double.POSITIVE_INFINITY) {\n+                r = r * (bound - origin) + origin;\n+            } else {\n+                \/* avoids overflow at the cost of 3 more multiplications *\/\n+                double halfOrigin = 0.5 * origin;\n+                r = (r * (0.5 * bound - halfOrigin) + halfOrigin) * 2.0;\n+            }\n@@ -648,1 +658,1 @@\n-                r = Math.nextAfter(bound, origin);\n+                r = Math.nextDown(bound);\n@@ -689,2 +699,2 @@\n-     * If {@code origin} is greater than {@code bound}, then this method simply\n-     * calls the unbounded version of\n+     * {@code origin} is greater than or equal to {@code bound},\n+     * then this method simply calls the unbounded version of\n@@ -718,1 +728,7 @@\n-            r = r * (bound - origin) + origin;\n+            if (bound - origin < Float.POSITIVE_INFINITY) {\n+                r = r * (bound - origin) + origin;\n+            } else {\n+                \/* avoids overflow at the cost of 3 more multiplications *\/\n+                float halfOrigin = 0.5f * origin;\n+                r = (r * (0.5f * bound - halfOrigin) + halfOrigin) * 2.0f;\n+            }\n@@ -720,1 +736,1 @@\n-                r = Float.intBitsToFloat(Float.floatToIntBits(bound) - 1);\n+                r = Math.nextDown(r);\n@@ -752,1 +768,1 @@\n-            r = Float.intBitsToFloat(Float.floatToIntBits(bound) - 1);\n+            r = Math.nextDown(r);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":37,"deletions":21,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -27,1 +27,7 @@\n- * @bug 8280550 8280950 8281183\n+ * @bug 8280550 8280950 8281183 8202449\n+ *\n+ * @key randomness\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.RandomFactory\n+ * @run main RandomNextDoubleBoundary\n+\n@@ -32,0 +38,1 @@\n+import jdk.test.lib.RandomFactory;\n@@ -37,0 +44,1 @@\n+        nextDoubleHugeRange();\n@@ -89,0 +97,21 @@\n+    public static void nextDoubleHugeRange() {\n+        var random = RandomFactory.getRandom();\n+        var n = 100_000;\n+\n+        var origin = -(3.0 \/ 4.0) * Double.MAX_VALUE;\n+        var bound = (3.0 \/ 4.0) * Double.MAX_VALUE;\n+        assertTrue(bound - origin == Double.POSITIVE_INFINITY);\n+\n+        \/* all are within [origin, bound) *\/\n+        assertTrue(random.doubles(n, origin, bound)\n+                .allMatch(d -> origin <= d && d < bound));\n+\n+        \/* some are near the origin *\/\n+        assertTrue(random.doubles(n, origin, bound)\n+                .anyMatch(d -> d < (15.0 \/ 16.0) * origin));\n+\n+        \/* some are near the bound *\/\n+        assertTrue(random.doubles(n, origin, bound)\n+                .anyMatch(d -> d > (15.0 \/ 16.0) * bound));\n+    }\n+\n@@ -94,0 +123,1 @@\n+\n","filename":"test\/jdk\/java\/util\/Random\/RandomNextDoubleBoundary.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"}]}