{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -260,0 +260,1 @@\n+     * @throws NullPointerException if {@code seed} is {@code null}\n@@ -263,0 +264,1 @@\n+        Objects.requireNonNull(seed);\n@@ -709,0 +711,1 @@\n+     * @throws NullPointerException if {@code seed} is {@code null}\n@@ -713,0 +716,1 @@\n+        Objects.requireNonNull(seed);\n@@ -758,0 +762,1 @@\n+     * @throws NullPointerException if {@code bytes} is {@code null}\n@@ -761,0 +766,1 @@\n+        Objects.requireNonNull(bytes);\n@@ -776,1 +782,1 @@\n-     * @throws NullPointerException if {@code bytes} is null\n+     * @throws NullPointerException if {@code bytes} is {@code null}\n@@ -788,0 +794,1 @@\n+        Objects.requireNonNull(bytes);\n@@ -789,2 +796,1 @@\n-            secureRandomSpi.engineNextBytes(\n-                    Objects.requireNonNull(bytes), params);\n+            secureRandomSpi.engineNextBytes(bytes, params);\n@@ -793,2 +799,1 @@\n-                secureRandomSpi.engineNextBytes(\n-                        Objects.requireNonNull(bytes), params);\n+                secureRandomSpi.engineNextBytes(bytes, params);\n","filename":"src\/java.base\/share\/classes\/java\/security\/SecureRandom.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -341,2 +341,0 @@\n-        Objects.requireNonNull(result);\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/AbstractDrbg.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,3 +91,0 @@\n-        if (seed == null) {\n-            throw new NullPointerException(\"seed must not be null\");\n-        }\n@@ -123,1 +120,1 @@\n-        if ((bytes == null) || (bytes.length == 0)) {\n+        if (bytes.length == 0) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11SecureRandom.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8155191\n+ * @summary check NPE is thrown for various methods of SecureRandom class,\n+ *     e.g. SecureRandom(byte[]), nextBytes(byte[]), and setSeed(byte[]).\n+ * @run main NextBytesNull\n+ *\/\n+\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Provider;\n+import java.security.SecureRandom;\n+import java.security.SecureRandomSpi;\n+\n+public class NextBytesNull {\n+\n+    public static void main(String[] args) throws Exception {\n+        String test = \"SecureRandom(null)\";\n+        try {\n+            new SecureRandom(null);\n+            throw new RuntimeException(\"Error: NPE not thrown for \" + test);\n+        } catch (NullPointerException e) {\n+            System.out.println(\"OK, expected NPE thrown for \" + test);\n+        }\n+\n+        \/\/ verify with an Spi impl which does not throw NPE\n+        SecureRandom sr = SecureRandom.getInstance(\"S1\", new P());\n+        try {\n+            sr.nextBytes(null);\n+            throw new RuntimeException(\"Error: NPE not thrown\");\n+        } catch (NullPointerException npe) {\n+            System.out.println(\"OK, expected NPE thrown for \" + test);\n+        }\n+        try {\n+            sr.setSeed(null);\n+            throw new RuntimeException(\"Error: NPE not thrown for \" + test);\n+        } catch (NullPointerException npe) {\n+            System.out.println(\"OK, expected NPE thrown for \" + test);\n+        }\n+    }\n+\n+    public static final class P extends Provider {\n+        public P() {\n+            super(\"P\", 1.0d, \"Test Provider without Null Check\");\n+            put(\"SecureRandom.S1\", S.class.getName());\n+        }\n+    }\n+\n+    public static final class S extends SecureRandomSpi {\n+        @Override\n+        protected void engineSetSeed(byte[] seed) {\n+        }\n+        @Override\n+        protected void engineNextBytes(byte[] bytes) {\n+        }\n+        @Override\n+        protected byte[] engineGenerateSeed(int numBytes) {\n+            return new byte[numBytes];\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/SecureRandom\/NextBytesNull.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}