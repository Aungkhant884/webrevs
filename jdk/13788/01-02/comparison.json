{"files":[{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8155191\n+ * @summary check NPE is thrown for various methods of SecureRandom class,\n+ *     e.g. SecureRandom(byte[]), nextBytes(byte[]), and setSeed(byte[]).\n+ * @run main\/othervm NextBytesNull\n+ *\/\n+\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Provider;\n+import java.security.SecureRandom;\n+import java.security.SecureRandomSpi;\n+\n+public class NextBytesNull {\n+\n+    public static void main(String[] args) throws Exception {\n+        String test = \"SecureRandom(null)\";\n+        try {\n+            new SecureRandom(null);\n+            throw new RuntimeException(\"Error: NPE not thrown for \" + test);\n+        } catch (NullPointerException e) {\n+            System.out.println(\"OK, expected NPE thrown for \" + test);\n+        }\n+\n+        \/\/ verify with an Spi impl which does not throw NPE\n+        SecureRandom sr = SecureRandom.getInstance(\"S1\", new P());\n+        try {\n+            sr.nextBytes(null);\n+            throw new RuntimeException(\"Error: NPE not thrown\");\n+        } catch (NullPointerException npe) {\n+            System.out.println(\"OK, expected NPE thrown for \" + test);\n+        }\n+        try {\n+            sr.setSeed(null);\n+            throw new RuntimeException(\"Error: NPE not thrown for \" + test);\n+        } catch (NullPointerException npe) {\n+            System.out.println(\"OK, expected NPE thrown for \" + test);\n+        }\n+    }\n+\n+    public static final class P extends Provider {\n+        public P() {\n+            super(\"P\", 1.0d, \"Test Provider without Null Check\");\n+            put(\"SecureRandom.S1\", S.class.getName());\n+        }\n+    }\n+\n+    public static final class S extends SecureRandomSpi {\n+        @Override\n+        protected void engineSetSeed(byte[] seed) {\n+        }\n+        @Override\n+        protected void engineNextBytes(byte[] bytes) {\n+        }\n+        @Override\n+        protected byte[] engineGenerateSeed(int numBytes) {\n+            return new byte[numBytes];\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/SecureRandom\/NextBytesNull.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -1,80 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8155191\n- * @summary check NPE is thrown for nextBytes(byte[]) and setSeed(byte[])\n- *     when using the SecureRandom impls from the SUN provider\n- * @run main\/othervm NextBytesNull\n- *\/\n-\n-import java.security.NoSuchAlgorithmException;\n-import java.security.Provider;\n-import java.security.SecureRandom;\n-\n-public class NextBytesNull {\n-\n-    private static String[] SECURE_RANDOM_ALGOS = {\n-        \"NativePRNG\", \"NativePRNGBlocking\", \"NativePRNGNonBlocking\",\n-        \"DRBG\", \"SHA1PRNG\"\n-    };\n-\n-    public static void main(String[] args) throws Exception {\n-        \/\/ check NPE for SecureRandom(byte[])\n-        try {\n-            new SecureRandom(null);\n-            System.out.print(\"new SecureRandom(null) passed\");\n-        } catch (NullPointerException e) {\n-            System.out.println(\"NPE thrown for new SecureRandom(null)\");\n-        }\n-\n-        for (String srAlg : SECURE_RANDOM_ALGOS) {\n-            System.out.print(\"Testing \" + srAlg);\n-            SecureRandom random;\n-            try {\n-                random = SecureRandom.getInstance(srAlg, \"SUN\");\n-            } catch (NoSuchAlgorithmException e) {\n-                System.out.println(\"No support for \" + srAlg +\n-                    \"=> skip\");\n-                e.printStackTrace();\n-                continue;\n-            }\n-            \/\/ check NPE for nextBytes(byte[])\n-            try {\n-                random.nextBytes(null);\n-                throw new RuntimeException(\"Fail: should throw NPE\");\n-            } catch (NullPointerException npe) {\n-                System.out.println(\" OK, expected NPE thrown\");\n-            }\n-\n-            \/\/ check NPE for setSeed(byte[])\n-            try {\n-                random.setSeed(null);\n-                throw new RuntimeException(\"Fail: should throw NPE\");\n-            } catch (NullPointerException npe) {\n-                System.out.println(\" OK, expected NPE thrown\");\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/SecureRandom\/NextBytesNull.java","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"}]}