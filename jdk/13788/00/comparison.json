{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -758,0 +758,1 @@\n+     * @throws NullPointerException if {@code bytes} is {@code null}\n@@ -761,0 +762,1 @@\n+        Objects.requireNonNull(bytes);\n@@ -776,1 +778,1 @@\n-     * @throws NullPointerException if {@code bytes} is null\n+     * @throws NullPointerException if {@code bytes} is {@code null}\n@@ -788,0 +790,1 @@\n+        Objects.requireNonNull(bytes);\n@@ -789,2 +792,1 @@\n-            secureRandomSpi.engineNextBytes(\n-                    Objects.requireNonNull(bytes), params);\n+            secureRandomSpi.engineNextBytes(bytes, params);\n@@ -793,2 +795,1 @@\n-                secureRandomSpi.engineNextBytes(\n-                        Objects.requireNonNull(bytes), params);\n+                secureRandomSpi.engineNextBytes(bytes, params);\n","filename":"src\/java.base\/share\/classes\/java\/security\/SecureRandom.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -341,2 +341,0 @@\n-        Objects.requireNonNull(result);\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/AbstractDrbg.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,1 +123,1 @@\n-        if ((bytes == null) || (bytes.length == 0)) {\n+        if (bytes.length == 0) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11SecureRandom.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8155191\n+ * @summary check PKCS#11 SecureRandom throws NPE for null output\n+ * @library \/test\/lib ..\n+ * @modules jdk.crypto.cryptoki\n+ * @run main\/othervm NextBytesNull\n+ *\/\n+\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Provider;\n+import java.security.SecureRandom;\n+\n+public class NextBytesNull extends PKCS11Test {\n+\n+    @Override\n+    public void main(Provider p) throws Exception {\n+        SecureRandom random;\n+        try {\n+            random = SecureRandom.getInstance(\"PKCS11\", p);\n+        } catch (NoSuchAlgorithmException e) {\n+            System.out.println(\"Provider \" + p +\n+                    \" does not support PKCS11 SecureRandom, skipping\");\n+            e.printStackTrace();\n+            return;\n+        }\n+        try {\n+            random.nextBytes(null);\n+            throw new RuntimeException(\"Fail: expected NPE not thrown\");\n+        } catch (NullPointerException npe) {\n+            System.out.println(\"OK, expected NPE thrown\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        main(new NextBytesNull(), args);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs11\/SecureRandom\/NextBytesNull.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8155191\n+ * @summary check nextBytes() for NPE using various JDK SecureRandom impls\n+ *     from SUN provider\n+ * @run main\/othervm NextBytesNull\n+ *\/\n+\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Provider;\n+import java.security.SecureRandom;\n+\n+public class NextBytesNull {\n+\n+    private static String[] SECURE_RANDOM_ALGOS = {\n+        \"NativePRNG\", \"NativePRNGBlocking\", \"NativePRNGNonBlocking\",\n+        \"DRBG\", \"SHA1PRNG\", \"NativePRNG\"\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        for (String srAlg : SECURE_RANDOM_ALGOS) {\n+            System.out.print(\"Testing \" + srAlg);\n+            SecureRandom random;\n+            try {\n+                random = SecureRandom.getInstance(srAlg, \"SUN\");\n+            } catch (NoSuchAlgorithmException e) {\n+                System.out.println(\"No support for \" + srAlg +\n+                    \"=> skip\");\n+                e.printStackTrace();\n+                continue;\n+            }\n+            try {\n+                random.nextBytes(null);\n+                throw new RuntimeException(\"Fail: should throw NPE\");\n+            } catch (NullPointerException npe) {\n+                System.out.println(\" OK, expected NPE thrown\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/provider\/SecureRandom\/NextBytesNull.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}