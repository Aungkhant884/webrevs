{"files":[{"patch":"@@ -6096,0 +6096,13 @@\n+bool ClassFileParser::is_java_lang_ref_Reference_subclass() const {\n+  if (_super_klass == NULL) {\n+    return false;\n+  }\n+\n+  if (_super_klass->name() == vmSymbols::java_lang_ref_Reference()) {\n+    \/\/ Direct subclass of j.l.r.Reference: Soft|Weak|Final|Phantom\n+    return true;\n+  }\n+\n+  return _super_klass->reference_type() != REF_NONE;\n+}\n+\n@@ -6105,3 +6118,12 @@\n-bool ClassFileParser::is_java_lang_ref_Reference_subclass() const {\n-  if (_super_klass == NULL) {\n-    return false;\n+static ReferenceType reference_subclass_name_to_type(const Symbol* name) {\n+  if (       name == vmSymbols::java_lang_ref_SoftReference()) {\n+    return REF_SOFT;\n+  } else if (name == vmSymbols::java_lang_ref_WeakReference()) {\n+    return REF_WEAK;\n+  } else if (name == vmSymbols::java_lang_ref_FinalReference()) {\n+    return REF_FINAL;\n+  } else if (name == vmSymbols::java_lang_ref_PhantomReference()) {\n+    return REF_PHANTOM;\n+  } else {\n+    ShouldNotReachHere();\n+    return REF_NONE;\n@@ -6109,0 +6131,1 @@\n+}\n@@ -6110,3 +6133,5 @@\n-  if (_super_klass->name() == vmSymbols::java_lang_ref_Reference()) {\n-    \/\/ Direct subclass of j.l.r.Reference: Soft|Weak|Final|Phantom\n-    return true;\n+ReferenceType ClassFileParser::determine_reference_type() const {\n+  const ReferenceType rt = super_reference_type();\n+  if (rt != REF_NONE) {\n+    \/\/ Inherit type from super class\n+    return rt;\n@@ -6115,1 +6140,3 @@\n-  return _super_klass->reference_type() != REF_NONE;\n+  \/\/ Bootstrapping: this is one of the direct subclasses of java.lang.ref.Reference\n+  const Symbol* const name = class_name();\n+  return reference_subclass_name_to_type(name);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":34,"deletions":7,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -531,0 +531,2 @@\n+  ReferenceType super_reference_type() const;\n+  bool is_java_lang_ref_Reference_subclass() const;\n@@ -563,1 +565,0 @@\n-  ReferenceType super_reference_type() const;\n@@ -565,1 +566,1 @@\n-  bool is_java_lang_ref_Reference_subclass() const;\n+  ReferenceType determine_reference_type() const;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -511,1 +511,1 @@\n-  _reference_type(REF_NONE),\n+  _reference_type(parser.determine_reference_type()),\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -596,9 +596,0 @@\n-protected:\n-  \/\/ Only used by the InstanceRefKlass constructor\n-  void set_reference_type(ReferenceType t) {\n-    assert(t == (u1)t, \"overflow\");\n-    _reference_type = (u1)t;\n-  }\n-\n-public:\n-\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"classfile\/classFileParser.hpp\"\n@@ -29,1 +28,0 @@\n-#include \"classfile\/vmSymbols.hpp\"\n@@ -33,32 +31,0 @@\n-static ReferenceType reference_subclass_name_to_type(const Symbol* name) {\n-  if (       name == vmSymbols::java_lang_ref_SoftReference()) {\n-    return REF_SOFT;\n-  } else if (name == vmSymbols::java_lang_ref_WeakReference()) {\n-    return REF_WEAK;\n-  } else if (name == vmSymbols::java_lang_ref_FinalReference()) {\n-    return REF_FINAL;\n-  } else if (name == vmSymbols::java_lang_ref_PhantomReference()) {\n-    return REF_PHANTOM;\n-  } else {\n-    ShouldNotReachHere();\n-    return REF_NONE;\n-  }\n-}\n-\n-static ReferenceType determine_reference_type(const ClassFileParser& parser) {\n-  const ReferenceType rt = parser.super_reference_type();\n-  if (rt != REF_NONE) {\n-    \/\/ Inherit type from super class\n-    return rt;\n-  }\n-\n-  \/\/ Bootstrapping: this is one of the direct subclasses of java.lang.ref.Reference\n-  const Symbol* const name = parser.class_name();\n-  return reference_subclass_name_to_type(name);\n-}\n-\n-InstanceRefKlass::InstanceRefKlass(const ClassFileParser& parser) : InstanceKlass(parser, Kind) {\n-  const ReferenceType rt = determine_reference_type(parser);\n-  set_reference_type(rt);\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/instanceRefKlass.cpp","additions":0,"deletions":34,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  InstanceRefKlass(const ClassFileParser& parser);\n+  InstanceRefKlass(const ClassFileParser& parser) : InstanceKlass(parser, Kind) {}\n","filename":"src\/hotspot\/share\/oops\/instanceRefKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}