{"files":[{"patch":"@@ -6096,13 +6096,0 @@\n-bool ClassFileParser::is_java_lang_ref_Reference_subclass() const {\n-  if (_super_klass == NULL) {\n-    return false;\n-  }\n-\n-  if (_super_klass->name() == vmSymbols::java_lang_ref_Reference()) {\n-    \/\/ Direct subclass of j.l.r.Reference: Soft|Weak|Final|Phantom\n-    return true;\n-  }\n-\n-  return _super_klass->reference_type() != REF_NONE;\n-}\n-\n@@ -6118,12 +6105,3 @@\n-static ReferenceType reference_subclass_name_to_type(const Symbol* name) {\n-  if (       name == vmSymbols::java_lang_ref_SoftReference()) {\n-    return REF_SOFT;\n-  } else if (name == vmSymbols::java_lang_ref_WeakReference()) {\n-    return REF_WEAK;\n-  } else if (name == vmSymbols::java_lang_ref_FinalReference()) {\n-    return REF_FINAL;\n-  } else if (name == vmSymbols::java_lang_ref_PhantomReference()) {\n-    return REF_PHANTOM;\n-  } else {\n-    ShouldNotReachHere();\n-    return REF_NONE;\n+bool ClassFileParser::is_java_lang_ref_Reference_subclass() const {\n+  if (_super_klass == NULL) {\n+    return false;\n@@ -6131,1 +6109,0 @@\n-}\n@@ -6133,5 +6110,3 @@\n-ReferenceType ClassFileParser::determine_reference_type() const {\n-  const ReferenceType rt = super_reference_type();\n-  if (rt != REF_NONE) {\n-    \/\/ Inherit type from super class\n-    return rt;\n+  if (_super_klass->name() == vmSymbols::java_lang_ref_Reference()) {\n+    \/\/ Direct subclass of j.l.r.Reference: Soft|Weak|Final|Phantom\n+    return true;\n@@ -6140,3 +6115,1 @@\n-  \/\/ Bootstrapping: this is one of the direct subclasses of java.lang.ref.Reference\n-  const Symbol* const name = class_name();\n-  return reference_subclass_name_to_type(name);\n+  return _super_klass->reference_type() != REF_NONE;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":7,"deletions":34,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -531,2 +531,0 @@\n-  ReferenceType super_reference_type() const;\n-  bool is_java_lang_ref_Reference_subclass() const;\n@@ -565,0 +563,1 @@\n+  ReferenceType super_reference_type() const;\n@@ -566,1 +565,1 @@\n-  ReferenceType determine_reference_type() const;\n+  bool is_java_lang_ref_Reference_subclass() const;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -500,1 +500,1 @@\n-InstanceKlass::InstanceKlass(const ClassFileParser& parser, KlassKind kind) :\n+InstanceKlass::InstanceKlass(const ClassFileParser& parser, KlassKind kind, ReferenceType reference_type) :\n@@ -511,1 +511,1 @@\n-  _reference_type(parser.determine_reference_type()),\n+  _reference_type(reference_type),\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-  InstanceKlass(const ClassFileParser& parser, KlassKind kind = Kind);\n+  InstanceKlass(const ClassFileParser& parser, KlassKind kind = Kind, ReferenceType reference_type = REF_NONE);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"classfile\/classFileParser.hpp\"\n@@ -28,0 +29,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n@@ -31,0 +33,30 @@\n+static ReferenceType reference_subclass_name_to_type(const Symbol* name) {\n+  if (       name == vmSymbols::java_lang_ref_SoftReference()) {\n+    return REF_SOFT;\n+  } else if (name == vmSymbols::java_lang_ref_WeakReference()) {\n+    return REF_WEAK;\n+  } else if (name == vmSymbols::java_lang_ref_FinalReference()) {\n+    return REF_FINAL;\n+  } else if (name == vmSymbols::java_lang_ref_PhantomReference()) {\n+    return REF_PHANTOM;\n+  } else {\n+    ShouldNotReachHere();\n+    return REF_NONE;\n+  }\n+}\n+\n+static ReferenceType determine_reference_type(const ClassFileParser& parser) {\n+  const ReferenceType rt = parser.super_reference_type();\n+  if (rt != REF_NONE) {\n+    \/\/ Inherit type from super class\n+    return rt;\n+  }\n+\n+  \/\/ Bootstrapping: this is one of the direct subclasses of java.lang.ref.Reference\n+  const Symbol* const name = parser.class_name();\n+  return reference_subclass_name_to_type(name);\n+}\n+\n+InstanceRefKlass::InstanceRefKlass(const ClassFileParser& parser)\n+  : InstanceKlass(parser, Kind, determine_reference_type(parser)) {}\n+\n","filename":"src\/hotspot\/share\/oops\/instanceRefKlass.cpp","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  InstanceRefKlass(const ClassFileParser& parser) : InstanceKlass(parser, Kind) {}\n+  InstanceRefKlass(const ClassFileParser& parser);\n","filename":"src\/hotspot\/share\/oops\/instanceRefKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}