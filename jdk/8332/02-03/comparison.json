{"files":[{"patch":"@@ -6078,0 +6078,9 @@\n+bool ClassFileParser::is_instance_ref_klass() const {\n+  \/\/ Only the subclasses of j.l.r.Reference are InstanceRefKlass.\n+  \/\/ j.l.r.Reference itself is InstanceKlass because InstanceRefKlass denotes a\n+  \/\/ klass requiring special treatment in ref-processing. The abstract\n+  \/\/ j.l.r.Reference cannot be instantiated so doesn't partake in\n+  \/\/ ref-processing.\n+  return is_java_lang_ref_Reference_subclass();\n+}\n+\n@@ -6084,0 +6093,1 @@\n+    \/\/ Direct subclass of j.l.r.Reference: Soft|Weak|Final|Phantom\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -564,0 +564,1 @@\n+  bool is_instance_ref_klass() const;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -181,4 +181,0 @@\n-  vmClasses::SoftReference_klass()->set_reference_type(REF_SOFT);\n-  vmClasses::WeakReference_klass()->set_reference_type(REF_WEAK);\n-  vmClasses::FinalReference_klass()->set_reference_type(REF_FINAL);\n-  vmClasses::PhantomReference_klass()->set_reference_type(REF_PHANTOM);\n","filename":"src\/hotspot\/share\/classfile\/vmClasses.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -441,1 +441,1 @@\n-  if (parser.is_java_lang_ref_Reference_subclass()) {\n+  if (parser.is_instance_ref_klass()) {\n@@ -497,1 +497,1 @@\n-  _reference_type(parser.super_reference_type()),\n+  _reference_type(REF_NONE),\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -577,0 +577,3 @@\n+\n+protected:\n+  \/\/ Only used by the InstanceRefKlass constructor\n@@ -582,0 +585,2 @@\n+public:\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"classfile\/classFileParser.hpp\"\n@@ -28,0 +29,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n@@ -31,0 +33,32 @@\n+static ReferenceType reference_subclass_name_to_type(const Symbol* name) {\n+  if (       name == vmSymbols::java_lang_ref_SoftReference()) {\n+    return REF_SOFT;\n+  } else if (name == vmSymbols::java_lang_ref_WeakReference()) {\n+    return REF_WEAK;\n+  } else if (name == vmSymbols::java_lang_ref_FinalReference()) {\n+    return REF_FINAL;\n+  } else if (name == vmSymbols::java_lang_ref_PhantomReference()) {\n+    return REF_PHANTOM;\n+  } else {\n+    ShouldNotReachHere();\n+    return REF_NONE;\n+  }\n+}\n+\n+static ReferenceType determine_reference_type(const ClassFileParser& parser) {\n+  const ReferenceType rt = parser.super_reference_type();\n+  if (rt != REF_NONE) {\n+    \/\/ Inherit type from super class\n+    return rt;\n+  }\n+\n+  \/\/ Bootstrapping: this is either of the four direct subclasses of java.lang.ref.Reference\n+  const Symbol* const name = parser.class_name();\n+  return reference_subclass_name_to_type(name);\n+}\n+\n+InstanceRefKlass::InstanceRefKlass(const ClassFileParser& parser) : InstanceKlass(parser, Kind) {\n+  const ReferenceType rt = determine_reference_type(parser);\n+  set_reference_type(rt);\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/instanceRefKlass.cpp","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  InstanceRefKlass(const ClassFileParser& parser) : InstanceKlass(parser, Kind) {}\n+  InstanceRefKlass(const ClassFileParser& parser);\n","filename":"src\/hotspot\/share\/oops\/instanceRefKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}