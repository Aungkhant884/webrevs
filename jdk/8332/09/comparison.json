{"files":[{"patch":"@@ -5580,1 +5580,0 @@\n-  _rt(REF_NONE),\n@@ -6061,4 +6060,0 @@\n-\n-  \/\/ Compute reference typ\n-  _rt = (NULL ==_super_klass) ? REF_NONE : _super_klass->reference_type();\n-\n@@ -6096,0 +6091,27 @@\n+\n+ReferenceType ClassFileParser::super_reference_type() const {\n+  return _super_klass == NULL ? REF_NONE : _super_klass->reference_type();\n+}\n+\n+bool ClassFileParser::is_instance_ref_klass() const {\n+  \/\/ Only the subclasses of j.l.r.Reference are InstanceRefKlass.\n+  \/\/ j.l.r.Reference itself is InstanceKlass because InstanceRefKlass denotes a\n+  \/\/ klass requiring special treatment in ref-processing. The abstract\n+  \/\/ j.l.r.Reference cannot be instantiated so doesn't partake in\n+  \/\/ ref-processing.\n+  return is_java_lang_ref_Reference_subclass();\n+}\n+\n+bool ClassFileParser::is_java_lang_ref_Reference_subclass() const {\n+  if (_super_klass == NULL) {\n+    return false;\n+  }\n+\n+  if (_super_klass->name() == vmSymbols::java_lang_ref_Reference()) {\n+    \/\/ Direct subclass of j.l.r.Reference: Soft|Weak|Final|Phantom\n+    return true;\n+  }\n+\n+  return _super_klass->reference_type() != REF_NONE;\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":27,"deletions":5,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -157,1 +157,0 @@\n-  ReferenceType _rt;\n@@ -564,1 +563,4 @@\n-  ReferenceType reference_type() const { return _rt; }\n+  ReferenceType super_reference_type() const;\n+  bool is_instance_ref_klass() const;\n+  bool is_java_lang_ref_Reference_subclass() const;\n+\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-    assert(vmClasses::Reference_klass()->reference_type() == REF_OTHER, \"sanity\");\n+    assert(vmClasses::Reference_klass()->reference_type() == REF_NONE, \"sanity\");\n@@ -189,1 +189,0 @@\n-    vmClasses::Reference_klass()->set_reference_type(REF_OTHER);\n@@ -193,4 +192,0 @@\n-    vmClasses::SoftReference_klass()->set_reference_type(REF_SOFT);\n-    vmClasses::WeakReference_klass()->set_reference_type(REF_WEAK);\n-    vmClasses::FinalReference_klass()->set_reference_type(REF_FINAL);\n-    vmClasses::PhantomReference_klass()->set_reference_type(REF_PHANTOM);\n","filename":"src\/hotspot\/share\/classfile\/vmClasses.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -440,1 +440,0 @@\n-    case REF_OTHER:\n@@ -843,2 +842,0 @@\n-    case REF_OTHER:\n-      \/\/ Unknown reference type, impossible\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessor.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -296,1 +296,1 @@\n-  static int number_of_subclasses_of_ref() { return (REF_PHANTOM - REF_OTHER); }\n+  static int number_of_subclasses_of_ref() { return (REF_PHANTOM - REF_NONE); }\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessor.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-       \"None\", \"Other\", \"SoftReference\", \"WeakReference\", \"FinalReference\", \"PhantomReference\"\n+       \"None\", \"SoftReference\", \"WeakReference\", \"FinalReference\", \"PhantomReference\"\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessorPhaseTimes.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  static const int number_of_subclasses_of_ref = REF_PHANTOM - REF_OTHER; \/\/ 5 - 1 = 4\n+  static const int number_of_subclasses_of_ref = REF_PHANTOM - REF_NONE; \/\/ 4 - 0 = 4\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessorPhaseTimes.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -222,1 +222,0 @@\n-    case REF_OTHER: return \"Other reference\";\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrType.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-  REF_OTHER,     \/\/ Subclass of java\/lang\/ref\/Reference, but not subclass of one of the classes below\n","filename":"src\/hotspot\/share\/memory\/referenceType.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -448,15 +448,1 @@\n-  if (REF_NONE == parser.reference_type()) {\n-    if (class_name == vmSymbols::java_lang_Class()) {\n-      \/\/ mirror - java.lang.Class\n-      ik = new (loader_data, size, THREAD) InstanceMirrorKlass(parser);\n-    } else if (is_stack_chunk_class(class_name, loader_data)) {\n-      \/\/ stack chunk\n-      ik = new (loader_data, size, THREAD) InstanceStackChunkKlass(parser);\n-    } else if (is_class_loader(class_name, parser)) {\n-      \/\/ class loader - java.lang.ClassLoader\n-      ik = new (loader_data, size, THREAD) InstanceClassLoaderKlass(parser);\n-    } else {\n-      \/\/ normal\n-      ik = new (loader_data, size, THREAD) InstanceKlass(parser);\n-    }\n-  } else {\n+  if (parser.is_instance_ref_klass()) {\n@@ -465,0 +451,12 @@\n+  } else if (class_name == vmSymbols::java_lang_Class()) {\n+    \/\/ mirror - java.lang.Class\n+    ik = new (loader_data, size, THREAD) InstanceMirrorKlass(parser);\n+  } else if (is_stack_chunk_class(class_name, loader_data)) {\n+    \/\/ stack chunk\n+    ik = new (loader_data, size, THREAD) InstanceStackChunkKlass(parser);\n+  } else if (is_class_loader(class_name, parser)) {\n+    \/\/ class loader - java.lang.ClassLoader\n+    ik = new (loader_data, size, THREAD) InstanceClassLoaderKlass(parser);\n+  } else {\n+    \/\/ normal\n+    ik = new (loader_data, size, THREAD) InstanceKlass(parser);\n@@ -502,1 +500,1 @@\n-InstanceKlass::InstanceKlass(const ClassFileParser& parser, KlassKind kind) :\n+InstanceKlass::InstanceKlass(const ClassFileParser& parser, KlassKind kind, ReferenceType reference_type) :\n@@ -513,1 +511,1 @@\n-  _reference_type(parser.reference_type()),\n+  _reference_type(reference_type),\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":15,"deletions":17,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-  InstanceKlass(const ClassFileParser& parser, KlassKind kind = Kind);\n+  InstanceKlass(const ClassFileParser& parser, KlassKind kind = Kind, ReferenceType reference_type = REF_NONE);\n@@ -595,4 +595,0 @@\n-  void set_reference_type(ReferenceType t) {\n-    assert(t == (u1)t, \"overflow\");\n-    _reference_type = (u1)t;\n-  }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"classfile\/classFileParser.hpp\"\n@@ -28,0 +29,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n@@ -31,0 +33,30 @@\n+static ReferenceType reference_subclass_name_to_type(const Symbol* name) {\n+  if (       name == vmSymbols::java_lang_ref_SoftReference()) {\n+    return REF_SOFT;\n+  } else if (name == vmSymbols::java_lang_ref_WeakReference()) {\n+    return REF_WEAK;\n+  } else if (name == vmSymbols::java_lang_ref_FinalReference()) {\n+    return REF_FINAL;\n+  } else if (name == vmSymbols::java_lang_ref_PhantomReference()) {\n+    return REF_PHANTOM;\n+  } else {\n+    ShouldNotReachHere();\n+    return REF_NONE;\n+  }\n+}\n+\n+static ReferenceType determine_reference_type(const ClassFileParser& parser) {\n+  const ReferenceType rt = parser.super_reference_type();\n+  if (rt != REF_NONE) {\n+    \/\/ Inherit type from super class\n+    return rt;\n+  }\n+\n+  \/\/ Bootstrapping: this is one of the direct subclasses of java.lang.ref.Reference\n+  const Symbol* const name = parser.class_name();\n+  return reference_subclass_name_to_type(name);\n+}\n+\n+InstanceRefKlass::InstanceRefKlass(const ClassFileParser& parser)\n+  : InstanceKlass(parser, Kind, determine_reference_type(parser)) {}\n+\n","filename":"src\/hotspot\/share\/oops\/instanceRefKlass.cpp","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  InstanceRefKlass(const ClassFileParser& parser) : InstanceKlass(parser, Kind) {}\n+  InstanceRefKlass(const ClassFileParser& parser);\n","filename":"src\/hotspot\/share\/oops\/instanceRefKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-  REF_OTHER (\"Other reference\"),     \/\/ Subclass of java\/lang\/ref\/Reference, but not subclass of one of the classes below\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/memory\/ReferenceType.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}