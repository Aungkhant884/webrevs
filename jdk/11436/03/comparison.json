{"files":[{"patch":"@@ -47,0 +47,7 @@\n+\n+ifeq ($(call isTargetOsType, unix), true)\n+  ifeq ($(call isTargetOs, macos aix), false)\n+    # This class is not needed on \"unix\" because SCTP in Java is supported for that platform\n+    EXCLUDE_FILES += $(TOPDIR)\/src\/jdk.sctp\/share\/classes\/sun\/nio\/ch\/sctp\/UnsupportedUtil.java\n+  endif\n+endif\n","filename":"make\/modules\/jdk.sctp\/Java.gmk","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,150 +0,0 @@\n-\/*\n- * Copyright (c) 2009, 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package sun.nio.ch.sctp;\n-\n-import java.net.SocketAddress;\n-import java.net.InetAddress;\n-import java.io.IOException;\n-import java.util.Set;\n-import java.nio.ByteBuffer;\n-import java.nio.channels.spi.SelectorProvider;\n-import com.sun.nio.sctp.Association;\n-import com.sun.nio.sctp.MessageInfo;\n-import com.sun.nio.sctp.NotificationHandler;\n-import com.sun.nio.sctp.SctpChannel;\n-import com.sun.nio.sctp.SctpSocketOption;\n-\n-\/**\n- * Unimplemented.\n- *\/\n-public class SctpChannelImpl extends SctpChannel\n-{\n-    private static final String message = \"SCTP not supported on this platform\";\n-\n-    public SctpChannelImpl(SelectorProvider provider) {\n-        super(provider);\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Association association() {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpChannel bind(SocketAddress local)\n-                            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpChannel bindAddress(InetAddress address)\n-         throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpChannel unbindAddress(InetAddress address)\n-         throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public boolean connect(SocketAddress remote) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public boolean connect(SocketAddress remote, int maxOutStreams,\n-       int maxInStreams) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public boolean isConnectionPending() {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public boolean finishConnect() throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SocketAddress> getAllLocalAddresses()\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SocketAddress> getRemoteAddresses()\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpChannel shutdown() throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> T getOption(SctpSocketOption<T> name)\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> SctpChannel setOption(SctpSocketOption<T> name, T value)\n-        throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SctpSocketOption<?>> supportedOptions() {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> MessageInfo receive(ByteBuffer dst, T attachment,\n-            NotificationHandler<T> handler) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public int send(ByteBuffer src, MessageInfo messageInfo)\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    protected void implConfigureBlocking(boolean block) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public void implCloseSelectableChannel() throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-}\n","filename":"src\/jdk.sctp\/aix\/classes\/sun\/nio\/ch\/sctp\/SctpChannelImpl.java","additions":0,"deletions":150,"binary":false,"changes":150,"status":"deleted"},{"patch":"@@ -1,137 +0,0 @@\n-\/*\n- * Copyright (c) 2009, 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package sun.nio.ch.sctp;\n-\n-import java.net.SocketAddress;\n-import java.net.InetAddress;\n-import java.io.IOException;\n-import java.util.Set;\n-import java.nio.ByteBuffer;\n-import java.nio.channels.spi.SelectorProvider;\n-import com.sun.nio.sctp.Association;\n-import com.sun.nio.sctp.SctpChannel;\n-import com.sun.nio.sctp.MessageInfo;\n-import com.sun.nio.sctp.NotificationHandler;\n-import com.sun.nio.sctp.SctpMultiChannel;\n-import com.sun.nio.sctp.SctpSocketOption;\n-\n-\/**\n- * Unimplemented.\n- *\/\n-public class SctpMultiChannelImpl extends SctpMultiChannel\n-{\n-    private static final String message = \"SCTP not supported on this platform\";\n-\n-    public SctpMultiChannelImpl(SelectorProvider provider) {\n-        super(provider);\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<Association> associations() {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpMultiChannel bind(SocketAddress local,\n-            int backlog) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpMultiChannel bindAddress(InetAddress address)\n-         throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpMultiChannel unbindAddress(InetAddress address)\n-         throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SocketAddress> getAllLocalAddresses()\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SocketAddress> getRemoteAddresses\n-            (Association association) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpMultiChannel shutdown(Association association)\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> T getOption(SctpSocketOption<T> name,\n-            Association association) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> SctpMultiChannel setOption(SctpSocketOption<T> name,\n-            T value, Association association) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SctpSocketOption<?>> supportedOptions() {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> MessageInfo receive(ByteBuffer buffer, T attachment,\n-            NotificationHandler<T> handler) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public int send(ByteBuffer buffer, MessageInfo messageInfo)\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpChannel branch(Association association)\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    protected void implConfigureBlocking(boolean block) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public void implCloseSelectableChannel() throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-}\n","filename":"src\/jdk.sctp\/aix\/classes\/sun\/nio\/ch\/sctp\/SctpMultiChannelImpl.java","additions":0,"deletions":137,"binary":false,"changes":137,"status":"deleted"},{"patch":"@@ -1,102 +0,0 @@\n-\/*\n- * Copyright (c) 2009, 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package sun.nio.ch.sctp;\n-\n-import java.net.SocketAddress;\n-import java.net.InetAddress;\n-import java.io.IOException;\n-import java.util.Set;\n-import java.nio.channels.spi.SelectorProvider;\n-import com.sun.nio.sctp.SctpChannel;\n-import com.sun.nio.sctp.SctpServerChannel;\n-import com.sun.nio.sctp.SctpSocketOption;\n-\n-\/**\n- * Unimplemented.\n- *\/\n-public class SctpServerChannelImpl extends SctpServerChannel\n-{\n-    private static final String message = \"SCTP not supported on this platform\";\n-\n-    public SctpServerChannelImpl(SelectorProvider provider) {\n-        super(provider);\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpChannel accept() throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpServerChannel bind(SocketAddress local,\n-            int backlog) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpServerChannel bindAddress(InetAddress address)\n-         throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpServerChannel unbindAddress(InetAddress address)\n-         throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SocketAddress> getAllLocalAddresses()\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> T getOption(SctpSocketOption<T> name) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> SctpServerChannel setOption(SctpSocketOption<T> name,\n-            T value) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SctpSocketOption<?>> supportedOptions() {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    protected void implConfigureBlocking(boolean block) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public void implCloseSelectableChannel() throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-}\n","filename":"src\/jdk.sctp\/aix\/classes\/sun\/nio\/ch\/sctp\/SctpServerChannelImpl.java","additions":0,"deletions":102,"binary":false,"changes":102,"status":"deleted"},{"patch":"@@ -1,150 +0,0 @@\n-\/*\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package sun.nio.ch.sctp;\n-\n-import java.net.SocketAddress;\n-import java.net.InetAddress;\n-import java.io.IOException;\n-import java.util.Set;\n-import java.nio.ByteBuffer;\n-import java.nio.channels.spi.SelectorProvider;\n-import com.sun.nio.sctp.Association;\n-import com.sun.nio.sctp.MessageInfo;\n-import com.sun.nio.sctp.NotificationHandler;\n-import com.sun.nio.sctp.SctpChannel;\n-import com.sun.nio.sctp.SctpSocketOption;\n-\n-\/**\n- * Unimplemented.\n- *\/\n-public class SctpChannelImpl extends SctpChannel\n-{\n-    private static final String message = \"SCTP not supported on this platform\";\n-\n-    public SctpChannelImpl(SelectorProvider provider) {\n-        super(provider);\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Association association() {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpChannel bind(SocketAddress local)\n-                            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpChannel bindAddress(InetAddress address)\n-         throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpChannel unbindAddress(InetAddress address)\n-         throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public boolean connect(SocketAddress remote) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public boolean connect(SocketAddress remote, int maxOutStreams,\n-       int maxInStreams) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public boolean isConnectionPending() {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public boolean finishConnect() throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SocketAddress> getAllLocalAddresses()\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SocketAddress> getRemoteAddresses()\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpChannel shutdown() throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> T getOption(SctpSocketOption<T> name)\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> SctpChannel setOption(SctpSocketOption<T> name, T value)\n-        throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SctpSocketOption<?>> supportedOptions() {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> MessageInfo receive(ByteBuffer dst, T attachment,\n-            NotificationHandler<T> handler) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public int send(ByteBuffer src, MessageInfo messageInfo)\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    protected void implConfigureBlocking(boolean block) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public void implCloseSelectableChannel() throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-}\n","filename":"src\/jdk.sctp\/macosx\/classes\/sun\/nio\/ch\/sctp\/SctpChannelImpl.java","additions":0,"deletions":150,"binary":false,"changes":150,"status":"deleted"},{"patch":"@@ -1,137 +0,0 @@\n-\/*\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package sun.nio.ch.sctp;\n-\n-import java.net.SocketAddress;\n-import java.net.InetAddress;\n-import java.io.IOException;\n-import java.util.Set;\n-import java.nio.ByteBuffer;\n-import java.nio.channels.spi.SelectorProvider;\n-import com.sun.nio.sctp.Association;\n-import com.sun.nio.sctp.SctpChannel;\n-import com.sun.nio.sctp.MessageInfo;\n-import com.sun.nio.sctp.NotificationHandler;\n-import com.sun.nio.sctp.SctpMultiChannel;\n-import com.sun.nio.sctp.SctpSocketOption;\n-\n-\/**\n- * Unimplemented.\n- *\/\n-public class SctpMultiChannelImpl extends SctpMultiChannel\n-{\n-    private static final String message = \"SCTP not supported on this platform\";\n-\n-    public SctpMultiChannelImpl(SelectorProvider provider) {\n-        super(provider);\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<Association> associations() {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpMultiChannel bind(SocketAddress local,\n-            int backlog) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpMultiChannel bindAddress(InetAddress address)\n-         throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpMultiChannel unbindAddress(InetAddress address)\n-         throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SocketAddress> getAllLocalAddresses()\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SocketAddress> getRemoteAddresses\n-            (Association association) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpMultiChannel shutdown(Association association)\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> T getOption(SctpSocketOption<T> name,\n-            Association association) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> SctpMultiChannel setOption(SctpSocketOption<T> name,\n-            T value, Association association) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SctpSocketOption<?>> supportedOptions() {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> MessageInfo receive(ByteBuffer buffer, T attachment,\n-            NotificationHandler<T> handler) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public int send(ByteBuffer buffer, MessageInfo messageInfo)\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpChannel branch(Association association)\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    protected void implConfigureBlocking(boolean block) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public void implCloseSelectableChannel() throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-}\n","filename":"src\/jdk.sctp\/macosx\/classes\/sun\/nio\/ch\/sctp\/SctpMultiChannelImpl.java","additions":0,"deletions":137,"binary":false,"changes":137,"status":"deleted"},{"patch":"@@ -1,102 +0,0 @@\n-\/*\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package sun.nio.ch.sctp;\n-\n-import java.net.SocketAddress;\n-import java.net.InetAddress;\n-import java.io.IOException;\n-import java.util.Set;\n-import java.nio.channels.spi.SelectorProvider;\n-import com.sun.nio.sctp.SctpChannel;\n-import com.sun.nio.sctp.SctpServerChannel;\n-import com.sun.nio.sctp.SctpSocketOption;\n-\n-\/**\n- * Unimplemented.\n- *\/\n-public class SctpServerChannelImpl extends SctpServerChannel\n-{\n-    private static final String message = \"SCTP not supported on this platform\";\n-\n-    public SctpServerChannelImpl(SelectorProvider provider) {\n-        super(provider);\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpChannel accept() throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpServerChannel bind(SocketAddress local,\n-            int backlog) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpServerChannel bindAddress(InetAddress address)\n-         throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpServerChannel unbindAddress(InetAddress address)\n-         throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SocketAddress> getAllLocalAddresses()\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> T getOption(SctpSocketOption<T> name) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> SctpServerChannel setOption(SctpSocketOption<T> name,\n-            T value) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SctpSocketOption<?>> supportedOptions() {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    protected void implConfigureBlocking(boolean block) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public void implCloseSelectableChannel() throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-}\n","filename":"src\/jdk.sctp\/macosx\/classes\/sun\/nio\/ch\/sctp\/SctpServerChannelImpl.java","additions":0,"deletions":102,"binary":false,"changes":102,"status":"deleted"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package sun.nio.ch.sctp;\n+\n+import com.sun.nio.sctp.Association;\n+import com.sun.nio.sctp.MessageInfo;\n+import com.sun.nio.sctp.NotificationHandler;\n+import com.sun.nio.sctp.SctpChannel;\n+import com.sun.nio.sctp.SctpSocketOption;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.SocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.spi.SelectorProvider;\n+import java.util.Set;\n+\n+\/**\n+ * Unimplemented.\n+ *\/\n+public class SctpChannelImpl\n+        extends SctpChannel {\n+\n+    public SctpChannelImpl(SelectorProvider provider) {\n+        super(provider);\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public Association association() {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public SctpChannel bind(SocketAddress local) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public SctpChannel bindAddress(InetAddress address) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public SctpChannel unbindAddress(InetAddress address) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public boolean connect(SocketAddress remote) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public boolean connect(SocketAddress remote,\n+                           int maxOutStreams,\n+                           int maxInStreams) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public boolean isConnectionPending() {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public boolean finishConnect() throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public Set<SocketAddress> getAllLocalAddresses() throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public Set<SocketAddress> getRemoteAddresses() throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public SctpChannel shutdown() throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public <T> T getOption(SctpSocketOption<T> name) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public <T> SctpChannel setOption(SctpSocketOption<T> name,\n+                                     T value) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public Set<SctpSocketOption<?>> supportedOptions() {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public <T> MessageInfo receive(ByteBuffer dst,\n+                                   T attachment,\n+                                   NotificationHandler<T> handler) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public int send(ByteBuffer src,\n+                    MessageInfo messageInfo) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    protected void implConfigureBlocking(boolean block) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public void implCloseSelectableChannel() throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+}\n","filename":"src\/jdk.sctp\/share\/classes\/sun\/nio\/ch\/sctp\/SctpChannelImpl.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package sun.nio.ch.sctp;\n+\n+import com.sun.nio.sctp.Association;\n+import com.sun.nio.sctp.MessageInfo;\n+import com.sun.nio.sctp.NotificationHandler;\n+import com.sun.nio.sctp.SctpChannel;\n+import com.sun.nio.sctp.SctpMultiChannel;\n+import com.sun.nio.sctp.SctpSocketOption;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.SocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.spi.SelectorProvider;\n+import java.util.Set;\n+\n+\/**\n+ * Unimplemented.\n+ *\/\n+public class SctpMultiChannelImpl\n+        extends SctpMultiChannel {\n+\n+    public SctpMultiChannelImpl(SelectorProvider provider) {\n+        super(provider);\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public Set<Association> associations() {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public SctpMultiChannel bind(SocketAddress local,\n+                                 int backlog) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public SctpMultiChannel bindAddress(InetAddress address) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public SctpMultiChannel unbindAddress(InetAddress address) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public Set<SocketAddress> getAllLocalAddresses() throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public Set<SocketAddress> getRemoteAddresses(Association association) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public SctpMultiChannel shutdown(Association association) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public <T> T getOption(SctpSocketOption<T> name,\n+                           Association association) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public <T> SctpMultiChannel setOption(SctpSocketOption<T> name,\n+                                          T value,\n+                                          Association association) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public Set<SctpSocketOption<?>> supportedOptions() {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public <T> MessageInfo receive(ByteBuffer buffer,\n+                                   T attachment,\n+                                   NotificationHandler<T> handler) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public int send(ByteBuffer buffer,\n+                    MessageInfo messageInfo) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public SctpChannel branch(Association association) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    protected void implConfigureBlocking(boolean block) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public void implCloseSelectableChannel() throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+}\n","filename":"src\/jdk.sctp\/share\/classes\/sun\/nio\/ch\/sctp\/SctpMultiChannelImpl.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package sun.nio.ch.sctp;\n+\n+import com.sun.nio.sctp.SctpChannel;\n+import com.sun.nio.sctp.SctpServerChannel;\n+import com.sun.nio.sctp.SctpSocketOption;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.SocketAddress;\n+import java.nio.channels.spi.SelectorProvider;\n+import java.util.Set;\n+\n+\/**\n+ * Unimplemented.\n+ *\/\n+public class SctpServerChannelImpl\n+        extends SctpServerChannel {\n+\n+    public SctpServerChannelImpl(SelectorProvider provider) {\n+        super(provider);\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public SctpChannel accept() throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public SctpServerChannel bind(SocketAddress local,\n+                                  int backlog) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public SctpServerChannel bindAddress(InetAddress address) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public SctpServerChannel unbindAddress(InetAddress address) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public Set<SocketAddress> getAllLocalAddresses() throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public <T> T getOption(SctpSocketOption<T> name) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public <T> SctpServerChannel setOption(SctpSocketOption<T> name,\n+                                           T value) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public Set<SctpSocketOption<?>> supportedOptions() {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    protected void implConfigureBlocking(boolean block) throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+\n+    @Override\n+    public void implCloseSelectableChannel() throws IOException {\n+        throw UnsupportedUtil.sctpUnsupported();\n+    }\n+}\n","filename":"src\/jdk.sctp\/share\/classes\/sun\/nio\/ch\/sctp\/SctpServerChannelImpl.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.nio.ch.sctp;\n+\n+\/**\n+ * Utility class used by implementations on platforms <em>not<\/em> supporting SCTP.\n+ * <p>\n+ * This class is not present on the \"unix\" platform because unix can support SCTP.\n+ *\/\n+public final class UnsupportedUtil {\n+\n+    private static final String MESSAGE = \"SCTP not supported on this platform\";\n+\n+    \/\/ Suppresses default constructor, ensuring non-instantiability.\n+    private UnsupportedUtil() {}\n+\n+    static UnsupportedOperationException sctpUnsupported() {\n+        return new UnsupportedOperationException(MESSAGE);\n+    }\n+\n+}\n","filename":"src\/jdk.sctp\/share\/classes\/sun\/nio\/ch\/sctp\/UnsupportedUtil.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -44,1 +44,0 @@\n-import sun.nio.ch.DirectBuffer;\n@@ -51,1 +50,0 @@\n-import sun.nio.ch.Util;\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpServerChannelImpl.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,150 +0,0 @@\n-\/*\n- * Copyright (c) 2009, 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package sun.nio.ch.sctp;\n-\n-import java.net.SocketAddress;\n-import java.net.InetAddress;\n-import java.io.IOException;\n-import java.util.Set;\n-import java.nio.ByteBuffer;\n-import java.nio.channels.spi.SelectorProvider;\n-import com.sun.nio.sctp.Association;\n-import com.sun.nio.sctp.MessageInfo;\n-import com.sun.nio.sctp.NotificationHandler;\n-import com.sun.nio.sctp.SctpChannel;\n-import com.sun.nio.sctp.SctpSocketOption;\n-\n-\/**\n- * Unimplemented.\n- *\/\n-public class SctpChannelImpl extends SctpChannel\n-{\n-    private static final String message = \"SCTP not supported on this platform\";\n-\n-    public SctpChannelImpl(SelectorProvider provider) {\n-        super(provider);\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Association association() {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpChannel bind(SocketAddress local)\n-                            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpChannel bindAddress(InetAddress address)\n-         throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpChannel unbindAddress(InetAddress address)\n-         throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public boolean connect(SocketAddress remote) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public boolean connect(SocketAddress remote, int maxOutStreams,\n-       int maxInStreams) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public boolean isConnectionPending() {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public boolean finishConnect() throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SocketAddress> getAllLocalAddresses()\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SocketAddress> getRemoteAddresses()\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpChannel shutdown() throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> T getOption(SctpSocketOption<T> name)\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> SctpChannel setOption(SctpSocketOption<T> name, T value)\n-        throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SctpSocketOption<?>> supportedOptions() {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> MessageInfo receive(ByteBuffer dst, T attachment,\n-            NotificationHandler<T> handler) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public int send(ByteBuffer src, MessageInfo messageInfo)\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    protected void implConfigureBlocking(boolean block) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public void implCloseSelectableChannel() throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-}\n","filename":"src\/jdk.sctp\/windows\/classes\/sun\/nio\/ch\/sctp\/SctpChannelImpl.java","additions":0,"deletions":150,"binary":false,"changes":150,"status":"deleted"},{"patch":"@@ -1,137 +0,0 @@\n-\/*\n- * Copyright (c) 2009, 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package sun.nio.ch.sctp;\n-\n-import java.net.SocketAddress;\n-import java.net.InetAddress;\n-import java.io.IOException;\n-import java.util.Set;\n-import java.nio.ByteBuffer;\n-import java.nio.channels.spi.SelectorProvider;\n-import com.sun.nio.sctp.Association;\n-import com.sun.nio.sctp.SctpChannel;\n-import com.sun.nio.sctp.MessageInfo;\n-import com.sun.nio.sctp.NotificationHandler;\n-import com.sun.nio.sctp.SctpMultiChannel;\n-import com.sun.nio.sctp.SctpSocketOption;\n-\n-\/**\n- * Unimplemented.\n- *\/\n-public class SctpMultiChannelImpl extends SctpMultiChannel\n-{\n-    private static final String message = \"SCTP not supported on this platform\";\n-\n-    public SctpMultiChannelImpl(SelectorProvider provider) {\n-        super(provider);\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<Association> associations() {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpMultiChannel bind(SocketAddress local,\n-            int backlog) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpMultiChannel bindAddress(InetAddress address)\n-         throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpMultiChannel unbindAddress(InetAddress address)\n-         throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SocketAddress> getAllLocalAddresses()\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SocketAddress> getRemoteAddresses\n-            (Association association) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpMultiChannel shutdown(Association association)\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> T getOption(SctpSocketOption<T> name,\n-            Association association) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> SctpMultiChannel setOption(SctpSocketOption<T> name,\n-            T value, Association association) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SctpSocketOption<?>> supportedOptions() {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> MessageInfo receive(ByteBuffer buffer, T attachment,\n-            NotificationHandler<T> handler) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public int send(ByteBuffer buffer, MessageInfo messageInfo)\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpChannel branch(Association association)\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    protected void implConfigureBlocking(boolean block) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public void implCloseSelectableChannel() throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-}\n","filename":"src\/jdk.sctp\/windows\/classes\/sun\/nio\/ch\/sctp\/SctpMultiChannelImpl.java","additions":0,"deletions":137,"binary":false,"changes":137,"status":"deleted"},{"patch":"@@ -1,102 +0,0 @@\n-\/*\n- * Copyright (c) 2009, 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package sun.nio.ch.sctp;\n-\n-import java.net.SocketAddress;\n-import java.net.InetAddress;\n-import java.io.IOException;\n-import java.util.Set;\n-import java.nio.channels.spi.SelectorProvider;\n-import com.sun.nio.sctp.SctpChannel;\n-import com.sun.nio.sctp.SctpServerChannel;\n-import com.sun.nio.sctp.SctpSocketOption;\n-\n-\/**\n- * Unimplemented.\n- *\/\n-public class SctpServerChannelImpl extends SctpServerChannel\n-{\n-    private static final String message = \"SCTP not supported on this platform\";\n-\n-    public SctpServerChannelImpl(SelectorProvider provider) {\n-        super(provider);\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpChannel accept() throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpServerChannel bind(SocketAddress local,\n-            int backlog) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpServerChannel bindAddress(InetAddress address)\n-         throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public SctpServerChannel unbindAddress(InetAddress address)\n-         throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SocketAddress> getAllLocalAddresses()\n-            throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> T getOption(SctpSocketOption<T> name) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public <T> SctpServerChannel setOption(SctpSocketOption<T> name,\n-            T value) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public Set<SctpSocketOption<?>> supportedOptions() {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    protected void implConfigureBlocking(boolean block) throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-\n-    @Override\n-    public void implCloseSelectableChannel() throws IOException {\n-        throw new UnsupportedOperationException(message);\n-    }\n-}\n","filename":"src\/jdk.sctp\/windows\/classes\/sun\/nio\/ch\/sctp\/SctpServerChannelImpl.java","additions":0,"deletions":102,"binary":false,"changes":102,"status":"deleted"}]}