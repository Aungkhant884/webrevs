{"files":[{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8289551\n+ * @summary Verify NaN sign and significand bits are preserved across conversions\n+ *\/\n+\n+import static java.lang.Float.*;\n+\n+\/*\n+ * The behavior tested below is an implementation property not\n+ * required by the specification. It would be acceptable for this\n+ * information to not be preserved (as long as a NaN is returned) if,\n+ * say, a intrinsified version using native hardware instructions\n+ * behaved differently.\n+ *\n+ * If that is the case, this test should be modified to disable\n+ * intrinsics or to otherwise not run on platforms with an differently\n+ * behaving intrinsic.\n+ *\/\n+public class FloatBinary16NaN {\n+    public static void main(String... argv) {\n+        int errors = 0;\n+        errors += binary16NaNRoundTrip();\n+\n+        if (errors > 0)\n+            throw new RuntimeException(errors + \" errors\");\n+    }\n+\n+    \/*\n+     * Put all 16-bit NaN values through a conversion loop and make\n+     * sure the significand, sign, and exponent are all preserved.\n+     *\/\n+    private static int binary16NaNRoundTrip() {\n+        int errors = 0;\n+        final int NAN_EXPONENT = 0x7c00;\n+        final int SIGN_BIT     = 0x8000;\n+\n+        \/\/ A NaN has a nonzero significand\n+        for (int i = 1; i < 0x3ff; i++) {\n+            errors += testRoundTrip(           NAN_EXPONENT | i);\n+            errors += testRoundTrip(SIGN_BIT | NAN_EXPONENT | i);\n+        }\n+        return errors;\n+    }\n+\n+    private static int testRoundTrip(int i) {\n+        int errors = 0;\n+        short s = (short)i;\n+        float f =  Float.binary16AsShortBitsToFloat(s);\n+        short s2 = Float.floatToBinary16AsShortBits(f);\n+\n+        if (s != s2) {\n+            errors++;\n+            System.out.println(\"Roundtrip failure on NaN value \" +\n+                               Integer.toHexString(0xFFFF & (int)s) +\n+                               \"\\t got back \" + Integer.toHexString(0xFFFF & (int)s2));\n+        }\n+        return errors;\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Float\/FloatBinary16NaN.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}