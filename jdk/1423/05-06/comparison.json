{"files":[{"patch":"@@ -203,0 +203,4 @@\n+bool JVMCIGlobals::gc_supports_jvmci() {\n+  return UseSerialGC || UseParallelGC || UseG1GC;\n+}\n+\n@@ -206,1 +210,1 @@\n-    if (!(UseSerialGC || UseParallelGC || UseG1GC)) {\n+    if (!gc_supports_jvmci()) {\n","filename":"src\/hotspot\/share\/jvmci\/jvmci_globals.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -158,0 +158,3 @@\n+  \/\/ Returns true iff the GC fully supports JVMCI.\n+  static bool gc_supports_jvmci();\n+\n","filename":"src\/hotspot\/share\/jvmci\/jvmci_globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -361,1 +361,1 @@\n-WB_ENTRY(jboolean, WB_IsGCSupportedByJVMCI(JNIEnv* env, jobject o, jint name))\n+WB_ENTRY(jboolean, WB_IsGCSupportedByJVMCICompiler(JNIEnv* env, jobject o, jint name))\n@@ -1956,0 +1956,8 @@\n+WB_ENTRY(jboolean, WB_IsJVMCISupportedByGC(JNIEnv* env))\n+#if INCLUDE_JVMCI\n+  return JVMCIGlobals::gc_supports_jvmci();\n+#else\n+  return false;\n+#endif\n+WB_END\n+\n@@ -2519,0 +2527,1 @@\n+  {CC\"isJVMCISupportedByGC\",              CC\"()Z\",    (void*)&WB_IsJVMCISupportedByGC},\n@@ -2531,1 +2540,1 @@\n-  {CC\"isGCSupportedByJVMCI\",      CC\"(I)Z\",           (void*)&WB_IsGCSupportedByJVMCI},\n+  {CC\"isGCSupportedByJVMCICompiler\", CC\"(I)Z\",        (void*)&WB_IsGCSupportedByJVMCICompiler},\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -238,1 +238,10 @@\n-        return WB.getBooleanVMFlag(\"EnableJVMCI\") != null ? \"true\" : \"false\";\n+        if (WB.getBooleanVMFlag(\"EnableJVMCI\") == null) {\n+            return \"false\";\n+        }\n+\n+        \/\/ Not all GCs have full JVMCI support\n+        if (!WB.isJVMCISupportedByGC()) {\n+          return \"false\";\n+        }\n+\n+        return \"true\";\n@@ -269,2 +278,1 @@\n-        Boolean flag = WB.getBooleanVMFlag(\"EnableJVMCI\");\n-        var isJVMCIEnabled = flag != null && flag;\n+        var isJVMCIEnabled = Compiler.isJVMCIEnabled();\n@@ -274,1 +282,1 @@\n-                            && (!isJVMCIEnabled || gc.isSupportedByJVMCI())\n+                            && (!isJVMCIEnabled || gc.isSupportedByJVMCICompiler())\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -235,0 +235,1 @@\n+  public native boolean isJVMCISupportedByGC();\n@@ -418,1 +419,1 @@\n-  public native boolean isGCSupportedByJVMCI(int name);\n+  public native boolean isGCSupportedByJVMCICompiler(int name);\n","filename":"test\/lib\/sun\/hotspot\/WhiteBox.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,0 +46,14 @@\n+    \/**\n+     * Check if JVMCI is enabled.\n+     *\n+     * @return true if JVMCI is enabled\n+     *\/\n+    public static boolean isJVMCIEnabled() {\n+        Boolean enableJvmci = WB.getBooleanVMFlag(\"EnableJVMCI\");\n+        if (enableJvmci == null || !enableJvmci) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n","filename":"test\/lib\/sun\/hotspot\/code\/Compiler.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -59,2 +59,1 @@\n-     * @return true if this GC is supported by JVMCI.\n-     * @throws UnsupportedOperationException if JVMCI is not built into the VM or EnableJVMCI is false\n+     * @return true if this GC is supported by the JVMCI compiler\n@@ -62,2 +61,2 @@\n-    public boolean isSupportedByJVMCI() {\n-        return WB.isGCSupportedByJVMCI(name);\n+    public boolean isSupportedByJVMCICompiler() {\n+        return WB.isGCSupportedByJVMCICompiler(name);\n","filename":"test\/lib\/sun\/hotspot\/gc\/GC.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}