{"files":[{"patch":"@@ -31,4 +31,0 @@\n-#if INCLUDE_JVMCI\n-#include \"jvmci\/jvmciEnv.hpp\"\n-#include \"jvmci\/jvmciRuntime.hpp\"\n-#endif\n@@ -189,9 +185,0 @@\n-#if INCLUDE_JVMCI\n-      if (EnableJVMCI) {\n-        JavaThread *thread = JavaThread::current();\n-        JVMCIEnv jvmciEnv(thread, thread->jni_environment(), __FILE__, __LINE__);\n-        if (!jvmciEnv.runtime()->is_gc_supported(&jvmciEnv, (CollectedHeap::Name)name)) {\n-          return false;\n-        }\n-      }\n-#endif\n","filename":"src\/hotspot\/share\/gc\/shared\/gcConfig.cpp","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -110,0 +110,4 @@\n+#if INCLUDE_JVMCI\n+#include \"jvmci\/jvmciEnv.hpp\"\n+#include \"jvmci\/jvmciRuntime.hpp\"\n+#endif\n@@ -357,0 +361,10 @@\n+WB_ENTRY(jboolean, WB_IsGCSupportedByJVMCI(JNIEnv* env, jobject o, jint name))\n+#if INCLUDE_JVMCI\n+  if (EnableJVMCI) {\n+    JVMCIEnv jvmciEnv(thread, env, __FILE__, __LINE__);\n+    return jvmciEnv.runtime()->is_gc_supported(&jvmciEnv, (CollectedHeap::Name)name);\n+  }\n+#endif\n+  THROW_MSG_0(vmSymbols::java_lang_UnsupportedOperationException(), \"WB_IsGCSupportedByJVMCI: JVMCI must be included and EnableJVMCI must be true\");\n+WB_END\n+\n@@ -2517,0 +2531,1 @@\n+  {CC\"isGCSupportedByJVMCI\",      CC\"(I)Z\",           (void*)&WB_IsGCSupportedByJVMCI},\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import org.graalvm.compiler.hotspot.HotSpotGraalRuntime.HotSpotGC;\n@@ -326,0 +327,9 @@\n+\n+    @Override\n+    public boolean isGCSupported(int gcIdentifier) {\n+        HotSpotGC gc = HotSpotGC.forName(gcIdentifier, graalRuntime.getVMConfig());\n+        if (gc != null) {\n+            return gc.supported;\n+        }\n+        return false;\n+    }\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.hotspot\/src\/org\/graalvm\/compiler\/hotspot\/HotSpotGraalCompiler.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -250,1 +250,2 @@\n-     * Constants denoting the GC algorithms available in HotSpot.\n+     * Constants denoting the GC algorithms available in HotSpot. The names of the constants match\n+     * the constants in the {@code CollectedHeap::Name} C++ enum.\n@@ -254,4 +255,4 @@\n-        Serial(true, \"UseSerialGC\", true),\n-        Parallel(true, \"UseParallelGC\", true, \"UseParallelOldGC\", JDK < 15, \"UseParNewGC\", JDK < 10),\n-        CMS(true, \"UseConcMarkSweepGC\", JDK < 14),\n-        G1(true, \"UseG1GC\", true),\n+        Serial(true, JDK >= 11, \"UseSerialGC\", true),\n+        Parallel(true, JDK >= 11, \"UseParallelGC\", true, \"UseParallelOldGC\", JDK < 15, \"UseParNewGC\", JDK < 10),\n+        CMS(true, JDK >= 11 && JDK <= 14, \"UseConcMarkSweepGC\", JDK < 14),\n+        G1(true, JDK >= 11, \"UseG1GC\", true),\n@@ -260,2 +261,3 @@\n-        Epsilon(false, \"UseEpsilonGC\", JDK >= 11),\n-        Z(false, \"UseZGC\", JDK >= 11);\n+        Epsilon(false, JDK >= 11, \"UseEpsilonGC\", JDK >= 11),\n+        Z(false, JDK >= 11, \"UseZGC\", JDK >= 11),\n+        Shenandoah(false, JDK >= 12, \"UseShenandoahGC\", JDK >= 12);\n@@ -263,1 +265,1 @@\n-        HotSpotGC(boolean supported,\n+        HotSpotGC(boolean supported, boolean expectNamePresent,\n@@ -268,0 +270,1 @@\n+            this.expectNamePresent = expectNamePresent;\n@@ -272,1 +275,1 @@\n-        HotSpotGC(boolean supported, String flag, boolean expectFlagPresent) {\n+        HotSpotGC(boolean supported, boolean expectNamePresent, String flag, boolean expectFlagPresent) {\n@@ -274,0 +277,1 @@\n+            this.expectNamePresent = expectNamePresent;\n@@ -278,0 +282,3 @@\n+        \/**\n+         * Specifies if this GC supported by Graal.\n+         *\/\n@@ -279,1 +286,10 @@\n-        final boolean[] expectFlagsPresent;\n+\n+        \/**\n+         * Specifies if {@link #name()} is expected to be present in the {@code CollectedHeap::Name}\n+         * C++ enum.\n+         *\/\n+        final boolean expectNamePresent;\n+\n+        \/**\n+         * The VM flags that will select this GC.\n+         *\/\n@@ -282,0 +298,5 @@\n+        \/**\n+         * Specifies which {@link #flags} are expected to be present in the VM.\n+         *\/\n+        final boolean[] expectFlagsPresent;\n+\n@@ -296,0 +317,14 @@\n+\n+        \/**\n+         * Gets the GC matching {@code name}.\n+         *\n+         * @param name the ordinal of a {@code CollectedHeap::Name} value\n+         *\/\n+        static HotSpotGC forName(int name, GraalHotSpotVMConfig config) {\n+            for (HotSpotGC gc : HotSpotGC.values()) {\n+                if (config.getConstant(\"CollectedHeap::\" + gc.name(), Integer.class, -1, gc.expectNamePresent) == name) {\n+                    return gc;\n+                }\n+            }\n+            return null;\n+        }\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.hotspot\/src\/org\/graalvm\/compiler\/hotspot\/HotSpotGraalRuntime.java","additions":45,"deletions":10,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -259,15 +259,0 @@\n-    private boolean isGcSupportedByGraal(GC gc) {\n-        switch (gc) {\n-            case Serial:\n-            case Parallel:\n-            case G1:\n-                return true;\n-            case Epsilon:\n-            case Z:\n-            case Shenandoah:\n-                return false;\n-            default:\n-                throw new IllegalStateException(\"Unknown GC \" + gc.name());\n-        }\n-    }\n-\n@@ -284,1 +269,2 @@\n-        var isGraalEnabled = Compiler.isGraalEnabled();\n+        Boolean flag = WB.getBooleanVMFlag(\"EnableJVMCI\");\n+        var isJVMCIEnabled = flag != null && flag;\n@@ -288,1 +274,1 @@\n-                            && (!isGraalEnabled || isGcSupportedByGraal(gc))\n+                            && (!isJVMCIEnabled || gc.isSupportedByJVMCI())\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -418,0 +418,1 @@\n+  public native boolean isGCSupportedByJVMCI(int name);\n","filename":"test\/lib\/sun\/hotspot\/WhiteBox.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -58,0 +58,8 @@\n+    \/**\n+     * @return true if this GC is supported by JVMCI.\n+     * @throws UnsupportedOperationException if JVMCI is not built into the VM or EnableJVMCI is false\n+     *\/\n+    public boolean isSupportedByJVMCI() {\n+        return WB.isGCSupportedByJVMCI(name);\n+    }\n+\n","filename":"test\/lib\/sun\/hotspot\/gc\/GC.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}