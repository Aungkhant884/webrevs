{"files":[{"patch":"@@ -2588,1 +2588,1 @@\n-                    msym.owner == syms.objectType.tsym &&\n+                    (msym.owner == syms.objectType.tsym || msym.owner.isInterface()) &&\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -472,1 +472,1 @@\n-            return (s2 == null || s2 == sym || sym.owner == s2.owner ||\n+            return (s2 == null || s2 == sym || sym.owner == s2.owner || (sym.owner.isInterface() && s2.owner == syms.objectType.tsym) ||\n@@ -1857,1 +1857,2 @@\n-        for (TypeSymbol s : superclasses(intype)) {\n+        boolean isInterface = site.tsym.isInterface();\n+        for (TypeSymbol s : isInterface ? List.of(intype.tsym) : superclasses(intype)) {\n@@ -1895,0 +1896,13 @@\n+        if (isInterface && bestSoFar.kind.isResolutionError()) {\n+            bestSoFar = findMethodInScope(env, site, name, argtypes, typeargtypes,\n+                    syms.objectType.tsym.members(), bestSoFar, allowBoxing, useVarargs, true);\n+            if (bestSoFar.kind.isValid()) {\n+                Symbol baseSymbol = bestSoFar;\n+                bestSoFar = new MethodSymbol(bestSoFar.flags_field, bestSoFar.name, bestSoFar.type, intype.tsym) {\n+                    @Override\n+                    public Symbol baseSymbol() {\n+                        return baseSymbol;\n+                    }\n+                };\n+            }\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8012929 8243074 8266281\n+ * @bug 8012929 8243074 8266281 8272564\n","filename":"test\/langtools\/tools\/javac\/api\/TestGetElementReference.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,0 +40,4 @@\n+        I i = null;\n+        i.toString\/*getElement:METHOD:test.nested.TestGetElementReferenceData.I.toString()*\/();\n+        J j = null;\n+        j.toString\/*getElement:METHOD:test.nested.TestGetElementReferenceData.I.toString()*\/();\n@@ -53,0 +57,4 @@\n+    interface I {\n+        public String toString();\n+    }\n+    interface J extends I {}\n","filename":"test\/langtools\/tools\/javac\/api\/TestGetElementReferenceData.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug     8272564\n+ * @summary Verify accessibility of Object-based methods inherited from super interfaces.\n+ * @modules jdk.compiler\n+ *\/\n+\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Scope;\n+import com.sun.source.util.JavacTask;\n+import com.sun.source.util.TreePath;\n+import com.sun.source.util.Trees;\n+import java.net.URI;\n+import java.util.Arrays;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.type.DeclaredType;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.ToolProvider;\n+\n+public class TestIsAccessible {\n+    public static void main(String[] args) throws Exception {\n+        final JavaCompiler tool = ToolProvider.getSystemJavaCompiler();\n+        assert tool != null;\n+        final JavacTask ct = (JavacTask)tool.getTask(null, null, null, null, null, Arrays.asList(new MyFileObject()));\n+\n+        CompilationUnitTree cut = ct.parse().iterator().next();\n+        TreePath tp = new TreePath(new TreePath(cut), cut.getTypeDecls().get(0));\n+        Scope s = Trees.instance(ct).getScope(tp);\n+        TypeElement name = ct.getElements().getTypeElement(\"javax.lang.model.element.Name\");\n+        Trees trees = Trees.instance(ct);\n+\n+        if (trees.isAccessible(s, name)) {\n+            for (Element member : ct.getElements().getAllMembers(name)) {\n+                if (!trees.isAccessible(s, member, (DeclaredType) name.asType())) {\n+                    throw new IllegalStateException(\"Inaccessible Name member: \" + member);\n+                }\n+            }\n+        }\n+    }\n+\n+    static class MyFileObject extends SimpleJavaFileObject {\n+        public MyFileObject() {\n+            super(URI.create(\"myfo:\/Test.java\"), JavaFileObject.Kind.SOURCE);\n+        }\n+        public CharSequence getCharContent(boolean ignoreEncodingErrors) {\n+            return \"public class Test { }\";\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/api\/TestIsAccessible.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8272564\n+ * @summary Correct resolution of toString() (and other similar calls) on interfaces\n+ * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @compile NoObjectToString.java\n+ * @run main NoObjectToString\n+ *\/\n+\n+import java.io.*;\n+import com.sun.tools.classfile.*;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_Methodref_info;\n+\n+public class NoObjectToString {\n+    public static void main(String... args) throws Exception {\n+        NoObjectToString c = new NoObjectToString();\n+        c.run(args);\n+    }\n+\n+    void run(String... args) throws Exception {\n+         \/\/Verify there are no references to Object.toString() in a Test:\n+        InputStream in = NoObjectToString.class.getResourceAsStream(\"NoObjectToString$Test.class\");\n+        try {\n+            ClassFile cf = ClassFile.read(in);\n+            for (ConstantPool.CPInfo cpinfo: cf.constant_pool.entries()) {\n+                if (cpinfo.getTag() == ConstantPool.CONSTANT_Methodref) {\n+                    CONSTANT_Methodref_info ref = (CONSTANT_Methodref_info) cpinfo;\n+                    String methodDesc = ref.getClassInfo().getName() + \".\" + ref.getNameAndTypeInfo().getName() + \":\" + ref.getNameAndTypeInfo().getType();\n+\n+                    if (\"java\/lang\/Object.toString:()Ljava\/lang\/String;\".equals(methodDesc)) {\n+                        throw new AssertionError(\"Found call to j.l.Object.toString\");\n+                    }\n+                }\n+            }\n+        } catch (ConstantPoolException ignore) {\n+            throw new AssertionError(ignore);\n+        } finally {\n+            in.close();\n+        }\n+    }\n+\n+    class Test {\n+        void test(I i, J j, K k) {\n+            i.toString();\n+            j.toString();\n+            k.toString();\n+        }\n+    }\n+\n+    interface I {\n+        public String toString();\n+    }\n+    interface J extends I {}\n+    interface K {}\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/resolve\/NoObjectToString.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}