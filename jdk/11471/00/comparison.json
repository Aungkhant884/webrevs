{"files":[{"patch":"@@ -1686,0 +1686,2 @@\n+    case Op_HF2FV:\n+    case Op_F2HFV:\n@@ -1995,0 +1997,6 @@\n+    case Op_HF2FV:\n+    case Op_F2HFV:\n+      if (!VM_Version::supports_f16c() && !VM_Version::supports_avx512vl()) {\n+        return false;\n+      }\n+      break;\n@@ -3676,0 +3684,10 @@\n+instruct vconvF2HF(vec dst, vec src) %{\n+  match(Set dst (F2HFV src));\n+  format %{ \"vector_conv_F2HF $dst $src\" %}\n+  ins_encode %{\n+    int vlen_enc = vector_length_encoding(this, $src);\n+    __ vcvtps2ph($dst$$XMMRegister, $src$$XMMRegister, 0x04, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -3686,0 +3704,12 @@\n+instruct vconvHF2F(vec dst, vec src) %{\n+  match(Set dst (HF2FV src));\n+  format %{ \"vector_conv_HF2F $dst,$src\" %}\n+  ins_encode %{\n+    int src_size = Matcher::vector_length_in_bytes(this, $src);\n+    int dst_size = src_size * 2;\n+    int vlen_enc = vector_length_encoding(dst_size);\n+    __ vcvtph2ps($dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -4230,1 +4230,1 @@\n-    \"CountLeadingZerosV\", \"CountTrailingZerosV\", \"SignumVF\", \"SignumVD\",\n+    \"CountLeadingZerosV\", \"CountTrailingZerosV\", \"SignumVF\", \"SignumVD\", \"HF2FV\", \"F2HFV\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -441,0 +441,2 @@\n+macro(HF2FV)\n+macro(F2HFV)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2674,1 +2674,2 @@\n-                 opc == Op_CountTrailingZerosI || opc == Op_CountTrailingZerosL) {\n+                 opc == Op_CountTrailingZerosI || opc == Op_CountTrailingZerosL ||\n+                 opc == Op_ConvHF2F || opc == Op_ConvF2HF) {\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -262,0 +262,4 @@\n+  case Op_ConvHF2F:\n+    return Op_HF2FV;\n+  case Op_ConvF2HF:\n+    return Op_F2HFV;\n@@ -473,0 +477,2 @@\n+    case Op_ConvF2HF:\n+    case Op_ConvHF2F:\n@@ -700,0 +706,2 @@\n+  case Op_HF2FV: return new HF2FVNode(n1, vt);\n+  case Op_F2HFV: return new F2HFVNode(n1, vt);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1630,0 +1630,16 @@\n+class HF2FVNode : public VectorNode {\n+ public:\n+  HF2FVNode(Node* in, const TypeVect* vt) : VectorNode(in, vt) {\n+    assert(in->bottom_type()->is_vect()->element_basic_type() == T_SHORT, \"must be short\");\n+  }\n+  virtual int Opcode() const;\n+};\n+\n+class F2HFVNode : public VectorNode {\n+ public:\n+  F2HFVNode(Node* in, const TypeVect* vt) : VectorNode(in, vt) {\n+    assert(in->bottom_type()->is_vect()->element_basic_type() == T_FLOAT, \"must be float\");\n+  }\n+  virtual int Opcode() const;\n+};\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8294588\n+ * @summary Auto-vectorize Float.floatToFloat16, Float.float16ToFloat API's\n+ * @requires vm.compiler2.enabled\n+ * @requires vm.cpu.features ~= \".*avx.*\"\n+ * @requires os.simpleArch == \"x64\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.vectorization.TestFloatConversionsVector\n+ *\/\n+\n+package compiler.vectorization;\n+\n+import compiler.lib.ir_framework.*;\n+\n+public class TestFloatConversionsVector {\n+  private static final int ARRLEN = 1024;\n+  private static final int ITERS  = 11000;\n+  private static float  [] finp;\n+  private static short  [] sout;\n+  private static short  [] sinp;\n+  private static float  [] fout;\n+\n+  public static void main(String args[]) {\n+      TestFramework.runWithFlags(\"-XX:-TieredCompilation\",\n+                                 \"-XX:CompileThresholdScaling=0.3\");\n+      System.out.println(\"PASSED\");\n+  }\n+\n+  @Test\n+  public void test_float_float16(short[] sout, float[] finp) {\n+      for (int i = 0; i < finp.length; i+=1) {\n+          sout[i] = Float.floatToFloat16(finp[i]);\n+      }\n+  }\n+\n+  @Run(test = {\"test_float_float16\"}, mode = RunMode.STANDALONE)\n+  public void kernel_test_float_float16() {\n+      finp = new float[ARRLEN];\n+      sout = new short[ARRLEN];\n+\n+      for (int i = 0; i < ARRLEN; i++) {\n+          finp[i] = (float) i * 1.4f;\n+      }\n+\n+      for (int i = 0; i < ITERS; i++) {\n+         test_float_float16(sout, finp);\n+      }\n+  }\n+\n+  @Test\n+  public void test_float16_float(float[] fout, short[] sinp) {\n+      for (int i = 0; i < sinp.length; i+=1) {\n+          fout[i] = Float.float16ToFloat(sinp[i]);\n+      }\n+  }\n+\n+  @Run(test = {\"test_float16_float\"}, mode = RunMode.STANDALONE)\n+  public void kernel_test_float16_float() {\n+      sinp = new short[ARRLEN];\n+      fout = new float[ARRLEN];\n+\n+      for (int i = 0; i < ARRLEN; i++) {\n+          sinp[i] = (short)i;\n+      }\n+\n+      for (int i = 0; i < ITERS; i++) {\n+          test_float16_float(fout , sinp);\n+      }\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFloatConversionsVector.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"}]}