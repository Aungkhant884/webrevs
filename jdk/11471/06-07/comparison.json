{"files":[{"patch":"@@ -1690,3 +1690,4 @@\n-    case Op_VectorCastF2H:\n-    case Op_VectorCastH2F:\n-      if (!VM_Version::supports_f16c() && !VM_Version::supports_evex()) {\n+    case Op_VectorCastF2HF:\n+    case Op_VectorCastHF2F:\n+      if ((UseAVX < 2) ||\n+          (!VM_Version::supports_f16c() && !VM_Version::supports_evex())) {\n@@ -1910,2 +1911,2 @@\n-    case Op_VectorCastF2H:\n-    case Op_VectorCastH2F:\n+    case Op_VectorCastF2HF:\n+    case Op_VectorCastHF2F:\n@@ -3691,1 +3692,1 @@\n-  match(Set dst (VectorCastF2H src));\n+  match(Set dst (VectorCastF2HF src));\n@@ -3701,1 +3702,1 @@\n-  match(Set mem (StoreVector mem (VectorCastF2H src)));\n+  match(Set mem (StoreVector mem (VectorCastF2HF src)));\n@@ -3721,1 +3722,1 @@\n-  match(Set dst (VectorCastH2F (LoadVector mem)));\n+  match(Set dst (VectorCastHF2F (LoadVector mem)));\n@@ -3731,1 +3732,1 @@\n-  match(Set dst (VectorCastH2F src));\n+  match(Set dst (VectorCastHF2F src));\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -4226,1 +4226,1 @@\n-    \"VectorCastL2X\", \"VectorCastF2X\", \"VectorCastD2X\", \"VectorCastF2H\", \"VectorCastH2F\",\n+    \"VectorCastL2X\", \"VectorCastF2X\", \"VectorCastD2X\", \"VectorCastF2HF\", \"VectorCastHF2F\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -508,2 +508,2 @@\n-macro(VectorCastF2H)\n-macro(VectorCastH2F)\n+macro(VectorCastF2HF)\n+macro(VectorCastHF2F)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2693,2 +2693,1 @@\n-                 opc == Op_CountTrailingZerosI || opc == Op_ConvHF2F ||\n-                 opc == Op_ConvF2HF) {\n+                 opc == Op_CountTrailingZerosI) {\n@@ -2716,1 +2715,1 @@\n-        int vopc = VectorCastNode::opcode(in->bottom_type()->is_vect()->element_basic_type());\n+        int vopc = VectorCastNode::opcode(opc, in->bottom_type()->is_vect()->element_basic_type());\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -778,1 +778,1 @@\n-  int cast_vopc = VectorCastNode::opcode(T_BYTE); \/\/ from shuffle of type T_BYTE\n+  int cast_vopc = VectorCastNode::opcode(-1, T_BYTE); \/\/ from shuffle of type T_BYTE\n@@ -2492,1 +2492,1 @@\n-    int cast_vopc = VectorCastNode::opcode(elem_bt_from, !is_ucast);\n+    int cast_vopc = VectorCastNode::opcode(-1, elem_bt_from, !is_ucast);\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -270,4 +270,0 @@\n-  case Op_ConvHF2F:\n-    return Op_VectorCastH2F;\n-  case Op_ConvF2HF:\n-    return Op_VectorCastF2H;\n@@ -703,2 +699,0 @@\n-  case Op_VectorCastH2F: return new VectorCastH2FNode(n1, vt);\n-  case Op_VectorCastF2H: return new VectorCastF2HNode(n1, vt);\n@@ -1339,0 +1333,2 @@\n+    case Op_VectorCastHF2F: return new VectorCastHF2FNode(n1, vt);\n+    case Op_VectorCastF2HF: return new VectorCastF2HFNode(n1, vt);\n@@ -1345,1 +1341,1 @@\n-int VectorCastNode::opcode(BasicType bt, bool is_signed) {\n+int VectorCastNode::opcode(int sopc, BasicType bt, bool is_signed) {\n@@ -1347,0 +1343,15 @@\n+\n+  \/\/ Handle special case for to\/from Half Float conversions\n+  switch (sopc) {\n+    case Op_ConvHF2F:\n+      assert(bt == T_SHORT, \"\");\n+      return Op_VectorCastHF2F;\n+    case Op_ConvF2HF:\n+      assert(bt == T_FLOAT, \"\");\n+      return Op_VectorCastF2HF;\n+    default:\n+      \/\/ Handled normally below\n+      break;\n+  }\n+\n+  \/\/ Handle normal conversions\n@@ -1365,1 +1376,1 @@\n-    int vopc = VectorCastNode::opcode(src_type);\n+    int vopc = VectorCastNode::opcode(opc, src_type);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1545,1 +1545,1 @@\n-  static int  opcode(BasicType bt, bool is_signed = true);\n+  static int  opcode(int opc, BasicType bt, bool is_signed = true);\n@@ -1631,1 +1631,1 @@\n-class VectorCastH2FNode : public VectorNode {\n+class VectorCastHF2FNode : public VectorCastNode {\n@@ -1633,1 +1633,1 @@\n-  VectorCastH2FNode(Node* in, const TypeVect* vt) : VectorNode(in, vt) {\n+  VectorCastHF2FNode(Node* in, const TypeVect* vt) : VectorCastNode(in, vt) {\n@@ -1639,1 +1639,1 @@\n-class VectorCastF2HNode : public VectorNode {\n+class VectorCastF2HFNode : public VectorCastNode {\n@@ -1641,1 +1641,1 @@\n-  VectorCastF2HNode(Node* in, const TypeVect* vt) : VectorNode(in, vt) {\n+  VectorCastF2HFNode(Node* in, const TypeVect* vt) : VectorCastNode(in, vt) {\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public static final String VECTOR_CAST_F2H = PREFIX + \"VECTOR_CAST_F2H\" + POSTFIX;\n+    public static final String VECTOR_CAST_F2HF = PREFIX + \"VECTOR_CAST_F2HF\" + POSTFIX;\n@@ -1084,1 +1084,1 @@\n-        beforeMatchingNameRegex(VECTOR_CAST_F2H, \"VectorCastF2H\");\n+        beforeMatchingNameRegex(VECTOR_CAST_F2HF, \"VectorCastF2HF\");\n@@ -1087,1 +1087,1 @@\n-    public static final String VECTOR_CAST_H2F = PREFIX + \"VECTOR_CAST_H2F\" + POSTFIX;\n+    public static final String VECTOR_CAST_HF2F = PREFIX + \"VECTOR_CAST_HF2F\" + POSTFIX;\n@@ -1089,1 +1089,1 @@\n-        beforeMatchingNameRegex(VECTOR_CAST_H2F, \"VectorCastH2F\");\n+        beforeMatchingNameRegex(VECTOR_CAST_HF2F, \"VectorCastHF2F\");\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary Auto-vectorize Float.floatToFloat16, Float.float16ToFloat API's\n+ * @summary Auto-vectorize Float.floatToFloat16, Float.float16ToFloat APIs\n@@ -29,0 +29,1 @@\n+ * @requires vm.cpu.features ~= \".*avx2.*\"\n@@ -53,1 +54,1 @@\n-  @IR(counts = {IRNode.VECTOR_CAST_F2H, \"> 0\"}, applyIfCPUFeatureOr = {\"avx512f\", \"true\", \"f16c\", \"true\"})\n+  @IR(counts = {IRNode.VECTOR_CAST_F2HF, \"> 0\"}, applyIfCPUFeatureOr = {\"avx512f\", \"true\", \"f16c\", \"true\"})\n@@ -55,1 +56,1 @@\n-      for (int i = 0; i < finp.length; i+=1) {\n+      for (int i = 0; i < finp.length; i++) {\n@@ -75,1 +76,1 @@\n-  @IR(counts = {IRNode.VECTOR_CAST_H2F, \"> 0\"}, applyIfCPUFeatureOr = {\"avx512f\", \"true\", \"f16c\", \"true\"})\n+  @IR(counts = {IRNode.VECTOR_CAST_HF2F, \"> 0\"}, applyIfCPUFeatureOr = {\"avx512f\", \"true\", \"f16c\", \"true\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFloatConversionsVector.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}