{"files":[{"patch":"@@ -1954,0 +1954,11 @@\n+void Assembler::vcvtps2ph(Address dst, XMMRegister src, int imm8, int vector_len) {\n+  assert(VM_Version::supports_evex() || VM_Version::supports_f16c(), \"\");\n+  InstructionMark im(this);\n+  InstructionAttr attributes(vector_len, \/* rex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/*uses_vl *\/ true);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_HVM, \/* input_size_in_bits *\/ EVEX_NObit);\n+  vex_prefix(dst, 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3A, &attributes);\n+  emit_int8(0x1D);\n+  emit_operand(src, dst, 1);\n+  emit_int8(imm8);\n+}\n+\n@@ -1961,0 +1972,12 @@\n+void Assembler::vcvtph2ps(XMMRegister dst, KRegister mask, Address src, int vector_len) {\n+  assert(VM_Version::supports_avx512vl() || VM_Version::supports_f16c(), \"\");\n+  InstructionMark im(this);\n+  InstructionAttr attributes(vector_len, \/* rex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false, \/*uses_vl *\/ true);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_HVM, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.reset_is_clear_context();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  vex_prefix(src, 0, dst->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int8(0x13);\n+  emit_operand(dst, src, 0);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1163,0 +1163,2 @@\n+  void vcvtps2ph(Address dst, XMMRegister src, int imm8, int vector_len);\n+  void vcvtph2ps(XMMRegister dst, KRegister mask, Address src, int vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -959,0 +959,1 @@\n+    _features &= ~CPU_F16C;\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1686,2 +1686,0 @@\n-    case Op_HF2FV:\n-    case Op_F2HFV:\n@@ -1692,0 +1690,6 @@\n+    case Op_VectorCastF2H:\n+    case Op_VectorCastH2F:\n+      if (!VM_Version::supports_f16c() && !VM_Version::supports_evex()) {\n+        return false;\n+      }\n+      break;\n@@ -1906,0 +1910,8 @@\n+    case Op_VectorCastF2H:\n+    case Op_VectorCastH2F:\n+      if (!VM_Version::supports_f16c() &&\n+         ((!VM_Version::supports_evex() ||\n+         ((size_in_bits != 512) && !VM_Version::supports_avx512vl())))) {\n+        return false;\n+      }\n+      break;\n@@ -1997,6 +2009,0 @@\n-    case Op_HF2FV:\n-    case Op_F2HFV:\n-      if (!VM_Version::supports_f16c() && !VM_Version::supports_avx512vl()) {\n-        return false;\n-      }\n-      break;\n@@ -3685,1 +3691,1 @@\n-  match(Set dst (F2HFV src));\n+  match(Set dst (VectorCastF2H src));\n@@ -3694,0 +3700,10 @@\n+instruct vconvF2HF_mem_reg(memory mem, vec src) %{\n+  match(Set mem (StoreVector mem (VectorCastF2H src)));\n+  format %{ \"vcvtps2ph $mem,$src\" %}\n+  ins_encode %{\n+    int vlen_enc = vector_length_encoding(this, $src);\n+    __ vcvtps2ph($mem$$Address, $src$$XMMRegister, 0x04, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -3704,0 +3720,10 @@\n+instruct vconvHF2F_reg_mem(vec dst, memory mem) %{\n+  match(Set dst (VectorCastH2F (LoadVector mem)));\n+  format %{ \"vcvtph2ps $dst,$mem\" %}\n+  ins_encode %{\n+    int vlen_enc = vector_length_encoding(this);\n+    __ vcvtph2ps($dst$$XMMRegister, k0, $mem$$Address, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -3705,1 +3731,2 @@\n-  match(Set dst (HF2FV src));\n+  match(Set dst (VectorCastH2F src));\n+  ins_cost(125);\n@@ -3708,3 +3735,1 @@\n-    int src_size = Matcher::vector_length_in_bytes(this, $src);\n-    int dst_size = src_size * 2;\n-    int vlen_enc = vector_length_encoding(dst_size);\n+    int vlen_enc = vector_length_encoding(this);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":38,"deletions":13,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -4226,1 +4226,1 @@\n-    \"VectorCastL2X\", \"VectorCastF2X\", \"VectorCastD2X\",\n+    \"VectorCastL2X\", \"VectorCastF2X\", \"VectorCastD2X\", \"VectorCastF2H\", \"VectorCastH2F\",\n@@ -4230,1 +4230,1 @@\n-    \"CountLeadingZerosV\", \"CountTrailingZerosV\", \"SignumVF\", \"SignumVD\", \"HF2FV\", \"F2HFV\",\n+    \"CountLeadingZerosV\", \"CountTrailingZerosV\", \"SignumVF\", \"SignumVD\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -441,2 +441,0 @@\n-macro(HF2FV)\n-macro(F2HFV)\n@@ -511,0 +509,2 @@\n+macro(VectorCastF2H)\n+macro(VectorCastH2F)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -263,1 +263,1 @@\n-    return Op_HF2FV;\n+    return Op_VectorCastH2F;\n@@ -265,1 +265,1 @@\n-    return Op_F2HFV;\n+    return Op_VectorCastF2H;\n@@ -706,2 +706,2 @@\n-  case Op_HF2FV: return new HF2FVNode(n1, vt);\n-  case Op_F2HFV: return new F2HFVNode(n1, vt);\n+  case Op_VectorCastH2F: return new VectorCastH2FNode(n1, vt);\n+  case Op_VectorCastF2H: return new VectorCastF2HNode(n1, vt);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1630,1 +1630,1 @@\n-class HF2FVNode : public VectorNode {\n+class VectorCastH2FNode : public VectorNode {\n@@ -1632,1 +1632,1 @@\n-  HF2FVNode(Node* in, const TypeVect* vt) : VectorNode(in, vt) {\n+  VectorCastH2FNode(Node* in, const TypeVect* vt) : VectorNode(in, vt) {\n@@ -1638,1 +1638,1 @@\n-class F2HFVNode : public VectorNode {\n+class VectorCastF2HNode : public VectorNode {\n@@ -1640,1 +1640,1 @@\n-  F2HFVNode(Node* in, const TypeVect* vt) : VectorNode(in, vt) {\n+  VectorCastF2HNode(Node* in, const TypeVect* vt) : VectorNode(in, vt) {\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1072,0 +1072,10 @@\n+    public static final String VECTOR_CAST_F2H = PREFIX + \"VECTOR_CAST_F2H\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(VECTOR_CAST_F2H, \"VectorCastF2H\");\n+    }\n+\n+    public static final String VECTOR_CAST_H2F = PREFIX + \"VECTOR_CAST_H2F\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(VECTOR_CAST_H2F, \"VectorCastH2F\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+  @IR(counts = {IRNode.VECTOR_CAST_F2H, \"> 0\"})\n@@ -75,0 +76,1 @@\n+  @IR(counts = {IRNode.VECTOR_CAST_H2F, \"> 0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFloatConversionsVector.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}