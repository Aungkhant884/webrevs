{"files":[{"patch":"@@ -35,1 +35,0 @@\n-#include \"runtime\/sharedRuntime.hpp\"\n@@ -37,0 +36,1 @@\n+#include \"runtime\/sharedRuntime.hpp\"\n@@ -38,1 +38,0 @@\n-#include \"utilities\/formatBuffer.hpp\"\n@@ -40,0 +39,1 @@\n+#include \"utilities\/formatBuffer.hpp\"\n@@ -125,1 +125,1 @@\n-  bool check_barrier(FormatBuffer<>& msg) const;\n+  bool check_barrier(err_msg& msg) const;\n@@ -127,1 +127,1 @@\n-    FormatBuffer<> msg(\"%s\", \"\");\n+    err_msg msg(\"%s\", \"\");\n@@ -141,1 +141,1 @@\n-bool NativeNMethodBarrier::check_barrier(FormatBuffer<>& msg) const {\n+bool NativeNMethodBarrier::check_barrier(err_msg& msg) const {\n@@ -221,1 +221,1 @@\n-bool BarrierSetNMethod::verify_barrier(nmethod* nm, FormatBuffer<>& msg) {\n+bool BarrierSetNMethod::verify_barrier(nmethod* nm, err_msg& msg) {\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetNMethod_aarch64.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-  bool check_barrier(FormatBuffer<>& msg) const;\n+  bool check_barrier(err_msg& msg) const;\n@@ -121,1 +121,1 @@\n-    FormatBuffer<> msg(\"%s\", \"\");\n+    err_msg msg(\"%s\", \"\");\n@@ -145,1 +145,1 @@\n-bool NativeNMethodBarrier::check_barrier(FormatBuffer<>& msg) const {\n+bool NativeNMethodBarrier::check_barrier(err_msg& msg) const {\n@@ -228,1 +228,1 @@\n-bool BarrierSetNMethod::verify_barrier(nmethod* nm, FormatBuffer<>& msg) {\n+bool BarrierSetNMethod::verify_barrier(nmethod* nm, err_msg& msg) {\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetNMethod_riscv.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-  bool check_barrier(FormatBuffer<>& msg) const;\n+  bool check_barrier(err_msg& msg) const;\n@@ -67,1 +67,1 @@\n-    FormatBuffer<> msg(\"%s\", \"\");\n+    err_msg msg(\"%s\", \"\");\n@@ -73,1 +73,1 @@\n-bool NativeNMethodCmpBarrier::check_barrier(FormatBuffer<>& msg) const {\n+bool NativeNMethodCmpBarrier::check_barrier(err_msg& msg) const {\n@@ -100,1 +100,1 @@\n-bool NativeNMethodCmpBarrier::check_barrier(FormatBuffer<>& msg) const {\n+bool NativeNMethodCmpBarrier::check_barrier(err_msg& msg) const {\n@@ -218,1 +218,1 @@\n-bool BarrierSetNMethod::verify_barrier(nmethod* nm, FormatBuffer<>& msg) {\n+bool BarrierSetNMethod::verify_barrier(nmethod* nm, err_msg& msg) {\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetNMethod_x86.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -861,1 +861,1 @@\n-    int jvmci_data_size = compiler->is_jvmci() ? jvmci_data->size() : 0;\n+    int jvmci_data_size      = compiler->is_jvmci() ? jvmci_data->size() : 0;\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/formatBuffer.hpp\"\n@@ -31,3 +32,0 @@\n-#if INCLUDE_JVMCI\n-#include \"utilities\/formatBuffer.hpp\"\n-#endif\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetNMethod.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -776,1 +776,1 @@\n-          FormatBuffer<> msg(\"%s\", \"\");\n+          err_msg msg(\"\");\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-#include \"interpreter\/linkResolver.hpp\"\n@@ -38,0 +37,1 @@\n+#include \"interpreter\/linkResolver.hpp\"\n@@ -39,1 +39,0 @@\n-#include \"jvmci\/jvmciCompilerToVM.hpp\"\n@@ -41,0 +40,1 @@\n+#include \"jvmci\/jvmciCompilerToVM.hpp\"\n@@ -47,1 +47,0 @@\n-#include \"oops\/instanceMirrorKlass.hpp\"\n@@ -49,0 +48,1 @@\n+#include \"oops\/instanceMirrorKlass.hpp\"\n@@ -65,1 +65,0 @@\n-#include \"runtime\/vframe_hp.hpp\"\n@@ -67,0 +66,1 @@\n+#include \"runtime\/vframe_hp.hpp\"\n@@ -105,0 +105,48 @@\n+class JavaArgumentUnboxer : public SignatureIterator {\n+ protected:\n+  JavaCallArguments*  _jca;\n+  arrayOop _args;\n+  int _index;\n+\n+  Handle next_arg(BasicType expectedType);\n+\n+ public:\n+  JavaArgumentUnboxer(Symbol* signature,\n+                      JavaCallArguments* jca,\n+                      arrayOop args,\n+                      bool is_static)\n+    : SignatureIterator(signature)\n+  {\n+    this->_return_type = T_ILLEGAL;\n+    _jca = jca;\n+    _index = 0;\n+    _args = args;\n+    if (!is_static) {\n+      _jca->push_oop(next_arg(T_OBJECT));\n+    }\n+    do_parameters_on(this);\n+    assert(_index == args->length(), \"arg count mismatch with signature\");\n+  }\n+\n+ private:\n+  friend class SignatureIterator;  \/\/ so do_parameters_on can call do_type\n+  void do_type(BasicType type) {\n+    if (is_reference_type(type)) {\n+      _jca->push_oop(next_arg(T_OBJECT));\n+      return;\n+    }\n+    Handle arg = next_arg(type);\n+    int box_offset = java_lang_boxing_object::value_offset(type);\n+    switch (type) {\n+    case T_BOOLEAN:     _jca->push_int(arg->bool_field(box_offset));    break;\n+    case T_CHAR:        _jca->push_int(arg->char_field(box_offset));    break;\n+    case T_SHORT:       _jca->push_int(arg->short_field(box_offset));   break;\n+    case T_BYTE:        _jca->push_int(arg->byte_field(box_offset));    break;\n+    case T_INT:         _jca->push_int(arg->int_field(box_offset));     break;\n+    case T_LONG:        _jca->push_long(arg->long_field(box_offset));   break;\n+    case T_FLOAT:       _jca->push_float(arg->float_field(box_offset));    break;\n+    case T_DOUBLE:      _jca->push_double(arg->double_field(box_offset));  break;\n+    default:            ShouldNotReachHere();\n+    }\n+  }\n+};\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":52,"deletions":4,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"gc\/shared\/cardTable.hpp\"\n@@ -29,0 +28,1 @@\n+#include \"gc\/shared\/cardTable.hpp\"\n@@ -153,51 +153,0 @@\n-\n-\n-class JavaArgumentUnboxer : public SignatureIterator {\n- protected:\n-  JavaCallArguments*  _jca;\n-  arrayOop _args;\n-  int _index;\n-\n-  Handle next_arg(BasicType expectedType);\n-\n- public:\n-  JavaArgumentUnboxer(Symbol* signature,\n-                      JavaCallArguments* jca,\n-                      arrayOop args,\n-                      bool is_static)\n-    : SignatureIterator(signature)\n-  {\n-    this->_return_type = T_ILLEGAL;\n-    _jca = jca;\n-    _index = 0;\n-    _args = args;\n-    if (!is_static) {\n-      _jca->push_oop(next_arg(T_OBJECT));\n-    }\n-    do_parameters_on(this);\n-    assert(_index == args->length(), \"arg count mismatch with signature\");\n-  }\n-\n- private:\n-  friend class SignatureIterator;  \/\/ so do_parameters_on can call do_type\n-  void do_type(BasicType type) {\n-    if (is_reference_type(type)) {\n-      _jca->push_oop(next_arg(T_OBJECT));\n-      return;\n-    }\n-    Handle arg = next_arg(type);\n-    int box_offset = java_lang_boxing_object::value_offset(type);\n-    switch (type) {\n-    case T_BOOLEAN:     _jca->push_int(arg->bool_field(box_offset));    break;\n-    case T_CHAR:        _jca->push_int(arg->char_field(box_offset));    break;\n-    case T_SHORT:       _jca->push_int(arg->short_field(box_offset));   break;\n-    case T_BYTE:        _jca->push_int(arg->byte_field(box_offset));    break;\n-    case T_INT:         _jca->push_int(arg->int_field(box_offset));     break;\n-    case T_LONG:        _jca->push_long(arg->long_field(box_offset));   break;\n-    case T_FLOAT:       _jca->push_float(arg->float_field(box_offset));    break;\n-    case T_DOUBLE:      _jca->push_double(arg->double_field(box_offset));  break;\n-    default:            ShouldNotReachHere();\n-    }\n-  }\n-};\n-\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.hpp","additions":1,"deletions":52,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shared\/barrierSetNMethod.hpp\"\n@@ -34,2 +35,1 @@\n-#include \"gc\/shared\/barrierSetNMethod.hpp\"\n-#include \"gc\/z\/zThreadLocalData.hpp\"\n+#if INCLUDE_ZGC\n@@ -37,1 +37,2 @@\n-#include \"jvmci\/jvmciEnv.hpp\"\n+#include \"gc\/z\/zThreadLocalData.hpp\"\n+#endif\n@@ -39,0 +40,1 @@\n+#include \"jvmci\/jvmciEnv.hpp\"\n@@ -148,0 +150,1 @@\n+#if INCLUDE_ZGC\n@@ -159,0 +162,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"oops\/klass.inline.hpp\"\n+#include \"oops\/klass.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}