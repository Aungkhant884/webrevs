{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+\n@@ -38,1 +39,2 @@\n-import static sun.java2d.pipe.hw.AccelSurface.*;\n+\n+import static sun.java2d.pipe.hw.AccelSurface.UNDEFINED;\n@@ -310,0 +312,3 @@\n+        \/\/ We're asked to restore contents by the accelerated surface, which\n+        \/\/ means that it had been lost\n+        acceleratedSurfaceLost();\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/VolatileSurfaceManager.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -43,2 +43,0 @@\n-import static sun.java2d.pipe.hw.AccelSurface.*;\n-import static sun.java2d.d3d.D3DContext.D3DContextCaps.*;\n@@ -47,0 +45,6 @@\n+import static sun.java2d.d3d.D3DContext.D3DContextCaps.CAPS_RT_PLAIN_ALPHA;\n+import static sun.java2d.d3d.D3DContext.D3DContextCaps.CAPS_RT_TEXTURE_ALPHA;\n+import static sun.java2d.pipe.hw.AccelSurface.RT_TEXTURE;\n+import static sun.java2d.pipe.hw.AccelSurface.TEXTURE;\n+import static sun.java2d.pipe.hw.AccelSurface.UNDEFINED;\n+\n@@ -163,10 +167,0 @@\n-    \/**\n-     * We're asked to restore contents by the accelerated surface, which means\n-     * that it had been lost.\n-     *\/\n-    @Override\n-    public SurfaceData restoreContents() {\n-        acceleratedSurfaceLost();\n-        return super.restoreContents();\n-    }\n-\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DVolatileSurfaceManager.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Image;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.ImageObserver;\n+import java.awt.image.ImageProducer;\n+\n+\/*\n+ * @test id=default\n+ * @bug 8272288\n+ * @key headful\n+ * @summary Broken rendering should be reported by the contentsLost()\n+ *\n+ * @run main\/othervm ReportRenderingError\n+ *\/\n+\n+\/*\n+ * @test id=windows\n+ * @bug 8272288\n+ * @key headful\n+ * @summary Broken rendering should be reported by the contentsLost()\n+ * @requires (os.family == \"windows\")\n+ *\n+ * @run main\/othervm -Dsun.java2d.opengl=True ReportRenderingError\n+ * @run main\/othervm -Dsun.java2d.d3d=True    ReportRenderingError\n+ * @run main\/othervm -Dsun.java2d.d3d=false   ReportRenderingError\n+ *\/\n+\n+\/*\n+ * @test id=macos\n+ * @bug 8272288\n+ * @key headful\n+ * @summary Broken rendering should be reported by the contentsLost()\n+ *\n+ * @requires (os.family == \"mac\")\n+ * @run main\/othervm -Dsun.java2d.opengl=True ReportRenderingError\n+ * @run main\/othervm -Dsun.java2d.metal=True  ReportRenderingError\n+ *\/\n+\n+\/*\n+ * @test id=linux\n+ * @bug 8272288\n+ * @key headful\n+ * @summary Broken rendering should be reported by the contentsLost()\n+ *\n+ * @requires (os.family == \"linux\")\n+ * @run main\/othervm -Dsun.java2d.opengl=True   ReportRenderingError\n+ * @run main\/othervm -Dsun.java2d.xrender=True  ReportRenderingError\n+ * @run main\/othervm -Dsun.java2d.xrender=false ReportRenderingError\n+ *\/\n+public final class ReportRenderingError {\n+\n+    public static void main(String[] args) {\n+        var gc = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                                    .getDefaultScreenDevice()\n+                                    .getDefaultConfiguration();\n+        var vi = gc.createCompatibleVolatileImage(10, 10);\n+\n+        Image image = new EmptyImage();\n+        BufferedImage snapshot;\n+        int attempt = 0;\n+        do {\n+            vi.validate(gc);\n+            Graphics2D g = vi.createGraphics();\n+            g.setColor(Color.RED);\n+            g.drawImage(image, 0, 0, null); \/\/ <- can cause InvalidPipeException\n+            g.fillRect(0, 0, vi.getWidth(), vi.getHeight());\n+            g.dispose();\n+            snapshot = vi.getSnapshot();\n+        } while (vi.contentsLost() && (++attempt <= 10));\n+\n+        if (vi.contentsLost()) {\n+            System.out.println(\"Content is lost, skip the pixel validation\");\n+        } else {\n+            if (snapshot.getRGB(5, 5) != Color.RED.getRGB()) {\n+                throw new RuntimeException(\"Test failed\");\n+            }\n+        }\n+    }\n+\n+    private static final class EmptyImage extends Image {\n+        @Override\n+        public int getWidth(ImageObserver observer) {\n+            return 10;\n+        }\n+\n+        @Override\n+        public int getHeight(ImageObserver observer) {\n+            return 10;\n+        }\n+\n+        @Override\n+        public ImageProducer getSource() {\n+            return null;\n+        }\n+\n+        @Override\n+        public Graphics getGraphics() {\n+            return null;\n+        }\n+\n+        @Override\n+        public Object getProperty(String name, ImageObserver observer) {\n+            return null;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/image\/VolatileImage\/ReportRenderingError.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"}]}