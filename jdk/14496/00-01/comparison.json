{"files":[{"patch":"@@ -8191,14 +8191,14 @@\n-     * If {@code R} is the return type of the filter, then, unless {@code R} is void, the target var handle must accept\n-     * a value of type {@code R} as its coordinate in position {@code pos}, preceded and\/or followed by\n-     * any coordinate not passed to the filter.\n-     * No coordinates are reordered, and the result returned from the filter\n-     * replaces (in order) the whole subsequence of coordinates originally\n-     * passed to the adapter.\n-     * <p>\n-     * The argument types (if any) of the filter\n-     * replace zero or one coordinate types of the target var handle, at position {@code pos},\n-     * in the resulting adapted var handle.\n-     * If the return type of the filter is <em>not<\/em> void, it must be identical to the\n-     * coordinate type of the target var handle at position {@code pos}, and that target var handle\n-     * coordinate is supplied by the return value of the filter. If the return type of the filter <em>is<\/em> void,\n-     * the filter will essentially act as a side effect that is executed before the var handle is invoked.\n+     * If {@code R} is the return type of the filter, then:\n+     * <ul>\n+     * <li>if {@code R} <em>is not<\/em> {@code void}, the target var handle must have a coordinate of type {@code R} in\n+     * position {@code pos}. The parameter types of the filter will replace the coordinate type at position {@code pos}\n+     * of the target var handle. When the returned var handle is invoked, it will be as if the filter is invoked first,\n+     * and its result is passed in place of the coordinate at position {@code pos} in a downstream invocation of the\n+     * target var handle.<\/li>\n+     * <li>if {@code R} <em>is<\/em> {@code void}, {@code pos} indicates the space between two coordinate types in the\n+     * coordinate list of the target var handle, where {@code 0} indicates the space before the first coordinate, and\n+     * {@code target.coordinateTypes().size()} indicates the space after the last coordinate. The parameter types of the\n+     * filter will be inserted in the coordinate type list of the target var handle in that space. In this case, when\n+     * the returned var handle is invoked, the filter essentially acts as a side effect, consuming some of the coordinate\n+     * values, before a downstream invocation of the target var handle.<\/li>\n+     * <\/ul>\n@@ -8213,1 +8213,1 @@\n-     * @param pos the position of the coordinate to be filtered\n+     * @param pos the position in the coordinate list of the target var handle where the filter is to be inserted\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"}]}