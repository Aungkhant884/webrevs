{"files":[{"patch":"@@ -8191,2 +8191,2 @@\n-     * If {@code R} is the return type of the filter (which cannot be void), the target var handle must accept a value of\n-     * type {@code R} as its coordinate in position {@code pos}, preceded and\/or followed by\n+     * If {@code R} is the return type of the filter, then, unless {@code R} is void, the target var handle must accept\n+     * a value of type {@code R} as its coordinate in position {@code pos}, preceded and\/or followed by\n@@ -8201,1 +8201,1 @@\n-     * The return type of the filter must be identical to the\n+     * If the return type of the filter is <em>not<\/em> void, it must be identical to the\n@@ -8203,1 +8203,2 @@\n-     * coordinate is supplied by the return value of the filter.\n+     * coordinate is supplied by the return value of the filter. If the return type of the filter <em>is<\/em> void,\n+     * the filter will essentially act as a side effect that is executed before the var handle is invoked.\n@@ -8217,1 +8218,1 @@\n-     * is void, or it is not the same as the {@code pos} coordinate of the target var handle,\n+     * is not void, and it is not the same as the {@code pos} coordinate of the target var handle,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -566,3 +566,1 @@\n-        } else if (filter.type().returnType() == void.class) {\n-            throw newIllegalArgumentException(\"Invalid filter type \" + filter.type() + \" ; filter cannot be void\");\n-        } else if (filter.type().returnType() != targetCoordinates.get(pos)) {\n+        } else if (filter.type().returnType() != void.class && filter.type().returnType() != targetCoordinates.get(pos)) {\n@@ -573,1 +571,3 @@\n-        newCoordinates.remove(pos);\n+        if (filter.type().returnType() != void.class) {\n+            newCoordinates.remove(pos);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -354,0 +354,6 @@\n+    @Test\n+    public void testCollectCoordinatesVoidFilterType() {\n+        VarHandle handle = MethodHandles.collectCoordinates(intHandle, 0, VOID_FILTER);\n+        assertEquals(handle.coordinateTypes(), List.of(String.class, MemorySegment.class));\n+    }\n+\n@@ -369,5 +375,0 @@\n-    @Test(expectedExceptions = IllegalArgumentException.class)\n-    public void testBadCollectCoordinatesWrongVoidFilterType() {\n-        MethodHandles.collectCoordinates(intHandle, 0, VOID_FILTER);\n-    }\n-\n","filename":"test\/jdk\/java\/foreign\/TestAdaptVarHandles.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"}]}