{"files":[{"patch":"@@ -83,0 +83,4 @@\n+    \/**\n+     * The failure reason message when the user didn't provide one.\n+     *\/\n+    private static final String EMPTY_REASON = \"(no reason provided)\";\n@@ -90,3 +94,9 @@\n-    private static volatile boolean failed;\n-    private static volatile boolean timeout;\n-    private static volatile String testFailedReason;\n+    \/**\n+     * The description of why the test fails.\n+     * <p>\n+     * Note: <strong>do not use<\/strong> this field directly,\n+     * use the {@link #setFailureReason(String) setFailureReason} and\n+     * {@link #getFailureReason() getFailureReason} methods to modify and\n+     * to read its value.\n+     *\/\n+    private static String failureReason;\n@@ -253,1 +263,1 @@\n-            getFailureReason();\n+            requestFailureReason();\n@@ -326,1 +336,1 @@\n-            if ((leftTime < 0) || failed) {\n+            if (leftTime < 0) {\n@@ -328,3 +338,2 @@\n-                testFailedReason = FAILURE_REASON\n-                                   + \"Timeout User did not perform testing.\";\n-                timeout = true;\n+                setFailureReason(FAILURE_REASON\n+                                 + \"Timeout - User did not perform testing.\");\n@@ -357,3 +366,2 @@\n-            testFailedReason = FAILURE_REASON\n-                               + \"User closed a window\";\n-            failed = true;\n+            setFailureReason(FAILURE_REASON\n+                             + \"User closed a window\");\n@@ -453,0 +461,24 @@\n+    \/**\n+     * Sets the failure reason which describes why the test fails.\n+     * This method ensures the {@code failureReason} field does not change\n+     * after it's set to a non-{@code null} value.\n+     * @param reason the description of why the test fails\n+     * @throws IllegalArgumentException if the {@code reason} parameter\n+     *         is {@code null}\n+     *\/\n+    private static synchronized void setFailureReason(final String reason) {\n+        if (reason == null) {\n+            throw new IllegalArgumentException(\"The failure reason must not be null\");\n+        }\n+        if (failureReason == null) {\n+            failureReason = reason;\n+        }\n+    }\n+\n+    \/**\n+     * {@return the description of why the test fails}\n+     *\/\n+    private static synchronized String getFailureReason() {\n+        return failureReason;\n+    }\n+\n@@ -471,6 +503,3 @@\n-        if (timeout) {\n-            throw new RuntimeException(testFailedReason);\n-        }\n-\n-        if (failed) {\n-            throw new RuntimeException(\"Test failed! : \" + testFailedReason);\n+        String failure = getFailureReason();\n+        if (failure != null) {\n+            throw new RuntimeException(failure);\n@@ -483,2 +512,1 @@\n-     * Disposes of all the windows. It disposes of the test instruction frame\n-     * and all other windows added via {@link #addTestWindow(Window)}.\n+     * Requests the description of the test failure reason from the tester.\n@@ -486,9 +514,1 @@\n-    private static synchronized void disposeWindows() {\n-        windowList.forEach(Window::dispose);\n-    }\n-\n-    \/**\n-     * Read the test failure reason and add the reason to the test result\n-     * example in the jtreg .jtr file.\n-     *\/\n-    private static void getFailureReason() {\n+    private static void requestFailureReason() {\n@@ -502,1 +522,3 @@\n-            testFailedReason = FAILURE_REASON + jTextArea.getText();\n+            String text = jTextArea.getText();\n+            setFailureReason(FAILURE_REASON\n+                             + (!text.isEmpty() ? text : EMPTY_REASON));\n@@ -517,1 +539,4 @@\n-        failed = true;\n+        \/\/ Ensure the test fails even if the dialog is closed\n+        \/\/ without clicking the OK button\n+        setFailureReason(FAILURE_REASON + EMPTY_REASON);\n+\n@@ -522,0 +547,8 @@\n+    \/**\n+     * Disposes of all the windows. It disposes of the test instruction frame\n+     * and all other windows added via {@link #addTestWindow(Window)}.\n+     *\/\n+    private static synchronized void disposeWindows() {\n+        windowList.forEach(Window::dispose);\n+    }\n+\n@@ -668,2 +701,1 @@\n-        failed = true;\n-        testFailedReason = FAILURE_REASON + reason;\n+        setFailureReason(FAILURE_REASON + reason);\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":64,"deletions":32,"binary":false,"changes":96,"status":"modified"}]}