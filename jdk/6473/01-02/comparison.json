{"files":[{"patch":"@@ -1060,12 +1060,19 @@\n-            TRY;\n-\n-            long *colorBits = (long*)safe_Malloc(MAX_ICON_SIZE * MAX_ICON_SIZE * sizeof(long));\n-            GetDIBits(dc, iconInfo.hbmColor, 0, iconSize, colorBits, &bmi, DIB_RGB_COLORS);\n-            \/\/ XP supports alpha in some icons, and depending on device.\n-            \/\/ This should take precedence over the icon mask bits.\n-            BOOL hasAlpha = FALSE;\n-            if (IS_WINXP) {\n-                for (int i = 0; i < nBits; i++) {\n-                    if ((colorBits[i] & 0xff000000) != 0) {\n-                        hasAlpha = TRUE;\n-                        break;\n+            long *colorBits = NULL;\n+            try {\n+                entry_point();\n+                colorBits = (long*)safe_Malloc(MAX_ICON_SIZE * MAX_ICON_SIZE * sizeof(long));\n+            } catch(std::bad_alloc&) {\n+                handle_bad_alloc();\n+            }\n+\n+            if (colorBits != NULL) {\n+                GetDIBits(dc, iconInfo.hbmColor, 0, iconSize, colorBits, &bmi, DIB_RGB_COLORS);\n+                \/\/ XP supports alpha in some icons, and depending on device.\n+                \/\/ This should take precedence over the icon mask bits.\n+                BOOL hasAlpha = FALSE;\n+                if (IS_WINXP) {\n+                    for (int i = 0; i < nBits; i++) {\n+                        if ((colorBits[i] & 0xff000000) != 0) {\n+                            hasAlpha = TRUE;\n+                            break;\n+                        }\n@@ -1074,9 +1081,18 @@\n-            }\n-            if (!hasAlpha) {\n-                \/\/ Extract the mask bitmap\n-                long *maskBits = (long*)safe_Malloc(MAX_ICON_SIZE * MAX_ICON_SIZE * sizeof(long));\n-                GetDIBits(dc, iconInfo.hbmMask, 0, iconSize, maskBits, &bmi, DIB_RGB_COLORS);\n-                \/\/ Copy the mask alphas into the color bits\n-                for (int i = 0; i < nBits; i++) {\n-                    if (maskBits[i] == 0) {\n-                        colorBits[i] |= 0xff000000;\n+                if (!hasAlpha) {\n+                    \/\/ Extract the mask bitmap\n+                    long *maskBits = NULL;\n+                    try {\n+                        entry_point();\n+                        maskBits = (long*)safe_Malloc(MAX_ICON_SIZE * MAX_ICON_SIZE * sizeof(long));\n+                    } catch(std::bad_alloc&) {\n+                        handle_bad_alloc();\n+                    }\n+                    if (maskBits != NULL) {\n+                        GetDIBits(dc, iconInfo.hbmMask, 0, iconSize, maskBits, &bmi, DIB_RGB_COLORS);\n+                        \/\/ Copy the mask alphas into the color bits\n+                        for (int i = 0; i < nBits; i++) {\n+                            if (maskBits[i] == 0) {\n+                                colorBits[i] |= 0xff000000;\n+                            }\n+                        }\n+                        free(maskBits);\n@@ -1085,9 +1101,9 @@\n-                free(maskBits);\n-            }\n-            \/\/ Release DC\n-            ReleaseDC(NULL, dc);\n-            \/\/ Create java array\n-            iconBits = env->NewIntArray(nBits);\n-            if (!(env->ExceptionCheck())) {\n-                \/\/ Copy values to java array\n-                env->SetIntArrayRegion(iconBits, 0, nBits, colorBits);\n+                \/\/ Release DC\n+                ReleaseDC(NULL, dc);\n+                \/\/ Create java array\n+                iconBits = env->NewIntArray(nBits);\n+                if (!(env->ExceptionCheck())) {\n+                    \/\/ Copy values to java array\n+                    env->SetIntArrayRegion(iconBits, 0, nBits, colorBits);\n+                }\n+                free(colorBits);\n@@ -1095,3 +1111,0 @@\n-            free(colorBits);\n-\n-            CATCH_BAD_ALLOC_RET(NULL);\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/ShellFolder2.cpp","additions":46,"deletions":33,"binary":false,"changes":79,"status":"modified"}]}