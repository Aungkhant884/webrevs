{"files":[{"patch":"@@ -523,2 +523,2 @@\n-        synchronized (lock) { \/\/ ensure one starter\n-            ensureStartable();\n+        ensureStartable();\n+        try {\n@@ -526,10 +526,3 @@\n-                try {\n-                    mbean.startRecording(recordingId);\n-                } catch (IllegalStateException ise) {\n-                    throw ise;\n-                }\n-                startDownload();\n-            } catch (Exception e) {\n-                ManagementSupport.logDebug(e.getMessage());\n-                close();\n-                return;\n+                mbean.startRecording(recordingId);\n+            } catch (IllegalStateException ise) {\n+                throw ise;\n@@ -537,2 +530,5 @@\n-            stream.start();\n-            started = true;\n+            startDownload();\n+        } catch (Exception e) {\n+            ManagementSupport.logDebug(e.getMessage());\n+            close();\n+            return;\n@@ -540,0 +536,1 @@\n+        stream.start();\n@@ -544,11 +541,8 @@\n-        synchronized (lock) { \/\/ ensure one starter\n-            ensureStartable();\n-            stream.startAsync();\n-            try {\n-                mbean.startRecording(recordingId);\n-                startDownload();\n-            } catch (Exception e) {\n-                ManagementSupport.logDebug(e.getMessage());\n-                close();\n-            }\n-            started = true;\n+        ensureStartable();\n+        stream.startAsync();\n+        try {\n+            mbean.startRecording(recordingId);\n+            startDownload();\n+        } catch (Exception e) {\n+            ManagementSupport.logDebug(e.getMessage());\n+            close();\n@@ -559,5 +553,8 @@\n-        if (closed) {\n-            throw new IllegalStateException(\"Event stream is closed\");\n-        }\n-        if (started) {\n-            throw new IllegalStateException(\"Event stream can only be started once\");\n+        synchronized (lock) {\n+            if (closed) {\n+                throw new IllegalStateException(\"Event stream is closed\");\n+            }\n+            if (started) {\n+                throw new IllegalStateException(\"Event stream can only be started once\");\n+            }\n+            started = true;\n","filename":"src\/jdk.management.jfr\/share\/classes\/jdk\/management\/jfr\/RemoteRecordingStream.java","additions":27,"deletions":30,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.jmx.streaming;\n+\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.util.concurrent.CountDownLatch;\n+\n+import javax.management.MBeanServerConnection;\n+\n+import jdk.management.jfr.RemoteRecordingStream;\n+\n+\/**\n+ * @test\n+ * @key jfr\n+ * @summary Sanity tests RemoteRecordingStream::start()\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main\/othervm jdk.jfr.jmx.streaming.TestStart\n+ *\/\n+public class TestStart {\n+\n+    private final static MBeanServerConnection CONNECTION = ManagementFactory.getPlatformMBeanServer();\n+\n+    public static void main(String... args) throws Exception {\n+        testStart();\n+        testStartTwice();\n+        testStartClosed();\n+    }\n+\n+    private static void testStart() throws IOException {\n+        try (var r = new RemoteRecordingStream(CONNECTION)) {\n+            r.onFlush(() -> {\n+                System.out.print(\"Started.\");\n+                r.close();\n+            });\n+            System.out.println(\"About to start ...\");\n+            r.start();\n+            System.out.println(\"Finished!\");\n+        }\n+    }\n+\n+    private static void testStartTwice() throws Exception {\n+        var latch = new CountDownLatch(1);\n+        try (var r = new RemoteRecordingStream(CONNECTION)) {\n+            r.onFlush(() -> latch.countDown());\n+            Runnable starter = () -> {\n+                r.start();\n+            };\n+            new Thread(starter).start();\n+            latch.await();\n+            try {\n+                r.start();\n+            } catch (IllegalStateException ise) {\n+                \/\/ OK, as expected\n+                return;\n+            }\n+            throw new Exception(\"Expected IllegalStateException when starting same stream twice\");\n+        }\n+    }\n+\n+    private static void testStartClosed() throws Exception {\n+        var latch = new CountDownLatch(1);\n+        try (var r = new RemoteRecordingStream(CONNECTION)) {\n+            r.onFlush(() -> latch.countDown());\n+            Runnable starter = () -> {\n+                r.start();\n+            };\n+            new Thread(starter).start();\n+            latch.await();\n+            r.close();\n+            try {\n+                r.start();\n+            } catch (IllegalStateException ise) {\n+                \/\/ OK, as expected\n+                return;\n+            }\n+            throw new Exception(\"Expected IllegalStateException when starting closed stream\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/streaming\/TestStart.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"}]}