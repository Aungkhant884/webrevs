{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -298,7 +298,1 @@\n-        synchronized (this) {\n-\n-            if (this.active != active) {\n-                this.active = active;\n-                \/\/sendEvents = true;\n-            }\n-        }\n+        this.active = active;\n@@ -327,6 +321,3 @@\n-        synchronized (this) {\n-\n-            if (this.started != started) {\n-                this.started = started;\n-                sendEvents = true;\n-            }\n+        if (this.started != started) {\n+            this.started = started;\n+            sendEvents = true;\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/AbstractDataLine.java","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -162,5 +162,3 @@\n-        synchronized (this) {\n-            if (this.open != open) {\n-                this.open = open;\n-                sendEvents = true;\n-            }\n+        if (this.open != open) {\n+            this.open = open;\n+            sendEvents = true;\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/AbstractLine.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1195,1 +1195,1 @@\n-        public synchronized void setMicrosecondPosition(long microseconds) {\n+        public void setMicrosecondPosition(long microseconds) {\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/DirectAudioDevice.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.sound.sampled.AudioFormat;\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.Clip;\n+import javax.sound.sampled.LineUnavailableException;\n+\n+\/**\n+ * @test\n+ * @bug 8266421\n+ * @summary Tests that Clip.setFramePosition\/setMicrosecondPosition do not hang.\n+ *\/\n+public final class SetPositionHang implements Runnable {\n+\n+    private static volatile boolean testFramePosition;\n+    private final Clip clip;\n+    private final String thread;\n+\n+    private SetPositionHang(String thread, Clip clip) {\n+        this.thread = thread;\n+        this.clip = clip;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        testFramePosition = false;\n+        test();\n+        testFramePosition = true;\n+        test();\n+    }\n+\n+    private static void test() throws InterruptedException {\n+        try (Clip clip = AudioSystem.getClip()) {\n+            \/\/ prepare audio data\n+            int frameCount = 441000; \/\/ lets say 10 seconds\n+            AudioFormat format = new AudioFormat(44100.0f, 16, 2, true, false);\n+            byte[] bytes = new byte[frameCount * format.getFrameSize()];\n+\n+            clip.open(format, bytes, 0, frameCount);\n+            Thread t1 = new Thread(new SetPositionHang(\"1\", clip));\n+            Thread t2 = new Thread(new SetPositionHang(\"2\", clip));\n+            Thread t3 = new Thread(new SetPositionHang(\"3\", clip));\n+            Thread t4 = new Thread(new SetPositionHang(\"4\", clip));\n+            Thread t5 = new Thread(new SetPositionHang(\"5\", clip));\n+            t1.start();\n+            t2.start();\n+            t3.start();\n+            t4.start();\n+            t5.start();\n+            t1.join();\n+            t2.join();\n+            t3.join();\n+            t4.join();\n+            t5.join();\n+        } catch (LineUnavailableException | IllegalArgumentException ignored) {\n+            \/\/ the test is not applicable\n+        }\n+    }\n+\n+    public void run() {\n+        System.out.println(\"Thread \" + thread + \" Start\");\n+        for (int i = 0; i < 100; i++) {\n+            System.out.println(\"Thread \" + thread + \" Play \"\n+                                       + System.currentTimeMillis() % 100000);\n+            playSound();\n+            try {\n+                Thread.sleep(i);\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        System.out.println(\"Thread \" + thread + \" Finish\");\n+    }\n+\n+    void playSound() {\n+        if (clip.isRunning()) {\n+            clip.stop();\n+        }\n+        if (testFramePosition) {\n+            clip.setFramePosition(0);\n+        } else {\n+            clip.setMicrosecondPosition(0);\n+        }\n+        clip.start();\n+    }\n+}\n","filename":"test\/jdk\/javax\/sound\/sampled\/Clip\/SetPositionHang.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"}]}