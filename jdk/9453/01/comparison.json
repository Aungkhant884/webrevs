{"files":[{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2021, 2022 SAP SE. All rights reserved.\n@@ -403,2 +403,0 @@\n-\n- private:\n@@ -408,0 +406,1 @@\n+  int _frame_size;\n@@ -413,1 +412,3 @@\n-    const int total_regs_amount = iterate_over_register_mask(ACTION_SAVE);\n+    const int register_save_size = iterate_over_register_mask(ACTION_COUNT_ONLY) * BytesPerWord;\n+    _frame_size = align_up(register_save_size, frame::alignment_in_bytes)\n+                  + frame::abi_reg_args_size;\n@@ -416,1 +417,3 @@\n-    __ push_frame_reg_args(total_regs_amount * BytesPerWord, R0);\n+    __ push_frame(_frame_size, R0);\n+\n+    iterate_over_register_mask(ACTION_SAVE, _frame_size);\n@@ -420,2 +423,1 @@\n-    __ pop_frame();\n-    __ restore_LR_CR(R0);\n+    iterate_over_register_mask(ACTION_RESTORE, _frame_size);\n@@ -423,1 +425,2 @@\n-    iterate_over_register_mask(ACTION_RESTORE);\n+    __ addi(R1_SP, R1_SP, _frame_size);\n+    __ restore_LR_CR(R0);\n@@ -428,2 +431,3 @@\n-    ACTION_SAVE = 0,\n-    ACTION_RESTORE = 1\n+    ACTION_SAVE,\n+    ACTION_RESTORE,\n+    ACTION_COUNT_ONLY\n@@ -432,1 +436,1 @@\n-  int iterate_over_register_mask(IterationAction action) {\n+  int iterate_over_register_mask(IterationAction action, int offset = 0) {\n@@ -457,1 +461,1 @@\n-            _masm->std(std_reg, (intptr_t) -reg_save_index * BytesPerWord, R1_SP);\n+            _masm->std(std_reg, offset - reg_save_index * BytesPerWord, R1_SP);\n@@ -459,1 +463,1 @@\n-            _masm->ld(std_reg, (intptr_t) -reg_save_index * BytesPerWord, R1_SP);\n+            _masm->ld(std_reg, offset - reg_save_index * BytesPerWord, R1_SP);\n@@ -461,1 +465,1 @@\n-            fatal(\"Sanity\");\n+            assert(action == ACTION_COUNT_ONLY, \"Sanity\");\n@@ -470,1 +474,1 @@\n-            _masm->stfd(fp_reg, (intptr_t) -reg_save_index * BytesPerWord, R1_SP);\n+            _masm->stfd(fp_reg, offset - reg_save_index * BytesPerWord, R1_SP);\n@@ -472,1 +476,1 @@\n-            _masm->lfd(fp_reg, (intptr_t) -reg_save_index * BytesPerWord, R1_SP);\n+            _masm->lfd(fp_reg, offset - reg_save_index * BytesPerWord, R1_SP);\n@@ -474,1 +478,1 @@\n-            fatal(\"Sanity\");\n+            assert(action == ACTION_COUNT_ONLY, \"Sanity\");\n@@ -479,0 +483,17 @@\n+      } else if (vm_reg->is_VectorSRegister()) {\n+        assert(SuperwordUseVSX, \"or should not reach here\");\n+        VectorSRegister vs_reg = vm_reg->as_VectorSRegister();\n+        if (vs_reg->encoding() >= VSR32->encoding() && vs_reg->encoding() <= VSR51->encoding()) {\n+          reg_save_index += 2;\n+\n+          Register spill_addr = R0;\n+          if (action == ACTION_SAVE) {\n+            _masm->addi(spill_addr, R1_SP, offset - reg_save_index * BytesPerWord);\n+            _masm->stxvd2x(vs_reg, spill_addr);\n+          } else if (action == ACTION_RESTORE) {\n+            _masm->addi(spill_addr, R1_SP, offset - reg_save_index * BytesPerWord);\n+            _masm->lxvd2x(vs_reg, spill_addr);\n+          } else {\n+            assert(action == ACTION_COUNT_ONLY, \"Sanity\");\n+          }\n+        }\n@@ -480,3 +501,1 @@\n-        if (vm_reg->is_VectorRegister()) {\n-          fatal(\"Vector registers are unsupported. Found register %s\", vm_reg->name());\n-        } else if (vm_reg->is_SpecialRegister()) {\n+        if (vm_reg->is_SpecialRegister()) {\n@@ -498,1 +517,0 @@\n- private:\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/zBarrierSetAssembler_ppc.cpp","additions":39,"deletions":21,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -257,3 +257,4 @@\n-\/\/ ----------------------------\n-\/\/ Vector-Scalar Registers\n-\/\/ ----------------------------\n+  \/\/ ----------------------------\n+  \/\/ Vector-Scalar Registers\n+  \/\/ ----------------------------\n+  \/\/ 1st 32 VSRs are aliases for the FPRs wich are already defined above.\n@@ -292,32 +293,33 @@\n-  reg_def VSR32 ( SOC, SOC, Op_VecX, 32, VMRegImpl::Bad());\n-  reg_def VSR33 ( SOC, SOC, Op_VecX, 33, VMRegImpl::Bad());\n-  reg_def VSR34 ( SOC, SOC, Op_VecX, 34, VMRegImpl::Bad());\n-  reg_def VSR35 ( SOC, SOC, Op_VecX, 35, VMRegImpl::Bad());\n-  reg_def VSR36 ( SOC, SOC, Op_VecX, 36, VMRegImpl::Bad());\n-  reg_def VSR37 ( SOC, SOC, Op_VecX, 37, VMRegImpl::Bad());\n-  reg_def VSR38 ( SOC, SOC, Op_VecX, 38, VMRegImpl::Bad());\n-  reg_def VSR39 ( SOC, SOC, Op_VecX, 39, VMRegImpl::Bad());\n-  reg_def VSR40 ( SOC, SOC, Op_VecX, 40, VMRegImpl::Bad());\n-  reg_def VSR41 ( SOC, SOC, Op_VecX, 41, VMRegImpl::Bad());\n-  reg_def VSR42 ( SOC, SOC, Op_VecX, 42, VMRegImpl::Bad());\n-  reg_def VSR43 ( SOC, SOC, Op_VecX, 43, VMRegImpl::Bad());\n-  reg_def VSR44 ( SOC, SOC, Op_VecX, 44, VMRegImpl::Bad());\n-  reg_def VSR45 ( SOC, SOC, Op_VecX, 45, VMRegImpl::Bad());\n-  reg_def VSR46 ( SOC, SOC, Op_VecX, 46, VMRegImpl::Bad());\n-  reg_def VSR47 ( SOC, SOC, Op_VecX, 47, VMRegImpl::Bad());\n-  reg_def VSR48 ( SOC, SOC, Op_VecX, 48, VMRegImpl::Bad());\n-  reg_def VSR49 ( SOC, SOC, Op_VecX, 49, VMRegImpl::Bad());\n-  reg_def VSR50 ( SOC, SOC, Op_VecX, 50, VMRegImpl::Bad());\n-  reg_def VSR51 ( SOC, SOC, Op_VecX, 51, VMRegImpl::Bad());\n-  reg_def VSR52 ( SOC, SOC, Op_VecX, 52, VMRegImpl::Bad());\n-  reg_def VSR53 ( SOC, SOC, Op_VecX, 53, VMRegImpl::Bad());\n-  reg_def VSR54 ( SOC, SOC, Op_VecX, 54, VMRegImpl::Bad());\n-  reg_def VSR55 ( SOC, SOC, Op_VecX, 55, VMRegImpl::Bad());\n-  reg_def VSR56 ( SOC, SOC, Op_VecX, 56, VMRegImpl::Bad());\n-  reg_def VSR57 ( SOC, SOC, Op_VecX, 57, VMRegImpl::Bad());\n-  reg_def VSR58 ( SOC, SOC, Op_VecX, 58, VMRegImpl::Bad());\n-  reg_def VSR59 ( SOC, SOC, Op_VecX, 59, VMRegImpl::Bad());\n-  reg_def VSR60 ( SOC, SOC, Op_VecX, 60, VMRegImpl::Bad());\n-  reg_def VSR61 ( SOC, SOC, Op_VecX, 61, VMRegImpl::Bad());\n-  reg_def VSR62 ( SOC, SOC, Op_VecX, 62, VMRegImpl::Bad());\n-  reg_def VSR63 ( SOC, SOC, Op_VecX, 63, VMRegImpl::Bad());\n+  \/\/ 2nd 32 VSRs are aliases for the VRs which are only defined here.\n+  reg_def VSR32 ( SOC, SOC, Op_VecX, 32, VSR32->as_VMReg());\n+  reg_def VSR33 ( SOC, SOC, Op_VecX, 33, VSR33->as_VMReg());\n+  reg_def VSR34 ( SOC, SOC, Op_VecX, 34, VSR34->as_VMReg());\n+  reg_def VSR35 ( SOC, SOC, Op_VecX, 35, VSR35->as_VMReg());\n+  reg_def VSR36 ( SOC, SOC, Op_VecX, 36, VSR36->as_VMReg());\n+  reg_def VSR37 ( SOC, SOC, Op_VecX, 37, VSR37->as_VMReg());\n+  reg_def VSR38 ( SOC, SOC, Op_VecX, 38, VSR38->as_VMReg());\n+  reg_def VSR39 ( SOC, SOC, Op_VecX, 39, VSR39->as_VMReg());\n+  reg_def VSR40 ( SOC, SOC, Op_VecX, 40, VSR40->as_VMReg());\n+  reg_def VSR41 ( SOC, SOC, Op_VecX, 41, VSR41->as_VMReg());\n+  reg_def VSR42 ( SOC, SOC, Op_VecX, 42, VSR42->as_VMReg());\n+  reg_def VSR43 ( SOC, SOC, Op_VecX, 43, VSR43->as_VMReg());\n+  reg_def VSR44 ( SOC, SOC, Op_VecX, 44, VSR44->as_VMReg());\n+  reg_def VSR45 ( SOC, SOC, Op_VecX, 45, VSR45->as_VMReg());\n+  reg_def VSR46 ( SOC, SOC, Op_VecX, 46, VSR46->as_VMReg());\n+  reg_def VSR47 ( SOC, SOC, Op_VecX, 47, VSR47->as_VMReg());\n+  reg_def VSR48 ( SOC, SOC, Op_VecX, 48, VSR48->as_VMReg());\n+  reg_def VSR49 ( SOC, SOC, Op_VecX, 49, VSR49->as_VMReg());\n+  reg_def VSR50 ( SOC, SOC, Op_VecX, 50, VSR50->as_VMReg());\n+  reg_def VSR51 ( SOC, SOC, Op_VecX, 51, VSR51->as_VMReg());\n+  reg_def VSR52 ( SOC, SOC, Op_VecX, 52, VSR52->as_VMReg());\n+  reg_def VSR53 ( SOC, SOC, Op_VecX, 53, VSR53->as_VMReg());\n+  reg_def VSR54 ( SOC, SOC, Op_VecX, 54, VSR54->as_VMReg());\n+  reg_def VSR55 ( SOC, SOC, Op_VecX, 55, VSR55->as_VMReg());\n+  reg_def VSR56 ( SOC, SOC, Op_VecX, 56, VSR56->as_VMReg());\n+  reg_def VSR57 ( SOC, SOC, Op_VecX, 57, VSR57->as_VMReg());\n+  reg_def VSR58 ( SOC, SOC, Op_VecX, 58, VSR58->as_VMReg());\n+  reg_def VSR59 ( SOC, SOC, Op_VecX, 59, VSR59->as_VMReg());\n+  reg_def VSR60 ( SOC, SOC, Op_VecX, 60, VSR60->as_VMReg());\n+  reg_def VSR61 ( SOC, SOC, Op_VecX, 61, VSR61->as_VMReg());\n+  reg_def VSR62 ( SOC, SOC, Op_VecX, 62, VSR62->as_VMReg());\n+  reg_def VSR63 ( SOC, SOC, Op_VecX, 63, VSR63->as_VMReg());\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":37,"deletions":35,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2022 SAP SE. All rights reserved.\n@@ -47,2 +47,8 @@\n-  for ( ; i < ConcreteRegisterImpl::number_of_registers; i++) {\n-    regName[i] = \"NON-GPR-FPR\";\n+\n+  VectorSRegister vsreg = ::as_VectorSRegister(0);\n+  for ( ; i < ConcreteRegisterImpl::max_vsr; ) {\n+    regName[i++] = vsreg->name();\n+  }\n+\n+  for ( ; i < ConcreteRegisterImpl::number_of_registers; ) {\n+    regName[i++] = \"NON-GPR-FPR-VSR\";\n","filename":"src\/hotspot\/cpu\/ppc\/vmreg_ppc.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022 SAP SE. All rights reserved.\n@@ -38,1 +38,1 @@\n-inline bool is_VectorRegister() {\n+inline bool is_VectorSRegister() {\n@@ -63,0 +63,5 @@\n+inline VectorSRegister as_VectorSRegister() {\n+  assert(is_VectorSRegister(), \"must be\");\n+  return ::as_VectorSRegister(value() - ConcreteRegisterImpl::max_fpr);\n+}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/vmreg_ppc.hpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"}]}