{"files":[{"patch":"@@ -63,0 +63,1 @@\n+#include \"runtime\/osInfo.hpp\"\n@@ -163,1 +164,0 @@\n-int       os::Aix::_page_size = -1;\n@@ -1754,12 +1754,0 @@\n-int os::vm_page_size() {\n-  \/\/ Seems redundant as all get out.\n-  assert(os::Aix::page_size() != -1, \"must call os::init\");\n-  return os::Aix::page_size();\n-}\n-\n-\/\/ Aix allocates memory by pages.\n-int os::vm_allocation_granularity() {\n-  assert(os::Aix::page_size() != -1, \"must call os::init\");\n-  return os::Aix::page_size();\n-}\n-\n@@ -2231,0 +2219,5 @@\n+static void set_page_size(int page_size) {\n+  OSInfo::set_vm_page_size(page_size);\n+  OSInfo::set_vm_allocation_granularity(page_size);\n+}\n+\n@@ -2287,1 +2280,1 @@\n-        Aix::_page_size = 64*K;\n+        set_page_size(64*K);\n@@ -2290,1 +2283,1 @@\n-        Aix::_page_size = 4*K;\n+        set_page_size(4*K);\n@@ -2296,1 +2289,1 @@\n-      Aix::_page_size = 4*K;\n+      set_page_size(4*K);\n@@ -2305,1 +2298,1 @@\n-    Aix::_page_size = 64*K;\n+    set_page_size(64*K);\n@@ -2312,1 +2305,1 @@\n-  _page_sizes.add(Aix::_page_size);\n+  _page_sizes.add(os::vm_page_size);\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":11,"deletions":18,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-  static int _page_size;\n@@ -89,5 +88,0 @@\n-  static int page_size(void) {\n-    assert(_page_size != -1, \"not initialized\");\n-    return _page_size;\n-  }\n-\n","filename":"src\/hotspot\/os\/aix\/os_aix.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+#include \"runtime\/osInfo.hpp\"\n@@ -124,1 +125,0 @@\n-int os::Bsd::_page_size = -1;\n@@ -1480,12 +1480,0 @@\n-int os::vm_page_size() {\n-  \/\/ Seems redundant as all get out\n-  assert(os::Bsd::page_size() != -1, \"must call os::init\");\n-  return os::Bsd::page_size();\n-}\n-\n-\/\/ Solaris allocates memory by pages.\n-int os::vm_allocation_granularity() {\n-  assert(os::Bsd::page_size() != -1, \"must call os::init\");\n-  return os::Bsd::page_size();\n-}\n-\n@@ -1669,1 +1657,1 @@\n-  char* bottom = (char*)align_down((intptr_t)addr, os::Bsd::page_size());\n+  char* bottom = (char*)align_down((intptr_t)addr, os::vm_page_size());\n@@ -1678,1 +1666,1 @@\n-  size = align_up(pointer_delta(addr, bottom, 1) + size, os::Bsd::page_size());\n+  size = align_up(pointer_delta(addr, bottom, 1) + size, os::vm_page_size());\n@@ -1932,3 +1920,5 @@\n-  Bsd::set_page_size(getpagesize());\n-  if (Bsd::page_size() == -1) {\n-    fatal(\"os_bsd.cpp: os::init: sysconf failed (%s)\", os::strerror(errno));\n+  int page_size = getpagesize();\n+  OSInfo::set_vm_page_size(page_size);\n+  OSInfo::set_vm_allocation_granularity(page_size);\n+  if (os::vm_page_size() <= 0) {\n+    fatal(\"os_bsd.cpp: os::init: getpagesize() failed (%s)\", os::strerror(errno));\n@@ -1936,1 +1926,1 @@\n-  _page_sizes.add(Bsd::page_size());\n+  _page_sizes.add(os::vm_page_size());\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":9,"deletions":19,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-  static int _page_size;\n@@ -65,3 +64,0 @@\n-  static int page_size(void)                                        { return _page_size; }\n-  static void set_page_size(int val)                                { _page_size = val; }\n-\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+#include \"runtime\/osInfo.hpp\"\n@@ -165,1 +166,0 @@\n-int os::Linux::_page_size = -1;\n@@ -608,2 +608,2 @@\n-  bottom = (address)align_down((uintptr_t)bottom, os::Linux::page_size());\n-  bottom += os::Linux::page_size() - 1;\n+  bottom = (address)align_down((uintptr_t)bottom, os::vm_page_size());\n+  bottom += os::vm_page_size() - 1;\n@@ -1081,2 +1081,2 @@\n-  if (stack_size >= (size_t)(3 * page_size())) {\n-    stack_size -= 2 * page_size();\n+  if (stack_size >= (size_t)(3 * os::vm_page_size())) {\n+    stack_size -= 2 * os::vm_page_size();\n@@ -1238,1 +1238,1 @@\n-    stack_size -= 16 * page_size();\n+    stack_size -= 16 * os::vm_page_size();\n@@ -1242,1 +1242,1 @@\n-  stack_top = align_up(stack_top, page_size());\n+  stack_top = align_up(stack_top, os::vm_page_size());\n@@ -1252,1 +1252,1 @@\n-  _initial_thread_stack_size = align_down(_initial_thread_stack_size, page_size());\n+  _initial_thread_stack_size = align_down(_initial_thread_stack_size, os::vm_page_size());\n@@ -2597,12 +2597,0 @@\n-int os::vm_page_size() {\n-  \/\/ Seems redundant as all get out\n-  assert(os::Linux::page_size() != -1, \"must call os::init\");\n-  return os::Linux::page_size();\n-}\n-\n-\/\/ Solaris allocates memory by pages.\n-int os::vm_allocation_granularity() {\n-  assert(os::Linux::page_size() != -1, \"must call os::init\");\n-  return os::Linux::page_size();\n-}\n-\n@@ -3015,1 +3003,1 @@\n-  return ((thr_type == java_thread || thr_type == compiler_thread) ? 0 : page_size());\n+  return ((thr_type == java_thread || thr_type == compiler_thread) ? 0 : os::vm_page_size());\n@@ -3426,1 +3414,1 @@\n-  char* bottom = (char*)align_down((intptr_t)addr, os::Linux::page_size());\n+  char* bottom = (char*)align_down((intptr_t)addr, os::vm_page_size());\n@@ -3435,1 +3423,1 @@\n-  size = align_up(pointer_delta(addr, bottom, 1) + size, os::Linux::page_size());\n+  size = align_up(pointer_delta(addr, bottom, 1) + size, os::vm_page_size());\n@@ -4318,1 +4306,1 @@\n-  size_t size = os::Linux::page_size();\n+  size_t size = os::vm_page_size();\n@@ -4343,2 +4331,4 @@\n-  Linux::set_page_size(sysconf(_SC_PAGESIZE));\n-  if (Linux::page_size() == -1) {\n+  int page_size = sysconf(_SC_PAGESIZE);\n+  OSInfo::set_vm_page_size(page_size);\n+  OSInfo::set_vm_allocation_granularity(page_size);\n+  if (os::vm_page_size() <= 0) {\n@@ -4348,1 +4338,1 @@\n-  _page_sizes.add(Linux::page_size());\n+  _page_sizes.add(os::vm_page_size());\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":17,"deletions":27,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -58,1 +58,0 @@\n-  static int _page_size;\n@@ -135,3 +134,0 @@\n-  static int page_size(void)                                        { return _page_size; }\n-  static void set_page_size(int val)                                { _page_size = val; }\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+#include \"runtime\/osInfo.hpp\"\n@@ -2865,5 +2866,0 @@\n-int os::vm_page_size() { return os::win32::vm_page_size(); }\n-int os::vm_allocation_granularity() {\n-  return os::win32::vm_allocation_granularity();\n-}\n-\n@@ -3165,1 +3161,1 @@\n-  const size_t default_page_size = (size_t) vm_page_size();\n+  const size_t default_page_size = (size_t) os::vm_page_size();\n@@ -3884,2 +3880,0 @@\n-int    os::win32::_vm_page_size              = 0;\n-int    os::win32::_vm_allocation_granularity = 0;\n@@ -3901,2 +3895,2 @@\n-  _vm_page_size    = si.dwPageSize;\n-  _vm_allocation_granularity = si.dwAllocationGranularity;\n+  OSInfo::set_vm_page_size(si.dwPageSize);\n+  OSInfo::set_vm_allocation_granularity(si.dwAllocationGranularity);\n@@ -4216,1 +4210,1 @@\n-  _page_sizes.add(win32::vm_page_size());\n+  _page_sizes.add(os::vm_page_size());\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -40,2 +40,0 @@\n-  static int    _vm_page_size;\n-  static int    _vm_allocation_granularity;\n@@ -88,6 +86,0 @@\n-  \/\/ Returns the byte size of a virtual memory page\n-  static int vm_page_size() { return _vm_page_size; }\n-\n-  \/\/ Returns the size in bytes of memory blocks which can be allocated.\n-  static int vm_allocation_granularity() { return _vm_allocation_granularity; }\n-\n","filename":"src\/hotspot\/os\/windows\/os_windows.hpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  const int page_size = os::win32::vm_page_size();\n+  const int page_size = os::vm_page_size();\n","filename":"src\/hotspot\/os\/windows\/os_windows.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -239,1 +239,1 @@\n-  size_t page_bytes = os::Linux::page_size();\n+  size_t page_bytes = os::vm_page_size();\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/os_linux_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,3 @@\n-#include \"runtime\/os.hpp\"\n+#include \"memory\/allocation.hpp\"\n+#include \"oops\/oopsHierarchy.hpp\"\n+#include \"runtime\/osInfo.hpp\"\n@@ -30,0 +32,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -1264,1 +1267,1 @@\n-    assert(target == NULL || (uintptr_t)target >= (uintptr_t)os::vm_page_size(), INTPTR_FORMAT, (intptr_t)target);\n+    assert(target == NULL || (uintptr_t)target >= (uintptr_t)OSInfo::vm_page_size(), INTPTR_FORMAT, (intptr_t)target);\n","filename":"src\/hotspot\/share\/code\/relocInfo.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+class Mutex;\n+\n","filename":"src\/hotspot\/share\/code\/stubs.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/osInfo.hpp\"\n@@ -374,1 +375,1 @@\n-  static int    vm_page_size();\n+  static int vm_page_size() { return OSInfo::vm_page_size(); }\n@@ -415,1 +416,2 @@\n-  static int    vm_allocation_granularity();\n+  static int vm_allocation_granularity() { return OSInfo::vm_allocation_granularity(); }\n+\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"runtime\/osInfo.hpp\"\n+\n+int OSInfo::_vm_page_size = -1;\n+int OSInfo::_vm_allocation_granularity = -1;\n+\n","filename":"src\/hotspot\/share\/runtime\/osInfo.cpp","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_RUNTIME_OSINFO_HPP\n+#define SHARE_RUNTIME_OSINFO_HPP\n+\n+#include \"memory\/allStatic.hpp\"\n+#include \"utilities\/debug.hpp\"\n+\n+\/\/ Static information about the operation system. Initialized exactly once\n+\/\/ at VM start-up and never changes again.\n+class OSInfo : AllStatic {\n+  static int    _vm_page_size;\n+  static int    _vm_allocation_granularity;\n+\n+public:\n+  \/\/ Returns the byte size of a virtual memory page\n+  static int vm_page_size() { return _vm_page_size; }\n+\n+  \/\/ Returns the size in bytes of memory blocks which can be allocated.\n+  static int vm_allocation_granularity() { return _vm_allocation_granularity; }\n+\n+  static void set_vm_page_size(int n) {\n+    assert(_vm_page_size < 0, \"init only once\");\n+    assert(n > 0, \"sanity\");\n+    _vm_page_size = n;\n+  }\n+\n+  static void set_vm_allocation_granularity(int n) {\n+    assert(_vm_allocation_granularity < 0, \"init only once\");\n+    assert(n > 0, \"sanity\");\n+    _vm_allocation_granularity = n;\n+  }\n+};\n+\n+#endif \/\/ SHARE_RUNTIME_OSINFO_HPP\n","filename":"src\/hotspot\/share\/runtime\/osInfo.hpp","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"runtime\/os.hpp\"\n+#include \"runtime\/osInfo.hpp\"\n@@ -66,1 +66,1 @@\n-  static bool    is_poll_address(address addr)  { return addr >= _polling_page && addr < (_polling_page + os::vm_page_size()); }\n+  static bool    is_poll_address(address addr)  { return addr >= _polling_page && addr < (_polling_page + OSInfo::vm_page_size()); }\n","filename":"src\/hotspot\/share\/runtime\/safepointMechanism.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+class frame;\n","filename":"src\/hotspot\/share\/runtime\/stackValue.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}