{"files":[{"patch":"@@ -110,4 +110,1 @@\n-        private static final MessageDigest MD5_DIGEST;\n-\n-        static {\n-            MessageDigest digest;\n+        private static final ThreadLocal<MessageDigest> MD5_DIGEST = ThreadLocal.withInitial(() -> {\n@@ -115,1 +112,1 @@\n-                digest = MessageDigest.getInstance(\"MD5\");\n+                return MessageDigest.getInstance(\"MD5\");\n@@ -117,1 +114,1 @@\n-                digest = null;\n+                return null;\n@@ -119,3 +116,1 @@\n-\n-            MD5_DIGEST = digest;\n-        }\n+        });\n@@ -125,1 +120,1 @@\n-            if ((digest = MD5_DIGEST) == null) throw new InternalError(\"MD5 not supported\");\n+            if ((digest = MD5_DIGEST.get()) == null) throw new InternalError(\"MD5 not supported\");\n","filename":"src\/java.base\/share\/classes\/java\/util\/UUID.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.security;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Tests different ways to get instances of MD5 {@link MessageDigest}.\n+ *\/\n+@State(Scope.Thread)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 10, time = 1)\n+@Fork(value = 3)\n+public class Md5MessageDigestLookup {\n+\n+    @Benchmark\n+    public MessageDigest messageDigestGetInstance() {\n+        try {\n+            return MessageDigest.getInstance(\"MD5\");\n+        } catch (final NoSuchAlgorithmException nsae) {\n+            throw new InternalError(\"MD5 not supported\", nsae);\n+        }\n+    }\n+\n+    @Benchmark\n+    public MessageDigest messageDigestGetInstanceNoTryCatch() throws NoSuchAlgorithmException {\n+        return MessageDigest.getInstance(\"MD5\");\n+    }\n+\n+    @Benchmark\n+    public MessageDigest md5DigestOrThrow() {\n+        return Md5Digest.orThrow();\n+    }\n+\n+    private static final class Md5Digest {\n+        private static final ThreadLocal<MessageDigest> MD5_DIGEST = ThreadLocal.withInitial(() -> {\n+            try {\n+                return MessageDigest.getInstance(\"MD5\");\n+            } catch (NoSuchAlgorithmException e) {\n+                return null;\n+            }\n+        });\n+\n+        static MessageDigest orThrow() {\n+            final MessageDigest digest;\n+            if ((digest = MD5_DIGEST.get()) == null) throw new InternalError(\"MD5 not supported\");\n+\n+            return digest;\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/Md5MessageDigestLookup.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}