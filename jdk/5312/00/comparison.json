{"files":[{"patch":"@@ -343,3 +343,2 @@\n-                JCCase last = lastCase;\n-                if (last.labels.stream().noneMatch(l -> l.hasTag(Tag.DEFAULTCASELABEL))) {\n-                    last.labels = last.labels.prepend(makeLit(syms.botType, null));\n+                if (cases.stream().flatMap(c -> c.labels.stream()).noneMatch(l -> l.hasTag(Tag.DEFAULTCASELABEL))) {\n+                    lastCase.labels = lastCase.labels.prepend(makeLit(syms.botType, null));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * @bug 8262891\n+ * @bug 8262891 8272776\n@@ -60,0 +60,3 @@\n+        assertEquals(0, matchingSwitch13(\"\"));\n+        assertEquals(1, matchingSwitch13(0.0));\n+        assertEquals(2, matchingSwitch13(null));\n@@ -162,0 +165,11 @@\n+    private int matchingSwitch13(Object obj) {\n+        try {\n+            switch (obj) {\n+                default: return 1;\n+                case String s: return 0;\n+            }\n+        } catch (NullPointerException ex) {\n+            return 2;\n+        }\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/NullSwitch.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"}]}