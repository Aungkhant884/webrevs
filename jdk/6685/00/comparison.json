{"files":[{"patch":"@@ -760,0 +760,6 @@\n+        if (sym.kind == PCK) {\n+            TypeSymbol pkgInfo = ((PackageSymbol) sym).package_info;\n+            if (pkgInfo != null) {\n+                pkgInfo.complete();\n+            }\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/JavacElements.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -54,3 +54,3 @@\n- * <pre>\n- *    public boolean <b>run<\/b>(DocletEnvironment environment)\n- * <\/pre>\n+ * {@snippet id=\"entry-point\" type=java :\n+ *    public boolean run(DocletEnvironment environment) \/\/ @highlight substring=\"run\"\n+ * }\n@@ -188,2 +188,22 @@\n- * <pre>\n- * \/\/ note imports deleted for clarity\n+ *\n+ * {@snippet lang=java id=\"Example.java\" :\n+ * \/\/ @replace region=imports replacement=\" \/\/ Note: imports deleted for clarity\"\n+ * import com.sun.source.doctree.DocCommentTree;\n+ * import com.sun.source.util.DocTrees;\n+ * import jdk.javadoc.doclet.Doclet;\n+ * import jdk.javadoc.doclet.DocletEnvironment;\n+ * import jdk.javadoc.doclet.Reporter;\n+ *\n+ * import javax.lang.model.SourceVersion;\n+ * import javax.lang.model.element.Element;\n+ * import javax.lang.model.element.TypeElement;\n+ * import javax.lang.model.util.ElementFilter;\n+ * import javax.tools.Diagnostic.Kind;\n+ * import java.io.IOException;\n+ * import java.io.PrintWriter;\n+ * import java.util.List;\n+ * import java.util.Locale;\n+ * import java.util.Set;\n+ * \/\/ @end\n+ *\n+ *\n@@ -191,101 +211,107 @@\n- *    Reporter reporter;\n- *    &#64;Override\n- *    public void init(Locale locale, Reporter reporter) {\n- *        reporter.print(Kind.NOTE, \"Doclet using locale: \" + locale);\n- *        this.reporter = reporter;\n- *    }\n- *\n- *    public void printElement(DocTrees trees, Element e) {\n- *        DocCommentTree docCommentTree = trees.getDocCommentTree(e);\n- *        if (docCommentTree != null) {\n- *            System.out.println(\"Element (\" + e.getKind() + \": \"\n- *                    + e + \") has the following comments:\");\n- *            System.out.println(\"Entire body: \" + docCommentTree.getFullBody());\n- *            System.out.println(\"Block tags: \" + docCommentTree.getBlockTags());\n- *        }\n- *    }\n- *\n- *    &#64;Override\n- *    public boolean run(DocletEnvironment docEnv) {\n- *        reporter.print(Kind.NOTE, \"overviewfile: \" + overviewfile);\n- *        \/\/ get the DocTrees utility class to access document comments\n- *        DocTrees docTrees = docEnv.getDocTrees();\n- *\n- *        \/\/ location of an element in the same directory as overview.html\n- *        try {\n- *            Element e = ElementFilter.typesIn(docEnv.getSpecifiedElements()).iterator().next();\n- *            DocCommentTree docCommentTree\n- *                    = docTrees.getDocCommentTree(e, overviewfile);\n- *            if (docCommentTree != null) {\n- *                System.out.println(\"Overview html: \" + docCommentTree.getFullBody());\n- *            }\n- *        } catch (IOException missing) {\n- *            reporter.print(Kind.ERROR, \"No overview.html found.\");\n- *        }\n- *\n- *        for (TypeElement t : ElementFilter.typesIn(docEnv.getIncludedElements())) {\n- *            System.out.println(t.getKind() + \":\" + t);\n- *            for (Element e : t.getEnclosedElements()) {\n- *                printElement(docTrees, e);\n- *            }\n- *        }\n- *        return true;\n- *    }\n- *\n- *    &#64;Override\n- *    public String getName() {\n- *        return \"Example\";\n- *    }\n- *\n- *    private String overviewfile;\n- *\n- *    &#64;Override\n- *    public Set&lt;? extends Option&gt; getSupportedOptions() {\n- *        Option[] options = {\n- *            new Option() {\n- *                private final List&lt;String&gt; someOption = Arrays.asList(\n- *                        \"-overviewfile\",\n- *                        \"--overview-file\",\n- *                        \"-o\"\n- *                );\n- *\n- *                &#64;Override\n- *                public int getArgumentCount() {\n- *                    return 1;\n- *                }\n- *\n- *                &#64;Override\n- *                public String getDescription() {\n- *                    return \"an option with aliases\";\n- *                }\n- *\n- *                &#64;Override\n- *                public Option.Kind getKind() {\n- *                    return Option.Kind.STANDARD;\n- *                }\n- *\n- *                &#64;Override\n- *                public List&lt;String&gt; getNames() {\n- *                    return someOption;\n- *                }\n- *\n- *                &#64;Override\n- *                public String getParameters() {\n- *                    return \"file\";\n- *                }\n- *\n- *                &#64;Override\n- *                public boolean process(String opt, List&lt;String&gt; arguments) {\n- *                    overviewfile = arguments.get(0);\n- *                    return true;\n- *                }\n- *            }\n- *        };\n- *        return new HashSet&lt;&gt;(Arrays.asList(options));\n- *    }\n- *\n- *    &#64;Override\n- *    public SourceVersion getSupportedSourceVersion() {\n- *        \/\/ support the latest release\n- *        return SourceVersion.latest();\n- *    }\n+ *     private Reporter reporter;\n+ *     private PrintWriter stdout;\n+ *\n+ *     @Override\n+ *     public void init(Locale locale, Reporter reporter) {\n+ *         reporter.print(Kind.NOTE, \"Doclet using locale: \" + locale);\n+ *         this.reporter = reporter;\n+ *         stdout = reporter.getStandardWriter();\n+ *     }\n+ *\n+ *     public void printElement(DocTrees trees, Element e) {\n+ *         DocCommentTree docCommentTree = trees.getDocCommentTree(e);\n+ *         if (docCommentTree != null) {\n+ *             stdout.println(\"Element (\" + e.getKind() + \": \"\n+ *                     + e + \") has the following comments:\");\n+ *             stdout.println(\"Entire body: \" + docCommentTree.getFullBody());\n+ *             stdout.println(\"Block tags: \" + docCommentTree.getBlockTags());\n+ *         }\n+ *     }\n+ *\n+ *     @Override\n+ *     public boolean run(DocletEnvironment docEnv) {\n+ *         reporter.print(Kind.NOTE, \"overviewFile: \" + overviewFile);\n+ *\n+ *         \/\/ get the DocTrees utility class to access document comments\n+ *         DocTrees docTrees = docEnv.getDocTrees();\n+ *\n+ *         \/\/ location of an element in the same directory as overview.html\n+ *         try {\n+ *             Element e = ElementFilter.typesIn(docEnv.getSpecifiedElements()).iterator().next();\n+ *             DocCommentTree docCommentTree\n+ *                     = docTrees.getDocCommentTree(e, overviewFile);\n+ *             if (docCommentTree != null) {\n+ *                 stdout.println(\"Overview html: \" + docCommentTree.getFullBody());\n+ *             }\n+ *         } catch (IOException missing) {\n+ *             reporter.print(Kind.ERROR, \"No overview.html found.\");\n+ *         }\n+ *\n+ *         for (TypeElement t : ElementFilter.typesIn(docEnv.getIncludedElements())) {\n+ *             stdout.println(t.getKind() + \":\" + t);\n+ *             for (Element e : t.getEnclosedElements()) {\n+ *                 printElement(docTrees, e);\n+ *             }\n+ *         }\n+ *         return true;\n+ *     }\n+ *\n+ *     @Override\n+ *     public String getName() {\n+ *         return \"Example\";\n+ *     }\n+ *\n+ *     private String overviewFile;\n+ *\n+ *     @Override\n+ *     public Set<? extends Option> getSupportedOptions() {\n+ *         Option[] options = {\n+ *             new Option() {\n+ *                 private final List<String> someOption = List.of(\n+ *                         \"--overview-file\",\n+ *                         \"-overviewfile\",\n+ *                         \"-o\"\n+ *                 );\n+ *\n+ *                 @Override\n+ *                 public int getArgumentCount() {\n+ *                     return 1;\n+ *                 }\n+ *\n+ *                 @Override\n+ *                 public String getDescription() {\n+ *                     return \"an option with aliases\";\n+ *                 }\n+ *\n+ *                 @Override\n+ *                 public Option.Kind getKind() {\n+ *                     return Option.Kind.STANDARD;\n+ *                 }\n+ *\n+ *                 @Override\n+ *                 public List<String> getNames() {\n+ *                     return someOption;\n+ *                 }\n+ *\n+ *                 @Override\n+ *                 public String getParameters() {\n+ *                     return \"file\";\n+ *                 }\n+ *\n+ *                 @Override\n+ *                 public boolean process(String opt, List<String> arguments) {\n+ *                     overviewFile = arguments.get(0);\n+ *                     return true;\n+ *                 }\n+ *             }\n+ *         };\n+ *\n+ *         return Set.of(options);\n+ *     }\n+ *\n+ *     @Override\n+ *     public SourceVersion getSupportedSourceVersion() {\n+ *         \/\/ support the latest release\n+ *         return SourceVersion.latest();\n+ *     }\n+ * }\n@@ -293,1 +319,1 @@\n- * <\/pre>\n+ *\n@@ -296,6 +322,7 @@\n- * <pre>\n- *     javadoc -doclet Example &#92;\n- *       -overviewfile overview.html &#92;\n- *       -sourcepath source-location &#92;\n- *       source-location\/Example.java\n- * <\/pre>\n+ * {@snippet id=\"run-doclet\":\n+ *     javadoc -docletpath doclet-classes \\     \/\/ @highlight substring=\"doclet-classes \" type=italic\n+ *       -doclet Example \\\n+ *       --overview-file overview.html \\\n+ *       --source-path source-location \\        \/\/ @highlight region substring=\"source-location\" type=italic\n+ *       source-location\/Example.java           \/\/ @end\n+ *     }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/doclet\/package-info.java","additions":140,"deletions":113,"binary":false,"changes":253,"status":"modified"}]}