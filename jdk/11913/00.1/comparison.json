{"files":[{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.io.JdkConsoleImpl;\n@@ -36,2 +37,0 @@\n-import sun.nio.cs.StreamDecoder;\n-import sun.nio.cs.StreamEncoder;\n@@ -85,1 +84,1 @@\n- * <blockquote><pre>{@code\n+ * {@snippet lang=java :\n@@ -93,1 +92,1 @@\n- * }<\/pre><\/blockquote>\n+ * }\n@@ -98,0 +97,5 @@\n+public sealed class Console implements Flushable permits ProxyingConsole {\n+    \/**\n+     * Package private no-arg constructor.\n+     *\/\n+    Console() {}\n@@ -99,8 +103,6 @@\n-public class Console implements Flushable\n-{\n-   \/**\n-    * Retrieves the unique {@link java.io.PrintWriter PrintWriter} object\n-    * associated with this console.\n-    *\n-    * @return  The printwriter associated with this console\n-    *\/\n+    \/**\n+     * Retrieves the unique {@link java.io.PrintWriter PrintWriter} object\n+     * associated with this console.\n+     *\n+     * @return  The printwriter associated with this console\n+     *\/\n@@ -108,1 +110,1 @@\n-        return pw;\n+        throw newUnsupportedOperationException();\n@@ -111,31 +113,31 @@\n-   \/**\n-    * Retrieves the unique {@link java.io.Reader Reader} object associated\n-    * with this console.\n-    * <p>\n-    * This method is intended to be used by sophisticated applications, for\n-    * example, a {@link java.util.Scanner} object which utilizes the rich\n-    * parsing\/scanning functionality provided by the {@code Scanner}:\n-    * <blockquote><pre>\n-    * Console con = System.console();\n-    * if (con != null) {\n-    *     Scanner sc = new Scanner(con.reader());\n-    *     ...\n-    * }\n-    * <\/pre><\/blockquote>\n-    * <p>\n-    * For simple applications requiring only line-oriented reading, use\n-    * {@link #readLine}.\n-    * <p>\n-    * The bulk read operations {@link java.io.Reader#read(char[]) read(char[]) },\n-    * {@link java.io.Reader#read(char[], int, int) read(char[], int, int) } and\n-    * {@link java.io.Reader#read(java.nio.CharBuffer) read(java.nio.CharBuffer)}\n-    * on the returned object will not read in characters beyond the line\n-    * bound for each invocation, even if the destination buffer has space for\n-    * more characters. The {@code Reader}'s {@code read} methods may block if a\n-    * line bound has not been entered or reached on the console's input device.\n-    * A line bound is considered to be any one of a line feed ({@code '\\n'}),\n-    * a carriage return ({@code '\\r'}), a carriage return followed immediately\n-    * by a linefeed, or an end of stream.\n-    *\n-    * @return  The reader associated with this console\n-    *\/\n+    \/**\n+     * Retrieves the unique {@link java.io.Reader Reader} object associated\n+     * with this console.\n+     * <p>\n+     * This method is intended to be used by sophisticated applications, for\n+     * example, a {@link java.util.Scanner} object which utilizes the rich\n+     * parsing\/scanning functionality provided by the {@code Scanner}:\n+     * <blockquote><pre>\n+     * Console con = System.console();\n+     * if (con != null) {\n+     *     Scanner sc = new Scanner(con.reader());\n+     *     ...\n+     * }\n+     * <\/pre><\/blockquote>\n+     * <p>\n+     * For simple applications requiring only line-oriented reading, use\n+     * {@link #readLine}.\n+     * <p>\n+     * The bulk read operations {@link java.io.Reader#read(char[]) read(char[]) },\n+     * {@link java.io.Reader#read(char[], int, int) read(char[], int, int) } and\n+     * {@link java.io.Reader#read(java.nio.CharBuffer) read(java.nio.CharBuffer)}\n+     * on the returned object will not read in characters beyond the line\n+     * bound for each invocation, even if the destination buffer has space for\n+     * more characters. The {@code Reader}'s {@code read} methods may block if a\n+     * line bound has not been entered or reached on the console's input device.\n+     * A line bound is considered to be any one of a line feed ({@code '\\n'}),\n+     * a carriage return ({@code '\\r'}), a carriage return followed immediately\n+     * by a linefeed, or an end of stream.\n+     *\n+     * @return  The reader associated with this console\n+     *\/\n@@ -143,1 +145,1 @@\n-        return reader;\n+        throw newUnsupportedOperationException();\n@@ -146,30 +148,30 @@\n-   \/**\n-    * Writes a formatted string to this console's output stream using\n-    * the specified format string and arguments.\n-    *\n-    * @param  fmt\n-    *         A format string as described in <a\n-    *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>\n-    *\n-    * @param  args\n-    *         Arguments referenced by the format specifiers in the format\n-    *         string.  If there are more arguments than format specifiers, the\n-    *         extra arguments are ignored.  The number of arguments is\n-    *         variable and may be zero.  The maximum number of arguments is\n-    *         limited by the maximum dimension of a Java array as defined by\n-    *         <cite>The Java Virtual Machine Specification<\/cite>.\n-    *         The behaviour on a\n-    *         {@code null} argument depends on the <a\n-    *         href=\"..\/util\/Formatter.html#syntax\">conversion<\/a>.\n-    *\n-    * @throws  IllegalFormatException\n-    *          If a format string contains an illegal syntax, a format\n-    *          specifier that is incompatible with the given arguments,\n-    *          insufficient arguments given the format string, or other\n-    *          illegal conditions.  For specification of all possible\n-    *          formatting errors, see the <a\n-    *          href=\"..\/util\/Formatter.html#detail\">Details<\/a> section\n-    *          of the formatter class specification.\n-    *\n-    * @return  This console\n-    *\/\n+    \/**\n+     * Writes a formatted string to this console's output stream using\n+     * the specified format string and arguments.\n+     *\n+     * @param  fmt\n+     *         A format string as described in <a\n+     *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>\n+     *\n+     * @param  args\n+     *         Arguments referenced by the format specifiers in the format\n+     *         string.  If there are more arguments than format specifiers, the\n+     *         extra arguments are ignored.  The number of arguments is\n+     *         variable and may be zero.  The maximum number of arguments is\n+     *         limited by the maximum dimension of a Java array as defined by\n+     *         <cite>The Java Virtual Machine Specification<\/cite>.\n+     *         The behaviour on a\n+     *         {@code null} argument depends on the <a\n+     *         href=\"..\/util\/Formatter.html#syntax\">conversion<\/a>.\n+     *\n+     * @throws  IllegalFormatException\n+     *          If a format string contains an illegal syntax, a format\n+     *          specifier that is incompatible with the given arguments,\n+     *          insufficient arguments given the format string, or other\n+     *          illegal conditions.  For specification of all possible\n+     *          formatting errors, see the <a\n+     *          href=\"..\/util\/Formatter.html#detail\">Details<\/a> section\n+     *          of the formatter class specification.\n+     *\n+     * @return  This console\n+     *\/\n@@ -177,2 +179,1 @@\n-        formatter.format(fmt, args).flush();\n-        return this;\n+        throw newUnsupportedOperationException();\n@@ -181,35 +182,35 @@\n-   \/**\n-    * A convenience method to write a formatted string to this console's\n-    * output stream using the specified format string and arguments.\n-    *\n-    * <p> An invocation of this method of the form\n-    * {@code con.printf(format, args)} behaves in exactly the same way\n-    * as the invocation of\n-    * <pre>con.format(format, args)<\/pre>.\n-    *\n-    * @param  format\n-    *         A format string as described in <a\n-    *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>.\n-    *\n-    * @param  args\n-    *         Arguments referenced by the format specifiers in the format\n-    *         string.  If there are more arguments than format specifiers, the\n-    *         extra arguments are ignored.  The number of arguments is\n-    *         variable and may be zero.  The maximum number of arguments is\n-    *         limited by the maximum dimension of a Java array as defined by\n-    *         <cite>The Java Virtual Machine Specification<\/cite>.\n-    *         The behaviour on a\n-    *         {@code null} argument depends on the <a\n-    *         href=\"..\/util\/Formatter.html#syntax\">conversion<\/a>.\n-    *\n-    * @throws  IllegalFormatException\n-    *          If a format string contains an illegal syntax, a format\n-    *          specifier that is incompatible with the given arguments,\n-    *          insufficient arguments given the format string, or other\n-    *          illegal conditions.  For specification of all possible\n-    *          formatting errors, see the <a\n-    *          href=\"..\/util\/Formatter.html#detail\">Details<\/a> section of the\n-    *          formatter class specification.\n-    *\n-    * @return  This console\n-    *\/\n+    \/**\n+     * A convenience method to write a formatted string to this console's\n+     * output stream using the specified format string and arguments.\n+     *\n+     * <p> An invocation of this method of the form\n+     * {@code con.printf(format, args)} behaves in exactly the same way\n+     * as the invocation of\n+     * <pre>con.format(format, args)<\/pre>.\n+     *\n+     * @param  format\n+     *         A format string as described in <a\n+     *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>.\n+     *\n+     * @param  args\n+     *         Arguments referenced by the format specifiers in the format\n+     *         string.  If there are more arguments than format specifiers, the\n+     *         extra arguments are ignored.  The number of arguments is\n+     *         variable and may be zero.  The maximum number of arguments is\n+     *         limited by the maximum dimension of a Java array as defined by\n+     *         <cite>The Java Virtual Machine Specification<\/cite>.\n+     *         The behaviour on a\n+     *         {@code null} argument depends on the <a\n+     *         href=\"..\/util\/Formatter.html#syntax\">conversion<\/a>.\n+     *\n+     * @throws  IllegalFormatException\n+     *          If a format string contains an illegal syntax, a format\n+     *          specifier that is incompatible with the given arguments,\n+     *          insufficient arguments given the format string, or other\n+     *          illegal conditions.  For specification of all possible\n+     *          formatting errors, see the <a\n+     *          href=\"..\/util\/Formatter.html#detail\">Details<\/a> section of the\n+     *          formatter class specification.\n+     *\n+     * @return  This console\n+     *\/\n@@ -217,1 +218,1 @@\n-        return format(format, args);\n+        throw newUnsupportedOperationException();\n@@ -220,31 +221,31 @@\n-   \/**\n-    * Provides a formatted prompt, then reads a single line of text from the\n-    * console.\n-    *\n-    * @param  fmt\n-    *         A format string as described in <a\n-    *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>.\n-    *\n-    * @param  args\n-    *         Arguments referenced by the format specifiers in the format\n-    *         string.  If there are more arguments than format specifiers, the\n-    *         extra arguments are ignored.  The maximum number of arguments is\n-    *         limited by the maximum dimension of a Java array as defined by\n-    *         <cite>The Java Virtual Machine Specification<\/cite>.\n-    *\n-    * @throws  IllegalFormatException\n-    *          If a format string contains an illegal syntax, a format\n-    *          specifier that is incompatible with the given arguments,\n-    *          insufficient arguments given the format string, or other\n-    *          illegal conditions.  For specification of all possible\n-    *          formatting errors, see the <a\n-    *          href=\"..\/util\/Formatter.html#detail\">Details<\/a> section\n-    *          of the formatter class specification.\n-    *\n-    * @throws IOError\n-    *         If an I\/O error occurs.\n-    *\n-    * @return  A string containing the line read from the console, not\n-    *          including any line-termination characters, or {@code null}\n-    *          if an end of stream has been reached.\n-    *\/\n+    \/**\n+     * Provides a formatted prompt, then reads a single line of text from the\n+     * console.\n+     *\n+     * @param  fmt\n+     *         A format string as described in <a\n+     *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>.\n+     *\n+     * @param  args\n+     *         Arguments referenced by the format specifiers in the format\n+     *         string.  If there are more arguments than format specifiers, the\n+     *         extra arguments are ignored.  The maximum number of arguments is\n+     *         limited by the maximum dimension of a Java array as defined by\n+     *         <cite>The Java Virtual Machine Specification<\/cite>.\n+     *\n+     * @throws  IllegalFormatException\n+     *          If a format string contains an illegal syntax, a format\n+     *          specifier that is incompatible with the given arguments,\n+     *          insufficient arguments given the format string, or other\n+     *          illegal conditions.  For specification of all possible\n+     *          formatting errors, see the <a\n+     *          href=\"..\/util\/Formatter.html#detail\">Details<\/a> section\n+     *          of the formatter class specification.\n+     *\n+     * @throws IOError\n+     *         If an I\/O error occurs.\n+     *\n+     * @return  A string containing the line read from the console, not\n+     *          including any line-termination characters, or {@code null}\n+     *          if an end of stream has been reached.\n+     *\/\n@@ -252,15 +253,1 @@\n-        String line = null;\n-        synchronized (writeLock) {\n-            synchronized(readLock) {\n-                if (!fmt.isEmpty())\n-                    pw.format(fmt, args);\n-                try {\n-                    char[] ca = readline(false);\n-                    if (ca != null)\n-                        line = new String(ca);\n-                } catch (IOException x) {\n-                    throw new IOError(x);\n-                }\n-            }\n-        }\n-        return line;\n+        throw newUnsupportedOperationException();\n@@ -269,10 +256,10 @@\n-   \/**\n-    * Reads a single line of text from the console.\n-    *\n-    * @throws IOError\n-    *         If an I\/O error occurs.\n-    *\n-    * @return  A string containing the line read from the console, not\n-    *          including any line-termination characters, or {@code null}\n-    *          if an end of stream has been reached.\n-    *\/\n+    \/**\n+     * Reads a single line of text from the console.\n+     *\n+     * @throws IOError\n+     *         If an I\/O error occurs.\n+     *\n+     * @return  A string containing the line read from the console, not\n+     *          including any line-termination characters, or {@code null}\n+     *          if an end of stream has been reached.\n+     *\/\n@@ -280,1 +267,1 @@\n-        return readLine(\"\");\n+        throw newUnsupportedOperationException();\n@@ -283,32 +270,32 @@\n-   \/**\n-    * Provides a formatted prompt, then reads a password or passphrase from\n-    * the console with echoing disabled.\n-    *\n-    * @param  fmt\n-    *         A format string as described in <a\n-    *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>\n-    *         for the prompt text.\n-    *\n-    * @param  args\n-    *         Arguments referenced by the format specifiers in the format\n-    *         string.  If there are more arguments than format specifiers, the\n-    *         extra arguments are ignored.  The maximum number of arguments is\n-    *         limited by the maximum dimension of a Java array as defined by\n-    *         <cite>The Java Virtual Machine Specification<\/cite>.\n-    *\n-    * @throws  IllegalFormatException\n-    *          If a format string contains an illegal syntax, a format\n-    *          specifier that is incompatible with the given arguments,\n-    *          insufficient arguments given the format string, or other\n-    *          illegal conditions.  For specification of all possible\n-    *          formatting errors, see the <a\n-    *          href=\"..\/util\/Formatter.html#detail\">Details<\/a>\n-    *          section of the formatter class specification.\n-    *\n-    * @throws IOError\n-    *         If an I\/O error occurs.\n-    *\n-    * @return  A character array containing the password or passphrase read\n-    *          from the console, not including any line-termination characters,\n-    *          or {@code null} if an end of stream has been reached.\n-    *\/\n+    \/**\n+     * Provides a formatted prompt, then reads a password or passphrase from\n+     * the console with echoing disabled.\n+     *\n+     * @param  fmt\n+     *         A format string as described in <a\n+     *         href=\"..\/util\/Formatter.html#syntax\">Format string syntax<\/a>\n+     *         for the prompt text.\n+     *\n+     * @param  args\n+     *         Arguments referenced by the format specifiers in the format\n+     *         string.  If there are more arguments than format specifiers, the\n+     *         extra arguments are ignored.  The maximum number of arguments is\n+     *         limited by the maximum dimension of a Java array as defined by\n+     *         <cite>The Java Virtual Machine Specification<\/cite>.\n+     *\n+     * @throws  IllegalFormatException\n+     *          If a format string contains an illegal syntax, a format\n+     *          specifier that is incompatible with the given arguments,\n+     *          insufficient arguments given the format string, or other\n+     *          illegal conditions.  For specification of all possible\n+     *          formatting errors, see the <a\n+     *          href=\"..\/util\/Formatter.html#detail\">Details<\/a>\n+     *          section of the formatter class specification.\n+     *\n+     * @throws IOError\n+     *         If an I\/O error occurs.\n+     *\n+     * @return  A character array containing the password or passphrase read\n+     *          from the console, not including any line-termination characters,\n+     *          or {@code null} if an end of stream has been reached.\n+     *\/\n@@ -316,58 +303,1 @@\n-        char[] passwd = null;\n-        synchronized (writeLock) {\n-            synchronized(readLock) {\n-                installShutdownHook();\n-                try {\n-                    restoreEcho = echo(false);\n-                } catch (IOException x) {\n-                    throw new IOError(x);\n-                }\n-                IOError ioe = null;\n-                try {\n-                    if (!fmt.isEmpty())\n-                        pw.format(fmt, args);\n-                    passwd = readline(true);\n-                } catch (IOException x) {\n-                    ioe = new IOError(x);\n-                } finally {\n-                    try {\n-                        if (restoreEcho)\n-                            restoreEcho = echo(true);\n-                    } catch (IOException x) {\n-                        if (ioe == null)\n-                            ioe = new IOError(x);\n-                        else\n-                            ioe.addSuppressed(x);\n-                    }\n-                    if (ioe != null)\n-                        throw ioe;\n-                }\n-                pw.println();\n-            }\n-        }\n-        return passwd;\n-    }\n-\n-    private void installShutdownHook() {\n-        if (shutdownHookInstalled)\n-            return;\n-        try {\n-            \/\/ Add a shutdown hook to restore console's echo state should\n-            \/\/ it be necessary.\n-            SharedSecrets.getJavaLangAccess()\n-                .registerShutdownHook(0 \/* shutdown hook invocation order *\/,\n-                    false \/* only register if shutdown is not in progress *\/,\n-                    new Runnable() {\n-                        public void run() {\n-                            try {\n-                                if (restoreEcho) {\n-                                    echo(true);\n-                                }\n-                            } catch (IOException x) { }\n-                        }\n-                    });\n-        } catch (IllegalStateException e) {\n-            \/\/ shutdown is already in progress and readPassword is first used\n-            \/\/ by a shutdown hook\n-        }\n-        shutdownHookInstalled = true;\n+        throw newUnsupportedOperationException();\n@@ -376,10 +306,10 @@\n-   \/**\n-    * Reads a password or passphrase from the console with echoing disabled\n-    *\n-    * @throws IOError\n-    *         If an I\/O error occurs.\n-    *\n-    * @return  A character array containing the password or passphrase read\n-    *          from the console, not including any line-termination characters,\n-    *          or {@code null} if an end of stream has been reached.\n-    *\/\n+    \/**\n+     * Reads a password or passphrase from the console with echoing disabled\n+     *\n+     * @throws IOError\n+     *         If an I\/O error occurs.\n+     *\n+     * @return  A character array containing the password or passphrase read\n+     *          from the console, not including any line-termination characters,\n+     *          or {@code null} if an end of stream has been reached.\n+     *\/\n@@ -387,1 +317,1 @@\n-        return readPassword(\"\");\n+        throw newUnsupportedOperationException();\n@@ -395,1 +325,1 @@\n-        pw.flush();\n+        throw newUnsupportedOperationException();\n@@ -398,1 +328,0 @@\n-\n@@ -413,2 +342,1 @@\n-        assert CHARSET != null : \"charset() should not return null\";\n-        return CHARSET;\n+        throw newUnsupportedOperationException();\n@@ -417,38 +345,3 @@\n-    private Object readLock;\n-    private Object writeLock;\n-    private Reader reader;\n-    private Writer out;\n-    private PrintWriter pw;\n-    private Formatter formatter;\n-    private char[] rcb;\n-    private boolean restoreEcho;\n-    private boolean shutdownHookInstalled;\n-    private static native String encoding();\n-    \/*\n-     * Sets the console echo status to {@code on} and returns the previous\n-     * console on\/off status.\n-     * @param on    the echo status to set to. {@code true} for echo on and\n-     *              {@code false} for echo off\n-     * @return true if the previous console echo status is on\n-     *\/\n-    private static native boolean echo(boolean on) throws IOException;\n-\n-    private char[] readline(boolean zeroOut) throws IOException {\n-        int len = reader.read(rcb, 0, rcb.length);\n-        if (len < 0)\n-            return null;  \/\/EOL\n-        if (rcb[len-1] == '\\r')\n-            len--;        \/\/remove CR at end;\n-        else if (rcb[len-1] == '\\n') {\n-            len--;        \/\/remove LF at end;\n-            if (len > 0 && rcb[len-1] == '\\r')\n-                len--;    \/\/remove the CR, if there is one\n-        }\n-        char[] b = new char[len];\n-        if (len > 0) {\n-            System.arraycopy(rcb, 0, b, 0, len);\n-            if (zeroOut) {\n-                Arrays.fill(rcb, 0, len, ' ');\n-            }\n-        }\n-        return b;\n+    private static UnsupportedOperationException newUnsupportedOperationException() {\n+        return new UnsupportedOperationException(\n+                \"Console class itself does not provide implementation\");\n@@ -457,121 +350,2 @@\n-    private char[] grow() {\n-        assert Thread.holdsLock(readLock);\n-        char[] t = new char[rcb.length * 2];\n-        System.arraycopy(rcb, 0, t, 0, rcb.length);\n-        rcb = t;\n-        return rcb;\n-    }\n-\n-    class LineReader extends Reader {\n-        private Reader in;\n-        private char[] cb;\n-        private int nChars, nextChar;\n-        boolean leftoverLF;\n-        LineReader(Reader in) {\n-            this.in = in;\n-            cb = new char[1024];\n-            nextChar = nChars = 0;\n-            leftoverLF = false;\n-        }\n-        public void close () {}\n-        public boolean ready() throws IOException {\n-            \/\/in.ready synchronizes on readLock already\n-            return in.ready();\n-        }\n-\n-        public int read(char[] cbuf, int offset, int length)\n-            throws IOException\n-        {\n-            int off = offset;\n-            int end = offset + length;\n-            if (offset < 0 || offset > cbuf.length || length < 0 ||\n-                end < 0 || end > cbuf.length) {\n-                throw new IndexOutOfBoundsException();\n-            }\n-            synchronized(readLock) {\n-                boolean eof = false;\n-                char c = 0;\n-                for (;;) {\n-                    if (nextChar >= nChars) {   \/\/fill\n-                        int n = 0;\n-                        do {\n-                            n = in.read(cb, 0, cb.length);\n-                        } while (n == 0);\n-                        if (n > 0) {\n-                            nChars = n;\n-                            nextChar = 0;\n-                            if (n < cb.length &&\n-                                cb[n-1] != '\\n' && cb[n-1] != '\\r') {\n-                                \/*\n-                                 * we're in canonical mode so each \"fill\" should\n-                                 * come back with an eol. if there no lf or nl at\n-                                 * the end of returned bytes we reached an eof.\n-                                 *\/\n-                                eof = true;\n-                            }\n-                        } else { \/*EOF*\/\n-                            if (off - offset == 0)\n-                                return -1;\n-                            return off - offset;\n-                        }\n-                    }\n-                    if (leftoverLF && cbuf == rcb && cb[nextChar] == '\\n') {\n-                        \/*\n-                         * if invoked by our readline, skip the leftover, otherwise\n-                         * return the LF.\n-                         *\/\n-                        nextChar++;\n-                    }\n-                    leftoverLF = false;\n-                    while (nextChar < nChars) {\n-                        c = cbuf[off++] = cb[nextChar];\n-                        cb[nextChar++] = 0;\n-                        if (c == '\\n') {\n-                            return off - offset;\n-                        } else if (c == '\\r') {\n-                            if (off == end) {\n-                                \/* no space left even the next is LF, so return\n-                                 * whatever we have if the invoker is not our\n-                                 * readLine()\n-                                 *\/\n-                                if (cbuf == rcb) {\n-                                    cbuf = grow();\n-                                    end = cbuf.length;\n-                                } else {\n-                                    leftoverLF = true;\n-                                    return off - offset;\n-                                }\n-                            }\n-                            if (nextChar == nChars && in.ready()) {\n-                                \/*\n-                                 * we have a CR and we reached the end of\n-                                 * the read in buffer, fill to make sure we\n-                                 * don't miss a LF, if there is one, it's possible\n-                                 * that it got cut off during last round reading\n-                                 * simply because the read in buffer was full.\n-                                 *\/\n-                                nChars = in.read(cb, 0, cb.length);\n-                                nextChar = 0;\n-                            }\n-                            if (nextChar < nChars && cb[nextChar] == '\\n') {\n-                                cbuf[off++] = '\\n';\n-                                nextChar++;\n-                            }\n-                            return off - offset;\n-                        } else if (off == end) {\n-                           if (cbuf == rcb) {\n-                                cbuf = grow();\n-                                end = cbuf.length;\n-                           } else {\n-                               return off - offset;\n-                           }\n-                        }\n-                    }\n-                    if (eof)\n-                        return off - offset;\n-                }\n-            }\n-        }\n-    }\n-\n-    private static final Charset CHARSET;\n+    private static native String encoding();\n+    static final Charset CHARSET;\n@@ -610,0 +384,2 @@\n+        Console c;\n+\n@@ -628,1 +404,1 @@\n-                        .orElse(istty ? new Console() : null);\n+                        .orElse(null);\n@@ -630,1 +406,1 @@\n-            return AccessController.doPrivileged(pa);\n+            c = AccessController.doPrivileged(pa);\n@@ -632,2 +408,1 @@\n-            \/\/ default to built-in Console\n-            return istty ? new Console() : null;\n+            c = null;\n@@ -635,0 +410,7 @@\n+\n+        \/\/ If not found, default to built-in Console\n+        if (istty && c == null) {\n+            c = new ProxyingConsole(new JdkConsoleImpl(CHARSET));\n+        }\n+\n+        return c;\n@@ -639,16 +421,0 @@\n-\n-    Console() {\n-        readLock = new Object();\n-        writeLock = new Object();\n-        out = StreamEncoder.forOutputStreamWriter(\n-                  new FileOutputStream(FileDescriptor.out),\n-                  writeLock,\n-                  CHARSET);\n-        pw = new PrintWriter(out, true) { public void close() {} };\n-        formatter = new Formatter(out);\n-        reader = new LineReader(StreamDecoder.forInputStreamReader(\n-                     new FileInputStream(FileDescriptor.in),\n-                     readLock,\n-                     CHARSET));\n-        rcb = new char[1024];\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":220,"deletions":454,"binary":false,"changes":674,"status":"modified"}]}