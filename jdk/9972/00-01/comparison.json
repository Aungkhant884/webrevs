{"files":[{"patch":"@@ -129,1 +129,1 @@\n-            if (!Objects.requireNonNull(config.getProvider()).getName().equals(name)) {\n+            if (!config.getProvider().getName().equals(name)) {\n@@ -376,1 +376,1 @@\n-                Service s = Objects.requireNonNull(p).getService(type, name);\n+                Service s = p.getService(type, name);\n@@ -527,1 +527,1 @@\n-                    for (ServiceId id : Objects.requireNonNull(ids)) {\n+                    for (ServiceId id : ids) {\n@@ -676,1 +676,1 @@\n-        private String type = null;\n+        private final String type;\n@@ -679,1 +679,1 @@\n-        private String[] alternateNames = null;\n+        private final String[] alternateNames;\n@@ -688,0 +688,1 @@\n+                type = null;\n@@ -709,0 +710,2 @@\n+                } else {\n+                    alternateNames = null;\n@@ -719,0 +722,2 @@\n+            } else {\n+                alternateNames = null;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/jca\/ProviderList.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -212,1 +212,1 @@\n-    \/\/ is already using a thread local list, and you want to change it in place.\n+    \/\/ is already using a thread local list and you want to change it in place.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/jca\/Providers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.util.Objects;\n@@ -435,1 +434,1 @@\n-            if (indexOf(tag, Objects.requireNonNull(PKCS9_VALUE_TAGS[index]), 0) == -1)\n+            if (indexOf(tag, PKCS9_VALUE_TAGS[index], 0) == -1)\n@@ -799,1 +798,1 @@\n-        msg.append(Objects.requireNonNull(expectedTags)[0].toString());\n+        msg.append(expectedTags[0].toString());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS9Attribute.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.util.Objects;\n@@ -271,2 +270,1 @@\n-        return attributes.get(Objects.requireNonNull(\n-            PKCS9Attribute.getOID(name)));\n+        return attributes.get(PKCS9Attribute.getOID(name));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS9Attributes.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import java.util.Objects;\n@@ -189,1 +188,1 @@\n-        int outLen = Objects.requireNonNull(hashObj).getDigestLength()*8;\n+        int outLen = hashObj.getDigestLength()*8;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/DSAParameterGenerator.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SHA3.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -437,1 +437,1 @@\n-                            if (Objects.requireNonNull(pointCrlIssuers).size() != 1) {\n+                            if (pointCrlIssuers.size() != 1) {\n@@ -447,1 +447,1 @@\n-                                (Objects.requireNonNull(pointCrlIssuer), relativeName);\n+                                (pointCrlIssuer, relativeName);\n@@ -482,3 +482,2 @@\n-                    for (Iterator<GeneralName> t = Objects.requireNonNull(\n-                            pointCrlIssuers).iterator();\n-                                !match && t.hasNext(); ) {\n+                    for (Iterator<GeneralName> t = pointCrlIssuers.iterator();\n+                            !match && t.hasNext(); ) {\n@@ -487,1 +486,1 @@\n-                             !match && i.hasNext(); ) {\n+                                !match && i.hasNext(); ) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/DistributionPointFetcher.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -782,2 +782,1 @@\n-                        rp.ocspNonce ? Objects.requireNonNull(tmpExtensions) :\n-                            ocspExtensions, params.variant());\n+                        rp.ocspNonce ? tmpExtensions : ocspExtensions, params.variant());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/RevocationChecker.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -164,2 +164,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).\n-                    isAvailable(SSLExtension.CH_ALPN)) {\n+            if (!chc.sslConfig.isAvailable(SSLExtension.CH_ALPN)) {\n@@ -272,2 +271,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(SSLExtension.CH_ALPN)) {\n+            if (!shc.sslConfig.isAvailable(SSLExtension.CH_ALPN)) {\n@@ -394,2 +392,1 @@\n-                if (Objects.requireNonNull(shc.sslConfig).\n-                        engineAPSelector != null) {\n+                if (shc.sslConfig.engineAPSelector != null) {\n@@ -408,2 +405,1 @@\n-                if (Objects.requireNonNull(shc.sslConfig).\n-                        socketAPSelector != null) {\n+                if (shc.sslConfig.socketAPSelector != null) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/AlpnExtension.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-import java.util.Objects;\n-\n@@ -90,1 +88,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).isAvailable(\n+            if (!chc.sslConfig.isAvailable(\n@@ -145,1 +143,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).isAvailable(\n+            if (!shc.sslConfig.isAvailable(\n@@ -201,1 +199,1 @@\n-                if (Objects.requireNonNull(shc.sslConfig).clientAuthType !=\n+                if (shc.sslConfig.clientAuthType !=\n@@ -203,1 +201,1 @@\n-                    Objects.requireNonNull(shc.handshakeProducers).putIfAbsent(\n+                    shc.handshakeProducers.putIfAbsent(\n@@ -207,2 +205,1 @@\n-                Objects.requireNonNull(shc.handshakeProducers).\n-                        put(SSLHandshake.CERTIFICATE.id,\n+                shc.handshakeProducers.put(SSLHandshake.CERTIFICATE.id,\n@@ -235,1 +232,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).isAvailable(\n+            if (!shc.sslConfig.isAvailable(\n@@ -286,1 +283,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).isAvailable(\n+            if (!chc.sslConfig.isAvailable(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertSignAlgsExtension.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import java.util.Objects;\n@@ -560,2 +559,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).\n-                    isAvailable(SSLExtension.CH_STATUS_REQUEST)) {\n+            if (!chc.sslConfig.isAvailable(SSLExtension.CH_STATUS_REQUEST)) {\n@@ -602,2 +600,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(SSLExtension.CH_STATUS_REQUEST)) {\n+            if (!shc.sslConfig.isAvailable(SSLExtension.CH_STATUS_REQUEST)) {\n@@ -618,2 +615,1 @@\n-                Objects.requireNonNull(shc.handshakeProducers).\n-                        put(SSLHandshake.CERTIFICATE_STATUS.id,\n+                shc.handshakeProducers.put(SSLHandshake.CERTIFICATE_STATUS.id,\n@@ -921,2 +917,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).\n-                    isAvailable(SSLExtension.CH_STATUS_REQUEST_V2)) {\n+            if (!chc.sslConfig.isAvailable(SSLExtension.CH_STATUS_REQUEST_V2)) {\n@@ -964,2 +959,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(SSLExtension.CH_STATUS_REQUEST_V2)) {\n+            if (!shc.sslConfig.isAvailable(SSLExtension.CH_STATUS_REQUEST_V2)) {\n@@ -981,1 +975,1 @@\n-                Objects.requireNonNull(shc.handshakeProducers).putIfAbsent(\n+                shc.handshakeProducers.putIfAbsent(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertStatusExtension.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -186,1 +186,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).isAvailable(\n+            if (!chc.sslConfig.isAvailable(\n@@ -264,1 +264,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).isAvailable(\n+            if (!shc.sslConfig.isAvailable(\n@@ -307,1 +307,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).isAvailable(\n+            if (!shc.sslConfig.isAvailable(\n@@ -385,1 +385,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).isAvailable(\n+            if (!chc.sslConfig.isAvailable(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateAuthoritiesExtension.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-            if (Objects.requireNonNull(hc.sslConfig).isClientMode) {\n+            if (hc.sslConfig.isClientMode) {\n@@ -247,2 +247,1 @@\n-            for (SSLPossession possession :\n-                    Objects.requireNonNull(shc.handshakePossessions)) {\n+            for (SSLPossession possession : shc.handshakePossessions) {\n@@ -281,2 +280,1 @@\n-            for (SSLPossession possession :\n-                    Objects.requireNonNull(chc.handshakePossessions)) {\n+            for (SSLPossession possession : chc.handshakePossessions) {\n@@ -324,2 +322,1 @@\n-                    new T12CertificateMessage(chc,\n-                    Objects.requireNonNull(x509Possession.popCerts));\n+                    new T12CertificateMessage(chc, x509Possession.popCerts);\n@@ -361,1 +358,1 @@\n-            if (Objects.requireNonNull(hc.sslConfig).isClientMode) {\n+            if (hc.sslConfig.isClientMode) {\n@@ -384,1 +381,1 @@\n-                if (Objects.requireNonNull(shc.sslConfig).clientAuthType !=\n+                if (shc.sslConfig.clientAuthType !=\n@@ -413,1 +410,1 @@\n-            Objects.requireNonNull(shc.handshakeCredentials).add(\n+            shc.handshakeCredentials.add(\n@@ -451,2 +448,1 @@\n-                String identityAlg = Objects.requireNonNull(chc.sslConfig).\n-                        identificationProtocol;\n+                String identityAlg = chc.sslConfig.identificationProtocol;\n@@ -477,1 +473,1 @@\n-            Objects.requireNonNull(chc.handshakeCredentials).add(\n+            chc.handshakeCredentials.add(\n@@ -956,1 +952,1 @@\n-            if (Objects.requireNonNull(hc.sslConfig).isClientMode) {\n+            if (hc.sslConfig.isClientMode) {\n@@ -987,1 +983,1 @@\n-            Objects.requireNonNull(shc.handshakePossessions).add(x509Possession);\n+            shc.handshakePossessions.add(x509Possession);\n@@ -1011,2 +1007,1 @@\n-            SSLExtension[] enabledCTExts =\n-                    Objects.requireNonNull(shc.sslConfig).getEnabledExtensions(\n+            SSLExtension[] enabledCTExts = shc.sslConfig.getEnabledExtensions(\n@@ -1079,1 +1074,1 @@\n-                Objects.requireNonNull(chc.handshakePossessions).add(pos);\n+                chc.handshakePossessions.add(pos);\n@@ -1102,2 +1097,1 @@\n-                        chc, chc.certRequestContext,\n-                        Objects.requireNonNull(localCerts));\n+                        chc, chc.certRequestContext, localCerts);\n@@ -1139,1 +1133,1 @@\n-            if (Objects.requireNonNull(hc.sslConfig).isClientMode) {\n+            if (hc.sslConfig.isClientMode) {\n@@ -1162,2 +1156,1 @@\n-                if (Objects.requireNonNull(shc.sslConfig).\n-                        clientAuthType == CLIENT_AUTH_REQUIRED) {\n+                if (shc.sslConfig.clientAuthType == CLIENT_AUTH_REQUIRED) {\n@@ -1179,1 +1172,1 @@\n-            Objects.requireNonNull(shc.handshakeCredentials).add(\n+            shc.handshakeCredentials.add(\n@@ -1195,2 +1188,1 @@\n-                    Objects.requireNonNull(chc.sslConfig).\n-                    getEnabledExtensions(SSLHandshake.CERTIFICATE);\n+                    chc.sslConfig.getEnabledExtensions(SSLHandshake.CERTIFICATE);\n@@ -1208,1 +1200,1 @@\n-            Objects.requireNonNull(chc.handshakeCredentials).add(\n+            chc.handshakeCredentials.add(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateMessage.java","additions":19,"deletions":27,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-                if (Objects.requireNonNull(cct).isAvailable) {\n+                if (cct.isAvailable) {\n@@ -368,2 +368,2 @@\n-            Objects.requireNonNull(chc.handshakeProducers).\n-                    put(SSLHandshake.CERTIFICATE.id, SSLHandshake.CERTIFICATE);\n+            chc.handshakeProducers.put(SSLHandshake.CERTIFICATE.id,\n+                    SSLHandshake.CERTIFICATE);\n@@ -405,1 +405,1 @@\n-            Objects.requireNonNull(chc.handshakePossessions).add(\n+            chc.handshakePossessions.add(\n@@ -613,1 +613,1 @@\n-                            Objects.requireNonNull(shc.sslConfig),\n+                            shc.sslConfig,\n@@ -704,2 +704,2 @@\n-            Objects.requireNonNull(chc.handshakeProducers).\n-                    put(SSLHandshake.CERTIFICATE.id, SSLHandshake.CERTIFICATE);\n+            chc.handshakeProducers.put(SSLHandshake.CERTIFICATE.id,\n+                    SSLHandshake.CERTIFICATE);\n@@ -732,1 +732,1 @@\n-            Objects.requireNonNull(chc.handshakePossessions).add(pos);\n+            chc.handshakePossessions.add(pos);\n@@ -887,2 +887,1 @@\n-            SSLExtension[] extTypes = Objects.requireNonNull(shc.sslConfig).\n-                    getEnabledExtensions(\n+            SSLExtension[] extTypes = shc.sslConfig.getEnabledExtensions(\n@@ -951,2 +950,2 @@\n-            SSLExtension[] extTypes = Objects.requireNonNull(chc.sslConfig).\n-                    getEnabledExtensions(SSLHandshake.CERTIFICATE_REQUEST);\n+            SSLExtension[] extTypes = chc.sslConfig.getEnabledExtensions(\n+                    SSLHandshake.CERTIFICATE_REQUEST);\n@@ -964,2 +963,2 @@\n-            Objects.requireNonNull(chc.handshakeProducers).\n-                    put(SSLHandshake.CERTIFICATE.id, SSLHandshake.CERTIFICATE);\n+            chc.handshakeProducers.put(SSLHandshake.CERTIFICATE.id,\n+                    SSLHandshake.CERTIFICATE);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateRequest.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.util.Objects;\n@@ -243,2 +242,1 @@\n-            for (SSLPossession possession :\n-                    Objects.requireNonNull(chc.handshakePossessions)) {\n+            for (SSLPossession possession : chc.handshakePossessions) {\n@@ -499,2 +497,1 @@\n-            for (SSLPossession possession :\n-                    Objects.requireNonNull(chc.handshakePossessions)) {\n+            for (SSLPossession possession : chc.handshakePossessions) {\n@@ -676,2 +673,1 @@\n-                Objects.requireNonNull(signer).\n-                        update(shc.handshakeHash.archived());\n+                signer.update(shc.handshakeHash.archived());\n@@ -751,2 +747,1 @@\n-            for (SSLPossession possession :\n-                    Objects.requireNonNull(chc.handshakePossessions)) {\n+            for (SSLPossession possession : chc.handshakePossessions) {\n@@ -1015,1 +1010,1 @@\n-                Objects.requireNonNull(signer).update(contentCovered);\n+                signer.update(contentCovered);\n@@ -1089,2 +1084,1 @@\n-            for (SSLPossession possession :\n-                    Objects.requireNonNull(hc.handshakePossessions)) {\n+            for (SSLPossession possession : hc.handshakePossessions) {\n@@ -1107,1 +1101,1 @@\n-            if (Objects.requireNonNull(hc.sslConfig).isClientMode) {\n+            if (hc.sslConfig.isClientMode) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateVerify.java","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.util.Objects;\n@@ -81,3 +80,2 @@\n-                            tkd.getTrafficKey(Objects.requireNonNull(\n-                            hc.sslConfig).isClientMode ?  \"clientMacKey\" :\n-                            \"serverMacKey\"));\n+                            tkd.getTrafficKey(hc.sslConfig.isClientMode ?\n+                                    \"clientMacKey\" : \"serverMacKey\"));\n@@ -91,2 +89,1 @@\n-                    tkd.getTrafficKey(Objects.requireNonNull(hc.sslConfig).\n-                            isClientMode ?\n+                    tkd.getTrafficKey(hc.sslConfig.isClientMode ?\n@@ -179,3 +176,1 @@\n-                                tkd.getTrafficKey(Objects.\n-                                        requireNonNull(hc.sslConfig).\n-                                        isClientMode ?\n+                                tkd.getTrafficKey(hc.sslConfig.isClientMode ?\n@@ -190,2 +185,1 @@\n-                        tkd.getTrafficKey(Objects.requireNonNull(hc.sslConfig).\n-                                isClientMode ?\n+                        tkd.getTrafficKey(hc.sslConfig.isClientMode ?\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ChangeCipherSpec.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-                                            \/\/ extensions are mandatory.\n+                                            \/\/ extensions is mandatory.\n@@ -306,1 +306,1 @@\n-                                            \/\/ extensions are mandatory.\n+                                            \/\/ extensions is mandatory.\n@@ -313,1 +313,1 @@\n-                                        \/\/ extensions are mandatory.\n+                                        \/\/ extensions is mandatory.\n@@ -402,2 +402,1 @@\n-            Objects.requireNonNull(chc.handshakeProducers).\n-                    remove(SSLHandshake.CLIENT_HELLO.id);\n+            chc.handshakeProducers.remove(SSLHandshake.CLIENT_HELLO.id);\n@@ -474,3 +473,3 @@\n-                boolean isEmsAvailable = Objects.requireNonNull(chc.sslConfig).\n-                        isAvailable(SSLExtension.CH_EXTENDED_MASTER_SECRET,\n-                        sessionVersion);\n+                boolean isEmsAvailable = chc.sslConfig.isAvailable(\n+                        SSLExtension.CH_EXTENDED_MASTER_SECRET, sessionVersion);\n+                    \n@@ -515,2 +514,1 @@\n-            String identityAlg = Objects.requireNonNull(chc.sslConfig).\n-                    identificationProtocol;\n+            String identityAlg = chc.sslConfig.identificationProtocol;\n@@ -547,1 +545,1 @@\n-                        Objects.requireNonNull(cipherSuites).contains(\n+                        cipherSuites.contains(\n@@ -575,2 +573,1 @@\n-                    Objects.requireNonNull(chc.maximumActiveProtocol).\n-                    useTLS13PlusSpec() &&\n+                    chc.maximumActiveProtocol.useTLS13PlusSpec() &&\n@@ -586,1 +583,1 @@\n-            for (ProtocolVersion pv : Objects.requireNonNull(chc.activeProtocols)) {\n+            for (ProtocolVersion pv : chc.activeProtocols) {\n@@ -596,1 +593,1 @@\n-                        Objects.requireNonNull(cipherSuites).contains(\n+                        cipherSuites.contains(\n@@ -607,1 +604,1 @@\n-            for (CipherSuite suite : Objects.requireNonNull(cipherSuites)) {\n+            for (CipherSuite suite : cipherSuites) {\n@@ -619,1 +616,1 @@\n-            if (Objects.requireNonNull(clientHelloVersion).useTLS13PlusSpec()) {\n+            if (clientHelloVersion.useTLS13PlusSpec()) {\n@@ -724,2 +721,1 @@\n-                    for (ProtocolVersion pv :\n-                            Objects.requireNonNull(chc.activeProtocols)) {\n+                    for (ProtocolVersion pv : chc.activeProtocols) {\n@@ -795,1 +791,1 @@\n-                    Objects.requireNonNull(shc.sslConfig).getEnabledExtensions(\n+                    shc.sslConfig.getEnabledExtensions(\n@@ -872,1 +868,1 @@\n-                    Objects.requireNonNull(context.activeProtocols), chv);\n+                    context.activeProtocols, chv);\n@@ -893,2 +889,1 @@\n-            for (ProtocolVersion spv :\n-                    Objects.requireNonNull(context.activeProtocols)) {\n+            for (ProtocolVersion spv : context.activeProtocols) {\n@@ -1010,2 +1005,1 @@\n-                        (Objects.requireNonNull(shc.sslConfig).clientAuthType ==\n-                        CLIENT_AUTH_REQUIRED)) {\n+                    (shc.sslConfig.clientAuthType == CLIENT_AUTH_REQUIRED)) {\n@@ -1042,2 +1036,1 @@\n-                String identityAlg = Objects.requireNonNull(shc.sslConfig).\n-                        identificationProtocol;\n+                String identityAlg = shc.sslConfig.identificationProtocol;\n@@ -1073,2 +1066,1 @@\n-            SSLExtension[] extTypes = Objects.requireNonNull(shc.sslConfig).\n-                    getExclusiveExtensions(\n+            SSLExtension[] extTypes = shc.sslConfig.getExclusiveExtensions(\n@@ -1093,2 +1085,1 @@\n-            Objects.requireNonNull(shc.handshakeProducers).\n-                    put(SSLHandshake.SERVER_HELLO.id,\n+            shc.handshakeProducers.put(SSLHandshake.SERVER_HELLO.id,\n@@ -1179,2 +1170,2 @@\n-            extTypes = Objects.requireNonNull(shc.sslConfig).\n-                    getExclusiveExtensions(SSLHandshake.CLIENT_HELLO,\n+            extTypes = shc.sslConfig.getExclusiveExtensions(\n+                    SSLHandshake.CLIENT_HELLO,\n@@ -1187,1 +1178,1 @@\n-            if (!Objects.requireNonNull(shc.handshakeProducers).isEmpty()) {\n+            if (!shc.handshakeProducers.isEmpty()) {\n@@ -1198,1 +1189,1 @@\n-                    Objects.requireNonNull(shc.handshakeProducers).remove(\n+                    shc.handshakeProducers.remove(\n@@ -1234,2 +1225,2 @@\n-            Objects.requireNonNull(shc.handshakeProducers).\n-                    put(SSLHandshake.SERVER_HELLO.id, SSLHandshake.SERVER_HELLO);\n+            shc.handshakeProducers.put(SSLHandshake.SERVER_HELLO.id,\n+                SSLHandshake.SERVER_HELLO);\n@@ -1354,2 +1345,2 @@\n-                if (resumingSession && (Objects.requireNonNull(shc.sslConfig).\n-                        clientAuthType == CLIENT_AUTH_REQUIRED)) {\n+                if (resumingSession &&\n+                    (shc.sslConfig.clientAuthType == CLIENT_AUTH_REQUIRED)) {\n@@ -1400,1 +1391,1 @@\n-                Objects.requireNonNull(shc.handshakeProducers).put(\n+                shc.handshakeProducers.put(\n@@ -1416,2 +1407,1 @@\n-            SSLExtension[] extTypes = Objects.requireNonNull(shc.sslConfig).\n-                    getEnabledExtensions(\n+            SSLExtension[] extTypes = shc.sslConfig.getEnabledExtensions(\n@@ -1432,2 +1422,2 @@\n-            Objects.requireNonNull(shc.handshakeProducers).\n-                    put(SSLHandshake.SERVER_HELLO.id, SSLHandshake.SERVER_HELLO);\n+            shc.handshakeProducers.put(SSLHandshake.SERVER_HELLO.id,\n+                    SSLHandshake.SERVER_HELLO);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ClientHello.java","additions":34,"deletions":44,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.util.Objects;\n@@ -120,2 +119,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).\n-                    isAvailable(SSLExtension.CH_COOKIE)) {\n+            if (!chc.sslConfig.isAvailable(SSLExtension.CH_COOKIE)) {\n@@ -158,2 +156,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(SSLExtension.CH_COOKIE)) {\n+            if (!shc.sslConfig.isAvailable(SSLExtension.CH_COOKIE)) {\n@@ -223,2 +220,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(SSLExtension.HRR_COOKIE)) {\n+            if (!shc.sslConfig.isAvailable(SSLExtension.HRR_COOKIE)) {\n@@ -259,2 +255,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).\n-                    isAvailable(SSLExtension.HRR_COOKIE)) {\n+            if (!chc.sslConfig.isAvailable(SSLExtension.HRR_COOKIE)) {\n@@ -287,2 +282,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(SSLExtension.HRR_COOKIE)) {\n+            if (!shc.sslConfig.isAvailable(SSLExtension.HRR_COOKIE)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CookieExtension.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.util.Objects;\n@@ -173,2 +172,1 @@\n-            for (SSLCredentials cd :\n-                    Objects.requireNonNull(chc.handshakeCredentials)) {\n+            for (SSLCredentials cd : chc.handshakeCredentials) {\n@@ -189,1 +187,1 @@\n-            Objects.requireNonNull(chc.handshakePossessions).add(dhePossession);\n+            chc.handshakePossessions.add(dhePossession);\n@@ -250,2 +248,1 @@\n-            for (SSLPossession possession :\n-                    Objects.requireNonNull(shc.handshakePossessions)) {\n+            for (SSLPossession possession : shc.handshakePossessions) {\n@@ -291,1 +288,1 @@\n-                if (!Objects.requireNonNull(shc.algorithmConstraints).permits(\n+                if (!shc.algorithmConstraints.permits(\n@@ -299,1 +296,1 @@\n-                Objects.requireNonNull(shc.handshakeCredentials).add(\n+                shc.handshakeCredentials.add(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DHClientKeyExchange.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import java.util.Objects;\n@@ -419,2 +418,1 @@\n-            for (SSLPossession poss :\n-                    Objects.requireNonNull(context.handshakePossessions)) {\n+            for (SSLPossession poss : context.handshakePossessions) {\n@@ -425,2 +423,1 @@\n-                for (SSLCredentials cred :\n-                        Objects.requireNonNull(context.handshakeCredentials)) {\n+                for (SSLCredentials cred : context.handshakeCredentials) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DHKeyExchange.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-import java.util.Objects;\n@@ -136,1 +135,1 @@\n-                        \/\/ Unlikely, the credential's generator should have\n+                        \/\/ Unlikely, the credentials generator should have\n@@ -264,1 +263,1 @@\n-                updateSignature(Objects.requireNonNull(signer),\n+                updateSignature(signer,\n@@ -537,1 +536,1 @@\n-            if (!Objects.requireNonNull(chc.algorithmConstraints).permits(\n+            if (!chc.algorithmConstraints.permits(\n@@ -548,1 +547,1 @@\n-            Objects.requireNonNull(chc.handshakeCredentials).add(\n+            chc.handshakeCredentials.add(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DHServerKeyExchange.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1153,2 +1153,1 @@\n-                while (Objects.requireNonNull(plaintextFragment).\n-                         remaining() > 0) {\n+                while (plaintextFragment.remaining() > 0) {\n@@ -1578,2 +1577,1 @@\n-            Objects.requireNonNull(plaintext.fragment).position(4);\n-                                                \/\/ ignore the TLS header\n+            plaintext.fragment.position(4);     \/\/ ignore the TLS header\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DTLSInputRecord.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -213,1 +213,1 @@\n-        \/\/ Don't process the incoming record until all the buffered records\n+        \/\/ Don't process the incoming record until all buffered records\n@@ -511,2 +511,2 @@\n-                    Objects.requireNonNull(ProtocolVersion.\n-                            valueOf(memo.majorVersion, memo.minorVersion)));\n+                    ProtocolVersion.valueOf(memo.majorVersion,\n+                            memo.minorVersion));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DTLSOutputRecord.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import java.util.Objects;\n@@ -155,2 +154,1 @@\n-            for (SSLCredentials credential :\n-                    Objects.requireNonNull(chc.handshakeCredentials)) {\n+            for (SSLCredentials credential : chc.handshakeCredentials) {\n@@ -200,1 +198,1 @@\n-            Objects.requireNonNull(chc.handshakePossessions).add(sslPossession);\n+            chc.handshakePossessions.add(sslPossession);\n@@ -262,2 +260,1 @@\n-            for (SSLPossession possession :\n-                    Objects.requireNonNull(shc.handshakePossessions)) {\n+            for (SSLPossession possession : shc.handshakePossessions) {\n@@ -290,2 +287,1 @@\n-                namedGroup = NamedGroup.nameOf(Objects.requireNonNull(\n-                        namedParams).getName());\n+                namedGroup = NamedGroup.nameOf(namedParams.getName());\n@@ -334,2 +330,1 @@\n-                Objects.requireNonNull(shc.handshakeCredentials).\n-                        add(sslCredentials);\n+                shc.handshakeCredentials.add(sslCredentials);\n@@ -381,2 +376,1 @@\n-            for (SSLCredentials cd :\n-                    Objects.requireNonNull(chc.handshakeCredentials)) {\n+            for (SSLCredentials cd : chc.handshakeCredentials) {\n@@ -398,1 +392,1 @@\n-            Objects.requireNonNull(chc.handshakePossessions).add(sslPossession);\n+            chc.handshakePossessions.add(sslPossession);\n@@ -467,2 +461,1 @@\n-            for (SSLPossession possession :\n-                    Objects.requireNonNull(shc.handshakePossessions)) {\n+            for (SSLPossession possession : shc.handshakePossessions) {\n@@ -521,2 +514,1 @@\n-                Objects.requireNonNull(shc.handshakeCredentials).\n-                        add(sslCredentials);\n+                shc.handshakeCredentials.add(sslCredentials);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ECDHClientKeyExchange.java","additions":10,"deletions":18,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import java.util.Objects;\n@@ -290,2 +289,1 @@\n-            for (SSLPossession poss :\n-                    Objects.requireNonNull(shc.handshakePossessions)) {\n+            for (SSLPossession poss : shc.handshakePossessions) {\n@@ -310,2 +308,1 @@\n-                for (SSLCredentials cred :\n-                        Objects.requireNonNull(shc.handshakeCredentials)) {\n+                for (SSLCredentials cred : shc.handshakeCredentials) {\n@@ -340,2 +337,1 @@\n-            for (SSLPossession poss :\n-                    Objects.requireNonNull(chc.handshakePossessions)) {\n+            for (SSLPossession poss : chc.handshakePossessions) {\n@@ -347,2 +343,1 @@\n-                for (SSLCredentials cred :\n-                        Objects.requireNonNull(chc.handshakeCredentials)) {\n+                for (SSLCredentials cred : chc.handshakeCredentials) {\n@@ -400,2 +395,1 @@\n-            for (SSLPossession poss :\n-                    Objects.requireNonNull(context.handshakePossessions)) {\n+            for (SSLPossession poss : context.handshakePossessions) {\n@@ -407,2 +401,1 @@\n-                for (SSLCredentials cred :\n-                        Objects.requireNonNull(context.handshakeCredentials)) {\n+                for (SSLCredentials cred : context.handshakeCredentials) {\n@@ -455,4 +448,2 @@\n-            for (SSLPossession poss :\n-                    Objects.requireNonNull(context.handshakePossessions)) {\n-                for (SSLCredentials cred :\n-                        Objects.requireNonNull(context.handshakeCredentials)) {\n+            for (SSLPossession poss : context.handshakePossessions) {\n+                for (SSLCredentials cred : context.handshakeCredentials) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ECDHKeyExchange.java","additions":8,"deletions":17,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -44,2 +44,0 @@\n-import java.util.Objects;\n-\n@@ -308,1 +306,1 @@\n-                updateSignature(Objects.requireNonNull(signer),\n+                updateSignature(signer,\n@@ -535,2 +533,1 @@\n-            Objects.requireNonNull(chc.handshakeCredentials).\n-                    add(skem.sslCredentials);\n+            chc.handshakeCredentials.add(skem.sslCredentials);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ECDHServerKeyExchange.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.util.Objects;\n@@ -174,2 +173,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).\n-                    isAvailable(CH_EC_POINT_FORMATS)) {\n+            if (!chc.sslConfig.isAvailable(CH_EC_POINT_FORMATS)) {\n@@ -187,1 +185,1 @@\n-                    Objects.requireNonNull(chc.activeCipherSuites))) {\n+                    chc.activeCipherSuites)) {\n@@ -225,2 +223,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(CH_EC_POINT_FORMATS)) {\n+            if (!shc.sslConfig.isAvailable(CH_EC_POINT_FORMATS)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ECPointFormatsExtension.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import java.util.Objects;\n-\n@@ -135,1 +133,1 @@\n-                    Objects.requireNonNull(shc.sslConfig).getEnabledExtensions(\n+                    shc.sslConfig.getEnabledExtensions(\n@@ -181,2 +179,2 @@\n-            SSLExtension[] extTypes = Objects.requireNonNull(chc.sslConfig).\n-                    getEnabledExtensions( SSLHandshake.ENCRYPTED_EXTENSIONS);\n+            SSLExtension[] extTypes = chc.sslConfig.getEnabledExtensions(\n+                    SSLHandshake.ENCRYPTED_EXTENSIONS);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/EncryptedExtensions.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.util.Objects;\n@@ -120,2 +119,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).\n-                    isAvailable(CH_EXTENDED_MASTER_SECRET) ||\n+            if (!chc.sslConfig.isAvailable(CH_EXTENDED_MASTER_SECRET) ||\n@@ -164,2 +162,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(CH_EXTENDED_MASTER_SECRET) ||\n+            if (!shc.sslConfig.isAvailable(CH_EXTENDED_MASTER_SECRET) ||\n@@ -217,2 +214,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(CH_EXTENDED_MASTER_SECRET) ||\n+            if (!shc.sslConfig.isAvailable(CH_EXTENDED_MASTER_SECRET) ||\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ExtendedMasterSecretExtension.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import java.util.Objects;\n@@ -85,2 +84,1 @@\n-                vd = Objects.requireNonNull(vds).\n-                        createVerifyData(context, false);\n+                vd = vds.createVerifyData(context, false);\n@@ -119,2 +117,1 @@\n-                myVerifyData = Objects.requireNonNull(vd).\n-                        createVerifyData(context, true);\n+                myVerifyData = vd.createVerifyData(context, true);\n@@ -221,3 +218,2 @@\n-\n-            boolean useClientLabel = (Objects.requireNonNull(context.sslConfig).\n-                    isClientMode && !isValidation) ||\n+            boolean useClientLabel =\n+                    (context.sslConfig.isClientMode && !isValidation) ||\n@@ -225,2 +221,1 @@\n-            return Objects.requireNonNull(handshakeHash).\n-                    digest(useClientLabel, masterSecretKey);\n+            return handshakeHash.digest(useClientLabel, masterSecretKey);\n@@ -240,2 +235,2 @@\n-            boolean useClientLabel = (Objects.requireNonNull(context.sslConfig).\n-                    isClientMode && !isValidation) ||\n+            boolean useClientLabel =\n+                    (context.sslConfig.isClientMode && !isValidation) ||\n@@ -251,1 +246,1 @@\n-                byte[] seed = Objects.requireNonNull(handshakeHash).digest();\n+                byte[] seed = handshakeHash.digest();\n@@ -291,2 +286,2 @@\n-            boolean useClientLabel = (Objects.requireNonNull(context.sslConfig).\n-                    isClientMode && !isValidation) ||\n+            boolean useClientLabel =\n+                    (context.sslConfig.isClientMode && !isValidation) ||\n@@ -302,1 +297,1 @@\n-                byte[] seed = Objects.requireNonNull(handshakeHash).digest();\n+                byte[] seed = handshakeHash.digest();\n@@ -358,2 +353,1 @@\n-                return hmac.doFinal(Objects.requireNonNull(\n-                        context.handshakeHash).digest());\n+                return hmac.doFinal(context.handshakeHash.digest());\n@@ -382,1 +376,1 @@\n-            if (Objects.requireNonNull(hc.sslConfig).isClientMode) {\n+            if (hc.sslConfig.isClientMode) {\n@@ -394,1 +388,1 @@\n-            Objects.requireNonNull(chc.handshakeHash).update();\n+            chc.handshakeHash.update();\n@@ -457,1 +451,1 @@\n-            Objects.requireNonNull(shc.handshakeHash).update();\n+            shc.handshakeHash.update();\n@@ -543,1 +537,1 @@\n-            if (Objects.requireNonNull(hc.sslConfig).isClientMode) {\n+            if (hc.sslConfig.isClientMode) {\n@@ -580,2 +574,2 @@\n-                Objects.requireNonNull(chc.handshakeProducers).\n-                        put(SSLHandshake.FINISHED.id, SSLHandshake.FINISHED);\n+                chc.handshakeProducers.put(SSLHandshake.FINISHED.id,\n+                        SSLHandshake.FINISHED);\n@@ -593,1 +587,1 @@\n-                        Objects.requireNonNull(chc.handshakeProducers).remove(hs.id);\n+                        chc.handshakeProducers.remove(hs.id);\n@@ -641,2 +635,2 @@\n-                Objects.requireNonNull(shc.handshakeProducers).\n-                        put(SSLHandshake.FINISHED.id, SSLHandshake.FINISHED);\n+                shc.handshakeProducers.put(SSLHandshake.FINISHED.id,\n+                        SSLHandshake.FINISHED);\n@@ -654,1 +648,1 @@\n-                        Objects.requireNonNull(shc.handshakeProducers).remove(hs.id);\n+                        shc.handshakeProducers.remove(hs.id);\n@@ -677,1 +671,1 @@\n-            if (Objects.requireNonNull(hc.sslConfig).isClientMode) {\n+            if (hc.sslConfig.isClientMode) {\n@@ -689,1 +683,1 @@\n-            Objects.requireNonNull(chc.handshakeHash).update();\n+            chc.handshakeHash.update();\n@@ -783,1 +777,1 @@\n-            Objects.requireNonNull(shc.handshakeHash).update();\n+            shc.handshakeHash.update();\n@@ -898,1 +892,1 @@\n-            if (Objects.requireNonNull(hc.sslConfig).isClientMode) {\n+            if (hc.sslConfig.isClientMode) {\n@@ -946,1 +940,1 @@\n-            Objects.requireNonNull(chc.handshakeHash).update();\n+            chc.handshakeHash.update();\n@@ -1023,2 +1017,2 @@\n-            Objects.requireNonNull(chc.handshakeProducers).\n-                    put(SSLHandshake.FINISHED.id, SSLHandshake.FINISHED);\n+            chc.handshakeProducers.put(SSLHandshake.FINISHED.id,\n+                        SSLHandshake.FINISHED);\n@@ -1121,1 +1115,1 @@\n-                Objects.requireNonNull(shc.handshakeHash).update();\n+                shc.handshakeHash.update();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/Finished.java","additions":30,"deletions":36,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -159,2 +159,1 @@\n-                Objects.requireNonNull(sslConfig).\n-                userSpecifiedAlgorithmConstraints);\n+                sslConfig.userSpecifiedAlgorithmConstraints);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/HandshakeContext.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import java.util.Objects;\n-\n@@ -202,1 +200,1 @@\n-                Objects.requireNonNull(chc.handshakeProducers).put(\n+                chc.handshakeProducers.put(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/HelloRequest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import java.util.Objects;\n-\n@@ -141,2 +139,1 @@\n-            Objects.requireNonNull(shc.handshakeProducers).\n-                    remove(SSLHandshake.HELLO_VERIFY_REQUEST.id);\n+            shc.handshakeProducers.remove(SSLHandshake.HELLO_VERIFY_REQUEST.id);\n@@ -158,2 +155,1 @@\n-            Objects.requireNonNull(shc.handshakeHash).finish();\n-                    \/\/ forgot about the handshake hash\n+            shc.handshakeHash.finish();     \/\/ forgot about the handshake hash\n@@ -200,2 +196,1 @@\n-            Objects.requireNonNull(chc.handshakeHash).finish();\n-                    \/\/ forgot about the handshake hash\n+            chc.handshakeHash.finish();     \/\/ forgot about the handshake hash\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/HelloVerifyRequest.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -225,2 +225,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).\n-                    isAvailable(SSLExtension.CH_KEY_SHARE)) {\n+            if (!chc.sslConfig.isAvailable(SSLExtension.CH_KEY_SHARE)) {\n@@ -336,2 +335,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(SSLExtension.CH_KEY_SHARE)) {\n+            if (!shc.sslConfig.isAvailable(SSLExtension.CH_KEY_SHARE)) {\n@@ -394,1 +392,1 @@\n-                Objects.requireNonNull(shc.handshakeCredentials).addAll(credentials);\n+                shc.handshakeCredentials.addAll(credentials);\n@@ -397,1 +395,1 @@\n-                Objects.requireNonNull(shc.handshakeProducers).put(\n+                shc.handshakeProducers.put(\n@@ -536,2 +534,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(SSLExtension.SH_KEY_SHARE)) {\n+            if (!shc.sslConfig.isAvailable(SSLExtension.SH_KEY_SHARE)) {\n@@ -585,1 +582,1 @@\n-                    Objects.requireNonNull(shc.handshakePossessions).add(pos);\n+                    shc.handshakePossessions.add(pos);\n@@ -593,1 +590,1 @@\n-                        Objects.requireNonNull(shc.handshakeProducers).put(\n+                        shc.handshakeProducers.put(\n@@ -644,2 +641,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).\n-                    isAvailable(SSLExtension.SH_KEY_SHARE)) {\n+            if (!chc.sslConfig.isAvailable(SSLExtension.SH_KEY_SHARE)) {\n@@ -699,1 +695,1 @@\n-            Objects.requireNonNull(chc.handshakeCredentials).add(credentials);\n+            chc.handshakeCredentials.add(credentials);\n@@ -721,1 +717,1 @@\n-            Objects.requireNonNull(chc.handshakePossessions).clear();\n+            chc.handshakePossessions.clear();\n@@ -793,2 +789,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(SSLExtension.HRR_KEY_SHARE)) {\n+            if (!shc.sslConfig.isAvailable(SSLExtension.HRR_KEY_SHARE)) {\n@@ -858,2 +853,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(SSLExtension.HRR_KEY_SHARE)) {\n+            if (!shc.sslConfig.isAvailable(SSLExtension.HRR_KEY_SHARE)) {\n@@ -898,2 +892,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).\n-                    isAvailable(SSLExtension.HRR_KEY_SHARE)) {\n+            if (!chc.sslConfig.isAvailable(SSLExtension.HRR_KEY_SHARE)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/KeyShareExtension.java","additions":13,"deletions":20,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.util.Objects;\n@@ -323,2 +322,1 @@\n-            hc.conContext.outputRecord.changeWriteCiphers(wc,\n-                    Objects.requireNonNull(km.status).id);\n+            hc.conContext.outputRecord.changeWriteCiphers(wc, km.status.id);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/KeyUpdate.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Objects;\n@@ -179,2 +178,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).\n-                    isAvailable(CH_MAX_FRAGMENT_LENGTH)) {\n+            if (!chc.sslConfig.isAvailable(CH_MAX_FRAGMENT_LENGTH)) {\n@@ -247,2 +245,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(CH_MAX_FRAGMENT_LENGTH)) {\n+            if (!shc.sslConfig.isAvailable(CH_MAX_FRAGMENT_LENGTH)) {\n@@ -302,2 +299,1 @@\n-                    (Objects.requireNonNull(shc.sslConfig).\n-                    maximumPacketSize != 0)) {\n+                    (shc.sslConfig.maximumPacketSize != 0)) {\n@@ -411,2 +407,1 @@\n-                    (Objects.requireNonNull(chc.sslConfig).\n-                    maximumPacketSize != 0)) {\n+                    (chc.sslConfig.maximumPacketSize != 0)) {\n@@ -471,2 +466,1 @@\n-                    (Objects.requireNonNull(shc.sslConfig).\n-                    maximumPacketSize != 0)) {\n+                    (shc.sslConfig.maximumPacketSize != 0)) {\n@@ -578,2 +572,1 @@\n-                    (Objects.requireNonNull(chc.sslConfig).\n-                    maximumPacketSize != 0)) {\n+                    (chc.sslConfig.maximumPacketSize != 0)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/MaxFragExtension.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -340,2 +340,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(SSLExtension.CH_PRE_SHARED_KEY)) {\n+            if (!shc.sslConfig.isAvailable(SSLExtension.CH_PRE_SHARED_KEY)) {\n@@ -543,1 +542,1 @@\n-            HandshakeHash pskBinderHash = Objects.requireNonNull(shc.handshakeHash).copy();\n+            HandshakeHash pskBinderHash = shc.handshakeHash.copy();\n@@ -722,1 +721,1 @@\n-            HandshakeHash pskBinderHash = Objects.requireNonNull(chc.handshakeHash).copy();\n+            HandshakeHash pskBinderHash = chc.handshakeHash.copy();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/PreSharedKeyExtension.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.util.Objects;\n@@ -269,2 +268,1 @@\n-                    BigInteger p = new BigInteger(\n-                            Objects.requireNonNull(primeModulus), 16);\n+                    BigInteger p = new BigInteger(primeModulus, 16);\n@@ -283,2 +281,1 @@\n-                    BigInteger g = new BigInteger(\n-                            Objects.requireNonNull(baseGenerator), 16);\n+                    BigInteger g = new BigInteger(baseGenerator, 16);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/PredefinedDHParameterSpecs.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -185,1 +185,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).isAvailable(\n+            if (!shc.sslConfig.isAvailable(\n@@ -248,1 +248,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).isAvailable(\n+            if (!chc.sslConfig.isAvailable(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/PskKeyExchangeModesExtension.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.util.Objects;\n@@ -157,2 +156,1 @@\n-            for (SSLCredentials credential :\n-                    Objects.requireNonNull(chc.handshakeCredentials)) {\n+            for (SSLCredentials credential : chc.handshakeCredentials) {\n@@ -188,1 +186,1 @@\n-                Objects.requireNonNull(chc.handshakePossessions).add(premaster);\n+                chc.handshakePossessions.add(premaster);\n@@ -253,2 +251,1 @@\n-            for (SSLPossession possession :\n-                    Objects.requireNonNull(shc.handshakePossessions)) {\n+            for (SSLPossession possession : shc.handshakePossessions) {\n@@ -287,1 +284,1 @@\n-                Objects.requireNonNull(shc.handshakeCredentials).add(premaster);\n+                shc.handshakeCredentials.add(premaster);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/RSAClientKeyExchange.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import java.util.Objects;\n@@ -261,2 +260,1 @@\n-                for (SSLPossession possession :\n-                        Objects.requireNonNull(context.handshakePossessions)) {\n+                for (SSLPossession possession : context.handshakePossessions) {\n@@ -269,2 +267,1 @@\n-                for (SSLCredentials credential :\n-                        Objects.requireNonNull(context.handshakeCredentials)) {\n+                for (SSLCredentials credential : context.handshakeCredentials) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/RSAKeyExchange.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import java.util.Objects;\n@@ -234,2 +233,1 @@\n-            for (SSLPossession possession :\n-                    Objects.requireNonNull(shc.handshakePossessions)) {\n+            for (SSLPossession possession : shc.handshakePossessions) {\n@@ -322,1 +320,1 @@\n-            if (!Objects.requireNonNull(chc.algorithmConstraints).permits(\n+            if (!chc.algorithmConstraints.permits(\n@@ -332,1 +330,1 @@\n-            Objects.requireNonNull(chc.handshakeCredentials).add(\n+            chc.handshakeCredentials.add(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/RSAServerKeyExchange.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.util.Objects;\n@@ -141,2 +140,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).\n-                    isAvailable(CH_RENEGOTIATION_INFO)) {\n+            if (!chc.sslConfig.isAvailable(CH_RENEGOTIATION_INFO)) {\n@@ -152,1 +150,1 @@\n-                if (Objects.requireNonNull(chc.activeCipherSuites).contains(\n+                if (chc.activeCipherSuites.contains(\n@@ -220,2 +218,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(CH_RENEGOTIATION_INFO)) {\n+            if (!shc.sslConfig.isAvailable(CH_RENEGOTIATION_INFO)) {\n@@ -429,2 +426,2 @@\n-                    !Objects.requireNonNull(chc.activeCipherSuites).contains(\n-                    CipherSuite.TLS_EMPTY_RENEGOTIATION_INFO_SCSV)) {\n+                    !chc.activeCipherSuites.contains(\n+                            CipherSuite.TLS_EMPTY_RENEGOTIATION_INFO_SCSV)) {\n@@ -507,2 +504,2 @@\n-                    !Objects.requireNonNull(chc.activeCipherSuites).contains(\n-                    CipherSuite.TLS_EMPTY_RENEGOTIATION_INFO_SCSV)) {\n+                    !chc.activeCipherSuites.contains(\n+                            CipherSuite.TLS_EMPTY_RENEGOTIATION_INFO_SCSV)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/RenegoInfoExtension.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.util.Objects;\n@@ -392,1 +391,1 @@\n-            memo.majorVersion = protocolVersion.major;  \/\/ kick-start version?\n+            memo.majorVersion = protocolVersion.major;  \/\/ kick start version?\n@@ -541,2 +540,2 @@\n-                    Objects.requireNonNull(ProtocolVersion.\n-                            valueOf(memo.majorVersion, memo.minorVersion)));\n+                    ProtocolVersion.valueOf(memo.majorVersion,\n+                            memo.minorVersion));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLEngineOutputRecord.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -403,2 +403,1 @@\n-            if (Objects.requireNonNull(handshakeContext.sslConfig).\n-                    isClientMode) {\n+            if (handshakeContext.sslConfig.isClientMode) {\n@@ -487,2 +486,1 @@\n-            if (Objects.requireNonNull(handshakeContext.sslConfig).\n-                    isClientMode) {\n+            if (handshakeContext.sslConfig.isClientMode) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLKeyExchange.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.util.Objects;\n@@ -132,1 +131,1 @@\n-                Objects.requireNonNull(context.handshakeHash).utilize();\n+                context.handshakeHash.utilize();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLMasterKeyDerivation.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -267,2 +267,1 @@\n-                if (!Objects.requireNonNull(shc.sslConfig).\n-                        enableSessionCreation) {\n+                if (!shc.sslConfig.enableSessionCreation) {\n@@ -301,1 +300,1 @@\n-                Objects.requireNonNull(shc.handshakePossessions).addAll(\n+                shc.handshakePossessions.addAll(\n@@ -303,1 +302,1 @@\n-                Objects.requireNonNull(shc.handshakeHash).determine(\n+                shc.handshakeHash.determine(\n@@ -317,1 +316,1 @@\n-                        Objects.requireNonNull(shc.handshakeProducers).put(\n+                        shc.handshakeProducers.put(\n@@ -329,1 +328,1 @@\n-                            Objects.requireNonNull(shc.handshakeProducers).put(\n+                            shc.handshakeProducers.put(\n@@ -336,2 +335,1 @@\n-                Objects.requireNonNull(shc.handshakeProducers).\n-                        put(SSLHandshake.SERVER_HELLO_DONE.id,\n+                shc.handshakeProducers.put(SSLHandshake.SERVER_HELLO_DONE.id,\n@@ -353,1 +351,1 @@\n-                Objects.requireNonNull(shc.handshakeHash).determine(\n+                shc.handshakeHash.determine(\n@@ -368,1 +366,1 @@\n-                Objects.requireNonNull(shc.sslConfig).getEnabledExtensions(\n+                shc.sslConfig.getEnabledExtensions(\n@@ -393,2 +391,2 @@\n-                Objects.requireNonNull(shc.handshakeProducers).\n-                        put(SSLHandshake.FINISHED.id, SSLHandshake.FINISHED);\n+                shc.handshakeProducers.put(SSLHandshake.FINISHED.id,\n+                        SSLHandshake.FINISHED);\n@@ -510,2 +508,1 @@\n-                if (!Objects.requireNonNull(shc.sslConfig).\n-                        enableSessionCreation) {\n+                if (!shc.sslConfig.enableSessionCreation) {\n@@ -542,1 +539,1 @@\n-                Objects.requireNonNull(shc.handshakeHash).determine(\n+                shc.handshakeHash.determine(\n@@ -549,1 +546,1 @@\n-                Objects.requireNonNull(shc.sslConfig).getEnabledExtensions(\n+                shc.sslConfig.getEnabledExtensions(\n@@ -556,1 +553,1 @@\n-                Objects.requireNonNull(shc.handshakeHash).determine(\n+                shc.handshakeHash.determine(\n@@ -564,2 +561,1 @@\n-            Objects.requireNonNull(shc.handshakeProducers).\n-                    put(SSLHandshake.ENCRYPTED_EXTENSIONS.id,\n+            shc.handshakeProducers.put(SSLHandshake.ENCRYPTED_EXTENSIONS.id,\n@@ -784,1 +780,1 @@\n-            Objects.requireNonNull(shc.handshakeHash).determine(\n+            shc.handshakeHash.determine(\n@@ -789,1 +785,1 @@\n-                    Objects.requireNonNull(shc.sslConfig).getEnabledExtensions(\n+                shc.sslConfig.getEnabledExtensions(\n@@ -842,1 +838,1 @@\n-                    Objects.requireNonNull(shc.sslConfig).getEnabledExtensions(\n+                    shc.sslConfig.getEnabledExtensions(\n@@ -918,2 +914,1 @@\n-            if (!Objects.requireNonNull(chc.activeProtocols).\n-                    contains(serverVersion)) {\n+            if (!chc.activeProtocols.contains(serverVersion)) {\n@@ -926,1 +921,1 @@\n-            if (!Objects.requireNonNull(serverVersion).useTLS13PlusSpec()) {\n+            if (!serverVersion.useTLS13PlusSpec()) {\n@@ -941,1 +936,1 @@\n-            Objects.requireNonNull(chc.handshakePossessions).clear();\n+            chc.handshakePossessions.clear();\n@@ -971,2 +966,1 @@\n-            if (!Objects.requireNonNull(chc.activeProtocols).\n-                    contains(serverVersion)) {\n+            if (!chc.activeProtocols.contains(serverVersion)) {\n@@ -986,2 +980,1 @@\n-                    \"Negotiated protocol version: \" +\n-                    Objects.requireNonNull(serverVersion).name);\n+                    \"Negotiated protocol version: \" + serverVersion.name);\n@@ -996,1 +989,1 @@\n-            if (Objects.requireNonNull(serverVersion).isDTLS) {\n+            if (serverVersion.isDTLS) {\n@@ -1002,1 +995,1 @@\n-                    Objects.requireNonNull(chc.handshakePossessions).clear();\n+                    chc.handshakePossessions.clear();\n@@ -1012,1 +1005,1 @@\n-                    Objects.requireNonNull(chc.handshakePossessions).clear();\n+                    chc.handshakePossessions.clear();\n@@ -1042,1 +1035,1 @@\n-            Objects.requireNonNull(chc.handshakeHash).determine(\n+            chc.handshakeHash.determine(\n@@ -1096,2 +1089,1 @@\n-                    if (!Objects.requireNonNull(chc.sslConfig).\n-                            enableSessionCreation) {\n+                    if (!chc.sslConfig.enableSessionCreation) {\n@@ -1105,2 +1097,1 @@\n-            extTypes = Objects.requireNonNull(chc.sslConfig).\n-                    getEnabledExtensions(\n+            extTypes = chc.sslConfig.getEnabledExtensions(\n@@ -1233,1 +1224,1 @@\n-            Objects.requireNonNull(chc.handshakeHash).determine(\n+            chc.handshakeHash.determine(\n@@ -1242,2 +1233,2 @@\n-            SSLExtension[] extTypes = Objects.requireNonNull(chc.sslConfig).\n-                    getEnabledExtensions(SSLHandshake.SERVER_HELLO);\n+            SSLExtension[] extTypes = chc.sslConfig.getEnabledExtensions(\n+                    SSLHandshake.SERVER_HELLO);\n@@ -1442,2 +1433,2 @@\n-            SSLExtension[] extTypes = Objects.requireNonNull(chc.sslConfig).\n-                    getEnabledExtensions(SSLHandshake.HELLO_RETRY_REQUEST);\n+            SSLExtension[] extTypes = chc.sslConfig.getEnabledExtensions(\n+                    SSLHandshake.HELLO_RETRY_REQUEST);\n@@ -1453,2 +1444,1 @@\n-            \/\/ reset the handshake hash\n-            Objects.requireNonNull(chc.handshakeHash).finish();\n+            chc.handshakeHash.finish();     \/\/ reset the handshake hash\n@@ -1489,2 +1479,1 @@\n-            int hrrBodyLen = Objects.requireNonNull(\n-                   helloRetryRequest.handshakeRecord).remaining();\n+            int hrrBodyLen = helloRetryRequest.handshakeRecord.remaining();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ServerHello.java","additions":36,"deletions":47,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import java.util.Objects;\n-\n@@ -165,2 +163,1 @@\n-            Objects.requireNonNull(chc.handshakeProducers).\n-                    put(SSLHandshake.CLIENT_KEY_EXCHANGE.id,\n+            chc.handshakeProducers.put(SSLHandshake.CLIENT_KEY_EXCHANGE.id,\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ServerHelloDone.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -217,2 +217,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).\n-                    isAvailable(CH_SERVER_NAME)) {\n+            if (!chc.sslConfig.isAvailable(CH_SERVER_NAME)) {\n@@ -289,2 +288,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(CH_SERVER_NAME)) {\n+            if (!shc.sslConfig.isAvailable(CH_SERVER_NAME)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ServerNameExtension.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.util.Objects;\n@@ -418,1 +417,1 @@\n-                                Objects.requireNonNull(chc.sslConfig),\n+                                chc.sslConfig,\n@@ -439,2 +438,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(CH_SESSION_TICKET)) {\n+            if (!shc.sslConfig.isAvailable(CH_SESSION_TICKET)) {\n@@ -524,2 +522,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).\n-                    isAvailable(SH_SESSION_TICKET)) {\n+            if (!chc.sslConfig.isAvailable(SH_SESSION_TICKET)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SessionTicketExtension.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.util.Objects;\n@@ -179,1 +178,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).isAvailable(\n+            if (!chc.sslConfig.isAvailable(\n@@ -232,1 +231,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).isAvailable(\n+            if (!shc.sslConfig.isAvailable(\n@@ -302,1 +301,1 @@\n-                if (Objects.requireNonNull(shc.sslConfig).clientAuthType !=\n+                if (shc.sslConfig.clientAuthType !=\n@@ -304,1 +303,1 @@\n-                    Objects.requireNonNull(shc.handshakeProducers).putIfAbsent(\n+                    shc.handshakeProducers.putIfAbsent(\n@@ -308,1 +307,1 @@\n-                Objects.requireNonNull(shc.handshakeProducers).put(\n+                shc.handshakeProducers.put(\n@@ -408,1 +407,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).isAvailable(\n+            if (!shc.sslConfig.isAvailable(\n@@ -459,1 +458,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).isAvailable(\n+            if (!chc.sslConfig.isAvailable(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SignatureAlgorithmsExtension.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -339,2 +339,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).\n-                    isAvailable(CH_SUPPORTED_GROUPS)) {\n+            if (!chc.sslConfig.isAvailable(CH_SUPPORTED_GROUPS)) {\n@@ -358,4 +357,2 @@\n-                        ng.isSupported(\n-                        Objects.requireNonNull(chc.activeCipherSuites)) &&\n-                        ng.isPermitted(\n-                        Objects.requireNonNull(chc.algorithmConstraints))) {\n+                        ng.isSupported(chc.activeCipherSuites) &&\n+                        ng.isPermitted(chc.algorithmConstraints)) {\n@@ -413,2 +410,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(CH_SUPPORTED_GROUPS)) {\n+            if (!shc.sslConfig.isAvailable(CH_SUPPORTED_GROUPS)) {\n@@ -489,2 +485,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(EE_SUPPORTED_GROUPS)) {\n+            if (!shc.sslConfig.isAvailable(EE_SUPPORTED_GROUPS)) {\n@@ -511,4 +506,2 @@\n-                        ng.isSupported(Objects.requireNonNull(\n-                        shc.activeCipherSuites)) &&\n-                        ng.isPermitted(Objects.requireNonNull(\n-                        shc.algorithmConstraints))) {\n+                        ng.isSupported(shc.activeCipherSuites) &&\n+                        ng.isPermitted(shc.algorithmConstraints)) {\n@@ -562,2 +555,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).\n-                    isAvailable(EE_SUPPORTED_GROUPS)) {\n+            if (!chc.sslConfig.isAvailable(EE_SUPPORTED_GROUPS)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SupportedGroupsExtension.java","additions":8,"deletions":16,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.util.Objects;\n@@ -171,1 +170,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).isAvailable(CH_SUPPORTED_VERSIONS)) {\n+            if (!chc.sslConfig.isAvailable(CH_SUPPORTED_VERSIONS)) {\n@@ -183,2 +182,1 @@\n-            int[] protocols = new int[Objects.requireNonNull(\n-                    chc.activeProtocols).size()];\n+            int[] protocols = new int[chc.activeProtocols.size()];\n@@ -220,2 +218,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(CH_SUPPORTED_VERSIONS)) {\n+            if (!shc.sslConfig.isAvailable(CH_SUPPORTED_VERSIONS)) {\n@@ -322,2 +319,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(SH_SUPPORTED_VERSIONS)) {\n+            if (!shc.sslConfig.isAvailable(SH_SUPPORTED_VERSIONS)) {\n@@ -362,2 +358,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).\n-                    isAvailable(SH_SUPPORTED_VERSIONS)) {\n+            if (!chc.sslConfig.isAvailable(SH_SUPPORTED_VERSIONS)) {\n@@ -406,2 +401,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                       isAvailable(HRR_SUPPORTED_VERSIONS)) {\n+            if (!shc.sslConfig.isAvailable(HRR_SUPPORTED_VERSIONS)) {\n@@ -449,2 +443,1 @@\n-            if (!Objects.requireNonNull(chc.sslConfig).\n-                    isAvailable(HRR_SUPPORTED_VERSIONS)) {\n+            if (!chc.sslConfig.isAvailable(HRR_SUPPORTED_VERSIONS)) {\n@@ -492,2 +485,1 @@\n-            if (!Objects.requireNonNull(shc.sslConfig).\n-                    isAvailable(HRR_SUPPORTED_VERSIONS)) {\n+            if (!shc.sslConfig.isAvailable(HRR_SUPPORTED_VERSIONS)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SupportedVersionsExtension.java","additions":8,"deletions":16,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,0 @@\n-import java.util.Objects;\n-\n@@ -179,2 +177,1 @@\n-            for (SSLPossession poss :\n-                    Objects.requireNonNull(context.handshakePossessions)) {\n+            for (SSLPossession poss : context.handshakePossessions) {\n@@ -186,2 +183,1 @@\n-                for (SSLCredentials cred :\n-                        Objects.requireNonNull(context.handshakeCredentials)) {\n+                for (SSLCredentials cred : context.handshakeCredentials) {\n@@ -210,2 +206,1 @@\n-                    Objects.requireNonNull(xdhePossession).privateKey,\n-                    xdheCredentials.popPublicKey);\n+                    xdhePossession.privateKey, xdheCredentials.popPublicKey);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/XDHKeyExchange.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.util.Objects;\n@@ -219,1 +218,1 @@\n-            Objects.requireNonNull(keystore).engineLoad(null, password);\n+            keystore.engineLoad(stream, password);\n@@ -229,2 +228,1 @@\n-                Objects.requireNonNull(tmp).\n-                        engineLoad(bufferedStream, password);\n+                tmp.engineLoad(bufferedStream, password);\n@@ -251,2 +249,1 @@\n-                    Objects.requireNonNull(tmp).\n-                            engineLoad(bufferedStream, password);\n+                    tmp.engineLoad(bufferedStream, password);\n@@ -309,1 +306,1 @@\n-            result = Objects.requireNonNull(keystore).engineProbe(stream);\n+            result = keystore.engineProbe(stream);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KeyStoreDelegator.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.util.Objects;\n@@ -82,1 +81,1 @@\n-                switch (c = Objects.requireNonNull(in).read()) {\n+                switch (c = in.read()) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Password.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -219,1 +219,1 @@\n-            Objects.requireNonNull(pkixParameters).addCertPathChecker(\n+            pkixParameters.addCertPathChecker(\n@@ -225,1 +225,1 @@\n-            addResponses(Objects.requireNonNull(pkixParameters), chain, responseList);\n+            addResponses(pkixParameters, chain, responseList);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/validator\/PKIXValidator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}