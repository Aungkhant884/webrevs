{"files":[{"patch":"@@ -84,1 +84,2 @@\n-        \/\/ enable events requires live thread\n+        \/\/ setThread(thread) enables JVMTI events, and that can only be done on a live thread,\n+        \/\/ so wait until the thread has started.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/scenarios\/hotswap\/HS201\/hs201t002.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,0 +51,6 @@\n+\/\/ callbackException (isCatch == false) and callbackExceptionCatch (isCatch == true) handler\n+void handleException(bool isCatch,\n+    jvmtiEnv* jvmti_env, JNIEnv* jni_env, jthread thread,\n+    jmethodID method, jlocation location,\n+    jobject exception);\n+\n@@ -53,1 +59,1 @@\n-int readNewBytecode(jvmtiEnv* jvmti, jint &newClassSize, unsigned char* &newClassBytes);\n+int readNewBytecode(jvmtiEnv* jvmti, jint *newClassSize, unsigned char* *newClassBytes);\n@@ -107,1 +113,1 @@\n-    if (!NSK_VERIFY(readNewBytecode(jvmti_env, newClassSize, newClassBytes))) {\n+    if (!NSK_VERIFY(readNewBytecode(jvmti_env, &newClassSize, &newClassBytes))) {\n@@ -319,23 +325,1 @@\n-    const char *className;\n-\n-    className = getClassName(jvmti_env, jni_env, exception);\n-\n-    if (className != NULL && strcmp(EXPECTED_CLASS_SIGN, className) == 0) {\n-        jclass klass;\n-\n-        const char *threadName = getThreadName(jvmti_env, jni_env, thread);\n-        NSK_DISPLAY2(\">>>> Exception %s in thread - %s\\n\",\n-                        className, threadName != NULL ? threadName : \"NULL\");\n-        jvmti->Deallocate((unsigned char*)className);\n-        if (threadName != NULL) {\n-            jvmti->Deallocate((unsigned char*)threadName);\n-        }\n-\n-        testStep++;\n-        if (!NSK_JNI_VERIFY(jni_env, (klass = jni_env->GetObjectClass(exception)) != NULL)) {\n-            nsk_jvmti_setFailStatus();\n-            return;\n-        }\n-\n-        redefineClass(jvmti_env, klass);\n-    }\n+    handleException(false, jvmti_env, jni_env, thread, method, location, exception);\n@@ -355,1 +339,4 @@\n-    const char *className;\n+    handleException(true, jvmti_env, jni_env, thread, method, location, exception);\n+}\n+\n+\/* ============================================================================= *\/\n@@ -357,1 +344,5 @@\n-    className = getClassName(jvmti_env, jni_env, exception);\n+void handleException(bool isCatch,\n+                     jvmtiEnv* jvmti_env, JNIEnv* jni_env, jthread thread,\n+                     jmethodID method, jlocation location,\n+                     jobject exception) {\n+    const char* className = getClassName(jvmti_env, jni_env, exception);\n@@ -362,2 +353,2 @@\n-        const char *threadName = getThreadName(jvmti_env, jni_env, thread);\n-        NSK_DISPLAY2(\">>>> Caught exception %s in thread - %s\\n\",\n+        const char* threadName = getThreadName(jvmti_env, jni_env, thread);\n+        NSK_DISPLAY3(\">>>> %s %s in thread - %s\\n\", isCatch ? \"Caught exception\" : \"Exception\",\n@@ -378,0 +369,1 @@\n+\n@@ -380,1 +372,0 @@\n-\/* ============================================================================= *\/\n@@ -382,1 +373,1 @@\n-int readNewBytecode(jvmtiEnv* jvmti, jint &newClassSize, unsigned char* &newClassBytes) {\n+int readNewBytecode(jvmtiEnv* jvmti, jint *newClassSize, unsigned char* *newClassBytes) {\n@@ -408,1 +399,1 @@\n-    newClassSize = ftell(bytecode);\n+    *newClassSize = ftell(bytecode);\n@@ -411,1 +402,1 @@\n-    if (!NSK_JVMTI_VERIFY(jvmti->Allocate(newClassSize, &newClassBytes))) {\n+    if (!NSK_JVMTI_VERIFY(jvmti->Allocate(*newClassSize, newClassBytes))) {\n@@ -415,1 +406,1 @@\n-    read_bytes = (jint) fread(newClassBytes, 1, newClassSize, bytecode);\n+    read_bytes = (jint) fread(*newClassBytes, 1, *newClassSize, bytecode);\n@@ -417,1 +408,1 @@\n-    if (read_bytes != newClassSize) {\n+    if (read_bytes != *newClassSize) {\n@@ -419,2 +410,2 @@\n-        jvmti->Deallocate(newClassBytes);\n-        newClassBytes = NULL;\n+        jvmti->Deallocate(*newClassBytes);\n+        *newClassBytes = NULL;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/scenarios\/hotswap\/HS201\/hs201t002\/hs201t002.cpp","additions":28,"deletions":37,"binary":false,"changes":65,"status":"modified"}]}