{"files":[{"patch":"@@ -436,0 +436,4 @@\n+     * @apiNote\n+     * To create a {@code HashMap} with an initial capacity that accommodates\n+     * an expected number of mappings, use {@link #newHashMap(int) newHashMap}.\n+     *\n@@ -458,0 +462,4 @@\n+     * @apiNote\n+     * To create a {@code HashMap} with an initial capacity that accommodates\n+     * an expected number of mappings, use {@link #newHashMap(int) newHashMap}.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashMap.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -342,0 +342,4 @@\n+     * @apiNote\n+     * To create a {@code LinkedHashMap} with an initial capacity that accommodates\n+     * an expected number of mappings, use {@link #newLinkedHashMap(int) newLinkedHashMap}.\n+     *\n@@ -356,0 +360,4 @@\n+     * @apiNote\n+     * To create a {@code LinkedHashMap} with an initial capacity that accommodates\n+     * an expected number of mappings, use {@link #newLinkedHashMap(int) newLinkedHashMap}.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedHashMap.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -201,0 +201,4 @@\n+     * @apiNote\n+     * To create a {@code WeakHashMap} with an initial capacity that accommodates\n+     * an expected number of mappings, use {@link #newWeakHashMap(int) newWeakHashMap}.\n+     *\n@@ -226,0 +230,4 @@\n+     * @apiNote\n+     * To create a {@code WeakHashMap} with an initial capacity that accommodates\n+     * an expected number of mappings, use {@link #newWeakHashMap(int) newWeakHashMap}.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/util\/WeakHashMap.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n- * @bug 8210280 8281631\n+ * @bug 8186958 8210280 8281631\n@@ -204,1 +204,1 @@\n-        for (int i = 2; i < 128; i++) {\n+        for (int i = 2; i < 64; i++) {\n@@ -283,1 +283,1 @@\n-                \/\/ pcc(\"fwm0pa\", size, cap, () -> new WeakHashMap<>(),                map -> { map.putAll(fakeMap(size)); }), \/\/ see note\n+             \/\/ pcc(\"fwm0pa\", size, cap, () -> new WeakHashMap<>(),                map -> { map.putAll(fakeMap(size)); }), \/\/ see note\n@@ -295,1 +295,0 @@\n-        cases.addAll(genPopulatedCapacityCases(11,  16));\n@@ -298,1 +297,4 @@\n-        cases.addAll(genPopulatedCapacityCases(64, 128));\n+        cases.addAll(genPopulatedCapacityCases(24,  32));\n+        cases.addAll(genPopulatedCapacityCases(25,  64));\n+        cases.addAll(genPopulatedCapacityCases(48,  64));\n+        cases.addAll(genPopulatedCapacityCases(49, 128));\n@@ -302,3 +304,4 @@\n-        cases.addAll(genFakePopulatedCapacityCases(25165824, 33554432));\n-        cases.addAll(genFakePopulatedCapacityCases(25165825, 67108864));\n-        cases.addAll(genFakePopulatedCapacityCases(25165826, 67108864));\n+        cases.addAll(genFakePopulatedCapacityCases(25165824,  33554432));\n+        cases.addAll(genFakePopulatedCapacityCases(25165825,  67108864));\n+        cases.addAll(genFakePopulatedCapacityCases(50331648,  67108864));\n+        cases.addAll(genFakePopulatedCapacityCases(50331649, 134217728));\n@@ -320,0 +323,49 @@\n+    \/*\n+     * tests for requested size (static factory methods)\n+     *\/\n+\n+    \/\/ helper method for one requested size case, to provide target types for lambda\n+    Object[] rsc(String label,\n+                 int size,\n+                 int expectedCapacity,\n+                 Supplier<Map<String, String>> supplier) {\n+        return new Object[]{label, size, expectedCapacity, supplier};\n+    }\n+\n+    List<Object[]> genRequestedSizeCases(int size, int cap) {\n+        return Arrays.asList(\n+                rsc(\"rshm\", size, cap, () -> HashMap.newHashMap(size)),\n+                rsc(\"rslm\", size, cap, () -> LinkedHashMap.newLinkedHashMap(size)),\n+                rsc(\"rswm\", size, cap, () -> WeakHashMap.newWeakHashMap(size))\n+        );\n+    }\n+\n+    @DataProvider(name = \"requestedSize\")\n+    public Iterator<Object[]> requestedSizeCases() {\n+        ArrayList<Object[]> cases = new ArrayList<>();\n+        cases.addAll(genRequestedSizeCases(12,  16));\n+        cases.addAll(genRequestedSizeCases(13,  32));\n+        cases.addAll(genRequestedSizeCases(24,  32));\n+        cases.addAll(genRequestedSizeCases(25,  64));\n+        cases.addAll(genRequestedSizeCases(48,  64));\n+        cases.addAll(genRequestedSizeCases(49, 128));\n+\n+        \/\/ numbers in this range are truncated by a float computation with 0.75f\n+        \/\/ but can get an exact result with a double computation with 0.75d\n+        cases.addAll(genRequestedSizeCases(25165824,  33554432));\n+        cases.addAll(genRequestedSizeCases(25165825,  67108864));\n+        cases.addAll(genRequestedSizeCases(50331648,  67108864));\n+        cases.addAll(genRequestedSizeCases(50331649, 134217728));\n+\n+        return cases.iterator();\n+    }\n+\n+    @Test(dataProvider = \"requestedSize\")\n+    public void requestedSize(String label,  \/\/ unused, included for diagnostics\n+                              int size,      \/\/ unused, included for diagnostics\n+                              int expectedCapacity,\n+                              Supplier<Map<String, String>> s) {\n+        Map<String, String> map = s.get();\n+        map.put(\"\", \"\");\n+        assertEquals(capacity(map), expectedCapacity);\n+    }\n","filename":"test\/jdk\/java\/util\/HashMap\/WhiteBoxResizeTest.java","additions":60,"deletions":8,"binary":false,"changes":68,"status":"modified"}]}