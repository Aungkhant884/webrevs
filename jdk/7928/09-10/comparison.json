{"files":[{"patch":"@@ -792,1 +792,1 @@\n-     * Creates a new, empty LinkedHashMap suitable for the expected number of mappings.\n+     * Creates a new, empty, insertion-ordered LinkedHashMap suitable for the expected number of mappings.\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedHashMap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,115 +0,0 @@\n-\/*\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.Measurement;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.Warmup;\n-import org.openjdk.jmh.infra.Blackhole;\n-\n-import java.util.concurrent.TimeUnit;\n-\n-@State(Scope.Thread)\n-@BenchmarkMode(Mode.Throughput)\n-@OutputTimeUnit(TimeUnit.SECONDS)\n-public class CalculateHashMapCapacityTestJMH {\n-\n-    \/**\n-     * Calculate initial capacity for HashMap based classes, from expected size.\n-     *\n-     * @param expectedSize expected size\n-     * @return initial capacity for HashMap based classes.\n-     * @since 19\n-     *\/\n-    private static int calculateHashMapCapacity1(int expectedSize) {\n-        return (int) Math.ceil(expectedSize \/ 0.75);\n-    }\n-\n-    \/**\n-     * Calculate initial capacity for HashMap based classes, from expected size.\n-     *\n-     * @param expectedSize expected size\n-     * @return initial capacity for HashMap based classes.\n-     * @since 19\n-     *\/\n-    private static int calculateHashMapCapacity2(int expectedSize) {\n-        if (expectedSize >= Integer.MAX_VALUE \/ 4 * 3 + 3) {\n-            return Integer.MAX_VALUE;\n-        }\n-        if (expectedSize > 0) {\n-            return (expectedSize + (expectedSize + 2) \/ 3);\n-        }\n-        return expectedSize;\n-    }\n-\n-    \/**\n-     * Calculate initial capacity for HashMap based classes, from expected size.\n-     *\n-     * @param expectedSize expected size\n-     * @return initial capacity for HashMap based classes.\n-     * @since 19\n-     *\/\n-    private static int calculateHashMapCapacity3(int expectedSize) {\n-        if (expectedSize >= 805306368) {\n-            return (1 << 30);\n-        }\n-        if (expectedSize > 0) {\n-            return (expectedSize + (expectedSize + 2) \/ 3);\n-        }\n-        return expectedSize;\n-    }\n-\n-    @Warmup(iterations = 20)\n-    @Measurement(iterations = 10)\n-    @Benchmark\n-    public void testCalculateHashMapCapacity1(Blackhole blackhole) {\n-        for (int i = 0; i < Integer.MAX_VALUE; i++) {\n-            blackhole.consume(calculateHashMapCapacity1(i));\n-        }\n-    }\n-\n-    @Warmup(iterations = 20)\n-    @Measurement(iterations = 10)\n-    @Benchmark\n-    public void testCalculateHashMapCapacity2(Blackhole blackhole) {\n-        for (int i = 0; i < Integer.MAX_VALUE; i++) {\n-            blackhole.consume(calculateHashMapCapacity2(i));\n-        }\n-    }\n-\n-    @Warmup(iterations = 20)\n-    @Measurement(iterations = 10)\n-    @Benchmark\n-    public void testCalculateHashMapCapacity3(Blackhole blackhole) {\n-        for (int i = 0; i < Integer.MAX_VALUE; i++) {\n-            blackhole.consume(calculateHashMapCapacity3(i));\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/util\/Collections\/CalculateHashMapCapacityTestJMH.java","additions":0,"deletions":115,"binary":false,"changes":115,"status":"deleted"}]}