{"files":[{"patch":"@@ -2551,19 +2551,1 @@\n-     * <p>This function is designed to return equal results than {@code (int)Math.ceil(expectedSize \/ 0.75)} when expectedSize&gt;=0.\n-     * When expectedSize&lt;0, result of this function is meaningless.\n-     *\n-     * <p>Implementation logic of this function is:\n-     *\n-     * <p>1. When expectedSize is a small enough positive number,\n-     * {@code (expectedSize + (expectedSize + 2) \/ 3)} always equals to {@code (int)Math.ceil(expectedSize \/ 0.75)}, as\n-     * {@code (int)Math.ceil(expectedSize \/ 0.75)} equals to {@code (int)Math.ceil(expectedSize + expectedSize \/ 3.0)},\n-     * thus equals to {@code expectedSize + (int)Math.ceil(expectedSize \/ 3.0)},\n-     * thus equals to {@code (expectedSize + (expectedSize + 2) \/ 3)}.\n-     *\n-     * <p>2. When expectedSize is a big enough positive number (at least {@code Integer.MAX_VALUE \/ 4 * 3 + 3}, or say, 1610612736),\n-     * {@code (expectedSize + (expectedSize + 2) \/ 3)} would overflow, in this turn we just return {@code Integer.MAX_VALUE}\n-     *\n-     * <p>3. When expectedSize is 0, return 0.\n-     *\n-     * <p>4. User must never let expectedSize be negative.Otherwise, return any number &lt; 0.\n-     *\n-     * @param expectedSize expected size\n+     * @param numMappings the expected number of mappings\n@@ -2573,8 +2555,2 @@\n-    static int calculateHashMapCapacity(int expectedSize) {\n-        if (expectedSize >= Integer.MAX_VALUE \/ 4 * 3 + 3) {\n-            return Integer.MAX_VALUE;\n-        }\n-        if (expectedSize > 0) {\n-            return (expectedSize + (expectedSize + 2) \/ 3);\n-        }\n-        return expectedSize;\n+    static int calculateHashMapCapacity(int numMappings) {\n+        return (int) Math.ceil(numMappings \/ 0.75);\n@@ -2584,3 +2560,4 @@\n-     * Creates a new, empty HashMap with an initial table size\n-     * accommodating the specified number of elements and default load factor (0.75)\n-     * without the need to dynamically resize.\n+     * Creates a new, empty HashMap suitable for the expected number of mappings.\n+     * The returned map uses the default load factor of 0.75, and its initial capacity is\n+     * generally large enough so that the expected number of mappings can be added\n+     * without resizing the map.\n@@ -2588,5 +2565,5 @@\n-     * @param expectedSize expected size\n-     * @param <K>          the type of keys maintained by this map\n-     * @param <V>          the type of mapped values\n-     * @return the HashMap created.\n-     * @throws IllegalArgumentException if the initial capacity is negative.\n+     * @param numMappings the expected number of mappings\n+     * @param <K>         the type of keys maintained by this map\n+     * @param <V>         the type of mapped values\n+     * @return the newly created map\n+     * @throws IllegalArgumentException if numMappings is negative\n@@ -2595,2 +2572,2 @@\n-    public static <K, V> HashMap<K, V> newHashMap(int expectedSize) {\n-        return new HashMap<>(calculateHashMapCapacity(expectedSize));\n+    public static <K, V> HashMap<K, V> newHashMap(int numMappings) {\n+        return new HashMap<>(calculateHashMapCapacity(numMappings));\n@@ -2599,0 +2576,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashMap.java","additions":15,"deletions":37,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -792,3 +792,4 @@\n-     * Creates a new, empty LinkedHashMap with an initial table size\n-     * accommodating the specified number of elements and default load factor (0.75)\n-     * without the need to dynamically resize.\n+     * Creates a new, empty LinkedHashMap suitable for the expected number of mappings.\n+     * The returned map uses the default load factor of 0.75, and its initial capacity is\n+     * generally large enough so that the expected number of mappings can be added\n+     * without resizing the map.\n@@ -796,5 +797,5 @@\n-     * @param expectedSize expected size\n-     * @param <K>          the type of keys maintained by this map\n-     * @param <V>          the type of mapped values\n-     * @return the LinkedHashMap created.\n-     * @throws IllegalArgumentException if the initial capacity is negative.\n+     * @param numMappings the expected number of mappings\n+     * @param <K>         the type of keys maintained by this map\n+     * @param <V>         the type of mapped values\n+     * @return the newly created map\n+     * @throws IllegalArgumentException if numMappings is negative\n@@ -803,2 +804,2 @@\n-    public static <K, V> LinkedHashMap<K, V> newLinkedHashMap(int expectedSize) {\n-        return new LinkedHashMap<>(HashMap.calculateHashMapCapacity(expectedSize));\n+    public static <K, V> LinkedHashMap<K, V> newLinkedHashMap(int numMappings) {\n+        return new LinkedHashMap<>(HashMap.calculateHashMapCapacity(numMappings));\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedHashMap.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1339,3 +1339,4 @@\n-     * Creates a new, empty WeakHashMap with an initial table size\n-     * accommodating the specified number of elements and default load factor (0.75)\n-     * without the need to dynamically resize.\n+     * Creates a new, empty WeakHashMap suitable for the expected number of mappings.\n+     * The returned map uses the default load factor of 0.75, and its initial capacity is\n+     * generally large enough so that the expected number of mappings can be added\n+     * without resizing the map.\n@@ -1343,5 +1344,5 @@\n-     * @param expectedSize expected size\n-     * @param <K>          the type of keys maintained by this map\n-     * @param <V>          the type of mapped values\n-     * @return the WeakHashMap created.\n-     * @throws IllegalArgumentException if the initial capacity is negative.\n+     * @param numMappings the expected number of mappings\n+     * @param <K>         the type of keys maintained by this map\n+     * @param <V>         the type of mapped values\n+     * @return the newly created map\n+     * @throws IllegalArgumentException if numMappings is negative\n@@ -1350,2 +1351,2 @@\n-    public static <K, V> WeakHashMap<K, V> newWeakHashMap(int expectedSize) {\n-        return new WeakHashMap<>(HashMap.calculateHashMapCapacity(expectedSize));\n+    public static <K, V> WeakHashMap<K, V> newWeakHashMap(int numMappings) {\n+        return new WeakHashMap<>(HashMap.calculateHashMapCapacity(numMappings));\n","filename":"src\/java.base\/share\/classes\/java\/util\/WeakHashMap.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"}]}