{"files":[{"patch":"@@ -573,1 +573,1 @@\n-                    map = new HashMap<>((int)Math.ceil(names.length \/ 0.75));\n+                    map = HashMap.newHashMap(names.length);\n","filename":"src\/java.base\/macosx\/classes\/sun\/util\/locale\/provider\/HostLocaleProviderAdapterImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -747,2 +747,1 @@\n-        private static Map<String, UnicodeBlock> map =\n-                new HashMap<>((int)(NUM_ENTITIES \/ 0.75f + 1.0f));\n+        private static Map<String, UnicodeBlock> map = HashMap.newHashMap(NUM_ENTITIES);\n@@ -8575,1 +8574,1 @@\n-            aliases = new HashMap<>((int)(162 \/ 0.75f + 1.0f));\n+            aliases = HashMap.newHashMap(162);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Character.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3913,1 +3913,1 @@\n-            directory = new HashMap<>((int)(universe.length \/ 0.75f) + 1);\n+            directory = HashMap.newHashMap(universe.length);\n@@ -4128,1 +4128,1 @@\n-                        annotations = new LinkedHashMap<>((Math.max(\n+                        annotations = LinkedHashMap.newLinkedHashMap(Math.max(\n@@ -4131,1 +4131,1 @@\n-                            ) * 4 + 2) \/ 3\n+                            )\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -983,1 +983,1 @@\n-            openPackages = new HashMap<>((4 * (concealedPkgs.size() + exportedPkgs.size()) \/ 3) + 1);\n+            openPackages = HashMap.newHashMap(concealedPkgs.size() + exportedPkgs.size());\n@@ -1136,2 +1136,1 @@\n-        int cap = (int)(numModules \/ 0.75f + 1.0f);\n-        Map<String, Module> nameToModule = new HashMap<>(cap);\n+        Map<String, Module> nameToModule = HashMap.newHashMap(numModules);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Module.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1658,1 +1658,1 @@\n-        Map<Thread, StackTraceElement[]> m = new HashMap<>(threads.length);\n+        Map<Thread, StackTraceElement[]> m = HashMap.newHashMap(threads.length);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -293,1 +293,1 @@\n-        var convSpecMap = new HashMap<Object, int[]>(((4 * convCount) \/ 3) + 1);\n+        HashMap<Object, int[]> convSpecMap = HashMap.newHashMap(convCount);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -501,2 +501,1 @@\n-        \/\/ initial capacity of maps to avoid resizing\n-        int capacity = 1 + (4 * nameToReference.size())\/ 3;\n+        int nameToReferenceSize = nameToReference.size();\n@@ -506,1 +505,1 @@\n-        Map<ResolvedModule, Set<ResolvedModule>> g1 = new HashMap<>(capacity);\n+        Map<ResolvedModule, Set<ResolvedModule>> g1 = HashMap.newHashMap(nameToReferenceSize);\n@@ -515,1 +514,1 @@\n-            g2 = new HashMap<>(capacity);\n+            g2 = HashMap.newHashMap(nameToReferenceSize);\n@@ -542,1 +541,1 @@\n-        Map<String, ResolvedModule> nameToResolved = new HashMap<>(capacity);\n+        Map<String, ResolvedModule> nameToResolved = HashMap.newHashMap(nameToReferenceSize);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/Resolver.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -248,1 +248,1 @@\n-            extensions = new HashMap<>(size > 20 ? 20 : size);\n+            extensions = HashMap.newHashMap(size > 20 ? 20 : size);\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/CertificateRevokedException.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -200,1 +200,1 @@\n-            Map<X509Certificate, byte[]> copy = new HashMap<>(responses.size());\n+            Map<X509Certificate, byte[]> copy = HashMap.newHashMap(responses.size());\n@@ -219,1 +219,1 @@\n-        Map<X509Certificate, byte[]> copy = new HashMap<>(ocspResponses.size());\n+        Map<X509Certificate, byte[]> copy = HashMap.newHashMap(ocspResponses.size());\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/PKIXRevocationChecker.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2548,0 +2548,28 @@\n+    \/**\n+     * Calculate initial capacity for HashMap based classes, from expected size and default load factor (0.75).\n+     *\n+     * @param numMappings the expected number of mappings\n+     * @return initial capacity for HashMap based classes.\n+     * @since 19\n+     *\/\n+    static int calculateHashMapCapacity(int numMappings) {\n+        return (int) Math.ceil(numMappings \/ (double) DEFAULT_LOAD_FACTOR);\n+    }\n+\n+    \/**\n+     * Creates a new, empty HashMap suitable for the expected number of mappings.\n+     * The returned map uses the default load factor of 0.75, and its initial capacity is\n+     * generally large enough so that the expected number of mappings can be added\n+     * without resizing the map.\n+     *\n+     * @param numMappings the expected number of mappings\n+     * @param <K>         the type of keys maintained by this map\n+     * @param <V>         the type of mapped values\n+     * @return the newly created map\n+     * @throws IllegalArgumentException if numMappings is negative\n+     * @since 19\n+     *\/\n+    public static <K, V> HashMap<K, V> newHashMap(int numMappings) {\n+        return new HashMap<>(calculateHashMapCapacity(numMappings));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashMap.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-        map = new HashMap<>(Math.max((int) (c.size()\/.75f) + 1, 16));\n+        map = HashMap.newHashMap(Math.max(c.size(), 12));\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashSet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -791,0 +791,16 @@\n+    \/**\n+     * Creates a new, empty, insertion-ordered LinkedHashMap suitable for the expected number of mappings.\n+     * The returned map uses the default load factor of 0.75, and its initial capacity is\n+     * generally large enough so that the expected number of mappings can be added\n+     * without resizing the map.\n+     *\n+     * @param numMappings the expected number of mappings\n+     * @param <K>         the type of keys maintained by this map\n+     * @param <V>         the type of mapped values\n+     * @return the newly created map\n+     * @throws IllegalArgumentException if numMappings is negative\n+     * @since 19\n+     *\/\n+    public static <K, V> LinkedHashMap<K, V> newLinkedHashMap(int numMappings) {\n+        return new LinkedHashMap<>(HashMap.calculateHashMapCapacity(numMappings));\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedHashMap.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -196,1 +196,1 @@\n-        HashMap<String,Object> temp = new HashMap<>(contents.length);\n+        HashMap<String,Object> temp = HashMap.newHashMap(contents.length);\n","filename":"src\/java.base\/share\/classes\/java\/util\/ListResourceBundle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1338,0 +1338,17 @@\n+    \/**\n+     * Creates a new, empty WeakHashMap suitable for the expected number of mappings.\n+     * The returned map uses the default load factor of 0.75, and its initial capacity is\n+     * generally large enough so that the expected number of mappings can be added\n+     * without resizing the map.\n+     *\n+     * @param numMappings the expected number of mappings\n+     * @param <K>         the type of keys maintained by this map\n+     * @param <V>         the type of mapped values\n+     * @return the newly created map\n+     * @throws IllegalArgumentException if numMappings is negative\n+     * @since 19\n+     *\/\n+    public static <K, V> WeakHashMap<K, V> newWeakHashMap(int numMappings) {\n+        return new WeakHashMap<>(HashMap.calculateHashMapCapacity(numMappings));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/WeakHashMap.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-        this(11);\n+        this(16);\n@@ -82,1 +82,1 @@\n-        map = new LinkedHashMap<>(size);\n+        map = LinkedHashMap.newLinkedHashMap(size);\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/Attributes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -675,1 +675,1 @@\n-            signerMap = new HashMap<>(verifiedSigners.size() + sigFileSigners.size());\n+            signerMap = HashMap.newHashMap(verifiedSigners.size() + sigFileSigners.size());\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarVerifier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -591,1 +591,1 @@\n-        Map<String, byte[]> map = new HashMap<>(hash_count);\n+        Map<String, byte[]> map = HashMap.newHashMap(hash_count);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -310,1 +310,1 @@\n-        singleResponseMap = new HashMap<>(singleResponseDer.length);\n+        singleResponseMap = HashMap.newHashMap(singleResponseDer.length);\n@@ -754,1 +754,1 @@\n-                new HashMap<>(extDer.length);\n+                HashMap.newHashMap(extDer.length);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/OCSPResponse.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -484,1 +484,1 @@\n-        Map<K,V> kvmap = new HashMap<>(cacheMap.size());\n+        Map<K,V> kvmap = HashMap.newHashMap(cacheMap.size());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Cache.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -160,1 +160,1 @@\n-        return new HashMap<>(size);\n+        return HashMap.newHashMap(size);\n","filename":"src\/java.base\/share\/classes\/sun\/util\/resources\/OpenListResourceBundle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-        return new LinkedHashMap<>(size);\n+        return LinkedHashMap.newLinkedHashMap(size);\n","filename":"src\/java.base\/share\/classes\/sun\/util\/resources\/TimeZoneNamesBundle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-        theEnvironment = new HashMap<>(environ.length\/2 + 3);\n+        theEnvironment = HashMap.newHashMap(environ.length\/2 + 3);\n@@ -102,1 +102,1 @@\n-        return new StringEnvironment(new HashMap<>(capacity));\n+        return new StringEnvironment(HashMap.newHashMap(capacity));\n","filename":"src\/java.base\/unix\/classes\/java\/lang\/ProcessEnvironment.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-                    mimeTypeMap = new HashMap<>(lines.size());\n+                    mimeTypeMap = HashMap.newHashMap(lines.size());\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/MimeTypesFileTypeDetector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1448,1 +1448,1 @@\n-        aaTextInfo = new HashMap<>(2);\n+        aaTextInfo = HashMap.newHashMap(2);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/GTKLookAndFeel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -656,1 +656,1 @@\n-        Map<TextAttribute, Object> clone = new HashMap<>(basic.size());\n+        Map<TextAttribute, Object> clone = HashMap.newHashMap(basic.size());\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/MetaData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -332,2 +332,2 @@\n-        Map<Long,DataFlavor> formatMap = new HashMap<>(flavors.length);\n-        Map<Long,DataFlavor> textPlainMap = new HashMap<>(flavors.length);\n+        Map<Long,DataFlavor> formatMap = HashMap.newHashMap(flavors.length);\n+        Map<Long,DataFlavor> textPlainMap = HashMap.newHashMap(flavors.length);\n@@ -337,2 +337,2 @@\n-        Map<Long, Integer> indexMap = new HashMap<>(flavors.length);\n-        Map<Long, Integer> textPlainIndexMap = new HashMap<>(flavors.length);\n+        Map<Long, Integer> indexMap = HashMap.newHashMap(flavors.length);\n+        Map<Long, Integer> textPlainIndexMap = HashMap.newHashMap(flavors.length);\n@@ -412,1 +412,1 @@\n-        Map<DataFlavor, Long> flavorMap = new HashMap<>(formats.length);\n+        Map<DataFlavor, Long> flavorMap = HashMap.newHashMap(formats.length);\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/datatransfer\/DataTransferer.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n-                    map = new HashMap<>(list.size());\n+                    map = HashMap.newHashMap(list.size());\n@@ -281,1 +281,1 @@\n-                    map = new HashMap<>(list.size());\n+                    map = HashMap.newHashMap(list.size());\n@@ -418,1 +418,1 @@\n-                    map = new HashMap<>(list.size());\n+                    map = HashMap.newHashMap(list.size());\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/DefaultPlatformMBeanProvider.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-        Map<String, Long> result = new HashMap<>(numThreads);\n+        Map<String, Long> result = HashMap.newHashMap(numThreads);\n","filename":"src\/java.management\/share\/classes\/sun\/management\/HotspotThread.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-                = new HashMap<>(STATIC_TABLE_LENGTH);\n+                = HashMap.newHashMap(STATIC_TABLE_LENGTH);\n@@ -119,1 +119,1 @@\n-        Map<String, Map<String, Integer>> copy = new HashMap<>(map.size());\n+        Map<String, Map<String, Integer>> copy = HashMap.newHashMap(map.size());\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/hpack\/HeaderTable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-                    new HashMap<>(length);\n+                        HashMap.newHashMap(length);\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMXPathFilter2Transform.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-                new HashMap<>(length);\n+                    HashMap.newHashMap(length);\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMXPathTransform.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-        _references = new HashMap<>(_size+2);\n+        _references = HashMap.newHashMap(_size);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/dom\/DocumentCache.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -396,1 +396,1 @@\n-                reversedIdentifiers = new HashMap<>(identifiers.size());\n+                reversedIdentifiers = HashMap.newHashMap(identifiers.size());\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/dom\/CoreDocumentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1819,1 +1819,1 @@\n-        items = new HashMap<>(size*2+1);\n+        items = HashMap.newHashMap(size*2+1);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/xs\/traversers\/XSAttributeChecker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -123,4 +123,4 @@\n-        vmFields     = new HashMap<>(vmFieldsInfo.length);\n-        vmConstants  = new HashMap<>(vmConstantsInfo.length);\n-        vmAddresses  = new HashMap<>(vmAddressesInfo.length);\n-        vmFlags      = new HashMap<>(vmFlagsInfo.length);\n+        vmFields     = HashMap.newHashMap(vmFieldsInfo.length);\n+        vmConstants  = HashMap.newHashMap(vmConstantsInfo.length);\n+        vmAddresses  = HashMap.newHashMap(vmAddressesInfo.length);\n+        vmFlags      = HashMap.newHashMap(vmFlagsInfo.length);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotVMConfigStore.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -320,1 +320,1 @@\n-        Map<String, String> props = new HashMap<>(utf8Props + nonUtf8Props);\n+        Map<String, String> props = HashMap.newHashMap(utf8Props + nonUtf8Props);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.services\/src\/jdk\/vm\/ci\/services\/Services.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-            Map<String, ValueDescriptor> newCache = new LinkedHashMap<>(fields.size());\n+            Map<String, ValueDescriptor> newCache = LinkedHashMap.newLinkedHashMap(fields.size());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/EventType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-        Map<Long, EventType> previousSet = new HashMap<>(previous.size());\n+        Map<Long, EventType> previousSet = HashMap.newHashMap(previous.size());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/MetadataEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -275,1 +275,1 @@\n-        Map<String, Type> typeMap = new HashMap<>(2 * types.size());\n+        Map<String, Type> typeMap = HashMap.newHashMap(2 * types.size());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MetadataLoader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-        HashMap<String, Integer> lookup = new LinkedHashMap<>(stringPool.size());\n+        HashMap<String, Integer> lookup = LinkedHashMap.newLinkedHashMap(stringPool.size());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MetadataWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-        Map<String, InternalSetting> map = new LinkedHashMap<>(activeSettings.size());\n+        Map<String, InternalSetting> map = LinkedHashMap.newLinkedHashMap(activeSettings.size());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/SettingsManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -465,1 +465,1 @@\n-        HashMap<String, String> map = new HashMap<>(settings.size());\n+        HashMap<String, String> map = HashMap.newHashMap(settings.size());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Utils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-            Map<String, String> map = new HashMap<>(values.size());\n+            Map<String, String> map = HashMap.newHashMap(values.size());\n","filename":"src\/jdk.management.jfr\/share\/classes\/jdk\/management\/jfr\/ConfigurationInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-                    map = new HashMap<>(list.size());\n+                    map = HashMap.newHashMap(list.size());\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/PlatformMBeanProviderImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1564,1 +1564,1 @@\n-        inodes = new LinkedHashMap<>(end.centot + 1);\n+        inodes = LinkedHashMap.newLinkedHashMap(end.centot + 1);\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-        Map<InputNode, List<InputEdge>> result = new HashMap<>(getNodes().size());\n+        Map<InputNode, List<InputEdge>> result = HashMap.newHashMap(getNodes().size());\n@@ -110,1 +110,1 @@\n-        Map<InputNode, List<InputEdge>> result = new HashMap<>(getNodes().size());\n+        Map<InputNode, List<InputEdge>> result = HashMap.newHashMap(getNodes().size());\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/InputGraph.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-        Map<Integer, InputNode> keyMapB = new HashMap<>(b.getNodes().size());\n+        Map<Integer, InputNode> keyMapB = HashMap.newHashMap(b.getNodes().size());\n@@ -111,1 +111,1 @@\n-        Map<InputBlock, InputBlock> blocksMap = new HashMap<>();\n+        Map<InputBlock, InputBlock> blocksMap = HashMap.newHashMap(a.getBlocks().size());\n@@ -154,1 +154,1 @@\n-        Map<InputNode, InputNode> inputNodeMap = new HashMap<>(pairs.size());\n+        Map<InputNode, InputNode> inputNodeMap = HashMap.newHashMap(pairs.size());\n","filename":"src\/utils\/IdealGraphVisualizer\/Difference\/src\/main\/java\/com\/sun\/hotspot\/igv\/difference\/Difference.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,3 +49,3 @@\n-        portLinks = new HashMap<>(links.size());\n-        inputPorts = new HashMap<>(links.size());\n-        outputPorts = new HashMap<>(links.size());\n+        portLinks = HashMap.newHashMap(links.size());\n+        inputPorts = HashMap.newHashMap(links.size());\n+        outputPorts = HashMap.newHashMap(links.size());\n","filename":"src\/utils\/IdealGraphVisualizer\/Layout\/src\/main\/java\/com\/sun\/hotspot\/igv\/layout\/LayoutGraph.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-        blockIndex = new HashMap<>(blocks.size());\n+        blockIndex = HashMap.newHashMap(blocks.size());\n@@ -265,1 +265,1 @@\n-            inputNodeToNode = new HashMap<>(graph.getNodes().size());\n+            inputNodeToNode = HashMap.newHashMap(graph.getNodes().size());\n@@ -541,1 +541,1 @@\n-        dominatorMap = new HashMap<>(graph.getBlocks().size());\n+        dominatorMap = HashMap.newHashMap(graph.getBlocks().size());\n@@ -639,1 +639,1 @@\n-        Map<Integer, List<InputEdge>> edgeMap = new HashMap<>(graph.getEdges().size());\n+        Map<Integer, List<InputEdge>> edgeMap = HashMap.newHashMap(graph.getEdges().size());\n","filename":"src\/utils\/IdealGraphVisualizer\/ServerCompiler\/src\/main\/java\/com\/sun\/hotspot\/igv\/servercompiler\/ServerCompilerScheduler.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -839,1 +839,1 @@\n-        Map<Point, List<Connection>> pointMap = new HashMap<>(connections.size());\n+        Map<Point, List<Connection>> pointMap = HashMap.newHashMap(connections.size());\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramScene.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}