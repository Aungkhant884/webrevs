{"files":[{"patch":"@@ -33,1 +33,0 @@\n-import java.util.concurrent.ConcurrentHashMap;\n@@ -5802,63 +5801,0 @@\n-\n-    \/**\n-     * Calculate initial capacity for HashMap based classes, from expected size.\n-     *\n-     * @param expectedSize expected size\n-     * @return initial capacity for HashMap based classes.\n-     * @since 19\n-     *\/\n-    private static int calculateHashMapCapacity(int expectedSize) {\n-        if (expectedSize >= 1610612736) {\n-            return Integer.MAX_VALUE;\n-        }\n-        return (expectedSize + (expectedSize + 2) \/ 3);\n-    }\n-\n-    \/**\n-     * Creates a new, empty HashMap with an initial table size\n-     * accommodating the specified number of elements without the need\n-     * to dynamically resize.\n-     *\n-     * @param expectedSize expected size\n-     * @param <K>          the type of keys maintained by this map\n-     * @param <V>          the type of mapped values\n-     * @return the HashMap created.\n-     * @throws IllegalArgumentException if the initial capacity is negative.\n-     * @since 19\n-     *\/\n-    public static <K, V> HashMap<K, V> newHashMap(int expectedSize) {\n-        return new HashMap<>(calculateHashMapCapacity(expectedSize));\n-    }\n-\n-    \/**\n-     * Creates a new, empty LinkedHashMap with an initial table size\n-     * accommodating the specified number of elements without the need\n-     * to dynamically resize.\n-     *\n-     * @param expectedSize expected size\n-     * @param <K>          the type of keys maintained by this map\n-     * @param <V>          the type of mapped values\n-     * @return the LinkedHashMap created.\n-     * @throws IllegalArgumentException if the initial capacity is negative.\n-     * @since 19\n-     *\/\n-    public static <K, V> LinkedHashMap<K, V> newLinkedHashMap(int expectedSize) {\n-        return new LinkedHashMap<>(calculateHashMapCapacity(expectedSize));\n-    }\n-\n-    \/**\n-     * Creates a new, empty WeakHashMap with an initial table size\n-     * accommodating the specified number of elements without the need\n-     * to dynamically resize.\n-     *\n-     * @param expectedSize expected size\n-     * @param <K>          the type of keys maintained by this map\n-     * @param <V>          the type of mapped values\n-     * @return the WeakHashMap created.\n-     * @throws IllegalArgumentException if the initial capacity is negative.\n-     * @since 19\n-     *\/\n-    public static <K, V> WeakHashMap<K, V> newWeakHashMap(int expectedSize) {\n-        return new WeakHashMap<>(calculateHashMapCapacity(expectedSize));\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2548,0 +2548,30 @@\n+    \/**\n+     * Calculate initial capacity for HashMap based classes, from expected size.\n+     *\n+     * @param expectedSize expected size\n+     * @return initial capacity for HashMap based classes.\n+     * @since 19\n+     *\/\n+    static int calculateHashMapCapacity(int expectedSize) {\n+        if (expectedSize >= 1610612736) {\n+            return Integer.MAX_VALUE;\n+        }\n+        return (expectedSize + (expectedSize + 2) \/ 3);\n+    }\n+\n+    \/**\n+     * Creates a new, empty HashMap with an initial table size\n+     * accommodating the specified number of elements without the need\n+     * to dynamically resize.\n+     *\n+     * @param expectedSize expected size\n+     * @param <K>          the type of keys maintained by this map\n+     * @param <V>          the type of mapped values\n+     * @return the HashMap created.\n+     * @throws IllegalArgumentException if the initial capacity is negative.\n+     * @since 19\n+     *\/\n+    public static <K, V> HashMap<K, V> newHashMap(int expectedSize) {\n+        return new HashMap<>(calculateHashMapCapacity(expectedSize));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashMap.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -791,0 +791,15 @@\n+    \/**\n+     * Creates a new, empty LinkedHashMap with an initial table size\n+     * accommodating the specified number of elements without the need\n+     * to dynamically resize.\n+     *\n+     * @param expectedSize expected size\n+     * @param <K>          the type of keys maintained by this map\n+     * @param <V>          the type of mapped values\n+     * @return the LinkedHashMap created.\n+     * @throws IllegalArgumentException if the initial capacity is negative.\n+     * @since 19\n+     *\/\n+    public static <K, V> LinkedHashMap<K, V> newLinkedHashMap(int expectedSize) {\n+        return new LinkedHashMap<>(HashMap.calculateHashMapCapacity(expectedSize));\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedHashMap.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1338,0 +1338,16 @@\n+    \/**\n+     * Creates a new, empty WeakHashMap with an initial table size\n+     * accommodating the specified number of elements without the need\n+     * to dynamically resize.\n+     *\n+     * @param expectedSize expected size\n+     * @param <K>          the type of keys maintained by this map\n+     * @param <V>          the type of mapped values\n+     * @return the WeakHashMap created.\n+     * @throws IllegalArgumentException if the initial capacity is negative.\n+     * @since 19\n+     *\/\n+    public static <K, V>  WeakHashMap<K, V> newWeakHashMap(int expectedSize) {\n+        return new WeakHashMap<>(HashMap.calculateHashMapCapacity(expectedSize));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/WeakHashMap.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}