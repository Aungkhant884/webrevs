{"files":[{"patch":"@@ -2548,0 +2548,29 @@\n+    \/**\n+     * Calculate initial capacity for HashMap based classes, from expected size and default load factor (0.75).\n+     *\n+     * @param numMappings the expected number of mappings\n+     * @return initial capacity for HashMap based classes.\n+     * @since 19\n+     *\/\n+    static int calculateHashMapCapacity(int numMappings) {\n+        return (int) Math.ceil(numMappings \/ 0.75);\n+    }\n+\n+    \/**\n+     * Creates a new, empty HashMap suitable for the expected number of mappings.\n+     * The returned map uses the default load factor of 0.75, and its initial capacity is\n+     * generally large enough so that the expected number of mappings can be added\n+     * without resizing the map.\n+     *\n+     * @param numMappings the expected number of mappings\n+     * @param <K>         the type of keys maintained by this map\n+     * @param <V>         the type of mapped values\n+     * @return the newly created map\n+     * @throws IllegalArgumentException if numMappings is negative\n+     * @since 19\n+     *\/\n+    public static <K, V> HashMap<K, V> newHashMap(int numMappings) {\n+        return new HashMap<>(calculateHashMapCapacity(numMappings));\n+    }\n+\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashMap.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -791,0 +791,16 @@\n+    \/**\n+     * Creates a new, empty LinkedHashMap suitable for the expected number of mappings.\n+     * The returned map uses the default load factor of 0.75, and its initial capacity is\n+     * generally large enough so that the expected number of mappings can be added\n+     * without resizing the map.\n+     *\n+     * @param numMappings the expected number of mappings\n+     * @param <K>         the type of keys maintained by this map\n+     * @param <V>         the type of mapped values\n+     * @return the newly created map\n+     * @throws IllegalArgumentException if numMappings is negative\n+     * @since 19\n+     *\/\n+    public static <K, V> LinkedHashMap<K, V> newLinkedHashMap(int numMappings) {\n+        return new LinkedHashMap<>(HashMap.calculateHashMapCapacity(numMappings));\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/util\/LinkedHashMap.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1338,0 +1338,17 @@\n+    \/**\n+     * Creates a new, empty WeakHashMap suitable for the expected number of mappings.\n+     * The returned map uses the default load factor of 0.75, and its initial capacity is\n+     * generally large enough so that the expected number of mappings can be added\n+     * without resizing the map.\n+     *\n+     * @param numMappings the expected number of mappings\n+     * @param <K>         the type of keys maintained by this map\n+     * @param <V>         the type of mapped values\n+     * @return the newly created map\n+     * @throws IllegalArgumentException if numMappings is negative\n+     * @since 19\n+     *\/\n+    public static <K, V> WeakHashMap<K, V> newWeakHashMap(int numMappings) {\n+        return new WeakHashMap<>(HashMap.calculateHashMapCapacity(numMappings));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/WeakHashMap.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Thread)\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.SECONDS)\n+public class CalculateHashMapCapacityTestJMH {\n+\n+    \/**\n+     * Calculate initial capacity for HashMap based classes, from expected size.\n+     *\n+     * @param expectedSize expected size\n+     * @return initial capacity for HashMap based classes.\n+     * @since 19\n+     *\/\n+    private static int calculateHashMapCapacity1(int expectedSize) {\n+        return (int) Math.ceil(expectedSize \/ 0.75);\n+    }\n+\n+    \/**\n+     * Calculate initial capacity for HashMap based classes, from expected size.\n+     *\n+     * @param expectedSize expected size\n+     * @return initial capacity for HashMap based classes.\n+     * @since 19\n+     *\/\n+    private static int calculateHashMapCapacity2(int expectedSize) {\n+        if (expectedSize >= Integer.MAX_VALUE \/ 4 * 3 + 3) {\n+            return Integer.MAX_VALUE;\n+        }\n+        if (expectedSize > 0) {\n+            return (expectedSize + (expectedSize + 2) \/ 3);\n+        }\n+        return expectedSize;\n+    }\n+\n+    \/**\n+     * Calculate initial capacity for HashMap based classes, from expected size.\n+     *\n+     * @param expectedSize expected size\n+     * @return initial capacity for HashMap based classes.\n+     * @since 19\n+     *\/\n+    private static int calculateHashMapCapacity3(int expectedSize) {\n+        if (expectedSize >= 805306368) {\n+            return (1 << 30);\n+        }\n+        if (expectedSize > 0) {\n+            return (expectedSize + (expectedSize + 2) \/ 3);\n+        }\n+        return expectedSize;\n+    }\n+\n+    @Warmup(iterations = 20)\n+    @Measurement(iterations = 10)\n+    @Benchmark\n+    public void testCalculateHashMapCapacity1(Blackhole blackhole) {\n+        for (int i = 0; i < Integer.MAX_VALUE; i++) {\n+            blackhole.consume(calculateHashMapCapacity1(i));\n+        }\n+    }\n+\n+    @Warmup(iterations = 20)\n+    @Measurement(iterations = 10)\n+    @Benchmark\n+    public void testCalculateHashMapCapacity2(Blackhole blackhole) {\n+        for (int i = 0; i < Integer.MAX_VALUE; i++) {\n+            blackhole.consume(calculateHashMapCapacity2(i));\n+        }\n+    }\n+\n+    @Warmup(iterations = 20)\n+    @Measurement(iterations = 10)\n+    @Benchmark\n+    public void testCalculateHashMapCapacity3(Blackhole blackhole) {\n+        for (int i = 0; i < Integer.MAX_VALUE; i++) {\n+            blackhole.consume(calculateHashMapCapacity3(i));\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/Collections\/CalculateHashMapCapacityTestJMH.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}