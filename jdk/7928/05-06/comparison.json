{"files":[{"patch":"@@ -2551,0 +2551,18 @@\n+     * <p>This function is designed to return equal results than {@code (int)Math.ceil(expectedSize \/ 0.75)} when expectedSize&gt;=0.\n+     * When expectedSize&lt;0, result of this function is meaningless.\n+     *\n+     * <p>Implementation logic of this function is:\n+     *\n+     * <p>1. When expectedSize is a small enough positive number,\n+     * {@code (expectedSize + (expectedSize + 2) \/ 3)} always equals to {@code (int)Math.ceil(expectedSize \/ 0.75)}, as\n+     * {@code (int)Math.ceil(expectedSize \/ 0.75)} equals to {@code (int)Math.ceil(expectedSize + expectedSize \/ 3.0)},\n+     * thus equals to {@code expectedSize + (int)Math.ceil(expectedSize \/ 3.0)},\n+     * thus equals to {@code (expectedSize + (expectedSize + 2) \/ 3)}.\n+     *\n+     * <p>2. When expectedSize is a big enough positive number (at least {@code Integer.MAX_VALUE \/ 4 * 3 + 3}, or say, 1610612736),\n+     * {@code (expectedSize + (expectedSize + 2) \/ 3)} would overflow, in this turn we just return {@code Integer.MAX_VALUE}\n+     *\n+     * <p>3. When expectedSize is 0, return 0.\n+     *\n+     * <p>4. User must never let expectedSize be negative.Otherwise, return any number &lt; 0.\n+     *\n@@ -2556,1 +2574,1 @@\n-        if (expectedSize >= 1610612736) {\n+        if (expectedSize >= Integer.MAX_VALUE \/ 4 * 3 + 3) {\n@@ -2559,1 +2577,4 @@\n-        return (expectedSize + (expectedSize + 2) \/ 3);\n+        if (expectedSize > 0) {\n+            return (expectedSize + (expectedSize + 2) \/ 3);\n+        }\n+        return expectedSize;\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashMap.java","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-        if (expectedSize >= 1610612736) {\n+        if (expectedSize >= Integer.MAX_VALUE \/ 4 * 3 + 3) {\n@@ -65,1 +65,4 @@\n-        return (expectedSize + (expectedSize + 2) \/ 3);\n+        if (expectedSize > 0) {\n+            return (expectedSize + (expectedSize + 2) \/ 3);\n+        }\n+        return expectedSize;\n@@ -79,1 +82,4 @@\n-        return (expectedSize + (expectedSize + 2) \/ 3);\n+        if (expectedSize > 0) {\n+            return (expectedSize + (expectedSize + 2) \/ 3);\n+        }\n+        return expectedSize;\n","filename":"test\/jdk\/java\/util\/Collections\/CalculateHashMapCapacityTestJMH.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"}]}