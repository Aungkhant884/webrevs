{"files":[{"patch":"@@ -892,1 +892,5 @@\n-                JCVariableDecl var = variableDeclaratorRest(varPos, mods, e, identOrUnderscore(), false, null, false, false, true);\n+                Name name = identOrUnderscore();\n+                if (Feature.UNNAMED_VARIABLES.allowedInSource(source) && name == names.underscore) {\n+                    name = names.empty;\n+                }\n+                JCVariableDecl var = toP(F.at(varPos).VarDef(mods, name, e, null));\n@@ -3621,1 +3625,1 @@\n-        JCVariableDecl head = variableDeclaratorRest(pos, mods, type, name, reqInit, dc, localDecl, false, false);\n+        JCVariableDecl head = variableDeclaratorRest(pos, mods, type, name, reqInit, dc, localDecl, false);\n@@ -3636,1 +3640,1 @@\n-        return variableDeclaratorRest(token.pos, mods, type, identOrUnderscore(), reqInit, dc, localDecl, true, false);\n+        return variableDeclaratorRest(token.pos, mods, type, identOrUnderscore(), reqInit, dc, localDecl, true);\n@@ -3646,1 +3650,1 @@\n-                                  boolean reqInit, Comment dc, boolean localDecl, boolean compound, boolean isTypePattern) {\n+                                  boolean reqInit, Comment dc, boolean localDecl, boolean compound) {\n@@ -3648,1 +3652,0 @@\n-        type = bracketsOpt(type);\n@@ -3650,0 +3653,1 @@\n+        type = bracketsOpt(type);\n@@ -3652,1 +3656,1 @@\n-            if (!localDecl && !isTypePattern) {\n+            if (!localDecl) {\n@@ -3671,23 +3675,20 @@\n-        JCVariableDecl result;\n-        if (!isTypePattern) {\n-            int startPos = Position.NOPOS;\n-            JCTree elemType = TreeInfo.innermostType(type, true);\n-            if (elemType.hasTag(IDENT)) {\n-                Name typeName = ((JCIdent) elemType).name;\n-                if (restrictedTypeNameStartingAtSource(typeName, pos, !compound && localDecl) != null) {\n-                    if (typeName != names.var) {\n-                        reportSyntaxError(elemType.pos, Errors.RestrictedTypeNotAllowedHere(typeName));\n-                    } else if (type.hasTag(TYPEARRAY) && !compound) {\n-                        \/\/error - 'var' and arrays\n-                        reportSyntaxError(elemType.pos, Errors.RestrictedTypeNotAllowedArray(typeName));\n-                    } else {\n-                        declaredUsingVar = true;\n-                        if (compound)\n-                            \/\/error - 'var' in compound local var decl\n-                            reportSyntaxError(elemType.pos, Errors.RestrictedTypeNotAllowedCompound(typeName));\n-                        startPos = TreeInfo.getStartPos(mods);\n-                        if (startPos == Position.NOPOS)\n-                            startPos = TreeInfo.getStartPos(type);\n-                        \/\/implicit type\n-                        type = null;\n-                    }\n+        int startPos = Position.NOPOS;\n+        JCTree elemType = TreeInfo.innermostType(type, true);\n+        if (elemType.hasTag(IDENT)) {\n+            Name typeName = ((JCIdent) elemType).name;\n+            if (restrictedTypeNameStartingAtSource(typeName, pos, !compound && localDecl) != null) {\n+                if (typeName != names.var) {\n+                    reportSyntaxError(elemType.pos, Errors.RestrictedTypeNotAllowedHere(typeName));\n+                } else if (type.hasTag(TYPEARRAY) && !compound) {\n+                    \/\/error - 'var' and arrays\n+                    reportSyntaxError(elemType.pos, Errors.RestrictedTypeNotAllowedArray(typeName));\n+                } else {\n+                    declaredUsingVar = true;\n+                    if (compound)\n+                        \/\/error - 'var' in compound local var decl\n+                        reportSyntaxError(elemType.pos, Errors.RestrictedTypeNotAllowedCompound(typeName));\n+                    startPos = TreeInfo.getStartPos(mods);\n+                    if (startPos == Position.NOPOS)\n+                        startPos = TreeInfo.getStartPos(type);\n+                    \/\/implicit type\n+                    type = null;\n@@ -3696,5 +3697,0 @@\n-            result = toP(F.at(pos).VarDef(mods, name, type, init, declaredUsingVar));\n-            attach(result, dc);\n-            result.startPos = startPos;\n-        } else {\n-            result = toP(F.at(pos).VarDef(mods, name, type, null));\n@@ -3702,1 +3698,3 @@\n-\n+        JCVariableDecl result = toP(F.at(pos).VarDef(mods, name, type, init, declaredUsingVar));\n+        attach(result, dc);\n+        result.startPos = startPos;\n@@ -3846,1 +3844,1 @@\n-            return variableDeclaratorRest(token.pos, mods, t, identOrUnderscore(), true, null, true, false, false);\n+            return variableDeclaratorRest(token.pos, mods, t, identOrUnderscore(), true, null, true, false);\n@@ -3851,1 +3849,1 @@\n-            return variableDeclaratorRest(token.pos, mods, t, identOrUnderscore(), true, null, true, false, false);\n+            return variableDeclaratorRest(token.pos, mods, t, identOrUnderscore(), true, null, true, false);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":35,"deletions":37,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -0,0 +1,24 @@\n+\/**\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8309054\n+ * @summary Parsing of erroneous patterns succeeds\n+ * @enablePreview\n+ * @compile\/fail\/ref=T8309054.out -XDrawDiagnostics --should-stop=at=FLOW T8309054.java\n+ *\/\n+\n+public class T8309054  {\n+    public void test(Object obj) {\n+        boolean t1 = switch (obj) {\n+            case Long a[] -> true;\n+            default -> false;\n+        };\n+        boolean t2 = switch (obj) {\n+            case Double a[][][][] -> true;\n+            default -> false;\n+        };\n+        if (obj instanceof Float a[][]) {\n+        }\n+        if (obj instanceof Integer a = Integer.valueOf(0)) {\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/patterns\/T8309054.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"added"},{"patch":"@@ -0,0 +1,7 @@\n+T8309054.java:12:24: compiler.err.expected2: :, ->\n+T8309054.java:16:26: compiler.err.expected2: :, ->\n+T8309054.java:19:35: compiler.err.expected: ')'\n+T8309054.java:13:13: compiler.err.switch.mixing.case.types\n+T8309054.java:17:13: compiler.err.switch.mixing.case.types\n+T8309054.java:21:17: compiler.err.unexpected.type: kindname.variable, kindname.value\n+6 errors\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/patterns\/T8309054.out","additions":7,"deletions":0,"binary":false,"changes":7,"status":"added"}]}