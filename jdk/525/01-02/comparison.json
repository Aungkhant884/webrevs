{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020 Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8056897\n+ * @bug 8056897 8254073\n@@ -29,1 +29,1 @@\n- * @summary Proper lexing of integer literals.\n+ * @summary Proper lexing of various token kinds.\n@@ -46,0 +46,2 @@\n+import static com.sun.tools.javac.parser.Tokens.TokenKind.*;\n+\n@@ -47,2 +49,72 @@\n-    public static void main(String... args) throws Exception {\n-        new JavaLexerTest().run();\n+    static final TestTuple[] PASSING_TESTS = {\n+            new TestTuple(FLOATLITERAL, \"0.0f\"),\n+            new TestTuple(FLOATLITERAL, \"0.0F\"),\n+            new TestTuple(FLOATLITERAL, \".0F\"),\n+            new TestTuple(FLOATLITERAL, \"0.F\"),\n+            new TestTuple(FLOATLITERAL, \"0E0F\"),\n+            new TestTuple(FLOATLITERAL, \"0E+0F\"),\n+            new TestTuple(FLOATLITERAL, \"0E-0F\"),\n+\n+            new TestTuple(DOUBLELITERAL, \"0.0d\"),\n+            new TestTuple(DOUBLELITERAL, \"0.0D\"),\n+            new TestTuple(DOUBLELITERAL, \".0D\"),\n+            new TestTuple(DOUBLELITERAL, \"0.D\"),\n+            new TestTuple(DOUBLELITERAL, \"0E0D\"),\n+            new TestTuple(DOUBLELITERAL, \"0E+0D\"),\n+            new TestTuple(DOUBLELITERAL, \"0E-0D\"),\n+            new TestTuple(DOUBLELITERAL, \"0x0.0p0d\"),\n+            new TestTuple(DOUBLELITERAL, \"0xff.0p8d\"),\n+\n+            new TestTuple(STRINGLITERAL, \"\\\"\\\\u2022\\\"\"),\n+            new TestTuple(STRINGLITERAL, \"\\\"\\\\b\\\\t\\\\n\\\\f\\\\r\\\\\\'\\\\\\\"\\\\\\\\\\\"\"),\n+\n+            new TestTuple(CHARLITERAL,   \"\\'\\\\b\\'\"),\n+            new TestTuple(CHARLITERAL,   \"\\'\\\\t\\'\"),\n+            new TestTuple(CHARLITERAL,   \"\\'\\\\n\\'\"),\n+            new TestTuple(CHARLITERAL,   \"\\'\\\\f\\'\"),\n+            new TestTuple(CHARLITERAL,   \"\\'\\\\r\\'\"),\n+            new TestTuple(CHARLITERAL,   \"\\'\\\\'\\'\"),\n+            new TestTuple(CHARLITERAL,   \"\\'\\\\\\\\'\"),\n+            new TestTuple(CHARLITERAL,   \"\\'\\\\\\'\\'\"),\n+            new TestTuple(CHARLITERAL,   \"\\'\\\\\\\"\\'\"),\n+\n+            new TestTuple(IDENTIFIER,    \"abc\\\\u0005def\"),\n+    };\n+\n+    static final TestTuple[] FAILING_TESTS = {\n+            new TestTuple(LONGLITERAL,   \"0bL\"),\n+            new TestTuple(LONGLITERAL,   \"0b20L\"),\n+            new TestTuple(LONGLITERAL,   \"0xL\"),\n+            new TestTuple(INTLITERAL,    \"0xG000L\", \"0x\"),\n+\n+            new TestTuple(DOUBLELITERAL, \"0E*0F\", \"0E\"),\n+\n+            new TestTuple(DOUBLELITERAL, \"0E*0D\", \"0E\"),\n+            new TestTuple(INTLITERAL,    \"0xp8d\", \"0x\"),\n+            new TestTuple(DOUBLELITERAL, \"0x8pd\", \"0x8pd\"),\n+            new TestTuple(INTLITERAL,    \"0xpd\", \"0x\"),\n+\n+            new TestTuple(ERROR,         \"\\\"\\\\u20\\\"\"),\n+            new TestTuple(ERROR,         \"\\\"\\\\u\\\"\"),\n+            new TestTuple(ERROR,         \"\\\"\\\\uG000\\\"\"),\n+            new TestTuple(ERROR,         \"\\\"\\\\u \\\"\"),\n+            new TestTuple(ERROR,         \"\\\"\\\\q\\\"\"),\n+\n+            new TestTuple(ERROR,         \"\\'\\'\"),\n+            new TestTuple(ERROR,         \"\\'\\\\q\\'\", \"\\'\\\\\"),\n+    };\n+\n+    static class TestTuple {\n+        String input;\n+        TokenKind kind;\n+        String expected;\n+\n+        TestTuple(TokenKind kind, String input, String expected) {\n+            this.input = input;\n+            this.kind = kind;\n+            this.expected = expected;\n+        }\n+\n+        TestTuple(TokenKind kind, String input) {\n+            this(kind, input, input);\n+        }\n@@ -51,1 +123,1 @@\n-    void run() throws Exception {\n+    void test(TestTuple test, boolean willFail) throws Exception {\n@@ -54,1 +126,1 @@\n-        String input = \"0bL 0b20L 0xL \";\n+\n@@ -58,1 +130,1 @@\n-                return input;\n+                return test.input;\n@@ -61,8 +133,0 @@\n-        char[] inputArr = input.toCharArray();\n-        JavaTokenizer tokenizer = new JavaTokenizer(ScannerFactory.instance(ctx), inputArr, inputArr.length) {\n-        };\n-\n-        assertKind(input, tokenizer, TokenKind.LONGLITERAL, \"0bL\");\n-        assertKind(input, tokenizer, TokenKind.LONGLITERAL, \"0b20L\");\n-        assertKind(input, tokenizer, TokenKind.LONGLITERAL, \"0xL\");\n-    }\n@@ -70,1 +134,2 @@\n-    void assertKind(String input, JavaTokenizer tokenizer, TokenKind kind, String expectedText) {\n+        char[] inputArr = test.input.toCharArray();\n+        JavaTokenizer tokenizer = new JavaTokenizer(ScannerFactory.instance(ctx), inputArr, inputArr.length) {};\n@@ -72,0 +137,2 @@\n+        boolean failed = log.nerrors != 0;\n+        boolean normal = failed == willFail;\n@@ -73,2 +140,4 @@\n-        if (token.kind != kind) {\n-            throw new AssertionError(\"Unexpected token kind: \" + token.kind);\n+        if (!normal) {\n+            System.err.println(\"input: \" + test.input);\n+            String message = willFail ? \"Expected to fail: \" : \"Expected to pass: \";\n+            throw new AssertionError(message + test.input);\n@@ -77,1 +146,1 @@\n-        String actualText = input.substring(token.pos, token.endPos);\n+        String actual = test.input.substring(token.pos, token.endPos);\n@@ -79,2 +148,3 @@\n-        if (!Objects.equals(actualText, expectedText)) {\n-            throw new AssertionError(\"Unexpected token text: \" + actualText);\n+        if (token.kind != test.kind) {\n+            System.err.println(\"input: \" + test.input);\n+            throw new AssertionError(\"Unexpected token kind: \" + token.kind.name());\n@@ -82,0 +152,19 @@\n+\n+        if (!Objects.equals(test.expected, actual)) {\n+            System.err.println(\"input: \" + test.input);\n+            throw new AssertionError(\"Unexpected token content: \" + actual);\n+        }\n+    }\n+\n+    void run() throws Exception {\n+        for (TestTuple test : PASSING_TESTS) {\n+            test(test, false);\n+        }\n+\n+        for (TestTuple test : FAILING_TESTS) {\n+            test(test, true);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        new JavaLexerTest().run();\n","filename":"test\/langtools\/tools\/javac\/lexer\/JavaLexerTest.java","additions":111,"deletions":22,"binary":false,"changes":133,"status":"modified"},{"patch":"@@ -1,174 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8254073\n- * @modules jdk.compiler\/com.sun.tools.javac.parser\n- *          jdk.compiler\/com.sun.tools.javac.util\n- * @summary Proper lexing of various token kinds.\n- *\/\n-\n-import java.io.IOException;\n-import java.net.URI;\n-import java.util.Objects;\n-\n-import javax.tools.JavaFileObject;\n-import javax.tools.SimpleJavaFileObject;\n-\n-import com.sun.tools.javac.parser.JavaTokenizer;\n-import com.sun.tools.javac.parser.ScannerFactory;\n-import com.sun.tools.javac.parser.Tokens.Token;\n-import com.sun.tools.javac.parser.Tokens.TokenKind;\n-import com.sun.tools.javac.util.Context;\n-import com.sun.tools.javac.util.Log;\n-\n-import static com.sun.tools.javac.parser.Tokens.TokenKind.*;\n-\n-public class JavaLexerTest2 {\n-    static final TestTuple[] TESTS = {\n-            new TestTuple(\"0bL\",         LONGLITERAL, true),\n-            new TestTuple(\"0b20L\",       LONGLITERAL, true),\n-\n-            new TestTuple(\"0xL\",         LONGLITERAL, true),\n-            new TestTuple(\"0xG000L\",     LONGLITERAL, true),\n-\n-            new TestTuple(\"0.0f\",        FLOATLITERAL, false),\n-            new TestTuple(\"0.0F\",        FLOATLITERAL, false),\n-            new TestTuple(\".0F\",         FLOATLITERAL, false),\n-            new TestTuple(\"0.F\",         FLOATLITERAL, false),\n-            new TestTuple(\"0E0F\",        FLOATLITERAL, false),\n-            new TestTuple(\"0E+0F\",       FLOATLITERAL, false),\n-            new TestTuple(\"0E-0F\",       FLOATLITERAL, false),\n-            new TestTuple(\"0E*0F\",       FLOATLITERAL, true),\n-\n-            new TestTuple(\"0.0d\",        DOUBLELITERAL, false),\n-            new TestTuple(\"0.0D\",        DOUBLELITERAL, false),\n-            new TestTuple(\".0D\",         DOUBLELITERAL, false),\n-            new TestTuple(\"0.D\",         DOUBLELITERAL, false),\n-            new TestTuple(\"0E0D\",        DOUBLELITERAL, false),\n-            new TestTuple(\"0E+0D\",       DOUBLELITERAL, false),\n-            new TestTuple(\"0E-0D\",       DOUBLELITERAL, false),\n-            new TestTuple(\"0E*0D\",       DOUBLELITERAL, true),\n-\n-            new TestTuple(\"0x0.0p0d\",    DOUBLELITERAL, false),\n-            new TestTuple(\"0xff.0p8d\",   DOUBLELITERAL, false),\n-            new TestTuple(\"0xp8d\",       DOUBLELITERAL, true),\n-            new TestTuple(\"0x8pd\",       DOUBLELITERAL, true),\n-            new TestTuple(\"0xpd\",        DOUBLELITERAL, true),\n-\n-            new TestTuple(\"\\\"\\\\u2022\\\"\", STRINGLITERAL, false),\n-            new TestTuple(\"\\\"\\\\u20\\\"\",   STRINGLITERAL, true),\n-            new TestTuple(\"\\\"\\\\u\\\"\",     STRINGLITERAL, true),\n-            new TestTuple(\"\\\"\\\\uG000\\\"\", STRINGLITERAL, true),\n-            new TestTuple(\"\\\"\\\\u \\\"\",    STRINGLITERAL, true),\n-\n-            new TestTuple(\"\\\"\\\\b\\\\t\\\\n\\\\f\\\\r\\\\\\'\\\\\\\"\\\\\\\\\\\"\", STRINGLITERAL, false),\n-            new TestTuple(\"\\\"\\\\q\\\"\",     STRINGLITERAL, true),\n-\n-            new TestTuple(\"\\'\\'\",        CHARLITERAL, true),\n-            new TestTuple(\"\\'\\\\b\\'\",     CHARLITERAL, false),\n-            new TestTuple(\"\\'\\\\t\\'\",     CHARLITERAL, false),\n-            new TestTuple(\"\\'\\\\n\\'\",     CHARLITERAL, false),\n-            new TestTuple(\"\\'\\\\f\\'\",     CHARLITERAL, false),\n-            new TestTuple(\"\\'\\\\r\\'\",     CHARLITERAL, false),\n-            new TestTuple(\"\\'\\\\'\\'\",     CHARLITERAL, false),\n-            new TestTuple(\"\\'\\\\\\\\'\",     CHARLITERAL, false),\n-            new TestTuple(\"\\'\\\\\\'\\'\",    CHARLITERAL, false),\n-            new TestTuple(\"\\'\\\\\\\"\\'\",    CHARLITERAL, false),\n-            new TestTuple(\"\\'\\\\q\\'\",     CHARLITERAL, true),\n-\n-            new TestTuple(\"abc\\\\u0005def\",IDENTIFIER, false),\n-    };\n-\n-    static class TestTuple {\n-        String input;\n-        TokenKind kind;\n-        String expected;\n-        boolean willFail;\n-\n-        TestTuple(String input, TokenKind kind, String expected, boolean willFail) {\n-            this.input = input;\n-            this.kind = kind;\n-            this.expected = expected;\n-            this.willFail = willFail;\n-        }\n-\n-        TestTuple(String input, TokenKind kind, boolean willFail) {\n-            this(input, kind, input, willFail);\n-        }\n-    }\n-\n-    void assertTest(Token token, TestTuple test) {\n-        boolean normal = token != null == !test.willFail;\n-\n-        if (!normal) {\n-            String message = test.willFail ? \"Expected to fail: \"\n-                                           : \"Expected to pass: \";\n-            throw new AssertionError(message + test.input);\n-        }\n-\n-        if (token != null) {\n-            String actual = test.input.substring(token.pos, token.endPos);\n-\n-            if (token.kind != test.kind) {\n-                throw new AssertionError(\"Unexpected token kind: \" + token.kind);\n-            }\n-\n-            if (!Objects.equals(test.expected, actual)) {\n-                throw new AssertionError(\"Unexpected token content: \" + actual);\n-            }\n-        }\n-    }\n-\n-    Token readToken(String input) throws Exception {\n-        Context ctx = new Context();\n-        Log log = Log.instance(ctx);\n-\n-        log.useSource(new SimpleJavaFileObject(new URI(\"mem:\/\/Test.java\"), JavaFileObject.Kind.SOURCE) {\n-            @Override\n-            public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {\n-                return input;\n-            }\n-        });\n-\n-        char[] inputArr = input.toCharArray();\n-        JavaTokenizer tokenizer = new JavaTokenizer(ScannerFactory.instance(ctx), inputArr, inputArr.length) {};\n-        Token token = tokenizer.readToken();\n-\n-        return log.nerrors == 0 ? token : null;\n-    }\n-\n-    void run() throws Exception {\n-        for (TestTuple test : TESTS) {\n-            Token token = readToken(test.input);\n-            assertTest(token, test);\n-        }\n-\n-        System.out.println(\"Done!\");\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        new JavaLexerTest2().run();\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/lexer\/JavaLexerTest2.java","additions":0,"deletions":174,"binary":false,"changes":174,"status":"deleted"}]}