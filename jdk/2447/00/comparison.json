{"files":[{"patch":"@@ -42,2 +42,0 @@\n-import sun.java2d.cmm.CMSManager;\n-\n@@ -115,6 +113,16 @@\n-    \/\/ Cache of singletons for the predefined color spaces.\n-    private static ColorSpace sRGBspace;\n-    private static ColorSpace XYZspace;\n-    private static ColorSpace PYCCspace;\n-    private static ColorSpace GRAYspace;\n-    private static ColorSpace LINEAR_RGBspace;\n+    \/**\n+     * The lazy cache of singletons for the predefined built-in color spaces.\n+     *\/\n+    private interface BuiltInSpace {\n+\n+        ColorSpace SRGB = new ICC_ColorSpace(ICC_Profile.getInstance(CS_sRGB));\n+\n+        ColorSpace LRGB =\n+                new ICC_ColorSpace(ICC_Profile.getInstance(CS_LINEAR_RGB));\n+\n+        ColorSpace XYZ = new ICC_ColorSpace(ICC_Profile.getInstance(CS_CIEXYZ));\n+\n+        ColorSpace PYCC = new ICC_ColorSpace(ICC_Profile.getInstance(CS_PYCC));\n+\n+        ColorSpace GRAY = new ICC_ColorSpace(ICC_Profile.getInstance(CS_GRAY));\n+    }\n@@ -292,4 +300,3 @@\n-     * @param  colorspace a specific color space identified by one of the\n-     *         predefined class constants (e.g. {@code CS_sRGB},\n-     *         {@code CS_LINEAR_RGB}, {@code CS_CIEXYZ}, {@code CS_GRAY}, or\n-     *         {@code CS_PYCC})\n+     * @param  cspace a specific color space identified by one of the predefined\n+     *         class constants (e.g. {@code CS_sRGB}, {@code CS_LINEAR_RGB},\n+     *         {@code CS_CIEXYZ}, {@code CS_GRAY}, or {@code CS_PYCC})\n@@ -300,36 +307,9 @@\n-    public static ColorSpace getInstance (int colorspace)\n-    {\n-    ColorSpace    theColorSpace;\n-\n-        switch (colorspace) {\n-        case CS_sRGB:\n-            synchronized(ColorSpace.class) {\n-                if (sRGBspace == null) {\n-                    ICC_Profile theProfile = ICC_Profile.getInstance (CS_sRGB);\n-                    sRGBspace = new ICC_ColorSpace (theProfile);\n-                }\n-\n-                theColorSpace = sRGBspace;\n-            }\n-            break;\n-\n-        case CS_CIEXYZ:\n-            synchronized(ColorSpace.class) {\n-                if (XYZspace == null) {\n-                    ICC_Profile theProfile =\n-                        ICC_Profile.getInstance (CS_CIEXYZ);\n-                    XYZspace = new ICC_ColorSpace (theProfile);\n-                }\n-\n-                theColorSpace = XYZspace;\n-            }\n-            break;\n-\n-        case CS_PYCC:\n-            synchronized(ColorSpace.class) {\n-                if (PYCCspace == null) {\n-                    ICC_Profile theProfile = ICC_Profile.getInstance (CS_PYCC);\n-                    PYCCspace = new ICC_ColorSpace (theProfile);\n-                }\n-\n-                theColorSpace = PYCCspace;\n+    public static ColorSpace getInstance(int cspace) {\n+        return switch (cspace) {\n+            case CS_sRGB -> BuiltInSpace.SRGB;\n+            case CS_LINEAR_RGB -> BuiltInSpace.LRGB;\n+            case CS_CIEXYZ -> BuiltInSpace.XYZ;\n+            case CS_PYCC -> BuiltInSpace.PYCC;\n+            case CS_GRAY -> BuiltInSpace.GRAY;\n+            default -> {\n+                throw new IllegalArgumentException(\"Unknown color space\");\n@@ -337,37 +317,1 @@\n-            break;\n-\n-\n-        case CS_GRAY:\n-            synchronized(ColorSpace.class) {\n-                if (GRAYspace == null) {\n-                    ICC_Profile theProfile = ICC_Profile.getInstance (CS_GRAY);\n-                    GRAYspace = new ICC_ColorSpace (theProfile);\n-                    \/* to allow access from java.awt.ColorModel *\/\n-                    CMSManager.GRAYspace = GRAYspace;\n-                }\n-\n-                theColorSpace = GRAYspace;\n-            }\n-            break;\n-\n-\n-        case CS_LINEAR_RGB:\n-            synchronized(ColorSpace.class) {\n-                if (LINEAR_RGBspace == null) {\n-                    ICC_Profile theProfile =\n-                        ICC_Profile.getInstance(CS_LINEAR_RGB);\n-                    LINEAR_RGBspace = new ICC_ColorSpace (theProfile);\n-                    \/* to allow access from java.awt.ColorModel *\/\n-                    CMSManager.LINEAR_RGBspace = LINEAR_RGBspace;\n-                }\n-\n-                theColorSpace = LINEAR_RGBspace;\n-            }\n-            break;\n-\n-\n-        default:\n-            throw new IllegalArgumentException (\"Unknown color space\");\n-        }\n-\n-        return theColorSpace;\n+        };\n@@ -383,2 +327,1 @@\n-        \/* REMIND - make sure we know sRGBspace exists already *\/\n-        return (this == sRGBspace);\n+        return this == BuiltInSpace.SRGB;\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/color\/ColorSpace.java","additions":30,"deletions":87,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -97,8 +97,25 @@\n-    \/\/ Registry of singleton profile objects for specific color spaces\n-    \/\/ defined in the ColorSpace class (e.g. CS_sRGB), see\n-    \/\/ getInstance(int cspace) factory method.\n-    private static ICC_Profile sRGBprofile;\n-    private static ICC_Profile XYZprofile;\n-    private static ICC_Profile PYCCprofile;\n-    private static ICC_Profile GRAYprofile;\n-    private static ICC_Profile LINEAR_RGBprofile;\n+    \/**\n+     * The lazy registry of singleton profile objects for specific built-in\n+     * color spaces defined in the ColorSpace class (e.g. CS_sRGB),\n+     * see getInstance(int cspace) factory method.\n+     *\/\n+    private interface BuiltInProfile {\n+        \/*\n+         * Deferral is only used for standard profiles. Enabling the appropriate\n+         * access privileges is handled at a lower level.\n+         *\/\n+        ICC_Profile SRGB = new ICC_ProfileRGB(new ProfileDeferralInfo(\n+               \"sRGB.pf\", ColorSpace.TYPE_RGB, 3, CLASS_DISPLAY));\n+\n+        ICC_Profile LRGB = new ICC_ProfileRGB(new ProfileDeferralInfo(\n+                \"LINEAR_RGB.pf\", ColorSpace.TYPE_RGB, 3, CLASS_DISPLAY));\n+\n+        ICC_Profile XYZ = new ICC_Profile(new ProfileDeferralInfo(\n+               \"CIEXYZ.pf\", ColorSpace.TYPE_XYZ, 3, CLASS_ABSTRACT));\n+\n+        ICC_Profile PYCC = new ICC_Profile(new ProfileDeferralInfo(\n+               \"PYCC.pf\", ColorSpace.TYPE_3CLR, 3, CLASS_COLORSPACECONVERSION));\n+\n+        ICC_Profile GRAY = new ICC_ProfileGray(new ProfileDeferralInfo(\n+               \"GRAY.pf\", ColorSpace.TYPE_GRAY, 1, CLASS_DISPLAY));\n+    }\n@@ -820,74 +837,9 @@\n-    public static ICC_Profile getInstance (int cspace) {\n-        ICC_Profile thisProfile = null;\n-        switch (cspace) {\n-        case ColorSpace.CS_sRGB:\n-            synchronized(ICC_Profile.class) {\n-                if (sRGBprofile == null) {\n-                    \/*\n-                     * Deferral is only used for standard profiles.\n-                     * Enabling the appropriate access privileges is handled\n-                     * at a lower level.\n-                     *\/\n-                    ProfileDeferralInfo pdi =\n-                        new ProfileDeferralInfo(\"sRGB.pf\",\n-                                                ColorSpace.TYPE_RGB, 3,\n-                                                CLASS_DISPLAY);\n-                    sRGBprofile = new ICC_ProfileRGB(pdi);\n-                }\n-                thisProfile = sRGBprofile;\n-            }\n-\n-            break;\n-\n-        case ColorSpace.CS_CIEXYZ:\n-            synchronized(ICC_Profile.class) {\n-                if (XYZprofile == null) {\n-                    ProfileDeferralInfo pdi =\n-                        new ProfileDeferralInfo(\"CIEXYZ.pf\",\n-                                                ColorSpace.TYPE_XYZ, 3,\n-                                                CLASS_ABSTRACT);\n-                    XYZprofile = new ICC_Profile(pdi);\n-                }\n-                thisProfile = XYZprofile;\n-            }\n-\n-            break;\n-\n-        case ColorSpace.CS_PYCC:\n-            synchronized(ICC_Profile.class) {\n-                if (PYCCprofile == null) {\n-                    ProfileDeferralInfo pdi =\n-                        new ProfileDeferralInfo(\"PYCC.pf\",\n-                                                ColorSpace.TYPE_3CLR, 3,\n-                                                CLASS_COLORSPACECONVERSION);\n-                    PYCCprofile = new ICC_Profile(pdi);\n-                }\n-                thisProfile = PYCCprofile;\n-            }\n-\n-            break;\n-\n-        case ColorSpace.CS_GRAY:\n-            synchronized(ICC_Profile.class) {\n-                if (GRAYprofile == null) {\n-                    ProfileDeferralInfo pdi =\n-                        new ProfileDeferralInfo(\"GRAY.pf\",\n-                                                ColorSpace.TYPE_GRAY, 1,\n-                                                CLASS_DISPLAY);\n-                    GRAYprofile = new ICC_ProfileGray(pdi);\n-                }\n-                thisProfile = GRAYprofile;\n-            }\n-\n-            break;\n-\n-        case ColorSpace.CS_LINEAR_RGB:\n-            synchronized(ICC_Profile.class) {\n-                if (LINEAR_RGBprofile == null) {\n-                    ProfileDeferralInfo pdi =\n-                        new ProfileDeferralInfo(\"LINEAR_RGB.pf\",\n-                                                ColorSpace.TYPE_RGB, 3,\n-                                                CLASS_DISPLAY);\n-                    LINEAR_RGBprofile = new ICC_ProfileRGB(pdi);\n-                }\n-                thisProfile = LINEAR_RGBprofile;\n+    public static ICC_Profile getInstance(int cspace) {\n+        return switch (cspace) {\n+            case ColorSpace.CS_sRGB -> BuiltInProfile.SRGB;\n+            case ColorSpace.CS_LINEAR_RGB -> BuiltInProfile.LRGB;\n+            case ColorSpace.CS_CIEXYZ -> BuiltInProfile.XYZ;\n+            case ColorSpace.CS_PYCC -> BuiltInProfile.PYCC;\n+            case ColorSpace.CS_GRAY -> BuiltInProfile.GRAY;\n+            default -> {\n+                throw new IllegalArgumentException(\"Unknown color space\");\n@@ -895,8 +847,1 @@\n-\n-            break;\n-\n-        default:\n-            throw new IllegalArgumentException(\"Unknown color space\");\n-        }\n-\n-        return thisProfile;\n+        };\n@@ -1810,1 +1755,1 @@\n-        if (this == sRGBprofile) {\n+        if (this == BuiltInProfile.SRGB) {\n@@ -1812,1 +1757,1 @@\n-        } else if (this == XYZprofile) {\n+        } else if (this == BuiltInProfile.XYZ) {\n@@ -1814,1 +1759,1 @@\n-        } else if (this == PYCCprofile) {\n+        } else if (this == BuiltInProfile.PYCC) {\n@@ -1816,1 +1761,1 @@\n-        } else if (this == GRAYprofile) {\n+        } else if (this == BuiltInProfile.GRAY) {\n@@ -1818,1 +1763,1 @@\n-        } else if (this == LINEAR_RGBprofile) {\n+        } else if (this == BuiltInProfile.LRGB) {\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/color\/ICC_Profile.java","additions":40,"deletions":95,"binary":false,"changes":135,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1708,3 +1708,1 @@\n-        \/\/ Note: CMM.LINEAR_RGBspace will be null if the linear\n-        \/\/ RGB space has not been created yet.\n-        return (cs == CMSManager.LINEAR_RGBspace);\n+        return cs == ColorSpace.getInstance(ColorSpace.CS_LINEAR_RGB);\n@@ -1714,3 +1712,1 @@\n-        \/\/ Note: CMM.GRAYspace will be null if the linear\n-        \/\/ gray space has not been created yet.\n-        return (cs == CMSManager.GRAYspace);\n+        return cs == ColorSpace.getInstance(ColorSpace.CS_GRAY);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/image\/ColorModel.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import java.awt.color.ColorSpace;\n@@ -35,8 +34,1 @@\n-public class CMSManager {\n-    public static ColorSpace GRAYspace;       \/\/ These two fields allow access\n-    public static ColorSpace LINEAR_RGBspace; \/\/ to java.awt.color.ColorSpace\n-                                              \/\/ private fields from other\n-                                              \/\/ packages.  The fields are set\n-                                              \/\/ by java.awt.color.ColorSpace\n-                                              \/\/ and read by\n-                                              \/\/ java.awt.image.ColorModel.\n+public final class CMSManager {\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/cmm\/CMSManager.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.color.ICC_ColorSpace;\n+import java.awt.color.ICC_Profile;\n+import java.util.Arrays;\n+import java.util.Set;\n+\n+import static java.awt.color.ColorSpace.*;\n+\n+\/**\n+ * @test\n+ * @bug 8261282\n+ * @summary Checks that all built-in profiles and data are different.\n+ *\/\n+public final class BuiltInDataVariation {\n+\n+    public static void main(String[] args) {\n+        testColorProfiles();\n+        testColorSpaces();\n+    }\n+\n+    private static void testColorProfiles() {\n+        ICC_Profile srgb = ICC_Profile.getInstance(CS_sRGB);\n+        ICC_Profile lrgb = ICC_Profile.getInstance(CS_LINEAR_RGB);\n+        ICC_Profile xyz = ICC_Profile.getInstance(CS_CIEXYZ);\n+        ICC_Profile pycc = ICC_Profile.getInstance(CS_PYCC);\n+        ICC_Profile gray = ICC_Profile.getInstance(CS_GRAY);\n+\n+        test(srgb, lrgb, xyz, pycc, gray);\n+        test(Arrays.hashCode(srgb.getData()), Arrays.hashCode(lrgb.getData()),\n+             Arrays.hashCode(xyz.getData()), Arrays.hashCode(pycc.getData()),\n+             Arrays.hashCode(gray.getData()));\n+    }\n+\n+    private static void testColorSpaces() {\n+        var srgb = (ICC_ColorSpace) ColorSpace.getInstance(CS_sRGB);\n+        var lrgb = (ICC_ColorSpace) ColorSpace.getInstance(CS_LINEAR_RGB);\n+        var xyz = (ICC_ColorSpace) ColorSpace.getInstance(CS_CIEXYZ);\n+        var pycc = (ICC_ColorSpace) ColorSpace.getInstance(CS_PYCC);\n+        var gray = (ICC_ColorSpace) ColorSpace.getInstance(CS_GRAY);\n+\n+        test(srgb, lrgb, xyz, pycc, gray);\n+        test(srgb.getProfile(), lrgb.getProfile(), xyz.getProfile(),\n+             pycc.getProfile(), gray.getProfile());\n+        test(Arrays.hashCode(srgb.getProfile().getData()),\n+             Arrays.hashCode(lrgb.getProfile().getData()),\n+             Arrays.hashCode(xyz.getProfile().getData()),\n+             Arrays.hashCode(pycc.getProfile().getData()),\n+             Arrays.hashCode(gray.getProfile().getData()));\n+    }\n+\n+    private static void test(Object srgb, Object lrgb, Object xyz,\n+                             Object pycc, Object gray) {\n+        Set.of(srgb, lrgb, xyz, pycc, gray);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/color\/BuiltInDataVariation.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.color.ICC_Profile;\n+\n+import static java.awt.color.ColorSpace.CS_CIEXYZ;\n+import static java.awt.color.ColorSpace.CS_GRAY;\n+import static java.awt.color.ColorSpace.CS_LINEAR_RGB;\n+import static java.awt.color.ColorSpace.CS_PYCC;\n+import static java.awt.color.ColorSpace.CS_sRGB;\n+\n+\/**\n+ * @test\n+ * @bug 8261282\n+ * @summary Checks static locks in the ColorSpace\/ICC_Profile classes.\n+ *\/\n+public final class HotStaticLocks {\n+\n+    public static void main(String[] args) throws Exception {\n+        testICCProfile();\n+        testColorSpace();\n+    }\n+\n+    private static void testICCProfile() throws Exception {\n+        int[] spaces = {CS_sRGB, CS_LINEAR_RGB, CS_CIEXYZ, CS_PYCC, CS_GRAY};\n+        for (int cs : spaces) {\n+            synchronized (ICC_Profile.class) {\n+                Thread t = new Thread(() -> ICC_Profile.getInstance(cs));\n+                t.start();\n+                t.join();\n+            }\n+        }\n+    }\n+\n+    private static void testColorSpace() throws Exception {\n+        int[] spaces = {CS_sRGB, CS_LINEAR_RGB, CS_CIEXYZ, CS_PYCC, CS_GRAY};\n+        for (int cs : spaces) {\n+            synchronized (ColorSpace.class) {\n+                Thread t = new Thread(() -> ColorSpace.getInstance(cs));\n+                t.start();\n+                t.join();\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/color\/HotStaticLocks.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}