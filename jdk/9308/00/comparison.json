{"files":[{"patch":"@@ -80,0 +80,1 @@\n+  BUILD_JDK_JTREG_LIBRARIES_LIBS_libTracePinnedThreads := jvm.lib\n@@ -92,0 +93,1 @@\n+  BUILD_JDK_JTREG_LIBRARIES_LIBS_libTracePinnedThreads := -ljvm\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-     * Prints the stack trace of the current mounted vthread continuation.\n+     * Prints the continuation stack trace.\n@@ -106,1 +106,1 @@\n-            .ifPresent(klass -> {\n+            .ifPresentOrElse(klass -> {\n@@ -115,1 +115,1 @@\n-            });\n+            }, () -> printStackTrace(stack, out, true));  \/\/ not found\n@@ -125,1 +125,1 @@\n-            if (monitorCount > 0 || frame.isNativeMethod()) {\n+            if (monitorCount > 0) {\n@@ -127,1 +127,1 @@\n-            } else if (printAll) {\n+            } else if (frame.isNativeMethod() || printAll) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/PinnedThreadPrinter.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @bug 8284161 8289284\n@@ -28,3 +29,4 @@\n- * @compile --enable-preview -source ${jdk.version} TracePinnedThreads.java\n- * @run main\/othervm --enable-preview -Djdk.tracePinnedThreads=full TracePinnedThreads\n- * @run main\/othervm --enable-preview -Djdk.tracePinnedThreads=short TracePinnedThreads\n+ * @enablePreview\n+ * @library \/test\/lib\n+ * @run testng\/othervm -Djdk.tracePinnedThreads=full TracePinnedThreads\n+ * @run testng\/othervm -Djdk.tracePinnedThreads=short TracePinnedThreads\n@@ -38,0 +40,4 @@\n+import jdk.test.lib.thread.VThreadRunner;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n@@ -41,2 +47,38 @@\n-    public static void main(String[] args) throws Exception {\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    \/**\n+     * Parks current thread for 1 second.\n+     *\/\n+    private static void park() {\n+        long nanos = Duration.ofSeconds(1).toNanos();\n+        LockSupport.parkNanos(nanos);\n+    }\n+\n+    \/**\n+     * Invokes the park method through a native frame to park the current\n+     * thread for 1 second.\n+     *\/\n+    private static native void invokePark();\n+\n+    \/**\n+     * Test parking inside synchronized block.\n+     *\/\n+    @Test\n+    public void testPinnedCausedBySynchronizedBlock() throws Exception {\n+        String output = run(() -> {\n+            synchronized (lock) {\n+                park();\n+            }\n+        });\n+        assertContains(output, \"<== monitors:1\");\n+        assertDoesNotContain(output, \"(Native Method)\");\n+    }\n+\n+    \/**\n+     * Test parking with native frame on stack.\n+     *\/\n+    @Test\n+    public void testPinnedCausedByNativeMethod() throws Exception {\n+        System.loadLibrary(\"TracePinnedThreads\");\n+        String output = run(() -> invokePark());\n+        assertContains(output, \"(Native Method)\");\n+        assertDoesNotContain(output, \"<== monitors\");\n+    }\n@@ -44,0 +86,6 @@\n+    \/**\n+     * Runs a task in a virutal thread, returning a String with any output printed\n+     * to standard output.\n+     *\/\n+    private static String run(Runnable task) throws Exception {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n@@ -47,7 +95,1 @@\n-            Thread.ofVirtual().start(() -> {\n-                synchronized (lock) {\n-                    long nanos = Duration.ofSeconds(1).toNanos();\n-                    LockSupport.parkNanos(nanos);\n-                }\n-            }).join();\n-            System.out.flush();\n+            VThreadRunner.run(task::run);\n@@ -57,2 +99,1 @@\n-\n-        String output = new String(baos.toByteArray()); \/\/ default charset\n+        String output = new String(baos.toByteArray());\n@@ -60,0 +101,2 @@\n+        return output;\n+    }\n@@ -61,4 +104,12 @@\n-        String expected = \"<== monitors:1\";\n-        if (!output.contains(expected)) {\n-            throw new RuntimeException(\"expected: \\\"\" + expected + \"\\\"\");\n-        }\n+    \/**\n+     * Tests that s1 contains s2.\n+     *\/\n+    private static void assertContains(String s1, String s2) {\n+        assertTrue(s1.contains(s2), s2 + \" not found!!!\");\n+    }\n+\n+    \/**\n+     * Tests that s1 does not contain s2.\n+     *\/\n+    private static void assertDoesNotContain(String s1, String s2) {\n+        assertFalse(s1.contains(s2), s2 + \" found!!\");\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/TracePinnedThreads.java","additions":69,"deletions":18,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"jni.h\"\n+\n+JNIEXPORT void JNICALL Java_TracePinnedThreads_invokePark(JNIEnv *env, jclass clazz) {\n+    jmethodID mid = (*env)->GetStaticMethodID(env, clazz, \"park\", \"()V\");\n+    if (mid != NULL) {\n+        (*env)->CallStaticVoidMethod(env, clazz, mid);\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/libTracePinnedThreads.c","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"}]}