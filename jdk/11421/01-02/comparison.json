{"files":[{"patch":"@@ -28,0 +28,2 @@\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n@@ -598,0 +600,1 @@\n+            @SuppressWarnings(\"removal\")\n@@ -601,11 +604,13 @@\n-                    var consModName =\n-                            GetPropertyAction.privilegedGetProperty(\"jdk.console\",\n-                                    JdkConsoleProvider.DEFAULT_PROVIDER);\n-                    cons = ServiceLoader.load(JdkConsoleProvider.class).stream()\n-                       .map(ServiceLoader.Provider::get)\n-                       .filter(jcp -> consModName.equals(jcp.getClass().getModule().getName()))\n-                       .map(jcp -> jcp.console(istty))\n-                       .filter(Objects::nonNull)\n-                       .findAny()\n-                       .map(jc -> (Console)new ProxyingConsole(jc))\n-                       .orElse(istty ? new Console() : null);\n+                    PrivilegedAction<Console> pa = () -> {\n+                        var consModName = System.getProperty(\"jdk.console\",\n+                                JdkConsoleProvider.DEFAULT_PROVIDER);\n+                        return ServiceLoader.load(JdkConsoleProvider.class).stream()\n+                                .map(ServiceLoader.Provider::get)\n+                                .filter(jcp -> consModName.equals(jcp.getClass().getModule().getName()))\n+                                .map(jcp -> jcp.console(istty))\n+                                .filter(Objects::nonNull)\n+                                .findAny()\n+                                .map(jc -> (Console)new ProxyingConsole(jc))\n+                                .orElse(istty ? new Console() : null);\n+                    };\n+                    cons = AccessController.doPrivileged(pa);\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -191,0 +191,3 @@\n+    \/\/ Holder for the initial value of `in`, set within `initPhase1()`.\n+    private static InputStream initialIn;\n+\n@@ -2133,2 +2136,0 @@\n-    private static InputStream initIn = null;\n-\n@@ -2178,2 +2179,2 @@\n-        initIn = new BufferedInputStream(fdIn);\n-        setIn0(initIn);\n+        initialIn = new BufferedInputStream(fdIn);\n+        setIn0(initialIn);\n@@ -2491,1 +2492,1 @@\n-                return initIn;\n+                return initialIn;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8295803\n+ * @summary Tests System.console() returns correct Console (or null) from the expected\n+ *          module.\n+ * @modules java.base\/java.io:+open\n+ * @run main\/othervm ModuleSelectionTest jdk.internal.le\n+ * @run main\/othervm -Djdk.console=jdk.internal.le ModuleSelectionTest jdk.internal.le\n+ * @run main\/othervm -Djdk.console=java.base ModuleSelectionTest java.base\n+ * @run main\/othervm --limit-modules java.base ModuleSelectionTest java.base\n+ *\/\n+\n+import java.io.Console;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+\n+public class ModuleSelectionTest {\n+    public static void main(String... args) throws Throwable {\n+        var con = System.console();\n+        var pc = Class.forName(\"java.io.ProxyingConsole\");\n+        var jdkc = Class.forName(\"jdk.internal.io.JdkConsole\");\n+        var istty = (boolean)MethodHandles.privateLookupIn(Console.class, MethodHandles.lookup())\n+                .findStatic(Console.class, \"istty\", MethodType.methodType(boolean.class))\n+                .invoke();\n+        var impl = con != null ? MethodHandles.privateLookupIn(pc, MethodHandles.lookup())\n+                .findGetter(pc, \"delegate\", jdkc)\n+                .invoke(con) : null;\n+\n+        var expected = switch (args[0]) {\n+            case \"java.base\" -> istty ? \"java.base\" : \"null\";\n+            default -> args[0];\n+        };\n+        var actual = con == null ? \"null\" : impl.getClass().getModule().getName();\n+\n+        if (!actual.equals(expected)) {\n+            throw new RuntimeException(\"\"\"\n+                Console implementation is not the expected one.\n+                Expected: %s\n+                Actual: %s\n+                \"\"\".formatted(expected, actual));\n+        } else {\n+            System.out.printf(\"%s is the expected implementation. (tty: %s)\\n\", impl, istty);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/Console\/ModuleSelectionTest.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8295803\n+ * @summary Tests System.console() works with the security manager\n+ * @run main\/othervm\/java.security.policy=test.policy -Djava.security.manager -Djdk.console=jdk.internal.le SecurityManagerTest\n+ *\/\n+public class SecurityManagerTest {\n+    public static void main(String... args) {\n+        var con = System.console();\n+        if (con == null) {\n+            throw new RuntimeException(\"jline console could not be instantiated with the Security Manager\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/Console\/SecurityManagerTest.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,8 @@\n+grant {\n+    permission java.io.FilePermission \"<<ALL FILES>>\",\"read,write,delete\";\n+    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.io\";\n+    permission java.lang.RuntimePermission \"getenv.*\";\n+    permission java.lang.RuntimePermission \"readFileDescriptor\";\n+    permission java.lang.RuntimePermission \"writeFileDescriptor\";\n+    permission java.util.PropertyPermission \"org.jline.*\",\"read\";\n+};\n","filename":"test\/jdk\/java\/io\/Console\/test.policy","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"}]}