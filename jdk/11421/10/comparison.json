{"files":[{"patch":"@@ -28,0 +28,2 @@\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n@@ -32,0 +34,1 @@\n+import jdk.internal.io.JdkConsoleProvider;\n@@ -48,1 +51,1 @@\n- * example by a background job scheduler, then it will typically not\n+ * example by a background job scheduler, then it may not\n@@ -96,1 +99,1 @@\n-public final class Console implements Flushable\n+public class Console implements Flushable\n@@ -595,0 +598,2 @@\n+        cons = instantiateConsole(istty);\n+\n@@ -598,10 +603,1 @@\n-                if (istty) {\n-                    if (cons == null)\n-                        cons = new Console();\n-                    return cons;\n-                }\n-                return null;\n-            }\n-\n-            public Charset charset() {\n-                return CHARSET;\n+                return cons;\n@@ -611,1 +607,25 @@\n-    private static Console cons;\n+\n+    @SuppressWarnings(\"removal\")\n+    private static Console instantiateConsole(boolean istty) {\n+        try {\n+            \/\/ Try loading providers\n+            PrivilegedAction<Console> pa = () -> {\n+                var consModName = System.getProperty(\"jdk.console\",\n+                        JdkConsoleProvider.DEFAULT_PROVIDER_MODULE_NAME);\n+                return ServiceLoader.load(ModuleLayer.boot(), JdkConsoleProvider.class).stream()\n+                        .map(ServiceLoader.Provider::get)\n+                        .filter(jcp -> consModName.equals(jcp.getClass().getModule().getName()))\n+                        .map(jcp -> jcp.console(istty, CHARSET))\n+                        .filter(Objects::nonNull)\n+                        .findAny()\n+                        .map(jc -> (Console) new ProxyingConsole(jc))\n+                        .orElse(istty ? new Console() : null);\n+            };\n+            return AccessController.doPrivileged(pa);\n+        } catch (Throwable ignore) {\n+            \/\/ default to built-in Console\n+            return istty ? new Console() : null;\n+        }\n+    }\n+\n+    private static final Console cons;\n@@ -613,1 +633,2 @@\n-    private Console() {\n+\n+    Console() {\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":35,"deletions":14,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -0,0 +1,197 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.io;\n+\n+import java.nio.charset.Charset;\n+import jdk.internal.io.JdkConsole;\n+\n+\/**\n+ * Console implementation for internal use. Custom Console delegate may be\n+ * provided with jdk.internal.io.JdkConsoleProvider.\n+ *\/\n+final class ProxyingConsole extends Console {\n+    private final JdkConsole delegate;\n+    private final Object readLock;\n+    private final Object writeLock;\n+    private final Reader reader;\n+    private final PrintWriter printWriter;\n+\n+    ProxyingConsole(JdkConsole delegate) {\n+        this.delegate = delegate;\n+        readLock = new Object();\n+        writeLock = new Object();\n+        reader = new WrappingReader(delegate.reader(), readLock);\n+        printWriter = new WrappingWriter(delegate.writer(), writeLock);\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public PrintWriter writer() {\n+        return printWriter;\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public Reader reader() {\n+        return reader;\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public Console format(String fmt, Object ... args) {\n+        synchronized (writeLock) {\n+            delegate.format(fmt, args);\n+        }\n+        return this;\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public Console printf(String format, Object ... args) {\n+        synchronized (writeLock) {\n+            delegate.printf(format, args);\n+        }\n+        return this;\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public String readLine(String fmt, Object ... args) {\n+        synchronized (writeLock) {\n+            synchronized (readLock) {\n+                return delegate.readLine(fmt, args);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public String readLine() {\n+        synchronized (readLock) {\n+            return delegate.readLine();\n+        }\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public char[] readPassword(String fmt, Object ... args) {\n+        synchronized (writeLock) {\n+            synchronized (readLock) {\n+                return delegate.readPassword(fmt, args);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public char[] readPassword() {\n+        synchronized (readLock) {\n+            return delegate.readPassword();\n+        }\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public void flush() {\n+        delegate.flush();\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public Charset charset() {\n+        return delegate.charset();\n+    }\n+\n+    private static class WrappingReader extends Reader {\n+        private final Reader r;\n+        private final Object lock;\n+\n+        WrappingReader(Reader r, Object lock) {\n+            this.r = r;\n+            this.lock = lock;\n+        }\n+\n+        @Override\n+        public int read(char[] cbuf, int off, int len) throws IOException {\n+            synchronized (lock) {\n+                return r.read(cbuf, off, len);\n+            }\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            r.close();\n+        }\n+    }\n+\n+    private static class WrappingWriter extends PrintWriter {\n+        private final PrintWriter pw;\n+        private final Object lock;\n+\n+        public WrappingWriter(PrintWriter pw, Object lock) {\n+            super(pw);\n+            this.pw = pw;\n+            this.lock = lock;\n+        }\n+\n+        @Override\n+        public void write(char[] cbuf, int off, int len) {\n+            synchronized (lock) {\n+                pw.write(cbuf, off, len);\n+            }\n+        }\n+\n+        @Override\n+        public void flush() {\n+            pw.flush();\n+        }\n+\n+        @Override\n+        public void close() {\n+            pw.close();\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/io\/ProxyingConsole.java","additions":197,"deletions":0,"binary":false,"changes":197,"status":"added"},{"patch":"@@ -191,0 +191,3 @@\n+    \/\/ Holder for the initial value of `in`, set within `initPhase1()`.\n+    private static InputStream initialIn;\n+\n@@ -2176,1 +2179,2 @@\n-        setIn0(new BufferedInputStream(fdIn));\n+        initialIn = new BufferedInputStream(fdIn);\n+        setIn0(initialIn);\n@@ -2487,0 +2491,4 @@\n+            public InputStream initialSystemIn() {\n+                return initialIn;\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import java.nio.charset.Charset;\n@@ -33,1 +32,0 @@\n-    Charset charset();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaIOAccess.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.io.InputStream;\n@@ -366,0 +367,6 @@\n+    \/**\n+     * Returns the initial `System.in` to determine if it is replaced\n+     * with `System.setIn(newIn)` method\n+     *\/\n+    InputStream initialSystemIn();\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.io;\n+\n+import java.io.PrintWriter;\n+import java.io.Reader;\n+import java.nio.charset.Charset;\n+\n+\/**\n+ * Delegate interface for custom Console implementations.\n+ * Methods defined here duplicates the ones in Console class.\n+ * Providers should implement jdk.internal.io.JdkConsoleProvider\n+ * to instantiate an implementation of this interface.\n+ *\/\n+public interface JdkConsole {\n+    PrintWriter writer();\n+    Reader reader();\n+    JdkConsole format(String fmt, Object ... args);\n+    JdkConsole printf(String format, Object ... args);\n+    String readLine(String fmt, Object ... args);\n+    String readLine();\n+    char[] readPassword(String fmt, Object ... args);\n+    char[] readPassword();\n+    void flush();\n+    Charset charset();\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsole.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.io;\n+\n+import java.nio.charset.Charset;\n+\n+\/**\n+ * Service provider interface for JdkConsole implementations.\n+ * The provider used for instantiating JdkConsole instance can be\n+ * specified with the system property \"jdk.console\", whose value\n+ * designates the module name of the implementation, and which defaults\n+ * to \"jdk.internal.le\" (jline). If no providers is available,\n+ * or instantiation failed, java.base built-in Console implementation\n+ * is used.\n+ *\/\n+public interface JdkConsoleProvider {\n+    \/**\n+     * The module name of the JdkConsole default provider.\n+     *\/\n+    String DEFAULT_PROVIDER_MODULE_NAME = \"jdk.internal.le\";\n+\n+    \/**\n+     * {@return the Console instance, or {@code null} if not available}\n+     * @param isTTY indicates if the jvm is attached to a terminal\n+     * @param charset charset of the platform console\n+     *\/\n+    JdkConsole console(boolean isTTY, Charset charset);\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsoleProvider.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -176,0 +176,3 @@\n+    exports jdk.internal.io to\n+        jdk.internal.le,\n+        jdk.jshell;\n@@ -408,0 +411,1 @@\n+    uses jdk.internal.io.JdkConsoleProvider;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.access.SharedSecrets;\n@@ -54,1 +55,1 @@\n-            \/\/ Use the new java.io.Console class\n+            \/\/ Only use Console if `in` is the initial System.in\n@@ -56,1 +57,3 @@\n-            if (!isEchoOn && in == System.in && ((con = System.console()) != null)) {\n+            if (!isEchoOn &&\n+                    in == SharedSecrets.getJavaLangAccess().initialSystemIn() &&\n+                    ((con = System.console()) != null)) {\n@@ -58,1 +61,1 @@\n-                \/\/ readPassword returns \"\" if you just print ENTER,\n+                \/\/ readPassword returns \"\" if you just press ENTER with the built-in Console,\n@@ -60,1 +63,1 @@\n-                if (consoleEntered != null && consoleEntered.length == 0) {\n+                if (consoleEntered == null || consoleEntered.length == 0) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Password.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.org.jline;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Reader;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.Charset;\n+\n+import jdk.internal.io.JdkConsole;\n+import jdk.internal.io.JdkConsoleProvider;\n+import jdk.internal.org.jline.reader.EndOfFileException;\n+import jdk.internal.org.jline.reader.LineReader;\n+import jdk.internal.org.jline.reader.LineReaderBuilder;\n+import jdk.internal.org.jline.terminal.Terminal;\n+import jdk.internal.org.jline.terminal.TerminalBuilder;\n+\n+\/**\n+ * JdkConsole\/Provider implementations for jline\n+ *\/\n+public class JdkConsoleProviderImpl implements JdkConsoleProvider {\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public JdkConsole console(boolean isTTY, Charset charset) {\n+        return new JdkConsoleImpl(charset);\n+    }\n+\n+    \/**\n+     * An implementation of JdkConsole, which act as a delegate for the\n+     * public Console class.\n+     *\/\n+    private static class JdkConsoleImpl implements JdkConsole {\n+        @Override\n+        public PrintWriter writer() {\n+            return terminal.writer();\n+        }\n+\n+        @Override\n+        public Reader reader() {\n+            return terminal.reader();\n+        }\n+\n+        @Override\n+        public JdkConsole format(String fmt, Object ... args) {\n+            writer().format(fmt, args).flush();\n+            return this;\n+        }\n+\n+        @Override\n+        public JdkConsole printf(String format, Object ... args) {\n+            return format(format, args);\n+        }\n+\n+        @Override\n+        public String readLine(String fmt, Object ... args) {\n+            try {\n+                return jline.readLine(fmt.formatted(args));\n+            } catch (EndOfFileException eofe) {\n+                return null;\n+            }\n+        }\n+\n+        @Override\n+        public String readLine() {\n+            return readLine(\"\");\n+        }\n+\n+        @Override\n+        public char[] readPassword(String fmt, Object ... args) {\n+            try {\n+                return jline.readLine(fmt.formatted(args), '\\0').toCharArray();\n+            } catch (EndOfFileException eofe) {\n+                return null;\n+            }\n+        }\n+\n+        @Override\n+        public char[] readPassword() {\n+            return readPassword(\"\");\n+        }\n+\n+        @Override\n+        public void flush() {\n+            terminal.flush();\n+        }\n+\n+        @Override\n+        public Charset charset() {\n+            return terminal.encoding();\n+        }\n+\n+        private final LineReader jline;\n+        private final Terminal terminal;\n+\n+        public JdkConsoleImpl(Charset charset) {\n+            try {\n+                terminal = TerminalBuilder.builder().encoding(charset).build();\n+                jline = LineReaderBuilder.builder().terminal(terminal).build();\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(ioe);\n+            }\n+        }\n+    }\n+}\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/JdkConsoleProviderImpl.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,3 @@\n+    \/\/ Console\n+    provides jdk.internal.io.JdkConsoleProvider with\n+            jdk.internal.org.jline.JdkConsoleProviderImpl;\n","filename":"src\/jdk.internal.le\/share\/classes\/module-info.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8295803\n+ * @summary Tests System.console() returns correct Console (or null) from the expected\n+ *          module.\n+ * @modules java.base\/java.io:+open\n+ * @run main\/othervm ModuleSelectionTest jdk.internal.le\n+ * @run main\/othervm -Djdk.console=jdk.internal.le ModuleSelectionTest jdk.internal.le\n+ * @run main\/othervm -Djdk.console=java.base ModuleSelectionTest java.base\n+ * @run main\/othervm --limit-modules java.base ModuleSelectionTest java.base\n+ *\/\n+\n+import java.io.Console;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+\n+public class ModuleSelectionTest {\n+    public static void main(String... args) throws Throwable {\n+        var con = System.console();\n+        var pc = Class.forName(\"java.io.ProxyingConsole\");\n+        var jdkc = Class.forName(\"jdk.internal.io.JdkConsole\");\n+        var istty = (boolean)MethodHandles.privateLookupIn(Console.class, MethodHandles.lookup())\n+                .findStatic(Console.class, \"istty\", MethodType.methodType(boolean.class))\n+                .invoke();\n+        var impl = con != null ? MethodHandles.privateLookupIn(pc, MethodHandles.lookup())\n+                .findGetter(pc, \"delegate\", jdkc)\n+                .invoke(con) : null;\n+\n+        var expected = switch (args[0]) {\n+            case \"java.base\" -> istty ? \"java.base\" : \"null\";\n+            default -> args[0];\n+        };\n+        var actual = con == null ? \"null\" : impl.getClass().getModule().getName();\n+\n+        if (!actual.equals(expected)) {\n+            throw new RuntimeException(\"\"\"\n+                Console implementation is not the expected one.\n+                Expected: %s\n+                Actual: %s\n+                \"\"\".formatted(expected, actual));\n+        } else {\n+            System.out.printf(\"%s is the expected implementation. (tty: %s)\\n\", impl, istty);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/Console\/ModuleSelectionTest.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/**\n+ * @test\n+ * @bug 8295803\n+ * @summary Tests System.console() works with standard input redirection.\n+ * @library \/test\/lib\n+ *\/\n+public class RedirectTest {\n+    public static void main(String... args) throws Throwable {\n+        if (args.length == 0) {\n+            \/\/ no arg will launch the child process that actually perform tests\n+            var pb = ProcessTools.createTestJvm(\"RedirectTest\", \"dummy\");\n+            var input = new File(System.getProperty(\"test.src\", \".\"), \"input.txt\");\n+            pb.redirectInput(input);\n+            var oa = ProcessTools.executeProcess(pb);\n+            var output = oa.asLines();\n+            var expected = Files.readAllLines(input.toPath());\n+            if (!output.equals(expected)) {\n+                throw new RuntimeException(\"\"\"\n+                        Standard out had unexpected strings:\n+                        Actual output: %s\n+                        Expected output: %s\n+                        \"\"\".formatted(output, expected));\n+            }\n+            oa.shouldHaveExitValue(0);\n+        } else {\n+            var con = System.console();\n+            String line;\n+            while ((line = con.readLine()) != null) {\n+                System.out.println(line);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/Console\/RedirectTest.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8295803\n+ * @summary Tests System.console() works with the security manager\n+ * @run main\/othervm\/java.security.policy=test.policy -Djava.security.manager -Djdk.console=jdk.internal.le SecurityManagerTest\n+ *\/\n+public class SecurityManagerTest {\n+    public static void main(String... args) {\n+        System.console();\n+        \/\/ consider it successful if ServiceConfigurationError was not thrown here\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/Console\/SecurityManagerTest.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+This is line 1\n+This is line 2\n+This is the last line\n","filename":"test\/jdk\/java\/io\/Console\/input.txt","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+grant {\n+    permission java.io.FilePermission \"<<ALL FILES>>\",\"read,write,delete\";\n+};\n","filename":"test\/jdk\/java\/io\/Console\/test.policy","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"}]}