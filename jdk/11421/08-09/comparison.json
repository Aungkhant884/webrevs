{"files":[{"patch":"@@ -39,0 +39,2 @@\n+    private final Reader reader;\n+    private final PrintWriter printWriter;\n@@ -44,0 +46,2 @@\n+        reader = new WrappingReader(delegate.reader(), readLock);\n+        printWriter = new WrappingWriter(delegate.writer(), writeLock);\n@@ -51,1 +55,1 @@\n-        return delegate.writer();\n+        return printWriter;\n@@ -59,1 +63,1 @@\n-        return delegate.reader();\n+        return reader;\n@@ -143,0 +147,50 @@\n+\n+    private class WrappingReader extends Reader {\n+        private final Reader r;\n+        private final Object lock;\n+\n+        WrappingReader(Reader r, Object lock) {\n+            this.r = r;\n+            this.lock = lock;\n+        }\n+\n+        @Override\n+        public int read(char[] cbuf, int off, int len) throws IOException {\n+            synchronized (lock) {\n+                return r.read(cbuf, off, len);\n+            }\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            r.close();\n+        }\n+    }\n+\n+    private class WrappingWriter extends PrintWriter {\n+        private final PrintWriter pw;\n+        private final Object lock;\n+\n+        public WrappingWriter(PrintWriter pw, Object lock) {\n+            super(pw);\n+            this.pw = pw;\n+            this.lock = lock;\n+        }\n+\n+        @Override\n+        public void write(char[] cbuf, int off, int len) {\n+            synchronized (lock) {\n+                pw.write(cbuf, off, len);\n+            }\n+        }\n+\n+        @Override\n+        public void flush() {\n+            pw.flush();\n+        }\n+\n+        @Override\n+        public void close() {\n+            pw.close();\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/io\/ProxyingConsole.java","additions":56,"deletions":2,"binary":false,"changes":58,"status":"modified"}]}