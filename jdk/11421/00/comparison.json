{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.io.JdkConsoleProvider;\n@@ -96,1 +97,1 @@\n-public final class Console implements Flushable\n+public class Console implements Flushable\n@@ -598,4 +599,13 @@\n-                if (istty) {\n-                    if (cons == null)\n-                        cons = new Console();\n-                    return cons;\n+                if (cons == null) {\n+                    \/\/ Try loading providers\n+                    var consModName =\n+                            GetPropertyAction.privilegedGetProperty(\"jdk.console\",\n+                                    JdkConsoleProvider.DEFAULT_PROVIDER);\n+                    cons = ServiceLoader.load(JdkConsoleProvider.class).stream()\n+                       .map(ServiceLoader.Provider::get)\n+                       .filter(jcp -> consModName.equals(jcp.getClass().getModule().getName()))\n+                       .map(jcp -> jcp.console(istty))\n+                       .filter(Objects::nonNull)\n+                       .findAny()\n+                       .map(jc -> (Console)new ProxyingConsole(jc))\n+                       .orElse(istty ? new Console() : null);\n@@ -603,1 +613,1 @@\n-                return null;\n+                return cons;\n@@ -607,1 +617,1 @@\n-                return CHARSET;\n+                return cons.charset();\n@@ -613,1 +623,2 @@\n-    private Console() {\n+\n+    Console() {\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.io;\n+\n+import java.nio.charset.Charset;\n+import jdk.internal.io.JdkConsole;\n+\n+\/**\n+ * Console implementation for internal use. Custom Console delegate may be\n+ * provided with jdk.internal.io.JdkConsoleProvider.\n+ *\/\n+final class ProxyingConsole extends Console {\n+    private final JdkConsole delegate;\n+\n+    ProxyingConsole(JdkConsole delegate) {\n+        this.delegate = delegate;\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public PrintWriter writer() {\n+        return delegate.writer();\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public Reader reader() {\n+        return delegate.reader();\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public Console format(String fmt, Object ...args) {\n+        delegate.format(fmt, args);\n+        return this;\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public Console printf(String format, Object ... args) {\n+        delegate.printf(format, args);\n+        return this;\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public String readLine(String fmt, Object ... args) {\n+        return delegate.readLine(fmt, args);\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public String readLine() {\n+        return delegate.readLine();\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public char[] readPassword(String fmt, Object ... args) {\n+        return delegate.readPassword(fmt, args);\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public char[] readPassword() {\n+        return delegate.readPassword();\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public void flush() {\n+        delegate.flush();\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public Charset charset() {\n+        return delegate.charset();\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/io\/ProxyingConsole.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -2133,0 +2133,2 @@\n+    private static InputStream initIn = null;\n+\n@@ -2176,1 +2178,2 @@\n-        setIn0(new BufferedInputStream(fdIn));\n+        initIn = new BufferedInputStream(fdIn);\n+        setIn0(initIn);\n@@ -2487,0 +2490,4 @@\n+            public InputStream initialSystemIn() {\n+                return initIn;\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.io.InputStream;\n@@ -365,0 +366,6 @@\n+    \/**\n+     * Returns the initial `System.in` to determine if it is replaced\n+     * with `System.setIn(newIn)` method\n+     *\/\n+    InputStream initialSystemIn();\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.io;\n+\n+import java.io.PrintWriter;\n+import java.io.Reader;\n+import java.nio.charset.Charset;\n+\n+\/**\n+ * Delegate interface for custom Console implementations.\n+ * Methods defined here are duplicating ones in Console class.\n+ * Providers should implement jdk.internal.io.JdkConsoleProvider\n+ * to instantiate an implementation of this interface.\n+ *\/\n+public interface JdkConsole {\n+    PrintWriter writer();\n+    Reader reader();\n+    JdkConsole format(String fmt, Object ...args);\n+    JdkConsole printf(String format, Object ... args);\n+    String readLine(String fmt, Object ... args);\n+    String readLine();\n+    char[] readPassword(String fmt, Object ... args);\n+    char[] readPassword();\n+    void flush();\n+    Charset charset();\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsole.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.io;\n+\n+\/**\n+ * Service provider interface for JdkConsole implementations.\n+ * The provider used for instantiating JdkConsole instance can be\n+ * specified with the system property \"jdk.console\", whose value\n+ * designates the module name of the implementation, and which defaults\n+ * to \"jdk.internal.le\" (jline). If no providers is available,\n+ * or instantiation failed, java.base built-in Console implementation\n+ * is used.\n+ *\/\n+public interface JdkConsoleProvider {\n+    \/**\n+     * The default provider of JdkConsole.\n+     *\/\n+    String DEFAULT_PROVIDER = \"jdk.internal.le\";\n+\n+    \/**\n+     * {@return the Console instance, or {@code null} if not available}\n+     * @param isTTY indicates if the jvm is attached to a terminal\n+     *\/\n+    JdkConsole console(boolean isTTY);\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsoleProvider.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -174,0 +174,3 @@\n+    exports jdk.internal.io to\n+        jdk.internal.le,\n+        jdk.jshell;\n@@ -406,0 +409,1 @@\n+    uses jdk.internal.io.JdkConsoleProvider;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.access.SharedSecrets;\n@@ -54,1 +55,1 @@\n-            \/\/ Use the new java.io.Console class\n+            \/\/ Only use Console if `in` is the initial System.in\n@@ -56,1 +57,3 @@\n-            if (!isEchoOn && in == System.in && ((con = System.console()) != null)) {\n+            if (!isEchoOn &&\n+                    in == SharedSecrets.getJavaLangAccess().initialSystemIn() &&\n+                    ((con = System.console()) != null)) {\n@@ -58,1 +61,1 @@\n-                \/\/ readPassword returns \"\" if you just print ENTER,\n+                \/\/ readPassword returns \"\" if you just press ENTER with the built-in Console,\n@@ -60,1 +63,1 @@\n-                if (consoleEntered != null && consoleEntered.length == 0) {\n+                if (consoleEntered == null || consoleEntered.length == 0) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Password.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.org.jline;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Reader;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.Charset;\n+\n+import jdk.internal.io.JdkConsole;\n+import jdk.internal.io.JdkConsoleProvider;\n+import jdk.internal.org.jline.reader.EndOfFileException;\n+import jdk.internal.org.jline.reader.LineReader;\n+import jdk.internal.org.jline.reader.LineReaderBuilder;\n+import jdk.internal.org.jline.terminal.Terminal;\n+import jdk.internal.org.jline.terminal.TerminalBuilder;\n+\n+\/**\n+ * JdkConsole\/Provider implementations for jline\n+ *\/\n+public class JdkConsoleProviderImpl implements JdkConsoleProvider {\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    public JdkConsole console(boolean isTTY) {\n+        return new JdkConsoleImpl();\n+    }\n+\n+    \/**\n+     * An implementation of JdkConsole, which act as a delegate for the\n+     * public Console class.\n+     *\/\n+    public static class JdkConsoleImpl implements JdkConsole {\n+        public PrintWriter writer() {\n+            return terminal.writer();\n+        }\n+\n+        public Reader reader() {\n+            return terminal.reader();\n+        }\n+\n+        public synchronized JdkConsole format(String fmt, Object ...args) {\n+            writer().format(fmt, args).flush();\n+            return this;\n+        }\n+\n+        public JdkConsole printf(String format, Object ... args) {\n+            return format(format, args);\n+        }\n+\n+        public synchronized String readLine(String fmt, Object ... args) {\n+            try {\n+                return jline.readLine(fmt.formatted(args));\n+            } catch (EndOfFileException eofe) {\n+                return null;\n+            }\n+        }\n+\n+        public String readLine() {\n+            return readLine(\"\");\n+        }\n+\n+        public synchronized char[] readPassword(String fmt, Object ... args) {\n+            try {\n+                return jline.readLine(fmt.formatted(args), '\\0').toCharArray();\n+            } catch (EndOfFileException eofe) {\n+                return null;\n+            }\n+        }\n+\n+        public char[] readPassword() {\n+            return readPassword(\"\");\n+        }\n+\n+        public void flush() {\n+            terminal.flush();\n+        }\n+\n+        public Charset charset() {\n+            return terminal.encoding();\n+        }\n+\n+        private final LineReader jline;\n+        private final Terminal terminal;\n+\n+        public JdkConsoleImpl() {\n+            try {\n+                terminal = TerminalBuilder.builder().build();\n+                jline = LineReaderBuilder.builder().terminal(terminal).build();\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(ioe);\n+            }\n+        }\n+    }\n+}\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/JdkConsoleProviderImpl.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,3 @@\n+    \/\/ Console\n+    provides jdk.internal.io.JdkConsoleProvider with\n+            jdk.internal.org.jline.JdkConsoleProviderImpl;\n","filename":"src\/jdk.internal.le\/share\/classes\/module-info.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}