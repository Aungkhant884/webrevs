{"files":[{"patch":"@@ -42,1 +42,1 @@\n- * #getSupportedAnnotationTypes annotation types}, and {@linkplain\n+ * #getSupportedAnnotationTypes annotation interfaces}, and {@linkplain\n@@ -101,1 +101,1 @@\n-     * @return the names of the annotation types supported by this\n+     * @return the names of the annotation interfaces supported by this\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/AbstractProcessor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n- * originating elements are the types or packages (representing {@code\n+ * originating elements are the classes or interfaces or packages (representing {@code\n@@ -110,1 +110,1 @@\n- * existing type, like {@code java.lang.Object}.  Likewise, the\n+ * existing class or interface, like {@code java.lang.Object}.  Likewise, the\n@@ -117,1 +117,1 @@\n- * environment is configured so that that type is accessible.\n+ * environment is configured so that that class or interface is accessible.\n@@ -136,1 +136,1 @@\n-     * writing to it. A source file for a type, or a package can\n+     * writing to it. A source file for a class, interface, or a package can\n@@ -145,1 +145,1 @@\n-     * If more than one type is being declared in a single file (that\n+     * If more than one class or interface is being declared in a single file (that\n@@ -147,1 +147,1 @@\n-     * correspond to the name of the principal top-level type (the\n+     * correspond to the name of the principal top-level class or interface (the\n@@ -158,1 +158,1 @@\n-     * example, to create a source file for type {@code a.B} in module\n+     * example, to create a source file for class {@code a.B} in module\n@@ -197,1 +197,1 @@\n-     * @param name  canonical (fully qualified) name of the principal type\n+     * @param name  canonical (fully qualified) name of the principal class or interface\n@@ -200,1 +200,1 @@\n-     * @param originatingElements type or package or module elements causally\n+     * @param originatingElements class or interface or package or module elements causally\n@@ -205,1 +205,1 @@\n-     * created, the same type has already been created, the name is\n+     * created, the same class or interface has already been created, the name is\n@@ -218,1 +218,1 @@\n-     * writing to it. A class file for a type, or a package can\n+     * writing to it. A class file for a class, interface, or a package can\n@@ -234,1 +234,1 @@\n-     * example, to create a class file for type {@code a.B} in module\n+     * example, to create a class file for class {@code a.B} in module\n@@ -262,1 +262,1 @@\n-     * @param name binary name of the type being written or a package name followed by\n+     * @param name binary name of the class or interface being written or a package name followed by\n@@ -264,1 +264,1 @@\n-     * @param originatingElements type or package or module elements causally\n+     * @param originatingElements class or interface or package or module elements causally\n@@ -269,2 +269,2 @@\n-     * created, the same type has already been created, the name is\n-     * not valid for a type, if the target module cannot be determined,\n+     * created, the same class or interface has already been created, the name is\n+     * not valid for a class or interface, if the target module cannot be determined,\n@@ -333,1 +333,1 @@\n-     * @param originatingElements type or package or module elements causally\n+     * @param originatingElements class or interface or package or module elements causally\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/Filer.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n- * creating multiple files corresponding to the same type or package, and not\n- * creating files for types with invalid names.\n+ * creating multiple files corresponding to the same class or interface or package, and not\n+ * creating files for classes or interfaces with invalid names.\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/FilerException.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n- * of the types of the annotations <em>{@linkplain AnnotatedConstruct present}<\/em>\n+ * of the interfaces of the annotations <em>{@linkplain AnnotatedConstruct present}<\/em>\n@@ -96,1 +96,1 @@\n- * #getSupportedAnnotationTypes annotation types a processor\n+ * #getSupportedAnnotationTypes annotation interfaces a processor\n@@ -98,2 +98,2 @@\n- * claims the annotation types it processes}.  A processor will be asked to\n- * process a subset of the annotation types it supports, possibly an\n+ * claims the annotation interfaces it processes}.  A processor will be asked to\n+ * process a subset of the annotation interfaces it supports, possibly an\n@@ -102,1 +102,1 @@\n- * For a given round, the tool computes the set of annotation types\n+ * For a given round, the tool computes the set of annotation interfaces\n@@ -104,3 +104,3 @@\n- * If there is at least one annotation type present, then as\n- * processors claim annotation types, they are removed from the set of\n- * unmatched annotation types.  When the set is empty or no more\n+ * If there is at least one annotation interface present, then as\n+ * processors claim annotation interfaces, they are removed from the set of\n+ * unmatched annotation interfaces.  When the set is empty or no more\n@@ -108,1 +108,1 @@\n- * there are no annotation types present, annotation processing still\n+ * there are no annotation interfaces present, annotation processing still\n@@ -110,2 +110,2 @@\n- * processing all annotation types, {@code \"*\"}, can claim the (empty)\n- * set of annotation types.\n+ * processing all annotation interfaces, {@code \"*\"}, can claim the (empty)\n+ * set of annotation interfaces.\n@@ -113,2 +113,2 @@\n- * <p>An annotation type is considered present if there is at least\n- * one annotation of that type present on an element enclosed within\n+ * <p>An annotation interface is considered present if there is at least\n+ * one annotation of that interface present on an element enclosed within\n@@ -121,1 +121,1 @@\n- * enclose the top-level types within that package. (A root element\n+ * enclose the top-level classes and interfaces within that package. (A root element\n@@ -131,1 +131,1 @@\n- * an annotation type is present.\n+ * an annotation interface is present.\n@@ -144,1 +144,1 @@\n- * java.lang.annotation.Repeatable repeatable annotation types},\n+ * java.lang.annotation.Repeatable repeatable annotation interfaces},\n@@ -146,2 +146,2 @@\n- * type and its containing annotation type in the set of {@linkplain\n- * #getSupportedAnnotationTypes() supported annotation types} of a\n+ * interface and its containing annotation interface in the set of {@linkplain\n+ * #getSupportedAnnotationTypes() supported annotation interfaces} of a\n@@ -243,1 +243,1 @@\n-     * Returns the names of the annotation types supported by this\n+     * Returns the names of the annotation interfaces supported by this\n@@ -245,1 +245,1 @@\n-     * (fully qualified) name of a supported annotation type.\n+     * (fully qualified) name of a supported annotation interface.\n@@ -247,1 +247,1 @@\n-     * representing the set of all annotation types with canonical\n+     * representing the set of all annotation interfaces with canonical\n@@ -250,1 +250,1 @@\n-     * In either of those cases, the name of the annotation type can\n+     * In either of those cases, the name of the annotation interface can\n@@ -253,1 +253,1 @@\n-     * \"a.B\"}, this can include multiple annotation types named {@code\n+     * \"a.B\"}, this can include multiple annotation interfaces named {@code\n@@ -262,1 +262,1 @@\n-     * source version} without modules, then the annotation types with\n+     * source version} without modules, then the annotation interfaces with\n@@ -266,1 +266,1 @@\n-     * annotation types, including the empty set.  Note that a\n+     * annotation interfaces, including the empty set.  Note that a\n@@ -294,1 +294,1 @@\n-     * describing their supported annotation types. The method {@link\n+     * describing their supported annotation interfaces. The method {@link\n@@ -300,1 +300,1 @@\n-     * @return the names of the annotation types supported by this processor\n+     * @return the names of the annotation interfaces supported by this processor\n@@ -325,1 +325,1 @@\n-     * Processes a set of annotation types on type elements\n+     * Processes a set of annotation interfaces on type elements\n@@ -327,2 +327,2 @@\n-     * these annotation types are claimed by this processor.  If {@code\n-     * true} is returned, the annotation types are claimed and subsequent\n+     * these annotation interfaces are claimed by this processor.  If {@code\n+     * true} is returned, the annotation interfaces are claimed and subsequent\n@@ -330,1 +330,1 @@\n-     * is returned, the annotation types are unclaimed and subsequent\n+     * is returned, the annotation interfaces are unclaimed and subsequent\n@@ -339,1 +339,1 @@\n-     * @param annotations the annotation types requested to be processed\n+     * @param annotations the annotation interfaces requested to be processed\n@@ -341,1 +341,1 @@\n-     * @return whether or not the set of annotation types are claimed by this processor\n+     * @return whether or not the set of annotation interfaces are claimed by this processor\n@@ -384,1 +384,1 @@\n-    * for this annotation type, a list of all such primes in the\n+    * for this annotation interface, a list of all such primes in the\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/Processor.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * An annotation used to indicate what annotation types an annotation\n+ * An annotation used to indicate what annotation interfaces an annotation\n@@ -51,1 +51,1 @@\n-     * {@return the names of the supported annotation types}\n+     * {@return the names of the supported annotation interfaces}\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/SupportedAnnotationTypes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * each element of an annotation type.\n+ * each element of an annotation interface.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/AnnotationMirror.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * Represents a value of an annotation type element.\n+ * Represents a value of an annotation interface element.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/AnnotationValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * A visitor of the values of annotation type elements, using a\n+ * A visitor of the values of annotation interface elements, using a\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/AnnotationValueVisitor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-     * name of a generic type does not include any reference to its\n+     * name of a generic class or interface does not include any reference to its\n@@ -132,1 +132,1 @@\n-     * For example, the simple name of the type element {@code\n+     * For example, the simple name of the type element representing {@code\n@@ -169,1 +169,1 @@\n-     * top-level type}, its package is returned.\n+     * top-level class or interface}, its package is returned.\n@@ -187,1 +187,1 @@\n-     * {@linkplain TypeElement the type} which declares the\n+     * {@linkplain TypeElement the record class} which declares the\n@@ -207,1 +207,1 @@\n-     * constructors, record components, and member types that it directly declares.\n+     * constructors, record components, and member classes and interfaces that it directly declares.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/Element.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    \/** An enum type. *\/\n+    \/** An enum class. *\/\n@@ -55,1 +55,1 @@\n-    \/** An annotation type. *\/\n+    \/** An annotation interface. (Formerly known as an annotation type.) *\/\n@@ -112,1 +112,1 @@\n-     * A record type.\n+     * A record class.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/ElementKind.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -126,2 +126,2 @@\n-     * type element.  Returns {@code null} if this method is not an\n-     * annotation type element, or if it is an annotation type element\n+     * interface element.  Returns {@code null} if this method is not an\n+     * annotation  interface element, or if it is an annotation interface element\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/ExecutableElement.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-     * A top-level type, not contained within another type.\n+     * A top-level class or interface, not contained within another class or interface.\n@@ -91,1 +91,1 @@\n-     * A type that is a named member of another type.\n+     * A class or interface that is a named member of another class or interface.\n@@ -97,1 +97,1 @@\n-     * A named type declared within a construct other than a type.\n+     * A named class or interface declared within a construct other than a class or interface.\n@@ -103,1 +103,1 @@\n-     * A type without a name.\n+     * A class without a name.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/NestingKind.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-     * The enclosing element of a record component is the type\n+     * The enclosing element of a record component is the record class\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/RecordComponentElement.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n- * to information about the type and its members.  Note that an enum\n- * type and a record type are kinds of classes and an annotation type is a kind of\n+ * to information about the class or interface and its members.  Note that an enum\n+ * class and a record class are specialized kinds of classes and an annotation interface is a specialized kind of\n@@ -63,1 +63,1 @@\n-     * Returns the type defined by this type element, returning the\n+     * Returns the type defined by this class or interface element, returning the\n@@ -86,1 +86,1 @@\n-     * and member types that are directly declared in this class or\n+     * and member classes and interfaces that are directly declared in this class or\n@@ -92,1 +92,1 @@\n-     * an enum type.\n+     * an enum class.\n@@ -98,2 +98,2 @@\n-     * originating source of information about the type.  For example,\n-     * if the information about the type is originating from a source\n+     * originating source of information about the class or interface.  For example,\n+     * if the information about the class or interface is originating from a source\n@@ -114,1 +114,1 @@\n-     * Returns the <i>nesting kind<\/i> of this type element.\n+     * Returns the <i>nesting kind<\/i> of this class or interface element.\n@@ -116,1 +116,1 @@\n-     * @return the nesting kind of this type element\n+     * @return the nesting kind of this class or interface element\n@@ -121,1 +121,1 @@\n-     * Returns the fully qualified name of this type element.  More\n+     * Returns the fully qualified name of this class or interface element.  More\n@@ -126,1 +126,1 @@\n-     * <p>The name of a generic type does not include any reference\n+     * <p>The name of a generic class or interface does not include any reference\n@@ -130,1 +130,1 @@\n-     * Nested types use \"{@code .}\" as a separator, as in\n+     * Nested classes and interfaces use \"{@code .}\" as a separator, as in\n@@ -142,1 +142,1 @@\n-     * Returns the simple name of this type element.\n+     * Returns the simple name of this class or interface element.\n@@ -155,2 +155,2 @@\n-     * Returns the direct superclass of this type element.\n-     * If this type element represents an interface or the class\n+     * Returns the direct superclass of this class or interface element.\n+     * If this class or interface element represents an interface or the class\n@@ -174,1 +174,1 @@\n-     * Returns the formal type parameters of this type element\n+     * Returns the formal type parameters of this class or interface element\n@@ -183,1 +183,1 @@\n-     * Returns the record components of this type element in\n+     * Returns the record components of this class or interface element in\n@@ -205,1 +205,1 @@\n-     * Returns the permitted classes of this type element in\n+     * Returns the permitted classes of this class or interface element in\n@@ -222,1 +222,1 @@\n-     * Returns the package of a top-level type and returns the\n+     * Returns the package of a top-level class or interface and returns the\n@@ -224,1 +224,1 @@\n-     * NestingKind#isNested nested} type.\n+     * NestingKind#isNested nested} class or interface.\n@@ -226,2 +226,2 @@\n-     * @return the package of a top-level type, the immediately\n-     * lexically enclosing element for a nested type\n+     * @return the package of a top-level class or interface, the immediately\n+     * lexically enclosing element for a nested class or interface\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/TypeElement.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n- * new types, a model may or may not be provided as a quality of\n+ * new classes or interfaces, a model may or may not be provided as a quality of\n@@ -90,1 +90,1 @@\n- * new RuntimeException();\"}.  If a program refers to a missing type Xyz,\n+ * new RuntimeException();\"}.  If a program refers to a missing class or interface Xyz,\n@@ -92,1 +92,1 @@\n- * declaration of type Xyz were assumed to be {@code \"class Xyz {}\"},\n+ * declaration of class or interface Xyz were assumed to be {@code \"class Xyz {}\"},\n@@ -94,1 +94,1 @@\n- * \"@interface Xyz {}\"}, or {@code \"record Xyz {}\"}. If a program refers to a missing type {@code\n+ * \"@interface Xyz {}\"}, or {@code \"record Xyz {}\"}. If a program refers to a missing class or interface {@code\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/package-info.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -169,1 +169,1 @@\n-     * {@return a list of types in {@code elements}}\n+     * {@return a list of classes and interfaces in {@code elements}}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/ElementFilter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -339,1 +339,1 @@\n-     * type.\n+     * interface.\n@@ -426,1 +426,1 @@\n-         * multiple annotations of a repeatable annotation type.\n+         * multiple annotations of a repeatable annotation interface.\n@@ -483,1 +483,1 @@\n-     * The package of a top-level type is its {@linkplain\n+     * The package of a top-level class or interface is its {@linkplain\n@@ -562,1 +562,1 @@\n-     * Tests whether one method, as a member of a given type,\n+     * Tests whether one method, as a member of a given class or interface,\n@@ -581,2 +581,2 @@\n-     * in which a method in type {@code A} does not override a\n-     * like-named method in type {@code B}:\n+     * in which a method in class {@code A} does not override a\n+     * like-named method in interface {@code B}:\n@@ -594,1 +594,1 @@\n-     * When viewed as a member of a third type {@code C}, however,\n+     * When viewed as a member of a third class {@code C}, however,\n@@ -606,1 +606,1 @@\n-     * @param type   the type of which the first method is a member\n+     * @param type   the class or interface of which the first method is a member\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/Elements.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}