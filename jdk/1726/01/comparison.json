{"files":[{"patch":"@@ -42,3 +42,3 @@\n- * #getSupportedAnnotationTypes annotation types}, and {@linkplain\n- * #getSupportedSourceVersion source version} supported by its\n- * subtypes.\n+ * #getSupportedAnnotationTypes annotation interfaces}, and\n+ * {@linkplain #getSupportedSourceVersion source version} supported by\n+ * its subtypes.\n@@ -101,2 +101,2 @@\n-     * @return the names of the annotation types supported by this\n-     * processor, or an empty set if none\n+     * @return the names of the annotation interfaces supported by\n+     * this processor, or an empty set if none\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/AbstractProcessor.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -69,3 +69,3 @@\n- * originating elements are the types or packages (representing {@code\n- * package-info} files) or modules (representing {@code\n- * module-info} files) which caused an annotation processor to\n+ * originating elements are the classes or interfaces or packages\n+ * (representing {@code package-info} files) or modules (representing\n+ * {@code module-info} files) which caused an annotation processor to\n@@ -110,1 +110,1 @@\n- * existing type, like {@code java.lang.Object}.  Likewise, the\n+ * existing class or interface, like {@code java.lang.Object}.  Likewise, the\n@@ -116,2 +116,3 @@\n- * including a {@link javax.annotation.processing.Generated} annotation if the\n- * environment is configured so that that type is accessible.\n+ * including a {@link javax.annotation.processing.Generated}\n+ * annotation if the environment is configured so that that class or\n+ * interface is accessible.\n@@ -136,2 +137,2 @@\n-     * writing to it. A source file for a type, or a package can\n-     * be created.\n+     * writing to it. A source file for a class, interface, or a\n+     * package can be created.\n@@ -145,1 +146,1 @@\n-     * If more than one type is being declared in a single file (that\n+     * If more than one class or interface is being declared in a single file (that\n@@ -147,1 +148,1 @@\n-     * correspond to the name of the principal top-level type (the\n+     * correspond to the name of the principal top-level class or interface (the\n@@ -158,1 +159,1 @@\n-     * example, to create a source file for type {@code a.B} in module\n+     * example, to create a source file for class {@code a.B} in module\n@@ -197,1 +198,1 @@\n-     * @param name  canonical (fully qualified) name of the principal type\n+     * @param name  canonical (fully qualified) name of the principal class or interface\n@@ -200,3 +201,3 @@\n-     * @param originatingElements type or package or module elements causally\n-     * associated with the creation of this file, may be elided or\n-     * {@code null}\n+     * @param originatingElements class, interface, package, or module\n+     * elements causally associated with the creation of this file,\n+     * may be elided or {@code null}\n@@ -205,1 +206,1 @@\n-     * created, the same type has already been created, the name is\n+     * created, the same class or interface has already been created, the name is\n@@ -218,1 +219,1 @@\n-     * writing to it. A class file for a type, or a package can\n+     * writing to it. A class file for a class, interface, or a package can\n@@ -234,1 +235,1 @@\n-     * example, to create a class file for type {@code a.B} in module\n+     * example, to create a class file for class {@code a.B} in module\n@@ -262,5 +263,6 @@\n-     * @param name binary name of the type being written or a package name followed by\n-     *          {@code \".package-info\"} for a package information file\n-     * @param originatingElements type or package or module elements causally\n-     * associated with the creation of this file, may be elided or\n-     * {@code null}\n+     * @param name binary name of the class or interface being written\n+     * or a package name followed by {@code \".package-info\"} for a\n+     * package information file\n+     * @param originatingElements class or interface or package or\n+     * module elements causally associated with the creation of this\n+     * file, may be elided or {@code null}\n@@ -269,2 +271,2 @@\n-     * created, the same type has already been created, the name is\n-     * not valid for a type, if the target module cannot be determined,\n+     * created, the same class or interface has already been created, the name is\n+     * not valid for a class or interface, if the target module cannot be determined,\n@@ -333,2 +335,3 @@\n-     * @param originatingElements type or package or module elements causally\n-     * associated with the creation of this file, may be elided or\n+     * @param originatingElements class or interface or package or\n+     * module elements causally associated with the creation of this\n+     * file, may be elided or\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/Filer.java","additions":30,"deletions":27,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,3 @@\n- * creating multiple files corresponding to the same type or package, and not\n- * creating files for types with invalid names.\n+ * creating multiple files corresponding to the same class or\n+ * interface or package, and not creating files for classes or\n+ * interfaces with invalid names.\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/FilerException.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -93,2 +93,2 @@\n- * of the types of the annotations <em>{@linkplain AnnotatedConstruct present}<\/em>\n- * on the {@linkplain\n+ * of the interfaces of the annotations <em>{@linkplain\n+ * AnnotatedConstruct present}<\/em> on the {@linkplain\n@@ -96,1 +96,1 @@\n- * #getSupportedAnnotationTypes annotation types a processor\n+ * #getSupportedAnnotationTypes annotation interfaces a processor\n@@ -98,17 +98,17 @@\n- * claims the annotation types it processes}.  A processor will be asked to\n- * process a subset of the annotation types it supports, possibly an\n- * empty set.\n- *\n- * For a given round, the tool computes the set of annotation types\n- * that are present on the elements enclosed within the root elements.\n- * If there is at least one annotation type present, then as\n- * processors claim annotation types, they are removed from the set of\n- * unmatched annotation types.  When the set is empty or no more\n- * processors are available, the round has run to completion.  If\n- * there are no annotation types present, annotation processing still\n- * occurs but only <i>universal processors<\/i> which support\n- * processing all annotation types, {@code \"*\"}, can claim the (empty)\n- * set of annotation types.\n- *\n- * <p>An annotation type is considered present if there is at least\n- * one annotation of that type present on an element enclosed within\n+ * claims the annotation interfaces it processes}.  A processor will\n+ * be asked to process a subset of the annotation interfaces it\n+ * supports, possibly an empty set.\n+ *\n+ * For a given round, the tool computes the set of annotation\n+ * interfaces that are present on the elements enclosed within the\n+ * root elements.  If there is at least one annotation interface\n+ * present, then as processors claim annotation interfaces, they are\n+ * removed from the set of unmatched annotation interfaces.  When the\n+ * set is empty or no more processors are available, the round has run\n+ * to completion.  If there are no annotation interfaces present,\n+ * annotation processing still occurs but only <i>universal\n+ * processors<\/i> which support processing all annotation interfaces,\n+ * {@code \"*\"}, can claim the (empty) set of annotation interfaces.\n+ *\n+ * <p>An annotation interface is considered present if there is at least\n+ * one annotation of that interface present on an element enclosed within\n@@ -121,6 +121,6 @@\n- * enclose the top-level types within that package. (A root element\n- * representing a package is created when a {@code package-info} file\n- * is processed.) Likewise, for this purpose, a module element is\n- * <em>not<\/em> considered to enclose the packages within that\n- * module. (A root element representing a module is created when a\n- * {@code module-info} file is processed.)\n+ * enclose the top-level classes and interfaces within that\n+ * package. (A root element representing a package is created when a\n+ * {@code package-info} file is processed.) Likewise, for this\n+ * purpose, a module element is <em>not<\/em> considered to enclose the\n+ * packages within that module. (A root element representing a module\n+ * is created when a {@code module-info} file is processed.)\n@@ -131,1 +131,1 @@\n- * an annotation type is present.\n+ * an annotation interface is present.\n@@ -144,1 +144,1 @@\n- * java.lang.annotation.Repeatable repeatable annotation types},\n+ * java.lang.annotation.Repeatable repeatable annotation interfaces},\n@@ -146,2 +146,2 @@\n- * type and its containing annotation type in the set of {@linkplain\n- * #getSupportedAnnotationTypes() supported annotation types} of a\n+ * interface and its containing annotation interface in the set of {@linkplain\n+ * #getSupportedAnnotationTypes() supported annotation interfaces} of a\n@@ -243,1 +243,1 @@\n-     * Returns the names of the annotation types supported by this\n+     * Returns the names of the annotation interfaces supported by this\n@@ -245,1 +245,1 @@\n-     * (fully qualified) name of a supported annotation type.\n+     * (fully qualified) name of a supported annotation interface.\n@@ -247,1 +247,1 @@\n-     * representing the set of all annotation types with canonical\n+     * representing the set of all annotation interfaces with canonical\n@@ -250,1 +250,1 @@\n-     * In either of those cases, the name of the annotation type can\n+     * In either of those cases, the name of the annotation interface can\n@@ -253,1 +253,1 @@\n-     * \"a.B\"}, this can include multiple annotation types named {@code\n+     * \"a.B\"}, this can include multiple annotation interfaces named {@code\n@@ -262,1 +262,1 @@\n-     * source version} without modules, then the annotation types with\n+     * source version} without modules, then the annotation interfaces with\n@@ -266,1 +266,1 @@\n-     * annotation types, including the empty set.  Note that a\n+     * annotation interfaces, including the empty set.  Note that a\n@@ -294,1 +294,1 @@\n-     * describing their supported annotation types. The method {@link\n+     * describing their supported annotation interfaces. The method {@link\n@@ -300,1 +300,1 @@\n-     * @return the names of the annotation types supported by this processor\n+     * @return the names of the annotation interfaces supported by this processor\n@@ -325,1 +325,1 @@\n-     * Processes a set of annotation types on type elements\n+     * Processes a set of annotation interfaces on type elements\n@@ -327,2 +327,2 @@\n-     * these annotation types are claimed by this processor.  If {@code\n-     * true} is returned, the annotation types are claimed and subsequent\n+     * these annotation interfaces are claimed by this processor.  If {@code\n+     * true} is returned, the annotation interfaces are claimed and subsequent\n@@ -330,1 +330,1 @@\n-     * is returned, the annotation types are unclaimed and subsequent\n+     * is returned, the annotation interfaces are unclaimed and subsequent\n@@ -339,1 +339,1 @@\n-     * @param annotations the annotation types requested to be processed\n+     * @param annotations the annotation interfaces requested to be processed\n@@ -341,1 +341,1 @@\n-     * @return whether or not the set of annotation types are claimed by this processor\n+     * @return whether or not the set of annotation interfaces are claimed by this processor\n@@ -384,1 +384,1 @@\n-    * for this annotation type, a list of all such primes in the\n+    * for this annotation interface, a list of all such primes in the\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/Processor.java","additions":46,"deletions":46,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n- * An annotation used to indicate what annotation types an annotation\n- * processor supports.  The {@link\n+ * An annotation used to indicate what annotation interfaces an\n+ * annotation processor supports.  The {@link\n@@ -51,1 +51,1 @@\n-     * {@return the names of the supported annotation types}\n+     * {@return the names of the supported annotation interfaces}\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/SupportedAnnotationTypes.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * each element of an annotation type.\n+ * each element of an annotation interface.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/AnnotationMirror.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * Represents a value of an annotation type element.\n+ * Represents a value of an annotation interface element.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/AnnotationValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * A visitor of the values of annotation type elements, using a\n+ * A visitor of the values of annotation interface elements, using a\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/AnnotationValueVisitor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -128,3 +128,3 @@\n-     * {@return the simple (unqualified) name of this element}  The\n-     * name of a generic type does not include any reference to its\n-     * formal type parameters.\n+     * {@return the simple (unqualified) name of this element} The\n+     * name of a generic class or interface does not include any\n+     * reference to its formal type parameters.\n@@ -132,2 +132,2 @@\n-     * For example, the simple name of the type element {@code\n-     * java.util.Set<E>} is {@code \"Set\"}.\n+     * For example, the simple name of the type element representing\n+     * {@code java.util.Set<E>} is {@code \"Set\"}.\n@@ -169,1 +169,1 @@\n-     * top-level type}, its package is returned.\n+     * top-level class or interface}, its package is returned.\n@@ -187,1 +187,1 @@\n-     * {@linkplain TypeElement the type} which declares the\n+     * {@linkplain TypeElement the record class} which declares the\n@@ -207,1 +207,1 @@\n-     * constructors, record components, and member types that it directly declares.\n+     * constructors, record components, and member classes and interfaces that it directly declares.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/Element.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-    \/** An enum type. *\/\n+    \/** An enum class. *\/\n@@ -55,1 +55,1 @@\n-    \/** An annotation type. *\/\n+    \/** An annotation interface. (Formerly known as an annotation type.) *\/\n@@ -112,1 +112,1 @@\n-     * A record type.\n+     * A record class.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/ElementKind.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -126,3 +126,3 @@\n-     * type element.  Returns {@code null} if this method is not an\n-     * annotation type element, or if it is an annotation type element\n-     * with no default value.\n+     * interface element.  Returns {@code null} if this method is not\n+     * an annotation interface element, or if it is an annotation\n+     * interface element with no default value.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/ExecutableElement.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,1 +86,2 @@\n-     * A top-level type, not contained within another type.\n+     * A top-level class or interface, not contained within another\n+     * class or interface.\n@@ -91,1 +92,2 @@\n-     * A type that is a named member of another type.\n+     * A class or interface that is a named member of another class or\n+     * interface.\n@@ -97,1 +99,2 @@\n-     * A named type declared within a construct other than a type.\n+     * A named class or interface declared within a construct other\n+     * than a class or interface.\n@@ -103,1 +106,1 @@\n-     * A type without a name.\n+     * A class without a name.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/NestingKind.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-     * The enclosing element of a record component is the type\n+     * The enclosing element of a record component is the record class\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/RecordComponentElement.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,2 +34,3 @@\n- * to information about the type and its members.  Note that an enum\n- * type and a record type are kinds of classes and an annotation type is a kind of\n+ * to information about the class or interface and its members.  Note\n+ * that an enum class and a record class are specialized kinds of\n+ * classes and an annotation interface is a specialized kind of\n@@ -63,2 +64,3 @@\n-     * Returns the type defined by this type element, returning the\n-     * <i>prototypical<\/i> type for an element representing a generic type.\n+     * Returns the type defined by this class or interface element,\n+     * returning the <i>prototypical<\/i> type for an element\n+     * representing a generic type.\n@@ -86,2 +88,2 @@\n-     * and member types that are directly declared in this class or\n-     * interface.\n+     * and member classes and interfaces that are directly declared in\n+     * this class or interface.\n@@ -92,1 +94,1 @@\n-     * an enum type.\n+     * an enum class.\n@@ -98,6 +100,6 @@\n-     * originating source of information about the type.  For example,\n-     * if the information about the type is originating from a source\n-     * file, the elements will be returned in source code order.\n-     * (However, in that case the ordering of {@linkplain\n-     * Elements.Origin#MANDATED implicitly declared} elements, such as\n-     * default constructors, is not specified.)\n+     * originating source of information about the class or interface.\n+     * For example, if the information about the class or interface is\n+     * originating from a source file, the elements will be returned\n+     * in source code order.  (However, in that case the ordering of\n+     * {@linkplain Elements.Origin#MANDATED implicitly declared}\n+     * elements, such as default constructors, is not specified.)\n@@ -114,1 +116,1 @@\n-     * Returns the <i>nesting kind<\/i> of this type element.\n+     * Returns the <i>nesting kind<\/i> of this class or interface element.\n@@ -116,1 +118,1 @@\n-     * @return the nesting kind of this type element\n+     * @return the nesting kind of this class or interface element\n@@ -121,4 +123,5 @@\n-     * Returns the fully qualified name of this type element.  More\n-     * precisely, it returns the <i>canonical<\/i> name.  For local and\n-     * anonymous classes, which do not have canonical names, an <a\n-     * href=Name.html#empty_name>empty name<\/a> is returned.\n+     * Returns the fully qualified name of this class or interface\n+     * element.  More precisely, it returns the <i>canonical<\/i> name.\n+     * For local and anonymous classes, which do not have canonical\n+     * names, an <a href=Name.html#empty_name>empty name<\/a> is\n+     * returned.\n@@ -126,1 +129,1 @@\n-     * <p>The name of a generic type does not include any reference\n+     * <p>The name of a generic class or interface does not include any reference\n@@ -130,1 +133,1 @@\n-     * Nested types use \"{@code .}\" as a separator, as in\n+     * Nested classes and interfaces use \"{@code .}\" as a separator, as in\n@@ -142,1 +145,1 @@\n-     * Returns the simple name of this type element.\n+     * Returns the simple name of this class or interface element.\n@@ -155,2 +158,2 @@\n-     * Returns the direct superclass of this type element.\n-     * If this type element represents an interface or the class\n+     * Returns the direct superclass of this class or interface element.\n+     * If this class or interface element represents an interface or the class\n@@ -174,1 +177,1 @@\n-     * Returns the formal type parameters of this type element\n+     * Returns the formal type parameters of this class or interface element\n@@ -183,2 +186,2 @@\n-     * Returns the record components of this type element in\n-     * declaration order.\n+     * Returns the record components of this class or interface\n+     * element in declaration order.\n@@ -205,2 +208,2 @@\n-     * Returns the permitted classes of this type element in\n-     * declaration order.\n+     * Returns the permitted classes of this class or interface\n+     * element in declaration order.\n@@ -222,3 +225,3 @@\n-     * Returns the package of a top-level type and returns the\n-     * immediately lexically enclosing element for a {@linkplain\n-     * NestingKind#isNested nested} type.\n+     * Returns the package of a top-level class or interface and\n+     * returns the immediately lexically enclosing element for a\n+     * {@linkplain NestingKind#isNested nested} class or interface.\n@@ -226,2 +229,2 @@\n-     * @return the package of a top-level type, the immediately\n-     * lexically enclosing element for a nested type\n+     * @return the package of a top-level class or interface, the immediately\n+     * lexically enclosing element for a nested class or interface\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/TypeElement.java","additions":37,"deletions":34,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -53,1 +53,3 @@\n- * Names of {@linkplain javax.lang.model.element.ExecutableElement#getParameters() parameters} may not be recoverable from class files.\n+ * Names of {@linkplain\n+ * javax.lang.model.element.ExecutableElement#getParameters()\n+ * parameters} may not be recoverable from class files.\n@@ -85,14 +87,14 @@\n- * new types, a model may or may not be provided as a quality of\n- * implementation issue.\n- * If a program is syntactically valid but erroneous in some other\n- * fashion, any returned model must have no less information than if\n- * all the method bodies in the program were replaced by {@code \"throw\n- * new RuntimeException();\"}.  If a program refers to a missing type Xyz,\n- * the returned model must contain no less information than if the\n- * declaration of type Xyz were assumed to be {@code \"class Xyz {}\"},\n- * {@code \"interface Xyz {}\"}, {@code \"enum Xyz {}\"}, {@code\n- * \"@interface Xyz {}\"}, or {@code \"record Xyz {}\"}. If a program refers to a missing type {@code\n- * Xyz<K1, ... ,Kn>}, the returned model must contain no less\n- * information than if the declaration of Xyz were assumed to be\n- * {@code \"class Xyz<T1, ... ,Tn> {}\"} or {@code \"interface Xyz<T1,\n- * ... ,Tn> {}\"}\n+ * new classes or interfaces, a model may or may not be provided as a\n+ * quality of implementation issue.  If a program is syntactically\n+ * valid but erroneous in some other fashion, any returned model must\n+ * have no less information than if all the method bodies in the\n+ * program were replaced by {@code \"throw new RuntimeException();\"}.\n+ * If a program refers to a missing class or interface Xyz, the\n+ * returned model must contain no less information than if the\n+ * declaration of class or interface Xyz were assumed to be {@code\n+ * \"class Xyz {}\"}, {@code \"interface Xyz {}\"}, {@code \"enum Xyz {}\"},\n+ * {@code \"@interface Xyz {}\"}, or {@code \"record Xyz {}\"}. If a\n+ * program refers to a missing class or interface {@code Xyz<K1,\n+ * ... ,Kn>}, the returned model must contain no less information than\n+ * if the declaration of Xyz were assumed to be {@code \"class Xyz<T1,\n+ * ... ,Tn> {}\"} or {@code \"interface Xyz<T1, ... ,Tn> {}\"}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/package-info.java","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -169,1 +169,1 @@\n-     * {@return a list of types in {@code elements}}\n+     * {@return a list of classes and interfaces in {@code elements}}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/ElementFilter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -339,1 +339,1 @@\n-     * type.\n+     * interface.\n@@ -426,1 +426,1 @@\n-         * multiple annotations of a repeatable annotation type.\n+         * multiple annotations of a repeatable annotation interface.\n@@ -483,1 +483,1 @@\n-     * The package of a top-level type is its {@linkplain\n+     * The package of a top-level class or interface is its {@linkplain\n@@ -562,1 +562,1 @@\n-     * Tests whether one method, as a member of a given type,\n+     * Tests whether one method, as a member of a given class or interface,\n@@ -581,2 +581,2 @@\n-     * in which a method in type {@code A} does not override a\n-     * like-named method in type {@code B}:\n+     * in which a method in class {@code A} does not override a\n+     * like-named method in interface {@code B}:\n@@ -594,1 +594,1 @@\n-     * When viewed as a member of a third type {@code C}, however,\n+     * When viewed as a member of a third class {@code C}, however,\n@@ -606,1 +606,1 @@\n-     * @param type   the type of which the first method is a member\n+     * @param type   the class or interface of which the first method is a member\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/Elements.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}