{"files":[{"patch":"@@ -42,3 +42,3 @@\n- * #getSupportedAnnotationTypes annotation interfaces}, and {@linkplain\n- * #getSupportedSourceVersion source version} supported by its\n- * subtypes.\n+ * #getSupportedAnnotationTypes annotation interfaces}, and\n+ * {@linkplain #getSupportedSourceVersion source version} supported by\n+ * its subtypes.\n@@ -101,2 +101,2 @@\n-     * @return the names of the annotation interfaces supported by this\n-     * processor, or an empty set if none\n+     * @return the names of the annotation interfaces supported by\n+     * this processor, or an empty set if none\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/AbstractProcessor.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -69,3 +69,3 @@\n- * originating elements are the classes or interfaces or packages (representing {@code\n- * package-info} files) or modules (representing {@code\n- * module-info} files) which caused an annotation processor to\n+ * originating elements are the classes or interfaces or packages\n+ * (representing {@code package-info} files) or modules (representing\n+ * {@code module-info} files) which caused an annotation processor to\n@@ -116,2 +116,3 @@\n- * including a {@link javax.annotation.processing.Generated} annotation if the\n- * environment is configured so that that class or interface is accessible.\n+ * including a {@link javax.annotation.processing.Generated}\n+ * annotation if the environment is configured so that that class or\n+ * interface is accessible.\n@@ -136,2 +137,2 @@\n-     * writing to it. A source file for a class, interface, or a package can\n-     * be created.\n+     * writing to it. A source file for a class, interface, or a\n+     * package can be created.\n@@ -200,3 +201,3 @@\n-     * @param originatingElements class or interface or package or module elements causally\n-     * associated with the creation of this file, may be elided or\n-     * {@code null}\n+     * @param originatingElements class, interface, package, or module\n+     * elements causally associated with the creation of this file,\n+     * may be elided or {@code null}\n@@ -262,5 +263,6 @@\n-     * @param name binary name of the class or interface being written or a package name followed by\n-     *          {@code \".package-info\"} for a package information file\n-     * @param originatingElements class or interface or package or module elements causally\n-     * associated with the creation of this file, may be elided or\n-     * {@code null}\n+     * @param name binary name of the class or interface being written\n+     * or a package name followed by {@code \".package-info\"} for a\n+     * package information file\n+     * @param originatingElements class or interface or package or\n+     * module elements causally associated with the creation of this\n+     * file, may be elided or {@code null}\n@@ -333,2 +335,3 @@\n-     * @param originatingElements class or interface or package or module elements causally\n-     * associated with the creation of this file, may be elided or\n+     * @param originatingElements class or interface or package or\n+     * module elements causally associated with the creation of this\n+     * file, may be elided or\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/Filer.java","additions":20,"deletions":17,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,3 @@\n- * creating multiple files corresponding to the same class or interface or package, and not\n- * creating files for classes or interfaces with invalid names.\n+ * creating multiple files corresponding to the same class or\n+ * interface or package, and not creating files for classes or\n+ * interfaces with invalid names.\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/FilerException.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -93,2 +93,2 @@\n- * of the interfaces of the annotations <em>{@linkplain AnnotatedConstruct present}<\/em>\n- * on the {@linkplain\n+ * of the interfaces of the annotations <em>{@linkplain\n+ * AnnotatedConstruct present}<\/em> on the {@linkplain\n@@ -98,14 +98,14 @@\n- * claims the annotation interfaces it processes}.  A processor will be asked to\n- * process a subset of the annotation interfaces it supports, possibly an\n- * empty set.\n- *\n- * For a given round, the tool computes the set of annotation interfaces\n- * that are present on the elements enclosed within the root elements.\n- * If there is at least one annotation interface present, then as\n- * processors claim annotation interfaces, they are removed from the set of\n- * unmatched annotation interfaces.  When the set is empty or no more\n- * processors are available, the round has run to completion.  If\n- * there are no annotation interfaces present, annotation processing still\n- * occurs but only <i>universal processors<\/i> which support\n- * processing all annotation interfaces, {@code \"*\"}, can claim the (empty)\n- * set of annotation interfaces.\n+ * claims the annotation interfaces it processes}.  A processor will\n+ * be asked to process a subset of the annotation interfaces it\n+ * supports, possibly an empty set.\n+ *\n+ * For a given round, the tool computes the set of annotation\n+ * interfaces that are present on the elements enclosed within the\n+ * root elements.  If there is at least one annotation interface\n+ * present, then as processors claim annotation interfaces, they are\n+ * removed from the set of unmatched annotation interfaces.  When the\n+ * set is empty or no more processors are available, the round has run\n+ * to completion.  If there are no annotation interfaces present,\n+ * annotation processing still occurs but only <i>universal\n+ * processors<\/i> which support processing all annotation interfaces,\n+ * {@code \"*\"}, can claim the (empty) set of annotation interfaces.\n@@ -121,6 +121,6 @@\n- * enclose the top-level classes and interfaces within that package. (A root element\n- * representing a package is created when a {@code package-info} file\n- * is processed.) Likewise, for this purpose, a module element is\n- * <em>not<\/em> considered to enclose the packages within that\n- * module. (A root element representing a module is created when a\n- * {@code module-info} file is processed.)\n+ * enclose the top-level classes and interfaces within that\n+ * package. (A root element representing a package is created when a\n+ * {@code package-info} file is processed.) Likewise, for this\n+ * purpose, a module element is <em>not<\/em> considered to enclose the\n+ * packages within that module. (A root element representing a module\n+ * is created when a {@code module-info} file is processed.)\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/Processor.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n- * An annotation used to indicate what annotation interfaces an annotation\n- * processor supports.  The {@link\n+ * An annotation used to indicate what annotation interfaces an\n+ * annotation processor supports.  The {@link\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/SupportedAnnotationTypes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -128,3 +128,3 @@\n-     * {@return the simple (unqualified) name of this element}  The\n-     * name of a generic class or interface does not include any reference to its\n-     * formal type parameters.\n+     * {@return the simple (unqualified) name of this element} The\n+     * name of a generic class or interface does not include any\n+     * reference to its formal type parameters.\n@@ -132,2 +132,2 @@\n-     * For example, the simple name of the type element representing {@code\n-     * java.util.Set<E>} is {@code \"Set\"}.\n+     * For example, the simple name of the type element representing\n+     * {@code java.util.Set<E>} is {@code \"Set\"}.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/Element.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/ElementKind.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -126,3 +126,3 @@\n-     * interface element.  Returns {@code null} if this method is not an\n-     * annotation  interface element, or if it is an annotation interface element\n-     * with no default value.\n+     * interface element.  Returns {@code null} if this method is not\n+     * an annotation interface element, or if it is an annotation\n+     * interface element with no default value.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/ExecutableElement.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,1 +86,2 @@\n-     * A top-level class or interface, not contained within another class or interface.\n+     * A top-level class or interface, not contained within another\n+     * class or interface.\n@@ -91,1 +92,2 @@\n-     * A class or interface that is a named member of another class or interface.\n+     * A class or interface that is a named member of another class or\n+     * interface.\n@@ -97,1 +99,2 @@\n-     * A named class or interface declared within a construct other than a class or interface.\n+     * A named class or interface declared within a construct other\n+     * than a class or interface.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/NestingKind.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -34,2 +34,3 @@\n- * to information about the class or interface and its members.  Note that an enum\n- * class and a record class are specialized kinds of classes and an annotation interface is a specialized kind of\n+ * to information about the class or interface and its members.  Note\n+ * that an enum class and a record class are specialized kinds of\n+ * classes and an annotation interface is a specialized kind of\n@@ -63,2 +64,3 @@\n-     * Returns the type defined by this class or interface element, returning the\n-     * <i>prototypical<\/i> type for an element representing a generic type.\n+     * Returns the type defined by this class or interface element,\n+     * returning the <i>prototypical<\/i> type for an element\n+     * representing a generic type.\n@@ -86,2 +88,2 @@\n-     * and member classes and interfaces that are directly declared in this class or\n-     * interface.\n+     * and member classes and interfaces that are directly declared in\n+     * this class or interface.\n@@ -98,6 +100,6 @@\n-     * originating source of information about the class or interface.  For example,\n-     * if the information about the class or interface is originating from a source\n-     * file, the elements will be returned in source code order.\n-     * (However, in that case the ordering of {@linkplain\n-     * Elements.Origin#MANDATED implicitly declared} elements, such as\n-     * default constructors, is not specified.)\n+     * originating source of information about the class or interface.\n+     * For example, if the information about the class or interface is\n+     * originating from a source file, the elements will be returned\n+     * in source code order.  (However, in that case the ordering of\n+     * {@linkplain Elements.Origin#MANDATED implicitly declared}\n+     * elements, such as default constructors, is not specified.)\n@@ -121,4 +123,5 @@\n-     * Returns the fully qualified name of this class or interface element.  More\n-     * precisely, it returns the <i>canonical<\/i> name.  For local and\n-     * anonymous classes, which do not have canonical names, an <a\n-     * href=Name.html#empty_name>empty name<\/a> is returned.\n+     * Returns the fully qualified name of this class or interface\n+     * element.  More precisely, it returns the <i>canonical<\/i> name.\n+     * For local and anonymous classes, which do not have canonical\n+     * names, an <a href=Name.html#empty_name>empty name<\/a> is\n+     * returned.\n@@ -183,2 +186,2 @@\n-     * Returns the record components of this class or interface element in\n-     * declaration order.\n+     * Returns the record components of this class or interface\n+     * element in declaration order.\n@@ -205,2 +208,2 @@\n-     * Returns the permitted classes of this class or interface element in\n-     * declaration order.\n+     * Returns the permitted classes of this class or interface\n+     * element in declaration order.\n@@ -222,3 +225,3 @@\n-     * Returns the package of a top-level class or interface and returns the\n-     * immediately lexically enclosing element for a {@linkplain\n-     * NestingKind#isNested nested} class or interface.\n+     * Returns the package of a top-level class or interface and\n+     * returns the immediately lexically enclosing element for a\n+     * {@linkplain NestingKind#isNested nested} class or interface.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/TypeElement.java","additions":26,"deletions":23,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -53,1 +53,3 @@\n- * Names of {@linkplain javax.lang.model.element.ExecutableElement#getParameters() parameters} may not be recoverable from class files.\n+ * Names of {@linkplain\n+ * javax.lang.model.element.ExecutableElement#getParameters()\n+ * parameters} may not be recoverable from class files.\n@@ -85,14 +87,14 @@\n- * new classes or interfaces, a model may or may not be provided as a quality of\n- * implementation issue.\n- * If a program is syntactically valid but erroneous in some other\n- * fashion, any returned model must have no less information than if\n- * all the method bodies in the program were replaced by {@code \"throw\n- * new RuntimeException();\"}.  If a program refers to a missing class or interface Xyz,\n- * the returned model must contain no less information than if the\n- * declaration of class or interface Xyz were assumed to be {@code \"class Xyz {}\"},\n- * {@code \"interface Xyz {}\"}, {@code \"enum Xyz {}\"}, {@code\n- * \"@interface Xyz {}\"}, or {@code \"record Xyz {}\"}. If a program refers to a missing class or interface {@code\n- * Xyz<K1, ... ,Kn>}, the returned model must contain no less\n- * information than if the declaration of Xyz were assumed to be\n- * {@code \"class Xyz<T1, ... ,Tn> {}\"} or {@code \"interface Xyz<T1,\n- * ... ,Tn> {}\"}\n+ * new classes or interfaces, a model may or may not be provided as a\n+ * quality of implementation issue.  If a program is syntactically\n+ * valid but erroneous in some other fashion, any returned model must\n+ * have no less information than if all the method bodies in the\n+ * program were replaced by {@code \"throw new RuntimeException();\"}.\n+ * If a program refers to a missing class or interface Xyz, the\n+ * returned model must contain no less information than if the\n+ * declaration of class or interface Xyz were assumed to be {@code\n+ * \"class Xyz {}\"}, {@code \"interface Xyz {}\"}, {@code \"enum Xyz {}\"},\n+ * {@code \"@interface Xyz {}\"}, or {@code \"record Xyz {}\"}. If a\n+ * program refers to a missing class or interface {@code Xyz<K1,\n+ * ... ,Kn>}, the returned model must contain no less information than\n+ * if the declaration of Xyz were assumed to be {@code \"class Xyz<T1,\n+ * ... ,Tn> {}\"} or {@code \"interface Xyz<T1, ... ,Tn> {}\"}\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/package-info.java","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"}]}