{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -296,1 +296,1 @@\n-  ((objArrayOop)array.resolve())->atomic_compare_exchange_oop(index, o, NULL);\n+  ((objArrayOop)array.resolve())->replace_if_null(index, o);\n","filename":"src\/hotspot\/share\/cds\/cdsProtectionDomain.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-oop ConstantPool::set_resolved_references_at(int index, oop new_result, oop old_result) {\n+oop ConstantPool::set_resolved_references_at(int index, oop new_result) {\n@@ -183,1 +183,1 @@\n-  return resolved_references()->atomic_compare_exchange_oop(index, new_result, old_result);\n+  return resolved_references()->replace_if_null(index, new_result);\n@@ -461,1 +461,1 @@\n-  oop result = set_resolved_references_at(obj_index, str, nullptr);\n+  oop result = set_resolved_references_at(obj_index, str);\n@@ -1175,1 +1175,1 @@\n-    oop old_result = this_cp->set_resolved_references_at(cache_index, new_result, nullptr);\n+    oop old_result = this_cp->set_resolved_references_at(cache_index, new_result);\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -240,1 +240,1 @@\n-  oop set_resolved_references_at(int index, oop new_value, oop old_value);\n+  oop set_resolved_references_at(int index, oop new_value);\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -435,1 +435,1 @@\n-    oop old_oop = cpool->set_resolved_references_at(appendix_index, appendix(), nullptr);\n+    oop old_oop = cpool->set_resolved_references_at(appendix_index, appendix());\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,1 @@\n-oop objArrayOopDesc::atomic_compare_exchange_oop(int index, oop exchange_value,\n-                                                 oop compare_value) {\n+oop objArrayOopDesc::replace_if_null(int index, oop exchange_value) {\n@@ -39,1 +38,1 @@\n-  return HeapAccess<IS_ARRAY>::oop_atomic_cmpxchg_at(as_oop(), offs, compare_value, exchange_value);\n+  return HeapAccess<IS_ARRAY>::oop_atomic_cmpxchg_at(as_oop(), offs, (oop)nullptr, exchange_value);\n","filename":"src\/hotspot\/share\/oops\/objArrayOop.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,1 +93,1 @@\n-  oop atomic_compare_exchange_oop(int index, oop exchange_value, oop compare_value);\n+  oop replace_if_null(int index, oop exchange_value);\n","filename":"src\/hotspot\/share\/oops\/objArrayOop.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}