{"files":[{"patch":"@@ -112,1 +112,1 @@\n-    result = load_reference_barrier(access.gen(), result, LIR_OprFact::addressConst(0), ShenandoahBarrierSet::AccessKind::NORMAL);\n+    result = load_reference_barrier(access.gen(), result, LIR_OprFact::addressConst(0), access.decorators());\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -228,1 +228,1 @@\n-void ShenandoahBarrierSetAssembler::load_reference_barrier(MacroAssembler* masm, Register dst, Address load_addr, ShenandoahBarrierSet::AccessKind kind) {\n+void ShenandoahBarrierSetAssembler::load_reference_barrier(MacroAssembler* masm, Register dst, Address load_addr, DecoratorSet decorators) {\n@@ -233,0 +233,6 @@\n+  bool is_strong  = ShenandoahBarrierSet::is_strong_access(decorators);\n+  bool is_weak    = ShenandoahBarrierSet::is_weak_access(decorators);\n+  bool is_phantom = ShenandoahBarrierSet::is_phantom_access(decorators);\n+  bool is_native  = ShenandoahBarrierSet::is_native_access(decorators);\n+  bool is_narrow  = LP64_ONLY(UseCompressedOops &&) !is_native;\n+\n@@ -255,1 +261,1 @@\n-  if (kind == ShenandoahBarrierSet::AccessKind::NORMAL) {\n+  if (is_strong) {\n@@ -263,16 +269,10 @@\n-  switch (kind) {\n-    case ShenandoahBarrierSet::AccessKind::NORMAL:\n-      if (UseCompressedOops) {\n-        __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_narrow));\n-      } else {\n-        __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier));\n-      }\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::WEAK:\n-      if (UseCompressedOops) {\n-        __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow));\n-      } else {\n-        __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak));\n-      }\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::NATIVE:\n+  if (is_strong) {\n+    if (is_narrow) {\n+      __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong_narrow));\n+    } else {\n+      __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong));\n+    }\n+  } else if (is_weak) {\n+    if (is_narrow) {\n+      __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow));\n+    } else {\n@@ -280,3 +280,5 @@\n-      break;\n-    default:\n-      ShouldNotReachHere();\n+    }\n+  } else {\n+    assert(is_phantom, \"only remaining strength\");\n+    assert(!is_narrow, \"phantom access cannot be narrow\");\n+    __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak));\n@@ -341,2 +343,1 @@\n-    ShenandoahBarrierSet::AccessKind kind = ShenandoahBarrierSet::access_kind(decorators, type);\n-    load_reference_barrier(masm, dst, src, kind);\n+    load_reference_barrier(masm, dst, src, decorators);\n@@ -656,12 +657,11 @@\n-  switch (stub->kind()) {\n-    case ShenandoahBarrierSet::AccessKind::NORMAL:\n-      __ far_call(RuntimeAddress(bs->load_reference_barrier_normal_rt_code_blob()->code_begin()));\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::WEAK:\n-      __ far_call(RuntimeAddress(bs->load_reference_barrier_weak_rt_code_blob()->code_begin()));\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::NATIVE:\n-      __ far_call(RuntimeAddress(bs->load_reference_barrier_native_rt_code_blob()->code_begin()));\n-      break;\n-    default:\n-      ShouldNotReachHere();\n+  DecoratorSet decorators = stub->decorators();\n+  bool is_strong  = ShenandoahBarrierSet::is_strong_access(decorators);\n+  bool is_weak    = ShenandoahBarrierSet::is_weak_access(decorators);\n+  bool is_phantom = ShenandoahBarrierSet::is_phantom_access(decorators);\n+  if (is_strong) {\n+    __ far_call(RuntimeAddress(bs->load_reference_barrier_strong_rt_code_blob()->code_begin()));\n+  } else if (is_weak) {\n+    __ far_call(RuntimeAddress(bs->load_reference_barrier_weak_rt_code_blob()->code_begin()));\n+  } else {\n+    assert(is_phantom, \"only remaining strength\");\n+    __ far_call(RuntimeAddress(bs->load_reference_barrier_phantom_rt_code_blob()->code_begin()));\n@@ -723,1 +723,1 @@\n-void ShenandoahBarrierSetAssembler::generate_c1_load_reference_barrier_runtime_stub(StubAssembler* sasm, ShenandoahBarrierSet::AccessKind kind) {\n+void ShenandoahBarrierSetAssembler::generate_c1_load_reference_barrier_runtime_stub(StubAssembler* sasm, DecoratorSet decorators) {\n@@ -730,16 +730,13 @@\n-  switch (kind) {\n-    case ShenandoahBarrierSet::AccessKind::NORMAL:\n-      if (UseCompressedOops) {\n-        __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_narrow));\n-      } else {\n-        __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier));\n-      }\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::WEAK:\n-      if (UseCompressedOops) {\n-        __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow));\n-      } else {\n-        __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak));\n-      }\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::NATIVE:\n+  bool is_strong  = ShenandoahBarrierSet::is_strong_access(decorators);\n+  bool is_weak    = ShenandoahBarrierSet::is_weak_access(decorators);\n+  bool is_phantom = ShenandoahBarrierSet::is_phantom_access(decorators);\n+  if (is_strong) {\n+    if (UseCompressedOops) {\n+      __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong_narrow));\n+    } else {\n+      __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong));\n+    }\n+  } else if (is_weak) {\n+    if (UseCompressedOops) {\n+      __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow));\n+    } else {\n@@ -747,3 +744,4 @@\n-      break;\n-   default:\n-      ShouldNotReachHere();\n+    }\n+  } else {\n+    assert(is_phantom, \"only remaining strength\");\n+    __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_phantom));\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":53,"deletions":55,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  void load_reference_barrier(MacroAssembler* masm, Register dst, Address load_addr, ShenandoahBarrierSet::AccessKind kind);\n+  void load_reference_barrier(MacroAssembler* masm, Register dst, Address load_addr, DecoratorSet decorators);\n@@ -69,1 +69,1 @@\n-  void generate_c1_load_reference_barrier_runtime_stub(StubAssembler* sasm, ShenandoahBarrierSet::AccessKind kind);\n+  void generate_c1_load_reference_barrier_runtime_stub(StubAssembler* sasm, DecoratorSet decorators);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}