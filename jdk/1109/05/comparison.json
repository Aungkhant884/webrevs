{"files":[{"patch":"@@ -112,1 +112,1 @@\n-    result = load_reference_barrier(access.gen(), result, LIR_OprFact::addressConst(0), ShenandoahBarrierSet::AccessKind::NORMAL);\n+    result = load_reference_barrier(access.gen(), result, LIR_OprFact::addressConst(0), access.decorators());\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -228,1 +228,1 @@\n-void ShenandoahBarrierSetAssembler::load_reference_barrier(MacroAssembler* masm, Register dst, Address load_addr, ShenandoahBarrierSet::AccessKind kind) {\n+void ShenandoahBarrierSetAssembler::load_reference_barrier(MacroAssembler* masm, Register dst, Address load_addr, DecoratorSet decorators) {\n@@ -233,0 +233,6 @@\n+  bool is_strong  = ShenandoahBarrierSet::is_strong_access(decorators);\n+  bool is_weak    = ShenandoahBarrierSet::is_weak_access(decorators);\n+  bool is_phantom = ShenandoahBarrierSet::is_phantom_access(decorators);\n+  bool is_native  = ShenandoahBarrierSet::is_native_access(decorators);\n+  bool is_narrow  = UseCompressedOops && !is_native;\n+\n@@ -255,1 +261,1 @@\n-  if (kind == ShenandoahBarrierSet::AccessKind::NORMAL) {\n+  if (is_strong) {\n@@ -263,16 +269,10 @@\n-  switch (kind) {\n-    case ShenandoahBarrierSet::AccessKind::NORMAL:\n-      if (UseCompressedOops) {\n-        __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_narrow));\n-      } else {\n-        __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier));\n-      }\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::WEAK:\n-      if (UseCompressedOops) {\n-        __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow));\n-      } else {\n-        __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak));\n-      }\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::NATIVE:\n+  if (is_strong) {\n+    if (is_narrow) {\n+      __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong_narrow));\n+    } else {\n+      __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong));\n+    }\n+  } else if (is_weak) {\n+    if (is_narrow) {\n+      __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow));\n+    } else {\n@@ -280,3 +280,5 @@\n-      break;\n-    default:\n-      ShouldNotReachHere();\n+    }\n+  } else {\n+    assert(is_phantom, \"only remaining strength\");\n+    assert(!is_narrow, \"phantom access cannot be narrow\");\n+    __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak));\n@@ -341,2 +343,1 @@\n-    ShenandoahBarrierSet::AccessKind kind = ShenandoahBarrierSet::access_kind(decorators, type);\n-    load_reference_barrier(masm, dst, src, kind);\n+    load_reference_barrier(masm, dst, src, decorators);\n@@ -656,12 +657,11 @@\n-  switch (stub->kind()) {\n-    case ShenandoahBarrierSet::AccessKind::NORMAL:\n-      __ far_call(RuntimeAddress(bs->load_reference_barrier_normal_rt_code_blob()->code_begin()));\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::WEAK:\n-      __ far_call(RuntimeAddress(bs->load_reference_barrier_weak_rt_code_blob()->code_begin()));\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::NATIVE:\n-      __ far_call(RuntimeAddress(bs->load_reference_barrier_native_rt_code_blob()->code_begin()));\n-      break;\n-    default:\n-      ShouldNotReachHere();\n+  DecoratorSet decorators = stub->decorators();\n+  bool is_strong  = ShenandoahBarrierSet::is_strong_access(decorators);\n+  bool is_weak    = ShenandoahBarrierSet::is_weak_access(decorators);\n+  bool is_phantom = ShenandoahBarrierSet::is_phantom_access(decorators);\n+  if (is_strong) {\n+    __ far_call(RuntimeAddress(bs->load_reference_barrier_strong_rt_code_blob()->code_begin()));\n+  } else if (is_weak) {\n+    __ far_call(RuntimeAddress(bs->load_reference_barrier_weak_rt_code_blob()->code_begin()));\n+  } else {\n+    assert(is_phantom, \"only remaining strength\");\n+    __ far_call(RuntimeAddress(bs->load_reference_barrier_phantom_rt_code_blob()->code_begin()));\n@@ -723,1 +723,1 @@\n-void ShenandoahBarrierSetAssembler::generate_c1_load_reference_barrier_runtime_stub(StubAssembler* sasm, ShenandoahBarrierSet::AccessKind kind) {\n+void ShenandoahBarrierSetAssembler::generate_c1_load_reference_barrier_runtime_stub(StubAssembler* sasm, DecoratorSet decorators) {\n@@ -730,16 +730,13 @@\n-  switch (kind) {\n-    case ShenandoahBarrierSet::AccessKind::NORMAL:\n-      if (UseCompressedOops) {\n-        __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_narrow));\n-      } else {\n-        __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier));\n-      }\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::WEAK:\n-      if (UseCompressedOops) {\n-        __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow));\n-      } else {\n-        __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak));\n-      }\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::NATIVE:\n+  bool is_strong  = ShenandoahBarrierSet::is_strong_access(decorators);\n+  bool is_weak    = ShenandoahBarrierSet::is_weak_access(decorators);\n+  bool is_phantom = ShenandoahBarrierSet::is_phantom_access(decorators);\n+  if (is_strong) {\n+    if (UseCompressedOops) {\n+      __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong_narrow));\n+    } else {\n+      __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong));\n+    }\n+  } else if (is_weak) {\n+    if (UseCompressedOops) {\n+      __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow));\n+    } else {\n@@ -747,3 +744,4 @@\n-      break;\n-   default:\n-      ShouldNotReachHere();\n+    }\n+  } else {\n+    assert(is_phantom, \"only remaining strength\");\n+    __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_phantom));\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":53,"deletions":55,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  void load_reference_barrier(MacroAssembler* masm, Register dst, Address load_addr, ShenandoahBarrierSet::AccessKind kind);\n+  void load_reference_barrier(MacroAssembler* masm, Register dst, Address load_addr, DecoratorSet decorators);\n@@ -69,1 +69,1 @@\n-  void generate_c1_load_reference_barrier_runtime_stub(StubAssembler* sasm, ShenandoahBarrierSet::AccessKind kind);\n+  void generate_c1_load_reference_barrier_runtime_stub(StubAssembler* sasm, DecoratorSet decorators);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -114,2 +114,1 @@\n-    ShenandoahBarrierSet::AccessKind kind = ShenandoahBarrierSet::access_kind(access.decorators(), access.type());\n-    result = load_reference_barrier(access.gen(), result, LIR_OprFact::addressConst(0), kind);\n+    result = load_reference_barrier(access.gen(), result, LIR_OprFact::addressConst(0), access.decorators());\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -271,1 +271,1 @@\n-void ShenandoahBarrierSetAssembler::load_reference_barrier(MacroAssembler* masm, Register dst, Address src, ShenandoahBarrierSet::AccessKind kind) {\n+void ShenandoahBarrierSetAssembler::load_reference_barrier(MacroAssembler* masm, Register dst, Address src, DecoratorSet decorators) {\n@@ -274,0 +274,6 @@\n+  bool is_strong  = ShenandoahBarrierSet::is_strong_access(decorators);\n+  bool is_weak    = ShenandoahBarrierSet::is_weak_access(decorators);\n+  bool is_phantom = ShenandoahBarrierSet::is_phantom_access(decorators);\n+  bool is_native  = ShenandoahBarrierSet::is_native_access(decorators);\n+  bool is_narrow  = UseCompressedOops && is_native;\n+\n@@ -295,1 +301,1 @@\n-  if (kind == ShenandoahBarrierSet::AccessKind::NORMAL) {\n+  if (is_strong) {\n@@ -360,20 +366,16 @@\n-  switch (kind) {\n-    case ShenandoahBarrierSet::AccessKind::NORMAL:\n-      if (UseCompressedOops) {\n-        __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_narrow), arg0, arg1);\n-      } else {\n-        __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier), arg0, arg1);\n-      }\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::WEAK:\n-      if (UseCompressedOops) {\n-        __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow), arg0, arg1);\n-      } else {\n-        __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak), arg0, arg1);\n-      }\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::NATIVE:\n-      __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak), arg0, arg1);\n-      break;\n-    default:\n-      ShouldNotReachHere();\n+  if (is_strong) {\n+    if (is_narrow) {\n+      __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong_narrow), arg0, arg1);\n+    } else {\n+      __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong), arg0, arg1);\n+    }\n+  } else if (is_weak) {\n+    if (is_narrow) {\n+      __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow), arg0, arg1);\n+    } else {\n+      __ super_call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak), arg0, arg1);\n+    }\n+  } else {\n+    assert(is_phantom, \"only remaining strength\");\n+    assert(!is_narrow, \"phantom access cannot be narrow\");\n+    __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_phantom), arg0, arg1);\n@@ -404,1 +406,1 @@\n-  if  (kind == ShenandoahBarrierSet::AccessKind::NORMAL) {\n+  if  (is_strong) {\n@@ -502,2 +504,1 @@\n-    ShenandoahBarrierSet::AccessKind kind = ShenandoahBarrierSet::access_kind(decorators, type);\n-    load_reference_barrier(masm, dst, src, kind);\n+    load_reference_barrier(masm, dst, src, decorators);\n@@ -853,12 +854,11 @@\n-  switch (stub->kind()) {\n-    case ShenandoahBarrierSet::AccessKind::NORMAL:\n-      __ call(RuntimeAddress(bs->load_reference_barrier_normal_rt_code_blob()->code_begin()));\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::WEAK:\n-      __ call(RuntimeAddress(bs->load_reference_barrier_weak_rt_code_blob()->code_begin()));\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::NATIVE:\n-      __ call(RuntimeAddress(bs->load_reference_barrier_native_rt_code_blob()->code_begin()));\n-      break;\n-    default:\n-      ShouldNotReachHere();\n+  DecoratorSet decorators = stub->decorators();\n+  bool is_strong  = ShenandoahBarrierSet::is_strong_access(decorators);\n+  bool is_weak    = ShenandoahBarrierSet::is_weak_access(decorators);\n+  bool is_phantom = ShenandoahBarrierSet::is_phantom_access(decorators);\n+  if (is_strong) {\n+    __ call(RuntimeAddress(bs->load_reference_barrier_strong_rt_code_blob()->code_begin()));\n+  } else if (is_weak) {\n+    __ call(RuntimeAddress(bs->load_reference_barrier_weak_rt_code_blob()->code_begin()));\n+  } else {\n+    assert(is_phantom, \"only remaining strength\");\n+    __ call(RuntimeAddress(bs->load_reference_barrier_phantom_rt_code_blob()->code_begin()));\n@@ -929,1 +929,1 @@\n-void ShenandoahBarrierSetAssembler::generate_c1_load_reference_barrier_runtime_stub(StubAssembler* sasm, ShenandoahBarrierSet::AccessKind kind) {\n+void ShenandoahBarrierSetAssembler::generate_c1_load_reference_barrier_runtime_stub(StubAssembler* sasm, DecoratorSet decorators) {\n@@ -935,0 +935,4 @@\n+  bool is_strong  = ShenandoahBarrierSet::is_strong_access(decorators);\n+  bool is_weak    = ShenandoahBarrierSet::is_weak_access(decorators);\n+  bool is_phantom = ShenandoahBarrierSet::is_phantom_access(decorators);\n+\n@@ -938,16 +942,10 @@\n-  switch (kind) {\n-    case ShenandoahBarrierSet::AccessKind::NORMAL:\n-      if (UseCompressedOops) {\n-        __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_narrow), c_rarg0, c_rarg1);\n-      } else {\n-        __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier), c_rarg0, c_rarg1);\n-      }\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::WEAK:\n-      if (UseCompressedOops) {\n-        __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow), c_rarg0, c_rarg1);\n-      } else {\n-        __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak), c_rarg0, c_rarg1);\n-      }\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::NATIVE:\n+  if (is_strong) {\n+    if (UseCompressedOops) {\n+      __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong_narrow), c_rarg0, c_rarg1);\n+    } else {\n+      __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong), c_rarg0, c_rarg1);\n+    }\n+  } else if (is_weak) {\n+    if (UseCompressedOops) {\n+      __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow), c_rarg0, c_rarg1);\n+    } else {\n@@ -955,3 +953,4 @@\n-      break;\n-    default:\n-      ShouldNotReachHere();\n+    }\n+  } else {\n+    assert(is_phantom, \"only remaining strength\");\n+    __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak), c_rarg0, c_rarg1);\n@@ -962,10 +961,7 @@\n-  switch (kind) {\n-    case ShenandoahBarrierSet::AccessKind::NORMAL:\n-      __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier), rax, rbx);\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::WEAK:\n-    case ShenandoahBarrierSet::AccessKind::NATIVE:\n-      __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak), rax, rbx);\n-      break;\n-    default:\n-      ShouldNotReachHere();\n+  if (is_strong) {\n+    __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong), rax, rbx);\n+  } else if (is_weak) {\n+    __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak), rax, rbx);\n+  } else {\n+    assert(is_phantom, \"only remaining strength\");\n+    __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_phantom), rax, rbx);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":63,"deletions":67,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-  void generate_c1_load_reference_barrier_runtime_stub(StubAssembler* sasm, ShenandoahBarrierSet::AccessKind kind);\n+  void generate_c1_load_reference_barrier_runtime_stub(StubAssembler* sasm, DecoratorSet decorators);\n@@ -70,1 +70,1 @@\n-  void load_reference_barrier(MacroAssembler* masm, Register dst, Address src, ShenandoahBarrierSet::AccessKind kind);\n+  void load_reference_barrier(MacroAssembler* masm, Register dst, Address src, DecoratorSet decorators);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,3 +54,3 @@\n-  _load_reference_barrier_normal_rt_code_blob(NULL),\n-  _load_reference_barrier_native_rt_code_blob(NULL),\n-  _load_reference_barrier_weak_rt_code_blob(NULL) {}\n+  _load_reference_barrier_strong_rt_code_blob(NULL),\n+  _load_reference_barrier_weak_rt_code_blob(NULL),\n+  _load_reference_barrier_phantom_rt_code_blob(NULL) {}\n@@ -112,1 +112,1 @@\n-LIR_Opr ShenandoahBarrierSetC1::load_reference_barrier(LIRGenerator* gen, LIR_Opr obj, LIR_Opr addr, ShenandoahBarrierSet::AccessKind kind) {\n+LIR_Opr ShenandoahBarrierSetC1::load_reference_barrier(LIRGenerator* gen, LIR_Opr obj, LIR_Opr addr, DecoratorSet decorators) {\n@@ -114,1 +114,1 @@\n-    return load_reference_barrier_impl(gen, obj, addr, kind);\n+    return load_reference_barrier_impl(gen, obj, addr, decorators);\n@@ -120,1 +120,1 @@\n-LIR_Opr ShenandoahBarrierSetC1::load_reference_barrier_impl(LIRGenerator* gen, LIR_Opr obj, LIR_Opr addr, ShenandoahBarrierSet::AccessKind kind) {\n+LIR_Opr ShenandoahBarrierSetC1::load_reference_barrier_impl(LIRGenerator* gen, LIR_Opr obj, LIR_Opr addr, DecoratorSet decorators) {\n@@ -153,1 +153,1 @@\n-  CodeStub* slow = new ShenandoahLoadReferenceBarrierStub(obj, addr, result, tmp1, tmp2, kind);\n+  CodeStub* slow = new ShenandoahLoadReferenceBarrierStub(obj, addr, result, tmp1, tmp2, decorators);\n@@ -216,2 +216,1 @@\n-    ShenandoahBarrierSet::AccessKind kind = ShenandoahBarrierSet::access_kind(decorators, type);\n-    tmp = load_reference_barrier(gen, tmp, access.resolved_addr(), kind);\n+    tmp = load_reference_barrier(gen, tmp, access.resolved_addr(), decorators);\n@@ -256,1 +255,1 @@\n-  const ShenandoahBarrierSet::AccessKind _kind;\n+  const DecoratorSet _decorators;\n@@ -259,1 +258,1 @@\n-  C1ShenandoahLoadReferenceBarrierCodeGenClosure(ShenandoahBarrierSet::AccessKind kind) : _kind(kind) {}\n+  C1ShenandoahLoadReferenceBarrierCodeGenClosure(DecoratorSet decorators) : _decorators(decorators) {}\n@@ -263,1 +262,1 @@\n-    bs->generate_c1_load_reference_barrier_runtime_stub(sasm, _kind);\n+    bs->generate_c1_load_reference_barrier_runtime_stub(sasm, _decorators);\n@@ -274,4 +273,4 @@\n-    C1ShenandoahLoadReferenceBarrierCodeGenClosure lrb_code_gen_cl(ShenandoahBarrierSet::AccessKind::NORMAL);\n-    _load_reference_barrier_normal_rt_code_blob = Runtime1::generate_blob(buffer_blob, -1,\n-                                                                  \"shenandoah_load_reference_barrier_slow\",\n-                                                                  false, &lrb_code_gen_cl);\n+    C1ShenandoahLoadReferenceBarrierCodeGenClosure lrb_strong_code_gen_cl(ON_STRONG_OOP_REF);\n+    _load_reference_barrier_strong_rt_code_blob = Runtime1::generate_blob(buffer_blob, -1,\n+                                                                  \"shenandoah_load_reference_barrier_strong_slow\",\n+                                                                  false, &lrb_strong_code_gen_cl);\n@@ -279,6 +278,1 @@\n-    C1ShenandoahLoadReferenceBarrierCodeGenClosure lrb_native_code_gen_cl(ShenandoahBarrierSet::AccessKind::NATIVE);\n-    _load_reference_barrier_native_rt_code_blob = Runtime1::generate_blob(buffer_blob, -1,\n-                                                                          \"shenandoah_load_reference_barrier_native_slow\",\n-                                                                          false, &lrb_native_code_gen_cl);\n-\n-    C1ShenandoahLoadReferenceBarrierCodeGenClosure lrb_weak_code_gen_cl(ShenandoahBarrierSet::AccessKind::WEAK);\n+    C1ShenandoahLoadReferenceBarrierCodeGenClosure lrb_weak_code_gen_cl(ON_WEAK_OOP_REF);\n@@ -286,2 +280,7 @@\n-                                                                           \"shenandoah_load_reference_barrier_weak_slow\",\n-                                                                           false, &lrb_weak_code_gen_cl);\n+                                                                          \"shenandoah_load_reference_barrier_weak_slow\",\n+                                                                          false, &lrb_weak_code_gen_cl);\n+\n+    C1ShenandoahLoadReferenceBarrierCodeGenClosure lrb_phantom_code_gen_cl(ON_PHANTOM_OOP_REF);\n+    _load_reference_barrier_phantom_rt_code_blob = Runtime1::generate_blob(buffer_blob, -1,\n+                                                                           \"shenandoah_load_reference_barrier_phantom_slow\",\n+                                                                           false, &lrb_phantom_code_gen_cl);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.cpp","additions":23,"deletions":24,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-  ShenandoahBarrierSet::AccessKind _kind;\n+  DecoratorSet _decorators;\n@@ -99,2 +99,2 @@\n-  ShenandoahLoadReferenceBarrierStub(LIR_Opr obj, LIR_Opr addr, LIR_Opr result, LIR_Opr tmp1, LIR_Opr tmp2, ShenandoahBarrierSet::AccessKind kind) :\n-          _obj(obj), _addr(addr), _result(result), _tmp1(tmp1), _tmp2(tmp2), _kind(kind)\n+  ShenandoahLoadReferenceBarrierStub(LIR_Opr obj, LIR_Opr addr, LIR_Opr result, LIR_Opr tmp1, LIR_Opr tmp2, DecoratorSet decorators) :\n+          _obj(obj), _addr(addr), _result(result), _tmp1(tmp1), _tmp2(tmp2), _decorators(decorators)\n@@ -114,1 +114,1 @@\n-  ShenandoahBarrierSet::AccessKind kind() const { return _kind; }\n+  DecoratorSet decorators() const { return _decorators; }\n@@ -193,2 +193,1 @@\n-  CodeBlob* _load_reference_barrier_normal_rt_code_blob;\n-  CodeBlob* _load_reference_barrier_native_rt_code_blob;\n+  CodeBlob* _load_reference_barrier_strong_rt_code_blob;\n@@ -196,0 +195,1 @@\n+  CodeBlob* _load_reference_barrier_phantom_rt_code_blob;\n@@ -199,1 +199,1 @@\n-  LIR_Opr load_reference_barrier(LIRGenerator* gen, LIR_Opr obj, LIR_Opr addr, ShenandoahBarrierSet::AccessKind kind);\n+  LIR_Opr load_reference_barrier(LIRGenerator* gen, LIR_Opr obj, LIR_Opr addr, DecoratorSet decorators);\n@@ -202,1 +202,1 @@\n-  LIR_Opr load_reference_barrier_impl(LIRGenerator* gen, LIR_Opr obj, LIR_Opr addr, ShenandoahBarrierSet::AccessKind kind);\n+  LIR_Opr load_reference_barrier_impl(LIRGenerator* gen, LIR_Opr obj, LIR_Opr addr, DecoratorSet decorators);\n@@ -214,8 +214,3 @@\n-  CodeBlob* load_reference_barrier_normal_rt_code_blob() {\n-    assert(_load_reference_barrier_normal_rt_code_blob != NULL, \"\");\n-    return _load_reference_barrier_normal_rt_code_blob;\n-  }\n-\n-  CodeBlob* load_reference_barrier_native_rt_code_blob() {\n-    assert(_load_reference_barrier_native_rt_code_blob != NULL, \"\");\n-    return _load_reference_barrier_native_rt_code_blob;\n+  CodeBlob* load_reference_barrier_strong_rt_code_blob() {\n+    assert(_load_reference_barrier_strong_rt_code_blob != NULL, \"\");\n+    return _load_reference_barrier_strong_rt_code_blob;\n@@ -228,0 +223,6 @@\n+\n+  CodeBlob* load_reference_barrier_phantom_rt_code_blob() {\n+    assert(_load_reference_barrier_phantom_rt_code_blob != NULL, \"\");\n+    return _load_reference_barrier_phantom_rt_code_blob;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp","additions":17,"deletions":16,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -306,2 +306,2 @@\n-  return (entry_point == CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier)) ||\n-         (entry_point == CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_narrow)) ||\n+  return (entry_point == CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong)) ||\n+         (entry_point == CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong_narrow)) ||\n@@ -309,1 +309,2 @@\n-         (entry_point == CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow));\n+         (entry_point == CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow)) ||\n+         (entry_point == CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_phantom));\n@@ -549,2 +550,1 @@\n-    ShenandoahBarrierSet::AccessKind kind = ShenandoahBarrierSet::access_kind(decorators, type);\n-    load = new ShenandoahLoadReferenceBarrierNode(NULL, load, kind);\n+    load = new ShenandoahLoadReferenceBarrierNode(NULL, load, decorators);\n@@ -647,2 +647,1 @@\n-    ShenandoahBarrierSet::AccessKind kind = ShenandoahBarrierSet::access_kind(access.decorators(), access.type());\n-    load_store = kit->gvn().transform(new ShenandoahLoadReferenceBarrierNode(NULL, load_store, kind));\n+    load_store = kit->gvn().transform(new ShenandoahLoadReferenceBarrierNode(NULL, load_store, access.decorators()));\n@@ -716,2 +715,1 @@\n-    ShenandoahBarrierSet::AccessKind kind = ShenandoahBarrierSet::access_kind(access.decorators(), access.type());\n-    result = kit->gvn().transform(new ShenandoahLoadReferenceBarrierNode(NULL, result, kind));\n+    result = kit->gvn().transform(new ShenandoahLoadReferenceBarrierNode(NULL, result, access.decorators()));\n@@ -1065,1 +1063,1 @@\n-    \/\/ If one input is NULL, then step over the barriers normal LRB barriers on the other input\n+    \/\/ If one input is NULL, then step over the strong LRB barriers on the other input\n@@ -1068,1 +1066,1 @@\n-          ((ShenandoahLoadReferenceBarrierNode*)in2)->kind() != ShenandoahBarrierSet::AccessKind::NORMAL)) {\n+          ShenandoahBarrierSet::is_strong_access(((ShenandoahLoadReferenceBarrierNode*)in2)->decorators()))) {\n@@ -1073,1 +1071,1 @@\n-          ((ShenandoahLoadReferenceBarrierNode*)in1)->kind() != ShenandoahBarrierSet::AccessKind::NORMAL)) {\n+          ShenandoahBarrierSet::is_strong_access(((ShenandoahLoadReferenceBarrierNode*)in1)->decorators()))) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -960,1 +960,1 @@\n-                                               ShenandoahBarrierSet::AccessKind kind, PhaseIdealLoop* phase) {\n+                                               DecoratorSet decorators, PhaseIdealLoop* phase) {\n@@ -973,2 +973,18 @@\n-  switch (kind) {\n-    case ShenandoahBarrierSet::AccessKind::NATIVE:\n+  bool is_strong  = ShenandoahBarrierSet::is_strong_access(decorators);\n+  bool is_weak    = ShenandoahBarrierSet::is_weak_access(decorators);\n+  bool is_phantom = ShenandoahBarrierSet::is_phantom_access(decorators);\n+  bool is_native  = ShenandoahBarrierSet::is_native_access(decorators);\n+  bool is_narrow  = UseCompressedOops && !is_native;\n+  if (is_strong) {\n+    if (is_narrow) {\n+      calladdr = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong_narrow);\n+      name = \"load_reference_barrier_strong_narrow\";\n+    } else {\n+      calladdr = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_strong);\n+      name = \"load_reference_barrier_strong\";\n+    }\n+  } else if (is_weak) {\n+    if (is_narrow) {\n+      calladdr = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow);\n+      name = \"load_reference_barrier_weak_narrow\";\n+    } else {\n@@ -976,6 +992,0 @@\n-      name = \"load_reference_barrier_native\";\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::WEAK:\n-      calladdr = LP64_ONLY(UseCompressedOops) NOT_LP64(false) ?\n-                 CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak_narrow) :\n-                 CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak);\n@@ -983,9 +993,6 @@\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::NORMAL:\n-      calladdr = LP64_ONLY(UseCompressedOops) NOT_LP64(false) ?\n-                 CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_narrow) :\n-                 CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier);\n-      name = \"load_reference_barrier\";\n-      break;\n-    default:\n-      ShouldNotReachHere();\n+    }\n+  } else {\n+    assert(is_phantom, \"only remaining strength\");\n+    assert(!is_narrow, \"phantom access cannot be narrow\");\n+    calladdr = CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_phantom);\n+    name = \"load_reference_barrier_phantom\";\n@@ -1357,1 +1364,1 @@\n-    if (lrb->kind() == ShenandoahBarrierSet::AccessKind::NORMAL) {\n+    if (ShenandoahBarrierSet::is_strong_access(lrb->decorators())) {\n@@ -1408,1 +1415,1 @@\n-    call_lrb_stub(ctrl, val, addr, result_mem, raw_mem, lrb->kind(), phase);\n+    call_lrb_stub(ctrl, val, addr, result_mem, raw_mem, lrb->decorators(), phase);\n@@ -2904,2 +2911,2 @@\n-ShenandoahLoadReferenceBarrierNode::ShenandoahLoadReferenceBarrierNode(Node* ctrl, Node* obj, ShenandoahBarrierSet::AccessKind kind)\n-: Node(ctrl, obj), _kind(kind) {\n+ShenandoahLoadReferenceBarrierNode::ShenandoahLoadReferenceBarrierNode(Node* ctrl, Node* obj, DecoratorSet decorators)\n+: Node(ctrl, obj), _decorators(decorators) {\n@@ -2909,2 +2916,2 @@\n-ShenandoahBarrierSet::AccessKind ShenandoahLoadReferenceBarrierNode::kind() const {\n-  return _kind;\n+DecoratorSet ShenandoahLoadReferenceBarrierNode::decorators() const {\n+  return _decorators;\n@@ -2917,0 +2924,4 @@\n+static DecoratorSet mask_decorators(DecoratorSet decorators) {\n+  return decorators & (ON_STRONG_OOP_REF | ON_WEAK_OOP_REF | ON_PHANTOM_OOP_REF | ON_UNKNOWN_OOP_REF | IN_NATIVE);\n+}\n+\n@@ -2919,13 +2930,1 @@\n-  switch (_kind) {\n-    case ShenandoahBarrierSet::AccessKind::NORMAL:\n-      hash += 0;\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::WEAK:\n-      hash += 1;\n-      break;\n-    case ShenandoahBarrierSet::AccessKind::NATIVE:\n-      hash += 2;\n-      break;\n-    default:\n-      ShouldNotReachHere();\n-  }\n+  hash += mask_decorators(_decorators);\n@@ -2937,1 +2936,1 @@\n-         _kind == ((const ShenandoahLoadReferenceBarrierNode&)n)._kind;\n+         mask_decorators(_decorators) == mask_decorators(((const ShenandoahLoadReferenceBarrierNode&)n)._decorators);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":37,"deletions":38,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-                            ShenandoahBarrierSet::AccessKind kind, PhaseIdealLoop* phase);\n+                            DecoratorSet decorators, PhaseIdealLoop* phase);\n@@ -234,1 +234,1 @@\n-  ShenandoahBarrierSet::AccessKind _kind;\n+  DecoratorSet _decorators;\n@@ -237,1 +237,1 @@\n-  ShenandoahLoadReferenceBarrierNode(Node* ctrl, Node* val, ShenandoahBarrierSet::AccessKind kind);\n+  ShenandoahLoadReferenceBarrierNode(Node* ctrl, Node* val, DecoratorSet decorators);\n@@ -239,1 +239,1 @@\n-  ShenandoahBarrierSet::AccessKind kind() const;\n+  DecoratorSet decorators() const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -101,10 +101,0 @@\n-ShenandoahBarrierSet::AccessKind ShenandoahBarrierSet::access_kind(DecoratorSet decorators, BasicType type) {\n-  if ((decorators & IN_NATIVE) != 0) {\n-    return AccessKind::NATIVE;\n-  } else if ((decorators & (ON_WEAK_OOP_REF | ON_PHANTOM_OOP_REF | ON_UNKNOWN_OOP_REF)) != 0) {\n-    return AccessKind::WEAK;\n-  } else {\n-    return AccessKind::NORMAL;\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -36,12 +36,0 @@\n-public:\n-  enum class AccessKind {\n-    \/\/ Regular in-heap access on reference fields\n-    NORMAL,\n-\n-    \/\/ Off-heap reference access\n-    NATIVE,\n-\n-    \/\/ In-heap reference access on referent fields of j.l.r.Reference objects\n-    WEAK\n-  };\n-\n@@ -68,1 +56,16 @@\n-  static AccessKind access_kind(DecoratorSet decorators, BasicType type);\n+\n+  static bool is_strong_access(DecoratorSet decorators) {\n+    return (decorators & (ON_WEAK_OOP_REF | ON_PHANTOM_OOP_REF | ON_UNKNOWN_OOP_REF)) == 0;\n+  }\n+\n+  static bool is_weak_access(DecoratorSet decorators) {\n+    return (decorators & (ON_WEAK_OOP_REF | ON_UNKNOWN_OOP_REF)) != 0;\n+  }\n+\n+  static bool is_phantom_access(DecoratorSet decorators) {\n+    return (decorators & ON_PHANTOM_OOP_REF) != 0;\n+  }\n+\n+  static bool is_native_access(DecoratorSet decorators) {\n+    return (decorators & IN_NATIVE) != 0;\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.hpp","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -105,2 +105,2 @@\n-  \/\/ Prevent resurrection of unreachable non-strorg references.\n-  if (!HasDecorator<decorators, ON_STRONG_OOP_REF>::value && obj != NULL &&\n+  \/\/ Prevent resurrection of unreachable phantom (i.e. weak-native) references.\n+  if (HasDecorator<decorators, ON_PHANTOM_OOP_REF>::value && obj != NULL &&\n@@ -119,0 +119,8 @@\n+  \/\/ Prevent resurrection of unreachable weak references.\n+  if ((HasDecorator<decorators, ON_WEAK_OOP_REF>::value || HasDecorator<decorators, ON_UNKNOWN_OOP_REF>::value) &&\n+      obj != NULL && _heap->is_concurrent_weak_root_in_progress() &&\n+      !_heap->marking_context()->is_marked_strong(obj)) {\n+    assert(Thread::current()->is_Java_thread(), \"only Java threads get here\");\n+    return NULL;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.inline.hpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-JRT_LEAF(oopDesc*, ShenandoahRuntime::load_reference_barrier(oopDesc* src, oop* load_addr))\n+JRT_LEAF(oopDesc*, ShenandoahRuntime::load_reference_barrier_strong(oopDesc* src, oop* load_addr))\n@@ -57,1 +57,1 @@\n-JRT_LEAF(oopDesc*, ShenandoahRuntime::load_reference_barrier_narrow(oopDesc* src, narrowOop* load_addr))\n+JRT_LEAF(oopDesc*, ShenandoahRuntime::load_reference_barrier_strong_narrow(oopDesc* src, narrowOop* load_addr))\n@@ -74,1 +74,5 @@\n-  return (oopDesc*) ShenandoahBarrierSet::barrier_set()->load_reference_barrier<ON_UNKNOWN_OOP_REF, narrowOop>(oop(src), load_addr);\n+  return (oopDesc*) ShenandoahBarrierSet::barrier_set()->load_reference_barrier<ON_WEAK_OOP_REF, narrowOop>(oop(src), load_addr);\n+JRT_END\n+\n+JRT_LEAF(oopDesc*, ShenandoahRuntime::load_reference_barrier_phantom(oopDesc * src, oop* load_addr))\n+  return (oopDesc*) ShenandoahBarrierSet::barrier_set()->load_reference_barrier<ON_PHANTOM_OOP_REF, oop>(oop(src), load_addr);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRuntime.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -41,2 +41,2 @@\n-  static oopDesc* load_reference_barrier(oopDesc* src, oop* load_addr);\n-  static oopDesc* load_reference_barrier_narrow(oopDesc* src, narrowOop* load_addr);\n+  static oopDesc* load_reference_barrier_strong(oopDesc* src, oop* load_addr);\n+  static oopDesc* load_reference_barrier_strong_narrow(oopDesc* src, narrowOop* load_addr);\n@@ -47,0 +47,2 @@\n+  static oopDesc* load_reference_barrier_phantom(oopDesc* src, oop* load_addr);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRuntime.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}