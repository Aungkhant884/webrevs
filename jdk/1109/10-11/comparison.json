{"files":[{"patch":"@@ -817,0 +817,5 @@\n+  DecoratorSet decorators = stub->decorators();\n+  bool is_strong  = ShenandoahBarrierSet::is_strong_access(decorators);\n+  bool is_weak    = ShenandoahBarrierSet::is_weak_access(decorators);\n+  bool is_phantom = ShenandoahBarrierSet::is_phantom_access(decorators);\n+\n@@ -832,8 +837,5 @@\n-  \/\/ Check for null.\n-  __ testptr(res, res);\n-  __ jcc(Assembler::zero, *stub->continuation());\n-\n-  \/\/ Check for object being in the collection set.\n-  __ mov(tmp1, res);\n-  __ shrptr(tmp1, ShenandoahHeapRegion::region_size_bytes_shift_jint());\n-  __ movptr(tmp2, (intptr_t) ShenandoahHeap::in_cset_fast_test_addr());\n+  if (is_strong) {\n+    \/\/ Check for object being in the collection set.\n+    __ mov(tmp1, res);\n+    __ shrptr(tmp1, ShenandoahHeapRegion::region_size_bytes_shift_jint());\n+    __ movptr(tmp2, (intptr_t) ShenandoahHeap::in_cset_fast_test_addr());\n@@ -841,2 +843,2 @@\n-  __ movbool(tmp2, Address(tmp2, tmp1, Address::times_1));\n-  __ testbool(tmp2);\n+    __ movbool(tmp2, Address(tmp2, tmp1, Address::times_1));\n+    __ testbool(tmp2);\n@@ -844,4 +846,4 @@\n-  \/\/ On x86_32, C1 register allocator can give us the register without 8-bit support.\n-  \/\/ Do the full-register access and test to avoid compilation failures.\n-  __ movptr(tmp2, Address(tmp2, tmp1, Address::times_1));\n-  __ testptr(tmp2, 0xFF);\n+    \/\/ On x86_32, C1 register allocator can give us the register without 8-bit support.\n+    \/\/ Do the full-register access and test to avoid compilation failures.\n+    __ movptr(tmp2, Address(tmp2, tmp1, Address::times_1));\n+    __ testptr(tmp2, 0xFF);\n@@ -849,1 +851,2 @@\n-  __ jcc(Assembler::zero, *stub->continuation());\n+    __ jcc(Assembler::zero, *stub->continuation());\n+  }\n@@ -854,4 +857,0 @@\n-  DecoratorSet decorators = stub->decorators();\n-  bool is_strong  = ShenandoahBarrierSet::is_strong_access(decorators);\n-  bool is_weak    = ShenandoahBarrierSet::is_weak_access(decorators);\n-  bool is_phantom = ShenandoahBarrierSet::is_phantom_access(decorators);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":18,"deletions":19,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-  return (oopDesc*) ShenandoahBarrierSet::barrier_set()->load_reference_barrier<ON_UNKNOWN_OOP_REF, oop>(oop(src), load_addr);\n+  return (oopDesc*) ShenandoahBarrierSet::barrier_set()->load_reference_barrier<ON_WEAK_OOP_REF, oop>(oop(src), load_addr);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}