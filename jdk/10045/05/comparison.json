{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,5 +34,50 @@\n- * The {@code JarInputStream} class is used to read the contents of\n- * a JAR file from any input stream. It extends the class\n- * {@code java.util.zip.ZipInputStream} with support for reading\n- * an optional {@code Manifest} entry. The {@code Manifest}\n- * can be used to store meta-information about the JAR file and its entries.\n+ * The {@code JarInputStream} class, which extends {@link ZipInputStream},\n+ * is used to read the contents of a JAR file from an input stream.\n+ * It provides support for reading an optional {@link JarFile#MANIFEST_NAME Manifest}\n+ * entry. The {@code Manifest} can be used to store\n+ * meta-information about the JAR file and its entries.\n+ *\n+ * <h2>Accessing the Manifest<\/h2>\n+ * <p>\n+ * The {@link #getManifest() getManifest} method is used to return the\n+ * <a href=\"{@docRoot}\/..\/specs\/jar\/jar.html#jar-manifest\">JAR Manifest<\/a>\n+ * from the entry {@code META-INF\/MANIFEST.MF} when it is the first entry\n+ * in the stream (or the second entry the first entry in the stream is\n+ * {@code META-INF\/} and the second entry {@code META-INF\/MANIFEST.MF}).\n+ *<\/p>\n+ * <p> The {@link #getNextJarEntry()} and {@link #getNextEntry()} methods are\n+ * used to read JAR file entries from the stream. These methods skip over the\n+ * Manifest ({@code META-INF\/MANIFEST.MF}) when it is at the beginning of the\n+ * stream. In other words, these methods do not return an entry for the Manifest\n+ * when the Manifest is the first entry in the stream. If the first entry is\n+ * {@code META-INF\/} and the second entry is the Manifest then both are skipped\n+ * over by these methods. Whether these methods skip over the Manifest when it\n+ * appears later in the stream is not specified.\n+ * <\/p>\n+ * <p>\n+ * {@link JarEntry#getAttributes()} will return the {@code Manifest}'s\n+ *  attributes for the current JAR file entry, if any, providing\n+ *  {@code getManifest()} returns a {@code Manifest} for the JAR file.\n+ * <\/p>\n+ *\n+ *  <h2>Verifying a JarInputStream<\/h2>\n+ *  {@link #JarInputStream(InputStream, boolean)} may be used to\n+ *  verify the signatures of a signed {@code JarInputStream} assuming the\n+ *  following requirements are met:\n+ *  <ul>\n+ *      <li>\n+ *         The {@link #getManifest()} returns a {@code Manifest} for the JAR\n+ *         file\n+ *      <\/li>\n+ *      <li>\n+ *         All signature-related entries immediately follow the {@code Manifest}\n+ *      <\/li>\n+ *  <\/ul>\n+ *  Once the {@code JarEntry} has been completely verified, which is done by\n+ *  reading until the end of the entry's input stream,\n+ *  {@link JarEntry#getCertificates()} may be called to obtain the certificates\n+ *  for this entry and {@link JarEntry#getCodeSigners()} may be called to obtain\n+ *  the signers.\n+ * @apiNote\n+ * If a {@code JarEntry} is modified after the JAR file is signed,\n+ * a {@link SecurityException} will be thrown when the entry is read.\n@@ -106,2 +151,4 @@\n-     * Returns the {@code Manifest} for this JAR file, or\n-     * {@code null} if none.\n+     * Returns the {@code Manifest} for this JAR file when it is the first entry\n+     * in the stream (or the second entry the first entry in the stream is\n+     * {@code META-INF\/} and the second entry {@code META-INF\/MANIFEST.MF}), or\n+     * {@code null} otherwise.\n@@ -109,2 +156,2 @@\n-     * @return the {@code Manifest} for this JAR file, or\n-     *         {@code null} if none.\n+     * @return the {@code Manifest} for this JAR file when accessible, or\n+     *         {@code null} otherwise.\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarInputStream.java","additions":57,"deletions":10,"binary":false,"changes":67,"status":"modified"}]}