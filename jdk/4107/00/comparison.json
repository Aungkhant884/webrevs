{"files":[{"patch":"@@ -1,43 +0,0 @@\n-diff --git a\/src\/hotspot\/share\/opto\/vectorIntrinsics.cpp b\/src\/hotspot\/share\/opto\/vectorIntrinsics.cpp\n-index 3b8261d91d0..ad4bfd57f53 100644\n---- a\/src\/hotspot\/share\/opto\/vectorIntrinsics.cpp\n-+++ b\/src\/hotspot\/share\/opto\/vectorIntrinsics.cpp\n-@@ -429,8 +429,12 @@ bool LibraryCallKit::inline_vector_mask_operation() {\n-   ciType* elem_type = elem_klass->const_oop()->as_instance()->java_mirror_type();\n-   BasicType elem_bt = elem_type->basic_type();\n- \n--  if (num_elem <= 2) {\n--    return false;\n-+  if (!arch_supports_vector(Op_LoadVector, num_elem, T_BOOLEAN, VecMaskNotUsed)) {\n-+    if (C->print_intrinsics()) {\n-+      tty->print_cr(\"  ** not supported: arity=1 op=cast#%d\/3 vlen2=%d etype2=%s\",\n-+                    Op_LoadVector, num_elem, type2name(T_BOOLEAN));\n-+    }\n-+    return false; \/\/ not supported\n-   }\n- \n-   int mopc = VectorSupport::vop2ideal(oper->get_con(), elem_bt);\n-@@ -439,7 +443,7 @@ bool LibraryCallKit::inline_vector_mask_operation() {\n-       tty->print_cr(\"  ** not supported: arity=1 op=cast#%d\/3 vlen2=%d etype2=%s\",\n-                     mopc, num_elem, type2name(elem_bt));\n-     }\n--    return false;\n-+    return false; \/\/ not supported\n-   }\n- \n-   const Type* elem_ty = Type::get_const_basic_type(elem_bt);\n-diff --git a\/test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskQueryOperationsBenchmark.java b\/test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskQueryOperationsBenchmark.java\n-index 50add676c62..6f9df1800f6 100644\n---- a\/test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskQueryOperationsBenchmark.java\n-+++ b\/test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskQueryOperationsBenchmark.java\n-@@ -84,8 +84,8 @@ public class MaskQueryOperationsBenchmark {\n- \n-     @Setup(Level.Trial)\n-     public void BmSetup() {\n--        bspecies = VectorSpecies.of(int.class, VectorShape.forBitSize(bits));\n--        sspecies = VectorSpecies.of(int.class, VectorShape.forBitSize(bits));\n-+        bspecies = VectorSpecies.of(byte.class, VectorShape.forBitSize(bits));\n-+        sspecies = VectorSpecies.of(short.class, VectorShape.forBitSize(bits));\n-         ispecies = VectorSpecies.of(int.class, VectorShape.forBitSize(bits));\n-         lspecies = VectorSpecies.of(long.class, VectorShape.forBitSize(bits));\n- \n","filename":"mask.incr","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"}]}