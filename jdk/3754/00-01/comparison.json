{"files":[{"patch":"@@ -416,1 +416,1 @@\n-        StringBuilder sb = new StringBuilder();\n+\n@@ -429,3 +429,0 @@\n-                    \/\/ Only add whitespace if necessary, and normalize to space char\n-                    if (shouldAddWhitespace(sb))\n-                        sb.append(' ');\n@@ -438,1 +435,0 @@\n-                    sb.append(ch);\n@@ -445,1 +441,0 @@\n-                    sb.append(ch);\n@@ -461,1 +456,0 @@\n-                    sb.append(ch);\n@@ -470,1 +464,2 @@\n-        String sig = sb.toString();\n+        String sig = newString(pos, bp);\n+\n@@ -484,10 +479,0 @@\n-    \/\/ Checks whether whitespace should be added to a (mostly) normalized signature string.\n-    private boolean shouldAddWhitespace(StringBuilder sb) {\n-        if (!sb.isEmpty()) {\n-            char lastChar = sb.charAt(sb.length() - 1);\n-            \/\/ Suppress repeated whitespace, as well as whitespace after opening parens\/brackets\n-            return !Character.isWhitespace(lastChar) && lastChar != '(' && lastChar != '<';\n-        }\n-        return false;\n-    }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/DocCommentParser.java","additions":3,"deletions":18,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.Objects;\n@@ -1027,1 +1028,0 @@\n-                        break;\n@@ -1043,1 +1043,2 @@\n-        Content text = plainOrCode(kind == LINK_PLAIN, Text.of(removeTrailingSlash(seeText)));\n+        Content text = plainOrCode(isLinkPlain,\n+                Text.of(Objects.requireNonNullElse(ch.getReferencedSignature(see), \"\")));\n@@ -1152,2 +1153,0 @@\n-            text = plainOrCode(kind == LINK_PLAIN, Text.of(refMemName));\n-\n@@ -1155,1 +1154,3 @@\n-                    refMem, (labelContent.isEmpty() ? text: labelContent), null, false);\n+                    refMem, (labelContent.isEmpty()\n+                            ? plainOrCode(isLinkPlain, Text.of(refMemName))\n+                            : labelContent), null, false);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -464,1 +464,1 @@\n-                return node.getSignature();\n+                return normalizeSignature(node.getSignature());\n@@ -469,0 +469,50 @@\n+    @SuppressWarnings(\"fallthrough\")\n+    private static String normalizeSignature(String sig) {\n+        if (sig == null\n+                || (!sig.contains(\" \") && !sig.contains(\"\\n\")\n+                 && !sig.contains(\"\\r\") && !sig.endsWith(\"\/\"))) {\n+            return sig;\n+        }\n+        StringBuilder sb = new StringBuilder();\n+        char lastChar = 0;\n+        for (int i = 0; i < sig.length(); i++) {\n+            char ch = sig.charAt(i);\n+            switch (ch) {\n+                case '\\n':\n+                case '\\r':\n+                case '\\f':\n+                case '\\t':\n+                case ' ':\n+                    switch (lastChar) {\n+                        case 0:\n+                        case'(':\n+                        case'<':\n+                        case ' ':\n+                        case '.':\n+                            break;\n+                        default:\n+                            sb.append(' ');\n+                            lastChar = ' ';\n+                            break;\n+                    }\n+                    break;\n+                case ',':\n+                case '>':\n+                case ')':\n+                case '.':\n+                    if (lastChar == ' ') {\n+                        sb.setLength(sb.length() - 1);\n+                    }\n+                    \/\/ fallthrough\n+                default:\n+                    sb.append(ch);\n+                    lastChar = ch;\n+            }\n+        }\n+        \/\/ Delete trailing slash\n+        if (lastChar == '\/') {\n+            sb.setLength(sb.length() - 1);\n+        }\n+        return sb.toString();\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/CommentHelper.java","additions":51,"deletions":1,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n-    *                   Object)\n+    *                   Object\n+    *                   )\n@@ -36,1 +37,1 @@\n-    * @see InnerOne#baz(float priority) something\n+    * @see InnerOne#baz( float priority ) something\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSeeTag\/pkg\/Test.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}