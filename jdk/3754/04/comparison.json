{"files":[{"patch":"@@ -38,0 +38,1 @@\n+import java.util.Objects;\n@@ -1027,1 +1028,0 @@\n-                        break;\n@@ -1042,2 +1042,3 @@\n-        \/\/The text from the @see tag.  We will output this text when a label is not specified.\n-        Content text = plainOrCode(kind == LINK_PLAIN, Text.of(removeTrailingSlash(seeText)));\n+        \/\/ The signature from the @see tag. We will output this text when a label is not specified.\n+        Content text = plainOrCode(isLinkPlain,\n+                Text.of(Objects.requireNonNullElse(ch.getReferencedSignature(see), \"\")));\n@@ -1152,2 +1153,0 @@\n-            text = plainOrCode(kind == LINK_PLAIN, Text.of(refMemName));\n-\n@@ -1155,1 +1154,3 @@\n-                    refMem, (labelContent.isEmpty() ? text: labelContent), null, false);\n+                    refMem, (labelContent.isEmpty()\n+                            ? plainOrCode(isLinkPlain, Text.of(refMemName))\n+                            : labelContent), null, false);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -492,1 +492,1 @@\n-            if (refSignature.endsWith(\"[]\")) {\n+            if (refSignature != null && refSignature.endsWith(\"[]\")) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/SerializedFormBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -464,1 +464,1 @@\n-                return node.getSignature();\n+                return normalizeSignature(node.getSignature());\n@@ -469,0 +469,52 @@\n+    @SuppressWarnings(\"fallthrough\")\n+    private static String normalizeSignature(String sig) {\n+        if (sig == null\n+                || (!sig.contains(\" \") && !sig.contains(\"\\n\")\n+                 && !sig.contains(\"\\r\") && !sig.endsWith(\"\/\"))) {\n+            return sig;\n+        }\n+        StringBuilder sb = new StringBuilder();\n+        char lastChar = 0;\n+        for (int i = 0; i < sig.length(); i++) {\n+            char ch = sig.charAt(i);\n+            switch (ch) {\n+                case '\\n':\n+                case '\\r':\n+                case '\\f':\n+                case '\\t':\n+                case ' ':\n+                    \/\/ Add at most one space char, or none if it isn't needed\n+                    switch (lastChar) {\n+                        case 0:\n+                        case'(':\n+                        case'<':\n+                        case ' ':\n+                        case '.':\n+                            break;\n+                        default:\n+                            sb.append(' ');\n+                            lastChar = ' ';\n+                            break;\n+                    }\n+                    break;\n+                case ',':\n+                case '>':\n+                case ')':\n+                case '.':\n+                    \/\/ Remove preceding space character\n+                    if (lastChar == ' ') {\n+                        sb.setLength(sb.length() - 1);\n+                    }\n+                    \/\/ fallthrough\n+                default:\n+                    sb.append(ch);\n+                    lastChar = ch;\n+            }\n+        }\n+        \/\/ Delete trailing slash\n+        if (lastChar == '\/') {\n+            sb.setLength(sb.length() - 1);\n+        }\n+        return sb.toString();\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/CommentHelper.java","additions":54,"deletions":2,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug      8017191 8182765 8200432 8239804\n+ * @bug      8017191 8182765 8200432 8239804 8250766\n@@ -46,0 +46,1 @@\n+                \"--no-platform-links\",\n@@ -58,1 +59,3 @@\n-                <a href=\"Test.InnerOne.html#baz(float)\"><code>something<\/code><\/a><\/dd>\n+                <a href=\"Test.InnerOne.html#baz(float)\"><code>something<\/code><\/a>,\\s\n+                <a href=\"Test.InnerOne.html#format(java.lang.String,java.lang.Object...)\"><code>Test\\\n+                .InnerOne.format(java.lang.String, java.lang.Object...)<\/code><\/a><\/dd>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSeeTag\/TestSeeTag.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-    * Testing different combos of see tags.\n+    * Testing different combos of see tags, including some weird formatting.\n@@ -33,1 +33,3 @@\n-    * @see InnerOne#bar(Object)\n+    * @see InnerOne#bar(\n+    *                   Object\n+    *                   )\n@@ -36,0 +38,1 @@\n+    * @see InnerOne#format( java .lang.String  , java.  lang.Object ... )\n@@ -57,0 +60,7 @@\n+\n+        \/**\n+         * Test for multiple args and varargs.\n+         *\/\n+        public static String format(String s, Object... args) {\n+            return String.format(s, args);\n+        }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSeeTag\/pkg\/Test.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"}]}