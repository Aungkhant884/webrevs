{"files":[{"patch":"@@ -29,1 +29,0 @@\n-#include \"classfile\/javaClasses.inline.hpp\"\n@@ -31,1 +30,0 @@\n-#include \"jfr\/jni\/jfrJavaSupport.hpp\"\n@@ -36,1 +34,0 @@\n-#include \"oops\/instanceKlass.inline.hpp\"\n@@ -41,40 +38,0 @@\n-static oop get_codesource(oop pd, Thread* thread) {\n-  assert(pd != NULL, \"invariant\");\n-  assert(thread != NULL, \"invariant\");\n-  JavaValue result(T_OBJECT);\n-  JfrJavaArguments args(&result);\n-  args.set_klass(pd->klass());\n-  args.set_name(\"codesource\");\n-  args.set_signature(\"Ljava\/security\/CodeSource;\");\n-  args.set_receiver(pd);\n-  JfrJavaSupport::get_field(&args, thread);\n-  return result.get_oop();\n-}\n-\n-\/\/ Caller needs ResourceMark\n-static const char* get_locationNoFragString(oop codesource, Thread* thread) {\n-  assert(codesource != NULL, \"invariant\");\n-  assert(thread != NULL, \"invariant\");\n-  JavaValue result(T_OBJECT);\n-  JfrJavaArguments args(&result);\n-  args.set_klass(codesource->klass());\n-  args.set_name(\"locationNoFragString\");\n-  args.set_signature(\"Ljava\/lang\/String;\");\n-  args.set_receiver(codesource);\n-  JfrJavaSupport::get_field(&args, thread);\n-  const oop string_oop = result.get_oop();\n-  return string_oop != NULL ? JfrJavaSupport::c_str(string_oop, thread) : NULL;\n-}\n-\n-\/\/ Caller needs ResourceMark\n-static const char* codesource(const InstanceKlass* ik, Thread* thread) {\n-  assert(ik != NULL, \"invariant\");\n-  assert(thread != NULL, \"invariant\");\n-  oop pd = java_lang_Class::protection_domain(ik->java_mirror());\n-  if (pd == NULL) {\n-    return NULL;\n-  }\n-  oop codesource = get_codesource(pd, thread);\n-  return codesource != NULL ? get_locationNoFragString(codesource, thread) : NULL;\n-}\n-\n@@ -85,1 +42,1 @@\n-  const char* const url = codesource(ik, thread);\n+  const char* const url = fe != nullptr ? fe->codesource() : nullptr;\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrFinalizerStatisticsEvent.cpp","additions":1,"deletions":44,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+#include \"classfile\/javaClasses.inline.hpp\"\n+#include \"classfile\/symbolTable.hpp\"\n@@ -31,0 +33,1 @@\n+#include \"oops\/instanceKlass.inline.hpp\"\n@@ -32,0 +35,1 @@\n+#include \"runtime\/fieldDescriptor.inline.hpp\"\n@@ -40,0 +44,46 @@\n+static const char* allocate(oop string) {\n+  char* str = nullptr;\n+  const typeArrayOop value = java_lang_String::value(string);\n+  if (value != nullptr) {\n+    const int length = java_lang_String::utf8_length(string, value);\n+    str = NEW_C_HEAP_ARRAY(char, length, mtServiceability);\n+    java_lang_String::as_utf8_string(string, value, str, length + 1);\n+  }\n+  return str;\n+}\n+\n+static int compute_field_offset(const Klass* klass, const char* field_name, const char* field_signature) {\n+  assert(klass != nullptr, \"invariant\");\n+  Symbol* const name = SymbolTable::new_symbol(field_name);\n+  assert(name != nullptr, \"invariant\");\n+  Symbol* const signature = SymbolTable::new_symbol(field_signature);\n+  assert(signature != nullptr, \"invariant\");\n+  assert(klass->is_instance_klass(), \"invariant\");\n+  fieldDescriptor fd;\n+  InstanceKlass::cast(klass)->find_field(name, signature, false, &fd);\n+  return fd.offset();\n+}\n+\n+static const char* location_no_frag_string(oop codesource) {\n+  assert(codesource != nullptr, \"invariant\");\n+  static int loc_no_frag_offset = compute_field_offset(codesource->klass(), \"locationNoFragString\", \"Ljava\/lang\/String;\");\n+  oop string = codesource->obj_field(loc_no_frag_offset);\n+  return string != nullptr ? allocate(string) : nullptr;\n+}\n+\n+static oop codesource(oop pd) {\n+  assert(pd != nullptr, \"invariant\");\n+  static int codesource_offset = compute_field_offset(pd->klass(), \"codesource\", \"Ljava\/security\/CodeSource;\");\n+  return pd->obj_field(codesource_offset);\n+}\n+\n+static const char* get_codesource(const InstanceKlass* ik) {\n+  assert(ik != nullptr, \"invariant\");\n+  oop pd = java_lang_Class::protection_domain(ik->java_mirror());\n+  if (pd == nullptr) {\n+    return nullptr;\n+  }\n+  oop cs = codesource(pd);\n+  return cs != nullptr ? location_no_frag_string(cs) : nullptr;\n+}\n+\n@@ -42,0 +92,1 @@\n+    _codesource(get_codesource(ik)),\n@@ -45,0 +96,6 @@\n+FinalizerEntry::~FinalizerEntry() {\n+  if (_codesource != nullptr) {\n+    FREE_C_HEAP_ARRAY(char, _codesource);\n+  }\n+}\n+\n@@ -49,0 +106,4 @@\n+const char* FinalizerEntry::codesource() const {\n+  return _codesource;\n+}\n+\n","filename":"src\/hotspot\/share\/services\/finalizerService.cpp","additions":61,"deletions":0,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+  const char* _codesource;\n@@ -42,0 +43,1 @@\n+  ~FinalizerEntry();\n@@ -43,0 +45,1 @@\n+  const char* codesource() const NOT_MANAGEMENT_RETURN_(nullptr);\n","filename":"src\/hotspot\/share\/services\/finalizerService.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -102,1 +102,0 @@\n-                  Asserts.assertTrue(event.getString(\"codeSource\").startsWith(\"file:\/\/\"));\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestFinalizerStatisticsEvent.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}