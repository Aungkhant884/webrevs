{"files":[{"patch":"@@ -26,1 +26,1 @@\n-DOCLINT += -Xdoclint:all\/protected,-reference \\\n+DOCLINT += -Xdoclint:all\/protected,-reference,-missing \\\n","filename":"make\/modules\/java.desktop\/Java.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -185,3 +185,0 @@\n-\n-\n-\n@@ -198,0 +195,12 @@\n+            } else if (tree.getFirstSentence().isEmpty() && !isOverridingMethod) {\n+                if (tree.getBlockTags().isEmpty()) {\n+                    reportMissing(\"dc.empty.comment\");\n+                    return null;\n+                } else {\n+                    DocTree firstTag = tree.getBlockTags().get(0);\n+                    \/\/ Don't report an empty description if the comment begins with @deprecated,\n+                    \/\/ because javadoc will use the content of that tag in summary tables.\n+                    if (firstTag.getKind() != DocTree.Kind.DEPRECATED) {\n+                        env.messages.report(MISSING, Kind.WARNING, tree, \"dc.empty.description\");\n+                    }\n+                }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Checker.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -42,0 +42,2 @@\n+dc.empty.comment = empty comment\n+dc.empty.description = no initial description\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/resources\/doclint.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.util.Arrays;\n@@ -66,1 +65,1 @@\n-        \/* 02 *\/    \"public class Test { \/** *\/ Test() { }\\n\" +\n+        \/* 02 *\/    \"public class Test { \/** Constructor comment. *\/ Test() { }\\n\" +\n@@ -71,3 +70,1 @@\n-        \/* 07 *\/    \"\"\"\n-            \\s   private void syntaxError() { }\n-            \"\"\" +\n+        \/* 07 *\/    \"    private void syntaxError() { }\\n\" +\n@@ -75,10 +72,8 @@\n-        \/* 09 *\/    \"    \/** @see DoesNotExist *\/\\n\" +\n-        \/* 10 *\/    \"\"\"\n-            \\s   protected void referenceError() { }\n-            \"\"\" +\n-        \/* 11 *\/    \"\\n\" +\n-        \/* 12 *\/    \"    \/** @return *\/\\n\" +\n-        \/* 13 *\/    \"\"\"\n-            \\s   public int emptyReturn() { return 0; }\n-            \"\"\" +\n-        \/* 14 *\/    \"}\\n\";\n+        \/* 09 *\/    \"    \/** Description. \\n\" +\n+        \/* 10 *\/     \"     * @see DoesNotExist *\/\\n\" +\n+        \/* 11 *\/    \"    protected void referenceError() { }\\n\" +\n+        \/* 12 *\/    \"\\n\" +\n+        \/* 13 *\/    \"    \/** Description. \\n\" +\n+        \/* 14 *\/    \"     * @return *\/\\n\" +\n+        \/* 15 *\/    \"    public int emptyReturn() { return 0; }\\n\" +\n+        \/* 16 *\/    \"}\\n\";\n@@ -106,2 +101,2 @@\n-        DL_ERR9(ERROR, \"Test.java:9:14: compiler.err.proc.messager: reference not found\"),\n-        DL_WRN12(WARNING, \"Test.java:12:9: compiler.warn.proc.messager: no description for @return\"),\n+        DL_ERR10(ERROR, \"Test.java:10:13: compiler.err.proc.messager: reference not found\"),\n+        DL_WRN14(WARNING, \"Test.java:14:8: compiler.warn.proc.messager: no description for @return\"),\n@@ -115,2 +110,2 @@\n-        DL_ERR9A(ERROR, \"Test.java:9: error: reference not found\"),\n-        DL_WRN12A(WARNING, \"Test.java:12: warning: no description for @return\"),\n+        DL_ERR10A(ERROR, \"Test.java:10: error: reference not found\"),\n+        DL_WRN14A(WARNING, \"Test.java:14: warning: no description for @return\"),\n@@ -120,1 +115,1 @@\n-        JD_WRN13(WARNING, \"Test.java:13: warning: @return tag has no arguments.\"),\n+        JD_WRN14(WARNING, \"Test.java:14: warning: @return tag has no arguments.\"),\n@@ -159,1 +154,1 @@\n-                    EnumSet.of(Message.DL_ERR9A, Message.DL_WRN12A));\n+                    EnumSet.of(Message.DL_ERR10A, Message.DL_WRN14A));\n@@ -163,1 +158,1 @@\n-                    EnumSet.of(Message.DL_ERR9, Message.DL_WRN12));\n+                    EnumSet.of(Message.DL_ERR10, Message.DL_WRN14));\n@@ -171,1 +166,1 @@\n-                    EnumSet.of(Message.DL_ERR9, Message.DL_WRN12));\n+                    EnumSet.of(Message.DL_ERR10, Message.DL_WRN14));\n@@ -179,1 +174,1 @@\n-                    EnumSet.of(Message.DL_WRN12));\n+                    EnumSet.of(Message.DL_WRN14));\n@@ -183,1 +178,1 @@\n-                    EnumSet.of(Message.DL_WRN12));\n+                    EnumSet.of(Message.DL_WRN14));\n@@ -187,1 +182,1 @@\n-                    EnumSet.of(Message.DL_ERR6, Message.DL_ERR9, Message.DL_WRN12));\n+                    EnumSet.of(Message.DL_ERR6, Message.DL_ERR10, Message.DL_WRN14));\n@@ -191,1 +186,1 @@\n-                    EnumSet.of(Message.DL_ERR6, Message.DL_WRN12));\n+                    EnumSet.of(Message.DL_ERR6, Message.DL_WRN14));\n@@ -195,1 +190,1 @@\n-                    EnumSet.of(Message.DL_ERR9));\n+                    EnumSet.of(Message.DL_ERR10));\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/doclint\/DocLintTest.java","additions":23,"deletions":28,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -21,2 +21,2 @@\n-\/** *\/\n-public class AccessTest { \/** *\/ AccessTest() { }\n+\/** . *\/\n+public class AccessTest { \/** . *\/ AccessTest() { }\n@@ -44,2 +44,2 @@\n-\/** *\/\n-class AccessTest2 { \/** *\/ AccessTest2() { }\n+\/** Class comment. *\/\n+class AccessTest2 { \/** Constructor comment. *\/ AccessTest2() { }\n","filename":"test\/langtools\/tools\/doclint\/AccessTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -14,1 +14,1 @@\n-\/**\n+\/** .\n","filename":"test\/langtools\/tools\/doclint\/CustomTagTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -11,1 +11,4 @@\n-\/** @author *\/\n+\/**\n+ * .\n+ * @author\n+ *\/\n@@ -13,2 +16,2 @@\n-    \/** *\/ EmptyAuthorTest() { }\n-}\n+    \/** . *\/ EmptyAuthorTest() { }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/doclint\/EmptyAuthorTest.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,3 +1,3 @@\n-EmptyAuthorTest.java:11: warning: no description for @author\n-\/** @author *\/\n-    ^\n+EmptyAuthorTest.java:13: warning: no description for @author\n+ * @author\n+   ^\n","filename":"test\/langtools\/tools\/doclint\/EmptyAuthorTest.out","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8272374\n+ * @summary doclint should report missing \"body\" comments\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclint\n+ * @build DocLintTester\n+ * @run main DocLintTester -Xmsgs:-missing EmptyDescriptionTest.java\n+ * @run main DocLintTester -Xmsgs:missing -ref EmptyDescriptionTest.out EmptyDescriptionTest.java\n+ *\/\n+\n+\/** . *\/\n+public class EmptyDescriptionTest {\n+    \/\/ a default constructor triggers its own variant of \"no comment\"\n+\n+    \/\/ no comment\n+    public int f1;\n+\n+    \/\/ empty comment\n+    \/** *\/\n+    public int f2;\n+\n+    \/\/ empty description\n+    \/**\n+     * @since 1.0\n+     *\/\n+    public int f3;\n+\n+    \/\/ deprecated: no diagnostic\n+    \/**\n+     * @deprecated do not use\n+     *\/\n+    public int f4;\n+\n+    \/\/ no comment\n+    public int m1() { return 0; }\n+\n+    \/\/ empty comment\n+    \/** *\/\n+    public int m2() { return 0; }\n+\n+    \/\/ empty description\n+    \/**\n+     * @return 0\n+     *\/\n+    public int m3() { return 0; }\n+\n+    \/\/ deprecated: no diagnostic\n+    \/**\n+     * @deprecated do not use\n+     * @return 0\n+     *\/\n+    public int m4() { return 0; };\n+\n+    \/**\n+     * A class containing overriding methods.\n+     * Overriding methods with missing\/empty comments do not generate messages\n+     * since they are presumed to inherit descriptions as needed.\n+     *\/\n+    public static class Nested extends EmptyDescriptionTest {\n+        \/** . *\/ Nested() { }\n+\n+        @Override\n+        public int m1() { return 1; }\n+\n+        \/\/ empty comment\n+        \/** *\/\n+        @Override\n+        public int m2() { return 1; }\n+\n+        \/\/ empty description\n+        \/**\n+         * @return 1\n+         *\/\n+        @Override\n+        public int m3() { return 1; }\n+\n+    }\n+}\n","filename":"test\/langtools\/tools\/doclint\/EmptyDescriptionTest.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,22 @@\n+EmptyDescriptionTest.java:13: warning: use of default constructor, which does not provide a comment\n+public class EmptyDescriptionTest {\n+       ^\n+EmptyDescriptionTest.java:17: warning: no comment\n+    public int f1;\n+               ^\n+EmptyDescriptionTest.java:21: warning: empty comment\n+    public int f2;\n+               ^\n+EmptyDescriptionTest.java:25: warning: no initial description\n+     * @since 1.0\n+       ^\n+EmptyDescriptionTest.java:36: warning: no comment\n+    public int m1() { return 0; }\n+               ^\n+EmptyDescriptionTest.java:40: warning: empty comment\n+    public int m2() { return 0; }\n+               ^\n+EmptyDescriptionTest.java:44: warning: no initial description\n+     * @return 0\n+       ^\n+7 warnings\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/doclint\/EmptyDescriptionTest.out","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -12,2 +12,5 @@\n-public class EmptyExceptionTest {  \/** *\/ EmptyExceptionTest() { }\n-    \/** @exception NullPointerException *\/\n+public class EmptyExceptionTest {  \/** . *\/ EmptyExceptionTest() { }\n+    \/**\n+     * .\n+     * @exception NullPointerException\n+     *\/\n","filename":"test\/langtools\/tools\/doclint\/EmptyExceptionTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,3 +1,3 @@\n-EmptyExceptionTest.java:13: warning: no description for @exception\n-    \/** @exception NullPointerException *\/\n-        ^\n+EmptyExceptionTest.java:15: warning: no description for @exception\n+     * @exception NullPointerException\n+       ^\n","filename":"test\/langtools\/tools\/doclint\/EmptyExceptionTest.out","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -13,1 +13,4 @@\n-    \/** @param i *\/\n+    \/**\n+     * .\n+     * @param i\n+     *\/\n","filename":"test\/langtools\/tools\/doclint\/EmptyParamTest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,3 +1,3 @@\n-EmptyParamTest.java:13: warning: no description for @param\n-    \/** @param i *\/\n-        ^\n+EmptyParamTest.java:15: warning: no description for @param\n+     * @param i\n+       ^\n","filename":"test\/langtools\/tools\/doclint\/EmptyParamTest.out","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -13,1 +13,4 @@\n-    \/** @return *\/\n+    \/**\n+     * .\n+     * @return\n+     *\/\n","filename":"test\/langtools\/tools\/doclint\/EmptyReturnTest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,3 +1,3 @@\n-EmptyReturnTest.java:13: warning: no description for @return\n-    \/** @return *\/\n-        ^\n+EmptyReturnTest.java:15: warning: no description for @return\n+     * @return\n+       ^\n@@ -5,1 +5,0 @@\n-\n","filename":"test\/langtools\/tools\/doclint\/EmptyReturnTest.out","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -18,0 +18,1 @@\n+     * .\n","filename":"test\/langtools\/tools\/doclint\/EmptySerialFieldTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-EmptySerialFieldTest.java:18: warning: no description for @serialField\n+EmptySerialFieldTest.java:19: warning: no description for @serialField\n","filename":"test\/langtools\/tools\/doclint\/EmptySerialFieldTest.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -13,1 +13,4 @@\n-    \/** @since *\/\n+    \/**\n+     * .\n+     * @since\n+     *\/\n","filename":"test\/langtools\/tools\/doclint\/EmptySinceTest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,3 +1,3 @@\n-EmptySinceTest.java:13: warning: no description for @since\n-    \/** @since *\/\n-        ^\n+EmptySinceTest.java:15: warning: no description for @since\n+     * @since\n+       ^\n@@ -5,1 +5,0 @@\n-\n","filename":"test\/langtools\/tools\/doclint\/EmptySinceTest.out","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -13,1 +13,4 @@\n-    \/** @version *\/\n+    \/**\n+     * .\n+     * @version\n+     *\/\n","filename":"test\/langtools\/tools\/doclint\/EmptyVersionTest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,3 +1,3 @@\n-EmptyVersionTest.java:13: warning: no description for @version\n-    \/** @version *\/\n-        ^\n+EmptyVersionTest.java:15: warning: no description for @version\n+     * @version\n+       ^\n","filename":"test\/langtools\/tools\/doclint\/EmptyVersionTest.out","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -12,1 +12,3 @@\n-\/**@deprecated*\/\n+\/**\n+ * .\n+ * @deprecated*\/\n@@ -18,1 +20,3 @@\n-    \/**@see List*\/\n+    \/**\n+     * .\n+     * @see List*\/\n","filename":"test\/langtools\/tools\/doclint\/EndWithIdentifierTest.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-EndWithIdentifierTest.java:15: error: syntax error in reference\n+EndWithIdentifierTest.java:17: error: syntax error in reference\n@@ -4,2 +4,2 @@\n-EndWithIdentifierTest.java:18: error: reference not found\n-    \/**@see List*\/\n+EndWithIdentifierTest.java:22: error: reference not found\n+     * @see List*\/\n@@ -7,1 +7,1 @@\n-EndWithIdentifierTest.java:21: error: semicolon missing\n+EndWithIdentifierTest.java:25: error: semicolon missing\n@@ -10,1 +10,1 @@\n-EndWithIdentifierTest.java:24: error: malformed HTML\n+EndWithIdentifierTest.java:28: error: malformed HTML\n@@ -13,1 +13,1 @@\n-EndWithIdentifierTest.java:27: error: malformed HTML\n+EndWithIdentifierTest.java:31: error: malformed HTML\n@@ -16,1 +16,1 @@\n-EndWithIdentifierTest.java:30: error: malformed HTML\n+EndWithIdentifierTest.java:34: error: malformed HTML\n","filename":"test\/langtools\/tools\/doclint\/EndWithIdentifierTest.out","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    \/** *\/ LambdaTest() { }\n+    \/** . *\/ LambdaTest() { }\n","filename":"test\/langtools\/tools\/doclint\/LambdaTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-\/** *\/\n+\/** . *\/\n@@ -18,1 +18,1 @@\n-    \/** *\/\n+    \/** . *\/\n","filename":"test\/langtools\/tools\/doclint\/LiteralTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -13,1 +13,1 @@\n-    \/** *\/\n+    \/** . *\/\n@@ -16,1 +16,1 @@\n-    \/** *\/\n+    \/** . *\/\n@@ -19,1 +19,1 @@\n-    \/** *\/\n+    \/** . *\/\n@@ -22,1 +22,1 @@\n-    \/** *\/\n+    \/** . *\/\n","filename":"test\/langtools\/tools\/doclint\/MissingParamsTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -22,1 +22,1 @@\n-    \/** *\/\n+    \/** . *\/\n","filename":"test\/langtools\/tools\/doclint\/MissingReturnTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-\/** *\/\n+\/** . *\/\n@@ -13,1 +13,1 @@\n-    \/** *\/\n+    \/** . *\/\n@@ -16,1 +16,1 @@\n-    \/** *\/\n+    \/** . *\/\n","filename":"test\/langtools\/tools\/doclint\/MissingThrowsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -10,1 +10,4 @@\n-    \/** @return *\/\n+    \/**\n+     * .\n+     * @return\n+     *\/\n@@ -13,1 +16,1 @@\n-    \/** *\/\n+    \/** . *\/\n","filename":"test\/langtools\/tools\/doclint\/MultipleDocLintOptionsTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-MultipleDocLintOptionsTest.java:10:9: compiler.warn.proc.messager: no description for @return\n+MultipleDocLintOptionsTest.java:12:8: compiler.warn.proc.messager: no description for @return\n","filename":"test\/langtools\/tools\/doclint\/MultipleDocLintOptionsTest.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-\/** *\/\n+\/** . *\/\n@@ -14,0 +14,1 @@\n+     * .\n@@ -19,0 +20,1 @@\n+     * .\n@@ -24,0 +26,1 @@\n+     * .\n@@ -29,0 +32,1 @@\n+     * .\n@@ -34,0 +38,1 @@\n+     * .\n@@ -39,0 +44,1 @@\n+     * .\n@@ -44,0 +50,1 @@\n+     * .\n@@ -49,0 +56,1 @@\n+     * .\n@@ -54,0 +62,1 @@\n+     * .\n","filename":"test\/langtools\/tools\/doclint\/ReferenceTest.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-ReferenceTest.java:14: error: invalid use of @param\n+ReferenceTest.java:15: error: invalid use of @param\n@@ -4,1 +4,1 @@\n-ReferenceTest.java:19: error: invalid use of @param\n+ReferenceTest.java:21: error: invalid use of @param\n@@ -7,1 +7,1 @@\n-ReferenceTest.java:24: error: @param name not found\n+ReferenceTest.java:27: error: @param name not found\n@@ -10,1 +10,1 @@\n-ReferenceTest.java:26: warning: no @param for a\n+ReferenceTest.java:29: warning: no @param for a\n@@ -13,1 +13,1 @@\n-ReferenceTest.java:29: error: @param name not found\n+ReferenceTest.java:33: error: @param name not found\n@@ -16,1 +16,1 @@\n-ReferenceTest.java:34: error: reference not found\n+ReferenceTest.java:39: error: reference not found\n@@ -19,1 +19,1 @@\n-ReferenceTest.java:39: error: invalid use of @return\n+ReferenceTest.java:45: error: invalid use of @return\n@@ -22,1 +22,1 @@\n-ReferenceTest.java:44: error: invalid use of @return\n+ReferenceTest.java:51: error: invalid use of @return\n@@ -25,1 +25,1 @@\n-ReferenceTest.java:49: error: exception not thrown: java.lang.Exception\n+ReferenceTest.java:57: error: exception not thrown: java.lang.Exception\n@@ -28,1 +28,1 @@\n-ReferenceTest.java:62: error: reference not found\n+ReferenceTest.java:71: error: reference not found\n@@ -31,1 +31,1 @@\n-ReferenceTest.java:65: error: reference not found\n+ReferenceTest.java:74: error: reference not found\n@@ -34,1 +34,1 @@\n-ReferenceTest.java:72: error: reference not found\n+ReferenceTest.java:81: error: reference not found\n@@ -37,1 +37,1 @@\n-ReferenceTest.java:75: error: reference not found\n+ReferenceTest.java:84: error: reference not found\n","filename":"test\/langtools\/tools\/doclint\/ReferenceTest.out","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-\/** *\/\n+\/** . *\/\n@@ -18,1 +18,1 @@\n-    \/** *\/\n+    \/** . *\/\n","filename":"test\/langtools\/tools\/doclint\/SyntaxTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -15,1 +15,1 @@\n-\/** *\/\n+\/** . *\/\n@@ -17,1 +17,1 @@\n-    \/** *\/ Test() { }\n+    \/** . *\/ Test() { }\n","filename":"test\/langtools\/tools\/doclint\/packageTests\/bad\/Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -21,1 +21,1 @@\n-    \/** *\/ StatsTest() { }\n+    \/** . *\/ StatsTest() { }\n","filename":"test\/langtools\/tools\/doclint\/tool\/StatsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,14 +65,16 @@\n-        \/* 01 *\/    \"\/** Class comment. *\/\\n\" +\n-        \/* 02 *\/    \"public class Test { \/** *\/ Test() { }\\n\" +\n-        \/* 03 *\/    \"    \/** Method comment. *\/\\n\" +\n-        \/* 04 *\/    \"    public void method() { }\\n\" +\n-        \/* 05 *\/    \"\\n\" +\n-        \/* 06 *\/    \"    \/** Syntax < error. *\/\\n\" +\n-        \/* 07 *\/    \"    private void syntaxError() { }\\n\" +\n-        \/* 08 *\/    \"\\n\" +\n-        \/* 09 *\/    \"    \/** @see DoesNotExist *\/\\n\" +\n-        \/* 10 *\/    \"    protected void referenceError() { }\\n\" +\n-        \/* 08 *\/    \"\\n\" +\n-        \/* 09 *\/    \"    \/** @return *\/\\n\" +\n-        \/* 10 *\/    \"    public int emptyReturn() { return 0; }\\n\" +\n-        \/* 11 *\/    \"}\\n\";\n+            \/* 01 *\/    \"\/** Class comment. *\/\\n\" +\n+            \/* 02 *\/    \"public class Test { \/** Constructor comment. *\/ Test() { }\\n\" +\n+            \/* 03 *\/    \"    \/** Method comment. *\/\\n\" +\n+            \/* 04 *\/    \"    public void method() { }\\n\" +\n+            \/* 05 *\/    \"\\n\" +\n+            \/* 06 *\/    \"    \/** Syntax < error. *\/\\n\" +\n+            \/* 07 *\/    \"    private void syntaxError() { }\\n\" +\n+            \/* 08 *\/    \"\\n\" +\n+            \/* 09 *\/    \"    \/** Description. \\n\" +\n+            \/* 10 *\/     \"     * @see DoesNotExist *\/\\n\" +\n+            \/* 11 *\/    \"    protected void referenceError() { }\\n\" +\n+            \/* 12 *\/    \"\\n\" +\n+            \/* 13 *\/    \"    \/** Description. \\n\" +\n+            \/* 14 *\/    \"     * @return *\/\\n\" +\n+            \/* 15 *\/    \"    public int emptyReturn() { return 0; }\\n\" +\n+            \/* 16 *\/    \"}\\n\";\n@@ -84,2 +86,2 @@\n-        DL_ERR9(ERROR, \"Test.java:9:14: compiler.err.proc.messager: reference not found\"),\n-        DL_WRN12(WARNING, \"Test.java:12:9: compiler.warn.proc.messager: no description for @return\"),\n+        DL_ERR10(ERROR, \"Test.java:10:13: compiler.err.proc.messager: reference not found\"),\n+        DL_WRN14(WARNING, \"Test.java:14:8: compiler.warn.proc.messager: no description for @return\"),\n@@ -132,1 +134,1 @@\n-                    EnumSet.of(Message.DL_ERR6, Message.DL_ERR9, Message.DL_WRN12));\n+                    EnumSet.of(Message.DL_ERR6, Message.DL_ERR10, Message.DL_WRN14));\n@@ -136,1 +138,1 @@\n-                    EnumSet.of(Message.DL_WRN12));\n+                    EnumSet.of(Message.DL_WRN14));\n@@ -140,1 +142,1 @@\n-                    EnumSet.of(Message.DL_ERR6, Message.DL_WRN12));\n+                    EnumSet.of(Message.DL_ERR6, Message.DL_WRN14));\n@@ -144,1 +146,1 @@\n-                    EnumSet.of(Message.DL_ERR9));\n+                    EnumSet.of(Message.DL_ERR10));\n","filename":"test\/langtools\/tools\/javac\/doclint\/DocLintTest.java","additions":22,"deletions":20,"binary":false,"changes":42,"status":"modified"}]}