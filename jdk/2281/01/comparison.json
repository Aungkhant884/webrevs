{"files":[{"patch":"@@ -58,1 +58,0 @@\n-define_pd_global(bool, CICompileOSR,                 true );\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_globals_aarch64.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-define_pd_global(bool, CICompileOSR,                 true);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_globals_aarch64.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-define_pd_global(bool, CICompileOSR,                 true );\n","filename":"src\/hotspot\/cpu\/arm\/c1_globals_arm.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-define_pd_global(bool, CICompileOSR,                 true);\n","filename":"src\/hotspot\/cpu\/arm\/c2_globals_arm.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-define_pd_global(bool,     CICompileOSR,                 true);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_globals_ppc.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-define_pd_global(bool, CICompileOSR,                 true);\n","filename":"src\/hotspot\/cpu\/ppc\/c2_globals_ppc.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-define_pd_global(bool,     CICompileOSR,                 true);\n","filename":"src\/hotspot\/cpu\/s390\/c1_globals_s390.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-define_pd_global(bool, CICompileOSR,                 true);\n","filename":"src\/hotspot\/cpu\/s390\/c2_globals_s390.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-define_pd_global(bool,   CICompileOSR,                 true );\n","filename":"src\/hotspot\/cpu\/x86\/c1_globals_x86.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-define_pd_global(bool, CICompileOSR,                 true);\n","filename":"src\/hotspot\/cpu\/x86\/c2_globals_x86.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,4 +46,0 @@\n-  \/\/ Missing feature tests\n-  virtual bool supports_native()                 { return true; }\n-  virtual bool supports_osr   ()                 { return true; }\n-\n","filename":"src\/hotspot\/share\/c1\/c1_Compiler.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -103,5 +103,0 @@\n-  \/\/ Missing feature tests\n-  virtual bool supports_native()                 { return true; }\n-  virtual bool supports_osr   ()                 { return true; }\n-  virtual bool can_compile_method(const methodHandle& method)  { return true; }\n-\n@@ -173,1 +168,0 @@\n-\n","filename":"src\/hotspot\/share\/compiler\/abstractCompiler.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1390,2 +1390,1 @@\n-  if (comp == NULL || !comp->can_compile_method(method) ||\n-      compilation_is_prohibited(method, osr_bci, comp_level, directive->ExcludeOption)) {\n+  if (comp == NULL || compilation_is_prohibited(method, comp_level, directive->ExcludeOption)) {\n@@ -1570,18 +1569,1 @@\n-bool CompileBroker::compilation_is_prohibited(const methodHandle& method, int osr_bci, int comp_level, bool excluded) {\n-  bool is_native = method->is_native();\n-  \/\/ Some compilers may not support the compilation of natives.\n-  AbstractCompiler *comp = compiler(comp_level);\n-  if (is_native &&\n-      (!CICompileNatives || comp == NULL || !comp->supports_native())) {\n-    method->set_not_compilable_quietly(\"native methods not supported\", comp_level);\n-    return true;\n-  }\n-\n-  bool is_osr = (osr_bci != standard_entry_bci);\n-  \/\/ Some compilers may not support on stack replacement.\n-  if (is_osr &&\n-      (!CICompileOSR || comp == NULL || !comp->supports_osr())) {\n-    method->set_not_osr_compilable(\"OSR not supported\", comp_level);\n-    return true;\n-  }\n-\n+bool CompileBroker::compilation_is_prohibited(const methodHandle& method, int comp_level, bool excluded) {\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":2,"deletions":20,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -241,1 +241,1 @@\n-  static bool compilation_is_prohibited(const methodHandle& method, int osr_bci, int comp_level, bool excluded);\n+  static bool compilation_is_prohibited(const methodHandle& method, int comp_level, bool excluded);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,7 +75,0 @@\n-  develop(bool, CICompileNatives, true,                                     \\\n-          \"compile native methods if supported by the compiler\")            \\\n-                                                                            \\\n-  develop_pd(bool, CICompileOSR,                                            \\\n-          \"compile on stack replacement methods if supported by the \"       \\\n-          \"compiler\")                                                       \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-define_pd_global(bool, CICompileOSR,                 false);\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals_pd.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -70,3 +70,0 @@\n-  virtual bool supports_native()                 { return true; }\n-  virtual bool supports_osr   ()                 { return true; }\n-\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompiler.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}