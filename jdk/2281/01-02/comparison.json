{"files":[{"patch":"@@ -58,0 +58,1 @@\n+define_pd_global(bool, CICompileOSR,                 true );\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_globals_aarch64.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+define_pd_global(bool, CICompileOSR,                 true);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_globals_aarch64.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+define_pd_global(bool, CICompileOSR,                 true );\n","filename":"src\/hotspot\/cpu\/arm\/c1_globals_arm.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+define_pd_global(bool, CICompileOSR,                 true);\n","filename":"src\/hotspot\/cpu\/arm\/c2_globals_arm.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+define_pd_global(bool,     CICompileOSR,                 true);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_globals_ppc.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+define_pd_global(bool, CICompileOSR,                 true);\n","filename":"src\/hotspot\/cpu\/ppc\/c2_globals_ppc.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+define_pd_global(bool,     CICompileOSR,                 true);\n","filename":"src\/hotspot\/cpu\/s390\/c1_globals_s390.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+define_pd_global(bool, CICompileOSR,                 true);\n","filename":"src\/hotspot\/cpu\/s390\/c2_globals_s390.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+define_pd_global(bool,   CICompileOSR,                 true );\n","filename":"src\/hotspot\/cpu\/x86\/c1_globals_x86.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+define_pd_global(bool, CICompileOSR,                 true);\n","filename":"src\/hotspot\/cpu\/x86\/c2_globals_x86.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1390,1 +1390,1 @@\n-  if (comp == NULL || compilation_is_prohibited(method, comp_level, directive->ExcludeOption)) {\n+  if (comp == NULL || compilation_is_prohibited(method, osr_bci, comp_level, directive->ExcludeOption)) {\n@@ -1569,1 +1569,16 @@\n-bool CompileBroker::compilation_is_prohibited(const methodHandle& method, int comp_level, bool excluded) {\n+bool CompileBroker::compilation_is_prohibited(const methodHandle& method, int osr_bci, int comp_level, bool excluded) {\n+  bool is_native = method->is_native();\n+  \/\/ Some compilers may not support the compilation of natives.\n+  AbstractCompiler *comp = compiler(comp_level);\n+  if (is_native && (!CICompileNatives || comp == NULL)) {\n+    method->set_not_compilable_quietly(\"native methods not supported\", comp_level);\n+    return true;\n+  }\n+\n+  bool is_osr = (osr_bci != standard_entry_bci);\n+  \/\/ Some compilers may not support on stack replacement.\n+  if (is_osr && (!CICompileOSR || comp == NULL)) {\n+    method->set_not_osr_compilable(\"OSR not supported\", comp_level);\n+    return true;\n+  }\n+\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -241,1 +241,1 @@\n-  static bool compilation_is_prohibited(const methodHandle& method, int comp_level, bool excluded);\n+  static bool compilation_is_prohibited(const methodHandle& method, int osr_bci, int comp_level, bool excluded);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,0 +75,7 @@\n+  develop(bool, CICompileNatives, true,                                     \\\n+          \"compile native methods if supported by the compiler\")            \\\n+                                                                            \\\n+  develop_pd(bool, CICompileOSR,                                            \\\n+          \"compile on stack replacement methods if supported by the \"       \\\n+          \"compiler\")                                                       \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+define_pd_global(bool, CICompileOSR,                 false);\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals_pd.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}