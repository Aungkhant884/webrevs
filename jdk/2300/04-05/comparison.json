{"files":[{"patch":"@@ -150,2 +150,11 @@\n-                    if (argv.length > 6) {\n-                        result = invokeWithManyArguments(bootstrapMethod, caller, name, type, argv);\n+                    if (type instanceof Class<?> c) {\n+                        result = switch (argv.length) {\n+                            case 0 -> bootstrapMethod.invoke(caller, name, c);\n+                            case 1 -> bootstrapMethod.invoke(caller, name, c, argv[0]);\n+                            case 2 -> bootstrapMethod.invoke(caller, name, c, argv[0], argv[1]);\n+                            case 3 -> bootstrapMethod.invoke(caller, name, c, argv[0], argv[1], argv[2]);\n+                            case 4 -> bootstrapMethod.invoke(caller, name, c, argv[0], argv[1], argv[2], argv[3]);\n+                            case 5 -> bootstrapMethod.invoke(caller, name, c, argv[0], argv[1], argv[2], argv[3], argv[4]);\n+                            case 6 -> bootstrapMethod.invoke(caller, name, c, argv[0], argv[1], argv[2], argv[3], argv[4], argv[5]);\n+                            default -> invokeWithManyArguments(bootstrapMethod, caller, name, type, argv);\n+                        };\n@@ -153,24 +162,11 @@\n-                        if (type instanceof Class<?> c) {\n-                            result = switch (argv.length) {\n-                                case 0 -> bootstrapMethod.invoke(caller, name, c);\n-                                case 1 -> bootstrapMethod.invoke(caller, name, c, argv[0]);\n-                                case 2 -> bootstrapMethod.invoke(caller, name, c, argv[0], argv[1]);\n-                                case 3 -> bootstrapMethod.invoke(caller, name, c, argv[0], argv[1], argv[2]);\n-                                case 4 -> bootstrapMethod.invoke(caller, name, c, argv[0], argv[1], argv[2], argv[3]);\n-                                case 5 -> bootstrapMethod.invoke(caller, name, c, argv[0], argv[1], argv[2], argv[3], argv[4]);\n-                                case 6 -> bootstrapMethod.invoke(caller, name, c, argv[0], argv[1], argv[2], argv[3], argv[4], argv[5]);\n-                                default -> throw new IllegalStateException(\"Unexpected value: \" + argv.length);\n-                            };\n-                        } else {\n-                            MethodType mt = (MethodType) type;\n-                            result = switch (argv.length) {\n-                                case 0 -> bootstrapMethod.invoke(caller, name, mt);\n-                                case 1 -> bootstrapMethod.invoke(caller, name, mt, argv[0]);\n-                                case 2 -> bootstrapMethod.invoke(caller, name, mt, argv[0], argv[1]);\n-                                case 3 -> bootstrapMethod.invoke(caller, name, mt, argv[0], argv[1], argv[2]);\n-                                case 4 -> bootstrapMethod.invoke(caller, name, mt, argv[0], argv[1], argv[2], argv[3]);\n-                                case 5 -> bootstrapMethod.invoke(caller, name, mt, argv[0], argv[1], argv[2], argv[3], argv[4]);\n-                                case 6 -> bootstrapMethod.invoke(caller, name, mt, argv[0], argv[1], argv[2], argv[3], argv[4], argv[5]);\n-                                default -> throw new IllegalStateException(\"Unexpected value: \" + argv.length);\n-                            };\n-                        }\n+                        MethodType mt = (MethodType) type;\n+                        result = switch (argv.length) {\n+                            case 0 -> bootstrapMethod.invoke(caller, name, mt);\n+                            case 1 -> bootstrapMethod.invoke(caller, name, mt, argv[0]);\n+                            case 2 -> bootstrapMethod.invoke(caller, name, mt, argv[0], argv[1]);\n+                            case 3 -> bootstrapMethod.invoke(caller, name, mt, argv[0], argv[1], argv[2]);\n+                            case 4 -> bootstrapMethod.invoke(caller, name, mt, argv[0], argv[1], argv[2], argv[3]);\n+                            case 5 -> bootstrapMethod.invoke(caller, name, mt, argv[0], argv[1], argv[2], argv[3], argv[4]);\n+                            case 6 -> bootstrapMethod.invoke(caller, name, mt, argv[0], argv[1], argv[2], argv[3], argv[4], argv[5]);\n+                            default -> invokeWithManyArguments(bootstrapMethod, caller, name, type, argv);\n+                        };\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/BootstrapMethodInvoker.java","additions":22,"deletions":26,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+    private final String prefixedClassName;\n@@ -130,0 +131,1 @@\n+        this.prefixedClassName = CLASS_PREFIX + className;\n@@ -198,1 +200,1 @@\n-            maybeDump(CLASS_PREFIX + className, classFile);\n+            maybeDump(prefixedClassName, classFile);\n@@ -317,1 +319,1 @@\n-        Class<?> invokerClass = LOOKUP.makeHiddenClassDefiner(className(), classFile)\n+        Class<?> invokerClass = LOOKUP.makeHiddenClassDefiner(prefixedClassName, classFile)\n@@ -342,2 +344,2 @@\n-                CLASS_PREFIX.concat(className), null, INVOKER_SUPER_NAME, null);\n-        cw.visitSource(SOURCE_PREFIX.concat(className), null);\n+                prefixedClassName, null, INVOKER_SUPER_NAME, null);\n+        cw.visitSource(SOURCE_PREFIX + className, null);\n@@ -360,4 +362,0 @@\n-    private String className() {\n-        return CLASS_PREFIX.concat(className);\n-    }\n-\n@@ -365,1 +363,1 @@\n-        clinit(cw, className(), classData);\n+        clinit(cw, prefixedClassName, classData);\n@@ -650,1 +648,1 @@\n-            mv.visitFieldInsn(Opcodes.GETSTATIC, className(), classData(cls), \"Ljava\/lang\/Class;\");\n+            mv.visitFieldInsn(Opcodes.GETSTATIC, prefixedClassName, classData(cls), \"Ljava\/lang\/Class;\");\n@@ -839,1 +837,1 @@\n-            mv.visitFieldInsn(Opcodes.GETSTATIC, className(), classData(lambdaForm.customized), MH_SIG);\n+            mv.visitFieldInsn(Opcodes.GETSTATIC, prefixedClassName, classData(lambdaForm.customized), MH_SIG);\n@@ -972,1 +970,1 @@\n-            mv.visitFieldInsn(Opcodes.GETSTATIC, className(), classData(target), MH_SIG);\n+            mv.visitFieldInsn(Opcodes.GETSTATIC, prefixedClassName, classData(target), MH_SIG);\n@@ -991,1 +989,1 @@\n-    private static Class<?>[] STATICALLY_INVOCABLE_PACKAGES = {\n+    private static final Class<?>[] STATICALLY_INVOCABLE_PACKAGES = {\n@@ -1135,1 +1133,1 @@\n-            mv.visitFieldInsn(Opcodes.GETSTATIC, className(), classData(emptyArray), \"Ljava\/lang\/Object;\");\n+            mv.visitFieldInsn(Opcodes.GETSTATIC, prefixedClassName, classData(emptyArray), \"Ljava\/lang\/Object;\");\n@@ -1700,1 +1698,1 @@\n-                mv.visitFieldInsn(Opcodes.GETSTATIC, className(), classData(arg), \"Ljava\/lang\/Object;\");\n+                mv.visitFieldInsn(Opcodes.GETSTATIC, prefixedClassName, classData(arg), \"Ljava\/lang\/Object;\");\n@@ -1831,4 +1829,4 @@\n-        case LONG:    mv.visitInsn(Opcodes.L2I);  break;\n-        case FLOAT:   mv.visitInsn(Opcodes.F2I);  break;\n-        case DOUBLE:  mv.visitInsn(Opcodes.D2I);  break;\n-        default:      throw new InternalError(\"unknown type: \" + type);\n+            case LONG -> mv.visitInsn(Opcodes.L2I);\n+            case FLOAT -> mv.visitInsn(Opcodes.F2I);\n+            case DOUBLE -> mv.visitInsn(Opcodes.D2I);\n+            default -> throw new InternalError(\"unknown type: \" + type);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InvokerBytecodeGenerator.java","additions":17,"deletions":19,"binary":false,"changes":36,"status":"modified"}]}