{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,6 +36,0 @@\n-import java.io.IOException;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.reflect.Method;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n@@ -52,0 +46,7 @@\n+import java.io.IOException;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.reflect.Method;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n@@ -64,1 +65,1 @@\n-        compileCLasses(base);\n+        compileClasses(base);\n@@ -68,1 +69,1 @@\n-    private void compileCLasses(Path base) throws IOException {\n+    private void compileClasses(Path base) throws IOException {\n","filename":"test\/langtools\/tools\/javac\/RequiredParameterFlags\/ImplicitParameters.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -23,0 +23,1 @@\n+class ClassContainer {\n@@ -24,1 +25,1 @@\n-\/\/ key: compiler.err.enum.cant.be.generic\n+    enum MyEnum {}\n@@ -26,2 +27,3 @@\n-class EnumsCantBeGeneric {\n-    public enum E<T> {}\n+    record MyRecord(int a, Object b) {\n+        MyRecord {}\n+    }\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/elements\/MethodParameters\/ClassContainer.java","additions":5,"deletions":3,"binary":false,"changes":8,"previous_filename":"test\/langtools\/tools\/javac\/diags\/examples\/EnumsCantBeGeneric.java","status":"copied"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8292275\n+ * @summary Check origin of implicit parameters\n+ * @library \/tools\/javac\/lib\n+ * @modules java.compiler\n+ *          jdk.compiler\n+ * @build   JavacTestingAbstractProcessor ImplicitParametersProcessor\n+ * @compile -processor ImplicitParametersProcessor -proc:only ClassContainer.java\n+ *\/\n+\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.lang.model.util.Elements;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static javax.lang.model.util.ElementFilter.constructorsIn;\n+import static javax.lang.model.util.ElementFilter.methodsIn;\n+import static javax.lang.model.util.ElementFilter.typesIn;\n+\n+public class ImplicitParametersProcessor extends JavacTestingAbstractProcessor {\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        if (roundEnv.processingOver()) {\n+            return true;\n+        }\n+        boolean hasError = false;\n+        for (TypeElement typeElement : typesIn(roundEnv.getRootElements())) {\n+            for (TypeElement innerType : typesIn(typeElement.getEnclosedElements())) {\n+                System.out.println(\"Visiting \" + innerType);\n+                if (\"MyRecord\".contentEquals(innerType.getSimpleName())) {\n+                    hasError |= checkAllExecutables(innerType, Map.of(\n+                            \"<init>\", List.of(Elements.Origin.MANDATED, Elements.Origin.MANDATED)\n+                    ));\n+                } else if (\"MyEnum\".contentEquals(innerType.getSimpleName())) {\n+                    hasError |= checkAllExecutables(innerType, Map.of(\n+                            \"valueOf\", List.of(Elements.Origin.MANDATED)\n+                    ));\n+                }\n+            }\n+        }\n+        if (hasError) {\n+            throw new IllegalStateException(\"Wrong element origins found\");\n+        }\n+        return true;\n+    }\n+\n+    boolean checkAllExecutables(TypeElement element, Map<String, List<Elements.Origin>> expectations) {\n+        boolean hasError = false;\n+        for (ExecutableElement executable : constructorsIn(element.getEnclosedElements())) {\n+            hasError |= checkExecutable(expectations, executable);\n+        }\n+        for (ExecutableElement executable : methodsIn(element.getEnclosedElements())) {\n+            hasError |= checkExecutable(expectations, executable);\n+        }\n+        return hasError;\n+    }\n+\n+    private boolean checkExecutable(Map<String, List<Elements.Origin>> expectations, ExecutableElement executable) {\n+        System.out.println(\"Looking at executable \" + executable);\n+        List<Elements.Origin> list = expectations.get(executable.getSimpleName().toString());\n+        if (list == null) {\n+            System.out.println(\"ignoring this executable due to missing expectations\");\n+            return false;\n+        }\n+        List<? extends VariableElement> parameters = executable.getParameters();\n+        boolean hasError = false;\n+        for (int i = 0; i < parameters.size(); i++) {\n+            VariableElement parameter = parameters.get(i);\n+            Elements.Origin origin = eltUtils.getOrigin(parameter);\n+            if (origin != list.get(i)) {\n+                System.err.println(\"ERROR: Wrong origin for \" + executable + \". Expected: \" + list.get(i) + \" but got \" + origin + \" at index \" + i);\n+                hasError = true;\n+            }\n+        }\n+        return hasError;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/elements\/MethodParameters\/ImplicitParametersProcessor.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"}]}