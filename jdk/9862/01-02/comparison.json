{"files":[{"patch":"@@ -1,103 +1,103 @@\n-\/*\r\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\r\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n- *\r\n- * This code is free software; you can redistribute it and\/or modify it\r\n- * under the terms of the GNU General Public License version 2 only, as\r\n- * published by the Free Software Foundation.\r\n- *\r\n- * This code is distributed in the hope that it will be useful, but WITHOUT\r\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n- * version 2 for more details (a copy is included in the LICENSE file that\r\n- * accompanied this code).\r\n- *\r\n- * You should have received a copy of the GNU General Public License version\r\n- * 2 along with this work; if not, write to the Free Software Foundation,\r\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n- *\r\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n- * or visit www.oracle.com if you need additional information or have any\r\n- * questions.\r\n- *\/\r\n-\r\n-import java.lang.reflect.AccessFlag;\r\n-import java.lang.reflect.Parameter;\r\n-import java.util.Set;\r\n-\r\n-\/*\r\n- * @test\r\n- * @bug 8292275\r\n- * @summary Test required flags on parameters\r\n- * @compile RequiredMethodParameterFlagTest.java\r\n- * @run main RequiredMethodParameterFlagTest\r\n- *\/\r\n-public class RequiredMethodParameterFlagTest {\r\n-    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException {\r\n-        boolean errors = false;\r\n-        Set<AccessFlag> mandated = Set.of(AccessFlag.MANDATED);\r\n-        Set<AccessFlag> synthetic = Set.of(AccessFlag.SYNTHETIC);\r\n-        \/\/ test for implicit parameters\r\n-        Parameter[] parameters = Inner.class.getDeclaredConstructors()[0].getParameters();\r\n-        errors |= assertFlags(mandated, parameters[0]);\r\n-        errors |= assertFlags(Set.of(), parameters[1]);\r\n-\r\n-        parameters = findAnonymous().getDeclaredConstructors()[0].getParameters();\r\n-        errors |= assertFlags(mandated, parameters[0]);\r\n-        errors |= assertFlags(Set.of(), parameters[1]);\r\n-\r\n-        parameters = MyEnum.class.getDeclaredMethod(\"valueOf\", String.class).getParameters();\r\n-        errors |= assertFlags(mandated, parameters[0]);\r\n-\r\n-        parameters = MyRecord.class.getDeclaredConstructors()[0].getParameters();\r\n-        errors |= assertFlags(mandated, parameters[0]);\r\n-        errors |= assertFlags(mandated, parameters[1]);\r\n-\r\n-        \/\/ test for synthetic parameters\r\n-        \/\/ assuming javac creates two synthetic parameters corresponding to Enum(String name, int ordinal)\r\n-        parameters = MyEnum.class.getDeclaredConstructors()[0].getParameters();\r\n-        errors |= assertFlags(synthetic, parameters[0]);\r\n-        errors |= assertFlags(synthetic, parameters[1]);\r\n-        errors |= assertFlags(Set.of(), parameters[2]);\r\n-        errors |= assertFlags(Set.of(), parameters[3]);\r\n-\r\n-        if (errors) {\r\n-            throw new AssertionError();\r\n-        }\r\n-    }\r\n-\r\n-    \/\/ returns true on error\r\n-    private static boolean assertFlags(Set<AccessFlag> flags, Parameter parameter) {\r\n-        Set<AccessFlag> accessFlags = parameter.accessFlags();\r\n-        if (!accessFlags.containsAll(flags)) {\r\n-            System.err.println(\"Required flags not present\");\r\n-            System.err.println(\"Required: \" + flags);\r\n-            System.err.println(\"Actual: \" + accessFlags);\r\n-            return true;\r\n-        }\r\n-        return false;\r\n-    }\r\n-\r\n-    private static Class<?> findAnonymous() {\r\n-        try {\r\n-            return Class.forName(\"RequiredMethodParameterFlagTest$1\");\r\n-        } catch (ClassNotFoundException e) {\r\n-            throw new RuntimeException(\"Anonymous class missing\");\r\n-        }\r\n-    }\r\n-\r\n-    class Inner {\r\n-        public Inner(Inner notMandated) {}\r\n-    }\r\n-\r\n-    Inner anonymousInner = this.new Inner(null) {};\r\n-\r\n-    enum MyEnum {\r\n-        ;\r\n-        MyEnum(String s, int i) {}\r\n-    }\r\n-\r\n-    record MyRecord(int a, Object b) {\r\n-        MyRecord {}\r\n-    }\r\n-}\r\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.reflect.AccessFlag;\n+import java.lang.reflect.Parameter;\n+import java.util.Set;\n+\n+\/*\n+ * @test\n+ * @bug 8292275\n+ * @summary Test required flags on parameters\n+ * @compile RequiredMethodParameterFlagTest.java\n+ * @run main RequiredMethodParameterFlagTest\n+ *\/\n+public class RequiredMethodParameterFlagTest {\n+    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException {\n+        boolean errors = false;\n+        Set<AccessFlag> mandated = Set.of(AccessFlag.MANDATED);\n+        Set<AccessFlag> synthetic = Set.of(AccessFlag.SYNTHETIC);\n+        \/\/ test for implicit parameters\n+        Parameter[] parameters = Inner.class.getDeclaredConstructors()[0].getParameters();\n+        errors |= assertFlags(mandated, parameters[0]);\n+        errors |= assertFlags(Set.of(), parameters[1]);\n+\n+        parameters = findAnonymous().getDeclaredConstructors()[0].getParameters();\n+        errors |= assertFlags(mandated, parameters[0]);\n+        errors |= assertFlags(Set.of(), parameters[1]);\n+\n+        parameters = MyEnum.class.getDeclaredMethod(\"valueOf\", String.class).getParameters();\n+        errors |= assertFlags(mandated, parameters[0]);\n+\n+        parameters = MyRecord.class.getDeclaredConstructors()[0].getParameters();\n+        errors |= assertFlags(mandated, parameters[0]);\n+        errors |= assertFlags(mandated, parameters[1]);\n+\n+        \/\/ test for synthetic parameters\n+        \/\/ assuming javac creates two synthetic parameters corresponding to Enum(String name, int ordinal)\n+        parameters = MyEnum.class.getDeclaredConstructors()[0].getParameters();\n+        errors |= assertFlags(synthetic, parameters[0]);\n+        errors |= assertFlags(synthetic, parameters[1]);\n+        errors |= assertFlags(Set.of(), parameters[2]);\n+        errors |= assertFlags(Set.of(), parameters[3]);\n+\n+        if (errors) {\n+            throw new AssertionError();\n+        }\n+    }\n+\n+    \/\/ returns true on error\n+    private static boolean assertFlags(Set<AccessFlag> flags, Parameter parameter) {\n+        Set<AccessFlag> accessFlags = parameter.accessFlags();\n+        if (!accessFlags.containsAll(flags)) {\n+            System.err.println(\"Required flags not present\");\n+            System.err.println(\"Required: \" + flags);\n+            System.err.println(\"Actual: \" + accessFlags);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private static Class<?> findAnonymous() {\n+        try {\n+            return Class.forName(\"RequiredMethodParameterFlagTest$1\");\n+        } catch (ClassNotFoundException e) {\n+            throw new RuntimeException(\"Anonymous class missing\");\n+        }\n+    }\n+\n+    class Inner {\n+        public Inner(Inner notMandated) {}\n+    }\n+\n+    Inner anonymousInner = this.new Inner(null) {};\n+\n+    enum MyEnum {\n+        ;\n+        MyEnum(String s, int i) {}\n+    }\n+\n+    record MyRecord(int a, Object b) {\n+        MyRecord {}\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessFlag\/RequiredMethodParameterFlagTest.java","additions":103,"deletions":103,"binary":false,"changes":206,"status":"modified"}]}