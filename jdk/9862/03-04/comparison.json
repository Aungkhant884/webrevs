{"files":[{"patch":"@@ -1,30 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-class ClassContainer {\n-\n-    enum MyEnum {}\n-\n-    record MyRecord(int a, Object b) {\n-        MyRecord {}\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/elements\/MethodParameters\/ClassContainer.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"deleted"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary Check origin of implicit parameters\n+ * @summary Verify specific executables in enums and records have mandated parameters\n@@ -32,1 +32,1 @@\n- * @compile -processor ImplicitParametersProcessor -proc:only ClassContainer.java\n+ * @compile -processor ImplicitParametersProcessor -proc:only ImplicitParametersProcessor.java\n@@ -40,0 +40,1 @@\n+import java.util.Arrays;\n@@ -43,0 +44,1 @@\n+import java.util.stream.Collectors;\n@@ -59,9 +61,3 @@\n-                if (\"MyRecord\".contentEquals(innerType.getSimpleName())) {\n-                    hasError |= checkAllExecutables(innerType, Map.of(\n-                            \"<init>\", List.of(Elements.Origin.MANDATED, Elements.Origin.MANDATED)\n-                    ));\n-                } else if (\"MyEnum\".contentEquals(innerType.getSimpleName())) {\n-                    hasError |= checkAllExecutables(innerType, Map.of(\n-                            \"valueOf\", List.of(Elements.Origin.MANDATED)\n-                    ));\n-                }\n+                ExpectedOrigin[] expectedOrigins = innerType.getAnnotationsByType(ExpectedOrigin.class);\n+                    hasError |= checkAllExecutables(innerType, Arrays.stream(expectedOrigins)\n+                            .collect(Collectors.toMap(ExpectedOrigin::method, ExpectedOrigin::origins)));\n@@ -76,1 +72,1 @@\n-    boolean checkAllExecutables(TypeElement element, Map<String, List<Elements.Origin>> expectations) {\n+    boolean checkAllExecutables(TypeElement element, Map<String, Elements.Origin[]> expectations) {\n@@ -87,1 +83,1 @@\n-    private boolean checkExecutable(Map<String, List<Elements.Origin>> expectations, ExecutableElement executable) {\n+    private boolean checkExecutable(Map<String, Elements.Origin[]> expectations, ExecutableElement executable) {\n@@ -89,2 +85,2 @@\n-        List<Elements.Origin> list = expectations.get(executable.getSimpleName().toString());\n-        if (list == null) {\n+        Elements.Origin[] origins = expectations.get(executable.getSimpleName().toString());\n+        if (origins == null) {\n@@ -99,2 +95,2 @@\n-            if (origin != list.get(i)) {\n-                System.err.println(\"ERROR: Wrong origin for \" + executable + \". Expected: \" + list.get(i) + \" but got \" + origin + \" at index \" + i);\n+            if (origin != origins[i]) {\n+                System.err.println(\"ERROR: Wrong origin for \" + executable + \". Expected: \" + origins[i] + \" but got \" + origin + \" at index \" + i);\n@@ -106,0 +102,15 @@\n+\n+    \/\/ the valueOf(String) method has one mandated parameter\n+    @ExpectedOrigin(method = \"valueOf\", origins = {Elements.Origin.MANDATED})\n+    enum MyEnum {}\n+\n+    \/\/ the parameters of a compact record constructor are mandated\n+    @ExpectedOrigin(method = \"<init>\", origins = {Elements.Origin.MANDATED, Elements.Origin.MANDATED})\n+    record MyRecord(int a, Object b) {\n+        MyRecord {}\n+    }\n+\n+    @interface ExpectedOrigin {\n+        String method();\n+        Elements.Origin[] origins();\n+    }\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/elements\/MethodParameters\/ImplicitParametersProcessor.java","additions":28,"deletions":17,"binary":false,"changes":45,"status":"modified"}]}