{"files":[{"patch":"@@ -650,1 +650,0 @@\n-#ifndef PRODUCT\n@@ -655,1 +654,0 @@\n-#endif\n@@ -946,1 +944,0 @@\n-#ifdef ASSERT\n@@ -950,1 +947,0 @@\n-#endif\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"ci\/ciReplay.hpp\"\n@@ -194,9 +193,0 @@\n-#ifndef PRODUCT\n-      if (ReplayCompiles && o->is_klass()) {\n-        Klass* k = (Klass*)o;\n-        if (k->is_instance_klass() && ciReplay::is_klass_unresolved((InstanceKlass*)k)) {\n-          \/\/ Klass was unresolved at replay dump time. Simulate this case.\n-          return ciEnv::_unloaded_ciinstance_klass;\n-        }\n-      }\n-#endif\n","filename":"src\/hotspot\/share\/ci\/ciEnv.hpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -158,1 +158,0 @@\n-#ifdef ASSERT\n@@ -162,1 +161,0 @@\n-#endif\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -264,1 +264,0 @@\n-#ifndef PRODUCT\n@@ -271,1 +270,0 @@\n-#endif\n","filename":"src\/hotspot\/share\/ci\/ciMethodData.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"ci\/ciReplay.hpp\"\n@@ -288,0 +289,8 @@\n+  if (ReplayCompiles && key->is_klass()) {\n+    Klass* k = (Klass*)key;\n+    if (k->is_instance_klass() && ciReplay::is_klass_unresolved((InstanceKlass*)k)) {\n+      \/\/ Klass was unresolved at replay dump time. Simulate this case.\n+      return ciEnv::_unloaded_ciinstance_klass;\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/ci\/ciObjectFactory.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,2 +59,0 @@\n-#ifndef PRODUCT\n-\n@@ -1587,1 +1585,0 @@\n-#endif \/\/ PRODUCT\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -102,1 +102,0 @@\n-#ifndef PRODUCT\n@@ -126,1 +125,0 @@\n-#endif\n","filename":"src\/hotspot\/share\/ci\/ciReplay.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -308,1 +308,1 @@\n-  develop(bool, ReplayCompiles, false,                                      \\\n+  product(bool, ReplayCompiles, false, DIAGNOSTIC,                          \\\n@@ -319,1 +319,1 @@\n-  develop(intx, ReplaySuppressInitializers, 2,                              \\\n+  product(intx, ReplaySuppressInitializers, 2, DIAGNOSTIC,                  \\\n@@ -328,1 +328,1 @@\n-  develop(bool, ReplayIgnoreInitErrors, false,                              \\\n+  product(bool, ReplayIgnoreInitErrors, false, DIAGNOSTIC,                  \\\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3659,1 +3659,0 @@\n-#ifndef PRODUCT\n@@ -3661,1 +3660,0 @@\n-#endif\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3874,0 +3874,2 @@\n+#ifndef PRODUCT\n+  \/\/ UseDebuggerErgo is notproduct\n@@ -3877,0 +3879,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @summary Test that VM rejects and invalid replay file.\n+ * @library \/test\/lib\n+ * @requires vm.compMode != \"Xint\"\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver TestInvalidReplayFile\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+\n+public class TestInvalidReplayFile {\n+\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ This test also serves as a very basic sanity test for release VMs (accepting the replay options and\n+        \/\/ attempting to read the replay file). Most of the tests in ciReplay use -XX:CICrashAt to induce artificial\n+        \/\/ crashes into the compiler, and that option is not available for release VMs. Therefore we cannot generate\n+        \/\/ replay files as a test in release builds.\n+\n+        File f = new File(\"bogus-replay-file.txt\");\n+        FileWriter w = new FileWriter(f);\n+        w.write(\"Bogus 123\");\n+        w.flush();\n+        w.close();\n+\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-Xmx100M\",\n+                \"-XX:+ReplayCompiles\", \"-XX:ReplayDataFile=.\/bogus-replay-file.txt\");\n+\n+        OutputAnalyzer output_detail = new OutputAnalyzer(pb.start());\n+        output_detail.shouldNotHaveExitValue(0);\n+        output_detail.shouldContain(\"Error while parsing\");\n+\n+    }\n+}\n+\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/TestInvalidReplayFile.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}