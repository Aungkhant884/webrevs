{"files":[{"patch":"@@ -99,1 +99,1 @@\n-    public VarHandle asExact() {\n+    public VarHandle withInvokeExactBehaviour() {\n@@ -104,1 +104,1 @@\n-    public VarHandle asGeneric() {\n+    public VarHandle withInvokeBehaviour() {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/IndirectVarHandle.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -469,1 +469,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Invokers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -285,2 +285,2 @@\n- * <p>\n- * Invocation of an access mode method behaves as if an invocation of\n+ * <p id=\"invoke-behaviour\">\n+ * Invocation of an access mode method behaves, by default, as if an invocation of\n@@ -331,0 +331,31 @@\n+ * <p id=\"invoke-exact-behaviour\">\n+ * A VarHandle's invocation behaviour can be adjusted (see {@link #withInvokeExactBehaviour}) such that invocation of\n+ * an access mode method behaves as if invocation of {@link MethodHandle#invokeExact},\n+ * where the receiving method handle accepts the VarHandle instance as the leading argument.\n+ * More specifically, the following, where {@code {access-mode}} corresponds to the access mode method\n+ * name:\n+ * <pre> {@code\n+ * VarHandle vh = ..\n+ * R r = (R) vh.{access-mode}(p1, p2, ..., pN);\n+ * }<\/pre>\n+ * behaves as if:\n+ * <pre> {@code\n+ * VarHandle vh = ..\n+ * VarHandle.AccessMode am = VarHandle.AccessMode.valueFromMethodName(\"{access-mode}\");\n+ * MethodHandle mh = MethodHandles.varHandleExactInvoker(\n+ *                       am,\n+ *                       vh.accessModeType(am));\n+ *\n+ * R r = (R) mh.invokeExact(vh, p1, p2, ..., pN)\n+ * }<\/pre>\n+ * (modulo access mode methods do not declare throwing of {@code Throwable}).\n+ *\n+ * More concisely, such behaviour is equivalent to:\n+ * <pre> {@code\n+ * VarHandle vh = ..\n+ * VarHandle.AccessMode am = VarHandle.AccessMode.valueFromMethodName(\"{access-mode}\");\n+ * MethodHandle mh = vh.toMethodHandle(am);\n+ *\n+ * R r = (R) mh.invokeExact(p1, p2, ..., pN)\n+ * }<\/pre>\n+ * Where, in this case, the method handle is bound to the VarHandle instance.\n@@ -475,4 +506,1 @@\n-     * Returns {@code true} if this var handle is <em>exact<\/em>. An exact var handle\n-     * will check whether the type at the call site of one of it's signature-polymorphic\n-     * methods, matches the expected type exactly, and throw a\n-     * {@link WrongMethodTypeException} in case of a mismatch.\n+     * Returns {@code true} if this VarHandle has <a href=\"#invoke-exact-behaviour\"><em>invoke-exact behaviour<\/em><\/a>.\n@@ -480,3 +508,4 @@\n-     * @see #asExact()\n-     *\n-     * @return {@code true} if this var handle is exact.\n+     * @see #withInvokeExactBehaviour()\n+     * @see #withInvokeBehaviour()\n+     * @return {@code true} if this VarHandle has <a href=\"#invoke-exact-behaviour\"><em>invoke-exact behaviour<\/em><\/a>.\n+     * @since 16\n@@ -484,1 +513,1 @@\n-    public boolean isExact() {\n+    public boolean hasInvokeExactBehaviour() {\n@@ -1565,8 +1594,14 @@\n-     * Returns a var handle that, upon invocation of one of its signature-polymorphic methods,\n-     * checks whether the invocation type matches the expected type of the invoked method exactly\n-     * without performing <em>any<\/em> type adaptations. A {@link WrongMethodTypeException} is\n-     * thrown in case of a mismatch.\n-     *\n-     * @see #asGeneric()\n-     *\n-     * @return an exact version of this var handle\n+     * Returns a VarHandle, with access to the same variable(s) as this VarHandle, but whose\n+     * invocation behaviour of access mode methods is adjusted to\n+     * <a href=\"#invoke-exact-behaviour\"><em>invoke-exact behaviour<\/em><\/a>.\n+     * <p>\n+     * If this VarHandle already has invoke-exact behaviour this VarHandle is returned.\n+     * @apiNote\n+     * Invoke-exact behaviour guarantees that that upon invocation of an access mode method\n+     * the types an arity of the arguments must match the {@link #accessModeType(AccessMode) access mode type},\n+     * otherwise a {@link WrongMethodTypeException} is thrown.\n+     *\n+     * @see #withInvokeBehaviour()\n+     * @see #hasInvokeExactBehaviour()\n+     * @return a VarHandle with invoke-exact behaviour\n+     * @since 16\n@@ -1574,1 +1609,1 @@\n-    public abstract VarHandle asExact();\n+    public abstract VarHandle withInvokeExactBehaviour();\n@@ -1577,7 +1612,10 @@\n-     * Returns a var handle that, upon invocation of one of its signature-polymorphic methods,\n-     * will try to adapt the types of the argument(s) to the expected type of the invocation if\n-     * possible, rather than throwing an exception in case of a mismatch.\n-     *\n-     * @see #asExact()\n-     *\n-     * @return an exact version of this var handle\n+     * Returns a VarHandle, with access to the same variable(s) as this VarHandle, but whose\n+     * invocation behaviour of access mode methods is adjusted to\n+     * <a href=\"#invoke-behaviour\"><em>invoke behaviour<\/em><\/a>.\n+     * <p>\n+     * If this VarHandle already has invoke behaviour this VarHandle is returned.\n+     *\n+     * @see #withInvokeExactBehaviour()\n+     * @see #hasInvokeExactBehaviour()\n+     * @return a VarHandle with invoke behaviour\n+     * @since 16\n@@ -1585,1 +1623,1 @@\n-    public abstract VarHandle asGeneric();\n+    public abstract VarHandle withInvokeBehaviour();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java","additions":65,"deletions":27,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -54,1 +54,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -72,1 +72,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -88,1 +88,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -105,1 +105,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -122,1 +122,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -138,1 +138,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -156,1 +156,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -172,1 +172,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -188,1 +188,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -204,1 +204,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -220,1 +220,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -238,1 +238,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -254,1 +254,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -270,1 +270,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -286,1 +286,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -302,1 +302,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -320,1 +320,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -336,1 +336,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -352,1 +352,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -368,1 +368,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -384,1 +384,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -402,1 +402,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -418,1 +418,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -434,1 +434,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -450,1 +450,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -467,1 +467,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -485,1 +485,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -501,1 +501,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -517,1 +517,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -535,1 +535,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -551,1 +551,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -567,1 +567,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -583,1 +583,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -599,1 +599,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -617,1 +617,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -633,1 +633,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -649,1 +649,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -665,1 +665,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -681,1 +681,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -699,1 +699,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -715,1 +715,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -731,1 +731,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -747,1 +747,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -763,1 +763,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -781,1 +781,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -797,1 +797,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -813,1 +813,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -829,1 +829,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -846,1 +846,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -864,1 +864,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -880,1 +880,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -897,1 +897,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -914,1 +914,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -932,1 +932,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -948,1 +948,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -964,1 +964,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -980,1 +980,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -998,1 +998,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -1014,1 +1014,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -1030,1 +1030,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -1046,1 +1046,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -1062,1 +1062,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -1080,1 +1080,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -1096,1 +1096,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -1112,1 +1112,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -1128,1 +1128,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -1144,1 +1144,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -1162,1 +1162,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -1178,1 +1178,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -1194,1 +1194,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -1210,1 +1210,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -1226,1 +1226,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -1244,1 +1244,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -1260,1 +1260,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -1276,1 +1276,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -1292,1 +1292,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -1310,1 +1310,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -1326,1 +1326,1 @@\n-        if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+        if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandleGuards.java","additions":79,"deletions":79,"binary":false,"changes":158,"status":"modified"},{"patch":"@@ -684,1 +684,1 @@\n-\/\/                    if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+\/\/                    if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n@@ -702,1 +702,1 @@\n-\/\/                    if (handle.isExact() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n+\/\/                    if (handle.hasInvokeExactBehaviour() && handle.accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-        public FieldInstanceReadOnly asExact() {\n+        public FieldInstanceReadOnly withInvokeExactBehaviour() {\n@@ -67,1 +67,1 @@\n-        public FieldInstanceReadOnly asGeneric() {\n+        public FieldInstanceReadOnly withInvokeBehaviour() {\n@@ -132,1 +132,1 @@\n-        public FieldInstanceReadWrite asExact() {\n+        public FieldInstanceReadWrite withInvokeExactBehaviour() {\n@@ -137,1 +137,1 @@\n-        public FieldInstanceReadWrite asGeneric() {\n+        public FieldInstanceReadWrite withInvokeBehaviour() {\n@@ -398,1 +398,1 @@\n-        public FieldStaticReadOnly asExact() {\n+        public FieldStaticReadOnly withInvokeExactBehaviour() {\n@@ -403,1 +403,1 @@\n-        public FieldStaticReadOnly asGeneric() {\n+        public FieldStaticReadOnly withInvokeBehaviour() {\n@@ -470,1 +470,1 @@\n-        public FieldStaticReadWrite asExact() {\n+        public FieldStaticReadWrite withInvokeExactBehaviour() {\n@@ -475,1 +475,1 @@\n-        public FieldStaticReadWrite asGeneric() {\n+        public FieldStaticReadWrite withInvokeBehaviour() {\n@@ -737,1 +737,1 @@\n-        public Array asExact() {\n+        public Array withInvokeExactBehaviour() {\n@@ -742,1 +742,1 @@\n-        public Array asGeneric() {\n+        public Array withInvokeBehaviour() {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandle.java.template","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-        public ArrayHandle asExact() {\n+        public ArrayHandle withInvokeExactBehaviour() {\n@@ -93,1 +93,1 @@\n-        public ArrayHandle asGeneric() {\n+        public ArrayHandle withInvokeBehaviour() {\n@@ -580,1 +580,1 @@\n-        public ByteBufferHandle asExact() {\n+        public ByteBufferHandle withInvokeExactBehaviour() {\n@@ -585,1 +585,1 @@\n-        public ByteBufferHandle asGeneric() {\n+        public ByteBufferHandle withInvokeBehaviour() {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-            vh.asGeneric().set(w, testValue);\n+            vh.withInvokeBehaviour().set(w, testValue);\n@@ -92,1 +92,1 @@\n-        vh = vh.asExact();\n+        vh = vh.withInvokeExactBehaviour();\n@@ -111,1 +111,1 @@\n-            Object o2 = vh.asGeneric().get(w);\n+            Object o2 = vh.withInvokeBehaviour().get(w);\n@@ -116,1 +116,1 @@\n-        vh = vh.asExact();\n+        vh = vh.withInvokeExactBehaviour();\n@@ -135,1 +135,1 @@\n-            vh.asGeneric().set(testValue);\n+            vh.withInvokeBehaviour().set(testValue);\n@@ -140,1 +140,1 @@\n-        vh = vh.asExact();\n+        vh = vh.withInvokeExactBehaviour();\n@@ -158,1 +158,1 @@\n-            Object o2 = vh.asGeneric().get();\n+            Object o2 = vh.withInvokeBehaviour().get();\n@@ -163,1 +163,1 @@\n-        vh = vh.asExact();\n+        vh = vh.withInvokeExactBehaviour();\n@@ -179,1 +179,1 @@\n-            vh.asGeneric().set(arr, 0, testValue);\n+            vh.withInvokeBehaviour().set(arr, 0, testValue);\n@@ -184,1 +184,1 @@\n-        vh = vh.asExact();\n+        vh = vh.withInvokeExactBehaviour();\n@@ -201,1 +201,1 @@\n-            vh.asGeneric().set(buff, 0, testValue);\n+            vh.withInvokeBehaviour().set(buff, 0, testValue);\n@@ -206,1 +206,1 @@\n-        vh = vh.asExact();\n+        vh = vh.withInvokeExactBehaviour();\n@@ -223,1 +223,1 @@\n-                vh.asGeneric().set(base, testValue);\n+                vh.withInvokeBehaviour().set(base, testValue);\n@@ -228,1 +228,1 @@\n-            vh = vh.asExact();\n+            vh = vh.withInvokeExactBehaviour();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestExact.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        exact = generic.asExact();\n+        exact = generic.withInvokeExactBehaviour();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/VarHandleExact.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-        exact = generic.asExact();\n+        exact = generic.withInvokeExactBehaviour();\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/VarHandleExact.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}