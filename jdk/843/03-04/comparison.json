{"files":[{"patch":"@@ -474,1 +474,11 @@\n-    boolean isExact() {\n+    \/**\n+     * Returns {@code true} if this var handle is <em>exact<\/em>. An exact var handle\n+     * will check whether the type at the call site of one of it's signature-polymorphic\n+     * methods, matches the expected type exactly, and throw a\n+     * {@link WrongMethodTypeException} in case of a mismatch.\n+     *\n+     * @see #asExact()\n+     *\n+     * @return {@code true} if this var handle is exact.\n+     *\/\n+    public boolean isExact() {\n@@ -1555,3 +1565,8 @@\n-     * Returns the a var handle that, upon use, checks whether the invocation type matches\n-     * the type of this var handle exactly, and otherwise throws a {@link WrongMethodTypeException}\n-     * @return the exact var handle\n+     * Returns a var handle that, upon invocation of one of its signature-polymorphic methods,\n+     * checks whether the invocation type matches the expected type of the invoked method exactly\n+     * without performing <em>any<\/em> type adaptations. A {@link WrongMethodTypeException} is\n+     * thrown in case of a mismatch.\n+     *\n+     * @see #asGeneric()\n+     *\n+     * @return an exact version of this var handle\n@@ -1562,3 +1577,7 @@\n-     * Returns the a var handle that, upon use, checks whether the invocation type matches\n-     * the type of this var handle exactly, and otherwise throws a {@link WrongMethodTypeException}\n-     * @return the exact var handle\n+     * Returns a var handle that, upon invocation of one of its signature-polymorphic methods,\n+     * will try to adapt the types of the argument(s) to the expected type of the invocation if\n+     * possible, rather than throwing an exception in case of a mismatch.\n+     *\n+     * @see #asExact()\n+     *\n+     * @return an exact version of this var handle\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java","additions":26,"deletions":7,"binary":false,"changes":33,"status":"modified"}]}