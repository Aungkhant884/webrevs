[{"commit":{"message":"Add additional asserts to tests checking result of hasInvokeExactBehavior"},"files":[{"filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestExact.java"}],"sha":"4248f7eeaea6d9d641670072ce6ef8f465fb5876"},{"commit":{"message":"Re-order javadoc"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java"}],"sha":"3097f0800403be9bee7a82b1ef94b888be7c676c"},{"commit":{"message":"Merge branch 'master' into Exact_VarHandle"},"files":[],"sha":"ea7c920c3280efd7571afb592ca670ff19ab4165"},{"commit":{"message":"Address review comments:\n- Fix typo\n- add specification about return value of hasInvokeExactBehaviour"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java"}],"sha":"e2e378fc9daa2b573c6760f542904c3d2a5cbc0c"},{"commit":{"message":"s\/an arity\/and arity"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java"}],"sha":"e92bd30fde7617feb84e3df1932ac957bc4603e7"},{"commit":{"message":"behaviour -> behavior in javadoc as well"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java"}],"sha":"d49e3f309aea9e09d1300eb8e0f87ee0c52af9b4"},{"commit":{"message":"- behaviour -> behaviour\n- Return same VarHandle instance when instance is already exact\/non-exact"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/IndirectVarHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Invokers.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandleGuards.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandle.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template"},{"filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestExact.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/VarHandleExact.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/VarHandleExact.java"}],"sha":"ff4c08d2fea3a9ed5ae61ba813da51138383f37b"},{"commit":{"message":"Update Javadoc, and rename asExact and asGeneric to withInvokeExactBehaviour and withInvokeBehaviour"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/IndirectVarHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Invokers.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandleGuards.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandle.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template"},{"filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestExact.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/VarHandleExact.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/VarHandleExact.java"}],"sha":"3c707bc73b971a82bef162e4cc077d1ef0e1d1e9"},{"commit":{"message":"Merge branch 'master' into Exact_VarHandle"},"files":[],"sha":"417406b78d5238fb591d2762a7a35222076caea9"},{"commit":{"message":"Use AccessType ordinal in guard checks instead of the AccessMode ordinal"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Invokers.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandleGuards.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java"}],"sha":"8e5fb451bf532426847f8f427257fa0ad9345be3"},{"commit":{"message":"Update accessModeType to use the AccessType ordinal directly."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/IndirectVarHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemoryAccessVarHandleGenerator.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandle.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template"}],"sha":"16d9fd0ed5da36cdc924130ec3849f4eccdfda2f"},{"commit":{"message":"Add benchmarks"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/VarHandleExact.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/VarHandleExact.java"}],"sha":"7b5966dd7fe72cef451c20b5e8a123b9f8c773ff"},{"commit":{"message":"- Update javadoc\n- Make isExact() public"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java"}],"sha":"354e233bb5886e71ef15ae33306f0cb9706876fc"},{"commit":{"message":"Fixes failing tests, and enable verifier on Exact test"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemoryAccessVarHandleGenerator.java"},{"filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestExact.java"}],"sha":"6d7ad47731332ed7ce9189b2d005694dad9e138c"},{"commit":{"message":"Fix whitespace"},"files":[{"filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestExact.java"}],"sha":"be9e940d742a4e5a9cff90294d1d219715584ef6"},{"commit":{"message":"Comment out VarHandleGuards generator code"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java"}],"sha":"2e9cb6b345c04b11f6be29ee50cbfe41ab3cbe84"},{"commit":{"message":"Makes exactness a property of a VarHandle, not a VarForm, since the latter are shared. Use handle.accessModeType to get the exact type of the VarHandle."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/IndirectVarHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Invokers.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemoryAccessVarHandleBase.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemoryAccessVarHandleGenerator.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandleGuards.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandle.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template"},{"filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestExact.java"}],"sha":"d699414be303e1146cdfe9d5ae97e07b39f34fb3"},{"commit":{"message":"Make internalName helper method static"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemoryAccessVarHandleGenerator.java"}],"sha":"dc1f9ecf8c220956467d091690af39fd43970931"},{"commit":{"message":"Add an asExact() combinator to VarHandle"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/IndirectVarHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Invokers.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemoryAccessVarHandleGenerator.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandleGuards.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandle.java.template"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template"},{"filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestExact.java"}],"sha":"65c5d145273def4805c0ed83efa253d1c3242b68"}]