{"files":[{"patch":"@@ -64,0 +64,1 @@\n+import javax.swing.plaf.FontUIResource;\n@@ -137,1 +138,1 @@\n-    private static final Font DEFAULT_FONT = new Font(\"Lucida Grande\", Font.PLAIN, 13);\n+    private static final Font DEFAULT_FONT = new FontUIResource(\"Lucida Grande\", Font.PLAIN, 13);\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/LWWindowPeer.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -97,2 +97,1 @@\n-        LookAndFeel.uninstallColors(p); \/\/ Uninstalling the font causes cascading problems!!\n-\/\/        LookAndFeel.uninstallColorsAndFont(p);\n+        LookAndFeel.uninstallColorsAndFont(p);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicPanelUI.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -65,0 +65,2 @@\n+import javax.swing.plaf.FontUIResource;\n+\n@@ -126,1 +128,1 @@\n-            defaultFont = new Font(Font.DIALOG, Font.PLAIN, 12);\n+            defaultFont = new FontUIResource(Font.DIALOG, Font.PLAIN, 12);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XWindow.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,0 +76,2 @@\n+import javax.swing.plaf.FontUIResource;\n+\n@@ -594,1 +596,1 @@\n-    static final Font defaultFont = new Font(Font.DIALOG, Font.PLAIN, 12);\n+    static final Font defaultFont = new FontUIResource(Font.DIALOG, Font.PLAIN, 12);\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WComponentPeer.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-    static final String TEXT[] = new String[]{\n+    static final String[] TEXT = new String[]{\n@@ -88,1 +88,0 @@\n-    static JComponent component;\n@@ -100,7 +99,3 @@\n-                    for (final boolean html : new boolean[]{true, false}) {\n-                        for (String text : TEXT) {\n-                            if (html) {\n-                                text = \"<html>\" + text + \"<\/html>\";\n-                            }\n-                            test(text);\n-                        }\n+                    for (String text : TEXT) {\n+                        test(\"<html>\" + text + \"<\/html>\");\n+                        test(text);\n@@ -115,31 +110,0 @@\n-        \/\/ Each Callable create a component to be tested\n-        final List<Callable<JComponent>> comps = List.of(\n-                () -> new JLabel(text),\n-                () -> new JButton(text),\n-                () -> new JMenuItem(text),\n-                () -> new JMenu(text),\n-                () -> new JList<>(new String[]{text}),\n-                () -> new JComboBox<>(new String[]{text}),\n-                () -> new JTextField(text),\n-                () -> new JTextArea(text),\n-                () -> new JCheckBox(text),\n-                () -> new JFormattedTextField(text),\n-                () -> new JRadioButton(text),\n-                () -> new JTree(new DefaultMutableTreeNode(text)),\n-                () -> new JSpinner(new SpinnerListModel(new String[]{text})),\n-                () -> {\n-                    JToolTip tip = new JToolTip();\n-                    tip.setTipText(text);\n-                    return tip;\n-                    },\n-                () -> {\n-                    JEditorPane pane = new JEditorPane();\n-                    pane.setText(text);\n-                    return pane;\n-                    },\n-                () -> {\n-                    JTable table = new JTable(1, 1);\n-                    table.getModel().setValueAt(text, 0, 0);\n-                    return table;\n-                    }\n-        );\n@@ -147,4 +111,12 @@\n-        for (final Callable<JComponent> creator : comps) {\n-            checkComponent(creator);\n-        }\n-    }\n+        checkComponent(new JButton(text));\n+        checkComponent(new JMenuItem(text));\n+        checkComponent(new JMenu(text));\n+        checkComponent(new JList<>(new String[]{text}));\n+        checkComponent(new JComboBox<>(new String[]{text}));\n+        checkComponent(new JTextField(text));\n+        checkComponent(new JTextArea(text));\n+        checkComponent(new JCheckBox(text));\n+        checkComponent(new JFormattedTextField(text));\n+        checkComponent(new JRadioButton(text));\n+        checkComponent(new JTree(new DefaultMutableTreeNode(text)));\n+        checkComponent(new JSpinner(new SpinnerListModel(new String[]{text})));\n@@ -152,2 +124,3 @@\n-    static void checkComponent(Callable<JComponent> creator) throws Exception {\n-        EventQueue.invokeAndWait(() -> {\n+        JToolTip tip = new JToolTip();\n+        tip.setToolTipText(text);\n+        checkComponent(tip);\n@@ -155,5 +128,8 @@\n-            try {\n-                component = creator.call();\n-            } catch (Exception e) {\n-                throw new RuntimeException(e);\n-            }\n+        JEditorPane pane = new JEditorPane();\n+        pane.setText(text);\n+        checkComponent(pane);\n+\n+        JTable table = new JTable(1, 1);\n+        table.getModel().setValueAt(text, 0, 0);\n+        checkComponent(table);\n+    }\n@@ -161,0 +137,2 @@\n+    static void checkComponent(JComponent component) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n","filename":"test\/jdk\/javax\/swing\/GraphicsConfigNotifier\/StalePreferredSize.java","additions":29,"deletions":51,"binary":false,"changes":80,"status":"modified"}]}