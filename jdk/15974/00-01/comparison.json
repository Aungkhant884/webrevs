{"files":[{"patch":"@@ -2,1 +2,24 @@\n- * @test \/nodynamiccopyright\/\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n@@ -5,2 +28,6 @@\n- * @compile SimpleProcessor.java\n- * @compile\/fail\/ref=CrashEmptyEnumConstructorTest.out -processor SimpleProcessor -XDrawDiagnostics CrashEmptyEnumConstructorTest.java\n+ * @library \/tools\/lib \/tools\/javac\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main CrashEmptyEnumConstructorTest\n@@ -9,4 +36,88 @@\n-enum CrashEmptyEnumConstructorTest {\n-    ONE(\"\");\n-    CrashEmptyEnumConstructorTest(String one);\n-    final String one;\n+import java.io.IOException;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.util.List;\n+import java.util.Set;\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.TypeElement;\n+\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.Task.Mode;\n+import toolbox.Task.OutputKind;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+public class CrashEmptyEnumConstructorTest extends TestRunner {\n+    protected ToolBox tb;\n+\n+    CrashEmptyEnumConstructorTest() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new CrashEmptyEnumConstructorTest().runTests();\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[]{Paths.get(m.getName())});\n+    }\n+\n+    Path[] findJavaFiles(Path... paths) throws IOException {\n+        return tb.findJavaFiles(paths);\n+    }\n+\n+    @Test\n+    public void testEmptyEnumConstructor(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        Path r = src.resolve(\"E\");\n+\n+        Path classes = base.resolve(\"classes\");\n+\n+        Files.createDirectories(classes);\n+\n+        tb.writeJavaFiles(r,\n+                \"\"\"\n+                enum E {\n+                    ONE(\"\");\n+                    E(String one);\n+                }\n+                \"\"\");\n+\n+        List<String> expected = List.of(\n+            \"testEmptyEnumConstructor\/src\/E\/E.java:3: error: missing method body, or declare abstract\",\n+            \"    E(String one);\",\n+            \"    ^\",\n+            \"1 error\");\n+\n+        List<String> log = new JavacTask(tb)\n+                .options(\"-processor\", SimpleProcessor.class.getName())\n+                .files(findJavaFiles(src))\n+                .outdir(classes)\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        if (!expected.equals(log))\n+            throw new AssertionError(\"Unexpected output: \" + log);\n+    }\n+\n+    @SupportedAnnotationTypes(\"*\")\n+    public static final class SimpleProcessor extends AbstractProcessor {\n+        @Override\n+        public SourceVersion getSupportedSourceVersion() {\n+            return SourceVersion.latestSupported();\n+        }\n+\n+        @Override\n+        public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+            return false;\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/annotations\/crash_empty_enum_const\/CrashEmptyEnumConstructorTest.java","additions":118,"deletions":7,"binary":false,"changes":125,"status":"modified"},{"patch":"@@ -1,2 +0,0 @@\n-CrashEmptyEnumConstructorTest.java:11:5: compiler.err.missing.meth.body.or.decl.abstract\n-1 error\n","filename":"test\/langtools\/tools\/javac\/annotations\/crash_empty_enum_const\/CrashEmptyEnumConstructorTest.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.util.Set;\n-import javax.annotation.processing.AbstractProcessor;\n-import javax.annotation.processing.RoundEnvironment;\n-import javax.annotation.processing.SupportedAnnotationTypes;\n-import javax.lang.model.SourceVersion;\n-import javax.lang.model.element.TypeElement;\n-\n-@SupportedAnnotationTypes(\"*\")\n-public class SimpleProcessor extends AbstractProcessor {\n-\n-    @Override\n-    public SourceVersion getSupportedSourceVersion() {\n-        return SourceVersion.latestSupported();\n-    }\n-\n-    @Override\n-    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n-        return false;\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/annotations\/crash_empty_enum_const\/SimpleProcessor.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"}]}