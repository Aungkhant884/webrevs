{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,2 +66,4 @@\n-        if (!(keySpec instanceof PBEKeySpec)) {\n-            throw new InvalidKeySpecException(\"Invalid key spec\");\n+        if (keySpec instanceof PBEKeySpec ks) {\n+            return new PBKDF2KeyImpl(ks, prfAlgo);\n+        } else {\n+            throw new InvalidKeySpecException(\"Only PBEKeySpec is accepted\");\n@@ -69,2 +71,0 @@\n-        PBEKeySpec ks = (PBEKeySpec) keySpec;\n-        return new PBKDF2KeyImpl(ks, prfAlgo);\n@@ -92,1 +92,1 @@\n-        if (key instanceof javax.crypto.interfaces.PBEKey) {\n+        if (key instanceof javax.crypto.interfaces.PBEKey pKey) {\n@@ -96,2 +96,0 @@\n-                javax.crypto.interfaces.PBEKey pKey =\n-                    (javax.crypto.interfaces.PBEKey) key;\n@@ -110,1 +108,2 @@\n-                throw new InvalidKeySpecException(\"Invalid key spec\");\n+                throw new InvalidKeySpecException\n+                        (\"Only PBEKeySpec is accepted\");\n@@ -113,2 +112,1 @@\n-            throw new InvalidKeySpecException(\"Invalid key \" +\n-                                               \"format\/algorithm\");\n+            throw new InvalidKeySpecException(\"Only PBEKey is accepted\");\n@@ -141,3 +139,1 @@\n-            if (key instanceof javax.crypto.interfaces.PBEKey) {\n-                javax.crypto.interfaces.PBEKey pKey =\n-                    (javax.crypto.interfaces.PBEKey) key;\n+            if (key instanceof javax.crypto.interfaces.PBEKey pKey) {\n@@ -163,0 +159,2 @@\n+            } else {\n+                throw new InvalidKeyException(\"Only PBEKey is accepted\");\n@@ -165,1 +163,2 @@\n-        throw new InvalidKeyException(\"Invalid key format\/algorithm\");\n+        throw new InvalidKeyException(\"Only PBKDF2With\" + prfAlgo +\n+                \" key with RAW format is accepted\");\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBKDF2Core.java","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import javax.crypto.spec.SecretKeySpec;\n@@ -71,1 +72,2 @@\n-                        || !theTest.translateSpoiledKey()) {\n+                        || !theTest.translateSpoiledKey()\n+                        || !theTest.testGeneralSecretKey()) {\n@@ -191,0 +193,39 @@\n+    \/**\n+     * The test case scenario implemented in the method: - create a general\n+     * secret key (does not implement PBEKey) - try calling\n+     * translate and getKeySpec methods and see if the expected\n+     * InvalidKeyException and InvalidKeySpecException is thrown.\n+     *\n+     * @return true if the expected Exception occurred; false - otherwise\n+     * @throws NoSuchAlgorithmException\n+     *\/\n+    public boolean testGeneralSecretKey() throws NoSuchAlgorithmException {\n+        SecretKey key = new SecretKeySpec(\"random#s\".getBytes(), algoToTest);\n+        SecretKeyFactory skf = SecretKeyFactory.getInstance(algoToTest);\n+        try {\n+            skf.translateKey(key);\n+            System.out.println(\"Error: expected IKE not thrown\");\n+            return false;\n+        } catch (InvalidKeyException e) {\n+            if (e.getMessage().indexOf(\"PBEKey\") == -1) {\n+                System.out.println(\"Error: IKE message should \" +\n+                        \"indicate that PBEKey is required\");\n+                return false;\n+            }\n+        }\n+\n+        try {\n+            skf.getKeySpec(key, PBEKeySpec.class);\n+            System.out.println(\"Error: expected IKSE not thrown\");\n+            return false;\n+        } catch (InvalidKeySpecException e) {\n+            if (e.getMessage().indexOf(\"PBEKey\") == -1) {\n+                System.out.println(\"Error: IKSE message should \" +\n+                        \"indicate that PBEKey is required\");\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/PBE\/PBKDF2Translate.java","additions":43,"deletions":2,"binary":false,"changes":45,"status":"modified"}]}