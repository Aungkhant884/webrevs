{"files":[{"patch":"@@ -106,1 +106,1 @@\n-        sb.append(\"\\n  Variant: \").append(variant);\n+        sb.append(\"  Variant: \").append(variant);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/CertPathConstraintsParameters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -160,2 +160,7 @@\n-                \/\/ use timestamp if checking signed code that is\n-                \/\/ timestamped, otherwise use date parameter\n+                \/\/ Use timestamp if checking signed code that is\n+                \/\/ timestamped, otherwise use date parameter.\n+                \/\/ Note that TSA server certificates do not use the\n+                \/\/ timestamp, which means that an expired TSA certificate\n+                \/\/ is considered a validation failure. This policy means\n+                \/\/ that signed and timestamped code is valid until the TSA\n+                \/\/ certificate expires (assuming all other checks are valid).\n@@ -213,0 +218,3 @@\n+        \/\/ The timestamp param is passed as the date param when creating an\n+        \/\/ AlgorithmChecker. An AlgorithmChecker always uses the timestamp\n+        \/\/ if specified in order to enforce the denyAfter constraint.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/PKIX.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n-        sb.append(\"\\n  Variant: \").append(getVariant());\n+        sb.append(\"  Variant: \").append(getVariant());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/JarConstraintsParameters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,96 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- * @test\n- * @bug 4504355 4744260\n- * @summary problems if signed crypto provider is the most preferred provider\n- * @modules java.base\/sun.security.tools.keytool\n- *          jdk.jartool\/sun.security.tools.jarsigner\n- * @library \/test\/lib\n- * @run main\/othervm DynStatic\n- *\/\n-\n-import java.io.File;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.List;\n-\n-import jdk.test.lib.compiler.CompilerUtils;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.util.JarUtils;\n-\n-public class DynStatic {\n-\n-    private static final String TEST_SRC =\n-        Paths.get(System.getProperty(\"test.src\")).toString();\n-    private static final Path TEST_CLASSES =\n-        Paths.get(System.getProperty(\"test.classes\"));\n-\n-    private static final Path EXP_SRC_DIR = Paths.get(TEST_SRC, \"com\");\n-    private static final Path EXP_DEST_DIR = Paths.get(\"build\");\n-    private static final Path DYN_SRC =\n-        Paths.get(TEST_SRC, \"DynSignedProvFirst.java\");\n-    private static final Path STATIC_SRC =\n-        Paths.get(TEST_SRC, \"StaticSignedProvFirst.java\");\n-\n-    private static final String STATIC_PROPS =\n-        Paths.get(TEST_SRC, \"Static.props\").toString();\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        \/\/ Compile the provider\n-        CompilerUtils.compile(EXP_SRC_DIR, EXP_DEST_DIR);\n-\n-        \/\/ Create a jar file containing the provider\n-        JarUtils.createJarFile(Path.of(\"exp.jar\"), EXP_DEST_DIR, \"com\");\n-\n-        \/\/ Create a keystore\n-        sun.security.tools.keytool.Main.main(\n-            (\"-genkeypair -dname CN=Signer -keystore exp.ks -storepass \"\n-                + \"changeit -keypass changeit -keyalg rsa\").split(\" \"));\n-\n-        \/\/ Sign jar\n-        sun.security.tools.jarsigner.Main.main(\n-                \"-storepass changeit -keystore exp.ks exp.jar mykey\"\n-                        .split(\" \"));\n-\n-        \/\/ Compile the DynSignedProvFirst test program\n-        CompilerUtils.compile(DYN_SRC, TEST_CLASSES, \"-classpath\", \"exp.jar\");\n-\n-        \/\/ Run the DynSignedProvFirst test program\n-        ProcessTools.executeTestJvm(\"-classpath\",\n-            TEST_CLASSES.toString() + File.pathSeparator + \"exp.jar\",\n-            \"DynSignedProvFirst\")\n-            .shouldContain(\"test passed\");\n-\n-        \/\/ Compile the StaticSignedProvFirst test program\n-        CompilerUtils.compile(STATIC_SRC, TEST_CLASSES, \"-classpath\", \"exp.jar\");\n-\n-        \/\/ Run the StaticSignedProvFirst test program\n-        ProcessTools.executeTestJvm(\"-classpath\",\n-            TEST_CLASSES.toString() + File.pathSeparator + \"exp.jar\",\n-            \"-Djava.security.properties=file:\" + STATIC_PROPS,\n-            \"StaticSignedProvFirst\")\n-            .shouldContain(\"test passed\");\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/Security\/signedfirst\/DynStatic.java","additions":0,"deletions":96,"binary":false,"changes":96,"status":"deleted"}]}