{"files":[{"patch":"@@ -595,1 +595,0 @@\n-javax\/net\/ssl\/SSLEngine\/Basics.java                             8298867 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- *\n@@ -33,0 +32,1 @@\n+ * @library \/test\/lib\n@@ -34,0 +34,1 @@\n+ * @run main Basics\n@@ -39,0 +40,1 @@\n+import java.util.Arrays;\n@@ -42,0 +44,2 @@\n+import jdk.test.lib.security.SecurityUtils;\n+\n@@ -56,0 +60,5 @@\n+    private static final String TLS13_CIPHER_SUITE = \"TLS_AES_256_GCM_SHA384\";\n+    private static final String TLS13_PROTOCOL = \"TLSv1.3\";\n+\n+    private static final String TLS12_PROTOCOL = \"TLSv1.2\";\n+\n@@ -57,0 +66,9 @@\n+        SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1.1\");\n+\n+        runTest(\"TLSv1.3\", \"TLS_AES_256_GCM_SHA384\");\n+        runTest(\"TLSv1.2\", \"TLS_RSA_WITH_AES_256_GCM_SHA384\");\n+        runTest(\"TLSv1.1\", \"TLS_DHE_DSS_WITH_AES_128_CBC_SHA\");\n+    }\n+\n+    private static void runTest(String protocol, String cipherSuite) throws Exception {\n+        System.out.printf(\"Testing %s with %s%n\", protocol, cipherSuite);\n@@ -80,2 +98,7 @@\n-        String secondSuite = suites[1];\n-        String [] oneSuites = new String [] { secondSuite };\n+        \/\/ sanity check that the ciphersuite we want to use is still supported\n+        Arrays.stream(suites)\n+                .filter(s -> s.equals(cipherSuite))\n+                .findFirst()\n+                .orElseThrow((() ->\n+                        new RuntimeException(cipherSuite +\n+                                \" is not a supported ciphersuite.\")));\n@@ -85,1 +108,1 @@\n-        ssle.setEnabledCipherSuites(oneSuites);\n+        ssle.setEnabledCipherSuites(new String [] { cipherSuite });\n@@ -90,1 +113,1 @@\n-                !(suites[0].equals(secondSuite))) {\n+                !(suites[0].equals(cipherSuite))) {\n@@ -97,2 +120,7 @@\n-        String secondProtocol = protocols[1];\n-        String [] oneProtocols = new String [] { protocols[1] };\n+        \/\/ sanity check that the protocol we want is still supported\n+        Arrays.stream(protocols)\n+                .filter(p -> p.equals(protocol))\n+                .findFirst()\n+                .orElseThrow(() ->\n+                        new RuntimeException(protocol +\n+                                \" is not a supported TLS protocol.\"));\n@@ -102,1 +130,1 @@\n-        ssle.setEnabledProtocols(oneProtocols);\n+        ssle.setEnabledProtocols(new String[]{ protocol });\n@@ -107,1 +135,1 @@\n-                !(protocols[0].equals(secondProtocol))) {\n+                !(protocols[0].equals(protocol))) {\n@@ -180,5 +208,0 @@\n-        \/\/\n-        \/\/if (ssle.unwrap(smallBB, smallBB).getStatus() !=\n-        \/\/      Status.BUFFER_OVERFLOW) {\n-        \/\/    throw new Exception(\"unwrap should have overflowed\");\n-        \/\/}\n@@ -202,5 +225,9 @@\n-        \/* Checking for overflow wrap\/unwrap() *\/\n-\n-        if (ssle.wrap(appBB, netBB).getStatus() !=\n-                Status.BUFFER_OVERFLOW) {\n-            throw new Exception(\"unwrap should have overflowed\");\n+        \/*\n+         * After the first call to wrap(), the handshake status is\n+         * NEED_UNWRAP and we need to receive data before doing anymore\n+         * handshaking.\n+         *\/\n+        SSLEngineResult result = ssle.wrap(appBB, netBB);\n+        if (result.getStatus() != Status.OK\n+            && result.bytesConsumed() != 0 && result.bytesProduced() != 0) {\n+            throw new Exception(\"wrap should have returned without doing anything\");\n@@ -257,0 +284,5 @@\n+            \/*\n+             * Exceptions are thrown when:\n+             *    - the length field is correct but the data can't be decoded.\n+             *    - the length field is larger than max allowed.\n+             *\/\n@@ -258,3 +290,5 @@\n-            throw new Exception(\"Didn't catch the nasty SSLException\");\n-        } catch (SSLException e) {\n-            System.out.println(\"caught the nasty SSLException: \" + e);\n+            throw new Exception(\"Expected SSLProtocolException was not thrown \"\n+                    + \"for bad input\");\n+        } catch (SSLProtocolException e) {\n+            System.out.println(\"caught the SSLProtocolException for bad decoding: \"\n+                    + e);\n@@ -281,2 +315,2 @@\n-        \/\/ \"HELLO HELLO\"\n-        (byte) 0x48, (byte) 0x45, (byte) 0x4C, (byte) 0x4C, (byte) 0x20,\n+        \/\/ bad data but correct record length to cause decryption error\n+        (byte) 0x48, (byte) 0x45, (byte) 0x4C, (byte) 0x00, (byte) 0x04,\n","filename":"test\/jdk\/javax\/net\/ssl\/SSLEngine\/Basics.java","additions":59,"deletions":25,"binary":false,"changes":84,"status":"modified"}]}