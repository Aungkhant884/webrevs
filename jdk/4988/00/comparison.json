{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -33,0 +35,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -39,1 +42,1 @@\n- * Tests java.lang.Integer\n+ * Test various java.lang.Integer operations\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(3)\n@@ -50,0 +56,2 @@\n+    private int[] intsSmall;\n+    private int[] intsBig;\n@@ -55,0 +63,2 @@\n+        intsSmall = new int[size];\n+        intsBig = new int[size];\n@@ -56,1 +66,3 @@\n-            strings[i] = \"\" + (r.nextInt(10000) - 5000);\n+            strings[i] = \"\" + (r.nextInt(10000) - (5000));\n+            intsSmall[i] = 100 * i + i + 103;\n+            intsBig[i] = ((100 * i + i) << 24) + 4543 + i * 4;\n@@ -66,0 +78,16 @@\n+\n+    \/** Performs toString on small values, just a couple of digits. *\/\n+    @Benchmark\n+    public void toStringSmall(Blackhole bh) {\n+        for (int i : intsSmall) {\n+            bh.consume(Integer.toString(i));\n+        }\n+    }\n+\n+    \/** Performs toString on large values, roughly 10 digits. *\/\n+    @Benchmark\n+    public void toStringBig(Blackhole bh) {\n+        for (int i : intsBig) {\n+            bh.consume(Integer.toString(i));\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/Integers.java","additions":31,"deletions":3,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -33,1 +35,1 @@\n-import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -41,0 +43,3 @@\n+@Warmup(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(3)\n@@ -59,1 +64,1 @@\n-    \/** Performs toString on a bunch of java.lang.Long:s, all with small values, just a couple of digits. *\/\n+    \/** Performs toString on small values, just a couple of digits. *\/\n@@ -61,1 +66,0 @@\n-    @Threads(Threads.MAX)\n@@ -68,1 +72,1 @@\n-    \/** Performs toString on a bunch of java.lang.Long:s, all with large values, around 10 digits. *\/\n+    \/** Performs toString on large values, around 10 digits. *\/\n@@ -70,1 +74,0 @@\n-    @Threads(Threads.MAX)\n@@ -83,1 +86,0 @@\n-    @Threads(Threads.MAX)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/Longs.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"}]}