{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.invoke.MethodHandles;\n@@ -240,3 +239,0 @@\n-    BootstrapLogger(LazyLoggerAccessor holder) {\n-        this(holder, null);\n-    }\n@@ -521,1 +517,1 @@\n-                log.log(logger);\n+                BootstrapExecutors.submit(() -> log.log(logger));\n@@ -526,3 +522,4 @@\n-                AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                    log.log(logger); return null;\n-                }, log.acc);\n+                BootstrapExecutors.submit(() ->\n+                    AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n+                        log.log(logger); return null;\n+                }, log.acc));\n@@ -577,0 +574,1 @@\n+            holder.getConcreteLogger(this);\n@@ -968,3 +966,3 @@\n-    static Logger getLogger(LazyLoggerAccessor accessor) {\n-        if (!BootstrapLogger.isBooted()) {\n-            return new BootstrapLogger(accessor);\n+    static Logger getLogger(LazyLoggerAccessor accessor, BooleanSupplier isLoading) {\n+        if (!BootstrapLogger.isBooted() || isLoading != null && isLoading.getAsBoolean()) {\n+            return new BootstrapLogger(accessor, isLoading);\n@@ -986,6 +984,0 @@\n-    private static void ensureClassInitialized(Class<?> c) {\n-        try {\n-            MethodHandles.lookup().ensureInitialized(c);\n-        } catch (IllegalAccessException e) {}\n-    }\n-\n@@ -994,3 +986,3 @@\n-        if (isBooted()) {\n-            ensureClassInitialized(DetectBackend.class);\n-        }\n+        assert VM.isBooted() : \"VM is not booted\";\n+        \/\/ triggers detection of the backend\n+        var backend = DetectBackend.detectedBackend;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/logger\/BootstrapLogger.java","additions":12,"deletions":20,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.function.BooleanSupplier;\n@@ -115,0 +116,3 @@\n+        \/\/ whether this is the loading thread, can be null\n+        private final BooleanSupplier isLoadingThread;\n+\n@@ -127,0 +131,7 @@\n+            this(name, factories, module, null);\n+        }\n+\n+        private LazyLoggerAccessor(String name,\n+                                   LazyLoggerFactories<? extends Logger> factories,\n+                                   Module module, BooleanSupplier isLoading) {\n+\n@@ -128,1 +139,1 @@\n-                    Objects.requireNonNull(module), null);\n+                    Objects.requireNonNull(module), isLoading, null);\n@@ -133,1 +144,1 @@\n-                                   Module module, Void unused) {\n+                                   Module module, BooleanSupplier isLoading, Void unused) {\n@@ -137,0 +148,1 @@\n+            this.isLoadingThread = isLoading;\n@@ -167,1 +179,1 @@\n-            wrapped = BootstrapLogger.getLogger(this);\n+            wrapped = BootstrapLogger.getLogger(this, isLoadingThread);\n@@ -199,1 +211,1 @@\n-            final Logger wrapped = BootstrapLogger.getLogger(this);\n+            final Logger wrapped = BootstrapLogger.getLogger(this, isLoadingThread);\n@@ -287,1 +299,0 @@\n-         * @param <T> An interface that extends {@link Logger}.\n@@ -291,0 +302,1 @@\n+         * @param module The module for which the logger is being created\n@@ -298,8 +310,0 @@\n-        public static <T extends Logger>\n-        LazyLoggerAccessor makeAccessorFromSupplier(String name,\n-                                                   BiFunction<String, Module, T> supplier,\n-                                                   Module module) {\n-            LazyLoggerFactories<T> factories = new LazyLoggerFactories<>(supplier);\n-            return new LazyLoggerAccessor(name, factories, module);\n-        }\n-\n@@ -344,0 +348,3 @@\n+            \/\/ ensure backend is detected before attempting to load the finder\n+            BootstrapLogger.detectBackend();\n+\n@@ -372,1 +379,0 @@\n-\n@@ -390,0 +396,5 @@\n+    static Logger makeLazyLogger(String name, Module module, BooleanSupplier isLoading) {\n+        final LazyLoggerAccessor holder = new LazyLoggerAccessor(name, factories, module, isLoading);\n+        return new JdkLazyLogger(holder, null);\n+    }\n+\n@@ -425,2 +436,0 @@\n-        \/\/ triggers detection of the backend\n-        BootstrapLogger.detectBackend();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/logger\/LazyLoggers.java","additions":25,"deletions":16,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.util.function.BiFunction;\n@@ -40,1 +39,0 @@\n-import jdk.internal.logger.LazyLoggers.LazyLoggerAccessor;\n@@ -146,7 +144,0 @@\n-        private static final BiFunction<String, Module, Logger> loggerSupplier =\n-                new BiFunction<>() {\n-                    @Override\n-                    public Logger apply(String name, Module module) {\n-                        return LazyLoggers.getLogger(name, module);\n-                    }\n-                };\n@@ -163,2 +154,1 @@\n-            return new BootstrapLogger(LazyLoggerAccessor.makeAccessorFromSupplier(\n-                    name, loggerSupplier, module), isLoadingThread);\n+            return LazyLoggers.makeLazyLogger(name, module, isLoadingThread);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/logger\/LoggerFinderLoader.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"}]}