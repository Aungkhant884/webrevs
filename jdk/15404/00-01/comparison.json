{"files":[{"patch":"@@ -230,0 +230,2 @@\n+    \/\/ tests whether the logger is invoked by the loading thread before\n+    \/\/ the LoggerFinder is loaded; can be null;\n@@ -232,0 +234,2 @@\n+    \/\/ returns true if the logger is invoked by the loading thread before the\n+    \/\/ LoggerFinder service is loaded\n@@ -948,0 +952,2 @@\n+        \/\/ Note: avoid triggering the initialization of the DetectBackend class\n+        \/\/ while holding the BotstrapLogger class monitor\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/logger\/BootstrapLogger.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -425,0 +425,1 @@\n+        \/\/ triggers detection of the backend\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/logger\/LazyLoggers.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -74,2 +74,1 @@\n-\n-    \/\/ Return the loaded LoggerFinder, or load it if not already loaded.\n+    \/\/ record the loadingThread while loading the backend\n@@ -77,0 +76,1 @@\n+    \/\/ Return the loaded LoggerFinder, or load it if not already loaded.\n@@ -83,1 +83,4 @@\n-                return new TemporaryLoggerFinder();\n+                \/\/ recursive attempt to load the backend while loading the backend\n+                \/\/ use a temporary logger finder that returns special BootstrapLogger\n+                \/\/ which will wait until loading is finished\n+                return TemporaryLoggerFinder.INSTANCE;\n@@ -98,0 +101,2 @@\n+    \/\/ returns true if called by the thread that loads the LoggerFinder, while\n+    \/\/ loading the LoggerFinder.\n@@ -140,1 +145,1 @@\n-    static class TemporaryLoggerFinder extends LoggerFinder {\n+    private static final class TemporaryLoggerFinder extends LoggerFinder {\n@@ -145,1 +150,1 @@\n-                        return LazyLoggers.getLoggerFromFinder(name, module);\n+                        return LazyLoggers.getLogger(name, module);\n@@ -154,0 +159,1 @@\n+        private static final TemporaryLoggerFinder INSTANCE = new TemporaryLoggerFinder();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/logger\/LoggerFinderLoader.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n- * @run main SignedLoggerFinderTest init sign multi\n@@ -44,1 +43,0 @@\n-import java.util.logging.*;\n@@ -74,1 +72,1 @@\n-    private static final String KEYSTORE = \"keystore.jks\";\n+    private static final String KEYSTORE = \"8314263.keystore\";\n@@ -79,0 +77,8 @@\n+    private static final String CUSTOM_LOGGER_FINDER_NAME =\n+            \"loggerfinder.SimpleLoggerFinder\";\n+    private static final String CUSTOM_LOGGER_NAME =\n+            \"loggerfinder.SimpleLoggerFinder$SimpleLogger\";\n+    private static final String INTERNAL_LOGGER_FINDER_NAME =\n+            \"sun.util.logging.internal.LoggingProviderImpl\";\n+    private static final String INTERNAL_LOGGER_NAME =\n+            \"sun.util.logging.internal.LoggingProviderImpl$JULWrapper\";\n@@ -87,2 +93,0 @@\n-        mutliThreadLoad = args.length >=3 && args[2].equals(\"multi\");\n-\n@@ -90,0 +94,2 @@\n+        \/\/ init only passed in by jtreg test run, initialize the environment\n+        \/\/ for the subsequent test run\n@@ -92,34 +98,4 @@\n-            List<String> cmds = new ArrayList<>();\n-            cmds.add(JDKToolFinder.getJDKTool(\"java\"));\n-            cmds.addAll(asList(Utils.getTestJavaOpts()));\n-            cmds.addAll(List.of(\n-                \"-classpath\",\n-                System.getProperty(\"test.classes\") + File.pathSeparator +\n-                    jarPath1.toString() + File.pathSeparator + jarPath2.toString(),\n-                \"-Dtest.classes=\" + System.getProperty(\"test.classes\"),\n-                \/\/ following debug property seems useful to tickle the issue\n-                \"-Dsun.misc.URLClassPath.debug=true\",\n-                \/\/ console logger level to capture event output\n-                \"-Djdk.system.logger.level=DEBUG\",\n-                \/\/ useful for debug purposes\n-                \"-Djdk.logger.finder.error=DEBUG\",\n-                \/\/ enable logging to verify correct output\n-                \"-Djava.util.logging.config.file=\" +\n-                    Path.of(System.getProperty(\"test.src\", \".\"), \"logging.properties\"),\n-                \"SignedLoggerFinderTest\",\n-                \"no-init\"));\n-            if (mutliThreadLoad) {\n-                cmds.add(\"multi\");\n-            }\n-\n-            try {\n-                OutputAnalyzer outputAnalyzer = ProcessTools.executeCommand(cmds.stream()\n-                                .filter(t -> !t.isEmpty())\n-                                .toArray(String[]::new))\n-                        .shouldHaveExitValue(0);\n-                if (signJars) {\n-                    outputAnalyzer\n-                            .shouldContain(\"TEST LOGGER: [test_1, test]\")\n-                            .shouldContain(\"TEST LOGGER: [test_2, test]\")\n-                            .shouldContain(DNAME);\n-                }\n+            launchTest(false, false);\n+            launchTest(false, true);\n+            launchTest(true, false);\n+            launchTest(true, true);\n@@ -127,3 +103,0 @@\n-            } catch (Throwable t) {\n-                throw new RuntimeException(\"Unexpected fail.\", t);\n-            }\n@@ -132,1 +105,6 @@\n-            mutliThreadLoad = args.length >=2 && args[1].equals(\"multi\");\n+            \/\/ We're in the JVM launched by ProcessTools.executeCommand\n+            boolean mutliThreadLoad =\n+                Boolean.parseBoolean(System.getProperty(\"mutliThreadLoad\", \"false\"));\n+            boolean withCustomLoggerFinder =\n+                Boolean.parseBoolean(System.getProperty(\"withCustomLoggerFinder\", \"false\"));\n+\n@@ -140,1 +118,1 @@\n-                            System.getLogger(\"random\" + System.currentTimeMillis()).getClass().getName());\n+                            System.getLogger(\"random\" + System.currentTimeMillis()));\n@@ -150,4 +128,11 @@\n-            JarFile jf = new JarFile(jarPath1.toString(), true);\n-            jf.getInputStream(jf.getJarEntry(\"loggerfinder\/SimpleLoggerFinder.class\"));\n-            JarFile jf2 = new JarFile(jarPath2.toString(), true);\n-            jf2.getInputStream(jf.getJarEntry(\"loggerfinder\/SimpleLoggerFinder.class\"));\n+\n+            if (withCustomLoggerFinder) {\n+                JarFile jf = new JarFile(jarPath1.toString(), true);\n+                jf.getInputStream(jf.getJarEntry(\"loggerfinder\/SimpleLoggerFinder.class\"));\n+                JarFile jf2 = new JarFile(jarPath2.toString(), true);\n+                jf2.getInputStream(jf.getJarEntry(\"loggerfinder\/SimpleLoggerFinder.class\"));\n+            } else {\n+                \/\/ some other call to prod LoggerFinder loading\n+                System.getLogger(\"random\" + System.currentTimeMillis());\n+                System.LoggerFinder.getLoggerFinder();\n+            }\n@@ -157,4 +142,18 @@\n-            assertEquals(System.LoggerFinder.getLoggerFinder().getClass().getName(),\n-                    \"loggerfinder.SimpleLoggerFinder\");\n-            Logger testLogger = Logger.getLogger(\"jdk.event.security\");\n-            assertEquals(testLogger.getClass().getName(), \"java.util.logging.Logger\");\n+            if (withCustomLoggerFinder) {\n+                assertEquals(System.LoggerFinder.getLoggerFinder().getClass().getName(),\n+                        CUSTOM_LOGGER_FINDER_NAME);\n+                System.Logger testLogger = System.getLogger(\"jdk.event.security\");\n+                assertEquals(testLogger.getClass().getName(), CUSTOM_LOGGER_NAME);\n+            } else {\n+                if (signJars) {\n+                    assertEquals(System.LoggerFinder.getLoggerFinder().getClass().getName(),\n+                            INTERNAL_LOGGER_FINDER_NAME);\n+                    System.Logger testLogger = System.getLogger(\"jdk.event.security\");\n+                    assertEquals(testLogger.getClass().getName(), INTERNAL_LOGGER_FINDER_NAME);\n+                } else {\n+                    assertEquals(System.LoggerFinder.getLoggerFinder().getClass().getName(),\n+                            INTERNAL_LOGGER_FINDER_NAME);\n+                    System.Logger testLogger = System.getLogger(\"jdk.event.security\");\n+                    assertEquals(testLogger.getClass().getName(), INTERNAL_LOGGER_NAME);\n+                }\n+            }\n@@ -168,1 +167,61 @@\n-    public static void initialize() throws Throwable {\n+    \/\/ helper to create the inner test. Run config variations with the LoggerFinder jars\n+    \/\/ on the classpath and with other threads running System.Logger calls during load\n+    private static void launchTest(boolean mutliThreadLoad, boolean withCustomLoggerFinder) {\n+        List<String> cmds = new ArrayList<>();\n+        cmds.add(JDKToolFinder.getJDKTool(\"java\"));\n+        cmds.addAll(asList(Utils.getTestJavaOpts()));\n+        if (withCustomLoggerFinder) {\n+            cmds.addAll(List.of(\"-classpath\",\n+                System.getProperty(\"test.classes\") + File.pathSeparator +\n+                jarPath1.toString() + File.pathSeparator + jarPath2.toString(),\n+                \"-Dtest.classes=\" + System.getProperty(\"test.classes\")));\n+        } else {\n+            cmds.addAll(List.of(\"-classpath\",\n+                System.getProperty(\"test.classes\")));\n+        }\n+        cmds.addAll(List.of(\n+            \/\/ following debug property seems useful to tickle the issue\n+            \"-Dsun.misc.URLClassPath.debug=true\",\n+            \/\/ console logger level to capture event output\n+            \"-Djdk.system.logger.level=DEBUG\",\n+            \/\/ useful for debug purposes\n+            \"-Djdk.logger.finder.error=DEBUG\",\n+            \/\/ enable logging to verify correct output\n+            \"-Djava.util.logging.config.file=\" +\n+                    Path.of(System.getProperty(\"test.src\", \".\"), \"logging.properties\")));\n+        if (mutliThreadLoad) {\n+            cmds.add(\"-DmutliThreadLoad=true\");\n+        }\n+        if (withCustomLoggerFinder) {\n+            cmds.add(\"-DwithCustomLoggerFinder=true\");\n+        }\n+        cmds.addAll(List.of(\n+            \"SignedLoggerFinderTest\",\n+            \"no-init\"));\n+\n+        try {\n+            OutputAnalyzer outputAnalyzer = ProcessTools.executeCommand(cmds.stream()\n+                    .filter(t -> !t.isEmpty())\n+                    .toArray(String[]::new))\n+                    .shouldHaveExitValue(0);\n+            if (withCustomLoggerFinder) {\n+                outputAnalyzer\n+                    .shouldContain(\"TEST LOGGER: [test_1, test]\")\n+                    .shouldContain(\"TEST LOGGER: [test_2, test]\");\n+            } else {\n+                outputAnalyzer\n+                    .shouldContain(\"SecurityPropertyModification: key:test_1\")\n+                    .shouldContain(\"SecurityPropertyModification: key:test_2\");\n+            }\n+            if (withCustomLoggerFinder && signJars) {\n+                \/\/ X509 cert generated during verification of signed jar file\n+                outputAnalyzer\n+                    .shouldContain(DNAME);\n+            }\n+\n+        } catch (Throwable t) {\n+            throw new RuntimeException(\"Unexpected fail.\", t);\n+        }\n+    }\n+\n+    private static void initialize() throws Throwable {\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/SignedLoggerFinderTest\/SignedLoggerFinderTest.java","additions":112,"deletions":53,"binary":false,"changes":165,"status":"modified"}]}