{"files":[{"patch":"@@ -31,4 +31,0 @@\n- * @build jdk.test.lib.compiler.CompilerUtils\n- *        jdk.test.lib.process.*\n- *        jdk.test.lib.util.JarUtils\n- *        jdk.test.lib.JDKToolLauncher\n@@ -50,8 +46,4 @@\n-     * This test triggers recursion in the broken JDK. The error can\n-     * manifest in a few different ways.\n-     * One error seen is \"java.lang.NoClassDefFoundError:\n-     * Could not initialize class jdk.internal.logger.LoggerFinderLoader$ErrorPolicy\"\n-     *\n-     * The original reported error was a StackOverflow (also seen in different iterations\n-     * of this run). Running test in signed and unsigned jar mode for sanity coverage.\n-     * The current bug only manifests when jars are signed.\n+     * This test triggers recursion by calling `System.getLogger` in the class init\n+     * of a custom LoggerFinder. Without the fix, this is expected to throw\n+     * java.lang.NoClassDefFoundError: Could not initialize class jdk.internal.logger.LoggerFinderLoader$ErrorPolicy\n+     * caused by: java.lang.StackOverflowError\n@@ -64,1 +56,1 @@\n-        assertEquals(String.valueOf(logs.size()), String.valueOf(2));\n+        assertEquals(String.valueOf(logs.size()), String.valueOf(3));\n@@ -102,2 +94,0 @@\n-\n-\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/RecursiveLoading\/PlatformRecursiveLoadingTest.java","additions":5,"deletions":15,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,5 +29,0 @@\n- * @library \/test\/lib\n- * @build jdk.test.lib.compiler.CompilerUtils\n- *        jdk.test.lib.process.*\n- *        jdk.test.lib.util.JarUtils\n- *        jdk.test.lib.JDKToolLauncher\n@@ -38,1 +33,0 @@\n-\n@@ -47,8 +41,4 @@\n-     * This test triggers recursion in the broken JDK. The error can\n-     * manifest in a few different ways.\n-     * One error seen is \"java.lang.NoClassDefFoundError:\n-     * Could not initialize class jdk.internal.logger.LoggerFinderLoader$ErrorPolicy\"\n-     *\n-     * The original reported error was a StackOverflow (also seen in different iterations\n-     * of this run). Running test in signed and unsigned jar mode for sanity coverage.\n-     * The current bug only manifests when jars are signed.\n+     * This test triggers recursion by calling `System.getLogger` in the class init\n+     * of a custom LoggerFinder. Without the fix, this is expected to throw\n+     * java.lang.NoClassDefFoundError: Could not initialize class jdk.internal.logger.LoggerFinderLoader$ErrorPolicy\n+     * caused by: java.lang.StackOverflowError\n@@ -61,1 +51,1 @@\n-        assertEquals(String.valueOf(logs.size()), String.valueOf(2));\n+        assertEquals(String.valueOf(logs.size()), String.valueOf(3));\n@@ -99,2 +89,0 @@\n-\n-\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/RecursiveLoading\/RecursiveLoadingTest.java","additions":5,"deletions":17,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.concurrent.ConcurrentHashMap;\n@@ -30,1 +31,0 @@\n-import java.util.logging.Level;\n@@ -36,0 +36,1 @@\n+    public static final CopyOnWriteArrayList<Object> LOGS = new CopyOnWriteArrayList<>();\n@@ -49,1 +50,6 @@\n-    public static final CopyOnWriteArrayList<Object> LOGS = new CopyOnWriteArrayList<>();\n+    private final Map<String, SimpleLogger> loggers = new ConcurrentHashMap<>();\n+    public SimpleLoggerFinder() {\n+        System.getLogger(\"dummy\")\n+                .log(System.Logger.Level.INFO,\n+                        \"Logger finder service created\");\n+    }\n@@ -53,1 +59,1 @@\n-        return new SimpleLogger(name);\n+        return loggers.computeIfAbsent(name, SimpleLogger::new);\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/RecursiveLoading\/SimpleLoggerFinder.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -305,1 +305,0 @@\n-\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/SignedLoggerFinderTest\/SignedLoggerFinderTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}