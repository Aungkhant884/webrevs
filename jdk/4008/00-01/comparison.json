{"files":[{"patch":"@@ -41,3 +41,1 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n-import static vm.runtime.defmeth.shared.ExecutionMode.*;\n-import static vm.runtime.defmeth.shared.ExecutionMode.INDY;\n+import java.util.Set;\n@@ -50,1 +48,2 @@\n-import java.util.Set;\n+import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static vm.runtime.defmeth.shared.ExecutionMode.*;\n@@ -60,1 +59,1 @@\n-                \/* flags    *\/ Set.of(0, ACC_SYNCHRONIZED, ACC_STRICT, ACC_SYNCHRONIZED | ACC_STRICT),\n+                \/* flags    *\/ Set.of(0, ACC_SYNCHRONIZED),\n@@ -233,1 +232,0 @@\n-    \/\/    ACC_STRICT    0x0800  Declared strictfp; floating-point mode is FP-strict.\n@@ -248,12 +246,0 @@\n-    \/**\n-     * interface I { strictfp void m() default {}; }\n-     *\n-     * TEST: ClassLoader.loadClass(\"I\") == succeeds\n-     *\/\n-    public void testStrictFPMethodDefault() {\n-        loadClass(\n-                createDefaultMethodInterface(ACC_STRICT | ACC_PUBLIC));\n-        loadClass(\n-                createDefaultMethodInterface(ACC_STRICT | ACC_PRIVATE));\n-    }\n-\n@@ -263,1 +249,1 @@\n-    \/\/ it must not have any of its ACC_FINAL, ACC_NATIVE, ACC_PRIVATE, ACC_STATIC, ACC_STRICT,\n+    \/\/ it must not have any of its ACC_FINAL, ACC_NATIVE, ACC_PRIVATE, ACC_STATIC,\n@@ -352,20 +338,0 @@\n-    \/**\n-     * interface I      {          strictfp void m(); }\n-     * abstract class C { abstract strictfp void m(); }\n-     *\n-     * TEST: ClassLoader.loadClass(\"I\") ==> ClassFormatError\n-     * TEST: ClassLoader.loadClass(\"C\") ==> ClassFormatError\n-     *\/\n-    public void testStrictFPMethodAbstract() {\n-        \/* interface I *\/\n-        expectClassFormatError(\n-                createAbstractMethodInterface(ACC_STRICT));\n-\n-        expectClassFormatError(\n-                createAbstractMethodInterface(ACC_STRICT | ACC_PUBLIC));\n-\n-        \/* abstract class C *\/\n-        expectClassFormatError(\n-                createAbstractMethodClass(ACC_STRICT));\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/AccessibilityFlagsTest.java","additions":5,"deletions":39,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -42,0 +42,3 @@\n+import java.util.Map;\n+import java.util.Set;\n+\n@@ -47,1 +50,0 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n@@ -51,3 +53,1 @@\n-import java.util.Map;\n-import java.util.Set;\n-\n+import static jdk.internal.org.objectweb.asm.Opcodes.*;\n@@ -64,1 +64,1 @@\n-                \/* flags    *\/ Set.of(0, ACC_SYNCHRONIZED, ACC_STRICT, ACC_SYNCHRONIZED | ACC_STRICT),\n+                \/* flags    *\/ Set.of(0, ACC_SYNCHRONIZED),\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/BasicTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+import java.util.Set;\n+\n@@ -43,0 +45,1 @@\n+import vm.runtime.defmeth.shared.builder.TestBuilder;\n@@ -45,1 +48,0 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_STRICT;\n@@ -49,4 +51,0 @@\n-import vm.runtime.defmeth.shared.builder.TestBuilder;\n-\n-import java.util.Set;\n-\n@@ -74,1 +72,1 @@\n-                \/* flags    *\/ Set.of(0, ACC_SYNCHRONIZED, ACC_STRICT, ACC_SYNCHRONIZED | ACC_STRICT),\n+                \/* flags    *\/ Set.of(0, ACC_SYNCHRONIZED),\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/ConflictingDefaultsTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -41,1 +41,2 @@\n-import nsk.share.test.TestBase;\n+import java.util.Set;\n+\n@@ -44,1 +45,0 @@\n-import vm.runtime.defmeth.shared.data.method.param.NewInstanceParam;\n@@ -47,3 +47,1 @@\n-import java.util.Set;\n-\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static jdk.internal.org.objectweb.asm.Opcodes.ACC_SYNCHRONIZED;\n@@ -51,2 +49,0 @@\n-import static vm.runtime.defmeth.shared.data.method.body.CallMethod.Invoke.*;\n-import static vm.runtime.defmeth.shared.data.method.body.CallMethod.IndexbyteOp.*;\n@@ -70,1 +66,1 @@\n-                \/* flags    *\/ Set.of(0, ACC_SYNCHRONIZED, ACC_STRICT, ACC_SYNCHRONIZED | ACC_STRICT),\n+                \/* flags    *\/ Set.of(0, ACC_SYNCHRONIZED),\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/DefaultVsAbstractTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,1 +41,2 @@\n-import nsk.share.test.TestBase;\n+import java.util.Set;\n+\n@@ -44,1 +45,0 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n@@ -48,2 +48,1 @@\n-import java.util.Set;\n-\n+import static jdk.internal.org.objectweb.asm.Opcodes.*;\n@@ -91,1 +90,1 @@\n-                \/* flags    *\/ Set.of(0, ACC_SYNCHRONIZED, ACC_STRICT, ACC_SYNCHRONIZED | ACC_STRICT),\n+                \/* flags    *\/ Set.of(0, ACC_SYNCHRONIZED),\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/MethodResolutionTest.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+import java.util.Set;\n+\n@@ -44,3 +46,0 @@\n-\n-import static vm.runtime.defmeth.shared.ExecutionMode.*;\n-import static vm.runtime.defmeth.shared.data.method.body.CallMethod.IndexbyteOp.*;\n@@ -50,1 +49,2 @@\n-import java.util.Set;\n+import static vm.runtime.defmeth.shared.ExecutionMode.*;\n+import static vm.runtime.defmeth.shared.data.method.body.CallMethod.IndexbyteOp.*;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/ObjectMethodOverridesTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+import java.util.Set;\n+\n@@ -43,0 +45,1 @@\n+import vm.runtime.defmeth.shared.builder.TestBuilder;\n@@ -45,1 +48,0 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_STRICT;\n@@ -49,4 +51,0 @@\n-import vm.runtime.defmeth.shared.builder.TestBuilder;\n-\n-import java.util.Set;\n-\n@@ -63,1 +61,1 @@\n-                \/* flags    *\/ Set.of(0, ACC_SYNCHRONIZED, ACC_STRICT, ACC_SYNCHRONIZED | ACC_STRICT),\n+                \/* flags    *\/ Set.of(0, ACC_SYNCHRONIZED),\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/PrivateMethodsTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -124,31 +124,0 @@\n-    Each test group can be executed in different modes. For each mode there's a\n-    corresponding scenario in src\/vm\/runtime\/defmeth\/scenarios.\n-\n-    Scenarios are organized in the following manner:\n-\n-        ...\/scenarios\/[test_group]_[majorVer]_[methodFlags]_[invocationType]_[shouldRedefine]\n-\n-    where\n-\n-        majorVer - major version of class files for generated concrete classes\n-            values: ver49, ver52\n-\n-        methodFlags - additional access flags for methods in generated classes\n-            values:\n-                none == no additional flags\n-                sync == ACC_SYNCHRONIZED\n-                strict == ACC_STRICT\n-                syncstrict == ACC_SYNCHRONIZED | ACC_STRICT\n-\n-        invocationType - how methods in test hiearchies are invoked during testing\n-            values:\n-                direct - using invoke* bytecodes\n-                reflect - using Reflection API\n-                invoke - using invokedynamic & java.lang.invoke API (MethodHandles\/JSR292)\n-\n-        redefine - whether to preload and redefine classes before running individual tests\n-            values: redefine, noredefine\n-\n-        testGroup - name of test group being used\n-            values: BasicTests\/BridgeMethod\/etc\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/README","additions":0,"deletions":31,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -47,2 +47,0 @@\n-import nsk.share.TestFailure;\n-import nsk.share.test.TestBase;\n@@ -71,1 +69,1 @@\n-                \/* flags    *\/ Set.of(0, ACC_SYNCHRONIZED, ACC_STRICT, ACC_SYNCHRONIZED | ACC_STRICT),\n+                \/* flags    *\/ Set.of(0, ACC_SYNCHRONIZED),\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/RedefineTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,2 @@\n-import nsk.share.test.TestBase;\n+import java.util.Set;\n+\n@@ -43,1 +44,0 @@\n-import vm.runtime.defmeth.shared.builder.TesterBuilder;\n@@ -48,2 +48,0 @@\n-import java.util.Set;\n-\n@@ -63,1 +61,1 @@\n-                \/* flags    *\/ Set.of(0, ACC_SYNCHRONIZED, ACC_STRICT, ACC_SYNCHRONIZED | ACC_STRICT),\n+                \/* flags    *\/ Set.of(0, ACC_SYNCHRONIZED),\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/StaticMethodsTest.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+\n@@ -56,0 +57,1 @@\n+\n@@ -162,6 +164,1 @@\n-        int[] flagsValues = new int[] {\n-            0,\n-            ACC_STRICT,\n-            ACC_SYNCHRONIZED,\n-            ACC_STRICT | ACC_SYNCHRONIZED\n-        };\n+        int[] flagsValues = new int[] {0, ACC_SYNCHRONIZED};\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/StressTest.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -41,1 +41,2 @@\n-import nsk.share.test.TestBase;\n+import java.util.Set;\n+\n@@ -47,3 +48,0 @@\n-import java.util.Set;\n-\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACC_STRICT;\n@@ -77,1 +75,1 @@\n-                \/* flags    *\/ Set.of(0, ACC_SYNCHRONIZED, ACC_STRICT, ACC_SYNCHRONIZED | ACC_STRICT),\n+                \/* flags    *\/ Set.of(0, ACC_SYNCHRONIZED),\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/SuperCallTest.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-\n@@ -59,1 +58,0 @@\n-\n@@ -63,1 +61,0 @@\n-\n@@ -67,1 +64,0 @@\n-\n@@ -71,1 +67,0 @@\n-\n@@ -73,2 +68,2 @@\n-                (acc & ACC_PRIVATE) == 0 &&\n-                (acc & ACC_PROTECTED) == 0) {\n+            (acc & ACC_PRIVATE) == 0 &&\n+            (acc & ACC_PROTECTED) == 0) {\n@@ -77,5 +72,0 @@\n-\n-        if ((acc & ACC_STRICT) != 0) {\n-            flags.add(\"strictfp\");\n-        }\n-\n@@ -85,1 +75,0 @@\n-\n@@ -88,0 +77,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/shared\/Printer.java","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -201,1 +201,1 @@\n-                    \/\/ it must not have any of its ACC_FINAL, ACC_NATIVE, ACC_PRIVATE, ACC_STATIC, ACC_STRICT, or\n+                    \/\/ it must not have any of its ACC_FINAL, ACC_NATIVE, ACC_PRIVATE, ACC_STATIC, or\n@@ -203,1 +203,1 @@\n-                    lFlags |= (builder.accFlags & ~(ACC_NATIVE | ACC_PRIVATE | ACC_STATIC | ACC_STRICT | ACC_SYNCHRONIZED));\n+                    lFlags |= (builder.accFlags & ~(ACC_NATIVE | ACC_PRIVATE | ACC_STATIC | ACC_SYNCHRONIZED));\n@@ -213,1 +213,1 @@\n-                    lFlags |= (builder.accFlags & ~(ACC_NATIVE | ACC_PRIVATE | ACC_STATIC | ACC_STRICT | ACC_SYNCHRONIZED));\n+                    lFlags |= (builder.accFlags & ~(ACC_NATIVE | ACC_PRIVATE | ACC_STATIC | ACC_SYNCHRONIZED));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/shared\/builder\/MethodBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}