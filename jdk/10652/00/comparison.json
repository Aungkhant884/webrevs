{"files":[{"patch":"@@ -76,1 +76,0 @@\n-  _rs_length_prediction(0),\n@@ -205,0 +204,2 @@\n+  uint old_young_list_target_length = _young_list_target_length;\n+\n@@ -209,1 +210,4 @@\n-  log_debug(gc, ergo, heap)(\"Young list lengths: desired: %u, target: %u, max: %u\",\n+  log_trace(gc, ergo, heap)(\"Young list length update: pending cards %zu rs_length %zu old target %u desired: %u target: %u max: %u\",\n+                            pending_cards,\n+                            rs_length,\n+                            old_young_list_target_length,\n@@ -522,1 +526,1 @@\n-void G1Policy::revise_young_list_target_length_if_necessary(size_t rs_length) {\n+void G1Policy::revise_young_list_target_length(size_t rs_length) {\n@@ -525,21 +529,4 @@\n-  if (rs_length > _rs_length_prediction) {\n-    \/\/ add 10% to avoid having to recalculate often\n-    size_t rs_length_prediction = rs_length * 1100 \/ 1000;\n-    update_rs_length_prediction(rs_length_prediction);\n-\n-    G1DirtyCardQueueSet& dcqs = G1BarrierSet::dirty_card_queue_set();\n-    \/\/ We have no measure of the number of cards in the thread buffers, assume\n-    \/\/ these are very few compared to the ones in the DCQS.\n-    update_young_length_bounds(dcqs.num_cards(), rs_length_prediction);\n-  }\n-}\n-\n-void G1Policy::update_rs_length_prediction() {\n-  bool for_young_only_phase = collector_state()->in_young_only_phase();\n-  update_rs_length_prediction(_analytics->predict_rs_length(for_young_only_phase));\n-}\n-\n-void G1Policy::update_rs_length_prediction(size_t prediction) {\n-  if (collector_state()->in_young_only_phase() && use_adaptive_young_list_length()) {\n-    _rs_length_prediction = prediction;\n-  }\n+  G1DirtyCardQueueSet& dcqs = G1BarrierSet::dirty_card_queue_set();\n+  \/\/ We have no measure of the number of cards in the thread buffers, assume\n+  \/\/ these are very few compared to the ones in the DCQS.\n+  update_young_length_bounds(dcqs.num_cards(), rs_length);\n@@ -580,1 +567,0 @@\n-  update_rs_length_prediction();\n@@ -904,1 +890,0 @@\n-  update_rs_length_prediction();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":11,"deletions":26,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -107,2 +107,0 @@\n-  size_t _rs_length_prediction;\n-\n@@ -235,3 +233,0 @@\n-  void update_rs_length_prediction();\n-  void update_rs_length_prediction(size_t prediction);\n-\n@@ -298,1 +293,1 @@\n-  void revise_young_list_target_length_if_necessary(size_t rs_length);\n+  void revise_young_list_target_length(size_t rs_length);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -541,1 +541,1 @@\n-        policy->revise_young_list_target_length_if_necessary(cl.sampled_rs_length());\n+        policy->revise_young_list_target_length(cl.sampled_rs_length());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}