{"files":[{"patch":"@@ -33,2 +33,0 @@\n-import jdk.internal.util.random.RandomSupport;\n-\n@@ -37,0 +35,5 @@\n+import jdk.internal.util.random.RandomSupport;\n+import jdk.internal.util.ByteArray;\n+\n+import sun.security.action.GetPropertyAction;\n+import sun.security.action.GetIntegerAction;\n@@ -127,1 +130,1 @@\n-                PRNG_NAME = System.getProperty(PROP_NAME_PRNG_NAME, null);\n+                PRNG_NAME = GetPropertyAction.privilegedGetProperty(PROP_NAME_PRNG_NAME, null);\n@@ -133,1 +136,2 @@\n-                int bufCount = Integer.getInteger(PROP_NAME_BUF_COUNT, Runtime.getRuntime().availableProcessors());\n+                int bufCount = GetIntegerAction.privilegedGetProperty(PROP_NAME_BUF_COUNT,\n+                                    Runtime.getRuntime().availableProcessors());\n@@ -194,1 +198,1 @@\n-                    UUID_COUNT = Integer.getInteger(PROP_NAME_UUID_COUNT, 256);\n+                    UUID_COUNT = GetIntegerAction.privilegedGetProperty(PROP_NAME_UUID_COUNT, 256);\n@@ -216,0 +220,8 @@\n+            private static UUID fromRandom(long lsb, long msb) {\n+                \/\/ set version to 3\n+                lsb = (lsb & (0xFFFF_FFFF_FFFF_0FFFL)) | 0x0000_0000_0000_4000L;\n+                \/\/ set variant to IETF\n+                msb = (msb & (0x3FFF_FFFF_FFFF_FFFFL)) | 0x8000_0000_0000_0000L;\n+                return new UUID(lsb, msb);\n+            }\n+\n@@ -219,2 +231,0 @@\n-                    UUID uuid = null;\n-\n@@ -226,1 +236,2 @@\n-                            uuid = new UUID(buf, p);\n+                            long lsb = ByteArray.getLong(buf, p);\n+                            long msb = ByteArray.getLong(buf, p + 8);\n@@ -228,2 +239,2 @@\n-                                \/\/ Success: UUID is valid, and there were no buffer changes.\n-                                return uuid;\n+                                \/\/ Success: there were no buffer changes. Construct the UUID.\n+                                return fromRandom(lsb, msb);\n@@ -247,1 +258,3 @@\n-                            return new UUID(buf, p);\n+                            long lsb = ByteArray.getLong(buf, p);\n+                            long msb = ByteArray.getLong(buf, p + 8);\n+                            return fromRandom(lsb, msb);\n@@ -251,3 +264,2 @@\n-                    \/\/ Pessimistic path: buffer requires replenishment. Recreate it from the\n-                    \/\/ provided random, and initialize all UUIDs at once to avoid further\n-                    \/\/ initializations, and thus false sharing between reader threads.\n+                    \/\/ Pessimistic path: buffer requires replenishment.\n+                    \/\/ Recreate it from the provided random.\n@@ -255,6 +267,0 @@\n-                    for (int c = 0; c < BUF_SIZE; c += UUID_CHUNK) {\n-                        buf[c + 6] &= 0x0f;  \/* clear version        *\/\n-                        buf[c + 6] |= 0x40;  \/* set to version 4     *\/\n-                        buf[c + 8] &= 0x3f;  \/* clear variant        *\/\n-                        buf[c + 8] |= (byte) 0x80;  \/* set to IETF variant  *\/\n-                    }\n@@ -264,1 +270,0 @@\n-                    uuid = new UUID(buf, 0);\n@@ -267,1 +272,3 @@\n-                    return uuid;\n+                    long lsb = ByteArray.getLong(buf, 0);\n+                    long msb = ByteArray.getLong(buf, 8);\n+                    return fromRandom(lsb, msb);\n@@ -282,1 +289,1 @@\n-    private UUID(byte[] data, int start) {\n+    private UUID(byte[] data) {\n@@ -285,1 +292,2 @@\n-        for (int i = start; i < start + 8; i++) {\n+        assert data.length == 16 : \"data must be 16 bytes in length\";\n+        for (int i=0; i<8; i++)\n@@ -287,2 +295,1 @@\n-        }\n-        for (int i = start + 8; i < start + 16; i++) {\n+        for (int i=8; i<16; i++)\n@@ -290,1 +297,0 @@\n-        }\n@@ -345,1 +351,1 @@\n-        return new UUID(md5Bytes, 0);\n+        return new UUID(md5Bytes);\n","filename":"src\/java.base\/share\/classes\/java\/util\/UUID.java","additions":34,"deletions":28,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4173528 5068772 8148936 8196334\n+ * @bug 4173528 5068772 8148936 8196334 8308803\n@@ -28,2 +28,2 @@\n- * @run main\/othervm -XX:+CompactStrings UUIDTest\n- * @run main\/othervm -XX:-CompactStrings UUIDTest\n+ * @run main\/othervm -Xmx1g -XX:+CompactStrings UUIDTest\n+ * @run main\/othervm -Xmx1g -XX:-CompactStrings UUIDTest\n@@ -33,0 +33,1 @@\n+import java.util.stream.IntStream;\n@@ -36,1 +37,4 @@\n-    static Random generator = new Random();\n+    \/\/ Single UUID instance is ~32 bytes, 1M instances take ~256M in the set\n+    private static final int COUNT = 1_000_000;\n+\n+    static final Random generator = new Random();\n@@ -39,1 +43,1 @@\n-        containsTest();\n+        negativeTest();\n@@ -41,0 +45,1 @@\n+        randomUUIDTest_Multi();\n@@ -52,6 +57,6 @@\n-    \/\/ Verify that list.contains detects UUID collisons\n-    private static void containsTest() throws Exception {\n-        List list = new LinkedList();\n-        list.add(new UUID(4,4));\n-        if (!list.contains(new UUID(4,4)))\n-            throw new Exception(\"contains test did not work as expected\");\n+    private static void negativeTest() throws Exception {\n+        Set<UUID> set = new HashSet<>();\n+        set.add(new UUID(4, 4));\n+        if (set.add(new UUID(4, 4))) {\n+            throw new Exception(\"Contains test does not work as expected\");\n+        }\n@@ -61,5 +66,27 @@\n-        List list = new LinkedList();\n-        for (int i=0; i<100; i++) {\n-            UUID u1 = UUID.randomUUID();\n-            if (4 != u1.version()) {\n-                throw new Exception(\"bad version\");\n+        Set<UUID> set = new HashSet<>();\n+        for (int i = 0; i < COUNT; i++) {\n+            UUID u = UUID.randomUUID();\n+            if (u.version() != 4) {\n+                throw new Exception(\"Bad version: \" + u);\n+            }\n+            if (u.variant() != 2) {\n+                throw new Exception(\"Bad variant: \" + u);\n+            }\n+            if (!set.add(u)) {\n+                throw new Exception(\"UUID collision: \" + u);\n+            }\n+        }\n+    }\n+\n+    private static void randomUUIDTest_Multi() throws Exception {\n+        List<UUID> uuids = IntStream.range(0, COUNT).parallel()\n+                                    .mapToObj(i -> UUID.randomUUID())\n+                                    .toList();\n+\n+        Set<UUID> set = new HashSet<>();\n+        for (UUID u : uuids) {\n+            if (u.version() != 4) {\n+                throw new Exception(\"Bad version: \" + u);\n+            }\n+            if (u.variant() != 2) {\n+                throw new Exception(\"Bad variant: \" + u);\n@@ -67,2 +94,2 @@\n-            if (2 != u1.variant()) {\n-                throw new Exception(\"bad variant\");\n+            if (!set.add(u)) {\n+                throw new Exception(\"UUID collision: \" + u);\n@@ -70,3 +97,0 @@\n-            if (list.contains(u1))\n-                throw new Exception(\"random UUID collision very unlikely\");\n-            list.add(u1);\n@@ -76,0 +100,1 @@\n+\n@@ -77,1 +102,0 @@\n-        Random byteSource = new Random();\n@@ -79,6 +103,6 @@\n-        List list = new LinkedList();\n-        for (int i=0; i<100; i++) {\n-            byteSource.nextBytes(someBytes);\n-            UUID u1 = UUID.nameUUIDFromBytes(someBytes);\n-            if (3 != u1.version()) {\n-                throw new Exception(\"bad version\");\n+        Set<UUID> set = new HashSet<>();\n+        for (int i = 0; i < COUNT; i++) {\n+            generator.nextBytes(someBytes);\n+            UUID u = UUID.nameUUIDFromBytes(someBytes);\n+            if (u.version() != 3) {\n+                throw new Exception(\"Bad version: \" + u);\n@@ -86,2 +110,5 @@\n-            if (2 != u1.variant()) {\n-                throw new Exception(\"bad variant\");\n+            if (u.variant() != 2) {\n+                throw new Exception(\"Bad variant: \" + u);\n+            }\n+            if (!set.add(u)) {\n+                throw new Exception(\"UUID collision: \" + u);\n@@ -89,3 +116,0 @@\n-            if (list.contains(u1))\n-                throw new Exception(\"byte UUID collision very unlikely\");\n-            list.add(u1);\n@@ -96,1 +120,1 @@\n-        for (int i=0; i<100; i++) {\n+        for (int i = 0; i < COUNT; i++) {\n@@ -100,2 +124,3 @@\n-            if (!u1.equals(u2) || !u1.equals(u3))\n-                throw new Exception(\"UUID -> string -> UUID failed\");\n+            if (!u1.equals(u2) || !u1.equals(u3)) {\n+                throw new Exception(\"UUID -> string -> UUID failed: \" + u1 + \" -> \" + u2 + \" -> \" + u3);\n+            }\n@@ -124,3 +149,4 @@\n-        if (test.version() != 4)\n-            throw new Exception(\"randomUUID not type 4\");\n-        Random byteSource = new Random();\n+        if (test.version() != 4) {\n+            throw new Exception(\"randomUUID not type 4: \" + test);\n+        }\n+\n@@ -128,1 +154,1 @@\n-        byteSource.nextBytes(someBytes);\n+        generator.nextBytes(someBytes);\n@@ -130,2 +156,4 @@\n-        if (test.version() != 3)\n-            throw new Exception(\"nameUUIDFromBytes not type 3\");\n+        if (test.version() != 3) {\n+            throw new Exception(\"nameUUIDFromBytes not type 3: \" + test);\n+        }\n+\n@@ -133,1 +161,1 @@\n-        if (test.version() != 1)\n+        if (test.version() != 1) {\n@@ -135,0 +163,2 @@\n+        }\n+\n@@ -136,1 +166,1 @@\n-        if (test.version() != 2)\n+        if (test.version() != 2) {\n@@ -138,0 +168,2 @@\n+        }\n+\n@@ -139,1 +171,1 @@\n-        if (test.version() != 3)\n+        if (test.version() != 3) {\n@@ -141,0 +173,2 @@\n+        }\n+\n@@ -142,1 +176,1 @@\n-        if (test.version() != 4)\n+        if (test.version() != 4) {\n@@ -144,0 +178,2 @@\n+        }\n+\n@@ -145,1 +181,1 @@\n-        if (test.version() != 1)\n+        if (test.version() != 1) {\n@@ -147,0 +183,2 @@\n+        }\n+\n@@ -148,1 +186,1 @@\n-        if (test.version() != 2)\n+        if (test.version() != 2) {\n@@ -150,0 +188,2 @@\n+        }\n+\n@@ -151,1 +191,1 @@\n-        if (test.version() != 3)\n+        if (test.version() != 3) {\n@@ -153,0 +193,2 @@\n+        }\n+\n@@ -154,1 +196,1 @@\n-        if (test.version() != 4)\n+        if (test.version() != 4) {\n@@ -156,0 +198,1 @@\n+        }\n@@ -160,1 +203,1 @@\n-        if (test.variant() != 2)\n+        if (test.variant() != 2) {\n@@ -162,1 +205,2 @@\n-        Random byteSource = new Random();\n+        }\n+\n@@ -164,1 +208,1 @@\n-        byteSource.nextBytes(someBytes);\n+        generator.nextBytes(someBytes);\n@@ -166,1 +210,1 @@\n-        if (test.variant() != 2)\n+        if (test.variant() != 2) {\n@@ -168,0 +212,2 @@\n+        }\n+\n@@ -169,1 +215,1 @@\n-        if (test.variant() != 0)\n+        if (test.variant() != 0) {\n@@ -171,0 +217,2 @@\n+        }\n+\n@@ -172,1 +220,1 @@\n-        if (test.variant() != 2)\n+        if (test.variant() != 2) {\n@@ -174,2 +222,4 @@\n-       test = new UUID(55L, 0xc000000000001000L);\n-        if (test.variant() != 6)\n+        }\n+\n+        test = new UUID(55L, 0xc000000000001000L);\n+        if (test.variant() != 6) {\n@@ -177,2 +227,4 @@\n-       test = new UUID(55L, 0xe000000000001000L);\n-        if (test.variant() != 7)\n+        }\n+\n+        test = new UUID(55L, 0xe000000000001000L);\n+        if (test.variant() != 7) {\n@@ -180,0 +232,1 @@\n+        }\n@@ -190,0 +243,1 @@\n+\n@@ -191,1 +245,1 @@\n-        if (test.timestamp() != 1)\n+        if (test.timestamp() != 1) {\n@@ -193,0 +247,2 @@\n+        }\n+\n@@ -194,1 +250,1 @@\n-        if (test.timestamp() != 1024)\n+        if (test.timestamp() != 1024) {\n@@ -196,0 +252,2 @@\n+        }\n+\n@@ -197,1 +255,1 @@\n-        if (test.timestamp() != Long.MAX_VALUE>>3)\n+        if (test.timestamp() != (Long.MAX_VALUE >> 3)) {\n@@ -199,0 +257,1 @@\n+        }\n@@ -209,0 +268,1 @@\n+\n@@ -210,1 +270,1 @@\n-        if (test.clockSequence() != 1)\n+        if (test.clockSequence() != 1) {\n@@ -212,0 +272,2 @@\n+        }\n+\n@@ -213,1 +275,1 @@\n-        if (test.clockSequence() != 2)\n+        if (test.clockSequence() != 2) {\n@@ -215,0 +277,2 @@\n+        }\n+\n@@ -216,1 +280,1 @@\n-        if (test.clockSequence() != 16)\n+        if (test.clockSequence() != 16) {\n@@ -218,0 +282,2 @@\n+        }\n+\n@@ -219,1 +285,1 @@\n-        if (test.clockSequence() != ((2L<<13)-1)) \/\/ 2^14 - 1\n+        if (test.clockSequence() != ((1L << 14) - 1)) {\n@@ -221,0 +287,1 @@\n+        }\n@@ -231,0 +298,1 @@\n+\n@@ -232,1 +300,1 @@\n-        if (test.node() != 1)\n+        if (test.node() != 1) {\n@@ -234,0 +302,2 @@\n+        }\n+\n@@ -235,1 +305,1 @@\n-        if (test.node() != ((2L<<47)-1)) \/\/ 2^48 - 1\n+        if (test.node() != ((1L << 48) - 1)) {\n@@ -237,0 +307,1 @@\n+        }\n@@ -241,1 +312,1 @@\n-        for (int i=0; i<100; i++) {\n+        for (int i = 0; i < COUNT; i++) {\n@@ -244,2 +315,3 @@\n-            if (u1.hashCode() != u2.hashCode())\n-                throw new Exception(\"Equal UUIDs with different hashcodes\");\n+            if (u1.hashCode() != u2.hashCode()) {\n+                throw new Exception(\"Equal UUIDs with different hash codes: \" + u1 + \" and \" + u2);\n+            }\n@@ -247,0 +319,1 @@\n+\n@@ -248,1 +321,1 @@\n-        for (int i=0; i<1000; i++) {\n+        for (int i = 0; i < COUNT; i++) {\n@@ -255,2 +328,3 @@\n-            if (u1.equals(u2))\n-                throw new Exception(\"UUIDs with different bits equal\");\n+            if (u1.equals(u2)) {\n+                throw new Exception(\"UUIDs with different bits equal: \" + u1 + \" and \" + u2);\n+            }\n@@ -270,1 +344,1 @@\n-            (id4.compareTo(id5) >= 0))\n+            (id4.compareTo(id5) >= 0)) {\n@@ -272,0 +346,1 @@\n+        }\n@@ -276,1 +351,1 @@\n-            (id2.compareTo(id) <= 0))\n+            (id2.compareTo(id) <= 0)) {\n@@ -278,0 +353,1 @@\n+        }\n@@ -279,1 +355,1 @@\n-        if (id.compareTo(id) != 0)\n+        if (id.compareTo(id) != 0) {\n@@ -281,1 +357,1 @@\n-\n+        }\n","filename":"test\/jdk\/java\/util\/UUID\/UUIDTest.java","additions":156,"deletions":80,"binary":false,"changes":236,"status":"modified"}]}