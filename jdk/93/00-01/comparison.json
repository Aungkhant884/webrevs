{"files":[{"patch":"@@ -215,1 +215,2 @@\n-                    return new ConstantCallSite(caller.findStaticGetter(innerClass, LAMBDA_INSTANCE_FIELD, invokedType.returnType()));\n+                    return new ConstantCallSite(caller.findStaticGetter(innerClass, LAMBDA_INSTANCE_FIELD,\n+                            invokedType.returnType()));\n@@ -217,1 +218,2 @@\n-                    throw new LambdaConversionException(\"Exception finding \" +  LAMBDA_INSTANCE_FIELD + \" static field\", e);\n+                    throw new LambdaConversionException(\n+                            \"Exception finding \" +  LAMBDA_INSTANCE_FIELD + \" static field\", e);\n@@ -421,1 +423,2 @@\n-        FieldVisitor fv = cw.visitField(ACC_PRIVATE | ACC_STATIC | ACC_FINAL, LAMBDA_INSTANCE_FIELD, lambdaTypeDescriptor, null, null);\n+        FieldVisitor fv = cw.visitField(ACC_PRIVATE | ACC_STATIC | ACC_FINAL,\n+                LAMBDA_INSTANCE_FIELD, lambdaTypeDescriptor, null, null);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8242451\n+ * @summary Test that the LAMBDA_INSTANCE$ field is present depending on disableEagerInitialization\n+ * @compile LambdaEagerInitTest.java\n+ * @run main LambdaEagerInitTest\n+ * @run main\/othervm -Djdk.internal.lambda.disableEagerInitialization=true LambdaEagerInitTest\n+ *\/\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class LambdaEagerInitTest {\n+\n+    interface H {Object m(String s);}\n+\n+    private static Set<String> allowedStaticFields() {\n+        Set<String> s = new HashSet<>();\n+        if (Boolean.getBoolean(\"jdk.internal.lambda.disableEagerInitialization\")) {\n+            s.add(\"LAMBDA_INSTANCE$\");\n+        }\n+        return s;\n+    }\n+\n+    private void test1() {\n+        H la = s -> s;\n+        assert \"hi\".equals(la.m(\"hi\"));\n+        Class<? extends H> c1 = la.getClass();\n+        Set<String> staticFields = new HashSet<>();\n+        Set<String> instanceFields = new HashSet<>();\n+        for (Field f : c1.getDeclaredFields()) {\n+            if (Modifier.isStatic(f.getModifiers())) {\n+                staticFields.add(f.getName());\n+            } else {\n+                instanceFields.add(f.getName());\n+            }\n+        }\n+        assert instanceFields.isEmpty() : \"Unexpected instance fields: \" + instanceFields;\n+        assert staticFields.equals(allowedStaticFields()) :\n+                \"Unexpected static fields. Got \" + instanceFields + \", expected \" + allowedStaticFields();\n+    }\n+\n+\n+    public static void main(String[] args) {\n+        LambdaEagerInitTest test = new LambdaEagerInitTest();\n+        test.test1();\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/invoke\/LambdaEagerInitTest.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -29,1 +29,0 @@\n- *   Test the set of generate fields\n@@ -33,1 +32,0 @@\n- * @run main\/othervm -Djdk.internal.lambda.disableEagerInitialization=true LambdaTest6\n@@ -36,1 +34,0 @@\n-import java.lang.reflect.Field;\n@@ -38,1 +35,0 @@\n-import java.lang.reflect.Modifier;\n@@ -74,25 +70,0 @@\n-    private static Set<String> allowedStaticFields() {\n-        Set<String> s = new HashSet<>();\n-        if (Boolean.getBoolean(\"jdk.internal.lambda.disableEagerInitialization\")) {\n-            s.add(\"LAMBDA_INSTANCE$\");\n-        }\n-        return s;\n-    }\n-\n-    private static Set<String> checkNonCapturingFields(Class<?> c) {\n-        Set<String> s = new HashSet<>();\n-        for (Field f : c.getDeclaredFields()) {\n-            if (f.getName().equals(\"LAMBDA_INSTANCE$\") && Modifier.isStatic(f.getModifiers())) {\n-                if (Boolean.getBoolean(\"jdk.internal.lambda.disableEagerInitialization\")) {\n-                    continue;\n-                }\n-            }\n-            if (Modifier.isStatic(f.getModifiers())) {\n-                s.add(\"static \" + f.getName());\n-            } else {\n-                s.add(f.getName());\n-            }\n-        }\n-        return s;\n-    }\n-\n@@ -114,1 +85,0 @@\n-        assertTrue(checkNonCapturingFields(c1).isEmpty());\n@@ -133,1 +103,0 @@\n-        assertTrue(checkNonCapturingFields(c2).isEmpty());\n@@ -153,1 +122,0 @@\n-        assertTrue(checkNonCapturingFields(c3).isEmpty());\n","filename":"test\/langtools\/tools\/javac\/lambda\/lambdaExpression\/LambdaTest6.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"modified"}]}