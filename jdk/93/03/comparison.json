{"files":[{"patch":"@@ -60,0 +60,1 @@\n+    private static final String LAMBDA_INSTANCE_FIELD = \"LAMBDA_INSTANCE$\";\n@@ -209,1 +210,1 @@\n-        if (invokedType.parameterCount() == 0 && !disableEagerInitialization) {\n+        if (invokedType.parameterCount() == 0) {\n@@ -212,11 +213,25 @@\n-            final Constructor<?>[] ctrs = AccessController.doPrivileged(\n-                    new PrivilegedAction<>() {\n-                @Override\n-                public Constructor<?>[] run() {\n-                    Constructor<?>[] ctrs = innerClass.getDeclaredConstructors();\n-                    if (ctrs.length == 1) {\n-                        \/\/ The lambda implementing inner class constructor is private, set\n-                        \/\/ it accessible (by us) before creating the constant sole instance\n-                        ctrs[0].setAccessible(true);\n-                    }\n-                    return ctrs;\n+            if (disableEagerInitialization) {\n+                try {\n+                    return new ConstantCallSite(caller.findStaticGetter(innerClass, LAMBDA_INSTANCE_FIELD,\n+                            invokedType.returnType()));\n+                } catch (ReflectiveOperationException e) {\n+                    throw new LambdaConversionException(\n+                            \"Exception finding \" +  LAMBDA_INSTANCE_FIELD + \" static field\", e);\n+                }\n+            } else {\n+                final Constructor<?>[] ctrs = AccessController.doPrivileged(\n+                        new PrivilegedAction<>() {\n+                            @Override\n+                            public Constructor<?>[] run() {\n+                                Constructor<?>[] ctrs = innerClass.getDeclaredConstructors();\n+                                if (ctrs.length == 1) {\n+                                    \/\/ The lambda implementing inner class constructor is private, set\n+                                    \/\/ it accessible (by us) before creating the constant sole instance\n+                                    ctrs[0].setAccessible(true);\n+                                }\n+                                return ctrs;\n+                            }\n+                        });\n+                if (ctrs.length != 1) {\n+                    throw new LambdaConversionException(\"Expected one lambda constructor for \"\n+                            + innerClass.getCanonicalName() + \", got \" + ctrs.length);\n@@ -224,5 +239,0 @@\n-                    });\n-            if (ctrs.length != 1) {\n-                throw new LambdaConversionException(\"Expected one lambda constructor for \"\n-                        + innerClass.getCanonicalName() + \", got \" + ctrs.length);\n-            }\n@@ -230,5 +240,6 @@\n-            try {\n-                Object inst = ctrs[0].newInstance();\n-                return new ConstantCallSite(MethodHandles.constant(samBase, inst));\n-            } catch (ReflectiveOperationException e) {\n-                throw new LambdaConversionException(\"Exception instantiating lambda object\", e);\n+                try {\n+                    Object inst = ctrs[0].newInstance();\n+                    return new ConstantCallSite(MethodHandles.constant(samBase, inst));\n+                } catch (ReflectiveOperationException e) {\n+                    throw new LambdaConversionException(\"Exception instantiating lambda object\", e);\n+                }\n@@ -334,0 +345,4 @@\n+        if (invokedType.parameterCount() == 0 && disableEagerInitialization) {\n+            generateClassInitializer();\n+        }\n+\n@@ -401,0 +416,26 @@\n+    \/**\n+     * Generate a static field and a static initializer that sets this field to an instance of the lambda\n+     *\/\n+    private void generateClassInitializer() {\n+        String lambdaTypeDescriptor = invokedType.returnType().descriptorString();\n+\n+        \/\/ Generate the static final field that holds the lambda singleton\n+        FieldVisitor fv = cw.visitField(ACC_PRIVATE | ACC_STATIC | ACC_FINAL,\n+                LAMBDA_INSTANCE_FIELD, lambdaTypeDescriptor, null, null);\n+        fv.visitEnd();\n+\n+        \/\/ Instantiate the lambda and store it to the static final field\n+        MethodVisitor clinit = cw.visitMethod(ACC_STATIC, \"<clinit>\", \"()V\", null, null);\n+        clinit.visitCode();\n+\n+        clinit.visitTypeInsn(NEW, lambdaClassName);\n+        clinit.visitInsn(Opcodes.DUP);\n+        assert invokedType.parameterCount() == 0;\n+        clinit.visitMethodInsn(INVOKESPECIAL, lambdaClassName, NAME_CTOR, constructorType.toMethodDescriptorString(), false);\n+        clinit.visitFieldInsn(PUTSTATIC, lambdaClassName, LAMBDA_INSTANCE_FIELD, lambdaTypeDescriptor);\n+\n+        clinit.visitInsn(RETURN);\n+        clinit.visitMaxs(-1, -1);\n+        clinit.visitEnd();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":63,"deletions":22,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8242451\n+ * @library \/test\/lib\n+ * @summary Test that the LAMBDA_INSTANCE$ field is present depending\n+ *          on disableEagerInitialization\n+ * @run main LambdaEagerInitTest\n+ * @run main\/othervm -Djdk.internal.lambda.disableEagerInitialization=true LambdaEagerInitTest\n+ *\/\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static jdk.test.lib.Asserts.*;\n+\n+public class LambdaEagerInitTest {\n+\n+    interface H {Object m(String s);}\n+\n+    private static Set<String> allowedStaticFields(boolean nonCapturing) {\n+        Set<String> s = new HashSet<>();\n+        if (Boolean.getBoolean(\"jdk.internal.lambda.disableEagerInitialization\")) {\n+            if (nonCapturing) s.add(\"LAMBDA_INSTANCE$\");\n+        }\n+        return s;\n+    }\n+\n+    private void nonCapturingLambda() {\n+        H la = s -> s;\n+        assertEquals(\"hi\", la.m(\"hi\"));\n+        Class<? extends H> c1 = la.getClass();\n+        verifyLambdaClass(la.getClass(), true);\n+    }\n+\n+    private void capturingLambda() {\n+        H la = s -> concat(s, \"foo\");\n+        assertEquals(\"hi foo\", la.m(\"hi\"));\n+        verifyLambdaClass(la.getClass(), false);\n+    }\n+\n+    private void verifyLambdaClass(Class<?> c, boolean nonCapturing) {\n+        Set<String> staticFields = new HashSet<>();\n+        Set<String> instanceFields = new HashSet<>();\n+        for (Field f : c.getDeclaredFields()) {\n+            if (Modifier.isStatic(f.getModifiers())) {\n+                staticFields.add(f.getName());\n+            } else {\n+                instanceFields.add(f.getName());\n+            }\n+        }\n+        assertEquals(instanceFields.size(), nonCapturing ? 0 : 1, \"Unexpected instance fields\");\n+        assertEquals(staticFields, allowedStaticFields(nonCapturing), \"Unexpected static fields\");\n+    }\n+\n+    private String concat(String... ss) {\n+        return Arrays.stream(ss).collect(Collectors.joining(\" \"));\n+    }\n+\n+    public static void main(String[] args) {\n+        LambdaEagerInitTest test = new LambdaEagerInitTest();\n+        test.nonCapturingLambda();\n+        test.capturingLambda();\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/LambdaEagerInitTest.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -29,2 +29,1 @@\n- *   Tests that jdk.internal.lambda.disableEagerInitialization=true creates a\n- *   get$Lambda method for non-capturing lambdas\n+ *   Test the set of generated methods\n@@ -33,1 +32,0 @@\n- * @run main\/othervm -Djdk.internal.lambda.disableEagerInitialization=true LambdaTest6\n","filename":"test\/langtools\/tools\/javac\/lambda\/lambdaExpression\/LambdaTest6.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n- *   Tests that jdk.internal.lambda.disableEagerInitialization=true creates a\n- *   get$Lambda method for non-capturing lambdas\n@@ -33,1 +31,0 @@\n- * @run main\/othervm -Djdk.internal.lambda.disableEagerInitialization=true BridgeMethod\n@@ -37,1 +34,0 @@\n-import java.util.Arrays;\n@@ -75,14 +71,0 @@\n-    private static Set<String> allowedMethods() {\n-        Set<String> s = new HashSet<>();\n-        s.add(\"m\");\n-        return s;\n-    }\n-\n-    private static boolean matchingMethodNames(Method[] methods) {\n-        Set<String> methodNames = new HashSet<>();\n-        for (Method m : methods) {\n-            methodNames.add(m.getName());\n-        }\n-        return methodNames.equals(allowedMethods());\n-    }\n-\n@@ -94,1 +76,0 @@\n-        assertTrue(matchingMethodNames(methods));\n@@ -98,6 +79,5 @@\n-            if (m.getName().equals(\"m\")) {\n-                System.out.println(m.toGenericString());\n-                Class[] parameterTypes = m.getParameterTypes();\n-                assertTrue(parameterTypes.length == 1);\n-                assertTrue(types.remove(parameterTypes[0].getName()));\n-            }\n+            assertTrue(m.getName().equals(\"m\"));\n+            System.out.println(m.toGenericString());\n+            Class[] parameterTypes = m.getParameterTypes();\n+            assertTrue(parameterTypes.length == 1);\n+            assertTrue(types.remove(parameterTypes[0].getName()));\n@@ -111,1 +91,0 @@\n-        assertTrue(matchingMethodNames(methods));\n@@ -115,6 +94,5 @@\n-            if (m.getName().equals(\"m\")) {\n-                System.out.println(m.toGenericString());\n-                Class<?>[] parameterTypes = m.getParameterTypes();\n-                assertTrue(parameterTypes.length == 1);\n-                assertTrue(types.remove(parameterTypes[0].getName()));\n-            }\n+            assertTrue(m.getName().equals(\"m\"));\n+            System.out.println(m.toGenericString());\n+            Class<?>[] parameterTypes = m.getParameterTypes();\n+            assertTrue(parameterTypes.length == 1);\n+            assertTrue(types.remove(parameterTypes[0].getName()));\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReference\/BridgeMethod.java","additions":10,"deletions":32,"binary":false,"changes":42,"status":"modified"}]}