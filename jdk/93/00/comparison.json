{"files":[{"patch":"@@ -60,0 +60,1 @@\n+    private static final String LAMBDA_INSTANCE_FIELD = \"LAMBDA_INSTANCE$\";\n@@ -209,1 +210,1 @@\n-        if (invokedType.parameterCount() == 0 && !disableEagerInitialization) {\n+        if (invokedType.parameterCount() == 0) {\n@@ -212,11 +213,23 @@\n-            final Constructor<?>[] ctrs = AccessController.doPrivileged(\n-                    new PrivilegedAction<>() {\n-                @Override\n-                public Constructor<?>[] run() {\n-                    Constructor<?>[] ctrs = innerClass.getDeclaredConstructors();\n-                    if (ctrs.length == 1) {\n-                        \/\/ The lambda implementing inner class constructor is private, set\n-                        \/\/ it accessible (by us) before creating the constant sole instance\n-                        ctrs[0].setAccessible(true);\n-                    }\n-                    return ctrs;\n+            if (disableEagerInitialization) {\n+                try {\n+                    return new ConstantCallSite(caller.findStaticGetter(innerClass, LAMBDA_INSTANCE_FIELD, invokedType.returnType()));\n+                } catch (ReflectiveOperationException e) {\n+                    throw new LambdaConversionException(\"Exception finding \" +  LAMBDA_INSTANCE_FIELD + \" static field\", e);\n+                }\n+            } else {\n+                final Constructor<?>[] ctrs = AccessController.doPrivileged(\n+                        new PrivilegedAction<>() {\n+                            @Override\n+                            public Constructor<?>[] run() {\n+                                Constructor<?>[] ctrs = innerClass.getDeclaredConstructors();\n+                                if (ctrs.length == 1) {\n+                                    \/\/ The lambda implementing inner class constructor is private, set\n+                                    \/\/ it accessible (by us) before creating the constant sole instance\n+                                    ctrs[0].setAccessible(true);\n+                                }\n+                                return ctrs;\n+                            }\n+                        });\n+                if (ctrs.length != 1) {\n+                    throw new LambdaConversionException(\"Expected one lambda constructor for \"\n+                            + innerClass.getCanonicalName() + \", got \" + ctrs.length);\n@@ -224,5 +237,0 @@\n-                    });\n-            if (ctrs.length != 1) {\n-                throw new LambdaConversionException(\"Expected one lambda constructor for \"\n-                        + innerClass.getCanonicalName() + \", got \" + ctrs.length);\n-            }\n@@ -230,5 +238,6 @@\n-            try {\n-                Object inst = ctrs[0].newInstance();\n-                return new ConstantCallSite(MethodHandles.constant(samBase, inst));\n-            } catch (ReflectiveOperationException e) {\n-                throw new LambdaConversionException(\"Exception instantiating lambda object\", e);\n+                try {\n+                    Object inst = ctrs[0].newInstance();\n+                    return new ConstantCallSite(MethodHandles.constant(samBase, inst));\n+                } catch (ReflectiveOperationException e) {\n+                    throw new LambdaConversionException(\"Exception instantiating lambda object\", e);\n+                }\n@@ -334,0 +343,4 @@\n+        if (invokedType.parameterCount() == 0 && disableEagerInitialization) {\n+            generateClassInitializer();\n+        }\n+\n@@ -401,0 +414,25 @@\n+    \/**\n+     * Generate a static field and a static initializer that sets this field to an instance of the lambda\n+     *\/\n+    private void generateClassInitializer() {\n+        String lambdaTypeDescriptor = invokedType.returnType().descriptorString();\n+\n+        \/\/ Generate the static final field that holds the lambda singleton\n+        FieldVisitor fv = cw.visitField(ACC_PRIVATE | ACC_STATIC | ACC_FINAL, LAMBDA_INSTANCE_FIELD, lambdaTypeDescriptor, null, null);\n+        fv.visitEnd();\n+\n+        \/\/ Instantiate the lambda and store it to the static final field\n+        MethodVisitor clinit = cw.visitMethod(ACC_STATIC, \"<clinit>\", \"()V\", null, null);\n+        clinit.visitCode();\n+\n+        clinit.visitTypeInsn(NEW, lambdaClassName);\n+        clinit.visitInsn(Opcodes.DUP);\n+        assert invokedType.parameterCount() == 0;\n+        clinit.visitMethodInsn(INVOKESPECIAL, lambdaClassName, NAME_CTOR, constructorType.toMethodDescriptorString(), false);\n+        clinit.visitFieldInsn(PUTSTATIC, lambdaClassName, LAMBDA_INSTANCE_FIELD, lambdaTypeDescriptor);\n+\n+        clinit.visitInsn(RETURN);\n+        clinit.visitMaxs(-1, -1);\n+        clinit.visitEnd();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":60,"deletions":22,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n- *   Tests that jdk.internal.lambda.disableEagerInitialization=true creates a\n- *   get$Lambda method for non-capturing lambdas\n+ *   Test the set of generate fields\n+ *   Test the set of generated methods\n@@ -36,0 +36,1 @@\n+import java.lang.reflect.Field;\n@@ -37,0 +38,1 @@\n+import java.lang.reflect.Modifier;\n@@ -72,0 +74,25 @@\n+    private static Set<String> allowedStaticFields() {\n+        Set<String> s = new HashSet<>();\n+        if (Boolean.getBoolean(\"jdk.internal.lambda.disableEagerInitialization\")) {\n+            s.add(\"LAMBDA_INSTANCE$\");\n+        }\n+        return s;\n+    }\n+\n+    private static Set<String> checkNonCapturingFields(Class<?> c) {\n+        Set<String> s = new HashSet<>();\n+        for (Field f : c.getDeclaredFields()) {\n+            if (f.getName().equals(\"LAMBDA_INSTANCE$\") && Modifier.isStatic(f.getModifiers())) {\n+                if (Boolean.getBoolean(\"jdk.internal.lambda.disableEagerInitialization\")) {\n+                    continue;\n+                }\n+            }\n+            if (Modifier.isStatic(f.getModifiers())) {\n+                s.add(\"static \" + f.getName());\n+            } else {\n+                s.add(f.getName());\n+            }\n+        }\n+        return s;\n+    }\n+\n@@ -87,0 +114,1 @@\n+        assertTrue(checkNonCapturingFields(c1).isEmpty());\n@@ -105,0 +133,1 @@\n+        assertTrue(checkNonCapturingFields(c2).isEmpty());\n@@ -124,0 +153,1 @@\n+        assertTrue(checkNonCapturingFields(c3).isEmpty());\n","filename":"test\/langtools\/tools\/javac\/lambda\/lambdaExpression\/LambdaTest6.java","additions":32,"deletions":2,"binary":false,"changes":34,"status":"modified"}]}