{"files":[{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8242451\n- * @summary Test that the LAMBDA_INSTANCE$ field is present depending on disableEagerInitialization\n- * @compile LambdaEagerInitTest.java\n- * @run main LambdaEagerInitTest\n- * @run main\/othervm -Djdk.internal.lambda.disableEagerInitialization=true LambdaEagerInitTest\n- *\/\n-\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n-import java.util.HashSet;\n-import java.util.Set;\n-\n-public class LambdaEagerInitTest {\n-\n-    interface H {Object m(String s);}\n-\n-    private static Set<String> allowedStaticFields() {\n-        Set<String> s = new HashSet<>();\n-        if (Boolean.getBoolean(\"jdk.internal.lambda.disableEagerInitialization\")) {\n-            s.add(\"LAMBDA_INSTANCE$\");\n-        }\n-        return s;\n-    }\n-\n-    private void test1() {\n-        H la = s -> s;\n-        assert \"hi\".equals(la.m(\"hi\"));\n-        Class<? extends H> c1 = la.getClass();\n-        Set<String> staticFields = new HashSet<>();\n-        Set<String> instanceFields = new HashSet<>();\n-        for (Field f : c1.getDeclaredFields()) {\n-            if (Modifier.isStatic(f.getModifiers())) {\n-                staticFields.add(f.getName());\n-            } else {\n-                instanceFields.add(f.getName());\n-            }\n-        }\n-        assert instanceFields.isEmpty() : \"Unexpected instance fields: \" + instanceFields;\n-        assert staticFields.equals(allowedStaticFields()) :\n-                \"Unexpected static fields. Got \" + instanceFields + \", expected \" + allowedStaticFields();\n-    }\n-\n-\n-    public static void main(String[] args) {\n-        LambdaEagerInitTest test = new LambdaEagerInitTest();\n-        test.test1();\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/invoke\/LambdaEagerInitTest.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8242451\n+ * @library \/test\/lib\n+ * @summary Test that the LAMBDA_INSTANCE$ field is present depending\n+ *          on disableEagerInitialization\n+ * @run main LambdaEagerInitTest\n+ * @run main\/othervm -Djdk.internal.lambda.disableEagerInitialization=true LambdaEagerInitTest\n+ *\/\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static jdk.test.lib.Asserts.*;\n+\n+public class LambdaEagerInitTest {\n+\n+    interface H {Object m(String s);}\n+\n+    private static Set<String> allowedStaticFields(boolean nonCapturing) {\n+        Set<String> s = new HashSet<>();\n+        if (Boolean.getBoolean(\"jdk.internal.lambda.disableEagerInitialization\")) {\n+            if (nonCapturing) s.add(\"LAMBDA_INSTANCE$\");\n+        }\n+        return s;\n+    }\n+\n+    private void nonCapturingLambda() {\n+        H la = s -> s;\n+        assertEquals(\"hi\", la.m(\"hi\"));\n+        Class<? extends H> c1 = la.getClass();\n+        verifyLambdaClass(la.getClass(), true);\n+    }\n+\n+    private void capturingLambda() {\n+        H la = s -> concat(s, \"foo\");\n+        assertEquals(\"hi foo\", la.m(\"hi\"));\n+        verifyLambdaClass(la.getClass(), false);\n+    }\n+\n+    private void verifyLambdaClass(Class<?> c, boolean nonCapturing) {\n+        Set<String> staticFields = new HashSet<>();\n+        Set<String> instanceFields = new HashSet<>();\n+        for (Field f : c.getDeclaredFields()) {\n+            if (Modifier.isStatic(f.getModifiers())) {\n+                staticFields.add(f.getName());\n+            } else {\n+                instanceFields.add(f.getName());\n+            }\n+        }\n+        assertEquals(instanceFields.size(), nonCapturing ? 0 : 1, \"Unexpected instance fields\");\n+        assertEquals(staticFields, allowedStaticFields(nonCapturing), \"Unexpected static fields\");\n+    }\n+\n+    private String concat(String... ss) {\n+        return Arrays.stream(ss).collect(Collectors.joining(\" \"));\n+    }\n+\n+    public static void main(String[] args) {\n+        LambdaEagerInitTest test = new LambdaEagerInitTest();\n+        test.nonCapturingLambda();\n+        test.capturingLambda();\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/LambdaEagerInitTest.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"}]}