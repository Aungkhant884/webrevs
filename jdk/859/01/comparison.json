{"files":[{"patch":"@@ -94,0 +94,2 @@\n+static const bool _do_vector_loop_experimental = false; \/\/ Experimental vectorization which uses data from loop unrolling.\n+\n@@ -473,1 +475,1 @@\n-    if (_do_vector_loop) {\n+    if (_do_vector_loop_experimental) {\n@@ -511,1 +513,1 @@\n-    if (_do_vector_loop) {\n+    if (_do_vector_loop_experimental) {\n@@ -513,0 +515,1 @@\n+#ifndef PRODUCT\n@@ -516,0 +519,1 @@\n+#endif\n@@ -1726,1 +1730,8 @@\n-      assert(my_pack(s) == NULL, \"only in one pack\");\n+#ifdef ASSERT\n+      if (my_pack(s) != NULL) {\n+        s->dump(1);\n+        tty->print_cr(\"packs[%d]:\", i);\n+        print_pack(p);\n+        assert(false, \"only in one pack\");\n+      }\n+#endif\n@@ -1741,1 +1752,1 @@\n-      if (TraceSuperWord && Verbose) {\n+      if ((TraceSuperWord && Verbose) || _vector_loop_debug) {\n@@ -1765,1 +1776,1 @@\n-        if (TraceSuperWord && Verbose) {\n+        if ((TraceSuperWord && Verbose) || _vector_loop_debug) {\n@@ -3055,1 +3066,2 @@\n-  _ii_order.clear();\n+  \/\/ Build iterations order if needed\n+  bool build_ii_order = _do_vector_loop_experimental && _ii_order.is_empty();\n@@ -3060,1 +3072,1 @@\n-    if (_do_vector_loop && n->is_Load()) {\n+    if (build_ii_order && n->is_Load()) {\n@@ -4703,0 +4715,9 @@\n+  if (_ii_order.is_empty()) {\n+#ifndef PRODUCT\n+    if (_vector_loop_debug) {\n+      tty->print_cr(\"SuperWord::pack_parallel: EMPTY\");\n+    }\n+#endif\n+    return false;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":28,"deletions":7,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8251994\n+ * @summary Test vectorization of Streams$RangeIntSpliterator::forEachRemaining\n+ * @requires vm.compiler2.enabled & vm.compMode != \"Xint\"\n+ *\n+ * @run main compiler.vectorization.TestForEachRem test1\n+ * @run main compiler.vectorization.TestForEachRem test2\n+ * @run main compiler.vectorization.TestForEachRem test3\n+ * @run main compiler.vectorization.TestForEachRem test4\n+ *\/\n+\n+package compiler.vectorization;\n+\n+import java.util.stream.IntStream;\n+\n+public class TestForEachRem {\n+    static final int RANGE = 512;\n+    static final int ITER  = 100;\n+\n+    static void test1(int[] data) {\n+       IntStream.range(0, RANGE).parallel().forEach(j -> {\n+           data[j] = j + 1;\n+       });\n+    }\n+\n+    static void test2(int[] data) {\n+       IntStream.range(0, RANGE - 1).forEach(j -> {\n+           data[j] = data[j] + data[j + 1];\n+       });\n+    }\n+\n+    static void test3(int[] data, int A, int B) {\n+       IntStream.range(0, RANGE - 1).forEach(j -> {\n+           data[j] = A * data[j] + B * data[j + 1];\n+       });\n+    }\n+\n+    static void test4(int[] data) {\n+       IntStream.range(0, RANGE - 1).forEach(j -> {\n+           data[j + 1] = data[j];\n+       });\n+    }\n+\n+    static void verify(String name, int[] data, int[] gold) {\n+        for (int i = 0; i < RANGE; i++) {\n+            if (data[i] != gold[i]) {\n+                throw new RuntimeException(\" Invalid \" + name + \" result: data[\" + i + \"]: \" + data[i] + \" != \" + gold[i]);\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        int[] data = new int[RANGE];\n+        int[] gold = new int[RANGE];\n+\n+        if (args.length == 0) {\n+            throw new RuntimeException(\" Missing test name: test1, test2, test3, test4\");\n+        }\n+\n+        if (args[0].equals(\"test1\")) {\n+            System.out.println(\" Run test1 ...\");\n+            test1(gold);\n+            for (int i = 0; i < ITER; i++) {\n+                test1(data);\n+            }\n+            verify(\"test1\", data, gold);\n+            System.out.println(\" Finished test1.\");\n+        }\n+\n+        if (args[0].equals(\"test2\")) {\n+            System.out.println(\" Run test2 ...\");\n+            test1(gold);\n+            test2(gold);\n+            for (int i = 0; i < ITER; i++) {\n+                test1(data); \/\/ reset\n+                test2(data);\n+            }\n+            verify(\"test2\", data, gold);\n+            System.out.println(\" Finished test2.\");\n+        }\n+\n+        if (args[0].equals(\"test3\")) {\n+            System.out.println(\" Run test3 ...\");\n+            test1(gold);\n+            test3(gold, 2, 3);\n+            for (int i = 0; i < ITER; i++) {\n+                test1(data); \/\/ reset\n+                test3(data, 2, 3);\n+            }\n+            verify(\"test3\", data, gold);\n+            System.out.println(\" Finished test3.\");\n+        }\n+\n+        if (args[0].equals(\"test4\")) {\n+            System.out.println(\" Run test4 ...\");\n+            test1(gold); \/\/ reset\n+            test4(gold);\n+            for (int i = 0; i < ITER; i++) {\n+                test1(data); \/\/ reset\n+                test4(data);\n+            }\n+            verify(\"test4\", data, gold);\n+            System.out.println(\" Finished test4.\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestForEachRem.java","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8251994\n+ * @summary Test forced vectorization\n+ * @requires vm.compiler2.enabled & vm.compMode != \"Xint\"\n+ *\n+ * @run main\/othervm -XX:CompileCommand=option,*::test,Vectorize compiler.vectorization.TestOptionVectorize\n+ *\/\n+\n+package compiler.vectorization;\n+\n+import java.util.stream.IntStream;\n+\n+public class TestOptionVectorize {\n+    static final int RANGE = 512;\n+    static final int ITER  = 100;\n+\n+    static void init(double[] data) {\n+       IntStream.range(0, RANGE).parallel().forEach(j -> {\n+           data[j] = j + 1;\n+       });\n+    }\n+\n+    static void test(double[] data, double A, double B) {\n+        for (int i = RANGE - 1; i > 0; i--) {\n+            for (int j = 0; j <= i - 1; j++) {\n+                data[j] = A * data[j + 1] + B * data[j];\n+            }\n+        }\n+    }\n+\n+    static void verify(double[] data, double[] gold) {\n+        for (int i = 0; i < RANGE; i++) {\n+            if (data[i] != gold[i]) {\n+                throw new RuntimeException(\" Invalid result: data[\" + i + \"]: \" + data[i] + \" != \" + gold[i]);\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        double[] data = new double[RANGE];\n+        double[] gold = new double[RANGE];\n+        System.out.println(\" Run test ...\");\n+        init(gold); \/\/ reset\n+        test(gold, 1.0, 2.0);\n+        for (int i = 0; i < ITER; i++) {\n+            init(data); \/\/ reset\n+            test(data, 1.0, 2.0);\n+        }\n+        verify(data, gold);\n+        System.out.println(\" Finished test.\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestOptionVectorize.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}