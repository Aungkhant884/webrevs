{"files":[{"patch":"@@ -49,0 +49,1 @@\n+#include <unistd.h>\n@@ -725,0 +726,14 @@\n+static size_t adjustStackSize(size_t stack_size) {\n+    long page_size = getpagesize();\n+    if (stack_size % page_size == 0) {\n+        return stack_size;\n+    } else {\n+        long pages = stack_size \/ page_size;\n+        \/\/ Ensure we don't go over limit\n+        if (stack_size <= SIZE_MAX - page_size) {\n+            pages++;\n+        }\n+        return page_size * pages;\n+    }\n+}\n+\n@@ -737,1 +752,1 @@\n-        pthread_attr_setstacksize(&attr, stack_size);\n+        pthread_attr_setstacksize(&attr, adjustStackSize(stack_size));\n","filename":"src\/java.base\/macosx\/native\/libjli\/java_md_macosx.m","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -654,0 +654,14 @@\n+static size_t adjustStackSize(size_t stack_size) {\n+    long page_size = sysconf(_SC_PAGESIZE);\n+    if (stack_size % page_size == 0) {\n+        return stack_size;\n+    } else {\n+        long pages = stack_size \/ page_size;\n+        \/\/ Ensure we don't go over limit\n+        if (stack_size <= SIZE_MAX - page_size) {\n+            pages++;\n+        }\n+        return page_size * pages;\n+    }\n+}\n+\n@@ -664,0 +678,1 @@\n+    size_t adjusted_stack_size;\n@@ -666,1 +681,8 @@\n-        pthread_attr_setstacksize(&attr, stack_size);\n+        if (EINVAL == pthread_attr_setstacksize(&attr, stack_size)) {\n+            \/\/ System may require stack size to be multiple of page size\n+            \/\/ Retry with adjusted value\n+            adjusted_stack_size = adjustStackSize(stack_size);\n+            if (adjusted_stack_size != stack_size) {\n+                pthread_attr_setstacksize(&attr, adjusted_stack_size);\n+            }\n+        }\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md.c","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"}]}