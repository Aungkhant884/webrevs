{"files":[{"patch":"@@ -151,0 +151,2 @@\n+  G1GCPhaseTimes* _phase_times;\n+\n@@ -153,1 +155,2 @@\n-                                G1EvacFailureRegions* evac_failure_regions) :\n+                                G1EvacFailureRegions* evac_failure_regions,\n+                                G1GCPhaseTimes* phase_times) :\n@@ -156,1 +159,2 @@\n-    _evac_failure_regions(evac_failure_regions) {\n+    _evac_failure_regions(evac_failure_regions),\n+    _phase_times(phase_times) {\n@@ -165,1 +169,1 @@\n-    hr->process_and_drop_evac_failure_objs(&rspc);\n+    hr->process_and_drop_evac_failure_objs(&rspc, _phase_times, _worker_id);\n@@ -188,0 +192,11 @@\n+      _phase_times->record_or_add_thread_work_item(G1GCPhaseTimes::RestoreRetainedRegions,\n+                                                   _worker_id,\n+                                                   1,\n+                                                   G1GCPhaseTimes::RestoreRetainedRegionsNum);\n+\n+      uint num_objs = hr->num_evac_failure_objs();\n+      _phase_times->record_or_add_thread_work_item(G1GCPhaseTimes::RestoreRetainedRegionsReformat,\n+                                                   _worker_id,\n+                                                   num_objs,\n+                                                   G1GCPhaseTimes::RestoreRetainedRegionsObjects);\n+\n@@ -190,0 +205,5 @@\n+      _phase_times->record_or_add_thread_work_item(G1GCPhaseTimes::RestoreRetainedRegionsReformat,\n+                                                   _worker_id,\n+                                                   live_bytes,\n+                                                   G1GCPhaseTimes::RestoreRetainedRegionsBytes);\n+\n@@ -203,1 +223,3 @@\n-  _evac_failure_regions(evac_failure_regions) { }\n+  _evac_failure_regions(evac_failure_regions),\n+  _phase_times(G1CollectedHeap::heap()->phase_times()) {\n+}\n@@ -206,1 +228,1 @@\n-  RemoveSelfForwardPtrHRClosure rsfp_cl(worker_id, _evac_failure_regions);\n+  RemoveSelfForwardPtrHRClosure rsfp_cl(worker_id, _evac_failure_regions, _phase_times);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailure.cpp","additions":27,"deletions":5,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+class G1GCPhaseTimes;\n@@ -46,0 +47,2 @@\n+  G1GCPhaseTimes* _phase_times;\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailure.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/g1\/g1GCParPhaseTimesTracker.hpp\"\n@@ -98,1 +99,1 @@\n-  void process_and_drop(ObjectClosure* closure) {\n+  void process_and_drop(ObjectClosure* closure, G1GCPhaseTimes* phase_times, uint worker_id) {\n@@ -100,1 +101,2 @@\n-    _offset_array = NEW_C_HEAP_ARRAY(OffsetInRegion, num, mtGC);\n+    {\n+      G1GCParPhaseTimesTracker x(phase_times, G1GCPhaseTimes::RestoreRetainedRegionsPrepare, worker_id, false);\n@@ -102,3 +104,1 @@\n-    join_and_sort();\n-    assert(_array_length == num, \"must be %u, %u\", _array_length, num);\n-    iterate(closure);\n+      _offset_array = NEW_C_HEAP_ARRAY(OffsetInRegion, num, mtGC);\n@@ -106,1 +106,17 @@\n-    FREE_C_HEAP_ARRAY(OffsetInRegion, _offset_array);\n+      join_and_sort();\n+      assert(_array_length == num, \"must be %u, %u\", _array_length, num);\n+    }\n+    {\n+      G1GCParPhaseTimesTracker x(phase_times, G1GCPhaseTimes::RestoreRetainedRegionsReformat, worker_id, false);\n+\n+      iterate(closure);\n+    }\n+    {\n+      G1GCParPhaseTimesTracker x(phase_times, G1GCPhaseTimes::RestoreRetainedRegionsReclaim, worker_id, false);\n+      phase_times->record_or_add_thread_work_item(G1GCPhaseTimes::RestoreRetainedRegionsReclaim,\n+                                                   worker_id,\n+                                                   sizeof(OffsetInRegion) * num,\n+                                                   G1GCPhaseTimes::RestoreRetainedRegionsReclaimUsedMemory);\n+\n+      FREE_C_HEAP_ARRAY(OffsetInRegion, _offset_array);\n+    }\n@@ -116,1 +132,1 @@\n-void G1EvacFailureObjectsSet::process_and_drop(ObjectClosure* closure) {\n+void G1EvacFailureObjectsSet::process_and_drop(ObjectClosure* closure, G1GCPhaseTimes* phase_times, uint worker_id) {\n@@ -120,1 +136,12 @@\n-  helper.process_and_drop(closure);\n+  helper.process_and_drop(closure, phase_times, worker_id);\n+\n+  {\n+    G1GCParPhaseTimesTracker x(phase_times, G1GCPhaseTimes::RestoreRetainedRegionsReclaim, worker_id, false);\n+    phase_times->record_or_add_thread_work_item(G1GCPhaseTimes::RestoreRetainedRegionsReclaim,\n+                                                 worker_id,\n+                                                 _offsets.mem_size(),\n+                                                 G1GCPhaseTimes::RestoreRetainedRegionsReclaimUsedMemory);\n+\n+    _offsets.drop_all();\n+  }\n+}\n@@ -122,1 +149,2 @@\n-  _offsets.drop_all();\n+uint G1EvacFailureObjectsSet::num_evac_failure_objects() {\n+  return _offsets.num_allocated_slots();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureObjectsSet.cpp","additions":37,"deletions":9,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+class G1GCPhaseTimes;\n@@ -78,1 +79,3 @@\n-  void process_and_drop(ObjectClosure* closure);\n+  void process_and_drop(ObjectClosure* closure, G1GCPhaseTimes* phase_times, uint worker_id);\n+\n+  uint num_evac_failure_objects();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureObjectsSet.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -105,1 +105,4 @@\n-  _gc_par_phases[RemoveSelfForwardingPtr] = new WorkerDataArray<double>(\"RemoveSelfForwardingPtr\", \"Remove Self Forwards (ms):\", max_gc_threads);\n+  _gc_par_phases[RestoreRetainedRegions] = new WorkerDataArray<double>(\"RestoreRetainedRegions\", \"Restore Retained Regions (ms):\", max_gc_threads);\n+  _gc_par_phases[RestoreRetainedRegionsPrepare] = new WorkerDataArray<double>(\"RestoreRetainedRegionsPrepare\", \"Prepare Retained Object Refs (ms):\", max_gc_threads);\n+  _gc_par_phases[RestoreRetainedRegionsReformat] = new WorkerDataArray<double>(\"RestoreRetainedRegionsReformat\", \"Reformat Retained Regions (ms):\", max_gc_threads);\n+  _gc_par_phases[RestoreRetainedRegionsReclaim] = new WorkerDataArray<double>(\"RestoreRetainedRegionsReclaim\", \"Reclaim Memory (ms):\", max_gc_threads);\n@@ -135,0 +138,5 @@\n+  _gc_par_phases[RestoreRetainedRegions]->create_thread_work_items(\"Retained Regions:\", RestoreRetainedRegionsNum);\n+  _gc_par_phases[RestoreRetainedRegionsReformat]->create_thread_work_items(\"Retained Objects:\", RestoreRetainedRegionsObjects);\n+  _gc_par_phases[RestoreRetainedRegionsReformat]->create_thread_work_items(\"Retained Bytes:\", RestoreRetainedRegionsBytes);\n+  _gc_par_phases[RestoreRetainedRegionsReclaim]->create_thread_work_items(\"Used [Native] Memory:\", RestoreRetainedRegionsReclaimUsedMemory);\n+\n@@ -487,1 +495,4 @@\n-    debug_phase(_gc_par_phases[RemoveSelfForwardingPtr], 1);\n+    debug_phase(_gc_par_phases[RestoreRetainedRegions], 1);\n+    trace_phase(_gc_par_phases[RestoreRetainedRegionsPrepare], true, 1);\n+    trace_phase(_gc_par_phases[RestoreRetainedRegionsReformat], true, 1);\n+    trace_phase(_gc_par_phases[RestoreRetainedRegionsReclaim], true, 1);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -80,1 +80,4 @@\n-    RemoveSelfForwardingPtr,\n+    RestoreRetainedRegions,\n+    RestoreRetainedRegionsPrepare,\n+    RestoreRetainedRegionsReformat,\n+    RestoreRetainedRegionsReclaim,\n@@ -147,0 +150,13 @@\n+  enum RestoreRetainedRegionsWorkItems {\n+    RestoreRetainedRegionsNum,\n+  };\n+\n+  enum RestoreRetainedRegionsReformatWorkItems {\n+    RestoreRetainedRegionsObjects,\n+    RestoreRetainedRegionsBytes\n+  };\n+\n+  enum RestoreRetainedRegionsReclaimWorkItems {\n+    RestoreRetainedRegionsReclaimUsedMemory\n+  };\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.hpp","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -208,0 +208,5 @@\n+  \/\/ Return the size of available slots, i.e. == num_available_slots() * slot_size().\n+  size_t mem_size() {\n+    return Atomic::load(&_mem_size);\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArray.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-    G1AbstractSubTask(G1GCPhaseTimes::RemoveSelfForwardingPtr),\n+    G1AbstractSubTask(G1GCPhaseTimes::RestoreRetainedRegions),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -110,2 +110,6 @@\n-void HeapRegion::process_and_drop_evac_failure_objs(ObjectClosure* closure) {\n-  _evac_failure_objs.process_and_drop(closure);\n+void HeapRegion::process_and_drop_evac_failure_objs(ObjectClosure* closure, G1GCPhaseTimes* phase_times, uint worker_id) {\n+  _evac_failure_objs.process_and_drop(closure, phase_times, worker_id);\n+}\n+\n+uint HeapRegion::num_evac_failure_objs() {\n+  return _evac_failure_objs.num_evac_failure_objects();\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+class G1GCPhaseTimes;\n@@ -573,1 +574,2 @@\n-  void process_and_drop_evac_failure_objs(ObjectClosure* closure);\n+  void process_and_drop_evac_failure_objs(ObjectClosure* closure, G1GCPhaseTimes* pahse_times, uint worker_id);\n+  uint num_evac_failure_objs();\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -268,1 +268,1 @@\n-        new LogMessageWithLevel(\"Remove Self Forwards\", Level.DEBUG),\n+        new LogMessageWithLevel(\"Restore Retained Regions\", Level.DEBUG),\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestGCLogMessages.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-            \"RemoveSelfForwardingPtr\",\n+            \"RestoreRetainedRegions\",\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/collection\/TestG1ParallelPhases.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}