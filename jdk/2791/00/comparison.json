{"files":[{"patch":"@@ -446,1 +446,1 @@\n-  uint split_USE(MachSpillCopyNode::SpillType spill_type, Node *def, Block *b, Node *use, uint useidx, uint max, bool def_down, bool cisc_sp, GrowableArray<uint> splits, int slidx );\n+  int split_USE(MachSpillCopyNode::SpillType spill_type, Node *def, Block *b, Node *use, uint useidx, uint max, bool def_down, bool cisc_sp, GrowableArray<uint> splits, int slidx );\n","filename":"src\/hotspot\/share\/opto\/chaitin.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -186,1 +186,1 @@\n-uint PhaseChaitin::split_USE(MachSpillCopyNode::SpillType spill_type, Node *def, Block *b, Node *use, uint useidx, uint maxlrg, bool def_down, bool cisc_sp, GrowableArray<uint> splits, int slidx ) {\n+int PhaseChaitin::split_USE(MachSpillCopyNode::SpillType spill_type, Node *def, Block *b, Node *use, uint useidx, uint maxlrg, bool def_down, bool cisc_sp, GrowableArray<uint> splits, int slidx ) {\n@@ -214,0 +214,1 @@\n+        return 0;\n@@ -226,1 +227,1 @@\n-          return 0;\n+          return -1;\n@@ -232,0 +233,1 @@\n+        return 1;\n@@ -234,1 +236,0 @@\n-      return maxlrg;\n@@ -256,1 +257,1 @@\n-      return maxlrg;\n+      return 0;\n@@ -275,1 +276,1 @@\n-  if( !spill ) return 0;        \/\/ Bailed out\n+  if( !spill ) return -1;        \/\/ Bailed out\n@@ -282,2 +283,2 @@\n-  \/\/ return updated live range count\n-  return maxlrg;\n+  \/\/ return generated node count\n+  return 1;\n@@ -500,0 +501,1 @@\n+  int                  delta;\n@@ -959,1 +961,1 @@\n-                maxlrg = split_USE(MachSpillCopyNode::BasePointerToMem, def,b,n,inpidx,maxlrg,false,false,splits,slidx);\n+                delta = split_USE(MachSpillCopyNode::BasePointerToMem, def,b,n,inpidx,maxlrg,false,false,splits,slidx);\n@@ -961,1 +963,1 @@\n-                if (!maxlrg) {\n+                if (delta < 0) {\n@@ -964,1 +966,2 @@\n-                insidx++;  \/\/ Reset iterator to skip USE side split\n+                maxlrg += delta;\n+                insidx += delta;  \/\/ Reset iterator to skip USE side split\n@@ -1039,1 +1042,1 @@\n-              maxlrg = split_USE(MachSpillCopyNode::Bound, def,b,n,inpidx,maxlrg,dup,false, splits,slidx);\n+              delta = split_USE(MachSpillCopyNode::Bound, def,b,n,inpidx,maxlrg,dup,false, splits,slidx);\n@@ -1041,1 +1044,1 @@\n-              if (!maxlrg) {\n+              if (delta < 0) {\n@@ -1044,1 +1047,2 @@\n-              insidx++;  \/\/ Reset iterator to skip USE side split\n+              maxlrg += delta;\n+              insidx += delta;  \/\/ Reset iterator to skip USE side split\n@@ -1051,1 +1055,1 @@\n-              maxlrg = split_USE(MachSpillCopyNode::CallUse, def,b,n,inpidx,maxlrg,dup,false, splits,slidx);\n+              delta = split_USE(MachSpillCopyNode::CallUse, def,b,n,inpidx,maxlrg,dup,false, splits,slidx);\n@@ -1053,1 +1057,1 @@\n-              if (!maxlrg) {\n+              if (delta < 0) {\n@@ -1056,1 +1060,2 @@\n-              insidx++;  \/\/ Reset iterator to skip USE side split\n+              maxlrg += delta;\n+              insidx += delta;  \/\/ Reset iterator to skip USE side split\n@@ -1087,1 +1092,1 @@\n-                  maxlrg = split_USE(MachSpillCopyNode::RegToReg, def,b,n,inpidx,maxlrg,false,false, splits,slidx);\n+                  delta = split_USE(MachSpillCopyNode::RegToReg, def,b,n,inpidx,maxlrg,false,false, splits,slidx);\n@@ -1089,1 +1094,1 @@\n-                  if (!maxlrg) {\n+                  if (delta < 0) {\n@@ -1092,1 +1097,2 @@\n-                  insidx++;  \/\/ Reset iterator to skip USE side split\n+                  maxlrg += delta;\n+                  insidx += delta;  \/\/ Reset iterator to skip USE side split\n@@ -1102,1 +1108,1 @@\n-                  maxlrg = split_USE(MachSpillCopyNode::RegToMem, spill,b,n,inpidx,maxlrg,false,false, splits,slidx);\n+                  delta = split_USE(MachSpillCopyNode::RegToMem, spill,b,n,inpidx,maxlrg,false,false, splits,slidx);\n@@ -1104,1 +1110,1 @@\n-                  if (!maxlrg) {\n+                  if (delta < 0) {\n@@ -1107,1 +1113,2 @@\n-                  insidx += 2;  \/\/ Reset iterator to skip USE side splits\n+                  maxlrg += delta;\n+                  insidx += delta+1;  \/\/ Reset iterator to skip USE side splits\n@@ -1127,1 +1134,1 @@\n-                maxlrg = split_USE(MachSpillCopyNode::RegToMem, def,b,n,inpidx,maxlrg,false,false, splits,slidx);\n+                delta = split_USE(MachSpillCopyNode::RegToMem, def,b,n,inpidx,maxlrg,false,false, splits,slidx);\n@@ -1129,1 +1136,1 @@\n-                if (!maxlrg) {\n+                if (delta < 0) {\n@@ -1132,1 +1139,2 @@\n-                insidx++;  \/\/ Reset iterator to skip USE side split\n+                maxlrg += delta;\n+                insidx += delta;  \/\/ Reset iterator to skip USE side split\n@@ -1142,1 +1150,1 @@\n-                  maxlrg = split_USE(MachSpillCopyNode::MemToReg, def,b,n,inpidx,maxlrg,true,true, splits,slidx);\n+                  delta = split_USE(MachSpillCopyNode::MemToReg, def,b,n,inpidx,maxlrg,true,true, splits,slidx);\n@@ -1144,1 +1152,1 @@\n-                  if (!maxlrg) {\n+                  if (delta < 0) {\n@@ -1147,1 +1155,2 @@\n-                  insidx++;  \/\/ Reset iterator to skip USE side split\n+                  maxlrg += delta;\n+                  insidx += delta;  \/\/ Reset iterator to skip USE side split\n@@ -1150,1 +1159,1 @@\n-                  maxlrg = split_USE(MachSpillCopyNode::MemToReg, def,b,n,inpidx,maxlrg,true,false, splits,slidx);\n+                  delta = split_USE(MachSpillCopyNode::MemToReg, def,b,n,inpidx,maxlrg,true,false, splits,slidx);\n@@ -1152,1 +1161,1 @@\n-                  if (!maxlrg) {\n+                  if (delta < 0) {\n@@ -1163,1 +1172,2 @@\n-                  insidx++;  \/\/ Reset iterator to skip USE side split\n+                  maxlrg += delta;\n+                  insidx += delta;  \/\/ Reset iterator to skip USE side split\n@@ -1361,1 +1371,1 @@\n-        maxlrg = split_USE(MachSpillCopyNode::PhiLocationDifferToInputLocation, def, b, phi, i, maxlrg, !u1, false, splits,slidx);\n+        delta = split_USE(MachSpillCopyNode::PhiLocationDifferToInputLocation, def, b, phi, i, maxlrg, !u1, false, splits,slidx);\n@@ -1363,1 +1373,1 @@\n-        if (!maxlrg) {\n+        if (delta < 0) {\n@@ -1366,0 +1376,1 @@\n+        maxlrg += delta;\n","filename":"src\/hotspot\/share\/opto\/reg_split.cpp","additions":44,"deletions":33,"binary":false,"changes":77,"status":"modified"}]}