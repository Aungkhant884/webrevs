{"files":[{"patch":"@@ -202,0 +202,1 @@\n+  G1RedirtyCardsLocalQueueSet _rdc_local_qset;\n@@ -209,1 +210,2 @@\n-    _rdcq(rdcqs),\n+    _rdc_local_qset(rdcqs),\n+    _rdcq(&_rdc_local_qset),\n@@ -213,0 +215,5 @@\n+  ~RemoveSelfForwardPtrHRClosure() {\n+    _rdcq.flush();\n+    _rdc_local_qset.flush();\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailure.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -61,1 +61,2 @@\n-    _rdcq(rdcqs),\n+    _rdc_local_qset(rdcqs),\n+    _rdcq(&_rdc_local_qset),\n@@ -117,0 +118,1 @@\n+  _rdc_local_qset.flush();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+  G1RedirtyCardsLocalQueueSet _rdc_local_qset;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-G1RedirtyCardsQueueBase::LocalQSet::LocalQSet(G1RedirtyCardsQueueSet* shared_qset) :\n+G1RedirtyCardsLocalQueueSet::G1RedirtyCardsLocalQueueSet(G1RedirtyCardsQueueSet* shared_qset) :\n@@ -39,1 +39,2 @@\n-G1RedirtyCardsQueueBase::LocalQSet::~LocalQSet() {\n+#ifdef ASSERT\n+G1RedirtyCardsLocalQueueSet::~G1RedirtyCardsLocalQueueSet() {\n@@ -44,0 +45,1 @@\n+#endif \/\/ ASSERT\n@@ -45,1 +47,1 @@\n-void G1RedirtyCardsQueueBase::LocalQSet::enqueue_completed_buffer(BufferNode* node) {\n+void G1RedirtyCardsLocalQueueSet::enqueue_completed_buffer(BufferNode* node) {\n@@ -54,2 +56,2 @@\n-G1BufferNodeList G1RedirtyCardsQueueBase::LocalQSet::take_all_completed_buffers() {\n-  G1BufferNodeList result = _buffers;\n+void G1RedirtyCardsLocalQueueSet::flush() {\n+  _shared_qset->add_bufferlist(_buffers);\n@@ -57,5 +59,0 @@\n-  return result;\n-}\n-\n-void G1RedirtyCardsQueueBase::LocalQSet::flush() {\n-  _shared_qset->merge_bufferlist(this);\n@@ -66,3 +63,2 @@\n-G1RedirtyCardsQueue::G1RedirtyCardsQueue(G1RedirtyCardsQueueSet* qset) :\n-  G1RedirtyCardsQueueBase(qset), \/\/ Init _local_qset before passing to PtrQueue.\n-  PtrQueue(&_local_qset, true \/* active (always) *\/)\n+G1RedirtyCardsQueue::G1RedirtyCardsQueue(G1RedirtyCardsLocalQueueSet* qset) :\n+  PtrQueue(qset, true \/* always active *\/)\n@@ -71,0 +67,1 @@\n+#ifdef ASSERT\n@@ -72,1 +69,1 @@\n-  flush();\n+  assert(is_empty(), \"unflushed queue\");\n@@ -74,0 +71,1 @@\n+#endif \/\/ ASSERT\n@@ -81,1 +79,0 @@\n-  _local_qset.flush();\n@@ -137,1 +134,1 @@\n-void G1RedirtyCardsQueueSet::merge_bufferlist(LocalQSet* src) {\n+void G1RedirtyCardsQueueSet::add_bufferlist(const G1BufferNodeList& buffers) {\n@@ -139,6 +136,5 @@\n-  const G1BufferNodeList from = src->take_all_completed_buffers();\n-  if (from._head != NULL) {\n-    assert(from._tail != NULL, \"invariant\");\n-    Atomic::add(&_entry_count, from._entry_count);\n-    _list.prepend(*from._head, *from._tail);\n-    update_tail(from._tail);\n+  if (buffers._head != NULL) {\n+    assert(buffers._tail != NULL, \"invariant\");\n+    Atomic::add(&_entry_count, buffers._entry_count);\n+    _list.prepend(*buffers._head, *buffers._tail);\n+    update_tail(buffers._tail);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RedirtyCardsQueue.cpp","additions":19,"deletions":23,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-#include \"memory\/allocation.hpp\"\n@@ -33,2 +32,0 @@\n-class G1CardTableEntryClosure;\n-class G1RedirtyCardsQueue;\n@@ -39,5 +36,4 @@\n-\/\/ shared qset en masse.  Using the \"base from member\" idiom so the local\n-\/\/ qset is constructed before being passed to the PtrQueue constructor.\n-class G1RedirtyCardsQueueBase {\n-  friend class G1RedirtyCardsQueue;\n-  friend class G1RedirtyCardsQueueSet;\n+\/\/ shared qset en masse.\n+class G1RedirtyCardsLocalQueueSet : public PtrQueueSet {\n+  G1RedirtyCardsQueueSet* _shared_qset;\n+  G1BufferNodeList _buffers;\n@@ -45,19 +41,3 @@\n-  class LocalQSet : public PtrQueueSet {\n-    G1RedirtyCardsQueueSet* _shared_qset;\n-    G1BufferNodeList _buffers;\n-\n-  public:\n-    LocalQSet(G1RedirtyCardsQueueSet* shared_qset);\n-    ~LocalQSet();\n-\n-    \/\/ Add the buffer to the local list.\n-    virtual void enqueue_completed_buffer(BufferNode* node);\n-\n-    \/\/ Transfer all completed buffers to the shared qset.\n-    void flush();\n-\n-    G1BufferNodeList take_all_completed_buffers();\n-  };\n-\n-  G1RedirtyCardsQueueBase(G1RedirtyCardsQueueSet* shared_qset) :\n-    _local_qset(shared_qset) {}\n+public:\n+  G1RedirtyCardsLocalQueueSet(G1RedirtyCardsQueueSet* shared_qset);\n+  ~G1RedirtyCardsLocalQueueSet() NOT_DEBUG(= default);\n@@ -65,1 +45,2 @@\n-  ~G1RedirtyCardsQueueBase() {}\n+  \/\/ Add the buffer to the local list.\n+  virtual void enqueue_completed_buffer(BufferNode* node);\n@@ -67,1 +48,2 @@\n-  LocalQSet _local_qset;\n+  \/\/ Transfer all completed buffers to the shared qset.\n+  void flush();\n@@ -71,1 +53,1 @@\n-class G1RedirtyCardsQueue : private G1RedirtyCardsQueueBase, public PtrQueue {\n+class G1RedirtyCardsQueue : public PtrQueue {\n@@ -76,4 +58,2 @@\n-  G1RedirtyCardsQueue(G1RedirtyCardsQueueSet* qset);\n-\n-  \/\/ Flushes the queue.\n-  ~G1RedirtyCardsQueue();\n+  G1RedirtyCardsQueue(G1RedirtyCardsLocalQueueSet* qset);\n+  ~G1RedirtyCardsQueue() NOT_DEBUG(= default);\n@@ -100,2 +80,0 @@\n-  typedef G1RedirtyCardsQueueBase::LocalQSet LocalQSet;\n-\n@@ -113,1 +91,1 @@\n-  void merge_bufferlist(LocalQSet* src);\n+  void add_bufferlist(const G1BufferNodeList& buffers);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RedirtyCardsQueue.hpp","additions":16,"deletions":38,"binary":false,"changes":54,"status":"modified"}]}