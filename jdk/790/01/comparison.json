{"files":[{"patch":"@@ -75,1 +75,0 @@\n-    -tag spec:X \\\n@@ -92,0 +91,1 @@\n+    -tag spec \\\n","filename":"make\/Docs.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -207,0 +207,8 @@\n+        \/**\n+         * Used for instances of {@link SpecTree}\n+         * representing an {@code @spec} tag.\n+         *\n+         * @since 16\n+         *\/\n+        SPEC(\"spec\"),\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/DocTree.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -290,0 +290,8 @@\n+    \/**\n+     * Visits a SpecTree node.\n+     * @param node the node being visited\n+     * @param p a parameter value\n+     * @return a result value\n+     *\/\n+    R visitSpec(SpecTree node, P p);\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/DocTreeVisitor.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.source.doctree;\n+\n+import java.util.List;\n+\n+\/**\n+ * A tree node for an {@code @spec} block or inline tag.\n+ *\n+ * <pre>\n+ *    {&#064;spec uri label}\n+ *    &#064;spec uri label\n+ * <\/pre>\n+ *\n+ * @since 16\n+ *\/\n+public interface SpecTree extends BlockTagTree, InlineTagTree {\n+    \/**\n+     * Returns whether this instance is an inline tag.\n+     * @return {@code true} if this instance is an inline tag\n+     *\/\n+    boolean isInline();\n+\n+    \/**\n+     * Returns the URI.\n+     *\n+     * @return the URI\n+     *\/\n+    TextTree getURI();\n+\n+    \/**\n+     * Returns the label.\n+     * @return the label\n+     *\/\n+    List<? extends DocTree> getLabel();\n+}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/SpecTree.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -61,0 +61,1 @@\n+import com.sun.source.doctree.SpecTree;\n@@ -305,0 +306,11 @@\n+    \/**\n+     * Creates a new {@code SpecTree} object, to represent a {@code @spec} tag.\n+     *\n+     * @param inline whether this is instance is an inline tag\n+     * @param uri    the uri\n+     * @param label  the label\n+     *\n+     * @return a {@code SpecTree} object\n+     *\/\n+    SpecTree newSpecTree(boolean inline, TextTree uri, List<? extends DocTree> label);\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTreeFactory.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -444,0 +444,14 @@\n+    \/**\n+     * {@inheritDoc} This implementation scans the children in left to right order.\n+     *\n+     * @param node  {@inheritDoc}\n+     * @param p  {@inheritDoc}\n+     * @return the result of scanning\n+     *\/\n+    @Override\n+    public R visitSpec(SpecTree node, P p) {\n+        R r = scan(node.getURI(), p);\n+        r = scanAndReduce(node.getLabel(), p, r);\n+        return r;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTreeScanner.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -403,0 +403,12 @@\n+    \/**\n+     * {@inheritDoc} This implementation calls {@code defaultAction}.\n+     *\n+     * @param node {@inheritDoc}\n+     * @param p {@inheritDoc}\n+     * @return  the result of {@code defaultAction}\n+     *\/\n+    @Override\n+    public R visitSpec(SpecTree node, P p) {\n+        return defaultAction(node, p);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/SimpleDocTreeVisitor.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -294,0 +294,1 @@\n+                            \/\/ fall-through\n@@ -295,1 +296,1 @@\n-                        case SERIAL: case SERIAL_DATA: case SERIAL_FIELD: case SINCE:\n+                        case SERIAL: case SERIAL_DATA: case SERIAL_FIELD: case SINCE: case SPEC:\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTrees.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -272,5 +272,4 @@\n-                    switch (tp.getKind()) {\n-                        case BLOCK:\n-                            return tp.parse(p);\n-                        case INLINE:\n-                            return erroneous(\"dc.bad.inline.tag\", p);\n+                    if (tp.allowsBlock()) {\n+                        return tp.parse(p, TagParser.Kind.BLOCK);\n+                    } else {\n+                        return erroneous(\"dc.bad.inline.tag\", p);\n@@ -329,2 +328,2 @@\n-                    if (tp.getKind() == TagParser.Kind.INLINE) {\n-                        DCEndPosTree<?> tree = (DCEndPosTree<?>) tp.parse(p);\n+                    if (tp.allowsInline()) {\n+                        DCEndPosTree<?> tree = (DCEndPosTree<?>) tp.parse(p, TagParser.Kind.INLINE);\n@@ -1074,1 +1073,1 @@\n-        enum Kind { INLINE, BLOCK }\n+        enum Kind { INLINE, BLOCK, EITHER }\n@@ -1092,2 +1091,6 @@\n-        Kind getKind() {\n-            return kind;\n+        boolean allowsBlock() {\n+            return kind != Kind.INLINE;\n+        }\n+\n+        boolean allowsInline() {\n+            return kind != Kind.BLOCK;\n@@ -1100,1 +1103,10 @@\n-        abstract DCTree parse(int pos) throws ParseException;\n+        DCTree parse(int pos, Kind kind) throws ParseException {\n+            if (kind != this.kind && this.kind != Kind.EITHER) {\n+                throw new IllegalArgumentException(kind.toString());\n+            }\n+            return parse(pos);\n+        }\n+\n+        DCTree parse(int pos) throws ParseException {\n+            throw new UnsupportedOperationException();\n+        }\n@@ -1371,0 +1383,29 @@\n+            \/\/ @spec url label\n+            \/\/ {@spec url label}\n+            new TagParser(TagParser.Kind.EITHER, DCTree.Kind.SPEC) {\n+                @Override\n+                public DCTree parse(int pos, Kind kind) throws ParseException {\n+                    skipWhitespace();\n+                    DCText url = inlineWord();\n+                    if (url == null || url.isBlank()) {\n+                        throw new ParseException(\"dc.no.uri\");\n+                    }\n+                    skipWhitespace();\n+                    List<DCTree> label;\n+                    switch (kind) {\n+                        case BLOCK:\n+                            label = blockContent();\n+                            break;\n+                        case INLINE:\n+                            label = inlineContent();\n+                            break;\n+                        default:\n+                            throw new IllegalArgumentException(kind.toString());\n+                    }\n+                    if (label.isEmpty() || DCTree.isBlank(label)) {\n+                        throw new ParseException(\"dc.no.label\");\n+                    }\n+                    return m.at(pos).newSpecTree(kind == Kind.INLINE, url, label);\n+                }\n+            },\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/DocCommentParser.java","additions":52,"deletions":11,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -3172,0 +3172,6 @@\n+compiler.err.dc.no.uri=\\\n+    no URI\n+\n+compiler.err.dc.no.label=\\\n+    no label\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -74,0 +74,8 @@\n+    public boolean isBlank() {\n+        return false;\n+    }\n+\n+    public static boolean isBlank(List<? extends DCTree> list) {\n+        return list.stream().allMatch(DCTree::isBlank);\n+    }\n+\n@@ -832,0 +840,42 @@\n+    public static class DCSpec extends DCEndPosTree<DCSpec> implements SpecTree {\n+        public final boolean inline;\n+        public final DCText uri;\n+        public final List<DCTree> label;\n+\n+        DCSpec(boolean inline, DCText uri, List<DCTree> label) {\n+            this.inline = inline;\n+            this.uri = uri;\n+            this.label = label;\n+        }\n+\n+        @Override\n+        public String getTagName() {\n+            return \"spec\";\n+        }\n+\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public Kind getKind() {\n+            return Kind.SPEC;\n+        }\n+\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public <R, D> R accept(DocTreeVisitor<R, D> v, D d) {\n+            return v.visitSpec(this, d);\n+        }\n+\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public boolean isInline() {\n+            return inline;\n+        }\n+\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public TextTree getURI() {\n+            return uri;\n+        }\n+\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public List<? extends DocTree> getLabel() {\n+            return label;\n+        }\n+    }\n+\n@@ -922,0 +972,5 @@\n+        @Override\n+        public boolean isBlank() {\n+            return text.isBlank();\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DCTree.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -487,0 +487,20 @@\n+    @Override @DefinedBy(Api.COMPILER_TREE)\n+    public Void visitSpec(SpecTree node, Void p) {\n+        try {\n+            if (node.isInline()) {\n+                print(\"{\");\n+            }\n+            printTagName(node);\n+            print(\" \");\n+            print(node.getURI());\n+            print(\" \");\n+            print(node.getLabel());\n+            if (node.isInline()) {\n+                print(\"}\");\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        return null;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocPretty.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.util.EnumSet;\n@@ -79,0 +78,1 @@\n+import com.sun.tools.javac.tree.DCTree.DCSpec;\n@@ -429,0 +429,7 @@\n+    @Override @DefinedBy(Api.COMPILER_TREE)\n+    public DCSpec newSpecTree(boolean inline, TextTree url, List<? extends DocTree> label) {\n+        DCSpec tree = new DCSpec(inline, (DCText) url, cast(label));\n+        tree.pos = pos;\n+        return tree;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocTreeMaker.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -147,0 +147,1 @@\n+    public final Content otherSpecifications;\n@@ -165,0 +166,1 @@\n+    public final Content specificationLabel;\n@@ -281,0 +283,1 @@\n+        otherSpecifications = getContent(\"doclet.Other_Specifications\");\n@@ -299,0 +302,1 @@\n+        specificationLabel = getContent(\"doclet.Specification\");\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Contents.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-        CONSTANT_VALUES, DEPRECATED, SERIALIZED_FORM, SYSTEM_PROPERTIES\n+        CONSTANT_VALUES, DEPRECATED, OTHER_SPECS, SERIALIZED_FORM, SYSTEM_PROPERTIES\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlConfiguration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import jdk.javadoc.doclet.DocletEnvironment;\n@@ -187,0 +186,1 @@\n+            OtherSpecsWriter.generate(configuration);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDoclet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.net.URI;\n+import java.net.URISyntaxException;\n@@ -72,0 +74,1 @@\n+import com.sun.source.doctree.SpecTree;\n@@ -1530,2 +1533,11 @@\n-                    \/\/ we need to pass the DocTreeImpl here, so ignore node\n-                    result.add(seeTagToContent(element, tag));\n+                    result.add(seeTagToContent(element, node));\n+                    return false;\n+                }\n+\n+                @Override\n+                public Boolean visitSpec(SpecTree node, Content c) {\n+                    Content output = getInlineTagOutput(element, holderTag, node,\n+                            isFirstSentence, inSummary);\n+                    if (output != null) {\n+                        result.add(output);\n+                    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -98,0 +98,1 @@\n+        OTHER_SPECS,\n@@ -303,0 +304,1 @@\n+            case OTHER_SPECS:\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Navigation.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,211 @@\n+\/*\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.javadoc.internal.doclets.formats.html;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.TreeMap;\n+import java.util.WeakHashMap;\n+import javax.lang.model.element.Element;\n+\n+import com.sun.source.doctree.DocTree;\n+import com.sun.source.doctree.SpecTree;\n+import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;\n+import jdk.javadoc.internal.doclets.formats.html.markup.BodyContents;\n+import jdk.javadoc.internal.doclets.formats.html.markup.ContentBuilder;\n+import jdk.javadoc.internal.doclets.formats.html.markup.FixedStringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle;\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree;\n+import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Table;\n+import jdk.javadoc.internal.doclets.formats.html.markup.TableHeader;\n+import jdk.javadoc.internal.doclets.toolkit.Content;\n+import jdk.javadoc.internal.doclets.toolkit.DocletElement;\n+import jdk.javadoc.internal.doclets.toolkit.OverviewElement;\n+import jdk.javadoc.internal.doclets.toolkit.util.DocFileIOException;\n+import jdk.javadoc.internal.doclets.toolkit.util.DocPath;\n+import jdk.javadoc.internal.doclets.toolkit.util.DocPaths;\n+import jdk.javadoc.internal.doclets.toolkit.util.IndexItem;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.Collectors.toList;\n+\n+\/**\n+ * Generates the file with the summary of all the references to other specifications.\n+ *\n+ *  <p><b>This is NOT part of any supported API.\n+ *  If you write code that depends on this, you do so at your own risk.\n+ *  This code and its internal interfaces are subject to change or\n+ *  deletion without notice.<\/b>\n+ *\/\n+public class OtherSpecsWriter extends HtmlDocletWriter {\n+\n+    private final Navigation navBar;\n+\n+    \/**\n+     * Cached contents of {@code <title>...<\/title>} tags of the HTML pages.\n+     *\/\n+    final Map<Element, String> titles = new WeakHashMap<>();\n+\n+    \/**\n+     * Constructs OtherSpecWriter object.\n+     *\n+     * @param configuration The current configuration\n+     * @param filename Path to the file which is getting generated.\n+     *\/\n+    public OtherSpecsWriter(HtmlConfiguration configuration, DocPath filename) {\n+        super(configuration, filename);\n+        this.navBar = new Navigation(null, configuration, PageMode.OTHER_SPECS, path);\n+    }\n+\n+    public static void generate(HtmlConfiguration configuration) throws DocFileIOException {\n+        generate(configuration, DocPaths.OTHER_SPECS);\n+    }\n+\n+    private static void generate(HtmlConfiguration configuration, DocPath fileName) throws DocFileIOException {\n+        boolean hasOtherSpecs = configuration.mainIndex != null\n+                && !configuration.mainIndex.getItems(DocTree.Kind.SPEC).isEmpty();\n+        if (!hasOtherSpecs) {\n+            return;\n+        }\n+        OtherSpecsWriter otherSpecWriter = new OtherSpecsWriter(configuration, fileName);\n+        otherSpecWriter.buildOtherSpecsPage();\n+        configuration.conditionalPages.add(HtmlConfiguration.ConditionalPage.OTHER_SPECS);\n+    }\n+\n+    \/**\n+     * Prints all the \"other specs\" to the file.\n+     *\/\n+    protected void buildOtherSpecsPage() throws DocFileIOException {\n+        String title = resources.getText(\"doclet.Other_Specifications\");\n+        HtmlTree body = getBody(getWindowTitle(title));\n+        Content mainContent = new ContentBuilder();\n+        addOtherSpecs(mainContent);\n+        body.add(new BodyContents()\n+                .setHeader(getHeader(PageMode.OTHER_SPECS))\n+                .addMainContent(HtmlTree.DIV(HtmlStyle.header,\n+                        HtmlTree.HEADING(Headings.PAGE_TITLE_HEADING,\n+                                contents.getContent(\"doclet.Other_Specifications\"))))\n+                .addMainContent(mainContent)\n+                .setFooter(getFooter()));\n+        printHtmlDocument(null, \"other specifications\", body);\n+\n+        if (configuration.mainIndex != null) {\n+            configuration.mainIndex.add(IndexItem.of(IndexItem.Category.TAGS, title, path));\n+        }\n+    }\n+\n+    \/**\n+     * Adds all the references to other specifications to the content tree.\n+     *\n+     * @param content HtmlTree content to which the links will be added\n+     *\/\n+    protected void addOtherSpecs(Content content) {\n+        Map<String, List<IndexItem>> searchIndexMap = groupOtherSpecs();\n+        Content separator = new StringContent(\", \");\n+        Table table = new Table(HtmlStyle.summaryTable)\n+                .setCaption(contents.otherSpecifications)\n+                .setHeader(new TableHeader(contents.specificationLabel, contents.referencedIn))\n+                .setColumnStyles(HtmlStyle.colFirst, HtmlStyle.colLast);\n+        for (Entry<String, List<IndexItem>> entry : searchIndexMap.entrySet()) {\n+            List<IndexItem> searchIndexItems = entry.getValue();\n+            Content specName = createSpecLink(searchIndexItems.get(0));\n+            Content separatedReferenceLinks = new ContentBuilder();\n+            separatedReferenceLinks.add(createLink(searchIndexItems.get(0)));\n+            for (int i = 1; i < searchIndexItems.size(); i++) {\n+                separatedReferenceLinks.add(separator);\n+                separatedReferenceLinks.add(createLink(searchIndexItems.get(i)));\n+            }\n+            table.addRow(specName, HtmlTree.DIV(HtmlStyle.block, separatedReferenceLinks));\n+        }\n+        content.add(table);\n+    }\n+\n+    private Map<String, List<IndexItem>> groupOtherSpecs() {\n+        return configuration.mainIndex.getItems(DocTree.Kind.SPEC).stream()\n+                .collect(groupingBy(IndexItem::getLabel, TreeMap::new, toList()));\n+    }\n+\n+    private Content createLink(IndexItem i) {\n+        assert i.getDocTree().getKind() == DocTree.Kind.SPEC : i;\n+        Element element = i.getElement();\n+        if (element instanceof OverviewElement) {\n+            return links.createLink(pathToRoot.resolve(i.getUrl()),\n+                    resources.getText(\"doclet.Overview\"));\n+        } else if (element instanceof DocletElement) {\n+            DocletElement e = (DocletElement) element;\n+            \/\/ Implementations of DocletElement do not override equals and\n+            \/\/ hashCode; putting instances of DocletElement in a map is not\n+            \/\/ incorrect, but might well be inefficient\n+            String t = titles.computeIfAbsent(element, utils::getHTMLTitle);\n+            if (t.isBlank()) {\n+                \/\/ The user should probably be notified (a warning?) that this\n+                \/\/ file does not have a title\n+                Path p = Path.of(e.getFileObject().toUri());\n+                t = p.getFileName().toString();\n+            }\n+            ContentBuilder b = new ContentBuilder();\n+            b.add(HtmlTree.CODE(new FixedStringContent(i.getHolder() + \": \")));\n+            \/\/ non-program elements should be displayed using a normal font\n+            b.add(t);\n+            return links.createLink(pathToRoot.resolve(i.getUrl()), b);\n+        } else {\n+            \/\/ program elements should be displayed using a code font\n+            Content link = links.createLink(pathToRoot.resolve(i.getUrl()), i.getHolder());\n+            return HtmlTree.CODE(link);\n+        }\n+    }\n+\n+    private Content createSpecLink(IndexItem i) {\n+        assert i.getDocTree().getKind() == DocTree.Kind.SPEC : i;\n+        SpecTree specTree = (SpecTree) i.getDocTree();\n+\n+        Content label = commentTagsToContent(specTree, i.getElement(), specTree.getLabel(), false);\n+\n+        URI specURI;\n+        try {\n+            specURI = new URI(specTree.getURI().getBody());\n+        } catch (URISyntaxException e) {\n+            \/\/ should not happen: items with bad URIs should not make it into the index\n+            return label;\n+        }\n+\n+        if (!specURI.isAbsolute()) {\n+            URI baseURI = configuration.getOptions().specBaseURI();\n+            if (baseURI != null) {\n+                if (!baseURI.isAbsolute() && !pathToRoot.isEmpty()) {\n+                    baseURI = URI.create(pathToRoot.getPath() + \"\/\").resolve(baseURI);\n+                }\n+                specURI = baseURI.resolve(specURI);\n+            }\n+        }\n+\n+        return HtmlTree.A(specURI, label);\n+    }\n+}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/OtherSpecsWriter.java","additions":211,"deletions":0,"binary":false,"changes":211,"status":"added"},{"patch":"@@ -28,0 +28,2 @@\n+import java.net.URI;\n+import java.net.URISyntaxException;\n@@ -29,0 +31,1 @@\n+import java.util.stream.Collectors;\n@@ -47,0 +50,1 @@\n+import com.sun.source.doctree.SpecTree;\n@@ -49,0 +53,2 @@\n+import com.sun.source.doctree.TextTree;\n+import com.sun.source.util.DocTreePath;\n@@ -260,0 +266,7 @@\n+    String textOf(List<? extends DocTree> trees) {\n+        return trees.stream()\n+                .filter(dt -> dt instanceof TextTree)\n+                .map(dt -> ((TextTree) dt).getBody().trim())\n+                .collect(Collectors.joining(\" \"));\n+    }\n+\n@@ -285,0 +298,51 @@\n+    @Override\n+    public Content specTagOutput(Element holder, List<? extends SpecTree> specTags) {\n+        if (specTags.size() == 1 && specTags.get(0).isInline()) {\n+            \/\/ used as an inline tag\n+            SpecTree st = specTags.get(0);\n+            return specTagToContent(holder, st);\n+        } else {\n+            \/\/ used as zero or more block tags\n+            ContentBuilder body = new ContentBuilder();\n+            for (SpecTree st : specTags) {\n+                appendSeparatorIfNotEmpty(body);\n+                body.add(specTagToContent(holder, st));\n+            }\n+            if (body.isEmpty())\n+                return body;\n+\n+            return new ContentBuilder(\n+                    HtmlTree.DT(contents.otherSpecifications),\n+                    HtmlTree.DD(body));\n+        }\n+    }\n+\n+    private Content specTagToContent(Element holder, SpecTree specTree) {\n+        Content label = createAnchorAndSearchIndex(holder,\n+                textOf(specTree.getLabel()),\n+                htmlWriter.commentTagsToContent(specTree, holder, specTree.getLabel(), isFirstSentence),\n+                resources.getText(\"doclet.Other_Specification\"),\n+                specTree);\n+        URI specURI;\n+        try {\n+            specURI = new URI(specTree.getURI().getBody());\n+        } catch (URISyntaxException e) {\n+            CommentHelper ch = utils.getCommentHelper(holder);\n+            DocTreePath dtp = ch.getDocTreePath(specTree);\n+            htmlWriter.messages.error(dtp, \"doclet.Invalid_URI\", e.getMessage());\n+            return label;\n+        }\n+\n+        if (!specURI.isAbsolute()) {\n+            URI baseURI = configuration.getOptions().specBaseURI();\n+            if (baseURI != null) {\n+                if (!baseURI.isAbsolute() && !htmlWriter.pathToRoot.isEmpty()) {\n+                    baseURI = URI.create(htmlWriter.pathToRoot.getPath() + \"\/\").resolve(baseURI);\n+                }\n+                specURI = baseURI.resolve(specURI);\n+            }\n+        }\n+\n+        return HtmlTree.A(specURI, label);\n+    }\n+\n@@ -371,1 +435,0 @@\n-    @SuppressWarnings(\"preview\")\n@@ -373,0 +436,5 @@\n+        return createAnchorAndSearchIndex(element, tagText, new StringContent(tagText), desc, tree);\n+    }\n+\n+    @SuppressWarnings(\"preview\")\n+    private Content createAnchorAndSearchIndex(Element element, String tagText, Content tagContent, String desc, DocTree tree) {\n@@ -375,1 +443,1 @@\n-            result = new StringContent(tagText);\n+            result = tagContent;\n@@ -383,1 +451,1 @@\n-            result = HtmlTree.SPAN(anchorName, HtmlStyle.searchTagResult, new StringContent(tagText));\n+            result = HtmlTree.SPAN(anchorName, HtmlStyle.searchTagResult, tagContent);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/TagletWriterImpl.java","additions":71,"deletions":3,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -647,0 +647,5 @@\n+    \/**\n+     * The class of the {@code body} element for the other-specifications page.\n+     *\/\n+    otherSpecsPage,\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/HtmlStyle.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.net.URI;\n@@ -303,0 +304,1 @@\n+     * The {@code ref} argument will be URL-encoded for use as the attribute value.\n@@ -314,0 +316,16 @@\n+    \/**\n+     * Creates an HTML {@code A} element.\n+     * The {@code ref} argument is assumed to be already suitably encoded,\n+     * and will <i>not<\/i> be additionally URL-encoded, but will be\n+     * {@link URI#toASCIIString() converted} to ASCII for use as the attribute value.\n+     *\n+     * @param ref the value for the {@code href} attribute}\n+     * @param body the content for element\n+     * @return the element\n+     *\/\n+    public static HtmlTree A(URI ref, Content body) {\n+        return new HtmlTree(TagName.A)\n+                .put(HtmlAttr.HREF, ref.toASCIIString())\n+                .add(body);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/HtmlTree.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -127,0 +127,2 @@\n+doclet.Other_Specifications=Other Specifications\n+doclet.Specification=Specification\n@@ -494,0 +496,8 @@\n+doclet.usage.spec-base-uri=\\\n+    <URI>\n+doclet.usage.spec-base-uri.description=\\\n+    Specify a base URI for relative URIs in @spec tags\n+\n+doclet.Invalid_URI=\\\n+    invalid URI: {0}\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/standard.properties","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import java.net.URI;\n+import java.net.URISyntaxException;\n@@ -257,0 +259,6 @@\n+    \/**\n+     * Argument for command-line option {@code --spec-base-URI}.\n+     * The base URI for relative URIs in {@code @spec} tags.\n+     *\/\n+    private URI specBaseURI;\n+\n@@ -552,0 +560,16 @@\n+                new Option(resources, \"--spec-base-uri\", 1) {\n+                    @Override\n+                    public boolean process(String opt, List<String> args) {\n+                        String arg = args.get(0);\n+                        try {\n+                            specBaseURI = new URI(arg);\n+                            return true;\n+                        } catch (URISyntaxException e) {\n+                            config.reporter.print(ERROR,\n+                                    config.getDocResources().getText(\"doclet.Invalid_URI\",\n+                                            e.getMessage()));\n+                            return false;\n+                        }\n+                    }\n+                },\n+\n@@ -903,0 +927,8 @@\n+    \/**\n+     * Argument for command-line option {@code --spec-base-URI}.\n+     * The base URI for relative URIs in {@code @spec} tags.\n+     *\/\n+    public URI specBaseURI() {\n+        return specBaseURI;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/BaseOptions.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -26,9 +26,0 @@\n-\/**\n- *  A utility class.\n- *\n- *  <p><b>This is NOT part of any supported API.\n- *  If you write code that depends on this, you do so at your own risk.\n- *  This code and its internal interfaces are subject to change or\n- *  deletion without notice.<\/b>\n- *\/\n-\n@@ -71,0 +62,8 @@\n+\/**\n+ *  A utility class.\n+ *\n+ *  <p><b>This is NOT part of any supported API.\n+ *  If you write code that depends on this, you do so at your own risk.\n+ *  This code and its internal interfaces are subject to change or\n+ *  deletion without notice.<\/b>\n+ *\/\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/CommentUtils.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -89,0 +89,2 @@\n+doclet.Other_Specification=Other Specification\n+doclet.Other_Specifications=Other Specifications:\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/resources\/doclets.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.javadoc.internal.doclets.toolkit.taglets;\n+\n+import java.util.EnumSet;\n+import java.util.List;\n+import javax.lang.model.element.Element;\n+\n+import com.sun.source.doctree.DocTree;\n+import com.sun.source.doctree.SpecTree;\n+import jdk.javadoc.doclet.Taglet.Location;\n+import jdk.javadoc.internal.doclets.toolkit.Content;\n+import jdk.javadoc.internal.doclets.toolkit.util.CommentHelper;\n+import jdk.javadoc.internal.doclets.toolkit.util.DocFinder;\n+import jdk.javadoc.internal.doclets.toolkit.util.DocFinder.Input;\n+import jdk.javadoc.internal.doclets.toolkit.util.Utils;\n+\n+\/**\n+ * A taglet that represents the @spec tag.\n+ *\n+ *  <p><b>This is NOT part of any supported API.\n+ *  If you write code that depends on this, you do so at your own risk.\n+ *  This code and its internal interfaces are subject to change or\n+ *  deletion without notice.<\/b>\n+ *\/\n+public class SpecTaglet extends BaseTaglet implements InheritableTaglet {\n+\n+    public SpecTaglet() {\n+        super(DocTree.Kind.SPEC, true, EnumSet.allOf(Location.class));\n+    }\n+\n+    @Override\n+    public boolean isBlockTag() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void inherit(Input input, DocFinder.Output output) {\n+        List<? extends SpecTree> tags = input.utils.getSpecTrees(input.element);\n+        if (!tags.isEmpty()) {\n+            CommentHelper ch =  input.utils.getCommentHelper(input.element);\n+            output.holder = input.element;\n+            output.holderTag = tags.get(0);\n+            output.inlineTags = input.isFirstSentence\n+                    ? ch.getFirstSentenceTrees(output.holderTag)\n+                    : ch.getReference(output.holderTag);\n+        }\n+    }\n+\n+    @Override\n+    public Content getInlineTagOutput(Element element, DocTree tag, TagletWriter writer) {\n+        return writer.specTagOutput(element, List.of((SpecTree) tag));\n+    }\n+\n+    @Override\n+    public Content getAllBlockTagOutput(Element holder, TagletWriter writer) {\n+        Utils utils = writer.configuration().utils;\n+        List<? extends SpecTree> tags = utils.getSpecTrees(holder);\n+        Element e = holder;\n+        if (tags.isEmpty() && utils.isExecutableElement(holder)) {\n+            Input input = new Input(utils, holder, this);\n+            DocFinder.Output inheritedDoc = DocFinder.search(writer.configuration(), input);\n+            if (inheritedDoc.holder != null) {\n+                tags = utils.getSpecTrees(inheritedDoc.holder);\n+                e = inheritedDoc.holder;\n+            }\n+        }\n+        return writer.specTagOutput(e, tags);\n+    }\n+}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/SpecTaglet.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -641,0 +641,1 @@\n+        addStandardTaglet(new SpecTaglet());\n@@ -736,1 +737,1 @@\n-            String name = t.isInlineTag() ? \"{@\" + t.getName() + \"}\" : \"@\" + t.getName();\n+            String name = t.isBlockTag() ? \"@\" + t.getName() : \"{@\" + t.getName() + \"}\";\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/TagletManager.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import com.sun.source.doctree.SpecTree;\n@@ -176,0 +177,10 @@\n+    \/**\n+     * Returns the output for one or more {@code @spec} tags.\n+     *\n+     * @param element  the element that owns the doc comment\n+     * @param specTags the array of @spec tags.\n+     *\n+     * @return the output\n+     *\/\n+    protected abstract Content specTagOutput(Element element, List<? extends SpecTree> specTags);\n+\n@@ -179,1 +190,1 @@\n-     * @param element           The element that owns the doc comment\n+     * @param element           the element that owns the doc comment\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/TagletWriter.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -121,0 +121,3 @@\n+    \/** The name of the file for all references to other specifications. *\/\n+    public static final DocPath OTHER_SPECS = DocPath.create(\"other-specs.html\");\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/DocPaths.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n-            case INDEX, SYSTEM_PROPERTY -> { }\n+            case INDEX, SPEC, SYSTEM_PROPERTY -> { }\n@@ -346,1 +346,1 @@\n-            case INDEX, SYSTEM_PROPERTY -> Category.TAGS;\n+            case INDEX, SPEC, SYSTEM_PROPERTY -> Category.TAGS;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/IndexItem.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -100,0 +100,1 @@\n+import com.sun.source.doctree.SpecTree;\n@@ -2824,0 +2825,4 @@\n+    public List<? extends SpecTree> getSpecTrees(Element element) {\n+        return getBlockTags(element, SPEC, SpecTree.class);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -76,0 +76,11 @@\n+    @Test\n+    public void testOtherSpecs(Path base) throws IOException {\n+        test(base, \"\"\"\n+                package p;\n+                \/** @spec http:\/\/example.com label. *\/\n+                public class C {  }\n+                \"\"\",\n+                \"other-specs.html\",\n+                b -> checkOutput(\"index-all.html\", b, \"Other&nbsp;Specifications\"));\n+    }\n+\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testConditionalPages\/TestConditionalPages.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -157,0 +157,1 @@\n+        \"other-specs-page\",\n@@ -223,0 +224,1 @@\n+            \"OtherSpecsWriter\",\n@@ -358,0 +360,4 @@\n+            case \"OtherSpecsWriter\":\n+                check(generator, content, content.startsWith(\"other specifications\"));\n+                break;\n+\n@@ -395,1 +401,7 @@\n-                    \"\/** Class pA.CA. *\/ package pA; public class CA { @Deprecated public static final int ZERO = 0; }\",\n+                    \"\"\"\n+                        \/** Class pA.CA. *\/\n+                        package pA; public class CA {\n+                            \/** First sentence. This is an {@spec http:\/\/example.com example reference}. *\/\n+                            @Deprecated public static final int ZERO = 0;\n+                        }\n+                        \"\"\",\n@@ -410,1 +422,8 @@\n-                        .classes(\"\/** Class mA\/pA.CA. *\/ package pA; public class CA { @Deprecated public static int ZERO = 0; }\")\n+                        .classes(\"\"\"\n+                            \/** Class mA\/pA.CA. *\/\n+                            package pA;\n+                            public class CA {\n+                                \/** First sentence. This is an {@spec http:\/\/example.com example reference}. *\/\n+                                @Deprecated public static int ZERO = 0;\n+                            }\n+                        \"\"\")\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMetadata\/TestMetadata.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,373 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6251738 8226279\n+ * @summary JDK-8226279 javadoc should support a new at-spec tag\n+ * @library \/tools\/lib ..\/..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build toolbox.ToolBox javadoc.tester.*\n+ * @run main TestSpecTag\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestSpecTag extends JavadocTester {\n+    public static void main(String... args) throws Exception {\n+        TestSpecTag tester = new TestSpecTag();\n+        tester.runTests(m -> new Object[] { Path.of(m.getName()) });\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    enum PlaceKind { FIRST_SENTENCE, OTHER_INLINE, BLOCK }\n+    enum LinkKind { ABSOLUTE, RELATIVE }\n+\n+    @Test\n+    public void testBadSpecBaseURI(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"package p; public class C { }\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"--spec-base-uri\", \"http:\/\/[\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.CMDERR);\n+        checkOutput(Output.OUT, true,\n+                \"javadoc: error - invalid URI: Expected closing bracket for IPv6 address at index 8: http:\/\/[\");\n+    }\n+\n+    @Test\n+    public void testBadSpecURI(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"package p; \/** @spec http:\/\/[ label *\/ public class C { }\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.ERROR);\n+\n+        checkOutput(Output.OUT, true,\n+                \"testBadSpecURI\/src\/p\/C.java:1:\".replace('\/', File.separatorChar)\n+                    + \" error - invalid URI: Expected closing bracket for IPv6 address at index 8: http:\/\/[\");\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <dl class=\"notes\">\n+                    <dt>Other Specifications<\/dt>\n+                    <dd><span id=\"label\" class=\"search-tag-result\">label<\/span><\/dd>\n+                    <\/dl>\n+                    \"\"\");\n+\n+        checkOutput(\"other-specs.html\", true,\n+                \"\"\"\n+                    <div class=\"col-first even-row-color\">label<\/div>\n+                    <div class=\"col-last even-row-color\">\n+                    <div class=\"block\"><code><a href=\"p\/C.html#label\">class p.C<\/a><\/code><\/div>\n+                    \"\"\");\n+    }\n+\n+    @Test\n+    public void testNavigation(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"package p; \/** @spec http:\/\/example.com label *\/ public class C { }\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"other-specs.html\", true,\n+                \"\"\"\n+                    <!-- ========= START OF TOP NAVBAR ======= -->\n+                    <div class=\"top-nav\" id=\"navbar.top\">\n+                    <div class=\"skip-nav\"><a href=\"#skip.navbar.top\" title=\"Skip navigation links\">Skip navigation links<\/a><\/div>\n+                    <ul id=\"navbar.top.firstrow\" class=\"nav-list\" title=\"Navigation\">\n+                    <li><a href=\"p\/package-summary.html\">Package<\/a><\/li>\n+                    <li>Class<\/li>\n+                    <li><a href=\"p\/package-tree.html\">Tree<\/a><\/li>\n+                    <li><a href=\"index-all.html\">Index<\/a><\/li>\n+                    <li><a href=\"help-doc.html\">Help<\/a><\/li>\n+                    <\/ul>\n+                    <\/div>\n+                    <div class=\"sub-nav\">\n+                    <div class=\"nav-list-search\"><label for=\"search\">SEARCH:<\/label>\n+                    <input type=\"text\" id=\"search\" value=\"search\" disabled=\"disabled\">\n+                    <input type=\"reset\" id=\"reset\" value=\"reset\" disabled=\"disabled\">\n+                    <\/div>\n+                    <\/div>\n+                    <!-- ========= END OF TOP NAVBAR ========= -->\n+                    \"\"\");\n+    }\n+\n+    @Test\n+    public void testEncodedURI(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        \/\/ The default encoding for OpenJDK source files is ASCII.\n+        \/\/ The following writes a file using UTF-8 containing a non-ASCII character (section)\n+        \/\/ and a Unicode escape for another character (plus or minus)\n+        tb.writeJavaFiles(src, \"\"\"\n+                package p;\n+                \/**\n+                 * @spec http:\/\/example.com\/a+b         space: plus\n+                 * @spec http:\/\/example.com\/a%20b       space: percent\n+                 * @spec http:\/\/example.com\/a\\u00A7b    other: section; U+00A7, UTF-8 c2 a7\n+                 * @spec http:\/\/example.com\/a\\\\u00B1b   unicode: plus or minus; U+00B1, UTF-8 c2 b1\n+                 *\/\n+                public class C { }\n+                \"\"\");\n+\n+        \/\/ Ensure the source file is read using UTF-8\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"--source-path\", src.toString(),\n+                \"-encoding\", \"UTF-8\",\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <dl class=\"notes\">\n+                    <dt>Other Specifications<\/dt>\n+                    <dd><a href=\"http:\/\/example.com\/a+b\"><span id=\"space:plus\" class=\"search-tag-result\">space: plus<\/span><\/a>,\\s\n+                    <a href=\"http:\/\/example.com\/a%20b\"><span id=\"space:percent\" class=\"search-tag-result\">space: percent<\/span><\/a>,\\s\n+                    <a href=\"http:\/\/example.com\/a%C2%A7b\"><span id=\"other:section;U+00A7,UTF-8c2a7\" class=\"search-tag-result\">other: section; U+00A7, UTF-8 c2 a7<\/span><\/a>,\\s\n+                    <a href=\"http:\/\/example.com\/a%C2%B1b\"><span id=\"unicode:plusorminus;U+00B1,UTF-8c2b1\" class=\"search-tag-result\">unicode: plus or minus; U+00B1, UTF-8 c2 b1<\/span><\/a><\/dd>\n+                    <\/dl>\n+                    \"\"\");\n+\n+        checkOutput(\"other-specs.html\", true,\n+                \"\"\"\n+                    <div class=\"table-header col-first\">Specification<\/div>\n+                    <div class=\"table-header col-last\">Referenced In<\/div>\n+                    <div class=\"col-first even-row-color\"><a href=\"http:\/\/example.com\/a%C2%A7b\">other: section; U+00A7, UTF-8 c2 a7<\/a><\/div>\n+                    <div class=\"col-last even-row-color\">\n+                    <div class=\"block\"><code><a href=\"p\/C.html#other:section;U+00A7,UTF-8c2a7\">class p.C<\/a><\/code><\/div>\n+                    <\/div>\n+                    <div class=\"col-first odd-row-color\"><a href=\"http:\/\/example.com\/a%20b\">space: percent<\/a><\/div>\n+                    <div class=\"col-last odd-row-color\">\n+                    <div class=\"block\"><code><a href=\"p\/C.html#space:percent\">class p.C<\/a><\/code><\/div>\n+                    <\/div>\n+                    <div class=\"col-first even-row-color\"><a href=\"http:\/\/example.com\/a+b\">space: plus<\/a><\/div>\n+                    <div class=\"col-last even-row-color\">\n+                    <div class=\"block\"><code><a href=\"p\/C.html#space:plus\">class p.C<\/a><\/code><\/div>\n+                    <\/div>\n+                    <div class=\"col-first odd-row-color\"><a href=\"http:\/\/example.com\/a%C2%B1b\">unicode: plus or minus; U+00B1, UTF-8 c2 b1<\/a><\/div>\n+                    <div class=\"col-last odd-row-color\">\n+                    <div class=\"block\"><code><a href=\"p\/C.html#unicode:plusorminus;U+00B1,UTF-8c2b1\">class p.C<\/a><\/code><\/div>\n+                    <\/div>\n+                    \"\"\");\n+    }\n+\n+    @Test\n+    public void testDuplicateRefs(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package p;\n+                \/**\n+                 * @spec http:\/\/example.com\/ example\n+                 *\/\n+                public class C {\n+                    \/**\n+                     * @spec http:\/\/example.com\/ example\n+                     *\/\n+                     public void m() { }\n+                    \/**\n+                     * @spec http:\/\/example.com\/ example\n+                     *\/\n+                     public int f;\n+                }\n+                \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOrder(\"p\/C.html\",\n+                \"<h1 title=\\\"Class C\\\" class=\\\"title\\\">Class C<\/h1>\",\n+                \"\"\"\n+                    <dt>Other Specifications<\/dt>\n+                    <dd><a href=\"http:\/\/example.com\/\"><span id=\"example\" class=\"search-tag-result\">example<\/span><\/a><\/dd>\n+                    \"\"\",\n+                \"<section class=\\\"field-details\\\" id=\\\"field.detail\\\">\",\n+                \"\"\"\n+                    <dt>Other Specifications<\/dt>\n+                    <dd><a href=\"http:\/\/example.com\/\"><span id=\"example-1\" class=\"search-tag-result\">example<\/span><\/a><\/dd>\n+                    \"\"\",\n+                \"<section class=\\\"detail\\\" id=\\\"m()\\\">\",\n+                \"\"\"\n+                    <dt>Other Specifications<\/dt>\n+                    <dd><a href=\"http:\/\/example.com\/\"><span id=\"example-2\" class=\"search-tag-result\">example<\/span><\/a><\/dd>\n+                    \"\"\");\n+\n+        checkOutput(\"other-specs.html\", true,\n+                \"\"\"\n+                    <div class=\"col-first even-row-color\"><a href=\"http:\/\/example.com\/\">example<\/a><\/div>\n+                    <div class=\"col-last even-row-color\">\n+                    <div class=\"block\"><code><a href=\"p\/C.html#example\">class p.C<\/a><\/code>, \\\n+                    <code><a href=\"p\/C.html#example-1\">p.C.f<\/a><\/code>, \\\n+                    <code><a href=\"p\/C.html#example-2\">p.C.m()<\/a><\/code><\/div>\n+                    <\/div>\"\"\");\n+\n+    }\n+\n+    @Test\n+    public void testMultiple(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package p;\n+                \/**\n+                 * First sentence.\n+                 * First reference: {@spec http:\/\/example.com\/1 example-1}.\n+                 * Another reference: {@spec http:\/\/example.com\/2 example-2}.\n+                 * @spec http:\/\/example.com\/3 example-3\n+                 * @spec http:\/\/example.com\/4 example-4\n+                 *\/\n+                public class C { }\n+                \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <div class=\"block\">First sentence.\n+                     First reference: <a href=\"http:\/\/example.com\/1\"><span id=\"example-1\" class=\"search-tag-result\">example-1<\/span><\/a>.\n+                     Another reference: <a href=\"http:\/\/example.com\/2\"><span id=\"example-2\" class=\"search-tag-result\">example-2<\/span><\/a>.<\/div>\n+                    \"\"\",\n+                \"\"\"\n+                    <dt>Other Specifications<\/dt>\n+                    <dd><a href=\"http:\/\/example.com\/3\"><span id=\"example-3\" class=\"search-tag-result\">example-3<\/span><\/a>,\\s\n+                    <a href=\"http:\/\/example.com\/4\"><span id=\"example-4\" class=\"search-tag-result\">example-4<\/span><\/a><\/dd>\n+                    \"\"\");\n+\n+        checkOutput(\"other-specs.html\", true,\n+                \"\"\"\n+                    <div class=\"col-first even-row-color\"><a href=\"http:\/\/example.com\/1\">example-1<\/a><\/div>\n+                    <div class=\"col-last even-row-color\">\n+                    <div class=\"block\"><code><a href=\"p\/C.html#example-1\">class p.C<\/a><\/code><\/div>\n+                    <\/div>\n+                    <div class=\"col-first odd-row-color\"><a href=\"http:\/\/example.com\/2\">example-2<\/a><\/div>\n+                    <div class=\"col-last odd-row-color\">\n+                    <div class=\"block\"><code><a href=\"p\/C.html#example-2\">class p.C<\/a><\/code><\/div>\n+                    <\/div>\n+                    <div class=\"col-first even-row-color\"><a href=\"http:\/\/example.com\/3\">example-3<\/a><\/div>\n+                    <div class=\"col-last even-row-color\">\n+                    <div class=\"block\"><code><a href=\"p\/C.html#example-3\">class p.C<\/a><\/code><\/div>\n+                    <\/div>\n+                    <div class=\"col-first odd-row-color\"><a href=\"http:\/\/example.com\/4\">example-4<\/a><\/div>\n+                    <div class=\"col-last odd-row-color\">\n+                    <div class=\"block\"><code><a href=\"p\/C.html#example-4\">class p.C<\/a><\/code><\/div>\n+                    <\/div>\n+                    \"\"\");\n+\n+    }\n+\n+    @Test\n+    public void testCombo(Path base) throws IOException {\n+        for (PlaceKind pk : PlaceKind.values()) {\n+            for (LinkKind lk : LinkKind.values()) {\n+                test(base, pk, lk);\n+            }\n+        }\n+    }\n+\n+    void test(Path base, PlaceKind pk, LinkKind lk) throws IOException {\n+        Path dir = Files.createDirectories(base.resolve(pk.toString()).resolve(lk.toString()));\n+        Path src = genSource(dir, pk, lk);\n+\n+        javadoc(\"-d\", dir.resolve(\"out\").toString(),\n+                \"--spec-base-uri\", \"http:\/\/example.com\/\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        switch (pk) {\n+            case FIRST_SENTENCE, OTHER_INLINE ->\n+                checkOutput(\"p\/C.html\", true,\n+                        \"\"\"\n+                                before <a href=\"http:\/\/example.com\/#LK#\">\\\n+                                <span id=\"#LK#reference\" class=\"search-tag-result\">#LK# \\\n+                                reference<\/span><\/a> after.\"\"\"\n+                        .replaceAll(\"#LK#\", lk.toString().toLowerCase()));\n+\n+            case BLOCK ->\n+                checkOutput(\"p\/C.html\", true,\n+                        \"\"\"\n+                            <dl class=\"notes\">\n+                            <dt>Other Specifications<\/dt>\n+                            <dd><a href=\"http:\/\/example.com\/#LK#\"><span id=\"#LK#reference\" \\\n+                            class=\"search-tag-result\">#LK# reference<\/span><\/a><\/dd>\n+                            <\/dl>\"\"\"\n+                        .replaceAll(\"#LK#\", lk.toString().toLowerCase()));\n+\n+        }\n+\n+        checkOutput(\"other-specs.html\", true,\n+                \"\"\"\n+                        <div class=\"col-first even-row-color\"><a href=\"http:\/\/example.com\/#LK#\">#LK# reference<\/a><\/div>\n+                        <div class=\"col-last even-row-color\">\n+                        <div class=\"block\"><code><a href=\"p\/C.html##LK#reference\">class p.C<\/a><\/code><\/div>\"\"\"\n+                        .replaceAll(\"#LK#\", lk.toString().toLowerCase()));\n+    }\n+\n+    Path genSource(Path base, PlaceKind pk, LinkKind lk) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        String template = switch (pk) {\n+            case FIRST_SENTENCE -> \"\"\"\n+                \/**\n+                 * before {@spec #SPEC#} after.\n+                 *\/\n+                \"\"\";\n+            case OTHER_INLINE -> \"\"\"\n+                \/**\n+                 * First sentence. before {@spec #SPEC#} after.\n+                 *\/\n+                \"\"\";\n+            case BLOCK ->  \"\"\"\n+                \/**\n+                 * First sentence.\n+                 * @spec #SPEC#\n+                 *\/\n+                \"\"\";\n+        };\n+        String spec = switch (lk) {\n+            case ABSOLUTE -> \"http:\/\/example.com\/absolute absolute reference\";\n+            case RELATIVE -> \"relative                    relative reference\";\n+        };\n+        String comment = template.replace(\"#SPEC#\", spec);\n+        tb.writeJavaFiles(src,\n+                \"package p;\\n\" + comment + \"public class C { }\");\n+\n+        return src;\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSpecTag\/TestSpecTag.java","additions":373,"deletions":0,"binary":false,"changes":373,"status":"added"},{"patch":"@@ -23,0 +23,1 @@\n+               @spec: block overview module package type constructor method field inline ........\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testTaglets\/TestTaglets.out","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -105,0 +105,3 @@\n+            case \"SpecTree\" ->\n+                    test(d, type, \"{@spec url label}\");\n+\n","filename":"test\/langtools\/tools\/doclint\/EmptyHtmlTest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2012, 2020 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.dc.no.label\n+\/\/ key: compiler.note.note\n+\/\/ key: compiler.note.proc.messager\n+\/\/ run: backdoor\n+\/\/ options: -processor DocCommentProcessor -proc:only\n+\n+\/** @spec http:\/\/example.com *\/\n+class NoLabel { }\n+\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/NoLabel.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.dc.no.uri\n+\/\/ key: compiler.note.note\n+\/\/ key: compiler.note.proc.messager\n+\/\/ run: backdoor\n+\/\/ options: -processor DocCommentProcessor -proc:only\n+\n+\/** @spec *\/\n+class NoURI { }\n+\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/NoURI.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -590,0 +590,13 @@\n+            @Override\n+            public Void visitSpec(SpecTree node, Void p) {\n+                header(node);\n+                indent(+1);\n+                print(\"inline\", String.valueOf(node.isInline()));\n+                print(\"uri\", node.getURI());\n+                print(\"label\", node.getLabel());\n+                indent(-1);\n+                indent();\n+                out.println(\"]\");\n+                return null;\n+            }\n+\n","filename":"test\/langtools\/tools\/javac\/doctree\/DocCommentTester.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6251738 8226279\n+ * @summary javadoc should support a new at-spec tag\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @build DocCommentTester\n+ * @run main DocCommentTester SpecTest.java\n+ *\/\n+\n+class SpecTest {\n+    \/**\n+     * abc {@spec http:\/\/example.com label} def\n+     *\/\n+    void inline() {}\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 3\n+    Text[TEXT, pos:1, abc_]\n+    Spec[SPEC, pos:5\n+      inline: true\n+      uri:\n+        Text[TEXT, pos:12, http:\/\/example.com]\n+      label: 1\n+        Text[TEXT, pos:31, label]\n+    ]\n+    Text[TEXT, pos:37, _def]\n+  body: empty\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     * abc\n+     * @spec http:\/\/example.com label\n+     *\/\n+    void block() {}\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 1\n+    Text[TEXT, pos:1, abc]\n+  body: empty\n+  block tags: 1\n+    Spec[SPEC, pos:6\n+      inline: false\n+      uri:\n+        Text[TEXT, pos:12, http:\/\/example.com]\n+      label: 1\n+        Text[TEXT, pos:31, label]\n+    ]\n+]\n+*\/\n+\n+    \/**\n+     * abc {@spec}\n+     *\/\n+    void bad_no_uri() {}\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 3\n+    Text[TEXT, pos:1, abc_]\n+    Erroneous[ERRONEOUS, pos:5\n+      code: compiler.err.dc.no.uri\n+      body: {@spec\n+    ]\n+    Text[TEXT, pos:11, }]\n+  body: empty\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     * abc {@spec http:\/\/example.com}\n+     *\/\n+    void bad_no_label() {}\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 2\n+    Text[TEXT, pos:1, abc_]\n+    Erroneous[ERRONEOUS, pos:5\n+      code: compiler.err.dc.no.label\n+      body: {@spec_http:\/\/example.com}\n+    ]\n+  body: empty\n+  block tags: empty\n+]\n+*\/\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/doctree\/SpecTest.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -1145,0 +1145,6 @@\n+        public Void visitSpec(SpecTree node, Void p) {\n+            printDocTree(\"uri\", node.getURI());\n+            printList(\"label\", node.getLabel());\n+            return visitBlockTag(node, null);\n+        }\n+\n","filename":"test\/langtools\/tools\/javac\/lib\/DPrinter.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}