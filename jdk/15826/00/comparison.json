{"files":[{"patch":"@@ -0,0 +1,1 @@\n+JUnit.dirs = .\r\n","filename":"test\/jdk\/tools\/jpackage\/junit\/TEST.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,6 +40,0 @@\n-\/*\n- * @test\n- * @modules jdk.jpackage\n- * @compile --patch-module jdk.jpackage=${test.src} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED AppImageFileTest.java\n- * @run junit\/othervm --patch-module jdk.jpackage=${test.classes} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED jdk.jpackage.internal.AppImageFileTest\n- *\/\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/AppImageFileTest.java","additions":1,"deletions":7,"binary":false,"changes":8,"previous_filename":"test\/jdk\/tools\/jpackage\/junit\/jdk\/jpackage\/internal\/AppImageFileTest.java","status":"renamed"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jpackage.internal;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.junit.Test;\n+import org.junit.Rule;\n+import org.junit.rules.TemporaryFolder;\n+import static org.junit.Assert.assertTrue;\n+\n+\n+public class ApplicationLayoutTest {\n+\n+    @Rule\n+    public final TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private void fillLinuxAppImage() throws IOException {\n+        appImage = tempFolder.newFolder(\"Foo\").toPath();\n+\n+        Path base = appImage.getFileName();\n+\n+        tempFolder.newFolder(base.toString(), \"bin\");\n+        tempFolder.newFolder(base.toString(), \"lib\", \"app\", \"mods\");\n+        tempFolder.newFolder(base.toString(), \"lib\", \"runtime\", \"bin\");\n+        tempFolder.newFile(base.resolve(\"bin\/Foo\").toString());\n+        tempFolder.newFile(base.resolve(\"lib\/app\/Foo.cfg\").toString());\n+        tempFolder.newFile(base.resolve(\"lib\/app\/hello.jar\").toString());\n+        tempFolder.newFile(base.resolve(\"lib\/Foo.png\").toString());\n+        tempFolder.newFile(base.resolve(\"lib\/libapplauncher.so\").toString());\n+        tempFolder.newFile(base.resolve(\"lib\/runtime\/bin\/java\").toString());\n+    }\n+\n+    @Test\n+    public void testLinux() throws IOException {\n+        fillLinuxAppImage();\n+        testApplicationLayout(ApplicationLayout.linuxAppImage());\n+    }\n+\n+    private void testApplicationLayout(ApplicationLayout layout) throws IOException {\n+        ApplicationLayout srcLayout = layout.resolveAt(appImage);\n+        assertApplicationLayout(srcLayout);\n+\n+        ApplicationLayout dstLayout = layout.resolveAt(\n+                appImage.getParent().resolve(\n+                        \"Copy\" + appImage.getFileName().toString()));\n+        srcLayout.move(dstLayout);\n+        Files.deleteIfExists(appImage);\n+        assertApplicationLayout(dstLayout);\n+\n+        dstLayout.copy(srcLayout);\n+        assertApplicationLayout(srcLayout);\n+        assertApplicationLayout(dstLayout);\n+    }\n+\n+    private void assertApplicationLayout(ApplicationLayout layout) throws IOException {\n+        assertTrue(Files.isRegularFile(layout.appDirectory().resolve(\"Foo.cfg\")));\n+        assertTrue(Files.isRegularFile(layout.appDirectory().resolve(\"hello.jar\")));\n+        assertTrue(Files.isDirectory(layout.appModsDirectory()));\n+        assertTrue(Files.isRegularFile(layout.launchersDirectory().resolve(\"Foo\")));\n+        assertTrue(Files.isRegularFile(layout.destktopIntegrationDirectory().resolve(\"Foo.png\")));\n+        assertTrue(Files.isRegularFile(layout.runtimeDirectory().resolve(\"bin\/java\")));\n+    }\n+\n+    private Path appImage;\n+}\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/ApplicationLayoutTest.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(Parameterized.class)\n+public class CompareDottedVersionTest {\n+\n+    public CompareDottedVersionTest(boolean greedy, String version1,\n+            String version2, int result) {\n+        this.version1 = version1;\n+        this.version2 = version2;\n+        this.expectedResult = result;\n+\n+        if (greedy) {\n+            createTestee = DottedVersion::greedy;\n+        } else {\n+            createTestee = DottedVersion::lazy;\n+        }\n+    }\n+\n+    @Parameters\n+    public static List<Object[]> data() {\n+        List<Object[]> data = new ArrayList<>();\n+        for (var greedy : List.of(true, false)) {\n+            data.addAll(List.of(new Object[][] {\n+                { greedy, \"00.0.0\", \"0\", 0 },\n+                { greedy, \"00.0.0\", \"0.000\", 0 },\n+                { greedy, \"0.035\", \"0.0035\", 0 },\n+                { greedy, \"0.035\", \"0.0035.0\", 0 },\n+                { greedy, \"1\", \"1\", 0 },\n+                { greedy, \"2\", \"2.0\", 0 },\n+                { greedy, \"2.00\", \"2.0\", 0 },\n+                { greedy, \"1.2.3.4\", \"1.2.3.4.5\", -1 },\n+                { greedy, \"1.2.3.4\", \"1.2.3.4.0.1\", -1 },\n+                { greedy, \"34\", \"33\", 1 },\n+                { greedy, \"34.0.78\", \"34.1.78\", -1 }\n+            }));\n+        }\n+\n+        data.addAll(List.of(new Object[][] {\n+            { false, \"\", \"1\", -1 },\n+            { false, \"1.2.4-R4\", \"1.2.4-R5\", 0 },\n+            { false, \"1.2.4.-R4\", \"1.2.4.R5\", 0 },\n+            { false, \"7+1\", \"7+4\", 0 },\n+            { false, \"2+14\", \"2-14\", 0 },\n+            { false, \"23.4.RC4\", \"23.3.RC10\", 1 },\n+            { false, \"77.\"  + \"9\".repeat(1000), \"77.\" + \"9\".repeat(1000 -1) + \"8\", 1 },\n+        }));\n+\n+        return data;\n+    }\n+\n+    @Test\n+    public void testIt() {\n+        int actualResult = compare(version1, version2);\n+        assertEquals(expectedResult, actualResult);\n+\n+        int actualNegateResult = compare(version2, version1);\n+        assertEquals(actualResult, -1 * actualNegateResult);\n+    }\n+\n+    private int compare(String x, String y) {\n+        int result = createTestee.apply(x).compareTo(y);\n+\n+        if (result < 0) {\n+            return -1;\n+        }\n+\n+        if (result > 0) {\n+            return 1;\n+        }\n+\n+        return 0;\n+    }\n+\n+    private final String version1;\n+    private final String version2;\n+    private final int expectedResult;\n+    private final Function<String, DottedVersion> createTestee;\n+}\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/CompareDottedVersionTest.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal;\n+\n+import java.nio.file.Path;\n+import java.io.IOException;\n+import org.hamcrest.BaseMatcher;\n+import org.hamcrest.Description;\n+import org.junit.Rule;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class DeployParamsTest {\n+\n+    @Rule\n+    public final TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    @Rule\n+    public final ExpectedException thrown = ExpectedException.none();\n+\n+    @Before\n+    public void setUp() throws IOException {\n+        testRoot = tempFolder.newFolder().toPath();\n+    }\n+\n+    @Test\n+    public void testValidAppName() throws PackagerException {\n+        initParamsAppName();\n+\n+        setAppNameAndValidate(\"Test\");\n+\n+        setAppNameAndValidate(\"Test Name\");\n+\n+        setAppNameAndValidate(\"Test - Name !!!\");\n+    }\n+\n+    @Test\n+    public void testInvalidAppName() throws PackagerException {\n+        initForInvalidAppNamePackagerException();\n+        initParamsAppName();\n+        setAppNameAndValidate(\"Test\\nName\");\n+    }\n+\n+    @Test\n+    public void testInvalidAppName2() throws PackagerException {\n+        initForInvalidAppNamePackagerException();\n+        initParamsAppName();\n+        setAppNameAndValidate(\"Test\\rName\");\n+    }\n+\n+    @Test\n+    public void testInvalidAppName3() throws PackagerException {\n+        initForInvalidAppNamePackagerException();\n+        initParamsAppName();\n+        setAppNameAndValidate(\"TestName\\\\\");\n+    }\n+\n+    @Test\n+    public void testInvalidAppName4() throws PackagerException {\n+        initForInvalidAppNamePackagerException();\n+        initParamsAppName();\n+        setAppNameAndValidate(\"Test \\\" Name\");\n+    }\n+\n+    private void initForInvalidAppNamePackagerException() {\n+        thrown.expect(PackagerException.class);\n+\n+        String msg = \"Error: Invalid Application name\";\n+\n+        \/\/ Unfortunately org.hamcrest.core.StringStartsWith is not available\n+        \/\/ with older junit, DIY\n+\n+        \/\/ thrown.expectMessage(startsWith(\"Error: Invalid Application name\"));\n+        thrown.expectMessage(new BaseMatcher() {\n+            @Override\n+            @SuppressWarnings(\"unchecked\")\n+            public boolean matches(Object o) {\n+                if (o instanceof String) {\n+                    return ((String) o).startsWith(msg);\n+                }\n+                return false;\n+            }\n+\n+            @Override\n+            public void describeTo(Description d) {\n+                d.appendText(msg);\n+            }\n+        });\n+    }\n+\n+    \/\/ Returns deploy params initialized to pass all validation, except for\n+    \/\/ app name\n+    private void initParamsAppName() {\n+        params = new DeployParams();\n+\n+        params.setOutput(testRoot);\n+        params.addBundleArgument(Arguments.CLIOptions.APPCLASS.getId(),\n+                \"TestClass\");\n+        params.addBundleArgument(Arguments.CLIOptions.MAIN_JAR.getId(),\n+                \"test.jar\");\n+        params.addBundleArgument(Arguments.CLIOptions.INPUT.getId(), \"input\");\n+    }\n+\n+    private void setAppNameAndValidate(String appName) throws PackagerException {\n+        params.addBundleArgument(Arguments.CLIOptions.NAME.getId(), appName);\n+        params.validate();\n+    }\n+\n+    private Path testRoot = null;\n+    private DeployParams params;\n+}\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/DeployParamsTest.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)\n+public class DottedVersionTest {\n+\n+    public DottedVersionTest(boolean greedy) {\n+        this.greedy = greedy;\n+        if (greedy) {\n+            createTestee = DottedVersion::greedy;\n+        } else {\n+            createTestee = DottedVersion::lazy;\n+        }\n+    }\n+\n+    @Parameterized.Parameters\n+    public static List<Object[]> data() {\n+        return List.of(new Object[] { true }, new Object[] { false });\n+    }\n+\n+    @Rule\n+    public ExpectedException exceptionRule = ExpectedException.none();\n+\n+    @Test\n+    public void testValid() {\n+        final List<String> validStrings = List.of(\n+            \"1.0\",\n+            \"1\",\n+            \"2.234.045\",\n+            \"2.234.0\",\n+            \"0\",\n+            \"0.1\",\n+            \"9\".repeat(1000)\n+        );\n+\n+        final List<String> validLazyStrings;\n+        if (greedy) {\n+            validLazyStrings = Collections.emptyList();\n+        } else {\n+            validLazyStrings = List.of(\n+                \"1.-1\",\n+                \"5.\",\n+                \"4.2.\",\n+                \"3..2\",\n+                \"2.a\",\n+                \"0a\",\n+                \".\",\n+                \" \",\n+                \" 1\",\n+                \"1. 2\",\n+                \"+1\",\n+                \"-1\",\n+                \"-0\",\n+                \"+0\"\n+            );\n+        }\n+\n+        Stream.concat(validStrings.stream(), validLazyStrings.stream())\n+        .forEach(value -> {\n+            DottedVersion version = createTestee.apply(value);\n+            assertEquals(version.toString(), value);\n+        });\n+    }\n+\n+    @Test\n+    public void testNull() {\n+        exceptionRule.expect(NullPointerException.class);\n+        createTestee.apply(null);\n+    }\n+\n+    @Test\n+    public void testEmpty() {\n+        if (greedy) {\n+            exceptionRule.expect(IllegalArgumentException.class);\n+            exceptionRule.expectMessage(\"Version may not be empty string\");\n+            createTestee.apply(\"\");\n+        } else {\n+            assertTrue(0 == createTestee.apply(\"\").compareTo(\"\"));\n+            assertTrue(0 == createTestee.apply(\"\").compareTo(\"0\"));\n+        }\n+    }\n+\n+    private final boolean greedy;\n+    private final Function<String, DottedVersion> createTestee;\n+}\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/DottedVersionTest.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jpackage.internal;\n+\n+import static org.junit.Assert.assertEquals;\n+import org.junit.Test;\n+\n+public class EnquoterTest {\n+\n+    @Test\n+    public void testForShellLiterals() {\n+        var enquoter = Enquoter.forShellLiterals();\n+\n+        assertEquals(null, \"''\", enquoter.applyTo(\"\"));\n+        assertEquals(null, \"'foo'\", enquoter.applyTo(\"foo\"));\n+        assertEquals(null, \"' foo '\", enquoter.applyTo(\" foo \"));\n+        assertEquals(null, \"'foo bar'\", enquoter.applyTo(\"foo bar\"));\n+        assertEquals(null, \"'foo\\\\' bar'\", enquoter.applyTo(\"foo' bar\"));\n+    }\n+\n+    @Test\n+    public void testForPropertyValues() {\n+        var enquoter = Enquoter.forPropertyValues();\n+\n+        assertEquals(null, \"\", enquoter.applyTo(\"\"));\n+        assertEquals(null, \"foo\", enquoter.applyTo(\"foo\"));\n+        assertEquals(null, \"\\\" foo \\\"\", enquoter.applyTo(\" foo \"));\n+        assertEquals(null, \"\\\"foo bar\\\"\", enquoter.applyTo(\"foo bar\"));\n+        assertEquals(null, \"\\\"foo' bar\\\"\", enquoter.applyTo(\"foo' bar\"));\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/EnquoterTest.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class InvalidDottedVersionTest {\n+\n+    public InvalidDottedVersionTest(String version) {\n+        this.version = version;\n+    }\n+\n+    @Parameters\n+    public static List<Object[]> data() {\n+        return Stream.of(\n+            \"1.-1\",\n+            \"5.\",\n+            \"4.2.\",\n+            \"3..2\",\n+            \"2.a\",\n+            \"0a\",\n+            \".\",\n+            \" \",\n+            \" 1\",\n+            \"1. 2\",\n+            \"+1\",\n+            \"-1\",\n+            \"-0\",\n+            \"+0\"\n+        ).map(version -> new Object[] { version }).collect(Collectors.toList());\n+    }\n+\n+    @Rule\n+    public ExpectedException exceptionRule = ExpectedException.none();\n+\n+    @Test\n+    public void testIt() {\n+        exceptionRule.expect(IllegalArgumentException.class);\n+        new DottedVersion(version);\n+    }\n+\n+    private final String version;\n+}\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/InvalidDottedVersionTest.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -49,6 +49,0 @@\n-\/*\n- * @test\n- * @modules jdk.jpackage\n- * @compile --patch-module jdk.jpackage=${test.src} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED OverridableResourceTest.java\n- * @run junit\/othervm --patch-module jdk.jpackage=${test.classes} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED jdk.jpackage.internal.OverridableResourceTest\n- *\/\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/OverridableResourceTest.java","additions":0,"deletions":6,"binary":false,"changes":6,"previous_filename":"test\/jdk\/tools\/jpackage\/junit\/jdk\/jpackage\/internal\/OverridableResourceTest.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,6 +50,0 @@\n-\/*\n- * @test\n- * @modules jdk.jpackage\n- * @compile --patch-module jdk.jpackage=${test.src} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED PathGroupTest.java\n- * @run junit\/othervm --patch-module jdk.jpackage=${test.classes} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED jdk.jpackage.internal.PathGroupTest\n- *\/\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/PathGroupTest.java","additions":1,"deletions":7,"binary":false,"changes":8,"previous_filename":"test\/jdk\/tools\/jpackage\/junit\/jdk\/jpackage\/internal\/PathGroupTest.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,6 +40,0 @@\n-\/*\n- * @test\n- * @modules jdk.jpackage\n- * @compile --patch-module jdk.jpackage=${test.src} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED PlatformVersionTest.java\n- * @run junit\/othervm --patch-module jdk.jpackage=${test.classes} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED jdk.jpackage.internal.PlatformVersionTest\n- *\/\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/PlatformVersionTest.java","additions":1,"deletions":7,"binary":false,"changes":8,"previous_filename":"test\/jdk\/tools\/jpackage\/junit\/jdk\/jpackage\/internal\/PlatformVersionTest.java","status":"renamed"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jpackage.internal;\n+\n+import java.nio.file.Path;\n+import jdk.internal.util.OperatingSystem;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import org.junit.Test;\n+\n+\n+public class ToolValidatorTest {\n+\n+    @Test\n+    public void testAvailable() {\n+        assertNull(new ToolValidator(TOOL_JAVA).validate());\n+    }\n+\n+    @Test\n+    public void testNotAvailable() {\n+        assertValidationFailure(new ToolValidator(TOOL_UNKNOWN).validate(), true);\n+    }\n+\n+    @Test\n+    public void testVersionParserUsage() {\n+        \/\/ Without minimal version configured, version parser should not be used\n+        new ToolValidator(TOOL_JAVA).setVersionParser(unused -> {\n+            throw new RuntimeException();\n+        }).validate();\n+\n+        \/\/ Minimal version is 1, actual is 10. Should be OK.\n+        assertNull(new ToolValidator(TOOL_JAVA).setMinimalVersion(\n+                new DottedVersion(\"1\")).setVersionParser(unused -> \"10\").validate());\n+\n+        \/\/ Minimal version is 5, actual is 4.99.37. Error expected.\n+        assertValidationFailure(new ToolValidator(TOOL_JAVA).setMinimalVersion(\n+                new DottedVersion(\"5\")).setVersionParser(unused -> \"4.99.37\").validate(),\n+                false);\n+\n+        \/\/ Minimal version is 8, actual is 10, lexicographical comparison is used. Error expected.\n+        assertValidationFailure(new ToolValidator(TOOL_JAVA).setMinimalVersion(\n+                \"8\").setVersionParser(unused -> \"10\").validate(), false);\n+\n+        \/\/ Minimal version is 8, actual is 10, Use DottedVersion class for comparison. Should be OK.\n+        assertNull(new ToolValidator(TOOL_JAVA).setMinimalVersion(\n+                new DottedVersion(\"8\")).setVersionParser(unused -> \"10\").validate());\n+    }\n+\n+    private static void assertValidationFailure(ConfigException v,\n+            boolean withCause) {\n+        assertNotNull(v);\n+        assertThat(\"\", is(not(v.getMessage().strip())));\n+        assertThat(\"\", is(not(v.advice.strip())));\n+        if (withCause) {\n+            assertNotNull(v.getCause());\n+        } else {\n+            assertNull(v.getCause());\n+        }\n+    }\n+\n+    private final static String TOOL_JAVA;\n+    private final static String TOOL_UNKNOWN = Path.of(System.getProperty(\n+            \"java.home\"), \"bin\").toString();\n+\n+    static {\n+        String fname = \"java\";\n+        if (OperatingSystem.isWindows()) {\n+            fname = fname + \".exe\";\n+        }\n+        TOOL_JAVA = Path.of(System.getProperty(\"java.home\"), \"bin\", fname).toString();\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/ToolValidatorTest.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -1,94 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jpackage.internal;\n-\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import org.junit.Test;\n-import org.junit.Rule;\n-import org.junit.rules.TemporaryFolder;\n-import static org.junit.Assert.assertTrue;\n-\n-\n-\/*\n- * @test\n- * @modules jdk.jpackage\n- * @compile --patch-module jdk.jpackage=${test.src} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED ApplicationLayoutTest.java\n- * @run junit\/othervm --patch-module jdk.jpackage=${test.classes} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED jdk.jpackage.internal.ApplicationLayoutTest\n- *\/\n-public class ApplicationLayoutTest {\n-\n-    @Rule\n-    public final TemporaryFolder tempFolder = new TemporaryFolder();\n-\n-    private void fillLinuxAppImage() throws IOException {\n-        appImage = tempFolder.newFolder(\"Foo\").toPath();\n-\n-        Path base = appImage.getFileName();\n-\n-        tempFolder.newFolder(base.toString(), \"bin\");\n-        tempFolder.newFolder(base.toString(), \"lib\", \"app\", \"mods\");\n-        tempFolder.newFolder(base.toString(), \"lib\", \"runtime\", \"bin\");\n-        tempFolder.newFile(base.resolve(\"bin\/Foo\").toString());\n-        tempFolder.newFile(base.resolve(\"lib\/app\/Foo.cfg\").toString());\n-        tempFolder.newFile(base.resolve(\"lib\/app\/hello.jar\").toString());\n-        tempFolder.newFile(base.resolve(\"lib\/Foo.png\").toString());\n-        tempFolder.newFile(base.resolve(\"lib\/libapplauncher.so\").toString());\n-        tempFolder.newFile(base.resolve(\"lib\/runtime\/bin\/java\").toString());\n-    }\n-\n-    @Test\n-    public void testLinux() throws IOException {\n-        fillLinuxAppImage();\n-        testApplicationLayout(ApplicationLayout.linuxAppImage());\n-    }\n-\n-    private void testApplicationLayout(ApplicationLayout layout) throws IOException {\n-        ApplicationLayout srcLayout = layout.resolveAt(appImage);\n-        assertApplicationLayout(srcLayout);\n-\n-        ApplicationLayout dstLayout = layout.resolveAt(\n-                appImage.getParent().resolve(\n-                        \"Copy\" + appImage.getFileName().toString()));\n-        srcLayout.move(dstLayout);\n-        Files.deleteIfExists(appImage);\n-        assertApplicationLayout(dstLayout);\n-\n-        dstLayout.copy(srcLayout);\n-        assertApplicationLayout(srcLayout);\n-        assertApplicationLayout(dstLayout);\n-    }\n-\n-    private void assertApplicationLayout(ApplicationLayout layout) throws IOException {\n-        assertTrue(Files.isRegularFile(layout.appDirectory().resolve(\"Foo.cfg\")));\n-        assertTrue(Files.isRegularFile(layout.appDirectory().resolve(\"hello.jar\")));\n-        assertTrue(Files.isDirectory(layout.appModsDirectory()));\n-        assertTrue(Files.isRegularFile(layout.launchersDirectory().resolve(\"Foo\")));\n-        assertTrue(Files.isRegularFile(layout.destktopIntegrationDirectory().resolve(\"Foo.png\")));\n-        assertTrue(Files.isRegularFile(layout.runtimeDirectory().resolve(\"bin\/java\")));\n-    }\n-\n-    private Path appImage;\n-}\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk\/jpackage\/internal\/ApplicationLayoutTest.java","additions":0,"deletions":94,"binary":false,"changes":94,"status":"deleted"},{"patch":"@@ -1,115 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.jpackage.internal;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.function.Function;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-import static org.junit.Assert.assertEquals;\n-\n-\/*\n- * @test\n- * @modules jdk.jpackage\n- * @compile --patch-module jdk.jpackage=${test.src} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED CompareDottedVersionTest.java\n- * @run junit\/othervm --patch-module jdk.jpackage=${test.classes} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED jdk.jpackage.internal.CompareDottedVersionTest\n- *\/\n-@RunWith(Parameterized.class)\n-public class CompareDottedVersionTest {\n-\n-    public CompareDottedVersionTest(boolean greedy, String version1,\n-            String version2, int result) {\n-        this.version1 = version1;\n-        this.version2 = version2;\n-        this.expectedResult = result;\n-\n-        if (greedy) {\n-            createTestee = DottedVersion::greedy;\n-        } else {\n-            createTestee = DottedVersion::lazy;\n-        }\n-    }\n-\n-    @Parameters\n-    public static List<Object[]> data() {\n-        List<Object[]> data = new ArrayList<>();\n-        for (var greedy : List.of(true, false)) {\n-            data.addAll(List.of(new Object[][] {\n-                { greedy, \"00.0.0\", \"0\", 0 },\n-                { greedy, \"00.0.0\", \"0.000\", 0 },\n-                { greedy, \"0.035\", \"0.0035\", 0 },\n-                { greedy, \"0.035\", \"0.0035.0\", 0 },\n-                { greedy, \"1\", \"1\", 0 },\n-                { greedy, \"2\", \"2.0\", 0 },\n-                { greedy, \"2.00\", \"2.0\", 0 },\n-                { greedy, \"1.2.3.4\", \"1.2.3.4.5\", -1 },\n-                { greedy, \"1.2.3.4\", \"1.2.3.4.0.1\", -1 },\n-                { greedy, \"34\", \"33\", 1 },\n-                { greedy, \"34.0.78\", \"34.1.78\", -1 }\n-            }));\n-        }\n-\n-        data.addAll(List.of(new Object[][] {\n-            { false, \"\", \"1\", -1 },\n-            { false, \"1.2.4-R4\", \"1.2.4-R5\", 0 },\n-            { false, \"1.2.4.-R4\", \"1.2.4.R5\", 0 },\n-            { false, \"7+1\", \"7+4\", 0 },\n-            { false, \"2+14\", \"2-14\", 0 },\n-            { false, \"23.4.RC4\", \"23.3.RC10\", 1 },\n-            { false, \"77.\"  + \"9\".repeat(1000), \"77.\" + \"9\".repeat(1000 -1) + \"8\", 1 },\n-        }));\n-\n-        return data;\n-    }\n-\n-    @Test\n-    public void testIt() {\n-        int actualResult = compare(version1, version2);\n-        assertEquals(expectedResult, actualResult);\n-\n-        int actualNegateResult = compare(version2, version1);\n-        assertEquals(actualResult, -1 * actualNegateResult);\n-    }\n-\n-    private int compare(String x, String y) {\n-        int result = createTestee.apply(x).compareTo(y);\n-\n-        if (result < 0) {\n-            return -1;\n-        }\n-\n-        if (result > 0) {\n-            return 1;\n-        }\n-\n-        return 0;\n-    }\n-\n-    private final String version1;\n-    private final String version2;\n-    private final int expectedResult;\n-    private final Function<String, DottedVersion> createTestee;\n-}\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk\/jpackage\/internal\/CompareDottedVersionTest.java","additions":0,"deletions":115,"binary":false,"changes":115,"status":"deleted"},{"patch":"@@ -1,140 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.jpackage.internal;\n-\n-import java.nio.file.Path;\n-import java.io.IOException;\n-import org.hamcrest.BaseMatcher;\n-import org.hamcrest.Description;\n-import org.junit.Rule;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-import org.junit.rules.TemporaryFolder;\n-\n-\/*\n- * @test\n- * @summary Test for JDK-8211285\n- * @modules jdk.jpackage\n- * @compile --patch-module jdk.jpackage=${test.src} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED DeployParamsTest.java\n- * @run junit\/othervm --patch-module jdk.jpackage=${test.classes} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED jdk.jpackage.internal.DeployParamsTest\n- *\/\n-public class DeployParamsTest {\n-\n-    @Rule\n-    public final TemporaryFolder tempFolder = new TemporaryFolder();\n-\n-    @Rule\n-    public final ExpectedException thrown = ExpectedException.none();\n-\n-    @Before\n-    public void setUp() throws IOException {\n-        testRoot = tempFolder.newFolder().toPath();\n-    }\n-\n-    @Test\n-    public void testValidAppName() throws PackagerException {\n-        initParamsAppName();\n-\n-        setAppNameAndValidate(\"Test\");\n-\n-        setAppNameAndValidate(\"Test Name\");\n-\n-        setAppNameAndValidate(\"Test - Name !!!\");\n-    }\n-\n-    @Test\n-    public void testInvalidAppName() throws PackagerException {\n-        initForInvalidAppNamePackagerException();\n-        initParamsAppName();\n-        setAppNameAndValidate(\"Test\\nName\");\n-    }\n-\n-    @Test\n-    public void testInvalidAppName2() throws PackagerException {\n-        initForInvalidAppNamePackagerException();\n-        initParamsAppName();\n-        setAppNameAndValidate(\"Test\\rName\");\n-    }\n-\n-    @Test\n-    public void testInvalidAppName3() throws PackagerException {\n-        initForInvalidAppNamePackagerException();\n-        initParamsAppName();\n-        setAppNameAndValidate(\"TestName\\\\\");\n-    }\n-\n-    @Test\n-    public void testInvalidAppName4() throws PackagerException {\n-        initForInvalidAppNamePackagerException();\n-        initParamsAppName();\n-        setAppNameAndValidate(\"Test \\\" Name\");\n-    }\n-\n-    private void initForInvalidAppNamePackagerException() {\n-        thrown.expect(PackagerException.class);\n-\n-        String msg = \"Error: Invalid Application name\";\n-\n-        \/\/ Unfortunately org.hamcrest.core.StringStartsWith is not available\n-        \/\/ with older junit, DIY\n-\n-        \/\/ thrown.expectMessage(startsWith(\"Error: Invalid Application name\"));\n-        thrown.expectMessage(new BaseMatcher() {\n-            @Override\n-            @SuppressWarnings(\"unchecked\")\n-            public boolean matches(Object o) {\n-                if (o instanceof String) {\n-                    return ((String) o).startsWith(msg);\n-                }\n-                return false;\n-            }\n-\n-            @Override\n-            public void describeTo(Description d) {\n-                d.appendText(msg);\n-            }\n-        });\n-    }\n-\n-    \/\/ Returns deploy params initialized to pass all validation, except for\n-    \/\/ app name\n-    private void initParamsAppName() {\n-        params = new DeployParams();\n-\n-        params.setOutput(testRoot);\n-        params.addBundleArgument(Arguments.CLIOptions.APPCLASS.getId(),\n-                \"TestClass\");\n-        params.addBundleArgument(Arguments.CLIOptions.MAIN_JAR.getId(),\n-                \"test.jar\");\n-        params.addBundleArgument(Arguments.CLIOptions.INPUT.getId(), \"input\");\n-    }\n-\n-    private void setAppNameAndValidate(String appName) throws PackagerException {\n-        params.addBundleArgument(Arguments.CLIOptions.NAME.getId(), appName);\n-        params.validate();\n-    }\n-\n-    private Path testRoot = null;\n-    private DeployParams params;\n-}\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk\/jpackage\/internal\/DeployParamsTest.java","additions":0,"deletions":140,"binary":false,"changes":140,"status":"deleted"},{"patch":"@@ -1,124 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.jpackage.internal;\n-\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.function.Function;\n-import java.util.stream.Stream;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-\/*\n- * @test\n- * @modules jdk.jpackage\n- * @compile --patch-module jdk.jpackage=${test.src} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED DottedVersionTest.java\n- * @run junit\/othervm --patch-module jdk.jpackage=${test.classes} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED jdk.jpackage.internal.DottedVersionTest\n- *\/\n-@RunWith(Parameterized.class)\n-public class DottedVersionTest {\n-\n-    public DottedVersionTest(boolean greedy) {\n-        this.greedy = greedy;\n-        if (greedy) {\n-            createTestee = DottedVersion::greedy;\n-        } else {\n-            createTestee = DottedVersion::lazy;\n-        }\n-    }\n-\n-    @Parameterized.Parameters\n-    public static List<Object[]> data() {\n-        return List.of(new Object[] { true }, new Object[] { false });\n-    }\n-\n-    @Rule\n-    public ExpectedException exceptionRule = ExpectedException.none();\n-\n-    @Test\n-    public void testValid() {\n-        final List<String> validStrings = List.of(\n-            \"1.0\",\n-            \"1\",\n-            \"2.234.045\",\n-            \"2.234.0\",\n-            \"0\",\n-            \"0.1\",\n-            \"9\".repeat(1000)\n-        );\n-\n-        final List<String> validLazyStrings;\n-        if (greedy) {\n-            validLazyStrings = Collections.emptyList();\n-        } else {\n-            validLazyStrings = List.of(\n-                \"1.-1\",\n-                \"5.\",\n-                \"4.2.\",\n-                \"3..2\",\n-                \"2.a\",\n-                \"0a\",\n-                \".\",\n-                \" \",\n-                \" 1\",\n-                \"1. 2\",\n-                \"+1\",\n-                \"-1\",\n-                \"-0\",\n-                \"+0\"\n-            );\n-        }\n-\n-        Stream.concat(validStrings.stream(), validLazyStrings.stream())\n-        .forEach(value -> {\n-            DottedVersion version = createTestee.apply(value);\n-            assertEquals(version.toString(), value);\n-        });\n-    }\n-\n-    @Test\n-    public void testNull() {\n-        exceptionRule.expect(NullPointerException.class);\n-        createTestee.apply(null);\n-    }\n-\n-    @Test\n-    public void testEmpty() {\n-        if (greedy) {\n-            exceptionRule.expect(IllegalArgumentException.class);\n-            exceptionRule.expectMessage(\"Version may not be empty string\");\n-            createTestee.apply(\"\");\n-        } else {\n-            assertTrue(0 == createTestee.apply(\"\").compareTo(\"\"));\n-            assertTrue(0 == createTestee.apply(\"\").compareTo(\"0\"));\n-        }\n-    }\n-\n-    private final boolean greedy;\n-    private final Function<String, DottedVersion> createTestee;\n-}\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk\/jpackage\/internal\/DottedVersionTest.java","additions":0,"deletions":124,"binary":false,"changes":124,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jpackage.internal;\n-\n-import static org.junit.Assert.assertEquals;\n-import org.junit.Test;\n-\n-\/*\n- * @test\n- * @modules jdk.jpackage\n- * @compile --patch-module jdk.jpackage=${test.src} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED EnquoterTest.java\n- * @run junit\/othervm --patch-module jdk.jpackage=${test.classes} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED jdk.jpackage.internal.EnquoterTest\n- *\/\n-public class EnquoterTest {\n-\n-    @Test\n-    public void testForShellLiterals() {\n-        var enquoter = Enquoter.forShellLiterals();\n-\n-        assertEquals(null, \"''\", enquoter.applyTo(\"\"));\n-        assertEquals(null, \"'foo'\", enquoter.applyTo(\"foo\"));\n-        assertEquals(null, \"' foo '\", enquoter.applyTo(\" foo \"));\n-        assertEquals(null, \"'foo bar'\", enquoter.applyTo(\"foo bar\"));\n-        assertEquals(null, \"'foo\\\\' bar'\", enquoter.applyTo(\"foo' bar\"));\n-    }\n-\n-    @Test\n-    public void testForPropertyValues() {\n-        var enquoter = Enquoter.forPropertyValues();\n-\n-        assertEquals(null, \"\", enquoter.applyTo(\"\"));\n-        assertEquals(null, \"foo\", enquoter.applyTo(\"foo\"));\n-        assertEquals(null, \"\\\" foo \\\"\", enquoter.applyTo(\" foo \"));\n-        assertEquals(null, \"\\\"foo bar\\\"\", enquoter.applyTo(\"foo bar\"));\n-        assertEquals(null, \"\\\"foo' bar\\\"\", enquoter.applyTo(\"foo' bar\"));\n-    }\n-}\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk\/jpackage\/internal\/EnquoterTest.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,78 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.jpackage.internal;\n-\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-\/*\n- * @test\n- * @modules jdk.jpackage\n- * @compile --patch-module jdk.jpackage=${test.src} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED InvalidDottedVersionTest.java\n- * @run junit\/othervm --patch-module jdk.jpackage=${test.classes} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED jdk.jpackage.internal.InvalidDottedVersionTest\n- *\/\n-@RunWith(Parameterized.class)\n-public class InvalidDottedVersionTest {\n-\n-    public InvalidDottedVersionTest(String version) {\n-        this.version = version;\n-    }\n-\n-    @Parameters\n-    public static List<Object[]> data() {\n-        return Stream.of(\n-            \"1.-1\",\n-            \"5.\",\n-            \"4.2.\",\n-            \"3..2\",\n-            \"2.a\",\n-            \"0a\",\n-            \".\",\n-            \" \",\n-            \" 1\",\n-            \"1. 2\",\n-            \"+1\",\n-            \"-1\",\n-            \"-0\",\n-            \"+0\"\n-        ).map(version -> new Object[] { version }).collect(Collectors.toList());\n-    }\n-\n-    @Rule\n-    public ExpectedException exceptionRule = ExpectedException.none();\n-\n-    @Test\n-    public void testIt() {\n-        exceptionRule.expect(IllegalArgumentException.class);\n-        new DottedVersion(version);\n-    }\n-\n-    private final String version;\n-}\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk\/jpackage\/internal\/InvalidDottedVersionTest.java","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -1,102 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jpackage.internal;\n-\n-import java.nio.file.Path;\n-import jdk.internal.util.OperatingSystem;\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.hamcrest.CoreMatchers.not;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertThat;\n-import org.junit.Test;\n-\n-\n-\/*\n- * @test\n- * @modules jdk.jpackage\n- * @compile --patch-module jdk.jpackage=${test.src} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED ToolValidatorTest.java\n- * @run junit\/othervm --patch-module jdk.jpackage=${test.classes} --add-reads jdk.jpackage=ALL-UNNAMED --add-exports jdk.jpackage\/jdk.jpackage.internal=ALL-UNNAMED jdk.jpackage.internal.ToolValidatorTest\n- *\/\n-public class ToolValidatorTest {\n-\n-    @Test\n-    public void testAvailable() {\n-        assertNull(new ToolValidator(TOOL_JAVA).validate());\n-    }\n-\n-    @Test\n-    public void testNotAvailable() {\n-        assertValidationFailure(new ToolValidator(TOOL_UNKNOWN).validate(), true);\n-    }\n-\n-    @Test\n-    public void testVersionParserUsage() {\n-        \/\/ Without minimal version configured, version parser should not be used\n-        new ToolValidator(TOOL_JAVA).setVersionParser(unused -> {\n-            throw new RuntimeException();\n-        }).validate();\n-\n-        \/\/ Minimal version is 1, actual is 10. Should be OK.\n-        assertNull(new ToolValidator(TOOL_JAVA).setMinimalVersion(\n-                new DottedVersion(\"1\")).setVersionParser(unused -> \"10\").validate());\n-\n-        \/\/ Minimal version is 5, actual is 4.99.37. Error expected.\n-        assertValidationFailure(new ToolValidator(TOOL_JAVA).setMinimalVersion(\n-                new DottedVersion(\"5\")).setVersionParser(unused -> \"4.99.37\").validate(),\n-                false);\n-\n-        \/\/ Minimal version is 8, actual is 10, lexicographical comparison is used. Error expected.\n-        assertValidationFailure(new ToolValidator(TOOL_JAVA).setMinimalVersion(\n-                \"8\").setVersionParser(unused -> \"10\").validate(), false);\n-\n-        \/\/ Minimal version is 8, actual is 10, Use DottedVersion class for comparison. Should be OK.\n-        assertNull(new ToolValidator(TOOL_JAVA).setMinimalVersion(\n-                new DottedVersion(\"8\")).setVersionParser(unused -> \"10\").validate());\n-    }\n-\n-    private static void assertValidationFailure(ConfigException v,\n-            boolean withCause) {\n-        assertNotNull(v);\n-        assertThat(\"\", is(not(v.getMessage().strip())));\n-        assertThat(\"\", is(not(v.advice.strip())));\n-        if (withCause) {\n-            assertNotNull(v.getCause());\n-        } else {\n-            assertNull(v.getCause());\n-        }\n-    }\n-\n-    private final static String TOOL_JAVA;\n-    private final static String TOOL_UNKNOWN = Path.of(System.getProperty(\n-            \"java.home\"), \"bin\").toString();\n-\n-    static {\n-        String fname = \"java\";\n-        if (OperatingSystem.isWindows()) {\n-            fname = fname + \".exe\";\n-        }\n-        TOOL_JAVA = Path.of(System.getProperty(\"java.home\"), \"bin\", fname).toString();\n-    }\n-}\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk\/jpackage\/internal\/ToolValidatorTest.java","additions":0,"deletions":102,"binary":false,"changes":102,"status":"deleted"}]}