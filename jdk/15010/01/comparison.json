{"files":[{"patch":"@@ -30,1 +30,1 @@\n- *       https:\/\/bugs.openjdk.org\/browse\/JDK-8310308\n+ *       https:\/\/bugs.openjdk.org\/browse\/JDK-8312570\n@@ -93,1 +93,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -102,1 +102,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -111,1 +111,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -122,1 +122,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -133,1 +133,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -144,1 +144,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -155,1 +155,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -166,1 +166,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -177,1 +177,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -188,1 +188,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -199,1 +199,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -210,1 +210,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -221,1 +221,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -232,1 +232,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -243,1 +243,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -254,1 +254,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -265,1 +265,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -276,1 +276,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -287,1 +287,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -298,1 +298,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -309,1 +309,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -320,1 +320,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -331,1 +331,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -342,1 +342,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -353,1 +353,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -364,1 +364,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -375,1 +375,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -385,1 +385,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -395,1 +395,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -405,1 +405,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -415,1 +415,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -425,1 +425,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -435,1 +435,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -445,1 +445,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -455,1 +455,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -465,1 +465,1 @@\n- * @bug 8298935 8308606\n+ * @bug 8298935 8308606 8310308 8312570\n@@ -1403,1 +1403,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -1406,1 +1406,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1447,1 +1451,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1450,1 +1462,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1454,1 +1466,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1480,1 +1492,4 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1511,1 +1526,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1514,1 +1533,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1546,1 +1565,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1550,1 +1574,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1591,1 +1615,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1594,1 +1626,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1598,1 +1630,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1630,1 +1662,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    \/\/   positive byte_offset 12 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 12\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1634,1 +1671,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1663,1 +1700,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1666,1 +1707,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1701,1 +1742,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1705,1 +1754,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1746,1 +1795,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -1749,1 +1798,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -1753,1 +1802,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1784,1 +1841,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1788,1 +1849,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1817,1 +1878,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -1820,1 +1881,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1858,1 +1923,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -1861,1 +1926,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -1865,1 +1930,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 32\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1894,1 +1964,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1897,1 +1971,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1927,1 +2001,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -1930,1 +2004,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 56 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 56\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -1959,1 +2038,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -1962,1 +2045,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2003,1 +2086,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2006,1 +2089,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -2010,1 +2093,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 64 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 64\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2039,1 +2127,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -2042,1 +2134,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2071,1 +2163,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2074,1 +2166,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 72 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 72\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2103,1 +2200,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2106,1 +2203,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2139,1 +2240,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2142,1 +2243,10 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 80 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 80\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2183,1 +2293,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -2186,1 +2304,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2190,1 +2308,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2219,1 +2337,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2222,1 +2340,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 124 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 124\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2251,1 +2374,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -2254,1 +2381,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2295,1 +2422,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2298,1 +2425,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -2302,1 +2429,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 128 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 128\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2343,1 +2475,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -2346,1 +2486,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2350,1 +2490,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2379,1 +2519,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2382,1 +2522,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 252 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 252\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2411,1 +2556,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -2414,1 +2563,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2455,1 +2604,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -2458,1 +2615,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2462,1 +2619,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2503,1 +2660,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -2506,1 +2671,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2510,1 +2675,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2539,1 +2704,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -2542,1 +2711,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2571,1 +2740,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2574,1 +2743,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2615,1 +2788,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -2618,1 +2799,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2622,1 +2803,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2663,1 +2844,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2666,1 +2847,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -2670,1 +2851,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_I, IRNode.MUL_VI, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2699,1 +2888,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2702,1 +2891,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2731,1 +2924,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -2734,1 +2931,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2775,1 +2972,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -2778,1 +2975,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -2782,1 +2979,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_I, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2811,1 +3016,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -2814,1 +3023,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2855,1 +3064,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -2858,1 +3067,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -2862,1 +3071,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2888,1 +3105,4 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -2919,1 +3139,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -2922,1 +3146,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -2957,1 +3181,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -2961,1 +3193,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3002,1 +3234,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3005,1 +3237,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -3009,1 +3241,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3040,1 +3280,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3044,1 +3288,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3073,1 +3317,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3076,1 +3324,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3114,1 +3362,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3117,1 +3365,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -3121,1 +3369,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 32\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3162,1 +3415,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3165,1 +3426,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3169,1 +3430,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3199,1 +3460,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3202,1 +3463,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 56 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 56\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3231,1 +3497,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3234,1 +3504,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3275,1 +3545,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3278,1 +3548,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -3282,1 +3552,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 64 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 64\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3311,1 +3586,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3314,1 +3593,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3347,1 +3626,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3350,1 +3629,10 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 112 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 112\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3379,1 +3667,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3382,1 +3674,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3423,1 +3715,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3426,1 +3718,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -3430,1 +3722,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 128 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 128\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3459,1 +3756,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3462,1 +3763,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3495,1 +3796,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3498,1 +3799,10 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 144 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 144\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3527,1 +3837,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3530,1 +3840,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3567,1 +3881,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3570,1 +3884,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -3574,1 +3888,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 160 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 160\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3615,1 +3934,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3618,1 +3945,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3622,1 +3949,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3651,1 +3978,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3654,1 +3981,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 248 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 248\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3683,1 +4015,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3686,1 +4022,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3727,1 +4063,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3730,1 +4066,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -3734,1 +4070,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3775,1 +4119,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3778,1 +4122,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -3782,1 +4126,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3811,1 +4163,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3814,1 +4170,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3843,1 +4199,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3846,1 +4202,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3887,1 +4247,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3890,1 +4250,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -3894,1 +4254,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3935,1 +4303,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -3938,1 +4314,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3942,1 +4318,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -3971,1 +4347,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -3974,1 +4350,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4003,1 +4383,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -4006,1 +4390,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4047,1 +4431,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -4050,1 +4434,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -4054,1 +4438,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4095,1 +4487,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_L, IRNode.ADD_VL, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -4098,1 +4498,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4102,1 +4502,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4131,1 +4531,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -4134,1 +4538,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4163,1 +4567,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -4166,1 +4570,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4207,1 +4615,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_L, \"> 0\", IRNode.ADD_VL, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -4210,1 +4626,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4214,1 +4630,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4243,1 +4659,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -4246,1 +4662,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4287,1 +4707,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4290,1 +4718,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4294,1 +4722,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4320,1 +4748,4 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 2 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4351,1 +4782,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4354,1 +4789,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4386,1 +4821,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4390,1 +4830,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4431,1 +4871,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -4434,1 +4874,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -4438,1 +4878,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4470,1 +4918,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 6 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 6\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4474,1 +4927,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4503,1 +4956,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4506,1 +4963,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4538,1 +4995,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -4542,1 +4999,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4583,1 +5045,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4586,1 +5056,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4590,1 +5060,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4622,1 +5092,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 14 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4626,1 +5101,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4655,1 +5130,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -4658,1 +5133,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4693,1 +5172,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4697,1 +5184,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4726,1 +5213,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4729,1 +5220,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4760,1 +5251,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4764,1 +5259,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4793,1 +5288,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4796,1 +5295,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4834,1 +5333,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -4837,1 +5336,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -4841,1 +5340,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 32\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4870,1 +5374,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -4873,1 +5377,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4903,1 +5411,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -4906,1 +5414,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 36 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 36\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4935,1 +5448,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -4938,1 +5455,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -4968,1 +5485,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -4971,1 +5488,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 40 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 40\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5012,1 +5534,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5015,1 +5537,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -5019,1 +5541,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5049,1 +5579,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5052,1 +5582,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 62 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 62\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5081,1 +5616,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5084,1 +5623,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5125,1 +5664,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5128,1 +5667,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -5132,1 +5671,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 64 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 64\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5173,1 +5717,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5176,1 +5728,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5180,1 +5732,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5209,1 +5761,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5212,1 +5764,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 126 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 126\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5241,1 +5798,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5244,1 +5801,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5285,1 +5846,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5288,1 +5849,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -5292,1 +5853,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 128 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 128\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5333,1 +5899,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5336,1 +5910,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5340,1 +5914,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5369,1 +5943,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5372,1 +5946,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 130 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 130\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5401,1 +5980,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5404,1 +5983,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5445,1 +6028,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5448,1 +6039,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5452,1 +6043,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5493,1 +6084,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5496,1 +6087,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -5500,1 +6091,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_S, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5529,1 +6128,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5532,1 +6135,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5561,1 +6164,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5564,1 +6171,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5605,1 +6212,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5608,1 +6215,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -5612,1 +6219,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_S, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5641,1 +6252,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5644,1 +6259,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5685,1 +6300,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5688,1 +6311,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5692,1 +6315,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5718,1 +6341,4 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 2 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5749,1 +6375,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5752,1 +6378,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5784,1 +6414,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5788,1 +6423,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5829,1 +6464,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5832,1 +6475,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5836,1 +6479,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5868,1 +6511,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -5872,1 +6515,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 6 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 6\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5901,1 +6549,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5904,1 +6556,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5936,1 +6588,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5940,1 +6597,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5981,1 +6638,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -5984,1 +6649,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -5988,1 +6653,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6020,1 +6685,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    \/\/   positive byte_offset 14 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6024,1 +6694,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6053,1 +6723,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6056,1 +6730,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6091,1 +6765,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6095,1 +6777,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6124,1 +6806,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6127,1 +6813,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6158,1 +6844,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6162,1 +6852,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6191,1 +6881,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6194,1 +6888,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6232,1 +6926,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6235,1 +6929,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -6239,1 +6933,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 32\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6268,1 +6967,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6271,1 +6970,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6301,1 +7004,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6304,1 +7007,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 36 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 36\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6333,1 +7041,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6336,1 +7044,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6366,1 +7078,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6369,1 +7081,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 40 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 40\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6410,1 +7127,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6413,1 +7138,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6417,1 +7142,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6447,1 +7172,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6450,1 +7175,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 62 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 62\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6479,1 +7209,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6482,1 +7216,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6523,1 +7257,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6526,1 +7260,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -6530,1 +7264,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 64 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 64\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6571,1 +7310,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6574,1 +7321,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6578,1 +7325,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6607,1 +7354,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6610,1 +7357,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 126 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 126\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6639,1 +7391,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6642,1 +7398,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6683,1 +7439,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6686,1 +7442,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -6690,1 +7446,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 128 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 128\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6731,1 +7492,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6734,1 +7495,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -6738,1 +7499,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6767,1 +7536,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6770,1 +7539,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    \/\/   positive byte_offset 130 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 130\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6799,1 +7573,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6802,1 +7580,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6843,1 +7621,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6846,1 +7632,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6850,1 +7636,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6891,1 +7677,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_C, IRNode.MUL_VS, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6894,1 +7688,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6898,1 +7692,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6927,1 +7721,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -6930,1 +7724,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -6959,1 +7757,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n@@ -6962,1 +7764,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7003,1 +7805,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 16\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 8\n@@ -7006,1 +7808,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -7010,1 +7812,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 128\n+    @IR(counts = {IRNode.LOAD_VECTOR_C, \"> 0\", IRNode.MUL_VS, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7039,1 +7845,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7042,1 +7852,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7083,1 +7893,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -7086,1 +7896,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -7090,1 +7900,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7116,1 +7934,4 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    \/\/   positive byte_offset 1 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7159,1 +7980,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -7162,1 +7983,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -7166,1 +7987,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7192,1 +8021,4 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    \/\/   positive byte_offset 2 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7235,1 +8067,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7238,1 +8078,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7242,1 +8082,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7268,1 +8108,4 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    \/\/   positive byte_offset 3 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7299,1 +8142,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7302,1 +8149,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7334,1 +8181,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -7338,1 +8185,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7379,1 +8231,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7382,1 +8242,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7386,1 +8246,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7418,1 +8278,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -7422,1 +8282,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    \/\/   positive byte_offset 7 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 7\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7451,1 +8316,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7454,1 +8323,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7486,1 +8355,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7490,1 +8364,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7531,1 +8405,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -7534,1 +8408,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -7538,1 +8412,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7570,1 +8452,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    \/\/   positive byte_offset 14 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 14\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7574,1 +8461,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7603,1 +8490,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -7606,1 +8493,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7641,1 +8532,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7645,1 +8544,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7686,1 +8585,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -7689,1 +8588,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -7693,1 +8592,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7724,1 +8631,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7728,1 +8639,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7757,1 +8668,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7760,1 +8675,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7791,1 +8706,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7795,1 +8714,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7836,1 +8755,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7839,1 +8766,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7843,1 +8770,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7874,1 +8801,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7878,1 +8809,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7907,1 +8838,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7910,1 +8845,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7948,1 +8883,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -7951,1 +8886,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -7955,1 +8890,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 32\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -7996,1 +8936,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -7999,1 +8947,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8003,1 +8951,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8033,1 +8981,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -8036,1 +8984,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    \/\/   positive byte_offset 63 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 63\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8065,1 +9018,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -8068,1 +9025,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8109,1 +9066,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -8112,1 +9069,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -8116,1 +9073,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    \/\/   positive byte_offset 64 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 64\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8157,1 +9119,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -8160,1 +9130,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8164,1 +9134,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8193,1 +9163,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -8196,1 +9166,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    \/\/   positive byte_offset 65 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 65\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8225,1 +9200,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -8228,1 +9203,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8269,1 +9248,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -8272,1 +9251,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -8276,1 +9255,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    \/\/   positive byte_offset 128 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 128\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8317,1 +9301,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_B, IRNode.MUL_VB, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -8320,1 +9312,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8324,1 +9316,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8353,1 +9345,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -8356,1 +9348,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    \/\/   positive byte_offset 129 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 129\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8385,1 +9382,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n@@ -8388,1 +9389,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8429,1 +9430,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 32\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 16\n@@ -8432,1 +9433,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -8436,1 +9437,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 256\n+    \/\/   positive byte_offset 192 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_B, \"> 0\", IRNode.MUL_VB, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 4\", \"MaxVectorSize\", \"<= 192\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8465,1 +9471,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -8468,1 +9474,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8509,1 +9519,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8512,1 +9530,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8516,1 +9534,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8542,1 +9560,4 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    \/\/   positive byte_offset 4 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8573,1 +9594,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8576,1 +9601,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8608,1 +9633,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8612,1 +9642,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8653,1 +9683,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8656,1 +9694,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8660,1 +9698,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8692,1 +9730,6 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    \/\/   positive byte_offset 12 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 12\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8696,1 +9739,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8725,1 +9768,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8728,1 +9775,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8763,1 +9810,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8767,1 +9822,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8808,1 +9863,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8811,1 +9874,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8815,1 +9878,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8846,1 +9909,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8850,1 +9917,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8879,1 +9946,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -8882,1 +9949,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8920,1 +9991,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -8923,1 +9994,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -8927,1 +9998,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 32\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8956,1 +10032,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -8959,1 +10039,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -8989,1 +10069,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -8992,1 +10072,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 56 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 56\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9021,1 +10106,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9024,1 +10113,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9065,1 +10154,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -9068,1 +10157,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -9072,1 +10161,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 64 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 64\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9101,1 +10195,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9104,1 +10202,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9133,1 +10231,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -9136,1 +10234,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 72 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 72\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9165,1 +10268,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -9168,1 +10271,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9201,1 +10308,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -9204,1 +10311,10 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 80 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 80\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9245,1 +10361,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9248,1 +10372,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9252,1 +10376,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9281,1 +10405,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -9284,1 +10408,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 124 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 124\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9313,1 +10442,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -9316,1 +10445,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9357,1 +10490,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -9360,1 +10493,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -9364,1 +10497,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 128 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 128\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9405,1 +10543,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9408,1 +10554,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9412,1 +10558,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9441,1 +10587,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n@@ -9444,1 +10590,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n+    \/\/   positive byte_offset 252 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\", \"MaxVectorSize\", \"<= 252\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9473,1 +10624,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9476,1 +10631,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9517,1 +10672,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9520,1 +10683,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9524,1 +10687,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9565,1 +10728,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9568,1 +10739,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9572,1 +10743,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9601,1 +10772,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9604,1 +10779,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9633,1 +10808,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9636,1 +10815,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9677,1 +10856,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9680,1 +10867,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9684,1 +10871,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9725,1 +10912,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_F, IRNode.MUL_VF, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9728,1 +10923,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9732,1 +10927,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9761,1 +10956,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9764,1 +10963,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9793,1 +10992,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9796,1 +10999,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9837,1 +11040,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 8\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 4\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_F, \"> 0\", IRNode.MUL_VF, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 8\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 64\n@@ -9840,1 +11051,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9844,1 +11055,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9873,1 +11084,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -9876,1 +11087,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9917,1 +11132,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -9920,1 +11143,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9924,1 +11147,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -9950,1 +11173,4 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    \/\/   positive byte_offset 8 can lead to cyclic dependency\n+    \/\/   No positive IR rule: conditions impossible.\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -9981,1 +11207,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -9984,1 +11214,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10019,1 +11249,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10023,1 +11261,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10064,1 +11302,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10067,1 +11305,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -10071,1 +11309,9 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10102,1 +11348,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10106,1 +11356,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10135,1 +11385,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10138,1 +11392,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10176,1 +11430,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10179,1 +11433,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -10183,1 +11437,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 32 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 32\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10224,1 +11483,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10227,1 +11494,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10231,1 +11498,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10261,1 +11528,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10264,1 +11531,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 56 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 56\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10293,1 +11565,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10296,1 +11568,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10337,1 +11613,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10340,1 +11616,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -10344,1 +11620,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 64 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 64\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10373,1 +11654,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10376,1 +11661,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10409,1 +11694,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10412,1 +11697,10 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 112 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 112\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10441,1 +11735,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10444,1 +11742,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10485,1 +11783,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10488,1 +11786,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -10492,1 +11790,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 128 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 128\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10521,1 +11824,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10524,1 +11827,5 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10557,1 +11864,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10560,1 +11867,10 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 144 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 144\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10589,1 +11905,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10592,1 +11912,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10629,1 +11949,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10632,1 +11952,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -10636,1 +11956,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 160 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 160\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10677,1 +12002,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10680,1 +12013,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10684,1 +12017,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10713,1 +12046,1 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n@@ -10716,1 +12049,6 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n+    \/\/   positive byte_offset 248 can lead to cyclic dependency\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\", \"MaxVectorSize\", \"<= 248\"},\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10745,1 +12083,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10748,1 +12090,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10789,1 +12131,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10792,1 +12142,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10796,1 +12146,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10837,1 +12187,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10840,1 +12198,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10844,1 +12202,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10873,1 +12231,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10876,1 +12238,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10905,1 +12267,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10908,1 +12274,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10949,1 +12315,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -10952,1 +12326,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10956,1 +12330,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -10997,1 +12371,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -11000,1 +12382,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11004,1 +12386,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11033,1 +12415,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -11036,1 +12422,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11065,1 +12451,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -11068,1 +12458,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11109,1 +12499,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -11112,1 +12510,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11116,1 +12514,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11157,1 +12555,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Strict alignment not possible.\n+    @IR(failOn = {IRNode.LOAD_VECTOR_D, IRNode.MUL_VD, IRNode.STORE_VECTOR},\n+        applyIf = {\"AlignVector\", \"true\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -11160,1 +12566,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11164,1 +12570,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11193,1 +12599,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -11196,1 +12606,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11225,1 +12635,5 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -11228,1 +12642,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11269,1 +12683,9 @@\n-    \/\/ CPU: asimd -> vector_width: 32 -> elements in vector: 4\n+    \/\/ CPU: asimd -> vector_width: 16 -> elements in vector: 2\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"false\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/   Vectorize when strict alignment guaranteed.\n+    @IR(counts = {IRNode.LOAD_VECTOR_D, \"> 0\", IRNode.MUL_VD, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+        applyIfAnd = {\"AlignVector\", \"true\", \"MaxVectorSize\", \">= 16\"},\n+        applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    \/\/ CPU: sve -> max vector_width: 256 -> max elements in vector: 32\n@@ -11272,1 +12694,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n@@ -11276,1 +12698,1 @@\n-        applyIfCPUFeature = {\"asimd\", \"true\"})\n+        applyIfCPUFeature = {\"sve\", \"true\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestDependencyOffsets.java","additions":2062,"deletions":640,"binary":false,"changes":2702,"status":"modified"}]}