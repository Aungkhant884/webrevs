{"files":[{"patch":"@@ -46,0 +46,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable;\n@@ -58,2 +59,3 @@\n-    public AbstractExecutableMemberWriter(SubWriterHolderWriter writer, TypeElement typeElement) {\n-        super(writer, typeElement);\n+    public AbstractExecutableMemberWriter(SubWriterHolderWriter writer, TypeElement typeElement,\n+                                          VisibleMemberTable.Kind kind) {\n+        super(writer, typeElement, kind);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractExecutableMemberWriter.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import java.util.Collection;\n+import java.util.Comparator;\n@@ -30,0 +32,5 @@\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n@@ -32,0 +39,1 @@\n+import javax.lang.model.element.ElementKind;\n@@ -46,0 +54,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.DocFinder;\n@@ -49,0 +58,10 @@\n+import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.ANNOTATION_TYPE_MEMBER;\n+import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.ANNOTATION_TYPE_MEMBER_OPTIONAL;\n+import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.ANNOTATION_TYPE_MEMBER_REQUIRED;\n+import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.CONSTRUCTORS;\n+import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.ENUM_CONSTANTS;\n+import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.FIELDS;\n+import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.METHODS;\n+import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.NESTED_CLASSES;\n+import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.PROPERTIES;\n+\n@@ -64,0 +83,2 @@\n+    protected final VisibleMemberTable.Kind kind;\n+    protected final VisibleMemberTable visibleMemberTable;\n@@ -65,3 +86,51 @@\n-    public AbstractMemberWriter(SubWriterHolderWriter writer, TypeElement typeElement) {\n-        this.configuration = writer.configuration;\n-        this.options = configuration.getOptions();\n+    protected final Comparator<Element> summariesComparator;\n+\n+    \/**\n+     * The list of {@linkplain VisibleMemberTable.Kind kinds} of summary table\n+     * that appear in the page for any {@linkplain TypeElement type element}.\n+     *\n+     * Note: this is not the default ordering of {@link VisibleMemberTable.Kind}.\n+     * For what it is worth, that ordering is relied on by {@link Navigation}.\n+     *\n+     * Compared to {@link #detailKinds}, this list includes nested classes and distinct\n+     * kinds for required and optional annotation type members\n+     *\n+     * @see VisibleMemberTable.Kind#forSummariesOf(ElementKind)\n+     *\/\n+    static final List<VisibleMemberTable.Kind> summaryKinds = List.of(\n+            NESTED_CLASSES,\n+            ENUM_CONSTANTS, PROPERTIES, FIELDS,\n+            CONSTRUCTORS,\n+            ANNOTATION_TYPE_MEMBER_REQUIRED, ANNOTATION_TYPE_MEMBER_OPTIONAL, METHODS\n+    );\n+\n+    \/**\n+     * The list of {@linkplain VisibleMemberTable.Kind kinds} of detail lists\n+     * that appear in the page for any {@linkplain TypeElement type element}.\n+     *\n+     * Note: this is not the default ordering of {@link VisibleMemberTable.Kind}.\n+     * For what it is worth, that ordering is relied on by {@link Navigation}.\n+     *\n+     * Compared to {@link #summaryKinds}, this list does not include nested classes and\n+     * just a single kind for all annotation type members, although nested classes could\n+     * be included by ensuring that {@link #buildDetails} is a no-op.\n+     *\n+     * @see VisibleMemberTable.Kind#forDetailsOf(ElementKind)\n+     *\/\n+    static final List<VisibleMemberTable.Kind> detailKinds = List.of(\n+            ENUM_CONSTANTS, PROPERTIES, FIELDS,\n+            CONSTRUCTORS,\n+            ANNOTATION_TYPE_MEMBER, METHODS\n+    );\n+\n+    protected AbstractMemberWriter(ClassWriter writer, VisibleMemberTable.Kind kind) {\n+        this(writer, writer.typeElement, kind);\n+    }\n+\n+    protected AbstractMemberWriter(SubWriterHolderWriter writer) {\n+        this(writer, null, null);\n+    }\n+\n+    protected AbstractMemberWriter(SubWriterHolderWriter writer,\n+                                 TypeElement typeElement,\n+                                 VisibleMemberTable.Kind kind) {\n@@ -70,0 +139,4 @@\n+        this.kind = kind;\n+\n+        this.configuration = writer.configuration;\n+        this.options = configuration.getOptions();\n@@ -75,0 +148,115 @@\n+\n+        visibleMemberTable = typeElement == null ? null : configuration.getVisibleMemberTable(typeElement);\n+\n+        summariesComparator = utils.comparators.makeIndexElementComparator();\n+    }\n+\n+    \/**\n+     * Builds the list of \"details\" for all members of this kind.\n+     *\n+     * @param target the content to which the list will be added\n+     *\/\n+    public abstract void buildDetails(Content target);\n+\n+\n+    \/**\n+     * Builds the \"summary\" for all members of this kind.\n+     *\n+     * @param target the content to which the list will be added\n+     *\/\n+    public void buildSummary(Content target)\n+    {\n+        var summaryTreeList = new ArrayList<Content>();\n+\n+        buildMainSummary(summaryTreeList);\n+\n+        var showInherited = switch (kind) {\n+            case FIELDS, METHODS, NESTED_CLASSES, PROPERTIES -> true;\n+            case ANNOTATION_TYPE_MEMBER, ANNOTATION_TYPE_MEMBER_OPTIONAL, ANNOTATION_TYPE_MEMBER_REQUIRED,\n+                    CONSTRUCTORS, ENUM_CONSTANTS -> false;\n+        };\n+        if (showInherited)\n+            buildInheritedSummary(summaryTreeList);\n+\n+        if (!summaryTreeList.isEmpty()) {\n+            Content member = getMemberSummaryHeader(typeElement, target);\n+            summaryTreeList.forEach(member::add);\n+            buildSummary(target, member);\n+        }\n+    }\n+\n+    \/**\n+     * Builds the main summary table for the members of this kind.\n+     *\n+     * @param summaryTreeList the list of contents to which the documentation will be added\n+     *\/\n+    private void buildMainSummary(List<Content> summaryTreeList) {\n+        Set<? extends Element> members = asSortedSet(visibleMemberTable.getVisibleMembers(kind));\n+        if (!members.isEmpty()) {\n+            var pHelper = writer.getPropertyHelper();\n+            for (Element member : members) {\n+                final Element property = pHelper.getPropertyElement(member);\n+                if (property != null && member instanceof ExecutableElement ee) {\n+                    configuration.cmtUtils.updatePropertyMethodComment(ee, property);\n+                }\n+                if (utils.isMethod(member)) {\n+                    var docFinder = utils.docFinder();\n+                    Optional<List<? extends DocTree>> r = docFinder.search((ExecutableElement) member, (m -> {\n+                        var firstSentenceTrees = utils.getFirstSentenceTrees(m);\n+                        Optional<List<? extends DocTree>> optional = firstSentenceTrees.isEmpty() ? Optional.empty() : Optional.of(firstSentenceTrees);\n+                        return DocFinder.Result.fromOptional(optional);\n+                    })).toOptional();\n+                    \/\/ The fact that we use `member` for possibly unrelated tags is suspicious\n+                    addMemberSummary(typeElement, member, r.orElse(List.of()));\n+                } else {\n+                    addMemberSummary(typeElement, member, utils.getFirstSentenceTrees(member));\n+                }\n+            }\n+            summaryTreeList.add(getSummaryTable(typeElement));\n+        }\n+    }\n+\n+    \/**\n+     * Builds the inherited member summary for the members of this kind.\n+     *\n+     * @param targets the list of contents to which the documentation will be added\n+     *\/\n+    private void buildInheritedSummary(List<Content> targets) {\n+        var inheritedMembersFromMap = asSortedSet(visibleMemberTable.getAllVisibleMembers(kind));\n+\n+        for (TypeElement inheritedClass : visibleMemberTable.getVisibleTypeElements()) {\n+            if (!(utils.isPublic(inheritedClass) || utils.isLinkable(inheritedClass))) {\n+                continue;\n+            }\n+            if (Objects.equals(inheritedClass, typeElement)) {\n+                continue;\n+            }\n+            if (utils.hasHiddenTag(inheritedClass)) {\n+                continue;\n+            }\n+\n+            List<? extends Element> members = inheritedMembersFromMap.stream()\n+                    .filter(e -> Objects.equals(utils.getEnclosingTypeElement(e), inheritedClass))\n+                    .toList();\n+\n+            if (!members.isEmpty()) {\n+                SortedSet<Element> inheritedMembers = new TreeSet<>(summariesComparator);\n+                inheritedMembers.addAll(members);\n+                Content inheritedHeader = getInheritedSummaryHeader(inheritedClass);\n+                Content links = getInheritedSummaryLinks();\n+                addSummaryFootNote(inheritedClass, inheritedMembers, links);\n+                inheritedHeader.add(links);\n+                targets.add(inheritedHeader);\n+            }\n+        }\n+    }\n+\n+    private void addSummaryFootNote(TypeElement inheritedClass, Iterable<Element> inheritedMembers,\n+                                    Content links) {\n+        boolean isFirst = true;\n+        for (Element member : inheritedMembers) {\n+            TypeElement t = utils.isUndocumentedEnclosure(inheritedClass)\n+                    ? typeElement : inheritedClass;\n+            addInheritedMemberSummary(t, member, isFirst, links);\n+            isFirst = false;\n+        }\n@@ -77,2 +265,4 @@\n-    public AbstractMemberWriter(SubWriterHolderWriter writer) {\n-        this(writer, null);\n+    private SortedSet<? extends Element> asSortedSet(Collection<? extends Element> members) {\n+        SortedSet<Element> out = new TreeSet<>(summariesComparator);\n+        out.addAll(members);\n+        return out;\n@@ -96,1 +286,1 @@\n-    public abstract void addSummary(Content summariesList, Content content);\n+    public abstract void buildSummary(Content summariesList, Content content);\n@@ -378,1 +568,1 @@\n-            throw new IllegalStateException(tElement + \", \" + typeElement);\n+            throw new IllegalStateException(getClass() + \": \" + tElement + \", \" + typeElement);\n@@ -401,1 +591,0 @@\n-     * @param isLast true if this is the last member in the list\n@@ -405,1 +594,1 @@\n-            Element member, boolean isFirst, boolean isLast,\n+            Element member, boolean isFirst,\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractMemberWriter.java","additions":198,"deletions":9,"binary":false,"changes":207,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.DocletException;\n@@ -50,13 +49,0 @@\n-    \/**\n-     * We generate separate summaries for required and optional annotation interface members,\n-     * so we need dedicated writer instances for each kind. For the details section, a single\n-     * shared list is generated so a special {@code ANY} value is provided for this case.\n-     *\/\n-    enum Kind {\n-        OPTIONAL,\n-        REQUIRED,\n-        ANY\n-    }\n-\n-    private final Kind kind;\n-\n@@ -69,10 +55,0 @@\n-    \/**\n-     * Constructs a new AnnotationTypeMemberWriterImpl for any kind of member.\n-     *\n-     * @param writer The writer for the class that the member belongs to.\n-     *\/\n-    public AnnotationTypeMemberWriter(SubWriterHolderWriter writer) {\n-        super(writer);\n-        this.kind = Kind.ANY;\n-    }\n-\n@@ -82,0 +58,4 @@\n+     * We generate separate summaries for required and optional annotation interface members,\n+     * so we need dedicated writer instances for each kind. For the details section, a single\n+     * shared list is generated\n+     *\n@@ -83,1 +63,0 @@\n-     * @param annotationType the AnnotationType that holds this member.\n@@ -86,5 +65,8 @@\n-    public AnnotationTypeMemberWriter(SubWriterHolderWriter writer,\n-                                      TypeElement annotationType,\n-                                      Kind kind) {\n-        super(writer, annotationType);\n-        this.kind = kind;\n+    public AnnotationTypeMemberWriter(ClassWriter writer, VisibleMemberTable.Kind kind) {\n+        super(writer, kind);\n+        assert switch (kind) {\n+            case ANNOTATION_TYPE_MEMBER_REQUIRED,\n+                    ANNOTATION_TYPE_MEMBER_OPTIONAL,\n+                    ANNOTATION_TYPE_MEMBER -> true;\n+            default -> false;\n+        };\n@@ -93,1 +75,2 @@\n-    public void build(Content target) throws DocletException {\n+    @Override\n+    public void buildDetails(Content target) {\n@@ -194,4 +177,1 @@\n-            case OPTIONAL -> content.add(selectComment(\n-                    MarkerComments.START_OF_ANNOTATION_TYPE_OPTIONAL_MEMBER_SUMMARY,\n-                    MarkerComments.START_OF_ANNOTATION_INTERFACE_OPTIONAL_MEMBER_SUMMARY));\n-            case REQUIRED -> content.add(selectComment(\n+            case ANNOTATION_TYPE_MEMBER_REQUIRED -> content.add(selectComment(\n@@ -200,1 +180,4 @@\n-            case ANY -> throw new UnsupportedOperationException(\"unsupported member kind\");\n+            case ANNOTATION_TYPE_MEMBER_OPTIONAL -> content.add(selectComment(\n+                    MarkerComments.START_OF_ANNOTATION_TYPE_OPTIONAL_MEMBER_SUMMARY,\n+                    MarkerComments.START_OF_ANNOTATION_INTERFACE_OPTIONAL_MEMBER_SUMMARY));\n+            default -> throw new IllegalStateException(kind.toString());\n@@ -212,1 +195,1 @@\n-    public void addSummary(Content summariesList, Content content) {\n+    public void buildSummary(Content summariesList, Content content) {\n@@ -215,3 +198,3 @@\n-                    case REQUIRED -> HtmlIds.ANNOTATION_TYPE_REQUIRED_ELEMENT_SUMMARY;\n-                    case OPTIONAL -> HtmlIds.ANNOTATION_TYPE_OPTIONAL_ELEMENT_SUMMARY;\n-                    case ANY -> throw new UnsupportedOperationException(\"unsupported member kind\");\n+                    case ANNOTATION_TYPE_MEMBER_REQUIRED -> HtmlIds.ANNOTATION_TYPE_REQUIRED_ELEMENT_SUMMARY;\n+                    case ANNOTATION_TYPE_MEMBER_OPTIONAL -> HtmlIds.ANNOTATION_TYPE_OPTIONAL_ELEMENT_SUMMARY;\n+                    default -> throw new IllegalStateException(kind.toString());\n@@ -277,3 +260,3 @@\n-                    case REQUIRED -> contents.annotateTypeRequiredMemberSummaryLabel;\n-                    case OPTIONAL -> contents.annotateTypeOptionalMemberSummaryLabel;\n-                    case ANY -> throw new UnsupportedOperationException(\"unsupported member kind\");\n+                    case ANNOTATION_TYPE_MEMBER_REQUIRED -> contents.annotateTypeRequiredMemberSummaryLabel;\n+                    case ANNOTATION_TYPE_MEMBER_OPTIONAL -> contents.annotateTypeOptionalMemberSummaryLabel;\n+                    default -> throw new IllegalStateException(kind.toString());\n@@ -291,3 +274,3 @@\n-                    case REQUIRED -> \"doclet.Annotation_Type_Required_Members\";\n-                    case OPTIONAL -> \"doclet.Annotation_Type_Optional_Members\";\n-                    case ANY -> throw new UnsupportedOperationException(\"unsupported member kind\");\n+                    case ANNOTATION_TYPE_MEMBER_REQUIRED -> \"doclet.Annotation_Type_Required_Members\";\n+                    case ANNOTATION_TYPE_MEMBER_OPTIONAL -> \"doclet.Annotation_Type_Optional_Members\";\n+                    default -> throw new IllegalStateException(kind.toString());\n@@ -301,3 +284,3 @@\n-                    case REQUIRED -> contents.annotationTypeRequiredMemberLabel;\n-                    case OPTIONAL -> contents.annotationTypeOptionalMemberLabel;\n-                    case ANY -> throw new UnsupportedOperationException(\"unsupported member kind\");\n+                    case ANNOTATION_TYPE_MEMBER_REQUIRED -> contents.annotationTypeRequiredMemberLabel;\n+                    case ANNOTATION_TYPE_MEMBER_OPTIONAL -> contents.annotationTypeOptionalMemberLabel;\n+                    default -> throw new IllegalStateException(kind.toString());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AnnotationTypeMemberWriter.java","additions":32,"deletions":49,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import java.util.Comparator;\n-import java.util.LinkedList;\n@@ -33,2 +31,0 @@\n-import java.util.Objects;\n-import java.util.Optional;\n@@ -68,1 +64,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocFinder;\n@@ -72,9 +67,0 @@\n-import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.ANNOTATION_TYPE_MEMBER_OPTIONAL;\n-import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.ANNOTATION_TYPE_MEMBER_REQUIRED;\n-import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.CONSTRUCTORS;\n-import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.ENUM_CONSTANTS;\n-import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.FIELDS;\n-import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.METHODS;\n-import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.NESTED_CLASSES;\n-import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.PROPERTIES;\n-\n@@ -102,3 +88,1 @@\n-\n-    private final Comparator<Element> summariesComparator;\n-    private final PropertyUtils.PropertyHelper pHelper;\n+    protected final PropertyUtils.PropertyHelper pHelper;\n@@ -119,1 +103,0 @@\n-        summariesComparator = utils.comparators.makeIndexElementComparator();\n@@ -128,0 +111,5 @@\n+    @Override\n+    public PropertyUtils.PropertyHelper getPropertyHelper() {\n+        return pHelper;\n+    }\n+\n@@ -175,1 +163,1 @@\n-        Content c = getOutputInstance();\n+        Content c = new ContentBuilder();\n@@ -289,1 +277,1 @@\n-                    .getDocFilesHandler(containingPackage);\n+                    .newDocFilesHandler(containingPackage);\n@@ -329,192 +317,0 @@\n-        buildSummaries(summariesList);\n-        classContent.add(getMemberSummary(summariesList));\n-    }\n-\n-    protected void buildSummaries(Content target) {\n-        buildPropertiesSummary(target);\n-        buildNestedClassesSummary(target);\n-        buildEnumConstantsSummary(target);\n-        buildAnnotationTypeRequiredMemberSummary(target);\n-        buildAnnotationTypeOptionalMemberSummary(target);\n-        buildFieldsSummary(target);\n-        buildConstructorsSummary(target);\n-        buildMethodsSummary(target);\n-    }\n-\n-    \/**\n-     * Builds the summary for any optional members of an annotation type.\n-     *\n-     * @param summariesList the list of summaries to which the summary will be added\n-     *\/\n-    protected void buildAnnotationTypeOptionalMemberSummary(Content summariesList) {\n-\/\/        MemberSummaryWriter writer = memberSummaryWriters.get(ANNOTATION_TYPE_MEMBER_OPTIONAL);\n-        var writerFactory = configuration.getWriterFactory();\n-        var writer = writerFactory.getAnnotationTypeOptionalMemberWriter(this);\n-        addSummary(writer, ANNOTATION_TYPE_MEMBER_OPTIONAL, false, summariesList);\n-    }\n-\n-    \/**\n-     * Builds the summary for any required members of an annotation type.\n-     *\n-     * @param summariesList the list of summaries to which the summary will be added\n-     *\/\n-    protected void buildAnnotationTypeRequiredMemberSummary(Content summariesList) {\n-\/\/        MemberSummaryWriter writer = memberSummaryWriters.get(ANNOTATION_TYPE_MEMBER_REQUIRED);\n-        var writerFactory = configuration.getWriterFactory();\n-        var writer = writerFactory.getAnnotationTypeRequiredMemberWriter(this);\n-        addSummary(writer, ANNOTATION_TYPE_MEMBER_REQUIRED, false, summariesList);\n-    }\n-\n-    \/**\n-     * Builds the summary for any enum constants of an enum type.\n-     *\n-     * @param summariesList the list of summaries to which the summary will be added\n-     *\/\n-    protected void buildEnumConstantsSummary(Content summariesList) {\n-\/\/        MemberSummaryWriter writer = memberSummaryWriters.get(ENUM_CONSTANTS);\n-        var writerFactory = configuration.getWriterFactory();\n-        var writer = writerFactory.getEnumConstantWriter(this);\n-        addSummary(writer, ENUM_CONSTANTS, false, summariesList);\n-    }\n-\n-    \/**\n-     * Builds the summary for any fields.\n-     *\n-     * @param summariesList the list of summaries to which the summary will be added\n-     *\/\n-    protected void buildFieldsSummary(Content summariesList) {\n-\/\/        MemberSummaryWriter writer = memberSummaryWriters.get(FIELDS);\n-        var writerFactory = configuration.getWriterFactory();\n-        var writer = writerFactory.getFieldWriter(this);\n-        addSummary(writer, FIELDS, true, summariesList);\n-    }\n-\n-    \/**\n-     * Builds the summary for any properties.\n-     *\n-     * @param summariesList the list of summaries to which the summary will be added\n-     *\/\n-    protected void buildPropertiesSummary(Content summariesList) {\n-\/\/        MemberSummaryWriter writer = memberSummaryWriters.get(PROPERTIES);\n-        var writerFactory = configuration.getWriterFactory();\n-        var writer = writerFactory.getPropertyWriter(this);\n-        addSummary(writer, PROPERTIES, true, summariesList);\n-    }\n-\n-    \/**\n-     * Builds the summary for any nested classes.\n-     *\n-     * @param summariesList the list of summaries to which the summary will be added\n-     *\/\n-    protected void buildNestedClassesSummary(Content summariesList) {\n-\/\/        MemberSummaryWriter writer = memberSummaryWriters.get(NESTED_CLASSES);\n-        var writerFactory = configuration.getWriterFactory();\n-        var writer = new NestedClassWriter(this, typeElement); \/\/ TODO: surprising omission from WriterFactory\n-        addSummary(writer, NESTED_CLASSES, true, summariesList);\n-    }\n-\n-    \/**\n-     * Builds the summary for any methods.\n-     *\n-     * @param summariesList the content to which the documentation will be added\n-     *\/\n-    protected void buildMethodsSummary(Content summariesList) {\n-\/\/        MemberSummaryWriter writer = memberSummaryWriters.get(METHODS);\n-        var writerFactory = configuration.getWriterFactory();\n-        var writer = writerFactory.getMethodWriter(this);\n-        addSummary(writer, METHODS, true, summariesList);\n-    }\n-\n-    \/**\n-     * Builds the summary for any constructors.\n-     *\n-     * @param summariesList the content to which the documentation will be added\n-     *\/\n-    protected void buildConstructorsSummary(Content summariesList) {\n-\/\/        MemberSummaryWriter writer = memberSummaryWriters.get(CONSTRUCTORS);\n-        var writerFactory = configuration.getWriterFactory();\n-        var writer = writerFactory.getConstructorWriter(this);\n-        addSummary(writer, CONSTRUCTORS, false, summariesList);\n-    }\n-\n-\n-    \/**\n-     * Adds the summary for the documentation.\n-     *\n-     * @param writer               the writer for this member summary\n-     * @param kind                 the kind of members to document\n-     * @param showInheritedSummary true if a summary of any inherited elements should be documented\n-     * @param summariesList        the list of summaries to which the summary will be added\n-     *\/\n-    private void addSummary(AbstractMemberWriter writer,\n-                            VisibleMemberTable.Kind kind,\n-                            boolean showInheritedSummary,\n-                            Content summariesList)\n-    {\n-        \/\/ TODO: could infer the writer from the kind\n-        \/\/ TODO: why LinkedList?\n-        List<Content> summaryTreeList = new LinkedList<>();\n-        buildSummary(writer, kind, summaryTreeList);\n-        if (showInheritedSummary)\n-            buildInheritedSummary(writer, kind, summaryTreeList);\n-        if (!summaryTreeList.isEmpty()) {\n-            Content member = writer.getMemberSummaryHeader(typeElement, summariesList);\n-            summaryTreeList.forEach(member::add);\n-            writer.addSummary(summariesList, member);\n-        }\n-    }\n-\n-    \/**\n-     * Build the member summary for the given members.\n-     *\n-     * @param writer the summary writer to write the output.\n-     * @param kind the kind of  members to summarize.\n-     * @param summaryTreeList the list of contents to which the documentation will be added\n-     *\/\n-    private void buildSummary(AbstractMemberWriter writer,\n-                              VisibleMemberTable.Kind kind, List<Content> summaryTreeList) {\n-        SortedSet<? extends Element> members = asSortedSet(visibleMemberTable.getVisibleMembers(kind));\n-        if (!members.isEmpty()) {\n-            for (Element member : members) {\n-                final Element property = pHelper.getPropertyElement(member);\n-                if (property != null && member instanceof ExecutableElement ee) {\n-                    configuration.cmtUtils.updatePropertyMethodComment(ee, property);\n-                }\n-                if (utils.isMethod(member)) {\n-                    var docFinder = utils.docFinder();\n-                    Optional<List<? extends DocTree>> r = docFinder.search((ExecutableElement) member, (m -> {\n-                        var firstSentenceTrees = utils.getFirstSentenceTrees(m);\n-                        Optional<List<? extends DocTree>> optional = firstSentenceTrees.isEmpty() ? Optional.empty() : Optional.of(firstSentenceTrees);\n-                        return DocFinder.Result.fromOptional(optional);\n-                    })).toOptional();\n-                    \/\/ The fact that we use `member` for possibly unrelated tags is suspicious\n-                    writer.addMemberSummary(typeElement, member, r.orElse(List.of()));\n-                } else {\n-                    writer.addMemberSummary(typeElement, member, utils.getFirstSentenceTrees(member));\n-                }\n-            }\n-            summaryTreeList.add(writer.getSummaryTable(typeElement));\n-        }\n-    }\n-\n-    \/**\n-     * Build the inherited member summary for the given methods.\n-     *\n-     * @param writer the writer for this member summary.\n-     * @param kind the kind of members to document.\n-     * @param targets the list of contents to which the documentation will be added\n-     *\/\n-    private void buildInheritedSummary(AbstractMemberWriter writer,\n-                                       VisibleMemberTable.Kind kind, List<Content> targets) {\n-        SortedSet<? extends Element> inheritedMembersFromMap = asSortedSet(visibleMemberTable.getAllVisibleMembers(kind));\n-\n-        for (TypeElement inheritedClass : visibleMemberTable.getVisibleTypeElements()) {\n-            if (!(utils.isPublic(inheritedClass) || utils.isLinkable(inheritedClass))) {\n-                continue;\n-            }\n-            if (Objects.equals(inheritedClass, typeElement)) {\n-                continue;\n-            }\n-            if (utils.hasHiddenTag(inheritedClass)) {\n-                continue;\n-            }\n@@ -522,25 +318,4 @@\n-            List<? extends Element> members = inheritedMembersFromMap.stream()\n-                    .filter(e -> Objects.equals(utils.getEnclosingTypeElement(e), inheritedClass))\n-                    .toList();\n-\n-            if (!members.isEmpty()) {\n-                SortedSet<Element> inheritedMembers = new TreeSet<>(summariesComparator);\n-                inheritedMembers.addAll(members);\n-                Content inheritedHeader = writer.getInheritedSummaryHeader(inheritedClass);\n-                Content links = writer.getInheritedSummaryLinks();\n-                addSummaryFootNote(inheritedClass, inheritedMembers, links, writer);\n-                inheritedHeader.add(links);\n-                targets.add(inheritedHeader);\n-            }\n-        }\n-    }\n-\n-    private void addSummaryFootNote(TypeElement inheritedClass, Iterable<Element> inheritedMembers,\n-                                    Content links, AbstractMemberWriter writer) {\n-        boolean isFirst = true;\n-        for (var iterator = inheritedMembers.iterator(); iterator.hasNext(); ) {\n-            var member = iterator.next();\n-            TypeElement t = utils.isUndocumentedEnclosure(inheritedClass)\n-                    ? typeElement : inheritedClass;\n-            writer.addInheritedMemberSummary(t, member, isFirst, !iterator.hasNext(), links);\n-            isFirst = false;\n+        var f = configuration.getWriterFactory();\n+        for (var k : AbstractMemberWriter.summaryKinds) {\n+            var writer = f.newMemberWriter(this, k);\n+            writer.buildSummary(summariesList);\n@@ -548,1 +323,0 @@\n-    }\n@@ -550,4 +324,1 @@\n-    private SortedSet<? extends Element> asSortedSet(Collection<? extends Element> members) {\n-        SortedSet<Element> out = new TreeSet<>(summariesComparator);\n-        out.addAll(members);\n-        return out;\n+        classContent.add(getMemberSummary(summariesList));\n@@ -560,1 +331,0 @@\n-     * @throws DocletException if there is a problem while building the documentation\n@@ -562,1 +332,1 @@\n-    protected void buildMemberDetails(Content classContent) throws DocletException {\n+    protected void buildMemberDetails(Content classContent) {\n@@ -565,6 +335,5 @@\n-        buildEnumConstantsDetails(detailsList);\n-        buildPropertyDetails(detailsList);\n-        buildFieldDetails(detailsList);\n-        buildConstructorDetails(detailsList);\n-        buildAnnotationTypeMemberDetails(detailsList);\n-        buildMethodDetails(detailsList);\n+        var f = configuration.getWriterFactory();\n+        for (var k : AbstractMemberWriter.detailKinds) {\n+            var writer = f.newMemberWriter(this, k);\n+            writer.buildDetails(detailsList);\n+        }\n@@ -575,71 +344,0 @@\n-    \/**\n-     * Build the enum constants documentation.\n-     *\n-     * @param detailsList the content to which the documentation will be added\n-     *\/\n-    protected void buildEnumConstantsDetails(Content detailsList) {\n-        var writerFactory = configuration.getWriterFactory();\n-        var enumConstantWriter = writerFactory.getEnumConstantWriter(this);\n-        enumConstantWriter.build(detailsList);\n-    }\n-\n-    \/**\n-     * Build the field documentation.\n-     *\n-     * @param detailsList the content to which the documentation will be added\n-     * @throws DocletException if there is a problem while building the documentation\n-     *\/\n-    protected void buildFieldDetails(Content detailsList) throws DocletException {\n-        var writerFactory = configuration.getWriterFactory();\n-        var fieldWriter = writerFactory.getFieldWriter(this);\n-        fieldWriter.build(detailsList);\n-    }\n-\n-    \/**\n-     * Build the property documentation.\n-     *\n-     * @param detailsList the content to which the documentation will be added\n-     *\/\n-    public void buildPropertyDetails( Content detailsList) {\n-        var writerFactory = configuration.getWriterFactory();\n-        var propertyWriter = writerFactory.getPropertyWriter(this);\n-        propertyWriter.build(detailsList);\n-    }\n-\n-    \/**\n-     * Build the constructor documentation.\n-     *\n-     * @param detailsList the content to which the documentation will be added\n-     * @throws DocletException if there is a problem while building the documentation\n-     *\/\n-    protected void buildConstructorDetails(Content detailsList) throws DocletException {\n-        var writerFactory = configuration.getWriterFactory();\n-        var constructorWriter = writerFactory.getConstructorWriter(this);\n-        constructorWriter.build(detailsList);\n-    }\n-\n-    \/**\n-     * Build the method documentation.\n-     *\n-     * @param detailsList the content to which the documentation will be added\n-     * @throws DocletException if there is a problem while building the documentation\n-     *\/\n-    protected void buildMethodDetails(Content detailsList) throws DocletException {\n-        var writerFactory = configuration.getWriterFactory();\n-        var methodWriter = writerFactory.getMethodWriter(this);\n-        methodWriter.build(detailsList);\n-    }\n-\n-    \/**\n-     * Build the annotation type optional member documentation.\n-     *\n-     * @param target the content to which the documentation will be added\n-     * @throws DocletException if there is a problem building the documentation\n-     *\/\n-    protected void buildAnnotationTypeMemberDetails(Content target)\n-            throws DocletException {\n-        var writerFactory = configuration.getWriterFactory();\n-        var annotationTypeMemberWriter = writerFactory.getAnnotationTypeMemberWriter(this);\n-        annotationTypeMemberWriter.build(target);\n-    }\n-\n@@ -737,6 +435,0 @@\n-\n-    }\n-\n-    \/\/ TODO: inline this\n-    public Content getOutputInstance() {\n-        return new ContentBuilder();\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassWriter.java","additions":19,"deletions":327,"binary":false,"changes":346,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.DocletException;\n@@ -65,1 +64,1 @@\n-        super(writer, writer.getTypeElement());\n+        super(writer, writer.typeElement, VisibleMemberTable.Kind.CONSTRUCTORS);\n@@ -85,1 +84,2 @@\n-    public void build(Content target) throws DocletException {\n+    @Override\n+    public void buildDetails(Content target) {\n@@ -181,1 +181,1 @@\n-    public void addSummary(Content summariesList, Content content) {\n+    public void buildSummary(Content summariesList, Content content) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ConstructorWriter.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        super(classWriter, classWriter.typeElement);\n+        super(classWriter, classWriter.typeElement, VisibleMemberTable.Kind.ENUM_CONSTANTS);\n@@ -57,1 +57,2 @@\n-    public void build(Content target) {\n+    @Override\n+    public void buildDetails(Content target) {\n@@ -150,1 +151,1 @@\n-    public void addSummary(Content summariesList, Content content) {\n+    public void buildSummary(Content summariesList, Content content) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/EnumConstantWriter.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.DocletException;\n@@ -56,1 +55,1 @@\n-        super(writer, writer.typeElement);\n+        super(writer, VisibleMemberTable.Kind.FIELDS);\n@@ -60,1 +59,1 @@\n-        super(writer, typeElement);\n+        super(writer, typeElement, VisibleMemberTable.Kind.FIELDS);\n@@ -68,1 +67,2 @@\n-    public void build(Content target) throws DocletException {\n+    @Override\n+    public void buildDetails(Content target) {\n@@ -159,1 +159,1 @@\n-    public void addSummary(Content summariesList, Content content) {\n+    public void buildSummary(Content summariesList, Content content) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/FieldWriter.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -189,1 +189,1 @@\n-    private Set<PackageElement> containingPackagesSeen;\n+    private final Set<PackageElement> containingPackagesSeen;\n@@ -242,0 +242,1 @@\n+    @Override\n@@ -283,1 +284,1 @@\n-     * @see {@link ClassWriter#copyDocFiles()}\n+     * @see ClassWriter#copyDocFiles()\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlConfiguration.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -104,0 +104,5 @@\n+    \/**\n+     * Factory for page- and member-writers.\n+     *\/\n+    private WriterFactory writerFactory;\n+\n@@ -114,0 +119,1 @@\n+        writerFactory = configuration.getWriterFactory();\n@@ -206,2 +212,0 @@\n-     * For new format.\n-     *\n@@ -215,2 +219,2 @@\n-        new ConstantsSummaryWriter(configuration).build();\n-        new SerializedFormWriter(configuration).build();\n+        writerFactory.newConstantsSummaryWriter().build();\n+        writerFactory.newSerializedFormWriter().build();\n@@ -398,1 +402,1 @@\n-            new ClassWriter(configuration, te, classTree).build();\n+            writerFactory.newClassWriter(te, classTree).build();\n@@ -407,1 +411,1 @@\n-                new ModuleWriter(configuration, mdle).build();\n+                writerFactory.newModuleWriter(mdle).build();\n@@ -422,1 +426,1 @@\n-                new PackageWriter(configuration, pkg).build();\n+                writerFactory.newPackageWriter(pkg).build();\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDoclet.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2042,1 +2042,1 @@\n-            DocFilesHandler docFilesHandler = configuration.getWriterFactory().getDocFilesHandler(element);\n+            DocFilesHandler docFilesHandler = configuration.getWriterFactory().newDocFilesHandler(element);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.Links;\n@@ -80,0 +79,1 @@\n+    @Override\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlIndexBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.DocletException;\n@@ -67,1 +66,1 @@\n-        super(writer, writer.typeElement);\n+        super(writer, writer.typeElement, VisibleMemberTable.Kind.METHODS);\n@@ -77,1 +76,1 @@\n-        super(writer, typeElement);\n+        super(writer, typeElement, VisibleMemberTable.Kind.METHODS);\n@@ -90,1 +89,2 @@\n-    public void build(Content target) throws DocletException {\n+    @Override\n+    public void buildDetails(Content target) {\n@@ -185,1 +185,1 @@\n-    public void addSummary(Content summariesList, Content content) {\n+    public void buildSummary(Content summariesList, Content content) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/MethodWriter.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -189,1 +189,1 @@\n-        var docFilesHandler = configuration.getWriterFactory().getDocFilesHandler(mdle);\n+        var docFilesHandler = configuration.getWriterFactory().newDocFilesHandler(mdle);\n@@ -612,1 +612,1 @@\n-     * @param li\n+     * @param li the tree to which the summary will be added\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ModuleWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable;\n@@ -45,2 +46,2 @@\n-    public NestedClassWriter(SubWriterHolderWriter writer, TypeElement typeElement) {\n-        super(writer, typeElement);\n+    public NestedClassWriter(ClassWriter writer) {\n+        super(writer, VisibleMemberTable.Kind.NESTED_CLASSES);\n@@ -49,0 +50,1 @@\n+    \/\/ used in ClassUseWriter and SummaryUseWriter\n@@ -53,0 +55,5 @@\n+    @Override\n+    public void buildDetails(Content target) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n@@ -63,1 +70,1 @@\n-    public void addSummary(Content summariesList, Content content) {\n+    public void buildSummary(Content summariesList, Content content) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/NestedClassWriter.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-                .getDocFilesHandler(packageElement);\n+                .newDocFilesHandler(packageElement);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PackageWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-        super(writer, writer.typeElement);\n+        super(writer, writer.typeElement, VisibleMemberTable.Kind.PROPERTIES);\n@@ -62,1 +62,2 @@\n-    public void build(Content target) {\n+    @Override\n+    public void buildDetails(Content target) {\n@@ -168,1 +169,1 @@\n-    public void addSummary(Content summariesList, Content content) {\n+    public void buildSummary(Content summariesList, Content content) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PropertyWriter.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.PropertyUtils;\n@@ -68,0 +69,4 @@\n+    public PropertyUtils.PropertyHelper getPropertyHelper() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n@@ -297,9 +302,0 @@\n-    \/**\n-     * {@return the member details}\n-     *\n-     * @param content the content used to generate the member details\n-     *\/\n-    public Content getMemberDetailsContent(Content content) {\n-        return HtmlTree.SECTION(HtmlStyle.details, content);\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SubWriterHolderWriter.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -355,0 +355,1 @@\n+    @Override\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Table.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-\/\/ TODO: be more consistent about using this factory\n@@ -44,0 +43,1 @@\n+\n@@ -48,1 +48,4 @@\n-    public ConstantsSummaryWriter getConstantsSummaryWriter() {\n+    \/**\n+     * {@return a new {@link ConstantsSummaryWriter}}\n+     *\/\n+    public ConstantsSummaryWriter newConstantsSummaryWriter() {\n@@ -52,1 +55,4 @@\n-    public PackageWriter getPackageSummaryWriter(PackageElement packageElement) {\n+    \/**\n+     * {@return a new {@link PackageWriter}}\n+     *\/\n+    public PackageWriter newPackageWriter(PackageElement packageElement) {\n@@ -56,1 +62,4 @@\n-    public ModuleWriter getModuleSummaryWriter(ModuleElement mdle) {\n+    \/**\n+     * {@return a new {@link ModuleWriter}}\n+     *\/\n+    public ModuleWriter newModuleWriter(ModuleElement mdle) {\n@@ -60,1 +69,4 @@\n-    public ClassWriter getClassWriter(TypeElement typeElement, ClassTree classTree) {\n+    \/**\n+     * {@return a new {@link ClassWriter}}\n+     *\/\n+    public ClassWriter newClassWriter(TypeElement typeElement, ClassTree classTree) {\n@@ -63,64 +75,4 @@\n-\n-    public AnnotationTypeMemberWriter getAnnotationTypeMemberWriter(\n-            ClassWriter classWriter) {\n-        TypeElement te = classWriter.getTypeElement();\n-        return new AnnotationTypeMemberWriter(classWriter, te, AnnotationTypeMemberWriter.Kind.ANY);\n-    }\n-\n-    public AnnotationTypeMemberWriter getAnnotationTypeOptionalMemberWriter(\n-            ClassWriter classWriter) {\n-        TypeElement te = classWriter.getTypeElement();\n-        return new AnnotationTypeMemberWriter(classWriter, te, AnnotationTypeMemberWriter.Kind.OPTIONAL);\n-    }\n-\n-    public AnnotationTypeMemberWriter getAnnotationTypeRequiredMemberWriter(\n-            ClassWriter classWriter) {\n-        TypeElement te = classWriter.getTypeElement();\n-        return new AnnotationTypeMemberWriter(classWriter, te, AnnotationTypeMemberWriter.Kind.REQUIRED);\n-    }\n-\n-    public EnumConstantWriter getEnumConstantWriter(ClassWriter classWriter) {\n-        return new EnumConstantWriter(classWriter);\n-    }\n-\n-    public FieldWriter getFieldWriter(ClassWriter classWriter) {\n-        return new FieldWriter(classWriter);\n-    }\n-\n-    public PropertyWriter getPropertyWriter(ClassWriter classWriter) {\n-        return new PropertyWriter(classWriter);\n-    }\n-\n-    public MethodWriter getMethodWriter(ClassWriter classWriter) {\n-        return new MethodWriter(classWriter);\n-    }\n-\n-    public ConstructorWriter getConstructorWriter(ClassWriter classWriter) {\n-        return new ConstructorWriter(classWriter);\n-    }\n-\n-    public AbstractMemberWriter getMemberSummaryWriter(ClassWriter classWriter,\n-                                                       VisibleMemberTable.Kind memberType) {\n-        switch (memberType) {\n-            case CONSTRUCTORS:\n-                return getConstructorWriter(classWriter);\n-            case ENUM_CONSTANTS:\n-                return getEnumConstantWriter(classWriter);\n-            case ANNOTATION_TYPE_MEMBER_OPTIONAL:\n-                return getAnnotationTypeOptionalMemberWriter(classWriter);\n-            case ANNOTATION_TYPE_MEMBER_REQUIRED:\n-                return getAnnotationTypeRequiredMemberWriter(classWriter);\n-            case FIELDS:\n-                return getFieldWriter(classWriter);\n-            case PROPERTIES:\n-                return getPropertyWriter(classWriter);\n-            case NESTED_CLASSES:\n-                return new NestedClassWriter(classWriter, classWriter.getTypeElement());\n-            case METHODS:\n-                return getMethodWriter(classWriter);\n-            default:\n-                return null;\n-        }\n-    }\n-\n-    public SerializedFormWriter getSerializedFormWriter() {\n+    \/**\n+     * {@return a new {@link SerializedFormWriter}}\n+     *\/\n+    public SerializedFormWriter newSerializedFormWriter() {\n@@ -130,1 +82,27 @@\n-    public DocFilesHandler getDocFilesHandler(Element element) {\n+    \/**\n+     * Returns a new member writer for the members of a given class and given kind.\n+     *\n+     * @param classWriter the writer for the enclosing class\n+     * @param kind the kind\n+     *\n+     * @return the writer\n+     *\/\n+    public AbstractMemberWriter newMemberWriter(ClassWriter classWriter,\n+                                                VisibleMemberTable.Kind kind) {\n+        return switch (kind) {\n+            case ANNOTATION_TYPE_MEMBER,\n+                    ANNOTATION_TYPE_MEMBER_OPTIONAL,\n+                    ANNOTATION_TYPE_MEMBER_REQUIRED -> new AnnotationTypeMemberWriter(classWriter, kind);\n+            case CONSTRUCTORS -> new ConstructorWriter(classWriter);\n+            case ENUM_CONSTANTS -> new EnumConstantWriter(classWriter);\n+            case FIELDS -> new FieldWriter(classWriter);\n+            case NESTED_CLASSES -> new NestedClassWriter(classWriter);\n+            case METHODS -> new MethodWriter(classWriter);\n+            case PROPERTIES -> new PropertyWriter(classWriter);\n+        };\n+    }\n+\n+    \/**\n+     * {@return a new {@link DocFilesHandler}}\n+     *\/\n+    public DocFilesHandler newDocFilesHandler(Element element) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/WriterFactory.java","additions":48,"deletions":70,"binary":false,"changes":118,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-             8242056 8261976 8223358\n+             8242056 8261976 8223358 8313204\n@@ -188,0 +188,18 @@\n+\n+    @Test\n+    public void testSectionOrdering() {\n+        javadoc(\"-d\", \"out-3\",\n+                \"-linksource\",\n+                \"--no-platform-links\",\n+                \"-sourcepath\", testSrc,\n+                \"pkg\");\n+        checkExit(Exit.OK);\n+\n+        checkOrder(\"pkg\/AnnotationTypeField.html\",\n+                \"<ul class=\\\"summary-list\\\">\",\n+                \"<section class=\\\"field-summary\\\" id=\\\"field-summary\\\">\",\n+                \"<section class=\\\"member-summary\\\" id=\\\"annotation-interface-optional-element-summary\\\">\",\n+                \"<ul class=\\\"details-list\\\">\",\n+                \"<section class=\\\"field-details\\\" id=\\\"field-detail\\\">\",\n+                \"<section class=\\\"detail\\\" id=\\\"DEFAULT_NAME\\\">\");\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testAnnotationTypes\/TestAnnotationTypes.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8157000 8192850 8182765 8223607 8261976 8281376\n+ * @bug 8157000 8192850 8182765 8223607 8261976 8281376 8313204\n@@ -81,7 +81,0 @@\n-                \/\/ Check properties\n-                \"\"\"\n-                    Properties declared in class&nbsp;pkg5.<a href=\"Classes.P.html\"\"\",\n-                \"Classes.P\",\n-                \"\"\"\n-                    Classes.P.html#rateProperty\">rate\"\"\",\n-\n@@ -98,0 +91,7 @@\n+                \/\/ Check properties\n+                \"\"\"\n+                    Properties declared in class&nbsp;pkg5.<a href=\"Classes.P.html\"\"\",\n+                \"Classes.P\",\n+                \"\"\"\n+                    Classes.P.html#rateProperty\">rate\"\"\",\n+\n@@ -223,4 +223,0 @@\n-                \/\/ Check properties\n-                \"\"\"\n-                    Properties declared in interface&nbsp;pkg5.<a href=\"Interfaces.A.html\" title=\"interface in pkg5\">Interfaces.A<\/a>\"\"\",\n-\n@@ -233,0 +229,4 @@\n+                \/\/ Check properties\n+                \"\"\"\n+                    Properties declared in interface&nbsp;pkg5.<a href=\"Interfaces.A.html\" title=\"interface in pkg5\">Interfaces.A<\/a>\"\"\",\n+\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testOverriddenMethods\/TestOverrideMethods.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"}]}