{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,41 +62,0 @@\n-#if TASKQUEUE_STATS\n-uint G1YoungCollector::num_task_queues() const {\n-  return task_queues()->size();\n-}\n-\n-void G1YoungCollector::print_taskqueue_stats_hdr(outputStream* const st) {\n-  st->print_raw_cr(\"GC Task Stats\");\n-  st->print_raw(\"thr \"); TaskQueueStats::print_header(1, st); st->cr();\n-  st->print_raw(\"--- \"); TaskQueueStats::print_header(2, st); st->cr();\n-}\n-\n-void G1YoungCollector::print_taskqueue_stats() const {\n-  if (!log_is_enabled(Trace, gc, task, stats)) {\n-    return;\n-  }\n-  Log(gc, task, stats) log;\n-  ResourceMark rm;\n-  LogStream ls(log.trace());\n-  outputStream* st = &ls;\n-\n-  print_taskqueue_stats_hdr(st);\n-\n-  TaskQueueStats totals;\n-  const uint n = num_task_queues();\n-  for (uint i = 0; i < n; ++i) {\n-    st->print(\"%3u \", i); _g1h->task_queue(i)->stats.print(st); st->cr();\n-    totals += _g1h->task_queue(i)->stats;\n-  }\n-  st->print_raw(\"tot \"); totals.print(st); st->cr();\n-\n-  DEBUG_ONLY(totals.verify());\n-}\n-\n-void G1YoungCollector::reset_taskqueue_stats() {\n-  const uint n = num_task_queues();\n-  for (uint i = 0; i < n; ++i) {\n-    _g1h->task_queue(i)->stats.reset();\n-  }\n-}\n-#endif \/\/ TASKQUEUE_STATS\n-\n@@ -1150,2 +1109,1 @@\n-  TASKQUEUE_STATS_ONLY(print_taskqueue_stats());\n-  TASKQUEUE_STATS_ONLY(reset_taskqueue_stats());\n+  TASKQUEUE_STATS_ONLY(_g1h->task_queues()->print_and_reset_taskqueue_stats(\"Oop Queue\");)\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":2,"deletions":44,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -137,7 +137,0 @@\n-#if TASKQUEUE_STATS\n-  uint num_task_queues() const;\n-  static void print_taskqueue_stats_hdr(outputStream* const st);\n-  void print_taskqueue_stats() const;\n-  void reset_taskqueue_stats();\n-#endif \/\/ TASKQUEUE_STATS\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.hpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -150,2 +150,1 @@\n-void\n-PSPromotionManager::print_taskqueue_stats() {\n+void PSPromotionManager::print_taskqueue_stats() {\n@@ -158,3 +157,0 @@\n-  outputStream* out = &ls;\n-  out->print_cr(\"== GC Tasks Stats, GC %3d\",\n-                ParallelScavengeHeap::heap()->total_collections());\n@@ -162,9 +158,1 @@\n-  TaskQueueStats totals;\n-  out->print(\"thr \"); TaskQueueStats::print_header(1, out); out->cr();\n-  out->print(\"--- \"); TaskQueueStats::print_header(2, out); out->cr();\n-  for (uint i = 0; i < ParallelGCThreads; ++i) {\n-    TaskQueueStats& next = manager_array(i)->_claimed_stack_depth.stats;\n-    out->print(\"%3d \", i); next.print(out); out->cr();\n-    totals += next;\n-  }\n-  out->print(\"tot \"); totals.print(out); out->cr();\n+  stack_array_depth()->print_taskqueue_stats(&ls, \"Oop Queue\");\n@@ -173,1 +161,1 @@\n-  for (uint i = 0; i < hlines; ++i) out->print_cr(\"%s\", pm_stats_hdr[i]);\n+  for (uint i = 0; i < hlines; ++i) ls.print_cr(\"%s\", pm_stats_hdr[i]);\n@@ -175,1 +163,1 @@\n-    manager_array(i)->print_local_stats(out, i);\n+    manager_array(i)->print_local_stats(&ls, i);\n@@ -179,2 +167,1 @@\n-void\n-PSPromotionManager::reset_stats() {\n+void PSPromotionManager::reset_stats() {\n@@ -219,2 +206,0 @@\n-  ParallelScavengeHeap* heap = ParallelScavengeHeap::heap();\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionManager.cpp","additions":6,"deletions":21,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -476,0 +476,12 @@\n+\n+#if TASKQUEUE_STATS\n+private:\n+  static void print_taskqueue_stats_hdr(outputStream* const st, const char* label);\n+public:\n+  void print_taskqueue_stats(outputStream* const st, const char* label);\n+  void reset_taskqueue_stats();\n+\n+  \/\/ Prints taskqueue set statistics into gc+task+stats=trace and resets\n+  \/\/ its statistics.\n+  void print_and_reset_taskqueue_stats(const char* label);\n+#endif \/\/ TASKQUEUE_STATS\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.hpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+#include \"logging\/log.hpp\"\n+#include \"logging\/logStream.hpp\"\n@@ -31,0 +33,1 @@\n+#include \"memory\/resourceArea.hpp\"\n@@ -35,0 +38,1 @@\n+#include \"utilities\/ostream.hpp\"\n@@ -51,0 +55,45 @@\n+#if TASKQUEUE_STATS\n+template<class T, MEMFLAGS F>\n+void GenericTaskQueueSet<T, F>::print_taskqueue_stats_hdr(outputStream* const st, const char* label) {\n+  st->print_cr(\"GC Task Stats %s\", label);\n+  st->print(\"thr \"); TaskQueueStats::print_header(1, st); st->cr();\n+  st->print(\"--- \"); TaskQueueStats::print_header(2, st); st->cr();\n+}\n+\n+template<class T, MEMFLAGS F>\n+void GenericTaskQueueSet<T, F>::print_taskqueue_stats(outputStream* const st, const char* label) {\n+  print_taskqueue_stats_hdr(st, label);\n+\n+  TaskQueueStats totals;\n+  const uint n = size();\n+  for (uint i = 0; i < n; ++i) {\n+    st->print(\"%3u \", i); queue(i)->stats.print(st); st->cr();\n+    totals += queue(i)->stats;\n+  }\n+  st->print_raw(\"tot \"); totals.print(st); st->cr();\n+\n+  DEBUG_ONLY(totals.verify());\n+}\n+\n+template<class T, MEMFLAGS F>\n+void GenericTaskQueueSet<T, F>::reset_taskqueue_stats() {\n+  const uint n = size();\n+  for (uint i = 0; i < n; ++i) {\n+    queue(i)->stats.reset();\n+  }\n+}\n+\n+template <class T, MEMFLAGS F>\n+inline void GenericTaskQueueSet<T, F>::print_and_reset_taskqueue_stats(const char* label) {\n+  if (!log_is_enabled(Trace, gc, task, stats)) {\n+    return;\n+  }\n+  Log(gc, task, stats) log;\n+  ResourceMark rm;\n+  LogStream ls(log.trace());\n+\n+  print_taskqueue_stats(&ls, label);\n+  reset_taskqueue_stats();\n+}\n+#endif \/\/ TASKQUEUE_STATS\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.inline.hpp","additions":50,"deletions":1,"binary":false,"changes":51,"status":"modified"}]}