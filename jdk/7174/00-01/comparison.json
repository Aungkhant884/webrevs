{"files":[{"patch":"@@ -1109,1 +1109,1 @@\n-  TASKQUEUE_STATS_ONLY(_g1h->print_and_reset_taskqueue_stats(_g1h->task_queues(), \"Oop Queue\");)\n+  TASKQUEUE_STATS_ONLY(_g1h->task_queues()->print_and_reset_taskqueue_stats(\"Oop Queue\");)\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -467,5 +467,0 @@\n-#if TASKQUEUE_STATS\n-  template <class T, MEMFLAGS F>\n-  void print_and_reset_taskqueue_stats(GenericTaskQueueSet<T, F>* queue_set, const char* label) const;\n-#endif \/\/ TASKQUEUE_STATS\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,4 +31,0 @@\n-#include \"gc\/shared\/taskqueue.inline.hpp\"\n-#include \"logging\/log.hpp\"\n-#include \"logging\/logStream.hpp\"\n-#include \"memory\/resourceArea.hpp\"\n@@ -53,15 +49,0 @@\n-#if TASKQUEUE_STATS\n-template <class T, MEMFLAGS F>\n-inline void CollectedHeap::print_and_reset_taskqueue_stats(GenericTaskQueueSet<T, F>* queue_set, const char* label) const {\n-  if (!log_is_enabled(Trace, gc, task, stats)) {\n-    return;\n-  }\n-  Log(gc, task, stats) log;\n-  ResourceMark rm;\n-  LogStream ls(log.trace());\n-\n-  queue_set->print_taskqueue_stats(&ls, label);\n-  queue_set->reset_taskqueue_stats();\n-}\n-#endif \/\/ TASKQUEUE_STATS\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.inline.hpp","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -483,0 +483,4 @@\n+\n+  \/\/ Prints taskqueue set statistics into gc+task+stats=trace and resets\n+  \/\/ its statistics.\n+  void print_and_reset_taskqueue_stats(const char* label);\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+#include \"logging\/log.hpp\"\n+#include \"logging\/logStream.hpp\"\n@@ -83,0 +85,13 @@\n+\n+template <class T, MEMFLAGS F>\n+inline void GenericTaskQueueSet<T, F>::print_and_reset_taskqueue_stats(const char* label) {\n+  if (!log_is_enabled(Trace, gc, task, stats)) {\n+    return;\n+  }\n+  Log(gc, task, stats) log;\n+  ResourceMark rm;\n+  LogStream ls(log.trace());\n+\n+  print_taskqueue_stats(&ls, label);\n+  reset_taskqueue_stats();\n+}\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.inline.hpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}