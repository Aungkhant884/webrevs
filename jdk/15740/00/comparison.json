{"files":[{"patch":"@@ -508,1 +508,5 @@\n-        return \"MemorySegment{ heapBase: \" + heapBase() + \" address: 0x\" + Long.toHexString(address()) + \" byteSize: \" + length + \" }\";\n+        return \"MemorySegment{ \" +\n+                heapBase().map(hb -> \"heapBase: \" + hb + \", \").orElse(\"\") +\n+                \"address: \" + Utils.toHexString(address()) +\n+                \", byteSize: \" + length +\n+                \" }\";\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -276,0 +276,5 @@\n+\n+    public static String toHexString(long value) {\n+        return \"0x\" + Long.toHexString(value);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -228,0 +228,15 @@\n+    @Test(dataProvider = \"segmentFactories\")\n+    public void testToString(Supplier<MemorySegment> segmentSupplier) {\n+        var segment = segmentSupplier.get();\n+        String s = segment.toString();\n+        assertTrue(s.startsWith(\"MemorySegment{\"));\n+        assertTrue(s.contains(\"address: 0x\"));\n+        assertTrue(s.contains(\"byteSize: \"));\n+        if (segment.heapBase().isPresent()) {\n+            assertTrue(s.contains(\"heapBase: [\"));\n+        } else {\n+            assertFalse(s.contains(\"heapBase: \"));\n+        }\n+        assertFalse(s.contains(\"Optional\"));\n+    }\n+\n@@ -236,1 +251,1 @@\n-                () -> MemorySegment.ofArray(new long[] { 1l, 2l, 3l, 4l } ),\n+                () -> MemorySegment.ofArray(new long[] { 1L, 2L, 3L, 4L } ),\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"}]}