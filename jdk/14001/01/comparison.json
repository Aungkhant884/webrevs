{"files":[{"patch":"@@ -41,0 +41,1 @@\n+ *                 jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$CloseableCompilationTask\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaProxyCallerIsHidden.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,1 +55,2 @@\n-        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$MemoryJavaFileObject\"\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$MemoryJavaFileObject\",\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$CloseableCompilationTask\"\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/RedefineCallerClassTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+ *                 jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$CloseableCompilationTask\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/RegularHiddenClass.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,2 @@\n-        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$MemoryJavaFileObject\"\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$MemoryJavaFileObject\",\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$CloseableCompilationTask\"\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/redefineClass\/RedefineBasicTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -51,1 +51,2 @@\n-        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$MemoryJavaFileObject\"\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$MemoryJavaFileObject\",\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$CloseableCompilationTask\"\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/redefineClass\/RedefineRunningMethods_Shared.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.io.Closeable;\n@@ -29,0 +30,1 @@\n+import java.io.Writer;\n@@ -34,0 +36,1 @@\n+import java.util.concurrent.Callable;\n@@ -35,1 +38,1 @@\n-import javax.tools.ForwardingJavaFileManager;\n+import javax.tools.DiagnosticListener;\n@@ -37,0 +40,1 @@\n+import javax.tools.ForwardingJavaFileManager;\n@@ -171,1 +175,2 @@\n-     * @throws RuntimeException if the compilation did not succeed\n+     * @throws RuntimeException if the compilation did not succeed or if closing\n+     *         the {@code JavaFileManager} used for the compilation did not succeed\n@@ -176,1 +181,4 @@\n-        CompilationTask task = getCompilationTask(file, options);\n+        try (CloseableCompilationTask task = getCompilationTask(file, options)) {\n+            if(!task.call()) {\n+                throw new RuntimeException(\"Could not compile \" + className + \" with source code \" + sourceCode);\n+            }\n@@ -178,2 +186,1 @@\n-        if(!task.call()) {\n-            throw new RuntimeException(\"Could not compile \" + className + \" with source code \" + sourceCode);\n+            return file.getByteCode();\n@@ -181,2 +188,0 @@\n-\n-        return file.getByteCode();\n@@ -189,1 +194,1 @@\n-    private static CompilationTask getCompilationTask(MemoryJavaFileObject file, String... options) {\n+    private static CloseableCompilationTask getCompilationTask(MemoryJavaFileObject file, String... options) {\n@@ -199,1 +204,39 @@\n-        return getCompiler().getTask(null, new FileManagerWrapper(file, moduleOverride), null, opts, null, Arrays.asList(file));\n+        return CloseableCompilationTask.createTask(null, new FileManagerWrapper(file, moduleOverride), null, opts, null, Arrays.asList(file));\n+    }\n+\n+    private static class CloseableCompilationTask implements Closeable, Callable<Boolean> {\n+        final CompilationTask task;\n+        final JavaFileManager fileManager;\n+        private CloseableCompilationTask(CompilationTask task, JavaFileManager fileManager) {\n+            this.task = task;\n+            this.fileManager = fileManager;\n+        }\n+\n+        public static CloseableCompilationTask createTask(Writer out,\n+                                                          JavaFileManager fileManager,\n+                                                          DiagnosticListener<? super JavaFileObject> diagnosticListener,\n+                                                          Iterable<String> options,\n+                                                          Iterable<String> classes,\n+                                                          Iterable<? extends JavaFileObject> compilationUnits) {\n+            CompilationTask task = getCompiler().getTask(out,\n+                                                         fileManager,\n+                                                         diagnosticListener,\n+                                                         options,\n+                                                         classes,\n+                                                         compilationUnits);\n+            return new CloseableCompilationTask(task, fileManager);\n+        }\n+\n+        @Override\n+        public void close() {\n+            try {\n+                fileManager.close();\n+            } catch (IOException ioe) {\n+                throw new RuntimeException(ioe);\n+            }\n+        }\n+\n+        @Override\n+        public Boolean call() {\n+            return task.call();\n+        }\n","filename":"test\/lib\/jdk\/test\/lib\/compiler\/InMemoryJavaCompiler.java","additions":53,"deletions":10,"binary":false,"changes":63,"status":"modified"}]}