{"files":[{"patch":"@@ -41,1 +41,0 @@\n- *                 jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$CloseableCompilationTask\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaProxyCallerIsHidden.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,2 +55,1 @@\n-        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$MemoryJavaFileObject\",\n-        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$CloseableCompilationTask\"\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$MemoryJavaFileObject\"\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/RedefineCallerClassTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n- *                 jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$CloseableCompilationTask\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/RegularHiddenClass.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,2 +50,1 @@\n-        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$MemoryJavaFileObject\",\n-        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$CloseableCompilationTask\"\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$MemoryJavaFileObject\"\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/redefineClass\/RedefineBasicTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -51,2 +51,1 @@\n-        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$MemoryJavaFileObject\",\n-        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$CloseableCompilationTask\"\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$MemoryJavaFileObject\"\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/redefineClass\/RedefineRunningMethods_Shared.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.io.Closeable;\n@@ -30,1 +29,0 @@\n-import java.io.Writer;\n@@ -36,1 +34,0 @@\n-import java.util.concurrent.Callable;\n@@ -38,1 +35,0 @@\n-import javax.tools.DiagnosticListener;\n@@ -181,14 +177,0 @@\n-        try (CloseableCompilationTask task = getCompilationTask(file, options)) {\n-            if (!task.call()) {\n-                throw new RuntimeException(\"Could not compile \" + className + \" with source code \" + sourceCode);\n-            }\n-\n-            return file.getByteCode();\n-        }\n-    }\n-\n-    private static JavaCompiler getCompiler() {\n-        return ToolProvider.getSystemJavaCompiler();\n-    }\n-\n-    private static CloseableCompilationTask getCompilationTask(MemoryJavaFileObject file, String... options) {\n@@ -204,32 +186,4 @@\n-        return CloseableCompilationTask.createTask(null, new FileManagerWrapper(file, moduleOverride), null, opts, null, Arrays.asList(file));\n-    }\n-\n-    private static class CloseableCompilationTask implements Closeable, Callable<Boolean> {\n-        final CompilationTask task;\n-        final JavaFileManager fileManager;\n-        private CloseableCompilationTask(CompilationTask task, JavaFileManager fileManager) {\n-            this.task = task;\n-            this.fileManager = fileManager;\n-        }\n-\n-        public static CloseableCompilationTask createTask(Writer out,\n-                                                          JavaFileManager fileManager,\n-                                                          DiagnosticListener<? super JavaFileObject> diagnosticListener,\n-                                                          Iterable<String> options,\n-                                                          Iterable<String> classes,\n-                                                          Iterable<? extends JavaFileObject> compilationUnits) {\n-            CompilationTask task = getCompiler().getTask(out,\n-                                                         fileManager,\n-                                                         diagnosticListener,\n-                                                         options,\n-                                                         classes,\n-                                                         compilationUnits);\n-            return new CloseableCompilationTask(task, fileManager);\n-        }\n-\n-        @Override\n-        public void close() {\n-            try {\n-                fileManager.close();\n-            } catch (IOException ioe) {\n-                throw new RuntimeException(ioe);\n+        try (JavaFileManager fileManager = new FileManagerWrapper(file, moduleOverride)) {\n+            CompilationTask task = getCompiler().getTask(null, fileManager, null, opts, null, Arrays.asList(file));\n+            if (!task.call()) {\n+                throw new RuntimeException(\"Could not compile \" + className + \" with source code \" + sourceCode);\n@@ -237,1 +191,0 @@\n-        }\n@@ -239,3 +192,3 @@\n-        @Override\n-        public Boolean call() {\n-            return task.call();\n+            return file.getByteCode();\n+        } catch (IOException ioe) {\n+            throw new RuntimeException(ioe);\n@@ -244,0 +197,4 @@\n+\n+    private static JavaCompiler getCompiler() {\n+        return ToolProvider.getSystemJavaCompiler();\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/compiler\/InMemoryJavaCompiler.java","additions":11,"deletions":54,"binary":false,"changes":65,"status":"modified"}]}