{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -921,0 +921,1 @@\n+                                            \"I\"                                                                                                \\\n@@ -948,0 +949,1 @@\n+                                             \"I\"                                                                                               \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1140,1 +1140,1 @@\n-\/\/              int length, Object base, long offset, M m,\n+\/\/              int length, Object base, long offset, M m, int offsetInRange,\n@@ -1151,1 +1151,1 @@\n-\/\/                  V v, M m,\n+\/\/                  V v, M m, int offsetInRange,\n@@ -1225,9 +1225,29 @@\n-  bool use_predicate = arch_supports_vector(is_store ? Op_StoreVectorMasked : Op_LoadVectorMasked,\n-                                            mem_num_elem, mem_elem_bt,\n-                                            (VectorMaskUseType) (VecMaskUseLoad | VecMaskUsePred));\n-  \/\/ Masked vector store operation needs the architecture predicate feature. We need to check\n-  \/\/ whether the predicated vector operation is supported by backend.\n-  if (is_store && !use_predicate) {\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: op=storeMasked vlen=%d etype=%s using_byte_array=%d\",\n-                    num_elem, type2name(elem_bt), using_byte_array ? 1 : 0);\n+  bool supports_predicate = arch_supports_vector(is_store ? Op_StoreVectorMasked : Op_LoadVectorMasked,\n+                                                mem_num_elem, mem_elem_bt,\n+                                                (VectorMaskUseType) (VecMaskUseLoad | VecMaskUsePred));\n+\n+  \/\/ If current arch does not support the predicated operations, we have to bail\n+  \/\/ out when current case uses the predicate feature.\n+  if (!supports_predicate) {\n+    const TypeInt* offset_in_range = gvn().type(is_store ? argument(9) : argument(8))->isa_int();\n+    if (!offset_in_range->is_con()) {\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** missing constant: offsetInRange=%s\",\n+                      is_store ? NodeClassNames[argument(9)->Opcode()]\n+                               : NodeClassNames[argument(8)->Opcode()]);\n+      }\n+      set_map(old_map);\n+      set_sp(old_sp);\n+      return false;\n+    }\n+\n+    \/\/ Masked vector load\/store with IOOBE always use the predicated load\/store instruction.\n+    if (offset_in_range->get_con() == 0) {\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** not supported: op=%s vlen=%d etype=%s using_byte_array=%d offset_in_range=0\",\n+                      is_store ? \"storeMasked\" : \"loadMasked\",\n+                      num_elem, type2name(elem_bt), using_byte_array ? 1 : 0);\n+      }\n+      set_map(old_map);\n+      set_sp(old_sp);\n+      return false;\n@@ -1235,3 +1255,0 @@\n-    set_map(old_map);\n-    set_sp(old_sp);\n-    return false;\n@@ -1240,7 +1257,13 @@\n-  \/\/ This only happens for masked vector load. If predicate is not supported, then check whether\n-  \/\/ the normal vector load and blend operations are supported by backend.\n-  if (!use_predicate && (!arch_supports_vector(Op_LoadVector, mem_num_elem, mem_elem_bt, VecMaskNotUsed) ||\n-      !arch_supports_vector(Op_VectorBlend, mem_num_elem, mem_elem_bt, VecMaskUseLoad))) {\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: op=loadMasked vlen=%d etype=%s using_byte_array=%d\",\n-                    num_elem, type2name(elem_bt), using_byte_array ? 1 : 0);\n+  \/\/ Check whether the vector blend pattern is supported or not if predicate is not supported.\n+  if (!supports_predicate) {\n+    if ((is_store && !arch_supports_vector(Op_StoreVector, mem_num_elem, mem_elem_bt, VecMaskNotUsed)) ||\n+        !arch_supports_vector(Op_LoadVector, mem_num_elem, mem_elem_bt, VecMaskNotUsed) ||\n+        !arch_supports_vector(Op_VectorBlend, mem_num_elem, mem_elem_bt, VecMaskUseLoad)) {\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** not supported: op=%s vlen=%d etype=%s using_byte_array=%d\",\n+                      is_store ? \"storeMasked\" : \"loadMasked\", num_elem,\n+                      type2name(elem_bt), using_byte_array ? 1 : 0);\n+      }\n+      set_map(old_map);\n+      set_sp(old_sp);\n+      return false;\n@@ -1248,3 +1271,0 @@\n-    set_map(old_map);\n-    set_sp(old_sp);\n-    return false;\n@@ -1293,0 +1313,14 @@\n+  Node* val = NULL;\n+  if (is_store) {\n+    val = unbox_vector(argument(7), vbox_type, elem_bt, num_elem);\n+    if (val == NULL) {\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** unbox failed vector=%s\",\n+                      NodeClassNames[argument(7)->Opcode()]);\n+      }\n+      set_map(old_map);\n+      set_sp(old_sp);\n+      return false; \/\/ operand unboxing failed\n+    }\n+  }\n+\n@@ -1304,0 +1338,9 @@\n+  if (using_byte_array) {\n+    \/\/ Reinterpret the vector mask to byte type.\n+    const TypeVect* from_mask_type = TypeVect::makemask(elem_bt, num_elem);\n+    const TypeVect* to_mask_type = TypeVect::makemask(mem_elem_bt, mem_num_elem);\n+    mask = gvn().transform(new VectorReinterpretNode(mask, from_mask_type, to_mask_type));\n+  }\n+\n+  const TypeVect* vt = TypeVect::make(elem_bt, num_elem);\n+  const TypeVect* mem_vt = TypeVect::make(mem_elem_bt, mem_num_elem);\n@@ -1306,10 +1349,0 @@\n-    Node* val = unbox_vector(argument(7), vbox_type, elem_bt, num_elem);\n-    if (val == NULL) {\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** unbox failed vector=%s\",\n-                      NodeClassNames[argument(7)->Opcode()]);\n-      }\n-      set_map(old_map);\n-      set_sp(old_sp);\n-      return false; \/\/ operand unboxing failed\n-    }\n@@ -1320,6 +1353,13 @@\n-      const TypeVect* to_vect_type = TypeVect::make(mem_elem_bt, mem_num_elem);\n-      val = gvn().transform(new VectorReinterpretNode(val, val->bottom_type()->is_vect(), to_vect_type));\n-      \/\/ Reinterpret the vector mask to byte type.\n-      const TypeVect* from_mask_type = TypeVect::makemask(elem_bt, num_elem);\n-      const TypeVect* to_mask_type = TypeVect::makemask(mem_elem_bt, mem_num_elem);\n-      mask = gvn().transform(new VectorReinterpretNode(mask, from_mask_type, to_mask_type));\n+      val = gvn().transform(new VectorReinterpretNode(val, val->bottom_type()->is_vect(), mem_vt));\n+    }\n+\n+    Node* vstore = NULL;\n+    if (supports_predicate) {\n+      \/\/ Generate masked store vector node if predicate feature is supported.\n+      vstore = gvn().transform(new StoreVectorMaskedNode(control(), memory(addr), addr, val, addr_type, mask));\n+    } else {\n+      \/\/ Use the vector blend to implement the masked store. The biased elements are the original\n+      \/\/ values in the memory.\n+      Node* mem_val = gvn().transform(LoadVectorNode::make(0, control(), memory(addr), addr, addr_type, mem_num_elem, mem_elem_bt));\n+      val = gvn().transform(new VectorBlendNode(mem_val, val, mask));\n+      vstore = gvn().transform(new StoreVectorNode(control(), memory(addr), addr, addr_type, val));\n@@ -1327,1 +1367,0 @@\n-    Node* vstore = gvn().transform(new StoreVectorMaskedNode(control(), memory(addr), addr, val, addr_type, mask));\n@@ -1332,8 +1371,1 @@\n-    if (using_byte_array) {\n-      \/\/ Reinterpret the vector mask to byte type.\n-      const TypeVect* from_mask_type = TypeVect::makemask(elem_bt, num_elem);\n-      const TypeVect* to_mask_type = TypeVect::makemask(mem_elem_bt, mem_num_elem);\n-      mask = gvn().transform(new VectorReinterpretNode(mask, from_mask_type, to_mask_type));\n-    }\n-\n-    if (use_predicate) {\n+    if (supports_predicate) {\n@@ -1341,2 +1373,1 @@\n-      const TypeVect* vt = TypeVect::make(mem_elem_bt, mem_num_elem);\n-      vload = gvn().transform(new LoadVectorMaskedNode(control(), memory(addr), addr, addr_type, vt, mask));\n+      vload = gvn().transform(new LoadVectorMaskedNode(control(), memory(addr), addr, addr_type, mem_vt, mask));\n@@ -1352,2 +1383,1 @@\n-      const TypeVect* to_vect_type = TypeVect::make(elem_bt, num_elem);\n-      vload = gvn().transform(new VectorReinterpretNode(vload, vload->bottom_type()->is_vect(), to_vect_type));\n+      vload = gvn().transform(new VectorReinterpretNode(vload, vload->bottom_type()->is_vect(), vt));\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":83,"deletions":53,"binary":false,"changes":136,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -427,1 +427,1 @@\n-                               int length, ByteBuffer bb, int offset, M m, S s,\n+                               int length, ByteBuffer bb, int offset, M m, S s, boolean offsetInRange,\n@@ -434,1 +434,1 @@\n-                    s,\n+                    s, offsetInRange,\n@@ -449,1 +449,1 @@\n-                                     S s,\n+                                     S s, boolean offsetInRange,\n@@ -456,0 +456,6 @@\n+            if (offsetInRange) {\n+                return VectorSupport.loadMasked(vmClass, maskClass, e, length,\n+                        BufferAccess.bufferBase(bb), BufferAccess.bufferAddress(bb, offset), m, \/* offsetInRange *\/ 1,\n+                        bb, offset, s,\n+                        defaultImpl);\n+            }\n@@ -457,1 +463,1 @@\n-                    BufferAccess.bufferBase(bb), BufferAccess.bufferAddress(bb, offset), m,\n+                    BufferAccess.bufferBase(bb), BufferAccess.bufferAddress(bb, offset), m, \/* offsetInRange *\/ 0,\n@@ -514,1 +520,1 @@\n-                                   int length, V v, M m,\n+                                   int length, V v, M m, boolean offsetInRange,\n@@ -521,1 +527,1 @@\n-                    v, m,\n+                    v, m, offsetInRange,\n@@ -535,1 +541,1 @@\n-                                         Class<E> e, int length, V v, M m,\n+                                         Class<E> e, int length, V v, M m, boolean offsetInRange,\n@@ -543,5 +549,13 @@\n-            VectorSupport.storeMasked(vmClass, maskClass, e, length,\n-                    BufferAccess.bufferBase(bb), BufferAccess.bufferAddress(bb, offset),\n-                    v, m,\n-                    bb, offset,\n-                    defaultImpl);\n+            if (offsetInRange) {\n+                VectorSupport.storeMasked(vmClass, maskClass, e, length,\n+                        BufferAccess.bufferBase(bb), BufferAccess.bufferAddress(bb, offset),\n+                        v, m, \/* offsetInRange *\/ 1,\n+                        bb, offset,\n+                        defaultImpl);\n+            } else {\n+                VectorSupport.storeMasked(vmClass, maskClass, e, length,\n+                        BufferAccess.bufferBase(bb), BufferAccess.bufferAddress(bb, offset),\n+                        v, m, \/* offsetInRange *\/ 0,\n+                        bb, offset,\n+                        defaultImpl);\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template","additions":27,"deletions":13,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -401,3 +401,3 @@\n-                 int length,\n-                 Object base, long offset,\n-                 M m, C container, int index, S s,\n+                 int length, Object base, long offset,\n+                 M m, int offsetInRange,\n+                 C container, int index, S s,\n@@ -472,1 +472,1 @@\n-                     V v, M m, C container, int index,\n+                     V v, M m, int offsetInRange, C container, int index,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -856,2 +856,2 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m);  \/\/ specialize\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m, offsetInRange);  \/\/ specialize\n@@ -872,2 +872,2 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromBooleanArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m);  \/\/ specialize\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromBooleanArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m, offsetInRange);  \/\/ specialize\n@@ -886,2 +886,2 @@\n-    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromByteArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m);  \/\/ specialize\n+    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m, offsetInRange);  \/\/ specialize\n@@ -900,2 +900,2 @@\n-    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m) {\n-        return super.fromByteBuffer0Template(Byte128Mask.class, bb, offset, (Byte128Mask) m);  \/\/ specialize\n+    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Byte128Mask.class, bb, offset, (Byte128Mask) m, offsetInRange);  \/\/ specialize\n@@ -914,2 +914,2 @@\n-    void intoArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        super.intoArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m);\n+    void intoArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m, offsetInRange);\n@@ -922,2 +922,2 @@\n-    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        super.intoBooleanArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m);\n+    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoBooleanArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m, offsetInRange);\n@@ -936,2 +936,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        super.intoByteArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m, offsetInRange);  \/\/ specialize\n@@ -943,2 +943,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m) {\n-        super.intoByteBuffer0Template(Byte128Mask.class, bb, offset, (Byte128Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Byte128Mask.class, bb, offset, (Byte128Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -888,2 +888,2 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m);  \/\/ specialize\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m, offsetInRange);  \/\/ specialize\n@@ -904,2 +904,2 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromBooleanArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m);  \/\/ specialize\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromBooleanArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m, offsetInRange);  \/\/ specialize\n@@ -918,2 +918,2 @@\n-    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromByteArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m);  \/\/ specialize\n+    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m, offsetInRange);  \/\/ specialize\n@@ -932,2 +932,2 @@\n-    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m) {\n-        return super.fromByteBuffer0Template(Byte256Mask.class, bb, offset, (Byte256Mask) m);  \/\/ specialize\n+    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Byte256Mask.class, bb, offset, (Byte256Mask) m, offsetInRange);  \/\/ specialize\n@@ -946,2 +946,2 @@\n-    void intoArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        super.intoArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m);\n+    void intoArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m, offsetInRange);\n@@ -954,2 +954,2 @@\n-    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        super.intoBooleanArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m);\n+    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoBooleanArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m, offsetInRange);\n@@ -968,2 +968,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        super.intoByteArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m, offsetInRange);  \/\/ specialize\n@@ -975,2 +975,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m) {\n-        super.intoByteBuffer0Template(Byte256Mask.class, bb, offset, (Byte256Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Byte256Mask.class, bb, offset, (Byte256Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -952,2 +952,2 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m);  \/\/ specialize\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m, offsetInRange);  \/\/ specialize\n@@ -968,2 +968,2 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromBooleanArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m);  \/\/ specialize\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromBooleanArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m, offsetInRange);  \/\/ specialize\n@@ -982,2 +982,2 @@\n-    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromByteArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m);  \/\/ specialize\n+    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m, offsetInRange);  \/\/ specialize\n@@ -996,2 +996,2 @@\n-    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m) {\n-        return super.fromByteBuffer0Template(Byte512Mask.class, bb, offset, (Byte512Mask) m);  \/\/ specialize\n+    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Byte512Mask.class, bb, offset, (Byte512Mask) m, offsetInRange);  \/\/ specialize\n@@ -1010,2 +1010,2 @@\n-    void intoArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        super.intoArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m);\n+    void intoArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m, offsetInRange);\n@@ -1018,2 +1018,2 @@\n-    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        super.intoBooleanArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m);\n+    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoBooleanArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m, offsetInRange);\n@@ -1032,2 +1032,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        super.intoByteArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m, offsetInRange);  \/\/ specialize\n@@ -1039,2 +1039,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m) {\n-        super.intoByteBuffer0Template(Byte512Mask.class, bb, offset, (Byte512Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Byte512Mask.class, bb, offset, (Byte512Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -840,2 +840,2 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m);  \/\/ specialize\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m, offsetInRange);  \/\/ specialize\n@@ -856,2 +856,2 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromBooleanArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m);  \/\/ specialize\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromBooleanArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m, offsetInRange);  \/\/ specialize\n@@ -870,2 +870,2 @@\n-    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromByteArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m);  \/\/ specialize\n+    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m, offsetInRange);  \/\/ specialize\n@@ -884,2 +884,2 @@\n-    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m) {\n-        return super.fromByteBuffer0Template(Byte64Mask.class, bb, offset, (Byte64Mask) m);  \/\/ specialize\n+    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Byte64Mask.class, bb, offset, (Byte64Mask) m, offsetInRange);  \/\/ specialize\n@@ -898,2 +898,2 @@\n-    void intoArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        super.intoArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m);\n+    void intoArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m, offsetInRange);\n@@ -906,2 +906,2 @@\n-    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        super.intoBooleanArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m);\n+    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoBooleanArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m, offsetInRange);\n@@ -920,2 +920,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        super.intoByteArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m, offsetInRange);  \/\/ specialize\n@@ -927,2 +927,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m) {\n-        super.intoByteBuffer0Template(Byte64Mask.class, bb, offset, (Byte64Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Byte64Mask.class, bb, offset, (Byte64Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -826,2 +826,2 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m);  \/\/ specialize\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -842,2 +842,2 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromBooleanArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m);  \/\/ specialize\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromBooleanArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -856,2 +856,2 @@\n-    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        return super.fromByteArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m);  \/\/ specialize\n+    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -870,2 +870,2 @@\n-    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m) {\n-        return super.fromByteBuffer0Template(ByteMaxMask.class, bb, offset, (ByteMaxMask) m);  \/\/ specialize\n+    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(ByteMaxMask.class, bb, offset, (ByteMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -884,2 +884,2 @@\n-    void intoArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        super.intoArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m);\n+    void intoArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m, offsetInRange);\n@@ -892,2 +892,2 @@\n-    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        super.intoBooleanArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m);\n+    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoBooleanArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m, offsetInRange);\n@@ -906,2 +906,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        super.intoByteArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -913,2 +913,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m) {\n-        super.intoByteBuffer0Template(ByteMaxMask.class, bb, offset, (ByteMaxMask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(ByteMaxMask.class, bb, offset, (ByteMaxMask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2861,1 +2861,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -2864,1 +2864,0 @@\n-        \/\/ FIXME: optimize\n@@ -2866,3 +2865,1 @@\n-        ByteBuffer wb = wrapper(a, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Byte>)m,\n-                   (wb_, o, i)  -> wb_.get(o + i * 1));\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -2923,1 +2920,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ true);\n@@ -2926,1 +2923,0 @@\n-        \/\/ FIXME: optimize\n@@ -2928,1 +2924,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -3080,1 +3076,1 @@\n-            return vsp.dummyVector().fromBooleanArray0(a, offset, m);\n+            return vsp.dummyVector().fromBooleanArray0(a, offset, m, \/* offsetInRange*\/ true);\n@@ -3083,1 +3079,0 @@\n-        \/\/ FIXME: optimize\n@@ -3085,1 +3080,1 @@\n-        return vsp.vOp(m, i -> (byte) (a[offset + i] ? 1 : 0));\n+        return vsp.dummyVector().fromBooleanArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -3258,1 +3253,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -3261,1 +3256,0 @@\n-        \/\/ FIXME: optimize\n@@ -3263,3 +3257,1 @@\n-        ByteBuffer wb = wrapper(bb, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Byte>)m,\n-                   (wb_, o, i)  -> wb_.get(o + i * 1));\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -3331,2 +3323,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3486,2 +3482,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoBooleanArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoBooleanArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoBooleanArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3607,2 +3607,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            maybeSwap(bo).intoByteArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3643,2 +3647,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, bb.limit());\n-            maybeSwap(bo).intoByteBuffer0(bb, offset, m);\n+            if (offset >= 0 && offset <= (bb.limit() - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, bb.limit());\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3684,1 +3692,1 @@\n-    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m);\n+    ByteVector fromArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange);\n@@ -3688,7 +3696,3 @@\n-    ByteVector fromArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        m.check(species());\n-        ByteSpecies vsp = vspecies();\n-        return VectorSupport.loadMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset), m,\n-            a, offset, vsp,\n+    ByteVector fromArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(maskClass, a, arrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -3699,0 +3703,20 @@\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<Byte>>\n+    ByteVector fromArray0Template(Class<M> maskClass, C base, long offset, int index, M m, boolean offsetInRange,\n+                        VectorSupport.LoadVectorMaskedOperation<C, ByteVector, ByteSpecies, M> defaultImpl) {\n+        m.check(species());\n+        ByteSpecies vsp = vspecies();\n+        if (offsetInRange) {\n+            return VectorSupport.loadMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset, m, \/* offsetInRange *\/ 1,\n+                base, index, vsp, defaultImpl);\n+        } else {\n+            return VectorSupport.loadMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset, m, \/* offsetInRange *\/ 0,\n+                base, index, vsp, defaultImpl);\n+        }\n+    }\n+\n@@ -3718,1 +3742,1 @@\n-    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m);\n+    ByteVector fromBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange);\n@@ -3722,7 +3746,4 @@\n-    ByteVector fromBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m) {\n-        m.check(species());\n-        ByteSpecies vsp = vspecies();\n-        return VectorSupport.loadMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, booleanArrayAddress(a, offset), m,\n-            a, offset, vsp,\n+    ByteVector fromBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n+            maskClass, a, booleanArrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -3752,1 +3773,1 @@\n-    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m);\n+    ByteVector fromByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange);\n@@ -3756,7 +3777,4 @@\n-    ByteVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        ByteSpecies vsp = vspecies();\n-        m.check(vsp);\n-        return VectorSupport.loadMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset), m,\n-            a, offset, vsp,\n+    ByteVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n+            maskClass, a, byteArrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -3787,1 +3805,1 @@\n-    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m);\n+    ByteVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange);\n@@ -3791,1 +3809,1 @@\n-    ByteVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    ByteVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3796,1 +3814,1 @@\n-                bb, offset, m, vsp,\n+                bb, offset, m, vsp, offsetInRange,\n@@ -3824,1 +3842,1 @@\n-    void intoArray0(byte[] a, int offset, VectorMask<Byte> m);\n+    void intoArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange);\n@@ -3828,1 +3846,12 @@\n-    void intoArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n+    void intoArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, arrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+    }\n+\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<Byte>>\n+    void intoArray0Template(Class<M> maskClass, C base, long offset, int index, ByteVector v, M m, boolean offsetInRange,\n+                            VectorSupport.StoreVectorMaskedOperation<C, ByteVector, M> defaultImpl) {\n@@ -3831,7 +3860,13 @@\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset),\n-            this, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+        if (offsetInRange) {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 1,\n+                base, index, defaultImpl);\n+        } else {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 0,\n+                base, index, defaultImpl);\n+        }\n@@ -3842,1 +3877,1 @@\n-    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m);\n+    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange);\n@@ -3846,3 +3881,1 @@\n-    void intoBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m) {\n-        m.check(species());\n-        ByteSpecies vsp = vspecies();\n+    void intoBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m, boolean offsetInRange) {\n@@ -3850,7 +3883,4 @@\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, booleanArrayAddress(a, offset),\n-            normalized, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = (e & 1) != 0));\n+        intoArray0Template(maskClass, a, booleanArrayAddress(a, offset), offset,\n+            normalized,  m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = (e & 1) != 0));\n@@ -3877,1 +3907,1 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m);\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange);\n@@ -3881,7 +3911,3 @@\n-    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        ByteSpecies vsp = vspecies();\n-        m.check(vsp);\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset),\n-            this, m, a, offset,\n+    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, byteArrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n@@ -3910,1 +3936,1 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange);\n@@ -3914,1 +3940,1 @@\n-    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3919,1 +3945,1 @@\n-                this, m, bb, offset,\n+                this, m, offsetInRange, bb, offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":108,"deletions":82,"binary":false,"changes":190,"status":"modified"},{"patch":"@@ -817,2 +817,2 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m) {\n-        return super.fromArray0Template(Double128Mask.class, a, offset, (Double128Mask) m);  \/\/ specialize\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Double128Mask.class, a, offset, (Double128Mask) m, offsetInRange);  \/\/ specialize\n@@ -840,2 +840,2 @@\n-    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m) {\n-        return super.fromByteArray0Template(Double128Mask.class, a, offset, (Double128Mask) m);  \/\/ specialize\n+    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Double128Mask.class, a, offset, (Double128Mask) m, offsetInRange);  \/\/ specialize\n@@ -854,2 +854,2 @@\n-    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m) {\n-        return super.fromByteBuffer0Template(Double128Mask.class, bb, offset, (Double128Mask) m);  \/\/ specialize\n+    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Double128Mask.class, bb, offset, (Double128Mask) m, offsetInRange);  \/\/ specialize\n@@ -868,2 +868,2 @@\n-    void intoArray0(double[] a, int offset, VectorMask<Double> m) {\n-        super.intoArray0Template(Double128Mask.class, a, offset, (Double128Mask) m);\n+    void intoArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoArray0Template(Double128Mask.class, a, offset, (Double128Mask) m, offsetInRange);\n@@ -890,2 +890,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m) {\n-        super.intoByteArray0Template(Double128Mask.class, a, offset, (Double128Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Double128Mask.class, a, offset, (Double128Mask) m, offsetInRange);  \/\/ specialize\n@@ -897,2 +897,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m) {\n-        super.intoByteBuffer0Template(Double128Mask.class, bb, offset, (Double128Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Double128Mask.class, bb, offset, (Double128Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -821,2 +821,2 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m) {\n-        return super.fromArray0Template(Double256Mask.class, a, offset, (Double256Mask) m);  \/\/ specialize\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Double256Mask.class, a, offset, (Double256Mask) m, offsetInRange);  \/\/ specialize\n@@ -844,2 +844,2 @@\n-    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m) {\n-        return super.fromByteArray0Template(Double256Mask.class, a, offset, (Double256Mask) m);  \/\/ specialize\n+    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Double256Mask.class, a, offset, (Double256Mask) m, offsetInRange);  \/\/ specialize\n@@ -858,2 +858,2 @@\n-    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m) {\n-        return super.fromByteBuffer0Template(Double256Mask.class, bb, offset, (Double256Mask) m);  \/\/ specialize\n+    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Double256Mask.class, bb, offset, (Double256Mask) m, offsetInRange);  \/\/ specialize\n@@ -872,2 +872,2 @@\n-    void intoArray0(double[] a, int offset, VectorMask<Double> m) {\n-        super.intoArray0Template(Double256Mask.class, a, offset, (Double256Mask) m);\n+    void intoArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoArray0Template(Double256Mask.class, a, offset, (Double256Mask) m, offsetInRange);\n@@ -894,2 +894,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m) {\n-        super.intoByteArray0Template(Double256Mask.class, a, offset, (Double256Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Double256Mask.class, a, offset, (Double256Mask) m, offsetInRange);  \/\/ specialize\n@@ -901,2 +901,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m) {\n-        super.intoByteBuffer0Template(Double256Mask.class, bb, offset, (Double256Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Double256Mask.class, bb, offset, (Double256Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -829,2 +829,2 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m) {\n-        return super.fromArray0Template(Double512Mask.class, a, offset, (Double512Mask) m);  \/\/ specialize\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Double512Mask.class, a, offset, (Double512Mask) m, offsetInRange);  \/\/ specialize\n@@ -852,2 +852,2 @@\n-    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m) {\n-        return super.fromByteArray0Template(Double512Mask.class, a, offset, (Double512Mask) m);  \/\/ specialize\n+    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Double512Mask.class, a, offset, (Double512Mask) m, offsetInRange);  \/\/ specialize\n@@ -866,2 +866,2 @@\n-    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m) {\n-        return super.fromByteBuffer0Template(Double512Mask.class, bb, offset, (Double512Mask) m);  \/\/ specialize\n+    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Double512Mask.class, bb, offset, (Double512Mask) m, offsetInRange);  \/\/ specialize\n@@ -880,2 +880,2 @@\n-    void intoArray0(double[] a, int offset, VectorMask<Double> m) {\n-        super.intoArray0Template(Double512Mask.class, a, offset, (Double512Mask) m);\n+    void intoArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoArray0Template(Double512Mask.class, a, offset, (Double512Mask) m, offsetInRange);\n@@ -902,2 +902,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m) {\n-        super.intoByteArray0Template(Double512Mask.class, a, offset, (Double512Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Double512Mask.class, a, offset, (Double512Mask) m, offsetInRange);  \/\/ specialize\n@@ -909,2 +909,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m) {\n-        super.intoByteBuffer0Template(Double512Mask.class, bb, offset, (Double512Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Double512Mask.class, bb, offset, (Double512Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -815,2 +815,2 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m) {\n-        return super.fromArray0Template(Double64Mask.class, a, offset, (Double64Mask) m);  \/\/ specialize\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Double64Mask.class, a, offset, (Double64Mask) m, offsetInRange);  \/\/ specialize\n@@ -838,2 +838,2 @@\n-    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m) {\n-        return super.fromByteArray0Template(Double64Mask.class, a, offset, (Double64Mask) m);  \/\/ specialize\n+    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Double64Mask.class, a, offset, (Double64Mask) m, offsetInRange);  \/\/ specialize\n@@ -852,2 +852,2 @@\n-    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m) {\n-        return super.fromByteBuffer0Template(Double64Mask.class, bb, offset, (Double64Mask) m);  \/\/ specialize\n+    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Double64Mask.class, bb, offset, (Double64Mask) m, offsetInRange);  \/\/ specialize\n@@ -866,2 +866,2 @@\n-    void intoArray0(double[] a, int offset, VectorMask<Double> m) {\n-        super.intoArray0Template(Double64Mask.class, a, offset, (Double64Mask) m);\n+    void intoArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoArray0Template(Double64Mask.class, a, offset, (Double64Mask) m, offsetInRange);\n@@ -888,2 +888,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m) {\n-        super.intoByteArray0Template(Double64Mask.class, a, offset, (Double64Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Double64Mask.class, a, offset, (Double64Mask) m, offsetInRange);  \/\/ specialize\n@@ -895,2 +895,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m) {\n-        super.intoByteBuffer0Template(Double64Mask.class, bb, offset, (Double64Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Double64Mask.class, bb, offset, (Double64Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -814,2 +814,2 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m) {\n-        return super.fromArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m);  \/\/ specialize\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -837,2 +837,2 @@\n-    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m) {\n-        return super.fromByteArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m);  \/\/ specialize\n+    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -851,2 +851,2 @@\n-    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m) {\n-        return super.fromByteBuffer0Template(DoubleMaxMask.class, bb, offset, (DoubleMaxMask) m);  \/\/ specialize\n+    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(DoubleMaxMask.class, bb, offset, (DoubleMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -865,2 +865,2 @@\n-    void intoArray0(double[] a, int offset, VectorMask<Double> m) {\n-        super.intoArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m);\n+    void intoArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m, offsetInRange);\n@@ -887,2 +887,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m) {\n-        super.intoByteArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -894,2 +894,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m) {\n-        super.intoByteBuffer0Template(DoubleMaxMask.class, bb, offset, (DoubleMaxMask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(DoubleMaxMask.class, bb, offset, (DoubleMaxMask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2686,1 +2686,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -2689,1 +2689,0 @@\n-        \/\/ FIXME: optimize\n@@ -2691,3 +2690,1 @@\n-        ByteBuffer wb = wrapper(a, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Double>)m,\n-                   (wb_, o, i)  -> wb_.getDouble(o + i * 8));\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -2748,1 +2745,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ true);\n@@ -2751,1 +2748,0 @@\n-        \/\/ FIXME: optimize\n@@ -2753,1 +2749,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -2973,1 +2969,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -2976,1 +2972,0 @@\n-        \/\/ FIXME: optimize\n@@ -2978,3 +2973,1 @@\n-        ByteBuffer wb = wrapper(bb, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Double>)m,\n-                   (wb_, o, i)  -> wb_.getDouble(o + i * 8));\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -3046,2 +3039,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3193,2 +3190,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 8, a.length);\n-            maybeSwap(bo).intoByteArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 8, a.length);\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3229,2 +3230,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 8, bb.limit());\n-            maybeSwap(bo).intoByteBuffer0(bb, offset, m);\n+            if (offset >= 0 && offset <= (bb.limit() - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 8, bb.limit());\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3270,1 +3275,1 @@\n-    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m);\n+    DoubleVector fromArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange);\n@@ -3274,7 +3279,3 @@\n-    DoubleVector fromArray0Template(Class<M> maskClass, double[] a, int offset, M m) {\n-        m.check(species());\n-        DoubleSpecies vsp = vspecies();\n-        return VectorSupport.loadMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset), m,\n-            a, offset, vsp,\n+    DoubleVector fromArray0Template(Class<M> maskClass, double[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(maskClass, a, arrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -3285,0 +3286,20 @@\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<Double>>\n+    DoubleVector fromArray0Template(Class<M> maskClass, C base, long offset, int index, M m, boolean offsetInRange,\n+                        VectorSupport.LoadVectorMaskedOperation<C, DoubleVector, DoubleSpecies, M> defaultImpl) {\n+        m.check(species());\n+        DoubleSpecies vsp = vspecies();\n+        if (offsetInRange) {\n+            return VectorSupport.loadMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset, m, \/* offsetInRange *\/ 1,\n+                base, index, vsp, defaultImpl);\n+        } else {\n+            return VectorSupport.loadMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset, m, \/* offsetInRange *\/ 0,\n+                base, index, vsp, defaultImpl);\n+        }\n+    }\n+\n@@ -3358,1 +3379,1 @@\n-    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m);\n+    DoubleVector fromByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange);\n@@ -3362,7 +3383,4 @@\n-    DoubleVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        DoubleSpecies vsp = vspecies();\n-        m.check(vsp);\n-        return VectorSupport.loadMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset), m,\n-            a, offset, vsp,\n+    DoubleVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n+            maskClass, a, byteArrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -3393,1 +3411,1 @@\n-    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m);\n+    DoubleVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange);\n@@ -3397,1 +3415,1 @@\n-    DoubleVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    DoubleVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3402,1 +3420,1 @@\n-                bb, offset, m, vsp,\n+                bb, offset, m, vsp, offsetInRange,\n@@ -3430,1 +3448,1 @@\n-    void intoArray0(double[] a, int offset, VectorMask<Double> m);\n+    void intoArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange);\n@@ -3434,1 +3452,12 @@\n-    void intoArray0Template(Class<M> maskClass, double[] a, int offset, M m) {\n+    void intoArray0Template(Class<M> maskClass, double[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, arrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+    }\n+\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<Double>>\n+    void intoArray0Template(Class<M> maskClass, C base, long offset, int index, DoubleVector v, M m, boolean offsetInRange,\n+                            VectorSupport.StoreVectorMaskedOperation<C, DoubleVector, M> defaultImpl) {\n@@ -3437,7 +3466,13 @@\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset),\n-            this, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+        if (offsetInRange) {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 1,\n+                base, index, defaultImpl);\n+        } else {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 0,\n+                base, index, defaultImpl);\n+        }\n@@ -3518,1 +3553,1 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m);\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange);\n@@ -3522,7 +3557,3 @@\n-    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        DoubleSpecies vsp = vspecies();\n-        m.check(vsp);\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset),\n-            this, m, a, offset,\n+    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, byteArrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n@@ -3551,1 +3582,1 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange);\n@@ -3555,1 +3586,1 @@\n-    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3560,1 +3591,1 @@\n-                this, m, bb, offset,\n+                this, m, offsetInRange, bb, offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":89,"deletions":58,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -821,2 +821,2 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m) {\n-        return super.fromArray0Template(Float128Mask.class, a, offset, (Float128Mask) m);  \/\/ specialize\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Float128Mask.class, a, offset, (Float128Mask) m, offsetInRange);  \/\/ specialize\n@@ -844,2 +844,2 @@\n-    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m) {\n-        return super.fromByteArray0Template(Float128Mask.class, a, offset, (Float128Mask) m);  \/\/ specialize\n+    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Float128Mask.class, a, offset, (Float128Mask) m, offsetInRange);  \/\/ specialize\n@@ -858,2 +858,2 @@\n-    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m) {\n-        return super.fromByteBuffer0Template(Float128Mask.class, bb, offset, (Float128Mask) m);  \/\/ specialize\n+    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Float128Mask.class, bb, offset, (Float128Mask) m, offsetInRange);  \/\/ specialize\n@@ -872,2 +872,2 @@\n-    void intoArray0(float[] a, int offset, VectorMask<Float> m) {\n-        super.intoArray0Template(Float128Mask.class, a, offset, (Float128Mask) m);\n+    void intoArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoArray0Template(Float128Mask.class, a, offset, (Float128Mask) m, offsetInRange);\n@@ -894,2 +894,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m) {\n-        super.intoByteArray0Template(Float128Mask.class, a, offset, (Float128Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Float128Mask.class, a, offset, (Float128Mask) m, offsetInRange);  \/\/ specialize\n@@ -901,2 +901,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m) {\n-        super.intoByteBuffer0Template(Float128Mask.class, bb, offset, (Float128Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Float128Mask.class, bb, offset, (Float128Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -829,2 +829,2 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m) {\n-        return super.fromArray0Template(Float256Mask.class, a, offset, (Float256Mask) m);  \/\/ specialize\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Float256Mask.class, a, offset, (Float256Mask) m, offsetInRange);  \/\/ specialize\n@@ -852,2 +852,2 @@\n-    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m) {\n-        return super.fromByteArray0Template(Float256Mask.class, a, offset, (Float256Mask) m);  \/\/ specialize\n+    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Float256Mask.class, a, offset, (Float256Mask) m, offsetInRange);  \/\/ specialize\n@@ -866,2 +866,2 @@\n-    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m) {\n-        return super.fromByteBuffer0Template(Float256Mask.class, bb, offset, (Float256Mask) m);  \/\/ specialize\n+    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Float256Mask.class, bb, offset, (Float256Mask) m, offsetInRange);  \/\/ specialize\n@@ -880,2 +880,2 @@\n-    void intoArray0(float[] a, int offset, VectorMask<Float> m) {\n-        super.intoArray0Template(Float256Mask.class, a, offset, (Float256Mask) m);\n+    void intoArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoArray0Template(Float256Mask.class, a, offset, (Float256Mask) m, offsetInRange);\n@@ -902,2 +902,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m) {\n-        super.intoByteArray0Template(Float256Mask.class, a, offset, (Float256Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Float256Mask.class, a, offset, (Float256Mask) m, offsetInRange);  \/\/ specialize\n@@ -909,2 +909,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m) {\n-        super.intoByteBuffer0Template(Float256Mask.class, bb, offset, (Float256Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Float256Mask.class, bb, offset, (Float256Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -845,2 +845,2 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m) {\n-        return super.fromArray0Template(Float512Mask.class, a, offset, (Float512Mask) m);  \/\/ specialize\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Float512Mask.class, a, offset, (Float512Mask) m, offsetInRange);  \/\/ specialize\n@@ -868,2 +868,2 @@\n-    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m) {\n-        return super.fromByteArray0Template(Float512Mask.class, a, offset, (Float512Mask) m);  \/\/ specialize\n+    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Float512Mask.class, a, offset, (Float512Mask) m, offsetInRange);  \/\/ specialize\n@@ -882,2 +882,2 @@\n-    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m) {\n-        return super.fromByteBuffer0Template(Float512Mask.class, bb, offset, (Float512Mask) m);  \/\/ specialize\n+    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Float512Mask.class, bb, offset, (Float512Mask) m, offsetInRange);  \/\/ specialize\n@@ -896,2 +896,2 @@\n-    void intoArray0(float[] a, int offset, VectorMask<Float> m) {\n-        super.intoArray0Template(Float512Mask.class, a, offset, (Float512Mask) m);\n+    void intoArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoArray0Template(Float512Mask.class, a, offset, (Float512Mask) m, offsetInRange);\n@@ -918,2 +918,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m) {\n-        super.intoByteArray0Template(Float512Mask.class, a, offset, (Float512Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Float512Mask.class, a, offset, (Float512Mask) m, offsetInRange);  \/\/ specialize\n@@ -925,2 +925,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m) {\n-        super.intoByteBuffer0Template(Float512Mask.class, bb, offset, (Float512Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Float512Mask.class, bb, offset, (Float512Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -817,2 +817,2 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m) {\n-        return super.fromArray0Template(Float64Mask.class, a, offset, (Float64Mask) m);  \/\/ specialize\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Float64Mask.class, a, offset, (Float64Mask) m, offsetInRange);  \/\/ specialize\n@@ -840,2 +840,2 @@\n-    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m) {\n-        return super.fromByteArray0Template(Float64Mask.class, a, offset, (Float64Mask) m);  \/\/ specialize\n+    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Float64Mask.class, a, offset, (Float64Mask) m, offsetInRange);  \/\/ specialize\n@@ -854,2 +854,2 @@\n-    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m) {\n-        return super.fromByteBuffer0Template(Float64Mask.class, bb, offset, (Float64Mask) m);  \/\/ specialize\n+    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Float64Mask.class, bb, offset, (Float64Mask) m, offsetInRange);  \/\/ specialize\n@@ -868,2 +868,2 @@\n-    void intoArray0(float[] a, int offset, VectorMask<Float> m) {\n-        super.intoArray0Template(Float64Mask.class, a, offset, (Float64Mask) m);\n+    void intoArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoArray0Template(Float64Mask.class, a, offset, (Float64Mask) m, offsetInRange);\n@@ -890,2 +890,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m) {\n-        super.intoByteArray0Template(Float64Mask.class, a, offset, (Float64Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Float64Mask.class, a, offset, (Float64Mask) m, offsetInRange);  \/\/ specialize\n@@ -897,2 +897,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m) {\n-        super.intoByteBuffer0Template(Float64Mask.class, bb, offset, (Float64Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Float64Mask.class, bb, offset, (Float64Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -814,2 +814,2 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m) {\n-        return super.fromArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m);  \/\/ specialize\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -837,2 +837,2 @@\n-    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m) {\n-        return super.fromByteArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m);  \/\/ specialize\n+    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -851,2 +851,2 @@\n-    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m) {\n-        return super.fromByteBuffer0Template(FloatMaxMask.class, bb, offset, (FloatMaxMask) m);  \/\/ specialize\n+    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(FloatMaxMask.class, bb, offset, (FloatMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -865,2 +865,2 @@\n-    void intoArray0(float[] a, int offset, VectorMask<Float> m) {\n-        super.intoArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m);\n+    void intoArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m, offsetInRange);\n@@ -887,2 +887,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m) {\n-        super.intoByteArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -894,2 +894,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m) {\n-        super.intoByteBuffer0Template(FloatMaxMask.class, bb, offset, (FloatMaxMask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(FloatMaxMask.class, bb, offset, (FloatMaxMask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2710,1 +2710,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -2713,1 +2713,0 @@\n-        \/\/ FIXME: optimize\n@@ -2715,3 +2714,1 @@\n-        ByteBuffer wb = wrapper(a, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Float>)m,\n-                   (wb_, o, i)  -> wb_.getFloat(o + i * 4));\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -2772,1 +2769,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ true);\n@@ -2775,1 +2772,0 @@\n-        \/\/ FIXME: optimize\n@@ -2777,1 +2773,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -2979,1 +2975,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -2982,1 +2978,0 @@\n-        \/\/ FIXME: optimize\n@@ -2984,3 +2979,1 @@\n-        ByteBuffer wb = wrapper(bb, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Float>)m,\n-                   (wb_, o, i)  -> wb_.getFloat(o + i * 4));\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -3052,2 +3045,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3180,2 +3177,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 4, a.length);\n-            maybeSwap(bo).intoByteArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 4, a.length);\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3216,2 +3217,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 4, bb.limit());\n-            maybeSwap(bo).intoByteBuffer0(bb, offset, m);\n+            if (offset >= 0 && offset <= (bb.limit() - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 4, bb.limit());\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3257,1 +3262,1 @@\n-    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m);\n+    FloatVector fromArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange);\n@@ -3261,7 +3266,3 @@\n-    FloatVector fromArray0Template(Class<M> maskClass, float[] a, int offset, M m) {\n-        m.check(species());\n-        FloatSpecies vsp = vspecies();\n-        return VectorSupport.loadMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset), m,\n-            a, offset, vsp,\n+    FloatVector fromArray0Template(Class<M> maskClass, float[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(maskClass, a, arrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -3272,0 +3273,20 @@\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<Float>>\n+    FloatVector fromArray0Template(Class<M> maskClass, C base, long offset, int index, M m, boolean offsetInRange,\n+                        VectorSupport.LoadVectorMaskedOperation<C, FloatVector, FloatSpecies, M> defaultImpl) {\n+        m.check(species());\n+        FloatSpecies vsp = vspecies();\n+        if (offsetInRange) {\n+            return VectorSupport.loadMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset, m, \/* offsetInRange *\/ 1,\n+                base, index, vsp, defaultImpl);\n+        } else {\n+            return VectorSupport.loadMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset, m, \/* offsetInRange *\/ 0,\n+                base, index, vsp, defaultImpl);\n+        }\n+    }\n+\n@@ -3327,1 +3348,1 @@\n-    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m);\n+    FloatVector fromByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange);\n@@ -3331,7 +3352,4 @@\n-    FloatVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        FloatSpecies vsp = vspecies();\n-        m.check(vsp);\n-        return VectorSupport.loadMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset), m,\n-            a, offset, vsp,\n+    FloatVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n+            maskClass, a, byteArrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -3362,1 +3380,1 @@\n-    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m);\n+    FloatVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange);\n@@ -3366,1 +3384,1 @@\n-    FloatVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    FloatVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3371,1 +3389,1 @@\n-                bb, offset, m, vsp,\n+                bb, offset, m, vsp, offsetInRange,\n@@ -3399,1 +3417,1 @@\n-    void intoArray0(float[] a, int offset, VectorMask<Float> m);\n+    void intoArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange);\n@@ -3403,1 +3421,12 @@\n-    void intoArray0Template(Class<M> maskClass, float[] a, int offset, M m) {\n+    void intoArray0Template(Class<M> maskClass, float[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, arrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+    }\n+\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<Float>>\n+    void intoArray0Template(Class<M> maskClass, C base, long offset, int index, FloatVector v, M m, boolean offsetInRange,\n+                            VectorSupport.StoreVectorMaskedOperation<C, FloatVector, M> defaultImpl) {\n@@ -3406,7 +3435,13 @@\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset),\n-            this, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+        if (offsetInRange) {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 1,\n+                base, index, defaultImpl);\n+        } else {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 0,\n+                base, index, defaultImpl);\n+        }\n@@ -3468,1 +3503,1 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m);\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange);\n@@ -3472,7 +3507,3 @@\n-    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        FloatSpecies vsp = vspecies();\n-        m.check(vsp);\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset),\n-            this, m, a, offset,\n+    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, byteArrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n@@ -3501,1 +3532,1 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange);\n@@ -3505,1 +3536,1 @@\n-    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3510,1 +3541,1 @@\n-                this, m, bb, offset,\n+                this, m, offsetInRange, bb, offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":89,"deletions":58,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -832,2 +832,2 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromArray0Template(Int128Mask.class, a, offset, (Int128Mask) m);  \/\/ specialize\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Int128Mask.class, a, offset, (Int128Mask) m, offsetInRange);  \/\/ specialize\n@@ -855,2 +855,2 @@\n-    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromByteArray0Template(Int128Mask.class, a, offset, (Int128Mask) m);  \/\/ specialize\n+    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Int128Mask.class, a, offset, (Int128Mask) m, offsetInRange);  \/\/ specialize\n@@ -869,2 +869,2 @@\n-    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m) {\n-        return super.fromByteBuffer0Template(Int128Mask.class, bb, offset, (Int128Mask) m);  \/\/ specialize\n+    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Int128Mask.class, bb, offset, (Int128Mask) m, offsetInRange);  \/\/ specialize\n@@ -883,2 +883,2 @@\n-    void intoArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        super.intoArray0Template(Int128Mask.class, a, offset, (Int128Mask) m);\n+    void intoArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoArray0Template(Int128Mask.class, a, offset, (Int128Mask) m, offsetInRange);\n@@ -905,2 +905,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m) {\n-        super.intoByteArray0Template(Int128Mask.class, a, offset, (Int128Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Int128Mask.class, a, offset, (Int128Mask) m, offsetInRange);  \/\/ specialize\n@@ -912,2 +912,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m) {\n-        super.intoByteBuffer0Template(Int128Mask.class, bb, offset, (Int128Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Int128Mask.class, bb, offset, (Int128Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -840,2 +840,2 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromArray0Template(Int256Mask.class, a, offset, (Int256Mask) m);  \/\/ specialize\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Int256Mask.class, a, offset, (Int256Mask) m, offsetInRange);  \/\/ specialize\n@@ -863,2 +863,2 @@\n-    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromByteArray0Template(Int256Mask.class, a, offset, (Int256Mask) m);  \/\/ specialize\n+    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Int256Mask.class, a, offset, (Int256Mask) m, offsetInRange);  \/\/ specialize\n@@ -877,2 +877,2 @@\n-    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m) {\n-        return super.fromByteBuffer0Template(Int256Mask.class, bb, offset, (Int256Mask) m);  \/\/ specialize\n+    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Int256Mask.class, bb, offset, (Int256Mask) m, offsetInRange);  \/\/ specialize\n@@ -891,2 +891,2 @@\n-    void intoArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        super.intoArray0Template(Int256Mask.class, a, offset, (Int256Mask) m);\n+    void intoArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoArray0Template(Int256Mask.class, a, offset, (Int256Mask) m, offsetInRange);\n@@ -913,2 +913,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m) {\n-        super.intoByteArray0Template(Int256Mask.class, a, offset, (Int256Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Int256Mask.class, a, offset, (Int256Mask) m, offsetInRange);  \/\/ specialize\n@@ -920,2 +920,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m) {\n-        super.intoByteBuffer0Template(Int256Mask.class, bb, offset, (Int256Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Int256Mask.class, bb, offset, (Int256Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -856,2 +856,2 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromArray0Template(Int512Mask.class, a, offset, (Int512Mask) m);  \/\/ specialize\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Int512Mask.class, a, offset, (Int512Mask) m, offsetInRange);  \/\/ specialize\n@@ -879,2 +879,2 @@\n-    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromByteArray0Template(Int512Mask.class, a, offset, (Int512Mask) m);  \/\/ specialize\n+    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Int512Mask.class, a, offset, (Int512Mask) m, offsetInRange);  \/\/ specialize\n@@ -893,2 +893,2 @@\n-    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m) {\n-        return super.fromByteBuffer0Template(Int512Mask.class, bb, offset, (Int512Mask) m);  \/\/ specialize\n+    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Int512Mask.class, bb, offset, (Int512Mask) m, offsetInRange);  \/\/ specialize\n@@ -907,2 +907,2 @@\n-    void intoArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        super.intoArray0Template(Int512Mask.class, a, offset, (Int512Mask) m);\n+    void intoArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoArray0Template(Int512Mask.class, a, offset, (Int512Mask) m, offsetInRange);\n@@ -929,2 +929,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m) {\n-        super.intoByteArray0Template(Int512Mask.class, a, offset, (Int512Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Int512Mask.class, a, offset, (Int512Mask) m, offsetInRange);  \/\/ specialize\n@@ -936,2 +936,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m) {\n-        super.intoByteBuffer0Template(Int512Mask.class, bb, offset, (Int512Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Int512Mask.class, bb, offset, (Int512Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -828,2 +828,2 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromArray0Template(Int64Mask.class, a, offset, (Int64Mask) m);  \/\/ specialize\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Int64Mask.class, a, offset, (Int64Mask) m, offsetInRange);  \/\/ specialize\n@@ -851,2 +851,2 @@\n-    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromByteArray0Template(Int64Mask.class, a, offset, (Int64Mask) m);  \/\/ specialize\n+    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Int64Mask.class, a, offset, (Int64Mask) m, offsetInRange);  \/\/ specialize\n@@ -865,2 +865,2 @@\n-    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m) {\n-        return super.fromByteBuffer0Template(Int64Mask.class, bb, offset, (Int64Mask) m);  \/\/ specialize\n+    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Int64Mask.class, bb, offset, (Int64Mask) m, offsetInRange);  \/\/ specialize\n@@ -879,2 +879,2 @@\n-    void intoArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        super.intoArray0Template(Int64Mask.class, a, offset, (Int64Mask) m);\n+    void intoArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoArray0Template(Int64Mask.class, a, offset, (Int64Mask) m, offsetInRange);\n@@ -901,2 +901,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m) {\n-        super.intoByteArray0Template(Int64Mask.class, a, offset, (Int64Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Int64Mask.class, a, offset, (Int64Mask) m, offsetInRange);  \/\/ specialize\n@@ -908,2 +908,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m) {\n-        super.intoByteBuffer0Template(Int64Mask.class, bb, offset, (Int64Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Int64Mask.class, bb, offset, (Int64Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -837,2 +837,2 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m);  \/\/ specialize\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -860,2 +860,2 @@\n-    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m) {\n-        return super.fromByteArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m);  \/\/ specialize\n+    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -874,2 +874,2 @@\n-    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m) {\n-        return super.fromByteBuffer0Template(IntMaxMask.class, bb, offset, (IntMaxMask) m);  \/\/ specialize\n+    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(IntMaxMask.class, bb, offset, (IntMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -888,2 +888,2 @@\n-    void intoArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        super.intoArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m);\n+    void intoArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m, offsetInRange);\n@@ -910,2 +910,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m) {\n-        super.intoByteArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -917,2 +917,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m) {\n-        super.intoByteBuffer0Template(IntMaxMask.class, bb, offset, (IntMaxMask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(IntMaxMask.class, bb, offset, (IntMaxMask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2853,1 +2853,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -2856,1 +2856,0 @@\n-        \/\/ FIXME: optimize\n@@ -2858,3 +2857,1 @@\n-        ByteBuffer wb = wrapper(a, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Integer>)m,\n-                   (wb_, o, i)  -> wb_.getInt(o + i * 4));\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -2915,1 +2912,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ true);\n@@ -2918,1 +2915,0 @@\n-        \/\/ FIXME: optimize\n@@ -2920,1 +2916,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -3122,1 +3118,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -3125,1 +3121,0 @@\n-        \/\/ FIXME: optimize\n@@ -3127,3 +3122,1 @@\n-        ByteBuffer wb = wrapper(bb, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Integer>)m,\n-                   (wb_, o, i)  -> wb_.getInt(o + i * 4));\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -3195,2 +3188,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3323,2 +3320,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 4, a.length);\n-            maybeSwap(bo).intoByteArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 4, a.length);\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3359,2 +3360,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 4, bb.limit());\n-            maybeSwap(bo).intoByteBuffer0(bb, offset, m);\n+            if (offset >= 0 && offset <= (bb.limit() - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 4, bb.limit());\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3400,1 +3405,1 @@\n-    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m);\n+    IntVector fromArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange);\n@@ -3404,7 +3409,3 @@\n-    IntVector fromArray0Template(Class<M> maskClass, int[] a, int offset, M m) {\n-        m.check(species());\n-        IntSpecies vsp = vspecies();\n-        return VectorSupport.loadMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset), m,\n-            a, offset, vsp,\n+    IntVector fromArray0Template(Class<M> maskClass, int[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(maskClass, a, arrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -3415,0 +3416,20 @@\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<Integer>>\n+    IntVector fromArray0Template(Class<M> maskClass, C base, long offset, int index, M m, boolean offsetInRange,\n+                        VectorSupport.LoadVectorMaskedOperation<C, IntVector, IntSpecies, M> defaultImpl) {\n+        m.check(species());\n+        IntSpecies vsp = vspecies();\n+        if (offsetInRange) {\n+            return VectorSupport.loadMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset, m, \/* offsetInRange *\/ 1,\n+                base, index, vsp, defaultImpl);\n+        } else {\n+            return VectorSupport.loadMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset, m, \/* offsetInRange *\/ 0,\n+                base, index, vsp, defaultImpl);\n+        }\n+    }\n+\n@@ -3470,1 +3491,1 @@\n-    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m);\n+    IntVector fromByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange);\n@@ -3474,7 +3495,4 @@\n-    IntVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        IntSpecies vsp = vspecies();\n-        m.check(vsp);\n-        return VectorSupport.loadMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset), m,\n-            a, offset, vsp,\n+    IntVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n+            maskClass, a, byteArrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -3505,1 +3523,1 @@\n-    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m);\n+    IntVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange);\n@@ -3509,1 +3527,1 @@\n-    IntVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    IntVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3514,1 +3532,1 @@\n-                bb, offset, m, vsp,\n+                bb, offset, m, vsp, offsetInRange,\n@@ -3542,1 +3560,1 @@\n-    void intoArray0(int[] a, int offset, VectorMask<Integer> m);\n+    void intoArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange);\n@@ -3546,1 +3564,12 @@\n-    void intoArray0Template(Class<M> maskClass, int[] a, int offset, M m) {\n+    void intoArray0Template(Class<M> maskClass, int[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, arrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+    }\n+\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<Integer>>\n+    void intoArray0Template(Class<M> maskClass, C base, long offset, int index, IntVector v, M m, boolean offsetInRange,\n+                            VectorSupport.StoreVectorMaskedOperation<C, IntVector, M> defaultImpl) {\n@@ -3549,7 +3578,13 @@\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset),\n-            this, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+        if (offsetInRange) {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 1,\n+                base, index, defaultImpl);\n+        } else {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 0,\n+                base, index, defaultImpl);\n+        }\n@@ -3611,1 +3646,1 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m);\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange);\n@@ -3615,7 +3650,3 @@\n-    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        IntSpecies vsp = vspecies();\n-        m.check(vsp);\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset),\n-            this, m, a, offset,\n+    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, byteArrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n@@ -3644,1 +3675,1 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange);\n@@ -3648,1 +3679,1 @@\n-    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3653,1 +3684,1 @@\n-                this, m, bb, offset,\n+                this, m, offsetInRange, bb, offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":89,"deletions":58,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -818,2 +818,2 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m) {\n-        return super.fromArray0Template(Long128Mask.class, a, offset, (Long128Mask) m);  \/\/ specialize\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Long128Mask.class, a, offset, (Long128Mask) m, offsetInRange);  \/\/ specialize\n@@ -841,2 +841,2 @@\n-    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m) {\n-        return super.fromByteArray0Template(Long128Mask.class, a, offset, (Long128Mask) m);  \/\/ specialize\n+    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Long128Mask.class, a, offset, (Long128Mask) m, offsetInRange);  \/\/ specialize\n@@ -855,2 +855,2 @@\n-    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m) {\n-        return super.fromByteBuffer0Template(Long128Mask.class, bb, offset, (Long128Mask) m);  \/\/ specialize\n+    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Long128Mask.class, bb, offset, (Long128Mask) m, offsetInRange);  \/\/ specialize\n@@ -869,2 +869,2 @@\n-    void intoArray0(long[] a, int offset, VectorMask<Long> m) {\n-        super.intoArray0Template(Long128Mask.class, a, offset, (Long128Mask) m);\n+    void intoArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoArray0Template(Long128Mask.class, a, offset, (Long128Mask) m, offsetInRange);\n@@ -891,2 +891,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m) {\n-        super.intoByteArray0Template(Long128Mask.class, a, offset, (Long128Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Long128Mask.class, a, offset, (Long128Mask) m, offsetInRange);  \/\/ specialize\n@@ -898,2 +898,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m) {\n-        super.intoByteBuffer0Template(Long128Mask.class, bb, offset, (Long128Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Long128Mask.class, bb, offset, (Long128Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -822,2 +822,2 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m) {\n-        return super.fromArray0Template(Long256Mask.class, a, offset, (Long256Mask) m);  \/\/ specialize\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Long256Mask.class, a, offset, (Long256Mask) m, offsetInRange);  \/\/ specialize\n@@ -845,2 +845,2 @@\n-    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m) {\n-        return super.fromByteArray0Template(Long256Mask.class, a, offset, (Long256Mask) m);  \/\/ specialize\n+    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Long256Mask.class, a, offset, (Long256Mask) m, offsetInRange);  \/\/ specialize\n@@ -859,2 +859,2 @@\n-    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m) {\n-        return super.fromByteBuffer0Template(Long256Mask.class, bb, offset, (Long256Mask) m);  \/\/ specialize\n+    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Long256Mask.class, bb, offset, (Long256Mask) m, offsetInRange);  \/\/ specialize\n@@ -873,2 +873,2 @@\n-    void intoArray0(long[] a, int offset, VectorMask<Long> m) {\n-        super.intoArray0Template(Long256Mask.class, a, offset, (Long256Mask) m);\n+    void intoArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoArray0Template(Long256Mask.class, a, offset, (Long256Mask) m, offsetInRange);\n@@ -895,2 +895,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m) {\n-        super.intoByteArray0Template(Long256Mask.class, a, offset, (Long256Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Long256Mask.class, a, offset, (Long256Mask) m, offsetInRange);  \/\/ specialize\n@@ -902,2 +902,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m) {\n-        super.intoByteBuffer0Template(Long256Mask.class, bb, offset, (Long256Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Long256Mask.class, bb, offset, (Long256Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -830,2 +830,2 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m) {\n-        return super.fromArray0Template(Long512Mask.class, a, offset, (Long512Mask) m);  \/\/ specialize\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Long512Mask.class, a, offset, (Long512Mask) m, offsetInRange);  \/\/ specialize\n@@ -853,2 +853,2 @@\n-    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m) {\n-        return super.fromByteArray0Template(Long512Mask.class, a, offset, (Long512Mask) m);  \/\/ specialize\n+    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Long512Mask.class, a, offset, (Long512Mask) m, offsetInRange);  \/\/ specialize\n@@ -867,2 +867,2 @@\n-    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m) {\n-        return super.fromByteBuffer0Template(Long512Mask.class, bb, offset, (Long512Mask) m);  \/\/ specialize\n+    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Long512Mask.class, bb, offset, (Long512Mask) m, offsetInRange);  \/\/ specialize\n@@ -881,2 +881,2 @@\n-    void intoArray0(long[] a, int offset, VectorMask<Long> m) {\n-        super.intoArray0Template(Long512Mask.class, a, offset, (Long512Mask) m);\n+    void intoArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoArray0Template(Long512Mask.class, a, offset, (Long512Mask) m, offsetInRange);\n@@ -903,2 +903,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m) {\n-        super.intoByteArray0Template(Long512Mask.class, a, offset, (Long512Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Long512Mask.class, a, offset, (Long512Mask) m, offsetInRange);  \/\/ specialize\n@@ -910,2 +910,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m) {\n-        super.intoByteBuffer0Template(Long512Mask.class, bb, offset, (Long512Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Long512Mask.class, bb, offset, (Long512Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -816,2 +816,2 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m) {\n-        return super.fromArray0Template(Long64Mask.class, a, offset, (Long64Mask) m);  \/\/ specialize\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Long64Mask.class, a, offset, (Long64Mask) m, offsetInRange);  \/\/ specialize\n@@ -839,2 +839,2 @@\n-    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m) {\n-        return super.fromByteArray0Template(Long64Mask.class, a, offset, (Long64Mask) m);  \/\/ specialize\n+    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Long64Mask.class, a, offset, (Long64Mask) m, offsetInRange);  \/\/ specialize\n@@ -853,2 +853,2 @@\n-    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m) {\n-        return super.fromByteBuffer0Template(Long64Mask.class, bb, offset, (Long64Mask) m);  \/\/ specialize\n+    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Long64Mask.class, bb, offset, (Long64Mask) m, offsetInRange);  \/\/ specialize\n@@ -867,2 +867,2 @@\n-    void intoArray0(long[] a, int offset, VectorMask<Long> m) {\n-        super.intoArray0Template(Long64Mask.class, a, offset, (Long64Mask) m);\n+    void intoArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoArray0Template(Long64Mask.class, a, offset, (Long64Mask) m, offsetInRange);\n@@ -889,2 +889,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m) {\n-        super.intoByteArray0Template(Long64Mask.class, a, offset, (Long64Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Long64Mask.class, a, offset, (Long64Mask) m, offsetInRange);  \/\/ specialize\n@@ -896,2 +896,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m) {\n-        super.intoByteBuffer0Template(Long64Mask.class, bb, offset, (Long64Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Long64Mask.class, bb, offset, (Long64Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -816,2 +816,2 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m) {\n-        return super.fromArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m);  \/\/ specialize\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -839,2 +839,2 @@\n-    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m) {\n-        return super.fromByteArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m);  \/\/ specialize\n+    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -853,2 +853,2 @@\n-    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m) {\n-        return super.fromByteBuffer0Template(LongMaxMask.class, bb, offset, (LongMaxMask) m);  \/\/ specialize\n+    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(LongMaxMask.class, bb, offset, (LongMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -867,2 +867,2 @@\n-    void intoArray0(long[] a, int offset, VectorMask<Long> m) {\n-        super.intoArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m);\n+    void intoArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m, offsetInRange);\n@@ -889,2 +889,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m) {\n-        super.intoByteArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -896,2 +896,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m) {\n-        super.intoByteBuffer0Template(LongMaxMask.class, bb, offset, (LongMaxMask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(LongMaxMask.class, bb, offset, (LongMaxMask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2714,1 +2714,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -2717,1 +2717,0 @@\n-        \/\/ FIXME: optimize\n@@ -2719,3 +2718,1 @@\n-        ByteBuffer wb = wrapper(a, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Long>)m,\n-                   (wb_, o, i)  -> wb_.getLong(o + i * 8));\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -2776,1 +2773,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ true);\n@@ -2779,1 +2776,0 @@\n-        \/\/ FIXME: optimize\n@@ -2781,1 +2777,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -3001,1 +2997,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -3004,1 +3000,0 @@\n-        \/\/ FIXME: optimize\n@@ -3006,3 +3001,1 @@\n-        ByteBuffer wb = wrapper(bb, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Long>)m,\n-                   (wb_, o, i)  -> wb_.getLong(o + i * 8));\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -3074,2 +3067,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3221,2 +3218,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 8, a.length);\n-            maybeSwap(bo).intoByteArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 8, a.length);\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3257,2 +3258,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 8, bb.limit());\n-            maybeSwap(bo).intoByteBuffer0(bb, offset, m);\n+            if (offset >= 0 && offset <= (bb.limit() - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 8, bb.limit());\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3298,1 +3303,1 @@\n-    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m);\n+    LongVector fromArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange);\n@@ -3302,7 +3307,3 @@\n-    LongVector fromArray0Template(Class<M> maskClass, long[] a, int offset, M m) {\n-        m.check(species());\n-        LongSpecies vsp = vspecies();\n-        return VectorSupport.loadMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset), m,\n-            a, offset, vsp,\n+    LongVector fromArray0Template(Class<M> maskClass, long[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(maskClass, a, arrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -3313,0 +3314,20 @@\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<Long>>\n+    LongVector fromArray0Template(Class<M> maskClass, C base, long offset, int index, M m, boolean offsetInRange,\n+                        VectorSupport.LoadVectorMaskedOperation<C, LongVector, LongSpecies, M> defaultImpl) {\n+        m.check(species());\n+        LongSpecies vsp = vspecies();\n+        if (offsetInRange) {\n+            return VectorSupport.loadMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset, m, \/* offsetInRange *\/ 1,\n+                base, index, vsp, defaultImpl);\n+        } else {\n+            return VectorSupport.loadMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset, m, \/* offsetInRange *\/ 0,\n+                base, index, vsp, defaultImpl);\n+        }\n+    }\n+\n@@ -3386,1 +3407,1 @@\n-    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m);\n+    LongVector fromByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange);\n@@ -3390,7 +3411,4 @@\n-    LongVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        LongSpecies vsp = vspecies();\n-        m.check(vsp);\n-        return VectorSupport.loadMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset), m,\n-            a, offset, vsp,\n+    LongVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n+            maskClass, a, byteArrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -3421,1 +3439,1 @@\n-    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m);\n+    LongVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange);\n@@ -3425,1 +3443,1 @@\n-    LongVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    LongVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3430,1 +3448,1 @@\n-                bb, offset, m, vsp,\n+                bb, offset, m, vsp, offsetInRange,\n@@ -3458,1 +3476,1 @@\n-    void intoArray0(long[] a, int offset, VectorMask<Long> m);\n+    void intoArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange);\n@@ -3462,1 +3480,12 @@\n-    void intoArray0Template(Class<M> maskClass, long[] a, int offset, M m) {\n+    void intoArray0Template(Class<M> maskClass, long[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, arrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+    }\n+\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<Long>>\n+    void intoArray0Template(Class<M> maskClass, C base, long offset, int index, LongVector v, M m, boolean offsetInRange,\n+                            VectorSupport.StoreVectorMaskedOperation<C, LongVector, M> defaultImpl) {\n@@ -3465,7 +3494,13 @@\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset),\n-            this, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+        if (offsetInRange) {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 1,\n+                base, index, defaultImpl);\n+        } else {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 0,\n+                base, index, defaultImpl);\n+        }\n@@ -3546,1 +3581,1 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m);\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange);\n@@ -3550,7 +3585,3 @@\n-    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        LongSpecies vsp = vspecies();\n-        m.check(vsp);\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset),\n-            this, m, a, offset,\n+    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, byteArrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n@@ -3579,1 +3610,1 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange);\n@@ -3583,1 +3614,1 @@\n-    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3588,1 +3619,1 @@\n-                this, m, bb, offset,\n+                this, m, offsetInRange, bb, offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":89,"deletions":58,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -840,2 +840,2 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m) {\n-        return super.fromArray0Template(Short128Mask.class, a, offset, (Short128Mask) m);  \/\/ specialize\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Short128Mask.class, a, offset, (Short128Mask) m, offsetInRange);  \/\/ specialize\n@@ -855,2 +855,2 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        return super.fromCharArray0Template(Short128Mask.class, a, offset, (Short128Mask) m);  \/\/ specialize\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromCharArray0Template(Short128Mask.class, a, offset, (Short128Mask) m, offsetInRange);  \/\/ specialize\n@@ -870,2 +870,2 @@\n-    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m) {\n-        return super.fromByteArray0Template(Short128Mask.class, a, offset, (Short128Mask) m);  \/\/ specialize\n+    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Short128Mask.class, a, offset, (Short128Mask) m, offsetInRange);  \/\/ specialize\n@@ -884,2 +884,2 @@\n-    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m) {\n-        return super.fromByteBuffer0Template(Short128Mask.class, bb, offset, (Short128Mask) m);  \/\/ specialize\n+    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Short128Mask.class, bb, offset, (Short128Mask) m, offsetInRange);  \/\/ specialize\n@@ -898,2 +898,2 @@\n-    void intoArray0(short[] a, int offset, VectorMask<Short> m) {\n-        super.intoArray0Template(Short128Mask.class, a, offset, (Short128Mask) m);\n+    void intoArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoArray0Template(Short128Mask.class, a, offset, (Short128Mask) m, offsetInRange);\n@@ -914,2 +914,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m) {\n-        super.intoByteArray0Template(Short128Mask.class, a, offset, (Short128Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Short128Mask.class, a, offset, (Short128Mask) m, offsetInRange);  \/\/ specialize\n@@ -921,2 +921,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m) {\n-        super.intoByteBuffer0Template(Short128Mask.class, bb, offset, (Short128Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Short128Mask.class, bb, offset, (Short128Mask) m, offsetInRange);\n@@ -928,2 +928,2 @@\n-    void intoCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        super.intoCharArray0Template(Short128Mask.class, a, offset, (Short128Mask) m);\n+    void intoCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoCharArray0Template(Short128Mask.class, a, offset, (Short128Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -856,2 +856,2 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m) {\n-        return super.fromArray0Template(Short256Mask.class, a, offset, (Short256Mask) m);  \/\/ specialize\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Short256Mask.class, a, offset, (Short256Mask) m, offsetInRange);  \/\/ specialize\n@@ -871,2 +871,2 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        return super.fromCharArray0Template(Short256Mask.class, a, offset, (Short256Mask) m);  \/\/ specialize\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromCharArray0Template(Short256Mask.class, a, offset, (Short256Mask) m, offsetInRange);  \/\/ specialize\n@@ -886,2 +886,2 @@\n-    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m) {\n-        return super.fromByteArray0Template(Short256Mask.class, a, offset, (Short256Mask) m);  \/\/ specialize\n+    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Short256Mask.class, a, offset, (Short256Mask) m, offsetInRange);  \/\/ specialize\n@@ -900,2 +900,2 @@\n-    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m) {\n-        return super.fromByteBuffer0Template(Short256Mask.class, bb, offset, (Short256Mask) m);  \/\/ specialize\n+    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Short256Mask.class, bb, offset, (Short256Mask) m, offsetInRange);  \/\/ specialize\n@@ -914,2 +914,2 @@\n-    void intoArray0(short[] a, int offset, VectorMask<Short> m) {\n-        super.intoArray0Template(Short256Mask.class, a, offset, (Short256Mask) m);\n+    void intoArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoArray0Template(Short256Mask.class, a, offset, (Short256Mask) m, offsetInRange);\n@@ -930,2 +930,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m) {\n-        super.intoByteArray0Template(Short256Mask.class, a, offset, (Short256Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Short256Mask.class, a, offset, (Short256Mask) m, offsetInRange);  \/\/ specialize\n@@ -937,2 +937,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m) {\n-        super.intoByteBuffer0Template(Short256Mask.class, bb, offset, (Short256Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Short256Mask.class, bb, offset, (Short256Mask) m, offsetInRange);\n@@ -944,2 +944,2 @@\n-    void intoCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        super.intoCharArray0Template(Short256Mask.class, a, offset, (Short256Mask) m);\n+    void intoCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoCharArray0Template(Short256Mask.class, a, offset, (Short256Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -888,2 +888,2 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m) {\n-        return super.fromArray0Template(Short512Mask.class, a, offset, (Short512Mask) m);  \/\/ specialize\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Short512Mask.class, a, offset, (Short512Mask) m, offsetInRange);  \/\/ specialize\n@@ -903,2 +903,2 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        return super.fromCharArray0Template(Short512Mask.class, a, offset, (Short512Mask) m);  \/\/ specialize\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromCharArray0Template(Short512Mask.class, a, offset, (Short512Mask) m, offsetInRange);  \/\/ specialize\n@@ -918,2 +918,2 @@\n-    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m) {\n-        return super.fromByteArray0Template(Short512Mask.class, a, offset, (Short512Mask) m);  \/\/ specialize\n+    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Short512Mask.class, a, offset, (Short512Mask) m, offsetInRange);  \/\/ specialize\n@@ -932,2 +932,2 @@\n-    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m) {\n-        return super.fromByteBuffer0Template(Short512Mask.class, bb, offset, (Short512Mask) m);  \/\/ specialize\n+    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Short512Mask.class, bb, offset, (Short512Mask) m, offsetInRange);  \/\/ specialize\n@@ -946,2 +946,2 @@\n-    void intoArray0(short[] a, int offset, VectorMask<Short> m) {\n-        super.intoArray0Template(Short512Mask.class, a, offset, (Short512Mask) m);\n+    void intoArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoArray0Template(Short512Mask.class, a, offset, (Short512Mask) m, offsetInRange);\n@@ -962,2 +962,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m) {\n-        super.intoByteArray0Template(Short512Mask.class, a, offset, (Short512Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Short512Mask.class, a, offset, (Short512Mask) m, offsetInRange);  \/\/ specialize\n@@ -969,2 +969,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m) {\n-        super.intoByteBuffer0Template(Short512Mask.class, bb, offset, (Short512Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Short512Mask.class, bb, offset, (Short512Mask) m, offsetInRange);\n@@ -976,2 +976,2 @@\n-    void intoCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        super.intoCharArray0Template(Short512Mask.class, a, offset, (Short512Mask) m);\n+    void intoCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoCharArray0Template(Short512Mask.class, a, offset, (Short512Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -832,2 +832,2 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m) {\n-        return super.fromArray0Template(Short64Mask.class, a, offset, (Short64Mask) m);  \/\/ specialize\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromArray0Template(Short64Mask.class, a, offset, (Short64Mask) m, offsetInRange);  \/\/ specialize\n@@ -847,2 +847,2 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        return super.fromCharArray0Template(Short64Mask.class, a, offset, (Short64Mask) m);  \/\/ specialize\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromCharArray0Template(Short64Mask.class, a, offset, (Short64Mask) m, offsetInRange);  \/\/ specialize\n@@ -862,2 +862,2 @@\n-    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m) {\n-        return super.fromByteArray0Template(Short64Mask.class, a, offset, (Short64Mask) m);  \/\/ specialize\n+    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(Short64Mask.class, a, offset, (Short64Mask) m, offsetInRange);  \/\/ specialize\n@@ -876,2 +876,2 @@\n-    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m) {\n-        return super.fromByteBuffer0Template(Short64Mask.class, bb, offset, (Short64Mask) m);  \/\/ specialize\n+    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(Short64Mask.class, bb, offset, (Short64Mask) m, offsetInRange);  \/\/ specialize\n@@ -890,2 +890,2 @@\n-    void intoArray0(short[] a, int offset, VectorMask<Short> m) {\n-        super.intoArray0Template(Short64Mask.class, a, offset, (Short64Mask) m);\n+    void intoArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoArray0Template(Short64Mask.class, a, offset, (Short64Mask) m, offsetInRange);\n@@ -906,2 +906,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m) {\n-        super.intoByteArray0Template(Short64Mask.class, a, offset, (Short64Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Short64Mask.class, a, offset, (Short64Mask) m, offsetInRange);  \/\/ specialize\n@@ -913,2 +913,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m) {\n-        super.intoByteBuffer0Template(Short64Mask.class, bb, offset, (Short64Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Short64Mask.class, bb, offset, (Short64Mask) m, offsetInRange);\n@@ -920,2 +920,2 @@\n-    void intoCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        super.intoCharArray0Template(Short64Mask.class, a, offset, (Short64Mask) m);\n+    void intoCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoCharArray0Template(Short64Mask.class, a, offset, (Short64Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -826,2 +826,2 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m) {\n-        return super.fromArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m);  \/\/ specialize\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -841,2 +841,2 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        return super.fromCharArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m);  \/\/ specialize\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromCharArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -856,2 +856,2 @@\n-    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m) {\n-        return super.fromByteArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m);  \/\/ specialize\n+    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -870,2 +870,2 @@\n-    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m) {\n-        return super.fromByteBuffer0Template(ShortMaxMask.class, bb, offset, (ShortMaxMask) m);  \/\/ specialize\n+    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template(ShortMaxMask.class, bb, offset, (ShortMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -884,2 +884,2 @@\n-    void intoArray0(short[] a, int offset, VectorMask<Short> m) {\n-        super.intoArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m);\n+    void intoArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m, offsetInRange);\n@@ -900,2 +900,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m) {\n-        super.intoByteArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -907,2 +907,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m) {\n-        super.intoByteBuffer0Template(ShortMaxMask.class, bb, offset, (ShortMaxMask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(ShortMaxMask.class, bb, offset, (ShortMaxMask) m, offsetInRange);\n@@ -914,2 +914,2 @@\n-    void intoCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        super.intoCharArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m);\n+    void intoCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoCharArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2861,1 +2861,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -2864,1 +2864,0 @@\n-        \/\/ FIXME: optimize\n@@ -2866,3 +2865,1 @@\n-        ByteBuffer wb = wrapper(a, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Short>)m,\n-                   (wb_, o, i)  -> wb_.getShort(o + i * 2));\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -2923,1 +2920,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ true);\n@@ -2926,1 +2923,0 @@\n-        \/\/ FIXME: optimize\n@@ -2928,1 +2924,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -3072,1 +3068,1 @@\n-            return vsp.dummyVector().fromCharArray0(a, offset, m);\n+            return vsp.dummyVector().fromCharArray0(a, offset, m, \/* offsetInRange *\/ true);\n@@ -3075,1 +3071,0 @@\n-        \/\/ FIXME: optimize\n@@ -3077,1 +3072,1 @@\n-        return vsp.vOp(m, i -> (short) a[offset + i]);\n+        return vsp.dummyVector().fromCharArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -3257,1 +3252,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -3260,1 +3255,0 @@\n-        \/\/ FIXME: optimize\n@@ -3262,3 +3256,1 @@\n-        ByteBuffer wb = wrapper(bb, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<Short>)m,\n-                   (wb_, o, i)  -> wb_.getShort(o + i * 2));\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -3330,2 +3322,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3477,2 +3473,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoCharArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoCharArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoCharArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3593,2 +3593,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 2, a.length);\n-            maybeSwap(bo).intoByteArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 2, a.length);\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3629,2 +3633,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 2, bb.limit());\n-            maybeSwap(bo).intoByteBuffer0(bb, offset, m);\n+            if (offset >= 0 && offset <= (bb.limit() - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 2, bb.limit());\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3670,1 +3678,1 @@\n-    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m);\n+    ShortVector fromArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange);\n@@ -3674,7 +3682,3 @@\n-    ShortVector fromArray0Template(Class<M> maskClass, short[] a, int offset, M m) {\n-        m.check(species());\n-        ShortSpecies vsp = vspecies();\n-        return VectorSupport.loadMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset), m,\n-            a, offset, vsp,\n+    ShortVector fromArray0Template(Class<M> maskClass, short[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(maskClass, a, arrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -3685,0 +3689,20 @@\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<Short>>\n+    ShortVector fromArray0Template(Class<M> maskClass, C base, long offset, int index, M m, boolean offsetInRange,\n+                        VectorSupport.LoadVectorMaskedOperation<C, ShortVector, ShortSpecies, M> defaultImpl) {\n+        m.check(species());\n+        ShortSpecies vsp = vspecies();\n+        if (offsetInRange) {\n+            return VectorSupport.loadMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset, m, \/* offsetInRange *\/ 1,\n+                base, index, vsp, defaultImpl);\n+        } else {\n+            return VectorSupport.loadMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset, m, \/* offsetInRange *\/ 0,\n+                base, index, vsp, defaultImpl);\n+        }\n+    }\n+\n@@ -3703,1 +3727,1 @@\n-    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m);\n+    ShortVector fromCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange);\n@@ -3707,9 +3731,6 @@\n-    ShortVector fromCharArray0Template(Class<M> maskClass, char[] a, int offset, M m) {\n-        m.check(species());\n-        ShortSpecies vsp = vspecies();\n-        return VectorSupport.loadMasked(\n-                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-                a, charArrayAddress(a, offset), m,\n-                a, offset, vsp,\n-                (arr, off, s, vm) -> s.ldOp(arr, off, vm,\n-                                            (arr_, off_, i) -> (short) arr_[off_ + i]));\n+    ShortVector fromCharArray0Template(Class<M> maskClass, char[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n+            maskClass, a, charArrayAddress(a, offset),\n+            offset, m, offsetInRange,\n+            (arr, off, s, vm) -> s.ldOp(arr, off, vm,\n+                                        (arr_, off_, i) -> (short) arr_[off_ + i]));\n@@ -3738,1 +3759,1 @@\n-    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m);\n+    ShortVector fromByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange);\n@@ -3742,7 +3763,4 @@\n-    ShortVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        ShortSpecies vsp = vspecies();\n-        m.check(vsp);\n-        return VectorSupport.loadMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset), m,\n-            a, offset, vsp,\n+    ShortVector fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n+            maskClass, a, byteArrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -3773,1 +3791,1 @@\n-    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m);\n+    ShortVector fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange);\n@@ -3777,1 +3795,1 @@\n-    ShortVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    ShortVector fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3782,1 +3800,1 @@\n-                bb, offset, m, vsp,\n+                bb, offset, m, vsp, offsetInRange,\n@@ -3810,1 +3828,1 @@\n-    void intoArray0(short[] a, int offset, VectorMask<Short> m);\n+    void intoArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange);\n@@ -3814,1 +3832,12 @@\n-    void intoArray0Template(Class<M> maskClass, short[] a, int offset, M m) {\n+    void intoArray0Template(Class<M> maskClass, short[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, arrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+    }\n+\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<Short>>\n+    void intoArray0Template(Class<M> maskClass, C base, long offset, int index, ShortVector v, M m, boolean offsetInRange,\n+                            VectorSupport.StoreVectorMaskedOperation<C, ShortVector, M> defaultImpl) {\n@@ -3817,7 +3846,13 @@\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset),\n-            this, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+        if (offsetInRange) {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 1,\n+                base, index, defaultImpl);\n+        } else {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 0,\n+                base, index, defaultImpl);\n+        }\n@@ -3846,1 +3881,1 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m);\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange);\n@@ -3850,7 +3885,3 @@\n-    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        ShortSpecies vsp = vspecies();\n-        m.check(vsp);\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset),\n-            this, m, a, offset,\n+    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, byteArrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n@@ -3879,1 +3910,1 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange);\n@@ -3883,1 +3914,1 @@\n-    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3888,1 +3919,1 @@\n-                this, m, bb, offset,\n+                this, m, offsetInRange, bb, offset,\n@@ -3898,1 +3929,1 @@\n-    void intoCharArray0(char[] a, int offset, VectorMask<Short> m);\n+    void intoCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange);\n@@ -3902,10 +3933,5 @@\n-    void intoCharArray0Template(Class<M> maskClass, char[] a, int offset, M m) {\n-        m.check(species());\n-        ShortSpecies vsp = vspecies();\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, charArrayAddress(a, offset),\n-            this, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = (char) e));\n+    void intoCharArray0Template(Class<M> maskClass, char[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, charArrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = (char) e));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":110,"deletions":84,"binary":false,"changes":194,"status":"modified"},{"patch":"@@ -3379,1 +3379,1 @@\n-            return vsp.dummyVector().fromByteArray0(a, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -3382,1 +3382,0 @@\n-        \/\/ FIXME: optimize\n@@ -3384,3 +3383,1 @@\n-        ByteBuffer wb = wrapper(a, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<$Boxtype$>)m,\n-                   (wb_, o, i)  -> wb_.get{#if[byte]?(:$Type$(}o + i * $sizeInBytes$));\n+        return vsp.dummyVector().fromByteArray0(a, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -3441,1 +3438,1 @@\n-            return vsp.dummyVector().fromArray0(a, offset, m);\n+            return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ true);\n@@ -3444,1 +3441,0 @@\n-        \/\/ FIXME: optimize\n@@ -3446,1 +3442,1 @@\n-        return vsp.vOp(m, i -> a[offset + i]);\n+        return vsp.dummyVector().fromArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -3662,1 +3658,1 @@\n-            return vsp.dummyVector().fromCharArray0(a, offset, m);\n+            return vsp.dummyVector().fromCharArray0(a, offset, m, \/* offsetInRange *\/ true);\n@@ -3665,1 +3661,0 @@\n-        \/\/ FIXME: optimize\n@@ -3667,1 +3662,1 @@\n-        return vsp.vOp(m, i -> (short) a[offset + i]);\n+        return vsp.dummyVector().fromCharArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -3822,1 +3817,1 @@\n-            return vsp.dummyVector().fromBooleanArray0(a, offset, m);\n+            return vsp.dummyVector().fromBooleanArray0(a, offset, m, \/* offsetInRange*\/ true);\n@@ -3825,1 +3820,0 @@\n-        \/\/ FIXME: optimize\n@@ -3827,1 +3821,1 @@\n-        return vsp.vOp(m, i -> (byte) (a[offset + i] ? 1 : 0));\n+        return vsp.dummyVector().fromBooleanArray0(a, offset, m, \/* offsetInRange *\/ false);\n@@ -4013,1 +4007,1 @@\n-            return vsp.dummyVector().fromByteBuffer0(bb, offset, m).maybeSwap(bo);\n+            return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true).maybeSwap(bo);\n@@ -4016,1 +4010,0 @@\n-        \/\/ FIXME: optimize\n@@ -4018,3 +4011,1 @@\n-        ByteBuffer wb = wrapper(bb, bo);\n-        return vsp.ldOp(wb, offset, (AbstractMask<$Boxtype$>)m,\n-                   (wb_, o, i)  -> wb_.get{#if[byte]?(:$Type$(}o + i * $sizeInBytes$));\n+        return vsp.dummyVector().fromByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false).maybeSwap(bo);\n@@ -4086,2 +4077,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -4304,2 +4299,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoCharArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoCharArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoCharArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -4466,2 +4465,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoBooleanArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoBooleanArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoBooleanArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -4588,2 +4591,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, $sizeInBytes$, a.length);\n-            maybeSwap(bo).intoByteArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, $sizeInBytes$, a.length);\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -4624,2 +4631,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, $sizeInBytes$, bb.limit());\n-            maybeSwap(bo).intoByteBuffer0(bb, offset, m);\n+            if (offset >= 0 && offset <= (bb.limit() - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, $sizeInBytes$, bb.limit());\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -4665,1 +4676,1 @@\n-    $abstractvectortype$ fromArray0($type$[] a, int offset, VectorMask<$Boxtype$> m);\n+    $abstractvectortype$ fromArray0($type$[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange);\n@@ -4669,7 +4680,3 @@\n-    $abstractvectortype$ fromArray0Template(Class<M> maskClass, $type$[] a, int offset, M m) {\n-        m.check(species());\n-        $Type$Species vsp = vspecies();\n-        return VectorSupport.loadMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset), m,\n-            a, offset, vsp,\n+    $abstractvectortype$ fromArray0Template(Class<M> maskClass, $type$[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(maskClass, a, arrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -4680,0 +4687,20 @@\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<$Boxtype$>>\n+    $abstractvectortype$ fromArray0Template(Class<M> maskClass, C base, long offset, int index, M m, boolean offsetInRange,\n+                        VectorSupport.LoadVectorMaskedOperation<C, $abstractvectortype$, $Type$Species, M> defaultImpl) {\n+        m.check(species());\n+        $Type$Species vsp = vspecies();\n+        if (offsetInRange) {\n+            return VectorSupport.loadMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset, m, \/* offsetInRange *\/ 1,\n+                base, index, vsp, defaultImpl);\n+        } else {\n+            return VectorSupport.loadMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset, m, \/* offsetInRange *\/ 0,\n+                base, index, vsp, defaultImpl);\n+        }\n+    }\n+\n@@ -4759,1 +4786,1 @@\n-    $abstractvectortype$ fromCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m);\n+    $abstractvectortype$ fromCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange);\n@@ -4763,9 +4790,6 @@\n-    $abstractvectortype$ fromCharArray0Template(Class<M> maskClass, char[] a, int offset, M m) {\n-        m.check(species());\n-        $Type$Species vsp = vspecies();\n-        return VectorSupport.loadMasked(\n-                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-                a, charArrayAddress(a, offset), m,\n-                a, offset, vsp,\n-                (arr, off, s, vm) -> s.ldOp(arr, off, vm,\n-                                            (arr_, off_, i) -> (short) arr_[off_ + i]));\n+    $abstractvectortype$ fromCharArray0Template(Class<M> maskClass, char[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n+            maskClass, a, charArrayAddress(a, offset),\n+            offset, m, offsetInRange,\n+            (arr, off, s, vm) -> s.ldOp(arr, off, vm,\n+                                        (arr_, off_, i) -> (short) arr_[off_ + i]));\n@@ -4793,1 +4817,1 @@\n-    $abstractvectortype$ fromBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m);\n+    $abstractvectortype$ fromBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange);\n@@ -4797,7 +4821,4 @@\n-    $abstractvectortype$ fromBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m) {\n-        m.check(species());\n-        $Type$Species vsp = vspecies();\n-        return VectorSupport.loadMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, booleanArrayAddress(a, offset), m,\n-            a, offset, vsp,\n+    $abstractvectortype$ fromBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n+            maskClass, a, booleanArrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -4828,1 +4849,1 @@\n-    $abstractvectortype$ fromByteArray0(byte[] a, int offset, VectorMask<$Boxtype$> m);\n+    $abstractvectortype$ fromByteArray0(byte[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange);\n@@ -4832,7 +4853,4 @@\n-    $abstractvectortype$ fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        $Type$Species vsp = vspecies();\n-        m.check(vsp);\n-        return VectorSupport.loadMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset), m,\n-            a, offset, vsp,\n+    $abstractvectortype$ fromByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        return fromArray0Template(\n+            maskClass, a, byteArrayAddress(a, offset),\n+            offset, m, offsetInRange,\n@@ -4863,1 +4881,1 @@\n-    $abstractvectortype$ fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<$Boxtype$> m);\n+    $abstractvectortype$ fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange);\n@@ -4867,1 +4885,1 @@\n-    $abstractvectortype$ fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    $abstractvectortype$ fromByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -4872,1 +4890,1 @@\n-                bb, offset, m, vsp,\n+                bb, offset, m, vsp, offsetInRange,\n@@ -4900,1 +4918,1 @@\n-    void intoArray0($type$[] a, int offset, VectorMask<$Boxtype$> m);\n+    void intoArray0($type$[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange);\n@@ -4904,1 +4922,12 @@\n-    void intoArray0Template(Class<M> maskClass, $type$[] a, int offset, M m) {\n+    void intoArray0Template(Class<M> maskClass, $type$[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, arrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+    }\n+\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<$Boxtype$>>\n+    void intoArray0Template(Class<M> maskClass, C base, long offset, int index, $abstractvectortype$ v, M m, boolean offsetInRange,\n+                            VectorSupport.StoreVectorMaskedOperation<C, $abstractvectortype$, M> defaultImpl) {\n@@ -4907,7 +4936,13 @@\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset),\n-            this, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+        if (offsetInRange) {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 1,\n+                base, index, defaultImpl);\n+        } else {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 0,\n+                base, index, defaultImpl);\n+        }\n@@ -4980,1 +5015,1 @@\n-    void intoBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m);\n+    void intoBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange);\n@@ -4984,3 +5019,1 @@\n-    void intoBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m) {\n-        m.check(species());\n-        $Type$Species vsp = vspecies();\n+    void intoBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m, boolean offsetInRange) {\n@@ -4988,7 +5021,4 @@\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, booleanArrayAddress(a, offset),\n-            normalized, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = (e & 1) != 0));\n+        intoArray0Template(maskClass, a, booleanArrayAddress(a, offset), offset,\n+            normalized,  m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = (e & 1) != 0));\n@@ -5016,1 +5046,1 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<$Boxtype$> m);\n+    void intoByteArray0(byte[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange);\n@@ -5020,7 +5050,3 @@\n-    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        $Type$Species vsp = vspecies();\n-        m.check(vsp);\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset),\n-            this, m, a, offset,\n+    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, byteArrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n@@ -5049,1 +5075,1 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<$Boxtype$> m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange);\n@@ -5053,1 +5079,1 @@\n-    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -5058,1 +5084,1 @@\n-                this, m, bb, offset,\n+                this, m, offsetInRange, bb, offset,\n@@ -5069,1 +5095,1 @@\n-    void intoCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m);\n+    void intoCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange);\n@@ -5073,10 +5099,5 @@\n-    void intoCharArray0Template(Class<M> maskClass, char[] a, int offset, M m) {\n-        m.check(species());\n-        $Type$Species vsp = vspecies();\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, charArrayAddress(a, offset),\n-            this, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = (char) e));\n+    void intoCharArray0Template(Class<M> maskClass, char[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, charArrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = (char) e));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":129,"deletions":108,"binary":false,"changes":237,"status":"modified"},{"patch":"@@ -1114,2 +1114,2 @@\n-    $abstractvectortype$ fromArray0($type$[] a, int offset, VectorMask<$Boxtype$> m) {\n-        return super.fromArray0Template($masktype$.class, a, offset, ($masktype$) m);  \/\/ specialize\n+    $abstractvectortype$ fromArray0($type$[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange) {\n+        return super.fromArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n@@ -1138,2 +1138,2 @@\n-    $abstractvectortype$ fromCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m) {\n-        return super.fromCharArray0Template($masktype$.class, a, offset, ($masktype$) m);  \/\/ specialize\n+    $abstractvectortype$ fromCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange) {\n+        return super.fromCharArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n@@ -1154,2 +1154,2 @@\n-    $abstractvectortype$ fromBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m) {\n-        return super.fromBooleanArray0Template($masktype$.class, a, offset, ($masktype$) m);  \/\/ specialize\n+    $abstractvectortype$ fromBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange) {\n+        return super.fromBooleanArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n@@ -1169,2 +1169,2 @@\n-    $abstractvectortype$ fromByteArray0(byte[] a, int offset, VectorMask<$Boxtype$> m) {\n-        return super.fromByteArray0Template($masktype$.class, a, offset, ($masktype$) m);  \/\/ specialize\n+    $abstractvectortype$ fromByteArray0(byte[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange) {\n+        return super.fromByteArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n@@ -1183,2 +1183,2 @@\n-    $abstractvectortype$ fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<$Boxtype$> m) {\n-        return super.fromByteBuffer0Template($masktype$.class, bb, offset, ($masktype$) m);  \/\/ specialize\n+    $abstractvectortype$ fromByteBuffer0(ByteBuffer bb, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange) {\n+        return super.fromByteBuffer0Template($masktype$.class, bb, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n@@ -1197,2 +1197,2 @@\n-    void intoArray0($type$[] a, int offset, VectorMask<$Boxtype$> m) {\n-        super.intoArray0Template($masktype$.class, a, offset, ($masktype$) m);\n+    void intoArray0($type$[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange) {\n+        super.intoArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);\n@@ -1214,2 +1214,2 @@\n-    void intoBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m) {\n-        super.intoBooleanArray0Template($masktype$.class, a, offset, ($masktype$) m);\n+    void intoBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange) {\n+        super.intoBooleanArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);\n@@ -1229,2 +1229,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<$Boxtype$> m) {\n-        super.intoByteArray0Template($masktype$.class, a, offset, ($masktype$) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange) {\n+        super.intoByteArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n@@ -1236,2 +1236,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<$Boxtype$> m) {\n-        super.intoByteBuffer0Template($masktype$.class, bb, offset, ($masktype$) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template($masktype$.class, bb, offset, ($masktype$) m, offsetInRange);\n@@ -1244,2 +1244,2 @@\n-    void intoCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m) {\n-        super.intoCharArray0Template($masktype$.class, a, offset, ($masktype$) m);\n+    void intoCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange) {\n+        super.intoCharArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,141 @@\n+\/\/\n+\/\/ Copyright (c) 2022, Arm Limited. All rights reserved.\n+\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\/\/\n+\/\/ This code is free software; you can redistribute it and\/or modify it\n+\/\/ under the terms of the GNU General Public License version 2 only, as\n+\/\/ published by the Free Software Foundation.\n+\/\/\n+\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n+\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+\/\/ version 2 for more details (a copy is included in the LICENSE file that\n+\/\/ accompanied this code).\n+\/\/\n+\/\/ You should have received a copy of the GNU General Public License version\n+\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n+\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\/\/\n+\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+\/\/ or visit www.oracle.com if you need additional information or have any\n+\/\/ questions.\n+\/\/\n+\/\/\n+package org.openjdk.bench.jdk.incubator.vector;\n+\n+import java.util.concurrent.TimeUnit;\n+import jdk.incubator.vector.*;\n+import org.openjdk.jmh.annotations.*;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 3, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 1, jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+public class LoadMaskedIOOBEBenchmark {\n+    @Param({\"1026\"})\n+    private int inSize;\n+\n+    @Param({\"1152\"})\n+    private int outSize;\n+\n+    private byte[] byteIn;\n+    private byte[] byteOut;\n+    private short[] shortIn;\n+    private short[] shortOut;\n+    private int[] intIn;\n+    private int[] intOut;\n+    private long[] longIn;\n+    private long[] longOut;\n+    private float[] floatIn;\n+    private float[] floatOut;\n+    private double[] doubleIn;\n+    private double[] doubleOut;\n+\n+    private boolean[] m;\n+\n+    private static final VectorSpecies<Byte> bspecies = VectorSpecies.ofLargestShape(byte.class);\n+    private static final VectorSpecies<Short> sspecies = VectorSpecies.ofLargestShape(short.class);\n+    private static final VectorSpecies<Integer> ispecies = VectorSpecies.ofLargestShape(int.class);\n+    private static final VectorSpecies<Long> lspecies = VectorSpecies.ofLargestShape(long.class);\n+    private static final VectorSpecies<Float> fspecies = VectorSpecies.ofLargestShape(float.class);\n+    private static final VectorSpecies<Double> dspecies = VectorSpecies.ofLargestShape(double.class);\n+\n+    @Setup(Level.Trial)\n+    public void Setup() {\n+        byteIn = new byte[inSize];\n+        byteOut = new byte[outSize];\n+        shortIn = new short[inSize];\n+        shortOut = new short[outSize];\n+        intIn = new int[inSize];\n+        intOut = new int[outSize];\n+        longIn = new long[inSize];\n+        longOut = new long[outSize];\n+        floatIn = new float[inSize];\n+        floatOut = new float[outSize];\n+        doubleIn = new double[inSize];\n+        doubleOut = new double[outSize];\n+\n+        for (int i = 0; i < inSize; i++) {\n+            byteIn[i] = (byte) i;\n+            shortIn[i] = (short) i;\n+            intIn[i] = i;\n+            longIn[i] = i;\n+            floatIn[i] = (float) i;\n+            doubleIn[i] = (double) i;\n+        }\n+        m = new boolean[outSize];\n+        for (int i = 0; i < inSize; i++) {\n+            m[i] = i % 2 == 0;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void byteLoadArrayMaskIOOBE() {\n+        for (int i = 0; i < inSize; i += bspecies.length()) {\n+            VectorMask<Byte> mask = VectorMask.fromArray(bspecies, m, i);\n+            ByteVector.fromArray(bspecies, byteIn, i, mask).intoArray(byteOut, i);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void shortLoadArrayMaskIOOBE() {\n+        for (int i = 0; i < inSize; i += sspecies.length()) {\n+            VectorMask<Short> mask = VectorMask.fromArray(sspecies, m, i);\n+            ShortVector.fromArray(sspecies, shortIn, i, mask).intoArray(shortOut, i);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void intLoadArrayMaskIOOBE() {\n+        for (int i = 0; i < inSize; i += ispecies.length()) {\n+            VectorMask<Integer> mask = VectorMask.fromArray(ispecies, m, i);\n+            IntVector.fromArray(ispecies, intIn, i, mask).intoArray(intOut, i);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void longLoadArrayMaskIOOBE() {\n+        for (int i = 0; i < inSize; i += lspecies.length()) {\n+            VectorMask<Long> mask = VectorMask.fromArray(lspecies, m, i);\n+            LongVector.fromArray(lspecies, longIn, i, mask).intoArray(longOut, i);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void floatLoadArrayMaskIOOBE() {\n+        for (int i = 0; i < inSize; i += fspecies.length()) {\n+            VectorMask<Float> mask = VectorMask.fromArray(fspecies, m, i);\n+            FloatVector.fromArray(fspecies, floatIn, i, mask).intoArray(floatOut, i);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void doubleLoadArrayMaskIOOBE() {\n+        for (int i = 0; i < inSize; i += dspecies.length()) {\n+            VectorMask<Double> mask = VectorMask.fromArray(dspecies, m, i);\n+            DoubleVector.fromArray(dspecies, doubleIn, i, mask).intoArray(doubleOut, i);\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/LoadMaskedIOOBEBenchmark.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"},{"patch":"@@ -0,0 +1,138 @@\n+\/\/\n+\/\/ Copyright (c) 2022, Arm Limited. All rights reserved.\n+\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\/\/\n+\/\/ This code is free software; you can redistribute it and\/or modify it\n+\/\/ under the terms of the GNU General Public License version 2 only, as\n+\/\/ published by the Free Software Foundation.\n+\/\/\n+\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n+\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+\/\/ version 2 for more details (a copy is included in the LICENSE file that\n+\/\/ accompanied this code).\n+\/\/\n+\/\/ You should have received a copy of the GNU General Public License version\n+\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n+\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\/\/\n+\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+\/\/ or visit www.oracle.com if you need additional information or have any\n+\/\/ questions.\n+\/\/\n+\/\/\n+package org.openjdk.bench.jdk.incubator.vector;\n+\n+import java.util.concurrent.TimeUnit;\n+import jdk.incubator.vector.*;\n+import org.openjdk.jmh.annotations.*;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 3, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 1, jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+public class StoreMaskedBenchmark {\n+    @Param({\"1024\"})\n+    private int size;\n+\n+    private byte[] byteIn;\n+    private byte[] byteOut;\n+    private short[] shortIn;\n+    private short[] shortOut;\n+    private int[] intIn;\n+    private int[] intOut;\n+    private long[] longIn;\n+    private long[] longOut;\n+    private float[] floatIn;\n+    private float[] floatOut;\n+    private double[] doubleIn;\n+    private double[] doubleOut;\n+\n+    private boolean[] m;\n+\n+    private static final VectorSpecies<Byte> bspecies = VectorSpecies.ofLargestShape(byte.class);\n+    private static final VectorSpecies<Short> sspecies = VectorSpecies.ofLargestShape(short.class);\n+    private static final VectorSpecies<Integer> ispecies = VectorSpecies.ofLargestShape(int.class);\n+    private static final VectorSpecies<Long> lspecies = VectorSpecies.ofLargestShape(long.class);\n+    private static final VectorSpecies<Float> fspecies = VectorSpecies.ofLargestShape(float.class);\n+    private static final VectorSpecies<Double> dspecies = VectorSpecies.ofLargestShape(double.class);\n+\n+    @Setup(Level.Trial)\n+    public void Setup() {\n+        byteIn = new byte[size];\n+        byteOut = new byte[size];\n+        shortIn = new short[size];\n+        shortOut = new short[size];\n+        intIn = new int[size];\n+        intOut = new int[size];\n+        longIn = new long[size];\n+        longOut = new long[size];\n+        floatIn = new float[size];\n+        floatOut = new float[size];\n+        doubleIn = new double[size];\n+        doubleOut = new double[size];\n+        m = new boolean[size];\n+\n+        for (int i = 0; i < size; i++) {\n+            byteIn[i] = (byte) i;\n+            shortIn[i] = (short) i;\n+            intIn[i] = i;\n+            longIn[i] = i;\n+            floatIn[i] = (float) i;\n+            doubleIn[i] = (double) i;\n+        }\n+        for (int i = 0; i < size; i++) {\n+            m[i] = i % 2 == 0;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void byteStoreArrayMask() {\n+        for (int i = 0; i < size; i += bspecies.length()) {\n+            VectorMask<Byte> mask = VectorMask.fromArray(bspecies, m, i);\n+            ByteVector.fromArray(bspecies, byteIn, i).intoArray(byteOut, i, mask);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void shortStoreArrayMask() {\n+        for (int i = 0; i < size; i += sspecies.length()) {\n+            VectorMask<Short> mask = VectorMask.fromArray(sspecies, m, i);\n+            ShortVector.fromArray(sspecies, shortIn, i).intoArray(shortOut, i, mask);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void intStoreArrayMask() {\n+        for (int i = 0; i < size; i += ispecies.length()) {\n+            VectorMask<Integer> mask = VectorMask.fromArray(ispecies, m, i);\n+            IntVector.fromArray(ispecies, intIn, i).intoArray(intOut, i, mask);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void longStoreArrayMask() {\n+        for (int i = 0; i < size; i += lspecies.length()) {\n+            VectorMask<Long> mask = VectorMask.fromArray(lspecies, m, i);\n+            LongVector.fromArray(lspecies, longIn, i).intoArray(longOut, i, mask);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void floatStoreArrayMask() {\n+        for (int i = 0; i < size; i += fspecies.length()) {\n+            VectorMask<Float> mask = VectorMask.fromArray(fspecies, m, i);\n+            FloatVector.fromArray(fspecies, floatIn, i).intoArray(floatOut, i, mask);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void doubleStoreArrayMask() {\n+        for (int i = 0; i < size; i += dspecies.length()) {\n+            VectorMask<Double> mask = VectorMask.fromArray(dspecies, m, i);\n+            DoubleVector.fromArray(dspecies, doubleIn, i).intoArray(doubleOut, i, mask);\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/StoreMaskedBenchmark.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"}]}