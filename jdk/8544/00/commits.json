[{"commit":{"message":"8284050: [vectorapi] Optimize masked store for non-predicated architectures"},"files":[{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/StoreMaskedBenchmark.java"}],"sha":"be5eae4a01e48c640f977810f8a66de3f76b6725"},{"commit":{"message":"8283667: [vectorapi] Vectorization for masked load with IOOBE with predicate feature\n\nCurrently the vector load with mask when the given index happens out\nof the array boundary is implemented with pure java scalar code to\navoid the IOOBE (IndexOutOfBoundaryException). This is necessary for\narchitectures that do not support the predicate feature. Because the\nmasked load is implemented with a full vector load and a vector blend\napplied on it. And a full vector load will definitely cause the IOOBE\nwhich is not valid. However, for architectures that support the predicate\nfeature like SVE\/AVX-512\/RVV, it can be vectorized with the predicated\nload instruction as long as the indexes of the masked lanes are within\nthe bounds of the array. For these architectures, loading with unmasked\nlanes does not raise exception.\n\nThis patch adds the vectorization support for the masked load with IOOBE\npart. Please see the original java implementation (FIXME: optimize):\n\n```\n  @ForceInline\n  public static\n  ByteVector fromArray(VectorSpecies<Byte> species,\n                       byte[] a, int offset,\n                       VectorMask<Byte> m) {\n  ByteSpecies vsp = (ByteSpecies) species;\n      if (offset >= 0 && offset <= (a.length - species.length())) {\n          return vsp.dummyVector().fromArray0(a, offset, m);\n      }\n\n      \/\/ FIXME: optimize\n      checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n      return vsp.vOp(m, i -> a[offset + i]);\n  }\n```\nSince it can only be vectorized with the predicate load, the hotspot\nmust check whether the current backend supports it and falls back to\nthe java scalar version if not. This is different from the normal masked\nvector load that the compiler will generate a full vector load and a\nvector blend if the predicate load is not supported. So to let the\ncompiler make the expected action, an additional flag (i.e. offsetInRange)\nis added to the existing \"loadMasked\" intrinsic, with the value \"true\"\nfor the IOOBE part while \"false\" for the normal load. And the compiler\nwill fail to intrinsify if the flag is \"true\" and the predicate load is\nnot supported by the backend, which means that normal java path will be\nexecuted.\n\nAlso adds the same vectorization support for masked:\n - fromByteArray\/fromByteBuffer\n - fromBooleanArray\n - fromCharArray\n\nThe performance for the new added benchmarks improve about 1.88x ~ 30.26x\non the x86 AVX-512 system:\n\nBenchmark                                          before   After  Units\nLoadMaskedIOOBEBenchmark.byteLoadArrayMaskIOOBE   737.542 1387.069 ops\/ms\nLoadMaskedIOOBEBenchmark.doubleLoadArrayMaskIOOBE 118.366  330.776 ops\/ms\nLoadMaskedIOOBEBenchmark.floatLoadArrayMaskIOOBE  233.832 6125.026 ops\/ms\nLoadMaskedIOOBEBenchmark.intLoadArrayMaskIOOBE    233.816 7075.923 ops\/ms\nLoadMaskedIOOBEBenchmark.longLoadArrayMaskIOOBE   119.771  330.587 ops\/ms\nLoadMaskedIOOBEBenchmark.shortLoadArrayMaskIOOBE  431.961  939.301 ops\/ms\n\nSimilar performance gain can also be observed on 512-bit SVE system.\n\nTests passed on a64fx and AVX-512 machines.\n\nJDK_SCOPE: test\/jdk\/jdk\/incubator\/vector\n\nChange-Id: Ie2e7e51cbb927d73c81d825a83d5ab3b3c42bab1\nCustomizedGitHooks: yes\nJira: ENTLLT-3998"},"files":[{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/LoadMaskedIOOBEBenchmark.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/StoreMaskedBenchmark.java"}],"sha":"d0189c39c9d48c2e690ec7f470ee70a3c5ccde50"}]