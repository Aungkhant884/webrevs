{"files":[{"patch":"@@ -949,0 +949,1 @@\n+                                             \"I\"                                                                                               \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1151,1 +1151,1 @@\n-\/\/                  V v, M m,\n+\/\/                  V v, M m, int offsetInRange,\n@@ -1232,15 +1232,6 @@\n-    bool use_predicate = false;\n-    if (is_store) {\n-      \/\/ Masked vector store always uses the predicated store.\n-      use_predicate = true;\n-    } else {\n-      \/\/ Masked vector load with IOOBE always uses the predicated load.\n-      const TypeInt* offset_in_range = gvn().type(argument(8))->isa_int();\n-      if (!offset_in_range->is_con()) {\n-        if (C->print_intrinsics()) {\n-          tty->print_cr(\"  ** missing constant: offsetInRange=%s\",\n-                        NodeClassNames[argument(8)->Opcode()]);\n-        }\n-        set_map(old_map);\n-        set_sp(old_sp);\n-        return false;\n+    const TypeInt* offset_in_range = gvn().type(is_store ? argument(9) : argument(8))->isa_int();\n+    if (!offset_in_range->is_con()) {\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** missing constant: offsetInRange=%s\",\n+                      is_store ? NodeClassNames[argument(9)->Opcode()]\n+                               : NodeClassNames[argument(8)->Opcode()]);\n@@ -1248,1 +1239,3 @@\n-      use_predicate = (offset_in_range->get_con() == 0);\n+      set_map(old_map);\n+      set_sp(old_sp);\n+      return false;\n@@ -1251,1 +1244,2 @@\n-    if (use_predicate) {\n+    \/\/ Masked vector load\/store with IOOBE always use the predicated load\/store instruction.\n+    if (offset_in_range->get_con() == 0) {\n@@ -1253,1 +1247,1 @@\n-        tty->print_cr(\"  ** not supported: op=%s vlen=%d etype=%s using_byte_array=%d\",\n+        tty->print_cr(\"  ** not supported: op=%s vlen=%d etype=%s using_byte_array=%d offset_in_range=0\",\n@@ -1263,7 +1257,13 @@\n-  \/\/ This only happens for masked vector load. If predicate is not supported, then check whether\n-  \/\/ the normal vector load and blend operations are supported by backend.\n-  if (!supports_predicate && (!arch_supports_vector(Op_LoadVector, mem_num_elem, mem_elem_bt, VecMaskNotUsed) ||\n-      !arch_supports_vector(Op_VectorBlend, mem_num_elem, mem_elem_bt, VecMaskUseLoad))) {\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: op=loadMasked vlen=%d etype=%s using_byte_array=%d\",\n-                    num_elem, type2name(elem_bt), using_byte_array ? 1 : 0);\n+  \/\/ Check whether the vector blend pattern is supported or not if predicate is not supported.\n+  if (!supports_predicate) {\n+    if ((is_store && !arch_supports_vector(Op_StoreVector, mem_num_elem, mem_elem_bt, VecMaskNotUsed)) ||\n+        !arch_supports_vector(Op_LoadVector, mem_num_elem, mem_elem_bt, VecMaskNotUsed) ||\n+        !arch_supports_vector(Op_VectorBlend, mem_num_elem, mem_elem_bt, VecMaskUseLoad)) {\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** not supported: op=%s vlen=%d etype=%s using_byte_array=%d\",\n+                      is_store ? \"storeMasked\" : \"loadMasked\", num_elem,\n+                      type2name(elem_bt), using_byte_array ? 1 : 0);\n+      }\n+      set_map(old_map);\n+      set_sp(old_sp);\n+      return false;\n@@ -1271,3 +1271,0 @@\n-    set_map(old_map);\n-    set_sp(old_sp);\n-    return false;\n@@ -1316,0 +1313,14 @@\n+  Node* val = NULL;\n+  if (is_store) {\n+    val = unbox_vector(argument(7), vbox_type, elem_bt, num_elem);\n+    if (val == NULL) {\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** unbox failed vector=%s\",\n+                      NodeClassNames[argument(7)->Opcode()]);\n+      }\n+      set_map(old_map);\n+      set_sp(old_sp);\n+      return false; \/\/ operand unboxing failed\n+    }\n+  }\n+\n@@ -1327,0 +1338,9 @@\n+  if (using_byte_array) {\n+    \/\/ Reinterpret the vector mask to byte type.\n+    const TypeVect* from_mask_type = TypeVect::makemask(elem_bt, num_elem);\n+    const TypeVect* to_mask_type = TypeVect::makemask(mem_elem_bt, mem_num_elem);\n+    mask = gvn().transform(new VectorReinterpretNode(mask, from_mask_type, to_mask_type));\n+  }\n+\n+  const TypeVect* vt = TypeVect::make(elem_bt, num_elem);\n+  const TypeVect* mem_vt = TypeVect::make(mem_elem_bt, mem_num_elem);\n@@ -1329,10 +1349,0 @@\n-    Node* val = unbox_vector(argument(7), vbox_type, elem_bt, num_elem);\n-    if (val == NULL) {\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** unbox failed vector=%s\",\n-                      NodeClassNames[argument(7)->Opcode()]);\n-      }\n-      set_map(old_map);\n-      set_sp(old_sp);\n-      return false; \/\/ operand unboxing failed\n-    }\n@@ -1343,6 +1353,13 @@\n-      const TypeVect* to_vect_type = TypeVect::make(mem_elem_bt, mem_num_elem);\n-      val = gvn().transform(new VectorReinterpretNode(val, val->bottom_type()->is_vect(), to_vect_type));\n-      \/\/ Reinterpret the vector mask to byte type.\n-      const TypeVect* from_mask_type = TypeVect::makemask(elem_bt, num_elem);\n-      const TypeVect* to_mask_type = TypeVect::makemask(mem_elem_bt, mem_num_elem);\n-      mask = gvn().transform(new VectorReinterpretNode(mask, from_mask_type, to_mask_type));\n+      val = gvn().transform(new VectorReinterpretNode(val, val->bottom_type()->is_vect(), mem_vt));\n+    }\n+\n+    Node* vstore = NULL;\n+    if (supports_predicate) {\n+      \/\/ Generate masked store vector node if predicate feature is supported.\n+      vstore = gvn().transform(new StoreVectorMaskedNode(control(), memory(addr), addr, val, addr_type, mask));\n+    } else {\n+      \/\/ Use the vector blend to implement the masked store. The biased elements are the original\n+      \/\/ values in the memory.\n+      Node* mem_val = gvn().transform(LoadVectorNode::make(0, control(), memory(addr), addr, addr_type, mem_num_elem, mem_elem_bt));\n+      val = gvn().transform(new VectorBlendNode(mem_val, val, mask));\n+      vstore = gvn().transform(new StoreVectorNode(control(), memory(addr), addr, addr_type, val));\n@@ -1350,1 +1367,0 @@\n-    Node* vstore = gvn().transform(new StoreVectorMaskedNode(control(), memory(addr), addr, val, addr_type, mask));\n@@ -1355,7 +1371,0 @@\n-    if (using_byte_array) {\n-      \/\/ Reinterpret the vector mask to byte type.\n-      const TypeVect* from_mask_type = TypeVect::makemask(elem_bt, num_elem);\n-      const TypeVect* to_mask_type = TypeVect::makemask(mem_elem_bt, mem_num_elem);\n-      mask = gvn().transform(new VectorReinterpretNode(mask, from_mask_type, to_mask_type));\n-    }\n-\n@@ -1364,2 +1373,1 @@\n-      const TypeVect* vt = TypeVect::make(mem_elem_bt, mem_num_elem);\n-      vload = gvn().transform(new LoadVectorMaskedNode(control(), memory(addr), addr, addr_type, vt, mask));\n+      vload = gvn().transform(new LoadVectorMaskedNode(control(), memory(addr), addr, addr_type, mem_vt, mask));\n@@ -1375,2 +1383,1 @@\n-      const TypeVect* to_vect_type = TypeVect::make(elem_bt, num_elem);\n-      vload = gvn().transform(new VectorReinterpretNode(vload, vload->bottom_type()->is_vect(), to_vect_type));\n+      vload = gvn().transform(new VectorReinterpretNode(vload, vload->bottom_type()->is_vect(), vt));\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":64,"deletions":57,"binary":false,"changes":121,"status":"modified"},{"patch":"@@ -520,1 +520,1 @@\n-                                   int length, V v, M m,\n+                                   int length, V v, M m, boolean offsetInRange,\n@@ -527,1 +527,1 @@\n-                    v, m,\n+                    v, m, offsetInRange,\n@@ -541,1 +541,1 @@\n-                                         Class<E> e, int length, V v, M m,\n+                                         Class<E> e, int length, V v, M m, boolean offsetInRange,\n@@ -549,5 +549,13 @@\n-            VectorSupport.storeMasked(vmClass, maskClass, e, length,\n-                    BufferAccess.bufferBase(bb), BufferAccess.bufferAddress(bb, offset),\n-                    v, m,\n-                    bb, offset,\n-                    defaultImpl);\n+            if (offsetInRange) {\n+                VectorSupport.storeMasked(vmClass, maskClass, e, length,\n+                        BufferAccess.bufferBase(bb), BufferAccess.bufferAddress(bb, offset),\n+                        v, m, \/* offsetInRange *\/ 1,\n+                        bb, offset,\n+                        defaultImpl);\n+            } else {\n+                VectorSupport.storeMasked(vmClass, maskClass, e, length,\n+                        BufferAccess.bufferBase(bb), BufferAccess.bufferAddress(bb, offset),\n+                        v, m, \/* offsetInRange *\/ 0,\n+                        bb, offset,\n+                        defaultImpl);\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -472,1 +472,1 @@\n-                     V v, M m, C container, int index,\n+                     V v, M m, int offsetInRange, C container, int index,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -914,2 +914,2 @@\n-    void intoArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        super.intoArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m);\n+    void intoArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m, offsetInRange);\n@@ -922,2 +922,2 @@\n-    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        super.intoBooleanArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m);\n+    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoBooleanArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m, offsetInRange);\n@@ -936,2 +936,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        super.intoByteArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Byte128Mask.class, a, offset, (Byte128Mask) m, offsetInRange);  \/\/ specialize\n@@ -943,2 +943,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m) {\n-        super.intoByteBuffer0Template(Byte128Mask.class, bb, offset, (Byte128Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Byte128Mask.class, bb, offset, (Byte128Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -946,2 +946,2 @@\n-    void intoArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        super.intoArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m);\n+    void intoArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m, offsetInRange);\n@@ -954,2 +954,2 @@\n-    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        super.intoBooleanArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m);\n+    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoBooleanArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m, offsetInRange);\n@@ -968,2 +968,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        super.intoByteArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Byte256Mask.class, a, offset, (Byte256Mask) m, offsetInRange);  \/\/ specialize\n@@ -975,2 +975,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m) {\n-        super.intoByteBuffer0Template(Byte256Mask.class, bb, offset, (Byte256Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Byte256Mask.class, bb, offset, (Byte256Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1010,2 +1010,2 @@\n-    void intoArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        super.intoArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m);\n+    void intoArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m, offsetInRange);\n@@ -1018,2 +1018,2 @@\n-    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        super.intoBooleanArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m);\n+    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoBooleanArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m, offsetInRange);\n@@ -1032,2 +1032,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        super.intoByteArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Byte512Mask.class, a, offset, (Byte512Mask) m, offsetInRange);  \/\/ specialize\n@@ -1039,2 +1039,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m) {\n-        super.intoByteBuffer0Template(Byte512Mask.class, bb, offset, (Byte512Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Byte512Mask.class, bb, offset, (Byte512Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -898,2 +898,2 @@\n-    void intoArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        super.intoArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m);\n+    void intoArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m, offsetInRange);\n@@ -906,2 +906,2 @@\n-    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        super.intoBooleanArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m);\n+    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoBooleanArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m, offsetInRange);\n@@ -920,2 +920,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        super.intoByteArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Byte64Mask.class, a, offset, (Byte64Mask) m, offsetInRange);  \/\/ specialize\n@@ -927,2 +927,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m) {\n-        super.intoByteBuffer0Template(Byte64Mask.class, bb, offset, (Byte64Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Byte64Mask.class, bb, offset, (Byte64Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -884,2 +884,2 @@\n-    void intoArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        super.intoArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m);\n+    void intoArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m, offsetInRange);\n@@ -892,2 +892,2 @@\n-    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m) {\n-        super.intoBooleanArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m);\n+    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoBooleanArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m, offsetInRange);\n@@ -906,2 +906,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m) {\n-        super.intoByteArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(ByteMaxMask.class, a, offset, (ByteMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -913,2 +913,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m) {\n-        super.intoByteBuffer0Template(ByteMaxMask.class, bb, offset, (ByteMaxMask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(ByteMaxMask.class, bb, offset, (ByteMaxMask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -3323,2 +3323,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3478,2 +3482,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoBooleanArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoBooleanArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoBooleanArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3599,2 +3607,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            maybeSwap(bo).intoByteArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3635,2 +3647,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, bb.limit());\n-            maybeSwap(bo).intoByteBuffer0(bb, offset, m);\n+            if (offset >= 0 && offset <= (bb.limit() - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, bb.limit());\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3826,1 +3842,1 @@\n-    void intoArray0(byte[] a, int offset, VectorMask<Byte> m);\n+    void intoArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange);\n@@ -3830,1 +3846,12 @@\n-    void intoArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n+    void intoArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, arrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+    }\n+\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<Byte>>\n+    void intoArray0Template(Class<M> maskClass, C base, long offset, int index, ByteVector v, M m, boolean offsetInRange,\n+                            VectorSupport.StoreVectorMaskedOperation<C, ByteVector, M> defaultImpl) {\n@@ -3833,7 +3860,13 @@\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset),\n-            this, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+        if (offsetInRange) {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 1,\n+                base, index, defaultImpl);\n+        } else {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 0,\n+                base, index, defaultImpl);\n+        }\n@@ -3844,1 +3877,1 @@\n-    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m);\n+    void intoBooleanArray0(boolean[] a, int offset, VectorMask<Byte> m, boolean offsetInRange);\n@@ -3848,3 +3881,1 @@\n-    void intoBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m) {\n-        m.check(species());\n-        ByteSpecies vsp = vspecies();\n+    void intoBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m, boolean offsetInRange) {\n@@ -3852,7 +3883,4 @@\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, booleanArrayAddress(a, offset),\n-            normalized, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = (e & 1) != 0));\n+        intoArray0Template(maskClass, a, booleanArrayAddress(a, offset), offset,\n+            normalized,  m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = (e & 1) != 0));\n@@ -3879,1 +3907,1 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m);\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Byte> m, boolean offsetInRange);\n@@ -3883,7 +3911,3 @@\n-    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        ByteSpecies vsp = vspecies();\n-        m.check(vsp);\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset),\n-            this, m, a, offset,\n+    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, byteArrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n@@ -3912,1 +3936,1 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Byte> m, boolean offsetInRange);\n@@ -3916,1 +3940,1 @@\n-    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3921,1 +3945,1 @@\n-                this, m, bb, offset,\n+                this, m, offsetInRange, bb, offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":63,"deletions":39,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -868,2 +868,2 @@\n-    void intoArray0(double[] a, int offset, VectorMask<Double> m) {\n-        super.intoArray0Template(Double128Mask.class, a, offset, (Double128Mask) m);\n+    void intoArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoArray0Template(Double128Mask.class, a, offset, (Double128Mask) m, offsetInRange);\n@@ -890,2 +890,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m) {\n-        super.intoByteArray0Template(Double128Mask.class, a, offset, (Double128Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Double128Mask.class, a, offset, (Double128Mask) m, offsetInRange);  \/\/ specialize\n@@ -897,2 +897,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m) {\n-        super.intoByteBuffer0Template(Double128Mask.class, bb, offset, (Double128Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Double128Mask.class, bb, offset, (Double128Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -872,2 +872,2 @@\n-    void intoArray0(double[] a, int offset, VectorMask<Double> m) {\n-        super.intoArray0Template(Double256Mask.class, a, offset, (Double256Mask) m);\n+    void intoArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoArray0Template(Double256Mask.class, a, offset, (Double256Mask) m, offsetInRange);\n@@ -894,2 +894,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m) {\n-        super.intoByteArray0Template(Double256Mask.class, a, offset, (Double256Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Double256Mask.class, a, offset, (Double256Mask) m, offsetInRange);  \/\/ specialize\n@@ -901,2 +901,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m) {\n-        super.intoByteBuffer0Template(Double256Mask.class, bb, offset, (Double256Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Double256Mask.class, bb, offset, (Double256Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -880,2 +880,2 @@\n-    void intoArray0(double[] a, int offset, VectorMask<Double> m) {\n-        super.intoArray0Template(Double512Mask.class, a, offset, (Double512Mask) m);\n+    void intoArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoArray0Template(Double512Mask.class, a, offset, (Double512Mask) m, offsetInRange);\n@@ -902,2 +902,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m) {\n-        super.intoByteArray0Template(Double512Mask.class, a, offset, (Double512Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Double512Mask.class, a, offset, (Double512Mask) m, offsetInRange);  \/\/ specialize\n@@ -909,2 +909,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m) {\n-        super.intoByteBuffer0Template(Double512Mask.class, bb, offset, (Double512Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Double512Mask.class, bb, offset, (Double512Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -866,2 +866,2 @@\n-    void intoArray0(double[] a, int offset, VectorMask<Double> m) {\n-        super.intoArray0Template(Double64Mask.class, a, offset, (Double64Mask) m);\n+    void intoArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoArray0Template(Double64Mask.class, a, offset, (Double64Mask) m, offsetInRange);\n@@ -888,2 +888,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m) {\n-        super.intoByteArray0Template(Double64Mask.class, a, offset, (Double64Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Double64Mask.class, a, offset, (Double64Mask) m, offsetInRange);  \/\/ specialize\n@@ -895,2 +895,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m) {\n-        super.intoByteBuffer0Template(Double64Mask.class, bb, offset, (Double64Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Double64Mask.class, bb, offset, (Double64Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -865,2 +865,2 @@\n-    void intoArray0(double[] a, int offset, VectorMask<Double> m) {\n-        super.intoArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m);\n+    void intoArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m, offsetInRange);\n@@ -887,2 +887,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m) {\n-        super.intoByteArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(DoubleMaxMask.class, a, offset, (DoubleMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -894,2 +894,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m) {\n-        super.intoByteBuffer0Template(DoubleMaxMask.class, bb, offset, (DoubleMaxMask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(DoubleMaxMask.class, bb, offset, (DoubleMaxMask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3039,2 +3039,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3186,2 +3190,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 8, a.length);\n-            maybeSwap(bo).intoByteArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 8, a.length);\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3222,2 +3230,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 8, bb.limit());\n-            maybeSwap(bo).intoByteBuffer0(bb, offset, m);\n+            if (offset >= 0 && offset <= (bb.limit() - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 8, bb.limit());\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3436,1 +3448,1 @@\n-    void intoArray0(double[] a, int offset, VectorMask<Double> m);\n+    void intoArray0(double[] a, int offset, VectorMask<Double> m, boolean offsetInRange);\n@@ -3440,1 +3452,12 @@\n-    void intoArray0Template(Class<M> maskClass, double[] a, int offset, M m) {\n+    void intoArray0Template(Class<M> maskClass, double[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, arrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+    }\n+\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<Double>>\n+    void intoArray0Template(Class<M> maskClass, C base, long offset, int index, DoubleVector v, M m, boolean offsetInRange,\n+                            VectorSupport.StoreVectorMaskedOperation<C, DoubleVector, M> defaultImpl) {\n@@ -3443,7 +3466,13 @@\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset),\n-            this, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+        if (offsetInRange) {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 1,\n+                base, index, defaultImpl);\n+        } else {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 0,\n+                base, index, defaultImpl);\n+        }\n@@ -3524,1 +3553,1 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m);\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Double> m, boolean offsetInRange);\n@@ -3528,7 +3557,3 @@\n-    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        DoubleSpecies vsp = vspecies();\n-        m.check(vsp);\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset),\n-            this, m, a, offset,\n+    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, byteArrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n@@ -3557,1 +3582,1 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Double> m, boolean offsetInRange);\n@@ -3561,1 +3586,1 @@\n-    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3566,1 +3591,1 @@\n-                this, m, bb, offset,\n+                this, m, offsetInRange, bb, offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":51,"deletions":26,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -872,2 +872,2 @@\n-    void intoArray0(float[] a, int offset, VectorMask<Float> m) {\n-        super.intoArray0Template(Float128Mask.class, a, offset, (Float128Mask) m);\n+    void intoArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoArray0Template(Float128Mask.class, a, offset, (Float128Mask) m, offsetInRange);\n@@ -894,2 +894,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m) {\n-        super.intoByteArray0Template(Float128Mask.class, a, offset, (Float128Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Float128Mask.class, a, offset, (Float128Mask) m, offsetInRange);  \/\/ specialize\n@@ -901,2 +901,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m) {\n-        super.intoByteBuffer0Template(Float128Mask.class, bb, offset, (Float128Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Float128Mask.class, bb, offset, (Float128Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -880,2 +880,2 @@\n-    void intoArray0(float[] a, int offset, VectorMask<Float> m) {\n-        super.intoArray0Template(Float256Mask.class, a, offset, (Float256Mask) m);\n+    void intoArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoArray0Template(Float256Mask.class, a, offset, (Float256Mask) m, offsetInRange);\n@@ -902,2 +902,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m) {\n-        super.intoByteArray0Template(Float256Mask.class, a, offset, (Float256Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Float256Mask.class, a, offset, (Float256Mask) m, offsetInRange);  \/\/ specialize\n@@ -909,2 +909,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m) {\n-        super.intoByteBuffer0Template(Float256Mask.class, bb, offset, (Float256Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Float256Mask.class, bb, offset, (Float256Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -896,2 +896,2 @@\n-    void intoArray0(float[] a, int offset, VectorMask<Float> m) {\n-        super.intoArray0Template(Float512Mask.class, a, offset, (Float512Mask) m);\n+    void intoArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoArray0Template(Float512Mask.class, a, offset, (Float512Mask) m, offsetInRange);\n@@ -918,2 +918,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m) {\n-        super.intoByteArray0Template(Float512Mask.class, a, offset, (Float512Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Float512Mask.class, a, offset, (Float512Mask) m, offsetInRange);  \/\/ specialize\n@@ -925,2 +925,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m) {\n-        super.intoByteBuffer0Template(Float512Mask.class, bb, offset, (Float512Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Float512Mask.class, bb, offset, (Float512Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -868,2 +868,2 @@\n-    void intoArray0(float[] a, int offset, VectorMask<Float> m) {\n-        super.intoArray0Template(Float64Mask.class, a, offset, (Float64Mask) m);\n+    void intoArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoArray0Template(Float64Mask.class, a, offset, (Float64Mask) m, offsetInRange);\n@@ -890,2 +890,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m) {\n-        super.intoByteArray0Template(Float64Mask.class, a, offset, (Float64Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Float64Mask.class, a, offset, (Float64Mask) m, offsetInRange);  \/\/ specialize\n@@ -897,2 +897,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m) {\n-        super.intoByteBuffer0Template(Float64Mask.class, bb, offset, (Float64Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Float64Mask.class, bb, offset, (Float64Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -865,2 +865,2 @@\n-    void intoArray0(float[] a, int offset, VectorMask<Float> m) {\n-        super.intoArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m);\n+    void intoArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m, offsetInRange);\n@@ -887,2 +887,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m) {\n-        super.intoByteArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(FloatMaxMask.class, a, offset, (FloatMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -894,2 +894,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m) {\n-        super.intoByteBuffer0Template(FloatMaxMask.class, bb, offset, (FloatMaxMask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(FloatMaxMask.class, bb, offset, (FloatMaxMask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3045,2 +3045,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3173,2 +3177,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 4, a.length);\n-            maybeSwap(bo).intoByteArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 4, a.length);\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3209,2 +3217,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 4, bb.limit());\n-            maybeSwap(bo).intoByteBuffer0(bb, offset, m);\n+            if (offset >= 0 && offset <= (bb.limit() - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 4, bb.limit());\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3405,1 +3417,1 @@\n-    void intoArray0(float[] a, int offset, VectorMask<Float> m);\n+    void intoArray0(float[] a, int offset, VectorMask<Float> m, boolean offsetInRange);\n@@ -3409,1 +3421,12 @@\n-    void intoArray0Template(Class<M> maskClass, float[] a, int offset, M m) {\n+    void intoArray0Template(Class<M> maskClass, float[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, arrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+    }\n+\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<Float>>\n+    void intoArray0Template(Class<M> maskClass, C base, long offset, int index, FloatVector v, M m, boolean offsetInRange,\n+                            VectorSupport.StoreVectorMaskedOperation<C, FloatVector, M> defaultImpl) {\n@@ -3412,7 +3435,13 @@\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset),\n-            this, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+        if (offsetInRange) {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 1,\n+                base, index, defaultImpl);\n+        } else {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 0,\n+                base, index, defaultImpl);\n+        }\n@@ -3474,1 +3503,1 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m);\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Float> m, boolean offsetInRange);\n@@ -3478,7 +3507,3 @@\n-    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        FloatSpecies vsp = vspecies();\n-        m.check(vsp);\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset),\n-            this, m, a, offset,\n+    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, byteArrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n@@ -3507,1 +3532,1 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Float> m, boolean offsetInRange);\n@@ -3511,1 +3536,1 @@\n-    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3516,1 +3541,1 @@\n-                this, m, bb, offset,\n+                this, m, offsetInRange, bb, offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":51,"deletions":26,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -883,2 +883,2 @@\n-    void intoArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        super.intoArray0Template(Int128Mask.class, a, offset, (Int128Mask) m);\n+    void intoArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoArray0Template(Int128Mask.class, a, offset, (Int128Mask) m, offsetInRange);\n@@ -905,2 +905,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m) {\n-        super.intoByteArray0Template(Int128Mask.class, a, offset, (Int128Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Int128Mask.class, a, offset, (Int128Mask) m, offsetInRange);  \/\/ specialize\n@@ -912,2 +912,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m) {\n-        super.intoByteBuffer0Template(Int128Mask.class, bb, offset, (Int128Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Int128Mask.class, bb, offset, (Int128Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -891,2 +891,2 @@\n-    void intoArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        super.intoArray0Template(Int256Mask.class, a, offset, (Int256Mask) m);\n+    void intoArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoArray0Template(Int256Mask.class, a, offset, (Int256Mask) m, offsetInRange);\n@@ -913,2 +913,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m) {\n-        super.intoByteArray0Template(Int256Mask.class, a, offset, (Int256Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Int256Mask.class, a, offset, (Int256Mask) m, offsetInRange);  \/\/ specialize\n@@ -920,2 +920,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m) {\n-        super.intoByteBuffer0Template(Int256Mask.class, bb, offset, (Int256Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Int256Mask.class, bb, offset, (Int256Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -907,2 +907,2 @@\n-    void intoArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        super.intoArray0Template(Int512Mask.class, a, offset, (Int512Mask) m);\n+    void intoArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoArray0Template(Int512Mask.class, a, offset, (Int512Mask) m, offsetInRange);\n@@ -929,2 +929,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m) {\n-        super.intoByteArray0Template(Int512Mask.class, a, offset, (Int512Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Int512Mask.class, a, offset, (Int512Mask) m, offsetInRange);  \/\/ specialize\n@@ -936,2 +936,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m) {\n-        super.intoByteBuffer0Template(Int512Mask.class, bb, offset, (Int512Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Int512Mask.class, bb, offset, (Int512Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -879,2 +879,2 @@\n-    void intoArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        super.intoArray0Template(Int64Mask.class, a, offset, (Int64Mask) m);\n+    void intoArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoArray0Template(Int64Mask.class, a, offset, (Int64Mask) m, offsetInRange);\n@@ -901,2 +901,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m) {\n-        super.intoByteArray0Template(Int64Mask.class, a, offset, (Int64Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Int64Mask.class, a, offset, (Int64Mask) m, offsetInRange);  \/\/ specialize\n@@ -908,2 +908,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m) {\n-        super.intoByteBuffer0Template(Int64Mask.class, bb, offset, (Int64Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Int64Mask.class, bb, offset, (Int64Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -888,2 +888,2 @@\n-    void intoArray0(int[] a, int offset, VectorMask<Integer> m) {\n-        super.intoArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m);\n+    void intoArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m, offsetInRange);\n@@ -910,2 +910,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m) {\n-        super.intoByteArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(IntMaxMask.class, a, offset, (IntMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -917,2 +917,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m) {\n-        super.intoByteBuffer0Template(IntMaxMask.class, bb, offset, (IntMaxMask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(IntMaxMask.class, bb, offset, (IntMaxMask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3188,2 +3188,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3316,2 +3320,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 4, a.length);\n-            maybeSwap(bo).intoByteArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 4, a.length);\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3352,2 +3360,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 4, bb.limit());\n-            maybeSwap(bo).intoByteBuffer0(bb, offset, m);\n+            if (offset >= 0 && offset <= (bb.limit() - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 4, bb.limit());\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3548,1 +3560,1 @@\n-    void intoArray0(int[] a, int offset, VectorMask<Integer> m);\n+    void intoArray0(int[] a, int offset, VectorMask<Integer> m, boolean offsetInRange);\n@@ -3552,1 +3564,12 @@\n-    void intoArray0Template(Class<M> maskClass, int[] a, int offset, M m) {\n+    void intoArray0Template(Class<M> maskClass, int[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, arrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+    }\n+\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<Integer>>\n+    void intoArray0Template(Class<M> maskClass, C base, long offset, int index, IntVector v, M m, boolean offsetInRange,\n+                            VectorSupport.StoreVectorMaskedOperation<C, IntVector, M> defaultImpl) {\n@@ -3555,7 +3578,13 @@\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset),\n-            this, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+        if (offsetInRange) {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 1,\n+                base, index, defaultImpl);\n+        } else {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 0,\n+                base, index, defaultImpl);\n+        }\n@@ -3617,1 +3646,1 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m);\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Integer> m, boolean offsetInRange);\n@@ -3621,7 +3650,3 @@\n-    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        IntSpecies vsp = vspecies();\n-        m.check(vsp);\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset),\n-            this, m, a, offset,\n+    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, byteArrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n@@ -3650,1 +3675,1 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Integer> m, boolean offsetInRange);\n@@ -3654,1 +3679,1 @@\n-    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3659,1 +3684,1 @@\n-                this, m, bb, offset,\n+                this, m, offsetInRange, bb, offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":51,"deletions":26,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -869,2 +869,2 @@\n-    void intoArray0(long[] a, int offset, VectorMask<Long> m) {\n-        super.intoArray0Template(Long128Mask.class, a, offset, (Long128Mask) m);\n+    void intoArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoArray0Template(Long128Mask.class, a, offset, (Long128Mask) m, offsetInRange);\n@@ -891,2 +891,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m) {\n-        super.intoByteArray0Template(Long128Mask.class, a, offset, (Long128Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Long128Mask.class, a, offset, (Long128Mask) m, offsetInRange);  \/\/ specialize\n@@ -898,2 +898,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m) {\n-        super.intoByteBuffer0Template(Long128Mask.class, bb, offset, (Long128Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Long128Mask.class, bb, offset, (Long128Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -873,2 +873,2 @@\n-    void intoArray0(long[] a, int offset, VectorMask<Long> m) {\n-        super.intoArray0Template(Long256Mask.class, a, offset, (Long256Mask) m);\n+    void intoArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoArray0Template(Long256Mask.class, a, offset, (Long256Mask) m, offsetInRange);\n@@ -895,2 +895,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m) {\n-        super.intoByteArray0Template(Long256Mask.class, a, offset, (Long256Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Long256Mask.class, a, offset, (Long256Mask) m, offsetInRange);  \/\/ specialize\n@@ -902,2 +902,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m) {\n-        super.intoByteBuffer0Template(Long256Mask.class, bb, offset, (Long256Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Long256Mask.class, bb, offset, (Long256Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -881,2 +881,2 @@\n-    void intoArray0(long[] a, int offset, VectorMask<Long> m) {\n-        super.intoArray0Template(Long512Mask.class, a, offset, (Long512Mask) m);\n+    void intoArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoArray0Template(Long512Mask.class, a, offset, (Long512Mask) m, offsetInRange);\n@@ -903,2 +903,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m) {\n-        super.intoByteArray0Template(Long512Mask.class, a, offset, (Long512Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Long512Mask.class, a, offset, (Long512Mask) m, offsetInRange);  \/\/ specialize\n@@ -910,2 +910,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m) {\n-        super.intoByteBuffer0Template(Long512Mask.class, bb, offset, (Long512Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Long512Mask.class, bb, offset, (Long512Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -867,2 +867,2 @@\n-    void intoArray0(long[] a, int offset, VectorMask<Long> m) {\n-        super.intoArray0Template(Long64Mask.class, a, offset, (Long64Mask) m);\n+    void intoArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoArray0Template(Long64Mask.class, a, offset, (Long64Mask) m, offsetInRange);\n@@ -889,2 +889,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m) {\n-        super.intoByteArray0Template(Long64Mask.class, a, offset, (Long64Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Long64Mask.class, a, offset, (Long64Mask) m, offsetInRange);  \/\/ specialize\n@@ -896,2 +896,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m) {\n-        super.intoByteBuffer0Template(Long64Mask.class, bb, offset, (Long64Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Long64Mask.class, bb, offset, (Long64Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -867,2 +867,2 @@\n-    void intoArray0(long[] a, int offset, VectorMask<Long> m) {\n-        super.intoArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m);\n+    void intoArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m, offsetInRange);\n@@ -889,2 +889,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m) {\n-        super.intoByteArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(LongMaxMask.class, a, offset, (LongMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -896,2 +896,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m) {\n-        super.intoByteBuffer0Template(LongMaxMask.class, bb, offset, (LongMaxMask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(LongMaxMask.class, bb, offset, (LongMaxMask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3067,2 +3067,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3214,2 +3218,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 8, a.length);\n-            maybeSwap(bo).intoByteArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 8, a.length);\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3250,2 +3258,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 8, bb.limit());\n-            maybeSwap(bo).intoByteBuffer0(bb, offset, m);\n+            if (offset >= 0 && offset <= (bb.limit() - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 8, bb.limit());\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3464,1 +3476,1 @@\n-    void intoArray0(long[] a, int offset, VectorMask<Long> m);\n+    void intoArray0(long[] a, int offset, VectorMask<Long> m, boolean offsetInRange);\n@@ -3468,1 +3480,12 @@\n-    void intoArray0Template(Class<M> maskClass, long[] a, int offset, M m) {\n+    void intoArray0Template(Class<M> maskClass, long[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, arrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+    }\n+\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<Long>>\n+    void intoArray0Template(Class<M> maskClass, C base, long offset, int index, LongVector v, M m, boolean offsetInRange,\n+                            VectorSupport.StoreVectorMaskedOperation<C, LongVector, M> defaultImpl) {\n@@ -3471,7 +3494,13 @@\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset),\n-            this, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+        if (offsetInRange) {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 1,\n+                base, index, defaultImpl);\n+        } else {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 0,\n+                base, index, defaultImpl);\n+        }\n@@ -3552,1 +3581,1 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m);\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Long> m, boolean offsetInRange);\n@@ -3556,7 +3585,3 @@\n-    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        LongSpecies vsp = vspecies();\n-        m.check(vsp);\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset),\n-            this, m, a, offset,\n+    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, byteArrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n@@ -3585,1 +3610,1 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Long> m, boolean offsetInRange);\n@@ -3589,1 +3614,1 @@\n-    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3594,1 +3619,1 @@\n-                this, m, bb, offset,\n+                this, m, offsetInRange, bb, offset,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":51,"deletions":26,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -898,2 +898,2 @@\n-    void intoArray0(short[] a, int offset, VectorMask<Short> m) {\n-        super.intoArray0Template(Short128Mask.class, a, offset, (Short128Mask) m);\n+    void intoArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoArray0Template(Short128Mask.class, a, offset, (Short128Mask) m, offsetInRange);\n@@ -914,2 +914,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m) {\n-        super.intoByteArray0Template(Short128Mask.class, a, offset, (Short128Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Short128Mask.class, a, offset, (Short128Mask) m, offsetInRange);  \/\/ specialize\n@@ -921,2 +921,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m) {\n-        super.intoByteBuffer0Template(Short128Mask.class, bb, offset, (Short128Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Short128Mask.class, bb, offset, (Short128Mask) m, offsetInRange);\n@@ -928,2 +928,2 @@\n-    void intoCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        super.intoCharArray0Template(Short128Mask.class, a, offset, (Short128Mask) m);\n+    void intoCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoCharArray0Template(Short128Mask.class, a, offset, (Short128Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -914,2 +914,2 @@\n-    void intoArray0(short[] a, int offset, VectorMask<Short> m) {\n-        super.intoArray0Template(Short256Mask.class, a, offset, (Short256Mask) m);\n+    void intoArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoArray0Template(Short256Mask.class, a, offset, (Short256Mask) m, offsetInRange);\n@@ -930,2 +930,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m) {\n-        super.intoByteArray0Template(Short256Mask.class, a, offset, (Short256Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Short256Mask.class, a, offset, (Short256Mask) m, offsetInRange);  \/\/ specialize\n@@ -937,2 +937,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m) {\n-        super.intoByteBuffer0Template(Short256Mask.class, bb, offset, (Short256Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Short256Mask.class, bb, offset, (Short256Mask) m, offsetInRange);\n@@ -944,2 +944,2 @@\n-    void intoCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        super.intoCharArray0Template(Short256Mask.class, a, offset, (Short256Mask) m);\n+    void intoCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoCharArray0Template(Short256Mask.class, a, offset, (Short256Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -946,2 +946,2 @@\n-    void intoArray0(short[] a, int offset, VectorMask<Short> m) {\n-        super.intoArray0Template(Short512Mask.class, a, offset, (Short512Mask) m);\n+    void intoArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoArray0Template(Short512Mask.class, a, offset, (Short512Mask) m, offsetInRange);\n@@ -962,2 +962,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m) {\n-        super.intoByteArray0Template(Short512Mask.class, a, offset, (Short512Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Short512Mask.class, a, offset, (Short512Mask) m, offsetInRange);  \/\/ specialize\n@@ -969,2 +969,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m) {\n-        super.intoByteBuffer0Template(Short512Mask.class, bb, offset, (Short512Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Short512Mask.class, bb, offset, (Short512Mask) m, offsetInRange);\n@@ -976,2 +976,2 @@\n-    void intoCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        super.intoCharArray0Template(Short512Mask.class, a, offset, (Short512Mask) m);\n+    void intoCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoCharArray0Template(Short512Mask.class, a, offset, (Short512Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -890,2 +890,2 @@\n-    void intoArray0(short[] a, int offset, VectorMask<Short> m) {\n-        super.intoArray0Template(Short64Mask.class, a, offset, (Short64Mask) m);\n+    void intoArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoArray0Template(Short64Mask.class, a, offset, (Short64Mask) m, offsetInRange);\n@@ -906,2 +906,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m) {\n-        super.intoByteArray0Template(Short64Mask.class, a, offset, (Short64Mask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(Short64Mask.class, a, offset, (Short64Mask) m, offsetInRange);  \/\/ specialize\n@@ -913,2 +913,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m) {\n-        super.intoByteBuffer0Template(Short64Mask.class, bb, offset, (Short64Mask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(Short64Mask.class, bb, offset, (Short64Mask) m, offsetInRange);\n@@ -920,2 +920,2 @@\n-    void intoCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        super.intoCharArray0Template(Short64Mask.class, a, offset, (Short64Mask) m);\n+    void intoCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoCharArray0Template(Short64Mask.class, a, offset, (Short64Mask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -884,2 +884,2 @@\n-    void intoArray0(short[] a, int offset, VectorMask<Short> m) {\n-        super.intoArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m);\n+    void intoArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m, offsetInRange);\n@@ -900,2 +900,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m) {\n-        super.intoByteArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoByteArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m, offsetInRange);  \/\/ specialize\n@@ -907,2 +907,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m) {\n-        super.intoByteBuffer0Template(ShortMaxMask.class, bb, offset, (ShortMaxMask) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template(ShortMaxMask.class, bb, offset, (ShortMaxMask) m, offsetInRange);\n@@ -914,2 +914,2 @@\n-    void intoCharArray0(char[] a, int offset, VectorMask<Short> m) {\n-        super.intoCharArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m);\n+    void intoCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange) {\n+        super.intoCharArray0Template(ShortMaxMask.class, a, offset, (ShortMaxMask) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -3322,2 +3322,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3469,2 +3473,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoCharArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoCharArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoCharArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3585,2 +3593,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 2, a.length);\n-            maybeSwap(bo).intoByteArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 2, a.length);\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3621,2 +3633,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 2, bb.limit());\n-            maybeSwap(bo).intoByteBuffer0(bb, offset, m);\n+            if (offset >= 0 && offset <= (bb.limit() - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 2, bb.limit());\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -3812,1 +3828,1 @@\n-    void intoArray0(short[] a, int offset, VectorMask<Short> m);\n+    void intoArray0(short[] a, int offset, VectorMask<Short> m, boolean offsetInRange);\n@@ -3816,1 +3832,12 @@\n-    void intoArray0Template(Class<M> maskClass, short[] a, int offset, M m) {\n+    void intoArray0Template(Class<M> maskClass, short[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, arrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+    }\n+\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<Short>>\n+    void intoArray0Template(Class<M> maskClass, C base, long offset, int index, ShortVector v, M m, boolean offsetInRange,\n+                            VectorSupport.StoreVectorMaskedOperation<C, ShortVector, M> defaultImpl) {\n@@ -3819,7 +3846,13 @@\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset),\n-            this, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+        if (offsetInRange) {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 1,\n+                base, index, defaultImpl);\n+        } else {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 0,\n+                base, index, defaultImpl);\n+        }\n@@ -3848,1 +3881,1 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m);\n+    void intoByteArray0(byte[] a, int offset, VectorMask<Short> m, boolean offsetInRange);\n@@ -3852,7 +3885,3 @@\n-    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        ShortSpecies vsp = vspecies();\n-        m.check(vsp);\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset),\n-            this, m, a, offset,\n+    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, byteArrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n@@ -3881,1 +3910,1 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<Short> m, boolean offsetInRange);\n@@ -3885,1 +3914,1 @@\n-    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -3890,1 +3919,1 @@\n-                this, m, bb, offset,\n+                this, m, offsetInRange, bb, offset,\n@@ -3900,1 +3929,1 @@\n-    void intoCharArray0(char[] a, int offset, VectorMask<Short> m);\n+    void intoCharArray0(char[] a, int offset, VectorMask<Short> m, boolean offsetInRange);\n@@ -3904,10 +3933,5 @@\n-    void intoCharArray0Template(Class<M> maskClass, char[] a, int offset, M m) {\n-        m.check(species());\n-        ShortSpecies vsp = vspecies();\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, charArrayAddress(a, offset),\n-            this, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = (char) e));\n+    void intoCharArray0Template(Class<M> maskClass, char[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, charArrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = (char) e));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":63,"deletions":39,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -4077,2 +4077,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -4295,2 +4299,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoCharArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoCharArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoCharArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -4457,2 +4465,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n-            intoBooleanArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.length())) {\n+                intoBooleanArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+                intoBooleanArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -4579,2 +4591,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, $sizeInBytes$, a.length);\n-            maybeSwap(bo).intoByteArray0(a, offset, m);\n+            if (offset >= 0 && offset <= (a.length - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, $sizeInBytes$, a.length);\n+                maybeSwap(bo).intoByteArray0(a, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -4615,2 +4631,6 @@\n-            checkMaskFromIndexSize(offset, vsp, m, $sizeInBytes$, bb.limit());\n-            maybeSwap(bo).intoByteBuffer0(bb, offset, m);\n+            if (offset >= 0 && offset <= (bb.limit() - vsp.vectorByteSize())) {\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ true);\n+            } else {\n+                checkMaskFromIndexSize(offset, vsp, m, $sizeInBytes$, bb.limit());\n+                maybeSwap(bo).intoByteBuffer0(bb, offset, m, \/* offsetInRange *\/ false);\n+            }\n@@ -4898,1 +4918,1 @@\n-    void intoArray0($type$[] a, int offset, VectorMask<$Boxtype$> m);\n+    void intoArray0($type$[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange);\n@@ -4902,1 +4922,12 @@\n-    void intoArray0Template(Class<M> maskClass, $type$[] a, int offset, M m) {\n+    void intoArray0Template(Class<M> maskClass, $type$[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, arrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+    }\n+\n+    @ForceInline\n+    final\n+    <C, M extends VectorMask<$Boxtype$>>\n+    void intoArray0Template(Class<M> maskClass, C base, long offset, int index, $abstractvectortype$ v, M m, boolean offsetInRange,\n+                            VectorSupport.StoreVectorMaskedOperation<C, $abstractvectortype$, M> defaultImpl) {\n@@ -4905,7 +4936,13 @@\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, arrayAddress(a, offset),\n-            this, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = e));\n+        if (offsetInRange) {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 1,\n+                base, index, defaultImpl);\n+        } else {\n+            VectorSupport.storeMasked(\n+                vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n+                base, offset,\n+                v, m, \/* offsetInRange *\/ 0,\n+                base, index, defaultImpl);\n+        }\n@@ -4978,1 +5015,1 @@\n-    void intoBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m);\n+    void intoBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange);\n@@ -4982,3 +5019,1 @@\n-    void intoBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m) {\n-        m.check(species());\n-        $Type$Species vsp = vspecies();\n+    void intoBooleanArray0Template(Class<M> maskClass, boolean[] a, int offset, M m, boolean offsetInRange) {\n@@ -4986,7 +5021,4 @@\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, booleanArrayAddress(a, offset),\n-            normalized, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = (e & 1) != 0));\n+        intoArray0Template(maskClass, a, booleanArrayAddress(a, offset), offset,\n+            normalized,  m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = (e & 1) != 0));\n@@ -5014,1 +5046,1 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<$Boxtype$> m);\n+    void intoByteArray0(byte[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange);\n@@ -5018,7 +5050,3 @@\n-    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m) {\n-        $Type$Species vsp = vspecies();\n-        m.check(vsp);\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, byteArrayAddress(a, offset),\n-            this, m, a, offset,\n+    void intoByteArray0Template(Class<M> maskClass, byte[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, byteArrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n@@ -5047,1 +5075,1 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<$Boxtype$> m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange);\n@@ -5051,1 +5079,1 @@\n-    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m) {\n+    void intoByteBuffer0Template(Class<M> maskClass, ByteBuffer bb, int offset, M m, boolean offsetInRange) {\n@@ -5056,1 +5084,1 @@\n-                this, m, bb, offset,\n+                this, m, offsetInRange, bb, offset,\n@@ -5067,1 +5095,1 @@\n-    void intoCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m);\n+    void intoCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange);\n@@ -5071,10 +5099,5 @@\n-    void intoCharArray0Template(Class<M> maskClass, char[] a, int offset, M m) {\n-        m.check(species());\n-        $Type$Species vsp = vspecies();\n-        VectorSupport.storeMasked(\n-            vsp.vectorType(), maskClass, vsp.elementType(), vsp.laneCount(),\n-            a, charArrayAddress(a, offset),\n-            this, m, a, offset,\n-            (arr, off, v, vm)\n-            -> v.stOp(arr, off, vm,\n-                      (arr_, off_, i, e) -> arr_[off_ + i] = (char) e));\n+    void intoCharArray0Template(Class<M> maskClass, char[] a, int offset, M m, boolean offsetInRange) {\n+        intoArray0Template(maskClass, a, charArrayAddress(a, offset), offset,\n+            this, m, offsetInRange,\n+            (arr, off, v, vm) -> v.stOp(arr, off, vm,\n+                                        (arr_, off_, i, e) -> arr_[off_ + i] = (char) e));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":75,"deletions":52,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1197,2 +1197,2 @@\n-    void intoArray0($type$[] a, int offset, VectorMask<$Boxtype$> m) {\n-        super.intoArray0Template($masktype$.class, a, offset, ($masktype$) m);\n+    void intoArray0($type$[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange) {\n+        super.intoArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);\n@@ -1214,2 +1214,2 @@\n-    void intoBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m) {\n-        super.intoBooleanArray0Template($masktype$.class, a, offset, ($masktype$) m);\n+    void intoBooleanArray0(boolean[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange) {\n+        super.intoBooleanArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);\n@@ -1229,2 +1229,2 @@\n-    void intoByteArray0(byte[] a, int offset, VectorMask<$Boxtype$> m) {\n-        super.intoByteArray0Template($masktype$.class, a, offset, ($masktype$) m);  \/\/ specialize\n+    void intoByteArray0(byte[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange) {\n+        super.intoByteArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);  \/\/ specialize\n@@ -1236,2 +1236,2 @@\n-    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<$Boxtype$> m) {\n-        super.intoByteBuffer0Template($masktype$.class, bb, offset, ($masktype$) m);\n+    void intoByteBuffer0(ByteBuffer bb, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange) {\n+        super.intoByteBuffer0Template($masktype$.class, bb, offset, ($masktype$) m, offsetInRange);\n@@ -1244,2 +1244,2 @@\n-    void intoCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m) {\n-        super.intoCharArray0Template($masktype$.class, a, offset, ($masktype$) m);\n+    void intoCharArray0(char[] a, int offset, VectorMask<$Boxtype$> m, boolean offsetInRange) {\n+        super.intoCharArray0Template($masktype$.class, a, offset, ($masktype$) m, offsetInRange);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,138 @@\n+\/\/\n+\/\/ Copyright (c) 2022, Arm Limited. All rights reserved.\n+\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\/\/\n+\/\/ This code is free software; you can redistribute it and\/or modify it\n+\/\/ under the terms of the GNU General Public License version 2 only, as\n+\/\/ published by the Free Software Foundation.\n+\/\/\n+\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n+\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+\/\/ version 2 for more details (a copy is included in the LICENSE file that\n+\/\/ accompanied this code).\n+\/\/\n+\/\/ You should have received a copy of the GNU General Public License version\n+\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n+\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\/\/\n+\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+\/\/ or visit www.oracle.com if you need additional information or have any\n+\/\/ questions.\n+\/\/\n+\/\/\n+package org.openjdk.bench.jdk.incubator.vector;\n+\n+import java.util.concurrent.TimeUnit;\n+import jdk.incubator.vector.*;\n+import org.openjdk.jmh.annotations.*;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 3, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 1, jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+public class StoreMaskedBenchmark {\n+    @Param({\"1024\"})\n+    private int size;\n+\n+    private byte[] byteIn;\n+    private byte[] byteOut;\n+    private short[] shortIn;\n+    private short[] shortOut;\n+    private int[] intIn;\n+    private int[] intOut;\n+    private long[] longIn;\n+    private long[] longOut;\n+    private float[] floatIn;\n+    private float[] floatOut;\n+    private double[] doubleIn;\n+    private double[] doubleOut;\n+\n+    private boolean[] m;\n+\n+    private static final VectorSpecies<Byte> bspecies = VectorSpecies.ofLargestShape(byte.class);\n+    private static final VectorSpecies<Short> sspecies = VectorSpecies.ofLargestShape(short.class);\n+    private static final VectorSpecies<Integer> ispecies = VectorSpecies.ofLargestShape(int.class);\n+    private static final VectorSpecies<Long> lspecies = VectorSpecies.ofLargestShape(long.class);\n+    private static final VectorSpecies<Float> fspecies = VectorSpecies.ofLargestShape(float.class);\n+    private static final VectorSpecies<Double> dspecies = VectorSpecies.ofLargestShape(double.class);\n+\n+    @Setup(Level.Trial)\n+    public void Setup() {\n+        byteIn = new byte[size];\n+        byteOut = new byte[size];\n+        shortIn = new short[size];\n+        shortOut = new short[size];\n+        intIn = new int[size];\n+        intOut = new int[size];\n+        longIn = new long[size];\n+        longOut = new long[size];\n+        floatIn = new float[size];\n+        floatOut = new float[size];\n+        doubleIn = new double[size];\n+        doubleOut = new double[size];\n+        m = new boolean[size];\n+\n+        for (int i = 0; i < size; i++) {\n+            byteIn[i] = (byte) i;\n+            shortIn[i] = (short) i;\n+            intIn[i] = i;\n+            longIn[i] = i;\n+            floatIn[i] = (float) i;\n+            doubleIn[i] = (double) i;\n+        }\n+        for (int i = 0; i < size; i++) {\n+            m[i] = i % 2 == 0;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void byteStoreArrayMask() {\n+        for (int i = 0; i < size; i += bspecies.length()) {\n+            VectorMask<Byte> mask = VectorMask.fromArray(bspecies, m, i);\n+            ByteVector.fromArray(bspecies, byteIn, i).intoArray(byteOut, i, mask);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void shortStoreArrayMask() {\n+        for (int i = 0; i < size; i += sspecies.length()) {\n+            VectorMask<Short> mask = VectorMask.fromArray(sspecies, m, i);\n+            ShortVector.fromArray(sspecies, shortIn, i).intoArray(shortOut, i, mask);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void intStoreArrayMask() {\n+        for (int i = 0; i < size; i += ispecies.length()) {\n+            VectorMask<Integer> mask = VectorMask.fromArray(ispecies, m, i);\n+            IntVector.fromArray(ispecies, intIn, i).intoArray(intOut, i, mask);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void longStoreArrayMask() {\n+        for (int i = 0; i < size; i += lspecies.length()) {\n+            VectorMask<Long> mask = VectorMask.fromArray(lspecies, m, i);\n+            LongVector.fromArray(lspecies, longIn, i).intoArray(longOut, i, mask);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void floatStoreArrayMask() {\n+        for (int i = 0; i < size; i += fspecies.length()) {\n+            VectorMask<Float> mask = VectorMask.fromArray(fspecies, m, i);\n+            FloatVector.fromArray(fspecies, floatIn, i).intoArray(floatOut, i, mask);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void doubleStoreArrayMask() {\n+        for (int i = 0; i < size; i += dspecies.length()) {\n+            VectorMask<Double> mask = VectorMask.fromArray(dspecies, m, i);\n+            DoubleVector.fromArray(dspecies, doubleIn, i).intoArray(doubleOut, i, mask);\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/StoreMaskedBenchmark.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"}]}