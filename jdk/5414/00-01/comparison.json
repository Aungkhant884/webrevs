{"files":[{"patch":"@@ -2329,5 +2329,5 @@\n-void G1CollectedHeap::par_iterate_regions_array_part_from(HeapRegionClosure* cl,\n-                                                          HeapRegionClaimer* hr_claimer,\n-                                                          const uint* regions,\n-                                                          size_t length,\n-                                                          uint worker_id) const {\n+void G1CollectedHeap::par_iterate_regions_array(HeapRegionClosure* cl,\n+                                                HeapRegionClaimer* hr_claimer,\n+                                                const uint regions[],\n+                                                size_t length,\n+                                                uint worker_id) const {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1158,1 +1158,1 @@\n-  \/\/ Iterate part of an array of region indexes given by offset and length, applying\n+  \/\/ Iterate an array of region indexes given by offset and length, applying\n@@ -1160,6 +1160,6 @@\n-  \/\/ in the part to start the iteration to allow for more efficient parallel iteration.\n-  void par_iterate_regions_array_part_from(HeapRegionClosure* cl,\n-                                           HeapRegionClaimer* hr_claimer,\n-                                           const uint* regions,\n-                                           size_t length,\n-                                           uint worker_id) const;\n+  \/\/ to start the iteration to allow for more efficient parallel iteration.\n+  void par_iterate_regions_array(HeapRegionClosure* cl,\n+                                 HeapRegionClaimer* hr_claimer,\n+                                 const uint regions[],\n+                                 size_t length,\n+                                 uint worker_id) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -235,6 +235,6 @@\n-  assert(length >= offset, \"Must be\");\n-  _g1h->par_iterate_regions_array_part_from(cl,\n-                                            hr_claimer,\n-                                            &_collection_set_regions[offset],\n-                                            length-offset,\n-                                            worker_id);\n+  assert(length > offset, \"Must be\");\n+  _g1h->par_iterate_regions_array(cl,\n+                                  hr_claimer,\n+                                  &_collection_set_regions[offset],\n+                                  length - offset,\n+                                  worker_id);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -52,5 +52,5 @@\n-  G1CollectedHeap::heap()->par_iterate_regions_array_part_from(closure,\n-                                                               _hrclaimer,\n-                                                               _evac_failure_regions,\n-                                                               Atomic::load(&_evac_failure_regions_cur_length),\n-                                                               worker_id);\n+  G1CollectedHeap::heap()->par_iterate_regions_array(closure,\n+                                                     _hrclaimer,\n+                                                     _evac_failure_regions,\n+                                                     Atomic::load(&_evac_failure_regions_cur_length),\n+                                                     worker_id);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}