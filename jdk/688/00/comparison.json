{"files":[{"patch":"@@ -62,47 +62,0 @@\n-inline bool match_F_RNY(jshort flags) {\n-  const int req = JVM_ACC_NATIVE | JVM_ACC_SYNCHRONIZED;\n-  const int neg = JVM_ACC_STATIC;\n-  return (flags & (req | neg)) == req;\n-}\n-\n-static vmIntrinsics::ID wrapper_intrinsic(BasicType type, bool unboxing) {\n-#define TYPE2(type, unboxing) ((int)(type)*2 + ((unboxing) ? 1 : 0))\n-  switch (TYPE2(type, unboxing)) {\n-#define BASIC_TYPE_CASE(type, box, unbox) \\\n-    case TYPE2(type, false):  return vmIntrinsics::box; \\\n-    case TYPE2(type, true):   return vmIntrinsics::unbox\n-    BASIC_TYPE_CASE(T_BOOLEAN, _Boolean_valueOf,   _booleanValue);\n-    BASIC_TYPE_CASE(T_BYTE,    _Byte_valueOf,      _byteValue);\n-    BASIC_TYPE_CASE(T_CHAR,    _Character_valueOf, _charValue);\n-    BASIC_TYPE_CASE(T_SHORT,   _Short_valueOf,     _shortValue);\n-    BASIC_TYPE_CASE(T_INT,     _Integer_valueOf,   _intValue);\n-    BASIC_TYPE_CASE(T_LONG,    _Long_valueOf,      _longValue);\n-    BASIC_TYPE_CASE(T_FLOAT,   _Float_valueOf,     _floatValue);\n-    BASIC_TYPE_CASE(T_DOUBLE,  _Double_valueOf,    _doubleValue);\n-#undef BASIC_TYPE_CASE\n-  }\n-#undef TYPE2\n-  return vmIntrinsics::_none;\n-}\n-\n-vmIntrinsics::ID vmIntrinsics::for_boxing(BasicType type) {\n-  return wrapper_intrinsic(type, false);\n-}\n-vmIntrinsics::ID vmIntrinsics::for_unboxing(BasicType type) {\n-  return wrapper_intrinsic(type, true);\n-}\n-\n-vmIntrinsics::ID vmIntrinsics::for_raw_conversion(BasicType src, BasicType dest) {\n-#define SRC_DEST(s,d) (((int)(s) << 4) + (int)(d))\n-  switch (SRC_DEST(src, dest)) {\n-  case SRC_DEST(T_INT, T_FLOAT):   return vmIntrinsics::_intBitsToFloat;\n-  case SRC_DEST(T_FLOAT, T_INT):   return vmIntrinsics::_floatToRawIntBits;\n-\n-  case SRC_DEST(T_LONG, T_DOUBLE): return vmIntrinsics::_longBitsToDouble;\n-  case SRC_DEST(T_DOUBLE, T_LONG): return vmIntrinsics::_doubleToRawLongBits;\n-  }\n-#undef SRC_DEST\n-\n-  return vmIntrinsics::_none;\n-}\n-\n@@ -734,1 +687,0 @@\n-  case F_RNY:fname = \"native synchronized \"; break;\n@@ -752,0 +704,1 @@\n+#ifdef ASSERT\n@@ -793,63 +746,1 @@\n-\n-\n-#ifndef PRODUCT\n-\/\/ verify_method performs an extra check on a matched intrinsic method\n-\n-static bool match_method(Method* m, Symbol* n, Symbol* s) {\n-  return (m->name() == n &&\n-          m->signature() == s);\n-}\n-\n-static vmIntrinsics::ID match_method_with_klass(Method* m, Symbol* mk) {\n-#define VM_INTRINSIC_MATCH(id, klassname, namepart, sigpart, flags) \\\n-  { Symbol* k = vmSymbols::klassname(); \\\n-    if (mk == k) { \\\n-      Symbol* n = vmSymbols::namepart(); \\\n-      Symbol* s = vmSymbols::sigpart(); \\\n-      if (match_method(m, n, s)) \\\n-        return vmIntrinsics::id; \\\n-    } }\n-  VM_INTRINSICS_DO(VM_INTRINSIC_MATCH,\n-                   VM_SYMBOL_IGNORE, VM_SYMBOL_IGNORE, VM_SYMBOL_IGNORE, VM_ALIAS_IGNORE);\n-  return vmIntrinsics::_none;\n-#undef VM_INTRINSIC_MATCH\n-}\n-\n-void vmIntrinsics::verify_method(ID actual_id, Method* m) {\n-  Symbol* mk = m->method_holder()->name();\n-  ID declared_id = match_method_with_klass(m, mk);\n-\n-  if (declared_id == actual_id)  return; \/\/ success\n-\n-  if (declared_id == _none && actual_id != _none && mk == vmSymbols::java_lang_StrictMath()) {\n-    \/\/ Here are a few special cases in StrictMath not declared in vmSymbols.hpp.\n-    switch (actual_id) {\n-    case _min:\n-    case _max:\n-    case _dsqrt:\n-      declared_id = match_method_with_klass(m, vmSymbols::java_lang_Math());\n-      if (declared_id == actual_id)  return; \/\/ acceptable alias\n-      break;\n-    default:\n-        break;\n-    }\n-  }\n-\n-  const char* declared_name = name_at(declared_id);\n-  const char* actual_name   = name_at(actual_id);\n-  m = NULL;\n-  ttyLocker ttyl;\n-  if (xtty != NULL) {\n-    xtty->begin_elem(\"intrinsic_misdeclared actual='%s' declared='%s'\",\n-                     actual_name, declared_name);\n-    xtty->method(m);\n-    xtty->end_elem(\"%s\", \"\");\n-  }\n-  if (PrintMiscellaneous && (WizardMode || Verbose)) {\n-    tty->print_cr(\"*** misidentified method; %s(%d) should be %s(%d):\",\n-                  declared_name, declared_id, actual_name, actual_id);\n-    m->print_short_name(tty);\n-    tty->cr();\n-  }\n-}\n-#endif \/\/PRODUCT\n+#endif \/\/ ASSERT\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":2,"deletions":111,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -1039,1 +1039,0 @@\n-    F_RNY,                      \/\/ !static  native  synchronized\n@@ -1044,1 +1043,1 @@\n-    log2_FLAG_LIMIT = 4         \/\/ checked by an assert at start-up\n+    log2_FLAG_LIMIT = 3         \/\/ checked by an assert at start-up\n@@ -1082,2 +1081,1 @@\n-  static void verify_method(ID actual_id, Method* m) PRODUCT_RETURN;\n-\n+#ifdef ASSERT\n@@ -1089,0 +1087,1 @@\n+#endif\n@@ -1092,7 +1091,0 @@\n-  \/\/ Wrapper object methods:\n-  static ID for_boxing(BasicType type);\n-  static ID for_unboxing(BasicType type);\n-\n-  \/\/ Raw conversion:\n-  static ID for_raw_conversion(BasicType src, BasicType dest);\n-\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"}]}