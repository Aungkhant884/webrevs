{"files":[{"patch":"@@ -239,1 +239,1 @@\n-    trace_to_root(orig_obj, NULL, &value);\n+    trace_to_root(&ls, orig_obj, NULL, &value);\n@@ -251,1 +251,1 @@\n-  LogStream* _ls;\n+  outputStream* _st;\n@@ -254,2 +254,2 @@\n-  TraceFields(oop orig_obj, oop orig_field, LogStream* ls)\n-    : _orig_obj(orig_obj), _orig_field(orig_field), _ls(ls) {}\n+  TraceFields(oop orig_obj, oop orig_field, outputStream* st)\n+    : _orig_obj(orig_obj), _orig_field(orig_field), _st(st) {}\n@@ -261,1 +261,1 @@\n-        _ls->print(\"::%s (offset = %d)\", fd->name()->as_C_string(), fd->offset());\n+        _st->print(\"::%s (offset = %d)\", fd->name()->as_C_string(), fd->offset());\n@@ -267,0 +267,10 @@\n+\/\/ Call this function (from gdb, etc) if you want to know why an object is archived.\n+void CDSHeapVerifier::trace_to_root(outputStream* st, oop orig_obj) {\n+  HeapShared::CachedOopInfo* info = HeapShared::archived_object_cache()->get(orig_obj);\n+  if (info != NULL) {\n+    trace_to_root(st, orig_obj, NULL, info);\n+  } else {\n+    st->print_cr(\"Not an archived object??\");\n+  }\n+}\n+\n@@ -268,1 +278,1 @@\n-int CDSHeapVerifier::trace_to_root(oop orig_obj, oop orig_field, HeapShared::CachedOopInfo* p) {\n+int CDSHeapVerifier::trace_to_root(outputStream* st, oop orig_obj, oop orig_field, HeapShared::CachedOopInfo* info) {\n@@ -270,3 +280,2 @@\n-  LogStream ls(Log(cds, heap)::warning());\n-  if (p->_referrer != NULL) {\n-    HeapShared::CachedOopInfo* ref = HeapShared::archived_object_cache()->get(p->_referrer);\n+  if (info->_referrer != NULL) {\n+    HeapShared::CachedOopInfo* ref = HeapShared::archived_object_cache()->get(info->_referrer);\n@@ -274,1 +283,1 @@\n-    level = trace_to_root(p->_referrer, orig_obj, ref) + 1;\n+    level = trace_to_root(st, info->_referrer, orig_obj, ref) + 1;\n@@ -276,1 +285,1 @@\n-    ls.print_cr(\"[%2d] (shared string table)\", level++);\n+    st->print_cr(\"[%2d] (shared string table)\", level++);\n@@ -280,3 +289,3 @@\n-  ls.print(\"[%2d] \", level);\n-  orig_obj->print_address_on(&ls);\n-  ls.print(\" %s\", k->internal_name());\n+  st->print(\"[%2d] \", level);\n+  orig_obj->print_address_on(st);\n+  st->print(\" %s\", k->internal_name());\n@@ -285,1 +294,1 @@\n-      TraceFields clo(orig_obj, orig_field, &ls);;\n+      TraceFields clo(orig_obj, orig_field, st);\n@@ -292,1 +301,1 @@\n-          ls.print(\" @[%d]\", i);\n+          st->print(\" @[%d]\", i);\n@@ -298,1 +307,1 @@\n-  ls.cr();\n+  st->cr();\n","filename":"src\/hotspot\/share\/cds\/cdsHeapVerifier.cpp","additions":26,"deletions":17,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-  int trace_to_root(oop orig_obj, oop orig_field, HeapShared::CachedOopInfo* p);\n+  static int trace_to_root(outputStream* st, oop orig_obj, oop orig_field, HeapShared::CachedOopInfo* p);\n@@ -86,0 +86,2 @@\n+\n+  static void trace_to_root(outputStream* st, oop orig_obj);\n","filename":"src\/hotspot\/share\/cds\/cdsHeapVerifier.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}