{"files":[{"patch":"@@ -164,1 +164,2 @@\n-    public GSSContextImpl(GSSManagerImpl gssManager, GSSCredential myCred) {\n+    public GSSContextImpl(GSSManagerImpl gssManager, GSSCredential myCred)\n+        throws GSSException {\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/GSSContextImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-        GSSNameSpi mechElement) {\n+        GSSNameSpi mechElement) throws GSSException {\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/GSSNameImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    public static void writeLittleEndian(int value, byte[] array) {\n+    public static final void writeLittleEndian(int value, byte[] array) {\n@@ -59,2 +59,2 @@\n-    public static void writeLittleEndian(int value, byte[] array,\n-                                         int pos) {\n+    public static final void writeLittleEndian(int value, byte[] array,\n+                                               int pos) {\n@@ -67,1 +67,1 @@\n-    public static void writeBigEndian(int value, byte[] array) {\n+    public static final void writeBigEndian(int value, byte[] array) {\n@@ -71,2 +71,2 @@\n-    public static void writeBigEndian(int value, byte[] array,\n-                                      int pos) {\n+    public static final void writeBigEndian(int value, byte[] array,\n+                                            int pos) {\n@@ -89,1 +89,1 @@\n-    public static int readLittleEndian(byte[] data, int pos, int size) {\n+    public static final int readLittleEndian(byte[] data, int pos, int size) {\n@@ -101,1 +101,1 @@\n-    public static int readBigEndian(byte[] data, int pos, int size) {\n+    public static final int readBigEndian(byte[] data, int pos, int size) {\n@@ -120,1 +120,1 @@\n-    public static void writeInt(int val, OutputStream os)\n+    public static final void writeInt(int val, OutputStream os)\n@@ -133,1 +133,1 @@\n-    public static int writeInt(int val, byte[] dest, int pos) {\n+    public static final int writeInt(int val, byte[] dest, int pos) {\n@@ -147,1 +147,1 @@\n-    public static int readInt(InputStream is) throws IOException {\n+    public static final int readInt(InputStream is) throws IOException {\n@@ -159,1 +159,1 @@\n-    public static int readInt(byte[] src, int pos) {\n+    public static final int readInt(byte[] src, int pos) {\n@@ -173,1 +173,1 @@\n-    public static void readFully(InputStream is, byte[] buffer)\n+    public static final void readFully(InputStream is, byte[] buffer)\n@@ -190,2 +190,2 @@\n-    public static void readFully(InputStream is,\n-                                 byte[] buffer, int offset, int len)\n+    public static final void readFully(InputStream is,\n+                                       byte[] buffer, int offset, int len)\n@@ -205,1 +205,1 @@\n-    public static void debug(String str) {\n+    public static final void debug(String str) {\n@@ -209,1 +209,1 @@\n-    public static String getHexBytes(byte[] bytes) {\n+    public static final String getHexBytes(byte[] bytes) {\n@@ -213,1 +213,1 @@\n-    public static String getHexBytes(byte[] bytes, int len) {\n+    public static final String getHexBytes(byte[] bytes, int len) {\n@@ -217,1 +217,1 @@\n-    public static String getHexBytes(byte[] bytes, int pos, int len) {\n+    public static final String getHexBytes(byte[] bytes, int pos, int len) {\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/GSSToken.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -443,1 +443,7 @@\n-    private record PreferencesEntry(Provider p, Oid oid) {\n+    private static final class PreferencesEntry {\n+        private Provider p;\n+        private Oid oid;\n+        PreferencesEntry(Provider p, Oid oid) {\n+            this.p = p;\n+            this.oid = oid;\n+        }\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/ProviderList.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -675,1 +675,1 @@\n-        throws GSSException {\n+        throws GSSException, IOException {\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/CipherHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,3 @@\n-                    (PrivilegedExceptionAction<ServiceCreds>) () -> Krb5Util.getServiceCreds(\n+                        new PrivilegedExceptionAction<ServiceCreds>() {\n+                public ServiceCreds run() throws Exception {\n+                    return Krb5Util.getServiceCreds(\n@@ -72,1 +74,2 @@\n-                        serverPrinc));\n+                        serverPrinc);\n+                }});\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5AcceptCredential.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -645,15 +645,16 @@\n-                                   (PrivilegedExceptionAction<KerberosTicket>) () -> {\n-                                       \/\/ XXX to be cleaned\n-                                       \/\/ highly consider just calling:\n-                                       \/\/ Subject.getSubject\n-                                       \/\/ SubjectComber.find\n-                                       \/\/ instead of Krb5Util.getServiceTicket\n-                                       return Krb5Util.getServiceTicket(\n-                                           GSSCaller.CALLER_UNKNOWN,\n-                                           \/\/ since it's useSubjectCredsOnly here,\n-                                           \/\/ don't worry about the null\n-                                           proxyCreds == null ?\n-                                               myName.getKrb5PrincipalName().getName():\n-                                               proxyCreds.getName().getKrb5PrincipalName().getName(),\n-                                           peerName.getKrb5PrincipalName().getName());\n-                                   });\n+                                new PrivilegedExceptionAction<KerberosTicket>() {\n+                                public KerberosTicket run() throws Exception {\n+                                    \/\/ XXX to be cleaned\n+                                    \/\/ highly consider just calling:\n+                                    \/\/ Subject.getSubject\n+                                    \/\/ SubjectComber.find\n+                                    \/\/ instead of Krb5Util.getServiceTicket\n+                                    return Krb5Util.getServiceTicket(\n+                                        GSSCaller.CALLER_UNKNOWN,\n+                                        \/\/ since it's useSubjectCredsOnly here,\n+                                        \/\/ don't worry about the null\n+                                        proxyCreds == null ?\n+                                            myName.getKrb5PrincipalName().getName():\n+                                            proxyCreds.getName().getKrb5PrincipalName().getName(),\n+                                        peerName.getKrb5PrincipalName().getName());\n+                                }});\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5Context.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -133,1 +133,2 @@\n-                               InetAddress[] clientAddresses) {\n+                               InetAddress[] clientAddresses)\n+                               throws GSSException {\n@@ -370,6 +371,7 @@\n-                    (PrivilegedExceptionAction<KerberosTicket>) () -> {\n-                        \/\/ It's OK to use null as serverPrincipal. TGT is almost\n-                        \/\/ the first ticket for a principal, and we use list.\n-                        return Krb5Util.getInitialTicket(\n-                            realCaller, clientPrincipal);\n-                            });\n+                new PrivilegedExceptionAction<KerberosTicket>() {\n+                public KerberosTicket run() throws Exception {\n+                    \/\/ It's OK to use null as serverPrincipal. TGT is almost\n+                    \/\/ the first ticket for a principal and we use list.\n+                    return Krb5Util.getInitialTicket(\n+                        realCaller, clientPrincipal);\n+                        }});\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5InitCredential.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -532,1 +532,1 @@\n-    protected static int getTokenSize(CipherHelper ch)\n+    protected static final int getTokenSize(CipherHelper ch)\n@@ -538,1 +538,1 @@\n-     * Obtains the context key that is associated with this token.\n+     * Obtains the context key associated with this token.\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/MessageToken.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -238,1 +238,1 @@\n-        assert false;\n+        assert(pContext != 0);\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/wrapper\/NativeGSSContext.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}