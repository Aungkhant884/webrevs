{"files":[{"patch":"@@ -0,0 +1,322 @@\n+package org.openjdk.bench.java.math;\n+\n+import javax.management.MBeanServer;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadMXBean;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.math.BigInteger;\n+import java.util.Arrays;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.LongSummaryStatistics;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.ForkJoinWorkerThread;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.BinaryOperator;\n+import java.util.function.LongUnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import static java.util.concurrent.ForkJoinPool.defaultForkJoinWorkerThreadFactory;\n+\n+\/**\n+ * Benchmark for checking performance difference between sequential and parallel\n+ * multiply of very large Mersenne primes using BigInteger. We want to measure\n+ * real time, user time, system time and the amount of memory allocated. To\n+ * calculate this, we create our own thread factory for the common ForkJoinPool\n+ * and then use that to measure user time, cpu time and bytes allocated.\n+ * <p>\n+ * We use reflection to discover all methods that match \"*ultiply\", and use them\n+ * to multiply two very large Mersenne primes together.\n+ * <p>\n+ * <h3>Results on a 1-6-2 machine running Ubuntu linux<\/h3>\n+ * <p>\n+ * Memory allocation increased from 83.9GB to 84GB, for both the sequential and\n+ * parallel versions. This is an increase of just 0.1%. On this machine, the\n+ * parallel version was 3.8x faster in latency (real time), but it used 2.7x\n+ * more CPU resources.\n+ * <p>\n+ * Testing multiplying Mersenne primes of 2^57885161-1 and 2^82589933-1\n+ * <p>\n+ * <pre>\n+ * openjdk version \"18-internal\" 2022-03-15\n+ * BigInteger.parallelMultiply()\n+ * real  0m6.288s\n+ * user  1m3.010s\n+ * sys   0m0.027s\n+ * mem   84.0GB\n+ * BigInteger.multiply()\n+ * real  0m23.682s\n+ * user  0m23.530s\n+ * sys   0m0.004s\n+ * mem   84.0GB\n+ *\n+ * openjdk version \"1.8.0_302\"\n+ * BigInteger.multiply()\n+ * real  0m25.657s\n+ * user  0m25.390s\n+ * sys   0m0.001s\n+ * mem   83.9GB\n+ *\n+ * openjdk version \"9.0.7.1\"\n+ * BigInteger.multiply()\n+ * real  0m24.907s\n+ * user  0m24.700s\n+ * sys   0m0.001s\n+ * mem   83.9GB\n+ *\n+ * openjdk version \"10.0.2\" 2018-07-17\n+ * BigInteger.multiply()\n+ * real  0m24.632s\n+ * user  0m24.380s\n+ * sys   0m0.004s\n+ * mem   83.9GB\n+ *\n+ * openjdk version \"11.0.12\" 2021-07-20 LTS\n+ * BigInteger.multiply()\n+ * real  0m22.114s\n+ * user  0m21.930s\n+ * sys   0m0.001s\n+ * mem   83.9GB\n+ *\n+ * openjdk version \"12.0.2\" 2019-07-16\n+ * BigInteger.multiply()\n+ * real  0m23.015s\n+ * user  0m22.830s\n+ * sys   0m0.000s\n+ * mem   83.9GB\n+ *\n+ * openjdk version \"13.0.9\" 2021-10-19\n+ * BigInteger.multiply()\n+ * real  0m23.548s\n+ * user  0m23.350s\n+ * sys   0m0.005s\n+ * mem   83.9GB\n+ *\n+ * openjdk version \"14.0.2\" 2020-07-14\n+ * BigInteger.multiply()\n+ * real  0m22.918s\n+ * user  0m22.530s\n+ * sys   0m0.131s\n+ * mem   83.9GB\n+ *\n+ * openjdk version \"15.0.5\" 2021-10-19\n+ * BigInteger.multiply()\n+ * real  0m22.038s\n+ * user  0m21.750s\n+ * sys   0m0.003s\n+ * mem   83.9GB\n+ *\n+ * openjdk version \"16.0.2\" 2021-07-20\n+ * BigInteger.multiply()\n+ * real  0m23.049s\n+ * user  0m22.760s\n+ * sys   0m0.006s\n+ * mem   83.9GB\n+ *\n+ * openjdk version \"17\" 2021-09-14\n+ * BigInteger.multiply()\n+ * real  0m22.580s\n+ * user  0m22.310s\n+ * sys   0m0.001s\n+ * mem   83.9GB\n+ *<\/pre>\n+ *\n+ * @author Heinz Kabutz, heinz@javaspecialists.eu\n+ *\/\n+public class BigIntegerMersennePrimeMultiply implements ForkJoinPool.ForkJoinWorkerThreadFactory {\n+    \/\/ Large Mersenne prime discovered by Curtis Cooper in 2013\n+    private static final int EXPONENT_1 = 57885161;\n+    private static final BigInteger MERSENNE_1 =\n+            BigInteger.ONE.shiftLeft(EXPONENT_1).subtract(BigInteger.ONE);\n+    \/\/ Largest Mersenne prime number discovered by Patrick Laroche in 2018\n+    private static final int EXPONENT_2 = 82589933;\n+    private static final BigInteger MERSENNE_2 =\n+            BigInteger.ONE.shiftLeft(EXPONENT_2).subtract(BigInteger.ONE);\n+    private static boolean DEBUG = false;\n+\n+    public static void main(String... args) {\n+        System.setProperty(\"java.util.concurrent.ForkJoinPool.common.threadFactory\",\n+                BigIntegerMersennePrimeMultiply.class.getName());\n+        System.out.println(\"Testing multiplying Mersenne primes of \" +\n+                \"2^\" + EXPONENT_1 + \"-1 and 2^\" + EXPONENT_2 + \"-1\");\n+        addCounters(Thread.currentThread());\n+        System.out.println(\"Using the following multiply methods:\");\n+        List<Method> methods = Arrays.stream(BigInteger.class.getMethods())\n+                .filter(method -> method.getName().endsWith(\"ultiply\") &&\n+                        method.getParameterCount() == 1 &&\n+                        method.getParameterTypes()[0] == BigInteger.class)\n+                .peek(method -> System.out.println(\"    \" + method))\n+                .collect(Collectors.toList());\n+\n+        for (int i = 0; i < 3; i++) {\n+            System.out.println();\n+            methods.forEach(BigIntegerMersennePrimeMultiply::test);\n+        }\n+    }\n+\n+    private static void test(Method method) {\n+        BinaryOperator<BigInteger> multiplyOperator = (a, b) -> {\n+            try {\n+                return (BigInteger) method.invoke(a, b);\n+            } catch (IllegalAccessException e) {\n+                throw new AssertionError(e);\n+            } catch (InvocationTargetException e) {\n+                throw new AssertionError(e.getCause());\n+            }\n+        };\n+        test(method.getName(), multiplyOperator);\n+    }\n+\n+    private static void test(String description,\n+                             BinaryOperator<BigInteger> multiplyOperator) {\n+        System.out.println(\"BigInteger.\" + description + \"()\");\n+        resetAllCounters();\n+        long elapsedTimeInNanos = System.nanoTime();\n+        try {\n+            BigInteger result1 = multiplyOperator.apply(MERSENNE_1, MERSENNE_2);\n+            BigInteger result2 = multiplyOperator.apply(MERSENNE_2, MERSENNE_1);\n+            if (result1.bitLength() != 140475094)\n+                throw new AssertionError(\"Expected bitLength: 140475094, \" +\n+                        \"but was \" + result1.bitLength());\n+            if (result2.bitLength() != 140475094)\n+                throw new AssertionError(\"Expected bitLength: 140475094, \" +\n+                        \"but was \" + result1.bitLength());\n+        } finally {\n+            elapsedTimeInNanos = System.nanoTime() - elapsedTimeInNanos;\n+        }\n+\n+        LongSummaryStatistics userTimeStatistics = getStatistics(userTime);\n+        LongSummaryStatistics cpuTimeStatistics = getStatistics(cpuTime);\n+        LongSummaryStatistics memoryAllocationStatistics = getStatistics(bytes);\n+        System.out.println(\"real  \" + formatTime(elapsedTimeInNanos));\n+        System.out.println(\"user  \" + formatTime(userTimeStatistics.getSum()));\n+        System.out.println(\"sys   \" +\n+                formatTime(cpuTimeStatistics.getSum() - userTimeStatistics.getSum()));\n+        System.out.println(\"mem   \" + formatMemory(memoryAllocationStatistics.getSum(), 1));\n+    }\n+\n+    private static LongSummaryStatistics getStatistics(Map<Thread, AtomicLong> timeMap) {\n+        return timeMap.entrySet()\n+                .stream()\n+                .peek(entry -> {\n+                    long timeInMs = (counterExtractorMap.get(timeMap)\n+                            .applyAsLong(entry.getKey().getId())\n+                            - entry.getValue().get());\n+                    entry.getValue().set(timeInMs);\n+                })\n+                .peek(BigIntegerMersennePrimeMultiply::printTime)\n+                .map(Map.Entry::getValue)\n+                .mapToLong(AtomicLong::get)\n+                .summaryStatistics();\n+    }\n+\n+    private static void printTime(Map.Entry<Thread, AtomicLong> threadCounter) {\n+        if (DEBUG)\n+            System.out.printf(\"%s %d%n\", threadCounter.getKey(), threadCounter.getValue()\n+                    .get());\n+    }\n+\n+    private static void addCounters(Thread thread) {\n+        counterExtractorMap.forEach((map, timeExtractor) -> add(map, thread, timeExtractor));\n+    }\n+\n+    private static void add(Map<Thread, AtomicLong> time, Thread thread,\n+                            LongUnaryOperator timeExtractor) {\n+        time.put(thread, new AtomicLong(timeExtractor.applyAsLong(thread.getId())));\n+    }\n+\n+    private static void resetAllCounters() {\n+        counterExtractorMap.forEach(BigIntegerMersennePrimeMultiply::resetTimes);\n+    }\n+\n+    private static void resetTimes(Map<Thread, AtomicLong> timeMap, LongUnaryOperator timeMethod) {\n+        timeMap.forEach((thread, time) ->\n+                time.set(timeMethod.applyAsLong(thread.getId())));\n+    }\n+\n+    private static final Map<Thread, AtomicLong> userTime =\n+            new ConcurrentHashMap<>();\n+    private static final Map<Thread, AtomicLong> cpuTime =\n+            new ConcurrentHashMap<>();\n+    private static final Map<Thread, AtomicLong> bytes =\n+            new ConcurrentHashMap<>();\n+    private static final ThreadMXBean tmb = ManagementFactory.getThreadMXBean();\n+\n+    private static final Map<Map<Thread, AtomicLong>, LongUnaryOperator> counterExtractorMap =\n+            new IdentityHashMap<>();\n+\n+    static {\n+        counterExtractorMap.put(userTime, tmb::getThreadUserTime);\n+        counterExtractorMap.put(cpuTime, tmb::getThreadCpuTime);\n+        counterExtractorMap.put(bytes, BigIntegerMersennePrimeMultiply::threadAllocatedBytes);\n+    }\n+\n+    public final ForkJoinWorkerThread newThread(ForkJoinPool pool) {\n+        ForkJoinWorkerThread thread = defaultForkJoinWorkerThreadFactory.newThread(pool);\n+        addCounters(thread);\n+        return thread;\n+    }\n+\n+    private static final String[] SIGNATURE = new String[]{long.class.getName()};\n+    private static final MBeanServer mBeanServer;\n+    private static final ObjectName name;\n+\n+    static {\n+        try {\n+            name = new ObjectName(ManagementFactory.THREAD_MXBEAN_NAME);\n+            mBeanServer = ManagementFactory.getPlatformMBeanServer();\n+        } catch (MalformedObjectNameException e) {\n+            throw new ExceptionInInitializerError(e);\n+        }\n+    }\n+\n+    public static long threadAllocatedBytes(long threadId) {\n+        try {\n+            return (long) mBeanServer.invoke(\n+                    name,\n+                    \"getThreadAllocatedBytes\",\n+                    new Object[]{threadId},\n+                    SIGNATURE\n+            );\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(e);\n+        }\n+    }\n+\n+    public static String formatMemory(double bytes, int decimals) {\n+        double val;\n+        String unitStr;\n+        if (bytes < 1024) {\n+            val = bytes;\n+            unitStr = \"B\";\n+        } else if (bytes < 1024 * 1024) {\n+            val = bytes \/ 1024;\n+            unitStr = \"KB\";\n+        } else if (bytes < 1024 * 1024 * 1024) {\n+            val = bytes \/ (1024 * 1024);\n+            unitStr = \"MB\";\n+        } else if (bytes < 1024 * 1024 * 1024 * 1024L) {\n+            val = bytes \/ (1024 * 1024 * 1024L);\n+            unitStr = \"GB\";\n+        } else {\n+            val = bytes \/ (1024 * 1024 * 1024 * 1024L);\n+            unitStr = \"TB\";\n+        }\n+        return String.format(Locale.US, \"%.\" + decimals + \"f%s\", val, unitStr);\n+    }\n+\n+    public static String formatTime(long nanos) {\n+        if (nanos < 0) nanos = 0;\n+        long timeInMs = TimeUnit.NANOSECONDS.toMillis(nanos);\n+        long minutes = timeInMs \/ 60_000;\n+        double remainingMs = (timeInMs % 60_000) \/ 1000.0;\n+        return String.format(Locale.US, \"%dm%.3fs\", minutes, remainingMs);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerMersennePrimeMultiply.java","additions":322,"deletions":0,"binary":false,"changes":322,"status":"added"}]}