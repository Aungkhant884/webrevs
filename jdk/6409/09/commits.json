[{"commit":{"message":"Updated comment to include information about performance"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java"}],"sha":"ef74878e470836e7a13fca8f260fc51c1422a48e"},{"commit":{"message":"Benchmark for testing the effectiveness of BigInteger.parallelMultiply()"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerMersennePrimeMultiply.java"}],"sha":"fc7b844ad1369d43a8f06f753e061bdbc6880387"},{"commit":{"message":"Removed unnecessary output from the test"},"files":[{"filename":"test\/jdk\/java\/math\/BigInteger\/BigIntegerParallelMultiplyTest.java"}],"sha":"25e8c082073a8e86ffed3b802318d55954e594c5"},{"commit":{"message":"Changed depth type to byte to save 8 bytes on each RecursiveSquare instance"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java"}],"sha":"94c2d665e6cfbdf7865ce6beb5e36ce83a8e09af"},{"commit":{"message":"Made RecursiveOp fields package-private so that we do not need super. qualifiers in subclasses"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java"}],"sha":"3cd164439d996e9eaba4990fbf4d42b8149e73ee"},{"commit":{"message":"Incremented depth once instead of on every call"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java"}],"sha":"29fd51a194bc3d25f793d9650dd82b8bbd0eea3b"},{"commit":{"message":"Simplified depth calculation to rely on common pool parallelism or the current fork join pool executing the code."},"files":[{"filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java"}],"sha":"156ebbecb2ac21fd765b2e07a24101038ea81c87"},{"commit":{"message":"Removed serialVersionUID and annotated class with @SuppressWarning(\"serial\") instead"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java"}],"sha":"ecd261a696b668c9fab44f030763b17d812feba6"},{"commit":{"message":"Made forkOrInvoke() method protected to avoid strange compiler error"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java"}],"sha":"59de5298fb9c3be24918249a3b354e7c24f0c63c"},{"commit":{"message":"Added limit on the number of recursive tasks based on number of processors"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java"},{"filename":"test\/jdk\/java\/math\/BigInteger\/BigIntegerParallelMultiplyTest.java"}],"sha":"0d52e423c3cf41923f1f29d0dec32db76f8f2bb9"},{"commit":{"message":"Removed JVM flags from benchmark"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerParallelMultiply.java"}],"sha":"81a8b5996c5c6da8784bf9f33ac7634e7e0359f8"},{"commit":{"message":"Reordered import statements to be consistent with canonical order"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java"}],"sha":"66cec9bd90248848b14def4234a832e7957d2678"},{"commit":{"message":"Added parallelMultiply() method to BigInteger to allow large multiplications to run in parallel"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java"},{"filename":"test\/jdk\/java\/math\/BigInteger\/BigIntegerParallelMultiplyTest.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigIntegerParallelMultiply.java"}],"sha":"10faf9389655a154d848442fb0a353949acbdacb"}]