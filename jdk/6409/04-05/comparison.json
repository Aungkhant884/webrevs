{"files":[{"patch":"@@ -36,1 +36,0 @@\n-import java.io.Serial;\n@@ -40,0 +39,2 @@\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.ForkJoinWorkerThread;\n@@ -1865,0 +1866,1 @@\n+    @SuppressWarnings(\"serial\")\n@@ -1868,4 +1870,2 @@\n-         * if parallel is true. By default we use the Math.ceil() of\n-         * log2(availableProcessors). Can be overridden with the system\n-         * property -Djava.math.BigInteger.parallelForkThreshold=num. This\n-         * threshold is only relevant for Toom Cook 3 multiply and square.\n+         * if parallel is true. This threshold is only relevant for Toom Cook 3\n+         * multiply and square.\n@@ -1873,3 +1873,2 @@\n-        private static final int PARALLEL_FORK_THRESHOLD = Integer.getInteger(\n-                \"java.math.BigInteger.parallelForkThreshold\",\n-                (int) Math.ceil(Math.log(Runtime.getRuntime().availableProcessors()) \/ Math.log(2)));\n+        private static final int PARALLEL_FORK_DEPTH_THRESHOLD =\n+                calculateMaximumDepth(ForkJoinPool.getCommonPoolParallelism());\n@@ -1877,2 +1876,3 @@\n-        @Serial\n-        private static final long serialVersionUID = 0L;\n+        private static final int calculateMaximumDepth(int parallelism) {\n+            return 32 - Integer.numberOfLeadingZeros(parallelism);\n+        }\n@@ -1880,2 +1880,2 @@\n-        private final boolean parallel;\n-        private final int depth;\n+        final boolean parallel;\n+        final int depth;\n@@ -1888,0 +1888,9 @@\n+        private static int getParallelForkDepthThreshold() {\n+            if (Thread.currentThread() instanceof ForkJoinWorkerThread fjwt) {\n+                return calculateMaximumDepth(fjwt.getPool().getParallelism());\n+            }\n+            else {\n+                return PARALLEL_FORK_DEPTH_THRESHOLD;\n+            }\n+        }\n+\n@@ -1889,1 +1898,1 @@\n-            if (parallel && depth <= PARALLEL_FORK_THRESHOLD) fork();\n+            if (parallel && depth <= getParallelForkDepthThreshold()) fork();\n@@ -1894,0 +1903,1 @@\n+        @SuppressWarnings(\"serial\")\n@@ -1895,3 +1905,0 @@\n-            @Serial\n-            private static final long serialVersionUID = 0L;\n-\n@@ -1909,1 +1916,1 @@\n-                return a.multiply(b, true, super.parallel, super.depth);\n+                return a.multiply(b, true, parallel, depth);\n@@ -1913,0 +1920,1 @@\n+        @SuppressWarnings(\"serial\")\n@@ -1914,3 +1922,0 @@\n-            @Serial\n-            private static final long serialVersionUID = 0L;\n-\n@@ -1926,1 +1931,1 @@\n-                return a.square(true, super.parallel, super.depth);\n+                return a.square(true, parallel, depth);\n@@ -1930,6 +1935,0 @@\n-        private static RecursiveTask<BigInteger> exec(RecursiveOp op) {\n-            if (op.parallel && op.depth <= PARALLEL_FORK_THRESHOLD) op.fork();\n-            else op.invoke();\n-            return op;\n-        }\n-\n@@ -1997,1 +1996,2 @@\n-        var v0_task = RecursiveOp.multiply(a0, b0, parallel, depth + 1);\n+        depth++;\n+        var v0_task = RecursiveOp.multiply(a0, b0, parallel, depth);\n@@ -2000,1 +2000,1 @@\n-        var vm1_task = RecursiveOp.multiply(da1.subtract(a1), db1.subtract(b1), parallel, depth + 1);\n+        var vm1_task = RecursiveOp.multiply(da1.subtract(a1), db1.subtract(b1), parallel, depth);\n@@ -2003,1 +2003,1 @@\n-        var v1_task = RecursiveOp.multiply(da1, db1, parallel, depth + 1);\n+        var v1_task = RecursiveOp.multiply(da1, db1, parallel, depth);\n@@ -2005,2 +2005,2 @@\n-             db1.add(b2).shiftLeft(1).subtract(b0), true, parallel, depth + 1);\n-        vinf = a2.multiply(b2, true, parallel, depth + 1);\n+             db1.add(b2).shiftLeft(1).subtract(b0), true, parallel, depth);\n+        vinf = a2.multiply(b2, true, parallel, depth);\n@@ -2358,1 +2358,2 @@\n-        var v0_fork = RecursiveOp.square(a0, parallel, depth + 1);\n+        depth++;\n+        var v0_fork = RecursiveOp.square(a0, parallel, depth);\n@@ -2360,1 +2361,1 @@\n-        var vm1_fork = RecursiveOp.square(da1.subtract(a1), parallel, depth + 1);\n+        var vm1_fork = RecursiveOp.square(da1.subtract(a1), parallel, depth);\n@@ -2362,3 +2363,3 @@\n-        var v1_fork = RecursiveOp.square(da1, parallel, depth + 1);\n-        vinf = a2.square(true, parallel, depth + 1);\n-        v2 = da1.add(a2).shiftLeft(1).subtract(a0).square(true, parallel, depth + 1);\n+        var v1_fork = RecursiveOp.square(da1, parallel, depth);\n+        vinf = a2.square(true, parallel, depth);\n+        v2 = da1.add(a2).shiftLeft(1).subtract(a0).square(true, parallel, depth);\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":38,"deletions":37,"binary":false,"changes":75,"status":"modified"}]}