{"files":[{"patch":"@@ -718,0 +718,2 @@\n+    \/\/ Perform integrity checks on and mark the old block as dead *before* calling the real realloc(3) since it\n+    \/\/ may invalidate the old block, including its header.\n@@ -720,1 +722,1 @@\n-    const FreePackage free_package = header->free_package();\n+    const MallocHeader::FreeInfo free_info = header->free_info();\n@@ -729,1 +731,1 @@\n-      header->mark_block_as_alive();\n+      header->revive();\n@@ -732,2 +734,2 @@\n-    \/\/ realloc(3) succeeded, variable header now points to invalid memory and we need to record the free:ing\n-    MemTracker::record_free(free_package);\n+    \/\/ realloc(3) succeeded, variable header now points to invalid memory and we need to deaccount the old block.\n+    MemTracker::deaccount(free_info);\n@@ -735,2 +737,2 @@\n-    \/\/ After a successful realloc(3), we re-account the resized block with its new size\n-    \/\/ to NMT. This re-instantiates the NMT header.\n+    \/\/ After a successful realloc(3), we account the resized block with its new size\n+    \/\/ to NMT.\n@@ -740,1 +742,1 @@\n-    size_t old_size = free_package.size;\n+    size_t old_size = free_info.size;\n@@ -777,2 +779,2 @@\n-  \/\/ When NMT is enabled this checks for heap overwrites, then de-accounts the old block.\n-  void* const old_outer_ptr = MemTracker::enabled() ? MemTracker::record_free_block(memblock) : memblock;\n+  \/\/ When NMT is enabled this checks for heap overwrites, then deaccounts the old block.\n+  void* const old_outer_ptr = MemTracker::record_free(memblock);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -90,7 +90,0 @@\n-\/\/ Contains all of the necessary data to record a free().\n-struct FreePackage {\n-  const size_t size;\n-  const MEMFLAGS flags;\n-  const uint32_t mst_marker;\n-};\n-\n@@ -98,1 +91,1 @@\n-\n+  NONCOPYABLE(MallocHeader);\n@@ -125,1 +118,7 @@\n-  MallocHeader(const MallocHeader&) = default;\n+  \/\/ Contains all of the necessary data to to deaccount block with NMT.\n+  struct FreeInfo {\n+    const size_t size;\n+    const MEMFLAGS flags;\n+    const uint32_t mst_marker;\n+  };\n+\n@@ -133,3 +132,3 @@\n-  \/\/ Return the necessary data to record the block this belongs to as freed\n-  FreePackage free_package() {\n-    return FreePackage{this->size(), this->flags(), this->mst_marker()};\n+  \/\/ Return the necessary data to deaccount the block with NMT.\n+  FreeInfo free_info() {\n+    return FreeInfo{this->size(), this->flags(), this->mst_marker()};\n@@ -138,1 +137,1 @@\n-  inline void mark_block_as_alive();\n+  inline void revive();\n","filename":"src\/hotspot\/share\/services\/mallocHeader.hpp","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -48,1 +48,4 @@\n-inline void MallocHeader::mark_block_as_alive() {\n+inline void MallocHeader::revive() {\n+  assert(_canary == _header_canary_dead_mark, \"must be dead\");\n+  assert(get_footer() == _footer_canary_dead_mark, \"must be dead\");\n+  NOT_LP64(assert(_alt_canary == _header_alt_canary_dead_mark, \"must be dead\"));\n@@ -54,0 +57,1 @@\n+\/\/ The effects of this method must be reversible with MallocHeader::revive()\n","filename":"src\/hotspot\/share\/services\/mallocHeader.inline.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -202,1 +202,1 @@\n-  record_free(header->free_package());\n+  deaccount(header->free_info());\n@@ -209,2 +209,2 @@\n-void MallocTracker::record_free(FreePackage free_package) {\n-  MallocMemorySummary::record_free(free_package.size, free_package.flags);\n+void MallocTracker::deaccount(MallocHeader::FreeInfo free_info) {\n+  MallocMemorySummary::record_free(free_info.size, free_info.flags);\n@@ -212,1 +212,1 @@\n-    MallocSiteTable::deallocation_at(free_package.size, free_package.mst_marker);\n+    MallocSiteTable::deallocation_at(free_info.size, free_info.mst_marker);\n","filename":"src\/hotspot\/share\/services\/mallocTracker.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -294,2 +294,2 @@\n-  \/\/ Record free on specified memory block.\n-  \/\/ Returns the outer pointer to this block.\n+  \/\/ Given a block returned by os::malloc() or os::realloc():\n+  \/\/ deaccount block from NMT, mark its header as dead and return pointer to header.\n@@ -297,2 +297,2 @@\n-  \/\/ Record a free.\n-  static void record_free(FreePackage free_package);\n+  \/\/ Given the free info from a block, de-account block from NMT.\n+  static void deaccount(MallocHeader::FreeInfo free_info);\n","filename":"src\/hotspot\/share\/services\/mallocTracker.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-  static inline void* record_free_block(void* memblock) {\n+  static inline void* record_free(void* memblock) {\n@@ -109,1 +109,3 @@\n-    assert(enabled(), \"NMT must be enabled\");\n+    if(!enabled()) {\n+      return memblock;\n+    }\n@@ -112,1 +114,1 @@\n-  static inline void record_free(FreePackage free_package) {\n+  static inline void deaccount(MallocHeader::FreeInfo free_info) {\n@@ -114,1 +116,1 @@\n-    MallocTracker::record_free(free_package);\n+    MallocTracker::deaccount(free_info);\n","filename":"src\/hotspot\/share\/services\/memTracker.hpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -144,0 +144,13 @@\n+\n+TEST_VM(NMT, HeaderKeepsIntegrityAfterRevival) {\n+  if (!MemTracker::enabled()) {\n+    return;\n+  }\n+  size_t some_size = 16;\n+  void* p = os::malloc(some_size, mtTest);\n+  ASSERT_NOT_NULL(p) << \"Failed to malloc()\";\n+  MallocHeader* hdr = MallocTracker::malloc_header(p);\n+  hdr->mark_block_as_dead();\n+  hdr->revive();\n+  check_expected_malloc_header(p, mtTest, some_size);\n+}\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_cornercases.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}