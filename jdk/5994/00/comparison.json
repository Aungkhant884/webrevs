{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-#include \"jfr\/recorder\/repository\/jfrEmergencyDump.hpp\"\n@@ -319,10 +318,0 @@\n-NO_TRANSITION(void, jfr_set_dump_path(JNIEnv* env, jobject jvm, jstring dumppath))\n-  const char* dump_path = env->GetStringUTFChars(dumppath, NULL);\n-  JfrEmergencyDump::set_dump_path(dump_path);\n-  env->ReleaseStringUTFChars(dumppath, dump_path);\n-NO_TRANSITION_END\n-\n-NO_TRANSITION(jstring, jfr_get_dump_path(JNIEnv* env, jobject jvm))\n-  return env->NewStringUTF(JfrEmergencyDump::get_dump_path());\n-NO_TRANSITION_END\n-\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -116,4 +116,0 @@\n-void JNICALL jfr_set_dump_path(JNIEnv* env, jobject jvm, jstring dumppath);\n-\n-jstring JNICALL jfr_get_dump_path(JNIEnv* env, jobject jvm);\n-\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -78,2 +78,0 @@\n-      (char*)\"setDumpPath\", (char*)\"(Ljava\/lang\/String;)V\", (void*)jfr_set_dump_path,\n-      (char*)\"getDumpPath\", (char*)\"()Ljava\/lang\/String;\", (void*)jfr_get_dump_path,\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethodRegistration.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,2 +44,0 @@\n-char JfrEmergencyDump::_dump_path[JVM_MAXPATHLEN] = { 0 };\n-\n@@ -71,8 +69,3 @@\n-static size_t get_dump_directory() {\n-  const char* dump_path = JfrEmergencyDump::get_dump_path();\n-  if (*dump_path == '\\0') {\n-    if (os::get_current_directory(_path_buffer, sizeof(_path_buffer)) == NULL) {\n-      return 0;\n-    }\n-  } else {\n-    strcpy(_path_buffer, dump_path);\n+static size_t get_current_directory() {\n+  if (os::get_current_directory(_path_buffer, sizeof(_path_buffer)) == NULL) {\n+    return 0;\n@@ -80,2 +73,2 @@\n-  const size_t path_len = strlen(_path_buffer);\n-  const int result = jio_snprintf(_path_buffer + path_len,\n+  const size_t cwd_len = strlen(_path_buffer);\n+  const int result = jio_snprintf(_path_buffer + cwd_len,\n@@ -115,1 +108,1 @@\n-  const size_t path_len = get_dump_directory();\n+  const size_t path_len = get_current_directory();\n@@ -135,1 +128,1 @@\n-bool JfrEmergencyDump::open_emergency_dump_file() {\n+static bool open_emergency_dump_file() {\n@@ -140,10 +133,1 @@\n-\n-  bool result = open_emergency_dump_fd(create_emergency_dump_path());\n-  if (!result && *_dump_path != '\\0') {\n-    log_warning(jfr)(\"Unable to create an emergency dump file at the location set by dumppath=%s\", _dump_path);\n-    \/\/ Fallback. Try to create it in the current directory.\n-    *_dump_path = '\\0';\n-    *_path_buffer = '\\0';\n-    result = open_emergency_dump_fd(create_emergency_dump_path());\n-  }\n-  return result;\n+  return open_emergency_dump_fd(create_emergency_dump_path());\n@@ -169,13 +153,0 @@\n-void JfrEmergencyDump::set_dump_path(const char* dump_path) {\n-  if (dump_path != NULL) {\n-    if (strlen(dump_path) < JVM_MAXPATHLEN) {\n-      strncpy(_dump_path, dump_path, JVM_MAXPATHLEN);\n-      _dump_path[JVM_MAXPATHLEN - 1] = '\\0';\n-    }\n-  }\n-}\n-\n-const char* JfrEmergencyDump::get_dump_path() {\n-  return _dump_path;\n-}\n-\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrEmergencyDump.cpp","additions":8,"deletions":37,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,5 +35,0 @@\n- private:\n-  static char _dump_path[JVM_MAXPATHLEN];\n-\n-  static bool open_emergency_dump_file();\n-\n@@ -41,2 +36,0 @@\n-  static void set_dump_path(const char* dump_path);\n-  static const char* get_dump_path();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrEmergencyDump.hpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -166,1 +166,0 @@\n-const char* const default_dumppath = NULL;\n@@ -186,7 +185,0 @@\n-static DCmdArgument<char*> _dcmd_dumppath(\n-  \"dumppath\",\n-  \"Path to emergency dump\",\n-  \"STRING\",\n-  false,\n-  default_dumppath);\n-\n@@ -269,1 +261,0 @@\n-  _parser.add_dcmd_option(&_dcmd_dumppath);\n@@ -358,12 +349,0 @@\n-  configure._dump_path.set_is_set(_dcmd_dumppath.is_set());\n-  char* dumppath = _dcmd_dumppath.value();\n-  if (dumppath != NULL) {\n-    const size_t len = strlen(dumppath);\n-    char* dumppath_copy = JfrCHeapObj::new_array<char>(len + 1);\n-    if (NULL == dumppath_copy) {\n-      return false;\n-    }\n-    strncpy(dumppath_copy, dumppath, len + 1);\n-    configure._dump_path.set_value(dumppath_copy);\n-  }\n-\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrOptionSet.cpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -476,1 +476,2 @@\n-     * Sets the location of the disk repository.\n+     * Sets the location of the disk repository, to be used at an emergency\n+     * dump.\n@@ -482,14 +483,0 @@\n-    \/**\n-     * Sets the path to emergency dump.\n-     *\n-     * @param dumpPathText\n-     *\/\n-    public native void setDumpPath(String dumpPathText);\n-\n-    \/**\n-     * Gets the path to emergency dump.\n-     *\n-     * @return The path to emergency dump.\n-     *\/\n-    public native String getDumpPath();\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVM.java","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,0 @@\n-import java.io.IOException;\n-\n-import jdk.jfr.internal.LogLevel;\n-import jdk.jfr.internal.LogTag;\n-import jdk.jfr.internal.Logger;\n@@ -36,2 +31,0 @@\n-import static java.nio.file.LinkOption.*;\n-\n@@ -58,1 +51,1 @@\n-    private static final SafePath DEFAULT_DUMP_PATH = new SafePath(\".\");\n+    private static final SafePath DEFAULT_DUMP_PATH = SecuritySupport.USER_HOME;\n@@ -67,0 +60,1 @@\n+    private static SafePath dumpPath;\n@@ -123,13 +117,1 @@\n-        if (path.toFile().canWrite()) {\n-            try {\n-                jvm.setDumpPath(path.toPath().toRealPath(NOFOLLOW_LINKS).toString());\n-            } catch (IOException e) {\n-                if (Logger.shouldLog(LogTag.JFR_SYSTEM_SETTING, LogLevel.WARN)) {\n-                    Logger.log(LogTag.JFR_SYSTEM_SETTING, LogLevel.WARN, \"Error occurred in path resolution: \" + e.toString());\n-                }\n-            }\n-        } else {\n-            if (Logger.shouldLog(LogTag.JFR_SYSTEM_SETTING, LogLevel.WARN)) {\n-                Logger.log(LogTag.JFR_SYSTEM_SETTING, LogLevel.WARN, \"Cannot write JFR emergency dump to \" + path.toString());\n-            }\n-        }\n+        dumpPath = path;\n@@ -139,1 +121,1 @@\n-        return new SafePath(jvm.getDumpPath());\n+        return dumpPath;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Options.java","additions":5,"deletions":23,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+    static final SafePath USER_HOME = getPathInProperty(\"user.home\", null);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/SecuritySupport.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.ArrayList;\n@@ -78,1 +77,0 @@\n-        \/\/ Test without dumppath\n@@ -84,18 +82,0 @@\n-        \/\/ Test with dumppath\n-        Path dumppath = Files.createTempDirectory(null);\n-        try {\n-            test(CrasherIllegalAccess.class, \"\", true, dumppath.toString());\n-            test(CrasherIllegalAccess.class, \"\", false, dumppath.toString());\n-            test(CrasherHalt.class, \"\", true, dumppath.toString());\n-            test(CrasherHalt.class, \"\", false, dumppath.toString());\n-        } finally {\n-            dumppath.toFile().delete();\n-        }\n-\n-        \/\/ Test with illegal dumppath\n-        Path illegalpath = Path.of(\"silverbullet\");\n-        test(CrasherIllegalAccess.class, \"\", true, illegalpath.toString(), null);\n-        test(CrasherIllegalAccess.class, \"\", false, illegalpath.toString(), null);\n-        test(CrasherHalt.class, \"\", true, illegalpath.toString(), null);\n-        test(CrasherHalt.class, \"\", false, illegalpath.toString(), null);\n-\n@@ -108,8 +88,0 @@\n-        test(crasher, signal, disk, null);\n-    }\n-\n-    private static void test(Class<?> crasher, String signal, boolean disk, String dumppath) throws Exception {\n-        test(crasher, signal, disk, dumppath, dumppath);\n-    }\n-\n-    private static void test(Class<?> crasher, String signal, boolean disk, String dumppath, String expectedPath) throws Exception {\n@@ -120,1 +92,1 @@\n-                verify(runProcess(crasher, signal, disk, dumppath), expectedPath);\n+                verify(runProcess(crasher, signal, disk));\n@@ -136,1 +108,1 @@\n-    private static long runProcess(Class<?> crasher, String signal, boolean disk, String dumppath) throws Exception {\n+    private static long runProcess(Class<?> crasher, String signal, boolean disk) throws Exception {\n@@ -138,11 +110,9 @@\n-        List<String> options = new ArrayList<>();\n-        options.add(\"-Xmx64m\");\n-        options.add(\"-XX:-CreateCoredumpOnCrash\");\n-        options.add(\"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\");\n-        options.add(\"-XX:StartFlightRecording:dumponexit=true,disk=\" + Boolean.toString(disk));\n-        if (dumppath != null) {\n-            options.add(\"-XX:FlightRecorderOptions=dumppath=\" + dumppath);\n-        }\n-        options.add(crasher.getName());\n-        options.add(signal);\n-        Process p = ProcessTools.createTestJvm(options).start();\n+        final String flightRecordingOptions = \"dumponexit=true,disk=\" + Boolean.toString(disk);\n+        Process p = ProcessTools.createTestJvm(\n+                \"-Xmx64m\",\n+                \"-XX:-CreateCoredumpOnCrash\",\n+                \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\",\n+                \"-XX:StartFlightRecording:\" + flightRecordingOptions,\n+                crasher.getName(),\n+                signal)\n+            .start();\n@@ -158,1 +128,1 @@\n-    private static void verify(long pid, String dumppath) throws IOException {\n+    private static void verify(long pid) throws IOException {\n@@ -160,2 +130,1 @@\n-        Path file = (dumppath == null) ? Paths.get(fileName) : Paths.get(dumppath, fileName);\n-        file = file.toAbsolutePath().normalize();\n+        Path file = Paths.get(fileName).toAbsolutePath().normalize();\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestDumpOnCrash.java","additions":13,"deletions":44,"binary":false,"changes":57,"status":"modified"}]}