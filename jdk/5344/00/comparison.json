{"files":[{"patch":"@@ -38,10 +38,1 @@\n-import java.nio.ByteBuffer;\n-import java.nio.ByteOrder;\n-import java.nio.channels.FileChannel;\n-import java.nio.file.StandardOpenOption;\n-import static java.nio.file.StandardOpenOption.READ;\n-import static java.nio.file.StandardOpenOption.WRITE;\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.List;\n-import sun.hotspot.WhiteBox;\n+import jdk.test.lib.cds.CDSArchiveUtils;\n@@ -51,4 +42,0 @@\n-    public static WhiteBox wb;\n-    public static int int_size;        \/\/ size of int\n-    public static String[] shared_region_name = {\"ReadWrite\", \"ReadOnly\", \"BitMap\"};\n-    public static int num_regions = shared_region_name.length;\n@@ -68,67 +55,0 @@\n-    public static void setReadWritePermission(File file) throws Exception {\n-        if (!file.canRead()) {\n-            if (!file.setReadable(true)) {\n-                throw new IOException(\"Cannot modify file \" + file + \" as readable\");\n-            }\n-        }\n-        if (!file.canWrite()) {\n-            if (!file.setWritable(true)) {\n-                throw new IOException(\"Cannot modify file \" + file + \" as writable\");\n-            }\n-        }\n-    }\n-\n-    public static long readInt(FileChannel fc, long offset, int nbytes) throws Exception {\n-        ByteBuffer bb = ByteBuffer.allocate(nbytes);\n-        bb.order(ByteOrder.nativeOrder());\n-        fc.position(offset);\n-        fc.read(bb);\n-        return  (nbytes > 4 ? bb.getLong(0) : bb.getInt(0));\n-    }\n-\n-    public static long align_up_page(long l) throws Exception {\n-        \/\/ wb is obtained in getFileOffsetInfo() which is called first in main() else we should call\n-        \/\/ WhiteBox.getWhiteBox() here first.\n-        int pageSize = wb.getVMPageSize();\n-        return (l + pageSize -1) & (~ (pageSize - 1));\n-    }\n-\n-    public static void writeData(FileChannel fc, long offset, ByteBuffer bb) throws Exception {\n-        fc.position(offset);\n-        fc.write(bb);\n-        fc.force(true);\n-    }\n-\n-    public static FileChannel getFileChannel(File jsa) throws Exception {\n-        List<StandardOpenOption> arry = new ArrayList<StandardOpenOption>();\n-        arry.add(READ);\n-        arry.add(WRITE);\n-        return FileChannel.open(jsa.toPath(), new HashSet<StandardOpenOption>(arry));\n-    }\n-\n-   public static void modifyJsaHeaderCRC(File jsa) throws Exception {\n-        FileChannel fc = getFileChannel(jsa);\n-        int_size = wb.getOffsetForName(\"int_size\");\n-        System.out.println(\"    int_size \" + int_size);\n-        ByteBuffer bbuf = ByteBuffer.allocateDirect(int_size);\n-        for (int i = 0; i < int_size; i++) {\n-            bbuf.put((byte)0);\n-        }\n-\n-        int baseArchiveCRCOffset = wb.getOffsetForName(\"DynamicArchiveHeader::_base_region_crc\");\n-        int crc = 0;\n-        System.out.printf(\"%-12s%-12s\\n\", \"Space name\", \"CRC\");\n-        for (int i = 0; i < num_regions; i++) {\n-            baseArchiveCRCOffset += int_size * i;\n-            System.out.println(\"    baseArchiveCRCOffset \" + baseArchiveCRCOffset);\n-            crc = (int)readInt(fc, baseArchiveCRCOffset, int_size );\n-            System.out.printf(\"%-11s%-12d\\n\", shared_region_name[i], crc);\n-            bbuf.rewind();\n-            writeData(fc, baseArchiveCRCOffset, bbuf);\n-        }\n-        fc.force(true);\n-        if (fc.isOpen()) {\n-            fc.close();\n-        }\n-    }\n-\n@@ -152,3 +72,3 @@\n-        wb = WhiteBox.getWhiteBox();\n-        setReadWritePermission(jsa);\n-        modifyJsaHeaderCRC(jsa);\n+        String modTop = getNewArchiveName(\"modTopRegionsCrc\");\n+        File copiedJsa = CDSArchiveUtils.copyArchiveFile(jsa, modTop);\n+        CDSArchiveUtils.modifyAllRegionsCrc(copiedJsa);\n@@ -156,1 +76,1 @@\n-        run2(baseArchiveName, topArchiveName,\n+        run2(baseArchiveName, modTop,\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/ArchiveConsistency.java","additions":5,"deletions":85,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -216,0 +216,18 @@\n+    public static void modifyRegionCrc(File jsaFile, int region, int value) throws Exception {\n+        long regionCrcOffset = spOffset + region * spOffsetCrc;\n+        writeData(jsaFile, regionCrcOffset, value);\n+    }\n+\n+    public static void  modifyAllRegionsCrc(File jsaFile) throws Exception {\n+        int value = 0xbadebabe;\n+        long[] used = new long[num_regions];\n+        for (int i = 0; i < num_regions; i++) {\n+            used[i] = usedRegionSizeAligned(jsaFile, i);\n+            if (used[i] == 0) {\n+                \/\/ skip empty region\n+                continue;\n+            }\n+            modifyRegionCrc(jsaFile, i, value);\n+        }\n+    }\n+\n@@ -279,0 +297,7 @@\n+    public static long writeData(File file, long offset, int value) throws Exception {\n+        try (FileChannel fc = getFileChannel(file)) {\n+            ByteBuffer bbuf = ByteBuffer.allocate(4).putInt(value).position(0);\n+            return writeData(fc, offset, bbuf);\n+         }\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSArchiveUtils.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"}]}