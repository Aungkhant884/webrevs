{"files":[{"patch":"@@ -5406,0 +5406,34 @@\n+  void generate_base64_encode_simdround(Register src, Register dst,\n+        FloatRegister codec, u8 size) {\n+\n+    FloatRegister in0  = v4,  in1  = v5,  in2  = v6;\n+    FloatRegister out0 = v16, out1 = v17, out2 = v18, out3 = v19;\n+    FloatRegister ind0 = v20, ind1 = v21, ind2 = v22, ind3 = v23;\n+\n+    Assembler::SIMD_Arrangement arrangement = size == 16 ? __ T16B : __ T8B;\n+\n+    __ ld3(in0, in1, in2, arrangement, __ post(src, 3 * size));\n+\n+    __ ushr(ind0, arrangement, in0,  2);\n+\n+    __ ushr(ind1, arrangement, in1,  2);\n+    __ shl(in0,   arrangement, in0,  6);\n+    __ orr(ind1,  arrangement, ind1, in0);\n+    __ ushr(ind1, arrangement, ind1, 2);\n+\n+    __ ushr(ind2, arrangement, in2,  4);\n+    __ shl(in1,   arrangement, in1,  4);\n+    __ orr(ind2,  arrangement, in1,  ind2);\n+    __ ushr(ind2, arrangement, ind2, 2);\n+\n+    __ shl(ind3,  arrangement, in2,  2);\n+    __ ushr(ind3, arrangement, ind3, 2);\n+\n+    __ tbl(out0,  arrangement, codec,  4, ind0);\n+    __ tbl(out1,  arrangement, codec,  4, ind1);\n+    __ tbl(out2,  arrangement, codec,  4, ind2);\n+    __ tbl(out3,  arrangement, codec,  4, ind3);\n+\n+    __ st4(out0,  out1, out2, out3, arrangement, __ post(dst, 4 * size));\n+  }\n+\n@@ -5472,21 +5506,1 @@\n-    \/\/ load data\n-    __ ld3(v4,  v5, v6, __ T16B, __ post(src, 48));\n-    \/\/ calculate indices\n-    __ ushr(v20, __ T16B, v4,  2);\n-    __ ushr(v21, __ T16B, v5,  2);\n-    __ shl(v4,   __ T16B, v4,  6);\n-    __ orr(v21,  __ T16B, v21, v4);\n-    __ ushr(v21, __ T16B, v21, 2);\n-    __ ushr(v22, __ T16B, v6,  4);\n-    __ shl(v5,   __ T16B, v5,  4);\n-    __ orr(v22,  __ T16B, v5,  v22);\n-    __ ushr(v22, __ T16B, v22, 2);\n-    __ shl(v23,  __ T16B, v6,  2);\n-    __ ushr(v23, __ T16B, v23, 2);\n-    \/\/ lookup codec\n-    __ tbl(v16,  __ T16B, v0,  4, v20);\n-    __ tbl(v17,  __ T16B, v0,  4, v21);\n-    __ tbl(v18,  __ T16B, v0,  4, v22);\n-    __ tbl(v19,  __ T16B, v0,  4, v23);\n-    \/\/ store result\n-    __ st4(v16, v17, v18, v19, __ T16B, __ post(dst, 64));\n+    generate_base64_encode_simdround(src, dst, v0, 16);\n@@ -5499,21 +5513,1 @@\n-    \/\/ load data\n-    __ ld3(v4,  v5, v6, __ T8B, __ post(src, 24));\n-    \/\/ calculate indices\n-    __ ushr(v20, __ T8B, v4,  2);\n-    __ ushr(v21, __ T8B, v5,  2);\n-    __ shl(v4,   __ T8B, v4,  6);\n-    __ orr(v21,  __ T8B, v21, v4);\n-    __ ushr(v21, __ T8B, v21, 2);\n-    __ ushr(v22, __ T8B, v6,  4);\n-    __ shl(v5,   __ T8B, v5,  4);\n-    __ orr(v22,  __ T8B, v5,  v22);\n-    __ ushr(v22, __ T8B, v22, 2);\n-    __ shl(v23,  __ T8B, v6,  2);\n-    __ ushr(v23, __ T8B, v23, 2);\n-    \/\/ lookup codec\n-    __ tbl(v16,  __ T8B, v0,  4, v20);\n-    __ tbl(v17,  __ T8B, v0,  4, v21);\n-    __ tbl(v18,  __ T8B, v0,  4, v22);\n-    __ tbl(v19,  __ T8B, v0,  4, v23);\n-    \/\/ store result\n-    __ st4(v16, v17, v18, v19, __ T8B, __ post(dst, 32));\n+    generate_base64_encode_simdround(src, dst, v0, 8);\n@@ -5521,0 +5515,1 @@\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":37,"deletions":42,"binary":false,"changes":79,"status":"modified"}]}