{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.awt.Graphics2D;\n@@ -33,0 +34,1 @@\n+import java.awt.RenderingHints;\n@@ -37,0 +39,1 @@\n+import java.awt.image.MultiResolutionImage;\n@@ -439,4 +442,22 @@\n-        if(imageObserver == null) {\n-           g.drawImage(image, x, y, c);\n-        } else {\n-           g.drawImage(image, x, y, imageObserver);\n+        boolean iconDrawn = false;\n+        ImageObserver observer = imageObserver != null ? imageObserver : c;\n+        if (image instanceof MultiResolutionImage) {\n+            if (g instanceof Graphics2D) {\n+                int scaledWidth = (int) (width * ((Graphics2D)g).getTransform().getScaleX());\n+                int scaledHeight = (int) (height * ((Graphics2D)g).getTransform().getScaleY());\n+                Image variant = ((MultiResolutionImage) image).getResolutionVariant(scaledWidth,\n+                        scaledHeight);\n+                if (variant.getHeight(observer) != scaledHeight ||\n+                        variant.getWidth(observer) != scaledWidth) {\n+                    Graphics2D g2d = (Graphics2D) g.create(x, y, width, height);\n+                    g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION,\n+                            RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n+                    g2d.drawImage(image, 0, 0, observer);\n+                    g2d.dispose();\n+                    iconDrawn = true;\n+                }\n+            }\n+        }\n+\n+        if (!iconDrawn){\n+            g.drawImage(image, x, y, observer);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/ImageIcon.java","additions":26,"deletions":5,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.ImageIcon;\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.ImageObserver;\n+import java.awt.image.ImageProducer;\n+import java.awt.image.MultiResolutionImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+\/**\n+ * @test\n+ * @bug 8282526\n+ * @summary Default icon is not painted properly\n+ * @run main MultiResolutionImageIcon\n+ *\/\n+\n+public class MultiResolutionImageIcon extends Image implements MultiResolutionImage {\n+    BufferedImage img;\n+\n+    public static void main(String[] args) {\n+        MultiResolutionImageIcon me = new MultiResolutionImageIcon();\n+        me.test();\n+    }\n+\n+    public MultiResolutionImageIcon() {\n+        final String PATH_TO_FILE=MultiResolutionImageIcon.class.getResource(\"folder.png\").getPath();\n+        try {\n+            img = ImageIO.read(new File(PATH_TO_FILE));\n+        } catch (IOException ioe) {\n+            throw new RuntimeException(\"Can't read image file. \" + ioe);\n+        }\n+    }\n+\n+    public void test() {\n+        ImageIcon icon = new ImageIcon();\n+        icon.setImage(this);\n+\n+        BufferedImage test = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);\n+        Graphics g = test.createGraphics();\n+        icon.paintIcon(null, g, 0, 0);\n+        g.dispose();\n+\n+        int transfers = 0;\n+        boolean last = true;\n+        for (int i = 0; i < 16; i++) {\n+            Color pixel = new Color(test.getRGB(12, i), true);\n+            if (isWhite(pixel) ^ last) {\n+                transfers++;\n+                last = !last;\n+            }\n+        }\n+        if (transfers < 8) {\n+            try {\n+                ImageIO.write(test, \"png\", new File(\"generated.png\"));\n+            } catch (IOException ignore) {}\n+            throw new RuntimeException(\"Significant detail is lost in transition\");\n+        }\n+    }\n+\n+    public boolean isWhite(Color c) {\n+        return (c.getRed() + c.getGreen() + c.getBlue()) \/ 3 > 245;\n+    }\n+\n+    @Override\n+    public Image getResolutionVariant(double destImageWidth, double destImageHeight) {\n+        return img;\n+    }\n+\n+    @Override\n+    public List<Image> getResolutionVariants() {\n+        return Arrays.asList(img);\n+    }\n+\n+\n+    @Override\n+    public int getWidth(ImageObserver observer) {\n+        return 16;\n+    }\n+\n+    @Override\n+    public int getHeight(ImageObserver observer) {\n+        return 16;\n+    }\n+\n+    @Override\n+    public ImageProducer getSource() {\n+        return null;\n+    }\n+\n+    @Override\n+    public Graphics getGraphics() {\n+        return img.getGraphics();\n+    }\n+\n+    @Override\n+    public Object getProperty(String name, ImageObserver observer) {\n+        return null;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/ImageIcon\/MultiResolutionImageIcon.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"filename":"test\/jdk\/javax\/swing\/ImageIcon\/folder.png","binary":true,"status":"added"}]}