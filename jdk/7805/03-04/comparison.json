{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import java.awt.Graphics2D;\n@@ -34,1 +33,0 @@\n-import java.awt.RenderingHints;\n@@ -39,1 +37,0 @@\n-import java.awt.image.MultiResolutionImage;\n@@ -448,22 +445,4 @@\n-        boolean iconDrawn = false;\n-        ImageObserver observer = imageObserver != null ? imageObserver : c;\n-        if (image instanceof MultiResolutionImage) {\n-            if (g instanceof Graphics2D) {\n-                int scaledWidth = (int) (width * ((Graphics2D)g).getTransform().getScaleX());\n-                int scaledHeight = (int) (height * ((Graphics2D)g).getTransform().getScaleY());\n-                Image variant = ((MultiResolutionImage) image).getResolutionVariant(scaledWidth,\n-                        scaledHeight);\n-                if (variant.getHeight(observer) != scaledHeight ||\n-                        variant.getWidth(observer) != scaledWidth) {\n-                    Graphics2D g2d = (Graphics2D) g.create(x, y, width, height);\n-                    g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION,\n-                            RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n-                    g2d.drawImage(image, 0, 0, observer);\n-                    g2d.dispose();\n-                    iconDrawn = true;\n-                }\n-            }\n-        }\n-\n-        if (!iconDrawn){\n-            g.drawImage(image, x, y, observer);\n+        if(imageObserver == null) {\n+           g.drawImage(image, x, y, c);\n+        } else {\n+           g.drawImage(image, x, y, imageObserver);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/ImageIcon.java","additions":5,"deletions":26,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.awt.Graphics2D;\n@@ -29,0 +30,1 @@\n+import java.awt.RenderingHints;\n@@ -1438,0 +1440,9 @@\n+            if (retVal.getWidth(null) != w) {\n+                BufferedImage newVariant = new BufferedImage(w, w, BufferedImage.TYPE_INT_ARGB);\n+                Graphics2D g2d = newVariant.createGraphics();\n+                g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\n+                g2d.drawImage(retVal, 0,0, w, w, null);\n+                g2d.dispose();\n+                resolutionVariants.put(w, newVariant);\n+                retVal = newVariant;\n+            }\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/shell\/Win32ShellFolder2.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -983,0 +983,1 @@\n+            UINT iconSize;\n@@ -985,1 +986,3 @@\n-                size = 16;\n+                iconSize = (size << 16) + 32;\n+            } else {\n+                iconSize = (16 << 16) + size;\n@@ -987,2 +990,2 @@\n-            hres = pIcon->Extract(szBuf, index, &hIcon, &hIconSmall, size);\n-            if (size == 16) {\n+            hres = pIcon->Extract(szBuf, index, &hIcon, &hIconSmall, iconSize);\n+            if (size < 24) {\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/ShellFolder2.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,127 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import javax.imageio.ImageIO;\n-import javax.swing.ImageIcon;\n-import java.awt.Color;\n-import java.awt.Graphics;\n-import java.awt.Image;\n-import java.awt.image.BufferedImage;\n-import java.awt.image.ImageObserver;\n-import java.awt.image.ImageProducer;\n-import java.awt.image.MultiResolutionImage;\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-\/**\n- * @test\n- * @bug 8282526\n- * @summary Default icon is not painted properly\n- * @run main MultiResolutionImageIcon\n- *\/\n-\n-public class MultiResolutionImageIcon extends Image implements MultiResolutionImage {\n-    BufferedImage img;\n-\n-    public static void main(String[] args) {\n-        MultiResolutionImageIcon me = new MultiResolutionImageIcon();\n-        me.test();\n-    }\n-\n-    public MultiResolutionImageIcon() {\n-        final String PATH_TO_FILE=MultiResolutionImageIcon.class.getResource(\"folder.png\").getPath();\n-        try {\n-            img = ImageIO.read(new File(PATH_TO_FILE));\n-        } catch (IOException ioe) {\n-            throw new RuntimeException(\"Can't read image file. \" + ioe);\n-        }\n-    }\n-\n-    public void test() {\n-        ImageIcon icon = new ImageIcon();\n-        icon.setImage(this);\n-\n-        BufferedImage test = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);\n-        Graphics g = test.createGraphics();\n-        icon.paintIcon(null, g, 0, 0);\n-        g.dispose();\n-\n-        int transfers = 0;\n-        boolean last = true;\n-        for (int i = 0; i < 16; i++) {\n-            Color pixel = new Color(test.getRGB(12, i), true);\n-            if (isWhite(pixel) ^ last) {\n-                transfers++;\n-                last = !last;\n-            }\n-        }\n-        if (transfers < 8) {\n-            try {\n-                ImageIO.write(test, \"png\", new File(\"generated.png\"));\n-            } catch (IOException ignore) {}\n-            throw new RuntimeException(\"Significant detail is lost in transition\");\n-        }\n-    }\n-\n-    public boolean isWhite(Color c) {\n-        return (c.getRed() + c.getGreen() + c.getBlue()) \/ 3 > 245;\n-    }\n-\n-    @Override\n-    public Image getResolutionVariant(double destImageWidth, double destImageHeight) {\n-        return img;\n-    }\n-\n-    @Override\n-    public List<Image> getResolutionVariants() {\n-        return Arrays.asList(img);\n-    }\n-\n-\n-    @Override\n-    public int getWidth(ImageObserver observer) {\n-        return 16;\n-    }\n-\n-    @Override\n-    public int getHeight(ImageObserver observer) {\n-        return 16;\n-    }\n-\n-    @Override\n-    public ImageProducer getSource() {\n-        return null;\n-    }\n-\n-    @Override\n-    public Graphics getGraphics() {\n-        return img.getGraphics();\n-    }\n-\n-    @Override\n-    public Object getProperty(String name, ImageObserver observer) {\n-        return null;\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/ImageIcon\/MultiResolutionImageIcon.java","additions":0,"deletions":127,"binary":false,"changes":127,"status":"deleted"},{"filename":"test\/jdk\/javax\/swing\/ImageIcon\/folder.png","binary":true,"status":"deleted"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\r\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\r\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n+ *\r\n+ * This code is free software; you can redistribute it and\/or modify it\r\n+ * under the terms of the GNU General Public License version 2 only, as\r\n+ * published by the Free Software Foundation.\r\n+ *\r\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\r\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n+ * version 2 for more details (a copy is included in the LICENSE file that\r\n+ * accompanied this code).\r\n+ *\r\n+ * You should have received a copy of the GNU General Public License version\r\n+ * 2 along with this work; if not, write to the Free Software Foundation,\r\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n+ *\r\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n+ * or visit www.oracle.com if you need additional information or have any\r\n+ * questions.\r\n+ *\/\r\n+\r\n+import javax.swing.Icon;\r\n+import javax.swing.ImageIcon;\r\n+import javax.swing.filechooser.FileSystemView;\r\n+import java.awt.Image;\r\n+import java.awt.image.MultiResolutionImage;\r\n+import java.io.File;\r\n+\r\n+\/*\r\n+ * @test\r\n+ * @bug 8282526\r\n+ * @summary Default icon is not painted properly\r\n+ * @requires (os.family == \"windows\")\r\n+ * @run main WindowsDefaultIconSizeTest\r\n+ *\/\r\n+\r\n+public class WindowsDefaultIconSizeTest {\r\n+    public static void main(String[] args) {\r\n+        WindowsDefaultIconSizeTest test = new WindowsDefaultIconSizeTest();\r\n+        test.test();\r\n+    }\r\n+\r\n+    public void test() {\r\n+        String sep = System.getProperty(\"file.separator\");\r\n+        String dir = System.getProperty(\"test.src\", \".\");\r\n+        String filename = \"test.not\";\r\n+\r\n+        FileSystemView fsv = FileSystemView.getFileSystemView();\r\n+        Icon icon = fsv.getSystemIcon(new File(dir + sep + filename));\r\n+        if (icon instanceof ImageIcon) {\r\n+            Image image = ((ImageIcon)icon).getImage();\r\n+            if (image instanceof MultiResolutionImage) {\r\n+                Image variant = ((MultiResolutionImage)image).getResolutionVariant(16, 16);\r\n+                if (variant.getWidth(null) != 16) {\r\n+                    throw new RuntimeException(\"Default file icon has size of \" +\r\n+                            variant.getWidth(null) + \" instead of 16\");\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+}\r\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileSystemView\/WindowsDefaultIconSizeTest.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"","filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileSystemView\/test.not","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/langtools\/test\/TEST.ROOT","status":"copied"}]}