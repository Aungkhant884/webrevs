{"files":[{"patch":"@@ -62,2 +62,2 @@\n-        Objects.requireNonNull(path); \/\/null check\n-        Objects.requireNonNull(target); \/\/null check\n+        Objects.requireNonNull(path);\n+        Objects.requireNonNull(target);\n@@ -65,6 +65,7 @@\n-        class Result extends Error {\n-            static final long serialVersionUID = -5942088234594905625L;\n-            @SuppressWarnings(\"serial\") \/\/ Type of field is not Serializable\n-            DocTreePath path;\n-            Result(DocTreePath path) {\n-                this.path = path;\n+        class PathFinder extends DocTreePathScanner<DocTreePath, DocTree> {\n+            private DocTreePath result;\n+\n+            @Override\n+            public DocTreePath scan(DocTreePath path, DocTree target) {\n+                super.scan(path, target);\n+                return result;\n@@ -72,1 +73,0 @@\n-        }\n@@ -74,1 +74,0 @@\n-        class PathFinder extends DocTreePathScanner<DocTreePath,DocTree> {\n@@ -77,2 +76,6 @@\n-                if (tree == target) {\n-                    throw new Result(new DocTreePath(getCurrentPath(), target));\n+                if (result == null) {\n+                    if (tree == target) {\n+                        result = new DocTreePath(getCurrentPath(), target);\n+                    } else {\n+                        super.scan(tree, target);\n+                    }\n@@ -80,1 +83,1 @@\n-                return super.scan(tree, target);\n+                return result;\n@@ -82,1 +85,0 @@\n-        }\n@@ -84,8 +86,12 @@\n-        if (path.getLeaf() == target) {\n-            return path;\n-        }\n-\n-        try {\n-            new PathFinder().scan(path, target);\n-        } catch (Result result) {\n-            return result.path;\n+            @Override\n+            public DocTreePath scan(Iterable<? extends DocTree> nodes, DocTree target) {\n+                if (nodes != null && result == null) {\n+                    for (DocTree node : nodes) {\n+                        scan(node, target);\n+                        if (result != null) {\n+                            break;\n+                        }\n+                    }\n+                }\n+                return result;\n+            }\n@@ -93,1 +99,2 @@\n-        return null;\n+        return path.getLeaf() == target ? path\n+                : new PathFinder().scan(path, target);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTreePath.java","additions":30,"deletions":23,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -64,6 +64,8 @@\n-        class Result extends Error {\n-            static final long serialVersionUID = -5942088234594905625L;\n-            @SuppressWarnings(\"serial\") \/\/ Type of field is not Serializable\n-            TreePath path;\n-            Result(TreePath path) {\n-                this.path = path;\n+        class PathFinder extends TreePathScanner<TreePath,Tree> {\n+            private TreePath result;\n+\n+\n+            @Override\n+            public TreePath scan(TreePath path, Tree target) {\n+                super.scan(path, target);\n+                return result;\n@@ -71,1 +73,0 @@\n-        }\n@@ -73,1 +74,1 @@\n-        class PathFinder extends TreePathScanner<TreePath,Tree> {\n+            @Override\n@@ -75,2 +76,6 @@\n-                if (tree == target) {\n-                    throw new Result(new TreePath(getCurrentPath(), target));\n+                if (result == null) {\n+                    if (tree == target) {\n+                        result = new TreePath(getCurrentPath(), target);\n+                    } else {\n+                        super.scan(tree, target);\n+                    }\n@@ -78,1 +83,1 @@\n-                return super.scan(tree, target);\n+                return result;\n@@ -80,1 +85,0 @@\n-        }\n@@ -82,2 +86,12 @@\n-        if (path.getLeaf() == target) {\n-            return path;\n+            @Override\n+            public TreePath scan(Iterable<? extends Tree> nodes, Tree target) {\n+                if (nodes != null && result == null) {\n+                    for (Tree node : nodes) {\n+                        scan(node, target);\n+                        if (result != null) {\n+                            break;\n+                        }\n+                    }\n+                }\n+                return result;\n+            }\n@@ -86,6 +100,2 @@\n-        try {\n-            new PathFinder().scan(path, target);\n-        } catch (Result result) {\n-            return result.path;\n-        }\n-        return null;\n+        return path.getLeaf() == target ? path\n+                : new PathFinder().scan(path, target);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/TreePath.java","additions":30,"deletions":20,"binary":false,"changes":50,"status":"modified"}]}