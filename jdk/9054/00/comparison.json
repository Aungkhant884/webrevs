{"files":[{"patch":"@@ -2644,1 +2644,1 @@\n-      !t->maybe_java_subtype_of(base_t)) {\n+      !base_t->maybe_java_subtype_of(t)) {\n@@ -3328,1 +3328,1 @@\n-        if (tn_t != NULL && tn_t->maybe_java_subtype_of(tinst)) {\n+        if (tn_t != NULL && tinst->maybe_java_subtype_of(tn_t)) {\n@@ -3341,1 +3341,1 @@\n-                 tn_t != NULL && !tinst->is_java_subtype_of(tn_t),\n+                 tn_t != NULL && !tinst->maybe_java_subtype_of(tn_t),\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8287700\n+ * @summary C2 Crash running eclipse benchmark from Dacapo\n+ *\n+ * @run main\/othervm -XX:-BackgroundCompilation TestEACheckCastPP\n+ *\n+ *\/\n+\n+public class TestEACheckCastPP {\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 20_000; i++) {\n+            test(false);\n+            test_helper2(new A(), true);\n+        }\n+    }\n+\n+    private static void test(boolean flag) {\n+        I i = test_helper();\n+        test_helper2(i, flag);\n+    }\n+\n+    private static void test_helper2(I i, boolean flag) {\n+        if (flag) {\n+            \/\/ branch never taken when called from test()\n+            A a = (A)i;\n+            C c = new C();\n+            c.a = a;\n+        }\n+    }\n+\n+    private static I test_helper() {\n+        B b = new B();\n+        return b;\n+    }\n+\n+    interface I {\n+\n+    }\n+\n+    private static class A implements I {\n+\n+    }\n+    private static class B extends A {\n+    }\n+\n+    private static class C {\n+        public A a;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/types\/TestEACheckCastPP.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}