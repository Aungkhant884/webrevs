{"files":[{"patch":"@@ -40,0 +40,1 @@\n+import sun.security.jca.JCAUtil;\n@@ -347,1 +348,1 @@\n-\n+            JCAUtil.tryCommitCertEvent(cert);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/CertAndKeyGen.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -289,1 +289,0 @@\n-        JCAUtil.tryCommitCertEvent(this);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/X509CertImpl.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -67,0 +67,8 @@\n+        testCall(() -> {\n+            \/\/ test keytool cert generation with JFR enabled\n+            \/\/ most interested in just detecting this cert being recorded\n+            \/\/ Root CA certs get loaded by keytool - difficult to determine exact\n+            \/\/ number of certificate events for this test (cacerts factor)\n+            TestCertificate.keyToolTest();\n+        }, -1, false);\n+\n@@ -69,1 +77,1 @@\n-            \/\/ most interesting in just detecting this cert being created\n+            \/\/ most interested in just detecting this cert being created\n@@ -81,1 +89,3 @@\n-            Asserts.assertEquals(events.size(), expected, \"Incorrect number of events\");\n+            if (expected >= 0) {\n+                Asserts.assertEquals(events.size(), expected, \"Incorrect number of events\");\n+            }\n","filename":"test\/jdk\/jdk\/jfr\/event\/security\/TestX509CertificateEvent.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-import sun.security.tools.keytool.CertAndKeyGen;\n-import sun.security.x509.X500Name;\n-\n@@ -32,0 +29,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -35,4 +34,8 @@\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.List;\n+import java.util.*;\n+\n+import sun.security.tools.keytool.CertAndKeyGen;\n+import sun.security.x509.X500Name;\n+\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -196,0 +199,31 @@\n+    public static void keyToolTest() throws Exception {\n+        String config = \"\"\"\n+                <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+                <configuration version=\"2.0\" description=\"test\">\n+                    <event name=\"jdk.X509Certificate\">\n+                       <setting name=\"enabled\">true<\/setting>\n+                       <setting name=\"stackTrace\">true<\/setting>\n+                    <\/event>\n+                <\/configuration>\"\"\";\n+        Files.writeString(Path.of(\"config.jfc\"), config);\n+\n+        SecurityTools.keytool(\"-J-XX:StartFlightRecording=filename=keytool.jfr,settings=config.jfc\",\n+            \"-genkeypair\", \"-alias\", \"testkey\", \"-keyalg\", \"RSA\", \"-keysize\", \"2048\", \"-dname\",\n+            \"CN=8292033.oracle.com,OU=JPG,C=US\", \"-keypass\", \"changeit\",\n+            \"-validity\", \"365\", \"-storetype\", \"PKCS12\", \"-keystore\", \"keystore.pkcs12\", \"-storepass\", \"changeit\")\n+            .shouldHaveExitValue(0);\n+        jfrTool(\"keytool.jfr\")\n+            .shouldContain(\"8292033.oracle.com\")\n+            .shouldContain(\"SHA384withRSA\")\n+            .shouldNotContain(\"algorithm = N\/A\") \/\/ shouldn't record cert under construction\n+            .shouldHaveExitValue(0);\n+\n+    }\n+\n+    private static OutputAnalyzer jfrTool(String jfrFile) throws Exception {\n+        ProcessBuilder pb = new ProcessBuilder();\n+        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jfr\"), \"print\", \"--events\",\n+                \"jdk.X509Certificate\", jfrFile});\n+        return new OutputAnalyzer(pb.start());\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/security\/TestCertificate.java","additions":41,"deletions":7,"binary":false,"changes":48,"status":"modified"}]}