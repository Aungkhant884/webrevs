{"files":[{"patch":"@@ -27,2 +27,1 @@\n- * @compile --enable-preview -source ${jdk.version} T8290379.java\n- * @run main\/othervm --enable-preview T8290379\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/T8290379.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n- * @compile --enable-preview -source ${jdk.version} Patterns.java\n- * @run main\/othervm --enable-preview Patterns\n+ * @enablePreview\n+ * @run main\/othervm Patterns\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/Patterns.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4,1 +4,2 @@\n- * @compile\/fail\/ref=DeconstructionPatternErrors.out --enable-preview -source ${jdk.version} -XDrawDiagnostics -XDshould-stop.at=FLOW -XDdev DeconstructionPatternErrors.java\n+ * @enablePreview\n+ * @compile\/fail\/ref=DeconstructionPatternErrors.out -XDrawDiagnostics -XDshould-stop.at=FLOW -XDdev DeconstructionPatternErrors.java\n@@ -6,1 +7,0 @@\n-\n","filename":"test\/langtools\/tools\/javac\/patterns\/DeconstructionPatternErrors.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,2 +31,1 @@\n- * @compile --enable-preview -source ${jdk.version} DisambiguatePatterns.java\n- * @run main\/othervm --enable-preview DisambiguatePatterns\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/patterns\/DisambiguatePatterns.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @compile\/fail\/ref=Domination.out -XDrawDiagnostics --enable-preview -source ${jdk.version} Domination.java\n+ * @enablePreview\n+ * @compile\/fail\/ref=Domination.out -XDrawDiagnostics Domination.java\n@@ -31,1 +32,0 @@\n-\n","filename":"test\/langtools\/tools\/javac\/patterns\/Domination.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,2 @@\n- * @compile --enable-preview -source ${jdk.version} EmptyRecordClass.java\n+ * @enablePreview\n+ * @compile EmptyRecordClass.java\n","filename":"test\/langtools\/tools\/javac\/patterns\/EmptyRecordClass.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,3 +28,4 @@\n- * @compile --enable-preview -source ${jdk.version} EnumTypeChanges.java\n- * @compile --enable-preview -source ${jdk.version} EnumTypeChanges2.java\n- * @run main\/othervm --enable-preview EnumTypeChanges\n+ * @enablePreview\n+ * @compile EnumTypeChanges.java\n+ * @compile EnumTypeChanges2.java\n+ * @run main\/othervm EnumTypeChanges\n","filename":"test\/langtools\/tools\/javac\/patterns\/EnumTypeChanges.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,2 +26,1 @@\n- * @compile --enable-preview -source ${jdk.version} GenericRecordDeconstructionPattern.java\n- * @run main\/othervm --enable-preview GenericRecordDeconstructionPattern\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/patterns\/GenericRecordDeconstructionPattern.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @compile --enable-preview -source ${jdk.version} Guards.java\n- * @run main\/othervm --enable-preview Guards\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/patterns\/Guards.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @compile\/fail\/ref=GuardsErrors.out -XDrawDiagnostics --enable-preview -source ${jdk.version} GuardsErrors.java\n+ * @enablePreview\n+ * @compile\/fail\/ref=GuardsErrors.out -XDrawDiagnostics GuardsErrors.java\n@@ -32,1 +33,0 @@\n-\n","filename":"test\/langtools\/tools\/javac\/patterns\/GuardsErrors.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n- * @compile --enable-preview -source ${jdk.version} LambdaCannotCapturePatternVariables.java\n- * @run main\/othervm --enable-preview LambdaCannotCapturePatternVariables\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/patterns\/LambdaCannotCapturePatternVariables.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,2 +26,1 @@\n- * @compile --enable-preview -source ${jdk.version} NestedDeconstructionPattern.java\n- * @run main\/othervm --enable-preview NestedDeconstructionPattern\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/patterns\/NestedDeconstructionPattern.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+\n@@ -26,2 +27,1 @@\n- * @compile --enable-preview -source ${jdk.version} NestedPrimitiveDeconstructionPattern.java\n- * @run main\/othervm --enable-preview NestedPrimitiveDeconstructionPattern\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/patterns\/NestedPrimitiveDeconstructionPattern.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,2 +5,1 @@\n- * @compile --enable-preview -source ${jdk.version} NullSwitch.java\n- * @run main\/othervm --enable-preview NullSwitch\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/patterns\/NullSwitch.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4,2 +4,1 @@\n- * @compile --enable-preview -source ${jdk.version} NullsInDeconstructionPatterns.java\n- * @run main\/othervm --enable-preview NullsInDeconstructionPatterns\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/patterns\/NullsInDeconstructionPatterns.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @compile --enable-preview -source ${jdk.version} Parenthesized.java\n- * @run main\/othervm --enable-preview Parenthesized\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/patterns\/Parenthesized.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -5,1 +5,2 @@\n- * @compile\/fail\/ref=PatternCaseErrorRecovery.out --enable-preview -source ${jdk.version} -XDrawDiagnostics PatternCaseErrorRecovery.java\n+ * @enablePreview\n+ * @compile\/fail\/ref=PatternCaseErrorRecovery.out -XDrawDiagnostics PatternCaseErrorRecovery.java\n@@ -7,1 +8,0 @@\n-\n","filename":"test\/langtools\/tools\/javac\/patterns\/PatternCaseErrorRecovery.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-* @compile\/fail\/ref=PatternErrorRecovery.out -XDrawDiagnostics -XDshould-stop.at=FLOW --enable-preview -source ${jdk.version} PatternErrorRecovery.java\n+ * @compile\/fail\/ref=PatternErrorRecovery.out -XDrawDiagnostics -XDshould-stop.at=FLOW --enable-preview -source ${jdk.version} PatternErrorRecovery.java\n","filename":"test\/langtools\/tools\/javac\/patterns\/PatternErrorRecovery.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @compile --enable-preview -source ${jdk.version} PrettyTest.java\n- * @run main\/othervm --enable-preview PrettyTest\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrettyTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @compile --enable-preview -source ${jdk.version} ProxyMethodLookup.java\n- * @run main\/othervm --enable-preview ProxyMethodLookup\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/patterns\/ProxyMethodLookup.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -5,1 +5,2 @@\n- * @compile\/ref=RawTypeBindingWarning.out -Xlint:rawtypes -XDrawDiagnostics --enable-preview -source ${jdk.version} RawTypeBindingWarning.java\n+ * @enablePreview\n+ * @compile\/ref=RawTypeBindingWarning.out -Xlint:rawtypes -XDrawDiagnostics RawTypeBindingWarning.java\n","filename":"test\/langtools\/tools\/javac\/patterns\/RawTypeBindingWarning.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,4 +1,4 @@\n-RawTypeBindingWarning.java:9:29: compiler.warn.raw.class.use: RawTypeBindingWarning, RawTypeBindingWarning<T>\n-RawTypeBindingWarning.java:13:18: compiler.warn.raw.class.use: RawTypeBindingWarning, RawTypeBindingWarning<T>\n-RawTypeBindingWarning.java:17:19: compiler.warn.raw.class.use: RawTypeBindingWarning, RawTypeBindingWarning<T>\n-RawTypeBindingWarning.java:21:18: compiler.warn.raw.class.use: RawTypeBindingWarning, RawTypeBindingWarning<T>\n+RawTypeBindingWarning.java:10:29: compiler.warn.raw.class.use: RawTypeBindingWarning, RawTypeBindingWarning<T>\n+RawTypeBindingWarning.java:14:18: compiler.warn.raw.class.use: RawTypeBindingWarning, RawTypeBindingWarning<T>\n+RawTypeBindingWarning.java:18:19: compiler.warn.raw.class.use: RawTypeBindingWarning, RawTypeBindingWarning<T>\n+RawTypeBindingWarning.java:22:18: compiler.warn.raw.class.use: RawTypeBindingWarning, RawTypeBindingWarning<T>\n","filename":"test\/langtools\/tools\/javac\/patterns\/RawTypeBindingWarning.out","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,3 +28,4 @@\n- * @compile --enable-preview -source ${jdk.version} SealedTypeChanges.java\n- * @compile --enable-preview -source ${jdk.version} SealedTypeChanges2.java\n- * @run main\/othervm --enable-preview SealedTypeChanges\n+ * @enablePreview\n+ * @compile SealedTypeChanges.java\n+ * @compile SealedTypeChanges2.java\n+ * @run main\/othervm SealedTypeChanges\n@@ -36,1 +37,0 @@\n-\n","filename":"test\/langtools\/tools\/javac\/patterns\/SealedTypeChanges.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,2 +26,3 @@\n- * @compile --enable-preview -source ${jdk.version} -doe SimpleAndGuardPattern.java\n- * @run main\/othervm --enable-preview SimpleAndGuardPattern\n+ * @enablePreview\n+ * @compile -doe SimpleAndGuardPattern.java\n+ * @run main\/othervm SimpleAndGuardPattern\n","filename":"test\/langtools\/tools\/javac\/patterns\/SimpleAndGuardPattern.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -5,1 +5,2 @@\n- * @compile\/fail\/ref=SwitchErrors.out --enable-preview -source ${jdk.version} -XDrawDiagnostics -XDshould-stop.at=FLOW SwitchErrors.java\n+ * @enablePreview\n+ * @compile\/fail\/ref=SwitchErrors.out -XDrawDiagnostics -XDshould-stop.at=FLOW SwitchErrors.java\n","filename":"test\/langtools\/tools\/javac\/patterns\/SwitchErrors.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,55 +1,55 @@\n-SwitchErrors.java:10:18: compiler.err.constant.label.not.compatible: java.lang.String, java.lang.Object\n-SwitchErrors.java:16:18: compiler.err.constant.label.not.compatible: int, java.lang.Object\n-SwitchErrors.java:22:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, java.lang.Integer)\n-SwitchErrors.java:23:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Integer, java.lang.CharSequence)\n-SwitchErrors.java:28:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, int)\n-SwitchErrors.java:29:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, int)\n-SwitchErrors.java:30:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: int, java.lang.CharSequence)\n-SwitchErrors.java:36:13: compiler.err.unconditional.pattern.and.default\n-SwitchErrors.java:42:24: compiler.err.unconditional.pattern.and.default\n-SwitchErrors.java:48:18: compiler.err.unconditional.pattern.and.default\n-SwitchErrors.java:54:18: compiler.err.duplicate.unconditional.pattern\n-SwitchErrors.java:60:13: compiler.err.duplicate.default.label\n-SwitchErrors.java:66:13: compiler.err.duplicate.default.label\n-SwitchErrors.java:71:27: compiler.err.duplicate.default.label\n-SwitchErrors.java:77:18: compiler.err.duplicate.case.label\n-SwitchErrors.java:82:24: compiler.err.duplicate.case.label\n-SwitchErrors.java:87:28: compiler.err.flows.through.to.pattern\n-SwitchErrors.java:93:18: compiler.err.flows.through.to.pattern\n-SwitchErrors.java:100:18: compiler.err.flows.through.to.pattern\n-SwitchErrors.java:107:18: compiler.err.flows.through.to.pattern\n-SwitchErrors.java:112:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, java.lang.Integer)\n-SwitchErrors.java:118:18: compiler.err.instanceof.reifiable.not.safe: java.util.List, java.util.List<java.lang.Integer>\n-SwitchErrors.java:124:18: compiler.err.cant.resolve.location: kindname.class, Undefined, , , (compiler.misc.location: kindname.class, SwitchErrors, null)\n-SwitchErrors.java:131:18: compiler.err.type.found.req: int, (compiler.misc.type.req.class.array)\n-SwitchErrors.java:137:28: compiler.err.flows.through.from.pattern\n-SwitchErrors.java:143:18: compiler.err.flows.through.from.pattern\n-SwitchErrors.java:148:27: compiler.err.flows.through.to.pattern\n-SwitchErrors.java:154:18: compiler.err.flows.through.to.pattern\n-SwitchErrors.java:166:18: compiler.err.pattern.expected\n-SwitchErrors.java:172:78: compiler.err.cant.resolve.location: kindname.variable, n, , , (compiler.misc.location: kindname.class, SwitchErrors, null)\n-SwitchErrors.java:178:73: compiler.err.cant.resolve.location: kindname.variable, n, , , (compiler.misc.location: kindname.class, SwitchErrors, null)\n-SwitchErrors.java:185:21: compiler.err.flows.through.to.pattern\n-SwitchErrors.java:194:44: compiler.err.flows.through.from.pattern\n-SwitchErrors.java:212:29: compiler.err.unconditional.pattern.and.default\n-SwitchErrors.java:219:21: compiler.err.flows.through.to.pattern\n-SwitchErrors.java:219:47: compiler.err.flows.through.from.pattern\n-SwitchErrors.java:226:44: compiler.err.flows.through.from.pattern\n-SwitchErrors.java:226:47: compiler.err.flows.through.from.pattern\n-SwitchErrors.java:238:18: compiler.err.duplicate.unconditional.pattern\n-SwitchErrors.java:243:18: compiler.err.prob.found.req: (compiler.misc.not.applicable.types: int, java.lang.Integer)\n-SwitchErrors.java:248:18: compiler.err.type.found.req: int, (compiler.misc.type.req.class.array)\n-SwitchErrors.java:261:24: compiler.err.flows.through.to.pattern\n-SwitchErrors.java:275:37: compiler.err.flows.through.from.pattern\n-SwitchErrors.java:9:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:15:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:21:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:27:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:75:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:81:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:86:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:91:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:97:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:104:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:158:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:231:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:11:18: compiler.err.constant.label.not.compatible: java.lang.String, java.lang.Object\n+SwitchErrors.java:17:18: compiler.err.constant.label.not.compatible: int, java.lang.Object\n+SwitchErrors.java:23:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, java.lang.Integer)\n+SwitchErrors.java:24:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Integer, java.lang.CharSequence)\n+SwitchErrors.java:29:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, int)\n+SwitchErrors.java:30:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, int)\n+SwitchErrors.java:31:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: int, java.lang.CharSequence)\n+SwitchErrors.java:37:13: compiler.err.unconditional.pattern.and.default\n+SwitchErrors.java:43:24: compiler.err.unconditional.pattern.and.default\n+SwitchErrors.java:49:18: compiler.err.unconditional.pattern.and.default\n+SwitchErrors.java:55:18: compiler.err.duplicate.unconditional.pattern\n+SwitchErrors.java:61:13: compiler.err.duplicate.default.label\n+SwitchErrors.java:67:13: compiler.err.duplicate.default.label\n+SwitchErrors.java:72:27: compiler.err.duplicate.default.label\n+SwitchErrors.java:78:18: compiler.err.duplicate.case.label\n+SwitchErrors.java:83:24: compiler.err.duplicate.case.label\n+SwitchErrors.java:88:28: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:94:18: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:101:18: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:108:18: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:113:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, java.lang.Integer)\n+SwitchErrors.java:119:18: compiler.err.instanceof.reifiable.not.safe: java.util.List, java.util.List<java.lang.Integer>\n+SwitchErrors.java:125:18: compiler.err.cant.resolve.location: kindname.class, Undefined, , , (compiler.misc.location: kindname.class, SwitchErrors, null)\n+SwitchErrors.java:132:18: compiler.err.type.found.req: int, (compiler.misc.type.req.class.array)\n+SwitchErrors.java:138:28: compiler.err.flows.through.from.pattern\n+SwitchErrors.java:144:18: compiler.err.flows.through.from.pattern\n+SwitchErrors.java:149:27: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:155:18: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:167:18: compiler.err.pattern.expected\n+SwitchErrors.java:173:78: compiler.err.cant.resolve.location: kindname.variable, n, , , (compiler.misc.location: kindname.class, SwitchErrors, null)\n+SwitchErrors.java:179:73: compiler.err.cant.resolve.location: kindname.variable, n, , , (compiler.misc.location: kindname.class, SwitchErrors, null)\n+SwitchErrors.java:186:21: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:195:44: compiler.err.flows.through.from.pattern\n+SwitchErrors.java:213:29: compiler.err.unconditional.pattern.and.default\n+SwitchErrors.java:220:21: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:220:47: compiler.err.flows.through.from.pattern\n+SwitchErrors.java:227:44: compiler.err.flows.through.from.pattern\n+SwitchErrors.java:227:47: compiler.err.flows.through.from.pattern\n+SwitchErrors.java:239:18: compiler.err.duplicate.unconditional.pattern\n+SwitchErrors.java:244:18: compiler.err.prob.found.req: (compiler.misc.not.applicable.types: int, java.lang.Integer)\n+SwitchErrors.java:249:18: compiler.err.type.found.req: int, (compiler.misc.type.req.class.array)\n+SwitchErrors.java:262:24: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:276:37: compiler.err.flows.through.from.pattern\n+SwitchErrors.java:10:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:16:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:22:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:28:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:76:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:82:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:87:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:92:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:98:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:105:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:159:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:232:9: compiler.err.not.exhaustive.statement\n@@ -58,1 +58,1 @@\n-55 errors\n\\ No newline at end of file\n+55 errors\n","filename":"test\/langtools\/tools\/javac\/patterns\/SwitchErrors.out","additions":56,"deletions":56,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+\n@@ -33,2 +34,1 @@\n- * @compile --enable-preview -source ${jdk.version} Switches.java\n- * @run main\/othervm --enable-preview Switches\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/patterns\/Switches.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n- * @compile --enable-preview -source ${jdk.version} T8291657.java\n+ * @enablePreview\n+ * @compile T8291657.java\n","filename":"test\/langtools\/tools\/javac\/patterns\/T8291657.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,2 +26,1 @@\n- * @compile --enable-preview -source ${jdk.version} TypedDeconstructionPatternExc.java\n- * @run main\/othervm --enable-preview TypedDeconstructionPatternExc\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/patterns\/TypedDeconstructionPatternExc.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4,1 +4,2 @@\n- * @compile\/fail\/ref=VarErrors.out --enable-preview -source ${jdk.version} -XDrawDiagnostics -XDshould-stop.at=FLOW -XDdev VarErrors.java\n+ * @enablePreview\n+ * @compile\/fail\/ref=VarErrors.out -XDrawDiagnostics -XDshould-stop.at=FLOW -XDdev VarErrors.java\n","filename":"test\/langtools\/tools\/javac\/patterns\/VarErrors.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,3 +1,3 @@\n-VarErrors.java:8:27: compiler.err.restricted.type.not.allowed.here: var\n-VarErrors.java:12:18: compiler.err.restricted.type.not.allowed.here: var\n-VarErrors.java:17:18: compiler.err.restricted.type.not.allowed.here: var\n+VarErrors.java:9:27: compiler.err.restricted.type.not.allowed.here: var\n+VarErrors.java:13:18: compiler.err.restricted.type.not.allowed.here: var\n+VarErrors.java:18:18: compiler.err.restricted.type.not.allowed.here: var\n","filename":"test\/langtools\/tools\/javac\/patterns\/VarErrors.out","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @compile --enable-preview -source ${jdk.version} SwitchNull.java\n- * @run main\/othervm --enable-preview SwitchNull\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/switchnull\/SwitchNull.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}