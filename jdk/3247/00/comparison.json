{"files":[{"patch":"@@ -6259,2 +6259,1 @@\n-                                                    _local_interfaces,\n-                                                    CHECK);\n+                                                    _local_interfaces);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -345,3 +345,3 @@\n-  Symbol* generate_no_defaults_message(TRAPS) const;\n-  Symbol* generate_method_message(Symbol *klass_name, Method* method, TRAPS) const;\n-  Symbol* generate_conflicts_message(GrowableArray<MethodState>* methods, TRAPS) const;\n+  Symbol* generate_no_defaults_message() const;\n+  Symbol* generate_method_message(Symbol *klass_name, Method* method) const;\n+  Symbol* generate_conflicts_message(GrowableArray<MethodState>* methods) const;\n@@ -380,1 +380,1 @@\n-  void determine_target_or_set_exception_message(InstanceKlass* root, TRAPS) {\n+  void determine_target_or_set_exception_message(InstanceKlass* root) {\n@@ -403,1 +403,1 @@\n-      generate_and_set_exception_message(root, num_defaults, default_index, CHECK);\n+      generate_and_set_exception_message(root, num_defaults, default_index);\n@@ -407,1 +407,1 @@\n-  void generate_and_set_exception_message(InstanceKlass* root, int num_defaults, int default_index, TRAPS) {\n+  void generate_and_set_exception_message(InstanceKlass* root, int num_defaults, int default_index) {\n@@ -422,1 +422,1 @@\n-        _exception_message = generate_no_defaults_message(CHECK);\n+        _exception_message = generate_no_defaults_message();\n@@ -425,1 +425,1 @@\n-        _exception_message = generate_method_message(root->name(), qualified_methods.at(0), CHECK);\n+        _exception_message = generate_method_message(root->name(), qualified_methods.at(0));\n@@ -429,1 +429,1 @@\n-      _exception_message = generate_conflicts_message(&_members,CHECK);\n+      _exception_message = generate_conflicts_message(&_members);\n@@ -460,1 +460,1 @@\n-Symbol* MethodFamily::generate_no_defaults_message(TRAPS) const {\n+Symbol* MethodFamily::generate_no_defaults_message() const {\n@@ -464,1 +464,1 @@\n-Symbol* MethodFamily::generate_method_message(Symbol *klass_name, Method* method, TRAPS) const {\n+Symbol* MethodFamily::generate_method_message(Symbol *klass_name, Method* method) const {\n@@ -477,1 +477,1 @@\n-Symbol* MethodFamily::generate_conflicts_message(GrowableArray<MethodState>* methods, TRAPS) const {\n+Symbol* MethodFamily::generate_conflicts_message(GrowableArray<MethodState>* methods) const {\n@@ -628,1 +628,1 @@\n-    InstanceKlass* klass, const GrowableArray<Method*>* mirandas, TRAPS) {\n+    InstanceKlass* klass, const GrowableArray<Method*>* mirandas) {\n@@ -784,1 +784,1 @@\n-    InstanceKlass* klass, EmptyVtableSlot* slot, bool is_intf, TRAPS) {\n+    InstanceKlass* klass, EmptyVtableSlot* slot, bool is_intf) {\n@@ -796,1 +796,1 @@\n-    family->determine_target_or_set_exception_message(klass, CHECK);\n+    family->determine_target_or_set_exception_message(klass);\n@@ -838,1 +838,1 @@\n-    ResourceMark rm;\n+    ResourceMark rm(THREAD);\n@@ -848,1 +848,1 @@\n-  find_empty_vtable_slots(&empty_slots, klass, mirandas, CHECK);\n+  find_empty_vtable_slots(&empty_slots, klass, mirandas);\n@@ -862,1 +862,1 @@\n-      generate_erased_defaults(&findMethodsByErasedSig, klass, slot, klass->is_interface(), CHECK);\n+      generate_erased_defaults(&findMethodsByErasedSig, klass, slot, klass->is_interface());\n@@ -871,1 +871,1 @@\n-    BytecodeConstantPool* cp, BytecodeBuffer* buffer, Symbol* errorName, Symbol* message, TRAPS) {\n+    BytecodeConstantPool* cp, BytecodeBuffer* buffer, Symbol* errorName, Symbol* message) {\n@@ -995,1 +995,1 @@\n-           method->get_exception_name(), method->get_exception_message(), CHECK);\n+           method->get_exception_name(), method->get_exception_message());\n","filename":"src\/hotspot\/share\/classfile\/defaultMethods.cpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-static PackageEntry* get_locked_package_entry(ModuleEntry* module_entry, const char* package_name, int len, TRAPS) {\n+static PackageEntry* get_locked_package_entry(ModuleEntry* module_entry, const char* package_name, int len) {\n@@ -123,3 +123,1 @@\n-static PackageEntry* get_package_entry_by_name(Symbol* package,\n-                                               Handle h_loader,\n-                                               TRAPS) {\n+static PackageEntry* get_package_entry_by_name(Symbol* package, Handle h_loader) {\n@@ -135,2 +133,2 @@\n-bool Modules::is_package_defined(Symbol* package, Handle h_loader, TRAPS) {\n-  PackageEntry* res = get_package_entry_by_name(package, h_loader, CHECK_false);\n+bool Modules::is_package_defined(Symbol* package, Handle h_loader) {\n+  PackageEntry* res = get_package_entry_by_name(package, h_loader);\n@@ -589,1 +587,1 @@\n-    package_entry = get_locked_package_entry(from_module_entry, pkg, package_len, CHECK);\n+    package_entry = get_locked_package_entry(from_module_entry, pkg, package_len);\n@@ -711,1 +709,1 @@\n-jobject Modules::get_named_module(Handle h_loader, const char* package_name, TRAPS) {\n+oop Modules::get_named_module(Handle h_loader, const char* package_name) {\n@@ -723,1 +721,1 @@\n-    get_package_entry_by_name(package_sym, h_loader, THREAD);\n+    get_package_entry_by_name(package_sym, h_loader);\n@@ -727,1 +725,1 @@\n-    return JNIHandles::make_local(THREAD, module_entry->module());\n+    return module_entry->module();\n@@ -760,1 +758,1 @@\n-    package_entry = get_locked_package_entry(module_entry, pkg, pkg_len, CHECK);\n+    package_entry = get_locked_package_entry(module_entry, pkg, pkg_len);\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -104,1 +104,2 @@\n-  \/\/ Returns NULL if the class loader has not loaded any classes in the package.\n+  \/\/ Returns NULL if the package name is empty, if the resulting package\n+  \/\/ entry is NULL, if the module is not found or is unnamed.\n@@ -106,4 +107,1 @@\n-  \/\/ NullPointerException is thrown if package is null.\n-  \/\/ IllegalArgumentException is thrown if loader is neither null nor a subtype of\n-  \/\/ java\/lang\/ClassLoader.\n-  static jobject get_named_module(Handle h_loader, const char* package, TRAPS);\n+  static oop get_named_module(Handle h_loader, const char* package);\n@@ -118,1 +116,1 @@\n-  static bool is_package_defined(Symbol* package_name, Handle h_loader, TRAPS);\n+  static bool is_package_defined(Symbol* package_name, Handle h_loader);\n","filename":"src\/hotspot\/share\/classfile\/modules.hpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -605,1 +605,0 @@\n-  Thread* const t = Thread::current();\n@@ -608,1 +607,1 @@\n-  return Modules::is_package_defined(pkg_sym, Handle(), t);\n+  return Modules::is_package_defined(pkg_sym, Handle());\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -71,2 +71,1 @@\n-    Handle classloader, Symbol* classname, Array<InstanceKlass*>* local_interfaces,\n-    TRAPS) {\n+    Handle classloader, Symbol* classname, Array<InstanceKlass*>* local_interfaces) {\n@@ -261,1 +260,1 @@\n-      initialized = fill_in_mirandas(initialized, THREAD);\n+      initialized = fill_in_mirandas(THREAD, initialized);\n@@ -940,2 +939,2 @@\n-int klassVtable::fill_in_mirandas(int initialized, TRAPS) {\n-  ResourceMark rm(THREAD);\n+int klassVtable::fill_in_mirandas(Thread* current, int initialized) {\n+  ResourceMark rm(current);\n@@ -1115,1 +1114,1 @@\n-    assign_itable_indices_for_interface(InstanceKlass::cast(_klass), THREAD);\n+    assign_itable_indices_for_interface(THREAD, InstanceKlass::cast(_klass));\n@@ -1161,1 +1160,1 @@\n-int klassItable::assign_itable_indices_for_interface(InstanceKlass* klass, TRAPS) {\n+int klassItable::assign_itable_indices_for_interface(Thread* current, InstanceKlass* klass) {\n@@ -1163,1 +1162,1 @@\n-  ResourceMark rm(THREAD);\n+  ResourceMark rm(current);\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,2 +78,1 @@\n-                                                   Array<InstanceKlass*>* local_interfaces,\n-                                                   TRAPS);\n+                                                   Array<InstanceKlass*>* local_interfaces);\n@@ -129,1 +128,1 @@\n-  int fill_in_mirandas(int initialized, TRAPS);\n+  int fill_in_mirandas(Thread* current, int initialized);\n@@ -310,1 +309,1 @@\n-  static int assign_itable_indices_for_interface(InstanceKlass* klass, TRAPS);\n+  static int assign_itable_indices_for_interface(Thread* current, InstanceKlass* klass);\n","filename":"src\/hotspot\/share\/oops\/klassVtable.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -226,6 +226,2 @@\n-  jobject module = Modules::get_named_module(h_loader, package_name, THREAD);\n-  if (HAS_PENDING_EXCEPTION) {\n-    CLEAR_PENDING_EXCEPTION;\n-    return JVMTI_ERROR_INTERNAL; \/\/ unexpected exception\n-  }\n-  *module_ptr = module;\n+  oop module = Modules::get_named_module(h_loader, package_name);\n+  *module_ptr = module != NULL ? JNIHandles::make_local(THREAD, module) : NULL;\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"}]}