{"files":[{"patch":"@@ -252,1 +252,1 @@\n-    \/\/ backend thread number.\n+    \/\/ backend thread number, see heapDumper.cpp.\n@@ -263,0 +263,91 @@\n+\/\/ Return the number of arguments parsed.\n+static int parse_args(char* line, const char** args, uint args_count, const char delim) {\n+  if (line == NULL || args == NULL || delim == '\\0')\n+    return 0;\n+\n+  char* ptr = line;\n+  uint count = 0;\n+  while (count < args_count) {\n+    args[count++] = ptr;\n+    while (*ptr != delim && *ptr != '\\0') {\n+      ptr++;\n+    }\n+    if (*ptr == '\\0') {\n+      return count;\n+    }\n+    *ptr = '\\0';\n+    ptr++;\n+  }\n+  return count;\n+}\n+\n+\/\/ Implementation of \"dumpheap\" command with extra options.\n+\/\/ See also: HeapDumpDCmd class\n+\/\/\n+\/\/ Input arguments :-\n+\/\/   arg0: Name of the dump file\n+\/\/   arg1: \"-live\" or \"-all\"\n+\/\/   arg2: more_args: \"compress_level,noparallel\"\n+jint dump_heap_ext(AttachOperation* op, outputStream* out) {\n+  \/\/ Possible argument number for op->arg(2).\n+  const int MAX_EXTRA_ARGS_COUNT = 2;\n+  const char* extra_args[MAX_EXTRA_ARGS_COUNT] = {NULL};\n+  const char* arg_str = op->arg(2);\n+  const char* path = NULL;\n+  bool live_objects_only = true;   \/\/ default is true to retain the behavior before this change is made\n+\n+  \/\/ First process filename and liveopt.\n+  \/\/ filename\n+  path = op->arg(0);\n+  if (path == NULL || path[0] == '\\0') {\n+    out->print_cr(\"No dump file specified\");\n+    return JNI_ERR;\n+  } else {\n+    \/\/ -live\n+    const char* arg1 = op->arg(1);\n+    if (arg1 != NULL && (strlen(arg1) > 0)) {\n+      if (strcmp(arg1, \"-all\") != 0 && strcmp(arg1, \"-live\") != 0) {\n+        out->print_cr(\"Invalid argument to dumpheap operation: %s\", arg1);\n+        return JNI_ERR;\n+      }\n+      live_objects_only = strcmp(arg1, \"-live\") == 0;\n+    }\n+  }\n+\n+  \/\/ Then parse arguments from op->arg(2).\n+  \/\/ Format: \"compress_level,noparallel\".\n+  if (arg_str != NULL && arg_str[0] != '\\0') {\n+    int args_len = strlen(arg_str);\n+    char* args_line = NEW_C_HEAP_ARRAY(char, args_len + 1, mtInternal);\n+    snprintf(args_line, args_len + 1, \"%s\", arg_str);\n+    int args_count = parse_args(args_line, extra_args, MAX_EXTRA_ARGS_COUNT, ',');\n+    \/\/ gz=\n+    const char* num_str = extra_args[0];\n+    uintx level = 0;\n+    if (num_str != NULL && num_str[0] != '\\0') {\n+      if (!Arguments::parse_uintx(num_str, &level, 0)) {\n+        out->print_cr(\"Invalid compress level: [%s]\", num_str);\n+        return JNI_ERR;\n+      } else if (level < 1 || level > 9) {\n+        out->print_cr(\"Compression level out of range (1-9): \" UINTX_FORMAT, level);\n+        return JNI_ERR;\n+      }\n+    }\n+    \/\/ noparallel\n+    uint parallel_thread_num = MAX2<uint>(1, (uint)os::initial_active_processor_count() * 3 \/ 8);\n+    const char* par_str = extra_args[1];\n+    if (par_str != NULL && par_str[0] != '\\0' && (strcmp(\"true\", par_str) == 0)) {\n+      parallel_thread_num = 1;\n+    }\n+\n+    \/\/ Request a full GC before heap dump if live_objects_only = true\n+    \/\/ This helps reduces the amount of unreachable objects in the dump\n+    \/\/ and makes it easier to browse.\n+    HeapDumper dumper(live_objects_only \/* request GC *\/);\n+    dumper.dump(path, out, (int)level, (uint)parallel_thread_num);\n+    FREE_C_HEAP_ARRAY(char, args_line);\n+  }\n+  return JNI_OK;\n+}\n+\n+\n@@ -364,0 +455,1 @@\n+  { \"dumpheapext\",      dump_heap_ext },\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":93,"deletions":1,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -212,1 +212,3 @@\n-        String compress_level = null;\n+        String compress_level = \"\";\n+        boolean hasExtraArgs = false;\n+        boolean noParallel = false;\n@@ -229,5 +231,7 @@\n-               compress_level = subopt.substring(\"gz=\".length());\n-               if (compress_level == null) {\n-                    System.err.println(\"Fail: no number provided in option: '\" + subopt + \"'\");\n-                    usage(1);\n-               }\n+                compress_level = subopt.substring(\"gz=\".length());\n+                if (compress_level == null) {\n+                     System.err.println(\"Fail: no number provided in option: '\" + subopt + \"'\");\n+                     usage(1);\n+                }\n+            } else if (subopt.equals(\"noparallel\")) {\n+                hasExtraArgs = noParallel = true;\n@@ -247,2 +251,16 @@\n-        \/\/ dumpHeap is not the same as jcmd GC.heap_dump\n-        executeCommandForPid(pid, \"dumpheap\", filename, liveopt, compress_level);\n+        if (hasExtraArgs) {\n+            \/\/ There is a limitation that at most 3 arguments could be passed to hotspot.\n+            \/\/ For backward compatibility, pass filename and liveopt as 1st and 2nd argument and\n+            \/\/ then compose remaining arguments as the 3rd one, and use comma to seperate them.\n+            \/\/ The difinition of 3rd argument in current implementation is:\n+            \/\/        \"compress_level,noparallel\"\n+            \/\/ Not that making all arguments as a whole string like jcmd did does not guarantee the\n+            \/\/ compatiabilty when the new jmap is uses on old version of JDK.\n+            \/\/ See AttachOperation::arg_count_max in attachListener.hpp for argument count limitation.\n+            String more_args = compress_level + \",\" + Boolean.toString(noParallel);\n+            \/\/ dumpHeap is not the same as jcmd GC.heap_dump\n+            executeCommandForPid(pid, \"dumpheapext\", filename, liveopt, more_args);\n+        } else {\n+            \/\/ dumpHeap is not the same as jcmd GC.heap_dump\n+            executeCommandForPid(pid, \"dumpheap\", filename, liveopt, compress_level);\n+        }\n@@ -315,0 +333,1 @@\n+        System.err.println(\"      noparallel   If specified, the heap is inspected serially.\");\n","filename":"src\/jdk.jcmd\/share\/classes\/sun\/tools\/jmap\/JMap.java","additions":27,"deletions":8,"binary":false,"changes":35,"status":"modified"}]}