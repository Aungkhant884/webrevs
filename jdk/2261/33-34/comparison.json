{"files":[{"patch":"@@ -1678,1 +1678,1 @@\n-    HeapDumpLargeObjectListElem* _next;\n+    volatile HeapDumpLargeObjectListElem* _next;\n@@ -1681,2 +1681,1 @@\n-  HeapDumpLargeObjectListElem* _head;\n-  uint _length;\n+  volatile HeapDumpLargeObjectListElem* _head;\n@@ -1685,1 +1684,1 @@\n-  HeapDumpLargeObjectList() : _head(NULL),  _length(0) { }\n+  HeapDumpLargeObjectList() : _head(NULL) { }\n@@ -1696,2 +1695,2 @@\n-      HeapDumpLargeObjectListElem* old_head = Atomic::load_acquire(&_head);\n-      HeapDumpLargeObjectListElem* new_head = entry;\n+      volatile HeapDumpLargeObjectListElem* old_head = Atomic::load_acquire(&_head);\n+      volatile HeapDumpLargeObjectListElem* new_head = entry;\n@@ -1701,1 +1700,0 @@\n-        Atomic::inc(&_length);\n@@ -1710,1 +1708,0 @@\n-      assert(_length == 0, \"sanity check\");\n@@ -1713,6 +1710,2 @@\n-    HeapDumpLargeObjectListElem* entry = _head;\n-    if (_head->_next != NULL) {\n-      _head = _head->_next;\n-    }\n-    entry->_next = NULL;\n-    _length--;\n+    volatile HeapDumpLargeObjectListElem* entry = _head;\n+    _head = _head->_next;\n@@ -1727,1 +1720,1 @@\n-    while (_length > 0) {\n+    while (_head !=  NULL) {\n@@ -1733,1 +1726,1 @@\n-    return _length == 0;\n+    return _head == NULL;\n@@ -1736,2 +1729,0 @@\n-  uint length() { return _length; }\n-\n@@ -1796,2 +1787,2 @@\n-    InstanceKlass* ik = InstanceKlass::cast(o->klass());\n-    size = DumperSupport::instance_size(ik);\n+    \/\/ Use o->size() * 8 as the upper limit of instance size to avoid iterating static fields\n+    size = o->size() * 8;\n@@ -1822,1 +1813,0 @@\n-   uint   _waiting_number;\n@@ -1831,1 +1821,0 @@\n-     _waiting_number(0),\n@@ -1839,1 +1828,0 @@\n-       _waiting_number++;\n@@ -1843,1 +1831,0 @@\n-     _waiting_number--;\n@@ -2452,3 +2439,0 @@\n-  if (_large_object_list->is_empty()) {\n-    return;\n-  }\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":11,"deletions":27,"binary":false,"changes":38,"status":"modified"}]}