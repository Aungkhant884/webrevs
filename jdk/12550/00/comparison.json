{"files":[{"patch":"@@ -1125,4 +1125,0 @@\n-  if (java_lang_VirtualThread::notify_jvmti_events()) {\n-    JvmtiExport::check_vthread_and_suspend_at_safepoint(current);\n-  }\n-\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -931,0 +931,2 @@\n+  HandleMark hm(current);\n+  Handle self_tobj = Handle(current, nullptr);\n@@ -949,0 +951,2 @@\n+    \/\/ protect thread_oop as a safepoint can be reached in disabler destructor\n+    self_tobj = Handle(current, thread_oop);\n@@ -951,1 +955,1 @@\n-  err = suspend_thread(thread_oop, current, \/* single_suspend *\/ true, nullptr);\n+  err = suspend_thread(self_tobj(), current, \/* single_suspend *\/ true, nullptr);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1277,16 +1277,0 @@\n-void JvmtiExport::check_vthread_and_suspend_at_safepoint(JavaThread *thread) {\n-  oop vt = thread->jvmti_vthread();\n-\n-  if (vt != nullptr && java_lang_VirtualThread::is_instance(vt)) {\n-    int64_t id = java_lang_Thread::thread_id(vt);\n-\n-    ThreadBlockInVM tbivm(thread);\n-    MonitorLocker ml(JvmtiVTMSTransition_lock, Mutex::_no_safepoint_check_flag);\n-\n-    \/\/ block while vthread is externally suspended\n-    while (JvmtiVTSuspender::is_vthread_suspended(id)) {\n-      ml.wait();\n-    }\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -301,2 +301,0 @@\n-  static void check_vthread_and_suspend_at_safepoint(JavaThread *thread) NOT_JVMTI_RETURN;\n-\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -300,2 +300,1 @@\n-  ThreadBlockInVM tbivm(thread);\n-  MonitorLocker ml(JvmtiVTMSTransition_lock, Mutex::_no_safepoint_check_flag);\n+  MonitorLocker ml(JvmtiVTMSTransition_lock);\n@@ -323,2 +322,1 @@\n-    ThreadBlockInVM tbivm(thread);\n-    MonitorLocker ml(JvmtiVTMSTransition_lock, Mutex::_no_safepoint_check_flag);\n+    MonitorLocker ml(JvmtiVTMSTransition_lock);\n@@ -371,1 +369,1 @@\n-  MonitorLocker ml(JvmtiVTMSTransition_lock, Mutex::_no_safepoint_check_flag);\n+  MonitorLocker ml(JvmtiVTMSTransition_lock);\n@@ -387,1 +385,1 @@\n-    MonitorLocker ml(JvmtiVTMSTransition_lock, Mutex::_no_safepoint_check_flag);\n+    MonitorLocker ml(JvmtiVTMSTransition_lock);\n@@ -430,2 +428,1 @@\n-      ThreadBlockInVM tbivm(thread);\n-      MonitorLocker ml(JvmtiVTMSTransition_lock, Mutex::_no_safepoint_check_flag);\n+      MonitorLocker ml(JvmtiVTMSTransition_lock);\n@@ -480,1 +477,1 @@\n-    MonitorLocker ml(JvmtiVTMSTransition_lock, Mutex::_no_safepoint_check_flag);\n+    MonitorLocker ml(JvmtiVTMSTransition_lock);\n@@ -488,2 +485,1 @@\n-      ThreadBlockInVM tbivm(thread);\n-      MonitorLocker ml(JvmtiVTMSTransition_lock, Mutex::_no_safepoint_check_flag);\n+      MonitorLocker ml(JvmtiVTMSTransition_lock);\n@@ -530,1 +526,1 @@\n-  MonitorLocker ml(JvmtiVTMSTransition_lock, Mutex::_no_safepoint_check_flag);\n+  MonitorLocker ml(JvmtiVTMSTransition_lock);\n@@ -539,1 +535,1 @@\n-  MonitorLocker ml(JvmtiVTMSTransition_lock, Mutex::_no_safepoint_check_flag);\n+  MonitorLocker ml(JvmtiVTMSTransition_lock);\n@@ -548,2 +544,0 @@\n-  MonitorLocker ml(JvmtiVTMSTransition_lock, Mutex::_no_safepoint_check_flag);\n-\n@@ -551,0 +545,2 @@\n+  MonitorLocker ml(JvmtiVTMSTransition_lock);\n+\n@@ -565,2 +561,0 @@\n-  MonitorLocker ml(JvmtiVTMSTransition_lock, Mutex::_no_safepoint_check_flag);\n-\n@@ -568,0 +562,2 @@\n+  MonitorLocker ml(JvmtiVTMSTransition_lock);\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.cpp","additions":13,"deletions":17,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -291,1 +291,1 @@\n-  def(JvmtiVTMSTransition_lock     , PaddedMonitor, nosafepoint); \/\/ used for Virtual Thread Mount State transition management\n+  def(JvmtiVTMSTransition_lock     , PaddedMonitor, safepoint);   \/\/ used for Virtual Thread Mount State transition management\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}