{"files":[{"patch":"@@ -178,1 +178,1 @@\n-        if (pos <= 0) {\n+        if (pos <= 0 || pos == syntaxAndInput.length() - 1) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jrtfs\/JrtFileSystem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -744,0 +744,1 @@\n+            System.out.println(\"Caught \" + x);\n@@ -748,0 +749,1 @@\n+            System.out.println(\"finally\");\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/ch\/UnixAsynchronousSocketChannelImpl.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -284,1 +284,1 @@\n-        if (pos <= 0)\n+        if (pos <= 0 || pos == syntaxAndInput.length() - 1)\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-        if (pos <= 0)\n+        if (pos <= 0 || pos == syntaxAndInput.length() - 1)\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileSystem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -444,1 +444,1 @@\n-        if (pos <= 0) {\n+        if (pos <= 0 || pos == syntaxAndInput.length() - 1) {\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4313887 6866397 8073445\n+ * @bug 4313887 6866397 8073445 8290047\n@@ -71,0 +71,12 @@\n+    static void assertBadSyntaxAndPattern(String syntaxAndPattern) {\n+        try {\n+            FileSystems.getDefault().getPathMatcher(syntaxAndPattern);\n+            System.out.printf(\"\\\"%s\\\" ==> no IllegalArgumentException%n\",\n+                              syntaxAndPattern);\n+            failures++;\n+        } catch (IllegalArgumentException iae) {\n+            System.out.printf(\"IllegalArgumentException for \\\"%s\\\" ==> OKAY%n\",\n+                              syntaxAndPattern);\n+        }\n+    }\n+\n@@ -140,0 +152,2 @@\n+        assertBadSyntaxAndPattern(\":glob\");                 \/\/ colon at head\n+        assertBadSyntaxAndPattern(\"glob:\");                 \/\/ colon at tail\n","filename":"test\/jdk\/java\/nio\/file\/PathMatcher\/Basic.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @bug 8141521 8216553 8266291 8290047\n@@ -777,0 +778,14 @@\n+\n+    @DataProvider(name = \"badSyntaxAndPattern\")\n+    private Object[][] badSyntaxAndPattern() {\n+        return new Object[][] {\n+            { \":glob\"},\n+            { \"glob:\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"badSyntaxAndPattern\", expectedExceptions = IllegalArgumentException.class)\n+    public void badSyntaxAndPatternTest(String syntaxAndPattern) {\n+        FileSystem fs = FileSystems.getFileSystem(URI.create(\"jrt:\/\"));\n+        PathMatcher pm = fs.getPathMatcher(syntaxAndPattern);\n+    }\n","filename":"test\/jdk\/jdk\/internal\/jrtfs\/Basic.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-import java.nio.file.Paths;\n+import java.nio.file.PathMatcher;\n@@ -45,1 +45,1 @@\n- * @bug 8038500 8040059 8150366 8150496 8147539\n+ * @bug 8038500 8040059 8150366 8150496 8147539 8290047\n@@ -92,1 +92,1 @@\n-            Path target = Paths.get(source.getFileName().toString());\n+            Path target = Path.of(source.getFileName().toString());\n@@ -116,0 +116,12 @@\n+        \/\/ Test: IllegalArgumentException\n+        try {\n+            PathMatcher pm = fs.getPathMatcher(\":glob\");\n+            throw new RuntimeException(\"IllegalArgumentException not thrown\");\n+        } catch (IllegalArgumentException iae) {\n+        }\n+        try {\n+            PathMatcher pm = fs.getPathMatcher(\"glob:\");\n+            throw new RuntimeException(\"IllegalArgumentException not thrown\");\n+        } catch (IllegalArgumentException iae) {\n+        }\n+\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/Basic.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"}]}