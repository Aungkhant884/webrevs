{"files":[{"patch":"@@ -130,0 +130,4 @@\n+  \/\/ Prevent the reordering of adding node to list and setting the value of node.\n+  \/\/ Such a reordering would lead to reading incorrect values.\n+  OrderAccess::release();\n+\n","filename":"src\/hotspot\/share\/logging\/logOutputList.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"runtime\/atomic.hpp\"\n@@ -51,1 +52,1 @@\n-    LogOutputNode*  _next;\n+    LogOutputNode* volatile _next;\n@@ -55,1 +56,1 @@\n-  LogOutputNode*  _level_start[LogLevel::Count];\n+  LogOutputNode* volatile _level_start[LogLevel::Count];\n@@ -127,1 +128,3 @@\n-      _current = _current->_next;\n+      \/\/ FIXME: memory_order_consume could be used here.\n+      \/\/ Atomic access on the reading side for LogOutputList.\n+      _current = Atomic::load_acquire(&_current->_next);\n@@ -141,1 +144,3 @@\n-    return Iterator(this, _level_start[level]);\n+    \/\/ FIXME: memory_order_consume could be used here.\n+    \/\/ Atomic access on the reading side for LogOutputList.\n+    return Iterator(this, Atomic::load_acquire(&_level_start[level]));\n","filename":"src\/hotspot\/share\/logging\/logOutputList.hpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"}]}