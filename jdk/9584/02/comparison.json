{"files":[{"patch":"@@ -100,0 +100,1 @@\n+\n@@ -101,5 +102,2 @@\n-  assert(addr != nullptr, \"invariant\");\n-  assert(is_in_reserved(addr),\n-         \"Address \" PTR_FORMAT \" is outside of the heap ranging from [\" PTR_FORMAT \" to \" PTR_FORMAT \")\",\n-         p2i((void*)addr), p2i(reserved().start()), p2i(reserved().end()));\n-  return _hrm.addr_to_region((HeapWord*)addr);\n+  uint const region_idx = addr_to_region(addr);\n+  return region_at(region_idx);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1892,1 +1892,1 @@\n-    HeapRegion* curr_region = _g1h->heap_region_containing(finger);\n+    HeapRegion* curr_region = _g1h->heap_region_containing_or_null(finger);\n@@ -1897,1 +1897,1 @@\n-    HeapWord* end = curr_region != NULL ? curr_region->end() : finger + HeapRegion::GrainWords;\n+    HeapWord* end = curr_region != nullptr ? curr_region->end() : finger + HeapRegion::GrainWords;\n@@ -1901,1 +1901,1 @@\n-    if (res == finger && curr_region != NULL) {\n+    if (res == finger && curr_region != nullptr) {\n@@ -1918,1 +1918,1 @@\n-        return NULL;\n+        return nullptr;\n@@ -1927,1 +1927,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1975,2 +1975,2 @@\n-  if (global_finger != NULL && global_finger < _heap.end()) {\n-    \/\/ Since we always iterate over all regions, we might get a NULL HeapRegion\n+  if (global_finger != nullptr && global_finger < _heap.end()) {\n+    \/\/ Since we always iterate over all regions, we might get a nullptr HeapRegion\n@@ -1978,2 +1978,2 @@\n-    HeapRegion* global_hr = _g1h->heap_region_containing(global_finger);\n-    guarantee(global_hr == NULL || global_finger == global_hr->bottom(),\n+    HeapRegion* global_hr = _g1h->heap_region_containing_or_null(global_finger);\n+    guarantee(global_hr == nullptr || global_finger == global_hr->bottom(),\n@@ -1989,1 +1989,1 @@\n-    if (task_finger != NULL && task_finger < _heap.end()) {\n+    if (task_finger != nullptr && task_finger < _heap.end()) {\n@@ -1991,2 +1991,2 @@\n-      HeapRegion* r = _g1h->heap_region_containing(task_finger);\n-      guarantee(r == NULL || task_finger == r->bottom() ||\n+      HeapRegion* r = _g1h->heap_region_containing_or_null(task_finger);\n+      guarantee(r == nullptr || task_finger == r->bottom() ||\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -125,1 +125,0 @@\n-  assert(from != NULL, \"from region must be non-NULL\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1OopClosures.inline.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -89,1 +89,0 @@\n-  assert(region != NULL, \"No region for \" PTR_FORMAT, p2i(entry));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SATBMarkQueueSet.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -386,3 +386,0 @@\n-    if (hr == NULL) {\n-      return false;\n-    }\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}