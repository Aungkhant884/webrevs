{"files":[{"patch":"@@ -2229,1 +2229,1 @@\n-  return is_in_reserved(p) && _hrm.is_available(addr_to_region((HeapWord*)p));\n+  return is_in_reserved(p) && _hrm.is_available(addr_to_region(p));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1080,1 +1080,1 @@\n-  inline uint addr_to_region(HeapWord* addr) const;\n+  inline uint addr_to_region(const void* addr) const;\n@@ -1124,3 +1124,2 @@\n-  \/\/ Returns the HeapRegion that contains addr. addr must not be NULL.\n-  template <class T>\n-  inline HeapRegion* heap_region_containing(const T addr) const;\n+  \/\/ Returns the HeapRegion that contains addr. addr must not be nullptr.\n+  inline HeapRegion* heap_region_containing(const void* addr) const;\n@@ -1128,4 +1127,3 @@\n-  \/\/ Returns the HeapRegion that contains addr, or NULL if that is an uncommitted\n-  \/\/ region. addr must not be NULL.\n-  template <class T>\n-  inline HeapRegion* heap_region_containing_or_null(const T addr) const;\n+  \/\/ Returns the HeapRegion that contains addr, or nullptr if that is an uncommitted\n+  \/\/ region. addr must not be nullptr.\n+  inline HeapRegion* heap_region_containing_or_null(const void* addr) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-inline uint G1CollectedHeap::addr_to_region(HeapWord* addr) const {\n+inline uint G1CollectedHeap::addr_to_region(const void* addr) const {\n@@ -100,7 +100,3 @@\n-template <class T>\n-inline HeapRegion* G1CollectedHeap::heap_region_containing(const T addr) const {\n-  assert(addr != NULL, \"invariant\");\n-  assert(is_in_reserved((const void*) addr),\n-         \"Address \" PTR_FORMAT \" is outside of the heap ranging from [\" PTR_FORMAT \" to \" PTR_FORMAT \")\",\n-         p2i((void*)addr), p2i(reserved().start()), p2i(reserved().end()));\n-  return _hrm.addr_to_region((HeapWord*)(void*) addr);\n+inline HeapRegion* G1CollectedHeap::heap_region_containing(const void* addr) const {\n+  uint const region_idx = addr_to_region(addr);\n+  return region_at(region_idx);\n@@ -109,6 +105,1 @@\n-template <class T>\n-inline HeapRegion* G1CollectedHeap::heap_region_containing_or_null(const T addr) const {\n-  assert(addr != NULL, \"invariant\");\n-  assert(is_in_reserved((const void*) addr),\n-         \"Address \" PTR_FORMAT \" is outside of the heap ranging from [\" PTR_FORMAT \" to \" PTR_FORMAT \")\",\n-         p2i((void*)addr), p2i(reserved().start()), p2i(reserved().end()));\n+inline HeapRegion* G1CollectedHeap::heap_region_containing_or_null(const void* addr) const {\n@@ -249,1 +240,1 @@\n-  uint region = addr_to_region(cast_from_oop<HeapWord*>(obj));\n+  uint region = addr_to_region(obj);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":6,"deletions":15,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1892,1 +1892,1 @@\n-    HeapRegion* curr_region = _g1h->heap_region_containing(finger);\n+    HeapRegion* curr_region = _g1h->heap_region_containing_or_null(finger);\n@@ -1897,1 +1897,1 @@\n-    HeapWord* end = curr_region != NULL ? curr_region->end() : finger + HeapRegion::GrainWords;\n+    HeapWord* end = curr_region != nullptr ? curr_region->end() : finger + HeapRegion::GrainWords;\n@@ -1901,1 +1901,1 @@\n-    if (res == finger && curr_region != NULL) {\n+    if (res == finger && curr_region != nullptr) {\n@@ -1918,1 +1918,1 @@\n-        return NULL;\n+        return nullptr;\n@@ -1927,1 +1927,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1975,2 +1975,2 @@\n-  if (global_finger != NULL && global_finger < _heap.end()) {\n-    \/\/ Since we always iterate over all regions, we might get a NULL HeapRegion\n+  if (global_finger != nullptr && global_finger < _heap.end()) {\n+    \/\/ Since we always iterate over all regions, we might get a nullptr HeapRegion\n@@ -1978,2 +1978,2 @@\n-    HeapRegion* global_hr = _g1h->heap_region_containing(global_finger);\n-    guarantee(global_hr == NULL || global_finger == global_hr->bottom(),\n+    HeapRegion* global_hr = _g1h->heap_region_containing_or_null(global_finger);\n+    guarantee(global_hr == nullptr || global_finger == global_hr->bottom(),\n@@ -1989,1 +1989,1 @@\n-    if (task_finger != NULL && task_finger < _heap.end()) {\n+    if (task_finger != nullptr && task_finger < _heap.end()) {\n@@ -1991,2 +1991,2 @@\n-      HeapRegion* r = _g1h->heap_region_containing(task_finger);\n-      guarantee(r == NULL || task_finger == r->bottom() ||\n+      HeapRegion* r = _g1h->heap_region_containing_or_null(task_finger);\n+      guarantee(r == nullptr || task_finger == r->bottom() ||\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  HeapRegion* hr = _g1h->heap_region_containing(cast_from_oop<HeapWord*>(obj));\n+  HeapRegion* hr = _g1h->heap_region_containing(obj);\n@@ -223,1 +223,1 @@\n-  _mark_stats_cache.add_live_words(_g1h->addr_to_region(cast_from_oop<HeapWord*>(obj)), obj_size);\n+  _mark_stats_cache.add_live_words(_g1h->addr_to_region(obj), obj_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        HeapRegion* from = _g1h->heap_region_containing((HeapWord*)p);\n+        HeapRegion* from = _g1h->heap_region_containing(p);\n@@ -83,1 +83,1 @@\n-        HeapRegion* from = _g1h->heap_region_containing((HeapWord*)p);\n+        HeapRegion* from = _g1h->heap_region_containing(p);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCOopClosures.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -125,1 +125,0 @@\n-  assert(from != NULL, \"from region must be non-NULL\");\n@@ -176,1 +175,1 @@\n-         p2i(p), _g1h->addr_to_region((HeapWord*)p));\n+         p2i(p), _g1h->addr_to_region(p));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1OopClosures.inline.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -200,1 +200,1 @@\n-         p2i(obj), _g1h->addr_to_region(cast_from_oop<HeapWord*>(obj)), p2i(p));\n+         p2i(obj), _g1h->addr_to_region(obj), p2i(p));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-  uint region_index = G1CollectedHeap::heap()->addr_to_region(cast_from_oop<HeapWord*>(obj));\n+  uint region_index = G1CollectedHeap::heap()->addr_to_region(obj);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionMarkStatsCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,0 @@\n-  assert(region != NULL, \"No region for \" PTR_FORMAT, p2i(entry));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SATBMarkQueueSet.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -532,1 +532,1 @@\n-          HeapRegion* from = _g1h->heap_region_containing((HeapWord*)p);\n+          HeapRegion* from = _g1h->heap_region_containing(p);\n@@ -541,1 +541,1 @@\n-          HeapRegion* from = _g1h->heap_region_containing((HeapWord*)p);\n+          HeapRegion* from = _g1h->heap_region_containing(p);\n@@ -580,1 +580,1 @@\n-      HeapRegion* from = _g1h->heap_region_containing((HeapWord*)p);\n+      HeapRegion* from = _g1h->heap_region_containing(p);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,3 +43,1 @@\n-\n-  HeapRegion* hr = _regions.get_by_address(addr);\n-  return hr;\n+  return _regions.get_by_address(addr);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionManager.inline.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -386,3 +386,0 @@\n-    if (hr == NULL) {\n-      return false;\n-    }\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}