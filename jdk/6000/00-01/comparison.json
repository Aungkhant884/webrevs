{"files":[{"patch":"@@ -320,3 +320,7 @@\n-  const char* dump_path = env->GetStringUTFChars(dumppath, NULL);\n-  JfrEmergencyDump::set_dump_path(dump_path);\n-  env->ReleaseStringUTFChars(dumppath, dump_path);\n+  if (dumppath == NULL) {\n+    JfrEmergencyDump::set_dump_path(NULL);\n+  } else {\n+    const char* dump_path = env->GetStringUTFChars(dumppath, NULL);\n+    JfrEmergencyDump::set_dump_path(dump_path);\n+    env->ReleaseStringUTFChars(dumppath, dump_path);\n+  }\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -170,1 +170,3 @@\n-  if (dump_path != NULL) {\n+  if (dump_path == NULL || *dump_path == '\\0') {\n+    os::get_current_directory(_dump_path, sizeof(_dump_path));\n+  } else {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrEmergencyDump.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    private static final SafePath DEFAULT_DUMP_PATH = new SafePath(\".\");\n+    private static final SafePath DEFAULT_DUMP_PATH = null;\n@@ -124,5 +124,5 @@\n-            if (SecuritySupport.isWritable(path)) {\n-                jvm.setDumpPath(SecuritySupport.toRealPath(path, NOFOLLOW_LINKS).toString());\n-            } else {\n-                if (Logger.shouldLog(LogTag.JFR_SYSTEM_SETTING, LogLevel.WARN)) {\n-                    Logger.log(LogTag.JFR_SYSTEM_SETTING, LogLevel.WARN, \"Cannot write JFR emergency dump to \" + path.toString());\n+            if (path != null) {\n+                if (SecuritySupport.isWritable(path)) {\n+                    path = SecuritySupport.toRealPath(path, NOFOLLOW_LINKS);\n+                } else {\n+                    throw new IOException(\"Cannot write JFR emergency dump to \" + path.toString());\n@@ -132,3 +132,1 @@\n-            if (Logger.shouldLog(LogTag.JFR_SYSTEM_SETTING, LogLevel.WARN)) {\n-                Logger.log(LogTag.JFR_SYSTEM_SETTING, LogLevel.WARN, \"Error occurred in path resolution: \" + e.toString());\n-            }\n+            throw new IllegalArgumentException(e);\n@@ -136,0 +134,1 @@\n+        jvm.setDumpPath(path == null ? null : path.toString());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Options.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -109,1 +109,5 @@\n-            Options.setDumpPath(new SafePath(dumpPath));\n+            try {\n+                Options.setDumpPath(new SafePath(dumpPath));\n+            } catch (IllegalArgumentException e) {\n+                throw new DCmdException(\"Could not set \" + dumpPath + \" to emergency dump path. \" + e.getMessage(), e);\n+            }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/DCmdConfigure.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -95,7 +95,0 @@\n-        \/\/ Test with illegal dumppath\n-        Path illegalpath = Path.of(\"silverbullet\");\n-        test(CrasherIllegalAccess.class, \"\", true, illegalpath.toString(), null);\n-        test(CrasherIllegalAccess.class, \"\", false, illegalpath.toString(), null);\n-        test(CrasherHalt.class, \"\", true, illegalpath.toString(), null);\n-        test(CrasherHalt.class, \"\", false, illegalpath.toString(), null);\n-\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestDumpOnCrash.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"}]}