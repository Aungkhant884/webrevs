{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -131,1 +131,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: July 2022\n@@ -1641,2 +1641,2 @@\n-        if (fEntityResolver != null) {\n-            try {\n+        try {\n+            if (fEntityResolver != null) {\n@@ -1655,30 +1655,29 @@\n-\n-                if (includedSource == null && fUseCatalog) {\n-                    if (fCatalogFeatures == null) {\n-                        fCatalogFeatures = JdkXmlUtils.getCatalogFeatures(fDefer, fCatalogFile, fPrefer, fResolve);\n-                    }\n-                    fCatalogFile = fCatalogFeatures.get(CatalogFeatures.Feature.FILES);\n-                    if (fCatalogFile != null) {\n-                        \/*\n-                           Although URI entry is preferred for resolving XInclude, system entry\n-                           is allowed as well.\n-                        *\/\n-                        Source source = null;\n-                        try {\n-                            if (fCatalogResolver == null) {\n-                                fCatalogResolver = CatalogManager.catalogResolver(fCatalogFeatures);\n-                            }\n-                            source = fCatalogResolver.resolve(href, fCurrentBaseURI.getExpandedSystemId());\n-                        } catch (CatalogException e) {}\n-\n-                        if (source != null && !source.isEmpty()) {\n-                            includedSource = new XMLInputSource(null, source.getSystemId(),\n-                                    fCurrentBaseURI.getExpandedSystemId(), true);\n-                        } else {\n-                            if (fCatalogResolver == null) {\n-                                fCatalogResolver = CatalogManager.catalogResolver(fCatalogFeatures);\n-                            }\n-                            InputSource is = fCatalogResolver.resolveEntity(href, href);\n-                            if (is != null && !is.isEmpty()) {\n-                                includedSource = new XMLInputSource(is, true);\n-                            }\n+            }\n+            if (includedSource == null && fUseCatalog) {\n+                if (fCatalogFeatures == null) {\n+                    fCatalogFeatures = JdkXmlUtils.getCatalogFeatures(fDefer, fCatalogFile, fPrefer, fResolve);\n+                }\n+                fCatalogFile = fCatalogFeatures.get(CatalogFeatures.Feature.FILES);\n+                if (fCatalogFile != null) {\n+                    \/*\n+                       Although URI entry is preferred for resolving XInclude, system entry\n+                       is allowed as well.\n+                    *\/\n+                    Source source = null;\n+                    try {\n+                        if (fCatalogResolver == null) {\n+                            fCatalogResolver = CatalogManager.catalogResolver(fCatalogFeatures);\n+                        }\n+                        source = fCatalogResolver.resolve(href, fCurrentBaseURI.getExpandedSystemId());\n+                    } catch (CatalogException e) {}\n+\n+                    if (source != null && !source.isEmpty()) {\n+                        includedSource = new XMLInputSource(null, source.getSystemId(),\n+                                fCurrentBaseURI.getExpandedSystemId(), true);\n+                    } else {\n+                        if (fCatalogResolver == null) {\n+                            fCatalogResolver = CatalogManager.catalogResolver(fCatalogFeatures);\n+                        }\n+                        InputSource is = fCatalogResolver.resolveEntity(href, href);\n+                        if (is != null && !is.isEmpty()) {\n+                            includedSource = new XMLInputSource(is, true);\n@@ -1688,0 +1687,1 @@\n+            }\n@@ -1689,5 +1689,5 @@\n-                if (includedSource != null &&\n-                    !(includedSource instanceof HTTPInputSource) &&\n-                    (accept != null || acceptLanguage != null) &&\n-                    includedSource.getCharacterStream() == null &&\n-                    includedSource.getByteStream() == null) {\n+            if (includedSource != null &&\n+                !(includedSource instanceof HTTPInputSource) &&\n+                (accept != null || acceptLanguage != null) &&\n+                includedSource.getCharacterStream() == null &&\n+                includedSource.getByteStream() == null) {\n@@ -1695,9 +1695,2 @@\n-                    includedSource = createInputSource(includedSource.getPublicId(), includedSource.getSystemId(),\n-                        includedSource.getBaseSystemId(), accept, acceptLanguage);\n-                }\n-            }\n-            catch (IOException | CatalogException e) {\n-                reportResourceError(\n-                    \"XMLResourceError\",\n-                    new Object[] { href, e.getMessage()}, e);\n-                return false;\n+                includedSource = createInputSource(includedSource.getPublicId(), includedSource.getSystemId(),\n+                    includedSource.getBaseSystemId(), accept, acceptLanguage);\n@@ -1706,0 +1699,6 @@\n+        catch (IOException | CatalogException e) {\n+            reportResourceError(\n+                \"XMLResourceError\",\n+                new Object[] { href, e.getMessage()}, e);\n+            return false;\n+        }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/xinclude\/XIncludeHandler.java","additions":47,"deletions":48,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n- * @bug 8158084 8162438 8162442 8166220 8166398\n+ * @bug 8158084 8162438 8162442 8166220 8166398 8290740\n@@ -106,0 +106,11 @@\n+    \/*\n+       Verifies that the Catalog is used when the handler is null. The test shall\n+       run through without an Exception (that was thrown before the fix).\n+    *\/\n+    @Test(dataProvider = \"data_XIA\")\n+    public void testXIncludeA_NullHandler(boolean setUseCatalog, boolean useCatalog, String catalog,\n+            String xml, MyHandler handler, String expected) throws Exception {\n+        handler = null;\n+        testXInclude(setUseCatalog, useCatalog, catalog, xml, handler, expected);\n+    }\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/CatalogSupport.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -309,1 +309,0 @@\n-\n@@ -311,2 +310,6 @@\n-        debugPrint(\"handler.result:\" + handler.getResult());\n-        Assert.assertEquals(handler.getResult().trim(), expected);\n+        \/\/ the test verifies the result if handler != null, or no exception\n+        \/\/ is thrown if handler == null.\n+        if (handler != null) {\n+            debugPrint(\"handler.result:\" + handler.getResult());\n+            Assert.assertEquals(handler.getResult().trim(), expected);\n+        }\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/CatalogSupportBase.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"}]}