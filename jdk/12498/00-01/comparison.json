{"files":[{"patch":"@@ -173,0 +173,1 @@\n+        \/\/ Only treat empty EnumSets specially for compatibility.\n@@ -181,2 +182,6 @@\n-            while (i.hasNext())\n-                result.add(i.next());\n+            if (c instanceof RegularEnumSetCompatible || c instanceof JumboEnumSetCompatible) {\n+                result.addAll(c);   \/\/ optimized for compatible sets\n+            } else {\n+                while (i.hasNext())\n+                    result.add(i.next());\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/util\/EnumSet.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -731,1 +731,3 @@\n-        } else if (coll.isEmpty()) { \/\/ Implicit nullcheck of coll\n+        }\n+        var it = coll.iterator();   \/\/ Implicit nullcheck of coll\n+        if (!it.hasNext()) {\n@@ -733,2 +735,0 @@\n-        } else {\n-            return (Set<E>)Set.of(new HashSet<>(coll).toArray());\n@@ -736,0 +736,15 @@\n+        E e0 = it.next();\n+        if (!it.hasNext()) {\n+            return Set.of(e0);\n+        }\n+        E e1 = it.next();\n+        if (!it.hasNext()) {\n+            return Set.of(e0, e1);\n+        }\n+        if (coll instanceof RegularEnumSetCompatible<?> res) {\n+            return (Set<E>)new ImmutableCollections.ImmutableRegularEnumSet<>(res.elements(), res.elementType());\n+        }\n+        if (coll instanceof JumboEnumSetCompatible<?> jes) {\n+            return (Set<E>)new ImmutableCollections.ImmutableJumboEnumSet<>(jes.elements(), jes.elementType(), jes.size());\n+        }\n+        return (Set<E>)Set.of(new HashSet<>(coll).toArray());\n","filename":"src\/java.base\/share\/classes\/java\/util\/Set.java","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"}]}