{"files":[{"patch":"@@ -360,0 +360,5 @@\n+     * <p>\n+     * In cases where this method is called from a context where there is no\n+     * caller frame on the stack (e.g. when called directly from a JNI\n+     * attached thread), the system class loader is used.\n+     *\n@@ -383,1 +388,4 @@\n-        return forName0(className, true, ClassLoader.getClassLoader(caller), caller);\n+        ClassLoader loader = (caller == null) ?\n+                ClassLoader.getSystemClassLoader() :\n+                ClassLoader.getClassLoader(caller);\n+        return forName0(className, true, loader, caller);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @bug 8281001\n","filename":"test\/jdk\/java\/lang\/module\/exeNullCallerGetResource\/NullCallerGetResource.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -111,0 +111,14 @@\n+    \/\/ 8281001\n+    \/\/ Try and load a class using Class::forName in the module n which should be\n+    \/\/ found with the system classloader (to match FindClass() used above).\n+        \/\/ Class exp = Class.forName(\"open.OpenResources\");\n+    jmethodID mid_Class_forName = (*env)->GetStaticMethodID(env, class_Class, \"forName\", \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\" );\n+    assert(mid_Class_forName != NULL);\n+    jclass oc =(*env)->CallStaticObjectMethod(env, class_Class, mid_Class_forName,\n+            (*env)->NewStringUTF(env, \"open.OpenResources\"));\n+    if ((*env)->ExceptionOccurred(env) != NULL) {\n+        printf(\"ERROR: Exception was thrown calling Class::forName.\\n\");\n+        (*env)->ExceptionDescribe(env);\n+        exit(-1);\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/module\/exeNullCallerGetResource\/exeNullCallerGetResource.c","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"}]}