{"files":[{"patch":"@@ -47,5 +47,0 @@\n-    \/**\n-     * Max sum of iov_len fields over all iovec structures that writev supports\n-     *\/\n-    static final int IOV_MAX_LEN_SUM = Integer.MAX_VALUE;\n-\n@@ -181,2 +176,2 @@\n-            int iovLenSum = 0;\n-            for (int i = offset; i < count && iov_len < IOV_MAX; i++) {\n+            int i = offset;\n+            while (i < count && iov_len < IOV_MAX) {\n@@ -196,6 +191,0 @@\n-                    if (iovLenSum <= IOV_MAX_LEN_SUM - rem) {\n-                        iovLenSum += rem;\n-                    } else {\n-                        rem = IOV_MAX_LEN_SUM - iovLenSum;\n-                        iovLenSum = IOV_MAX_LEN_SUM;\n-                    }\n@@ -211,3 +200,1 @@\n-                        int shadowPos = shadow.position();\n-                        shadow.put(shadowPos, buf, pos, rem);\n-                        shadow.position(shadowPos + rem);\n+                        shadow.put(buf);\n@@ -216,0 +203,1 @@\n+                        buf.position(pos);  \/\/ temporarily restore position in user buffer\n@@ -223,3 +211,0 @@\n-\n-                    if (iovLenSum == IOV_MAX_LEN_SUM)\n-                        break;\n@@ -227,0 +212,1 @@\n+                i++;\n@@ -235,1 +221,1 @@\n-            for (int j = 0; j < iov_len; j++) {\n+            for (int j=0; j<iov_len; j++) {\n@@ -259,1 +245,1 @@\n-                for (int j = 0; j < iov_len; j++) {\n+                for (int j=0; j<iov_len; j++) {\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/IOUtil.java","additions":7,"deletions":21,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -137,1 +137,21 @@\n-    return convertLongReturnVal(env, writev(fd, iov, len), JNI_FALSE);\n+    ssize_t result = writev(fd, iov, len);\n+#ifdef MACOSX\n+    if (result < 0 && errno == EINVAL) {\n+        \/\/\n+        \/\/ Calculate sum of iov_len values each of which satisfies\n+        \/\/ the constraint 0 < iov_len <= INT_MAX\n+        \/\/\n+        size_t total_len = 0;\n+        for (int i = 0; i < len && total_len < INT_MAX; i++)\n+            total_len += iov[i].iov_len;\n+\n+        \/\/\n+        \/\/ [EINVAL] The sum of the iov_len values in the iov array\n+        \/\/          overflows a 32-bit integer.\n+        \/\/\n+        if (total_len > INT_MAX)\n+            \/\/ Retry the gathering write with only the first buffer\n+            result = writev(fd, iov, 1);\n+    }\n+#endif\n+    return convertLongReturnVal(env, result, JNI_FALSE);\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/FileDispatcherImpl.c","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"}]}