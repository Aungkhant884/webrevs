{"files":[{"patch":"@@ -32,0 +32,1 @@\n+#include <limits.h>\n@@ -137,1 +138,40 @@\n-    return convertLongReturnVal(env, writev(fd, iov, len), JNI_FALSE);\n+    ssize_t result = writev(fd, iov, len);\n+#ifdef MACOSX\n+    if (result < 0 && errno == EINVAL) {\n+        \/\/\n+        \/\/ Calculate sum of iov_len values\n+        \/\/\n+        size_t total_len = 0;\n+        for (int i = 0; i < len; i++)\n+            total_len += iov[i].iov_len;\n+\n+        \/\/\n+        \/\/ [EINVAL] The sum of the iov_len values in the iov array\n+        \/\/          overflows a 32-bit integer.\n+        \/\/\n+        size_t overflow = total_len - INT_MAX;\n+        if (overflow > 0) {\n+            do {\n+                int index = len - 1;\n+                if (iov[index].iov_len <= overflow) {\n+                    \/\/\n+                    \/\/ Clear size of and remove the last iovec element\n+                    \/\/\n+                    overflow -= iov[index].iov_len;\n+                    iov[index].iov_len = 0;\n+                    len--;\n+                } else {\n+                    \/\/\n+                    \/\/ Adjust the last iovec element\n+                    \/\/\n+                    iov[index].iov_len -= overflow;\n+                    overflow = 0; \/\/ loop will exit\n+                }\n+            } while (overflow > 0);\n+\n+            \/\/ Retry the gathering write\n+            result = writev(fd, iov, len);\n+        }\n+    }\n+#endif\n+    return convertLongReturnVal(env, result, JNI_FALSE);\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/FileDispatcherImpl.c","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8274548\n+ * @summary Test gathering write of more than INT_MAX bytes\n+ * @run main\/othervm -Xmx8G LargeGatheringWrite\n+ * @key randomness\n+ *\/\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Random;\n+\n+import static java.nio.file.StandardOpenOption.CREATE;\n+import static java.nio.file.StandardOpenOption.READ;\n+import static java.nio.file.StandardOpenOption.WRITE;\n+\n+public class LargeGatheringWrite {\n+    private static final int GB = 1024*1024*1024;\n+\n+    private static final Random RND = new Random(System.nanoTime());\n+\n+    public static void main(String[] args) throws IOException {\n+        \/\/ Create direct and heap buffers\n+        ByteBuffer direct = ByteBuffer.allocateDirect(GB);\n+        ByteBuffer heap   = ByteBuffer.allocate(GB);\n+\n+        \/\/ Load buffers with random values\n+        assert heap.hasArray();\n+        RND.nextBytes(heap.array());\n+        direct.put(0, heap, 0, heap.capacity());\n+\n+        \/\/ Create an array of buffers derived from direct and heap\n+        ByteBuffer[] bigBuffers = new ByteBuffer[] {\n+            direct,\n+            heap,\n+            direct.slice(0, GB\/2),\n+            heap.slice(0, GB\/2),\n+            direct.slice(GB\/2, GB\/2),\n+            heap.slice(GB\/2, GB\/2),\n+            direct.slice(GB\/4, GB\/2),\n+            heap.slice(GB\/4, GB\/2),\n+            direct.slice(0, 1),\n+            heap.slice(GB - 2, 1)\n+        };\n+\n+        \/\/ Calculate the sum of all buffer capacities\n+        long totalLength = 0L;\n+        for(ByteBuffer buf : bigBuffers)\n+            totalLength += buf.capacity();\n+\n+        \/\/ Write the data to a temporary file\n+        Path tempFile = Files.createTempFile(\"LargeGatheringWrite\", \".dat\");\n+\n+        System.out.printf(\"Writing %d bytes of data...%n\", totalLength);\n+        try (FileChannel fcw = FileChannel.open(tempFile, CREATE, WRITE);) {\n+            \/\/ Print size of individual writes and total number written\n+            long bytesWritten = 0;\n+            long n;\n+            while ((n = fcw.write(bigBuffers)) > 0) {\n+                System.out.printf(\"Wrote %d bytes\\n\", n);\n+                bytesWritten += n;\n+            }\n+            System.out.printf(\"Total of %d bytes written\\n\", bytesWritten);\n+\n+            \/\/ Verify the content written\n+            try (FileChannel fcr = FileChannel.open(tempFile, READ);) {\n+                byte[] bytes = null;\n+                for (ByteBuffer buf : bigBuffers) {\n+                    \/\/ For each buffer read the corresponding number of bytes\n+                    buf.clear();\n+                    int length = buf.remaining();\n+                    System.out.printf(\"Checking length %d%n\", length);\n+                    if (bytes == null || bytes.length < length)\n+                        bytes = new byte[length];\n+                    ByteBuffer dst = ByteBuffer.wrap(bytes).slice(0, length);\n+                    if (dst.remaining() != length)\n+                        throw new RuntimeException(\"remaining\");\n+                    if (fcr.read(dst) != length)\n+                        throw new RuntimeException(\"length\");\n+                    dst.clear();\n+\n+                    \/\/ Verify that the bytes read from the file match the buffer\n+                    int mismatch;\n+                    if ((mismatch = dst.mismatch(buf)) != -1) {\n+                        String msg = String.format(\"mismatch: %d%n\", mismatch);\n+                        throw new RuntimeException(msg);\n+                    }\n+                }\n+            }\n+        } finally {\n+            Files.delete(tempFile);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/LargeGatheringWrite.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"}]}