{"files":[{"patch":"@@ -47,0 +47,5 @@\n+    \/**\n+     * Max total number of bytes that writev supports\n+     *\/\n+    static final long WRITEV_MAX;\n+\n@@ -175,0 +180,1 @@\n+            long writevLen = 0L;\n@@ -177,1 +183,1 @@\n-            while (i < count && iov_len < IOV_MAX) {\n+            while (i < count && iov_len < IOV_MAX && writevLen < WRITEV_MAX) {\n@@ -191,0 +197,4 @@\n+                    long headroom = WRITEV_MAX - writevLen;\n+                    if (headroom < rem)\n+                        rem = (int)headroom;\n+\n@@ -200,1 +210,1 @@\n-                        shadow.put(buf);\n+                        shadow.put(shadow.position(), buf, pos, rem);\n@@ -203,1 +213,0 @@\n-                        buf.position(pos);  \/\/ temporarily restore position in user buffer\n@@ -211,0 +220,1 @@\n+                    writevLen += rem;\n@@ -583,0 +593,2 @@\n+    static native long writevMax();\n+\n@@ -596,0 +608,1 @@\n+        WRITEV_MAX = writevMax();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/IOUtil.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -137,21 +137,1 @@\n-    ssize_t result = writev(fd, iov, len);\n-#ifdef MACOSX\n-    if (result < 0 && errno == EINVAL) {\n-        \/\/\n-        \/\/ Calculate sum of iov_len values each of which satisfies\n-        \/\/ the constraint 0 < iov_len <= INT_MAX\n-        \/\/\n-        size_t total_len = 0;\n-        for (int i = 0; i < len && total_len < INT_MAX; i++)\n-            total_len += iov[i].iov_len;\n-\n-        \/\/\n-        \/\/ [EINVAL] The sum of the iov_len values in the iov array\n-        \/\/          overflows a 32-bit integer.\n-        \/\/\n-        if (total_len > INT_MAX)\n-            \/\/ Retry the gathering write with only the first buffer\n-            result = writev(fd, iov, 1);\n-    }\n-#endif\n-    return convertLongReturnVal(env, result, JNI_FALSE);\n+    return convertLongReturnVal(env, writev(fd, iov, len), JNI_FALSE);\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/FileDispatcherImpl.c","additions":1,"deletions":21,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,4 @@\n+#ifdef MACOSX\n+#include <stdlib.h>\n+#include <sys\/utsname.h>\n+#endif\n@@ -36,0 +40,1 @@\n+#include \"java_lang_Long.h\"\n@@ -176,0 +181,45 @@\n+#ifdef MACOSX\n+static int get_darwin_version() {\n+    struct utsname name;\n+    if (uname(&name) < 0)\n+        return -1;\n+\n+    int version_number = -1;\n+    char major_version[_SYS_NAMELEN];\n+    char *dot = strchr(name.release, '.');\n+    if (dot != NULL) {\n+        size_t len = dot - name.release;\n+        strncpy(major_version, name.release, len);\n+        major_version[len]= '\\0';\n+        version_number = atoi(major_version);\n+    }\n+\n+    return version_number;\n+}\n+#endif\n+\n+JNIEXPORT jlong JNICALL\n+Java_sun_nio_ch_IOUtil_writevMax(JNIEnv *env, jclass this)\n+{\n+#ifdef MACOSX\n+    \/\/\n+    \/\/ As of macOS 11 Big Sur, Darwin version 20, writev() started to\n+    \/\/ enforce the constraint\n+    \/\/\n+    \/\/ [EINVAL] The sum of the iov_len values in the iov array\n+    \/\/          overflows a 32-bit integer.\n+    \/\/\n+    if (get_darwin_version() >= 20)\n+        return java_lang_Integer_MAX_VALUE;\n+#elif defined(__linux__)\n+    \/\/\n+    \/\/ The Linux specification of writev() has the same constraint on\n+    \/\/ the sum of the iov_len values in the iov array as above, but in\n+    \/\/ practice on Linux writev() has been observed not to write more\n+    \/\/ than 0x7fff0000 (aarch64) or 0x7ffff000 (x64) bytes in one call.\n+    \/\/\n+    return java_lang_Integer_MAX_VALUE;\n+#endif\n+    return java_lang_Long_MAX_VALUE;\n+}\n+\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/IOUtil.c","additions":51,"deletions":1,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"java_lang_Long.h\"\n@@ -80,0 +81,5 @@\n+JNIEXPORT jlong JNICALL\n+Java_sun_nio_ch_IOUtil_writevMax(JNIEnv *env, jclass this)\n+{\n+    return java_lang_Long_MAX_VALUE;\n+}\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/IOUtil.c","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}