{"files":[{"patch":"@@ -47,0 +47,5 @@\n+    \/**\n+     * Max total number of bytes that writev supports\n+     *\/\n+    static final long WRITEV_MAX;\n+\n@@ -175,0 +180,1 @@\n+            long writevLen = 0L;\n@@ -177,1 +183,1 @@\n-            while (i < count && iov_len < IOV_MAX) {\n+            while (i < count && iov_len < IOV_MAX && writevLen < WRITEV_MAX) {\n@@ -191,0 +197,4 @@\n+                    long headroom = WRITEV_MAX - writevLen;\n+                    if (headroom < rem)\n+                        rem = (int)headroom;\n+\n@@ -200,1 +210,1 @@\n-                        shadow.put(buf);\n+                        shadow.put(shadow.position(), buf, pos, rem);\n@@ -203,1 +213,0 @@\n-                        buf.position(pos);  \/\/ temporarily restore position in user buffer\n@@ -211,0 +220,1 @@\n+                    writevLen += rem;\n@@ -583,0 +593,2 @@\n+    static native long writevMax();\n+\n@@ -596,0 +608,1 @@\n+        WRITEV_MAX = writevMax();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/IOUtil.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+#include \"java_lang_Long.h\"\n@@ -176,0 +177,23 @@\n+JNIEXPORT jlong JNICALL\n+Java_sun_nio_ch_IOUtil_writevMax(JNIEnv *env, jclass this)\n+{\n+#if defined(MACOSX) || defined(__linux__)\n+    \/\/\n+    \/\/ The man pages of writev() on both Linux and macOS specify this\n+    \/\/ constraint on the sum of all byte lengths in the iovec array:\n+    \/\/\n+    \/\/ [EINVAL] The sum of the iov_len values in the iov array\n+    \/\/          overflows a 32-bit integer.\n+    \/\/\n+    \/\/ As of macOS 11 Big Sur, Darwin version 20, writev() started to\n+    \/\/ actually enforce the constraint which had been previously ignored.\n+    \/\/\n+    \/\/ In practice on Linux writev() has been observed not to write more\n+    \/\/ than 0x7fff0000 (aarch64) or 0x7ffff000 (x64) bytes in one call.\n+    \/\/\n+    return java_lang_Integer_MAX_VALUE;\n+#else\n+    return java_lang_Long_MAX_VALUE;\n+#endif\n+}\n+\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/IOUtil.c","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"java_lang_Long.h\"\n@@ -80,0 +81,5 @@\n+JNIEXPORT jlong JNICALL\n+Java_sun_nio_ch_IOUtil_writevMax(JNIEnv *env, jclass this)\n+{\n+    return java_lang_Long_MAX_VALUE;\n+}\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/IOUtil.c","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8274548\n+ * @summary Test gathering write of more than INT_MAX bytes\n+ * @library ..\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.RandomFactory\n+ * @run main\/othervm -Xmx4G LargeGatheringWrite\n+ * @key randomness\n+ *\/\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Random;\n+\n+import jdk.test.lib.RandomFactory;\n+\n+import static java.nio.file.StandardOpenOption.CREATE;\n+import static java.nio.file.StandardOpenOption.READ;\n+import static java.nio.file.StandardOpenOption.WRITE;\n+\n+public class LargeGatheringWrite {\n+    private static final int GB = 1024*1024*1024;\n+\n+    private static final Random RND = RandomFactory.getRandom();\n+\n+    public static void main(String[] args) throws IOException {\n+        \/\/ Create direct and heap buffers\n+        ByteBuffer direct = ByteBuffer.allocateDirect(GB);\n+        ByteBuffer heap   = ByteBuffer.allocate(GB);\n+\n+        \/\/ Load buffers with random values\n+        assert heap.hasArray();\n+        RND.nextBytes(heap.array());\n+        direct.put(0, heap, 0, heap.capacity());\n+\n+        \/\/ Create an array of buffers derived from direct and heap\n+        ByteBuffer[] bigBuffers = new ByteBuffer[] {\n+            direct,\n+            heap,\n+            direct.slice(0, GB\/2),\n+            heap.slice(0, GB\/2),\n+            direct.slice(GB\/2, GB\/2),\n+            heap.slice(GB\/2, GB\/2),\n+            direct.slice(GB\/4, GB\/2),\n+            heap.slice(GB\/4, GB\/2),\n+            direct.slice(0, 1),\n+            heap.slice(GB - 2, 1)\n+        };\n+\n+        \/\/ Calculate the sum of all buffer capacities\n+        long totalLength = 0L;\n+        for(ByteBuffer buf : bigBuffers)\n+            totalLength += buf.capacity();\n+\n+        \/\/ Write the data to a temporary file\n+        Path tempFile = Files.createTempFile(\"LargeGatheringWrite\", \".dat\");\n+\n+        System.out.printf(\"Writing %d bytes of data...%n\", totalLength);\n+        try (FileChannel fcw = FileChannel.open(tempFile, CREATE, WRITE);) {\n+            \/\/ Print size of individual writes and total number written\n+            long bytesWritten = 0;\n+            long n;\n+            while ((n = fcw.write(bigBuffers)) > 0) {\n+                System.out.printf(\"Wrote %d bytes\\n\", n);\n+                bytesWritten += n;\n+            }\n+            System.out.printf(\"Total of %d bytes written\\n\", bytesWritten);\n+\n+            \/\/ Verify the content written\n+            try (FileChannel fcr = FileChannel.open(tempFile, READ);) {\n+                byte[] bytes = null;\n+                for (ByteBuffer buf : bigBuffers) {\n+                    \/\/ For each buffer read the corresponding number of bytes\n+                    buf.rewind();\n+                    int length = buf.remaining();\n+                    System.out.printf(\"Checking length %d%n\", length);\n+                    if (bytes == null || bytes.length < length)\n+                        bytes = new byte[length];\n+                    ByteBuffer dst = ByteBuffer.wrap(bytes).slice(0, length);\n+                    if (dst.remaining() != length)\n+                        throw new RuntimeException(\"remaining\");\n+                    if (fcr.read(dst) != length)\n+                        throw new RuntimeException(\"length\");\n+                    dst.rewind();\n+\n+                    \/\/ Verify that the bytes read from the file match the buffer\n+                    int mismatch;\n+                    if ((mismatch = dst.mismatch(buf)) != -1) {\n+                        String msg = String.format(\"mismatch: %d%n\", mismatch);\n+                        throw new RuntimeException(msg);\n+                    }\n+                }\n+            }\n+        } finally {\n+            Files.delete(tempFile);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/LargeGatheringWrite.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"}]}