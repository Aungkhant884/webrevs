{"files":[{"patch":"@@ -316,1 +316,5 @@\n-        String line = (source == null ? null : source.getLine(pos));\n+        String line;\n+        if (source == null)\n+            line = null;\n+        else if ((line = source.getLine(pos)) == null)\n+            line = source.getLine(pos - 1);\n@@ -321,0 +325,2 @@\n+        if (col == 0)\n+            col = source.getColumnNumber(pos - 1, false);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/AbstractDiagnosticFormatter.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-            return bp <= bufLen;\n+            return bp < bufLen;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/DiagnosticSource.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -462,2 +462,9 @@\n-                line = source.getLineNumber(n);\n-                column = source.getColumnNumber(n, true);\n+                int lineNum = source.getLineNumber(n);\n+                int colNum = source.getColumnNumber(n, true);\n+                if (lineNum == 0) {\n+                    line = source.getLineNumber(n - 1);\n+                    column = source.getColumnNumber(n - 1, true);\n+                } else {\n+                    line = lineNum;\n+                    column = colNum;\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/JCDiagnostic.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -590,1 +590,5 @@\n-        String line = (source == null ? null : source.getLine(pos));\n+        String line;\n+        if (source == null)\n+            line = null;\n+        else if ((line = source.getLine(pos)) == null)\n+            line = source.getLine(pos - 1);\n@@ -594,0 +598,2 @@\n+        if (col == 0)\n+            col = source.getColumnNumber(pos - 1, false);\n@@ -849,0 +855,2 @@\n+            if (line == 0)\n+                line = source.getLineNumber(pos - 1);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Log.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -80,0 +80,4 @@\n+            if (expLine == 0) {\n+                expLine = diagSource.getLineNumber(exp.pos - 1);\n+                expCol = diagSource.getColumnNumber(exp.pos - 1, false);\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/RawDiagnosticFormatter.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8266625\n+ * @summary The method DiagnosticSource#findLine returns wrong results when using the boundary values\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox\n+ * @run main DiagnosticSourceTest\n+ *\/\n+\n+import javax.tools.ToolProvider;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.sun.tools.javac.util.DiagnosticSource;\n+import static com.sun.tools.javac.util.LayoutCharacters.*;\n+import toolbox.ToolBox;\n+\n+public class DiagnosticSourceTest {\n+    public static void main(String[] args) {\n+        ToolBox tb = new ToolBox();\n+\n+        String code = \"public class T {\\n}\"; \/\/ 18 characters\n+        var fileObject = new ToolBox.JavaSource(code);\n+        DiagnosticSource ds = new DiagnosticSource(fileObject, null);\n+        tb.checkEqual(Arrays.asList(\"1\", \"1\", \"public class T {\"), getActualOutputList(ds, 0));\n+        tb.checkEqual(Arrays.asList(\"1\", \"4\", \"public class T {\"), getActualOutputList(ds, 3));\n+        tb.checkEqual(Arrays.asList(\"2\", \"1\", \"}\"), getActualOutputList(ds, 17));\n+        tb.checkEqual(Arrays.asList(\"0\", \"0\", null), getActualOutputList(ds,18));\n+        tb.checkEqual(Arrays.asList(\"0\", \"0\", null), getActualOutputList(ds, 19));\n+        tb.checkEqual(Arrays.asList(\"0\", \"0\", null), getActualOutputList(ds, 20));\n+\n+        code = \"public class T {\\n}\\n\"; \/\/ 19 characters\n+        fileObject = new ToolBox.JavaSource(code);\n+        ds = new DiagnosticSource(fileObject, null);\n+        tb.checkEqual(Arrays.asList(\"1\", \"1\", \"public class T {\"), getActualOutputList(ds, 0));\n+        tb.checkEqual(Arrays.asList(\"1\", \"4\", \"public class T {\"), getActualOutputList(ds, 3));\n+        tb.checkEqual(Arrays.asList(\"2\", \"1\", \"}\"), getActualOutputList(ds, 17));\n+        tb.checkEqual(Arrays.asList(\"2\", \"2\", \"}\"), getActualOutputList(ds, 18));\n+        tb.checkEqual(Arrays.asList(\"0\", \"0\", null), getActualOutputList(ds, 19));\n+        tb.checkEqual(Arrays.asList(\"0\", \"0\", null), getActualOutputList(ds, 20));\n+    }\n+\n+    public static List<String> getActualOutputList(DiagnosticSource ds, int pos) {\n+        return Arrays.asList(\n+                Integer.toString(ds.getLineNumber(pos)),\n+                Integer.toString(ds.getColumnNumber(pos, false)),\n+                ds.getLine(pos));\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/DiagnosticSourceTest.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -419,1 +419,1 @@\n-                \"                 ^\\n\" +\n+                \"                ^\\n\" +\n","filename":"test\/langtools\/tools\/javac\/launcher\/SourceLauncherTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-Error.java:10:1: compiler.err.premature.eof\n+Error.java:9:22: compiler.err.premature.eof\n","filename":"test\/langtools\/tools\/javac\/rawDiags\/Error.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}