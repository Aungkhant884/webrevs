{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @run testng\/othervm\/timeout=20 SRTest\n@@ -34,0 +35,5 @@\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Stream;\n@@ -35,0 +41,1 @@\n+import org.testng.annotations.*;\n@@ -38,0 +45,1 @@\n+    ExecutorService executorService;\n@@ -40,2 +48,3 @@\n-    public static void main(String[] args) throws Exception {\n-        test();\n+    @BeforeClass\n+    public void beforeClass() {\n+        executorService = Executors.newCachedThreadPool();\n@@ -44,3 +53,4 @@\n-    static void test() throws Exception {\n-        ClassicReader classicReader;\n-        NioReader nioReader;\n+    @AfterClass\n+    public void afterClass() {\n+        executorService.shutdown();\n+    }\n@@ -48,2 +58,6 @@\n-        classicReader = new ClassicReader();\n-        invoke(classicReader, new ClassicWriter(classicReader.port()));\n+    @Test\n+    public void classicReaderClassicWriter() throws Exception {\n+        try (ClassicReader cr = new ClassicReader();\n+             ClassicWriter cw = new ClassicWriter(cr.port())) {\n+            invoke(executorService, cr, cw);\n+        }\n@@ -51,0 +65,1 @@\n+    }\n@@ -52,2 +67,6 @@\n-        classicReader = new ClassicReader();\n-        invoke(classicReader, new NioWriter(classicReader.port()));\n+    @Test\n+    public void classicReaderNioWriter() throws Exception {\n+        try (ClassicReader cr = new ClassicReader();\n+             NioWriter nw = new NioWriter(cr.port())) {\n+            invoke(executorService, cr, nw);\n+        }\n@@ -55,0 +74,1 @@\n+    }\n@@ -56,2 +76,6 @@\n-        nioReader = new NioReader();\n-        invoke(nioReader, new ClassicWriter(nioReader.port()));\n+    @Test\n+    public void nioReaderClassicWriter() throws Exception {\n+        try (NioReader nr = new NioReader();\n+             ClassicWriter cw = new ClassicWriter(nr.port())) {\n+            invoke(executorService, nr, cw);\n+        }\n@@ -59,0 +83,1 @@\n+    }\n@@ -60,2 +85,6 @@\n-        nioReader = new NioReader();\n-        invoke(nioReader, new NioWriter(nioReader.port()));\n+    @Test\n+    public void nioReaderNioWriter() throws Exception {\n+        try (NioReader nr = new NioReader();\n+             NioWriter nw = new NioWriter(nr.port())) {\n+            invoke(executorService, nr, nw);\n+        }\n@@ -65,13 +94,4 @@\n-    static void invoke(Sprintable reader, Sprintable writer) throws Exception {\n-        Thread readerThread = new Thread(reader);\n-        readerThread.start();\n-        Thread.sleep(50);\n-\n-        Thread writerThread = new Thread(writer);\n-        writerThread.start();\n-\n-        writerThread.join();\n-        readerThread.join();\n-\n-        reader.throwException();\n-        writer.throwException();\n+    private static void invoke(ExecutorService e, Runnable reader, Runnable writer) {\n+        CompletableFuture<Void> f1 = CompletableFuture.runAsync(writer, e);\n+        CompletableFuture<Void> f2 = CompletableFuture.runAsync(reader, e);\n+        wait(f1, f2);\n@@ -80,2 +100,9 @@\n-    public interface Sprintable extends Runnable {\n-        public void throwException() throws Exception;\n+    \/\/ Exit with CompletionException if any passed futures complete exceptionally\n+    private static void wait(CompletableFuture<?>... futures) throws CompletionException {\n+        CompletableFuture<?> future = CompletableFuture.allOf(futures);\n+        Stream.of(futures)\n+                .forEach(f -> f.exceptionally(ex -> {\n+                    future.completeExceptionally(ex);\n+                    return null;\n+                }));\n+        future.join();\n@@ -84,1 +111,2 @@\n-    public static class ClassicWriter implements Sprintable {\n+    public static class ClassicWriter implements Runnable, AutoCloseable {\n+        final DatagramSocket ds;\n@@ -86,1 +114,0 @@\n-        Exception e = null;\n@@ -88,1 +115,1 @@\n-        ClassicWriter(int port) {\n+        ClassicWriter(int port) throws SocketException {\n@@ -90,5 +117,1 @@\n-        }\n-\n-        public void throwException() throws Exception {\n-            if (e != null)\n-                throw e;\n+            this.ds = new DatagramSocket();\n@@ -99,1 +122,0 @@\n-                DatagramSocket ds = new DatagramSocket();\n@@ -102,1 +124,1 @@\n-                InetAddress address = InetAddress.getLocalHost();\n+                InetAddress address = InetAddress.getLoopbackAddress();\n@@ -108,2 +130,5 @@\n-            } catch (Exception ex) {\n-                e = ex;\n+            } catch (Exception e) {\n+                log.println(\"ClassicWriter [\" + ds.getLocalAddress() + \"]\");\n+                throw new RuntimeException(\"ClassicWriter threw exception: \" + e);\n+            } finally {\n+                log.println(\"ClassicWriter finished\");\n@@ -112,0 +137,5 @@\n+\n+        @Override\n+        public void close() throws IOException {\n+            ds.close();\n+        }\n@@ -114,1 +144,2 @@\n-    public static class NioWriter implements Sprintable {\n+    public static class NioWriter implements Runnable, AutoCloseable {\n+        final DatagramChannel dc;\n@@ -116,1 +147,0 @@\n-        Exception e = null;\n@@ -118,1 +148,2 @@\n-        NioWriter(int port) {\n+        NioWriter(int port) throws IOException {\n+            this.dc = DatagramChannel.open();\n@@ -122,5 +153,0 @@\n-        public void throwException() throws Exception {\n-            if (e != null)\n-                throw e;\n-        }\n-\n@@ -133,1 +159,1 @@\n-                InetAddress address = InetAddress.getLocalHost();\n+                InetAddress address = InetAddress.getLoopbackAddress();\n@@ -139,1 +165,4 @@\n-                e = ex;\n+                log.println(\"ClassicWriter [\" + dc.socket().getLocalAddress() + \"]\");\n+                throw new RuntimeException(\"NioWriter threw exception: \" + ex);\n+            } finally {\n+                log.println(\"NioWriter Finished\");\n@@ -142,0 +171,5 @@\n+\n+        @Override\n+        public void close() throws IOException {\n+            dc.close();\n+        }\n@@ -144,1 +178,1 @@\n-    public static class ClassicReader implements Sprintable {\n+    public static class ClassicReader implements Runnable, AutoCloseable {\n@@ -146,1 +180,0 @@\n-        Exception e = null;\n@@ -149,1 +182,2 @@\n-            this.ds = new DatagramSocket();\n+            InetSocketAddress address = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n+            this.ds = new DatagramSocket(address);\n@@ -156,5 +190,0 @@\n-        public void throwException() throws Exception {\n-            if (e != null)\n-                throw e;\n-        }\n-\n@@ -167,2 +196,1 @@\n-                log.println(received);\n-                ds.close();\n+                log.println(\"ClassicReader received: \" + received);\n@@ -170,1 +198,4 @@\n-                e = ex;\n+                log.println(\"ClassicWriter [\" + ds.getLocalAddress() +\"]\");\n+                throw new RuntimeException(\"ClassicReader threw exception: \" + ex);\n+            } finally {\n+                log.println(\"ClassicReader finished\");\n@@ -173,0 +204,5 @@\n+\n+        @Override\n+        public void close() throws IOException {\n+            ds.close();\n+        }\n@@ -175,1 +211,1 @@\n-    public static class NioReader implements Sprintable {\n+    public static class NioReader implements Runnable, AutoCloseable {\n@@ -177,1 +213,0 @@\n-        Exception e = null;\n@@ -180,1 +215,2 @@\n-            this.dc = DatagramChannel.open().bind(new InetSocketAddress(0));\n+            InetSocketAddress address = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n+            this.dc = DatagramChannel.open().bind(address);\n@@ -187,5 +223,0 @@\n-        public void throwException() throws Exception {\n-            if (e != null)\n-                throw e;\n-        }\n-\n@@ -197,4 +228,2 @@\n-                CharBuffer cb = Charset.forName(\"US-ASCII\").\n-                    newDecoder().decode(bb);\n-                log.println(\"From: \"+sa+ \" said \" +cb);\n-                dc.close();\n+                CharBuffer cb = StandardCharsets.US_ASCII.newDecoder().decode(bb);\n+                log.println(\"NioReader received: \" + cb);\n@@ -202,1 +231,4 @@\n-                e = ex;\n+                log.println(\"ClassicWriter [\" + dc.socket().getLocalAddress() +\"]\");\n+                throw new RuntimeException(\"NioReader threw exception: \" + ex);\n+            } finally {\n+                log.println(\"NioReader finished\");\n@@ -205,1 +237,0 @@\n-    }\n@@ -207,0 +238,5 @@\n+        @Override\n+        public void close() throws IOException {\n+            dc.close();\n+        }\n+    }\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/SRTest.java","additions":112,"deletions":76,"binary":false,"changes":188,"status":"modified"}]}