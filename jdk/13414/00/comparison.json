{"files":[{"patch":"@@ -112,1 +112,1 @@\n-        if ((availinfo & ImageObserver.ERROR) == 0 && missinginfo != 0) {\n+        if ((availinfo & (ImageObserver.ERROR |  ImageObserver.FRAMEBITS) ) == 0 && missinginfo != 0) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/ImageRepresentation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,184 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 6176679\n+ * @summary Tests that an application doesn't freeze when copying an animated gif image to the system clipboard\n+ * @run main bug6176679\n+ *\/\n+\n+import java.awt.*;\n+import java.awt.datatransfer.*;\n+import java.io.File;\n+import java.util.concurrent.CountDownLatch;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+\n+public class bug6176679 implements ClipboardOwner, FlavorListener {\n+    private static final long TIMEOUT = 10000;\n+\n+    private static final String FILENAME = \"cupanim.gif\";\n+\n+    private static final CountDownLatch latch = new CountDownLatch(1);\n+\n+    volatile static Image img = null;\n+\n+    private static Frame frame;\n+\n+    volatile static bug6176679 test;\n+\n+    private void createGUI() throws InterruptedException {\n+\n+        frame = new Frame(\"bug6176679\");\n+        frame.setSize(400, 200);\n+\n+        imgCanvas canvas = new imgCanvas();\n+        Panel panel = new Panel(new GridLayout(1, 1));\n+        panel.add(canvas);\n+        frame.add(panel);\n+        img = frame.getToolkit().getImage(System.getProperty(\"test.src\", \".\") + File.separator + FILENAME);\n+        MediaTracker mt = new MediaTracker(frame);\n+        mt.addImage(img, 0);\n+        mt.waitForAll();\n+        canvas.setImage(img);\n+        canvas.setBackground(Color.blue);\n+        frame.setVisible(true);\n+    }\n+\n+    private void copyImage() {\n+        Clipboard sys = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        sys.addFlavorListener(this);\n+        sys.setContents(new MyTransferable(img), this);\n+\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        test = new bug6176679();\n+\n+        Robot robot = new Robot();\n+\n+        EventQueue.invokeAndWait(() -> {\n+            try {\n+                test.createGUI();\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+        });\n+\n+        robot.waitForIdle();\n+        robot.delay(1000);\n+\n+        EventQueue.invokeLater(() -> {\n+            try {\n+                test.copyImage();\n+                latch.countDown();\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+        });\n+\n+        if (!latch.await(TIMEOUT, MILLISECONDS)) {\n+            throw new RuntimeException(\"Image copying taking too long.\");\n+        }\n+        else\n+        {\n+            EventQueue.invokeAndWait(bug6176679::dispose);\n+        }\n+\n+    }\n+\n+    private static void dispose() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+    @Override\n+    public void lostOwnership(Clipboard c, Transferable t) {\n+    }\n+\n+    @Override\n+    public void flavorsChanged(FlavorEvent fe) {\n+\n+    }\n+\n+    static class imgCanvas extends Canvas {\n+        Image img = null;\n+\n+        public imgCanvas() {\n+        }\n+\n+        public void setImage(Image i) {\n+            img = i;\n+            repaint();\n+        }\n+\n+        @Override\n+        public void paint(Graphics g) {\n+            if (img != null) {\n+                g.drawImage(img, 0, 0, getSize().width, getSize().height, this);\n+            } else {\n+                g.setColor(getBackground());\n+                g.fillRect(0, 0, getSize().width, getSize().height);\n+            }\n+        }\n+    }\n+\n+    static class MyTransferable implements Transferable {\n+\n+        Image img = null;\n+        DataFlavor[] df = new DataFlavor[1];\n+\n+        public MyTransferable(Object obj) {\n+            if (obj instanceof Image) {\n+                img = (Image) obj;\n+                df = new DataFlavor[1];\n+                df[0] = DataFlavor.imageFlavor;\n+            }\n+        }\n+\n+        @Override\n+        public DataFlavor[] getTransferDataFlavors() {\n+            return df;\n+        }\n+\n+        public boolean isDataFlavorSupported(DataFlavor flavor) {\n+            return true;\n+        }\n+\n+        public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException {\n+            if (!isDataFlavorSupported(flavor)) {\n+                throw new UnsupportedFlavorException(flavor);\n+            }\n+            return img;\n+        }\n+    }\n+\n+\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/imageio\/plugins\/gif\/6176679\/bug6176679.java","additions":184,"deletions":0,"binary":false,"changes":184,"status":"added"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/gif\/6176679\/cupanim.gif","binary":true,"status":"added"}]}