{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,1 +112,2 @@\n-        if ((availinfo & ImageObserver.ERROR) == 0 && missinginfo != 0) {\n+        if ((availinfo & (ImageObserver.ERROR | ImageObserver.FRAMEBITS)) == 0\n+            && missinginfo != 0) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/ImageRepresentation.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,165 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.util.concurrent.CountDownLatch;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 6176679\n+ * @summary Tests that an application doesn't freeze when copying an animated\n+ * gif image to the system clipboard\n+ * @run main CopyAnimatedGIFTest\n+ *\/\n+\n+public class CopyAnimatedGIFTest {\n+    private static final long TIMEOUT = 10000;\n+    private static final CountDownLatch latch = new CountDownLatch(1);\n+    private Image img;\n+    private static Frame frame;\n+    private static final byte[] imageData = {\n+            (byte) 0x47, (byte) 0x49, (byte) 0x46, (byte) 0x38, (byte) 0x39,\n+            (byte) 0x61, (byte) 0x04, (byte) 0x00, (byte) 0x04, (byte) 0x00,\n+            (byte) 0xa1, (byte) 0x03, (byte) 0x00, (byte) 0xff, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0xff, (byte) 0x00, (byte) 0xff,\n+            (byte) 0xff, (byte) 0x00, (byte) 0xff, (byte) 0xff, (byte) 0xff,\n+            (byte) 0x21, (byte) 0xff, (byte) 0x0b, (byte) 0x4e, (byte) 0x45,\n+            (byte) 0x54, (byte) 0x53, (byte) 0x43, (byte) 0x41, (byte) 0x50,\n+            (byte) 0x45, (byte) 0x32, (byte) 0x2e, (byte) 0x30, (byte) 0x03,\n+            (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x21,\n+            (byte) 0xf9, (byte) 0x04, (byte) 0x00, (byte) 0x0a, (byte) 0x00,\n+            (byte) 0xff, (byte) 0x00, (byte) 0x2c, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x04,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x04, (byte) 0x84,\n+            (byte) 0x8f, (byte) 0x09, (byte) 0x05, (byte) 0x00, (byte) 0x21,\n+            (byte) 0xf9, (byte) 0x04, (byte) 0x01, (byte) 0x0a, (byte) 0x00,\n+            (byte) 0x03, (byte) 0x00, (byte) 0x2c, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x04,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x04, (byte) 0x94,\n+            (byte) 0x8f, (byte) 0x29, (byte) 0x05, (byte) 0x00, (byte) 0x21,\n+            (byte) 0xf9, (byte) 0x04, (byte) 0x01, (byte) 0x0a, (byte) 0x00,\n+            (byte) 0x03, (byte) 0x00, (byte) 0x2c, (byte) 0x00, (byte) 0x00,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x04,\n+            (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x04, (byte) 0x8c,\n+            (byte) 0x8f, (byte) 0x19, (byte) 0x05, (byte) 0x00, (byte) 0x3b\n+    };\n+    private void createGUI() {\n+\n+        img = Toolkit.getDefaultToolkit().createImage(imageData);\n+\n+        imgCanvas canvas = new imgCanvas(img);\n+        canvas.setBackground(Color.BLUE);\n+\n+        frame = new Frame(\"CopyAnimatedGIFTest\");\n+        frame.setSize(400, 200);\n+        frame.add(canvas);\n+        frame.setVisible(true);\n+    }\n+    private void copyImage() {\n+        Clipboard sys = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        sys.setContents(new MyTransferable(img), null);\n+\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        final CopyAnimatedGIFTest test = new CopyAnimatedGIFTest();\n+\n+        Robot robot = new Robot();\n+\n+        EventQueue.invokeAndWait(test::createGUI);\n+\n+        robot.waitForIdle();\n+        robot.delay(1000);\n+\n+        EventQueue.invokeLater(() -> {\n+            test.copyImage();\n+            latch.countDown();\n+        });\n+\n+        if (!latch.await(TIMEOUT, MILLISECONDS)) {\n+            throw new RuntimeException(\"Image copying taking too long.\");\n+        } else {\n+            EventQueue.invokeAndWait(CopyAnimatedGIFTest::dispose);\n+        }\n+    }\n+    private static void dispose() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+    private static class imgCanvas extends Canvas {\n+        private final Image img;\n+        public imgCanvas(Image img) {\n+            this.img = img;\n+        }\n+\n+        @Override\n+        public void paint(Graphics g) {\n+            g.drawImage(img, 0, 0, getSize().width, getSize().height, this);\n+        }\n+    }\n+    private static class MyTransferable implements Transferable {\n+        private final Image img;\n+        private final DataFlavor[] flavors = {DataFlavor.imageFlavor};\n+\n+        public MyTransferable(Image img) {\n+            this.img = img;\n+        }\n+\n+        @Override\n+        public DataFlavor[] getTransferDataFlavors() {\n+            return flavors;\n+        }\n+\n+        @Override\n+        public boolean isDataFlavorSupported(DataFlavor flavor) {\n+            return flavors[0].equals(flavor);\n+        }\n+\n+        @Override\n+        public Object getTransferData(DataFlavor flavor)\n+                throws UnsupportedFlavorException {\n+            if (!isDataFlavorSupported(flavor)) {\n+                throw new UnsupportedFlavorException(flavor);\n+            }\n+            return img;\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/imageio\/plugins\/gif\/6176679\/CopyAnimatedGIFTest.java","additions":165,"deletions":0,"binary":false,"changes":165,"status":"added"}]}