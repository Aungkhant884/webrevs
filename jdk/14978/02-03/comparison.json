{"files":[{"patch":"@@ -109,1 +109,1 @@\n-        awaitParked(thread);\n+        await(thread, Thread.State.WAITING);\n@@ -133,1 +133,1 @@\n-            awaitBlocked(thread);\n+            await(thread, Thread.State.BLOCKED);\n@@ -163,1 +163,1 @@\n-            awaitParked(thread);\n+            await(thread, Thread.State.WAITING);\n@@ -768,0 +768,1 @@\n+            thread.join();\n@@ -900,1 +901,1 @@\n-        awaitParked(thread);\n+        await(thread, Thread.State.TIMED_WAITING);\n@@ -920,1 +921,1 @@\n-        awaitParked(thread);\n+        await(thread, Thread.State.WAITING);\n@@ -1035,1 +1036,1 @@\n-            assertTrue(me.getPriority() == Thread.NORM_PRIORITY);\n+            assertEquals(Thread.NORM_PRIORITY, me.getPriority());\n@@ -1038,1 +1039,1 @@\n-            assertTrue(me.getPriority() == Thread.NORM_PRIORITY);\n+            assertEquals(Thread.NORM_PRIORITY, me.getPriority());\n@@ -1041,1 +1042,1 @@\n-            assertTrue(me.getPriority() == Thread.NORM_PRIORITY);\n+            assertEquals(Thread.NORM_PRIORITY, me.getPriority());\n@@ -1044,1 +1045,1 @@\n-            assertTrue(me.getPriority() == Thread.NORM_PRIORITY);\n+            assertEquals(Thread.NORM_PRIORITY, me.getPriority());\n@@ -1058,1 +1059,1 @@\n-        assertTrue(thread.getPriority() == Thread.NORM_PRIORITY);\n+        assertEquals(Thread.NORM_PRIORITY, thread.getPriority());\n@@ -1061,1 +1062,1 @@\n-        assertTrue(thread.getPriority() == Thread.NORM_PRIORITY);\n+        assertEquals(Thread.NORM_PRIORITY, thread.getPriority());\n@@ -1064,1 +1065,1 @@\n-        assertTrue(thread.getPriority() == Thread.NORM_PRIORITY);\n+        assertEquals(Thread.NORM_PRIORITY, thread.getPriority());\n@@ -1067,1 +1068,1 @@\n-        assertTrue(thread.getPriority() == Thread.NORM_PRIORITY);\n+        assertEquals(Thread.NORM_PRIORITY, thread.getPriority());\n@@ -1074,1 +1075,1 @@\n-            assertTrue(thread.getPriority() == Thread.NORM_PRIORITY);\n+            assertEquals(Thread.NORM_PRIORITY, thread.getPriority());\n@@ -1078,1 +1079,1 @@\n-            assertTrue(thread.getPriority() == Thread.NORM_PRIORITY);\n+            assertEquals(Thread.NORM_PRIORITY, thread.getPriority());\n@@ -1081,1 +1082,1 @@\n-            assertTrue(thread.getPriority() == Thread.NORM_PRIORITY);\n+            assertEquals(Thread.NORM_PRIORITY, thread.getPriority());\n@@ -1084,1 +1085,1 @@\n-            assertTrue(thread.getPriority() == Thread.NORM_PRIORITY);\n+            assertEquals(Thread.NORM_PRIORITY, thread.getPriority());\n@@ -1094,1 +1095,1 @@\n-        assertTrue(thread.getPriority() == Thread.NORM_PRIORITY);\n+        assertEquals(Thread.NORM_PRIORITY, thread.getPriority());\n@@ -1653,1 +1654,1 @@\n-     * Test Thread::getState when thread is not started.\n+     * Test Thread::getState when thread is new\/unstarted.\n@@ -1658,1 +1659,1 @@\n-        assertTrue(thread.getState() == Thread.State.NEW);\n+        assertEquals(Thread.State.NEW, thread.getState());\n@@ -1662,1 +1663,1 @@\n-     * Test Thread::getState when thread is runnable (mounted).\n+     * Test Thread::getState when thread is terminated.\n@@ -1666,3 +1667,19 @@\n-        VThreadRunner.run(() -> {\n-            Thread.State state = Thread.currentThread().getState();\n-            assertTrue(state == Thread.State.RUNNABLE);\n+        var thread = Thread.ofVirtual().start(() -> { });\n+        thread.join();\n+        assertEquals(Thread.State.TERMINATED, thread.getState());\n+    }\n+\n+    \/**\n+     * Test Thread::getState when thread is runnable (mounted).\n+     *\/\n+    @Test\n+    void testGetState3() throws Exception {\n+        var started = new CountDownLatch(1);\n+        var done = new AtomicBoolean();\n+        var thread = Thread.ofVirtual().start(() -> {\n+            started.countDown();\n+\n+            \/\/ spin until done\n+            while (!done.get()) {\n+                Thread.onSpinWait();\n+            }\n@@ -1670,0 +1687,10 @@\n+        try {\n+            \/\/ wait for thread to start\n+            started.await();\n+\n+            \/\/ thread should be runnable\n+            assertEquals(Thread.State.RUNNABLE, thread.getState());\n+        } finally {\n+            done.set(true);\n+            thread.join();\n+        }\n@@ -1676,1 +1703,1 @@\n-    void testGetState3() throws Exception {\n+    void testGetState4() throws Exception {\n@@ -1683,1 +1710,1 @@\n-                assertTrue(t2.getState() == Thread.State.NEW);\n+                assertEquals(Thread.State.NEW, t2.getState());\n@@ -1688,1 +1715,1 @@\n-                    assertTrue(t2.getState() == Thread.State.RUNNABLE);\n+                    assertEquals(Thread.State.RUNNABLE, t2.getState());\n@@ -1692,1 +1719,1 @@\n-                    assertTrue(t2.getState() == Thread.State.WAITING);\n+                    assertEquals(Thread.State.WAITING, t2.getState());\n@@ -1699,1 +1726,1 @@\n-                assertTrue(t2.getState() == Thread.State.RUNNABLE);\n+                assertEquals(Thread.State.RUNNABLE, t2.getState());\n@@ -1709,16 +1736,1 @@\n-     * Test Thread::getState when thread is parked.\n-     *\/\n-    @Test\n-    void testGetState4() throws Exception {\n-        var thread = Thread.ofVirtual().start(LockSupport::park);\n-        try {\n-            Thread.State state = awaitParked(thread);\n-            assertEquals(Thread.State.WAITING, state);\n-        } finally {\n-            LockSupport.unpark(thread);\n-            thread.join();\n-        }\n-    }\n-\n-    \/**\n-     * Test Thread::getState when thread is timed parked.\n+     * Test Thread::getState when thread is waiting to enter a monitor.\n@@ -1728,7 +1740,11 @@\n-        var thread = Thread.ofVirtual().start(() -> LockSupport.parkNanos(Long.MAX_VALUE));\n-        try {\n-            Thread.State state = awaitParked(thread);\n-            assertEquals(Thread.State.TIMED_WAITING, state);\n-        } finally {\n-            LockSupport.unpark(thread);\n-            thread.join();\n+        var started = new CountDownLatch(1);\n+        var thread = Thread.ofVirtual().unstarted(() -> {\n+            started.countDown();\n+            synchronized (lock) { }\n+        });\n+        synchronized (lock) {\n+            thread.start();\n+            started.await();\n+\n+            \/\/ wait for thread to block\n+            await(thread, Thread.State.BLOCKED);\n@@ -1736,0 +1752,1 @@\n+        thread.join();\n@@ -1739,1 +1756,1 @@\n-     * Test Thread::getState when thread is parked while holding a monitor.\n+     * Test Thread::getState when thread is waiting in Object.wait.\n@@ -1743,1 +1760,0 @@\n-        var done = new AtomicBoolean();\n@@ -1746,3 +1762,1 @@\n-                while (!done.get()) {\n-                    LockSupport.park();\n-                }\n+                try { lock.wait(); } catch (InterruptedException e) { }\n@@ -1752,2 +1766,2 @@\n-            Thread.State state = awaitParked(thread);\n-            assertEquals(Thread.State.WAITING, state);\n+            \/\/ wait for thread to wait\n+            await(thread, Thread.State.WAITING);\n@@ -1755,2 +1769,1 @@\n-            done.set(true);\n-            LockSupport.unpark(thread);\n+            thread.interrupt();\n@@ -1762,1 +1775,1 @@\n-     * Test Thread::getState when thread is timed parked while holding a monitor.\n+     * Test Thread::getState when thread is waiting in Object.wait(millis).\n@@ -1766,1 +1779,0 @@\n-        var done = new AtomicBoolean();\n@@ -1769,3 +1781,3 @@\n-                while (!done.get()) {\n-                    LockSupport.parkNanos(Long.MAX_VALUE);\n-                }\n+                try {\n+                    lock.wait(Long.MAX_VALUE);\n+                } catch (InterruptedException e) { }\n@@ -1775,2 +1787,2 @@\n-            Thread.State state = awaitParked(thread);\n-            assertEquals(Thread.State.TIMED_WAITING, state);\n+            \/\/ wait for thread to wait\n+            await(thread, Thread.State.TIMED_WAITING);\n@@ -1778,2 +1790,1 @@\n-            done.set(true);\n-            LockSupport.unpark(thread);\n+            thread.interrupt();\n@@ -1785,1 +1796,1 @@\n-     * Test Thread::getState when thread is waiting to enter a monitor.\n+     * Test Thread::getState when thread is parked.\n@@ -1789,6 +1800,6 @@\n-        var thread = Thread.ofVirtual().unstarted(() -> {\n-            synchronized (lock) { }\n-        });\n-        synchronized (lock) {\n-            thread.start();\n-            awaitBlocked(thread);  \/\/ await BLOCKED state\n+        var thread = Thread.ofVirtual().start(LockSupport::park);\n+        try {\n+            await(thread, Thread.State.WAITING);\n+        } finally {\n+            LockSupport.unpark(thread);\n+            thread.join();\n@@ -1796,1 +1807,0 @@\n-        thread.join();\n@@ -1800,1 +1810,1 @@\n-     * Test Thread::getState when thread is waiting in Object.wait.\n+     * Test Thread::getState when thread is timed parked.\n@@ -1804,5 +1814,1 @@\n-        var thread = Thread.ofVirtual().start(() -> {\n-            synchronized (lock) {\n-                try { lock.wait(); } catch (InterruptedException e) { }\n-            }\n-        });\n+        var thread = Thread.ofVirtual().start(() -> LockSupport.parkNanos(Long.MAX_VALUE));\n@@ -1810,2 +1816,1 @@\n-            Thread.State state = awaitParked(thread);\n-            assertEquals(Thread.State.WAITING, state);\n+            await(thread, Thread.State.TIMED_WAITING);\n@@ -1813,1 +1818,1 @@\n-            thread.interrupt();\n+            LockSupport.unpark(thread);\n@@ -1819,1 +1824,1 @@\n-     * Test Thread::getState when thread is waiting in Object.wait(millis).\n+     * Test Thread::getState when thread is parked while holding a monitor.\n@@ -1823,0 +1828,2 @@\n+        var started = new CountDownLatch(1);\n+        var done = new AtomicBoolean();\n@@ -1824,0 +1831,1 @@\n+            started.countDown();\n@@ -1825,3 +1833,3 @@\n-                try {\n-                    lock.wait(Long.MAX_VALUE);\n-                } catch (InterruptedException e) { }\n+                while (!done.get()) {\n+                    LockSupport.park();\n+                }\n@@ -1831,2 +1839,5 @@\n-            Thread.State state = awaitParked(thread);\n-            assertEquals(Thread.State.TIMED_WAITING, state);\n+            \/\/ wait for thread to start\n+            started.await();\n+\n+            \/\/ wait for thread to park\n+            await(thread, Thread.State.WAITING);\n@@ -1834,1 +1845,2 @@\n-            thread.interrupt();\n+            done.set(true);\n+            LockSupport.unpark(thread);\n@@ -1840,1 +1852,1 @@\n-     * Test Thread::getState when thread is terminated.\n+     * Test Thread::getState when thread is timed parked while holding a monitor.\n@@ -1844,3 +1856,21 @@\n-        var thread = Thread.ofVirtual().start(() -> { });\n-        thread.join();\n-        assertTrue(thread.getState() == Thread.State.TERMINATED);\n+        var started = new CountDownLatch(1);\n+        var done = new AtomicBoolean();\n+        var thread = Thread.ofVirtual().start(() -> {\n+            started.countDown();\n+            synchronized (lock) {\n+                while (!done.get()) {\n+                    LockSupport.parkNanos(Long.MAX_VALUE);\n+                }\n+            }\n+        });\n+        try {\n+            \/\/ wait for thread to start\n+            started.await();\n+\n+            \/\/ wait for thread to park\n+            await(thread, Thread.State.TIMED_WAITING);\n+        } finally {\n+            done.set(true);\n+            LockSupport.unpark(thread);\n+            thread.join();\n+        }\n@@ -1969,1 +1999,1 @@\n-            awaitParked(vthread);\n+            await(vthread, Thread.State.WAITING);\n@@ -1996,1 +2026,1 @@\n-        awaitParked(thread);\n+        await(thread, Thread.State.WAITING);\n@@ -2059,1 +2089,1 @@\n-            awaitParked(vthread);\n+            await(vthread, Thread.State.WAITING);\n@@ -2095,1 +2125,1 @@\n-            assertTrue(thread.getThreadGroup() == vgroup);\n+            assertEquals(vgroup, thread.getThreadGroup());\n@@ -2112,1 +2142,1 @@\n-            assertTrue(group == vgroup);\n+            assertEquals(vgroup, group);\n@@ -2129,1 +2159,1 @@\n-        assertTrue(vgroup.getMaxPriority() == Thread.MAX_PRIORITY);\n+        assertEquals(Thread.MAX_PRIORITY, vgroup.getMaxPriority());\n@@ -2133,1 +2163,1 @@\n-        assertTrue(group.getMaxPriority() == Thread.MAX_PRIORITY);\n+        assertEquals(Thread.MAX_PRIORITY, group.getMaxPriority());\n@@ -2136,2 +2166,2 @@\n-        assertTrue(vgroup.getMaxPriority() == Thread.MAX_PRIORITY);\n-        assertTrue(group.getMaxPriority() == Thread.MAX_PRIORITY - 1);\n+        assertEquals(Thread.MAX_PRIORITY, vgroup.getMaxPriority());\n+        assertEquals(Thread.MAX_PRIORITY - 1, group.getMaxPriority());\n@@ -2140,2 +2170,2 @@\n-        assertTrue(vgroup.getMaxPriority() == Thread.MAX_PRIORITY);\n-        assertTrue(group.getMaxPriority() == Thread.MIN_PRIORITY);\n+        assertEquals(Thread.MAX_PRIORITY, vgroup.getMaxPriority());\n+        assertEquals(Thread.MIN_PRIORITY, group.getMaxPriority());\n@@ -2152,2 +2182,1 @@\n-\n-            assertTrue(vgroup.getMaxPriority() == Thread.MAX_PRIORITY);\n+            assertEquals(Thread.MAX_PRIORITY, vgroup.getMaxPriority());\n@@ -2156,2 +2185,2 @@\n-            assertTrue(group.getParent() == vgroup);\n-            assertTrue(group.getMaxPriority() == Thread.MAX_PRIORITY);\n+            assertEquals(vgroup, group.getParent());\n+            assertEquals(Thread.MAX_PRIORITY, group.getMaxPriority());\n@@ -2160,2 +2189,2 @@\n-            assertTrue(vgroup.getMaxPriority() == Thread.MAX_PRIORITY);\n-            assertTrue(group.getMaxPriority() == Thread.MAX_PRIORITY - 1);\n+            assertEquals(Thread.MAX_PRIORITY, vgroup.getMaxPriority());\n+            assertEquals(Thread.MAX_PRIORITY - 1, group.getMaxPriority());\n@@ -2164,2 +2193,2 @@\n-            assertTrue(vgroup.getMaxPriority() == Thread.MAX_PRIORITY);\n-            assertTrue(group.getMaxPriority() == Thread.MIN_PRIORITY);\n+            assertEquals(Thread.MAX_PRIORITY, vgroup.getMaxPriority());\n+            assertEquals(Thread.MIN_PRIORITY, group.getMaxPriority());\n@@ -2269,1 +2298,1 @@\n-        awaitParked(thread);\n+        await(thread, Thread.State.WAITING);\n@@ -2292,14 +2321,1 @@\n-     * Waits for the given thread to park.\n-     *\/\n-    static Thread.State awaitParked(Thread thread) throws InterruptedException {\n-        Thread.State state = thread.getState();\n-        while (state != Thread.State.WAITING && state != Thread.State.TIMED_WAITING) {\n-            assertTrue(state != Thread.State.TERMINATED, \"Thread has terminated\");\n-            Thread.sleep(10);\n-            state = thread.getState();\n-        }\n-        return state;\n-    }\n-\n-    \/**\n-     * Waits for the given thread to block waiting on a monitor.\n+     * Waits for the given thread to reach a given state.\n@@ -2307,1 +2323,1 @@\n-    static void awaitBlocked(Thread thread) throws InterruptedException {\n+    private void await(Thread thread, Thread.State expectedState) throws InterruptedException {\n@@ -2309,1 +2325,1 @@\n-        while (state != Thread.State.BLOCKED) {\n+        while (state != expectedState) {\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ThreadAPI.java","additions":150,"deletions":134,"binary":false,"changes":284,"status":"modified"}]}