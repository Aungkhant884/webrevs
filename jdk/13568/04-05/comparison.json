{"files":[{"patch":"@@ -4560,2 +4560,2 @@\n-     * @param size the size of additional buffer\n-     * @return {@code null} if requested size is too large or there is not enough memory,\n+     * @param length the length of additional buffer\n+     * @return {@code null} if requested buffer is too big or there is not enough memory,\n@@ -4565,1 +4565,1 @@\n-    private static <T> T tryAllocate(final Class<T> clazz, final int size) {\n+    private static <T> T tryAllocate(final Class<T> clazz, final int length) {\n@@ -4567,4 +4567,4 @@\n-\t\t\tfinal int maxSize = MAX_BUFFER_SIZE >> (\n-\t\t\t\t((clazz == int[].class) || (clazz == float[].class)) ? 2 : 3);\n-            return (size > maxSize) ? null :\n-                (T) U.allocateUninitializedArray(clazz.componentType(), size);\n+            final int maxLength = MAX_BUFFER_SIZE >>\n+                ((clazz == int[].class || clazz == float[].class) ? 2 : 3);\n+            return (length > maxLength) ? null :\n+                (T) U.allocateUninitializedArray(clazz.componentType(), length);\n","filename":"src\/java.base\/share\/classes\/java\/util\/DualPivotQuicksort.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}