{"files":[{"patch":"@@ -121,1 +121,2 @@\n-     *      limited by max_heap \/ 64 or 2 GB max.\n+     *      limited by max_heap \/ 16 or 2 GB max,\n+     *      divide by 8 as (size * 8) bytes for long\/double type.\n@@ -124,1 +125,1 @@\n-            (int) Math.min(Runtime.getRuntime().maxMemory() >>> 6L, Integer.MAX_VALUE) >> 3; \/\/ div by 8 as (size * 8) bytes for long\/double type\n+            ( (int) Math.min(Runtime.getRuntime().maxMemory() >>> 4L, Integer.MAX_VALUE) ) >> 3;\n@@ -207,0 +208,3 @@\n+            \/*\n+             * Check large random data, taking into account parallel context.\n+             *\/\n@@ -246,9 +250,7 @@\n-            if (isRadixRandom) {\n-                \/*\n-                 * Try Radix sort on large fully random data,\n-                 * taking into account parallel context.\n-                 *\/\n-                if (a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5]\n-                        && tryRadixSort(sorter, a, low, high)) {\n-                    return;\n-                }\n+            \/*\n+             * Try Radix sort on large fully random data.\n+             *\/\n+            if (isRadixRandom\n+                    && (a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5])\n+                    && tryRadixSort(sorter, a, low, high)) {\n+                return;\n@@ -1064,0 +1066,3 @@\n+            \/*\n+             * Check large random data, taking into account parallel context.\n+             *\/\n@@ -1103,9 +1108,7 @@\n-            if (isRadixRandom) {\n-                \/*\n-                 * Try Radix sort on large fully random data,\n-                 * taking into account parallel context.\n-                 *\/\n-                if (a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5]\n-                        && tryRadixSort(sorter, a, low, high)) {\n-                    return;\n-                }\n+            \/*\n+             * Try Radix sort on large fully random data.\n+             *\/\n+            if (isRadixRandom\n+                    && (a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5])\n+                    && tryRadixSort(sorter, a, low, high)) {\n+                return;\n@@ -2721,0 +2724,3 @@\n+            \/*\n+             * Check large random data, taking into account parallel context.\n+             *\/\n@@ -2760,9 +2766,7 @@\n-            if (isRadixRandom) {\n-                \/*\n-                 * Try Radix sort on large fully random data,\n-                 * taking into account parallel context.\n-                 *\/\n-                if (a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5]\n-                        && tryRadixSort(sorter, a, low, high)) {\n-                    return;\n-                }\n+            \/*\n+             * Try Radix sort on large fully random data.\n+             *\/\n+            if (isRadixRandom\n+                    && (a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5])\n+                    && tryRadixSort(sorter, a, low, high)) {\n+                return;\n@@ -3608,0 +3612,3 @@\n+            \/*\n+             * Check large random data, taking into account parallel context.\n+             *\/\n@@ -3647,9 +3654,7 @@\n-            if (isRadixRandom) {\n-                \/*\n-                 * Try Radix sort on large fully random data,\n-                 * taking into account parallel context.\n-                 *\/\n-                if (a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5]\n-                        && tryRadixSort(sorter, a, low, high)) {\n-                    return;\n-                }\n+            \/*\n+             * Try Radix sort on large fully random data.\n+             *\/\n+            if (isRadixRandom\n+                    && (a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5])\n+                    && tryRadixSort(sorter, a, low, high)) {\n+                return;\n@@ -4559,1 +4564,1 @@\n-    *\/\n+     *\/\n","filename":"src\/java.base\/share\/classes\/java\/util\/DualPivotQuicksort.java","additions":44,"deletions":39,"binary":false,"changes":83,"status":"modified"}]}