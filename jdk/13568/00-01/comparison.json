{"files":[{"patch":"@@ -207,2 +207,3 @@\n-            boolean isRandom =\n-                a[e1] > a[e2] || a[e2] > a3 || a3 > a[e4] || a[e4] > a[e5];\n+            final boolean isRadixRandom = (size > MIN_RADIX_SORT_SIZE)\n+                && (sorter == null || bits > 0)\n+                && (a[e1] > a[e2] || a[e2] > a3 || a3 > a[e4] || a[e4] > a[e5]);\n@@ -245,9 +246,9 @@\n-            \/*\n-             * Try Radix sort on large fully random data,\n-             * taking into account parallel context.\n-             *\/\n-            isRandom &= a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5];\n-\n-            if (size > MIN_RADIX_SORT_SIZE && isRandom && (sorter == null || bits > 0)\n-                    && tryRadixSort(sorter, a, low, high)) {\n-                return;\n+            if (isRadixRandom) {\n+                \/*\n+                 * Try Radix sort on large fully random data,\n+                 * taking into account parallel context.\n+                 *\/\n+                if (a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5]\n+                        && tryRadixSort(sorter, a, low, high)) {\n+                    return;\n+                }\n@@ -1063,2 +1064,3 @@\n-            boolean isRandom =\n-                a[e1] > a[e2] || a[e2] > a3 || a3 > a[e4] || a[e4] > a[e5];\n+            final boolean isRadixRandom = (size > MIN_RADIX_SORT_SIZE)\n+                && (sorter == null || bits > 0)\n+                && (a[e1] > a[e2] || a[e2] > a3 || a3 > a[e4] || a[e4] > a[e5]);\n@@ -1101,9 +1103,9 @@\n-            \/*\n-             * Try Radix sort on large fully random data,\n-             * taking into account parallel context.\n-             *\/\n-            isRandom &= a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5];\n-\n-            if (size > MIN_RADIX_SORT_SIZE && isRandom && (sorter == null || bits > 0)\n-                    && tryRadixSort(sorter, a, low, high)) {\n-                return;\n+            if (isRadixRandom) {\n+                \/*\n+                 * Try Radix sort on large fully random data,\n+                 * taking into account parallel context.\n+                 *\/\n+                if (a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5]\n+                        && tryRadixSort(sorter, a, low, high)) {\n+                    return;\n+                }\n@@ -2719,2 +2721,3 @@\n-            boolean isRandom =\n-                a[e1] > a[e2] || a[e2] > a3 || a3 > a[e4] || a[e4] > a[e5];\n+            final boolean isRadixRandom = (size > MIN_RADIX_SORT_SIZE)\n+                && (sorter == null || bits > 0)\n+                && (a[e1] > a[e2] || a[e2] > a3 || a3 > a[e4] || a[e4] > a[e5]);\n@@ -2757,9 +2760,9 @@\n-            \/*\n-             * Try Radix sort on large fully random data,\n-             * taking into account parallel context.\n-             *\/\n-            isRandom &= a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5];\n-\n-            if (size > MIN_RADIX_SORT_SIZE && isRandom && (sorter == null || bits > 0)\n-                    && tryRadixSort(sorter, a, low, high)) {\n-                return;\n+            if (isRadixRandom) {\n+                \/*\n+                 * Try Radix sort on large fully random data,\n+                 * taking into account parallel context.\n+                 *\/\n+                if (a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5]\n+                        && tryRadixSort(sorter, a, low, high)) {\n+                    return;\n+                }\n@@ -3605,2 +3608,3 @@\n-            boolean isRandom =\n-                a[e1] > a[e2] || a[e2] > a3 || a3 > a[e4] || a[e4] > a[e5];\n+            final boolean isRadixRandom = (size > MIN_RADIX_SORT_SIZE)\n+                && (sorter == null || bits > 0)\n+                && (a[e1] > a[e2] || a[e2] > a3 || a3 > a[e4] || a[e4] > a[e5]);\n@@ -3643,9 +3647,9 @@\n-            \/*\n-             * Try Radix sort on large fully random data,\n-             * taking into account parallel context.\n-             *\/\n-            isRandom &= a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5];\n-\n-            if (size > MIN_RADIX_SORT_SIZE && isRandom && (sorter == null || bits > 0)\n-                    && tryRadixSort(sorter, a, low, high)) {\n-                return;\n+            if (isRadixRandom) {\n+                \/*\n+                 * Try Radix sort on large fully random data,\n+                 * taking into account parallel context.\n+                 *\/\n+                if (a[e1] < a[e2] && a[e2] < a[e3] && a[e3] < a[e4] && a[e4] < a[e5]\n+                        && tryRadixSort(sorter, a, low, high)) {\n+                    return;\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/util\/DualPivotQuicksort.java","additions":48,"deletions":44,"binary":false,"changes":92,"status":"modified"}]}