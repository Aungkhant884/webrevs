{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.awt.image.AbstractMultiResolutionImage;\n@@ -228,1 +229,1 @@\n-     *\n+     * <p>\n@@ -258,0 +259,49 @@\n+   \/**\n+    * Returns an icon for a file, directory, or folder as it would be displayed\n+    * in a system file browser for the requested size.\n+    * <p>\n+    * Example: <pre>\n+    *     FileSystemView fsv = FileSystemView.getFileSystemView();\n+    *     Icon icon = fsv.getSystemIcon(new File(\"application.exe\"), 64);\n+    *     JLabel label = new JLabel(icon);\n+    * <\/pre>\n+    * <p>\n+    * @implSpec The default implementation gets information from the\n+    * {@code ShellFolder} class. Whenever possible, the icon\n+    * returned is a multi-resolution icon image,\n+    * which allows better support for High DPI environments\n+    * with different scaling factors.\n+    *\n+    * @param f a {@code File} object\n+    * @param size width and height of the icon in virtual pixels\n+    * @return an icon as it would be displayed by a native file chooser\n+    * or null if invalid parameters are passed such as pointer to a\n+    * non-existing file.\n+    * @see JFileChooser#getIcon\n+    * @see AbstractMultiResolutionImage\n+    * @see FileSystemView#getSystemIcon(File)\n+    * @since 17\n+    *\/\n+    public Icon getSystemIcon(File f, int size) {\n+        if (f == null) {\n+            return null;\n+        }\n+\n+        ShellFolder sf;\n+\n+        try {\n+            sf = ShellFolder.getShellFolder(f);\n+        } catch (FileNotFoundException e) {\n+            return null;\n+        }\n+\n+        Image img = sf.getIcon(size);\n+\n+        if (img != null) {\n+            return new ImageIcon(img, sf.getFolderType());\n+        } else {\n+            return UIManager.getIcon(f.isDirectory() ? \"FileView.directoryIcon\"\n+                    : \"FileView.fileIcon\");\n+        }\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/filechooser\/FileSystemView.java","additions":52,"deletions":2,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -210,0 +210,9 @@\n+    \/**\n+     * Returns the icon of the specified size used to display this shell folder.\n+     *\n+     * @param size size of the icon > 0 (Valid range: 1 to 256)\n+     * @return The icon of the specified size used to display this shell folder\n+     *\/\n+    public Image getIcon(int size) {\n+        return null;\n+    }\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/shell\/ShellFolder.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -85,0 +85,10 @@\n+    static final int SMALL_ICON_SIZE = 16;\n+    static final int LARGE_ICON_SIZE = 32;\n+    static final int MIN_QUALITY_ICON = 16;\n+    static final int MAX_QUALITY_ICON = 256;\n+    private final static int[] ICON_RESOLUTIONS\n+            = {16, 24, 32, 48, 64, 72, 96, 128, 256};\n+\n+    static final int FILE_ICON_ID = 1;\n+    static final int FOLDER_ICON_ID = 4;\n+\n@@ -994,1 +1004,4 @@\n-                                           boolean getLargeIcon, boolean getDefaultIcon);\n+                                           int size, boolean getDefaultIcon);\n+\n+    \/\/ NOTE: this method uses COM and must be called on the 'COM thread'. See ComInvoker for the details\n+    private static native boolean hiResIconAvailable(long parentIShellFolder, long relativePIDL);\n@@ -999,3 +1012,1 @@\n-                                               int cxDesired, int cyDesired,\n-                                               boolean useVGAColors);\n-                                               \/\/ Note: useVGAColors is ignored on XP and later\n+                                               int cxDesired, int cyDesired);\n@@ -1021,1 +1032,1 @@\n-    private static Image makeIcon(long hIcon, boolean getLargeIcon) {\n+    private static Image makeIcon(long hIcon) {\n@@ -1027,2 +1038,1 @@\n-                final int size = (int) Math.sqrt(iconBits.length);\n-                final int baseSize = getLargeIcon ? 32 : 16;\n+                final int iconSize = (int) Math.sqrt(iconBits.length);\n@@ -1030,5 +1040,3 @@\n-                        new BufferedImage(size, size, BufferedImage.TYPE_INT_ARGB);\n-                img.setRGB(0, 0, size, size, iconBits, 0, size);\n-                return size == baseSize\n-                        ? img\n-                        : new MultiResolutionIconImage(baseSize, img);\n+                        new BufferedImage(iconSize, iconSize, BufferedImage.TYPE_INT_ARGB);\n+                img.setRGB(0, 0, iconSize, iconSize, iconBits, 0, iconSize);\n+                return img;\n@@ -1046,0 +1054,1 @@\n+        int size = getLargeIcon ? LARGE_ICON_SIZE : SMALL_ICON_SIZE;\n@@ -1051,0 +1060,1 @@\n+                        Image newIcon2 = null;\n@@ -1075,1 +1085,1 @@\n-                                    newIcon = makeIcon(hIcon, getLargeIcon);\n+                                    newIcon = makeIcon(hIcon);\n@@ -1081,14 +1091,4 @@\n-                            }\n-                        }\n-\n-                        if (newIcon == null) {\n-                            \/\/ These are only cached per object\n-                            long hIcon = extractIcon(getParentIShellFolder(),\n-                                    getRelativePIDL(), getLargeIcon, false);\n-                            \/\/ E_PENDING: loading can take time so get the default\n-                            if(hIcon <= 0) {\n-                                hIcon = extractIcon(getParentIShellFolder(),\n-                                         getRelativePIDL(), getLargeIcon, true);\n-                                if(hIcon <= 0) {\n-                                    if (isDirectory()) {\n-                                        return getShell32Icon(4, getLargeIcon);\n+                                if (newIcon != null) {\n+                                    if (isLink()) {\n+                                        imageCache = getLargeIcon ? smallLinkedSystemImages\n+                                                : largeLinkedSystemImages;\n@@ -1096,1 +1096,7 @@\n-                                        return getShell32Icon(1, getLargeIcon);\n+                                        imageCache = getLargeIcon ? smallSystemImages : largeSystemImages;\n+                                    }\n+                                    newIcon2 = imageCache.get(index);\n+                                    if (newIcon2 == null) {\n+                                        long hIcon = getIcon(getAbsolutePath(), !getLargeIcon);\n+                                        newIcon2 = makeIcon(hIcon);\n+                                        disposeIcon(hIcon);\n@@ -1099,0 +1105,8 @@\n+\n+                                if (newIcon2 != null) {\n+                                    Map<Integer, Image> bothIcons = new HashMap<>(2);\n+                                    bothIcons.put(getLargeIcon ? LARGE_ICON_SIZE : SMALL_ICON_SIZE, newIcon);\n+                                    bothIcons.put(getLargeIcon ? SMALL_ICON_SIZE : LARGE_ICON_SIZE, newIcon2);\n+                                    newIcon = new MultiResolutionIconImage(getLargeIcon ? LARGE_ICON_SIZE\n+                                            : SMALL_ICON_SIZE, bothIcons);\n+                                }\n@@ -1100,2 +1114,4 @@\n-                            newIcon = makeIcon(hIcon, getLargeIcon);\n-                            disposeIcon(hIcon);\n+                        }\n+\n+                        if (hiResIconAvailable(getParentIShellFolder(), getRelativePIDL()) || newIcon == null) {\n+                            newIcon = getIcon(getLargeIcon ? LARGE_ICON_SIZE : SMALL_ICON_SIZE);\n@@ -1110,5 +1126,0 @@\n-            if (getLargeIcon) {\n-                largeIcon = icon;\n-            } else {\n-                smallIcon = icon;\n-            }\n@@ -1119,0 +1130,48 @@\n+    \/**\n+     * @return The icon image of specified size used to display this shell folder\n+     *\/\n+    public Image getIcon(int size) {\n+        return invoke(() -> {\n+            Image newIcon = null;\n+            if (isLink()) {\n+                Win32ShellFolder2 folder = getLinkLocation(false);\n+                if (folder != null && folder.isLibrary()) {\n+                    return folder.getIcon(size);\n+                }\n+            }\n+            Map<Integer, Image> multiResolutionIcon = new HashMap<>();\n+            int start = size > MAX_QUALITY_ICON ? ICON_RESOLUTIONS.length - 1 : 0;\n+            int increment = size > MAX_QUALITY_ICON ? -1 : 1;\n+            int end = size > MAX_QUALITY_ICON ? -1 : ICON_RESOLUTIONS.length;\n+            for (int i = start; i != end; i += increment) {\n+                int s = ICON_RESOLUTIONS[i];\n+                if (size < MIN_QUALITY_ICON || size > MAX_QUALITY_ICON\n+                        || (s >= size && s <= size*2)) {\n+                    long hIcon = extractIcon(getParentIShellFolder(),\n+                            getRelativePIDL(), s, false);\n+\n+                    \/\/ E_PENDING: loading can take time so get the default\n+                    if (hIcon <= 0) {\n+                        hIcon = extractIcon(getParentIShellFolder(),\n+                                getRelativePIDL(), s, true);\n+                        if (hIcon <= 0) {\n+                            if (isDirectory()) {\n+                                return getShell32Icon(FOLDER_ICON_ID, size);\n+                            } else {\n+                                return getShell32Icon(FILE_ICON_ID, size);\n+                            }\n+                        }\n+                    }\n+                    newIcon = makeIcon(hIcon);\n+                    disposeIcon(hIcon);\n+\n+                    multiResolutionIcon.put(s, newIcon);\n+                    if (size < MIN_QUALITY_ICON || size > MAX_QUALITY_ICON) {\n+                        break;\n+                    }\n+                }\n+            }\n+            return new MultiResolutionIconImage(size, multiResolutionIcon);\n+        });\n+    }\n+\n@@ -1124,1 +1183,4 @@\n-        Image icon = makeIcon(hIcon, true);\n+        Image icon = makeIcon(hIcon);\n+        if (LARGE_ICON_SIZE != icon.getWidth(null)) {\n+            icon = new MultiResolutionIconImage(LARGE_ICON_SIZE, icon);\n+        }\n@@ -1132,12 +1194,2 @@\n-    static Image getShell32Icon(int iconID, boolean getLargeIcon) {\n-        boolean useVGAColors = true; \/\/ Will be ignored on XP and later\n-\n-        int size = getLargeIcon ? 32 : 16;\n-\n-        Toolkit toolkit = Toolkit.getDefaultToolkit();\n-        String shellIconBPP = (String)toolkit.getDesktopProperty(\"win.icon.shellIconBPP\");\n-        if (shellIconBPP != null) {\n-            useVGAColors = shellIconBPP.equals(\"4\");\n-        }\n-\n-        long hIcon = getIconResource(\"shell32.dll\", iconID, size, size, useVGAColors);\n+    static Image getShell32Icon(int iconID, int size) {\n+        long hIcon = getIconResource(\"shell32.dll\", iconID, size, size);\n@@ -1145,1 +1197,4 @@\n-            Image icon = makeIcon(hIcon, getLargeIcon);\n+            Image icon = makeIcon(hIcon);\n+            if (size != icon.getWidth(null)) {\n+                icon = new MultiResolutionIconImage(size, icon);\n+            }\n@@ -1328,1 +1383,0 @@\n-\n@@ -1330,1 +1384,6 @@\n-        final Image resolutionVariant;\n+        final Map<Integer, Image> resolutionVariants = new HashMap<>();\n+\n+        public MultiResolutionIconImage(int baseSize, Map<Integer, Image> resolutionVariants) {\n+            this.baseSize = baseSize;\n+            this.resolutionVariants.putAll(resolutionVariants);\n+        }\n@@ -1332,1 +1391,1 @@\n-        public MultiResolutionIconImage(int baseSize, Image resolutionVariant) {\n+        public MultiResolutionIconImage(int baseSize, Image image) {\n@@ -1334,1 +1393,1 @@\n-            this.resolutionVariant = resolutionVariant;\n+            this.resolutionVariants.put(baseSize, image);\n@@ -1349,1 +1408,1 @@\n-            return resolutionVariant;\n+            return getResolutionVariant(baseSize, baseSize);\n@@ -1354,1 +1413,17 @@\n-            return resolutionVariant;\n+            int dist = 0;\n+            Image retVal = null;\n+            \/\/ We only care about width since we don't support non-rectangular icons\n+            int w = (int) width;\n+            int retindex = 0;\n+            for (Integer i : resolutionVariants.keySet()) {\n+                if (retVal == null || dist > Math.abs(i - w)\n+                        || (dist == Math.abs(i - w) && i > retindex)) {\n+                    retindex = i;\n+                    dist = Math.abs(i - w);\n+                    retVal = resolutionVariants.get(i);\n+                    if (i == w) {\n+                        break;\n+                    }\n+                }\n+            }\n+            return retVal;\n@@ -1359,1 +1434,2 @@\n-            return Arrays.asList(resolutionVariant);\n+            return Collections.unmodifiableList(\n+                    new ArrayList<Image>(resolutionVariants.values()));\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/shell\/Win32ShellFolder2.java","additions":132,"deletions":56,"binary":false,"changes":188,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,1 @@\n+import static sun.awt.shell.Win32ShellFolder2.LARGE_ICON_SIZE;\n@@ -60,0 +61,1 @@\n+import static sun.awt.shell.Win32ShellFolder2.SMALL_ICON_SIZE;\n@@ -147,1 +149,1 @@\n-            STANDARD_VIEW_BUTTONS[iconIndex] = (size == 16)\n+            STANDARD_VIEW_BUTTONS[iconIndex] = (size == SMALL_ICON_SIZE)\n@@ -149,1 +151,1 @@\n-                    : new MultiResolutionIconImage(16, img);\n+                    : new MultiResolutionIconImage(SMALL_ICON_SIZE, img);\n@@ -411,1 +413,2 @@\n-                    return Win32ShellFolder2.getShell32Icon(i, key.startsWith(\"shell32LargeIcon \"));\n+                    return Win32ShellFolder2.getShell32Icon(i,\n+                         key.startsWith(\"shell32LargeIcon \") ? LARGE_ICON_SIZE : SMALL_ICON_SIZE);\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/shell\/Win32ShellFolderManager2.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -883,1 +883,1 @@\n-                         SHGFI_ICON | (getLargeIcon ? 0 : SHGFI_SMALLICON)) != 0) {\n+                         SHGFI_ICON | (getLargeIcon ? SHGFI_LARGEICON : SHGFI_SMALLICON)) != 0) {\n@@ -915,0 +915,39 @@\n+\/*\n+ * Class:     sun.awt.shell.Win32ShellFolder2\n+ * Method:    hiResIconAvailable\n+ * Signature: (JJ)Z\n+ *\/\n+JNIEXPORT jboolean JNICALL Java_sun_awt_shell_Win32ShellFolder2_hiResIconAvailable\n+    (JNIEnv* env, jclass cls, jlong pIShellFolderL, jlong relativePIDL)\n+{\n+    IShellFolder* pIShellFolder = (IShellFolder*)pIShellFolderL;\n+    LPITEMIDLIST pidl = (LPITEMIDLIST)relativePIDL;\n+    if (pIShellFolder == NULL || pidl == NULL) {\n+        return FALSE;\n+    }\n+    HRESULT hres;\n+    IExtractIconW* pIcon;\n+    hres = pIShellFolder->GetUIObjectOf(NULL, 1, const_cast<LPCITEMIDLIST*>(&pidl),\n+                                        IID_IExtractIconW, NULL, (void**)&pIcon);\n+    if (SUCCEEDED(hres)) {\n+        WCHAR szBuf[MAX_PATH];\n+        INT index;\n+        UINT flags;\n+        UINT uFlags = GIL_FORSHELL | GIL_ASYNC;\n+        hres = pIcon->GetIconLocation(uFlags, szBuf, MAX_PATH, &index, &flags);\n+        if (SUCCEEDED(hres)) {\n+            pIcon->Release();\n+            return wcscmp(szBuf, L\"*\") != 0;\n+        } else if (hres == E_PENDING) {\n+            uFlags = GIL_DEFAULTICON;\n+            hres = pIcon->GetIconLocation(uFlags, szBuf, MAX_PATH, &index, &flags);\n+            if (SUCCEEDED(hres)) {\n+                pIcon->Release();\n+                return wcscmp(szBuf, L\"*\") != 0;\n+            }\n+        }\n+        pIcon->Release();\n+    }\n+    return FALSE;\n+}\n+\n@@ -919,1 +958,1 @@\n- * Signature: (JJZZ)J\n+ * Signature: (JJIZ)J\n@@ -923,1 +962,1 @@\n-                                jboolean getLargeIcon, jboolean getDefaultIcon)\n+                                jint size, jboolean getDefaultIcon)\n@@ -944,9 +983,2 @@\n-            HICON hIconLarge;\n-            hres = pIcon->Extract(szBuf, index, &hIconLarge, &hIcon, (16 << 16) + 32);\n-            if (SUCCEEDED(hres)) {\n-                if (getLargeIcon) {\n-                    fn_DestroyIcon((HICON)hIcon);\n-                    hIcon = hIconLarge;\n-                } else {\n-                    fn_DestroyIcon((HICON)hIconLarge);\n-                }\n+            if (size < 24) {\n+                size = 16;\n@@ -954,0 +986,1 @@\n+            hres = pIcon->Extract(szBuf, index, &hIcon, NULL, size);\n@@ -983,1 +1016,1 @@\n-    const int MAX_ICON_SIZE = 128;\n+    const int MAX_ICON_SIZE = 256;\n@@ -1124,1 +1157,1 @@\n- * Signature: (Ljava\/lang\/String;IIIZ)J\n+ * Signature: (Ljava\/lang\/String;III)J\n@@ -1128,1 +1161,1 @@\n-     jint cxDesired, jint cyDesired, jboolean useVGAColors)\n+     jint cxDesired, jint cyDesired)\n@@ -1137,1 +1170,0 @@\n-        UINT fuLoad = (useVGAColors && !IS_WINXP) ? LR_VGACOLOR : 0;\n@@ -1140,1 +1172,1 @@\n-                                      fuLoad));\n+                                      0));\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/ShellFolder2.cpp","additions":50,"deletions":18,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8182043\n+ * @requires os.family == \"windows\"\n+ * @summary Access to Windows Large Icons\n+ * sun.awt.shell.ShellFolder\n+ * @run main SystemIconTest\n+ *\/\n+import javax.swing.ImageIcon;\n+import javax.swing.filechooser.FileSystemView;\n+import java.awt.image.MultiResolutionImage;\n+import java.io.File;\n+\n+public class SystemIconTest {\n+    static final FileSystemView fsv = FileSystemView.getFileSystemView();\n+\n+    public static void main(String[] args) {\n+        testSystemIcon();\n+        System.out.println(\"ok\");\n+    }\n+\n+    static void testSystemIcon() {\n+        String windir = System.getenv(\"windir\");\n+        testSystemIcon(new File(windir));\n+        testSystemIcon(new File(windir + \"\/explorer.exe\"));\n+        return;\n+    }\n+\n+    static void testSystemIcon(File file) {\n+        int[] sizes = new int[] {16, 32, 48, 64, 128};\n+        for (int size : sizes) {\n+            ImageIcon icon = (ImageIcon) fsv.getSystemIcon(file, size);\n+\n+            \/\/Enable below to see the icon\n+            \/\/JLabel label = new JLabel(icon);\n+            \/\/JOptionPane.showMessageDialog(null, label);\n+\n+            if (icon == null) {\n+                throw new RuntimeException(\"icon is null!!!\");\n+            }\n+\n+            if (icon.getIconWidth() != size) {\n+                throw new RuntimeException(\"Wrong icon size \" +\n+                        icon.getIconWidth() + \" when requested \" + size);\n+            }\n+\n+            if (icon.getImage() instanceof MultiResolutionImage) {\n+                MultiResolutionImage mri = (MultiResolutionImage) icon.getImage();\n+                if (mri.getResolutionVariant(size, size) == null) {\n+                    throw new RuntimeException(\"There is no suitable variant for the size \"\n+                            + size + \" in the multi resolution icon\");\n+                }\n+            } else {\n+                throw new RuntimeException(\"icon is supposed to be multi-resolution but it is not\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileSystemView\/SystemIconTest.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}