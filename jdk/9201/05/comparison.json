{"files":[{"patch":"@@ -75,0 +75,2 @@\n+     * @see ClassDesc#ofDescriptor(String)\n+     * @see ClassDesc#ofInternalName(String)\n@@ -81,0 +83,25 @@\n+    \/**\n+     * Returns a {@linkplain ClassDesc} for a class or interface type,\n+     * given the name of the class or interface in internal form,\n+     * such as {@code \"java\/lang\/String\"}.\n+     *\n+     * @apiNote\n+     * To create a descriptor for an array type, either use {@link #ofDescriptor(String)}\n+     * or {@link #arrayType()}; to create a descriptor for a primitive type, use\n+     * {@link #ofDescriptor(String)} or use the predefined constants in\n+     * {@link ConstantDescs}.\n+     *\n+     * @param name the fully qualified class name, in internal (slash-separated) form\n+     * @return a {@linkplain ClassDesc} describing the desired class\n+     * @throws NullPointerException if the argument is {@code null}\n+     * @throws IllegalArgumentException if the name string is not in the\n+     * correct format\n+     * @jvms 4.2.1 Binary Class and Interface Names\n+     * @see ClassDesc#of(String)\n+     * @see ClassDesc#ofDescriptor(String)\n+     *\/\n+    static ClassDesc ofInternalName(String name) {\n+        ConstantUtils.validateInternalClassName(requireNonNull(name));\n+        return ClassDesc.ofDescriptor(\"L\" + name + \";\");\n+    }\n+\n@@ -128,0 +155,2 @@\n+     * @see ClassDesc#of(String)\n+     * @see ClassDesc#ofInternalName(String)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDesc.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -61,0 +61,17 @@\n+    \/**\n+      * Validates the correctness of an internal class name.\n+      * In particular checks for the presence of invalid characters in the name.\n+      *\n+      * @param name the class name\n+      * @return the class name passed if valid\n+      * @throws IllegalArgumentException if the class name is invalid\n+      *\/\n+     static String validateInternalClassName(String name) {\n+         for (int i=0; i<name.length(); i++) {\n+             char ch = name.charAt(i);\n+             if (ch == ';' || ch == '[' || ch == '.')\n+                 throw new IllegalArgumentException(\"Invalid class name: \" + name);\n+         }\n+         return name;\n+     }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ConstantUtils.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -136,0 +136,1 @@\n+                                                        ClassDesc.ofInternalName(\"java\/lang\/String\"),\n@@ -152,0 +153,3 @@\n+        assertEquals(ClassDesc.of(\"java.lang.String\"), ClassDesc.ofDescriptor(\"Ljava\/lang\/String;\"));\n+        assertEquals(ClassDesc.of(\"java.lang.String\"), ClassDesc.ofInternalName(\"java\/lang\/String\"));\n+\n@@ -264,0 +268,11 @@\n+        List<String> badInternalNames = List.of(\"I;\", \"[]\", \"[Ljava\/lang\/String;\",\n+                \"Ljava.lang.String;\", \"java.lang.String\");\n+        for (String d : badInternalNames) {\n+            try {\n+                ClassDesc constant = ClassDesc.ofInternalName(d);\n+                fail(d);\n+            } catch (IllegalArgumentException e) {\n+                \/\/ good\n+            }\n+        }\n+\n","filename":"test\/jdk\/java\/lang\/constant\/ClassDescTest.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}