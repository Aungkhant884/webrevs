{"files":[{"patch":"@@ -82,18 +82,19 @@\n-      * Returns a {@linkplain ClassDesc} for a class or interface type,\n-      * given the name of the class or interface in internal form,\n-      * such as {@code \"java\/lang\/String\"}.\n-      * (To create a descriptor for an array type, either use {@link #ofDescriptor(String)}\n-      * or {@link #arrayType()}; to create a descriptor for a primitive type, use\n-      * {@link #ofDescriptor(String)} or use the predefined constants in\n-      * {@link ConstantDescs}).\n-      *\n-      * @param name the fully qualified class name, in internal (slash-separated) form\n-      * @return a {@linkplain ClassDesc} describing the desired class\n-      * @throws NullPointerException if the argument is {@code null}\n-      * @throws IllegalArgumentException if the name string is not in the\n-      * correct format\n-      *\/\n-     static ClassDesc ofInternalName(String name) {\n-         ConstantUtils.validateInternalClassName(requireNonNull(name));\n-         return ClassDesc.ofDescriptor(\"L\" + name + \";\");\n-     }\n+     * Returns a {@linkplain ClassDesc} for a class or interface type,\n+     * given the name of the class or interface in internal form,\n+     * such as {@code \"java\/lang\/String\"}.\n+     * (To create a descriptor for an array type, either use {@link #ofDescriptor(String)}\n+     * or {@link #arrayType()}; to create a descriptor for a primitive type, use\n+     * {@link #ofDescriptor(String)} or use the predefined constants in\n+     * {@link ConstantDescs}).\n+     *\n+     * @param name the fully qualified class name, in internal (slash-separated) form\n+     * @return a {@linkplain ClassDesc} describing the desired class\n+     * @throws NullPointerException if the argument is {@code null}\n+     * @throws IllegalArgumentException if the name string is not in the\n+     * correct format\n+     * @jvms 4.2.1 Binary Class and Interface Names\n+     *\/\n+    static ClassDesc ofInternalName(String name) {\n+        ConstantUtils.validateInternalClassName(requireNonNull(name));\n+        return ClassDesc.ofDescriptor(\"L\" + name + \";\");\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDesc.java","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"}]}