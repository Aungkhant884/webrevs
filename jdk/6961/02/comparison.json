{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -233,1 +233,1 @@\n-    ::close(listener);\n+    os::close(listener);\n@@ -251,1 +251,1 @@\n-    ::close(listener);\n+    os::close(listener);\n@@ -378,1 +378,1 @@\n-      ::close(listener());\n+      os::close(listener());\n@@ -384,1 +384,1 @@\n-      ::close(listener());\n+      os::close(listener());\n@@ -394,1 +394,1 @@\n-      ::close(s);\n+      os::close(s);\n@@ -401,1 +401,1 @@\n-      ::close(s);\n+      os::close(s);\n@@ -408,1 +408,1 @@\n-      ::close(s);\n+      os::close(s);\n@@ -456,1 +456,1 @@\n-  ::close(this->socket());\n+  os::close(this->socket());\n","filename":"src\/hotspot\/os\/aix\/attachListener_aix.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,0 +111,2 @@\n+PRAGMA_PERMIT_FORBIDDEN_C_FUNCTION(close); \/\/ prevents compiler warnings for all functions\n+\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -618,1 +618,1 @@\n-  ret_val = stat(name, &mystat);\n+  ret_val = os::stat(name, &mystat);\n","filename":"src\/hotspot\/os\/aix\/os_perf_aix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -169,1 +169,1 @@\n-      ::close(s);\n+      os::close(s);\n@@ -201,1 +201,1 @@\n-  listener = ::socket(PF_UNIX, SOCK_STREAM, 0);\n+  listener = os::socket(PF_UNIX, SOCK_STREAM, 0);\n@@ -214,1 +214,1 @@\n-    ::close(listener);\n+    os::close(listener);\n@@ -233,1 +233,1 @@\n-    ::close(listener);\n+    os::close(listener);\n@@ -363,1 +363,1 @@\n-      ::close(s);\n+      os::close(s);\n@@ -370,1 +370,1 @@\n-      ::close(s);\n+      os::close(s);\n@@ -377,1 +377,1 @@\n-      ::close(s);\n+      os::close(s);\n@@ -424,1 +424,1 @@\n-  ::close(this->socket());\n+  os::close(this->socket());\n@@ -476,1 +476,1 @@\n-  ret = stat(BsdAttachListener::path(), &st);\n+  ret = os::stat(BsdAttachListener::path(), &st);\n","filename":"src\/hotspot\/os\/bsd\/attachListener_bsd.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -110,0 +110,2 @@\n+PRAGMA_PERMIT_FORBIDDEN_C_FUNCTION(close); \/\/ prevents compiler warnings for all functions\n+\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-      ::close(s);\n+      os::close(s);\n@@ -202,1 +202,1 @@\n-  listener = ::socket(PF_UNIX, SOCK_STREAM, 0);\n+  listener = os::socket(PF_UNIX, SOCK_STREAM, 0);\n@@ -215,1 +215,1 @@\n-    ::close(listener);\n+    os::close(listener);\n@@ -233,1 +233,1 @@\n-    ::close(listener);\n+    os::close(listener);\n@@ -274,1 +274,1 @@\n-    RESTARTABLE(read(s, buf+off, left), n);\n+    RESTARTABLE(os::read(s, buf+off, left), n);\n@@ -363,1 +363,1 @@\n-      ::close(s);\n+      os::close(s);\n@@ -370,1 +370,1 @@\n-      ::close(s);\n+      os::close(s);\n@@ -377,1 +377,1 @@\n-      ::close(s);\n+      os::close(s);\n@@ -388,1 +388,1 @@\n-    ssize_t n = ::write(s, buf, len);\n+    ssize_t n = os::write(s, buf, len);\n@@ -424,1 +424,1 @@\n-  ::close(this->socket());\n+  os::close(this->socket());\n","filename":"src\/hotspot\/os\/linux\/attachListener_linux.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-  while (ftruncate(_fd, max_capacity) == -1) {\n+  while (os::ftruncate(_fd, max_capacity) == -1) {\n","filename":"src\/hotspot\/os\/linux\/gc\/z\/zPhysicalMemoryBacking_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -153,0 +153,2 @@\n+PRAGMA_PERMIT_FORBIDDEN_C_FUNCTION(closedir);  \/\/ prevents compiler warning for all functions\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -292,1 +292,1 @@\n-  if ((taskDir = opendir(\"\/proc\/self\/task\")) == NULL) {\n+  if ((taskDir = os::opendir(\"\/proc\/self\/task\")) == NULL) {\n@@ -296,1 +296,1 @@\n-    closedir(taskDir);\n+    os::closedir(taskDir);\n@@ -678,1 +678,1 @@\n-  ret_val = stat(name, &mystat);\n+  ret_val = os::stat(name, &mystat);\n@@ -691,1 +691,1 @@\n-  if (stat(name, &fbuf) < 0) {\n+  if (os::stat(name, &fbuf) < 0) {\n@@ -995,2 +995,2 @@\n-  ssize_t num_bytes = read(fd, buf, sizeof(buf));\n-  close(fd);\n+  ssize_t num_bytes = os::read(fd, buf, sizeof(buf));\n+  os::close(fd);\n","filename":"src\/hotspot\/os\/linux\/os_perf_linux.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -93,0 +93,2 @@\n+PRAGMA_PERMIT_FORBIDDEN_C_FUNCTION(closedir); \/\/ prevents compiler warnings for all functions\n+\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,1 +113,0 @@\n-\n@@ -338,1 +337,1 @@\n-  dirp = ::opendir(dirname);\n+  dirp = os::opendir(dirname);\n@@ -397,1 +396,1 @@\n-      ::close(*saved_cwd_fd);\n+      os::close(*saved_cwd_fd);\n@@ -416,1 +415,1 @@\n-    ::close(saved_cwd_fd);\n+    os::close(saved_cwd_fd);\n@@ -864,1 +863,1 @@\n-    ::close(fd);\n+    os::close(fd);\n@@ -871,1 +870,1 @@\n-  RESTARTABLE(::ftruncate(fd, (off_t)0), result);\n+  RESTARTABLE(os::ftruncate(fd, (off_t)0), result);\n@@ -876,1 +875,1 @@\n-    ::close(fd);\n+    os::close(fd);\n@@ -880,1 +879,1 @@\n-  RESTARTABLE(::ftruncate(fd, (off_t)size), result);\n+  RESTARTABLE(os::ftruncate(fd, (off_t)size), result);\n@@ -885,1 +884,1 @@\n-    ::close(fd);\n+    os::close(fd);\n@@ -940,1 +939,1 @@\n-    ::close(fd);\n+    os::close(fd);\n@@ -1001,1 +1000,1 @@\n-  result = ::close(fd);\n+  result = os::close(fd);\n@@ -1184,1 +1183,1 @@\n-    ::close(fd);\n+    os::close(fd);\n@@ -1198,1 +1197,1 @@\n-  result = ::close(fd);\n+  result = os::close(fd);\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -105,0 +105,2 @@\n+PRAGMA_PERMIT_FORBIDDEN_C_FUNCTION(close); \/\/ prevents compiler warnings for all functions\n+\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    lseek(fd, 0, SEEK_SET);\n+    os::lseek(fd, 0, SEEK_SET);\n@@ -1110,1 +1110,1 @@\n-    lseek(fd, 0, SEEK_SET);\n+    os::lseek(fd, 0, SEEK_SET);\n@@ -1278,1 +1278,1 @@\n-  lseek(fd, 0, SEEK_SET); \/\/ reset to begin of the archive\n+  os::lseek(fd, 0, SEEK_SET); \/\/ reset to begin of the archive\n@@ -1328,1 +1328,1 @@\n-    size_t len = lseek(fd, 0, SEEK_END);\n+    size_t len = os::lseek(fd, 0, SEEK_END);\n@@ -1341,1 +1341,1 @@\n-  if (lseek(_fd, (long)pos, SEEK_SET) < 0) {\n+  if (os::lseek(_fd, (long)pos, SEEK_SET) < 0) {\n@@ -1661,1 +1661,1 @@\n-    if (::close(_fd) < 0) {\n+    if (os::close(_fd) < 0) {\n@@ -1752,1 +1752,1 @@\n-  if (lseek(_fd, (long)si->file_offset(), SEEK_SET) != (int)si->file_offset() ||\n+  if (os::lseek(_fd, (long)si->file_offset(), SEEK_SET) != (int)si->file_offset() ||\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -255,1 +255,1 @@\n-    close(_fd);\n+    os::close(_fd);\n","filename":"src\/hotspot\/share\/classfile\/compactHashtable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -228,1 +228,1 @@\n-        bytes_read = read(partial_fd, buf, (int)nr);\n+        bytes_read = os::read(partial_fd, buf, (int)nr);\n@@ -238,1 +238,1 @@\n-      while ((bytes_read = read(partial_fd, buf, buflen-1)) > 0) {\n+      while ((bytes_read = os::read(partial_fd, buf, buflen-1)) > 0) {\n@@ -288,1 +288,1 @@\n-      close(partial_fd);\n+      os::close(partial_fd);\n","filename":"src\/hotspot\/share\/compiler\/compileLog.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1343,0 +1343,2 @@\n+PRAGMA_DIAG_PUSH\n+PRAGMA_PERMIT_FORBIDDEN_C_FUNCTION(fopen);\n@@ -1344,0 +1346,1 @@\n+PRAGMA_DIAG_POP\n@@ -1363,0 +1366,2 @@\n+PRAGMA_DIAG_PUSH\n+PRAGMA_PERMIT_FORBIDDEN_C_FUNCTION(read);\n@@ -1364,0 +1369,1 @@\n+PRAGMA_DIAG_POP\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,0 +74,55 @@\n+\n+#if __GNUC__ >= 9\n+\n+\/\/ AIX also needs a 64 bit NULL to work as a null address pointer.\n+\/\/ Most system includes on AIX would define it as an int 0 if not already defined with one\n+\/\/ exception: \/usr\/include\/dirent.h will unconditionally redefine NULL to int 0 again.\n+\/\/ In this case you need to copy the following defines to a position after #include <dirent.h>\n+#include <dirent.h>\n+#ifdef _LP64\n+  #undef NULL\n+  #define NULL 0L\n+#else\n+  #ifndef NULL\n+    #define NULL 0\n+  #endif\n+#endif\n+\n+#include <sys\/socket.h>\n+#include <stdio.h>\n+\n+#define FORBID_C_FUNCTION(signature, alternative) \\\n+  extern \"C\" signature __attribute__((__warning__(alternative)))\n+\n+#define PRAGMA_PERMIT_FORBIDDEN_C_FUNCTION(name) \\\n+  PRAGMA_DISABLE_GCC_WARNING(\"-Wattribute-warning\")\n+\n+FORBID_C_FUNCTION(void abort(void),                            \"use os::abort\");\n+FORBID_C_FUNCTION(int close(int),                              \"use os::close\");\n+FORBID_C_FUNCTION(int closedir(DIR *),                         \"use os::closedir\");\n+FORBID_C_FUNCTION(int connect(int, const struct sockaddr*, socklen_t), \"use os::connect\");\n+FORBID_C_FUNCTION(void flockfile(FILE*),                       \"use os::flockfile\");\n+FORBID_C_FUNCTION(FILE *fopen(const char *, const char *),     \"use os::fopen\");\n+FORBID_C_FUNCTION(int fsync(int),                              \"use os::fsync\");\n+FORBID_C_FUNCTION(int ftruncate(int, off_t),                   \"use os::ftruncate\");\n+FORBID_C_FUNCTION(void funlockfile(FILE *),                    \"use os::funlockfile\");\n+FORBID_C_FUNCTION(off_t lseek(int, off_t, int),                \"use os::lseek\");\n+FORBID_C_FUNCTION(DIR *opendir(const char *),                  \"use os::opendir\");\n+FORBID_C_FUNCTION(long int random(void),                       \"use os::random\");\n+FORBID_C_FUNCTION(ssize_t read(int, void*, size_t),            \"use os::read\");\n+FORBID_C_FUNCTION(struct dirent* readdir(DIR*),                \"use os::readdir\");\n+FORBID_C_FUNCTION(ssize_t recv(int, void*, size_t, int),       \"use os::recv\");\n+FORBID_C_FUNCTION(int stat(const char*, struct stat*),         \"use os::stat\");\n+FORBID_C_FUNCTION(ssize_t send(int, const void*, size_t, int), \"use os::send\");\n+FORBID_C_FUNCTION(int socket(int, int, int),                   \"use os::socket\");\n+FORBID_C_FUNCTION(char* strerror(int),                         \"use os::strerror\");\n+FORBID_C_FUNCTION(ssize_t write(int, const void*, size_t),     \"use os::write\");\n+\n+FORBID_C_FUNCTION(char *strtok(char*, const char*),            \"use strtok_r\");\n+\n+#else\n+\n+#define FORBID_C_FUNCTION(signature, alternative)\n+#define PRAGMA_PERMIT_FORBIDDEN_C_FUNCTION(name)\n+\n+#endif \/\/ __GNUC__ >= 9\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings.hpp","additions":56,"deletions":1,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -617,1 +617,1 @@\n-    ssize_t count = ::write(_fd, s, (int)len);\n+    ssize_t count = os::write(_fd, s, (int)len);\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1657,1 +1657,1 @@\n-      close(fd_log);\n+      os::close(fd_log);\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -281,1 +281,1 @@\n-      abort();\n+      os::abort();\n","filename":"test\/hotspot\/gtest\/gtestMain.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -141,2 +141,2 @@\n-  FILE* fp = fopen(filename, \"r\");\n-  assert(fp != NULL, \"error opening file %s: %s\", filename, strerror(errno));\n+  FILE* fp = os::fopen(filename, \"r\");\n+  assert(fp != NULL, \"error opening file %s: %s\", filename, os::strerror(errno));\n","filename":"test\/hotspot\/gtest\/logging\/logTestUtils.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,1 +89,1 @@\n-    FILE* f = fopen(TestLogFileName, \"w\");\n+    FILE* f = os::fopen(TestLogFileName, \"w\");\n","filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-  FILE* fp = fopen(TestLogFileName, \"r\");\n+  FILE* fp = os::fopen(TestLogFileName, \"r\");\n","filename":"test\/hotspot\/gtest\/logging\/test_log.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -82,1 +83,1 @@\n-    char* name_cpy = strdup(name);\n+    char* name_cpy = os::strdup(name);\n@@ -85,1 +86,1 @@\n-    free(name_cpy);\n+    os::free(name_cpy);\n@@ -102,1 +103,1 @@\n-    char* abbr_cpy = strdup(abbr);\n+    char* abbr_cpy = os::strdup(abbr);\n@@ -105,1 +106,1 @@\n-    free(abbr_cpy);\n+    os::free(abbr_cpy);\n","filename":"test\/hotspot\/gtest\/logging\/test_logDecorators.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-  FILE* fp = fopen(filename, \"w+\");\n+  FILE* fp = os::fopen(filename, \"w+\");\n","filename":"test\/hotspot\/gtest\/logging\/test_logTagSetDescriptions.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}