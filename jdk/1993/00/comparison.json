{"files":[{"patch":"@@ -738,0 +738,7 @@\n+  \/* notice: the max range value here is max_jint, not max_intx  *\/         \\\n+  \/* because of overflow issue                                   *\/         \\\n+  product(intx, NoAsyncDeflationProgressMax, 3, DIAGNOSTIC,                 \\\n+          \"Max number of no progress async deflation attempts to tolerate \" \\\n+          \"before adjusting the in_use_list_ceiling up (0 is off).\")        \\\n+          range(0, max_jint)                                                \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -238,0 +238,2 @@\n+  \/\/ Start the ceiling with the estimate for one thread.\n+  set_in_use_list_ceiling(AvgMonitorsPerThreadEstimate);\n@@ -252,1 +254,2 @@\n-\/\/ Start the ceiling with the estimate for one thread.\n+\/\/ Start the ceiling with the estimate for one thread in initialize()\n+\/\/ which is called after cmd line options are processed.\n@@ -255,1 +258,1 @@\n-static jint _in_use_list_ceiling = AvgMonitorsPerThreadEstimate;\n+static jint _in_use_list_ceiling = 0;\n@@ -259,0 +262,1 @@\n+static intx _no_progress_cnt = 0;\n@@ -1150,1 +1154,1 @@\n-  if (ceiling == 0) {\n+  if (list->count() == 0 || ceiling == 0) {\n@@ -1155,0 +1159,12 @@\n+    if (NoAsyncDeflationProgressMax != 0 &&\n+        _no_progress_cnt >= NoAsyncDeflationProgressMax) {\n+      float remainder = (100.0 - MonitorUsedDeflationThreshold) \/ 100.0;\n+      size_t new_ceiling = ceiling + (ceiling * remainder) + 1;\n+      size_t old_ceiling = ObjectSynchronizer::in_use_list_ceiling();\n+      ObjectSynchronizer::set_in_use_list_ceiling(new_ceiling);\n+      log_info(monitorinflation)(\"Too many deflations without progress; \"\n+                                 \"bumping in_use_list_ceiling from \" SIZE_FORMAT\n+                                 \" to \" SIZE_FORMAT, old_ceiling, new_ceiling);\n+      _no_progress_cnt = 0;\n+      ceiling = new_ceiling;\n+    }\n@@ -1180,0 +1196,4 @@\n+void ObjectSynchronizer::set_in_use_list_ceiling(size_t new_value) {\n+  _in_use_list_ceiling = new_value;\n+}\n+\n@@ -1588,0 +1608,6 @@\n+  if (deflated_count != 0) {\n+    _no_progress_cnt = 0;\n+  } else {\n+    _no_progress_cnt++;\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":30,"deletions":4,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -134,0 +134,1 @@\n+  static void set_in_use_list_ceiling(size_t new_value);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1110,1 +1110,1 @@\n-  if (Threads_lock->try_lock()) {\n+  if (Threads_lock->try_lock_without_rank_check()) {\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}