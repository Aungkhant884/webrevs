{"files":[{"patch":"@@ -736,0 +736,5 @@\n+  product(uintx, NoAsyncDeflationProgressMax, 3, DIAGNOSTIC,                \\\n+          \"Max number of no progress async deflation attempts to tolerate \" \\\n+          \"before adjusting the in_use_list_ceiling up (0 is off).\")        \\\n+          range(0, max_uintx)                                               \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -243,0 +243,2 @@\n+\/\/ monitors_used_above_threshold() policy is as follows:\n+\/\/\n@@ -249,0 +251,1 @@\n+\/\/\n@@ -254,0 +257,4 @@\n+\/\/ Note: If deflate_idle_monitors() has NoAsyncDeflationProgressMax\n+\/\/ no-progress async monitor deflation cycles in a row, then the ceiling\n+\/\/ is adjusted upwards by monitors_used_above_threshold().\n+\/\/\n@@ -260,0 +267,1 @@\n+static uintx _no_progress_cnt = 0;\n@@ -1145,0 +1153,3 @@\n+  if (MonitorUsedDeflationThreshold == 0) {  \/\/ disabled case is easy\n+    return false;\n+  }\n@@ -1147,0 +1158,1 @@\n+  size_t old_ceiling = ceiling;\n@@ -1151,1 +1163,2 @@\n-  if (ceiling == 0) {\n+  size_t monitors_used = list->count();\n+  if (monitors_used == 0) {  \/\/ empty list is easy\n@@ -1154,6 +1167,15 @@\n-  if (MonitorUsedDeflationThreshold > 0) {\n-    size_t monitors_used = list->count();\n-    size_t monitor_usage = (monitors_used * 100LL) \/ ceiling;\n-    return int(monitor_usage) > MonitorUsedDeflationThreshold;\n-  }\n-  return false;\n+  if (NoAsyncDeflationProgressMax != 0 &&\n+      _no_progress_cnt >= NoAsyncDeflationProgressMax) {\n+    float remainder = (100.0 - MonitorUsedDeflationThreshold) \/ 100.0;\n+    size_t new_ceiling = ceiling + (ceiling * remainder) + 1;\n+    ObjectSynchronizer::set_in_use_list_ceiling(new_ceiling);\n+    log_info(monitorinflation)(\"Too many deflations without progress; \"\n+                               \"bumping in_use_list_ceiling from \" SIZE_FORMAT\n+                               \" to \" SIZE_FORMAT, old_ceiling, new_ceiling);\n+    _no_progress_cnt = 0;\n+    ceiling = new_ceiling;\n+  }\n+\n+  \/\/ Check if our monitor usage is above the threshold:\n+  size_t monitor_usage = (monitors_used * 100LL) \/ ceiling;\n+  return int(monitor_usage) > MonitorUsedDeflationThreshold;\n@@ -1586,0 +1608,6 @@\n+  if (deflated_count != 0) {\n+    _no_progress_cnt = 0;\n+  } else {\n+    _no_progress_cnt++;\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":35,"deletions":7,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/*\n+ * @test\n+ * @bug 8226416\n+ * @summary Test the MonitorUsedDeflationThreshold and NoAsyncDeflationProgressMax options.\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @run driver MonitorUsedDeflationThresholdTest\n+ *\/\n+\n+public class MonitorUsedDeflationThresholdTest {\n+    public static final int DELAY_SECS = 10;\n+    public static int inflate_count = 0;\n+    public static Object[] monitors;\n+\n+    public static void do_work(int count) {\n+        System.out.println(\"Recursion count=\" + count);\n+        if (count > inflate_count) {\n+            System.out.println(\"Exceeded inflate_count=\" + inflate_count);\n+\n+            System.out.println(\"Delaying for \" + DELAY_SECS + \" secs.\");\n+            try {\n+                Thread.sleep(DELAY_SECS * 1000);\n+            } catch (InterruptedException ie) {\n+                \/\/ ignore InterruptedException\n+            }\n+            System.out.println(\"Done delaying for \" + DELAY_SECS + \" secs.\");\n+            return;\n+        }\n+\n+        synchronized(monitors[count]) {\n+            try {\n+                monitors[count].wait(1);  \/\/ force inflation\n+            } catch (InterruptedException ie) {\n+                \/\/ ignore InterruptedException\n+            }\n+            do_work(count + 1);\n+        }\n+    }\n+\n+    public static void usage() {\n+        System.err.println(\"Usage: java \" +\n+                           \"MonitorUsedDeflationThresholdTest inflate_count\");\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            \/\/ Without args we invoke the test in a java sub-process:\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \/\/ Test doesn't need much Java heap:\n+                \"-Xmx100M\",\n+                \/\/ AvgMonitorsPerThreadEstimate == 1 means we'll start with\n+                \/\/ an in_use_list_ceiling of <n-threads> plus a couple of\n+                \/\/ of monitors for threads that call Object.wait().\n+                \"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-XX:AvgMonitorsPerThreadEstimate=1\",\n+                \/\/ Enable monitorinflation logging so we can see that\n+                \/\/ MonitorUsedDeflationThreshold and\n+                \/\/ NoAsyncDeflationProgressMaxoption are working.\n+                \"-Xlog:monitorinflation=info\",\n+                \/\/ Enable some safepoint logging for diagnostic purposes.\n+                \"-Xlog:safepoint+cleanup=info\",\n+                \"-Xlog:safepoint+stats=debug\",\n+                \/\/ Run the test with inflate_count == 33 since that\n+                \/\/ reproduced the bug with JDK13. Anything above the\n+                \/\/ in_use_list_ceiling will do the trick.\n+                \"MonitorUsedDeflationThresholdTest\", \"33\");\n+\n+            OutputAnalyzer output_detail = new OutputAnalyzer(pb.start());\n+\n+            \/\/ This mesg means:\n+            \/\/ - AvgMonitorsPerThreadEstimate == 1 reduced in_use_list_ceiling\n+            \/\/   to a small number.\n+            \/\/ - and we crossed MonitorUsedDeflationThreshold:\n+            output_detail.shouldMatch(\"begin deflating: .*\");\n+            System.out.println(\"Found beginning of a deflation cycle.\");\n+\n+            \/\/ This mesg means we hit NoAsyncDeflationProgressMax and\n+            \/\/ had to adjust the in_use_list_ceiling:\n+            String too_many = output_detail.firstMatch(\"Too many deflations without progress; .*\", 0);\n+            if (too_many == null) {\n+                output_detail.reportDiagnosticSummary();\n+                throw new RuntimeException(\"Did not find too_many string in output.\\n\");\n+            }\n+            System.out.println(\"too_many='\" + too_many + \"'\");\n+\n+            System.out.println(\"PASSED.\");\n+            return;\n+        }\n+        \/\/ else we are the exec'd java subprocess, so run the actual test:\n+\n+        try {\n+            inflate_count = Integer.decode(args[0]);\n+        } catch (NumberFormatException nfe) {\n+            usage();\n+            throw new RuntimeException(\"ERROR: '\" + args[0] +\n+                                       \"': bad inflate_count.\");\n+        }\n+\n+        System.out.println(\"Hello from MonitorUsedDeflationThresholdTest!\");\n+        System.out.println(\"inflate_count=\" + inflate_count);\n+\n+        monitors = new Object[inflate_count + 1];\n+        for (int i = 1; i <= inflate_count; i++) {\n+            monitors[i] = new Object();\n+        }\n+        do_work(1);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/MonitorUsedDeflationThresholdTest.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"}]}