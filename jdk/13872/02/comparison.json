{"files":[{"patch":"@@ -797,1 +797,1 @@\n-                                        int index) {\n+                                        int index, Bytecodes::Code bc) {\n@@ -800,1 +800,1 @@\n-    ciField* field = new (arena()) ciField(accessor, index);\n+    ciField* field = new (arena()) ciField(accessor, index, bc);\n@@ -805,1 +805,1 @@\n-      field = new (arena()) ciField(accessor, index);\n+      field = new (arena()) ciField(accessor, index, bc);\n@@ -817,2 +817,2 @@\n-                                   int index) {\n-  GUARDED_VM_ENTRY(return get_field_by_index_impl(accessor, index);)\n+                                   int index, Bytecodes::Code bc) {\n+  GUARDED_VM_ENTRY(return get_field_by_index_impl(accessor, index, bc);)\n@@ -885,1 +885,1 @@\n-    ciSymbol*        signature = get_symbol(cpool->signature_ref_at(index));\n+    ciSymbol*        signature = get_symbol(cpool->signature_ref_at(index, bc));\n@@ -888,1 +888,1 @@\n-    const int holder_index = cpool->klass_ref_index_at(index);\n+    const int holder_index = cpool->klass_ref_index_at(index, bc);\n@@ -893,2 +893,2 @@\n-    Symbol* name_sym = cpool->name_ref_at(index);\n-    Symbol* sig_sym  = cpool->signature_ref_at(index);\n+    Symbol* name_sym = cpool->name_ref_at(index, bc);\n+    Symbol* sig_sym  = cpool->signature_ref_at(index, bc);\n@@ -920,1 +920,1 @@\n-      constantTag tag = cpool->tag_ref_at(index);\n+      constantTag tag = cpool->tag_ref_at(index, bc);\n@@ -1536,1 +1536,1 @@\n-  const int holder_index = cp->klass_ref_index_at(index);\n+  const int holder_index = cp->klass_ref_index_at(index, Bytecodes::_invokehandle);\n@@ -1541,1 +1541,1 @@\n-  Symbol* name = cp->name_ref_at(index);\n+  Symbol* name = cp->name_ref_at(index, Bytecodes::_invokehandle);\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-                                int field_index);\n+                                int field_index, Bytecodes::Code bc);\n@@ -152,1 +152,1 @@\n-                                     int field_index);\n+                                     int field_index, Bytecodes::Code bc);\n","filename":"src\/hotspot\/share\/ci\/ciEnv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-ciField::ciField(ciInstanceKlass* klass, int index) :\n+ciField::ciField(ciInstanceKlass* klass, int index, Bytecodes::Code bc) :\n@@ -85,1 +85,1 @@\n-  Symbol* name  = cpool->name_ref_at(index);\n+  Symbol* name  = cpool->name_ref_at(index, bc);\n@@ -88,1 +88,1 @@\n-  int nt_index = cpool->name_and_type_ref_index_at(index);\n+  int nt_index = cpool->name_and_type_ref_index_at(index, bc);\n@@ -112,1 +112,1 @@\n-  int holder_index = cpool->klass_ref_index_at(index);\n+  int holder_index = cpool->klass_ref_index_at(index, bc);\n","filename":"src\/hotspot\/share\/ci\/ciField.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  ciField(ciInstanceKlass* klass, int index);\n+  ciField(ciInstanceKlass* klass, int index, Bytecodes::Code bc);\n","filename":"src\/hotspot\/share\/ci\/ciField.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1181,1 +1181,1 @@\n-bool ciMethod::is_klass_loaded(int refinfo_index, bool must_be_resolved) const {\n+bool ciMethod::is_klass_loaded(int refinfo_index, Bytecodes::Code bc, bool must_be_resolved) const {\n@@ -1183,1 +1183,1 @@\n-  return get_Method()->is_klass_loaded(refinfo_index, must_be_resolved);\n+  return get_Method()->is_klass_loaded(refinfo_index, bc, must_be_resolved);\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -314,1 +314,1 @@\n-  bool is_klass_loaded(int refinfo_index, bool must_be_resolved) const;\n+  bool is_klass_loaded(int refinfo_index, Bytecodes::Code bc, bool must_be_resolved) const;\n","filename":"src\/hotspot\/share\/ci\/ciMethod.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -431,2 +431,2 @@\n-        Klass* holder = cp->klass_ref_at(index, CHECK_NULL);\n-        Symbol* name = cp->name_ref_at(index);\n+        Klass* holder = cp->klass_ref_at(index, bytecode.code(), CHECK_NULL);\n+        Symbol* name = cp->name_ref_at(index, bytecode.code());\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -311,1 +311,1 @@\n-  ciField* f = CURRENT_ENV->get_field_by_index(_holder, get_field_index());\n+  ciField* f = CURRENT_ENV->get_field_by_index(_holder, get_field_index(), _bc);\n@@ -346,1 +346,1 @@\n-    return cpool->klass_ref_index_at(get_field_index());\n+    return cpool->klass_ref_index_at(get_field_index(), _bc);\n@@ -530,1 +530,1 @@\n-  return cpool->klass_ref_index_at(get_method_index());\n+  return cpool->klass_ref_index_at(get_method_index(), _bc);\n@@ -542,1 +542,1 @@\n-    const int name_and_type_index = cpool->name_and_type_ref_index_at(method_index);\n+    const int name_and_type_index = cpool->name_and_type_ref_index_at(method_index, _bc);\n","filename":"src\/hotspot\/share\/ci\/ciStreams.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-  return constants()->klass_ref_at_noresolve(index());\n+  return constants()->klass_ref_at_noresolve(index(), _code);\n@@ -139,1 +139,1 @@\n-  return constants()->name_ref_at(index());\n+  return constants()->name_ref_at(index(), _code);\n@@ -144,1 +144,1 @@\n-  return constants()->signature_ref_at(index());\n+  return constants()->signature_ref_at(index(), _code);\n","filename":"src\/hotspot\/share\/interpreter\/bytecode.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-static void print_method_name(outputStream *os, Method* method, int cp_index) {\n+static void print_method_name(outputStream *os, Method* method, int cp_index, Bytecodes::Code bc) {\n@@ -277,3 +277,3 @@\n-  Symbol* klass     = cp->klass_ref_at_noresolve(cp_index);\n-  Symbol* name      = cp->name_ref_at(cp_index);\n-  Symbol* signature = cp->signature_ref_at(cp_index);\n+  Symbol* klass     = cp->klass_ref_at_noresolve(cp_index, bc);\n+  Symbol* name      = cp->name_ref_at(cp_index, bc);\n+  Symbol* signature = cp->signature_ref_at(cp_index, bc);\n@@ -290,1 +290,1 @@\n-static void print_field_and_class(outputStream *os, Method* method, int cp_index) {\n+static void print_field_and_class(outputStream *os, Method* method, int cp_index, Bytecodes::Code bc) {\n@@ -293,2 +293,2 @@\n-  Symbol* klass    = cp->klass_ref_at_noresolve(cp_index);\n-  Symbol *name     = cp->name_ref_at(cp_index);\n+  Symbol* klass    = cp->klass_ref_at_noresolve(cp_index, bc);\n+  Symbol *name     = cp->name_ref_at(cp_index, bc);\n@@ -301,2 +301,2 @@\n-static char const* get_field_name(Method* method, int cp_index) {\n-  Symbol* name = method->constants()->name_ref_at(cp_index);\n+static char const* get_field_name(Method* method, int cp_index, Bytecodes::Code bc) {\n+  Symbol* name = method->constants()->name_ref_at(cp_index, bc);\n@@ -973,1 +973,1 @@\n-      int name_and_type_index = cp->name_and_type_ref_index_at(cp_index);\n+      int name_and_type_index = cp->name_and_type_ref_index_at(cp_index, code);\n@@ -987,1 +987,1 @@\n-      int name_and_type_index = cp->name_and_type_ref_index_at(cp_index);\n+      int name_and_type_index = cp->name_and_type_ref_index_at(cp_index, code);\n@@ -1009,1 +1009,1 @@\n-      int name_and_type_index = cp->name_and_type_ref_index_at(cp_index);\n+      int name_and_type_index = cp->name_and_type_ref_index_at(cp_index, code);\n@@ -1137,1 +1137,1 @@\n-        int name_and_type_index = cp->name_and_type_ref_index_at(cp_index);\n+        int name_and_type_index = cp->name_and_type_ref_index_at(cp_index, code);\n@@ -1148,1 +1148,1 @@\n-        int name_and_type_index = cp->name_and_type_ref_index_at(cp_index);\n+        int name_and_type_index = cp->name_and_type_ref_index_at(cp_index, code);\n@@ -1330,1 +1330,1 @@\n-      print_field_and_class(os, _method, cp_index);\n+      print_field_and_class(os, _method, cp_index, code);\n@@ -1341,1 +1341,1 @@\n-      os->print(\"%s\", get_field_name(_method, cp_index));\n+      os->print(\"%s\", get_field_name(_method, cp_index, code));\n@@ -1353,1 +1353,1 @@\n-      print_method_name(os, _method, cp_index);\n+      print_method_name(os, _method, cp_index, code);\n@@ -1419,1 +1419,1 @@\n-        int name_and_type_index = cp->name_and_type_ref_index_at(cp_index);\n+        int name_and_type_index = cp->name_and_type_ref_index_at(cp_index, code);\n@@ -1426,1 +1426,1 @@\n-        os->print(\"Cannot assign field \\\"%s\\\"\", get_field_name(_method, cp_index));\n+        os->print(\"Cannot assign field \\\"%s\\\"\", get_field_name(_method, cp_index, code));\n@@ -1433,1 +1433,1 @@\n-        print_method_name(os, _method, cp_index);\n+        print_method_name(os, _method, cp_index, code);\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeUtils.cpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1508,2 +1508,2 @@\n-  Symbol* cname = cpool->klass_name_at(cpool->klass_ref_index_at(cp_index));\n-  Symbol* mname = cpool->name_ref_at(cp_index);\n+  Symbol* cname = cpool->klass_name_at(cpool->klass_ref_index_at(cp_index, code));\n+  Symbol* mname = cpool->name_ref_at(cp_index, code);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-LinkInfo::LinkInfo(const constantPoolHandle& pool, int index, const methodHandle& current_method, TRAPS) {\n+LinkInfo::LinkInfo(const constantPoolHandle& pool, int index, const methodHandle& current_method, Bytecodes::Code code, TRAPS) {\n@@ -233,1 +233,1 @@\n-  _resolved_klass = pool->klass_ref_at(index, CHECK);\n+  _resolved_klass = pool->klass_ref_at(index, code, CHECK);\n@@ -236,3 +236,3 @@\n-  _name          = pool->name_ref_at(index);\n-  _signature     = pool->signature_ref_at(index);\n-  _tag           = pool->tag_ref_at(index);\n+  _name          = pool->name_ref_at(index, code);\n+  _signature     = pool->signature_ref_at(index, code);\n+  _tag           = pool->tag_ref_at(index, code);\n@@ -247,1 +247,1 @@\n-LinkInfo::LinkInfo(const constantPoolHandle& pool, int index, TRAPS) {\n+LinkInfo::LinkInfo(const constantPoolHandle& pool, int index, Bytecodes::Code code, TRAPS) {\n@@ -249,1 +249,1 @@\n-  _resolved_klass = pool->klass_ref_at(index, CHECK);\n+  _resolved_klass = pool->klass_ref_at(index, code, CHECK);\n@@ -252,3 +252,3 @@\n-  _name          = pool->name_ref_at(index);\n-  _signature     = pool->signature_ref_at(index);\n-  _tag           = pool->tag_ref_at(index);\n+  _name          = pool->name_ref_at(index, code);\n+  _signature     = pool->signature_ref_at(index, code);\n+  _tag           = pool->tag_ref_at(index, code);\n@@ -621,1 +621,1 @@\n-    Symbol* method_signature = pool->signature_ref_at(index);\n+    Symbol* method_signature = pool->signature_ref_at(index, code);\n@@ -627,1 +627,1 @@\n-  LinkInfo link_info(pool, index, methodHandle(), CHECK_NULL);\n+  LinkInfo link_info(pool, index, methodHandle(), code, CHECK_NULL);\n@@ -953,1 +953,1 @@\n-  LinkInfo link_info(pool, index, method, CHECK);\n+  LinkInfo link_info(pool, index, method, byte, CHECK);\n@@ -1671,1 +1671,1 @@\n-  LinkInfo link_info(pool, index, CHECK);\n+  LinkInfo link_info(pool, index, Bytecodes::_invokestatic, CHECK);\n@@ -1678,1 +1678,1 @@\n-  LinkInfo link_info(pool, index, CHECK);\n+  LinkInfo link_info(pool, index, Bytecodes::_invokespecial, CHECK);\n@@ -1687,1 +1687,1 @@\n-  LinkInfo link_info(pool, index, CHECK);\n+  LinkInfo link_info(pool, index, Bytecodes::_invokevirtual, CHECK);\n@@ -1694,1 +1694,1 @@\n-  LinkInfo link_info(pool, index, CHECK);\n+  LinkInfo link_info(pool, index, Bytecodes::_invokeinterface, CHECK);\n@@ -1715,1 +1715,1 @@\n-  LinkInfo link_info(pool, index, CHECK);\n+  LinkInfo link_info(pool, index, Bytecodes::_invokehandle, CHECK);\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -149,2 +149,2 @@\n-  LinkInfo(const constantPoolHandle& pool, int index, const methodHandle& current_method, TRAPS);\n-  LinkInfo(const constantPoolHandle& pool, int index, TRAPS);\n+  LinkInfo(const constantPoolHandle& pool, int index, const methodHandle& current_method, Bytecodes::Code code, TRAPS);\n+  LinkInfo(const constantPoolHandle& pool, int index, Bytecodes::Code code, TRAPS);\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -817,1 +817,1 @@\n-C2V_VMENTRY_0(jint, lookupNameAndTypeRefIndexInPool, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint index))\n+C2V_VMENTRY_0(jint, lookupNameAndTypeRefIndexInPool, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint index, jint opcode))\n@@ -819,1 +819,1 @@\n-  return cp->name_and_type_ref_index_at(index);\n+  return cp->name_and_type_ref_index_at(index, (Bytecodes::Code)opcode);\n@@ -822,1 +822,1 @@\n-C2V_VMENTRY_NULL(jobject, lookupNameInPool, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint which))\n+C2V_VMENTRY_NULL(jobject, lookupNameInPool, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint which, jint opcode))\n@@ -824,1 +824,1 @@\n-  JVMCIObject sym = JVMCIENV->create_string(cp->name_ref_at(which), JVMCI_CHECK_NULL);\n+  JVMCIObject sym = JVMCIENV->create_string(cp->name_ref_at(which, (Bytecodes::Code)opcode), JVMCI_CHECK_NULL);\n@@ -828,1 +828,1 @@\n-C2V_VMENTRY_NULL(jobject, lookupSignatureInPool, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint which))\n+C2V_VMENTRY_NULL(jobject, lookupSignatureInPool, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint which, jint opcode))\n@@ -830,1 +830,1 @@\n-  JVMCIObject sym = JVMCIENV->create_string(cp->signature_ref_at(which), JVMCI_CHECK_NULL);\n+  JVMCIObject sym = JVMCIENV->create_string(cp->signature_ref_at(which, (Bytecodes::Code)opcode), JVMCI_CHECK_NULL);\n@@ -834,1 +834,1 @@\n-C2V_VMENTRY_0(jint, lookupKlassRefIndexInPool, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint index))\n+C2V_VMENTRY_0(jint, lookupKlassRefIndexInPool, (JNIEnv* env, jobject, ARGUMENT_PAIR(cp), jint index, jint opcode))\n@@ -836,1 +836,1 @@\n-  return cp->klass_ref_index_at(index);\n+  return cp->klass_ref_index_at(index, (Bytecodes::Code)opcode);\n@@ -909,1 +909,1 @@\n-  LinkInfo link_info(cp, index, mh, CHECK_NULL);\n+  LinkInfo link_info(cp, index, mh, code, CHECK_NULL);\n@@ -1595,2 +1595,2 @@\n-  Klass* holder = cp->klass_ref_at(index, CHECK);\n-  Symbol* name = cp->name_ref_at(index);\n+  Klass* holder = cp->klass_ref_at(index, Bytecodes::_invokehandle, CHECK);\n+  Symbol* name = cp->name_ref_at(index, Bytecodes::_invokehandle);\n@@ -1612,1 +1612,1 @@\n-    LinkInfo link_info(cp, index, CATCH);\n+    LinkInfo link_info(cp, index, Bytecodes::_invokehandle, CATCH);\n@@ -1616,1 +1616,1 @@\n-    Symbol* name_sym = cp->name_ref_at(index);\n+    Symbol* name_sym = cp->name_ref_at(index, Bytecodes::_invokehandle);\n@@ -3088,4 +3088,4 @@\n-  {CC \"lookupNameInPool\",                             CC \"(\" HS_CONSTANT_POOL2 \"I)\" STRING,                                                 FN_PTR(lookupNameInPool)},\n-  {CC \"lookupNameAndTypeRefIndexInPool\",              CC \"(\" HS_CONSTANT_POOL2 \"I)I\",                                                       FN_PTR(lookupNameAndTypeRefIndexInPool)},\n-  {CC \"lookupSignatureInPool\",                        CC \"(\" HS_CONSTANT_POOL2 \"I)\" STRING,                                                 FN_PTR(lookupSignatureInPool)},\n-  {CC \"lookupKlassRefIndexInPool\",                    CC \"(\" HS_CONSTANT_POOL2 \"I)I\",                                                       FN_PTR(lookupKlassRefIndexInPool)},\n+  {CC \"lookupNameInPool\",                             CC \"(\" HS_CONSTANT_POOL2 \"II)\" STRING,                                                FN_PTR(lookupNameInPool)},\n+  {CC \"lookupNameAndTypeRefIndexInPool\",              CC \"(\" HS_CONSTANT_POOL2 \"II)I\",                                                      FN_PTR(lookupNameAndTypeRefIndexInPool)},\n+  {CC \"lookupSignatureInPool\",                        CC \"(\" HS_CONSTANT_POOL2 \"II)\" STRING,                                                FN_PTR(lookupSignatureInPool)},\n+  {CC \"lookupKlassRefIndexInPool\",                    CC \"(\" HS_CONSTANT_POOL2 \"II)I\",                                                      FN_PTR(lookupKlassRefIndexInPool)},\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1801,1 +1801,1 @@\n-                                        int index) {\n+                                        int index, Bytecodes::Code bc) {\n@@ -1809,1 +1809,1 @@\n-  Symbol* name  = cpool->name_ref_at(index);\n+  Symbol* name  = cpool->name_ref_at(index, bc);\n@@ -1811,1 +1811,1 @@\n-  int nt_index = cpool->name_and_type_ref_index_at(index);\n+  int nt_index = cpool->name_and_type_ref_index_at(index, bc);\n@@ -1816,1 +1816,1 @@\n-  int holder_index = cpool->klass_ref_index_at(index);\n+  int holder_index = cpool->klass_ref_index_at(index, bc);\n@@ -1841,1 +1841,1 @@\n-void JVMCIRuntime::get_field_by_index(InstanceKlass* accessor, fieldDescriptor& fd, int index) {\n+void JVMCIRuntime::get_field_by_index(InstanceKlass* accessor, fieldDescriptor& fd, int index, Bytecodes::Code bc) {\n@@ -1843,1 +1843,1 @@\n-  return get_field_by_index_impl(accessor, fd, index);\n+  return get_field_by_index_impl(accessor, fd, index, bc);\n@@ -1891,1 +1891,1 @@\n-  int holder_index = cpool->klass_ref_index_at(index);\n+  int holder_index = cpool->klass_ref_index_at(index, bc);\n@@ -1896,2 +1896,2 @@\n-  Symbol* name_sym = cpool->name_ref_at(index);\n-  Symbol* sig_sym  = cpool->signature_ref_at(index);\n+  Symbol* name_sym = cpool->name_ref_at(index, bc);\n+  Symbol* sig_sym  = cpool->signature_ref_at(index, bc);\n@@ -1923,1 +1923,1 @@\n-    constantTag tag = cpool->tag_ref_at(index);\n+    constantTag tag = cpool->tag_ref_at(index, bc);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-                                        int field_index);\n+                                        int field_index, Bytecodes::Code bc);\n@@ -416,1 +416,1 @@\n-                                   int field_index);\n+                                   int field_index, Bytecodes::Code bc);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -678,9 +678,22 @@\n-Symbol* ConstantPool::impl_name_ref_at(int which, bool uncached) {\n-  int name_index = name_ref_index_at(impl_name_and_type_ref_index_at(which, uncached));\n-  return symbol_at(name_index);\n-}\n-\n-\n-Symbol* ConstantPool::impl_signature_ref_at(int which, bool uncached) {\n-  int signature_index = signature_ref_index_at(impl_name_and_type_ref_index_at(which, uncached));\n-  return symbol_at(signature_index);\n+\/\/ Translate index, which could be CPCache index or Indy index, to a constant pool index\n+int ConstantPool::to_cp_index(int index, Bytecodes::Code code) {\n+  assert(cache() != nullptr, \"'index' is a rewritten index so this class must have been rewritten\");\n+  switch(code) {\n+    case Bytecodes::_invokedynamic:\n+      return invokedynamic_bootstrap_ref_index_at(index);\n+    case Bytecodes::_getfield:\n+    case Bytecodes::_getstatic:\n+    case Bytecodes::_putfield:\n+    case Bytecodes::_putstatic:\n+      \/\/ TODO: handle resolved field entries with new structure\n+      \/\/ i = ....\n+    case Bytecodes::_invokeinterface:\n+    case Bytecodes::_invokehandle:\n+    case Bytecodes::_invokespecial:\n+    case Bytecodes::_invokestatic:\n+    case Bytecodes::_invokevirtual:\n+      \/\/ TODO: handle resolved method entries with new structure\n+    default:\n+      \/\/ change byte-ordering and go via cache\n+      return remap_instruction_operand_from_cache(index);\n+  }\n@@ -689,19 +702,5 @@\n-int ConstantPool::impl_name_and_type_ref_index_at(int which, bool uncached) {\n-  int i = which;\n-  if (!uncached) {\n-    assert(cache() != nullptr, \"'which' is a rewritten index so this class must have been rewritten\");\n-    if (ConstantPool::is_invokedynamic_index(which)) {\n-      \/\/ Invokedynamic index is index into the resolved indy array in the constant pool cache\n-      int pool_index = invokedynamic_bootstrap_ref_index_at(which);\n-      pool_index = bootstrap_name_and_type_ref_index_at(pool_index);\n-      assert(tag_at(pool_index).is_name_and_type(), \"\");\n-      return pool_index;\n-    }\n-    \/\/ change byte-ordering and go via cache\n-    i = remap_instruction_operand_from_cache(which);\n-  } else {\n-    if (tag_at(which).has_bootstrap()) {\n-      int pool_index = bootstrap_name_and_type_ref_index_at(which);\n-      assert(tag_at(pool_index).is_name_and_type(), \"\");\n-      return pool_index;\n-    }\n+int ConstantPool::uncached_name_and_type_ref_index_at(int cp_index)  {\n+  if (tag_at(cp_index).has_bootstrap()) {\n+    int pool_index = bootstrap_name_and_type_ref_index_at(cp_index);\n+    assert(tag_at(pool_index).is_name_and_type(), \"\");\n+    return pool_index;\n@@ -709,3 +708,3 @@\n-  assert(tag_at(i).is_field_or_method(), \"Corrupted constant pool\");\n-  assert(!tag_at(i).has_bootstrap(), \"Must be handled above\");\n-  jint ref_index = *int_at_addr(i);\n+  assert(tag_at(cp_index).is_field_or_method(), \"Corrupted constant pool\");\n+  assert(!tag_at(cp_index).has_bootstrap(), \"Must be handled above\");\n+  jint ref_index = *int_at_addr(cp_index);\n@@ -715,1 +714,6 @@\n-constantTag ConstantPool::impl_tag_ref_at(int which, bool uncached) {\n+int ConstantPool::name_and_type_ref_index_at(int index, Bytecodes::Code code) {\n+  return uncached_name_and_type_ref_index_at(to_cp_index(index, code));\n+}\n+\n+constantTag ConstantPool::tag_ref_at(int which, Bytecodes::Code code) {\n+  \/\/ which may be either a Constant Pool index or a rewritten index\n@@ -717,10 +721,2 @@\n-  if (!uncached) {\n-    assert(cache() != nullptr, \"'which' is a rewritten index so this class must have been rewritten\");\n-    if (ConstantPool::is_invokedynamic_index(which)) {\n-      \/\/ Invokedynamic index is index into resolved_references\n-      pool_index = invokedynamic_bootstrap_ref_index_at(which);\n-    } else {\n-      \/\/ change byte-ordering and go via cache\n-      pool_index = remap_instruction_operand_from_cache(which);\n-    }\n-  }\n+  assert(cache() != nullptr, \"'index' is a rewritten index so this class must have been rewritten\");\n+  pool_index = to_cp_index(which, code);\n@@ -730,11 +726,3 @@\n-int ConstantPool::impl_klass_ref_index_at(int which, bool uncached) {\n-  guarantee(!ConstantPool::is_invokedynamic_index(which),\n-            \"an invokedynamic instruction does not have a klass\");\n-  int i = which;\n-  if (!uncached) {\n-    assert(cache() != nullptr, \"'which' is a rewritten index so this class must have been rewritten\");\n-    \/\/ change byte-ordering and go via cache\n-    i = remap_instruction_operand_from_cache(which);\n-  }\n-  assert(tag_at(i).is_field_or_method(), \"Corrupted constant pool\");\n-  jint ref_index = *int_at_addr(i);\n+int ConstantPool::uncached_klass_ref_index_at(int cp_index) {\n+  assert(tag_at(cp_index).is_field_or_method(), \"Corrupted constant pool\");\n+  jint ref_index = *int_at_addr(cp_index);\n@@ -744,0 +732,7 @@\n+int ConstantPool::klass_ref_index_at(int index, Bytecodes::Code code) {\n+  guarantee(!ConstantPool::is_invokedynamic_index(index),\n+            \"an invokedynamic instruction does not have a klass\");\n+  assert(code != Bytecodes::_invokedynamic,\n+            \"an invokedynamic instruction does not have a klass\");\n+  return uncached_klass_ref_index_at(to_cp_index(index, code));\n+}\n@@ -776,2 +771,2 @@\n-Klass* ConstantPool::klass_ref_at(int which, TRAPS) {\n-  return klass_at(klass_ref_index_at(which), THREAD);\n+Klass* ConstantPool::klass_ref_at(int which, Bytecodes::Code code, TRAPS) {\n+  return klass_at(klass_ref_index_at(which, code), THREAD);\n@@ -784,2 +779,2 @@\n-Symbol* ConstantPool::klass_ref_at_noresolve(int which) {\n-  jint ref_index = klass_ref_index_at(which);\n+Symbol* ConstantPool::klass_ref_at_noresolve(int which, Bytecodes::Code code) {\n+  jint ref_index = klass_ref_index_at(which, code);\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":52,"deletions":57,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -504,1 +504,1 @@\n-    return impl_name_ref_at(member, true);\n+    return uncached_name_ref_at(member);\n@@ -508,1 +508,1 @@\n-    return impl_signature_ref_at(member, true);\n+    return uncached_signature_ref_at(member);\n@@ -512,1 +512,1 @@\n-    return impl_klass_ref_index_at(member, true);\n+    return uncached_klass_ref_index_at(member);\n@@ -660,4 +660,10 @@\n-  Klass* klass_ref_at(int which, TRAPS);\n-  Symbol* klass_ref_at_noresolve(int which);\n-  Symbol* name_ref_at(int which)                { return impl_name_ref_at(which, false); }\n-  Symbol* signature_ref_at(int which)           { return impl_signature_ref_at(which, false); }\n+  Klass* klass_ref_at(int which, Bytecodes::Code code, TRAPS);\n+  Symbol* klass_ref_at_noresolve(int which, Bytecodes::Code code);\n+  Symbol* name_ref_at(int which, Bytecodes::Code code) {\n+    int name_index = name_ref_index_at(name_and_type_ref_index_at(which, code));\n+    return symbol_at(name_index);\n+  }\n+  Symbol* signature_ref_at(int which, Bytecodes::Code code) {\n+    int signature_index = signature_ref_index_at(name_and_type_ref_index_at(which, code));\n+    return symbol_at(signature_index);\n+  }\n@@ -665,2 +671,2 @@\n-  int klass_ref_index_at(int which)               { return impl_klass_ref_index_at(which, false); }\n-  int name_and_type_ref_index_at(int which)       { return impl_name_and_type_ref_index_at(which, false); }\n+  int klass_ref_index_at(int which, Bytecodes::Code code);\n+  int name_and_type_ref_index_at(int which, Bytecodes::Code code);\n@@ -670,1 +676,3 @@\n-  constantTag tag_ref_at(int cp_cache_index)      { return impl_tag_ref_at(cp_cache_index, false); }\n+  constantTag tag_ref_at(int cp_cache_index, Bytecodes::Code code);\n+\n+  int to_cp_index(int which, Bytecodes::Code code);\n@@ -772,5 +780,11 @@\n-  Symbol* uncached_klass_ref_at_noresolve(int which);\n-  Symbol* uncached_name_ref_at(int which)                 { return impl_name_ref_at(which, true); }\n-  Symbol* uncached_signature_ref_at(int which)            { return impl_signature_ref_at(which, true); }\n-  int       uncached_klass_ref_index_at(int which)          { return impl_klass_ref_index_at(which, true); }\n-  int       uncached_name_and_type_ref_index_at(int which)  { return impl_name_and_type_ref_index_at(which, true); }\n+  Symbol* uncached_klass_ref_at_noresolve(int cp_index);\n+  Symbol* uncached_name_ref_at(int cp_index) {\n+    int name_index = name_ref_index_at(uncached_name_and_type_ref_index_at(cp_index));\n+    return symbol_at(name_index);\n+  }\n+  Symbol* uncached_signature_ref_at(int cp_index) {\n+    int signature_index = signature_ref_index_at(uncached_name_and_type_ref_index_at(cp_index));\n+    return symbol_at(signature_index);\n+  }\n+  int       uncached_klass_ref_index_at(int cp_index);\n+  int       uncached_name_and_type_ref_index_at(int cp_index);\n@@ -803,7 +817,0 @@\n-  Symbol* impl_name_ref_at(int which, bool uncached);\n-  Symbol* impl_signature_ref_at(int which, bool uncached);\n-\n-  int       impl_klass_ref_index_at(int which, bool uncached);\n-  int       impl_name_and_type_ref_index_at(int which, bool uncached);\n-  constantTag impl_tag_ref_at(int which, bool uncached);\n-\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":29,"deletions":22,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1323,1 +1323,1 @@\n-      int nameAndTypeIdx    = cp->name_and_type_ref_index_at(idx);\n+      int nameAndTypeIdx    = cp->name_and_type_ref_index_at(idx, currentBC->code());\n@@ -1600,4 +1600,4 @@\n-    case Bytecodes::_getstatic:         do_field(true,  true,  itr->get_index_u2_cpcache(), itr->bci()); break;\n-    case Bytecodes::_putstatic:         do_field(false, true,  itr->get_index_u2_cpcache(), itr->bci()); break;\n-    case Bytecodes::_getfield:          do_field(true,  false, itr->get_index_u2_cpcache(), itr->bci()); break;\n-    case Bytecodes::_putfield:          do_field(false, false, itr->get_index_u2_cpcache(), itr->bci()); break;\n+    case Bytecodes::_getstatic:         do_field(true,  true,  itr->get_index_u2_cpcache(), itr->bci(), itr->code()); break;\n+    case Bytecodes::_putstatic:         do_field(false, true,  itr->get_index_u2_cpcache(), itr->bci(), itr->code()); break;\n+    case Bytecodes::_getfield:          do_field(true,  false, itr->get_index_u2_cpcache(), itr->bci(), itr->code()); break;\n+    case Bytecodes::_putfield:          do_field(false, false, itr->get_index_u2_cpcache(), itr->bci(), itr->code()); break;\n@@ -1606,4 +1606,4 @@\n-    case Bytecodes::_invokespecial:     do_method(false, false, itr->get_index_u2_cpcache(), itr->bci()); break;\n-    case Bytecodes::_invokestatic:      do_method(true,  false, itr->get_index_u2_cpcache(), itr->bci()); break;\n-    case Bytecodes::_invokedynamic:     do_method(true,  false, itr->get_index_u4(),         itr->bci()); break;\n-    case Bytecodes::_invokeinterface:   do_method(false, true,  itr->get_index_u2_cpcache(), itr->bci()); break;\n+    case Bytecodes::_invokespecial:     do_method(false, false, itr->get_index_u2_cpcache(), itr->bci(), itr->code()); break;\n+    case Bytecodes::_invokestatic:      do_method(true,  false, itr->get_index_u2_cpcache(), itr->bci(), itr->code()); break;\n+    case Bytecodes::_invokedynamic:     do_method(true,  false, itr->get_index_u4(),         itr->bci(), itr->code()); break;\n+    case Bytecodes::_invokeinterface:   do_method(false, true,  itr->get_index_u2_cpcache(), itr->bci(), itr->code()); break;\n@@ -1934,1 +1934,1 @@\n-void GenerateOopMap::do_field(int is_get, int is_static, int idx, int bci) {\n+void GenerateOopMap::do_field(int is_get, int is_static, int idx, int bci, Bytecodes::Code bc) {\n@@ -1937,1 +1937,1 @@\n-  int nameAndTypeIdx     = cp->name_and_type_ref_index_at(idx);\n+  int nameAndTypeIdx     = cp->name_and_type_ref_index_at(idx, bc);\n@@ -1960,1 +1960,1 @@\n-void GenerateOopMap::do_method(int is_static, int is_interface, int idx, int bci) {\n+void GenerateOopMap::do_method(int is_static, int is_interface, int idx, int bci, Bytecodes::Code bc) {\n@@ -1963,1 +1963,1 @@\n-  Symbol* signature   = cp->signature_ref_at(idx);\n+  Symbol* signature   = cp->signature_ref_at(idx, bc);\n","filename":"src\/hotspot\/share\/oops\/generateOopMap.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -399,2 +399,2 @@\n-  void  do_field                            (int is_get, int is_static, int idx, int bci);\n-  void  do_method                           (int is_static, int is_interface, int idx, int bci);\n+  void  do_field                            (int is_get, int is_static, int idx, int bci, Bytecodes::Code bc);\n+  void  do_method                           (int is_static, int is_interface, int idx, int bci, Bytecodes::Code bc);\n","filename":"src\/hotspot\/share\/oops\/generateOopMap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -980,2 +980,2 @@\n-bool Method::is_klass_loaded(int refinfo_index, bool must_be_resolved) const {\n-  int klass_index = constants()->klass_ref_index_at(refinfo_index);\n+bool Method::is_klass_loaded(int refinfo_index, Bytecodes::Code bc, bool must_be_resolved) const {\n+  int klass_index = constants()->klass_ref_index_at(refinfo_index, bc);\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -845,1 +845,1 @@\n-  bool is_klass_loaded(int refinfo_index, bool must_be_resolved = false) const;\n+  bool is_klass_loaded(int refinfo_index, Bytecodes::Code bc, bool must_be_resolved = false) const;\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -512,1 +512,1 @@\n-      if (!caller_method->is_klass_loaded(index, true)) {\n+      if (!caller_method->is_klass_loaded(index, call_bc, true)) {\n","filename":"src\/hotspot\/share\/opto\/bytecodeInfo.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,3 +99,3 @@\n-    if ((old_cp->klass_ref_at_noresolve(cpci_old) != new_cp->klass_ref_at_noresolve(cpci_new)) ||\n-        (old_cp->name_ref_at(cpci_old) != new_cp->name_ref_at(cpci_new)) ||\n-        (old_cp->signature_ref_at(cpci_old) != new_cp->signature_ref_at(cpci_new)))\n+    if ((old_cp->klass_ref_at_noresolve(cpci_old, c_old) != new_cp->klass_ref_at_noresolve(cpci_new, c_old)) ||\n+        (old_cp->name_ref_at(cpci_old, c_old) != new_cp->name_ref_at(cpci_new, c_old)) ||\n+        (old_cp->signature_ref_at(cpci_old, c_old) != new_cp->signature_ref_at(cpci_new, c_old)))\n@@ -117,2 +117,2 @@\n-    if ((old_cp->name_ref_at(index_old) != new_cp->name_ref_at(index_new)) ||\n-        (old_cp->signature_ref_at(index_old) != new_cp->signature_ref_at(index_new)))\n+    if ((old_cp->name_ref_at(index_old, c_old) != new_cp->name_ref_at(index_new, c_old)) ||\n+        (old_cp->signature_ref_at(index_old, c_old) != new_cp->signature_ref_at(index_new, c_old)))\n","filename":"src\/hotspot\/share\/prims\/methodComparator.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1285,1 +1285,1 @@\n-            Symbol* name = caller->constants()->name_ref_at(bss_index_in_pool);\n+            Symbol* name = caller->constants()->name_ref_at(bss_index_in_pool, Bytecodes::_invokedynamic);\n@@ -1292,1 +1292,1 @@\n-            Symbol* type = caller->constants()->signature_ref_at(bss_index_in_pool);\n+            Symbol* type = caller->constants()->signature_ref_at(bss_index_in_pool, Bytecodes::_invokedynamic);\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1225,1 +1225,1 @@\n-      rk = constants->klass_ref_at(bytecode_index, CHECK_NH);\n+      rk = constants->klass_ref_at(bytecode_index, bc, CHECK_NH);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -289,2 +289,2 @@\n-     * Gets the {@code JVM_CONSTANT_NameAndType} index from the entry at index {@code cpi} in\n-     * {@code constantPool}.\n+     * Gets the {@code JVM_CONSTANT_NameAndType} index referenced by the {@code rawIndex}.\n+     * The meaning of {@code rawIndex} is dependent on the given {@opcode}.\n@@ -292,2 +292,3 @@\n-     * The behavior of this method is undefined if {@code cpi} does not denote an entry containing a\n-     * {@code JVM_CONSTANT_NameAndType} index.\n+     * The behavior of this method is undefined if the class holding the {@code constantPool}\n+     * has not yet been rewritten, or {@code rawIndex} is not a valid index for\n+     * this class for the given {@code opcode}\n@@ -295,2 +296,2 @@\n-    int lookupNameAndTypeRefIndexInPool(HotSpotConstantPool constantPool, int cpi) {\n-        return lookupNameAndTypeRefIndexInPool(constantPool, constantPool.getConstantPoolPointer(), cpi);\n+    int lookupNameAndTypeRefIndexInPool(HotSpotConstantPool constantPool, int rawIndex, int opcode) {\n+        return lookupNameAndTypeRefIndexInPool(constantPool, constantPool.getConstantPoolPointer(), rawIndex, opcode);\n@@ -299,1 +300,1 @@\n-    private native int lookupNameAndTypeRefIndexInPool(HotSpotConstantPool constantPool, long constantPoolPointer, int cpi);\n+    private native int lookupNameAndTypeRefIndexInPool(HotSpotConstantPool constantPool, long constantPoolPointer, int rawIndex, int opcode);\n@@ -302,2 +303,3 @@\n-     * Gets the name of the {@code JVM_CONSTANT_NameAndType} entry referenced by another entry\n-     * denoted by {@code which} in {@code constantPool}.\n+     * Gets the name of the {@code JVM_CONSTANT_NameAndType} entry in {@code constantPool}\n+     * referenced by the {@code rawIndex}. The meaning of {@code rawIndex} is dependent\n+     * on the given {@opcode}.\n@@ -305,2 +307,3 @@\n-     * The behavior of this method is undefined if {@code which} does not denote a entry that\n-     * references a {@code JVM_CONSTANT_NameAndType} entry.\n+     * The behavior of this method is undefined if the class holding the {@code constantPool}\n+     * has not yet been rewritten, or {@code rawIndex} is not a valid index for\n+     * this class for the given {@code opcode}\n@@ -308,2 +311,2 @@\n-    String lookupNameInPool(HotSpotConstantPool constantPool, int which) {\n-        return lookupNameInPool(constantPool, constantPool.getConstantPoolPointer(), which);\n+    String lookupNameInPool(HotSpotConstantPool constantPool, int rawIndex, int opcode) {\n+        return lookupNameInPool(constantPool, constantPool.getConstantPoolPointer(), rawIndex, opcode);\n@@ -312,1 +315,1 @@\n-    private native String lookupNameInPool(HotSpotConstantPool constantPool, long constantPoolPointer, int which);\n+    private native String lookupNameInPool(HotSpotConstantPool constantPool, long constantPoolPointer, int rawIndex, int opcode);\n@@ -315,2 +318,3 @@\n-     * Gets the signature of the {@code JVM_CONSTANT_NameAndType} entry referenced by another entry\n-     * denoted by {@code which} in {@code constantPool}.\n+     * Gets the signature of the {@code JVM_CONSTANT_NameAndType} entry in {@code constantPool}\n+     * referenced by the {@code rawIndex}. The meaning of {@code rawIndex} is dependent\n+     * on the given {@opcode}.\n@@ -318,2 +322,3 @@\n-     * The behavior of this method is undefined if {@code which} does not denote a entry that\n-     * references a {@code JVM_CONSTANT_NameAndType} entry.\n+     * The behavior of this method is undefined if the class holding the {@code constantPool}\n+     * has not yet been rewritten, or {@code rawIndex} is not a valid index for\n+     * this class for the given {@code opcode}\n@@ -321,2 +326,2 @@\n-    String lookupSignatureInPool(HotSpotConstantPool constantPool, int which) {\n-        return lookupSignatureInPool(constantPool, constantPool.getConstantPoolPointer(), which);\n+    String lookupSignatureInPool(HotSpotConstantPool constantPool, int rawIndex, int opcode) {\n+        return lookupSignatureInPool(constantPool, constantPool.getConstantPoolPointer(), rawIndex, opcode);\n@@ -325,1 +330,1 @@\n-    private native String lookupSignatureInPool(HotSpotConstantPool constantPool, long constantPoolPointer, int which);\n+    private native String lookupSignatureInPool(HotSpotConstantPool constantPool, long constantPoolPointer, int rawIndex, int opcode);\n@@ -328,2 +333,3 @@\n-     * Gets the {@code JVM_CONSTANT_Class} index from the entry at index {@code cpi} in\n-     * {@code constantPool}.\n+     * Gets the {@code JVM_CONSTANT_Class} index from the entry in {@code constantPool}\n+     * referenced by the {@code rawIndex}. The meaning of {@code rawIndex} is dependent\n+     * on the given {@opcode}.\n@@ -331,2 +337,3 @@\n-     * The behavior of this method is undefined if {@code cpi} does not denote an entry containing a\n-     * {@code JVM_CONSTANT_Class} index.\n+     * The behavior of this method is undefined if the class holding the {@code constantPool}\n+     * has not yet been rewritten, or {@code rawIndex} is not a valid index for\n+     * this class for the given {@code opcode}\n@@ -334,2 +341,2 @@\n-    int lookupKlassRefIndexInPool(HotSpotConstantPool constantPool, int cpi) {\n-        return lookupKlassRefIndexInPool(constantPool, constantPool.getConstantPoolPointer(), cpi);\n+    int lookupKlassRefIndexInPool(HotSpotConstantPool constantPool, int rawIndex, int opcode) {\n+        return lookupKlassRefIndexInPool(constantPool, constantPool.getConstantPoolPointer(), rawIndex, opcode);\n@@ -338,1 +345,1 @@\n-    private native int lookupKlassRefIndexInPool(HotSpotConstantPool constantPool, long constantPoolPointer, int cpi);\n+    private native int lookupKlassRefIndexInPool(HotSpotConstantPool constantPool, long constantPoolPointer, int rawIndex, int opcode);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":35,"deletions":28,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -392,1 +392,2 @@\n-     * @param index constant pool index\n+     * @param rawIndex rewritten index in the bytecode stream\n+     * @param opcode the opcode of the instruction for which the lookup is being performed\n@@ -395,2 +396,2 @@\n-    private int getNameAndTypeRefIndexAt(int index) {\n-        return compilerToVM().lookupNameAndTypeRefIndexInPool(this, index);\n+    private int getNameAndTypeRefIndexAt(int rawIndex, int opcode) {\n+        return compilerToVM().lookupNameAndTypeRefIndexInPool(this, rawIndex, opcode);\n@@ -403,1 +404,2 @@\n-     * @param which constant pool index or constant pool cache index\n+     * @param rawIndex rewritten index in the bytecode stream\n+     * @param opcode the opcode of the instruction for which the lookup is being performed\n@@ -406,2 +408,2 @@\n-    private String getNameOf(int which) {\n-        return compilerToVM().lookupNameInPool(this, which);\n+    private String getNameOf(int rawIndex, int opcode) {\n+        return compilerToVM().lookupNameInPool(this, rawIndex, opcode);\n@@ -427,1 +429,2 @@\n-     * @param which constant pool index or constant pool cache index\n+     * @param rawIndex rewritten index in the bytecode stream\n+     * @param opcode the opcode of the instruction for which the lookup is being performed\n@@ -430,2 +433,2 @@\n-    private String getSignatureOf(int which) {\n-        return compilerToVM().lookupSignatureInPool(this, which);\n+    private String getSignatureOf(int rawIndex, int opcode) {\n+        return compilerToVM().lookupSignatureInPool(this, rawIndex, opcode);\n@@ -450,1 +453,2 @@\n-     * @param index constant pool index\n+     * @param rawIndex rewritten index in the bytecode stream\n+     * @param opcode the opcode of the instruction for which the lookup is being performed\n@@ -453,2 +457,2 @@\n-    private int getKlassRefIndexAt(int index) {\n-        return compilerToVM().lookupKlassRefIndexInPool(this, index);\n+    private int getKlassRefIndexAt(int rawIndex, int opcode) {\n+        return compilerToVM().lookupKlassRefIndexInPool(this, rawIndex, opcode);\n@@ -713,2 +717,2 @@\n-            String name = getNameOf(index);\n-            HotSpotSignature signature = new HotSpotSignature(runtime(), getSignatureOf(index));\n+            String name = getNameOf(index, opcode);\n+            HotSpotSignature signature = new HotSpotSignature(runtime(), getSignatureOf(index, opcode));\n@@ -718,1 +722,1 @@\n-                final int klassIndex = getKlassRefIndexAt(index);\n+                final int klassIndex = getKlassRefIndexAt(index, opcode);\n@@ -763,1 +767,1 @@\n-                index = getKlassRefIndexAt(index);\n+                index = getKlassRefIndexAt(index, opcode);\n@@ -776,1 +780,1 @@\n-        final int nameAndTypeIndex = getNameAndTypeRefIndexAt(index);\n+        final int nameAndTypeIndex = getNameAndTypeRefIndexAt(index, opcode);\n@@ -781,1 +785,1 @@\n-        final int holderIndex = getKlassRefIndexAt(index);\n+        final int holderIndex = getKlassRefIndexAt(index, opcode);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotConstantPool.java","additions":22,"deletions":18,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -109,2 +109,2 @@\n-    public static int lookupNameAndTypeRefIndexInPool(ConstantPool constantPool, int cpi) {\n-        return CTVM.lookupNameAndTypeRefIndexInPool((HotSpotConstantPool) constantPool, cpi);\n+    public static int lookupNameAndTypeRefIndexInPool(ConstantPool constantPool, int rawIndex, int opcode) {\n+        return CTVM.lookupNameAndTypeRefIndexInPool((HotSpotConstantPool) constantPool, rawIndex, opcode);\n@@ -113,2 +113,2 @@\n-    public static String lookupNameInPool(ConstantPool constantPool, int cpi) {\n-        return CTVM.lookupNameInPool((HotSpotConstantPool) constantPool, cpi);\n+    public static String lookupNameInPool(ConstantPool constantPool, int rawIndex, int opcode) {\n+        return CTVM.lookupNameInPool((HotSpotConstantPool) constantPool, rawIndex, opcode);\n@@ -117,2 +117,2 @@\n-    public static String lookupSignatureInPool(ConstantPool constantPool, int cpi) {\n-        return CTVM.lookupSignatureInPool((HotSpotConstantPool) constantPool, cpi);\n+    public static String lookupSignatureInPool(ConstantPool constantPool, int rawIndex, int opcode) {\n+        return CTVM.lookupSignatureInPool((HotSpotConstantPool) constantPool, rawIndex, opcode);\n@@ -121,2 +121,2 @@\n-    public static int lookupKlassRefIndexInPool(ConstantPool constantPool, int cpi) {\n-        return CTVM.lookupKlassRefIndexInPool((HotSpotConstantPool) constantPool, cpi);\n+    public static int lookupKlassRefIndexInPool(ConstantPool constantPool, int rawIndex, int opcode) {\n+        return CTVM.lookupKlassRefIndexInPool((HotSpotConstantPool) constantPool, rawIndex, opcode);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/common\/patches\/jdk.internal.vm.ci\/jdk\/vm\/ci\/hotspot\/CompilerToVMHelper.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.vm.ci.hotspot.HotSpotConstantPool.Bytecodes;\n@@ -100,0 +101,19 @@\n+    \/**\n+     * Select an arbitrary bytecode of the type associated with the Constant pool entry type\n+     *\n+     * @param cpType Constant type from the Constant pool cache\n+     * @return Arbitrary opcode of the kind associated with the CP entry\n+     *\/\n+    public static int getDummyOpcode(ConstantTypes cpType) {\n+        switch (cpType) {\n+            case CONSTANT_FIELDREF:\n+              return Bytecodes.GETFIELD;\n+          case CONSTANT_METHODREF:\n+          case CONSTANT_INTERFACEMETHODREF:\n+              return Bytecodes.INVOKEVIRTUAL;\n+          case CONSTANT_INVOKEDYNAMIC:\n+              return Bytecodes.INVOKEDYNAMIC;\n+          default:\n+              throw new IllegalArgumentException(\"Unexpected constant pool entry type\");\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/ConstantPoolTestsHelper.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,1 @@\n+import jdk.vm.ci.hotspot.HotSpotConstantPool.Bytecodes;\n@@ -96,8 +97,4 @@\n-        int index = cpi;\n-        String cached = \"\";\n-        int cpci = dummyClass.getCPCacheIndex(cpi);\n-        if (cpci != ConstantPoolTestsHelper.NO_CP_CACHE_PRESENT) {\n-            index = cpci;\n-            cached = \"cached \";\n-        }\n-        int indexToVerify = CompilerToVMHelper.lookupKlassRefIndexInPool(constantPoolCTVM, index);\n+        int opcode = ConstantPoolTestsHelper.getDummyOpcode(cpType);\n+        int index = dummyClass.getCPCacheIndex(cpi);\n+        Asserts.assertTrue(index != ConstantPoolTestsHelper.NO_CP_CACHE_PRESENT, \"the class must have been rewritten\");\n+        int indexToVerify = CompilerToVMHelper.lookupKlassRefIndexInPool(constantPoolCTVM, index, opcode);\n@@ -106,3 +103,1 @@\n-                                           + \"applied to %sconstant pool index %d\",\n-                                   cached,\n-                                   index);\n+                                           + \"applied to cached constant pool index %d\", index);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/LookupKlassRefIndexInPoolTest.java","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,1 @@\n+import jdk.vm.ci.hotspot.HotSpotConstantPool.Bytecodes;\n@@ -98,8 +99,4 @@\n-        int index = cpi;\n-        String cached = \"\";\n-        int cpci = dummyClass.getCPCacheIndex(cpi);\n-        if (cpci != ConstantPoolTestsHelper.NO_CP_CACHE_PRESENT) {\n-            index = cpci;\n-            cached = \"cached \";\n-        }\n-        int indexToVerify = CompilerToVMHelper.lookupNameAndTypeRefIndexInPool(constantPoolCTVM, index);\n+        int opcode = ConstantPoolTestsHelper.getDummyOpcode(cpType);\n+        int index = dummyClass.getCPCacheIndex(cpi);\n+        Asserts.assertTrue(index != ConstantPoolTestsHelper.NO_CP_CACHE_PRESENT, \"the class must have been rewritten\");\n+        int indexToVerify = CompilerToVMHelper.lookupNameAndTypeRefIndexInPool(constantPoolCTVM, index, opcode);\n@@ -108,3 +105,1 @@\n-                                           + \" method applied to %sconstant pool index %d\",\n-                                   cached,\n-                                   index);\n+                                           + \" method applied to cached constant pool index %d\", index);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/LookupNameAndTypeRefIndexInPoolTest.java","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,1 @@\n+import jdk.vm.ci.hotspot.HotSpotConstantPool.Bytecodes;\n@@ -99,8 +100,4 @@\n-        int index = cpi;\n-        String cached = \"\";\n-        int cpci = dummyClass.getCPCacheIndex(cpi);\n-        if (cpci != ConstantPoolTestsHelper.NO_CP_CACHE_PRESENT) {\n-            index = cpci;\n-            cached = \"cached \";\n-        }\n-        String nameToVerify = CompilerToVMHelper.lookupNameInPool(constantPoolCTVM, index);\n+        int opcode = ConstantPoolTestsHelper.getDummyOpcode(cpType);\n+        int index = dummyClass.getCPCacheIndex(cpi);\n+        Asserts.assertTrue(index != ConstantPoolTestsHelper.NO_CP_CACHE_PRESENT, \"the class must have been rewritten\");\n+        String nameToVerify = CompilerToVMHelper.lookupNameInPool(constantPoolCTVM, index, opcode);\n@@ -108,1 +105,1 @@\n-        String msg = String.format(\"Wrong name accessed by %sconstant pool index %d\", cached, index);\n+        String msg = String.format(\"Wrong name accessed by cached constant pool index %d\", index);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/LookupNameInPoolTest.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,1 @@\n+import jdk.vm.ci.hotspot.HotSpotConstantPool.Bytecodes;\n@@ -99,8 +100,4 @@\n-        int index = cpi;\n-        String cached = \"\";\n-        int cpci = dummyClass.getCPCacheIndex(cpi);\n-        if (cpci != ConstantPoolTestsHelper.NO_CP_CACHE_PRESENT) {\n-            index = cpci;\n-            cached = \"cached \";\n-        }\n-        String sigToVerify = CompilerToVMHelper.lookupSignatureInPool(constantPoolCTVM, index);\n+        int opcode = ConstantPoolTestsHelper.getDummyOpcode(cpType);\n+        int index = dummyClass.getCPCacheIndex(cpi);\n+        Asserts.assertTrue(index != ConstantPoolTestsHelper.NO_CP_CACHE_PRESENT, \"the class must have been rewritten\");\n+        String sigToVerify = CompilerToVMHelper.lookupSignatureInPool(constantPoolCTVM, index, opcode);\n@@ -108,3 +105,1 @@\n-        String msg = String.format(\"Wrong signature accessed by %sconstant pool index %d\",\n-                                   cached,\n-                                   index);\n+        String msg = String.format(\"Wrong signature accessed by cached constant pool index %d\", index);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/LookupSignatureInPoolTest.java","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"}]}