{"files":[{"patch":"@@ -1801,1 +1801,1 @@\n-                                        int index) {\n+                                        int index, Bytecodes::Code bc) {\n@@ -1809,1 +1809,1 @@\n-  Symbol* name  = cpool->name_ref_at(index, Bytecodes::_getfield \/*We know it's a field*\/);\n+  Symbol* name  = cpool->name_ref_at(index, bc);\n@@ -1811,1 +1811,1 @@\n-  int nt_index = cpool->name_and_type_ref_index_at(index, Bytecodes::_getfield);\n+  int nt_index = cpool->name_and_type_ref_index_at(index, bc);\n@@ -1816,1 +1816,1 @@\n-  int holder_index = cpool->klass_ref_index_at(index, Bytecodes::_getfield);\n+  int holder_index = cpool->klass_ref_index_at(index, bc);\n@@ -1841,1 +1841,1 @@\n-void JVMCIRuntime::get_field_by_index(InstanceKlass* accessor, fieldDescriptor& fd, int index) {\n+void JVMCIRuntime::get_field_by_index(InstanceKlass* accessor, fieldDescriptor& fd, int index, Bytecodes::Code bc) {\n@@ -1843,1 +1843,1 @@\n-  return get_field_by_index_impl(accessor, fd, index);\n+  return get_field_by_index_impl(accessor, fd, index, bc);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-                                        int field_index);\n+                                        int field_index, Bytecodes::Code bc);\n@@ -416,1 +416,1 @@\n-                                   int field_index);\n+                                   int field_index, Bytecodes::Code bc);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -392,1 +392,1 @@\n-     * @param index constant pool index\n+     * @param rawIndex rewritten index in the bytecode stream\n@@ -396,2 +396,2 @@\n-    private int getNameAndTypeRefIndexAt(int index, int opcode) {\n-        return compilerToVM().lookupNameAndTypeRefIndexInPool(this, index, opcode);\n+    private int getNameAndTypeRefIndexAt(int rawIndex, int opcode) {\n+        return compilerToVM().lookupNameAndTypeRefIndexInPool(this, rawIndex, opcode);\n@@ -404,1 +404,1 @@\n-     * @param which constant pool index or constant pool cache index\n+     * @param rawIndex rewritten index in the bytecode stream\n@@ -408,2 +408,2 @@\n-    private String getNameOf(int which, int opcode) {\n-        return compilerToVM().lookupNameInPool(this, which, opcode);\n+    private String getNameOf(int rawIndex, int opcode) {\n+        return compilerToVM().lookupNameInPool(this, rawIndex, opcode);\n@@ -417,1 +417,0 @@\n-     * @param opcode the opcode of the instruction for which the lookup is being performed\n@@ -430,1 +429,1 @@\n-     * @param which constant pool index or constant pool cache index\n+     * @param rawIndex rewritten index in the bytecode stream\n@@ -434,2 +433,2 @@\n-    private String getSignatureOf(int which, int opcode) {\n-        return compilerToVM().lookupSignatureInPool(this, which, opcode);\n+    private String getSignatureOf(int rawIndex, int opcode) {\n+        return compilerToVM().lookupSignatureInPool(this, rawIndex, opcode);\n@@ -454,1 +453,2 @@\n-     * @param index constant pool index\n+     * @param rawIndex rewritten index in the bytecode stream\n+     * @param opcode the opcode of the instruction for which the lookup is being performed\n@@ -457,2 +457,2 @@\n-    private int getKlassRefIndexAt(int index, int opcode) {\n-        return compilerToVM().lookupKlassRefIndexInPool(this, index, opcode);\n+    private int getKlassRefIndexAt(int rawIndex, int opcode) {\n+        return compilerToVM().lookupKlassRefIndexInPool(this, rawIndex, opcode);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotConstantPool.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -109,2 +109,2 @@\n-    public static int lookupNameAndTypeRefIndexInPool(ConstantPool constantPool, int cpi, int opcode) {\n-        return CTVM.lookupNameAndTypeRefIndexInPool((HotSpotConstantPool) constantPool, cpi, opcode);\n+    public static int lookupNameAndTypeRefIndexInPool(ConstantPool constantPool, int rawIndex, int opcode) {\n+        return CTVM.lookupNameAndTypeRefIndexInPool((HotSpotConstantPool) constantPool, rawIndex, opcode);\n@@ -113,2 +113,2 @@\n-    public static String lookupNameInPool(ConstantPool constantPool, int cpi, int opcode) {\n-        return CTVM.lookupNameInPool((HotSpotConstantPool) constantPool, cpi, opcode);\n+    public static String lookupNameInPool(ConstantPool constantPool, int rawIndex, int opcode) {\n+        return CTVM.lookupNameInPool((HotSpotConstantPool) constantPool, rawIndex, opcode);\n@@ -117,2 +117,2 @@\n-    public static String lookupSignatureInPool(ConstantPool constantPool, int cpi, int opcode) {\n-        return CTVM.lookupSignatureInPool((HotSpotConstantPool) constantPool, cpi, opcode);\n+    public static String lookupSignatureInPool(ConstantPool constantPool, int rawIndex, int opcode) {\n+        return CTVM.lookupSignatureInPool((HotSpotConstantPool) constantPool, rawIndex, opcode);\n@@ -121,2 +121,2 @@\n-    public static int lookupKlassRefIndexInPool(ConstantPool constantPool, int cpi, int opcode) {\n-        return CTVM.lookupKlassRefIndexInPool((HotSpotConstantPool) constantPool, cpi, opcode);\n+    public static int lookupKlassRefIndexInPool(ConstantPool constantPool, int rawIndex, int opcode) {\n+        return CTVM.lookupKlassRefIndexInPool((HotSpotConstantPool) constantPool, rawIndex, opcode);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/common\/patches\/jdk.internal.vm.ci\/jdk\/vm\/ci\/hotspot\/CompilerToVMHelper.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.vm.ci.hotspot.HotSpotConstantPool.Bytecodes;\n@@ -100,0 +101,19 @@\n+    \/**\n+     * Select an arbitrary bytecode of the type associated with the Constant pool entry type\n+     *\n+     * @param cpType Constant type from the Constant pool cache\n+     * @return Arbitrary opcode of the kind associated with the CP entry\n+     *\/\n+    public static int getDummyOpcode(ConstantTypes cpType) {\n+        switch (cpType) {\n+            case CONSTANT_FIELDREF:\n+              return Bytecodes.GETFIELD;\n+          case CONSTANT_METHODREF:\n+          case CONSTANT_INTERFACEMETHODREF:\n+              return Bytecodes.INVOKEVIRTUAL;\n+          case CONSTANT_INVOKEDYNAMIC:\n+              return Bytecodes.INVOKEDYNAMIC;\n+          default:\n+              throw new IllegalArgumentException(\"Unexpected constant pool entry type\");\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/ConstantPoolTestsHelper.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-        int opcode;\n+        int opcode = ConstantPoolTestsHelper.getDummyOpcode(cpType);\n@@ -100,12 +100,0 @@\n-        \/\/ Select an arbitrary bytecode of the type associated with the Constant pool entry\n-        switch(cpType) {\n-          case CONSTANT_FIELDREF:\n-            opcode = Bytecodes.GETFIELD;\n-            break;\n-          case CONSTANT_METHODREF:\n-          case CONSTANT_INTERFACEMETHODREF:\n-            opcode = Bytecodes.INVOKEVIRTUAL;\n-            break;\n-          default:\n-            throw new Error(\"Unexpected consant pool entry\");\n-        }\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/LookupKlassRefIndexInPoolTest.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-        int opcode;\n+        int opcode = ConstantPoolTestsHelper.getDummyOpcode(cpType);\n@@ -102,15 +102,0 @@\n-        \/\/ Select an arbitrary bytecode of the type associated with the Constant pool entry\n-        switch(cpType) {\n-          case CONSTANT_FIELDREF:\n-            opcode = Bytecodes.GETFIELD;\n-            break;\n-          case CONSTANT_METHODREF:\n-          case CONSTANT_INTERFACEMETHODREF:\n-            opcode = Bytecodes.INVOKEVIRTUAL;\n-            break;\n-          case CONSTANT_INVOKEDYNAMIC:\n-            opcode = Bytecodes.INVOKEDYNAMIC;\n-            break;\n-          default:\n-            throw new Error(\"Unexpected consant pool entry\");\n-        }\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/LookupNameAndTypeRefIndexInPoolTest.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-        int opcode;\n+        int opcode = ConstantPoolTestsHelper.getDummyOpcode(cpType);\n@@ -103,15 +103,0 @@\n-        \/\/ Select an arbitrary bytecode of the type associated with the Constant pool entry\n-        switch(cpType) {\n-          case CONSTANT_FIELDREF:\n-            opcode = Bytecodes.GETFIELD;\n-            break;\n-          case CONSTANT_METHODREF:\n-          case CONSTANT_INTERFACEMETHODREF:\n-            opcode = Bytecodes.INVOKEVIRTUAL;\n-            break;\n-          case CONSTANT_INVOKEDYNAMIC:\n-            opcode = Bytecodes.INVOKEDYNAMIC;\n-            break;\n-          default:\n-            throw new Error(\"Unexpected consant pool entry\");\n-        }\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/LookupNameInPoolTest.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-        int opcode;\n+        int opcode = ConstantPoolTestsHelper.getDummyOpcode(cpType);\n@@ -103,15 +103,0 @@\n-        \/\/ Select an arbitrary bytecode of the type associated with the Constant pool entry\n-        switch(cpType) {\n-          case CONSTANT_FIELDREF:\n-            opcode = Bytecodes.GETFIELD;\n-            break;\n-          case CONSTANT_METHODREF:\n-          case CONSTANT_INTERFACEMETHODREF:\n-            opcode = Bytecodes.INVOKEVIRTUAL;\n-            break;\n-          case CONSTANT_INVOKEDYNAMIC:\n-            opcode = Bytecodes.INVOKEDYNAMIC;\n-            break;\n-          default:\n-            throw new Error(\"Unexpected consant pool entry\");\n-        }\n@@ -120,1 +105,1 @@\n-        String msg = String.format(\"Wrong signature accessed by cache constant pool index %d\", index);\n+        String msg = String.format(\"Wrong signature accessed by cached constant pool index %d\", index);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/LookupSignatureInPoolTest.java","additions":2,"deletions":17,"binary":false,"changes":19,"status":"modified"}]}