{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import java.util.Objects;\n@@ -59,1 +60,0 @@\n-    private static final MethodHandle DO_ENUM_SWITCH;\n@@ -61,1 +61,2 @@\n-    private static final MethodHandle EQ_CHECK;\n+    private static final MethodHandle INTEGER_EQ_CHECK;\n+    private static final MethodHandle OBJECT_EQ_CHECK;\n@@ -63,0 +64,2 @@\n+    private static final MethodHandle IS_ZERO;\n+    private static final MethodHandle ENUM_LOOKUP;\n@@ -66,2 +69,0 @@\n-            DO_ENUM_SWITCH = LOOKUP.findStatic(SwitchBootstraps.class, \"doEnumSwitch\",\n-                                           MethodType.methodType(int.class, Enum.class, int.class, Object[].class));\n@@ -70,1 +71,3 @@\n-            EQ_CHECK = LOOKUP.findStatic(SwitchBootstraps.class, \"eqCheck\",\n+            INTEGER_EQ_CHECK = LOOKUP.findStatic(SwitchBootstraps.class, \"integerEqCheck\",\n+                                           MethodType.methodType(boolean.class, Object.class, Integer.class));\n+            OBJECT_EQ_CHECK = LOOKUP.findStatic(Objects.class, \"equals\",\n@@ -74,0 +77,4 @@\n+            IS_ZERO = LOOKUP.findStatic(SwitchBootstraps.class, \"isZero\",\n+                                           MethodType.methodType(boolean.class, int.class));\n+            ENUM_LOOKUP = LOOKUP.findStatic(SwitchBootstraps.class, \"enumLookup\",\n+                                           MethodType.methodType(int.class, int[].class, Object.class));\n@@ -140,1 +147,1 @@\n-        MethodHandle target  = createMethodHandleSwitch(labels);\n+        MethodHandle target = createMethodHandleSwitch(labels);\n@@ -157,0 +164,46 @@\n+    \/*\n+     * Construct test chains for labels inside switch, to handle switch repeats:\n+     * switch (idx) {\n+     *     case 0 -> if (selector matches label[0]) return 0; else if (selector matches label[1]) return 1; else ...\n+     *     case 1 -> if (selector matches label[1]) return 1; else ...\n+     *     ...\n+     * }\n+     *\/\n+    private static MethodHandle createRepeatIndexSwitch(Object[] labels) {\n+        MethodHandle def = MethodHandles.dropArguments(MethodHandles.constant(int.class, labels.length), 0, Object.class);\n+        MethodHandle[] testChains = new MethodHandle[labels.length];\n+        List<Object> labelsList = new ArrayList<>(Arrays.asList(labels));\n+\n+        Collections.reverse(labelsList);\n+\n+        for (int i = 0; i < labels.length; i++) {\n+            MethodHandle test = def;\n+            int idx = labels.length - 1;\n+            List<Object> currentLabels = labelsList.subList(0, labels.length - i);\n+\n+            for (int j = 0; j < currentLabels.size(); j++, idx--) {\n+                Object currentLabel = currentLabels.get(j);\n+                if (j + 1 < currentLabels.size() && currentLabels.get(j + 1) == currentLabel) continue;\n+                MethodHandle currentTest;\n+                if (currentLabel instanceof Class<?>) {\n+                    currentTest = INSTANCEOF_CHECK;\n+                } else if (currentLabel instanceof Integer) {\n+                    currentTest = INTEGER_EQ_CHECK;\n+                } else {\n+                    currentTest = OBJECT_EQ_CHECK;\n+                }\n+                test = MethodHandles.guardWithTest(MethodHandles.insertArguments(currentTest, 1, currentLabel),\n+                                                   MethodHandles.dropArguments(MethodHandles.constant(int.class, idx), 0, Object.class),\n+                                                   test);\n+            }\n+            testChains[i] = MethodHandles.dropArguments(test, 0, int.class);\n+        }\n+\n+        return MethodHandles.tableSwitch(MethodHandles.dropArguments(def, 0, int.class), testChains);\n+    }\n+\n+    \/*\n+     * Construct code that maps the given selector and repeat index to a case label number:\n+     * if (selector == null) return -1;\n+     * else return \"createRepeatIndexSwitch(labels)\"\n+     *\/\n@@ -161,24 +214,1 @@\n-            MethodHandle[] testChains = new MethodHandle[labels.length];\n-            List<Object> labelsList = new ArrayList<>(Arrays.asList(labels));\n-            Collections.reverse(labelsList);\n-            for (int i = 0; i < labels.length; i++) {\n-                MethodHandle test = def;\n-                int idx = labels.length - 1;\n-                List<Object> currentLabels = labelsList.subList(0, labels.length - i);\n-\n-                for (int j = 0; j < currentLabels.size(); j++, idx--) {\n-                    Object currentLabel = currentLabels.get(j);\n-                    if (j + 1 < currentLabels.size() && currentLabels.get(j + 1) == currentLabel) continue;\n-                    MethodHandle currentTest;\n-                    if (currentLabel instanceof Class<?>) {\n-                        currentTest = INSTANCEOF_CHECK;\n-                    } else {\n-                        currentTest = EQ_CHECK;\n-                    }\n-                    test = MethodHandles.guardWithTest(MethodHandles.insertArguments(currentTest, 1, currentLabel),\n-                                                       MethodHandles.dropArguments(MethodHandles.constant(int.class, idx), 0, Object.class),\n-                                                       test);\n-                }\n-                testChains[i] = MethodHandles.dropArguments(test, 0, int.class);\n-            }\n-            mainTest = MethodHandles.tableSwitch(MethodHandles.dropArguments(def, 0, int.class), testChains);\n+            mainTest = createRepeatIndexSwitch(labels);\n@@ -199,8 +229,4 @@\n-    private static boolean eqCheck(Object value, Object label) {\n-        if (label instanceof Integer constant) {\n-            if (value instanceof Number input && constant.intValue() == input.intValue()) {\n-                return true;\n-            } else if (value instanceof Character input && constant.intValue() == input.charValue()) {\n-                return true;\n-            }\n-        } else if (label.equals(value)) {\n+    private static boolean integerEqCheck(Object value, Integer constant) {\n+        if (value instanceof Number input && constant.intValue() == input.intValue()) {\n+            return true;\n+        } else if (value instanceof Character input && constant.intValue() == input.charValue()) {\n@@ -217,0 +243,4 @@\n+    private static boolean isZero(int value) {\n+        return value == 0;\n+    }\n+\n@@ -286,2 +316,49 @@\n-        MethodHandle target =\n-                MethodHandles.insertArguments(DO_ENUM_SWITCH, 2, (Object) labels);\n+        MethodHandle target;\n+        boolean constantsOnly = Stream.of(labels).allMatch(l -> l == null || enumClass.isAssignableFrom(l.getClass()));\n+\n+        if (constantsOnly) {\n+            long nonNullValues = Stream.of(labels).filter(l -> l != null).count();\n+            long distinctNonNullValues = Stream.of(labels).filter(l -> l != null).distinct().count();\n+\n+            if (nonNullValues != distinctNonNullValues) {\n+                constantsOnly = false;\n+            }\n+        }\n+\n+        if (labels.length > 0 && constantsOnly) {\n+            \/\/If all labels are enum constants, construct an optimized handle for repeat index 0:\n+            \/\/if (selector == null) return -1\n+            \/\/else if (idx == 0) return switch (selector.ordinal()) {\n+            \/\/                              case <label1-ordinal>: return 0;\n+            \/\/                              case <label2-ordinal>: return 1;\n+            \/\/                              ...\n+            \/\/                          };\n+            \/\/else return \"createRepeatIndexSwitch(labels)\"\n+            MethodHandle[] map = new MethodHandle[enumClass.getEnumConstants().length];\n+            MethodHandle def = MethodHandles.dropArguments(MethodHandles.constant(int.class, labels.length), 0, int.class, Object.class);\n+            int ordinal = 0;\n+\n+            for (Object constant : enumClass.getEnumConstants()) {\n+                map[ordinal] = def;\n+\n+                for (int i = 0; i < labels.length; i++) {\n+                    if (labels[i] == constant) {\n+                        map[ordinal] = MethodHandles.dropArguments(MethodHandles.constant(int.class, i), 0, int.class, Object.class);\n+                        break;\n+                    }\n+                }\n+\n+                ordinal++;\n+            }\n+\n+            MethodHandle body =\n+                    MethodHandles.guardWithTest(MethodHandles.dropArguments(NULL_CHECK, 0, int.class),\n+                                                MethodHandles.dropArguments(MethodHandles.constant(int.class, -1), 0, int.class, Object.class),\n+                                                MethodHandles.guardWithTest(MethodHandles.dropArguments(IS_ZERO, 1, Object.class),\n+                                                                            createRepeatIndexSwitch(labels),\n+                                                                            MethodHandles.tableSwitch(def, map)));\n+            target = MethodHandles.permuteArguments(body, MethodType.methodType(int.class, Object.class, int.class), 1, 0);\n+        } else {\n+            target = createMethodHandleSwitch(labels);\n+        }\n+\n@@ -293,0 +370,4 @@\n+    private static int enumLookup(int[] map, Object label) {\n+        return map[((Enum) label).ordinal()];\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/SwitchBootstraps.java","additions":122,"deletions":41,"binary":false,"changes":163,"status":"modified"},{"patch":"@@ -111,0 +111,1 @@\n+        testType(\"\", 0, 0);\n@@ -129,0 +130,6 @@\n+        testEnum(E1.B, 0, 0, \"B\", \"A\");\n+        testEnum(E1.A, 0, 1, \"B\", \"A\");\n+        testEnum(E1.A, 0, 0, \"A\", \"A\", \"B\");\n+        testEnum(E1.A, 1, 1, \"A\", \"A\", \"B\");\n+        testEnum(E1.A, 2, 3, \"A\", \"A\", \"B\");\n+        testEnum(E1.A, 0, 0);\n","filename":"test\/jdk\/java\/lang\/runtime\/SwitchBootstrapsTest.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}