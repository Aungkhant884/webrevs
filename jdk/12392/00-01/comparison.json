{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -225,1 +225,1 @@\n-            return ForceGC.wait(() -> weakRef.refersTo(null), 2000L);\n+            return ForceGC.waitFor(() -> weakRef.refersTo(null), 2000L);\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/UnloadingTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,5 @@\n-     * is 1 second scaled with the jtreg testing timeout factor.\n+     * is 1 second scaled with the jtreg testing timeout factor. This method\n+     * is equivalent to calling {@link #waitFor(BooleanSupplier, long)\n+     * waitFor(booleanSupplier, Math.round(1000L * JTREG_TIMEOUT_FACTOR)}\n+     * where {@code JTREG_TIMEOUT_FACTOR} is the value of\n+     * \"test.timeout.factor\" system property.\n@@ -47,1 +51,1 @@\n-     * {@link #wait(BooleanSupplier, long)} can be used to specify\n+     * {@link #waitFor(BooleanSupplier, long)} can be used to specify\n@@ -56,1 +60,1 @@\n-        return wait(booleanSupplier, Math.round(1000L * TIMEOUT_FACTOR));\n+        return waitFor(booleanSupplier, Math.round(1000L * TIMEOUT_FACTOR));\n@@ -73,1 +77,1 @@\n-    public static boolean wait(BooleanSupplier booleanSupplier, long timeout) {\n+    public static boolean waitFor(BooleanSupplier booleanSupplier, long timeout) {\n","filename":"test\/lib\/jdk\/test\/lib\/util\/ForceGC.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"}]}