{"files":[{"patch":"@@ -259,1 +259,1 @@\n-jlong VM_Version_Ext::_max_qualified_cpu_frequency = 0;\n+int64_t VM_Version_Ext::_max_qualified_cpu_frequency = 0;\n@@ -647,3 +647,1 @@\n- *  See Intel Application note 485 (chapter 10) for details\n- *  on frequency extraction from cpu brand string.\n- *  http:\/\/www.intel.com\/content\/dam\/www\/public\/us\/en\/documents\/application-notes\/processor-identification-cpuid-instruction-note.pdf\n+ *  For information about extracting the frequency from the cpu brand string, please see:\n@@ -651,0 +649,5 @@\n+ *    Intel Processor Identification and the CPUID Instruction\n+ *    Application Note 485\n+ *    May 2012\n+ *\n+ * The return value is the frequency in Hz.\n@@ -652,2 +655,1 @@\n-jlong VM_Version_Ext::max_qualified_cpu_freq_from_brand_string(void) {\n-  \/\/ get brand string\n+int64_t VM_Version_Ext::max_qualified_cpu_freq_from_brand_string(void) {\n@@ -658,24 +660,16 @@\n-\n-  const u8 MEGA = 1000000;\n-  u8 multiplier = 0;\n-  jlong frequency = 0;\n-\n-  \/\/ the frequency information in the cpu brand string\n-  \/\/ is given in either of two formats \"x.xxyHz\" or \"xxxxyHz\",\n-  \/\/ where y=M,G,T and x is digits\n-  const char* Hz_location = strchr(brand_string, 'H');\n-\n-  if (Hz_location != NULL) {\n-    if (*(Hz_location + 1) == 'z') {\n-      \/\/ switch on y in \"yHz\"\n-      switch(*(Hz_location - 1)) {\n-        case 'M' :\n-          \/\/ Set multiplier to frequency is in Hz\n-          multiplier = MEGA;\n-          break;\n-        case 'G' :\n-          multiplier = MEGA * 1000;\n-          break;\n-        case 'T' :\n-          multiplier = MEGA * 1000 * 1000;\n-          break;\n+  const int64_t MEGA = 1000000;\n+  int64_t multiplier = 0;\n+  int64_t frequency = 0;\n+  uint8_t idx = 0;\n+  \/\/ The brand string buffer is at most 48 bytes.\n+  \/\/ -2 is to prevent buffer overrun when looking for y in yHz, as z is +2 from y.\n+  for (; idx < 48-2; ++idx) {\n+    \/\/ Format is either \"x.xxyHz\" or \"xxxxyHz\", where y=M, G, T and x are digits.\n+    \/\/ Search brand string for \"yHz\" where y is M, G, or T.\n+    if (brand_string[idx+1] == 'H' && brand_string[idx+2] == 'z') {\n+      if (brand_string[idx] == 'M') {\n+        multiplier = MEGA;\n+      } else if (brand_string[idx] == 'G') {\n+        multiplier = MEGA * 1000;\n+      } else if (brand_string[idx] == 'T') {\n+        multiplier = MEGA * MEGA;\n@@ -683,0 +677,1 @@\n+      break;\n@@ -685,1 +680,0 @@\n-\n@@ -687,5 +681,5 @@\n-    \/\/ compute frequency (in Hz) from brand string\n-    if (*(Hz_location - 4) == '.') { \/\/ if format is \"x.xx\"\n-      frequency =  (jlong)(*(Hz_location - 5) - '0') * (multiplier);\n-      frequency += (jlong)(*(Hz_location - 3) - '0') * (multiplier \/ 10);\n-      frequency += (jlong)(*(Hz_location - 2) - '0') * (multiplier \/ 100);\n+    \/\/ Compute freqency (in Hz) from brand string.\n+    if (brand_string[idx-3] == '.') { \/\/ if format is \"x.xx\"\n+      frequency =  (brand_string[idx-4] - '0') * multiplier;\n+      frequency += (brand_string[idx-2] - '0') * multiplier \/ 10;\n+      frequency += (brand_string[idx-1] - '0') * multiplier \/ 100;\n@@ -693,4 +687,4 @@\n-      frequency =  (jlong)(*(Hz_location - 5) - '0') * 1000;\n-      frequency += (jlong)(*(Hz_location - 4) - '0') * 100;\n-      frequency += (jlong)(*(Hz_location - 3) - '0') * 10;\n-      frequency += (jlong)(*(Hz_location - 2) - '0');\n+      frequency =  (brand_string[idx-4] - '0') * 1000;\n+      frequency += (brand_string[idx-3] - '0') * 100;\n+      frequency += (brand_string[idx-2] - '0') * 10;\n+      frequency += (brand_string[idx-1] - '0');\n@@ -704,1 +698,1 @@\n-jlong VM_Version_Ext::maximum_qualified_cpu_frequency(void) {\n+int64_t VM_Version_Ext::maximum_qualified_cpu_frequency(void) {\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_ext_x86.cpp","additions":35,"deletions":41,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  static jlong             _max_qualified_cpu_frequency;\n+  static int64_t           _max_qualified_cpu_frequency;\n@@ -75,1 +75,1 @@\n-  static jlong max_qualified_cpu_freq_from_brand_string(void);\n+  static int64_t max_qualified_cpu_freq_from_brand_string(void);\n@@ -96,1 +96,1 @@\n-  static jlong maximum_qualified_cpu_frequency(void);\n+  static int64_t maximum_qualified_cpu_frequency(void);\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_ext_x86.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}