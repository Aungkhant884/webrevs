{"files":[{"patch":"@@ -44,0 +44,1 @@\n+import java.lang.reflect.Field;\n@@ -65,1 +66,3 @@\n-            writeObjects(); \/\/Creates the binary files for the test.\n+            \/\/ Creates the binary files for the test:\n+            \/\/ java --add-opens=java.desktop\/java.awt.dnd=ALL-UNNAMED BadSerializationTest -write\n+            writeObjects();\n@@ -95,2 +98,1 @@\n-     * Creates the stubs for the test. It is necessary to disable all checks in\n-     * the constructors of DragGestureEvent\/DragGestureRecognizer before run.\n+     * Creates the stubs for the test.\n@@ -100,0 +102,1 @@\n+        evs.add(new KeyEvent(new JPanel(), 0, 0, 0, 0, 'a', 0));\n@@ -102,2 +105,1 @@\n-        write(new DragGestureEvent(new NothingNull(), ACTION_COPY, ori, evs),\n-              \"noEvents\");\n+        write(createNoEvents(ori, evs), \"noEvents\");\n@@ -105,1 +107,1 @@\n-        evs.add(new KeyEvent(new JPanel(), 0, 0, 0, 0, 'a', 0));\n+        write(createNullComponent(ori, evs), \"nullComponent\");\n@@ -107,2 +109,1 @@\n-        write(new DragGestureEvent(new NullComponent(), ACTION_COPY, ori, evs),\n-              \"nullComponent\");\n+        write(createBadAction(ori, evs), \"badAction\");\n@@ -110,2 +111,1 @@\n-        write(new DragGestureEvent(new NothingNull(), 100, ori, evs),\n-              \"badAction\");\n+        write(createNullDragSource(ori, evs), \"nullDragSource\");\n@@ -113,5 +113,1 @@\n-        write(new DragGestureEvent(new NullDragSource(), ACTION_COPY, ori, evs),\n-              \"nullDragSource\");\n-\n-        write(new DragGestureEvent(new NothingNull(), ACTION_COPY, null, evs),\n-              \"nullOrigin\");\n+        write(createNullOrigin(ori, evs), \"nullOrigin\");\n@@ -130,8 +126,5 @@\n-    public static final class NullDragSource extends DragGestureRecognizer {\n-\n-        public NullDragSource() {\n-            super(null, new JPanel());\n-        }\n-\n-        protected void registerListeners() {\n-        }\n+    public static DragGestureEvent createNoEvents(Point ori, ArrayList<InputEvent> evs) {\n+        DragGestureEvent noEvents = new DragGestureEvent(new NothingNull(), ACTION_COPY, ori, evs);\n+        setField(DragGestureEvent.class, noEvents, \"events\", new ArrayList<>());\n+        return noEvents;\n+    }\n@@ -139,2 +132,6 @@\n-        protected void unregisterListeners() {\n-        }\n+    public static DragGestureEvent createNullComponent(Point ori, ArrayList<InputEvent> evs) {\n+        DragGestureRecognizer dgr = new NothingNull();\n+        DragGestureEvent nullComponent = new DragGestureEvent(dgr, ACTION_COPY, ori, evs);\n+        setField(DragGestureRecognizer.class, dgr, \"component\", null);\n+        setField(DragGestureEvent.class, nullComponent, \"component\", null);\n+        return nullComponent;\n@@ -143,1 +140,7 @@\n-    public static final class NullComponent extends DragGestureRecognizer {\n+    public static DragGestureEvent createNullDragSource(Point ori, ArrayList<InputEvent> evs) {\n+        DragGestureRecognizer dgr = new NothingNull();\n+        DragGestureEvent nullDragSource = new DragGestureEvent(dgr, ACTION_COPY, ori, evs);\n+        setField(DragGestureRecognizer.class, dgr, \"dragSource\", null);\n+        setField(DragGestureEvent.class, nullDragSource, \"dragSource\", null);\n+        return nullDragSource;\n+    }\n@@ -145,3 +148,5 @@\n-        public NullComponent() {\n-            super(new DragSource(), null);\n-        }\n+    public static DragGestureEvent createNullOrigin(Point ori, ArrayList<InputEvent> evs) {\n+        DragGestureEvent nullOrigin = new DragGestureEvent(new NothingNull(), ACTION_COPY, ori, evs);\n+        setField(DragGestureEvent.class, nullOrigin, \"origin\", null);\n+        return nullOrigin;\n+    }\n@@ -149,2 +154,5 @@\n-        protected void registerListeners() {\n-        }\n+    public static DragGestureEvent createBadAction(Point ori, ArrayList<InputEvent> evs) {\n+        DragGestureEvent badAction = new DragGestureEvent(new NothingNull(), ACTION_COPY, ori, evs);\n+        setField(DragGestureEvent.class, badAction, \"action\", 100);\n+        return badAction;\n+    }\n@@ -152,1 +160,7 @@\n-        protected void unregisterListeners() {\n+    public static void setField(Class<?> clazz, Object instance, String fieldName, Object value) {\n+        try {\n+            Field field = clazz.getDeclaredField(fieldName);\n+            field.setAccessible(true);\n+            field.set(instance, value);\n+        } catch (ReflectiveOperationException e) {\n+            throw new LinkageError(e.getMessage(), e);\n","filename":"test\/jdk\/java\/awt\/dnd\/BadSerializationTest\/BadSerializationTest.java","additions":46,"deletions":32,"binary":false,"changes":78,"status":"modified"}]}