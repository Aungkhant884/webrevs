{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,2 +60,0 @@\n- *    7. adding <strictfp> modifiers to public method        <br>\n- *    8. adding <strictfp> modifiers to 4 methods            <br>\n@@ -85,2 +83,0 @@\n-            {\"newclass07\",\"adding <strictfp> modifiers to public method\"},\n-            {\"newclass08\",\"adding <strictfp> modifiers to 4 methods\"}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/redefineClasses\/redefineclasses007.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,2 +51,0 @@\n- *       7. newclass07 - adding <strictfp> modifiers to public method\n- *       8. newclass08 - adding <strictfp> modifiers to 4 methods\n@@ -70,1 +68,1 @@\n- *      newclass01 newclass02 newclass03 newclass04 newclass05 newclass06 newclass07 newclass08\n+ *      newclass01 newclass02 newclass03 newclass04 newclass05 newclass06\n@@ -82,1 +80,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/redefineClasses\/redefineclasses007\/TestDescription.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package nsk.jdi.VirtualMachine.redefineClasses;\n-\n-import nsk.share.*;\n-import nsk.share.jpda.*;\n-import nsk.share.jdi.*;\n-\n-\/\/    THIS TEST IS LINE NUMBER SENSITIVE\n-\n-\/**\n- *  <code>redefineclasses007a<\/code> is deugee's part of the redefineclasses007.\n- *  changing method modifiers (1 method to strictfp)\n- *\/\n-public class redefineclasses007a {\n-\n-    public final static String brkpMethodName = \"main\";\n-    public final static int brkpLineNumber = 49;\n-\n-    private static Log log;\n-\n-    public static void main (String argv[]) {\n-        ArgumentHandler argHandler = new ArgumentHandler(argv);\n-        log = new Log(System.err, argHandler);\n-        IOPipe pipe = argHandler.createDebugeeIOPipe(log);\n-        pipe.println(\"ready\");\n-\n-        String instr = pipe.readln(); \/\/ brkpLineNumber\n-        if (!instr.equals(\"continue\")) {\n-            log.complain(\"DEBUGEE> unexpected signal of debugger.\");\n-            System.exit(Consts.TEST_FAILED + Consts.JCK_STATUS_BASE);\n-        }\n-\n-        instr = pipe.readln();\n-        if (instr.equals(\"quit\")) {\n-            log.display(\"completed succesfully.\");\n-            System.exit(Consts.TEST_PASSED + Consts.JCK_STATUS_BASE);\n-        }\n-\n-        log.complain(\"DEBUGEE> unexpected signal of debugger.\");\n-        System.exit(Consts.TEST_FAILED + Consts.JCK_STATUS_BASE);\n-     }\n-\n-    strictfp public void dummyMethod01(){\n-    }\n-\n-    protected void dummyMethod02(){\n-    }\n-\n-    private void dummyMethod03(){\n-    }\n-\n-    void dummyMethod04() {\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/redefineClasses\/redefineclasses007\/newclass07\/redefineclasses007a.java","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package nsk.jdi.VirtualMachine.redefineClasses;\n-\n-import nsk.share.*;\n-import nsk.share.jpda.*;\n-import nsk.share.jdi.*;\n-\n-\/\/    THIS TEST IS LINE NUMBER SENSITIVE\n-\n-\/**\n- *  <code>redefineclasses007a<\/code> is deugee's part of the redefineclasses007.\n- *  changing method modifiers (4 methods to strictfp)\n- *\/\n-public class redefineclasses007a {\n-\n-    public final static String brkpMethodName = \"main\";\n-    public final static int brkpLineNumber = 49;\n-\n-    private static Log log;\n-\n-    public static void main (String argv[]) {\n-        ArgumentHandler argHandler = new ArgumentHandler(argv);\n-        log = new Log(System.err, argHandler);\n-        IOPipe pipe = argHandler.createDebugeeIOPipe(log);\n-        pipe.println(\"ready\");\n-\n-        String instr = pipe.readln(); \/\/ brkpLineNumber\n-        if (!instr.equals(\"continue\")) {\n-            log.complain(\"DEBUGEE> unexpected signal of debugger.\");\n-            System.exit(Consts.TEST_FAILED + Consts.JCK_STATUS_BASE);\n-        }\n-\n-        instr = pipe.readln();\n-        if (instr.equals(\"quit\")) {\n-            log.display(\"completed succesfully.\");\n-            System.exit(Consts.TEST_PASSED + Consts.JCK_STATUS_BASE);\n-        }\n-\n-        log.complain(\"DEBUGEE> unexpected signal of debugger.\");\n-        System.exit(Consts.TEST_FAILED + Consts.JCK_STATUS_BASE);\n-     }\n-\n-    strictfp public void dummyMethod01(){\n-    }\n-\n-    strictfp protected void dummyMethod02(){\n-    }\n-\n-    strictfp private void dummyMethod03(){\n-    }\n-\n-    strictfp void dummyMethod04() {\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/redefineClasses\/redefineclasses007\/newclass08\/redefineclasses007a.java","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,2 +59,0 @@\n- *    7.newclass07 - adding <strictfp> modifiers to public method         <br>\n- *    8.newclass08 - adding <strictfp> modifiers to 3 methods             <br>\n@@ -83,2 +81,0 @@\n-            {\"newclass07\",\"adding <strictfp> modifiers to public method\"},\n-            {\"newclass08\",\"adding <strictfp> modifiers to 3 methods\"}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/redefineClasses\/redefineclasses008.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,2 +50,0 @@\n- *       7. newclass07 - adding <strictfp> modifiers to public method\n- *       8. newclass08 - adding <strictfp> modifiers to 3 methods\n@@ -72,1 +70,1 @@\n- *      newclass01 newclass02 newclass03 newclass04 newclass05 newclass06 newclass07 newclass08\n+ *      newclass01 newclass02 newclass03 newclass04 newclass05 newclass06\n@@ -84,1 +82,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/redefineClasses\/redefineclasses008\/TestDescription.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package nsk.jdi.VirtualMachine.redefineClasses;\n-\n-import nsk.share.*;\n-import nsk.share.jpda.*;\n-import nsk.share.jdi.*;\n-\n-\/\/    THIS TEST IS LINE NUMBER SENSITIVE\n-\n-\/**\n- *  <code>redefineclasses008a<\/code> is deugee's part of the redefineclasses008.\n- *  changing method modifiers (1 method to strictfp)\n- *\/\n-public class redefineclasses008a {\n-\n-    public final static String brkpMethodName = \"main\";\n-    public final static int brkpLineNumber = 49;\n-\n-    private static Log log;\n-\n-    public static void main (String argv[]) {\n-        ArgumentHandler argHandler = new ArgumentHandler(argv);\n-        log = new Log(System.err, argHandler);\n-        IOPipe pipe = argHandler.createDebugeeIOPipe(log);\n-        pipe.println(\"ready\");\n-\n-        String instr = pipe.readln(); \/\/ brkpLineNumber\n-        if (!instr.equals(\"continue\")) {\n-            log.complain(\"DEBUGEE> unexpected signal of debugger.\");\n-            System.exit(Consts.TEST_FAILED + Consts.JCK_STATUS_BASE);\n-        }\n-\n-        instr = pipe.readln();\n-        if (instr.equals(\"quit\")) {\n-            log.display(\"completed succesfully.\");\n-            System.exit(Consts.TEST_PASSED + Consts.JCK_STATUS_BASE);\n-        }\n-\n-        log.complain(\"DEBUGEE> unexpected signal of debugger.\");\n-        System.exit(Consts.TEST_FAILED + Consts.JCK_STATUS_BASE);\n-     }\n-\n-    strictfp public void dummyMethod01(){\n-    }\n-\n-    protected void dummyMethod02(){\n-    }\n-\n-    private void dummyMethod03(){\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/redefineClasses\/redefineclasses008\/newclass07\/redefineclasses008a.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package nsk.jdi.VirtualMachine.redefineClasses;\n-\n-import nsk.share.*;\n-import nsk.share.jpda.*;\n-import nsk.share.jdi.*;\n-\n-\/\/    THIS TEST IS LINE NUMBER SENSITIVE\n-\n-\/**\n- *  <code>redefineclasses008a<\/code> is deugee's part of the redefineclasses008.\n- *  changing method modifiers (3 methods to strictfp)\n- *\/\n-public class redefineclasses008a {\n-\n-    public final static String brkpMethodName = \"main\";\n-    public final static int brkpLineNumber = 49;\n-\n-    private static Log log;\n-\n-    public static void main (String argv[]) {\n-        ArgumentHandler argHandler = new ArgumentHandler(argv);\n-        log = new Log(System.err, argHandler);\n-        IOPipe pipe = argHandler.createDebugeeIOPipe(log);\n-        pipe.println(\"ready\");\n-\n-        String instr = pipe.readln(); \/\/ brkpLineNumber\n-        if (!instr.equals(\"continue\")) {\n-            log.complain(\"DEBUGEE> unexpected signal of debugger.\");\n-            System.exit(Consts.TEST_FAILED + Consts.JCK_STATUS_BASE);\n-        }\n-\n-        instr = pipe.readln();\n-        if (instr.equals(\"quit\")) {\n-            log.display(\"completed succesfully.\");\n-            System.exit(Consts.TEST_PASSED + Consts.JCK_STATUS_BASE);\n-        }\n-\n-        log.complain(\"DEBUGEE> unexpected signal of debugger.\");\n-        System.exit(Consts.TEST_FAILED + Consts.JCK_STATUS_BASE);\n-     }\n-\n-    strictfp public void dummyMethod01(){\n-    }\n-\n-    strictfp protected void dummyMethod02(){\n-    }\n-\n-    strictfp private void dummyMethod03(){\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/VirtualMachine\/redefineClasses\/redefineclasses008\/newclass08\/redefineclasses008a.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-#define ACC_STRICT      0x0800\n@@ -86,1 +85,0 @@\n-    if (mod & ACC_STRICT) printf(\" STRICT\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetClassModifiers\/getclmdf006\/getclmdf006.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-#define ACC_STRICT      0x0800\n@@ -86,1 +85,0 @@\n-    if (mod & ACC_STRICT) printf(\" STRICT\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetClassModifiers\/getclmdf007\/getclmdf007.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,0 @@\n-#define ACC_STRICT      0x0800\n@@ -149,1 +148,0 @@\n-    if (mod & ACC_STRICT) printf(\" STRICT\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetFieldModifiers\/getfldmdf004\/getfldmdf004.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,4 +64,0 @@\n-    strictfp float meth_2(float f1, float f2) {\n-        return f1 \/ f2;\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetMethodModifiers\/methmod001.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-#define ACC_STRICT        0x800\n@@ -60,1 +59,0 @@\n-    if (mod & ACC_STRICT) printf(\" STRICT\");\n@@ -174,1 +172,0 @@\n-    checkMeth(jvmti, env, cls, \"meth_2\", \"(FF)F\", 0,  ACC_STRICT);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetMethodModifiers\/methmod001\/methmod001.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,2 +65,1 @@\n-    ACC_SUPER                    = 0x00000020,\n-    ACC_STRICT                   = 0x00000800\n+    ACC_SUPER                    = 0x00000020\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jvmti\/Injector.h","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}