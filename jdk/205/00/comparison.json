{"files":[{"patch":"@@ -185,1 +185,1 @@\n-            if (fileSize + size > maxSize) {\n+            if (fileSize + size > maxSize || chunks == maxChunks) {\n@@ -192,6 +192,0 @@\n-            if (chunks == maxChunks) {\n-                reduced.add(fileSize);\n-                fileSize = 0;\n-                chunks = 1;\n-                continue;\n-            }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Disassemble.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+ * @bug 8253050\n@@ -58,0 +59,1 @@\n+        Path recordingFileD = Paths.get(\"many-chunks-D-\" + dateText + \".jfr\");\n@@ -61,0 +63,1 @@\n+        Files.copy(recordingFileA, recordingFileD);\n@@ -65,0 +68,1 @@\n+        String fileDText = recordingFileD.toAbsolutePath().toString();\n@@ -100,0 +104,9 @@\n+\n+        \/\/ test JDK-8253050\n+        output = ExecuteHelper.jfr(\"disassemble\", \"--max-chunks\", \"1\", fileDText);\n+        String chunks = output.firstMatch(\"File consists of (\\\\d+) chunks\", 1);\n+        output.shouldContain(\"The recording will be split into \" + chunks + \" files\");\n+        String chunkFilePrefix = fileDText.substring(0, fileDText.length() - 4) + \"_\";\n+        for (long i = 0; i < Long.parseLong(chunks); i++) {\n+            verifyRecording(chunkFilePrefix + String.format(\"%0\" + chunks.length() + \"d\", i) + \".jfr\");\n+        }\n","filename":"test\/jdk\/jdk\/jfr\/tool\/TestDisassemble.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"}]}