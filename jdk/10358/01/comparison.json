{"files":[{"patch":"@@ -140,0 +140,1 @@\n+        ptypes.add(null); \/\/placeholder for return type\n@@ -159,1 +160,1 @@\n-        ptypes.add(0, descriptor.substring(cur, cur + rLen));\n+        ptypes.set(0, descriptor.substring(cur, cur + rLen));\n@@ -206,8 +207,20 @@\n-                    \/\/ Skip leading 'L' and ignore first appearance of ';'\n-                    index++;\n-                    int indexOfSemi = descriptor.indexOf(';', index);\n-                    if (indexOfSemi != -1) {\n-                        String unqualifiedName = descriptor.substring(index, indexOfSemi);\n-                        boolean legal = verifyUnqualifiedClassName(unqualifiedName);\n-                        if (!legal) {\n-                            return 0;\n+                    \/\/ state variable for detection of illegal states, such as:\n+                    \/\/ empty unqualified name, '\/\/', leading '\/', or trailing '\/'\n+                    boolean legal = false;\n+                    while (++index < end) {\n+                        switch (descriptor.charAt(index)) {\n+                            case ';' -> {\n+                                \/\/ illegal state on parser exit indicates empty unqualified name or trailing '\/'\n+                                return legal ? index - start + 1 : 0;\n+                            }\n+                            case '.', '[' -> {\n+                                \/\/ do not permit '.' or '['\n+                                return 0;\n+                            }\n+                            case '\/' -> {\n+                                \/\/ illegal state when received '\/' indicates '\/\/' or leading '\/'\n+                                if (!legal) return 0;\n+                                legal = false;\n+                            }\n+                            default ->\n+                                legal = true;\n@@ -215,1 +228,0 @@\n-                        return index - start + unqualifiedName.length() + 1;\n@@ -234,21 +246,0 @@\n-\n-    static boolean verifyUnqualifiedClassName(String name) {\n-        for (int index = 0; index < name.length(); index++) {\n-            char ch = name.charAt(index);\n-            if (ch < 128) {\n-                if (ch == '.' || ch == ';' || ch == '[' ) {\n-                    return false;   \/\/ do not permit '.', ';', or '['\n-                }\n-                if (ch == '\/') {\n-                    \/\/ check for '\/\/' or leading or trailing '\/' which are not legal\n-                    \/\/ unqualified name must not be empty\n-                    if (index == 0 || index + 1 >= name.length() || name.charAt(index + 1) == '\/') {\n-                        return false;\n-                    }\n-                }\n-            } else {\n-                index ++;\n-            }\n-        }\n-        return true;\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ConstantUtils.java","additions":22,"deletions":31,"binary":false,"changes":53,"status":"modified"}]}