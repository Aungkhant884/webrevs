{"files":[{"patch":"@@ -66,3 +66,0 @@\n-      case Op_AndReductionV:\n-      case Op_OrReductionV:\n-      case Op_XorReductionV:\n@@ -788,0 +785,114 @@\n+\/\/ vector and reduction\n+\n+instruct reduce_andI(iRegINoSp dst, iRegIorL2I src1, vReg src2, vReg tmp) %{\n+  predicate(n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (AndReductionV src1 src2));\n+  effect(TEMP tmp);\n+  ins_cost(VEC_COST);\n+  format %{ \"vmv.s.x $tmp, $src1\\t#@reduce_andI\\n\\t\"\n+            \"vredand.vs $tmp, $src2, $tmp\\n\\t\"\n+            \"vmv.x.s  $dst, $tmp\" %}\n+  ins_encode %{\n+    __ vsetvli(t0, x0, Assembler::e32);\n+    __ vmv_s_x(as_VectorRegister($tmp$$reg), $src1$$Register);\n+    __ vredand_vs(as_VectorRegister($tmp$$reg), as_VectorRegister($src2$$reg),\n+                  as_VectorRegister($tmp$$reg));\n+    __ vmv_x_s($dst$$Register, as_VectorRegister($tmp$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_andL(iRegLNoSp dst, iRegL src1, vReg src2, vReg tmp) %{\n+  predicate(n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n+  match(Set dst (AndReductionV src1 src2));\n+  effect(TEMP tmp);\n+  ins_cost(VEC_COST);\n+  format %{ \"vmv.s.x $tmp, $src1\\t#@reduce_andL\\n\\t\"\n+            \"vredand.vs $tmp, $src2, $tmp\\n\\t\"\n+            \"vmv.x.s  $dst, $tmp\" %}\n+  ins_encode %{\n+    __ vsetvli(t0, x0, Assembler::e64);\n+    __ vmv_s_x(as_VectorRegister($tmp$$reg), $src1$$Register);\n+    __ vredand_vs(as_VectorRegister($tmp$$reg), as_VectorRegister($src2$$reg),\n+                  as_VectorRegister($tmp$$reg));\n+    __ vmv_x_s($dst$$Register, as_VectorRegister($tmp$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector or reduction\n+\n+instruct reduce_orI(iRegINoSp dst, iRegIorL2I src1, vReg src2, vReg tmp) %{\n+  predicate(n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (OrReductionV src1 src2));\n+  effect(TEMP tmp);\n+  ins_cost(VEC_COST);\n+  format %{ \"vmv.s.x $tmp, $src1\\t#@reduce_orI\\n\\t\"\n+            \"vredor.vs $tmp, $src2, $tmp\\n\\t\"\n+            \"vmv.x.s  $dst, $tmp\" %}\n+  ins_encode %{\n+    __ vsetvli(t0, x0, Assembler::e32);\n+    __ vmv_s_x(as_VectorRegister($tmp$$reg), $src1$$Register);\n+    __ vredor_vs(as_VectorRegister($tmp$$reg), as_VectorRegister($src2$$reg),\n+                  as_VectorRegister($tmp$$reg));\n+    __ vmv_x_s($dst$$Register, as_VectorRegister($tmp$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_orL(iRegLNoSp dst, iRegL src1, vReg src2, vReg tmp) %{\n+  predicate(n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n+  match(Set dst (OrReductionV src1 src2));\n+  effect(TEMP tmp);\n+  ins_cost(VEC_COST);\n+  format %{ \"vmv.s.x $tmp, $src1\\t#@reduce_orL\\n\\t\"\n+            \"vredor.vs $tmp, $src2, $tmp\\n\\t\"\n+            \"vmv.x.s  $dst, $tmp\" %}\n+  ins_encode %{\n+    __ vsetvli(t0, x0, Assembler::e64);\n+    __ vmv_s_x(as_VectorRegister($tmp$$reg), $src1$$Register);\n+    __ vredor_vs(as_VectorRegister($tmp$$reg), as_VectorRegister($src2$$reg),\n+                  as_VectorRegister($tmp$$reg));\n+    __ vmv_x_s($dst$$Register, as_VectorRegister($tmp$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector xor reduction\n+\n+instruct reduce_xorI(iRegINoSp dst, iRegIorL2I src1, vReg src2, vReg tmp) %{\n+  predicate(n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (XorReductionV src1 src2));\n+  effect(TEMP tmp);\n+  ins_cost(VEC_COST);\n+  format %{ \"vmv.s.x $tmp, $src1\\t#@reduce_xorI\\n\\t\"\n+            \"vredxor.vs $tmp, $src2, $tmp\\n\\t\"\n+            \"vmv.x.s  $dst, $tmp\" %}\n+  ins_encode %{\n+    __ vsetvli(t0, x0, Assembler::e32);\n+    __ vmv_s_x(as_VectorRegister($tmp$$reg), $src1$$Register);\n+    __ vredxor_vs(as_VectorRegister($tmp$$reg), as_VectorRegister($src2$$reg),\n+                  as_VectorRegister($tmp$$reg));\n+    __ vmv_x_s($dst$$Register, as_VectorRegister($tmp$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_xorL(iRegLNoSp dst, iRegL src1, vReg src2, vReg tmp) %{\n+  predicate(n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n+  match(Set dst (XorReductionV src1 src2));\n+  effect(TEMP tmp);\n+  ins_cost(VEC_COST);\n+  format %{ \"vmv.s.x $tmp, $src1\\t#@reduce_xorL\\n\\t\"\n+            \"vredxor.vs $tmp, $src2, $tmp\\n\\t\"\n+            \"vmv.x.s  $dst, $tmp\" %}\n+  ins_encode %{\n+    __ vsetvli(t0, x0, Assembler::e64);\n+    __ vmv_s_x(as_VectorRegister($tmp$$reg), $src1$$Register);\n+    __ vredxor_vs(as_VectorRegister($tmp$$reg), as_VectorRegister($src2$$reg),\n+                  as_VectorRegister($tmp$$reg));\n+    __ vmv_x_s($dst$$Register, as_VectorRegister($tmp$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":114,"deletions":3,"binary":false,"changes":117,"status":"modified"}]}