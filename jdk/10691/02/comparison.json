{"files":[{"patch":"@@ -1681,0 +1681,27 @@\n+\n+void C2_MacroAssembler::reduce_operation(Register dst, VectorRegister temp,\n+                                         Register src1, VectorRegister src2,\n+                                         BasicType bt, REDUCTION_OP op) {\n+  Assembler::SEW sew = Assembler::elemtype_to_sew(bt);\n+  vsetvli(t0, x0, sew);\n+\n+  vmv_s_x(temp, src1);\n+\n+  switch (op) {\n+    case REDUCTION_OP::ADD:\n+      vredsum_vs(temp, src2, temp);\n+      break;\n+    case REDUCTION_OP::AND:\n+      vredand_vs(temp, src2, temp);\n+      break;\n+    case REDUCTION_OP::OR:\n+      vredor_vs(temp, src2, temp);\n+      break;\n+    case REDUCTION_OP::XOR:\n+      vredxor_vs(temp, src2, temp);\n+      break;\n+    default:\n+      ShouldNotReachHere();\n+  }\n+  vmv_x_s(dst, temp);\n+}\n\\ No newline at end of file\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -194,0 +194,4 @@\n+ \n+ void reduce_operation(Register dst, VectorRegister temp,\n+                       Register src1, VectorRegister src2,\n+                       BasicType bt, REDUCTION_OP op);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -973,0 +973,3 @@\n+\/\/ reduction related operations\n+enum REDUCTION_OP {ADD, AND, OR, XOR};\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -66,3 +66,0 @@\n-      case Op_AndReductionV:\n-      case Op_OrReductionV:\n-      case Op_XorReductionV:\n@@ -788,0 +785,102 @@\n+\/\/ vector and reduction\n+\n+instruct reduce_andI(iRegINoSp dst, iRegIorL2I src1, vReg src2, vReg tmp) %{\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) != T_LONG);\n+  match(Set dst (AndReductionV src1 src2));\n+  effect(TEMP tmp);\n+  ins_cost(VEC_COST);\n+  format %{ \"vmv.s.x $tmp, $src1\\t#@reduce_andI\\n\\t\"\n+            \"vredand.vs $tmp, $src2, $tmp\\n\\t\"\n+            \"vmv.x.s  $dst, $tmp\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    __ reduce_operation($dst$$Register, as_VectorRegister($tmp$$reg),\n+                        $src1$$Register, as_VectorRegister($src2$$reg), bt, REDUCTION_OP::AND);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_andL(iRegLNoSp dst, iRegL src1, vReg src2, vReg tmp) %{\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_LONG);\n+  match(Set dst (AndReductionV src1 src2));\n+  effect(TEMP tmp);\n+  ins_cost(VEC_COST);\n+  format %{ \"vmv.s.x $tmp, $src1\\t#@reduce_andL\\n\\t\"\n+            \"vredand.vs $tmp, $src2, $tmp\\n\\t\"\n+            \"vmv.x.s  $dst, $tmp\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    __ reduce_operation($dst$$Register, as_VectorRegister($tmp$$reg),\n+                        $src1$$Register, as_VectorRegister($src2$$reg), bt, REDUCTION_OP::AND);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector or reduction\n+\n+instruct reduce_orI(iRegINoSp dst, iRegIorL2I src1, vReg src2, vReg tmp) %{\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) != T_LONG);\n+  match(Set dst (OrReductionV src1 src2));\n+  effect(TEMP tmp);\n+  ins_cost(VEC_COST);\n+  format %{ \"vmv.s.x $tmp, $src1\\t#@reduce_orI\\n\\t\"\n+            \"vredor.vs $tmp, $src2, $tmp\\n\\t\"\n+            \"vmv.x.s  $dst, $tmp\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    __ reduce_operation($dst$$Register, as_VectorRegister($tmp$$reg),\n+                        $src1$$Register, as_VectorRegister($src2$$reg), bt, REDUCTION_OP::OR);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_orL(iRegLNoSp dst, iRegL src1, vReg src2, vReg tmp) %{\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_LONG);\n+  match(Set dst (OrReductionV src1 src2));\n+  effect(TEMP tmp);\n+  ins_cost(VEC_COST);\n+  format %{ \"vmv.s.x $tmp, $src1\\t#@reduce_orL\\n\\t\"\n+            \"vredor.vs $tmp, $src2, $tmp\\n\\t\"\n+            \"vmv.x.s  $dst, $tmp\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    __ reduce_operation($dst$$Register, as_VectorRegister($tmp$$reg),\n+                        $src1$$Register, as_VectorRegister($src2$$reg), bt, REDUCTION_OP::OR);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector xor reduction\n+\n+instruct reduce_xorI(iRegINoSp dst, iRegIorL2I src1, vReg src2, vReg tmp) %{\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) != T_LONG);\n+  match(Set dst (XorReductionV src1 src2));\n+  effect(TEMP tmp);\n+  ins_cost(VEC_COST);\n+  format %{ \"vmv.s.x $tmp, $src1\\t#@reduce_xorI\\n\\t\"\n+            \"vredxor.vs $tmp, $src2, $tmp\\n\\t\"\n+            \"vmv.x.s  $dst, $tmp\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    __ reduce_operation($dst$$Register, as_VectorRegister($tmp$$reg),\n+                        $src1$$Register, as_VectorRegister($src2$$reg), bt, REDUCTION_OP::XOR);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_xorL(iRegLNoSp dst, iRegL src1, vReg src2, vReg tmp) %{\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_LONG);\n+  match(Set dst (XorReductionV src1 src2));\n+  effect(TEMP tmp);\n+  ins_cost(VEC_COST);\n+  format %{ \"vmv.s.x $tmp, $src1\\t#@reduce_xorL\\n\\t\"\n+            \"vredxor.vs $tmp, $src2, $tmp\\n\\t\"\n+            \"vmv.x.s  $dst, $tmp\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    __ reduce_operation($dst$$Register, as_VectorRegister($tmp$$reg),\n+                        $src1$$Register, as_VectorRegister($src2$$reg), bt, REDUCTION_OP::XOR);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":102,"deletions":3,"binary":false,"changes":105,"status":"modified"}]}