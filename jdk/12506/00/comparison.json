{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,0 @@\n-  int pad = VerifyThread ? 256 : 0;\/\/ Extra slop space for more verify code\n@@ -74,3 +73,2 @@\n-  \/\/ Measured 8\/7\/03 at 256 in 32bit debug build (no VerifyThread)\n-  \/\/ Measured 8\/7\/03 at 528 in 32bit debug build (VerifyThread)\n-  CodeBuffer buffer(\"exception_blob\", 600+pad, 512);\n+  \/\/ Measured 8\/7\/03 at 256 in 32bit debug build\n+  CodeBuffer buffer(\"exception_blob\", 600, 512);\n","filename":"src\/hotspot\/cpu\/arm\/runtime_arm.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1609,1 +1609,0 @@\n-  int pad = VerifyThread ? 512 : 0;\n@@ -1611,1 +1610,1 @@\n-  CodeBuffer buffer(\"uncommon_trap_blob\", 2700+pad, 512);\n+  CodeBuffer buffer(\"uncommon_trap_blob\", 2700, 512);\n@@ -1613,3 +1612,2 @@\n-  \/\/ Measured 8\/7\/03 at 660 in 32bit debug build (no VerifyThread)\n-  \/\/ Measured 8\/7\/03 at 1028 in 32bit debug build (VerifyThread)\n-  CodeBuffer buffer(\"uncommon_trap_blob\", 2000+pad, 512);\n+  \/\/ Measured 8\/7\/03 at 660 in 32bit debug build\n+  CodeBuffer buffer(\"uncommon_trap_blob\", 2000, 512);\n","filename":"src\/hotspot\/cpu\/arm\/sharedRuntime_arm.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -893,1 +893,0 @@\n-  verify_thread();\n@@ -1132,1 +1131,0 @@\n-    verify_thread();\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2961,2 +2961,0 @@\n-  verify_thread();\n-\n@@ -4233,6 +4231,0 @@\n-void MacroAssembler::verify_thread() {\n-  if (VerifyThread) {\n-    unimplemented(\"'VerifyThread' currently not implemented on PPC\");\n-  }\n-}\n-\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -897,3 +897,0 @@\n-  \/\/ Verify R16_thread contents.\n-  void verify_thread();\n-\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -138,1 +138,0 @@\n-    __ verify_thread();\n@@ -142,2 +141,1 @@\n-    \/\/ Null method test is replicated below in compiled case,\n-    \/\/ it might be able to address across the verify_thread()\n+    \/\/ Null method test is replicated below in compiled case.\n","filename":"src\/hotspot\/cpu\/ppc\/methodHandles_ppc.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -2308,2 +2308,0 @@\n-  __ verify_thread();\n-\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1706,2 +1706,0 @@\n-  __ verify_thread();\n-\n@@ -1960,1 +1958,0 @@\n-    __ verify_thread();\n@@ -2089,1 +2086,0 @@\n-    __ verify_thread();\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1638,3 +1638,0 @@\n-  \/\/ Note: on SPARC, we use InterpreterMacroAssembler::if_cmp also.\n-  __ verify_thread();\n-\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 20223, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,1 +114,0 @@\n-  \/\/ verify_thread(); \/\/ Too slow. We will just verify on method entry & exit.\n@@ -957,1 +956,0 @@\n-  verify_thread();\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -3355,2 +3355,0 @@\n-  verify_thread();\n-\n@@ -3364,2 +3362,0 @@\n-  verify_thread();\n-\n@@ -5389,6 +5385,0 @@\n-void MacroAssembler::verify_thread() {\n-  if (VerifyThread) {\n-    unimplemented(\"\", 117);\n-  }\n-}\n-\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -907,3 +907,0 @@\n-  \/\/ Verify Z_thread contents.\n-  void verify_thread();\n-\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -155,1 +155,0 @@\n-    __ verify_thread();\n@@ -162,2 +161,1 @@\n-    \/\/ Null method test is replicated below in compiled case,\n-    \/\/ it might be able to address across the verify_thread().\n+    \/\/ Null method test is replicated below in compiled case.,\n","filename":"src\/hotspot\/cpu\/s390\/methodHandles_s390.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,1 +79,0 @@\n-  __ verify_thread();\n","filename":"src\/hotspot\/cpu\/s390\/runtime_s390.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -824,5 +824,0 @@\n-  if (VerifyThread) {\n-    st->print_cr(\"Verify_Thread\");\n-    st->print(\"\\t\");\n-  }\n-\n@@ -853,2 +848,0 @@\n-  __ verify_thread();\n-\n@@ -934,1 +927,0 @@\n-  __ verify_thread();\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1550,2 +1550,0 @@\n-  __ verify_thread();\n-\n@@ -1974,1 +1972,0 @@\n-  __ verify_thread(); \/\/ Z_thread must be correct.\n","filename":"src\/hotspot\/cpu\/s390\/sharedRuntime_s390.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1779,2 +1779,0 @@\n-\n-  __ verify_thread();\n","filename":"src\/hotspot\/cpu\/s390\/templateInterpreterGenerator_s390.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1189,3 +1189,0 @@\n-  develop(bool, VerifyThread, false,                                        \\\n-          \"Watch the thread register for corruption (SPARC only)\")          \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}