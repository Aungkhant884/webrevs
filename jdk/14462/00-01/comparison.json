{"files":[{"patch":"@@ -1,1 +1,1 @@\n-.\\\" Copyright (c) 1994, 2020, Oracle and\/or its affiliates. All rights reserved.\n+.\\\" Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -416,1 +416,1 @@\n-\\f[V]-proc:\\f[R][\\f[V]none\\f[R], \\f[V]only\\f[R]]\n+\\f[V]-proc:\\f[R][\\f[V]none\\f[R], \\f[V]only\\f[R], \\f[V]full\\f[R]]\n@@ -422,0 +422,2 @@\n+If this option is not used, or \\f[V]-proc:full\\f[R] is specified,\n+annotation processing and compilation are done.\n@@ -739,0 +741,4 @@\n+\\f[V]output-file-clash\\f[R]: Warns if any output file is overwritten\n+during compilation.\n+This can occur, for example, on case-insensitive filesystems.\n+.IP \\[bu] 2\n@@ -779,0 +785,3 @@\n+\\f[V]this-escape\\f[R]: Warns about constructors leaking \\f[V]this\\f[R]\n+prior to subclass initialization.\n+.IP \\[bu] 2\n@@ -2216,0 +2225,42 @@\n+\\f[V]this-escape\\f[R]\n+Warns about constructors leaking \\f[V]this\\f[R] prior to subclass\n+initialization.\n+For example, this class:\n+.RS\n+.IP\n+.nf\n+\\f[CB]\n+public class MyClass {\n+  public MyClass() {\n+    System.out.println(this.hashCode());\n+  }\n+}\n+\\f[R]\n+.fi\n+.PP\n+generates the following warning:\n+.IP\n+.nf\n+\\f[CB]\n+MyClass.java:3: warning: [this-escape] possible \\[aq]this\\[aq] escape\n+                         before subclass is fully initialized\n+    System.out.println(this.hashCode());\n+                                    \\[ha]\n+\\f[R]\n+.fi\n+.PP\n+A \\[aq]this\\[aq] escape warning is generated when a constructor does\n+something that might result in a subclass method being invoked before\n+the constructor returns.\n+In such cases the subclass method would be operating on an incompletely\n+initialized instance.\n+In the above example, a subclass of \\f[V]MyClass\\f[R] that overrides\n+\\f[V]hashCode()\\f[R] to incorporate its own fields would likely produce\n+an incorrect result when invoked as shown.\n+.PP\n+Warnings are only generated if a subclass could exist that is outside of\n+the current module (or package, if no module) being compiled.\n+So, for example, constructors in final and non-public classes do not\n+generate warnings.\n+.RE\n+.TP\n","filename":"src\/jdk.compiler\/share\/man\/javac.1","additions":53,"deletions":2,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-.\\\" Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+.\\\" Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,0 +70,5 @@\n+.TP\n+\\f[V]TOOLING\\f[R]\n+Defines \\f[V]javac\\f[R], \\f[V]jar\\f[R], and other methods for running\n+JDK tools via their command-line interface within the \\f[V]jshell\\f[R]\n+tool.\n@@ -234,0 +239,5 @@\n+.TP\n+\\f[V]TOOLING\\f[R]\n+Defines \\f[V]javac\\f[R], \\f[V]jar\\f[R], and other methods for running\n+JDK tools via their command-line interface within the \\f[V]jshell\\f[R]\n+tool.\n@@ -454,0 +464,5 @@\n+.TP\n+\\f[V]TOOLING\\f[R]\n+Defines \\f[V]javac\\f[R], \\f[V]jar\\f[R], and other methods for running\n+JDK tools via their command-line interface within the \\f[V]jshell\\f[R]\n+tool.\n@@ -768,0 +783,5 @@\n+.TP\n+\\f[V]TOOLING\\f[R]\n+Defines \\f[V]javac\\f[R], \\f[V]jar\\f[R], and other methods for running\n+JDK tools via their command-line interface within the \\f[V]jshell\\f[R]\n+tool.\n","filename":"src\/jdk.jshell\/share\/man\/jshell.1","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"}]}