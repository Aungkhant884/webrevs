{"files":[{"patch":"@@ -155,0 +155,2 @@\n+  \/\/ Called to force initialization of the JVMCI compiler\n+  \/\/ early in VM startup.\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -317,0 +317,1 @@\n+  ResourceMark rm;\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1642,1 +1642,1 @@\n-  fatal(\"Fatal exception in JVMCI: %s\", message);\n+  fatal(\"Fatal JVMCI exception (see JVMCI Events for stack trace): %s\", message);\n@@ -1991,0 +1991,1 @@\n+    ResourceMark rm;\n@@ -2004,1 +2005,0 @@\n-      ResourceMark rm;\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -79,0 +80,1 @@\n+                    System.err.println(\"saw \" + watch + \" - exiting loop\");\n@@ -104,1 +106,1 @@\n-            output.shouldContain(\"fatal error: Fatal exception in JVMCI: testing JVMCI fatal exception handling\");\n+            output.shouldContain(\"testing JVMCI fatal exception handling\");\n@@ -133,1 +135,1 @@\n-            output.shouldContain(\"COMPILE SKIPPED: uncaught exception in call_HotSpotJVMCIRuntime_compileMethod [compiler.jvmci.TestUncaughtErrorInCompileMethod$CompilerCreationError]\");\n+            output.shouldContain(\"COMPILE SKIPPED: uncaught exception in call_HotSpotJVMCIRuntime_compileMethod [compiler.jvmci.TestUncaughtErrorInCompileMethod$CompilerCreationError\");\n@@ -141,1 +143,5 @@\n-    static class CompilerCreationError extends InternalError {}\n+    static class CompilerCreationError extends InternalError {\n+        CompilerCreationError(int attempt) {\n+            super(\"attempt \" + attempt);\n+        }\n+    }\n@@ -147,0 +153,1 @@\n+                final AtomicInteger counter = new AtomicInteger();\n@@ -154,5 +161,15 @@\n-                    File watch = new File(tmpFileName);\n-                    try {\n-                        watch.createNewFile();\n-                    } catch (IOException e) {\n-                        e.printStackTrace();\n+                    int attempt = counter.incrementAndGet();\n+                    CompilerCreationError e = new CompilerCreationError(attempt);\n+                    e.printStackTrace();\n+                    if (attempt == 10) {\n+                        \/\/ Delay the creation of the file that causes the\n+                        \/\/ loop in main to exit so that compilation failures\n+                        \/\/ have time to be reported by -XX:+PrintCompilation.\n+                        File watch = new File(tmpFileName);\n+                        try {\n+                            System.err.println(\"creating \" + watch);\n+                            watch.createNewFile();\n+                            System.err.println(\"created \" + watch);\n+                        } catch (IOException ex) {\n+                            ex.printStackTrace();\n+                        }    \n@@ -160,1 +177,1 @@\n-                    throw new CompilerCreationError();\n+                    throw e;\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestUncaughtErrorInCompileMethod.java","additions":26,"deletions":9,"binary":false,"changes":35,"status":"modified"}]}