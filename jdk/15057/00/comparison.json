{"files":[{"patch":"@@ -125,1 +125,1 @@\n-        SortedSet<TypeElement> interfaces = new TreeSet<>(comparators.makeGeneralPurposeComparator());\n+        SortedSet<TypeElement> interfaces = new TreeSet<>(comparators.generalPurposeComparator());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractTreeWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-            pkgToPackageAnnotations = new TreeSet<>(comparators.makeClassUseComparator());\n+            pkgToPackageAnnotations = new TreeSet<>(comparators.classUseComparator());\n@@ -103,1 +103,1 @@\n-        this.pkgSet = new TreeSet<>(comparators.makePackageComparator());\n+        this.pkgSet = new TreeSet<>(comparators.packageComparator());\n@@ -173,1 +173,1 @@\n-            elements.sort(comparators.makeClassUseComparator());\n+            elements.sort(comparators.classUseComparator());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassUseWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-        summariesComparator = utils.comparators.makeIndexElementComparator();\n+        summariesComparator = utils.comparators.indexElementComparator();\n@@ -966,1 +966,1 @@\n-        SortedSet<TypeMirror> interfaces = new TreeSet<>(comparators.makeTypeMirrorClassUseComparator());\n+        SortedSet<TypeMirror> interfaces = new TreeSet<>(comparators.typeMirrorClassUseComparator());\n@@ -978,1 +978,1 @@\n-                new TreeSet<>(comparators.makeTypeMirrorIndexUseComparator());\n+                new TreeSet<>(comparators.typeMirrorIndexUseComparator());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -312,1 +312,1 @@\n-                    new TreeSet<>(utils.comparators.makeGeneralPurposeComparator());\n+                    new TreeSet<>(utils.comparators.generalPurposeComparator());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ConstantsSummaryWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -402,1 +402,1 @@\n-                new TreeSet<>(utils.comparators.makeOverrideUseComparator());\n+                new TreeSet<>(utils.comparators.overrideUseComparator());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/MethodWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-            = new TreeMap<>(comparators.makeModuleComparator());\n+            = new TreeMap<>(comparators.moduleComparator());\n@@ -84,1 +84,1 @@\n-            = new TreeMap<>(comparators.makeModuleComparator());\n+            = new TreeMap<>(comparators.moduleComparator());\n@@ -114,1 +114,1 @@\n-    private final Map<PackageElement, PackageEntry> packages = new TreeMap<>(utils.comparators.makePackageComparator());\n+    private final Map<PackageElement, PackageEntry> packages = new TreeMap<>(utils.comparators.packageComparator());\n@@ -120,1 +120,1 @@\n-            = new TreeMap<>(comparators.makeModuleComparator());\n+            = new TreeMap<>(comparators.moduleComparator());\n@@ -126,1 +126,1 @@\n-            = new TreeMap<>(comparators.makeModuleComparator());\n+            = new TreeMap<>(comparators.moduleComparator());\n@@ -132,1 +132,1 @@\n-            = new TreeSet<>(comparators.makeAllClassesComparator());\n+            = new TreeSet<>(comparators.allClassesComparator());\n@@ -138,1 +138,1 @@\n-            = new TreeMap<>(comparators.makeAllClassesComparator());\n+            = new TreeMap<>(comparators.allClassesComparator());\n@@ -144,1 +144,1 @@\n-            = new TreeMap<>(comparators.makeAllClassesComparator());\n+            = new TreeMap<>(comparators.allClassesComparator());\n@@ -151,1 +151,1 @@\n-            = new TreeMap<>(comparators.makeAllClassesComparator());\n+            = new TreeMap<>(comparators.allClassesComparator());\n@@ -351,1 +351,1 @@\n-                    SortedSet<ModuleElement> mdleList = new TreeSet<>(utils.comparators.makeModuleComparator());\n+                    SortedSet<ModuleElement> mdleList = new TreeSet<>(utils.comparators.moduleComparator());\n@@ -369,1 +369,1 @@\n-                    SortedSet<ModuleElement> mdleList = new TreeSet<>(utils.comparators.makeModuleComparator());\n+                    SortedSet<ModuleElement> mdleList = new TreeSet<>(utils.comparators.moduleComparator());\n@@ -381,1 +381,1 @@\n-            SortedSet<PackageElement> exportedPackages = new TreeSet<>(utils.comparators.makePackageComparator());\n+            SortedSet<PackageElement> exportedPackages = new TreeSet<>(utils.comparators.packageComparator());\n@@ -396,1 +396,1 @@\n-            SortedSet<PackageElement> openPackages = new TreeSet<>(utils.comparators.makePackageComparator());\n+            SortedSet<PackageElement> openPackages = new TreeSet<>(utils.comparators.packageComparator());\n@@ -428,1 +428,1 @@\n-                SortedSet<TypeElement> implSet = new TreeSet<>(utils.comparators.makeAllClassesComparator());\n+                SortedSet<TypeElement> implSet = new TreeSet<>(utils.comparators.allClassesComparator());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ModuleWriter.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-                        usedClasses = new TreeSet<>(comparators.makeGeneralPurposeComparator());\n+                        usedClasses = new TreeSet<>(comparators.generalPurposeComparator());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PackageUseWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-        SortedSet<TypeElement> rootclasses = new TreeSet<>(utils.comparators.makeGeneralPurposeComparator());\n+        SortedSet<TypeElement> rootclasses = new TreeSet<>(utils.comparators.generalPurposeComparator());\n@@ -446,1 +446,1 @@\n-        SortedSet<SerialFieldTree> tags = new TreeSet<>(utils.comparators.makeSerialFieldTreeComparator());\n+        SortedSet<SerialFieldTree> tags = new TreeSet<>(utils.comparators.serialFieldTreeComparator());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SerializedFormWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-        SortedSet<TypeElement> classes = new TreeSet<>(utils.comparators.makeGeneralPurposeComparator());\n+        SortedSet<TypeElement> classes = new TreeSet<>(utils.comparators.generalPurposeComparator());\n@@ -239,1 +239,1 @@\n-        SortedSet<PackageElement> packages = new TreeSet<>(utils.comparators.makePackageComparator());\n+        SortedSet<PackageElement> packages = new TreeSet<>(utils.comparators.packageComparator());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/AbstractDoclet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -289,1 +289,1 @@\n-        modules = new TreeSet<>(comparators.makeModuleComparator());\n+        modules = new TreeSet<>(comparators.moduleComparator());\n@@ -292,1 +292,1 @@\n-        modulePackages = new TreeMap<>(comparators.makeModuleComparator());\n+        modulePackages = new TreeMap<>(comparators.moduleComparator());\n@@ -297,1 +297,1 @@\n-                        .computeIfAbsent(mdle, m -> new TreeSet<>(comparators.makePackageComparator()));\n+                        .computeIfAbsent(mdle, m -> new TreeSet<>(comparators.packageComparator()));\n@@ -306,1 +306,1 @@\n-                        .computeIfAbsent(mdle, m -> new TreeSet<>(comparators.makePackageComparator()));\n+                        .computeIfAbsent(mdle, m -> new TreeSet<>(comparators.packageComparator()));\n@@ -322,1 +322,1 @@\n-        packages = new TreeSet<>(utils.comparators.makePackageComparator());\n+        packages = new TreeSet<>(utils.comparators.packageComparator());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/BaseConfiguration.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import javax.lang.model.type.DeclaredType;\n@@ -59,2 +58,0 @@\n-import com.sun.tools.javac.code.Type;\n-import com.sun.tools.javac.code.TypeTag;\n@@ -63,1 +60,0 @@\n-import com.sun.tools.javac.model.JavacElements;\n@@ -283,2 +279,2 @@\n-            methods = new TreeSet<>(utils.comparators.makeGeneralPurposeComparator());\n-            fields = new TreeSet<>(utils.comparators.makeGeneralPurposeComparator());\n+            methods = new TreeSet<>(utils.comparators.generalPurposeComparator());\n+            fields = new TreeSet<>(utils.comparators.generalPurposeComparator());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/WorkArounds.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-        Comparator<Element> comparator = utils.comparators.makeClassUseComparator();\n+        Comparator<Element> comparator = utils.comparators.classUseComparator();\n@@ -209,1 +209,1 @@\n-        Comparator<Element> comparator = utils.comparators.makeClassUseComparator();\n+        Comparator<Element> comparator = utils.comparators.classUseComparator();\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/ClassTree.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -202,1 +202,1 @@\n-        classToPackage = new TreeMap<>(comparators.makeClassUseComparator());\n+        classToPackage = new TreeMap<>(comparators.classUseComparator());\n@@ -288,1 +288,1 @@\n-            ret = new TreeSet<>(comparators.makeClassUseComparator());\n+            ret = new TreeSet<>(comparators.classUseComparator());\n@@ -307,1 +307,1 @@\n-            ret = new TreeSet<>(comparators.makeClassUseComparator());\n+            ret = new TreeSet<>(comparators.classUseComparator());\n@@ -328,1 +328,1 @@\n-            ret = new TreeSet<>(comparators.makeClassUseComparator());\n+            ret = new TreeSet<>(comparators.classUseComparator());\n@@ -349,1 +349,1 @@\n-        Set<TypeMirror> classArgs = new TreeSet<>(comparators.makeTypeMirrorClassUseComparator());\n+        Set<TypeMirror> classArgs = new TreeSet<>(comparators.typeMirrorClassUseComparator());\n@@ -428,1 +428,1 @@\n-            pkgSet = new TreeSet<>(comparators.makeClassUseComparator());\n+            pkgSet = new TreeSet<>(comparators.classUseComparator());\n@@ -437,1 +437,1 @@\n-            clsSet = new TreeSet<>(comparators.makeClassUseComparator());\n+            clsSet = new TreeSet<>(comparators.classUseComparator());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/ClassUseMapper.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -58,2 +58,3 @@\n-     * Comparator for ModuleElements, simply compares the fully qualified names\n-     * @return a Comparator\n+     * Returns a comparator for module elements, that simply compares the fully qualified names\n+     *\n+     * @return the comparator\n@@ -61,1 +62,1 @@\n-    public Comparator<Element> makeModuleComparator() {\n+    public Comparator<Element> moduleComparator() {\n@@ -76,2 +77,2 @@\n-     * Returns a Comparator for all classes, compares the simple names of\n-     * TypeElement, if equal then the fully qualified names, and if equal again\n+     * Returns a comparator for all classes, that compares the simple names of\n+     * the type element, if equal then the fully qualified names, and if equal again\n@@ -80,1 +81,1 @@\n-     * @return Comparator\n+     * @return the comparator\n@@ -82,1 +83,1 @@\n-    public Comparator<Element> makeAllClassesComparator() {\n+    public Comparator<Element> allClassesComparator() {\n@@ -102,1 +103,1 @@\n-     * Returns a Comparator for packages, by comparing the fully qualified names,\n+     * Returns a comparator for packages, by comparing the fully qualified names,\n@@ -105,1 +106,1 @@\n-     * @return a Comparator\n+     * @return the comparator\n@@ -107,1 +108,1 @@\n-    public Comparator<Element> makePackageComparator() {\n+    public Comparator<Element> packageComparator() {\n@@ -125,1 +126,1 @@\n-     * Returns a Comparator for items listed on summary list pages\n+     * Returns a comparator for items listed on summary list pages\n@@ -129,1 +130,1 @@\n-     * @return a Comparator\n+     * @return the comparator\n@@ -131,1 +132,1 @@\n-    public Comparator<Element> makeSummaryComparator() {\n+    public Comparator<Element> summaryComparator() {\n@@ -155,2 +156,3 @@\n-     * Returns a Comparator for SerialFieldTree.\n-     * @return a Comparator\n+     * Returns a comparator for {@link SerialFieldTree}s.\n+     *\n+     * @return the comparator\n@@ -158,1 +160,1 @@\n-    public Comparator<SerialFieldTree> makeSerialFieldTreeComparator() {\n+    public Comparator<SerialFieldTree> serialFieldTreeComparator() {\n@@ -171,1 +173,2 @@\n-     * @return a Comparator\n+     *\n+     * @return the comparator\n@@ -173,2 +176,2 @@\n-    public Comparator<Element> makeGeneralPurposeComparator() {\n-        return makeClassUseComparator();\n+    public Comparator<Element> generalPurposeComparator() {\n+        return classUseComparator();\n@@ -180,1 +183,1 @@\n-     * Returns a Comparator for overrides and implements,\n+     * Returns a comparator for overrides and implements,\n@@ -183,2 +186,4 @@\n-     * TypeElement and the fully qualified name of the enclosing TypeElement.\n-     * @return a Comparator\n+     * type element and the fully qualified name of the enclosing\n+     * type element.\n+     *\n+     * @return the comparator\n@@ -186,1 +191,1 @@\n-    public Comparator<Element> makeOverrideUseComparator() {\n+    public Comparator<Element> overrideUseComparator() {\n@@ -222,2 +227,2 @@\n-     *     a case insensitive comparison of parameter the type signatures\n-     * 2b. if equal, case sensitive comparison of the type signatures\n+     *     a case-insensitive comparison of parameter the type signatures\n+     * 2b. if equal, case-sensitive comparison of the type signatures\n@@ -226,0 +231,1 @@\n+     *\n@@ -228,1 +234,1 @@\n-    public Comparator<Element> makeIndexElementComparator() {\n+    public Comparator<Element> indexElementComparator() {\n@@ -242,1 +248,1 @@\n-                    int result = utils.compareStrings(getIndexElementKey(e1), getIndexElementKey(e2));\n+                    int result = utils.compareStrings(indexElementKey(e1), indexElementKey(e2));\n@@ -275,1 +281,1 @@\n-    public String getIndexElementKey(Element element) {\n+    public String indexElementKey(Element element) {\n@@ -289,1 +295,1 @@\n-    public Comparator<TypeMirror> makeTypeMirrorClassUseComparator() {\n+    public Comparator<TypeMirror> typeMirrorClassUseComparator() {\n@@ -308,1 +314,1 @@\n-    public Comparator<TypeMirror> makeTypeMirrorIndexUseComparator() {\n+    public Comparator<TypeMirror> typeMirrorIndexUseComparator() {\n@@ -329,0 +335,1 @@\n+     *\n@@ -331,1 +338,1 @@\n-    public Comparator<Element> makeClassUseComparator() {\n+    public Comparator<Element> classUseComparator() {\n@@ -369,1 +376,1 @@\n-     * for creating specific comparators for an use-case.\n+     * for creating specific comparators for each use-case.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Comparators.java","additions":39,"deletions":32,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -329,1 +329,1 @@\n-        return map.computeIfAbsent(groupname, g -> new TreeSet<>(configuration.utils.comparators.makePackageComparator()));\n+        return map.computeIfAbsent(groupname, g -> new TreeSet<>(configuration.utils.comparators.packageComparator()));\n@@ -341,1 +341,1 @@\n-        return map.computeIfAbsent(groupname, g -> new TreeSet<>(configuration.utils.comparators.makeModuleComparator()));\n+        return map.computeIfAbsent(groupname, g -> new TreeSet<>(configuration.utils.comparators.moduleComparator()));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Group.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -318,1 +318,1 @@\n-        return Comparator.comparing(IndexItem::getElement, utils.comparators.makeAllClassesComparator());\n+        return Comparator.comparing(IndexItem::getElement, utils.comparators.allClassesComparator());\n@@ -334,1 +334,1 @@\n-        Comparator<Element> elementComparator = utils.comparators.makeIndexElementComparator();\n+        Comparator<Element> elementComparator = utils.comparators.indexElementComparator();\n@@ -377,1 +377,1 @@\n-                ? utils.comparators.getIndexElementKey(ii.getElement())\n+                ? utils.comparators.indexElementKey(ii.getElement())\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/IndexBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-    };\n+    }\n@@ -183,1 +183,1 @@\n-     * Return the list of summary elements of a given type.\n+     * Return the set of summary elements of a given type.\n@@ -186,1 +186,1 @@\n-     * @return\n+     * @return the set\n@@ -214,1 +214,1 @@\n-        return new TreeSet<>(utils.comparators.makeSummaryComparator());\n+        return new TreeSet<>(utils.comparators.summaryComparator());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/SummaryAPIListBuilder.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-        comparator = utils.comparators.makeGeneralPurposeComparator();\n+        comparator = utils.comparators.generalPurposeComparator();\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/TypeElementCatalog.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -663,1 +663,1 @@\n-        SortedSet<TypeElement> set = new TreeSet<>(comparators.makeGeneralPurposeComparator());\n+        SortedSet<TypeElement> set = new TreeSet<>(comparators.generalPurposeComparator());\n@@ -1320,1 +1320,1 @@\n-                new TreeSet<>(comparators.makeGeneralPurposeComparator());\n+                new TreeSet<>(comparators.generalPurposeComparator());\n@@ -1607,1 +1607,1 @@\n-        Map<ModuleElement, String> result = new TreeMap<>(comparators.makeModuleComparator());\n+        Map<ModuleElement, String> result = new TreeMap<>(comparators.moduleComparator());\n@@ -1681,1 +1681,1 @@\n-        SortedSet<TypeElement> set = new TreeSet<>(comparators.makeGeneralPurposeComparator());\n+        SortedSet<TypeElement> set = new TreeSet<>(comparators.generalPurposeComparator());\n@@ -1697,1 +1697,1 @@\n-            SortedSet<TypeElement>oset = new TreeSet<>(comparators.makeGeneralPurposeComparator());\n+            SortedSet<TypeElement>oset = new TreeSet<>(comparators.generalPurposeComparator());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-import java.util.stream.Collectors;\n@@ -354,1 +353,1 @@\n-                .sorted(utils.comparators.makeGeneralPurposeComparator())\n+                .sorted(utils.comparators.generalPurposeComparator())\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/VisibleMemberTable.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}