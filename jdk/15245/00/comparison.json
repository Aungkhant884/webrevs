{"files":[{"patch":"@@ -90,0 +90,1 @@\n+# include <sys\/sendfile.h>\n@@ -4324,0 +4325,7 @@\n+\/\/ copy data between two file descriptor within the kernel\n+\/\/ the number of bytes written to out_fd is returned if transfer was successful\n+\/\/ otherwise, returns -1 that implies an error\n+jlong os::Linux::sendfile(int out_fd, int in_fd, jlong* offset, jlong count) {\n+  return sendfile64(out_fd, in_fd, (off64_t*)offset, (size_t)count);\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -170,0 +170,2 @@\n+  static jlong sendfile(int out_fd, int in_fd, jlong* offset, jlong count);\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,0 +64,3 @@\n+#ifdef LINUX\n+#include \"os_linux.hpp\"\n+#endif\n@@ -632,0 +635,1 @@\n+  int get_fd() const                           { return _writer->get_fd(); }\n@@ -1533,0 +1537,1 @@\n+  LINUX_ONLY(void merge_file_fast(char* path);)\n@@ -1535,0 +1540,1 @@\n+  void set_error(const char* msg);\n@@ -1555,0 +1561,46 @@\n+void DumpMerger::set_error(const char* msg) {\n+  assert(msg != nullptr, \"sanity check\");\n+  log_error(heapdump)(\"%s (file: %s)\", msg, _path);\n+  _writer->set_error(msg);\n+  _has_error = true;\n+}\n+\n+#ifdef LINUX\n+void DumpMerger::merge_file_fast(char* path) {\n+  assert(!SafepointSynchronize::is_at_safepoint(), \"merging happens outside safepoint\");\n+  TraceTime timer(\"Merge segmented heap file directly\", TRACETIME_LOG(Info, heapdump));\n+\n+  int segment_fd = os::open(path, O_RDONLY, 0);\n+  if (segment_fd == -1) {\n+    set_error(\"Can not open segmented heap file during merging\");\n+    return;\n+  }\n+\n+  struct stat st;\n+  if (os::stat(path, &st) != 0) {\n+    ::close(segment_fd);\n+    set_error(\"Can not get segmented heap file size during merging\");\n+    return;\n+  }\n+\n+  \/\/ A successful call to sendfile may write fewer bytes than requested; the\n+  \/\/ caller should be prepared to retry the call if there were unsent bytes.\n+  jlong offset = 0;\n+  while (offset < st.st_size) {\n+    int ret = os::Linux::sendfile(_writer->get_fd(), segment_fd, &offset, st.st_size);\n+    if (ret == -1) {\n+      ::close(segment_fd);\n+      set_error(\"Failed to merge segmented heap file\");\n+      return;\n+    }\n+  }\n+\n+  \/\/ As sendfile variant does not call the write method of the global writer,\n+  \/\/ bytes_written is also incorrect for this variant, we need to explicitly\n+  \/\/ accumulate bytes_written for the global writer in this case\n+  julong accum = _writer->bytes_written() + st.st_size;\n+  _writer->set_bytes_written(accum);\n+  ::close(segment_fd);\n+}\n+#endif\n+\n@@ -1561,3 +1613,1 @@\n-    log_error(heapdump)(\"Can not open segmented heap file %s during merging\", path);\n-    _writer->set_error(\"Can not open segmented heap file during merging\");\n-    _has_error = true;\n+    set_error(\"Can not open segmented heap file during merging\");\n@@ -1577,4 +1627,1 @@\n-    log_error(heapdump)(\"Merged heap dump %s is incomplete, expect %ld but read \" JLONG_FORMAT \" bytes\",\n-                        path, segment_fs.fileSize(), total);\n-    _writer->set_error(\"Merged heap dump is incomplete\");\n-    _has_error = true;\n+    set_error(\"Merged heap dump is incomplete\");\n@@ -1593,1 +1640,2 @@\n-  \/\/ merge segmented heap file and remove it anyway\n+  \/\/ Merge the content of the remaining files into base file. Regardless of whether\n+  \/\/ the merge process is successful or not, these segmented files will be deleted.\n@@ -1599,0 +1647,7 @@\n+#ifdef LINUX\n+      \/\/ Merge segmented heap files via sendfile, it's more efficient than the\n+      \/\/ read+write combination, which would require transferring data to and from\n+      \/\/ user space.\n+      merge_file_fast(path);\n+#else\n+      \/\/ Otherwise, fallback to using read+write combination for file merging\n@@ -1600,0 +1655,1 @@\n+#endif\n@@ -1601,0 +1657,1 @@\n+    \/\/ Delete selected segmented heap file nevertheless\n@@ -2014,0 +2071,1 @@\n+  \/\/ share global compressor, local DumpWriter is not responsible for its life cycle\n@@ -2258,0 +2316,3 @@\n+  if (compressor != nullptr) {\n+    delete compressor;\n+  }\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":69,"deletions":8,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -81,0 +81,2 @@\n+\n+  int get_fd() const {return _fd; }\n","filename":"src\/hotspot\/share\/services\/heapDumperCompression.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}