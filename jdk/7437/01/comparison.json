{"files":[{"patch":"@@ -966,0 +966,11 @@\n+bool FileMapInfo::check_module_paths() {\n+  const char* rp = Arguments::get_property(\"jdk.module.path\");\n+  int num_paths = Arguments::num_archives(rp);\n+  if (num_paths != header()->num_module_paths()) {\n+    return false;\n+  }\n+  ResourceMark rm;\n+  GrowableArray<const char*>* rp_array = create_path_array(rp);\n+  return check_paths(header()->app_module_paths_start_index(), num_paths, rp_array);\n+}\n+\n@@ -988,3 +999,5 @@\n-      DynamicDumpSharedSpaces = false;\n-      warning(\n-        \"Dynamic archiving is disabled because base layer archive has module path\");\n+      if (!check_module_paths()) {\n+        DynamicDumpSharedSpaces = false;\n+        warning(\n+          \"Dynamic archiving is disabled because base layer archive has a different module path\");\n+      }\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -494,0 +494,1 @@\n+  bool check_module_paths();\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -473,1 +473,0 @@\n-  static int num_archives(const char* archive_path) NOT_CDS_RETURN_(0);\n@@ -479,0 +478,1 @@\n+  static int num_archives(const char* archive_path) NOT_CDS_RETURN_(0);\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -150,0 +150,13 @@\n+        opts.addSuffix(\"-Djava.class.path=\");\n+        OutputAnalyzer out = CDSTestUtils.createArchive(opts);\n+        CDSTestUtils.checkBaseDump(out);\n+        return out;\n+    }\n+\n+    public static OutputAnalyzer dumpBaseArchive(String baseArchiveName, String classList[], String ... cmdLineSuffix)\n+        throws Exception\n+    {\n+        CDSOptions opts = new CDSOptions();\n+        opts.setArchiveName(baseArchiveName);\n+        opts.setClassList(classList);\n+        opts.addSuffix(cmdLineSuffix);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestCommon.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import jdk.test.lib.cds.CDSTestUtils;\n+\n+\/*\n+ * @test\n+ * @summary Dyanmic archive with module path\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @compile ..\/test-classes\/Hello.java\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar WhiteBox.jar sun.hotspot.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\/WhiteBox.jar ModulePath\n+ *\/\n+\n+public class ModulePath extends DynamicArchiveTestBase {\n+    private static final Path USER_DIR = Paths.get(CDSTestUtils.getOutputDir());\n+\n+    private static final String FS = File.separator;\n+    private static final String TEST_SRC = System.getProperty(\"test.src\") +\n+        FS + \"..\" + FS + \"jigsaw\" + FS + \"modulepath\";\n+\n+    private static final Path SRC_DIR = Paths.get(TEST_SRC, \"src\");\n+    private static final Path MODS_DIR = Paths.get(\"mods\");\n+\n+    \/\/ the module name of the test module\n+    private static final String TEST_MODULE = \"com.simple\";\n+\n+    \/\/ the module main class\n+    private static final String MAIN_CLASS = \"com.simple.Main\";\n+\n+    private static Path moduleDir = null;\n+    private static Path srcJar = null;\n+\n+    public static void buildTestModule() throws Exception {\n+\n+        \/\/ javac -d mods\/$TESTMODULE --module-path MOD_DIR src\/$TESTMODULE\/**\n+        JarBuilder.compileModule(SRC_DIR.resolve(TEST_MODULE),\n+                                 MODS_DIR.resolve(TEST_MODULE),\n+                                 MODS_DIR.toString());\n+\n+\n+        moduleDir = Files.createTempDirectory(USER_DIR, \"mlib\");\n+        srcJar = moduleDir.resolve(TEST_MODULE + \".jar\");\n+        String classes = MODS_DIR.resolve(TEST_MODULE).toString();\n+        JarBuilder.createModularJar(srcJar.toString(), classes, MAIN_CLASS);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest(ModulePath::test);\n+    }\n+\n+    static void test(String args[]) throws Exception {\n+        String topArchiveName = getNewArchiveName(\"top\");\n+        String baseArchiveName = getNewArchiveName(\"base\");\n+\n+        String appJar    = JarBuilder.getOrCreateHelloJar();\n+        String mainClass = \"Hello\";\n+\n+        \/\/ create a base archive with the --module-path option\n+        buildTestModule();\n+        baseArchiveName = getNewArchiveName(\"base-with-module\");\n+        String appClasses[] = {mainClass};\n+        TestCommon.dumpBaseArchive(baseArchiveName,\n+                        appClasses,\n+                        \"-Xlog:class+load\",\n+                        \"-cp\", appJar,\n+                        \"--module-path\", moduleDir.toString(),\n+                        \"-m\", TEST_MODULE);\n+\n+        \/\/ Dumping of dynamic archive should be successful if the specified\n+        \/\/ --module-path is the same as for the base archive.\n+        topArchiveName = getNewArchiveName(\"top-with-module\");\n+        dump2(baseArchiveName, topArchiveName,\n+              \"-Xlog:cds*\",\n+              \"-Xlog:cds+dynamic=debug\",\n+              \"-Xlog:class+path=info,class+load\",\n+              \"-cp\", appJar,\n+              \"--module-path\", moduleDir.toString(),\n+              \"-m\", TEST_MODULE, MAIN_CLASS)\n+            .assertNormalExit();\n+\n+        \/\/ Load the Hello class from the base archive.\n+        run2(baseArchiveName, topArchiveName,\n+            \"-Xlog:class+load\",\n+            \"-Xlog:cds+dynamic=debug,cds=debug\",\n+            \"-cp\", appJar, mainClass)\n+            .assertNormalExit(output -> {\n+                    output.shouldContain(\"Hello source: shared objects file\")\n+                          .shouldHaveExitValue(0);\n+                });\n+\n+        \/\/ Load the com.simple.Main class from the dynamic archive.\n+        run2(baseArchiveName, topArchiveName,\n+            \"-Xlog:class+load\",\n+            \"-Xlog:cds+dynamic=debug,cds=debug\",\n+            \"-cp\", appJar,\n+            \"--module-path\", moduleDir.toString(),\n+            \"-m\", TEST_MODULE, MAIN_CLASS)\n+            .assertNormalExit(output -> {\n+                    output.shouldContain(\"com.simple.Main source: shared objects file (top)\")\n+                          .shouldHaveExitValue(0);\n+                });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/ModulePath.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-        \"Dynamic archiving is disabled because base layer archive has module path\";\n+        \"Dynamic archiving is disabled because base layer archive has a different module path\";\n@@ -107,0 +107,1 @@\n+        String appClasses[] = {mainClass};\n@@ -108,1 +109,3 @@\n-                        \"-cp\", srcJar.toString(),\n+                        appClasses,\n+                        \"-Xlog:class+load\",\n+                        \"-cp\", appJar,\n@@ -112,3 +115,3 @@\n-        \/\/ dumping of dynamic archive should be disabled with a warning message\n-        \/\/ if the base archive contains --module-path entries.\n-        topArchiveName = getNewArchiveName(\"top-with-module\");\n+        \/\/ Try to create a dynamic archive without specifying module path,\n+        \/\/ dumping should fail.\n+        topArchiveName = getNewArchiveName(\"top-with-module-failed\");\n@@ -118,4 +121,3 @@\n-              \"-Xlog:class+path=info\",\n-              \"-cp\", srcJar.toString(),\n-              \"--module-path\", moduleDir.toString(),\n-              \"-m\", TEST_MODULE)\n+              \"-Xlog:class+path=info,class+load\",\n+              \"-cp\", appJar,\n+              mainClass)\n@@ -123,1 +125,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/UnsupportedBaseArchive.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"}]}