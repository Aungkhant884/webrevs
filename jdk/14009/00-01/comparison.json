{"files":[{"patch":"@@ -2954,1 +2954,1 @@\n-      case Bytecodes::_return         : method_return(nullptr  , ignore_return); break;\n+      case Bytecodes::_return         : method_return(nullptr, ignore_return); break;\n@@ -3421,1 +3421,1 @@\n-  \/\/All blocks reachable from start_block have _end isn't null\n+  \/\/ For all blocks reachable from start_block: _end must be non-null\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-  if (exception_state() != nullptr){\n+  if (exception_state() != nullptr) {\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -239,1 +239,1 @@\n-    if (_v == nullptr  ) return false;                \\\n+    if (_v == nullptr) return false;                  \\\n@@ -252,1 +252,1 @@\n-    if (_v == nullptr  ) return false;                \\\n+    if (_v == nullptr) return false;                  \\\n@@ -266,1 +266,1 @@\n-    if (_v == nullptr  ) return false;                \\\n+    if (_v == nullptr) return false;                  \\\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -513,1 +513,1 @@\n-      if (opBranch->_info != nullptr)     do_info(opBranch->_info);\n+      if (opBranch->_info != nullptr)  do_info(opBranch->_info);\n@@ -515,1 +515,1 @@\n-      if (opBranch->_stub != nullptr)     opBranch->stub()->visit(this);\n+      if (opBranch->_stub != nullptr)  opBranch->stub()->visit(this);\n@@ -2074,1 +2074,1 @@\n-  if  (exact_klass() == nullptr) {\n+  if (exact_klass() == nullptr) {\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2983,1 +2983,1 @@\n-    if (op == nullptr) {  \/\/ this can happen when spill-moves are removed in eliminate_spill_moves\n+    if (op == nullptr) { \/\/ this can happen when spill-moves are removed in eliminate_spill_moves\n","filename":"src\/hotspot\/share\/c1\/c1_LinearScan.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -319,1 +319,1 @@\n-      if (x_const != nullptr) {         \/\/ x and y are constants\n+      if (x_const != nullptr) { \/\/ x and y are constants\n","filename":"src\/hotspot\/share\/c1\/c1_Optimizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-  Bound *bound = nullptr;\n+  Bound* bound = nullptr;\n@@ -368,1 +368,1 @@\n-  for (BlockBegin *d = loop_header->dominator(); d != nullptr; d = d->dominator()) {\n+  for (BlockBegin* d = loop_header->dominator(); d != nullptr; d = d->dominator()) {\n@@ -386,1 +386,1 @@\n-  Bound *top = nullptr;\n+  Bound* top = nullptr;\n@@ -954,1 +954,1 @@\n-    Bound *new_index_bound = new Bound(0, nullptr, cur_constant, cur_value);\n+    Bound* new_index_bound = new Bound(0, nullptr, cur_constant, cur_value);\n@@ -1101,2 +1101,2 @@\n-      BlockBegin *sux = block->sux_at(i);\n-      BlockBegin *pred = nullptr;\n+      BlockBegin* sux = block->sux_at(i);\n+      BlockBegin* pred = nullptr;\n@@ -1224,1 +1224,1 @@\n-bool RangeCheckEliminator::Verification::can_reach(BlockBegin *start, BlockBegin *end, BlockBegin *dont_use \/* = nullptr *\/) {\n+bool RangeCheckEliminator::Verification::can_reach(BlockBegin* start, BlockBegin* end, BlockBegin* dont_use \/* = nullptr *\/) {\n@@ -1521,3 +1521,3 @@\n-  Instruction *result = position;\n-  Instruction *compare_with = nullptr;\n-  ValueStack *state = position->state_before();\n+  Instruction* result = position;\n+  Instruction* compare_with = nullptr;\n+  ValueStack* state = position->state_before();\n@@ -1527,1 +1527,1 @@\n-  Instruction *instruction_before = position->prev();\n+  Instruction* instruction_before = position->prev();\n@@ -1533,1 +1533,1 @@\n-  Constant *constant = nullptr;\n+  Constant* constant = nullptr;\n@@ -1557,1 +1557,1 @@\n-      ArithmeticOp *ao = new ArithmeticOp(Bytecodes::_iadd, constant, op, nullptr);\n+      ArithmeticOp* ao = new ArithmeticOp(Bytecodes::_iadd, constant, op, nullptr);\n","filename":"src\/hotspot\/share\/c1\/c1_RangeCheckElimination.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -959,2 +959,2 @@\n-  Handle mirror(current, nullptr);                    \/\/ oop needed by load_mirror_patching code\n-  Handle appendix(current, nullptr);                  \/\/ oop needed by appendix_patching code\n+  Handle mirror(current, nullptr); \/\/ oop needed by load_mirror_patching code\n+  Handle appendix(current, nullptr); \/\/ oop needed by appendix_patching code\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -246,1 +246,1 @@\n-  void          set_value_map_of(BlockBegin* block, ValueMap* map)   { assert(value_map_of(block) == nullptr, \"\"); _value_maps.at_put(block->linear_scan_number(), map); }\n+  void          set_value_map_of(BlockBegin* block, ValueMap* map) { assert(value_map_of(block) == nullptr, \"\"); _value_maps.at_put(block->linear_scan_number(), map); }\n","filename":"src\/hotspot\/share\/c1\/c1_ValueMap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}