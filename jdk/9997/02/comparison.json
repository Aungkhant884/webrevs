{"files":[{"patch":"@@ -2163,4 +2163,1 @@\n-      if (outer_loop->is_member(u_loop) ||\n-          \/\/ nodes pinned with control in the outer loop but not referenced from the safepoint must be moved out of\n-          \/\/ the outer loop too\n-          (u->in(0) != NULL && outer_loop->is_member(phase->get_loop(u->in(0))))) {\n+      if (outer_loop->is_member(u_loop)) {\n@@ -2168,0 +2165,10 @@\n+      } else {\n+        \/\/ nodes pinned with control in the outer loop but not referenced from the safepoint must be moved out of\n+        \/\/ the outer loop too\n+        Node* u_c = u->in(0);\n+        if (u_c != NULL) {\n+          IdealLoopTree* u_c_loop = phase->get_loop(u_c);\n+          if (outer_loop->is_member(u_c_loop) && !loop->is_member(u_c_loop)) {\n+            wq.push(u);\n+          }\n+        }\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8290781\n+ * @summary Segfault at PhaseIdealLoop::clone_loop_handle_data_uses\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:-UseOnStackReplacement -XX:-TieredCompilation TestLSMBadControlOverride\n+ *\/\n+\n+public class TestLSMBadControlOverride {\n+    private static volatile int barrier;\n+\n+    public static void main(String[] args) {\n+        int[] array = new int[100];\n+        int[] small = new int[10];\n+        for (int i = 0; i < 20_000; i++) {\n+            test(array, array, true, true);\n+            test(array, array, true, false);\n+            test(array, array, false, false);\n+            try {\n+                test(small, array,true, true);\n+            } catch (ArrayIndexOutOfBoundsException aieoobe) {\n+\n+            }\n+        }\n+    }\n+\n+    private static int test(int[] array, int[] array2, boolean flag1, boolean flag2) {\n+        int i;\n+        int v = 0;\n+        int v1 = 0;\n+        for (i = 0; i < 100; i++) {\n+            v1 = array[i];\n+        }\n+        v += v1;\n+        if (flag1) {\n+            if (flag2) {\n+                barrier = 42;\n+            }\n+        }\n+        for (int j = 0; j < 100; j++) {\n+            array[j] = j;\n+            v += array[i-1];\n+        }\n+        return v;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/TestLSMBadControlOverride.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}