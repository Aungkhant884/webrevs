{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -252,0 +252,51 @@\n+    \/**\n+     * Returns the file extension of this path's file name as a {@code String}.\n+     * The extension is derived from this {@code Path} by obtaining the\n+     * {@linkplain #getFileName file name element}, deriving its {@linkplain\n+     * #toString string representation}, and then extracting a substring\n+     * determined by the position of a period character ('.', U+002E FULL STOP)\n+     * within the file name string. If the file name element is {@code null},\n+     * or if the file name string does not contain a period character, or if\n+     * the only period in the file name string is its first character,  then\n+     * the extension is {@linkplain String#isEmpty empty}. Otherwise, the\n+     * extension is the substring starting with the last period in the file\n+     * name string. If this last period is also the last character in the file\n+     * name string, then the extension contains only a single period character.\n+     *\n+     * @apiNote\n+     * Unless no extension is found, in which case an empty string is returned,\n+     * the returned extension includes the period separator character. For\n+     * example, the extension which would be returned for a path with file name\n+     * \"photograph.jpg\" is \".jpg\".\n+     *\n+     * @implSpec\n+     * The default implementation is equivalent for this path to:\n+     * <pre>{@code\n+     * int lastPeriod = fileName.lastIndexOf('.');\n+     * return lastPeriod <= 0 ? return \"\" : fileName.substring(lastPeriod);\n+     * }<\/pre>\n+     *\n+     * @return  the non-{@code null} file extension of this path's file name,\n+     *          possibly only a single period character, or an empty string if\n+     *          no extension is found\n+     *\n+     * @since 21\n+     *\/\n+    default String getExtension() {\n+        \/\/ empty extension if the file name is null\n+        Path fileName = getFileName();\n+        if (fileName == null)\n+            return \"\";\n+\n+        \/\/ locate the last dot in the file name string\n+        String fileNameString = fileName.toString();\n+        int lastDot = fileNameString.lastIndexOf('.');\n+\n+        \/\/ empty  extension if no dot or the last dot is the first character\n+        if (lastDot <= 0)\n+            return \"\";\n+\n+        \/\/ the extension is the substring starting at the index of the last dot\n+        return fileNameString.substring(lastDot);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Path.java","additions":52,"deletions":1,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/*\n+ * @test\n+ * @bug 8057113\n+ * @summary Verify getExtension method\n+ * @run testng Extensions\n+ *\/\n+public class Extensions {\n+    \/**\n+     * Returns path name string and expected extension pairs.\n+     *\n+     * @return {@code {{\"pathname\", \"extension\"},...}}\n+     *\/\n+    @DataProvider\n+    static Object[][] getProvider() {\n+        Object[][] pairs = {\n+            {\"\",               \"\"},\n+            {\".\",              \"\"},\n+            {\"..\",             \".\"},\n+            {\"...\",            \".\"},\n+            {\"....\",           \".\"},\n+            {\".....\",          \".\"},\n+            {\"aa\",             \"\"},\n+            {\"a.\",             \".\"},\n+            {\".a\",             \"\"},\n+            {\"..a\",            \".a\"},\n+            {\"...a\",           \".a\"},\n+            {\"....a\",          \".a\"},\n+            {\".a.b\",           \".b\"},\n+            {\"...a.b\",         \".b\"},\n+            {\"...a.b.\",        \".\"},\n+            {\"a..b\",           \".b\"},\n+            {\"a..b.c\",         \".c\"},\n+            {\"a.b..c\",         \".c\"},\n+            {\"a..b.\",          \".\"},\n+            {\".a..b\",          \".b\"},\n+            {\".a..b.c\",        \".c\"},\n+            {\".a.b..c\",        \".c\"},\n+            {\".a..b.\",         \".\"},\n+            {\"..a..b\",         \".b\"},\n+            {\"..a..b.c\",       \".c\"},\n+            {\"..a.b..c\",       \".c\"},\n+            {\"..a..b.\",        \".\"},\n+            {\"..foo\",          \".foo\"},\n+            {\"foo.\",           \".\"},\n+            {\"test.\",          \".\"},\n+            {\"test..\",         \".\"},\n+            {\"test...\",        \".\"},\n+            {\"test.rb\",        \".rb\"},\n+            {\"a\/b\/d\/test.rb\" , \".rb\"},\n+            {\".a\/b\/d\/test.rb\", \".rb\"},\n+            {\"test\",           \"\"},\n+            {\".profile\",       \"\"},\n+            {\".profile.sh\",    \".sh\"},\n+            {\"foo.tar.gz\",     \".gz\"},\n+            {\"foo.bar.\",       \".\"},\n+            {\"archive.zip\",    \".zip\"},\n+            {\"compress.gzip\",  \".gzip\"},\n+            {\"waitwhat.&$!#%\", \".&$!#%\"},\n+            {\"6.283185307\",    \".283185307\"}\n+        };\n+        return pairs;\n+    }\n+\n+    @Test(dataProvider = \"getProvider\")\n+    public static void get(String pathname, String extension) {\n+        Assert.assertEquals(Path.of(pathname).getExtension(), extension);\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/file\/Path\/Extensions.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"}]}