{"files":[{"patch":"@@ -34,5 +34,4 @@\n-  { \"GenericCDSFileMapHeader::_magic\",                     offset_of(GenericCDSFileMapHeader, _magic)          },\n-  { \"GenericCDSFileMapHeader::_crc\",                       offset_of(GenericCDSFileMapHeader, _crc)            },\n-  { \"GenericCDSFileMapHeader::_version\",                   offset_of(GenericCDSFileMapHeader, _version)        },\n-  { \"GenericCDSFileMapHeader::_header_size\",               offset_of(GenericCDSFileMapHeader, _header_size)    },\n-  { \"GenericCDSFileMapHeader::_common_app_classpath_prefix_size\", offset_of(GenericCDSFileMapHeader, _common_app_classpath_prefix_size) },\n+  { \"GenericCDSFileMapHeader::_magic\",                     offset_of(GenericCDSFileMapHeader, _magic)                    },\n+  { \"GenericCDSFileMapHeader::_crc\",                       offset_of(GenericCDSFileMapHeader, _crc)                      },\n+  { \"GenericCDSFileMapHeader::_version\",                   offset_of(GenericCDSFileMapHeader, _version)                  },\n+  { \"GenericCDSFileMapHeader::_header_size\",               offset_of(GenericCDSFileMapHeader, _header_size)              },\n@@ -41,5 +40,6 @@\n-  { \"CDSFileMapHeaderBase::_regions[0]\",                   offset_of(CDSFileMapHeaderBase, _regions)           },\n-  { \"FileMapHeader::_jvm_ident\",                           offset_of(FileMapHeader, _jvm_ident)                },\n-  { \"CDSFileMapRegion::_crc\",                              offset_of(CDSFileMapRegion, _crc)                   },\n-  { \"CDSFileMapRegion::_used\",                             offset_of(CDSFileMapRegion, _used)                  },\n-  { \"DynamicArchiveHeader::_base_region_crc\",              offset_of(DynamicArchiveHeader, _base_region_crc)   }\n+  { \"CDSFileMapHeaderBase::_regions[0]\",                   offset_of(CDSFileMapHeaderBase, _regions)                     },\n+  { \"FileMapHeader::_jvm_ident\",                           offset_of(FileMapHeader, _jvm_ident)                          },\n+  { \"FileMapHeader::_common_app_classpath_prefix_size\",    offset_of(FileMapHeader, _common_app_classpath_prefix_size)   },\n+  { \"CDSFileMapRegion::_crc\",                              offset_of(CDSFileMapRegion, _crc)                             },\n+  { \"CDSFileMapRegion::_used\",                             offset_of(CDSFileMapRegion, _used)                            },\n+  { \"DynamicArchiveHeader::_base_region_crc\",              offset_of(DynamicArchiveHeader, _base_region_crc)             }\n","filename":"src\/hotspot\/share\/cds\/cdsConstants.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1237,0 +1237,1 @@\n+      return false;\n@@ -1263,4 +1264,0 @@\n-    if (!check_common_app_classpath_prefix_len()) {\n-      return false;\n-    }\n-\n@@ -1347,9 +1344,0 @@\n-\n-  bool check_common_app_classpath_prefix_len() {\n-    int common_path_size = _header->_common_app_classpath_prefix_size;\n-    if (common_path_size < 0) {\n-      FileMapInfo::fail_continue(\"common app classpath prefix len < 0\");\n-      return false;\n-    }\n-    return true;\n-  }\n@@ -1430,0 +1418,6 @@\n+  int common_path_size = header()->common_app_classpath_prefix_size();\n+  if (common_path_size < 0) {\n+      FileMapInfo::fail_continue(\"common app classpath prefix len < 0\");\n+      return false;\n+  }\n+\n@@ -1485,0 +1479,5 @@\n+    LogMessage(cds) msg;\n+    if (msg.is_info()) {\n+      msg.info(\"Reading from archive: \");\n+      msg.info(\"   %s\", _full_path);\n+    }\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -191,15 +191,17 @@\n-  size_t _core_region_alignment;    \/\/ how shared archive should be aligned\n-  int    _obj_alignment;            \/\/ value of ObjectAlignmentInBytes\n-  address _narrow_oop_base;         \/\/ compressed oop encoding base\n-  int    _narrow_oop_shift;         \/\/ compressed oop encoding shift\n-  bool   _compact_strings;          \/\/ value of CompactStrings\n-  uintx  _max_heap_size;            \/\/ java max heap size during dumping\n-  CompressedOops::Mode _narrow_oop_mode; \/\/ compressed oop encoding mode\n-  int     _narrow_klass_shift;      \/\/ save narrow klass base and shift\n-  bool    _compressed_oops;         \/\/ save the flag UseCompressedOops\n-  bool    _compressed_class_ptrs;   \/\/ save the flag UseCompressedClassPointers\n-  size_t  _cloned_vtables_offset;   \/\/ The address of the first cloned vtable\n-  size_t  _serialized_data_offset;  \/\/ Data accessed using {ReadClosure,WriteClosure}::serialize()\n-  address _heap_begin;              \/\/ heap begin at dump time.\n-  address _heap_end;                \/\/ heap end at dump time.\n-  bool _has_non_jar_in_classpath;   \/\/ non-jar file entry exists in classpath\n+  size_t _core_region_alignment;                  \/\/ how shared archive should be aligned\n+  int    _obj_alignment;                          \/\/ value of ObjectAlignmentInBytes\n+  address _narrow_oop_base;                       \/\/ compressed oop encoding base\n+  int    _narrow_oop_shift;                       \/\/ compressed oop encoding shift\n+  bool   _compact_strings;                        \/\/ value of CompactStrings\n+  uintx  _max_heap_size;                          \/\/ java max heap size during dumping\n+  CompressedOops::Mode _narrow_oop_mode;          \/\/ compressed oop encoding mode\n+  int     _narrow_klass_shift;                    \/\/ save narrow klass base and shift\n+  bool    _compressed_oops;                       \/\/ save the flag UseCompressedOops\n+  bool    _compressed_class_ptrs;                 \/\/ save the flag UseCompressedClassPointers\n+  size_t  _cloned_vtables_offset;                 \/\/ The address of the first cloned vtable\n+  size_t  _serialized_data_offset;                \/\/ Data accessed using {ReadClosure,WriteClosure}::serialize()\n+  address _heap_begin;                            \/\/ heap begin at dump time.\n+  address _heap_end;                              \/\/ heap end at dump time.\n+  bool _has_non_jar_in_classpath;                 \/\/ non-jar file entry exists in classpath\n+  unsigned int _common_app_classpath_prefix_size; \/\/ size of the common prefix of app class paths\n+                                                  \/\/    0 if no common prefix exists\n@@ -242,7 +244,7 @@\n-  unsigned int magic()                    const { return _generic_header._magic;    }\n-  int crc()                               const { return _generic_header._crc;      }\n-  int version()                           const { return _generic_header._version;  }\n-  unsigned int header_size()              const { return _generic_header._header_size;              }\n-  unsigned int base_archive_name_offset() const { return _generic_header._base_archive_name_offset; }\n-  unsigned int base_archive_name_size()   const { return _generic_header._base_archive_name_size;   }\n-  unsigned int common_app_classpath_prefix_size() const { return _generic_header._common_app_classpath_prefix_size; }\n+  unsigned int magic()                            const { return _generic_header._magic;                    }\n+  int crc()                                       const { return _generic_header._crc;                      }\n+  int version()                                   const { return _generic_header._version;                  }\n+  unsigned int header_size()                      const { return _generic_header._header_size;              }\n+  unsigned int base_archive_name_offset()         const { return _generic_header._base_archive_name_offset; }\n+  unsigned int base_archive_name_size()           const { return _generic_header._base_archive_name_size;   }\n+  unsigned int common_app_classpath_prefix_size() const { return _common_app_classpath_prefix_size;         }\n@@ -250,7 +252,7 @@\n-  void set_magic(unsigned int m)                    { _generic_header._magic = m;       }\n-  void set_crc(int crc_value)                       { _generic_header._crc = crc_value; }\n-  void set_version(int v)                           { _generic_header._version = v;     }\n-  void set_header_size(unsigned int s)              { _generic_header._header_size = s;              }\n-  void set_base_archive_name_offset(unsigned int s) { _generic_header._base_archive_name_offset = s; }\n-  void set_base_archive_name_size(unsigned int s)   { _generic_header._base_archive_name_size = s;   }\n-  void set_common_app_classpath_prefix_size(unsigned int s) { _generic_header._common_app_classpath_prefix_size = s; }\n+  void set_magic(unsigned int m)                            { _generic_header._magic = m;                    }\n+  void set_crc(int crc_value)                               { _generic_header._crc = crc_value;              }\n+  void set_version(int v)                                   { _generic_header._version = v;                  }\n+  void set_header_size(unsigned int s)                      { _generic_header._header_size = s;              }\n+  void set_base_archive_name_offset(unsigned int s)         { _generic_header._base_archive_name_offset = s; }\n+  void set_base_archive_name_size(unsigned int s)           { _generic_header._base_archive_name_size = s;   }\n+  void set_common_app_classpath_prefix_size(unsigned int s) { _common_app_classpath_prefix_size = s;         }\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":31,"deletions":29,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-#define CURRENT_CDS_ARCHIVE_VERSION 16\n+#define CURRENT_CDS_ARCHIVE_VERSION 17\n@@ -76,2 +76,0 @@\n-  unsigned int _common_app_classpath_prefix_size; \/\/ size of the common prefix of app class paths\n-                                                  \/\/    0 if no common prefix exists\n","filename":"src\/hotspot\/share\/include\/cds.h","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @summary Check that -XX:+AutoCreateSharedArchive automatically recreates an archive when you change the JDK version.\n+ * @requires os.family == \"linux\" & vm.bits == \"64\" & (os.arch==\"amd64\" | os.arch==\"x86_64\")\n+ * @library \/test\/lib\n+ * @compile -source 1.8 -target 1.8 ..\/test-classes\/HelloJDK8.java\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar Hello.jar HelloJDK8\n+ * @run driver TestAutoCreateSharedArchiveUpgrade\n+ *\/\n+\n+import java.io.File;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jtreg.SkippedException;\n+\n+public class TestAutoCreateSharedArchiveUpgrade {\n+    \/\/ The JDK being tested\n+    private static final String TEST_JDK = System.getProperty(\"test.jdk\", null);\n+\n+    \/\/ If you're running this test manually, specify the location of a previous version of\n+    \/\/ the JDK using \"jtreg -vmoption:-Dtest.previous.jdk=${JDK19_HOME} ...\"\n+    private static final String PREV_JDK = System.getProperty(\"test.previous.jdk\", null);\n+\n+    \/\/ If you're unning this test using something like\n+    \/\/ \"make test TEST=test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/TestAutoCreateSharedArchiveUpgrade.java\",\n+    \/\/ the test.boot.jdk property is passed by make\/RunTests.gmk\n+    private static final String BOOT_JDK = System.getProperty(\"test.boot.jdk\", null);\n+\n+    private static final String USER_DIR = System.getProperty(\"user.dir\", \".\");\n+    private static final String FS = System.getProperty(\"file.separator\", \"\/\");\n+\n+    private static final String JAR = ClassFileInstaller.getJarPath(\"Hello.jar\");\n+    private static final String JSA = USER_DIR + FS + \"Hello.jsa\";\n+\n+    private static String oldJVM;\n+    private static String newJVM;\n+\n+    public static void main(String[] args) throws Throwable {\n+        setupJVMs();\n+        doTest();\n+    }\n+\n+    static void setupJVMs() throws Throwable {\n+        if (TEST_JDK == null) {\n+            throw new RuntimeException(\"-Dtest.jdk should point to the JDK being tested\");\n+        }\n+\n+        newJVM = TEST_JDK + FS + \"bin\" + FS + \"java\";\n+\n+        if (PREV_JDK != null) {\n+            oldJVM = PREV_JDK + FS + \"bin\" + FS + \"java\";\n+        } else if (BOOT_JDK != null) {\n+            oldJVM = BOOT_JDK + FS + \"bin\" + FS + \"java\";\n+        } else {\n+            throw new SkippedException(\"Use -Dtest.previous.jdk or -Dtest.boot.jdk to specify a \" +\n+                                       \"previous version of the JDK that supports \" +\n+                                       \"-XX:+AutoCreateSharedArchive\");\n+        }\n+\n+        System.out.println(\"Using newJVM = \" + newJVM);\n+        System.out.println(\"Using oldJVM = \" + oldJVM);\n+    }\n+\n+    static void doTest() throws Throwable {\n+        File jsaF = new File(JSA);\n+        jsaF.delete();\n+        OutputAnalyzer output;\n+\n+        \/\/ NEW JDK -- create and then use the JSA\n+        output = run(newJVM);\n+        assertJSANotFound(output);\n+        assertCreatedJSA(output);\n+\n+        output = run(newJVM);\n+        assertUsedJSA(output);\n+\n+        \/\/ OLD JDK -- should reject the JSA created by NEW JDK, and create its own\n+        output = run(oldJVM);\n+        assertJSAVersionMismatch(output);\n+        assertCreatedJSA(output);\n+\n+        output = run(oldJVM);\n+        assertUsedJSA(output);\n+\n+        \/\/ NEW JDK -- should reject the JSA created by OLD JDK, and create its own\n+        output = run(newJVM);\n+        assertJSAVersionMismatch(output);\n+        assertCreatedJSA(output);\n+\n+        output = run(newJVM);\n+        assertUsedJSA(output);\n+    }\n+\n+    static OutputAnalyzer run(String jvm) throws Throwable {\n+        OutputAnalyzer output =\n+            ProcessTools.executeCommand(jvm, \"-XX:+AutoCreateSharedArchive\",\n+                                        \"-XX:SharedArchiveFile=\" + JSA,\n+                                        \"-Xlog:cds\",\n+                                        \"-cp\", JAR, \"HelloJDK8\");\n+        output.shouldHaveExitValue(0);\n+        return output;\n+    }\n+\n+    static void assertJSANotFound(OutputAnalyzer output) {\n+        output.shouldContain(\"Specified shared archive not found\");\n+    }\n+\n+    static void assertCreatedJSA(OutputAnalyzer output) {\n+        output.shouldContain(\"Dumping shared data to file\");\n+    }\n+\n+    static void assertJSAVersionMismatch(OutputAnalyzer output) {\n+        output.shouldContain(\"does not match the required version\");\n+    }\n+\n+    static void assertUsedJSA(OutputAnalyzer output) {\n+        output.shouldContain(\"Reading from archive\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/TestAutoCreateSharedArchiveUpgrade.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\n+\/\/ Used by tests like dynamicArchive\/TestAutoCreateSharedArchive.java, which\n+\/\/ runs this class in an earlier JDK\n+\/\/\n+\/\/ It should be compiled like this in the jtreg spec:\n+\/\/ @compile -source 1.8 -target 1.8 test-classes\/HelloJDK8.java\n+\n+public class HelloJDK8 {\n+    public static void main(String args[]) {\n+        System.out.println(\"This class is compiled by JDK 8\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/HelloJDK8.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -97,1 +97,1 @@\n-            offsetCommonAppClasspathPrefixSize = wb.getCDSOffsetForName(\"GenericCDSFileMapHeader::_common_app_classpath_prefix_size\");\n+            offsetCommonAppClasspathPrefixSize = wb.getCDSOffsetForName(\"FileMapHeader::_common_app_classpath_prefix_size\");\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSArchiveUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}