{"files":[{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8284910\n+ * @summary Check that the cleaner is not bound to the PasswordCallback object. \n+ *\/\n+\n+import javax.security.auth.callback.PasswordCallback;\n+import java.util.WeakHashMap;\n+\n+public final class CheckCleanerBound {\n+    private final static WeakHashMap<PasswordCallback, ?> weakHashMap =\n+            new WeakHashMap<>();\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Create an object\n+        PasswordCallback passwordCallback =\n+                new PasswordCallback(\"Password: \", false);\n+        passwordCallback.setPassword(\"ThisIsAPassword\".toCharArray());\n+\n+        weakHashMap.put(passwordCallback, null);\n+        passwordCallback = null;\n+\n+        \/\/ Check if the PasswordCallback object could be collected.\n+        \/\/ Wait to trigger the cleanup.\n+        for (int i = 0; i < 10 && weakHashMap.size() != 0; i++) {\n+            System.gc();\n+            Thread.sleep(100);\n+        }\n+\n+        \/\/ Check if the object has been collected.  The collection will not\n+        \/\/ happen if the cleaner implementation in PasswordCallback is bound\n+        \/\/ to the PasswordCallback object.\n+        if (weakHashMap.size() > 0) {\n+            throw new RuntimeException(\n+                \"PasswordCallback object is not released\");\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/javax\/security\/auth\/callback\/PasswordCallback\/CheckCleanerBound.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8284910\n+ * @summary Buffer clean in PasswordCallback\n+ *\/\n+\n+import javax.security.auth.callback.PasswordCallback;\n+import java.util.Arrays;\n+import java.util.WeakHashMap;\n+\n+public final class PasswordCleanup {\n+    private final static WeakHashMap<PasswordCallback, ?> weakHashMap =\n+            new WeakHashMap<>();\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Create an object\n+        PasswordCallback passwordCallback =\n+                new PasswordCallback(\"Password: \", false);\n+        passwordCallback.setPassword(\"ThisIsAPassword\".toCharArray());\n+        char[] originPassword = passwordCallback.getPassword();\n+\n+        \/\/ Use password clear method.\n+        passwordCallback.clearPassword();\n+\n+        \/\/ Check that the password is cleared.\n+        char[] clearedPassword = passwordCallback.getPassword();\n+        if (Arrays.equals(originPassword, clearedPassword)) {\n+            throw new RuntimeException(\n+                \"PasswordCallback.clearPassword() does not clear passwords\");\n+        }\n+\n+        \/\/ Check if the PasswordCallback object could be collected.\n+        weakHashMap.put(passwordCallback, null);\n+        passwordCallback = null;\n+\n+        \/\/ Wait to trigger the cleanup.\n+        for (int i = 0; i < 10 && weakHashMap.size() != 0; i++) {\n+            System.gc();\n+            Thread.sleep(100);\n+        }\n+\n+        \/\/ Check if the object has been collected.  The collection will not \n+        \/\/ happen if the cleaner implementation in PasswordCallback is bound \n+        \/\/ to the PasswordCallback object.\n+        if (weakHashMap.size() > 0) {\n+            throw new RuntimeException(\n+                \"PasswordCallback object is not released\");\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/javax\/security\/auth\/callback\/PasswordCallback\/PasswordCleanup.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -1,97 +0,0 @@\n-\/*\n- * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8284910\n- * @summary Buffer clean in PasswordCallback\n- *\/\n-\n-import javax.security.auth.callback.PasswordCallback;\n-import java.util.Arrays;\n-import java.util.WeakHashMap;\n-\n-public final class PasswordCleanup {\n-    private final static WeakHashMap<PasswordCallback, ?> weakHashMap =\n-            new WeakHashMap<>();\n-\n-    public static void main(String[] args) throws Exception {\n-        \/\/ Test password clearing at finalization.\n-        clearAtCollection();\n-\n-        \/\/ Test password clearing with the specific method.\n-        clearWithMethod();\n-    }\n-\n-    private static void clearAtCollection() throws Exception {\n-        \/\/ Create an object\n-        PasswordCallback passwordCallback =\n-                new PasswordCallback(\"Password: \", false);\n-        passwordCallback.setPassword(\"ThisIsAPassword\".toCharArray());\n-\n-        weakHashMap.put(passwordCallback, null);\n-        passwordCallback = null;\n-\n-        \/\/ Check the clearing\n-        checkClearing();\n-    }\n-\n-    private static void clearWithMethod() throws Exception {\n-        \/\/ Create an object\n-        PasswordCallback passwordCallback =\n-                new PasswordCallback(\"Password: \", false);\n-        passwordCallback.setPassword(\"ThisIsAPassword\".toCharArray());\n-        char[] originPassword = passwordCallback.getPassword();\n-\n-        \/\/ Use password clear method.\n-        passwordCallback.clearPassword();\n-\n-        \/\/ Check that the password is cleared.\n-        char[] clearedPassword = passwordCallback.getPassword();\n-        if (Arrays.equals(originPassword, clearedPassword)) {\n-            throw new RuntimeException(\n-                \"PasswordCallback.clearPassword() does not clear passwords\");\n-        }\n-\n-        weakHashMap.put(passwordCallback, null);\n-        passwordCallback = null;\n-\n-        \/\/ Check the clearing\n-        checkClearing();\n-    }\n-\n-    private static void checkClearing() throws Exception {\n-        \/\/ Wait to trigger the cleanup.\n-        for (int i = 0; i < 10 && weakHashMap.size() != 0; i++) {\n-            System.gc();\n-            Thread.sleep(100);\n-        }\n-\n-        \/\/ Check if the object has been collected.\n-        if (weakHashMap.size() > 0) {\n-            throw new RuntimeException(\n-                \"PasswordCallback object is not released\");\n-        }\n-    }\n-}\n-\n","filename":"test\/jdk\/javax\/security\/auth\/callback\/PasswordCleanup.java","additions":0,"deletions":97,"binary":false,"changes":97,"status":"deleted"}]}