{"files":[{"patch":"@@ -1893,18 +1893,0 @@\n-void MacroAssembler::atomic_incw(Register counter_addr, Register tmp, Register tmp2) {\n-  if (UseLSE) {\n-    mov(tmp, 1);\n-    ldadd(Assembler::word, tmp, zr, counter_addr);\n-    return;\n-  }\n-  Label retry_load;\n-  prfm(Address(counter_addr), PSTL1STRM);\n-  bind(retry_load);\n-  \/\/ flush and load exclusive from the memory location\n-  ldxrw(tmp, counter_addr);\n-  addw(tmp, tmp, 1);\n-  \/\/ if we store+flush with no intervening write tmp will be zero\n-  stxrw(tmp2, tmp, counter_addr);\n-  cbnzw(tmp2, retry_load);\n-}\n-\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -113,7 +113,0 @@\n-  \/\/ Helper functions for statistics gathering.\n-  \/\/ Unconditional atomic increment.\n-  void atomic_incw(Register counter_addr, Register tmp, Register tmp2);\n-  void atomic_incw(Address counter_addr, Register tmp1, Register tmp2, Register tmp3) {\n-    lea(tmp1, counter_addr);\n-    atomic_incw(tmp1, tmp2, tmp3);\n-  }\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1981,9 +1981,2 @@\n-  Register rscratch3 = r0;\n-  __ push(rscratch1);\n-  __ push(rscratch2);\n-  __ push(rscratch3);\n-  __ mov(rscratch3, (address) &BytecodeCounter::_counter_value);\n-  __ atomic_add(noreg, 1, rscratch3);\n-  __ pop(rscratch3);\n-  __ pop(rscratch2);\n-  __ pop(rscratch1);\n+  __ mov(r10, (address) &BytecodeCounter::_counter_value);\n+  __ atomic_addw(noreg, 1, r10);\n@@ -1992,3 +1985,4 @@\n-void TemplateInterpreterGenerator::histogram_bytecode(Template* t) { ; }\n-\n-void TemplateInterpreterGenerator::histogram_bytecode_pair(Template* t) { ; }\n+void TemplateInterpreterGenerator::histogram_bytecode(Template* t) {\n+  __ mov(r10, (address) &BytecodeHistogram::_counters[t->bytecode()]);\n+  __ atomic_addw(noreg, 1, r10);\n+}\n@@ -1996,0 +1990,21 @@\n+void TemplateInterpreterGenerator::histogram_bytecode_pair(Template* t) {\n+  \/\/ Calculate new index for counter:\n+  \/\/   _index = (_index >> log2_number_of_codes) |\n+  \/\/            (bytecode << log2_number_of_codes);\n+  Register index_addr = rscratch1;\n+  Register index = rscratch2;\n+  __ mov(index_addr, (address) &BytecodePairHistogram::_index);\n+  __ ldrw(index, index_addr);\n+  __ mov(r10,\n+         ((int)t->bytecode()) << BytecodePairHistogram::log2_number_of_codes);\n+  __ orrw(index, r10, index, Assembler::LSR,\n+          BytecodePairHistogram::log2_number_of_codes);\n+  __ strw(index, index_addr);\n+\n+  \/\/ Bump bucket contents:\n+  \/\/   _counters[_index] ++;\n+  Register counter_addr = rscratch1;\n+  __ mov(r10, (address) &BytecodePairHistogram::_counters);\n+  __ lea(counter_addr, Address(r10, index, Address::lsl(LogBytesPerInt)));\n+  __ atomic_addw(noreg, 1, counter_addr);\n+}\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":27,"deletions":12,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -359,1 +359,0 @@\n-  if (PrintBytecodeHistogram)                                    histogram_bytecode(t);\n@@ -363,0 +362,1 @@\n+  if (PrintBytecodeHistogram)                                    histogram_bytecode(t);\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}