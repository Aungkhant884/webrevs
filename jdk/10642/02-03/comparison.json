{"files":[{"patch":"@@ -2775,14 +2775,0 @@\n-\/\/ Atomic bitwise OR on word in memory addr with operand op.\n-\/\/ Note-1: the value in memory addr can be optionally shifted.\n-\/\/ Note-2: the final computation result is stored in register result as well.\n-void MacroAssembler::atomic_orrw(Register addr, Register op, Register result, Register tmp,\n-                                 enum shift_kind kind, unsigned shift) {\n-  Label retry_load;\n-  prfm(Address(addr), PSTL1STRM);\n-  bind(retry_load);\n-  ldxrw(result, addr);\n-  orrw(result, op, result, kind, shift);\n-  stxrw(tmp, result, addr);\n-  cbnzw(tmp, retry_load);\n-}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1065,6 +1065,0 @@\n-  \/\/ Atomic bitwise OR on word in memory addr with operand op.\n-  \/\/ Note-1: the value in memory addr can be optionally shifted.\n-  \/\/ Note-2: the final computation result is stored in register result as well.\n-  void atomic_orrw(Register addr, Register op, Register result, Register tmp,\n-                   enum shift_kind kind = Assembler::LSL, unsigned shift = 0);\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1994,3 +1994,2 @@\n-  Register index_addr = r10;\n-  Register index = r11;\n-  Label L;\n+  Register index_addr = rscratch1;\n+  Register index = rscratch2;\n@@ -1998,1 +1997,2 @@\n-  __ mov(rscratch1,\n+  __ ldrw(index, index_addr);\n+  __ mov(r10,\n@@ -2000,4 +2000,3 @@\n-  __ atomic_orrw(index_addr, rscratch1, index,\n-                 \/* tmp *\/ rscratch2,\n-                 \/* kind *\/ Assembler::LSR,\n-                 \/* shift *\/ BytecodePairHistogram::log2_number_of_codes);\n+  __ orrw(index, r10, index, Assembler::LSR,\n+          BytecodePairHistogram::log2_number_of_codes);\n+  __ strw(index, index_addr);\n@@ -2007,3 +2006,3 @@\n-  Register counter_addr = r10;\n-  __ mov(rscratch1, (address) &BytecodePairHistogram::_counters);\n-  __ lea(counter_addr, Address(rscratch1, index, Address::lsl(LogBytesPerInt)));\n+  Register counter_addr = rscratch1;\n+  __ mov(r10, (address) &BytecodePairHistogram::_counters);\n+  __ lea(counter_addr, Address(r10, index, Address::lsl(LogBytesPerInt)));\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"}]}