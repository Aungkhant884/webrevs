{"files":[{"patch":"@@ -1893,18 +1893,0 @@\n-void MacroAssembler::atomic_incw(Register counter_addr, Register tmp, Register tmp2) {\n-  if (UseLSE) {\n-    mov(tmp, 1);\n-    ldadd(Assembler::word, tmp, zr, counter_addr);\n-    return;\n-  }\n-  Label retry_load;\n-  prfm(Address(counter_addr), PSTL1STRM);\n-  bind(retry_load);\n-  \/\/ flush and load exclusive from the memory location\n-  ldxrw(tmp, counter_addr);\n-  addw(tmp, tmp, 1);\n-  \/\/ if we store+flush with no intervening write tmp will be zero\n-  stxrw(tmp2, tmp, counter_addr);\n-  cbnzw(tmp2, retry_load);\n-}\n-\n-\n@@ -2793,0 +2775,14 @@\n+\/\/ Atomic bitwise OR on word in memory addr with operand op.\n+\/\/ Note-1: the value in memory addr can be optionally shifted.\n+\/\/ Note-2: the final computation result is stored in register result as well.\n+void MacroAssembler::atomic_orrw(Register addr, Register op, Register result, Register tmp,\n+                                 enum shift_kind kind, unsigned shift) {\n+  Label retry_load;\n+  prfm(Address(addr), PSTL1STRM);\n+  bind(retry_load);\n+  ldxrw(result, addr);\n+  orrw(result, op, result, kind, shift);\n+  stxrw(tmp, result, addr);\n+  cbnzw(tmp, retry_load);\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":14,"deletions":18,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -113,7 +113,0 @@\n-  \/\/ Helper functions for statistics gathering.\n-  \/\/ Unconditional atomic increment.\n-  void atomic_incw(Register counter_addr, Register tmp, Register tmp2);\n-  void atomic_incw(Address counter_addr, Register tmp1, Register tmp2, Register tmp3) {\n-    lea(tmp1, counter_addr);\n-    atomic_incw(tmp1, tmp2, tmp3);\n-  }\n@@ -1072,0 +1065,6 @@\n+  \/\/ Atomic bitwise OR on word in memory addr with operand op.\n+  \/\/ Note-1: the value in memory addr can be optionally shifted.\n+  \/\/ Note-2: the final computation result is stored in register result as well.\n+  void atomic_orrw(Register addr, Register op, Register result, Register tmp,\n+                   enum shift_kind kind = Assembler::LSL, unsigned shift = 0);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1981,4 +1981,1 @@\n-  Register rscratch3 = r0;\n-  __ push(rscratch1);\n-  __ push(rscratch2);\n-  __ push(rscratch3);\n+  Register rscratch3 = r10;\n@@ -1986,4 +1983,1 @@\n-  __ atomic_add(noreg, 1, rscratch3);\n-  __ pop(rscratch3);\n-  __ pop(rscratch2);\n-  __ pop(rscratch1);\n+  __ atomic_addw(noreg, 1, rscratch3);\n@@ -1992,3 +1986,5 @@\n-void TemplateInterpreterGenerator::histogram_bytecode(Template* t) { ; }\n-\n-void TemplateInterpreterGenerator::histogram_bytecode_pair(Template* t) { ; }\n+void TemplateInterpreterGenerator::histogram_bytecode(Template* t) {\n+  Register rscratch3 = r10;\n+  __ mov(rscratch3, (address) &BytecodeHistogram::_counters[t->bytecode()]);\n+  __ atomic_addw(noreg, 1, rscratch3);\n+}\n@@ -1996,0 +1992,22 @@\n+void TemplateInterpreterGenerator::histogram_bytecode_pair(Template* t) {\n+  \/\/ Calculate new index for counter:\n+  \/\/   _index = (_index >> log2_number_of_codes) |\n+  \/\/            (bytecode << log2_number_of_codes);\n+  Register index_addr = r10;\n+  Register index = r11;\n+  Label L;\n+  __ mov(index_addr, (address) &BytecodePairHistogram::_index);\n+  __ mov(rscratch1,\n+         ((int)t->bytecode()) << BytecodePairHistogram::log2_number_of_codes);\n+  __ atomic_orrw(index_addr, rscratch1, index,\n+                 \/* tmp *\/ rscratch2,\n+                 \/* kind *\/ Assembler::LSR,\n+                 \/* shift *\/ BytecodePairHistogram::log2_number_of_codes);\n+\n+  \/\/ Bump bucket contents:\n+  \/\/   _counters[_index] ++;\n+  Register counter_addr = r10;\n+  __ mov(rscratch1, (address) &BytecodePairHistogram::_counters);\n+  __ lea(counter_addr, Address(rscratch1, index, Address::lsl(LogBytesPerInt)));\n+  __ atomic_addw(noreg, 1, counter_addr);\n+}\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":29,"deletions":11,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -359,1 +359,0 @@\n-  if (PrintBytecodeHistogram)                                    histogram_bytecode(t);\n@@ -363,0 +362,1 @@\n+  if (PrintBytecodeHistogram)                                    histogram_bytecode(t);\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}