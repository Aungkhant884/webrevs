{"files":[{"patch":"@@ -175,0 +175,10 @@\n+  }\n+}\n+\n+void ShenandoahAsserts::assert_in_heap_or_null(void* interior_loc, oop obj, const char *file, int line) {\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+\n+  if (obj != NULL && !heap->is_in(obj)) {\n+    print_failure(_safe_unknown, obj, interior_loc, NULL, \"Shenandoah assert_in_heap_or_null failed\",\n+                  \"oop must point to a heap address\",\n+                  file, line);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAsserts.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+  static void assert_in_heap_or_null(void* interior_loc, oop obj, const char* file, int line);\n@@ -79,0 +80,2 @@\n+#define shenandoah_assert_in_heap_or_null(interior_loc, obj) \\\n+                    ShenandoahAsserts::assert_in_heap_or_null(interior_loc, obj, __FILE__, __LINE__)\n@@ -152,0 +155,1 @@\n+#define shenandoah_assert_in_heap_or_null(interior_loc, obj)\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAsserts.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -112,35 +112,0 @@\n-oop ShenandoahBarrierSet::load_reference_barrier_not_null(oop obj) {\n-  if (ShenandoahLoadRefBarrier && _heap->has_forwarded_objects()) {\n-    return load_reference_barrier_impl(obj);\n-  } else {\n-    return obj;\n-  }\n-}\n-\n-oop ShenandoahBarrierSet::load_reference_barrier(oop obj) {\n-  if (obj != NULL) {\n-    return load_reference_barrier_not_null(obj);\n-  } else {\n-    return obj;\n-  }\n-}\n-\n-oop ShenandoahBarrierSet::load_reference_barrier_impl(oop obj) {\n-  assert(ShenandoahLoadRefBarrier, \"should be enabled\");\n-  if (!CompressedOops::is_null(obj)) {\n-    bool evac_in_progress = _heap->is_evacuation_in_progress();\n-    oop fwd = resolve_forwarded_not_null(obj);\n-    if (evac_in_progress &&\n-        _heap->in_collection_set(obj) &&\n-        obj == fwd) {\n-      Thread *t = Thread::current();\n-      ShenandoahEvacOOMScope oom_evac_scope(t);\n-      return _heap->evacuate_object(obj, t);\n-    } else {\n-      return fwd;\n-    }\n-  } else {\n-    return obj;\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":0,"deletions":35,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -90,2 +90,1 @@\n-  oop load_reference_barrier(oop obj);\n-  oop load_reference_barrier_not_null(oop obj);\n+  inline oop load_reference_barrier(oop obj);\n@@ -114,2 +113,0 @@\n-  oop load_reference_barrier_impl(oop obj);\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -79,0 +79,23 @@\n+inline oop ShenandoahBarrierSet::load_reference_barrier(oop obj) {\n+  if (!ShenandoahLoadRefBarrier) {\n+    return obj;\n+  }\n+  if (_heap->has_forwarded_objects() &&\n+      _heap->in_collection_set(obj)) { \/\/ Subsumes NULL-check\n+    assert(obj != NULL, \"cset check must have subsumed NULL-check\");\n+    oop fwd = resolve_forwarded_not_null(obj);\n+    \/\/ TODO: It should not be necessary to check evac-in-progress here.\n+    \/\/ We do it for mark-compact, which may have forwarded objects,\n+    \/\/ and objects in cset and gets here via runtime barriers.\n+    \/\/ We can probably fix this as soon as mark-compact has its own\n+    \/\/ marking phase.\n+    if (obj == fwd && _heap->is_evacuation_in_progress()) {\n+       Thread* t = Thread::current();\n+      ShenandoahEvacOOMScope oom_evac_scope(t);\n+      return _heap->evacuate_object(obj, t);\n+    }\n+    return fwd;\n+  }\n+  return obj;\n+}\n+\n@@ -95,1 +118,1 @@\n-  oop fwd = load_reference_barrier_not_null(obj);\n+  oop fwd = load_reference_barrier(obj);\n@@ -131,2 +154,1 @@\n-  assert(value != NULL, \"checked before\");\n-  if (ShenandoahSATBBarrier && _heap->is_concurrent_mark_in_progress()) {\n+  if (value != NULL && ShenandoahSATBBarrier && _heap->is_concurrent_mark_in_progress()) {\n@@ -145,1 +167,0 @@\n-  assert(value != NULL, \"checked by caller\");\n@@ -155,1 +176,0 @@\n-  assert(value != NULL, \"checked by caller\");\n@@ -170,3 +190,1 @@\n-    if (value != NULL) {\n-      bs->keep_alive_if_weak<decorators>(value);\n-    }\n+    bs->keep_alive_if_weak<decorators>(value);\n@@ -181,5 +199,3 @@\n-  if (value != NULL) {\n-    ShenandoahBarrierSet *const bs = ShenandoahBarrierSet::barrier_set();\n-    value = bs->load_reference_barrier_not_null(value);\n-    bs->keep_alive_if_weak<decorators>(value);\n-  }\n+  ShenandoahBarrierSet *const bs = ShenandoahBarrierSet::barrier_set();\n+  value = bs->load_reference_barrier(value);\n+  bs->keep_alive_if_weak<decorators>(value);\n@@ -192,6 +208,4 @@\n-  if (value != NULL) {\n-    ShenandoahBarrierSet *const bs = ShenandoahBarrierSet::barrier_set();\n-    value = bs->load_reference_barrier_not_null(value);\n-    bs->keep_alive_if_weak(AccessBarrierSupport::resolve_possibly_unknown_oop_ref_strength<decorators>(base, offset),\n-                           value);\n-  }\n+  ShenandoahBarrierSet *const bs = ShenandoahBarrierSet::barrier_set();\n+  value = bs->load_reference_barrier(value);\n+  bs->keep_alive_if_weak(AccessBarrierSupport::resolve_possibly_unknown_oop_ref_strength<decorators>(base, offset),\n+                         value);\n@@ -242,4 +256,2 @@\n-  if (res != NULL) {\n-    res = ShenandoahBarrierSet::barrier_set()->load_reference_barrier_not_null(res);\n-    bs->satb_enqueue(res);\n-  }\n+  res = ShenandoahBarrierSet::barrier_set()->load_reference_barrier(res);\n+  bs->satb_enqueue(res);\n@@ -270,4 +282,2 @@\n-  if (previous != NULL) {\n-    previous = ShenandoahBarrierSet::barrier_set()->load_reference_barrier_not_null(previous);\n-    bs->satb_enqueue(previous);\n-  }\n+  previous = ShenandoahBarrierSet::barrier_set()->load_reference_barrier(previous);\n+  bs->satb_enqueue(previous);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.inline.hpp","additions":37,"deletions":27,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  shenandoah_assert_in_heap(NULL, p);\n+  shenandoah_assert_in_heap_or_null(NULL, p);\n@@ -48,1 +48,1 @@\n-  assert(_heap->is_in(p), \"Must be in the heap\");\n+  assert(p == NULL || _heap->is_in(p), \"Must be in the heap\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-#include \"gc\/shenandoah\/shenandoahBarrierSet.hpp\"\n+#include \"gc\/shenandoah\/shenandoahBarrierSet.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/stackValue.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}