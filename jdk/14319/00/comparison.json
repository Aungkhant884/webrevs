{"files":[{"patch":"@@ -4074,1 +4074,1 @@\n-                !refc.isInterface() &&\n+                !refc.isInterface() && !lookupClass().isInterface() &&\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8301721\n+ * @library \/test\/lib\n+ * @run main FindSpecialObjectMethod\n+ * @summary Test findSpecial on Object methods calling from a class or interface.\n+ *\/\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.util.Objects;\n+\n+import static java.lang.invoke.MethodType.*;\n+import static jdk.test.lib.Asserts.*;\n+\n+public class FindSpecialObjectMethod {\n+    static class C {\n+        public static Object test(C o) throws Throwable {\n+            MethodHandles.Lookup lookup = MethodHandles.lookup();\n+            MethodHandle mh = lookup.findSpecial(Object.class, \"toString\", methodType(String.class), C.class);\n+            return mh.invoke(o);\n+        }\n+\n+        public String toString() {\n+            return \"C\";\n+        }\n+    }\n+\n+    interface I {\n+        static Object test(I o) throws Throwable {\n+            MethodHandles.Lookup lookup = MethodHandles.lookup();\n+            MethodHandle mh = lookup.findSpecial(Object.class, \"toString\", methodType(String.class), I.class);\n+            return mh.invoke(o);\n+        }\n+\n+        static void noAccess() throws Throwable {\n+            try {\n+                MethodHandles.Lookup lookup = MethodHandles.lookup();\n+                MethodHandle mh = lookup.findSpecial(String.class, \"hashCode\", methodType(int.class), I.class);\n+                throw new RuntimeException(\"IllegalAccessException not thrown\");\n+            } catch (IllegalAccessException ex) {}\n+        }\n+    }\n+\n+    public static void main(String... args) throws Throwable {\n+        \/\/ Object.toString can be called from invokespecial from within\n+        \/\/ a special caller class C or interface I\n+        C c = new C();\n+        I i = new I() {};\n+        assertEquals(C.test(c), Objects.toIdentityString(c));\n+        assertEquals(I.test(i), Objects.toIdentityString(i));\n+\n+        \/\/ I has no access to methods in other class besides Object\n+        I.noAccess();\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/invoke\/findSpecial\/FindSpecialObjectMethod.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}