{"files":[{"patch":"@@ -28,6 +28,2 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.LinkedList;\n-import java.util.List;\n+import java.util.*;\n+\n@@ -860,0 +856,33 @@\n+    private static final Map<Integer, CipherSuite> cipherSuiteIds;\n+    private static final Map<String, CipherSuite> cipherSuiteNames;\n+    private static final List<CipherSuite> allowedCipherSuites;\n+    private static final List<CipherSuite> defaultCipherSuites;\n+\n+    static {\n+        Map<Integer, CipherSuite> ids = new HashMap<>();\n+        Map<String, CipherSuite> names = new HashMap<>();\n+        List<CipherSuite> allowedCS = new ArrayList<>();\n+        List<CipherSuite> defaultCS = new ArrayList<>();\n+\n+        for(CipherSuite cs : CipherSuite.values()) {\n+            ids.put(cs.id, cs);\n+            names.put(cs.name, cs);\n+            for (String alias : cs.aliases) {\n+                names.put(alias, cs);\n+            }\n+\n+            if (!cs.supportedProtocols.isEmpty()) {\n+                allowedCS.add(cs);\n+            }\n+\n+            if (cs.isDefaultEnabled) {\n+                defaultCS.add(cs);\n+            }\n+        }\n+\n+        cipherSuiteIds = Map.copyOf(ids);\n+        cipherSuiteNames = Map.copyOf(names);\n+        allowedCipherSuites = List.copyOf(allowedCS);\n+        defaultCipherSuites = List.copyOf(defaultCS);\n+    }\n+\n@@ -897,8 +926,1 @@\n-        for (CipherSuite cs : CipherSuite.values()) {\n-            if (cs.name.equals(ciperSuiteName) ||\n-                    cs.aliases.contains(ciperSuiteName)) {\n-                return cs;\n-            }\n-        }\n-\n-        return null;\n+        return cipherSuiteNames.get(ciperSuiteName);\n@@ -908,7 +930,1 @@\n-        for (CipherSuite cs : CipherSuite.values()) {\n-            if (cs.id == id) {\n-                return cs;\n-            }\n-        }\n-\n-        return null;\n+        return cipherSuiteIds.get(id);\n@@ -918,4 +934,4 @@\n-        for (CipherSuite cs : CipherSuite.values()) {\n-            if (cs.id == id) {\n-                return cs.name;\n-            }\n+        CipherSuite cs = cipherSuiteIds.get(id);\n+\n+        if (cs != null) {\n+            return cs.name;\n@@ -928,11 +944,1 @@\n-        Collection<CipherSuite> cipherSuites = new LinkedList<>();\n-        for (CipherSuite cs : CipherSuite.values()) {\n-            if (!cs.supportedProtocols.isEmpty()) {\n-                cipherSuites.add(cs);\n-            } else {\n-                \/\/ values() is ordered, remaining cipher suites are\n-                \/\/ not supported.\n-                break;\n-            }\n-        }\n-        return cipherSuites;\n+        return allowedCipherSuites;\n@@ -942,11 +948,1 @@\n-        Collection<CipherSuite> cipherSuites = new LinkedList<>();\n-        for (CipherSuite cs : CipherSuite.values()) {\n-            if (cs.isDefaultEnabled) {\n-                cipherSuites.add(cs);\n-            } else {\n-                \/\/ values() is ordered, remaining cipher suites are\n-                \/\/ not enabled.\n-                break;\n-            }\n-        }\n-        return cipherSuites;\n+        return defaultCipherSuites;\n@@ -975,13 +971,4 @@\n-            for (CipherSuite cs : CipherSuite.values()) {\n-                if (!cs.supportedProtocols.isEmpty()) {\n-                    if (cs.name.equals(name) ||\n-                            cs.aliases.contains(name)) {\n-                        cipherSuites.add(cs);\n-                        found = true;\n-                        break;\n-                    }\n-                } else {\n-                    \/\/ values() is ordered, remaining cipher suites are\n-                    \/\/ not supported.\n-                    break;\n-                }\n+            CipherSuite cs;\n+            if ((cs = cipherSuiteNames.get(name)) != null && !cs.supportedProtocols.isEmpty()) {\n+                cipherSuites.add(cs);\n+                found = true;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CipherSuite.java","additions":47,"deletions":60,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package org.openjdk.bench.java.security;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+@Fork(jvmArgsAppend = {\"--add-exports\", \"java.base\/sun.security.ssl=ALL-UNNAMED\", \"--add-opens\", \"java.base\/sun.security.ssl=ALL-UNNAMED\"})\n+@State(Scope.Benchmark)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@BenchmarkMode(Mode.Throughput)\n+public class CipherSuiteBench {\n+\n+    Method nameOf;\n+\n+    @Param({\"TLS_AES_256_GCM_SHA384\",\n+            \"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384\",\n+            \"TLS_DHE_DSS_WITH_AES_128_CBC_SHA256\",\n+            \"TLS_DHE_RSA_WITH_AES_256_CBC_SHA\" })\n+    String cipherSuite;\n+\n+    @Setup\n+    public void initilizeClass() throws ClassNotFoundException, NoSuchMethodException {\n+        Class<?> cs = Class.forName(\"sun.security.ssl.CipherSuite\");\n+        nameOf = cs.getDeclaredMethod(\"nameOf\", String.class);\n+        nameOf.setAccessible(true);\n+    }\n+\n+    @Benchmark\n+    public Object benchmarkCipherSuite() throws InvocationTargetException, IllegalAccessException {\n+        return nameOf.invoke(null,cipherSuite);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/CipherSuiteBench.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"}]}