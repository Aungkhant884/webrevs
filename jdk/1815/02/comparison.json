{"files":[{"patch":"@@ -706,2 +706,2 @@\n-    \/\/ If UseCompressedOops=1, java heap may have been placed in coops-friendly\n-    \/\/  territory already (lower address regions), so we attempt to place ccs\n+    \/\/ If UseCompressedOops=1 and the java heap has been placed in coops-friendly\n+    \/\/  territory, i.e. its base is under 32G, then we attempt to place ccs\n@@ -709,4 +709,4 @@\n-    \/\/ If UseCompressedOops=0, the heap has been placed anywhere - probably in\n-    \/\/  high memory regions. In that case, try to place ccs at the lowest allowed\n-    \/\/  mapping address.\n-    address base = UseCompressedOops ? CompressedOops::end() : (address)HeapBaseMinAddress;\n+    \/\/ Otherwise the lower 32G are still free. We try to place ccs at the lowest\n+    \/\/ allowed mapping address.\n+    address base = (UseCompressedOops && (uint64_t)CompressedOops::base() < OopEncodingHeapMax) ?\n+                   CompressedOops::end() : (address)HeapBaseMinAddress;\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -101,5 +101,6 @@\n-        if (testNarrowKlassBase() && !Platform.isAix()) {\n-            \/\/ AIX: the heap cannot be placed below 32g. The first attempt to\n-            \/\/ place the CCS behind the heap fails (luckily). Subsequently CCS\n-            \/\/ is successfully placed below 32g. So we get 0x0 as narrow klass\n-            \/\/ base.\n+        if (testNarrowKlassBase() && !Platform.isPPC() && !Platform.isOSX()) {\n+            \/\/ PPC: in most cases the heap cannot be placed below 32g so there\n+            \/\/ is room for ccs and narrow klass base will be 0x0. Exception:\n+            \/\/ Linux 4.1.42 or earlier (see ELF_ET_DYN_BASE in JDK-8244847).\n+            \/\/ For simplicity we exclude PPC.\n+            \/\/ OSX: similar.\n@@ -112,0 +113,23 @@\n+    \/\/ Settings as in largeHeapTest() except for max heap size. We make max heap\n+    \/\/ size even larger such that it cannot fit into lower 32G but not too large\n+    \/\/ for compressed oops.\n+    \/\/ We expect a zerobased ccs.\n+    public static void largeHeapAbove32GTest() throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-XX:+UnlockExperimentalVMOptions\",\n+            \"-Xmx31g\",\n+            \"-XX:-UseAOT\", \/\/ AOT explicitly set klass shift to 3.\n+            logging_option,\n+            \"-Xshare:off\",\n+            \"-XX:+VerifyBeforeGC\", \"-version\");\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        if (testNarrowKlassBase()) {\n+            output.shouldContain(\"Narrow klass base: 0x0000000000000000\");\n+            if (!Platform.isAArch64() && !Platform.isOSX()) {\n+                output.shouldContain(\"Narrow klass shift: 0\");\n+            }\n+        }\n+        output.shouldHaveExitValue(0);\n+    }\n+\n@@ -300,0 +324,1 @@\n+        largeHeapAbove32GTest();\n","filename":"test\/hotspot\/jtreg\/runtime\/CompressedOops\/CompressedClassPointers.java","additions":30,"deletions":5,"binary":false,"changes":35,"status":"modified"}]}