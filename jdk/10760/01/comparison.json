{"files":[{"patch":"@@ -726,6 +726,1 @@\n-    private void relayoutWithoutLayout(Set<Widget> oldVisibleWidgets) {\n-\n-        Diagram diagram = getModel().getDiagram();\n-\n-        SceneAnimator animator = getSceneAnimator();\n-        connectionLayer.removeChildren();\n+    private boolean shouldAnimate() {\n@@ -733,2 +728,2 @@\n-        for (Figure f : diagram.getFigures()) {\n-            if (getWidget(f, FigureWidget.class).isVisible()) {\n+        for (Figure figure : getModel().getDiagram().getFigures()) {\n+            if (getWidget(figure, FigureWidget.class).isVisible()) {\n@@ -738,0 +733,2 @@\n+        return visibleFigureCount <= ANIMATION_LIMIT;\n+    }\n@@ -739,0 +736,11 @@\n+    private void relayoutWithoutLayout(Set<Widget> oldVisibleWidgets) {\n+        assert oldVisibleWidgets != null;\n+\n+        Diagram diagram = getModel().getDiagram();\n+        connectionLayer.removeChildren();\n+\n+        SceneAnimator connectionAnimator = getSceneAnimator();\n+        boolean doAnimation = shouldAnimate();\n+        if (!doAnimation) {\n+            connectionAnimator = null;\n+        }\n@@ -742,11 +750,4 @@\n-        for (Figure f : diagram.getFigures()) {\n-            for (OutputSlot s : f.getOutputSlots()) {\n-                SceneAnimator anim = animator;\n-                if (visibleFigureCount > ANIMATION_LIMIT || oldVisibleWidgets == null) {\n-                    anim = null;\n-                }\n-                List<Connection> cl = new ArrayList<>(s.getConnections().size());\n-                for (FigureConnection c : s.getConnections()) {\n-                    cl.add((Connection) c);\n-                }\n-                processOutputSlot(lastLineCache, s, cl, 0, null, null, 0, 0, anim);\n+        for (Figure figure : diagram.getFigures()) {\n+            for (OutputSlot outputSlot : figure.getOutputSlots()) {\n+                List<Connection> connectionList = new ArrayList<>(outputSlot.getConnections());\n+                processOutputSlot(lastLineCache, outputSlot, connectionList, 0, null, null, connectionAnimator);\n@@ -759,1 +760,1 @@\n-                    processOutputSlot(lastLineCache, null, Collections.singletonList(c), 0, null, null, 0, 0, animator);\n+                    processOutputSlot(lastLineCache, null, Collections.singletonList(c), 0, null, null, connectionAnimator);\n@@ -764,0 +765,1 @@\n+        SceneAnimator animator = getSceneAnimator();\n@@ -769,1 +771,1 @@\n-                if ((visibleFigureCount <= ANIMATION_LIMIT && oldVisibleWidgets != null && oldVisibleWidgets.contains(w))) {\n+                if (doAnimation && oldVisibleWidgets.contains(w)) {\n@@ -785,1 +787,1 @@\n-                    if ((visibleFigureCount <= ANIMATION_LIMIT && oldVisibleWidgets != null && oldVisibleWidgets.contains(w))) {\n+                    if (doAnimation && oldVisibleWidgets.contains(w)) {\n@@ -799,1 +801,1 @@\n-    private void processOutputSlot(Set<Pair<Point, Point>> lastLineCache, OutputSlot outputSlot, List<Connection> connections, int controlPointIndex, Point lastPoint, LineWidget predecessor, int offx, int offy, SceneAnimator animator) {\n+    private void processOutputSlot(Set<Pair<Point, Point>> lastLineCache, OutputSlot outputSlot, List<Connection> connections, int controlPointIndex, Point lastPoint, LineWidget predecessor, SceneAnimator animator) {\n@@ -802,3 +804,2 @@\n-        for (Connection c : connections) {\n-\n-            if (!isVisible(c)) {\n+        for (Connection connection : connections) {\n+            if (!isVisible(connection)) {\n@@ -808,1 +809,1 @@\n-            List<Point> controlPoints = c.getControlPoints();\n+            List<Point> controlPoints = connection.getControlPoints();\n@@ -813,4 +814,4 @@\n-            Point cur = controlPoints.get(controlPointIndex);\n-            if (cur == null) { \/\/ Long connection, has been cut vertically.\n-                cur = specialNullPoint;\n-            } else if (c.hasSlots()) {\n+            Point currentPoint = controlPoints.get(controlPointIndex);\n+            if (currentPoint == null) { \/\/ Long connection, has been cut vertically.\n+                currentPoint = specialNullPoint;\n+            } else if (connection.hasSlots()) {\n@@ -818,1 +819,1 @@\n-                    cur = new Point(cur.x, cur.y - SLOT_OFFSET);\n+                    currentPoint = new Point(currentPoint.x, currentPoint.y - SLOT_OFFSET);\n@@ -820,2 +821,2 @@\n-                           !((Slot)c.getTo()).shouldShowName()) {\n-                    cur = new Point(cur.x, cur.y + SLOT_OFFSET);\n+                           !((Slot)connection.getTo()).shouldShowName()) {\n+                    currentPoint = new Point(currentPoint.x, currentPoint.y + SLOT_OFFSET);\n@@ -825,2 +826,2 @@\n-            if (pointMap.containsKey(cur)) {\n-                pointMap.get(cur).add(c);\n+            if (pointMap.containsKey(currentPoint)) {\n+                pointMap.get(currentPoint).add(connection);\n@@ -829,2 +830,2 @@\n-                newList.add(c);\n-                pointMap.put(cur, newList);\n+                newList.add(connection);\n+                pointMap.put(currentPoint, newList);\n@@ -832,1 +833,0 @@\n-\n@@ -835,2 +835,2 @@\n-        for (Point p : pointMap.keySet()) {\n-            List<Connection> connectionList = pointMap.get(p);\n+        for (Point currentPoint : pointMap.keySet()) {\n+            List<Connection> connectionList = pointMap.get(currentPoint);\n@@ -858,3 +858,3 @@\n-            if (p != specialNullPoint && lastPoint != specialNullPoint && lastPoint != null) {\n-                Point p1 = new Point(lastPoint.x + offx, lastPoint.y + offy);\n-                Point p2 = new Point(p.x + offx, p.y + offy);\n+            if (currentPoint != specialNullPoint && lastPoint != specialNullPoint && lastPoint != null) {\n+                Point p1 = new Point(lastPoint.x, lastPoint.y);\n+                Point p2 = new Point(currentPoint.x, currentPoint.y);\n@@ -877,1 +877,1 @@\n-            processOutputSlot(lastLineCache, outputSlot, connectionList, controlPointIndex + 1, p, newPredecessor, offx, offy, animator);\n+            processOutputSlot(lastLineCache, outputSlot, connectionList, controlPointIndex + 1, currentPoint, newPredecessor, animator);\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramScene.java","additions":45,"deletions":45,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import com.sun.hotspot.igv.layout.Vertex;\n@@ -32,0 +33,1 @@\n+import com.sun.hotspot.igv.view.actions.CustomSelectAction;\n@@ -60,10 +62,9 @@\n-    private static double ZOOM_FACTOR = 0.1;\n-    private OutputSlot outputSlot;\n-    private DiagramScene scene;\n-    private List<Connection> connections;\n-    private Point from;\n-    private Point to;\n-    private Rectangle clientArea;\n-    private Color color = Color.BLACK;\n-    private LineWidget predecessor;\n-    private List<LineWidget> successors;\n+    private final static double ZOOM_FACTOR = 0.1;\n+    private final OutputSlot outputSlot;\n+    private final DiagramScene scene;\n+    private final List<Connection> connections;\n+    private final Point from;\n+    private final Point to;\n+    private final Rectangle clientArea;\n+    private final LineWidget predecessor;\n+    private final List<LineWidget> successors;\n@@ -72,2 +73,2 @@\n-    private boolean isBold;\n-    private boolean isDashed;\n+    private final boolean isBold;\n+    private final boolean isDashed;\n@@ -110,0 +111,1 @@\n+        Color color = Color.BLACK;\n@@ -113,1 +115,1 @@\n-        this.setToolTipText(\"<HTML>\" + generateToolTipText(this.connections) + \"<\/HTML>\");\n+        setToolTipText(\"<HTML>\" + generateToolTipText(this.connections) + \"<\/HTML>\");\n@@ -115,1 +117,1 @@\n-        this.setCheckClipping(true);\n+        setCheckClipping(true);\n@@ -117,1 +119,1 @@\n-        this.getActions().addAction(ActionFactory.createPopupMenuAction(this));\n+        getActions().addAction(ActionFactory.createPopupMenuAction(this));\n@@ -125,1 +127,1 @@\n-        this.getActions().addAction(ActionFactory.createSelectAction(new SelectProvider() {\n+        getActions().addAction(new CustomSelectAction(new SelectProvider() {\n@@ -128,1 +130,1 @@\n-            public boolean isAimingAllowed(Widget arg0, Point arg1, boolean arg2) {\n+            public boolean isAimingAllowed(Widget widget, Point localLocation, boolean invertSelection)  {\n@@ -133,1 +135,1 @@\n-            public boolean isSelectionAllowed(Widget arg0, Point arg1, boolean arg2) {\n+            public boolean isSelectionAllowed(Widget widget, Point localLocation, boolean invertSelection)  {\n@@ -138,6 +140,6 @@\n-            public void select(Widget arg0, Point arg1, boolean arg2) {\n-                Set<Figure> set = new HashSet<>();\n-                for (Connection c : LineWidget.this.connections) {\n-                    if (c.hasSlots()) {\n-                        set.add(scene.getWidget(c.getTo()));\n-                        set.add(scene.getWidget(c.getFrom()));\n+            public void select(Widget widget, Point localLocation, boolean invertSelection) {\n+                Set<Vertex> vertexSet = new HashSet<>();\n+                for (Connection connection : connections) {\n+                    if (connection.hasSlots()) {\n+                        vertexSet.add(connection.getTo().getVertex());\n+                        vertexSet.add(connection.getFrom().getVertex());\n@@ -146,1 +148,1 @@\n-                LineWidget.this.scene.setSelectedObjects(set);\n+                scene.userSelectionSuggested(vertexSet, invertSelection);\n@@ -212,0 +214,1 @@\n+                break;\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/widgets\/LineWidget.java","additions":28,"deletions":25,"binary":false,"changes":53,"status":"modified"}]}