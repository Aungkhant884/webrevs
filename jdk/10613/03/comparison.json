{"files":[{"patch":"@@ -27,0 +27,2 @@\n+import java.io.File;\n+import java.io.FilenameFilter;\n@@ -63,1 +65,1 @@\n- *   SmartTestApp = new SmartTestApp();\n+ *   SmartTestApp a = new SmartTestApp();\n@@ -73,1 +75,1 @@\n- *   a.waitAppReady();\n+ *   a.waitAppReadyOrCrashed();\n@@ -266,1 +268,1 @@\n-    public void waitAppReady(long timeout) throws IOException {\n+    public void waitAppReadyOrCrashed(long timeout) throws IOException {\n@@ -271,3 +273,7 @@\n-            long epoch = epoch();\n-            if (epoch - here > timeout) {\n-                throw new IOException(\"App waiting timeout\");\n+            \/\/ Check for crash or lock modification now, and immediately after sleeping for spinDelay each loop.\n+            if (!appProcess.isAlive()) {\n+                if (forceCrash) {\n+                    return; \/\/ This is expected. Just return.\n+                } else {\n+                    throw new IOException(\"App exited unexpectedly with \" + appProcess.exitValue());\n+                }\n@@ -282,7 +288,3 @@\n-            \/\/ Make sure process didn't already exit\n-            if (!appProcess.isAlive()) {\n-                if (forceCrash) {\n-                    return; \/\/ This is expected. Just return.\n-                } else {\n-                    throw new IOException(\"App exited unexpectedly with \" + appProcess.exitValue());\n-                }\n+            long timeTaken = epoch() - here;\n+            if (timeTaken > timeout) {\n+                throw new IOException(\"Timeout: app not started or crashed in \" + timeTaken + \"ms\");\n@@ -290,1 +292,0 @@\n-\n@@ -302,2 +303,2 @@\n-    public void waitAppReady() throws IOException {\n-        waitAppReady(forceCrash ? appCoreWaitTime : appWaitTime);\n+    public void waitAppReadyOrCrashed() throws IOException {\n+        waitAppReadyOrCrashed(forceCrash ? appCoreWaitTime : appWaitTime);\n@@ -444,0 +445,1 @@\n+        long t1 = System.currentTimeMillis();\n@@ -447,1 +449,1 @@\n-            theApp.waitAppReady();\n+            theApp.waitAppReadyOrCrashed();\n@@ -449,2 +451,10 @@\n-            System.out.println(\"LingeredApp failed to start: \" + ex);\n-            theApp.finishApp();\n+            boolean alive = theApp.getProcess() != null && theApp.getProcess().isAlive();\n+            System.out.println(\"LingeredApp failed to start or failed to crash. isAlive=\" + alive + \": \" + ex);\n+            \/\/ stopApp in case it is still alive, may be able to get output:\n+            if (alive) {\n+                theApp.stopApp();\n+            }\n+            alive = theApp.getProcess() != null && theApp.getProcess().isAlive();\n+            if (!alive) {\n+                theApp.finishApp(); \/\/ Calls getOutput(), fails if still alive\n+            }\n@@ -453,0 +463,21 @@\n+        } finally {\n+            long t2 = System.currentTimeMillis();\n+            System.out.println(\"LingeredApp startup took \" + (t2 - t1) + \"ms\");\n+            checkForDumps();\n+        }\n+    }\n+\n+    \/**\n+      * Show any dump files of interest in the current directory.\n+      *\/\n+    public static void checkForDumps() {\n+        System.out.println(\"Check for hs_err_pid\/core\/mdmp files:\");\n+        int count = 0;\n+        FilenameFilter filter = (dir, file) -> (file.startsWith(\"hs_err_pid\") || file.startsWith(\"core\") || file.endsWith(\"mdmp\"));\n+        for (File f : new File(\".\").listFiles(filter)) {\n+            long fileSize = f.length();\n+            System.out.println(f + \" \" + (fileSize \/ 1024 \/ 1024) + \"mb (\" + fileSize + \" bytes)\");\n+            count++;\n+        }\n+        if (count == 0) {\n+            System.out.println(\"None.\");\n","filename":"test\/lib\/jdk\/test\/lib\/apps\/LingeredApp.java","additions":50,"deletions":19,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -116,0 +116,1 @@\n+            \/\/ Core\/minidump usually created in current directory (Linux and Windows).\n@@ -117,1 +118,3 @@\n-            if (corePath.getParent() != null) {\n+            File parent = new File(coreFileLocation).getParentFile();\n+            File cwdParent = new File(\".\").getAbsoluteFile().getParentFile();\n+            if (parent != null && !parent.equals(cwdParent)) {\n","filename":"test\/lib\/jdk\/test\/lib\/util\/CoreUtils.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}