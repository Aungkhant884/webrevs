{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -199,0 +199,6 @@\n+            case \"EMOJI\" -> EMOJI();\n+            case \"EMOJI_PRESENTATION\" -> EMOJI_PRESENTATION();\n+            case \"EMOJI_MODIFIER\" -> EMOJI_MODIFIER();\n+            case \"EMOJI_MODIFIER_BASE\" -> EMOJI_MODIFIER_BASE();\n+            case \"EMOJI_COMPONENT\" -> EMOJI_COMPONENT();\n+            case \"EXTENDED_PICTOGRAPHIC\" -> EXTENDED_PICTOGRAPHIC();\n@@ -424,0 +430,23 @@\n+    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    \/**\n+     * Emoji related binary properties\n+     *\/\n+    static final CharPredicate EMOJI() {\n+        return Character::isEmoji;\n+    }\n+    static final CharPredicate EMOJI_PRESENTATION() {\n+        return Character::isEmojiPresentation;\n+    }\n+    static final CharPredicate EMOJI_MODIFIER() {\n+        return Character::isEmojiModifier;\n+    }\n+    static final CharPredicate EMOJI_MODIFIER_BASE() {\n+        return Character::isEmojiModifierBase;\n+    }\n+    static final CharPredicate EMOJI_COMPONENT() {\n+        return Character::isEmojiComponent;\n+    }\n+    static final CharPredicate EXTENDED_PICTOGRAPHIC() {\n+        return Character::isExtendedPictographic;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/CharPredicates.java","additions":30,"deletions":1,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -641,0 +641,6 @@\n+ *   <li> Emoji\n+ *   <li> Emoji_Presentation\n+ *   <li> Emoji_Modifier\n+ *   <li> Emoji_Modifier_Base\n+ *   <li> Emoji_Component\n+ *   <li> Extended_Pictographic\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/Pattern.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n- * 8280403 8264160 8281315\n+ * 8280403 8264160 8281315 8305107\n@@ -52,1 +52,0 @@\n-import java.nio.file.Path;\n@@ -65,0 +64,2 @@\n+import static java.lang.Character.*;\n+\n@@ -130,1 +131,1 @@\n-        char[] ca = Character.toChars(codePoint);\n+        char[] ca = toChars(codePoint);\n@@ -416,1 +417,1 @@\n-        assert (Character.getType('\\u030a') == Character.NON_SPACING_MARK);\n+        assert (getType('\\u030a') == NON_SPACING_MARK);\n@@ -966,8 +967,8 @@\n-            check(\"{javaLowerCase}\", c, Character.isLowerCase(c));\n-            check(\"{javaUpperCase}\", c, Character.isUpperCase(c));\n-            check(\"{javaUpperCase}+\", c, Character.isUpperCase(c));\n-            check(\"{javaTitleCase}\", c, Character.isTitleCase(c));\n-            check(\"{javaDigit}\", c, Character.isDigit(c));\n-            check(\"{javaDefined}\", c, Character.isDefined(c));\n-            check(\"{javaLetter}\", c, Character.isLetter(c));\n-            check(\"{javaLetterOrDigit}\", c, Character.isLetterOrDigit(c));\n+            check(\"{javaLowerCase}\", c, isLowerCase(c));\n+            check(\"{javaUpperCase}\", c, isUpperCase(c));\n+            check(\"{javaUpperCase}+\", c, isUpperCase(c));\n+            check(\"{javaTitleCase}\", c, isTitleCase(c));\n+            check(\"{javaDigit}\", c, isDigit(c));\n+            check(\"{javaDefined}\", c, isDefined(c));\n+            check(\"{javaLetter}\", c, isLetter(c));\n+            check(\"{javaLetterOrDigit}\", c, isLetterOrDigit(c));\n@@ -975,1 +976,1 @@\n-                  Character.isJavaIdentifierStart(c));\n+                  isJavaIdentifierStart(c));\n@@ -977,1 +978,1 @@\n-                  Character.isJavaIdentifierPart(c));\n+                  isJavaIdentifierPart(c));\n@@ -979,1 +980,1 @@\n-                  Character.isUnicodeIdentifierStart(c));\n+                  isUnicodeIdentifierStart(c));\n@@ -981,1 +982,1 @@\n-                  Character.isUnicodeIdentifierPart(c));\n+                  isUnicodeIdentifierPart(c));\n@@ -983,5 +984,5 @@\n-                  Character.isIdentifierIgnorable(c));\n-            check(\"{javaSpaceChar}\", c, Character.isSpaceChar(c));\n-            check(\"{javaWhitespace}\", c, Character.isWhitespace(c));\n-            check(\"{javaISOControl}\", c, Character.isISOControl(c));\n-            check(\"{javaMirrored}\", c, Character.isMirrored(c));\n+                  isIdentifierIgnorable(c));\n+            check(\"{javaSpaceChar}\", c, isSpaceChar(c));\n+            check(\"{javaWhitespace}\", c, isWhitespace(c));\n+            check(\"{javaISOControl}\", c, isISOControl(c));\n+            check(\"{javaMirrored}\", c, isMirrored(c));\n@@ -993,11 +994,11 @@\n-            int c = generator.nextInt(Character.MAX_CODE_POINT\n-                                      - Character.MIN_SUPPLEMENTARY_CODE_POINT)\n-                        + Character.MIN_SUPPLEMENTARY_CODE_POINT;\n-            check(\"{javaLowerCase}\", c, Character.isLowerCase(c));\n-            check(\"{javaUpperCase}\", c, Character.isUpperCase(c));\n-            check(\"{javaUpperCase}+\", c, Character.isUpperCase(c));\n-            check(\"{javaTitleCase}\", c, Character.isTitleCase(c));\n-            check(\"{javaDigit}\", c, Character.isDigit(c));\n-            check(\"{javaDefined}\", c, Character.isDefined(c));\n-            check(\"{javaLetter}\", c, Character.isLetter(c));\n-            check(\"{javaLetterOrDigit}\", c, Character.isLetterOrDigit(c));\n+            int c = generator.nextInt(MAX_CODE_POINT\n+                                      - MIN_SUPPLEMENTARY_CODE_POINT)\n+                        + MIN_SUPPLEMENTARY_CODE_POINT;\n+            check(\"{javaLowerCase}\", c, isLowerCase(c));\n+            check(\"{javaUpperCase}\", c, isUpperCase(c));\n+            check(\"{javaUpperCase}+\", c, isUpperCase(c));\n+            check(\"{javaTitleCase}\", c, isTitleCase(c));\n+            check(\"{javaDigit}\", c, isDigit(c));\n+            check(\"{javaDefined}\", c, isDefined(c));\n+            check(\"{javaLetter}\", c, isLetter(c));\n+            check(\"{javaLetterOrDigit}\", c, isLetterOrDigit(c));\n@@ -1005,1 +1006,1 @@\n-                  Character.isJavaIdentifierStart(c));\n+                  isJavaIdentifierStart(c));\n@@ -1007,1 +1008,1 @@\n-                  Character.isJavaIdentifierPart(c));\n+                  isJavaIdentifierPart(c));\n@@ -1009,1 +1010,1 @@\n-                  Character.isUnicodeIdentifierStart(c));\n+                  isUnicodeIdentifierStart(c));\n@@ -1011,1 +1012,1 @@\n-                  Character.isUnicodeIdentifierPart(c));\n+                  isUnicodeIdentifierPart(c));\n@@ -1013,5 +1014,5 @@\n-                  Character.isIdentifierIgnorable(c));\n-            check(\"{javaSpaceChar}\", c, Character.isSpaceChar(c));\n-            check(\"{javaWhitespace}\", c, Character.isWhitespace(c));\n-            check(\"{javaISOControl}\", c, Character.isISOControl(c));\n-            check(\"{javaMirrored}\", c, Character.isMirrored(c));\n+                  isIdentifierIgnorable(c));\n+            check(\"{javaSpaceChar}\", c, isSpaceChar(c));\n+            check(\"{javaWhitespace}\", c, isWhitespace(c));\n+            check(\"{javaISOControl}\", c, isISOControl(c));\n+            check(\"{javaMirrored}\", c, isMirrored(c));\n@@ -1747,1 +1748,1 @@\n-                patternToBe.append(Character.toChars(Character.MIN_SUPPLEMENTARY_CODE_POINT\n+                patternToBe.append(toChars(MIN_SUPPLEMENTARY_CODE_POINT\n@@ -3165,1 +3166,1 @@\n-        doBnM(Character.MIN_SUPPLEMENTARY_CODE_POINT - 10);\n+        doBnM(MIN_SUPPLEMENTARY_CODE_POINT - 10);\n@@ -3177,2 +3178,2 @@\n-                    if (Character.isSupplementaryCodePoint(ch)) {\n-                        patternBuffer.append(Character.toChars(ch));\n+                    if (isSupplementaryCodePoint(ch)) {\n+                        patternBuffer.append(toChars(ch));\n@@ -3204,2 +3205,2 @@\n-                    if (Character.isSupplementaryCodePoint(ch)) {\n-                        s.append(Character.toChars(ch));\n+                    if (isSupplementaryCodePoint(ch)) {\n+                        s.append(toChars(ch));\n@@ -3216,1 +3217,1 @@\n-            if (Character.isLowSurrogate(s.charAt(insertIndex)))\n+            if (isLowSurrogate(s.charAt(insertIndex)))\n@@ -3240,1 +3241,1 @@\n-        doSlice(Character.MAX_VALUE);\n+        doSlice(MAX_VALUE);\n@@ -3242,1 +3243,1 @@\n-        doSlice(Character.MAX_CODE_POINT);\n+        doSlice(MAX_CODE_POINT);\n@@ -3252,1 +3253,1 @@\n-                while (!Character.isLetterOrDigit(randomChar))\n+                while (!isLetterOrDigit(randomChar))\n@@ -3254,2 +3255,2 @@\n-                if (Character.isSupplementaryCodePoint(randomChar)) {\n-                    patternBuffer.append(Character.toChars(randomChar));\n+                if (isSupplementaryCodePoint(randomChar)) {\n+                    patternBuffer.append(toChars(randomChar));\n@@ -3271,1 +3272,1 @@\n-                    while (!Character.isLetterOrDigit(randomChar))\n+                    while (!isLetterOrDigit(randomChar))\n@@ -3273,2 +3274,2 @@\n-                    if (Character.isSupplementaryCodePoint(randomChar)) {\n-                        s.append(Character.toChars(randomChar));\n+                    if (isSupplementaryCodePoint(randomChar)) {\n+                        s.append(toChars(randomChar));\n@@ -3285,1 +3286,1 @@\n-            if (Character.isLowSurrogate(s.charAt(insertIndex)))\n+            if (isLowSurrogate(s.charAt(insertIndex)))\n@@ -3627,1 +3628,1 @@\n-        Character.UnicodeScript lastScript = Character.UnicodeScript.of(0);\n+        UnicodeScript lastScript = UnicodeScript.of(0);\n@@ -3632,1 +3633,1 @@\n-        Character.UnicodeBlock lastBlock = Character.UnicodeBlock.of(0);\n+        UnicodeBlock lastBlock = UnicodeBlock.of(0);\n@@ -3634,1 +3635,1 @@\n-        for (int cp = 1; cp < Character.MAX_CODE_POINT; cp++) {\n+        for (int cp = 1; cp < MAX_CODE_POINT; cp++) {\n@@ -3640,1 +3641,1 @@\n-            Character.UnicodeScript script = Character.UnicodeScript.of(cp);\n+            UnicodeScript script = UnicodeScript.of(cp);\n@@ -3642,1 +3643,1 @@\n-            String str = new String(Character.toChars(cp));\n+            String str = new String(toChars(cp));\n@@ -3651,1 +3652,1 @@\n-            Matcher other = (script == Character.UnicodeScript.COMMON)? unknown : common;\n+            Matcher other = (script == UnicodeScript.COMMON)? unknown : common;\n@@ -3658,1 +3659,1 @@\n-            Character.UnicodeBlock block = Character.UnicodeBlock.of(cp);\n+            UnicodeBlock block = UnicodeBlock.of(cp);\n@@ -3670,1 +3671,1 @@\n-            other = (block == Character.UnicodeBlock.BASIC_LATIN)? greek : latin;\n+            other = (block == UnicodeBlock.BASIC_LATIN)? greek : latin;\n@@ -3702,1 +3703,1 @@\n-             String s = \"A\" + new String(Character.toChars(cp)) + \"B\";\n+             String s = \"A\" + new String(toChars(cp)) + \"B\";\n@@ -3705,2 +3706,2 @@\n-                                               (int) Character.toChars(cp)[0],\n-                                               (int) Character.toChars(cp)[1]);\n+                                               (int) toChars(cp)[0],\n+                                               (int) toChars(cp)[1]);\n@@ -3769,0 +3770,7 @@\n+        \/\/ Emoji properties\n+        Matcher emojiP  = Pattern.compile(\"\\\\p{IsEmoji}\").matcher(\"\");\n+        Matcher emojiPP = Pattern.compile(\"\\\\p{IsEmoji_Presentation}\").matcher(\"\");\n+        Matcher emojiMP = Pattern.compile(\"\\\\p{IsEmoji_Modifier}\").matcher(\"\");\n+        Matcher emojiMBP = Pattern.compile(\"\\\\p{IsEmoji_Modifier_Base}\").matcher(\"\");\n+        Matcher emojiCP = Pattern.compile(\"\\\\p{IsEmoji_Component}\").matcher(\"\");\n+        Matcher extPP   = Pattern.compile(\"\\\\p{IsExtended_Pictographic}\").matcher(\"\");\n@@ -3778,2 +3786,2 @@\n-            String str = new String(Character.toChars(cp));\n-            int type = Character.getType(cp);\n+            String str = new String(toChars(cp));\n+            int type = getType(cp);\n@@ -3782,4 +3790,4 @@\n-                Character.isLowerCase(cp) != lowerU.reset(str).matches() ||\n-                Character.isLowerCase(cp) != lowerP.reset(str).matches() ||\n-                Character.isLowerCase(cp) != lowerEU.reset(str).matches()||\n-                Character.isLowerCase(cp) != lowerJ.reset(str).matches()||\n+                isLowerCase(cp) != lowerU.reset(str).matches() ||\n+                isLowerCase(cp) != lowerP.reset(str).matches() ||\n+                isLowerCase(cp) != lowerEU.reset(str).matches()||\n+                isLowerCase(cp) != lowerJ.reset(str).matches()||\n@@ -3789,2 +3797,2 @@\n-                Character.isUpperCase(cp) != upperP.reset(str).matches() ||\n-                Character.isUpperCase(cp) != upperJ.reset(str).matches() ||\n+                isUpperCase(cp) != upperP.reset(str).matches() ||\n+                isUpperCase(cp) != upperJ.reset(str).matches() ||\n@@ -3794,2 +3802,2 @@\n-                Character.isAlphabetic(cp)!= alphaP.reset(str).matches() ||\n-                Character.isAlphabetic(cp)!= alphaJ.reset(str).matches() ||\n+                isAlphabetic(cp)!= alphaP.reset(str).matches() ||\n+                isAlphabetic(cp)!= alphaJ.reset(str).matches() ||\n@@ -3798,1 +3806,1 @@\n-                Character.isDigit(cp)     != digitU.reset(str).matches() ||\n+                isDigit(cp)     != digitU.reset(str).matches() ||\n@@ -3819,1 +3827,1 @@\n-                (Character.CONTROL == type) != cntrlP.reset(str).matches() ||\n+                (CONTROL == type) != cntrlP.reset(str).matches() ||\n@@ -3821,1 +3829,1 @@\n-                POSIX_ASCII.isHexDigit(cp)   != xdigit.reset(str).matches()  ||\n+                POSIX_ASCII.isHexDigit(cp) != xdigit.reset(str).matches()  ||\n@@ -3828,3 +3836,3 @@\n-                POSIX_ASCII.isWord(cp)   != word.reset(str).matches()  ||\n-                POSIX_Unicode.isWord(cp) != wordU.reset(str).matches() ||\n-                POSIX_Unicode.isWord(cp) != wordEU.reset(str).matches()||\n+                POSIX_ASCII.isWord(cp)    != word.reset(str).matches()  ||\n+                POSIX_Unicode.isWord(cp)  != wordU.reset(str).matches() ||\n+                POSIX_Unicode.isWord(cp)  != wordEU.reset(str).matches()||\n@@ -3832,2 +3840,2 @@\n-                POSIX_ASCII.isWord(cp) != bwb.reset(str).matches() ||\n-                POSIX_Unicode.isWord(cp) != bwbU.reset(str).matches() ||\n+                POSIX_ASCII.isWord(cp)    != bwb.reset(str).matches() ||\n+                POSIX_Unicode.isWord(cp)  != bwbU.reset(str).matches() ||\n@@ -3835,5 +3843,5 @@\n-                Character.isTitleCase(cp) != titleP.reset(str).matches() ||\n-                Character.isLetter(cp)    != letterP.reset(str).matches()||\n-                Character.isIdeographic(cp) != ideogP.reset(str).matches() ||\n-                Character.isIdeographic(cp) != ideogJ.reset(str).matches() ||\n-                (Character.UNASSIGNED == type) == definedP.reset(str).matches() ||\n+                isTitleCase(cp) != titleP.reset(str).matches() ||\n+                isLetter(cp)    != letterP.reset(str).matches()||\n+                isIdeographic(cp) != ideogP.reset(str).matches() ||\n+                isIdeographic(cp) != ideogJ.reset(str).matches() ||\n+                (UNASSIGNED == type) == definedP.reset(str).matches() ||\n@@ -3842,0 +3850,7 @@\n+                \/\/ Emoji properties\n+                isEmoji(cp)     != emojiP.reset(str).matches() ||\n+                isEmojiPresentation(cp) != emojiPP.reset(str).matches() ||\n+                isEmojiModifier(cp) != emojiMP.reset(str).matches() ||\n+                isEmojiModifierBase(cp)!= emojiMBP.reset(str).matches() ||\n+                isEmojiComponent(cp) != emojiCP.reset(str).matches() ||\n+                isExtendedPictographic(cp) != extPP.reset(str).matches() ||\n@@ -3843,3 +3858,3 @@\n-                (Character.CONTROL == type || Character.FORMAT == type ||\n-                 Character.PRIVATE_USE == type || Character.SURROGATE == type ||\n-                 Character.UNASSIGNED == type)\n+                (CONTROL == type || FORMAT == type ||\n+                 PRIVATE_USE == type || SURROGATE == type ||\n+                 UNASSIGNED == type)\n@@ -3864,3 +3879,3 @@\n-        for (int cp = 0; cp < Character.MAX_CODE_POINT; cp++) {\n-            if (!Character.isValidCodePoint(cp) ||\n-                Character.getType(cp) == Character.UNASSIGNED)\n+        for (int cp = 0; cp < MAX_CODE_POINT; cp++) {\n+            if (!isValidCodePoint(cp) ||\n+                getType(cp) == UNASSIGNED)\n@@ -3868,1 +3883,1 @@\n-            String str = new String(Character.toChars(cp));\n+            String str = new String(toChars(cp));\n@@ -3870,1 +3885,1 @@\n-            String p = \"\\\\N{\" + Character.getName(cp) + \"}\";\n+            String p = \"\\\\N{\" + getName(cp) + \"}\";\n@@ -3873,1 +3888,1 @@\n-            p = \"[\\\\N{\" + Character.getName(cp) + \"}]\";\n+            p = \"[\\\\N{\" + getName(cp) + \"}]\";\n@@ -3881,1 +3896,1 @@\n-            String p = \"[\\\\N{\" + Character.getName(start) + \"}-\\\\N{\" + Character.getName(end) + \"}]\";\n+            String p = \"[\\\\N{\" + getName(start) + \"}-\\\\N{\" + getName(end) + \"}]\";\n@@ -3884,1 +3899,1 @@\n-                str = new String(Character.toChars(cp));\n+                str = new String(toChars(cp));\n@@ -3887,1 +3902,1 @@\n-            str = new String(Character.toChars(end + 10));\n+            str = new String(toChars(end + 10));\n@@ -3898,2 +3913,2 @@\n-                if (!Character.isValidCodePoint(cp) ||\n-                    Character.getType(cp) == Character.UNASSIGNED)\n+                if (!isValidCodePoint(cp) ||\n+                    getType(cp) == UNASSIGNED)\n@@ -3901,1 +3916,1 @@\n-                sb.append(\"\\\\N{\").append(Character.getName(cp)).append(\"}\");\n+                sb.append(\"\\\\N{\").append(getName(cp)).append(\"}\");\n@@ -4597,1 +4612,1 @@\n-        for(int cp = 0; cp <= Character.MAX_CODE_POINT; cp++){\n+        for(int cp = 0; cp <= MAX_CODE_POINT; cp++){\n@@ -4609,1 +4624,1 @@\n-        if (Character.isBmpCodePoint(cp)) {\n+        if (isBmpCodePoint(cp)) {\n@@ -4612,2 +4627,2 @@\n-            cpString = \"\" + Character.highSurrogate(cp) +\n-                    Character.lowSurrogate(cp);\n+            cpString = \"\" + highSurrogate(cp) +\n+                    lowSurrogate(cp);\n","filename":"test\/jdk\/java\/util\/regex\/RegExTest.java","additions":126,"deletions":111,"binary":false,"changes":237,"status":"modified"}]}