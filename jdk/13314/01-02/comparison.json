{"files":[{"patch":"@@ -52,0 +52,1 @@\n+import java.nio.file.Path;\n@@ -64,2 +65,0 @@\n-import static java.lang.Character.*;\n-\n@@ -131,1 +130,1 @@\n-        char[] ca = toChars(codePoint);\n+        char[] ca = Character.toChars(codePoint);\n@@ -417,1 +416,1 @@\n-        assert (getType('\\u030a') == NON_SPACING_MARK);\n+        assert (Character.getType('\\u030a') == Character.NON_SPACING_MARK);\n@@ -967,8 +966,8 @@\n-            check(\"{javaLowerCase}\", c, isLowerCase(c));\n-            check(\"{javaUpperCase}\", c, isUpperCase(c));\n-            check(\"{javaUpperCase}+\", c, isUpperCase(c));\n-            check(\"{javaTitleCase}\", c, isTitleCase(c));\n-            check(\"{javaDigit}\", c, isDigit(c));\n-            check(\"{javaDefined}\", c, isDefined(c));\n-            check(\"{javaLetter}\", c, isLetter(c));\n-            check(\"{javaLetterOrDigit}\", c, isLetterOrDigit(c));\n+            check(\"{javaLowerCase}\", c, Character.isLowerCase(c));\n+            check(\"{javaUpperCase}\", c, Character.isUpperCase(c));\n+            check(\"{javaUpperCase}+\", c, Character.isUpperCase(c));\n+            check(\"{javaTitleCase}\", c, Character.isTitleCase(c));\n+            check(\"{javaDigit}\", c, Character.isDigit(c));\n+            check(\"{javaDefined}\", c, Character.isDefined(c));\n+            check(\"{javaLetter}\", c, Character.isLetter(c));\n+            check(\"{javaLetterOrDigit}\", c, Character.isLetterOrDigit(c));\n@@ -976,1 +975,1 @@\n-                  isJavaIdentifierStart(c));\n+                  Character.isJavaIdentifierStart(c));\n@@ -978,1 +977,1 @@\n-                  isJavaIdentifierPart(c));\n+                  Character.isJavaIdentifierPart(c));\n@@ -980,1 +979,1 @@\n-                  isUnicodeIdentifierStart(c));\n+                  Character.isUnicodeIdentifierStart(c));\n@@ -982,1 +981,1 @@\n-                  isUnicodeIdentifierPart(c));\n+                  Character.isUnicodeIdentifierPart(c));\n@@ -984,5 +983,5 @@\n-                  isIdentifierIgnorable(c));\n-            check(\"{javaSpaceChar}\", c, isSpaceChar(c));\n-            check(\"{javaWhitespace}\", c, isWhitespace(c));\n-            check(\"{javaISOControl}\", c, isISOControl(c));\n-            check(\"{javaMirrored}\", c, isMirrored(c));\n+                  Character.isIdentifierIgnorable(c));\n+            check(\"{javaSpaceChar}\", c, Character.isSpaceChar(c));\n+            check(\"{javaWhitespace}\", c, Character.isWhitespace(c));\n+            check(\"{javaISOControl}\", c, Character.isISOControl(c));\n+            check(\"{javaMirrored}\", c, Character.isMirrored(c));\n@@ -994,11 +993,11 @@\n-            int c = generator.nextInt(MAX_CODE_POINT\n-                                      - MIN_SUPPLEMENTARY_CODE_POINT)\n-                        + MIN_SUPPLEMENTARY_CODE_POINT;\n-            check(\"{javaLowerCase}\", c, isLowerCase(c));\n-            check(\"{javaUpperCase}\", c, isUpperCase(c));\n-            check(\"{javaUpperCase}+\", c, isUpperCase(c));\n-            check(\"{javaTitleCase}\", c, isTitleCase(c));\n-            check(\"{javaDigit}\", c, isDigit(c));\n-            check(\"{javaDefined}\", c, isDefined(c));\n-            check(\"{javaLetter}\", c, isLetter(c));\n-            check(\"{javaLetterOrDigit}\", c, isLetterOrDigit(c));\n+            int c = generator.nextInt(Character.MAX_CODE_POINT\n+                                      - Character.MIN_SUPPLEMENTARY_CODE_POINT)\n+                        + Character.MIN_SUPPLEMENTARY_CODE_POINT;\n+            check(\"{javaLowerCase}\", c, Character.isLowerCase(c));\n+            check(\"{javaUpperCase}\", c, Character.isUpperCase(c));\n+            check(\"{javaUpperCase}+\", c, Character.isUpperCase(c));\n+            check(\"{javaTitleCase}\", c, Character.isTitleCase(c));\n+            check(\"{javaDigit}\", c, Character.isDigit(c));\n+            check(\"{javaDefined}\", c, Character.isDefined(c));\n+            check(\"{javaLetter}\", c, Character.isLetter(c));\n+            check(\"{javaLetterOrDigit}\", c, Character.isLetterOrDigit(c));\n@@ -1006,1 +1005,1 @@\n-                  isJavaIdentifierStart(c));\n+                  Character.isJavaIdentifierStart(c));\n@@ -1008,1 +1007,1 @@\n-                  isJavaIdentifierPart(c));\n+                  Character.isJavaIdentifierPart(c));\n@@ -1010,1 +1009,1 @@\n-                  isUnicodeIdentifierStart(c));\n+                  Character.isUnicodeIdentifierStart(c));\n@@ -1012,1 +1011,1 @@\n-                  isUnicodeIdentifierPart(c));\n+                  Character.isUnicodeIdentifierPart(c));\n@@ -1014,5 +1013,5 @@\n-                  isIdentifierIgnorable(c));\n-            check(\"{javaSpaceChar}\", c, isSpaceChar(c));\n-            check(\"{javaWhitespace}\", c, isWhitespace(c));\n-            check(\"{javaISOControl}\", c, isISOControl(c));\n-            check(\"{javaMirrored}\", c, isMirrored(c));\n+                  Character.isIdentifierIgnorable(c));\n+            check(\"{javaSpaceChar}\", c, Character.isSpaceChar(c));\n+            check(\"{javaWhitespace}\", c, Character.isWhitespace(c));\n+            check(\"{javaISOControl}\", c, Character.isISOControl(c));\n+            check(\"{javaMirrored}\", c, Character.isMirrored(c));\n@@ -1748,1 +1747,1 @@\n-                patternToBe.append(toChars(MIN_SUPPLEMENTARY_CODE_POINT\n+                patternToBe.append(Character.toChars(Character.MIN_SUPPLEMENTARY_CODE_POINT\n@@ -3166,1 +3165,1 @@\n-        doBnM(MIN_SUPPLEMENTARY_CODE_POINT - 10);\n+        doBnM(Character.MIN_SUPPLEMENTARY_CODE_POINT - 10);\n@@ -3178,2 +3177,2 @@\n-                    if (isSupplementaryCodePoint(ch)) {\n-                        patternBuffer.append(toChars(ch));\n+                    if (Character.isSupplementaryCodePoint(ch)) {\n+                        patternBuffer.append(Character.toChars(ch));\n@@ -3205,2 +3204,2 @@\n-                    if (isSupplementaryCodePoint(ch)) {\n-                        s.append(toChars(ch));\n+                    if (Character.isSupplementaryCodePoint(ch)) {\n+                        s.append(Character.toChars(ch));\n@@ -3217,1 +3216,1 @@\n-            if (isLowSurrogate(s.charAt(insertIndex)))\n+            if (Character.isLowSurrogate(s.charAt(insertIndex)))\n@@ -3241,1 +3240,1 @@\n-        doSlice(MAX_VALUE);\n+        doSlice(Character.MAX_VALUE);\n@@ -3243,1 +3242,1 @@\n-        doSlice(MAX_CODE_POINT);\n+        doSlice(Character.MAX_CODE_POINT);\n@@ -3253,1 +3252,1 @@\n-                while (!isLetterOrDigit(randomChar))\n+                while (!Character.isLetterOrDigit(randomChar))\n@@ -3255,2 +3254,2 @@\n-                if (isSupplementaryCodePoint(randomChar)) {\n-                    patternBuffer.append(toChars(randomChar));\n+                if (Character.isSupplementaryCodePoint(randomChar)) {\n+                    patternBuffer.append(Character.toChars(randomChar));\n@@ -3272,1 +3271,1 @@\n-                    while (!isLetterOrDigit(randomChar))\n+                    while (!Character.isLetterOrDigit(randomChar))\n@@ -3274,2 +3273,2 @@\n-                    if (isSupplementaryCodePoint(randomChar)) {\n-                        s.append(toChars(randomChar));\n+                    if (Character.isSupplementaryCodePoint(randomChar)) {\n+                        s.append(Character.toChars(randomChar));\n@@ -3286,1 +3285,1 @@\n-            if (isLowSurrogate(s.charAt(insertIndex)))\n+            if (Character.isLowSurrogate(s.charAt(insertIndex)))\n@@ -3628,1 +3627,1 @@\n-        UnicodeScript lastScript = UnicodeScript.of(0);\n+        Character.UnicodeScript lastScript = Character.UnicodeScript.of(0);\n@@ -3633,1 +3632,1 @@\n-        UnicodeBlock lastBlock = UnicodeBlock.of(0);\n+        Character.UnicodeBlock lastBlock = Character.UnicodeBlock.of(0);\n@@ -3635,1 +3634,1 @@\n-        for (int cp = 1; cp < MAX_CODE_POINT; cp++) {\n+        for (int cp = 1; cp < Character.MAX_CODE_POINT; cp++) {\n@@ -3641,1 +3640,1 @@\n-            UnicodeScript script = UnicodeScript.of(cp);\n+            Character.UnicodeScript script = Character.UnicodeScript.of(cp);\n@@ -3643,1 +3642,1 @@\n-            String str = new String(toChars(cp));\n+            String str = new String(Character.toChars(cp));\n@@ -3652,1 +3651,1 @@\n-            Matcher other = (script == UnicodeScript.COMMON)? unknown : common;\n+            Matcher other = (script == Character.UnicodeScript.COMMON)? unknown : common;\n@@ -3659,1 +3658,1 @@\n-            UnicodeBlock block = UnicodeBlock.of(cp);\n+            Character.UnicodeBlock block = Character.UnicodeBlock.of(cp);\n@@ -3671,1 +3670,1 @@\n-            other = (block == UnicodeBlock.BASIC_LATIN)? greek : latin;\n+            other = (block == Character.UnicodeBlock.BASIC_LATIN)? greek : latin;\n@@ -3703,1 +3702,1 @@\n-             String s = \"A\" + new String(toChars(cp)) + \"B\";\n+             String s = \"A\" + new String(Character.toChars(cp)) + \"B\";\n@@ -3706,2 +3705,2 @@\n-                                               (int) toChars(cp)[0],\n-                                               (int) toChars(cp)[1]);\n+                                               (int) Character.toChars(cp)[0],\n+                                               (int) Character.toChars(cp)[1]);\n@@ -3719,13 +3718,13 @@\n-        Matcher lower    = Pattern.compile(\"\\\\p{Lower}\").matcher(\"\");\n-        Matcher upper    = Pattern.compile(\"\\\\p{Upper}\").matcher(\"\");\n-        Matcher alpha    = Pattern.compile(\"\\\\p{Alpha}\").matcher(\"\");\n-        Matcher digit    = Pattern.compile(\"\\\\p{Digit}\").matcher(\"\");\n-        Matcher alnum    = Pattern.compile(\"\\\\p{Alnum}\").matcher(\"\");\n-        Matcher punct    = Pattern.compile(\"\\\\p{Punct}\").matcher(\"\");\n-        Matcher graph    = Pattern.compile(\"\\\\p{Graph}\").matcher(\"\");\n-        Matcher print    = Pattern.compile(\"\\\\p{Print}\").matcher(\"\");\n-        Matcher blank    = Pattern.compile(\"\\\\p{Blank}\").matcher(\"\");\n-        Matcher cntrl    = Pattern.compile(\"\\\\p{Cntrl}\").matcher(\"\");\n-        Matcher xdigit   = Pattern.compile(\"\\\\p{XDigit}\").matcher(\"\");\n-        Matcher space    = Pattern.compile(\"\\\\p{Space}\").matcher(\"\");\n-        Matcher word     = Pattern.compile(\"\\\\w++\").matcher(\"\");\n+        Matcher lower  = Pattern.compile(\"\\\\p{Lower}\").matcher(\"\");\n+        Matcher upper  = Pattern.compile(\"\\\\p{Upper}\").matcher(\"\");\n+        Matcher alpha  = Pattern.compile(\"\\\\p{Alpha}\").matcher(\"\");\n+        Matcher digit  = Pattern.compile(\"\\\\p{Digit}\").matcher(\"\");\n+        Matcher alnum  = Pattern.compile(\"\\\\p{Alnum}\").matcher(\"\");\n+        Matcher punct  = Pattern.compile(\"\\\\p{Punct}\").matcher(\"\");\n+        Matcher graph  = Pattern.compile(\"\\\\p{Graph}\").matcher(\"\");\n+        Matcher print  = Pattern.compile(\"\\\\p{Print}\").matcher(\"\");\n+        Matcher blank  = Pattern.compile(\"\\\\p{Blank}\").matcher(\"\");\n+        Matcher cntrl  = Pattern.compile(\"\\\\p{Cntrl}\").matcher(\"\");\n+        Matcher xdigit = Pattern.compile(\"\\\\p{XDigit}\").matcher(\"\");\n+        Matcher space  = Pattern.compile(\"\\\\p{Space}\").matcher(\"\");\n+        Matcher word   = Pattern.compile(\"\\\\w++\").matcher(\"\");\n@@ -3733,14 +3732,14 @@\n-        Matcher lowerU   = Pattern.compile(\"\\\\p{Lower}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n-        Matcher upperU   = Pattern.compile(\"\\\\p{Upper}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n-        Matcher alphaU   = Pattern.compile(\"\\\\p{Alpha}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n-        Matcher digitU   = Pattern.compile(\"\\\\p{Digit}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n-        Matcher alnumU   = Pattern.compile(\"\\\\p{Alnum}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n-        Matcher punctU   = Pattern.compile(\"\\\\p{Punct}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n-        Matcher graphU   = Pattern.compile(\"\\\\p{Graph}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n-        Matcher printU   = Pattern.compile(\"\\\\p{Print}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n-        Matcher blankU   = Pattern.compile(\"\\\\p{Blank}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n-        Matcher cntrlU   = Pattern.compile(\"\\\\p{Cntrl}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n-        Matcher xdigitU  = Pattern.compile(\"\\\\p{XDigit}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n-        Matcher spaceU   = Pattern.compile(\"\\\\p{Space}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n-        Matcher boundU   = Pattern.compile(\"\\\\b\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n-        Matcher wordU    = Pattern.compile(\"\\\\w\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n+        Matcher lowerU  = Pattern.compile(\"\\\\p{Lower}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n+        Matcher upperU  = Pattern.compile(\"\\\\p{Upper}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n+        Matcher alphaU  = Pattern.compile(\"\\\\p{Alpha}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n+        Matcher digitU  = Pattern.compile(\"\\\\p{Digit}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n+        Matcher alnumU  = Pattern.compile(\"\\\\p{Alnum}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n+        Matcher punctU  = Pattern.compile(\"\\\\p{Punct}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n+        Matcher graphU  = Pattern.compile(\"\\\\p{Graph}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n+        Matcher printU  = Pattern.compile(\"\\\\p{Print}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n+        Matcher blankU  = Pattern.compile(\"\\\\p{Blank}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n+        Matcher cntrlU  = Pattern.compile(\"\\\\p{Cntrl}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n+        Matcher xdigitU = Pattern.compile(\"\\\\p{XDigit}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n+        Matcher spaceU  = Pattern.compile(\"\\\\p{Space}\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n+        Matcher boundU  = Pattern.compile(\"\\\\b\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n+        Matcher wordU   = Pattern.compile(\"\\\\w\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n@@ -3752,3 +3751,3 @@\n-        Matcher bwb      = Pattern.compile(\"\\\\b\\\\w\\\\b\").matcher(\"\");\n-        Matcher bwbU     = Pattern.compile(\"\\\\b\\\\w++\\\\b\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n-        Matcher bwbEU    = Pattern.compile(\"(?U)\\\\b\\\\w++\\\\b\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n+        Matcher bwb    = Pattern.compile(\"\\\\b\\\\w\\\\b\").matcher(\"\");\n+        Matcher bwbU   = Pattern.compile(\"\\\\b\\\\w++\\\\b\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n+        Matcher bwbEU  = Pattern.compile(\"(?U)\\\\b\\\\w++\\\\b\", Pattern.UNICODE_CHARACTER_CLASS).matcher(\"\");\n@@ -3756,8 +3755,8 @@\n-        Matcher lowerP   = Pattern.compile(\"\\\\p{IsLowerCase}\").matcher(\"\");\n-        Matcher upperP   = Pattern.compile(\"\\\\p{IsUpperCase}\").matcher(\"\");\n-        Matcher titleP   = Pattern.compile(\"\\\\p{IsTitleCase}\").matcher(\"\");\n-        Matcher letterP  = Pattern.compile(\"\\\\p{IsLetter}\").matcher(\"\");\n-        Matcher alphaP   = Pattern.compile(\"\\\\p{IsAlphabetic}\").matcher(\"\");\n-        Matcher ideogP   = Pattern.compile(\"\\\\p{IsIdeographic}\").matcher(\"\");\n-        Matcher cntrlP   = Pattern.compile(\"\\\\p{IsControl}\").matcher(\"\");\n-        Matcher spaceP   = Pattern.compile(\"\\\\p{IsWhiteSpace}\").matcher(\"\");\n+        Matcher lowerP  = Pattern.compile(\"\\\\p{IsLowerCase}\").matcher(\"\");\n+        Matcher upperP  = Pattern.compile(\"\\\\p{IsUpperCase}\").matcher(\"\");\n+        Matcher titleP  = Pattern.compile(\"\\\\p{IsTitleCase}\").matcher(\"\");\n+        Matcher letterP = Pattern.compile(\"\\\\p{IsLetter}\").matcher(\"\");\n+        Matcher alphaP  = Pattern.compile(\"\\\\p{IsAlphabetic}\").matcher(\"\");\n+        Matcher ideogP  = Pattern.compile(\"\\\\p{IsIdeographic}\").matcher(\"\");\n+        Matcher cntrlP  = Pattern.compile(\"\\\\p{IsControl}\").matcher(\"\");\n+        Matcher spaceP  = Pattern.compile(\"\\\\p{IsWhiteSpace}\").matcher(\"\");\n@@ -3765,1 +3764,1 @@\n-        Matcher nonCCPP  = Pattern.compile(\"\\\\p{IsNoncharacterCodePoint}\").matcher(\"\");\n+        Matcher nonCCPP = Pattern.compile(\"\\\\p{IsNoncharacterCodePoint}\").matcher(\"\");\n@@ -3775,4 +3774,4 @@\n-        Matcher lowerJ   = Pattern.compile(\"\\\\p{javaLowerCase}\").matcher(\"\");\n-        Matcher upperJ   = Pattern.compile(\"\\\\p{javaUpperCase}\").matcher(\"\");\n-        Matcher alphaJ   = Pattern.compile(\"\\\\p{javaAlphabetic}\").matcher(\"\");\n-        Matcher ideogJ   = Pattern.compile(\"\\\\p{javaIdeographic}\").matcher(\"\");\n+        Matcher lowerJ  = Pattern.compile(\"\\\\p{javaLowerCase}\").matcher(\"\");\n+        Matcher upperJ  = Pattern.compile(\"\\\\p{javaUpperCase}\").matcher(\"\");\n+        Matcher alphaJ  = Pattern.compile(\"\\\\p{javaAlphabetic}\").matcher(\"\");\n+        Matcher ideogJ  = Pattern.compile(\"\\\\p{javaIdeographic}\").matcher(\"\");\n@@ -3780,1 +3779,1 @@\n-        Matcher gcC      = Pattern.compile(\"\\\\p{C}\").matcher(\"\");\n+        Matcher gcC  = Pattern.compile(\"\\\\p{C}\").matcher(\"\");\n@@ -3783,2 +3782,2 @@\n-            String str = new String(toChars(cp));\n-            int type = getType(cp);\n+            String str = new String(Character.toChars(cp));\n+            int type = Character.getType(cp);\n@@ -3786,5 +3785,5 @@\n-                POSIX_ASCII.isLower(cp)      != lower.reset(str).matches()  ||\n-                isLowerCase(cp)              != lowerU.reset(str).matches() ||\n-                isLowerCase(cp)              != lowerP.reset(str).matches() ||\n-                isLowerCase(cp)              != lowerEU.reset(str).matches()||\n-                isLowerCase(cp)              != lowerJ.reset(str).matches()||\n+                POSIX_ASCII.isLower(cp)   != lower.reset(str).matches()  ||\n+                Character.isLowerCase(cp) != lowerU.reset(str).matches() ||\n+                Character.isLowerCase(cp) != lowerP.reset(str).matches() ||\n+                Character.isLowerCase(cp) != lowerEU.reset(str).matches()||\n+                Character.isLowerCase(cp) != lowerJ.reset(str).matches()||\n@@ -3792,4 +3791,4 @@\n-                POSIX_ASCII.isUpper(cp)      != upper.reset(str).matches()  ||\n-                POSIX_Unicode.isUpper(cp)    != upperU.reset(str).matches() ||\n-                isUpperCase(cp)              != upperP.reset(str).matches() ||\n-                isUpperCase(cp)              != upperJ.reset(str).matches() ||\n+                POSIX_ASCII.isUpper(cp)   != upper.reset(str).matches()  ||\n+                POSIX_Unicode.isUpper(cp) != upperU.reset(str).matches() ||\n+                Character.isUpperCase(cp) != upperP.reset(str).matches() ||\n+                Character.isUpperCase(cp) != upperJ.reset(str).matches() ||\n@@ -3797,4 +3796,4 @@\n-                POSIX_ASCII.isAlpha(cp)      != alpha.reset(str).matches()  ||\n-                POSIX_Unicode.isAlpha(cp)    != alphaU.reset(str).matches() ||\n-                isAlphabetic(cp)             != alphaP.reset(str).matches() ||\n-                isAlphabetic(cp)             != alphaJ.reset(str).matches() ||\n+                POSIX_ASCII.isAlpha(cp)   != alpha.reset(str).matches()  ||\n+                POSIX_Unicode.isAlpha(cp) != alphaU.reset(str).matches() ||\n+                Character.isAlphabetic(cp)!= alphaP.reset(str).matches() ||\n+                Character.isAlphabetic(cp)!= alphaJ.reset(str).matches() ||\n@@ -3802,2 +3801,2 @@\n-                POSIX_ASCII.isDigit(cp)      != digit.reset(str).matches()  ||\n-                isDigit(cp)                  != digitU.reset(str).matches() ||\n+                POSIX_ASCII.isDigit(cp)   != digit.reset(str).matches()  ||\n+                Character.isDigit(cp)     != digitU.reset(str).matches() ||\n@@ -3805,2 +3804,2 @@\n-                POSIX_ASCII.isAlnum(cp)      != alnum.reset(str).matches()  ||\n-                POSIX_Unicode.isAlnum(cp)    != alnumU.reset(str).matches() ||\n+                POSIX_ASCII.isAlnum(cp)   != alnum.reset(str).matches()  ||\n+                POSIX_Unicode.isAlnum(cp) != alnumU.reset(str).matches() ||\n@@ -3808,2 +3807,2 @@\n-                POSIX_ASCII.isPunct(cp)      != punct.reset(str).matches()  ||\n-                POSIX_Unicode.isPunct(cp)    != punctU.reset(str).matches() ||\n+                POSIX_ASCII.isPunct(cp)   != punct.reset(str).matches()  ||\n+                POSIX_Unicode.isPunct(cp) != punctU.reset(str).matches() ||\n@@ -3811,3 +3810,3 @@\n-                POSIX_ASCII.isGraph(cp)      != graph.reset(str).matches()  ||\n-                POSIX_Unicode.isGraph(cp)    != graphU.reset(str).matches() ||\n-                POSIX_Unicode.isGraph(cp)    != graphEU.reset(str).matches()||\n+                POSIX_ASCII.isGraph(cp)   != graph.reset(str).matches()  ||\n+                POSIX_Unicode.isGraph(cp) != graphU.reset(str).matches() ||\n+                POSIX_Unicode.isGraph(cp) != graphEU.reset(str).matches()||\n@@ -3816,2 +3815,2 @@\n-                                             != blank.reset(str).matches()  ||\n-                POSIX_Unicode.isBlank(cp)    != blankU.reset(str).matches() ||\n+                                          != blank.reset(str).matches()  ||\n+                POSIX_Unicode.isBlank(cp) != blankU.reset(str).matches() ||\n@@ -3819,2 +3818,2 @@\n-                POSIX_ASCII.isPrint(cp)      != print.reset(str).matches()  ||\n-                POSIX_Unicode.isPrint(cp)    != printU.reset(str).matches() ||\n+                POSIX_ASCII.isPrint(cp)   != print.reset(str).matches()  ||\n+                POSIX_Unicode.isPrint(cp) != printU.reset(str).matches() ||\n@@ -3822,3 +3821,3 @@\n-                POSIX_ASCII.isCntrl(cp)      != cntrl.reset(str).matches()  ||\n-                POSIX_Unicode.isCntrl(cp)    != cntrlU.reset(str).matches() ||\n-                (CONTROL == type)            != cntrlP.reset(str).matches() ||\n+                POSIX_ASCII.isCntrl(cp)   != cntrl.reset(str).matches()  ||\n+                POSIX_Unicode.isCntrl(cp) != cntrlU.reset(str).matches() ||\n+                (Character.CONTROL == type) != cntrlP.reset(str).matches() ||\n@@ -3829,3 +3828,3 @@\n-                POSIX_ASCII.isSpace(cp)      != space.reset(str).matches()  ||\n-                POSIX_Unicode.isSpace(cp)    != spaceU.reset(str).matches() ||\n-                POSIX_Unicode.isSpace(cp)    != spaceP.reset(str).matches() ||\n+                POSIX_ASCII.isSpace(cp)   != space.reset(str).matches()  ||\n+                POSIX_Unicode.isSpace(cp) != spaceU.reset(str).matches() ||\n+                POSIX_Unicode.isSpace(cp) != spaceP.reset(str).matches() ||\n@@ -3833,3 +3832,3 @@\n-                POSIX_ASCII.isWord(cp)       != word.reset(str).matches()  ||\n-                POSIX_Unicode.isWord(cp)     != wordU.reset(str).matches() ||\n-                POSIX_Unicode.isWord(cp)     != wordEU.reset(str).matches()||\n+                POSIX_ASCII.isWord(cp)   != word.reset(str).matches()  ||\n+                POSIX_Unicode.isWord(cp) != wordU.reset(str).matches() ||\n+                POSIX_Unicode.isWord(cp) != wordEU.reset(str).matches()||\n@@ -3837,2 +3836,2 @@\n-                POSIX_ASCII.isWord(cp)       != bwb.reset(str).matches() ||\n-                POSIX_Unicode.isWord(cp)     != bwbU.reset(str).matches() ||\n+                POSIX_ASCII.isWord(cp) != bwb.reset(str).matches() ||\n+                POSIX_Unicode.isWord(cp) != bwbU.reset(str).matches() ||\n@@ -3840,9 +3839,7 @@\n-                isTitleCase(cp)              != titleP.reset(str).matches() ||\n-                isLetter(cp)                 != letterP.reset(str).matches()||\n-                isIdeographic(cp)            != ideogP.reset(str).matches() ||\n-                isIdeographic(cp)            != ideogJ.reset(str).matches() ||\n-                (UNASSIGNED == type)         == definedP.reset(str).matches() ||\n-                POSIX_Unicode.isNoncharacterCodePoint(cp)\n-                                             != nonCCPP.reset(str).matches() ||\n-                POSIX_Unicode.isJoinControl(cp)\n-                                             != joinCrtl.reset(str).matches() ||\n+                Character.isTitleCase(cp) != titleP.reset(str).matches() ||\n+                Character.isLetter(cp)    != letterP.reset(str).matches()||\n+                Character.isIdeographic(cp) != ideogP.reset(str).matches() ||\n+                Character.isIdeographic(cp) != ideogJ.reset(str).matches() ||\n+                (Character.UNASSIGNED == type) == definedP.reset(str).matches() ||\n+                POSIX_Unicode.isNoncharacterCodePoint(cp) != nonCCPP.reset(str).matches() ||\n+                POSIX_Unicode.isJoinControl(cp) != joinCrtl.reset(str).matches() ||\n@@ -3850,6 +3847,6 @@\n-                isEmoji(cp)                  != emojiP.reset(str).matches() ||\n-                isEmojiPresentation(cp)      != emojiPP.reset(str).matches() ||\n-                isEmojiModifier(cp)          != emojiMP.reset(str).matches() ||\n-                isEmojiModifierBase(cp)      != emojiMBP.reset(str).matches() ||\n-                isEmojiComponent(cp)         != emojiCP.reset(str).matches() ||\n-                isExtendedPictographic(cp)   != extPP.reset(str).matches() ||\n+                Character.isEmoji(cp) != emojiP.reset(str).matches() ||\n+                Character.isEmojiPresentation(cp) != emojiPP.reset(str).matches() ||\n+                Character.isEmojiModifier(cp) != emojiMP.reset(str).matches() ||\n+                Character.isEmojiModifierBase(cp)!= emojiMBP.reset(str).matches() ||\n+                Character.isEmojiComponent(cp) != emojiCP.reset(str).matches() ||\n+                Character.isExtendedPictographic(cp) != extPP.reset(str).matches() ||\n@@ -3857,4 +3854,4 @@\n-                (CONTROL == type || FORMAT == type ||\n-                 PRIVATE_USE == type || SURROGATE == type ||\n-                 UNASSIGNED == type)\n-                                             != gcC.reset(str).matches()) {\n+                (Character.CONTROL == type || Character.FORMAT == type ||\n+                 Character.PRIVATE_USE == type || Character.SURROGATE == type ||\n+                 Character.UNASSIGNED == type)\n+                != gcC.reset(str).matches()) {\n@@ -3878,3 +3875,3 @@\n-        for (int cp = 0; cp < MAX_CODE_POINT; cp++) {\n-            if (!isValidCodePoint(cp) ||\n-                getType(cp) == UNASSIGNED)\n+        for (int cp = 0; cp < Character.MAX_CODE_POINT; cp++) {\n+            if (!Character.isValidCodePoint(cp) ||\n+                Character.getType(cp) == Character.UNASSIGNED)\n@@ -3882,1 +3879,1 @@\n-            String str = new String(toChars(cp));\n+            String str = new String(Character.toChars(cp));\n@@ -3884,1 +3881,1 @@\n-            String p = \"\\\\N{\" + getName(cp) + \"}\";\n+            String p = \"\\\\N{\" + Character.getName(cp) + \"}\";\n@@ -3887,1 +3884,1 @@\n-            p = \"[\\\\N{\" + getName(cp) + \"}]\";\n+            p = \"[\\\\N{\" + Character.getName(cp) + \"}]\";\n@@ -3895,1 +3892,1 @@\n-            String p = \"[\\\\N{\" + getName(start) + \"}-\\\\N{\" + getName(end) + \"}]\";\n+            String p = \"[\\\\N{\" + Character.getName(start) + \"}-\\\\N{\" + Character.getName(end) + \"}]\";\n@@ -3898,1 +3895,1 @@\n-                str = new String(toChars(cp));\n+                str = new String(Character.toChars(cp));\n@@ -3901,1 +3898,1 @@\n-            str = new String(toChars(end + 10));\n+            str = new String(Character.toChars(end + 10));\n@@ -3912,2 +3909,2 @@\n-                if (!isValidCodePoint(cp) ||\n-                    getType(cp) == UNASSIGNED)\n+                if (!Character.isValidCodePoint(cp) ||\n+                    Character.getType(cp) == Character.UNASSIGNED)\n@@ -3915,1 +3912,1 @@\n-                sb.append(\"\\\\N{\").append(getName(cp)).append(\"}\");\n+                sb.append(\"\\\\N{\").append(Character.getName(cp)).append(\"}\");\n@@ -4611,1 +4608,1 @@\n-        for(int cp = 0; cp <= MAX_CODE_POINT; cp++){\n+        for(int cp = 0; cp <= Character.MAX_CODE_POINT; cp++){\n@@ -4623,1 +4620,1 @@\n-        if (isBmpCodePoint(cp)) {\n+        if (Character.isBmpCodePoint(cp)) {\n@@ -4626,2 +4623,2 @@\n-            cpString = \"\" + highSurrogate(cp) +\n-                    lowSurrogate(cp);\n+            cpString = \"\" + Character.highSurrogate(cp) +\n+                    Character.lowSurrogate(cp);\n","filename":"test\/jdk\/java\/util\/regex\/RegExTest.java","additions":183,"deletions":186,"binary":false,"changes":369,"status":"modified"}]}