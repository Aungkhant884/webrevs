{"files":[{"patch":"@@ -695,10 +695,0 @@\n-    } else {\n-#endif\n-        RESTARTABLE(stat64(path, &buf), err);\n-        if (err == 0) {\n-            copy_stat64_attributes(env, &buf, attrs);\n-            return 0;\n-        } else {\n-            return errno;\n-        }\n-#if defined(__linux__)\n@@ -707,0 +697,7 @@\n+    RESTARTABLE(stat64(path, &buf), err);\n+    if (err == 0) {\n+        copy_stat64_attributes(env, &buf, attrs);\n+        return 0;\n+    } else {\n+        return errno;\n+    }\n@@ -729,9 +726,0 @@\n-    } else {\n-#endif\n-        RESTARTABLE(lstat64(path, &buf), err);\n-        if (err == -1) {\n-            throwUnixException(env, errno);\n-        } else {\n-            copy_stat64_attributes(env, &buf, attrs);\n-        }\n-#if defined(__linux__)\n@@ -740,0 +728,6 @@\n+    RESTARTABLE(lstat64(path, &buf), err);\n+    if (err == -1) {\n+        throwUnixException(env, errno);\n+    } else {\n+        copy_stat64_attributes(env, &buf, attrs);\n+    }\n@@ -762,9 +756,0 @@\n-    } else {\n-#endif\n-        RESTARTABLE(fstat64((int)fd, &buf), err);\n-        if (err == -1) {\n-            throwUnixException(env, errno);\n-        } else {\n-            copy_stat64_attributes(env, &buf, attrs);\n-        }\n-#if defined(__linux__)\n@@ -773,0 +758,6 @@\n+    RESTARTABLE(fstat64((int)fd, &buf), err);\n+    if (err == -1) {\n+        throwUnixException(env, errno);\n+    } else {\n+        copy_stat64_attributes(env, &buf, attrs);\n+    }\n@@ -799,13 +790,0 @@\n-    } else {\n-#endif\n-        if (my_fstatat64_func == NULL) {\n-            JNU_ThrowInternalError(env, \"should not reach here\");\n-            return;\n-        }\n-        RESTARTABLE((*my_fstatat64_func)((int)dfd, path, &buf, (int)flag), err);\n-        if (err == -1) {\n-            throwUnixException(env, errno);\n-        } else {\n-            copy_stat64_attributes(env, &buf, attrs);\n-        }\n-#if defined(__linux__)\n@@ -814,0 +792,11 @@\n+\n+    if (my_fstatat64_func == NULL) {\n+        JNU_ThrowInternalError(env, \"should not reach here\");\n+        return;\n+    }\n+    RESTARTABLE((*my_fstatat64_func)((int)dfd, path, &buf, (int)flag), err);\n+    if (err == -1) {\n+        throwUnixException(env, errno);\n+    } else {\n+        copy_stat64_attributes(env, &buf, attrs);\n+    }\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":30,"deletions":41,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @modules java.base\/sun.nio.fs:open\n@@ -34,1 +33,0 @@\n-import java.lang.reflect.Method;\n@@ -45,2 +43,0 @@\n-    private static final String UNIX_DISPATCHER_CLASSNAME = \"sun.nio.fs.UnixNativeDispatcher\";\n-    private static final String SUPPORTS_BIRTH_TIME_METHOD = \"birthtimeSupported\";\n@@ -96,3 +92,2 @@\n-            if (unixDispatcherSupportsBirthTime()) {\n-                supportsCreationTimeRead = true;\n-            }\n+            \/\/ Creation time read depends on statx system call support\n+            supportsCreationTimeRead = CreationTimeHelper.linuxIsCreationTimeSupported();\n@@ -132,12 +127,0 @@\n-    \/\/ Reflective implementation so as to compile on non-Linux platforms\n-    private static boolean unixDispatcherSupportsBirthTime() {\n-        try {\n-            Class<?> unixDispatcher = Class.forName(UNIX_DISPATCHER_CLASSNAME);\n-            Method supportsBirthTime = unixDispatcher.getDeclaredMethod(SUPPORTS_BIRTH_TIME_METHOD);\n-            supportsBirthTime.setAccessible(true);\n-            return (boolean)supportsBirthTime.invoke(null);\n-        } catch (Throwable e) {\n-            throw new RuntimeException(\"Illegal state!\");\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/BasicFileAttributeView\/CreationTime.java","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+public class CreationTimeHelper {\n+\n+    static {\n+        System.loadLibrary(\"CreationTimeHelper\");\n+    }\n+\n+    \/\/ Helper so as to determine 'statx' support on the runtime system\n+    static native boolean linuxIsCreationTimeSupported();\n+}\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/BasicFileAttributeView\/CreationTimeHelper.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+#include \"jni.h\"\n+#if defined(__linux__)\n+#include <dlfcn.h>\n+#endif\n+\n+\/\/ static native boolean linuxIsCreationTimeSupported()\n+JNIEXPORT jboolean JNICALL\n+Java_CreationTimeHelper_linuxIsCreationTimeSupported(JNIEnv *env, jclass cls)\n+{\n+#if defined(__linux__)\n+    void* statx_func = dlsym(RTLD_DEFAULT, \"statx\");\n+    return statx_func != NULL ? JNI_TRUE : JNI_FALSE;\n+#else\n+    return JNI_FALSE;\n+#endif\n+}\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/BasicFileAttributeView\/libCreationTimeHelper.c","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"}]}