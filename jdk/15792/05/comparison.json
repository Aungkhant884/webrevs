{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,6 @@\n-import java.nio.file.attribute.*;\n-import java.util.concurrent.TimeUnit;\n-import java.util.Set;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.nio.file.attribute.GroupPrincipal;\n+import java.nio.file.attribute.PosixFileAttributes;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.UserPrincipal;\n@@ -32,0 +35,2 @@\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n@@ -55,0 +60,1 @@\n+    private long    st_birthtime_nsec;\n@@ -161,1 +167,1 @@\n-            return FileTime.from(st_birthtime_sec, TimeUnit.SECONDS);\n+            return toFileTime(st_birthtime_sec, st_birthtime_nsec);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileAttributes.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -54,0 +54,2 @@\n+#include <asm\/unistd.h> \/\/ __NR_statx\n+#include <sys\/sysmacros.h> \/\/ makedev macros\n@@ -74,0 +76,89 @@\n+#if defined(__linux__)\n+\/\/ Account for the case where we compile on a system without statx\n+\/\/ support. We still want to ensure we can call statx at runtime\n+\/\/ if the runtime glibc version supports it (>= 2.28)\n+#ifndef __NR_statx\n+\n+\/*\n+ * Timestamp structure for the timestamps in struct statx.\n+ *\/\n+struct statx_timestamp {\n+        int64_t   tv_sec;\n+        __uint32_t  tv_nsec;\n+        int32_t   __reserved;\n+};\n+\n+\/*\n+ * struct statx used by statx system call on >= glibc 2.28\n+ * systems\n+ *\/\n+struct statx\n+{\n+  __uint32_t stx_mask;\n+  __uint32_t stx_blksize;\n+  __uint64_t stx_attributes;\n+  __uint32_t stx_nlink;\n+  __uint32_t stx_uid;\n+  __uint32_t stx_gid;\n+  __uint16_t stx_mode;\n+  __uint16_t __statx_pad1[1];\n+  __uint64_t stx_ino;\n+  __uint64_t stx_size;\n+  __uint64_t stx_blocks;\n+  __uint64_t stx_attributes_mask;\n+  struct statx_timestamp stx_atime;\n+  struct statx_timestamp stx_btime;\n+  struct statx_timestamp stx_ctime;\n+  struct statx_timestamp stx_mtime;\n+  __uint32_t stx_rdev_major;\n+  __uint32_t stx_rdev_minor;\n+  __uint32_t stx_dev_major;\n+  __uint32_t stx_dev_minor;\n+  __uint64_t __statx_pad2[14];\n+};\n+#else\n+\n+#include <linux\/stat.h> \/\/ statx and related struct defns\n+\n+#endif \/\/ __NR_statx\n+\n+\/\/ statx masks, flags, constants\n+\n+#ifndef AT_SYMLINK_NOFOLLOW\n+#define AT_SYMLINK_NOFOLLOW 0x100\n+#endif\n+\n+#ifndef AT_STATX_SYNC_AS_STAT\n+#define AT_STATX_SYNC_AS_STAT 0x0000\n+#endif\n+\n+#ifndef AT_EMPTY_PATH\n+#define AT_EMPTY_PATH 0x1000\n+#endif\n+\n+#ifndef STATX_BASIC_STATS\n+#define STATX_BASIC_STATS 0x000007ffU\n+#endif\n+\n+#ifndef STATX_BTIME\n+#define STATX_BTIME 0x00000800U\n+#endif\n+\n+#ifndef STATX_ALL\n+#define STATX_ALL (STATX_BTIME | STATX_BASIC_STATS)\n+#endif\n+\n+#ifndef AT_FDCWD\n+#define AT_FDCWD -100\n+#endif\n+\n+#ifndef RTLD_DEFAULT\n+#define RTLD_DEFAULT RTLD_LOCAL\n+#endif\n+\n+#define NO_FOLLOW_SYMLINK 1\n+#define FOLLOW_SYMLINK 0\n+\n+#endif \/\/ __linux__\n+\n+\n@@ -120,1 +211,1 @@\n-#ifdef _DARWIN_FEATURE_64_BIT_INODE\n+#if defined(_DARWIN_FEATURE_64_BIT_INODE) || defined(__linux__)\n@@ -123,0 +214,3 @@\n+#if defined(__linux__) \/\/ Linux has nsec granularity if supported\n+static jfieldID attrs_st_birthtime_nsec;\n+#endif\n@@ -146,0 +240,4 @@\n+#if defined(__linux__)\n+typedef int statx_func(int dirfd, const char *restrict pathname, int flags,\n+                       unsigned int mask, struct statx *restrict statxbuf);\n+#endif\n@@ -155,0 +253,3 @@\n+#if defined(__linux__)\n+static statx_func* my_statx_func = NULL;\n+#endif\n@@ -180,0 +281,11 @@\n+#if defined(__linux__)\n+static int statx_wrapper(int dirfd, const char *restrict pathname, int flags,\n+                         unsigned int mask, struct statx *restrict statxbuf,\n+                         int follow_symlink) {\n+    if (follow_symlink == NO_FOLLOW_SYMLINK) {\n+      flags |= AT_SYMLINK_NOFOLLOW;\n+    }\n+    return (*my_statx_func)(dirfd, pathname, flags, mask, statxbuf);\n+}\n+#endif\n+\n@@ -232,1 +344,1 @@\n-#ifdef _DARWIN_FEATURE_64_BIT_INODE\n+#if defined(_DARWIN_FEATURE_64_BIT_INODE) || defined(__linux__)\n@@ -236,0 +348,4 @@\n+#if defined (__linux__) \/\/ Linux has nsec granularity\n+    attrs_st_birthtime_nsec = (*env)->GetFieldID(env, clazz, \"st_birthtime_nsec\", \"J\");\n+    CHECK_NULL_RETURN(attrs_st_birthtime_nsec, 0);\n+#endif\n@@ -317,0 +433,6 @@\n+#if defined(__linux__)\n+    my_statx_func = (statx_func*) dlsym(RTLD_DEFAULT, \"statx\");\n+    if (my_statx_func != NULL) {\n+        capabilities |= sun_nio_fs_UnixNativeDispatcher_SUPPORTS_BIRTHTIME;\n+    }\n+#endif\n@@ -493,0 +615,27 @@\n+#if defined(__linux__)\n+\/**\n+ * Copy statx members into sun.nio.fs.UnixFileAttributes\n+ *\/\n+static void copy_statx_attributes(JNIEnv* env, struct statx* buf, jobject attrs) {\n+    (*env)->SetIntField(env, attrs, attrs_st_mode, (jint)buf->stx_mode);\n+    (*env)->SetLongField(env, attrs, attrs_st_ino, (jlong)buf->stx_ino);\n+    (*env)->SetIntField(env, attrs, attrs_st_nlink, (jint)buf->stx_nlink);\n+    (*env)->SetIntField(env, attrs, attrs_st_uid, (jint)buf->stx_uid);\n+    (*env)->SetIntField(env, attrs, attrs_st_gid, (jint)buf->stx_gid);\n+    (*env)->SetLongField(env, attrs, attrs_st_size, (jlong)buf->stx_size);\n+    (*env)->SetLongField(env, attrs, attrs_st_atime_sec, (jlong)buf->stx_atime.tv_sec);\n+    (*env)->SetLongField(env, attrs, attrs_st_mtime_sec, (jlong)buf->stx_mtime.tv_sec);\n+    (*env)->SetLongField(env, attrs, attrs_st_ctime_sec, (jlong)buf->stx_ctime.tv_sec);\n+    (*env)->SetLongField(env, attrs, attrs_st_birthtime_sec, (jlong)buf->stx_btime.tv_sec);\n+    (*env)->SetLongField(env, attrs, attrs_st_birthtime_nsec, (jlong)buf->stx_btime.tv_nsec);\n+    (*env)->SetLongField(env, attrs, attrs_st_atime_nsec, (jlong)buf->stx_atime.tv_nsec);\n+    (*env)->SetLongField(env, attrs, attrs_st_mtime_nsec, (jlong)buf->stx_mtime.tv_nsec);\n+    (*env)->SetLongField(env, attrs, attrs_st_ctime_nsec, (jlong)buf->stx_ctime.tv_nsec);\n+    \/\/ convert statx major:minor to dev_t using makedev\n+    dev_t dev = makedev(buf->stx_dev_major, buf->stx_dev_minor);\n+    dev_t rdev = makedev(buf->stx_rdev_major, buf->stx_rdev_minor);\n+    (*env)->SetLongField(env, attrs, attrs_st_dev, (jlong)dev);\n+    (*env)->SetLongField(env, attrs, attrs_st_rdev, (jlong)rdev);\n+}\n+#endif\n+\n@@ -496,1 +645,1 @@\n-static void prepAttributes(JNIEnv* env, struct stat64* buf, jobject attrs) {\n+static void copy_stat64_attributes(JNIEnv* env, struct stat64* buf, jobject attrs) {\n@@ -511,0 +660,1 @@\n+    \/\/ rely on default value of 0 for st_birthtime_nsec field on Darwin\n@@ -531,5 +681,14 @@\n-\n-    RESTARTABLE(stat64(path, &buf), err);\n-    if (err == 0) {\n-        prepAttributes(env, &buf, attrs);\n-        return 0;\n+#if defined(__linux__)\n+    struct statx statx_buf;\n+    int flags = AT_STATX_SYNC_AS_STAT;\n+    unsigned int mask = STATX_ALL;\n+\n+    if (my_statx_func != NULL) {\n+        \/\/ Prefer statx over stat64 on Linux if it's available\n+        RESTARTABLE(statx_wrapper(AT_FDCWD, path, flags, mask, &statx_buf, FOLLOW_SYMLINK), err);\n+        if (err == 0) {\n+            copy_statx_attributes(env, &statx_buf, attrs);\n+            return 0;\n+        } else {\n+            return errno;\n+        }\n@@ -537,1 +696,9 @@\n-        return errno;\n+#endif\n+        RESTARTABLE(stat64(path, &buf), err);\n+        if (err == 0) {\n+            copy_stat64_attributes(env, &buf, attrs);\n+            return 0;\n+        } else {\n+            return errno;\n+        }\n+#if defined(__linux__)\n@@ -539,0 +706,1 @@\n+#endif\n@@ -548,4 +716,13 @@\n-\n-    RESTARTABLE(lstat64(path, &buf), err);\n-    if (err == -1) {\n-        throwUnixException(env, errno);\n+#if defined(__linux__)\n+    struct statx statx_buf;\n+    int flags = AT_STATX_SYNC_AS_STAT;\n+    unsigned int mask = STATX_ALL;\n+\n+    if (my_statx_func != NULL) {\n+        \/\/ Prefer statx over stat64 on Linux if it's available\n+        RESTARTABLE(statx_wrapper(AT_FDCWD, path, flags, mask, &statx_buf, NO_FOLLOW_SYMLINK), err);\n+        if (err == 0) {\n+            copy_statx_attributes(env, &statx_buf, attrs);\n+        } else {\n+            throwUnixException(env, errno);\n+        }\n@@ -553,1 +730,8 @@\n-        prepAttributes(env, &buf, attrs);\n+#endif\n+        RESTARTABLE(lstat64(path, &buf), err);\n+        if (err == -1) {\n+            throwUnixException(env, errno);\n+        } else {\n+            copy_stat64_attributes(env, &buf, attrs);\n+        }\n+#if defined(__linux__)\n@@ -555,0 +739,1 @@\n+#endif\n@@ -563,4 +748,14 @@\n-\n-    RESTARTABLE(fstat64((int)fd, &buf), err);\n-    if (err == -1) {\n-        throwUnixException(env, errno);\n+#if defined(__linux__)\n+    struct statx statx_buf;\n+    int flags = AT_EMPTY_PATH | AT_STATX_SYNC_AS_STAT;\n+    unsigned int mask = STATX_ALL;\n+\n+    if (my_statx_func != NULL) {\n+        \/\/ statx supports FD use via dirfd iff pathname is an empty string and the\n+        \/\/ AT_EMPTY_PATH flag is specified in flags\n+        RESTARTABLE(statx_wrapper((int)fd, \"\", flags, mask, &statx_buf, FOLLOW_SYMLINK), err);\n+        if (err == 0) {\n+            copy_statx_attributes(env, &statx_buf, attrs);\n+        } else {\n+            throwUnixException(env, errno);\n+        }\n@@ -568,1 +763,8 @@\n-        prepAttributes(env, &buf, attrs);\n+#endif\n+        RESTARTABLE(fstat64((int)fd, &buf), err);\n+        if (err == -1) {\n+            throwUnixException(env, errno);\n+        } else {\n+            copy_stat64_attributes(env, &buf, attrs);\n+        }\n+#if defined(__linux__)\n@@ -570,0 +772,1 @@\n+#endif\n@@ -579,8 +782,17 @@\n-\n-    if (my_fstatat64_func == NULL) {\n-        JNU_ThrowInternalError(env, \"should not reach here\");\n-        return;\n-    }\n-    RESTARTABLE((*my_fstatat64_func)((int)dfd, path, &buf, (int)flag), err);\n-    if (err == -1) {\n-        throwUnixException(env, errno);\n+#if defined(__linux__)\n+    struct statx statx_buf;\n+    int flags = AT_STATX_SYNC_AS_STAT;\n+    unsigned int mask = STATX_ALL;\n+    int f_symlink = FOLLOW_SYMLINK;\n+\n+    if (my_statx_func != NULL) {\n+        \/\/ Prefer statx over stat64 on Linux if it's available\n+        if (((int)flag & AT_SYMLINK_NOFOLLOW) > 0) { \/\/ flag set in java code\n+            f_symlink = NO_FOLLOW_SYMLINK;\n+        }\n+        RESTARTABLE(statx_wrapper((int)dfd, path, flags, mask, &statx_buf, f_symlink), err);\n+        if (err == 0) {\n+            copy_statx_attributes(env, &statx_buf, attrs);\n+        } else {\n+            throwUnixException(env, errno);\n+        }\n@@ -588,1 +800,12 @@\n-        prepAttributes(env, &buf, attrs);\n+#endif\n+        if (my_fstatat64_func == NULL) {\n+            JNU_ThrowInternalError(env, \"should not reach here\");\n+            return;\n+        }\n+        RESTARTABLE((*my_fstatat64_func)((int)dfd, path, &buf, (int)flag), err);\n+        if (err == -1) {\n+            throwUnixException(env, errno);\n+        } else {\n+            copy_stat64_attributes(env, &buf, attrs);\n+        }\n+#if defined(__linux__)\n@@ -590,0 +813,1 @@\n+#endif\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":252,"deletions":28,"binary":false,"changes":280,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @bug 8011536 8151430\n+ * @bug 8011536 8151430 8316304\n@@ -29,0 +29,1 @@\n+ * @modules java.base\/sun.nio.fs:open\n@@ -33,0 +34,1 @@\n+import java.lang.reflect.Method;\n@@ -43,0 +45,2 @@\n+    private static final String UNIX_DISPATCHER_CLASSNAME = \"sun.nio.fs.UnixNativeDispatcher\";\n+    private static final String SUPPORTS_BIRTH_TIME_METHOD = \"birthtimeSupported\";\n@@ -91,0 +95,7 @@\n+        } else if (Platform.isLinux()) {\n+            if (unixDispatcherSupportsBirthTime()) {\n+                supportsCreationTimeRead = true;\n+            }\n+            System.out.println(\"[Linux] Debug: supportsCreationTimeRead == \" + supportsCreationTimeRead);\n+            \/\/ Creation time updates are not supported on Linux\n+            supportsCreationTimeWrite = false;\n@@ -121,0 +132,12 @@\n+    \/\/ Reflective implementation so as to compile on non-Linux platforms\n+    private static boolean unixDispatcherSupportsBirthTime() {\n+        try {\n+            Class<?> unixDispatcher = Class.forName(UNIX_DISPATCHER_CLASSNAME);\n+            Method supportsBirthTime = unixDispatcher.getDeclaredMethod(SUPPORTS_BIRTH_TIME_METHOD);\n+            supportsBirthTime.setAccessible(true);\n+            return (boolean)supportsBirthTime.invoke(null);\n+        } catch (Throwable e) {\n+            throw new RuntimeException(\"Illegal state!\");\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/BasicFileAttributeView\/CreationTime.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"}]}