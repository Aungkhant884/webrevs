{"files":[{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.nio.fs;\n+\n+import java.io.IOException;\n+import java.nio.file.attribute.BasicFileAttributes;\n+\n+import sun.nio.fs.UnixFileAttributeViews.Basic;\n+\n+class LinuxBasicAttributesView extends Basic {\n+\n+    LinuxBasicAttributesView(UnixPath file, boolean followLinks) {\n+        super(file, followLinks);\n+    }\n+\n+    @Override\n+    public BasicFileAttributes readAttributes() throws IOException {\n+        file.checkRead();\n+        try {\n+             LinuxFileAttributes attrs =\n+                 LinuxFileAttributes.get(file, followLinks);\n+             return attrs.asBasicFileAttributes();\n+        } catch (UnixException x) {\n+            x.rethrowAsIOException(file);\n+            return null;    \/\/ keep compiler happy\n+        }\n+    }\n+\n+}\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxBasicAttributesView.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -28,1 +28,7 @@\n-import java.nio.file.attribute.*;\n+import static sun.nio.fs.UnixConstants.ENODATA;\n+import static sun.nio.fs.UnixNativeDispatcher.close;\n+\n+import java.io.IOException;\n+import java.nio.file.attribute.DosFileAttributeView;\n+import java.nio.file.attribute.DosFileAttributes;\n+import java.nio.file.attribute.FileTime;\n@@ -31,2 +37,0 @@\n-import java.io.IOException;\n-import jdk.internal.misc.Unsafe;\n@@ -34,2 +38,1 @@\n-import static sun.nio.fs.UnixNativeDispatcher.*;\n-import static sun.nio.fs.UnixConstants.*;\n+import jdk.internal.misc.Unsafe;\n@@ -123,1 +126,1 @@\n-             final UnixFileAttributes attrs = UnixFileAttributes.get(fd);\n+             final LinuxFileAttributes attrs = LinuxFileAttributes.get(fd);\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxDosFileAttributeView.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.nio.fs;\n+\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.nio.file.attribute.PosixFileAttributes;\n+\n+class LinuxFileAttributes extends UnixFileAttributes implements PosixFileAttributes {\n+\n+    private final boolean isStatxSupported;\n+    private long stx_birthtime_nsec;\n+\n+    private LinuxFileAttributes(boolean isStatxSupported) {\n+        this.isStatxSupported = isStatxSupported;\n+    }\n+\n+    \/\/ get the Linux file attributes for a given file\n+    static LinuxFileAttributes get(UnixPath path, boolean followLinks) throws UnixException {\n+        boolean statxSupport = LinuxNativeDispatcher.isStatxSupported();\n+        LinuxFileAttributes attrs = new LinuxFileAttributes(statxSupport);\n+        if (statxSupport) {\n+            LinuxNativeDispatcher.statx(path, attrs, followLinks);\n+        } else {\n+            \/\/ this sets attribute values in attrs\n+            UnixFileAttributes.get(path, followLinks, attrs);\n+        }\n+        return attrs;\n+    }\n+\n+    \/\/ get the LinuxFileAttributes for a given file descriptor\n+    static LinuxFileAttributes get(int fd) throws UnixException {\n+        boolean statxSupport = LinuxNativeDispatcher.isStatxSupported();\n+        LinuxFileAttributes attrs = new LinuxFileAttributes(statxSupport);\n+        if (statxSupport) {\n+            LinuxNativeDispatcher.statxfd(fd, attrs);\n+        } else {\n+            \/\/ this sets attribute values in attrs\n+            UnixFileAttributes.get(fd, attrs);\n+        }\n+        return attrs;\n+    }\n+\n+    \/\/ wrap this object with BasicFileAttributes object to prevent leaking of\n+    \/\/ user information\n+    BasicFileAttributes asBasicFileAttributes() {\n+        return UnixAsBasicFileAttributes.wrap(this);\n+    }\n+\n+    @Override\n+    public FileTime creationTime() {\n+        if (isStatxSupported) {\n+            return UnixFileAttributes.toFileTime(st_birthtime_sec, stx_birthtime_nsec);\n+        } else {\n+            return super.creationTime();\n+        }\n+    }\n+}\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxFileAttributes.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -77,1 +77,1 @@\n-            UnixFileAttributes attrs = null;\n+            LinuxFileAttributes attrs = null;\n@@ -79,1 +79,1 @@\n-                attrs = UnixFileAttributes.get(parent, true);\n+                attrs = LinuxFileAttributes.get(parent, true);\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxFileStore.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,0 @@\n-import java.nio.file.*;\n-import java.nio.file.attribute.*;\n-import java.nio.file.spi.FileTypeDetector;\n@@ -32,0 +29,12 @@\n+import java.nio.file.LinkOption;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.BasicFileAttributeView;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.DosFileAttributeView;\n+import java.nio.file.attribute.DosFileAttributes;\n+import java.nio.file.attribute.FileAttributeView;\n+import java.nio.file.attribute.FileOwnerAttributeView;\n+import java.nio.file.attribute.PosixFileAttributeView;\n+import java.nio.file.attribute.PosixFileAttributes;\n+import java.nio.file.attribute.UserDefinedFileAttributeView;\n+import java.nio.file.spi.FileTypeDetector;\n@@ -34,0 +43,1 @@\n+import sun.nio.fs.UnixFileAttributeViews.Posix;\n@@ -68,0 +78,14 @@\n+        if (type == BasicFileAttributeView.class) {\n+            return (V) new LinuxBasicAttributesView(UnixPath.toUnixPath(obj),\n+                                                    Util.followLinks(options));\n+        }\n+        if (type == PosixFileAttributeView.class) {\n+            return (V) new LinuxPosixAttributesView(UnixPath.toUnixPath(obj),\n+                                                    Util.followLinks(options));\n+        }\n+        if (type == FileOwnerAttributeView.class) {\n+            Posix posixView = new LinuxPosixAttributesView(UnixPath.toUnixPath(obj),\n+                                                           Util.followLinks(options));\n+            return (V) UnixFileAttributeViews.createOwnerView(posixView);\n+        }\n+\n@@ -84,0 +108,13 @@\n+        if (name.equals(\"basic\")) {\n+            return (DynamicFileAttributeView)getFileAttributeView(obj, BasicFileAttributeView.class, options);\n+        }\n+        if (name.equals(\"posix\")) {\n+            return (DynamicFileAttributeView)getFileAttributeView(obj, PosixFileAttributeView.class, options);\n+        }\n+        if (name.equals(\"owner\")) {\n+            return (DynamicFileAttributeView)getFileAttributeView(obj, FileOwnerAttributeView.class, options);\n+        }\n+        if (name.equals(\"unix\")) {\n+            return new LinuxUnixAttributesView(UnixPath.toUnixPath(obj),\n+                                                Util.followLinks(options));\n+        }\n@@ -98,0 +135,8 @@\n+        } else if (type == BasicFileAttributes.class) {\n+            BasicFileAttributeView view =\n+                getFileAttributeView(file, BasicFileAttributeView.class, options);\n+            return (A) view.readAttributes();\n+        } else if (type == PosixFileAttributes.class) {\n+            PosixFileAttributeView view =\n+                    getFileAttributeView(file, PosixFileAttributeView.class, options);\n+            return (A) view.readAttributes();\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxFileSystemProvider.java","additions":48,"deletions":3,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.misc.Blocker;\n+\n@@ -35,0 +37,3 @@\n+    \/\/ set by JNI code based on glibc support\n+    private static volatile boolean supports_statx = false;\n+\n@@ -71,0 +76,44 @@\n+    static void statx(UnixPath path, LinuxFileAttributes attrs, boolean followLinks)\n+            throws UnixException {\n+        try (NativeBuffer buffer = copyToNativeBuffer(path)) {\n+            long comp = Blocker.begin();\n+            try {\n+                int errno = statx0(buffer.address(), attrs, followLinks);\n+                if (errno != 0) {\n+                    throw new UnixException(errno);\n+                }\n+            } finally {\n+                Blocker.end(comp);\n+            }\n+        }\n+    }\n+\n+    static void statxfd(int fd, LinuxFileAttributes attrs)\n+            throws UnixException {\n+        long comp = Blocker.begin();\n+        try {\n+            int errno = statxfd0(fd, attrs);\n+            if (errno != 0) {\n+                throw new UnixException(errno);\n+            }\n+        } finally {\n+            Blocker.end(comp);\n+        }\n+    }\n+\n+    \/**\n+     * int statx(int dirfd, const char *restrict pathname, int flags,\n+     *           unsigned int mask, struct statx *restrict statxbuf);\n+     *\n+     * statx supports lookups with a file descriptor if path name is empty\n+     * and AT_EMPTY_PATH flag is set in flags. In that case the fd passed in by\n+     * dirfd will be used.\n+     *\/\n+    static native int statxfd0(int fd, LinuxFileAttributes attrs);\n+\n+    \/**\n+     * int statx(int dirfd, const char *restrict pathname, int flags,\n+     *           unsigned int mask, struct statx *restrict statxbuf);\n+     *\/\n+    static native int statx0(long address, LinuxFileAttributes attrs, boolean followLinks);\n+\n@@ -89,0 +138,4 @@\n+    static boolean isStatxSupported() {\n+        return supports_statx;\n+    }\n+\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxNativeDispatcher.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.nio.fs;\n+\n+import java.io.IOException;\n+\n+import sun.nio.fs.UnixFileAttributeViews.Posix;\n+\n+class LinuxPosixAttributesView extends Posix {\n+\n+    LinuxPosixAttributesView(UnixPath file, boolean followLinks) {\n+        super(file, followLinks);\n+    }\n+\n+    @Override\n+    public UnixFileAttributes readAttributes() throws IOException {\n+        checkReadExtended();\n+        try {\n+             LinuxFileAttributes attrs =\n+                 LinuxFileAttributes.get(file, followLinks);\n+             return attrs;\n+        } catch (UnixException x) {\n+            x.rethrowAsIOException(file);\n+            return null;    \/\/ keep compiler happy\n+        }\n+    }\n+}\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxPosixAttributesView.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.nio.fs;\n+\n+import java.io.IOException;\n+\n+import sun.nio.fs.UnixFileAttributeViews.Unix;\n+\n+public class LinuxUnixAttributesView extends Unix\n+        implements DynamicFileAttributeView {\n+\n+    LinuxUnixAttributesView(UnixPath path, boolean followSymlinks) {\n+        super(path, followSymlinks);\n+    }\n+\n+    @Override\n+    public UnixFileAttributes readAttributes() throws IOException {\n+        checkReadExtended();\n+        try {\n+             LinuxFileAttributes attrs =\n+                 LinuxFileAttributes.get(file, followLinks);\n+             return attrs;\n+        } catch (UnixException x) {\n+            x.rethrowAsIOException(file);\n+            return null;    \/\/ keep compiler happy\n+        }\n+    }\n+}\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxUnixAttributesView.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -28,2 +28,7 @@\n-import java.nio.file.*;\n-import java.util.*;\n+import static sun.nio.fs.UnixConstants.EAGAIN;\n+import static sun.nio.fs.UnixConstants.EMFILE;\n+import static sun.nio.fs.UnixConstants.ENOSPC;\n+import static sun.nio.fs.UnixConstants.EWOULDBLOCK;\n+import static sun.nio.fs.UnixNativeDispatcher.read;\n+import static sun.nio.fs.UnixNativeDispatcher.write;\n+\n@@ -31,1 +36,8 @@\n-import jdk.internal.misc.Unsafe;\n+import java.nio.file.NotDirectoryException;\n+import java.nio.file.Path;\n+import java.nio.file.StandardWatchEventKinds;\n+import java.nio.file.WatchEvent;\n+import java.nio.file.WatchKey;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n@@ -33,2 +45,1 @@\n-import static sun.nio.fs.UnixNativeDispatcher.*;\n-import static sun.nio.fs.UnixConstants.*;\n+import jdk.internal.misc.Unsafe;\n@@ -240,1 +251,1 @@\n-            UnixFileAttributes attrs = null;\n+            LinuxFileAttributes attrs = null;\n@@ -242,1 +253,1 @@\n-                attrs = UnixFileAttributes.get(dir, true);\n+                attrs = LinuxFileAttributes.get(dir, true);\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxWatchService.java","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+#include <asm\/unistd.h> \/\/ __NR_statx\n+#include <sys\/sysmacros.h> \/\/ makedev macros\n@@ -44,0 +46,85 @@\n+\/\/ Account for the case where we compile on a system without statx\n+\/\/ support. We still want to ensure we can call statx at runtime\n+\/\/ if the runtime glibc version supports it (>= 2.28)\n+#ifndef __NR_statx\n+\n+\/*\n+ * Timestamp structure for the timestamps in struct statx.\n+ *\/\n+struct statx_timestamp {\n+        int64_t   tv_sec;\n+        __uint32_t  tv_nsec;\n+        int32_t   __reserved;\n+};\n+\n+\/*\n+ * struct statx used by statx system call on >= glibc 2.28\n+ * systems\n+ *\/\n+struct statx\n+{\n+  __uint32_t stx_mask;\n+  __uint32_t stx_blksize;\n+  __uint64_t stx_attributes;\n+  __uint32_t stx_nlink;\n+  __uint32_t stx_uid;\n+  __uint32_t stx_gid;\n+  __uint16_t stx_mode;\n+  __uint16_t __statx_pad1[1];\n+  __uint64_t stx_ino;\n+  __uint64_t stx_size;\n+  __uint64_t stx_blocks;\n+  __uint64_t stx_attributes_mask;\n+  struct statx_timestamp stx_atime;\n+  struct statx_timestamp stx_btime;\n+  struct statx_timestamp stx_ctime;\n+  struct statx_timestamp stx_mtime;\n+  __uint32_t stx_rdev_major;\n+  __uint32_t stx_rdev_minor;\n+  __uint32_t stx_dev_major;\n+  __uint32_t stx_dev_minor;\n+  __uint64_t __statx_pad2[14];\n+};\n+#else\n+\n+#include <linux\/stat.h> \/\/ statx and related struct defns\n+\n+#endif \/\/ __NR_statx\n+\n+\/\/ statx masks, flags, constants\n+\n+#ifndef AT_SYMLINK_NOFOLLOW\n+#define AT_SYMLINK_NOFOLLOW 0x100\n+#endif\n+\n+#ifndef AT_STATX_SYNC_AS_STAT\n+#define AT_STATX_SYNC_AS_STAT 0x0000\n+#endif\n+\n+#ifndef STATX_BASIC_STATS\n+#define STATX_BASIC_STATS    0x000007ffU\n+#endif\n+\n+#ifndef STATX_BTIME\n+#define STATX_BTIME 0x00000800U\n+#endif\n+\n+#ifndef STATX_ALL\n+#define STATX_ALL (STATX_BTIME | STATX_BASIC_STATS)\n+#endif\n+\n+#ifndef AT_EMPTY_PATH\n+#define AT_EMPTY_PATH 0x1000\n+#endif\n+\n+#ifndef AT_FDCWD\n+#define AT_FDCWD -100\n+#endif\n+\n+#ifndef RTLD_DEFAULT\n+#define RTLD_DEFAULT RTLD_LOCAL\n+#endif\n+\n+#define NO_FOLLOW_SYMLINK 1\n+#define FOLLOW_SYMLINK 0\n+\n@@ -48,0 +135,30 @@\n+static jfieldID attrs_stx_btime_nsec;\n+static jfieldID dp_statx_supported;\n+\n+\/\/ Fields in UnixFileAttributes\n+static jfieldID attrs_st_mode;\n+static jfieldID attrs_st_ino;\n+static jfieldID attrs_st_dev;\n+static jfieldID attrs_st_rdev;\n+static jfieldID attrs_st_nlink;\n+static jfieldID attrs_st_uid;\n+static jfieldID attrs_st_gid;\n+static jfieldID attrs_st_size;\n+static jfieldID attrs_st_atime_sec;\n+static jfieldID attrs_st_atime_nsec;\n+static jfieldID attrs_st_mtime_sec;\n+static jfieldID attrs_st_mtime_nsec;\n+static jfieldID attrs_st_ctime_sec;\n+static jfieldID attrs_st_ctime_nsec;\n+static jfieldID attrs_st_birthtime_sec;\n+\n+typedef int statx_func(int dirfd, const char *restrict pathname, int flags,\n+                 unsigned int mask, struct statx *restrict statxbuf);\n+static statx_func* my_statx_func = NULL;\n+static int statx_wrapper(int dirfd, const char *restrict pathname, int flags,\n+                 unsigned int mask, struct statx *restrict statxbuf, int follow_symlink) {\n+    if (follow_symlink == NO_FOLLOW_SYMLINK) {\n+      flags |= AT_SYMLINK_NOFOLLOW;\n+    }\n+    return (*my_statx_func)(dirfd, pathname, flags, mask, statxbuf);\n+}\n@@ -70,0 +187,3 @@\n+    jclass attr_class;\n+    jclass u_attr_class;\n+    jclass dispatch_class;\n@@ -81,0 +201,48 @@\n+    dispatch_class = (*env)->FindClass(env, \"sun\/nio\/fs\/LinuxNativeDispatcher\");\n+    CHECK_NULL(dispatch_class);\n+    dp_statx_supported = (*env)->GetStaticFieldID(env, dispatch_class, \"supports_statx\", \"Z\");\n+    CHECK_NULL(dp_statx_supported);\n+\n+    my_statx_func = (statx_func*) dlsym(RTLD_DEFAULT, \"statx\");\n+    if (my_statx_func != NULL) {\n+        \/\/ set statx support for Java\n+        (*env)->SetStaticBooleanField(env, dispatch_class, dp_statx_supported, JNI_TRUE);\n+        \/\/ Load field ids for later access at runtime\n+        attr_class = (*env)->FindClass(env, \"sun\/nio\/fs\/LinuxFileAttributes\");\n+        CHECK_NULL(attr_class);\n+        attrs_stx_btime_nsec = (*env)->GetFieldID(env, attr_class, \"stx_birthtime_nsec\", \"J\");\n+        CHECK_NULL(attrs_stx_btime_nsec);\n+        u_attr_class = (*env)->FindClass(env, \"sun\/nio\/fs\/UnixFileAttributes\");\n+        CHECK_NULL(u_attr_class);\n+        attrs_st_mode = (*env)->GetFieldID(env, u_attr_class, \"st_mode\", \"I\");\n+        CHECK_NULL(attrs_st_mode);\n+        attrs_st_ino = (*env)->GetFieldID(env, u_attr_class, \"st_ino\", \"J\");\n+        CHECK_NULL(attrs_st_ino);\n+        attrs_st_dev = (*env)->GetFieldID(env, u_attr_class, \"st_dev\", \"J\");\n+        CHECK_NULL(attrs_st_dev);\n+        attrs_st_rdev = (*env)->GetFieldID(env, u_attr_class, \"st_rdev\", \"J\");\n+        CHECK_NULL(attrs_st_rdev);\n+        attrs_st_nlink = (*env)->GetFieldID(env, u_attr_class, \"st_nlink\", \"I\");\n+        CHECK_NULL(attrs_st_nlink);\n+        attrs_st_uid = (*env)->GetFieldID(env, u_attr_class, \"st_uid\", \"I\");\n+        CHECK_NULL(attrs_st_uid);\n+        attrs_st_gid = (*env)->GetFieldID(env, u_attr_class, \"st_gid\", \"I\");\n+        CHECK_NULL(attrs_st_gid);\n+        attrs_st_size = (*env)->GetFieldID(env, u_attr_class, \"st_size\", \"J\");\n+        CHECK_NULL(attrs_st_size);\n+        attrs_st_atime_sec = (*env)->GetFieldID(env, u_attr_class, \"st_atime_sec\", \"J\");\n+        CHECK_NULL(attrs_st_atime_sec);\n+        attrs_st_atime_nsec = (*env)->GetFieldID(env, u_attr_class, \"st_atime_nsec\", \"J\");\n+        CHECK_NULL(attrs_st_atime_nsec);\n+        attrs_st_mtime_sec = (*env)->GetFieldID(env, u_attr_class, \"st_mtime_sec\", \"J\");\n+        CHECK_NULL(attrs_st_mtime_sec);\n+        attrs_st_mtime_nsec = (*env)->GetFieldID(env, u_attr_class, \"st_mtime_nsec\", \"J\");\n+        CHECK_NULL(attrs_st_mtime_nsec);\n+        attrs_st_ctime_sec = (*env)->GetFieldID(env, u_attr_class, \"st_ctime_sec\", \"J\");\n+        CHECK_NULL(attrs_st_ctime_sec);\n+        attrs_st_ctime_nsec = (*env)->GetFieldID(env, u_attr_class, \"st_ctime_nsec\", \"J\");\n+        CHECK_NULL(attrs_st_ctime_nsec);\n+        attrs_st_birthtime_sec = (*env)->GetFieldID(env, u_attr_class, \"st_birthtime_sec\", \"J\");\n+        CHECK_NULL(attrs_st_birthtime_sec);\n+    }\n+\n@@ -164,0 +332,80 @@\n+\/**\n+ * Copy statx members into sun.nio.fs.UnixFileAttributes\n+ *\/\n+static void copy_statx_attributes(JNIEnv* env, struct statx* buf, jobject attrs) {\n+    (*env)->SetIntField(env, attrs, attrs_st_mode, (jint)buf->stx_mode);\n+    (*env)->SetLongField(env, attrs, attrs_st_ino, (jlong)buf->stx_ino);\n+    (*env)->SetIntField(env, attrs, attrs_st_nlink, (jint)buf->stx_nlink);\n+    (*env)->SetIntField(env, attrs, attrs_st_uid, (jint)buf->stx_uid);\n+    (*env)->SetIntField(env, attrs, attrs_st_gid, (jint)buf->stx_gid);\n+    (*env)->SetLongField(env, attrs, attrs_st_size, (jlong)buf->stx_size);\n+    (*env)->SetLongField(env, attrs, attrs_st_atime_sec, (jlong)buf->stx_atime.tv_sec);\n+    (*env)->SetLongField(env, attrs, attrs_st_mtime_sec, (jlong)buf->stx_mtime.tv_sec);\n+    (*env)->SetLongField(env, attrs, attrs_st_ctime_sec, (jlong)buf->stx_ctime.tv_sec);\n+    (*env)->SetLongField(env, attrs, attrs_st_birthtime_sec, (jlong)buf->stx_btime.tv_sec);\n+    (*env)->SetLongField(env, attrs, attrs_stx_btime_nsec, (jlong)buf->stx_btime.tv_nsec);\n+    (*env)->SetLongField(env, attrs, attrs_st_atime_nsec, (jlong)buf->stx_atime.tv_nsec);\n+    (*env)->SetLongField(env, attrs, attrs_st_mtime_nsec, (jlong)buf->stx_mtime.tv_nsec);\n+    (*env)->SetLongField(env, attrs, attrs_st_ctime_nsec, (jlong)buf->stx_ctime.tv_nsec);\n+    \/\/ convert statx major:minor to dev_t using makedev\n+    dev_t dev = makedev(buf->stx_dev_major, buf->stx_dev_minor);\n+    dev_t rdev = makedev(buf->stx_rdev_major, buf->stx_rdev_minor);\n+    (*env)->SetLongField(env, attrs, attrs_st_dev, (jlong)dev);\n+    (*env)->SetLongField(env, attrs, attrs_st_rdev, (jlong)rdev);\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_sun_nio_fs_LinuxNativeDispatcher_statx0(JNIEnv* env, jclass this,\n+    jlong pathAddress, jobject attrs, jboolean follow_links)\n+{\n+    int err = 0;\n+    struct statx statx_buf;\n+    int flags = AT_STATX_SYNC_AS_STAT;\n+    unsigned int mask = STATX_ALL;\n+    int f_symlink = FOLLOW_SYMLINK;\n+    const char* path = (const char*)jlong_to_ptr(pathAddress);\n+\n+    if (my_statx_func != NULL) {\n+        if (follow_links == JNI_FALSE) {\n+            f_symlink = NO_FOLLOW_SYMLINK;\n+        }\n+        RESTARTABLE(statx_wrapper(AT_FDCWD, path, flags, mask, &statx_buf, f_symlink), err);\n+        if (err == 0) {\n+            copy_statx_attributes(env, &statx_buf, attrs);\n+            return 0;\n+        } else {\n+            return errno;\n+        }\n+    } else {\n+        \/\/ Do nothing, when statx is not supported. The Java code should\n+        \/\/ use stat64 via UnixNativeDispatcher instead\n+        return 0;\n+    }\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_sun_nio_fs_LinuxNativeDispatcher_statxfd0(JNIEnv* env, jclass this,\n+    jint fd, jobject attrs)\n+{\n+    int err = 0;\n+    struct statx statx_buf;\n+    int flags = AT_EMPTY_PATH | AT_STATX_SYNC_AS_STAT;\n+    unsigned int mask = STATX_ALL;\n+\n+    if (my_statx_func != NULL) {\n+        \/\/ statx supports FD use via dirfd iff pathname is an empty string and the\n+        \/\/ AT_EMPTY_PATH flag is specified in flags\n+        RESTARTABLE(statx_wrapper((int)fd, \"\", flags, mask, &statx_buf, FOLLOW_SYMLINK), err);\n+        if (err == 0) {\n+            copy_statx_attributes(env, &statx_buf, attrs);\n+            return 0;\n+        } else {\n+            return errno;\n+        }\n+    } else {\n+        \/\/ Do nothing, when statx is not supported. The Java code should\n+        \/\/ use stat64 via UnixNativeDispatcher instead\n+        return 0;\n+    }\n+}\n+\n","filename":"src\/java.base\/linux\/native\/libnio\/fs\/LinuxNativeDispatcher.c","additions":248,"deletions":0,"binary":false,"changes":248,"status":"modified"},{"patch":"@@ -28,6 +28,0 @@\n-import java.nio.file.*;\n-import java.nio.file.attribute.*;\n-import java.util.*;\n-import java.util.concurrent.TimeUnit;\n-import java.io.IOException;\n-\n@@ -35,1 +29,26 @@\n-import static sun.nio.fs.UnixNativeDispatcher.*;\n+import static sun.nio.fs.UnixNativeDispatcher.chmod;\n+import static sun.nio.fs.UnixNativeDispatcher.chown;\n+import static sun.nio.fs.UnixNativeDispatcher.close;\n+import static sun.nio.fs.UnixNativeDispatcher.fchmod;\n+import static sun.nio.fs.UnixNativeDispatcher.futimens;\n+import static sun.nio.fs.UnixNativeDispatcher.futimensSupported;\n+import static sun.nio.fs.UnixNativeDispatcher.futimes;\n+import static sun.nio.fs.UnixNativeDispatcher.futimesSupported;\n+import static sun.nio.fs.UnixNativeDispatcher.lchown;\n+import static sun.nio.fs.UnixNativeDispatcher.lutimes;\n+import static sun.nio.fs.UnixNativeDispatcher.lutimesSupported;\n+import static sun.nio.fs.UnixNativeDispatcher.open;\n+import static sun.nio.fs.UnixNativeDispatcher.utimes;\n+\n+import java.io.IOException;\n+import java.nio.file.ProviderMismatchException;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.nio.file.attribute.GroupPrincipal;\n+import java.nio.file.attribute.PosixFileAttributeView;\n+import java.nio.file.attribute.PosixFileAttributes;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.UserPrincipal;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n@@ -445,1 +464,5 @@\n-        return new FileOwnerAttributeViewImpl(createPosixView(file, followLinks));\n+        return createOwnerView(createPosixView(file, followLinks));\n+    }\n+\n+    static FileOwnerAttributeViewImpl createOwnerView(Posix posixView) {\n+        return new FileOwnerAttributeViewImpl(posixView);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileAttributeViews.java","additions":31,"deletions":8,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -28,3 +28,6 @@\n-import java.nio.file.attribute.*;\n-import java.util.concurrent.TimeUnit;\n-import java.util.Set;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n+import java.nio.file.attribute.GroupPrincipal;\n+import java.nio.file.attribute.PosixFileAttributes;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.UserPrincipal;\n@@ -32,0 +35,2 @@\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n@@ -54,1 +59,1 @@\n-    private long    st_birthtime_sec;\n+    protected long  st_birthtime_sec;\n@@ -61,1 +66,1 @@\n-    private UnixFileAttributes() {\n+    protected UnixFileAttributes() {\n@@ -64,5 +69,5 @@\n-    \/\/ get the UnixFileAttributes for a given file\n-    static UnixFileAttributes get(UnixPath path, boolean followLinks)\n-        throws UnixException\n-    {\n-        UnixFileAttributes attrs = new UnixFileAttributes();\n+    \/\/ get the UnixFileAttributes for a given file, store in the\n+    \/\/ provided instance\n+    static UnixFileAttributes get(UnixPath path,\n+                                  boolean followLinks,\n+                                  UnixFileAttributes attrs) throws UnixException {\n@@ -77,0 +82,8 @@\n+    \/\/ get the UnixFileAttributes for a given file\n+    static UnixFileAttributes get(UnixPath path, boolean followLinks)\n+        throws UnixException\n+    {\n+        UnixFileAttributes attrs = new UnixFileAttributes();\n+        return get(path, followLinks, attrs);\n+    }\n+\n@@ -93,0 +106,6 @@\n+        return get(fd, attrs);\n+    }\n+\n+    \/\/ get the UnixFileAttributes for an open file, store the attributes in\n+    \/\/ the given instance\n+    static UnixFileAttributes get(int fd, UnixFileAttributes attrs) throws UnixException {\n@@ -121,1 +140,1 @@\n-    private static FileTime toFileTime(long sec, long nsec) {\n+    protected static FileTime toFileTime(long sec, long nsec) {\n@@ -269,1 +288,1 @@\n-    private static class UnixAsBasicFileAttributes implements BasicFileAttributes {\n+    static class UnixAsBasicFileAttributes implements BasicFileAttributes {\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileAttributes.java","additions":31,"deletions":12,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -54,3 +54,0 @@\n-#if defined(__GLIBC__)\n-#include <asm\/unistd.h> \/\/ __NR_statx\n-#endif\n@@ -77,82 +74,0 @@\n-#if defined(__linux__)\n-\/\/ Account for the case where we compile on a system without statx\n-\/\/ support. We still want to ensure we can call statx at runtime\n-\/\/ if the runtime glibc version supports it (>= 2.28)\n-#ifndef __NR_statx\n-\n-\/*\n- * Timestamp structure for the timestamps in struct statx.\n- *\/\n-struct statx_timestamp {\n-        int64_t   tv_sec;\n-        __uint32_t  tv_nsec;\n-        int32_t   __reserved;\n-};\n-\n-\/*\n- * struct statx used by statx system call on >= glibc 2.28\n- * systems\n- *\/\n-struct statx\n-{\n-  __uint32_t stx_mask;\n-  __uint32_t stx_blksize;\n-  __uint64_t stx_attributes;\n-  __uint32_t stx_nlink;\n-  __uint32_t stx_uid;\n-  __uint32_t stx_gid;\n-  __uint16_t stx_mode;\n-  __uint16_t __statx_pad1[1];\n-  __uint64_t stx_ino;\n-  __uint64_t stx_size;\n-  __uint64_t stx_blocks;\n-  __uint64_t stx_attributes_mask;\n-  struct statx_timestamp stx_atime;\n-  struct statx_timestamp stx_btime;\n-  struct statx_timestamp stx_ctime;\n-  struct statx_timestamp stx_mtime;\n-  __uint32_t stx_rdev_major;\n-  __uint32_t stx_rdev_minor;\n-  __uint32_t stx_dev_major;\n-  __uint32_t stx_dev_minor;\n-  __uint64_t __statx_pad2[14];\n-};\n-#else\n-\n-#include <linux\/stat.h> \/\/ statx and related struct defns\n-\n-#endif \/\/ __NR_statx\n-\n-\/\/ statx masks, flags, constants\n-\n-#ifndef AT_SYMLINK_NOFOLLOW\n-#define AT_SYMLINK_NOFOLLOW 0x100\n-#endif\n-\n-#ifndef AT_STATX_SYNC_AS_STAT\n-#define AT_STATX_SYNC_AS_STAT 0x0000\n-#endif\n-\n-#ifndef AT_EMPTY_PATH\n-#define AT_EMPTY_PATH 0x1000\n-#endif\n-\n-#ifndef STATX_BTIME\n-#define STATX_BTIME 0x00000800U\n-#endif\n-\n-#ifndef AT_FDCWD\n-#define AT_FDCWD -100\n-#endif\n-\n-#ifndef RTLD_DEFAULT\n-#define RTLD_DEFAULT RTLD_LOCAL\n-#endif\n-\n-#define STATX_POSSIBLY_AVAILABLE 1\n-#define NO_FOLLOW_SYMLINK 1\n-#define FOLLOW_SYMLINK 0\n-\n-#endif \/\/ __linux__\n-\n-\n@@ -205,1 +120,1 @@\n-#if defined(_DARWIN_FEATURE_64_BIT_INODE) || defined(STATX_POSSIBLY_AVAILABLE)\n+#ifdef _DARWIN_FEATURE_64_BIT_INODE\n@@ -231,4 +146,0 @@\n-#ifdef STATX_POSSIBLY_AVAILABLE\n-typedef int statx_func(int dirfd, const char *restrict pathname, int flags,\n-                 unsigned int mask, struct statx *restrict statxbuf);\n-#endif\n@@ -244,3 +155,0 @@\n-#ifdef STATX_POSSIBLY_AVAILABLE\n-static statx_func* my_statx_func = NULL;\n-#endif\n@@ -272,10 +180,0 @@\n-#ifdef STATX_POSSIBLY_AVAILABLE\n-static int statx_wrapper(int dirfd, const char *restrict pathname, int flags,\n-                 unsigned int mask, struct statx *restrict statxbuf, int follow_symlink) {\n-    if (follow_symlink == NO_FOLLOW_SYMLINK) {\n-      flags |= AT_SYMLINK_NOFOLLOW;\n-    }\n-    return (*my_statx_func)(dirfd, pathname, flags, mask, statxbuf);\n-}\n-#endif\n-\n@@ -334,1 +232,1 @@\n-#if defined(_DARWIN_FEATURE_64_BIT_INODE) || defined(STATX_POSSIBLY_AVAILABLE)\n+#ifdef _DARWIN_FEATURE_64_BIT_INODE\n@@ -419,6 +317,0 @@\n-#ifdef STATX_POSSIBLY_AVAILABLE\n-    my_statx_func = (statx_func*) dlsym(RTLD_DEFAULT, \"statx\");\n-    if (my_statx_func != NULL) {\n-        capabilities |= sun_nio_fs_UnixNativeDispatcher_SUPPORTS_BIRTHTIME;\n-    }\n-#endif\n@@ -639,5 +531,0 @@\n-#ifdef STATX_POSSIBLY_AVAILABLE\n-    struct statx statx_buf;\n-    int flags = AT_STATX_SYNC_AS_STAT;\n-    unsigned int mask = STATX_BTIME;\n-#endif\n@@ -648,10 +535,0 @@\n-#ifdef STATX_POSSIBLY_AVAILABLE\n-        if (my_statx_func != NULL) {\n-            err = statx_wrapper(AT_FDCWD, path, flags, mask, &statx_buf, FOLLOW_SYMLINK);\n-            if (err == 0) {\n-                (*env)->SetLongField(env, attrs, attrs_st_birthtime_sec, (jlong)statx_buf.stx_btime.tv_sec);\n-            } else {\n-                return errno;\n-            }\n-        }\n-#endif\n@@ -671,5 +548,0 @@\n-#ifdef STATX_POSSIBLY_AVAILABLE\n-    struct statx statx_buf;\n-    int flags = AT_STATX_SYNC_AS_STAT;\n-    unsigned int mask = STATX_BTIME;\n-#endif\n@@ -682,10 +554,0 @@\n-#ifdef STATX_POSSIBLY_AVAILABLE\n-        if (my_statx_func != NULL) {\n-            err = statx_wrapper(AT_FDCWD, path, flags, mask, &statx_buf, NO_FOLLOW_SYMLINK);\n-            if (err == 0) {\n-                (*env)->SetLongField(env, attrs, attrs_st_birthtime_sec, (jlong)statx_buf.stx_btime.tv_sec);\n-            } else {\n-                throwUnixException(env, errno);\n-            }\n-        }\n-#endif\n@@ -701,5 +563,0 @@\n-#ifdef STATX_POSSIBLY_AVAILABLE\n-    struct statx statx_buf;\n-    int flags = AT_EMPTY_PATH | AT_STATX_SYNC_AS_STAT;\n-    unsigned int mask = STATX_BTIME;\n-#endif\n@@ -712,12 +569,0 @@\n-#ifdef STATX_POSSIBLY_AVAILABLE\n-        if (my_statx_func != NULL) {\n-            \/\/ statx supports FD use via dirfd iff pathname is an empty string and the\n-            \/\/ AT_EMPTY_PATH flag is specified in flags\n-            err = statx_wrapper((int)fd, \"\", flags, mask, &statx_buf, FOLLOW_SYMLINK);\n-            if (err == 0) {\n-                (*env)->SetLongField(env, attrs, attrs_st_birthtime_sec, (jlong)statx_buf.stx_btime.tv_sec);\n-            } else {\n-                throwUnixException(env, errno);\n-            }\n-        }\n-#endif\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":2,"deletions":157,"binary":false,"changes":159,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n-    private static final String UNIX_DISPATCHER_CLASSNAME = \"sun.nio.fs.UnixNativeDispatcher\";\n-    private static final String SUPPORTS_BIRTH_TIME_METHOD = \"birthtimeSupported\";\n+    private static final String LINUX_DISPATCHER_CLASSNAME = \"sun.nio.fs.LinuxNativeDispatcher\";\n+    private static final String SUPPORTS_STATX_METHOD = \"isStatxSupported\";\n@@ -96,1 +96,1 @@\n-            if (unixDispatcherSupportsBirthTime()) {\n+            if (linuxDispatcherSupportsBirthTime()) {\n@@ -133,1 +133,1 @@\n-    private static boolean unixDispatcherSupportsBirthTime() {\n+    private static boolean linuxDispatcherSupportsBirthTime() {\n@@ -135,4 +135,4 @@\n-            Class<?> unixDispatcher = Class.forName(UNIX_DISPATCHER_CLASSNAME);\n-            Method supportsBirthTime = unixDispatcher.getDeclaredMethod(SUPPORTS_BIRTH_TIME_METHOD);\n-            supportsBirthTime.setAccessible(true);\n-            return (boolean)supportsBirthTime.invoke(null);\n+            Class<?> linuxDispatcher = Class.forName(LINUX_DISPATCHER_CLASSNAME);\n+            Method supportsStatx = linuxDispatcher.getDeclaredMethod(SUPPORTS_STATX_METHOD);\n+            supportsStatx.setAccessible(true);\n+            return (boolean)supportsStatx.invoke(null);\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/BasicFileAttributeView\/CreationTime.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}