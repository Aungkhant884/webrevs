{"files":[{"patch":"@@ -204,2 +204,2 @@\n-G1SegmentedArrayMemoryStats G1CardSetMemoryManager::memory_stats() const {\n-  G1SegmentedArrayMemoryStats result;\n+G1CardSetMemoryStats G1CardSetMemoryManager::memory_stats() const {\n+  G1CardSetMemoryStats result;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -141,1 +141,2 @@\n-typedef G1SegmentedArrayFreePool<mtGCCardSet> G1CardSetFreePool;\n+typedef G1SegmentedArrayFreePool<mtGCCardSet, G1CardSetConfiguration> G1CardSetFreePool;\n+typedef G1CardSetFreePool::G1SegmentedArrayMemoryStats G1CardSetMemoryStats;\n@@ -170,1 +171,1 @@\n-  G1SegmentedArrayMemoryStats memory_stats() const;\n+  G1CardSetMemoryStats memory_stats() const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1434,1 +1434,1 @@\n-  _free_segmented_array_memory_task(NULL),\n+  _card_set_free_memory_task(NULL),\n@@ -1726,2 +1726,2 @@\n-  _free_segmented_array_memory_task = new G1SegmentedArrayFreeMemoryTask(\"Card Set Free Memory Task\");\n-  _service_thread->register_task(_free_segmented_array_memory_task);\n+  _card_set_free_memory_task = new G1SegmentedArrayFreeMemoryTask<mtGCCardSet, G1CardSetConfiguration>(\"Card Set Free Memory Task\");\n+  _service_thread->register_task(_card_set_free_memory_task);\n@@ -2619,2 +2619,2 @@\n-  _free_segmented_array_memory_task->notify_new_stats(&_young_gen_card_set_stats,\n-                                                      &_collection_set_candidates_card_set_stats);\n+  _card_set_free_memory_task->notify_new_stats(&_young_gen_card_set_stats,\n+                                               &_collection_set_candidates_card_set_stats);\n@@ -2944,1 +2944,1 @@\n-void G1CollectedHeap::set_collection_set_candidates_stats(G1SegmentedArrayMemoryStats& stats) {\n+void G1CollectedHeap::set_collection_set_candidates_stats(G1CardSetMemoryStats& stats) {\n@@ -2948,1 +2948,1 @@\n-void G1CollectedHeap::set_young_gen_card_set_stats(const G1SegmentedArrayMemoryStats& stats) {\n+void G1CollectedHeap::set_young_gen_card_set_stats(const G1CardSetMemoryStats& stats) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-  G1SegmentedArrayFreeMemoryTask* _free_segmented_array_memory_task;\n+  G1SegmentedArrayFreeMemoryTask<mtGCCardSet, G1CardSetConfiguration>* _card_set_free_memory_task;\n@@ -163,1 +163,1 @@\n-  G1SegmentedArrayMemoryStats _young_gen_card_set_stats;\n+  G1CardSetMemoryStats _young_gen_card_set_stats;\n@@ -165,1 +165,1 @@\n-  G1SegmentedArrayMemoryStats _collection_set_candidates_card_set_stats;\n+  G1CardSetMemoryStats _collection_set_candidates_card_set_stats;\n@@ -262,2 +262,2 @@\n-  void set_collection_set_candidates_stats(G1SegmentedArrayMemoryStats& stats);\n-  void set_young_gen_card_set_stats(const G1SegmentedArrayMemoryStats& stats);\n+  void set_collection_set_candidates_stats(G1CardSetMemoryStats& stats);\n+  void set_young_gen_card_set_stats(const G1CardSetMemoryStats& stats);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -36,1 +36,2 @@\n-constexpr const char* G1SegmentedArrayFreeMemoryTask::_state_names[];\n+template<MEMFLAGS flag, typename Configuration>\n+constexpr const char* G1SegmentedArrayFreeMemoryTask<flag, Configuration>::_state_names[];\n@@ -38,1 +39,2 @@\n-const char* G1SegmentedArrayFreeMemoryTask::get_state_name(State value) const {\n+template<MEMFLAGS flag, typename Configuration>\n+const char* G1SegmentedArrayFreeMemoryTask<flag, Configuration>::get_state_name(State value) const {\n@@ -42,1 +44,2 @@\n-bool G1SegmentedArrayFreeMemoryTask::deadline_exceeded(jlong deadline) {\n+template<MEMFLAGS flag, typename Configuration>\n+bool G1SegmentedArrayFreeMemoryTask<flag, Configuration>::deadline_exceeded(jlong deadline) {\n@@ -51,1 +54,2 @@\n-bool G1SegmentedArrayFreeMemoryTask::calculate_return_infos(jlong deadline) {\n+template<MEMFLAGS flag, typename Configuration>\n+bool G1SegmentedArrayFreeMemoryTask<flag, Configuration>::calculate_return_infos(jlong deadline) {\n@@ -55,1 +59,1 @@\n-  G1SegmentedArrayMemoryStats free = G1SegmentedArrayFreePool<mtGCCardSet>::free_list_sizes();\n+  G1SegmentedArrayMemoryStats free = G1SegmentedArrayFreePool<flag, Configuration>::free_list_sizes();\n@@ -57,2 +61,2 @@\n-  _return_info = new G1ReturnMemoryProcessorSet(used.num_pools());\n-  for (uint i = 0; i < used.num_pools(); i++) {\n+  _return_info = new G1ReturnMemoryProcessorSet(NUM);\n+  for (uint i = 0; i < NUM; i++) {\n@@ -64,1 +68,1 @@\n-                        G1CardSetConfiguration::mem_object_type_name_str(i),\n+                        Configuration::mem_object_type_name_str(i),\n@@ -71,1 +75,1 @@\n-  G1SegmentedArrayFreePool<mtGCCardSet>::update_unlink_processors(_return_info);\n+  G1SegmentedArrayFreePool<flag, Configuration>::update_unlink_processors(_return_info);\n@@ -75,1 +79,2 @@\n-bool G1SegmentedArrayFreeMemoryTask::return_memory_to_vm(jlong deadline) {\n+template<MEMFLAGS flag, typename Configuration>\n+bool G1SegmentedArrayFreeMemoryTask<flag, Configuration>::return_memory_to_vm(jlong deadline) {\n@@ -87,1 +92,2 @@\n-bool G1SegmentedArrayFreeMemoryTask::return_memory_to_os(jlong deadline) {\n+template<MEMFLAGS flag, typename Configuration>\n+bool G1SegmentedArrayFreeMemoryTask<flag, Configuration>::return_memory_to_os(jlong deadline) {\n@@ -99,1 +105,2 @@\n-bool G1SegmentedArrayFreeMemoryTask::cleanup_return_infos() {\n+template<MEMFLAGS flag, typename Configuration>\n+bool G1SegmentedArrayFreeMemoryTask<flag, Configuration>::cleanup_return_infos() {\n@@ -110,1 +117,2 @@\n-bool G1SegmentedArrayFreeMemoryTask::free_excess_segmented_array_memory() {\n+template<MEMFLAGS flag, typename Configuration>\n+bool G1SegmentedArrayFreeMemoryTask<flag, Configuration>::free_excess_segmented_array_memory() {\n@@ -167,1 +175,2 @@\n-void G1SegmentedArrayFreeMemoryTask::set_state(State new_state) {\n+template<MEMFLAGS flag, typename Configuration>\n+void G1SegmentedArrayFreeMemoryTask<flag, Configuration>::set_state(State new_state) {\n@@ -174,1 +183,2 @@\n-bool G1SegmentedArrayFreeMemoryTask::is_active() const {\n+template<MEMFLAGS flag, typename Configuration>\n+bool G1SegmentedArrayFreeMemoryTask<flag, Configuration>::is_active() const {\n@@ -178,1 +188,2 @@\n-jlong G1SegmentedArrayFreeMemoryTask::reschedule_delay_ms() const {\n+template<MEMFLAGS flag, typename Configuration>\n+jlong G1SegmentedArrayFreeMemoryTask<flag, Configuration>::reschedule_delay_ms() const {\n@@ -182,1 +193,2 @@\n-G1SegmentedArrayFreeMemoryTask::G1SegmentedArrayFreeMemoryTask(const char* name) :\n+template<MEMFLAGS flag, typename Configuration>\n+G1SegmentedArrayFreeMemoryTask<flag, Configuration>::G1SegmentedArrayFreeMemoryTask(const char* name) :\n@@ -185,1 +197,2 @@\n-void G1SegmentedArrayFreeMemoryTask::execute() {\n+template<MEMFLAGS flag, typename Configuration>\n+void G1SegmentedArrayFreeMemoryTask<flag, Configuration>::execute() {\n@@ -193,2 +206,3 @@\n-void G1SegmentedArrayFreeMemoryTask::notify_new_stats(G1SegmentedArrayMemoryStats* young_gen_stats,\n-                                                      G1SegmentedArrayMemoryStats* collection_set_candidate_stats) {\n+template<MEMFLAGS flag, typename Configuration>\n+void G1SegmentedArrayFreeMemoryTask<flag, Configuration>::notify_new_stats(G1SegmentedArrayMemoryStats* young_gen_stats,\n+                                                                           G1SegmentedArrayMemoryStats* collection_set_candidate_stats) {\n@@ -205,0 +219,2 @@\n+\n+template class G1SegmentedArrayFreeMemoryTask<mtGCCardSet, G1CardSetConfiguration>;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArrayFreeMemoryTask.cpp","additions":36,"deletions":20,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+template<MEMFLAGS flag, typename Configuration>\n@@ -52,0 +53,2 @@\n+  static constexpr uint NUM = Configuration::num_mem_object_types();\n+\n@@ -56,0 +59,1 @@\n+  typedef typename G1SegmentedArrayFreePool<flag, Configuration>::G1SegmentedArrayMemoryStats G1SegmentedArrayMemoryStats;\n@@ -59,2 +63,2 @@\n-  typedef G1SegmentedArrayFreePool<mtGCCardSet>::G1ReturnMemoryProcessor G1ReturnMemoryProcessor;\n-  typedef G1SegmentedArrayFreePool<mtGCCardSet>::G1ReturnMemoryProcessorSet G1ReturnMemoryProcessorSet;\n+  typedef typename G1SegmentedArrayFreePool<flag, Configuration>::G1ReturnMemoryProcessor G1ReturnMemoryProcessor;\n+  typedef typename G1SegmentedArrayFreePool<flag, Configuration>::G1ReturnMemoryProcessorSet G1ReturnMemoryProcessorSet;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArrayFreeMemoryTask.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,1 +35,2 @@\n-G1SegmentedArrayMemoryStats::G1SegmentedArrayMemoryStats() {\n+template<MEMFLAGS flag, typename Configuration>\n+G1SegmentedArrayFreePool<flag, Configuration>::G1SegmentedArrayMemoryStats::G1SegmentedArrayMemoryStats() {\n@@ -39,2 +40,3 @@\n-void G1SegmentedArrayMemoryStats::clear() {\n-  for (uint i = 0; i < num_pools(); i++) {\n+template<MEMFLAGS flag, typename Configuration>\n+void G1SegmentedArrayFreePool<flag, Configuration>::G1SegmentedArrayMemoryStats::clear() {\n+  for (uint i = 0; i < NUM; i++) {\n@@ -46,5 +48,3 @@\n-template<MEMFLAGS flag>\n-void G1SegmentedArrayFreePool<flag>::update_unlink_processors(G1ReturnMemoryProcessorSet* unlink_processor) {\n-  uint num_free_lists = _freelist_pool.num_free_lists();\n-\n-  for (uint i = 0; i < num_free_lists; i++) {\n+template<MEMFLAGS flag, typename Configuration>\n+void G1SegmentedArrayFreePool<flag, Configuration>::update_unlink_processors(G1ReturnMemoryProcessorSet* unlink_processor) {\n+  for (uint i = 0; i < NUM; i++) {\n@@ -55,2 +55,2 @@\n-template<MEMFLAGS flag>\n-void G1SegmentedArrayFreePool<flag>::G1ReturnMemoryProcessor::visit_free_list(G1SegmentedArrayFreeList<flag>* source) {\n+template<MEMFLAGS flag, typename Configuration>\n+void G1SegmentedArrayFreePool<flag, Configuration>::G1ReturnMemoryProcessor::visit_free_list(G1SegmentedArrayFreeList<flag>* source) {\n@@ -78,2 +78,2 @@\n-template<MEMFLAGS flag>\n-bool G1SegmentedArrayFreePool<flag>::G1ReturnMemoryProcessor::return_to_vm(jlong deadline) {\n+template<MEMFLAGS flag, typename Configuration>\n+bool G1SegmentedArrayFreePool<flag, Configuration>::G1ReturnMemoryProcessor::return_to_vm(jlong deadline) {\n@@ -128,2 +128,2 @@\n-template<MEMFLAGS flag>\n-bool G1SegmentedArrayFreePool<flag>::G1ReturnMemoryProcessor::return_to_os(jlong deadline) {\n+template<MEMFLAGS flag, typename Configuration>\n+bool G1SegmentedArrayFreePool<flag, Configuration>::G1ReturnMemoryProcessor::return_to_os(jlong deadline) {\n@@ -155,6 +155,2 @@\n-template<MEMFLAGS flag>\n-G1SegmentedArrayFreePool<flag> G1SegmentedArrayFreePool<flag>::_freelist_pool(G1CardSetConfiguration::num_mem_object_types());\n-\n-template<MEMFLAGS flag>\n-G1SegmentedArrayFreePool<flag>::G1SegmentedArrayFreePool(uint num_free_lists) :\n-  _num_free_lists(num_free_lists) {\n+template<MEMFLAGS flag, typename Configuration>\n+G1SegmentedArrayFreePool<flag, Configuration> G1SegmentedArrayFreePool<flag, Configuration>::_freelist_pool;\n@@ -162,2 +158,4 @@\n-  _free_lists = NEW_C_HEAP_ARRAY(G1SegmentedArrayFreeList < flag >, _num_free_lists, mtGC);\n-  for (uint i = 0; i < _num_free_lists; i++) {\n+template<MEMFLAGS flag, typename Configuration>\n+G1SegmentedArrayFreePool<flag, Configuration>::G1SegmentedArrayFreePool() {\n+  _free_lists = NEW_C_HEAP_ARRAY(G1SegmentedArrayFreeList <flag>, NUM, mtGC);\n+  for (uint i = 0; i < NUM; i++) {\n@@ -168,3 +166,3 @@\n-template<MEMFLAGS flag>\n-G1SegmentedArrayFreePool<flag>::~G1SegmentedArrayFreePool() {\n-  for (uint i = 0; i < _num_free_lists; i++) {\n+template<MEMFLAGS flag, typename Configuration>\n+G1SegmentedArrayFreePool<flag, Configuration>::~G1SegmentedArrayFreePool() {\n+  for (uint i = 0; i < NUM; i++) {\n@@ -176,2 +174,3 @@\n-template<MEMFLAGS flag>\n-G1SegmentedArrayMemoryStats G1SegmentedArrayFreePool<flag>::memory_sizes() const {\n+template<MEMFLAGS flag, typename Configuration>\n+typename G1SegmentedArrayFreePool<flag, Configuration>::G1SegmentedArrayMemoryStats\n+G1SegmentedArrayFreePool<flag, Configuration>::memory_sizes() const {\n@@ -179,2 +178,1 @@\n-  assert(free_list_stats.num_pools() == num_free_lists(), \"must be\");\n-  for (uint i = 0; i < num_free_lists(); i++) {\n+  for (uint i = 0; i < NUM; i++) {\n@@ -187,2 +185,2 @@\n-template<MEMFLAGS flag>\n-size_t G1SegmentedArrayFreePool<flag>::mem_size() const {\n+template<MEMFLAGS flag, typename Configuration>\n+size_t G1SegmentedArrayFreePool<flag, Configuration>::mem_size() const {\n@@ -190,1 +188,1 @@\n-  for (uint i = 0; i < _num_free_lists; i++) {\n+  for (uint i = 0; i < NUM; i++) {\n@@ -196,2 +194,2 @@\n-template<MEMFLAGS flag>\n-void G1SegmentedArrayFreePool<flag>::print_on(outputStream* out) {\n+template<MEMFLAGS flag, typename Configuration>\n+void G1SegmentedArrayFreePool<flag, Configuration>::print_on(outputStream* out) {\n@@ -199,2 +197,2 @@\n-  for (uint i = 0; i < _num_free_lists; i++) {\n-    FormatBuffer<> fmt(\"    %s\", G1CardSetConfiguration::mem_object_type_name_str(i));\n+  for (uint i = 0; i < NUM; i++) {\n+    FormatBuffer<> fmt(\"    %s\", Configuration::mem_object_type_name_str(i));\n@@ -205,1 +203,1 @@\n-template class G1SegmentedArrayFreePool<mtGCCardSet>;\n+template class G1SegmentedArrayFreePool<mtGCCardSet, G1CardSetConfiguration>;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArrayFreePool.cpp","additions":35,"deletions":37,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -32,25 +32,0 @@\n-\/\/ Statistics for a segmented array. Contains the number of segments and memory\n-\/\/ used for each. Note that statistics are typically not taken atomically so there\n-\/\/ can be inconsistencies. The user must be prepared for them.\n-class G1SegmentedArrayMemoryStats {\n-public:\n-\n-  size_t _num_mem_sizes[G1CardSetConfiguration::num_mem_object_types()];\n-  size_t _num_segments[G1CardSetConfiguration::num_mem_object_types()];\n-\n-  \/\/ Returns all-zero statistics.\n-  G1SegmentedArrayMemoryStats();\n-\n-  void add(G1SegmentedArrayMemoryStats const other) {\n-    STATIC_ASSERT(ARRAY_SIZE(_num_segments) == ARRAY_SIZE(_num_mem_sizes));\n-    for (uint i = 0; i < ARRAY_SIZE(_num_mem_sizes); i++) {\n-      _num_mem_sizes[i] += other._num_mem_sizes[i];\n-      _num_segments[i] += other._num_segments[i];\n-    }\n-  }\n-\n-  void clear();\n-\n-  uint num_pools() const { return G1CardSetConfiguration::num_mem_object_types(); }\n-};\n-\n@@ -59,1 +34,1 @@\n-template<MEMFLAGS flag>\n+template<MEMFLAGS flag, typename Configuration>\n@@ -63,0 +38,1 @@\n+  static constexpr uint NUM = Configuration::num_mem_object_types();\n@@ -64,1 +40,0 @@\n-  const uint _num_free_lists;\n@@ -68,3 +43,0 @@\n-  static G1SegmentedArrayFreePool* free_list_pool() { return &_freelist_pool; }\n-  static G1SegmentedArrayMemoryStats free_list_sizes() { return _freelist_pool.memory_sizes(); }\n-\n@@ -73,0 +45,4 @@\n+  class G1SegmentedArrayMemoryStats;\n+\n+  static G1SegmentedArrayFreePool* free_list_pool() { return &_freelist_pool; }\n+  static G1SegmentedArrayMemoryStats free_list_sizes() { return _freelist_pool.memory_sizes(); }\n@@ -76,1 +52,1 @@\n-  explicit G1SegmentedArrayFreePool(uint num_free_lists);\n+  G1SegmentedArrayFreePool();\n@@ -80,1 +56,1 @@\n-    assert(i < _num_free_lists, \"must be\");\n+    assert(i < NUM, \"must be\");\n@@ -84,2 +60,0 @@\n-  uint num_free_lists() const { return _num_free_lists; }\n-\n@@ -92,0 +66,25 @@\n+\/\/ Statistics for a segmented array. Contains the number of segments and memory\n+\/\/ used for each. Note that statistics are typically not taken atomically so there\n+\/\/ can be inconsistencies. The user must be prepared for them.\n+template<MEMFLAGS flag, typename Configuration>\n+class G1SegmentedArrayFreePool<flag, Configuration>::G1SegmentedArrayMemoryStats {\n+  static constexpr uint NUM = Configuration::num_mem_object_types();\n+\n+public:\n+  size_t _num_mem_sizes[NUM];\n+  size_t _num_segments[NUM];\n+\n+  \/\/ Returns all-zero statistics.\n+  G1SegmentedArrayMemoryStats();\n+\n+  void add(G1SegmentedArrayMemoryStats const other) {\n+    STATIC_ASSERT(ARRAY_SIZE(_num_segments) == ARRAY_SIZE(_num_mem_sizes));\n+    for (uint i = 0; i < ARRAY_SIZE(_num_mem_sizes); i++) {\n+      _num_mem_sizes[i] += other._num_mem_sizes[i];\n+      _num_segments[i] += other._num_segments[i];\n+    }\n+  }\n+\n+  void clear();\n+};\n+\n@@ -94,2 +93,2 @@\n-template<MEMFLAGS flag>\n-class G1SegmentedArrayFreePool<flag>::G1ReturnMemoryProcessor : public CHeapObj<mtGC> {\n+template<MEMFLAGS flag, typename Configuration>\n+class G1SegmentedArrayFreePool<flag, Configuration>::G1ReturnMemoryProcessor : public CHeapObj<mtGC> {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArrayFreePool.hpp","additions":35,"deletions":36,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -333,1 +333,1 @@\n-    G1SegmentedArrayMemoryStats _card_set_stats;\n+    G1CardSetMemoryStats _card_set_stats;\n@@ -449,1 +449,1 @@\n-    G1SegmentedArrayMemoryStats card_set_stats() const {\n+    G1CardSetMemoryStats card_set_stats() const {\n@@ -459,1 +459,1 @@\n-  G1SegmentedArrayMemoryStats _all_card_set_stats;\n+  G1CardSetMemoryStats _all_card_set_stats;\n@@ -493,1 +493,1 @@\n-  const G1SegmentedArrayMemoryStats all_card_set_stats() const {\n+  const G1CardSetMemoryStats all_card_set_stats() const {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-class G1SegmentedArrayMemoryStats;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-      G1SegmentedArrayMemoryStats _total;\n+      G1CardSetMemoryStats _total;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-  _card_set_mm(config, G1SegmentedArrayFreePool<mtGCCardSet>::free_list_pool()),\n+  _card_set_mm(config, G1CardSetFreePool::free_list_pool()),\n@@ -108,1 +108,1 @@\n-G1SegmentedArrayMemoryStats HeapRegionRemSet::card_set_memory_stats() const {\n+G1CardSetMemoryStats HeapRegionRemSet::card_set_memory_stats() const {\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-  G1SegmentedArrayMemoryStats card_set_memory_stats() const;\n+  G1CardSetMemoryStats card_set_memory_stats() const;\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-  G1CardSetFreePool free_pool(config.num_mem_object_types());\n+  G1CardSetFreePool free_pool;\n@@ -436,1 +436,1 @@\n-  G1CardSetFreePool free_pool(config.num_mem_object_types());\n+  G1CardSetFreePool free_pool;\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1CardSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}