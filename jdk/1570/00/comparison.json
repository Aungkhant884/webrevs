{"files":[{"patch":"@@ -98,0 +98,1 @@\n+    @ForceInline\n@@ -110,0 +111,1 @@\n+    @ForceInline\n@@ -126,0 +128,1 @@\n+    @ForceInline\n@@ -141,0 +144,1 @@\n+    @ForceInline\n@@ -156,0 +160,1 @@\n+    @ForceInline\n@@ -171,0 +176,1 @@\n+    @ForceInline\n@@ -186,0 +192,1 @@\n+    @ForceInline\n@@ -201,0 +208,1 @@\n+    @ForceInline\n@@ -216,0 +224,1 @@\n+    @ForceInline\n@@ -231,0 +240,1 @@\n+    @ForceInline\n@@ -246,0 +256,1 @@\n+    @ForceInline\n@@ -261,0 +272,1 @@\n+    @ForceInline\n@@ -276,0 +288,1 @@\n+    @ForceInline\n@@ -291,0 +304,1 @@\n+    @ForceInline\n@@ -307,0 +321,1 @@\n+    @ForceInline\n@@ -324,0 +339,1 @@\n+    @ForceInline\n@@ -343,0 +359,1 @@\n+    @ForceInline\n@@ -362,0 +379,1 @@\n+    @ForceInline\n@@ -381,0 +399,1 @@\n+    @ForceInline\n@@ -400,0 +419,1 @@\n+    @ForceInline\n@@ -419,0 +439,1 @@\n+    @ForceInline\n@@ -438,0 +459,1 @@\n+    @ForceInline\n@@ -457,0 +479,1 @@\n+    @ForceInline\n@@ -476,0 +499,1 @@\n+    @ForceInline\n@@ -495,0 +519,1 @@\n+    @ForceInline\n@@ -514,0 +539,1 @@\n+    @ForceInline\n@@ -533,0 +559,1 @@\n+    @ForceInline\n@@ -552,0 +579,1 @@\n+    @ForceInline\n@@ -569,0 +597,1 @@\n+    @ForceInline\n@@ -583,0 +612,1 @@\n+    @ForceInline\n@@ -597,0 +627,1 @@\n+    @ForceInline\n@@ -611,0 +642,1 @@\n+    @ForceInline\n@@ -625,0 +657,1 @@\n+    @ForceInline\n@@ -639,0 +672,1 @@\n+    @ForceInline\n@@ -653,0 +687,1 @@\n+    @ForceInline\n@@ -667,0 +702,1 @@\n+    @ForceInline\n@@ -681,0 +717,1 @@\n+    @ForceInline\n@@ -695,0 +732,1 @@\n+    @ForceInline\n@@ -709,0 +747,1 @@\n+    @ForceInline\n@@ -723,0 +762,1 @@\n+    @ForceInline\n@@ -737,0 +777,1 @@\n+    @ForceInline\n@@ -751,0 +792,1 @@\n+    @ForceInline\n@@ -765,0 +807,1 @@\n+    @ForceInline\n@@ -779,0 +822,1 @@\n+    @ForceInline\n@@ -794,0 +838,1 @@\n+    @ForceInline\n@@ -809,0 +854,1 @@\n+    @ForceInline\n@@ -824,0 +870,1 @@\n+    @ForceInline\n@@ -839,0 +886,1 @@\n+    @ForceInline\n@@ -854,0 +902,1 @@\n+    @ForceInline\n@@ -869,0 +918,1 @@\n+    @ForceInline\n@@ -884,0 +934,1 @@\n+    @ForceInline\n@@ -899,0 +950,1 @@\n+    @ForceInline\n@@ -914,0 +966,1 @@\n+    @ForceInline\n@@ -929,0 +982,1 @@\n+    @ForceInline\n@@ -944,0 +998,1 @@\n+    @ForceInline\n@@ -959,0 +1014,1 @@\n+    @ForceInline\n@@ -974,0 +1030,1 @@\n+    @ForceInline\n@@ -989,0 +1046,1 @@\n+    @ForceInline\n@@ -1004,0 +1062,1 @@\n+    @ForceInline\n@@ -1019,0 +1078,1 @@\n+    @ForceInline\n@@ -1034,0 +1094,1 @@\n+    @ForceInline\n@@ -1049,0 +1110,1 @@\n+    @ForceInline\n@@ -1064,0 +1126,1 @@\n+    @ForceInline\n@@ -1079,0 +1142,1 @@\n+    @ForceInline\n@@ -1094,0 +1158,1 @@\n+    @ForceInline\n@@ -1109,0 +1174,1 @@\n+    @ForceInline\n@@ -1124,0 +1190,1 @@\n+    @ForceInline\n@@ -1139,0 +1206,1 @@\n+    @ForceInline\n@@ -1154,0 +1222,1 @@\n+    @ForceInline\n@@ -1169,0 +1238,1 @@\n+    @ForceInline\n@@ -1185,0 +1255,1 @@\n+    @ForceInline\n@@ -1201,0 +1272,1 @@\n+    @ForceInline\n@@ -1217,0 +1289,1 @@\n+    @ForceInline\n@@ -1233,0 +1306,1 @@\n+    @ForceInline\n@@ -1249,0 +1323,1 @@\n+    @ForceInline\n@@ -1265,0 +1340,1 @@\n+    @ForceInline\n@@ -1281,0 +1357,1 @@\n+    @ForceInline\n@@ -1297,0 +1374,1 @@\n+    @ForceInline\n@@ -1313,0 +1391,1 @@\n+    @ForceInline\n@@ -1329,0 +1408,1 @@\n+    @ForceInline\n@@ -1345,0 +1425,1 @@\n+    @ForceInline\n@@ -1361,0 +1442,1 @@\n+    @ForceInline\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAccess.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.jdk.incubator.foreign;\n+\n+import jdk.incubator.foreign.MemoryAccess;\n+import jdk.incubator.foreign.MemoryAddress;\n+import jdk.incubator.foreign.MemoryLayout;\n+import jdk.incubator.foreign.MemorySegment;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+import sun.misc.Unsafe;\n+\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.concurrent.TimeUnit;\n+\n+import static jdk.incubator.foreign.MemoryLayout.PathElement.sequenceElement;\n+import static jdk.incubator.foreign.MemoryLayouts.JAVA_DOUBLE;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@State(org.openjdk.jmh.annotations.Scope.Thread)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Fork(3)\n+public class LoopOverNonConstantFP {\n+\n+    static final Unsafe unsafe = Utils.unsafe;\n+\n+    static final int ELEM_SIZE = 1_000_000;\n+    static final int CARRIER_SIZE = (int)JAVA_DOUBLE.byteSize();\n+    static final int ALLOC_SIZE = ELEM_SIZE * CARRIER_SIZE;\n+\n+    MemorySegment segmentIn, segmentOut;\n+    long unsafe_addrIn, unsafe_addrOut;\n+    ByteBuffer byteBufferIn, byteBufferOut;\n+\n+    @Setup\n+    public void setup() {\n+        unsafe_addrIn = unsafe.allocateMemory(ALLOC_SIZE);\n+        unsafe_addrOut = unsafe.allocateMemory(ALLOC_SIZE);\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            unsafe.putDouble(unsafe_addrIn + (i * CARRIER_SIZE) , i);\n+        }\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            unsafe.putDouble(unsafe_addrOut + (i * CARRIER_SIZE) , i);\n+        }\n+        segmentIn = MemorySegment.allocateNative(ALLOC_SIZE);\n+        segmentOut = MemorySegment.allocateNative(ALLOC_SIZE);\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            MemoryAccess.setDoubleAtIndex(segmentIn, i, i);\n+        }\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            MemoryAccess.setDoubleAtIndex(segmentOut, i, i);\n+        }\n+        byteBufferIn = ByteBuffer.allocateDirect(ALLOC_SIZE).order(ByteOrder.nativeOrder());\n+        byteBufferOut = ByteBuffer.allocateDirect(ALLOC_SIZE).order(ByteOrder.nativeOrder());\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            byteBufferIn.putDouble(i * CARRIER_SIZE , i);\n+        }\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            byteBufferOut.putDouble(i * CARRIER_SIZE , i);\n+        }\n+    }\n+\n+    @TearDown\n+    public void tearDown() {\n+        segmentIn.close();\n+        segmentOut.close();\n+        unsafe.invokeCleaner(byteBufferIn);\n+        unsafe.invokeCleaner(byteBufferOut);\n+        unsafe.freeMemory(unsafe_addrIn);\n+        unsafe.freeMemory(unsafe_addrOut);\n+    }\n+\n+    @Benchmark\n+    public void unsafe_loop() {\n+        for (int i = 0; i < ELEM_SIZE; i ++) {\n+            unsafe.putDouble(unsafe_addrOut + (i * CARRIER_SIZE),\n+                    unsafe.getDouble(unsafe_addrIn + (i * CARRIER_SIZE)) +\n+                    unsafe.getDouble(unsafe_addrOut + (i * CARRIER_SIZE)));\n+        }\n+    }\n+\n+    @Benchmark\n+    public void segment_loop() {\n+        for (int i = 0; i < ELEM_SIZE; i ++) {\n+            MemoryAccess.setDoubleAtIndex(segmentOut, i,\n+                    MemoryAccess.getDoubleAtIndex(segmentIn, i) +\n+                    MemoryAccess.getDoubleAtIndex(segmentOut, i));\n+        }\n+    }\n+\n+    @Benchmark\n+    public void BB_loop() {\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            byteBufferOut.putDouble(i * CARRIER_SIZE,\n+                    byteBufferIn.getDouble(i * CARRIER_SIZE) +\n+                    byteBufferOut.getDouble(i * CARRIER_SIZE));\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantFP.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.jdk.incubator.foreign;\n+\n+import static jdk.incubator.foreign.MemoryAccess.*;\n+import jdk.incubator.foreign.*;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+import sun.misc.Unsafe;\n+import java.util.concurrent.TimeUnit;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+import java.lang.reflect.Field;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@State(org.openjdk.jmh.annotations.Scope.Thread)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Fork(3)\n+public class UnrolledAccess {\n+\n+    static final Unsafe U = Utils.unsafe;\n+\n+    final static int SIZE = 1024;\n+\n+    static final VarHandle LONG_HANDLE = MemoryLayout.ofSequence(SIZE, MemoryLayouts.JAVA_LONG)\n+            .varHandle(long.class, MemoryLayout.PathElement.sequenceElement());\n+\n+    @State(Scope.Benchmark)\n+    public static class Data {\n+\n+        final double[] inputArray;\n+        final double[] outputArray;\n+        final long inputAddress;\n+        final long outputAddress;\n+        final MemorySegment inputSegment;\n+        final MemorySegment outputSegment;\n+\n+\n+        public Data() {\n+            this.inputArray = new double[SIZE];\n+            this.outputArray = new double[SIZE];\n+            this.inputAddress = U.allocateMemory(8 * SIZE);\n+            this.outputAddress = U.allocateMemory(8 * SIZE);\n+            this.inputSegment = MemoryAddress.ofLong(inputAddress).asSegmentRestricted(8*SIZE);\n+            this.outputSegment = MemoryAddress.ofLong(outputAddress).asSegmentRestricted(8*SIZE);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void unsafe_loop(Data state) {\n+        final long ia = state.inputAddress;\n+        final long oa = state.outputAddress;\n+        for(int i = 0; i < SIZE; i+=4) {\n+            U.putLong(oa + 8*i, U.getLong(ia + 8*i) + U.getLong(oa + 8*i));\n+            U.putLong(oa + 8*(i+1), U.getLong(ia + 8*(i+1)) + U.getLong(oa + 8*(i+1)));\n+            U.putLong(oa + 8*(i+2), U.getLong(ia + 8*(i+2)) + U.getLong(oa + 8*(i+2)));\n+            U.putLong(oa + 8*(i+3), U.getLong(ia + 8*(i+3)) + U.getLong(oa + 8*(i+3)));\n+        }\n+    }\n+\n+    @Benchmark\n+    public void handle_loop(Data state) {\n+        final MemorySegment is = state.inputSegment;\n+        final MemorySegment os = state.outputSegment;\n+\n+        for(int i = 0; i < SIZE; i+=4) {\n+            LONG_HANDLE.set(os, (long) (i),   (long) LONG_HANDLE.get(is, (long) (i))   + (long) LONG_HANDLE.get(os, (long) (i)));\n+            LONG_HANDLE.set(os, (long) (i+1), (long) LONG_HANDLE.get(is, (long) (i+1)) + (long) LONG_HANDLE.get(os, (long) (i+1)));\n+            LONG_HANDLE.set(os, (long) (i+2), (long) LONG_HANDLE.get(is, (long) (i+2)) + (long) LONG_HANDLE.get(os, (long) (i+2)));\n+            LONG_HANDLE.set(os, (long) (i+3), (long) LONG_HANDLE.get(is, (long) (i+3)) + (long) LONG_HANDLE.get(os, (long) (i+3)));\n+        }\n+    }\n+\n+    @Benchmark\n+    public void static_handle_loop(Data state) {\n+        final MemorySegment is = state.inputSegment;\n+        final MemorySegment os = state.outputSegment;\n+\n+        for(int i = 0; i < SIZE; i+=4) {\n+            setLongAtIndex(os, i,getLongAtIndex(is, i) + MemoryAccess.getLongAtIndex(os, i));\n+            setLongAtIndex(os, i+1,getLongAtIndex(is, i+1) + getLongAtIndex(os, i+1));\n+            setLongAtIndex(os, i+2,getLongAtIndex(is, i+2) + getLongAtIndex(os, i+2));\n+            setLongAtIndex(os, i+3,getLongAtIndex(is, i+3) + getLongAtIndex(os, i+3));\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/UnrolledAccess.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"}]}