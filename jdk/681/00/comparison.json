{"files":[{"patch":"@@ -2561,1 +2561,7 @@\n-\n+  if (!lp_exit->is_IfFalse()) {\n+    \/\/ The loop exit condition is (i <u limit) ==> (i >= 0 && i < limit).\n+    \/\/ We therefore can't add a single exit condition.\n+    return NULL;\n+  }\n+  \/\/ The loop exit condition is !(i <u limit) ==> (i < 0 || i >= limit).\n+  \/\/ Split out the exit condition (i < 0) for stride < 0 or (i >= limit) for stride > 0.\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,185 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8251535\n+ * @summary Tests partial peeling at unsigned tests.\n+ * @library \/test\/lib \/\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation\n+ *                   -XX:CompileCommand=compileonly,compiler.loopopts.TestPartialPeelAtUnsignedTests::test*\n+ *                   compiler.loopopts.TestPartialPeelAtUnsignedTests\n+ *\/\n+\n+package compiler.loopopts;\n+\n+import jdk.test.lib.Asserts;\n+\n+public class TestPartialPeelAtUnsignedTests {\n+    \/*\n+        loop:\n+            i += 1000;\n+            if (i <u 10_000) {\n+                goto exit;\n+            }\n+            goto loop;\n+        exit:\n+            return i;\n+\n+        C2 splits the unsigned loop exit check to have a\n+        signed exit test as cut point for partial peeling:\n+\n+        loop:\n+            i += 1000;\n+            if (i < 10_000) {   <-- This exit condition is wrong!\n+                goto exit;\n+            }\n+            if (i <u 10_000) {\n+                goto exit;\n+            }\n+            goto loop;\n+        exit:\n+            return i;\n+    *\/\n+    static int test1(int i) {\n+        boolean cond = false;\n+        while (!cond) {\n+            i += 1000;\n+            \/\/ Converted to (i <u 10_000)\n+            cond = (0 <= i) && (i < 10_000);\n+        }\n+        return i;\n+    }\n+\n+    \/*\n+        Same as test1 but with a negative stride.\n+\n+        loop:\n+            i -= 1000;\n+            if (i <u 10_000) {\n+                goto exit;\n+            }\n+            goto loop;\n+        exit:\n+            return i;\n+\n+        Converted to:\n+\n+        loop:\n+            i -= 1000;\n+            if (i >= 0) {   <-- This exit condition is wrong!\n+                goto exit;\n+            }\n+            if (i <u 10_000) {\n+                goto exit;\n+            }\n+            goto loop;\n+        exit:\n+            return i;\n+    *\/\n+    static int test2(int i) {\n+        boolean cond = false;\n+        while (!cond) {\n+            i -= 1000;\n+            cond = (0 <= i) && (i < 10_000);\n+        }\n+        return i;\n+    }\n+\n+    \/*\n+        Same as test1 but with inverted exit condition.\n+\n+        loop:\n+            i += 1000;\n+            if (i <u 10_000) {\n+                goto loop;\n+            }\n+            goto exit;\n+        exit:\n+            return i;\n+\n+        Converted to:\n+\n+        loop:\n+            i += 1000;\n+            if (!(i < 10_000)) {   <-- Correct exit condition.\n+                goto exit;\n+            }\n+            if (i <u 10_000) {\n+                goto loop;\n+            }\n+            goto exit;\n+        exit:\n+            return i;\n+    *\/\n+    static int test3(int i) {\n+        boolean cond = true;\n+        while (cond) {\n+            i += 1000;\n+            cond = (0 <= i) && (i < 10_000);\n+        }\n+        return i;\n+    }\n+\n+    \/*\n+        Same as test2 but with inverted exit condition.\n+\n+        loop:\n+            i -= 1000;\n+            if (i <u 10_000) {\n+                goto loop;\n+            }\n+            goto exit;\n+        exit:\n+            return i;\n+\n+        Converted to:\n+\n+        loop:\n+            i -= 1000;\n+            if (!(i >= 0)) {   <-- Correct exit condition.\n+                goto exit;\n+            }\n+            if (i <u 10_000) {\n+                goto loop;\n+            }\n+            goto exit;\n+        exit:\n+            return i;\n+    *\/\n+    static int test4(int i) {\n+        boolean cond = true;\n+        while (cond) {\n+            i -= 1000;\n+            cond = (0 <= i) && (i < 10_000);\n+        }\n+        return i;\n+    }\n+\n+    public static void main(String[] args) {\n+        Asserts.assertEQ(test1(10_000), 704);\n+        Asserts.assertEQ(test2(-10_000), 9296);\n+        Asserts.assertEQ(test3(0), 10000);\n+        Asserts.assertEQ(test4(9999), -1);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestPartialPeelAtUnsignedTests.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"added"}]}