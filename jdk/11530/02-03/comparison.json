{"files":[{"patch":"@@ -254,1 +254,1 @@\n-  MutexLocker ml(&_lock, Mutex::_no_safepoint_check_flag);\n+  assert(JavaThread::current() == _jt, \"This code is not thread safe\");\n@@ -259,1 +259,1 @@\n-  MutexLocker ml(&_lock, Mutex::_no_safepoint_check_flag);\n+  assert(JavaThread::current() == _jt, \"This code is not thread safe\");\n@@ -298,11 +298,1 @@\n-  _lock.lock_without_safepoint_check();\n-  if (_linked_watermarks.is_empty()) {\n-    _lock.unlock();\n-    return;\n-  }\n-  ResourceMark rm;\n-  GrowableArray<StackWatermark*> watermarks(_linked_watermarks.length());\n-  for (StackWatermark* watermark : _linked_watermarks) {\n-    watermarks.push(watermark);\n-  }\n-  _lock.unlock();\n+  assert(JavaThread::current() == _jt, \"This code is not thread safe\");\n@@ -310,4 +300,2 @@\n-  \/\/ finish_processing must be called without the lock held, so we\n-  \/\/ copy the growable array to a temporary snapshot of the list, so\n-  \/\/ we can poke said watermarks without holding the lock\n-  for (StackWatermark* watermark : watermarks) {\n+  \/\/ Finish processing all linked stack watermarks\n+  for (StackWatermark* watermark : _linked_watermarks) {\n","filename":"src\/hotspot\/share\/runtime\/stackWatermark.cpp","additions":5,"deletions":17,"binary":false,"changes":22,"status":"modified"}]}