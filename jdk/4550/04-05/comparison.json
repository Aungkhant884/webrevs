{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.text.SimpleDateFormat;\n@@ -36,0 +37,1 @@\n+import java.util.Date;\n@@ -274,2 +276,2 @@\n-        if (filename == null) {\n-            return null;\n+        if (filename == null || filename.indexOf('%') == -1) {\n+            return filename;\n@@ -278,1 +280,2 @@\n-        String pid = JVM.getJVM().getPid();\n+        String pid = null;\n+        String time = null;\n@@ -285,1 +288,1 @@\n-                    sb.append(c);\n+                    sb.append('%');\n@@ -288,0 +291,3 @@\n+                    if (pid == null) {\n+                      pid = JVM.getJVM().getPid();\n+                    }\n@@ -290,0 +296,6 @@\n+                } else if (nc == 't') {\n+                   if (time == null) {\n+                       time = new SimpleDateFormat(\"yyyy-MM-dd_HH-mm-ss\").format(new Date());\n+                   }\n+                   sb.append(time);\n+                   i++;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/AbstractDCmd.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Iterator;\n@@ -121,0 +122,12 @@\n+\n+    public static String readFilename(OutputAnalyzer output) throws Exception {\n+        Iterator<String> it = output.asLines().iterator();\n+        while (it.hasNext()) {\n+            String line = it.next();\n+            if (line.contains(\"written to\")) {\n+                line = it.next(); \/\/ blank line\n+                return it.next();\n+            }\n+        }\n+        throw new Exception(\"Could not find filename of dumped recording.\");\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/JcmdHelper.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -30,0 +32,1 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -37,1 +40,1 @@\n- * @run main\/othervm -XX:StartFlightRecording=name=test,filename=output_%p.jfr jdk.jfr.jcmd.TestFilenameExpansion\n+ * @run main\/othervm jdk.jfr.jcmd.TestFilenameExpansion\n@@ -43,0 +46,2 @@\n+        String name = \"output_%p_%t_%%.jfr\";\n+        String pattern = \"output_\" + pid + \"_\" + \"\\\\d{4}-\\\\d{2}-\\\\d{2}_\\\\d{2}-\\\\d{2}-\\\\d{2}\" + \"_%\\\\.jfr\";\n@@ -44,18 +49,0 @@\n-        JcmdHelper.jcmd(\"JFR.stop name=test\");\n-        checkFileAndDelete(\"output_\" + pid + \".jfr\");\n-\n-        testJcmd(\"output.jfr\", \"output.jfr\");\n-        testJcmd(\"output_%p.jfr\", \"output_\" + pid + \".jfr\");\n-        testJcmd(\"%p_output_%p.jfr\", pid + \"_output_\" + pid + \".jfr\");\n-        testJcmd(\"%%_output_%p.jfr\", \"%_output_\" + pid + \".jfr\");\n-        testJcmd(\"%a_output_%%\", \"%a_output_%\");\n-    }\n-\n-    private static void testJcmd(String name, String finalName) throws Exception {\n-        \/\/ set when JFR.start\n-        JcmdHelper.jcmd(\"JFR.start name=test filename=\" + name);\n-        JcmdHelper.jcmd(\"JFR.dump name=test\");\n-        checkFileAndDelete(finalName);\n-        JcmdHelper.jcmd(\"JFR.stop name=test\");\n-\n-        \/\/ set when JFR.dump\n@@ -63,11 +50,1 @@\n-        JcmdHelper.jcmd(\"JFR.dump name=test filename=\" + name);\n-        checkFileAndDelete(finalName);\n-        JcmdHelper.jcmd(\"JFR.stop name=test\");\n-\n-        \/\/ set when JFR.stop\n-        JcmdHelper.jcmd(\"JFR.start name=test\");\n-        JcmdHelper.jcmd(\"JFR.stop name=test filename=\" + name);\n-        checkFileAndDelete(finalName);\n-    }\n-\n-    private static void checkFileAndDelete(String filename) {\n+        String filename = JcmdHelper.readFilename(JcmdHelper.jcmd(\"JFR.dump name=test filename=\" + name));\n@@ -77,2 +54,1 @@\n-        Asserts.assertTrue(file.delete(), \"Delete \" + file.getAbsolutePath() + \" failed\");\n-        Asserts.assertFalse(file.exists(), file.getAbsolutePath() + \" should be deleted\");\n+        Asserts.assertTrue(Pattern.compile(pattern).matcher(filename).find());\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestFilenameExpansion.java","additions":8,"deletions":32,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.Iterator;\n@@ -63,1 +62,1 @@\n-        verifyFile(readFilename(output), null);\n+        verifyFile(JcmdHelper.readFilename(output), null);\n@@ -68,1 +67,1 @@\n-        verifyFile(readFilename(output), r.getId());\n+        verifyFile(JcmdHelper.readFilename(output), r.getId());\n@@ -74,1 +73,1 @@\n-        String filename = readFilename(output);\n+        String filename = JcmdHelper.readFilename(output);\n@@ -82,1 +81,1 @@\n-        String filename = readFilename(output);\n+        String filename = JcmdHelper.readFilename(output);\n@@ -101,12 +100,0 @@\n-\n-    private static String readFilename(OutputAnalyzer output) throws Exception {\n-        Iterator<String> it = output.asLines().iterator();\n-        while (it.hasNext()) {\n-            String line = it.next();\n-            if (line.contains(\"written to\")) {\n-                line = it.next(); \/\/ blank line\n-                return it.next();\n-            }\n-        }\n-        throw new Exception(\"Could not find filename of dumped recording.\");\n-    }\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestJcmdDumpGeneratedFilename.java","additions":4,"deletions":17,"binary":false,"changes":21,"status":"modified"}]}