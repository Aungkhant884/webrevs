{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.text.SimpleDateFormat;\n@@ -36,0 +37,1 @@\n+import java.util.Date;\n@@ -194,1 +196,1 @@\n-        currentLine.append(String.format(s, args));\n+        currentLine.append(args != null && args.length > 0 ? String.format(s, args) : s);\n@@ -272,0 +274,37 @@\n+\n+    static String expandFilename(String filename) {\n+        if (filename == null || filename.indexOf('%') == -1) {\n+            return filename;\n+        }\n+\n+        String pid = null;\n+        String time = null;\n+        StringBuilder sb = new StringBuilder();\n+        for (int i = 0; i < filename.length(); i++) {\n+            char c = filename.charAt(i);\n+            if (c == '%' && i < filename.length() - 1) {\n+                char nc = filename.charAt(i + 1);\n+                if (nc == '%') { \/\/ %% ==> %\n+                    sb.append('%');\n+                    i++;\n+                } else if (nc == 'p') {\n+                    if (pid == null) {\n+                      pid = JVM.getJVM().getPid();\n+                    }\n+                    sb.append(pid);\n+                    i++;\n+                } else if (nc == 't') {\n+                   if (time == null) {\n+                       time = new SimpleDateFormat(\"yyyy-MM-dd_HH-mm-ss\").format(new Date());\n+                   }\n+                   sb.append(time);\n+                   i++;\n+                } else {\n+                    sb.append('%');\n+                }\n+            } else {\n+                sb.append(c);\n+            }\n+        }\n+        return sb.toString();\n+    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/AbstractDCmd.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-        String filename = parser.getOption(\"filename\");\n+        String filename = expandFilename(parser.getOption(\"filename\"));\n@@ -230,1 +230,2 @@\n-                                 dumped. If no filename is given, a filename is generated from the PID\n+                                 dumped. The string '%%p' in the filename will be replaced with the\n+                                 PID. If no filename is given, a filename is generated from the PID\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/DCmdDump.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-        String path = parser.getOption(\"filename\");\n+        String path = expandFilename(parser.getOption(\"filename\"));\n@@ -335,2 +335,3 @@\n-                                 written when the recording is stopped. If no filename is given, a\n-                                 filename is generated from the PID and the current date and is\n+                                 written when the recording is stopped. The string '%%p' in the\n+                                 filename will be replaced with the PID. If no filename is given,\n+                                 a filename is generated from the PID and the current date and is\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/DCmdStart.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        String filename = parser.getOption(\"filename\");\n+        String filename = expandFilename(parser.getOption(\"filename\"));\n@@ -79,2 +79,3 @@\n-                           recording is stopped. If no path is provided, the data from the recording\n-                           is discarded. (STRING, no default value)\n+                           recording is stopped. The string '%%p' in the filename will be replaced\n+                           with the PID. If no path is provided, the data from the recording is\n+                           discarded. (STRING, no default value)\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/DCmdStop.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Iterator;\n@@ -121,0 +122,12 @@\n+\n+    public static String readFilename(OutputAnalyzer output) throws Exception {\n+        Iterator<String> it = output.asLines().iterator();\n+        while (it.hasNext()) {\n+            String line = it.next();\n+            if (line.contains(\"written to\")) {\n+                line = it.next(); \/\/ blank line\n+                return it.next();\n+            }\n+        }\n+        throw new Exception(\"Could not find filename of dumped recording.\");\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/JcmdHelper.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2021, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.jcmd;\n+\n+import java.io.File;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.jfr.FileHelper;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+\/**\n+ * @test\n+ * @summary The test verifies JFR.start\/dump\/stop commands\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main\/othervm jdk.jfr.jcmd.TestFilenameExpansion\n+ *\/\n+public class TestFilenameExpansion {\n+\n+    public static void main(String[] args) throws Exception {\n+        String pid = Long.toString(ProcessHandle.current().pid());\n+        String name = \"output_%p_%t_%%.jfr\";\n+        String pattern = \"output_\" + pid + \"_\" + \"\\\\d{4}-\\\\d{2}-\\\\d{2}_\\\\d{2}-\\\\d{2}-\\\\d{2}\" + \"_%\\\\.jfr\";\n+\n+        JcmdHelper.jcmd(\"JFR.start name=test\");\n+        String filename = JcmdHelper.readFilename(JcmdHelper.jcmd(\"JFR.dump name=test filename=\" + name));\n+        File file = new File(filename);\n+        Asserts.assertTrue(file.exists(), file.getAbsolutePath() + \" does not exist\");\n+        Asserts.assertTrue(file.isFile(), file.getAbsolutePath() + \" is not a file\");\n+        Asserts.assertTrue(Pattern.compile(pattern).matcher(filename).find());\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestFilenameExpansion.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.Iterator;\n@@ -63,1 +62,1 @@\n-        verifyFile(readFilename(output), null);\n+        verifyFile(JcmdHelper.readFilename(output), null);\n@@ -68,1 +67,1 @@\n-        verifyFile(readFilename(output), r.getId());\n+        verifyFile(JcmdHelper.readFilename(output), r.getId());\n@@ -74,1 +73,1 @@\n-        String filename = readFilename(output);\n+        String filename = JcmdHelper.readFilename(output);\n@@ -82,1 +81,1 @@\n-        String filename = readFilename(output);\n+        String filename = JcmdHelper.readFilename(output);\n@@ -101,12 +100,0 @@\n-\n-    private static String readFilename(OutputAnalyzer output) throws Exception {\n-        Iterator<String> it = output.asLines().iterator();\n-        while (it.hasNext()) {\n-            String line = it.next();\n-            if (line.contains(\"written to\")) {\n-                line = it.next(); \/\/ blank line\n-                return it.next();\n-            }\n-        }\n-        throw new Exception(\"Could not find filename of dumped recording.\");\n-    }\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestJcmdDumpGeneratedFilename.java","additions":4,"deletions":17,"binary":false,"changes":21,"status":"modified"}]}