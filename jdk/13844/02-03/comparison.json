{"files":[{"patch":"@@ -2292,2 +2292,0 @@\n-  Address src_klass_addr = Address(src, oopDesc::klass_offset_in_bytes());\n-  Address dst_klass_addr = Address(dst, oopDesc::klass_offset_in_bytes());\n@@ -2354,9 +2352,1 @@\n-      if (UseCompressedClassPointers) {\n-        __ load_nklass(tmp, src);\n-        __ load_nklass(rscratch1, dst);\n-        __ cmpw(tmp, rscratch1);\n-      } else {\n-        __ ldr(tmp, Address(src, oopDesc::klass_offset_in_bytes()));\n-        __ ldr(rscratch1, Address(dst, oopDesc::klass_offset_in_bytes()));\n-        __ cmp(tmp, rscratch1);\n-      }\n+      __ cmp_klass(src, dst, tmp, rscratch1);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -201,0 +201,5 @@\n+    if (UseCompactObjectHeaders) {\n+      \/\/ With compact headers, arrays have a 32bit alignment gap after the length.\n+      assert(arrayOopDesc::length_offset_in_bytes() == 8, \"check length offset\");\n+      strwl(zr, Address(obj, arrayOopDesc::length_offset_in_bytes() + sizeof(jint)));\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4408,0 +4408,12 @@\n+void MacroAssembler::cmp_klass(Register src, Register dst, Register tmp1, Register tmp2) {\n+  if (UseCompressedClassPointers) {\n+    load_nklass(tmp1, src);\n+    load_nklass(tmp2, dst);\n+    cmpw(tmp1, tmp2);\n+  } else {\n+    ldr(tmp1, Address(src, oopDesc::klass_offset_in_bytes()));\n+    ldr(tmp2, Address(dst, oopDesc::klass_offset_in_bytes()));\n+    cmp(tmp1, tmp2);\n+  }\n+}\n+\n@@ -4411,0 +4423,1 @@\n+  assert(!UseCompactObjectHeaders, \"not with compact headers\");\n@@ -4420,0 +4433,1 @@\n+  assert(!UseCompactObjectHeaders, \"not with compact headers\");\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -856,0 +856,1 @@\n+  void cmp_klass(Register src, Register dst, Register tmp1, Register tmp2);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3571,1 +3571,5 @@\n-    __ sub(r3, r3, oopDesc::base_offset_in_bytes());\n+    if (UseCompactObjectHeaders) {\n+      __ sub(r3, r3, oopDesc::base_offset_in_bytes());\n+    } else {\n+      __ sub(r3, r3, sizeof(oopDesc));\n+    }\n@@ -3576,5 +3580,9 @@\n-      __ add(r2, r0, oopDesc::base_offset_in_bytes());\n-      if (!is_aligned(oopDesc::base_offset_in_bytes(), BytesPerLong)) {\n-        __ strw(zr, Address(__ post(r2, BytesPerInt)));\n-        __ sub(r3, r3, BytesPerInt);\n-        __ cbz(r3, initialize_header);\n+      if (UseCompactObjectHeaders) {\n+        __ add(r2, r0, oopDesc::base_offset_in_bytes());\n+        if (!is_aligned(oopDesc::base_offset_in_bytes(), BytesPerLong)) {\n+          __ strw(zr, Address(__ post(r2, BytesPerInt)));\n+          __ sub(r3, r3, BytesPerInt);\n+          __ cbz(r3, initialize_header);\n+        }\n+      } else {\n+        __ add(r2, r0, sizeof(oopDesc));\n@@ -3597,0 +3605,1 @@\n+      __ store_klass_gap(r0, zr);  \/\/ zero klass gap for compressed oops\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -377,1 +377,1 @@\n-  \/\/ Uses t1 and t2 as temporary registers.\n+  \/\/ Uses tmp1 and tmp2 as temporary registers.\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}