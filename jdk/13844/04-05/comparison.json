{"files":[{"patch":"@@ -6132,0 +6132,10 @@\n+\n+void C2_MacroAssembler::load_nklass_compact(Register dst, Register obj) {\n+  C2LoadNKlassStub* stub = new (Compile::current()->comp_arena()) C2LoadNKlassStub(dst);\n+  Compile::current()->output()->add_stub(stub);\n+  movq(dst, Address(obj, oopDesc::mark_offset_in_bytes()));\n+  testb(dst, markWord::monitor_value);\n+  jcc(Assembler::notZero, stub->entry());\n+  bind(stub->continuation());\n+  shrq(dst, markWord::klass_shift);\n+}\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -491,0 +491,2 @@\n+  void load_nklass_compact(Register dst, Register obj);\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,5 +71,7 @@\n-  int shift               = UseCompactObjectHeaders ? markWord::hash_shift_compact          : markWord::hash_shift;\n-  uintptr_t mask          = UseCompactObjectHeaders ? markWord::hash_mask_compact           : markWord::hash_mask;\n-  uintptr_t mask_in_place = UseCompactObjectHeaders ? markWord::hash_mask_in_place_compact  : markWord::hash_mask_in_place;\n-  __ shrptr(result, shift);\n-  __ andptr(result, mask);\n+  if (UseCompactObjectHeaders) {\n+    __ shrptr(result, markWord::hash_shift_compact);\n+    __ andptr(result, markWord::hash_mask_compact);\n+  } else {\n+    __ shrptr(result, markWord::hash_shift);\n+    __ andptr(result, markWord::hash_mask);\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -4034,2 +4034,5 @@\n-    int header_size = align_up(oopDesc::base_offset_in_bytes(), BytesPerLong);\n-    __ decrement(rdx, header_size);\n+    if (UseCompactObjectHeaders) {\n+      __ decrement(rdx, align_up(oopDesc::base_offset_in_bytes(), BytesPerLong));\n+    } else {\n+      __ decrement(rdx, sizeof(oopDesc));\n+    }\n@@ -4057,2 +4060,8 @@\n-    __ movptr(Address(rax, rdx, Address::times_8, header_size - 1*oopSize), rcx);\n-    NOT_LP64(__ movptr(Address(rax, rdx, Address::times_8, header_size - 2*oopSize), rcx));\n+    if (UseCompactObjectHeaders) {\n+      int header_size = align_up(oopDesc::base_offset_in_bytes(), BytesPerLong);\n+      __ movptr(Address(rax, rdx, Address::times_8, header_size - 1*oopSize), rcx);\n+      NOT_LP64(__ movptr(Address(rax, rdx, Address::times_8, header_size - 2*oopSize), rcx));\n+    } else {\n+      __ movptr(Address(rax, rdx, Address::times_8, sizeof(oopDesc) - 1*oopSize), rcx);\n+      NOT_LP64(__ movptr(Address(rax, rdx, Address::times_8, sizeof(oopDesc) - 2*oopSize), rcx));\n+    }\n@@ -4068,1 +4077,1 @@\n-      __ movptr(Address(rax, oopDesc::mark_offset_in_bytes ()), rbx);\n+      __ movptr(Address(rax, oopDesc::mark_offset_in_bytes()), rbx);\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -5338,9 +5338,1 @@\n-    Register dst = $dst$$Register;\n-    Register obj = $mem$$base$$Register;\n-    C2LoadNKlassStub* stub = new (Compile::current()->comp_arena()) C2LoadNKlassStub(dst);\n-    Compile::current()->output()->add_stub(stub);\n-    __ movq(dst, Address(obj, oopDesc::mark_offset_in_bytes()));\n-    __ testb(dst, markWord::monitor_value);\n-    __ jcc(Assembler::notZero, stub->entry());\n-    __ bind(stub->continuation());\n-    __ shrq(dst, markWord::klass_shift);\n+    __ load_nklass_compact($dst$$Register, $mem$$base$$Register);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -175,0 +175,2 @@\n+  \/\/ Do the transform while we still have the header intact,\n+  \/\/ which might include important class information.\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"gc\/shared\/suspendibleThreadSet.hpp\"\n@@ -336,4 +335,0 @@\n-\n-    if (SuspendibleThreadSet::should_yield()) {\n-      SuspendibleThreadSet::yield();\n-    }\n@@ -411,1 +406,0 @@\n-    SuspendibleThreadSetJoiner sts_joiner;\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocate.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -675,1 +675,1 @@\n-  markWord prototype_header() const      {\n+  markWord prototype_header() const {\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -238,1 +238,1 @@\n-    uintptr_t tmp = value() & ~mask_in_place;\n+    uintptr_t tmp = value() & (~mask_in_place);\n","filename":"src\/hotspot\/share\/oops\/markWord.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -159,0 +159,2 @@\n+  \/\/ In this assert, we cannot safely access the Klass* with compact headers.\n+  assert(UseCompactObjectHeaders || obj->is_objArray(), \"must be object array\");\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -172,1 +172,0 @@\n-#ifdef _LP64\n@@ -175,3 +174,1 @@\n-  } else\n-#endif\n-  if (UseCompressedClassPointers) {\n+  } else if (UseCompressedClassPointers) {\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -106,1 +106,0 @@\n-#ifdef _LP64\n@@ -109,3 +108,3 @@\n-    } else\n-#endif\n-    return sizeof(oopDesc)\/HeapWordSize;\n+    } else {\n+      return sizeof(oopDesc)\/HeapWordSize;\n+    }\n@@ -130,1 +129,0 @@\n-  inline markWord forward_safe_mark() const;\n@@ -343,5 +341,6 @@\n-      \/\/ compiler to differentiate LoadNKlass. It is never used to actually\n-      \/\/ load the narrowKlass from the header.\n-      STATIC_ASSERT(markWord::klass_shift % 8 == 0);\n-      return mark_offset_in_bytes() + markWord::klass_shift \/ 8;\n-    } else\n+      \/\/ C2 compiler to differentiate LoadNKlass. It is never used to actually\n+      \/\/ load the narrowKlass from the header. Any offset that is not used by\n+      \/\/ anything else should suffice, here.\n+      STATIC_ASSERT(markWord::klass_shift % BitsPerByte == 0);\n+      return mark_offset_in_bytes() + markWord::klass_shift \/ BitsPerByte;\n+    }\n@@ -362,1 +361,1 @@\n-      assert(sizeof(markWord) == 8, \"sanity\");\n+      STATIC_ASSERT(sizeof(markWord) == 8);\n@@ -368,1 +367,3 @@\n-    return sizeof(oopDesc);\n+    {\n+      return sizeof(oopDesc);\n+    }\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -104,1 +104,0 @@\n-#ifdef _LP64\n@@ -106,1 +105,0 @@\n-    assert(UseCompressedClassPointers, \"expect compressed klass pointers\");\n@@ -108,3 +106,1 @@\n-  } else\n-#endif\n-  {\n+  } else {\n@@ -118,1 +114,0 @@\n-    assert(UseCompressedClassPointers, \"only with compressed class pointers\");\n@@ -133,1 +128,0 @@\n-    assert(UseCompressedClassPointers, \"only with compressed class pointers\");\n@@ -148,1 +142,0 @@\n-    assert(UseCompressedClassPointers, \"only with compressed class pointers\");\n@@ -260,15 +253,0 @@\n-markWord oopDesc::forward_safe_mark() const {\n-  markWord mrk = mark();\n-#ifdef _LP64\n-  if (UseCompactObjectHeaders) {\n-    if (mrk.is_marked()) {\n-      mrk = forwardee(mrk)->mark();\n-    }\n-    return mrk.actual_mark();\n-  } else\n-#endif\n-  {\n-    return mrk;\n-  }\n-}\n-\n@@ -278,1 +256,5 @@\n-    return forward_safe_mark().klass();\n+    markWord m = mark();\n+    if (m.is_marked()) {\n+      m = forwardee(m)->mark();\n+    }\n+    return m.actual_mark().klass();\n@@ -491,1 +473,1 @@\n-  \/\/ We cannot safely access the Klass* with compact headers here.\n+  \/\/ In this assert, we cannot safely access the Klass* with compact headers.\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":7,"deletions":25,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -231,0 +231,2 @@\n+  \/\/ In this assert, we cannot safely access the Klass* with compact headers.\n+  assert(UseCompactObjectHeaders || obj->is_typeArray(),\"must be a type array\");\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  \/\/ We cannot safely access the Klass* with compact headers.\n+  \/\/ In this assert, we cannot safely access the Klass* with compact headers.\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3124,3 +3124,4 @@\n-  if (UseCompactObjectHeaders && FLAG_IS_CMDLINE(UseCompressedClassPointers) && !UseCompressedClassPointers) {\n-    \/\/ If user specifies -UseCompressedClassPointers, disable compact headers with a warning.\n-    warning(\"Compact object headers require compressed class pointers. Disabling compact object headers.\");\n+  if (UseCompactObjectHeaders && !UseCompressedClassPointers) {\n+    if (FLAG_IS_CMDLINE(UseCompressedClassPointers)) {\n+      warning(\"Compact object headers require compressed class pointers. Disabling compact object headers.\");\n+    }\n@@ -3129,2 +3130,1 @@\n-\n-  if (UseCompactObjectHeaders && !UseHeavyMonitors) {\n+  if (UseCompactObjectHeaders && LockingMode == LM_LEGACY) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-                \"Use compact 64-bit object headers in 64-bit VM\")           \\\n+          \"Use compact 64-bit object headers in 64-bit VM\")                 \\\n@@ -1067,1 +1067,1 @@\n-  product(bool, UseHeavyMonitors, false,                                    \\\n+  develop(bool, UseHeavyMonitors, false,                                    \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-    } else  if (VM.getVM().isCompressedKlassPointersEnabled()) {\n+    } else if (VM.getVM().isCompressedKlassPointersEnabled()) {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Array.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,2 +95,2 @@\n-        assert(VM.getVM().isCompressedKlassPointersEnabled());\n-        return getKlass(getMark());\n+      assert(VM.getVM().isCompressedKlassPointersEnabled());\n+      return getKlass(getMark());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Oop.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,0 +58,2 @@\n+    private static final boolean COMPACT_HEADERS = Platform.is64bit() && WhiteBox.getWhiteBox().getBooleanVMFlag(\"UseCompactObjectHeaders\");\n+\n@@ -77,1 +79,1 @@\n-    private static final int OBJECT_SIZE_HIGH = (Platform.is64bit() && WhiteBox.getWhiteBox().getBooleanVMFlag(\"UseCompactObjectHeaders\")) ? 3266 : 3250;\n+    private static final int OBJECT_SIZE_HIGH = COMPACT_HEADERS ? 3266 : 3250;\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/plab\/TestPLABPromotion.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,1 +61,0 @@\n-  \/\/ @0:  8 byte header,  @8: int field\n","filename":"test\/hotspot\/jtreg\/runtime\/FieldLayout\/BaseOffsets.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -304,0 +304,1 @@\n+    private static final boolean COMPACT_HEADERS = Platform.is64bit() && WhiteBox.getWhiteBox().getBooleanVMFlag(\"UseCompactObjectHeaders\");\n@@ -376,1 +377,1 @@\n-        if (!Platform.is64bit() || WhiteBox.getWhiteBox().getBooleanVMFlag(\"UseCompactObjectHeaders\")) {\n+        if (!Platform.is64bit() || COMPACT_HEADERS) {\n","filename":"test\/jdk\/java\/lang\/instrument\/GetObjectSizeIntrinsicsTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}