{"files":[{"patch":"@@ -7360,11 +7360,1 @@\n-    Register dst = $dst$$Register;\n-    Register obj = $mem$$base$$Register;\n-    C2LoadNKlassStub* stub = new (Compile::current()->comp_arena()) C2LoadNKlassStub(dst);\n-    Compile::current()->output()->add_stub(stub);\n-    __ ldr(dst, Address(obj, oopDesc::mark_offset_in_bytes()));\n-    \/\/ NOTE: We can't use tbnz here, because the target is sometimes too far away\n-    \/\/ and cannot be encoded.\n-    __ tst(dst, markWord::monitor_value);\n-    __ br(Assembler::NE, stub->entry());\n-    __ bind(stub->continuation());\n-    __ lsr(dst, dst, markWord::klass_shift);\n+    __ load_nklass_compact($dst$$Register, $mem$$base$$Register);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2060,0 +2060,12 @@\n+\n+void C2_MacroAssembler::load_nklass_compact(Register dst, Register obj) {\n+  C2LoadNKlassStub* stub = new (Compile::current()->comp_arena()) C2LoadNKlassStub(dst);\n+  Compile::current()->output()->add_stub(stub);\n+  ldr(dst, Address(obj, oopDesc::mark_offset_in_bytes()));\n+  \/\/ NOTE: We can't use tbnz here, because the target is sometimes too far away\n+  \/\/ and cannot be encoded.\n+  tst(dst, markWord::monitor_value);\n+  br(Assembler::NE, stub->entry());\n+  bind(stub->continuation());\n+  lsr(dst, dst, markWord::klass_shift);\n+}\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -175,0 +175,2 @@\n+  void load_nklass_compact(Register dst, Register obj);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4319,2 +4319,2 @@\n-void MacroAssembler::load_nklass(Register dst, Register src) {\n-  assert(UseCompressedClassPointers, \"expects UseCompressedClassPointers\");\n+void MacroAssembler::load_nklass_compact(Register dst, Register src) {\n+  assert(UseCompactObjectHeaders, \"expects UseCompactObjectHeaders\");\n@@ -4342,6 +4342,5 @@\n-  if (UseCompressedClassPointers) {\n-    if (UseCompactObjectHeaders) {\n-      load_nklass(dst, src);\n-    } else {\n-      ldrw(dst, Address(src, oopDesc::klass_offset_in_bytes()));\n-    }\n+  if (UseCompactObjectHeaders) {\n+    load_nklass_compact(dst, src);\n+    decode_klass_not_null(dst);\n+  } else if (UseCompressedClassPointers) {\n+    ldrw(dst, Address(src, oopDesc::klass_offset_in_bytes()));\n@@ -4388,1 +4387,1 @@\n-      load_nklass(tmp, oop);\n+      load_nklass_compact(tmp, oop);\n@@ -4409,3 +4408,7 @@\n-  if (UseCompressedClassPointers) {\n-    load_nklass(tmp1, src);\n-    load_nklass(tmp2, dst);\n+  if (UseCompactObjectHeaders) {\n+    load_nklass_compact(tmp1, src);\n+    load_nklass_compact(tmp2, dst);\n+    cmpw(tmp1, tmp2);\n+  } else if (UseCompressedClassPointers) {\n+    ldrw(tmp1, Address(src, oopDesc::klass_offset_in_bytes()));\n+    ldrw(tmp2, Address(dst, oopDesc::klass_offset_in_bytes()));\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -852,1 +852,1 @@\n-  void load_nklass(Register dst, Register src);\n+  void load_nklass_compact(Register dst, Register src);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3541,2 +3541,1 @@\n-  } else\n-  if (UseCompressedClassPointers) {\n+  } else if (UseCompressedClassPointers) {\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -398,1 +398,3 @@\n-    HeapWord* test_addr = cast_from_oop<HeapWord*>(obj);\n+    \/\/ With compact headers, the objects can be one-word sized.\n+    size_t int_off = UseCompactObjectHeaders ? MIN2((size_t)1, obj->size() - 1) : 1;\n+    HeapWord* test_addr = cast_from_oop<HeapWord*>(obj) + int_off;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -250,3 +250,13 @@\n-  if (!new_obj->mark().is_marked()) {\n-    \/\/ Parallel GC claims with a release - so other threads might access this object\n-    \/\/ after claiming and they should see the \"completed\" object.\n+  if (UseCompactObjectHeaders) {\n+    \/\/ The copy above is not atomic. Make sure we have seen the proper mark\n+    \/\/ and re-install it into the copy, so that Klass* is guaranteed to be correct.\n+    markWord mark = o->mark_acquire();\n+    if (!mark.is_marked()) {\n+      new_obj->set_mark(mark);\n+      ContinuationGCSupport::transform_stack_chunk(new_obj);\n+    } else {\n+      \/\/ If we copied a mark-word that indicates 'forwarded' state, the object\n+      \/\/ installation would not succeed. We cannot access Klass* anymore either.\n+      \/\/ Skip the transformation.\n+    }\n+  } else {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionManager.inline.hpp","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -692,1 +692,1 @@\n-  product(bool, UseAltGCForwarding, false,                                  \\\n+  product(bool, UseAltGCForwarding, false, EXPERIMENTAL,                    \\\n","filename":"src\/hotspot\/share\/gc\/shared\/gc_globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -322,2 +322,0 @@\n-\n-  \/\/ Try to install the new forwarding pointer.\n@@ -325,5 +323,14 @@\n-  if (!copy_val->mark().is_marked()) {\n-    \/\/ If we copied a mark-word that indicates 'forwarded' state, then\n-    \/\/ another thread beat us, and this new copy will never be published.\n-    \/\/ ContinuationGCSupport would get a corrupt Klass* in that case,\n-    \/\/ so don't even attempt it.\n+\n+  if (UseCompactObjectHeaders) {\n+    \/\/ The copy above is not atomic. Make sure we have seen the proper mark\n+    \/\/ and re-install it into the copy, so that Klass* is guaranteed to be correct.\n+    markWord mark = copy_val->mark_acquire();\n+    if (!mark.is_marked()) {\n+      copy_val->set_mark(mark);\n+      ContinuationGCSupport::relativize_stack_chunk(copy_val);\n+    } else {\n+      \/\/ If we copied a mark-word that indicates 'forwarded' state, the object\n+      \/\/ installation would not succeed. We cannot access Klass* anymore either.\n+      \/\/ Skip the transformation.\n+    }\n+  } else {\n@@ -332,0 +339,2 @@\n+\n+  \/\/ Try to install the new forwarding pointer.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  \/\/ We cannot safely access the Klass* with compact headers.\n+  \/\/ In this assert, we cannot safely access the Klass* with compact headers.\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,3 +88,3 @@\n-  markWord hdr = mark();\n-  if (hdr.has_displaced_mark_helper()) {\n-    hdr = hdr.displaced_mark_helper();\n+  markWord m = mark();\n+  if (m.has_displaced_mark_helper()) {\n+    m = m.displaced_mark_helper();\n@@ -92,1 +92,1 @@\n-  return hdr;\n+  return m;\n@@ -114,2 +114,2 @@\n-    markWord header = resolve_mark();\n-    return header.klass();\n+    markWord m = resolve_mark();\n+    return m.klass();\n@@ -128,2 +128,2 @@\n-    markWord header = resolve_mark();\n-    return header.klass_or_null();\n+    markWord m = resolve_mark();\n+    return m.klass_or_null();\n@@ -142,3 +142,3 @@\n-    markWord header = mark_acquire();\n-    if (header.has_displaced_mark_helper()) {\n-      header = header.displaced_mark_helper();\n+    markWord m = mark_acquire();\n+    if (m.has_displaced_mark_helper()) {\n+      m = m.displaced_mark_helper();\n@@ -146,1 +146,1 @@\n-    return header.klass_or_null();\n+    return m.klass_or_null();\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"}]}