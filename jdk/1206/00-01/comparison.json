{"files":[{"patch":"@@ -241,1 +241,1 @@\n-     * RSA-PSS<\/a> signature method algorithm URI.\n+     * RSASSA-PSS<\/a> signature method algorithm URI.\n","filename":"src\/java.xml.crypto\/share\/classes\/javax\/xml\/crypto\/dsig\/SignatureMethod.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.security.spec.PSSParameterSpec;\n@@ -32,3 +35,3 @@\n- * XML Signature RSASSA-PSS Algorithm<\/a>. The parameters include a digest\n- * algorithm name, a salt length, and a trailer field. If the parameter is\n- * not specified, then a default parameter will be used.\n+ * XML Signature RSASSA-PSS Algorithm<\/a>. The parameters are expressed as a\n+ * {@link PSSParameterSpec} object encapsulated.\n+ * <p>\n@@ -65,0 +68,8 @@\n+ * @implSpec\n+ * If the parameter is not specified when using the RSASSA-PSS signature\n+ * algorithm, the default parameter is used, which uses SHA-256 as the\n+ * {@code DigestMethod}, MGF1 with SHA-256 as the\n+ * {@code MaskGenerationFunction}, 32 as {@code SaltLength}, and 1 as\n+ * {@code TrailerField}. This is equivalent to the parameter-less signature\n+ * method as defined by http:\/\/www.w3.org\/2007\/05\/xmldsig-more#sha256-rsa-MGF1.\n+ *\n@@ -71,37 +82,1 @@\n-    private int trailerField;\n-    private int saltLength;\n-    private String digestName;\n-    private String mgfDigestName;\n-\n-    \/**\n-     * Create a new {@code RSAPSSParameterSpec} object.\n-     *\n-     * @param trailerField the trailer field\n-     * @param saltLength the salt length\n-     * @param digestName the digest algorithm name\n-     * @param mgfDigestName the MGF1 digest algorithm name\n-     *\/\n-    public RSAPSSParameterSpec(int trailerField, int saltLength, String digestName, String mgfDigestName) {\n-        this.trailerField = trailerField;\n-        this.saltLength = saltLength;\n-        this.digestName = digestName;\n-        this.mgfDigestName = mgfDigestName;\n-    }\n-\n-    \/**\n-     * Returns the trailer field.\n-     *\n-     * @return the trailer field\n-     *\/\n-    public int getTrailerField() {\n-        return trailerField;\n-    }\n-\n-    \/**\n-     * Returns the salt length.\n-     *\n-     * @return the salt length\n-     *\/\n-    public int getSaltLength() {\n-        return saltLength;\n-    }\n+    private final PSSParameterSpec spec;\n@@ -110,1 +85,2 @@\n-     * Returns the digest algorithm name.\n+     * Create a new {@code RSAPSSParameterSpec} object with the specified\n+     * {@link PSSParameterSpec} object encapsulated.\n@@ -112,1 +88,1 @@\n-     * @return the digest algorithm name\n+     * @param spec the input {@code PSSParameterSpec}\n@@ -114,2 +90,2 @@\n-    public String getDigestName() {\n-        return digestName;\n+    public RSAPSSParameterSpec(PSSParameterSpec spec) {\n+        this.spec = Objects.requireNonNull(spec);\n@@ -119,1 +95,1 @@\n-     * Returns the MGF1 digest algorithm name.\n+     * Returns the encapsulated {@code PSSParameterSpec} object.\n@@ -121,1 +97,1 @@\n-     * @return the MGF1 digest algorithm name\n+     * @return the {@code PSSParameterSpec} object\n@@ -123,2 +99,2 @@\n-    public String getMGFDigestName() {\n-        return mgfDigestName;\n+    public PSSParameterSpec getPSSParameterSpec() {\n+        return spec;\n@@ -129,1 +105,5 @@\n-        return Objects.hash(digestName, mgfDigestName, saltLength, trailerField);\n+        return Objects.hash(\n+                spec.getDigestAlgorithm(),\n+                spec.getSaltLength(),\n+                spec.getTrailerField(),\n+                mgfParamsAsString(spec));\n@@ -143,5 +123,22 @@\n-        RSAPSSParameterSpec other = (RSAPSSParameterSpec)obj;\n-        return Objects.equals(digestName, other.digestName)\n-                && Objects.equals(mgfDigestName, other.mgfDigestName)\n-                && saltLength == other.saltLength\n-                && trailerField == other.trailerField;\n+        PSSParameterSpec other = ((RSAPSSParameterSpec)obj).spec;\n+        return Objects.equals(spec.getDigestAlgorithm(), other.getDigestAlgorithm())\n+                && Objects.equals(mgfParamsAsString(spec), mgfParamsAsString(other))\n+                && spec.getSaltLength() == other.getSaltLength()\n+                && spec.getTrailerField() == other.getTrailerField();\n+    }\n+\n+    private static String mgfParamsAsString(PSSParameterSpec spec) {\n+        String output = spec.getMGFAlgorithm() + \":\";\n+        AlgorithmParameterSpec mgfSpec = spec.getMGFParameters();\n+        if (mgfSpec instanceof MGF1ParameterSpec) {\n+            output += ((MGF1ParameterSpec)mgfSpec).getDigestAlgorithm();\n+        }\n+        return output;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"RSAPSSParameterSpec (dm:\" + spec.getDigestAlgorithm()\n+                + \", mgf:\" + mgfParamsAsString(spec)\n+                + \", sl:\" + spec.getSaltLength()\n+                + \", tf:\" + spec.getTrailerField() + \")\";\n","filename":"src\/java.xml.crypto\/share\/classes\/javax\/xml\/crypto\/dsig\/spec\/RSAPSSParameterSpec.java","additions":51,"deletions":54,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -66,4 +66,6 @@\n-    private int trailerField = 1;\n-    private int saltLength = 32;\n-    private String digestName = \"SHA-256\";\n-    private String mgfDigestName = \"SHA-256\";\n+    private static final RSAPSSParameterSpec DEFAULT_PSS_SPEC\n+            = new RSAPSSParameterSpec(new PSSParameterSpec(\n+                \"SHA-256\", \"MGF1\", new MGF1ParameterSpec(\"SHA-256\"),\n+                32, PSSParameterSpec.TRAILER_FIELD_BC));\n+\n+    private PSSParameterSpec spec;\n@@ -87,1 +89,1 @@\n-            params = getDefaultParameterSpec();\n+            params = DEFAULT_PSS_SPEC;\n@@ -105,1 +107,1 @@\n-            params = getDefaultParameterSpec();\n+            params = DEFAULT_PSS_SPEC;\n@@ -119,1 +121,1 @@\n-            if (!(params instanceof javax.xml.crypto.dsig.spec.RSAPSSParameterSpec)) {\n+            if (!(params instanceof RSAPSSParameterSpec)) {\n@@ -124,16 +126,2 @@\n-            if (((javax.xml.crypto.dsig.spec.RSAPSSParameterSpec)params).getTrailerField() > 0) {\n-                trailerField = ((javax.xml.crypto.dsig.spec.RSAPSSParameterSpec)params).getTrailerField();\n-                LOG.debug(\"Setting trailerField from RSAPSSParameterSpec to: {}\", trailerField);\n-            }\n-            if (((javax.xml.crypto.dsig.spec.RSAPSSParameterSpec)params).getSaltLength() > 0) {\n-                saltLength = ((javax.xml.crypto.dsig.spec.RSAPSSParameterSpec)params).getSaltLength();\n-                LOG.debug(\"Setting saltLength from RSAPSSParameterSpec to: {}\", saltLength);\n-            }\n-            if (((javax.xml.crypto.dsig.spec.RSAPSSParameterSpec)params).getDigestName() != null) {\n-                digestName = ((javax.xml.crypto.dsig.spec.RSAPSSParameterSpec)params).getDigestName();\n-                LOG.debug(\"Setting digestName from RSAPSSParameterSpec to: {}\", digestName);\n-            }\n-            if (((javax.xml.crypto.dsig.spec.RSAPSSParameterSpec)params).getMGFDigestName() != null) {\n-                mgfDigestName = ((javax.xml.crypto.dsig.spec.RSAPSSParameterSpec)params).getMGFDigestName();\n-                LOG.debug(\"Setting mgfDigestName from RSAPSSParameterSpec to: {}\", mgfDigestName);\n-            }\n+            spec = ((RSAPSSParameterSpec) params).getPSSParameterSpec();\n+            LOG.debug(\"Setting RSAPSSParameterSpec to: {}\", params.toString());\n@@ -158,1 +146,1 @@\n-            digestMethodElement.setAttributeNS(null, Constants._ATT_ALGORITHM, DigestAlgorithm.fromDigestAlgorithm(digestName).getXmlDigestAlgorithm());\n+            digestMethodElement.setAttributeNS(null, Constants._ATT_ALGORITHM, DigestAlgorithm.fromDigestAlgorithm(spec.getDigestAlgorithm()).getXmlDigestAlgorithm());\n@@ -160,1 +148,1 @@\n-            throw new MarshalException(\"Invalid digest name supplied: \" + digestName);\n+            throw new MarshalException(\"Invalid digest name supplied: \" + spec.getDigestAlgorithm());\n@@ -165,1 +153,1 @@\n-        Text saltLengthText = rsaPssParamsElement.getOwnerDocument().createTextNode(String.valueOf(saltLength));\n+        Text saltLengthText = rsaPssParamsElement.getOwnerDocument().createTextNode(String.valueOf(spec.getSaltLength()));\n@@ -170,0 +158,5 @@\n+        if (!spec.getMGFAlgorithm().equals(\"MGF1\")) {\n+            throw new MarshalException(\"Unsupported MGF algorithm supplied: \" + spec.getMGFAlgorithm());\n+        }\n+\n+        MGF1ParameterSpec mgfSpec = (MGF1ParameterSpec)spec.getMGFParameters();\n@@ -179,1 +172,1 @@\n-            mgfDigestMethodElement.setAttributeNS(null, Constants._ATT_ALGORITHM, DigestAlgorithm.fromDigestAlgorithm(mgfDigestName).getXmlDigestAlgorithm());\n+            mgfDigestMethodElement.setAttributeNS(null, Constants._ATT_ALGORITHM, DigestAlgorithm.fromDigestAlgorithm(mgfSpec.getDigestAlgorithm()).getXmlDigestAlgorithm());\n@@ -181,1 +174,1 @@\n-            throw new MarshalException(\"Invalid digest name supplied: \" + mgfDigestName);\n+            throw new MarshalException(\"Invalid digest name supplied: \" + mgfSpec.getDigestAlgorithm());\n@@ -188,1 +181,1 @@\n-        Text trailerFieldText = rsaPssParamsElement.getOwnerDocument().createTextNode(String.valueOf(trailerField));\n+        Text trailerFieldText = rsaPssParamsElement.getOwnerDocument().createTextNode(String.valueOf(spec.getTrailerField()));\n@@ -214,1 +207,1 @@\n-            DigestAlgorithm _digestAlgorithm = digestAlgorithmNode != null\n+            DigestAlgorithm digestAlgorithm = digestAlgorithmNode != null\n@@ -217,2 +210,2 @@\n-            int _trailerField = trailerFieldNode == null ? 1: Integer.parseInt(trailerFieldNode.getTextContent());\n-            int _saltLength = saltLengthNode == null ? _digestAlgorithm.getSaltLength() : Integer.parseInt(saltLengthNode.getTextContent());\n+            int trailerField = trailerFieldNode == null ? 1: Integer.parseInt(trailerFieldNode.getTextContent());\n+            int saltLength = saltLengthNode == null ? digestAlgorithm.getSaltLength() : Integer.parseInt(saltLengthNode.getTextContent());\n@@ -220,1 +213,1 @@\n-            DigestAlgorithm _mgfDigestAlgorithm = _digestAlgorithm;\n+            DigestAlgorithm mgfDigestAlgorithm = digestAlgorithm;\n@@ -228,1 +221,1 @@\n-                    _mgfDigestAlgorithm = validateDigestAlgorithm(mgfDigestAlgorithmNode.getAttribute(Constants._ATT_ALGORITHM));\n+                    mgfDigestAlgorithm = validateDigestAlgorithm(mgfDigestAlgorithmNode.getAttribute(Constants._ATT_ALGORITHM));\n@@ -232,4 +225,4 @@\n-            return new RSAPSSParameterSpec(\n-                    _trailerField, _saltLength,\n-                    _digestAlgorithm.getDigestAlgorithm(),\n-                    _mgfDigestAlgorithm.getDigestAlgorithm());\n+            return new RSAPSSParameterSpec(new PSSParameterSpec(\n+                    digestAlgorithm.getDigestAlgorithm(),\n+                    \"MGF1\", new MGF1ParameterSpec(mgfDigestAlgorithm.getDigestAlgorithm()),\n+                    saltLength, trailerField));\n@@ -237,1 +230,1 @@\n-        return getDefaultParameterSpec();\n+        return DEFAULT_PSS_SPEC;\n@@ -263,1 +256,1 @@\n-            signature.setParameter(new PSSParameterSpec(digestName, \"MGF1\", new MGF1ParameterSpec(mgfDigestName), saltLength, trailerField));\n+            signature.setParameter(spec);\n@@ -303,1 +296,1 @@\n-            signature.setParameter(new PSSParameterSpec(digestName, \"MGF1\", new MGF1ParameterSpec(mgfDigestName), saltLength, trailerField));\n+            signature.setParameter(spec);\n@@ -325,5 +318,0 @@\n-    private SignatureMethodParameterSpec getDefaultParameterSpec() {\n-        RSAPSSParameterSpec params = new RSAPSSParameterSpec(trailerField, saltLength, digestName, mgfDigestName);\n-        return params;\n-    }\n-\n","filename":"src\/java.xml.crypto\/share\/classes\/org\/jcp\/xml\/dsig\/internal\/dom\/DOMRSAPSSSignatureMethod.java","additions":34,"deletions":46,"binary":false,"changes":80,"status":"modified"}]}