{"files":[{"patch":"@@ -193,3 +193,1 @@\n-            @SuppressWarnings(\"deprecation\")\n-            SignatureAlgorithmSpi result = implementingClass.newInstance();\n-            return result;\n+            return JavaUtils.newInstanceWithEmptyConstructor(implementingClass);\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/algorithms\/SignatureAlgorithm.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -109,3 +109,1 @@\n-            @SuppressWarnings(\"deprecation\")\n-            CanonicalizerSpi tmp = implementingClass.newInstance();\n-            canonicalizerSpi = tmp;\n+            canonicalizerSpi = JavaUtils.newInstanceWithEmptyConstructor(implementingClass);\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/c14n\/Canonicalizer.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -168,2 +169,3 @@\n-    public static void register(String className)\n-        throws ClassNotFoundException, IllegalAccessException, InstantiationException {\n+    public static void register(String className) throws\n+            ClassNotFoundException, IllegalAccessException,\n+            InstantiationException, InvocationTargetException {\n@@ -171,1 +173,0 @@\n-        @SuppressWarnings(\"deprecation\")\n@@ -173,1 +174,1 @@\n-            (KeyResolverSpi) ClassLoaderUtils.loadClass(className, KeyResolver.class).newInstance();\n+            (KeyResolverSpi) JavaUtils.newInstanceWithEmptyConstructor(ClassLoaderUtils.loadClass(className, KeyResolver.class));\n@@ -195,3 +196,2 @@\n-            @SuppressWarnings(\"deprecation\")\n-            KeyResolverSpi tmp = (KeyResolverSpi) ClassLoaderUtils.loadClass(className, KeyResolver.class).newInstance();\n-            keyResolverSpi = tmp;\n+            keyResolverSpi = (KeyResolverSpi) JavaUtils.newInstanceWithEmptyConstructor(\n+                    ClassLoaderUtils.loadClass(className, KeyResolver.class));\n@@ -199,1 +199,1 @@\n-        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) {\n+        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | InvocationTargetException e) {\n@@ -252,1 +252,1 @@\n-        throws ClassNotFoundException, IllegalAccessException, InstantiationException {\n+        throws ClassNotFoundException, IllegalAccessException, InstantiationException, InvocationTargetException {\n@@ -256,3 +256,2 @@\n-            @SuppressWarnings(\"deprecation\")\n-            KeyResolverSpi keyResolverSpi =\n-                (KeyResolverSpi)ClassLoaderUtils.loadClass(className, KeyResolver.class).newInstance();\n+            KeyResolverSpi keyResolverSpi = (KeyResolverSpi)JavaUtils\n+                    .newInstanceWithEmptyConstructor(ClassLoaderUtils.loadClass(className, KeyResolver.class));\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/keys\/keyresolver\/KeyResolver.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -201,4 +202,2 @@\n-            @SuppressWarnings(\"deprecation\")\n-            TransformSpi tmp = transformSpiClass.newInstance();\n-            transformSpiHash.put(algorithmURI, tmp);\n-        } catch (InstantiationException | IllegalAccessException ex) {\n+            transformSpiHash.put(algorithmURI, JavaUtils.newInstanceWithEmptyConstructor(transformSpiClass));\n+        } catch (InstantiationException | IllegalAccessException | InvocationTargetException ex) {\n@@ -234,4 +233,2 @@\n-            @SuppressWarnings(\"deprecation\")\n-            TransformSpi tmp = implementingClass.newInstance();\n-            transformSpiHash.put(algorithmURI, tmp);\n-        } catch (InstantiationException | IllegalAccessException ex) {\n+            transformSpiHash.put(algorithmURI, JavaUtils.newInstanceWithEmptyConstructor(implementingClass));\n+        } catch (InstantiationException | IllegalAccessException | InvocationTargetException ex) {\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/transforms\/Transform.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -225,0 +226,19 @@\n+\n+    \/**\n+     * Creates a new instance of this class with the empty constructor.\n+     *\n+     * @param clazz the class\n+     * @param <T> the type of the class\n+     * @return the new instance\n+     * @throws InstantiationException\n+     * @throws IllegalAccessException\n+     *\/\n+    public static <T> T newInstanceWithEmptyConstructor(Class<T> clazz)\n+            throws InstantiationException, IllegalAccessException, InvocationTargetException {\n+        try {\n+            return clazz.getDeclaredConstructor().newInstance();\n+        } catch (NoSuchMethodException e) {\n+            throw (InstantiationException)\n+                    new InstantiationException(clazz.getName()).initCause(e);\n+        }\n+    }\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/JavaUtils.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -71,4 +72,3 @@\n-                                @SuppressWarnings(\"deprecation\")\n-                                XMLParser tmp = (XMLParser) ClassLoaderUtils.loadClass(xmlParserClass, XMLUtils.class).newInstance();\n-                                return tmp;\n-                            } catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) {\n+                                return (XMLParser) JavaUtils.newInstanceWithEmptyConstructor(\n+                                        ClassLoaderUtils.loadClass(xmlParserClass, XMLUtils.class));\n+                            } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | InvocationTargetException e) {\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/XMLUtils.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -64,1 +65,1 @@\n-    public static void register(String className) throws ClassNotFoundException, IllegalAccessException, InstantiationException {\n+    public static void register(String className) throws ClassNotFoundException, IllegalAccessException, InstantiationException, InvocationTargetException {\n@@ -69,3 +70,1 @@\n-        @SuppressWarnings(\"deprecation\")\n-        ResourceResolverSpi tmp = resourceResolverClass.newInstance();\n-        register(tmp, false);\n+        register(JavaUtils.newInstanceWithEmptyConstructor(resourceResolverClass), false);\n@@ -85,1 +84,1 @@\n-    public static void registerAtStart(String className) throws ClassNotFoundException, IllegalAccessException, InstantiationException {\n+    public static void registerAtStart(String className) throws ClassNotFoundException, IllegalAccessException, InstantiationException, InvocationTargetException {\n@@ -90,3 +89,1 @@\n-        @SuppressWarnings(\"deprecation\")\n-        ResourceResolverSpi tmp = resourceResolverClass.newInstance();\n-        register(tmp, true);\n+        register(JavaUtils.newInstanceWithEmptyConstructor(resourceResolverClass), true);\n@@ -123,1 +120,1 @@\n-        throws ClassNotFoundException, IllegalAccessException, InstantiationException {\n+        throws ClassNotFoundException, IllegalAccessException, InstantiationException, InvocationTargetException {\n@@ -128,3 +125,2 @@\n-            @SuppressWarnings(\"deprecation\")\n-            ResourceResolverSpi resourceResolverSpi =\n-                (ResourceResolverSpi)ClassLoaderUtils.loadClass(className, ResourceResolver.class).newInstance();\n+            ResourceResolverSpi resourceResolverSpi = (ResourceResolverSpi)JavaUtils\n+                    .newInstanceWithEmptyConstructor(ClassLoaderUtils.loadClass(className, ResourceResolver.class));\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/security\/utils\/resolver\/ResourceResolver.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml.crypto\/share\/classes\/javax\/xml\/crypto\/dsig\/SignatureMethod.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml.crypto\/share\/classes\/javax\/xml\/crypto\/dsig\/spec\/RSAPSSParameterSpec.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-  Copyright 1999-2019 The Apache Software Foundation\n+  Copyright 1999-2020 The Apache Software Foundation\n","filename":"src\/java.xml.crypto\/share\/legal\/santuario.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/GenerationTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}