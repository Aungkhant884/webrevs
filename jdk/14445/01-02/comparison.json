{"files":[{"patch":"@@ -34,0 +34,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -43,5 +44,5 @@\n-    const char* _pretty;\n-    bool        _feature_string;\n-    uint64_t    _feature_bit;\n-    bool        _enabled;\n-    int64_t     _value;\n+    const char* const _pretty;\n+    const bool        _feature_string;\n+    const uint64_t    _feature_bit;\n+    bool              _enabled;\n+    int64_t           _value;\n@@ -50,1 +51,1 @@\n-      _pretty(pretty), _feature_string(fstring), _feature_bit(0),\n+      _pretty(pretty), _feature_string(fstring), _feature_bit(nth_bit(bit)),\n@@ -52,1 +53,0 @@\n-        _feature_bit = (1ULL << bit);\n@@ -58,5 +58,5 @@\n-    const char* pretty()   { return _pretty; }\n-    uint64_t feature_bit() { return _feature_bit; }\n-    bool feature_string()  { return _feature_string; }\n-    bool enabled()         { return _enabled; }\n-    int64_t value()        { return _value; }\n+    const char* const pretty()   { return _pretty; }\n+    const uint64_t feature_bit() { return _feature_bit; }\n+    const bool feature_string()  { return _feature_string; }\n+    bool enabled()               { return _enabled; }\n+    int64_t value()              { return _value; }\n@@ -108,3 +108,3 @@\n-  \/\/ mvendorid Manufactory JEDEC\n-  \/\/ marchid   Manufactory prop.\n-  \/\/ mimpid    Manufactory prop.\n+  \/\/ mvendorid Manufactory JEDEC id.\n+  \/\/ marchid   Id for microarch. Mvendorid plus marchid uniquely identify the microarch.\n+  \/\/ mimpid    A unique encoding of the version of the processor implementation.\n@@ -112,1 +112,1 @@\n-  \/\/ satp mode SATP bitsm mbare, sv39, sv48, sv57, sv64\n+  \/\/ satp mode SATP bits (number of virtual addr bits) mbare, sv39, sv48, sv57, sv64\n@@ -186,1 +186,1 @@\n-  \/\/ Determine vector length iff ext_C\/UseRVC\n+  \/\/ Determine vector length iff ext_V\/UseRVV\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-#define HWCAP_ISA_I  (1ULL << ('I' - 'A'))\n+#define HWCAP_ISA_I  nth_bit('I' - 'A')\n@@ -44,1 +44,1 @@\n-#define HWCAP_ISA_M  (1ULL << ('M' - 'A'))\n+#define HWCAP_ISA_M  nth_bit('M' - 'A')\n@@ -48,1 +48,1 @@\n-#define HWCAP_ISA_A  (1ULL << ('A' - 'A'))\n+#define HWCAP_ISA_A  nth_bit('A' - 'A')\n@@ -52,1 +52,1 @@\n-#define HWCAP_ISA_F  (1ULL << ('F' - 'A'))\n+#define HWCAP_ISA_F  nth_bit('F' - 'A')\n@@ -56,1 +56,1 @@\n-#define HWCAP_ISA_D  (1ULL << ('D' - 'A'))\n+#define HWCAP_ISA_D  nth_bit('D' - 'A')\n@@ -60,1 +60,9 @@\n-#define HWCAP_ISA_C  (1ULL << ('C' - 'A'))\n+#define HWCAP_ISA_C  nth_bit('C' - 'A')\n+#endif\n+\n+#ifndef HWCAP_ISA_Q\n+#define HWCAP_ISA_Q  nth_bit('Q' - 'A')\n+#endif\n+\n+#ifndef HWCAP_ISA_H\n+#define HWCAP_ISA_H  nth_bit('H' - 'A')\n@@ -64,1 +72,1 @@\n-#define HWCAP_ISA_V  (1ULL << ('V' - 'A'))\n+#define HWCAP_ISA_V  nth_bit('V' - 'A')\n@@ -90,0 +98,2 @@\n+  assert(ext_Q.feature_bit() == HWCAP_ISA_Q, \"Bit for Q must follow Linux HWCAP\");\n+  assert(ext_H.feature_bit() == HWCAP_ISA_H, \"Bit for H must follow Linux HWCAP\");\n@@ -92,2 +102,3 @@\n-  RiscvHwprobe::probe_features();\n-  os_aux_features();\n+  if (!RiscvHwprobe::probe_features()) {\n+    os_aux_features();\n+  }\n@@ -99,1 +110,2 @@\n-    snprintf(buf, sizeof(buf), \"%s,\", uarch);\n+    \/\/ Use at max half the buffer.\n+    snprintf(buf, sizeof(buf)\/2, \"%s,\", uarch);\n@@ -213,0 +225,1 @@\n+  \/\/ Enable common features not dependent on marchid\/mimpid.\n@@ -239,0 +252,3 @@\n+\n+  \/\/ Features dependent on march\/mimpid.\n+  \/\/ I.e. march.value() and mimplid.value()\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/vm_version_linux_riscv.cpp","additions":26,"deletions":10,"binary":false,"changes":36,"status":"modified"}]}