{"files":[{"patch":"@@ -61,0 +61,1 @@\n+    static final String DOT_STR = \".\";\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xpath\/internal\/compiler\/Token.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @LastModified: Jan 2022\n+ * @LastModified: Apr 2022\n@@ -1664,1 +1664,1 @@\n-    if (tokenIs(Token.DOT))\n+    if (tokenIs(Token.DOT_STR))\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xpath\/internal\/compiler\/XPathParser.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package xpath;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+\/*\n+ * @test\n+ * @bug 8284920\n+ * @run testng\/othervm xpath.XPathExpTest\n+ * @summary Tests for various XPath Expressions.\n+ *\/\n+public class XPathExpTest {\n+\n+    private static final String XML =\n+              \"<root>\"\n+            + \"   <child id='1'>\"\n+            + \"       <grandchild id='1'\/>\"\n+            + \"       <grandchild id='2'\/>\"\n+            + \"   <\/child>\"\n+            + \"   <child id='2'>\"\n+            + \"       <grandchild id='3'\/>\"\n+            + \"       <grandchild id='4'\/>\"\n+            + \"   <\/child>\"\n+            + \"   <child id='3'>\"\n+            + \"       <grandchild id='5'\/>\"\n+            + \"       <grandchild id='6'\/>\"\n+            + \"   <\/child>\"\n+            + \" <\/root>\";\n+    private static final String PARENT_CHILD = \"child(2)\";\n+\n+    \/*\n+     * DataProvider for XPath expression test.\n+     * Data columns:\n+     *  see parameters of the test \"test\"\n+     *\/\n+    @DataProvider(name = \"xpathExp\")\n+    public Object[][] getXPathExpression() throws Exception {\n+\n+        return new Object[][]{\n+            \/\/ verifies various form of the parent axis\n+            {\"\/root\/child[@id='2']\", PARENT_CHILD},\n+            {\"\/\/grandchild[@id='3']\/parent::child\", PARENT_CHILD},\n+            {\"\/\/grandchild[@id='3']\/parent::node()\", PARENT_CHILD},\n+            {\"\/\/grandchild[@id='3']\/parent::*\", PARENT_CHILD},\n+            {\"\/\/grandchild[@id='3']\/parent::node()\/grandchild[@id='4']\/parent::node()\", PARENT_CHILD},\n+            {\"\/\/grandchild[@id='3']\/..\", PARENT_CHILD},\n+            {\"\/\/grandchild[@id='3']\/..\/grandchild[@id='4']\/..\", PARENT_CHILD},\n+            {\"\/\/grandchild[@id='3']\/parent::node()\/grandchild[@id='4']\/..\", PARENT_CHILD},\n+        };\n+    }\n+\n+    \/**\n+     * Verifies XPath expressions.\n+     *\n+     * @param exp XPath expression\n+     * @param expected expected result\n+     * @throws Exception\n+     *\/\n+    @Test(dataProvider = \"xpathExp\")\n+    void test(String exp, String expected) throws Exception {\n+        Document doc = getDoc(XML);\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+        NodeList nl = (NodeList) xPath.evaluate(exp, doc, XPathConstants.NODESET);\n+        Node child = nl.item(0);\n+        Assert.assertEquals(\n+                child.getNodeName() + \"(\" + child.getAttributes().item(0).getNodeValue() + \")\",\n+                expected);\n+    }\n+\n+    Document getDoc(String xml) throws Exception {\n+        DocumentBuilderFactory dfactory = DocumentBuilderFactory.newInstance();\n+        dfactory.setNamespaceAware(true);\n+        DocumentBuilder docBuilder = dfactory.newDocumentBuilder();\n+        InputStream is = new ByteArrayInputStream(xml.getBytes());\n+        return docBuilder.parse(is);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathExpTest.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"}]}