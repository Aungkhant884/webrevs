{"files":[{"patch":"@@ -36,1 +36,0 @@\n-import java.util.ArrayList;\n@@ -38,0 +37,1 @@\n+import java.util.concurrent.ConcurrentLinkedDeque;\n@@ -148,1 +148,1 @@\n-                rec.dispose();\n+                safeDispose(rec);\n@@ -153,1 +153,1 @@\n-                System.out.println(\"Exception while removing reference.\");\n+                e.printStackTrace(System.err);\n@@ -167,1 +167,1 @@\n-    private static ArrayList<DisposerRecord> deferredRecords = null;\n+    private static ConcurrentLinkedDeque<DisposerRecord> deferredRecords = new ConcurrentLinkedDeque<>();\n@@ -169,3 +169,5 @@\n-    private static void clearDeferredRecords() {\n-        if (deferredRecords == null || deferredRecords.isEmpty()) {\n-            return;\n+    private static void safeDispose(DisposerRecord rec) {\n+        try {\n+            rec.dispose();\n+        } catch (final Exception e) {\n+            e.printStackTrace(System.err);\n@@ -173,6 +175,7 @@\n-        for (int i=0;i<deferredRecords.size(); i++) {\n-            try {\n-                DisposerRecord rec = deferredRecords.get(i);\n-                rec.dispose();\n-            } catch (Exception e) {\n-                System.out.println(\"Exception while disposing deferred rec.\");\n+    }\n+\n+    private static void clearDeferredRecords() {\n+        while (!deferredRecords.isEmpty()) {\n+            final DisposerRecord rec = deferredRecords.pollFirst();\n+            if (rec != null) {\n+                safeDispose(rec);\n@@ -181,1 +184,0 @@\n-        deferredRecords.clear();\n@@ -214,1 +216,1 @@\n-                    rec.dispose();\n+                    safeDispose(rec);\n@@ -222,4 +224,1 @@\n-                    if (deferredRecords == null) {\n-                      deferredRecords = new ArrayList<DisposerRecord>(5);\n-                    }\n-                    deferredRecords.add(rec);\n+                    deferredRecords.offerLast(rec);\n@@ -229,1 +228,1 @@\n-            System.out.println(\"Exception while removing reference.\");\n+            e.printStackTrace(System.err);\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/Disposer.java","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2022, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/**\n+ * @test\n+ * @bug 8289208\n+ * @summary Verifies that Disposer does not report any unexpected exceptions.\n+ * @library \/test\/lib\n+ * @build DrawRotatedStringUsingRotatedFont\n+ * @run main DisposerTest\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public final class DisposerTest {\n+    public static void main(String args[]) throws Exception {\n+        \/\/ Run the test many times in order to increase the likelyhood of the race condition.\n+        for (int i = 0; i < 20; ++i) {\n+            OutputAnalyzer oa = ProcessTools.executeTestJvm(DrawRotatedStringUsingRotatedFont.class.getName());\n+            oa.stderrShouldBeEmpty().shouldHaveExitValue(0);\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Graphics2D\/DrawString\/DisposerTest.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2022, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import java.util.LinkedList;\n+import java.util.List;\n+import javax.swing.SwingUtilities;\n+\n+import sun.java2d.Disposer;\n+import sun.java2d.DisposerRecord;\n+\n+\/**\n+ * @test\n+ * @bug 8289208\n+ * @summary Verifies Disposer robustness in a multi-threaded environment.\n+ * @run main\/othervm -mx128m TestDisposerRace\n+ * @modules java.desktop\/sun.java2d\n+ *\/\n+public final class TestDisposerRace {\n+    private static volatile int recordsCount = 0;\n+    private static volatile boolean disposerDone = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        TestDisposerRace test = new TestDisposerRace();\n+        test.run();\n+\n+        checkRecordsCountIsSane();\n+        if (recordsCount > 0) {\n+            throw new RuntimeException(\"Some records (\" + recordsCount + \") have not been disposed\");\n+        }\n+    }\n+\n+    TestDisposerRace() {\n+        addRecordsToDisposer(30_000);\n+    }\n+\n+    void run() throws Exception {\n+        generateOOME();\n+        for (int i = 0; i < 1000; ++i) {\n+            SwingUtilities.invokeAndWait(Disposer::pollRemove);\n+            if (i % 10 == 0) {\n+                \/\/ Adding records will race with the diposer trying to remove them\n+                addRecordsToDisposer(1000);\n+            }\n+        }\n+\n+        Disposer.addObjectRecord(new Object(), new FinalDisposerRecord());\n+\n+        while (!disposerDone) {\n+             generateOOME();\n+        }\n+    }\n+\n+    private static void checkRecordsCountIsSane() {\n+        if (recordsCount < 0) {\n+            throw new RuntimeException(\"Disposed more records than were added\");\n+        }\n+    }\n+    private void addRecordsToDisposer(int count) {\n+        checkRecordsCountIsSane();\n+\n+        recordsCount += count;\n+\n+        MyDisposerRecord disposerRecord = new MyDisposerRecord();\n+        for (int i = 0; i < count; i++) {\n+            Disposer.addObjectRecord(new Object(), disposerRecord);\n+        }\n+    }\n+\n+    class MyDisposerRecord implements DisposerRecord {\n+        public void dispose() {\n+            recordsCount--;\n+        }\n+    }\n+\n+    class FinalDisposerRecord implements DisposerRecord {\n+        public void dispose() {\n+            disposerDone = true;\n+        }\n+    }\n+\n+    private static void giveGCAChance() {\n+        try {\n+            Thread.sleep(2000);\n+        } catch (InterruptedException ignored) {}\n+    }\n+\n+    private static void generateOOME() throws Exception {\n+        final List<Object> leak = new LinkedList<>();\n+        try {\n+            while (true) {\n+                leak.add(new byte[1024 * 1024]);\n+            }\n+        } catch (OutOfMemoryError ignored) {}\n+        giveGCAChance();\n+    }\n+}\n","filename":"test\/jdk\/sun\/java2d\/Disposer\/TestDisposerRace.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}