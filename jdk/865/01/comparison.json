{"files":[{"patch":"@@ -608,0 +608,4 @@\n+void InterpreterMacroAssembler::push_i_or_ptr(Register r) {\n+  push_i(r);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -142,0 +142,4 @@\n+\n+  \/\/ On x86, pushing a ptr or an int is semantically identical, but we\n+  \/\/ maintain a distinction for clarity and for making it easier to change\n+  \/\/ semantics in the future\n@@ -145,0 +149,5 @@\n+  \/\/ push_i_or_ptr is provided for when explicitly allowing either a ptr or\n+  \/\/ an int might have some advantage, while still documenting the fact that a\n+  \/\/ ptr might be pushed to the stack.\n+  void push_i_or_ptr(Register r = rax);\n+\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1764,3 +1764,0 @@\n-  aep = __ pc();     \/\/ atos entry point\n-      __ push_ptr();\n-      __ jmp(L);\n@@ -1785,2 +1782,2 @@\n-  bep = cep = sep = iep = __ pc();      \/\/ [bcsi]tos entry point\n-      __ push_i();\n+  aep = bep = cep = sep = iep = __ pc();      \/\/ [abcsi]tos entry point\n+      __ push_i_or_ptr();\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"}]}