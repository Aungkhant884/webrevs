{"files":[{"patch":"@@ -274,1 +274,1 @@\n-<p>As was discussed in the review for <a href=\"https:\/\/mail.openjdk.java.net\/pipermail\/hotspot-dev\/2019-September\/039487.html\">JDK-8230877<\/a>, <code>thread_local<\/code> allows dynamic initialization and destruction semantics. However, that support requires a run-time penalty for references to non-function-local <code>thread_local<\/code> variables defined in a different translation unit, even if they don't need dynamic initialization. Dynamic initialization and destruction of namespace-scoped thread local variables also has the same ordering problems as for ordinary namespace-scoped variables. So we avoid use of <code>thread_local<\/code> in general, limiting its use to only those cases where dynamic initialization and destruction are essential. See <a href=\"https:\/\/bugs.openjdk.java.net\/browse\/JDK-8282469\">JDK-8282469<\/a> for further discussion.<\/p>\n+<p>As was discussed in the review for <a href=\"https:\/\/mail.openjdk.java.net\/pipermail\/hotspot-dev\/2019-September\/039487.html\">JDK-8230877<\/a>, <code>thread_local<\/code> allows dynamic initialization and destruction semantics. However, that support requires a run-time penalty for references to non-function-local <code>thread_local<\/code> variables defined in a different translation unit, even if they don't need dynamic initialization. Dynamic initialization and destruction of non-local <code>thread_local<\/code> variables also has the same ordering problems as for ordinary non-local variables. So we avoid use of <code>thread_local<\/code> in general, limiting its use to only those cases where dynamic initialization or destruction are essential. See <a href=\"https:\/\/bugs.openjdk.java.net\/browse\/JDK-8282469\">JDK-8282469<\/a> for further discussion.<\/p>\n","filename":"doc\/hotspot-style.html","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -668,2 +668,2 @@\n-namespace-scoped thread local variables also has the same ordering\n-problems as for ordinary namespace-scoped variables. So we avoid use of\n+non-local `thread_local` variables also has the same ordering\n+problems as for ordinary non-local variables. So we avoid use of\n@@ -671,1 +671,1 @@\n-initialization and destruction are essential. See\n+initialization or destruction are essential. See\n","filename":"doc\/hotspot-style.md","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}