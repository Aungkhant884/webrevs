{"files":[{"patch":"@@ -520,1 +520,0 @@\n-java\/awt\/Mouse\/MouseComboBoxTest\/MouseComboBoxTest.java 8233564 macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-        robot.setAutoDelay(50);\n+        robot.setAutoDelay(100);\n@@ -60,0 +60,1 @@\n+        robot.delay(1000);\n@@ -119,0 +120,1 @@\n+        frame.setUndecorated(true);\n@@ -126,0 +128,1 @@\n+        window.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mouse\/MouseComboBoxTest\/MouseComboBoxTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/manual\/othervm TranslucentJAppletTest\n+ * @run main TranslucentJAppletTest\n","filename":"test\/jdk\/java\/awt\/Window\/TranslucentJAppletTest\/TranslucentJAppletTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,1 @@\n- * @library \/test\/lib\n- * @modules java.desktop\/sun.awt\n- * @build jdk.test.lib.Platform\n- * @run applet\/manual=yesno bug4449413.html\n+ * @run main\/manual bug4449413\n@@ -34,4 +31,55 @@\n-import javax.swing.*;\n-import javax.swing.plaf.metal.*;\n-import java.awt.event.*;\n-import java.awt.*;\n+import javax.swing.AbstractButton;\n+import javax.swing.BoxLayout;\n+import javax.swing.JButton;\n+import javax.swing.JCheckBox;\n+import javax.swing.JCheckBoxMenuItem;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JRadioButton;\n+import javax.swing.JRadioButtonMenuItem;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.plaf.metal.DefaultMetalTheme;\n+import javax.swing.plaf.metal.MetalLookAndFeel;\n+import javax.swing.plaf.metal.MetalTheme;\n+import javax.swing.plaf.metal.OceanTheme;\n+import java.awt.Color;\n+import java.awt.GridLayout;\n+import java.awt.Insets;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public class bug4449413 extends JFrame {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            There are eight controls with black backgrounds.\n+            Four enabled (on the left side) and four disabled (on the right side)\n+            checkboxes and radiobuttons.\n+\n+            1. If at least one of the controls' check marks is not visible:\n+               the test fails.\n+            \"\"\";\n+\n+    private static final String INSTRUCTIONS_ADDITIONS_METAL = \"\"\"\n+            \n+            2. Uncheck the \"Use Ocean Theme\" check box.\n+               If now at least one of the controls' check marks is not visible:\n+               the test fails.\n+            \"\"\";\n+\n+    private static final CountDownLatch latch = new CountDownLatch(1);\n+    private static volatile boolean failed = true;\n+\n+    private final MetalTheme defaultMetalTheme = new DefaultMetalTheme();\n+    private final MetalTheme oceanTheme = new OceanTheme();\n+\n+    private static bug4449413 instance;\n+\n+    boolean isMetalLookAndFeel() {\n+        return UIManager.getLookAndFeel() instanceof MetalLookAndFeel;\n+    }\n@@ -39,1 +87,5 @@\n-import jdk.test.lib.Platform;\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeLater(() -> {\n+            instance = new bug4449413();\n+            instance.createAndShowGUI();\n+        });\n@@ -41,1 +93,4 @@\n-public class bug4449413 extends JApplet {\n+        boolean timeoutHappened = !latch.await(2, TimeUnit.MINUTES);\n+        if (instance != null) {\n+            instance.dispose();\n+        }\n@@ -43,2 +98,1 @@\n-    @Override\n-    public void init() {\n+        System.out.println(\"Passed: \" + !failed);\n@@ -46,1 +100,4 @@\n-        try {\n+        if (timeoutHappened || failed) {\n+            throw new RuntimeException(\"Test failed!\");\n+        }\n+    }\n@@ -48,2 +105,9 @@\n-            if (Platform.isOSX()) {\n-                UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n+    private void createAndShowGUI() {\n+        setTitle(UIManager.getLookAndFeel().getClass().getName());\n+\n+        addComponentsToPane();\n+\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                latch.countDown();\n@@ -51,0 +115,20 @@\n+        });\n+\n+        setLocationRelativeTo(null);\n+        pack();\n+        setVisible(true);\n+    }\n+\n+    public void addComponentsToPane() {\n+        setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));\n+\n+        JPanel testedPanel = new JPanel();\n+        testedPanel.setLayout(new GridLayout(4, 6, 10, 15));\n+        for (int k = 0; k <= 3; k++) {\n+            for (int j = 1; j >= 0; j--) {\n+                AbstractButton b = createButton(j, k);\n+                testedPanel.add(b);\n+            }\n+        }\n+\n+        add(testedPanel);\n@@ -52,33 +136,8 @@\n-            final MetalTheme oceanTheme = (MetalTheme) sun.awt.AppContext.getAppContext().get(\"currentMetalTheme\");\n-\n-\n-            SwingUtilities.invokeAndWait(new Runnable() {\n-\n-                @Override\n-                public void run() {\n-                    getContentPane().setLayout(new FlowLayout());\n-                    final JPanel panel = new JPanel();\n-\n-                    JCheckBox box = new JCheckBox(\"Use Ocean theme\", true);\n-                    getContentPane().add(box);\n-                    box.addItemListener(new ItemListener() {\n-\n-                        @Override\n-                        public void itemStateChanged(ItemEvent e) {\n-                            if (e.getStateChange() == ItemEvent.SELECTED) {\n-                                MetalLookAndFeel.setCurrentTheme(oceanTheme);\n-                            } else {\n-                                MetalLookAndFeel.setCurrentTheme(new DefaultMetalTheme());\n-                            }\n-                            SwingUtilities.updateComponentTreeUI(panel);\n-                        }\n-                    });\n-\n-                    getContentPane().add(panel);\n-                    panel.setLayout(new GridLayout(4, 6, 10, 15));\n-                    for (int k = 0; k <= 3; k++) {\n-                        for (int j = 1; j >= 0; j--) {\n-                            AbstractButton b = createButton(j, k);\n-                            panel.add(b);\n-                        }\n-                    }\n+\n+        if (isMetalLookAndFeel()) {\n+            JCheckBox oceanThemeSwitch = new JCheckBox(\"Use Ocean theme\", true);\n+            oceanThemeSwitch.addItemListener(e -> {\n+                if (e.getStateChange() == ItemEvent.SELECTED) {\n+                    MetalLookAndFeel.setCurrentTheme(oceanTheme);\n+                } else {\n+                    MetalLookAndFeel.setCurrentTheme(defaultMetalTheme);\n@@ -86,0 +145,1 @@\n+                SwingUtilities.updateComponentTreeUI(testedPanel);\n@@ -88,2 +148,1 @@\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n+            add(oceanThemeSwitch);\n@@ -91,0 +150,30 @@\n+\n+        JTextArea instructionArea = new JTextArea(\n+                isMetalLookAndFeel()\n+                        ? INSTRUCTIONS + INSTRUCTIONS_ADDITIONS_METAL\n+                        : INSTRUCTIONS\n+                );\n+\n+        instructionArea.setEditable(false);\n+        instructionArea.setFocusable(false);\n+        instructionArea.setMargin(new Insets(10,10,10,10));\n+\n+        add(instructionArea);\n+\n+\n+        JButton passButton = new JButton(\"Pass\");\n+        JButton failButton = new JButton(\"Fail\");\n+\n+        ActionListener actionListener = e -> {\n+            failed = e.getSource() == failButton;\n+            latch.countDown();\n+        };\n+\n+        passButton.addActionListener(actionListener);\n+        failButton.addActionListener(actionListener);\n+\n+        JPanel passFailPanel = new JPanel();\n+        passFailPanel.add(passButton);\n+        passFailPanel.add(failButton);\n+\n+        add(passFailPanel);\n@@ -94,15 +183,9 @@\n-        AbstractButton b = null;\n-        switch (type) {\n-            case 0:\n-                b = new JRadioButton(\"RadioButton\");\n-                break;\n-            case 1:\n-                b = new JCheckBox(\"CheckBox\");\n-                break;\n-            case 2:\n-                b = new JRadioButtonMenuItem(\"RBMenuItem\");\n-                break;\n-            case 3:\n-                b = new JCheckBoxMenuItem(\"CBMenuItem\");\n-                break;\n-        }\n+        AbstractButton b = switch (type) {\n+            case 0 -> new JRadioButton(\"RadioButton\");\n+            case 1 -> new JCheckBox(\"CheckBox\");\n+            case 2 -> new JRadioButtonMenuItem(\"RBMenuItem\");\n+            case 3 -> new JCheckBoxMenuItem(\"CBMenuItem\");\n+            default -> throw new IllegalArgumentException(\"type should be in range of 0..3\");\n+        };\n+\n+        b.setOpaque(true);\n@@ -116,0 +199,1 @@\n+\n","filename":"test\/jdk\/javax\/swing\/JCheckBox\/4449413\/bug4449413.java","additions":150,"deletions":66,"binary":false,"changes":216,"status":"modified"}]}