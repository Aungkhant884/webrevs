{"files":[{"patch":"@@ -783,1 +783,1 @@\n-                    cf.complete(finisher.apply(subscriber));\n+                    cf.completeAsync(() -> finisher.apply(subscriber));\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ResponseSubscribers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,3 @@\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n@@ -267,2 +270,2 @@\n-    void testCollectionWithoutFinisheBlocking(String uri) throws Exception {\n-        System.out.printf(now() + \"testCollectionWithoutFinisheBlocking(%s) starting%n\", uri);\n+    void testCollectionWithoutFinisherBlocking(String uri) throws Exception {\n+        System.out.printf(now() + \"testCollectionWithoutFinisherBlocking(%s) starting%n\", uri);\n@@ -458,9 +461,29 @@\n-            client.sendAsync(request, BodyHandlers.fromSubscriber(BodySubscribers.ofInputStream(),\n-                            ins -> {\n-                                InputStream is = ins.getBody().toCompletableFuture().join();\n-                                return new String(uncheckedReadAllBytes(is), UTF_8);\n-                            }))\n-                    .thenApply(FlowAdapterSubscriberTest::assert200ResponseCode)\n-                    .thenApply(HttpResponse::body)\n-                    .thenAccept(body -> assertEquals(body, \"May the wind always be at your back.\"))\n-                    .join();\n+            var adaptee = BodySubscribers.ofInputStream();\n+            var exec = Executors.newSingleThreadExecutor();\n+\n+            \/\/ Use an executor to pull on the InputStream in order to reach the\n+            \/\/ point where the Subscriber gets completed and the finisher function\n+            \/\/ is called. If we didn't use an executor here, the finisher function\n+            \/\/ may never get called.\n+            var futureResult = exec.submit(() -> uncheckedReadAllBytes(\n+                    adaptee.getBody().toCompletableFuture().join()));\n+            Supplier<byte[]> bytes = () -> {\n+                try {\n+                    return futureResult.get();\n+                } catch (InterruptedException e) {\n+                    throw new CompletionException(e);\n+                } catch (ExecutionException e) {\n+                    throw new CompletionException(e.getCause());\n+                }\n+            };\n+\n+            try {\n+                var cf = client.sendAsync(request, BodyHandlers.fromSubscriber(adaptee,\n+                                ins -> new String(bytes.get(), UTF_8)))\n+                        .thenApply(FlowAdapterSubscriberTest::assert200ResponseCode)\n+                        .thenApply(HttpResponse::body)\n+                        .thenAccept(body -> assertEquals(body, \"May the wind always be at your back.\"))\n+                        .join();\n+            } finally {\n+                exec.close();\n+            }\n","filename":"test\/jdk\/java\/net\/httpclient\/FlowAdapterSubscriberTest.java","additions":34,"deletions":11,"binary":false,"changes":45,"status":"modified"}]}