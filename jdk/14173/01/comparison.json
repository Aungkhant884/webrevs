{"files":[{"patch":"@@ -74,2 +74,0 @@\n-compiler\/jvmci\/TestUncaughtErrorInCompileMethod.java 8308930 generic-all\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-import java.io.IOException;\n@@ -54,0 +53,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -58,4 +58,1 @@\n-    \/**\n-     * Name of file whose existence implies that a JVMCICompiler has been created.\n-     *\/\n-    static String tmpFileName = \"ErrorCompilerCreated.\" + System.nanoTime();\n+    static volatile boolean compilerCreationErrorOccurred;\n@@ -71,1 +68,0 @@\n-            File watch = new File(tmpFileName);\n@@ -73,5 +69,1 @@\n-            long start = System.currentTimeMillis();\n-\n-            \/\/ Use a 10 sec timeout to prevent endless loop if\n-            \/\/ JVMCI compiler creation fails\n-            while (System.currentTimeMillis() - start < 10_000) {\n+            while (!compilerCreationErrorOccurred) {\n@@ -79,5 +71,0 @@\n-                if (watch.exists()) {\n-                    System.err.println(\"saw \" + watch + \" - exiting loop\");\n-                    watch.delete();\n-                    break;\n-                }\n@@ -104,1 +91,10 @@\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        Process p = pb.start();\n+        OutputAnalyzer output = new OutputAnalyzer(p);\n+\n+        if (!waitForProcess(p)) {\n+            \/\/ The subprocess might not enter JVMCI compilation.\n+            \/\/ Print the subprocess output and pass the test in this case.\n+            System.out.println(output.getOutput());\n+            return;\n+        }\n+\n@@ -140,0 +136,25 @@\n+    \/**\n+     * @return true if {@code p} exited on its own, false if it had to be destroyed\n+     *\/\n+    private static boolean waitForProcess(Process p) {\n+        while (true) {\n+            try {\n+                boolean exited = p.waitFor(10, TimeUnit.SECONDS);\n+                if (!exited) {\n+                    System.out.println(\"destroying process: \" + p);\n+                    p.destroy();\n+                    Thread.sleep(1000);\n+                    while (p.isAlive()) {\n+                        System.out.println(\"forcibly destroying process: \" + p);\n+                        Thread.sleep(1000);\n+                        p.destroyForcibly();\n+                    }\n+                    return false;\n+                }\n+                return true;\n+            } catch (InterruptedException e) {\n+                e.printStackTrace(System.out);\n+            }\n+        }\n+    }\n+\n@@ -164,3 +185,2 @@\n-                    if (attempt == 10) {\n-                        \/\/ Delay the creation of the file that causes the\n-                        \/\/ loop in main to exit so that compilation failures\n+                    if (attempt >= 10) {\n+                        \/\/ Delay notifying the loop in main so that compilation failures\n@@ -168,8 +188,1 @@\n-                        File watch = new File(tmpFileName);\n-                        try {\n-                            System.err.println(\"creating \" + watch);\n-                            watch.createNewFile();\n-                            System.err.println(\"created \" + watch);\n-                        } catch (IOException ex) {\n-                            ex.printStackTrace();\n-                        }\n+                        compilerCreationErrorOccurred = true;\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestUncaughtErrorInCompileMethod.java","additions":41,"deletions":28,"binary":false,"changes":69,"status":"modified"}]}