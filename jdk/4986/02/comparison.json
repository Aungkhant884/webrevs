{"files":[{"patch":"@@ -64,2 +64,1 @@\n-\n-static int init_jvm(int argc, char **argv, bool disable_error_handling) {\n+static int init_jvm(int argc, char **argv, bool disable_error_handling, JavaVM** jvm_ptr) {\n@@ -93,1 +92,0 @@\n-  JavaVM* jvm;\n@@ -96,1 +94,1 @@\n-  int ret = JNI_CreateJavaVM(&jvm, (void**)&env, &args);\n+  int ret = JNI_CreateJavaVM(jvm_ptr, (void**)&env, &args);\n@@ -114,4 +112,1 @@\n-  bool _is_initialized;\n-\n-  void initialize_jvm() {\n-  }\n+  JavaVM* _jvm;\n@@ -121,1 +116,1 @@\n-    _argc(argc), _argv(argv), _is_initialized(false) {\n+    _argc(argc), _argv(argv), _jvm(nullptr) {\n@@ -126,1 +121,1 @@\n-    if (!_is_initialized && is_same_vm_test(name)) {\n+    if (_jvm == nullptr && is_same_vm_test(name)) {\n@@ -128,1 +123,1 @@\n-      int ret_val = init_jvm(_argc, _argv, false);\n+      int ret_val = init_jvm(_argc, _argv, false, &_jvm);\n@@ -130,1 +125,1 @@\n-        ADD_FAILURE() << \"Could not initialize the JVM\";\n+        ADD_FAILURE() << \"Could not initialize the JVM: \" << ret_val;\n@@ -133,1 +128,9 @@\n-      _is_initialized = true;\n+    }\n+  }\n+\n+  void destroy_jvm() {\n+    if (_jvm != NULL) {\n+      int ret = _jvm->DestroyJavaVM();\n+      if (ret != 0) {\n+        fprintf(stderr, \"Warning: DestroyJavaVM error %d\\n\", ret);\n+      }\n@@ -211,0 +214,12 @@\n+\/\/ This is generally run once for a set of tests. But if that set includes a vm_assert or\n+\/\/ other_vm test, then a new process is forked, and runUnitTestsInner is called, passing\n+\/\/ just that test as the one to be executed.\n+\/\/\n+\/\/ When we execute a vm_assert or other_vm test we create and initialize the JVM below.\n+\/\/\n+\/\/ A vm_assert test crashes the VM so no cleanup is needed, but for other_vm we call\n+\/\/ DestroyJavaVM via the TEST_OTHER_VM macro prior to the call to exit().\n+\/\/\n+\/\/ For same_vm tests we use an event listener to create the JVM when the first same_vm\n+\/\/ test is executed. Once all tests are completed we can then call DestroyJavaVM on that\n+\/\/ JVM directly.\n@@ -256,0 +271,3 @@\n+\n+  JVMInitializerListener* jvm_listener = NULL;\n+\n@@ -257,0 +275,1 @@\n+    JavaVM* jvm = NULL;\n@@ -259,1 +278,3 @@\n-    if (init_jvm(argc, argv, is_vmassert_test) != 0) {\n+    int ret;\n+    if ((ret = init_jvm(argc, argv, is_vmassert_test, &jvm)) != 0) {\n+      fprintf(stderr, \"ERROR: JNI_CreateJavaVM failed: %d\\n\", ret);\n@@ -264,1 +285,2 @@\n-    listeners.Append(new JVMInitializerListener(argc, argv));\n+    jvm_listener = new JVMInitializerListener(argc, argv);\n+    listeners.Append(jvm_listener);\n@@ -268,0 +290,5 @@\n+\n+  \/\/ vm_assert and other_vm tests never reach this point as they either abort, or call\n+  \/\/ exit() - see TEST_OTHER_VM macro. We will reach here when all same_vm tests have\n+  \/\/ completed for this run, so we can terminate the VM used for that case.\n+\n@@ -272,0 +299,4 @@\n+\n+  if (jvm_listener != NULL) {\n+    jvm_listener->destroy_jvm();\n+  }\n","filename":"test\/hotspot\/gtest\/gtestMain.cpp","additions":46,"deletions":15,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,0 +91,9 @@\n+    JavaVM* jvm[1];                                                 \\\n+    jsize nVMs = 0;                                                 \\\n+    JNI_GetCreatedJavaVMs(&jvm[0], 1, &nVMs);                       \\\n+    if (nVMs == 1) {                                                \\\n+      int ret = jvm[0]->DestroyJavaVM();                            \\\n+      if (ret != 0) {                                               \\\n+        fprintf(stderr, \"Warning: DestroyJavaVM error %d\\n\", ret);  \\\n+      }                                                             \\\n+    }                                                               \\\n","filename":"test\/hotspot\/gtest\/unittest.hpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}