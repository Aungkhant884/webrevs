{"files":[{"patch":"@@ -112,5 +112,1 @@\n-  bool _is_initialized;\n-  JavaVM* jvm;\n-\n-  void initialize_jvm() {\n-  }\n+  JavaVM* _jvm;\n@@ -120,1 +116,1 @@\n-    _argc(argc), _argv(argv), _is_initialized(false), jvm(NULL) {\n+    _argc(argc), _argv(argv), _jvm(nullptr) {\n@@ -125,1 +121,1 @@\n-    if (!_is_initialized && is_same_vm_test(name)) {\n+    if ( _jvm == nullptr && is_same_vm_test(name)) {\n@@ -127,1 +123,1 @@\n-      int ret_val = init_jvm(_argc, _argv, false, &jvm);\n+      int ret_val = init_jvm(_argc, _argv, false, &_jvm);\n@@ -129,1 +125,1 @@\n-        ADD_FAILURE() << \"Could not initialize the JVM\";\n+        ADD_FAILURE() << \"Could not initialize the JVM: \" << ret_val;\n@@ -132,1 +128,0 @@\n-      _is_initialized = true;\n@@ -137,2 +132,2 @@\n-    if (_is_initialized && jvm != NULL) {\n-      int ret = jvm->DestroyJavaVM();\n+    if (_jvm != NULL) {\n+      int ret = _jvm->DestroyJavaVM();\n@@ -219,2 +214,4 @@\n-\/\/ This is generally run once for a set of tests, but if we have vm_assert, or other_vm\n-\/\/ tests, a new process is forked and this will be called, for each of those tests.\n+\/\/ This is generally run once for a set of tests. But if that set includes a vm_assert or\n+\/\/ other_vm test, then a new process is forked, and runUnitTestsInner is called, passing\n+\/\/ just that test as the one to be executed.\n+\/\/\n@@ -222,0 +219,1 @@\n+\/\/\n@@ -224,0 +222,1 @@\n+\/\/\n@@ -279,1 +278,3 @@\n-    if (init_jvm(argc, argv, is_vmassert_test, &jvm) != 0) {\n+    int ret;\n+    if ((ret = init_jvm(argc, argv, is_vmassert_test, &jvm)) != 0) {\n+      fprintf(stderr, \"ERROR: JNI_CreateJavaVM failed: %d\\n\", ret);\n","filename":"test\/hotspot\/gtest\/gtestMain.cpp","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"}]}