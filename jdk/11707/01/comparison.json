{"files":[{"patch":"@@ -0,0 +1,198 @@\n+\/*\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8139581\n+ * @summary Verify that components are redrawn after \n+ * removal and addition to a container\n+ * @run main ComponentRedrawnTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Panel;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.MouseEvent;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.swing.JButton;\n+    \n+public class ComponentRedrawnTest {\n+\n+    private static Frame frame;\n+    private static Panel componentPanel;\n+    private static Button buttonRemove;\n+    private static Button buttonAdd;\n+    private static Button awtButton;\n+\n+    private static volatile Robot robot;\n+    private static volatile int x;\n+    private static volatile int y;\n+    private static AtomicInteger awtPainted = new AtomicInteger();\n+    private static AtomicInteger swingPainted = new AtomicInteger();\n+\n+    public static void main(String args[]) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> createGUI());\n+            runTest();\n+            System.out.println(\"Test Passed\");\n+        } finally {\n+            EventQueue.invokeAndWait(() -> dispose());\n+        }\n+    }\n+\n+    private static void createGUI() {\n+        frame = new Frame(\"ComponentRedrawnTest\");\n+        frame.setSize(350, 300);\n+        frame.setBackground(Color.red);\n+\n+        componentPanel = new Panel();\n+        componentPanel.setLayout(null);\n+        componentPanel.setBackground(Color.green);\n+\n+        awtButton = new Button(\"AWT Button\") {\n+            @Override\n+            public void paint(Graphics g) {\n+                super.paint(g);\n+                awtPainted.incrementAndGet();\n+            }\n+        };\n+\n+        awtButton.setBounds(0, 0, 330, 100);\n+        componentPanel.add(awtButton);\n+\n+        JButton swingButton = new JButton(\"Swing JButton\") {\n+            @Override\n+            public void paint(Graphics g) {\n+                super.paint(g);\n+                swingPainted.incrementAndGet();\n+            }\n+        };\n+\n+        swingButton.setBounds(0, 100, 330, 100);\n+        componentPanel.add(swingButton);\n+        frame.add(componentPanel, BorderLayout.CENTER);\n+        buttonRemove = new Button(\"remove\");\n+        buttonRemove.addActionListener(ae -> buttonClicked(ae));\n+\n+        buttonAdd = new Button(\"add\");\n+        buttonAdd.addActionListener(ae -> buttonClicked(ae));\n+\n+        Panel controlPanel = new Panel();\n+        controlPanel.setLayout(new BorderLayout());\n+        controlPanel.add(buttonRemove, BorderLayout.NORTH);\n+        controlPanel.add(buttonAdd, BorderLayout.SOUTH);\n+\n+        frame.add(controlPanel, BorderLayout.SOUTH);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void buttonClicked(ActionEvent ae) {\n+        if (ae.getSource() == buttonRemove) {\n+            frame.remove(componentPanel);\n+        } else if (ae.getSource() == buttonAdd) {\n+            frame.add(componentPanel);\n+        }\n+        frame.invalidate();\n+        frame.validate();\n+    }\n+\n+    private static void runTest() throws Exception {\n+        EventQueue.invokeAndWait(() -> createGUI());\n+        robot = new Robot();\n+        robot.setAutoDelay(500);\n+        awtPainted.set(0);\n+        swingPainted.set(0);\n+\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                x = awtButton.getLocationOnScreen().x\n+                    + awtButton.getSize().width \/ 2;\n+                y = awtButton.getLocationOnScreen().y\n+                    + awtButton.getSize().height \/ 2;\n+            });\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Unexpected Exception encountered: \" + e);\n+        }\n+\n+        robot.mouseMove(x, y);\n+        robot.waitForIdle();\n+        robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(MouseEvent.BUTTON1_DOWN_MASK);\n+\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                x = buttonRemove.getLocationOnScreen().x\n+                    + buttonRemove.getSize().width \/ 2;\n+                y = buttonRemove.getLocationOnScreen().y\n+                    + buttonRemove.getSize().height \/ 2;\n+            });\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Unexpected Exception encountered: \" + e);\n+        }\n+\n+        robot.mouseMove(x, y);\n+        robot.waitForIdle();\n+        robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(MouseEvent.BUTTON1_DOWN_MASK);\n+\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                x = buttonAdd.getLocationOnScreen().x\n+                    + buttonAdd.getSize().width \/ 2;\n+                y = buttonAdd.getLocationOnScreen().y\n+                    + buttonAdd.getSize().height \/ 2;\n+            });\n+\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Unexpected Exception encountered: \" + e);\n+        }\n+        robot.mouseMove(x, y);\n+        robot.waitForIdle();\n+        robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(MouseEvent.BUTTON1_DOWN_MASK);\n+\n+        if (awtPainted.get() == 0) {\n+            throw new RuntimeException(\"AWT button is not painted\");\n+        }\n+        if (swingPainted.get() == 0) {\n+            throw new RuntimeException(\"Swing button is not painted\");\n+        }\n+    }\n+\n+    private static void dispose() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/Component\/ComponentRedrawnTest.java","additions":198,"deletions":0,"binary":false,"changes":198,"status":"added"}]}