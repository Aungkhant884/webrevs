{"files":[{"patch":"@@ -31,9 +31,12 @@\n- * HttpContext represents a mapping between the root URI path of an application\n- * to a {@link HttpHandler} which is invoked to handle requests destined\n- * for that path on the associated HttpServer or HttpsServer.\n- * <p>\n- * HttpContext instances are created by the create methods in HttpServer\n- * and HttpsServer\n- * <p>\n- * A chain of {@link Filter} objects can be added to a HttpContext. All exchanges processed by the\n- * context can be pre- and post-processed by each Filter in the chain.\n+ * {@code HttpContext} represents a mapping between the root {@link java.net.URI}\n+ * path of an application to a {@link HttpHandler} which is invoked to handle\n+ * requests destined for that path on the associated {@link HttpServer} or\n+ * {@link HttpsServer}.\n+ *\n+ * <p> {@code HttpContext} instances are created by the create methods in\n+ * {@code HttpServer} and {@code HttpsServer}.\n+ *\n+ * <p> A chain of {@link Filter} objects can be added to a {@code HttpContext}.\n+ * All exchanges processed by the context can be pre- and post-processed by each\n+ * {@code Filter} in the chain.\n+ *\n@@ -47,1 +50,1 @@\n-    protected HttpContext () {\n+    protected HttpContext() {\n@@ -51,2 +54,3 @@\n-     * returns the handler for this context\n-     * @return the HttpHandler for this context\n+     * Returns the handler for this context.\n+     *\n+     * @return the {@code HttpHandler} for this context\n@@ -54,1 +58,1 @@\n-    public abstract HttpHandler getHandler () ;\n+    public abstract HttpHandler getHandler();\n@@ -58,3 +62,4 @@\n-     * @param h the handler to set for this context\n-     * @throws IllegalArgumentException if this context's handler is already set.\n-     * @throws NullPointerException if handler is <code>null<\/code>\n+     *\n+     * @param handler the handler to set for this context\n+     * @throws IllegalArgumentException if the context for this handler is already set.\n+     * @throws NullPointerException if handler is {@code null}\n@@ -62,1 +67,1 @@\n-    public abstract void setHandler (HttpHandler h) ;\n+    public abstract void setHandler(HttpHandler handler);\n@@ -65,2 +70,3 @@\n-     * returns the path this context was created with\n-     * @return this context's path\n+     * Returns the path this context was created with.\n+     *\n+     * @return the context of this path\n@@ -68,1 +74,1 @@\n-    public abstract String getPath() ;\n+    public abstract String getPath();\n@@ -71,2 +77,3 @@\n-     * returns the server this context was created with\n-     * @return this context's server\n+     * Returns the server this context was created with.\n+     *\n+     * @return the context of this server\n@@ -74,1 +81,1 @@\n-    public abstract HttpServer getServer () ;\n+    public abstract HttpServer getServer();\n@@ -77,6 +84,6 @@\n-     * returns a mutable Map, which can be used to pass\n-     * configuration and other data to Filter modules\n-     * and to the context's exchange handler.\n-     * <p>\n-     * Every attribute stored in this Map will be visible to\n-     * every HttpExchange processed by this context\n+     * Returns a mutable {@link Map}, which can be used to pass configuration\n+     * and other data to {@link Filter} modules and to the context's exchange\n+     * handler.\n+     *\n+     * <p> Every attribute stored in this {@code Map} will be visible to every\n+     * {@code HttpExchange} processed by this context.\n@@ -84,1 +91,1 @@\n-     * @return a map containing the attributes of this context\n+     * @return a {@code Map} containing the attributes of this context\n@@ -89,4 +96,5 @@\n-     * returns this context's list of Filters. This is the\n-     * actual list used by the server when dispatching requests\n-     * so modifications to this list immediately affect the\n-     * the handling of exchanges.\n+     * Returns this context's {@link List} of {@linkplain Filter filters}. This\n+     * is the actual list used by the server when dispatching requests so\n+     * modifications to this list immediately affect the the handling of exchanges.\n+     *\n+     * @return a {@link List} containing the filters of this context\n@@ -97,9 +105,9 @@\n-     * Sets the Authenticator for this HttpContext. Once an authenticator\n-     * is establised on a context, all client requests must be\n-     * authenticated, and the given object will be invoked to validate each\n-     * request. Each call to this method replaces any previous value set.\n-     * @param auth the authenticator to set. If <code>null<\/code> then any\n-     *         previously set authenticator is removed,\n-     *         and client authentication will no longer be required.\n-     * @return the previous Authenticator, if any set, or <code>null<\/code>\n-     *         otherwise.\n+     * Sets the {@link Authenticator} for this {@code HttpContext}. Once an authenticator\n+     * is establised on a context, all client requests must be authenticated,\n+     * and the given object will be invoked to validate each request. Each call\n+     * to this method replaces any previous value set.\n+     *\n+     * @param auth the {@code Authenticator} to set. If {@code null} then any previously\n+     *             set {@code Authenticator} is removed, and client authentication\n+     *             will no longer be required.\n+     * @return the previous {@code Authenticator}, if any set, or {@code null} otherwise.\n@@ -107,1 +115,1 @@\n-    public abstract Authenticator setAuthenticator (Authenticator auth);\n+    public abstract Authenticator setAuthenticator(Authenticator auth);\n@@ -110,1 +118,1 @@\n-     * Returns the currently set Authenticator for this context\n+     * Returns the currently set {@link Authenticator} for this context\n@@ -112,2 +120,3 @@\n-     * @return this HttpContext's Authenticator, or <code>null<\/code>\n-     *         if none is set.\n+     *\n+     * @return this {@linkplain HttpContext HttpContext's} {@code Authenticator},\n+     * or {@code null} if none is set\n@@ -115,1 +124,1 @@\n-    public abstract Authenticator getAuthenticator ();\n+    public abstract Authenticator getAuthenticator();\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/HttpContext.java","additions":57,"deletions":48,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ *\n@@ -40,0 +41,1 @@\n+     *\n@@ -41,2 +43,2 @@\n-     *      client and used to send the response\n-     * @throws NullPointerException if exchange is <code>null<\/code>\n+     *                 client and used to send the response\n+     * @throws NullPointerException if exchange is {@code null}\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/HttpHandler.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,4 +37,6 @@\n-     * creates a HttpPrincipal from the given username and realm\n-     * @param username The name of the user within the realm\n-     * @param realm The realm.\n-     * @throws NullPointerException if either username or realm are null\n+     * Creates a {@code HttpPrincipal} from the given {@code username} and\n+     * {@code realm}.\n+     *\n+     * @param username the name of the user within the realm\n+     * @param realm the realm for this user\n+     * @throws NullPointerException if either username or realm are {@code null}\n@@ -42,1 +44,1 @@\n-    public HttpPrincipal (String username, String realm) {\n+    public HttpPrincipal(String username, String realm) {\n@@ -51,4 +53,7 @@\n-     * Compares two HttpPrincipal. Returns <code>true<\/code>\n-     * if <i>another<\/i> is an instance of HttpPrincipal, and its\n-     * username and realm are equal to this object's username\n-     * and realm. Returns <code>false<\/code> otherwise.\n+     * Compare two instances of {@code HttpPrincipal}. Returns {@code true} if\n+     * <i>another<\/i> is an instance of {@code HttpPrincipal}, and its username\n+     * and realm are equal to this object's username and realm. Returns {@code false}\n+     * otherwise.\n+     *\n+     * @return {@code true} or {@code false} depending on whether objects are\n+     * equal or not\n@@ -66,2 +71,4 @@\n-     * returns the contents of this principal in the form\n-     * <i>realm:username<\/i>\n+     * Returns the contents of this principal in the form\n+     * <i>realm:username<\/i>.\n+     *\n+     * @return the contents of this principal in the form realm:username\n@@ -74,1 +81,1 @@\n-     * returns the username this object was created with.\n+     * Returns the {@code username} this object was created with.\n@@ -76,1 +83,1 @@\n-     * @return The name of the user assoicated with this object\n+     * @return the name of the user associated with this object\n@@ -83,1 +90,1 @@\n-     * returns the realm this object was created with.\n+     * Returns the {@code realm} this object was created with.\n@@ -85,1 +92,1 @@\n-     * @return The realm associated with this object\n+     * @return the realm associated with this object\n@@ -92,2 +99,4 @@\n-     * returns a hashcode for this HttpPrincipal. This is calculated\n-     * as <code>(getUsername()+getRealm().hashCode()<\/code>\n+     * Returns a hashcode for this {@code HttpPrincipal}. This is calculated\n+     * as <code>(getUsername()+getRealm().hashCode()<\/code>.\n+     *\n+     * @return the hashcode for this object\n@@ -100,1 +109,3 @@\n-     * returns the same string as getName()\n+     * Returns the same string as {@link #getName()}.\n+     *\n+     * @return the name associated with this object\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/HttpPrincipal.java","additions":29,"deletions":18,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -28,8 +28,2 @@\n-import java.net.*;\n-import java.io.*;\n-import java.nio.*;\n-import java.security.*;\n-import java.nio.channels.*;\n-import java.util.*;\n-import java.util.concurrent.*;\n-import javax.net.ssl.*;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLParameters;\n@@ -40,1 +34,1 @@\n- * https connection on a HttpsServer. Applications need to override\n+ * https connection on a {@link HttpsServer}. Applications need to override\n@@ -43,2 +37,2 @@\n- * <p>\n- * The following <a id=\"example\">example<\/a> shows how this may be done:\n+ *\n+ * <p> The following <a id=\"example\">example<\/a> shows how this may be done:\n@@ -68,0 +62,1 @@\n+ *\n@@ -75,3 +70,4 @@\n-     * Creates an Https configuration, with the given SSLContext.\n-     * @param context the SSLContext to use for this configurator\n-     * @throws NullPointerException if no SSLContext supplied\n+     * Creates a Https configuration, with the given {@link SSLContext}.\n+     *\n+     * @param context the {@code SSLContext} to use for this configurator\n+     * @throws NullPointerException if no {@code SSLContext} supplied\n@@ -79,1 +75,1 @@\n-    public HttpsConfigurator (SSLContext context) {\n+    public HttpsConfigurator(SSLContext context) {\n@@ -87,2 +83,3 @@\n-     * Returns the SSLContext for this HttpsConfigurator.\n-     * @return the SSLContext\n+     * Returns the {@link SSLContext} for this {@code HttpsConfigurator}.\n+     *\n+     * @return the {@code SSLContext}\n@@ -94,1 +91,0 @@\n-\/\/BEGIN_TIGER_EXCLUDE\n@@ -96,13 +92,14 @@\n-    * Called by the HttpsServer to configure the parameters\n-    * for a https connection currently being established.\n-    * The implementation of configure() must call\n-    * {@link HttpsParameters#setSSLParameters(SSLParameters)}\n-    * in order to set the SSL parameters for the connection.\n-    * <p>\n-    * The default implementation of this method uses the\n-    * SSLParameters returned from <p>\n-    * {@code getSSLContext().getDefaultSSLParameters()}\n-    * <p>\n-    * configure() may be overridden in order to modify this behavior.\n-    * See, the example <a href=\"#example\">above<\/a>.\n-    * @param params the HttpsParameters to be configured.\n+    * Called by the {@link HttpsServer} to configure the parameters for a https\n+    * connection currently being established. The implementation of configure()\n+    * must call {@link HttpsParameters#setSSLParameters(SSLParameters)} in order\n+    * to set the SSL parameters for the connection.\n+    *\n+    * <p> The default implementation of this method uses the\n+    * SSLParameters returned from:\n+    *\n+    * <p> {@code getSSLContext().getDefaultSSLParameters()}\n+    *\n+    * <p> configure() may be overridden in order to modify this behavior. See\n+    * example <a href=\"#example\">above<\/a>.\n+    *\n+    * @param params the {@code HttpsParameters} to be configured\n@@ -112,1 +109,1 @@\n-    public void configure (HttpsParameters params) {\n+    public void configure(HttpsParameters params) {\n@@ -115,1 +112,0 @@\n-\/\/END_TIGER_EXCLUDE\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/HttpsConfigurator.java","additions":29,"deletions":33,"binary":false,"changes":62,"status":"modified"}]}