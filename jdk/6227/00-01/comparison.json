{"files":[{"patch":"@@ -2099,1 +2099,1 @@\n-         *         {@code PathIterator}.\n+     *         {@code PathIterator}.\n@@ -2111,6 +2111,6 @@\n-        double leftX = 0;\n-        double rightX = 0;\n-        double topY = 0;\n-        double bottomY = 0;\n-        double lastX = 0;\n-        double lastY = 0;\n+        double leftX = 0.0;\n+        double rightX = 0.0;\n+        double topY = 0.0;\n+        double bottomY = 0.0;\n+        double lastX = 0.0;\n+        double lastY = 0.0;\n@@ -2146,4 +2146,4 @@\n-                leftX = endX < leftX ? endX : leftX;\n-                rightX = endX > rightX ? endX : rightX;\n-                topY = endY < topY ? endY : topY;\n-                bottomY = endY > bottomY ? endY : bottomY;\n+                leftX = (endX < leftX) ? endX : leftX;\n+                rightX = (endX > rightX) ? endX : rightX;\n+                topY = (endY < topY) ? endY : topY;\n+                bottomY = (endY > bottomY) ? endY : bottomY;\n@@ -2159,3 +2159,3 @@\n-                x_coeff[3] = 0;\n-                x_coeff[2] = lastX - 2 * coords[0] + coords[2];\n-                x_coeff[1] = -2 * lastX + 2 * coords[0];\n+                x_coeff[3] = 0.0;\n+                x_coeff[2] = lastX - 2.0 * coords[0] + coords[2];\n+                x_coeff[1] = -2.0 * lastX + 2.0 * coords[0];\n@@ -2165,2 +2165,2 @@\n-                y_coeff[2] = lastY - 2 * coords[1] + coords[3];\n-                y_coeff[1] = -2 * lastY + 2 * coords[1];\n+                y_coeff[2] = lastY - 2.0 * coords[1] + coords[3];\n+                y_coeff[1] = -2.0 * lastY + 2.0 * coords[1];\n@@ -2171,3 +2171,3 @@\n-                x_coeff[3] = -lastX + 3 * coords[0] - 3 * coords[2] + coords[4];\n-                x_coeff[2] = 3 * lastX - 6 * coords[0] + 3 * coords[2];\n-                x_coeff[1] = -3 * lastX + 3 * coords[0];\n+                x_coeff[3] = -lastX + 3.0 * coords[0] - 3.0 * coords[2] + coords[4];\n+                x_coeff[2] = 3.0 * lastX - 6.0 * coords[0] + 3.0 * coords[2];\n+                x_coeff[1] = -3.0 * lastX + 3.0 * coords[0];\n@@ -2176,3 +2176,3 @@\n-                y_coeff[3] = -lastY + 3 * coords[1] - 3 * coords[3] + coords[5];\n-                y_coeff[2] = 3 * lastY - 6 * coords[1] + 3 * coords[3];\n-                y_coeff[1] = -3 * lastY + 3 * coords[1];\n+                y_coeff[3] = -lastY + 3.0 * coords[1] - 3.0 * coords[3] + coords[5];\n+                y_coeff[2] = 3.0 * lastY - 6.0 * coords[1] + 3.0 * coords[3];\n+                y_coeff[1] = -3.0 * lastY + 3.0 * coords[1];\n@@ -2185,1 +2185,1 @@\n-                int tExtremaCount = Curve.getPossibleExtremaInCubicEquation(x_coeff, tExtrema);\n+                int tExtremaCount = Curve.findExtrema(x_coeff, tExtrema);\n@@ -2188,3 +2188,5 @@\n-                    double x = x_coeff[0] + x_coeff[1] * t + x_coeff[2] * t * t + x_coeff[3] * t * t * t;\n-                    leftX = x < leftX ? x : leftX;\n-                    rightX = x > rightX ? x : rightX;\n+                    if (t > 0 && t < 1) {\n+                        double x = x_coeff[0] + t * (x_coeff[1] + t * (x_coeff[2] + t * x_coeff[3]));\n+                        leftX = (x < leftX) ? x : leftX;\n+                        rightX = (x > rightX) ? x : rightX;\n+                    }\n@@ -2193,1 +2195,1 @@\n-                tExtremaCount = Curve.getPossibleExtremaInCubicEquation(y_coeff, tExtrema);\n+                tExtremaCount = Curve.findExtrema(y_coeff, tExtrema);\n@@ -2196,3 +2198,5 @@\n-                    double y = y_coeff[0] + y_coeff[1] * t + y_coeff[2] * t * t + y_coeff[3] * t * t * t;\n-                    topY = y < topY ? y : topY;\n-                    bottomY = y > bottomY ? y : bottomY;\n+                    if (t > 0 && t < 1) {\n+                        double y = y_coeff[0] + t * (y_coeff[1] + t * (y_coeff[2] + t * y_coeff[3]));\n+                        topY = (y < topY) ? y : topY;\n+                        bottomY = (y > bottomY) ? y : bottomY;\n+                    }\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/Path2D.java","additions":34,"deletions":30,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -716,1 +716,1 @@\n-     * Return the x values between (0,1) that correspond to possible extrema in a given cubic function.\n+     * Return the t values that correspond to possible extrema in a given cubic function.\n@@ -718,1 +718,1 @@\n-     * If the coefficient of the x^3 is large then the polynomial is a cubic and up to\n+     * If the coefficient of the t^3 is large then the polynomial is a cubic and up to\n@@ -728,3 +728,3 @@\n-     *                     the coefficient for (x^n).\n-     * @param dest an array to store the x values in. This must be at least 3 elements.\n-     * @return the number of x-values that were stored in dest. This will be between 0-3.\n+     *                     the coefficient for (t^n).\n+     * @param dest an array to store the t values in. This must be at least 3 elements.\n+     * @return the number of t-values that were stored in dest. This will be between 0-3.\n@@ -732,1 +732,1 @@\n-    public static int getPossibleExtremaInCubicEquation(double[] coefficients, double[] dest) {\n+    public static int findExtrema(double[] coefficients, double[] dest) {\n@@ -736,1 +736,1 @@\n-        if (coefficients[3] != 0) {\n+        if (coefficients[3] != 0.0) {\n@@ -739,2 +739,2 @@\n-            \/\/ y = c[3] * x^3 + c[2] * x^2 + c[1] * x + c[0]\n-            \/\/ dy\/dx = 3 * c[3] * t^2 + 2 * c[2] * t + c[1]\n+            \/\/ f(t) = c[3] * t^3 + c[2] * t^2 + c[1] * t + c[0]\n+            \/\/ df\/dt = 3 * c[3] * t^2 + 2 * c[2] * t + c[1]\n@@ -742,2 +742,2 @@\n-            \/\/ so we'll apply the quadratic formula:\n-            \/\/ x = [-B +- sqrt(B^2 - 4*A*C)] \/ (2A)\n+            \/\/ so we have a quadratic polynomial:\n+            \/\/ df\/dt = A * t^2 + B * t + C\n@@ -750,2 +750,4 @@\n-            \/\/ so we end up with:\n-            \/\/ x = (-2 * c[2] +- sqrt(2 * 2 * c[2] * c[2] - 4 * 3 * c[3] * c[1])]\/(2 * 3 * c[3])\n+            double[] eqn = new double[]{ coefficients[1],\n+                    2.0 * coefficients[2],\n+                    3.0 * coefficients[3] };\n+            returnValue = QuadCurve2D.solveQuadratic(eqn, dest);\n@@ -753,26 +755,2 @@\n-            double determinant = (4 * coefficients[2] * coefficients[2]\n-                    - 12 * coefficients[3] * coefficients[1]);\n-            if (determinant < 0) {\n-                \/\/ there are no solutions\n-                return 0;\n-            }\n-\n-            if (determinant == 0) {\n-                \/\/ there is 1 solution\n-                double x = -coefficients[2] \/ (3 * coefficients[3]);\n-                if (x > 0 && x < 1) {\n-                    dest[returnValue++] = x;\n-                }\n-            } else {\n-                \/\/ there are 2 solutions:\n-                determinant = Math.sqrt(determinant);\n-                double x = (-2 * coefficients[2] + determinant) \/ (6 * coefficients[3]);\n-                if (x > 0 && x < 1) {\n-                    dest[returnValue++] = x;\n-                }\n-\n-                x = (-2 * coefficients[2] - determinant) \/ (6 * coefficients[3]);\n-                if (x > 0 && x < 1) {\n-                    dest[returnValue++] = x;\n-                }\n-            }\n+            if (returnValue < 0.0)\n+                returnValue = 0;\n@@ -781,1 +759,1 @@\n-        if (coefficients[3] > -.01 && coefficients[3] < .01 && coefficients[2] != 0) {\n+        if (coefficients[3] > -.01 && coefficients[3] < .01 && coefficients[2] != 0.0) {\n@@ -784,1 +762,1 @@\n-            \/\/ y = c[2] * x^2 + c[1] * x + c[0]\n+            \/\/ f = c[2] * t^2 + c[1] * t + c[0]\n@@ -790,1 +768,1 @@\n-            \/\/ scenario is: we return an extra x-value that isn't really an extrema.\n+            \/\/ scenario is: we return an extra t-value that isn't really an extrema.\n@@ -792,1 +770,1 @@\n-            \/\/ dy\/dx = 2 * c[2] * x + c[1]\n+            \/\/ df\/dt = 2 * c[2] * t + c[1]\n@@ -795,1 +773,1 @@\n-            \/\/ x = -c[1] \/ (2*c[2])\n+            \/\/ t = -c[1] \/ (2*c[2])\n@@ -797,4 +775,2 @@\n-            double x = -coefficients[1] \/ (2 * coefficients[2]);\n-            if (x > 0 && x < 1) {\n-                dest[returnValue++] = x;\n-            }\n+            double t = -coefficients[1] \/ (2.0 * coefficients[2]);\n+            dest[returnValue++] = t;\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/geom\/Curve.java","additions":24,"deletions":48,"binary":false,"changes":72,"status":"modified"}]}