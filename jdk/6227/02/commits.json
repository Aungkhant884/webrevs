[{"commit":{"message":"8176501: Method Shape.getBounds2D() incorrectly includes Bezier control points in bounding box\n\nAddressing more of Laurent's code review recommendations\/comments:\n\n1. solve the quadratic equation using QuadCurve2d.solveQuadratic() or like Helpers.quadraticRoots()\n\n(I was pleasantly surprised to see QuadCurve2D.solveQuadratic(..) does well for the unit test where the t^2 coefficient approaches zero. We still get an extra root, but it's greater than 10^13, so it is ignored by our (0,1) bounds check later.)\n\n2. determine the derivatives da \/ db\n\nWe now define x_deriv_coeff and y_deriv_coeff.\n\n3. remove the label pathIteratorLoop\n\n4. use `for (final PathIterator it = shape.getPathIterator(null); !it.isDone(); it.next()) {`\n\n(The initial statement is empty in this case because PathIterator is an argument.)\n\n5. make arrays final to be obvious\n\n6. add a shortcut test for better readability \/ close the shortcut test\n\n7. after computing coefficients (abcd), also compute (da db c) needed by root finding next\n\n8. useless with the shortcut test (re \"definedParametricEquations\" boolean)\n\n9. use if (t > 0.0 && t < 1.0)\n\n(Sorry, that got lost in the prev refactor.)\n\n10. add explicitely the SEG_CLOSE case (skip = continue) before the default case\n\nThis commit does not address comments about accuracy\/precision. I'll explore those separately later."},"files":[{"filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/Path2D.java"}],"sha":"410cd6ce0f25f4425803e8b61d10a0b85e86929e"},{"commit":{"message":"8176501: Method Shape.getBounds2D() incorrectly includes Bezier control points in bounding box\n\nAddressing some of Laurent's code review recommendations\/comments:\n\n1. use the convention t for the parametric variable x(t),y(t)\n2. solve the quadratic equation using QuadCurve2d.solveQuadratic() or like Helpers.quadraticRoots()\n3. always use braces for x = (a < b) ? ...\n4. always use double-precision constants in math or logical operations: (2 * x => 2.0 * x) and (coefficients[3] != 0) => (coefficients[3] != 0.0)\n\n(There are two additional recommendations not in this commit that I'll ask about shortly.)\n\nSee https:\/\/github.com\/openjdk\/jdk\/pull\/6227#issuecomment-959757954"},"files":[{"filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/Path2D.java"}],"sha":"5a0e2bd0f4ea36d877d087a1c7dd9ff1be684155"},{"commit":{"message":"8176501: Method Shape.getBounds2D() incorrectly includes Bezier control points in bounding box\n\nThe bug writeup indicated they wanted Path2D#getBounds2D() to be more accurate\/concise. They didn't explicitly say they wanted CubicCurve2D and QuadCurve2D to become more accurate too. But a preexisting unit test failed when Path2D#getBounds2D() was updated and those other classes weren't. At this point I considered either:\nA. Updating CubicCurve2D and QuadCurve2D to use the new more accurate getBounds2D() or\nB. Updating the unit test to forgive the discrepancy.\n\nI chose A. Which might technically be seen as scope creep, but it feels like a more holistic\/better approach.\n\nThis also includes a new unit test (in Path2D\/UnitTest.java) that fails without the changes in this commit."},"files":[{"filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/CubicCurve2D.java"},{"filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/Path2D.java"},{"filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/QuadCurve2D.java"},{"filename":"test\/jdk\/java\/awt\/geom\/Path2D\/UnitTest.java"}],"sha":"0da9594d0c2349b24a635da23f1b81011c6139f3"}]