{"files":[{"patch":"@@ -2114,1 +2114,1 @@\n-        boolean isEmpty = true;\n+        boolean isDefined = false;\n@@ -2124,1 +2124,0 @@\n-            double endX, endY;\n@@ -2126,3 +2125,21 @@\n-                case PathIterator.SEG_MOVETO, PathIterator.SEG_LINETO:\n-                    endX = coords[0];\n-                    endY = coords[1];\n+                case PathIterator.SEG_MOVETO:\n+                    if (!isDefined) {\n+                        isDefined = true;\n+                        leftX = rightX = coords[0];\n+                        topY = bottomY = coords[1];\n+                    } else {\n+                        if (coords[0] < leftX) leftX = coords[0];\n+                        if (coords[0] > rightX) rightX = coords[0];\n+                        if (coords[1] < topY) topY = coords[1];\n+                        if (coords[1] > bottomY) bottomY = coords[1];\n+                    }\n+                    lastX = coords[0];\n+                    lastY = coords[1];\n+                    break;\n+                case PathIterator.SEG_LINETO:\n+                    if (coords[0] < leftX) leftX = coords[0];\n+                    if (coords[0] > rightX) rightX = coords[0];\n+                    if (coords[1] < topY) topY = coords[1];\n+                    if (coords[1] > bottomY) bottomY = coords[1];\n+                    lastX = coords[0];\n+                    lastY = coords[1];\n@@ -2131,2 +2148,37 @@\n-                    endX = coords[2];\n-                    endY = coords[3];\n+                    if (coords[2] < leftX) leftX = coords[2];\n+                    if (coords[2] > rightX) rightX = coords[2];\n+                    if (coords[3] < topY) topY = coords[3];\n+                    if (coords[3] > bottomY) bottomY = coords[3];\n+\n+                    if (coords[0] < leftX || coords[0] > rightX) {\n+                        x_coeff[2] = lastX - 2.0 * coords[0] + coords[2];\n+                        x_coeff[1] = -2.0 * lastX + 2.0 * coords[0];\n+                        x_coeff[0] = lastX;\n+\n+                        x_deriv_coeff[0] = x_coeff[1];\n+                        x_deriv_coeff[1] = 2.0 * x_coeff[2];\n+\n+                        double t = -x_deriv_coeff[0] \/ x_deriv_coeff[1];\n+                        if (t > 0.0 && t < 1.0) {\n+                            double x = x_coeff[0] + t * (x_coeff[1] + t * x_coeff[2]);\n+                            if (x < leftX) leftX = x;\n+                            if (x > rightX) rightX = x;\n+                        }\n+                    }\n+                    if (coords[1] < topY || coords[1] > bottomY) {\n+                        y_coeff[2] = lastY - 2.0 * coords[1] + coords[3];\n+                        y_coeff[1] = -2.0 * lastY + 2.0 * coords[1];\n+                        y_coeff[0] = lastY;\n+\n+                        y_deriv_coeff[0] = y_coeff[1];\n+                        y_deriv_coeff[1] = 2.0 * y_coeff[2];\n+\n+                        double t = -y_deriv_coeff[0] \/ y_deriv_coeff[1];\n+                        if (t > 0.0 && t < 1.0) {\n+                            double y = y_coeff[0] + t * (y_coeff[1] + t * y_coeff[2]);\n+                            if (y < topY) topY = y;\n+                            if (y > bottomY) bottomY = y;\n+                        }\n+                    }\n+                    lastX = coords[2];\n+                    lastY = coords[3];\n@@ -2135,2 +2187,47 @@\n-                    endX = coords[4];\n-                    endY = coords[5];\n+                    if (coords[4] < leftX) leftX = coords[4];\n+                    if (coords[4] > rightX) rightX = coords[4];\n+                    if (coords[5] < topY) topY = coords[5];\n+                    if (coords[5] > bottomY) bottomY = coords[5];\n+\n+                    if (coords[0] < leftX || coords[0] > rightX || coords[2] < leftX || coords[2] > rightX) {\n+                        x_coeff[3] = -lastX + 3.0 * coords[0] - 3.0 * coords[2] + coords[4];\n+                        x_coeff[2] = 3.0 * lastX - 6.0 * coords[0] + 3.0 * coords[2];\n+                        x_coeff[1] = -3.0 * lastX + 3.0 * coords[0];\n+                        x_coeff[0] = lastX;\n+\n+                        x_deriv_coeff[0] = x_coeff[1];\n+                        x_deriv_coeff[1] = 2.0 * x_coeff[2];\n+                        x_deriv_coeff[2] = 3.0 * x_coeff[3];\n+\n+                        int tExtremaCount = QuadCurve2D.solveQuadratic(x_deriv_coeff, tExtrema);\n+                        for (int i = 0; i < tExtremaCount; i++) {\n+                            double t = tExtrema[i];\n+                            if (t > 0.0 && t < 1.0) {\n+                                double x = x_coeff[0] + t * (x_coeff[1] + t * (x_coeff[2] + t * x_coeff[3]));\n+                                if (x < leftX) leftX = x;\n+                                if (x > rightX) rightX = x;\n+                            }\n+                        }\n+                    }\n+                    if (coords[1] < topY || coords[1] > bottomY || coords[3] < topY || coords[3] > bottomY) {\n+                        y_coeff[3] = -lastY + 3.0 * coords[1] - 3.0 * coords[3] + coords[5];\n+                        y_coeff[2] = 3.0 * lastY - 6.0 * coords[1] + 3.0 * coords[3];\n+                        y_coeff[1] = -3.0 * lastY + 3.0 * coords[1];\n+                        y_coeff[0] = lastY;\n+\n+                        y_deriv_coeff[0] = y_coeff[1];\n+                        y_deriv_coeff[1] = 2.0 * y_coeff[2];\n+                        y_deriv_coeff[2] = 3.0 * y_coeff[3];\n+\n+                        int tExtremaCount = QuadCurve2D.solveQuadratic(y_deriv_coeff, tExtrema);\n+                        for (int i = 0; i < tExtremaCount; i++) {\n+                            double t = tExtrema[i];\n+                            if (t > 0.0 && t < 1.0) {\n+                                double y = y_coeff[0] + t * (y_coeff[1] + t * (y_coeff[2] + t * y_coeff[3]));\n+                                if (y < topY) topY = y;\n+                                if (y > bottomY) bottomY = y;\n+                            }\n+                        }\n+                    }\n+                    lastX = coords[4];\n+                    lastY = coords[5];\n@@ -2142,71 +2239,0 @@\n-\n-            if (isEmpty) {\n-                \/\/ we're seeding our bounds for the first time:\n-                isEmpty = false;\n-                leftX = rightX = endX;\n-                topY = bottomY = endY;\n-            } else {\n-                \/\/ extend our rectangle to cover the point at t = 1:\n-                leftX = (endX < leftX) ? endX : leftX;\n-                rightX = (endX > rightX) ? endX : rightX;\n-                topY = (endY < topY) ? endY : topY;\n-                bottomY = (endY > bottomY) ? endY : bottomY;\n-            }\n-\n-            if (type == PathIterator.SEG_QUADTO || type == PathIterator.SEG_CUBICTO) {\n-                \/\/ here's the slightly trickier part: examine quadratic and cubic\n-                \/\/ segments for extrema where t is between (0, 1):\n-\n-                if (type == PathIterator.SEG_QUADTO) {\n-                    x_coeff[3] = 0.0;\n-                    x_coeff[2] = lastX - 2.0 * coords[0] + coords[2];\n-                    x_coeff[1] = -2.0 * lastX + 2.0 * coords[0];\n-                    x_coeff[0] = lastX;\n-\n-                    y_coeff[3] = 0;\n-                    y_coeff[2] = lastY - 2.0 * coords[1] + coords[3];\n-                    y_coeff[1] = -2.0 * lastY + 2.0 * coords[1];\n-                    y_coeff[0] = lastY;\n-                } else if (type == PathIterator.SEG_CUBICTO) {\n-                    x_coeff[3] = -lastX + 3.0 * coords[0] - 3.0 * coords[2] + coords[4];\n-                    x_coeff[2] = 3.0 * lastX - 6.0 * coords[0] + 3.0 * coords[2];\n-                    x_coeff[1] = -3.0 * lastX + 3.0 * coords[0];\n-                    x_coeff[0] = lastX;\n-\n-                    y_coeff[3] = -lastY + 3.0 * coords[1] - 3.0 * coords[3] + coords[5];\n-                    y_coeff[2] = 3.0 * lastY - 6.0 * coords[1] + 3.0 * coords[3];\n-                    y_coeff[1] = -3.0 * lastY + 3.0 * coords[1];\n-                    y_coeff[0] = lastY;\n-                }\n-\n-                x_deriv_coeff[0] = x_coeff[1];\n-                x_deriv_coeff[1] = 2.0 * x_coeff[2];\n-                x_deriv_coeff[2] = 3.0 * x_coeff[3];\n-\n-                int tExtremaCount = QuadCurve2D.solveQuadratic(x_deriv_coeff, tExtrema);\n-                for (int i = 0; i < tExtremaCount; i++) {\n-                    double t = tExtrema[i];\n-                    if (t > 0.0 && t < 1.0) {\n-                        double x = x_coeff[0] + t * (x_coeff[1] + t * (x_coeff[2] + t * x_coeff[3]));\n-                        leftX = (x < leftX) ? x : leftX;\n-                        rightX = (x > rightX) ? x : rightX;\n-                    }\n-                }\n-\n-                y_deriv_coeff[0] = y_coeff[1];\n-                y_deriv_coeff[1] = 2.0 * y_coeff[2];\n-                y_deriv_coeff[2] = 3.0 * y_coeff[3];\n-\n-                tExtremaCount = QuadCurve2D.solveQuadratic(y_deriv_coeff, tExtrema);\n-                for (int i = 0; i < tExtremaCount; i++) {\n-                    double t = tExtrema[i];\n-                    if (t > 0.0 && t < 1.0) {\n-                        double y = y_coeff[0] + t * (y_coeff[1] + t * (y_coeff[2] + t * y_coeff[3]));\n-                        topY = (y < topY) ? y : topY;\n-                        bottomY = (y > bottomY) ? y : bottomY;\n-                    }\n-                }\n-            }\n-\n-            lastX = endX;\n-            lastY = endY;\n@@ -2214,1 +2240,1 @@\n-        if (!isEmpty) {\n+        if (isDefined) {\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/Path2D.java","additions":107,"deletions":81,"binary":false,"changes":188,"status":"modified"}]}