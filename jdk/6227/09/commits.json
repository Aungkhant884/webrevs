[{"commit":{"message":"8176501: Method Shape.getBounds2D() incorrectly includes Bezier control points in bounding box\n\nAddressing code review feedback: \"Use BigDecomal.setScale(40) to ascertain precision.\"\n\nThe geom.* unit tests passed before & after this change.\n\nhttps:\/\/github.com\/openjdk\/jdk\/pull\/6227#discussion_r752908494"},"files":[{"filename":"test\/jdk\/java\/awt\/geom\/Path2D\/GetBounds2DPrecisionTest.java"}],"sha":"7680533005e34e6e8452426823427d89e4bf325d"},{"commit":{"message":"8176501: Method Shape.getBounds2D() incorrectly includes Bezier control points in bounding box\n\nAddressing code review feedback: \"I would prefer having accumulate functions called twice (using offset)\"\n\nhttps:\/\/github.com\/openjdk\/jdk\/pull\/6227#issuecomment-970040098"},"files":[{"filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/Path2D.java"},{"filename":"src\/java.desktop\/share\/classes\/sun\/awt\/geom\/Curve.java"}],"sha":"b3e84a5e4281c2bb9be1c7e1d751ef3593cc387c"},{"commit":{"message":"8176501: Method Shape.getBounds2D() incorrectly includes Bezier control points in bounding box\n\nThis is broadly addresses the code review feedback: \"I see many duplicated lines\". This commit does NOT include \"the previous unified solution\" that is also mentioned... so we'll try this on and see how we feel about it.\n\nhttps:\/\/github.com\/openjdk\/jdk\/pull\/6227#issuecomment-964020449"},"files":[{"filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/Path2D.java"},{"filename":"src\/java.desktop\/share\/classes\/sun\/awt\/geom\/Curve.java"}],"sha":"0e2b52931bf0f3abc5b454f45be18e4aa9301335"},{"commit":{"message":"8176501: Method Shape.getBounds2D() incorrectly includes Bezier control points in bounding box\n\nApplying Laurent's implementation to address machine error.\n\nSee https:\/\/github.com\/openjdk\/jdk\/pull\/6227#discussion_r749672090"},"files":[{"filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/Path2D.java"}],"sha":"8c5e772ec9623352c59fd9dfc2622ac1dd2fd02d"},{"commit":{"message":"8176501: Method Shape.getBounds2D() incorrectly includes Bezier control points in bounding box\n\nThis adds a new unit test that calculates a high-precision bounding box (using BigDecimals), and then makes sure our double-based logic contains that high-precision bounds.\n\nThis restores getBounds2D() to its original contract: it should only ever be *larger* than the actual bounds -- it should never be smaller.\n\nAlso we want to only apply this margin (aka \"padding\") when we deal with polynomial-based extrema. We should never apply it to line-based polygons. For ex: a Path2D that represents an int-based rectangle should return the same bounds as before 8176501 was addressed.\n\nThis test currently only addresses very small cubic curves.\n\nI experimented with very large cubic & quadratic curves, but I didn't come up with a unit test that failed before and after this commit. Adding unit tests for large curve segments is a possible area of improvement."},"files":[{"filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/Path2D.java"},{"filename":"test\/jdk\/java\/awt\/geom\/Path2D\/GetBounds2DPrecisionTest.java"}],"sha":"40bda064f1e6ed81817dcc9bcbf33f325924f259"},{"commit":{"message":"8176501: Method Shape.getBounds2D() incorrectly includes Bezier control points in bounding box\n\nAddressing code review comments: given current code structure we don't need separate data structures for x and y equations."},"files":[{"filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/Path2D.java"}],"sha":"af4c5f03b7c9687cde53ea6c3770846bbfcc8fbc"},{"commit":{"message":"8176501: Method Shape.getBounds2D() incorrectly includes Bezier control points in bounding box\n\nRemoving accidental leftover code. This should have been removed in a recent previous commit. The preceding code already defines these values."},"files":[{"filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/Path2D.java"}],"sha":"8db26a255d21584fd3f4462064d06f4e216f0f72"},{"commit":{"message":"8176501: Method Shape.getBounds2D() incorrectly includes Bezier control points in bounding box\n\nThis adds an exploratory algorithm that tries to identify how to expand the double-based bounding box. It is currently problematic, but I'm committing it for review\/feedback. Maybe this will look like a familiar problem to someone more familiar with this subject? Once we settle on how to address machine error: I'll either adapt this file into a more proper unit test or delete it.\n\nThis is an attempt to explore Laurent's comments here:\nhttps:\/\/github.com\/openjdk\/jdk\/pull\/6227#discussion_r746450132\n\nThe problem is our double-based approach can be a little bit too small because of machine error. We need it to only ever err on the side of being too large.\n\nCurrently in this class we're applying a `margin` as follows:\n```\n       double x = coeff[0] + t * (coeff[1] + t * coeff[2]);\n       double margin = marginMultiplier * Math.ulp(x);\n       if (x - margin < leftX) leftX = x - margin;\n       if (x + margin> rightX) rightX = x + margin;\n```\n\nThis class tests a million shapes and tries to identify the smallest constant `marginMultiplier` that always returns an appropriate bounding box.\n\nThe current problem is this constant is multiplied by the ulp of a value. So as the value (for ex: the left x-value) approaches zero the ulp becomes increasingly small, so the multiplier has to become extremely large. Currently this algorithm settles on a multiplier of: 7.864956084850002E10\n\nIf we treat the constant as a multiplier of the x-value itself (for ex: `margin = multiplier * Math.abs(x)``), then this algorithm settles on 0.000013173867835580114.\n\nWhat is a good way to evaluate `margin` in the code snippet above?\n\nOr at some point we could switch back to using the bezier control point: what fuzzy sliding scale logic do we use to determine when to use \"the old way\" and when to use \"the new way\"?"},"files":[{"filename":"test\/jdk\/java\/awt\/geom\/Path2D\/GetBounds2DPrecisionTest.java"}],"sha":"4b9d87d6d03e923bb2663fc8f4f77b7549df6e70"},{"commit":{"message":"8176501: Method Shape.getBounds2D() incorrectly includes Bezier control points in bounding box\n\nAddressing code review recommendation to calculate polynomial coefficients using differences \/ vector notation.\n\nhttps:\/\/github.com\/openjdk\/jdk\/pull\/6227#discussion_r743534560\n\nI generally understand the intention of this change, but I don't know exactly how to test\/evaluate it.\n\nThe unit tests still pass. I ran some sample calculations involving a 100x100 Ellipse2D as it was rotated, and the two getBounds2D(..) implementations (before and after this commit) only differed by a few ulps (usually around 10^-15), as expected."},"files":[{"filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/Path2D.java"}],"sha":"b7ca69c85b1270af415d66db68c1c286e1e0d751"},{"commit":{"message":"8176501: Method Shape.getBounds2D() incorrectly includes Bezier control points in bounding box\n\nAddressing code review recommendation to copy javafx's optimization: we can avoid looking at the derivative and polynomial if the control points are inside our existing bounds. This involved refactoring the method getBounds2D(PathIterator) more generally. It should now be a little more efficient (and perhaps a little less readable). Since we don't have concrete performance or readability goals this is a subjective trade-off that's hard to assess."},"files":[{"filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/Path2D.java"}],"sha":"e617c7229da285a00e108a62a22b997b48afe372"},{"commit":{"message":"8176501: Method Shape.getBounds2D() incorrectly includes Bezier control points in bounding box\n\nAddressing more of Laurent's code review recommendations\/comments:\n\n1. solve the quadratic equation using QuadCurve2d.solveQuadratic() or like Helpers.quadraticRoots()\n\n(I was pleasantly surprised to see QuadCurve2D.solveQuadratic(..) does well for the unit test where the t^2 coefficient approaches zero. We still get an extra root, but it's greater than 10^13, so it is ignored by our (0,1) bounds check later.)\n\n2. determine the derivatives da \/ db\n\nWe now define x_deriv_coeff and y_deriv_coeff.\n\n3. remove the label pathIteratorLoop\n\n4. use `for (final PathIterator it = shape.getPathIterator(null); !it.isDone(); it.next()) {`\n\n(The initial statement is empty in this case because PathIterator is an argument.)\n\n5. make arrays final to be obvious\n\n6. add a shortcut test for better readability \/ close the shortcut test\n\n7. after computing coefficients (abcd), also compute (da db c) needed by root finding next\n\n8. useless with the shortcut test (re \"definedParametricEquations\" boolean)\n\n9. use if (t > 0.0 && t < 1.0)\n\n(Sorry, that got lost in the prev refactor.)\n\n10. add explicitely the SEG_CLOSE case (skip = continue) before the default case\n\nThis commit does not address comments about accuracy\/precision. I'll explore those separately later."},"files":[{"filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/Path2D.java"},{"filename":"src\/java.desktop\/share\/classes\/sun\/awt\/geom\/Curve.java"}],"sha":"410cd6ce0f25f4425803e8b61d10a0b85e86929e"},{"commit":{"message":"8176501: Method Shape.getBounds2D() incorrectly includes Bezier control points in bounding box\n\nAddressing some of Laurent's code review recommendations\/comments:\n\n1. use the convention t for the parametric variable x(t),y(t)\n2. solve the quadratic equation using QuadCurve2d.solveQuadratic() or like Helpers.quadraticRoots()\n3. always use braces for x = (a < b) ? ...\n4. always use double-precision constants in math or logical operations: (2 * x => 2.0 * x) and (coefficients[3] != 0) => (coefficients[3] != 0.0)\n\n(There are two additional recommendations not in this commit that I'll ask about shortly.)\n\nSee https:\/\/github.com\/openjdk\/jdk\/pull\/6227#issuecomment-959757954"},"files":[{"filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/Path2D.java"},{"filename":"src\/java.desktop\/share\/classes\/sun\/awt\/geom\/Curve.java"}],"sha":"5a0e2bd0f4ea36d877d087a1c7dd9ff1be684155"},{"commit":{"message":"8176501: Method Shape.getBounds2D() incorrectly includes Bezier control points in bounding box\n\nThe bug writeup indicated they wanted Path2D#getBounds2D() to be more accurate\/concise. They didn't explicitly say they wanted CubicCurve2D and QuadCurve2D to become more accurate too. But a preexisting unit test failed when Path2D#getBounds2D() was updated and those other classes weren't. At this point I considered either:\nA. Updating CubicCurve2D and QuadCurve2D to use the new more accurate getBounds2D() or\nB. Updating the unit test to forgive the discrepancy.\n\nI chose A. Which might technically be seen as scope creep, but it feels like a more holistic\/better approach.\n\nThis also includes a new unit test (in Path2D\/UnitTest.java) that fails without the changes in this commit."},"files":[{"filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/CubicCurve2D.java"},{"filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/Path2D.java"},{"filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/QuadCurve2D.java"},{"filename":"src\/java.desktop\/share\/classes\/sun\/awt\/geom\/Curve.java"},{"filename":"test\/jdk\/java\/awt\/geom\/Path2D\/UnitTest.java"}],"sha":"0da9594d0c2349b24a635da23f1b81011c6139f3"}]