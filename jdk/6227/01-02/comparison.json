{"files":[{"patch":"@@ -2102,1 +2102,1 @@\n-    public static Rectangle2D getBounds2D(PathIterator pi) {\n+    public static Rectangle2D getBounds2D(final PathIterator pi) {\n@@ -2105,2 +2105,2 @@\n-        double[] x_coeff = new double[4];\n-        double[] y_coeff = new double[4];\n+        final double[] x_coeff = new double[4];\n+        final double[] y_coeff = new double[4];\n@@ -2108,2 +2108,6 @@\n-        double[] coords = new double[6];\n-        double[] tExtrema = new double[3];\n+        \/\/ define the derivative's coefficients\n+        final double[] x_deriv_coeff = new double[3];\n+        final double[] y_deriv_coeff = new double[3];\n+\n+        final double[] coords = new double[6];\n+        final double[] tExtrema = new double[2];\n@@ -2118,1 +2122,1 @@\n-        pathIteratorLoop : while (!pi.isDone()) {\n+        for (; !pi.isDone(); pi.next()) {\n@@ -2120,1 +2124,0 @@\n-            pi.next();\n@@ -2135,0 +2138,1 @@\n+                case PathIterator.SEG_CLOSE:\n@@ -2136,1 +2140,1 @@\n-                    continue pathIteratorLoop;\n+                    continue;\n@@ -2152,31 +2156,29 @@\n-            \/\/ here's the slightly trickier part: examine quadratic and cubic\n-            \/\/ segments for extrema where t is between (0, 1):\n-\n-            boolean definedParametricEquations;\n-            if (type == PathIterator.SEG_QUADTO) {\n-                definedParametricEquations = true;\n-\n-                x_coeff[3] = 0.0;\n-                x_coeff[2] = lastX - 2.0 * coords[0] + coords[2];\n-                x_coeff[1] = -2.0 * lastX + 2.0 * coords[0];\n-                x_coeff[0] = lastX;\n-\n-                y_coeff[3] = 0;\n-                y_coeff[2] = lastY - 2.0 * coords[1] + coords[3];\n-                y_coeff[1] = -2.0 * lastY + 2.0 * coords[1];\n-                y_coeff[0] = lastY;\n-            } else if (type == PathIterator.SEG_CUBICTO) {\n-                definedParametricEquations = true;\n-\n-                x_coeff[3] = -lastX + 3.0 * coords[0] - 3.0 * coords[2] + coords[4];\n-                x_coeff[2] = 3.0 * lastX - 6.0 * coords[0] + 3.0 * coords[2];\n-                x_coeff[1] = -3.0 * lastX + 3.0 * coords[0];\n-                x_coeff[0] = lastX;\n-\n-                y_coeff[3] = -lastY + 3.0 * coords[1] - 3.0 * coords[3] + coords[5];\n-                y_coeff[2] = 3.0 * lastY - 6.0 * coords[1] + 3.0 * coords[3];\n-                y_coeff[1] = -3.0 * lastY + 3.0 * coords[1];\n-                y_coeff[0] = lastY;\n-            } else {\n-                definedParametricEquations = false;\n-            }\n+            if (type == PathIterator.SEG_QUADTO || type == PathIterator.SEG_CUBICTO) {\n+                \/\/ here's the slightly trickier part: examine quadratic and cubic\n+                \/\/ segments for extrema where t is between (0, 1):\n+\n+                if (type == PathIterator.SEG_QUADTO) {\n+                    x_coeff[3] = 0.0;\n+                    x_coeff[2] = lastX - 2.0 * coords[0] + coords[2];\n+                    x_coeff[1] = -2.0 * lastX + 2.0 * coords[0];\n+                    x_coeff[0] = lastX;\n+\n+                    y_coeff[3] = 0;\n+                    y_coeff[2] = lastY - 2.0 * coords[1] + coords[3];\n+                    y_coeff[1] = -2.0 * lastY + 2.0 * coords[1];\n+                    y_coeff[0] = lastY;\n+                } else if (type == PathIterator.SEG_CUBICTO) {\n+                    x_coeff[3] = -lastX + 3.0 * coords[0] - 3.0 * coords[2] + coords[4];\n+                    x_coeff[2] = 3.0 * lastX - 6.0 * coords[0] + 3.0 * coords[2];\n+                    x_coeff[1] = -3.0 * lastX + 3.0 * coords[0];\n+                    x_coeff[0] = lastX;\n+\n+                    y_coeff[3] = -lastY + 3.0 * coords[1] - 3.0 * coords[3] + coords[5];\n+                    y_coeff[2] = 3.0 * lastY - 6.0 * coords[1] + 3.0 * coords[3];\n+                    y_coeff[1] = -3.0 * lastY + 3.0 * coords[1];\n+                    y_coeff[0] = lastY;\n+                }\n+\n+                x_deriv_coeff[0] = x_coeff[1];\n+                x_deriv_coeff[1] = 2.0 * x_coeff[2];\n+                x_deriv_coeff[2] = 3.0 * x_coeff[3];\n@@ -2184,3 +2186,2 @@\n-            if (definedParametricEquations) {\n-                int tExtremaCount = Curve.findExtrema(x_coeff, tExtrema);\n-                for(int i = 0; i < tExtremaCount; i++) {\n+                int tExtremaCount = QuadCurve2D.solveQuadratic(x_deriv_coeff, tExtrema);\n+                for (int i = 0; i < tExtremaCount; i++) {\n@@ -2188,1 +2189,1 @@\n-                    if (t > 0 && t < 1) {\n+                    if (t > 0.0 && t < 1.0) {\n@@ -2195,2 +2196,6 @@\n-                tExtremaCount = Curve.findExtrema(y_coeff, tExtrema);\n-                for(int i = 0; i < tExtremaCount; i++) {\n+                y_deriv_coeff[0] = y_coeff[1];\n+                y_deriv_coeff[1] = 2.0 * y_coeff[2];\n+                y_deriv_coeff[2] = 3.0 * y_coeff[3];\n+\n+                tExtremaCount = QuadCurve2D.solveQuadratic(y_deriv_coeff, tExtrema);\n+                for (int i = 0; i < tExtremaCount; i++) {\n@@ -2198,1 +2203,1 @@\n-                    if (t > 0 && t < 1) {\n+                    if (t > 0.0 && t < 1.0) {\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/Path2D.java","additions":51,"deletions":46,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -715,66 +715,0 @@\n-    \/**\n-     * Return the t values that correspond to possible extrema in a given cubic function.\n-     * <p>\n-     * If the coefficient of the t^3 is large then the polynomial is a cubic and up to\n-     * two values may be returned. If that coefficient is zero then the polynomial\n-     * is a quadratic and up to one value may be returned. But if that coefficient is\n-     * small then this method considers the possibility it could be either, so in that\n-     * scenario this method may return up to three values. For ex: if the leading\n-     * coefficient is .000001 that might be because the polynomial really is a cubic, or\n-     * it might be because of rounding error and the polynomial is basically a quadratic.\n-     * <\/p>\n-     *\n-     * @param coefficients four coefficients for a cubic polynomial equation. The nth element in this array is\n-     *                     the coefficient for (t^n).\n-     * @param dest an array to store the t values in. This must be at least 3 elements.\n-     * @return the number of t-values that were stored in dest. This will be between 0-3.\n-     *\/\n-    public static int findExtrema(double[] coefficients, double[] dest) {\n-\n-        int returnValue = 0;\n-\n-        if (coefficients[3] != 0.0) {\n-            \/\/ evaluate this as a cubic, where:\n-\n-            \/\/ f(t) = c[3] * t^3 + c[2] * t^2 + c[1] * t + c[0]\n-            \/\/ df\/dt = 3 * c[3] * t^2 + 2 * c[2] * t + c[1]\n-\n-            \/\/ so we have a quadratic polynomial:\n-            \/\/ df\/dt = A * t^2 + B * t + C\n-\n-            \/\/ ... where:\n-            \/\/ A = 3 * c[3]\n-            \/\/ B = 2 * c[2]\n-            \/\/ C = c[1]\n-\n-            double[] eqn = new double[]{ coefficients[1],\n-                    2.0 * coefficients[2],\n-                    3.0 * coefficients[3] };\n-            returnValue = QuadCurve2D.solveQuadratic(eqn, dest);\n-\n-            if (returnValue < 0.0)\n-                returnValue = 0;\n-        }\n-\n-        if (coefficients[3] > -.01 && coefficients[3] < .01 && coefficients[2] != 0.0) {\n-            \/\/ evaluate this as if it's a quadratic, where:\n-\n-            \/\/ f = c[2] * t^2 + c[1] * t + c[0]\n-\n-            \/\/ this only really makes sense if coefficients[3] is close to zero.\n-            \/\/ We chose \"less than .01\" as the threshold for \"close to zero\". It's\n-            \/\/ a very generous threshold, but it should be harmless to err on the\n-            \/\/ side of a generously high threshold in this case. The worst-case\n-            \/\/ scenario is: we return an extra t-value that isn't really an extrema.\n-\n-            \/\/ df\/dt = 2 * c[2] * t + c[1]\n-\n-            \/\/ so our only extrema is at:\n-            \/\/ t = -c[1] \/ (2*c[2])\n-\n-            double t = -coefficients[1] \/ (2.0 * coefficients[2]);\n-            dest[returnValue++] = t;\n-        }\n-        return returnValue;\n-    }\n-\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/geom\/Curve.java","additions":0,"deletions":66,"binary":false,"changes":66,"status":"modified"}]}