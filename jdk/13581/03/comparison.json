{"files":[{"patch":"@@ -193,1 +193,7 @@\n-        int nEightbytes = (int) Utils.alignUp(group.byteSize(), 8) \/ 8;\n+        int nEightbytes;\n+        try {\n+            \/\/ alignUp can overflow the value, but it's okay since toIntExact still catches it\n+            nEightbytes = Math.toIntExact(Utils.alignUp(group.byteSize(), 8) \/ 8);\n+        } catch (ArithmeticException e) {\n+            throw new IllegalArgumentException(\"GroupLayout is too large: \" + group, e);\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/TypeClass.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @modules java.base\/jdk.internal.foreign\n@@ -42,0 +43,3 @@\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n@@ -43,0 +47,1 @@\n+import jdk.internal.foreign.CABI;\n@@ -51,0 +56,2 @@\n+    private static final boolean IS_SYSV = CABI.current() == CABI.SYS_V;\n+\n@@ -104,1 +111,1 @@\n-        return new Object[][]{\n+        List<Object[]> cases = new ArrayList<>(Arrays.asList(new Object[][]{\n@@ -188,1 +195,12 @@\n-        };\n+        }));\n+\n+        if (IS_SYSV) {\n+            cases.add(new Object[] {\n+                    FunctionDescriptor.ofVoid(MemoryLayout.structLayout(\n+                            MemoryLayout.sequenceLayout(\n+                                C_INT\n+                            ))),\n+                    \"GroupLayout is too large\"\n+            });\n+        }\n+        return cases.toArray(Object[][]::new);\n","filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"}]}