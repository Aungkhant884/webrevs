{"files":[{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_CLASSFILE_CLASSLISTWRITER_HPP\n+#define SHARE_CLASSFILE_CLASSLISTWRITER_HPP\n+\n+#include \"runtime\/arguments.hpp\"\n+#include \"runtime\/mutexLocker.hpp\"\n+#include \"runtime\/thread.hpp\"\n+#include \"utilities\/ostream.hpp\"\n+\n+class ClassListWriter {\n+  friend const char* make_log_name(const char* log_name, const char* force_directory);\n+\n+  static fileStream* _classlist_file;\n+  MutexLocker _locker;\n+public:\n+#if INCLUDE_CDS\n+  ClassListWriter() : _locker(Thread::current(), ClassListFile_lock, Mutex::_no_safepoint_check_flag) {}\n+#else\n+  ClassListWriter() : _locker(Thread::current(), NULL, Mutex::_no_safepoint_check_flag) {}\n+#endif\n+\n+  outputStream* stream() {\n+    return _classlist_file;\n+  }\n+\n+  static bool is_enabled() {\n+#if INCLUDE_CDS\n+    return _classlist_file != NULL && _classlist_file->is_open();\n+#else\n+    return false;\n+#endif\n+  }\n+\n+  static void init() {\n+#if INCLUDE_CDS\n+  \/\/ For -XX:DumpLoadedClassList=<file> option\n+  if (DumpLoadedClassList != NULL) {\n+    const char* list_name = make_log_name(DumpLoadedClassList, NULL);\n+    _classlist_file = new(ResourceObj::C_HEAP, mtInternal)\n+                         fileStream(list_name);\n+    FREE_C_HEAP_ARRAY(char, list_name);\n+  }\n+#endif\n+  }\n+\n+  static void delete_classlist() {\n+#if INCLUDE_CDS\n+    if (_classlist_file != NULL) {\n+        delete _classlist_file;\n+    }\n+#endif\n+  }\n+};\n+\n+#endif \/\/ SHARE_CLASSFILE_CLASSLISTWRITER_HPP\n","filename":"src\/hotspot\/share\/classfile\/classListWriter.hpp","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"classfile\/classListParser.hpp\"\n@@ -30,1 +29,0 @@\n-#include \"classfile\/javaClasses.inline.hpp\"\n@@ -34,1 +32,0 @@\n-#include \"classfile\/systemDictionaryShared.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"classfile\/classListWriter.hpp\"\n@@ -305,0 +306,2 @@\n+fileStream* ClassListWriter::_classlist_file = NULL;\n+\n@@ -306,1 +309,1 @@\n-  if (DumpLoadedClassList != NULL && classlist_file->is_open()) {\n+  if (ClassListWriter::is_enabled()) {\n@@ -311,1 +314,2 @@\n-      classlist_file->print(\"%s %s\", LAMBDA_PROXY_TAG, pool->pool_holder()->name()->as_C_string());\n+      ClassListWriter w;\n+      w.stream()->print(\"%s %s\", LAMBDA_PROXY_TAG, pool->pool_holder()->name()->as_C_string());\n@@ -316,1 +320,1 @@\n-        classlist_file->print(\" %s\", indy_items->at(i));\n+        w.stream()->print(\" %s\", indy_items->at(i));\n@@ -318,1 +322,1 @@\n-      classlist_file->print_cr(\"\");\n+      w.stream()->cr();\n","filename":"src\/hotspot\/share\/memory\/archiveUtils.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"classfile\/classListWriter.hpp\"\n@@ -4198,1 +4199,1 @@\n-  if (DumpLoadedClassList && classlist_file->is_open()) {\n+  if (ClassListWriter::is_enabled()) {\n@@ -4212,2 +4213,2 @@\n-        \/\/ Not including archived lambda proxy class in the classlist.\n-        assert(!is_non_strong_hidden(), \"unexpected non-string hidden class\");\n+        \/\/ Don't include archived lambda proxy class in the classlist.\n+        assert(!is_non_strong_hidden(), \"unexpected non-strong hidden class\");\n@@ -4243,2 +4244,3 @@\n-      classlist_file->print_cr(\"%s\", name()->as_C_string());\n-      classlist_file->flush();\n+      ClassListWriter w;\n+      w.stream()->print_cr(\"%s\", name()->as_C_string());\n+      w.stream()->flush();\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"classfile\/classListWriter.hpp\"\n@@ -3870,1 +3871,1 @@\n-  return DumpLoadedClassList != NULL && classlist_file != NULL && classlist_file->is_open();\n+  return ClassListWriter::is_enabled();\n@@ -3879,1 +3880,1 @@\n-  assert(DumpLoadedClassList != NULL && classlist_file->is_open(), \"Should be set and open\");\n+  assert(ClassListWriter::is_enabled(), \"Should be set and open\");\n@@ -3884,1 +3885,2 @@\n-    classlist_file->print_cr(\"%s %s\", LambdaFormInvokers::lambda_form_invoker_tag(), c_line);\n+    ClassListWriter w;\n+    w.stream()->print_cr(\"%s %s\", LambdaFormInvokers::lambda_form_invoker_tag(), c_line);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -154,0 +154,1 @@\n+Mutex*   ClassListFile_lock           = NULL;\n@@ -346,0 +347,1 @@\n+  def(ClassListFile_lock           , PaddedMutex  , leaf,        true,  _safepoint_check_never);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -133,0 +133,1 @@\n+extern Mutex*   ClassListFile_lock;              \/\/ ClassListWriter()\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"classfile\/classListWriter.hpp\"\n@@ -393,1 +394,0 @@\n-CDS_ONLY(fileStream* classlist_file;) \/\/ Only dump the classes that can be stored into the CDS archive\n@@ -512,1 +512,1 @@\n-static const char* make_log_name(const char* log_name, const char* force_directory) {\n+const char* make_log_name(const char* log_name, const char* force_directory) {\n@@ -914,9 +914,1 @@\n-#if INCLUDE_CDS\n-  \/\/ For -XX:DumpLoadedClassList=<file> option\n-  if (DumpLoadedClassList != NULL) {\n-    const char* list_name = make_log_name(DumpLoadedClassList, NULL);\n-    classlist_file = new(ResourceObj::C_HEAP, mtInternal)\n-                         fileStream(list_name);\n-    FREE_C_HEAP_ARRAY(char, list_name);\n-  }\n-#endif\n+  ClassListWriter::init();\n@@ -936,5 +928,1 @@\n-#if INCLUDE_CDS\n-  if (classlist_file != NULL) {\n-    delete classlist_file;\n-  }\n-#endif\n+  ClassListWriter::delete_classlist();\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":4,"deletions":16,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -242,2 +242,0 @@\n-CDS_ONLY(extern fileStream*   classlist_file;)\n-\n@@ -264,0 +262,1 @@\n+const char* make_log_name(const char* log_name, const char* force_directory);\n","filename":"src\/hotspot\/share\/utilities\/ostream.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.misc.CDS;\n@@ -266,1 +267,1 @@\n-        if (LambdaProxyClassArchive.isDumpArchive()) {\n+        if (CDS.isDumpingArchive()) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,22 +32,0 @@\n-    private static final boolean dumpArchive;\n-    private static final boolean sharingEnabled;\n-\n-    static {\n-        dumpArchive = CDS.isDumpingEnabled();\n-        sharingEnabled = CDS.isSharingEnabled();\n-    }\n-\n-    \/**\n-     * Check if CDS dynamic dump is enabled.\n-     *\/\n-    static boolean isDumpArchive() {\n-        return dumpArchive;\n-    }\n-\n-    \/**\n-     * Check if CDS sharing is enabled.\n-     *\/\n-    static boolean isSharingEnabled() {\n-        return sharingEnabled;\n-    }\n-\n@@ -97,1 +75,1 @@\n-        if (!isDumpArchive())\n+        if (!CDS.isDumpingArchive())\n@@ -128,1 +106,1 @@\n-        if (isDumpArchive())\n+        if (CDS.isDumpingArchive())\n@@ -132,1 +110,1 @@\n-            !isSharingEnabled() || isSerializable || markerInterfaces.length > 0 || additionalBridges.length > 0)\n+            !CDS.isSharingEnabled() || isSerializable || markerInterfaces.length > 0 || additionalBridges.length > 0)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaProxyClassArchive.java","additions":3,"deletions":25,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+    private static final boolean isDumpingArchive;\n+    private static final boolean isSharingEnabled;\n@@ -40,0 +42,2 @@\n+        isDumpingArchive = isDumpingArchive0();\n+        isSharingEnabled = isSharingEnabled0();\n@@ -48,0 +52,14 @@\n+\n+    \/**\n+      * Is the VM writing to a (static or dynamic) CDS archive.\n+      *\/\n+    public static boolean isDumpingArchive() {\n+        return isDumpingArchive;\n+    }\n+\n+    \/**\n+      * Is sharing enabled via the UseSharedSpaces flag.\n+      *\/\n+    public static boolean isSharingEnabled() {\n+        return isSharingEnabled;\n+    }\n@@ -49,0 +67,2 @@\n+    private static native boolean isDumpingArchive0();\n+    private static native boolean isSharingEnabled0();\n@@ -75,10 +95,0 @@\n-    \/**\n-     * Check if CDS dumping is enabled via the DynamicDumpSharedSpaces or the DumpSharedSpaces flag.\n-     *\/\n-    public static native boolean isDumpingEnabled();\n-\n-    \/**\n-     * Check if sharing is enabled via the UseSharedSpaces flag.\n-     *\/\n-    public static native boolean isSharingEnabled();\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/CDS.java","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-Java_jdk_internal_misc_CDS_isDumpingEnabled(JNIEnv *env, jclass jcls) {\n+Java_jdk_internal_misc_CDS_isDumpingArchive0(JNIEnv *env, jclass jcls) {\n@@ -53,1 +53,1 @@\n-Java_jdk_internal_misc_CDS_isSharingEnabled(JNIEnv *env, jclass jcls) {\n+Java_jdk_internal_misc_CDS_isSharingEnabled0(JNIEnv *env, jclass jcls) {\n","filename":"src\/java.base\/share\/native\/libjava\/CDS.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}