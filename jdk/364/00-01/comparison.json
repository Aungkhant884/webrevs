{"files":[{"patch":"@@ -337,0 +337,1 @@\n+      \/\/ _invoked_name maybe NULL\n@@ -1972,18 +1973,0 @@\n-class RunTimeLambdaProxyClassNode {\n-  RunTimeLambdaProxyClassInfo* _info;\n-public:\n-  RunTimeLambdaProxyClassNode(RunTimeLambdaProxyClassInfo* info) : _info(info) {}\n-  RunTimeLambdaProxyClassInfo* info() const { return _info; }\n-  bool equals(const RunTimeLambdaProxyClassNode& info) const {\n-    return (_info->key().equals(info._info->key()));\n-  }\n-};\n-\n-int compare_runtime_lambda_proxy_class_info(const RunTimeLambdaProxyClassNode& r1,\n-                                            const RunTimeLambdaProxyClassNode& r2) {\n-  ResourceMark rm;\n-  char* name1 = r1.info()->proxy_klass_head()->name()->as_C_string();\n-  char* name2 = r2.info()->proxy_klass_head()->name()->as_C_string();\n-  return strcmp((const char*)name1, (const char*)name2);\n-}\n-\n@@ -2224,0 +2207,16 @@\n+void SystemDictionaryShared::print_on(const char* prefix,\n+                                      RunTimeSharedDictionary builtin_dictionary,\n+                                      RunTimeSharedDictionary unregistered_dictionary,\n+                                      LambdaProxyClassDictionary lambda_dictionary,\n+                                      outputStream* st) {\n+  st->print_cr(\"%sShared Dictionary\", prefix);\n+  SharedDictionaryPrinter p(st);\n+  builtin_dictionary.iterate(&p);\n+  unregistered_dictionary.iterate(&p);\n+  if (!lambda_dictionary.empty()) {\n+    st->print_cr(\"%sShared Lambda Dictionary\", prefix);\n+    SharedLambdaDictionaryPrinter ldp(st);\n+    lambda_dictionary.iterate(&ldp);\n+  }\n+}\n+\n@@ -2226,9 +2225,1 @@\n-    st->print_cr(\"Shared Dictionary\");\n-    SharedDictionaryPrinter p(st);\n-    _builtin_dictionary.iterate(&p);\n-    _unregistered_dictionary.iterate(&p);\n-    if (!_lambda_proxy_class_dictionary.empty()) {\n-      st->print_cr(\"Shared Lambda Dictionary\");\n-      SharedLambdaDictionaryPrinter ldp(st);\n-      _lambda_proxy_class_dictionary.iterate(&ldp);\n-    }\n+    print_on(\"\", _builtin_dictionary, _unregistered_dictionary, _lambda_proxy_class_dictionary, st);\n@@ -2236,8 +2227,2 @@\n-      st->print_cr(\"Dynamic Shared Dictionary\");\n-      _dynamic_builtin_dictionary.iterate(&p);\n-      _unregistered_dictionary.iterate(&p);\n-      if (!_dynamic_lambda_proxy_class_dictionary.empty()) {\n-        st->print_cr(\"Dynamic Shared Lambda Dictionary\");\n-        SharedLambdaDictionaryPrinter ldp(st);\n-        _dynamic_lambda_proxy_class_dictionary.iterate(&ldp);\n-      }\n+      print_on(\"\", _dynamic_builtin_dictionary, _dynamic_unregistered_dictionary,\n+               _dynamic_lambda_proxy_class_dictionary, st);\n@@ -2275,0 +2260,1 @@\n+protected:\n@@ -2299,10 +2285,1 @@\n-class ArchivedLambdaMirrorPatcher {\n-  static void update(Klass* k) {\n-    if (k->has_raw_archived_mirror()) {\n-      oop m = HeapShared::materialize_archived_object(k->archived_java_mirror_raw_narrow());\n-      if (m != NULL) {\n-        java_lang_Class::update_archived_mirror_native_pointers(m);\n-      }\n-    }\n-  }\n-\n+class ArchivedLambdaMirrorPatcher : public ArchivedMirrorPatcher {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":22,"deletions":45,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -223,0 +223,5 @@\n+  static void print_on(const char* prefix,\n+                       RunTimeSharedDictionary builtin_dictionary,\n+                       RunTimeSharedDictionary unregistered_dictionary,\n+                       LambdaProxyClassDictionary lambda_dictionary,\n+                       outputStream* st) NOT_CDS_RETURN;\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}