{"files":[{"patch":"@@ -1243,2 +1243,1 @@\n-                              const bool can_access_vm_annotations,\n-                              TRAPS) {\n+                              const bool can_access_vm_annotations) {\n@@ -1421,2 +1420,1 @@\n-                          _can_access_vm_annotations,\n-                          CHECK);\n+                          _can_access_vm_annotations);\n@@ -2737,2 +2735,1 @@\n-                          _can_access_vm_annotations,\n-                          CHECK_NULL);\n+                          _can_access_vm_annotations);\n@@ -3566,1 +3563,1 @@\n-void ClassFileParser::parse_classfile_synthetic_attribute(TRAPS) {\n+void ClassFileParser::parse_classfile_synthetic_attribute() {\n@@ -3766,1 +3763,1 @@\n-      parse_classfile_synthetic_attribute(CHECK);\n+      parse_classfile_synthetic_attribute();\n@@ -3804,2 +3801,1 @@\n-                          _can_access_vm_annotations,\n-                          CHECK);\n+                          _can_access_vm_annotations);\n@@ -4075,2 +4071,1 @@\n-                                            int java_fields_count,\n-                                            TRAPS) {\n+                                            int java_fields_count) {\n@@ -5421,1 +5416,1 @@\n-  apply_parsed_class_metadata(ik, _java_fields_count, CHECK);\n+  apply_parsed_class_metadata(ik, _java_fields_count);\n@@ -5640,2 +5635,2 @@\n-void ClassFileParser::prepend_host_package_name(const InstanceKlass* unsafe_anonymous_host, TRAPS) {\n-  ResourceMark rm(THREAD);\n+void ClassFileParser::prepend_host_package_name(Thread* current, const InstanceKlass* unsafe_anonymous_host) {\n+  ResourceMark rm(current);\n@@ -5677,1 +5672,1 @@\n-    prepend_host_package_name(_unsafe_anonymous_host, CHECK);\n+    prepend_host_package_name(THREAD, _unsafe_anonymous_host);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":11,"deletions":16,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -214,1 +214,1 @@\n-  void prepend_host_package_name(const InstanceKlass* unsafe_anonymous_host, TRAPS);\n+  void prepend_host_package_name(Thread* current, const InstanceKlass* unsafe_anonymous_host);\n@@ -231,1 +231,1 @@\n-  void apply_parsed_class_metadata(InstanceKlass* k, int fields_count, TRAPS);\n+  void apply_parsed_class_metadata(InstanceKlass* k, int fields_count);\n@@ -352,1 +352,1 @@\n-  void parse_classfile_synthetic_attribute(TRAPS);\n+  void parse_classfile_synthetic_attribute();\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-    const methodHandle& m, VerificationType thisKlass, TRAPS) {\n+    const methodHandle& m, VerificationType thisKlass) {\n","filename":"src\/hotspot\/share\/classfile\/stackMapFrame.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -156,1 +156,1 @@\n-    const methodHandle& m, VerificationType thisKlass, TRAPS);\n+    const methodHandle& m, VerificationType thisKlass);\n","filename":"src\/hotspot\/share\/classfile\/stackMapFrame.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -125,2 +125,2 @@\n-    VerificationType comp_this = get_component(context, CHECK_false);\n-    VerificationType comp_from = from.get_component(context, CHECK_false);\n+    VerificationType comp_this = get_component(context);\n+    VerificationType comp_from = from.get_component(context);\n@@ -135,1 +135,1 @@\n-VerificationType VerificationType::get_component(ClassVerifier *context, TRAPS) const {\n+VerificationType VerificationType::get_component(ClassVerifier *context) const {\n","filename":"src\/hotspot\/share\/classfile\/verificationType.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -319,1 +319,1 @@\n-  VerificationType get_component(ClassVerifier* context, TRAPS) const;\n+  VerificationType get_component(ClassVerifier* context) const;\n","filename":"src\/hotspot\/share\/classfile\/verificationType.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -137,2 +137,4 @@\n-void Verifier::log_end_verification(outputStream* st, const char* klassName, Symbol* exception_name, TRAPS) {\n-  if (HAS_PENDING_EXCEPTION) {\n+void Verifier::log_end_verification(outputStream* st, const char* klassName, Symbol* exception_name, oop pending_exception) {\n+   Thread* THREAD = Thread::current();\n+\n+  if (pending_exception != NULL) {\n@@ -144,1 +146,1 @@\n-                 PENDING_EXCEPTION->klass()->external_name(), ex_msg);\n+                   pending_exception->klass()->external_name(), ex_msg);\n@@ -147,1 +149,1 @@\n-                 PENDING_EXCEPTION->klass()->external_name());\n+                   pending_exception->klass()->external_name());\n@@ -196,1 +198,1 @@\n-    ClassVerifier split_verifier(klass, THREAD);\n+    ClassVerifier split_verifier(THREAD->as_Java_thread(), klass);\n@@ -231,1 +233,1 @@\n-    log_end_verification(&ls, klass->external_name(), exception_name, THREAD);\n+    log_end_verification(&ls, klass->external_name(), exception_name, PENDING_EXCEPTION);\n@@ -236,1 +238,1 @@\n-    log_end_verification(&ls, klass->external_name(), exception_name, THREAD);\n+    log_end_verification(&ls, klass->external_name(), exception_name, PENDING_EXCEPTION);\n@@ -592,3 +594,2 @@\n-ClassVerifier::ClassVerifier(\n-    InstanceKlass* klass, TRAPS)\n-    : _thread(THREAD), _previous_symbol(NULL), _symbols(NULL), _exception_type(NULL),\n+ClassVerifier::ClassVerifier(JavaThread* current, InstanceKlass* klass)\n+    : _thread(current), _previous_symbol(NULL), _symbols(NULL), _exception_type(NULL),\n@@ -656,2 +657,1 @@\n-                                        sig_as_verification_types* sig_verif_types,\n-                                        TRAPS) {\n+                                        sig_as_verification_types* sig_verif_types) {\n@@ -691,1 +691,1 @@\n-                                            int sig_index, TRAPS) {\n+                                            int sig_index) {\n@@ -695,1 +695,1 @@\n-  translate_signature(method_sig, sig_verif_types, CHECK_VERIFY(this));\n+  translate_signature(method_sig, sig_verif_types);\n@@ -721,2 +721,1 @@\n-  VerificationType return_type = current_frame.set_locals_from_arg(\n-    m, current_type(), CHECK_VERIFY(this));\n+  VerificationType return_type = current_frame.set_locals_from_arg( m, current_type());\n@@ -1052,2 +1051,1 @@\n-            VerificationType component =\n-              atype.get_component(this, CHECK_VERIFY(this));\n+            VerificationType component = atype.get_component(this);\n@@ -2830,1 +2828,1 @@\n-    create_method_sig_entry(mth_sig_verif_types, sig_index, CHECK_VERIFY(this));\n+    create_method_sig_entry(mth_sig_verif_types, sig_index);\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":17,"deletions":19,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -49,1 +49,2 @@\n-  static void log_end_verification(outputStream* st, const char* klassName, Symbol* exception_name, TRAPS);\n+  static void log_end_verification(outputStream* st, const char* klassName, Symbol* exception_name,\n+                                    oop pending_exception);\n@@ -401,1 +402,1 @@\n-  ClassVerifier(InstanceKlass* klass, TRAPS);\n+  ClassVerifier(JavaThread* current, InstanceKlass* klass);\n@@ -418,1 +419,1 @@\n-  void translate_signature(Symbol* const method_sig, sig_as_verification_types* sig_verif_types, TRAPS);\n+  void translate_signature(Symbol* const method_sig, sig_as_verification_types* sig_verif_types);\n@@ -421,1 +422,1 @@\n-  void create_method_sig_entry(sig_as_verification_types* sig_verif_types, int sig_index, TRAPS);\n+  void create_method_sig_entry(sig_as_verification_types* sig_verif_types, int sig_index);\n","filename":"src\/hotspot\/share\/classfile\/verifier.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}