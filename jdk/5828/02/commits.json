[{"commit":{"message":"fix linux\/aarch64 build: s\/r18\/r18_tls"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp"}],"sha":"ba55aa0e707ea348ce2699d234fc040a5a03db1b"},{"commit":{"message":"remove pusha\/popa, be explicit in the template generator\n\nRestore looks like this now:\n```\n  0x0000000106e4dfcc:   movk    x9, #0x5e4, lsl #16\n  0x0000000106e4dfd0:   movk    x9, #0x1, lsl #32\n  0x0000000106e4dfd4:   blr x9\n  0x0000000106e4dfd8:   ldp x2, x3, [sp, #16]\n  0x0000000106e4dfdc:   ldp x4, x5, [sp, #32]\n  0x0000000106e4dfe0:   ldp x6, x7, [sp, #48]\n  0x0000000106e4dfe4:   ldp x8, x9, [sp, #64]\n  0x0000000106e4dfe8:   ldp x10, x11, [sp, #80]\n  0x0000000106e4dfec:   ldp x12, x13, [sp, #96]\n  0x0000000106e4dff0:   ldp x14, x15, [sp, #112]\n  0x0000000106e4dff4:   ldp x16, x17, [sp, #128]\n  0x0000000106e4dff8:   ldp x0, x1, [sp], #144\n  0x0000000106e4dffc:   ldp xzr, x19, [sp], #16\n  0x0000000106e4e000:   ldp x22, x23, [sp, #16]\n  0x0000000106e4e004:   ldp x24, x25, [sp, #32]\n  0x0000000106e4e008:   ldp x26, x27, [sp, #48]\n  0x0000000106e4e00c:   ldp x28, x29, [sp, #64]\n  0x0000000106e4e010:   ldp x30, xzr, [sp, #80]\n  0x0000000106e4e014:   ldp x20, x21, [sp], #96\n  0x0000000106e4e018:   ldur    x12, [x29, #-24]\n  0x0000000106e4e01c:   ldr x22, [x12, #16]\n  0x0000000106e4e020:   add x22, x22, #0x30\n  0x0000000106e4e024:   ldr x8, [x28, #8]\n```"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp"}],"sha":"84c5c902cbfef8a24a3e2b0123596e2ef125b07f"},{"commit":{"message":"JDK-8274795: avoid spilling and restoring r18 in macro assembler\n\nr18 should not be used as it is reserved as platform register. Linux is\nfine with userspace using it, but Windows and also recently macOS (\nhttps:\/\/github.com\/openjdk\/jdk11u-dev\/pull\/301#issuecomment-911998917 )\nare actually using it on the kernel side.\n\nThe macro assembler uses the bit pattern `0x7fffffff` (== `r0-r30`) to\nspecify which registers to spill; fortunately this helper is only used\nhere:\nhttps:\/\/github.com\/openjdk\/jdk\/blob\/c05dc268acaf87236f30cf700ea3ac778e3b20e5\/src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp#L1400-L1404\n\nI haven't seen causing this particular instance any issues in practice\n_yet_, presumably because it looks hard to align the stars in order to\ntrigger a problem (between stp and ldp of r18 a transition to kernel\nspace must happen *and* the kernel needs to do something with r18). But\njdk11u-dev has more usages of the `::pusha`\/`::popa` macro and that\ncauses troubles as explained in the link above.\n\nOutput of `-XX:+PrintInterpreter` before this change:\n```\n----------------------------------------------------------------------\nmethod entry point (kind = native)  [0x0000000138809b00, 0x000000013880a280]  1920 bytes\n--------------------------------------------------------------------------------\n  0x0000000138809b00:   ldr x2, [x12, #16]\n  0x0000000138809b04:   ldrh    w2, [x2, #44]\n  0x0000000138809b08:   add x24, x20, x2, uxtx #3\n  0x0000000138809b0c:   sub x24, x24, #0x8\n[...]\n  0x0000000138809fa4:   stp x16, x17, [sp, #128]\n  0x0000000138809fa8:   stp x18, x19, [sp, #144]\n  0x0000000138809fac:   stp x20, x21, [sp, #160]\n[...]\n  0x0000000138809fc0:   stp x30, xzr, [sp, #240]\n  0x0000000138809fc4:   mov x0, x28\n ;; 0x10864ACCC\n  0x0000000138809fc8:   mov x9, #0xaccc                 \/\/ #44236\n  0x0000000138809fcc:   movk    x9, #0x864, lsl #16\n  0x0000000138809fd0:   movk    x9, #0x1, lsl #32\n  0x0000000138809fd4:   blr x9\n  0x0000000138809fd8:   ldp x2, x3, [sp, #16]\n[...]\n  0x0000000138809ff4:   ldp x16, x17, [sp, #128]\n  0x0000000138809ff8:   ldp x18, x19, [sp, #144]\n  0x0000000138809ffc:   ldp x20, x21, [sp, #160]\n```\n\nAfter:\n```\n----------------------------------------------------------------------\nmethod entry point (kind = native)  [0x0000000108e4db00, 0x0000000108e4e280]  1920 bytes\n\n--------------------------------------------------------------------------------\n  0x0000000108e4db00:   ldr x2, [x12, #16]\n  0x0000000108e4db04:   ldrh    w2, [x2, #44]\n  0x0000000108e4db08:   add x24, x20, x2, uxtx #3\n  0x0000000108e4db0c:   sub x24, x24, #0x8\n[...]\n  0x0000000108e4dfa4:   stp x16, x17, [sp, #128]\n  0x0000000108e4dfa8:   stp x19, x20, [sp, #144]\n  0x0000000108e4dfac:   stp x21, x22, [sp, #160]\n[...]\n  0x0000000108e4dfbc:   stp x29, x30, [sp, #224]\n  0x0000000108e4dfc0:   mov x0, x28\n ;; 0x107E4A06C\n  0x0000000108e4dfc4:   mov x9, #0xa06c                 \/\/ #41068\n  0x0000000108e4dfc8:   movk    x9, #0x7e4, lsl #16\n  0x0000000108e4dfcc:   movk    x9, #0x1, lsl #32\n  0x0000000108e4dfd0:   blr x9\n  0x0000000108e4dfd4:   ldp x2, x3, [sp, #16]\n[...]\n  0x0000000108e4dff0:   ldp x16, x17, [sp, #128]\n  0x0000000108e4dff4:   ldp x19, x20, [sp, #144]\n  0x0000000108e4dff8:   ldp x21, x22, [sp, #160]\n[...]\n```"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"}],"sha":"7c5ebae7ac4f60bf7b1c5eddfeaab855d7d1dced"}]