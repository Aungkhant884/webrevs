{"files":[{"patch":"@@ -336,1 +336,1 @@\n-  address heap_end = (address)G1CollectedHeap::heap()->reserved().end();\n+  address heap_end = (address)G1CollectedHeap::heap()->reserved_region().end();\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -214,2 +214,2 @@\n-      address start = (address)Universe::heap()->reserved().start();\n-      address end = (address)Universe::heap()->reserved().end();\n+      address start = (address)Universe::heap()->reserved_region().start();\n+      address end = (address)Universe::heap()->reserved_region().end();\n@@ -1570,2 +1570,1 @@\n-      assert(UseG1GC, \"used by G1 only\");\n-      mapping_offset = requested_base - (char*)Universe::heap()->reserved().start();\n+      mapping_offset = requested_base - (char*)Universe::heap()->reserved_region().start();\n@@ -2034,2 +2033,2 @@\n-                UseCompressedOops ? p2i(CompressedOops::begin()) : p2i((address)Universe::heap()->reserved().start()),\n-                UseCompressedOops ? p2i(CompressedOops::end()) : p2i((address)Universe::heap()->reserved().end()));\n+                UseCompressedOops ? p2i(CompressedOops::begin()) : p2i((address)Universe::heap()->reserved_region().start()),\n+                UseCompressedOops ? p2i(CompressedOops::end()) : p2i((address)Universe::heap()->reserved_region().end()));\n@@ -2094,1 +2093,1 @@\n-    MemRegion heap_range = Universe::heap()->reserved();\n+    MemRegion heap_range = Universe::heap()->reserved_region();\n@@ -2097,6 +2096,4 @@\n-    if (UseG1GC) {\n-      address heap_end = (address)heap_range.end();\n-      address mapped_heap_region_end = (address)_mapped_heap_memregion.end();\n-      assert(heap_end - mapped_heap_region_end < (intx)(HeapRegion::GrainBytes),\n-             \"must be at the top of the heap to avoid fragmentation\");\n-    }\n+    address heap_end = (address)heap_range.end();\n+    address mapped_heap_region_end = (address)_mapped_heap_memregion.end();\n+    assert(heap_end - mapped_heap_region_end < (intx)(HeapRegion::GrainBytes),\n+           \"must be at the top of the heap to avoid fragmentation\");\n@@ -2127,1 +2124,1 @@\n-  HeapWord* start = Universe::heap()->alloc_archive_space(word_size, (HeapWord*)requested_start);\n+  HeapWord* start = Universe::heap()->allocate_archive_space(word_size, (HeapWord*)requested_start);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -535,1 +535,1 @@\n-                                       p2i((address)G1CollectedHeap::heap()->reserved().start()),\n+                                       p2i((address)G1CollectedHeap::heap()->reserved_region().start()),\n@@ -537,1 +537,1 @@\n-                                       p2i((address)G1CollectedHeap::heap()->reserved().end()));\n+                                       p2i((address)G1CollectedHeap::heap()->reserved_region().end()));\n@@ -1703,2 +1703,2 @@\n-  address actual_base = (address)G1CollectedHeap::heap()->reserved().start();\n-  address actual_end  = (address)G1CollectedHeap::heap()->reserved().end();\n+  address actual_base = (address)G1CollectedHeap::heap()->reserved_region().start();\n+  address actual_end  = (address)G1CollectedHeap::heap()->reserved_region().end();\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -531,1 +531,1 @@\n-HeapWord* G1CollectedHeap::alloc_archive_space(size_t word_size, HeapWord* preferred_addr) {\n+HeapWord* G1CollectedHeap::allocate_archive_space(size_t word_size, HeapWord* preferred_addr) {\n@@ -535,1 +535,1 @@\n-  MemRegion reserved = _hrm.reserved();\n+  MemRegion reserved = reserved_region();\n@@ -589,1 +589,1 @@\n-  MemRegion reserved = _hrm.reserved();\n+  MemRegion reserved = reserved_region();\n@@ -1448,1 +1448,1 @@\n-  _bot = new G1BlockOffsetTable(reserved(), bot_storage);\n+  _bot = new G1BlockOffsetTable(reserved_region(), bot_storage);\n@@ -1453,1 +1453,1 @@\n-    _region_attr.initialize(reserved(), granularity);\n+    _region_attr.initialize(reserved_region(), granularity);\n@@ -2205,2 +2205,2 @@\n-            p2i(_hrm.reserved().start()),\n-            p2i(_hrm.reserved().end()));\n+            p2i(reserved_region().start()),\n+            p2i(reserved_region().end()));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -714,1 +714,1 @@\n-  HeapWord* alloc_archive_space(size_t word_size, HeapWord* preferred_addr) override;\n+  HeapWord* allocate_archive_space(size_t word_size, HeapWord* preferred_addr) override;\n@@ -723,1 +723,1 @@\n-  \/\/ which had been allocated by alloc_archive_space. This should be called\n+  \/\/ which had been allocated by allocate_archive_space. This should be called\n@@ -1051,1 +1051,1 @@\n-    return reserved().contains(addr);\n+    return reserved_region().contains(addr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -124,2 +124,2 @@\n-         p2i(addr), p2i(reserved().start()), p2i(reserved().end()));\n-  return (uint)(pointer_delta(addr, reserved().start(), sizeof(uint8_t)) >> HeapRegion::LogOfHRGrainBytes);\n+         p2i(addr), p2i(reserved_region().start()), p2i(reserved_region().end()));\n+  return (uint)(pointer_delta(addr, reserved_region().start(), sizeof(uint8_t)) >> HeapRegion::LogOfHRGrainBytes);\n@@ -129,1 +129,1 @@\n-  return _hrm.reserved().start() + index * HeapRegion::GrainWords;\n+  return reserved_region().start() + index * HeapRegion::GrainWords;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -371,1 +371,1 @@\n-  _heap(_g1h->reserved()),\n+  _heap(_g1h->reserved_region()),\n@@ -419,1 +419,1 @@\n-  _mark_bitmap.initialize(g1h->reserved(), bitmap_storage);\n+  _mark_bitmap.initialize(g1h->reserved_region(), bitmap_storage);\n@@ -2933,1 +2933,1 @@\n-  MemRegion reserved = g1h->reserved();\n+  MemRegion reserved = g1h->reserved_region();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-  _region_attr_table.initialize(heap->reserved(), HeapRegion::GrainBytes);\n+  _region_attr_table.initialize(heap->reserved_region(), HeapRegion::GrainBytes);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -189,1 +189,0 @@\n-  MemRegion reserved_region() const { return _reserved; }\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-  MemRegion reserved() const {\n+  MemRegion reserved_region() const {\n@@ -528,1 +528,1 @@\n-  virtual HeapWord* alloc_archive_space(size_t word_size, HeapWord* preferred_addr) { return nullptr; }\n+  virtual HeapWord* allocate_archive_space(size_t word_size, HeapWord* preferred_addr) { return nullptr; }\n@@ -530,1 +530,1 @@\n-  \/\/ This must be called after alloc_archive_space, and after class loading has occurred.\n+  \/\/ This must be called after allocate_archive_space, and after class loading has occurred.\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -148,1 +148,0 @@\n-  MemRegion reserved_region() const { return _reserved; }\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -470,1 +470,0 @@\n-  MemRegion reserved_region() const { return _reserved; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}