{"files":[{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test symbolsHsErr\n+ * @summary Test that function names are present in native frames of hs-err file as a proof that symbols are available.\n+ * @library \/test\/lib\n+ * @requires vm.flagless\n+ * @requires vm.debug\n+ * @requires os.family == \"windows\"\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver TestSymbolsInHsErrFile\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestSymbolsInHsErrFile {\n+\n+  public static void main(String[] args) throws Exception {\n+\n+    \/\/ Start a jvm and cause a SIGSEGV \/ ACCESS_VIOLATION\n+    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+        \"-XX:+UnlockDiagnosticVMOptions\",\n+        \"-Xmx100M\",\n+        \"-XX:-CreateCoredumpOnCrash\",\n+        \"-XX:ErrorHandlerTest=14\",\n+        \"-version\");\n+\n+    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    output.shouldNotHaveExitValue(0);\n+\n+    \/\/ Verify that the hs_err problematic frame contains a function name that points to origin of the crash;\n+    \/\/ on Windows\/MSVC, if symbols are present and loaded, we should see a ref to  either 'crash_with_segfault'\n+    \/\/ 'VMError::controlled_crash' depending on whether the compile optimizations (i.e. crash_with_segfault\n+    \/\/ was inlined or not):\n+    \/\/ # Problematic frame:\n+    \/\/ # V  [jvm.dll+0x.....]  crash_with_segfault+0x10\n+    \/\/ or\n+    \/\/ # V  [jvm.dll+0x.....]  VMError::controlled_crash+0x99\n+    \/\/\n+    \/\/ If symbols could not be loaded, however, then the frame will contain not function name at all, i.e.\n+    \/\/ # Problematic frame:\n+    \/\/ # V  [jvm.dll+0x.....]\n+    \/\/ NB: this is not true for other OS\/Compilers, where the functions names are present even with no symbols,\n+    \/\/ hence this test being restricted to Windows only.\n+    output.shouldMatch((\"# V  \\\\[jvm.dll.*\\\\].*(crash_with_segfault|controlled_crash).*\"));\n+\n+  }\n+\n+}\n+\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestSymbolsInHsErrFile.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}