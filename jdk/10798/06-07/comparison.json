{"files":[{"patch":"@@ -2987,0 +2987,1 @@\n+        boolean sequentialIdentifiers = false;\n@@ -3025,0 +3026,4 @@\n+                    if (inSelectionAndParenthesis && sequentialIdentifiers) {\n+                        return ForInitResult.RecordPattern;\n+                    }\n+                    sequentialIdentifiers = true;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+        assertEquals(List.of(Color.RED), test_jep_example());\n@@ -160,2 +161,5 @@\n-        List<Point> points = null;\n-        List<GPoint<Integer>> generic_points = null;\n+        List<Point>                 points = null;\n+        List<GPoint<Integer>>       generic_points = null;\n+        List<GPoint<Point>>         generic_points_nested = null;\n+        List<GPoint<VoidPoint>>     generic_vpoints_nested = null;\n+\n@@ -169,0 +173,24 @@\n+        for (GPoint<Point>(Point(Integer a, Integer b), Point c) : generic_points_nested) { }\n+        for (GPoint<Point>(Point(var a, Integer b), Point c) : generic_points_nested) { }\n+        for (GPoint<VoidPoint>(VoidPoint(), VoidPoint()) : generic_vpoints_nested) { }\n+    }\n+\n+    static List<Color> test_jep_example() {\n+        Rectangle rect = new Rectangle(\n+                new ColoredPoint(new Point(1,2), Color.RED),\n+                new ColoredPoint(new Point(3,4), Color.GREEN)\n+        );\n+        Rectangle[] rArr = {rect};\n+        return printUpperLeftColors(rArr);\n+    }\n+\n+    enum Color { RED, GREEN, BLUE }\n+    record ColoredPoint(Point p, Color c) {}\n+    record Rectangle(ColoredPoint upperLeft, ColoredPoint lowerRight) {}\n+\n+    static List<Color> printUpperLeftColors(Rectangle[] r) {\n+        List<Color> ret = new ArrayList<>();\n+        for (Rectangle(ColoredPoint(Point p, Color c), ColoredPoint lr): r) {\n+            ret.add(c);\n+        }\n+        return ret;\n@@ -209,0 +237,2 @@\n+    record VoidPoint() { }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/ForEachPatterns.java","additions":32,"deletions":2,"binary":false,"changes":34,"status":"modified"}]}