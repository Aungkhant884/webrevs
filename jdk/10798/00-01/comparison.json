{"files":[{"patch":"@@ -1576,1 +1576,1 @@\n-                chk.checkType(tree.expr.pos(), tree.elementType, clazztype);\n+                checkCastablePattern(tree.expr.pos(), tree.elementType, clazztype);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -16,0 +16,1 @@\n+        List<IPoint>  in_iface            = List.of(new Point(1, 2), new Point(2, 3));\n@@ -30,0 +31,1 @@\n+        assertEx(ForEachPatterns::simpleDecostructionPatternWithAccesses, null, NullPointerException.class);\n@@ -41,0 +43,1 @@\n+        assertEquals(8, sealedRecordPassBaseType(in_iface));\n@@ -116,0 +119,10 @@\n+    static int sealedRecordPassBaseType(List<IPoint> points) {\n+        int result = 0;\n+\n+        for(Point(var x, var y) : points) {\n+            result += (x + y);\n+        }\n+\n+        return result;\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/ForEachPatterns.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-    static void applicability_error1(List<Object> points) { \/\/ error\n+    static void exhaustivity_error1(List<Object> points) {\n@@ -17,1 +17,1 @@\n-    static void applicability_error2(List points) { \/\/ error\n+    static void exhaustivity_error2(List points) {\n@@ -23,3 +23,3 @@\n-    static void applicability_error3(List<Object> points) { \/\/ error\n-        for (Interface p: points) {\n-            System.out.println(p);\n+    static void exhaustivity_error3(List<OPoint> opoints) {\n+        for (OPoint(String s, String t) : opoints) {\n+            System.out.println(s);\n@@ -29,3 +29,3 @@\n-    static void exhaustivity_error(List<OPoint> opoints) { \/\/ error\n-        for (OPoint(String s, String t) : opoints) {\n-            System.out.println(s);\n+    static void applicability_error(List<Object> points) {\n+        for (Interface p: points) {\n+            System.out.println(p);\n@@ -34,0 +34,1 @@\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/ForEachPatternsErrors.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1,3 +1,1 @@\n-ForEachPatternsErrors.java:12:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Object, ForEachPatternsErrors.Point)\n-ForEachPatternsErrors.java:18:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Object, ForEachPatternsErrors.Point)\n-ForEachPatternsErrors.java:24:27: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Object, ForEachPatternsErrors.Interface)\n+ForEachPatternsErrors.java:30:27: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Object, ForEachPatternsErrors.Interface)\n@@ -6,1 +4,1 @@\n-ForEachPatternsErrors.java:30:9: compiler.err.not.exhaustive\n+ForEachPatternsErrors.java:24:9: compiler.err.not.exhaustive\n@@ -9,1 +7,1 @@\n-6 errors\n\\ No newline at end of file\n+4 errors\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/patterns\/ForEachPatternsErrors.out","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"}]}