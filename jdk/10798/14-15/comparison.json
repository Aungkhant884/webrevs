{"files":[{"patch":"@@ -2984,1 +2984,0 @@\n-        int depth = 0;\n@@ -2987,1 +2986,1 @@\n-        ForInitResult defaultResult = ForInitResult.LocalVarDecl;\n+        int typeParameterPossibleStart = -1;\n@@ -2993,1 +2992,10 @@\n-                case COMMA: case EXTENDS: case SUPER:  case AMP: case QUES:\n+                case COMMA:\n+                    typeParameterPossibleStart = lookahead;\n+                    break;\n+                case QUES:\n+                    \/\/ \"?\" only allowed in a type parameter position - otherwise it's an expression\n+                    if (typeParameterPossibleStart == lookahead - 1) break;\n+                    else return ForInitResult.LocalVarDecl;\n+                case EXTENDS: case SUPER: case AMP:\n+                case GTGTGT: case GTGT: case GT:\n+                case FINAL: case ELLIPSIS:\n@@ -3029,3 +3037,2 @@\n-                case FINAL:\n-                case ELLIPSIS:\n-                case MONKEYS_AT:\n+                case MONKEYS_AT: {\n+                    int prevLookahead = lookahead;\n@@ -3033,0 +3040,4 @@\n+                    if (typeParameterPossibleStart == prevLookahead - 1) {\n+                        \/\/ move possible start of type param after the anno\n+                        typeParameterPossibleStart = lookahead;\n+                    }\n@@ -3034,0 +3045,1 @@\n+                }\n@@ -3039,7 +3051,1 @@\n-                    depth++; break;\n-                case GTGTGT:\n-                    depth--;\n-                case GTGT:\n-                    depth--;\n-                case GT:\n-                    depth--;\n+                    typeParameterPossibleStart = lookahead;\n@@ -3049,1 +3055,1 @@\n-                    return defaultResult;\n+                    return ForInitResult.LocalVarDecl;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":20,"deletions":14,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -6,0 +6,2 @@\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n@@ -7,0 +9,1 @@\n+import java.util.Collection;\n@@ -158,1 +161,5 @@\n-    static void forParsing(int i) {\n+    static void m(int i) { }\n+    static void m(GPoint<?> gpoint, int i) { }\n+    static int b() { return 42; }\n+\n+    static void forParsing(int i, boolean cond) {\n@@ -179,0 +186,3 @@\n+        for (m(cond ? b() : i) ; ;) {}\n+        for (m((GPoint<?>)null, cond ? b() : i) ; ;) {}\n+        for (GPoint<@Annot(field = \"\") ? extends Point>(var x, var y) : generic_points_nested) {};\n@@ -223,0 +233,1 @@\n+    @Target({ElementType.TYPE_USE, ElementType.LOCAL_VARIABLE})\n","filename":"test\/langtools\/tools\/javac\/patterns\/ForEachPatterns.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"}]}