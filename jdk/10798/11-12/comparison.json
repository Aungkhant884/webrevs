{"files":[{"patch":"@@ -718,1 +718,1 @@\n-                Type selectorType = tree.varOrRecordPattern.type;\n+                Type selectorType = types.classBound(tree.elementType);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -15,14 +15,14 @@\n-        List<Point>   in                  = List.of(new Point(1, 2), new Point(2, 3));\n-        List<IPoint>  in_iface            = List.of(new Point(1, 2), new Point(2, 3));\n-        List          inRaw               = List.of(new Point(1, 2), new Point(2, 3), new Frog(3, 4));\n-        List<PointEx> inWithPointEx       = List.of(new PointEx(1, 2));\n-        byte[]        inBytes             = { (byte) 127, (byte) 127 };\n-        List<Point>   inWithNullComponent = List.of(new Point(1, null), new Point(2, 3));\n-        List<Point>   inWithNull          = new ArrayList<>();\n-        Point[]       inArray             = in.toArray(Point[]::new);\n-        List<WithPrimitives>   inWithPrimitives\n-                                          = List.of(new WithPrimitives(1, 2),\n-                                                    new WithPrimitives(2, 3));\n-\n-        inWithNull.add(new Point(2, 3));\n-        inWithNull.add(null);\n+        List<Point>             in                   = List.of(new Point(1, 2), new Point(2, 3));\n+        List<IPoint>            in_iface             = List.of(new Point(1, 2), new Point(2, 3));\n+        List                    inRaw                = List.of(new Point(1, 2), new Point(2, 3), new Frog(3, 4));\n+        List<PointEx>           inWithPointEx        = List.of(new PointEx(1, 2));\n+        byte[]                  inBytes              = { (byte) 127, (byte) 127 };\n+        List<Point>             inWithNullComponent  = List.of(new Point(1, null), new Point(2, 3));\n+        Point[]                 inArray              = in.toArray(Point[]::new);\n+        List<WithPrimitives>    inWithPrimitives     = List.of(new WithPrimitives(1, 2), new WithPrimitives(2, 3));\n+        IParent                 recs []              = { new Rec(1) };\n+        List<Point>             inWithNull           = new ArrayList<>();\n+        {\n+            inWithNull.add(new Point(2, 3));\n+            inWithNull.add(null);\n+        }\n@@ -47,1 +47,2 @@\n-        assertEquals(List.of(Color.RED), test_jep_example());\n+        assertEquals(List.of(Color.RED), JEPExample());\n+        assertEquals(1, arrayWithSealed(recs));\n@@ -158,4 +159,1 @@\n-    static <T> void method() {}\n-    static <T> void method2(Function<Integer, Integer> f) {}\n-\n-    static void for_parsing(int i) {\n+    static void forParsing(int i) {\n@@ -169,1 +167,0 @@\n-\n@@ -184,0 +181,3 @@\n+    \/\/where\n+    static <T> void method() {}\n+    static <T> void method2(Function<Integer, Integer> f) {}\n@@ -185,1 +185,1 @@\n-    static List<Color> test_jep_example() {\n+    static List<Color> JEPExample() {\n@@ -193,5 +193,1 @@\n-\n-    enum Color { RED, GREEN, BLUE }\n-    record ColoredPoint(Point p, Color c) {}\n-    record Rectangle(ColoredPoint upperLeft, ColoredPoint lowerRight) {}\n-\n+    \/\/where\n@@ -206,0 +202,41 @@\n+    static int arrayWithSealed(IParent[] recs){\n+        for (Rec(int a) : recs) {\n+            return a;\n+        }\n+        return -1;\n+    }\n+\n+    enum Color { RED, GREEN, BLUE }\n+    record ColoredPoint(Point p, Color c) {}\n+    record Rectangle(ColoredPoint upperLeft, ColoredPoint lowerRight) {}\n+\n+    sealed interface IParent permits Rec {}\n+    record Rec(int a) implements IParent {}\n+\n+    sealed interface IPoint permits Point {}\n+    record Point(Integer x, Integer y) implements IPoint { }\n+\n+    record GPoint<T>(T x, T y) { }\n+    record VoidPoint() { }\n+    record RecordOfLists(List<Integer> o) {}\n+    record RecordOfLists2(List<List<Integer>> o) {}\n+\n+    @interface Annot {\n+        String field();\n+    }\n+    record Frog(Integer x, Integer y) { }\n+    record PointEx(Integer x, Integer y) {\n+        @Override\n+        public Integer x() {\n+            throw new TestPatternFailed(EXCEPTION_MESSAGE);\n+        }\n+    }\n+    record WithPrimitives(int x, double y) { }\n+    static final String EXCEPTION_MESSAGE = \"exception-message\";\n+    public static class TestPatternFailed extends AssertionError {\n+        public TestPatternFailed(String message) {\n+            super(message);\n+        }\n+    }\n+\n+    \/\/ error handling\n@@ -240,25 +277,0 @@\n-\n-    sealed interface IPoint permits Point {}\n-    record Point(Integer x, Integer y) implements IPoint { }\n-    record GPoint<T>(T x, T y) { }\n-    record VoidPoint() { }\n-    record RecordOfLists(List<Integer> o) {}\n-    record RecordOfLists2(List<List<Integer>> o) {}\n-\n-    @interface Annot {\n-        String field();\n-    }\n-    record Frog(Integer x, Integer y) { }\n-    record PointEx(Integer x, Integer y) {\n-        @Override\n-        public Integer x() {\n-            throw new TestPatternFailed(EXCEPTION_MESSAGE);\n-        }\n-    }\n-    record WithPrimitives(int x, double y) { }\n-    static final String EXCEPTION_MESSAGE = \"exception-message\";\n-    public static class TestPatternFailed extends AssertionError {\n-        public TestPatternFailed(String message) {\n-            super(message);\n-        }\n-    }\n","filename":"test\/langtools\/tools\/javac\/patterns\/ForEachPatterns.java","additions":63,"deletions":51,"binary":false,"changes":114,"status":"modified"}]}