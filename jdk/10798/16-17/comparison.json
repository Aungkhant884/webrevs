{"files":[{"patch":"@@ -3048,1 +3048,2 @@\n-                        return ForInitResult.LocalVarDecl;\n+                        return inSelectionAndParenthesis ? ForInitResult.RecordPattern\n+                                                         : ForInitResult.LocalVarDecl;\n@@ -3050,0 +3051,1 @@\n+                    return ForInitResult.LocalVarDecl;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import com.sun.source.tree.EnhancedForLoopTree;\n@@ -40,0 +41,2 @@\n+import com.sun.source.tree.PatternTree;\n+import com.sun.source.tree.StatementTree;\n@@ -41,0 +44,1 @@\n+import com.sun.source.tree.Tree.Kind;\n@@ -46,0 +50,1 @@\n+import com.sun.tools.javac.util.Log;\n@@ -47,0 +52,2 @@\n+import java.net.URI;\n+import java.net.URISyntaxException;\n@@ -48,0 +55,7 @@\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.tools.Diagnostic;\n+import javax.tools.DiagnosticListener;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n@@ -113,0 +127,21 @@\n+        test.forDisambiguationTest(\"T[] a\", ForType.ENHANCED_FOR);\n+        test.forDisambiguationTest(\"T[].class.getName()\", ForType.TRADITIONAL_FOR);\n+        test.forDisambiguationTest(\"T[].class\", ForType.TRADITIONAL_FOR, \"compiler.err.not.stmt\");\n+        test.forDisambiguationTest(\"R(T[] a)\", ForType.ENHANCED_FOR_WITH_PATTERNS);\n+\n+        test.forDisambiguationTest(\"Point(Integer a, Integer b)\", ForType.ENHANCED_FOR_WITH_PATTERNS);\n+        test.forDisambiguationTest(\"ForEachPatterns.Point(Integer a, Integer b)\", ForType.ENHANCED_FOR_WITH_PATTERNS);\n+        test.forDisambiguationTest(\"GPoint<Integer>(Integer a, Integer b)\", ForType.ENHANCED_FOR_WITH_PATTERNS);\n+        test.forDisambiguationTest(\"@Annot(field = \\\"test\\\") Point p\", ForType.ENHANCED_FOR);\n+        test.forDisambiguationTest(\"GPoint<Point>(Point(Integer a, Integer b), Point c)\", ForType.ENHANCED_FOR_WITH_PATTERNS);\n+        test.forDisambiguationTest(\"GPoint<Point>(Point(var a, Integer b), Point c)\", ForType.ENHANCED_FOR_WITH_PATTERNS);\n+        test.forDisambiguationTest(\"GPoint<VoidPoint>(VoidPoint(), VoidPoint())\", ForType.ENHANCED_FOR_WITH_PATTERNS);\n+        test.forDisambiguationTest(\"RecordOfLists(List<Integer> lr)\", ForType.ENHANCED_FOR_WITH_PATTERNS);\n+        test.forDisambiguationTest(\"RecordOfLists2(List<List<Integer>> lr)\", ForType.ENHANCED_FOR_WITH_PATTERNS);\n+        test.forDisambiguationTest(\"GPoint<@Annot(field = \\\"\\\") ? extends Point>(var x, var y)\", ForType.ENHANCED_FOR_WITH_PATTERNS);\n+\n+        test.forDisambiguationTest(\"method()\", ForType.TRADITIONAL_FOR);\n+        test.forDisambiguationTest(\"method(), method()\", ForType.TRADITIONAL_FOR);\n+        test.forDisambiguationTest(\"method2((Integer a) -> 42)\", ForType.TRADITIONAL_FOR);\n+        test.forDisambiguationTest(\"m(cond ? b() : i)\", ForType.TRADITIONAL_FOR);\n+        test.forDisambiguationTest(\"m((GPoint<?>)null, cond ? b() : i)\", ForType.TRADITIONAL_FOR);\n@@ -116,0 +151,1 @@\n+    private final List<String> errors = new ArrayList<>();\n@@ -117,1 +153,1 @@\n-    public DisambiguatePatterns() {\n+    public DisambiguatePatterns() throws URISyntaxException {\n@@ -119,0 +155,5 @@\n+        context.put(DiagnosticListener.class, d -> {\n+            if (d.getKind() == Diagnostic.Kind.ERROR) {\n+                errors.add(d.getCode());\n+            }\n+        });\n@@ -121,0 +162,3 @@\n+        SimpleJavaFileObject source =\n+                new SimpleJavaFileObject(new URI(\"mem:\/\/Test.java\"), JavaFileObject.Kind.SOURCE) {};\n+        Log.instance(context).useSource(source);\n@@ -151,0 +195,52 @@\n+    void forDisambiguationTest(String snippet, ForType forType, String... expectedErrors) {\n+        errors.clear();\n+\n+        String codeTemplate = switch (forType) {\n+            case TRADITIONAL_FOR ->\n+                \"\"\"\n+                public class Test {\n+                    private void test() {\n+                        for (SNIPPET; ;) {\n+                        }\n+                    }\n+                }\n+                \"\"\";\n+            case ENHANCED_FOR, ENHANCED_FOR_WITH_PATTERNS ->\n+                \"\"\"\n+                public class Test {\n+                    private void test() {\n+                        for (SNIPPET : collection) {\n+                        }\n+                    }\n+                }\n+                \"\"\";\n+        };\n+\n+        String code = codeTemplate.replace(\"SNIPPET\", snippet);\n+        JavacParser parser = factory.newParser(code, false, false, false);\n+        CompilationUnitTree result = parser.parseCompilationUnit();\n+        if (!Arrays.asList(expectedErrors).equals(errors)) {\n+            throw new AssertionError(\"Expected errors: \" + Arrays.asList(expectedErrors) +\n+                                     \", actual: \" + errors +\n+                                     \", for: \" + code);\n+        }\n+        ClassTree clazz = (ClassTree) result.getTypeDecls().get(0);\n+        MethodTree method = (MethodTree) clazz.getMembers().get(0);\n+        StatementTree st = method.getBody().getStatements().get(0);\n+        if (forType == ForType.TRADITIONAL_FOR) {\n+            if (st.getKind() != Kind.FOR_LOOP) {\n+                throw new AssertionError(\"Unpected statement: \" + st);\n+            }\n+        } else {\n+            EnhancedForLoopTree ef = (EnhancedForLoopTree) st;\n+            ForType actualType = switch (ef.getVariableOrRecordPattern()) {\n+                case PatternTree pattern -> ForType.ENHANCED_FOR_WITH_PATTERNS;\n+                default -> ForType.ENHANCED_FOR;\n+            };\n+            if (forType != actualType) {\n+                throw new AssertionError(\"Expected: \" + forType + \", actual: \" + actualType +\n+                                          \", for: \" + code + \", parsed: \" + result);\n+            }\n+        }\n+    }\n+\n@@ -156,0 +252,5 @@\n+    enum ForType {\n+        TRADITIONAL_FOR,\n+        ENHANCED_FOR,\n+        ENHANCED_FOR_WITH_PATTERNS;\n+    }\n","filename":"test\/langtools\/tools\/javac\/patterns\/DisambiguatePatterns.java","additions":102,"deletions":1,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -161,33 +161,0 @@\n-    static void m(int i) { }\n-    static void m(GPoint<?> gpoint, int i) { }\n-    static int b() { return 42; }\n-\n-    static void forParsing(int i, boolean cond) {\n-        List<Point>                 points = null;\n-        List<GPoint<Integer>>       generic_points = null;\n-        List<GPoint<Point>>         generic_points_nested = null;\n-        List<GPoint<VoidPoint>>     generic_vpoints_nested = null;\n-        List<RecordOfLists>         list_of_records = null;\n-        List<RecordOfLists2>        list_of_records2 = null;\n-\n-        for (Point(Integer a, Integer b) : points) { }\n-        for (ForEachPatterns.Point(Integer a, Integer b) : points) { }\n-        for (GPoint<Integer>(Integer a, Integer b) : generic_points) { }\n-        for (@Annot(field = \"test\") Point p : points) {}\n-        for (method(); i == 0;) { i++; }\n-        for (method(), method(); i == 0;) { i++; }\n-        for (ForEachPatterns.<Integer>method(); i == 0;) { i++; }\n-        for (GPoint<Point>(Point(Integer a, Integer b), Point c) : generic_points_nested) { }\n-        for (GPoint<Point>(Point(var a, Integer b), Point c) : generic_points_nested) { }\n-        for (GPoint<VoidPoint>(VoidPoint(), VoidPoint()) : generic_vpoints_nested) { }\n-        for (method2((Integer a) -> 42); i == 0;) { i++; }\n-        for (RecordOfLists(List<Integer> lr) : list_of_records) {}\n-        for (RecordOfLists2(List<List<Integer>> lr) : list_of_records2) {}\n-        for (m(cond ? b() : i) ; i == 0;) {}\n-        for (m((GPoint<?>)null, cond ? b() : i) ; ;) {}\n-\/\/        for (GPoint<@Annot(field = \"\") ? extends Point>(var x, var y) : generic_points_nested) {}; \/\/ TODO: Enable after https:\/\/bugs.openjdk.org\/browse\/JDK-8297602 is fixed\n-    }\n-    \/\/where\n-    static <T> void method() {}\n-    static <T> void method2(Function<Integer, Integer> f) {}\n-\n","filename":"test\/langtools\/tools\/javac\/patterns\/ForEachPatterns.java","additions":0,"deletions":33,"binary":false,"changes":33,"status":"modified"}]}