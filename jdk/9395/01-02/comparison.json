{"files":[{"patch":"@@ -137,1 +137,1 @@\n-  DEBUG_ONLY(check_all_cards(start_card, end_card);)\n+  check_all_cards(start_card, end_card);\n@@ -140,0 +140,1 @@\n+#ifdef ASSERT\n@@ -177,0 +178,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-  void check_all_cards(size_t left_card, size_t right_card) const;\n+  void check_all_cards(size_t left_card, size_t right_card) const NOT_DEBUG_RETURN;\n@@ -128,1 +128,0 @@\n-public:\n@@ -133,0 +132,4 @@\n+  void update_for_block(HeapWord* blk_start, size_t size) {\n+    update_for_block(blk_start, blk_start + size);\n+  }\n+public:\n@@ -145,2 +148,0 @@\n-  void assert_same_bot_entry(const void* n, const void* addr) const NOT_DEBUG_RETURN;\n-\n@@ -157,4 +158,0 @@\n-  void update_for_block(HeapWord* blk_start, size_t size) {\n-    update_for_block(blk_start, blk_start + size);\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.hpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -35,8 +35,0 @@\n-#ifdef ASSERT\n-inline void G1BlockOffsetTablePart::assert_same_bot_entry(const void* n, const void* addr) const {\n-  assert(_bot->index_for(n) == _bot->index_for(addr),\n-         \"BOT not precise. Index for n: \" SIZE_FORMAT \" must be equal to the index for addr: \" SIZE_FORMAT,\n-         _bot->index_for(n), _bot->index_for(addr));\n-}\n-#endif\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.inline.hpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-  HeapWord* block_start(const void* addr);\n+  HeapWord* block_start(const void* addr) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-    _bot_part.assert_same_bot_entry(n, addr);\n+    assert(!G1BlockOffsetTablePart::is_crossing_card_boundary(n, (HeapWord*)addr), \"must be\");\n@@ -100,1 +100,1 @@\n-inline HeapWord* HeapRegion::block_start(const void* addr) {\n+inline HeapWord* HeapRegion::block_start(const void* addr) const {\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}