{"files":[{"patch":"@@ -61,4 +61,2 @@\n-  if (!_reader.is_opened()) {\n-    char errmsg[JVM_MAXPATHLEN];\n-    os::lasterror(errmsg, JVM_MAXPATHLEN);\n-    log_error(cds)(\"Loading classlist %s failed: %s\", _reader.filename(), errmsg);\n+  if (!_reader.is_open()) {\n+    log_error(cds)(\"Loading classlist %s failed: %s\", _reader.filename(), os::strerror(_reader.last_errno()));\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -150,2 +150,2 @@\n-    if (!_reader.is_opened()) {\n-      fprintf(stderr, \"ERROR: Can't open replay file %s\\n\", filename);\n+    if (!_reader.is_open()) {\n+      fprintf(stderr, \"ERROR: Can't open replay file %s: %s\\n\", filename, os::strerror(_reader.last_errno()));\n@@ -184,1 +184,1 @@\n-    return _reader.is_opened() && !had_error();\n+    return _reader.is_open() && !had_error();\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,5 @@\n-LineReader::LineReader(const char* filename) : _filename(filename), _stream(nullptr) {\n+LineReader::LineReader(const char* filename, size_t initial_length, size_t max_length) :\n+  _filename(os::strdup(filename)), _stream(nullptr), _errno(0),\n+  _buffer_length(initial_length), _max_buffer_length(max_length), _buffer(nullptr)\n+{\n+  assert(_buffer_length < _max_buffer_length, \"sanity\");\n@@ -33,2 +37,4 @@\n-  int fd = os::open(filename, O_RDONLY, S_IREAD);\n-  if (fd != -1) {\n+  int fd = os::open(_filename, O_RDONLY, S_IREAD);\n+  if (fd == -1) {\n+    _errno = errno;\n+  } else {\n@@ -39,0 +45,1 @@\n+      _errno = errno;\n@@ -42,0 +49,1 @@\n+      _buffer = NEW_RESOURCE_ARRAY(char, _buffer_length);\n@@ -43,2 +51,0 @@\n-  } else {\n-    _stream = nullptr;\n@@ -46,3 +52,0 @@\n-\n-  _buffer_length = 32;\n-  _buffer = NEW_RESOURCE_ARRAY(char, _buffer_length);\n@@ -53,0 +56,1 @@\n+  FreeHeap(_filename);\n@@ -70,8 +74,29 @@\n-  int c;\n-  while ((c = getc(_stream)) != EOF) {\n-    if (buffer_pos + 1 >= _buffer_length) {\n-      size_t new_length = _buffer_length * 2;\n-      if (new_length < _buffer_length) {\n-        \/\/ This could happen on 32-bit. On 64-bit, the VM would have exited\n-        \/\/ due to OOM before we ever get to here.\n-        fatal(\"Cannot handle excessively long lines\");\n+  char tmp[128];\n+  char* s;\n+  bool has_input = false;\n+  while ((s = fgets(tmp, sizeof(tmp), _stream)) != nullptr) {\n+    char c;\n+    has_input = true;\n+    \/\/ Get up to 127 characters, followed by '\\0' (fgets always terminates the line),\n+    \/\/ Iff the last character is not '\\n', that means we have read a partial line\n+    \/\/ and should keep going.\n+    while ((c = *s++) != '\\0') {\n+      \/\/ Grow buffer if necessary\n+      if (buffer_pos + 1 >= _buffer_length) {\n+        size_t new_length = _buffer_length * 2;\n+        if (new_length < _buffer_length) {\n+          \/\/ This could happen on 32-bit. On 64-bit, the VM would have exited\n+          \/\/ due to OOM before we ever get to here.\n+          fatal(\"Cannot handle excessively long lines\");\n+        }\n+        _buffer = REALLOC_RESOURCE_ARRAY(char, _buffer, _buffer_length, new_length);\n+        assert(_buffer != nullptr, \"OOM would have exited JVM\");\n+        _buffer_length = new_length;\n+      }\n+\n+      if (c == '\\n') {\n+        break;\n+      } else if (c == '\\r') {\n+        \/\/ skip LF\n+      } else {\n+        _buffer[buffer_pos++] = c;\n@@ -79,3 +104,0 @@\n-      _buffer = REALLOC_RESOURCE_ARRAY(char, _buffer, _buffer_length, new_length);\n-      assert(_buffer != nullptr, \"OOM would have exited JVM\");\n-      _buffer_length = new_length;\n@@ -83,0 +105,1 @@\n+\n@@ -85,4 +108,0 @@\n-    } else if (c == '\\r') {\n-      \/\/ skip LF\n-    } else {\n-      _buffer[buffer_pos++] = c;\n@@ -95,1 +114,3 @@\n-  if (buffer_pos == 0 && c == EOF) {\n+  if (buffer_pos == 0 && !has_input) {\n+    \/\/ fgets() has not returned anything. We may have an error or EOF\n+    _errno = errno;\n@@ -99,0 +120,1 @@\n+    \/\/ If we have read an empty line: _buffer[0] == '\\0'\n","filename":"src\/hotspot\/share\/utilities\/lineReader.cpp","additions":46,"deletions":24,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-  const char* _filename;\n+  char* _filename;\n@@ -37,0 +37,1 @@\n+  int _errno;\n@@ -38,0 +39,1 @@\n+  size_t _max_buffer_length;\n@@ -40,1 +42,1 @@\n-  LineReader(const char* filename);\n+  LineReader(const char* filename, size_t initial_length = 160, size_t max_length = (SIZE_MAX \/ 2) - 1);\n@@ -43,1 +45,1 @@\n-  bool is_opened() const {\n+  bool is_open() const {\n@@ -49,0 +51,5 @@\n+\n+  \/\/ errno, if any, for the last file I\/O operation performed by this LineReader\n+  int last_errno() {\n+    return _errno;\n+  }\n","filename":"src\/hotspot\/share\/utilities\/lineReader.hpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"}]}