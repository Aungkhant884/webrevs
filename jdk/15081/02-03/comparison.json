{"files":[{"patch":"@@ -23,1 +23,1 @@\n-    \/\/ AppContext must be in new thread group, otherwise dispose() throws\n+    \/\/ AppContext must be in different thread group, otherwise dispose() throws\n@@ -26,1 +26,14 @@\n-        appContext = SunToolkit.createNewAppContext();\n+        if (true) {\n+          \/\/ AppContext.getAppContext() creates AppContext in root thread group unless\n+          \/\/ (javaplugin.version != null || javawebstart.version != null) && javafx.version != null\n+          System.setProperty(\"javaplugin.version\", \"foo\");\n+          System.setProperty(\"javawebstart.version\", \"foo\");\n+          System.setProperty(\"javafx.version\", \"foo\");\n+        }\n+        else {\n+          \/\/ alternative: call SunToolkit.createNewAppContext() directly, uses current thread group\n+          SunToolkit.createNewAppContext();\n+        }\n+\n+        \/\/ SwingWorker.execute() calls SwingWorker.getWorkersExecutorService(),\n+        \/\/ which calls AppContext.getAppContext() and stores reference to executor in AppContext\n@@ -31,1 +44,4 @@\n-        }.execute(); \/\/ calls SwingWorker.getWorkersExecutorService()\n+        }.execute();\n+\n+        \/\/ remember AppContext created in this thread group\n+        appContext = AppContext.getAppContext();\n","filename":"test\/jdk\/javax\/swing\/SwingWorker\/8314755\/SwingWorkerExecutorLeakTest.java","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"}]}