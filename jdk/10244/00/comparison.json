{"files":[{"patch":"@@ -3625,1 +3625,1 @@\n-      call = __ trampoline_call(Address(addr, relocInfo::runtime_call_type), &cbuf);\n+      call = __ trampoline_call(Address(addr, relocInfo::runtime_call_type));\n@@ -3634,1 +3634,1 @@\n-      call = __ trampoline_call(Address(addr, rspec), &cbuf);\n+      call = __ trampoline_call(Address(addr, rspec));\n@@ -3642,1 +3642,1 @@\n-        cbuf.shared_stub_to_interp_for(_method, cbuf.insts()->mark_off());\n+        cbuf.shared_stub_to_interp_for(_method, call - cbuf.insts_begin());\n@@ -3645,1 +3645,1 @@\n-        address stub = CompiledStaticCall::emit_to_interp_stub(cbuf);\n+        address stub = CompiledStaticCall::emit_to_interp_stub(cbuf, call);\n@@ -3653,1 +3653,0 @@\n-    _masm.clear_inst_mark();\n@@ -3700,1 +3699,0 @@\n-      _masm.clear_inst_mark();\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -311,1 +311,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(_stub)), NULL, rscratch2);\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(_stub)), rscratch2);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_CodeStubs_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -687,1 +687,1 @@\n-void MacroAssembler::far_call(Address entry, CodeBuffer *cbuf, Register tmp) {\n+void MacroAssembler::far_call(Address entry, Register tmp) {\n@@ -700,1 +700,0 @@\n-    if (cbuf) cbuf->set_insts_mark();\n@@ -703,1 +702,0 @@\n-    if (cbuf) cbuf->set_insts_mark();\n@@ -708,1 +706,1 @@\n-int MacroAssembler::far_jump(Address entry, CodeBuffer *cbuf, Register tmp) {\n+int MacroAssembler::far_jump(Address entry, Register tmp) {\n@@ -722,1 +720,0 @@\n-    if (cbuf) cbuf->set_insts_mark();\n@@ -725,1 +722,0 @@\n-    if (cbuf) cbuf->set_insts_mark();\n@@ -885,1 +881,1 @@\n-address MacroAssembler::trampoline_call(Address entry, CodeBuffer* cbuf) {\n+address MacroAssembler::trampoline_call(Address entry) {\n@@ -911,1 +907,1 @@\n-  if (cbuf) cbuf->set_insts_mark();\n+  address call_pc = pc();\n@@ -915,1 +911,0 @@\n-  \/\/ just need to return a non-null address\n@@ -917,1 +912,1 @@\n-  return pc();\n+  return call_pc;\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1181,2 +1181,2 @@\n-  \/\/ Return: NULL if CodeCache is full.\n-  address trampoline_call(Address entry, CodeBuffer* cbuf = NULL);\n+  \/\/ Return: the call PC or NULL if CodeCache is full.\n+  address trampoline_call(Address entry);\n@@ -1204,2 +1204,2 @@\n-  void far_call(Address entry, CodeBuffer *cbuf = NULL, Register tmp = rscratch1);\n-  int far_jump(Address entry, CodeBuffer *cbuf = NULL, Register tmp = rscratch1);\n+  void far_call(Address entry, Register tmp = rscratch1);\n+  int far_jump(Address entry, Register tmp = rscratch1);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1055,2 +1055,1 @@\n-    address mark = __ pc();\n-    __ trampoline_call(resolve);\n+    const address tr_call = __ trampoline_call(resolve);\n@@ -1064,1 +1063,1 @@\n-    CompiledStaticCall::emit_to_interp_stub(*cbuf, mark);\n+    CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n@@ -1080,2 +1079,1 @@\n-  address mark = __ pc();\n-  __ trampoline_call(resolve);\n+  const address tr_call = __ trampoline_call(resolve);\n@@ -1123,1 +1121,1 @@\n-  CompiledStaticCall::emit_to_interp_stub(*cbuf, mark);\n+  CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"}]}