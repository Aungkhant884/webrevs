{"files":[{"patch":"@@ -1600,1 +1600,1 @@\n-bool FileMapInfo::read_region(int i, char* base, size_t size) {\n+bool FileMapInfo::read_region(int i, char* base, size_t size, bool do_commit) {\n@@ -1602,7 +1602,9 @@\n-  log_info(cds)(\"Commit %s region #%d at base \" INTPTR_FORMAT \" top \" INTPTR_FORMAT \" (%s)%s\",\n-                is_static() ? \"static \" : \"dynamic\", i, p2i(base), p2i(base + size),\n-                shared_region_name[i], si->allow_exec() ? \" exec\" : \"\");\n-  if (!os::commit_memory(base, size, si->allow_exec())) {\n-    log_error(cds)(\"Failed to commit %s region #%d (%s)\", is_static() ? \"static \" : \"dynamic\",\n-                   i, shared_region_name[i]);\n-    return false;\n+  if (do_commit) {\n+    log_info(cds)(\"Commit %s region #%d at base \" INTPTR_FORMAT \" top \" INTPTR_FORMAT \" (%s)%s\",\n+                  is_static() ? \"static \" : \"dynamic\", i, p2i(base), p2i(base + size),\n+                  shared_region_name[i], si->allow_exec() ? \" exec\" : \"\");\n+    if (!os::commit_memory(base, size, si->allow_exec())) {\n+      log_error(cds)(\"Failed to commit %s region #%d (%s)\", is_static() ? \"static \" : \"dynamic\",\n+                     i, shared_region_name[i]);\n+      return false;\n+    }\n@@ -1649,1 +1651,1 @@\n-    if (!read_region(i, requested_addr, size)) {\n+    if (!read_region(i, requested_addr, size, \/* do_commit = *\/ true)) {\n@@ -1820,1 +1822,1 @@\n-      log_info(cds)(\"Cannot use CDS heap data. UseG1GC or UseEpsilonGC are required.\");\n+      log_info(cds)(\"Cannot use CDS heap data. UseEpsilonGC, UseG1GC or UseSerialGC are required.\");\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -480,1 +480,1 @@\n-  bool  read_region(int i, char* base, size_t size);\n+  bool  read_region(int i, char* base, size_t size, bool do_commit);\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1589,1 +1589,1 @@\n-                                    uintptr_t* buffer_ret) {\n+                                    MemRegion& archive_space) {\n@@ -1607,4 +1607,9 @@\n-  uintptr_t buffer = (uintptr_t)\n-    Universe::heap()->allocate_loaded_archive_space(total_bytes \/ HeapWordSize);\n-  _loaded_heap_bottom = buffer;\n-  _loaded_heap_top    = buffer + total_bytes;\n+  size_t word_size = total_bytes \/ HeapWordSize;\n+  HeapWord* buffer = Universe::heap()->allocate_loaded_archive_space(word_size);\n+  if (buffer == nullptr) {\n+    return 0;\n+  }\n+\n+  archive_space = MemRegion(buffer, word_size);\n+  _loaded_heap_bottom = (uintptr_t)archive_space.start();\n+  _loaded_heap_top    = _loaded_heap_bottom + total_bytes;\n@@ -1612,1 +1617,0 @@\n-  *buffer_ret = buffer;\n@@ -1641,1 +1645,1 @@\n-    if (!mapinfo->read_region(ri->_region_index, (char*)load_address, r->used())) {\n+    if (!mapinfo->read_region(ri->_region_index, (char*)load_address, r->used(), \/* do_commit = *\/ false)) {\n@@ -1648,2 +1652,4 @@\n-    log_info(cds)(\"Loaded heap    region #%d at base \" INTPTR_FORMAT \" size = \" SIZE_FORMAT_W(8) \" bytes, delta = \" INTX_FORMAT,\n-                  ri->_region_index, load_address, ri->_region_size, ri->_runtime_offset);\n+    log_info(cds)(\"Loaded heap    region #%d at base \" INTPTR_FORMAT \" top \" INTPTR_FORMAT\n+                  \" size \" SIZE_FORMAT_W(6) \" delta \" INTX_FORMAT,\n+                  ri->_region_index, load_address, load_address + ri->_region_size,\n+                  ri->_region_size, ri->_runtime_offset);\n@@ -1678,4 +1684,8 @@\n-  uintptr_t buffer;\n-  int num_loaded_regions = init_loaded_regions(mapinfo, loaded_regions, &buffer);\n-  sort_loaded_regions(loaded_regions, num_loaded_regions, buffer);\n-  if (!load_regions(mapinfo, loaded_regions, num_loaded_regions, buffer)) {\n+  MemRegion archive_space;\n+  int num_loaded_regions = init_loaded_regions(mapinfo, loaded_regions, archive_space);\n+  if (num_loaded_regions <= 0) {\n+    return false;\n+  }\n+  sort_loaded_regions(loaded_regions, num_loaded_regions, (uintptr_t)archive_space.start());\n+  if (!load_regions(mapinfo, loaded_regions, num_loaded_regions, (uintptr_t)archive_space.start())) {\n+    assert(_loading_failed, \"must be\");\n@@ -1714,1 +1724,9 @@\n-void HeapShared::verify_loaded_heap() {\n+void HeapShared::finish_initialization() {\n+  if (is_loaded()) {\n+    HeapWord* bottom = (HeapWord*)_loaded_heap_bottom;\n+    HeapWord* top    = (HeapWord*)_loaded_heap_top;\n+\n+    MemRegion archive_space = MemRegion(bottom, top);\n+    Universe::heap()->complete_loaded_archive_space(archive_space);\n+  }\n+\n@@ -1742,3 +1760,5 @@\n-  HeapWord* bottom = (HeapWord*)_loaded_heap_bottom;\n-  HeapWord* top = (HeapWord*)_loaded_heap_top;\n-  Universe::heap()->fill_with_objects(bottom, top - bottom);\n+  if (_loaded_heap_bottom != 0) {\n+    HeapWord* bottom = (HeapWord*)_loaded_heap_bottom;\n+    HeapWord* top = (HeapWord*)_loaded_heap_top;\n+    Universe::heap()->fill_with_objects(bottom, top - bottom);\n+  }\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":37,"deletions":17,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -173,1 +173,1 @@\n-  static void verify_loaded_heap() NOT_CDS_JAVA_HEAP_RETURN;\n+  static void finish_initialization() NOT_CDS_JAVA_HEAP_RETURN;\n@@ -349,1 +349,1 @@\n-                                 uintptr_t* buffer_ret);\n+                                 MemRegion& archive_space);\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1437,1 +1437,1 @@\n-  HeapShared::verify_loaded_heap();\n+  HeapShared::finish_initialization();\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"logging\/log.hpp\"\n@@ -33,0 +34,1 @@\n+#include \"runtime\/mutexLocker.hpp\"\n@@ -115,0 +117,11 @@\n+\n+HeapWord* SerialHeap::allocate_loaded_archive_space(size_t word_size) {\n+  MutexLocker ml(Heap_lock);\n+  HeapWord* result = old_gen()->allocate(word_size, \/* is_tlab = *\/ false);\n+  return result;\n+}\n+\n+void SerialHeap::complete_loaded_archive_space(MemRegion archive_space) {\n+  assert(old_gen()->used_region().contains(archive_space), \"Archive space not contained in old gen\");\n+  old_gen()->complete_loaded_archive_space(archive_space);\n+}\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,0 +86,5 @@\n+\n+  \/\/ Support for loading objects from CDS archive into the heap\n+  bool can_load_archived_objects() const { return true; }\n+  HeapWord* allocate_loaded_archive_space(size_t size);\n+  void complete_loaded_archive_space(MemRegion archive_space);\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -222,0 +222,12 @@\n+void TenuredGeneration::complete_loaded_archive_space(MemRegion archive_space) {\n+  TenuredSpace* space = (TenuredSpace*)_the_space;\n+\n+  space->initialize_threshold();\n+  HeapWord* start = archive_space.start();\n+  while (start < archive_space.end()) {\n+    size_t word_size = _the_space->block_size(start); \/\/\/ Crashes here when accessing the klass\n+    space->alloc_block(start, start + word_size);\n+    start += word_size;\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -77,0 +77,2 @@\n+  void complete_loaded_archive_space(MemRegion archive_space);\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -488,0 +488,1 @@\n+  virtual void complete_loaded_archive_space(MemRegion archive_space) { }\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test Loading CDS archived heap objects into SerialGC\n+ * @bug 8234679\n+ * @requires vm.cds\n+ * @requires vm.gc.Serial\n+ * @requires vm.gc.G1\n+ *\n+ * @comment don't run this test if any -XX::+Use???GC options are specified, since they will\n+ *          interfere with the the test.\n+ * @requires vm.gc == null\n+ *\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile test-classes\/Hello.java\n+ * @run driver TestSerialGCWithCDS\n+ *\/\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestSerialGCWithCDS {\n+    public final static String HELLO = \"Hello World\";\n+    static String helloJar;\n+\n+    public static void main(String... args) throws Exception {\n+        helloJar = JarBuilder.build(\"hello\", \"Hello\");\n+\n+        \/\/ Check if we can use SerialGC during dump time, or run time, or both.\n+        test(false, true);\n+        test(true,  false);\n+        test(true,  true);\n+\n+        \/\/ We usually have 2 heap regions. To increase test coverage, we can have 3 heap regions\n+        \/\/ by using \"-Xmx256m -XX:ObjectAlignmentInBytes=64\"\n+        if (Platform.is64bit()) test(false, true, true);\n+    }\n+\n+    final static String G1 = \"-XX:+UseG1GC\";\n+    final static String Serial = \"-XX:+UseSerialGC\";\n+\n+    static void test(boolean dumpWithSerial, boolean execWithSerial) throws Exception {\n+        test(dumpWithSerial, execWithSerial, false);\n+    }\n+\n+    static void test(boolean dumpWithSerial, boolean execWithSerial, boolean useSmallRegions) throws Exception {\n+        String dumpGC = dumpWithSerial ? Serial : G1;\n+        String execGC = execWithSerial ? Serial : G1;\n+        String small1 = useSmallRegions ? \"-Xmx256m\" : \"-showversion\";\n+        String small2 = useSmallRegions ? \"-XX:ObjectAlignmentInBytes=64\" : \"-showversion\";\n+        OutputAnalyzer out;\n+\n+        System.out.println(\"0. Dump with \" + dumpGC);\n+        out = TestCommon.dump(helloJar,\n+                              new String[] {\"Hello\"},\n+                              dumpGC,\n+                              small1,\n+                              small2,\n+                              \"-Xlog:cds\");\n+        out.shouldContain(\"Dumping shared data to file:\");\n+        out.shouldHaveExitValue(0);\n+\n+        System.out.println(\"1. Exec with \" + execGC);\n+        out = TestCommon.exec(helloJar,\n+                              execGC,\n+                              small1,\n+                              small2,\n+                              \"-Xlog:cds\",\n+                              \"Hello\");\n+        out.shouldContain(HELLO);\n+        out.shouldHaveExitValue(0);\n+\n+        int n = 2;\n+        if (dumpWithSerial == false && execWithSerial == true) {\n+            \/\/ We dumped with G1, so we have an archived heap. At exec time, try to load them into\n+            \/\/ a small SerialGC heap that may be too small.\n+            String[] sizes = {\n+                \"4m\",   \/\/ usually this will success load the archived heap\n+                \"2m\",   \/\/ usually this will fail to loade th archived heap, but app can launch\n+                \"1m\"    \/\/ usually this will cause VM launch to fail with \"Too small maximum heap\"\n+            };\n+            for (String sz : sizes) {\n+                String xmx = \"-Xmx\" + sz;\n+                System.out.println(\"=======\\n\" + n + \". Exec with \" + execGC + \" \" + xmx);\n+                out = TestCommon.exec(helloJar,\n+                                      execGC,\n+                                      small1,\n+                                      small2,\n+                                      xmx,\n+                                      \"-Xlog:cds\",\n+                                      \"Hello\");\n+                if (out.getExitValue() == 0) {\n+                    out.shouldContain(HELLO);\n+                } else {\n+                    out.shouldContain(\"Too small maximum heap\");\n+                }\n+                n++;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestSerialGCWithCDS.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -31,0 +31,1 @@\n+ * @requires vm.gc == \"null\"\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/cacheObject\/HeapFragmentationTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}