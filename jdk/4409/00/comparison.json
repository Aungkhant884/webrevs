{"files":[{"patch":"@@ -109,0 +109,15 @@\n+  case Op_CastFF: {\n+    Node* cast = new CastFFNode(n, t, carry_dependency);\n+    cast->set_req(0, c);\n+    return cast;\n+  }\n+  case Op_CastDD: {\n+    Node* cast = new CastDDNode(n, t, carry_dependency);\n+    cast->set_req(0, c);\n+    return cast;\n+  }\n+  case Op_CastVV: {\n+    Node* cast = new CastVVNode(n, t, carry_dependency);\n+    cast->set_req(0, c);\n+    return cast;\n+  }\n@@ -560,0 +575,18 @@\n+\n+Node* ConstraintCastNode::make_cast_for_type(Node* c, Node* in, const Type* type) {\n+  Node* cast= NULL;\n+  if (type->isa_int()) {\n+    cast = make_cast(Op_CastII, c, in, type, true);\n+  } else if (type->isa_long()) {\n+    cast = make_cast(Op_CastLL, c, in, type, true);\n+  } else if (type->isa_float()) {\n+    cast = make_cast(Op_CastFF, c, in, type, true);\n+  } else if (type->isa_double()) {\n+    cast = make_cast(Op_CastDD, c, in, type, true);\n+  } else if (type->isa_vect()) {\n+    cast = make_cast(Op_CastVV, c, in, type, true);\n+  } else if (type->isa_ptr()) {\n+    cast = make_cast(Op_CastPP, c, in, type, true);\n+  }\n+  return cast;\n+}\n","filename":"src\/hotspot\/share\/opto\/castnode.cpp","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -65,0 +65,2 @@\n+\n+  static Node* make_cast_for_type(Node* c, Node* in, const Type* type);\n","filename":"src\/hotspot\/share\/opto\/castnode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1972,1 +1972,0 @@\n-      assert(phi_type->isa_int() || phi_type->isa_ptr() || phi_type->isa_long(), \"bad phi type\");\n@@ -1976,5 +1975,1 @@\n-      if (phi_type->isa_int()) {\n-        cast = ConstraintCastNode::make_cast(Op_CastII, r, uin, phi_type, true);\n-      } else if (phi_type->isa_long()) {\n-        cast = ConstraintCastNode::make_cast(Op_CastLL, r, uin, phi_type, true);\n-      } else {\n+      if (phi_type->isa_ptr()) {\n@@ -2011,0 +2006,2 @@\n+      } else {\n+        cast = ConstraintCastNode::make_cast_for_type(r, uin, phi_type);\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1514,13 +1514,1 @@\n-                if (in_t->isa_int()) {\n-                  cast = new CastIINode(in, in_t, true);\n-                } else if (in_t->isa_long()) {\n-                  cast = new CastLLNode(in, in_t, true);\n-                } else if (in_t->isa_ptr()) {\n-                  cast = new CastPPNode(in, in_t, true);\n-                } else if (in_t->isa_float()) {\n-                  cast = new CastFFNode(in, in_t, true);\n-                } else if (in_t->isa_double()) {\n-                  cast = new CastDDNode(in, in_t, true);\n-                } else if (in_t->isa_vect()) {\n-                  cast = new CastVVNode(in, in_t, true);\n-                }\n+                cast = ConstraintCastNode::make_cast_for_type(x_ctrl, in, in_t);\n@@ -1529,1 +1517,0 @@\n-                cast->set_req(0, x_ctrl);\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8268017\n+ * @summary C2: assert(phi_type->isa_int() || phi_type->isa_ptr() || phi_type->isa_long()) failed: bad phi type\n+ *\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestCastFFAtPhi TestCastFFAtPhi\n+ *\n+ *\/\n+\n+public class TestCastFFAtPhi {\n+    static int N = 400;\n+    static double dArrFld[] = new double[N];\n+    static long iMeth_check_sum = 0;\n+\n+    static {\n+        init(dArrFld, 90.71133);\n+    }\n+\n+    float fArrFld[] = new float[N];\n+\n+    public static void main(String[] strArr) {\n+        TestCastFFAtPhi _instance = new TestCastFFAtPhi();\n+        for (int i = 0; i < 10; i++) {\n+            _instance.mainTest();\n+        }\n+    }\n+\n+    void mainTest() {\n+        int i24 = 121110, i28, i30;\n+        float f2 = 2.486F;\n+\n+        for (i28 = 322; i28 > 6; i28--) {\n+            i30 = 1;\n+            do {\n+                i24 = (int) f2;\n+                fArrFld[1] += i30;\n+                switch (((i28 % 4) * 5) + 32) {\n+                    case 36:\n+                        f2 *= f2;\n+                }\n+            } while (++i30 < 80);\n+        }\n+        System.out.println(i24 + \",\");\n+    }\n+\n+    public static void init(double[] a, double seed) {\n+        for (int j = 0; j < a.length; j++) {\n+            a[j] = (j % 2 == 0) ? seed + j : seed - j;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestCastFFAtPhi.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}