{"files":[{"patch":"@@ -152,1 +152,2 @@\n-     * the final filter in the chain).\n+     * the final filter in the chain). Exceptions thrown by the\n+     * {@code operation} are not handled by the filter.\n@@ -200,1 +201,2 @@\n-     * filter is the final filter in the chain).\n+     * filter is the final filter in the chain). Exceptions thrown by the\n+     * {@code operation} are not handled by the filter.\n@@ -210,1 +212,2 @@\n-     * before the operation is invoked.\n+     * before the {@code operation} is invoked. More specifically, the response\n+     * will typically be sent before the filter {@code operation} is executed.\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/Filter.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @bug 8267262\n@@ -50,0 +51,1 @@\n+import org.testng.annotations.DataProvider;\n@@ -57,0 +59,2 @@\n+    static final Class<IOException> IOE = IOException.class;\n+\n@@ -75,1 +79,1 @@\n-        expectThrows(NPE, () -> Filter.afterHandler(null, HttpExchange::getResponseCode));\n+\n@@ -77,0 +81,1 @@\n+        expectThrows(NPE, () -> Filter.afterHandler(null, HttpExchange::getResponseCode));\n@@ -82,0 +87,1 @@\n+\n@@ -83,1 +89,0 @@\n-        var afterFilter = Filter.afterHandler(desc, HttpExchange::getResponseCode);\n@@ -85,0 +90,2 @@\n+\n+        var afterFilter = Filter.afterHandler(desc, HttpExchange::getResponseCode);\n@@ -88,0 +95,34 @@\n+    @DataProvider\n+    public static Object[][] throwingFilters() {\n+        return new Object[][] {\n+            {Filter.beforeHandler(\"before RE\", e -> { throw new RuntimeException(); }), IOE},\n+            {Filter.beforeHandler(\"before AE\", e -> { throw new AssertionError();   }), IOE},\n+\n+            {Filter.afterHandler( \"after RE\",  e -> { throw new RuntimeException(); }), null},\n+            {Filter.afterHandler( \"after AE\",  e -> { throw new AssertionError();   }), null},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"throwingFilters\")\n+    public void testException(Filter filter, Class<Exception> exception)\n+            throws Exception\n+    {\n+        var handler = new EchoHandler();\n+        var server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR,0), 10);\n+        server.createContext(\"\/\", handler).getFilters().add(filter);\n+        server.start();\n+        try {\n+            var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"\")).build();\n+            if (exception != null) {\n+                expectThrows(exception, () -> client.send(request, HttpResponse.BodyHandlers.ofString()));\n+            } else {\n+                var response = client.send(request, HttpResponse.BodyHandlers.ofString());\n+                assertEquals(response.statusCode(), 200);\n+                assertEquals(response.body(), \"hello world\");\n+            }\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/FilterTest.java","additions":43,"deletions":2,"binary":false,"changes":45,"status":"modified"}]}