{"files":[{"patch":"@@ -427,19 +427,0 @@\n-        \/**\n-         * Determines how often events are made available for streaming.\n-         *\n-         * @param interval the interval at which events are made available for streaming.\n-         *\n-         * @throws IllegalArgumentException if {@code interval} is negative\n-         *\n-         * @throws IllegalStateException if the recording is in the {@code CLOSED} state\n-         *\n-         * @since 14\n-         *\/\n-        \/*package private*\/ void setFlushInterval(Duration interval) {\n-            Objects.requireNonNull(interval);\n-            if (interval.isNegative()) {\n-                throw new IllegalArgumentException(\"Stream interval can't be negative\");\n-            }\n-            internal.setFlushInterval(interval);\n-        }\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Recording.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.lang.reflect.Field;\n@@ -360,4 +359,0 @@\n-    static void moveReplace(SafePath from, SafePath to) throws IOException {\n-        doPrivilegedIOWithReturn(() -> Files.move(from.toPath(), to.toPath()));\n-    }\n-\n@@ -410,4 +405,0 @@\n-    static void deleteOnExit(SafePath safePath) {\n-        doPrivileged(() -> safePath.toPath().toFile().deleteOnExit());\n-    }\n-\n@@ -426,4 +417,0 @@\n-    static void touch(SafePath path) throws IOException {\n-        doPriviligedIO(() -> new RandomAccessFile(path.toPath().toFile(), \"rw\").close());\n-    }\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/SecuritySupport.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -166,8 +166,0 @@\n-    public boolean readHeader(byte[] bytes, int count) throws IOException {\n-        input.position(absoluteChunkStart);\n-        for (int i = 0; i< count; i++) {\n-            bytes[i] = input.readPhysicalByte();\n-        }\n-        return bytes[(int)FILE_STATE_POSITION] != UPDATING_CHUNK_HEADER;\n-    }\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/ChunkHeader.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.time.Duration;\n@@ -52,1 +51,1 @@\n-public class EventDirectoryStream extends AbstractEventStream {\n+public final class EventDirectoryStream extends AbstractEventStream {\n@@ -63,2 +62,0 @@\n-    protected volatile long maxSize;\n-    protected volatile Duration maxAge;\n@@ -262,8 +259,0 @@\n-\n-    public void setMaxSize(long maxSize)  {\n-        this.maxSize = maxSize;\n-    }\n-\n-    public void setMaxAge(Duration maxAge)  {\n-        this.maxAge = maxAge;\n-    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/EventDirectoryStream.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -81,4 +81,0 @@\n-    public static boolean isType(long typeId) {\n-        return CutoffSetting.typeId == typeId;\n-    }\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/settings\/CutoffSetting.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -94,4 +94,0 @@\n-\n-    public static boolean isType(long typeId) {\n-        return ThrottleSetting.typeId == typeId;\n-    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/settings\/ThrottleSetting.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}