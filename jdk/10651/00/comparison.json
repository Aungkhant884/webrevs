{"files":[{"patch":"@@ -175,2 +175,2 @@\n-void G1Analytics::report_cost_per_card_scan_ms(double cost_per_card_ms, bool for_young_gc) {\n-  if (for_young_gc) {\n+void G1Analytics::report_cost_per_card_scan_ms(double cost_per_card_ms, bool for_young_only_phase) {\n+  if  (for_young_only_phase) {\n@@ -183,2 +183,2 @@\n-void G1Analytics::report_cost_per_card_merge_ms(double cost_per_card_ms, bool for_young_gc) {\n-  if (for_young_gc) {\n+void G1Analytics::report_cost_per_card_merge_ms(double cost_per_card_ms, bool for_young_only_phase) {\n+  if  (for_young_only_phase) {\n@@ -191,2 +191,2 @@\n-void G1Analytics::report_card_merge_to_scan_ratio(double merge_to_scan_ratio, bool for_young_gc) {\n-  if (for_young_gc) {\n+void G1Analytics::report_card_merge_to_scan_ratio(double merge_to_scan_ratio, bool for_young_only_phase) {\n+  if  (for_young_only_phase) {\n@@ -199,2 +199,2 @@\n-void G1Analytics::report_rs_length_diff(double rs_length_diff, bool for_young_gc) {\n-  if (for_young_gc) {\n+void G1Analytics::report_rs_length_diff(double rs_length_diff, bool for_young_only_phase) {\n+  if  (for_young_only_phase) {\n@@ -227,2 +227,2 @@\n-void G1Analytics::report_pending_cards(double pending_cards, bool for_young_gc) {\n-  if (for_young_gc) {\n+void G1Analytics::report_pending_cards(double pending_cards, bool for_young_only_phase) {\n+  if  (for_young_only_phase) {\n@@ -235,2 +235,2 @@\n-void G1Analytics::report_rs_length(double rs_length, bool for_young_gc) {\n-  if (for_young_gc) {\n+void G1Analytics::report_rs_length(double rs_length, bool for_young_only_phase) {\n+  if  (for_young_only_phase) {\n@@ -259,2 +259,2 @@\n-size_t G1Analytics::predict_scan_card_num(size_t rs_length, bool for_young_gc) const {\n-  if (for_young_gc || !enough_samples_available(_mixed_card_merge_to_scan_ratio_seq)) {\n+size_t G1Analytics::predict_scan_card_num(size_t rs_length, bool for_young_only_phase) const {\n+  if  (for_young_only_phase || !enough_samples_available(_mixed_card_merge_to_scan_ratio_seq)) {\n@@ -267,2 +267,2 @@\n-double G1Analytics::predict_card_merge_time_ms(size_t card_num, bool for_young_gc) const {\n-  if (for_young_gc || !enough_samples_available(_mixed_cost_per_card_merge_ms_seq)) {\n+double G1Analytics::predict_card_merge_time_ms(size_t card_num, bool for_young_only_phase) const {\n+  if  (for_young_only_phase || !enough_samples_available(_mixed_cost_per_card_merge_ms_seq)) {\n@@ -275,2 +275,2 @@\n-double G1Analytics::predict_card_scan_time_ms(size_t card_num, bool for_young_gc) const {\n-  if (for_young_gc || !enough_samples_available(_mixed_cost_per_card_scan_ms_seq)) {\n+double G1Analytics::predict_card_scan_time_ms(size_t card_num, bool for_young_only_phase) const {\n+  if  (for_young_only_phase || !enough_samples_available(_mixed_cost_per_card_scan_ms_seq)) {\n@@ -319,2 +319,2 @@\n-size_t G1Analytics::predict_rs_length(bool for_young_gc) const {\n-  if (for_young_gc || !enough_samples_available(_mixed_rs_length_seq)) {\n+size_t G1Analytics::predict_rs_length(bool for_young_only_phase) const {\n+  if  (for_young_only_phase || !enough_samples_available(_mixed_rs_length_seq)) {\n@@ -327,2 +327,2 @@\n-size_t G1Analytics::predict_pending_cards(bool for_young_gc) const {\n-  if (for_young_gc || !enough_samples_available(_young_pending_cards_seq)) {\n+size_t G1Analytics::predict_pending_cards(bool for_young_only_phase) const {\n+  if  (for_young_only_phase || !enough_samples_available(_young_pending_cards_seq)) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Analytics.cpp","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -129,4 +129,4 @@\n-  void report_cost_per_card_scan_ms(double cost_per_remset_card_ms, bool for_young_gc);\n-  void report_cost_per_card_merge_ms(double cost_per_card_ms, bool for_young_gc);\n-  void report_card_merge_to_scan_ratio(double cards_per_entry_ratio, bool for_young_gc);\n-  void report_rs_length_diff(double rs_length_diff, bool for_young_gc);\n+  void report_cost_per_card_scan_ms(double cost_per_remset_card_ms, bool for_young_only_phase);\n+  void report_cost_per_card_merge_ms(double cost_per_card_ms, bool for_young_only_phase);\n+  void report_card_merge_to_scan_ratio(double cards_per_entry_ratio, bool for_young_only_phase);\n+  void report_rs_length_diff(double rs_length_diff, bool for_young_only_phase);\n@@ -137,2 +137,2 @@\n-  void report_pending_cards(double pending_cards, bool for_young_gc);\n-  void report_rs_length(double rs_length, bool for_young_gc);\n+  void report_pending_cards(double pending_cards, bool for_young_only_phase);\n+  void report_rs_length(double rs_length, bool for_young_only_phase);\n@@ -148,1 +148,1 @@\n-  size_t predict_scan_card_num(size_t rs_length, bool for_young_gc) const;\n+  size_t predict_scan_card_num(size_t rs_length, bool for_young_only_phase) const;\n@@ -150,2 +150,2 @@\n-  double predict_card_merge_time_ms(size_t card_num, bool for_young_gc) const;\n-  double predict_card_scan_time_ms(size_t card_num, bool for_young_gc) const;\n+  double predict_card_merge_time_ms(size_t card_num, bool for_young_only_phase) const;\n+  double predict_card_scan_time_ms(size_t card_num, bool for_young_only_phase) const;\n@@ -167,2 +167,2 @@\n-  size_t predict_rs_length(bool for_young_gc) const;\n-  size_t predict_pending_cards(bool for_young_gc) const;\n+  size_t predict_rs_length(bool for_young_only_phase) const;\n+  size_t predict_pending_cards(bool for_young_only_phase) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Analytics.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -199,3 +199,3 @@\n-  bool for_young_gc = collector_state()->in_young_only_phase();\n-  update_young_length_bounds(_analytics->predict_pending_cards(for_young_gc),\n-                             _analytics->predict_rs_length(for_young_gc));\n+  bool for_young_only_phase = collector_state()->in_young_only_phase();\n+  update_young_length_bounds(_analytics->predict_pending_cards(for_young_only_phase),\n+                             _analytics->predict_rs_length(for_young_only_phase));\n@@ -492,1 +492,1 @@\n-    predicted_region_evac_time_ms += predict_region_total_time_ms(r, false \/* for_young_gc *\/);\n+    predicted_region_evac_time_ms += predict_region_total_time_ms(r, false \/* for_young_only_phase *\/);\n@@ -538,2 +538,2 @@\n-  bool for_young_gc = collector_state()->in_young_only_phase();\n-  update_rs_length_prediction(_analytics->predict_rs_length(for_young_gc));\n+  bool for_young_only_phase = collector_state()->in_young_only_phase();\n+  update_rs_length_prediction(_analytics->predict_rs_length(for_young_only_phase));\n@@ -1033,2 +1033,2 @@\n-  bool for_young_gc = collector_state()->in_young_only_phase();\n-  size_t rs_length = _analytics->predict_rs_length(for_young_gc);\n+  bool for_young_only_phase = collector_state()->in_young_only_phase();\n+  size_t rs_length = _analytics->predict_rs_length(for_young_only_phase);\n@@ -1065,1 +1065,1 @@\n-                                                 bool for_young_gc) const {\n+                                                 bool for_young_only_phase) const {\n@@ -1067,1 +1067,1 @@\n-  size_t scan_card_num = _analytics->predict_scan_card_num(rs_length, for_young_gc);\n+  size_t scan_card_num = _analytics->predict_scan_card_num(rs_length, for_young_only_phase);\n@@ -1083,2 +1083,2 @@\n-double G1Policy::predict_region_total_time_ms(HeapRegion* hr, bool for_young_gc) const {\n-  return predict_region_non_copy_time_ms(hr, for_young_gc) + predict_region_copy_time_ms(hr);\n+double G1Policy::predict_region_total_time_ms(HeapRegion* hr, bool for_young_only_phase) const {\n+  return predict_region_non_copy_time_ms(hr, for_young_only_phase) + predict_region_copy_time_ms(hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -150,2 +150,2 @@\n-  double predict_region_non_copy_time_ms(HeapRegion* hr, bool for_young_gc) const;\n-  double predict_region_total_time_ms(HeapRegion* hr, bool for_young_gc) const;\n+  double predict_region_non_copy_time_ms(HeapRegion* hr, bool for_young_only_phase) const;\n+  double predict_region_total_time_ms(HeapRegion* hr, bool for_young_only_phase) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-bool G1YoungGCEvacFailureInjector::arm_if_needed_for_gc_type(bool for_young_gc,\n+bool G1YoungGCEvacFailureInjector::arm_if_needed_for_gc_type(bool for_young_only_phase,\n@@ -70,1 +70,1 @@\n-  if (for_young_gc) {\n+  if (for_young_only_phase) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCEvacFailureInjector.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-  bool arm_if_needed_for_gc_type(bool for_young_gc,\n+  bool arm_if_needed_for_gc_type(bool for_young_only_phase,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCEvacFailureInjector.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-  double region_elapsed_time_ms = policy->predict_region_total_time_ms(this, false \/* for_young_gc *\/);\n+  double region_elapsed_time_ms = policy->predict_region_total_time_ms(this, false \/* for_young_only_phase *\/);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}