{"files":[{"patch":"@@ -0,0 +1,115 @@\n+#\n+# Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+default: all\n+\n+include $(SPEC)\n+include MakeBase.gmk\n+include JdkNativeCompilation.gmk\n+\n+################################################################################\n+# This makefile compiles and installs the hsdis library\n+#\n+################################################################################\n+\n+HSDIS_OUTPUT_DIR := $(SUPPORT_OUTPUTDIR)\/hsdis\n+\n+ifeq ($(call isTargetOs, windows), true)\n+  INSTALLED_HSDIS_DIR := $(JDK_OUTPUTDIR)\/bin\n+\n+  # On windows, we need to \"fake\" a completely different toolchain using gcc\n+  # instead of the normal microsoft toolchain. This is quite hacky...\n+\n+  MINGW_BASE := x86_64-w64-mingw32\n+\n+  $(eval $(call DefineNativeToolchain, TOOLCHAIN_MINGW, \\\n+      CC := $(MINGW_BASE)-gcc, \\\n+      LD := $(MINGW_BASE)-ld, \\\n+      OBJCOPY := $(MINGW_BASE)-objcopy, \\\n+      RC := $(RC), \\\n+      SYSROOT_CFLAGS := --sysroot=\/usr\/$(MINGW_BASE)\/sys-root, \\\n+      SYSROOT_LDFLAGS := --sysroot=\/usr\/$(MINGW_BASE)\/sys-root, \\\n+  ))\n+\n+  TOOLCHAIN_TYPE := gcc\n+  OPENJDK_TARGET_OS := linux\n+  CC_OUT_OPTION := -o$(SPACE)\n+  LD_OUT_OPTION := -o$(SPACE)\n+  GENDEPS_FLAGS := -MMD -MF\n+  CFLAGS_DEBUG_SYMBOLS := -g\n+  DISABLED_WARNINGS :=\n+  DISABLE_WARNING_PREFIX := -Wno-\n+  CFLAGS_WARNINGS_ARE_ERRORS := -Werror\n+  SHARED_LIBRARY_FLAGS := -shared\n+\n+  HSDIS_TOOLCHAIN := TOOLCHAIN_MINGW\n+  HSDIS_TOOLCHAIN_CFLAGS :=\n+  HSDIS_TOOLCHAIN_LDFLAGS := -L\/usr\/lib\/gcc\/$(MINGW_BASE)\/9.2.0  -L\/usr\/$(MINGW_BASE)\/sys-root\/mingw\/lib\n+  HSDIS_TOOLCHAIN_LIBS := \/usr\/$(MINGW_BASE)\/sys-root\/mingw\/lib\/dllcrt2.o -lmingw32 -lgcc -lgcc_eh -lmoldname -lmingwex -lmsvcrt -lpthread -ladvapi32 -lshell32 -luser32 -lkernel32\n+else\n+  INSTALLED_HSDIS_DIR := $(JDK_OUTPUTDIR)\/lib\n+\n+  HSDIS_TOOLCHAIN := TOOLCHAIN_DEFAULT\n+  HSDIS_TOOLCHAIN_CFLAGS := $(CFLAGS_JDKLIB)\n+  HSDIS_TOOLCHAIN_LDFLAGS := $(LDFLAGS_JDKLIB)\n+  HSDIS_TOOLCHAIN_LIBS := -ldl\n+endif\n+\n+\n+$(eval $(call SetupJdkLibrary, BUILD_HSDIS, \\\n+    NAME := hsdis, \\\n+    SRC := $(TOPDIR)\/src\/utils\/hsdis, \\\n+    TOOLCHAIN := $(HSDIS_TOOLCHAIN), \\\n+    OUTPUT_DIR := $(HSDIS_OUTPUT_DIR), \\\n+    OBJECT_DIR := $(HSDIS_OUTPUT_DIR), \\\n+    DISABLED_WARNINGS_gcc := undef format-nonliteral sign-compare, \\\n+    DISABLED_WARNINGS_clang := undef format-nonliteral, \\\n+    CFLAGS := $(HSDIS_TOOLCHAIN_CFLAGS) $(HSDIS_CFLAGS), \\\n+    LDFLAGS := $(HSDIS_TOOLCHAIN_LDFLAGS) $(SHARED_LIBRARY_FLAGS), \\\n+    LIBS := $(HSDIS_LIBS) $(HSDIS_TOOLCHAIN_LIBS), \\\n+))\n+\n+build: $(BUILD_HSDIS)\n+\n+TARGETS += build\n+\n+INSTALLED_HSDIS_NAME := hsdis-$(OPENJDK_TARGET_CPU_LEGACY_LIB)$(SHARED_LIBRARY_SUFFIX)\n+\n+INSTALLED_HSDIS := $(INSTALLED_HSDIS_DIR)\/$(INSTALLED_HSDIS_NAME)\n+\n+$(INSTALLED_HSDIS): $(BUILD_HSDIS_TARGET)\n+\t$(call LogWarn, NOTE: The resulting build might not be redistributable. Seek legal advice before distibuting.)\n+\t$(install-file)\n+\n+\n+install: $(INSTALLED_HSDIS)\n+\n+TARGETS += install\n+\n+################################################################################\n+\n+all: $(TARGETS)\n+\n+.PHONY: all default build install\n","filename":"make\/Hsdis.gmk","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -529,0 +529,12 @@\n+ifneq ($(HSDIS_BACKEND), none)\n+  $(eval $(call SetupTarget, build-hsdis, \\\n+      MAKEFILE := Hsdis, \\\n+      TARGET := build, \\\n+  ))\n+\n+  $(eval $(call SetupTarget, install-hsdis, \\\n+      MAKEFILE := Hsdis, \\\n+      TARGET := install, \\\n+  ))\n+endif\n+\n","filename":"make\/Main.gmk","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -252,0 +252,1 @@\n+JDKOPT_SETUP_HSDIS\n","filename":"make\/autoconf\/configure.ac","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -83,0 +83,8 @@\n+    i686-w64-mingw32-gcc)\n+      PKGHANDLER_COMMAND=\"( cd <location of cygwin setup.exe> && cmd \/c setup -q -P gcc-core i686-w64-mingw32-gcc-core mingw64-i686-glib2.0 )\"\n+      HELP_MSG=\"You might be able to fix this by running '$PKGHANDLER_COMMAND'.\"\n+      ;;\n+    x86_64-w64-mingw32-gcc)\n+      PKGHANDLER_COMMAND=\"( cd <location of cygwin setup.exe> && cmd \/c setup -q -P gcc-core x86_64-w64-mingw32-gcc-core mingw64-x86_64-glib2.0 )\"\n+      HELP_MSG=\"You might be able to fix this by running '$PKGHANDLER_COMMAND'.\"\n+      ;;\n","filename":"make\/autoconf\/help.m4","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -707,0 +707,142 @@\n+\n+################################################################################\n+#\n+# Helper function to build binutils from source.\n+#\n+AC_DEFUN([JDKOPT_BUILD_BINUTILS],\n+[\n+  BINUTILS_SRC=\"$with_binutils_src\"\n+  UTIL_FIXUP_PATH(BINUTILS_SRC)\n+\n+  if ! test -d $BINUTILS_SRC; then\n+    AC_MSG_ERROR([--with-binutils-src is not pointing to a directory])\n+  fi\n+  if ! test -x $BINUTILS_SRC\/configure; then\n+    AC_MSG_ERROR([--with-binutils-src does not look like a binutils source directory])\n+  fi\n+\n+  if test -e $BINUTILS_SRC\/bfd\/libbfd.a && \\\n+      test -e $BINUTILS_SRC\/opcodes\/libopcodes.a && \\\n+      test -e $BINUTILS_SRC\/libiberty\/libiberty.a && \\\n+      test -e $BINUTILS_SRC\/zlib\/libz.a; then\n+    AC_MSG_NOTICE([Found binutils binaries in binutils source directory -- not building])\n+  else\n+    # On Windows, we cannot build with the normal Microsoft CL, but must instead use\n+    # a separate mingw toolchain.\n+    if test \"x$OPENJDK_BUILD_OS\" = xwindows; then\n+      if test \"x$OPENJDK_TARGET_CPU\" = \"xx86\"; then\n+        target_base=\"i686-w64-mingw32\"\n+      else\n+        target_base=\"$OPENJDK_TARGET_CPU-w64-mingw32\"\n+      fi\n+      binutils_cc=\"$target_base-gcc\"\n+      binutils_target=\"--host=$target_base --target=$target_base\"\n+      # Somehow the uint typedef is not included when building with mingw\n+      binutils_cflags=\"-Duint=unsigned\"\n+      compiler_version=`$binutils_cc --version 2>&1`\n+      if ! [ [[ \"$compiler_version\" =~ GCC ]] ]; then\n+        AC_MSG_NOTICE([Could not find correct mingw compiler $binutils_cc.])\n+        HELP_MSG_MISSING_DEPENDENCY([$binutils_cc])\n+        AC_MSG_ERROR([Cannot continue. $HELP_MSG])\n+      else\n+        AC_MSG_NOTICE([Using compiler $binutils_cc with version $compiler_version])\n+      fi\n+    elif test \"x$OPENJDK_BUILD_OS\" = xmacosx; then\n+      if test \"x$OPENJDK_TARGET_CPU\" = \"xaarch64\"; then\n+        binutils_target=\"--enable-targets=aarch64-darwin\"\n+      else\n+        binutils_target=\"\"\n+      fi\n+    else\n+      binutils_cc=\"$CC $SYSROOT_CFLAGS\"\n+      binutils_target=\"\"\n+    fi\n+    binutils_cflags=\"$binutils_cflags $MACHINE_FLAG $JVM_PICFLAG $C_O_FLAG_NORM\"\n+\n+    AC_MSG_NOTICE([Running binutils configure])\n+    AC_MSG_NOTICE([configure command line: .\/configure --disable-nls CFLAGS=\"$binutils_cflags\" CC=\"$binutils_cc\" $binutils_target])\n+    saved_dir=`pwd`\n+    cd \"$BINUTILS_SRC\"\n+    .\/configure --disable-nls CFLAGS=\"$binutils_cflags\" CC=\"$binutils_cc\" $binutils_target\n+    if test $? -ne 0 || ! test -e $BINUTILS_SRC\/Makefile; then\n+      AC_MSG_NOTICE([Automatic building of binutils failed on configure. Try building it manually])\n+      AC_MSG_ERROR([Cannot continue])\n+    fi\n+    AC_MSG_NOTICE([Running binutils make])\n+    $MAKE all-opcodes\n+    if test $? -ne 0; then\n+      AC_MSG_NOTICE([Automatic building of binutils failed on make. Try building it manually])\n+      AC_MSG_ERROR([Cannot continue])\n+    fi\n+    cd $saved_dir\n+    AC_MSG_NOTICE([Building of binutils done])\n+  fi\n+\n+  BINUTILS_DIR=\"$BINUTILS_SRC\"\n+])\n+\n+################################################################################\n+#\n+# Determine if hsdis should be built, and if so, with which backend.\n+#\n+AC_DEFUN_ONCE([JDKOPT_SETUP_HSDIS],\n+[\n+  AC_ARG_WITH([hsdis], [AS_HELP_STRING([--with-hsdis],\n+      [what hsdis backend to use ('none', 'binutils') @<:@none@:>@])])\n+\n+  AC_ARG_WITH([binutils], [AS_HELP_STRING([--with-binutils],\n+      [where to find the binutils files needed for hsdis\/binutils])])\n+\n+  AC_ARG_WITH([binutils-src], [AS_HELP_STRING([--with-binutils-src],\n+      [where to find the binutils source for building])])\n+\n+  AC_MSG_CHECKING([what hsdis backend to use])\n+\n+  if test \"x$with_hsdis\" = xyes; then\n+    AC_MSG_ERROR([--with-hsdis must have a value])\n+  elif test \"x$with_hsdis\" = xnone || test \"x$with_hsdis\" = x; then\n+    HSDIS_BACKEND=none\n+    AC_MSG_RESULT(['none', hsdis will not be built])\n+  elif test \"x$with_hsdis\" = xbinutils; then\n+    HSDIS_BACKEND=binutils\n+    AC_MSG_RESULT(['binutils'])\n+\n+    # We need the binutils static libs and includes.\n+    if test \"x$with_binutils_src\" != x; then\n+      # Try building the source first. If it succeeds, it sets $BINUTILS_DIR.\n+      JDKOPT_BUILD_BINUTILS\n+    fi\n+\n+    if test \"x$with_binutils\" != x; then\n+      BINUTILS_DIR=\"$with_binutils\"\n+    fi\n+\n+    AC_MSG_CHECKING([for binutils to use with hsdis])\n+    if test \"x$BINUTILS_DIR\" != x; then\n+      if test -e $BINUTILS_DIR\/bfd\/libbfd.a && \\\n+          test -e $BINUTILS_DIR\/opcodes\/libopcodes.a && \\\n+          test -e $BINUTILS_DIR\/libiberty\/libiberty.a; then\n+        AC_MSG_RESULT([$BINUTILS_DIR])\n+        HSDIS_CFLAGS=\"-I$BINUTILS_DIR\/include -I$BINUTILS_DIR\/bfd -DLIBARCH_$OPENJDK_TARGET_CPU_LEGACY_LIB\"\n+        HSDIS_LIBS=\"$BINUTILS_DIR\/bfd\/libbfd.a $BINUTILS_DIR\/opcodes\/libopcodes.a $BINUTILS_DIR\/libiberty\/libiberty.a $BINUTILS_DIR\/zlib\/libz.a\"\n+      else\n+        AC_MSG_RESULT([invalid])\n+        AC_MSG_ERROR([$BINUTILS_DIR does not contain a proper binutils installation])\n+      fi\n+    else\n+      AC_MSG_RESULT([missing])\n+      AC_MSG_NOTICE([--with-hsdis=binutils requires specifying a binutils installation.])\n+      AC_MSG_NOTICE([Download binutils from https:\/\/www.gnu.org\/software\/binutils and unpack it,])\n+      AC_MSG_NOTICE([and point --with-binutils-src to the resulting directory, or use])\n+      AC_MSG_NOTICE([--with-binutils to point to a pre-built binutils installation.])\n+      AC_MSG_ERROR([Cannot continue])\n+    fi\n+  else\n+    AC_MSG_RESULT([invalid])\n+    AC_MSG_ERROR([Incorrect hsdis backend \"$with_hsdis\"])\n+  fi\n+\n+  AC_SUBST(HSDIS_BACKEND)\n+  AC_SUBST(HSDIS_CFLAGS)\n+  AC_SUBST(HSDIS_LIBS)\n+])\n","filename":"make\/autoconf\/jdk-options.m4","additions":142,"deletions":0,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -362,0 +362,4 @@\n+HSDIS_BACKEND := @HSDIS_BACKEND@\n+HSDIS_CFLAGS := @HSDIS_CFLAGS@\n+HSDIS_LIBS := @HSDIS_LIBS@\n+\n","filename":"make\/autoconf\/spec.gmk.in","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-'hsdis':  A HotSpot plugin for disassembling dynamically generated code.\n+'hsdis': A HotSpot plugin for disassembling dynamically generated code.\n@@ -48,6 +48,1 @@\n-The files in this directory (Makefile, hsdis.[ch], hsdis-demo.c)\n-are built independently of the HotSpot JVM.\n-\n-To use the plugin with a JVM, you need a new version that can load it.\n-If the product mode of your JVM does not accept -XX:+PrintAssembly,\n-you do not have a version that is new enough.\n+The files in this directory are built independently of the HotSpot JVM.\n@@ -57,57 +52,4 @@\n-To build this project you need a copy of GNU binutils to build against.\n-It is known to work with binutils 2.29.1, 2.30, and 2.31.1. Building\n-against versions older than 2.29 is no longer supported. Download a\n-copy of the software from http:\/\/directory.fsf.org\/project\/binutils or\n-one of its mirrors.  Builds targetting windows currently require the\n-use of a cross compiler.\n-\n-Binutils should be configured with the '--disable-nls' flag to disable\n-Native Language Support, otherwise you might get an \"undefined\n-reference to `libintl_gettext'\" if you try to load hsdis.so on systems\n-which don't have NLS by default.  It also avoids build problems on\n-other configurations that don't include the full NLS support.\n-\n-The makefile looks for the sources in build\/binutils or you can\n-specify its location to the makefile using BINUTILS=path.  It will\n-configure binutils and build it first and then build and link the\n-disassembly adapter.  Make all will build the default target for your\n-platform.  If your platform supports both 32 and 64 simultaneously then\n-\"make both\" will build them both at once.  \"make all64\" will\n-explicitly build the 64 bit version.  By default this will build the\n-disassembler library only.  If you build demo it will build a demo\n-program that attempts to exercise the library.\n-\n-With recent version of binutils (i.e. binutils-2.23.2) you may get the\n-following build error:\n-\n-WARNING: `makeinfo' is missing on your system.  You should only need it if\n-         you modified a `.texi' or `.texinfo' file, or any other file\n-         ...\n-\n-This is because of \"Bug 15345 - binutils-2.23.2 tarball doesn't build\n-without makeinfo\" [2]. The easiest way to work around this problem is\n-by doing a \"touch $BINUTILS\/bfd\/doc\/bfd.info\".\n-\n-Windows\n-\n-In theory this should be buildable on Windows but getting a working\n-GNU build environment on Windows has proven difficult.  MINGW should\n-be able to do it but at the time of this writing I was unable to get\n-this working.  Instead you can use the mingw cross compiler on linux\n-to produce the windows binaries.  For 32-bit windows you can install\n-mingw32 using your package manager and it will be added to your path\n-automatically.  For 64-bit you need to download the 64 bit mingw from\n-http:\/\/sourceforge.net\/projects\/mingw-w64.  Grab a copy of the\n-complete toolchain and unpack it somewhere.  Put the bin directory of\n-the toolchain in your path.  The mingw installs contain cross compile\n-versions of gcc that are named with a prefix to indicate what they are\n-targeting and you must tell the Makefile which one to use.  This\n-should either be i586-mingw32msvc or x86_64-pc-mingw32 depending on\n-which one you are targeting and there should be a version of gcc in\n-your path named i586-mingw32msvc-gcc or x86_64-pc-mingw32-gcc.  Tell\n-the makefile what prefix to use to find the mingw tools by using\n-MINGW=.  For example:\n-\n-make MINGW=i586-mingw32msvc BINUTILS=build\/binutils-2.31.1\n-\n-will build the Win32 cross compiled version of hsdis based on 2.31.1.\n+To build this project you need a copy of GNU binutils to build against. It is\n+known to work with binutils 2.37. Building against versions older than 2.29 is\n+not supported. Download a copy of the software from\n+http:\/\/directory.fsf.org\/project\/binutils or one of its mirrors.\n@@ -115,1 +57,2 @@\n-* Installing\n+To build this library, you must enable building in configure by \"bash configure\n+--with-hsdis=binutils\".\n@@ -117,3 +60,6 @@\n-Products are named like build\/$OS-$LIBARCH\/hsdis-$LIBARCH.so. You can\n-install them next to your libjvm.so inside your JRE\/JDK or alternatively\n-put it anywhere on your LD_LIBRARY_PATH. The search path in the JVM is:\n+You must also specify where binutils is located. To facilitate building, you can\n+point to a place where the (unpacked) binutils sources are located using\n+\"--with-binutils-src=<location>\", and configure will build binutils for you. On\n+repeated runs, you can keep this command line option, since configure will\n+figure out that the binutils binaries are already present and skip building, or\n+you can replace it with \"--with-binutils=<location>\".\n@@ -121,4 +67,2 @@\n-1. <home>\/lib\/<vm>\/libhsdis-<arch>.so\n-2. <home>\/lib\/<vm>\/hsdis-<arch>.so\n-3. <home>\/lib\/hsdis-<arch>.so\n-4. hsdis-<arch>.so  (using LD_LIBRARY_PATH)\n+If you have pre-built binutils binaries, you can point to them directly using\n+\"--with-binutils=<location>\".\n@@ -126,1 +70,2 @@\n-Now test:\n+When you have created a proper configuration, you can then build the hsdis\n+library using \"make build-hsdis\".\n@@ -128,4 +73,1 @@\n-  export LD_LIBRARY_PATH ...\/hsdis\/build\/$OS-$LIBARCH:$LD_LIBRARY_PATH\n-  dargs='-XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly'\n-  dargs=$dargs' -XX:PrintAssemblyOptions=hsdis-print-bytes'\n-  java $dargs -Xbatch CompileCommand=print,*String.hashCode HelloWorld\n+* Building on Windows\n@@ -133,2 +75,7 @@\n-If the product mode of the JVM does not accept -XX:+PrintAssembly,\n-you do not have a version new enough to use the hsdis plugin.\n+On Windows, the normal Microsoft Visual Studio toolchain cannot build binutils.\n+Instead we need to use the mingw compiler. This is available as a cygwin\n+package. You need to install the \"gcc-core\" and \"mingw64-x86_64-gcc-core\"\n+packages (or \"mingw64-i686-gcc-core\", if you want the 32-bit version) and\n+\"mingw64-x86_64-glib2.0\".\n+\n+* Installing\n@@ -136,1 +83,3 @@\n-* Wiki\n+To build the hsdis library, run \"make build-hsdis\". This will build the library\n+in a separate directory, but not make it available to the JDK in the\n+configuration. To actually install it in the JDK, run \"make install-hsdis\".\n@@ -138,1 +87,2 @@\n-More information can be found in the OpenJDK HotSpot Wiki [1].\n+Note: The resulting build may not be distributable. Please get legal advice if\n+you intend to distribute the result of your build.\n@@ -140,0 +90,1 @@\n+* Using the library\n@@ -141,1 +92,4 @@\n-Resources:\n+The hsdis library will be automatically loaded by Hotspot when you use the\n+diagnostic option \"-XX:+PrintAssembly\". Note that since this is a diagnostic\n+option, you need to unlock these first, so in practice you activate it using\n+\"-XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly\".\n@@ -143,2 +97,2 @@\n-[1] https:\/\/wiki.openjdk.java.net\/display\/HotSpot\/PrintAssembly\n-[2] http:\/\/sourceware.org\/bugzilla\/show_bug.cgi?id=15345\n+More information is available at the wiki\n+[https:\/\/wiki.openjdk.java.net\/display\/HotSpot\/PrintAssembly].\n","filename":"src\/utils\/hsdis\/README","additions":39,"deletions":85,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -1,281 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The Universal Permissive License (UPL), Version 1.0\n- *\n- * Subject to the condition set forth below, permission is hereby granted to\n- * any person obtaining a copy of this software, associated documentation\n- * and\/or data (collectively the \"Software\"), free of charge and under any\n- * and all copyright rights in the Software, and any and all patent rights\n- * owned or freely licensable by each licensor hereunder covering either (i)\n- * the unmodified Software as contributed to or provided by such licensor,\n- * or (ii) the Larger Works (as defined below), to deal in both\n- *\n- * (a) the Software, and\n- *\n- * (b) any piece of software and\/or hardware listed in the lrgrwrks.txt file\n- * if one is included with the Software (each a \"Larger Work\" to which the\n- * Software is contributed by such licensors),\n- *\n- * without restriction, including without limitation the rights to copy,\n- * create derivative works of, display, perform, and distribute the Software\n- * and make, use, sell, offer for sale, import, export, have made, and have\n- * sold the Software and the Larger Work(s), and to sublicense the foregoing\n- * rights on either these or other terms.\n- *\n- * This license is subject to the following condition:\n- *\n- * The above copyright notice and either this complete permission notice or\n- * at a minimum a reference to the UPL must be included in all copies or\n- * substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n- * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n- * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n- * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n- * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n- * USE OR OTHER DEALINGS IN THE SOFTWARE.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/* hsdis-demo.c -- dump a range of addresses as native instructions\n-   This demonstrates the protocol required by the HotSpot PrintAssembly option.\n-*\/\n-\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <string.h>\n-#include <inttypes.h>\n-\n-#include \"hsdis.h\"\n-\n-\n-void greet(const char*);\n-void disassemble(uintptr_t, uintptr_t);\n-void end_of_file();\n-\n-const char* options = NULL;\n-int         raw     = 0;\n-int         xml     = 0;\n-\n-int main(int ac, char** av) {\n-  int greeted = 0;\n-  int i;\n-  for (i = 1; i < ac; i++) {\n-    const char* arg = av[i];\n-    if (arg[0] == '-') {\n-      if (!strcmp(arg, \"-xml\"))\n-        xml ^= 1;\n-      else if (!strcmp(arg, \"-raw\"))\n-        raw ^= 1;\n-      else if (!strncmp(arg, \"-options=\", 9))\n-        options = arg+9;\n-      else\n-        { printf(\"Usage: %s [-xml] [name...]\\n\", av[0]); exit(2); }\n-      continue;\n-    }\n-    greet(arg);\n-    greeted = 1;\n-  }\n-  if (!greeted)\n-    greet(\"world\");\n-  printf(\"...And now for something completely different:\\n\");\n-  void *start = (void*) &main;\n-  void *end = (void*) &end_of_file;\n-#if defined(__ia64) || (defined(__powerpc__) && !defined(ABI_ELFv2))\n-  \/* On IA64 and PPC function pointers are pointers to function descriptors *\/\n-  start = *((void**)start);\n-  end = *((void**)end);\n-#endif\n-  disassemble(start, (end > start) ? end : start + 64);\n-  printf(\"Cheers!\\n\");\n-}\n-\n-void greet(const char* whom) {\n-  printf(\"Hello, %s!\\n\", whom);\n-}\n-\n-void end_of_file() { }\n-\n-\/* don't disassemble after this point... *\/\n-\n-#include \"dlfcn.h\"\n-\n-#define DECODE_INSTRUCTIONS_VIRTUAL_NAME \"decode_instructions_virtual\"\n-#define DECODE_INSTRUCTIONS_NAME \"decode_instructions\"\n-#define HSDIS_NAME               \"hsdis\"\n-static void* decode_instructions_pv = 0;\n-static void* decode_instructions_sv = 0;\n-static const char* hsdis_path[] = {\n-  HSDIS_NAME\"-\"LIBARCH LIB_EXT,\n-  \".\/\" HSDIS_NAME\"-\"LIBARCH LIB_EXT,\n-#ifdef TARGET_DIR\n-  TARGET_DIR\"\/\"HSDIS_NAME\"-\"LIBARCH LIB_EXT,\n-#endif\n-  NULL\n-};\n-\n-static const char* load_decode_instructions() {\n-  void* dllib = NULL;\n-  const char* *next_in_path = hsdis_path;\n-  while (1) {\n-    decode_instructions_pv = dlsym(dllib, DECODE_INSTRUCTIONS_VIRTUAL_NAME);\n-    decode_instructions_sv = dlsym(dllib, DECODE_INSTRUCTIONS_NAME);\n-    if (decode_instructions_pv != NULL || decode_instructions_sv != NULL)\n-      return NULL;\n-    if (dllib != NULL)\n-      return \"plugin does not defined \"DECODE_INSTRUCTIONS_VIRTUAL_NAME\" and \"DECODE_INSTRUCTIONS_NAME;\n-    for (dllib = NULL; dllib == NULL; ) {\n-      const char* next_lib = (*next_in_path++);\n-      if (next_lib == NULL)\n-        return \"cannot find plugin \"HSDIS_NAME LIB_EXT;\n-      dllib = dlopen(next_lib, RTLD_LAZY);\n-    }\n-  }\n-}\n-\n-\n-static const char* lookup(void* addr) {\n-#if defined(__ia64) || defined(__powerpc__)\n-  \/* On IA64 and PPC function pointers are pointers to function descriptors *\/\n-#define CHECK_NAME(fn) \\\n-  if (addr == *((void**) &fn))  return #fn;\n-#else\n-#define CHECK_NAME(fn) \\\n-  if (addr == (void*) &fn)  return #fn;\n-#endif\n-\n-  CHECK_NAME(main);\n-  CHECK_NAME(greet);\n-  return NULL;\n-}\n-\n-\/* does the event match the tag, followed by a null, space, or slash? *\/\n-#define MATCH(event, tag) \\\n-  (!strncmp(event, tag, sizeof(tag)-1) && \\\n-   (!event[sizeof(tag)-1] || strchr(\" \/\", event[sizeof(tag)-1])))\n-\n-\n-static const char event_cookie[] = \"event_cookie\"; \/* demo placeholder *\/\n-static void* simple_handle_event(void* cookie, const char* event, void* arg) {\n-  if (MATCH(event, \"\/insn\")) {\n-    \/\/ follow each complete insn by a nice newline\n-    printf(\"\\n\");\n-  }\n-  return NULL;\n-}\n-\n-static void* handle_event(void* cookie, const char* event, void* arg) {\n-#define NS_DEMO \"demo:\"\n-  if (cookie != event_cookie)\n-    printf(\"*** bad event cookie %p != %p\\n\", cookie, event_cookie);\n-\n-  if (xml) {\n-    \/* We could almost do a printf(event, arg),\n-       but for the sake of a better demo,\n-       we dress the result up as valid XML.\n-    *\/\n-    const char* fmt = strchr(event, ' ');\n-    int evlen = (fmt ? fmt - event : strlen(event));\n-    if (!fmt) {\n-      if (event[0] != '\/') {\n-        printf(\"<\"NS_DEMO\"%.*s>\", evlen, event);\n-      } else {\n-        printf(\"<\/\"NS_DEMO\"%.*s>\", evlen-1, event+1);\n-      }\n-    } else {\n-      if (event[0] != '\/') {\n-        printf(\"<\"NS_DEMO\"%.*s\", evlen, event);\n-        printf(fmt, arg);\n-        printf(\">\");\n-      } else {\n-        printf(\"<\"NS_DEMO\"%.*s_done\", evlen-1, event+1);\n-        printf(fmt, arg);\n-        printf(\"\/><\/\"NS_DEMO\"%.*s>\", evlen-1, event+1);\n-      }\n-    }\n-  }\n-\n-  if (MATCH(event, \"insn\")) {\n-    const char* name = lookup(arg);\n-    if (name)  printf(\"%s:\\n\", name);\n-\n-    \/* basic action for <insn>: *\/\n-    printf(\" %p\\t\", arg);\n-\n-  } else if (MATCH(event, \"\/insn\")) {\n-    \/\/ follow each complete insn by a nice newline\n-    printf(\"\\n\");\n-  } else if (MATCH(event, \"mach\")) {\n-    printf(\"Decoding for CPU '%s'\\n\", (char*) arg);\n-\n-  } else if (MATCH(event, \"addr\")) {\n-    \/* basic action for <addr\/>: *\/\n-    const char* name = lookup(arg);\n-    if (name) {\n-      printf(\"&%s (%p)\", name, arg);\n-      \/* return non-null to notify hsdis not to print the addr *\/\n-      return arg;\n-    }\n-  }\n-\n-  \/* null return is always safe; can mean \"I ignored it\" *\/\n-  return NULL;\n-}\n-\n-#define fprintf_callback \\\n-  (decode_instructions_printf_callback_ftype)&fprintf\n-\n-void disassemble(uintptr_t from, uintptr_t to) {\n-  const char* err = load_decode_instructions();\n-  if (err != NULL) {\n-    printf(\"%s: %s\\n\", err, dlerror());\n-    exit(1);\n-  }\n-  decode_func_vtype decode_instructions_v\n-    = (decode_func_vtype) decode_instructions_pv;\n-  decode_func_stype decode_instructions_s\n-    = (decode_func_stype) decode_instructions_sv;\n-  void* res;\n-  if (decode_instructions_pv != NULL) {\n-    printf(\"\\nDecoding from %p to %p...with %s\\n\", from, to, DECODE_INSTRUCTIONS_VIRTUAL_NAME);\n-    if (raw) {\n-      res = (*decode_instructions_v)(from, to,\n-                                     (unsigned char*)from, to - from,\n-                                     simple_handle_event, stdout,\n-                                     NULL, stdout,\n-                                     options, 0);\n-    } else {\n-      res = (*decode_instructions_v)(from, to,\n-                                    (unsigned char*)from, to - from,\n-                                     handle_event, (void*) event_cookie,\n-                                     fprintf_callback, stdout,\n-                                     options, 0);\n-    }\n-    if (res != (void*)to)\n-      printf(\"*** Result was %p!\\n\", res);\n-  }\n-  void* sres;\n-  if (decode_instructions_sv != NULL) {\n-    printf(\"\\nDecoding from %p to %p...with old decode_instructions\\n\", from, to, DECODE_INSTRUCTIONS_NAME);\n-    if (raw) {\n-      sres = (*decode_instructions_s)(from, to,\n-                                      simple_handle_event, stdout,\n-                                      NULL, stdout,\n-                                      options);\n-    } else {\n-      sres = (*decode_instructions_s)(from, to,\n-                                      handle_event, (void*) event_cookie,\n-                                      fprintf_callback, stdout,\n-                                      options);\n-    }\n-    if (sres != (void *)to)\n-      printf(\"*** Result of decode_instructions %p!\\n\", sres);\n-  }\n-}\n","filename":"src\/utils\/hsdis\/hsdis-demo.c","additions":0,"deletions":281,"binary":false,"changes":281,"status":"deleted"}]}