{"files":[{"patch":"@@ -1847,0 +1847,14 @@\n+\/\/ Clear the unused cmove pack and its related packs from superword candidate packset.\n+void SuperWord::remove_cmove_and_related_packs(Node_List* cmove_pk) {\n+  Node* cmove = cmove_pk->at(0);\n+  Node* bol = cmove->as_CMove()->in(CMoveNode::Condition);\n+  if (my_pack(bol)) {\n+    remove_pack(my_pack(bol));\n+  }\n+  Node* cmp = bol->in(1);\n+  if (my_pack(cmp)) {\n+    remove_pack(my_pack(cmp));\n+  }\n+  remove_pack(cmove_pk);\n+}\n+\n@@ -1870,1 +1884,1 @@\n-\/\/ Also clear unqualified CMove pack from the packset.\n+\/\/ Also delete unqualified CMove pack from the packset and clear all info.\n@@ -1874,12 +1888,6 @@\n-    Node_List* unused_cmove_pk = _cmovev_kit.make_cmovevd_pack(_packset.at(i));\n-\n-    \/\/ Clear the unused cmove pack and its related packs from superword candidate packset.\n-    if (unused_cmove_pk != NULL) {\n-      Node* cmove = unused_cmove_pk->at(0);\n-      Node* bol = cmove->as_CMove()->in(CMoveNode::Condition);\n-      if (my_pack(bol)) {\n-        remove_pack(my_pack(bol));\n-      }\n-      Node* cmp = bol->in(1);\n-      if (my_pack(cmp)) {\n-        remove_pack(my_pack(cmp));\n+    Node_List* pk = _packset.at(i);\n+    if (_cmovev_kit.is_cmove_pack_candidate(pk)) {\n+      if (_cmovev_kit.can_merge_cmove_pack(pk)) {\n+        _cmovev_kit.make_cmove_pack(pk);\n+      } else {\n+        remove_cmove_and_related_packs(pk);\n@@ -1887,1 +1895,0 @@\n-      remove_pack(unused_cmove_pk);\n@@ -1889,1 +1896,0 @@\n-\n@@ -1929,0 +1935,9 @@\n+bool CMoveKit::is_cmove_pack_candidate(Node_List* cmove_pk) {\n+  Node *cmove = cmove_pk->at(0);\n+  if ((cmove->Opcode() != Op_CMoveF && cmove->Opcode() != Op_CMoveD) ||\n+      pack(cmove) != NULL \/* already in the cmove pack *\/) {\n+    return false;\n+  }\n+  return true;\n+}\n+\n@@ -1931,11 +1946,2 @@\n-\/\/ If yes, create a new cmove pack to substitute the old one, map all info to the\n-\/\/ new pack and delete the old cmove pack and related packs from the packset.\n-\/\/ If no, return immediately with the unqualified cmove pack, delete related packs from\n-\/\/ the packset and clear all info as well.\n-Node_List* CMoveKit::make_cmovevd_pack(Node_List* cmovd_pk) {\n-  Node *cmovd = cmovd_pk->at(0);\n-\n-  if ((cmovd->Opcode() != Op_CMoveF && cmovd->Opcode() != Op_CMoveD) ||\n-      pack(cmovd) != NULL \/* already in the cmov pack *\/) {\n-    return NULL;\n-  }\n+bool CMoveKit::can_merge_cmove_pack(Node_List* cmove_pk) {\n+  Node *cmove = cmove_pk->at(0);\n@@ -1943,3 +1949,3 @@\n-  if (cmovd->in(0) != NULL) {\n-    NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmovevd_pack: CMoveD %d has control flow, escaping...\", cmovd->_idx); cmovd->dump();})\n-    return cmovd_pk;\n+  if (cmove->in(0) != NULL) {\n+    NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmove_pack: CMove %d has control flow, escaping...\", cmove->_idx); cmove->dump();})\n+    return false;\n@@ -1948,8 +1954,8 @@\n-  Node* bol = cmovd->as_CMove()->in(CMoveNode::Condition);\n-  if (!bol->is_Bool()\n-      || bol->outcnt() != 1\n-      || !_sw->same_generation(bol, cmovd)\n-      || bol->in(0) != NULL  \/\/ BoolNode has control flow!!\n-      || _sw->my_pack(bol) == NULL) {\n-      NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmovevd_pack: Bool %d does not fit CMoveD %d for building vector, escaping...\", bol->_idx, cmovd->_idx); bol->dump();})\n-    return cmovd_pk;\n+  Node* bol = cmove->as_CMove()->in(CMoveNode::Condition);\n+  if (!bol->is_Bool() ||\n+      bol->outcnt() != 1 ||\n+      !_sw->same_generation(bol, cmove) ||\n+      bol->in(0) != NULL || \/\/ BoolNode has control flow!!\n+      _sw->my_pack(bol) == NULL) {\n+      NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmove_pack: Bool %d does not fit CMove %d for building vector, escaping...\", bol->_idx, cmove->_idx); bol->dump();})\n+    return false;\n@@ -1958,2 +1964,2 @@\n-  if (bool_pk->size() != cmovd_pk->size() ) {\n-    return cmovd_pk;\n+  if (bool_pk->size() != cmove_pk->size() ) {\n+    return false;\n@@ -1962,8 +1968,8 @@\n-  Node* cmpd = bol->in(1);\n-  if (!cmpd->is_Cmp()\n-      || cmpd->outcnt() != 1\n-      || !_sw->same_generation(cmpd, cmovd)\n-      || cmpd->in(0) != NULL  \/\/ CmpDNode has control flow!!\n-      || _sw->my_pack(cmpd) == NULL) {\n-      NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmovevd_pack: CmpD %d does not fit CMoveD %d for building vector, escaping...\", cmpd->_idx, cmovd->_idx); cmpd->dump();})\n-    return cmovd_pk;\n+  Node* cmp = bol->in(1);\n+  if (!cmp->is_Cmp() ||\n+      cmp->outcnt() != 1 ||\n+      !_sw->same_generation(cmp, cmove) ||\n+      cmp->in(0) != NULL || \/\/ CmpNode has control flow!!\n+      _sw->my_pack(cmp) == NULL) {\n+      NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmove_pack: Cmp %d does not fit CMove %d for building vector, escaping...\", cmp->_idx, cmove->_idx); cmp->dump();})\n+    return false;\n@@ -1971,3 +1977,3 @@\n-  Node_List* cmpd_pk = _sw->my_pack(cmpd);\n-  if (cmpd_pk->size() != cmovd_pk->size() ) {\n-    return cmovd_pk;\n+  Node_List* cmp_pk = _sw->my_pack(cmp);\n+  if (cmp_pk->size() != cmove_pk->size() ) {\n+    return false;\n@@ -1976,3 +1982,3 @@\n-  if (!test_cmpd_pack(cmpd_pk, cmovd_pk)) {\n-    NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmovevd_pack: cmpd pack for CmpD %d failed vectorization test\", cmpd->_idx); cmpd->dump();})\n-    return cmovd_pk;\n+  if (!test_cmpd_pack(cmp_pk, cmove_pk)) {\n+    NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmove_pack: cmp pack for Cmp %d failed vectorization test\", cmp->_idx); cmp->dump();})\n+    return false;\n@@ -1981,2 +1987,14 @@\n-  Node_List* new_cmpd_pk = new Node_List();\n-  uint sz = cmovd_pk->size() - 1;\n+  return true;\n+}\n+\n+\/\/ Create a new cmove pack to substitute the old one, map all info to the\n+\/\/ new pack and delete the old cmove pack and related packs from the packset.\n+void CMoveKit::make_cmove_pack(Node_List* cmove_pk) {\n+  Node *cmove = cmove_pk->at(0);\n+  Node* bol = cmove->as_CMove()->in(CMoveNode::Condition);\n+  Node_List* bool_pk = _sw->my_pack(bol);\n+  Node* cmp = bol->in(1);\n+  Node_List* cmp_pk = _sw->my_pack(cmp);\n+\n+  Node_List* new_cmove_pk = new Node_List();\n+  uint sz = cmove_pk->size() - 1;\n@@ -1984,1 +2002,1 @@\n-    Node* cmov = cmovd_pk->at(i);\n+    Node* cmov = cmove_pk->at(i);\n@@ -1986,1 +2004,3 @@\n-    Node* cmp  = cmpd_pk->at(i);\n+    Node* cmp  = cmp_pk->at(i);\n+\n+    new_cmove_pk->insert(i, cmov);\n@@ -1988,1 +2008,3 @@\n-    new_cmpd_pk->insert(i, cmov);\n+    map(cmov, new_cmove_pk);\n+    map(bol, new_cmove_pk);\n+    map(cmp, new_cmove_pk);\n@@ -1990,4 +2012,1 @@\n-    map(cmov, new_cmpd_pk);\n-    map(bol, new_cmpd_pk);\n-    map(cmp, new_cmpd_pk);\n-    _sw->set_my_pack(cmov, new_cmpd_pk); \/\/ and keep old packs for cmp and bool\n+    _sw->set_my_pack(cmov, new_cmove_pk); \/\/ and keep old packs for cmp and bool\n@@ -1995,1 +2014,1 @@\n-  _sw->_packset.remove(cmovd_pk);\n+  _sw->_packset.remove(cmove_pk);\n@@ -1997,4 +2016,3 @@\n-  _sw->_packset.remove(cmpd_pk);\n-  _sw->_packset.append(new_cmpd_pk);\n-  NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print_cr(\"CMoveKit::make_cmovevd_pack: added syntactic CMoveD pack\"); _sw->print_pack(new_cmpd_pk);})\n-  return NULL;\n+  _sw->_packset.remove(cmp_pk);\n+  _sw->_packset.append(new_cmove_pk);\n+  NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print_cr(\"CMoveKit::make_cmove_pack: added syntactic CMove pack\"); _sw->print_pack(new_cmove_pk);})\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":85,"deletions":67,"binary":false,"changes":152,"status":"modified"},{"patch":"@@ -218,1 +218,5 @@\n-  Node_List* make_cmovevd_pack(Node_List* cmovd_pk);\n+  \/\/ If the input pack is a cmove candidate, return true, otherwise return false.\n+  bool is_cmove_pack_candidate(Node_List* cmove_pk);\n+  \/\/ Determine if the current cmove pack can be vectorized.\n+  bool can_merge_cmove_pack(Node_List* cmove_pk);\n+  void make_cmove_pack(Node_List* cmovd_pk);\n@@ -539,0 +543,2 @@\n+  \/\/ Clear the unused cmove pack and its related packs from superword candidate packset.\n+  void remove_cmove_and_related_packs(Node_List* cmove_pk);\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- *\n+ * @requires vm.compiler2.enabled\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestCondAddDeadBranch.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- *\n+ * @requires vm.compiler2.enabled\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestCastFFAtPhi.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}