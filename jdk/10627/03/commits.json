[{"commit":{"message":"Update IR framework testcase"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestVectorConditionalMove.java"}],"sha":"f65118cc7f5088cfbf164eed8cf676fc6dd8548c"},{"commit":{"message":"Clean up the code style"},"files":[{"filename":"src\/hotspot\/share\/opto\/superword.cpp"}],"sha":"47ca7341d91061ca6e1b86c2308ff046c9ac410e"},{"commit":{"message":"Refine the function and clean up the code style"},"files":[{"filename":"src\/hotspot\/share\/opto\/superword.cpp"},{"filename":"src\/hotspot\/share\/opto\/superword.hpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestCondAddDeadBranch.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestCastFFAtPhi.java"}],"sha":"a113675d39916c241690edb495455382ae47a238"},{"commit":{"message":"Merge branch 'master' into fg8293833"},"files":[],"sha":"55928c5928bd871d8654d1cec04dfb20b550e38d"},{"commit":{"message":"8293833: Error mixing types with -XX:+UseCMoveUnconditionally -XX:+UseVectorCmov\n\nAfter JDK-8139340, JDK-8192846 and JDK-8289422, we can vectorize\nthe case below by enabling -XX:+UseCMoveUnconditionally and\n-XX:+UseVectorCmov:\n```\n\/\/ double[] a, double[] b, double[] c;\nfor (int i = 0; i < a.length; i++) {\n    c[i] = (a[i] > b[i]) ? a[i] : b[i];\n}\n```\n\nBut we don't support the case like:\n```\n\/\/ double[] a;\n\/\/ int seed;\nfor (int i = 0; i < a.length; i++)\n    a[i] = (i % 2 == 0) ? seed + i : seed - i;\n}\n```\nbecause the IR nodes for the CMoveD in the loop is:\n```\n  AddI  AndI     AddD   SubD\n     \\  \/         \/     \/\n     CmpI        \/    \/\n       \\        \/   \/\n      Bool     \/  \/\n          \\   \/ \/\n          CMoveD\n```\n\nand it is not our target pattern, which requires that the inputs\nof Cmp node must be the same as the inputs of CMove node as\ncommented in CMoveKit::make_cmovevd_pack(). Because we can't\nvectorize the CMoveD pack, we shouldn't vectorize its inputs,\nAddD and SubD. But the current function\nCMoveKit::make_cmovevd_pack() doesn't clear the unqualified\nCMoveD pack from the packset. In this way, superword wrongly\nvectorizes AddD and SubD. Finally, we get a scalar CMoveD node\nwith two vector inputs, AddVD and SubVD, which has wrong mixing\ntypes, then the assertion fails.\n\nTo fix it, we need to remove the unvectorized CMoveD pack from\nthe packset and clear related map info."},"files":[{"filename":"src\/hotspot\/share\/opto\/superword.cpp"},{"filename":"src\/hotspot\/share\/opto\/superword.hpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestCondAddDeadBranch.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestCastFFAtPhi.java"}],"sha":"1b615da31b1785eba49a18a753f345983f66c04c"}]