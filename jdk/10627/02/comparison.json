{"files":[{"patch":"@@ -1847,0 +1847,14 @@\n+\/\/ Clear the unused cmove pack and its related packs from superword candidate packset.\n+void SuperWord::remove_cmove_and_related_packs(Node_List* cmove_pk) {\n+  Node* cmove = cmove_pk->at(0);\n+  Node* bol = cmove->as_CMove()->in(CMoveNode::Condition);\n+  if (my_pack(bol)) {\n+    remove_pack(my_pack(bol));\n+  }\n+  Node* cmp = bol->in(1);\n+  if (my_pack(cmp)) {\n+    remove_pack(my_pack(cmp));\n+  }\n+  remove_pack(cmove_pk);\n+}\n+\n@@ -1848,1 +1862,1 @@\n-\/\/ Merge CMoveD into new vector-nodes\n+\/\/ Merge qualified CMoveD into new vector-nodes\n@@ -1870,0 +1884,1 @@\n+\/\/ Also delete unqualified CMove pack from the packset and clear all info.\n@@ -1873,1 +1888,8 @@\n-    _cmovev_kit.make_cmovevd_pack(_packset.at(i));\n+    Node_List* pk = _packset.at(i);\n+    if (_cmovev_kit.is_cmove_pack_candidate(pk)) {\n+      if (_cmovev_kit.can_merge_cmove_pack(pk)) {\n+        _cmovev_kit.make_cmove_pack(pk);\n+      } else {\n+        remove_cmove_and_related_packs(pk);\n+      }\n+    }\n@@ -1875,0 +1897,1 @@\n+\n@@ -1912,10 +1935,5 @@\n-Node_List* CMoveKit::make_cmovevd_pack(Node_List* cmovd_pk) {\n-  Node *cmovd = cmovd_pk->at(0);\n-  if (!cmovd->is_CMove()) {\n-    return NULL;\n-  }\n-  if (cmovd->Opcode() != Op_CMoveF && cmovd->Opcode() != Op_CMoveD) {\n-    return NULL;\n-  }\n-  if (pack(cmovd) != NULL) { \/\/ already in the cmov pack\n-    return NULL;\n+bool CMoveKit::is_cmove_pack_candidate(Node_List* cmove_pk) {\n+  Node* cmove = cmove_pk->at(0);\n+  if ((cmove->Opcode() != Op_CMoveF && cmove->Opcode() != Op_CMoveD) ||\n+      pack(cmove) != NULL \/* already in the cmove pack *\/) {\n+    return false;\n@@ -1923,3 +1941,11 @@\n-  if (cmovd->in(0) != NULL) {\n-    NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmovevd_pack: CMoveD %d has control flow, escaping...\", cmovd->_idx); cmovd->dump();})\n-    return NULL;\n+  return true;\n+}\n+\n+\/\/ Determine if the current pack is an ideal cmove pack, and if its related packs,\n+\/\/ i.e. bool node pack and cmp node pack, can be successfully merged for vectorization.\n+bool CMoveKit::can_merge_cmove_pack(Node_List* cmove_pk) {\n+  Node* cmove = cmove_pk->at(0);\n+\n+  if (cmove->in(0) != NULL) {\n+    NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmove_pack: CMove %d has control flow, escaping...\", cmove->_idx); cmove->dump();})\n+    return false;\n@@ -1928,8 +1954,8 @@\n-  Node* bol = cmovd->as_CMove()->in(CMoveNode::Condition);\n-  if (!bol->is_Bool()\n-      || bol->outcnt() != 1\n-      || !_sw->same_generation(bol, cmovd)\n-      || bol->in(0) != NULL  \/\/ BoolNode has control flow!!\n-      || _sw->my_pack(bol) == NULL) {\n-      NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmovevd_pack: Bool %d does not fit CMoveD %d for building vector, escaping...\", bol->_idx, cmovd->_idx); bol->dump();})\n-      return NULL;\n+  Node* bol = cmove->as_CMove()->in(CMoveNode::Condition);\n+  if (!bol->is_Bool() ||\n+      bol->outcnt() != 1 ||\n+      !_sw->same_generation(bol, cmove) ||\n+      bol->in(0) != NULL || \/\/ BoolNode has control flow!!\n+      _sw->my_pack(bol) == NULL) {\n+      NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmove_pack: Bool %d does not fit CMove %d for building vector, escaping...\", bol->_idx, cmove->_idx); bol->dump();})\n+    return false;\n@@ -1938,2 +1964,2 @@\n-  if (bool_pk->size() != cmovd_pk->size() ) {\n-    return NULL;\n+  if (bool_pk->size() != cmove_pk->size() ) {\n+    return false;\n@@ -1942,8 +1968,8 @@\n-  Node* cmpd = bol->in(1);\n-  if (!cmpd->is_Cmp()\n-      || cmpd->outcnt() != 1\n-      || !_sw->same_generation(cmpd, cmovd)\n-      || cmpd->in(0) != NULL  \/\/ CmpDNode has control flow!!\n-      || _sw->my_pack(cmpd) == NULL) {\n-      NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmovevd_pack: CmpD %d does not fit CMoveD %d for building vector, escaping...\", cmpd->_idx, cmovd->_idx); cmpd->dump();})\n-      return NULL;\n+  Node* cmp = bol->in(1);\n+  if (!cmp->is_Cmp() ||\n+      cmp->outcnt() != 1 ||\n+      !_sw->same_generation(cmp, cmove) ||\n+      cmp->in(0) != NULL || \/\/ CmpNode has control flow!!\n+      _sw->my_pack(cmp) == NULL) {\n+      NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmove_pack: Cmp %d does not fit CMove %d for building vector, escaping...\", cmp->_idx, cmove->_idx); cmp->dump();})\n+    return false;\n@@ -1951,3 +1977,3 @@\n-  Node_List* cmpd_pk = _sw->my_pack(cmpd);\n-  if (cmpd_pk->size() != cmovd_pk->size() ) {\n-    return NULL;\n+  Node_List* cmp_pk = _sw->my_pack(cmp);\n+  if (cmp_pk->size() != cmove_pk->size() ) {\n+    return false;\n@@ -1956,3 +1982,3 @@\n-  if (!test_cmpd_pack(cmpd_pk, cmovd_pk)) {\n-    NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmovevd_pack: cmpd pack for CmpD %d failed vectorization test\", cmpd->_idx); cmpd->dump();})\n-    return NULL;\n+  if (!test_cmpd_pack(cmp_pk, cmove_pk)) {\n+    NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmove_pack: cmp pack for Cmp %d failed vectorization test\", cmp->_idx); cmp->dump();})\n+    return false;\n@@ -1961,2 +1987,14 @@\n-  Node_List* new_cmpd_pk = new Node_List();\n-  uint sz = cmovd_pk->size() - 1;\n+  return true;\n+}\n+\n+\/\/ Create a new cmove pack to substitute the old one, map all info to the\n+\/\/ new pack and delete the old cmove pack and related packs from the packset.\n+void CMoveKit::make_cmove_pack(Node_List* cmove_pk) {\n+  Node* cmove = cmove_pk->at(0);\n+  Node* bol = cmove->as_CMove()->in(CMoveNode::Condition);\n+  Node_List* bool_pk = _sw->my_pack(bol);\n+  Node* cmp = bol->in(1);\n+  Node_List* cmp_pk = _sw->my_pack(cmp);\n+\n+  Node_List* new_cmove_pk = new Node_List();\n+  uint sz = cmove_pk->size() - 1;\n@@ -1964,1 +2002,1 @@\n-    Node* cmov = cmovd_pk->at(i);\n+    Node* cmov = cmove_pk->at(i);\n@@ -1966,1 +2004,1 @@\n-    Node* cmp  = cmpd_pk->at(i);\n+    Node* cmp  = cmp_pk->at(i);\n@@ -1968,1 +2006,1 @@\n-    new_cmpd_pk->insert(i, cmov);\n+    new_cmove_pk->insert(i, cmov);\n@@ -1970,3 +2008,3 @@\n-    map(cmov, new_cmpd_pk);\n-    map(bol, new_cmpd_pk);\n-    map(cmp, new_cmpd_pk);\n+    map(cmov, new_cmove_pk);\n+    map(bol, new_cmove_pk);\n+    map(cmp, new_cmove_pk);\n@@ -1974,1 +2012,1 @@\n-    _sw->set_my_pack(cmov, new_cmpd_pk); \/\/ and keep old packs for cmp and bool\n+    _sw->set_my_pack(cmov, new_cmove_pk); \/\/ and keep old packs for cmp and bool\n@@ -1976,1 +2014,1 @@\n-  _sw->_packset.remove(cmovd_pk);\n+  _sw->_packset.remove(cmove_pk);\n@@ -1978,4 +2016,3 @@\n-  _sw->_packset.remove(cmpd_pk);\n-  _sw->_packset.append(new_cmpd_pk);\n-  NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print_cr(\"CMoveKit::make_cmovevd_pack: added syntactic CMoveD pack\"); _sw->print_pack(new_cmpd_pk);})\n-  return new_cmpd_pk;\n+  _sw->_packset.remove(cmp_pk);\n+  _sw->_packset.append(new_cmove_pk);\n+  NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print_cr(\"CMoveKit::make_cmove_pack: added syntactic CMove pack\"); _sw->print_pack(new_cmove_pk);})\n@@ -3678,0 +3715,10 @@\n+\/\/------------------------------remove_pack------------------------------\n+\/\/ Remove the pack in the packset\n+void SuperWord::remove_pack(Node_List* p) {\n+  for (uint i = 0; i < p->size(); i++) {\n+    Node* s = p->at(i);\n+    set_my_pack(s, NULL);\n+  }\n+  _packset.remove(p);\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":100,"deletions":53,"binary":false,"changes":153,"status":"modified"},{"patch":"@@ -218,1 +218,5 @@\n-  Node_List* make_cmovevd_pack(Node_List* cmovd_pk);\n+  \/\/ If the input pack is a cmove candidate, return true, otherwise return false.\n+  bool is_cmove_pack_candidate(Node_List* cmove_pk);\n+  \/\/ Determine if the current cmove pack can be vectorized.\n+  bool can_merge_cmove_pack(Node_List* cmove_pk);\n+  void make_cmove_pack(Node_List* cmovd_pk);\n@@ -539,0 +543,2 @@\n+  \/\/ Clear the unused cmove pack and its related packs from superword candidate packset.\n+  void remove_cmove_and_related_packs(Node_List* cmove_pk);\n@@ -587,0 +593,2 @@\n+  \/\/ Remove the pack in the packset\n+  void remove_pack(Node_List* p);\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8268883\n+ * @bug 8268883 8293833\n@@ -28,1 +28,2 @@\n- *\n+ *          Error mixing types with -XX:+UseCMoveUnconditionally -XX:+UseVectorCmov\n+ * @requires vm.compiler2.enabled\n@@ -30,0 +31,2 @@\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestCondAddDeadBranch\n+ *                   -XX:+UseCMoveUnconditionally -XX:+UseVectorCmov -XX:MaxVectorSize=32  TestCondAddDeadBranch\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestCondAddDeadBranch.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8268017\n+ * @bug 8268017 8293833\n@@ -28,1 +28,2 @@\n- *\n+ *          Error mixing types with -XX:+UseCMoveUnconditionally -XX:+UseVectorCmov\n+ * @requires vm.compiler2.enabled\n@@ -30,0 +31,2 @@\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestCastFFAtPhi -XX:+UseCMoveUnconditionally\n+ *                   -XX:+UseVectorCmov -XX:MaxVectorSize=32 TestCastFFAtPhi\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestCastFFAtPhi.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}