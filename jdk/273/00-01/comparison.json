{"files":[{"patch":"@@ -179,1 +179,1 @@\n-    CompressedOops::NarrowType n = CompressedOops::narrow_oop_value(noop);\n+    uint32_t n = CompressedOops::narrow_oop_value(noop);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -223,1 +223,1 @@\n-  CompressedOops::NarrowType data_value = CompressedOops::narrow_oop_value(data);\n+  uint32_t data_value = CompressedOops::narrow_oop_value(data);\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,1 +80,3 @@\n-  using NarrowType = std::underlying_type_t<narrowOop>;\n+  \/\/ The representation type for narrowOop is assumed to be uint32_t.\n+  static_assert(std::is_same<uint32_t, std::underlying_type_t<narrowOop>>::value,\n+                \"narrowOop has unexpected representation type\");\n@@ -132,2 +134,2 @@\n-  static NarrowType narrow_oop_value(narrowOop o) {\n-    return static_cast<NarrowType>(o);\n+  static uint32_t narrow_oop_value(narrowOop o) {\n+    return static_cast<uint32_t>(o);\n@@ -140,3 +142,2 @@\n-    \/\/ Shift by 32 is UB if size in bits of i is 32, e.g. on 32bit platform.\n-    assert(((i >> 16) >> 16) == 0, \"narrowOop overflow\");\n-    return static_cast<narrowOop>(static_cast<NarrowType>(i));\n+    assert(i == static_cast<T>(static_cast<uint32_t>(i)), \"narrowOop overflow\");\n+    return static_cast<narrowOop>(static_cast<uint32_t>(i));\n","filename":"src\/hotspot\/share\/oops\/compressedOops.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"}]}