{"files":[{"patch":"@@ -4322,0 +4322,2 @@\n+        if (t.hasTag(ERROR))\n+            return Type.noType;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1971,1 +1971,1 @@\n-                return (!t.hasTag(TYPEVAR) && types.unboxedTypeOrType(t).isPrimitive());\n+                return (!t.hasTag(TYPEVAR) && !t.isErroneous() && types.unboxedTypeOrType(t).isPrimitive());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8200145\n+ * @summary Conditional expression mistakenly treated as standalone\n+ * @run compile T8200145.java\n+ *\/\n+\n+public class T8200145 {\n+    static class Outer {\n+        class Inner<T> implements Runnable { public void run() {} }\n+    }\n+\n+    void test(Outer outer) {\n+        boolean test =  1 == 1 ;\n+        Outer.Inner<String> inner1 = outer.new Inner<>();\n+        Outer.Inner<String> inner2 = test ? outer.new Inner<>() : null;\n+        Outer.Inner<String> inner3 = test ? null: outer.new Inner<>();\n+        Outer.Inner<String> inner4 = test ? outer.new Inner<>() : outer.new Inner<>();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/conditional\/8200145\/T8200145.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"}]}