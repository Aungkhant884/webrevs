{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -292,3 +292,0 @@\n-\n-        private SimpleDateFormat df = new SimpleDateFormat(\"yyyyMMddhhmmss\");\n-\n@@ -329,5 +326,1 @@\n-                Date d = null;\n-                try {\n-                    d = df.parse(s);\n-                } catch (ParseException ex) {\n-                }\n+                Date d = parseRfc3659TimeValue(s);\n@@ -340,5 +333,1 @@\n-                Date d = null;\n-                try {\n-                    d = df.parse(s);\n-                } catch (ParseException ex) {\n-                }\n+                Date d = parseRfc3659TimeValue(s);\n@@ -1752,5 +1741,2 @@\n-    private static String[] MDTMformats = {\n-        \"yyyyMMddHHmmss.SSS\",\n-        \"yyyyMMddHHmmss\"\n-    };\n-    private static SimpleDateFormat[] dateFormats = new SimpleDateFormat[MDTMformats.length];\n+\n+    private static final SimpleDateFormat[] dateFormats;\n@@ -1759,2 +1745,7 @@\n-        for (int i = 0; i < MDTMformats.length; i++) {\n-            dateFormats[i] = new SimpleDateFormat(MDTMformats[i]);\n+        String[] formats = {\n+            \"yyyyMMddHHmmss.SSS\",\n+            \"yyyyMMddHHmmss\"\n+        };\n+        dateFormats = new SimpleDateFormat[formats.length];\n+        for (int i = 0; i < formats.length; ++i) {\n+            dateFormats[i] = new SimpleDateFormat(formats[i]);\n@@ -1781,10 +1772,1 @@\n-            Date d = null;\n-            for (SimpleDateFormat dateFormat : dateFormats) {\n-                try {\n-                    d = dateFormat.parse(s);\n-                } catch (ParseException ex) {\n-                }\n-                if (d != null) {\n-                    return d;\n-                }\n-            }\n+            return parseRfc3659TimeValue(s);\n@@ -1795,0 +1777,14 @@\n+    private static Date parseRfc3659TimeValue(String s) {\n+        Date d = null;\n+        for (SimpleDateFormat dateFormat : dateFormats) {\n+            try {\n+                d = dateFormat.parse(s);\n+            } catch (ParseException ex) {\n+            }\n+            if (d != null) {\n+                return d;\n+            }\n+        }\n+        return d;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/net\/ftp\/impl\/FtpClient.java","additions":27,"deletions":31,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -0,0 +1,192 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8255078\n+ * @summary verify that datetime in MDTM and MLSD responses are properly parsed\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.net.ftp\n+ * @build jdk.test.lib.Asserts\n+ * @run main TestFtpTimeValue\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import sun.net.ftp.FtpClient;\n+\n+import java.io.*;\n+import java.net.*;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.TimeZone;\n+\n+\n+public class TestFtpTimeValue {\n+    private enum TestCase {\n+        AmTimeNoMilli(2019, 4, 20, 10, 57, 13, 0),\n+        AmTimeWithMilli(2019, 4, 20, 10, 57, 13, 50),\n+        PmTimeNoMilli(2019, 4, 20, 22, 57, 13, 0),\n+        PmTimeWithMilli(2019, 4, 20, 22, 57, 13, 50),\n+        ;\n+\n+        public final Date expectedCreated;\n+        public final Date expectedModified;\n+        public final String create;\n+        public final String modify;\n+\n+        TestCase(int year, int month, int day, int hrs, int min, int sec, int milliseconds) {\n+            var calendar = GregorianCalendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n+            \/\/ month is 0-based in Calendar\n+            calendar.set(year, month - 1, day, hrs, min, sec);\n+            calendar.set(Calendar.MILLISECOND, milliseconds);\n+            expectedCreated = calendar.getTime();\n+            var s = String.format(\"%4d%2d%2d%2d%2d%2d\", year, month, day, hrs, min, sec);\n+            if (milliseconds != 0) {\n+                s += \".\" + String.format(\"%3d\", milliseconds);\n+            }\n+            create = s;\n+\n+            calendar.add(GregorianCalendar.SECOND, 1);\n+            expectedModified = calendar.getTime();\n+            s = String.format(\"%4d%2d%2d%2d%2d%2d\", year, month, day, hrs, min, sec + 1);\n+            if (milliseconds != 0) {\n+                s += \".\" + String.format(\"%3d\", milliseconds);\n+            }\n+            modify = s;\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try (FtpServer server = new FtpServer();\n+             FtpClient client = FtpClient.create()) {\n+            (new Thread(server)).start();\n+            int port = server.getPort();\n+            var loopback = InetAddress.getLoopbackAddress();\n+            client.connect(new InetSocketAddress(loopback, port));\n+            client.enablePassiveMode(true);\n+            for (var testCase : TestCase.values()) {\n+                Asserts.assertEQ(testCase.expectedModified, client.getLastModified(testCase.name()),\n+                        \"wrong modified date from MDTM for \" + testCase);\n+            }\n+            for (var it = client.listFiles(null); it.hasNext(); ) {\n+                var e = it.next();\n+                Asserts.assertEQ(TestCase.valueOf(e.getName()).expectedCreated, e.getCreated(),\n+                        \"wrong created date from MLSD for \" + e.getName());\n+                Asserts.assertEQ(TestCase.valueOf(e.getName()).expectedModified, e.getLastModified(),\n+                        \"wrong modified date from MLSD for \" + e.getName());\n+            }\n+        }\n+    }\n+\n+    private static class FtpServer implements AutoCloseable, Runnable {\n+        private final ServerSocket serverSocket;\n+        private final ServerSocket pasv;\n+\n+        FtpServer() throws IOException {\n+            var loopback = InetAddress.getLoopbackAddress();\n+            serverSocket = new ServerSocket();\n+            serverSocket.bind(new InetSocketAddress(loopback, 0));\n+            pasv = new ServerSocket();\n+            pasv.bind(new InetSocketAddress(loopback, 0));\n+        }\n+\n+        public void handleClient(Socket client) throws IOException {\n+            String str;\n+\n+            client.setSoTimeout(2000);\n+            BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));\n+            PrintWriter out = new PrintWriter(client.getOutputStream(), true);\n+            out.println(\"220 FTP serverSocket is ready.\");\n+            boolean done = false;\n+            while (!done) {\n+                try {\n+                    str = in.readLine();\n+                } catch (SocketException e) {\n+                    done = true;\n+                    continue;\n+                }\n+                String cmd = str.substring(0, str.indexOf(\" \") > 0 ? str.indexOf(\" \") : str.length());\n+                String args = (cmd.equals(str)) ? \"\" : str.substring(str.indexOf(\" \") + 1);\n+                System.err.println(\"C> \" + str);\n+                switch (cmd) {\n+                    case \"QUIT\":\n+                        out.println(\"221 Goodbye.\");\n+                        System.err.println(\"S> 221\");\n+                        done = true;\n+                        break;\n+                    case \"MDTM\": {\n+                        var testCase = TestCase.valueOf(args);\n+                        out.println(\"213 \" + testCase.modify);\n+                        System.err.println(\"S> 213\");\n+                        break;\n+                    }\n+                    case \"MLSD\":\n+                        try (var socket = pasv.accept();\n+                             var dout = new PrintWriter(socket.getOutputStream(), true)) {\n+                            out.println(\"150 MLSD start\");\n+                            System.err.println(\"S> 150\");\n+                            for (var testCase : TestCase.values()) {\n+                                dout.printf(\"modify=%s;create=%s; %s%n\",\n+                                            testCase.modify, testCase.create, testCase.name());\n+                            }\n+                        }\n+                        out.println(\"226 MLSD done.\");\n+                        System.err.println(\"S> 226\");\n+                        break;\n+                    case \"EPSV\":\n+                        if (\"all\".equalsIgnoreCase(args)) {\n+                            out.println(\"200 EPSV ALL command successful.\");\n+                            System.err.println(\"S> 200\");\n+                            continue;\n+                        }\n+                        out.println(\"229 Entering Extended Passive Mode (|||\" + pasv.getLocalPort() + \"|)\");\n+                        System.err.println(\"S> 229\");\n+                        break;\n+                    default:\n+                        System.err.println(\"S> 500\");\n+                        out.println(\"500 unsupported command: \" + str);\n+                }\n+            }\n+        }\n+\n+        public int getPort() {\n+            return serverSocket.getLocalPort();\n+        }\n+\n+        public void close() throws IOException {\n+            serverSocket.close();\n+            pasv.close();\n+        }\n+\n+        @Override\n+        public void run() {\n+            try (Socket client = serverSocket.accept()) {\n+                handleClient(client);\n+            } catch (Throwable t) {\n+                t.printStackTrace();\n+                throw new RuntimeException(\"Problem in test execution\", t);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/net\/ftp\/TestFtpTimeValue.java","additions":192,"deletions":0,"binary":false,"changes":192,"status":"added"}]}