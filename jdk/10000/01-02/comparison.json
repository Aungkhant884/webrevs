{"files":[{"patch":"@@ -39,0 +39,9 @@\n+ * @implNote\n+ * Support for named groups is implemented by the default methods\n+ * {@link #start(String)}, {@link #end(String)} and {@link #group(String)}.\n+ * They all make use of the map returned by {@link #namedGroups()}, whose\n+ * default implementation simply throws {@link UnsupportedOperationException}.\n+ * It is thus sufficient to override {@link #namedGroups()} for these methods\n+ * to work. However, overriding them directly might be preferable for\n+ * performance or other reasons.\n+ *\n@@ -102,10 +111,3 @@\n-     * @implNote\n-     * The default implementation of this method makes use of the map returned\n-     * by {@link #namedGroups()}. It is thus sufficient to override\n-     * {@link #namedGroups()} for this method to work. However, overriding this\n-     * method directly might be preferable for performance or for other reasons.\n-     *\n-     * @implSpec\n-     * The default implementation of this method throws\n-     * {@link UnsupportedOperationException} if {@link #namedGroups()} is not\n-     * overridden.\n+     * @throws UnsupportedOperationException\n+     *          If the default implementation of {@link #namedGroups()}\n+     *          is not overridden.\n@@ -116,1 +118,1 @@\n-        return start(groupIndex(name));\n+        return start(groupNumber(name));\n@@ -176,10 +178,3 @@\n-     * @implNote\n-     * The default implementation of this method makes use of the map returned\n-     * by {@link #namedGroups()}. It is thus sufficient to override\n-     * {@link #namedGroups()} for this method to work. However, overriding this\n-     * method directly might be preferable for performance or for other reasons.\n-     *\n-     * @implSpec\n-     * The default implementation of this method throws\n-     * {@link UnsupportedOperationException} if {@link #namedGroups()} is not\n-     * overridden.\n+     * @throws UnsupportedOperationException\n+     *          If the default implementation of {@link #namedGroups()}\n+     *          is not overridden.\n@@ -190,1 +185,1 @@\n-        return end(groupIndex(name));\n+        return end(groupNumber(name));\n@@ -278,10 +273,3 @@\n-     * @implNote\n-     * The default implementation of this method makes use of the map returned\n-     * by {@link #namedGroups()}. It is thus sufficient to override\n-     * {@link #namedGroups()} for this method to work. However, overriding this\n-     * method directly might be preferable for performance or for other reasons.\n-     *\n-     * @implSpec\n-     * The default implementation of this method throws\n-     * {@link UnsupportedOperationException} if {@link #namedGroups()} is not\n-     * overridden.\n+     * @throws UnsupportedOperationException\n+     *          If the default implementation of {@link #namedGroups()}\n+     *          is not overridden.\n@@ -292,1 +280,1 @@\n-        return group(groupIndex(name));\n+        return group(groupNumber(name));\n@@ -315,3 +303,2 @@\n-     * @implSpec\n-     * The default implementation of this method throws\n-     * {@link UnsupportedOperationException}.\n+     * @throws UnsupportedOperationException\n+     *          The default implementation of this method always throws\n@@ -320,1 +307,2 @@\n-     * This method must be overridden by an implementation that supports named groups.\n+     * This method must be overridden by an implementation that supports\n+     * named groups.\n@@ -328,1 +316,1 @@\n-    private int groupIndex(String name) {\n+    private int groupNumber(String name) {\n@@ -330,3 +318,3 @@\n-        Integer index = namedGroups().get(name);\n-        if (index != null) {\n-            return index;\n+        Integer number = namedGroups().get(name);\n+        if (number != null) {\n+            return number;\n@@ -343,6 +331,2 @@\n-     * @implSpec\n-     * The default implementation of this method throws\n-     * {@link UnsupportedOperationException}.\n-     *\n-     * @apiNote\n-     * This method must be overridden by an implementation.\n+     * @throws UnsupportedOperationException\n+     *          The default implementation of this method always throws\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/MatchResult.java","additions":31,"deletions":47,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.List;\n@@ -32,1 +31,0 @@\n-import java.util.regex.MatchResult;\n@@ -53,1 +51,0 @@\n-        testMatchResultStartEndGroup4();\n@@ -57,22 +54,22 @@\n-        List<MatchResult> list = Pattern.compile(\"(?<some>.+?)(?<rest>.*)\").matcher(\"\")\n-                .results().toList();\n-        for (var result : list) {\n-            if (result.start(\"some\") >= 0) {\n-                throw new RuntimeException(\"start(\\\"some\\\")\");\n-            }\n-            if (result.start(\"rest\") >= 0) {\n-                throw new RuntimeException(\"start(\\\"rest\\\")\");\n-            }\n-            if (result.end(\"some\") >= 0) {\n-                throw new RuntimeException(\"end(\\\"some\\\")\");\n-            }\n-            if (result.end(\"rest\") >= 0) {\n-                throw new RuntimeException(\"end(\\\"rest\\\")\");\n-            }\n-            if (result.group(\"some\") != null) {\n-                throw new RuntimeException(\"group(\\\"some\\\")\");\n-            }\n-            if (result.group(\"rest\") != null) {\n-                throw new RuntimeException(\"group(\\\"rest\\\")\");\n-            }\n-        }\n+        Pattern.compile(\"(?<some>.+?)(?<rest>.*)\").matcher(\"\")\n+                .results()\n+                .forEach(r -> {\n+                    if (r.start(\"some\") >= 0) {\n+                        throw new RuntimeException(\"start(\\\"some\\\")\");\n+                    }\n+                    if (r.start(\"rest\") >= 0) {\n+                        throw new RuntimeException(\"start(\\\"rest\\\")\");\n+                    }\n+                    if (r.end(\"some\") >= 0) {\n+                        throw new RuntimeException(\"end(\\\"some\\\")\");\n+                    }\n+                    if (r.end(\"rest\") >= 0) {\n+                        throw new RuntimeException(\"end(\\\"rest\\\")\");\n+                    }\n+                    if (r.group(\"some\") != null) {\n+                        throw new RuntimeException(\"group(\\\"some\\\")\");\n+                    }\n+                    if (r.group(\"rest\") != null) {\n+                        throw new RuntimeException(\"group(\\\"rest\\\")\");\n+                    }\n+                });\n@@ -82,22 +79,22 @@\n-        List<MatchResult> list = Pattern.compile(\"(?<some>.+?)(?<rest>.*)\").matcher(\"abc\")\n-                .results().toList();\n-        for (var result : list) {\n-            if (result.start(\"some\") < 0) {\n-                throw new RuntimeException(\"start(\\\"some\\\")\");\n-            }\n-            if (result.start(\"rest\") < 0) {\n-                throw new RuntimeException(\"start(\\\"rest\\\")\");\n-            }\n-            if (result.end(\"some\") < 0) {\n-                throw new RuntimeException(\"end(\\\"some\\\")\");\n-            }\n-            if (result.end(\"rest\") < 0) {\n-                throw new RuntimeException(\"end(\\\"rest\\\")\");\n-            }\n-            if (result.group(\"some\") == null) {\n-                throw new RuntimeException(\"group(\\\"some\\\")\");\n-            }\n-            if (result.group(\"rest\") == null) {\n-                throw new RuntimeException(\"group(\\\"rest\\\")\");\n-            }\n-        }\n+        Pattern.compile(\"(?<some>.+?)(?<rest>.*)\").matcher(\"abc\")\n+                .results()\n+                .forEach(r -> {\n+                    if (r.start(\"some\") < 0) {\n+                        throw new RuntimeException(\"start(\\\"some\\\")\");\n+                    }\n+                    if (r.start(\"rest\") < 0) {\n+                        throw new RuntimeException(\"start(\\\"rest\\\")\");\n+                    }\n+                    if (r.end(\"some\") < 0) {\n+                        throw new RuntimeException(\"end(\\\"some\\\")\");\n+                    }\n+                    if (r.end(\"rest\") < 0) {\n+                        throw new RuntimeException(\"end(\\\"rest\\\")\");\n+                    }\n+                    if (r.group(\"some\") == null) {\n+                        throw new RuntimeException(\"group(\\\"some\\\")\");\n+                    }\n+                    if (r.group(\"rest\") == null) {\n+                        throw new RuntimeException(\"group(\\\"rest\\\")\");\n+                    }\n+                });\n@@ -107,1 +104,1 @@\n-        Pattern.compile(\"(?<some>.+?)(?<rest>.*)\").matcher(\"\")\n+        Pattern.compile(\"(?<some>.+?)(?<rest>.*)\").matcher(\"abc\")\n@@ -110,20 +107,13 @@\n-                        try {\n-                            r.start(\"noSuchGroup\");\n-                            r.end(\"noSuchGroup\");\n-                            r.group(\"noSuchGroup\");\n-                        } catch (IllegalArgumentException e) {  \/\/ swallowing intended\n-                        }\n-                    });\n-    }\n-\n-    private static void testMatchResultStartEndGroup4() {\n-        List<MatchResult> list = Pattern.compile(\"(?<some>.+?)(?<rest>.*)\").matcher(\"abc\")\n-                .results().toList();\n-        for (var result : list) {\n-            try {\n-                result.start(\"noSuchGroup\");\n-                result.end(\"noSuchGroup\");\n-                result.group(\"noSuchGroup\");\n-            } catch (IllegalArgumentException e) {  \/\/ swallowing intended\n-            }\n-        }\n+                    try {\n+                        r.start(\"noSuchGroup\");\n+                    } catch (IllegalArgumentException e) {  \/\/ swallowing intended\n+                    }\n+                    try {\n+                        r.end(\"noSuchGroup\");\n+                    } catch (IllegalArgumentException e) {  \/\/ swallowing intended\n+                    }\n+                    try {\n+                        r.group(\"noSuchGroup\");\n+                    } catch (IllegalArgumentException e) {  \/\/ swallowing intended\n+                    }\n+                });\n@@ -142,1 +132,1 @@\n-        };\n+        }\n@@ -150,1 +140,1 @@\n-        };\n+        }\n@@ -163,1 +153,1 @@\n-        };\n+        }\n@@ -171,1 +161,1 @@\n-        };\n+        }\n@@ -185,1 +175,1 @@\n-        };\n+        }\n@@ -192,1 +182,1 @@\n-        };\n+        }\n@@ -200,1 +190,1 @@\n-        };\n+        }\n@@ -208,1 +198,1 @@\n-        };\n+        }\n@@ -212,1 +202,1 @@\n-        testmatcherNamedGroups1();\n+        testMatcherNamedGroups1();\n@@ -218,1 +208,1 @@\n-    private static void testmatcherNamedGroups1() {\n+    private static void testMatcherNamedGroups1() {\n@@ -221,1 +211,1 @@\n-        };\n+        }\n@@ -227,1 +217,1 @@\n-        };\n+        }\n@@ -234,1 +224,1 @@\n-        };\n+        }\n@@ -241,1 +231,1 @@\n-        };\n+        }\n@@ -254,1 +244,1 @@\n-        };\n+        }\n@@ -260,1 +250,1 @@\n-        };\n+        }\n@@ -267,1 +257,1 @@\n-        };\n+        }\n@@ -274,1 +264,1 @@\n-        };\n+        }\n","filename":"test\/jdk\/java\/util\/regex\/NamedGroupsTests.java","additions":76,"deletions":86,"binary":false,"changes":162,"status":"modified"}]}