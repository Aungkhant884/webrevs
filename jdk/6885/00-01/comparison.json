{"files":[{"patch":"@@ -1,94 +0,0 @@\n-import java.io.File;\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import jdk.test.lib.util.JarBuilder;\n-import jdk.test.lib.Asserts;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-class TestUtils {\n-    public static final int EXIT_OK = 0;\n-\n-    static void buildJar(String name) throws Exception {\n-        String baseDir = System.getProperty(\"test.classes\", \".\");\n-\n-        JarBuilder jarBuilder = new JarBuilder(name + \".jar\");\n-        jarBuilder.addAttribute(\"Main-Class\", name);\n-\n-        Files.walk(Paths.get(baseDir), 10)\n-            .filter(p -> p.getFileName().toString().contains(name))\n-            .forEach(p -> {\n-                    try {\n-                        System.out.println(\"Adding: \" + p.getFileName() + \" to jar\");\n-                        jarBuilder.addEntry(p.getFileName().toString(), Files.readAllBytes(p));\n-                    } catch (Exception e) {\n-                        System.out.println(\"Warning: failed to add \" + p.getFileName() + \" to jar\");\n-                        System.out.println(e);\n-                    }\n-                });\n-\n-        jarBuilder.build();\n-\n-        File p_jarFile = new File(name + \".jar\");\n-        Asserts.assertTrue(p_jarFile.isFile(),\n-                           \"Error: Jar file \" + name + \".jar\" + \" is not a regular file\");\n-    }\n-\n-    \/**\n-     * Create & Run a JVM instance, passing the jarPath as the location of a jar to be run.\n-     *\n-     * See more info in ProcessTools about process creation, logging, etc.\n-     *\n-     * java -XX:+FlightRecorder \\\n-     *      -XX:StartFlightRecording=duration=60s,filename=recording.jfr,dumponexit=true \\\n-     *      <extra-args> \\\n-     *      -jar <jarPath>\n-     *\/\n-    static OutputAnalyzer runJar(String jarPath, List<String> extra_cmdline_args) throws Exception {\n-        List<String> cmdline_args = new ArrayList<String>();\n-        cmdline_args.add(\"-XX:StartFlightRecording=duration=5s,filename=recording.jfr,dumponexit=true\");\n-\n-        cmdline_args.addAll(extra_cmdline_args);\n-\n-        cmdline_args.add(\"-jar\");\n-        cmdline_args.add(jarPath);\n-        OutputAnalyzer output = ProcessTools.executeTestJvm(cmdline_args);\n-\n-        File p_recfile = new File(\"recording.jfr\");\n-        Asserts.assertTrue(p_recfile.isFile(),\n-                           \"Error: Recording file is not a regular file\");\n-        return output;\n-    }\n-}\n-\/**\n- * @test\n- * @summary A test runner for Java Flight Recorder Tests.\n- * - BasicJFRTestHelper Creates an event and errors if 'shouldCommit' returns false. Otherwise the event is commited.\n- * - NetworkJFRTestHelper: Performs computation then sends results to localhost. Logs progress with Events.\n- * @requires vm.hasJFR\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/jfr\n- * @compile test-classes\/BasicJFRTestHelper.java test-classes\/NetworkJFRTestHelper.java\n- * @run main JFRTest BasicJFRTestHelper\n- * @run main JFRTest NetworkJFRTestHelper\n- *\/\n-public class JFRTest {\n-    public static void main(String[] args) throws Exception {\n-        if (args[0] == null) {\n-            System.out.println(\"Error: expected test-file as args[0]\");\n-            return;\n-        }\n-\n-        String baseDir = System.getProperty(\"test.classes\", \".\");\n-        String name = args[0];\n-        String jarName = name + \".jar\";\n-\n-        System.out.println(\"Proceeding with test: \" + name);\n-        TestUtils.buildJar(name);\n-        OutputAnalyzer output = TestUtils.runJar(jarName, new ArrayList<String>());\n-        output.shouldHaveExitValue(TestUtils.EXIT_OK);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/jfr\/JFRTest.java","additions":0,"deletions":94,"binary":false,"changes":94,"status":"deleted"},{"patch":"@@ -1,28 +0,0 @@\n-\n-import jdk.jfr.Event;\n-import jdk.jfr.Description;\n-import jdk.jfr.Label;\n-\n-public class BasicJFRTestHelper {\n-\n-    @Label(\"Event Test Class\")\n-    @Description(\"A sample JFR Event Class\")\n-    private static class TestEvent extends Event {\n-        @Label(\"Event Emitter Message\")\n-        String _message;\n-\n-        TestEvent(String message) {\n-            _message = message;\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        TestEvent event = new TestEvent(\"New TestEvent\");\n-\n-        if (!event.shouldCommit()) {\n-            throw new RuntimeException(\"shouldCommit returns false. Is JFR running?\");\n-        }\n-        event.commit();\n-        System.out.println(\"TestEvent: after commit\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/jfr\/test-classes\/BasicJFRTestHelper.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -1,88 +0,0 @@\n-\n-import jdk.jfr.Event;\n-import jdk.jfr.Description;\n-import jdk.jfr.Label;\n-import java.io.OutputStream;\n-import java.io.IOException;\n-import java.math.BigInteger;\n-import java.net.ServerSocket;\n-import java.net.Socket;\n-import java.net.URL;\n-import java.net.URLConnection;\n-import java.util.ArrayList;\n-\n-public class NetworkJFRTestHelper {\n-\n-    @Label(\"Event Test Class\")\n-    @Description(\"A sample JFR Event Class\")\n-    private static class TestEvent extends Event {\n-        @Label(\"Event Message\")\n-        String _message;\n-\n-        TestEvent(String message) {\n-            _message = message;\n-        }\n-\n-        public static void commitOrComplain(String msg) throws RuntimeException {\n-            TestEvent event = new TestEvent(\"New TestEvent: \" + msg);\n-\n-            if (!event.isEnabled() || !event.shouldCommit()) {\n-                throw new RuntimeException(\"shouldCommit returns false. Is JFR running?\");\n-            }\n-\n-            event.commit();\n-        }\n-    }\n-\n-    private static class Fac {\n-        static BigInteger compute(int n) {\n-            if (n <= 1) {\n-                return BigInteger.ONE;\n-            }\n-\n-            return compute(n-1).multiply(new BigInteger(Integer.toString(n)));\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        TestEvent.commitOrComplain(\"Beginning network test\");\n-        int PORT = 8080;\n-        String HOST = \"localhost\";\n-        int TIMEOUT = 1000;\/\/ ms\n-        int MIN_N = 100;\n-        int MAX_N = 1000;\n-\n-        Thread tClient = new Thread(() -> {\n-                try {\n-                    Socket client = new Socket(HOST, PORT);\n-\n-                    String start_msg = \"Sending numbers\";\n-                    TestEvent.commitOrComplain(start_msg);\n-\n-                    for ( int n = MIN_N; n <= MAX_N; n++) {\n-                        String msg = \"Fac(\" + n + \") = \" + Fac.compute(n).intValue() + \" (low-order bits only) \";\n-                        OutputStream out = client.getOutputStream();\n-                        out.write(msg.getBytes());\n-                    }\n-\n-                    String end_msg = \"Sending complete.\";\n-                    TestEvent.commitOrComplain(end_msg);\n-\n-                    client.close();\n-                } catch (Exception e) {\n-                    Runtime.getRuntime().exit(-1);\n-                }\n-        });\n-\n-        System.out.println(\"Starting server...\");\n-        ServerSocket serv = new ServerSocket(PORT);\n-        serv.setSoTimeout(TIMEOUT);\n-\n-        System.out.println(\"Starting client...\");\n-        tClient.start();\n-\n-        Socket recv = serv.accept();\n-        String msg = new String(recv.getInputStream().readAllBytes());\n-        TestEvent.commitOrComplain(msg);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/jfr\/test-classes\/NetworkJFRTestHelper.java","additions":0,"deletions":88,"binary":false,"changes":88,"status":"deleted"},{"patch":"@@ -78,1 +78,1 @@\n-        } else if (Platform.isLinux()) {\n+        } else if (Platform.isLinux() || Platform.isAix()) {\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestNativeLibrariesEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}