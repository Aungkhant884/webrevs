{"files":[{"patch":"@@ -520,2 +520,4 @@\n-     * Resolves one or more {@code Path}s iteratively against this\n-     * {@code Path}. If {@code more} does not specify any {@code Path}s,\n+     * Resolves a path against this path, and then iteratively resolves any\n+     * additional paths.\n+     *\n+     * <p> If {@code more} does not specify any {@code Path}s,\n@@ -548,1 +550,2 @@\n-     * @param first the first path to resolve against this path\n+     * @param   first\n+     *          the first path to resolve against this path\n@@ -550,1 +553,2 @@\n-     * @param more additional paths to be iteratively resolved against this path\n+     * @param   more\n+     *          additional paths to be iteratively resolved against this path\n@@ -552,1 +556,1 @@\n-     * @return the resulting path\n+     * @return  the resulting path\n@@ -567,2 +571,4 @@\n-     * Resolves one or more {@code Path}s converted from the supplied path\n-     * srings iteratively against this {@code Path}. If {@code more} does not\n+     * Converts a path string to a path, resolves it against this path, and\n+     * then iteratively converts and resolves any additional path strings.\n+     *\n+     * <p> If {@code more} does not\n@@ -591,2 +597,3 @@\n-     * @param first the first path string to convert to a path and\n-     *        resolve against this path\n+     * @param   first\n+     *          the first path string to convert to a path and\n+     *          resolve against this path\n@@ -594,2 +601,3 @@\n-     * @param more additional path strings to be iteratively converted to\n-     *        paths and resolved against this path\n+     * @param   more\n+     *          additional path strings to be iteratively converted to\n+     *          paths and resolved against this path\n@@ -597,1 +605,1 @@\n-     * @return the resulting path\n+     * @return  the resulting path\n@@ -602,0 +610,1 @@\n+     * @see #resolve(Path,Path...)\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Path.java","additions":21,"deletions":12,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -398,1 +398,1 @@\n-   private static final byte[] resolve(byte[] base, byte[]... descendants) {\n+   private static final byte[] resolve(byte[] base, byte[]... children) {\n@@ -400,1 +400,1 @@\n-       \/\/ descendant is that last one which is an absolute path\n+       \/\/ child is that last one which is an absolute path\n@@ -402,1 +402,1 @@\n-       int length = base.length;\n+       int resultLength = base.length;\n@@ -404,1 +404,1 @@\n-       \/\/ Locate the last descendant which is an absolute path and calculate\n+       \/\/ Locate the last child which is an absolute path and calculate\n@@ -406,1 +406,1 @@\n-       final int count = descendants.length;\n+       final int count = children.length;\n@@ -409,1 +409,1 @@\n-               byte[] b = descendants[i];\n+               byte[] b = children[i];\n@@ -413,1 +413,1 @@\n-                       length = b.length;\n+                       resultLength = b.length;\n@@ -415,3 +415,3 @@\n-                       if (length > 0)\n-                           length++;\n-                       length += b.length;\n+                       if (resultLength > 0)\n+                           resultLength++;\n+                       resultLength += b.length;\n@@ -423,7 +423,6 @@\n-       \/\/ If the base is not being superseded by a descendant which is an\n-       \/\/ absolute path, then if at least one descendant is non-empty and\n-       \/\/ the base consists only of a '\/', then decrement the length to\n-       \/\/ account for an extra '\/' added in the length computation.\n-       if (start == 0 && length > base.length &&\n-           base.length == 1 && base[0] == '\/')\n-           length--;\n+       \/\/ If the base is not being superseded by a child which is an\n+       \/\/ absolute path, then if at least one child is non-empty and\n+       \/\/ the base consists only of a '\/', then decrement resultLength to\n+       \/\/ account for an extra '\/' added in the resultLength computation.\n+       if (start == 0 && resultLength > base.length && base.length == 1 && base[0] == '\/')\n+           resultLength--;\n@@ -432,1 +431,1 @@\n-       byte[] result = new byte[length];\n+       byte[] result = new byte[resultLength];\n@@ -437,1 +436,1 @@\n-       \/\/ overwritten by an absolute descendant\n+       \/\/ overwritten by an absolute child\n@@ -444,1 +443,1 @@\n-       \/\/ Append descendants starting with the last one which is an\n+       \/\/ Append children starting with the last one which is an\n@@ -449,1 +448,1 @@\n-               byte[] b = descendants[i];\n+               byte[] b = children[i];\n@@ -467,2 +466,2 @@\n-        byte[][] descendants = new byte[1 + more.length][];\n-        descendants[0] = toUnixPath(first).path;\n+        byte[][] children = new byte[1 + more.length][];\n+        children[0] = toUnixPath(first).path;\n@@ -470,1 +469,1 @@\n-            descendants[i + 1] = toUnixPath(more[i]).path;\n+            children[i + 1] = toUnixPath(more[i]).path;\n@@ -472,1 +471,1 @@\n-        byte[] result = resolve(path, descendants);\n+        byte[] result = resolve(path, children);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixPath.java","additions":24,"deletions":25,"binary":false,"changes":49,"status":"modified"}]}