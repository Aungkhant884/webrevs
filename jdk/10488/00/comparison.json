{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -351,1 +351,1 @@\n-     *\n+     * <p>\n@@ -367,1 +367,3 @@\n-     * Recording must be started, but not necessarily stopped.\n+     * For a dump to succeed, the recording must either be 1) running, or 2) stopped\n+     * and to disk. If the recording is in any other state, an\n+     * {@link IOException} is thrown.\n@@ -372,2 +374,3 @@\n-     * @throws IOException if the recording can't be copied to the specified\n-     *         location\n+     * @throws IOException if recording data can't be copied to the specified\n+     *         location, for example, if the recording is closed or the\n+     *         destination path is not writable\n@@ -377,0 +380,3 @@\n+     *\n+     * @see #getState()\n+     * @see #isToDisk()\n@@ -381,1 +387,0 @@\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Recording.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -324,0 +324,1 @@\n+\n@@ -325,0 +326,4 @@\n+            if (!isToDisk()) {\n+                throw new IOException(\"Recording \\\"\" + name + \"\\\" (id=\" + id + \")\"\n+                    + \" is an in memory recording. No data to copy after it has been stopped.\");\n+            }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformRecording.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -139,1 +139,5 @@\n-            throw new IOException(\"Unexpected error during I\/O operation\");\n+            Throwable cause = null;\n+            if (System.getSecurityManager() == null) {\n+                cause = t;\n+            }\n+            throw new IOException(\"Unexpected error during I\/O operation\", cause);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/WriteableUserPath.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+import java.io.IOException;\n+import java.nio.file.Paths;\n@@ -85,0 +87,21 @@\n+\n+        testMemoryCopy();\n+    }\n+\n+    private static void testMemoryCopy() throws Exception {\n+        try (Recording memory = new Recording()) {\n+            memory.setToDisk(false);\n+            memory.enable(SimpleEvent.class);\n+            memory.start();\n+\n+            Recording unstopped = memory.copy(false);\n+            unstopped.dump(Paths.get(\"unstopped-memory.jfr\"));\n+\n+            Recording stopped = memory.copy(true);\n+            try {\n+                stopped.dump(Paths.get(\"stopped-memory.jfr\"));\n+                throw new Exception(\"Should not be able to dump stopped in memory recording\");\n+            } catch (IOException ioe) {\n+                \/\/ As expected\n+            }\n+        }\n","filename":"test\/jdk\/jdk\/jfr\/api\/recording\/misc\/TestRecordingCopy.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"}]}