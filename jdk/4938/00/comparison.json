{"files":[{"patch":"@@ -110,0 +110,1 @@\n+  void decrement_entries() { _number_of_entries--; }\n@@ -213,0 +214,26 @@\n+\n+  \/\/ ITER contains bool do_entry(K const&, V const&), which will be\n+  \/\/ called for each entry in the table.  If do_entry() returns true,\n+  \/\/ the entry is deleted.\n+  template<class ITER>\n+  void unlink(ITER* iter) const {\n+    const unsigned sz = table_size();\n+    for (unsigned index = 0; index < sz; index++) {\n+      Node** ptr = bucket_at(index);\n+      while (*ptr != NULL) {\n+        Node* node = *ptr;\n+        \/\/ do_entry must clean up the key and value in Node.\n+        bool clean = iter->do_entry(node->_key, node->_value);\n+        if (clean) {\n+          *ptr = node->_next;\n+          if (ALLOC_TYPE == ResourceObj::C_HEAP) {\n+            delete node;\n+          }\n+          const_cast<ResourceHashtableBase*>(this)->decrement_entries();\n+        } else {\n+          ptr = &(node->_next);\n+        }\n+      }\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/utilities\/resourceHash.hpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -63,0 +63,15 @@\n+  class DeleterTestIter {\n+    int _val;\n+   public:\n+    DeleterTestIter(int i) : _val(i) {}\n+\n+    bool do_entry(K const& k, V const& v) {\n+      if ((uintptr_t) k == (uintptr_t) _val) {\n+        \/\/ Delete me!\n+        return true;\n+      } else {\n+        return false; \/\/ continue iteration\n+      }\n+    }\n+  };\n+\n@@ -236,0 +251,9 @@\n+\n+      \/\/ Add more entries in and then delete one.\n+      for (uintptr_t i = 10; i > 0; --i) {\n+        uintptr_t index = i - 1;\n+        ASSERT_TRUE(rh.put(as_K(index), index));\n+      }\n+      DeleterTestIter dt(5);\n+      rh.unlink(&dt);\n+      ASSERT_FALSE(rh.get(as_K(5)));\n","filename":"test\/hotspot\/gtest\/utilities\/test_resourceHash.cpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"}]}