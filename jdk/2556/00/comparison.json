{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+\n@@ -34,1 +35,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -97,1 +98,1 @@\n-                .setCaption(new StringContent(contents.packageSummary))\n+                .setCaption(Text.of(contents.packageSummary))\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AllPackagesIndexWriter.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -90,1 +90,1 @@\n-                dl.add(HtmlTree.DD(new StringContent(value.toString())));\n+                dl.add(HtmlTree.DD(Text.of(value.toString())));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AnnotationTypeOptionalMemberWriterImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -109,1 +109,0 @@\n-        String simpleName = name(member);\n@@ -112,1 +111,1 @@\n-                new StringContent(simpleName));\n+                Text.of(name(member)));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AnnotationTypeRequiredMemberWriterImpl.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -327,1 +327,1 @@\n-                links.createLink(htmlIds.forPackage(pkg), new StringContent(utils.getPackageName(pkg)));\n+                links.createLink(htmlIds.forPackage(pkg), Text.of(utils.getPackageName(pkg)));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassUseWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-\n@@ -44,0 +43,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;\n@@ -48,1 +48,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.TagName;\n@@ -50,2 +49,2 @@\n-import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.TagName;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -117,1 +116,1 @@\n-                    new StringContent(mdle.getQualifiedName())));\n+                    Text.of(mdle.getQualifiedName())));\n@@ -126,1 +125,1 @@\n-                    new StringContent(utils.getPackageName(pkg)));\n+                    Text.of(utils.getPackageName(pkg)));\n@@ -135,1 +134,1 @@\n-                HtmlStyle.title, new StringContent(header));\n+                HtmlStyle.title, Text.of(header));\n@@ -458,2 +457,1 @@\n-                Content separator = new StringContent(\", \");\n-                content.add(separator);\n+                content.add(Text.of(\", \"));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassWriterImpl.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -114,2 +114,1 @@\n-            Content packageNameContent = getPackageLabel(parsedPackageName);\n-            packageNameContent.add(\".*\");\n+            Content packageNameContent = Text.of(parsedPackageName + \".*\");\n@@ -159,1 +158,1 @@\n-        Content headingContent = new StringContent(\".*\");\n+        Content headingContent = Text.of(\".*\");\n@@ -189,1 +188,1 @@\n-            new StringContent(utils.getFullyQualifiedName(typeElement));\n+            Text.of(utils.getFullyQualifiedName(typeElement));\n@@ -221,3 +220,2 @@\n-            Content modifier = new StringContent(mod.toString());\n-            code.add(modifier);\n-            code.add(Entity.NO_BREAK_SPACE);\n+            code.add(Text.of(mod.toString()))\n+                    .add(Entity.NO_BREAK_SPACE);\n@@ -252,2 +250,1 @@\n-        Content valueContent = new StringContent(value);\n-        return HtmlTree.CODE(valueContent);\n+        return HtmlTree.CODE(Text.of(value));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ConstantsSummaryWriterImpl.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -120,1 +120,1 @@\n-                new StringContent(name(constructor)));\n+                Text.of(name(constructor)));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ConstructorWriterImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.Comment;\n@@ -37,2 +36,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.FixedStringContent;\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -227,1 +225,1 @@\n-        defaultPackageLabel = new StringContent(DocletConstants.DEFAULT_PACKAGE_NAME);\n+        defaultPackageLabel = Text.of(DocletConstants.DEFAULT_PACKAGE_NAME);\n@@ -352,1 +350,1 @@\n-        return new FixedStringContent(resources.getText(key));\n+        return Text.of(resources.getText(key));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Contents.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -91,1 +91,1 @@\n-                new StringContent(name(enumConstant)));\n+                Text.of(name(enumConstant)));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/EnumConstantWriterImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -92,1 +92,1 @@\n-                new StringContent(name(field)));\n+                Text.of(name(field)));\n@@ -167,1 +167,1 @@\n-            label = new StringContent(utils.isClass(typeElement)\n+            label = Text.of(utils.isClass(typeElement)\n@@ -171,1 +171,1 @@\n-            label = new StringContent(utils.isClass(typeElement)\n+            label = Text.of(utils.isClass(typeElement)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/FieldWriterImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -218,1 +218,1 @@\n-                    HtmlTree.CODE(new StringContent(\"java.lang.Object\")));\n+                    HtmlTree.CODE(Text.of(\"java.lang.Object\")));\n@@ -288,1 +288,1 @@\n-                                HtmlTree.CODE(new StringContent(example[0])), example[1])));\n+                                HtmlTree.CODE(Text.of(example[0])), example[1])));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HelpWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-\n@@ -80,2 +79,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.HtmlId;\n-import jdk.javadoc.internal.doclint.HtmlTag;\n@@ -84,1 +81,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.FixedStringContent;\n@@ -87,0 +83,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlId;\n@@ -88,1 +85,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.TagName;\n@@ -93,1 +89,2 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.TagName;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -102,1 +99,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.Comparators;\n@@ -104,0 +100,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.Comparators;\n@@ -110,1 +107,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable;\n@@ -115,0 +111,2 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable;\n+import jdk.javadoc.internal.doclint.HtmlTag;\n@@ -562,1 +560,1 @@\n-                new StringContent(label));\n+                Text.of(label));\n@@ -586,1 +584,1 @@\n-        return new StringContent(packageName);\n+        return Text.of(packageName);\n@@ -620,1 +618,1 @@\n-        return getPackageLink(packageElement, new StringContent(label));\n+        return getPackageLink(packageElement, Text.of(label));\n@@ -624,3 +622,3 @@\n-        StringContent content =  packageElement.isUnnamed()\n-                ? new StringContent()\n-                : new StringContent(utils.getPackageName(packageElement));\n+        Content content =  packageElement.isUnnamed()\n+                ? Text.EMPTY\n+                : Text.of(utils.getPackageName(packageElement));\n@@ -712,1 +710,1 @@\n-        Content name = new StringContent((qual)\n+        Content name = Text.of((qual)\n@@ -787,1 +785,1 @@\n-            Content defaultLabel = new StringContent(className);\n+            Content defaultLabel = Text.of(className);\n@@ -927,1 +925,1 @@\n-                new StringContent(label), null, false);\n+                Text.of(label), null, false);\n@@ -943,1 +941,1 @@\n-        return getDocLink(context, typeElement, element, new StringContent(label), null, false);\n+        return getDocLink(context, typeElement, element, Text.of(label), null, false);\n@@ -960,1 +958,1 @@\n-        return getDocLink(context, typeElement, element, new StringContent(label), style, false);\n+        return getDocLink(context, typeElement, element, Text.of(label), style, false);\n@@ -976,1 +974,1 @@\n-        return getDocLink(context, typeElement, element, new StringContent(label), null, isProperty);\n+        return getDocLink(context, typeElement, element, Text.of(label), null, isProperty);\n@@ -1056,1 +1054,1 @@\n-                            new StringContent(refPackage.getQualifiedName()));\n+                            Text.of(refPackage.getQualifiedName()));\n@@ -1089,1 +1087,1 @@\n-                label = plainOrCode(isLinkPlain, new StringContent(utils.getSimpleName(refClass)));\n+                label = plainOrCode(isLinkPlain, Text.of(utils.getSimpleName(refClass)));\n@@ -1145,1 +1143,1 @@\n-            text = plainOrCode(kind == LINK_PLAIN, new StringContent(refMemName));\n+            text = plainOrCode(kind == LINK_PLAIN, Text.of(refMemName));\n@@ -1536,1 +1534,1 @@\n-                    Content content = new StringContent(utils.normalizeNewlines(s));\n+                    Content content = Text.of(utils.normalizeNewlines(s));\n@@ -1847,2 +1845,1 @@\n-        linkInfo.label = new StringContent(\"@\");\n-        linkInfo.label.add(annotationDoc.getSimpleName());\n+        linkInfo.label = Text.of(\"@\" + annotationDoc.getSimpleName());\n@@ -1964,1 +1961,1 @@\n-                        linkInfo.label = new StringContent(name + utils.getDimension(t) + \".class\");\n+                        linkInfo.label = Text.of(name + utils.getDimension(t) + \".class\");\n@@ -1969,1 +1966,1 @@\n-                        return new StringContent(t + utils.getDimension(t) + \".class\");\n+                        return Text.of(t + utils.getDimension(t) + \".class\");\n@@ -1999,1 +1996,1 @@\n-                return new StringContent(annotationValue.toString());\n+                return Text.of(annotationValue.toString());\n@@ -2135,1 +2132,1 @@\n-        return HtmlTree.SPAN(HtmlStyle.verticalSeparator, new FixedStringContent(\"|\"));\n+        return HtmlTree.SPAN(HtmlStyle.verticalSeparator, Text.of(\"|\"));\n@@ -2158,1 +2155,1 @@\n-            Content nameCode = HtmlTree.CODE(new StringContent(name));\n+            Content nameCode = HtmlTree.CODE(Text.of(name));\n@@ -2179,1 +2176,1 @@\n-                Content nameCode = HtmlTree.CODE(new StringContent(name));\n+                Content nameCode = HtmlTree.CODE(Text.of(name));\n@@ -2261,1 +2258,1 @@\n-                                   HtmlTree.CODE(new StringContent(className)),\n+                                   HtmlTree.CODE(Text.of(className)),\n@@ -2272,1 +2269,2 @@\n-                .map(te -> getLink(new HtmlLinkInfo(configuration, HtmlLinkInfo.Kind.CLASS, te).label(HtmlTree.CODE(new StringContent(te.getSimpleName()))).skipPreview(true)))\n+                .map(te -> getLink(new HtmlLinkInfo(configuration, HtmlLinkInfo.Kind.CLASS, te)\n+                        .label(HtmlTree.CODE(Text.of(te.getSimpleName()))).skipPreview(true)))\n@@ -2279,1 +2277,1 @@\n-                                   HtmlTree.CODE(new StringContent(className)),\n+                                   HtmlTree.CODE(Text.of(className)),\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":33,"deletions":35,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -304,1 +304,1 @@\n-        this.label = new StringContent(label);\n+        this.label = Text.of(label);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlLinkInfo.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -104,1 +104,1 @@\n-            Content headingContent = new StringContent(heading);\n+            Content headingContent = Text.of(heading);\n@@ -115,1 +115,1 @@\n-        Content nameContent = new StringContent(fieldName);\n+        Content nameContent = Text.of(fieldName);\n@@ -133,1 +133,1 @@\n-        Content nameContent = new StringContent(fieldName);\n+        Content nameContent = Text.of(fieldName);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlSerialFieldWriter.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.ContentBuilder;\n@@ -35,1 +34,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -39,1 +38,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.taglets.TagletWriter;\n@@ -93,1 +91,1 @@\n-        Content headingContent = new StringContent(heading);\n+        Content headingContent = Text.of(heading);\n@@ -108,2 +106,1 @@\n-        Content noCustomizationMsg = new StringContent(msg);\n-        return noCustomizationMsg;\n+        return Text.of(msg);\n@@ -120,1 +117,1 @@\n-        Content memberContent = new StringContent(name(member));\n+        Content memberContent = Text.of(name(member));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlSerialMethodWriter.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -105,1 +105,1 @@\n-        bodyContent.add(HtmlTree.P(HtmlTree.A(targetPath, new StringContent(targetPath))));\n+        bodyContent.add(HtmlTree.P(HtmlTree.A(targetPath, Text.of(targetPath))));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/IndexRedirectWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -168,1 +168,1 @@\n-        Content headContent = new StringContent(String.valueOf(ch));\n+        Content headContent = Text.of(String.valueOf(ch));\n@@ -200,1 +200,1 @@\n-                dt = HtmlTree.DT(getModuleLink((ModuleElement) element, new StringContent(label)));\n+                dt = HtmlTree.DT(getModuleLink((ModuleElement) element, Text.of(label)));\n@@ -205,1 +205,1 @@\n-                dt = HtmlTree.DT(getPackageLink((PackageElement) element, new StringContent(label)));\n+                dt = HtmlTree.DT(getPackageLink((PackageElement) element, Text.of(label)));\n@@ -270,1 +270,1 @@\n-        HtmlTree labelLink = HtmlTree.A(itemPath, new StringContent(item.getLabel()));\n+        HtmlTree labelLink = HtmlTree.A(itemPath, Text.of(item.getLabel()));\n@@ -355,1 +355,1 @@\n-            Content label = new StringContent(Character.toString(ch));\n+            Content label = Text.of(Character.toString(ch));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/IndexWriter.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -106,1 +106,1 @@\n-                new StringContent(name(method)));\n+                Text.of(name(method)));\n@@ -221,1 +221,1 @@\n-            label = new StringContent(utils.isClass(typeElement)\n+            label = Text.of(utils.isClass(typeElement)\n@@ -225,1 +225,1 @@\n-            label = new StringContent(utils.isClass(typeElement)\n+            label = Text.of(utils.isClass(typeElement)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/MethodWriterImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,3 @@\n-import java.util.*;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedSet;\n@@ -34,1 +36,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -107,1 +109,1 @@\n-                        Content moduleLinkContent = getModuleLink(mdle, new StringContent(mdle.getQualifiedName().toString()));\n+                        Content moduleLinkContent = getModuleLink(mdle, Text.of(mdle.getQualifiedName().toString()));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ModuleIndexWriter.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -247,1 +247,1 @@\n-                indirectModules.put(module, new StringContent(mod));\n+                indirectModules.put(module, Text.of(mod));\n@@ -254,1 +254,1 @@\n-                    requires.put(m, new StringContent(utils.getModifiers(directive)));\n+                    requires.put(m, Text.of(utils.getModifiers(directive)));\n@@ -482,1 +482,1 @@\n-                Content caption = new StringContent(text);\n+                Content caption = Text.of(text);\n@@ -490,1 +490,1 @@\n-                Content amrCaption = new StringContent(amrText);\n+                Content amrCaption = Text.of(amrText);\n@@ -508,1 +508,1 @@\n-            Content moduleLink = getModuleLink(m, new StringContent(m.getQualifiedName()));\n+            Content moduleLink = getModuleLink(m, Text.of(m.getQualifiedName()));\n@@ -529,1 +529,1 @@\n-                Table aepTable = getTable2(new StringContent(aepText), indirectPackagesHeader);\n+                Table aepTable = getTable2(Text.of(aepText), indirectPackagesHeader);\n@@ -535,1 +535,1 @@\n-                Table aopTable = getTable2(new StringContent(aopText), indirectPackagesHeader);\n+                Table aopTable = getTable2(Text.of(aopText), indirectPackagesHeader);\n@@ -608,1 +608,1 @@\n-            Content pkgLinkContent = getPackageLink(pkg, new StringContent(utils.getPackageName(pkg)));\n+            Content pkgLinkContent = getPackageLink(pkg, Text.of(utils.getPackageName(pkg)));\n@@ -648,1 +648,1 @@\n-            return new StringContent(resources.getText(\"doclet.None\"));\n+            return Text.of(resources.getText(\"doclet.None\"));\n@@ -650,1 +650,1 @@\n-            return new StringContent(resources.getText(\"doclet.All_Modules\"));\n+            return Text.of(resources.getText(\"doclet.All_Modules\"));\n@@ -655,1 +655,1 @@\n-                    list.add(new StringContent(\", \"));\n+                    list.add(Text.of(\", \"));\n@@ -657,1 +657,1 @@\n-                list.add(getModuleLink(m, new StringContent(m.getQualifiedName())));\n+                list.add(getModuleLink(m, Text.of(m.getQualifiedName())));\n@@ -673,1 +673,1 @@\n-            Content moduleLinkContent = getModuleLink(m, new StringContent(m.getQualifiedName()));\n+            Content moduleLinkContent = getModuleLink(m, Text.of(m.getQualifiedName()));\n@@ -678,1 +678,1 @@\n-                list.add(getPackageLink(pkg, new StringContent(utils.getPackageName(pkg))));\n+                list.add(getPackageLink(pkg, Text.of(utils.getPackageName(pkg))));\n@@ -699,1 +699,1 @@\n-                Table table = getTable2(new StringContent(label), usesProvidesTableHeader);\n+                Table table = getTable2(Text.of(label), usesProvidesTableHeader);\n@@ -707,1 +707,1 @@\n-                Table table = getTable2(new StringContent(label), usesProvidesTableHeader);\n+                Table table = getTable2(Text.of(label), usesProvidesTableHeader);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ModuleWriterImpl.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -107,1 +107,1 @@\n-            label = new StringContent(utils.isInterface(typeElement)\n+            label = Text.of(utils.isInterface(typeElement)\n@@ -111,1 +111,1 @@\n-            label = new StringContent(utils.isInterface(typeElement)\n+            label = Text.of(utils.isInterface(typeElement)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/NestedClassWriterImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -164,1 +164,1 @@\n-                    new StringContent(utils.getPackageName(pkg)));\n+                    Text.of(utils.getPackageName(pkg)));\n@@ -201,1 +201,1 @@\n-                Content stringContent = new StringContent(utils.getSimpleName(te));\n+                Content stringContent = Text.of(utils.getSimpleName(te));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PackageUseWriter.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -107,1 +107,1 @@\n-                    new StringContent(mdle.getQualifiedName().toString())));\n+                    Text.of(mdle.getQualifiedName().toString())));\n@@ -113,1 +113,1 @@\n-        Content packageHead = new StringContent(heading);\n+        Content packageHead = Text.of(heading);\n@@ -208,1 +208,1 @@\n-                    .setCaption(new StringContent(label))\n+                    .setCaption(Text.of(label))\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PackageWriterImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -84,1 +84,1 @@\n-                new StringContent(utils.getPropertyLabel(name(property))));\n+                Text.of(utils.getPropertyLabel(name(property))));\n@@ -175,1 +175,1 @@\n-            label = new StringContent(utils.isClass(typeElement)\n+            label = Text.of(utils.isClass(typeElement)\n@@ -179,1 +179,1 @@\n-            label = new StringContent(utils.isClass(typeElement)\n+            label = Text.of(utils.isClass(typeElement)\n@@ -196,1 +196,1 @@\n-                new StringContent(utils.getPropertyLabel(name(member))),\n+                Text.of(utils.getPropertyLabel(name(member))),\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PropertyWriterImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -75,1 +75,1 @@\n-        Content h1Content = new StringContent(header);\n+        Content h1Content = Text.of(header);\n@@ -155,1 +155,1 @@\n-                : new StringContent(utils.getFullyQualifiedName(typeElement));\n+                : Text.of(utils.getFullyQualifiedName(typeElement));\n@@ -197,1 +197,1 @@\n-        Content headerContent = new StringContent(header);\n+        Content headerContent = Text.of(header);\n@@ -199,1 +199,1 @@\n-        Content serialContent = new StringContent(serialUID);\n+        Content serialContent = Text.of(serialUID);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SerializedFormWriterImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -119,1 +119,1 @@\n-            Content className = new StringContent(utils.getSimpleName(typeElement));\n+            Content className = Text.of(utils.getSimpleName(typeElement));\n@@ -200,1 +200,1 @@\n-                    Content c = new StringContent(classWriter.resources.getText(\"doclet.not.exhaustive\"));\n+                    Content c = Text.of(classWriter.resources.getText(\"doclet.not.exhaustive\"));\n@@ -363,1 +363,1 @@\n-                Content name = new StringContent(memberWriter.name(element));\n+                Content name = Text.of(memberWriter.name(element));\n@@ -406,1 +406,1 @@\n-                htmlTree.add(HtmlTree.SPAN(HtmlStyle.modifiers, new StringContent(mods)))\n+                htmlTree.add(HtmlTree.SPAN(HtmlStyle.modifiers, Text.of(mods)))\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Signatures.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,3 @@\n-import java.io.*;\n+import java.io.IOException;\n+import java.io.LineNumberReader;\n+import java.io.Reader;\n@@ -38,1 +40,0 @@\n-import jdk.javadoc.doclet.DocletEnvironment;\n@@ -40,1 +41,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.HtmlId;\n@@ -44,1 +44,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -317,1 +317,1 @@\n-                    new StringContent(utils.replaceTabs(line)));\n+                    Text.of(utils.replaceTabs(line)));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SourceToHTMLConverter.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -222,1 +222,1 @@\n-                        link = getModuleLink(m, new StringContent(m.getQualifiedName()));\n+                        link = getModuleLink(m, Text.of(m.getQualifiedName()));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SummaryListWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+\n@@ -30,1 +31,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.FixedStringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -34,1 +35,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.TextBuilder;\n@@ -129,1 +130,1 @@\n-        Content separator = new StringContent(\", \");\n+        Content separator = Text.of(\", \");\n@@ -135,1 +136,1 @@\n-            Content propertyName = new StringContent(entry.getKey());\n+            Content propertyName = Text.of(entry.getKey());\n@@ -172,1 +173,1 @@\n-            b.add(HtmlTree.CODE(new FixedStringContent(i.getHolder() + \": \")));\n+            b.add(HtmlTree.CODE(Text.of(i.getHolder() + \": \")));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SystemPropertiesWriter.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -384,1 +384,1 @@\n-                main.add(getCaption(new StringContent(tabName)));\n+                main.add(getCaption(Text.of(tabName)));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Table.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -128,2 +128,1 @@\n-        StringContent content = new StringContent(utils.normalizeNewlines(ch.getText(tag)));\n-        Content result = HtmlTree.CODE(content);\n+        Content result = HtmlTree.CODE(Text.of(utils.normalizeNewlines(ch.getText(tag))));\n@@ -154,1 +153,1 @@\n-        return new StringContent(path);\n+        return Text.of(path);\n@@ -197,1 +196,1 @@\n-        Content result = new StringContent(utils.normalizeNewlines(ch.getText(tag)));\n+        Content result = Text.of(utils.normalizeNewlines(ch.getText(tag)));\n@@ -221,1 +220,1 @@\n-        Content nameTree = new StringContent(paramName);\n+        Content nameTree = Text.of(paramName);\n@@ -257,1 +256,1 @@\n-                    new StringContent(resources.getText(\"doclet.Constants_Summary\"))));\n+                    Text.of(resources.getText(\"doclet.Constants_Summary\"))));\n@@ -267,1 +266,1 @@\n-                        new StringContent(resources.getText(\"doclet.Serialized_Form\"))));\n+                        Text.of(resources.getText(\"doclet.Serialized_Form\"))));\n@@ -356,1 +355,1 @@\n-                : new StringContent(constantVal);\n+                : Text.of(constantVal);\n@@ -393,1 +392,1 @@\n-            result = new StringContent(tagText);\n+            result = Text.of(tagText);\n@@ -396,1 +395,1 @@\n-            result = HtmlTree.SPAN(id, HtmlStyle.searchTagResult, new StringContent(tagText));\n+            result = HtmlTree.SPAN(id, HtmlStyle.searchTagResult, Text.of(tagText));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/TagletWriterImpl.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -152,1 +152,1 @@\n-                        new StringContent(utils.getPackageName(pkg))));\n+                        Text.of(utils.getPackageName(pkg))));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/TreeWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,3 +67,3 @@\n-            StringContent sc;\n-            if (c != null && c instanceof StringContent) {\n-                sc = (StringContent) c;\n+            TextBuilder tb;\n+            if (c != null && c instanceof TextBuilder) {\n+                tb = (TextBuilder) c;\n@@ -71,1 +71,1 @@\n-                contents.add(sc = new StringContent());\n+                contents.add(tb = new TextBuilder());\n@@ -73,1 +73,1 @@\n-            sc.add(text);\n+            tb.add(text);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/ContentBuilder.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.javadoc.internal.doclets.formats.html.markup;\n-\n-import java.io.IOException;\n-import java.io.Writer;\n-\n-import jdk.javadoc.internal.doclets.toolkit.Content;\n-import jdk.javadoc.internal.doclets.toolkit.util.DocletConstants;\n-\n-\/**\n- * Class for containing fixed string content for HTML tags of javadoc output.\n- *\n- *  <p><b>This is NOT part of any supported API.\n- *  If you write code that depends on this, you do so at your own risk.\n- *  This code and its internal interfaces are subject to change or\n- *  deletion without notice.<\/b>\n- *\/\n-public class FixedStringContent extends Content {\n-    private final String string;\n-\n-    \/**\n-     * Constructor to construct FixedStringContent object.\n-     *\n-     * @param content content for the object\n-     *\/\n-    public FixedStringContent(CharSequence content) {\n-        string = Entity.escapeHtmlChars(content);\n-    }\n-\n-    @Override\n-    public boolean isEmpty() {\n-        return string.isEmpty();\n-    }\n-\n-    @Override\n-    public int charCount() {\n-        return RawHtml.charCount(string);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return string;\n-    }\n-\n-    @Override\n-    public boolean write(Writer out, boolean atNewline) throws IOException {\n-        out.write(string);\n-        return string.endsWith(DocletConstants.NL);\n-    }\n-\n-}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/FixedStringContent.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -89,0 +89,1 @@\n+     * The '==' identity of this object is significant.\n@@ -90,1 +91,1 @@\n-    public static final Content EMPTY = new StringContent(\"\");\n+    public static final Content EMPTY = Text.of(\"\");\n@@ -201,1 +202,1 @@\n-            if (lastContent instanceof StringContent)\n+            if (lastContent instanceof TextBuilder)\n@@ -204,1 +205,1 @@\n-                add(new StringContent(stringContent));\n+                add(new TextBuilder(stringContent));\n@@ -208,1 +209,1 @@\n-            add(new StringContent(stringContent));\n+            add(new TextBuilder(stringContent));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/HtmlTree.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,1 +88,1 @@\n-        return createLink(path, new StringContent(label), null, \"\");\n+        return createLink(path, Text.of(label), null, \"\");\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/Links.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,96 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.javadoc.internal.doclets.formats.html.markup;\n-\n-import java.io.IOException;\n-import java.io.Writer;\n-\n-import jdk.javadoc.internal.doclets.toolkit.Content;\n-import jdk.javadoc.internal.doclets.toolkit.util.DocletConstants;\n-\n-\/**\n- * Class for generating string content for HTML tags of javadoc output.\n- *\n- *  <p><b>This is NOT part of any supported API.\n- *  If you write code that depends on this, you do so at your own risk.\n- *  This code and its internal interfaces are subject to change or\n- *  deletion without notice.<\/b>\n- *\/\n-public class StringContent extends Content {\n-\n-    private final StringBuilder stringContent;\n-\n-    \/**\n-     * Constructor to construct StringContent object.\n-     *\/\n-    public StringContent() {\n-        stringContent = new StringBuilder();\n-    }\n-\n-    \/**\n-     * Constructor to construct StringContent object with some initial content.\n-     *\n-     * @param initialContent initial content for the object\n-     *\/\n-    public StringContent(CharSequence initialContent) {\n-        stringContent = new StringBuilder();\n-        Entity.escapeHtmlChars(initialContent, stringContent);\n-    }\n-\n-    \/**\n-     * Adds content for the StringContent object.  The method escapes\n-     * HTML characters for the string content that is added.\n-     *\n-     * @param strContent string content to be added\n-     *\/\n-    @Override\n-    public StringContent add(CharSequence strContent) {\n-        Entity.escapeHtmlChars(strContent, stringContent);\n-        return this;\n-    }\n-\n-    @Override\n-    public boolean isEmpty() {\n-        return (stringContent.length() == 0);\n-    }\n-\n-    @Override\n-    public int charCount() {\n-        return RawHtml.charCount(stringContent.toString());\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return stringContent.toString();\n-    }\n-\n-    @Override\n-    public boolean write(Writer out, boolean atNewline) throws IOException {\n-        String s = stringContent.toString();\n-        out.write(s);\n-        return s.endsWith(DocletConstants.NL);\n-    }\n-}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/StringContent.java","additions":0,"deletions":96,"binary":false,"changes":96,"status":"deleted"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.javadoc.internal.doclets.formats.html.markup;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+\n+import jdk.javadoc.internal.doclets.toolkit.Content;\n+import jdk.javadoc.internal.doclets.toolkit.util.DocletConstants;\n+\n+\/**\n+ * Class for containing immutable string content for HTML tags of javadoc output.\n+ *\n+ *  <p><b>This is NOT part of any supported API.\n+ *  If you write code that depends on this, you do so at your own risk.\n+ *  This code and its internal interfaces are subject to change or\n+ *  deletion without notice.<\/b>\n+ *\/\n+public class Text extends Content {\n+    private final String string;\n+\n+    public static final Text EMPTY = Text.of(\"\");\n+\n+    \/**\n+     * Creates a new object containing immutable text.\n+     *\n+     * @param content the text content\n+     * @return the object\n+     *\/\n+    public static Text of(CharSequence content) {\n+        return new Text(content);\n+    }\n+\n+    \/**\n+     * Constructor to construct FixedStringContent object.\n+     *\n+     * @param content content for the object\n+     *\/\n+    private Text(CharSequence content) {\n+        string = Entity.escapeHtmlChars(content);\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return string.isEmpty();\n+    }\n+\n+    @Override\n+    public int charCount() {\n+        return RawHtml.charCount(string);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return string;\n+    }\n+\n+    @Override\n+    public boolean write(Writer out, boolean atNewline) throws IOException {\n+        out.write(string);\n+        return string.endsWith(DocletConstants.NL);\n+    }\n+\n+}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/Text.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.javadoc.internal.doclets.formats.html.markup;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+\n+import jdk.javadoc.internal.doclets.toolkit.Content;\n+import jdk.javadoc.internal.doclets.toolkit.util.DocletConstants;\n+\n+\/**\n+ * Class for generating string content for HTML tags of javadoc output.\n+ * The content is mutable to the extent that additional content may be added.\n+ *\n+ *  <p><b>This is NOT part of any supported API.\n+ *  If you write code that depends on this, you do so at your own risk.\n+ *  This code and its internal interfaces are subject to change or\n+ *  deletion without notice.<\/b>\n+ *\/\n+public class TextBuilder extends Content {\n+\n+    private final StringBuilder stringBuilder;\n+\n+    \/**\n+     * Constructor to construct StringContent object.\n+     *\/\n+    public TextBuilder() {\n+        stringBuilder = new StringBuilder();\n+    }\n+\n+    \/**\n+     * Constructor to construct StringContent object with some initial content.\n+     *\n+     * @param initialContent initial content for the object\n+     *\/\n+    public TextBuilder(CharSequence initialContent) {\n+        stringBuilder = new StringBuilder();\n+        Entity.escapeHtmlChars(initialContent, stringBuilder);\n+    }\n+\n+    \/**\n+     * Adds content for the StringContent object.  The method escapes\n+     * HTML characters for the string content that is added.\n+     *\n+     * @param strContent string content to be added\n+     *\/\n+    @Override\n+    public TextBuilder add(CharSequence strContent) {\n+        Entity.escapeHtmlChars(strContent, stringBuilder);\n+        return this;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return (stringBuilder.length() == 0);\n+    }\n+\n+    @Override\n+    public int charCount() {\n+        return RawHtml.charCount(stringBuilder.toString());\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return stringBuilder.toString();\n+    }\n+\n+    @Override\n+    public boolean write(Writer out, boolean atNewline) throws IOException {\n+        String s = stringBuilder.toString();\n+        out.write(s);\n+        return s.endsWith(DocletConstants.NL);\n+    }\n+}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/TextBuilder.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -1117,14 +1117,0 @@\n-    \/**\n-     * Given a string, replace all occurrences of 'newStr' with 'oldStr'.\n-     * @param originalStr the string to modify.\n-     * @param oldStr the string to replace.\n-     * @param newStr the string to insert in place of the old string.\n-     *\/\n-    public String replaceText(String originalStr, String oldStr,\n-            String newStr) {\n-        if (oldStr == null || newStr == null || oldStr.equals(newStr)) {\n-            return originalStr;\n-        }\n-        return originalStr.replace(oldStr, newStr);\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-        StringContent titleContent = new StringContent(\"Markup test\");\n+        TextBuilder titleContent = new TextBuilder(\"Markup test\");\n@@ -104,1 +104,1 @@\n-        StringContent bodyContent = new StringContent(\n+        TextBuilder bodyContent = new TextBuilder(\n@@ -111,1 +111,1 @@\n-        StringContent anchorContent = new StringContent(\"Click Here\");\n+        TextBuilder anchorContent = new TextBuilder(\"Click Here\");\n@@ -113,1 +113,1 @@\n-        StringContent pContent = new StringContent(\" to <test> out a link.\");\n+        TextBuilder pContent = new TextBuilder(\" to <test> out a link.\");\n@@ -134,1 +134,1 @@\n-        StringContent ddContent = new StringContent(\"Test DD\");\n+        TextBuilder ddContent = new TextBuilder(\"Test DD\");\n@@ -138,1 +138,1 @@\n-        StringContent emptyString = new StringContent(\"\");\n+        TextBuilder emptyString = new TextBuilder(\"\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testHtmlDocument\/TestHtmlDocument.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}