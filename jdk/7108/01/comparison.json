{"files":[{"patch":"@@ -70,0 +70,1 @@\n+NOT_PRODUCT(cflags(PrintIdealLevel,     uintx, PrintIdealLevel, PrintIdealLevel)) \\\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -82,1 +82,2 @@\n-  option(PrintIdeal, \"PrintIdeal\", Bool) \\\n+  option(PrintIdeal, \"PrintIdeal\", Bool)  \\\n+  option(PrintIdealLevel, \"PrintIdealLevel\", Uintx) \\\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -115,0 +115,5 @@\n+  notproduct(uintx, PrintIdealLevel, 0,                                     \\\n+          \"Print ideal IR on stdout.\"                                       \\\n+          \"Same levels as PrintIdealGraphLevel\")                            \\\n+          range(0, 4)                                                       \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -538,0 +538,20 @@\n+#ifndef PRODUCT\n+void Compile::print_ideal_ir(const char *name) {\n+  ttyLocker ttyl;\n+  \/\/ keep the following output all in one block\n+  \/\/ This output goes directly to the tty, not the compiler log.\n+  \/\/ To enable tools to match it up with the compilation activity,\n+  \/\/ be sure to tag this tty output with the compile ID.\n+  if (xtty != NULL) {\n+    xtty->head(\"ideal compile_id='%d'%s compile_phase='%s'\",\n+               compile_id(),\n+               is_osr_compilation() ? \" compile_kind='osr'\" : \"\",\n+               name);\n+  }\n+  root()->dump(9999);\n+  if (xtty != NULL) {\n+    xtty->tail(\"ideal\");\n+  }\n+}\n+#endif\n+\n@@ -566,1 +586,0 @@\n-                  _print_ideal(directive->PrintIdealOption),\n@@ -585,1 +604,1 @@\n-                  NOT_PRODUCT(_printer(NULL) COMMA)\n+                  NOT_PRODUCT(_igv_printer(NULL) COMMA)\n@@ -767,2 +786,2 @@\n-  if (should_print(1)) {\n-    _printer->print_inlining();\n+  if (should_print_igv(1)) {\n+    _igv_printer->print_inlining();\n@@ -795,14 +814,2 @@\n-  if (print_ideal()) {\n-    ttyLocker ttyl;  \/\/ keep the following output all in one block\n-    \/\/ This output goes directly to the tty, not the compiler log.\n-    \/\/ To enable tools to match it up with the compilation activity,\n-    \/\/ be sure to tag this tty output with the compile ID.\n-    if (xtty != NULL) {\n-      xtty->head(\"ideal compile_id='%d'%s\", compile_id(),\n-                 is_osr_compilation()    ? \" compile_kind='osr'\" :\n-                 \"\");\n-    }\n-    root()->dump(9999);\n-    if (xtty != NULL) {\n-      xtty->tail(\"ideal\");\n-    }\n+  if (should_print_ideal()) {\n+    print_ideal_ir(\"print_ideal\");\n@@ -864,1 +871,0 @@\n-    _print_ideal(directive->PrintIdealOption),\n@@ -876,1 +882,1 @@\n-    NOT_PRODUCT(_printer(NULL) COMMA)\n+    NOT_PRODUCT(_igv_printer(NULL) COMMA)\n@@ -2083,1 +2089,1 @@\n-  print_method(PHASE_AFTER_PARSING);\n+  print_method(PHASE_AFTER_PARSING, 1);\n@@ -2801,1 +2807,1 @@\n-  print_method(PHASE_FINAL_CODE);\n+  print_method(PHASE_FINAL_CODE, 1);\n@@ -4033,1 +4039,1 @@\n-    C->print_method(PHASE_FAILURE);\n+    C->print_method(PHASE_FAILURE, 1);\n@@ -4763,1 +4769,17 @@\n-void Compile::print_method(CompilerPhaseType cpt, const char *name, int level) {\n+void Compile::print_method(CompilerPhaseType cpt, int level) {\n+  print_method_impl(cpt, CompilerPhaseTypeHelper::to_string(cpt), level);\n+}\n+\n+void Compile::print_method(CompilerPhaseType cpt, Node* n, int level) {\n+  ResourceMark rm;\n+  stringStream ss;\n+  ss.print_raw(CompilerPhaseTypeHelper::to_string(cpt));\n+  if (n != NULL) {\n+    ss.print(\": %d %s \", n->_idx, NodeClassNames[n->Opcode()]);\n+  } else {\n+    ss.print_raw(\": NULL\");\n+  }\n+  C->print_method_impl(cpt, ss.as_string(), level);\n+}\n+\n+void Compile::print_method_impl(CompilerPhaseType cpt, const char *name, int level) {\n@@ -4769,2 +4791,5 @@\n-  if (should_print(level)) {\n-    _printer->print_method(name, level);\n+  if (should_print_igv(level)) {\n+    _igv_printer->print_method(name, level);\n+  }\n+  if (should_print_ideal(level)) {\n+    print_ideal_ir(name);\n@@ -4776,2 +4801,2 @@\n-void Compile::print_method(CompilerPhaseType cpt, int level, int idx) {\n-  char output[1024];\n+\/\/ Only used from CompileWrapper\n+void Compile::begin_method() {\n@@ -4779,4 +4804,2 @@\n-  if (idx != 0) {\n-    jio_snprintf(output, sizeof(output), \"%s:%d\", CompilerPhaseTypeHelper::to_string(cpt), idx);\n-  } else {\n-    jio_snprintf(output, sizeof(output), \"%s\", CompilerPhaseTypeHelper::to_string(cpt));\n+  if (_method != NULL && should_print_igv(1)) {\n+    _igv_printer->begin_method();\n@@ -4785,13 +4808,1 @@\n-  print_method(cpt, output, level);\n-}\n-\n-void Compile::print_method(CompilerPhaseType cpt, Node* n, int level) {\n-  ResourceMark rm;\n-  stringStream ss;\n-  ss.print_raw(CompilerPhaseTypeHelper::to_string(cpt));\n-  if (n != NULL) {\n-    ss.print(\": %d %s \", n->_idx, NodeClassNames[n->Opcode()]);\n-  } else {\n-    ss.print_raw(\": NULL\");\n-  }\n-  C->print_method(cpt, ss.as_string(), level);\n+  C->_latest_stage_start_counter.stamp();\n@@ -4800,1 +4811,2 @@\n-void Compile::end_method(int level) {\n+\/\/ Only used from CompileWrapper\n+void Compile::end_method() {\n@@ -4803,1 +4815,1 @@\n-    CompilerEvent::PhaseEvent::post(event, C->_latest_stage_start_counter, PHASE_END, C->_compile_id, level);\n+    CompilerEvent::PhaseEvent::post(event, C->_latest_stage_start_counter, PHASE_END, C->_compile_id, 1);\n@@ -4807,2 +4819,2 @@\n-  if (_method != NULL && should_print(level)) {\n-    _printer->end_method();\n+  if (_method != NULL && should_print_igv(1)) {\n+    _igv_printer->end_method();\n@@ -4813,0 +4825,16 @@\n+bool Compile::should_print_igv(int level) {\n+#ifndef PRODUCT\n+  if (PrintIdealGraphLevel < 0) { \/\/ disabled by the user\n+    return false;\n+  }\n+\n+  bool need = directive()->IGVPrintLevelOption >= level;\n+  if (need && !_igv_printer) {\n+    _igv_printer = IdealGraphPrinter::printer();\n+    _igv_printer->set_compile(this);\n+  }\n+  return need;\n+#else\n+  return false;\n+#endif\n+}\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":77,"deletions":49,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -330,1 +330,0 @@\n-  bool                  _print_ideal;\n@@ -357,1 +356,1 @@\n-  IdealGraphPrinter*    _printer;\n+  IdealGraphPrinter*    _igv_printer;\n@@ -492,1 +491,1 @@\n-  IdealGraphPrinter* printer() { return _printer; }\n+  IdealGraphPrinter* igv_printer() { return _igv_printer; }\n@@ -639,1 +638,3 @@\n-  bool          print_ideal() const             { return _print_ideal; }\n+  void          print_ideal_ir(const char *name = NULL);\n+  bool          should_print_ideal() const      { return _directive->PrintIdealOption; }\n+  bool          should_print_ideal(uint level) const { return _directive->PrintIdealLevelOption >= level; }\n@@ -653,26 +654,3 @@\n-  void begin_method(int level = 1) {\n-#ifndef PRODUCT\n-    if (_method != NULL && should_print(level)) {\n-      _printer->begin_method();\n-    }\n-#endif\n-    C->_latest_stage_start_counter.stamp();\n-  }\n-\n-  bool should_print(int level = 1) {\n-#ifndef PRODUCT\n-    if (PrintIdealGraphLevel < 0) { \/\/ disabled by the user\n-      return false;\n-    }\n-\n-    bool need = directive()->IGVPrintLevelOption >= level;\n-    if (need && !_printer) {\n-      _printer = IdealGraphPrinter::printer();\n-      assert(_printer != NULL, \"_printer is NULL when we need it!\");\n-      _printer->set_compile(this);\n-    }\n-    return need;\n-#else\n-    return false;\n-#endif\n-  }\n+  void begin_method();\n+  void end_method();\n+  bool should_print_igv(int level);\n@@ -680,2 +658,1 @@\n-  void print_method(CompilerPhaseType cpt, const char *name, int level = 1);\n-  void print_method(CompilerPhaseType cpt, int level = 1, int idx = 0);\n+  void print_method(CompilerPhaseType cpt, int level);\n@@ -683,0 +660,1 @@\n+  void print_method_impl(CompilerPhaseType cpt, const char *name, int level);\n@@ -691,2 +669,0 @@\n-  void end_method(int level = 1);\n-\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":10,"deletions":34,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -674,1 +674,1 @@\n-  if (C->should_print(level)) {\n+  if (C->should_print_igv(level)) {\n","filename":"src\/hotspot\/share\/opto\/idealGraphPrinter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -325,1 +325,1 @@\n-  C->print_method(PHASE_BEFORE_MATCHING);\n+  C->print_method(PHASE_BEFORE_MATCHING, 1);\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2757,2 +2757,2 @@\n-  if (C->should_print(1)) {\n-    IdealGraphPrinter* printer = C->printer();\n+  if (C->should_print_igv(1)) {\n+    IdealGraphPrinter* printer = C->igv_printer();\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}