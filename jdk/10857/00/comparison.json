{"files":[{"patch":"@@ -708,1 +708,2 @@\n-  const size_t new_outer_size = size + MemTracker::overhead_per_malloc();\n+  if (MemTracker::enabled()) {\n+    \/\/ NMT realloc handling\n@@ -710,2 +711,1 @@\n-  \/\/ If NMT is enabled, this checks for heap overwrites, then de-accounts the old block.\n-  void* const old_outer_ptr = MemTracker::record_free(memblock);\n+    const size_t new_outer_size = size + MemTracker::overhead_per_malloc();\n@@ -713,4 +713,23 @@\n-  ALLOW_C_FUNCTION(::realloc, void* const new_outer_ptr = ::realloc(old_outer_ptr, new_outer_size);)\n-  if (new_outer_ptr == NULL) {\n-    return NULL;\n-  }\n+    \/\/ Handle size overflow.\n+    if (new_outer_size < size) {\n+      return NULL;\n+    }\n+\n+    const size_t old_size = MallocTracker::malloc_header(memblock)->size();\n+\n+    \/\/ De-account the old block from NMT *before* calling the real realloc(3) since it\n+    \/\/ may invalidate old block including its header. This will also perform integrity checks\n+    \/\/ on the old block (e.g. overwriters) and mark the old header as dead.\n+    void* const old_outer_ptr = MemTracker::record_free(memblock);\n+\n+    \/\/ the real realloc\n+    ALLOW_C_FUNCTION(::realloc, void* const new_outer_ptr = ::realloc(old_outer_ptr, new_outer_size);)\n+\n+    if (new_outer_ptr == NULL) {\n+      \/\/ If realloc(3) failed, the old block still exists. We must re-instantiate the old\n+      \/\/ NMT header then, since we marked it dead already. Otherwise subsequent os::realloc()\n+      \/\/ or os::free() calls would trigger block integrity asserts.\n+      void* p = MemTracker::record_malloc(old_outer_ptr, old_size, memflags, stack);\n+      assert(p == memblock, \"sanity\");\n+      return NULL;\n+    }\n@@ -718,1 +737,22 @@\n-  void* const new_inner_ptr = MemTracker::record_malloc(new_outer_ptr, size, memflags, stack);\n+    \/\/ After a successful realloc(3), we re-account the resized block with its new size\n+    \/\/ to NMT. This re-instantiates the NMT header.\n+    void* const new_inner_ptr = MemTracker::record_malloc(new_outer_ptr, size, memflags, stack);\n+\n+#ifdef ASSERT\n+    if (old_size < size) {\n+      \/\/ We also zap the newly extended region.\n+      ::memset((char*)new_inner_ptr + old_size, uninitBlockPad, size - old_size);\n+    }\n+#endif\n+\n+    rc = new_inner_ptr;\n+\n+  } else {\n+\n+    \/\/ NMT disabled.\n+    ALLOW_C_FUNCTION(::realloc, rc = ::realloc(memblock, size);)\n+    if (rc == NULL) {\n+      return NULL;\n+    }\n+\n+  }\n@@ -720,1 +760,1 @@\n-  DEBUG_ONLY(break_if_ptr_caught(new_inner_ptr);)\n+  DEBUG_ONLY(break_if_ptr_caught(rc);)\n@@ -722,1 +762,1 @@\n-  return new_inner_ptr;\n+  return rc;\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":50,"deletions":10,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -316,1 +316,0 @@\n- private:\n","filename":"src\/hotspot\/share\/services\/mallocTracker.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,143 @@\n+\/*\n+ * Copyright (c) 2022 SAP SE. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"memory\/allocation.hpp\"\n+#include \"runtime\/os.hpp\"\n+#include \"services\/mallocHeader.inline.hpp\"\n+#include \"services\/mallocTracker.hpp\"\n+#include \"services\/memTracker.hpp\"\n+#include \"testutils.hpp\"\n+#include \"unittest.hpp\"\n+\n+\/\/ Check NMT header for integrity, as well as expected type and size.\n+static void check_expected_malloc_header(const void* payload, MEMFLAGS type, size_t size) {\n+  const MallocHeader* hdr = MallocTracker::malloc_header(payload);\n+  hdr->assert_block_integrity();\n+  EXPECT_EQ(hdr->size(), size);\n+  EXPECT_EQ(hdr->flags(), type);\n+}\n+\n+\/\/ Check that a malloc with an overflowing size is rejected.\n+TEST_VM(NMT, malloc_failure1) {\n+  void* p = os::malloc(SIZE_MAX, mtTest);\n+  EXPECT_NULL(p);\n+}\n+\n+\/\/ Check that gigantic mallocs are rejected, even if no size overflow happens.\n+TEST_VM(NMT, malloc_failure2) {\n+  void* p = os::malloc(SIZE_MAX - M, mtTest);\n+  EXPECT_NULL(p);\n+}\n+\n+\/\/ Check correct handling of failing reallocs.\n+static void check_failing_realloc(size_t failing_request_size) {\n+\n+  \/\/ We test this with both NMT enabled and disabled.\n+  bool nmt_enabled = MemTracker::enabled();\n+  const size_t first_size = 0x100;\n+\n+  void* p = os::malloc(first_size, mtTest);\n+  EXPECT_NOT_NULL(p);\n+  if (nmt_enabled) {\n+    check_expected_malloc_header(p, mtTest, first_size);\n+  }\n+  GtestUtils::mark_range(p, first_size);\n+\n+  \/\/ should fail\n+  void* p2 = os::realloc(p, failing_request_size, mtTest);\n+  EXPECT_NULL(p2);\n+\n+  \/\/ original allocation should still be intact\n+  GtestUtils::check_range(p, first_size);\n+  if (nmt_enabled) {\n+    check_expected_malloc_header(p, mtTest, first_size);\n+  }\n+\n+  os::free(p);\n+}\n+\n+TEST_VM(NMT, realloc_failure_overflowing_size) {\n+  check_failing_realloc(SIZE_MAX);\n+  check_failing_realloc(SIZE_MAX - MemTracker::overhead_per_malloc());\n+}\n+\n+TEST_VM(NMT, realloc_failure_gigantic_size) {\n+  check_failing_realloc(SIZE_MAX - M);\n+}\n+\n+static void* do_realloc(void* p, size_t old_size, size_t new_size, uint8_t old_content, bool check_nmt_header) {\n+\n+  EXPECT_NOT_NULL(p);\n+  if (check_nmt_header) {\n+    check_expected_malloc_header(p, mtTest, old_size);\n+  }\n+\n+  void* p2 = os::realloc(p, new_size, mtTest);\n+\n+  EXPECT_NOT_NULL(p2);\n+  if (check_nmt_header) {\n+    check_expected_malloc_header(p2, mtTest, new_size);\n+  }\n+\n+  \/\/ Check old content, and possibly zapped area (if block grew)\n+  if (old_size < new_size) {\n+    GtestUtils::check_range((char*)p2, old_size, old_content);\n+#ifdef ASSERT\n+    GtestUtils::check_range((char*)p2 + old_size, new_size - old_size, uninitBlockPad);\n+#endif\n+  } else {\n+    GtestUtils::check_range((char*)p2, new_size, old_content);\n+  }\n+\n+  return p2;\n+}\n+\n+\/\/ Check a random sequence of reallocs. For enlarging reallocs, we expect the\n+\/\/ newly allocated memory to be zapped (in debug) while the old section should be\n+\/\/ left intact.\n+TEST_VM(NMT, random_reallocs) {\n+\n+  bool nmt_enabled = MemTracker::enabled();\n+  size_t size = 256;\n+  uint8_t content = 'A';\n+\n+  void* p = os::malloc(size, mtTest);\n+  ASSERT_NOT_NULL(p);\n+  if (nmt_enabled) {\n+    check_expected_malloc_header(p, mtTest, size);\n+  }\n+  GtestUtils::mark_range_with(p, size, content);\n+\n+  for (int n = 0; n < 100; n ++) {\n+    size_t new_size = (size_t)(os::random() % 512) + 1;\n+    \/\/ LOG_HERE(\"reallocating \" SIZE_FORMAT \"->\" SIZE_FORMAT, size, new_size);\n+    p = do_realloc(p, size, new_size, content, nmt_enabled);\n+    size = new_size;\n+    content = (n % 26) + 'A';\n+    GtestUtils::mark_range_with(p, size, content);\n+  }\n+\n+  os::free(p);\n+}\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_cornercases.cpp","additions":143,"deletions":0,"binary":false,"changes":143,"status":"added"},{"patch":"@@ -56,0 +56,2 @@\n+#define EXPECT_NOT_NULL(p)  EXPECT_NE(p2i(p), 0)\n+#define EXPECT_NULL(p)      EXPECT_EQ(p2i(p), 0)\n","filename":"test\/hotspot\/gtest\/testutils.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}