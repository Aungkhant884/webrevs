{"files":[{"patch":"@@ -2758,23 +2758,0 @@\n-\/\/ Unmap mapped regions of shared space.\n-void FileMapInfo::stop_sharing_and_unmap(const char* msg) {\n-  MetaspaceShared::set_shared_metaspace_range(nullptr, nullptr, nullptr);\n-\n-  FileMapInfo *map_info = FileMapInfo::current_info();\n-  if (map_info) {\n-    map_info->fail_continue(\"%s\", msg);\n-    for (int i = 0; i < MetaspaceShared::num_non_heap_regions; i++) {\n-      if (!HeapShared::is_heap_region(i)) {\n-        map_info->unmap_region(i);\n-      }\n-    }\n-    \/\/ Dealloc the archive heap regions only without unmapping. The regions are part\n-    \/\/ of the java heap. Unmapping of the heap regions are managed by GC.\n-    map_info->dealloc_heap_regions(open_heap_regions,\n-                                   num_open_heap_regions);\n-    map_info->dealloc_heap_regions(closed_heap_regions,\n-                                   num_closed_heap_regions);\n-  } else if (DumpSharedSpaces) {\n-    fail_stop(\"%s\", msg);\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -495,3 +495,0 @@\n-  \/\/ Stop CDS sharing and unmap CDS regions.\n-  static void stop_sharing_and_unmap(const char* msg);\n-\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}