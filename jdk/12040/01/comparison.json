{"files":[{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_METAPROGRAMMING_ISSAME_HPP\n-#define SHARE_METAPROGRAMMING_ISSAME_HPP\n-\n-#include \"metaprogramming\/integralConstant.hpp\"\n-\n-\/\/ This trait returns true iff the two types X and Y are the same\n-\n-template <typename X, typename Y>\n-struct IsSame: public FalseType {};\n-\n-template <typename X>\n-struct IsSame<X, X>: public TrueType {};\n-\n-#endif \/\/ SHARE_METAPROGRAMMING_ISSAME_HPP\n","filename":"src\/hotspot\/share\/metaprogramming\/isSame.hpp","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"metaprogramming\/isSame.hpp\"\n@@ -68,2 +67,2 @@\n-    IsSame<typename HeapOopType<decorators>::type, narrowOop>::value &&\n-    IsSame<T, oop>::value> {};\n+    std::is_same<typename HeapOopType<decorators>::type, narrowOop>::value &&\n+    std::is_same<T, oop>::value> {};\n@@ -1215,1 +1214,1 @@\n-                   (IsSame<T, void>::value || std::is_integral<T>::value) ||\n+                   (std::is_same<T, void>::value || std::is_integral<T>::value) ||\n","filename":"src\/hotspot\/share\/oops\/accessBackend.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"metaprogramming\/isSame.hpp\"\n@@ -795,2 +794,2 @@\n-                    IsSame<std::remove_cv_t<D>,\n-                           std::remove_cv_t<U>>::value>::type>\n+                    std::is_same<std::remove_cv_t<D>,\n+                                 std::remove_cv_t<U>>::value>::type>\n","filename":"src\/hotspot\/share\/runtime\/atomic.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+#include <type_traits>\n+\n@@ -76,1 +78,1 @@\n-static typename EnableIf<IsSame<Receiver, Base>::value, void>::type\n+static typename EnableIf<std::is_same<Receiver, Base>::value, void>::type\n@@ -82,1 +84,1 @@\n-static typename EnableIf<!IsSame<Receiver, Base>::value, void>::type\n+static typename EnableIf<!std::is_same<Receiver, Base>::value, void>::type\n@@ -85,1 +87,1 @@\n-  STATIC_ASSERT((!IsSame<OopClosureType, OopIterateClosure>::value));\n+  STATIC_ASSERT((!std::is_same<OopClosureType, OopIterateClosure>::value));\n@@ -97,1 +99,1 @@\n-static typename EnableIf<IsSame<Receiver, Base>::value, bool>::type\n+static typename EnableIf<std::is_same<Receiver, Base>::value, bool>::type\n@@ -103,1 +105,1 @@\n-static typename EnableIf<!IsSame<Receiver, Base>::value, bool>::type\n+static typename EnableIf<!std::is_same<Receiver, Base>::value, bool>::type\n@@ -116,1 +118,1 @@\n-static typename EnableIf<IsSame<Receiver, Base>::value, void>::type\n+static typename EnableIf<std::is_same<Receiver, Base>::value, void>::type\n@@ -122,1 +124,1 @@\n-static typename EnableIf<!IsSame<Receiver, Base>::value, void>::type\n+static typename EnableIf<!std::is_same<Receiver, Base>::value, void>::type\n@@ -135,1 +137,1 @@\n-static typename EnableIf<IsSame<Receiver, Base>::value, void>::type\n+static typename EnableIf<std::is_same<Receiver, Base>::value, void>::type\n@@ -141,1 +143,1 @@\n-static typename EnableIf<!IsSame<Receiver, Base>::value, void>::type\n+static typename EnableIf<!std::is_same<Receiver, Base>::value, void>::type\n@@ -154,1 +156,1 @@\n-static typename EnableIf<IsSame<Receiver, Base>::value, void>::type\n+static typename EnableIf<std::is_same<Receiver, Base>::value, void>::type\n@@ -160,1 +162,1 @@\n-static typename EnableIf<!IsSame<Receiver, Base>::value, void>::type\n+static typename EnableIf<!std::is_same<Receiver, Base>::value, void>::type\n","filename":"src\/hotspot\/share\/utilities\/devirtualizer.inline.hpp","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"memory\/allocation.hpp\"\n-#include \"metaprogramming\/isSame.hpp\"\n-#include \"utilities\/debug.hpp\"\n-\n-class IsSameTest: AllStatic {\n-  class A: AllStatic {};\n-  class B: AllStatic {};\n-\n-  static const bool const_A_is_A = IsSame<const A, A>::value;\n-  STATIC_ASSERT(!const_A_is_A);\n-\n-  static const bool volatile_A_is_A = IsSame<volatile A, A>::value;\n-  STATIC_ASSERT(!volatile_A_is_A);\n-\n-  static const bool Aref_is_A = IsSame<A&, A>::value;\n-  STATIC_ASSERT(!Aref_is_A);\n-\n-  static const bool Aptr_is_A = IsSame<A*, A>::value;\n-  STATIC_ASSERT(!Aptr_is_A);\n-\n-  static const bool A_is_B = IsSame<A, B>::value;\n-  STATIC_ASSERT(!A_is_B);\n-\n-  static const bool A_is_A = IsSame<A, A>::value;\n-  STATIC_ASSERT(A_is_A);\n-};\n","filename":"test\/hotspot\/gtest\/metaprogramming\/test_isSame.cpp","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"metaprogramming\/isSame.hpp\"\n","filename":"test\/hotspot\/gtest\/metaprogramming\/test_isSigned.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"metaprogramming\/isSame.hpp\"\n","filename":"test\/hotspot\/gtest\/metaprogramming\/test_primitiveConversions.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}