{"files":[{"patch":"@@ -1738,0 +1738,2 @@\n+\n+  bool has_moved_to_inner_loop(Node* n, Node* region, Node* x);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -155,2 +155,1 @@\n-    if (x != the_clone && the_clone != nullptr)\n-      _igvn.remove_dead_node(the_clone);\n+\n@@ -158,0 +157,12 @@\n+\n+    if (the_clone == nullptr) continue;\n+\n+    if (the_clone != x) {\n+      _igvn.remove_dead_node(the_clone);\n+    } else if (region->is_Loop() && i == LoopNode::LoopBackControl) {\n+      \/\/ it is not a win if work has moved from an outer to an inner loop\n+      if (has_moved_to_inner_loop(n, region, x)) {\n+        wins = 0;\n+        break;\n+      }\n+    }\n@@ -221,0 +232,17 @@\n+\/\/ Check if Node 'x' has moved to inner loop compared to Node 'n'\n+bool PhaseIdealLoop::has_moved_to_inner_loop(Node* n, Node* region, Node* x) {\n+  assert(region->is_Loop(), \"region should be a loop\");\n+  IdealLoopTree* n_loop_tree = get_loop(region);\n+  for (uint j = 1; j < n->req(); j++) {\n+    Node* in = n->in(j);\n+    if (in->is_Phi() && in->in(0) == region) {\n+      IdealLoopTree* x_loop_tree = get_loop(get_early_ctrl(x));\n+      \/\/ x_loop_tree should be outer or same loop as n_loop_tree\n+      if (!x_loop_tree->is_member(n_loop_tree)) {\n+        return true;\n+      }\n+    }\n+  }\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":30,"deletions":2,"binary":false,"changes":32,"status":"modified"}]}