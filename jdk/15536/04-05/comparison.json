{"files":[{"patch":"@@ -1739,1 +1739,1 @@\n-  bool can_move_to_inner_loop(Node* n, Node* region, Node* x);\n+  bool can_move_to_inner_loop(Node* n, LoopNode* region, Node* x);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -163,1 +163,1 @@\n-               n->is_Load() && can_move_to_inner_loop(n, region, x)) {\n+               n->is_Load() && can_move_to_inner_loop(n, region->as_Loop(), x)) {\n@@ -232,5 +232,4 @@\n-\/\/ Note: The test is not exact. Returns true if the 'x' COULD end up in an inner loop,\n-\/\/ BUT it can also return true and the 'x' is in the outer loop\n-bool PhaseIdealLoop::can_move_to_inner_loop(Node* n, Node* region, Node* x) {\n-  assert(region->is_Loop(), \"region should be a loop\");\n-  IdealLoopTree* n_loop_tree = get_loop(region);\n+\/\/ Note: The test is not exact. Returns true if 'x' COULD end up in an inner loop,\n+\/\/ BUT it can also return true and 'x' is in the outer loop\n+bool PhaseIdealLoop::can_move_to_inner_loop(Node* n, LoopNode* n_loop, Node* x) {\n+  IdealLoopTree* n_loop_tree = get_loop(n_loop);\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"}]}