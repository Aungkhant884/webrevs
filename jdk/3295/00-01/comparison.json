{"files":[{"patch":"@@ -153,18 +153,14 @@\n-    private static final byte[] DIGITS = {\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-             0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1,\n-            -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-    };\n+    private static final byte[] DIGITS = new byte[] {\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1,\n+            -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12,\n+            13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };\n@@ -178,1 +174,1 @@\n-    private static final byte[] EMPTY_BYTES = {};\n+    private static final byte[] EMPTY_BYTES = new byte[0];\n@@ -198,1 +194,1 @@\n-        this.digits = digits;\n+        this.digits = Objects.requireNonNull(digits, \"digits\");\n@@ -475,2 +471,1 @@\n-     * Checked that the requested size for the result string is\n-     * less than or equal to the max array size.\n+     * Checked that the requested size for the result string is less than the max array size.\n@@ -534,1 +529,1 @@\n-        if (string.isEmpty())\n+        if (string.length() == 0)\n@@ -542,1 +537,1 @@\n-        if ((string.length() - valueChars) % stride != 0)\n+        if (string.length() < valueChars || (string.length() - valueChars) % stride != 0)\n@@ -553,1 +548,4 @@\n-            bytes[i] = (byte) fromHexDigits(string, offset);\n+            int v = fromHexDigits(string, offset);\n+            if (v < 0)\n+                throw new IllegalArgumentException(\"input contains non-hexadecimal characters\");\n+            bytes[i] = (byte) v;\n@@ -556,1 +554,4 @@\n-        bytes[i] = (byte) fromHexDigits(string, offset);\n+        int v = fromHexDigits(string, offset);\n+        if (v < 0)\n+            throw new IllegalArgumentException(\"input contains non-hexadecimal characters\");\n+        bytes[i] = (byte) v;\n@@ -832,1 +833,1 @@\n-    private static byte[] parseNoDelimiter(CharSequence string) {\n+    private byte[] parseNoDelimiter(CharSequence string) {\n@@ -838,0 +839,1 @@\n+        int illegal = 0;        \/\/ Accumulate logical-or of all bytes\n@@ -839,1 +841,3 @@\n-            bytes[i] = (byte) fromHexDigits(string, i * 2);\n+            int v = fromHexDigits(string, i * 2);\n+            bytes[i] = (byte) v;\n+            illegal |= v;\n@@ -841,0 +845,3 @@\n+        \/\/ check if any character was an illegal character\n+        if (illegal < 0)\n+            throw new IllegalArgumentException(\"input contains non-hexadecimal characters\");\n@@ -912,0 +919,1 @@\n+        Objects.requireNonNull(string, \"string\");\n@@ -928,2 +936,1 @@\n-     * {@code HexFormat} uses only hexadecimal characters\n-     * {@code \"0-9\"}, {@code \"A-F\"} and {@code \"a-f\"}.\n+     * {@code HexFormat} uses only hexadecimal characters \"0-9, \"A-F\", and \"a-f\".\n@@ -938,1 +945,7 @@\n-        return fromHexDigits(string, 0, string.length());\n+        Objects.requireNonNull(string, \"string\");\n+        int length = checkDigitCount(0, string.length(), 8);\n+        int value = 0;\n+        for (int i = 0; i < length; i++) {\n+            value = (value << 4) + fromHexDigit(string.charAt(i));\n+        }\n+        return value;\n@@ -954,2 +967,1 @@\n-     * {@code HexFormat} uses only hexadecimal characters\n-     * {@code \"0-9\"}, {@code \"A-F\"} and {@code \"a-f\"}.\n+     * {@code HexFormat} uses only hexadecimal characters \"0-9, \"A-F\", and \"a-f\".\n@@ -989,2 +1001,1 @@\n-     * {@code HexFormat} uses only hexadecimal characters\n-     * {@code \"0-9\"}, {@code \"A-F\"} and {@code \"a-f\"}.\n+     * {@code HexFormat} uses only hexadecimal characters \"0-9, \"A-F\", and \"a-f\".\n@@ -999,1 +1010,7 @@\n-        return fromHexDigitsToLong(string, 0, string.length());\n+        Objects.requireNonNull(string, \"string\");\n+        int length = checkDigitCount(0, string.length(), 16);\n+        long value = 0L;\n+        for (int i = 0; i < length; i++) {\n+            value = (value << 4) + fromHexDigit(string.charAt(i));\n+        }\n+        return value;\n@@ -1015,2 +1032,1 @@\n-     * {@code HexFormat} uses only hexadecimal characters\n-     * {@code \"0-9\"}, {@code \"A-F\"} and {@code \"a-f\"}.\n+     * {@code HexFormat} uses only hexadecimal characters \"0-9, \"A-F\", and \"a-f\".\n@@ -1055,2 +1071,1 @@\n-        return Arrays.equals(digits, otherHex.digits) &&\n-                delimiter.equals(otherHex.delimiter) &&\n+        return delimiter.equals(otherHex.delimiter) &&\n@@ -1058,1 +1073,2 @@\n-                suffix.equals(otherHex.suffix);\n+                suffix.equals(otherHex.suffix) &&\n+                Arrays.equals(digits, otherHex.digits);\n","filename":"src\/java.base\/share\/classes\/java\/util\/HexFormat.java","additions":57,"deletions":41,"binary":false,"changes":98,"status":"modified"}]}