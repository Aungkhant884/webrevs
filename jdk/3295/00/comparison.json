{"files":[{"patch":"@@ -153,14 +153,18 @@\n-    private static final byte[] DIGITS = new byte[] {\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1,\n-            -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12,\n-            13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };\n+    private static final byte[] DIGITS = {\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+             0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1,\n+            -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+    };\n@@ -174,1 +178,1 @@\n-    private static final byte[] EMPTY_BYTES = new byte[0];\n+    private static final byte[] EMPTY_BYTES = {};\n@@ -194,1 +198,1 @@\n-        this.digits = Objects.requireNonNull(digits, \"digits\");\n+        this.digits = digits;\n@@ -471,1 +475,2 @@\n-     * Checked that the requested size for the result string is less than the max array size.\n+     * Checked that the requested size for the result string is\n+     * less than or equal to the max array size.\n@@ -529,1 +534,1 @@\n-        if (string.length() == 0)\n+        if (string.isEmpty())\n@@ -537,1 +542,1 @@\n-        if (string.length() < valueChars || (string.length() - valueChars) % stride != 0)\n+        if ((string.length() - valueChars) % stride != 0)\n@@ -548,4 +553,1 @@\n-            int v = fromHexDigits(string, offset);\n-            if (v < 0)\n-                throw new IllegalArgumentException(\"input contains non-hexadecimal characters\");\n-            bytes[i] = (byte) v;\n+            bytes[i] = (byte) fromHexDigits(string, offset);\n@@ -554,4 +556,1 @@\n-        int v = fromHexDigits(string, offset);\n-        if (v < 0)\n-            throw new IllegalArgumentException(\"input contains non-hexadecimal characters\");\n-        bytes[i] = (byte) v;\n+        bytes[i] = (byte) fromHexDigits(string, offset);\n@@ -833,1 +832,1 @@\n-    private byte[] parseNoDelimiter(CharSequence string) {\n+    private static byte[] parseNoDelimiter(CharSequence string) {\n@@ -839,1 +838,0 @@\n-        int illegal = 0;        \/\/ Accumulate logical-or of all bytes\n@@ -841,3 +839,1 @@\n-            int v = fromHexDigits(string, i * 2);\n-            bytes[i] = (byte) v;\n-            illegal |= v;\n+            bytes[i] = (byte) fromHexDigits(string, i * 2);\n@@ -845,3 +841,0 @@\n-        \/\/ check if any character was an illegal character\n-        if (illegal < 0)\n-            throw new IllegalArgumentException(\"input contains non-hexadecimal characters\");\n@@ -919,1 +912,0 @@\n-        Objects.requireNonNull(string, \"string\");\n@@ -936,1 +928,2 @@\n-     * {@code HexFormat} uses only hexadecimal characters \"0-9, \"A-F\", and \"a-f\".\n+     * {@code HexFormat} uses only hexadecimal characters\n+     * {@code \"0-9\"}, {@code \"A-F\"} and {@code \"a-f\"}.\n@@ -945,7 +938,1 @@\n-        Objects.requireNonNull(string, \"string\");\n-        int length = checkDigitCount(0, string.length(), 8);\n-        int value = 0;\n-        for (int i = 0; i < length; i++) {\n-            value = (value << 4) + fromHexDigit(string.charAt(i));\n-        }\n-        return value;\n+        return fromHexDigits(string, 0, string.length());\n@@ -967,1 +954,2 @@\n-     * {@code HexFormat} uses only hexadecimal characters \"0-9, \"A-F\", and \"a-f\".\n+     * {@code HexFormat} uses only hexadecimal characters\n+     * {@code \"0-9\"}, {@code \"A-F\"} and {@code \"a-f\"}.\n@@ -1001,1 +989,2 @@\n-     * {@code HexFormat} uses only hexadecimal characters \"0-9, \"A-F\", and \"a-f\".\n+     * {@code HexFormat} uses only hexadecimal characters\n+     * {@code \"0-9\"}, {@code \"A-F\"} and {@code \"a-f\"}.\n@@ -1010,7 +999,1 @@\n-        Objects.requireNonNull(string, \"string\");\n-        int length = checkDigitCount(0, string.length(), 16);\n-        long value = 0L;\n-        for (int i = 0; i < length; i++) {\n-            value = (value << 4) + fromHexDigit(string.charAt(i));\n-        }\n-        return value;\n+        return fromHexDigitsToLong(string, 0, string.length());\n@@ -1032,1 +1015,2 @@\n-     * {@code HexFormat} uses only hexadecimal characters \"0-9, \"A-F\", and \"a-f\".\n+     * {@code HexFormat} uses only hexadecimal characters\n+     * {@code \"0-9\"}, {@code \"A-F\"} and {@code \"a-f\"}.\n@@ -1071,1 +1055,2 @@\n-        return delimiter.equals(otherHex.delimiter) &&\n+        return Arrays.equals(digits, otherHex.digits) &&\n+                delimiter.equals(otherHex.delimiter) &&\n@@ -1073,2 +1058,1 @@\n-                suffix.equals(otherHex.suffix) &&\n-                Arrays.equals(digits, otherHex.digits);\n+                suffix.equals(otherHex.suffix);\n","filename":"src\/java.base\/share\/classes\/java\/util\/HexFormat.java","additions":41,"deletions":57,"binary":false,"changes":98,"status":"modified"}]}