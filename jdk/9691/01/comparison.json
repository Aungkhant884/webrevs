{"files":[{"patch":"@@ -45,0 +45,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -46,1 +47,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocletConstants;\n@@ -214,1 +214,1 @@\n-            sep = \",\" + DocletConstants.NL + \" \";\n+            sep = \",\" + Text.NL + \" \";\n@@ -228,1 +228,1 @@\n-                                .add(DocletConstants.NL)\n+                                .add(Text.NL)\n@@ -240,1 +240,1 @@\n-            result.add(DocletConstants.NL);\n+            result.add(Text.NL);\n@@ -247,1 +247,1 @@\n-                            .add(DocletConstants.NL)\n+                            .add(Text.NL)\n@@ -271,1 +271,1 @@\n-                result.add(DocletConstants.NL);\n+                result.add(Text.NL);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractExecutableMemberWriter.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocletConstants;\n@@ -235,1 +234,1 @@\n-                                localTags.add(docTreeFactory.newTextTree(DocletConstants.NL));\n+                                localTags.add(docTreeFactory.newTextTree(\"\\n\"));\n@@ -251,1 +250,1 @@\n-                                localTags.add(docTreeFactory.newTextTree(DocletConstants.NL));\n+                                localTags.add(docTreeFactory.newTextTree(\"\\n\"));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/DocFilesHandlerImpl.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -107,1 +107,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocletConstants;\n@@ -1170,1 +1169,1 @@\n-                return super.add(utils.normalizeNewlines(text));\n+                return super.add(Text.normalizeNewlines(text));\n@@ -1362,1 +1361,1 @@\n-                    Content t = Text.of(utils.normalizeNewlines(s));\n+                    Content t = Text.of(Text.normalizeNewlines(s));\n@@ -1407,1 +1406,1 @@\n-                    return utils.normalizeNewlines(text);\n+                    return Text.normalizeNewlines(text);\n@@ -1701,1 +1700,1 @@\n-            annotation.add(lineBreak ? DocletConstants.NL : \"\");\n+            annotation.add(lineBreak ? Text.NL : \"\");\n@@ -1733,1 +1732,1 @@\n-                        annotation.add(DocletConstants.NL);\n+                        annotation.add(Text.NL);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -47,1 +48,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocletConstants;\n@@ -181,1 +181,1 @@\n-                        links.add(DocletConstants.NL);\n+                        links.add(Text.NL);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlLinkFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocletConstants;\n@@ -153,1 +152,1 @@\n-                        content.add(DocletConstants.NL);\n+                        content.add(Text.NL);\n@@ -170,1 +169,1 @@\n-                            extendsImplements.add(DocletConstants.NL);\n+                            extendsImplements.add(Text.NL);\n@@ -195,1 +194,1 @@\n-                        content.add(DocletConstants.NL);\n+                        content.add(Text.NL);\n@@ -224,1 +223,1 @@\n-                        .forEach(a -> { content.add(a).add(\" \"); });\n+                        .forEach(a -> content.add(a).add(\" \"));\n@@ -547,1 +546,1 @@\n-                target.add(DocletConstants.NL);\n+                target.add(Text.NL);\n@@ -577,1 +576,1 @@\n-                target.add(DocletConstants.NL)\n+                target.add(Text.NL)\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Signatures.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocletConstants;\n@@ -72,1 +71,1 @@\n-    private static final String NEW_LINE = DocletConstants.NL;\n+    private static final String NEW_LINE = Text.NL;\n@@ -292,1 +291,1 @@\n-            span.add(\"00\" + Integer.toString(lineno));\n+            span.add(\"00\" + lineno);\n@@ -294,1 +293,1 @@\n-            span.add(\"0\" + Integer.toString(lineno));\n+            span.add(\"0\" + lineno);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SourceToHTMLConverter.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.util.LinkedHashMap;\n@@ -35,1 +34,0 @@\n-import java.util.Map;\n@@ -357,2 +355,2 @@\n-    public boolean write(Writer out, boolean atNewline) throws IOException {\n-        return toContent().write(out, atNewline);\n+    public boolean write(Writer out, String newline, boolean atNewline) throws IOException {\n+        return toContent().write(out, newline, atNewline);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Table.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -143,2 +143,2 @@\n-    public boolean write(Writer out, boolean atNewline) throws IOException {\n-        return toContent().write(out, atNewline);\n+    public boolean write(Writer out, String newline, boolean atNewline) throws IOException {\n+        return toContent().write(out, newline, atNewline);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/TableHeader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -211,1 +211,1 @@\n-        return HtmlTree.CODE(Text.of(utils.normalizeNewlines(tag.getBody().getBody())));\n+        return HtmlTree.CODE(Text.of(Text.normalizeNewlines(tag.getBody().getBody())));\n@@ -312,1 +312,1 @@\n-        return Text.of(utils.normalizeNewlines(tag.getBody().getBody()));\n+        return Text.of(Text.normalizeNewlines(tag.getBody().getBody()));\n@@ -317,7 +317,6 @@\n-        Content header;\n-        switch (kind) {\n-            case PARAMETER:         header = contents.parameters ; break;\n-            case TYPE_PARAMETER:    header = contents.typeParameters ; break;\n-            case RECORD_COMPONENT:  header = contents.recordComponents ; break;\n-            default: throw new IllegalArgumentException(kind.toString());\n-        }\n+        Content header = switch (kind) {\n+            case PARAMETER -> contents.parameters;\n+            case TYPE_PARAMETER -> contents.typeParameters;\n+            case RECORD_COMPONENT -> contents.recordComponents;\n+            default -> throw new IllegalArgumentException(kind.toString());\n+        };\n@@ -387,3 +386,3 @@\n-        links.stream().filter(Predicate.not(Content::isEmpty)).forEach(item -> {\n-            seeList.add(HtmlTree.LI(item));\n-        });\n+        links.stream()\n+                .filter(Predicate.not(Content::isEmpty))\n+                .forEach(item -> seeList.add(HtmlTree.LI(item)));\n@@ -633,1 +632,1 @@\n-            CharSequence text = utils.normalizeNewlines(sequence);\n+            CharSequence text = Text.normalizeNewlines(sequence);\n@@ -781,1 +780,1 @@\n-                        : Optional.of(Text.of(utils.normalizeNewlines(detail.get()))));\n+                        : Optional.of(Text.of(Text.normalizeNewlines(detail.get()))));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/TagletWriterImpl.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    private List<Content> mainContents = new ArrayList<>();\n+    private final List<Content> mainContents = new ArrayList<>();\n@@ -77,2 +77,2 @@\n-    public boolean write(Writer out, boolean atNewline) throws IOException {\n-        return toContent().write(out, atNewline);\n+    public boolean write(Writer out, String newline, boolean atNewline) throws IOException {\n+        return toContent().write(out, newline, atNewline);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/BodyContents.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocletConstants;\n@@ -40,1 +39,1 @@\n-    private String commentText;\n+    private final String commentText;\n@@ -57,3 +56,4 @@\n-    public boolean write(Writer out, boolean atNewline) throws IOException {\n-        if (!atNewline)\n-            out.write(DocletConstants.NL);\n+    public boolean write(Writer out, String newline, boolean atNewline) throws IOException {\n+        if (!atNewline) {\n+            out.write(newline);\n+        }\n@@ -61,2 +61,3 @@\n-        out.write(commentText);\n-        out.write(\" -->\" + DocletConstants.NL);\n+        out.write(commentText.replace(\"\\n\", newline));\n+        out.write(\" -->\");\n+        out.write(newline);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/Comment.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-    public boolean write(Writer writer, boolean atNewline) throws IOException {\n+    public boolean write(Writer writer, String newline, boolean atNewline) throws IOException {\n@@ -81,1 +81,1 @@\n-            atNewline = content.write(writer, atNewline);\n+            atNewline = content.write(writer, newline, atNewline);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/ContentBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-    public boolean write(Writer writer, boolean atNewline) throws IOException {\n+    public boolean write(Writer writer, String newline, boolean atNewline) throws IOException {\n@@ -89,1 +89,1 @@\n-                case '<': case '>': case '&':\n+                case '<', '>', '&' -> {\n@@ -93,0 +93,1 @@\n+                }\n@@ -113,4 +114,4 @@\n-                case '<': sb.append(Entity.LESS_THAN.text);     break;\n-                case '>': sb.append(Entity.GREATER_THAN.text);  break;\n-                case '&': sb.append(Entity.AMPERSAND.text);     break;\n-                default:  sb.append(ch);                        break;\n+                case '<' -> sb.append(Entity.LESS_THAN.text);\n+                case '>' -> sb.append(Entity.GREATER_THAN.text);\n+                case '&' -> sb.append(Entity.AMPERSAND.text);\n+                default ->  sb.append(ch);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/Entity.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.util.Date;\n@@ -257,2 +256,2 @@\n-    public boolean write(Writer out, boolean atNewline) throws IOException {\n-        return toContent().write(out, atNewline);\n+    public boolean write(Writer out, String newline, boolean atNewline) throws IOException {\n+        return toContent().write(out, newline, atNewline);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/Head.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.util.*;\n@@ -36,1 +35,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocletConstants;\n@@ -56,0 +54,1 @@\n+     * Newlines are written using the platform line separator.\n@@ -62,1 +61,1 @@\n-            write(writer);\n+            write(writer, DocFile.PLATFORM_LINE_SEPARATOR);\n@@ -71,1 +70,1 @@\n-            write(writer);\n+            write(writer, \"\\n\");\n@@ -78,1 +77,1 @@\n-    private void write(Writer writer) throws IOException {\n+    private void write(Writer writer, String newline) throws IOException {\n@@ -80,2 +79,2 @@\n-        writer.write(DocletConstants.NL);\n-        docContent.write(writer, true);\n+        writer.write(newline);\n+        docContent.write(writer, newline, true);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/HtmlDocument.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.util.Iterator;\n@@ -44,1 +43,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocletConstants;\n@@ -1054,1 +1052,1 @@\n-    public boolean write(Writer out, boolean atNewline) throws IOException {\n+    public boolean write(Writer out, String newline, boolean atNewline) throws IOException {\n@@ -1056,2 +1054,3 @@\n-        if (!isInline && !atNewline)\n-            out.write(DocletConstants.NL);\n+        if (!isInline && !atNewline) {\n+            out.write(newline);\n+        }\n@@ -1061,6 +1060,3 @@\n-        Iterator<HtmlAttr> iterator = attrs.keySet().iterator();\n-        HtmlAttr key;\n-        String value;\n-        while (iterator.hasNext()) {\n-            key = iterator.next();\n-            value = attrs.get(key);\n+        for (var attr : attrs.entrySet()) {\n+            var key = attr.getKey();\n+            var value = attr.getValue();\n@@ -1077,2 +1073,3 @@\n-        for (Content c : content)\n-            nl = c.write(out, nl);\n+        for (Content c : content) {\n+            nl = c.write(out, newline, nl);\n+        }\n@@ -1085,1 +1082,1 @@\n-            out.write(DocletConstants.NL);\n+            out.write(newline);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/HtmlTree.java","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocletConstants;\n@@ -124,0 +123,1 @@\n+        assert Text.checkNewlines(rawHtml);\n@@ -154,8 +154,0 @@\n-                        case '\\r':\n-                            \/\/ Windows uses \"\\r\\n\" as line separator while UNIX uses \"\\n\".\n-                            \/\/ Skip the \"\\r\" to get consistent results across platforms.\n-                            if (i + 1 < htmlText.length() && htmlText.charAt(i + 1) == '\\n') {\n-                                i++;\n-                            }\n-                            count++;\n-                            break;\n@@ -195,3 +187,3 @@\n-    public boolean write(Writer out, boolean atNewline) throws IOException {\n-        out.write(rawHtmlContent);\n-        return rawHtmlContent.endsWith(DocletConstants.NL);\n+    public boolean write(Writer out, String newline, boolean atNewline) throws IOException {\n+        out.write(rawHtmlContent.replace(\"\\n\", newline));\n+        return rawHtmlContent.endsWith(\"\\n\");\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/RawHtml.java","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -200,1 +200,1 @@\n-        public boolean write(Writer writer, boolean atNewline) throws IOException {\n+        public boolean write(Writer writer, String newline, boolean atNewline) throws IOException {\n@@ -202,1 +202,1 @@\n-            writer.write(s.replace(\"\\n\", DocletConstants.NL));\n+            writer.write(s.replace(\"\\n\", newline));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/Script.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocletConstants;\n@@ -36,0 +35,1 @@\n+ * Newlines are always represented by {@code \\n}.\n@@ -39,0 +39,1 @@\n+\n@@ -59,0 +60,1 @@\n+        assert checkNewlines(content);\n@@ -73,10 +75,1 @@\n-        int count = 0;\n-        for (int i = 0; i < cs.length(); i++) {\n-            \/\/ Windows uses \"\\r\\n\" as line separator while UNIX uses \"\\n\".\n-            \/\/ Skip the \"\\r\" to get consistent results across platforms.\n-            if (cs.charAt(i) == '\\r' && (i + 1 < cs.length()) && cs.charAt(i + 1) == '\\n') {\n-                i++;\n-            }\n-            count++;\n-        }\n-        return count;\n+        return cs.length();\n@@ -91,3 +84,51 @@\n-    public boolean write(Writer out, boolean atNewline) throws IOException {\n-        out.write(Entity.escapeHtmlChars(string));\n-        return string.endsWith(DocletConstants.NL);\n+    public boolean write(Writer out, String newline, boolean atNewline) throws IOException {\n+        out.write(Entity.escapeHtmlChars(string).replace(\"\\n\", newline));\n+        return string.endsWith(\"\\n\");\n+    }\n+\n+    \/**\n+     * The newline character, to be used when creating {@code Content} nodes.\n+     *\/\n+    public static final String NL = \"\\n\";\n+\n+    \/**\n+     * Returns a given string with all newlines in the form {@code \\n}.\n+     *\n+     * The sequences of interest are {@code \\n}, {@code \\r\\n}, and {@code \\r}.\n+     * {@code \\n} is already in the right form, so can be ignored,\n+     * leaving code to handle {@code \\r\\n}, and {@code \\r}.\n+     *\n+     * @param text the string\n+     * @return the string with newlines in the form {@code \\n}\n+     *\/\n+    public static CharSequence normalizeNewlines(CharSequence text) {\n+        \/\/ fast-track when the input is a string with no \\r characters\n+        if (text instanceof String s && s.indexOf('\\r') != -1) {\n+            return text;\n+        } else {\n+            var sb = new StringBuilder();\n+            var s = text.toString();\n+            int sLen = s.length();\n+            int start = 0;\n+            int pos;\n+            while ((pos = s.indexOf('\\r', start)) != -1) {\n+                sb.append(s, start, pos);\n+                sb.append('\\n');\n+                pos++;\n+                if (pos < sLen && s.charAt(pos) == '\\n') {\n+                    pos++;\n+                }\n+                start = pos;\n+            }\n+            sb.append(s.substring(start));\n+            return sb;\n+        }\n+    }\n+\n+    \/**\n+     * Check for the absence of {@code \\r} characters.\n+     * @param cs the characters to be checked\n+     * @return {@code true} if there are no {@code \\r} characters, and {@code false} otherwise\n+     *\/\n+    static boolean checkNewlines(CharSequence cs) {\n+        return !cs.toString().contains(\"\\r\");\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/Text.java","additions":55,"deletions":14,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocletConstants;\n@@ -37,0 +36,1 @@\n+ * Newlines are always represented by {@code \\n}.\n@@ -56,0 +56,1 @@\n+        assert Text.checkNewlines(initialContent);\n@@ -66,0 +67,1 @@\n+        assert Text.checkNewlines(strContent);\n@@ -77,1 +79,1 @@\n-        return Text.charCount(stringBuilder);\n+        return stringBuilder.length();\n@@ -86,1 +88,1 @@\n-    public boolean write(Writer out, boolean atNewline) throws IOException {\n+    public boolean write(Writer out, String newline, boolean atNewline) throws IOException {\n@@ -88,2 +90,2 @@\n-        out.write(s);\n-        return s.endsWith(DocletConstants.NL);\n+        out.write(s.replace(\"\\n\", newline));\n+        return s.endsWith(\"\\n\");\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/TextBuilder.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -323,0 +323,5 @@\n+    \/**\n+     * The default amount of space between tab stops.\n+     *\/\n+    public static final int DEFAULT_TAB_STOP_LENGTH = 8;\n+\n@@ -328,1 +333,1 @@\n-        sourceTabSize = DocletConstants.DEFAULT_TAB_STOP_LENGTH;\n+        sourceTabSize = DEFAULT_TAB_STOP_LENGTH;\n@@ -600,1 +605,1 @@\n-                            sourceTabSize = DocletConstants.DEFAULT_TAB_STOP_LENGTH;\n+                            sourceTabSize = DEFAULT_TAB_STOP_LENGTH;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/BaseOptions.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+     * Newlines are represented by {@code \\n}.\n@@ -48,1 +49,1 @@\n-            write(out, true);\n+            write(out, \"\\n\", true);\n@@ -109,1 +110,2 @@\n-     * Writes content to a writer.\n+     * Writes content to a writer, using a given newline sequence, which should be\n+     * either {@code \\n} or the platform line separator.\n@@ -112,0 +114,1 @@\n+     * @param newline the newline sequence to use\n@@ -116,1 +119,1 @@\n-    public abstract boolean write(Writer writer, boolean atNewline) throws IOException;\n+    public abstract boolean write(Writer writer, String newline, boolean atNewline) throws IOException;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/Content.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -54,0 +54,6 @@\n+    \/**\n+     * The line separator for the current platform.\n+     * Use this when writing to external files.\n+     *\/\n+    public static final String PLATFORM_LINE_SEPARATOR = System.getProperty(\"line.separator\");\n+\n@@ -217,1 +223,1 @@\n-                                write(this, writer, DocletConstants.NL);\n+                                write(this, writer, PLATFORM_LINE_SEPARATOR);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/DocFile.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,10 +34,0 @@\n-    \/**\n-     * The default amount of space between tab stops.\n-     *\/\n-    public static final int DEFAULT_TAB_STOP_LENGTH = 8;\n-\n-    \/**\n-     * The line separator for the current operating system.\n-     *\/\n-    public static final String NL = System.getProperty(\"line.separator\");\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/DocletConstants.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1238,26 +1238,0 @@\n-    public CharSequence normalizeNewlines(CharSequence text) {\n-        StringBuilder sb = new StringBuilder();\n-        final int textLength = text.length();\n-        final String NL = DocletConstants.NL;\n-        int pos = 0;\n-        for (int i = 0; i < textLength; i++) {\n-            char ch = text.charAt(i);\n-            switch (ch) {\n-                case '\\n' -> {\n-                    sb.append(text, pos, i);\n-                    sb.append(NL);\n-                    pos = i + 1;\n-                }\n-                case '\\r' -> {\n-                    sb.append(text, pos, i);\n-                    sb.append(NL);\n-                    if (i + 1 < textLength && text.charAt(i + 1) == '\\n')\n-                        i++;\n-                    pos = i + 1;\n-                }\n-            }\n-        }\n-        sb.append(text, pos, textLength);\n-        return sb;\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -39,2 +39,0 @@\n-import static jdk.javadoc.internal.doclets.toolkit.util.DocletConstants.NL;\n-\n@@ -59,1 +57,1 @@\n-        String expected = readFile(testSrc, \"testMarkup.html\").replace(\"\\n\", NL);\n+        String expected = readFile(testSrc, \"testMarkup.html\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testHtmlDocument\/TestHtmlDocument.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}