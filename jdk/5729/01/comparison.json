{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include <type_traits>\n@@ -47,0 +48,3 @@\n+\/\/ See similar requirement for oopDesc.\n+static_assert(std::is_trivially_default_constructible<instanceOopDesc>::value, \"required\");\n+\n","filename":"src\/hotspot\/share\/oops\/instanceOop.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-  markWord() { \/* uninitialized *\/}\n+  markWord() = default;         \/\/ Doesn't initialize _value.\n","filename":"src\/hotspot\/share\/oops\/markWord.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include <type_traits>\n@@ -112,0 +113,3 @@\n+\/\/ See similar requirement for oopDesc.\n+static_assert(std::is_trivially_default_constructible<objArrayOopDesc>::value, \"required\");\n+\n","filename":"src\/hotspot\/share\/oops\/objArrayOop.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -35,0 +36,1 @@\n+#include <type_traits>\n@@ -60,0 +62,4 @@\n+  \/\/ There may be ordering constraints on the initialization of fields that\n+  \/\/ make use of the C++ copy\/assign incorrect.\n+  NONCOPYABLE(oopDesc);\n+\n@@ -61,0 +67,3 @@\n+  \/\/ Must be trivial; see verifying static assert after the class.\n+  oopDesc() = default;\n+\n@@ -314,0 +323,7 @@\n+\/\/ An oopDesc is not initialized via a constructor.  Space is allocated in\n+\/\/ the Java heap, and static functions provided here on HeapWord* are used\n+\/\/ to fill in certain parts of that memory.  The allocated memory is then\n+\/\/ treated as referring to an oopDesc.  For that to be valid, the oopDesc\n+\/\/ class must have a trivial default constructor (C++14 3.8\/1).\n+static_assert(std::is_trivially_default_constructible<oopDesc>::value, \"required\");\n+\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include <type_traits>\n@@ -137,0 +138,3 @@\n+\/\/ See similar requirement for oopDesc.\n+static_assert(std::is_trivially_default_constructible<typeArrayOopDesc>::value, \"required\");\n+\n","filename":"src\/hotspot\/share\/oops\/typeArrayOop.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}