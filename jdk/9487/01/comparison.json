{"files":[{"patch":"@@ -94,1 +94,1 @@\n-             (callee_locals - callee_params) +\n+             (callee_locals - callee_params) * Interpreter::stackElementWords +\n@@ -163,0 +163,13 @@\n+  \/\/ We have to add extra reserved slots to max_stack. There are 3 users of the extra slots,\n+  \/\/ none of which are at the same time, so we just need to make sure there is enough room\n+  \/\/ for the biggest user:\n+  \/\/   -reserved slot for excepton handler\n+  \/\/   -reserved slot for JSR292. Method::extra_stack_entries() is the size.\n+  \/\/   -reserved slot for TraceBytecodes\n+  int max_stack = method->constMethod()->max_stack() + MAX2(3, Method::extra_stack_entries());\n+  intptr_t* extended_sp = (intptr_t*) monbot -\n+                          (max_stack * Interpreter::stackElementWords) -\n+                          popframe_extra_args;\n+  extended_sp = align_down(extended_sp, StackAlignmentInBytes);\n+  interpreter_frame->interpreter_frame_set_extended_sp(extended_sp);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/abstractInterpreter_riscv.cpp","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-\/\/ Java stack pointer\n+\/\/ Java expression stack pointer\n@@ -146,0 +146,2 @@\n+\/\/ Sender's SP while in interpreter\n+REGISTER_DECLARATION(Register, x19_sender_sp, x19);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -330,0 +330,4 @@\n+void frame::interpreter_frame_set_extended_sp(intptr_t* sp) {\n+  *((intptr_t**)addr_at(interpreter_frame_extended_sp_offset)) = sp;\n+}\n+\n@@ -547,0 +551,1 @@\n+    DESCRIBE_FP_OFFSET(interpreter_frame_extended_sp);\n","filename":"src\/hotspot\/cpu\/riscv\/frame_riscv.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-\/\/    [padding               ]\n+\/\/    [extended SP           ]                                          extended_sp offset\n@@ -56,1 +56,1 @@\n-\/\/    [old stack pointer     ]                     (sender_sp)          sender_sp_offset\n+\/\/    [sender's SP           ]                     (sender_sp)          sender_sp_offset\n@@ -123,2 +123,2 @@\n-    interpreter_frame_padding_offset                 = interpreter_frame_mdp_offset - 1,\n-    interpreter_frame_mirror_offset                  = interpreter_frame_padding_offset - 1,\n+    interpreter_frame_extended_sp_offset             = interpreter_frame_mdp_offset - 1,\n+    interpreter_frame_mirror_offset                  = interpreter_frame_extended_sp_offset - 1,\n@@ -203,0 +203,2 @@\n+  void interpreter_frame_set_extended_sp(intptr_t* sp);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/frame_riscv.hpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -469,1 +469,1 @@\n-  mv(x30, sp);\n+  mv(x19_sender_sp, sp);\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,0 +85,24 @@\n+  void restore_sp_after_call() {\n+    Label L;\n+    ld(t0, Address(fp, frame::interpreter_frame_extended_sp_offset * wordSize));\n+#ifdef ASSERT\n+    bnez(t0, L);\n+    stop(\"SP is null\");\n+#endif\n+    bind(L);\n+    mv(sp, t0);\n+  }\n+\n+  void check_extended_sp(const char* msg = \"check extended SP\") {\n+#ifdef ASSERT\n+    Label L;\n+    ld(t0, Address(fp, frame::interpreter_frame_extended_sp_offset * wordSize));\n+    beq(sp, t0, L);\n+    stop(msg);\n+    bind(L);\n+#endif\n+  }\n+\n+#define check_extended_sp()                                                                    \\\n+  check_extended_sp(\"SP does not match extended SP in frame at \" __FILE__ \":\" XSTR(__LINE__))\n+\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.hpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-  \/\/ x30: sender SP (must preserve; see prepare_to_jump_from_interpreted)\n+  \/\/ x19_sender_sp: sender SP (must preserve; see prepare_to_jump_from_interpreted)\n@@ -277,1 +277,1 @@\n-  Register temp3 = x29;  \/\/ x30 is live by this point: it contains the sender SP\n+  Register temp3 = x29;\n@@ -348,1 +348,1 @@\n-    \/\/  x30 - interpreter linkage (if interpreted)\n+    \/\/  x19 - interpreter linkage (if interpreted)\n@@ -433,1 +433,1 @@\n-    \/\/ live at this point:  xmethod, x30 (if interpreted)\n+    \/\/ live at this point:  xmethod, x19_sender_sp (if interpreted)\n","filename":"src\/hotspot\/cpu\/riscv\/methodHandles_riscv.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -389,1 +389,1 @@\n-  __ mv(x30, sp);\n+  __ mv(x19_sender_sp, sp);\n@@ -501,0 +501,5 @@\n+  \/\/ Note: x19_sender_sp contains the senderSP on entry. We must\n+  \/\/ preserve it since we may do a i2c -> c2i transition if we lose a\n+  \/\/ race where compiled code goes non-entrant while we get args\n+  \/\/ ready.\n+\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -291,1 +291,1 @@\n-    \/\/      x30: sender sp\n+    \/\/      x19_sender_sp: sender sp\n@@ -293,1 +293,1 @@\n-    __ mv(x30, sp);\n+    __ mv(x19_sender_sp, sp);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-  \/\/ x30: sender sp\n+  \/\/ x19_sender_sp: sender sp\n@@ -173,1 +173,1 @@\n-      __ mv(sp, x30); \/\/ Restore caller's SP\n+      __ mv(sp, x19_sender_sp); \/\/ Restore caller's SP\n@@ -179,1 +179,1 @@\n-      __ mv(sp, x30);\n+      __ mv(sp, x19_sender_sp);\n@@ -184,1 +184,1 @@\n-      __ mv(sp, x30);\n+      __ mv(sp, x19_sender_sp);\n@@ -198,1 +198,1 @@\n-      __ mv(sp, x30);\n+      __ mv(sp, x19_sender_sp);\n@@ -212,1 +212,1 @@\n-      __ mv(sp, x30);\n+      __ mv(sp, x19_sender_sp);\n@@ -226,1 +226,1 @@\n-      __ mv(sp, x30);\n+      __ mv(sp, x19_sender_sp);\n@@ -240,1 +240,1 @@\n-      __ mv(sp, x30);\n+      __ mv(sp, x19_sender_sp);\n@@ -254,1 +254,1 @@\n-      __ mv(sp, x30);\n+      __ mv(sp, x19_sender_sp);\n@@ -271,1 +271,1 @@\n-      __ mv(sp, x30);\n+      __ mv(sp, x19_sender_sp);\n@@ -287,1 +287,1 @@\n-        __ mv(sp, x30); \/\/ Restore caller's SP\n+        __ mv(sp, x19_sender_sp); \/\/ Restore caller's SP\n@@ -297,1 +297,1 @@\n-        __ mv(sp, x30); \/\/ Restore caller's SP\n+        __ mv(sp, x19_sender_sp); \/\/ Restore caller's SP\n@@ -314,1 +314,1 @@\n-  \/\/ x30: sender SP\n+  \/\/ x19_sender_sp: sender SP\n@@ -462,8 +462,1 @@\n-  __ ld(t0, Address(xmethod, Method::const_offset()));\n-  __ lhu(t0, Address(t0, ConstMethod::max_stack_offset()));\n-  __ addi(t0, t0, frame::interpreter_frame_monitor_size() + 2);\n-  __ ld(t1,\n-        Address(fp, frame::interpreter_frame_initial_sp_offset * wordSize));\n-  __ slli(t0, t0, 3);\n-  __ sub(t0, t1, t0);\n-  __ andi(sp, t0, -16);\n+  __ restore_sp_after_call();\n@@ -490,8 +483,1 @@\n-  \/\/ Calculate stack limit\n-  __ ld(t0, Address(xmethod, Method::const_offset()));\n-  __ lhu(t0, Address(t0, ConstMethod::max_stack_offset()));\n-  __ addi(t0, t0, frame::interpreter_frame_monitor_size() + 2);\n-  __ ld(t1, Address(fp, frame::interpreter_frame_initial_sp_offset * wordSize));\n-  __ slli(t0, t0, 3);\n-  __ sub(t0, t1, t0);\n-  __ andi(sp, t0, -16);\n+  __ restore_sp_after_call();  \/\/ Restore SP to extended SP\n@@ -662,1 +648,1 @@\n-  \/\/ unnecessary because the sender SP in x30 is always aligned, but\n+  \/\/ unnecessary because the sender SP in x19 is always aligned, but\n@@ -664,1 +650,1 @@\n-  __ andi(sp, x30, -16);\n+  __ andi(sp, x19_sender_sp, -16);\n@@ -719,0 +705,1 @@\n+  __ check_extended_sp();\n@@ -721,2 +708,2 @@\n-  __ mv(t0, esp);\n-  __ sd(t0, monitor_block_top);  \/\/ set new monitor block top\n+  __ sd(sp, Address(fp, frame::interpreter_frame_extended_sp_offset * wordSize));\n+  __ sd(esp, monitor_block_top);  \/\/ set new monitor block top\n@@ -767,5 +754,0 @@\n-  \/\/ Get mirror and store it in the frame as GC root for this Method*\n-  __ load_mirror(t2, xmethod);\n-  __ sd(zr, Address(sp, 5 * wordSize));\n-  __ sd(t2, Address(sp, 4 * wordSize));\n-\n@@ -784,1 +766,1 @@\n-  __ sd(x30, Address(sp, 9 * wordSize));\n+  __ sd(x19_sender_sp, Address(sp, 9 * wordSize));\n@@ -787,1 +769,2 @@\n-  \/\/ Move SP out of the way\n+  \/\/ Get mirror\n+  __ load_mirror(t2, xmethod);\n@@ -791,1 +774,1 @@\n-    __ add(t0, t0, frame::interpreter_frame_monitor_size() + 2);\n+    __ add(t0, t0, MAX2(3, Method::extra_stack_entries()));\n@@ -794,1 +777,9 @@\n-    __ andi(sp, t0, -16);\n+    __ andi(t0, t0, -16);\n+    \/\/ Store extended SP and mirror\n+    __ sd(t0, Address(sp, 5 * wordSize));\n+    __ sd(t2, Address(sp, 4 * wordSize));\n+    \/\/ Move SP out of the way\n+    __ mv(sp, t0);\n+  } else {\n+    __ sd(sp, Address(sp, 5 * wordSize));\n+    __ sd(zr, Address(sp, 4 * wordSize));\n@@ -839,1 +830,1 @@\n-  \/\/ x30: senderSP must preserve for slow path, set SP to it on fast path\n+  \/\/ x19_sender_sp: senderSP must preserve for slow path, set SP to it on fast path\n@@ -855,2 +846,0 @@\n-  __ mv(x9, x30);   \/\/ Move senderSP to a callee-saved register\n-\n@@ -863,1 +852,1 @@\n-  __ andi(sp, x9, -16);  \/\/ done with stack\n+  __ andi(sp, x19_sender_sp, -16);  \/\/ done with stack\n@@ -1509,8 +1498,2 @@\n-  \/\/ Calculate stack limit\n-  __ ld(t0, Address(xmethod, Method::const_offset()));\n-  __ lhu(t0, Address(t0, ConstMethod::max_stack_offset()));\n-  __ add(t0, t0, frame::interpreter_frame_monitor_size() + 4);\n-  __ ld(t1, Address(fp, frame::interpreter_frame_initial_sp_offset * wordSize));\n-  __ slli(t0, t0, 3);\n-  __ sub(t0, t1, t0);\n-  __ andi(sp, t0, -16);\n+  \/\/ Restore machine SP\n+  __ restore_sp_after_call();\n@@ -1642,7 +1625,1 @@\n-  __ ld(t0, Address(xmethod, Method::const_offset()));\n-  __ lhu(t0, Address(t0, ConstMethod::max_stack_offset()));\n-  __ add(t0, t0, frame::interpreter_frame_monitor_size() + 4);\n-  __ ld(t1, Address(fp, frame::interpreter_frame_initial_sp_offset * wordSize));\n-  __ slliw(t0, t0, 3);\n-  __ sub(t0, t1, t0);\n-  __ andi(sp, t0, -16);\n+  __ restore_sp_after_call();\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":38,"deletions":61,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -3837,0 +3837,5 @@\n+\n+     __ check_extended_sp();\n+     __ sub(sp, sp, entry_size);           \/\/ make room for the monitor\n+     __ sd(sp, Address(fp, frame::interpreter_frame_extended_sp_offset * wordSize));\n+\n@@ -3842,1 +3847,0 @@\n-     __ sub(sp, sp, entry_size);           \/\/ make room for the monitor\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}