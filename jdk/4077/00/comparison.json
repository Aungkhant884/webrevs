{"files":[{"patch":"@@ -28,0 +28,2 @@\n+import java.io.PrintWriter;\n+import java.util.Locale;\n@@ -38,0 +40,2 @@\n+import jdk.javadoc.doclet.Reporter;\n+\n@@ -139,1 +143,41 @@\n-    Kind getFileKind(TypeElement type);\n+        Kind getFileKind(TypeElement type);\n+\n+        \/**\n+         * Returns a writer that can be used by a doclet to write non-diagnostic output,\n+         * or {@code null} if no such writer is available.\n+         *\n+         * @apiNote\n+         * The value may or may not be the same as that returned by {@link #getDiagnosticWriter()}.\n+         *\n+         * @implSpec\n+         * This implementation returns {@code null}.\n+         * The implementation provided by the `javadoc` tool to\n+         * {@link Doclet#init(Locale, Reporter) initialize doclets}\n+         * always returns a non-{@code null} value.\n+         *\n+         * @return the writer\n+         * @since 17\n+         *\/\n+        default PrintWriter getStandardWriter() {\n+            return null;\n+        }\n+\n+        \/**\n+         * Returns a writer that can be used by a doclet to write diagnostic output,\n+         * or {@code null} if no such writer is available.\n+         *\n+         * @apiNote\n+         * The value may or may not be the same as that returned by {@link #getStandardWriter()}.\n+         *\n+         * @implSpec\n+         * This implementation returns {@code null}.\n+         * The implementation provided by the `javadoc` tool to\n+         * {@link Doclet#init(Locale, Reporter) initialize doclets}\n+         * always returns a non-{@code null} value.\n+         *\n+         * @return the writer\n+         * @since 17\n+         *\/\n+        default PrintWriter getDiagnosticWriter() {\n+            return null;\n+        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/doclet\/DocletEnvironment.java","additions":45,"deletions":1,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.io.PrintWriter;\n@@ -40,0 +41,1 @@\n+import com.sun.tools.javac.util.Log;\n@@ -123,0 +125,10 @@\n+\n+    @Override\n+    public PrintWriter getStandardWriter() {\n+        return toolEnv.messager.getWriter(Log.WriterKind.STDOUT);\n+    }\n+\n+    @Override\n+    public PrintWriter getDiagnosticWriter() {\n+        return toolEnv.messager.getWriter(Log.WriterKind.STDERR);\n+    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/DocEnvImpl.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.io.PrintStream;\n@@ -140,4 +141,9 @@\n-    \/** The default writer for diagnostics\n-     *\/\n-    static final PrintWriter defaultOutWriter = new PrintWriter(System.out);\n-    static final PrintWriter defaultErrWriter = new PrintWriter(System.err);\n+    private static PrintWriter createPrintWriter(PrintStream ps, boolean autoflush) {\n+        return new PrintWriter(ps, autoflush) {\n+            \/\/ avoid closing system streams\n+            @Override\n+            public void close() {\n+                super.flush();\n+            }\n+        };\n+    }\n@@ -150,1 +156,4 @@\n-        this(context, programName, defaultOutWriter, defaultErrWriter);\n+        \/\/ use the current values of System.out, System,err, in case they have been redirected\n+        this(context, programName,\n+                createPrintWriter(System.out, false),\n+                createPrintWriter(System.err, true));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/Messager.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.Element;\n+\n+import com.sun.source.doctree.DocTree;\n+\n+import jdk.javadoc.doclet.Doclet;\n+import jdk.javadoc.doclet.DocletEnvironment;\n+import jdk.javadoc.doclet.Taglet;\n+\n+\/**\n+ * A taglet whose purpose is to write to the streams available in the DocletEnvironment.\n+ *\/\n+public class MyTaglet implements Taglet {\n+    private DocletEnvironment env;\n+\n+    @Override\n+    public void init(DocletEnvironment env, Doclet doclet) {\n+        this.env = env;\n+    }\n+\n+    @Override\n+    public Set<Location> getAllowedLocations() {\n+        return EnumSet.allOf(Location.class);\n+    }\n+\n+    @Override\n+    public boolean isInlineTag() {\n+        return true;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"myTaglet\";\n+    }\n+\n+    @Override\n+    public String toString(List<? extends DocTree> tags, Element element) {\n+        env.getStandardWriter().println(\"writing to the standard writer\");\n+        env.getDiagnosticWriter().println(\"writing to the diagnostic writer\");\n+        return \"<b>my-taglet<\/b>\";\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testDocEnvStreams\/MyTaglet.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug      8267204\n+ * @summary  Expose access to underlying streams in DocletEnvironment\n+ * @library  \/tools\/lib ..\/..\/lib\n+ * @modules  jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build    toolbox.ToolBox javadoc.tester.* MyTaglet\n+ * @run main TestDocEnvStreams\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestDocEnvStreams extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        TestDocEnvStreams tester = new TestDocEnvStreams();\n+        tester.runTests(m -> new Object[] { Path.of(m.getName() )});\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    \/**\n+     * Tests the entry point used by the DocumentationTool API and JavadocTester, in which\n+     * all output is written to a single specified writer.\n+     *\/\n+    @Test\n+    public void testSingleStream(Path base) throws IOException {\n+        test(base, false, Output.OUT, Output.OUT);\n+    }\n+\n+    \/**\n+     * Tests the entry point used by the launcher, in which output is written to\n+     * writers that wrap {@code System.out} and {@code System.err}.\n+     *\/\n+    @Test\n+    public void testStandardStreams(Path base) throws IOException {\n+        test(base, true, Output.STDOUT, Output.STDERR);\n+    }\n+\n+    void test(Path base, boolean useStdStreams, Output stdOut, Output stdErr) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                \/**\n+                 * First sentence.\n+                 * abc {@myTaglet} def.\n+                 *\/\n+                public class C { }\n+                \"\"\");\n+\n+        String testClasses = System.getProperty(\"test.classes\");\n+\n+        setUseStandardStreams(useStdStreams);\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-tagletpath\", testClasses,\n+                \"-taglet\", \"MyTaglet\",\n+                src.resolve(\"C.java\").toString()\n+        );\n+        checkExit(Exit.OK);\n+        checkOutput(stdOut, true,\n+                \"writing to the standard writer\");\n+        checkOutput(stdErr, true,\n+                \"writing to the diagnostic writer\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testDocEnvStreams\/TestDocEnvStreams.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -239,0 +239,1 @@\n+    private boolean useStandardStreams = false;\n@@ -354,1 +355,1 @@\n-        \/\/ This is the sole stream used by javadoc\n+        \/\/ This is the sole stream normally used by javadoc\n@@ -363,1 +364,3 @@\n-            exitCode = jdk.javadoc.internal.tool.Main.execute(args, outOut.pw);\n+            exitCode = useStandardStreams\n+                    ? jdk.javadoc.internal.tool.Main.execute(args)              \/\/ use sysOut, sysErr\n+                    : jdk.javadoc.internal.tool.Main.execute(args, outOut.pw);  \/\/ default\n@@ -419,0 +422,10 @@\n+    }\n+\n+    \/**\n+     * Sets whether to use standard output streams (stdout and stderr)\n+     * instead of a single temporary stream.\n+     * Tests using standard streams should generally take care to avoid\n+     * conflicting use of stdout and stderr.\n+     *\/\n+    public void setUseStandardStreams(boolean b) {\n+        useStandardStreams = b;\n","filename":"test\/langtools\/jdk\/javadoc\/lib\/javadoc\/tester\/JavadocTester.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"}]}