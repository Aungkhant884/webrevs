{"files":[{"patch":"@@ -707,1 +707,1 @@\n-     * @throws IllegalArgumentException if {@code elementLayout.bitAlignment() > elementLayout.bitSize()}.\n+     * @throws IllegalArgumentException if {@code elementLayout.bitSize() % elementLayout.bitAlignment() != 0}.\n@@ -712,1 +712,1 @@\n-        Utils.checkElementAlignment(elementLayout, \"Element layout alignment greater than its size\");\n+        Utils.checkElementAlignment(elementLayout, \"Element layout size is not multiple of alignment\");\n@@ -728,1 +728,1 @@\n-     * @throws IllegalArgumentException if {@code elementLayout.bitAlignment() > elementLayout.bitSize()}.\n+     * @throws IllegalArgumentException if {@code elementLayout.bitSize() % elementLayout.bitAlignment() != 0}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -462,4 +462,5 @@\n-     * @throws IllegalArgumentException if the {@code elementLayout} size is zero, or the segment size modulo the\n-     * {@code elementLayout} size is greater than zero, if this segment is\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout,\n-     * or if the {@code elementLayout} alignment is greater than its size.\n+     * @throws IllegalArgumentException if {@code elementLayout.byteSize() == 0}.\n+     * @throws IllegalArgumentException if {@code byteSize() % elementLayout.byteSize() != 0}.\n+     * @throws IllegalArgumentException if {@code elementLayout.bitSize() % elementLayout.bitAlignment() != 0}.\n+     * @throws IllegalArgumentException if this segment is <a href=\"MemorySegment.html#segment-alignment\">incompatible\n+     * with the alignment constraint<\/a> in the provided layout.\n@@ -478,4 +479,5 @@\n-     * @throws IllegalArgumentException if the {@code elementLayout} size is zero, or the segment size modulo the\n-     * {@code elementLayout} size is greater than zero, if this segment is\n-     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a> in the provided layout,\n-     * or if the {@code elementLayout} alignment is greater than its size.\n+     * @throws IllegalArgumentException if {@code elementLayout.byteSize() == 0}.\n+     * @throws IllegalArgumentException if {@code byteSize() % elementLayout.byteSize() != 0}.\n+     * @throws IllegalArgumentException if {@code elementLayout.bitSize() % elementLayout.bitAlignment() != 0}.\n+     * @throws IllegalArgumentException if this segment is <a href=\"MemorySegment.html#segment-alignment\">incompatible\n+     * with the alignment constraint<\/a> in the provided layout.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-        Utils.checkElementAlignment(elementLayout, \"Element layout alignment greater than its size\");\n+        Utils.checkElementAlignment(elementLayout, \"Element layout size is not multiple of alignment\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -177,1 +177,4 @@\n-    public static void checkElementAlignment(MemoryLayout layout, String msg) {\n+    public static void checkElementAlignment(ValueLayout layout, String msg) {\n+        \/\/ Fast-path: if both size and alignment are powers of two, we can just\n+        \/\/ check if one is greater than the other.\n+        assert isPowerOfTwo(layout.bitSize());\n@@ -183,0 +186,7 @@\n+    @ForceInline\n+    public static void checkElementAlignment(MemoryLayout layout, String msg) {\n+        if (layout.byteSize() % layout.byteAlignment() != 0) {\n+            throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n@@ -248,0 +258,4 @@\n+\n+    public static boolean isPowerOfTwo(long value) {\n+        return (value & (value - 1)) == 0L;\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.foreign.Utils;\n+\n@@ -141,2 +143,2 @@\n-        if (((value & (value - 1)) != 0L) || \/\/ value must be a power of two\n-                (value < 8)) { \/\/ value must be greater or equal to 8\n+        if (!Utils.isPowerOfTwo(value) || \/\/ value must be a power of two\n+                value < 8) { \/\/ value must be greater or equal to 8\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractLayout.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.util.ArrayList;\n@@ -295,1 +296,1 @@\n-    public void testBadSequence(MemoryLayout layout, long bitAlign) {\n+    public void testBadSequenceElementAlignmentTooBig(MemoryLayout layout, long bitAlign) {\n@@ -300,0 +301,35 @@\n+    @Test(dataProvider=\"layoutsAndAlignments\")\n+    public void testBadSequenceElementSizeNotMultipleOfAlignment(MemoryLayout layout, long bitAlign) {\n+        boolean shouldFail = layout.byteSize() % layout.byteAlignment() != 0;\n+        try {\n+            MemoryLayout.sequenceLayout(layout);\n+            assertFalse(shouldFail);\n+        } catch (IllegalArgumentException ex) {\n+            assertTrue(shouldFail);\n+        }\n+    }\n+\n+    @Test(dataProvider=\"layoutsAndAlignments\")\n+    public void testBadSpliteratorElementSizeNotMultipleOfAlignment(MemoryLayout layout, long bitAlign) {\n+        boolean shouldFail = layout.byteSize() % layout.byteAlignment() != 0;\n+        try (Arena arena = Arena.ofConfined()) {\n+            MemorySegment segment = arena.allocate(layout);\n+            segment.spliterator(layout);\n+            assertFalse(shouldFail);\n+        } catch (IllegalArgumentException ex) {\n+            assertTrue(shouldFail);\n+        }\n+    }\n+\n+    @Test(dataProvider=\"layoutsAndAlignments\")\n+    public void testBadElementsElementSizeNotMultipleOfAlignment(MemoryLayout layout, long bitAlign) {\n+        boolean shouldFail = layout.byteSize() % layout.byteAlignment() != 0;\n+        try (Arena arena = Arena.ofConfined()) {\n+            MemorySegment segment = arena.allocate(layout);\n+            segment.elements(layout);\n+            assertFalse(shouldFail);\n+        } catch (IllegalArgumentException ex) {\n+            assertTrue(shouldFail);\n+        }\n+    }\n+\n@@ -395,1 +431,1 @@\n-        Object[][] layoutsAndAlignments = new Object[basicLayouts.length * 4][];\n+        List<Object[]> layoutsAndAlignments = new ArrayList<>();\n@@ -399,1 +435,1 @@\n-            layoutsAndAlignments[i++] = new Object[] { l, l.bitAlignment() };\n+            layoutsAndAlignments.add(new Object[] { l, l.bitAlignment() });\n@@ -403,1 +439,1 @@\n-            layoutsAndAlignments[i++] = new Object[] { MemoryLayout.sequenceLayout(4, l), l.bitAlignment() };\n+            layoutsAndAlignments.add(new Object[] { MemoryLayout.sequenceLayout(4, l), l.bitAlignment() });\n@@ -406,2 +442,6 @@\n-        for (MemoryLayout l : basicLayouts) {\n-            layoutsAndAlignments[i++] = new Object[] { MemoryLayout.structLayout(l), l.bitAlignment() };\n+        for (MemoryLayout l1 : basicLayouts) {\n+            for (MemoryLayout l2 : basicLayouts) {\n+                if (l1.byteSize() % l2.byteAlignment() != 0) continue; \/\/ second element is not aligned, skip\n+                long align = Math.max(l1.bitAlignment(), l2.bitAlignment());\n+                layoutsAndAlignments.add(new Object[]{MemoryLayout.structLayout(l1, l2), align});\n+            }\n@@ -410,2 +450,5 @@\n-        for (MemoryLayout l : basicLayouts) {\n-            layoutsAndAlignments[i++] = new Object[] { MemoryLayout.unionLayout(l), l.bitAlignment() };\n+        for (MemoryLayout l1 : basicLayouts) {\n+            for (MemoryLayout l2 : basicLayouts) {\n+                long align = Math.max(l1.bitAlignment(), l2.bitAlignment());\n+                layoutsAndAlignments.add(new Object[]{MemoryLayout.unionLayout(l1, l2), align});\n+            }\n@@ -413,1 +456,1 @@\n-        return layoutsAndAlignments;\n+        return layoutsAndAlignments.toArray(Object[][]::new);\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":52,"deletions":9,"binary":false,"changes":61,"status":"modified"}]}