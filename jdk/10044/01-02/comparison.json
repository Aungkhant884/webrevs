{"files":[{"patch":"@@ -66,6 +66,4 @@\n-    \/\/ it many times. If there is a significant number of hash algorithms\n-    \/\/ used in the future, consider extending this cache to full\n-    \/\/ ConcurrentMap<String,byte[]>.\n-    \/\/\n-    \/\/ For correctness under concurrent updates, we need to wrap the fields\n-    \/\/ updated at the same time with the final wrapper.\n+    \/\/ it many times. For correctness under concurrent updates, we need to\n+    \/\/ wrap the fields updated at the same time with a record, which carries\n+    \/\/ the implicit final-field semantics for its members.\n+    private record CachedHash(byte[] hash, String algorithm) {}\n@@ -73,8 +71,0 @@\n-    private final class CachedHash {\n-        public CachedHash(byte[] hash, String algorithm) {\n-            this.hash = hash;\n-            this.algorithm = algorithm;\n-        }\n-        final byte[] hash;\n-        final String algorithm;\n-    }\n@@ -157,2 +147,2 @@\n-        if (ch != null && ch.algorithm.equals(algorithm)) {\n-            return ch.hash;\n+        if (ch != null && ch.algorithm().equals(algorithm)) {\n+            return ch.hash();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleReferenceImpl.java","additions":6,"deletions":16,"binary":false,"changes":22,"status":"modified"}]}