{"files":[{"patch":"@@ -59,1 +59,2 @@\n- * @compile --enable-preview -source ${jdk.version} CleanerTest.java\n+ * @enablePreview\n+ * @compile -source ${jdk.version} CleanerTest.java\n@@ -61,1 +62,1 @@\n- * @run testng\/othervm --enable-preview\n+ * @run testng\/othervm\n@@ -105,1 +106,1 @@\n-        checkCleaned(s.getSemaphore(), true, \"Cleaner was cleaned:\");\n+        checkCleaned(s.getSemaphore(), true, \"Cleaner was cleaned\");\n@@ -140,1 +141,1 @@\n-        checkCleaned(s.getSemaphore(), true, \"Cleaner was cleaned:\");\n+        checkCleaned(s.getSemaphore(), true, \"Cleaner was cleaned\");\n@@ -222,1 +223,1 @@\n-                \"Cleanable was cleaned:\");\n+                \"Cleanable was cleaned\");\n@@ -224,1 +225,1 @@\n-                \"The reference to the Cleanable was freed:\");\n+                \"The reference to the Cleanable was freed\");\n@@ -283,2 +284,2 @@\n-     * @param expectCleaned true if cleaning should occur\n-     * @param msg a message to explain the error\n+     * @param expectCleaned true if cleaning the function should have been run, otherwise not run\n+     * @param msg a message describing the cleaning function expected to be run or not run\n@@ -554,1 +555,1 @@\n-        checkCleaned(s1, true, \"reference was cleaned:\");\n+        checkCleaned(s1, true, \"reference was cleaned\");\n@@ -569,1 +570,1 @@\n-                \"Object was cleaned using CleanerFactory.cleaner():\");\n+                \"Object cleaned using internal CleanerFactory.cleaner()\");\n","filename":"test\/jdk\/java\/lang\/ref\/CleanerTest.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"}]}