{"files":[{"patch":"@@ -28,2 +28,0 @@\n-import java.lang.ref.SoftReference;\n-import java.lang.ref.WeakReference;\n@@ -31,1 +29,0 @@\n-import java.util.concurrent.ConcurrentHashMap;\n@@ -62,1 +59,2 @@\n- * @compile --enable-preview -source ${jdk.version} CleanerTest.java\n+ * @enablePreview\n+ * @compile -source ${jdk.version} CleanerTest.java\n@@ -64,1 +62,1 @@\n- * @run testng\/othervm --enable-preview\n+ * @run testng\/othervm\n@@ -108,1 +106,1 @@\n-        checkCleaned(s.getSemaphore(), true, \"Cleaner was cleaned:\");\n+        checkCleaned(s.getSemaphore(), true, \"Cleaner was cleaned\");\n@@ -143,1 +141,1 @@\n-        checkCleaned(s.getSemaphore(), true, \"Cleaner was cleaned:\");\n+        checkCleaned(s.getSemaphore(), true, \"Cleaner was cleaned\");\n@@ -225,1 +223,1 @@\n-                \"Cleanable was cleaned:\");\n+                \"Cleanable was cleaned\");\n@@ -227,1 +225,1 @@\n-                \"The reference to the Cleanable was freed:\");\n+                \"The reference to the Cleanable was freed\");\n@@ -286,2 +284,2 @@\n-     * @param expectCleaned true if cleaning should occur\n-     * @param msg a message to explain the error\n+     * @param expectCleaned true if cleaning the function should have been run, otherwise not run\n+     * @param msg a message describing the cleaning function expected to be run or not run\n@@ -297,1 +295,1 @@\n-                if (semaphore.tryAcquire(Utils.adjustTimeout(10L), TimeUnit.MILLISECONDS)) {\n+                if (semaphore.tryAcquire(Utils.adjustTimeout(200L), TimeUnit.MILLISECONDS)) {\n@@ -299,1 +297,2 @@\n-                    Assert.assertEquals(true, expectCleaned, msg);\n+                    if (!expectCleaned)\n+                        Assert.fail(\"Should not have been run: \" +  msg);\n@@ -307,1 +306,2 @@\n-        Assert.assertEquals(false, expectCleaned, msg);\n+        if (expectCleaned)\n+            Assert.fail(\"Should have been run: \" + msg);\n@@ -555,1 +555,1 @@\n-        checkCleaned(s1, true, \"reference was cleaned:\");\n+        checkCleaned(s1, true, \"reference was cleaned\");\n@@ -570,1 +570,1 @@\n-                \"Object was cleaned using CleanerFactor.cleaner():\");\n+                \"Object cleaned using internal CleanerFactory.cleaner()\");\n","filename":"test\/jdk\/java\/lang\/ref\/CleanerTest.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"}]}