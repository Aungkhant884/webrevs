{"files":[{"patch":"@@ -354,0 +354,2 @@\n+            FileSystemView fsv = getFileChooser().getFileSystemView();\n+            getChangeToParentDirectoryAction().setEnabled(!fsv.isFileSystemRoot(currentDirectory));\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/GTKFileChooserUI.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -593,0 +593,1 @@\n+                 \"BACK_SPACE\", \"Go Up\",\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/GTKLookAndFeel.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,179 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8078471\n+ * @key headful\n+ * @requires (os.family == \"linux\")\n+ * @summary Verifies if filechooser current directory changed to parent directory on\n+ * BACKSPACE key press from keyboard except root directory.\n+ * @run main TestBackSpaceAction\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.event.HierarchyEvent;\n+import java.awt.event.HierarchyListener;\n+import java.awt.event.KeyEvent;\n+import java.awt.Robot;\n+import java.io.File;\n+import javax.swing.JFileChooser;\n+import javax.swing.JPanel;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+\n+public class TestBackSpaceAction {\n+    private static JFrame frame;\n+    private static JFileChooser fileChooser;\n+    private static Robot robot;\n+    private static File testDir;\n+    private static File subDir;\n+    private static File prevDir;\n+    private static File crntDir;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoDelay(100);\n+        try {\n+            \/\/ create test directory\n+            String tmpDir = System.getProperty(\"java.io.tmpdir\");\n+            if (tmpDir.length() == 0) { \/\/'java.io.tmpdir' isn't guaranteed to be defined\n+                tmpDir = System.getProperty(\"user.home\");\n+            }\n+            testDir = new File(tmpDir, \"testDir\");\n+            testDir.mkdir();\n+            testDir.deleteOnExit();\n+\n+            \/\/ create sub directory inside test directory\n+            subDir = new File(testDir, \"subDir\");\n+            subDir.mkdir();\n+            subDir.deleteOnExit();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+\n+        for (UIManager.LookAndFeelInfo laf :\n+                        UIManager.getInstalledLookAndFeels()) {\n+            if (!laf.getClassName().contains(\"MotifLookAndFeel\")) {\n+                System.out.println(\"Testing LAF: \" + laf.getClassName());\n+                SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n+                doTesting(laf);\n+            }\n+        }\n+    }\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported LAF: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException\n+                 | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void doTesting(UIManager.LookAndFeelInfo laf) throws Exception{\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                createAndShowUI();\n+            });\n+            boolean passed_1 = false;\n+            boolean passed_2 = false;\n+            robot.waitForIdle();\n+            robot.delay(100);\n+\n+            \/\/ check backspace key at subDir level\n+            clickBackSpace();\n+            if (prevDir != crntDir) {\n+                passed_1 = true;\n+            }\n+\n+            \/\/ check if backspace key changes directory at root level\n+            while(!fileChooser.getFileSystemView().isFileSystemRoot(prevDir)) {\n+                clickBackSpace();\n+                if (prevDir == crntDir) {\n+                    passed_2 = true;\n+                    break;\n+                }\n+            }\n+\n+            if (passed_1 && passed_2) {\n+                System.out.println(\"Passed\");\n+            } else {\n+                throw new RuntimeException(\"BackSpace keyboard button does not\" +\n+                        \"lead to parent directory for LAF: \" + laf.getClassName());\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        frame = new JFrame(\"Test File Chooser Backspace Action\");\n+        frame.getContentPane().setLayout(new BorderLayout());\n+        fileChooser = new JFileChooser(subDir);\n+        fileChooser.setControlButtonsAreShown(false);\n+        fileChooser.addHierarchyListener(new HierarchyListener(){\n+            public void hierarchyChanged(HierarchyEvent he)\n+            {\n+                grabFocusForComboBox(fileChooser.getComponents());\n+            }\n+        });\n+        frame.getContentPane().add(fileChooser, BorderLayout.CENTER);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void grabFocusForComboBox(Component[] comp)\n+    {\n+        for (Component c:comp) {\n+            if (c instanceof JComboBox) {\n+                JComboBox cb = (JComboBox)c;\n+                cb.requestFocusInWindow();\n+                break;\n+            } else if (c instanceof JPanel) {\n+                JPanel jp = (JPanel)c;\n+                grabFocusForComboBox(jp.getComponents());\n+            }\n+        }\n+    }\n+\n+    private static void clickBackSpace() {\n+        prevDir = fileChooser.getCurrentDirectory();\n+        robot.keyPress(KeyEvent.VK_BACK_SPACE);\n+        robot.keyRelease(KeyEvent.VK_BACK_SPACE);\n+        crntDir = fileChooser.getCurrentDirectory();\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/java\/swing\/plaf\/gtk\/TestBackSpaceAction.java","additions":179,"deletions":0,"binary":false,"changes":179,"status":"added"}]}