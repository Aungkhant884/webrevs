{"files":[{"patch":"@@ -173,1 +173,1 @@\n-  \/\/ Returns ResourceArea-allocated name of loader, NULL if none is set\n+  \/\/ Returns ResourceArea-allocated name of loader, \"\" if none is set\n@@ -176,1 +176,1 @@\n-    return name_oop != NULL ? java_lang_String::as_utf8_string(name_oop) : NULL;\n+    return name_oop != NULL ? java_lang_String::as_utf8_string(name_oop) : \"\";\n@@ -187,1 +187,1 @@\n-  void print_with_childs(outputStream* st, BranchTracker& branchtracker,\n+  void print_with_child_nodes(outputStream* st, BranchTracker& branchtracker,\n@@ -206,1 +206,1 @@\n-      if (the_loader_name != NULL) {\n+      if (the_loader_name[0] != '\\0') {\n@@ -307,1 +307,1 @@\n-      c->print_with_childs(st, branchtracker, print_classes, verbose);\n+      c->print_with_child_nodes(st, branchtracker, print_classes, verbose);\n@@ -316,1 +316,1 @@\n-  bool can_fold_into(LoaderTreeNode* target_node) const {\n+  bool can_fold_into(const LoaderTreeNode* target_node) const {\n@@ -318,3 +318,13 @@\n-    return (loader_klass() != NULL) && (loader_klass() == target_node->loader_klass()) &&\n-           ((loader_name_oop() == NULL && target_node->loader_name_oop() == NULL) ||\n-             (::strcmp(loader_name(), target_node->loader_name()) == 0));\n+\n+    \/\/ Must have the same non-null klass\n+    const Klass* k = loader_klass();\n+    if (k == NULL || k != target_node->loader_klass()) {\n+      return false;\n+    }\n+\n+    \/\/ Must have the same loader name, or none\n+    if (::strcmp(loader_name(), target_node->loader_name()) != 0) {\n+      return false;\n+    }\n+\n+    return true;\n@@ -417,1 +427,1 @@\n-    print_with_childs(st, bwt, print_classes, print_add_info);\n+    print_with_child_nodes(st, bwt, print_classes, print_add_info);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderHierarchyDCmd.cpp","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"}]}