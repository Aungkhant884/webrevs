{"files":[{"patch":"@@ -40,0 +40,1 @@\n+\/\/ HierarchicalFieldStream allows to also iterate over fields of supertypes.\n@@ -138,1 +139,1 @@\n-\/\/ Iterate over only the internal fields\n+\/\/ Iterate over only the Java fields\n@@ -182,0 +183,100 @@\n+\/\/ Iterate over fields including the ones declared in supertypes\n+template<typename FieldStreamType>\n+class HierarchicalFieldStream : public StackObj  {\n+ private:\n+  const Array<InstanceKlass*>* _interfaces;\n+  InstanceKlass* _next_klass; \/\/ null indicates no more type to visit\n+  FieldStreamType _current_stream;\n+  int _interface_index;\n+\n+  void prepare() {\n+    _next_klass = next_klass_with_fields();\n+    \/\/ special case: the base klass has no fields. If any supertype has any fields, use that directly.\n+    \/\/ if no such supertype exists, done() will return false already.\n+    next_stream_if_done();\n+  }\n+\n+  InstanceKlass* next_klass_with_fields() {\n+    assert(_next_klass != nullptr, \"reached end of types already\");\n+    InstanceKlass* result = _next_klass;\n+    do  {\n+      if (!result->is_interface() && result->super() != nullptr) {\n+        result = result->java_super();\n+      } else if (_interface_index > 0) {\n+        result = _interfaces->at(--_interface_index);\n+      } else {\n+        return nullptr; \/\/ we did not find any more supertypes with fields\n+      }\n+    } while (FieldStreamType(result).done());\n+    return result;\n+  }\n+\n+  \/\/ sets _current_stream to the next if the current is done and any more is available\n+  void next_stream_if_done() {\n+    if (_next_klass != nullptr && _current_stream.done()) {\n+      _current_stream = FieldStreamType(_next_klass);\n+      assert(!_current_stream.done(), \"created empty stream\");\n+      _next_klass = next_klass_with_fields();\n+    }\n+  }\n+\n+ public:\n+  HierarchicalFieldStream(InstanceKlass* klass) :\n+    _interfaces(klass->transitive_interfaces()),\n+    _next_klass(klass),\n+    _current_stream(FieldStreamType(klass)),\n+    _interface_index(_interfaces->length()) {\n+      prepare();\n+  }\n+\n+  void next() {\n+    _current_stream.next();\n+    next_stream_if_done();\n+  }\n+\n+  bool done() const { return _next_klass == nullptr && _current_stream.done(); }\n+\n+  \/\/ bridge functions from FieldStreamBase\n+\n+  AccessFlags access_flags() const {\n+    return _current_stream.access_flags();\n+  }\n+\n+  FieldInfo::FieldFlags field_flags() const {\n+    return _current_stream.field_flags();\n+  }\n+\n+  Symbol* name() const {\n+    return _current_stream.name();\n+  }\n+\n+  Symbol* signature() const {\n+    return _current_stream.signature();\n+  }\n+\n+  Symbol* generic_signature() const {\n+    return _current_stream.generic_signature();\n+  }\n+\n+  int offset() const {\n+    return _current_stream.offset();\n+  }\n+\n+  bool is_contended() const {\n+    return _current_stream.is_contended();\n+  }\n+\n+  int contended_group() const {\n+    return _current_stream.contended_group();\n+  }\n+\n+  FieldInfo to_FieldInfo() {\n+    return _current_stream.to_FieldInfo();\n+  }\n+\n+  fieldDescriptor& field_descriptor() const {\n+    return _current_stream.field_descriptor();\n+  }\n+\n+};\n+\n","filename":"src\/hotspot\/share\/oops\/fieldStreams.hpp","additions":102,"deletions":1,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"oops\/fieldStreams.inline.hpp\"\n@@ -52,1 +53,0 @@\n-#include \"runtime\/reflectionUtils.hpp\"\n@@ -937,1 +937,1 @@\n-  for (FieldStream fld(ik, false, false); !fld.eos(); fld.next()) {\n+  for (HierarchicalFieldStream<JavaFieldStream> fld(ik); !fld.done(); fld.next()) {\n@@ -949,1 +949,1 @@\n-  for (FieldStream fldc(ik, true, true); !fldc.eos(); fldc.next()) {\n+  for (JavaFieldStream fldc(ik); !fldc.done(); fldc.next()) {\n@@ -983,1 +983,1 @@\n-  for (FieldStream fld(ik, true, true); !fld.eos(); fld.next()) {\n+  for (JavaFieldStream fld(ik); !fld.done(); fld.next()) {\n@@ -1017,1 +1017,1 @@\n-  for (FieldStream fld(ik, false, false); !fld.eos(); fld.next()) {\n+  for (HierarchicalFieldStream<JavaFieldStream> fld(ik); !fld.done(); fld.next()) {\n@@ -1029,1 +1029,1 @@\n-  for (FieldStream fldc(ik, true, true); !fldc.eos(); fldc.next()) {\n+  for (JavaFieldStream fldc(ik); !fldc.done(); fldc.next()) {\n@@ -1041,1 +1041,1 @@\n-  for (FieldStream fld(ik, true, true); !fld.eos(); fld.next()) {\n+  for (JavaFieldStream fld(ik); !fld.done(); fld.next()) {\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}