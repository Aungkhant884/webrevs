{"files":[{"patch":"@@ -35,1 +35,0 @@\n-\n@@ -54,0 +53,4 @@\n+        NoFields2 nf = new NoFields2();\n+        NoParentFields npf = new NoParentFields();\n+        OnlyParentFields opf = new OnlyParentFields();\n+        DirectParentNoFields dpnf = new DirectParentNoFields();\n@@ -56,0 +59,4 @@\n+        Reference.reachabilityFence(nf);\n+        Reference.reachabilityFence(npf);\n+        Reference.reachabilityFence(opf);\n+        Reference.reachabilityFence(dpnf);\n@@ -71,0 +78,26 @@\n+\n+    \/\/ no fields:\n+    interface I1 {\n+    }\n+    static class NoFields1 {\n+    }\n+    static class NoFields2 extends NoFields1 implements I1 {\n+    }\n+\n+    \/\/ no parent fields\n+    static class NoParentFields extends NoFields1 implements I1 {\n+        int i1 = 1;\n+        int i2 = 2;\n+    }\n+\n+    \/\/ only parent fields\n+    static class Parent1 {\n+        int i3 = 3;\n+    }\n+    static class OnlyParentFields extends Parent1 {\n+    }\n+\n+    \/\/ in between parent with no fields\n+    static class DirectParentNoFields extends OnlyParentFields {\n+        int i = 17;\n+    }\n@@ -123,23 +156,20 @@\n-            Iterable<JavaHeapObject> objects = snapshot.getThings()::asIterator;\n-            for (JavaHeapObject heapObj : objects) {\n-                if (heapObj instanceof JavaObject javaObj) {\n-                    if (javaObj.getClazz().getName().endsWith(\"$B\")) {\n-                        List<JavaThing> fields = Arrays.asList(javaObj.getFields());\n-                        \/\/ B has 2 instance fields, A has 2 instance fields\n-                        Asserts.assertEquals(fields.size(), 4);\n-                        \/\/ JavaObject reverses the order of fields, so fields of B are at the end.\n-                        \/\/ Order is only specified for supertypes, so we check if values are *anywhere* in their range\n-                        \/\/ by using the toString output.\n-                        String asString = fields.subList(2, 4).toString();\n-                        Asserts.assertTrue(asString.contains(\"0.5\"), \"value for field B.s not found\");\n-                        Asserts.assertTrue(asString.contains(\"7\"), \"value for field B.a not found\");\n-                        asString = fields.subList(0, 2).toString();\n-                        Asserts.assertTrue(asString.contains(\"3\"), \"value for field A.a not found\");\n-                        Asserts.assertTrue(asString.contains(\"Field\"), \"value for field A.s not found\");\n-                        System.out.println(fields);\n-                        return; \/\/ we found our object\n-                    }\n-                }\n-            }\n-            \/\/ we didn't find our object\n-            Asserts.fail(\"Object of type B not found.\");\n+            List<JavaThing> bFields = getFields(snapshot, FieldsInInstanceTarg.B.class);\n+            \/\/ B has 2 instance fields, A has 2 instance fields\n+            Asserts.assertEquals(bFields.size(), 4);\n+            \/\/ JavaObject reverses the order of fields, so fields of B are at the end.\n+            \/\/ Order is only specified for supertypes, so we check if values are *anywhere* in their range\n+            \/\/ by using the toString output.\n+            String asString = bFields.subList(2, 4).toString();\n+            Asserts.assertTrue(asString.contains(\"0.5\"), \"value for field B.s not found\");\n+            Asserts.assertTrue(asString.contains(\"7\"), \"value for field B.a not found\");\n+            asString = bFields.subList(0, 2).toString();\n+            Asserts.assertTrue(asString.contains(\"3\"), \"value for field A.a not found\");\n+            Asserts.assertTrue(asString.contains(\"Field\"), \"value for field A.s not found\");\n+\n+            Asserts.assertEquals(getFields(snapshot, FieldsInInstanceTarg.NoFields2.class).size(), 0);\n+\n+            Asserts.assertEquals(getFields(snapshot, FieldsInInstanceTarg.NoParentFields.class).size(), 2);\n+\n+            Asserts.assertEquals(getFields(snapshot, FieldsInInstanceTarg.OnlyParentFields.class).size(), 1);\n+\n+            Asserts.assertEquals(getFields(snapshot, FieldsInInstanceTarg.DirectParentNoFields.class).size(), 2);\n@@ -149,0 +179,7 @@\n+    private static List<JavaThing> getFields(Snapshot snapshot, Class<?> clazz) {\n+        JavaObject javaObject = (JavaObject) snapshot.findClass(clazz.getName()).getInstances(false).nextElement();\n+        List<JavaThing> fields = Arrays.asList(javaObject.getFields());\n+        log(\"Fields for \" + clazz + \" (including superclasses): \" + fields);\n+        return fields;\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/HeapDump\/FieldsInInstanceTest.java","additions":61,"deletions":24,"binary":false,"changes":85,"status":"modified"}]}