{"files":[{"patch":"@@ -910,0 +910,1 @@\n+                       commonBinding.isUnnamedVariable() == currentBinding.isUnnamedVariable() &&\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/**\n+ * @test\n+ * @bug 8317048\n+ * @summary VerifyError with unnamed pattern variable and more than one components\n+ * @enablePreview\n+ * @compile T8317048.java\n+ * @run main T8317048\n+ *\/\n+\n+public class T8317048 {\n+    record Tuple<T1, T2>(T1 first, T2 second) {}\n+    record R1<T>(Integer value) implements R<T> {}\n+    record R2<T>(Integer value) implements R<T> {}\n+    sealed interface R<T> {}\n+\n+    static <T1 extends Comparable, T2 extends Comparable> int meth1(Tuple<R<T1>, R<T2>> o) {\n+        return switch (o) {\n+            case Tuple<R<T1>, R<T2>>(R1<T1> _, R1<T2> _) -> -1;\n+            case Tuple<R<T1>, R<T2>>(R1<T1> _, R2<T2> _) -> -1;\n+            case Tuple<R<T1>, R<T2>>(R2<T1> _, R1<T2> _) -> -1;\n+            case Tuple<R<T1>, R<T2>>(R2<T1> fst, R2<T2> snd) -> fst.value().compareTo(snd.value());\n+        };\n+    }\n+\n+    static <T1 extends Comparable, T2 extends Comparable> int meth2(Tuple<R<T1>, R<T2>> o) {\n+        return switch (o) {\n+            case Tuple<R<T1>, R<T2>>(R1<T1> _, R1<T2> _) -> -1;\n+            case Tuple<R<T1>, R<T2>>(R1<T1> fst, R2<T2> snd) -> fst.value().compareTo(snd.value());\n+            case Tuple<R<T1>, R<T2>>(R2<T1> _, R1<T2> _) -> -1;\n+            case Tuple<R<T1>, R<T2>>(R2<T1> fst, R2<T2> snd) -> fst.value().compareTo(snd.value());\n+        };\n+    }\n+\n+    static <T1 extends Comparable, T2 extends Comparable> int meth3(Tuple<R<T1>, R<T2>> o) {\n+        return switch (o) {\n+            case Tuple<R<T1>, R<T2>>(R1<T1> fst, R1<T2> _) -> fst.value();\n+            case Tuple<R<T1>, R<T2>>(R1<T1> _, R2<T2> snd) -> snd.value();\n+            case Tuple<R<T1>, R<T2>>(R2<T1> _, R1<T2> _) -> -1;\n+            case Tuple<R<T1>, R<T2>>(R2<T1> fst, R2<T2> snd) -> fst.value().compareTo(snd.value());\n+        };\n+    }\n+\n+    static <T1 extends Comparable, T2 extends Comparable> int meth4(Tuple<R<T1>, R<T2>> o) {\n+        return switch (o) {\n+            case Tuple<R<T1>, R<T2>>(R1<T1> _, R1<T2> _) -> -1;\n+            case Tuple<R<T1>, R<T2>>(R1<T1> _, R2<T2> _) -> -1;\n+            case Tuple<R<T1>, R<T2>>(R2<T1> fst, R2<T2> snd) -> fst.value().compareTo(snd.value());\n+            case Tuple<R<T1>, R<T2>>(R2<T1> _, R1<T2> _) -> -1;\n+        };\n+    }\n+\n+    public static void main(String[] args) {\n+        assertEquals(1, meth1(new Tuple<R<Integer>, R<Integer>>(new R2<>(2), new R2<>(1))));\n+        assertEquals(1, meth2(new Tuple<R<Integer>, R<Integer>>(new R1<>(2), new R2<>(1))));\n+        assertEquals(0, meth2(new Tuple<R<Integer>, R<Integer>>(new R2<>(1), new R2<>(1))));\n+        assertEquals(2, meth3(new Tuple<R<Integer>, R<Integer>>(new R1<>(2), new R1<>(1))));\n+        assertEquals(3, meth3(new Tuple<R<Integer>, R<Integer>>(new R1<>(2), new R2<>(3))));\n+        assertEquals(1, meth4(new Tuple<R<Integer>, R<Integer>>(new R2<>(2), new R2<>(1))));\n+    }\n+\n+    static void assertEquals(int expected, int actual) {\n+        if (expected != actual) {\n+            throw new AssertionError(\"Expected: \" + expected + \", but got: \" + actual);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/patterns\/T8317048.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"}]}