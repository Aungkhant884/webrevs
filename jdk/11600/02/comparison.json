{"files":[{"patch":"@@ -31,1 +31,1 @@\n-import static sun.nio.fs.BsdNativeDispatcher.setattrlist;\n+import static sun.nio.fs.BsdNativeDispatcher.*;\n@@ -35,1 +35,1 @@\n-    \/\/ Use setattrlist(2) system call which can set creation, modification,\n+    \/\/ Use fsetattrlist(2) system call which can set creation, modification,\n@@ -52,17 +52,1 @@\n-        int commonattr = 0;\n-        long modValue = 0L;\n-        if (lastModifiedTime != null) {\n-            modValue = lastModifiedTime.to(TimeUnit.NANOSECONDS);\n-            commonattr |= UnixConstants.ATTR_CMN_MODTIME;\n-        }\n-        long accValue = 0L;\n-        if (lastAccessTime != null) {\n-            accValue = lastAccessTime.to(TimeUnit.NANOSECONDS);\n-            commonattr |= UnixConstants.ATTR_CMN_ACCTIME;\n-        }\n-        long createValue = 0L;\n-        if (createTime != null) {\n-            createValue = createTime.to(TimeUnit.NANOSECONDS);\n-            commonattr |= UnixConstants.ATTR_CMN_CRTIME;\n-        }\n-\n+        int fd = -1;\n@@ -70,4 +54,63 @@\n-            setattrlist(path, commonattr, modValue, accValue, createValue,\n-                        followLinks ?  0 : UnixConstants.FSOPT_NOFOLLOW);\n-        } catch (UnixException x) {\n-            x.rethrowAsIOException(path);\n+            try {\n+                fd = path.openForAttributeAccess(followLinks);\n+            } catch (UnixException x) {\n+                x.rethrowAsIOException(path);\n+            }\n+\n+            \/\/ not all volumes support fsetattrlist(2), so set the last\n+            \/\/ modified and last access times using the Unix implementation\n+            if (lastModifiedTime != null || lastAccessTime != null) {\n+                \/\/ if not changing both attributes then need existing attributes\n+                if (lastModifiedTime == null || lastAccessTime == null) {\n+                    try {\n+                        UnixFileAttributes attrs = UnixFileAttributes.get(fd);\n+                        if (lastModifiedTime == null)\n+                            lastModifiedTime = attrs.lastModifiedTime();\n+                        if (lastAccessTime == null)\n+                            lastAccessTime = attrs.lastAccessTime();\n+                    } catch (UnixException x) {\n+                        x.rethrowAsIOException(path);\n+                    }\n+                }\n+\n+                \/\/ update times\n+                long modValue = lastModifiedTime.to(TimeUnit.NANOSECONDS);\n+                long accessValue= lastAccessTime.to(TimeUnit.NANOSECONDS);\n+\n+                boolean retry = false;\n+                try {\n+                    futimens(fd, accessValue, modValue);\n+                } catch (UnixException x) {\n+                    \/\/ if futimens fails with EINVAL and one\/both of the times is\n+                    \/\/ negative then we adjust the value to the epoch and retry.\n+                    if (x.errno() == UnixConstants.EINVAL &&\n+                        (modValue < 0L || accessValue < 0L)) {\n+                        retry = true;\n+                    } else {\n+                        x.rethrowAsIOException(path);\n+                    }\n+                }\n+                if (retry) {\n+                    if (modValue < 0L) modValue = 0L;\n+                    if (accessValue < 0L) accessValue= 0L;\n+                    try {\n+                        futimens(fd, accessValue, modValue);\n+                    } catch (UnixException x) {\n+                        x.rethrowAsIOException(path);\n+                    }\n+                }\n+            }\n+\n+            \/\/ set the creation time using fsetattrlist\n+            if (createTime != null) {\n+                long createValue = createTime.to(TimeUnit.NANOSECONDS);\n+                int commonattr = UnixConstants.ATTR_CMN_CRTIME;\n+                try {\n+                    fsetattrlist(fd, commonattr, 0L, 0L, createValue,\n+                                 followLinks ?  0 : UnixConstants.FSOPT_NOFOLLOW);\n+                } catch (UnixException x) {\n+                    x.rethrowAsIOException(path);\n+                }\n+            }\n+        } finally {\n+            close(fd, e -> null);\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileAttributeViews.java","additions":66,"deletions":23,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -85,2 +85,2 @@\n-     * setattrlist(const char* path, struct attrlist* attrList, void* attrBuf,\n-     *             size_t attrBufSize, unsigned long options)\n+     * fsetattrlist(int fd, struct attrlist* attrList, void* attrBuf,\n+     *              size_t attrBufSize, unsigned long options)\n@@ -88,2 +88,2 @@\n-    static void setattrlist(UnixPath path, int commonattr, long modTime,\n-                            long accTime, long createTime, long options)\n+    static void fsetattrlist(int fd, int commonattr, long modTime,\n+                             long accTime, long createTime, long options)\n@@ -92,7 +92,6 @@\n-        try (NativeBuffer buffer = copyToNativeBuffer(path)) {\n-            long comp = Blocker.begin();\n-            try {\n-                setattrlist0(buffer.address(), commonattr, modTime, accTime,\n-                             createTime, options);\n-            } finally {\n-                Blocker.end(comp);\n+        long comp = Blocker.begin();\n+        try {\n+            fsetattrlist0(fd, commonattr, modTime, accTime,\n+                          createTime, options);\n+        } finally {\n+            Blocker.end(comp);\n@@ -100,1 +99,0 @@\n-        }\n@@ -102,3 +100,3 @@\n-    private static native void setattrlist0(long pathAddress, int commonattr,\n-                                            long modTime, long accTime,\n-                                            long createTime, long options)\n+    private static native void fsetattrlist0(int fd, int commonattr,\n+                                             long modTime, long accTime,\n+                                             long createTime, long options)\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdNativeDispatcher.java","additions":13,"deletions":15,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -247,2 +247,2 @@\n-Java_sun_nio_fs_BsdNativeDispatcher_setattrlist0(JNIEnv* env, jclass this,\n-    jlong pathAddress, int commonattr, jlong modTime, jlong accTime,\n+Java_sun_nio_fs_BsdNativeDispatcher_fsetattrlist0(JNIEnv* env, jclass this,\n+    jint fd, int commonattr, jlong modTime, jlong accTime,\n@@ -251,1 +251,0 @@\n-    const char* path = (const char*)jlong_to_ptr(pathAddress);\n@@ -282,1 +281,1 @@\n-    if (setattrlist(path, &attrList, (void*)buf, count*attrsize, options) != 0) {\n+    if (fsetattrlist(fd, &attrList, (void*)buf, count*attrsize, options) != 0) {\n","filename":"src\/java.base\/macosx\/native\/libnio\/fs\/BsdNativeDispatcher.c","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -137,1 +137,1 @@\n-     * Converting from finer to coarser granularities result in precision loss.\n+     * Converting from finer to coarser granularities results in precision loss.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/attribute\/BasicFileAttributeView.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-    \/\/ flags used with setattrlist\n+    \/\/ flags used with fsetattrlist\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixConstants.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}