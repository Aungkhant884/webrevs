{"files":[{"patch":"@@ -787,1 +787,1 @@\n-void LIR_Assembler::reg2mem(LIR_Opr src, LIR_Opr dest, BasicType type, LIR_PatchCode patch_code, CodeEmitInfo* info, bool pop_fpu_stack, bool wide, bool \/* unaligned *\/) {\n+void LIR_Assembler::reg2mem(LIR_Opr src, LIR_Opr dest, BasicType type, LIR_PatchCode patch_code, CodeEmitInfo* info, bool pop_fpu_stack, bool wide) {\n@@ -944,1 +944,1 @@\n-void LIR_Assembler::mem2reg(LIR_Opr src, LIR_Opr dest, BasicType type, LIR_PatchCode patch_code, CodeEmitInfo* info, bool wide, bool \/* unaligned *\/) {\n+void LIR_Assembler::mem2reg(LIR_Opr src, LIR_Opr dest, BasicType type, LIR_PatchCode patch_code, CodeEmitInfo* info, bool wide) {\n@@ -2910,1 +2910,1 @@\n-            \/*pop_fpu_stack*\/false, \/*unaligned*\/false, \/*wide*\/false);\n+            \/*pop_fpu_stack*\/false, \/*wide*\/false);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -346,1 +346,1 @@\n-    ce->mem2reg(stub->addr(), stub->pre_val(), T_OBJECT, stub->patch_code(), stub->info(), false \/*wide*\/, false \/*unaligned*\/);\n+    ce->mem2reg(stub->addr(), stub->pre_val(), T_OBJECT, stub->patch_code(), stub->info(), false \/*wide*\/);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/g1\/g1BarrierSetAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -616,1 +616,1 @@\n-    ce->mem2reg(stub->addr(), stub->pre_val(), T_OBJECT, stub->patch_code(), stub->info(), false \/*wide*\/, false \/*unaligned*\/);\n+    ce->mem2reg(stub->addr(), stub->pre_val(), T_OBJECT, stub->patch_code(), stub->info(), false \/*wide*\/);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -497,2 +497,1 @@\n-                            bool pop_fpu_stack, bool wide,\n-                            bool unaligned) {\n+                            bool pop_fpu_stack, bool wide) {\n@@ -698,1 +697,1 @@\n-                            bool wide, bool unaligned) {\n+                            bool wide) {\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRAssembler_arm.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -335,1 +335,1 @@\n-    ce->mem2reg(stub->addr(), stub->pre_val(), T_OBJECT, stub->patch_code(), stub->info(), false \/*wide*\/, false \/*unaligned*\/);\n+    ce->mem2reg(stub->addr(), stub->pre_val(), T_OBJECT, stub->patch_code(), stub->info(), false \/*wide*\/);\n","filename":"src\/hotspot\/cpu\/arm\/gc\/g1\/g1BarrierSetAssembler_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -717,1 +717,1 @@\n-int LIR_Assembler::store(LIR_Opr from_reg, Register base, int offset, BasicType type, bool wide, bool unaligned) {\n+int LIR_Assembler::store(LIR_Opr from_reg, Register base, int offset, BasicType type, bool wide) {\n@@ -797,1 +797,1 @@\n-int LIR_Assembler::load(Register base, int offset, LIR_Opr to_reg, BasicType type, bool wide, bool unaligned) {\n+int LIR_Assembler::load(Register base, int offset, LIR_Opr to_reg, BasicType type, bool wide) {\n@@ -968,1 +968,1 @@\n-    offset = store(tmp, base, addr->disp(), type, wide, false);\n+    offset = store(tmp, base, addr->disp(), type, wide);\n@@ -1123,1 +1123,1 @@\n-                            LIR_PatchCode patch_code, CodeEmitInfo* info, bool wide, bool unaligned) {\n+                            LIR_PatchCode patch_code, CodeEmitInfo* info, bool wide) {\n@@ -1173,1 +1173,1 @@\n-    offset = load(src, disp_value, to_reg, type, wide, unaligned);\n+    offset = load(src, disp_value, to_reg, type, wide);\n@@ -1195,2 +1195,1 @@\n-  bool unaligned = addr.disp() % 8 != 0;\n-  load(addr.base(), addr.disp(), dest, dest->type(), true \/*wide*\/, unaligned);\n+  load(addr.base(), addr.disp(), dest, dest->type(), true \/*wide*\/);\n@@ -1207,2 +1206,2 @@\n-  bool unaligned = addr.disp() % 8 != 0;\n-  store(from_reg, addr.base(), addr.disp(), from_reg->type(), true \/*wide*\/, unaligned);\n+\n+  store(from_reg, addr.base(), addr.disp(), from_reg->type(), true \/*wide*\/);\n@@ -1244,1 +1243,1 @@\n-                            bool wide, bool unaligned) {\n+                            bool wide) {\n@@ -1301,1 +1300,1 @@\n-    offset = store(from_reg, src, disp_value, type, wide, unaligned);\n+    offset = store(from_reg, src, disp_value, type, wide);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-  int store(LIR_Opr from_reg, Register base, int offset, BasicType type, bool wide, bool unaligned);\n+  int store(LIR_Opr from_reg, Register base, int offset, BasicType type, bool wide);\n@@ -44,1 +44,1 @@\n-  int load(Register base, int offset, LIR_Opr to_reg, BasicType type, bool wide, bool unaligned);\n+  int load(Register base, int offset, LIR_Opr to_reg, BasicType type, bool wide);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -312,6 +312,1 @@\n-  if ((t == T_LONG || t == T_DOUBLE) &&\n-      (in_bytes(offset_from_sp) % 8 != 0)) {\n-    __ unaligned_move(item, new LIR_Address(sp_opr, in_bytes(offset_from_sp), t));\n-  } else {\n-    __ move(item, new LIR_Address(sp_opr, in_bytes(offset_from_sp), t));\n-  }\n+  __ move(item, new LIR_Address(sp_opr, in_bytes(offset_from_sp), t));\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRGenerator_ppc.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -396,1 +396,1 @@\n-    ce->mem2reg(stub->addr(), stub->pre_val(), T_OBJECT, stub->patch_code(), stub->info(), false \/*wide*\/, false \/*unaligned*\/);\n+    ce->mem2reg(stub->addr(), stub->pre_val(), T_OBJECT, stub->patch_code(), stub->info(), false \/*wide*\/);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/g1\/g1BarrierSetAssembler_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -882,1 +882,1 @@\n-                            CodeEmitInfo* info, bool wide, bool unaligned) {\n+                            CodeEmitInfo* info, bool wide) {\n@@ -1082,1 +1082,1 @@\n-                            bool wide, bool unaligned) {\n+                            bool wide) {\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -430,1 +430,1 @@\n-    ce->mem2reg(stub->addr(), stub->pre_val(), T_OBJECT, stub->patch_code(), stub->info(), false \/*wide*\/, false \/*unaligned*\/);\n+    ce->mem2reg(stub->addr(), stub->pre_val(), T_OBJECT, stub->patch_code(), stub->info(), false \/*wide*\/);\n","filename":"src\/hotspot\/cpu\/s390\/gc\/g1\/g1BarrierSetAssembler_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -956,1 +956,1 @@\n-void LIR_Assembler::reg2mem(LIR_Opr src, LIR_Opr dest, BasicType type, LIR_PatchCode patch_code, CodeEmitInfo* info, bool pop_fpu_stack, bool wide, bool \/* unaligned *\/) {\n+void LIR_Assembler::reg2mem(LIR_Opr src, LIR_Opr dest, BasicType type, LIR_PatchCode patch_code, CodeEmitInfo* info, bool pop_fpu_stack, bool wide) {\n@@ -1181,1 +1181,1 @@\n-void LIR_Assembler::mem2reg(LIR_Opr src, LIR_Opr dest, BasicType type, LIR_PatchCode patch_code, CodeEmitInfo* info, bool wide, bool \/* unaligned *\/) {\n+void LIR_Assembler::mem2reg(LIR_Opr src, LIR_Opr dest, BasicType type, LIR_PatchCode patch_code, CodeEmitInfo* info, bool wide) {\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -423,1 +423,1 @@\n-    ce->mem2reg(stub->addr(), stub->pre_val(), T_OBJECT, stub->patch_code(), stub->info(), false \/*wide*\/, false \/*unaligned*\/);\n+    ce->mem2reg(stub->addr(), stub->pre_val(), T_OBJECT, stub->patch_code(), stub->info(), false \/*wide*\/);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/g1\/g1BarrierSetAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -847,1 +847,1 @@\n-    ce->mem2reg(stub->addr(), stub->pre_val(), T_OBJECT, stub->patch_code(), stub->info(), false \/*wide*\/, false \/*unaligned*\/);\n+    ce->mem2reg(stub->addr(), stub->pre_val(), T_OBJECT, stub->patch_code(), stub->info(), false \/*wide*\/);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1784,2 +1784,0 @@\n-    case lir_move_unaligned:\n-      return \"unaligned move\";\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1022,1 +1022,0 @@\n-  lir_move_unaligned,\n@@ -2077,3 +2076,0 @@\n-  void unaligned_move(LIR_Address* src, LIR_Opr dst) { append(new LIR_Op1(lir_move, LIR_OprFact::address(src), dst, dst->type(), lir_patch_none, NULL, lir_move_unaligned)); }\n-  void unaligned_move(LIR_Opr src, LIR_Address* dst) { append(new LIR_Op1(lir_move, src, LIR_OprFact::address(dst), src->type(), lir_patch_none, NULL, lir_move_unaligned)); }\n-  void unaligned_move(LIR_Opr src, LIR_Opr dst) { append(new LIR_Op1(lir_move, src, dst, dst->type(), lir_patch_none, NULL, lir_move_unaligned)); }\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -512,1 +512,0 @@\n-                op->move_kind() == lir_move_unaligned,\n@@ -774,1 +773,1 @@\n-void LIR_Assembler::move_op(LIR_Opr src, LIR_Opr dest, BasicType type, LIR_PatchCode patch_code, CodeEmitInfo* info, bool pop_fpu_stack, bool unaligned, bool wide) {\n+void LIR_Assembler::move_op(LIR_Opr src, LIR_Opr dest, BasicType type, LIR_PatchCode patch_code, CodeEmitInfo* info, bool pop_fpu_stack, bool wide) {\n@@ -783,1 +782,1 @@\n-      reg2mem(src, dest, type, patch_code, info, pop_fpu_stack, wide, unaligned);\n+      reg2mem(src, dest, type, patch_code, info, pop_fpu_stack, wide);\n@@ -812,2 +811,1 @@\n-    mem2reg(src, dest, type, patch_code, info, wide, unaligned);\n-\n+    mem2reg(src, dest, type, patch_code, info, wide);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRAssembler.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-                   bool pop_fpu_stack, bool wide, bool unaligned);\n+                   bool pop_fpu_stack, bool wide);\n@@ -177,1 +177,1 @@\n-                   CodeEmitInfo* info, bool wide, bool unaligned);\n+                   CodeEmitInfo* info, bool wide);\n@@ -217,1 +217,1 @@\n-               LIR_PatchCode patch_code, CodeEmitInfo* info, bool pop_fpu_stack, bool unaligned, bool wide);\n+               LIR_PatchCode patch_code, CodeEmitInfo* info, bool pop_fpu_stack, bool wide);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRAssembler.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2126,1 +2126,1 @@\n-      __ unaligned_move(addr, result);\n+      __ move(addr, result);\n@@ -2693,5 +2693,1 @@\n-        if (addr->type() == T_LONG || addr->type() == T_DOUBLE) {\n-          __ unaligned_move(param->result(), addr);\n-        } else {\n-          __ move(param->result(), addr);\n-        }\n+        __ move(param->result(), addr);\n@@ -3499,5 +3495,1 @@\n-      if (addr->type() == T_LONG || addr->type() == T_DOUBLE) {\n-        __ unaligned_move(arg, addr);\n-      } else {\n-        __ move(arg, addr);\n-      }\n+      __ move(arg, addr);\n@@ -3541,5 +3533,1 @@\n-      if (addr->type() == T_LONG || addr->type() == T_DOUBLE) {\n-        __ unaligned_move(arg->result(), addr);\n-      } else {\n-        __ move(arg->result(), addr);\n-      }\n+      __ move(arg->result(), addr);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":4,"deletions":16,"binary":false,"changes":20,"status":"modified"}]}