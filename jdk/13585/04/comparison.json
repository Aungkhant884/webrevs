{"files":[{"patch":"@@ -285,0 +285,1 @@\n+        jdk.jlink,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+import jdk.internal.util.OperatingSystem;\n@@ -177,1 +178,5 @@\n-            this.platform = Platform.parsePlatform(value);\n+            try {\n+                this.platform = Platform.parsePlatform(value);\n+            } catch (IllegalArgumentException iae) {\n+                throw new PluginException(\"ModuleTarget is malformed: \" + iae.getMessage());\n+            }\n@@ -493,1 +498,1 @@\n-        return platform.os() == Platform.OperatingSystem.WINDOWS;\n+        return platform.os() == OperatingSystem.WINDOWS;\n@@ -566,31 +571,0 @@\n-    public static ExecutableImage getExecutableImage(Path root) {\n-        Path binDir = root.resolve(BIN_DIRNAME);\n-        if (Files.exists(binDir.resolve(\"java\")) ||\n-            Files.exists(binDir.resolve(\"java.exe\"))) {\n-            return new DefaultExecutableImage(root, retrieveModules(root), Platform.UNKNOWN);\n-        }\n-        return null;\n-    }\n-\n-    private static Set<String> retrieveModules(Path root) {\n-        Path releaseFile = root.resolve(\"release\");\n-        Set<String> modules = new HashSet<>();\n-        if (Files.exists(releaseFile)) {\n-            Properties release = new Properties();\n-            try (FileInputStream fi = new FileInputStream(releaseFile.toFile())) {\n-                release.load(fi);\n-            } catch (IOException ex) {\n-                System.err.println(\"Can't read release file \" + ex);\n-            }\n-            String mods = release.getProperty(\"MODULES\");\n-            if (mods != null) {\n-                String[] arr = mods.substring(1, mods.length() - 1).split(\" \");\n-                for (String m : arr) {\n-                    modules.add(m.trim());\n-                }\n-\n-            }\n-        }\n-        return modules;\n-    }\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/builder\/DefaultImageBuilder.java","additions":7,"deletions":33,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,0 +83,1 @@\n+     * @throws UnsupportedOperationException if this method is not implemented by the ImageBuilder\n@@ -85,1 +86,1 @@\n-        return Platform.UNKNOWN;\n+        throw new UnsupportedOperationException(\"Builder does not define getTargetPlatform\");\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/builder\/ImageBuilder.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,3 @@\n+import jdk.internal.util.Architecture;\n+import jdk.internal.util.OperatingSystem;\n+\n@@ -30,1 +33,1 @@\n- * Supported platforms\n+ * Supported OperatingSystem and Architecture.\n@@ -34,18 +37,0 @@\n-    public enum OperatingSystem {\n-        WINDOWS,\n-        LINUX,\n-        MACOS,\n-        AIX,\n-        UNKNOWN;\n-    }\n-\n-    public enum Architecture {\n-        X86,\n-        x64,\n-        ARM,\n-        AARCH64,\n-        UNKNOWN;\n-    }\n-\n-    public static final Platform UNKNOWN = new Platform(OperatingSystem.UNKNOWN, Architecture.UNKNOWN);\n-\n@@ -54,0 +39,2 @@\n+     * @throws IllegalArgumentException if the delimiter is missing or either OS or\n+     * architecture is not known\n@@ -60,11 +47,1 @@\n-            osName = platformString;\n-            archName = \"UNKNOWN\";\n-        } else {\n-            osName = platformString.substring(0, index);\n-            archName = platformString.substring(index + 1);\n-        }\n-        OperatingSystem os;\n-        try {\n-            os = OperatingSystem.valueOf(osName.toUpperCase(Locale.ENGLISH));\n-        } catch (IllegalArgumentException e) {\n-            os = OperatingSystem.UNKNOWN;\n+            throw new IllegalArgumentException(\"platformString missing delimiter: \" + platformString);\n@@ -72,3 +49,2 @@\n-        Architecture arch = toArch(archName);\n-        return new Platform(os, arch);\n-    }\n+        osName = platformString.substring(0, index);\n+        OperatingSystem os = OperatingSystem.valueOf(osName.toUpperCase(Locale.ROOT));\n@@ -76,6 +52,6 @@\n-    \/**\n-     * @return true is it's a 64-bit platform\n-     *\/\n-    public boolean is64Bit() {\n-        return (arch() == Platform.Architecture.x64 ||\n-                arch() == Platform.Architecture.AARCH64);\n+        archName = platformString.substring(index + 1);\n+        \/\/ Alias architecture \"amd64\" to \"X64\"\n+        archName = archName.replace(\"amd64\", \"X64\");\n+        Architecture arch = Architecture.valueOf(archName.toUpperCase(Locale.ROOT));\n+\n+        return new Platform(os, arch);\n@@ -85,1 +61,1 @@\n-     * Returns the runtime {@code Platform}.\n+     * {@return the runtime {@code Platform}}\n@@ -88,1 +64,1 @@\n-        return new Platform(runtimeOS(), runtimeArch());\n+        return new Platform(OperatingSystem.current(), Architecture.current());\n@@ -96,38 +72,1 @@\n-        return os.toString().toLowerCase() + \"-\" + arch.toString().toLowerCase();\n-    }\n-\n-    \/**\n-     * Returns the runtime {@code Platform.OperatingSystem}.\n-     *\/\n-    private static OperatingSystem runtimeOS() {\n-        String osName = System.getProperty(\"os.name\").substring(0, 3).toLowerCase();\n-        OperatingSystem os = switch (osName) {\n-            case \"win\" -> OperatingSystem.WINDOWS;\n-            case \"lin\" -> OperatingSystem.LINUX;\n-            case \"mac\" -> OperatingSystem.MACOS;\n-            case \"aix\" -> OperatingSystem.AIX;\n-            default    -> OperatingSystem.UNKNOWN;\n-        };\n-        return os;\n-    }\n-\n-    \/**\n-     * Returns the runtime {@code Platform.Architechrure}.\n-     *\/\n-    private static Architecture runtimeArch() {\n-        String archName = System.getProperty(\"os.arch\");\n-        return toArch(archName);\n-    }\n-\n-    \/**\n-     * Returns the {@code Platform.Architecture} based on the archName.\n-     *\/\n-    private static Architecture toArch(String archName) {\n-        Architecture arch = switch (archName) {\n-            case \"x86\"             -> Architecture.X86;\n-            case \"amd64\", \"x86_64\" -> Architecture.x64;\n-            case \"arm\"             -> Architecture.ARM;\n-            case \"aarch64\"         -> Architecture.AARCH64;\n-            default                -> Architecture.UNKNOWN;\n-        };\n-        return arch;\n+        return os.toString().toLowerCase(Locale.ROOT) + \"-\" + arch.toString().toLowerCase(Locale.ROOT);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/Platform.java","additions":19,"deletions":80,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+import jdk.internal.util.Architecture;\n+import jdk.internal.util.OperatingSystem;\n@@ -54,1 +56,1 @@\n-        if (targetPlatform.os() == Platform.OperatingSystem.WINDOWS) {\n+        if (targetPlatform.os() == OperatingSystem.WINDOWS) {\n@@ -103,1 +105,3 @@\n-            if (targetPlatform.is64Bit()) {\n+            \/\/ The targetPlatform is the same as the runtimePlatform.\n+            \/\/ For a 64-bit platform, generate the non-compressed oop CDS archive\n+            if (Architecture.is64bit()) {\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/CDSPlugin.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -248,9 +248,11 @@\n-        String targetPlatform = module.targetPlatform();\n-        Platform platform = Platform.parsePlatform(targetPlatform);\n-        switch (platform.os()) {\n-            case WINDOWS:\n-                return new String[] { \"jvm.dll\" };\n-            case MACOS:\n-                return new String[] { \"libjvm.dylib\", \"libjvm.a\" };\n-            default:\n-                return new String[] { \"libjvm.so\", \"libjvm.a\" };\n+        try {\n+            String targetPlatform = module.targetPlatform();\n+            Platform platform = Platform.parsePlatform(targetPlatform);\n+            return switch (platform.os()) {\n+                case WINDOWS -> new String[]{\"jvm.dll\"};\n+                case MACOS   -> new String[]{\"libjvm.dylib\", \"libjvm.a\"};\n+                default      -> new String[]{\"libjvm.so\", \"libjvm.a\"};\n+            };\n+        } catch (IllegalArgumentException iae) {\n+            \/\/ For unknown or malformed targetPlatform\n+            return new String[]{\"libjvm.so\", \"libjvm.a\"};\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ExcludeVMPlugin.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,19 +85,0 @@\n-\n-       \/\/ Simulate different platforms between current runtime and target image.\n-       if (Platform.isLinux()) {\n-           System.out.println(\"---- Test different platforms scenario ----\");\n-           String jlinkPath = JDKToolFinder.getJDKTool(\"jlink\");\n-           String[] cmd = {jlinkPath, \"--add-modules\", \"java.base,java.logging\",\n-                           \"-J-Dos.name=windows\", \"--generate-cds-archive\",\n-                           \"--output\", System.getProperty(\"test.classes\") + sep + module + \"-tmp\"};\n-           StringBuilder cmdLine = new StringBuilder();\n-           for (String s : cmd) {\n-               cmdLine.append(s).append(' ');\n-           }\n-           System.out.println(\"Command line: [\" + cmdLine.toString() + \"]\");\n-           ProcessBuilder pb = new ProcessBuilder(cmd);\n-           OutputAnalyzer out = new OutputAnalyzer(pb.start());\n-           System.out.println(\"    stdout: \" + out.getStdout());\n-           out.shouldMatch(\"Error: Cannot generate CDS archives: target image platform linux-.*is different from runtime platform windows-.*\");\n-           out.shouldHaveExitValue(1);\n-       }\n","filename":"test\/jdk\/tools\/jlink\/plugins\/CDSPluginTest.java","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"}]}