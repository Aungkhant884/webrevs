{"files":[{"patch":"@@ -189,4 +189,0 @@\n-            \/\/ Ideally, algParams should have been initialized and we can\n-            \/\/ create an AlgorithmId from it. This should usually be true\n-            \/\/ since we already require its getEncoded() returning the\n-            \/\/ encoded bytes of it.\n@@ -195,0 +191,6 @@\n+            \/\/ This exception is thrown when algParams.getEncoded() fails.\n+            \/\/ While the spec of this constructor requires that\n+            \/\/ \"getEncoded should return...\", in reality people might\n+            \/\/ create with an uninitialized algParams first and only\n+            \/\/ initialize it before calling getEncoded(). Thus we support\n+            \/\/ this case as well.\n@@ -197,7 +199,4 @@\n-        if (tmp != null) {\n-            this.algid = tmp;\n-            this.params = null;\n-        } else {\n-            this.algid = null;\n-            this.params = algParams;\n-        }\n+\n+        \/\/ one and only one is non null\n+        this.algid = tmp;\n+        this.params = this.algid != null ? null : algParams;\n@@ -273,1 +272,1 @@\n-            return pKCS8EncodingToSpec(encoded);\n+            return pkcs8EncodingToSpec(encoded);\n@@ -296,1 +295,1 @@\n-            return pKCS8EncodingToSpec(encoded);\n+            return pkcs8EncodingToSpec(encoded);\n@@ -437,1 +436,1 @@\n-    private static PKCS8EncodedKeySpec pKCS8EncodingToSpec(byte[] encodedKey)\n+    private static PKCS8EncodedKeySpec pkcs8EncodingToSpec(byte[] encodedKey)\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/EncryptedPrivateKeyInfo.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -119,30 +119,0 @@\n-    MacData(AlgorithmParameters algParams, byte[] digest,\n-        byte[] salt, int iterations) throws NoSuchAlgorithmException\n-    {\n-        if (algParams == null)\n-           throw new NullPointerException(\"the algParams parameter \" +\n-                                               \"must be non-null\");\n-\n-        AlgorithmId algid = AlgorithmId.get(algParams);\n-        this.digestAlgorithmName = algid.getName();\n-        this.digestAlgorithmParams = algid.getParameters();\n-\n-        if (digest == null) {\n-            throw new NullPointerException(\"the digest \" +\n-                                           \"parameter must be non-null\");\n-        } else if (digest.length == 0) {\n-            throw new IllegalArgumentException(\"the digest \" +\n-                                                \"parameter must not be empty\");\n-        } else {\n-            this.digest = digest.clone();\n-        }\n-\n-        this.macSalt = salt;\n-        this.iterations = iterations;\n-\n-        \/\/ delay the generation of ASN.1 encoding until\n-        \/\/ getEncoded() is called\n-        this.encoded = null;\n-\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/MacData.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"}]}