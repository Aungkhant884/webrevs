{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -76,0 +77,2 @@\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+\n@@ -417,26 +420,33 @@\n-    static final byte[] DigitTens = {\n-        '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',\n-        '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',\n-        '2', '2', '2', '2', '2', '2', '2', '2', '2', '2',\n-        '3', '3', '3', '3', '3', '3', '3', '3', '3', '3',\n-        '4', '4', '4', '4', '4', '4', '4', '4', '4', '4',\n-        '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\n-        '6', '6', '6', '6', '6', '6', '6', '6', '6', '6',\n-        '7', '7', '7', '7', '7', '7', '7', '7', '7', '7',\n-        '8', '8', '8', '8', '8', '8', '8', '8', '8', '8',\n-        '9', '9', '9', '9', '9', '9', '9', '9', '9', '9',\n-        } ;\n-\n-    static final byte[] DigitOnes = {\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        } ;\n-\n+    \/**\n+     * Each element of the array represents the packaging of two ascii characters based on little endian:<p>\n+     * <pre>\n+     *      00 -> '0' | ('0' << 8) -> 0x3030\n+     *      01 -> '1' | ('0' << 8) -> 0x3130\n+     *      02 -> '2' | ('0' << 8) -> 0x3230\n+     *\n+     *     ...\n+     *\n+     *      10 -> '0' | ('1' << 8) -> 0x3031\n+     *      11 -> '1' | ('1' << 8) -> 0x3131\n+     *      12 -> '2' | ('1' << 8) -> 0x3231\n+     *\n+     *     ...\n+     *\n+     *      97 -> '7' | ('9' << 8) -> 0x3739\n+     *      98 -> '8' | ('9' << 8) -> 0x3839\n+     *      99 -> '9' | ('9' << 8) -> 0x3939\n+     * <\/pre>\n+     *\/\n+    @Stable\n+    static final short[] PACKED_DIGITS = new short[] {\n+            0x3030, 0x3130, 0x3230, 0x3330, 0x3430, 0x3530, 0x3630, 0x3730, 0x3830, 0x3930,\n+            0x3031, 0x3131, 0x3231, 0x3331, 0x3431, 0x3531, 0x3631, 0x3731, 0x3831, 0x3931,\n+            0x3032, 0x3132, 0x3232, 0x3332, 0x3432, 0x3532, 0x3632, 0x3732, 0x3832, 0x3932,\n+            0x3033, 0x3133, 0x3233, 0x3333, 0x3433, 0x3533, 0x3633, 0x3733, 0x3833, 0x3933,\n+            0x3034, 0x3134, 0x3234, 0x3334, 0x3434, 0x3534, 0x3634, 0x3734, 0x3834, 0x3934,\n+            0x3035, 0x3135, 0x3235, 0x3335, 0x3435, 0x3535, 0x3635, 0x3735, 0x3835, 0x3935,\n+            0x3036, 0x3136, 0x3236, 0x3336, 0x3436, 0x3536, 0x3636, 0x3736, 0x3836, 0x3936,\n+            0x3037, 0x3137, 0x3237, 0x3337, 0x3437, 0x3537, 0x3637, 0x3737, 0x3837, 0x3937,\n+            0x3038, 0x3138, 0x3238, 0x3338, 0x3438, 0x3538, 0x3638, 0x3738, 0x3838, 0x3938,\n+            0x3039, 0x3139, 0x3239, 0x3339, 0x3439, 0x3539, 0x3639, 0x3739, 0x3839, 0x3939\n+    };\n@@ -517,2 +527,3 @@\n-            buf[--charPos] = DigitOnes[r];\n-            buf[--charPos] = DigitTens[r];\n+            charPos -= 2;\n+            assert charPos >= 0 && charPos < buf.length : \"Trusted caller missed bounds check\";\n+            UNSAFE.putShortUnaligned(buf, Unsafe.ARRAY_BYTE_BASE_OFFSET + charPos, PACKED_DIGITS[r], false);\n@@ -522,1 +533,0 @@\n-        buf[--charPos] = DigitOnes[-i];\n@@ -524,1 +534,5 @@\n-            buf[--charPos] = DigitTens[-i];\n+            charPos -= 2;\n+            assert charPos >= 0 && charPos < buf.length : \"Trusted caller missed bounds check\";\n+            UNSAFE.putShortUnaligned(buf, Unsafe.ARRAY_BYTE_BASE_OFFSET + charPos, PACKED_DIGITS[-i], false);\n+        } else {\n+            buf[--charPos] = (byte)('0' - i);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":44,"deletions":30,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -76,0 +77,2 @@\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+\n@@ -541,1 +544,0 @@\n-        int r;\n@@ -552,1 +554,7 @@\n-            r = (int)((q * 100) - i);\n+            charPos -= 2;\n+            assert charPos >= 0 && charPos < buf.length : \"Trusted caller missed bounds check\";\n+            UNSAFE.putShortUnaligned(\n+                    buf,\n+                    Unsafe.ARRAY_BYTE_BASE_OFFSET + charPos,\n+                    Integer.PACKED_DIGITS[(int)((q * 100) - i)],\n+                    false);\n@@ -554,2 +562,0 @@\n-            buf[--charPos] = Integer.DigitOnes[r];\n-            buf[--charPos] = Integer.DigitTens[r];\n@@ -563,1 +569,7 @@\n-            r  = (q2 * 100) - i2;\n+            charPos -= 2;\n+            assert charPos >= 0 && charPos < buf.length : \"Trusted caller missed bounds check\";\n+            UNSAFE.putShortUnaligned(\n+                    buf,\n+                    Unsafe.ARRAY_BYTE_BASE_OFFSET + charPos,\n+                    Integer.PACKED_DIGITS[(q2 * 100) - i2],\n+                    false);\n@@ -565,2 +577,0 @@\n-            buf[--charPos] = Integer.DigitOnes[r];\n-            buf[--charPos] = Integer.DigitTens[r];\n@@ -570,1 +580,0 @@\n-        buf[--charPos] = Integer.DigitOnes[-i2];\n@@ -572,1 +581,9 @@\n-            buf[--charPos] = Integer.DigitTens[-i2];\n+            charPos -= 2;\n+            assert charPos >= 0 && charPos < buf.length : \"Trusted caller missed bounds check\";\n+            UNSAFE.putShortUnaligned(\n+                    buf,\n+                    Unsafe.ARRAY_BYTE_BASE_OFFSET + charPos,\n+                    Integer.PACKED_DIGITS[-i2],\n+                    false);\n+        } else {\n+            buf[--charPos] = (byte)('0' - i2);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":26,"deletions":9,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -1516,0 +1517,2 @@\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+\n@@ -1544,2 +1547,11 @@\n-            putChar(buf, --charPos, Integer.DigitOnes[r]);\n-            putChar(buf, --charPos, Integer.DigitTens[r]);\n+\n+            int packed = (int) Integer.PACKED_DIGITS[r];\n+            int inflated = ((packed & 0xFF00) << 8) | (packed & 0xFF);\n+\n+            charPos -= 2;\n+            assert charPos >= 0 && charPos < buf.length : \"Trusted caller missed bounds check\";\n+            UNSAFE.putIntUnaligned(\n+                    buf,\n+                    Unsafe.ARRAY_BYTE_BASE_OFFSET + (charPos << 1),\n+                    inflated,\n+                    false);\n@@ -1549,1 +1561,0 @@\n-        putChar(buf, --charPos, Integer.DigitOnes[-i]);\n@@ -1551,1 +1562,12 @@\n-            putChar(buf, --charPos, Integer.DigitTens[-i]);\n+            int packed = (int) Integer.PACKED_DIGITS[-i];\n+            int inflated = ((packed & 0xFF00) << 8) | (packed & 0xFF);\n+\n+            charPos -= 2;\n+            assert charPos >= 0 && charPos < buf.length : \"Trusted caller missed bounds check\";\n+            UNSAFE.putIntUnaligned(\n+                    buf,\n+                    Unsafe.ARRAY_BYTE_BASE_OFFSET + (charPos << 1),\n+                    inflated,\n+                    false);\n+        } else {\n+            putChar(buf, --charPos, '0' - i);\n@@ -1571,1 +1593,0 @@\n-        int r;\n@@ -1582,1 +1603,11 @@\n-            r = (int)((q * 100) - i);\n+\n+            int packed = (int) Integer.PACKED_DIGITS[(int)((q * 100) - i)];\n+            int inflated = ((packed & 0xFF00) << 8) | (packed & 0xFF);\n+\n+            charPos -= 2;\n+            assert charPos >= 0 && charPos < buf.length : \"Trusted caller missed bounds check\";\n+            UNSAFE.putIntUnaligned(\n+                    buf,\n+                    Unsafe.ARRAY_BYTE_BASE_OFFSET + (charPos << 1),\n+                    inflated,\n+                    false);\n@@ -1584,2 +1615,0 @@\n-            putChar(buf, --charPos, Integer.DigitOnes[r]);\n-            putChar(buf, --charPos, Integer.DigitTens[r]);\n@@ -1593,1 +1622,11 @@\n-            r  = (q2 * 100) - i2;\n+\n+            int packed = (int) Integer.PACKED_DIGITS[(q2 * 100) - i2];\n+            int inflated = ((packed & 0xFF00) << 8) | (packed & 0xFF);\n+\n+            charPos -= 2;\n+            assert charPos >= 0 && charPos < buf.length : \"Trusted caller missed bounds check\";\n+            UNSAFE.putIntUnaligned(\n+                    buf,\n+                    Unsafe.ARRAY_BYTE_BASE_OFFSET + (charPos << 1),\n+                    inflated,\n+                    false);\n@@ -1595,2 +1634,0 @@\n-            putChar(buf, --charPos, Integer.DigitOnes[r]);\n-            putChar(buf, --charPos, Integer.DigitTens[r]);\n@@ -1600,1 +1637,0 @@\n-        putChar(buf, --charPos, Integer.DigitOnes[-i2]);\n@@ -1602,1 +1638,13 @@\n-            putChar(buf, --charPos, Integer.DigitTens[-i2]);\n+            charPos -= 2;\n+\n+            int packed = (int) Integer.PACKED_DIGITS[-i2];\n+            int inflated = ((packed & 0xFF00) << 8) | (packed & 0xFF);\n+\n+            assert charPos >= 0 && charPos < buf.length : \"Trusted caller missed bounds check\";\n+            UNSAFE.putIntUnaligned(\n+                    buf,\n+                    Unsafe.ARRAY_BYTE_BASE_OFFSET + (charPos << 1),\n+                    inflated,\n+                    false);\n+        } else {\n+            putChar(buf, --charPos, '0' - i2);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":61,"deletions":13,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,4 @@\n- * @bug 8136500\n- * @summary Test Integer.toString method\n+ * @bug 8136500 8310929\n+ * @summary Test Integer.toString method for both compact and non-compact strings\n+ * @run junit\/othervm -XX:+CompactStrings ToString\n+ * @run junit\/othervm -XX:-CompactStrings ToString\n@@ -30,0 +32,4 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n@@ -32,1 +38,2 @@\n-    public static void main(String[] args) throws Exception {\n+    @Test\n+    public void testBase10() {\n@@ -80,4 +87,1 @@\n-        String actual = Integer.toString(value);\n-        if (!expected.equals(actual)) {\n-            throw new RuntimeException(\"Expected \" + expected + \", but got \" + actual);\n-        }\n+        assertEquals(expected, Integer.toString(value));\n","filename":"test\/jdk\/java\/lang\/Integer\/ToString.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,4 @@\n- * @bug 8136500\n- * @summary Test Long.toString method\n+ * @bug 8136500 8310929\n+ * @summary Test Long.toString method for both compact and non-compact strings\n+ * @run junit\/othervm -XX:+CompactStrings ToString\n+ * @run junit\/othervm -XX:-CompactStrings ToString\n@@ -30,0 +32,4 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n@@ -32,1 +38,2 @@\n-    public static void main(String[] args) throws Exception {\n+    @Test\n+    public void testBase10() {\n@@ -80,4 +87,1 @@\n-        String actual = Long.toString(value);\n-        if (!expected.equals(actual)) {\n-            throw new RuntimeException(\"Expected \" + expected + \", but got \" + actual);\n-        }\n+        assertEquals(expected, Long.toString(value));\n","filename":"test\/jdk\/java\/lang\/Long\/ToString.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"}]}