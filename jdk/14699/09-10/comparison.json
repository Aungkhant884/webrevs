{"files":[{"patch":"@@ -1521,1 +1521,6 @@\n-     * Integer.PACKED_DIGITS UTF16 version\n+     * UTF16 version of {@link Integer#PACKED_DIGITS}, but the endianness\n+     * of each integer is already adapted to platform.\n+     * As a result, the packed values should <strong>NOT<\/strong> be recombined\n+     * with bitwise operations, like {@code p[a] << 32 | p[b]}, and can only be\n+     * passed to {@link Unsafe#putIntUnaligned(Object, long, int)} without a\n+     * boolean parameter.\n@@ -1526,1 +1531,1 @@\n-        int[] digits = new int[]{\n+        int[] digits = new int[] {\n@@ -1540,1 +1545,1 @@\n-                digits[i] <<= 8;\n+                digits[i] = Integer.reverseBytes(digits[i] << 8);\n@@ -1579,2 +1584,1 @@\n-                    PACKED_DIGITS_UTF16[r],\n-                    false);\n+                    PACKED_DIGITS_UTF16[r]);\n@@ -1589,2 +1593,1 @@\n-                    PACKED_DIGITS_UTF16[-i],\n-                    false);\n+                    PACKED_DIGITS_UTF16[-i]);\n@@ -1626,2 +1629,1 @@\n-                    PACKED_DIGITS_UTF16[(int)((q * 100) - i)],\n-                    false);\n+                    PACKED_DIGITS_UTF16[(int)((q * 100) - i)]);\n@@ -1640,2 +1642,1 @@\n-                    PACKED_DIGITS_UTF16[(q2 * 100) - i2],\n-                    false);\n+                    PACKED_DIGITS_UTF16[(q2 * 100) - i2]);\n@@ -1651,2 +1652,1 @@\n-                    PACKED_DIGITS_UTF16[-i2],\n-                    false);\n+                    PACKED_DIGITS_UTF16[-i2]);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"}]}