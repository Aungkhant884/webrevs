{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.util.ByteArray;\n@@ -456,6 +457,2 @@\n-        int size = stringSize(i);\n-        if (COMPACT_STRINGS) {\n-            byte[] buf = new byte[size];\n-            getChars(i, size, buf);\n-            return new String(buf, LATIN1);\n-        } else {\n+        if (!COMPACT_STRINGS) {\n+            int size = stringSize(i);\n@@ -466,0 +463,90 @@\n+\n+        if (i == Integer.MIN_VALUE) {\n+            return \"-2147483648\";\n+        }\n+\n+        boolean negative = i < 0;\n+        if (negative) {\n+            i = -i;\n+        }\n+        final int[] digits = DecimalDigits.DIGITS;\n+        int off = 0;\n+        byte[] buf;\n+        if (i < 1000) {\n+            int v = digits[i];\n+            final int start = v >> 24;\n+            buf = new byte[(negative ? 4 : 3) - start];\n+            if (negative) {\n+                buf[0] = '-';\n+                off = 1;\n+            }\n+\n+            if (start == 0) {\n+                buf[off] = (byte) (v >> 16);\n+                ByteArray.setShort(buf, off + 1, (short) v);\n+            } else if (start == 1) {\n+                ByteArray.setShort(buf, off, (short) v);\n+            } else {\n+                buf[off] = (byte) v;\n+            }\n+        } else {\n+            final int q1 = i \/ 1000;\n+            final int r1 = i - q1 * 1000;\n+            final int v1 = digits[r1];\n+            if (i < 1000000) {\n+                final int v2 = digits[q1];\n+                int start = v2 >> 24;\n+\n+                buf = new byte[(negative ? 7 : 6) - start];\n+                if (negative) {\n+                    buf[0] = '-';\n+                    off = 1;\n+                }\n+\n+                if (start == 0) {\n+                    ByteArray.setShort(buf, off, (short) (v2 >> 8));\n+                    off += 2;\n+                } else if (start == 1) {\n+                    buf[off++] = (byte) (v2 >> 8);\n+                }\n+                ByteArray.setInt(buf, off, v2 << 24 | (v1 & 0xffffff));\n+            } else {\n+                final int q2 = q1 \/ 1000;\n+                final int r2 = q1 - q2 * 1000;\n+                final int q3 = q2 \/ 1000;\n+                final int v2 = digits[r2];\n+                if (q3 == 0) {\n+                    int v = digits[q2];\n+                    final int start = v >> 24;\n+\n+                    buf = new byte[(negative ? 10 : 9) - start];\n+                    if (negative) {\n+                        buf[0] = '-';\n+                        off = 1;\n+                    }\n+\n+                    if (start == 0) {\n+                        buf[off] = (byte) (v >> 16);\n+                        ByteArray.setShort(buf, off + 1, (short) v);\n+                        off += 3;\n+                    } else if (start == 1) {\n+                        ByteArray.setShort(buf, off, (short) v);\n+                        off += 2;\n+                    } else {\n+                        buf[off++] = (byte) v;\n+                    }\n+                } else {\n+                    buf = new byte[negative ? 11 : 10];\n+                    if (negative) {\n+                        buf[0] = '-';\n+                        off = 1;\n+                    }\n+                    ByteArray.setInt(buf, off, ((q3 + '0') << 24) | (digits[q2 - q3 * 1000] & 0xffffff));\n+                    off += 4;\n+                }\n+\n+                ByteArray.setShort(buf, off, (short) (v2 >> 8));\n+                ByteArray.setInt(buf, off + 2, (v2 << 24) | (v1 & 0xffffff));\n+            }\n+        }\n+        return new String(buf, LATIN1);\n@@ -1054,0 +1141,60 @@\n+    \/**\n+     * cache array for 0-999 digits\n+     *\/\n+    static final class DecimalDigits {\n+        \/**\n+         * Use the four bytes of int to represent one blank_size byte and three ascii bytes. The four bytes are:\n+         * <pre>\n+         *     blank_size, c0, c1, c2\n+         * <\/pre>\n+         * The logic for calculating blank_size is\n+         * <pre>\n+         *     blank_size = value < 10 ? 2 : (value < 100 ? 1 : 0)\n+         * <\/pre>\n+         * The 1000 elements are as follows :\n+         * <pre>\n+         *       0 -> 2 0 0 0 -> (2 << 24) | ('0' << 16) | ('0' << 8) | '0' -> 0x2303030\n+         *       1 -> 2 0 0 1 -> (2 << 24) | ('0' << 16) | ('0' << 8) | '1' -> 0x2303031\n+         *       2 -> 2 0 0 2 -> (2 << 24) | ('0' << 16) | ('0' << 8) | '2' -> 0x2303032\n+         *\n+         *     ...\n+         *\n+         *      10 -> 1 0 1 0 -> (1 << 24) | ('0' << 16) | ('1' << 8) | '0' -> 0x1303130\n+         *      11 -> 1 0 1 1 -> (1 << 24) | ('0' << 16) | ('1' << 8) | '1' -> 0x1303131\n+         *      12 -> 1 0 1 2 -> (1 << 24) | ('0' << 16) | ('1' << 8) | '2' -> 0x1303132\n+         *\n+         *     ...\n+         *\n+         *     100 -> 0 1 0 0 -> (0 << 24) | ('1' << 16) | ('0' << 8) | '0' -> 0x313030\n+         *     101 -> 0 1 0 1 -> (0 << 24) | ('1' << 16) | ('0' << 8) | '1' -> 0x313031\n+         *     102 -> 0 1 0 2 -> (0 << 24) | ('1' << 16) | ('0' << 8) | '2' -> 0x313032\n+         *\n+         *     ...\n+         *\n+         *     997 -> 0 9 9 7 -> (0 << 24) | ('9' << 16) | ('9' << 8) | '7' -> 0x393937\n+         *     998 -> 0 9 9 8 -> (0 << 24) | ('9' << 16) | ('9' << 8) | '8' -> 0x393938\n+         *     999 -> 0 9 9 9 -> (0 << 24) | ('9' << 16) | ('9' << 8) | '9' -> 0x393939\n+         * <\/pre>\n+         *\/\n+        @Stable\n+        static final int[] DIGITS;\n+\n+        static {\n+            int[] digits = new int[1000];\n+            for (int i = 0; i < 10; i++) {\n+                int i100 = i * 100;\n+                for (int j = 0; j < 10; j++) {\n+                    int j10 = j * 10;\n+                    for (int k = 0; k < 10; k++) {\n+                        digits[i100 + j10 + k]\n+                                = ((i == 0 && j == 0) ? 2 : (i == 0) ? 1 : 0) << 24\n+                                | ((i + '0') << 16)\n+                                | ((j + '0') << 8)\n+                                | (k + '0');\n+                    }\n+                }\n+            }\n+            DIGITS = digits;\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":153,"deletions":6,"binary":false,"changes":159,"status":"modified"}]}