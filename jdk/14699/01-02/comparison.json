{"files":[{"patch":"@@ -30,1 +30,1 @@\n-import jdk.internal.util.ByteArray;\n+import jdk.internal.misc.Unsafe;\n@@ -444,0 +444,33 @@\n+    \/**\n+     * Each element of the array represents the packaging of two ascii characters based on little endian:<p>\n+     * <pre>\n+     *       0 -> '0' | ('0' << 8) -> 0x3030\n+     *       1 -> '1' | ('0' << 8) -> 0x3130\n+     *       2 -> '2' | ('0' << 8) -> 0x3230\n+     *\n+     *     ...\n+     *\n+     *      10 -> '0' | ('1' << 8)-> 0x3031\n+     *      11 -> '1' | ('1' << 8)-> 0x3131\n+     *      12 -> '2' | ('1' << 8)-> 0x3231\n+     *\n+     *     ...\n+     *\n+     *      97 -> '7' | ('9' << 8) -> 0x3739\n+     *      98 -> '8' | ('9' << 8) -> 0x3839\n+     *      99 -> '9' | ('9' << 8) -> 0x3939\n+     * <\/pre>\n+     *\/\n+    @Stable\n+    static final short[] DigitPacks = new short[] {\n+            0x3030, 0x3130, 0x3230, 0x3330, 0x3430, 0x3530, 0x3630, 0x3730, 0x3830, 0x3930,\n+            0x3031, 0x3131, 0x3231, 0x3331, 0x3431, 0x3531, 0x3631, 0x3731, 0x3831, 0x3931,\n+            0x3032, 0x3132, 0x3232, 0x3332, 0x3432, 0x3532, 0x3632, 0x3732, 0x3832, 0x3932,\n+            0x3033, 0x3133, 0x3233, 0x3333, 0x3433, 0x3533, 0x3633, 0x3733, 0x3833, 0x3933,\n+            0x3034, 0x3134, 0x3234, 0x3334, 0x3434, 0x3534, 0x3634, 0x3734, 0x3834, 0x3934,\n+            0x3035, 0x3135, 0x3235, 0x3335, 0x3435, 0x3535, 0x3635, 0x3735, 0x3835, 0x3935,\n+            0x3036, 0x3136, 0x3236, 0x3336, 0x3436, 0x3536, 0x3636, 0x3736, 0x3836, 0x3936,\n+            0x3037, 0x3137, 0x3237, 0x3337, 0x3437, 0x3537, 0x3637, 0x3737, 0x3837, 0x3937,\n+            0x3038, 0x3138, 0x3238, 0x3338, 0x3438, 0x3538, 0x3638, 0x3738, 0x3838, 0x3938,\n+            0x3039, 0x3139, 0x3239, 0x3339, 0x3439, 0x3539, 0x3639, 0x3739, 0x3839, 0x3939\n+    };\n@@ -457,2 +490,6 @@\n-        if (!COMPACT_STRINGS) {\n-            int size = stringSize(i);\n+        int size = stringSize(i);\n+        if (COMPACT_STRINGS) {\n+            byte[] buf = new byte[size];\n+            getChars(i, size, buf);\n+            return new String(buf, LATIN1);\n+        } else {\n@@ -463,90 +500,0 @@\n-\n-        if (i == Integer.MIN_VALUE) {\n-            return \"-2147483648\";\n-        }\n-\n-        boolean negative = i < 0;\n-        if (negative) {\n-            i = -i;\n-        }\n-        final int[] digits = DecimalDigits.DIGITS;\n-        int off = 0;\n-        byte[] buf;\n-        if (i < 1000) {\n-            int v = digits[i];\n-            final int start = v >> 24;\n-            buf = new byte[(negative ? 4 : 3) - start];\n-            if (negative) {\n-                buf[0] = '-';\n-                off = 1;\n-            }\n-\n-            if (start == 0) {\n-                buf[off] = (byte) (v >> 16);\n-                ByteArray.setShort(buf, off + 1, (short) v);\n-            } else if (start == 1) {\n-                ByteArray.setShort(buf, off, (short) v);\n-            } else {\n-                buf[off] = (byte) v;\n-            }\n-        } else {\n-            final int q1 = i \/ 1000;\n-            final int r1 = i - q1 * 1000;\n-            final int v1 = digits[r1];\n-            if (i < 1000000) {\n-                final int v2 = digits[q1];\n-                int start = v2 >> 24;\n-\n-                buf = new byte[(negative ? 7 : 6) - start];\n-                if (negative) {\n-                    buf[0] = '-';\n-                    off = 1;\n-                }\n-\n-                if (start == 0) {\n-                    ByteArray.setShort(buf, off, (short) (v2 >> 8));\n-                    off += 2;\n-                } else if (start == 1) {\n-                    buf[off++] = (byte) (v2 >> 8);\n-                }\n-                ByteArray.setInt(buf, off, v2 << 24 | (v1 & 0xffffff));\n-            } else {\n-                final int q2 = q1 \/ 1000;\n-                final int r2 = q1 - q2 * 1000;\n-                final int q3 = q2 \/ 1000;\n-                final int v2 = digits[r2];\n-                if (q3 == 0) {\n-                    int v = digits[q2];\n-                    final int start = v >> 24;\n-\n-                    buf = new byte[(negative ? 10 : 9) - start];\n-                    if (negative) {\n-                        buf[0] = '-';\n-                        off = 1;\n-                    }\n-\n-                    if (start == 0) {\n-                        buf[off] = (byte) (v >> 16);\n-                        ByteArray.setShort(buf, off + 1, (short) v);\n-                        off += 3;\n-                    } else if (start == 1) {\n-                        ByteArray.setShort(buf, off, (short) v);\n-                        off += 2;\n-                    } else {\n-                        buf[off++] = (byte) v;\n-                    }\n-                } else {\n-                    buf = new byte[negative ? 11 : 10];\n-                    if (negative) {\n-                        buf[0] = '-';\n-                        off = 1;\n-                    }\n-                    ByteArray.setInt(buf, off, ((q3 + '0') << 24) | (digits[q2 - q3 * 1000] & 0xffffff));\n-                    off += 4;\n-                }\n-\n-                ByteArray.setShort(buf, off, (short) (v2 >> 8));\n-                ByteArray.setInt(buf, off + 2, (v2 << 24) | (v1 & 0xffffff));\n-            }\n-        }\n-        return new String(buf, LATIN1);\n@@ -604,2 +551,2 @@\n-            buf[--charPos] = DigitOnes[r];\n-            buf[--charPos] = DigitTens[r];\n+            charPos -= 2;\n+            Unsafe.getUnsafe().putShortUnaligned(buf, Unsafe.ARRAY_BYTE_BASE_OFFSET + charPos, DigitPacks[r]);\n@@ -1141,60 +1088,0 @@\n-    \/**\n-     * cache array for 0-999 digits\n-     *\/\n-    static final class DecimalDigits {\n-        \/**\n-         * Use the four bytes of int to represent one blank_size byte and three ascii bytes. The four bytes are:\n-         * <pre>\n-         *     blank_size, c0, c1, c2\n-         * <\/pre>\n-         * The logic for calculating blank_size is\n-         * <pre>\n-         *     blank_size = value < 10 ? 2 : (value < 100 ? 1 : 0)\n-         * <\/pre>\n-         * The 1000 elements are as follows :\n-         * <pre>\n-         *       0 -> 2 0 0 0 -> (2 << 24) | ('0' << 16) | ('0' << 8) | '0' -> 0x2303030\n-         *       1 -> 2 0 0 1 -> (2 << 24) | ('0' << 16) | ('0' << 8) | '1' -> 0x2303031\n-         *       2 -> 2 0 0 2 -> (2 << 24) | ('0' << 16) | ('0' << 8) | '2' -> 0x2303032\n-         *\n-         *     ...\n-         *\n-         *      10 -> 1 0 1 0 -> (1 << 24) | ('0' << 16) | ('1' << 8) | '0' -> 0x1303130\n-         *      11 -> 1 0 1 1 -> (1 << 24) | ('0' << 16) | ('1' << 8) | '1' -> 0x1303131\n-         *      12 -> 1 0 1 2 -> (1 << 24) | ('0' << 16) | ('1' << 8) | '2' -> 0x1303132\n-         *\n-         *     ...\n-         *\n-         *     100 -> 0 1 0 0 -> (0 << 24) | ('1' << 16) | ('0' << 8) | '0' -> 0x313030\n-         *     101 -> 0 1 0 1 -> (0 << 24) | ('1' << 16) | ('0' << 8) | '1' -> 0x313031\n-         *     102 -> 0 1 0 2 -> (0 << 24) | ('1' << 16) | ('0' << 8) | '2' -> 0x313032\n-         *\n-         *     ...\n-         *\n-         *     997 -> 0 9 9 7 -> (0 << 24) | ('9' << 16) | ('9' << 8) | '7' -> 0x393937\n-         *     998 -> 0 9 9 8 -> (0 << 24) | ('9' << 16) | ('9' << 8) | '8' -> 0x393938\n-         *     999 -> 0 9 9 9 -> (0 << 24) | ('9' << 16) | ('9' << 8) | '9' -> 0x393939\n-         * <\/pre>\n-         *\/\n-        @Stable\n-        static final int[] DIGITS;\n-\n-        static {\n-            int[] digits = new int[1000];\n-            for (int i = 0; i < 10; i++) {\n-                int i100 = i * 100;\n-                for (int j = 0; j < 10; j++) {\n-                    int j10 = j * 10;\n-                    for (int k = 0; k < 10; k++) {\n-                        digits[i100 + j10 + k]\n-                                = ((i == 0 && j == 0) ? 2 : (i == 0) ? 1 : 0) << 24\n-                                | ((i + '0') << 16)\n-                                | ((j + '0') << 8)\n-                                | (k + '0');\n-                    }\n-                }\n-            }\n-            DIGITS = digits;\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":42,"deletions":155,"binary":false,"changes":197,"status":"modified"}]}