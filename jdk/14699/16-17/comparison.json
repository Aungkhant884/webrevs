{"files":[{"patch":"@@ -835,1 +835,1 @@\n-            Integer.getChars(i, spaceNeeded, value);\n+            StringLatin1.getChars(i, spaceNeeded, value);\n@@ -860,1 +860,1 @@\n-            Long.getChars(l, spaceNeeded, value);\n+            StringLatin1.getChars(l, spaceNeeded, value);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import jdk.internal.misc.Unsafe;\n@@ -77,2 +76,0 @@\n-    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n-\n@@ -420,34 +417,0 @@\n-    \/**\n-     * Each element of the array represents the packaging of two ascii characters based on little endian:<p>\n-     * <pre>\n-     *      00 -> '0' | ('0' << 8) -> 0x3030\n-     *      01 -> '1' | ('0' << 8) -> 0x3130\n-     *      02 -> '2' | ('0' << 8) -> 0x3230\n-     *\n-     *     ...\n-     *\n-     *      10 -> '0' | ('1' << 8) -> 0x3031\n-     *      11 -> '1' | ('1' << 8) -> 0x3131\n-     *      12 -> '2' | ('1' << 8) -> 0x3231\n-     *\n-     *     ...\n-     *\n-     *      97 -> '7' | ('9' << 8) -> 0x3739\n-     *      98 -> '8' | ('9' << 8) -> 0x3839\n-     *      99 -> '9' | ('9' << 8) -> 0x3939\n-     * <\/pre>\n-     *\/\n-    @Stable\n-    static final short[] PACKED_DIGITS = new short[] {\n-            0x3030, 0x3130, 0x3230, 0x3330, 0x3430, 0x3530, 0x3630, 0x3730, 0x3830, 0x3930,\n-            0x3031, 0x3131, 0x3231, 0x3331, 0x3431, 0x3531, 0x3631, 0x3731, 0x3831, 0x3931,\n-            0x3032, 0x3132, 0x3232, 0x3332, 0x3432, 0x3532, 0x3632, 0x3732, 0x3832, 0x3932,\n-            0x3033, 0x3133, 0x3233, 0x3333, 0x3433, 0x3533, 0x3633, 0x3733, 0x3833, 0x3933,\n-            0x3034, 0x3134, 0x3234, 0x3334, 0x3434, 0x3534, 0x3634, 0x3734, 0x3834, 0x3934,\n-            0x3035, 0x3135, 0x3235, 0x3335, 0x3435, 0x3535, 0x3635, 0x3735, 0x3835, 0x3935,\n-            0x3036, 0x3136, 0x3236, 0x3336, 0x3436, 0x3536, 0x3636, 0x3736, 0x3836, 0x3936,\n-            0x3037, 0x3137, 0x3237, 0x3337, 0x3437, 0x3537, 0x3637, 0x3737, 0x3837, 0x3937,\n-            0x3038, 0x3138, 0x3238, 0x3338, 0x3438, 0x3538, 0x3638, 0x3738, 0x3838, 0x3938,\n-            0x3039, 0x3139, 0x3239, 0x3339, 0x3439, 0x3539, 0x3639, 0x3739, 0x3839, 0x3939\n-    };\n-\n@@ -469,1 +432,1 @@\n-            getChars(i, size, buf);\n+            StringLatin1.getChars(i, size, buf);\n@@ -496,51 +459,0 @@\n-    \/**\n-     * Places characters representing the integer i into the\n-     * character array buf. The characters are placed into\n-     * the buffer backwards starting with the least significant\n-     * digit at the specified index (exclusive), and working\n-     * backwards from there.\n-     *\n-     * @implNote This method converts positive inputs into negative\n-     * values, to cover the Integer.MIN_VALUE case. Converting otherwise\n-     * (negative to positive) will expose -Integer.MIN_VALUE that overflows\n-     * integer.\n-     *\n-     * @param i     value to convert\n-     * @param index next index, after the least significant digit\n-     * @param buf   target buffer, Latin1-encoded\n-     * @return index of the most significant digit or minus sign, if present\n-     *\/\n-    static int getChars(int i, int index, byte[] buf) {\n-        int q, r;\n-        int charPos = index;\n-\n-        boolean negative = i < 0;\n-        if (!negative) {\n-            i = -i;\n-        }\n-\n-        \/\/ Generate two digits per iteration\n-        while (i <= -100) {\n-            q = i \/ 100;\n-            r = (q * 100) - i;\n-            i = q;\n-            charPos -= 2;\n-            assert charPos >= 0 && charPos < buf.length : \"Trusted caller missed bounds check\";\n-            UNSAFE.putShortUnaligned(buf, Unsafe.ARRAY_BYTE_BASE_OFFSET + charPos, PACKED_DIGITS[r], false);\n-        }\n-\n-        \/\/ We know there are at most two digits left at this point.\n-        if (i < -9) {\n-            charPos -= 2;\n-            assert charPos >= 0 && charPos < buf.length : \"Trusted caller missed bounds check\";\n-            UNSAFE.putShortUnaligned(buf, Unsafe.ARRAY_BYTE_BASE_OFFSET + charPos, PACKED_DIGITS[-i], false);\n-        } else {\n-            buf[--charPos] = (byte)('0' - i);\n-        }\n-\n-        if (negative) {\n-            buf[--charPos] = (byte)'-';\n-        }\n-        return charPos;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":1,"deletions":89,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import jdk.internal.misc.Unsafe;\n@@ -77,2 +76,0 @@\n-    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n-\n@@ -465,1 +462,1 @@\n-            getChars(i, size, buf);\n+            StringLatin1.getChars(i, size, buf);\n@@ -492,73 +489,0 @@\n-    \/**\n-     * Places characters representing the long i into the\n-     * character array buf. The characters are placed into\n-     * the buffer backwards starting with the least significant\n-     * digit at the specified index (exclusive), and working\n-     * backwards from there.\n-     *\n-     * @implNote This method converts positive inputs into negative\n-     * values, to cover the Long.MIN_VALUE case. Converting otherwise\n-     * (negative to positive) will expose -Long.MIN_VALUE that overflows\n-     * long.\n-     *\n-     * @param i     value to convert\n-     * @param index next index, after the least significant digit\n-     * @param buf   target buffer, Latin1-encoded\n-     * @return index of the most significant digit or minus sign, if present\n-     *\/\n-    static int getChars(long i, int index, byte[] buf) {\n-        long q;\n-        int charPos = index;\n-\n-        boolean negative = (i < 0);\n-        if (!negative) {\n-            i = -i;\n-        }\n-\n-        \/\/ Get 2 digits\/iteration using longs until quotient fits into an int\n-        while (i <= Integer.MIN_VALUE) {\n-            q = i \/ 100;\n-            charPos -= 2;\n-            assert charPos >= 0 && charPos < buf.length : \"Trusted caller missed bounds check\";\n-            UNSAFE.putShortUnaligned(\n-                    buf,\n-                    Unsafe.ARRAY_BYTE_BASE_OFFSET + charPos,\n-                    Integer.PACKED_DIGITS[(int)((q * 100) - i)],\n-                    false);\n-            i = q;\n-        }\n-\n-        \/\/ Get 2 digits\/iteration using ints\n-        int q2;\n-        int i2 = (int)i;\n-        while (i2 <= -100) {\n-            q2 = i2 \/ 100;\n-            charPos -= 2;\n-            assert charPos >= 0 && charPos < buf.length : \"Trusted caller missed bounds check\";\n-            UNSAFE.putShortUnaligned(\n-                    buf,\n-                    Unsafe.ARRAY_BYTE_BASE_OFFSET + charPos,\n-                    Integer.PACKED_DIGITS[(q2 * 100) - i2],\n-                    false);\n-            i2 = q2;\n-        }\n-\n-        \/\/ We know there are at most two digits left at this point.\n-        if (i2 < -9) {\n-            charPos -= 2;\n-            assert charPos >= 0 && charPos < buf.length : \"Trusted caller missed bounds check\";\n-            UNSAFE.putShortUnaligned(\n-                    buf,\n-                    Unsafe.ARRAY_BYTE_BASE_OFFSET + charPos,\n-                    Integer.PACKED_DIGITS[-i2],\n-                    false);\n-        } else {\n-            buf[--charPos] = (byte)('0' - i2);\n-        }\n-\n-        if (negative) {\n-            buf[--charPos] = (byte)'-';\n-        }\n-        return charPos;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":1,"deletions":77,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -253,1 +253,1 @@\n-            return Integer.getChars(value, (int)indexCoder, buf);\n+            return StringLatin1.getChars(value, (int)indexCoder, buf);\n@@ -288,1 +288,1 @@\n-            return Long.getChars(value, (int)indexCoder, buf);\n+            return StringLatin1.getChars(value, (int)indexCoder, buf);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -37,0 +38,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -45,0 +47,36 @@\n+    \/**\n+     * Each element of the array represents the packaging of two ascii characters based on little endian:<p>\n+     * <pre>\n+     *      00 -> '0' | ('0' << 8) -> 0x3030\n+     *      01 -> '1' | ('0' << 8) -> 0x3130\n+     *      02 -> '2' | ('0' << 8) -> 0x3230\n+     *\n+     *     ...\n+     *\n+     *      10 -> '0' | ('1' << 8) -> 0x3031\n+     *      11 -> '1' | ('1' << 8) -> 0x3131\n+     *      12 -> '2' | ('1' << 8) -> 0x3231\n+     *\n+     *     ...\n+     *\n+     *      97 -> '7' | ('9' << 8) -> 0x3739\n+     *      98 -> '8' | ('9' << 8) -> 0x3839\n+     *      99 -> '9' | ('9' << 8) -> 0x3939\n+     * <\/pre>\n+     *\/\n+    @Stable\n+    static final short[] PACKED_DIGITS = new short[] {\n+            0x3030, 0x3130, 0x3230, 0x3330, 0x3430, 0x3530, 0x3630, 0x3730, 0x3830, 0x3930,\n+            0x3031, 0x3131, 0x3231, 0x3331, 0x3431, 0x3531, 0x3631, 0x3731, 0x3831, 0x3931,\n+            0x3032, 0x3132, 0x3232, 0x3332, 0x3432, 0x3532, 0x3632, 0x3732, 0x3832, 0x3932,\n+            0x3033, 0x3133, 0x3233, 0x3333, 0x3433, 0x3533, 0x3633, 0x3733, 0x3833, 0x3933,\n+            0x3034, 0x3134, 0x3234, 0x3334, 0x3434, 0x3534, 0x3634, 0x3734, 0x3834, 0x3934,\n+            0x3035, 0x3135, 0x3235, 0x3335, 0x3435, 0x3535, 0x3635, 0x3735, 0x3835, 0x3935,\n+            0x3036, 0x3136, 0x3236, 0x3336, 0x3436, 0x3536, 0x3636, 0x3736, 0x3836, 0x3936,\n+            0x3037, 0x3137, 0x3237, 0x3337, 0x3437, 0x3537, 0x3637, 0x3737, 0x3837, 0x3937,\n+            0x3038, 0x3138, 0x3238, 0x3338, 0x3438, 0x3538, 0x3638, 0x3738, 0x3838, 0x3938,\n+            0x3039, 0x3139, 0x3239, 0x3339, 0x3439, 0x3539, 0x3639, 0x3739, 0x3839, 0x3939\n+    };\n+\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+\n@@ -82,0 +120,124 @@\n+    \/**\n+     * Places characters representing the integer i into the\n+     * character array buf. The characters are placed into\n+     * the buffer backwards starting with the least significant\n+     * digit at the specified index (exclusive), and working\n+     * backwards from there.\n+     *\n+     * @implNote This method converts positive inputs into negative\n+     * values, to cover the Integer.MIN_VALUE case. Converting otherwise\n+     * (negative to positive) will expose -Integer.MIN_VALUE that overflows\n+     * integer.\n+     *\n+     * @param i     value to convert\n+     * @param index next index, after the least significant digit\n+     * @param buf   target buffer, Latin1-encoded\n+     * @return index of the most significant digit or minus sign, if present\n+     *\/\n+    static int getChars(int i, int index, byte[] buf) {\n+        int q, r;\n+        int charPos = index;\n+\n+        boolean negative = i < 0;\n+        if (!negative) {\n+            i = -i;\n+        }\n+\n+        \/\/ Generate two digits per iteration\n+        while (i <= -100) {\n+            q = i \/ 100;\n+            r = (q * 100) - i;\n+            i = q;\n+            charPos -= 2;\n+            assert charPos >= 0 && charPos < buf.length : \"Trusted caller missed bounds check\";\n+            UNSAFE.putShortUnaligned(buf, Unsafe.ARRAY_BYTE_BASE_OFFSET + charPos, PACKED_DIGITS[r], false);\n+        }\n+\n+        \/\/ We know there are at most two digits left at this point.\n+        if (i < -9) {\n+            charPos -= 2;\n+            assert charPos >= 0 && charPos < buf.length : \"Trusted caller missed bounds check\";\n+            UNSAFE.putShortUnaligned(buf, Unsafe.ARRAY_BYTE_BASE_OFFSET + charPos, PACKED_DIGITS[-i], false);\n+        } else {\n+            buf[--charPos] = (byte)('0' - i);\n+        }\n+\n+        if (negative) {\n+            buf[--charPos] = (byte)'-';\n+        }\n+        return charPos;\n+    }\n+\n+    \/**\n+     * Places characters representing the long i into the\n+     * character array buf. The characters are placed into\n+     * the buffer backwards starting with the least significant\n+     * digit at the specified index (exclusive), and working\n+     * backwards from there.\n+     *\n+     * @implNote This method converts positive inputs into negative\n+     * values, to cover the Long.MIN_VALUE case. Converting otherwise\n+     * (negative to positive) will expose -Long.MIN_VALUE that overflows\n+     * long.\n+     *\n+     * @param i     value to convert\n+     * @param index next index, after the least significant digit\n+     * @param buf   target buffer, Latin1-encoded\n+     * @return index of the most significant digit or minus sign, if present\n+     *\/\n+    static int getChars(long i, int index, byte[] buf) {\n+        long q;\n+        int charPos = index;\n+\n+        boolean negative = (i < 0);\n+        if (!negative) {\n+            i = -i;\n+        }\n+\n+        \/\/ Get 2 digits\/iteration using longs until quotient fits into an int\n+        while (i <= Integer.MIN_VALUE) {\n+            q = i \/ 100;\n+            charPos -= 2;\n+            assert charPos >= 0 && charPos < buf.length : \"Trusted caller missed bounds check\";\n+            UNSAFE.putShortUnaligned(\n+                    buf,\n+                    Unsafe.ARRAY_BYTE_BASE_OFFSET + charPos,\n+                    PACKED_DIGITS[(int)((q * 100) - i)],\n+                    false);\n+            i = q;\n+        }\n+\n+        \/\/ Get 2 digits\/iteration using ints\n+        int q2;\n+        int i2 = (int)i;\n+        while (i2 <= -100) {\n+            q2 = i2 \/ 100;\n+            charPos -= 2;\n+            assert charPos >= 0 && charPos < buf.length : \"Trusted caller missed bounds check\";\n+            UNSAFE.putShortUnaligned(\n+                    buf,\n+                    Unsafe.ARRAY_BYTE_BASE_OFFSET + charPos,\n+                    PACKED_DIGITS[(q2 * 100) - i2],\n+                    false);\n+            i2 = q2;\n+        }\n+\n+        \/\/ We know there are at most two digits left at this point.\n+        if (i2 < -9) {\n+            charPos -= 2;\n+            assert charPos >= 0 && charPos < buf.length : \"Trusted caller missed bounds check\";\n+            UNSAFE.putShortUnaligned(\n+                    buf,\n+                    Unsafe.ARRAY_BYTE_BASE_OFFSET + charPos,\n+                    PACKED_DIGITS[-i2],\n+                    false);\n+        } else {\n+            buf[--charPos] = (byte)('0' - i2);\n+        }\n+\n+        if (negative) {\n+            buf[--charPos] = (byte)'-';\n+        }\n+        return charPos;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"modified"},{"patch":"@@ -1525,1 +1525,1 @@\n-     * This is a variant of {@link Integer#getChars(int, int, byte[])}, but for\n+     * This is a variant of {@link StringLatin1#getChars(int, int, byte[])}, but for\n@@ -1548,1 +1548,1 @@\n-            int packed = (int) Integer.PACKED_DIGITS[r];\n+            int packed = (int) StringLatin1.PACKED_DIGITS[r];\n@@ -1562,1 +1562,1 @@\n-            int packed = (int) Integer.PACKED_DIGITS[-i];\n+            int packed = (int) StringLatin1.PACKED_DIGITS[-i];\n@@ -1583,1 +1583,1 @@\n-     * This is a variant of {@link Long#getChars(long, int, byte[])}, but for\n+     * This is a variant of {@link StringLatin1#getChars(long, int, byte[])}, but for\n@@ -1604,1 +1604,1 @@\n-            int packed = (int) Integer.PACKED_DIGITS[(int)((q * 100) - i)];\n+            int packed = (int) StringLatin1.PACKED_DIGITS[(int)((q * 100) - i)];\n@@ -1623,1 +1623,1 @@\n-            int packed = (int) Integer.PACKED_DIGITS[(q2 * 100) - i2];\n+            int packed = (int) StringLatin1.PACKED_DIGITS[(q2 * 100) - i2];\n@@ -1640,1 +1640,1 @@\n-            int packed = (int) Integer.PACKED_DIGITS[-i2];\n+            int packed = (int) StringLatin1.PACKED_DIGITS[-i2];\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}