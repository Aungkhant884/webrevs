{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -835,1 +835,1 @@\n-            Integer.getChars(i, spaceNeeded, value);\n+            StringLatin1.getChars(i, spaceNeeded, value);\n@@ -860,1 +860,1 @@\n-            Long.getChars(l, spaceNeeded, value);\n+            StringLatin1.getChars(l, spaceNeeded, value);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -417,27 +417,0 @@\n-    static final byte[] DigitTens = {\n-        '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',\n-        '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',\n-        '2', '2', '2', '2', '2', '2', '2', '2', '2', '2',\n-        '3', '3', '3', '3', '3', '3', '3', '3', '3', '3',\n-        '4', '4', '4', '4', '4', '4', '4', '4', '4', '4',\n-        '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\n-        '6', '6', '6', '6', '6', '6', '6', '6', '6', '6',\n-        '7', '7', '7', '7', '7', '7', '7', '7', '7', '7',\n-        '8', '8', '8', '8', '8', '8', '8', '8', '8', '8',\n-        '9', '9', '9', '9', '9', '9', '9', '9', '9', '9',\n-        } ;\n-\n-    static final byte[] DigitOnes = {\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        } ;\n-\n-\n@@ -459,1 +432,1 @@\n-            getChars(i, size, buf);\n+            StringLatin1.getChars(i, size, buf);\n@@ -486,47 +459,0 @@\n-    \/**\n-     * Places characters representing the integer i into the\n-     * character array buf. The characters are placed into\n-     * the buffer backwards starting with the least significant\n-     * digit at the specified index (exclusive), and working\n-     * backwards from there.\n-     *\n-     * @implNote This method converts positive inputs into negative\n-     * values, to cover the Integer.MIN_VALUE case. Converting otherwise\n-     * (negative to positive) will expose -Integer.MIN_VALUE that overflows\n-     * integer.\n-     *\n-     * @param i     value to convert\n-     * @param index next index, after the least significant digit\n-     * @param buf   target buffer, Latin1-encoded\n-     * @return index of the most significant digit or minus sign, if present\n-     *\/\n-    static int getChars(int i, int index, byte[] buf) {\n-        int q, r;\n-        int charPos = index;\n-\n-        boolean negative = i < 0;\n-        if (!negative) {\n-            i = -i;\n-        }\n-\n-        \/\/ Generate two digits per iteration\n-        while (i <= -100) {\n-            q = i \/ 100;\n-            r = (q * 100) - i;\n-            i = q;\n-            buf[--charPos] = DigitOnes[r];\n-            buf[--charPos] = DigitTens[r];\n-        }\n-\n-        \/\/ We know there are at most two digits left at this point.\n-        buf[--charPos] = DigitOnes[-i];\n-        if (i < -9) {\n-            buf[--charPos] = DigitTens[-i];\n-        }\n-\n-        if (negative) {\n-            buf[--charPos] = (byte)'-';\n-        }\n-        return charPos;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":1,"deletions":75,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -462,1 +462,1 @@\n-            getChars(i, size, buf);\n+            StringLatin1.getChars(i, size, buf);\n@@ -489,59 +489,0 @@\n-    \/**\n-     * Places characters representing the long i into the\n-     * character array buf. The characters are placed into\n-     * the buffer backwards starting with the least significant\n-     * digit at the specified index (exclusive), and working\n-     * backwards from there.\n-     *\n-     * @implNote This method converts positive inputs into negative\n-     * values, to cover the Long.MIN_VALUE case. Converting otherwise\n-     * (negative to positive) will expose -Long.MIN_VALUE that overflows\n-     * long.\n-     *\n-     * @param i     value to convert\n-     * @param index next index, after the least significant digit\n-     * @param buf   target buffer, Latin1-encoded\n-     * @return index of the most significant digit or minus sign, if present\n-     *\/\n-    static int getChars(long i, int index, byte[] buf) {\n-        long q;\n-        int r;\n-        int charPos = index;\n-\n-        boolean negative = (i < 0);\n-        if (!negative) {\n-            i = -i;\n-        }\n-\n-        \/\/ Get 2 digits\/iteration using longs until quotient fits into an int\n-        while (i <= Integer.MIN_VALUE) {\n-            q = i \/ 100;\n-            r = (int)((q * 100) - i);\n-            i = q;\n-            buf[--charPos] = Integer.DigitOnes[r];\n-            buf[--charPos] = Integer.DigitTens[r];\n-        }\n-\n-        \/\/ Get 2 digits\/iteration using ints\n-        int q2;\n-        int i2 = (int)i;\n-        while (i2 <= -100) {\n-            q2 = i2 \/ 100;\n-            r  = (q2 * 100) - i2;\n-            i2 = q2;\n-            buf[--charPos] = Integer.DigitOnes[r];\n-            buf[--charPos] = Integer.DigitTens[r];\n-        }\n-\n-        \/\/ We know there are at most two digits left at this point.\n-        buf[--charPos] = Integer.DigitOnes[-i2];\n-        if (i2 < -9) {\n-            buf[--charPos] = Integer.DigitTens[-i2];\n-        }\n-\n-        if (negative) {\n-            buf[--charPos] = (byte)'-';\n-        }\n-        return charPos;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":1,"deletions":60,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -253,1 +253,1 @@\n-            return Integer.getChars(value, (int)indexCoder, buf);\n+            return StringLatin1.getChars(value, (int)indexCoder, buf);\n@@ -288,1 +288,1 @@\n-            return Long.getChars(value, (int)indexCoder, buf);\n+            return StringLatin1.getChars(value, (int)indexCoder, buf);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.util.ByteArrayLittleEndian;\n@@ -37,0 +38,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -45,0 +47,34 @@\n+    \/**\n+     * Each element of the array represents the packaging of two ascii characters based on little endian:<p>\n+     * <pre>\n+     *      00 -> '0' | ('0' << 8) -> 0x3030\n+     *      01 -> '1' | ('0' << 8) -> 0x3130\n+     *      02 -> '2' | ('0' << 8) -> 0x3230\n+     *\n+     *     ...\n+     *\n+     *      10 -> '0' | ('1' << 8) -> 0x3031\n+     *      11 -> '1' | ('1' << 8) -> 0x3131\n+     *      12 -> '2' | ('1' << 8) -> 0x3231\n+     *\n+     *     ...\n+     *\n+     *      97 -> '7' | ('9' << 8) -> 0x3739\n+     *      98 -> '8' | ('9' << 8) -> 0x3839\n+     *      99 -> '9' | ('9' << 8) -> 0x3939\n+     * <\/pre>\n+     *\/\n+    @Stable\n+    static final short[] PACKED_DIGITS = new short[] {\n+            0x3030, 0x3130, 0x3230, 0x3330, 0x3430, 0x3530, 0x3630, 0x3730, 0x3830, 0x3930,\n+            0x3031, 0x3131, 0x3231, 0x3331, 0x3431, 0x3531, 0x3631, 0x3731, 0x3831, 0x3931,\n+            0x3032, 0x3132, 0x3232, 0x3332, 0x3432, 0x3532, 0x3632, 0x3732, 0x3832, 0x3932,\n+            0x3033, 0x3133, 0x3233, 0x3333, 0x3433, 0x3533, 0x3633, 0x3733, 0x3833, 0x3933,\n+            0x3034, 0x3134, 0x3234, 0x3334, 0x3434, 0x3534, 0x3634, 0x3734, 0x3834, 0x3934,\n+            0x3035, 0x3135, 0x3235, 0x3335, 0x3435, 0x3535, 0x3635, 0x3735, 0x3835, 0x3935,\n+            0x3036, 0x3136, 0x3236, 0x3336, 0x3436, 0x3536, 0x3636, 0x3736, 0x3836, 0x3936,\n+            0x3037, 0x3137, 0x3237, 0x3337, 0x3437, 0x3537, 0x3637, 0x3737, 0x3837, 0x3937,\n+            0x3038, 0x3138, 0x3238, 0x3338, 0x3438, 0x3538, 0x3638, 0x3738, 0x3838, 0x3938,\n+            0x3039, 0x3139, 0x3239, 0x3339, 0x3439, 0x3539, 0x3639, 0x3739, 0x3839, 0x3939\n+    };\n+\n@@ -82,0 +118,109 @@\n+    \/**\n+     * Places characters representing the integer i into the\n+     * character array buf. The characters are placed into\n+     * the buffer backwards starting with the least significant\n+     * digit at the specified index (exclusive), and working\n+     * backwards from there.\n+     *\n+     * @implNote This method converts positive inputs into negative\n+     * values, to cover the Integer.MIN_VALUE case. Converting otherwise\n+     * (negative to positive) will expose -Integer.MIN_VALUE that overflows\n+     * integer.\n+     *\n+     * @param i     value to convert\n+     * @param index next index, after the least significant digit\n+     * @param buf   target buffer, Latin1-encoded\n+     * @return index of the most significant digit or minus sign, if present\n+     *\/\n+    static int getChars(int i, int index, byte[] buf) {\n+        \/\/ Used by trusted callers.  Assumes all necessary bounds checks have been done by the caller.\n+        int q, r;\n+        int charPos = index;\n+\n+        boolean negative = i < 0;\n+        if (!negative) {\n+            i = -i;\n+        }\n+\n+        \/\/ Generate two digits per iteration\n+        while (i <= -100) {\n+            q = i \/ 100;\n+            r = (q * 100) - i;\n+            i = q;\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setShort(buf, charPos, PACKED_DIGITS[r]);\n+        }\n+\n+        \/\/ We know there are at most two digits left at this point.\n+        if (i < -9) {\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setShort(buf, charPos, PACKED_DIGITS[-i]);\n+        } else {\n+            buf[--charPos] = (byte)('0' - i);\n+        }\n+\n+        if (negative) {\n+            buf[--charPos] = (byte)'-';\n+        }\n+        return charPos;\n+    }\n+\n+    \/**\n+     * Places characters representing the long i into the\n+     * character array buf. The characters are placed into\n+     * the buffer backwards starting with the least significant\n+     * digit at the specified index (exclusive), and working\n+     * backwards from there.\n+     *\n+     * @implNote This method converts positive inputs into negative\n+     * values, to cover the Long.MIN_VALUE case. Converting otherwise\n+     * (negative to positive) will expose -Long.MIN_VALUE that overflows\n+     * long.\n+     *\n+     * @param i     value to convert\n+     * @param index next index, after the least significant digit\n+     * @param buf   target buffer, Latin1-encoded\n+     * @return index of the most significant digit or minus sign, if present\n+     *\/\n+    static int getChars(long i, int index, byte[] buf) {\n+        \/\/ Used by trusted callers.  Assumes all necessary bounds checks have been done by the caller.\n+        long q;\n+        int charPos = index;\n+\n+        boolean negative = (i < 0);\n+        if (!negative) {\n+            i = -i;\n+        }\n+\n+        \/\/ Get 2 digits\/iteration using longs until quotient fits into an int\n+        while (i <= Integer.MIN_VALUE) {\n+            q = i \/ 100;\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setShort(buf, charPos, PACKED_DIGITS[(int)((q * 100) - i)]);\n+            i = q;\n+        }\n+\n+        \/\/ Get 2 digits\/iteration using ints\n+        int q2;\n+        int i2 = (int)i;\n+        while (i2 <= -100) {\n+            q2 = i2 \/ 100;\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setShort(buf, charPos, PACKED_DIGITS[(q2 * 100) - i2]);\n+            i2 = q2;\n+        }\n+\n+        \/\/ We know there are at most two digits left at this point.\n+        if (i2 < -9) {\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setShort(buf, charPos, PACKED_DIGITS[-i2]);\n+        } else {\n+            buf[--charPos] = (byte)('0' - i2);\n+        }\n+\n+        if (negative) {\n+            buf[--charPos] = (byte)'-';\n+        }\n+        return charPos;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.util.ByteArrayLittleEndian;\n@@ -1522,1 +1523,1 @@\n-     * This is a variant of {@link Integer#getChars(int, int, byte[])}, but for\n+     * This is a variant of {@link StringLatin1#getChars(int, int, byte[])}, but for\n@@ -1531,0 +1532,1 @@\n+        \/\/ Used by trusted callers.  Assumes all necessary bounds checks have been done by the caller.\n@@ -1544,2 +1546,6 @@\n-            putChar(buf, --charPos, Integer.DigitOnes[r]);\n-            putChar(buf, --charPos, Integer.DigitTens[r]);\n+\n+            int packed = (int) StringLatin1.PACKED_DIGITS[r];\n+            int inflated = ((packed & 0xFF00) << 8) | (packed & 0xFF);\n+\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setInt(buf, charPos << 1, inflated);\n@@ -1549,1 +1555,0 @@\n-        putChar(buf, --charPos, Integer.DigitOnes[-i]);\n@@ -1551,1 +1556,7 @@\n-            putChar(buf, --charPos, Integer.DigitTens[-i]);\n+            int packed = (int) StringLatin1.PACKED_DIGITS[-i];\n+            int inflated = ((packed & 0xFF00) << 8) | (packed & 0xFF);\n+\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setInt(buf, charPos << 1, inflated);\n+        } else {\n+            putChar(buf, --charPos, '0' - i);\n@@ -1561,1 +1572,1 @@\n-     * This is a variant of {@link Long#getChars(long, int, byte[])}, but for\n+     * This is a variant of {@link StringLatin1#getChars(long, int, byte[])}, but for\n@@ -1570,0 +1581,1 @@\n+        \/\/ Used by trusted callers.  Assumes all necessary bounds checks have been done by the caller.\n@@ -1571,1 +1583,0 @@\n-        int r;\n@@ -1582,1 +1593,6 @@\n-            r = (int)((q * 100) - i);\n+\n+            int packed = (int) StringLatin1.PACKED_DIGITS[(int)((q * 100) - i)];\n+            int inflated = ((packed & 0xFF00) << 8) | (packed & 0xFF);\n+\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setInt(buf, charPos << 1, inflated);\n@@ -1584,2 +1600,0 @@\n-            putChar(buf, --charPos, Integer.DigitOnes[r]);\n-            putChar(buf, --charPos, Integer.DigitTens[r]);\n@@ -1593,1 +1607,6 @@\n-            r  = (q2 * 100) - i2;\n+\n+            int packed = (int) StringLatin1.PACKED_DIGITS[(q2 * 100) - i2];\n+            int inflated = ((packed & 0xFF00) << 8) | (packed & 0xFF);\n+\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setInt(buf, charPos << 1, inflated);\n@@ -1595,2 +1614,0 @@\n-            putChar(buf, --charPos, Integer.DigitOnes[r]);\n-            putChar(buf, --charPos, Integer.DigitTens[r]);\n@@ -1600,1 +1617,0 @@\n-        putChar(buf, --charPos, Integer.DigitOnes[-i2]);\n@@ -1602,1 +1618,8 @@\n-            putChar(buf, --charPos, Integer.DigitTens[-i2]);\n+            charPos -= 2;\n+\n+            int packed = (int) StringLatin1.PACKED_DIGITS[-i2];\n+            int inflated = ((packed & 0xFF00) << 8) | (packed & 0xFF);\n+\n+            ByteArrayLittleEndian.setInt(buf, charPos << 1, inflated);\n+        } else {\n+            putChar(buf, --charPos, '0' - i2);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":38,"deletions":15,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,4 @@\n- * @bug 8136500\n- * @summary Test Integer.toString method\n+ * @bug 8136500 8310929\n+ * @summary Test Integer.toString method for both compact and non-compact strings\n+ * @run junit\/othervm -XX:+CompactStrings ToString\n+ * @run junit\/othervm -XX:-CompactStrings ToString\n@@ -30,0 +32,4 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n@@ -32,1 +38,2 @@\n-    public static void main(String[] args) throws Exception {\n+    @Test\n+    public void testBase10() {\n@@ -80,4 +87,1 @@\n-        String actual = Integer.toString(value);\n-        if (!expected.equals(actual)) {\n-            throw new RuntimeException(\"Expected \" + expected + \", but got \" + actual);\n-        }\n+        assertEquals(expected, Integer.toString(value));\n","filename":"test\/jdk\/java\/lang\/Integer\/ToString.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,4 @@\n- * @bug 8136500\n- * @summary Test Long.toString method\n+ * @bug 8136500 8310929\n+ * @summary Test Long.toString method for both compact and non-compact strings\n+ * @run junit\/othervm -XX:+CompactStrings ToString\n+ * @run junit\/othervm -XX:-CompactStrings ToString\n@@ -30,0 +32,4 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n@@ -32,1 +38,2 @@\n-    public static void main(String[] args) throws Exception {\n+    @Test\n+    public void testBase10() {\n@@ -80,4 +87,1 @@\n-        String actual = Long.toString(value);\n-        if (!expected.equals(actual)) {\n-            throw new RuntimeException(\"Expected \" + expected + \", but got \" + actual);\n-        }\n+        assertEquals(expected, Long.toString(value));\n","filename":"test\/jdk\/java\/lang\/Long\/ToString.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"}]}