{"files":[{"patch":"@@ -97,7 +97,0 @@\n-    \/\/ used to identify JavaFX applications\n-    private static final String JAVAFX_APPLICATION_MARKER =\n-            \"JavaFX-Application-Class\";\n-    private static final String JAVAFX_APPLICATION_CLASS_NAME =\n-            \"javafx.application.Application\";\n-    private static final String JAVAFX_FXHELPER_CLASS_NAME_SUFFIX =\n-            \"sun.launcher.LauncherHelper$FXHelper\";\n@@ -583,11 +576,0 @@\n-            \/*\n-             * Hand off to FXHelper if it detects a JavaFX application\n-             * This must be done after ensuring a Main-Class entry\n-             * exists to enforce compliance with the jar specification\n-             *\/\n-            if (mainAttrs.containsKey(\n-                    new Attributes.Name(JAVAFX_APPLICATION_MARKER))) {\n-                FXHelper.setFXLaunchParameters(jarname, LM_JAR);\n-                return FXHelper.class.getName();\n-            }\n-\n@@ -652,2 +634,0 @@\n-     * 3. If the main class extends FX Application then call on FXHelper to\n-     * perform the launch.\n@@ -683,12 +663,0 @@\n-        \/*\n-         * Check if FXHelper can launch it using the FX launcher. In an FX app,\n-         * the main class may or may not have a main method, so do this before\n-         * validating the main class.\n-         *\/\n-        if (JAVAFX_FXHELPER_CLASS_NAME_SUFFIX.equals(mainClass.getName()) ||\n-            doesExtendFXApplication(mainClass)) {\n-            \/\/ Will abort() if there are problems with FX runtime\n-            FXHelper.setFXLaunchParameters(what, mode);\n-            mainClass = FXHelper.class;\n-        }\n-\n@@ -817,15 +785,0 @@\n-    \/*\n-     * Check if the given class is a JavaFX Application class. This is done\n-     * in a way that does not cause the Application class to load or throw\n-     * ClassNotFoundException if the JavaFX runtime is not available.\n-     *\/\n-    private static boolean doesExtendFXApplication(Class<?> mainClass) {\n-        for (Class<?> sc = mainClass.getSuperclass(); sc != null;\n-                sc = sc.getSuperclass()) {\n-            if (sc.getName().equals(JAVAFX_APPLICATION_CLASS_NAME)) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n@@ -838,3 +791,2 @@\n-            \/\/ invalid main or not FX application, abort with an error\n-            abort(null, \"java.launcher.cls.error4\", mainClass.getName(),\n-                  JAVAFX_APPLICATION_CLASS_NAME);\n+            \/\/ invalid main, abort with an error\n+            abort(null, \"java.launcher.cls.error4\", mainClass.getName());\n@@ -970,106 +922,0 @@\n-    static final class FXHelper {\n-\n-        private static final String JAVAFX_GRAPHICS_MODULE_NAME =\n-                \"javafx.graphics\";\n-\n-        private static final String JAVAFX_LAUNCHER_CLASS_NAME =\n-                \"com.sun.javafx.application.LauncherImpl\";\n-\n-        \/*\n-         * The launch method used to invoke the JavaFX launcher. These must\n-         * match the strings used in the launchApplication method.\n-         *\n-         * Command line                 JavaFX-App-Class  Launch mode  FX Launch mode\n-         * java -cp fxapp.jar FXClass   N\/A               LM_CLASS     \"LM_CLASS\"\n-         * java -cp somedir FXClass     N\/A               LM_CLASS     \"LM_CLASS\"\n-         * java -jar fxapp.jar          Present           LM_JAR       \"LM_JAR\"\n-         * java -jar fxapp.jar          Not Present       LM_JAR       \"LM_JAR\"\n-         * java -m module\/class [1]     N\/A               LM_MODULE    \"LM_MODULE\"\n-         * java -m module               N\/A               LM_MODULE    \"LM_MODULE\"\n-         *\n-         * [1] - JavaFX-Application-Class is ignored when modular args are used, even\n-         * if present in a modular jar\n-         *\/\n-        private static final String JAVAFX_LAUNCH_MODE_CLASS = \"LM_CLASS\";\n-        private static final String JAVAFX_LAUNCH_MODE_JAR = \"LM_JAR\";\n-        private static final String JAVAFX_LAUNCH_MODE_MODULE = \"LM_MODULE\";\n-\n-        \/*\n-         * FX application launcher and launch method, so we can launch\n-         * applications with no main method.\n-         *\/\n-        private static String fxLaunchName = null;\n-        private static String fxLaunchMode = null;\n-\n-        private static Class<?> fxLauncherClass    = null;\n-        private static Method   fxLauncherMethod   = null;\n-\n-        \/*\n-         * Set the launch params according to what was passed to LauncherHelper\n-         * so we can use the same launch mode for FX. Abort if there is any\n-         * issue with loading the FX runtime or with the launcher method.\n-         *\/\n-        private static void setFXLaunchParameters(String what, int mode) {\n-\n-            \/\/ find the module with the FX launcher\n-            Optional<Module> om = ModuleLayer.boot().findModule(JAVAFX_GRAPHICS_MODULE_NAME);\n-            if (!om.isPresent()) {\n-                abort(null, \"java.launcher.cls.error5\");\n-            }\n-\n-            \/\/ load the FX launcher class\n-            fxLauncherClass = Class.forName(om.get(), JAVAFX_LAUNCHER_CLASS_NAME);\n-            if (fxLauncherClass == null) {\n-                abort(null, \"java.launcher.cls.error5\");\n-            }\n-\n-            try {\n-                \/*\n-                 * signature must be:\n-                 * public static void launchApplication(String launchName,\n-                 *     String launchMode, String[] args);\n-                 *\/\n-                fxLauncherMethod = fxLauncherClass.getMethod(\"launchApplication\",\n-                        String.class, String.class, String[].class);\n-\n-                \/\/ verify launcher signature as we do when validating the main method\n-                int mod = fxLauncherMethod.getModifiers();\n-                if (!Modifier.isStatic(mod)) {\n-                    abort(null, \"java.launcher.javafx.error1\");\n-                }\n-                if (fxLauncherMethod.getReturnType() != java.lang.Void.TYPE) {\n-                    abort(null, \"java.launcher.javafx.error1\");\n-                }\n-            } catch (NoSuchMethodException ex) {\n-                abort(ex, \"java.launcher.cls.error5\", ex);\n-            }\n-\n-            fxLaunchName = what;\n-            switch (mode) {\n-                case LM_CLASS:\n-                    fxLaunchMode = JAVAFX_LAUNCH_MODE_CLASS;\n-                    break;\n-                case LM_JAR:\n-                    fxLaunchMode = JAVAFX_LAUNCH_MODE_JAR;\n-                    break;\n-                case LM_MODULE:\n-                    fxLaunchMode = JAVAFX_LAUNCH_MODE_MODULE;\n-                    break;\n-                default:\n-                    \/\/ should not have gotten this far...\n-                    throw new InternalError(mode + \": Unknown launch mode\");\n-            }\n-        }\n-\n-        public static void main(String... args) throws Exception {\n-            if (fxLauncherMethod == null\n-                    || fxLaunchMode == null\n-                    || fxLaunchName == null) {\n-                throw new RuntimeException(\"Invalid JavaFX launch parameters\");\n-            }\n-            \/\/ launch appClass via fxLauncherMethod\n-            fxLauncherMethod.invoke(null,\n-                    new Object[] {fxLaunchName, fxLaunchMode, args});\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":2,"deletions":156,"binary":false,"changes":158,"status":"modified"}]}