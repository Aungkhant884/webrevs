{"files":[{"patch":"@@ -2675,1 +2675,1 @@\n-  m->compute_from_signature(cp->symbol_at(signature_index));\n+  m->constMethod()->compute_from_signature(cp->symbol_at(signature_index), access_flags.is_static());\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1348,2 +1348,1 @@\n-\n-  ClassLoaderExt::record_result(classpath_index, ik, redefined);\n+  ClassLoaderExt::record_result(checked_cast<s2>(classpath_index), ik, redefined);\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -69,1 +69,2 @@\n-  _app_class_paths_start_index = ClassLoader::num_boot_classpath_entries();\n+  int start_index = ClassLoader::num_boot_classpath_entries();\n+  _app_class_paths_start_index = checked_cast<jshort>(start_index);\n@@ -119,2 +120,3 @@\n-  _app_module_paths_start_index = ClassLoader::num_boot_classpath_entries() +\n-                              ClassLoader::num_app_classpath_entries();\n+  int start_index = ClassLoader::num_boot_classpath_entries() +\n+                    ClassLoader::num_app_classpath_entries();\n+  _app_module_paths_start_index = checked_cast<jshort>(start_index);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -906,2 +906,2 @@\n-  m->compute_from_signature(sig);\n-  m->set_size_of_parameters(params);\n+  m->constMethod()->compute_from_signature(sig, flags.is_static());\n+  assert(m->size_of_parameters() == params, \"should be computed above\");\n","filename":"src\/hotspot\/share\/classfile\/defaultMethods.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-      int path_index = ik->shared_classpath_index();\n+      s2 path_index = ik->shared_classpath_index();\n","filename":"src\/hotspot\/share\/classfile\/klassFactory.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1185,1 +1185,1 @@\n-    int path_index = ik->shared_classpath_index();\n+    s2 path_index = ik->shared_classpath_index();\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -142,1 +142,1 @@\n-    FunctionType _function[KLASS_KIND_COUNT];\n+    FunctionType _function[Klass::KLASS_KIND_COUNT];\n@@ -205,1 +205,1 @@\n-    FunctionType _function[KLASS_KIND_COUNT];\n+    FunctionType _function[Klass::KLASS_KIND_COUNT];\n@@ -268,1 +268,1 @@\n-    FunctionType _function[KLASS_KIND_COUNT];\n+    FunctionType _function[Klass::KLASS_KIND_COUNT];\n","filename":"src\/hotspot\/share\/memory\/iterator.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"runtime\/signature.hpp\"\n@@ -73,0 +74,14 @@\n+\/\/ Derive size of parameters, return type, and fingerprint,\n+\/\/ all in one pass, which is run at load time.\n+\/\/ We need the first two, and might as well grab the third.\n+void ConstMethod::compute_from_signature(Symbol* sig, bool is_static) {\n+  \/\/ At this point, since we are scanning the signature,\n+  \/\/ we might as well compute the whole fingerprint.\n+  Fingerprinter fp(sig, is_static);\n+  set_size_of_parameters(fp.size_of_parameters());\n+  set_num_stack_arg_slots(fp.num_stack_arg_slots());\n+  set_result_type(fp.return_type());\n+  set_fingerprint(fp.fingerprint());\n+}\n+\n+\n@@ -108,1 +123,1 @@\n-    extra_bytes += sizes->checked_exceptions_length() * sizeof(CheckedExceptionElement);\n+    extra_bytes += sizes->checked_exceptions_length() * (int)sizeof(CheckedExceptionElement);\n@@ -113,1 +128,1 @@\n-              sizes->localvariable_table_length() * sizeof(LocalVariableTableElement);\n+              sizes->localvariable_table_length() * (int)sizeof(LocalVariableTableElement);\n@@ -117,1 +132,1 @@\n-    extra_bytes += sizes->exception_table_length() * sizeof(ExceptionTableElement);\n+    extra_bytes += sizes->exception_table_length() * (int)sizeof(ExceptionTableElement);\n@@ -128,1 +143,1 @@\n-    extra_bytes += sizes->method_parameters_length() * sizeof(MethodParametersElement);\n+    extra_bytes += sizes->method_parameters_length() * (int)sizeof(MethodParametersElement);\n@@ -136,1 +151,1 @@\n-    extra_bytes += sizeof(AnnotationArray*);\n+    extra_bytes += (int)sizeof(AnnotationArray*);\n@@ -139,1 +154,1 @@\n-    extra_bytes += sizeof(AnnotationArray*);\n+    extra_bytes += (int)sizeof(AnnotationArray*);\n@@ -142,1 +157,1 @@\n-    extra_bytes += sizeof(AnnotationArray*);\n+    extra_bytes += (int)sizeof(AnnotationArray*);\n@@ -145,1 +160,1 @@\n-    extra_bytes += sizeof(AnnotationArray*);\n+    extra_bytes += (int)sizeof(AnnotationArray*);\n@@ -279,1 +294,1 @@\n-    *(generic_signature_index_addr()) = sizes->generic_signature_index();\n+    *(generic_signature_index_addr()) = checked_cast<u2>(sizes->generic_signature_index());\n@@ -282,1 +297,1 @@\n-    *(method_parameters_length_addr()) = sizes->method_parameters_length();\n+    *(method_parameters_length_addr()) = checked_cast<u2>(sizes->method_parameters_length());\n@@ -284,1 +299,1 @@\n-    *(checked_exceptions_length_addr()) = sizes->checked_exceptions_length();\n+    *(checked_exceptions_length_addr()) = checked_cast<u2>(sizes->checked_exceptions_length());\n@@ -286,1 +301,1 @@\n-    *(exception_table_length_addr()) = sizes->exception_table_length();\n+    *(exception_table_length_addr()) = checked_cast<u2>(sizes->exception_table_length());\n@@ -288,1 +303,1 @@\n-    *(localvariable_table_length_addr()) = sizes->localvariable_table_length();\n+    *(localvariable_table_length_addr()) = checked_cast<u2>(sizes->localvariable_table_length());\n@@ -303,1 +318,1 @@\n-int ConstMethod::checked_exceptions_length() const {\n+u2 ConstMethod::checked_exceptions_length() const {\n@@ -317,1 +332,1 @@\n-int ConstMethod::localvariable_table_length() const {\n+u2 ConstMethod::localvariable_table_length() const {\n@@ -330,1 +345,1 @@\n-int ConstMethod::exception_table_length() const {\n+u2 ConstMethod::exception_table_length() const {\n@@ -508,1 +523,1 @@\n-  int gap = (intptr_t) uncompressed_table_start - (intptr_t) compressed_table_end;\n+  int gap = int((intptr_t) uncompressed_table_start - (intptr_t) compressed_table_end);\n","filename":"src\/hotspot\/share\/oops\/constMethod.cpp","additions":32,"deletions":17,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -216,0 +216,5 @@\n+\n+  void set_size_of_parameters(int size)          { _size_of_parameters = checked_cast<u2>(size); }\n+  void set_num_stack_arg_slots(int n)            { _num_stack_arg_slots = checked_cast<u2>(n); }\n+  void set_result_type(BasicType rt)             { assert(rt < 16, \"result type too large\");\n+                                                   _result_type = (u1)rt; }\n@@ -286,2 +291,2 @@\n-  int name_index() const                         { return _name_index; }\n-  void set_name_index(int index)                 { _name_index = index; }\n+  u2 name_index() const                          { return _name_index; }\n+  void set_name_index(int index)                 { _name_index = checked_cast<u2>(index); }\n@@ -290,2 +295,2 @@\n-  int signature_index() const                    { return _signature_index; }\n-  void set_signature_index(int index)            { _signature_index = index; }\n+  u2 signature_index() const                     { return _signature_index; }\n+  void set_signature_index(int index)            { _signature_index = checked_cast<u2>(index); }\n@@ -294,1 +299,1 @@\n-  int generic_signature_index() const            {\n+  u2 generic_signature_index() const             {\n@@ -301,1 +306,1 @@\n-  void set_generic_signature_index(u2 index)    {\n+  void set_generic_signature_index(u2 index)     {\n@@ -327,1 +332,1 @@\n-    _code_size = size;\n+    _code_size = (u2)size;\n@@ -340,1 +345,1 @@\n-  int checked_exceptions_length() const;\n+  u2 checked_exceptions_length() const;\n@@ -344,1 +349,1 @@\n-  int localvariable_table_length() const;\n+  u2 localvariable_table_length() const;\n@@ -348,1 +353,1 @@\n-  int exception_table_length() const;\n+  u2 exception_table_length() const;\n@@ -444,0 +449,3 @@\n+  \/\/ Derive stuff from the signature at load time.\n+  void compute_from_signature(Symbol* sig, bool is_static);\n+\n@@ -445,2 +453,2 @@\n-  int  max_stack() const                         { return _max_stack; }\n-  void set_max_stack(int size)                   { _max_stack = size; }\n+  u2   max_stack() const                         { return _max_stack; }\n+  void set_max_stack(int size)                   { _max_stack = checked_cast<u2>(size); }\n@@ -449,2 +457,2 @@\n-  int  max_locals() const                        { return _max_locals; }\n-  void set_max_locals(int size)                  { _max_locals = size; }\n+  u2  max_locals() const                         { return _max_locals; }\n+  void set_max_locals(int size)                  { _max_locals = checked_cast<u2>(size); }\n@@ -453,2 +461,1 @@\n-  int  size_of_parameters() const                { return _size_of_parameters; }\n-  void set_size_of_parameters(int size)          { _size_of_parameters = size; }\n+  u2 size_of_parameters() const                  { return _size_of_parameters; }\n@@ -457,2 +464,1 @@\n-  int  num_stack_arg_slots() const               { return _num_stack_arg_slots; }\n-  void set_num_stack_arg_slots(int n)            { _num_stack_arg_slots = n; }\n+  u2 num_stack_arg_slots() const                 { return _num_stack_arg_slots; }\n@@ -464,2 +470,0 @@\n-  void set_result_type(BasicType rt)             { assert(rt < 16, \"result type too large\");\n-                                                   _result_type = (u1)rt; }\n","filename":"src\/hotspot\/share\/oops\/constMethod.hpp","additions":24,"deletions":20,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -451,1 +451,1 @@\n-  int i = reference_map()->find(cp_index);\n+  int i = reference_map()->find(checked_cast<u2>(cp_index));\n@@ -702,1 +702,1 @@\n-int ConstantPool::uncached_name_and_type_ref_index_at(int cp_index)  {\n+u2 ConstantPool::uncached_name_and_type_ref_index_at(int cp_index)  {\n@@ -704,1 +704,1 @@\n-    int pool_index = bootstrap_name_and_type_ref_index_at(cp_index);\n+    u2 pool_index = bootstrap_name_and_type_ref_index_at(cp_index);\n@@ -714,1 +714,1 @@\n-int ConstantPool::name_and_type_ref_index_at(int index, Bytecodes::Code code) {\n+u2 ConstantPool::name_and_type_ref_index_at(int index, Bytecodes::Code code) {\n@@ -726,1 +726,1 @@\n-int ConstantPool::uncached_klass_ref_index_at(int cp_index) {\n+u2 ConstantPool::uncached_klass_ref_index_at(int cp_index) {\n@@ -732,1 +732,1 @@\n-int ConstantPool::klass_ref_index_at(int index, Bytecodes::Code code) {\n+u2 ConstantPool::klass_ref_index_at(int index, Bytecodes::Code code) {\n@@ -759,1 +759,1 @@\n-int ConstantPool::name_ref_index_at(int which_nt) {\n+u2 ConstantPool::name_ref_index_at(int which_nt) {\n@@ -765,1 +765,1 @@\n-int ConstantPool::signature_ref_index_at(int which_nt) {\n+u2 ConstantPool::signature_ref_index_at(int which_nt) {\n@@ -2185,1 +2185,1 @@\n-        idx1 = klass_index_at(idx);\n+        idx1 = checked_cast<u2>(klass_index_at(idx));\n@@ -2192,1 +2192,1 @@\n-        idx1 = string_index_at(idx);\n+        idx1 = checked_cast<u2>(string_index_at(idx));\n@@ -2201,1 +2201,1 @@\n-        idx1 = method_handle_index_at(idx);\n+        idx1 = checked_cast<u2>(method_handle_index_at(idx));\n@@ -2210,1 +2210,1 @@\n-        idx1 = method_type_index_at(idx);\n+        idx1 = checked_cast<u2>(method_type_index_at(idx));\n@@ -2287,1 +2287,1 @@\n-      _flags &= ~_on_stack;\n+      _flags &= (u2)(~_on_stack);\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -262,1 +262,1 @@\n-  int invokedynamic_bootstrap_ref_index_at(int indy_index) const {\n+  u2 invokedynamic_bootstrap_ref_index_at(int indy_index) const {\n@@ -510,1 +510,1 @@\n-  int method_handle_klass_index_at(int which) {\n+  u2 method_handle_klass_index_at(int which) {\n@@ -519,1 +519,1 @@\n-  int bootstrap_name_and_type_ref_index_at(int which) {\n+  u2 bootstrap_name_and_type_ref_index_at(int which) {\n@@ -523,1 +523,1 @@\n-  int bootstrap_methods_attribute_index(int which) {\n+  u2 bootstrap_methods_attribute_index(int which) {\n@@ -671,2 +671,2 @@\n-  int klass_ref_index_at(int which, Bytecodes::Code code);\n-  int name_and_type_ref_index_at(int which, Bytecodes::Code code);\n+  u2 klass_ref_index_at(int which, Bytecodes::Code code);\n+  u2 name_and_type_ref_index_at(int which, Bytecodes::Code code);\n@@ -681,2 +681,2 @@\n-  int name_ref_index_at(int which_nt);            \/\/ ==  low-order jshort of name_and_type_at(which_nt)\n-  int signature_ref_index_at(int which_nt);       \/\/ == high-order jshort of name_and_type_at(which_nt)\n+  u2 name_ref_index_at(int which_nt);            \/\/ ==  low-order jshort of name_and_type_at(which_nt)\n+  u2 signature_ref_index_at(int which_nt);       \/\/ == high-order jshort of name_and_type_at(which_nt)\n@@ -789,2 +789,2 @@\n-  int       uncached_klass_ref_index_at(int cp_index);\n-  int       uncached_name_and_type_ref_index_at(int cp_index);\n+  u2 uncached_klass_ref_index_at(int cp_index);\n+  u2 uncached_name_and_type_ref_index_at(int cp_index);\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-int ConstantPoolCacheEntry::make_flags(TosState state,\n+intx ConstantPoolCacheEntry::make_flags(TosState state,\n@@ -71,1 +71,1 @@\n-  int f = ((int)state << tos_state_shift) | option_bits | field_index_or_method_params;\n+  intx f = ((int)state << tos_state_shift) | option_bits | field_index_or_method_params;\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -162,1 +162,1 @@\n-  int make_flags(TosState state, int option_bits, int field_index_or_method_params);\n+  intx make_flags(TosState state, int option_bits, int field_index_or_method_params);\n@@ -311,2 +311,2 @@\n-  int indices() const                            { return _indices; }\n-  int indices_ord() const;\n+  intx indices() const                           { return _indices; }\n+  intx indices_ord() const;\n","filename":"src\/hotspot\/share\/oops\/cpCache.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-inline int ConstantPoolCacheEntry::indices_ord() const { return Atomic::load_acquire(&_indices); }\n+inline intx ConstantPoolCacheEntry::indices_ord() const { return Atomic::load_acquire(&_indices); }\n","filename":"src\/hotspot\/share\/oops\/cpCache.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-  u2 jfc = r.next_uint();\n+  int jfc = r.next_uint();\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -101,2 +101,2 @@\n-  fi._name_index = next_uint();\n-  fi._signature_index = next_uint();\n+  fi._name_index = checked_cast<u2>(next_uint());\n+  fi._signature_index = checked_cast<u2>(next_uint());\n@@ -107,1 +107,1 @@\n-    fi._initializer_index = next_uint();\n+    fi._initializer_index = checked_cast<u2>(next_uint());\n@@ -112,1 +112,1 @@\n-    fi._generic_signature_index = next_uint();\n+    fi._generic_signature_index = checked_cast<u2>(next_uint());\n@@ -117,1 +117,1 @@\n-    fi._contention_group = next_uint();\n+    fi._contention_group = checked_cast<u2>(next_uint());\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2514,1 +2514,3 @@\n-    int nof_interfaces = (method_table_offset_in_words - itable_offset_in_words())\n+    int itable_offset_in_words = (int)(start_of_itable() - (intptr_t*)this);\n+\n+    int nof_interfaces = (method_table_offset_in_words - itable_offset_in_words)\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -947,1 +947,0 @@\n-  inline int itable_offset_in_words() const;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,2 +44,0 @@\n-inline int InstanceKlass::itable_offset_in_words() const { return start_of_itable() - (intptr_t*)this; }\n-\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.inline.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-    set_super_check_offset((address)super_check_cell - (address) this);\n+    set_super_check_offset(u4((address)super_check_cell - (address) this));\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,13 +40,0 @@\n-\/\/ Klass Kinds for all subclasses of Klass\n-enum KlassKind {\n-  InstanceKlassKind,\n-  InstanceRefKlassKind,\n-  InstanceMirrorKlassKind,\n-  InstanceClassLoaderKlassKind,\n-  InstanceStackChunkKlassKind,\n-  TypeArrayKlassKind,\n-  ObjArrayKlassKind\n-};\n-\n-const uint KLASS_KIND_COUNT = ObjArrayKlassKind + 1;\n-\n@@ -82,0 +69,14 @@\n+ public:\n+  \/\/ Klass Kinds for all subclasses of Klass\n+  enum KlassKind {\n+    InstanceKlassKind,\n+    InstanceRefKlassKind,\n+    InstanceMirrorKlassKind,\n+    InstanceClassLoaderKlassKind,\n+    InstanceStackChunkKlassKind,\n+    TypeArrayKlassKind,\n+    ObjArrayKlassKind,\n+    Unknown\n+  };\n+\n+  static const uint KLASS_KIND_COUNT = ObjArrayKlassKind + 1;\n@@ -83,0 +84,1 @@\n+\n@@ -173,1 +175,1 @@\n-  jshort _shared_class_path_index;\n+  s2 _shared_class_path_index;\n@@ -196,1 +198,1 @@\n-  Klass() : _kind(KlassKind(-1)) { assert(DumpSharedSpaces || UseSharedSpaces, \"only for cds\"); }\n+  Klass() : _kind(Unknown) { assert(DumpSharedSpaces || UseSharedSpaces, \"only for cds\"); }\n@@ -306,1 +308,1 @@\n-  int shared_classpath_index() const   {\n+  s2 shared_classpath_index() const   {\n@@ -310,1 +312,1 @@\n-  void set_shared_classpath_index(int index) {\n+  void set_shared_classpath_index(s2 index) {\n@@ -325,1 +327,1 @@\n-    CDS_ONLY(_shared_class_flags &= ~_archived_lambda_proxy_is_available;)\n+    CDS_ONLY(_shared_class_flags &= (u2)(~_archived_lambda_proxy_is_available);)\n@@ -336,1 +338,1 @@\n-    CDS_ONLY(_shared_class_flags &= ~_has_value_based_class_annotation;)\n+    CDS_ONLY(_shared_class_flags &= (u2)(~_has_value_based_class_annotation);)\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":21,"deletions":19,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1121,3 +1121,3 @@\n-      _table_offset      = (intptr_t*)offset_entry - (intptr_t*)klass;\n-      _size_offset_table = (method_entry - ((intptr_t*)offset_entry)) \/ itableOffsetEntry::size();\n-      _size_method_table = (end - method_entry)                  \/ itableMethodEntry::size();\n+      _table_offset      = int((intptr_t*)offset_entry - (intptr_t*)klass);\n+      _size_offset_table = int((method_entry - ((intptr_t*)offset_entry)) \/ itableOffsetEntry::size());\n+      _size_method_table = int((end - method_entry)                  \/ itableMethodEntry::size());\n@@ -1500,1 +1500,1 @@\n-    int offset = ((address)_method_entry) - _klass_begin;\n+    int offset = int(((address)_method_entry) - _klass_begin);\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -55,1 +55,2 @@\n-    _tableOffset = (address)base - (address)klass; _length = length;\n+    _tableOffset = int((address)base - (address)klass);\n+    _length = length;\n","filename":"src\/hotspot\/share\/oops\/klassVtable.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -331,1 +331,1 @@\n-  return bcp - code_base();\n+  return int(bcp - code_base());\n@@ -351,1 +351,1 @@\n-    bci = bcp - code_base();\n+    bci = int(bcp - code_base());\n@@ -655,13 +655,0 @@\n-\/\/ Derive size of parameters, return type, and fingerprint,\n-\/\/ all in one pass, which is run at load time.\n-\/\/ We need the first two, and might as well grab the third.\n-void Method::compute_from_signature(Symbol* sig) {\n-  \/\/ At this point, since we are scanning the signature,\n-  \/\/ we might as well compute the whole fingerprint.\n-  Fingerprinter fp(sig, is_static());\n-  set_size_of_parameters(fp.size_of_parameters());\n-  set_num_stack_arg_slots(fp.num_stack_arg_slots());\n-  constMethod()->set_result_type(fp.return_type());\n-  constMethod()->set_fingerprint(fp.fingerprint());\n-}\n-\n@@ -1487,1 +1474,1 @@\n-  m->compute_from_signature(signature);\n+  m->constMethod()->compute_from_signature(signature, must_be_static);\n@@ -1771,1 +1758,1 @@\n-      for (int i = 0; i < length; i++) {\n+      for (u2 i = 0; i < length; i++) {\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":4,"deletions":17,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-  int name_index() const                         { return constMethod()->name_index();         }\n+  u2 name_index() const                          { return constMethod()->name_index();         }\n@@ -150,1 +150,1 @@\n-  int signature_index() const                    { return constMethod()->signature_index();         }\n+  u2 signature_index() const                     { return constMethod()->signature_index();         }\n@@ -155,2 +155,1 @@\n-  int generic_signature_index() const            { return constMethod()->generic_signature_index(); }\n-  void set_generic_signature_index(int index)    { constMethod()->set_generic_signature_index(index); }\n+  u2 generic_signature_index() const             { return constMethod()->generic_signature_index(); }\n@@ -301,6 +300,1 @@\n-  \/\/ Derive stuff from the signature at load time.\n-  void compute_from_signature(Symbol* sig);\n-\n-  \/\/ size of parameters (receiver if any + arguments)\n-  int  size_of_parameters() const                { return constMethod()->size_of_parameters(); }\n-  void set_size_of_parameters(int size)          { constMethod()->set_size_of_parameters(size); }\n+  u2 size_of_parameters() const { return constMethod()->size_of_parameters(); }\n@@ -323,1 +317,1 @@\n-  int exception_table_length() const\n+  u2 exception_table_length() const\n@@ -936,2 +930,0 @@\n-\n-  void set_num_stack_arg_slots(int n) { constMethod()->set_num_stack_arg_slots(n); }\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-    jubyte value = ((jubyte) bci_delta << 3) | (jubyte) line_delta;\n+    jubyte value = (jubyte)((bci_delta << 3) | line_delta);\n","filename":"src\/hotspot\/share\/oops\/method.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,1 +108,1 @@\n-  void set_highest_comp_level(int level)         { _highest_comp_level = level; }\n+  void set_highest_comp_level(int level)         { _highest_comp_level = (u1)level; }\n@@ -110,1 +110,1 @@\n-  void set_highest_osr_comp_level(int level)     { _highest_osr_comp_level = level; }\n+  void set_highest_osr_comp_level(int level)     { _highest_osr_comp_level = (u1)level; }\n","filename":"src\/hotspot\/share\/oops\/methodCounters.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  _length = length;\n+  _length = (u2)length;\n@@ -218,1 +218,1 @@\n-    int ch = ss.raw_char_at(i);\n+    char ch = ss.raw_char_at(i);\n@@ -362,1 +362,1 @@\n-      int hash = extract_hash(old_value);\n+      short hash = extract_hash(old_value);\n","filename":"src\/hotspot\/share\/oops\/symbol.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-  bool starts_with(int prefix_char) const {\n+  bool starts_with(char prefix_char) const {\n@@ -224,1 +224,1 @@\n-  bool ends_with(int suffix_char) const {\n+  bool ends_with(char suffix_char) const {\n","filename":"src\/hotspot\/share\/oops\/symbol.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3645,1 +3645,1 @@\n-      method->set_generic_signature_index(new_index);\n+      method->constMethod()->set_generic_signature_index(new_index);\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1179,2 +1179,2 @@\n-inline int extract_low_short_from_int(jint x) {\n-  return x & 0xffff;\n+inline u2 extract_low_short_from_int(u4 x) {\n+  return u2(x & 0xffff);\n@@ -1183,2 +1183,2 @@\n-inline int extract_high_short_from_int(jint x) {\n-  return (x >> 16) & 0xffff;\n+inline u2 extract_high_short_from_int(u4 x) {\n+  return u2((x >> 16) & 0xffff);\n@@ -1187,1 +1187,1 @@\n-inline int build_int_from_shorts( jushort low, jushort high ) {\n+inline int build_int_from_shorts( u2 low, u2 high ) {\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}