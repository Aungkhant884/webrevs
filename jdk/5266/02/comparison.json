{"files":[{"patch":"@@ -400,0 +400,7 @@\n+  \/\/ Convert (~x+1) into -x. Note there isn't a bitwise not bytecode,\n+  \/\/ \"~x\" would typically represented as \"x^(-1)\", so (~x+1) will\n+  \/\/ be (x^(-1))+1.\n+  if (op1 == Op_XorI && phase->type(in2) == TypeInt::ONE &&\n+      phase->type(in1->in(2)) == TypeInt::MINUS_1) {\n+    return new SubINode(phase->makecon(TypeInt::ZERO), in1->in(1));\n+  }\n@@ -557,1 +564,7 @@\n-\n+  \/\/ Convert (~x+1) into -x. Note there isn't a bitwise not bytecode,\n+  \/\/ \"~x\" would typically represented as \"x^(-1)\", so (~x+1) will\n+  \/\/ be (x^(-1))+1\n+  if (op1 == Op_XorL && phase->type(in2) == TypeLong::ONE &&\n+      phase->type(in1->in(2)) == TypeLong::MINUS_1) {\n+    return new SubLNode(phase->makecon(TypeLong::ZERO), in1->in(1));\n+  }\n@@ -970,0 +983,15 @@\n+\/\/------------------------------Idealize---------------------------------------\n+Node* XorINode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  Node* in1 = in(1);\n+  Node* in2 = in(2);\n+  int op1 = in1->Opcode();\n+  \/\/ Convert ~(x-1) into -x. Note there isn't a bitwise not bytecode,\n+  \/\/ \"~x\" would typically represented as \"x^(-1)\", and \"x-c0\" would\n+  \/\/ convert into \"x+ -c0\" in SubXNode::Ideal. So ~(x-1) will eventually\n+  \/\/ be (x+(-1))^-1.\n+  if (op1 == Op_AddI && phase->type(in2) == TypeInt::MINUS_1 &&\n+      phase->type(in1->in(2)) == TypeInt::MINUS_1) {\n+    return new SubINode(phase->makecon(TypeInt::ZERO), in1->in(1));\n+  }\n+  return AddNode::Ideal(phase, can_reshape);\n+}\n@@ -1035,0 +1063,15 @@\n+Node* XorLNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  Node* in1 = in(1);\n+  Node* in2 = in(2);\n+  int op1 = in1->Opcode();\n+  \/\/ Convert ~(x-1) into -x. Note there isn't a bitwise not bytecode,\n+  \/\/ \"~x\" would typically represented as \"x^(-1)\", and \"x-c0\" would\n+  \/\/ convert into \"x+ -c0\" in SubXNode::Ideal. So ~(x-1) will eventually\n+  \/\/ be (x+(-1))^-1.\n+  if (op1 == Op_AddL && phase->type(in2) == TypeLong::MINUS_1 &&\n+      phase->type(in1->in(2)) == TypeLong::MINUS_1) {\n+    return new SubLNode(phase->makecon(TypeLong::ZERO), in1->in(1));\n+  }\n+  return AddNode::Ideal(phase, can_reshape);\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":44,"deletions":1,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -230,0 +230,1 @@\n+  virtual Node *Ideal(PhaseGVN *phase, bool can_reshape);\n@@ -245,0 +246,1 @@\n+  virtual Node *Ideal(PhaseGVN *phase, bool can_reshape);\n","filename":"src\/hotspot\/share\/opto\/addnode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2021, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8273021\n+ * @summary C2: Improve Add and Xor ideal optimizations\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:-TieredCompilation -XX:TieredStopAtLevel=4\n+ *                   -XX:CompileCommand=dontinline,compiler.c2.TestAddXorIdeal::test*\n+ *                   compiler.c2.TestAddXorIdeal\n+ *\/\n+package compiler.c2;\n+\n+import java.util.Random;\n+\n+import jdk.test.lib.Asserts;\n+\n+public class TestAddXorIdeal {\n+\n+    public static int test1(int x) {\n+        return ~x + 1;\n+    }\n+\n+    public static int test2(int x) {\n+        return ~(x - 1);\n+    }\n+\n+    public static long test3(long x) {\n+        return ~x + 1L;\n+    }\n+\n+    public static long test4(long x) {\n+        return ~(x - 1L);\n+    }\n+\n+    public static int test5(int x) {\n+        return 1 + ~x;\n+    }\n+\n+    public static int test6(int x) {\n+        return ~(-1 + x);\n+    }\n+\n+    public static long test7(long x) {\n+        return 1L + ~x;\n+    }\n+\n+    public static long test8(long x) {\n+        return ~(-1L + x);\n+    }\n+\n+    public static void main(String... args) {\n+        Random random = new Random();\n+        int n = 0;\n+        long n1 = 0;\n+        for (int i = -5_000; i < 5_000; i++) {\n+            n = random.nextInt();\n+            Asserts.assertTrue(test1(i + n) == -(i + n));\n+            n = random.nextInt();\n+            Asserts.assertTrue(test2(i - n) == -(i - n));\n+            n1 = random.nextLong();\n+            Asserts.assertTrue(test3(i + n1) == -(i + n1));\n+            n1 = random.nextLong();\n+            Asserts.assertTrue(test4(i - n1) == -(i - n1));\n+            n = random.nextInt();\n+            Asserts.assertTrue(test5(i + n) == -(i + n));\n+            n = random.nextInt();\n+            Asserts.assertTrue(test6(i - n) == -(i - n));\n+            n1 = random.nextLong();\n+            Asserts.assertTrue(test7(i + n1) == -(i + n1));\n+            n1 = random.nextLong();\n+            Asserts.assertTrue(test8(i - n1) == -(i - n1));\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestAddXorIdeal.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"}]}