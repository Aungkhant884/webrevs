{"files":[{"patch":"@@ -508,0 +508,1 @@\n+            Log.logTrace(\"Ignoring (1xx informational) response code {0}\", rsp.statusCode());\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Exchange.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.net.http.HttpTimeoutException;\n@@ -35,0 +36,1 @@\n+import java.time.Duration;\n@@ -78,0 +80,1 @@\n+        http2Server.addHandler(new OnlyInformationalHandler(), \"\/http2\/only-informational\");\n@@ -232,0 +235,18 @@\n+    private static class OnlyInformationalHandler implements HttpServerAdapters.HttpTestHandler {\n+\n+        @Override\n+        public void handle(final HttpServerAdapters.HttpTestExchange exchange) throws IOException {\n+            \/\/ we only send informational response and then return\n+            for (int i = 0; i < 3; i++) {\n+                exchange.sendResponseHeaders(102, -1);\n+                System.out.println(\"Sent 102 response code from H2 server\");\n+                \/\/ wait for a while before sending again\n+                try {\n+                    Thread.sleep(10000);\n+                } catch (InterruptedException e) {\n+                    \/\/ just return\n+                    System.err.println(\"Handler thread interrupted\");\n+                }\n+            }\n+        }\n+    }\n@@ -248,1 +269,1 @@\n-            System.out.println(\"Issuing request to \" + request);\n+            System.out.println(\"Issuing request to \" + requestURI);\n@@ -251,0 +272,2 @@\n+            Assert.assertEquals(response.version(), HttpClient.Version.HTTP_1_1,\n+                    \"Unexpected HTTP version in response\");\n@@ -271,1 +294,1 @@\n-            System.out.println(\"Issuing request to \" + request);\n+            System.out.println(\"Issuing request to \" + requestURI);\n@@ -274,0 +297,2 @@\n+            Assert.assertEquals(response.version(), HttpClient.Version.HTTP_2,\n+                    \"Unexpected HTTP version in response\");\n@@ -278,0 +303,22 @@\n+\n+\n+    \/**\n+     * Tests that when a request is issued with a specific request timeout and the server\n+     * responds with intermediate 1xx response code but doesn't respond with a final response within\n+     * the timeout duration, then the application fails with a request timeout\n+     *\/\n+    @Test\n+    public void test1xxRequestTimeout() throws Exception {\n+        final HttpClient client = HttpClient.newBuilder()\n+                .version(HttpClient.Version.HTTP_2)\n+                .proxy(HttpClient.Builder.NO_PROXY).build();\n+        final URI requestURI = new URI(http2RequestURIBase + \"\/only-informational\");\n+        final Duration requestTimeout = Duration.ofSeconds(15);\n+        final HttpRequest request = HttpRequest.newBuilder(requestURI).timeout(requestTimeout)\n+                .build();\n+        System.out.println(\"Issuing request to \" + requestURI);\n+        \/\/ we expect the request to timeout\n+        Assert.assertThrows(HttpTimeoutException.class, () -> {\n+            client.send(request, HttpResponse.BodyHandlers.ofString(StandardCharsets.UTF_8));\n+        });\n+    }\n","filename":"test\/jdk\/java\/net\/httpclient\/Response1xxTest.java","additions":49,"deletions":2,"binary":false,"changes":51,"status":"modified"}]}