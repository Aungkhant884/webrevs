{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.net.ProtocolException;\n@@ -502,3 +503,2 @@\n-        \/\/ For 100 (with the request configured to expect-continue) and 101 (for which the request\n-        \/\/ has already sent an \"Upgrade\" request header), we handle it specifically as defined in\n-        \/\/ the RFC-9110, outside of this method.\n+        \/\/ For 100 (with the request configured to expect-continue) and 101, we handle it\n+        \/\/ specifically as defined in the RFC-9110, outside of this method.\n@@ -508,4 +508,0 @@\n-        \/\/ Similarly, if we receive a 101 response, but the request didn't ask for the Upgrade,\n-        \/\/ then we ignore that 101 response and wait for a final response. The client is allowed to\n-        \/\/ do this as per RFC-9110, section 15.2 which says \"A user agent MAY ignore unexpected\n-        \/\/ 1xx responses\".\n@@ -517,2 +513,1 @@\n-                || (statusCode == 100 && !request.expectContinue)\n-                || (statusCode == 101 && !upgrading)) {\n+                || (statusCode == 100 && !request.expectContinue)) {\n@@ -567,1 +562,15 @@\n-        return cf;\n+        \/\/ not expecting an upgrade, but if the server sends a 101 response then we fail the\n+        \/\/ request and also let the ExchangeImpl deal with it as a protocol error\n+        return cf.thenCompose(r -> {\n+            if (r.statusCode == 101) {\n+                final String errMsg = \"Unexpected 101 response, when not upgrading\";\n+                assert exchImpl != null : \"Illegal state - current exchange isn't set\";\n+                try {\n+                    exchImpl.onProtocolError(errMsg);\n+                } catch (Throwable ignore){\n+                    \/\/ ignored\n+                }\n+                return MinimalFuture.failedFuture(new ProtocolException(errMsg));\n+            }\n+            return MinimalFuture.completedFuture(r);\n+        });\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Exchange.java","additions":19,"deletions":10,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -219,0 +219,10 @@\n+    \/**\n+     * Invoked whenever there is a (HTTP) protocol error when dealing with the response\n+     * from the server. The implementations of {@code ExchangeImpl} are then expected to\n+     * take necessary action that is expected by the corresponding specifications whenever\n+     * a protocol error happens. For example, in HTTP\/1.1, such protocol error would result\n+     * in the connection being closed.\n+     * @param errorMessage A error message which states the nature of protocol violation\n+     *\/\n+    abstract void onProtocolError(String errorMessage);\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ExchangeImpl.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -505,0 +505,10 @@\n+    @Override\n+    void onProtocolError(final String errorMessage) {\n+        if (debug.on()) {\n+            debug.log(\"closing connection due to protocol error: %s\", errorMessage);\n+        }\n+        Log.logError(\"closing connection due to protocol error: {0}\\n\", errorMessage);\n+        \/\/ close the connection\n+        connection.close();\n+    }\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http1Exchange.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.net.ProtocolException;\n@@ -862,0 +863,2 @@\n+            } else if (throwable instanceof ProtocolException) {\n+                throw new ProtocolException(msg);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpClientImpl.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1241,0 +1241,10 @@\n+    @Override\n+    void onProtocolError(final String errorMessage) {\n+        if (debug.on()) {\n+            debug.log(\"closing stream %d due to protocol error: %s\", streamid, errorMessage);\n+        }\n+        Log.logError(\"closing stream {0} due to protocol error: {1}\\n\", streamid, errorMessage);\n+        \/\/ send a RESET frame and close the stream\n+        connection.resetStream(streamid, ResetFrame.PROTOCOL_ERROR);\n+    }\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Stream.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.net.ProtocolException;\n@@ -38,0 +39,3 @@\n+import javax.net.ssl.SSLContext;\n+\n+import jdk.test.lib.net.SimpleSSLContext;\n@@ -55,1 +59,1 @@\n- * @build Http2TestServer HttpServerAdapters\n+ * @build Http2TestServer HttpServerAdapters jdk.test.lib.net.SimpleSSLContext\n@@ -67,1 +71,1 @@\n-    private HttpServerAdapters.HttpTestServer http2Server;\n+    private HttpServerAdapters.HttpTestServer http2Server; \/\/ h2c\n@@ -70,0 +74,5 @@\n+\n+    private SSLContext sslContext;\n+    private HttpServerAdapters.HttpTestServer https2Server;  \/\/ h2\n+    private String https2RequestURIBase;\n+\n@@ -82,0 +91,2 @@\n+        http2Server.addHandler(new Http2Handler(), \"\/http2\/101\");\n+        http2Server.addHandler(new OKHandler(), \"\/http2\/200\");\n@@ -89,0 +100,14 @@\n+\n+        sslContext = new SimpleSSLContext().get();\n+        if (sslContext == null) {\n+            throw new AssertionError(\"Unexpected null sslContext\");\n+        }\n+        https2Server = HttpServerAdapters.HttpTestServer.of(new Http2TestServer(\"localhost\",\n+                true, sslContext));\n+        https2Server.addHandler(new Http2Handler(), \"\/http2\/101\");\n+        https2RequestURIBase = URIBuilder.newBuilder().scheme(\"https\").loopback()\n+                .port(https2Server.getAddress().getPort())\n+                .path(\"\/http2\").build().toString();\n+        https2Server.start();\n+        System.out.println(\"Started (https) HTTP2 server at \" + https2Server.getAddress());\n+\n@@ -105,0 +130,4 @@\n+        if (https2Server != null) {\n+            https2Server.stop();\n+            System.out.println(\"Stopped (https) HTTP2 server\");\n+        }\n@@ -129,3 +158,4 @@\n-            try {\n-                System.out.println(\"Server running at \" + serverSocket);\n-                while (!stop) {\n+            System.out.println(\"Server running at \" + serverSocket);\n+            while (!stop) {\n+                Socket socket = null;\n+                try {\n@@ -133,1 +163,1 @@\n-                    final Socket socket = serverSocket.accept();\n+                    socket = serverSocket.accept();\n@@ -160,1 +190,1 @@\n-                    }  else if (requestLine.startsWith(REQ_LINE_BYE)) {\n+                    } else if (requestLine.startsWith(REQ_LINE_BYE)) {\n@@ -193,0 +223,6 @@\n+                } catch (Throwable t) {\n+                    \/\/ close the client connection\n+                    safeClose(socket);\n+                    \/\/ continue accepting any other client connections until we are asked to stop\n+                    System.err.println(\"Ignoring exception in server:\");\n+                    t.printStackTrace();\n@@ -194,3 +230,0 @@\n-            } catch (Throwable t) {\n-                System.err.println(\"Stopping server due to exception\");\n-                t.printStackTrace();\n@@ -236,0 +269,2 @@\n+            } else if (requestURI.getPath().endsWith(\"\/101\")) {\n+                informationResponseCode = 101;\n@@ -285,0 +320,8 @@\n+    private static class OKHandler implements HttpServerAdapters.HttpTestHandler {\n+\n+        @Override\n+        public void handle(final HttpServerAdapters.HttpTestExchange exchange) throws IOException {\n+            exchange.sendResponseHeaders(200, -1);\n+        }\n+    }\n+\n@@ -298,2 +341,1 @@\n-                new URI(http1RequestURIBase + \"\/test\/hello\"),\n-                new URI(http1RequestURIBase + \"\/test\/bye\")};\n+                new URI(http1RequestURIBase + \"\/test\/hello\")};\n@@ -359,0 +401,72 @@\n+\n+    \/**\n+     * Tests that when the HTTP\/1.1 server sends a 101 response when the request hasn't asked\n+     * for an \"Upgrade\" then the request fails.\n+     *\/\n+    @Test\n+    public void testHTTP11Unexpected101() throws Exception {\n+        final HttpClient client = HttpClient.newBuilder()\n+                .version(HttpClient.Version.HTTP_1_1)\n+                .proxy(HttpClient.Builder.NO_PROXY).build();\n+        final URI requestURI = new URI(http1RequestURIBase + \"\/test\/bye\");\n+        final HttpRequest request = HttpRequest.newBuilder(requestURI).build();\n+        System.out.println(\"Issuing request to \" + requestURI);\n+        \/\/ we expect the request to fail because the server sent an unexpected 101\n+        Assert.assertThrows(ProtocolException.class,\n+                () -> client.send(request, HttpResponse.BodyHandlers.ofString(StandardCharsets.UTF_8)));\n+    }\n+\n+\n+    \/**\n+     * Tests that when the HTTP2 server (over HTTPS) sends a 101 response when the request\n+     * hasn't asked for an \"Upgrade\" then the request fails.\n+     *\/\n+    @Test\n+    public void testSecureHTTP2Unexpected101() throws Exception {\n+        final HttpClient client = HttpClient.newBuilder()\n+                .version(HttpClient.Version.HTTP_2)\n+                .sslContext(sslContext)\n+                .proxy(HttpClient.Builder.NO_PROXY).build();\n+        final URI requestURI = new URI(https2RequestURIBase + \"\/101\");\n+        final HttpRequest request = HttpRequest.newBuilder(requestURI).build();\n+        System.out.println(\"Issuing request to \" + requestURI);\n+        \/\/ we expect the request to fail because the server sent an unexpected 101\n+        Assert.assertThrows(ProtocolException.class,\n+                () -> client.send(request, HttpResponse.BodyHandlers.ofString(StandardCharsets.UTF_8)));\n+    }\n+\n+    \/**\n+     * Tests that when the HTTP2 server (over plain HTTP) sends a 101 response when the request\n+     * hasn't asked for an \"Upgrade\" then the request fails.\n+     *\/\n+    @Test\n+    public void testPlainHTTP2Unexpected101() throws Exception {\n+        final HttpClient client = HttpClient.newBuilder()\n+                .version(HttpClient.Version.HTTP_2)\n+                .proxy(HttpClient.Builder.NO_PROXY).build();\n+        \/\/ when using HTTP2 version against a \"http:\/\/\" (non-secure) URI\n+        \/\/ the HTTP client (implementation) internally initiates a HTTP\/1.1 connection\n+        \/\/ and then does an \"Upgrade:\" to \"h2c\". This it does when there isn't already a\n+        \/\/ H2 connection against the target\/destination server. So here we initiate a dummy request\n+        \/\/ using the client instance against the same target server and just expect it to return\n+        \/\/ back successfully. Once that connection is established (and internally pooled), the client\n+        \/\/ will then reuse that connection and won't issue an \"Upgrade:\" and thus we can then\n+        \/\/ start our testing\n+        warmupH2Client(client);\n+        \/\/ start the actual testing\n+        final URI requestURI = new URI(http2RequestURIBase + \"\/101\");\n+        final HttpRequest request = HttpRequest.newBuilder(requestURI).build();\n+        System.out.println(\"Issuing request to \" + requestURI);\n+        \/\/ we expect the request to fail because the server sent an unexpected 101\n+        Assert.assertThrows(ProtocolException.class,\n+                () -> client.send(request, HttpResponse.BodyHandlers.ofString(StandardCharsets.UTF_8)));\n+    }\n+\n+    \/\/ sends a request and expects a 200 response back\n+    private void warmupH2Client(final HttpClient client) throws Exception {\n+        final URI requestURI = new URI(http2RequestURIBase + \"\/200\");\n+        final HttpRequest request = HttpRequest.newBuilder(requestURI).build();\n+        System.out.println(\"Issuing (warmup) request to \" + requestURI);\n+        final HttpResponse<Void> response = client.send(request, HttpResponse.BodyHandlers.discarding());\n+        Assert.assertEquals(response.statusCode(), 200, \"Unexpected response code\");\n+    }\n","filename":"test\/jdk\/java\/net\/httpclient\/Response1xxTest.java","additions":126,"deletions":12,"binary":false,"changes":138,"status":"modified"}]}