{"files":[{"patch":"@@ -895,1 +895,0 @@\n-java\/awt\/TextArea\/MouseOverScrollbarWhenTyping\/Test1.java 8005970 macosx-all,windows-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-\n+        f.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/TextArea\/MouseOverScrollbarWhenTyping\/Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,409 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n-  @test\n-  @bug 6431076\n-  @summary Mouse cursor must remain DEFAULT over scrollbar when text is typed\n-  @author Andrei Dmitriev: area=TextArea\n-  @run main\/manual Test1\n-*\/\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-\n-public class Test1 {\n-    private static void init()  {\n-        Frame f = new Frame(\"Test1 for cursor\");\n-        final int dim = 100;\n-        String line = \"\";\n-        for( int i=0; i<dim; ++i ) {\n-            line += \"a\";\n-        }\n-        String text = \"\";\n-        for( int i=0; i<dim; ++i ) {\n-            text += line;\n-            if( i < dim-1 ) {\n-                text += \"\\n\";\n-            }\n-        }\n-\n-        f.setLayout( new BorderLayout () );\n-        f.add( new TextArea( text ) );\n-        f.setSize(400, 300);\n-        f.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\n-\n-        f.setVisible(true);\n-\n-        String[] instructions = {\n-            \"1. Place keyboard cursor inside TextArea.\",\n-            \"2. Repeat steps 2.* for each of two TextArea's scrollbars.\",\n-            \"2.1. Place mouse cursor over TextArea's scrollbar.\",\n-            \"2.2. If mouse cursor is not HAND_CURSOR, test failed.\",\n-            \"2.3. Type any symbol into TextArea.\",\n-            \"2.4. Type ENTER symbol into TextArea.\",\n-            \"2.5. If mouse cursor changes, test failed\",\n-            \"(if cursor disappears on Windows, it's OK).\",\n-            \"3. Test passed.\",\n-        };\n-\n-        Sysout.createDialogWithInstructions( instructions );\n-    }\n-\n-\n-\n-    \/*****************************************************\n-     * Standard Test Machinery Section\n-     * DO NOT modify anything in this section -- it's a\n-     * standard chunk of code which has all of the\n-     * synchronisation necessary for the test harness.\n-     * By keeping it the same in all tests, it is easier\n-     * to read and understand someone else's test, as\n-     * well as insuring that all tests behave correctly\n-     * with the test harness.\n-     * There is a section following this for test-defined\n-     * classes\n-     ******************************************************\/\n-    private static boolean theTestPassed = false;\n-    private static boolean testGeneratedInterrupt = false;\n-    private static String failureMessage = \"\";\n-\n-    private static Thread mainThread = null;\n-\n-    private static int sleepTime = 300000;\n-\n-    public static void main( String args[] ) throws InterruptedException\n-    {\n-        mainThread = Thread.currentThread();\n-        try\n-        {\n-            init();\n-        }\n-        catch( TestPassedException e )\n-        {\n-            \/\/The test passed, so just return from main and harness will\n-            \/\/ interepret this return as a pass\n-            return;\n-        }\n-        \/\/At this point, neither test passed nor test failed has been\n-        \/\/ called -- either would have thrown an exception and ended the\n-        \/\/ test, so we know we have multiple threads.\n-\n-        \/\/Test involves other threads, so sleep and wait for them to\n-        \/\/ called pass() or fail()\n-        try\n-        {\n-            Thread.sleep( sleepTime );\n-            \/\/Timed out, so fail the test\n-            throw new RuntimeException( \"Timed out after \" + sleepTime\/1000 + \" seconds\" );\n-        }\n-        catch (InterruptedException e)\n-        {\n-            if( ! testGeneratedInterrupt ) throw e;\n-\n-            \/\/reset flag in case hit this code more than once for some reason (just safety)\n-            testGeneratedInterrupt = false;\n-            if ( theTestPassed == false )\n-            {\n-                throw new RuntimeException( failureMessage );\n-            }\n-        }\n-\n-    }\/\/main\n-\n-    public static synchronized void setTimeoutTo( int seconds )\n-    {\n-        sleepTime = seconds * 1000;\n-    }\n-\n-    public static synchronized void pass()\n-    {\n-        Sysout.println( \"The test passed.\" );\n-        Sysout.println( \"The test is over, hit  Ctl-C to stop Java VM\" );\n-        \/\/first check if this is executing in main thread\n-        if ( mainThread == Thread.currentThread() )\n-        {\n-            \/\/Still in the main thread, so set the flag just for kicks,\n-            \/\/ and throw a test passed exception which will be caught\n-            \/\/ and end the test.\n-            theTestPassed = true;\n-            throw new TestPassedException();\n-        }\n-        \/\/pass was called from a different thread, so set the flag and interrupt\n-        \/\/ the main thead.\n-        theTestPassed = true;\n-        testGeneratedInterrupt = true;\n-        if (mainThread != null){\n-            mainThread.interrupt();\n-        }\n-    }\/\/pass()\n-\n-    public static synchronized void fail()\n-    {\n-        \/\/test writer didn't specify why test failed, so give generic\n-        fail( \"it just plain failed! :-)\" );\n-    }\n-\n-    public static synchronized void fail( String whyFailed )\n-    {\n-        Sysout.println( \"The test failed: \" + whyFailed );\n-        Sysout.println( \"The test is over, hit  Ctl-C to stop Java VM\" );\n-        \/\/check if this called from main thread\n-        if ( mainThread == Thread.currentThread() )\n-        {\n-            \/\/If main thread, fail now 'cause not sleeping\n-            throw new RuntimeException( whyFailed );\n-        }\n-        theTestPassed = false;\n-        testGeneratedInterrupt = true;\n-        failureMessage = whyFailed;\n-        mainThread.interrupt();\n-    }\/\/fail()\n-\n-}\/\/ class\n-\n-\/\/This exception is used to exit from any level of call nesting\n-\/\/ when it's determined that the test has passed, and immediately\n-\/\/ end the test.\n-class TestPassedException extends RuntimeException\n-{\n-}\n-\n-\/\/*********** End Standard Test Machinery Section **********\n-\n-\n-\/\/************ Begin classes defined for the test ****************\n-\n-\/\/ make listeners in a class defined here, and instantiate them in init()\n-\n-\/* Example of a class which may be written as part of a test\n-class NewClass implements anInterface\n- {\n-   static int newVar = 0;\n-\n-   public void eventDispatched(AWTEvent e)\n-    {\n-      \/\/Counting events to see if we get enough\n-      eventCount++;\n-\n-      if( eventCount == 20 )\n-       {\n-         \/\/got enough events, so pass\n-\n-         ManualMainTest.pass();\n-       }\n-      else if( tries == 20 )\n-       {\n-         \/\/tried too many times without getting enough events so fail\n-\n-         ManualMainTest.fail();\n-       }\n-\n-    }\/\/ eventDispatched()\n-\n- }\/\/ NewClass class\n-\n-*\/\n-\n-\n-\/\/************** End classes defined for the test *******************\n-\n-\n-\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n- *\/\n-\n-class Sysout\n-{\n-    private static TestDialog dialog;\n-    private static boolean numbering = false;\n-    private static int messageNumber = 0;\n-\n-    public static void createDialogWithInstructions( String[] instructions )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        dialog.printInstructions( instructions );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-    public static void createDialog( )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-        dialog.printInstructions( defInstr );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-    \/* Enables message counting for the tester. *\/\n-    public static void enableNumbering(boolean enable){\n-        numbering = enable;\n-    }\n-\n-    public static void printInstructions( String[] instructions )\n-    {\n-        dialog.printInstructions( instructions );\n-    }\n-\n-\n-    public static void println( String messageIn )\n-    {\n-        if (numbering) {\n-            messageIn = \"\" + messageNumber + \" \" + messageIn;\n-            messageNumber++;\n-        }\n-        dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog implements ActionListener\n-{\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-    Panel  buttonP = new Panel();\n-    Button passB = new Button( \"pass\" );\n-    Button failB = new Button( \"fail\" );\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog( Frame frame, String name )\n-    {\n-        super( frame, name );\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-        add( \"North\", instructionsText );\n-\n-        messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-        add(\"Center\", messageText);\n-\n-        passB = new Button( \"pass\" );\n-        passB.setActionCommand( \"pass\" );\n-        passB.addActionListener( this );\n-        buttonP.add( \"East\", passB );\n-\n-        failB = new Button( \"fail\" );\n-        failB.setActionCommand( \"fail\" );\n-        failB.addActionListener( this );\n-        buttonP.add( \"West\", failB );\n-\n-        add( \"South\", buttonP );\n-        pack();\n-\n-        setVisible(true);\n-    }\/\/ TestDialog()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions( String[] instructions )\n-    {\n-        \/\/Clear out any current instructions\n-        instructionsText.setText( \"\" );\n-\n-        \/\/Go down array of instruction strings\n-\n-        String printStr, remainingStr;\n-        for( int i=0; i < instructions.length; i++ )\n-        {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[ i ];\n-            while( remainingStr.length() > 0 )\n-            {\n-                \/\/if longer than max then chop off first max chars to print\n-                if( remainingStr.length() >= maxStringLength )\n-                {\n-                    \/\/Try to chop on a word boundary\n-                    int posOfSpace = remainingStr.\n-                        lastIndexOf( ' ', maxStringLength - 1 );\n-\n-                    if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-                    printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-                    remainingStr = remainingStr.substring( posOfSpace + 1 );\n-                }\n-                \/\/else just print\n-                else\n-                {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append( printStr + \"\\n\" );\n-\n-            }\/\/ while\n-\n-        }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage( String messageIn )\n-    {\n-        messageText.append( messageIn + \"\\n\" );\n-        System.out.println(messageIn);\n-    }\n-\n-    \/\/catch presses of the passed and failed buttons.\n-    \/\/simply call the standard pass() or fail() static methods of\n-    \/\/ManualMainTest\n-    public void actionPerformed( ActionEvent e )\n-    {\n-        if( e.getActionCommand() == \"pass\" )\n-        {\n-            Test1.pass();\n-        }\n-        else\n-        {\n-            Test1.fail();\n-        }\n-    }\n-\n-}\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/TextArea\/MouseOverScrollbarWhenTyping\/Test1.java","additions":0,"deletions":409,"binary":false,"changes":409,"status":"deleted"}]}