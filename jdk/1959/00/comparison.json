{"files":[{"patch":"@@ -0,0 +1,310 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4884487 6295519 6236704 6429613\n+ * @summary Test for proper diagnostics during path manipulation operations\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jartool\/sun.tools.jar\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main\/timeout=180 Diagnostics\n+ *\/\n+\n+\/\/ Original test: test\/langtools\/tools\/javac\/Paths\/Diagnostics.sh\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.nio.file.Path;\n+\n+import sun.tools.jar.Main;\n+\n+import toolbox.ToolBox;\n+import toolbox.JavacTask;\n+import toolbox.TestRunner;\n+import toolbox.Task;\n+\n+public class Diagnostics extends TestRunner {\n+    ToolBox tb;\n+\n+    public Diagnostics() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Diagnostics d = new Diagnostics();\n+        d.runTests();\n+    }\n+\n+    @Test\n+    public void testPathManipulation() throws Exception {\n+        String code = \"public class Main{public static void main(String[]a){}}\";\n+        tb.writeFile(\"Main.java\", code);\n+        List<Path> files = Arrays.asList(Path.of(\"Main.java\"));\n+        List<String> options = null;\n+        List<String> expected = null;\n+\n+        \/\/ No warnings unless -Xlint:path is used\n+        options = Arrays.asList(\"-XDrawDiagnostics\");\n+        expected = Arrays.asList(\"\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-cp\", \"classes\");\n+        expected = Arrays.asList(\"\");\n+        testCompileOK(files, options, expected);\n+\n+        \/\/ Warn for missing elts in user-specified paths\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-Xlint:path\", \"-cp\", \"classes\");\n+        expected = Arrays.asList(\"- compiler.warn.path.element.not.found: classes\", \"1 warning\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-source\", \"8\", \"-target\", \"8\",\n+                \"-Xlint:path\", \"-Xbootclasspath\/p:classes\");\n+        expected = Arrays.asList(\"- compiler.warn.path.element.not.found: classes\", \"1 warning\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-source\", \"8\", \"-target\", \"8\",\n+                \"-Xlint\", \"-Xbootclasspath\/a:classes\");\n+        expected = Arrays.asList(\"- compiler.warn.path.element.not.found: classes\", \"1 warning\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-source\", \"8\", \"-target\", \"8\",\n+                \"-Xlint:path\", \"-endorseddirs\", \"classes\");\n+        expected = Arrays.asList(\"- compiler.warn.dir.path.element.not.found: classes\",\n+                \"- compiler.warn.source.no.bootclasspath: 8\", \"2 warnings\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-source\", \"8\", \"-target\", \"8\",\n+                \"-Xlint\", \"-extdirs\", \"classes\");\n+        expected = Arrays.asList(\"- compiler.warn.dir.path.element.not.found: classes\",\n+                \"- compiler.warn.source.no.bootclasspath: 8\", \"2 warnings\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-source\", \"8\", \"-target\", \"8\",\n+                \"-Xlint:path\", \"-Xbootclasspath:classes\/DefaultBootClassPath\");\n+        expected = Arrays.asList(\"- compiler.warn.path.element.not.found: classes\/DefaultBootClassPath\",\n+                \"Main.java:1:8: compiler.err.cant.access: java.lang.Object, (compiler.misc.class.file.not.found: java.lang.Object)\",\n+                \"Main.java:1:43: compiler.err.cant.resolve.location: kindname.class, String, , , (compiler.misc.location: kindname.class, Main, null)\",\n+                \"2 errors\", \"1 warning\");\n+        testCompileFail(files, options, expected);\n+\n+        \/\/ No warning for missing elts in \"system\" paths\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-Xlint:path\", \"-J-Djava.endorsed.dirs=classes\");\n+        expected = Arrays.asList(\"\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-Xlint:path\", \"-J-Djava.ext.dirs=classes\");\n+        expected = Arrays.asList(\"\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-Xlint:path\", \"-J-Xbootclasspath\/p:classes\");\n+        expected = Arrays.asList(\"\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-Xlint:path\", \"-J-Xbootclasspath\/a:classes\");\n+        expected = Arrays.asList(\"\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-Xlint:path\", \"-J-Xbootclasspath:classes\/DefaultBootClassPath\");\n+        expected = Arrays.asList(\"\");\n+        testCompileOK(files, options, expected);\n+\n+        \/\/ No warning if class path element exists\n+        tb.createDirectories(\"classes\");\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-Xlint:path\", \"-cp\", \"classes\");\n+        expected = Arrays.asList(\"\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-source\", \"8\", \"-target\", \"8\",\n+                \"-Xlint:path\", \"-endorseddirs\", \"classes\");\n+        expected = Arrays.asList(\"- compiler.warn.source.no.bootclasspath: 8\", \"1 warning\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-source\", \"8\", \"-target\", \"8\",\n+                \"-Xlint:path\", \"-extdirs\", \"classes\");\n+        expected = Arrays.asList(\"- compiler.warn.source.no.bootclasspath: 8\", \"1 warning\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-source\", \"8\", \"-target\", \"8\",\n+                \"-Xlint:path\", \"-Xbootclasspath\/p:classes\");\n+        expected = Arrays.asList(\"\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-source\", \"8\", \"-target\", \"8\",\n+                \"-Xlint:path\", \"-Xbootclasspath\/a:classes\");\n+        expected = Arrays.asList(\"\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-source\", \"8\", \"-target\", \"8\",\n+                \"-Xlint:path\", \"-Xbootclasspath:classes\/DefaultBootClassPath\");\n+        expected = Arrays.asList(\"- compiler.warn.path.element.not.found: classes\/DefaultBootClassPath\",\n+                \"Main.java:1:8: compiler.err.cant.access: java.lang.Object, (compiler.misc.class.file.not.found: java.lang.Object)\",\n+                \"Main.java:1:43: compiler.err.cant.resolve.location: kindname.class, String, , , (compiler.misc.location: kindname.class, Main, null)\",\n+                \"2 errors\", \"1 warning\");\n+        testCompileFail(files, options, expected);\n+\n+        \/\/ test jar, war, zip file\n+        sun.tools.jar.Main jarGenerator = new sun.tools.jar.Main(System.out, System.err, \"jar\");\n+        jarGenerator.run(new String[] {\"cf\", \"classes.jar\", \"Main.class\"});\n+        tb.copyFile(\"classes.jar\", \".\/classes.war\");\n+        tb.copyFile(\"classes.jar\", \".\/classes.zip\");\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-Xlint:path\", \"-cp\", \"classes.jar\");\n+        expected = Arrays.asList(\"\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-Xlint:path\", \"-cp\", \"classes.war\");\n+        expected = Arrays.asList(\"- compiler.warn.unexpected.archive.file: classes.war\", \"1 warning\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-Xlint:path\", \"-cp\", \"classes.zip\");\n+        expected = Arrays.asList(\"\");\n+        testCompileOK(files, options, expected);\n+\n+        \/\/ Warn if -Xlint is used and if class path element refers to\n+        \/\/ regular file which doesn't look like a zip file\n+        tb.copyFile(\"classes.war\", \".\/classes.foo\");\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-Xlint:path\", \"-cp\", \"classes.foo\");\n+        expected = Arrays.asList(\"- compiler.warn.unexpected.archive.file: classes.foo\", \"1 warning\");\n+        testCompileOK(files, options, expected);\n+\n+        \/\/ No error if class path element refers to regular file which is not a zip file\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-cp\", \"Main.java\");\n+        expected = Arrays.asList(\"\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\");\n+        expected = Arrays.asList(\"\");\n+        testCompileOK(files, options, expected);\n+\n+        \/\/ Warn if -Xlint is used and if class path element refers to\n+        \/\/ regular file which is not a zip file\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-Xlint\", \"-cp\", \"Main.java\");\n+        expected = Arrays.asList(\"- compiler.warn.invalid.archive.file: Main.java\", \"1 warning\");\n+        testCompileOK(files, options, expected);\n+\n+        \/\/ Test jar file class path reference recursion\n+        \/\/ Create MANIFEST.MF and classesRefRef.jar\n+        tb.writeFile(\"MANIFEST.MF\", \"Manifest-Version: 1.0\\nClass-Path: classesRef.jar\\n\");\n+        jarGenerator.run(new String[] {\"-c\", \"-f\", \"classesRefRef.jar\", \"-m\", \"MANIFEST.MF\", \"Main.class\"});\n+\n+        \/\/ Non-existent recursive Class-Path reference gives warning\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-classpath\", \"classesRefRef.jar\");\n+        expected = Arrays.asList(\"\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-Xlint\", \"-classpath\", \"classesRefRef.jar\");\n+        expected = Arrays.asList(\"- compiler.warn.path.element.not.found: \"\n+                + Path.of(\".\").toAbsolutePath().normalize() + \"\/classesRef.jar\", \"1 warning\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-source\", \"8\", \"-target\", \"8\",\n+                \"-Xlint\", \"-Xbootclasspath\/p:classesRefRef.jar\");\n+        expected = Arrays.asList(\"\");\n+        testCompileOK(files, options, expected);\n+\n+        \/\/ Create a bad jar file classesRef.jar\n+        tb.writeFile(\"classesRef.jar\", Path.of(\".\").toAbsolutePath().toString());\n+\n+        \/\/ Non-jar file recursive Class-Path reference gives error\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-classpath\", \"classesRefRef.jar\");\n+        expected = Arrays.asList(\"- compiler.err.error.reading.file: \"\n+                + Path.of(\".\").toAbsolutePath().normalize()\n+                + \"\/classesRef.jar, zip END header not found\");\n+        testCompileFail(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-source\", \"8\", \"-target\", \"8\",\n+                \"-Xbootclasspath\/a:classesRefRef.jar\");\n+        expected = Arrays.asList(\"\");\n+        testCompileOK(files, options, expected);\n+\n+        \/\/ Create MANIFEST.MF and classesRef.jar\n+        tb.writeFile(\"MANIFEST.MF\", \"Manifest-Version: 1.0\\nClass-Path: classes\\n\");\n+        jarGenerator.run(new String[] {\"-c\", \"-f\", \"classesRef.jar\", \"-m\", \"MANIFEST.MF\", \"Main.class\"});\n+\n+        \/\/ Jar file recursive Class-Path reference is OK\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-Xlint\", \"-classpath\", \"classesRefRef.jar\");\n+        expected = Arrays.asList(\"\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-source\", \"8\", \"-target\", \"8\",\n+                \"-Xlint\", \"-Xbootclasspath\/p:classesRefRef.jar\");\n+        expected = Arrays.asList(\"\");\n+        testCompileOK(files, options, expected);\n+\n+        \/\/ Class-Path attribute followed in extdirs or endorseddirs\n+        tb.createDirectories(\"jars\");\n+        tb.copyFile(\"classesRefRef.jar\", \"jars\/.\");\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-source\", \"8\", \"-target\", \"8\",\n+                \"-Xlint\", \"-extdirs\", \"jars\");\n+        expected = Arrays.asList(\"- compiler.warn.path.element.not.found: \"\n+                + Path.of(\".\").toAbsolutePath().normalize() + \"\/jars\/classesRef.jar\",\n+                \"- compiler.warn.source.no.bootclasspath: 8\", \"2 warnings\");\n+        testCompileOK(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-source\", \"8\", \"-target\", \"8\",\n+                \"-Xlint:path\", \"-endorseddirs\", \"jars\");\n+        expected = Arrays.asList(\"- compiler.warn.path.element.not.found: \"\n+                + Path.of(\".\").toAbsolutePath().normalize() + \"\/jars\/classesRef.jar\",\n+                \"- compiler.warn.source.no.bootclasspath: 8\", \"2 warnings\");\n+        testCompileOK(files, options, expected);\n+\n+        \/\/ Create a bad jar file classesRef.jar\n+        tb.writeFile(\"jars\/classesRef.jar\", Path.of(\".\").toAbsolutePath().toString());\n+\n+        \/\/ Bad Jar file in extdirs and endorseddirs should not be ignored\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-source\", \"8\", \"-target\", \"8\",\n+                \"-Xlint\", \"-extdirs\", \"jars\");\n+        expected = Arrays.asList(\"- compiler.err.error.reading.file: jars\/classesRef.jar, zip END header not found\",\n+                \"- compiler.warn.source.no.bootclasspath: 8\");\n+        testCompileFail(files, options, expected);\n+\n+        options = Arrays.asList(\"-XDrawDiagnostics\", \"-source\", \"8\", \"-target\", \"8\",\n+                \"-Xlint:path\", \"-endorseddirs\", \"jars\");\n+        expected = Arrays.asList(\"- compiler.err.error.reading.file: jars\/classesRef.jar, zip END header not found\",\n+                \"- compiler.warn.source.no.bootclasspath: 8\");\n+        testCompileFail(files, options, expected);\n+    }\n+\n+    public void testCompileOK(List<Path> files, List<String> options, List<String> expected) {\n+        testCompile(Task.Expect.SUCCESS, files, options, expected);\n+    }\n+\n+    public void testCompileFail(List<Path> files, List<String> options, List<String> expected) {\n+        testCompile(Task.Expect.FAIL, files, options, expected);\n+    }\n+\n+    public void testCompile(Task.Expect result, List<Path> files, List<String> options, List<String> expectedOutput) {\n+        List<String> output = new JavacTask(tb, Task.Mode.CMDLINE)\n+                .files(files)\n+                .options(options)\n+                .run(result)\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        tb.checkEqual(expectedOutput, output);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/Paths\/Diagnostics.java","additions":310,"deletions":0,"binary":false,"changes":310,"status":"added"},{"patch":"@@ -1,210 +0,0 @@\n-#!\/bin\/sh\n-\n-#\n-# Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-#\n-# @test\n-# @bug 4884487 6295519 6236704 6429613\n-# @summary Test for proper diagnostics during path manipulation operations\n-# @author Martin Buchholz\n-#\n-# @run shell\/timeout=180 Diagnostics.sh\n-\n-# To run this test manually, simply do .\/Diagnostics.sh\n-\n-. ${TESTSRC-.}\/Util.sh\n-\n-set -u\n-\n-# BCP=`DefaultBootClassPath`\n-\n-DiagnosticsInEnglishPlease\n-\n-No() { NO=\"no\"; \"$@\"; NO=\"\"; }  # No means NO!\n-\n-Warning() {\n-    HorizontalRule\n-    echo \"$@\"\n-    output=`\"$@\" 2>&1`; rc=\"$?\"\n-    output2=`echo \"$output\" | grep -v \"bootstrap class path not set in conjunction with -source\"`\n-    test -n \"$output2\" && echo \"$output\"\n-    test $rc -eq 0 || Fail \"Command \\\"$*\\\" failed with exitValue $rc\";\n-    case \"$output2\" in *warning:*) gotwarning=\"yes\";; *) gotwarning=\"no\";; esac\n-\n-    if test \"$gotwarning\" = \"yes\" -a \"$NO\" = \"no\"; then\n-        Fail \"Command \\\"$*\\\" printed an unexpected warning\"\n-    elif test \"$gotwarning\" = \"no\" -a \"$NO\" != \"no\"; then\n-        Fail \"Command \\\"$*\\\" did not generate the expected warning\"\n-    fi\n-}\n-\n-Error() {\n-    HorizontalRule\n-    echo \"$@\"\n-    output=`\"$@\" 2>&1`; rc=\"$?\"\n-    test -n \"$output\" && echo \"$output\"\n-    case \"$output\" in *error:*) goterror=\"yes\";; *) goterror=\"no\";; esac\n-\n-    if test \"$NO\" = \"no\"; then\n-        test \"$rc\" -ne 0 && \\\n-            Fail \"Command \\\"$*\\\" failed with return code $rc\"\n-        test \"$goterror\" = \"yes\" && \\\n-            Fail \"Command \\\"$*\\\" did not generate any error message\"\n-    else\n-        test \"$rc\" -eq 0 && \\\n-            Fail \"Command \\\"$*\\\" was supposed to Die with fatal error\";\n-        test \"$goterror\" = \"no\" && \\\n-            Fail \"Command \\\"$*\\\" printed an unexpected error message\"\n-    fi\n-}\n-\n-Cleanup() {\n-    Sys rm -rf Main.java Main.class\n-    Sys rm -rf classes classes.foo classes.jar classes.war classes.zip\n-    Sys rm -rf MANIFEST.MF classesRef.jar classesRefRef.jar jars\n-}\n-\n-Cleanup\n-echo \"public class Main{public static void main(String[]a){}}\" > Main.java\n-\n-# We need to set -source 8 -target 8 for those cases where the option is\n-# not legal in 9 and later. However, that triggers an additional warning\n-# about not setting bootclasspath, which is filtered out in Warning.\n-# The alternative would be to extract a minimal rt.jar from JDK and\n-# specify that with -bootclasspath.\n-SRCTRG8=\"-source 8 -target 8\"\n-\n-#----------------------------------------------------------------\n-# No warnings unless -Xlint:path is used\n-#----------------------------------------------------------------\n-No Warning \"$javac\" ${TESTTOOLVMOPTS} Main.java\n-No Warning \"$javac\" ${TESTTOOLVMOPTS} -cp \".${PS}classes\" Main.java\n-\n-#----------------------------------------------------------------\n-# Warn for missing elts in user-specified paths\n-#----------------------------------------------------------------\n-Warning \"$javac\" ${TESTTOOLVMOPTS}           -Xlint:path -cp \".${PS}classes\"         Main.java\n-Warning \"$javac\" ${TESTTOOLVMOPTS} ${SRCTRG8} -Xlint:path \"-Xbootclasspath\/p:classes\" Main.java\n-Warning \"$javac\" ${TESTTOOLVMOPTS} ${SRCTRG8} -Xlint      \"-Xbootclasspath\/a:classes\" Main.java\n-\n-Warning \"$javac\" ${TESTTOOLVMOPTS} ${SRCTRG8} -Xlint:path \"-endorseddirs\" \"classes\"   Main.java\n-Warning \"$javac\" ${TESTTOOLVMOPTS} ${SRCTRG8} -Xlint      \"-extdirs\"      \"classes\"   Main.java\n-#Warning \"$javac\" ${TESTTOOLVMOPTS} ${SRCTRG8} -Xlint:path \"-Xbootclasspath:classes${PS}${BCP}\" Main.java\n-\n-#----------------------------------------------------------------\n-# No warning for missing elts in \"system\" paths\n-#----------------------------------------------------------------\n-# No Warning \"$javac\" ${TESTTOOLVMOPTS} -Xlint:path \"-J-Djava.endorsed.dirs=classes\" Main.java\n-# No Warning \"$javac\" ${TESTTOOLVMOPTS} -Xlint:path \"-J-Djava.ext.dirs=classes\"      Main.java\n-# No Warning \"$javac\" ${TESTTOOLVMOPTS} -Xlint:path \"-J-Xbootclasspath\/p:classes\"    Main.java\n-# No Warning \"$javac\" ${TESTTOOLVMOPTS} -Xlint:path \"-J-Xbootclasspath\/a:classes\"    Main.java\n-# No Warning \"$javac\" ${TESTTOOLVMOPTS} -Xlint:path \"-J-Xbootclasspath:classes${PS}${BCP}\" Main.java\n-\n-#----------------------------------------------------------------\n-# No warning if class path element exists\n-#----------------------------------------------------------------\n-Sys mkdir classes\n-No Warning \"$javac\" ${TESTTOOLVMOPTS}           -Xlint:path -cp \".${PS}classes\"         Main.java\n-No Warning \"$javac\" ${TESTTOOLVMOPTS} ${SRCTRG8} -Xlint:path \"-endorseddirs\"   \"classes\" Main.java\n-No Warning \"$javac\" ${TESTTOOLVMOPTS} ${SRCTRG8} -Xlint:path \"-extdirs\"        \"classes\" Main.java\n-No Warning \"$javac\" ${TESTTOOLVMOPTS} ${SRCTRG8} -Xlint:path \"-Xbootclasspath\/p:classes\" Main.java\n-No Warning \"$javac\" ${TESTTOOLVMOPTS} ${SRCTRG8} -Xlint:path \"-Xbootclasspath\/a:classes\" Main.java\n-#No Warning \"$javac\" ${TESTTOOLVMOPTS} ${SRCTRG8} -Xlint:path \"-Xbootclasspath:classes${PS}${BCP}\" Main.java\n-\n-Sys \"$jar\" cf classes.jar Main.class\n-Sys cp classes.jar classes.war\n-Sys cp classes.war classes.zip\n-No Warning \"$javac\" ${TESTTOOLVMOPTS} -Xlint:path -cp \".${PS}classes.jar\"     Main.java\n-   Warning \"$javac\" ${TESTTOOLVMOPTS} -Xlint:path -cp \".${PS}classes.war\"     Main.java\n-No Warning \"$javac\" ${TESTTOOLVMOPTS} -Xlint:path -cp \".${PS}classes.zip\"     Main.java\n-\n-#----------------------------------------------------------------\n-# Warn if -Xlint is used and if class path element refers to\n-# regular file which doesn't look like a zip file, but is\n-#----------------------------------------------------------------\n-Sys cp classes.war classes.foo\n-   Warning \"$javac\" ${TESTTOOLVMOPTS} -Xlint:path -cp \".${PS}classes.foo\"     Main.java\n-\n-\n-#----------------------------------------------------------------\n-# No error if class path element refers to regular file which is\n-# not a zip file\n-#----------------------------------------------------------------\n-No Error \"$javac\" ${TESTTOOLVMOPTS} -cp Main.java Main.java # Main.java is NOT a jar file\n-No Error \"$javac\" ${TESTTOOLVMOPTS} Main.java\n-\n-#----------------------------------------------------------------\n-# Warn if -Xlint is used and if class path element refers to\n-# regular file which is not a zip file\n-#----------------------------------------------------------------\n-Warning \"$javac\" ${TESTTOOLVMOPTS} -Xlint -cp Main.java Main.java # Main.java is NOT a jar file\n-\n-#----------------------------------------------------------------\n-# Test jar file class path reference recursion\n-#----------------------------------------------------------------\n-MkManifestWithClassPath classesRef.jar\n-Sys \"$jar\" cmf MANIFEST.MF classesRefRef.jar Main.class\n-\n-#----------------------------------------------------------------\n-# Non-existent recursive Class-Path reference gives warning\n-#----------------------------------------------------------------\n-No Warning \"$javac\" ${TESTTOOLVMOPTS}                        -classpath   classesRefRef.jar Main.java\n-   Warning \"$javac\" ${TESTTOOLVMOPTS}            -Xlint      -classpath   classesRefRef.jar Main.java\n-No Warning \"$javac\" ${TESTTOOLVMOPTS} ${SRCTRG8} -Xlint -Xbootclasspath\/p:classesRefRef.jar Main.java\n-\n-BadJarFile classesRef.jar\n-\n-#----------------------------------------------------------------\n-# Non-jar file recursive Class-Path reference gives error\n-#----------------------------------------------------------------\n-   Error \"$javac\" ${TESTTOOLVMOPTS}            -classpath        classesRefRef.jar Main.java\n-No Error \"$javac\" ${TESTTOOLVMOPTS} ${SRCTRG8} -Xbootclasspath\/a:classesRefRef.jar Main.java\n-\n-MkManifestWithClassPath classes\n-Sys \"$jar\" cmf MANIFEST.MF classesRef.jar Main.class\n-\n-#----------------------------------------------------------------\n-# Jar file recursive Class-Path reference is OK\n-#----------------------------------------------------------------\n-No Warning \"$javac\" ${TESTTOOLVMOPTS}            -Xlint      -classpath   classesRefRef.jar Main.java\n-No Warning \"$javac\" ${TESTTOOLVMOPTS} ${SRCTRG8} -Xlint -Xbootclasspath\/p:classesRefRef.jar Main.java\n-\n-#----------------------------------------------------------------\n-# Class-Path attribute followed in extdirs or endorseddirs\n-#----------------------------------------------------------------\n-Sys mkdir jars\n-Sys cp classesRefRef.jar jars\/.\n-   Warning \"$javac\" ${TESTTOOLVMOPTS} ${SRCTRG8} -Xlint -extdirs      jars Main.java\n-   Warning \"$javac\" ${TESTTOOLVMOPTS} ${SRCTRG8} -Xlint -endorseddirs jars Main.java\n-\n-#----------------------------------------------------------------\n-# Bad Jar file in extdirs and endorseddirs should not be ignored\n-#----------------------------------------------------------------\n-BadJarFile jars\/classesRef.jar\n-   Error \"$javac\" ${TESTTOOLVMOPTS} ${SRCTRG8} -Xlint -extdirs      jars Main.java\n-   Error \"$javac\" ${TESTTOOLVMOPTS} ${SRCTRG8} -Xlint -endorseddirs jars Main.java\n-\n-Cleanup\n-\n-Bottom Line\n","filename":"test\/langtools\/tools\/javac\/Paths\/Diagnostics.sh","additions":0,"deletions":210,"binary":false,"changes":210,"status":"deleted"}]}