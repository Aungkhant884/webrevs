{"files":[{"patch":"@@ -80,1 +80,2 @@\n-  void load_resolved_reference_at_index(Register result, Register index, Register tmp1, Label *L_handle_null = NULL);\n+  void load_resolved_reference_at_index(Register result, Register index, Register tmp1, Register tmp2,\n+                                        Label *L_handle_null = NULL);\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -480,1 +480,2 @@\n-void InterpreterMacroAssembler::load_resolved_reference_at_index(Register result, Register index, Register tmp1,\n+void InterpreterMacroAssembler::load_resolved_reference_at_index(Register result, Register index,\n+                                                                 Register tmp1, Register tmp2,\n@@ -482,1 +483,2 @@\n-  assert_different_registers(result, index);\n+  assert_different_registers(result, index, tmp1, tmp2);\n+  assert(index->is_nonvolatile(), \"needs to survive C-call in resolve_oop_handle\");\n@@ -487,2 +489,1 @@\n-  Register tmp2 = index;  \/\/ reuse\n-  sldi(tmp1, index, LogBytesPerHeapOop);\n+  sldi(index, index, LogBytesPerHeapOop);\n@@ -492,1 +493,1 @@\n-  resolve_oop_handle(result);\n+  resolve_oop_handle(result, tmp1, tmp2, MacroAssembler::PRESERVATION_NONE);\n@@ -497,1 +498,1 @@\n-  cmpd(CCR0, tmp1, R0);\n+  cmpd(CCR0, index, R0);\n@@ -503,1 +504,1 @@\n-  add(result, tmp1, result);\n+  add(result, index, result);\n@@ -506,1 +507,1 @@\n-                MacroAssembler::PRESERVATION_FRAME_LR,\n+                MacroAssembler::PRESERVATION_NONE,\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -3236,3 +3236,3 @@\n-void MacroAssembler::resolve_oop_handle(Register result) {\n-  \/\/ OopHandle::resolve is an indirection.\n-  ld(result, 0, result);\n+void MacroAssembler::resolve_oop_handle(Register result, Register tmp1, Register tmp2,\n+                                        MacroAssembler::PreservationLevel preservation_level) {\n+  access_load_at(T_OBJECT, IN_NATIVE, result, noreg, result, tmp1, tmp2, preservation_level);\n@@ -3241,5 +3241,11 @@\n-void MacroAssembler::load_mirror_from_const_method(Register mirror, Register const_method) {\n-  ld(mirror, in_bytes(ConstMethod::constants_offset()), const_method);\n-  ld(mirror, ConstantPool::pool_holder_offset_in_bytes(), mirror);\n-  ld(mirror, in_bytes(Klass::java_mirror_offset()), mirror);\n-  resolve_oop_handle(mirror);\n+void MacroAssembler::resolve_weak_handle(Register result, Register tmp1, Register tmp2,\n+                                         MacroAssembler::PreservationLevel preservation_level) {\n+  Label resolved;\n+\n+  \/\/ A null weak handle resolves to null.\n+  cmpdi(CCR0, result, 0);\n+  beq(CCR0, resolved);\n+\n+  access_load_at(T_OBJECT, IN_NATIVE | ON_PHANTOM_OOP_REF, result, noreg, result, tmp1, tmp2,\n+                 preservation_level);\n+  bind(resolved);\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -746,2 +746,4 @@\n-  void resolve_oop_handle(Register result);\n-  void load_mirror_from_const_method(Register mirror, Register const_method);\n+  void resolve_oop_handle(Register result, Register tmp1, Register tmp2,\n+                          MacroAssembler::PreservationLevel preservation_level);\n+  void resolve_weak_handle(Register result, Register tmp1, Register tmp2,\n+                           MacroAssembler::PreservationLevel preservation_level);\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -937,1 +937,3 @@\n-           Rconst_method       = R8_ARG6;\n+           Rconst_method       = R8_ARG6,\n+           Rconst_pool         = R9_ARG7,\n+           R10_tmp             = R10_ARG8;\n@@ -993,2 +995,2 @@\n-  __ ld(R27_constPoolCache, in_bytes(ConstMethod::constants_offset()), Rconst_method);\n-  __ ld(R27_constPoolCache, ConstantPool::cache_offset_in_bytes(), R27_constPoolCache);\n+  __ ld(Rconst_pool, in_bytes(ConstMethod::constants_offset()), Rconst_method);\n+  __ ld(R27_constPoolCache, ConstantPool::cache_offset_in_bytes(), Rconst_pool);\n@@ -1019,1 +1021,3 @@\n-  __ load_mirror_from_const_method(R12_scratch2, Rconst_method);\n+  __ ld(R10_tmp, ConstantPool::pool_holder_offset_in_bytes(), Rconst_pool);\n+  __ ld(R10_tmp, in_bytes(Klass::java_mirror_offset()), R10_tmp);\n+  __ resolve_oop_handle(R10_tmp, R11_scratch1, R12_scratch2, MacroAssembler::PRESERVATION_FRAME_LR_GP_REGS);\n@@ -1026,1 +1030,1 @@\n-  __ std(R12_scratch2, _ijava_state_neg(mirror), R1_SP);\n+  __ std(R10_tmp, _ijava_state_neg(mirror), R1_SP);\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,1 +29,2 @@\n-  static void prepare_invoke(int byte_no, Register Rmethod, Register Rret_addr, Register Rindex, Register Rrecv, Register Rflags, Register Rscratch);\n+  static void prepare_invoke(int byte_no, Register Rmethod, Register Rret_addr, Register Rindex, Register Rrecv, Register Rflags,\n+                             Register Rscratch1, Register Rscratch2);\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -312,2 +312,2 @@\n-  __ get_cache_index_at_bcp(R11_scratch1, 1, index_size);  \/\/ Load index.\n-  __ load_resolved_reference_at_index(R17_tos, R11_scratch1, R12_scratch2, &is_null);\n+  __ get_cache_index_at_bcp(R31, 1, index_size);  \/\/ Load index.\n+  __ load_resolved_reference_at_index(R17_tos, R31, R11_scratch1, R12_scratch2, &is_null);\n@@ -317,3 +317,3 @@\n-  __ ld(R11_scratch1, simm16_rest, R11_scratch1);\n-  __ resolve_oop_handle(R11_scratch1);\n-  __ cmpld(CCR0, R17_tos, R11_scratch1);\n+  __ ld(R31, simm16_rest, R11_scratch1);\n+  __ resolve_oop_handle(R31, R11_scratch1, R12_scratch2, MacroAssembler::PRESERVATION_NONE);\n+  __ cmpld(CCR0, R17_tos, R31);\n@@ -2255,0 +2255,2 @@\n+\/\/ Kills:\n+\/\/   - R11, R12\n@@ -2260,3 +2262,3 @@\n-                                              bool is_static = false) {\n-  assert_different_registers(Rcache, Rflags, Roffset);\n-  \/\/ assert(Rindex == noreg, \"parameter not used on PPC64\");\n+                                              bool is_static) {\n+  assert_different_registers(Rcache, Rflags, Roffset, R11_scratch1, R12_scratch2);\n+  assert(Rindex == noreg, \"parameter not used on PPC64\");\n@@ -2270,1 +2272,1 @@\n-    __ resolve_oop_handle(Robj);\n+    __ resolve_oop_handle(Robj, R11_scratch1, R12_scratch2, MacroAssembler::PRESERVATION_NONE);\n@@ -2430,1 +2432,2 @@\n-                 Rscratch      = R12_scratch2;\n+                 Rscratch      = R11_scratch1; \/\/ used by load_field_cp_cache_entry\n+                 \/\/ R12_scratch2 used by load_field_cp_cache_entry\n@@ -2444,1 +2447,1 @@\n-  load_field_cp_cache_entry(Rclass_or_obj, Rcache, noreg, Roffset, Rflags, is_static);\n+  load_field_cp_cache_entry(Rclass_or_obj, Rcache, noreg, Roffset, Rflags, is_static); \/\/ Uses R11, R12\n@@ -2761,1 +2764,1 @@\n-                 Rflags        = R3_ARG1,\n+                 Rflags        = R30,\n@@ -2763,2 +2766,2 @@\n-                 Rscratch      = R11_scratch1,\n-                 Rscratch2     = R12_scratch2,\n+                 Rscratch      = R11_scratch1, \/\/ used by load_field_cp_cache_entry\n+                 Rscratch2     = R12_scratch2, \/\/ used by load_field_cp_cache_entry\n@@ -2783,1 +2786,1 @@\n-  load_field_cp_cache_entry(Rclass_or_obj, Rcache, noreg, Roffset, Rflags, is_static);\n+  load_field_cp_cache_entry(Rclass_or_obj, Rcache, noreg, Roffset, Rflags, is_static); \/\/ Uses R11, R12\n@@ -3010,2 +3013,2 @@\n-                 Rscratch      = R11_scratch1,\n-                 Rscratch2     = R12_scratch2,\n+                 Rscratch      = R11_scratch1, \/\/ used by load_field_cp_cache_entry\n+                 Rscratch2     = R12_scratch2, \/\/ used by load_field_cp_cache_entry\n@@ -3018,1 +3021,1 @@\n-  load_field_cp_cache_entry(noreg, Rcache, noreg, Roffset, Rflags, false);\n+  load_field_cp_cache_entry(noreg, Rcache, noreg, Roffset, Rflags, false); \/\/ Uses R11, R12\n@@ -3093,1 +3096,2 @@\n-                 Rscratch      = R12_scratch2;\n+                 Rscratch      = R11_scratch1; \/\/ used by load_field_cp_cache_entry\n+                 \/\/ R12_scratch2 used by load_field_cp_cache_entry\n@@ -3097,1 +3101,1 @@\n-  load_field_cp_cache_entry(noreg, Rcache, noreg, Roffset, Rflags, false);\n+  load_field_cp_cache_entry(noreg, Rcache, noreg, Roffset, Rflags, false); \/\/ Uses R11, R12\n@@ -3229,1 +3233,2 @@\n-                 Rscratch      = R12_scratch2;\n+                 Rscratch      = R11_scratch1;\n+                 \/\/ R12_scratch2 used by load_field_cp_cache_entry\n@@ -3235,1 +3240,1 @@\n-  load_field_cp_cache_entry(noreg, Rcache, noreg, Roffset, Rflags, false);\n+  load_field_cp_cache_entry(noreg, Rcache, noreg, Roffset, Rflags, false); \/\/ Uses R11, R12\n@@ -3320,1 +3325,2 @@\n-                                   Register Rscratch\n+                                   Register Rscratch1,\n+                                   Register Rscratch2\n@@ -3332,4 +3338,3 @@\n-  assert_different_registers(Rmethod, Rindex, Rflags, Rscratch);\n-  assert_different_registers(Rmethod, Rrecv, Rflags, Rscratch);\n-  \/\/ Rret_addr and Rindex have to be distinct as Rret_addr is used as a second temp register\n-  assert_different_registers(Rret_addr, Rindex, Rscratch);\n+  assert_different_registers(Rmethod, Rindex, Rflags, Rscratch1);\n+  assert_different_registers(Rmethod, Rrecv, Rflags, Rscratch1);\n+  assert_different_registers(Rret_addr, Rscratch1);\n@@ -3344,1 +3349,1 @@\n-    Register reference = Rret_addr; \/\/ safe to use here; first use comes later\n+    Register reference = Rscratch1;\n@@ -3351,1 +3356,1 @@\n-    __ load_resolved_reference_at_index(reference, Rindex, Rscratch);\n+    __ load_resolved_reference_at_index(reference, Rindex, \/* temp *\/ Rret_addr, Rscratch2);\n@@ -3354,0 +3359,1 @@\n+\n@@ -3359,1 +3365,1 @@\n-    const Register Rparam_count = Rscratch;\n+    const Register Rparam_count = Rscratch1;\n@@ -3367,1 +3373,1 @@\n-    Register Rtable_addr = Rscratch;\n+    Register Rtable_addr = Rscratch1;\n@@ -3498,1 +3504,1 @@\n-  prepare_invoke(byte_no, Rmethod, Rret_addr, noreg, Rreceiver, Rflags, R11_scratch1);\n+  prepare_invoke(byte_no, Rmethod, Rret_addr, noreg, Rreceiver, Rflags, R11_scratch1, R12_scratch2);\n@@ -3517,1 +3523,1 @@\n-  prepare_invoke(byte_no, R19_method, Rret_addr, noreg, noreg, Rflags, R11_scratch1);\n+  prepare_invoke(byte_no, R19_method, Rret_addr, noreg, noreg, Rflags, R11_scratch1, R12_scratch2);\n@@ -3569,1 +3575,1 @@\n-  prepare_invoke(byte_no, Rinterface_klass, Rret_addr, Rmethod, Rreceiver, Rflags, Rscratch1);\n+  prepare_invoke(byte_no, Rinterface_klass, Rret_addr, Rmethod, Rreceiver, Rflags, Rscratch1, \/* temp *\/ Rrecv_klass);\n@@ -3656,2 +3662,3 @@\n-                 Rscratch1 = R11_scratch1,\n-                 Rscratch2 = R12_scratch2;\n+                 Rscratch1 = R30,\n+                 Rscratch2 = R11_scratch1,\n+                 Rscratch3 = R12_scratch2;\n@@ -3659,1 +3666,1 @@\n-  prepare_invoke(byte_no, Rmethod, Rret_addr, Rscratch1, noreg, Rflags, Rscratch2);\n+  prepare_invoke(byte_no, Rmethod, Rret_addr, Rscratch1, noreg, Rflags, Rscratch2, Rscratch3);\n@@ -3681,2 +3688,3 @@\n-                 Rscratch1 = R11_scratch1,\n-                 Rscratch2 = R12_scratch2;\n+                 Rscratch1 = R30,\n+                 Rscratch2 = R11_scratch1,\n+                 Rscratch3 = R12_scratch2;\n@@ -3684,1 +3692,1 @@\n-  prepare_invoke(byte_no, Rmethod, Rret_addr, Rscratch1, Rrecv, Rflags, Rscratch2);\n+  prepare_invoke(byte_no, Rmethod, Rret_addr, Rscratch1, Rrecv, Rflags, Rscratch2, Rscratch3);\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":48,"deletions":40,"binary":false,"changes":88,"status":"modified"}]}