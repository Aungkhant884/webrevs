{"files":[{"patch":"@@ -24,2 +24,0 @@\n-import java.lang.ref.WeakReference;\n-import java.util.ArrayList;\n@@ -27,4 +25,0 @@\n-import javax.swing.JFrame;\n-import javax.swing.JPanel;\n-import javax.swing.JLabel;\n-import javax.swing.SwingUtilities;\n@@ -32,1 +26,1 @@\n-\/**\n+\/*\n@@ -34,1 +28,0 @@\n- * @key headful\n@@ -37,1 +30,1 @@\n- * @run main TestTitledBorderLeak\n+ * @run main\/othervm -Xmx10M TestTitledBorderLeak\n@@ -39,1 +32,0 @@\n-\n@@ -41,6 +33,0 @@\n-\n-    final static int TOTAL_TITLEDBORDER = 10;\n-    final static int GC_ATTEMPTS = 10;\n-    static ArrayList<WeakReference<TitledBorder>> weakRefArrTB =\n-                                         new ArrayList(TOTAL_TITLEDBORDER);\n-\n@@ -48,0 +34,14 @@\n+        int max = 100000;\n+        long initialFreeMemory = 0L;\n+        long currentFreeMemory;\n+        try {\n+            for (int i = 1; i <= max; i++) {\n+                new TitledBorder(\"\");\n+                if ((i % 1000) == 0) {\n+                    System.gc();\n+                    currentFreeMemory = dumpMemoryStatus(\"After \" + i);\n+                    if(initialFreeMemory == 0L) {\n+                        initialFreeMemory = currentFreeMemory;\n+                    } else if( currentFreeMemory < initialFreeMemory\/2) {\n+                        throw new RuntimeException(\"Memory halved: there's a leak\");\n+                    }\n@@ -49,22 +49,1 @@\n-        JFrame frame[] = new JFrame[TOTAL_TITLEDBORDER];\n-\n-        SwingUtilities.invokeAndWait(() -> {\n-            for (int i = 0; i < TOTAL_TITLEDBORDER; i++) {\n-                TitledBorder tb = new TitledBorder(\"\");\n-                weakRefArrTB.add(i, new WeakReference<TitledBorder>(tb));\n-                JLabel label = new JLabel(\"TitledBorder\");\n-                label.setBorder(tb);\n-                frame[i] = new JFrame(\"Borders\");\n-                JPanel panel = new JPanel();\n-                panel.add(label);\n-                frame[i].setContentPane(panel);\n-            }\n-        });\n-        if (TOTAL_TITLEDBORDER != weakRefArrTB.size()) {\n-            System.err.println(\"TOTAL_TITLEDBORDER != weakRefArrTB.size()\");\n-        }\n-        Thread.sleep(1000);\n-        SwingUtilities.invokeAndWait(() -> {\n-            for (int i = 0; i < TOTAL_TITLEDBORDER; i++) {\n-                frame[i].dispose();\n-                frame[i] = null;\n+                }\n@@ -72,13 +51,2 @@\n-        });\n-        Thread.sleep(1000);\n-        attemptGCTitledBorder();\n-        if (TOTAL_TITLEDBORDER != getCleanedUpTitledBorderCount()) {\n-            throw new RuntimeException(\"Expected Total TitledBorder to be freed : \" + TOTAL_TITLEDBORDER +\n-                           \" Freed \" + getCleanedUpTitledBorderCount());\n-        }\n-        System.out.println(\"OK\");\n-    }\n-\n-    private static void attemptGCTitledBorder() {\n-        \/\/ Attempt gc GC_ATTEMPTS times\n-        for (int i = 0; i < GC_ATTEMPTS; i++) {\n+        }catch(OutOfMemoryError e) {\n+            \/\/ Don't think it would work; should not happen\n@@ -86,8 +54,1 @@\n-            if (getCleanedUpTitledBorderCount() == TOTAL_TITLEDBORDER) {\n-                break;\n-            }\n-            try {\n-                Thread.sleep(500);\n-            } catch (InterruptedException e) {\n-                System.err.println(\"InterruptedException occurred during Thread.sleep()\");\n-            }\n+            throw new RuntimeException(\"There was OOM\");\n@@ -95,0 +56,1 @@\n+        System.out.println(\"Passed\");\n@@ -96,9 +58,5 @@\n-\n-    private static int getCleanedUpTitledBorderCount() {\n-        int count = 0;\n-        for (WeakReference<TitledBorder> ref : weakRefArrTB) {\n-            if (ref.get() == null) {\n-                count++;\n-            }\n-        }\n-        return count;\n+    private static long dumpMemoryStatus(String msg) {\n+        Runtime rt = Runtime.getRuntime();\n+        long freeMem = rt.freeMemory();\n+        System.out.println(msg + \": \" + freeMem + \" free\");\n+        return freeMem;\n@@ -107,0 +65,1 @@\n+\n","filename":"test\/jdk\/javax\/swing\/border\/TestTitledBorderLeak.java","additions":27,"deletions":68,"binary":false,"changes":95,"status":"modified"}]}