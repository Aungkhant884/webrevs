{"files":[{"patch":"@@ -159,0 +159,1 @@\n+\n@@ -160,1 +161,0 @@\n-  jint as_int = 0;\n@@ -163,1 +163,0 @@\n-      as_int = (jint)obj->byte_field(offset());\n@@ -167,1 +166,0 @@\n-      as_int = (jint)obj->char_field(offset());\n@@ -170,1 +168,0 @@\n-        as_int = c;\n@@ -178,1 +175,0 @@\n-      as_int = obj->int_field(offset());\n@@ -182,1 +178,0 @@\n-      as_int = obj->int_field(offset());\n@@ -190,1 +185,0 @@\n-      as_int = obj->short_field(offset());\n@@ -194,1 +188,0 @@\n-      as_int = obj->bool_field(offset());\n@@ -199,1 +192,0 @@\n-      NOT_LP64(as_int = obj->int_field(offset()));\n@@ -208,1 +200,0 @@\n-      NOT_LP64(as_int = obj->int_field(offset()));\n@@ -219,2 +210,3 @@\n-  \/\/ Print a hint as to the underlying integer representation. This can be wrong for\n-  \/\/ pointers on an LP64 machine\n+\n+  \/\/ Print  a hint as to the underlying integer representation.\n+  if (is_reference_type(ft)) {\n@@ -222,4 +214,7 @@\n-  if (is_reference_type(ft) && UseCompressedOops) {\n-    st->print(\" (%x)\", obj->int_field(offset()));\n-  }\n-  else \/\/ <- intended\n+    if (UseCompressedOops) {\n+      st->print(\" (\" PTR32_FORMAT \")\", obj->int_field(offset()));\n+    } else {\n+      st->print(\" (\" PTR_FORMAT \")\", obj->long_field(offset()));\n+    }\n+#else\n+    st->print(\" (\" PTR_FORMAT \")\", obj->int_field(offset()));\n@@ -227,4 +222,18 @@\n-  if (ft == T_LONG || ft == T_DOUBLE LP64_ONLY(|| !is_java_primitive(ft)) ) {\n-    st->print(\" (%x %x)\", obj->int_field(offset()), obj->int_field(offset()+sizeof(jint)));\n-  } else if (as_int < 0 || as_int > 9) {\n-    st->print(\" (%x)\", as_int);\n+  } else { \/\/ Primitives\n+    if (ft == T_LONG || ft == T_DOUBLE) {\n+      st->print(\" (\" PTR64_FORMAT \")\", obj->long_field(offset()));\n+    } else {\n+      jint as_int = 0;\n+      switch (ft) {\n+        case T_BYTE:    as_int = (jint)obj->byte_field(offset()); break;\n+        case T_CHAR:    as_int = (jint)obj->char_field(offset()); break;\n+        case T_FLOAT:   as_int = obj->int_field(offset());        break;\n+        case T_INT:     as_int = obj->int_field(offset());        break;\n+        case T_SHORT:   as_int = obj->short_field(offset());      break;\n+        case T_BOOLEAN: as_int = obj->bool_field(offset());       break;\n+      default:\n+        ShouldNotReachHere();\n+        break;\n+      }\n+      st->print(\" (\" PTR32_FORMAT \")\", as_int);\n+    }\n@@ -233,1 +242,0 @@\n-\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.cpp","additions":29,"deletions":21,"binary":false,"changes":50,"status":"modified"}]}