{"files":[{"patch":"@@ -159,0 +159,2 @@\n+  st->print(\" \");\n+\n@@ -160,1 +162,0 @@\n-  jint as_int = 0;\n@@ -163,2 +164,1 @@\n-      as_int = (jint)obj->byte_field(offset());\n-      st->print(\" %d\", obj->byte_field(offset()));\n+      st->print(\"%d\", obj->byte_field(offset()));\n@@ -167,1 +167,0 @@\n-      as_int = (jint)obj->char_field(offset());\n@@ -170,2 +169,1 @@\n-        as_int = c;\n-        st->print(\" %c %d\", isprint(c) ? c : ' ', c);\n+        st->print(\"%c %d\", isprint(c) ? c : ' ', c);\n@@ -175,1 +173,1 @@\n-      st->print(\" %lf\", obj->double_field(offset()));\n+      st->print(\"%lf\", obj->double_field(offset()));\n@@ -178,2 +176,1 @@\n-      as_int = obj->int_field(offset());\n-      st->print(\" %f\", obj->float_field(offset()));\n+      st->print(\"%f\", obj->float_field(offset()));\n@@ -182,2 +179,1 @@\n-      as_int = obj->int_field(offset());\n-      st->print(\" %d\", obj->int_field(offset()));\n+      st->print(\"%d\", obj->int_field(offset()));\n@@ -186,1 +182,0 @@\n-      st->print(\" \");\n@@ -190,2 +185,1 @@\n-      as_int = obj->short_field(offset());\n-      st->print(\" %d\", obj->short_field(offset()));\n+      st->print(\"%d\", obj->short_field(offset()));\n@@ -194,2 +188,1 @@\n-      as_int = obj->bool_field(offset());\n-      st->print(\" %s\", obj->bool_field(offset()) ? \"true\" : \"false\");\n+      st->print(\"%s\", obj->bool_field(offset()) ? \"true\" : \"false\");\n@@ -198,2 +191,0 @@\n-      st->print(\" \");\n-      NOT_LP64(as_int = obj->int_field(offset()));\n@@ -207,2 +198,0 @@\n-      st->print(\" \");\n-      NOT_LP64(as_int = obj->int_field(offset()));\n@@ -219,2 +208,3 @@\n-  \/\/ Print a hint as to the underlying integer representation. This can be wrong for\n-  \/\/ pointers on an LP64 machine\n+\n+  \/\/ Print a hint as to the underlying integer representation.\n+  if (is_reference_type(ft)) {\n@@ -222,4 +212,7 @@\n-  if (is_reference_type(ft) && UseCompressedOops) {\n-    st->print(\" (%x)\", obj->int_field(offset()));\n-  }\n-  else \/\/ <- intended\n+    if (UseCompressedOops) {\n+      st->print(\" (\" PTR32_FORMAT \")\", obj->int_field(offset()));\n+    } else {\n+      st->print(\" (\" PTR_FORMAT \")\", obj->long_field(offset()));\n+    }\n+#else\n+    st->print(\" (\" PTR32_FORMAT \")\", obj->int_field(offset()));\n@@ -227,4 +220,14 @@\n-  if (ft == T_LONG || ft == T_DOUBLE LP64_ONLY(|| !is_java_primitive(ft)) ) {\n-    st->print(\" (%x %x)\", obj->int_field(offset()), obj->int_field(offset()+sizeof(jint)));\n-  } else if (as_int < 0 || as_int > 9) {\n-    st->print(\" (%x)\", as_int);\n+  } else { \/\/ Primitives\n+    switch (ft) {\n+      case T_LONG:    st->print(\" (\" PTR_FORMAT   \")\", obj->long_field(offset()));  break;\n+      case T_DOUBLE:  st->print(\" (\" PTR_FORMAT   \")\", obj->long_field(offset()));  break;\n+      case T_BYTE:    st->print(\" (\" PTR8_FORMAT  \")\", obj->byte_field(offset()));  break;\n+      case T_CHAR:    st->print(\" (\" PTR16_FORMAT \")\", obj->char_field(offset()));  break;\n+      case T_FLOAT:   st->print(\" (\" PTR32_FORMAT \")\", obj->int_field(offset()));   break;\n+      case T_INT:     st->print(\" (\" PTR32_FORMAT \")\", obj->int_field(offset()));   break;\n+      case T_SHORT:   st->print(\" (\" PTR16_FORMAT \")\", obj->short_field(offset())); break;\n+      case T_BOOLEAN: st->print(\" (\" PTR8_FORMAT  \")\", obj->bool_field(offset()));  break;\n+    default:\n+      ShouldNotReachHere();\n+      break;\n+    }\n@@ -233,1 +236,0 @@\n-\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.cpp","additions":33,"deletions":31,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -95,0 +95,6 @@\n+\/\/ Format 8-bit quantities.\n+#define PTR8_FORMAT            \"0x%02\" PRIx8\n+\n+\/\/ Format 16-bit quantities.\n+#define PTR16_FORMAT           \"0x%04\" PRIx16\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}