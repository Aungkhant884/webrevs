{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1867,0 +1867,17 @@\n+\/\/ ------------------------------------------------------------------\n+\/\/ ciTypeFlow::Block::is_normal_exit\n+\/\/\n+\/\/ Test if the block is a normal loop exit point, return ture if\n+\/\/ 1) The block itself is in the same loop, and\n+\/\/ 2) Only 2 successors, one is the loop exit and the other continues the loop\n+bool ciTypeFlow::Block::is_normal_exit(ciTypeFlow::Loop* lp) {\n+  if (lp->contains(this) && successors()->length() == 2) {\n+    bool is_succ0_exit = !lp->contains(successors()->at(0));\n+    bool is_succ1_exit = !lp->contains(successors()->at(1));\n+    if ((is_succ0_exit && !is_succ1_exit) || (!is_succ0_exit && is_succ1_exit)) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -690,0 +690,1 @@\n+    bool   is_loop_tail() const          { return _loop && _loop->tail() == this; }\n@@ -697,0 +698,1 @@\n+    bool   is_normal_exit(Loop* lp);\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -537,0 +537,1 @@\n+  void    adjust_zero_branch_count(int &taken, int &not_taken);\n","filename":"src\/hotspot\/share\/opto\/parse.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1195,0 +1195,54 @@\n+\n+\/\/--------------------------adjust_zero_branch_count--------------------------\n+\/\/ Try to adjust the zero profile count for a loop exit. It is based on\n+\/\/ the observation that for most common cases, the loop exit will be\n+\/\/ executed at least once. So the zero count will be set to 1 if:\n+\/\/ 1) The branch is in a loop head or tail, and\n+\/\/ 2) The zero count associated target is a loop exit, and\n+\/\/ 3) Only one loop exit path in either loop head or tail\n+void Parse::adjust_zero_branch_count(int &taken, int &not_taken) {\n+  assert(taken == 0 || not_taken == 0, \"must be\");\n+\n+  ciTypeFlow::Block* blk = block()->flow();\n+  ciTypeFlow::Loop*  lp  = blk->loop();\n+  if ((lp == NULL) || (lp == flow()->loop_tree_root())) {\n+    return;\n+  }\n+\n+  bool is_head = blk->is_loop_head();\n+  bool is_tail = blk->is_loop_tail();\n+  \/\/ Give up if the branch isn't in a loop head or tail\n+  if (!is_head && !is_tail) {\n+    return;\n+  }\n+\n+  int zero_count_bci = -1;\n+  if (taken == 0) {\n+    zero_count_bci = iter().get_dest();\n+  } else {\n+    zero_count_bci = iter().next_bci();\n+  }\n+  ciTypeFlow::Block* zero_count_target = successor_for_bci(zero_count_bci)->flow();\n+  \/\/ Give up if the zero count associated target isn't a loop exit\n+  if (lp->contains(zero_count_target)) {\n+    return;\n+  }\n+\n+  if (blk->is_normal_exit(lp)) {\n+    ciTypeFlow::Block* head = lp->head();\n+    ciTypeFlow::Block* tail = lp->tail();\n+    \/\/ Give up if there is a loop exit path in both loop head and tail\n+    if ((head != tail) &&\n+        ((is_head && tail->is_normal_exit(lp)) || (is_tail && head->is_normal_exit(lp)))) {\n+      return;\n+    }\n+\n+    \/\/ Set the zero count to 1 assuming that the loop exit would be executed at least once.\n+    if (taken == 0) {\n+      taken = 1;\n+    } else {\n+      not_taken = 1;\n+    }\n+  }\n+}\n+\n@@ -1225,0 +1279,6 @@\n+\n+       \/\/ Don't adjust if too few (or too many, in which case the sum will overflow) counts to be meaningful.\n+       \/\/ This will also avoid polluting counts for dead code (e.g., dead loop).\n+       if ((taken == 0 || not_taken == 0) && (taken + not_taken > 40)) {\n+         adjust_zero_branch_count(taken, not_taken);\n+       }\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/*\n+ * @test\n+ * @bug 8293491\n+ * @summary Avoid unexpected deoptimization in loop exit due to incorrect branch profiling\n+ * @requires vm.compiler2.enabled & vm.compMode != \"Xcomp\"\n+ * @requires vm.opt.DeoptimizeALot != true\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:.\n+ *                   -XX:-TieredCompilation -XX:+PrintCompilation\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -XX:CompileCommand=quiet\n+ *                   -XX:CompileCommand=compileonly,compiler.profiling.TestUnexpectedLoopExitDeopt::test*\n+ *                   compiler.profiling.TestUnexpectedLoopExitDeopt\n+ *\/\n+\n+package compiler.profiling;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.whitebox.WhiteBox;\n+\n+public class TestUnexpectedLoopExitDeopt {\n+    private static final WhiteBox WB = WhiteBox.getWhiteBox();\n+    private static final int N = 20000000;\n+    private static int d[] = new int[N];\n+\n+    private static void run() {\n+        System.out.println(testFor(d));\n+        System.out.println(testWhile(d));\n+        System.out.println(testDoWhile(d));\n+    }\n+\n+    private static int testFor(int[] a) {\n+        int sum = 0;\n+        for(int i = 0; i < a.length; i++) {\n+            sum += a[i];\n+        }\n+        return sum;\n+    }\n+\n+    private static int testWhile(int[] a) {\n+        int sum = 0;\n+        int i = 0;\n+        while (i < a.length) {\n+            sum += a[i++];\n+        }\n+        return sum;\n+    }\n+\n+    private static int testDoWhile(int[] a) {\n+        int sum = 0;\n+        int i = 0;\n+        do {\n+            sum += a[i++];\n+        } while (i < a.length);\n+        return sum;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        run();\n+        Asserts.assertEQ(0, WB.getDeoptCount(), \"Unexpected deoptimization detected.\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/profiling\/TestUnexpectedLoopExitDeopt.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}