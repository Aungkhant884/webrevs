{"files":[{"patch":"@@ -161,0 +161,1 @@\n+        int dest_bci = s.get_dest();\n@@ -162,1 +163,4 @@\n-          (void) make_block_at(s.next_bci());\n+          ciBlock *next_block = make_block_at(s.next_bci());\n+          if (dest_bci < bci) {\n+            next_block->set_is_loop_exit();\n+          }\n@@ -164,1 +168,0 @@\n-        int dest_bci = s.get_dest();\n@@ -381,0 +384,1 @@\n+  \"LoopExit\"\n@@ -385,1 +389,1 @@\n-  for (int i = 0; i < 7; i++) {\n+  for (int i = 0; i < 8; i++) {\n","filename":"src\/hotspot\/share\/ci\/ciMethodBlocks.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,2 @@\n-    HasHandler  = (1 << 6)\n+    HasHandler  = (1 << 6),\n+    LoopExit    = (1 << 7)\n@@ -112,0 +113,2 @@\n+  bool  is_loop_exit() const        { return (_flags & LoopExit) != 0; }\n+  void  set_is_loop_exit()          { _flags |= LoopExit; }\n","filename":"src\/hotspot\/share\/ci\/ciMethodBlocks.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -552,1 +552,0 @@\n-    ciBlock*     ciblock() const     { return _ciblock; }\n@@ -570,0 +569,1 @@\n+    ciBlock* ciblock() const { return _ciblock; }\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1225,0 +1225,10 @@\n+      \/\/ Don't adjust the taken count if too few not_taken count to be meaningful.\n+      if (taken == 0 && not_taken >= 40) {\n+        int target_bci = iter().get_dest();\n+        Block* branch_block = successor_for_bci(target_bci);\n+        bool is_loop_exit = branch_block->flow()->ciblock()->is_loop_exit();\n+        if (is_loop_exit) {\n+          \/\/ If the branch target is a loop exit, we assume it would take at least once.\n+          taken = 1;\n+        }\n+      }\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/*\n+ * @test\n+ * @bug 8293491\n+ * @summary Avoid unexpected deoptimization in loop exit due to incorrect branch profiling\n+ * @requires vm.compiler2.enabled & vm.compMode != \"Xcomp\"\n+ * @requires vm.opt.DeoptimizeALot != true\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:.\n+ *                   -XX:-TieredCompilation -XX:+PrintCompilation\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -XX:CompileCommand=quiet\n+ *                   -XX:CompileCommand=compileonly,compiler.profiling.TestUnexpectedLoopExitDeopt::test\n+ *                   compiler.profiling.TestUnexpectedLoopExitDeopt\n+ *\/\n+\n+package compiler.profiling;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.whitebox.WhiteBox;\n+\n+public class TestUnexpectedLoopExitDeopt {\n+    private static final WhiteBox WB = WhiteBox.getWhiteBox();\n+    private static final int N = 20000000;\n+    private static int d[] = new int[N];\n+\n+    private static void run() {\n+        System.out.println(test(d));\n+    }\n+\n+    private static int test(int[] a) {\n+        int sum = 0;\n+        for(int i = 0; i < a.length; i++) {\n+            sum += a[i];\n+        }\n+        return sum;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        run();\n+        Asserts.assertEQ(0, WB.getDeoptCount(), \"Unexpected deoptimization detected.\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/profiling\/TestUnexpectedLoopExitDeopt.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"}]}