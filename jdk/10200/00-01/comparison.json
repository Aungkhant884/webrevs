{"files":[{"patch":"@@ -161,1 +161,0 @@\n-        int dest_bci = s.get_dest();\n@@ -163,4 +162,1 @@\n-          ciBlock *next_block = make_block_at(s.next_bci());\n-          if (dest_bci < bci) {\n-            next_block->set_is_loop_exit();\n-          }\n+          (void) make_block_at(s.next_bci());\n@@ -168,0 +164,1 @@\n+        int dest_bci = s.get_dest();\n@@ -384,1 +381,0 @@\n-  \"LoopExit\"\n@@ -389,1 +385,1 @@\n-  for (int i = 0; i < 8; i++) {\n+  for (int i = 0; i < 7; i++) {\n","filename":"src\/hotspot\/share\/ci\/ciMethodBlocks.cpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,2 +82,1 @@\n-    HasHandler  = (1 << 6),\n-    LoopExit    = (1 << 7)\n+    HasHandler  = (1 << 6)\n@@ -113,2 +112,0 @@\n-  bool  is_loop_exit() const        { return (_flags & LoopExit) != 0; }\n-  void  set_is_loop_exit()          { _flags |= LoopExit; }\n","filename":"src\/hotspot\/share\/ci\/ciMethodBlocks.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1867,0 +1867,17 @@\n+\/\/ ------------------------------------------------------------------\n+\/\/ ciTypeFlow::Block::is_normal_exit\n+\/\/\n+\/\/ Test if the block is a normal loop exit point, return ture if\n+\/\/ 1) The block itself is in the same loop, and\n+\/\/ 2) Only 2 successors, one is the loop exit and the other continues the loop\n+bool ciTypeFlow::Block::is_normal_exit(ciTypeFlow::Loop* lp) {\n+  if (lp->contains(this) && successors()->length() == 2) {\n+    bool is_succ0_exit = !lp->contains(successors()->at(0));\n+    bool is_succ1_exit = !lp->contains(successors()->at(1));\n+    if ((is_succ0_exit && !is_succ1_exit) || (!is_succ0_exit && is_succ1_exit)) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -552,0 +552,1 @@\n+    ciBlock*     ciblock() const     { return _ciblock; }\n@@ -569,1 +570,0 @@\n-    ciBlock* ciblock() const { return _ciblock; }\n@@ -690,0 +690,1 @@\n+    bool   is_loop_tail() const          { return _loop && _loop->tail() == this; }\n@@ -697,0 +698,1 @@\n+    bool   is_normal_exit(Loop* lp);\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -537,0 +537,1 @@\n+  void    adjust_zero_branch_count(int &taken, int &not_taken);\n","filename":"src\/hotspot\/share\/opto\/parse.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1195,0 +1195,54 @@\n+\n+\/\/--------------------------adjust_zero_branch_count--------------------------\n+\/\/ Try to adjust the zero profile count for a loop exit. It is based on\n+\/\/ the observation that for most common cases, the loop exit will be\n+\/\/ executed at least once. So the zero count will be set to 1 if:\n+\/\/ 1) The branch is in a loop head or tail, and\n+\/\/ 2) The zero count associated target is a loop exit, and\n+\/\/ 3) Only one loop exit path in either loop head or tail\n+void Parse::adjust_zero_branch_count(int &taken, int &not_taken) {\n+  assert(taken == 0 || not_taken == 0, \"must be\");\n+\n+  ciTypeFlow::Block* blk = block()->flow();\n+  ciTypeFlow::Loop*  lp  = blk->loop();\n+  if ((lp == NULL) || (lp == flow()->loop_tree_root())) {\n+    return;\n+  }\n+\n+  bool is_head = blk->is_loop_head();\n+  bool is_tail = blk->is_loop_tail();\n+  \/\/ Give up if the branch isn't in a loop head or tail\n+  if (!is_head && !is_tail) {\n+    return;\n+  }\n+\n+  int zero_count_bci = -1;\n+  if (taken == 0) {\n+    zero_count_bci = iter().get_dest();\n+  } else {\n+    zero_count_bci = iter().next_bci();\n+  }\n+  ciTypeFlow::Block* zero_count_target = successor_for_bci(zero_count_bci)->flow();\n+  \/\/ Give up if the zero count associated target isn't a loop exit\n+  if (lp->contains(zero_count_target)) {\n+    return;\n+  }\n+\n+  if (blk->is_normal_exit(lp)) {\n+    ciTypeFlow::Block* head = lp->head();\n+    ciTypeFlow::Block* tail = lp->tail();\n+    \/\/ Give up if there is a loop exit path in both loop head and tail\n+    if ((head != tail) &&\n+        ((is_head && tail->is_normal_exit(lp)) || (is_tail && head->is_normal_exit(lp)))) {\n+      return;\n+    }\n+\n+    \/\/ Set the zero count to 1 assuming that the loop exit would be executed at least once.\n+    if (taken == 0) {\n+      taken = 1;\n+    } else {\n+      not_taken = 1;\n+    }\n+  }\n+}\n+\n@@ -1225,10 +1279,6 @@\n-      \/\/ Don't adjust the taken count if too few not_taken count to be meaningful.\n-      if (taken == 0 && not_taken >= 40) {\n-        int target_bci = iter().get_dest();\n-        Block* branch_block = successor_for_bci(target_bci);\n-        bool is_loop_exit = branch_block->flow()->ciblock()->is_loop_exit();\n-        if (is_loop_exit) {\n-          \/\/ If the branch target is a loop exit, we assume it would take at least once.\n-          taken = 1;\n-        }\n-      }\n+\n+       \/\/ Don't adjust if too few (or too many, in which case the sum will overflow) counts to be meaningful.\n+       \/\/ This will also avoid polluting counts for dead code (e.g., dead loop).\n+       if ((taken == 0 || not_taken == 0) && (taken + not_taken > 40)) {\n+         adjust_zero_branch_count(taken, not_taken);\n+       }\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":60,"deletions":10,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- *                   -XX:CompileCommand=compileonly,compiler.profiling.TestUnexpectedLoopExitDeopt::test\n+ *                   -XX:CompileCommand=compileonly,compiler.profiling.TestUnexpectedLoopExitDeopt::test*\n@@ -52,1 +52,3 @@\n-        System.out.println(test(d));\n+        System.out.println(testFor(d));\n+        System.out.println(testWhile(d));\n+        System.out.println(testDoWhile(d));\n@@ -55,1 +57,1 @@\n-    private static int test(int[] a) {\n+    private static int testFor(int[] a) {\n@@ -63,0 +65,18 @@\n+    private static int testWhile(int[] a) {\n+        int sum = 0;\n+        int i = 0;\n+        while (i < a.length) {\n+            sum += a[i++];\n+        }\n+        return sum;\n+    }\n+\n+    private static int testDoWhile(int[] a) {\n+        int sum = 0;\n+        int i = 0;\n+        do {\n+            sum += a[i++];\n+        } while (i < a.length);\n+        return sum;\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/profiling\/TestUnexpectedLoopExitDeopt.java","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"}]}