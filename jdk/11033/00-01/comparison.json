{"files":[{"patch":"@@ -805,1 +805,1 @@\n-                          SymbolTable::new_permanent_symbol(\"subgroupsArray\"),\n+                          SymbolTable::new_permanent_symbol(\"subgroupsAsArray\"),\n@@ -809,0 +809,1 @@\n+    Symbol* ex_name = PENDING_EXCEPTION->klass()->name();\n@@ -810,1 +811,5 @@\n-    return JVMTI_ERROR_OUT_OF_MEMORY;\n+    if (ex_name == vmSymbols::java_lang_OutOfMemoryError()) {\n+      return JVMTI_ERROR_OUT_OF_MEMORY;\n+    } else {\n+      return JVMTI_ERROR_INTERNAL;\n+    }\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -796,1 +796,1 @@\n-     * Returns an array of subgroups used by JVMTI\n+     * Returns an snapshot of the subgroups as an array, used by JVMTI.\n@@ -798,1 +798,1 @@\n-    private ThreadGroup[] subgroupsArray() {\n+    private ThreadGroup[] subgroupsAsArray() {\n@@ -800,2 +800,1 @@\n-        int length = groups.size();\n-        return groups.toArray(new ThreadGroup[length]);\n+        return groups.toArray(new ThreadGroup[0]);\n@@ -804,1 +803,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ThreadGroup.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"}]}