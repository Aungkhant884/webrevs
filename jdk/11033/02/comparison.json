{"files":[{"patch":"@@ -1998,4 +1998,0 @@\n-int java_lang_ThreadGroup::_ngroups_offset;\n-int java_lang_ThreadGroup::_groups_offset;\n-int java_lang_ThreadGroup::_nweaks_offset;\n-int java_lang_ThreadGroup::_weaks_offset;\n@@ -2029,22 +2025,0 @@\n-int java_lang_ThreadGroup::ngroups(oop java_thread_group) {\n-  assert(oopDesc::is_oop(java_thread_group), \"thread group must be oop\");\n-  return java_thread_group->int_field(_ngroups_offset);\n-}\n-\n-objArrayOop java_lang_ThreadGroup::groups(oop java_thread_group) {\n-  oop groups = java_thread_group->obj_field(_groups_offset);\n-  assert(groups == NULL || groups->is_objArray(), \"just checking\"); \/\/ Todo: Add better type checking code\n-  return objArrayOop(groups);\n-}\n-\n-int java_lang_ThreadGroup::nweaks(oop java_thread_group) {\n-  assert(oopDesc::is_oop(java_thread_group), \"thread group must be oop\");\n-  return java_thread_group->int_field(_nweaks_offset);\n-}\n-\n-objArrayOop java_lang_ThreadGroup::weaks(oop java_thread_group) {\n-  oop weaks = java_thread_group->obj_field(_weaks_offset);\n-  assert(weaks == NULL || weaks->is_objArray(), \"just checking\");\n-  return objArrayOop(weaks);\n-}\n-\n@@ -2055,5 +2029,1 @@\n-  macro(_daemon_offset,      k, vmSymbols::daemon_name(),      bool_signature,                false); \\\n-  macro(_ngroups_offset,     k, vmSymbols::ngroups_name(),     int_signature,                 false); \\\n-  macro(_groups_offset,      k, vmSymbols::groups_name(),      threadgroup_array_signature,   false); \\\n-  macro(_nweaks_offset,      k, vmSymbols::nweaks_name(),      int_signature,                 false); \\\n-  macro(_weaks_offset,       k, vmSymbols::weaks_name(),       weakreference_array_signature, false);\n+  macro(_daemon_offset,      k, vmSymbols::daemon_name(),      bool_signature,                false);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":1,"deletions":31,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -482,5 +482,0 @@\n-  static int _ngroups_offset;\n-  static int _groups_offset;\n-  static int _nweaks_offset;\n-  static int _weaks_offset;\n-\n@@ -488,1 +483,0 @@\n-\n@@ -501,9 +495,0 @@\n-  \/\/ Number of strongly reachable thread groups\n-  static int ngroups(oop java_thread_group);\n-  \/\/ Strongly reachable thread groups\n-  static objArrayOop groups(oop java_thread_group);\n-  \/\/ Number of weakly reachable thread groups\n-  static int nweaks(oop java_thread_group);\n-  \/\/ Weakly reachable thread groups\n-  static objArrayOop weaks(oop java_thread_group);\n-\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -403,4 +403,0 @@\n-  template(ngroups_name,                              \"ngroups\")                                  \\\n-  template(groups_name,                               \"groups\")                                   \\\n-  template(nweaks_name,                               \"nweaks\")                                   \\\n-  template(weaks_name,                                \"weaks\")                                    \\\n@@ -610,0 +606,1 @@\n+  template(void_threadgroup_array_signature,          \"()[Ljava\/lang\/ThreadGroup;\")                               \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"classfile\/symbolTable.hpp\"\n@@ -49,0 +50,1 @@\n+#include \"runtime\/javaCalls.hpp\"\n@@ -796,1 +798,0 @@\n-  ObjectLocker ol(group_hdl, current_thread);\n@@ -798,2 +799,18 @@\n-  int ngroups = java_lang_ThreadGroup::ngroups(group_hdl());\n-  int nweaks = java_lang_ThreadGroup::nweaks(group_hdl());\n+  \/\/ This call collects the strong and weak groups\n+  JavaThread* THREAD = current_thread;\n+  JavaValue result(T_OBJECT);\n+  JavaCalls::call_virtual(&result,\n+                          group_hdl,\n+                          vmClasses::ThreadGroup_klass(),\n+                          SymbolTable::new_permanent_symbol(\"subgroupsAsArray\"),\n+                          vmSymbols::void_threadgroup_array_signature(),\n+                          THREAD);\n+  if (HAS_PENDING_EXCEPTION) {\n+    Symbol* ex_name = PENDING_EXCEPTION->klass()->name();\n+    CLEAR_PENDING_EXCEPTION;\n+    if (ex_name == vmSymbols::java_lang_OutOfMemoryError()) {\n+      return JVMTI_ERROR_OUT_OF_MEMORY;\n+    } else {\n+      return JVMTI_ERROR_INTERNAL;\n+    }\n+  }\n@@ -801,5 +818,2 @@\n-  jint count = 0;\n-  Handle *group_objs = NULL;\n-  if (ngroups > 0 || nweaks > 0) {\n-    group_objs = NEW_RESOURCE_ARRAY_RETURN_NULL(Handle, ngroups + nweaks);\n-    NULL_CHECK(group_objs, JVMTI_ERROR_OUT_OF_MEMORY);\n+  assert(result.get_type() == T_OBJECT, \"just checking\");\n+  objArrayOop groups = (objArrayOop)result.get_oop();\n@@ -807,9 +821,2 @@\n-    if (ngroups > 0) {\n-      \/\/ Strongly reachable subgroups:\n-      objArrayOop groups = java_lang_ThreadGroup::groups(group_hdl());\n-      for (int j = 0; j < ngroups; j++) {\n-        oop group_obj = groups->obj_at(j);\n-        assert(group_obj != NULL, \"group_obj != NULL\");\n-        group_objs[count++] = Handle(current_thread, group_obj);\n-      }\n-    }\n+  Handle* group_objs = nullptr;\n+  int count = 0;\n@@ -817,11 +824,9 @@\n-    if (nweaks > 0) {\n-      \/\/ Weakly reachable subgroups:\n-      objArrayOop weaks = java_lang_ThreadGroup::weaks(group_hdl());\n-      for (int j = 0; j < nweaks; j++) {\n-        oop weak_obj = weaks->obj_at(j);\n-        assert(weak_obj != NULL, \"weak_obj != NULL\");\n-        oop group_obj = java_lang_ref_Reference::weak_referent(weak_obj);\n-        if (group_obj != NULL) {\n-          group_objs[count++] = Handle(current_thread, group_obj);\n-        }\n-      }\n+  int length = groups->length();\n+  if (length > 0) {\n+    group_objs = NEW_RESOURCE_ARRAY_RETURN_NULL(Handle, length);\n+    NULL_CHECK(group_objs, JVMTI_ERROR_OUT_OF_MEMORY);\n+\n+    for (int i = 0; i < length; i++) {\n+      oop group_obj = groups->obj_at(i);\n+      assert(group_obj != NULL, \"group_obj != NULL\");\n+      group_objs[count++] = Handle(current_thread, group_obj);\n@@ -830,0 +835,1 @@\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":34,"deletions":28,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -795,0 +795,8 @@\n+    \/**\n+     * Returns a snapshot of the subgroups as an array, used by JVMTI.\n+     *\/\n+    private ThreadGroup[] subgroupsAsArray() {\n+        List<ThreadGroup> groups = synchronizedSubgroups();\n+        return groups.toArray(new ThreadGroup[0]);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ThreadGroup.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}