{"files":[{"patch":"@@ -653,2 +653,2 @@\n-  INSN(_beq, 0b1100011, 0b000);\n-  INSN(_bne, 0b1100011, 0b001);\n+  INSN(beq, 0b1100011, 0b000);\n+  INSN(bne, 0b1100011, 0b001);\n@@ -871,1 +871,1 @@\n-  INSN(_jal, 0b1101111);\n+  INSN(jal, 0b1101111);\n@@ -2098,0 +2098,1 @@\n+\/\/    'IncompressibleRegion' hints instructions to remain their 4-byte forms.\n@@ -2101,1 +2102,9 @@\n-\/\/      __ andr(...);      \/\/ this instruction could change to c.and if able to\n+\/\/      __ andr(...);       \/\/ this instruction could change to 'c.and' if able to\n+\/\/      {\n+\/\/         IncompressibleRegion ir(_masm);\n+\/\/         __ andr(...);    \/\/ this instruction should not be compressed\n+\/\/         {\n+\/\/            CompressibleRegion cr(_masm);\n+\/\/            __ andr(...); \/\/ this instruction could change to 'c.and' if able to\n+\/\/         }\n+\/\/      }\n@@ -2114,2 +2123,2 @@\n-  \/\/ a compressible region\n-  class CompressibleRegion : public StackObj {\n+  \/\/ an abstract compressible region\n+  class AbstractCompressibleRegion : public StackObj {\n@@ -2119,2 +2128,2 @@\n-  public:\n-    CompressibleRegion(Assembler *_masm)\n+  protected:\n+    AbstractCompressibleRegion(Assembler *_masm)\n@@ -2122,1 +2131,6 @@\n-    , _saved_in_compressible_region(_masm->in_compressible_region()) {\n+    , _saved_in_compressible_region(_masm->in_compressible_region()) {}\n+  };\n+  \/\/ a compressible region\n+  class CompressibleRegion : public AbstractCompressibleRegion {\n+  public:\n+    CompressibleRegion(Assembler *_masm) : AbstractCompressibleRegion(_masm) {\n@@ -2129,0 +2143,10 @@\n+  \/\/ an incompressible region\n+  class IncompressibleRegion : public AbstractCompressibleRegion {\n+  public:\n+    IncompressibleRegion(Assembler *_masm) : AbstractCompressibleRegion(_masm) {\n+      _masm->set_in_compressible_region(false);\n+    }\n+    ~IncompressibleRegion() {\n+      _masm->set_in_compressible_region(_saved_in_compressible_region);\n+    }\n+  };\n@@ -2829,20 +2853,0 @@\n-\/\/ --------------------------\n-\/\/ Conditional branch instructions\n-\/\/ --------------------------\n-#define INSN(NAME, C_NAME, NORMAL_NAME)                                                      \\\n-  void NAME(Register Rs1, Register Rs2, const int64_t offset) {                              \\\n-    \/* beq\/bne -> c.beqz\/c.bnez *\/                                                           \\\n-    if (do_compress() &&                                                                     \\\n-        (offset != 0 && Rs2 == x0 && Rs1->is_compressed_valid() &&                           \\\n-        is_imm_in_range(offset, 8, 1))) {                                                    \\\n-      C_NAME(Rs1, offset);                                                                   \\\n-      return;                                                                                \\\n-    }                                                                                        \\\n-    NORMAL_NAME(Rs1, Rs2, offset);                                                           \\\n-  }\n-\n-  INSN(beq, c_beqz, _beq);\n-  INSN(bne, c_bnez, _bne);\n-\n-#undef INSN\n-\n@@ -2851,15 +2855,0 @@\n-\/\/ --------------------------\n-#define INSN(NAME)                                                                           \\\n-  void NAME(Register Rd, const int32_t offset) {                                             \\\n-    \/* jal -> c.j *\/                                                                         \\\n-    if (do_compress() && offset != 0 && Rd == x0 && is_imm_in_range(offset, 11, 1)) {        \\\n-      c_j(offset);                                                                           \\\n-      return;                                                                                \\\n-    }                                                                                        \\\n-    _jal(Rd, offset);                                                                        \\\n-  }\n-\n-  INSN(jal);\n-\n-#undef INSN\n-\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":33,"deletions":44,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -327,1 +327,1 @@\n-  nop();\n+  nop(false);  \/\/ 4 bytes\n","filename":"src\/hotspot\/cpu\/riscv\/c1_MacroAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -246,0 +246,2 @@\n+  IncompressibleRegion ir(this);  \/\/ Fixed length: see C2_MacroAssembler::entry_barrier_stub_size()\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -196,0 +196,2 @@\n+  Assembler::IncompressibleRegion ir(masm);  \/\/ Fixed length: see entry_barrier_offset()\n+\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetAssembler_riscv.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -244,0 +244,1 @@\n+    IncompressibleRegion ir(this);  \/\/ the label address will be patched back.\n@@ -552,0 +553,1 @@\n+  IncompressibleRegion ir(this);  \/\/ Fixed length: see CompiledStaticCall::to_interp_stub_size().\n@@ -636,2 +638,6 @@\n-void MacroAssembler::nop() {\n-  addi(x0, x0, 0);\n+void MacroAssembler::nop(bool compressible) {\n+  if (compressible) {\n+    addi(x0, x0, 0);\n+  } else {\n+    _addi(x0, x0, 0);\n+  }\n@@ -756,0 +762,1 @@\n+  IncompressibleRegion ir(this);   \/\/ the label address may be patched back.\n@@ -2442,0 +2449,1 @@\n+  IncompressibleRegion ir(this);  \/\/ Fixed length: see MacroAssembler::far_branch_size()\n@@ -2460,0 +2468,1 @@\n+  IncompressibleRegion ir(this);  \/\/ Fixed length: see MacroAssembler::far_branch_size()\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -405,1 +405,1 @@\n-  void nop();\n+  void nop(bool compressible = true);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -393,0 +393,1 @@\n+  Assembler::IncompressibleRegion ir(&a);  \/\/ Fixed length: see NativeGeneralJump::get_instruction_size()\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1322,1 +1322,1 @@\n-  __ nop();\n+  __ nop(false);  \/\/ 4 bytes\n@@ -1683,0 +1683,1 @@\n+  Assembler::IncompressibleRegion ir(&_masm);  \/\/ Fixed length: see BoxLockNode::size()\n@@ -2271,0 +2272,1 @@\n+    Assembler::IncompressibleRegion ir(&_masm);  \/\/ Fixed length: see ret_addr_offset\n@@ -2309,0 +2311,1 @@\n+    Assembler::IncompressibleRegion ir(&_masm);  \/\/ Fixed length: see ret_addr_offset\n@@ -2327,0 +2330,1 @@\n+    Assembler::IncompressibleRegion ir(&_masm);  \/\/ Fixed length: see ret_addr_offset\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -942,1 +942,1 @@\n-    __ nop();\n+    __ nop(false);  \/\/ 4 bytes\n@@ -1094,1 +1094,1 @@\n-  __ nop();\n+  __ nop(false);  \/\/ 4 bytes\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}