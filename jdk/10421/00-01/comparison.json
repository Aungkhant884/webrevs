{"files":[{"patch":"@@ -2082,8 +2082,10 @@\n-\/\/ 1. When UseRVC is enabled, 32-bit instructions under 'CompressibleRegion's will be\n-\/\/    transformed to 16-bit instructions if compressible.\n-\/\/ 2. RVC instructions in Assembler always begin with 'c_' prefix, as 'c_li',\n-\/\/    but most of time we have no need to explicitly use these instructions.\n-\/\/ 3. 'CompressibleRegion' is introduced to hint instructions in this Region's RTTI range\n-\/\/    are qualified to be compressed with their 2-byte versions.\n-\/\/    'IncompressibleRegion' hints instructions to remain their 4-byte forms.\n-\/\/    An example:\n+\/\/ 1. Assembler functions encoding 16-bit compressed instructions always begin with a 'c_'\n+\/\/    prefix, such as 'c_add'. Correspondingly, assembler functions encoding normal 32-bit\n+\/\/    instructions with begin with a '_' prefix, such as \"_add\". Most of time users have no\n+\/\/    need to explicitly emit these compressed instructions. Instead, they still use unified\n+\/\/    wrappers such as 'add' which do the compressing work through 'c_add' depending on the\n+\/\/    the operands of the instruction and availability of the RVC hardware extension.\n+\/\/\n+\/\/ 2. 'CompressibleRegion' and 'IncompressibleRegion' are introduced to mark assembler scopes\n+\/\/     within which instructions are qualified or unqualified to be compressed into their 16-bit\n+\/\/     versions. An example:\n@@ -2092,1 +2094,1 @@\n-\/\/      __ andr(...);       \/\/ this instruction could change to 'c.and' if able to\n+\/\/      __ add(...);       \/\/ this instruction will be compressed into 'c.and' when possible\n@@ -2095,1 +2097,1 @@\n-\/\/         __ andr(...);    \/\/ this instruction should not be compressed\n+\/\/         __ add(...);    \/\/ this instruction will not be compressed\n@@ -2098,1 +2100,1 @@\n-\/\/            __ andr(...); \/\/ this instruction could change to 'c.and' if able to\n+\/\/            __ add(...); \/\/ this instruction will be compressed into 'c.and' when possible\n@@ -2102,3 +2104,2 @@\n-\/\/ 4. Using -XX:PrintAssemblyOptions=no-aliases could distinguish RVC instructions from\n-\/\/    normal ones.\n-\/\/\n+\/\/ 3. When printing JIT assembly code, using -XX:PrintAssemblyOptions=no-aliases could help\n+\/\/    distinguish compressed 16-bit instructions from normal 32-bit ones.\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -326,0 +326,1 @@\n+  IncompressibleRegion ir(this);  \/\/ keep the nop as 4 bytes for patching.\n@@ -327,1 +328,1 @@\n-  nop(false);  \/\/ 4 bytes\n+  nop();  \/\/ 4 bytes\n","filename":"src\/hotspot\/cpu\/riscv\/c1_MacroAssembler_riscv.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -636,6 +636,2 @@\n-void MacroAssembler::nop(bool compressible) {\n-  if (compressible) {\n-    addi(x0, x0, 0);\n-  } else {\n-    _addi(x0, x0, 0);\n-  }\n+void MacroAssembler::nop() {\n+  addi(x0, x0, 0);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -405,1 +405,1 @@\n-  void nop(bool compressible = true);\n+  void nop();\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1321,2 +1321,5 @@\n-  MacroAssembler::assert_alignment(__ pc());\n-  __ nop(false);  \/\/ 4 bytes\n+  {\n+    Assembler::IncompressibleRegion ir(&_masm);  \/\/ keep the nop as 4 bytes for patching.\n+    MacroAssembler::assert_alignment(__ pc());\n+    __ nop();  \/\/ 4 bytes\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -959,2 +959,5 @@\n-    MacroAssembler::assert_alignment(__ pc());\n-    __ nop(false);  \/\/ 4 bytes\n+    {\n+      Assembler::IncompressibleRegion ir(masm);  \/\/ keep the nop as 4 bytes for patching.\n+      MacroAssembler::assert_alignment(__ pc());\n+      __ nop();  \/\/ 4 bytes\n+    }\n@@ -1111,2 +1114,5 @@\n-  MacroAssembler::assert_alignment(__ pc());\n-  __ nop(false);  \/\/ 4 bytes\n+  {\n+    Assembler::IncompressibleRegion ir(masm);  \/\/ keep the nop as 4 bytes for patching.\n+    MacroAssembler::assert_alignment(__ pc());\n+    __ nop();  \/\/ 4 bytes\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"}]}