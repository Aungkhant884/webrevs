{"files":[{"patch":"@@ -43,0 +43,6 @@\n+  if (PowerArchitecturePPC64 == 6) {\n+    if (FLAG_IS_DEFAULT(InsertEndGroupPPC64)) {\n+      FLAG_SET_ERGO(InsertEndGroupPPC64, true);\n+    }\n+  }\n+\n","filename":"src\/hotspot\/cpu\/ppc\/c2_init_ppc.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -139,0 +139,6 @@\n+  product(bool, UsePower6SchedulerPPC64, false,                             \\\n+          \"Use Power6 Scheduler.\")                                          \\\n+                                                                            \\\n+  product(bool, InsertEndGroupPPC64, false,                                 \\\n+          \"Insert EndGroup instructions to optimize for Power6.\")           \\\n+                                                                            \\\n","filename":"src\/hotspot\/cpu\/ppc\/globals_ppc.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1373,0 +1373,25 @@\n+\/\/ Macro used instead of the common __ to emulate the pipes of PPC.\n+\/\/ Instead of e.g. __ ld(...) one hase to write ___(ld) ld(...) This enables the\n+\/\/ micro scheduler to cope with \"hand written\" assembler like in the prolog. Though\n+\/\/ still no scheduling of this code is possible, the micro scheduler is aware of the\n+\/\/ code and can update its internal data. The following mechanism is used to achieve this:\n+\/\/ The micro scheduler calls size() of each compound node during scheduling. size() does a\n+\/\/ dummy emit and only during this dummy emit C->hb_scheduling() is not NULL.\n+#if 0 \/\/ TODO: PPC port\n+#define ___(op) if (UsePower6SchedulerPPC64 && C->hb_scheduling())                    \\\n+                  C->hb_scheduling()->_pdScheduling->PdEmulatePipe(ppc64Opcode_##op); \\\n+                _masm.\n+#define ___stop if (UsePower6SchedulerPPC64 && C->hb_scheduling())                    \\\n+                  C->hb_scheduling()->_pdScheduling->PdEmulatePipe(archOpcode_none)\n+#define ___advance if (UsePower6SchedulerPPC64 && C->hb_scheduling())                 \\\n+                  C->hb_scheduling()->_pdScheduling->advance_offset\n+#else\n+#define ___(op) if (UsePower6SchedulerPPC64)                                          \\\n+                  Unimplemented();                                                    \\\n+                _masm.\n+#define ___stop if (UsePower6SchedulerPPC64)                                          \\\n+                  Unimplemented()\n+#define ___advance if (UsePower6SchedulerPPC64)                                       \\\n+                  Unimplemented()\n+#endif\n+\n@@ -1392,1 +1417,1 @@\n-    __ nop();\n+    ___(nop) nop();\n@@ -1395,1 +1420,1 @@\n-    __ mflr(return_pc);\n+    ___(mflr) mflr(return_pc);\n@@ -1455,1 +1480,1 @@\n-          __ ld(R0,  (int)(signed short)stdoffset, R1_SP);\n+          ___(ld) ld(R0,  (int)(signed short)stdoffset, R1_SP);\n@@ -1457,1 +1482,1 @@\n-          __ std(R0, (int)(signed short)stdoffset, R1_SP);\n+          ___(std) std(R0, (int)(signed short)stdoffset, R1_SP);\n@@ -1465,1 +1490,1 @@\n-        __ addis(tmp, R1_SP, hi);\n+        ___(addis) addis(tmp, R1_SP, hi);\n@@ -1467,1 +1492,1 @@\n-          __ ld(R0, lo, tmp);\n+          ___(ld) ld(R0, lo, tmp);\n@@ -1469,1 +1494,1 @@\n-          __ std(R0, lo, tmp);\n+          ___(std) std(R0, lo, tmp);\n@@ -1484,0 +1509,10 @@\n+  \/\/ Optimized version for most common case.\n+  if (UsePower6SchedulerPPC64 &&\n+      !method_is_frameless && Assembler::is_simm((int)(-offset), 16) &&\n+      !(false \/* ConstantsALot TODO: PPC port*\/)) {\n+    ___(or) mr(callers_sp, R1_SP);\n+    ___(std) std(return_pc, _abi(lr), R1_SP);\n+    ___(stdu) stdu(R1_SP, -offset, R1_SP);\n+    return;\n+  }\n+\n@@ -1486,1 +1521,1 @@\n-    __ mr(callers_sp, R1_SP);\n+    ___(or) mr(callers_sp, R1_SP);\n@@ -1495,1 +1530,1 @@\n-      __ stdu(R1_SP, -offset, R1_SP);\n+      ___(stdu) stdu(R1_SP, -offset, R1_SP);\n@@ -1499,5 +1534,5 @@\n-      __ lis( tmp, (int)((signed short)(((x >> 32) & 0xffff0000) >> 16)));\n-      __ ori( tmp, tmp, ((x >> 32) & 0x0000ffff));\n-      __ sldi(tmp, tmp, 32);\n-      __ oris(tmp, tmp, (x & 0xffff0000) >> 16);\n-      __ ori( tmp, tmp, (x & 0x0000ffff));\n+      ___(addis)  lis( tmp, (int)((signed short)(((x >> 32) & 0xffff0000) >> 16)));\n+      ___(ori)    ori( tmp, tmp, ((x >> 32) & 0x0000ffff));\n+      ___(rldicr) sldi(tmp, tmp, 32);\n+      ___(oris)   oris(tmp, tmp, (x & 0xffff0000) >> 16);\n+      ___(ori)    ori( tmp, tmp, (x & 0x0000ffff));\n@@ -1505,1 +1540,1 @@\n-      __ stdux(R1_SP, R1_SP, tmp);\n+      ___(stdux) stdux(R1_SP, R1_SP, tmp);\n@@ -1520,1 +1555,1 @@\n-    __ std(return_pc, _abi(lr), callers_sp);\n+    ___(std) std(return_pc, _abi(lr), callers_sp);\n@@ -1525,0 +1560,3 @@\n+#undef ___\n+#undef ___stop\n+#undef ___advance\n@@ -1606,0 +1644,29 @@\n+#if 0 \/\/ TODO: PPC port\n+void MachLoadPollAddrLateNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n+  C2_MacroAssembler _masm(&cbuf);\n+  if (LoadPollAddressFromThread) {\n+    _masm.ld(R11, in_bytes(JavaThread::poll_address_offset()), R16_thread);\n+  } else {\n+    _masm.nop();\n+  }\n+}\n+\n+uint MachLoadPollAddrLateNode::size(PhaseRegAlloc* ra_) const {\n+  if (LoadPollAddressFromThread) {\n+    return 4;\n+  } else {\n+    return 4;\n+  }\n+}\n+\n+#ifndef PRODUCT\n+void MachLoadPollAddrLateNode::format(PhaseRegAlloc* ra_, outputStream* st) const {\n+  st->print_cr(\" LD R11, PollAddressOffset, R16_thread \\t\/\/ LoadPollAddressFromThread\");\n+}\n+#endif\n+\n+const RegMask &MachLoadPollAddrLateNode::out_RegMask() const {\n+  return RSCRATCH1_BITS64_REG_mask();\n+}\n+#endif \/\/ PPC port\n+\n@@ -1888,0 +1955,96 @@\n+#if 0 \/\/ TODO: PPC port\n+ArchOpcode MachSpillCopyNode_archOpcode(MachSpillCopyNode *n, PhaseRegAlloc *ra_) {\n+#ifndef PRODUCT\n+  if (ra_->node_regs_max_index() == 0) return archOpcode_undefined;\n+#endif\n+  assert(ra_->node_regs_max_index() != 0, \"\");\n+\n+  \/\/ Get registers to move.\n+  OptoReg::Name src_hi = ra_->get_reg_second(n->in(1));\n+  OptoReg::Name src_lo = ra_->get_reg_first(n->in(1));\n+  OptoReg::Name dst_hi = ra_->get_reg_second(n);\n+  OptoReg::Name dst_lo = ra_->get_reg_first(n);\n+\n+  enum RC src_lo_rc = rc_class(src_lo);\n+  enum RC dst_lo_rc = rc_class(dst_lo);\n+\n+  if (src_lo == dst_lo && src_hi == dst_hi)\n+    return ppc64Opcode_none;            \/\/ Self copy, no move.\n+\n+  \/\/ --------------------------------------\n+  \/\/ Memory->Memory Spill. Use R0 to hold the value.\n+  if (src_lo_rc == rc_stack && dst_lo_rc == rc_stack) {\n+    return ppc64Opcode_compound;\n+  }\n+\n+  \/\/ --------------------------------------\n+  \/\/ Check for float->int copy; requires a trip through memory.\n+  if (src_lo_rc == rc_float && dst_lo_rc == rc_int) {\n+    Unimplemented();\n+  }\n+\n+  \/\/ --------------------------------------\n+  \/\/ Check for integer reg-reg copy.\n+  if (src_lo_rc == rc_int && dst_lo_rc == rc_int) {\n+    Register Rsrc = as_Register(Matcher::_regEncode[src_lo]);\n+    Register Rdst = as_Register(Matcher::_regEncode[dst_lo]);\n+    if (Rsrc == Rdst) {\n+      return ppc64Opcode_none;\n+    } else {\n+      return ppc64Opcode_or;\n+    }\n+  }\n+\n+  \/\/ Check for integer store.\n+  if (src_lo_rc == rc_int && dst_lo_rc == rc_stack) {\n+    if (src_hi != OptoReg::Bad) {\n+      return ppc64Opcode_std;\n+    } else {\n+      return ppc64Opcode_stw;\n+    }\n+  }\n+\n+  \/\/ Check for integer load.\n+  if (dst_lo_rc == rc_int && src_lo_rc == rc_stack) {\n+    if (src_hi != OptoReg::Bad) {\n+      return ppc64Opcode_ld;\n+    } else {\n+      return ppc64Opcode_lwz;\n+    }\n+  }\n+\n+  \/\/ Check for float reg-reg copy.\n+  if (src_lo_rc == rc_float && dst_lo_rc == rc_float) {\n+    return ppc64Opcode_fmr;\n+  }\n+\n+  \/\/ Check for float store.\n+  if (src_lo_rc == rc_float && dst_lo_rc == rc_stack) {\n+    if (src_hi != OptoReg::Bad) {\n+      return ppc64Opcode_stfd;\n+    } else {\n+      return ppc64Opcode_stfs;\n+    }\n+  }\n+\n+  \/\/ Check for float load.\n+  if (dst_lo_rc == rc_float && src_lo_rc == rc_stack) {\n+    if (src_hi != OptoReg::Bad) {\n+      return ppc64Opcode_lfd;\n+    } else {\n+      return ppc64Opcode_lfs;\n+    }\n+  }\n+\n+  \/\/ --------------------------------------------------------------------\n+  \/\/ Check for hi bits still needing moving. Only happens for misaligned\n+  \/\/ arguments to native calls.\n+  if (src_hi == dst_hi) {\n+    return ppc64Opcode_none;               \/\/ Self copy; no move.\n+  }\n+\n+  ShouldNotReachHere();\n+  return ppc64Opcode_undefined;\n+}\n+#endif \/\/ PPC port\n+\n@@ -1983,0 +2146,7 @@\n+#if 0 \/\/ TODO: PPC port\n+\/\/ Optimize UEP code on z (save a load_const() call in main path).\n+int MachUEPNode::ep_offset() {\n+  return 0;\n+}\n+#endif\n+\n@@ -2511,0 +2681,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -2517,0 +2688,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -2520,0 +2692,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_none);\n@@ -2524,0 +2697,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lbz);\n@@ -2531,0 +2705,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -2539,0 +2714,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lhz);\n@@ -2547,0 +2723,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -2556,0 +2733,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lwz);\n@@ -2564,0 +2742,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -2573,0 +2752,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ld);\n@@ -2582,0 +2762,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -2592,0 +2773,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lfd);\n@@ -2598,0 +2780,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ld);\n@@ -2621,0 +2804,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -2855,0 +3039,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ld);\n@@ -2887,0 +3072,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -3021,0 +3207,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_stw);\n@@ -3027,0 +3214,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_std);\n@@ -3035,0 +3223,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_stfs);\n@@ -3041,0 +3230,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_stfd);\n@@ -3049,0 +3239,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -3064,0 +3255,7 @@\n+#if 0 \/\/ TODO: PPC port\n+    \/\/ Check CMSCollectorCardTableBarrierSetBSExt::_requires_release and do the\n+    \/\/ StoreStore barrier conditionally.\n+    __ lwz(R0, 0, $releaseFieldAddr$$Register);\n+    __ cmpwi($crx$$CondRegister, R0, 0);\n+    __ beq_predict_taken($crx$$CondRegister, skip_storestore);\n+#endif\n@@ -3066,0 +3264,3 @@\n+#if 0 \/\/ TODO: PPC port\n+    __ bind(skip_storestore);\n+#endif\n@@ -3270,0 +3471,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -3279,0 +3481,1 @@\n+    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -3283,0 +3486,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -3290,0 +3494,1 @@\n+    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -3296,0 +3501,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andc);\n@@ -3301,0 +3507,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -3313,0 +3520,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -3325,0 +3533,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -3331,0 +3540,1 @@\n+    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -3335,0 +3545,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -3340,0 +3551,1 @@\n+    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -3344,0 +3556,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_bc);\n@@ -3373,0 +3586,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_bc);\n@@ -3400,0 +3614,41 @@\n+  \/\/ Branch used with Power6 scheduling (can be shortened without changing the node).\n+  enc_class enc_bc_short_far(flagsRegSrc crx, cmpOp cmp, Label lbl) %{\n+    \/\/ The scheduler doesn't know about branch shortening, so we set the opcode\n+    \/\/ to ppc64Opcode_bc in order to hide this detail from the scheduler.\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_bc);\n+\n+    C2_MacroAssembler _masm(&cbuf);\n+    Label d;   \/\/ dummy\n+    __ bind(d);\n+    Label* p = ($lbl$$label);\n+    \/\/ `p' is `NULL' when this encoding class is used only to\n+    \/\/ determine the size of the encoded instruction.\n+    Label& l = (NULL == p)? d : *(p);\n+    int cc = $cmp$$cmpcode;\n+    int flags_reg = $crx$$reg;\n+    int bhint = Assembler::bhintNoHint;\n+\n+    if (UseStaticBranchPredictionForUncommonPathsPPC64) {\n+      if (_prob <= PROB_NEVER) {\n+        bhint = Assembler::bhintIsNotTaken;\n+      } else if (_prob >= PROB_ALWAYS) {\n+        bhint = Assembler::bhintIsTaken;\n+      }\n+    }\n+\n+#if 0 \/\/ TODO: PPC port\n+    if (_size == 8) {\n+      \/\/ Tell the conditional far branch to optimize itself when being relocated.\n+      __ bc_far(Assembler::add_bhint_to_boint(bhint, cc_to_boint(cc)),\n+                    cc_to_biint(cc, flags_reg),\n+                    l,\n+                    MacroAssembler::bc_far_optimize_on_relocate);\n+    } else {\n+      __ bc    (Assembler::add_bhint_to_boint(bhint, cc_to_boint(cc)),\n+                    cc_to_biint(cc, flags_reg),\n+                    l);\n+    }\n+#endif\n+    Unimplemented();\n+  %}\n+\n@@ -3446,0 +3701,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ld);\n@@ -3503,0 +3759,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_bl);\n@@ -3552,0 +3809,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_bl);\n@@ -3655,0 +3913,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -3712,0 +3971,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -3745,0 +4005,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mtctr);\n@@ -5256,0 +5517,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_extsb);\n@@ -5413,0 +5675,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lha);\n@@ -5429,0 +5692,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -5535,0 +5799,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lwa);\n@@ -5551,0 +5816,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lwa);\n@@ -5752,0 +6018,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lfs);\n@@ -5771,0 +6038,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -5807,0 +6075,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -5841,0 +6110,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -5854,0 +6124,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ori);\n@@ -5866,0 +6137,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -5879,0 +6151,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -5895,0 +6168,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ori);\n@@ -5922,0 +6196,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -5935,0 +6210,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -5950,0 +6226,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ori);\n@@ -6029,0 +6306,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ld);\n@@ -6055,0 +6333,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -6068,0 +6347,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -6081,0 +6361,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -6111,0 +6392,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -6123,0 +6405,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -6170,0 +6453,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -6185,0 +6469,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -6200,0 +6485,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ori);\n@@ -6257,0 +6543,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -6304,0 +6591,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ld);\n@@ -6340,0 +6628,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lfs);\n@@ -6362,0 +6651,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -6402,0 +6692,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lfd);\n@@ -6425,0 +6716,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -6467,0 +6759,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_dcbtst);\n@@ -6480,0 +6773,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_dcbtst);\n@@ -6493,0 +6787,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_dcbtst);\n@@ -6506,0 +6801,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_dcbtst);\n@@ -6521,0 +6817,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_stb);\n@@ -6535,0 +6832,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sth);\n@@ -6688,0 +6986,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -6709,0 +7008,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -6722,0 +7022,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -6737,0 +7038,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -6755,0 +7057,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -6768,0 +7071,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -6806,0 +7110,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -6820,0 +7125,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -6836,0 +7142,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -6849,0 +7156,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -6867,0 +7175,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -6887,0 +7196,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -6915,0 +7225,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -6931,0 +7242,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldimi);\n@@ -7041,0 +7353,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -7055,0 +7368,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -7073,0 +7387,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -7087,0 +7402,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_subf);\n@@ -7100,0 +7416,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -7159,0 +7476,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -7174,0 +7492,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -7237,0 +7556,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lwsync);\n@@ -7270,0 +7590,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lwsync);\n@@ -7282,0 +7603,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lwsync);\n@@ -7304,0 +7626,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sync);\n@@ -7362,0 +7685,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7378,1 +7702,1 @@\n-  size(8);\n+  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n@@ -7391,1 +7715,1 @@\n-  size(8);\n+  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n@@ -7407,0 +7731,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7423,1 +7748,1 @@\n-  size(8);\n+  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n@@ -7436,1 +7761,1 @@\n-  size(8);\n+  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n@@ -7452,0 +7777,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7469,1 +7795,1 @@\n-  size(8);\n+  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n@@ -7482,1 +7808,1 @@\n-  size(8);\n+  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n@@ -7498,0 +7824,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7514,1 +7841,1 @@\n-  size(8);\n+  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n@@ -7527,1 +7854,1 @@\n-  size(8);\n+  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n@@ -7540,1 +7867,1 @@\n-  size(8);\n+  size((false \/* TODO: PPC PORT (InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 12 : 8));\n@@ -7542,0 +7869,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmovef);\n@@ -7547,0 +7875,1 @@\n+    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -7560,1 +7889,1 @@\n-  size(8);\n+  size((false \/* TODO: PPC PORT (InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 12 : 8));\n@@ -7562,0 +7891,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmovef);\n@@ -7567,0 +7897,1 @@\n+    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -7588,0 +7919,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7607,0 +7939,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_stdcx_);\n@@ -7622,0 +7955,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ldarx);\n@@ -7641,0 +7975,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7660,0 +7995,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7679,0 +8015,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7698,0 +8035,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7716,0 +8054,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7734,0 +8073,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7752,0 +8092,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7770,0 +8111,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7791,0 +8133,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7805,0 +8148,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7819,0 +8163,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7833,0 +8178,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7847,0 +8193,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7861,0 +8208,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7875,0 +8223,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7889,0 +8238,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7903,0 +8253,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7917,0 +8268,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7933,0 +8285,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7947,0 +8300,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7963,0 +8317,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7978,0 +8333,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7994,0 +8350,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8008,0 +8365,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8026,0 +8384,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8040,0 +8399,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8054,0 +8414,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8074,0 +8435,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8094,0 +8456,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8108,0 +8471,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8122,0 +8486,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8142,0 +8507,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8162,0 +8528,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8176,0 +8543,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8196,0 +8564,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8210,0 +8579,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8230,0 +8600,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8244,0 +8615,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8264,0 +8636,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8278,0 +8651,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8535,0 +8909,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -8547,0 +8922,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -8572,0 +8948,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -8583,0 +8960,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -8594,0 +8972,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -8606,0 +8985,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -8632,0 +9012,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -8644,0 +9025,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -8657,0 +9039,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -8668,0 +9051,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -8681,0 +9065,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -8694,0 +9079,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -8708,0 +9094,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_subf);\n@@ -8724,0 +9111,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_subfic);\n@@ -8739,0 +9127,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_srawi);\n@@ -8762,0 +9151,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_neg);\n@@ -8773,0 +9163,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_subf);\n@@ -8785,0 +9176,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_subf);\n@@ -8800,0 +9192,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sradi);\n@@ -8815,0 +9208,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sradi);\n@@ -8839,0 +9233,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_neg);\n@@ -8851,0 +9246,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_neg);\n@@ -8867,0 +9263,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mullw);\n@@ -8880,0 +9277,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mulli);\n@@ -8892,0 +9290,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mulld);\n@@ -8905,0 +9304,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mulhd);\n@@ -8918,0 +9318,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mulli);\n@@ -8931,0 +9332,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_neg);\n@@ -8947,0 +9349,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_divw);\n@@ -8960,1 +9363,1 @@\n-  size(8);\n+  size((false \/* TODO: PPC PORT (InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 12 : 8));\n@@ -8962,0 +9365,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -8965,0 +9369,1 @@\n+    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -8992,0 +9397,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_neg);\n@@ -9006,0 +9412,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_divd);\n@@ -9019,1 +9426,1 @@\n-  size(8);\n+  size((false \/* TODO: PPC PORT (InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 12 : 8));\n@@ -9021,0 +9428,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -9024,0 +9432,1 @@\n+    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -9093,0 +9502,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9106,0 +9516,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_slw);\n@@ -9129,0 +9540,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm);\n@@ -9142,0 +9554,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm); \/\/ FIXME: assert that rlwinm is equal to addi\n@@ -9162,0 +9575,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm); \/\/ FIXME: assert that rlwinm is equal to addi\n@@ -9182,0 +9596,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sld);\n@@ -9205,0 +9620,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -9218,0 +9634,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -9232,0 +9649,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldic);\n@@ -9245,0 +9663,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sraw);\n@@ -9269,0 +9688,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_srawi);\n@@ -9282,0 +9702,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_srad);\n@@ -9307,0 +9728,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sradi);\n@@ -9319,0 +9741,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sradi);\n@@ -9332,0 +9755,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_srw);\n@@ -9357,0 +9781,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm);\n@@ -9370,0 +9795,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_srd);\n@@ -9395,0 +9821,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9407,0 +9834,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9419,0 +9847,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9431,0 +9860,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9449,0 +9879,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9466,0 +9897,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_extsw);\n@@ -9481,0 +9913,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm);\n@@ -9494,0 +9927,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm);\n@@ -9508,0 +9942,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fadds);\n@@ -9520,0 +9955,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fadd);\n@@ -9532,0 +9968,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fsubs);\n@@ -9543,0 +9980,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fsub);\n@@ -9554,0 +9992,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmuls);\n@@ -9565,0 +10004,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmul);\n@@ -9576,0 +10016,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fdivs);\n@@ -9587,0 +10028,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fdiv);\n@@ -9598,0 +10040,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fabs);\n@@ -9609,0 +10052,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fabs);\n@@ -9619,0 +10063,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fneg);\n@@ -9629,0 +10074,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fneg);\n@@ -9640,0 +10086,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fnabs);\n@@ -9651,0 +10098,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fnabs);\n@@ -9663,0 +10111,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fsqrt);\n@@ -9677,0 +10126,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fsqrts);\n@@ -9713,0 +10163,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmadds);\n@@ -9725,0 +10176,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmadd);\n@@ -9738,0 +10190,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fnmsubs);\n@@ -9751,0 +10204,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fnmsub);\n@@ -9764,0 +10218,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fnmadds);\n@@ -9777,0 +10232,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fnmadd);\n@@ -9789,0 +10245,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmsubs);\n@@ -9801,0 +10258,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmsub);\n@@ -9817,0 +10275,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_and);\n@@ -9829,0 +10288,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andis_);\n@@ -9842,0 +10302,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andi_);\n@@ -9854,0 +10315,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -9864,0 +10326,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9875,0 +10338,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm);\n@@ -9889,0 +10353,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_and);\n@@ -9902,0 +10367,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andi_);\n@@ -9914,0 +10380,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -9924,0 +10391,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9937,0 +10405,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9950,0 +10419,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -9962,0 +10432,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -9987,0 +10458,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ori);\n@@ -10000,0 +10472,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -10013,0 +10486,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -10026,0 +10500,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ori);\n@@ -10039,0 +10514,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_xor);\n@@ -10051,0 +10527,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_xor);\n@@ -10076,0 +10553,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_xori);\n@@ -10089,0 +10567,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_xor);\n@@ -10102,0 +10581,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_xor);\n@@ -10115,0 +10595,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_xori);\n@@ -10127,0 +10608,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_nor);\n@@ -10139,0 +10621,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_nor);\n@@ -10164,0 +10647,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andc);\n@@ -10290,0 +10774,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lfs);\n@@ -10377,0 +10862,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -10391,0 +10877,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -10403,0 +10890,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -10517,0 +11005,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm);\n@@ -10618,0 +11107,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_srawi);\n@@ -10635,0 +11125,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_extsb);\n@@ -10656,0 +11147,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_extsh);\n@@ -10668,0 +11160,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_extsw);\n@@ -10678,0 +11171,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -10691,0 +11185,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fctiwz);;\n@@ -10705,1 +11200,1 @@\n-  size(8);\n+  size((false \/* TODO: PPC PORT(InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 12 : 8));\n@@ -10719,1 +11214,1 @@\n-  size(8);\n+  size((false \/* TODO: PPC PORT(InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 12 : 8));\n@@ -10872,0 +11367,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fctiwz);\n@@ -10916,0 +11412,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_extsw);\n@@ -10929,0 +11426,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -10942,0 +11440,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -10955,0 +11454,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fctiwz);\n@@ -10969,1 +11469,1 @@\n-  size(8);\n+  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n@@ -10983,1 +11483,1 @@\n-  size(8);\n+  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n@@ -11130,0 +11630,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fctiwz);\n@@ -11178,0 +11679,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fcfid);\n@@ -11189,0 +11691,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_frsp);\n@@ -11221,0 +11724,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fcfid);\n@@ -11349,0 +11853,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmr);\n@@ -11363,0 +11868,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmp);\n@@ -11373,0 +11879,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpi);\n@@ -11385,0 +11892,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andi_);\n@@ -11395,0 +11903,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmp);\n@@ -11405,0 +11914,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpi);\n@@ -11416,0 +11926,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpl);\n@@ -11426,0 +11937,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpli);\n@@ -11437,0 +11949,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_and_);\n@@ -11448,0 +11961,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andi_);\n@@ -11462,1 +11976,1 @@\n-  size(16);\n+  size((false \/* TODO: PPC PORTInsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 20 : 16));\n@@ -11464,0 +11978,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -11470,0 +11985,1 @@\n+    \/\/ TODO: PPC port__ endgroup_if_needed(_size == 20);\n@@ -11558,0 +12074,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_twi);\n@@ -11584,0 +12101,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_tw);\n@@ -11610,0 +12128,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_twi);\n@@ -11627,0 +12146,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpl);\n@@ -11637,0 +12157,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpli);\n@@ -11658,0 +12179,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_tdi);\n@@ -11678,0 +12200,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpl);\n@@ -11691,0 +12214,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpli);\n@@ -11712,0 +12236,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_tdi);\n@@ -11730,0 +12255,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpl);\n@@ -11740,0 +12266,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpl);\n@@ -11756,0 +12283,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpi);\n@@ -11772,0 +12300,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fcmpu);\n@@ -11786,1 +12315,1 @@\n-  size(12);\n+  size((false \/* TODO: PPC PORT(InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 16 : 12));\n@@ -11788,0 +12317,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmovecr);\n@@ -11792,0 +12322,1 @@\n+    \/\/ TODO PPC port __ endgroup_if_needed(_size == 16);\n@@ -11884,0 +12415,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fcmpu);\n@@ -12088,0 +12620,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_b);\n@@ -12127,0 +12660,1 @@\n+  predicate(!false \/* TODO: PPC port HB_Schedule*\/);\n@@ -12139,0 +12673,20 @@\n+\/\/ Conditional Branch used with Power6 scheduler (can be far or short).\n+instruct branchConSched(cmpOp cmp, flagsRegSrc crx, label lbl) %{\n+  \/\/ Same match rule as `branchCon'.\n+  match(If cmp crx);\n+  effect(USE crx, USE lbl);\n+  predicate(false \/* TODO: PPC port HB_Schedule*\/);\n+  \/\/ Higher cost than `branchCon'.\n+  ins_cost(5*BRANCH_COST);\n+\n+  \/\/ Actually size doesn't depend on alignment but on shortening.\n+  ins_variable_size_depending_on_alignment(true);\n+  \/\/ long variant.\n+  ins_short_branch(0);\n+\n+  format %{ \"B_FAR$cmp $crx, $lbl\" %}\n+  size(8); \/\/ worst case\n+  ins_encode( enc_bc_short_far(crx, cmp, lbl) );\n+  ins_pipe(pipe_class_default);\n+%}\n+\n@@ -12156,0 +12710,1 @@\n+  predicate(!false \/* TODO: PPC port HB_Schedule *\/);\n@@ -12167,0 +12722,19 @@\n+\/\/ Conditional Branch used with Power6 scheduler (can be far or short).\n+instruct branchLoopEndSched(cmpOp cmp, flagsRegSrc crx, label labl) %{\n+  match(CountedLoopEnd cmp crx);\n+  effect(USE labl);\n+  predicate(false \/* TODO: PPC port HB_Schedule *\/);\n+  \/\/ Higher cost than `branchCon'.\n+  ins_cost(5*BRANCH_COST);\n+\n+  \/\/ Actually size doesn't depend on alignment but on shortening.\n+  ins_variable_size_depending_on_alignment(true);\n+  \/\/ Long variant.\n+  ins_short_branch(0);\n+\n+  format %{ \"B_FAR$cmp $crx, $labl \\t\/\/ counted loop end\" %}\n+  size(8); \/\/ worst case\n+  ins_encode( enc_bc_short_far(crx, cmp, labl) );\n+  ins_pipe(pipe_class_default);\n+%}\n+\n@@ -12186,0 +12760,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12201,0 +12776,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12219,0 +12795,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12239,0 +12816,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12257,0 +12835,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12274,0 +12853,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -12286,0 +12866,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_subf);\n@@ -12299,0 +12880,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12312,0 +12894,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12325,0 +12908,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12338,0 +12922,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12354,0 +12939,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12370,0 +12956,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12386,0 +12973,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12402,0 +12990,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12417,0 +13006,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12432,0 +13022,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12447,0 +13038,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12468,0 +13060,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12501,0 +13094,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12527,0 +13121,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12554,0 +13149,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12588,0 +13184,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12615,0 +13212,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12637,0 +13235,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12661,0 +13260,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12688,0 +13288,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12715,0 +13316,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12739,0 +13341,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12760,0 +13363,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12781,0 +13385,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12798,0 +13403,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12820,0 +13426,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12840,0 +13447,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12855,0 +13463,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12911,0 +13520,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12944,0 +13554,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12961,0 +13572,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_popcntb);\n@@ -12975,0 +13587,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_popcntb);\n@@ -12988,0 +13601,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cntlzw);\n@@ -13001,0 +13615,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cntlzd);\n@@ -13014,0 +13629,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cntlzd);\n@@ -13090,0 +13706,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwimi);\n@@ -13103,0 +13720,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwimi);\n@@ -13497,0 +14115,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldimi);\n@@ -13510,0 +14129,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldimi);\n@@ -13523,0 +14143,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldimi);\n@@ -13545,0 +14166,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -13556,0 +14178,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -13617,0 +14240,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -13628,0 +14252,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -13689,0 +14314,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -13700,0 +14326,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -13777,0 +14404,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -14224,0 +14852,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -14236,0 +14865,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -14248,0 +14878,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -14260,0 +14891,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -14524,0 +15156,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_bctrl);\n@@ -14572,0 +15205,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -14584,0 +15218,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_blr);\n@@ -14605,0 +15240,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -14633,0 +15269,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -14647,0 +15284,1 @@\n+      \/\/ TODO: PPC port $archOpcode(ppc64Opcode_tdi);\n@@ -14680,0 +15318,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_endgroup);\n@@ -14695,0 +15334,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmr);\n@@ -14708,0 +15348,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmr);\n@@ -14721,0 +15362,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmr);\n@@ -14731,0 +15373,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mcrf);\n@@ -14745,0 +15388,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mcrf);\n@@ -14758,0 +15402,1 @@\n+    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mcrf);\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":679,"deletions":34,"binary":false,"changes":713,"status":"modified"},{"patch":"@@ -119,0 +119,7 @@\n+  \/\/ On Power6 test for section size.\n+  if (PowerArchitecturePPC64 == 6) {\n+    determine_section_size();\n+  \/\/ TODO: PPC port } else {\n+  \/\/ TODO: PPC port PdScheduling::power6SectorSize = 0x20;\n+  }\n+\n@@ -563,0 +570,234 @@\n+#ifdef COMPILER2\n+\/\/ Determine section size on power6: If section size is 8 instructions,\n+\/\/ there should be a difference between the two testloops of ~15 %. If\n+\/\/ no difference is detected the section is assumed to be 32 instructions.\n+void VM_Version::determine_section_size() {\n+\n+  int unroll = 80;\n+\n+  const int code_size = (2* unroll * 32 + 100)*BytesPerInstWord;\n+\n+  \/\/ Allocate space for the code.\n+  ResourceMark rm;\n+  CodeBuffer cb(\"detect_section_size\", code_size, 0);\n+  MacroAssembler* a = new MacroAssembler(&cb);\n+\n+  uint32_t *code = (uint32_t *)a->pc();\n+  \/\/ Emit code.\n+  void (*test1)() = (void(*)())(void *)a->function_entry();\n+\n+  Label l1;\n+\n+  a->li(R4, 1);\n+  a->sldi(R4, R4, 28);\n+  a->b(l1);\n+  a->align(CodeEntryAlignment);\n+\n+  a->bind(l1);\n+\n+  for (int i = 0; i < unroll; i++) {\n+    \/\/ Schleife 1\n+    \/\/ ------- sector 0 ------------\n+    \/\/ ;; 0\n+    a->nop();                   \/\/ 1\n+    a->fpnop0();                \/\/ 2\n+    a->fpnop1();                \/\/ 3\n+    a->addi(R4,R4, -1); \/\/ 4\n+\n+    \/\/ ;;  1\n+    a->nop();                   \/\/ 5\n+    a->fmr(F6, F6);             \/\/ 6\n+    a->fmr(F7, F7);             \/\/ 7\n+    a->endgroup();              \/\/ 8\n+    \/\/ ------- sector 8 ------------\n+\n+    \/\/ ;;  2\n+    a->nop();                   \/\/ 9\n+    a->nop();                   \/\/ 10\n+    a->fmr(F8, F8);             \/\/ 11\n+    a->fmr(F9, F9);             \/\/ 12\n+\n+    \/\/ ;;  3\n+    a->nop();                   \/\/ 13\n+    a->fmr(F10, F10);           \/\/ 14\n+    a->fmr(F11, F11);           \/\/ 15\n+    a->endgroup();              \/\/ 16\n+    \/\/ -------- sector 16 -------------\n+\n+    \/\/ ;;  4\n+    a->nop();                   \/\/ 17\n+    a->nop();                   \/\/ 18\n+    a->fmr(F15, F15);           \/\/ 19\n+    a->fmr(F16, F16);           \/\/ 20\n+\n+    \/\/ ;;  5\n+    a->nop();                   \/\/ 21\n+    a->fmr(F17, F17);           \/\/ 22\n+    a->fmr(F18, F18);           \/\/ 23\n+    a->endgroup();              \/\/ 24\n+    \/\/ ------- sector 24  ------------\n+\n+    \/\/ ;;  6\n+    a->nop();                   \/\/ 25\n+    a->nop();                   \/\/ 26\n+    a->fmr(F19, F19);           \/\/ 27\n+    a->fmr(F20, F20);           \/\/ 28\n+\n+    \/\/ ;;  7\n+    a->nop();                   \/\/ 29\n+    a->fmr(F21, F21);           \/\/ 30\n+    a->fmr(F22, F22);           \/\/ 31\n+    a->brnop0();                \/\/ 32\n+\n+    \/\/ ------- sector 32 ------------\n+  }\n+\n+  \/\/ ;; 8\n+  a->cmpdi(CCR0, R4, unroll);   \/\/ 33\n+  a->bge(CCR0, l1);             \/\/ 34\n+  a->blr();\n+\n+  \/\/ Emit code.\n+  void (*test2)() = (void(*)())(void *)a->function_entry();\n+  \/\/ uint32_t *code = (uint32_t *)a->pc();\n+\n+  Label l2;\n+\n+  a->li(R4, 1);\n+  a->sldi(R4, R4, 28);\n+  a->b(l2);\n+  a->align(CodeEntryAlignment);\n+\n+  a->bind(l2);\n+\n+  for (int i = 0; i < unroll; i++) {\n+    \/\/ Schleife 2\n+    \/\/ ------- sector 0 ------------\n+    \/\/ ;; 0\n+    a->brnop0();                  \/\/ 1\n+    a->nop();                     \/\/ 2\n+    \/\/a->cmpdi(CCR0, R4, unroll);\n+    a->fpnop0();                  \/\/ 3\n+    a->fpnop1();                  \/\/ 4\n+    a->addi(R4,R4, -1);           \/\/ 5\n+\n+    \/\/ ;; 1\n+\n+    a->nop();                     \/\/ 6\n+    a->fmr(F6, F6);               \/\/ 7\n+    a->fmr(F7, F7);               \/\/ 8\n+    \/\/ ------- sector 8 ---------------\n+\n+    \/\/ ;; 2\n+    a->endgroup();                \/\/ 9\n+\n+    \/\/ ;; 3\n+    a->nop();                     \/\/ 10\n+    a->nop();                     \/\/ 11\n+    a->fmr(F8, F8);               \/\/ 12\n+\n+    \/\/ ;; 4\n+    a->fmr(F9, F9);               \/\/ 13\n+    a->nop();                     \/\/ 14\n+    a->fmr(F10, F10);             \/\/ 15\n+\n+    \/\/ ;; 5\n+    a->fmr(F11, F11);             \/\/ 16\n+    \/\/ -------- sector 16 -------------\n+\n+    \/\/ ;; 6\n+    a->endgroup();                \/\/ 17\n+\n+    \/\/ ;; 7\n+    a->nop();                     \/\/ 18\n+    a->nop();                     \/\/ 19\n+    a->fmr(F15, F15);             \/\/ 20\n+\n+    \/\/ ;; 8\n+    a->fmr(F16, F16);             \/\/ 21\n+    a->nop();                     \/\/ 22\n+    a->fmr(F17, F17);             \/\/ 23\n+\n+    \/\/ ;; 9\n+    a->fmr(F18, F18);             \/\/ 24\n+    \/\/ -------- sector 24 -------------\n+\n+    \/\/ ;; 10\n+    a->endgroup();                \/\/ 25\n+\n+    \/\/ ;; 11\n+    a->nop();                     \/\/ 26\n+    a->nop();                     \/\/ 27\n+    a->fmr(F19, F19);             \/\/ 28\n+\n+    \/\/ ;; 12\n+    a->fmr(F20, F20);             \/\/ 29\n+    a->nop();                     \/\/ 30\n+    a->fmr(F21, F21);             \/\/ 31\n+\n+    \/\/ ;; 13\n+    a->fmr(F22, F22);             \/\/ 32\n+  }\n+\n+  \/\/ -------- sector 32 -------------\n+  \/\/ ;; 14\n+  a->cmpdi(CCR0, R4, unroll); \/\/ 33\n+  a->bge(CCR0, l2);           \/\/ 34\n+\n+  a->blr();\n+  uint32_t *code_end = (uint32_t *)a->pc();\n+  a->flush();\n+\n+  cb.insts()->set_end((u_char*)code_end);\n+\n+  double loop1_seconds,loop2_seconds, rel_diff;\n+  uint64_t start1, stop1;\n+\n+  start1 = os::current_thread_cpu_time(false);\n+  (*test1)();\n+  stop1 = os::current_thread_cpu_time(false);\n+  loop1_seconds = (stop1- start1) \/ (1000 *1000 *1000.0);\n+\n+\n+  start1 = os::current_thread_cpu_time(false);\n+  (*test2)();\n+  stop1 = os::current_thread_cpu_time(false);\n+\n+  loop2_seconds = (stop1 - start1) \/ (1000 *1000 *1000.0);\n+\n+  rel_diff = (loop2_seconds - loop1_seconds) \/ loop1_seconds *100;\n+\n+  if (PrintAssembly || PrintStubCode) {\n+    ttyLocker ttyl;\n+    tty->print_cr(\"Decoding section size detection stub at \" INTPTR_FORMAT \" before execution:\", p2i(code));\n+    \/\/ Use existing decode function. This enables the [MachCode] format which is needed to DecodeErrorFile.\n+    Disassembler::decode(&cb, (u_char*)code, (u_char*)code_end, tty);\n+    tty->print_cr(\"Time loop1 :%f\", loop1_seconds);\n+    tty->print_cr(\"Time loop2 :%f\", loop2_seconds);\n+    tty->print_cr(\"(time2 - time1) \/ time1 = %f %%\", rel_diff);\n+\n+    if (rel_diff > 12.0) {\n+      tty->print_cr(\"Section Size 8 Instructions\");\n+    } else{\n+      tty->print_cr(\"Section Size 32 Instructions or Power5\");\n+    }\n+  }\n+\n+#if 0 \/\/ TODO: PPC port\n+  \/\/ Set sector size (if not set explicitly).\n+  if (FLAG_IS_DEFAULT(Power6SectorSize128PPC64)) {\n+    if (rel_diff > 12.0) {\n+      PdScheduling::power6SectorSize = 0x20;\n+    } else {\n+      PdScheduling::power6SectorSize = 0x80;\n+    }\n+  } else if (Power6SectorSize128PPC64) {\n+    PdScheduling::power6SectorSize = 0x80;\n+  } else {\n+    PdScheduling::power6SectorSize = 0x20;\n+  }\n+#endif\n+  if (UsePower6SchedulerPPC64) Unimplemented();\n+}\n+#endif \/\/ COMPILER2\n+\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.cpp","additions":241,"deletions":0,"binary":false,"changes":241,"status":"modified"},{"patch":"@@ -87,1 +87,2 @@\n-\n+  static void determine_section_size();\n+  static void power6_micro_bench();\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}