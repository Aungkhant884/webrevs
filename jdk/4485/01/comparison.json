{"files":[{"patch":"@@ -498,3 +498,1 @@\n-HeapWord* DefNewGeneration::expand_and_allocate(size_t size,\n-                                                bool   is_tlab,\n-                                                bool   parallel) {\n+HeapWord* DefNewGeneration::expand_and_allocate(size_t size, bool is_tlab) {\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -311,3 +311,2 @@\n-  HeapWord* expand_and_allocate(size_t size,\n-                                bool is_tlab,\n-                                bool parallel = false);\n+\n+  HeapWord* expand_and_allocate(size_t size, bool is_tlab);\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -191,3 +191,1 @@\n-TenuredGeneration::expand_and_allocate(size_t word_size,\n-                                       bool is_tlab,\n-                                       bool parallel) {\n+TenuredGeneration::expand_and_allocate(size_t word_size, bool is_tlab) {\n@@ -195,24 +193,2 @@\n-  if (parallel) {\n-    MutexLocker x(ParGCRareEvent_lock);\n-    HeapWord* result = NULL;\n-    size_t byte_size = word_size * HeapWordSize;\n-    while (true) {\n-      expand(byte_size, _min_heap_delta_bytes);\n-      if (GCExpandToAllocateDelayMillis > 0) {\n-        os::naked_sleep(GCExpandToAllocateDelayMillis);\n-      }\n-      result = _the_space->par_allocate(word_size);\n-      if ( result != NULL) {\n-        return result;\n-      } else {\n-        \/\/ If there's not enough expansion space available, give up.\n-        if (_virtual_space.uncommitted_size() < byte_size) {\n-          return NULL;\n-        }\n-        \/\/ else try again\n-      }\n-    }\n-  } else {\n-    expand(word_size*HeapWordSize, _min_heap_delta_bytes);\n-    return _the_space->allocate(word_size);\n-  }\n+  expand(word_size*HeapWordSize, _min_heap_delta_bytes);\n+  return _the_space->allocate(word_size);\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.cpp","additions":4,"deletions":28,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,3 +96,1 @@\n-  HeapWord* expand_and_allocate(size_t size,\n-                                bool is_tlab,\n-                                bool parallel = false);\n+  HeapWord* expand_and_allocate(size_t size, bool is_tlab);\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -336,3 +336,1 @@\n-  virtual HeapWord* expand_and_allocate(size_t word_size,\n-                                        bool is_tlab,\n-                                        bool parallel = false) = 0;\n+  virtual HeapWord* expand_and_allocate(size_t word_size, bool is_tlab) = 0;\n","filename":"src\/hotspot\/share\/gc\/shared\/generation.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}