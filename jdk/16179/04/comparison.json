{"files":[{"patch":"@@ -50,1 +50,0 @@\n-#ifdef LINUX\n@@ -52,3 +51,0 @@\n-#else\n-  return false;\n-#endif\n","filename":"src\/hotspot\/cpu\/ppc\/foreignGlobals_ppc.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+    AIX_PPC_64,\n@@ -81,0 +82,2 @@\n+                } else if (OperatingSystem.isAix()) {\n+                    return AIX_PPC_64;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/CABI.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import jdk.internal.foreign.abi.ppc64.aix.AixPPC64Linker;\n@@ -65,1 +66,1 @@\n-                                                                      Windowsx64Linker,\n+                                                                      Windowsx64Linker, AixPPC64Linker,\n@@ -182,0 +183,5 @@\n+    \/\/ some ABIs have special handling for struct members\n+    protected void checkStructMember(MemoryLayout member, long offset) {\n+        checkLayoutRecursive(member);\n+    }\n+\n@@ -193,1 +199,1 @@\n-                checkLayoutRecursive(member);\n+                checkStructMember(member, offset);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.foreign.abi.ppc64.aix.AixPPC64Linker;\n@@ -245,0 +246,1 @@\n+            case AIX_PPC_64 -> AixPPC64Linker.getInstance();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2023 SAP SE. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.foreign.abi.ppc64;\n-\n-\/**\n- * PPC64 CallArranger specialized for ABI v1.\n- *\/\n-public class ABIv1CallArranger extends CallArranger {\n-\n-    @Override\n-    protected boolean useABIv2() {\n-        return false;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ppc64\/ABIv1CallArranger.java","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2023 SAP SE. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.foreign.abi.ppc64;\n-\n-\/**\n- * PPC64 CallArranger specialized for ABI v2.\n- *\/\n-public class ABIv2CallArranger extends CallArranger {\n-\n-    @Override\n-    protected boolean useABIv2() {\n-        return true;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ppc64\/ABIv2CallArranger.java","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -38,0 +38,3 @@\n+import jdk.internal.foreign.abi.ppc64.aix.AixCallArranger;\n+import jdk.internal.foreign.abi.ppc64.linux.ABIv1CallArranger;\n+import jdk.internal.foreign.abi.ppc64.linux.ABIv2CallArranger;\n@@ -65,0 +68,1 @@\n+    final boolean isAIX = isAIX();\n@@ -94,0 +98,1 @@\n+    public static final CallArranger AIX = new AixCallArranger();\n@@ -99,0 +104,1 @@\n+    protected abstract boolean isAIX();\n@@ -209,1 +215,1 @@\n-            if (!useABIv2 && is32Bit) {\n+            if (!useABIv2 && !isAIX && is32Bit) {\n@@ -346,1 +352,1 @@\n-            TypeClass argumentClass = TypeClass.classifyLayout(layout, useABIv2);\n+            TypeClass argumentClass = TypeClass.classifyLayout(layout, useABIv2, isAIX);\n@@ -352,1 +358,2 @@\n-                    final boolean isLargeABIv1Struct = !useABIv2 && layout.byteSize() > MAX_COPY_SIZE;\n+                    final boolean isLargeABIv1Struct = !useABIv2 &&\n+                        (isAIX || layout.byteSize() > MAX_COPY_SIZE);\n@@ -433,1 +440,1 @@\n-            TypeClass argumentClass = TypeClass.classifyLayout(layout, useABIv2);\n+            TypeClass argumentClass = TypeClass.classifyLayout(layout, useABIv2, isAIX);\n@@ -440,1 +447,2 @@\n-                    final boolean isLargeABIv1Struct = !useABIv2 && layout.byteSize() > MAX_COPY_SIZE;\n+                    final boolean isLargeABIv1Struct = !useABIv2 &&\n+                        (isAIX || layout.byteSize() > MAX_COPY_SIZE);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ppc64\/CallArranger.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -115,2 +115,2 @@\n-    private static TypeClass classifyStructType(MemoryLayout layout, boolean useABIv2) {\n-        if (isHomogeneousFloatAggregate(layout, useABIv2)) {\n+    private static TypeClass classifyStructType(MemoryLayout layout, boolean useABIv2, boolean isAIX) {\n+        if (!isAIX && isHomogeneousFloatAggregate(layout, useABIv2)) {\n@@ -127,1 +127,1 @@\n-    public static TypeClass classifyLayout(MemoryLayout type, boolean useABIv2) {\n+    public static TypeClass classifyLayout(MemoryLayout type, boolean useABIv2, boolean isAIX) {\n@@ -131,1 +131,1 @@\n-            return classifyStructType(type, useABIv2);\n+            return classifyStructType(type, useABIv2, isAIX);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ppc64\/TypeClass.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023 SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.foreign.abi.ppc64.aix;\n+\n+import jdk.internal.foreign.abi.ppc64.CallArranger;\n+\n+\/**\n+ * PPC64 CallArranger specialized for AIX.\n+ *\/\n+public class AixCallArranger extends CallArranger {\n+\n+    @Override\n+    protected boolean useABIv2() {\n+        return false;\n+    }\n+\n+    @Override\n+    protected boolean isAIX() {\n+        return true;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ppc64\/aix\/AixCallArranger.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023 SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.foreign.abi.ppc64.aix;\n+\n+import jdk.internal.foreign.abi.AbstractLinker;\n+import jdk.internal.foreign.abi.LinkerOptions;\n+import jdk.internal.foreign.abi.SharedUtils;\n+import jdk.internal.foreign.abi.ppc64.CallArranger;\n+\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.ValueLayout;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodType;\n+import java.nio.ByteOrder;\n+import java.util.Map;\n+\n+public final class AixPPC64Linker extends AbstractLinker {\n+\n+    static final Map<String, MemoryLayout> CANONICAL_LAYOUTS =\n+            SharedUtils.canonicalLayouts(ValueLayout.JAVA_LONG, ValueLayout.JAVA_LONG, ValueLayout.JAVA_INT);\n+\n+    public static AixPPC64Linker getInstance() {\n+        final class Holder {\n+            private static final AixPPC64Linker INSTANCE = new AixPPC64Linker();\n+        }\n+\n+        return Holder.INSTANCE;\n+    }\n+\n+    private AixPPC64Linker() {\n+        \/\/ Ensure there is only one instance\n+    }\n+\n+    @Override\n+    protected void checkStructMember(MemoryLayout member, long offset) {\n+        \/\/ special case double members that are not the first member\n+        \/\/ see: https:\/\/www.ibm.com\/docs\/en\/xl-c-and-cpp-aix\/16.1?topic=data-using-alignment-modes\n+        \/\/ Note: It is possible to enforce 8-byte alignment by #pragma align (natural)\n+        \/\/ Therefore, we use normal checks if we are already 8-byte aligned.\n+        if ((offset % 8 != 0) && (member instanceof ValueLayout vl && vl.carrier() == double.class)) {\n+            if (vl.byteAlignment() != 4) {\n+                throw new IllegalArgumentException(\"double struct member \" + vl + \" at offset \" + offset + \" should be 4-byte aligned\");\n+            }\n+            if (vl.order() != linkerByteOrder()) {\n+                throw new IllegalArgumentException(\"double struct member \" + vl + \" at offset \" + offset + \" has an unexpected byte order\");\n+            }\n+        } else {\n+            super.checkStructMember(member, offset);\n+        }\n+    }\n+\n+    @Override\n+    protected MethodHandle arrangeDowncall(MethodType inferredMethodType, FunctionDescriptor function, LinkerOptions options) {\n+        return CallArranger.AIX.arrangeDowncall(inferredMethodType, function, options);\n+    }\n+\n+    @Override\n+    protected UpcallStubFactory arrangeUpcall(MethodType targetType, FunctionDescriptor function, LinkerOptions options) {\n+        return CallArranger.AIX.arrangeUpcall(targetType, function, options);\n+    }\n+\n+    @Override\n+    protected ByteOrder linkerByteOrder() {\n+        return ByteOrder.BIG_ENDIAN;\n+    }\n+\n+    @Override\n+    public Map<String, MemoryLayout> canonicalLayouts() {\n+        return CANONICAL_LAYOUTS;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ppc64\/aix\/AixPPC64Linker.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023 SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.foreign.abi.ppc64.linux;\n+\n+import jdk.internal.foreign.abi.ppc64.CallArranger;\n+\n+\/**\n+ * PPC64 CallArranger specialized for ABI v1.\n+ *\/\n+public class ABIv1CallArranger extends CallArranger {\n+\n+    @Override\n+    protected boolean useABIv2() {\n+        return false;\n+    }\n+\n+    @Override\n+    protected boolean isAIX() {\n+        return false;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ppc64\/linux\/ABIv1CallArranger.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023 SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.foreign.abi.ppc64.linux;\n+\n+import jdk.internal.foreign.abi.ppc64.CallArranger;\n+\n+\/**\n+ * PPC64 CallArranger specialized for ABI v2.\n+ *\/\n+public class ABIv2CallArranger extends CallArranger {\n+\n+    @Override\n+    protected boolean useABIv2() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected boolean isAIX() {\n+        return false;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ppc64\/linux\/ABIv2CallArranger.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -36,0 +36,1 @@\n+    private static Linker LINKER = Linker.nativeLinker();\n@@ -42,1 +43,1 @@\n-    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;\n+    public static final ValueLayout.OfBoolean C_BOOL = (ValueLayout.OfBoolean) LINKER.canonicalLayouts().get(\"bool\");\n@@ -46,1 +47,1 @@\n-    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;\n+    public static final ValueLayout.OfByte C_CHAR = (ValueLayout.OfByte) LINKER.canonicalLayouts().get(\"char\");\n@@ -50,1 +51,1 @@\n-    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;\n+    public static final ValueLayout.OfShort C_SHORT = (ValueLayout.OfShort) LINKER.canonicalLayouts().get(\"short\");\n@@ -54,2 +55,1 @@\n-    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;\n-\n+    public static final ValueLayout.OfInt C_INT = (ValueLayout.OfInt) LINKER.canonicalLayouts().get(\"int\");\n@@ -59,1 +59,1 @@\n-    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;\n+    public static final ValueLayout.OfLong C_LONG_LONG = (ValueLayout.OfLong) LINKER.canonicalLayouts().get(\"long\");\n@@ -63,1 +63,1 @@\n-    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;\n+    public static final ValueLayout.OfFloat C_FLOAT = (ValueLayout.OfFloat) LINKER.canonicalLayouts().get(\"float\");\n@@ -67,1 +67,2 @@\n-    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;\n+    public static final ValueLayout.OfDouble C_DOUBLE = (ValueLayout.OfDouble) LINKER.canonicalLayouts().get(\"double\");\n+\n@@ -74,2 +75,0 @@\n-    private static Linker LINKER = Linker.nativeLinker();\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CLayouts.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.foreign.Linker;\n@@ -32,1 +33,0 @@\n-\n@@ -42,0 +42,12 @@\n+    private static Linker LINKER = Linker.nativeLinker();\n+\n+    \/**\n+     * The layout for the {@code int} C type\n+     *\/\n+    private static final ValueLayout.OfInt CANONICAL_INT = (ValueLayout.OfInt) LINKER.canonicalLayouts().get(\"int\");\n+    \/**\n+     * The layout for the {@code double} C type\n+     *\/\n+    private static final ValueLayout.OfDouble CANONICAL_DOUBLE = (ValueLayout.OfDouble) LINKER.canonicalLayouts().get(\"double\");\n+\n+\n@@ -59,1 +71,1 @@\n-            return ValueLayout.JAVA_INT;\n+            return CANONICAL_INT;\n@@ -66,1 +78,1 @@\n-            return ValueLayout.JAVA_DOUBLE;\n+            return CANONICAL_DOUBLE;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/pointers\/NativeType.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"}]}