{"files":[{"patch":"@@ -51,1 +51,1 @@\n-G1EvacFailureObjectsSet::OffsetInRegion G1EvacFailureObjectsSet::cast_to_offset(oop obj) const {\n+G1EvacFailureObjectsSet::OffsetInRegion G1EvacFailureObjectsSet::to_offset(oop obj) const {\n@@ -54,1 +54,0 @@\n-  assert_is_valid_offset(offset);\n@@ -62,1 +61,1 @@\n-  _offsets(\"\", &_alloc_options, &_free_buffer_list)  {\n+  _offsets(&_alloc_options, &_free_buffer_list)  {\n@@ -70,1 +69,1 @@\n-  *e = cast_to_offset(obj);\n+  *e = to_offset(obj);\n@@ -75,1 +74,1 @@\n-class G1EvacFailureObjectsIterator {\n+class G1EvacFailureObjectsIterationHelper {\n@@ -77,2 +76,0 @@\n-  friend class G1SegmentedArray<OffsetInRegion, mtGC>;\n-  friend class G1SegmentedArrayBuffer<mtGC>;\n@@ -80,1 +77,1 @@\n-  G1EvacFailureObjectsSet* _collector;\n+  G1EvacFailureObjectsSet* _objects_set;\n@@ -101,2 +98,1 @@\n-      _collector->assert_is_valid_offset(_offset_array[i]);\n-      oop cur = _collector->from_offset(_offset_array[i]);\n+      oop cur = _objects_set->from_offset(_offset_array[i]);\n@@ -109,18 +105,0 @@\n-  \/\/ Callback of G1SegmentedArray::iterate_nodes\n-  void visit_buffer(G1SegmentedArrayBuffer<mtGC>* node, uint length) {\n-    node->copy_to(&_offset_array[_array_length]);\n-    _array_length += length;\n-\n-    \/\/ Verify elements in the node\n-    DEBUG_ONLY(node->iterate_elems(*this));\n-  }\n-\n-#ifdef ASSERT\n-  \/\/ Callback of G1SegmentedArrayBuffer::iterate_elems\n-  \/\/ Verify a single element in a segment node\n-  void visit_elem(void* elem) {\n-    uint* ptr = (uint*)elem;\n-    _collector->assert_is_valid_offset(*ptr);\n-  }\n-#endif\n-\n@@ -128,3 +106,3 @@\n-  G1EvacFailureObjectsIterator(G1EvacFailureObjectsSet* collector) :\n-    _collector(collector),\n-    _segments(&_collector->_offsets),\n+  G1EvacFailureObjectsIterationHelper(G1EvacFailureObjectsSet* collector) :\n+    _objects_set(collector),\n+    _segments(&_objects_set->_offsets),\n@@ -134,2 +112,0 @@\n-  ~G1EvacFailureObjectsIterator() { }\n-\n@@ -140,0 +116,6 @@\n+\n+  \/\/ Callback of G1SegmentedArray::iterate_nodes\n+  void do_buffer(G1SegmentedArrayBuffer<mtGC>* node, uint length) {\n+    node->copy_to(&_offset_array[_array_length]);\n+    _array_length += length;\n+  }\n@@ -145,2 +127,2 @@\n-  G1EvacFailureObjectsIterator iterator(this);\n-  iterator.iterate(closure);\n+  G1EvacFailureObjectsIterationHelper helper(this);\n+  helper.iterate(closure);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureObjectsSet.cpp","additions":17,"deletions":35,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-class G1EvacFailureObjectsIterator;\n+class G1EvacFailureObjectsIterationHelper;\n@@ -39,1 +39,1 @@\n-  friend class G1EvacFailureObjectsIterator;\n+  friend class G1EvacFailureObjectsIterationHelper;\n@@ -67,1 +67,1 @@\n-  OffsetInRegion cast_to_offset(oop obj) const;\n+  OffsetInRegion to_offset(oop obj) const;\n@@ -71,1 +71,0 @@\n-  ~G1EvacFailureObjectsSet() { }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureObjectsSet.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -87,3 +87,0 @@\n-  template<typename Visitor>\n-  void iterate_elems(Visitor& v) const;\n-\n@@ -233,2 +230,2 @@\n-  template<typename Visitor>\n-  void iterate_nodes(Visitor& v) const;\n+  template<typename BufferClosure>\n+  void iterate_nodes(BufferClosure& closure) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArray.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -58,9 +58,0 @@\n-template<MEMFLAGS flag>\n-template<typename Visitor>\n-void G1SegmentedArrayBuffer<flag>::iterate_elems(Visitor& v) const {\n-  for (uint i = 0; i < length(); i++) {\n-    void* ptr = _buffer + i * _elem_size;\n-    v.visit_elem(ptr);\n-  }\n-}\n-\n@@ -251,1 +242,1 @@\n-class LengthVisitor {\n+class LengthClosure {\n@@ -254,2 +245,2 @@\n-  LengthVisitor() : _total(0) {}\n-  void visit_buffer(G1SegmentedArrayBuffer<flag>* node, uint limit) {\n+  LengthClosure() : _total(0) {}\n+  void do_buffer(G1SegmentedArrayBuffer<flag>* node, uint limit) {\n@@ -265,3 +256,3 @@\n-  LengthVisitor<flag> v;\n-  iterate_nodes(v);\n-  return v.length();\n+  LengthClosure<flag> closure;\n+  iterate_nodes(closure);\n+  return closure.length();\n@@ -272,2 +263,2 @@\n-template <typename Visitor>\n-void G1SegmentedArray<Elem, flag>::iterate_nodes(Visitor& v) const {\n+template <typename BufferClosure>\n+void G1SegmentedArray<Elem, flag>::iterate_nodes(BufferClosure& cloure) const {\n@@ -280,1 +271,1 @@\n-    v.visit_buffer(cur, cur->length());\n+    cloure.do_buffer(cur, cur->length());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArray.inline.hpp","additions":9,"deletions":18,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -109,4 +109,0 @@\n-void HeapRegion::record_evac_failure_obj(oop obj) {\n-  _evac_failure_objs.record(obj);\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -560,2 +560,1 @@\n-  \/\/ Records evac failure objs during evaucation, this will help speed up iteration\n-  \/\/ of these objs later in *remove self forward* phase of post evacuation.\n+  \/\/ Record an object that failed evacuation within this region.\n@@ -563,1 +562,2 @@\n-  \/\/ Iterates evac failure objs which are recorded during evcauation.\n+  \/\/ Applies the given closure to all previously recorded objects\n+  \/\/ that failed evacuation in ascending address order.\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -454,0 +454,4 @@\n+inline void HeapRegion::record_evac_failure_obj(oop obj) {\n+  _evac_failure_objs.record(obj);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.inline.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}