{"files":[{"patch":"@@ -83,1 +83,1 @@\n-  _max_offset(1u << HeapRegion::LogOfHRGrainBytes-LogHeapWordSize),\n+  _max_offset(1u << (HeapRegion::LogOfHRGrainBytes-LogHeapWordSize)),\n@@ -86,3 +86,3 @@\n-  _nodes_array(HeapRegion::GrainWords \/ NODE_LENGTH + 1),\n-  _offset_array(NULL),\n-  _objs_num(0u) {\n+  _nodes_array(HeapRegion::GrainWords \/ NODE_LENGTH + 2),\n+  _offset_array(NULL) {\n+  _objs_num = 0;\n@@ -93,1 +93,1 @@\n-  clear_array();\n+  assert(_offset_array == NULL, \"must be\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacuationFailureObjsInHR.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+      assert(node != NULL, \"must be\");\n@@ -64,1 +65,1 @@\n-      delete(node);\n+      delete node;\n@@ -97,1 +98,3 @@\n-      return high(n) >> 32;\n+      uint32_t hi = high(n) >> 32;\n+      assert(hi < _max_nodes_length, \"must be\");\n+      return hi;\n@@ -131,0 +134,1 @@\n+      assert(_nodes != NULL, \"must be\");\n@@ -185,0 +189,3 @@\n+        if (limit == 0) {\n+          break;\n+        }\n@@ -191,3 +198,10 @@\n-      for (uint32_t hi = 0; hi <= node_index(pos); hi++) {\n-        NODE_XXX::free_node(_nodes[hi]);\n-        Atomic::store(&_nodes[hi], (NODE_XXX *)NULL);\n+      uint32_t hi = node_index(pos);\n+      uint32_t lo = elem_index(pos);\n+      for (uint32_t i = 0; i <= hi; i++) {\n+        NODE_XXX* node = Atomic::load(&_nodes[i]);\n+        assert(node != NULL || ((i == hi) && (lo == 0)), \"must be\");\n+        if (node == NULL) {\n+          break;\n+        }\n+        NODE_XXX::free_node(node);\n+        Atomic::store(&_nodes[i], (NODE_XXX *)NULL);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacuationFailureObjsInHR.hpp","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"}]}