{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import java.util.regex.Pattern;\n@@ -1353,12 +1354,12 @@\n-     \/**\n-      * Convert a \"#FFFFFF\" hex string to a Color.\n-      * If the color specification is bad, an attempt\n-      * will be made to fix it up.\n-      *\/\n-    static final Color hexToColor(String value) {\n-        String digits;\n-        int n = value.length();\n-        if (value.startsWith(\"#\")) {\n-            digits = value.substring(1, Math.min(value.length(), 7));\n-        } else {\n-            digits = value;\n+    private static final Pattern hex = Pattern.compile(\"\\\\p{XDigit}+\");\n+\n+    \/**\n+     * Convert a \"#FFF\", \"#FFFF\", \"#FFFFFF\" or \"#FFFFFFFF\" hex string to a Color.\n+     * If the color specification is bad, an attempt\n+     * will be made to fix it up.\n+     *\/\n+    static final Color hexToColor(String digits) {\n+        int n = digits.length();\n+        if (digits.startsWith(\"#\")) {\n+            digits = digits.substring(1, Math.min(n, 9));\n+            n--;\n@@ -1366,0 +1367,15 @@\n+        \/\/ CSS Color level 4\n+        \/\/ - defines color hex code as #[2 digits Red][2 digits Green][2 digits Blue][2 digits Alpha]. With digit 0 ... f.\n+        \/\/ - allows, webpage passes 3, 4, 6 or 8 digit color code.\n+        \/\/   - 3 digits #[R][G][B] ........ represents #[RR][GG][BB]FF\n+        \/\/   - 4 digits #[R][G][B][A] ..... represents #[RR][GG][BB][AA]\n+        \/\/   - 6 digits #[RR][GG][BB] ..... represents #[RR][GG][BB]FF\n+        \/\/   - 8 digits #[RR][GG][BB][AA] . represents #[RR][GG][BB][AA]\n+        \/\/\n+        \/\/ Becareful ! In java.awt.Color hex #[2 digits Alpha][2 digits Red][2 digits Green][2 digits Blue]\n+        \/\/ Since this method is defined in CSS.java, it must only take in charge CSS Color Level 4 notations.\n+        \/\/\n+        \/\/ According notes below the current OpenJDK implementation is\n+        \/\/ - 3 digits #[R][G][B]    represents #[RR][GG][BB]FF\n+        \/\/ - 6 digits #[R][G][B]    represents #[RR][GG][BB]FF\n+        \/\/\n@@ -1373,1 +1389,6 @@\n-        if (digits.length() == 3) {\n+        if (n == 3 && hex.matcher(digits).matches()) {\n+            final String r = digits.substring(0, 1);\n+            final String g = digits.substring(1, 2);\n+            final String b = digits.substring(2, 3);\n+            digits = String.format(\"%s%s%s%s%s%sff\", r, r, g, g, b, b);\n+        } else if (n == 4 && hex.matcher(digits).matches()) {\n@@ -1377,1 +1398,6 @@\n-            digits = String.format(\"%s%s%s%s%s%s\", r, r, g, g, b, b);\n+            final String a = digits.substring(3, 4);\n+            digits = String.format(\"%s%s%s%s%s%s%s%s\", r, r, g, g, b, b, a, a);\n+        } else if (n == 6 && hex.matcher(digits).matches()) {\n+            digits = String.format(\"%sff\", digits);\n+        } else if (n != 8 || !hex.matcher(digits).matches()) {\n+            return null;\n@@ -1379,2 +1405,0 @@\n-        String hstr = \"0x\" + digits;\n-        Color c;\n@@ -1382,1 +1406,2 @@\n-            c = Color.decode(hstr);\n+            int l = Integer.parseUnsignedInt(digits, 16);\n+            return new Color((l >> 24) & 0xFF, (l >> 16) & 0xFF, (l >> 8) & 0xFF, l & 0xFF);\n@@ -1384,1 +1409,1 @@\n-            c = null;\n+            return null;\n@@ -1386,2 +1411,1 @@\n-         return c;\n-     }\n+    }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/CSS.java","additions":45,"deletions":21,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8293776\n+ * @summary Adds CSS 4 and 8 digits hex coded Color\n+ * @run main Hex3468DigitsColor\n+ *\/\n+\n+import java.awt.Color;\n+import javax.swing.text.html.StyleSheet;\n+\n+public class Hex3468DigitsColor {\n+\n+    public static void main(String[] args) {\n+        StringBuilder result = new StringBuilder();\n+        boolean passed = true;\n+        StyleSheet styleSheet = new StyleSheet();\n+        \/\/ #rgba Should be interpreted as #rrggbbaa according CSS Color Level 4.\n+        \/\/ Then expecting r=255 g=17 b=34 a=170\n+        Color color = styleSheet.stringToColor(\"#f12a\");\n+        int red = color.getRed();\n+        int green = color.getGreen();\n+        int blue = color.getBlue();\n+        int alpha = color.getAlpha();\n+        result.append(\"  Test for #f00a\");\n+        if (red != 255) {\n+            result.append(\", expected r=255 but r=%s found\".formatted(red));\n+            passed = false;\n+        }\n+        if (green != 17) {\n+            result.append(\", expected g=17 but g=%s found\".formatted(green));\n+            passed = false;\n+        }\n+        if (blue != 34) {\n+            result.append(\", expected b=34 but b=%s found\".formatted(blue));\n+            passed = false;\n+        }\n+        if (alpha != 170) {\n+            result.append(\", expected a=170 but a=%s found\".formatted(alpha));\n+            passed = false;\n+        }\n+        \/\/ In #rrggbbaa last two digits should be interpreted as Alpha value according CSS Color Level 4.\n+        \/\/ Then expecting r=255 g=17 b=34 a=170\n+        color = styleSheet.stringToColor(\"#ff1122aa\");\n+        alpha = color.getAlpha();\n+        result.append(\"\\n  Test for #ff1122aa\");\n+        if (red != 255) {\n+            result.append(\", expected r=255 but r=%s found\".formatted(red));\n+            passed = false;\n+        }\n+        if (green != 17) {\n+            result.append(\", expected g=17 but g=%s found\".formatted(green));\n+            passed = false;\n+        }\n+        if (blue != 34) {\n+            result.append(\", expected b=34 but b=%s found\".formatted(blue));\n+            passed = false;\n+        }\n+        if (alpha != 170) {\n+            result.append(\", expected a=170 but a=%s found\".formatted(alpha));\n+            passed = false;\n+        }\n+        if (!passed) {\n+            result.insert(0, \"Failed :\");\n+            throw new RuntimeException(result.toString());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/CSS\/Hex3468DigitsColor.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"}]}