{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import java.util.regex.Pattern;\n@@ -1353,25 +1354,16 @@\n-     \/**\n-      * Convert a \"#FFFFFF\" hex string to a Color.\n-      * If the color specification is bad, an attempt\n-      * will be made to fix it up.\n-      *\/\n-    static final Color hexToColor(String value) {\n-        String digits;\n-        int n = value.length();\n-        if (value.startsWith(\"#\")) {\n-            digits = value.substring(1, Math.min(value.length(), 7));\n-        } else {\n-            digits = value;\n-        }\n-        \/\/ Some webpage passes 3 digit color code as in #fff which is\n-        \/\/ decoded as #000FFF resulting in blue background.\n-        \/\/ As per https:\/\/www.w3.org\/TR\/CSS1\/#color-units,\n-        \/\/ The three-digit RGB notation (#rgb) is converted into six-digit form\n-        \/\/ (#rrggbb) by replicating digits, not by adding zeros.\n-        \/\/ This makes sure that white (#ffffff) can be specified with the short notation\n-        \/\/ (#fff) and removes any dependencies on the color depth of the display.\n-        if (digits.length() == 3) {\n-            final String r = digits.substring(0, 1);\n-            final String g = digits.substring(1, 2);\n-            final String b = digits.substring(2, 3);\n-            digits = String.format(\"%s%s%s%s%s%s\", r, r, g, g, b, b);\n+    \/**\n+     * Convert a \"#FFF\", \"#FFFF\", \"#FFFFFF\" or \"#FFFFFFFF\" hex string to a Color.\n+     * If the color specification is bad, an attempt will be made to fix it up.\n+     *\/\n+    static final Color hexToColor(String digits) {\n+        \/\/ CSS Color level 4 allows webpage passes 3, 4, 6 or 8 digit color codes.\n+        \/\/   - 3 digits #[R][G][B] ........ represents #[RR][GG][BB]FF\n+        \/\/   - 4 digits #[R][G][B][A] ..... represents #[RR][GG][BB][AA]\n+        \/\/   - 6 digits #[RR][GG][BB] ..... represents #[RR][GG][BB]FF\n+        \/\/   - 8 digits #[RR][GG][BB][AA] . represents #[RR][GG][BB][AA]\n+        final byte[] iseq = digits.startsWith(\"#\") ?\n+                                 iseqmap.get(Integer.valueOf(digits.length())):\n+                                 iseqmap.get(Integer.valueOf(-digits.length()));\n+        if (iseq == null) {\n+            \/\/ Rejects string argument with a wrong number length.\n+            return null;\n@@ -1379,6 +1371,10 @@\n-        String hstr = \"0x\" + digits;\n-        Color c;\n-        try {\n-            c = Color.decode(hstr);\n-        } catch (NumberFormatException nfe) {\n-            c = null;\n+        \/\/ Only 3, 4, 6 and 8 digits notations.\n+        \/\/ Parses the string argument and build color value.\n+        int dv;\n+        int value = 0;\n+        for (byte i : iseq) {\n+            if ((dv = -i) != 15 && (dv = Character.digit(digits.charAt(i), 16)) < 0) {\n+                \/\/ Rejects string argument with not a valid digit in the radix-16.\n+                return null;\n+            }\n+            value = dv | value << 4;\n@@ -1386,2 +1382,17 @@\n-         return c;\n-     }\n+        return new Color(value, true);\n+    }\n+\n+    \/\/ Map of Index Sequences. Index -15 means, use the default value 15.\n+    private static final Map<Integer, byte[]> iseqmap =\n+        Map.ofEntries(\n+            \/\/ Positive key, for # prefixed string, is associated with index from 1 to 8.\n+            \/\/ Negative key, for not # prefixed string, is associated with index from 0 to 7.\n+            Map.entry(Integer.valueOf(4), new byte[]{-15, -15, 1, 1, 2, 2, 3, 3}),\n+            Map.entry(Integer.valueOf(5), new byte[]{4, 4, 1, 1, 2, 2, 3, 3}),\n+            Map.entry(Integer.valueOf(7), new byte[]{-15, -15, 1, 2, 3, 4, 5, 6}),\n+            Map.entry(Integer.valueOf(9), new byte[]{7, 8, 1, 2, 3, 4, 6, 6}),\n+            Map.entry(Integer.valueOf(-3), new byte[]{-15, -15, 0, 0, 1, 1, 2, 2}),\n+            Map.entry(Integer.valueOf(-4), new byte[]{3, 3, 0, 0, 1, 1, 2, 2}),\n+            Map.entry(Integer.valueOf(-6), new byte[]{-15, -15, 0, 1, 2, 3, 4, 5}),\n+            Map.entry(Integer.valueOf(-8), new byte[]{6, 7, 0, 1, 2, 3, 4, 5})\n+        );\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/CSS.java","additions":45,"deletions":34,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8293776\n+ * @summary Adds CSS 4 and 8 digits hex coded Color\n+ * @run main Hex3468DigitsColor\n+ *\/\n+\n+import java.awt.Color;\n+import javax.swing.text.html.StyleSheet;\n+\n+public class Hex3468DigitsColor {\n+\n+    public static void main(String[] args) {\n+        StringBuilder result = new StringBuilder();\n+        boolean passed = true;\n+        StyleSheet styleSheet = new StyleSheet();\n+\n+        \/\/ #rgba should be interpreted as #rrggbbaa according CSS Color Level 4.\n+        \/\/ Then expecting 0xaaff1122 from Color.\n+        Color color = styleSheet.stringToColor(\"#f12a\");\n+        result.append(\"  Test for #f12a\");\n+        if (0xaaff1122 != color.getRGB()) {\n+            passed = false;\n+        }\n+\n+        \/\/ In #rrggbbaa, last two digits should be interpreted as Alpha value according CSS Color Level 4.\n+        \/\/ Then expecting 0xaaff1122 from Color.\n+        color = styleSheet.stringToColor(\"#ff1122aa\");\n+        result.append(\" and Test for #ff1122aa\");\n+        if (0xaaff1122 != color.getRGB()) {\n+            passed = false;\n+        }\n+\n+        if (!passed) {\n+            result.insert(0, \"Failed :\");\n+            throw new RuntimeException(result.toString());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/CSS\/Hex3468DigitsColor.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"}]}