{"files":[{"patch":"@@ -1354,2 +1354,0 @@\n-    private static final Pattern hex = Pattern.compile(\"\\\\p{XDigit}+\");\n-\n@@ -1358,2 +1356,1 @@\n-     * If the color specification is bad, an attempt\n-     * will be made to fix it up.\n+     * If the color specification is bad, an attempt will be made to fix it up.\n@@ -1362,8 +1359,1 @@\n-        int n = digits.length();\n-        if (digits.startsWith(\"#\")) {\n-            digits = digits.substring(1, Math.min(n, 9));\n-            n--;\n-        }\n-        \/\/ CSS Color level 4\n-        \/\/ - defines color hex code as #[2 digits Red][2 digits Green][2 digits Blue][2 digits Alpha]. With digit 0 ... f.\n-        \/\/ - allows, webpage passes 3, 4, 6 or 8 digit color code.\n+        \/\/ CSS Color level 4 allows webpage passes 3, 4, 6 or 8 digit color codes.\n@@ -1374,29 +1364,5 @@\n-        \/\/\n-        \/\/ Be careful ! In java.awt.Color hex #[2 digits Alpha][2 digits Red][2 digits Green][2 digits Blue]\n-        \/\/ Since this method is defined in CSS.java, it must only take in charge CSS Color Level 4 notations.\n-        \/\/\n-        \/\/ According notes below the current OpenJDK implementation is\n-        \/\/ - 3 digits #[R][G][B] .......... represents #[RR][GG][BB]FF\n-        \/\/ - 6 digits #[R][G][B] .......... represents #[RR][GG][BB]FF\n-        \/\/\n-        \/\/ Some webpages pass 3 digit color code as in #fff which is\n-        \/\/ decoded as #000FFF resulting in blue background.\n-        \/\/ As per https:\/\/www.w3.org\/TR\/CSS1\/#color-units,\n-        \/\/ The three-digit RGB notation (#rgb) is converted into six-digit form\n-        \/\/ (#rrggbb) by replicating digits, not by adding zeros.\n-        \/\/ This makes sure that white (#ffffff) can be specified with the short notation\n-        \/\/ (#fff) and removes any dependencies on the color depth of the display.\n-        if (n == 3 && hex.matcher(digits).matches()) {\n-            final char r = digits.charAt(0);\n-            final char g = digits.charAt(1);\n-            final char b = digits.charAt(2);\n-            digits = String.format(\"%1$s%1$s%2$s%2$s%3$s%3$sff\", r, g, b);\n-        } else if (n == 4 && hex.matcher(digits).matches()) {\n-            final char r = digits.charAt(0);\n-            final char g = digits.charAt(1);\n-            final char b = digits.charAt(2);\n-            final char a = digits.charAt(3);\n-            digits = String.format(\"%1$s%1$s%2$s%2$s%3$s%3$s%4$s%4$s\", r, g, b, a);\n-        } else if (n == 6 && hex.matcher(digits).matches()) {\n-            digits += \"ff\";\n-        } else if (n != 8 || !hex.matcher(digits).matches()) {\n+        final byte[] iseq = digits.startsWith(\"#\") ?\n+                                 iseqmap.get(Integer.valueOf(digits.length())):\n+                                 iseqmap.get(Integer.valueOf(-digits.length()));\n+        if (iseq == null) {\n+            \/\/ Rejects string argument with a wrong number length.\n@@ -1405,5 +1371,10 @@\n-        try {\n-            int i = Integer.parseUnsignedInt(digits, 16);\n-            return new Color((i >> 24) & 0xFF, (i >> 16) & 0xFF, (i >> 8) & 0xFF, i & 0xFF);\n-        } catch (NumberFormatException nfe) {\n-            return null;\n+        \/\/ Only 3, 4, 6 and 8 digits notations.\n+        \/\/ Parses the string argument and build color value.\n+        int dv;\n+        int value = 0;\n+        for (byte i : iseq) {\n+            if ((dv = -i) != 15 && (dv = Character.digit(digits.charAt(i), 16)) < 0) {\n+                \/\/ Rejects string argument with not a valid digit in the radix-16.\n+                return null;\n+            }\n+            value = dv | value << 4;\n@@ -1411,0 +1382,1 @@\n+        return new Color(value, true);\n@@ -1413,0 +1385,15 @@\n+    \/\/ Map of Index Sequences. Index -15 means, use the default value 15.\n+    private static final Map<Integer, byte[]> iseqmap =\n+        Map.ofEntries(\n+            \/\/ Positive key, for # prefixed string, is associated with index from 1 to 8.\n+            \/\/ Negative key, for not # prefixed string, is associated with index from 0 to 7.\n+            Map.entry(Integer.valueOf(4), new byte[]{-15, -15, 1, 1, 2, 2, 3, 3}),\n+            Map.entry(Integer.valueOf(5), new byte[]{4, 4, 1, 1, 2, 2, 3, 3}),\n+            Map.entry(Integer.valueOf(7), new byte[]{-15, -15, 1, 2, 3, 4, 5, 6}),\n+            Map.entry(Integer.valueOf(9), new byte[]{7, 8, 1, 2, 3, 4, 6, 6}),\n+            Map.entry(Integer.valueOf(-3), new byte[]{-15, -15, 0, 0, 1, 1, 2, 2}),\n+            Map.entry(Integer.valueOf(-4), new byte[]{3, 3, 0, 0, 1, 1, 2, 2}),\n+            Map.entry(Integer.valueOf(-6), new byte[]{-15, -15, 0, 1, 2, 3, 4, 5}),\n+            Map.entry(Integer.valueOf(-8), new byte[]{6, 7, 0, 1, 2, 3, 4, 5})\n+        );\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/CSS.java","additions":33,"deletions":46,"binary":false,"changes":79,"status":"modified"}]}