{"files":[{"patch":"@@ -503,1 +503,1 @@\n-void ClassLoader::setup_bootstrap_search_path(TRAPS) {\n+void ClassLoader::setup_bootstrap_search_path(Thread* current) {\n@@ -512,1 +512,1 @@\n-  setup_bootstrap_search_path_impl(sys_class_path, CHECK);\n+  setup_bootstrap_search_path_impl(current, sys_class_path);\n@@ -516,1 +516,1 @@\n-void ClassLoader::setup_app_search_path(const char *class_path, TRAPS) {\n+void ClassLoader::setup_app_search_path(Thread* current, const char *class_path) {\n@@ -519,1 +519,1 @@\n-  ResourceMark rm;\n+  ResourceMark rm(current);\n@@ -524,1 +524,1 @@\n-    update_class_path_entry_list(path, false, false, false, CHECK);\n+    update_class_path_entry_list(current, path, false, false, false);\n@@ -544,1 +544,1 @@\n-void ClassLoader::setup_module_search_path(const char* path, TRAPS) {\n+void ClassLoader::setup_module_search_path(Thread* current, const char* path) {\n@@ -554,4 +554,4 @@\n-  new_entry = create_class_path_entry(path, &st, true \/* throw_exception *\/,\n-                                      false \/*is_boot_append *\/, false \/* from_class_path_attr *\/, CHECK);\n-  if (new_entry == NULL) {\n-    return;\n+  new_entry = create_class_path_entry(current, path, &st,\n+                                      false \/*is_boot_append *\/, false \/* from_class_path_attr *\/);\n+  if (new_entry != NULL) {\n+    add_to_module_path_entries(path, new_entry);\n@@ -559,3 +559,0 @@\n-\n-  add_to_module_path_entries(path, new_entry);\n-  return;\n@@ -598,1 +595,1 @@\n-        ClassPathEntry* new_entry = create_class_path_entry(path, &st, false, false, false, CHECK);\n+        ClassPathEntry* new_entry = create_class_path_entry(THREAD, path, &st, false, false);\n@@ -630,2 +627,2 @@\n-void ClassLoader::setup_bootstrap_search_path_impl(const char *class_path, TRAPS) {\n-  ResourceMark rm(THREAD);\n+void ClassLoader::setup_bootstrap_search_path_impl(Thread* current, const char *class_path) {\n+  ResourceMark rm(current);\n@@ -655,1 +652,1 @@\n-        ClassPathEntry* new_entry = create_class_path_entry(path, &st, false, false, false, CHECK);\n+        ClassPathEntry* new_entry = create_class_path_entry(current, path, &st, false, false);\n@@ -672,1 +669,1 @@\n-      update_class_path_entry_list(path, false, true, false, CHECK);\n+      update_class_path_entry_list(current, path, false, true, false);\n@@ -679,1 +676,1 @@\n-void ClassLoader::add_to_exploded_build_list(Symbol* module_sym, TRAPS) {\n+void ClassLoader::add_to_exploded_build_list(Thread* current, Symbol* module_sym) {\n@@ -684,1 +681,1 @@\n-  ResourceMark rm(THREAD);\n+  ResourceMark rm(current);\n@@ -696,1 +693,1 @@\n-    ClassPathEntry* new_entry = create_class_path_entry(path, &st, false, false, false, CHECK);\n+    ClassPathEntry* new_entry = create_class_path_entry(current, path, &st, false, false);\n@@ -706,1 +703,1 @@\n-        MutexLocker ml(THREAD, Module_lock);\n+        MutexLocker ml(current, Module_lock);\n@@ -722,2 +719,2 @@\n-ClassPathEntry* ClassLoader::create_class_path_entry(const char *path, const struct stat* st,\n-                                                     bool throw_exception,\n+ClassPathEntry* ClassLoader::create_class_path_entry(Thread* current,\n+                                                     const char *path, const struct stat* st,\n@@ -725,3 +722,2 @@\n-                                                     bool from_class_path_attr,\n-                                                     TRAPS) {\n-  JavaThread* thread = THREAD->as_Java_thread();\n+                                                     bool from_class_path_attr) {\n+  JavaThread* thread = current->as_Java_thread();\n@@ -735,6 +731,1 @@\n-      \/\/ This matches the classic VM\n-      if (throw_exception) {\n-        THROW_MSG_(vmSymbols::java_io_IOException(), \"Bad pathname\", NULL);\n-      } else {\n-        return NULL;\n-      }\n+      return NULL;\n@@ -752,15 +743,1 @@\n-        char *msg;\n-        if (error_msg == NULL) {\n-          msg = NEW_RESOURCE_ARRAY_IN_THREAD(thread, char, strlen(path) + 128); ;\n-          jio_snprintf(msg, strlen(path) + 127, \"error in opening JAR file %s\", path);\n-        } else {\n-          int len = (int)(strlen(path) + strlen(error_msg) + 128);\n-          msg = NEW_RESOURCE_ARRAY_IN_THREAD(thread, char, len); ;\n-          jio_snprintf(msg, len - 1, \"error in opening JAR file <%s> %s\", error_msg, path);\n-        }\n-        \/\/ Don't complain about bad jar files added via -Xbootclasspath\/a:.\n-        if (throw_exception && is_init_completed()) {\n-          THROW_MSG_(vmSymbols::java_lang_ClassNotFoundException(), msg, NULL);\n-        } else {\n-          return NULL;\n-        }\n+        return NULL;\n@@ -837,1 +814,2 @@\n-void ClassLoader::add_to_app_classpath_entries(const char* path,\n+void ClassLoader::add_to_app_classpath_entries(Thread* current,\n+                                               const char* path,\n@@ -839,2 +817,1 @@\n-                                               bool check_for_duplicates,\n-                                               TRAPS) {\n+                                               bool check_for_duplicates) {\n@@ -864,1 +841,1 @@\n-    ClassLoaderExt::process_jar_manifest(entry, check_for_duplicates, CHECK);\n+    ClassLoaderExt::process_jar_manifest(current, entry, check_for_duplicates);\n@@ -870,1 +847,2 @@\n-bool ClassLoader::update_class_path_entry_list(const char *path,\n+bool ClassLoader::update_class_path_entry_list(Thread* current,\n+                                               const char *path,\n@@ -873,2 +851,1 @@\n-                                               bool from_class_path_attr,\n-                                               TRAPS) {\n+                                               bool from_class_path_attr) {\n@@ -879,1 +856,1 @@\n-    new_entry = create_class_path_entry(path, &st, \/*throw_exception=*\/true, is_boot_append, from_class_path_attr, CHECK_false);\n+    new_entry = create_class_path_entry(current, path, &st, is_boot_append, from_class_path_attr);\n@@ -889,1 +866,1 @@\n-      add_to_app_classpath_entries(path, new_entry, check_for_duplicates, CHECK_false);\n+      add_to_app_classpath_entries(current, path, new_entry, check_for_duplicates);\n@@ -1119,1 +1096,2 @@\n-ClassFileStream* ClassLoader::search_module_entries(const GrowableArray<ModuleClassPathList*>* const module_list,\n+ClassFileStream* ClassLoader::search_module_entries(Thread* current,\n+                                                    const GrowableArray<ModuleClassPathList*>* const module_list,\n@@ -1121,2 +1099,1 @@\n-                                                    const char* const file_name,\n-                                                    TRAPS) {\n+                                                    const char* const file_name) {\n@@ -1149,1 +1126,1 @@\n-      MutexLocker ml(THREAD, Module_lock);\n+      MutexLocker ml(current, Module_lock);\n@@ -1158,1 +1135,1 @@\n-    stream = e->open_stream(THREAD, file_name);\n+    stream = e->open_stream(current, file_name);\n@@ -1221,1 +1198,1 @@\n-      stream = search_module_entries(_patch_mod_entries, class_name, file_name, CHECK_NULL);\n+      stream = search_module_entries(THREAD, _patch_mod_entries, class_name, file_name);\n@@ -1233,1 +1210,1 @@\n-      stream = search_module_entries(_exploded_entries, class_name, file_name, CHECK_NULL);\n+      stream = search_module_entries(THREAD, _exploded_entries, class_name, file_name);\n@@ -1444,1 +1421,1 @@\n-  setup_bootstrap_search_path(CHECK);\n+  setup_bootstrap_search_path(THREAD);\n@@ -1481,1 +1458,1 @@\n-void ClassLoader::initialize_shared_path(TRAPS) {\n+void ClassLoader::initialize_shared_path(Thread* current) {\n@@ -1483,1 +1460,1 @@\n-    ClassLoaderExt::setup_search_paths(CHECK);\n+    ClassLoaderExt::setup_search_paths(current);\n@@ -1489,1 +1466,1 @@\n-    ClassLoaderExt::setup_module_paths(CHECK);\n+    ClassLoaderExt::setup_module_paths(THREAD);\n@@ -1554,1 +1531,1 @@\n-void ClassLoader::classLoader_init2(TRAPS) {\n+void ClassLoader::classLoader_init2(Thread* current) {\n@@ -1579,1 +1556,1 @@\n-    add_to_exploded_build_list(vmSymbols::java_base(), CHECK);\n+    add_to_exploded_build_list(current, vmSymbols::java_base());\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":47,"deletions":70,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -225,3 +225,4 @@\n-  CDS_ONLY(static void setup_app_search_path(const char* class_path, TRAPS);)\n-  CDS_ONLY(static void setup_module_search_path(const char* path, TRAPS);)\n-  static void add_to_app_classpath_entries(const char* path,\n+  CDS_ONLY(static void setup_app_search_path(Thread* current, const char* class_path);)\n+  CDS_ONLY(static void setup_module_search_path(Thread* current, const char* path);)\n+  static void add_to_app_classpath_entries(Thread* current,\n+                                           const char* path,\n@@ -229,2 +230,1 @@\n-                                           bool check_for_duplicates,\n-                                           TRAPS);\n+                                           bool check_for_duplicates);\n@@ -244,2 +244,2 @@\n-  static void setup_bootstrap_search_path(TRAPS);\n-  static void setup_bootstrap_search_path_impl(const char *class_path, TRAPS);\n+  static void setup_bootstrap_search_path(Thread* current);\n+  static void setup_bootstrap_search_path_impl(Thread* current, const char *class_path);\n@@ -261,2 +261,2 @@\n-  static ClassPathEntry* create_class_path_entry(const char *path, const struct stat* st,\n-                                                 bool throw_exception,\n+  static ClassPathEntry* create_class_path_entry(Thread* current,\n+                                                 const char *path, const struct stat* st,\n@@ -264,1 +264,1 @@\n-                                                 bool from_class_path_attr, TRAPS);\n+                                                 bool from_class_path_attr);\n@@ -273,1 +273,2 @@\n-  static bool update_class_path_entry_list(const char *path,\n+  static bool update_class_path_entry_list(Thread* current,\n+                                           const char *path,\n@@ -276,2 +277,1 @@\n-                                           bool from_class_path_attr,\n-                                           TRAPS);\n+                                           bool from_class_path_attr);\n@@ -314,1 +314,1 @@\n-  static void add_to_exploded_build_list(Symbol* module_name, TRAPS);\n+  static void add_to_exploded_build_list(Thread* current, Symbol* module_name);\n@@ -317,1 +317,2 @@\n-  static ClassFileStream* search_module_entries(const GrowableArray<ModuleClassPathList*>* const module_list,\n+  static ClassFileStream* search_module_entries(Thread* current,\n+                                                const GrowableArray<ModuleClassPathList*>* const module_list,\n@@ -319,1 +320,1 @@\n-                                                const char* const file_name, TRAPS);\n+                                                const char* const file_name);\n@@ -340,2 +341,2 @@\n-  static void classLoader_init2(TRAPS);\n-  CDS_ONLY(static void initialize_shared_path(TRAPS);)\n+  static void classLoader_init2(Thread* current);\n+  CDS_ONLY(static void initialize_shared_path(Thread* current);)\n","filename":"src\/hotspot\/share\/classfile\/classLoader.hpp","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-void ClassLoaderExt::setup_app_search_path(TRAPS) {\n+void ClassLoaderExt::setup_app_search_path(Thread* current) {\n@@ -80,1 +80,1 @@\n-    ClassLoader::setup_app_search_path(app_class_path, CHECK);\n+    ClassLoader::setup_app_search_path(current, app_class_path);\n@@ -84,2 +84,2 @@\n-void ClassLoaderExt::process_module_table(ModuleEntryTable* met, TRAPS) {\n-  ResourceMark rm(THREAD);\n+void ClassLoaderExt::process_module_table(Thread* current, ModuleEntryTable* met) {\n+  ResourceMark rm(current);\n@@ -91,1 +91,1 @@\n-        ClassLoader::setup_module_search_path(path, CHECK);\n+        ClassLoader::setup_module_search_path(current, path);\n@@ -97,1 +97,1 @@\n-void ClassLoaderExt::setup_module_paths(TRAPS) {\n+void ClassLoaderExt::setup_module_paths(Thread* current) {\n@@ -101,1 +101,1 @@\n-  Handle system_class_loader (THREAD, SystemDictionary::java_system_loader());\n+  Handle system_class_loader (current, SystemDictionary::java_system_loader());\n@@ -103,1 +103,1 @@\n-  process_module_table(met, CHECK);\n+  process_module_table(current, met);\n@@ -166,3 +166,3 @@\n-void ClassLoaderExt::process_jar_manifest(ClassPathEntry* entry,\n-                                          bool check_for_duplicates, TRAPS) {\n-  ResourceMark rm(THREAD);\n+void ClassLoaderExt::process_jar_manifest(Thread* current, ClassPathEntry* entry,\n+                                          bool check_for_duplicates) {\n+  ResourceMark rm(current);\n@@ -170,1 +170,1 @@\n-  char* manifest = read_manifest(THREAD, entry, &manifest_size);\n+  char* manifest = read_manifest(current, entry, &manifest_size);\n@@ -210,1 +210,1 @@\n-        ResourceMark rm(THREAD);\n+        ResourceMark rm(current);\n@@ -215,2 +215,1 @@\n-        bool status = ClassLoader::update_class_path_entry_list(libname, true, false, true \/* from_class_path_attr *\/, CHECK);\n-        if (status) {\n+        if (ClassLoader::update_class_path_entry_list(current, libname, true, false, true \/* from_class_path_attr *\/)) {\n@@ -229,2 +228,2 @@\n-void ClassLoaderExt::setup_search_paths(TRAPS) {\n-  ClassLoaderExt::setup_app_search_path(CHECK);\n+void ClassLoaderExt::setup_search_paths(Thread* current) {\n+  ClassLoaderExt::setup_app_search_path(current);\n@@ -330,4 +329,1 @@\n-  ExceptionMark em(current);\n-  Thread* THREAD = current; \/\/ For exception macros.\n-  new_entry = create_class_path_entry(path, &st, \/*throw_exception=*\/false,\n-                                      false, false, CATCH); \/\/ will never throw\n+  new_entry = create_class_path_entry(current, path, &st, false, false);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":17,"deletions":21,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n-  static void setup_app_search_path(TRAPS); \/\/ Only when -Xshare:dump\n-  static void process_module_table(ModuleEntryTable* met, TRAPS);\n+  static void setup_app_search_path(Thread* current); \/\/ Only when -Xshare:dump\n+  static void process_module_table(Thread* current, ModuleEntryTable* met);\n@@ -64,1 +64,1 @@\n-  static void process_jar_manifest(ClassPathEntry* entry, bool check_for_duplicates, TRAPS);\n+  static void process_jar_manifest(Thread* current, ClassPathEntry* entry, bool check_for_duplicates);\n@@ -69,2 +69,2 @@\n-  static void setup_search_paths(TRAPS);\n-  static void setup_module_paths(TRAPS);\n+  static void setup_search_paths(Thread* current);\n+  static void setup_module_paths(Thread* current);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -454,1 +454,1 @@\n-    ClassLoader::add_to_exploded_build_list(module_symbol, CHECK);\n+    ClassLoader::add_to_exploded_build_list(THREAD, module_symbol);\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-  ClassLoader::classLoader_init2(CHECK);\n+  ClassLoader::classLoader_init2(THREAD);\n","filename":"src\/hotspot\/share\/classfile\/vmClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2339,2 +2339,2 @@\n-        char *msg = NEW_RESOURCE_ARRAY_IN_THREAD(THREAD, char, strlen(path) + 128); ;\n-        jio_snprintf(msg, strlen(path) + 127, \"error in opening JAR file %s\", path);\n+        char *msg = NEW_RESOURCE_ARRAY_IN_THREAD(THREAD, char, strlen(path) + 128);\n+        jio_snprintf(msg, strlen(path) + 127, \"error in finding JAR file %s\", path);\n@@ -2343,1 +2343,6 @@\n-        ent = ClassLoader::create_class_path_entry(path, &st, \/*throw_exception=*\/true, false, false, CHECK_NULL);\n+        ent = ClassLoader::create_class_path_entry(THREAD, path, &st, false, false);\n+        if (ent == NULL) {\n+          char *msg = NEW_RESOURCE_ARRAY_IN_THREAD(THREAD, char, strlen(path) + 128);\n+          jio_snprintf(msg, strlen(path) + 127, \"error in opening JAR file %s\", path);\n+          THROW_MSG_(vmSymbols::java_io_IOException(), msg, NULL);\n+        }\n","filename":"src\/hotspot\/share\/memory\/filemap.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -605,6 +605,1 @@\n-  EXCEPTION_MARK;\n-  ClassLoader::initialize_shared_path(THREAD);\n-  if (HAS_PENDING_EXCEPTION) {\n-    java_lang_Throwable::print(PENDING_EXCEPTION, tty);\n-    vm_exit_during_initialization(\"ClassLoader::initialize_shared_path() failed unexpectedly\");\n-  }\n+  ClassLoader::initialize_shared_path(Thread::current());\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"}]}