{"files":[{"patch":"@@ -554,1 +554,1 @@\n-  new_entry = create_class_path_entry(path, &st, true \/* throw_exception *\/,\n+  new_entry = create_class_path_entry_or_fail(path, &st,\n@@ -598,1 +598,1 @@\n-        ClassPathEntry* new_entry = create_class_path_entry(path, &st, false, false, false, CHECK);\n+        ClassPathEntry* new_entry = create_class_path_entry_or_null(THREAD, path, &st, false, false);\n@@ -655,1 +655,1 @@\n-        ClassPathEntry* new_entry = create_class_path_entry(path, &st, false, false, false, CHECK);\n+        ClassPathEntry* new_entry = create_class_path_entry_or_null(THREAD, path, &st, false, false);\n@@ -679,1 +679,1 @@\n-void ClassLoader::add_to_exploded_build_list(Symbol* module_sym, TRAPS) {\n+void ClassLoader::add_to_exploded_build_list(Thread* current, Symbol* module_sym) {\n@@ -684,1 +684,1 @@\n-  ResourceMark rm(THREAD);\n+  ResourceMark rm(current);\n@@ -696,1 +696,1 @@\n-    ClassPathEntry* new_entry = create_class_path_entry(path, &st, false, false, false, CHECK);\n+    ClassPathEntry* new_entry = create_class_path_entry_or_null(current, path, &st, false, false);\n@@ -706,1 +706,1 @@\n-        MutexLocker ml(THREAD, Module_lock);\n+        MutexLocker ml(current, Module_lock);\n@@ -722,0 +722,13 @@\n+ClassPathEntry* ClassLoader::create_class_path_entry_or_fail(const char *path, const struct stat* st,\n+                                                         bool is_boot_append,\n+                                                         bool from_class_path_attr, TRAPS) {\n+  return create_class_path_entry(path, st, true \/*throw_exception*\/, is_boot_append, from_class_path_attr, CHECK_NULL);\n+}\n+\n+ClassPathEntry* ClassLoader::create_class_path_entry_or_null(Thread* current,\n+                                                         const char *path, const struct stat* st,\n+                                                         bool is_boot_append,\n+                                                         bool from_class_path_attr) {\n+  return create_class_path_entry(path, st, false \/*throw_exception*\/, is_boot_append, from_class_path_attr, current);\n+}\n+\n@@ -879,1 +892,1 @@\n-    new_entry = create_class_path_entry(path, &st, \/*throw_exception=*\/true, is_boot_append, from_class_path_attr, CHECK_false);\n+    new_entry = create_class_path_entry_or_fail(path, &st, is_boot_append, from_class_path_attr, CHECK_false);\n@@ -1119,1 +1132,2 @@\n-ClassFileStream* ClassLoader::search_module_entries(const GrowableArray<ModuleClassPathList*>* const module_list,\n+ClassFileStream* ClassLoader::search_module_entries(Thread* current,\n+                                                    const GrowableArray<ModuleClassPathList*>* const module_list,\n@@ -1121,2 +1135,1 @@\n-                                                    const char* const file_name,\n-                                                    TRAPS) {\n+                                                    const char* const file_name) {\n@@ -1149,1 +1162,1 @@\n-      MutexLocker ml(THREAD, Module_lock);\n+      MutexLocker ml(current, Module_lock);\n@@ -1158,1 +1171,1 @@\n-    stream = e->open_stream(THREAD, file_name);\n+    stream = e->open_stream(current, file_name);\n@@ -1221,1 +1234,1 @@\n-      stream = search_module_entries(_patch_mod_entries, class_name, file_name, CHECK_NULL);\n+      stream = search_module_entries(THREAD, _patch_mod_entries, class_name, file_name);\n@@ -1233,1 +1246,1 @@\n-      stream = search_module_entries(_exploded_entries, class_name, file_name, CHECK_NULL);\n+      stream = search_module_entries(THREAD, _exploded_entries, class_name, file_name);\n@@ -1554,1 +1567,1 @@\n-void ClassLoader::classLoader_init2(TRAPS) {\n+void ClassLoader::classLoader_init2(Thread* current) {\n@@ -1579,1 +1592,1 @@\n-    add_to_exploded_build_list(vmSymbols::java_base(), CHECK);\n+    add_to_exploded_build_list(current, vmSymbols::java_base());\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":30,"deletions":17,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -259,2 +259,0 @@\n-\n- public:\n@@ -266,0 +264,9 @@\n+ public:\n+  static ClassPathEntry* create_class_path_entry_or_fail(const char *path, const struct stat* st,\n+                                                         bool is_boot_append,\n+                                                         bool from_class_path_attr, TRAPS);\n+  static ClassPathEntry* create_class_path_entry_or_null(Thread* current,\n+                                                         const char *path, const struct stat* st,\n+                                                         bool is_boot_append,\n+                                                         bool from_class_path_attr);\n+\n@@ -314,1 +321,1 @@\n-  static void add_to_exploded_build_list(Symbol* module_name, TRAPS);\n+  static void add_to_exploded_build_list(Thread* current, Symbol* module_name);\n@@ -317,1 +324,2 @@\n-  static ClassFileStream* search_module_entries(const GrowableArray<ModuleClassPathList*>* const module_list,\n+  static ClassFileStream* search_module_entries(Thread* current,\n+                                                const GrowableArray<ModuleClassPathList*>* const module_list,\n@@ -319,1 +327,1 @@\n-                                                const char* const file_name, TRAPS);\n+                                                const char* const file_name);\n@@ -340,1 +348,1 @@\n-  static void classLoader_init2(TRAPS);\n+  static void classLoader_init2(Thread* current);\n","filename":"src\/hotspot\/share\/classfile\/classLoader.hpp","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -330,4 +330,1 @@\n-  ExceptionMark em(current);\n-  Thread* THREAD = current; \/\/ For exception macros.\n-  new_entry = create_class_path_entry(path, &st, \/*throw_exception=*\/false,\n-                                      false, false, CATCH); \/\/ will never throw\n+  new_entry = create_class_path_entry_or_null(current, path, &st, false, false);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -454,1 +454,1 @@\n-    ClassLoader::add_to_exploded_build_list(module_symbol, CHECK);\n+    ClassLoader::add_to_exploded_build_list(THREAD, module_symbol);\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-  ClassLoader::classLoader_init2(CHECK);\n+  ClassLoader::classLoader_init2(THREAD);\n","filename":"src\/hotspot\/share\/classfile\/vmClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2343,1 +2343,1 @@\n-        ent = ClassLoader::create_class_path_entry(path, &st, \/*throw_exception=*\/true, false, false, CHECK_NULL);\n+        ent = ClassLoader::create_class_path_entry_or_fail(path, &st, false, false, CHECK_NULL);\n","filename":"src\/hotspot\/share\/memory\/filemap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}