{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import java.util.Objects;\n@@ -313,0 +314,36 @@\n+    \/**\n+     * Check an ECPrivateKey to make sure the scalar value is within the\n+     * range of the order [1, n-1].\n+     *\n+     * @param prv the private key to be checked.\n+     *\n+     * @return the private key that was evaluated.\n+     *\n+     * @throws InvalidKeyException if the key's scalar value is not within\n+     *      the range 1 <= x < n where n is the order of the generator.\n+     *\/\n+    public static ECPrivateKey checkPrivateKey(ECPrivateKey prv)\n+            throws InvalidKeyException {\n+        \/\/ The private key itself cannot be null, but if the private\n+        \/\/ key doesn't divulge the parameters or more importantly the S value\n+        \/\/ (possibly because it lives on a provider that prevents release\n+        \/\/ of those values, e.g. HSM), then we cannot perform the check and\n+        \/\/ will allow the operation to proceed.\n+        Objects.requireNonNull(prv, \"Private key must be non-null\");\n+        ECParameterSpec spec = prv.getParams();\n+        if (spec != null) {\n+            BigInteger order = spec.getOrder();\n+            BigInteger sVal = prv.getS();\n+\n+            if (order != null && sVal != null) {\n+                if (sVal.compareTo(BigInteger.ZERO) <= 0 ||\n+                        sVal.compareTo(order) >= 0) {\n+                    throw new InvalidKeyException(\"The private key must be \" +\n+                            \"within the range [1, n - 1]\");\n+                }\n+            }\n+        }\n+\n+        return prv;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/ECUtil.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import sun.security.util.ECUtil;\n@@ -95,0 +96,1 @@\n+        ECUtil.checkPrivateKey(privateKey);\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ECDHKeyAgreement.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -377,0 +377,1 @@\n+        ECUtil.checkPrivateKey(key);\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ECDSASignature.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/**\n+ * @test\n+ * @bug 8272385\n+ * @summary Enforce ECPrivateKey d value to be in the range [1, n-1] for SunEC provider\n+ * @run main ECDSAPrvGreaterThanOrder\n+ *\/\n+\n+import javax.crypto.KeyAgreement;\n+import java.math.BigInteger;\n+import java.security.*;\n+import java.security.interfaces.ECPrivateKey;\n+import java.security.spec.ECGenParameterSpec;\n+import java.security.spec.ECParameterSpec;\n+import java.security.spec.ECPrivateKeySpec;\n+import java.util.List;\n+\n+public class ECDSAPrvGreaterThanOrder {\n+\n+    private static final List<String> CURVE_NAMES =\n+            List.of(\"secp256r1\", \"secp384r1\", \"secp521r1\");\n+\n+    public static void main(String[] args) throws Exception {\n+        for (String curveName : CURVE_NAMES) {\n+            ECPrivateKey ecPrivKey = makePrivateKey(curveName);\n+\n+            \/\/ Check using the private key for creating a digital signature\n+            Signature sig = null;\n+            KeyAgreement ka = null;\n+            try {\n+                sig = Signature.getInstance(\"SHA256withECDSA\",\n+                        \"SunEC\");\n+                sig.initSign(ecPrivKey);\n+                throw new RuntimeException(\"Expected exception for \" +\n+                        \"ECDSA\/\" + sig.getAlgorithm() + \"\/\" + curveName +\n+                        \" not thrown.\");\n+            } catch (InvalidKeyException ike) {\n+                \/\/ We are expecting this to be caught\n+                System.out.println(\"Caught expected exception for \" +\n+                        \"ECDSA\/\" + sig.getAlgorithm() + \"\/\" + curveName +\n+                        \": \" + ike);\n+            }\n+\n+            \/\/ Next, try starting a ECDH operation\n+            try {\n+                ka = KeyAgreement.getInstance(\"ECDH\", \"SunEC\");\n+                ka.init(ecPrivKey);\n+                throw new RuntimeException(\"Expected exception for ECDH\/\" +\n+                        curveName + \" not thrown.\");\n+            } catch (InvalidKeyException ike) {\n+                \/\/ We are expecting this to be caught\n+                System.out.println(\"Caught expected exception for ECDH\/\" +\n+                        curveName + \": \" + ike);\n+            }\n+        }\n+    }\n+\n+    private static ECPrivateKey makePrivateKey(String curveName) {\n+        try {\n+            System.out.println(\"Creating private key for curve \" + curveName);\n+\n+            AlgorithmParameters params = AlgorithmParameters.getInstance(\n+                    \"EC\", \"SunEC\");\n+            params.init(new ECGenParameterSpec(curveName));\n+            ECParameterSpec ecParameters = params.getParameterSpec(\n+                    ECParameterSpec.class);\n+            BigInteger order = ecParameters.getOrder(); \/\/ the N value\n+            System.out.println(\"Order is: \" + order);\n+\n+            \/\/ Create a private key value (d) that is outside the range\n+            \/\/ [1, N-1]\n+            BigInteger dVal = order.add(BigInteger.TWO);\n+            System.out.println(\"Modified d Value is: \" + dVal);\n+\n+            \/\/ Create the private key\n+            KeyFactory kf = KeyFactory.getInstance(\"EC\", \"SunEC\");\n+            return (ECPrivateKey)kf.generatePrivate(\n+                    new ECPrivateKeySpec(dVal, ecParameters));\n+        } catch (GeneralSecurityException gse) {\n+            throw new RuntimeException(\"Unexpected error creating private key\",\n+                    gse);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ec\/ECDSAPrvGreaterThanOrder.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"}]}