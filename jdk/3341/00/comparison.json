{"files":[{"patch":"@@ -42,0 +42,3 @@\n+ * An instance of this class does not need\n+ * wrapping with {@code BufferedInputStream}.\n+ *\n@@ -56,1 +59,1 @@\n-    protected byte buf[];\n+    protected byte[] buf;\n@@ -80,1 +83,1 @@\n-    protected int mark = 0;\n+    protected int mark;\n@@ -105,1 +108,1 @@\n-    public ByteArrayInputStream(byte buf[]) {\n+    public ByteArrayInputStream(byte[] buf) {\n@@ -125,1 +128,1 @@\n-    public ByteArrayInputStream(byte buf[], int offset, int length) {\n+    public ByteArrayInputStream(byte[] buf, int offset, int length) {\n@@ -172,1 +175,1 @@\n-    public synchronized int read(byte b[], int off, int len) {\n+    public synchronized int read(byte[] b, int off, int len) {\n","filename":"src\/java.base\/share\/classes\/java\/io\/ByteArrayInputStream.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -45,0 +45,3 @@\n+ * An instance of this class does not need\n+ * wrapping with {@code BufferedOutputStream}.\n+ *\n@@ -54,1 +57,1 @@\n-    protected byte buf[];\n+    protected byte[] buf;\n@@ -128,1 +131,1 @@\n-    public synchronized void write(byte b[], int off, int len) {\n+    public synchronized void write(byte[] b, int off, int len) {\n@@ -147,1 +150,1 @@\n-    public void writeBytes(byte b[]) {\n+    public void writeBytes(byte[] b) {\n","filename":"src\/java.base\/share\/classes\/java\/io\/ByteArrayOutputStream.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-    public int read(byte b[]) throws IOException {\n+    public int read(byte[] b) throws IOException {\n@@ -278,1 +278,1 @@\n-    public int read(byte b[], int off, int len) throws IOException {\n+    public int read(byte[] b, int off, int len) throws IOException {\n@@ -626,3 +626,4 @@\n-     * <p> Note that while some implementations of {@code InputStream} will\n-     * return the total number of bytes in the stream, many will not.  It is\n-     * never correct to use the return value of this method to allocate\n+     * <p> Note that while some implementations of {@code InputStream}\n+     * (e.g. {@code ByteArrayInputStream}) will return\n+     * the total number of bytes in the stream, many will not. It is\n+     * usually not correct to use the return value of this method to allocate\n","filename":"src\/java.base\/share\/classes\/java\/io\/InputStream.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"}]}