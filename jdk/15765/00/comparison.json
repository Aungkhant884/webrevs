{"files":[{"patch":"@@ -193,1 +193,1 @@\n-        UNDERSCORE(TokenKind.UNDERSCORE, XERRO),  \/\/  _\n+        UNDERSCORE(TokenKind.UNDERSCORE, XDECL1),  \/\/  _\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/CompletenessAnalyzer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 9999999\n+ * @bug 8315851 8315588\n@@ -37,0 +37,2 @@\n+\n+import jdk.jshell.SourceCodeAnalysis;\n@@ -43,0 +45,3 @@\n+import static jdk.jshell.SourceCodeAnalysis.Completeness.COMPLETE;\n+import static jdk.jshell.SourceCodeAnalysis.Completeness.DEFINITELY_INCOMPLETE;\n+\n@@ -53,0 +58,73 @@\n+    static final String[] definitely_incomplete = new String[]{\n+            \"int _ = \",\n+            \"int m(String v, int r) {\\n\" +\n+                    \"    try {\\n\" +\n+                    \"        return Integer.parseInt(v, r);\\n\" +\n+                    \"    } catch (NumberFormatException _) {\",\n+            \"try (final Lock _ = \",\n+            \"try (Lock _ = null) {\\n\" +\n+                \"            try (Lock _ = null) {\",\n+            \"for (var _ : strs\",\n+            \"TwoParams p1 = (_, _) ->\",\n+            \"for (int _ = 0, _ = 1, x = 1;\",\n+            \"if (r instanceof R(_\"\n+    };\n+\n+    static final String[] complete = new String[]{\n+            \"int _ = 42;\",\n+            \"int m(String v, int r) {\\n\" +\n+                    \"    try {\\n\" +\n+                    \"        return Integer.parseInt(v, r);\\n\" +\n+                    \"    } catch (NumberFormatException _) { } }\",\n+            \"try (final Lock _ = TEST) {}\",\n+            \"try (Lock _ = null) {\\n\" +\n+                    \"            try (Lock _ = null) { } }\",\n+            \"for (var _ : strs) { }\",\n+            \"TwoParams p1 = (_, _) -> {};\",\n+            \"for (int _ = 0, _ = 1, x = 1; x <= 1 ; x++) {}\",\n+            \"if (r instanceof R(_)) { }\"\n+    };\n+\n+    private void assertStatus(String input, SourceCodeAnalysis.Completeness status, String source) {\n+        String augSrc;\n+        switch (status) {\n+            case COMPLETE_WITH_SEMI:\n+                augSrc = source + \";\";\n+                break;\n+\n+            case DEFINITELY_INCOMPLETE:\n+                augSrc = null;\n+                break;\n+\n+            case CONSIDERED_INCOMPLETE:\n+                augSrc = source + \";\";\n+                break;\n+\n+            case EMPTY:\n+            case COMPLETE:\n+            case UNKNOWN:\n+                augSrc = source;\n+                break;\n+\n+            default:\n+                throw new AssertionError();\n+        }\n+        assertAnalyze(input, status, augSrc);\n+    }\n+\n+    private void assertStatus(String[] ins, SourceCodeAnalysis.Completeness status) {\n+        for (String input : ins) {\n+            assertStatus(input, status, input);\n+        }\n+    }\n+\n+    @Test\n+    public void test_definitely_incomplete() {\n+        assertStatus(definitely_incomplete, DEFINITELY_INCOMPLETE);\n+    }\n+\n+    @Test\n+    public void test_definitely_complete() {\n+        assertStatus(complete, COMPLETE);\n+    }\n+\n","filename":"test\/langtools\/jdk\/jshell\/UnnamedTest.java","additions":79,"deletions":1,"binary":false,"changes":80,"status":"modified"}]}