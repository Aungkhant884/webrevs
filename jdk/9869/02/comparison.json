{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,8 @@\n-ifeq ($(BUILD_CDS_ARCHIVE), true)\n+# Helper function for creating the CDS archives for the JDK and JRE\n+#\n+# Param1 - VM variant (e.g., server, client, zero, ...)\n+# Param2 - _nocoops, or empty\n+define CreateCDSArchive\n+  $1_$2_DUMP_EXTRA_ARG := $(if $(filter _nocoops, $2),-XX:-UseCompressedOops,)\n+  $1_$2_DUMP_TYPE      := $(if $(filter _nocoops, $2),-NOCOOPS,)\n+\n@@ -119,2 +126,1 @@\n-    CDS_ARCHIVE := bin\/server\/classes.jsa\n-    CDS_NOCOOPS_ARCHIVE := bin\/server\/classes_nocoops.jsa\n+    $1_$2_CDS_ARCHIVE := bin\/$1\/classes$2.jsa\n@@ -122,2 +128,1 @@\n-    CDS_ARCHIVE := lib\/server\/classes.jsa\n-    CDS_NOCOOPS_ARCHIVE := lib\/server\/classes_nocoops.jsa\n+    $1_$2_CDS_ARCHIVE := lib\/$1\/classes$2.jsa\n@@ -126,8 +131,8 @@\n-  $(eval $(call SetupExecute, gen_cds_archive_jdk, \\\n-      WARN := Creating CDS archive for jdk image, \\\n-      DEPS := $(jlink_jdk), \\\n-      OUTPUT_FILE := $(JDK_IMAGE_DIR)\/$(CDS_ARCHIVE), \\\n-      SUPPORT_DIR := $(SUPPORT_OUTPUTDIR)\/images\/jdk, \\\n-      COMMAND := $(FIXPATH) $(JDK_IMAGE_DIR)\/bin\/java -Xshare:dump \\\n-          -XX:SharedArchiveFile=$(JDK_IMAGE_DIR)\/$(CDS_ARCHIVE) \\\n-          -Xmx128M -Xms128M $(LOG_INFO), \\\n+  $$(eval $$(call SetupExecute, $1_$2_gen_cds_archive_jdk, \\\n+      WARN := Creating CDS$$($1_$2_DUMP_TYPE) archive for jdk image for $1, \\\n+      DEPS := $$(jlink_jdk), \\\n+      OUTPUT_FILE := $$(JDK_IMAGE_DIR)\/$$($1_$2_CDS_ARCHIVE), \\\n+      SUPPORT_DIR := $$(SUPPORT_OUTPUTDIR)\/images\/jdk, \\\n+      COMMAND := $$(FIXPATH) $$(JDK_IMAGE_DIR)\/bin\/java -Xshare:dump \\\n+          -XX:SharedArchiveFile=$$(JDK_IMAGE_DIR)\/$$($1_$2_CDS_ARCHIVE) \\\n+          -$1 $$($1_$2_DUMP_EXTRA_ARG) -Xmx128M -Xms128M $$(LOG_INFO), \\\n@@ -136,1 +141,1 @@\n-  JDK_TARGETS += $(gen_cds_archive_jdk)\n+  JDK_TARGETS += $$($1_$2_gen_cds_archive_jdk)\n@@ -138,8 +143,8 @@\n-  $(eval $(call SetupExecute, gen_cds_archive_jre, \\\n-      WARN := Creating CDS archive for jre image, \\\n-      DEPS := $(jlink_jre), \\\n-      OUTPUT_FILE := $(JRE_IMAGE_DIR)\/$(CDS_ARCHIVE), \\\n-      SUPPORT_DIR := $(SUPPORT_OUTPUTDIR)\/images\/jre, \\\n-      COMMAND := $(FIXPATH) $(JRE_IMAGE_DIR)\/bin\/java -Xshare:dump \\\n-          -XX:SharedArchiveFile=$(JRE_IMAGE_DIR)\/$(CDS_ARCHIVE) \\\n-          -Xmx128M -Xms128M $(LOG_INFO), \\\n+  $$(eval $$(call SetupExecute, $1_$2_gen_cds_archive_jre, \\\n+      WARN := Creating CDS$$($1_$2_DUMP_TYPE) archive for jre image for $1, \\\n+      DEPS := $$(jlink_jre), \\\n+      OUTPUT_FILE := $$(JRE_IMAGE_DIR)\/$$($1_$2_CDS_ARCHIVE), \\\n+      SUPPORT_DIR := $$(SUPPORT_OUTPUTDIR)\/images\/jre, \\\n+      COMMAND := $$(FIXPATH) $$(JRE_IMAGE_DIR)\/bin\/java -Xshare:dump \\\n+          -XX:SharedArchiveFile=$$(JRE_IMAGE_DIR)\/$$($1_$2_CDS_ARCHIVE) \\\n+          -$1 $$($1_$2_DUMP_EXTRA_ARG) -Xmx128M -Xms128M $$(LOG_INFO), \\\n@@ -148,1 +153,7 @@\n-  JRE_TARGETS += $(gen_cds_archive_jre)\n+  JRE_TARGETS += $$($1_$2_gen_cds_archive_jre)\n+endef\n+\n+ifeq ($(BUILD_CDS_ARCHIVE), true)\n+  $(foreach v, $(JVM_VARIANTS), \\\n+    $(eval $(call CreateCDSArchive,$v,)) \\\n+  )\n@@ -151,25 +162,3 @@\n-    $(eval $(call SetupExecute, gen_cds_nocoops_archive_jdk, \\\n-        WARN := Creating CDS-NOCOOPS archive for jdk image, \\\n-        DEPS := $(jlink_jdk), \\\n-        OUTPUT_FILE := $(JDK_IMAGE_DIR)\/$(CDS_NOCOOPS_ARCHIVE), \\\n-        SUPPORT_DIR := $(SUPPORT_OUTPUTDIR)\/images\/jdk, \\\n-        COMMAND := $(FIXPATH) $(JDK_IMAGE_DIR)\/bin\/java -Xshare:dump \\\n-            -XX:SharedArchiveFile=$(JDK_IMAGE_DIR)\/$(CDS_NOCOOPS_ARCHIVE) \\\n-            -XX:-UseCompressedOops \\\n-            -Xmx128M -Xms128M $(LOG_INFO), \\\n-    ))\n-\n-    JDK_TARGETS += $(gen_cds_nocoops_archive_jdk)\n-\n-    $(eval $(call SetupExecute, gen_cds_nocoops_archive_jre, \\\n-        WARN := Creating CDS-NOCOOPS archive for jre image, \\\n-        DEPS := $(jlink_jre), \\\n-        OUTPUT_FILE := $(JRE_IMAGE_DIR)\/$(CDS_NOCOOPS_ARCHIVE), \\\n-        SUPPORT_DIR := $(SUPPORT_OUTPUTDIR)\/images\/jre, \\\n-        COMMAND := $(FIXPATH) $(JRE_IMAGE_DIR)\/bin\/java -Xshare:dump \\\n-            -XX:SharedArchiveFile=$(JRE_IMAGE_DIR)\/$(CDS_NOCOOPS_ARCHIVE) \\\n-            -XX:-UseCompressedOops \\\n-            -Xmx128M -Xms128M $(LOG_INFO), \\\n-    ))\n-\n-    JRE_TARGETS += $(gen_cds_nocoops_archive_jre)\n+    $(foreach v, $(JVM_VARIANTS), \\\n+      $(eval $(call CreateCDSArchive,$v,_nocoops)) \\\n+    )\n@@ -177,1 +166,0 @@\n-\n","filename":"make\/Images.gmk","additions":38,"deletions":50,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -413,1 +413,1 @@\n-    JVM_FEATURES_VARIANT_UNAVAILABLE=\"cds compiler1 compiler2 \\\n+    JVM_FEATURES_VARIANT_UNAVAILABLE=\"compiler1 compiler2 \\\n","filename":"make\/autoconf\/jvm-features.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+#include \"runtime\/arguments.hpp\"\n@@ -591,2 +592,2 @@\n-                                &&opc_invokehandle,     &&opc_default,        &&opc_default,\n-\/* 0xEC *\/ &&opc_default,       &&opc_default,          &&opc_default,        &&opc_default,\n+                                &&opc_invokehandle,     &&opc_nofast_getfield,&&opc_nofast_putfield,\n+\/* 0xEC *\/ &&opc_nofast_aload_0,&&opc_nofast_iload,     &&opc_default,        &&opc_default,\n@@ -865,0 +866,7 @@\n+      CASE(_nofast_iload):\n+      {\n+        \/\/ Normal, non-rewritable iload handling.\n+        SET_STACK_SLOT(LOCALS_SLOT(pc[1]), 0);\n+        UPDATE_PC_AND_TOS_AND_CONTINUE(2, 1);\n+      }\n+\n@@ -925,2 +933,3 @@\n-            case Bytecodes::_getfield: {\n-              \/* Otherwise, do nothing here, wait until it gets rewritten to _fast_Xgetfield.\n+            case Bytecodes::_getfield:\n+            case Bytecodes::_nofast_getfield: {\n+              \/* Otherwise, do nothing here, wait until\/if it gets rewritten to _fast_Xgetfield.\n@@ -936,0 +945,9 @@\n+        \/\/ Normal aload_0 handling.\n+        VERIFY_OOP(LOCALS_OBJECT(0));\n+        SET_STACK_OBJECT(LOCALS_OBJECT(0), 0);\n+        UPDATE_PC_AND_TOS_AND_CONTINUE(1, 1);\n+      }\n+\n+      CASE(_nofast_aload_0):\n+      {\n+        \/\/ Normal, non-rewritable aload_0 handling.\n@@ -1704,0 +1722,1 @@\n+      CASE(_nofast_getfield):\n@@ -1714,0 +1733,7 @@\n+          \/\/ Interpreter runtime does not expect \"nofast\" opcodes,\n+          \/\/ prepare the vanilla opcode for it.\n+          Bytecodes::Code code = (Bytecodes::Code)opcode;\n+          if (code == Bytecodes::_nofast_getfield) {\n+            code = Bytecodes::_getfield;\n+          }\n+\n@@ -1715,2 +1741,2 @@\n-          if (!cache->is_resolved((Bytecodes::Code)opcode)) {\n-            CALL_VM(InterpreterRuntime::resolve_from_cache(THREAD, (Bytecodes::Code)opcode),\n+          if (!cache->is_resolved(code)) {\n+            CALL_VM(InterpreterRuntime::resolve_from_cache(THREAD, code),\n@@ -1730,1 +1756,2 @@\n-            if (REWRITE_BYTECODES && !cache->is_volatile()) {\n+            if (REWRITE_BYTECODES && !cache->is_volatile() &&\n+                  ((Bytecodes::Code)opcode != Bytecodes::_nofast_getfield)) {\n@@ -1822,0 +1849,1 @@\n+      CASE(_nofast_putfield):\n@@ -1826,2 +1854,10 @@\n-          if (!cache->is_resolved((Bytecodes::Code)opcode)) {\n-            CALL_VM(InterpreterRuntime::resolve_from_cache(THREAD, (Bytecodes::Code)opcode),\n+\n+          \/\/ Interpreter runtime does not expect \"nofast\" opcodes,\n+          \/\/ prepare the vanilla opcode for it.\n+          Bytecodes::Code code = (Bytecodes::Code)opcode;\n+          if (code == Bytecodes::_nofast_putfield) {\n+            code = Bytecodes::_putfield;\n+          }\n+\n+          if (!cache->is_resolved(code)) {\n+            CALL_VM(InterpreterRuntime::resolve_from_cache(THREAD, code),\n@@ -1852,1 +1888,2 @@\n-            if (REWRITE_BYTECODES && !cache->is_volatile()) {\n+            if (REWRITE_BYTECODES && !cache->is_volatile() &&\n+                  ((Bytecodes::Code)opcode != Bytecodes::_nofast_putfield)) {\n@@ -2418,1 +2455,1 @@\n-              if (REWRITE_BYTECODES) {\n+              if (REWRITE_BYTECODES && !UseSharedSpaces && !Arguments::is_dumping_archive()) {\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":48,"deletions":11,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @requires vm.cds\n+ * @requires vm.cds & vm.hasJFR\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/JFRDynamicCDS.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,6 +105,4 @@\n-        \/\/ Now rename classes.jsa to old-classes.jsa\n-        String dstDir = java_home_dst + File.separator + \"lib\" + File.separator + \"server\";\n-        CDSTestUtils.rename(new File(dstDir + File.separator +  \"classes.jsa\"),\n-                            new File(dstDir + File.separator +  \"old-classes.jsa\"));\n-        System.out.println(\"======= renamed classes.jsa to old-classes.jsa\");\n-\n+        \/\/ Remove all possible default archives\n+        removeDefaultArchives(java_home_dst, \"zero\");\n+        removeDefaultArchives(java_home_dst, \"server\");\n+        removeDefaultArchives(java_home_dst, \"zero\");\n@@ -119,1 +117,0 @@\n-                      .shouldContain(\"mixed mode\")\n@@ -145,0 +142,1 @@\n+    }\n@@ -146,0 +144,12 @@\n+    private static void removeDefaultArchives(String java_home_dst, String variant) {\n+        removeDefaultArchive(java_home_dst, variant, \"\");\n+        removeDefaultArchive(java_home_dst, variant, \"_nocoops\");\n+    }\n+\n+    private static void removeDefaultArchive(String java_home_dst, String variant, String suffix) {\n+        String fileName = java_home_dst + File.separator + \"lib\" + File.separator + variant + \n+                          File.separator +  \"classes\" + suffix + \".jsa\";\n+        File f = new File(fileName);\n+        if (f.delete()) {\n+            System.out.println(\"======= removed \" + fileName);\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/TestAutoCreateSharedArchiveNoDefaultArchive.java","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"}]}