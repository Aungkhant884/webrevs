{"files":[{"patch":"@@ -144,1 +144,1 @@\n-      WARN := Creating CDS$$($1_$2_DUMP_TYPE) archive for jre image, \\\n+      WARN := Creating CDS$$($1_$2_DUMP_TYPE) archive for jre image for $1, \\\n","filename":"make\/Images.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-#include \"runtime\/arguments.hpp\"\n@@ -181,7 +180,0 @@\n-  \/\/ CDS uses Bytecodes::_nofast_xxx to indicate that the bytecode\n-  \/\/ is in a method that lives in read-only memory and shouldn't be\n-  \/\/ rewritten. However, _nofast_xxx is not supported by ZERO yet.\n-  \/\/ Let's disable bytecode rewriting altogether at dump time, and defer\n-  \/\/ all rewriting to runtime.\n-  bool rewrite = RewriteBytecodes && !Arguments::is_dumping_archive();\n-\n@@ -197,1 +189,1 @@\n-      if (rewrite) {\n+      if (RewriteBytecodes) {\n@@ -203,1 +195,1 @@\n-      if (rewrite) {\n+      if (RewriteBytecodes) {\n","filename":"src\/hotspot\/cpu\/zero\/zeroInterpreter_zero.cpp","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1846,8 +1846,0 @@\n-#ifdef ZERO\n-  if (i == MetaspaceShared::ro) {\n-    \/\/ The \"nofast\" bytecodes are not supported by ZERO yet, so the bytecodes\n-    \/\/ (stored in the \"ro\" region) need to be rewritten at runtime.\n-    si->set_read_only(false);\n-  }\n-#endif\n-\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -401,2 +401,0 @@\n-#ifndef ZERO\n-  \/\/ TODO: these \"nofast\" bytecodes are not supported by ZERO yet, so we can't rewrite.\n@@ -419,1 +417,0 @@\n-#endif\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+#include \"runtime\/arguments.hpp\"\n@@ -591,2 +592,2 @@\n-                                &&opc_invokehandle,     &&opc_default,        &&opc_default,\n-\/* 0xEC *\/ &&opc_default,       &&opc_default,          &&opc_default,        &&opc_default,\n+                                &&opc_invokehandle,     &&opc_nofast_getfield,&&opc_nofast_putfield,\n+\/* 0xEC *\/ &&opc_nofast_aload_0,&&opc_nofast_iload,     &&opc_default,        &&opc_default,\n@@ -865,0 +866,7 @@\n+      CASE(_nofast_iload):\n+      {\n+        \/\/ Normal, non-rewritable iload handling.\n+        SET_STACK_SLOT(LOCALS_SLOT(pc[1]), 0);\n+        UPDATE_PC_AND_TOS_AND_CONTINUE(2, 1);\n+      }\n+\n@@ -925,2 +933,3 @@\n-            case Bytecodes::_getfield: {\n-              \/* Otherwise, do nothing here, wait until it gets rewritten to _fast_Xgetfield.\n+            case Bytecodes::_getfield:\n+            case Bytecodes::_nofast_getfield: {\n+              \/* Otherwise, do nothing here, wait until\/if it gets rewritten to _fast_Xgetfield.\n@@ -936,0 +945,9 @@\n+        \/\/ Normal aload_0 handling.\n+        VERIFY_OOP(LOCALS_OBJECT(0));\n+        SET_STACK_OBJECT(LOCALS_OBJECT(0), 0);\n+        UPDATE_PC_AND_TOS_AND_CONTINUE(1, 1);\n+      }\n+\n+      CASE(_nofast_aload_0):\n+      {\n+        \/\/ Normal, non-rewritable aload_0 handling.\n@@ -1704,0 +1722,1 @@\n+      CASE(_nofast_getfield):\n@@ -1714,0 +1733,7 @@\n+          \/\/ Interpreter runtime does not expect \"nofast\" opcodes,\n+          \/\/ prepare the vanilla opcode for it.\n+          Bytecodes::Code code = (Bytecodes::Code)opcode;\n+          if (code == Bytecodes::_nofast_getfield) {\n+            code = Bytecodes::_getfield;\n+          }\n+\n@@ -1715,2 +1741,2 @@\n-          if (!cache->is_resolved((Bytecodes::Code)opcode)) {\n-            CALL_VM(InterpreterRuntime::resolve_from_cache(THREAD, (Bytecodes::Code)opcode),\n+          if (!cache->is_resolved(code)) {\n+            CALL_VM(InterpreterRuntime::resolve_from_cache(THREAD, code),\n@@ -1730,1 +1756,2 @@\n-            if (REWRITE_BYTECODES && !cache->is_volatile()) {\n+            if (REWRITE_BYTECODES && !cache->is_volatile() &&\n+                  ((Bytecodes::Code)opcode != Bytecodes::_nofast_getfield)) {\n@@ -1822,0 +1849,1 @@\n+      CASE(_nofast_putfield):\n@@ -1826,2 +1854,10 @@\n-          if (!cache->is_resolved((Bytecodes::Code)opcode)) {\n-            CALL_VM(InterpreterRuntime::resolve_from_cache(THREAD, (Bytecodes::Code)opcode),\n+\n+          \/\/ Interpreter runtime does not expect \"nofast\" opcodes,\n+          \/\/ prepare the vanilla opcode for it.\n+          Bytecodes::Code code = (Bytecodes::Code)opcode;\n+          if (code == Bytecodes::_nofast_putfield) {\n+            code = Bytecodes::_putfield;\n+          }\n+\n+          if (!cache->is_resolved(code)) {\n+            CALL_VM(InterpreterRuntime::resolve_from_cache(THREAD, code),\n@@ -1852,1 +1888,2 @@\n-            if (REWRITE_BYTECODES && !cache->is_volatile()) {\n+            if (REWRITE_BYTECODES && !cache->is_volatile() &&\n+                  ((Bytecodes::Code)opcode != Bytecodes::_nofast_putfield)) {\n@@ -2418,1 +2455,1 @@\n-              if (REWRITE_BYTECODES) {\n+              if (REWRITE_BYTECODES && !UseSharedSpaces && !Arguments::is_dumping_archive()) {\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":48,"deletions":11,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @requires vm.cds\n+ * @requires vm.cds & vm.hasJFR\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/JFRDynamicCDS.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,6 +105,4 @@\n-        \/\/ Now rename classes.jsa to old-classes.jsa\n-        String dstDir = java_home_dst + File.separator + \"lib\" + File.separator + \"server\";\n-        CDSTestUtils.rename(new File(dstDir + File.separator +  \"classes.jsa\"),\n-                            new File(dstDir + File.separator +  \"old-classes.jsa\"));\n-        System.out.println(\"======= renamed classes.jsa to old-classes.jsa\");\n-\n+        \/\/ Remove all possible default archives\n+        removeDefaultArchives(java_home_dst, \"zero\");\n+        removeDefaultArchives(java_home_dst, \"server\");\n+        removeDefaultArchives(java_home_dst, \"zero\");\n@@ -119,1 +117,0 @@\n-                      .shouldContain(\"mixed mode\")\n@@ -145,0 +142,1 @@\n+    }\n@@ -146,0 +144,12 @@\n+    private static void removeDefaultArchives(String java_home_dst, String variant) {\n+        removeDefaultArchive(java_home_dst, variant, \"\");\n+        removeDefaultArchive(java_home_dst, variant, \"_nocoops\");\n+    }\n+\n+    private static void removeDefaultArchive(String java_home_dst, String variant, String suffix) {\n+        String fileName = java_home_dst + File.separator + \"lib\" + File.separator + variant + \n+                          File.separator +  \"classes\" + suffix + \".jsa\";\n+        File f = new File(fileName);\n+        if (f.delete()) {\n+            System.out.println(\"======= removed \" + fileName);\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/TestAutoCreateSharedArchiveNoDefaultArchive.java","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"}]}