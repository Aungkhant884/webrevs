{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -351,2 +351,7 @@\n-                paddingCopy = padding.pad(buffer, 0, bufOfs);\n-                result = RSACore.rsa(paddingCopy, privateKey, true);\n+                RSAPadding.Output po = padding.pad(buffer, 0, bufOfs);\n+                if (po.status()) {\n+                    paddingCopy = po.result();\n+                    result = RSACore.rsa(paddingCopy, privateKey, true);\n+                } else {\n+                    throw new BadPaddingException(\"Padding error in signing\");\n+                }\n@@ -357,1 +362,7 @@\n-                result = padding.unpad(paddingCopy);\n+                po = padding.unpad(paddingCopy);\n+                if (po.status()) {\n+                    result = po.result();\n+                } else {\n+                    throw new BadPaddingException\n+                            (\"Padding error in verification\");\n+                }\n@@ -360,2 +371,7 @@\n-                paddingCopy = padding.pad(buffer, 0, bufOfs);\n-                result = RSACore.rsa(paddingCopy, publicKey);\n+                po = padding.pad(buffer, 0, bufOfs);\n+                if (po.status()) {\n+                    result = RSACore.rsa(po.result(), publicKey);\n+                } else {\n+                    throw new BadPaddingException\n+                            (\"Padding error in encryption\");\n+                }\n@@ -366,1 +382,7 @@\n-                result = padding.unpad(paddingCopy);\n+                po = padding.unpad(paddingCopy);\n+                if (po.status()) {\n+                    result = po.result();\n+                } else {\n+                    throw new BadPaddingException\n+                            (\"Padding error in decryption\");\n+                }\n@@ -375,1 +397,1 @@\n-            if (paddingCopy != null             \/\/ will not happen\n+            if (paddingCopy != null\n@@ -377,1 +399,1 @@\n-                    && paddingCopy != result) { \/\/ DO NOT CLEAN, THIS IS RESULT!\n+                    && paddingCopy != result) { \/\/ DO NOT CLEAN, THIS IS RESULT\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/RSACipher.java","additions":31,"deletions":9,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -93,0 +93,8 @@\n+    public record Output(boolean status, byte[] result) {\n+        public static Output FAIL = new Output(false, null);\n+        public static Output pass(byte[] result) {\n+            return new Output(true, result);\n+        };\n+    }\n+\n+\n@@ -238,1 +246,1 @@\n-     * Pad the data and return the padded block.\n+     * Pad the data and return the result in an RSAPadding.Output record.\n@@ -240,1 +248,1 @@\n-    public byte[] pad(byte[] data) throws BadPaddingException {\n+    public Output pad(byte[] data) {\n@@ -245,1 +253,1 @@\n-     * Pad the data and return the padded block.\n+     * Pad the data and return the result in an RSAPadding.Output record.\n@@ -247,2 +255,1 @@\n-    public byte[] pad(byte[] data, int ofs, int len)\n-            throws BadPaddingException {\n+    public Output pad(byte[] data, int ofs, int len) {\n@@ -250,3 +257,1 @@\n-            throw new BadPaddingException(\"Data must be shorter than \"\n-                + (maxDataSize + 1) + \" bytes but received \"\n-                + len + \" bytes.\");\n+            return Output.FAIL;\n@@ -256,1 +261,2 @@\n-            return RSACore.convert(data, ofs, len);\n+            \/\/ assert len == paddedSize and data.length - ofs > len?\n+            return Output.pass(RSACore.convert(data, ofs, len));\n@@ -268,1 +274,2 @@\n-     * Unpad the padded block and return the data.\n+     * Unpad the padded block and return the result in an RSAPadding.Output\n+     * record.\n@@ -270,16 +277,10 @@\n-    public byte[] unpad(byte[] padded) throws BadPaddingException {\n-        if (padded.length != paddedSize) {\n-            throw new BadPaddingException(\"Decryption error. \" +\n-                \"The padded array length (\" + padded.length +\n-                \") is not the specified padded size (\" + paddedSize + \")\");\n-        }\n-        switch (type) {\n-        case PAD_NONE:\n-            return padded;\n-        case PAD_BLOCKTYPE_1:\n-        case PAD_BLOCKTYPE_2:\n-            return unpadV15(padded);\n-        case PAD_OAEP_MGF1:\n-            return unpadOAEP(padded);\n-        default:\n-            throw new AssertionError();\n+    public Output unpad(byte[] padded) {\n+        if (padded.length == paddedSize) {\n+            return switch(type) {\n+                case PAD_NONE -> Output.pass(padded);\n+                case PAD_BLOCKTYPE_1, PAD_BLOCKTYPE_2 -> unpadV15(padded);\n+                case PAD_OAEP_MGF1 -> unpadOAEP(padded);\n+                default -> throw new AssertionError();\n+            };\n+        } else {\n+            return Output.FAIL;\n@@ -292,1 +293,1 @@\n-    private byte[] padV15(byte[] data, int ofs, int len) {\n+    private Output padV15(byte[] data, int ofs, int len) {\n@@ -324,1 +325,1 @@\n-        return padded;\n+        return Output.pass(padded);\n@@ -329,1 +330,1 @@\n-     *\n+     * Return the result in an RSAPadding.Output record.\n@@ -332,1 +333,1 @@\n-    private byte[] unpadV15(byte[] padded) throws BadPaddingException {\n+    private Output unpadV15(byte[] padded) {\n@@ -368,2 +369,0 @@\n-        BadPaddingException bpe = new BadPaddingException(\"Decryption error\");\n-\n@@ -371,1 +370,1 @@\n-            throw bpe;\n+            return Output.FAIL;\n@@ -373,1 +372,1 @@\n-            return data;\n+            return Output.pass(data);\n@@ -380,0 +379,1 @@\n+     * Return the result in an RSAPadding.Output record.\n@@ -381,1 +381,1 @@\n-    private byte[] padOAEP(byte[] M, int ofs, int len) {\n+    private Output padOAEP(byte[] M, int ofs, int len) {\n@@ -425,1 +425,1 @@\n-        return EM;\n+        return Output.pass(EM);\n@@ -431,1 +431,1 @@\n-    private byte[] unpadOAEP(byte[] padded) throws BadPaddingException {\n+    private Output unpadOAEP(byte[] padded) {\n@@ -487,7 +487,1 @@\n-        BadPaddingException bpe = new BadPaddingException(\"Decryption error\");\n-\n-        if (bp) {\n-            throw bpe;\n-        } else {\n-            return m;\n-        }\n+        return (bp? Output.FAIL : Output.pass(m));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAPadding.java","additions":38,"deletions":44,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -192,2 +192,5 @@\n-            byte[] padded = padding.pad(encoded);\n-            return RSACore.rsa(padded, privateKey, true);\n+            RSAPadding.Output po = padding.pad(encoded);\n+            if (po.status()) {\n+                return RSACore.rsa(po.result(), privateKey, true);\n+            }\n+            throw new SignatureException(\"Could not sign data\");\n@@ -208,1 +211,1 @@\n-                throw new SignatureException(\"Signature length not correct: got \" +\n+                throw new SignatureException(\"Bad signature length: got \" +\n@@ -214,1 +217,1 @@\n-            byte[] unpadded = padding.unpad(decrypted);\n+            RSAPadding.Output po = padding.unpad(decrypted);\n@@ -217,4 +220,5 @@\n-            \/\/ decoded, but some vendors might omit the NULL params in\n-            \/\/ digest algorithm identifier.\n-            byte[] decodedDigest = RSAUtil.decodeSignature(digestOID, unpadded);\n-            return MessageDigest.isEqual(digest, decodedDigest);\n+            byte[] encodedDigest = RSAUtil.encodeSignature(digestOID,\n+                    digest);\n+\n+            return po.status() &&\n+                    MessageDigest.isEqual(encodedDigest, po.result());\n@@ -222,4 +226,0 @@\n-            \/\/ occurs if the app has used the wrong RSA public key\n-            \/\/ or if sigBytes is invalid\n-            \/\/ return false rather than propagating the exception for\n-            \/\/ compatibility\/ease of use\n@@ -227,2 +227,0 @@\n-        } catch (IOException e) {\n-            throw new SignatureException(\"Signature encoding error\", e);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSASignature.java","additions":13,"deletions":15,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -762,3 +762,7 @@\n-            byte[] padded = padding.pad(data);\n-            return padded;\n-        } catch (GeneralSecurityException e) {\n+            RSAPadding.Output po = padding.pad(data);\n+            if (po.status()) {\n+                return po.result();\n+            } else {\n+                throw new ProviderException(\"Error padding data\");\n+            }\n+        } catch (InvalidKeyException | InvalidAlgorithmParameterException e) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Signature.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8302017\n+ * @summary Ensure that RSAPadding class refactoring w\/ RSAPadding.Output\n+ *         works as expected\n+ * @modules java.base\/sun.security.rsa\n+ *\/\n+import java.util.Arrays;\n+import sun.security.rsa.RSAPadding;\n+\n+public class RSAPaddingCheck {\n+\n+    private static int[] PADDING_TYPES =  {\n+        RSAPadding.PAD_BLOCKTYPE_1,\n+        RSAPadding.PAD_BLOCKTYPE_2,\n+        RSAPadding.PAD_NONE,\n+        RSAPadding.PAD_OAEP_MGF1,\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        int size = 2048 >> 3;\n+        byte[] testData = \"This is some random to-be-padded Data\".getBytes();\n+        for (int type : PADDING_TYPES) {\n+            byte[] data = (type == RSAPadding.PAD_NONE?\n+                    Arrays.copyOf(testData, size) : testData);\n+            System.out.println(\"Testing PaddingType: \" + type);\n+            RSAPadding padding = RSAPadding.getInstance(type, size);\n+            RSAPadding.Output po = padding.pad(data);\n+            if (!po.status()) {\n+                throw new RuntimeException(\"Unexpected padding op failure!\");\n+            }\n+            byte[] paddedData = po.result();\n+\n+            po = padding.unpad(paddedData);\n+            if (!po.status()) {\n+                throw new RuntimeException(\"Unexpected unpadding op failure!\");\n+            }\n+            byte[] data2 = po.result();\n+            if (!Arrays.equals(data, data2)) {\n+                throw new RuntimeException(\"diff check failure!\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/rsa\/RSAPaddingCheck.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}