{"files":[{"patch":"@@ -100,1 +100,1 @@\n-  GrowableArray<Klass*>* cls = state->get_classes_being_redefined();\n+  GrowableArray<Klass*>* redef_classes = state->get_classes_being_redefined();\n@@ -104,3 +104,3 @@\n-  if (cls == NULL) {\n-    cls = new(ResourceObj::C_HEAP, mtClass) GrowableArray<Klass*>(1, mtClass);\n-    state->set_classes_being_redefined(cls);\n+  if (redef_classes == NULL) {\n+    redef_classes = new(ResourceObj::C_HEAP, mtClass) GrowableArray<Klass*>(1, mtClass);\n+    state->set_classes_being_redefined(redef_classes);\n@@ -119,1 +119,1 @@\n-      if (cls->contains(ik)) {\n+      if (redef_classes->contains(ik)) {\n@@ -133,1 +133,1 @@\n-    cls->push(ik); \/\/ Add to the _classes_being_redefined list\n+    redef_classes->push(ik); \/\/ Add to the _classes_being_redefined list\n@@ -141,2 +141,2 @@\n-  GrowableArray<Klass*>* cls = state->get_classes_being_redefined();\n-  assert(cls != NULL, \"_classes_being_redefined is not allocated\");\n+  GrowableArray<Klass*>* redef_classes = state->get_classes_being_redefined();\n+  assert(redef_classes != NULL, \"_classes_being_redefined is not allocated\");\n@@ -148,1 +148,1 @@\n-    if (cls->length() > 0) {\n+    if (redef_classes->length() > 0) {\n@@ -150,1 +150,1 @@\n-      Klass* k = cls->pop();\n+      Klass* k = redef_classes->pop();\n@@ -156,2 +156,4 @@\n-    \/\/ Unlock after we finish all redefines for this class within the thread.\n-    if (!cls->contains(def_ik)) {\n+    \/\/ Unlock after we finish all redefines for this class within\n+    \/\/ the thread. Same class can be pushed to the list multiple\n+    \/\/ times (not more than once by each recursive redefinition).\n+    if (!redef_classes->contains(def_ik)) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -253,2 +253,2 @@\n-  inline void set_classes_being_redefined(GrowableArray<Klass*>* cls) {\n-    _classes_being_redefined = cls;\n+  inline void set_classes_being_redefined(GrowableArray<Klass*>* redef_classes) {\n+    _classes_being_redefined = redef_classes;\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8241390\n+ * @summary Test recursively redefines the same class. The test hangs if\n+ * a deadlock happens.\n+ * @requires vm.jvmti\n+ * @library \/test\/lib\n+ * @modules java.instrument\n+ * @compile TransformerDeadlockTest.java\n+ * @run driver TransformerDeadlockTest\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.lang.instrument.ClassFileTransformer;\n+import java.lang.instrument.IllegalClassFormatException;\n+import java.lang.instrument.Instrumentation;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.ProtectionDomain;\n+\n+\n+public class TransformerDeadlockTest {\n+\n+    private static String manifest = \"Premain-Class: \" +\n+                    TransformerDeadlockTest.Agent.class.getName() + \"\\n\"\n+                    + \"Can-Retransform-Classes: true\\n\"\n+                    + \"Can-Retransform-Classes: true\\n\";\n+\n+    private static String CP = System.getProperty(\"test.classes\");\n+\n+    public static void main(String args[]) throws Throwable {\n+        String agentJar = buildAgent();\n+        ProcessTools.executeProcess(\n+                ProcessTools.createJavaProcessBuilder(\n+                        \"-javaagent:\" + agentJar,\n+                        TransformerDeadlockTest.Agent.class.getName())\n+        ).shouldHaveExitValue(0);\n+    }\n+\n+    private static String buildAgent() throws Exception {\n+        Path jar = Files.createTempFile(Paths.get(\".\"), null, \".jar\");\n+        String jarPath = jar.toAbsolutePath().toString();\n+        ClassFileInstaller.writeJar(jarPath,\n+                ClassFileInstaller.Manifest.fromString(manifest),\n+                TransformerDeadlockTest.class.getName());\n+        return jarPath;\n+    }\n+\n+    public static class Agent implements ClassFileTransformer {\n+        private static Instrumentation instrumentation;\n+\n+        public static void premain(String agentArgs, Instrumentation inst) {\n+            instrumentation = inst;\n+        }\n+\n+        @Override\n+        public byte[] transform(\n+                ClassLoader loader,\n+                String className,\n+                Class<?> classBeingRedefined,\n+                ProtectionDomain protectionDomain,\n+                byte[] classfileBuffer)\n+                throws IllegalClassFormatException {\n+\n+            if (!TransformerDeadlockTest.class.getName().replace(\".\", \"\/\").equals(className)) {\n+                return null;\n+            }\n+            invokeRetransform();\n+            return classfileBuffer;\n+\n+        }\n+\n+        public static void main(String[] args) throws Exception {\n+            instrumentation.addTransformer(new TransformerDeadlockTest.Agent(), true);\n+\n+            try {\n+                instrumentation.retransformClasses(TransformerDeadlockTest.class);\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        private static void invokeRetransform() {\n+            try {\n+                instrumentation.retransformClasses(TransformerDeadlockTest.class);\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            } finally {\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/TransformerDeadlockTest.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -1,58 +0,0 @@\n-#!\/bin\/sh\n-\n-#\n-# Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-if [ \"${TESTSRC}\" = \"\" ]\n-then\n-  echo \"TESTSRC not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-echo \"TESTSRC=${TESTSRC}\"\n-\n-if [ \"${TESTJAVA}\" = \"\" ]\n-then\n-  echo \"TESTJAVA not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-echo \"TESTJAVA=${TESTJAVA}\"\n-\n-if [ \"${COMPILEJAVA}\" = \"\" ]\n-then\n-  COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-echo \"COMPILEJAVA=${COMPILEJAVA}\"\n-\n-if [ \"${TESTCLASSES}\" = \"\" ]\n-then\n-  echo \"TESTCLASSES not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-\n-JAVAC=\"${COMPILEJAVA}\/bin\/javac -g\"\n-JAR=\"${COMPILEJAVA}\/bin\/jar\"\n-\n-cp ${TESTSRC}\/$2.java $2.java\n-${JAVAC} ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} $2.java\n-${JAR} ${TESTTOOLVMOPTS} cvfm $1.jar ${TESTSRC}\/$1.mf $2.class\n-rm -f $2.class $2.java\n","filename":"test\/jdk\/java\/lang\/instrument\/MakeAgentJAR.sh","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,80 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.instrument.ClassFileTransformer;\n-import java.lang.instrument.IllegalClassFormatException;\n-import java.lang.instrument.Instrumentation;\n-import java.security.ProtectionDomain;\n-\n-\/**\n- * @test\n- * @bug 8241390\n- * @summary Test recursively redefines the same class. The test hangs if\n- * a deadlock happens.\n- * @run build TransformerDeadlockTest\n- * @run shell MakeAgentJAR.sh TransformerDeadlockTest TransformerDeadlockTest\n- * @run main\/othervm\/native -javaagent:TransformerDeadlockTest.jar TransformerDeadlockTest\n- *\/\n-public class TransformerDeadlockTest implements ClassFileTransformer {\n-    private static Instrumentation instrumentation;\n-\n-    public static void premain(String agentArgs, Instrumentation inst) {\n-        instrumentation = inst;\n-    }\n-\n-    @Override\n-    public byte[] transform(\n-            ClassLoader loader,\n-            String className,\n-            Class<?> classBeingRedefined,\n-            ProtectionDomain protectionDomain,\n-            byte[] classfileBuffer)\n-            throws IllegalClassFormatException {\n-\n-        if (!TransformerDeadlockTest.class.getName().replace(\".\", \"\/\").equals(className)) {\n-            return null;\n-        }\n-        invokeRetransform();\n-        return classfileBuffer;\n-\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        instrumentation.addTransformer(new TransformerDeadlockTest(), true);\n-\n-        try {\n-            instrumentation.retransformClasses(TransformerDeadlockTest.class);\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    private static void invokeRetransform() {\n-        try {\n-            instrumentation.retransformClasses(TransformerDeadlockTest.class);\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        } finally {\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/instrument\/TransformerDeadlockTest.java","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-Manifest-Version: 1.0\n-Premain-Class: TransformerDeadlockTest\n-Can-Redefine-Classes: true\n-Can-Retransform-Classes: true\n","filename":"test\/jdk\/java\/lang\/instrument\/TransformerDeadlockTest.mf","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"}]}