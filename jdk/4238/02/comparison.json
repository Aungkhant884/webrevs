{"files":[{"patch":"@@ -1721,1 +1721,1 @@\n-      length->set_req(0, init->proj_out_or_null(0));\n+      length->set_req(TypeFunc::Control, init->proj_out_or_null(TypeFunc::Control));\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3985,0 +3985,1 @@\n+      ccast = _gvn.transform(ccast);\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4446,0 +4446,25 @@\n+\n+    \/\/ The CastIINode created in GraphKit::new_array (in AllocateArrayNode::make_ideal_length) must stay below\n+    \/\/ the allocation (i.e. is only valid if the allocation succeeds):\n+    \/\/ 1) replace CastIINode with AllocateArrayNode's length here\n+    \/\/ 2) Create CastIINode again once allocation has moved (see below) at the end of this method\n+    Node* init_control = init->proj_out(TypeFunc::Control);\n+    Node* alloc_length = alloc->Ideal_length();\n+#ifdef ASSERT\n+    Node* prev_cast = NULL;\n+#endif\n+    for (uint i = 0; i < init_control->outcnt(); i++) {\n+      Node *init_out = init_control->raw_out(i);\n+      if (init_out->is_CastII() && init_out->in(0) == init_control && init_out->in(1) == alloc_length) {\n+#ifdef ASSERT\n+        if (prev_cast == NULL) {\n+          prev_cast = init_out;\n+          assert(_gvn.hash_find(prev_cast) != NULL, \"not found\");\n+        } else {\n+          assert(_gvn.hash_find(prev_cast) == _gvn.hash_find(init_out), \"not equal CastIINode\");\n+        }\n+#endif\n+        C->gvn_replace_by(init_out, alloc_length);\n+        record_for_igvn(init_out);\n+      }\n+    }\n@@ -4477,0 +4502,14 @@\n+\n+    \/\/ Cast length on remaining path to be as narrow as possible\n+    \/\/ previous CastNode inserted when creating AllocateArrayNode\n+    \/\/ is removed in early step in LibraryCallKit::inline_arraycopy\n+    Node* length = alloc->in(AllocateNode::ALength);\n+    if (map()->find_edge(length) >= 0) {\n+      Node* ccast = alloc->make_ideal_length(ary_type, &_gvn);\n+      if (ccast != length) {\n+        _gvn.set_type_bottom(ccast);\n+        ccast = _gvn.transform(ccast);\n+        record_for_igvn(ccast);\n+        replace_in_map(length, ccast);\n+      }\n+    }\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"}]}