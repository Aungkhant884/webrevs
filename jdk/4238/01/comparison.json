{"files":[{"patch":"@@ -1721,1 +1721,1 @@\n-      length->set_req(0, init->proj_out_or_null(0));\n+      length->set_req(TypeFunc::Control, init->proj_out_or_null(TypeFunc::Control));\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4446,0 +4446,34 @@\n+\n+    \/\/ Replace InitializeNode's output_control uses' control to AllocateArrayNode's input control.\n+    \/\/ CastIINode might created in GraphKit::new_array (in AllocateArrayNode::make_ideal_length) and later uses.\n+    \/\/ CastIINode's input_control should still use InitializeNode's output_control after move allocation.\n+    \/\/ Otherwise it breaks constraint assumption.\n+    \/\/\n+    \/\/ Because alloc is tightly coupled, checking InitializeNode's control proj's output for\n+    \/\/ for CastIINode. After finding CastIINode, actions include:\n+    \/\/ 1. Replace CastIINode with AllocateArrayNode's length.\n+    \/\/ 2. Create CastIINode again in arraycopy_move_allocation_here after control flow adjustion.\n+    Node* init_control = init->proj_out(TypeFunc::Control);\n+    Node* alloc_length = alloc->Ideal_length();\n+#ifdef ASSERT\n+    Node* prev_cast = NULL;\n+#endif\n+    for (uint i = 0; i < init_control->outcnt(); i++) {\n+      Node *init_out = init_control->raw_out(i);\n+      if (init_out->is_CastII() && init_out->in(0) == init_control && init_out->in(1) == alloc_length) {\n+#ifdef ASSERT\n+        if (prev_cast == NULL) {\n+          prev_cast = init_out;\n+        } else {\n+          \/\/ CastII must be same\n+          CastIINode* prev = prev_cast->as_CastII();\n+          CastIINode* cur = init_out->as_CastII();\n+          assert(prev->has_range_check() == cur->has_range_check(), \"not same\");\n+          assert(prev->type()->is_int()->_lo == cur->type()->is_int()->_lo, \"not same\");\n+          assert(prev->type()->is_int()->_hi == cur->type()->is_int()->_hi, \"not same\");\n+        }\n+#endif\n+        C->gvn_replace_by(init_out, alloc_length);\n+        record_for_igvn(init_out);\n+      }\n+    }\n@@ -4477,0 +4511,13 @@\n+\n+    \/\/ Cast length on remaining path to be as narrow as possible\n+    \/\/ previous CastNode inserted when creating AllocateArrayNode\n+    \/\/ is removed in early step in LibraryCallKit::inline_arraycopy\n+    Node* length = alloc->in(AllocateNode::ALength);\n+    if (map()->find_edge(length) >= 0) {\n+      Node* ccast = alloc->make_ideal_length(ary_type, &_gvn);\n+      if (ccast != length) {\n+        _gvn.set_type_bottom(ccast);\n+        record_for_igvn(ccast);\n+        replace_in_map(length, ccast);\n+      }\n+    }\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"}]}