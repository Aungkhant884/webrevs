{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -391,1 +391,1 @@\n-        return SliceOps.makeDouble(this, (long) 0, maxSize);\n+        return SliceOps.makeDouble(this, 0L, maxSize);\n@@ -425,1 +425,1 @@\n-        return boxed().distinct().mapToDouble(i -> (double) i);\n+        return boxed().distinct().mapToDouble(i -> i);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/DoublePipeline.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -438,1 +438,1 @@\n-        return boxed().distinct().mapToLong(i -> (long) i);\n+        return boxed().distinct().mapToLong(i -> i);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/LongPipeline.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -310,1 +310,1 @@\n-                ph.wrapAndCopyInto((Sink<P_OUT>) consumer::accept, spliterator);\n+                ph.wrapAndCopyInto(consumer::accept, spliterator);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/StreamSpliterators.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}