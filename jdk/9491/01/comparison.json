{"files":[{"patch":"@@ -52,0 +52,1 @@\n+    static final CountDownLatch canFill = new CountDownLatch(NTHREADS);\n@@ -53,0 +54,1 @@\n+    static volatile Throwable exception;\n@@ -57,1 +59,4 @@\n-     * executing. Introduce OOM using fillHeap during runs.\n+     * executing. Introduce OOM using fillHeap during runs. In\n+     * addition to testing AQS, the CountDownLatches ensure that\n+     * methods execute at least once before OutOfMemory occurs, to\n+     * avoid uncontrollable impact of OOME during class-loading.\n@@ -64,0 +69,1 @@\n+        canFill.await();\n@@ -72,0 +78,3 @@\n+        Throwable ex = exception;\n+        if (ex != null)\n+            throw ex;\n@@ -92,0 +101,1 @@\n+                lock.lock();\n@@ -93,1 +103,0 @@\n-                    lock.lock();\n@@ -101,1 +110,2 @@\n-                if (i == 2) \/\/ Subsequent AQS methods encounter OOME\n+                if (i == 2) {  \/\/ Subsequent AQS methods encounter OOME\n+                    canFill.countDown();\n@@ -103,0 +113,1 @@\n+                }\n@@ -104,1 +115,0 @@\n-        } catch (Throwable ex) { \/\/ Could be InterruptedExeption or OOME\n@@ -106,1 +116,5 @@\n-            System.exit(0); \/\/ avoid getting stuck trying to recover\n+            System.gc(); \/\/ avoid getting stuck while exiting\n+        } catch (Throwable ex) {\n+            data = null;\n+            System.gc(); \/\/ avoid nested OOME\n+            exception = ex;\n","filename":"test\/jdk\/java\/util\/concurrent\/locks\/Lock\/OOMEInAQS.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"}]}