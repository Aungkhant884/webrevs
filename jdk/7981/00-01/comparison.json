{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+#include \"memory\/allocation.hpp\"\n@@ -3430,1 +3431,1 @@\n-  jvmtiError err =JVMTI_ERROR_NOT_AVAILABLE;\n+  NULL_CHECK(property, JVMTI_ERROR_NULL_POINTER);\n@@ -3434,2 +3435,9 @@\n-      if (p->set_writeable_value(value_ptr)) {\n-        err =  JVMTI_ERROR_NONE;\n+      switch (p->set_writeable_value(value_ptr, AllocFailStrategy::RETURN_NULL)) {\n+      case SystemProperty::SUCCESS:\n+        return JVMTI_ERROR_NONE;\n+      case SystemProperty::OOM:\n+        return JVMTI_ERROR_OUT_OF_MEMORY;\n+      case SystemProperty::NOT_WRITEABLE:\n+      default:\n+        \/\/ We found a property, but it's not writeable\n+        return JVMTI_ERROR_NOT_AVAILABLE;\n@@ -3439,1 +3447,3 @@\n-  return err;\n+\n+  \/\/ We cannot find a property of the given name\n+  return JVMTI_ERROR_NOT_AVAILABLE;\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -128,1 +128,6 @@\n-void PathString::set_value(const char *value) {\n+bool PathString::set_value(const char *value, AllocFailType alloc_failmode) {\n+  char* new_value = AllocateHeap(strlen(value)+1, mtArguments, alloc_failmode);\n+  if (new_value == NULL) {\n+    assert(alloc_failmode == AllocFailStrategy::RETURN_NULL, \"must be\");\n+    return false;\n+  }\n@@ -132,2 +137,1 @@\n-  _value = AllocateHeap(strlen(value)+1, mtArguments);\n-  assert(_value != NULL, \"Unable to allocate space for new path value\");\n+  _value = new_value;\n@@ -135,0 +139,1 @@\n+  return true;\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"memory\/allocation.hpp\"\n@@ -69,1 +70,2 @@\n-  void set_value(const char *value);\n+  \/\/ return false iff OOM && alloc_failmode == AllocFailStrategy::RETURN_NULL\n+  bool set_value(const char *value, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n@@ -116,0 +118,6 @@\n+  enum SetWriteableValueResult {\n+    SUCCESS,\n+    NOT_WRITEABLE,\n+    OOM\n+  };\n+\n@@ -123,4 +131,7 @@\n-  bool set_writeable_value(const char *value) {\n-    if (writeable()) {\n-      set_value(value);\n-      return true;\n+  SetWriteableValueResult set_writeable_value(const char *value,  AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM) {\n+    if (!writeable()) {\n+      return NOT_WRITEABLE;\n+    }\n+    if (!set_value(value, alloc_failmode)) {\n+      assert(alloc_failmode == AllocFailStrategy::RETURN_NULL, \"must be\");\n+      return OOM;\n@@ -128,1 +139,1 @@\n-    return false;\n+    return SUCCESS;\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":17,"deletions":6,"binary":false,"changes":23,"status":"modified"}]}