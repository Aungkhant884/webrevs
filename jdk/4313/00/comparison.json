{"files":[{"patch":"@@ -41,1 +41,0 @@\n-import java.net.MulticastSocket;\n@@ -48,1 +47,0 @@\n-import java.nio.channels.DatagramChannel;\n@@ -62,0 +60,1 @@\n+import static jdk.test.lib.NetworkConfiguration.isSameInterface;\n@@ -242,1 +241,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_IF).equals(ni));\n+        assertTrue(isSameInterface(s.getOption(IP_MULTICAST_IF), ni));\n","filename":"test\/jdk\/java\/net\/DatagramSocket\/DatagramSocketMulticasting.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+        System.out.printf(\"Host address: %s, Buffer limit: %d%n\", HOST_ADDR, BUF_LIMIT);\n","filename":"test\/jdk\/java\/net\/DatagramSocket\/SendReceiveMaxSize.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import java.util.Objects;\n@@ -95,0 +96,29 @@\n+    \/**\n+     * Returns true if the two interfaces point to the same network interface.\n+     *\n+     * @implNote\n+     * This method first looks at whether the two interfaces are\n+     * {@linkplain NetworkInterface#equals(Object) equals}, and if so it returns\n+     * true. Otherwise, it looks at whether the two interfaces have the same\n+     * {@linkplain NetworkInterface#getName() name} and\n+     * {@linkplain NetworkInterface#getIndex() index}, and if so returns true.\n+     * Otherwise, it returns false.\n+     *\n+     * @apiNote\n+     * This method ignores differences in the addresses to which the network\n+     * interfaces are bound, to cater for possible reconfiguration that might\n+     * have happened between the time at which each interface configuration\n+     * was looked up.\n+     *\n+     * @param ni1 A network interface, may be {@code null}\n+     * @param ni2 An other network interface, may be {@code null}\n+     * @return {@code true} if the two network interfaces have the same name\n+     *         and index, {@code false} otherwise.\n+     *\/\n+    public static boolean isSameInterface(NetworkInterface ni1, NetworkInterface ni2) {\n+        if (Objects.equals(ni1, ni2)) return true;\n+        if (ni1 == null || ni2 == null) return false;\n+        if (ni1.getIndex() != ni2.getIndex()) return false;\n+        return Objects.equals(ni1.getName(), ni2.getName());\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/NetworkConfiguration.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"}]}