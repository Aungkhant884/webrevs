{"files":[{"patch":"@@ -65,1 +65,1 @@\n-        \/\/ For non-string hidden classes the call to do_cld is made when the class\n+        \/\/ For non-strong hidden classes the call to do_cld is made when the class\n","filename":"src\/hotspot\/share\/oops\/instanceMirrorKlass.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-     * local classes.\n+     * anonymous and local classes.\n@@ -37,1 +37,1 @@\n-     *            if {@code clazz} denotes a local class.\n+     *            if {@code clazz} denotes an anonymous or local class.\n@@ -53,1 +53,1 @@\n-        \/\/ Must be a local class\n+        \/\/ Must be an anonymous or local class\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.meta\/src\/jdk\/vm\/ci\/meta\/MetaUtil.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,6 @@\n+ * DESCRIPTION\n+ *     Try to cast an object of a hidden class to its parent (called CastToParentTest)\n+ *         - (CastToParentTest) o\n+ *         - o.getClass().cast(<hiddenClassObj>);\n+ *     and cast to its grandparent (java.lang.Object).\n+ *\n@@ -38,1 +44,0 @@\n-\/\/ This test is based on vmTestbase\/vm\/mlvm\/anonloader\/func\/castToGrandparent\/Test.java\n@@ -61,0 +66,11 @@\n+\n+\n+        \/\/ Cast hidden class to its grandparent.\n+        java.lang.Object grandparentObj = (java.lang.Object)hiddenClassObj;\n+\n+        if (!grandparentObj.equals(hiddenClassObj)) {\n+            throw new RuntimeException(\"Hidden class object cannot be cast to grandparent\");\n+        }\n+\n+        \/\/ Try to cast using a different mechanism.\n+        new java.lang.Object().getClass().cast(hiddenClassObj);\n@@ -62,0 +78,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/HiddenClasses\/CastToParentTest.java","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-\/\/ This test is based on test vmTestbase\/vm\/mlvm\/anonloader\/func\/isGarbageCollected\/Test.java\n","filename":"test\/hotspot\/jtreg\/runtime\/HiddenClasses\/GCHiddenClass.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+ * DESCRIPTION\n+ *     An exception is thrown by a hidden class.  Verify that the exception's\n+ *     stack trace contains the name of the current test class (i.e., verify\n+ *     that the stack trace is not broken).\n@@ -41,1 +45,0 @@\n-\/\/ This test is based on vmTestbase\/vm\/mlvm\/anonloader\/func\/classNameInStackTrace\/Test.java\n","filename":"test\/hotspot\/jtreg\/runtime\/HiddenClasses\/HiddenClassStack.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-\/\/ This test is based on vmTestbase\/vm\/mlvm\/anonloader\/share\/StressClassLoadingTest.java\n","filename":"test\/hotspot\/jtreg\/runtime\/HiddenClasses\/StressHiddenClasses.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-\/\/ This is based on test compiler\/classUnloading\/anonymousClass\/TestAnonymousClassUnloading.java\n","filename":"test\/hotspot\/jtreg\/runtime\/HiddenClasses\/TestHiddenClassUnloading.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,81 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- * @key randomness\n- * @modules java.base\/jdk.internal.misc\n- *\n- * @summary converted from VM Testbase vm\/mlvm\/anonloader\/func\/castToGrandparent.\n- * VM Testbase keywords: [feature_mlvm]\n- * VM Testbase readme:\n- * DESCRIPTION\n- *     Cast an object loaded with a hidden class to superclass of its parent class. This cast should succeed.\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- *\n- * @comment build test class and indify classes\n- * @build vm.mlvm.anonloader.func.castToGrandparent.Test\n- * @run driver vm.mlvm.share.IndifiedClassesBuilder\n- *\n- * @run main\/othervm vm.mlvm.anonloader.func.castToGrandparent.Test\n- *\/\n-\n-package vm.mlvm.anonloader.func.castToGrandparent;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodHandles.Lookup;\n-\n-import vm.mlvm.anonloader.share.AnonkTestee01;\n-import vm.mlvm.anonloader.share.AnonkTestee02;\n-import vm.mlvm.share.Env;\n-import vm.mlvm.share.MlvmTest;\n-import vm.share.FileUtils;\n-\n-public class Test extends MlvmTest {\n-    private static final Class<?> PARENT = AnonkTestee02.class;\n-\n-    @Override\n-    public boolean run() throws Exception {\n-        byte[] classBytes = FileUtils.readClass(PARENT.getName());\n-        Lookup lookup = MethodHandles.lookup();\n-        Lookup ank_lookup = MethodHandles.privateLookupIn(PARENT, lookup);\n-        Class<?> cls = ank_lookup.defineHiddenClass(classBytes, true).lookupClass();\n-        Object anonObject = cls.newInstance();\n-        \/\/ Try to cast hidden class to its grandparent\n-        AnonkTestee01 anonCastToParent = (AnonkTestee01) anonObject;\n-        if ( anonCastToParent.equals(anonObject) )\n-            Env.traceNormal(\"Hidden object can be cast to original one\");\n-\n-        \/\/ Try to cast using another method\n-        new AnonkTestee01().getClass().cast(anonObject);\n-\n-        Env.traceNormal(\"Hidden class can be cast to original one\");\n-\n-        return true;\n-    }\n-\n-    public static void main(String[] args) { MlvmTest.launch(args); }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/func\/castToGrandparent\/Test.java","additions":0,"deletions":81,"binary":false,"changes":81,"status":"deleted"},{"patch":"@@ -1,80 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- * @modules java.base\/jdk.internal.misc\n- *\n- * @summary converted from VM Testbase vm\/mlvm\/anonloader\/func\/castToParent.\n- * VM Testbase keywords: [feature_mlvm, clarify-spec, exclude]\n- * VM Testbase comments: 8199227\n- * VM Testbase readme:\n- * DESCRIPTION\n- *     Try to cast an object of a class, which is loaded by Unsafe.defineAnonymousClass to its\n- *     parent (called AnonkTestee01) using the following cast methods:\n- *         - (AnonkTestee01) o\n- *         - o.getClass().cast(new AnonkTestee01());\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- * @ignore 8199227\n- *\n- * @comment build test class and indify classes\n- * @build vm.mlvm.anonloader.func.castToParent.Test\n- * @run driver vm.mlvm.share.IndifiedClassesBuilder\n- *\n- * @run main\/othervm vm.mlvm.anonloader.func.castToParent.Test\n- *\/\n-\n-package vm.mlvm.anonloader.func.castToParent;\n-\n-import vm.mlvm.anonloader.share.AnonkTestee01;\n-import vm.mlvm.share.Env;\n-import vm.mlvm.share.MlvmTest;\n-import vm.share.FileUtils;\n-import vm.share.UnsafeAccess;\n-\n-public class Test extends MlvmTest {\n-    private static final Class<?> PARENT = AnonkTestee01.class;\n-\n-    public boolean run() throws Exception {\n-        byte[] classBytes = FileUtils.readClass(PARENT.getName());\n-        Class<?> cls = UnsafeAccess.unsafe.defineAnonymousClass(PARENT,\n-                classBytes, null);\n-        Object o = cls.newInstance();\n-        \/\/ Try to cast anonymous class to its parent\n-        AnonkTestee01 anonCastToParent = (AnonkTestee01) o;\n-        if ( anonCastToParent.equals(o) )\n-            Env.traceNormal(\"Anonymous object can be cast to original one\");\n-\n-        \/\/ Cast the class\n-        new AnonkTestee01().getClass().cast(o);\n-\n-        Env.traceNormal(\"Anonymous can be cast to original class\");\n-\n-        return true;\n-    }\n-\n-    public static void main(String[] args) { MlvmTest.launch(args); }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/func\/castToParent\/Test.java","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"},{"patch":"@@ -1,90 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- * @key randomness\n- * @modules java.base\/jdk.internal.misc\n- *\n- * @summary converted from VM Testbase vm\/mlvm\/anonloader\/func\/classNameInStackTrace.\n- * VM Testbase keywords: [feature_mlvm]\n- * VM Testbase readme:\n- * DESCRIPTION\n- *     An exception is thrown by a hidden class.  Verify that the exception's\n- *     stack trace contains name of the current test class (i.e., verify\n- *     that the stack trace is not broken)\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- *\n- * @comment build test class and indify classes\n- * @build vm.mlvm.anonloader.func.classNameInStackTrace.Test\n- * @run driver vm.mlvm.share.IndifiedClassesBuilder\n- *\n- * @run main\/othervm vm.mlvm.anonloader.func.classNameInStackTrace.Test\n- *\/\n-\n-package vm.mlvm.anonloader.func.classNameInStackTrace;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.PrintStream;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodHandles.Lookup;\n-\n-import jdk.test.lib.compiler.InMemoryJavaCompiler;\n-\n-import vm.mlvm.share.MlvmTest;\n-\n-public class Test extends MlvmTest {\n-\n-    public boolean run() throws Exception {\n-        String newClass =\n-            \"package vm.mlvm.anonloader.func.classNameInStackTrace; \" +\n-            \"public class HashThrow { \" +\n-            \"    @Override \" +\n-            \"    public int hashCode() { \" +\n-            \"        throw new RuntimeException(\\\"Making fun of errors\\\"); \" +\n-            \"    } }\";\n-        byte[] classBytes = InMemoryJavaCompiler.compile(\n-            \"vm.mlvm.anonloader.func.classNameInStackTrace.HashThrow\", newClass);\n-        Lookup lookup = MethodHandles.lookup();\n-        Class<?> cls = lookup.defineHiddenClass(classBytes, true).lookupClass();\n-        try {\n-            \/\/ hashCode() throws an exception\n-            cls.newInstance().hashCode();\n-            return false;\n-\n-        } catch ( RuntimeException e ) {\n-            ByteArrayOutputStream byteOS = new ByteArrayOutputStream();\n-            PrintStream printStream = new PrintStream(byteOS);\n-            e.printStackTrace(printStream);\n-            printStream.close();\n-            String stackTrace = byteOS.toString(\"ASCII\");\n-            getLog().display(\"Caught exception stack trace: \" + stackTrace);\n-            return stackTrace.contains(Test.class.getName());\n-        }\n-    }\n-\n-    public static void main(String[] args) { MlvmTest.launch(args); }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/func\/classNameInStackTrace\/Test.java","additions":0,"deletions":90,"binary":false,"changes":90,"status":"deleted"}]}