{"files":[{"patch":"@@ -275,1 +275,2 @@\n-        if (!JceSecurityManager.INSTANCE.isCallerTrusted(provider)) {\n+        if (!JceSecurityManager.INSTANCE.isCallerTrusted(\n+                JceSecurityManager.WALKER.getCallerClass(), provider)) {\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/Cipher.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.StackWalker.*;\n@@ -42,2 +43,0 @@\n- * <p>Note that this security manager is never installed, only instantiated.\n- *\n@@ -48,3 +47,1 @@\n-\n-@SuppressWarnings(\"removal\")\n-final class JceSecurityManager extends SecurityManager {\n+final class JceSecurityManager {\n@@ -64,0 +61,1 @@\n+    static final StackWalker WALKER;\n@@ -69,6 +67,12 @@\n-        INSTANCE = AccessController.doPrivileged(\n-                new PrivilegedAction<>() {\n-                    public JceSecurityManager run() {\n-                        return new JceSecurityManager();\n-                    }\n-                });\n+\n+        @SuppressWarnings(\"removal\")\n+        JceSecurityManager dummySecurityManager = AccessController.doPrivileged(\n+                (PrivilegedAction<JceSecurityManager>) JceSecurityManager::new);\n+        INSTANCE = dummySecurityManager;\n+\n+        @SuppressWarnings(\"removal\")\n+        StackWalker dummyWalker = AccessController.doPrivileged(\n+                (PrivilegedAction<StackWalker>) (() -> StackWalker.getInstance(\n+                        Option.RETAIN_CLASS_REFERENCE)));\n+\n+        WALKER = dummyWalker;\n@@ -85,1 +89,2 @@\n-    CryptoPermission getCryptoPermission(String alg) {\n+    CryptoPermission getCryptoPermission(String theAlg) {\n+\n@@ -88,1 +93,1 @@\n-        alg = alg.toUpperCase(Locale.ENGLISH);\n+        final String alg = theAlg.toUpperCase(Locale.ENGLISH);\n@@ -103,21 +108,10 @@\n-        Class<?>[] context = getClassContext();\n-        URL callerCodeBase = null;\n-        int i;\n-        for (i=0; i<context.length; i++) {\n-            Class<?> cls = context[i];\n-            callerCodeBase = JceSecurity.getCodeBase(cls);\n-            if (callerCodeBase != null) {\n-                break;\n-            } else {\n-                if (cls.getName().startsWith(\"javax.crypto.\")) {\n-                    \/\/ skip jce classes since they aren't the callers\n-                    continue;\n-                }\n-                \/\/ use default permission when the caller is system classes\n-                return defaultPerm;\n-            }\n-        }\n-\n-        if (i == context.length) {\n-            return defaultPerm;\n-        }\n+        return WALKER.walk(s -> s.map(StackFrame::getDeclaringClass)\n+                .filter(c -> !c.getPackageName().equals(\"javax.crypto\"))\n+                .map(cls -> {\n+                    URL callerCodeBase = JceSecurity.getCodeBase(cls);\n+                    return (callerCodeBase != null) ?\n+                            getCryptoPermissionFromURL(callerCodeBase,\n+                                    alg, defaultPerm) : defaultPerm;})\n+                .findFirst().get()         \/\/ nulls not possible for Optional\n+        );\n+    }\n@@ -125,0 +119,2 @@\n+    CryptoPermission getCryptoPermissionFromURL(URL callerCodeBase,\n+            String alg, CryptoPermission defaultPerm) {\n@@ -234,1 +230,1 @@\n-    boolean isCallerTrusted(Provider provider) {\n+    boolean isCallerTrusted(Class<?> caller, Provider provider) {\n@@ -236,6 +232,1 @@\n-        Class<?>[] context = getClassContext();\n-        if (context.length >= 3) {\n-            \/\/ context[0]: class javax.crypto.JceSecurityManager\n-            \/\/ context[1]: class javax.crypto.Cipher (or other JCE API class)\n-            \/\/ context[2]: this is what we are gonna check\n-            Class<?> caller = context[2];\n+        if (caller != null) {\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/JceSecurityManager.java","additions":32,"deletions":41,"binary":false,"changes":73,"status":"modified"}]}