{"files":[{"patch":"@@ -105,1 +105,1 @@\n-    private int type;\n+    private final int type;\n@@ -110,1 +110,1 @@\n-    private int numComponents;\n+    private final int numComponents;\n@@ -245,0 +245,1 @@\n+\n@@ -278,1 +279,1 @@\n-     * @param  numcomponents the number of components in the color space\n+     * @param  numComponents the number of components in the color space\n@@ -280,1 +281,1 @@\n-    protected ColorSpace(int type, int numcomponents) {\n+    protected ColorSpace(int type, int numComponents) {\n@@ -282,1 +283,1 @@\n-        this.numComponents = numcomponents;\n+        this.numComponents = numComponents;\n@@ -444,2 +445,2 @@\n-     * @param colorvalue a float array with length of at least the number of\n-     *        components in this {@code ColorSpace}\n+     * @param  colorvalue a float array with length of at least the number of\n+     *         components in this {@code ColorSpace}\n@@ -511,5 +512,1 @@\n-        if ((idx < 0) || (idx > numComponents - 1)) {\n-            throw new IllegalArgumentException(\n-                \"Component index out of range: \" + idx);\n-        }\n-\n+        rangeCheck(idx);\n@@ -576,4 +573,1 @@\n-        if ((component < 0) || (component > numComponents - 1)) {\n-            throw new IllegalArgumentException(\n-                \"Component index out of range: \" + component);\n-        }\n+        rangeCheck(component);\n@@ -595,4 +589,1 @@\n-        if ((component < 0) || (component > numComponents - 1)) {\n-            throw new IllegalArgumentException(\n-                \"Component index out of range: \" + component);\n-        }\n+        rangeCheck(component);\n@@ -602,2 +593,6 @@\n-    \/*\n-     * Returns {@code true} if {@code cspace} is the XYZspace.\n+    \/**\n+     * Checks that {@code component} is in range of the number of components.\n+     *\n+     * @param  component the component index\n+     * @throws IllegalArgumentException if component is less than 0 or greater\n+     *         than {@code numComponents - 1}\n@@ -605,2 +600,5 @@\n-    static boolean isCS_CIEXYZ(ColorSpace cspace) {\n-        return (cspace == XYZspace);\n+    final void rangeCheck(int component) {\n+        if (component < 0 || component > getNumComponents() - 1) {\n+            throw new IllegalArgumentException(\n+                    \"Component index out of range: \" + component);\n+        }\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/color\/ColorSpace.java","additions":22,"deletions":24,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -572,4 +572,1 @@\n-        if ((component < 0) || (component > this.getNumComponents() - 1)) {\n-            throw new IllegalArgumentException(\n-                \"Component index out of range: \" + component);\n-        }\n+        rangeCheck(component);\n@@ -598,4 +595,1 @@\n-        if ((component < 0) || (component > this.getNumComponents() - 1)) {\n-            throw new IllegalArgumentException(\n-                \"Component index out of range: \" + component);\n-        }\n+        rangeCheck(component);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/color\/ICC_ColorSpace.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -118,4 +118,1 @@\n-    float theGamma;\n-\n-        theGamma = super.getGamma(ICC_Profile.icSigGrayTRCTag);\n-        return theGamma;\n+        return getGamma(ICC_Profile.icSigGrayTRCTag);\n@@ -143,4 +140,1 @@\n-    short[]    theTRC;\n-\n-        theTRC = super.getTRC(ICC_Profile.icSigGrayTRCTag);\n-        return theTRC;\n+        return getTRC(ICC_Profile.icSigGrayTRCTag);\n@@ -148,1 +142,0 @@\n-\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/color\/ICC_ProfileGray.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-     * @param p the CMM ID for the profile.\n+     * @param  p the CMM ID for the profile.\n@@ -116,1 +116,1 @@\n-     * @param pdi\n+     * @param  pdi\n@@ -146,16 +146,6 @@\n-        float[][] theMatrix = new float[3][3];\n-        float[] tmpMatrix;\n-\n-        tmpMatrix = getXYZTag(ICC_Profile.icSigRedColorantTag);\n-        theMatrix[0][0] = tmpMatrix[0];\n-        theMatrix[1][0] = tmpMatrix[1];\n-        theMatrix[2][0] = tmpMatrix[2];\n-        tmpMatrix = getXYZTag(ICC_Profile.icSigGreenColorantTag);\n-        theMatrix[0][1] = tmpMatrix[0];\n-        theMatrix[1][1] = tmpMatrix[1];\n-        theMatrix[2][1] = tmpMatrix[2];\n-        tmpMatrix = getXYZTag(ICC_Profile.icSigBlueColorantTag);\n-        theMatrix[0][2] = tmpMatrix[0];\n-        theMatrix[1][2] = tmpMatrix[1];\n-        theMatrix[2][2] = tmpMatrix[2];\n-        return theMatrix;\n+        float[] red = getXYZTag(ICC_Profile.icSigRedColorantTag);\n+        float[] green = getXYZTag(ICC_Profile.icSigGreenColorantTag);\n+        float[] blue = getXYZTag(ICC_Profile.icSigBlueColorantTag);\n+        return new float[][]{{red[0], green[0], blue[0]},\n+                             {red[1], green[1], blue[1]},\n+                             {red[2], green[2], blue[2]}};\n@@ -184,0 +174,3 @@\n+     * @throws IllegalArgumentException if the component is not\n+     *         {@code REDCOMPONENT}, {@code GREENCOMPONENT}, or\n+     *         {@code BLUECOMPONENT}\n@@ -188,23 +181,1 @@\n-    float theGamma;\n-    int theSignature;\n-\n-        switch (component) {\n-        case REDCOMPONENT:\n-            theSignature = ICC_Profile.icSigRedTRCTag;\n-            break;\n-\n-        case GREENCOMPONENT:\n-            theSignature = ICC_Profile.icSigGreenTRCTag;\n-            break;\n-\n-        case BLUECOMPONENT:\n-            theSignature = ICC_Profile.icSigBlueTRCTag;\n-            break;\n-\n-        default:\n-            throw new IllegalArgumentException(\"Must be Red, Green, or Blue\");\n-        }\n-\n-        theGamma = super.getGamma(theSignature);\n-\n-        return theGamma;\n+        return super.getGamma(toTag(component));\n@@ -235,0 +206,3 @@\n+     * @throws IllegalArgumentException if the component is not\n+     *         {@code REDCOMPONENT}, {@code GREENCOMPONENT}, or\n+     *         {@code BLUECOMPONENT}\n@@ -239,23 +213,1 @@\n-    short[] theTRC;\n-    int theSignature;\n-\n-        switch (component) {\n-        case REDCOMPONENT:\n-            theSignature = ICC_Profile.icSigRedTRCTag;\n-            break;\n-\n-        case GREENCOMPONENT:\n-            theSignature = ICC_Profile.icSigGreenTRCTag;\n-            break;\n-\n-        case BLUECOMPONENT:\n-            theSignature = ICC_Profile.icSigBlueTRCTag;\n-            break;\n-\n-        default:\n-            throw new IllegalArgumentException(\"Must be Red, Green, or Blue\");\n-        }\n-\n-        theTRC = super.getTRC(theSignature);\n-\n-        return theTRC;\n+        return super.getTRC(toTag(component));\n@@ -264,0 +216,18 @@\n+    \/**\n+     * Converts the {@code ICC_ProfileRGB} constant to the appropriate tag.\n+     *\n+     * @param  component the {@code ICC_ProfileRGB} constant\n+     * @return the tag signature\n+     * @throws IllegalArgumentException if the component is not\n+     *         {@code REDCOMPONENT}, {@code GREENCOMPONENT}, or\n+     *         {@code BLUECOMPONENT}\n+     *\/\n+    private static int toTag(int component) {\n+        return switch (component) {\n+            case REDCOMPONENT -> ICC_Profile.icSigRedTRCTag;\n+            case GREENCOMPONENT -> ICC_Profile.icSigGreenTRCTag;\n+            case BLUECOMPONENT -> ICC_Profile.icSigBlueTRCTag;\n+            default -> throw new IllegalArgumentException(\n+                    \"Must be Red, Green, or Blue\");\n+        };\n+    }\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/color\/ICC_ProfileRGB.java","additions":34,"deletions":64,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.color.ICC_Profile;\n+import java.awt.color.ICC_ProfileGray;\n+import java.awt.color.ProfileDataException;\n+\n+\/**\n+ * @test\n+ * @bug 8254370\n+ * @summary Tests basic ICC_ProfileGray functionality\n+ *\/\n+public final class ICC_ProfileGrayTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        ICC_Profile csProfile = ICC_Profile.getInstance(ColorSpace.CS_GRAY);\n+        ICC_Profile dataProfile = ICC_Profile.getInstance(csProfile.getData());\n+        ICC_Profile stringProfile = ICC_Profile.getInstance(\"GRAY.pf\");\n+        test(csProfile);\n+        test(dataProfile);\n+        test(stringProfile);\n+    }\n+\n+    private static void test(ICC_Profile profile) {\n+        \/\/ Gray profile should be implemented as ICC_ProfileGray and includes\n+        \/\/ the mediaWhitePointTag and grayTRCTag tags\n+        if (!(profile instanceof ICC_ProfileGray)\n+                || profile.getData(ICC_Profile.icSigMediaWhitePointTag) == null\n+                || profile.getData(ICC_Profile.icSigGrayTRCTag) == null) {\n+            throw new RuntimeException(\"Wrong profile: \" + profile);\n+        }\n+\n+        ICC_ProfileGray gray = (ICC_ProfileGray) profile;\n+\n+        int length = gray.getMediaWhitePoint().length;\n+        if (length != 3) {\n+            throw new RuntimeException(\"Wrong data length: \" + length);\n+        }\n+\n+        \/\/ if getTRC() throws an exception then getGamma() should work\n+        boolean trc = false;\n+        try {\n+            gray.getTRC();\n+            trc = true;\n+            System.out.println(\"getTRC() works fine\");\n+        } catch (ProfileDataException ignore) {\n+            gray.getGamma();\n+        }\n+        \/\/ if getGamma() throws an exception then getTRC() should work\n+        boolean gamma = false;\n+        try {\n+            gray.getGamma();\n+            gamma = true;\n+            System.out.println(\"getGamma() works fine\");\n+        } catch (ProfileDataException ignore) {\n+            gray.getTRC();\n+        }\n+\n+        if (gamma == trc) {\n+            \/\/ only one should work\n+            throw new RuntimeException(\"Only one operation should work\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/color\/ICC_ProfileGrayTest.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.color.ICC_Profile;\n+import java.awt.color.ICC_ProfileRGB;\n+import java.awt.color.ProfileDataException;\n+import java.util.Arrays;\n+\n+\/**\n+ * @test\n+ * @bug 8254370\n+ * @summary Tests basic ICC_ProfileRGB functionality\n+ *\/\n+public final class ICC_ProfileRGBTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        ICC_Profile csProfile = ICC_Profile.getInstance(ColorSpace.CS_sRGB);\n+        ICC_Profile dataProfile = ICC_Profile.getInstance(csProfile.getData());\n+        ICC_Profile string2Profile = ICC_Profile.getInstance(\"sRGB.pf\");\n+        ICC_Profile string1Profile = ICC_Profile.getInstance(\"LINEAR_RGB.pf\");\n+        test(csProfile);\n+        test(dataProfile);\n+        test(string1Profile);\n+        test(string2Profile);\n+    }\n+\n+    private static void test(ICC_Profile profile) {\n+        \/\/ RGB profile should be implemented as ICC_ProfileRGB and includes the\n+        \/\/ redColorantTag, greenColorantTag, blueColorantTag, redTRCTag,\n+        \/\/ greenTRCTag, blueTRCTag, mediaWhitePointTag tags\n+        if (!(profile instanceof ICC_ProfileRGB)\n+                || profile.getData(ICC_Profile.icSigRedColorantTag) == null\n+                || profile.getData(ICC_Profile.icSigGreenColorantTag) == null\n+                || profile.getData(ICC_Profile.icSigBlueColorantTag) == null\n+                || profile.getData(ICC_Profile.icSigRedTRCTag) == null\n+                || profile.getData(ICC_Profile.icSigGreenTRCTag) == null\n+                || profile.getData(ICC_Profile.icSigBlueTRCTag) == null\n+                || profile.getData(ICC_Profile.icSigMediaWhitePointTag) == null)\n+        {\n+            throw new RuntimeException(\"Wrong profile: \" + profile);\n+        }\n+\n+        ICC_ProfileRGB rgb = (ICC_ProfileRGB) profile;\n+\n+        int length = rgb.getMediaWhitePoint().length;\n+        if (length != 3) {\n+            throw new RuntimeException(\"Wrong data length: \" + length);\n+        }\n+\n+        \/\/ if getTRC() throws an exception then getGamma() should work\n+        boolean trc = false;\n+        try {\n+            rgb.getTRC(ICC_ProfileRGB.REDCOMPONENT);\n+            rgb.getTRC(ICC_ProfileRGB.GREENCOMPONENT);\n+            rgb.getTRC(ICC_ProfileRGB.BLUECOMPONENT);\n+            trc = true;\n+            System.out.println(\"getTRC() works fine\");\n+        } catch (ProfileDataException ignore) {\n+            rgb.getGamma(ICC_ProfileRGB.REDCOMPONENT);\n+            rgb.getGamma(ICC_ProfileRGB.GREENCOMPONENT);\n+            rgb.getGamma(ICC_ProfileRGB.BLUECOMPONENT);\n+        }\n+        \/\/ if getGamma() throws an exception then getTRC() should work\n+        boolean gamma = false;\n+        try {\n+            rgb.getGamma(ICC_ProfileRGB.REDCOMPONENT);\n+            rgb.getGamma(ICC_ProfileRGB.GREENCOMPONENT);\n+            rgb.getGamma(ICC_ProfileRGB.BLUECOMPONENT);\n+            gamma = true;\n+            System.out.println(\"getGamma() works fine\");\n+        } catch (ProfileDataException ignore) {\n+            rgb.getTRC(ICC_ProfileRGB.REDCOMPONENT);\n+            rgb.getTRC(ICC_ProfileRGB.GREENCOMPONENT);\n+            rgb.getTRC(ICC_ProfileRGB.BLUECOMPONENT);\n+        }\n+\n+        if (gamma == trc) {\n+            \/\/ only one should work fine\n+            throw new RuntimeException(\"Only one operation should work\");\n+        }\n+\n+        \/\/ IllegalArgumentException if the component is invalid\n+        try {\n+            rgb.getGamma(10);\n+            throw new RuntimeException(\"IllegalArgumentException was expected\");\n+        } catch (IllegalArgumentException ignored) {}\n+        try {\n+            rgb.getGamma(-1);\n+            throw new RuntimeException(\"IllegalArgumentException was expected\");\n+        } catch (IllegalArgumentException ignored) {}\n+        try {\n+            rgb.getTRC(10);\n+            throw new RuntimeException(\"IllegalArgumentException was expected\");\n+        } catch (IllegalArgumentException ignored) {}\n+        try {\n+            rgb.getTRC(-1);\n+            throw new RuntimeException(\"IllegalArgumentException was expected\");\n+        } catch (IllegalArgumentException ignored) {}\n+\n+        \/\/ Validates content of ICC_ProfileRGB.getMatrix()\n+        float[][] matrix = rgb.getMatrix(); \/\/ current implementation\n+        float[][] old = getMatrix(rgb); \/\/ old implementation\n+        if (!Arrays.deepEquals(matrix, old)) {\n+            System.err.println(\"Expected: \" + Arrays.deepToString(old));\n+            System.err.println(\"Actual: \" + Arrays.deepToString(matrix));\n+            throw new RuntimeException(\"Wrong matrix\");\n+        }\n+    }\n+\n+    \/**\n+     * Old implementation of ICC_ProfileRGB.getMatrix().\n+     *\/\n+    private static float[][] getMatrix(ICC_ProfileRGB profile) {\n+        float[] tmpMatrix = getXYZTag(profile, ICC_Profile.icSigRedColorantTag);\n+        float[][] theMatrix = new float[3][3];\n+        theMatrix[0][0] = tmpMatrix[0];\n+        theMatrix[1][0] = tmpMatrix[1];\n+        theMatrix[2][0] = tmpMatrix[2];\n+        tmpMatrix = getXYZTag(profile, ICC_Profile.icSigGreenColorantTag);\n+        theMatrix[0][1] = tmpMatrix[0];\n+        theMatrix[1][1] = tmpMatrix[1];\n+        theMatrix[2][1] = tmpMatrix[2];\n+        tmpMatrix = getXYZTag(profile, ICC_Profile.icSigBlueColorantTag);\n+        theMatrix[0][2] = tmpMatrix[0];\n+        theMatrix[1][2] = tmpMatrix[1];\n+        theMatrix[2][2] = tmpMatrix[2];\n+        return theMatrix;\n+    }\n+\n+    private static float[] getXYZTag(ICC_ProfileRGB profile, int theTagSignature) {\n+        byte[] theData = profile.getData(theTagSignature);\n+        float[] theXYZNumber = new float[3];\n+        for (int i1 = 0, i2 = profile.icXYZNumberX; i1 < 3; i1++, i2 += 4) {\n+            int theS15Fixed16 = intFromBigEndian(theData, i2);\n+            theXYZNumber [i1] = theS15Fixed16 \/ 65536.0f;\n+        }\n+        return theXYZNumber;\n+    }\n+\n+    static int intFromBigEndian(byte[] array, int index) {\n+        return (((array[index]   & 0xff) << 24) |\n+                ((array[index+1] & 0xff) << 16) |\n+                ((array[index+2] & 0xff) <<  8) |\n+                (array[index+3] & 0xff));\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/color\/ICC_ProfileRGBTest.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"}]}