{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,0 +60,1 @@\n+import java.text.NumberFormat;\n@@ -1126,0 +1127,3 @@\n+        final static double baseFileSize = 1000.0;\n+        final MessageFormat mf = new MessageFormat(\"\");\n+        final NumberFormat nf = NumberFormat.getNumberInstance();\n@@ -1131,0 +1135,1 @@\n+            nf.setMinimumFractionDigits(1);\n@@ -1192,2 +1197,12 @@\n-            } else if (value instanceof Long) {\n-                long len = ((Long) value) \/ 1024L;\n+            } else if (value instanceof Long len) {\n+                \/*\n+                 * This code block is relevant to Linux.\n+                 * File size is displayed up to 1 decimal precision.\n+                 * Base-10 number system is used for formatting file size\n+                 * similar to how it's formatted in file managers on Linux.\n+                 * Empty file size is shown as 0.0 KB,\n+                 * 1-100-byte files are shown as 0.1 KB,\n+                 * 101-200-byte files are shown as 0.2 KB and so on.\n+                 *\/\n+                Object[] displayedFileSize = new Object[1];\n+\n@@ -1195,3 +1210,2 @@\n-                    text = MessageFormat.format(kiloByteString, len + 1);\n-                } else if (len < 1024L) {\n-                    text = MessageFormat.format(kiloByteString, (len == 0L) ? 1L : len);\n+                    updateMessageFormatPattern(kiloByteString);\n+                    displayedFileSize[0] = roundToOneDecimalPlace(len);\n@@ -1199,3 +1213,5 @@\n-                    len \/= 1024L;\n-                    if (len < 1024L) {\n-                        text = MessageFormat.format(megaByteString, len);\n+                    double kbVal = roundToOneDecimalPlace(len);\n+                    len = (long) kbVal;\n+                    if (kbVal < baseFileSize) {\n+                        updateMessageFormatPattern(kiloByteString);\n+                        displayedFileSize[0] = kbVal;\n@@ -1203,2 +1219,9 @@\n-                        len \/= 1024L;\n-                        text = MessageFormat.format(gigaByteString, len);\n+                        double mbVal = roundToOneDecimalPlace(len);\n+                        len = (long) mbVal;\n+                        if (mbVal < baseFileSize) {\n+                            updateMessageFormatPattern(megaByteString);\n+                            displayedFileSize[0] = mbVal;\n+                        } else {\n+                            updateMessageFormatPattern(gigaByteString);\n+                            displayedFileSize[0] = roundToOneDecimalPlace(len);\n+                        }\n@@ -1207,0 +1230,1 @@\n+                text = mf.format(displayedFileSize);\n@@ -1219,0 +1243,17 @@\n+\n+        private void updateMessageFormatPattern(String pattern) {\n+            mf.applyPattern(pattern);\n+            mf.setFormat(0, nf);\n+        }\n+\n+        \/**\n+         * Rounds a value to one decimal place. It's used to format\n+         * file size similar to how it's formatted in file managers on Linux.\n+         * For example, the file size of 1200 bytes is rounded to 1.2 KB.\n+         *\n+         * @param fileSize the file size to round to one decimal place\n+         * @return file size rounded to one decimal place\n+         *\/\n+        private static double roundToOneDecimalPlace(long fileSize) {\n+            return Math.ceil(fileSize \/ 100.0d) \/ 10.0d;\n+        }\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/FilePane.java","additions":52,"deletions":11,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8288882\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @requires (os.family == \"linux\")\n+ * @summary To test if the 1-Empty-File size shows 0.0 KB and other files show correct size.\n+ * @run main\/manual FileSizeCheck\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.lang.reflect.InvocationTargetException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import javax.swing.JFileChooser;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.WindowConstants;\n+\n+public class FileSizeCheck {\n+    private static Path[] tempFilePaths;\n+    private static final String INSTRUCTIONS =\n+            \"Click on the \\\"Details\\\" button in right-top corner.\\n\\n\" +\n+                    \"Scroll Down if required. \\n\\n\" +\n+                    \"Test 1: If the size of 1st-Empty-File shows 0.0 KB\\n\" +\n+                    \"Test 2: If the size of 2nd-File-1-Byte shows 0.1 KB\\n\" +\n+                    \"Test 3: If the size of 3rd-File-160-Byte shows 0.2 KB\\n\" +\n+                    \"Test 3: If the size of 4th-File-299-Byte shows 0.3 KB\\n\" +\n+                    \"Test 4: If the size of 5th-File-900-Byte shows 0.9 KB\\n\" +\n+                    \"Test 6: If the size of 6th-File-901-Byte shows 1.0 KB\\n\" +\n+                    \"Test 7: If the size of 7th-File-999-KB shows 999.0 KB\\n\" +\n+                    \"Test 8: If the size of 8th-File-1000-KB shows 1.0 MB\\n\" +\n+                    \"Test 9: If the size of 9th-File-2.8-MB shows 2.8 MB\\n\\n\" +\n+                           \"press PASS.\\n\\n\";\n+\n+    public static void test() {\n+        JFrame frame = new JFrame(\"JFileChooser File Size test\");\n+        JFileChooser fc = new JFileChooser();\n+        fc.setControlButtonsAreShown(false);\n+        Path dir = Paths.get(\".\");\n+        String[] tempFilesName = {\"1st-Empty-File\", \"2nd-File-1-Byte\", \"3rd-File-160-Byte\",\n+                \"4th-File-299-Byte\", \"5th-File-900-Byte\", \"6th-File-901-Byte\",\n+                \"7th-File-999-KB\", \"8th-File-1000-KB\", \"9th-File-2.8-MB\"};\n+\n+        int[] tempFilesSize = {0, 1, 160, 299, 900, 901, 999_000, 1_000_000, 2_800_000};\n+\n+        tempFilePaths = new Path[tempFilesName.length];\n+        PassFailJFrame.addTestWindow(frame);\n+        PassFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n+\n+        \/\/ Create temp files\n+        try {\n+            for (int i = 0; i < tempFilePaths.length; i++) {\n+                tempFilePaths[i] = dir.resolve(tempFilesName[i]);\n+                if (!Files.exists(tempFilePaths[i])){\n+                    RandomAccessFile f = new RandomAccessFile(tempFilePaths[i].toFile(), \"rw\");\n+                    f.setLength(tempFilesSize[i]);\n+                    f.close();\n+                }\n+            }\n+            fc.setCurrentDirectory(dir.toFile());\n+        } catch (IOException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+        frame.add(fc);\n+        frame.pack();\n+        frame.setVisible(true);\n+        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame(\"JFileChooser Test Instructions\",\n+                INSTRUCTIONS, 5, 19, 35);\n+        try {\n+            SwingUtilities.invokeAndWait(FileSizeCheck::test);\n+            passFailJFrame.awaitAndCheck();\n+        } finally {\n+            try {\n+                for (int i = 0; i < tempFilePaths.length; ++i) {\n+                    Files.deleteIfExists(tempFilePaths[i]);\n+                }\n+            } catch (IOException ex) {\n+                ex.printStackTrace();\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileSizeCheck.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}