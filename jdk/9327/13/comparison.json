{"files":[{"patch":"@@ -60,0 +60,1 @@\n+import java.text.DecimalFormat;\n@@ -535,1 +536,0 @@\n-\n@@ -1126,0 +1126,1 @@\n+        double baseFileSize = 1000.0;\n@@ -1192,2 +1193,1 @@\n-            } else if (value instanceof Long) {\n-                long len = ((Long) value) \/ 1024L;\n+            } else if (value instanceof Long len) {\n@@ -1195,3 +1195,8 @@\n-                    text = MessageFormat.format(kiloByteString, len + 1);\n-                } else if (len < 1024L) {\n-                    text = MessageFormat.format(kiloByteString, (len == 0L) ? 1L : len);\n+                    if (len == 0) {\n+                        text = MessageFormat.format(kiloByteString, len);\n+                    } else {\n+                        len \/= 1000L;\n+                        text = MessageFormat.format(kiloByteString, len + 1);\n+                    }\n+                } else if (len < 1000L) {\n+                    text = MessageFormat.format(kiloByteString, (len==0 ? 0L : 1L));\n@@ -1199,3 +1204,4 @@\n-                    len \/= 1024L;\n-                    if (len < 1024L) {\n-                        text = MessageFormat.format(megaByteString, len);\n+                    double kbVal = formatToDoubleValue(len);\n+                    len = (long)kbVal;\n+                    if (kbVal < baseFileSize) {\n+                        text = MessageFormat.format(kiloByteString, kbVal);\n@@ -1203,2 +1209,8 @@\n-                        len \/= 1024L;\n-                        text = MessageFormat.format(gigaByteString, len);\n+                        double mbVal = formatToDoubleValue(len);\n+                        len = (long)mbVal;\n+                        if (mbVal < baseFileSize) {\n+                            text = MessageFormat.format(megaByteString, mbVal);\n+                        } else {\n+                            double gbVal = formatToDoubleValue(len);\n+                            text = MessageFormat.format(gigaByteString, gbVal);\n+                        }\n@@ -1219,0 +1231,6 @@\n+\n+        public double formatToDoubleValue(long len) {\n+            DecimalFormat df = new DecimalFormat(\"0.0\");\n+            double val = len\/baseFileSize;\n+            return  Double.valueOf(df.format(val));\n+        }\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/FilePane.java","additions":29,"deletions":11,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8288882\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @requires (os.family == \"linux\")\n+ * @summary To test if the TEST-EMPTY-FILE size shows 0 KB and other files show correct size.\n+ * @run main\/manual FileSizeCheck\n+ *\/\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.Path;\n+import javax.swing.JFileChooser;\n+import java.io.RandomAccessFile;\n+\n+public class FileSizeCheck {\n+\n+    private static JFrame frame;\n+    private static final String INSTRUCTIONS =\n+            \"Click on the \\\"Details\\\" button in right-top corner.\\n\\nScroll Down if required. \\n\\n\" +\n+                    \"Test 1: If the size of 2.5-KB-File shows 2.5 KB\\n\" +\n+                    \"Test 2: If the size of 2.8-MB-File shows 2.8 MB\\n\" +\n+                    \"Test 3: If the size of 999-KB-File shows 999 KB\\n\" +\n+                    \"Test 4: If the size of 1000-KB-File shows 1 MB\\n\" +\n+                    \"Test 5: If the size of 2047-Byte-File shows 2 KB\\n\" +\n+                    \"Test 6: If the size of Empty-File shows 0 KB\\n\\n\" +\n+                           \" press PASS.\\n\\n\";\n+\n+    public static void test() {\n+        JFileChooser fc = new JFileChooser();\n+        Path dir = Paths.get(System.getProperty(\"test.src\"));\n+        String [] tempFilesName = {\"2.5-KB-File\",\"2.8-MB-File\",\"999-KB-File\",\"1000-KB-File\",\"2047-Byte-File\",\"Empty-File\"};\n+        int [] tempFilesSize = {2500, 2800000,999000,1000000,2047,0};\n+        Path [] tempFilePaths = new Path[tempFilesName.length];\n+        for (int i = 0 ; i < tempFilesName.length ; i++) {\n+            tempFilePaths[i] = dir.resolve(tempFilesName[i]);\n+        }\n+\n+        \/\/ create temp files\n+        try {\n+            for (int i = 0 ; i < tempFilePaths.length ; i++) {\n+                if (!Files.exists(tempFilePaths[i])){\n+                    RandomAccessFile f = new RandomAccessFile(tempFilePaths[i].toString(), \"rw\");\n+                    f.setLength(tempFilesSize[i]);\n+                    f.close();\n+                }\n+            }\n+            fc.setCurrentDirectory(dir.toFile());\n+        } catch (IOException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+\n+        fc.showOpenDialog(null);\n+\n+        \/\/ delete temp files\n+        try {\n+            for (int i = 0 ; i < tempFilePaths.length ; ++i) {\n+                Files.deleteIfExists(Paths.get(tempFilePaths[i].toString()));\n+            }\n+        } catch (IOException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    public static void main(String args[]) throws Exception {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame(\"JFileChooser Test Instructions\" ,\n+                INSTRUCTIONS, 5, 19, 35);\n+        SwingUtilities.invokeAndWait(() -> {\n+            frame = new JFrame();\n+            PassFailJFrame.addTestWindow(frame);\n+            PassFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n+            test();\n+        });\n+\n+        passFailJFrame.awaitAndCheck();\n+    }\n+}\n+\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileSizeCheck.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"}]}