{"files":[{"patch":"@@ -1187,1 +1187,0 @@\n-            Object[] objs = new Object[1];\n@@ -1200,2 +1199,2 @@\n-                 * Code block is relevant to linux\n-                 * File size display upto 1 decimal precision\n+                 * Code block is relevant to Linux.\n+                 * File size is display up to 1 decimal precision.\n@@ -1203,3 +1202,4 @@\n-                 * similar to linux file system\n-                 * Empty file size show as 0.0 KB\n-                 * 1->100 byte files show as 0.1 KB and so on\n+                 * similar to how it's formatted in file managers on Linux.\n+                 * Empty file size is shown as 0.0 KB,\n+                 * 1-199-byte files are shown as 0.1 KB,\n+                 * 200-299-byte files are shown as 0.2 KB and so on.\n@@ -1207,0 +1207,2 @@\n+                Object[] displayedFileSize = new Object[1];\n+\n@@ -1210,1 +1212,1 @@\n-                        objs[0] = 0.0;\n+                        displayedFileSize[0] = 0.0;\n@@ -1212,8 +1214,1 @@\n-                        objs[0] = 0.1;\n-                    } else {\n-                        objs[0] = formatToDoubleValue(len);\n-                    }\n-                } else if (len < 100L) {\n-                    updateMessageFormatPattern(kiloByteString);\n-                    if (len == 0) {\n-                        objs[0] = 0.0;\n+                        displayedFileSize[0] = 0.1;\n@@ -1221,1 +1216,1 @@\n-                        objs[0] = 0.1;\n+                        displayedFileSize[0] = formatToDoubleValue(len);\n@@ -1224,3 +1219,1 @@\n-                    double kbVal = formatToDoubleValue(len);\n-                    len = (long)kbVal;\n-                    if (kbVal < baseFileSize) {\n+                    if (len < 100L) {\n@@ -1228,1 +1221,5 @@\n-                        objs[0] = kbVal;\n+                        if (len == 0) {\n+                            displayedFileSize[0] = 0.0;\n+                        } else {\n+                            displayedFileSize[0] = 0.1;\n+                        }\n@@ -1230,5 +1227,5 @@\n-                        double mbVal = formatToDoubleValue(len);\n-                        len = (long)mbVal;\n-                        if (mbVal < baseFileSize) {\n-                            updateMessageFormatPattern(megaByteString);\n-                            objs[0] = mbVal;\n+                        double kbVal = formatToDoubleValue(len);\n+                        len = (long)kbVal;\n+                        if (kbVal < baseFileSize) {\n+                            updateMessageFormatPattern(kiloByteString);\n+                            displayedFileSize[0] = kbVal;\n@@ -1236,2 +1233,9 @@\n-                            updateMessageFormatPattern(gigaByteString);\n-                            objs[0] = formatToDoubleValue(len);\n+                            double mbVal = formatToDoubleValue(len);\n+                            len = (long)mbVal;\n+                            if (mbVal < baseFileSize) {\n+                                updateMessageFormatPattern(megaByteString);\n+                                displayedFileSize[0] = mbVal;\n+                            } else {\n+                                updateMessageFormatPattern(gigaByteString);\n+                                displayedFileSize[0] = formatToDoubleValue(len);\n+                            }\n@@ -1241,1 +1245,1 @@\n-                text = mf.format(objs);\n+                text = mf.format(displayedFileSize);\n@@ -1260,2 +1264,7 @@\n-        private static double formatToDoubleValue(long len) {\n-            return (len \/ 100L) \/ 10.0d;\n+        \/*\n+         * File size is converted to single decimal precision to keep\n+         * it similar to how it's formatted in file managers on Linux.\n+         * Returns the file size in one decimal precision.\n+         *\/\n+        private static double formatToDoubleValue(long fileSize) {\n+            return (fileSize \/ 100L) \/ 10.0d;\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/FilePane.java","additions":39,"deletions":30,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -53,4 +53,4 @@\n-                    \"Test 3: If the size of 3rd-File-500-Byte shows 0.5 KB\\n\" +\n-                    \"Test 4: If the size of 4th-File-1000-Byte shows 1.0 KB\\n\" +\n-                    \"Test 5: If the size of 5th-File-2047-Byte shows 2.0 KB\\n\" +\n-                    \"Test 6: If the size of 6th-File-2.5-KB shows 2.5 KB\\n\" +\n+                    \"Test 3: If the size of 3rd-File-160-Byte shows 0.1 KB\\n\" +\n+                    \"Test 4: If the size of 4th-File-500-Byte shows 0.5 KB\\n\" +\n+                    \"Test 5: If the size of 5th-File-1000-Byte shows 1.0 KB\\n\" +\n+                    \"Test 6: If the size of 6th-File-2047-Byte shows 2.0 KB\\n\" +\n@@ -65,5 +65,6 @@\n-        Path dir = Paths.get(System.getProperty(\"test.src\"));\n-        String[] tempFilesName = {\"1-Empty-File\", \"2-File-1-Byte\", \"3-File-500-Byte\",\n-                \"4-File-1000-Byte\", \"5-File-2047-Byte\", \"6-File-2.5-KB\",\n-                \"7-File-999-KB\", \"8-File-1000-KB\", \"9-File-2.8-MB\"};\n-        int[] tempFilesSize = {0, 1, 500, 1_000, 2_047, 2_500, 999_000, 1_000_000, 2_800_000};\n+        Path dir = Paths.get(\".\");\n+        String[] tempFilesName = {\"1st-Empty-File\", \"2nd-File-1-Byte\", \"3rd-File-160-Byte\",\n+                \"4th-File-500-Byte\", \"5th-File-1000-Byte\", \"6th-File-2047-Byte\",\n+                \"7th-File-999-KB\", \"8th-File-1000-KB\", \"9th-File-2.8-MB\"};\n+\n+        int[] tempFilesSize = {0, 1, 160, 500, 1_000, 2_047, 999_000, 1_000_000, 2_800_000};\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileSizeCheck.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"}]}