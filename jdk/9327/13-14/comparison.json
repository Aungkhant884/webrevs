{"files":[{"patch":"@@ -61,0 +61,1 @@\n+import java.text.NumberFormat;\n@@ -1127,0 +1128,2 @@\n+        MessageFormat mf = new MessageFormat(\"\");\n+        NumberFormat nf = NumberFormat.getNumberInstance();\n@@ -1183,0 +1186,1 @@\n+            Object[] objs = new Object[1];\n@@ -1196,1 +1200,1 @@\n-                        text = MessageFormat.format(kiloByteString, len);\n+                        updateMessageFormatPattern(kiloByteString,0);\n@@ -1198,0 +1202,1 @@\n+                        updateMessageFormatPattern(kiloByteString,1);\n@@ -1199,1 +1204,0 @@\n-                        text = MessageFormat.format(kiloByteString, len + 1);\n@@ -1201,0 +1205,2 @@\n+                    objs[0] = Long.valueOf(len);\n+                    text = mf.format(objs);\n@@ -1202,1 +1208,8 @@\n-                    text = MessageFormat.format(kiloByteString, (len==0 ? 0L : 1L));\n+                    if (len == 0) {\n+                        updateMessageFormatPattern(kiloByteString,0);\n+                        objs[0] = Long.valueOf(0);\n+                    } else {\n+                        updateMessageFormatPattern(kiloByteString,1);\n+                        objs[0] = Double.valueOf(1.0);\n+                    }\n+                    text = mf.format(objs);\n@@ -1207,1 +1220,3 @@\n-                        text = MessageFormat.format(kiloByteString, kbVal);\n+                        updateMessageFormatPattern(kiloByteString,1);\n+                        objs[0] = Double.valueOf(kbVal);\n+                        text = mf.format(objs);\n@@ -1212,1 +1227,3 @@\n-                            text = MessageFormat.format(megaByteString, mbVal);\n+                            updateMessageFormatPattern(megaByteString,1);\n+                            objs[0] = Double.valueOf(mbVal);\n+                            text = mf.format(objs);\n@@ -1214,0 +1231,1 @@\n+                            updateMessageFormatPattern(gigaByteString,1);\n@@ -1215,1 +1233,2 @@\n-                            text = MessageFormat.format(gigaByteString, gbVal);\n+                            objs[0] = Double.valueOf(gbVal);\n+                            text = mf.format(objs);\n@@ -1232,4 +1251,7 @@\n-        public double formatToDoubleValue(long len) {\n-            DecimalFormat df = new DecimalFormat(\"0.0\");\n-            double val = len\/baseFileSize;\n-            return  Double.valueOf(df.format(val));\n+        private void updateMessageFormatPattern(String pattern, int minFractionDigit) {\n+            mf.applyPattern(pattern);\n+            nf.setMinimumFractionDigits(minFractionDigit);\n+            mf.setFormat(0, nf);\n+        }\n+        private double formatToDoubleValue(long len) {\n+            return (len \/ 100L) \/ 10.0d;\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/FilePane.java","additions":32,"deletions":10,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @summary To test if the TEST-EMPTY-FILE size shows 0 KB and other files show correct size.\n+ * @summary To test if the 1-Empty-File size shows 0 KB and other files show correct size.\n@@ -44,0 +44,1 @@\n+import javax.swing.WindowConstants;\n@@ -48,0 +49,3 @@\n+    private static JFileChooser fc;\n+    private static PassFailJFrame passFailJFrame;\n+    private static Path [] tempFilePaths;\n@@ -50,7 +54,7 @@\n-                    \"Test 1: If the size of 2.5-KB-File shows 2.5 KB\\n\" +\n-                    \"Test 2: If the size of 2.8-MB-File shows 2.8 MB\\n\" +\n-                    \"Test 3: If the size of 999-KB-File shows 999 KB\\n\" +\n-                    \"Test 4: If the size of 1000-KB-File shows 1 MB\\n\" +\n-                    \"Test 5: If the size of 2047-Byte-File shows 2 KB\\n\" +\n-                    \"Test 6: If the size of Empty-File shows 0 KB\\n\\n\" +\n-                           \" press PASS.\\n\\n\";\n+                    \"Test 1: If the size of 1-Empty-File shows 0 KB\\n\" +\n+                    \"Test 2: If the size of 2-File-2047-Byte shows 2.0 KB\\n\" +\n+                    \"Test 3: If the size of 3-File-2.5-KB shows 2.5 KB\\n\" +\n+                    \"Test 4: If the size of 4-File-999-KB shows 999.0 KB\\n\" +\n+                    \"Test 5: If the size of 5-File-1000-KB shows 1.0 MB\\n\" +\n+                    \"Test 6: If the size of 6-File-2.8-MB shows 2.8 MB\\n\\n\" +\n+                           \"press PASS.\\n\\n\";\n@@ -58,2 +62,3 @@\n-    public static void test() {\n-        JFileChooser fc = new JFileChooser();\n+    public static void test() { \/\/throws InterruptedException, InvocationTargetException {\n+        frame = new JFrame(\"JFileChooser File Size test\");\n+        fc = new JFileChooser();\n@@ -61,7 +66,5 @@\n-        String [] tempFilesName = {\"2.5-KB-File\",\"2.8-MB-File\",\"999-KB-File\",\"1000-KB-File\",\"2047-Byte-File\",\"Empty-File\"};\n-        int [] tempFilesSize = {2500, 2800000,999000,1000000,2047,0};\n-        Path [] tempFilePaths = new Path[tempFilesName.length];\n-        for (int i = 0 ; i < tempFilesName.length ; i++) {\n-            tempFilePaths[i] = dir.resolve(tempFilesName[i]);\n-        }\n-\n+        String [] tempFilesName = {\"1-Empty-File\", \"2-File-2047-Byte\", \"3-File-2.5-KB\", \"4-File-999-KB\", \"5-File-1000-KB\", \"6-File-2.8-MB\"};\n+        int [] tempFilesSize = {0, 2047, 2500, 999000, 1000000, 2800000};\n+        tempFilePaths = new Path[tempFilesName.length];\n+        PassFailJFrame.addTestWindow(frame);\n+        PassFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n@@ -69,0 +72,1 @@\n+\n@@ -70,1 +74,2 @@\n-            for (int i = 0 ; i < tempFilePaths.length ; i++) {\n+            for (int i = 0; i < tempFilePaths.length; i++) {\n+                tempFilePaths[i] = dir.resolve(tempFilesName[i]);\n@@ -72,1 +77,1 @@\n-                    RandomAccessFile f = new RandomAccessFile(tempFilePaths[i].toString(), \"rw\");\n+                    RandomAccessFile f = new RandomAccessFile(tempFilePaths[i].toFile(), \"rw\");\n@@ -81,0 +86,5 @@\n+        frame.add(fc);\n+        frame.pack();\n+        frame.setVisible(true);\n+        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+    }\n@@ -82,3 +92,2 @@\n-        fc.showOpenDialog(null);\n-\n-        \/\/ delete temp files\n+    public static void main(String args[]) throws InterruptedException, InvocationTargetException {\n+        passFailJFrame = new PassFailJFrame(\"JFileChooser Test Instructions\" , INSTRUCTIONS, 5, 19, 35);\n@@ -86,2 +95,13 @@\n-            for (int i = 0 ; i < tempFilePaths.length ; ++i) {\n-                Files.deleteIfExists(Paths.get(tempFilePaths[i].toString()));\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                public void run() {\n+                    test();\n+                }\n+            });\n+            passFailJFrame.awaitAndCheck();\n+        } finally {\n+            try {\n+                for (int i = 0; i < tempFilePaths.length; ++i) {\n+                    Files.deleteIfExists(tempFilePaths[i]);\n+                }\n+            } catch (IOException ex) {\n+                System.out.println(ex);\n@@ -89,2 +109,0 @@\n-        } catch (IOException ex) {\n-            throw new RuntimeException(ex);\n@@ -93,13 +111,0 @@\n-\n-    public static void main(String args[]) throws Exception {\n-        PassFailJFrame passFailJFrame = new PassFailJFrame(\"JFileChooser Test Instructions\" ,\n-                INSTRUCTIONS, 5, 19, 35);\n-        SwingUtilities.invokeAndWait(() -> {\n-            frame = new JFrame();\n-            PassFailJFrame.addTestWindow(frame);\n-            PassFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n-            test();\n-        });\n-\n-        passFailJFrame.awaitAndCheck();\n-    }\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileSizeCheck.java","additions":44,"deletions":39,"binary":false,"changes":83,"status":"modified"}]}