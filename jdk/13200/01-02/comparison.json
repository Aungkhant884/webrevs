{"files":[{"patch":"@@ -4321,1 +4321,1 @@\n-  predicate(n->get_int() < (int)(BoolTest::unsigned_compare));\n+  predicate(!Matcher::is_unsigned_booltest_pred(n->get_int()));\n@@ -4332,1 +4332,1 @@\n-  predicate(n->get_int() > (int)(BoolTest::unsigned_compare));\n+  predicate(Matcher::is_unsigned_booltest_pred(n->get_int()));\n@@ -4442,1 +4442,1 @@\n-  predicate(((-(1 << 4)) <= n->get_int()) && (n->get_int() < (1 << 4)));\n+  predicate(Assembler::is_simm(n->get_int(), 5));\n@@ -4453,1 +4453,1 @@\n-  predicate((0 <= n->get_int()) && (n->get_int() < (1 << 7)));\n+  predicate(Assembler::is_uimm(n->get_int(), 7));\n@@ -4606,1 +4606,1 @@\n-  predicate(((-(1 << 4)) <= n->get_long()) && (n->get_long() < (1 << 4)));\n+  predicate(Assembler::is_simm(n->get_long(), 5));\n@@ -4617,1 +4617,1 @@\n-  predicate((0 <= n->get_long()) && (n->get_long() < (1 << 7)));\n+  predicate(Assembler::is_uimm(n->get_long(), 7));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3789,13 +3789,26 @@\n-\/\/ SVE Integer Compare - 5 bits signed imm and 7 bits unsigned imm\n-void sve_cmp(Condition cond, PRegister Pd, SIMD_RegVariant T,\n-             PRegister Pg, FloatRegister Zn, int imm) {\n-  starti;\n-  assert(T != Q, \"invalid size\");\n-  int cond_op;\n-  if (cond == HI || cond == HS || cond == LO || cond == LS) {\n-    guarantee(0 <= imm && imm <= 127, \"invalid immediate\");\n-    switch(cond) {\n-      case HI: cond_op = 0b01; break;\n-      case HS: cond_op = 0b00; break;\n-      case LO: cond_op = 0b10; break;\n-      case LS: cond_op = 0b11; break;\n+private:\n+  \/\/ Convert Assembler::Condition to op encoding - used by sve integer compare encoding\n+  static int assembler_cond_to_sve_op(Condition cond, bool &is_unsigned) {\n+    if (cond == HI || cond == HS || cond == LO || cond == LS) {\n+      is_unsigned = true;\n+    } else {\n+      is_unsigned = false;\n+    }\n+\n+    switch (cond) {\n+      case HI:\n+      case GT:\n+        return 0b0001;\n+      case HS:\n+      case GE:\n+        return 0b0000;\n+      case LO:\n+      case LT:\n+        return 0b0010;\n+      case LS:\n+      case LE:\n+        return 0b0011;\n+      case EQ:\n+        return 0b1000;\n+      case NE:\n+        return 0b1001;\n@@ -3804,0 +3817,1 @@\n+        return -1;\n@@ -3805,5 +3819,27 @@\n-    f(0b00100100, 31, 24), f(T, 23, 22), f(0b1, 21), f(imm, 20, 14),\n-    f((cond_op >> 1) & 0x1, 13), pgrf(Pg, 10), rf(Zn, 5);\n-    f(cond_op & 0x1, 4), prf(Pd, 0);\n-  } else {\n-    guarantee(-16 <= imm && imm <= 15, \"invalid immediate\");\n+  }\n+\n+public:\n+  \/\/ SVE Integer Compare - 5 bits signed imm and 7 bits unsigned imm\n+  void sve_cmp(Condition cond, PRegister Pd, SIMD_RegVariant T,\n+               PRegister Pg, FloatRegister Zn, int imm) {\n+    starti;\n+    assert(T != Q, \"invalid size\");\n+    bool is_unsigned = false;\n+    int cond_op = assembler_cond_to_sve_op(cond, is_unsigned);\n+    f(is_unsigned ? 0b00100100 : 0b00100101, 31, 24), f(T, 23, 22);\n+    f(is_unsigned ? 0b1 : 0b0, 21);\n+    if (is_unsigned) {\n+      f(imm, 20, 14), f((cond_op >> 1) & 0x1, 13);\n+    } else {\n+      sf(imm, 20, 16), f((cond_op >> 1) & 0x7, 15, 13);\n+    }\n+    pgrf(Pg, 10), rf(Zn, 5), f(cond_op & 0x1, 4), prf(Pd, 0);\n+  }\n+\n+  \/\/ SVE Floating-point compare vector with zero\n+  void sve_fcm(Condition cond, PRegister Pd, SIMD_RegVariant T,\n+               PRegister Pg, FloatRegister Zn, double d) {\n+    starti;\n+    assert(T != Q, \"invalid size\");\n+    guarantee(d == 0.0, \"invalid immediate\");\n+    int cond_op;\n@@ -3811,6 +3847,6 @@\n-      case EQ: cond_op = 0b1000; break;\n-      case NE: cond_op = 0b1001; break;\n-      case GE: cond_op = 0b0000; break;\n-      case GT: cond_op = 0b0001; break;\n-      case LE: cond_op = 0b0011; break;\n-      case LT: cond_op = 0b0010; break;\n+      case EQ: cond_op = 0b100; break;\n+      case GT: cond_op = 0b001; break;\n+      case GE: cond_op = 0b000; break;\n+      case LT: cond_op = 0b010; break;\n+      case LE: cond_op = 0b011; break;\n+      case NE: cond_op = 0b110; break;\n@@ -3820,2 +3856,3 @@\n-    f(0b00100101, 31, 24), f(T, 23, 22), f(0b0, 21), sf(imm, 20, 16),\n-    f((cond_op >> 1) & 0x7, 15, 13), pgrf(Pg, 10), rf(Zn, 5);\n+    f(0b01100101, 31, 24), f(T, 23, 22), f(0b0100, 21, 18),\n+    f((cond_op >> 1) & 0x3, 17, 16), f(0b001, 15, 13),\n+    pgrf(Pg, 10), rf(Zn, 5);\n@@ -3824,24 +3861,0 @@\n-}\n-\n-\/\/ SVE Floating-point compare vector with zero\n-void sve_fcm(Condition cond, PRegister Pd, SIMD_RegVariant T,\n-             PRegister Pg, FloatRegister Zn, double d) {\n-  starti;\n-  assert(T != Q, \"invalid size\");\n-  guarantee(d == 0.0, \"invalid immediate\");\n-  int cond_op;\n-  switch(cond) {\n-    case EQ: cond_op = 0b100; break;\n-    case GT: cond_op = 0b001; break;\n-    case GE: cond_op = 0b000; break;\n-    case LT: cond_op = 0b010; break;\n-    case LE: cond_op = 0b011; break;\n-    case NE: cond_op = 0b110; break;\n-    default:\n-      ShouldNotReachHere();\n-  }\n-  f(0b01100101, 31, 24), f(T, 23, 22), f(0b0100, 21, 18),\n-  f((cond_op >> 1) & 0x3, 17, 16), f(0b001, 15, 13),\n-  pgrf(Pg, 10), rf(Zn, 5);\n-  f(cond_op & 0x1, 4), prf(Pd, 0);\n-}\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":63,"deletions":50,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -1249,4 +1249,0 @@\n-static inline bool is_unsigned_booltest_pred(int bt) {\n-  return  ((bt & BoolTest::unsigned_compare) == BoolTest::unsigned_compare);\n-}\n-\n@@ -7612,1 +7608,1 @@\n-            !is_unsigned_booltest_pred(n->in(2)->get_int()) &&\n+            !Matcher::is_unsigned_booltest_pred(n->in(2)->get_int()) &&\n@@ -7632,1 +7628,1 @@\n-            !is_unsigned_booltest_pred(n->in(2)->get_int()) &&\n+            !Matcher::is_unsigned_booltest_pred(n->in(2)->get_int()) &&\n@@ -7653,1 +7649,1 @@\n-            is_unsigned_booltest_pred(n->in(2)->get_int()) &&\n+            Matcher::is_unsigned_booltest_pred(n->in(2)->get_int()) &&\n@@ -7690,1 +7686,1 @@\n-    bool is_unsigned = is_unsigned_booltest_pred($cond$$constant);\n+    bool is_unsigned = Matcher::is_unsigned_booltest_pred($cond$$constant);\n@@ -7724,1 +7720,1 @@\n-    bool is_unsigned = is_unsigned_booltest_pred($cond$$constant);\n+    bool is_unsigned = Matcher::is_unsigned_booltest_pred($cond$$constant);\n@@ -9939,1 +9935,1 @@\n-        bool is_unsigned = is_unsigned_booltest_pred($cond$$constant);\n+        bool is_unsigned = Matcher::is_unsigned_booltest_pred($cond$$constant);\n@@ -9945,1 +9941,1 @@\n-        bool is_unsigned = is_unsigned_booltest_pred($cond$$constant);\n+        bool is_unsigned = Matcher::is_unsigned_booltest_pred($cond$$constant);\n@@ -9951,1 +9947,1 @@\n-        bool is_unsigned = is_unsigned_booltest_pred($cond$$constant);\n+        bool is_unsigned = Matcher::is_unsigned_booltest_pred($cond$$constant);\n@@ -9957,1 +9953,1 @@\n-        bool is_unsigned = is_unsigned_booltest_pred($cond$$constant);\n+        bool is_unsigned = Matcher::is_unsigned_booltest_pred($cond$$constant);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -379,0 +379,5 @@\n+  \/\/ Check if given booltest condition is unsigned or not\n+  static inline bool is_unsigned_booltest_pred(int bt) {\n+    return ((bt & BoolTest::unsigned_compare) == BoolTest::unsigned_compare);\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/matcher.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}