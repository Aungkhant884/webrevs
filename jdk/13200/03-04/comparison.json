{"files":[{"patch":"@@ -5223,1 +5223,1 @@\n-instruct vmaskcmp_immI_sve(pReg dst, vReg src, immI5 imm, immI_cmp_cond cond, rFlagsReg cr) %{\n+instruct vmaskcmp_immB_sve(pReg dst, vReg src, immI5 imm, immI_cmp_cond cond, rFlagsReg cr) %{\n@@ -5226,0 +5226,27 @@\n+  effect(KILL cr);\n+  format %{ \"vmaskcmp_immB_sve $dst, $src, $imm, $cond\\t# KILL cr\" %}\n+  ins_encode %{\n+    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n+    __ sve_cmp(condition, $dst$$PRegister, __ B, ptrue, $src$$FloatRegister, (int)$imm$$constant);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vmaskcmpU_immB_sve(pReg dst, vReg src, immIU7 imm, immI_cmpU_cond cond, rFlagsReg cr) %{\n+  predicate(UseSVE > 0);\n+  match(Set dst (VectorMaskCmp (Binary src (ReplicateB imm)) cond));\n+  effect(KILL cr);\n+  format %{ \"vmaskcmpU_immB_sve $dst, $src, $imm, $cond\\t# KILL cr\" %}\n+  ins_encode %{\n+    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n+    __ sve_cmp(condition, $dst$$PRegister, __ B, ptrue, $src$$FloatRegister, (int)$imm$$constant);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vmaskcmp_immS_sve(pReg dst, vReg src, immI5 imm, immI_cmp_cond cond, rFlagsReg cr) %{\n+  predicate(UseSVE > 0);\n@@ -5227,1 +5254,0 @@\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateI imm)) cond));\n@@ -5229,1 +5255,1 @@\n-  format %{ \"vmaskcmp_immI_sve $dst, $src, $imm, $cond\\t# KILL cr\" %}\n+  format %{ \"vmaskcmp_immS_sve $dst, $src, $imm, $cond\\t# KILL cr\" %}\n@@ -5232,1 +5258,0 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n@@ -5235,2 +5260,1 @@\n-    __ sve_cmp(condition, $dst$$PRegister, __ elemType_to_regVariant(bt),\n-               ptrue, $src$$FloatRegister, (int)$imm$$constant);\n+    __ sve_cmp(condition, $dst$$PRegister, __ H, ptrue, $src$$FloatRegister, (int)$imm$$constant);\n@@ -5241,1 +5265,1 @@\n-instruct vmaskcmp_immL_sve(pReg dst, vReg src, immL5 imm, immI_cmp_cond cond, rFlagsReg cr) %{\n+instruct vmaskcmpU_immS_sve(pReg dst, vReg src, immIU7 imm, immI_cmpU_cond cond, rFlagsReg cr) %{\n@@ -5243,1 +5267,1 @@\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateL imm)) cond));\n+  match(Set dst (VectorMaskCmp (Binary src (ReplicateS imm)) cond));\n@@ -5245,1 +5269,1 @@\n-  format %{ \"vmaskcmp_immL_sve $dst, $src, $imm, $cond\\t# KILL cr\" %}\n+  format %{ \"vmaskcmpU_immS_sve $dst, $src, $imm, $cond\\t# KILL cr\" %}\n@@ -5250,1 +5274,15 @@\n-    __ sve_cmp(condition, $dst$$PRegister, __ D, ptrue, $src$$FloatRegister, (int)$imm$$constant);\n+    __ sve_cmp(condition, $dst$$PRegister, __ H, ptrue, $src$$FloatRegister, (int)$imm$$constant);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vmaskcmp_immI_sve(pReg dst, vReg src, immI5 imm, immI_cmp_cond cond, rFlagsReg cr) %{\n+  predicate(UseSVE > 0);\n+  match(Set dst (VectorMaskCmp (Binary src (ReplicateI imm)) cond));\n+  effect(KILL cr);\n+  format %{ \"vmaskcmp_immI_sve $dst, $src, $imm, $cond\\t# KILL cr\" %}\n+  ins_encode %{\n+    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n+    __ sve_cmp(condition, $dst$$PRegister, __ S, ptrue, $src$$FloatRegister, (int)$imm$$constant);\n@@ -5257,2 +5295,0 @@\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateB imm)) cond));\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateS imm)) cond));\n@@ -5264,1 +5300,0 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n@@ -5267,2 +5302,15 @@\n-    __ sve_cmp(condition, $dst$$PRegister, __ elemType_to_regVariant(bt),\n-               ptrue, $src$$FloatRegister, (int)$imm$$constant);\n+    __ sve_cmp(condition, $dst$$PRegister, __ S, ptrue, $src$$FloatRegister, (int)$imm$$constant);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vmaskcmp_immL_sve(pReg dst, vReg src, immL5 imm, immI_cmp_cond cond, rFlagsReg cr) %{\n+  predicate(UseSVE > 0);\n+  match(Set dst (VectorMaskCmp (Binary src (ReplicateL imm)) cond));\n+  effect(KILL cr);\n+  format %{ \"vmaskcmp_immL_sve $dst, $src, $imm, $cond\\t# KILL cr\" %}\n+  ins_encode %{\n+    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n+    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n+    __ sve_cmp(condition, $dst$$PRegister, __ D, ptrue, $src$$FloatRegister, (int)$imm$$constant);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":63,"deletions":15,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -3620,4 +3620,4 @@\n-dnl VMASKCMP_SVE_IMM_I($1      , $2            )\n-dnl VMASKCMP_SVE_IMM_I(type_imm, type_condition)\n-define(`VMASKCMP_SVE_IMM_I', `\n-instruct vmask$2_immI_sve(pReg dst, vReg src, $1 imm, immI_$2_cond cond, rFlagsReg cr) %{\n+dnl VMASKCMP_SVE_IMM($1          , $2          , $3      , $4            )\n+dnl VMASKCMP_SVE_IMM(element_size, element_type, type_imm, type_condition)\n+define(`VMASKCMP_SVE_IMM', `\n+instruct vmask$4_imm$2_sve(pReg dst, vReg src, $3 imm, immI_$4_cond cond, rFlagsReg cr) %{\n@@ -3625,3 +3625,1 @@\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateB imm)) cond));\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateS imm)) cond));\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateI imm)) cond));\n+  match(Set dst (VectorMaskCmp (Binary src (Replicate$2 imm)) cond));\n@@ -3629,19 +3627,1 @@\n-  format %{ \"vmask$2_immI_sve $dst, $src, $imm, $cond\\t# KILL cr\" %}\n-  ins_encode %{\n-    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n-    __ sve_cmp(condition, $dst$$PRegister, __ elemType_to_regVariant(bt),\n-               ptrue, $src$$FloatRegister, (int)$imm$$constant);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}')dnl\n-dnl VMASKCMP_SVE_IMM_L($1      , $2            )\n-dnl VMASKCMP_SVE_IMM_L(type_imm, type_condition)\n-define(`VMASKCMP_SVE_IMM_L', `\n-instruct vmask$2_immL_sve(pReg dst, vReg src, $1 imm, immI_$2_cond cond, rFlagsReg cr) %{\n-  predicate(UseSVE > 0);\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateL imm)) cond));\n-  effect(KILL cr);\n-  format %{ \"vmask$2_immL_sve $dst, $src, $imm, $cond\\t# KILL cr\" %}\n+  format %{ \"vmask$4_imm$2_sve $dst, $src, $imm, $cond\\t# KILL cr\" %}\n@@ -3652,1 +3632,1 @@\n-    __ sve_cmp(condition, $dst$$PRegister, __ D, ptrue, $src$$FloatRegister, (int)$imm$$constant);\n+    __ sve_cmp(condition, $dst$$PRegister, __ $1, ptrue, $src$$FloatRegister, (int)$imm$$constant);\n@@ -3656,4 +3636,8 @@\n-VMASKCMP_SVE_IMM_I(immI5, cmp)\n-VMASKCMP_SVE_IMM_L(immL5, cmp)\n-VMASKCMP_SVE_IMM_I(immIU7, cmpU)\n-VMASKCMP_SVE_IMM_L(immLU7, cmpU)\n+VMASKCMP_SVE_IMM(B, B, immI5, cmp)\n+VMASKCMP_SVE_IMM(B, B, immIU7, cmpU)\n+VMASKCMP_SVE_IMM(H, S, immI5, cmp)\n+VMASKCMP_SVE_IMM(H, S, immIU7, cmpU)\n+VMASKCMP_SVE_IMM(S, I, immI5, cmp)\n+VMASKCMP_SVE_IMM(S, I, immIU7, cmpU)\n+VMASKCMP_SVE_IMM(D, L, immL5, cmp)\n+VMASKCMP_SVE_IMM(D, L, immLU7, cmpU)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":15,"deletions":31,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -1421,1 +1421,1 @@\n-    public static final String VMASK_CMP_IMM_I_SVE = PREFIX + \"VMASK_CMP_IMM_I_SVE\" + POSTFIX;\n+    public static final String VMASK_CMP_IMM_B_SVE = PREFIX + \"VMASK_CMP_IMM_B_SVE\" + POSTFIX;\n@@ -1423,1 +1423,1 @@\n-        machOnlyNameRegex(VMASK_CMP_IMM_I_SVE, \"vmaskcmp_immI_sve\");\n+        machOnlyNameRegex(VMASK_CMP_IMM_B_SVE, \"vmaskcmp_immB_sve\");\n@@ -1426,1 +1426,1 @@\n-    public static final String VMASK_CMP_IMM_L_SVE = PREFIX + \"VMASK_CMP_IMM_L_SVE\" + POSTFIX;\n+    public static final String VMASK_CMPU_IMM_B_SVE = PREFIX + \"VMASK_CMPU_IMM_B_SVE\" + POSTFIX;\n@@ -1428,1 +1428,16 @@\n-        machOnlyNameRegex(VMASK_CMP_IMM_L_SVE, \"vmaskcmp_immL_sve\");\n+        machOnlyNameRegex(VMASK_CMPU_IMM_B_SVE, \"vmaskcmpU_immB_sve\");\n+    }\n+\n+    public static final String VMASK_CMP_IMM_S_SVE = PREFIX + \"VMASK_CMP_IMM_S_SVE\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VMASK_CMP_IMM_S_SVE, \"vmaskcmp_immS_sve\");\n+    }\n+\n+    public static final String VMASK_CMPU_IMM_S_SVE = PREFIX + \"VMASK_CMPU_IMM_S_SVE\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VMASK_CMPU_IMM_S_SVE, \"vmaskcmpU_immS_sve\");\n+    }\n+\n+    public static final String VMASK_CMP_IMM_I_SVE = PREFIX + \"VMASK_CMP_IMM_I_SVE\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VMASK_CMP_IMM_I_SVE, \"vmaskcmp_immI_sve\");\n@@ -1436,0 +1451,5 @@\n+    public static final String VMASK_CMP_IMM_L_SVE = PREFIX + \"VMASK_CMP_IMM_L_SVE\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VMASK_CMP_IMM_L_SVE, \"vmaskcmp_immL_sve\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":24,"deletions":4,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-    @IR(counts = { IRNode.VMASK_CMP_IMM_I_SVE, \">= 1\" })\n+    @IR(counts = { IRNode.VMASK_CMP_IMM_B_SVE, \">= 1\" })\n@@ -143,1 +143,1 @@\n-    @IR(counts = { IRNode.VMASK_CMPU_IMM_I_SVE, \">= 1\" })\n+    @IR(counts = { IRNode.VMASK_CMPU_IMM_B_SVE, \">= 1\" })\n@@ -156,1 +156,1 @@\n-    @IR(failOn = { IRNode.VMASK_CMP_IMM_I_SVE })\n+    @IR(failOn = { IRNode.VMASK_CMP_IMM_B_SVE })\n@@ -163,1 +163,1 @@\n-    @IR(failOn = { IRNode.VMASK_CMPU_IMM_I_SVE })\n+    @IR(failOn = { IRNode.VMASK_CMPU_IMM_B_SVE })\n@@ -170,1 +170,1 @@\n-    @IR(counts = { IRNode.VMASK_CMP_IMM_I_SVE, \">= 1\" })\n+    @IR(counts = { IRNode.VMASK_CMP_IMM_S_SVE, \">= 1\" })\n@@ -183,1 +183,1 @@\n-    @IR(counts = { IRNode.VMASK_CMPU_IMM_I_SVE, \">= 1\" })\n+    @IR(counts = { IRNode.VMASK_CMPU_IMM_S_SVE, \">= 1\" })\n@@ -196,1 +196,1 @@\n-    @IR(failOn = { IRNode.VMASK_CMP_IMM_I_SVE })\n+    @IR(failOn = { IRNode.VMASK_CMP_IMM_S_SVE })\n@@ -203,1 +203,1 @@\n-    @IR(failOn = { IRNode.VMASK_CMPU_IMM_I_SVE })\n+    @IR(failOn = { IRNode.VMASK_CMPU_IMM_S_SVE })\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorCompareWithImmTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}