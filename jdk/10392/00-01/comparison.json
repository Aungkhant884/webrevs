{"files":[{"patch":"@@ -425,0 +425,15 @@\n+int CodeSection::alignment() const {\n+  if (_index == CodeBuffer::SECT_CONSTS) {\n+    \/\/ CodeBuffer controls the alignment of the constants section\n+    return _outer->_const_section_alignment;\n+  }\n+  if (_index == CodeBuffer::SECT_INSTS) {\n+    return (int) CodeEntryAlignment;\n+  }\n+  if (_index == CodeBuffer::SECT_STUBS) {\n+    \/\/ CodeBuffer installer expects sections to be HeapWordSize aligned\n+    return HeapWordSize;\n+  }\n+  ShouldNotReachHere();\n+  return 0;\n+}\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -260,2 +260,1 @@\n-  static int alignment(int section);\n-  int alignment() { return alignment(_index); }\n+  int alignment() const;\n@@ -266,4 +265,0 @@\n-  static csize_t align_at_start(csize_t off, int section) {\n-    return (csize_t) align_up(off, alignment(section));\n-  }\n-\n@@ -271,1 +266,1 @@\n-    return align_at_start(off, _index);\n+    return (csize_t) align_up(off, alignment());\n@@ -435,0 +430,2 @@\n+  int          _const_section_alignment;\n+\n@@ -460,0 +457,3 @@\n+    \/\/ default value. should be changed if vectorization requires large aligned constants\n+    _const_section_alignment = (int) sizeof(jdouble);\n+\n@@ -713,0 +713,4 @@\n+  void set_const_section_alignment(int align) {\n+    _const_section_alignment = align_up(align, HeapWordSize);\n+  }\n+\n@@ -750,21 +754,0 @@\n-inline int CodeSection::alignment(int section) {\n-  if (section == CodeBuffer::SECT_CONSTS) {\n-#if INCLUDE_JVMCI\n-    if (EnableJVMCI) {\n-      \/\/ Graal vectorization requires larger aligned constants\n-      return 64;\n-    }\n-#endif\n-    return (int) sizeof(jdouble);\n-  }\n-  if (section == CodeBuffer::SECT_INSTS) {\n-    return (int) CodeEntryAlignment;\n-  }\n-  if (section == CodeBuffer::SECT_STUBS) {\n-    \/\/ CodeBuffer installer expects sections to be HeapWordSize aligned\n-    return HeapWordSize;\n-  }\n-  ShouldNotReachHere();\n-  return 0;\n-}\n-\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":11,"deletions":28,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -690,1 +690,1 @@\n-  initialize_fields(stream, code_flags, method, JVMCI_CHECK_OK);\n+  initialize_fields(stream, code_flags, method, buffer, JVMCI_CHECK_OK);\n@@ -773,1 +773,1 @@\n-void CodeInstaller::initialize_fields(HotSpotCompiledCodeStream* stream, u1 code_flags, methodHandle& method, JVMCI_TRAPS) {\n+void CodeInstaller::initialize_fields(HotSpotCompiledCodeStream* stream, u1 code_flags, methodHandle& method, CodeBuffer& buffer, JVMCI_TRAPS) {\n@@ -800,0 +800,1 @@\n+  buffer.set_const_section_alignment(data_section_alignment);\n@@ -854,2 +855,2 @@\n-  int total_size = align_up(_constants_size, CodeSection::alignment(CodeBuffer::SECT_INSTS)) +\n-                   align_up(_code_size, CodeSection::alignment(CodeBuffer::SECT_STUBS)) +\n+  int total_size = align_up(_constants_size, buffer.insts()->alignment()) +\n+                   align_up(_code_size, buffer.stubs()->alignment()) +\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -364,1 +364,1 @@\n-  void initialize_fields(HotSpotCompiledCodeStream* stream, u1 code_flags, methodHandle& method, JVMCI_TRAPS);\n+  void initialize_fields(HotSpotCompiledCodeStream* stream, u1 code_flags, methodHandle& method, CodeBuffer& buffer, JVMCI_TRAPS);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,10 +102,0 @@\n-    @Test\n-    public void testValidAlignment32() {\n-        installEmptyCode(new Site[0], new Assumption[0], new Comment[0], 32, new DataPatch[0], null);\n-    }\n-\n-    @Test\n-    public void testValidAlignment64() {\n-        installEmptyCode(new Site[0], new Assumption[0], new Comment[0], 64, new DataPatch[0], null);\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/errors\/TestInvalidCompilationResult.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"}]}