{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -228,43 +228,0 @@\n-    \/**\n-     * Returns a canonical version of the specified string.\n-     *\/\n-    public static String canonizeString(String file) {\n-        int len = file.length();\n-        if (len == 0 || (file.indexOf(\".\/\") == -1 && file.charAt(len - 1) != '.')) {\n-            return file;\n-        } else {\n-            return doCanonize(file);\n-        }\n-    }\n-\n-    private static String doCanonize(String file) {\n-        int i, lim;\n-\n-        \/\/ Remove embedded \/..\/\n-        while ((i = file.indexOf(\"\/..\/\")) >= 0) {\n-            if ((lim = file.lastIndexOf('\/', i - 1)) >= 0) {\n-                file = file.substring(0, lim) + file.substring(i + 3);\n-            } else {\n-                file = file.substring(i + 3);\n-            }\n-        }\n-        \/\/ Remove embedded \/.\/\n-        while ((i = file.indexOf(\"\/.\/\")) >= 0) {\n-            file = file.substring(0, i) + file.substring(i + 2);\n-        }\n-        \/\/ Remove trailing ..\n-        while (file.endsWith(\"\/..\")) {\n-            i = file.indexOf(\"\/..\");\n-            if ((lim = file.lastIndexOf('\/', i - 1)) >= 0) {\n-                file = file.substring(0, lim+1);\n-            } else {\n-                file = file.substring(0, i);\n-            }\n-        }\n-        \/\/ Remove trailing .\n-        if (file.endsWith(\"\/.\"))\n-            file = file.substring(0, file.length() -1);\n-\n-        return file;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/ParseUtil.java","additions":1,"deletions":44,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import sun.net.www.ParseUtil;\n@@ -167,1 +166,1 @@\n-            \/\/ Canonize the result after the bangslash\n+            \/\/ Canonicalize the result after the bangslash\n@@ -169,4 +168,1 @@\n-            String toBangSlash = file.substring(0, bangSlash);\n-            String afterBangSlash = file.substring(bangSlash);\n-            afterBangSlash = ParseUtil.canonizeString(afterBangSlash);\n-            file = toBangSlash + afterBangSlash;\n+            file = canonicalizeString(file, bangSlash);\n@@ -219,0 +215,47 @@\n+\n+    \/**\n+     * Returns a version of the specified string with\n+     * canonicalization applied starting from position {@code off}\n+     *\/\n+    private static String canonicalizeString(String file, int off) {\n+        int len = file.length();\n+        if (off >= len || (file.indexOf(\".\/\", off) == -1 && file.charAt(len - 1) != '.')) {\n+            return file;\n+        } else {\n+            \/\/ Defer substring and concat until canonicalization is required\n+            String before = file.substring(0, off);\n+            String after = file.substring(off);\n+            return before + doCanonicalize(after);\n+        }\n+    }\n+\n+    private static String doCanonicalize(String file) {\n+        int i, lim;\n+\n+        \/\/ Remove embedded \/..\/\n+        while ((i = file.indexOf(\"\/..\/\")) >= 0) {\n+            if ((lim = file.lastIndexOf('\/', i - 1)) >= 0) {\n+                file = file.substring(0, lim) + file.substring(i + 3);\n+            } else {\n+                file = file.substring(i + 3);\n+            }\n+        }\n+        \/\/ Remove embedded \/.\/\n+        while ((i = file.indexOf(\"\/.\/\")) >= 0) {\n+            file = file.substring(0, i) + file.substring(i + 2);\n+        }\n+        \/\/ Remove trailing ..\n+        while (file.endsWith(\"\/..\")) {\n+            i = file.indexOf(\"\/..\");\n+            if ((lim = file.lastIndexOf('\/', i - 1)) >= 0) {\n+                file = file.substring(0, lim+1);\n+            } else {\n+                file = file.substring(0, i);\n+            }\n+        }\n+        \/\/ Remove trailing .\n+        if (file.endsWith(\"\/.\"))\n+            file = file.substring(0, file.length() -1);\n+\n+        return file;\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/jar\/Handler.java","additions":50,"deletions":7,"binary":false,"changes":57,"status":"modified"}]}