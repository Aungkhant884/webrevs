{"files":[{"patch":"@@ -29,2 +29,0 @@\n-            \"    %s\\n\" +\n-            \"    %s\\n\" +\n@@ -39,5 +37,0 @@\n-            \"    public String getGregorianCalendarBase64() {\\n\" +\n-            \"        return gregorianCalendarBase64;\\n\" +\n-            \"    }\\n\" +\n-            \"\\n\" +\n-            \"    @Override\\n\" +\n@@ -47,5 +40,0 @@\n-            \"\\n\" +\n-            \"    @Override\\n\" +\n-            \"    public String getDurationBase64() {\\n\" +\n-            \"        return durationBase64;\\n\" +\n-            \"    }\\n\" +\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/GregorianCalAndDurSerDataTemplate.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -87,2 +87,1 @@\n-            classStr = String.format(classStr, srcFilePrefix, generatePseudoCodeForGregCalSerBytesAsBase64(base64),\n-                    generatePseudoCodeForDurationSerBytesAsBase64(base64dur), generatePseudoCodeForGregCalSerBytes(baos),\n+            classStr = String.format(classStr, srcFilePrefix, generatePseudoCodeForGregCalSerBytes(baos),\n@@ -143,50 +142,0 @@\n-\n-    \/**\n-     * Generates the Java Pseudo code for Gregorian Calendar serialized byte array as Base64 string.\n-     * @param base64 Serialized GregorianCalendar bytes encoded as Base64 string.\n-     * @return pseudo code String for Base64 encode serialized Gregorian calendar bytes.\n-     *\/\n-    public static String generatePseudoCodeForGregCalSerBytesAsBase64(String base64) {\n-        final StringBuilder sb = new StringBuilder();\n-        sb.append(\"    \/**\").append('\\n');\n-        sb.append(\"     * Base64 encoded string for XMLGregorianCalendar object.\").append('\\n');\n-        sb.append(\"     * Java version: \").append(JDK).append('\\n');\n-        sb.append(\"     **\/\").append('\\n');\n-        sb.append(\"    private final String gregorianCalendarBase64 = \").append(\"\\n          \");\n-        final int last = base64.length() - 1;\n-        for (int i=0; i<base64.length();i++) {\n-            if (i%64 == 0) sb.append(\"\\\"\");\n-            sb.append(base64.charAt(i));\n-            if (i%64 == 63 || i == last) {\n-                sb.append(\"\\\"\");\n-                if (i == last) sb.append(\";\\n\");\n-                else sb.append(\"\\n        + \");\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    \/**\n-     * Generates the Java Pseudo code for Duration serialized byte array as Base64 string.\n-     * @param base64 Serialized Duration bytes encoded as Base64 string.\n-     * @return pseudocode String for Base64 encode serialized Duration bytes.\n-     *\/\n-    public static String generatePseudoCodeForDurationSerBytesAsBase64(String base64) {\n-        final StringBuilder sbdur = new StringBuilder();\n-        sbdur.append(\"    \/**\").append('\\n');\n-        sbdur.append(\"     * Base64 encoded string for Duration object.\").append('\\n');\n-        sbdur.append(\"     * Java version: \").append(JDK).append('\\n');\n-        sbdur.append(\"     **\/\").append('\\n');\n-        sbdur.append(\"    private final String durationBase64 = \").append(\"\\n          \");\n-        final int lastdur = base64.length() - 1;\n-        for (int i=0; i<base64.length();i++) {\n-            if (i%64 == 0) sbdur.append(\"\\\"\");\n-            sbdur.append(base64.charAt(i));\n-            if (i%64 == 63 || i == lastdur) {\n-                sbdur.append(\"\\\"\");\n-                if (i == lastdur) sbdur.append(\";\\n\");\n-                else sbdur.append(\"\\n        + \");\n-            }\n-        }\n-        return sbdur.toString();\n-    }\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/GregorianCalAndDurSerDataUtil.java","additions":1,"deletions":52,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -31,3 +31,0 @@\n-    \/\/Returns Base64 encoded string of serialized GregorianCalendar.\n-    public abstract String getGregorianCalendarBase64();\n-\n@@ -36,3 +33,0 @@\n-\n-    \/\/Returns Base64 encoded string of serialized Duration.\n-    public abstract String getDurationBase64();\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/GregorianCalendarAndDurationSerData.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-    private final String gregorianCalendarBase64 = \"\";\n-    private final String durationBase64 = \"\";\n@@ -126,5 +124,0 @@\n-    @Override\n-    public String getGregorianCalendarBase64() {\n-        return gregorianCalendarBase64;\n-    }\n-\n@@ -135,5 +128,0 @@\n-\n-    @Override\n-    public String getDurationBase64() {\n-        return durationBase64;\n-    }\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK6GregorianCalendarAndDurationSerData.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-    private final String gregorianCalendarBase64 = \"\";\n-    private final String durationBase64 = \"\";\n@@ -119,2 +117,0 @@\n-\n-\n@@ -126,5 +122,0 @@\n-    @Override\n-    public String getGregorianCalendarBase64() {\n-        return gregorianCalendarBase64;\n-    }\n-\n@@ -135,5 +126,0 @@\n-\n-    @Override\n-    public String getDurationBase64() {\n-        return durationBase64;\n-    }\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK7GregorianCalendarAndDurationSerData.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,17 +28,0 @@\n-    private final String gregorianCalendarBase64 =\n-            \"rO0ABXNyAEljb20uc3VuLm9yZy5hcGFjaGUueGVyY2VzLmludGVybmFsLmpheHAu\"\n-                    + \"ZGF0YXR5cGUuWE1MR3JlZ29yaWFuQ2FsZW5kYXJJbXBsAAAAAAAAAAECAAlJAANk\"\n-                    + \"YXlJAARob3VySQAGbWludXRlSQAFbW9udGhJAAZzZWNvbmRJAAh0aW1lem9uZUkA\"\n-                    + \"BHllYXJMAANlb250ABZMamF2YS9tYXRoL0JpZ0ludGVnZXI7TAAQZnJhY3Rpb25h\"\n-                    + \"bFNlY29uZHQAFkxqYXZhL21hdGgvQmlnRGVjaW1hbDt4cAAAAAEAAAAAAAAAAAAA\"\n-                    + \"AAEAAAAA\/\/\/+1AAAAAFwc3IAFGphdmEubWF0aC5CaWdEZWNpbWFsVMcVV\/mBKE8D\"\n-                    + \"AAJJAAVzY2FsZUwABmludFZhbHEAfgABeHIAEGphdmEubGFuZy5OdW1iZXKGrJUd\"\n-                    + \"C5TgiwIAAHhwAAAAB3NyABRqYXZhLm1hdGguQmlnSW50ZWdlcoz8nx+pO\/sdAwAG\"\n-                    + \"SQAIYml0Q291bnRJAAliaXRMZW5ndGhJABNmaXJzdE5vbnplcm9CeXRlTnVtSQAM\"\n-                    + \"bG93ZXN0U2V0Qml0SQAGc2lnbnVtWwAJbWFnbml0dWRldAACW0J4cQB+AAX\/\/\/\/\/\"\n-                    + \"\/\/\/\/\/\/\/\/\/\/7\/\/\/\/+AAAAAHVyAAJbQqzzF\/gGCFTgAgAAeHAAAAAAeHg=\";\n-    private final String durationBase64 =\n-            \"rO0ABXNyAExjb20uc3VuLm9yZy5hcGFjaGUueGVyY2VzLmludGVybmFsLmpheHAu\"\n-                    + \"ZGF0YXR5cGUuRHVyYXRpb25JbXBsJER1cmF0aW9uU3RyZWFtAAAAAAAAAAECAAFM\"\n-                    + \"AAdsZXhpY2FsdAASTGphdmEvbGFuZy9TdHJpbmc7eHB0AA5QMVkxTTFEVDFIMU0x\"\n-                    + \"Uw==\";\n@@ -140,5 +123,0 @@\n-    @Override\n-    public String getGregorianCalendarBase64() {\n-        return gregorianCalendarBase64;\n-    }\n-\n@@ -149,5 +127,0 @@\n-\n-    @Override\n-    public String getDurationBase64() {\n-        return durationBase64;\n-    }\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK8GregorianCalendarAndDurationSerData.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,17 +28,0 @@\n-    private final String gregorianCalendarBase64 =\n-            \"rO0ABXNyAEljb20uc3VuLm9yZy5hcGFjaGUueGVyY2VzLmludGVybmFsLmpheHAu\"\n-                    + \"ZGF0YXR5cGUuWE1MR3JlZ29yaWFuQ2FsZW5kYXJJbXBsAAAAAAAAAAECAAlJAANk\"\n-                    + \"YXlJAARob3VySQAGbWludXRlSQAFbW9udGhJAAZzZWNvbmRJAAh0aW1lem9uZUkA\"\n-                    + \"BHllYXJMAANlb250ABZMamF2YS9tYXRoL0JpZ0ludGVnZXI7TAAQZnJhY3Rpb25h\"\n-                    + \"bFNlY29uZHQAFkxqYXZhL21hdGgvQmlnRGVjaW1hbDt4cAAAAAEAAAAAAAAAAAAA\"\n-                    + \"AAEAAAAA\/\/\/+1AAAAAFwc3IAFGphdmEubWF0aC5CaWdEZWNpbWFsVMcVV\/mBKE8D\"\n-                    + \"AAJJAAVzY2FsZUwABmludFZhbHEAfgABeHIAEGphdmEubGFuZy5OdW1iZXKGrJUd\"\n-                    + \"C5TgiwIAAHhwAAAAB3NyABRqYXZhLm1hdGguQmlnSW50ZWdlcoz8nx+pO\/sdAwAG\"\n-                    + \"SQAIYml0Q291bnRJAAliaXRMZW5ndGhJABNmaXJzdE5vbnplcm9CeXRlTnVtSQAM\"\n-                    + \"bG93ZXN0U2V0Qml0SQAGc2lnbnVtWwAJbWFnbml0dWRldAACW0J4cQB+AAX\/\/\/\/\/\"\n-                    + \"\/\/\/\/\/\/\/\/\/\/7\/\/\/\/+AAAAAHVyAAJbQqzzF\/gGCFTgAgAAeHAAAAAAeHg=\";\n-    private final String durationBase64 =\n-            \"rO0ABXNyAExjb20uc3VuLm9yZy5hcGFjaGUueGVyY2VzLmludGVybmFsLmpheHAu\"\n-                    + \"ZGF0YXR5cGUuRHVyYXRpb25JbXBsJER1cmF0aW9uU3RyZWFtAAAAAAAAAAECAAFM\"\n-                    + \"AAdsZXhpY2FsdAASTGphdmEvbGFuZy9TdHJpbmc7eHB0AA5QMVkxTTFEVDFIMU0x\"\n-                    + \"Uw==\";\n@@ -138,4 +121,1 @@\n-    @Override\n-    public String getGregorianCalendarBase64() {\n-        return gregorianCalendarBase64;\n-    }\n+\n@@ -146,4 +126,0 @@\n-    @Override\n-    public String getDurationBase64() {\n-        return durationBase64;\n-    }\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK9GregorianCalendarAndDurationSerData.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.util.Base64;\n@@ -84,5 +83,0 @@\n-            \/\/ Now get a Base64 string representation of the xmlGregorianCalendar serialized bytes.\n-            final String base64 = Base64.getEncoder().encodeToString(baos.toByteArray());\n-            \/\/ Now get a Base64 string representation of Duration the serialized bytes.\n-            final String base64dur = Base64.getEncoder().encodeToString(baos2.toByteArray());\n-\n@@ -96,5 +90,0 @@\n-                @Override\n-                public String getGregorianCalendarBase64() {\n-                    return base64;\n-                }\n-\n@@ -105,5 +94,0 @@\n-\n-                @Override\n-                public String getDurationBase64() {\n-                    return base64dur;\n-                }\n@@ -116,1 +100,1 @@\n-     * @return A two-dimensional Array of objects where each element is an array of size three. First element contain JDK version,\n+     * @return A Stream of arguments where each element is an array of size three. First element contain JDK version,\n@@ -131,13 +115,0 @@\n-    \/**\n-     * Provide data for JDK version and serialized Gregorian Calendar Base64 encoded string.\n-     * @return A two-dimensional Array of objects where each element is an array of size three. First element contain JDK version,\n-     * second element contain object reference to GregorianCalendarAndDurationSerData specific to JDK version\n-     * and third element contain expected Gregorian Calendar as string.\n-     *\/\n-\n-    public Stream<Arguments> gregorianCalendarDataBase64() {\n-        return Stream.of(Arguments.of(JDK[0], gregorianCalendarAndDurationSerData[0], EXPECTED_CAL),\n-                Arguments.of(JDK[2], gregorianCalendarAndDurationSerData[3], EXPECTED_CAL),\n-                Arguments.of(JDK[3], gregorianCalendarAndDurationSerData[4], EXPECTED_CAL));\n-    }\n-\n@@ -146,1 +117,1 @@\n-     * @return A two-dimensional Array of objects where each element is an array of size three. First element contain JDK version,\n+     * @return A Stream of arguments where each element is an array of size three. First element contain JDK version,\n@@ -159,13 +130,0 @@\n-    \/**\n-     * Provide data for JDK version and Duration Base64 encode serialized bytes string.\n-     * @return A two-dimensional Array of objects where each element is an array of size three. First element contain JDK version,\n-     * second element contain object reference to GregorianCalendarAndDurationSerData specific to JDK version\n-     * and third element contain expected Duration as string.\n-     *\/\n-\n-    public Stream<Arguments> durationDataBase64() {\n-        return Stream.of(Arguments.of(JDK[0], gregorianCalendarAndDurationSerData[0], EXPECTED_DURATION),\n-                Arguments.of(JDK[2], gregorianCalendarAndDurationSerData[3], EXPECTED_DURATION),\n-                Arguments.of(JDK[3], gregorianCalendarAndDurationSerData[4], EXPECTED_DURATION));\n-    }\n-\n@@ -192,20 +150,0 @@\n-    \/**\n-     * Verify that GregorianCalendar serialized and encoded as base64 string with different old JDK versions can be\n-     * deserialized correctly with JDK under test.\n-     * @param javaVersion JDK version used to GregorianCalendar serialization.\n-     * @param gcsd JDK version specific GregorianCalendarAndDurationSerData.\n-     * @param gregorianDate String representation of GregorianCalendar Date.\n-     * @throws IOException Unexpected.\n-     * @throws ClassNotFoundException Unexpected.\n-     *\/\n-\n-    @ParameterizedTest\n-    @MethodSource(\"gregorianCalendarDataBase64\")\n-    public void testReadCalBase64(String javaVersion, GregorianCalendarAndDurationSerData gcsd, String gregorianDate) throws IOException,\n-            ClassNotFoundException {\n-        final ByteArrayInputStream bais = new ByteArrayInputStream(Base64.getDecoder().decode(gcsd.getGregorianCalendarBase64()));\n-        final ObjectInputStream ois = new ObjectInputStream(bais);\n-        final XMLGregorianCalendar xgc = (XMLGregorianCalendar) ois.readObject();\n-        assertEquals(gregorianDate, xgc.toString());\n-    }\n-\n@@ -231,20 +169,0 @@\n-\n-    \/**\n-     * Verify that Duration serialized  and encoded as base64 string with different old JDK versions can be deserialized correctly\n-     * with JDK under test.\n-     * @param javaVersion JDK version used to GregorianCalendar serialization.\n-     * @param gcsd JDK version specific GregorianCalendarAndDurationSerData.\n-     * @param duration String representation of Duration.\n-     * @throws IOException Unexpected.\n-     * @throws ClassNotFoundException Unexpected.\n-     *\/\n-\n-    @ParameterizedTest\n-    @MethodSource(\"durationDataBase64\")\n-    public void testReadDurationBase64(String javaVersion, GregorianCalendarAndDurationSerData gcsd, String duration) throws IOException,\n-            ClassNotFoundException {\n-        final ByteArrayInputStream bais = new ByteArrayInputStream(Base64.getDecoder().decode(gcsd.getDurationBase64()));\n-        final ObjectInputStream ois = new ObjectInputStream(bais);\n-        final Duration d1 = (Duration) ois.readObject();\n-        assertEquals(duration, d1.toString().toUpperCase());\n-    }\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/SerializationTest.java","additions":2,"deletions":84,"binary":false,"changes":86,"status":"modified"}]}