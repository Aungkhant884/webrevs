{"files":[{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * Abstract class for serialized bytes of XMLGregorianCalendar and Duration data type for different JDK versions.\n+ *\/\n+public abstract class GregorianCalendarAndDurationSerData {\n+    public abstract byte[] getGregorianCalendarByteArray();\n+    public abstract String getGregorianCalendarBase64();\n+    public abstract byte[] getDurationBytes();\n+    public abstract String getDurationBase64();\n+}\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/GregorianCalendarAndDurationSerData.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * JDK 6 serialization bytes for XMLGregorianCalendar and Duration data type generated using JDK 1.6.0 version.\n+ *\/\n+public class JDK6GregorianCalendarAndDurationSerData extends GregorianCalendarAndDurationSerData {\n+    private final String gregorianCalendarBase64 = \"\";\n+    private final String durationBase64 = \"\";\n+    private final byte[] gregorianCalendarBytes = {\n+            (byte) 0xac, (byte) 0xed, (byte) 0x0, (byte) 0x5, (byte) 0x73, (byte) 0x72, (byte) 0x0, (byte) 0x49,\n+            (byte) 0x63, (byte) 0x6f, (byte) 0x6d, (byte) 0x2e, (byte) 0x73, (byte) 0x75, (byte) 0x6e, (byte) 0x2e,\n+            (byte) 0x6f, (byte) 0x72, (byte) 0x67, (byte) 0x2e, (byte) 0x61, (byte) 0x70, (byte) 0x61, (byte) 0x63,\n+            (byte) 0x68, (byte) 0x65, (byte) 0x2e, (byte) 0x78, (byte) 0x65, (byte) 0x72, (byte) 0x63, (byte) 0x65,\n+            (byte) 0x73, (byte) 0x2e, (byte) 0x69, (byte) 0x6e, (byte) 0x74, (byte) 0x65, (byte) 0x72, (byte) 0x6e,\n+            (byte) 0x61, (byte) 0x6c, (byte) 0x2e, (byte) 0x6a, (byte) 0x61, (byte) 0x78, (byte) 0x70, (byte) 0x2e,\n+            (byte) 0x64, (byte) 0x61, (byte) 0x74, (byte) 0x61, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65,\n+            (byte) 0x2e, (byte) 0x58, (byte) 0x4d, (byte) 0x4c, (byte) 0x47, (byte) 0x72, (byte) 0x65, (byte) 0x67,\n+            (byte) 0x6f, (byte) 0x72, (byte) 0x69, (byte) 0x61, (byte) 0x6e, (byte) 0x43, (byte) 0x61, (byte) 0x6c,\n+            (byte) 0x65, (byte) 0x6e, (byte) 0x64, (byte) 0x61, (byte) 0x72, (byte) 0x49, (byte) 0x6d, (byte) 0x70,\n+            (byte) 0x6c, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x1, (byte) 0x2, (byte) 0x0, (byte) 0x9, (byte) 0x49, (byte) 0x0, (byte) 0x3, (byte) 0x64,\n+            (byte) 0x61, (byte) 0x79, (byte) 0x49, (byte) 0x0, (byte) 0x4, (byte) 0x68, (byte) 0x6f, (byte) 0x75,\n+            (byte) 0x72, (byte) 0x49, (byte) 0x0, (byte) 0x6, (byte) 0x6d, (byte) 0x69, (byte) 0x6e, (byte) 0x75,\n+            (byte) 0x74, (byte) 0x65, (byte) 0x49, (byte) 0x0, (byte) 0x5, (byte) 0x6d, (byte) 0x6f, (byte) 0x6e,\n+            (byte) 0x74, (byte) 0x68, (byte) 0x49, (byte) 0x0, (byte) 0x6, (byte) 0x73, (byte) 0x65, (byte) 0x63,\n+            (byte) 0x6f, (byte) 0x6e, (byte) 0x64, (byte) 0x49, (byte) 0x0, (byte) 0x8, (byte) 0x74, (byte) 0x69,\n+            (byte) 0x6d, (byte) 0x65, (byte) 0x7a, (byte) 0x6f, (byte) 0x6e, (byte) 0x65, (byte) 0x49, (byte) 0x0,\n+            (byte) 0x4, (byte) 0x79, (byte) 0x65, (byte) 0x61, (byte) 0x72, (byte) 0x4c, (byte) 0x0, (byte) 0x3,\n+            (byte) 0x65, (byte) 0x6f, (byte) 0x6e, (byte) 0x74, (byte) 0x0, (byte) 0x16, (byte) 0x4c, (byte) 0x6a,\n+            (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x2f, (byte) 0x6d, (byte) 0x61, (byte) 0x74, (byte) 0x68,\n+            (byte) 0x2f, (byte) 0x42, (byte) 0x69, (byte) 0x67, (byte) 0x49, (byte) 0x6e, (byte) 0x74, (byte) 0x65,\n+            (byte) 0x67, (byte) 0x65, (byte) 0x72, (byte) 0x3b, (byte) 0x4c, (byte) 0x0, (byte) 0x10, (byte) 0x66,\n+            (byte) 0x72, (byte) 0x61, (byte) 0x63, (byte) 0x74, (byte) 0x69, (byte) 0x6f, (byte) 0x6e, (byte) 0x61,\n+            (byte) 0x6c, (byte) 0x53, (byte) 0x65, (byte) 0x63, (byte) 0x6f, (byte) 0x6e, (byte) 0x64, (byte) 0x74,\n+            (byte) 0x0, (byte) 0x16, (byte) 0x4c, (byte) 0x6a, (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x2f,\n+            (byte) 0x6d, (byte) 0x61, (byte) 0x74, (byte) 0x68, (byte) 0x2f, (byte) 0x42, (byte) 0x69, (byte) 0x67,\n+            (byte) 0x44, (byte) 0x65, (byte) 0x63, (byte) 0x69, (byte) 0x6d, (byte) 0x61, (byte) 0x6c, (byte) 0x3b,\n+            (byte) 0x78, (byte) 0x70, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0xff, (byte) 0xff,\n+            (byte) 0xfe, (byte) 0xd4, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x70, (byte) 0x73,\n+            (byte) 0x72, (byte) 0x0, (byte) 0x14, (byte) 0x6a, (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x2e,\n+            (byte) 0x6d, (byte) 0x61, (byte) 0x74, (byte) 0x68, (byte) 0x2e, (byte) 0x42, (byte) 0x69, (byte) 0x67,\n+            (byte) 0x44, (byte) 0x65, (byte) 0x63, (byte) 0x69, (byte) 0x6d, (byte) 0x61, (byte) 0x6c, (byte) 0x54,\n+            (byte) 0xc7, (byte) 0x15, (byte) 0x57, (byte) 0xf9, (byte) 0x81, (byte) 0x28, (byte) 0x4f, (byte) 0x3,\n+            (byte) 0x0, (byte) 0x2, (byte) 0x49, (byte) 0x0, (byte) 0x5, (byte) 0x73, (byte) 0x63, (byte) 0x61,\n+            (byte) 0x6c, (byte) 0x65, (byte) 0x4c, (byte) 0x0, (byte) 0x6, (byte) 0x69, (byte) 0x6e, (byte) 0x74,\n+            (byte) 0x56, (byte) 0x61, (byte) 0x6c, (byte) 0x71, (byte) 0x0, (byte) 0x7e, (byte) 0x0, (byte) 0x1,\n+            (byte) 0x78, (byte) 0x72, (byte) 0x0, (byte) 0x10, (byte) 0x6a, (byte) 0x61, (byte) 0x76, (byte) 0x61,\n+            (byte) 0x2e, (byte) 0x6c, (byte) 0x61, (byte) 0x6e, (byte) 0x67, (byte) 0x2e, (byte) 0x4e, (byte) 0x75,\n+            (byte) 0x6d, (byte) 0x62, (byte) 0x65, (byte) 0x72, (byte) 0x86, (byte) 0xac, (byte) 0x95, (byte) 0x1d,\n+            (byte) 0xb, (byte) 0x94, (byte) 0xe0, (byte) 0x8b, (byte) 0x2, (byte) 0x0, (byte) 0x0, (byte) 0x78,\n+            (byte) 0x70, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x7, (byte) 0x73, (byte) 0x72, (byte) 0x0,\n+            (byte) 0x14, (byte) 0x6a, (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x2e, (byte) 0x6d, (byte) 0x61,\n+            (byte) 0x74, (byte) 0x68, (byte) 0x2e, (byte) 0x42, (byte) 0x69, (byte) 0x67, (byte) 0x49, (byte) 0x6e,\n+            (byte) 0x74, (byte) 0x65, (byte) 0x67, (byte) 0x65, (byte) 0x72, (byte) 0x8c, (byte) 0xfc, (byte) 0x9f,\n+            (byte) 0x1f, (byte) 0xa9, (byte) 0x3b, (byte) 0xfb, (byte) 0x1d, (byte) 0x3, (byte) 0x0, (byte) 0x6,\n+            (byte) 0x49, (byte) 0x0, (byte) 0x8, (byte) 0x62, (byte) 0x69, (byte) 0x74, (byte) 0x43, (byte) 0x6f,\n+            (byte) 0x75, (byte) 0x6e, (byte) 0x74, (byte) 0x49, (byte) 0x0, (byte) 0x9, (byte) 0x62, (byte) 0x69,\n+            (byte) 0x74, (byte) 0x4c, (byte) 0x65, (byte) 0x6e, (byte) 0x67, (byte) 0x74, (byte) 0x68, (byte) 0x49,\n+            (byte) 0x0, (byte) 0x13, (byte) 0x66, (byte) 0x69, (byte) 0x72, (byte) 0x73, (byte) 0x74, (byte) 0x4e,\n+            (byte) 0x6f, (byte) 0x6e, (byte) 0x7a, (byte) 0x65, (byte) 0x72, (byte) 0x6f, (byte) 0x42, (byte) 0x79,\n+            (byte) 0x74, (byte) 0x65, (byte) 0x4e, (byte) 0x75, (byte) 0x6d, (byte) 0x49, (byte) 0x0, (byte) 0xc,\n+            (byte) 0x6c, (byte) 0x6f, (byte) 0x77, (byte) 0x65, (byte) 0x73, (byte) 0x74, (byte) 0x53, (byte) 0x65,\n+            (byte) 0x74, (byte) 0x42, (byte) 0x69, (byte) 0x74, (byte) 0x49, (byte) 0x0, (byte) 0x6, (byte) 0x73,\n+            (byte) 0x69, (byte) 0x67, (byte) 0x6e, (byte) 0x75, (byte) 0x6d, (byte) 0x5b, (byte) 0x0, (byte) 0x9,\n+            (byte) 0x6d, (byte) 0x61, (byte) 0x67, (byte) 0x6e, (byte) 0x69, (byte) 0x74, (byte) 0x75, (byte) 0x64,\n+            (byte) 0x65, (byte) 0x74, (byte) 0x0, (byte) 0x2, (byte) 0x5b, (byte) 0x42, (byte) 0x78, (byte) 0x71,\n+            (byte) 0x0, (byte) 0x7e, (byte) 0x0, (byte) 0x5, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,\n+            (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xfe,\n+            (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xfe, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x75, (byte) 0x72, (byte) 0x0, (byte) 0x2, (byte) 0x5b, (byte) 0x42, (byte) 0xac, (byte) 0xf3,\n+            (byte) 0x17, (byte) 0xf8, (byte) 0x6, (byte) 0x8, (byte) 0x54, (byte) 0xe0, (byte) 0x2, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x78, (byte) 0x70, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x78,\n+            (byte) 0x78,\n+    };\n+    private final byte[] durationBytes = {\n+            (byte) 0xac, (byte) 0xed, (byte) 0x0, (byte) 0x5, (byte) 0x73, (byte) 0x72, (byte) 0x0, (byte) 0x4c,\n+            (byte) 0x63, (byte) 0x6f, (byte) 0x6d, (byte) 0x2e, (byte) 0x73, (byte) 0x75, (byte) 0x6e, (byte) 0x2e,\n+            (byte) 0x6f, (byte) 0x72, (byte) 0x67, (byte) 0x2e, (byte) 0x61, (byte) 0x70, (byte) 0x61, (byte) 0x63,\n+            (byte) 0x68, (byte) 0x65, (byte) 0x2e, (byte) 0x78, (byte) 0x65, (byte) 0x72, (byte) 0x63, (byte) 0x65,\n+            (byte) 0x73, (byte) 0x2e, (byte) 0x69, (byte) 0x6e, (byte) 0x74, (byte) 0x65, (byte) 0x72, (byte) 0x6e,\n+            (byte) 0x61, (byte) 0x6c, (byte) 0x2e, (byte) 0x6a, (byte) 0x61, (byte) 0x78, (byte) 0x70, (byte) 0x2e,\n+            (byte) 0x64, (byte) 0x61, (byte) 0x74, (byte) 0x61, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65,\n+            (byte) 0x2e, (byte) 0x44, (byte) 0x75, (byte) 0x72, (byte) 0x61, (byte) 0x74, (byte) 0x69, (byte) 0x6f,\n+            (byte) 0x6e, (byte) 0x49, (byte) 0x6d, (byte) 0x70, (byte) 0x6c, (byte) 0x24, (byte) 0x44, (byte) 0x75,\n+            (byte) 0x72, (byte) 0x61, (byte) 0x74, (byte) 0x69, (byte) 0x6f, (byte) 0x6e, (byte) 0x53, (byte) 0x74,\n+            (byte) 0x72, (byte) 0x65, (byte) 0x61, (byte) 0x6d, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x2, (byte) 0x0, (byte) 0x1, (byte) 0x4c,\n+            (byte) 0x0, (byte) 0x7, (byte) 0x6c, (byte) 0x65, (byte) 0x78, (byte) 0x69, (byte) 0x63, (byte) 0x61,\n+            (byte) 0x6c, (byte) 0x74, (byte) 0x0, (byte) 0x12, (byte) 0x4c, (byte) 0x6a, (byte) 0x61, (byte) 0x76,\n+            (byte) 0x61, (byte) 0x2f, (byte) 0x6c, (byte) 0x61, (byte) 0x6e, (byte) 0x67, (byte) 0x2f, (byte) 0x53,\n+            (byte) 0x74, (byte) 0x72, (byte) 0x69, (byte) 0x6e, (byte) 0x67, (byte) 0x3b, (byte) 0x78, (byte) 0x70,\n+            (byte) 0x74, (byte) 0x0, (byte) 0xe, (byte) 0x50, (byte) 0x31, (byte) 0x59, (byte) 0x31, (byte) 0x4d,\n+            (byte) 0x31, (byte) 0x44, (byte) 0x54, (byte) 0x31, (byte) 0x48, (byte) 0x31, (byte) 0x4d, (byte) 0x31,\n+            (byte) 0x53,\n+    };\n+\n+\n+    @Override\n+    public byte[] getGregorianCalendarByteArray() {\n+        return gregorianCalendarBytes;\n+    }\n+\n+    @Override\n+    public String getGregorianCalendarBase64() {\n+        return gregorianCalendarBase64;\n+    }\n+\n+    @Override\n+    public byte[] getDurationBytes() {\n+        return durationBytes;\n+    }\n+\n+    @Override\n+    public String getDurationBase64() {\n+        return durationBase64;\n+    }\n+}\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK6GregorianCalendarAndDurationSerData.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK6_Duration.ser","binary":true,"status":"deleted"},{"filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK6_XMLGregorianCalendar.ser","binary":true,"status":"deleted"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * JDK 7 serialization bytes for XMLGregorianCalendar and Duration data type generated using JDK 1.7.0 version.\n+ *\/\n+public class JDK7GregorianCalendarAndDurationSerData extends GregorianCalendarAndDurationSerData {\n+    private final String gregorianCalendarBase64 = \"\";\n+    private final String durationBase64 = \"\";\n+    private final byte[] gregorianCalendarBytes = {\n+            (byte) 0xac, (byte) 0xed, (byte) 0x0, (byte) 0x5, (byte) 0x73, (byte) 0x72, (byte) 0x0, (byte) 0x49,\n+            (byte) 0x63, (byte) 0x6f, (byte) 0x6d, (byte) 0x2e, (byte) 0x73, (byte) 0x75, (byte) 0x6e, (byte) 0x2e,\n+            (byte) 0x6f, (byte) 0x72, (byte) 0x67, (byte) 0x2e, (byte) 0x61, (byte) 0x70, (byte) 0x61, (byte) 0x63,\n+            (byte) 0x68, (byte) 0x65, (byte) 0x2e, (byte) 0x78, (byte) 0x65, (byte) 0x72, (byte) 0x63, (byte) 0x65,\n+            (byte) 0x73, (byte) 0x2e, (byte) 0x69, (byte) 0x6e, (byte) 0x74, (byte) 0x65, (byte) 0x72, (byte) 0x6e,\n+            (byte) 0x61, (byte) 0x6c, (byte) 0x2e, (byte) 0x6a, (byte) 0x61, (byte) 0x78, (byte) 0x70, (byte) 0x2e,\n+            (byte) 0x64, (byte) 0x61, (byte) 0x74, (byte) 0x61, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65,\n+            (byte) 0x2e, (byte) 0x58, (byte) 0x4d, (byte) 0x4c, (byte) 0x47, (byte) 0x72, (byte) 0x65, (byte) 0x67,\n+            (byte) 0x6f, (byte) 0x72, (byte) 0x69, (byte) 0x61, (byte) 0x6e, (byte) 0x43, (byte) 0x61, (byte) 0x6c,\n+            (byte) 0x65, (byte) 0x6e, (byte) 0x64, (byte) 0x61, (byte) 0x72, (byte) 0x49, (byte) 0x6d, (byte) 0x70,\n+            (byte) 0x6c, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x1, (byte) 0x2, (byte) 0x0, (byte) 0x9, (byte) 0x49, (byte) 0x0, (byte) 0x3, (byte) 0x64,\n+            (byte) 0x61, (byte) 0x79, (byte) 0x49, (byte) 0x0, (byte) 0x4, (byte) 0x68, (byte) 0x6f, (byte) 0x75,\n+            (byte) 0x72, (byte) 0x49, (byte) 0x0, (byte) 0x6, (byte) 0x6d, (byte) 0x69, (byte) 0x6e, (byte) 0x75,\n+            (byte) 0x74, (byte) 0x65, (byte) 0x49, (byte) 0x0, (byte) 0x5, (byte) 0x6d, (byte) 0x6f, (byte) 0x6e,\n+            (byte) 0x74, (byte) 0x68, (byte) 0x49, (byte) 0x0, (byte) 0x6, (byte) 0x73, (byte) 0x65, (byte) 0x63,\n+            (byte) 0x6f, (byte) 0x6e, (byte) 0x64, (byte) 0x49, (byte) 0x0, (byte) 0x8, (byte) 0x74, (byte) 0x69,\n+            (byte) 0x6d, (byte) 0x65, (byte) 0x7a, (byte) 0x6f, (byte) 0x6e, (byte) 0x65, (byte) 0x49, (byte) 0x0,\n+            (byte) 0x4, (byte) 0x79, (byte) 0x65, (byte) 0x61, (byte) 0x72, (byte) 0x4c, (byte) 0x0, (byte) 0x3,\n+            (byte) 0x65, (byte) 0x6f, (byte) 0x6e, (byte) 0x74, (byte) 0x0, (byte) 0x16, (byte) 0x4c, (byte) 0x6a,\n+            (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x2f, (byte) 0x6d, (byte) 0x61, (byte) 0x74, (byte) 0x68,\n+            (byte) 0x2f, (byte) 0x42, (byte) 0x69, (byte) 0x67, (byte) 0x49, (byte) 0x6e, (byte) 0x74, (byte) 0x65,\n+            (byte) 0x67, (byte) 0x65, (byte) 0x72, (byte) 0x3b, (byte) 0x4c, (byte) 0x0, (byte) 0x10, (byte) 0x66,\n+            (byte) 0x72, (byte) 0x61, (byte) 0x63, (byte) 0x74, (byte) 0x69, (byte) 0x6f, (byte) 0x6e, (byte) 0x61,\n+            (byte) 0x6c, (byte) 0x53, (byte) 0x65, (byte) 0x63, (byte) 0x6f, (byte) 0x6e, (byte) 0x64, (byte) 0x74,\n+            (byte) 0x0, (byte) 0x16, (byte) 0x4c, (byte) 0x6a, (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x2f,\n+            (byte) 0x6d, (byte) 0x61, (byte) 0x74, (byte) 0x68, (byte) 0x2f, (byte) 0x42, (byte) 0x69, (byte) 0x67,\n+            (byte) 0x44, (byte) 0x65, (byte) 0x63, (byte) 0x69, (byte) 0x6d, (byte) 0x61, (byte) 0x6c, (byte) 0x3b,\n+            (byte) 0x78, (byte) 0x70, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0xff, (byte) 0xff,\n+            (byte) 0xfe, (byte) 0xd4, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x70, (byte) 0x73,\n+            (byte) 0x72, (byte) 0x0, (byte) 0x14, (byte) 0x6a, (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x2e,\n+            (byte) 0x6d, (byte) 0x61, (byte) 0x74, (byte) 0x68, (byte) 0x2e, (byte) 0x42, (byte) 0x69, (byte) 0x67,\n+            (byte) 0x44, (byte) 0x65, (byte) 0x63, (byte) 0x69, (byte) 0x6d, (byte) 0x61, (byte) 0x6c, (byte) 0x54,\n+            (byte) 0xc7, (byte) 0x15, (byte) 0x57, (byte) 0xf9, (byte) 0x81, (byte) 0x28, (byte) 0x4f, (byte) 0x3,\n+            (byte) 0x0, (byte) 0x2, (byte) 0x49, (byte) 0x0, (byte) 0x5, (byte) 0x73, (byte) 0x63, (byte) 0x61,\n+            (byte) 0x6c, (byte) 0x65, (byte) 0x4c, (byte) 0x0, (byte) 0x6, (byte) 0x69, (byte) 0x6e, (byte) 0x74,\n+            (byte) 0x56, (byte) 0x61, (byte) 0x6c, (byte) 0x71, (byte) 0x0, (byte) 0x7e, (byte) 0x0, (byte) 0x1,\n+            (byte) 0x78, (byte) 0x72, (byte) 0x0, (byte) 0x10, (byte) 0x6a, (byte) 0x61, (byte) 0x76, (byte) 0x61,\n+            (byte) 0x2e, (byte) 0x6c, (byte) 0x61, (byte) 0x6e, (byte) 0x67, (byte) 0x2e, (byte) 0x4e, (byte) 0x75,\n+            (byte) 0x6d, (byte) 0x62, (byte) 0x65, (byte) 0x72, (byte) 0x86, (byte) 0xac, (byte) 0x95, (byte) 0x1d,\n+            (byte) 0xb, (byte) 0x94, (byte) 0xe0, (byte) 0x8b, (byte) 0x2, (byte) 0x0, (byte) 0x0, (byte) 0x78,\n+            (byte) 0x70, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x7, (byte) 0x73, (byte) 0x72, (byte) 0x0,\n+            (byte) 0x14, (byte) 0x6a, (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x2e, (byte) 0x6d, (byte) 0x61,\n+            (byte) 0x74, (byte) 0x68, (byte) 0x2e, (byte) 0x42, (byte) 0x69, (byte) 0x67, (byte) 0x49, (byte) 0x6e,\n+            (byte) 0x74, (byte) 0x65, (byte) 0x67, (byte) 0x65, (byte) 0x72, (byte) 0x8c, (byte) 0xfc, (byte) 0x9f,\n+            (byte) 0x1f, (byte) 0xa9, (byte) 0x3b, (byte) 0xfb, (byte) 0x1d, (byte) 0x3, (byte) 0x0, (byte) 0x6,\n+            (byte) 0x49, (byte) 0x0, (byte) 0x8, (byte) 0x62, (byte) 0x69, (byte) 0x74, (byte) 0x43, (byte) 0x6f,\n+            (byte) 0x75, (byte) 0x6e, (byte) 0x74, (byte) 0x49, (byte) 0x0, (byte) 0x9, (byte) 0x62, (byte) 0x69,\n+            (byte) 0x74, (byte) 0x4c, (byte) 0x65, (byte) 0x6e, (byte) 0x67, (byte) 0x74, (byte) 0x68, (byte) 0x49,\n+            (byte) 0x0, (byte) 0x13, (byte) 0x66, (byte) 0x69, (byte) 0x72, (byte) 0x73, (byte) 0x74, (byte) 0x4e,\n+            (byte) 0x6f, (byte) 0x6e, (byte) 0x7a, (byte) 0x65, (byte) 0x72, (byte) 0x6f, (byte) 0x42, (byte) 0x79,\n+            (byte) 0x74, (byte) 0x65, (byte) 0x4e, (byte) 0x75, (byte) 0x6d, (byte) 0x49, (byte) 0x0, (byte) 0xc,\n+            (byte) 0x6c, (byte) 0x6f, (byte) 0x77, (byte) 0x65, (byte) 0x73, (byte) 0x74, (byte) 0x53, (byte) 0x65,\n+            (byte) 0x74, (byte) 0x42, (byte) 0x69, (byte) 0x74, (byte) 0x49, (byte) 0x0, (byte) 0x6, (byte) 0x73,\n+            (byte) 0x69, (byte) 0x67, (byte) 0x6e, (byte) 0x75, (byte) 0x6d, (byte) 0x5b, (byte) 0x0, (byte) 0x9,\n+            (byte) 0x6d, (byte) 0x61, (byte) 0x67, (byte) 0x6e, (byte) 0x69, (byte) 0x74, (byte) 0x75, (byte) 0x64,\n+            (byte) 0x65, (byte) 0x74, (byte) 0x0, (byte) 0x2, (byte) 0x5b, (byte) 0x42, (byte) 0x78, (byte) 0x71,\n+            (byte) 0x0, (byte) 0x7e, (byte) 0x0, (byte) 0x5, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,\n+            (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xfe,\n+            (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xfe, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x75, (byte) 0x72, (byte) 0x0, (byte) 0x2, (byte) 0x5b, (byte) 0x42, (byte) 0xac, (byte) 0xf3,\n+            (byte) 0x17, (byte) 0xf8, (byte) 0x6, (byte) 0x8, (byte) 0x54, (byte) 0xe0, (byte) 0x2, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x78, (byte) 0x70, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x78,\n+            (byte) 0x78,\n+    };\n+    private final byte[] durationBytes = {\n+            (byte) 0xac, (byte) 0xed, (byte) 0x0, (byte) 0x5, (byte) 0x73, (byte) 0x72, (byte) 0x0, (byte) 0x4c,\n+            (byte) 0x63, (byte) 0x6f, (byte) 0x6d, (byte) 0x2e, (byte) 0x73, (byte) 0x75, (byte) 0x6e, (byte) 0x2e,\n+            (byte) 0x6f, (byte) 0x72, (byte) 0x67, (byte) 0x2e, (byte) 0x61, (byte) 0x70, (byte) 0x61, (byte) 0x63,\n+            (byte) 0x68, (byte) 0x65, (byte) 0x2e, (byte) 0x78, (byte) 0x65, (byte) 0x72, (byte) 0x63, (byte) 0x65,\n+            (byte) 0x73, (byte) 0x2e, (byte) 0x69, (byte) 0x6e, (byte) 0x74, (byte) 0x65, (byte) 0x72, (byte) 0x6e,\n+            (byte) 0x61, (byte) 0x6c, (byte) 0x2e, (byte) 0x6a, (byte) 0x61, (byte) 0x78, (byte) 0x70, (byte) 0x2e,\n+            (byte) 0x64, (byte) 0x61, (byte) 0x74, (byte) 0x61, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65,\n+            (byte) 0x2e, (byte) 0x44, (byte) 0x75, (byte) 0x72, (byte) 0x61, (byte) 0x74, (byte) 0x69, (byte) 0x6f,\n+            (byte) 0x6e, (byte) 0x49, (byte) 0x6d, (byte) 0x70, (byte) 0x6c, (byte) 0x24, (byte) 0x44, (byte) 0x75,\n+            (byte) 0x72, (byte) 0x61, (byte) 0x74, (byte) 0x69, (byte) 0x6f, (byte) 0x6e, (byte) 0x53, (byte) 0x74,\n+            (byte) 0x72, (byte) 0x65, (byte) 0x61, (byte) 0x6d, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x2, (byte) 0x0, (byte) 0x1, (byte) 0x4c,\n+            (byte) 0x0, (byte) 0x7, (byte) 0x6c, (byte) 0x65, (byte) 0x78, (byte) 0x69, (byte) 0x63, (byte) 0x61,\n+            (byte) 0x6c, (byte) 0x74, (byte) 0x0, (byte) 0x12, (byte) 0x4c, (byte) 0x6a, (byte) 0x61, (byte) 0x76,\n+            (byte) 0x61, (byte) 0x2f, (byte) 0x6c, (byte) 0x61, (byte) 0x6e, (byte) 0x67, (byte) 0x2f, (byte) 0x53,\n+            (byte) 0x74, (byte) 0x72, (byte) 0x69, (byte) 0x6e, (byte) 0x67, (byte) 0x3b, (byte) 0x78, (byte) 0x70,\n+            (byte) 0x74, (byte) 0x0, (byte) 0xe, (byte) 0x50, (byte) 0x31, (byte) 0x59, (byte) 0x31, (byte) 0x4d,\n+            (byte) 0x31, (byte) 0x44, (byte) 0x54, (byte) 0x31, (byte) 0x48, (byte) 0x31, (byte) 0x4d, (byte) 0x31,\n+            (byte) 0x53,\n+    };\n+\n+\n+    @Override\n+    public byte[] getGregorianCalendarByteArray() {\n+        return gregorianCalendarBytes;\n+    }\n+\n+    @Override\n+    public String getGregorianCalendarBase64() {\n+        return gregorianCalendarBase64;\n+    }\n+\n+    @Override\n+    public byte[] getDurationBytes() {\n+        return durationBytes;\n+    }\n+\n+    @Override\n+    public String getDurationBase64() {\n+        return durationBase64;\n+    }\n+}\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK7GregorianCalendarAndDurationSerData.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK7_Duration.ser","binary":true,"status":"deleted"},{"filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK7_XMLGregorianCalendar.ser","binary":true,"status":"deleted"},{"patch":"@@ -0,0 +1,154 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * JDK 8 serialization bytes for XMLGregorianCalendar and Duration data type generated using JDK 1.8.0 version.\n+ *\/\n+public class JDK8GregorianCalendarAndDurationSerData extends GregorianCalendarAndDurationSerData {\n+    private final String gregorianCalendarBase64 =\n+            \"rO0ABXNyAEljb20uc3VuLm9yZy5hcGFjaGUueGVyY2VzLmludGVybmFsLmpheHAu\"\n+                    + \"ZGF0YXR5cGUuWE1MR3JlZ29yaWFuQ2FsZW5kYXJJbXBsAAAAAAAAAAECAAlJAANk\"\n+                    + \"YXlJAARob3VySQAGbWludXRlSQAFbW9udGhJAAZzZWNvbmRJAAh0aW1lem9uZUkA\"\n+                    + \"BHllYXJMAANlb250ABZMamF2YS9tYXRoL0JpZ0ludGVnZXI7TAAQZnJhY3Rpb25h\"\n+                    + \"bFNlY29uZHQAFkxqYXZhL21hdGgvQmlnRGVjaW1hbDt4cAAAAAEAAAAAAAAAAAAA\"\n+                    + \"AAEAAAAA\/\/\/+1AAAAAFwc3IAFGphdmEubWF0aC5CaWdEZWNpbWFsVMcVV\/mBKE8D\"\n+                    + \"AAJJAAVzY2FsZUwABmludFZhbHEAfgABeHIAEGphdmEubGFuZy5OdW1iZXKGrJUd\"\n+                    + \"C5TgiwIAAHhwAAAAB3NyABRqYXZhLm1hdGguQmlnSW50ZWdlcoz8nx+pO\/sdAwAG\"\n+                    + \"SQAIYml0Q291bnRJAAliaXRMZW5ndGhJABNmaXJzdE5vbnplcm9CeXRlTnVtSQAM\"\n+                    + \"bG93ZXN0U2V0Qml0SQAGc2lnbnVtWwAJbWFnbml0dWRldAACW0J4cQB+AAX\/\/\/\/\/\"\n+                    + \"\/\/\/\/\/\/\/\/\/\/7\/\/\/\/+AAAAAHVyAAJbQqzzF\/gGCFTgAgAAeHAAAAAAeHg=\";\n+    private final String durationBase64 =\n+            \"rO0ABXNyAExjb20uc3VuLm9yZy5hcGFjaGUueGVyY2VzLmludGVybmFsLmpheHAu\"\n+                    + \"ZGF0YXR5cGUuRHVyYXRpb25JbXBsJER1cmF0aW9uU3RyZWFtAAAAAAAAAAECAAFM\"\n+                    + \"AAdsZXhpY2FsdAASTGphdmEvbGFuZy9TdHJpbmc7eHB0AA5QMVkxTTFEVDFIMU0x\"\n+                    + \"Uw==\";\n+    private final byte[] gregorianCalendarBytes = {\n+            (byte) 0xac, (byte) 0xed, (byte) 0x0, (byte) 0x5, (byte) 0x73, (byte) 0x72, (byte) 0x0, (byte) 0x49,\n+            (byte) 0x63, (byte) 0x6f, (byte) 0x6d, (byte) 0x2e, (byte) 0x73, (byte) 0x75, (byte) 0x6e, (byte) 0x2e,\n+            (byte) 0x6f, (byte) 0x72, (byte) 0x67, (byte) 0x2e, (byte) 0x61, (byte) 0x70, (byte) 0x61, (byte) 0x63,\n+            (byte) 0x68, (byte) 0x65, (byte) 0x2e, (byte) 0x78, (byte) 0x65, (byte) 0x72, (byte) 0x63, (byte) 0x65,\n+            (byte) 0x73, (byte) 0x2e, (byte) 0x69, (byte) 0x6e, (byte) 0x74, (byte) 0x65, (byte) 0x72, (byte) 0x6e,\n+            (byte) 0x61, (byte) 0x6c, (byte) 0x2e, (byte) 0x6a, (byte) 0x61, (byte) 0x78, (byte) 0x70, (byte) 0x2e,\n+            (byte) 0x64, (byte) 0x61, (byte) 0x74, (byte) 0x61, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65,\n+            (byte) 0x2e, (byte) 0x58, (byte) 0x4d, (byte) 0x4c, (byte) 0x47, (byte) 0x72, (byte) 0x65, (byte) 0x67,\n+            (byte) 0x6f, (byte) 0x72, (byte) 0x69, (byte) 0x61, (byte) 0x6e, (byte) 0x43, (byte) 0x61, (byte) 0x6c,\n+            (byte) 0x65, (byte) 0x6e, (byte) 0x64, (byte) 0x61, (byte) 0x72, (byte) 0x49, (byte) 0x6d, (byte) 0x70,\n+            (byte) 0x6c, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x1, (byte) 0x2, (byte) 0x0, (byte) 0x9, (byte) 0x49, (byte) 0x0, (byte) 0x3, (byte) 0x64,\n+            (byte) 0x61, (byte) 0x79, (byte) 0x49, (byte) 0x0, (byte) 0x4, (byte) 0x68, (byte) 0x6f, (byte) 0x75,\n+            (byte) 0x72, (byte) 0x49, (byte) 0x0, (byte) 0x6, (byte) 0x6d, (byte) 0x69, (byte) 0x6e, (byte) 0x75,\n+            (byte) 0x74, (byte) 0x65, (byte) 0x49, (byte) 0x0, (byte) 0x5, (byte) 0x6d, (byte) 0x6f, (byte) 0x6e,\n+            (byte) 0x74, (byte) 0x68, (byte) 0x49, (byte) 0x0, (byte) 0x6, (byte) 0x73, (byte) 0x65, (byte) 0x63,\n+            (byte) 0x6f, (byte) 0x6e, (byte) 0x64, (byte) 0x49, (byte) 0x0, (byte) 0x8, (byte) 0x74, (byte) 0x69,\n+            (byte) 0x6d, (byte) 0x65, (byte) 0x7a, (byte) 0x6f, (byte) 0x6e, (byte) 0x65, (byte) 0x49, (byte) 0x0,\n+            (byte) 0x4, (byte) 0x79, (byte) 0x65, (byte) 0x61, (byte) 0x72, (byte) 0x4c, (byte) 0x0, (byte) 0x3,\n+            (byte) 0x65, (byte) 0x6f, (byte) 0x6e, (byte) 0x74, (byte) 0x0, (byte) 0x16, (byte) 0x4c, (byte) 0x6a,\n+            (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x2f, (byte) 0x6d, (byte) 0x61, (byte) 0x74, (byte) 0x68,\n+            (byte) 0x2f, (byte) 0x42, (byte) 0x69, (byte) 0x67, (byte) 0x49, (byte) 0x6e, (byte) 0x74, (byte) 0x65,\n+            (byte) 0x67, (byte) 0x65, (byte) 0x72, (byte) 0x3b, (byte) 0x4c, (byte) 0x0, (byte) 0x10, (byte) 0x66,\n+            (byte) 0x72, (byte) 0x61, (byte) 0x63, (byte) 0x74, (byte) 0x69, (byte) 0x6f, (byte) 0x6e, (byte) 0x61,\n+            (byte) 0x6c, (byte) 0x53, (byte) 0x65, (byte) 0x63, (byte) 0x6f, (byte) 0x6e, (byte) 0x64, (byte) 0x74,\n+            (byte) 0x0, (byte) 0x16, (byte) 0x4c, (byte) 0x6a, (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x2f,\n+            (byte) 0x6d, (byte) 0x61, (byte) 0x74, (byte) 0x68, (byte) 0x2f, (byte) 0x42, (byte) 0x69, (byte) 0x67,\n+            (byte) 0x44, (byte) 0x65, (byte) 0x63, (byte) 0x69, (byte) 0x6d, (byte) 0x61, (byte) 0x6c, (byte) 0x3b,\n+            (byte) 0x78, (byte) 0x70, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0xff, (byte) 0xff,\n+            (byte) 0xfe, (byte) 0xd4, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x70, (byte) 0x73,\n+            (byte) 0x72, (byte) 0x0, (byte) 0x14, (byte) 0x6a, (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x2e,\n+            (byte) 0x6d, (byte) 0x61, (byte) 0x74, (byte) 0x68, (byte) 0x2e, (byte) 0x42, (byte) 0x69, (byte) 0x67,\n+            (byte) 0x44, (byte) 0x65, (byte) 0x63, (byte) 0x69, (byte) 0x6d, (byte) 0x61, (byte) 0x6c, (byte) 0x54,\n+            (byte) 0xc7, (byte) 0x15, (byte) 0x57, (byte) 0xf9, (byte) 0x81, (byte) 0x28, (byte) 0x4f, (byte) 0x3,\n+            (byte) 0x0, (byte) 0x2, (byte) 0x49, (byte) 0x0, (byte) 0x5, (byte) 0x73, (byte) 0x63, (byte) 0x61,\n+            (byte) 0x6c, (byte) 0x65, (byte) 0x4c, (byte) 0x0, (byte) 0x6, (byte) 0x69, (byte) 0x6e, (byte) 0x74,\n+            (byte) 0x56, (byte) 0x61, (byte) 0x6c, (byte) 0x71, (byte) 0x0, (byte) 0x7e, (byte) 0x0, (byte) 0x1,\n+            (byte) 0x78, (byte) 0x72, (byte) 0x0, (byte) 0x10, (byte) 0x6a, (byte) 0x61, (byte) 0x76, (byte) 0x61,\n+            (byte) 0x2e, (byte) 0x6c, (byte) 0x61, (byte) 0x6e, (byte) 0x67, (byte) 0x2e, (byte) 0x4e, (byte) 0x75,\n+            (byte) 0x6d, (byte) 0x62, (byte) 0x65, (byte) 0x72, (byte) 0x86, (byte) 0xac, (byte) 0x95, (byte) 0x1d,\n+            (byte) 0xb, (byte) 0x94, (byte) 0xe0, (byte) 0x8b, (byte) 0x2, (byte) 0x0, (byte) 0x0, (byte) 0x78,\n+            (byte) 0x70, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x7, (byte) 0x73, (byte) 0x72, (byte) 0x0,\n+            (byte) 0x14, (byte) 0x6a, (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x2e, (byte) 0x6d, (byte) 0x61,\n+            (byte) 0x74, (byte) 0x68, (byte) 0x2e, (byte) 0x42, (byte) 0x69, (byte) 0x67, (byte) 0x49, (byte) 0x6e,\n+            (byte) 0x74, (byte) 0x65, (byte) 0x67, (byte) 0x65, (byte) 0x72, (byte) 0x8c, (byte) 0xfc, (byte) 0x9f,\n+            (byte) 0x1f, (byte) 0xa9, (byte) 0x3b, (byte) 0xfb, (byte) 0x1d, (byte) 0x3, (byte) 0x0, (byte) 0x6,\n+            (byte) 0x49, (byte) 0x0, (byte) 0x8, (byte) 0x62, (byte) 0x69, (byte) 0x74, (byte) 0x43, (byte) 0x6f,\n+            (byte) 0x75, (byte) 0x6e, (byte) 0x74, (byte) 0x49, (byte) 0x0, (byte) 0x9, (byte) 0x62, (byte) 0x69,\n+            (byte) 0x74, (byte) 0x4c, (byte) 0x65, (byte) 0x6e, (byte) 0x67, (byte) 0x74, (byte) 0x68, (byte) 0x49,\n+            (byte) 0x0, (byte) 0x13, (byte) 0x66, (byte) 0x69, (byte) 0x72, (byte) 0x73, (byte) 0x74, (byte) 0x4e,\n+            (byte) 0x6f, (byte) 0x6e, (byte) 0x7a, (byte) 0x65, (byte) 0x72, (byte) 0x6f, (byte) 0x42, (byte) 0x79,\n+            (byte) 0x74, (byte) 0x65, (byte) 0x4e, (byte) 0x75, (byte) 0x6d, (byte) 0x49, (byte) 0x0, (byte) 0xc,\n+            (byte) 0x6c, (byte) 0x6f, (byte) 0x77, (byte) 0x65, (byte) 0x73, (byte) 0x74, (byte) 0x53, (byte) 0x65,\n+            (byte) 0x74, (byte) 0x42, (byte) 0x69, (byte) 0x74, (byte) 0x49, (byte) 0x0, (byte) 0x6, (byte) 0x73,\n+            (byte) 0x69, (byte) 0x67, (byte) 0x6e, (byte) 0x75, (byte) 0x6d, (byte) 0x5b, (byte) 0x0, (byte) 0x9,\n+            (byte) 0x6d, (byte) 0x61, (byte) 0x67, (byte) 0x6e, (byte) 0x69, (byte) 0x74, (byte) 0x75, (byte) 0x64,\n+            (byte) 0x65, (byte) 0x74, (byte) 0x0, (byte) 0x2, (byte) 0x5b, (byte) 0x42, (byte) 0x78, (byte) 0x71,\n+            (byte) 0x0, (byte) 0x7e, (byte) 0x0, (byte) 0x5, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,\n+            (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xfe,\n+            (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xfe, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x75, (byte) 0x72, (byte) 0x0, (byte) 0x2, (byte) 0x5b, (byte) 0x42, (byte) 0xac, (byte) 0xf3,\n+            (byte) 0x17, (byte) 0xf8, (byte) 0x6, (byte) 0x8, (byte) 0x54, (byte) 0xe0, (byte) 0x2, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x78, (byte) 0x70, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x78,\n+            (byte) 0x78,\n+    };\n+    private final byte[] durationBytes = {\n+            (byte) 0xac, (byte) 0xed, (byte) 0x0, (byte) 0x5, (byte) 0x73, (byte) 0x72, (byte) 0x0, (byte) 0x4c,\n+            (byte) 0x63, (byte) 0x6f, (byte) 0x6d, (byte) 0x2e, (byte) 0x73, (byte) 0x75, (byte) 0x6e, (byte) 0x2e,\n+            (byte) 0x6f, (byte) 0x72, (byte) 0x67, (byte) 0x2e, (byte) 0x61, (byte) 0x70, (byte) 0x61, (byte) 0x63,\n+            (byte) 0x68, (byte) 0x65, (byte) 0x2e, (byte) 0x78, (byte) 0x65, (byte) 0x72, (byte) 0x63, (byte) 0x65,\n+            (byte) 0x73, (byte) 0x2e, (byte) 0x69, (byte) 0x6e, (byte) 0x74, (byte) 0x65, (byte) 0x72, (byte) 0x6e,\n+            (byte) 0x61, (byte) 0x6c, (byte) 0x2e, (byte) 0x6a, (byte) 0x61, (byte) 0x78, (byte) 0x70, (byte) 0x2e,\n+            (byte) 0x64, (byte) 0x61, (byte) 0x74, (byte) 0x61, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65,\n+            (byte) 0x2e, (byte) 0x44, (byte) 0x75, (byte) 0x72, (byte) 0x61, (byte) 0x74, (byte) 0x69, (byte) 0x6f,\n+            (byte) 0x6e, (byte) 0x49, (byte) 0x6d, (byte) 0x70, (byte) 0x6c, (byte) 0x24, (byte) 0x44, (byte) 0x75,\n+            (byte) 0x72, (byte) 0x61, (byte) 0x74, (byte) 0x69, (byte) 0x6f, (byte) 0x6e, (byte) 0x53, (byte) 0x74,\n+            (byte) 0x72, (byte) 0x65, (byte) 0x61, (byte) 0x6d, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x2, (byte) 0x0, (byte) 0x1, (byte) 0x4c,\n+            (byte) 0x0, (byte) 0x7, (byte) 0x6c, (byte) 0x65, (byte) 0x78, (byte) 0x69, (byte) 0x63, (byte) 0x61,\n+            (byte) 0x6c, (byte) 0x74, (byte) 0x0, (byte) 0x12, (byte) 0x4c, (byte) 0x6a, (byte) 0x61, (byte) 0x76,\n+            (byte) 0x61, (byte) 0x2f, (byte) 0x6c, (byte) 0x61, (byte) 0x6e, (byte) 0x67, (byte) 0x2f, (byte) 0x53,\n+            (byte) 0x74, (byte) 0x72, (byte) 0x69, (byte) 0x6e, (byte) 0x67, (byte) 0x3b, (byte) 0x78, (byte) 0x70,\n+            (byte) 0x74, (byte) 0x0, (byte) 0xe, (byte) 0x50, (byte) 0x31, (byte) 0x59, (byte) 0x31, (byte) 0x4d,\n+            (byte) 0x31, (byte) 0x44, (byte) 0x54, (byte) 0x31, (byte) 0x48, (byte) 0x31, (byte) 0x4d, (byte) 0x31,\n+            (byte) 0x53,\n+    };\n+\n+    @Override\n+    public byte[] getGregorianCalendarByteArray() {\n+        return gregorianCalendarBytes;\n+    }\n+\n+    @Override\n+    public String getGregorianCalendarBase64() {\n+        return gregorianCalendarBase64;\n+    }\n+\n+    @Override\n+    public byte[] getDurationBytes() {\n+        return durationBytes;\n+    }\n+\n+    @Override\n+    public String getDurationBase64() {\n+        return durationBase64;\n+    }\n+}\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK8GregorianCalendarAndDurationSerData.java","additions":154,"deletions":0,"binary":false,"changes":154,"status":"added"},{"filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK8_Duration.ser","binary":true,"status":"deleted"},{"filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK8_XMLGregorianCalendar.ser","binary":true,"status":"deleted"},{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * JDK 9 serialization bytes for XMLGregorianCalendar and Duration data type generated using JDK 9.0.4 version.\n+ *\/\n+public class JDK9GregorianCalendarAndDurationSerData extends GregorianCalendarAndDurationSerData {\n+    private final String gregorianCalendarBase64 =\n+            \"rO0ABXNyAEljb20uc3VuLm9yZy5hcGFjaGUueGVyY2VzLmludGVybmFsLmpheHAu\"\n+                    + \"ZGF0YXR5cGUuWE1MR3JlZ29yaWFuQ2FsZW5kYXJJbXBsAAAAAAAAAAECAAlJAANk\"\n+                    + \"YXlJAARob3VySQAGbWludXRlSQAFbW9udGhJAAZzZWNvbmRJAAh0aW1lem9uZUkA\"\n+                    + \"BHllYXJMAANlb250ABZMamF2YS9tYXRoL0JpZ0ludGVnZXI7TAAQZnJhY3Rpb25h\"\n+                    + \"bFNlY29uZHQAFkxqYXZhL21hdGgvQmlnRGVjaW1hbDt4cAAAAAEAAAAAAAAAAAAA\"\n+                    + \"AAEAAAAA\/\/\/+1AAAAAFwc3IAFGphdmEubWF0aC5CaWdEZWNpbWFsVMcVV\/mBKE8D\"\n+                    + \"AAJJAAVzY2FsZUwABmludFZhbHEAfgABeHIAEGphdmEubGFuZy5OdW1iZXKGrJUd\"\n+                    + \"C5TgiwIAAHhwAAAAB3NyABRqYXZhLm1hdGguQmlnSW50ZWdlcoz8nx+pO\/sdAwAG\"\n+                    + \"SQAIYml0Q291bnRJAAliaXRMZW5ndGhJABNmaXJzdE5vbnplcm9CeXRlTnVtSQAM\"\n+                    + \"bG93ZXN0U2V0Qml0SQAGc2lnbnVtWwAJbWFnbml0dWRldAACW0J4cQB+AAX\/\/\/\/\/\"\n+                    + \"\/\/\/\/\/\/\/\/\/\/7\/\/\/\/+AAAAAHVyAAJbQqzzF\/gGCFTgAgAAeHAAAAAAeHg=\";\n+    private final String durationBase64 =\n+            \"rO0ABXNyAExjb20uc3VuLm9yZy5hcGFjaGUueGVyY2VzLmludGVybmFsLmpheHAu\"\n+                    + \"ZGF0YXR5cGUuRHVyYXRpb25JbXBsJER1cmF0aW9uU3RyZWFtAAAAAAAAAAECAAFM\"\n+                    + \"AAdsZXhpY2FsdAASTGphdmEvbGFuZy9TdHJpbmc7eHB0AA5QMVkxTTFEVDFIMU0x\"\n+                    + \"Uw==\";\n+    private final byte[] gregorianCalendarBytes = {\n+            (byte) 0xac, (byte) 0xed, (byte) 0x0, (byte) 0x5, (byte) 0x73, (byte) 0x72, (byte) 0x0, (byte) 0x49,\n+            (byte) 0x63, (byte) 0x6f, (byte) 0x6d, (byte) 0x2e, (byte) 0x73, (byte) 0x75, (byte) 0x6e, (byte) 0x2e,\n+            (byte) 0x6f, (byte) 0x72, (byte) 0x67, (byte) 0x2e, (byte) 0x61, (byte) 0x70, (byte) 0x61, (byte) 0x63,\n+            (byte) 0x68, (byte) 0x65, (byte) 0x2e, (byte) 0x78, (byte) 0x65, (byte) 0x72, (byte) 0x63, (byte) 0x65,\n+            (byte) 0x73, (byte) 0x2e, (byte) 0x69, (byte) 0x6e, (byte) 0x74, (byte) 0x65, (byte) 0x72, (byte) 0x6e,\n+            (byte) 0x61, (byte) 0x6c, (byte) 0x2e, (byte) 0x6a, (byte) 0x61, (byte) 0x78, (byte) 0x70, (byte) 0x2e,\n+            (byte) 0x64, (byte) 0x61, (byte) 0x74, (byte) 0x61, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65,\n+            (byte) 0x2e, (byte) 0x58, (byte) 0x4d, (byte) 0x4c, (byte) 0x47, (byte) 0x72, (byte) 0x65, (byte) 0x67,\n+            (byte) 0x6f, (byte) 0x72, (byte) 0x69, (byte) 0x61, (byte) 0x6e, (byte) 0x43, (byte) 0x61, (byte) 0x6c,\n+            (byte) 0x65, (byte) 0x6e, (byte) 0x64, (byte) 0x61, (byte) 0x72, (byte) 0x49, (byte) 0x6d, (byte) 0x70,\n+            (byte) 0x6c, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x1, (byte) 0x2, (byte) 0x0, (byte) 0x9, (byte) 0x49, (byte) 0x0, (byte) 0x3, (byte) 0x64,\n+            (byte) 0x61, (byte) 0x79, (byte) 0x49, (byte) 0x0, (byte) 0x4, (byte) 0x68, (byte) 0x6f, (byte) 0x75,\n+            (byte) 0x72, (byte) 0x49, (byte) 0x0, (byte) 0x6, (byte) 0x6d, (byte) 0x69, (byte) 0x6e, (byte) 0x75,\n+            (byte) 0x74, (byte) 0x65, (byte) 0x49, (byte) 0x0, (byte) 0x5, (byte) 0x6d, (byte) 0x6f, (byte) 0x6e,\n+            (byte) 0x74, (byte) 0x68, (byte) 0x49, (byte) 0x0, (byte) 0x6, (byte) 0x73, (byte) 0x65, (byte) 0x63,\n+            (byte) 0x6f, (byte) 0x6e, (byte) 0x64, (byte) 0x49, (byte) 0x0, (byte) 0x8, (byte) 0x74, (byte) 0x69,\n+            (byte) 0x6d, (byte) 0x65, (byte) 0x7a, (byte) 0x6f, (byte) 0x6e, (byte) 0x65, (byte) 0x49, (byte) 0x0,\n+            (byte) 0x4, (byte) 0x79, (byte) 0x65, (byte) 0x61, (byte) 0x72, (byte) 0x4c, (byte) 0x0, (byte) 0x3,\n+            (byte) 0x65, (byte) 0x6f, (byte) 0x6e, (byte) 0x74, (byte) 0x0, (byte) 0x16, (byte) 0x4c, (byte) 0x6a,\n+            (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x2f, (byte) 0x6d, (byte) 0x61, (byte) 0x74, (byte) 0x68,\n+            (byte) 0x2f, (byte) 0x42, (byte) 0x69, (byte) 0x67, (byte) 0x49, (byte) 0x6e, (byte) 0x74, (byte) 0x65,\n+            (byte) 0x67, (byte) 0x65, (byte) 0x72, (byte) 0x3b, (byte) 0x4c, (byte) 0x0, (byte) 0x10, (byte) 0x66,\n+            (byte) 0x72, (byte) 0x61, (byte) 0x63, (byte) 0x74, (byte) 0x69, (byte) 0x6f, (byte) 0x6e, (byte) 0x61,\n+            (byte) 0x6c, (byte) 0x53, (byte) 0x65, (byte) 0x63, (byte) 0x6f, (byte) 0x6e, (byte) 0x64, (byte) 0x74,\n+            (byte) 0x0, (byte) 0x16, (byte) 0x4c, (byte) 0x6a, (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x2f,\n+            (byte) 0x6d, (byte) 0x61, (byte) 0x74, (byte) 0x68, (byte) 0x2f, (byte) 0x42, (byte) 0x69, (byte) 0x67,\n+            (byte) 0x44, (byte) 0x65, (byte) 0x63, (byte) 0x69, (byte) 0x6d, (byte) 0x61, (byte) 0x6c, (byte) 0x3b,\n+            (byte) 0x78, (byte) 0x70, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0xff, (byte) 0xff,\n+            (byte) 0xfe, (byte) 0xd4, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x70, (byte) 0x73,\n+            (byte) 0x72, (byte) 0x0, (byte) 0x14, (byte) 0x6a, (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x2e,\n+            (byte) 0x6d, (byte) 0x61, (byte) 0x74, (byte) 0x68, (byte) 0x2e, (byte) 0x42, (byte) 0x69, (byte) 0x67,\n+            (byte) 0x44, (byte) 0x65, (byte) 0x63, (byte) 0x69, (byte) 0x6d, (byte) 0x61, (byte) 0x6c, (byte) 0x54,\n+            (byte) 0xc7, (byte) 0x15, (byte) 0x57, (byte) 0xf9, (byte) 0x81, (byte) 0x28, (byte) 0x4f, (byte) 0x3,\n+            (byte) 0x0, (byte) 0x2, (byte) 0x49, (byte) 0x0, (byte) 0x5, (byte) 0x73, (byte) 0x63, (byte) 0x61,\n+            (byte) 0x6c, (byte) 0x65, (byte) 0x4c, (byte) 0x0, (byte) 0x6, (byte) 0x69, (byte) 0x6e, (byte) 0x74,\n+            (byte) 0x56, (byte) 0x61, (byte) 0x6c, (byte) 0x71, (byte) 0x0, (byte) 0x7e, (byte) 0x0, (byte) 0x1,\n+            (byte) 0x78, (byte) 0x72, (byte) 0x0, (byte) 0x10, (byte) 0x6a, (byte) 0x61, (byte) 0x76, (byte) 0x61,\n+            (byte) 0x2e, (byte) 0x6c, (byte) 0x61, (byte) 0x6e, (byte) 0x67, (byte) 0x2e, (byte) 0x4e, (byte) 0x75,\n+            (byte) 0x6d, (byte) 0x62, (byte) 0x65, (byte) 0x72, (byte) 0x86, (byte) 0xac, (byte) 0x95, (byte) 0x1d,\n+            (byte) 0xb, (byte) 0x94, (byte) 0xe0, (byte) 0x8b, (byte) 0x2, (byte) 0x0, (byte) 0x0, (byte) 0x78,\n+            (byte) 0x70, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x7, (byte) 0x73, (byte) 0x72, (byte) 0x0,\n+            (byte) 0x14, (byte) 0x6a, (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x2e, (byte) 0x6d, (byte) 0x61,\n+            (byte) 0x74, (byte) 0x68, (byte) 0x2e, (byte) 0x42, (byte) 0x69, (byte) 0x67, (byte) 0x49, (byte) 0x6e,\n+            (byte) 0x74, (byte) 0x65, (byte) 0x67, (byte) 0x65, (byte) 0x72, (byte) 0x8c, (byte) 0xfc, (byte) 0x9f,\n+            (byte) 0x1f, (byte) 0xa9, (byte) 0x3b, (byte) 0xfb, (byte) 0x1d, (byte) 0x3, (byte) 0x0, (byte) 0x6,\n+            (byte) 0x49, (byte) 0x0, (byte) 0x8, (byte) 0x62, (byte) 0x69, (byte) 0x74, (byte) 0x43, (byte) 0x6f,\n+            (byte) 0x75, (byte) 0x6e, (byte) 0x74, (byte) 0x49, (byte) 0x0, (byte) 0x9, (byte) 0x62, (byte) 0x69,\n+            (byte) 0x74, (byte) 0x4c, (byte) 0x65, (byte) 0x6e, (byte) 0x67, (byte) 0x74, (byte) 0x68, (byte) 0x49,\n+            (byte) 0x0, (byte) 0x13, (byte) 0x66, (byte) 0x69, (byte) 0x72, (byte) 0x73, (byte) 0x74, (byte) 0x4e,\n+            (byte) 0x6f, (byte) 0x6e, (byte) 0x7a, (byte) 0x65, (byte) 0x72, (byte) 0x6f, (byte) 0x42, (byte) 0x79,\n+            (byte) 0x74, (byte) 0x65, (byte) 0x4e, (byte) 0x75, (byte) 0x6d, (byte) 0x49, (byte) 0x0, (byte) 0xc,\n+            (byte) 0x6c, (byte) 0x6f, (byte) 0x77, (byte) 0x65, (byte) 0x73, (byte) 0x74, (byte) 0x53, (byte) 0x65,\n+            (byte) 0x74, (byte) 0x42, (byte) 0x69, (byte) 0x74, (byte) 0x49, (byte) 0x0, (byte) 0x6, (byte) 0x73,\n+            (byte) 0x69, (byte) 0x67, (byte) 0x6e, (byte) 0x75, (byte) 0x6d, (byte) 0x5b, (byte) 0x0, (byte) 0x9,\n+            (byte) 0x6d, (byte) 0x61, (byte) 0x67, (byte) 0x6e, (byte) 0x69, (byte) 0x74, (byte) 0x75, (byte) 0x64,\n+            (byte) 0x65, (byte) 0x74, (byte) 0x0, (byte) 0x2, (byte) 0x5b, (byte) 0x42, (byte) 0x78, (byte) 0x71,\n+            (byte) 0x0, (byte) 0x7e, (byte) 0x0, (byte) 0x5, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,\n+            (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xfe,\n+            (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xfe, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x75, (byte) 0x72, (byte) 0x0, (byte) 0x2, (byte) 0x5b, (byte) 0x42, (byte) 0xac, (byte) 0xf3,\n+            (byte) 0x17, (byte) 0xf8, (byte) 0x6, (byte) 0x8, (byte) 0x54, (byte) 0xe0, (byte) 0x2, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x78, (byte) 0x70, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x78,\n+            (byte) 0x78,\n+    };\n+    private final byte[] durationBytes = {\n+            (byte) 0xac, (byte) 0xed, (byte) 0x0, (byte) 0x5, (byte) 0x73, (byte) 0x72, (byte) 0x0, (byte) 0x4c,\n+            (byte) 0x63, (byte) 0x6f, (byte) 0x6d, (byte) 0x2e, (byte) 0x73, (byte) 0x75, (byte) 0x6e, (byte) 0x2e,\n+            (byte) 0x6f, (byte) 0x72, (byte) 0x67, (byte) 0x2e, (byte) 0x61, (byte) 0x70, (byte) 0x61, (byte) 0x63,\n+            (byte) 0x68, (byte) 0x65, (byte) 0x2e, (byte) 0x78, (byte) 0x65, (byte) 0x72, (byte) 0x63, (byte) 0x65,\n+            (byte) 0x73, (byte) 0x2e, (byte) 0x69, (byte) 0x6e, (byte) 0x74, (byte) 0x65, (byte) 0x72, (byte) 0x6e,\n+            (byte) 0x61, (byte) 0x6c, (byte) 0x2e, (byte) 0x6a, (byte) 0x61, (byte) 0x78, (byte) 0x70, (byte) 0x2e,\n+            (byte) 0x64, (byte) 0x61, (byte) 0x74, (byte) 0x61, (byte) 0x74, (byte) 0x79, (byte) 0x70, (byte) 0x65,\n+            (byte) 0x2e, (byte) 0x44, (byte) 0x75, (byte) 0x72, (byte) 0x61, (byte) 0x74, (byte) 0x69, (byte) 0x6f,\n+            (byte) 0x6e, (byte) 0x49, (byte) 0x6d, (byte) 0x70, (byte) 0x6c, (byte) 0x24, (byte) 0x44, (byte) 0x75,\n+            (byte) 0x72, (byte) 0x61, (byte) 0x74, (byte) 0x69, (byte) 0x6f, (byte) 0x6e, (byte) 0x53, (byte) 0x74,\n+            (byte) 0x72, (byte) 0x65, (byte) 0x61, (byte) 0x6d, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x2, (byte) 0x0, (byte) 0x1, (byte) 0x4c,\n+            (byte) 0x0, (byte) 0x7, (byte) 0x6c, (byte) 0x65, (byte) 0x78, (byte) 0x69, (byte) 0x63, (byte) 0x61,\n+            (byte) 0x6c, (byte) 0x74, (byte) 0x0, (byte) 0x12, (byte) 0x4c, (byte) 0x6a, (byte) 0x61, (byte) 0x76,\n+            (byte) 0x61, (byte) 0x2f, (byte) 0x6c, (byte) 0x61, (byte) 0x6e, (byte) 0x67, (byte) 0x2f, (byte) 0x53,\n+            (byte) 0x74, (byte) 0x72, (byte) 0x69, (byte) 0x6e, (byte) 0x67, (byte) 0x3b, (byte) 0x78, (byte) 0x70,\n+            (byte) 0x74, (byte) 0x0, (byte) 0xe, (byte) 0x50, (byte) 0x31, (byte) 0x59, (byte) 0x31, (byte) 0x4d,\n+            (byte) 0x31, (byte) 0x44, (byte) 0x54, (byte) 0x31, (byte) 0x48, (byte) 0x31, (byte) 0x4d, (byte) 0x31,\n+            (byte) 0x53,\n+    };\n+    @Override\n+    public byte[] getGregorianCalendarByteArray() {\n+        return gregorianCalendarBytes;\n+    }\n+    @Override\n+    public String getGregorianCalendarBase64() {\n+        return gregorianCalendarBase64;\n+    }\n+    @Override\n+    public byte[] getDurationBytes() {\n+        return durationBytes;\n+    }\n+    @Override\n+    public String getDurationBase64() {\n+        return durationBase64;\n+    }\n+}\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK9GregorianCalendarAndDurationSerData.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"},{"filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK9_Duration.ser","binary":true,"status":"deleted"},{"filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK9_XMLGregorianCalendar.ser","binary":true,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main SerializationTest read\n+ * @run testng SerializationTest\n@@ -31,1 +31,8 @@\n-import java.io.*;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Base64;\n+import java.util.Formatter;\n+\n@@ -37,0 +44,5 @@\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n@@ -38,7 +50,1 @@\n- * use \"read\" to test compatibility\n- * SerializationTest read\n- *\n- * use \"write\" to create test files\n- * SerializationTest write javaVersion\n- * where javaVersion is 6, 7, 8, or 9\n- *\n+ * Verify serialization compatibility for XMLGregorianCalendar and Duration\n@@ -49,12 +55,0 @@\n-    final String FILENAME_CAL = \"_XMLGregorianCalendar.ser\";\n-    final String FILENAME_DURATION = \"_Duration.ser\";\n-    String filePath;\n-\n-    {\n-        filePath = System.getProperty(\"test.src\");\n-        if (filePath == null) {\n-            \/\/current directory\n-            filePath = System.getProperty(\"user.dir\");\n-        }\n-        filePath += File.separator;\n-    }\n@@ -65,2 +59,2 @@\n-    public static void main(String[] args) {\n-        SerializationTest test = new SerializationTest();\n+    private GregorianCalendarAndDurationSerData[] gregorianCalendarAndDurationSerData = {null, new JDK6GregorianCalendarAndDurationSerData(),\n+    new JDK7GregorianCalendarAndDurationSerData(), new JDK8GregorianCalendarAndDurationSerData(), new JDK9GregorianCalendarAndDurationSerData()};\n@@ -68,8 +62,18 @@\n-        if (args[0].equalsIgnoreCase(\"read\")) {\n-            test.testReadCal();\n-            test.testReadDuration();\n-            test.report();\n-        } else {\n-            int ver = Integer.valueOf(args[1]).intValue();\n-            test.createTestFile(JDK[ver - 6]);\n-        }\n+    \/**\n+     * Create the Serialization Bytes using JDK under test.\n+     * @throws DatatypeConfigurationException\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     *\/\n+    @BeforeClass\n+    public void setup() throws DatatypeConfigurationException, IOException {\n+        DatatypeFactory dtf = DatatypeFactory.newInstance();\n+        XMLGregorianCalendar xmlGregorianCalendar = dtf.newXMLGregorianCalendar(EXPECTED_CAL);\n+        \/\/Serialize the given xmlGregorianCalendar\n+        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        final ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(xmlGregorianCalendar);\n+        oos.flush();\n+        oos.close();\n+        \/\/ Now get a Base64 string representation of the serialized bytes.\n+        final String base64 = Base64.getEncoder().encodeToString(baos.toByteArray());\n@@ -77,1 +81,10 @@\n-    }\n+       \/\/Create the Duration instance\n+        Duration duration = dtf.newDuration(EXPECTED_DURATION);\n+        \/\/Serialize the given xml Duration\n+        final ByteArrayOutputStream baos2 = new ByteArrayOutputStream();\n+        final ObjectOutputStream oos2 = new ObjectOutputStream(baos2);\n+        oos2.writeObject(duration);\n+        oos2.flush();\n+        oos2.close();\n+        \/\/ Now get a Base64 string representation of the serialized bytes.\n+        final String base64dur = Base64.getEncoder().encodeToString(baos2.toByteArray());\n@@ -79,12 +92,5 @@\n-    public void testReadCal() {\n-        try {\n-            for (String javaVersion : JDK) {\n-                XMLGregorianCalendar d1 = (XMLGregorianCalendar) fromFile(\n-                        javaVersion + FILENAME_CAL);\n-                if (!d1.toString().equalsIgnoreCase(EXPECTED_CAL)) {\n-                    fail(\"Java version: \" + javaVersion\n-                            + \"\\nExpected: \" + EXPECTED_CAL\n-                            + \"\\nActual: \" + d1.toString());\n-                } else {\n-                    success(\"testReadCal: read \" + javaVersion + \" serialized file, passed.\");\n-                }\n+        \/\/ Create the Data for JDK under test.\n+        gregorianCalendarAndDurationSerData[0] = new GregorianCalendarAndDurationSerData() {\n+            @Override\n+            public byte[] getGregorianCalendarByteArray() {\n+                return baos.toByteArray();\n@@ -92,6 +98,0 @@\n-        } catch (ClassNotFoundException ex) {\n-            fail(\"testReadCal: \" + ex.getMessage());\n-        } catch (IOException ex) {\n-            fail(\"testReadCal: \" + ex.getMessage());\n-        }\n-    }\n@@ -99,12 +99,3 @@\n-    public void testReadDuration() {\n-        try {\n-            for (String javaVersion : JDK) {\n-                Duration d1 = (Duration) fromFile(\n-                        javaVersion + FILENAME_DURATION);\n-                if (!d1.toString().equalsIgnoreCase(EXPECTED_DURATION)) {\n-                    fail(\"Java version: \" + javaVersion\n-                            + \"\\nExpected: \" + EXPECTED_DURATION\n-                            + \"\\nActual: \" + d1.toString());\n-                } else {\n-                    success(\"testReadDuration: read \" + javaVersion + \" serialized file, passed.\");\n-                }\n+            @Override\n+            public String getGregorianCalendarBase64() {\n+                return base64;\n@@ -112,5 +103,11 @@\n-        } catch (ClassNotFoundException ex) {\n-            fail(\"testReadDuration: \" + ex.getMessage());\n-        } catch (IOException ex) {\n-            fail(\"testReadDuration: \" + ex.getMessage());\n-        }\n+\n+            @Override\n+            public byte[] getDurationBytes() {\n+                return baos2.toByteArray();\n+            }\n+\n+            @Override\n+            public String getDurationBase64() {\n+                return base64dur;\n+            }\n+        };\n@@ -120,3 +117,1 @@\n-     * Create test files\n-     *\n-     * @param javaVersion JDK version\n+     *Provide data for JDK version and Gregorian Calendar serialized bytes\n@@ -124,10 +119,7 @@\n-    public void createTestFile(String javaVersion) {\n-        try {\n-            DatatypeFactory dtf = DatatypeFactory.newInstance();\n-            XMLGregorianCalendar c = dtf.newXMLGregorianCalendar(EXPECTED_CAL);\n-            Duration d = dtf.newDuration(EXPECTED_DURATION);\n-            toFile((Serializable) c, filePath + javaVersion + FILENAME_CAL);\n-            toFile((Serializable) d, filePath + javaVersion + FILENAME_DURATION);\n-        } catch (Exception e) {\n-            fail(e.getMessage());\n-        }\n+    @DataProvider(name = \"GregorianCalendarData\")\n+    public Object [][] gregorianCalendarDataBytes() {\n+        return new Object [][] {{System.getProperty(\"java.version\"), gregorianCalendarAndDurationSerData[0], EXPECTED_CAL},\n+                {JDK[0], gregorianCalendarAndDurationSerData[1], EXPECTED_CAL},\n+                {JDK[1], gregorianCalendarAndDurationSerData[2], EXPECTED_CAL},\n+                {JDK[2], gregorianCalendarAndDurationSerData[3], EXPECTED_CAL},\n+                {JDK[3], gregorianCalendarAndDurationSerData[4], EXPECTED_CAL}};\n@@ -137,1 +129,1 @@\n-     * Read the object from a file.\n+     *Provide data for JDK version and serialized Gregorian Calendar Base64 encoded string\n@@ -139,1 +131,39 @@\n-    private static Object fromFile(String filePath) throws IOException,\n+    @DataProvider(name = \"GregorianCalendarDataBase64\")\n+    public Object [][] gregorianCalendarDataBase64() {\n+        return new Object [][] {{System.getProperty(\"java.version\"), gregorianCalendarAndDurationSerData[0], EXPECTED_CAL},\n+                {JDK[2], gregorianCalendarAndDurationSerData[3], EXPECTED_CAL},\n+                {JDK[3], gregorianCalendarAndDurationSerData[4], EXPECTED_CAL}};\n+    }\n+\n+    \/**\n+     *Provide data for JDK version and Duration serialized bytes\n+     *\/\n+    @DataProvider(name = \"DurationData\")\n+    public Object [][] DurationData() {\n+        return new Object [][] {{System.getProperty(\"java.version\"), gregorianCalendarAndDurationSerData[0], EXPECTED_DURATION},\n+                {JDK[0], gregorianCalendarAndDurationSerData[1], EXPECTED_DURATION},\n+                {JDK[1], gregorianCalendarAndDurationSerData[2], EXPECTED_DURATION},\n+                {JDK[2], gregorianCalendarAndDurationSerData[3], EXPECTED_DURATION},\n+                {JDK[3], gregorianCalendarAndDurationSerData[4], EXPECTED_DURATION}};\n+    }\n+\n+    \/**\n+     *Provide data for JDK version and Duration Base64 encode serialized bytes string\n+     *\/\n+    @DataProvider(name = \"DurationDataBase64\")\n+    public Object [][] DurationDataBase64() {\n+        return new Object [][] {{System.getProperty(\"java.version\"), gregorianCalendarAndDurationSerData[0], EXPECTED_DURATION},\n+                {JDK[2], gregorianCalendarAndDurationSerData[3], EXPECTED_DURATION},\n+                {JDK[3], gregorianCalendarAndDurationSerData[4], EXPECTED_DURATION}};\n+    }\n+\n+    \/**\n+     * verify serialization compatibility for XMLGregorianCalendar\n+     * @param javaVersion\n+     * @param gcsd\n+     * @param gregorianDate\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     *\/\n+    @Test(dataProvider=\"GregorianCalendarData\")\n+    public void testReadCalBytes(String javaVersion, GregorianCalendarAndDurationSerData gcsd, String gregorianDate) throws IOException,\n@@ -141,5 +171,4 @@\n-        InputStream streamIn = SerializationTest.class.getResourceAsStream(\n-            filePath);\n-        ObjectInputStream objectinputstream = new ObjectInputStream(streamIn);\n-        Object o = objectinputstream.readObject();\n-        return o;\n+        final ByteArrayInputStream bais = new ByteArrayInputStream(gcsd.getGregorianCalendarByteArray());\n+        final ObjectInputStream ois = new ObjectInputStream(bais);\n+        final XMLGregorianCalendar xgc = (XMLGregorianCalendar) ois.readObject();\n+        Assert.assertEquals(xgc.toString(), gregorianDate);\n@@ -149,1 +178,6 @@\n-     * Write the object to a file.\n+     * verify serialization compatibility for XMLGregorianCalendar\n+     * @param javaVersion\n+     * @param gcsd\n+     * @param gregorianDate\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n@@ -151,5 +185,7 @@\n-    private static void toFile(Serializable o, String filePath) throws IOException {\n-        FileOutputStream fout = new FileOutputStream(filePath, true);\n-        ObjectOutputStream oos = new ObjectOutputStream(fout);\n-        oos.writeObject(o);\n-        oos.close();\n+    @Test(dataProvider=\"GregorianCalendarDataBase64\")\n+    public void testReadCalBase64(String javaVersion, GregorianCalendarAndDurationSerData gcsd, String gregorianDate) throws IOException,\n+            ClassNotFoundException {\n+        final ByteArrayInputStream bais = new ByteArrayInputStream(Base64.getDecoder().decode(gcsd.getGregorianCalendarBase64()));\n+        final ObjectInputStream ois = new ObjectInputStream(bais);\n+        final XMLGregorianCalendar xgc = (XMLGregorianCalendar) ois.readObject();\n+        Assert.assertEquals(xgc.toString(), gregorianDate);\n@@ -158,2 +194,16 @@\n-    static String errMessage;\n-    int passed = 0, failed = 0;\n+    \/**\n+     * verify serialization compatibility for Duration\n+     * @param javaVersion\n+     * @param gcsd\n+     * @param duration\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     *\/\n+    @Test(dataProvider = \"DurationData\")\n+    public void testReadDurationBytes(String javaVersion, GregorianCalendarAndDurationSerData gcsd, String duration) throws IOException,\n+            ClassNotFoundException {\n+        final ByteArrayInputStream bais = new ByteArrayInputStream(gcsd.getDurationBytes());\n+        final ObjectInputStream ois = new ObjectInputStream(bais);\n+        final Duration d1 = (Duration) ois.readObject();\n+        Assert.assertEquals(d1.toString().toUpperCase(), duration);\n+    }\n@@ -161,7 +211,15 @@\n-    void fail(String errMsg) {\n-        if (errMessage == null) {\n-            errMessage = errMsg;\n-        } else {\n-            errMessage = errMessage + \"\\n\" + errMsg;\n-        }\n-        failed++;\n+    \/**\n+     * verify serialization compatibility for Duration\n+     * @param javaVersion\n+     * @param gcsd\n+     * @param duration\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     *\/\n+    @Test(dataProvider = \"DurationDataBase64\")\n+    public void testReadDurationBase64(String javaVersion, GregorianCalendarAndDurationSerData gcsd, String duration) throws IOException,\n+            ClassNotFoundException {\n+        final ByteArrayInputStream bais = new ByteArrayInputStream(Base64.getDecoder().decode(gcsd.getDurationBase64()));\n+        final ObjectInputStream ois = new ObjectInputStream(bais);\n+        final Duration d1 = (Duration) ois.readObject();\n+        Assert.assertEquals(d1.toString().toUpperCase(), duration);\n@@ -170,3 +228,19 @@\n-    void success(String msg) {\n-        passed++;\n-        System.out.println(msg);\n+    \/**\n+     * Generates the Java Pseudo code for serialized Gregorian Calendar byte array that can be cut & pasted into the\n+     * JDK<version>GregorianCalendarAndDurationSerData.java files.\n+     * @param baos\n+     *\/\n+    public void generatePseudoCodeForGregCalSerBytes(ByteArrayOutputStream baos) {\n+        byte [] bytes = baos.toByteArray();\n+        StringBuilder sb2 = new StringBuilder(bytes.length * 5);\n+        Formatter fmt = new Formatter(sb2);\n+        fmt.format(\"    private final byte[] %s = {\", \"gregorianCalendarBytes\");\n+        final int linelen = 8;\n+        for (int i = 0; i <bytes.length; i++) {\n+            if (i % linelen == 0) {\n+                fmt.format(\"%n        \");\n+            }\n+            fmt.format(\" (byte) 0x%x,\", bytes[i] & 0xff);\n+        }\n+        fmt.format(\"%n    };%n\");\n+        System.out.println(sb2);\n@@ -175,1 +249,20 @@\n-    public void report() {\n+    \/**\n+     * Generates the Java Pseudo code for Duration byte array that can be cut & pasted into the\n+     * JDK<version>GregorianCalendarAndDurationSerData.java files.\n+     * @param baos\n+     *\/\n+    public void generatePseudoCodeForDurationSerBytes(ByteArrayOutputStream baos) {\n+        byte [] bytesdur = baos.toByteArray();\n+        StringBuilder sb = new StringBuilder(bytesdur.length * 5);\n+        Formatter fmt = new Formatter(sb);\n+        fmt.format(\"    private final byte[] %s = {\", \"durationBytes\");\n+        final int linelen2 = 8;\n+        for (int i = 0; i <bytesdur.length; i++) {\n+            if (i % linelen2 == 0) {\n+                fmt.format(\"%n        \");\n+            }\n+            fmt.format(\" (byte) 0x%x,\", bytesdur[i] & 0xff);\n+        }\n+        fmt.format(\"%n    };%n\");\n+        System.out.println(sb);\n+    }\n@@ -177,2 +270,24 @@\n-        System.out.println(\"\\nNumber of tests passed: \" + passed);\n-        System.out.println(\"Number of tests failed: \" + failed + \"\\n\");\n+    \/**\n+     * Generates the Java Pseudo code for Gregorian Calendar serialized byte array as Base64 string that\n+     * can be cut & pasted into the JDK<version>GregorianCalendarAndDurationSerData.java files.\n+     * @param base64\n+     *\/\n+    public void generatePseudoCodeForGregCalSerBytesAsBase64(String base64) {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"    \/**\").append('\\n');\n+        sb.append(\"     * Base64 encoded string for XMLGregorianCalendar object.\").append('\\n');\n+        sb.append(\"     * Java version: \").append(System.getProperty(\"java.version\")).append('\\n');\n+        sb.append(\"     **\/\").append('\\n');\n+        sb.append(\"    private final String gregorianCalendarBase64 = \").append(\"\\n          \");\n+        final int last = base64.length() - 1;\n+        for (int i=0; i<base64.length();i++) {\n+            if (i%64 == 0) sb.append(\"\\\"\");\n+            sb.append(base64.charAt(i));\n+            if (i%64 == 63 || i == last) {\n+                sb.append(\"\\\"\");\n+                if (i == last) sb.append(\";\\n\");\n+                else sb.append(\"\\n        + \");\n+            }\n+        }\n+        System.out.println(sb);\n+    }\n@@ -180,2 +295,21 @@\n-        if (errMessage != null) {\n-            throw new RuntimeException(errMessage);\n+    \/**\n+     * Generates the Java Pseudo code for Duration serialized byte array as Base64 string that\n+     * can be cut & pasted into the JDK<version>GregorianCalendarAndDurationSerData.java files.\n+     * @param base64\n+     *\/\n+    public void generatePseudoCodeForDurationSerBytesAsBase64(String base64) {\n+        final StringBuilder sbdur = new StringBuilder();\n+        sbdur.append(\"    \/**\").append('\\n');\n+        sbdur.append(\"     * Base64 encoded string for Duration object.\").append('\\n');\n+        sbdur.append(\"     * Java version: \").append(System.getProperty(\"java.version\")).append('\\n');\n+        sbdur.append(\"     **\/\").append('\\n');\n+        sbdur.append(\"    private final String durationBase64 = \").append(\"\\n          \");\n+        final int lastdur = base64.length() - 1;\n+        for (int i=0; i<base64.length();i++) {\n+            if (i%64 == 0) sbdur.append(\"\\\"\");\n+            sbdur.append(base64.charAt(i));\n+            if (i%64 == 63 || i == lastdur) {\n+                sbdur.append(\"\\\"\");\n+                if (i == lastdur) sbdur.append(\";\\n\");\n+                else sbdur.append(\"\\n        + \");\n+            }\n@@ -183,0 +317,1 @@\n+        System.out.println(sbdur);\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/SerializationTest.java","additions":246,"deletions":111,"binary":false,"changes":357,"status":"modified"}]}