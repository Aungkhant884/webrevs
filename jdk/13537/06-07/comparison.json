{"files":[{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * This class provide the template for JDK version specific GregorianCalendarAndDurationSerData.java src file.\n+ *\/\n+public class GregorianCalAndDurSerDataTemplate {\n+    public static final String GREGO_CAL_DUR_SER_CLASS = \"public class %sGregorianCalendarAndDurationSerData extends GregorianCalendarAndDurationSerData {\\n\" +\n+            \"    %s\\n\" +\n+            \"    %s\\n\" +\n+            \"    %s\\n\" +\n+            \"    %s\\n\" +\n+            \"    @Override\\n\" +\n+            \"    public byte[] getGregorianCalendarByteArray() {\\n\" +\n+            \"        return gregorianCalendarBytes;\\n\" +\n+            \"    }\\n\" +\n+            \"\\n\" +\n+            \"    @Override\\n\" +\n+            \"    public String getGregorianCalendarBase64() {\\n\" +\n+            \"        return gregorianCalendarBase64;\\n\" +\n+            \"    }\\n\" +\n+            \"\\n\" +\n+            \"    @Override\\n\" +\n+            \"    public byte[] getDurationBytes() {\\n\" +\n+            \"        return durationBytes;\\n\" +\n+            \"    }\\n\" +\n+            \"\\n\" +\n+            \"    @Override\\n\" +\n+            \"    public String getDurationBase64() {\\n\" +\n+            \"        return durationBase64;\\n\" +\n+            \"    }\\n\" +\n+            \"}\";\n+}\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/GregorianCalAndDurSerDataTemplate.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,193 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary utility to generate Gregorian Calendar and Duration serialized data java classes.\n+ * @run junit\/manual GregorianCalAndDurSerDataUtil\n+ *\/\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Base64;\n+import java.util.Formatter;\n+\n+import javax.xml.datatype.DatatypeConfigurationException;\n+import javax.xml.datatype.DatatypeFactory;\n+import javax.xml.datatype.Duration;\n+import javax.xml.datatype.XMLGregorianCalendar;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+\n+\/**\n+ * Utility to generate the java source file for Gregorian Calendar and Duration serialized data\n+ * for specific version of JDK to be added in SerializationTest. Execute this test with desired version\n+ * of JDK to generate the java source file.\n+ *\/\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class GregorianCalAndDurSerDataUtil {\n+    static String JDK = \"JDK\" + System.getProperty(\"java.version\");\n+    static String testsrc = System.getProperty(\"test.src\");\n+    final static String EXPECTED_CAL = \"0001-01-01T00:00:00.0000000-05:00\";\n+    final static String EXPECTED_DURATION = \"P1Y1M1DT1H1M1S\";\n+    String srcFilePrefix = JDK.toUpperCase().replace(\"-\", \"_\");\n+\n+\n+    \/**\n+     * Create the serialized Bytes array and serialized bytes base64 string for GregorianCalender and Duration\n+     * with jdk under test and generate the java source file.\n+     * @throws DatatypeConfigurationException Unexpected.\n+     * @throws IOException Unexpected.\n+     *\/\n+    @BeforeAll\n+    public void setup() throws DatatypeConfigurationException, IOException {\n+        DatatypeFactory dtf = DatatypeFactory.newInstance();\n+        XMLGregorianCalendar xmlGregorianCalendar = dtf.newXMLGregorianCalendar(EXPECTED_CAL);\n+        Duration duration = dtf.newDuration(EXPECTED_DURATION);\n+        String classStr = GregorianCalAndDurSerDataTemplate.GREGO_CAL_DUR_SER_CLASS;\n+        try(ByteArrayOutputStream baos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(baos);\n+            ByteArrayOutputStream baos2 = new ByteArrayOutputStream(); ObjectOutputStream oos2 = new ObjectOutputStream(baos2)) {\n+            \/\/Serialize the given xmlGregorianCalendar\n+            oos.writeObject(xmlGregorianCalendar);\n+            \/\/Serialize the given xml Duration\n+            oos2.writeObject(duration);\n+            \/\/ Now get a Base64 string representation of the xmlGregorianCalendar serialized bytes.\n+            final String base64 = Base64.getEncoder().encodeToString(baos.toByteArray());\n+            \/\/ Now get a Base64 string representation of Duration the serialized bytes.\n+            final String base64dur = Base64.getEncoder().encodeToString(baos2.toByteArray());\n+\n+            Files.deleteIfExists(Path.of(testsrc,srcFilePrefix+\"GregorianCalendarAndDurationSerData.java\"));\n+\n+            classStr = String.format(classStr, srcFilePrefix, generatePseudoCodeForGregCalSerBytesAsBase64(base64),\n+                    generatePseudoCodeForDurationSerBytesAsBase64(base64dur), generatePseudoCodeForGregCalSerBytes(baos),\n+                    generatePseudoCodeForDurationSerBytes(baos2));\n+            Files.writeString(Path.of(testsrc,srcFilePrefix+\"GregorianCalendarAndDurationSerData.java\"), classStr);\n+        }\n+    }\n+\n+    \/**\n+     * Verify that Java source file is created.\n+     *\/\n+    @Test\n+    void testFileCreated() {\n+        assertTrue(Files.exists(Path.of(testsrc,srcFilePrefix+\"GregorianCalendarAndDurationSerData.java\")));\n+    }\n+\n+    \/**\n+     * Generates the Java Pseudo code for serialized Gregorian Calendar byte array.\n+     * @param baos Serialized GregorianCalendar ByteArrayOutputStream.\n+     * @return pseudocode String for serialized Gregorian Calendar byte array.\n+     *\/\n+    public static String generatePseudoCodeForGregCalSerBytes(ByteArrayOutputStream baos) {\n+        byte [] bytes = baos.toByteArray();\n+        StringBuilder sb2 = new StringBuilder(bytes.length * 5);\n+        Formatter fmt = new Formatter(sb2);\n+        fmt.format(\"    private final byte[] %s = {\", \"gregorianCalendarBytes\");\n+        final int linelen = 8;\n+        for (int i = 0; i <bytes.length; i++) {\n+            if (i % linelen == 0) {\n+                fmt.format(\"%n        \");\n+            }\n+            fmt.format(\" (byte) 0x%x,\", bytes[i] & 0xff);\n+        }\n+        fmt.format(\"%n    };%n\");\n+        return sb2.toString();\n+    }\n+\n+    \/**\n+     * Generates the Java Pseudo code for serialized Duration byte array.\n+     * @param baos Serialized Duration ByteArrayOutputStream.\n+     * @return pseudocode String for serialized Duration byte array.\n+     *\/\n+    public static String generatePseudoCodeForDurationSerBytes(ByteArrayOutputStream baos) {\n+        byte [] bytesdur = baos.toByteArray();\n+        StringBuilder sb = new StringBuilder(bytesdur.length * 5);\n+        Formatter fmt = new Formatter(sb);\n+        fmt.format(\"    private final byte[] %s = {\", \"durationBytes\");\n+        final int linelen2 = 8;\n+        for (int i = 0; i <bytesdur.length; i++) {\n+            if (i % linelen2 == 0) {\n+                fmt.format(\"%n        \");\n+            }\n+            fmt.format(\" (byte) 0x%x,\", bytesdur[i] & 0xff);\n+        }\n+        fmt.format(\"%n    };%n\");\n+        return sb.toString();\n+    }\n+\n+    \/**\n+     * Generates the Java Pseudo code for Gregorian Calendar serialized byte array as Base64 string.\n+     * @param base64 Serialized GregorianCalendar bytes encoded as Base64 string.\n+     * @return pseudo code String for Base64 encode serialized Gregorian calendar bytes.\n+     *\/\n+    public static String generatePseudoCodeForGregCalSerBytesAsBase64(String base64) {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"    \/**\").append('\\n');\n+        sb.append(\"     * Base64 encoded string for XMLGregorianCalendar object.\").append('\\n');\n+        sb.append(\"     * Java version: \").append(JDK).append('\\n');\n+        sb.append(\"     **\/\").append('\\n');\n+        sb.append(\"    private final String gregorianCalendarBase64 = \").append(\"\\n          \");\n+        final int last = base64.length() - 1;\n+        for (int i=0; i<base64.length();i++) {\n+            if (i%64 == 0) sb.append(\"\\\"\");\n+            sb.append(base64.charAt(i));\n+            if (i%64 == 63 || i == last) {\n+                sb.append(\"\\\"\");\n+                if (i == last) sb.append(\";\\n\");\n+                else sb.append(\"\\n        + \");\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    \/**\n+     * Generates the Java Pseudo code for Duration serialized byte array as Base64 string.\n+     * @param base64 Serialized Duration bytes encoded as Base64 string.\n+     * @return pseudocode String for Base64 encode serialized Duration bytes.\n+     *\/\n+    public static String generatePseudoCodeForDurationSerBytesAsBase64(String base64) {\n+        final StringBuilder sbdur = new StringBuilder();\n+        sbdur.append(\"    \/**\").append('\\n');\n+        sbdur.append(\"     * Base64 encoded string for Duration object.\").append('\\n');\n+        sbdur.append(\"     * Java version: \").append(JDK).append('\\n');\n+        sbdur.append(\"     **\/\").append('\\n');\n+        sbdur.append(\"    private final String durationBase64 = \").append(\"\\n          \");\n+        final int lastdur = base64.length() - 1;\n+        for (int i=0; i<base64.length();i++) {\n+            if (i%64 == 0) sbdur.append(\"\\\"\");\n+            sbdur.append(base64.charAt(i));\n+            if (i%64 == 63 || i == lastdur) {\n+                sbdur.append(\"\\\"\");\n+                if (i == lastdur) sbdur.append(\";\\n\");\n+                else sbdur.append(\"\\n        + \");\n+            }\n+        }\n+        return sbdur.toString();\n+    }\n+}\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/GregorianCalAndDurSerDataUtil.java","additions":193,"deletions":0,"binary":false,"changes":193,"status":"added"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng SerializationTest\n+ * @run junit SerializationTest\n@@ -37,1 +37,1 @@\n-import java.util.Formatter;\n+import java.util.stream.Stream;\n@@ -44,4 +44,6 @@\n-import org.testng.Assert;\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -53,0 +55,1 @@\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -57,1 +60,1 @@\n-    static String[] JDK = {\"JDK6\", \"JDK7\", \"JDK8\", \"JDK9\"};\n+    static String[] JDK = {System.getProperty(\"java.version\"), \"JDK6\", \"JDK7\", \"JDK8\", \"JDK9\"};\n@@ -59,0 +62,2 @@\n+    \/\/ If needed to add serialized data of more JDK versions, serialized data source file can be generated using\n+    \/\/ GregorianCalAndDurSerDataUtil class.\n@@ -68,1 +73,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -106,8 +111,0 @@\n-            \/\/ To create the pseudocode for <JDK version>GregorianCalendarAndDurationSerData.java for specific version\n-            \/\/ of JDK (other than 6, 7, 8 and 9), execute this test with that specific JDK version after uncommenting\n-            \/\/ the below methods calls :\n-\n-            \/\/ generatePseudoCodeForGregCalSerBytes(baos);\n-            \/\/ generatePseudoCodeForGregCalSerBytesAsBase64(base64);\n-            \/\/ generatePseudoCodeForDurationSerBytes(baos2);\n-            \/\/ generatePseudoCodeForDurationSerBytesAsBase64(base64dur);\n@@ -123,7 +120,9 @@\n-    @DataProvider(name = \"GregorianCalendarData\")\n-    public Object [][] gregorianCalendarDataBytes() {\n-        return new Object [][] {{System.getProperty(\"java.version\"), gregorianCalendarAndDurationSerData[0], EXPECTED_CAL},\n-                {JDK[0], gregorianCalendarAndDurationSerData[1], EXPECTED_CAL},\n-                {JDK[1], gregorianCalendarAndDurationSerData[2], EXPECTED_CAL},\n-                {JDK[2], gregorianCalendarAndDurationSerData[3], EXPECTED_CAL},\n-                {JDK[3], gregorianCalendarAndDurationSerData[4], EXPECTED_CAL}};\n+\n+    public Stream<Arguments> gregorianCalendarDataBytes() {\n+        return Stream.of(\n+                Arguments.of(JDK[0], gregorianCalendarAndDurationSerData[0], EXPECTED_CAL),\n+                Arguments.of(JDK[1], gregorianCalendarAndDurationSerData[1], EXPECTED_CAL),\n+                Arguments.of(JDK[2], gregorianCalendarAndDurationSerData[2], EXPECTED_CAL),\n+                Arguments.of(JDK[3], gregorianCalendarAndDurationSerData[3], EXPECTED_CAL),\n+                Arguments.of(JDK[4], gregorianCalendarAndDurationSerData[4], EXPECTED_CAL)\n+        );\n@@ -138,5 +137,5 @@\n-    @DataProvider(name = \"GregorianCalendarDataBase64\")\n-    public Object [][] gregorianCalendarDataBase64() {\n-        return new Object [][] {{System.getProperty(\"java.version\"), gregorianCalendarAndDurationSerData[0], EXPECTED_CAL},\n-                {JDK[2], gregorianCalendarAndDurationSerData[3], EXPECTED_CAL},\n-                {JDK[3], gregorianCalendarAndDurationSerData[4], EXPECTED_CAL}};\n+\n+    public Stream<Arguments> gregorianCalendarDataBase64() {\n+        return Stream.of(Arguments.of(JDK[0], gregorianCalendarAndDurationSerData[0], EXPECTED_CAL),\n+                Arguments.of(JDK[2], gregorianCalendarAndDurationSerData[3], EXPECTED_CAL),\n+                Arguments.of(JDK[3], gregorianCalendarAndDurationSerData[4], EXPECTED_CAL));\n@@ -151,7 +150,7 @@\n-    @DataProvider(name = \"DurationData\")\n-    public Object [][] DurationData() {\n-        return new Object [][] {{System.getProperty(\"java.version\"), gregorianCalendarAndDurationSerData[0], EXPECTED_DURATION},\n-                {JDK[0], gregorianCalendarAndDurationSerData[1], EXPECTED_DURATION},\n-                {JDK[1], gregorianCalendarAndDurationSerData[2], EXPECTED_DURATION},\n-                {JDK[2], gregorianCalendarAndDurationSerData[3], EXPECTED_DURATION},\n-                {JDK[3], gregorianCalendarAndDurationSerData[4], EXPECTED_DURATION}};\n+\n+    public Stream<Arguments> durationData() {\n+        return Stream.of(Arguments.of(JDK[0], gregorianCalendarAndDurationSerData[0], EXPECTED_DURATION),\n+                Arguments.of(JDK[0], gregorianCalendarAndDurationSerData[1], EXPECTED_DURATION),\n+                Arguments.of(JDK[1], gregorianCalendarAndDurationSerData[2], EXPECTED_DURATION),\n+                Arguments.of(JDK[2], gregorianCalendarAndDurationSerData[3], EXPECTED_DURATION),\n+                Arguments.of(JDK[3], gregorianCalendarAndDurationSerData[4], EXPECTED_DURATION));\n@@ -166,5 +165,5 @@\n-    @DataProvider(name = \"DurationDataBase64\")\n-    public Object [][] DurationDataBase64() {\n-        return new Object [][] {{System.getProperty(\"java.version\"), gregorianCalendarAndDurationSerData[0], EXPECTED_DURATION},\n-                {JDK[2], gregorianCalendarAndDurationSerData[3], EXPECTED_DURATION},\n-                {JDK[3], gregorianCalendarAndDurationSerData[4], EXPECTED_DURATION}};\n+\n+    public Stream<Arguments> durationDataBase64() {\n+        return Stream.of(Arguments.of(JDK[0], gregorianCalendarAndDurationSerData[0], EXPECTED_DURATION),\n+                Arguments.of(JDK[2], gregorianCalendarAndDurationSerData[3], EXPECTED_DURATION),\n+                Arguments.of(JDK[3], gregorianCalendarAndDurationSerData[4], EXPECTED_DURATION));\n@@ -182,1 +181,3 @@\n-    @Test(dataProvider=\"GregorianCalendarData\")\n+\n+    @ParameterizedTest\n+    @MethodSource(\"gregorianCalendarDataBytes\")\n@@ -188,1 +189,1 @@\n-        Assert.assertEquals(xgc.toString(), gregorianDate);\n+        assertEquals(gregorianDate, xgc.toString());\n@@ -200,1 +201,3 @@\n-    @Test(dataProvider=\"GregorianCalendarDataBase64\")\n+\n+    @ParameterizedTest\n+    @MethodSource(\"gregorianCalendarDataBase64\")\n@@ -206,1 +209,1 @@\n-        Assert.assertEquals(xgc.toString(), gregorianDate);\n+        assertEquals(gregorianDate, xgc.toString());\n@@ -218,1 +221,3 @@\n-    @Test(dataProvider = \"DurationData\")\n+\n+    @ParameterizedTest\n+    @MethodSource(\"durationData\")\n@@ -224,1 +229,1 @@\n-        Assert.assertEquals(d1.toString().toUpperCase(), duration);\n+        assertEquals(duration, d1.toString().toUpperCase());\n@@ -236,1 +241,3 @@\n-    @Test(dataProvider = \"DurationDataBase64\")\n+\n+    @ParameterizedTest\n+    @MethodSource(\"durationDataBase64\")\n@@ -242,95 +249,1 @@\n-        Assert.assertEquals(d1.toString().toUpperCase(), duration);\n-    }\n-\n-    \/**\n-     * Generates the Java Pseudo code for serialized Gregorian Calendar byte array that can be cut & pasted into the\n-     * JDK<version>GregorianCalendarAndDurationSerData.java files. Use of this method is explained in setup() method.\n-     * @param baos Serialized GregorianCalendar ByteArrayOutputStream.\n-     *\/\n-    public void generatePseudoCodeForGregCalSerBytes(ByteArrayOutputStream baos) {\n-        byte [] bytes = baos.toByteArray();\n-        StringBuilder sb2 = new StringBuilder(bytes.length * 5);\n-        Formatter fmt = new Formatter(sb2);\n-        fmt.format(\"    private final byte[] %s = {\", \"gregorianCalendarBytes\");\n-        final int linelen = 8;\n-        for (int i = 0; i <bytes.length; i++) {\n-            if (i % linelen == 0) {\n-                fmt.format(\"%n        \");\n-            }\n-            fmt.format(\" (byte) 0x%x,\", bytes[i] & 0xff);\n-        }\n-        fmt.format(\"%n    };%n\");\n-        System.out.println(sb2);\n-    }\n-\n-    \/**\n-     * Generates the Java Pseudo code for Duration byte array that can be cut & pasted into the\n-     * JDK<version>GregorianCalendarAndDurationSerData.java files. Use of this method is explained in setup() method.\n-     * @param baos Serialized Duration ByteArrayOutputStream.\n-     *\/\n-    public void generatePseudoCodeForDurationSerBytes(ByteArrayOutputStream baos) {\n-        byte [] bytesdur = baos.toByteArray();\n-        StringBuilder sb = new StringBuilder(bytesdur.length * 5);\n-        Formatter fmt = new Formatter(sb);\n-        fmt.format(\"    private final byte[] %s = {\", \"durationBytes\");\n-        final int linelen2 = 8;\n-        for (int i = 0; i <bytesdur.length; i++) {\n-            if (i % linelen2 == 0) {\n-                fmt.format(\"%n        \");\n-            }\n-            fmt.format(\" (byte) 0x%x,\", bytesdur[i] & 0xff);\n-        }\n-        fmt.format(\"%n    };%n\");\n-        System.out.println(sb);\n-    }\n-\n-    \/**\n-     * Generates the Java Pseudo code for Gregorian Calendar serialized byte array as Base64 string that\n-     * can be cut & pasted into the JDK<version>GregorianCalendarAndDurationSerData.java files. Use of this method is\n-     * explained in setup() method.\n-     * @param base64 Serialized GregorianCalendar bytes encoded as Base64 string.\n-     *\/\n-    public void generatePseudoCodeForGregCalSerBytesAsBase64(String base64) {\n-        final StringBuilder sb = new StringBuilder();\n-        sb.append(\"    \/**\").append('\\n');\n-        sb.append(\"     * Base64 encoded string for XMLGregorianCalendar object.\").append('\\n');\n-        sb.append(\"     * Java version: \").append(System.getProperty(\"java.version\")).append('\\n');\n-        sb.append(\"     **\/\").append('\\n');\n-        sb.append(\"    private final String gregorianCalendarBase64 = \").append(\"\\n          \");\n-        final int last = base64.length() - 1;\n-        for (int i=0; i<base64.length();i++) {\n-            if (i%64 == 0) sb.append(\"\\\"\");\n-            sb.append(base64.charAt(i));\n-            if (i%64 == 63 || i == last) {\n-                sb.append(\"\\\"\");\n-                if (i == last) sb.append(\";\\n\");\n-                else sb.append(\"\\n        + \");\n-            }\n-        }\n-        System.out.println(sb);\n-    }\n-\n-    \/**\n-     * Generates the Java Pseudo code for Duration serialized byte array as Base64 string that\n-     * can be cut & pasted into the JDK<version>GregorianCalendarAndDurationSerData.java files. Use of this method is\n-     * explained in setup() method.\n-     * @param base64 Serialized Duration bytes encoded as Base64 string.\n-     *\/\n-    public void generatePseudoCodeForDurationSerBytesAsBase64(String base64) {\n-        final StringBuilder sbdur = new StringBuilder();\n-        sbdur.append(\"    \/**\").append('\\n');\n-        sbdur.append(\"     * Base64 encoded string for Duration object.\").append('\\n');\n-        sbdur.append(\"     * Java version: \").append(System.getProperty(\"java.version\")).append('\\n');\n-        sbdur.append(\"     **\/\").append('\\n');\n-        sbdur.append(\"    private final String durationBase64 = \").append(\"\\n          \");\n-        final int lastdur = base64.length() - 1;\n-        for (int i=0; i<base64.length();i++) {\n-            if (i%64 == 0) sbdur.append(\"\\\"\");\n-            sbdur.append(base64.charAt(i));\n-            if (i%64 == 63 || i == lastdur) {\n-                sbdur.append(\"\\\"\");\n-                if (i == lastdur) sbdur.append(\";\\n\");\n-                else sbdur.append(\"\\n        + \");\n-            }\n-        }\n-        System.out.println(sbdur);\n+        assertEquals(duration, d1.toString().toUpperCase());\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/SerializationTest.java","additions":55,"deletions":142,"binary":false,"changes":197,"status":"modified"}]}