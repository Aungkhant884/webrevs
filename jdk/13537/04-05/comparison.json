{"files":[{"patch":"@@ -69,1 +69,1 @@\n-    public void setup() throws DatatypeConfigurationException, IOException, ClassNotFoundException {\n+    public void setup() throws DatatypeConfigurationException, IOException {\n@@ -72,1 +72,0 @@\n-\n@@ -74,1 +73,0 @@\n-\n@@ -80,1 +78,0 @@\n-\n@@ -84,35 +81,1 @@\n-        \/\/ Generates the Java Pseudo code for base64 encoded string that can be cut & pasted into the test\n-        final StringBuilder sb = new StringBuilder();\n-        sb.append(\"    \/**\").append('\\n');\n-        sb.append(\"     * Base64 encoded string for XMLGregorianCalendar object.\").append('\\n');\n-        sb.append(\"     * Java version: \").append(System.getProperty(\"java.version\")).append('\\n');\n-        sb.append(\"     **\/\").append('\\n');\n-        sb.append(\"    private final String gregorianCalendarBase64 = \").append(\"\\n          \");\n-        final int last = base64.length() - 1;\n-        for (int i=0; i<base64.length();i++) {\n-            if (i%64 == 0) sb.append(\"\\\"\");\n-            sb.append(base64.charAt(i));\n-            if (i%64 == 63 || i == last) {\n-                sb.append(\"\\\"\");\n-                if (i == last) sb.append(\";\\n\");\n-                else sb.append(\"\\n        + \");\n-            }\n-        }\n-        System.out.println(sb);\n-\n-        \/\/ Generates the Java Pseudo code for byte array that can be cut & pasted into the test\n-        byte [] bytes = baos.toByteArray();\n-        StringBuilder sb2 = new StringBuilder(bytes.length * 5);\n-        Formatter fmt = new Formatter(sb2);\n-        fmt.format(\"    private final byte[] %s = {\", \"gregorianCalendarBytes\");\n-        final int linelen = 8;\n-        for (int i = 0; i <bytes.length; i++) {\n-            if (i % linelen == 0) {\n-                fmt.format(\"%n        \");\n-            }\n-            fmt.format(\" (byte) 0x%x,\", bytes[i] & 0xff);\n-        }\n-        fmt.format(\"%n    };%n\");\n-\n-        System.out.println(sb2);\n-\n+       \/\/Create the Duration instance\n@@ -120,1 +83,0 @@\n-\n@@ -122,1 +84,0 @@\n-\n@@ -128,1 +89,0 @@\n-\n@@ -132,38 +92,0 @@\n-        \/\/ Generates the Java Pseudo code for Duration serialized bytes  Base64 encoded string  that can be cut &\n-        \/\/ pasted into the test\n-\n-        final StringBuilder sbdur = new StringBuilder();\n-        sbdur.append(\"    \/**\").append('\\n');\n-        sbdur.append(\"     * Base64 encoded string for Duration object.\").append('\\n');\n-        sbdur.append(\"     * Java version: \").append(System.getProperty(\"java.version\")).append('\\n');\n-        sbdur.append(\"     **\/\").append('\\n');\n-        sbdur.append(\"    private final String durationBase64 = \").append(\"\\n          \");\n-        final int lastdur = base64dur.length() - 1;\n-        for (int i=0; i<base64dur.length();i++) {\n-            if (i%64 == 0) sbdur.append(\"\\\"\");\n-            sbdur.append(base64dur.charAt(i));\n-            if (i%64 == 63 || i == lastdur) {\n-                sbdur.append(\"\\\"\");\n-                if (i == lastdur) sbdur.append(\";\\n\");\n-                else sbdur.append(\"\\n        + \");\n-            }\n-        }\n-\n-        System.out.println(sbdur);\n-\n-        \/\/ Generates the Java Pseudo code for Duration serialized byte array that can be cut & pasted into the test\n-        byte [] bytesdur = baos2.toByteArray();\n-        StringBuilder sbdur2 = new StringBuilder(bytesdur.length * 5);\n-        Formatter fmt2 = new Formatter(sbdur2);\n-        fmt2.format(\"    private final byte[] %s = {\", \"durationBytes\");\n-        final int linelen2 = 8;\n-        for (int i = 0; i <bytesdur.length; i++) {\n-            if (i % linelen2 == 0) {\n-                fmt2.format(\"%n        \");\n-            }\n-            fmt2.format(\" (byte) 0x%x,\", bytesdur[i] & 0xff);\n-        }\n-        fmt2.format(\"%n    };%n\");\n-\n-        System.out.println(sbdur2);\n-\n@@ -305,0 +227,92 @@\n+\n+    \/**\n+     * Generates the Java Pseudo code for serialized Gregorian Calendar byte array that can be cut & pasted into the\n+     * JDK<version>GregorianCalendarAndDurationSerData.java files.\n+     * @param baos\n+     *\/\n+    public void generatePseudoCodeForGregCalSerBytes(ByteArrayOutputStream baos) {\n+        byte [] bytes = baos.toByteArray();\n+        StringBuilder sb2 = new StringBuilder(bytes.length * 5);\n+        Formatter fmt = new Formatter(sb2);\n+        fmt.format(\"    private final byte[] %s = {\", \"gregorianCalendarBytes\");\n+        final int linelen = 8;\n+        for (int i = 0; i <bytes.length; i++) {\n+            if (i % linelen == 0) {\n+                fmt.format(\"%n        \");\n+            }\n+            fmt.format(\" (byte) 0x%x,\", bytes[i] & 0xff);\n+        }\n+        fmt.format(\"%n    };%n\");\n+        System.out.println(sb2);\n+    }\n+\n+    \/**\n+     * Generates the Java Pseudo code for Duration byte array that can be cut & pasted into the\n+     * JDK<version>GregorianCalendarAndDurationSerData.java files.\n+     * @param baos\n+     *\/\n+    public void generatePseudoCodeForDurationSerBytes(ByteArrayOutputStream baos) {\n+        byte [] bytesdur = baos.toByteArray();\n+        StringBuilder sb = new StringBuilder(bytesdur.length * 5);\n+        Formatter fmt = new Formatter(sb);\n+        fmt.format(\"    private final byte[] %s = {\", \"durationBytes\");\n+        final int linelen2 = 8;\n+        for (int i = 0; i <bytesdur.length; i++) {\n+            if (i % linelen2 == 0) {\n+                fmt.format(\"%n        \");\n+            }\n+            fmt.format(\" (byte) 0x%x,\", bytesdur[i] & 0xff);\n+        }\n+        fmt.format(\"%n    };%n\");\n+        System.out.println(sb);\n+    }\n+\n+    \/**\n+     * Generates the Java Pseudo code for Gregorian Calendar serialized byte array as Base64 string that\n+     * can be cut & pasted into the JDK<version>GregorianCalendarAndDurationSerData.java files.\n+     * @param base64\n+     *\/\n+    public void generatePseudoCodeForGregCalSerBytesAsBase64(String base64) {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"    \/**\").append('\\n');\n+        sb.append(\"     * Base64 encoded string for XMLGregorianCalendar object.\").append('\\n');\n+        sb.append(\"     * Java version: \").append(System.getProperty(\"java.version\")).append('\\n');\n+        sb.append(\"     **\/\").append('\\n');\n+        sb.append(\"    private final String gregorianCalendarBase64 = \").append(\"\\n          \");\n+        final int last = base64.length() - 1;\n+        for (int i=0; i<base64.length();i++) {\n+            if (i%64 == 0) sb.append(\"\\\"\");\n+            sb.append(base64.charAt(i));\n+            if (i%64 == 63 || i == last) {\n+                sb.append(\"\\\"\");\n+                if (i == last) sb.append(\";\\n\");\n+                else sb.append(\"\\n        + \");\n+            }\n+        }\n+        System.out.println(sb);\n+    }\n+\n+    \/**\n+     * Generates the Java Pseudo code for Duration serialized byte array as Base64 string that\n+     * can be cut & pasted into the JDK<version>GregorianCalendarAndDurationSerData.java files.\n+     * @param base64\n+     *\/\n+    public void generatePseudoCodeForDurationSerBytesAsBase64(String base64) {\n+        final StringBuilder sbdur = new StringBuilder();\n+        sbdur.append(\"    \/**\").append('\\n');\n+        sbdur.append(\"     * Base64 encoded string for Duration object.\").append('\\n');\n+        sbdur.append(\"     * Java version: \").append(System.getProperty(\"java.version\")).append('\\n');\n+        sbdur.append(\"     **\/\").append('\\n');\n+        sbdur.append(\"    private final String durationBase64 = \").append(\"\\n          \");\n+        final int lastdur = base64.length() - 1;\n+        for (int i=0; i<base64.length();i++) {\n+            if (i%64 == 0) sbdur.append(\"\\\"\");\n+            sbdur.append(base64.charAt(i));\n+            if (i%64 == 63 || i == lastdur) {\n+                sbdur.append(\"\\\"\");\n+                if (i == lastdur) sbdur.append(\";\\n\");\n+                else sbdur.append(\"\\n        + \");\n+            }\n+        }\n+        System.out.println(sbdur);\n+    }\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/SerializationTest.java","additions":94,"deletions":80,"binary":false,"changes":174,"status":"modified"}]}