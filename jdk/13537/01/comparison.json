{"files":[{"filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK6_Duration.ser","binary":true,"status":"deleted"},{"filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK6_XMLGregorianCalendar.ser","binary":true,"status":"deleted"},{"filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK7_Duration.ser","binary":true,"status":"deleted"},{"filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK7_XMLGregorianCalendar.ser","binary":true,"status":"deleted"},{"filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK8_Duration.ser","binary":true,"status":"deleted"},{"filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK8_XMLGregorianCalendar.ser","binary":true,"status":"deleted"},{"filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK9_Duration.ser","binary":true,"status":"deleted"},{"filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/JDK9_XMLGregorianCalendar.ser","binary":true,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main SerializationTest read\n+ * @run testng SerializationTest\n@@ -31,1 +31,10 @@\n-import java.io.*;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n@@ -37,0 +46,6 @@\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n@@ -38,7 +53,1 @@\n- * use \"read\" to test compatibility\n- * SerializationTest read\n- *\n- * use \"write\" to create test files\n- * SerializationTest write javaVersion\n- * where javaVersion is 6, 7, 8, or 9\n- *\n+ * Verify serialization compatibility for XMLGregorianCalendar and Duration\n@@ -65,2 +74,12 @@\n-    public static void main(String[] args) {\n-        SerializationTest test = new SerializationTest();\n+    \/**\n+     * Create the Data files.\n+     * @throws DatatypeConfigurationException\n+     * @throws IOException\n+     *\/\n+    @BeforeClass\n+    public void setup() throws DatatypeConfigurationException, IOException {\n+        for(String jdkVersion : JDK) {\n+            if(!Files.exists(Path.of(filePath, jdkVersion+FILENAME_CAL ))) {\n+                DatatypeFactory dtf = DatatypeFactory.newInstance();\n+                XMLGregorianCalendar c = dtf.newXMLGregorianCalendar(EXPECTED_CAL);\n+                toFile((Serializable) c, filePath + jdkVersion + FILENAME_CAL);\n@@ -68,7 +87,6 @@\n-        if (args[0].equalsIgnoreCase(\"read\")) {\n-            test.testReadCal();\n-            test.testReadDuration();\n-            test.report();\n-        } else {\n-            int ver = Integer.valueOf(args[1]).intValue();\n-            test.createTestFile(JDK[ver - 6]);\n+            }\n+            if(!Files.exists(Path.of(filePath, jdkVersion+\"t\"+FILENAME_DURATION ))) {\n+                DatatypeFactory dtf = DatatypeFactory.newInstance();\n+                Duration d = dtf.newDuration(EXPECTED_DURATION);\n+                toFile((Serializable) d, filePath + jdkVersion + FILENAME_DURATION);\n+            }\n@@ -76,1 +94,0 @@\n-\n@@ -79,17 +96,9 @@\n-    public void testReadCal() {\n-        try {\n-            for (String javaVersion : JDK) {\n-                XMLGregorianCalendar d1 = (XMLGregorianCalendar) fromFile(\n-                        javaVersion + FILENAME_CAL);\n-                if (!d1.toString().equalsIgnoreCase(EXPECTED_CAL)) {\n-                    fail(\"Java version: \" + javaVersion\n-                            + \"\\nExpected: \" + EXPECTED_CAL\n-                            + \"\\nActual: \" + d1.toString());\n-                } else {\n-                    success(\"testReadCal: read \" + javaVersion + \" serialized file, passed.\");\n-                }\n-            }\n-        } catch (ClassNotFoundException ex) {\n-            fail(\"testReadCal: \" + ex.getMessage());\n-        } catch (IOException ex) {\n-            fail(\"testReadCal: \" + ex.getMessage());\n+    \/**\n+     *Delete the data files.\n+     * @throws IOException\n+     *\/\n+    @AfterClass\n+    public void cleanup() throws IOException {\n+        for(String jdkVersion : JDK) {\n+            Files.deleteIfExists(Path.of(filePath, jdkVersion+FILENAME_CAL ));\n+            Files.deleteIfExists(Path.of(filePath, jdkVersion+FILENAME_DURATION ));\n@@ -99,18 +108,8 @@\n-    public void testReadDuration() {\n-        try {\n-            for (String javaVersion : JDK) {\n-                Duration d1 = (Duration) fromFile(\n-                        javaVersion + FILENAME_DURATION);\n-                if (!d1.toString().equalsIgnoreCase(EXPECTED_DURATION)) {\n-                    fail(\"Java version: \" + javaVersion\n-                            + \"\\nExpected: \" + EXPECTED_DURATION\n-                            + \"\\nActual: \" + d1.toString());\n-                } else {\n-                    success(\"testReadDuration: read \" + javaVersion + \" serialized file, passed.\");\n-                }\n-            }\n-        } catch (ClassNotFoundException ex) {\n-            fail(\"testReadDuration: \" + ex.getMessage());\n-        } catch (IOException ex) {\n-            fail(\"testReadDuration: \" + ex.getMessage());\n-        }\n+\n+    \/**\n+     *Provide data for JDK version and Gregorian Calender\n+     *\/\n+    @DataProvider(name = \"GregorianCalendar\")\n+    public Object [][]gregorianCalendarData() {\n+        return new Object [][] {{JDK[0], EXPECTED_CAL}, {JDK[1], EXPECTED_CAL},\n+                {JDK[2], EXPECTED_CAL}, {JDK[3], EXPECTED_CAL}};\n@@ -120,3 +119,1 @@\n-     * Create test files\n-     *\n-     * @param javaVersion JDK version\n+     * Provide data for JDK version and Duration\n@@ -124,10 +121,30 @@\n-    public void createTestFile(String javaVersion) {\n-        try {\n-            DatatypeFactory dtf = DatatypeFactory.newInstance();\n-            XMLGregorianCalendar c = dtf.newXMLGregorianCalendar(EXPECTED_CAL);\n-            Duration d = dtf.newDuration(EXPECTED_DURATION);\n-            toFile((Serializable) c, filePath + javaVersion + FILENAME_CAL);\n-            toFile((Serializable) d, filePath + javaVersion + FILENAME_DURATION);\n-        } catch (Exception e) {\n-            fail(e.getMessage());\n-        }\n+    @DataProvider(name = \"GregorianDuration\")\n+    public Object [][]gregorianDurationData() {\n+        return new Object [][] {{JDK[0], EXPECTED_DURATION}, {JDK[1], EXPECTED_DURATION},\n+                {JDK[2], EXPECTED_DURATION}, {JDK[3], EXPECTED_DURATION}};\n+    }\n+\n+    \/**\n+     * verify serialization compatibility for XMLGregorianCalendar\n+     * @param javaVersion\n+     * @param gregorianDate\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     *\/\n+    @Test(dataProvider=\"GregorianCalendar\")\n+    public void testReadCal(String javaVersion, String gregorianDate) throws IOException, ClassNotFoundException {\n+        XMLGregorianCalendar d1 = (XMLGregorianCalendar) fromFile(javaVersion + FILENAME_CAL);\n+        Assert.assertEquals(d1.toString(), gregorianDate);\n+    }\n+\n+    \/**\n+     * verify serialization compatibility for Duration\n+     * @param javaVersion\n+     * @param gregorianDuration\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     *\/\n+    @Test(dataProvider = \"GregorianDuration\")\n+    public void testReadDuration(String javaVersion, String gregorianDuration) throws IOException, ClassNotFoundException {\n+        Duration d1 = (Duration) fromFile(javaVersion + FILENAME_DURATION);\n+        Assert.assertEquals(d1.toString().toUpperCase(), gregorianDuration);\n@@ -145,0 +162,2 @@\n+        objectinputstream.close();\n+        streamIn.close();\n@@ -156,27 +175,1 @@\n-    }\n-\n-    static String errMessage;\n-    int passed = 0, failed = 0;\n-\n-    void fail(String errMsg) {\n-        if (errMessage == null) {\n-            errMessage = errMsg;\n-        } else {\n-            errMessage = errMessage + \"\\n\" + errMsg;\n-        }\n-        failed++;\n-    }\n-\n-    void success(String msg) {\n-        passed++;\n-        System.out.println(msg);\n-    }\n-\n-    public void report() {\n-\n-        System.out.println(\"\\nNumber of tests passed: \" + passed);\n-        System.out.println(\"Number of tests failed: \" + failed + \"\\n\");\n-\n-        if (errMessage != null) {\n-            throw new RuntimeException(errMessage);\n-        }\n+        fout.close();\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/SerializationTest.java","additions":88,"deletions":95,"binary":false,"changes":183,"status":"modified"}]}