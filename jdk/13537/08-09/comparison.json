{"files":[{"patch":"@@ -28,13 +28,44 @@\n-    public static final String GREGO_CAL_DUR_SER_CLASS = \"public class %sGregorianCalendarAndDurationSerData extends GregorianCalendarAndDurationSerData {\\n\" +\n-            \"    %s\\n\" +\n-            \"    %s\\n\" +\n-            \"    @Override\\n\" +\n-            \"    public byte[] getGregorianCalendarByteArray() {\\n\" +\n-            \"        return gregorianCalendarBytes;\\n\" +\n-            \"    }\\n\" +\n-            \"\\n\" +\n-            \"    @Override\\n\" +\n-            \"    public byte[] getDurationBytes() {\\n\" +\n-            \"        return durationBytes;\\n\" +\n-            \"    }\\n\" +\n-            \"}\";\n+    public static final String ORACLE_COPY_RIGHT = \"\"\"\n+            \/*\n+             * Copyright (c) %s, Oracle and\/or its affiliates. All rights reserved.\n+             * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+             *\n+             * This code is free software; you can redistribute it and\/or modify it\n+             * under the terms of the GNU General Public License version 2 only, as\n+             * published by the Free Software Foundation.\n+             *\n+             * This code is distributed in the hope that it will be useful, but WITHOUT\n+             * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+             * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+             * version 2 for more details (a copy is included in the LICENSE file that\n+             * accompanied this code).\n+             *\n+             * You should have received a copy of the GNU General Public License version\n+             * 2 along with this work; if not, write to the Free Software Foundation,\n+             * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+             *\n+             * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+             * or visit www.oracle.com if you need additional information or have any\n+             * questions.\n+             *\/\n+             \n+             \/**\n+              * Mechanically generated %s specific serialization bytes for XMLGregorianCalendar and Duration data type.\n+              * Do not edit this file.\n+              *\/\n+            \"\"\";\n+    public static final String GREGO_CAL_DUR_SER_CLASS = \"\"\"\n+            public class %sGregorianCalendarAndDurationSerData extends GregorianCalendarAndDurationSerData {\n+               %s\n+               %s\n+               \n+               @Override\n+               public byte[] getGregorianCalendarByteArray() {\n+                  return gregorianCalendarBytes;\n+               }\n+               \n+               @Override\n+               public byte[] getDurationBytes() {\n+                  return durationBytes;\n+               }\n+            };\"\"\";\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/GregorianCalAndDurSerDataTemplate.java","additions":44,"deletions":13,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-import java.util.Base64;\n-import java.util.Formatter;\n+import java.time.LocalDate;\n+import java.util.HexFormat;\n@@ -73,0 +73,1 @@\n+        String copyRightStr = GregorianCalAndDurSerDataTemplate.ORACLE_COPY_RIGHT;\n@@ -80,5 +81,0 @@\n-            \/\/ Now get a Base64 string representation of the xmlGregorianCalendar serialized bytes.\n-            final String base64 = Base64.getEncoder().encodeToString(baos.toByteArray());\n-            \/\/ Now get a Base64 string representation of Duration the serialized bytes.\n-            final String base64dur = Base64.getEncoder().encodeToString(baos2.toByteArray());\n-\n@@ -87,0 +83,1 @@\n+            copyRightStr = String.format(copyRightStr, LocalDate.now().getYear(), JDK);\n@@ -89,1 +86,2 @@\n-            Files.writeString(Path.of(testsrc,srcFilePrefix+\"GregorianCalendarAndDurationSerData.java\"), classStr);\n+            String srcStr = copyRightStr + \"\\n\" + classStr;\n+            Files.writeString(Path.of(testsrc,srcFilePrefix+\"GregorianCalendarAndDurationSerData.java\"), srcStr);\n@@ -108,12 +106,3 @@\n-        StringBuilder sb2 = new StringBuilder(bytes.length * 5);\n-        Formatter fmt = new Formatter(sb2);\n-        fmt.format(\"    private final byte[] %s = {\", \"gregorianCalendarBytes\");\n-        final int linelen = 8;\n-        for (int i = 0; i <bytes.length; i++) {\n-            if (i % linelen == 0) {\n-                fmt.format(\"%n        \");\n-            }\n-            fmt.format(\" (byte) 0x%x,\", bytes[i] & 0xff);\n-        }\n-        fmt.format(\"%n    };%n\");\n-        return sb2.toString();\n+        StringBuilder sb = new StringBuilder(bytes.length * 5);\n+        sb.append(\"private final byte[] gregorianCalendarBytes = {\");\n+        return generatePseudoCode(sb, bytes);\n@@ -130,8 +119,10 @@\n-        Formatter fmt = new Formatter(sb);\n-        fmt.format(\"    private final byte[] %s = {\", \"durationBytes\");\n-        final int linelen2 = 8;\n-        for (int i = 0; i <bytesdur.length; i++) {\n-            if (i % linelen2 == 0) {\n-                fmt.format(\"%n        \");\n-            }\n-            fmt.format(\" (byte) 0x%x,\", bytesdur[i] & 0xff);\n+        sb.append(\"private final byte[] durationBytes = {\");\n+        return generatePseudoCode(sb, bytesdur);\n+    }\n+\n+    private static String generatePseudoCode(StringBuilder sb, byte [] bytes) {\n+        final int linelen = 8;\n+        HexFormat hex = HexFormat.of().withPrefix(\" (byte) 0x\").withSuffix(\",\");\n+        for (int i = 0; i < bytes.length; i += linelen) {\n+            sb.append(\"\\n\");\n+            sb.append(hex.formatHex(bytes, i, Math.min(i + linelen, bytes.length)));\n@@ -139,1 +130,1 @@\n-        fmt.format(\"%n    };%n\");\n+        sb.append(\"};\");\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/GregorianCalAndDurSerDataUtil.java","additions":20,"deletions":29,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -124,4 +124,4 @@\n-                Arguments.of(JDK[0], gregorianCalendarAndDurationSerData[1], EXPECTED_DURATION),\n-                Arguments.of(JDK[1], gregorianCalendarAndDurationSerData[2], EXPECTED_DURATION),\n-                Arguments.of(JDK[2], gregorianCalendarAndDurationSerData[3], EXPECTED_DURATION),\n-                Arguments.of(JDK[3], gregorianCalendarAndDurationSerData[4], EXPECTED_DURATION));\n+                Arguments.of(JDK[1], gregorianCalendarAndDurationSerData[1], EXPECTED_DURATION),\n+                Arguments.of(JDK[2], gregorianCalendarAndDurationSerData[2], EXPECTED_DURATION),\n+                Arguments.of(JDK[3], gregorianCalendarAndDurationSerData[3], EXPECTED_DURATION),\n+                Arguments.of(JDK[4], gregorianCalendarAndDurationSerData[4], EXPECTED_DURATION));\n","filename":"test\/jdk\/javax\/xml\/jaxp\/datatype\/8033980\/SerializationTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}