{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,3 @@\n-  _from_boot_loader_modules_image(from_boot_loader_modules_image) {}\n+  _from_boot_loader_modules_image(from_boot_loader_modules_image) {\n+    assert(buffer != NULL, \"caller should throw NPE\");\n+}\n","filename":"src\/hotspot\/share\/classfile\/classFileStream.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -208,4 +208,1 @@\n-\n-  if (result == NULL) {\n-    return NULL;\n-  }\n+  assert(result != NULL, \"result cannot be null with no pending exception\");\n","filename":"src\/hotspot\/share\/classfile\/klassFactory.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -993,0 +993,1 @@\n+  assert(k != NULL, \"no klass created\");\n@@ -994,1 +995,1 @@\n-  if ((cl_info.is_hidden() || is_unsafe_anon_class) && k != NULL) {\n+  if (cl_info.is_hidden() || is_unsafe_anon_class) {\n@@ -1038,1 +1039,2 @@\n-\n+\/\/ This function either returns an InstanceKlass or throws an exception.  It does\n+\/\/ not return NULL without a pending exception.\n@@ -1071,3 +1073,0 @@\n-    if (st->buffer() == NULL) {\n-      return NULL;\n-    }\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -291,1 +291,1 @@\n-  if (log_is_enabled(Debug, class, resolve) && k != NULL) {\n+  if (log_is_enabled(Debug, class, resolve)) {\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -869,1 +869,1 @@\n-  if (log_is_enabled(Debug, class, resolve) && k != NULL) {\n+  if (log_is_enabled(Debug, class, resolve)) {\n@@ -948,1 +948,0 @@\n-  Klass* defined_k;\n@@ -951,8 +950,8 @@\n-    defined_k = SystemDictionary::resolve_from_stream(class_name,\n-                                                      class_loader,\n-                                                      protection_domain,\n-                                                      &st,\n-                                                      CHECK_NULL);\n-\n-    if (log_is_enabled(Debug, class, resolve) && defined_k != NULL) {\n-      trace_class_resolution(defined_k);\n+    ik = SystemDictionary::resolve_from_stream(class_name,\n+                                               class_loader,\n+                                               protection_domain,\n+                                               &st,\n+                                               CHECK_NULL);\n+\n+    if (log_is_enabled(Debug, class, resolve)) {\n+      trace_class_resolution(ik);\n@@ -960,1 +959,0 @@\n-    ik = InstanceKlass::cast(defined_k);\n@@ -971,10 +969,5 @@\n-    defined_k = SystemDictionary::parse_stream(class_name,\n-                                               class_loader,\n-                                               &st,\n-                                               cl_info,\n-                                               CHECK_NULL);\n-    if (defined_k == NULL) {\n-      THROW_MSG_0(vmSymbols::java_lang_Error(), \"Failure to define a hidden class\");\n-    }\n-\n-    ik = InstanceKlass::cast(defined_k);\n+    ik = SystemDictionary::parse_stream(class_name,\n+                                        class_loader,\n+                                        &st,\n+                                        cl_info,\n+                                        CHECK_NULL);\n@@ -997,1 +990,1 @@\n-  assert(Reflection::is_same_class_package(lookup_k, defined_k),\n+  assert(Reflection::is_same_class_package(lookup_k, ik),\n@@ -1006,1 +999,1 @@\n-  return (jclass) JNIHandles::make_local(THREAD, defined_k->java_mirror());\n+  return (jclass) JNIHandles::make_local(THREAD, ik->java_mirror());\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":16,"deletions":23,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -865,10 +865,7 @@\n-  Klass* anonk = SystemDictionary::parse_stream(no_class_name,\n-                                                host_loader,\n-                                                &st,\n-                                                cl_info,\n-                                                CHECK_NULL);\n-  if (anonk == NULL) {\n-    return NULL;\n-  }\n-\n-  return InstanceKlass::cast(anonk);\n+  InstanceKlass* anonk = SystemDictionary::parse_stream(no_class_name,\n+                                                        host_loader,\n+                                                        &st,\n+                                                        cl_info,\n+                                                        CHECK_NULL);\n+  assert(anonk != NULL, \"no klass created\");\n+  return anonk;\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public class A { public A() { System.out.println(\"A called\"); } }\n","filename":"test\/hotspot\/jtreg\/runtime\/DefineClass\/A.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"added"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8262913\n+ * @summary Verifies DefineClass with null or truncate bytes gets appropriate exception\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ * @compile A.java\n+ * @run main\/native NullClassBytesTest\n+ *\/\n+\n+import java.io.*;\n+\n+public class NullClassBytesTest {\n+\n+    static native Class<?> nativeDefineClass(String name, ClassLoader ldr, byte[] class_bytes, int length);\n+\n+    static {\n+        System.loadLibrary(\"NullClassBytesTest\");\n+    }\n+\n+    static class SimpleLoader extends ClassLoader {\n+\n+        public Class<?> loadClass(String name) throws ClassNotFoundException {\n+            synchronized(getClassLoadingLock(name)) {\n+                Class<?> c = findLoadedClass(name);\n+                if (c != null) return c;\n+\n+                \/\/ load the class data from the connection\n+                if (name.equals(\"A\")) {\n+                    byte[] b = getClassData(\"A\");\n+                    return defineClass(name, b, 0, b.length);\n+                } else if (name.equals(\"B\")) {\n+                    byte[] b = new byte[0];\n+                    return defineClass(name, b, 0, b.length);\n+                } else if (name.equals(\"C\")) {\n+                    byte[] b = null;\n+                    return defineClass(name, b, 0, 0);\n+                } else if (name.equals(\"D\")) {\n+                    byte[] b = new byte[0];\n+                    return nativeDefineClass(name, this, b, b.length);\n+                } else if (name.equals(\"E\")) {\n+                    byte[] b = null;\n+                    return nativeDefineClass(name, this, b, 0);\n+                } else {\n+                    return super.loadClass(name);\n+                }\n+            }\n+        }\n+\n+        byte[] getClassData(String name) {\n+            try {\n+               String TempName = name;\n+               String currentDir = System.getProperty(\"test.classes\");\n+               String filename = currentDir + File.separator + TempName + \".class\";\n+               FileInputStream fis = new FileInputStream(filename);\n+               byte[] b = new byte[5000];\n+               int cnt = fis.read(b, 0, 5000);\n+               byte[] c = new byte[cnt];\n+               for (int i=0; i<cnt; i++) c[i] = b[i];\n+                 return c;\n+            } catch (IOException e) {\n+               return null;\n+            }\n+        }\n+    }\n+\n+    public static void main(java.lang.String[] unused) throws Exception {\n+        SimpleLoader ldr = new SimpleLoader();\n+        Class<?> a = Class.forName(\"A\", true, ldr);\n+        Object obj = a.getConstructor().newInstance();\n+\n+        \/\/ If byte array points to nul, the JVM throws ClassFormatError(\"Truncated class file\")\n+        try {\n+            Class<?> b = Class.forName(\"B\", true, ldr);\n+        } catch (ClassFormatError cfe) {\n+            if (!cfe.getMessage().equals(\"Truncated class file\")) {\n+                cfe.printStackTrace();\n+                throw new RuntimeException(\"Wrong message\");\n+            }\n+        }\n+\n+        \/\/ If byte array is NULL, ClassLoader native detects this and throws NPE\n+        \/\/ before calling JVM_DefineClassWithSource\n+        try {\n+            Class<?> c = Class.forName(\"C\", true, ldr);\n+        } catch (NullPointerException npe) {}\n+\n+        \/\/ Test JNI_DefineClass with truncated bytes\n+        try {\n+            Class<?> c = Class.forName(\"D\", true, ldr);\n+        } catch (ClassFormatError cfe) {\n+            if (!cfe.getMessage().equals(\"Truncated class file\")) {\n+                cfe.printStackTrace();\n+                throw new RuntimeException(\"Wrong message\");\n+            }\n+        }\n+\n+        \/\/ Native methods must throw their own NPE\n+        try {\n+            Class<?> c = Class.forName(\"E\", true, ldr);\n+        } catch (NullPointerException npe) {\n+            if (!npe.getMessage().equals(\"class_bytes are null\")) {\n+                npe.printStackTrace();\n+                throw new RuntimeException(\"Wrong message\");\n+            }\n+        }\n+        System.out.println(\"TEST PASSED\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/DefineClass\/NullClassBytesTest.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <jni.h>\n+\n+JNIEXPORT void JNICALL\n+Java_NullClassBytesTest_nativeDefineClass(JNIEnv *env, jclass klass, jstring className, jobject ldr,\n+                                          jbyte* class_bytes, jint length) {\n+    if (class_bytes == NULL) {\n+        jclass cls = (*env)->FindClass(env, \"java\/lang\/NullPointerException\");\n+\n+        if (cls != 0) {\n+            (*env)->ThrowNew(env, cls, \"class_bytes are null\");\n+        }\n+        return;\n+    }\n+    const char* c_name = (*env)->GetStringUTFChars(env, className, NULL);\n+    (*env)->DefineClass(env, c_name, ldr, class_bytes, length);\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/DefineClass\/libNullClassBytesTest.c","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"}]}