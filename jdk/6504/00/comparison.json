{"files":[{"patch":"@@ -270,0 +270,1 @@\n+      ThreadCritical tc;\n@@ -278,0 +279,1 @@\n+      ThreadCritical tc;\n","filename":"src\/hotspot\/share\/services\/memTracker.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2019, 2021, Red Hat, Inc. All rights reserved.\n@@ -63,1 +63,0 @@\n-  assert(MemTracker::tracking_level() >= NMT_summary, \"Must be\");\n@@ -66,1 +65,0 @@\n-    ThreadCritical tc;\n@@ -68,1 +66,1 @@\n-    _thread_count ++;\n+    Atomic::inc(&_thread_count, memory_order_relaxed);\n@@ -73,1 +71,0 @@\n-      ThreadCritical tc;\n@@ -82,1 +79,0 @@\n-  assert(MemTracker::tracking_level() >= NMT_summary, \"Must be\");\n@@ -85,1 +81,0 @@\n-    ThreadCritical tc;\n@@ -87,1 +82,1 @@\n-    _thread_count--;\n+    Atomic::dec(&_thread_count, memory_order_relaxed);\n@@ -92,1 +87,0 @@\n-      ThreadCritical tc;\n@@ -106,1 +100,5 @@\n-      assert(_simple_thread_stacks != NULL, \"Must be initialized\");\n+      if (_simple_thread_stacks == NULL) {\n+        assert(MemTracker::tracking_level() < NMT_summary, \"Must be\");\n+        return false;\n+      }\n+\n","filename":"src\/hotspot\/share\/services\/threadStackTracker.cpp","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/atomic.hpp\"\n@@ -77,0 +78,1 @@\n+  \/\/ Require ThreadCritical lock held\n@@ -81,1 +83,1 @@\n-  static size_t thread_count() { return _thread_count; }\n+  static size_t thread_count() { return Atomic::load(&_thread_count); }\n","filename":"src\/hotspot\/share\/services\/threadStackTracker.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -671,2 +671,5 @@\n-   }\n-  return true;\n+    return true;\n+  } else {\n+    assert(MemTracker::tracking_level() < NMT_summary, \"Must be\");\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/services\/virtualMemoryTracker.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary NMT can safely shutdown\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:NativeMemoryTracking=detail ShutdownTest\n+ *\/\n+\n+import java.util.ArrayList;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.JDKToolFinder;\n+import sun.hotspot.WhiteBox;\n+\n+public class ShutdownTest {\n+  private static volatile boolean shutdown = false;\n+  private static WhiteBox wb = WhiteBox.getWhiteBox();\n+  private static ArrayList<Long> mallocList = new ArrayList<>();\n+  private static ArrayList<Long> vmList = new ArrayList<>();\n+\n+  private static final long PAGE = 4 * 1024;\n+  private static void triggerNMTActivities() {\n+    Thread[] thrs = new Thread[10];\n+    while (!shutdown) {\n+      for (int index = 0; index < thrs.length; index++) {\n+        thrs[index] = new Thread(() -> {\n+          long toRemove = 0;\n+          long toAdd = 0;\n+\n+          \/\/ trigger malloc tracking\n+          toAdd = wb.NMTMalloc(7);\n+          synchronized (mallocList) {\n+            if (mallocList.size() > 20) {\n+              toRemove = mallocList.remove(0);\n+            }\n+            mallocList.add(toAdd);\n+          }\n+          if (toRemove != 0) {\n+            wb.NMTFree(toRemove);\n+            toRemove = 0;\n+          }\n+\n+          toAdd = wb.NMTReserveMemory(PAGE);\n+          synchronized (vmList) {\n+            if (vmList.size() > 10) {\n+              toRemove = vmList.remove(0);\n+            }\n+            vmList.add(toAdd);\n+          }\n+          if (toRemove != 0) {\n+            wb.NMTReleaseMemory(toRemove, PAGE);\n+          }\n+        });\n+        thrs[index].start();\n+      }\n+\n+      for (int index = 0; index < thrs.length; index++) {\n+        try {\n+          thrs[index].join();\n+        } catch (InterruptedException e) { }\n+      }\n+    }\n+  }\n+\n+  public static void main(String args[]) throws Exception {\n+    \/\/ Trigger NMT activities\n+    new Thread(()-> {\n+      triggerNMTActivities();\n+    }).start();\n+\n+    \/\/ Grab my own PID\n+    String pid = Long.toString(ProcessTools.getProcessId());\n+    OutputAnalyzer output;\n+\n+    ProcessBuilder pb = new ProcessBuilder();\n+\n+    \/\/ Run 'jcmd <pid> VM.native_memory shutdown'\n+    pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.native_memory\", \"shutdown\"});\n+    output = new OutputAnalyzer(pb.start());\n+\n+    \/\/ Verify that jcmd reports that NMT is shutting down\n+    output.shouldContain(\"Native memory tracking has been turned off\");\n+\n+    shutdown = true;\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/ShutdownTest.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"}]}