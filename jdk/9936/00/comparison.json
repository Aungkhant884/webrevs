{"files":[{"patch":"@@ -53,17 +53,17 @@\n-REGISTER_DECLARATION(Register, c_rarg0, x10);\n-REGISTER_DECLARATION(Register, c_rarg1, x11);\n-REGISTER_DECLARATION(Register, c_rarg2, x12);\n-REGISTER_DECLARATION(Register, c_rarg3, x13);\n-REGISTER_DECLARATION(Register, c_rarg4, x14);\n-REGISTER_DECLARATION(Register, c_rarg5, x15);\n-REGISTER_DECLARATION(Register, c_rarg6, x16);\n-REGISTER_DECLARATION(Register, c_rarg7, x17);\n-\n-REGISTER_DECLARATION(FloatRegister, c_farg0, f10);\n-REGISTER_DECLARATION(FloatRegister, c_farg1, f11);\n-REGISTER_DECLARATION(FloatRegister, c_farg2, f12);\n-REGISTER_DECLARATION(FloatRegister, c_farg3, f13);\n-REGISTER_DECLARATION(FloatRegister, c_farg4, f14);\n-REGISTER_DECLARATION(FloatRegister, c_farg5, f15);\n-REGISTER_DECLARATION(FloatRegister, c_farg6, f16);\n-REGISTER_DECLARATION(FloatRegister, c_farg7, f17);\n+constexpr Register c_rarg0 = x10;\n+constexpr Register c_rarg1 = x11;\n+constexpr Register c_rarg2 = x12;\n+constexpr Register c_rarg3 = x13;\n+constexpr Register c_rarg4 = x14;\n+constexpr Register c_rarg5 = x15;\n+constexpr Register c_rarg6 = x16;\n+constexpr Register c_rarg7 = x17;\n+\n+constexpr FloatRegister c_farg0 = f10;\n+constexpr FloatRegister c_farg1 = f11;\n+constexpr FloatRegister c_farg2 = f12;\n+constexpr FloatRegister c_farg3 = f13;\n+constexpr FloatRegister c_farg4 = f14;\n+constexpr FloatRegister c_farg5 = f15;\n+constexpr FloatRegister c_farg6 = f16;\n+constexpr FloatRegister c_farg7 = f17;\n@@ -86,8 +86,8 @@\n-REGISTER_DECLARATION(Register, j_rarg0, c_rarg1);\n-REGISTER_DECLARATION(Register, j_rarg1, c_rarg2);\n-REGISTER_DECLARATION(Register, j_rarg2, c_rarg3);\n-REGISTER_DECLARATION(Register, j_rarg3, c_rarg4);\n-REGISTER_DECLARATION(Register, j_rarg4, c_rarg5);\n-REGISTER_DECLARATION(Register, j_rarg5, c_rarg6);\n-REGISTER_DECLARATION(Register, j_rarg6, c_rarg7);\n-REGISTER_DECLARATION(Register, j_rarg7, c_rarg0);\n+constexpr Register j_rarg0 = c_rarg1;\n+constexpr Register j_rarg1 = c_rarg2;\n+constexpr Register j_rarg2 = c_rarg3;\n+constexpr Register j_rarg3 = c_rarg4;\n+constexpr Register j_rarg4 = c_rarg5;\n+constexpr Register j_rarg5 = c_rarg6;\n+constexpr Register j_rarg6 = c_rarg7;\n+constexpr Register j_rarg7 = c_rarg0;\n@@ -97,8 +97,8 @@\n-REGISTER_DECLARATION(FloatRegister, j_farg0, f10);\n-REGISTER_DECLARATION(FloatRegister, j_farg1, f11);\n-REGISTER_DECLARATION(FloatRegister, j_farg2, f12);\n-REGISTER_DECLARATION(FloatRegister, j_farg3, f13);\n-REGISTER_DECLARATION(FloatRegister, j_farg4, f14);\n-REGISTER_DECLARATION(FloatRegister, j_farg5, f15);\n-REGISTER_DECLARATION(FloatRegister, j_farg6, f16);\n-REGISTER_DECLARATION(FloatRegister, j_farg7, f17);\n+constexpr FloatRegister j_farg0 = f10;\n+constexpr FloatRegister j_farg1 = f11;\n+constexpr FloatRegister j_farg2 = f12;\n+constexpr FloatRegister j_farg3 = f13;\n+constexpr FloatRegister j_farg4 = f14;\n+constexpr FloatRegister j_farg5 = f15;\n+constexpr FloatRegister j_farg6 = f16;\n+constexpr FloatRegister j_farg7 = f17;\n@@ -107,1 +107,1 @@\n-REGISTER_DECLARATION(Register, zr,        x0);\n+constexpr Register zr = x0;\n@@ -109,1 +109,1 @@\n-REGISTER_DECLARATION(Register, gp,        x3);\n+constexpr Register gp = x3;\n@@ -111,1 +111,1 @@\n-REGISTER_DECLARATION(Register, tp,        x4);\n+constexpr Register tp = x4;\n@@ -119,1 +119,1 @@\n-REGISTER_DECLARATION(Register, xmethod,   x31);\n+constexpr Register xmethod =  x31;\n@@ -121,1 +121,1 @@\n-REGISTER_DECLARATION(Register, ra,        x1);\n+constexpr Register ra      =  x1;\n@@ -125,23 +125,11 @@\n-\/\/ stack pointer\n-REGISTER_DECLARATION(Register, sp,        x2);\n-\/\/ frame pointer\n-REGISTER_DECLARATION(Register, fp,        x8);\n-\/\/ base of heap\n-REGISTER_DECLARATION(Register, xheapbase, x27);\n-\/\/ constant pool cache\n-REGISTER_DECLARATION(Register, xcpool,    x26);\n-\/\/ monitors allocated on stack\n-REGISTER_DECLARATION(Register, xmonitors, x25);\n-\/\/ locals on stack\n-REGISTER_DECLARATION(Register, xlocals,   x24);\n-\n-\/\/ java thread pointer\n-REGISTER_DECLARATION(Register, xthread,   x23);\n-\/\/ bytecode pointer\n-REGISTER_DECLARATION(Register, xbcp,      x22);\n-\/\/ Dispatch table base\n-REGISTER_DECLARATION(Register, xdispatch, x21);\n-\/\/ Java expression stack pointer\n-REGISTER_DECLARATION(Register, esp,       x20);\n-\/\/ Sender's SP while in interpreter\n-REGISTER_DECLARATION(Register, x19_sender_sp, x19);\n+constexpr Register sp            = x2; \/\/ stack pointer\n+constexpr Register fp            = x8; \/\/ frame pointer\n+constexpr Register xheapbase     = x27; \/\/ base of heap\n+constexpr Register xcpool        = x26; \/\/ constant pool cache\n+constexpr Register xmonitors     = x25; \/\/ monitors allocated on stack\n+constexpr Register xlocals       = x24; \/\/ locals on stack\n+constexpr Register xthread       = x23; \/\/ java thread pointer\n+constexpr Register xbcp          = x22; \/\/ bytecode pointer\n+constexpr Register xdispatch     = x21; \/\/ Dispatch table base\n+constexpr Register esp           = x20; \/\/ Java expression stack pointer\n+constexpr Register x19_sender_sp = x19; \/\/ Sender's SP while in interpreter\n@@ -150,3 +138,3 @@\n-REGISTER_DECLARATION(Register, t0, x5);\n-REGISTER_DECLARATION(Register, t1, x6);\n-REGISTER_DECLARATION(Register, t2, x7);\n+constexpr Register t0 = x5;\n+constexpr Register t1 = x6;\n+constexpr Register t2 = x7;\n@@ -221,4 +209,0 @@\n-  ~Address() {\n-    _target = NULL;\n-    _base = NULL;\n-  }\n@@ -397,1 +381,1 @@\n-    patch(a, lsb + 4, lsb, reg->encoding_nocheck());\n+    patch(a, lsb + 4, lsb, reg->raw_encoding());\n@@ -401,1 +385,1 @@\n-    patch(a, lsb + 4, lsb, reg->encoding_nocheck());\n+    patch(a, lsb + 4, lsb, reg->raw_encoding());\n@@ -405,1 +389,1 @@\n-    patch(a, lsb + 4, lsb, reg->encoding_nocheck());\n+    patch(a, lsb + 4, lsb, reg->raw_encoding());\n@@ -1553,1 +1537,1 @@\n-    patch_VArith(op, Vd, funct3, Vs1->encoding_nocheck(), Vs2, vm, funct6);                        \\\n+    patch_VArith(op, Vd, funct3, Vs1->raw_encoding(), Vs2, vm, funct6);                            \\\n@@ -1576,1 +1560,1 @@\n-    patch_VArith(op, Vd, funct3, Rs1->encoding_nocheck(), Vs2, vm, funct6);                        \\\n+    patch_VArith(op, Vd, funct3, Rs1->raw_encoding(), Vs2, vm, funct6);                            \\\n@@ -1591,1 +1575,1 @@\n-    patch_VArith(op, Vd, funct3, Rs1->encoding_nocheck(), Vs2, vm, funct6);                        \\\n+    patch_VArith(op, Vd, funct3, Rs1->raw_encoding(), Vs2, vm, funct6);                            \\\n@@ -1608,1 +1592,1 @@\n-    patch_VArith(op, Vd, funct3, Vs1->encoding_nocheck(), Vs2, vm, funct6);                        \\\n+    patch_VArith(op, Vd, funct3, Vs1->raw_encoding(), Vs2, vm, funct6);                            \\\n@@ -1698,1 +1682,1 @@\n-    patch_VArith(op, Vd, funct3, Rs1->encoding_nocheck(), Vs2, vm, funct6);                        \\\n+    patch_VArith(op, Vd, funct3, Rs1->raw_encoding(), Vs2, vm, funct6);                            \\\n@@ -1751,1 +1735,1 @@\n-    patch_VArith(op, Vd, funct3, Rs1->encoding_nocheck(), Vs2, vm, funct6);                        \\\n+    patch_VArith(op, Vd, funct3, Rs1->raw_encoding(), Vs2, vm, funct6);                            \\\n@@ -1814,1 +1798,1 @@\n-    patch_VArith(op, Vd, funct3, Vs1->encoding_nocheck(), Vs2, vm, funct6);  \\\n+    patch_VArith(op, Vd, funct3, Vs1->raw_encoding(), Vs2, vm, funct6);      \\\n@@ -1845,1 +1829,1 @@\n-    patch_VArith(op, Vd, funct3, Rs1->encoding_nocheck(), Vs2, vm, funct6); \\\n+    patch_VArith(op, Vd, funct3, Rs1->raw_encoding(), Vs2, vm, funct6);     \\\n@@ -1857,1 +1841,1 @@\n-    patch_VArith(op, Vd, funct3, Vs1->encoding_nocheck(), Vs2, vm, funct6); \\\n+    patch_VArith(op, Vd, funct3, Vs1->raw_encoding(), Vs2, vm, funct6);     \\\n@@ -1867,1 +1851,1 @@\n-    patch_VArith(op, Vd, funct3, Rs1->encoding_nocheck(), Vs2, vm, funct6); \\\n+    patch_VArith(op, Vd, funct3, Rs1->raw_encoding(), Vs2, vm, funct6);     \\\n@@ -1978,1 +1962,1 @@\n-    patch_VLdSt(op, Vd, width, Rs1, Vs2->encoding_nocheck(), vm, mop, mew, nf);                          \\\n+    patch_VLdSt(op, Vd, width, Rs1, Vs2->raw_encoding(), vm, mop, mew, nf);                              \\\n@@ -1996,1 +1980,1 @@\n-    patch_VLdSt(op, Vd, width, Rs1, Rs2->encoding_nocheck(), vm, mop, mew, nf);                          \\\n+    patch_VLdSt(op, Vd, width, Rs1, Rs2->raw_encoding(), vm, mop, mew, nf);                              \\\n@@ -2168,1 +2152,1 @@\n-    c_patch(a, lsb + 4, lsb, reg->encoding_nocheck());\n+    c_patch(a, lsb + 4, lsb, reg->raw_encoding());\n@@ -2173,1 +2157,1 @@\n-    c_patch(a, lsb + 2, lsb, reg->compressed_encoding_nocheck());\n+    c_patch(a, lsb + 2, lsb, reg->compressed_raw_encoding());\n@@ -2178,1 +2162,1 @@\n-    c_patch(a, lsb + 4, lsb, reg->encoding_nocheck());\n+    c_patch(a, lsb + 4, lsb, reg->raw_encoding());\n@@ -2183,1 +2167,1 @@\n-    c_patch(a, lsb + 2, lsb, reg->compressed_encoding_nocheck());\n+    c_patch(a, lsb + 2, lsb, reg->compressed_raw_encoding());\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":71,"deletions":87,"binary":false,"changes":158,"status":"modified"},{"patch":"@@ -42,2 +42,2 @@\n-  pd_nof_cpu_regs_frame_map = RegisterImpl::number_of_registers,       \/\/ number of registers used during code emission\n-  pd_nof_fpu_regs_frame_map = FloatRegisterImpl::number_of_registers,  \/\/ number of float registers used during code emission\n+  pd_nof_cpu_regs_frame_map = Register::number_of_registers,       \/\/ number of registers used during code emission\n+  pd_nof_fpu_regs_frame_map = FloatRegister::number_of_registers,  \/\/ number of float registers used during code emission\n","filename":"src\/hotspot\/cpu\/riscv\/c1_Defs_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -241,1 +241,1 @@\n-          const VMReg vm_reg_base = OptoReg::as_VMReg(opto_reg & ~(VectorRegisterImpl::max_slots_per_register - 1));\n+          const VMReg vm_reg_base = OptoReg::as_VMReg(opto_reg & ~(VectorRegister::max_slots_per_register - 1));\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/zBarrierSetAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -551,1 +551,1 @@\n-  dispatch_base(state, Interpreter::normal_table(state), Rs);\n+  dispatch_base(state, Interpreter::normal_table(state), true, false, Rs);\n@@ -555,1 +555,1 @@\n-  dispatch_base(state, Interpreter::normal_table(state), false, Rs);\n+  dispatch_base(state, Interpreter::normal_table(state), false, false, Rs);\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1126,1 +1126,1 @@\n-    sub(sp, sp, vector_size_in_bytes * VectorRegisterImpl::number_of_registers);\n+    sub(sp, sp, vector_size_in_bytes * VectorRegister::number_of_registers);\n@@ -1128,1 +1128,1 @@\n-    for (int i = 0; i < VectorRegisterImpl::number_of_registers; i += 8) {\n+    for (int i = 0; i < VectorRegister::number_of_registers; i += 8) {\n@@ -1140,1 +1140,1 @@\n-    for (int i = 0; i < VectorRegisterImpl::number_of_registers; i += 8) {\n+    for (int i = 0; i < VectorRegister::number_of_registers; i += 8) {\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-                       VectorRegisterImpl::max_slots_per_register;\n+                       VectorRegister::max_slots_per_register;\n","filename":"src\/hotspot\/cpu\/riscv\/registerMap_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,3 +29,3 @@\n-REGISTER_IMPL_DEFINITION(Register, RegisterImpl, RegisterImpl::number_of_registers);\n-REGISTER_IMPL_DEFINITION(FloatRegister, FloatRegisterImpl, FloatRegisterImpl::number_of_registers);\n-REGISTER_IMPL_DEFINITION(VectorRegister, VectorRegisterImpl, VectorRegisterImpl::number_of_registers);\n+Register::RegisterImpl             all_RegisterImpls      [Register::number_of_registers       + 1];\n+FloatRegister::FloatRegisterImpl   all_FloatRegisterImpls [FloatRegister::number_of_registers  + 1];\n+VectorRegister::VectorRegisterImpl all_VectorRegisterImpls[VectorRegister::number_of_registers + 1];\n@@ -33,13 +33,1 @@\n-const int ConcreteRegisterImpl::max_gpr = RegisterImpl::number_of_registers *\n-                                          RegisterImpl::max_slots_per_register;\n-\n-const int ConcreteRegisterImpl::max_fpr =\n-    ConcreteRegisterImpl::max_gpr +\n-    FloatRegisterImpl::number_of_registers * FloatRegisterImpl::max_slots_per_register;\n-\n-const int ConcreteRegisterImpl::max_vpr =\n-    ConcreteRegisterImpl::max_fpr +\n-    VectorRegisterImpl::number_of_registers * VectorRegisterImpl::max_slots_per_register;\n-\n-\n-const char* RegisterImpl::name() const {\n+const char* Register::RegisterImpl::name() const {\n@@ -55,1 +43,1 @@\n-const char* FloatRegisterImpl::name() const {\n+const char* FloatRegister::FloatRegisterImpl::name() const {\n@@ -65,1 +53,1 @@\n-const char* VectorRegisterImpl::name() const {\n+const char* VectorRegister::VectorRegisterImpl::name() const {\n","filename":"src\/hotspot\/cpu\/riscv\/register_riscv.cpp","additions":6,"deletions":18,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/powerOfTwo.hpp\"\n@@ -48,3 +49,3 @@\n-\/\/ Use Register as shortcut\n-class RegisterImpl;\n-typedef const RegisterImpl* Register;\n+class Register {\n+ private:\n+  int _encoding;\n@@ -52,4 +53,1 @@\n-inline constexpr Register as_Register(int encoding);\n-\n-class RegisterImpl: public AbstractRegisterImpl {\n-  static constexpr Register first();\n+  constexpr explicit Register(int encoding) : _encoding(encoding) {}\n@@ -68,2 +66,2 @@\n-  \/\/ derived registers, offsets, and addresses\n-  const Register successor() const { return this + 1; }\n+  class RegisterImpl: public AbstractRegisterImpl {\n+    friend class Register;\n@@ -71,2 +69,1 @@\n-  \/\/ construction\n-  inline friend constexpr Register as_Register(int encoding);\n+    static constexpr const RegisterImpl* first();\n@@ -74,1 +71,5 @@\n-  VMReg as_VMReg() const;\n+   public:\n+    \/\/ accessors\n+    int raw_encoding() const { return this - first(); }\n+    int encoding() const     { assert(is_valid(), \"invalid register\"); return raw_encoding(); }\n+    bool is_valid() const    { return 0 <= raw_encoding() && raw_encoding() < number_of_registers; }\n@@ -76,5 +77,4 @@\n-  \/\/ accessors\n-  int encoding() const            { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n-  int encoding_nocheck() const    { return this - first(); }\n-  bool is_valid() const           { return (unsigned)encoding_nocheck() < number_of_registers; }\n-  const char* name() const;\n+    \/\/ for rvc\n+    int compressed_raw_encoding() const {\n+      return raw_encoding() - compressed_register_base;\n+    }\n@@ -82,5 +82,4 @@\n-  \/\/ for rvc\n-  int compressed_encoding() const {\n-    assert(is_compressed_valid(), \"invalid compressed register\");\n-    return encoding() - compressed_register_base;\n-  }\n+    int compressed_encoding() const {\n+      assert(is_compressed_valid(), \"invalid compressed register\");\n+      return encoding() - compressed_register_base;\n+    }\n@@ -88,3 +87,4 @@\n-  int compressed_encoding_nocheck() const {\n-    return encoding_nocheck() - compressed_register_base;\n-  }\n+    bool is_compressed_valid() const {\n+      return raw_encoding() >= compressed_register_base &&\n+             raw_encoding() <= compressed_register_top;\n+    }\n@@ -92,4 +92,16 @@\n-  bool is_compressed_valid() const {\n-    return encoding_nocheck() >= compressed_register_base &&\n-           encoding_nocheck() <= compressed_register_top;\n-  }\n+    \/\/ derived registers, offsets, and addresses\n+    inline Register successor() const;\n+\n+    VMReg as_VMReg() const;\n+\n+    const char* name() const;\n+  };\n+\n+  inline friend constexpr Register as_Register(int encoding);\n+\n+  constexpr Register() : _encoding(-1) {} \/\/ noreg\n+\n+  int operator==(const Register r) const { return _encoding == r._encoding; }\n+  int operator!=(const Register r) const { return _encoding != r._encoding; }\n+\n+  const RegisterImpl* operator->() const { return RegisterImpl::first() + _encoding; }\n@@ -98,44 +110,53 @@\n-REGISTER_IMPL_DECLARATION(Register, RegisterImpl, RegisterImpl::number_of_registers);\n-\n-\/\/ The integer registers of the RISCV architecture\n-\n-CONSTANT_REGISTER_DECLARATION(Register, noreg, (-1));\n-\n-CONSTANT_REGISTER_DECLARATION(Register, x0,    (0));\n-CONSTANT_REGISTER_DECLARATION(Register, x1,    (1));\n-CONSTANT_REGISTER_DECLARATION(Register, x2,    (2));\n-CONSTANT_REGISTER_DECLARATION(Register, x3,    (3));\n-CONSTANT_REGISTER_DECLARATION(Register, x4,    (4));\n-CONSTANT_REGISTER_DECLARATION(Register, x5,    (5));\n-CONSTANT_REGISTER_DECLARATION(Register, x6,    (6));\n-CONSTANT_REGISTER_DECLARATION(Register, x7,    (7));\n-CONSTANT_REGISTER_DECLARATION(Register, x8,    (8));\n-CONSTANT_REGISTER_DECLARATION(Register, x9,    (9));\n-CONSTANT_REGISTER_DECLARATION(Register, x10,  (10));\n-CONSTANT_REGISTER_DECLARATION(Register, x11,  (11));\n-CONSTANT_REGISTER_DECLARATION(Register, x12,  (12));\n-CONSTANT_REGISTER_DECLARATION(Register, x13,  (13));\n-CONSTANT_REGISTER_DECLARATION(Register, x14,  (14));\n-CONSTANT_REGISTER_DECLARATION(Register, x15,  (15));\n-CONSTANT_REGISTER_DECLARATION(Register, x16,  (16));\n-CONSTANT_REGISTER_DECLARATION(Register, x17,  (17));\n-CONSTANT_REGISTER_DECLARATION(Register, x18,  (18));\n-CONSTANT_REGISTER_DECLARATION(Register, x19,  (19));\n-CONSTANT_REGISTER_DECLARATION(Register, x20,  (20));\n-CONSTANT_REGISTER_DECLARATION(Register, x21,  (21));\n-CONSTANT_REGISTER_DECLARATION(Register, x22,  (22));\n-CONSTANT_REGISTER_DECLARATION(Register, x23,  (23));\n-CONSTANT_REGISTER_DECLARATION(Register, x24,  (24));\n-CONSTANT_REGISTER_DECLARATION(Register, x25,  (25));\n-CONSTANT_REGISTER_DECLARATION(Register, x26,  (26));\n-CONSTANT_REGISTER_DECLARATION(Register, x27,  (27));\n-CONSTANT_REGISTER_DECLARATION(Register, x28,  (28));\n-CONSTANT_REGISTER_DECLARATION(Register, x29,  (29));\n-CONSTANT_REGISTER_DECLARATION(Register, x30,  (30));\n-CONSTANT_REGISTER_DECLARATION(Register, x31,  (31));\n-\n-\/\/ Use FloatRegister as shortcut\n-class FloatRegisterImpl;\n-typedef const FloatRegisterImpl* FloatRegister;\n-\n-inline constexpr FloatRegister as_FloatRegister(int encoding);\n+extern Register::RegisterImpl all_RegisterImpls[Register::number_of_registers + 1] INTERNAL_VISIBILITY;\n+\n+inline constexpr const Register::RegisterImpl* Register::RegisterImpl::first() {\n+  return all_RegisterImpls + 1;\n+}\n+\n+constexpr Register noreg = Register();\n+\n+inline constexpr Register as_Register(int encoding) {\n+  if (0 <= encoding && encoding < Register::number_of_registers) {\n+    return Register(encoding);\n+  }\n+  return noreg;\n+}\n+\n+inline Register Register::RegisterImpl::successor() const {\n+  assert(is_valid(), \"sanity\");\n+  return as_Register(encoding() + 1);\n+}\n+\n+\/\/ The integer registers of RISCV architecture\n+constexpr Register x0   = as_Register( 0);\n+constexpr Register x1   = as_Register( 1);\n+constexpr Register x2   = as_Register( 2);\n+constexpr Register x3   = as_Register( 3);\n+constexpr Register x4   = as_Register( 4);\n+constexpr Register x5   = as_Register( 5);\n+constexpr Register x6   = as_Register( 6);\n+constexpr Register x7   = as_Register( 7);\n+constexpr Register x8   = as_Register( 8);\n+constexpr Register x9   = as_Register( 9);\n+constexpr Register x10  = as_Register(10);\n+constexpr Register x11  = as_Register(11);\n+constexpr Register x12  = as_Register(12);\n+constexpr Register x13  = as_Register(13);\n+constexpr Register x14  = as_Register(14);\n+constexpr Register x15  = as_Register(15);\n+constexpr Register x16  = as_Register(16);\n+constexpr Register x17  = as_Register(17);\n+constexpr Register x18  = as_Register(18);\n+constexpr Register x19  = as_Register(19);\n+constexpr Register x20  = as_Register(20);\n+constexpr Register x21  = as_Register(21);\n+constexpr Register x22  = as_Register(22);\n+constexpr Register x23  = as_Register(23);\n+constexpr Register x24  = as_Register(24);\n+constexpr Register x25  = as_Register(25);\n+constexpr Register x26  = as_Register(26);\n+constexpr Register x27  = as_Register(27);\n+constexpr Register x28  = as_Register(28);\n+constexpr Register x29  = as_Register(29);\n+constexpr Register x30  = as_Register(30);\n+constexpr Register x31  = as_Register(31);\n@@ -144,2 +165,5 @@\n-class FloatRegisterImpl: public AbstractRegisterImpl {\n-  static constexpr FloatRegister first();\n+class FloatRegister {\n+ private:\n+  int _encoding;\n+\n+  constexpr explicit FloatRegister(int encoding) : _encoding(encoding) {}\n@@ -148,0 +172,2 @@\n+  inline friend constexpr FloatRegister as_FloatRegister(int encoding);\n+\n@@ -157,2 +183,2 @@\n-  \/\/ construction\n-  inline friend constexpr FloatRegister as_FloatRegister(int encoding);\n+  class FloatRegisterImpl: public AbstractRegisterImpl {\n+    friend class FloatRegister;\n@@ -160,1 +186,1 @@\n-  VMReg as_VMReg() const;\n+    static constexpr const FloatRegisterImpl* first();\n@@ -162,4 +188,5 @@\n-  \/\/ derived registers, offsets, and addresses\n-  FloatRegister successor() const {\n-    return as_FloatRegister((encoding() + 1) % (unsigned)number_of_registers);\n-  }\n+   public:\n+    \/\/ accessors\n+    int raw_encoding() const { return this - first(); }\n+    int encoding() const     { assert(is_valid(), \"invalid register\"); return raw_encoding(); }\n+    bool is_valid() const    { return 0 <= raw_encoding() && raw_encoding() < number_of_registers; }\n@@ -167,5 +194,4 @@\n-  \/\/ accessors\n-  int encoding() const            { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n-  int encoding_nocheck() const    { return this - first(); }\n-  int is_valid() const            { return (unsigned)encoding_nocheck() < number_of_registers; }\n-  const char* name() const;\n+    \/\/ for rvc\n+    int compressed_raw_encoding() const {\n+      return raw_encoding() - compressed_register_base;\n+    }\n@@ -173,5 +199,4 @@\n-  \/\/ for rvc\n-  int compressed_encoding() const {\n-    assert(is_compressed_valid(), \"invalid compressed register\");\n-    return encoding() - compressed_register_base;\n-  }\n+    int compressed_encoding() const {\n+      assert(is_compressed_valid(), \"invalid compressed register\");\n+      return encoding() - compressed_register_base;\n+    }\n@@ -179,3 +204,4 @@\n-  int compressed_encoding_nocheck() const {\n-    return encoding_nocheck() - compressed_register_base;\n-  }\n+    bool is_compressed_valid() const {\n+      return raw_encoding() >= compressed_register_base &&\n+             raw_encoding() <= compressed_register_top;\n+    }\n@@ -183,4 +209,14 @@\n-  bool is_compressed_valid() const {\n-    return encoding_nocheck() >= compressed_register_base &&\n-           encoding_nocheck() <= compressed_register_top;\n-  }\n+    \/\/ derived registers, offsets, and addresses\n+    inline FloatRegister successor() const;\n+\n+    VMReg as_VMReg() const;\n+\n+    const char* name() const;\n+  };\n+\n+  constexpr FloatRegister() : _encoding(-1) {} \/\/ fnoreg\n+\n+  int operator==(const FloatRegister r) const { return _encoding == r._encoding; }\n+  int operator!=(const FloatRegister r) const { return _encoding != r._encoding; }\n+\n+  const FloatRegisterImpl* operator->() const { return FloatRegisterImpl::first() + _encoding; }\n@@ -189,1 +225,1 @@\n-REGISTER_IMPL_DECLARATION(FloatRegister, FloatRegisterImpl, FloatRegisterImpl::number_of_registers);\n+extern FloatRegister::FloatRegisterImpl all_FloatRegisterImpls[FloatRegister::number_of_registers + 1] INTERNAL_VISIBILITY;\n@@ -191,1 +227,17 @@\n-\/\/ The float registers of the RISCV architecture\n+inline constexpr const FloatRegister::FloatRegisterImpl* FloatRegister::FloatRegisterImpl::first() {\n+  return all_FloatRegisterImpls + 1;\n+}\n+\n+constexpr FloatRegister fnoreg = FloatRegister();\n+\n+inline constexpr FloatRegister as_FloatRegister(int encoding) {\n+  if (0 <= encoding && encoding < FloatRegister::number_of_registers) {\n+    return FloatRegister(encoding);\n+  }\n+  return fnoreg;\n+}\n+\n+inline FloatRegister FloatRegister::FloatRegisterImpl::successor() const {\n+  assert(is_valid(), \"sanity\");\n+  return as_FloatRegister(encoding() + 1);\n+}\n@@ -193,40 +245,33 @@\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, fnoreg , (-1));\n-\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f0     , ( 0));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f1     , ( 1));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f2     , ( 2));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f3     , ( 3));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f4     , ( 4));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f5     , ( 5));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f6     , ( 6));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f7     , ( 7));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f8     , ( 8));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f9     , ( 9));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f10    , (10));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f11    , (11));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f12    , (12));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f13    , (13));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f14    , (14));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f15    , (15));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f16    , (16));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f17    , (17));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f18    , (18));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f19    , (19));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f20    , (20));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f21    , (21));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f22    , (22));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f23    , (23));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f24    , (24));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f25    , (25));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f26    , (26));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f27    , (27));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f28    , (28));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f29    , (29));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f30    , (30));\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, f31    , (31));\n-\n-\/\/ Use VectorRegister as shortcut\n-class VectorRegisterImpl;\n-typedef const VectorRegisterImpl* VectorRegister;\n-\n-inline constexpr VectorRegister as_VectorRegister(int encoding);\n+\/\/ The float registers of the RISCV architecture\n+constexpr FloatRegister f0     = as_FloatRegister( 0);\n+constexpr FloatRegister f1     = as_FloatRegister( 1);\n+constexpr FloatRegister f2     = as_FloatRegister( 2);\n+constexpr FloatRegister f3     = as_FloatRegister( 3);\n+constexpr FloatRegister f4     = as_FloatRegister( 4);\n+constexpr FloatRegister f5     = as_FloatRegister( 5);\n+constexpr FloatRegister f6     = as_FloatRegister( 6);\n+constexpr FloatRegister f7     = as_FloatRegister( 7);\n+constexpr FloatRegister f8     = as_FloatRegister( 8);\n+constexpr FloatRegister f9     = as_FloatRegister( 9);\n+constexpr FloatRegister f10    = as_FloatRegister(10);\n+constexpr FloatRegister f11    = as_FloatRegister(11);\n+constexpr FloatRegister f12    = as_FloatRegister(12);\n+constexpr FloatRegister f13    = as_FloatRegister(13);\n+constexpr FloatRegister f14    = as_FloatRegister(14);\n+constexpr FloatRegister f15    = as_FloatRegister(15);\n+constexpr FloatRegister f16    = as_FloatRegister(16);\n+constexpr FloatRegister f17    = as_FloatRegister(17);\n+constexpr FloatRegister f18    = as_FloatRegister(18);\n+constexpr FloatRegister f19    = as_FloatRegister(19);\n+constexpr FloatRegister f20    = as_FloatRegister(20);\n+constexpr FloatRegister f21    = as_FloatRegister(21);\n+constexpr FloatRegister f22    = as_FloatRegister(22);\n+constexpr FloatRegister f23    = as_FloatRegister(23);\n+constexpr FloatRegister f24    = as_FloatRegister(24);\n+constexpr FloatRegister f25    = as_FloatRegister(25);\n+constexpr FloatRegister f26    = as_FloatRegister(26);\n+constexpr FloatRegister f27    = as_FloatRegister(27);\n+constexpr FloatRegister f28    = as_FloatRegister(28);\n+constexpr FloatRegister f29    = as_FloatRegister(29);\n+constexpr FloatRegister f30    = as_FloatRegister(30);\n+constexpr FloatRegister f31    = as_FloatRegister(31);\n@@ -235,2 +280,4 @@\n-class VectorRegisterImpl: public AbstractRegisterImpl {\n-  static constexpr VectorRegister first();\n+class VectorRegister {\n+  int _encoding;\n+\n+  constexpr explicit VectorRegister(int encoding) : _encoding(encoding) {}\n@@ -239,0 +286,2 @@\n+  inline friend constexpr VectorRegister as_VectorRegister(int encoding);\n+\n@@ -244,2 +293,10 @@\n-  \/\/ construction\n-  inline friend constexpr VectorRegister as_VectorRegister(int encoding);\n+  class VectorRegisterImpl: public AbstractRegisterImpl {\n+    friend class VectorRegister;\n+\n+    static constexpr const VectorRegisterImpl* first();\n+\n+   public:\n+    \/\/ accessors\n+    int raw_encoding() const { return this - first(); }\n+    int encoding() const     { assert(is_valid(), \"invalid register\"); return raw_encoding(); }\n+    bool is_valid() const    { return 0 <= raw_encoding() && raw_encoding() < number_of_registers; }\n@@ -247,1 +304,2 @@\n-  VMReg as_VMReg() const;\n+    \/\/ derived registers, offsets, and addresses\n+    inline VectorRegister successor() const;\n@@ -249,2 +307,1 @@\n-  \/\/ derived registers, offsets, and addresses\n-  VectorRegister successor() const { return this + 1; }\n+    VMReg as_VMReg() const;\n@@ -252,5 +309,4 @@\n-  \/\/ accessors\n-  int encoding() const            { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n-  int encoding_nocheck() const    { return this - first(); }\n-  bool is_valid() const           { return (unsigned)encoding_nocheck() < number_of_registers; }\n-  const char* name() const;\n+    const char* name() const;\n+  };\n+\n+  constexpr VectorRegister() : _encoding(-1) {} \/\/ vnoreg\n@@ -258,0 +314,4 @@\n+  int operator==(const VectorRegister r) const { return _encoding == r._encoding; }\n+  int operator!=(const VectorRegister r) const { return _encoding != r._encoding; }\n+\n+  const VectorRegisterImpl* operator->() const { return VectorRegisterImpl::first() + _encoding; }\n@@ -260,1 +320,1 @@\n-REGISTER_IMPL_DECLARATION(VectorRegister, VectorRegisterImpl, VectorRegisterImpl::number_of_registers);\n+extern VectorRegister::VectorRegisterImpl all_VectorRegisterImpls[VectorRegister::number_of_registers + 1] INTERNAL_VISIBILITY;\n@@ -262,35 +322,12 @@\n-\/\/ The vector registers of RVV\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, vnoreg , (-1));\n-\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v0     , ( 0));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v1     , ( 1));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v2     , ( 2));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v3     , ( 3));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v4     , ( 4));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v5     , ( 5));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v6     , ( 6));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v7     , ( 7));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v8     , ( 8));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v9     , ( 9));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v10    , (10));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v11    , (11));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v12    , (12));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v13    , (13));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v14    , (14));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v15    , (15));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v16    , (16));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v17    , (17));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v18    , (18));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v19    , (19));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v20    , (20));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v21    , (21));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v22    , (22));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v23    , (23));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v24    , (24));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v25    , (25));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v26    , (26));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v27    , (27));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v28    , (28));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v29    , (29));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v30    , (30));\n-CONSTANT_REGISTER_DECLARATION(VectorRegister, v31    , (31));\n+inline constexpr const VectorRegister::VectorRegisterImpl* VectorRegister::VectorRegisterImpl::first() {\n+  return all_VectorRegisterImpls + 1;\n+}\n+\n+constexpr VectorRegister vnoreg = VectorRegister();\n+\n+inline constexpr VectorRegister as_VectorRegister(int encoding) {\n+  if (0 <= encoding && encoding < VectorRegister::number_of_registers) {\n+    return VectorRegister(encoding);\n+  }\n+  return vnoreg;\n+}\n@@ -298,0 +335,38 @@\n+inline VectorRegister VectorRegister::VectorRegisterImpl::successor() const {\n+  assert(is_valid(), \"sanity\");\n+  return as_VectorRegister(encoding() + 1);\n+}\n+\n+\/\/ The vector registers of RVV\n+constexpr VectorRegister v0     = as_VectorRegister( 0);\n+constexpr VectorRegister v1     = as_VectorRegister( 1);\n+constexpr VectorRegister v2     = as_VectorRegister( 2);\n+constexpr VectorRegister v3     = as_VectorRegister( 3);\n+constexpr VectorRegister v4     = as_VectorRegister( 4);\n+constexpr VectorRegister v5     = as_VectorRegister( 5);\n+constexpr VectorRegister v6     = as_VectorRegister( 6);\n+constexpr VectorRegister v7     = as_VectorRegister( 7);\n+constexpr VectorRegister v8     = as_VectorRegister( 8);\n+constexpr VectorRegister v9     = as_VectorRegister( 9);\n+constexpr VectorRegister v10    = as_VectorRegister(10);\n+constexpr VectorRegister v11    = as_VectorRegister(11);\n+constexpr VectorRegister v12    = as_VectorRegister(12);\n+constexpr VectorRegister v13    = as_VectorRegister(13);\n+constexpr VectorRegister v14    = as_VectorRegister(14);\n+constexpr VectorRegister v15    = as_VectorRegister(15);\n+constexpr VectorRegister v16    = as_VectorRegister(16);\n+constexpr VectorRegister v17    = as_VectorRegister(17);\n+constexpr VectorRegister v18    = as_VectorRegister(18);\n+constexpr VectorRegister v19    = as_VectorRegister(19);\n+constexpr VectorRegister v20    = as_VectorRegister(20);\n+constexpr VectorRegister v21    = as_VectorRegister(21);\n+constexpr VectorRegister v22    = as_VectorRegister(22);\n+constexpr VectorRegister v23    = as_VectorRegister(23);\n+constexpr VectorRegister v24    = as_VectorRegister(24);\n+constexpr VectorRegister v25    = as_VectorRegister(25);\n+constexpr VectorRegister v26    = as_VectorRegister(26);\n+constexpr VectorRegister v27    = as_VectorRegister(27);\n+constexpr VectorRegister v28    = as_VectorRegister(28);\n+constexpr VectorRegister v29    = as_VectorRegister(29);\n+constexpr VectorRegister v30    = as_VectorRegister(30);\n+constexpr VectorRegister v31    = as_VectorRegister(31);\n@@ -304,8 +379,9 @@\n-  \/\/ A big enough number for C2: all the registers plus flags\n-  \/\/ This number must be large enough to cover REG_COUNT (defined by c2) registers.\n-  \/\/ There is no requirement that any ordering here matches any ordering c2 gives\n-  \/\/ it's optoregs.\n-\n-    number_of_registers = (RegisterImpl::max_slots_per_register * RegisterImpl::number_of_registers +\n-                           FloatRegisterImpl::max_slots_per_register * FloatRegisterImpl::number_of_registers +\n-                           VectorRegisterImpl::max_slots_per_register * VectorRegisterImpl::number_of_registers)\n+    max_gpr = Register::number_of_registers * Register::max_slots_per_register,\n+    max_fpr = max_gpr + FloatRegister::number_of_registers * FloatRegister::max_slots_per_register,\n+    max_vpr = max_fpr + VectorRegister::number_of_registers * VectorRegister::max_slots_per_register,\n+\n+    \/\/ A big enough number for C2: all the registers plus flags\n+    \/\/ This number must be large enough to cover REG_COUNT (defined by c2) registers.\n+    \/\/ There is no requirement that any ordering here matches any ordering c2 gives\n+    \/\/ it's optoregs.\n+    number_of_registers = max_vpr \/\/ gpr\/fpr\/vpr\n@@ -313,5 +389,0 @@\n-\n-  \/\/ added to make it compile\n-  static const int max_gpr;\n-  static const int max_fpr;\n-  static const int max_vpr;\n@@ -324,0 +395,19 @@\n+\n+template <>\n+inline Register AbstractRegSet<Register>::first() {\n+  uint32_t first = _bitset & -_bitset;\n+  return first ? as_Register(exact_log2(first)) : noreg;\n+}\n+\n+template <>\n+inline FloatRegister AbstractRegSet<FloatRegister>::first() {\n+  uint32_t first = _bitset & -_bitset;\n+  return first ? as_FloatRegister(exact_log2(first)) : fnoreg;\n+}\n+\n+template<>\n+inline VectorRegister AbstractRegSet<VectorRegister>::first() {\n+  uint32_t first = _bitset & -_bitset;\n+  return first ? as_VectorRegister(exact_log2(first)) : vnoreg;\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/register_riscv.hpp","additions":292,"deletions":202,"binary":false,"changes":494,"status":"modified"},{"patch":"@@ -1455,1 +1455,1 @@\n-  int slots_of_int_registers = RegisterImpl::max_slots_per_register * (RegisterImpl::number_of_registers - 2);\n+  int slots_of_int_registers = Register::max_slots_per_register * (Register::number_of_registers - 2);\n@@ -1461,1 +1461,1 @@\n-  int slots_of_float_registers = FloatRegisterImpl::max_slots_per_register * FloatRegisterImpl::number_of_registers;\n+  int slots_of_float_registers = FloatRegister::max_slots_per_register * FloatRegister::number_of_registers;\n@@ -1467,1 +1467,1 @@\n-  int slots_of_vector_registers = VectorRegisterImpl::max_slots_per_register * VectorRegisterImpl::number_of_registers;\n+  int slots_of_vector_registers = VectorRegister::max_slots_per_register * VectorRegister::number_of_registers;\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-      f0_offset += Matcher::scalable_vector_reg_size(T_INT) * VectorRegisterImpl::number_of_registers *\n+      f0_offset += Matcher::scalable_vector_reg_size(T_INT) * VectorRegister::number_of_registers *\n@@ -122,2 +122,2 @@\n-           FloatRegisterImpl::max_slots_per_register *\n-           FloatRegisterImpl::number_of_registers *\n+           FloatRegister::max_slots_per_register *\n+           FloatRegister::number_of_registers *\n@@ -138,2 +138,2 @@\n-           (RegisterImpl::number_of_registers - 3) *\n-           RegisterImpl::max_slots_per_register *\n+           (Register::number_of_registers - 3) *\n+           Register::max_slots_per_register *\n@@ -181,1 +181,1 @@\n-    for (int i = 0; i < VectorRegisterImpl::number_of_registers; i++, sp_offset_in_slots += step_in_slots) {\n+    for (int i = 0; i < VectorRegister::number_of_registers; i++, sp_offset_in_slots += step_in_slots) {\n@@ -187,2 +187,2 @@\n-  step_in_slots = FloatRegisterImpl::max_slots_per_register;\n-  for (int i = 0; i < FloatRegisterImpl::number_of_registers; i++, sp_offset_in_slots += step_in_slots) {\n+  step_in_slots = FloatRegister::max_slots_per_register;\n+  for (int i = 0; i < FloatRegister::number_of_registers; i++, sp_offset_in_slots += step_in_slots) {\n@@ -193,1 +193,1 @@\n-  step_in_slots = RegisterImpl::max_slots_per_register;\n+  step_in_slots = Register::max_slots_per_register;\n@@ -196,1 +196,1 @@\n-  sp_offset_in_slots += RegisterImpl::max_slots_per_register * 3;\n+  sp_offset_in_slots += Register::max_slots_per_register * 3;\n@@ -198,1 +198,1 @@\n-  for (int i = 7; i < RegisterImpl::number_of_registers; i++, sp_offset_in_slots += step_in_slots) {\n+  for (int i = 7; i < Register::number_of_registers; i++, sp_offset_in_slots += step_in_slots) {\n@@ -245,2 +245,2 @@\n-\/\/ and VMRegImpl::stack0+1 refers to the memory word 4-byes higher.  Register\n-\/\/ up to RegisterImpl::number_of_registers) are the 64-bit\n+\/\/ and VMRegImpl::stack0+1 refers to the memory word 4-byes higher.\n+\/\/ Register up to Register::number_of_registers) are the 64-bit\n@@ -1371,3 +1371,3 @@\n-  bool reg_destroyed[RegisterImpl::number_of_registers];\n-  bool freg_destroyed[FloatRegisterImpl::number_of_registers];\n-  for ( int r = 0 ; r < RegisterImpl::number_of_registers ; r++ ) {\n+  bool reg_destroyed[Register::number_of_registers];\n+  bool freg_destroyed[FloatRegister::number_of_registers];\n+  for ( int r = 0 ; r < Register::number_of_registers ; r++ ) {\n@@ -1376,1 +1376,1 @@\n-  for ( int f = 0 ; f < FloatRegisterImpl::number_of_registers ; f++ ) {\n+  for ( int f = 0 ; f < FloatRegister::number_of_registers ; f++ ) {\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2938,2 +2938,2 @@\n-      Register reg = c_rarg0;\n-      Pa_base = reg;       \/\/ Argument registers\n+      RegSetIterator<Register> regs = RegSet::range(x10, x26).begin();\n+      Pa_base = *regs;       \/\/ Argument registers\n@@ -2943,1 +2943,1 @@\n-        Pb_base = ++reg;\n+        Pb_base = *++regs;\n@@ -2945,4 +2945,4 @@\n-      Pn_base = ++reg;\n-      Rlen= ++reg;\n-      inv = ++reg;\n-      Pm_base = ++reg;\n+      Pn_base = *++regs;\n+      Rlen= *++regs;\n+      inv = *++regs;\n+      Pm_base = *++regs;\n@@ -2951,4 +2951,4 @@\n-      Ra =  ++reg;      \/\/ The current digit of a, b, n, and m.\n-      Rb =  ++reg;\n-      Rm =  ++reg;\n-      Rn =  ++reg;\n+      Ra =  *++regs;    \/\/ The current digit of a, b, n, and m.\n+      Rb =  *++regs;\n+      Rm =  *++regs;\n+      Rn =  *++regs;\n@@ -2956,4 +2956,4 @@\n-      Pa =  ++reg;      \/\/ Pointers to the current\/next digit of a, b, n, and m.\n-      Pb =  ++reg;\n-      Pm =  ++reg;\n-      Pn =  ++reg;\n+      Pa =  *++regs;      \/\/ Pointers to the current\/next digit of a, b, n, and m.\n+      Pb =  *++regs;\n+      Pm =  *++regs;\n+      Pn =  *++regs;\n@@ -2961,3 +2961,3 @@\n-      tmp0 =  ++reg;    \/\/ Three registers which form a\n-      tmp1 =  ++reg;    \/\/ triple-precision accumuator.\n-      tmp2 =  ++reg;\n+      tmp0 =  *++regs;    \/\/ Three registers which form a\n+      tmp1 =  *++regs;    \/\/ triple-precision accumuator.\n+      tmp2 =  *++regs;\n@@ -2974,1 +2974,1 @@\n-      _toSave = RegSet::range(x18, reg) + Pm_base;\n+      _toSave = RegSet::range(x18, *regs) + Pm_base;\n@@ -3230,1 +3230,2 @@\n-      assert(tmp1 < x28 && tmp2 < x28, \"register corruption\");\n+      assert(tmp1->encoding() < x28->encoding(), \"register corruption\");\n+      assert(tmp2->encoding() < x28->encoding(), \"register corruption\");\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":21,"deletions":20,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-    for (int j = 0 ; j < RegisterImpl::max_slots_per_register ; j++) {\n+    for (int j = 0 ; j < Register::max_slots_per_register ; j++) {\n@@ -42,1 +42,1 @@\n-    for (int j = 0 ; j < FloatRegisterImpl::max_slots_per_register ; j++) {\n+    for (int j = 0 ; j < FloatRegister::max_slots_per_register ; j++) {\n@@ -50,1 +50,1 @@\n-    for (int j = 0 ; j < VectorRegisterImpl::max_slots_per_register ; j++) {\n+    for (int j = 0 ; j < VectorRegister::max_slots_per_register ; j++) {\n","filename":"src\/hotspot\/cpu\/riscv\/vmreg_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  return ::as_Register(value() \/ RegisterImpl::max_slots_per_register);\n+  return ::as_Register(value() \/ Register::max_slots_per_register);\n@@ -49,1 +49,1 @@\n-                            FloatRegisterImpl::max_slots_per_register);\n+                            FloatRegister::max_slots_per_register);\n@@ -53,1 +53,1 @@\n-  assert(is_VectorRegister() && ((value() & (VectorRegisterImpl::max_slots_per_register - 1)) == 0), \"must be\");\n+  assert(is_VectorRegister() && ((value() & (VectorRegister::max_slots_per_register - 1)) == 0), \"must be\");\n@@ -55,1 +55,1 @@\n-                             VectorRegisterImpl::max_slots_per_register);\n+                             VectorRegister::max_slots_per_register);\n@@ -62,1 +62,1 @@\n-    return (base % VectorRegisterImpl::max_slots_per_register) == 0;\n+    return (base % VectorRegister::max_slots_per_register) == 0;\n","filename":"src\/hotspot\/cpu\/riscv\/vmreg_riscv.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,5 +29,2 @@\n-inline VMReg RegisterImpl::as_VMReg() const {\n-  if (this == noreg) {\n-    return VMRegImpl::Bad();\n-  }\n-  return VMRegImpl::as_VMReg(encoding() * RegisterImpl::max_slots_per_register);\n+inline VMReg Register::RegisterImpl::as_VMReg() const {\n+  return VMRegImpl::as_VMReg(encoding() * Register::max_slots_per_register);\n@@ -36,2 +33,2 @@\n-inline VMReg FloatRegisterImpl::as_VMReg() const {\n-  return VMRegImpl::as_VMReg((encoding() * FloatRegisterImpl::max_slots_per_register) +\n+inline VMReg FloatRegister::FloatRegister::FloatRegisterImpl::as_VMReg() const {\n+  return VMRegImpl::as_VMReg((encoding() * FloatRegister::max_slots_per_register) +\n@@ -41,2 +38,2 @@\n-inline VMReg VectorRegisterImpl::as_VMReg() const {\n-  return VMRegImpl::as_VMReg((encoding() * VectorRegisterImpl::max_slots_per_register) +\n+inline VMReg VectorRegister::VectorRegisterImpl::as_VMReg() const {\n+  return VMRegImpl::as_VMReg((encoding() * VectorRegister::max_slots_per_register) +\n","filename":"src\/hotspot\/cpu\/riscv\/vmreg_riscv.inline.hpp","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"}]}