{"files":[{"patch":"@@ -0,0 +1,229 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8263043\n+ * @summary Add test to verify order of tag output\n+ * @library \/tools\/lib ..\/..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build toolbox.ToolBox javadoc.tester.*\n+ * @run main TestTagOrder\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+\/**\n+ * Tests the order of the output of block tags in the generated output.\n+ * There is a default order, embodied in the order of declaration of tags in\n+ * {@code TagletManager}, but this can be overridden on the command line by\n+ * specifying {@code -tag} options in the desired order.\n+ *\/\n+public class TestTagOrder extends JavadocTester {\n+    public static void main(String... args) throws Exception {\n+        TestTagOrder tester = new TestTagOrder();\n+        tester.runTests(m -> new Object[] { Path.of(m.getName()) });\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+    Path src = Path.of(\"src\");\n+    Map<String, String> expectMethod = new LinkedHashMap<>();\n+    Map<String, String> expectClass = new LinkedHashMap<>();\n+\n+    TestTagOrder() throws IOException {\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    \/** Class C1. *\/\n+                    public class C1 {\n+                        \/**\n+                         * This is method m.\n+                         * @param p1 first parameter\n+                         * @param p2 second parameter\n+                         * @return zero\n+                         * @throws IllegalArgumentException well, never\n+                         * @since 1.0\n+                         * @see <a href=\"http:\/\/example.com\">example<\/a>\n+                         *\/\n+                        public int m(int p1, int p2) throws IllegalArgumentException {\n+                            return 0;\n+                        }\n+                    }\n+                    \"\"\", \"\"\"\n+                    package p;\n+                    \/** \n+                     * Class C2.\n+                     * @since 1.0\n+                     * @author J. Duke.\n+                     * @version 2.0 \n+                     * @see <a href=\"http:\/\/example.com\">example<\/a>\n+                     *\/\n+                    public class C2 { } \n+                    \"\"\");\n+\n+        \/\/ The following add map entries in the default order of appearance in the output.\n+        \/\/ Note that the list is not otherwise ordered, such as alphabetically.\n+\n+        expectMethod.put(\"@param\", \"\"\"\n+                <dt>Parameters:<\/dt>\n+                <dd><code>p1<\/code> - first parameter<\/dd>\n+                <dd><code>p2<\/code> - second parameter<\/dd>\n+                \"\"\");\n+\n+        expectMethod.put(\"@return\", \"\"\"\n+                <dt>Returns:<\/dt>\n+                <dd>zero<\/dd>\n+                \"\"\");\n+\n+        expectMethod.put(\"@throws\", \"\"\"\n+                <dt>Throws:<\/dt>\n+                <dd><code>java.lang.IllegalArgumentException<\/code> - well, never<\/dd>\n+                \"\"\");\n+\n+        expectMethod.put(\"@since\", \"\"\"\n+                <dt>Since:<\/dt>\n+                <dd>1.0<\/dd>\n+                \"\"\");\n+\n+        expectMethod.put(\"@see\", \"\"\"\n+                <dt>See Also:<\/dt>\n+                <dd><a href=\"http:\/\/example.com\">example<\/a><\/dd>\n+                \"\"\");\n+\n+        expectClass.put(\"@since\", \"\"\"\n+                <dt>Since:<\/dt>\n+                <dd>1.0<\/dd>\n+                \"\"\");\n+\n+        expectClass.put(\"@version\", \"\"\"\n+                <dt>Version:<\/dt>\n+                <dd>2.0<\/dd>\n+                \"\"\");\n+\n+        expectClass.put(\"@author\", \"\"\"\n+                <dt>Author:<\/dt>\n+                <dd>J. Duke.<\/dd>\n+                \"\"\");\n+\n+        expectClass.put(\"@see\", \"\"\"\n+                <dt>See Also:<\/dt>\n+                <dd><a href=\"http:\/\/example.com\">example<\/a><\/dd>\n+                \"\"\");\n+    }\n+\n+    @Test\n+    public void testDefault(Path base) {\n+        test(base, null);\n+    }\n+\n+    @Test\n+    public void testAlpha(Path base) {\n+        test(base, Comparator.naturalOrder());\n+    }\n+\n+    @Test\n+    public void testReverse(Path base) {\n+        test(base, Comparator.reverseOrder());\n+    }\n+\n+    private void test(Path base, Comparator<String> c) {\n+        List<String> args = new ArrayList<>();\n+        args.addAll(List.of(\n+                \"-d\", base.resolve(\"out\").toString(),\n+                \"--source-path\", src.toString(),\n+                \"--no-platform-links\",\n+                \"-author\",\n+                \"-version\"));\n+        args.addAll(getTagArgs(c, expectMethod, expectClass));\n+        args.add(\"p\");\n+\n+        javadoc(args.toArray(new String[0]));\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"p\/C1.html\", true,\n+                \"<dl class=\\\"notes\\\">\\n\"\n+                        + getExpectString(c, expectMethod)\n+                        + \"<\/dl>\");\n+\n+        checkOutput(\"p\/C2.html\", true,\n+                \"<dl class=\\\"notes\\\">\\n\"\n+                        + getExpectString(c, expectClass)\n+                        + \"<\/dl>\");\n+    }\n+\n+    \/**\n+     * Returns a series of {@code -tag} options derived from the keys of a series of maps,\n+     * sorted according to the given comparator, or an empty list if the comparator is {@code null}.\n+     *\n+     * @param c      the comparator, or {@code null}\n+     * @param expect the maps from which to infer the options\n+     *\n+     * @return the list of options\n+     *\/\n+    @SafeVarargs\n+    private List<String> getTagArgs(Comparator<String> c, Map<String, String>... expect) {\n+        if (c == null) {\n+            return List.of();\n+        }\n+\n+        SortedSet<String> allTags = new TreeSet<>(c);\n+        for (Map<String, String> e : expect) {\n+            allTags.addAll(e.keySet());\n+        }\n+        List<String> args = new ArrayList<>();\n+        allTags.forEach(t -> { args.add(\"-tag\"); args.add(t.substring(1)); });\n+        return args;\n+    }\n+\n+    \/**\n+     * Returns the \"expected string\" derived from the values of a map, sorted according\n+     * to the keys of the map with a given comparator if the comparator is not {@code null}.\n+     *\n+     * @param c      the comparator, or {@code null}\n+     * @param expect the map\n+     *\n+     * @return the \"expected string\"\n+     *\/\n+    private String getExpectString(Comparator<String> c, Map<String, String> expect) {\n+        Map<String, String> e;\n+        if (c == null) {\n+            e = expect;\n+        } else {\n+            e = new TreeMap<>(c);\n+            e.putAll(expect);\n+        }\n+        return String.join(\"\", e.values());\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testTagOrder\/TestTagOrder.java","additions":229,"deletions":0,"binary":false,"changes":229,"status":"added"}]}