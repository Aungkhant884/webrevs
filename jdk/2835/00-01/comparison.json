{"files":[{"patch":"@@ -41,1 +41,1 @@\n-import java.util.SortedMap;\n+import java.util.SortedSet;\n@@ -43,0 +43,1 @@\n+import java.util.TreeSet;\n@@ -49,2 +50,2 @@\n- * There is a default order, embodies in the order of declaration of tags in\n- * {@code Tagl;etManager}, but this can be overridden on the command line by\n+ * There is a default order, embodied in the order of declaration of tags in\n+ * {@code TagletManager}, but this can be overridden on the command line by\n@@ -61,1 +62,2 @@\n-    Map<String, String> expect = new LinkedHashMap<>();\n+    Map<String, String> expectMethod = new LinkedHashMap<>();\n+    Map<String, String> expectClass = new LinkedHashMap<>();\n@@ -67,2 +69,2 @@\n-                    \/** Class C. *\/\n-                    public class C {\n+                    \/** Class C1. *\/\n+                    public class C1 {\n@@ -82,0 +84,10 @@\n+                    \"\"\", \"\"\"\n+                    package p;\n+                    \/** \n+                     * Class C2.\n+                     * @since 1.0\n+                     * @author J. Duke.\n+                     * @version 2.0 \n+                     * @see <a href=\"http:\/\/example.com\">example<\/a>\n+                     *\/\n+                    public class C2 { } \n@@ -84,1 +96,1 @@\n-        \/\/ The following adds map entries in the default order of appearance in the output.\n+        \/\/ The following add map entries in the default order of appearance in the output.\n@@ -87,1 +99,1 @@\n-        expect.put(\"@param\", \"\"\"\n+        expectMethod.put(\"@param\", \"\"\"\n@@ -93,1 +105,1 @@\n-        expect.put(\"@return\", \"\"\"\n+        expectMethod.put(\"@return\", \"\"\"\n@@ -98,1 +110,1 @@\n-        expect.put(\"@throws\", \"\"\"\n+        expectMethod.put(\"@throws\", \"\"\"\n@@ -103,1 +115,1 @@\n-        expect.put(\"@since\", \"\"\"\n+        expectMethod.put(\"@since\", \"\"\"\n@@ -108,1 +120,21 @@\n-        expect.put(\"@see\", \"\"\"\n+        expectMethod.put(\"@see\", \"\"\"\n+                <dt>See Also:<\/dt>\n+                <dd><a href=\"http:\/\/example.com\">example<\/a><\/dd>\n+                \"\"\");\n+\n+        expectClass.put(\"@since\", \"\"\"\n+                <dt>Since:<\/dt>\n+                <dd>1.0<\/dd>\n+                \"\"\");\n+\n+        expectClass.put(\"@version\", \"\"\"\n+                <dt>Version:<\/dt>\n+                <dd>2.0<\/dd>\n+                \"\"\");\n+\n+        expectClass.put(\"@author\", \"\"\"\n+                <dt>Author:<\/dt>\n+                <dd>J. Duke.<\/dd>\n+                \"\"\");\n+\n+        expectClass.put(\"@see\", \"\"\"\n@@ -116,10 +148,1 @@\n-        javadoc(\"-d\", base.resolve(\"out\").toString(),\n-                \"--source-path\", src.toString(),\n-                \"--no-platform-links\",\n-                \"p\");\n-        checkExit(Exit.OK);\n-\n-        checkOutput(\"p\/C.html\", true,\n-                \"<dl class=\\\"notes\\\">\\n\"\n-                + String.join(\"\", expect.values())\n-                + \"<\/dl>\");\n+        test(base, null);\n@@ -130,18 +153,1 @@\n-        List<String> args = new ArrayList<>();\n-        args.addAll(List.of(\n-                \"-d\", base.resolve(\"out\").toString(),\n-                \"--source-path\", src.toString(),\n-                \"--no-platform-links\"));\n-\n-        SortedMap<String, String> e = new TreeMap<>(Comparator.naturalOrder());\n-        e.putAll(expect);\n-        e.keySet().forEach(t -> { args.add(\"-tag\"); args.add(t.substring(1)); });\n-        args.add(\"p\");\n-\n-        javadoc(args.toArray(new String[args.size()]));\n-        checkExit(Exit.OK);\n-\n-        checkOutput(\"p\/C.html\", true,\n-                \"<dl class=\\\"notes\\\">\\n\"\n-                        + String.join(\"\", e.values())\n-                        + \"<\/dl>\");\n+        test(base, Comparator.naturalOrder());\n@@ -152,0 +158,4 @@\n+        test(base, Comparator.reverseOrder());\n+    }\n+\n+    private void test(Path base, Comparator<String> c) {\n@@ -156,5 +166,4 @@\n-                \"--no-platform-links\"));\n-\n-        SortedMap<String, String> e = new TreeMap<>(Comparator.reverseOrder());\n-        e.putAll(expect);\n-        e.keySet().forEach(t -> { args.add(\"-tag\"); args.add(t.substring(1)); });\n+                \"--no-platform-links\",\n+                \"-author\",\n+                \"-version\"));\n+        args.addAll(getTagArgs(c, expectMethod, expectClass));\n@@ -163,1 +172,1 @@\n-        javadoc(args.toArray(new String[args.size()]));\n+        javadoc(args.toArray(new String[0]));\n@@ -166,1 +175,6 @@\n-        checkOutput(\"p\/C.html\", true,\n+        checkOutput(\"p\/C1.html\", true,\n+                \"<dl class=\\\"notes\\\">\\n\"\n+                        + getExpectString(c, expectMethod)\n+                        + \"<\/dl>\");\n+\n+        checkOutput(\"p\/C2.html\", true,\n@@ -168,1 +182,1 @@\n-                        + String.join(\"\", e.values())\n+                        + getExpectString(c, expectClass)\n@@ -171,0 +185,44 @@\n+\n+    \/**\n+     * Returns a series of {@code -tag} options derived from the keys of a series of maps,\n+     * sorted according to the given comparator, or an empty list if the comparator is {@code null}.\n+     *\n+     * @param c      the comparator, or {@code null}\n+     * @param expect the maps from which to infer the options\n+     *\n+     * @return the list of options\n+     *\/\n+    @SafeVarargs\n+    private List<String> getTagArgs(Comparator<String> c, Map<String, String>... expect) {\n+        if (c == null) {\n+            return List.of();\n+        }\n+\n+        SortedSet<String> allTags = new TreeSet<>(c);\n+        for (Map<String, String> e : expect) {\n+            allTags.addAll(e.keySet());\n+        }\n+        List<String> args = new ArrayList<>();\n+        allTags.forEach(t -> { args.add(\"-tag\"); args.add(t.substring(1)); });\n+        return args;\n+    }\n+\n+    \/**\n+     * Returns the \"expected string\" derived from the values of a map, sorted according\n+     * to the keys of the map with a given comparator if the comparator is not {@code null}.\n+     *\n+     * @param c      the comparator, or {@code null}\n+     * @param expect the map\n+     *\n+     * @return the \"expected string\"\n+     *\/\n+    private String getExpectString(Comparator<String> c, Map<String, String> expect) {\n+        Map<String, String> e;\n+        if (c == null) {\n+            e = expect;\n+        } else {\n+            e = new TreeMap<>(c);\n+            e.putAll(expect);\n+        }\n+        return String.join(\"\", e.values());\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testTagOrder\/TestTagOrder.java","additions":106,"deletions":48,"binary":false,"changes":154,"status":"modified"}]}