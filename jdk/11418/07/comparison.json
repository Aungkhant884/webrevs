{"files":[{"patch":"@@ -39,1 +39,1 @@\n-     * Try to receieve another message or notification.\n+     * Try to receive another message or notification.\n","filename":"src\/jdk.sctp\/share\/classes\/com\/sun\/nio\/sctp\/HandlerResult.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.io.Serial;\n+\n@@ -35,0 +37,1 @@\n+    @Serial\n","filename":"src\/jdk.sctp\/share\/classes\/com\/sun\/nio\/sctp\/IllegalReceiveException.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.io.Serial;\n+\n@@ -35,0 +37,1 @@\n+    @Serial\n","filename":"src\/jdk.sctp\/share\/classes\/com\/sun\/nio\/sctp\/IllegalUnbindException.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.io.Serial;\n+\n@@ -34,0 +36,1 @@\n+    @Serial\n","filename":"src\/jdk.sctp\/share\/classes\/com\/sun\/nio\/sctp\/InvalidStreamException.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-public class SctpStandardSocketOptions {\n+public final class SctpStandardSocketOptions {\n@@ -44,1 +44,1 @@\n-     * fragmentation will be performed. Instead if a message being sent\n+     * fragmentation will be performed. Instead, if a message being sent\n@@ -52,2 +52,2 @@\n-        SctpStdSocketOption<Boolean>(\"SCTP_DISABLE_FRAGMENTS\", Boolean.class,\n-        sun.nio.ch.sctp.SctpStdSocketOption.SCTP_DISABLE_FRAGMENTS);\n+        SctpStdSocketOption<>(\"SCTP_DISABLE_FRAGMENTS\", Boolean.class,\n+        SctpStdSocketOption.SCTP_DISABLE_FRAGMENTS);\n@@ -71,2 +71,2 @@\n-        SctpStdSocketOption<Boolean>(\"SCTP_EXPLICIT_COMPLETE\", Boolean.class,\n-        sun.nio.ch.sctp.SctpStdSocketOption.SCTP_EXPLICIT_COMPLETE);\n+        SctpStdSocketOption<>(\"SCTP_EXPLICIT_COMPLETE\", Boolean.class,\n+        SctpStdSocketOption.SCTP_EXPLICIT_COMPLETE);\n@@ -121,1 +121,1 @@\n-            new SctpStdSocketOption<Integer>(\"SCTP_FRAGMENT_INTERLEAVE\",\n+            new SctpStdSocketOption<>(\"SCTP_FRAGMENT_INTERLEAVE\",\n@@ -123,1 +123,1 @@\n-                  sun.nio.ch.sctp.SctpStdSocketOption.SCTP_FRAGMENT_INTERLEAVE);\n+                  SctpStdSocketOption.SCTP_FRAGMENT_INTERLEAVE);\n@@ -161,1 +161,1 @@\n-        new SctpStdSocketOption<SctpStandardSocketOptions.InitMaxStreams>(\n+        new SctpStdSocketOption<>(\n@@ -173,2 +173,2 @@\n-        new SctpStdSocketOption<Boolean>(\"SCTP_NODELAY\", Boolean.class,\n-        sun.nio.ch.sctp.SctpStdSocketOption.SCTP_NODELAY);\n+        new SctpStdSocketOption<>(\"SCTP_NODELAY\", Boolean.class,\n+        SctpStdSocketOption.SCTP_NODELAY);\n@@ -194,1 +194,1 @@\n-            new SctpStdSocketOption<SocketAddress>\n+            new SctpStdSocketOption<>\n@@ -219,1 +219,1 @@\n-            new SctpStdSocketOption<SocketAddress>\n+            new SctpStdSocketOption<>\n@@ -248,2 +248,2 @@\n-        new SctpStdSocketOption<Integer>(\"SO_SNDBUF\", Integer.class,\n-        sun.nio.ch.sctp.SctpStdSocketOption.SO_SNDBUF);\n+        new SctpStdSocketOption<>(\"SO_SNDBUF\", Integer.class,\n+        SctpStdSocketOption.SO_SNDBUF);\n@@ -275,2 +275,2 @@\n-        new SctpStdSocketOption<Integer>(\"SO_RCVBUF\", Integer.class,\n-        sun.nio.ch.sctp.SctpStdSocketOption.SO_RCVBUF);\n+        new SctpStdSocketOption<>(\"SO_RCVBUF\", Integer.class,\n+        SctpStdSocketOption.SO_RCVBUF);\n@@ -306,2 +306,2 @@\n-        new SctpStdSocketOption<Integer>(\"SO_LINGER\", Integer.class,\n-        sun.nio.ch.sctp.SctpStdSocketOption.SO_LINGER);\n+        new SctpStdSocketOption<>(\"SO_LINGER\", Integer.class,\n+        SctpStdSocketOption.SO_LINGER);\n@@ -319,2 +319,2 @@\n-        private int maxInStreams;\n-        private int maxOutStreams;\n+        private final int maxInStreams;\n+        private final int maxOutStreams;\n@@ -381,5 +381,3 @@\n-            StringBuilder sb = new StringBuilder();\n-            sb.append(super.toString()).append(\" [\");\n-            sb.append(\"maxInStreams:\").append(maxInStreams);\n-            sb.append(\"maxOutStreams:\").append(maxOutStreams).append(\"]\");\n-            return sb.toString();\n+            return super.toString() + \" [\" +\n+                    \"maxInStreams:\" + maxInStreams +\n+                    \"maxOutStreams:\" + maxOutStreams + \"]\";\n@@ -401,5 +399,3 @@\n-            if (obj != null && obj instanceof InitMaxStreams) {\n-                InitMaxStreams that = (InitMaxStreams) obj;\n-                if (this.maxInStreams == that.maxInStreams &&\n-                    this.maxOutStreams == that.maxOutStreams)\n-                    return true;\n+            if (obj instanceof InitMaxStreams that) {\n+                return this.maxInStreams == that.maxInStreams &&\n+                        this.maxOutStreams == that.maxOutStreams;\n","filename":"src\/jdk.sctp\/share\/classes\/com\/sun\/nio\/sctp\/SctpStandardSocketOptions.java","additions":27,"deletions":31,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * Typically this is because the association has been shutdown with unsent data\n+ * Typically, this is because the association has been shutdown with unsent data\n@@ -84,1 +84,1 @@\n-     * Returns the stream number that the messge was to be sent on.\n+     * Returns the stream number that the message was to be sent on.\n","filename":"src\/jdk.sctp\/share\/classes\/com\/sun\/nio\/sctp\/SendFailedNotification.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -159,10 +159,8 @@\n-        StringBuilder sb = new StringBuilder(super.toString());\n-        sb.append( \"[Address: \").append(address)\n-          .append(\", Association: \").append(association)\n-          .append(\", Assoc ID: \").append(assocId)\n-          .append(\", Bytes: \").append(bytes)\n-          .append(\", Stream Number: \").append(streamNumber)\n-          .append(\", Complete: \").append(complete)\n-          .append(\", isUnordered: \").append(unordered)\n-          .append(\"]\");\n-        return sb.toString();\n+        return super.toString() + \"[Address: \" + address +\n+                \", Association: \" + association +\n+                \", Assoc ID: \" + assocId +\n+                \", Bytes: \" + bytes +\n+                \", Stream Number: \" + streamNumber +\n+                \", Complete: \" + complete +\n+                \", isUnordered: \" + unordered +\n+                \"]\";\n","filename":"src\/jdk.sctp\/share\/classes\/sun\/nio\/ch\/sctp\/MessageInfoImpl.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-public class SctpStdSocketOption<T>\n+public final class SctpStdSocketOption<T>\n@@ -46,1 +46,1 @@\n-    private int constValue;\n+    private final int constValue;\n@@ -49,2 +49,1 @@\n-        this.name = name;\n-        this.type = type;\n+        this(name, type, 0);\n","filename":"src\/jdk.sctp\/share\/classes\/sun\/nio\/ch\/sctp\/SctpStdSocketOption.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    \/* assocId is used to lookup the association before the notification is\n+    \/* assocId is used to look up the association before the notification is\n@@ -48,4 +48,4 @@\n-    private int assocId;\n-    private AssocChangeEvent event;\n-    private int maxOutStreams;\n-    private int maxInStreams;\n+    private final int assocId;\n+    private final AssocChangeEvent event;\n+    private final int maxOutStreams;\n+    private final int maxInStreams;\n@@ -58,20 +58,9 @@\n-        switch (intEvent) {\n-            case SCTP_COMM_UP :\n-                this.event = AssocChangeEvent.COMM_UP;\n-                break;\n-            case SCTP_COMM_LOST :\n-                this.event = AssocChangeEvent.COMM_LOST;\n-                break;\n-            case SCTP_RESTART :\n-                this.event = AssocChangeEvent.RESTART;\n-                break;\n-            case SCTP_SHUTDOWN :\n-                this.event = AssocChangeEvent.SHUTDOWN;\n-                break;\n-            case SCTP_CANT_START :\n-                this.event = AssocChangeEvent.CANT_START;\n-                break;\n-            default :\n-                throw new AssertionError(\n-                      \"Unknown Association Change Event type: \" + intEvent);\n-        }\n+        this.event = switch (intEvent) {\n+            case SCTP_COMM_UP    -> AssocChangeEvent.COMM_UP;\n+            case SCTP_COMM_LOST  -> AssocChangeEvent.COMM_LOST;\n+            case SCTP_RESTART    -> AssocChangeEvent.RESTART;\n+            case SCTP_SHUTDOWN   -> AssocChangeEvent.SHUTDOWN;\n+            case SCTP_CANT_START -> AssocChangeEvent.CANT_START;\n+            default -> throw new AssertionError(\n+                    \"Unknown Association Change Event type: \" + intEvent);\n+        };\n@@ -115,5 +104,3 @@\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(super.toString()).append(\" [\");\n-        sb.append(\"Association:\").append(association);\n-        sb.append(\", Event: \").append(event).append(\"]\");\n-        return sb.toString();\n+        return super.toString() + \" [\" +\n+                \"Association:\" + association +\n+                \", Event: \" + event + \"]\";\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/AssociationChange.java","additions":17,"deletions":30,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -41,9 +41,7 @@\n-        StringBuffer sb = new StringBuffer(super.toString());\n-        return sb.append(\"[associationID:\")\n-                 .append(associationID())\n-                 .append(\", maxIn:\")\n-                 .append(maxInboundStreams())\n-                 .append(\", maxOut:\")\n-                 .append(maxOutboundStreams())\n-                 .append(\"]\")\n-                 .toString();\n+        return super.toString() + \"[associationID:\" +\n+                associationID() +\n+                \", maxIn:\" +\n+                maxInboundStreams() +\n+                \", maxOut:\" +\n+                maxOutboundStreams() +\n+                \"]\";\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/AssociationImpl.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    \/* assocId is used to lookup the association before the notification is\n+    \/* assocId is used to look up the association before the notification is\n@@ -50,3 +50,3 @@\n-    private int assocId;\n-    private SocketAddress address;\n-    private AddressChangeEvent event;\n+    private final int assocId;\n+    private final SocketAddress address;\n+    private final AddressChangeEvent event;\n@@ -56,22 +56,9 @@\n-        switch (intEvent) {\n-            case SCTP_ADDR_AVAILABLE :\n-                this.event = AddressChangeEvent.ADDR_AVAILABLE;\n-                break;\n-            case SCTP_ADDR_UNREACHABLE :\n-                this.event = AddressChangeEvent.ADDR_UNREACHABLE;\n-                break;\n-            case SCTP_ADDR_REMOVED :\n-                this.event = AddressChangeEvent.ADDR_REMOVED;\n-                break;\n-            case SCTP_ADDR_ADDED :\n-                this.event = AddressChangeEvent.ADDR_ADDED;\n-                break;\n-            case SCTP_ADDR_MADE_PRIM :\n-                this.event = AddressChangeEvent.ADDR_MADE_PRIMARY;\n-                break;\n-            case SCTP_ADDR_CONFIRMED :\n-                this.event = AddressChangeEvent.ADDR_CONFIRMED;\n-                break;\n-            default:\n-                throw new AssertionError(\"Unknown event type\");\n-        }\n+        this.event = switch (intEvent) {\n+            case SCTP_ADDR_AVAILABLE   -> AddressChangeEvent.ADDR_AVAILABLE;\n+            case SCTP_ADDR_UNREACHABLE -> AddressChangeEvent.ADDR_UNREACHABLE;\n+            case SCTP_ADDR_REMOVED     -> AddressChangeEvent.ADDR_REMOVED;\n+            case SCTP_ADDR_ADDED       -> AddressChangeEvent.ADDR_ADDED;\n+            case SCTP_ADDR_MADE_PRIM   -> AddressChangeEvent.ADDR_MADE_PRIMARY;\n+            case SCTP_ADDR_CONFIRMED   -> AddressChangeEvent.ADDR_CONFIRMED;\n+            default -> throw new AssertionError(\"Unknown event type\");\n+        };\n@@ -106,1 +93,0 @@\n-        assert event != null;\n@@ -112,6 +98,4 @@\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(super.toString()).append(\" [\");\n-        sb.append(\"Address: \").append(address);\n-        sb.append(\", Association:\").append(association);\n-        sb.append(\", Event: \").append(event).append(\"]\");\n-        return sb.toString();\n+        return super.toString() + \" [\" +\n+                \"Address: \" + address +\n+                \", Association:\" + association +\n+                \", Event: \" + event + \"]\";\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/PeerAddrChange.java","additions":17,"deletions":33,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        return type() != MESSAGE && type() != NOTHING ? true : false;\n+        return type() != MESSAGE && type() != NOTHING;\n@@ -71,2 +71,2 @@\n-        if (value instanceof MessageInfoImpl)\n-            return (MessageInfoImpl) value;\n+        if (value instanceof MessageInfoImpl messageInfo)\n+            return messageInfo;\n@@ -80,2 +80,2 @@\n-        if (value instanceof SendFailed)\n-            return (SendFailed) value;\n+        if (value instanceof SendFailed sendFailed)\n+            return sendFailed;\n@@ -89,2 +89,2 @@\n-        if (value instanceof AssociationChange)\n-            return (AssociationChange) value;\n+        if (value instanceof AssociationChange associationChanged)\n+            return associationChanged;\n@@ -98,2 +98,2 @@\n-        if (value instanceof PeerAddrChange)\n-            return (PeerAddrChange) value;\n+        if (value instanceof PeerAddrChange peerAddressChanged)\n+            return peerAddressChanged;\n@@ -107,2 +107,2 @@\n-        if (value instanceof Shutdown)\n-            return (Shutdown) value;\n+        if (value instanceof Shutdown shutdown)\n+            return shutdown;\n@@ -118,7 +118,7 @@\n-            case NOTHING:              sb.append(\"NOTHING\");             break;\n-            case MESSAGE:              sb.append(\"MESSAGE\");             break;\n-            case SEND_FAILED:          sb.append(\"SEND FAILED\");         break;\n-            case ASSOCIATION_CHANGED:  sb.append(\"ASSOCIATION CHANGE\");  break;\n-            case PEER_ADDRESS_CHANGED: sb.append(\"PEER ADDRESS CHANGE\"); break;\n-            case SHUTDOWN:             sb.append(\"SHUTDOWN\");            break;\n-            default :                  sb.append(\"Unknown result type\");\n+            case NOTHING              -> sb.append(\"NOTHING\");\n+            case MESSAGE              -> sb.append(\"MESSAGE\");\n+            case SEND_FAILED          -> sb.append(\"SEND FAILED\");\n+            case ASSOCIATION_CHANGED  -> sb.append(\"ASSOCIATION CHANGE\");\n+            case PEER_ADDRESS_CHANGED -> sb.append(\"PEER ADDRESS CHANGE\");\n+            case SHUTDOWN             -> sb.append(\"SHUTDOWN\");\n+            default                   -> sb.append(\"Unknown result type\");\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/ResultContainer.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n@@ -81,3 +83,3 @@\n-    \/* IDs of native threads doing send and receivess, for signalling *\/\n-    private volatile long receiverThread = 0;\n-    private volatile long senderThread = 0;\n+    \/* IDs of native threads doing send and receive, for signalling *\/\n+    private volatile long receiverThread;\n+    private volatile long senderThread;\n@@ -92,1 +94,1 @@\n-        new ThreadLocal<Boolean>() {\n+        new ThreadLocal<>() {\n@@ -111,1 +113,1 @@\n-    private ChannelState state = ChannelState.UNINITIALIZED;\n+    private ChannelState state;\n@@ -115,1 +117,1 @@\n-    private HashSet<InetSocketAddress> localAddresses = new HashSet<InetSocketAddress>();\n+    private final Set<InetSocketAddress> localAddresses = new HashSet<>();\n@@ -223,1 +225,1 @@\n-    private SctpChannel bindUnbindAddress(InetAddress address, boolean add)\n+    private void bindUnbindAddress(InetAddress address, boolean add)\n@@ -279,1 +281,0 @@\n-        return this;\n@@ -284,1 +285,1 @@\n-            return port == -1 ? false : true;\n+            return port != -1;\n@@ -694,19 +695,0 @@\n-    private static class DefaultOptionsHolder {\n-        static final Set<SctpSocketOption<?>> defaultOptions = defaultOptions();\n-\n-        private static Set<SctpSocketOption<?>> defaultOptions() {\n-            HashSet<SctpSocketOption<?>> set = new HashSet<SctpSocketOption<?>>(10);\n-            set.add(SCTP_DISABLE_FRAGMENTS);\n-            set.add(SCTP_EXPLICIT_COMPLETE);\n-            set.add(SCTP_FRAGMENT_INTERLEAVE);\n-            set.add(SCTP_INIT_MAXSTREAMS);\n-            set.add(SCTP_NODELAY);\n-            set.add(SCTP_PRIMARY_ADDR);\n-            set.add(SCTP_SET_PEER_PRIMARY_ADDR);\n-            set.add(SO_SNDBUF);\n-            set.add(SO_RCVBUF);\n-            set.add(SO_LINGER);\n-            return Collections.unmodifiableSet(set);\n-        }\n-    }\n-\n@@ -715,1 +697,14 @@\n-        return DefaultOptionsHolder.defaultOptions;\n+        final class Holder {\n+            static final Set<SctpSocketOption<?>> DEFAULT_OPTIONS = Set.of(\n+                    SCTP_DISABLE_FRAGMENTS,\n+                    SCTP_EXPLICIT_COMPLETE,\n+                    SCTP_FRAGMENT_INTERLEAVE,\n+                    SCTP_INIT_MAXSTREAMS,\n+                    SCTP_NODELAY,\n+                    SCTP_PRIMARY_ADDR,\n+                    SCTP_SET_PEER_PRIMARY_ADDR,\n+                    SO_SNDBUF,\n+                    SO_RCVBUF,\n+                    SO_LINGER);\n+        }\n+        return Holder.DEFAULT_OPTIONS;\n@@ -849,1 +844,1 @@\n-    private InternalNotificationHandler internalNotificationHandler =\n+    private final InternalNotificationHandler internalNotificationHandler =\n@@ -852,2 +847,1 @@\n-    private void handleNotificationInternal(ResultContainer resultContainer)\n-    {\n+    private void handleNotificationInternal(ResultContainer resultContainer) {\n@@ -858,3 +852,2 @@\n-    private class InternalNotificationHandler\n-            extends AbstractNotificationHandler<Object>\n-    {\n+    private final class InternalNotificationHandler\n+            extends AbstractNotificationHandler<Object> {\n@@ -862,4 +855,3 @@\n-        public HandlerResult handleNotification(\n-                AssociationChangeNotification not, Object unused) {\n-            if (not.event().equals(\n-                    AssociationChangeNotification.AssocChangeEvent.COMM_UP) &&\n+        public HandlerResult handleNotification(AssociationChangeNotification not,\n+                                                Object unused) {\n+            if (not.event().equals(AssociationChangeNotification.AssocChangeEvent.COMM_UP) &&\n@@ -875,4 +867,3 @@\n-    private <T> HandlerResult invokeNotificationHandler\n-                                 (ResultContainer resultContainer,\n-                                  NotificationHandler<T> handler,\n-                                  T attachment) {\n+    private <T> HandlerResult invokeNotificationHandler(ResultContainer resultContainer,\n+                                                        NotificationHandler<T> handler,\n+                                                        T attachment) {\n@@ -884,1 +875,1 @@\n-        if (!(handler instanceof AbstractNotificationHandler)) {\n+        if (!(handler instanceof AbstractNotificationHandler<T> absHandler)) {\n@@ -889,20 +880,13 @@\n-        AbstractNotificationHandler<T> absHandler =\n-                (AbstractNotificationHandler<T>)handler;\n-        switch(resultContainer.type()) {\n-            case ASSOCIATION_CHANGED :\n-                return absHandler.handleNotification(\n-                        resultContainer.getAssociationChanged(), attachment);\n-            case PEER_ADDRESS_CHANGED :\n-                return absHandler.handleNotification(\n-                        resultContainer.getPeerAddressChanged(), attachment);\n-            case SEND_FAILED :\n-                return absHandler.handleNotification(\n-                        resultContainer.getSendFailed(), attachment);\n-            case SHUTDOWN :\n-                return absHandler.handleNotification(\n-                        resultContainer.getShutdown(), attachment);\n-            default :\n-                \/* implementation specific handlers *\/\n-                return absHandler.handleNotification(\n-                        resultContainer.notification(), attachment);\n-        }\n+        return switch (resultContainer.type()) {\n+            case ASSOCIATION_CHANGED  -> absHandler.handleNotification(\n+                    resultContainer.getAssociationChanged(), attachment);\n+            case PEER_ADDRESS_CHANGED -> absHandler.handleNotification(\n+                    resultContainer.getPeerAddressChanged(), attachment);\n+            case SEND_FAILED          -> absHandler.handleNotification(\n+                    resultContainer.getSendFailed(), attachment);\n+            case SHUTDOWN             -> absHandler.handleNotification(\n+                    resultContainer.getShutdown(), attachment);\n+            \/* implementation specific handlers *\/\n+            default                   -> absHandler.handleNotification(\n+                    resultContainer.notification(), attachment);\n+        };\n@@ -1101,2 +1085,2 @@\n-        java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction<Void>() {\n+        AccessController.doPrivileged(\n+            new PrivilegedAction<>() {\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpChannelImpl.java","additions":50,"deletions":66,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.util.Map;\n@@ -79,2 +80,2 @@\n-    private volatile long receiverThread = 0;\n-    private volatile long senderThread = 0;\n+    private volatile long receiverThread;\n+    private volatile long senderThread;\n@@ -103,1 +104,1 @@\n-    private HashSet<InetSocketAddress> localAddresses = new HashSet<InetSocketAddress>();\n+    private final Set<InetSocketAddress> localAddresses = new HashSet<>();\n@@ -107,5 +108,5 @@\n-    \/* Keeps a map of addresses to association, and visa versa *\/\n-    private HashMap<SocketAddress, Association> addressMap =\n-                         new HashMap<SocketAddress, Association>();\n-    private HashMap<Association, Set<SocketAddress>> associationMap =\n-                         new HashMap<Association, Set<SocketAddress>>();\n+    \/* Keeps a map of addresses to association, and vice versa *\/\n+    private final Map<SocketAddress, Association> addressMap =\n+                         new HashMap<>();\n+    private final Map<Association, Set<SocketAddress>> associationMap =\n+                         new HashMap<>();\n@@ -117,6 +118,1 @@\n-    private final ThreadLocal<Association> associationToRemove =\n-        new ThreadLocal<Association>() {\n-             @Override protected Association initialValue() {\n-                 return null;\n-            }\n-    };\n+    private final ThreadLocal<Association> associationToRemove = new ThreadLocal<>();\n@@ -126,1 +122,1 @@\n-        new ThreadLocal<Boolean>() {\n+        new ThreadLocal<>() {\n@@ -258,1 +254,1 @@\n-            return port == -1 ? false : true;\n+            return port != -1;\n@@ -439,19 +435,0 @@\n-    private static class DefaultOptionsHolder {\n-        static final Set<SctpSocketOption<?>> defaultOptions = defaultOptions();\n-\n-        private static Set<SctpSocketOption<?>> defaultOptions() {\n-            HashSet<SctpSocketOption<?>> set = new HashSet<SctpSocketOption<?>>(10);\n-            set.add(SCTP_DISABLE_FRAGMENTS);\n-            set.add(SCTP_EXPLICIT_COMPLETE);\n-            set.add(SCTP_FRAGMENT_INTERLEAVE);\n-            set.add(SCTP_INIT_MAXSTREAMS);\n-            set.add(SCTP_NODELAY);\n-            set.add(SCTP_PRIMARY_ADDR);\n-            set.add(SCTP_SET_PEER_PRIMARY_ADDR);\n-            set.add(SO_SNDBUF);\n-            set.add(SO_RCVBUF);\n-            set.add(SO_LINGER);\n-            return Collections.unmodifiableSet(set);\n-        }\n-    }\n-\n@@ -460,1 +437,15 @@\n-        return DefaultOptionsHolder.defaultOptions;\n+        final class Holder {\n+            static final Set<SctpSocketOption<?>> DEFAULT_OPTIONS = Set.of(\n+                    SCTP_DISABLE_FRAGMENTS,\n+                    SCTP_EXPLICIT_COMPLETE,\n+                    SCTP_FRAGMENT_INTERLEAVE,\n+                    SCTP_INIT_MAXSTREAMS,\n+                    SCTP_NODELAY,\n+                    SCTP_PRIMARY_ADDR,\n+                    SCTP_SET_PEER_PRIMARY_ADDR,\n+                    SO_SNDBUF,\n+                    SO_RCVBUF,\n+                    SO_LINGER);\n+\n+        }\n+        return Holder.DEFAULT_OPTIONS;\n@@ -592,1 +583,1 @@\n-    private InternalNotificationHandler internalNotificationHandler =\n+    private final InternalNotificationHandler internalNotificationHandler =\n@@ -601,1 +592,1 @@\n-    private class InternalNotificationHandler\n+    private final class InternalNotificationHandler\n@@ -605,2 +596,2 @@\n-        public HandlerResult handleNotification(\n-                AssociationChangeNotification not, Object unused) {\n+        public HandlerResult handleNotification(AssociationChangeNotification not,\n+                                                Object unused) {\n@@ -611,1 +602,1 @@\n-                case COMM_UP :\n+                case COMM_UP -> {\n@@ -613,1 +604,1 @@\n-                       (sac.assocId(), sac.maxInStreams(), sac.maxOutStreams());\n+                            (sac.assocId(), sac.maxInStreams(), sac.maxOutStreams());\n@@ -615,4 +606,3 @@\n-                    break;\n-                case SHUTDOWN :\n-                case COMM_LOST :\n-                \/\/case RESTART: ???\n+                }\n+                case SHUTDOWN, COMM_LOST ->\n+                    \/\/case RESTART: ???\n@@ -620,1 +610,1 @@\n-                    associationToRemove.set(lookupAssociation(sac.assocId()));\n+                        associationToRemove.set(lookupAssociation(sac.assocId()));\n@@ -626,4 +616,3 @@\n-    private <T> HandlerResult invokeNotificationHandler(\n-                                   ResultContainer resultContainer,\n-                                   NotificationHandler<T> handler,\n-                                   T attachment) {\n+    private <T> HandlerResult invokeNotificationHandler(ResultContainer resultContainer,\n+                                                        NotificationHandler<T> handler,\n+                                                        T attachment) {\n@@ -634,1 +623,1 @@\n-        if (!(handler instanceof AbstractNotificationHandler)) {\n+        if (!(handler instanceof AbstractNotificationHandler<T> absHandler)) {\n@@ -637,24 +626,13 @@\n-            AbstractNotificationHandler<T> absHandler =\n-                    (AbstractNotificationHandler<T>)handler;\n-            switch(resultContainer.type()) {\n-                case ASSOCIATION_CHANGED :\n-                    result = absHandler.handleNotification(\n-                            resultContainer.getAssociationChanged(), attachment);\n-                    break;\n-                case PEER_ADDRESS_CHANGED :\n-                    result = absHandler.handleNotification(\n-                            resultContainer.getPeerAddressChanged(), attachment);\n-                    break;\n-                case SEND_FAILED :\n-                    result = absHandler.handleNotification(\n-                            resultContainer.getSendFailed(), attachment);\n-                    break;\n-                case SHUTDOWN :\n-                    result =  absHandler.handleNotification(\n-                            resultContainer.getShutdown(), attachment);\n-                    break;\n-                default :\n-                    \/* implementation specific handlers *\/\n-                    result =  absHandler.handleNotification(\n-                            resultContainer.notification(), attachment);\n-            }\n+            result = switch (resultContainer.type()) {\n+                case ASSOCIATION_CHANGED  -> absHandler.handleNotification(\n+                        resultContainer.getAssociationChanged(), attachment);\n+                case PEER_ADDRESS_CHANGED -> absHandler.handleNotification(\n+                        resultContainer.getPeerAddressChanged(), attachment);\n+                case SEND_FAILED          -> absHandler.handleNotification(\n+                        resultContainer.getSendFailed(), attachment);\n+                case SHUTDOWN             -> absHandler.handleNotification(\n+                        resultContainer.getShutdown(), attachment);\n+                \/* implementation specific handlers *\/\n+                default                   -> absHandler.handleNotification(\n+                        resultContainer.notification(), attachment);\n+            };\n@@ -748,2 +726,1 @@\n-     * @throws  IllegalArgumentException\n-     *          If the given association is not controlled by this channel\n+     * Checks if the given association is controlled by this channel.\n@@ -751,2 +728,1 @@\n-     * @return  {@code true} if, and only if, the given association is one\n-     *          of the current associations controlled by this channel\n+     * @throws IllegalArgumentException If the given association is not controlled by this channel\n@@ -754,1 +730,1 @@\n-    private boolean checkAssociation(Association messageAssoc) {\n+    private void checkAssociation(Association messageAssoc) {\n@@ -758,1 +734,1 @@\n-                    return true;\n+                    return;\n@@ -956,2 +932,1 @@\n-                Set<SocketAddress> addrs = associationMap.get(association);\n-                return addrs != null ? addrs : Collections.<SocketAddress>emptySet();\n+                return associationMap.getOrDefault(association, Collections.emptySet());\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpMultiChannelImpl.java","additions":59,"deletions":84,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-        HashSet<SocketAddress> set = null;\n+        Set<SocketAddress> set = null;\n@@ -139,1 +139,1 @@\n-            set = new HashSet<SocketAddress>(saa.length);\n+            set = new HashSet<>(saa.length);\n@@ -163,2 +163,0 @@\n-            if (addr == null)\n-                throw new IllegalArgumentException(\"Invalid option value\");\n@@ -260,1 +258,1 @@\n-        setIntOption0(fd, ((SctpStdSocketOption)name).constValue(), arg);\n+        setIntOption0(fd, ((SctpStdSocketOption<?>)name).constValue(), arg);\n@@ -270,1 +268,1 @@\n-        if (!(name instanceof SctpStdSocketOption))\n+        if (!(name instanceof SctpStdSocketOption<?> option))\n@@ -273,2 +271,1 @@\n-        int value = getIntOption0(fd,\n-                ((SctpStdSocketOption)name).constValue());\n+        int value = getIntOption0(fd, option.constValue());\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpNet.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n- * All Notification implemenations MUST implement this interface to provide\n- * access to the native association identidier.\n+ * All Notification implementations MUST implement this interface to provide\n+ * access to the native association identifier.\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpNotification.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import sun.nio.ch.DirectBuffer;\n@@ -51,1 +50,0 @@\n-import sun.nio.ch.Util;\n@@ -64,1 +62,1 @@\n-    private volatile long thread = 0;\n+    private volatile long thread;\n@@ -84,1 +82,1 @@\n-    private HashSet<InetSocketAddress> localAddresses = new HashSet<InetSocketAddress>();\n+    private final HashSet<InetSocketAddress> localAddresses = new HashSet<>();\n@@ -203,1 +201,1 @@\n-            return port == -1 ? false : true;\n+            return port != -1;\n@@ -392,10 +390,0 @@\n-    private static class DefaultOptionsHolder {\n-        static final Set<SctpSocketOption<?>> defaultOptions = defaultOptions();\n-\n-        private static Set<SctpSocketOption<?>> defaultOptions() {\n-            HashSet<SctpSocketOption<?>> set = new HashSet<SctpSocketOption<?>>(1);\n-            set.add(SctpStandardSocketOptions.SCTP_INIT_MAXSTREAMS);\n-            return Collections.unmodifiableSet(set);\n-        }\n-    }\n-\n@@ -404,1 +392,5 @@\n-        return DefaultOptionsHolder.defaultOptions;\n+        final class Holder {\n+            static final Set<SctpSocketOption<?>> DEFAULT_OPTIONS =\n+                    Set.of(SctpStandardSocketOptions.SCTP_INIT_MAXSTREAMS);\n+        }\n+        return Holder.DEFAULT_OPTIONS;\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpServerChannelImpl.java","additions":8,"deletions":16,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -41,5 +41,5 @@\n-    private int assocId;\n-    private SocketAddress address;\n-    private ByteBuffer buffer;\n-    private int errorCode;\n-    private int streamNumber;\n+    private final int assocId;\n+    private final SocketAddress address;\n+    private final ByteBuffer buffer;\n+    private final int errorCode;\n+    private final int streamNumber;\n@@ -100,9 +100,7 @@\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(super.toString()).append(\" [\");\n-        sb.append(\"Association:\").append(association);\n-        sb.append(\", Address: \").append(address);\n-        sb.append(\", buffer: \").append(buffer);\n-        sb.append(\", errorCode: \").append(errorCode);\n-        sb.append(\", streamNumber: \").append(streamNumber);\n-        sb.append(\"]\");\n-        return sb.toString();\n+        return super.toString() + \" [\" +\n+                \"Association:\" + association +\n+                \", Address: \" + address +\n+                \", buffer: \" + buffer +\n+                \", errorCode: \" + errorCode +\n+                \", streamNumber: \" + streamNumber +\n+                \"]\";\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SendFailed.java","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    \/* assocId is used to lookup the association before the notification is\n+    \/* assocId is used to look up the association before the notification is\n@@ -39,1 +39,1 @@\n-    private int assocId;\n+    private final int assocId;\n@@ -64,4 +64,2 @@\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(super.toString()).append(\" [\");\n-        sb.append(\"Association:\").append(association).append(\"]\");\n-        return sb.toString();\n+        return super.toString() + \" [\" +\n+                \"Association:\" + association + \"]\";\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/Shutdown.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"}]}