{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import java.awt.Color;\n@@ -54,0 +55,4 @@\n+  public static BufferedImage buff;\n+  public static Color highlight = Color.BLACK;\n+  public static Color shadow = Color.WHITE;\n+  public static double scaling = 1.5;\n@@ -65,2 +70,2 @@\n-    BufferedImage buff = new BufferedImage(frame.getWidth()*2,\n-            frame.getHeight()*2, BufferedImage.TYPE_INT_ARGB);\n+    buff = new BufferedImage(frame.getWidth()*((int) Math.ceil(scaling)),\n+            frame.getHeight()*((int) Math.ceil(scaling)), BufferedImage.TYPE_INT_ARGB);\n@@ -68,1 +73,1 @@\n-    graph.scale(1.5, 1.5);\n+    graph.scale(scaling, scaling);\n@@ -73,10 +78,4 @@\n-    int testFail = 0;\n-    for (int i = 15; i < 25 && testFail == 0; i++) {\n-      for (int j = 80; j < 100; j++) {\n-        if (buff.getRGB(i, j) == -0x5F5F60) {\n-          System.out.println(i + \" \" + j + \" Color \" + buff.getRGB(i, j));\n-          testFail = 1;\n-          break;\n-        }\n-      }\n-    }\n+    checkBorder(15, 70, 20, 80, highlight);\n+    checkBorder(18, 120, 23, 130, highlight);\n+    checkBorder(20, 170, 25, 180, highlight);\n+    checkBorder(22, 220, 28, 230, highlight);\n@@ -84,9 +83,2 @@\n-    for (int i = 15; i < 25 && testFail == 1; i++) {\n-      for (int j = 150; j < 170; j++) {\n-        if (buff.getRGB(i, j) == -0x5F5F60) {\n-          System.out.println(i + \" \" + j + \" Color \" + buff.getRGB(i, j));\n-          testFail = 2;\n-          break;\n-        }\n-      }\n-    }\n+    frame.dispose();\n+  }\n@@ -94,7 +86,5 @@\n-    for (int i = 20; i < 30 && testFail == 2; i++) {\n-      for (int j = 230; j < 250; j++) {\n-        if (buff.getRGB(i, j) == -0x5F5F60) {\n-          System.out.println(i + \" \" + j + \" Color \" + buff.getRGB(i, j));\n-          testFail = 3;\n-          break;\n-        }\n+  private static void checkBorder(int x1, int y1, int x2, int y2, Color color) throws RuntimeException {\n+    for (int j = y1; j < y2; j++) {\n+      int thickness = 0;\n+      for (int i = x1; i < x2; i++) {\n+        if (buff.getRGB(i, j) == color.getRGB()) thickness++;\n@@ -102,9 +92,10 @@\n-    }\n-\n-    for (int i = 20; i < 30 && testFail == 3; i++) {\n-      for (int j = 320; j < 340; j++) {\n-        if (buff.getRGB(i, j) == -0x5F5F60) {\n-          System.out.println(i + \" \" + j + \" Color \" + buff.getRGB(i, j));\n-          testFail = 4;\n-          break;\n-        }\n+      if(thickness > Math.floor(scaling)) {\n+        System.out.println(y1 + \" \" + y2 + \" \" + thickness);\n+        saveImage(buff, \"test.png\");\n+        frame.dispose();\n+        throw new RuntimeException(\"Border drawn too thick.\");\n+      } else if(thickness < Math.floor(scaling)) {\n+        System.out.println(y1 + \" \" + y2 + \" \" + thickness);\n+        saveImage(buff, \"test.png\");\n+        frame.dispose();\n+        throw new RuntimeException(\"BorderLayout was clipped or overdrawn.\");\n@@ -113,7 +104,0 @@\n-\n-    if (testFail < 4) {\n-      saveImage(buff, \"test.png\");\n-      throw new RuntimeException(\"Border was clipped or overdrawn.\");\n-    }\n-\n-    frame.dispose();\n@@ -135,1 +119,1 @@\n-      childPanel.setBorder(BorderFactory.createTitledBorder(\"Title \" + i));\n+      childPanel.setBorder(BorderFactory.createEtchedBorder(shadow, highlight));\n","filename":"test\/jdk\/java\/awt\/TitledBorder\/TitledBorderTest.java","additions":30,"deletions":46,"binary":false,"changes":76,"status":"modified"}]}