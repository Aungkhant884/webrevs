{"files":[{"patch":"@@ -125,1 +125,1 @@\n-    private void paintBorderRect(Graphics g, Color c, int w, int h, int stkWidth) {\n+    private void paintBorderHighlight(Graphics g, Color c, int w, int h, int stkWidth) {\n@@ -175,3 +175,5 @@\n-                                                    : getShadowColor(c), w, h, stkWidth);\n-        paintBorderRect(g, (etchType == LOWERED) ? getShadowColor(c)\n-                                                    : getHighlightColor(c), w, h, stkWidth);\n+                                                   : getShadowColor(c),\n+                          w, h, stkWidth);\n+        paintBorderHighlight(g, (etchType == LOWERED) ? getShadowColor(c)\n+                                                   : getHighlightColor(c),\n+                             w, h, stkWidth);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/border\/EtchedBorder.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,248 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.Point;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.BorderFactory;\n+import javax.swing.Box;\n+import javax.swing.BoxLayout;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8279614\n+ * @summary The left line of the TitledBorder is not painted on 150 scale factor\n+ * @requires (os.family == \"windows\")\n+ * @run main TitledBorderTest\n+ *\/\n+\n+public class ScaledEtchedBorderTest {\n+\n+    public static final Dimension SIZE = new Dimension(120, 20);\n+\n+    public static JFrame frame;\n+    public static JPanel contentPanel;\n+    public static JPanel parentPanel;\n+    public static JPanel childPanel;\n+    public static Color highlight = Color.RED;\n+    public static Color shadow = Color.BLUE;\n+\n+    private static final double[] scales =\n+            {1.00, 1.25, 1.50, 1.75, 2.00, 2.50, 3.00};\n+\n+    private static final List<BufferedImage> images =\n+            new ArrayList<>(scales.length);\n+\n+    private static final List<Point> panelLocations =\n+            new ArrayList<>(4);\n+\n+    public static void main(String[] args) throws Exception {\n+        boolean showFrame = args.length > 1 && \"-show\".equals(args[0]);\n+        try {\n+            UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Could not get Windows laf.\");\n+        }\n+\n+        testScaling(showFrame);\n+    }\n+\n+    private static void testScaling(boolean show) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> createGUI(show));\n+\n+        for (int i = 0; i < images.size(); i++) {\n+            BufferedImage img = images.get(i);\n+            double scaling = scales[i];\n+            System.out.println(\"Testing scaling: \" + scaling);\n+\n+\n+            \/\/ checking vertical border\n+            int x = SIZE.width \/ 2;\n+            checkVerticalBorder(x, img, scaling);\n+\n+            for (Point p : panelLocations) {\n+                int y = (int) (p.y * scaling) + SIZE.height \/ 2;\n+                checkHorizontalBorder(y, img, scaling);\n+            }\n+        }\n+    }\n+\n+    private static void checkHorizontalBorder(int y, BufferedImage img, double scaling) {\n+        int thickness = 0;\n+        boolean checkShadow = false;\n+        boolean checkHighlight = false;\n+        for (int x = 0; x < img.getWidth(); x++) {\n+            int color = img.getRGB(x,y);\n+            if (!checkHighlight && !checkShadow) {\n+                if (color == shadow.getRGB()) {\n+                    checkHighlight = true;\n+                    thickness++;\n+                } else if (color == highlight.getRGB()) {\n+                    throw new RuntimeException(\"Horizontal Border was clipped or overdrawn.\");\n+                }\n+            } else if (checkHighlight) {\n+                if (color == shadow.getRGB()) {\n+                    thickness++;\n+                } else if (color == highlight.getRGB()) {\n+                    verifyThickness(x, y, thickness, scaling, \"Horizontal\");\n+                    checkHighlight = false;\n+                    checkShadow = true;\n+                    thickness = 1;\n+                } else {\n+                    throw new RuntimeException(\"Horizontal Border has empty space between highlight and shadow.\");\n+                }\n+            } else {\n+                if (color == shadow.getRGB()) {\n+                    throw new RuntimeException(\"Border colors reversed.\");\n+                } else if (color == highlight.getRGB()) {\n+                    thickness++;\n+                } else {\n+                    verifyThickness(x, y, thickness, scaling, \"Horizontal\");\n+                    checkShadow = false;\n+                    thickness = 0;\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void verifyThickness(int x, int y, int thickness, double scaling, String orientation) {\n+        int expected = (int) Math.floor(scaling);\n+        if (thickness != expected) {\n+            throw new RuntimeException(\"Unexpected \" + orientation + \" Border thickness at x:\"\n+                                       + x + \" y: \" + y + \". Expected: \" + expected + \" Actual: \" + thickness);\n+        }\n+    }\n+\n+    private static void checkVerticalBorder(int x, BufferedImage img, double scaling) {\n+        int thickness = 0;\n+        boolean checkShadow = false;\n+        boolean checkHighlight = false;\n+        for (int y = 0; y < img.getHeight(); y++) {\n+            int color = img.getRGB(x,y);\n+            if (!checkHighlight && !checkShadow) {\n+                if (color == shadow.getRGB()) {\n+                    checkHighlight = true;\n+                    thickness++;\n+                } else if (color == highlight.getRGB()) {\n+                    throw new RuntimeException(\"Vertical Border was clipped or overdrawn.\");\n+                }\n+            } else if (checkHighlight) {\n+                if (color == shadow.getRGB()) {\n+                    thickness++;\n+                } else if (color == highlight.getRGB()) {\n+                    verifyThickness(x, y, thickness, scaling, \"Vertical\");\n+                    checkHighlight = false;\n+                    checkShadow = true;\n+                    thickness = 1;\n+                } else {\n+                    throw new RuntimeException(\"Vertical Border has empty space between highlight and shadow.\");\n+                }\n+            } else {\n+                if (color == shadow.getRGB()) {\n+                    throw new RuntimeException(\"Border colors reversed.\");\n+                } else if (color == highlight.getRGB()) {\n+                    thickness++;\n+                } else {\n+                    verifyThickness(x, y, thickness, scaling, \"Vertical\");\n+                    checkShadow = false;\n+                    thickness = 0;\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void createGUI(boolean showFrame) {\n+        \/\/ Render content panel\n+        contentPanel = new JPanel();\n+        contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));\n+\n+        for (int i = 0; i < 4; i++) {\n+            parentPanel = new JPanel(new BorderLayout());\n+            parentPanel.setBorder(BorderFactory.createEmptyBorder(0, i, 4, 4));\n+\n+            childPanel = new JPanel(new BorderLayout());\n+            childPanel.setBorder(BorderFactory.createEtchedBorder(highlight, shadow));\n+            childPanel.add(Box.createRigidArea(SIZE), BorderLayout.CENTER);\n+\n+            parentPanel.add(childPanel, BorderLayout.CENTER);\n+            contentPanel.add(parentPanel);\n+        }\n+\n+        frame = new JFrame(\"Swing Test\");\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        frame.getContentPane().add(contentPanel, BorderLayout.CENTER);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+\n+        for (double scaling : scales) {\n+            \/\/ Create BufferedImage\n+            BufferedImage buff = new BufferedImage((int) Math.ceil(contentPanel.getWidth() * scaling),\n+                    (int) Math.ceil(contentPanel.getHeight() * scaling),\n+                    BufferedImage.TYPE_INT_ARGB);\n+            Graphics2D graph = buff.createGraphics();\n+            graph.scale(scaling, scaling);\n+            \/\/ Painting panel onto BufferedImage\n+            contentPanel.paint(graph);\n+            graph.dispose();\n+            \/\/ Save each image ? -- Here it's useful for debugging\n+            saveImage(buff, String.format(\"test%.2f.png\", scaling));\n+            images.add(buff);\n+        }\n+        \/\/ Save coordinates of the panels\n+        for (Component comp : contentPanel.getComponents()) {\n+            panelLocations.add(comp.getLocation());\n+        }\n+\n+        if (showFrame) {\n+            frame.setVisible(true);\n+        } else {\n+            frame.dispose();\n+        }\n+    }\n+\n+    private static void saveImage(BufferedImage image, String filename) {\n+        try {\n+            ImageIO.write(image, \"png\", new File(filename));\n+        } catch (IOException e) {\n+            \/\/ Don't propagate the exception\n+            e.printStackTrace();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TitledBorder\/ScaledEtchedBorderTest.java","additions":248,"deletions":0,"binary":false,"changes":248,"status":"added"},{"patch":"@@ -1,259 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.BorderLayout;\n-import java.awt.Color;\n-import java.awt.Component;\n-import java.awt.Dimension;\n-import java.awt.Graphics2D;\n-import java.awt.Point;\n-import java.awt.image.BufferedImage;\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import javax.imageio.ImageIO;\n-import javax.swing.BorderFactory;\n-import javax.swing.Box;\n-import javax.swing.BoxLayout;\n-import javax.swing.JFrame;\n-import javax.swing.JPanel;\n-import javax.swing.SwingUtilities;\n-import javax.swing.UIManager;\n-import javax.swing.UnsupportedLookAndFeelException;\n-\n-\/*\n- * @test\n- * @key headful\n- * @bug 8279614\n- * @summary The left line of the TitledBorder is not painted on 150 scale factor\n- * @requires (os.family == \"windows\")\n- * @run main TitledBorderTest\n- *\/\n-\n-public class TitledBorderTest {\n-\n-    public static final Dimension SIZE = new Dimension(120, 20);\n-\n-    public static JFrame frame;\n-    public static JPanel contentPanel;\n-    public static JPanel parentPanel;\n-    public static JPanel childPanel;\n-    public static Color highlight = Color.RED;\n-    public static Color shadow = Color.BLUE;\n-\n-    private static final double[] scales =\n-            {1.00, 1.25, 1.50, 1.75, 2.00, 2.50, 3.00};\n-\n-    private static final List<BufferedImage> images =\n-            new ArrayList<>(scales.length);\n-\n-    private static final List<Point> panelLocations =\n-            new ArrayList<>(4);\n-\n-    public static void main(String[] args) throws Exception {\n-        boolean showFrame = args.length > 1 && \"-show\".equals(args[0]);\n-        try {\n-            UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"Could not get Windows laf.\");\n-        }\n-\n-        testScaling(showFrame);\n-    }\n-\n-    private static void testScaling(boolean show) throws Exception {\n-        SwingUtilities.invokeAndWait(() -> createGUI(show));\n-\n-        for (int i = 0; i < images.size(); i++) {\n-            BufferedImage img = images.get(i);\n-            double scaling = scales[i];\n-\n-            \/\/ checking vertical border\n-            int x = SIZE.width \/ 2;\n-            checkVerticalBorder(x, img, scaling);\n-\n-            for (Point p : panelLocations) {\n-                int y = (int) (p.y * scaling) + SIZE.height \/ 2;\n-                checkHorizontalBorder(y, img, scaling);\n-            }\n-        }\n-    }\n-\n-    private static void checkHorizontalBorder(int y, BufferedImage img, double scaling) {\n-        int thickness = 0;\n-        boolean checkShadow = false;\n-        boolean checkHighlight = false;\n-        for (int i = 0; i < img.getWidth(); i++) {\n-            int color = img.getRGB(i,y);\n-            if (!checkHighlight && !checkShadow) {\n-                if (color == shadow.getRGB()) {\n-                    checkHighlight = true;\n-                    thickness++;\n-                } else if (color == highlight.getRGB()) {\n-                    throw new RuntimeException(\"Horizontal Border was clipped or overdrawn.\");\n-                }\n-            } else if (checkHighlight) {\n-                if (color == shadow.getRGB()) {\n-                    thickness++;\n-                } else if (color == highlight.getRGB()) {\n-                    verifyThickness(y, thickness, scaling, \"Horizontal\");\n-                    checkHighlight = false;\n-                    checkShadow = true;\n-                    thickness = 1;\n-                } else {\n-                    throw new RuntimeException(\"Horizontal Border has empty space between highlight and shadow.\");\n-                }\n-            } else {\n-                if (color == shadow.getRGB()) {\n-                    throw new RuntimeException(\"Border colors reversed.\");\n-                } else if (color == highlight.getRGB()) {\n-                    thickness++;\n-                } else {\n-                    verifyThickness(y, thickness, scaling, \"Horizontal\");\n-                    checkShadow = false;\n-                    thickness = 0;\n-                }\n-            }\n-        }\n-    }\n-\n-    private static void verifyThickness(int x, int thickness, double scaling, String orientation) {\n-        int expected = (int) Math.floor(scaling);\n-        if (thickness != expected) {\n-            throw new RuntimeException(\"Unexpected \" + orientation + \" Border thickness.\");\n-        }\n-    }\n-\n-    private static void checkVerticalBorder(int x, BufferedImage img, double scaling) {\n-        int thickness = 0;\n-        boolean checkShadow = false;\n-        boolean checkHighlight = false;\n-        for (int i = 0; i < img.getHeight(); i++) {\n-            int color = img.getRGB(x,i);\n-            if (!checkHighlight && !checkShadow) {\n-                if (color == shadow.getRGB()) {\n-                    checkHighlight = true;\n-                    thickness++;\n-                } else if (color == highlight.getRGB()) {\n-                    throw new RuntimeException(\"Vertical Border was clipped or overdrawn.\");\n-                }\n-            } else if (checkHighlight) {\n-                if (color == shadow.getRGB()) {\n-                    thickness++;\n-                } else if (color == highlight.getRGB()) {\n-                    verifyThickness(x, thickness, scaling, \"Vertical\");\n-                    checkHighlight = false;\n-                    checkShadow = true;\n-                    thickness = 1;\n-                } else {\n-                    throw new RuntimeException(\"Vertical Border has empty space between highlight and shadow.\");\n-                }\n-            } else {\n-                if (color == shadow.getRGB()) {\n-                    throw new RuntimeException(\"Border colors reversed.\");\n-                } else if (color == highlight.getRGB()) {\n-                    thickness++;\n-                } else {\n-                    verifyThickness(x, thickness, scaling, \"Vertical\");\n-                    checkShadow = false;\n-                    thickness = 0;\n-                }\n-            }\n-        }\n-    }\n-\n-    private static void createGUI(boolean showFrame) {\n-        \/\/ Render content panel\n-        contentPanel = new JPanel();\n-        contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));\n-\n-        for (int i = 0; i < 4; i++) {\n-            parentPanel = new JPanel(new BorderLayout());\n-            parentPanel.setBorder(BorderFactory.createEmptyBorder(0, i, 4, 4));\n-\n-            childPanel = new JPanel(new BorderLayout());\n-            childPanel.setBorder(BorderFactory.createEtchedBorder(highlight, shadow));\n-            childPanel.add(Box.createRigidArea(SIZE), BorderLayout.CENTER);\n-\n-            parentPanel.add(childPanel, BorderLayout.CENTER);\n-            contentPanel.add(parentPanel);\n-        }\n-\n-        frame = new JFrame(\"Swing Test\");\n-        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n-        frame.getContentPane().add(contentPanel, BorderLayout.CENTER);\n-        frame.pack();\n-        frame.setLocationRelativeTo(null);\n-\n-        for (double scaling : scales) {\n-            \/\/ Create BufferedImage\n-            BufferedImage buff = new BufferedImage((int) Math.ceil(contentPanel.getWidth() * scaling),\n-                    (int) Math.ceil(contentPanel.getHeight() * scaling),\n-                    BufferedImage.TYPE_INT_ARGB);\n-            Graphics2D graph = buff.createGraphics();\n-            graph.scale(scaling, scaling);\n-            \/\/ Painting panel onto BufferedImage\n-            contentPanel.paint(graph);\n-            graph.dispose();\n-            \/\/ Save each image ? -- Here it's useful for debugging\n-            saveImage(buff, String.format(\"test%.2f.png\", scaling));\n-            images.add(buff);\n-        }\n-        \/\/ Save coordinates of the panels\n-        for (Component comp : contentPanel.getComponents()) {\n-            panelLocations.add(comp.getLocation());\n-        }\n-\n-        if (showFrame) {\n-            frame.setVisible(true);\n-        } else {\n-            frame.dispose();\n-        }\n-    }\n-\n-    private static void saveImage(BufferedImage image, String filename) {\n-        try {\n-            ImageIO.write(image, \"png\", new File(filename));\n-        } catch (IOException e) {\n-            \/\/ Don't propagate the exception\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n-        try {\n-            UIManager.setLookAndFeel(laf.getClassName());\n-            System.out.println(laf.getName());\n-        } catch (UnsupportedLookAndFeelException ignored) {\n-            System.out.println(\"Unsupported LookAndFeel: \" + laf.getClassName());\n-        } catch (ClassNotFoundException | InstantiationException |\n-                IllegalAccessException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/TitledBorder\/TitledBorderTest.java","additions":0,"deletions":259,"binary":false,"changes":259,"status":"deleted"}]}