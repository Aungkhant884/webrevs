{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.awt.BasicStroke;\n@@ -28,0 +29,1 @@\n+import java.awt.Graphics2D;\n@@ -32,0 +34,2 @@\n+import java.awt.Stroke;\n+import java.awt.geom.AffineTransform;\n@@ -122,0 +126,16 @@\n+    private void paintBorderRect(Graphics g, Color c, int w, int h, int stkWidth) {\n+        g.setColor(c);\n+        g.drawRect(stkWidth\/2, stkWidth\/2, w-(2*stkWidth), h-(2*stkWidth));\n+    }\n+\n+    private void paintBorderShadow(Graphics g, Color c, int w, int h, int stkWidth) {\n+        g.setColor(c);\n+        g.drawLine((3*stkWidth\/2), h-(3*stkWidth\/2), (3*stkWidth\/2), (3*stkWidth\/2)); \/\/ left line\n+        g.drawLine((3*stkWidth\/2), (3*stkWidth\/2), w-(3*stkWidth\/2), (3*stkWidth\/2)); \/\/ top line\n+\n+        g.drawLine((3*stkWidth\/2)-1, h-(stkWidth-stkWidth\/2),\n+                w-(stkWidth-stkWidth\/2), h-(stkWidth-stkWidth\/2)); \/\/ bottom line\n+        g.drawLine(w-(stkWidth-stkWidth\/2), h-(stkWidth-stkWidth\/2),\n+                w-(stkWidth-stkWidth\/2), stkWidth\/2); \/\/ right line\n+    }\n+\n@@ -134,16 +154,33 @@\n-        int w = width;\n-        int h = height;\n-\n-        g.translate(x, y);\n-\n-        g.setColor(etchType == LOWERED? getShadowColor(c) : getHighlightColor(c));\n-        g.drawRect(0, 0, w-2, h-2);\n-\n-        g.setColor(etchType == LOWERED? getHighlightColor(c) : getShadowColor(c));\n-        g.drawLine(1, h-3, 1, 1);\n-        g.drawLine(1, 1, w-3, 1);\n-\n-        g.drawLine(0, h-1, w-1, h-1);\n-        g.drawLine(w-1, h-1, w-1, 0);\n-\n-        g.translate(-x, -y);\n+        \/\/ We remove any initial transforms to prevent rounding errors\n+        \/\/ when drawing in non-integer scales\n+        AffineTransform at = new AffineTransform();\n+        Stroke oldStk = new BasicStroke();\n+        int stkWidth = 1;\n+        if (g instanceof Graphics2D) {\n+            at = ((Graphics2D) g).getTransform();\n+            ((Graphics2D) g).setTransform(new AffineTransform());\n+            oldStk = ((Graphics2D) g).getStroke();\n+            stkWidth = (int) Math.floor(Math.min(at.getScaleX(),at.getScaleY()));\n+            ((Graphics2D) g).setStroke(new BasicStroke((float) stkWidth));\n+        }\n+\n+        int w = (int) Math.floor(at.getScaleX()*width-1);\n+        int h = (int) Math.floor(at.getScaleY()*height-1);\n+\n+        int xtranslation = (int) Math.ceil(at.getScaleX()*x+at.getTranslateX());\n+        int ytranslation = (int) Math.ceil(at.getScaleY()*y+at.getTranslateY());\n+\n+        g.translate(xtranslation, ytranslation);\n+\n+        paintBorderShadow(g, (etchType == LOWERED) ? getHighlightColor(c)\n+                                                    : getShadowColor(c), w, h, stkWidth);\n+        paintBorderRect(g, (etchType == LOWERED) ? getShadowColor(c)\n+                                                    : getHighlightColor(c), w, h, stkWidth);\n+\n+        g.translate(-xtranslation, -ytranslation);\n+\n+        \/\/ Set the transform we removed earlier\n+        if (g instanceof Graphics2D) {\n+            ((Graphics2D) g).setTransform(at);\n+            ((Graphics2D) g).setStroke(oldStk);\n+        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/border\/EtchedBorder.java","additions":54,"deletions":17,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.awt.geom.Rectangle2D;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/border\/TitledBorder.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,193 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.BorderFactory;\n+import javax.swing.BoxLayout;\n+import javax.swing.JCheckBox;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+import javax.swing.border.Border;\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Graphics2D;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8279614\n+ * @summary The left line of the TitledBorder is not painted on 150 scale factor\n+ * @requires (os.family == \"windows\")\n+ * @run main TitledBorderTest\n+ *\/\n+\n+public class TitledBorderTest {\n+\n+    public static JFrame frame;\n+    public static JPanel contentPanel;\n+    public static JPanel parentPanel;\n+    public static JPanel childPanel;\n+    public static BufferedImage buff;\n+    public static Color highlight = Color.RED;\n+    public static Color shadow = Color.BLUE;\n+    public static boolean showFrame = true;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Could not get Windows laf.\");\n+        }\n+\n+        for (double scaling : new double[] {1.50}) {\n+            testScaling(scaling, showFrame);\n+        }\n+    }\n+\n+    private static void testScaling(double scaling, boolean show) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> createAndShowGUI(scaling, show));\n+        Robot robot = new Robot();\n+\n+        while(showFrame && frame.isVisible()) Thread.sleep(500);\n+\n+        robot.waitForIdle();\n+        \/\/ testing left edge\n+        checkVerticalBorder(15, 70, 20, 80, highlight, scaling);\n+        checkVerticalBorder(18, 120, 23, 130, highlight, scaling);\n+        checkVerticalBorder(20, 170, 25, 180, highlight, scaling);\n+        checkVerticalBorder(22, 220, 28, 230, highlight, scaling);\n+\n+        \/\/ testing right edge\n+\n+        \/\/ testing top edge\n+\n+        \/\/ testing bottom edge\n+\n+    }\n+\n+    private static void checkHorizontalBorder(int x1, int y1, int x2, int y2,\n+                                              Color color, double scaling) throws RuntimeException {\n+        for (int j = x1; j < x2; j++) {\n+            int thickness = 0;\n+            for (int i = y1; i < y2; i++) {\n+                if (buff.getRGB(i, j) == color.getRGB()) thickness++;\n+            }\n+            if (thickness > Math.floor(scaling)) {\n+                System.out.println(y1 + \" \" + y2 + \" \" + thickness);\n+                saveImage(buff, \"test.png\");\n+                throw new RuntimeException(\"Border drawn too thick.\");\n+            } else if (thickness < Math.floor(scaling)) {\n+                System.out.println(y1 + \" \" + y2 + \" \" + thickness);\n+                saveImage(buff, \"test.png\");\n+                throw new RuntimeException(\"BorderLayout was clipped or overdrawn.\");\n+            }\n+        }\n+    }\n+\n+    private static void checkVerticalBorder(int x1, int y1, int x2, int y2,\n+                                            Color color, double scaling) throws RuntimeException {\n+        for (int j = y1; j < y2; j++) {\n+            int thickness = 0;\n+            for (int i = x1; i < x2; i++) {\n+                if (buff.getRGB(i, j) == color.getRGB()) thickness++;\n+            }\n+            if (thickness > Math.floor(scaling)) {\n+                System.out.println(y1 + \" \" + y2 + \" \" + thickness);\n+                saveImage(buff, \"test.png\");\n+                throw new RuntimeException(\"Border drawn too thick.\");\n+            } else if (thickness < Math.floor(scaling)) {\n+                System.out.println(y1 + \" \" + y2 + \" \" + thickness);\n+                saveImage(buff, \"test.png\");\n+                throw new RuntimeException(\"BorderLayout was clipped or overdrawn.\");\n+            }\n+        }\n+    }\n+\n+    private static void createAndShowGUI(double scaling, boolean showFrame) {\n+        \/\/ Render content panel\n+        contentPanel = new JPanel();\n+        contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));\n+        contentPanel.setSize(new java.awt.Dimension(300, 200));\n+\n+        for (int i = 0; i < 4; i++) {\n+            parentPanel = new JPanel(new BorderLayout());\n+            parentPanel.setBorder(BorderFactory.createEmptyBorder(5, 5 + i, 5, 5));\n+\n+            childPanel = new JPanel(new BorderLayout());\n+            childPanel.setBorder(BorderFactory.createEtchedBorder(highlight, shadow));\n+            childPanel.add(new JCheckBox(), BorderLayout.CENTER);\n+\n+            parentPanel.add(childPanel, BorderLayout.CENTER);\n+            contentPanel.add(parentPanel);\n+        }\n+\n+        \/\/ Create BufferedImage\n+        buff = new BufferedImage(contentPanel.getWidth() * ((int) Math.ceil(scaling)),\n+                contentPanel.getHeight() * ((int) Math.ceil(scaling)), BufferedImage.TYPE_INT_ARGB);\n+        Graphics2D graph = buff.createGraphics();\n+\n+        \/\/ Set affine transform\n+        graph.scale(scaling, scaling);\n+\n+        \/\/ Painting panel onto BufferedImage\n+        contentPanel.paint(graph);\n+        graph.dispose();\n+\n+        if (showFrame) {\n+            frame = new JFrame(\"Swing Test\");\n+            frame.setSize(300, 200);\n+            frame.getContentPane().add(contentPanel, BorderLayout.CENTER);\n+            frame.setVisible(true);\n+        }\n+    }\n+\n+    private static void saveImage(BufferedImage image, String filename) {\n+        try {\n+            ImageIO.write(image, \"png\", new File(filename));\n+        } catch (IOException e) {\n+            \/\/ Don't propagate the exception\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+            System.out.println(laf.getName());\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported LookAndFeel: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException |\n+                IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TitledBorder\/TitledBorderTest.java","additions":193,"deletions":0,"binary":false,"changes":193,"status":"added"}]}