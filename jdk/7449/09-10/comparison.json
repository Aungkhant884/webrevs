{"files":[{"patch":"@@ -136,1 +136,1 @@\n-        g.drawLine((3*stkWidth\/2), h-(stkWidth-stkWidth\/2),\n+        g.drawLine((3*stkWidth\/2)-1, h-(stkWidth-stkWidth\/2),\n@@ -170,2 +170,4 @@\n-        g.translate((int) Math.ceil(at.getScaleX()*x+at.getTranslateX()),\n-                (int) Math.ceil(at.getScaleY()*y+at.getTranslateY()));\n+        int xtranslation = (int) Math.ceil(at.getScaleX()*x+at.getTranslateX());\n+        int ytranslation = (int) Math.ceil(at.getScaleY()*y+at.getTranslateY());\n+\n+        g.translate(xtranslation, ytranslation);\n@@ -178,2 +180,2 @@\n-        g.translate(-((int) (at.getScaleX()*x+at.getTranslateX())),\n-                -((int) (at.getScaleY()*y+at.getTranslateY())));\n+        g.translate(-xtranslation, -ytranslation);\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/border\/EtchedBorder.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+\n@@ -34,0 +35,1 @@\n+import javax.swing.border.Border;\n@@ -50,0 +52,1 @@\n+\n@@ -52,51 +55,19 @@\n-  public static JFrame frame;\n-  public static JPanel parentPanel;\n-  public static JPanel childPanel;\n-  public static BufferedImage buff;\n-  public static Color highlight = Color.BLACK;\n-  public static Color shadow = Color.WHITE;\n-  public static double scaling = 1.5;\n-\n-  public static void main(String[] args) throws Exception {\n-    try {\n-      UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n-    } catch (Exception e) {\n-      throw new RuntimeException(\"Could not get Windows laf.\");\n-    }\n-    SwingUtilities.invokeAndWait(() -> createAndShowGUI());\n-\n-    Robot robot = new Robot();\n-\n-    buff = new BufferedImage(frame.getWidth()*((int) Math.ceil(scaling)),\n-            frame.getHeight()*((int) Math.ceil(scaling)), BufferedImage.TYPE_INT_ARGB);\n-    Graphics2D graph = buff.createGraphics();\n-    graph.scale(scaling, scaling);\n-    frame.paint(graph);\n-    graph.dispose();\n-\n-    robot.waitForIdle();\n-    checkBorder(15, 70, 20, 80, highlight);\n-    checkBorder(18, 120, 23, 130, highlight);\n-    checkBorder(20, 170, 25, 180, highlight);\n-    checkBorder(22, 220, 28, 230, highlight);\n-\n-    frame.dispose();\n-  }\n-\n-  private static void checkBorder(int x1, int y1, int x2, int y2, Color color) throws RuntimeException {\n-    for (int j = y1; j < y2; j++) {\n-      int thickness = 0;\n-      for (int i = x1; i < x2; i++) {\n-        if (buff.getRGB(i, j) == color.getRGB()) thickness++;\n-      }\n-      if(thickness > Math.floor(scaling)) {\n-        System.out.println(y1 + \" \" + y2 + \" \" + thickness);\n-        saveImage(buff, \"test.png\");\n-        frame.dispose();\n-        throw new RuntimeException(\"Border drawn too thick.\");\n-      } else if(thickness < Math.floor(scaling)) {\n-        System.out.println(y1 + \" \" + y2 + \" \" + thickness);\n-        saveImage(buff, \"test.png\");\n-        frame.dispose();\n-        throw new RuntimeException(\"BorderLayout was clipped or overdrawn.\");\n-      }\n+    public static JFrame frame;\n+    public static JPanel contentPanel;\n+    public static JPanel parentPanel;\n+    public static JPanel childPanel;\n+    public static BufferedImage buff;\n+    public static Color highlight = Color.RED;\n+    public static Color shadow = Color.BLUE;\n+    public static boolean showFrame = true;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Could not get Windows laf.\");\n+        }\n+\n+        for (double scaling : new double[] {1.50}) {\n+            testScaling(scaling, showFrame);\n+        }\n@@ -104,1 +75,0 @@\n-  }\n@@ -106,4 +76,12 @@\n-  private static void createAndShowGUI() {\n-    frame = new JFrame(\"Swing Test\");\n-    frame.setSize(new java.awt.Dimension(300, 200));\n-    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+    private static void testScaling(double scaling, boolean show) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> createAndShowGUI(scaling, show));\n+        Robot robot = new Robot();\n+\n+        while(showFrame && frame.isVisible()) Thread.sleep(500);\n+\n+        robot.waitForIdle();\n+        \/\/ testing left edge\n+        checkVerticalBorder(15, 70, 20, 80, highlight, scaling);\n+        checkVerticalBorder(18, 120, 23, 130, highlight, scaling);\n+        checkVerticalBorder(20, 170, 25, 180, highlight, scaling);\n+        checkVerticalBorder(22, 220, 28, 230, highlight, scaling);\n@@ -111,2 +89,1 @@\n-    JPanel content = new JPanel();\n-    content.setLayout(new BoxLayout(content, BoxLayout.Y_AXIS));\n+        \/\/ testing right edge\n@@ -114,3 +91,1 @@\n-    for (int i = 0; i < 4; i++) {\n-      parentPanel = new JPanel(new BorderLayout());\n-      parentPanel.setBorder(BorderFactory.createEmptyBorder(5, 5 + i, 5, 5));\n+        \/\/ testing top edge\n@@ -118,3 +93,1 @@\n-      childPanel = new JPanel(new BorderLayout());\n-      childPanel.setBorder(BorderFactory.createEtchedBorder(shadow, highlight));\n-      childPanel.add(new JCheckBox(), BorderLayout.CENTER);\n+        \/\/ testing bottom edge\n@@ -122,2 +95,0 @@\n-      parentPanel.add(childPanel, BorderLayout.CENTER);\n-      content.add(parentPanel);\n@@ -126,1 +97,18 @@\n-    frame.getContentPane().add(content, BorderLayout.CENTER);\n+    private static void checkHorizontalBorder(int x1, int y1, int x2, int y2,\n+                                              Color color, double scaling) throws RuntimeException {\n+        for (int j = x1; j < x2; j++) {\n+            int thickness = 0;\n+            for (int i = y1; i < y2; i++) {\n+                if (buff.getRGB(i, j) == color.getRGB()) thickness++;\n+            }\n+            if (thickness > Math.floor(scaling)) {\n+                System.out.println(y1 + \" \" + y2 + \" \" + thickness);\n+                saveImage(buff, \"test.png\");\n+                throw new RuntimeException(\"Border drawn too thick.\");\n+            } else if (thickness < Math.floor(scaling)) {\n+                System.out.println(y1 + \" \" + y2 + \" \" + thickness);\n+                saveImage(buff, \"test.png\");\n+                throw new RuntimeException(\"BorderLayout was clipped or overdrawn.\");\n+            }\n+        }\n+    }\n@@ -128,4 +116,18 @@\n-    frame.pack();\n-    frame.setLocationRelativeTo(null);\n-    frame.setVisible(true);\n-  }\n+    private static void checkVerticalBorder(int x1, int y1, int x2, int y2,\n+                                            Color color, double scaling) throws RuntimeException {\n+        for (int j = y1; j < y2; j++) {\n+            int thickness = 0;\n+            for (int i = x1; i < x2; i++) {\n+                if (buff.getRGB(i, j) == color.getRGB()) thickness++;\n+            }\n+            if (thickness > Math.floor(scaling)) {\n+                System.out.println(y1 + \" \" + y2 + \" \" + thickness);\n+                saveImage(buff, \"test.png\");\n+                throw new RuntimeException(\"Border drawn too thick.\");\n+            } else if (thickness < Math.floor(scaling)) {\n+                System.out.println(y1 + \" \" + y2 + \" \" + thickness);\n+                saveImage(buff, \"test.png\");\n+                throw new RuntimeException(\"BorderLayout was clipped or overdrawn.\");\n+            }\n+        }\n+    }\n@@ -133,6 +135,36 @@\n-  private static void saveImage(BufferedImage image, String filename) {\n-    try {\n-      ImageIO.write(image, \"png\", new File(filename));\n-    } catch (IOException e) {\n-      \/\/ Don't propagate the exception\n-      e.printStackTrace();\n+    private static void createAndShowGUI(double scaling, boolean showFrame) {\n+        \/\/ Render content panel\n+        contentPanel = new JPanel();\n+        contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));\n+        contentPanel.setSize(new java.awt.Dimension(300, 200));\n+\n+        for (int i = 0; i < 4; i++) {\n+            parentPanel = new JPanel(new BorderLayout());\n+            parentPanel.setBorder(BorderFactory.createEmptyBorder(5, 5 + i, 5, 5));\n+\n+            childPanel = new JPanel(new BorderLayout());\n+            childPanel.setBorder(BorderFactory.createEtchedBorder(highlight, shadow));\n+            childPanel.add(new JCheckBox(), BorderLayout.CENTER);\n+\n+            parentPanel.add(childPanel, BorderLayout.CENTER);\n+            contentPanel.add(parentPanel);\n+        }\n+\n+        \/\/ Create BufferedImage\n+        buff = new BufferedImage(contentPanel.getWidth() * ((int) Math.ceil(scaling)),\n+                contentPanel.getHeight() * ((int) Math.ceil(scaling)), BufferedImage.TYPE_INT_ARGB);\n+        Graphics2D graph = buff.createGraphics();\n+\n+        \/\/ Set affine transform\n+        graph.scale(scaling, scaling);\n+\n+        \/\/ Painting panel onto BufferedImage\n+        contentPanel.paint(graph);\n+        graph.dispose();\n+\n+        if (showFrame) {\n+            frame = new JFrame(\"Swing Test\");\n+            frame.setSize(300, 200);\n+            frame.getContentPane().add(contentPanel, BorderLayout.CENTER);\n+            frame.setVisible(true);\n+        }\n@@ -140,11 +172,20 @@\n-  }\n-\n-  private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n-    try {\n-      UIManager.setLookAndFeel(laf.getClassName());\n-      System.out.println(laf.getName());\n-    } catch (UnsupportedLookAndFeelException ignored){\n-      System.out.println(\"Unsupported LookAndFeel: \" + laf.getClassName());\n-    } catch (ClassNotFoundException | InstantiationException |\n-            IllegalAccessException e) {\n-      throw new RuntimeException(e);\n+\n+    private static void saveImage(BufferedImage image, String filename) {\n+        try {\n+            ImageIO.write(image, \"png\", new File(filename));\n+        } catch (IOException e) {\n+            \/\/ Don't propagate the exception\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+            System.out.println(laf.getName());\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported LookAndFeel: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException |\n+                IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n@@ -152,1 +193,0 @@\n-  }\n","filename":"test\/jdk\/java\/awt\/TitledBorder\/TitledBorderTest.java","additions":129,"deletions":89,"binary":false,"changes":218,"status":"modified"}]}