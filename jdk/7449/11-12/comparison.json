{"files":[{"patch":"@@ -31,1 +31,0 @@\n-import java.awt.Rectangle;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/border\/EtchedBorder.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.awt.geom.Rectangle2D;\n@@ -38,1 +37,0 @@\n-import java.beans.PropertyChangeEvent;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/border\/TitledBorder.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,0 @@\n-    public static BufferedImage buff;\n@@ -69,1 +68,0 @@\n-    public static boolean showFrame = false;\n@@ -81,1 +79,1 @@\n-        showFrame = args.length > 1 && \"-show\".equals(args[0]);\n+        boolean showFrame = args.length > 1 && \"-show\".equals(args[0]);\n@@ -92,1 +90,1 @@\n-        SwingUtilities.invokeAndWait(() -> createAndShowGUI(show));\n+        SwingUtilities.invokeAndWait(() -> createGUI(show));\n@@ -95,2 +93,2 @@\n-                BufferedImage img = images.get(i);\n-                double scaling = scales[i];\n+            BufferedImage img = images.get(i);\n+            double scaling = scales[i];\n@@ -98,5 +96,3 @@\n-                \/\/ For vertical count the number of shadow \/ highlight in\n-                \/\/ the middle of the image at (x = SIZE.width \/ 2)\n-                \/\/ (there must be no background color between these two colours)\n-                \/\/ Then skip background until the next border where you count\n-                \/\/ shadow and highlight thickness\n+            \/\/ checking vertical border\n+            int x = SIZE.width \/ 2;\n+            checkVerticalBorder(x, img, scaling);\n@@ -104,2 +100,3 @@\n-                 int x = SIZE.width \/ 2;\n-                 checkVerticalBorder(x, img, scaling);\n+            for (Point p : panelLocations) {\n+                int y = (int) (p.y * scaling) + SIZE.height \/ 2;\n+                System.out.println(scaling + \" : \" + y);\n@@ -107,8 +104,2 @@\n-                \/\/ For horizontal border, take the middle of each panel and\n-                \/\/ count the number of shadow and highlight pixels\n-                for (Point p : panelLocations) {\n-                    int y = (int) (p.y * scaling) + SIZE.height \/ 2;\n-                    System.out.println(scaling + \" : \" + y);\n-\n-                     checkHorizontalBorder(y, img, scaling);\n-                }\n+                checkHorizontalBorder(y, img, scaling);\n+            }\n@@ -118,2 +109,1 @@\n-    private static void hBorderLoop(int x1, int x2, int y, BufferedImage buff,\n-                                    Color c, double scaling) throws RuntimeException {\n+    private static void checkHorizontalBorder(int y, BufferedImage img, double scaling) throws RuntimeException {\n@@ -121,11 +111,33 @@\n-        for (int i = x1; i < x2; i++) {\n-            if (buff.getRGB(i, y) == c.getRGB()) thickness++;\n-        }\n-\n-        int expected = (int) Math.floor(scaling);\n-        if (thickness > expected) {\n-            throw new RuntimeException(\"Horizontal Border drawn too thick. Thickness: \"\n-                    + thickness + \" Scaling: \" + scaling + \" y: \" + y);\n-        } else if (thickness < expected) {\n-            throw new RuntimeException(\"Horizontal Border drawn too thin. Thickness: \"\n-                    + thickness + \" Scaling: \" + scaling + \" y: \" + y);\n+        boolean checkShadow = false;\n+        boolean checkHighlight = false;\n+        for (int i = 0; i < img.getWidth(); i++) {\n+            int color = img.getRGB(i,y);\n+            if (!checkHighlight && !checkShadow) {\n+                if (color == shadow.getRGB()) {\n+                    checkHighlight = true;\n+                    thickness++;\n+                } else if (color == highlight.getRGB()) {\n+                    throw new RuntimeException(\"Horizontal Border was clipped or overdrawn.\");\n+                }\n+            } else if (checkHighlight) {\n+                if (color == shadow.getRGB()) {\n+                    thickness++;\n+                } else if (color == highlight.getRGB()) {\n+                    verifyThickness(y, thickness, scaling, \"Horizontal\");\n+                    checkHighlight = false;\n+                    checkShadow = true;\n+                    thickness = 1;\n+                } else {\n+                    throw new RuntimeException(\"Horizontal Border has empty space between highlight and shadow.\");\n+                }\n+            } else {\n+                if (color == shadow.getRGB()) {\n+                    throw new RuntimeException(\"Border colors reversed.\");\n+                } else if (color == highlight.getRGB()) {\n+                    thickness++;\n+                } else {\n+                    verifyThickness(y, thickness, scaling, \"Horizontal\");\n+                    checkShadow = false;\n+                    thickness = 0;\n+                }\n+            }\n@@ -135,13 +147,1 @@\n-    private static void checkHorizontalBorder(int y, BufferedImage img, double scaling) throws RuntimeException {\n-        \/\/ checking left border\n-        hBorderLoop(0, (int) (Math.floor(scaling)+(5*scaling)), y, img, shadow, scaling);\n-        hBorderLoop((int) Math.floor(scaling), (int) (Math.floor(scaling)*2+5*scaling), y, img, highlight, scaling);\n-\n-        \/\/ checking right border\n-        hBorderLoop(img.getWidth() - ((int) (Math.floor(scaling)*2+5*scaling)), img.getWidth() - ((int) Math.floor(scaling)),\n-                y, img, shadow, scaling);\n-        hBorderLoop(img.getWidth() - ((int) (Math.floor(scaling)+5*scaling)), img.getWidth(),\n-                y, img, highlight, scaling);\n-    }\n-\n-    private static void verifyThickness(int x, int thickness, double scaling) {\n+    private static void verifyThickness(int x, int thickness, double scaling, String orientation) {\n@@ -149,4 +149,1 @@\n-        if (thickness < expected) throw new RuntimeException(\"Vertical Border drawn too thin. Thickness: \"\n-                + thickness + \" Scaling: \" + scaling + \" x: \" + x);\n-        if (thickness > expected) throw new RuntimeException(\"Vertical Border drawn too thick. Thickness: \"\n-                + thickness + \" Scaling: \" + scaling + \" x: \" + x);\n+        if (thickness != expected) throw new RuntimeException(\"Unexpected \" + orientation + \" Border thickness.\");\n@@ -166,4 +163,1 @@\n-                    throw new RuntimeException(\"Vertical Border was clipped or overdrawn.\"\n-                            + \" Scaling: \" + scaling + \" x: \" + x);\n-                } else {\n-                    continue;\n+                    throw new RuntimeException(\"Vertical Border was clipped or overdrawn.\");\n@@ -175,1 +169,1 @@\n-                    verifyThickness(x, thickness, scaling);\n+                    verifyThickness(x, thickness, scaling, \"Vertical\");\n@@ -180,2 +174,1 @@\n-                    throw new RuntimeException(\"Vertical Border has empty space between highlight and shadow.\"\n-                            + \" Scaling: \" + scaling + \" x: \" + x);\n+                    throw new RuntimeException(\"Vertical Border has empty space between highlight and shadow.\");\n@@ -189,1 +182,1 @@\n-                    verifyThickness(x, thickness, scaling);\n+                    verifyThickness(x, thickness, scaling, \"Vertical\");\n@@ -197,1 +190,1 @@\n-    private static void createAndShowGUI(boolean showFrame) {\n+    private static void createGUI(boolean showFrame) {\n@@ -204,1 +197,1 @@\n-            parentPanel.setBorder(BorderFactory.createEmptyBorder(0, i, 4, 0));\n+            parentPanel.setBorder(BorderFactory.createEmptyBorder(0, i, 4, 4));\n@@ -235,3 +228,3 @@\n-        Arrays.stream(contentPanel.getComponents())\n-                .map(Component::getLocation)\n-                .forEach(panelLocations::add);\n+        for (Component comp : contentPanel.getComponents()) {\n+            panelLocations.add(comp.getLocation());\n+        }\n@@ -266,1 +259,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/jdk\/java\/awt\/TitledBorder\/TitledBorderTest.java","additions":58,"deletions":65,"binary":false,"changes":123,"status":"modified"}]}