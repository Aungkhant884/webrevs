{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.awt.Graphics2D;\n@@ -32,0 +33,1 @@\n+import java.awt.geom.AffineTransform;\n@@ -122,0 +124,14 @@\n+    private void paintBorderRect(Graphics g, Color c, int w, int h) {\n+        g.setColor(c);\n+        g.drawRect(0, 0, w-2, h-2);\n+    }\n+\n+    private void paintBorderShadow(Graphics g, Color c, int w, int h) {\n+        g.setColor(c);\n+        g.drawLine(1, h-3, 1, 1);\n+        g.drawLine(1, 1, w-3, 1);\n+\n+        g.drawLine(0, h-1, w-1, h-1);\n+        g.drawLine(w-1, h-1, w-1, 0);\n+    }\n+\n@@ -134,16 +150,27 @@\n-        int w = width;\n-        int h = height;\n-\n-        g.translate(x, y);\n-\n-        g.setColor(etchType == LOWERED? getShadowColor(c) : getHighlightColor(c));\n-        g.drawRect(0, 0, w-2, h-2);\n-\n-        g.setColor(etchType == LOWERED? getHighlightColor(c) : getShadowColor(c));\n-        g.drawLine(1, h-3, 1, 1);\n-        g.drawLine(1, 1, w-3, 1);\n-\n-        g.drawLine(0, h-1, w-1, h-1);\n-        g.drawLine(w-1, h-1, w-1, 0);\n-\n-        g.translate(-x, -y);\n+        \/\/ We remove any initial transforms to prevent rounding errors\n+        \/\/ when drawing in non-integer scales\n+        AffineTransform at = new AffineTransform();\n+        if (g instanceof Graphics2D) {\n+            at = ((Graphics2D) g).getTransform();\n+            ((Graphics2D) g).setTransform(new AffineTransform());\n+        }\n+\n+        int w = (int) (at.getScaleX()*width);\n+        int h = (int) (at.getScaleY()*height);\n+\n+        g.translate((int) (at.getScaleX()*x+at.getTranslateX()),\n+                (int) (at.getScaleY()*y+at.getTranslateY()));\n+\n+        \/\/ Drawing the border last prevents the shadow from overdrawing the border\n+        paintBorderShadow(g, (etchType == LOWERED) ? getHighlightColor(c)\n+                                                    : getShadowColor(c), w, h);\n+        paintBorderRect(g, (etchType == LOWERED) ? getShadowColor(c)\n+                                                    : getHighlightColor(c), w, h);\n+\n+\n+        g.translate(-((int) (at.getScaleX()*x+at.getTranslateX())),\n+                -((int) (at.getScaleY()*y+at.getTranslateY())));\n+        \/\/ Set the transform we removed earlier\n+        if (g instanceof Graphics2D) {\n+            ((Graphics2D) g).setTransform(at);\n+        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/border\/EtchedBorder.java","additions":44,"deletions":17,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.awt.geom.Rectangle2D;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/border\/TitledBorder.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import javax.imageio.ImageIO;\n+import javax.swing.BorderFactory;\n+import javax.swing.BoxLayout;\n+import javax.swing.JCheckBox;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+import java.awt.BorderLayout;\n+import java.awt.Graphics2D;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8279614\n+ * @summary The left line of the TitledBorder is not painted on 150 scale factor\n+ * @requires (os.family == \"windows\")\n+ * @run main TitledBorderTest\n+ *\/\n+public class TitledBorderTest {\n+\n+  public static JFrame frame;\n+  public static JPanel parentPanel;\n+  public static JPanel childPanel;\n+\n+  public static void main(String[] args) throws Exception {\n+    try {\n+      UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Could not get Windows laf.\");\n+    }\n+    SwingUtilities.invokeAndWait(() -> createAndShowGUI());\n+\n+    Robot robot = new Robot();\n+\n+    BufferedImage buff = new BufferedImage(frame.getWidth()*2,\n+            frame.getHeight()*2, BufferedImage.TYPE_INT_ARGB);\n+    Graphics2D graph = buff.createGraphics();\n+    graph.scale(1.5, 1.5);\n+    frame.paint(graph);\n+    graph.dispose();\n+\n+    robot.waitForIdle();\n+    int testFail = 0;\n+    for (int i = 15; i < 25 && testFail == 0; i++) {\n+      for (int j = 80; j < 100; j++) {\n+        if (buff.getRGB(i, j) == -0x5F5F60) {\n+          System.out.println(i + \" \" + j + \" Color \" + buff.getRGB(i, j));\n+          testFail = 1;\n+          break;\n+        }\n+      }\n+    }\n+\n+    for (int i = 15; i < 25 && testFail == 1; i++) {\n+      for (int j = 150; j < 170; j++) {\n+        if (buff.getRGB(i, j) == -0x5F5F60) {\n+          System.out.println(i + \" \" + j + \" Color \" + buff.getRGB(i, j));\n+          testFail = 2;\n+          break;\n+        }\n+      }\n+    }\n+\n+    for (int i = 20; i < 30 && testFail == 2; i++) {\n+      for (int j = 230; j < 250; j++) {\n+        if (buff.getRGB(i, j) == -0x5F5F60) {\n+          System.out.println(i + \" \" + j + \" Color \" + buff.getRGB(i, j));\n+          testFail = 3;\n+          break;\n+        }\n+      }\n+    }\n+\n+    for (int i = 20; i < 30 && testFail == 3; i++) {\n+      for (int j = 320; j < 340; j++) {\n+        if (buff.getRGB(i, j) == -0x5F5F60) {\n+          System.out.println(i + \" \" + j + \" Color \" + buff.getRGB(i, j));\n+          testFail = 4;\n+          break;\n+        }\n+      }\n+    }\n+\n+    if (testFail < 4) {\n+      saveImage(buff, \"test.png\");\n+      throw new RuntimeException(\"Border was clipped or overdrawn.\");\n+    }\n+\n+    frame.dispose();\n+  }\n+\n+  private static void createAndShowGUI() {\n+    frame = new JFrame(\"Swing Test\");\n+    frame.setSize(new java.awt.Dimension(300, 200));\n+    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+\n+    JPanel content = new JPanel();\n+    content.setLayout(new BoxLayout(content, BoxLayout.Y_AXIS));\n+\n+    for (int i = 0; i < 4; i++) {\n+      parentPanel = new JPanel(new BorderLayout());\n+      parentPanel.setBorder(BorderFactory.createEmptyBorder(5, 5 + i, 5, 5));\n+\n+      childPanel = new JPanel(new BorderLayout());\n+      childPanel.setBorder(BorderFactory.createTitledBorder(\"Title \" + i));\n+      childPanel.add(new JCheckBox(), BorderLayout.CENTER);\n+\n+      parentPanel.add(childPanel, BorderLayout.CENTER);\n+      content.add(parentPanel);\n+    }\n+\n+    frame.getContentPane().add(content, BorderLayout.CENTER);\n+\n+    frame.pack();\n+    frame.setLocationRelativeTo(null);\n+    frame.setVisible(true);\n+  }\n+\n+  private static void saveImage(BufferedImage image, String filename) {\n+    try {\n+      ImageIO.write(image, \"png\", new File(filename));\n+    } catch (IOException e) {\n+      \/\/ Donâ€™t propagate the exception\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+    try {\n+      UIManager.setLookAndFeel(laf.getClassName());\n+      System.out.println(laf.getName());\n+    } catch (UnsupportedLookAndFeelException ignored){\n+      System.out.println(\"Unsupported LookAndFeel: \" + laf.getClassName());\n+    } catch (ClassNotFoundException | InstantiationException |\n+            IllegalAccessException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+}\n","filename":"test\/jdk\/java\/awt\/TitledBorder\/TitledBorderTest.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"}]}