{"files":[{"patch":"@@ -162,1 +162,0 @@\n-            g2d.setTransform(new AffineTransform());\n@@ -164,4 +163,7 @@\n-            stkWidth = (int) Math.floor(Math.min(at.getScaleX(), at.getScaleY()));\n-            g2d.setStroke(new BasicStroke((float) stkWidth));\n-            RenderingHints rend =\n-                    new RenderingHints(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n+            if((at.getType() & AffineTransform.TYPE_MASK_SCALE) != 0) {\n+                g2d.setTransform(new AffineTransform());\n+                stkWidth = (int) Math.floor(Math.min(at.getScaleX(), at.getScaleY()));\n+                g2d.setStroke(new BasicStroke((float) stkWidth));\n+                RenderingHints rend =\n+                        new RenderingHints(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);\n+            }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/border\/EtchedBorder.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,249 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.BorderLayout;\n-import java.awt.Color;\n-import java.awt.Component;\n-import java.awt.Dimension;\n-import java.awt.Graphics2D;\n-import java.awt.Point;\n-import java.awt.image.BufferedImage;\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.imageio.ImageIO;\n-import javax.swing.BorderFactory;\n-import javax.swing.Box;\n-import javax.swing.BoxLayout;\n-import javax.swing.JFrame;\n-import javax.swing.JPanel;\n-import javax.swing.SwingUtilities;\n-import javax.swing.UIManager;\n-import javax.swing.UnsupportedLookAndFeelException;\n-\n-\/*\n- * @test\n- * @key headful\n- * @bug 8279614\n- * @summary The left line of the TitledBorder is not painted on 150 scale factor\n- * @requires (os.family == \"windows\")\n- * @run main ScaledEtchedBorderTest\n- *\/\n-\n-public class ScaledEtchedBorderTest {\n-\n-    public static final Dimension SIZE = new Dimension(120, 20);\n-\n-    public static JFrame frame;\n-    public static JPanel contentPanel;\n-    public static JPanel parentPanel;\n-    public static JPanel childPanel;\n-    public static Color highlight = Color.RED;\n-    public static Color shadow = Color.BLUE;\n-\n-    private static final double[] scales =\n-            {1.00, 1.25, 1.50, 1.75, 2.00, 2.50, 3.00};\n-\n-    private static final List<BufferedImage> images =\n-            new ArrayList<>(scales.length);\n-\n-    private static final List<Point> panelLocations =\n-            new ArrayList<>(4);\n-\n-    public static void main(String[] args) throws Exception {\n-        for (UIManager.LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels()) {\n-            SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n-            SwingUtilities.invokeAndWait(ScaledEtchedBorderTest::testScaling);\n-        }\n-\n-        frame.dispose();\n-    }\n-\n-    private static void testScaling() {\n-        createGUI();\n-\n-        for (int i = 0; i < scales.length; i++) {\n-            BufferedImage img = images.get(i);\n-            double scaling = scales[i];\n-            System.out.println(\"Testing scaling: \" + scaling);\n-\n-\n-            \/\/ checking vertical border\n-            int x = SIZE.width \/ 2;\n-            checkVerticalBorder(x, img, scaling);\n-\n-            for (Point p : panelLocations) {\n-                int y = (int) (p.y * scaling) + SIZE.height \/ 2;\n-                checkHorizontalBorder(y, img, scaling);\n-            }\n-        }\n-    }\n-\n-    private static void checkHorizontalBorder(int y, BufferedImage img, double scaling) {\n-        int thickness = 0;\n-        boolean checkShadow = false;\n-        boolean checkHighlight = false;\n-        for (int x = 0; x < img.getWidth(); x++) {\n-            int color = img.getRGB(x, y);\n-            if (!checkHighlight && !checkShadow) {\n-                if (color == shadow.getRGB()) {\n-                    checkHighlight = true;\n-                    thickness++;\n-                } else if (color == highlight.getRGB()) {\n-                    throw new RuntimeException(\"Horizontal Border was clipped or overdrawn.\");\n-                }\n-            } else if (checkHighlight) {\n-                if (color == shadow.getRGB()) {\n-                    thickness++;\n-                } else if (color == highlight.getRGB()) {\n-                    verifyThickness(x, y, thickness, scaling, \"Horizontal\");\n-                    checkHighlight = false;\n-                    checkShadow = true;\n-                    thickness = 1;\n-                } else {\n-                    throw new RuntimeException(\"Horizontal Border has empty space between highlight and shadow.\");\n-                }\n-            } else {\n-                if (color == shadow.getRGB()) {\n-                    throw new RuntimeException(\"Border colors reversed.\");\n-                } else if (color == highlight.getRGB()) {\n-                    thickness++;\n-                } else {\n-                    verifyThickness(x, y, thickness, scaling, \"Horizontal\");\n-                    checkShadow = false;\n-                    thickness = 0;\n-                }\n-            }\n-        }\n-    }\n-\n-    private static void verifyThickness(int x, int y, int thickness, double scaling, String orientation) {\n-        int expected = (int) Math.floor(scaling);\n-        if (thickness != expected) {\n-            throw new RuntimeException(\"Unexpected \" + orientation + \" Border thickness at x:\"\n-                                       + x + \" y: \" + y + \". Expected: \" + expected + \" Actual: \" + thickness);\n-        }\n-    }\n-\n-    private static void checkVerticalBorder(int x, BufferedImage img, double scaling) {\n-        int thickness = 0;\n-        boolean checkShadow = false;\n-        boolean checkHighlight = false;\n-        for (int y = 0; y < img.getHeight(); y++) {\n-            int color = img.getRGB(x, y);\n-            if (!checkHighlight && !checkShadow) {\n-                if (color == shadow.getRGB()) {\n-                    checkHighlight = true;\n-                    thickness++;\n-                } else if (color == highlight.getRGB()) {\n-                    throw new RuntimeException(\"Vertical Border was clipped or overdrawn.\");\n-                }\n-            } else if (checkHighlight) {\n-                if (color == shadow.getRGB()) {\n-                    thickness++;\n-                } else if (color == highlight.getRGB()) {\n-                    verifyThickness(x, y, thickness, scaling, \"Vertical\");\n-                    checkHighlight = false;\n-                    checkShadow = true;\n-                    thickness = 1;\n-                } else {\n-                    throw new RuntimeException(\"Vertical Border has empty space between highlight and shadow.\");\n-                }\n-            } else {\n-                if (color == shadow.getRGB()) {\n-                    throw new RuntimeException(\"Border colors reversed.\");\n-                } else if (color == highlight.getRGB()) {\n-                    thickness++;\n-                } else {\n-                    verifyThickness(x, y, thickness, scaling, \"Vertical\");\n-                    checkShadow = false;\n-                    thickness = 0;\n-                }\n-            }\n-        }\n-    }\n-\n-    private static void createGUI() {\n-        \/\/ Render content panel\n-        contentPanel = new JPanel();\n-        contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));\n-\n-        for (int i = 0; i < 4; i++) {\n-            parentPanel = new JPanel(new BorderLayout());\n-            parentPanel.setBorder(BorderFactory.createEmptyBorder(0, i, 4, 4));\n-\n-            childPanel = new JPanel(new BorderLayout());\n-            childPanel.setBorder(BorderFactory.createEtchedBorder(highlight, shadow));\n-            childPanel.add(Box.createRigidArea(SIZE), BorderLayout.CENTER);\n-\n-            parentPanel.add(childPanel, BorderLayout.CENTER);\n-            contentPanel.add(parentPanel);\n-        }\n-\n-        frame = new JFrame(\"Swing Test\");\n-        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n-        frame.getContentPane().add(contentPanel, BorderLayout.CENTER);\n-        frame.pack();\n-        frame.setLocationRelativeTo(null);\n-\n-        for (double scaling : scales) {\n-            \/\/ Create BufferedImage\n-            BufferedImage buff = new BufferedImage((int) Math.ceil(contentPanel.getWidth() * scaling),\n-                    (int) Math.ceil(contentPanel.getHeight() * scaling),\n-                    BufferedImage.TYPE_INT_ARGB);\n-            Graphics2D graph = buff.createGraphics();\n-            graph.scale(scaling, scaling);\n-            \/\/ Painting panel onto BufferedImage\n-            contentPanel.paint(graph);\n-            graph.dispose();\n-            \/\/ Save each image ? -- Here it's useful for debugging\n-            saveImage(buff, String.format(\"test%.2f.png\", scaling));\n-            images.add(buff);\n-        }\n-        \/\/ Save coordinates of the panels\n-        for (Component comp : contentPanel.getComponents()) {\n-            panelLocations.add(comp.getLocation());\n-        }\n-\n-        frame.setVisible(true);\n-    }\n-\n-    private static void saveImage(BufferedImage image, String filename) {\n-        try {\n-            ImageIO.write(image, \"png\", new File(filename));\n-        } catch (IOException e) {\n-            \/\/ Don't propagate the exception\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n-        try {\n-            UIManager.setLookAndFeel(laf.getClassName());\n-            System.out.println(laf.getName());\n-        } catch (UnsupportedLookAndFeelException ignored){\n-            System.out.println(\"Unsupported LookAndFeel: \" + laf.getClassName());\n-        } catch (ClassNotFoundException | InstantiationException |\n-                IllegalAccessException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/EtchedBorder\/ScaledEtchedBorderTest.java","additions":0,"deletions":249,"binary":false,"changes":249,"status":"deleted"},{"patch":"@@ -54,3 +54,0 @@\n-    public static JFrame frame;\n-    public static JPanel contentPanel;\n-    public static JPanel childPanel;\n@@ -72,3 +69,0 @@\n-        if (frame != null) {\n-            SwingUtilities.invokeAndWait(() -> frame.dispose());\n-        }\n@@ -182,0 +176,4 @@\n+        JFrame frame;\n+        JPanel contentPanel;\n+        JPanel childPanel;\n+\n@@ -195,7 +193,2 @@\n-            if (childSize == null) {\n-                childSize = childPanel.getPreferredSize();\n-                childPanel.setBounds(0, childSize.height * i,\n-                        childSize.width, childSize.height);\n-            }\n-\n-            contentPanel.setSize(childSize.width, childSize.height * 4);\n+            childSize = childPanel.getPreferredSize();\n+            childPanel.setBounds(0, childSize.height * i, childSize.width, childSize.height);\n@@ -204,0 +197,2 @@\n+        contentPanel.setSize(childSize.width, childSize.height * 4);\n+\n@@ -228,1 +223,2 @@\n-            frame.setLocationRelativeTo(null);frame.setVisible(true);\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n","filename":"test\/jdk\/javax\/swing\/border\/EtchedBorder\/ScaledEtchedBorderTest.java","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"}]}