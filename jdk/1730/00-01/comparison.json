{"files":[{"patch":"@@ -333,1 +333,1 @@\n-  JVMCI::ensure_box_caches_initialized(NULL, CHECK);\n+  JVMCI::ensure_box_caches_initialized(CHECK);\n","filename":"src\/hotspot\/share\/aot\/aotLoader.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -129,3 +129,1 @@\n-void JVMCI::ensure_box_caches_initialized(Mutex* lock, TRAPS) {\n-  MutexLocker locker(lock);\n-  \/\/ Check again after locking\n+void JVMCI::ensure_box_caches_initialized(TRAPS) {\n@@ -136,0 +134,2 @@\n+  \/\/ While multiple threads may reach here, that's fine\n+  \/\/ since class initialization is synchronized.\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -117,2 +117,1 @@\n-  \/\/ If non-null, `lock` is acquired to synchronize this operation.\n-  static void ensure_box_caches_initialized(Mutex* lock, TRAPS);\n+  static void ensure_box_caches_initialized(TRAPS);\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -950,1 +950,1 @@\n-    JVMCI::ensure_box_caches_initialized(JVMCI_lock, CHECK_(JVMCI::ok));\n+    JVMCI::ensure_box_caches_initialized(CHECK_(JVMCI::ok));\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}