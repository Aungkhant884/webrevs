{"files":[{"patch":"@@ -855,17 +855,1 @@\n-  if (!MacroAssembler::far_branches()) {\n-    if (entry.rspec().type() == relocInfo::runtime_call_type &&\n-        !CodeCache::contains(target)) {\n-      \/\/ If it is a runtime call of an address outside small CodeCache,\n-      \/\/ we need to check whether it is in range.\n-      assert(target < CodeCache::low_bound() || target >= CodeCache::high_bound(),\n-             \"target is inside CodeCache\");\n-      \/\/ Case 1: -------T-------L====CodeCache====H-------\n-      \/\/                ^-------longest branch---|\n-      \/\/ Case 2: -------L====CodeCache====H-------T-------\n-      \/\/                |-------longest branch ---^\n-      const address longest_branch_start =\n-          (target < CodeCache::low_bound())\n-              ? CodeCache::high_bound() - NativeInstruction::instruction_size\n-              : CodeCache::low_bound();\n-      return Assembler::reachable_from_branch_at(longest_branch_start, target);\n-    }\n+  if (!MacroAssembler::far_branches() && CodeCache::contains(target)) {\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"}]}