{"files":[{"patch":"@@ -48,0 +48,1 @@\n+  LOG_TAG(cause) \\\n@@ -127,0 +128,1 @@\n+  LOG_TAG(native) \\\n","filename":"src\/hotspot\/share\/logging\/logTag.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3742,11 +3742,0 @@\n-  if (TraceClassLoadingCause != nullptr &&\n-      (strcmp(TraceClassLoadingCause, \"*\") == 0 || strstr(external_name(), TraceClassLoadingCause) != nullptr))\n-  {\n-    stringStream st;\n-    st.print_cr(\"Loading %s\", external_name());\n-    Thread* current = Thread::current_or_null();\n-    if (current != nullptr && current->is_Java_thread()) {\n-      JavaThread::cast(current)->print_stack_on(&st);\n-    }\n-    tty->print_raw(st.as_string());\n-  }\n@@ -3758,0 +3747,2 @@\n+  print_class_load_cause_logging();\n+\n@@ -3844,0 +3835,53 @@\n+void InstanceKlass::print_class_load_cause_logging() const {\n+  bool log_cause_native = log_is_enabled(Info, class, load, cause, native);\n+  if (log_cause_native || log_is_enabled(Info, class, load, cause)) {\n+    JavaThread* current = JavaThread::current();\n+    ResourceMark rm;\n+    const char* name = external_name();\n+\n+    if (LogClassLoadingCauseFor != nullptr &&\n+        strstr(name, LogClassLoadingCauseFor) == nullptr) {\n+        return;\n+    }\n+\n+    \/\/ Log Java stack first\n+    {\n+      LogMessage(class, load, cause) msg;\n+      NonInterleavingLogStream info_stream{LogLevelType::Info, msg};\n+\n+      info_stream.print_cr(\"Java stack when loading %s:\", name);\n+      current->print_stack_on(&info_stream);\n+    }\n+\n+    \/\/ Log native stack second\n+    if (log_cause_native) {\n+      \/\/ Log to string first so that lines can be indented\n+      stringStream stack_stream;\n+      char buf[O_BUFLEN];\n+      frame f = os::current_frame();\n+      VMError::print_native_stack(&stack_stream, f, current, true \/*print_source_info *\/,\n+                                  -1 \/* max stack_stream *\/, buf, O_BUFLEN);\n+\n+      LogMessage(class, load, cause, native) msg;\n+      NonInterleavingLogStream info_stream{LogLevelType::Info, msg};\n+      info_stream.print_cr(\"Native stack when loading %s:\", name);\n+\n+      \/\/ Print each native stack line to the log\n+      int size = (int) stack_stream.size();\n+      char* stack = stack_stream.as_string();\n+      char* stack_end = stack + size;\n+      char* line_start = stack;\n+      for (char* p = stack; p < stack_end; p++) {\n+        if (*p == '\\n') {\n+          *p = '\\0';\n+          info_stream.print_cr(\"\\t%s\", line_start);\n+          line_start = p + 1;\n+        }\n+      }\n+      if (line_start < stack_end) {\n+        info_stream.print_cr(\"\\t%s\", line_start);\n+      }\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":55,"deletions":11,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -1173,0 +1173,2 @@\n+ private:\n+  void print_class_load_cause_logging() const;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -935,4 +935,3 @@\n-  product(ccstr, TraceClassLoadingCause, nullptr, DIAGNOSTIC,               \\\n-          \"Print a stack trace when loading a class whose fully\"            \\\n-          \"qualified name contains this string (\\\"*\\\" matches \"             \\\n-          \"any class).\")                                                    \\\n+  product(ccstr, LogClassLoadingCauseFor, nullptr,                          \\\n+          \"Restrict -Xlog:class+load+cause* to a class whose fully\"         \\\n+          \"qualified name contains this string.\")                           \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}