{"files":[{"patch":"@@ -48,0 +48,1 @@\n+  LOG_TAG(cause) \\\n@@ -127,0 +128,1 @@\n+  LOG_TAG(native) \\\n","filename":"src\/hotspot\/share\/logging\/logTag.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,0 +85,1 @@\n+#include \"runtime\/os.inline.hpp\"\n@@ -3742,0 +3743,1 @@\n+\n@@ -3746,20 +3748,20 @@\n-  if (!log_is_enabled(Info, class, load)) {\n-    return;\n-  }\n-\n-  ResourceMark rm;\n-  LogMessage(class, load) msg;\n-  stringStream info_stream;\n-\n-  \/\/ Name and class hierarchy info\n-  info_stream.print(\"%s\", external_name());\n-\n-  \/\/ Source\n-  if (cfs != nullptr) {\n-    if (cfs->source() != nullptr) {\n-      const char* module_name = (module_entry->name() == nullptr) ? UNNAMED_MODULE : module_entry->name()->as_C_string();\n-      if (module_name != nullptr) {\n-        \/\/ When the boot loader created the stream, it didn't know the module name\n-        \/\/ yet. Let's format it now.\n-        if (cfs->from_boot_loader_modules_image()) {\n-          info_stream.print(\" source: jrt:\/%s\", module_name);\n+  if (log_is_enabled(Info, class, load)) {\n+    ResourceMark rm;\n+    LogMessage(class, load) msg;\n+    stringStream info_stream;\n+\n+    \/\/ Name and class hierarchy info\n+    info_stream.print(\"%s\", external_name());\n+\n+    \/\/ Source\n+    if (cfs != nullptr) {\n+      if (cfs->source() != nullptr) {\n+        const char* module_name = (module_entry->name() == nullptr) ? UNNAMED_MODULE : module_entry->name()->as_C_string();\n+        if (module_name != nullptr) {\n+          \/\/ When the boot loader created the stream, it didn't know the module name\n+          \/\/ yet. Let's format it now.\n+          if (cfs->from_boot_loader_modules_image()) {\n+            info_stream.print(\" source: jrt:\/%s\", module_name);\n+          } else {\n+            info_stream.print(\" source: %s\", cfs->source());\n+          }\n@@ -3769,0 +3771,11 @@\n+      } else if (loader_data == ClassLoaderData::the_null_class_loader_data()) {\n+        Thread* current = Thread::current();\n+        Klass* caller = current->is_Java_thread() ?\n+          JavaThread::cast(current)->security_get_caller_class(1):\n+          nullptr;\n+        \/\/ caller can be null, for example, during a JVMTI VM_Init hook\n+        if (caller != nullptr) {\n+          info_stream.print(\" source: instance of %s\", caller->external_name());\n+        } else {\n+          \/\/ source is unknown\n+        }\n@@ -3770,1 +3783,2 @@\n-        info_stream.print(\" source: %s\", cfs->source());\n+        oop class_loader = loader_data->class_loader();\n+        info_stream.print(\" source: %s\", class_loader->klass()->external_name());\n@@ -3772,8 +3786,4 @@\n-    } else if (loader_data == ClassLoaderData::the_null_class_loader_data()) {\n-      Thread* current = Thread::current();\n-      Klass* caller = current->is_Java_thread() ?\n-        JavaThread::cast(current)->security_get_caller_class(1):\n-        nullptr;\n-      \/\/ caller can be null, for example, during a JVMTI VM_Init hook\n-      if (caller != nullptr) {\n-        info_stream.print(\" source: instance of %s\", caller->external_name());\n+    } else {\n+      assert(this->is_shared(), \"must be\");\n+      if (MetaspaceShared::is_shared_dynamic((void*)this)) {\n+        info_stream.print(\" source: shared objects file (top)\");\n@@ -3781,1 +3791,1 @@\n-        \/\/ source is unknown\n+        info_stream.print(\" source: shared objects file\");\n@@ -3783,3 +3793,0 @@\n-    } else {\n-      oop class_loader = loader_data->class_loader();\n-      info_stream.print(\" source: %s\", class_loader->klass()->external_name());\n@@ -3787,8 +3794,0 @@\n-  } else {\n-    assert(this->is_shared(), \"must be\");\n-    if (MetaspaceShared::is_shared_dynamic((void*)this)) {\n-      info_stream.print(\" source: shared objects file (top)\");\n-    } else {\n-      info_stream.print(\" source: shared objects file\");\n-    }\n-  }\n@@ -3796,1 +3795,1 @@\n-  msg.info(\"%s\", info_stream.as_string());\n+    msg.info(\"%s\", info_stream.as_string());\n@@ -3798,2 +3797,2 @@\n-  if (log_is_enabled(Debug, class, load)) {\n-    stringStream debug_stream;\n+    if (log_is_enabled(Debug, class, load)) {\n+      stringStream debug_stream;\n@@ -3801,3 +3800,3 @@\n-    \/\/ Class hierarchy info\n-    debug_stream.print(\" klass: \" PTR_FORMAT \" super: \" PTR_FORMAT,\n-                       p2i(this),  p2i(superklass()));\n+      \/\/ Class hierarchy info\n+      debug_stream.print(\" klass: \" PTR_FORMAT \" super: \" PTR_FORMAT,\n+                        p2i(this),  p2i(superklass()));\n@@ -3805,7 +3804,21 @@\n-    \/\/ Interfaces\n-    if (local_interfaces() != nullptr && local_interfaces()->length() > 0) {\n-      debug_stream.print(\" interfaces:\");\n-      int length = local_interfaces()->length();\n-      for (int i = 0; i < length; i++) {\n-        debug_stream.print(\" \" PTR_FORMAT,\n-                           p2i(InstanceKlass::cast(local_interfaces()->at(i))));\n+      \/\/ Interfaces\n+      if (local_interfaces() != nullptr && local_interfaces()->length() > 0) {\n+        debug_stream.print(\" interfaces:\");\n+        int length = local_interfaces()->length();\n+        for (int i = 0; i < length; i++) {\n+          debug_stream.print(\" \" PTR_FORMAT,\n+                            p2i(InstanceKlass::cast(local_interfaces()->at(i))));\n+        }\n+      }\n+\n+      \/\/ Class loader\n+      debug_stream.print(\" loader: [\");\n+      loader_data->print_value_on(&debug_stream);\n+      debug_stream.print(\"]\");\n+\n+      \/\/ Classfile checksum\n+      if (cfs) {\n+        debug_stream.print(\" bytes: %d checksum: %08x\",\n+                          cfs->length(),\n+                          ClassLoader::crc32(0, (const char*)cfs->buffer(),\n+                          cfs->length()));\n@@ -3813,0 +3826,2 @@\n+\n+      msg.debug(\"%s\", debug_stream.as_string());\n@@ -3814,0 +3829,3 @@\n+  }\n+  print_class_load_cause_logging();\n+}\n@@ -3815,4 +3833,6 @@\n-    \/\/ Class loader\n-    debug_stream.print(\" loader: [\");\n-    loader_data->print_value_on(&debug_stream);\n-    debug_stream.print(\"]\");\n+void InstanceKlass::print_class_load_cause_logging() const {\n+  bool log_cause_native = log_is_enabled(Info, class, load, cause, native);\n+  if (log_cause_native || log_is_enabled(Info, class, load, cause)) {\n+    JavaThread* current = JavaThread::current();\n+    ResourceMark rm(current);\n+    const char* name = external_name();\n@@ -3820,6 +3840,4 @@\n-    \/\/ Classfile checksum\n-    if (cfs) {\n-      debug_stream.print(\" bytes: %d checksum: %08x\",\n-                         cfs->length(),\n-                         ClassLoader::crc32(0, (const char*)cfs->buffer(),\n-                         cfs->length()));\n+    if (LogClassLoadingCauseFor == nullptr ||\n+        (strcmp(\"*\", LogClassLoadingCauseFor) != 0 &&\n+         strstr(name, LogClassLoadingCauseFor) == nullptr)) {\n+        return;\n@@ -3828,1 +3846,44 @@\n-    msg.debug(\"%s\", debug_stream.as_string());\n+    \/\/ Log Java stack first\n+    {\n+      LogMessage(class, load, cause) msg;\n+      NonInterleavingLogStream info_stream{LogLevelType::Info, msg};\n+\n+      info_stream.print_cr(\"Java stack when loading %s:\", name);\n+      current->print_stack_on(&info_stream);\n+    }\n+\n+    \/\/ Log native stack second\n+    if (log_cause_native) {\n+      \/\/ Log to string first so that lines can be indented\n+      stringStream stack_stream;\n+      char buf[O_BUFLEN];\n+      address lastpc = nullptr;\n+      if (os::platform_print_native_stack(&stack_stream, nullptr, buf, O_BUFLEN, lastpc)) {\n+        \/\/ We have printed the native stack in platform-specific code,\n+        \/\/ so nothing else to do in this case.\n+      } else {\n+        frame f = os::current_frame();\n+        VMError::print_native_stack(&stack_stream, f, current, true \/*print_source_info *\/,\n+                                    -1 \/* max stack_stream *\/, buf, O_BUFLEN);\n+      }\n+\n+      LogMessage(class, load, cause, native) msg;\n+      NonInterleavingLogStream info_stream{LogLevelType::Info, msg};\n+      info_stream.print_cr(\"Native stack when loading %s:\", name);\n+\n+      \/\/ Print each native stack line to the log\n+      int size = (int) stack_stream.size();\n+      char* stack = stack_stream.as_string();\n+      char* stack_end = stack + size;\n+      char* line_start = stack;\n+      for (char* p = stack; p < stack_end; p++) {\n+        if (*p == '\\n') {\n+          *p = '\\0';\n+          info_stream.print_cr(\"\\t%s\", line_start);\n+          line_start = p + 1;\n+        }\n+      }\n+      if (line_start < stack_end) {\n+        info_stream.print_cr(\"\\t%s\", line_start);\n+      }\n+    }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":126,"deletions":65,"binary":false,"changes":191,"status":"modified"},{"patch":"@@ -1173,0 +1173,2 @@\n+ private:\n+  void print_class_load_cause_logging() const;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3966,0 +3966,6 @@\n+  bool log_class_load_cause = log_is_enabled(Info, class, load, cause, native) ||\n+                              log_is_enabled(Info, class, load, cause);\n+  if (log_class_load_cause && LogClassLoadingCauseFor == nullptr) {\n+    warning(\"class load cause logging will not produce output without LogClassLoadingCauseFor\");\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -935,0 +935,5 @@\n+  product(ccstr, LogClassLoadingCauseFor, nullptr,                          \\\n+          \"Apply -Xlog:class+load+cause* to classes whose fully \"           \\\n+          \"qualified name contains this string (\\\"*\\\" matches \"             \\\n+          \"any class).\")                                                    \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -121,0 +121,17 @@\n+        \/\/  -Xlog:class+load+cause\n+        pb = exec(\"-Xlog:class+load+cause\");\n+        checkAbsent(\"[class,load,cause]\");\n+        checkFor(\"class load cause logging will not produce output without LogClassLoadingCauseFor\");\n+\n+        \/\/  -Xlog:class+load+cause -XX:LogClassLoadingCauseFor=java.lang.StringCoding\n+        pb = exec(\"-Xlog:class+load+cause\", \"-XX:LogClassLoadingCauseFor=java.lang.StringCoding\");\n+        checkFor(\"[class,load,cause]\", \"Java stack when loading java.lang.StringCoding:\");\n+\n+        \/\/  -Xlog:class+load+cause -XX:LogClassLoadingCauseFor=java.lang.StringCoding\n+        pb = exec(\"-Xlog:class+load+cause+native\", \"-XX:LogClassLoadingCauseFor=java.lang.StringCoding\");\n+        checkFor(\"[class,load,cause,native]\", \"Native stack when loading java.lang.StringCoding:\");\n+\n+        \/\/  -Xlog:class+load+cause* -XX:LogClassLoadingCauseFor=java.lang.StringCoding\n+        pb = exec(\"-Xlog:class+load+cause*\", \"-XX:LogClassLoadingCauseFor=java.lang.StringCoding\");\n+        checkFor(\"[class,load,cause] Java stack when loading java.lang.StringCoding:\");\n+        checkFor(\"[class,load,cause,native] Native stack when loading java.lang.StringCoding:\");\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/ClassLoadUnloadTest.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}