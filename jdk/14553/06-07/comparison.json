{"files":[{"patch":"@@ -3748,22 +3748,20 @@\n-  print_class_load_cause_logging();\n-\n-  if (!log_is_enabled(Info, class, load)) {\n-    return;\n-  }\n-\n-  ResourceMark rm;\n-  LogMessage(class, load) msg;\n-  stringStream info_stream;\n-\n-  \/\/ Name and class hierarchy info\n-  info_stream.print(\"%s\", external_name());\n-\n-  \/\/ Source\n-  if (cfs != nullptr) {\n-    if (cfs->source() != nullptr) {\n-      const char* module_name = (module_entry->name() == nullptr) ? UNNAMED_MODULE : module_entry->name()->as_C_string();\n-      if (module_name != nullptr) {\n-        \/\/ When the boot loader created the stream, it didn't know the module name\n-        \/\/ yet. Let's format it now.\n-        if (cfs->from_boot_loader_modules_image()) {\n-          info_stream.print(\" source: jrt:\/%s\", module_name);\n+  if (log_is_enabled(Info, class, load)) {\n+    ResourceMark rm;\n+    LogMessage(class, load) msg;\n+    stringStream info_stream;\n+\n+    \/\/ Name and class hierarchy info\n+    info_stream.print(\"%s\", external_name());\n+\n+    \/\/ Source\n+    if (cfs != nullptr) {\n+      if (cfs->source() != nullptr) {\n+        const char* module_name = (module_entry->name() == nullptr) ? UNNAMED_MODULE : module_entry->name()->as_C_string();\n+        if (module_name != nullptr) {\n+          \/\/ When the boot loader created the stream, it didn't know the module name\n+          \/\/ yet. Let's format it now.\n+          if (cfs->from_boot_loader_modules_image()) {\n+            info_stream.print(\" source: jrt:\/%s\", module_name);\n+          } else {\n+            info_stream.print(\" source: %s\", cfs->source());\n+          }\n@@ -3773,0 +3771,11 @@\n+      } else if (loader_data == ClassLoaderData::the_null_class_loader_data()) {\n+        Thread* current = Thread::current();\n+        Klass* caller = current->is_Java_thread() ?\n+          JavaThread::cast(current)->security_get_caller_class(1):\n+          nullptr;\n+        \/\/ caller can be null, for example, during a JVMTI VM_Init hook\n+        if (caller != nullptr) {\n+          info_stream.print(\" source: instance of %s\", caller->external_name());\n+        } else {\n+          \/\/ source is unknown\n+        }\n@@ -3774,1 +3783,2 @@\n-        info_stream.print(\" source: %s\", cfs->source());\n+        oop class_loader = loader_data->class_loader();\n+        info_stream.print(\" source: %s\", class_loader->klass()->external_name());\n@@ -3776,8 +3786,4 @@\n-    } else if (loader_data == ClassLoaderData::the_null_class_loader_data()) {\n-      Thread* current = Thread::current();\n-      Klass* caller = current->is_Java_thread() ?\n-        JavaThread::cast(current)->security_get_caller_class(1):\n-        nullptr;\n-      \/\/ caller can be null, for example, during a JVMTI VM_Init hook\n-      if (caller != nullptr) {\n-        info_stream.print(\" source: instance of %s\", caller->external_name());\n+    } else {\n+      assert(this->is_shared(), \"must be\");\n+      if (MetaspaceShared::is_shared_dynamic((void*)this)) {\n+        info_stream.print(\" source: shared objects file (top)\");\n@@ -3785,1 +3791,1 @@\n-        \/\/ source is unknown\n+        info_stream.print(\" source: shared objects file\");\n@@ -3787,10 +3793,0 @@\n-    } else {\n-      oop class_loader = loader_data->class_loader();\n-      info_stream.print(\" source: %s\", class_loader->klass()->external_name());\n-    }\n-  } else {\n-    assert(this->is_shared(), \"must be\");\n-    if (MetaspaceShared::is_shared_dynamic((void*)this)) {\n-      info_stream.print(\" source: shared objects file (top)\");\n-    } else {\n-      info_stream.print(\" source: shared objects file\");\n@@ -3798,1 +3794,0 @@\n-  }\n@@ -3800,1 +3795,1 @@\n-  msg.info(\"%s\", info_stream.as_string());\n+    msg.info(\"%s\", info_stream.as_string());\n@@ -3802,2 +3797,2 @@\n-  if (log_is_enabled(Debug, class, load)) {\n-    stringStream debug_stream;\n+    if (log_is_enabled(Debug, class, load)) {\n+      stringStream debug_stream;\n@@ -3805,3 +3800,3 @@\n-    \/\/ Class hierarchy info\n-    debug_stream.print(\" klass: \" PTR_FORMAT \" super: \" PTR_FORMAT,\n-                       p2i(this),  p2i(superklass()));\n+      \/\/ Class hierarchy info\n+      debug_stream.print(\" klass: \" PTR_FORMAT \" super: \" PTR_FORMAT,\n+                        p2i(this),  p2i(superklass()));\n@@ -3809,7 +3804,8 @@\n-    \/\/ Interfaces\n-    if (local_interfaces() != nullptr && local_interfaces()->length() > 0) {\n-      debug_stream.print(\" interfaces:\");\n-      int length = local_interfaces()->length();\n-      for (int i = 0; i < length; i++) {\n-        debug_stream.print(\" \" PTR_FORMAT,\n-                           p2i(InstanceKlass::cast(local_interfaces()->at(i))));\n+      \/\/ Interfaces\n+      if (local_interfaces() != nullptr && local_interfaces()->length() > 0) {\n+        debug_stream.print(\" interfaces:\");\n+        int length = local_interfaces()->length();\n+        for (int i = 0; i < length; i++) {\n+          debug_stream.print(\" \" PTR_FORMAT,\n+                            p2i(InstanceKlass::cast(local_interfaces()->at(i))));\n+        }\n@@ -3817,1 +3813,0 @@\n-    }\n@@ -3819,4 +3814,12 @@\n-    \/\/ Class loader\n-    debug_stream.print(\" loader: [\");\n-    loader_data->print_value_on(&debug_stream);\n-    debug_stream.print(\"]\");\n+      \/\/ Class loader\n+      debug_stream.print(\" loader: [\");\n+      loader_data->print_value_on(&debug_stream);\n+      debug_stream.print(\"]\");\n+\n+      \/\/ Classfile checksum\n+      if (cfs) {\n+        debug_stream.print(\" bytes: %d checksum: %08x\",\n+                          cfs->length(),\n+                          ClassLoader::crc32(0, (const char*)cfs->buffer(),\n+                          cfs->length()));\n+      }\n@@ -3824,6 +3827,1 @@\n-    \/\/ Classfile checksum\n-    if (cfs) {\n-      debug_stream.print(\" bytes: %d checksum: %08x\",\n-                         cfs->length(),\n-                         ClassLoader::crc32(0, (const char*)cfs->buffer(),\n-                         cfs->length()));\n+      msg.debug(\"%s\", debug_stream.as_string());\n@@ -3831,2 +3829,0 @@\n-\n-    msg.debug(\"%s\", debug_stream.as_string());\n@@ -3834,0 +3830,1 @@\n+  print_class_load_cause_logging();\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":66,"deletions":69,"binary":false,"changes":135,"status":"modified"}]}