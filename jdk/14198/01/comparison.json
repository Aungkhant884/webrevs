{"files":[{"patch":"@@ -125,1 +125,1 @@\n-  NativeCall* call = NULL;\n+  NativeCall* call = nullptr;\n@@ -158,1 +158,1 @@\n-    if (nop == NULL) {\n+    if (nop == nullptr) {\n","filename":"src\/hotspot\/cpu\/aarch64\/jvmciCodeInstaller_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -735,1 +735,1 @@\n-  void load_klass_check_null(Register dst, Register src, Label* is_null = NULL);\n+  void load_klass_check_null(Register dst, Register src, Label* is_null = nullptr);\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4700,1 +4700,1 @@\n-    if (UnsafeCopyMemory::_table == NULL) {\n+    if (UnsafeCopyMemory::_table == nullptr) {\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2297,1 +2297,1 @@\n-  \/\/ The invokedynamic is unresolved iff method is NULL\n+  \/\/ The invokedynamic is unresolved iff method is null\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-  if (cb->stubs()->maybe_expand_to_ensure_remaining(total_requested_size) && cb->blob() == NULL) {\n+  if (cb->stubs()->maybe_expand_to_ensure_remaining(total_requested_size) && cb->blob() == nullptr) {\n","filename":"src\/hotspot\/cpu\/riscv\/codeBuffer_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -374,1 +374,1 @@\n-  __ beqz(obj, error);           \/\/ if klass is NULL it is broken\n+  __ beqz(obj, error);           \/\/ if klass is null it is broken\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4019,1 +4019,1 @@\n-    if (UnsafeCopyMemory::_table == NULL) {\n+    if (UnsafeCopyMemory::_table == nullptr) {\n@@ -4077,1 +4077,1 @@\n-    if (bs_nm != NULL) {\n+    if (bs_nm != nullptr) {\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -489,1 +489,1 @@\n-  __ jcc(Assembler::zero, error); \/\/ if klass is NULL it is broken\n+  __ jcc(Assembler::zero, error); \/\/ if klass is null it is broken\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -303,1 +303,1 @@\n-         \" last_sp != nullptr\");\n+         \" last_sp isn't null\");\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-    if (nop == NULL) {\n+    if (nop == nullptr) {\n","filename":"src\/hotspot\/cpu\/x86\/jvmciCodeInstaller_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-  for (pipeline->_reslist.reset(); (resource = pipeline->_reslist.iter()) != NULL;) {\n+  for (pipeline->_reslist.reset(); (resource = pipeline->_reslist.iter()) != nullptr;) {\n@@ -305,1 +305,1 @@\n-  for (pipeline->_reslist.reset(); (resource = pipeline->_reslist.iter()) != NULL;) {\n+  for (pipeline->_reslist.reset(); (resource = pipeline->_reslist.iter()) != nullptr;) {\n@@ -368,1 +368,1 @@\n-  for (pipeline->_reslist.reset(); (resource = pipeline->_reslist.iter()) != NULL;) {\n+  for (pipeline->_reslist.reset(); (resource = pipeline->_reslist.iter()) != nullptr;) {\n@@ -393,1 +393,1 @@\n-  for (pipeline->_reslist.reset(); (resource = pipeline->_reslist.iter()) != NULL;) {\n+  for (pipeline->_reslist.reset(); (resource = pipeline->_reslist.iter()) != nullptr;) {\n@@ -1009,1 +1009,1 @@\n-  for (_pipeline->_reslist.reset(); (resource = _pipeline->_reslist.iter()) != NULL;) {\n+  for (_pipeline->_reslist.reset(); (resource = _pipeline->_reslist.iter()) != nullptr;) {\n","filename":"src\/hotspot\/share\/adlc\/output_c.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -363,1 +363,1 @@\n-  assert(ent != NULL, \"sanity\");\n+  assert(ent != nullptr, \"sanity\");\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-  static oop init_shared_table(const DumpedInternedStrings* dumped_interned_strings) NOT_CDS_JAVA_HEAP_RETURN_(NULL);\n+  static oop init_shared_table(const DumpedInternedStrings* dumped_interned_strings) NOT_CDS_JAVA_HEAP_RETURN_(nullptr);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-    assert(_cached_value != nullptr, \"must be non-nullptr\");\n+    assert(_cached_value != nullptr, \"must be non-null\");\n@@ -342,1 +342,1 @@\n-  \/\/ Returns NULL if CodeBuffer::expand fails\n+  \/\/ Returns null if CodeBuffer::expand fails\n","filename":"src\/hotspot\/share\/code\/compiledIC.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -388,1 +388,1 @@\n-  \/\/ If _first is nullptr we have no more compile jobs. There are two reasons for\n+  \/\/ If _first is null we have no more compile jobs. There are two reasons for\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -242,1 +242,1 @@\n-  return NULL;\n+  return nullptr;\n","filename":"src\/hotspot\/share\/gc\/x\/xBarrier.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n-    return Raw::oop_arraycopy_in_heap(nullptr, 0, src, NULL, 0, dst, length);\n+    return Raw::oop_arraycopy_in_heap(nullptr, 0, src, nullptr, 0, dst, length);\n","filename":"src\/hotspot\/share\/gc\/x\/xBarrierSet.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    if (entry != NULL && entry != _prev) {\n+    if (entry != nullptr && entry != _prev) {\n","filename":"src\/hotspot\/share\/gc\/x\/xPageTable.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -383,1 +383,1 @@\n-    st->print_raw_cr(\"NULL\");\n+    st->print_raw_cr(\"null\");\n@@ -438,1 +438,1 @@\n-    st->print_raw_cr(\"NULL\");\n+    st->print_raw_cr(\"null\");\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -816,1 +816,1 @@\n-            (klass == nullptr ? \"<nullptr>\" : klass->internal_name()),\n+            (klass == nullptr ? \"<null>\" : klass->internal_name()),\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -162,1 +162,1 @@\n-    JavaPermission p = {\"java.lang.management.ManagementPermission\", \"monitor\", NULL};\n+    JavaPermission p = {\"java.lang.management.ManagementPermission\", \"monitor\", nullptr};\n@@ -187,1 +187,1 @@\n-    JavaPermission p = {\"java.lang.management.ManagementPermission\", \"monitor\", NULL};\n+    JavaPermission p = {\"java.lang.management.ManagementPermission\", \"monitor\", nullptr};\n","filename":"src\/hotspot\/share\/jfr\/dcmd\/jfrDcmds.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-  assert(name_str != nullptr, \"unexpected nullptr thread name\");\n+  assert(name_str != nullptr, \"unexpected null thread name\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrThreadState.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-    \/\/ new output is nullptr and current output is null\n+    \/\/ new output is null and current output is null\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrRepository.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-  return new_buffer; \/\/ might be nullptr\n+  return new_buffer; \/\/ might be null\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stringpool\/jfrStringPool.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -366,1 +366,1 @@\n-    if (ex != NULL) {\n+    if (ex != nullptr) {\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-    \/\/ All readers of _instance after the fence see non-nullptr.\n+    \/\/ All readers of _instance after the fence see non-null.\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -481,1 +481,1 @@\n-  assert(errstream != nullptr, \"errstream can not be nullptr\");\n+  assert(errstream != nullptr, \"errstream can not be null\");\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-  \/\/ Create a new output. Returns nullptr if failed.\n+  \/\/ Create a new output. Returns null if failed.\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-  \/\/ Setting this to nullptr will disable prefixing.\n+  \/\/ Setting this to null will disable prefixing.\n","filename":"src\/hotspot\/share\/logging\/logMessageBuffer.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-  \/\/ Constructor to support creation from typed (likely nullptr) pointer. Mostly used by the logging framework.\n+  \/\/ Constructor to support creation from typed (likely null) pointer. Mostly used by the logging framework.\n","filename":"src\/hotspot\/share\/logging\/logStream.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -878,1 +878,1 @@\n-  assert(loader_data != nullptr, \"Should never pass around a nullptr loader_data. \"\n+  assert(loader_data != nullptr, \"Should never pass around a null loader_data. \"\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -280,1 +280,1 @@\n-  assert(base() != nullptr, \"Base pointer nullptr\");\n+  assert(base() != nullptr, \"Base pointer null\");\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metachunk.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -346,1 +346,1 @@\n-    UL(info, \"allocation failed, returned nullptr.\");\n+    UL(info, \"allocation failed, returned null.\");\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceArena.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -469,1 +469,1 @@\n-          assert(m != nullptr, \"archived mirrors should not be nullptr\");\n+          assert(m != nullptr, \"archived mirrors should not be null\");\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -598,1 +598,1 @@\n-      log_trace(gc, heap, coops)(\"Trying to allocate at address nullptr heap of size \" SIZE_FORMAT_X, size + noaccess_prefix);\n+      log_trace(gc, heap, coops)(\"Trying to allocate at address null heap of size \" SIZE_FORMAT_X, size + noaccess_prefix);\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -888,1 +888,1 @@\n-  LogStream* log_stream = NULL;\n+  LogStream* log_stream = nullptr;\n@@ -906,1 +906,1 @@\n-    assert(resolved_references->obj_at(appendix_index) == NULL, \"init just once\");\n+    assert(resolved_references->obj_at(appendix_index) == nullptr, \"init just once\");\n@@ -914,1 +914,1 @@\n-  if (log_stream != NULL) {\n+  if (log_stream != nullptr) {\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -491,1 +491,1 @@\n-  fields[TypeFunc::Parms+0] = NULL; \/\/ void\n+  fields[TypeFunc::Parms+0] = nullptr; \/\/ void\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -375,1 +375,1 @@\n-  const jint err = (*on_load_entry)(&main_vm, const_cast<char*>(agent->options()), NULL);\n+  const jint err = (*on_load_entry)(&main_vm, const_cast<char*>(agent->options()), nullptr);\n","filename":"src\/hotspot\/share\/prims\/jvmtiAgent.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -248,1 +248,1 @@\n-\/\/ no-op if thread is non-NULL and not a virtual thread\n+\/\/ no-op if thread is non-null and not a virtual thread\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1885,1 +1885,1 @@\n-  if (cp->cache() == NULL) {\n+  if (cp->cache() == nullptr) {\n@@ -1894,1 +1894,1 @@\n-  if (cp->cache() == NULL) {\n+  if (cp->cache() == nullptr) {\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-        st->print(\"nullptr\");\n+        st->print(\"null\");\n@@ -171,1 +171,1 @@\n-        st->print(\"nullptr\");\n+        st->print(\"null\");\n","filename":"src\/hotspot\/share\/runtime\/fieldDescriptor.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -550,1 +550,1 @@\n-  product(ccstr, HeapDumpPath, nullptr, MANAGEABLE,                            \\\n+  product(ccstr, HeapDumpPath, nullptr, MANAGEABLE,                         \\\n@@ -604,1 +604,1 @@\n-  product(ccstr, PrintAssemblyOptions, nullptr, DIAGNOSTIC,                    \\\n+  product(ccstr, PrintAssemblyOptions, nullptr, DIAGNOSTIC,                 \\\n@@ -632,1 +632,1 @@\n-          \"Start debugger when an implicit OS (e.g. nullptr) \"                 \\\n+          \"Start debugger when an implicit OS (e.g. null pointer) \"         \\\n@@ -838,1 +838,1 @@\n-  product(ccstr, TraceJVMTI, nullptr,                                          \\\n+  product(ccstr, TraceJVMTI, nullptr,                                       \\\n@@ -1028,1 +1028,1 @@\n-  product(ccstr, LogFile, nullptr, DIAGNOSTIC,                                 \\\n+  product(ccstr, LogFile, nullptr, DIAGNOSTIC,                              \\\n@@ -1032,1 +1032,1 @@\n-  product(ccstr, ErrorFile, nullptr,                                           \\\n+  product(ccstr, ErrorFile, nullptr,                                        \\\n@@ -1069,1 +1069,1 @@\n-  product(ccstr, AbortVMOnException, nullptr, DIAGNOSTIC,                      \\\n+  product(ccstr, AbortVMOnException, nullptr, DIAGNOSTIC,                   \\\n@@ -1073,1 +1073,1 @@\n-  product(ccstr, AbortVMOnExceptionMessage, nullptr, DIAGNOSTIC,               \\\n+  product(ccstr, AbortVMOnExceptionMessage, nullptr, DIAGNOSTIC,            \\\n@@ -1385,1 +1385,1 @@\n-  product(double, MinInlineFrequencyRatio, 0.0085, DIAGNOSTIC,               \\\n+  product(double, MinInlineFrequencyRatio, 0.0085, DIAGNOSTIC,              \\\n@@ -1730,1 +1730,1 @@\n-  product(ccstr, PerfDataSaveFile, nullptr,                                    \\\n+  product(ccstr, PerfDataSaveFile, nullptr,                                 \\\n@@ -1917,1 +1917,1 @@\n-  product(ccstr, AllocateHeapAt, nullptr,                                      \\\n+  product(ccstr, AllocateHeapAt, nullptr,                                   \\\n@@ -1952,1 +1952,1 @@\n-  JFR_ONLY(product(ccstr, FlightRecorderOptions, nullptr,                      \\\n+  JFR_ONLY(product(ccstr, FlightRecorderOptions, nullptr,                   \\\n@@ -1955,1 +1955,1 @@\n-  JFR_ONLY(product(ccstr, StartFlightRecording, nullptr,                       \\\n+  JFR_ONLY(product(ccstr, StartFlightRecording, nullptr,                    \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-  oop     non_null_obj() const                   { assert(_handle != nullptr, \"resolving nullptr handle\"); return *_handle; }\n+  oop     non_null_obj() const                   { assert(_handle != nullptr, \"resolving null handle\"); return *_handle; }\n@@ -147,1 +147,1 @@\n-    type*        non_null_obj() const            { assert(_value != nullptr, \"resolving nullptr _value\"); return _value; } \\\n+    type*        non_null_obj() const            { assert(_value != nullptr, \"resolving null _value\"); return _value; } \\\n","filename":"src\/hotspot\/share\/runtime\/handles.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -381,1 +381,1 @@\n-      assert(block->pop_frame_link() == nullptr, \"pop_frame_link should be nullptr\");\n+      assert(block->pop_frame_link() == nullptr, \"pop_frame_link should be null\");\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-  assert(result != nullptr, \"nullptr read from jni handle\");\n+  assert(result != nullptr, \"null read from jni handle\");\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -539,1 +539,1 @@\n-    \/\/ Set a nullptr owner to DEFLATER_MARKER to force any contending thread\n+    \/\/ Set a null owner to DEFLATER_MARKER to force any contending thread\n@@ -564,1 +564,1 @@\n-      \/\/ ObjectMonitor is now busy. Restore owner to nullptr if it is\n+      \/\/ ObjectMonitor is now busy. Restore owner to null if it is\n@@ -669,1 +669,1 @@\n-    \/\/ We report nullptr instead of DEFLATER_MARKER here because is_busy()\n+    \/\/ We report null instead of DEFLATER_MARKER here because is_busy()\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1131,1 +1131,1 @@\n-    st->print_cr(\"0x0 is nullptr\");\n+    st->print_cr(\"0x0 is null\");\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-    assert(cur_tss->get_next() == nullptr, \"Must be nullptr\");\n+    assert(cur_tss->get_next() == nullptr, \"Must be null\");\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -269,1 +269,1 @@\n-  \/\/ osthread() can be nullptr, if creation of thread failed.\n+  \/\/ osthread() can be null, if creation of thread failed.\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -343,1 +343,1 @@\n-  \/\/ Returns the current thread (ASSERTS if nullptr)\n+  \/\/ Returns the current thread (ASSERTS if null)\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -623,1 +623,1 @@\n-\/\/ No real entries, just the final nullptr terminator.\n+\/\/ No real entries, just the final null terminator.\n@@ -845,1 +845,1 @@\n-    \/\/ We captured a non-nullptr JavaThread* before the _tlh was created\n+    \/\/ We captured a non-null JavaThread* before the _tlh was created\n@@ -849,1 +849,1 @@\n-    \/\/ If we captured a non-nullptr JavaThread* after the _tlh was created\n+    \/\/ If we captured a non-null JavaThread* after the _tlh was created\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -335,1 +335,1 @@\n-        \/\/ add a nullptr snapshot if skipped\n+        \/\/ add a null snapshot if skipped\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1071,1 +1071,1 @@\n-      assert(currentThread != nullptr, \"AbstractOwnableSynchronizer owning thread is unexpectedly nullptr\");\n+      assert(currentThread != nullptr, \"AbstractOwnableSynchronizer owning thread is unexpectedly null\");\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1295,1 +1295,1 @@\n-  assert(_new_table == nullptr || _new_table == POISON_PTR, \"Must be nullptr\");\n+  assert(_new_table == nullptr || _new_table == POISON_PTR, \"Must be null\");\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,2 +71,2 @@\n-    assert(src != nullptr, \"address must not be nullptr\");\n-    assert(dst != nullptr, \"address must not be nullptr\");\n+    assert(src != nullptr, \"address must not be null\");\n+    assert(dst != nullptr, \"address must not be null\");\n","filename":"src\/hotspot\/share\/utilities\/copy.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1827,1 +1827,1 @@\n-\/\/ If result is a nullptr, we do not care about the content of the string being read.\n+\/\/ If result is a null, we do not care about the content of the string being read.\n","filename":"src\/hotspot\/share\/utilities\/elfFile.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-  \/\/ return the function address for the function descriptor at 'index' or nullptr on error\n+  \/\/ return the function address for the function descriptor at 'index' or null on error\n","filename":"src\/hotspot\/share\/utilities\/elfFuncDescTable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-  assert(exception != nullptr, \"exception should not be nullptr\");\n+  assert(exception != nullptr, \"exception should not be null\");\n@@ -145,1 +145,1 @@\n-  assert(h_exception() != nullptr, \"exception should not be nullptr\");\n+  assert(h_exception() != nullptr, \"exception should not be null\");\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-\/\/ offset directly when base address is NULL. The -Wno-invalid-offsetof\n+\/\/ offset directly when base address is null. The -Wno-invalid-offsetof\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions_gcc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-    assert(node != nullptr, \"nullptr pointer\");\n+    assert(node != nullptr, \"null pointer\");\n@@ -388,1 +388,1 @@\n-    assert(node != nullptr, \"nullptr pointer\");\n+    assert(node != nullptr, \"null pointer\");\n","filename":"src\/hotspot\/share\/utilities\/linkedlist.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-  \/\/ pointer to that object, or nullptr if this stack is empty. Acts as a\n+  \/\/ pointer to that object, or null if this stack is empty. Acts as a\n@@ -100,1 +100,1 @@\n-  \/\/ Atomically exchange the list of elements with nullptr, returning the old\n+  \/\/ Atomically exchange the list of elements with null, returning the old\n","filename":"src\/hotspot\/share\/utilities\/lockFreeStack.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-\/\/ the value of r may be nullptr.\n+\/\/ the value of r may be null.\n@@ -108,1 +108,1 @@\n-  \/\/ first object, or nullptr if the queue was empty.  If unsuccessful, because\n+  \/\/ first object, or null if the queue was empty.  If unsuccessful, because\n@@ -114,1 +114,1 @@\n-  \/\/ Thread-safe remove and return the first object in the queue, or nullptr\n+  \/\/ Thread-safe remove and return the first object in the queue, or null\n@@ -116,1 +116,1 @@\n-  \/\/ succeeds, returning the (possibly nullptr) element obtained from that.\n+  \/\/ succeeds, returning the (possibly null) element obtained from that.\n","filename":"src\/hotspot\/share\/utilities\/nonblockingQueue.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-\/\/ appended. If the old tail is nullptr then the queue was empty, then the\n+\/\/ appended. If the old tail is null then the queue was empty, then the\n@@ -110,2 +110,2 @@\n-    \/\/ If old_tail is nullptr then the queue was empty, and _head must also be\n-    \/\/ nullptr.  The correctness of this assertion depends on try_pop clearing\n+    \/\/ If old_tail is null then the queue was empty, and _head must also be\n+    \/\/ null. The correctness of this assertion depends on try_pop clearing\n@@ -129,1 +129,1 @@\n-    \/\/ list.  The queue was logically empty.  _head is either nullptr or\n+    \/\/ list. The queue was logically empty.  _head is either null or\n@@ -155,1 +155,1 @@\n-    \/\/ (2) next_node is nullptr, because a competing try_pop took old_head.\n+    \/\/ (2) next_node is null, because a competing try_pop took old_head.\n@@ -174,1 +174,1 @@\n-      \/\/ _head to nullptr, \"helping\" the competing try_pop.  _head will remain\n+      \/\/ _head to null, \"helping\" the competing try_pop.  _head will remain\n@@ -194,1 +194,1 @@\n-    \/\/ value to nullptr.  However, this leaves the queue in disarray.  Fix up\n+    \/\/ value to null.  However, this leaves the queue in disarray.  Fix up\n@@ -203,1 +203,1 @@\n-    \/\/ Attempt to change the queue head from old_head to nullptr.  Failure of\n+    \/\/ Attempt to change the queue head from old_head to null.  Failure of\n@@ -208,1 +208,1 @@\n-    \/\/ Attempt to change the queue tail from old_head to nullptr.  Failure of\n+    \/\/ Attempt to change the queue tail from old_head to null.  Failure of\n","filename":"src\/hotspot\/share\/utilities\/nonblockingQueue.inline.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -709,1 +709,1 @@\n-    \/\/ and leave xtty as nullptr\n+    \/\/ and leave xtty as null\n@@ -765,1 +765,1 @@\n-        assert(p->key() != nullptr, \"p->key() is nullptr\");\n+        assert(p->key() != nullptr, \"p->key() is null\");\n@@ -771,1 +771,1 @@\n-          assert(p->value() != nullptr, \"p->value() is nullptr\");\n+          assert(p->value() != nullptr, \"p->value() is null\");\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -327,1 +327,1 @@\n-      \/\/ Note: if _limit_ptr is nullptr, the ARR& is never reassigned,\n+      \/\/ Note: if _limit_ptr is null, the ARR& is never reassigned,\n","filename":"src\/hotspot\/share\/utilities\/unsigned5.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-  \/\/ Returns nullptr if 'c' it not found. This only works as long\n+  \/\/ Returns null if 'c' it not found. This only works as long\n","filename":"src\/hotspot\/share\/utilities\/utf8.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  static Thread*     _thread;           \/\/ nullptr if it's native thread\n+  static Thread*     _thread;           \/\/ null if it's native thread\n","filename":"src\/hotspot\/share\/utilities\/vmError.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}