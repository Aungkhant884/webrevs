{"files":[{"patch":"@@ -564,1 +564,1 @@\n-    jlong delay = (jlong) (G1ConcRefinementServiceIntervalMillis - (uintx)since_last_gc.milliseconds());\n+    jlong delay = (jlong) (G1ConcRefinementServiceIntervalMillis - since_last_gc.milliseconds());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-    (JfrTicks::now() - event_time).milliseconds());\n+    (JfrTicks::now() - event_time).milliseconds<double>());\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrThreadCPULoadEvent.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -278,0 +278,1 @@\n+const jint  NANOSECS_PER_MICROSEC = 1000;\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-             (uint64_t)_sleep_time.microseconds());\n+             _sleep_time.microseconds());\n","filename":"src\/hotspot\/share\/utilities\/spinYield.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,5 +35,0 @@\n-template <typename TimeSource, const int unit>\n-inline double conversion(typename TimeSource::Type& value) {\n-  return (double)value * ((double)unit \/ (double)TimeSource::frequency());\n-}\n-\n@@ -49,16 +44,0 @@\n-double ElapsedCounterSource::seconds(Type value) {\n-  return conversion<ElapsedCounterSource, 1>(value);\n-}\n-\n-double ElapsedCounterSource::milliseconds(Type value) {\n-  return conversion<ElapsedCounterSource, MILLIUNITS>(value);\n-}\n-\n-double ElapsedCounterSource::microseconds(Type value) {\n-  return conversion<ElapsedCounterSource, MICROUNITS>(value);\n-}\n-\n-double ElapsedCounterSource::nanoseconds(Type value) {\n-  return conversion<ElapsedCounterSource, NANOUNITS>(value);\n-}\n-\n@@ -87,16 +66,0 @@\n-double FastUnorderedElapsedCounterSource::seconds(Type value) {\n-  return conversion<FastUnorderedElapsedCounterSource, 1>(value);\n-}\n-\n-double FastUnorderedElapsedCounterSource::milliseconds(Type value) {\n-  return conversion<FastUnorderedElapsedCounterSource, MILLIUNITS>(value);\n-}\n-\n-double FastUnorderedElapsedCounterSource::microseconds(Type value) {\n-  return conversion<FastUnorderedElapsedCounterSource, MICROUNITS>(value);\n-}\n-\n-double FastUnorderedElapsedCounterSource::nanoseconds(Type value) {\n-  return conversion<FastUnorderedElapsedCounterSource, NANOUNITS>(value);\n-}\n-\n@@ -123,16 +86,0 @@\n-\n-double CompositeElapsedCounterSource::seconds(Type value) {\n-  return conversion<ElapsedCounterSource, 1>(value.val1);\n-}\n-\n-double CompositeElapsedCounterSource::milliseconds(Type value) {\n-  return conversion<ElapsedCounterSource, MILLIUNITS>(value.val1);\n-}\n-\n-double CompositeElapsedCounterSource::microseconds(Type value) {\n-  return conversion<ElapsedCounterSource, MICROUNITS>(value.val1);\n-}\n-\n-double CompositeElapsedCounterSource::nanoseconds(Type value) {\n-  return conversion<ElapsedCounterSource, NANOUNITS>(value.val1);\n-}\n","filename":"src\/hotspot\/share\/utilities\/ticks.cpp","additions":0,"deletions":53,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -38,4 +38,20 @@\n-  static double seconds(Type value);\n-  static double milliseconds(Type value);\n-  static double microseconds(Type value);\n-  static double nanoseconds(Type value);\n+\n+  template<typename T>\n+  static T seconds(Type value) {\n+    return (T)((double)value \/ (double)NANOSECS_PER_SEC);\n+  }\n+\n+  template<typename T>\n+  static T milliseconds(Type value) {\n+    return (T)((double)value \/ (double)NANOSECS_PER_MILLISEC);\n+  }\n+\n+  template<typename T>\n+  static T microseconds(Type value) {\n+    return (T)((double)value \/ (double)NANOSECS_PER_MICROSEC);\n+  }\n+\n+  template<typename T>\n+  static T nanoseconds(Type value) {\n+    return (T)value;\n+  }\n@@ -54,4 +70,25 @@\n-  static double seconds(Type value);\n-  static double milliseconds(Type value);\n-  static double microseconds(Type value);\n-  static double nanoseconds(Type value);\n+\n+  template <typename TimeSource, const int unit>\n+  static double conversion(typename TimeSource::Type& value) {\n+    return (double)value * ((double)unit \/ (double)TimeSource::frequency());\n+  }\n+\n+  template<typename T>\n+  static T seconds(Type value) {\n+    return (T)conversion<FastUnorderedElapsedCounterSource, 1>(value);\n+  }\n+\n+  template<typename T>\n+  static T milliseconds(Type value) {\n+    return (T)conversion<FastUnorderedElapsedCounterSource, MILLIUNITS>(value);\n+  }\n+\n+  template<typename T>\n+  static T microseconds(Type value) {\n+    return (T)conversion<FastUnorderedElapsedCounterSource, MICROUNITS>(value);\n+  }\n+\n+  template<typename T>\n+  static T nanoseconds(Type value) {\n+    return (T)conversion<FastUnorderedElapsedCounterSource, NANOUNITS>(value);\n+  }\n@@ -103,4 +140,20 @@\n-  static double seconds(Type value);\n-  static double milliseconds(Type value);\n-  static double microseconds(Type value);\n-  static double nanoseconds(Type value);\n+\n+  template<typename T>\n+  static T seconds(Type value) {\n+    return ElapsedCounterSource::seconds<T>(value.val1);\n+  }\n+\n+  template<typename T>\n+  static T milliseconds(Type value) {\n+    return ElapsedCounterSource::milliseconds<T>(value.val1);\n+  }\n+\n+  template<typename T>\n+  static T microseconds(Type value) {\n+    return ElapsedCounterSource::microseconds<T>(value.val1);\n+  }\n+\n+  template<typename T>\n+  static T nanoseconds(Type value) {\n+    return ElapsedCounterSource::nanoseconds<T>(value.val1);\n+  }\n@@ -142,0 +195,1 @@\n+\n@@ -143,1 +197,9 @@\n-    return TimeSource::seconds(_rep);\n+    return TimeSource::template seconds<double>(_rep);\n+  }\n+  template<typename T>\n+  T seconds() const {\n+    return TimeSource::template seconds<T>(_rep);\n+  }\n+\n+  uint64_t milliseconds() const {\n+    return TimeSource::template milliseconds<uint64_t>(_rep);\n@@ -145,2 +207,3 @@\n-  double milliseconds() const {\n-    return TimeSource::milliseconds(_rep);\n+  template<typename T>\n+  T milliseconds() const {\n+    return TimeSource::template milliseconds<T>(_rep);\n@@ -148,2 +211,11 @@\n-  double microseconds() const {\n-    return TimeSource::microseconds(_rep);\n+\n+  uint64_t microseconds() const {\n+    return TimeSource::template microseconds<uint64_t>(_rep);\n+  }\n+  template<typename T>\n+  T microseconds() const {\n+    return TimeSource::template microseconds<T>(_rep);\n+  }\n+\n+  uint64_t nanoseconds() const {\n+    return TimeSource::template nanoseconds<uint64_t>(_rep);\n@@ -151,2 +223,3 @@\n-  double nanoseconds() const {\n-    return TimeSource::nanoseconds(_rep);\n+  template<typename T>\n+  T nanoseconds() const {\n+    return TimeSource::template nanoseconds<T>(_rep);\n","filename":"src\/hotspot\/share\/utilities\/ticks.hpp","additions":92,"deletions":19,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -59,2 +59,3 @@\n-    static uint64_t nanoseconds(Type value) {\n-      return value;\n+    template<typename T>\n+    static T nanoseconds(Type value) {\n+      return (T)value;\n","filename":"test\/hotspot\/gtest\/jfr\/test_networkUtilization.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}