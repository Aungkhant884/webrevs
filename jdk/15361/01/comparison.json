{"files":[{"patch":"@@ -130,0 +130,6 @@\n+    \/** Checks to make sure that the stream has not been closed *\/\n+    private void ensureOpen() throws IOException {\n+        if (out == null || !isOpen())\n+            throw new IOException(\"Stream closed\");\n+    }\n+\n@@ -156,0 +162,1 @@\n+        ensureOpen();\n@@ -197,0 +204,1 @@\n+        ensureOpen();\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedOutputStream.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -203,0 +203,9 @@\n+\n+    \/**\n+     * Tells whether or not this stream is open.\n+     *\n+     * @return {@code true} if, and only if, this stream is open\n+     *\/\n+    boolean isOpen(){\n+        return !closed;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/io\/FilterOutputStream.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 4799358\n+ * @summary BufferOutputStream.write() should immediately throw IOException on\n+ * closed stream\n+ * @run main WriteAfterClose\n+ *\n+ *\/\n+import java.io.BufferedOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+\n+public class WriteAfterClose {\n+\n+    static void testWrite(OutputStream os) throws IOException {\n+        \/\/ close the stream first\n+        os.close();\n+        byte[] buf = {'a', 'b', 'c', 'd'};\n+        try {\n+            os.write(buf);\n+            throw new RuntimeException(\"Should not allow write(byte[]) on a closed stream\");\n+        } catch (IOException e) {\n+            System.out.println(\"Caught the IOException as expected: \" + e.getMessage());\n+        }\n+\n+        try {\n+            os.write(1);\n+            throw new RuntimeException(\"Should not allow write(int) on a closed stream\");\n+        } catch (IOException e) {\n+            System.out.println(\"Caught the IOException as expected: \" + e.getMessage());\n+        }\n+    }\n+\n+    public static void main(String argv[]) throws IOException {\n+        var file = new File(System.getProperty(\"test.dir\", \".\"), \"test.txt\");\n+        file.createNewFile();\n+        file.deleteOnExit();\n+        var bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(file));\n+        testWrite(bufferedOutputStream);\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/BufferedOutputStream\/WriteAfterClose.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}