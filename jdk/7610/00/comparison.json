{"files":[{"patch":"@@ -388,26 +388,0 @@\n-\/\/ Unlike several other card table methods, dirty_card_iterate()\n-\/\/ iterates over dirty cards ranges in increasing address order.\n-void CardTable::dirty_card_iterate(MemRegion mr, MemRegionClosure* cl) {\n-  for (int i = 0; i < _cur_covered_regions; i++) {\n-    MemRegion mri = mr.intersection(_covered[i]);\n-    if (!mri.is_empty()) {\n-      CardValue *cur_entry, *next_entry, *limit;\n-      for (cur_entry = byte_for(mri.start()), limit = byte_for(mri.last());\n-           cur_entry <= limit;\n-           cur_entry  = next_entry) {\n-        next_entry = cur_entry + 1;\n-        if (*cur_entry == dirty_card) {\n-          size_t dirty_cards;\n-          \/\/ Accumulate maximal dirty card range, starting at cur_entry\n-          for (dirty_cards = 1;\n-               next_entry <= limit && *next_entry == dirty_card;\n-               dirty_cards++, next_entry++);\n-          MemRegion cur_cards(addr_for(cur_entry),\n-                              dirty_cards*_card_size_in_words);\n-          cl->do_MemRegion(cur_cards);\n-        }\n-      }\n-    }\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -221,4 +221,0 @@\n-  \/\/ Apply closure \"cl\" to the dirty cards containing some part of\n-  \/\/ MemRegion \"mr\".\n-  void dirty_card_iterate(MemRegion mr, MemRegionClosure* cl);\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}