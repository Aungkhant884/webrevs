{"files":[{"patch":"@@ -1866,2 +1866,0 @@\n-  CodeStub* deopt = new DeoptimizeStub(info, Deoptimization::Reason_range_check,\n-                                       Deoptimization::Action_make_not_entrant);\n@@ -1869,17 +1867,6 @@\n-  if (length.result()->is_constant()) {\n-#if defined(X86) && !defined(_LP64)\n-    \/\/ BEWARE! On 32-bit x86 cmp clobbers its left argument so we need a temp copy.\n-    LIR_Opr index_copy = new_register(index.type());\n-    __ move(index.result(), index_copy);\n-    if (type == T_INT) {\n-      __ cmp(lir_cond_aboveEqual, index_copy, LIR_OprFact::intConst(length.result()->as_jint()));\n-    } else {\n-      assert(type == T_LONG, \"sanity check\");\n-      __ cmp(lir_cond_aboveEqual, index_copy, LIR_OprFact::longConst(length.result()->as_jlong()));\n-    }\n-#else\n-    if (type == T_INT) {\n-      __ cmp(lir_cond_aboveEqual, index.result(), LIR_OprFact::intConst(length.result()->as_jint()));\n-    } else {\n-      assert(type == T_LONG, \"sanity check\");\n-      __ cmp(lir_cond_aboveEqual, index.result(), LIR_OprFact::longConst(length.result()->as_jlong()));\n+  LIR_Opr len = length.result();\n+  LIR_Opr zero = NULL;\n+  if (type == T_INT) {\n+    zero = LIR_OprFact::intConst(0);\n+    if (length.result()->is_constant()){\n+      len = LIR_OprFact::intConst(length.result()->as_jint());\n@@ -1887,2 +1874,0 @@\n-#endif\n-    __ branch(lir_cond_aboveEqual, deopt);\n@@ -1890,0 +1875,8 @@\n+    assert(type == T_LONG, \"sanity check\");\n+    zero = LIR_OprFact::longConst(0);\n+    if (length.result()->is_constant()){\n+      len = LIR_OprFact::longConst(length.result()->as_jlong());\n+    }\n+  }\n+  LIR_Opr zero_reg = new_register(type);\n+  __ move(zero, zero_reg);\n@@ -1891,4 +1884,12 @@\n-    \/\/ BEWARE! On 32-bit x86 cmp clobbers its left argument so we need a temp copy.\n-    LIR_Opr index_copy = new_register(index.type());\n-    __ move(index.result(), index_copy);\n-    __ cmp(lir_cond_aboveEqual, index_copy, length.result());\n+  \/\/ BEWARE! On 32-bit x86 cmp clobbers its left argument so we need a temp copy.\n+  LIR_Opr index_copy = new_register(index.type());\n+  \/\/ index >= 0\n+  __ move(index.result(), index_copy);\n+  __ cmp(lir_cond_less, index_copy, zero_reg);\n+  __ branch(lir_cond_less, new DeoptimizeStub(info, Deoptimization::Reason_range_check,\n+                                                    Deoptimization::Action_make_not_entrant));\n+  \/\/ index < length\n+  __ move(index.result(), index_copy);\n+  __ cmp(lir_cond_greaterEqual, index_copy, len);\n+  __ branch(lir_cond_greaterEqual, new DeoptimizeStub(info, Deoptimization::Reason_range_check,\n+                                                            Deoptimization::Action_make_not_entrant));\n@@ -1896,1 +1897,8 @@\n-    __ cmp(lir_cond_aboveEqual, index.result(), length.result());\n+  \/\/ index >= 0\n+  __ cmp(lir_cond_less, index.result(), zero_reg);\n+  __ branch(lir_cond_less, new DeoptimizeStub(info, Deoptimization::Reason_range_check,\n+                                                    Deoptimization::Action_make_not_entrant));\n+  \/\/ index < length\n+  __ cmp(lir_cond_greaterEqual, index.result(), len);\n+  __ branch(lir_cond_greaterEqual, new DeoptimizeStub(info, Deoptimization::Reason_range_check,\n+                                                            Deoptimization::Action_make_not_entrant));\n@@ -1898,2 +1906,0 @@\n-    __ branch(lir_cond_aboveEqual, deopt);\n-  }\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":34,"deletions":28,"binary":false,"changes":62,"status":"modified"}]}