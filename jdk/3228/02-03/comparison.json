{"files":[{"patch":"@@ -5801,1 +5801,1 @@\n-    \/\/ We cannot benefits from SIMD for this case. The max line size of MIME\n+    \/\/ We cannot benefit from SIMD for this case. The max line size of MIME\n@@ -5807,4 +5807,5 @@\n-    __ ldrb(r10, __ post(src, 1));\n-    __ ldrb(r11, __ post(src, 1));\n-    __ ldrb(r12, __ post(src, 1));\n-    __ ldrb(r13, __ post(src, 1));\n+    __ ldrw(r14, __ post(src, 4));\n+    __ ubfxw(r10, r14, 0,  8);\n+    __ ubfxw(r11, r14, 8,  8);\n+    __ ubfxw(r12, r14, 16, 8);\n+    __ ubfxw(r13, r14, 24, 8);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -41,2 +41,2 @@\n-    private ArrayList<byte[]> encoded, mimeEncoded;\n-    private byte[] decoded, mimeDecoded;\n+    private ArrayList<byte[]> encoded, mimeEncoded, errorEncoded;\n+    private byte[] decoded, mimeDecoded, errorDecoded;\n@@ -55,0 +55,5 @@\n+    \/* Other value can be tested by passing parameters to the JMH\n+       tests: -p errorIndex=3,64,144,208,272,1000,20000. *\/\n+    @Param({\"144\"})\n+    private int errorIndex;\n+\n@@ -69,0 +74,3 @@\n+        errorDecoded = new byte[errorIndex + 100];\n+        errorEncoded = new ArrayList<byte[]> ();\n+\n@@ -83,0 +91,8 @@\n+\n+            int errorSrcLen = errorIndex + r.nextInt(100);\n+            byte[] errorSrc = new byte[errorSrcLen];\n+            byte[] errorDst = new byte[(errorSrcLen + 2) \/ 3 * 4];\n+            r.nextBytes(errorSrc);\n+            encoder.encode(errorSrc, errorDst);\n+            errorEncoded.add(errorDst);\n+            errorDst[errorIndex] = (byte) '?';\n@@ -103,0 +119,13 @@\n+\n+    @Benchmark\n+    @OperationsPerInvocation(TESTSIZE)\n+    public void testBase64WithErrorInputsDecode (Blackhole bh) {\n+        for (byte[] s : errorEncoded) {\n+            try {\n+                 decoder.decode(s, errorDecoded);\n+                 bh.consume(errorDecoded);\n+            } catch (IllegalArgumentException e) {\n+                 bh.consume(e);\n+            }\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/Base64Decode.java","additions":31,"deletions":2,"binary":false,"changes":33,"status":"modified"}]}