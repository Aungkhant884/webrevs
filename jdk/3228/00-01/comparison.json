{"files":[{"patch":"@@ -5576,33 +5576,0 @@\n-  void generate_base64_decode_nosimdround(Register src, Register dst,\n-        Register nosimd_codec, Label &Exit)\n-  {\n-    __ ldrb(r10, __ post(src, 1));\n-    __ ldrb(r11, __ post(src, 1));\n-    __ ldrb(r12, __ post(src, 1));\n-    __ ldrb(r13, __ post(src, 1));\n-\n-    \/\/ get the de-code\n-    __ ldrb(r10, Address(nosimd_codec, r10, Address::uxtw(0)));\n-    __ ldrb(r11, Address(nosimd_codec, r11, Address::uxtw(0)));\n-    __ ldrb(r12, Address(nosimd_codec, r12, Address::uxtw(0)));\n-    __ ldrb(r13, Address(nosimd_codec, r13, Address::uxtw(0)));\n-\n-    \/\/ error detection, 255u indicates an illegal input\n-    __ orrw(r14, r10, r11);\n-    __ orrw(r15, r12, r13);\n-    __ orrw(r14, r14, r15);\n-    __ tbnz(r14, 7, Exit);\n-\n-    \/\/ recover the data\n-    __ lslw(r14, r10, 2);\n-    __ bfmw(r14, r11, 4, 5);\n-    __ lslw(r15, r11, 4);\n-    __ bfmw(r15, r12, 2, 5);\n-    __ orrw(r13, r13, r12, Assembler::LSL, 6);\n-\n-    \/\/ store the data\n-    __ strb(r14, __ post(dst, 1));\n-    __ strb(r15, __ post(dst, 1));\n-    __ strb(r13, __ post(dst, 1));\n-  }\n-\n@@ -5618,1 +5585,1 @@\n-    Label NoIllegalData;\n+    Label NoIllegalData, ErrorInLowerHalf, StoreLegalData;\n@@ -5624,1 +5591,1 @@\n-    \/\/ we need unsigned saturationg substract, to make sure all input values\n+    \/\/ we need unsigned saturating substract, to make sure all input values\n@@ -5649,1 +5616,1 @@\n-    \/\/ check iilegal inputs, value larger than 63 (maximum of 6 bits)\n+    \/\/ check illegal inputs, value larger than 63 (maximum of 6 bits)\n@@ -5673,0 +5640,1 @@\n+    __ umov(r10, in2, __ D, 0);\n@@ -5674,3 +5642,1 @@\n-      Label ErrorInLowerHalf;\n-      __ umov(rscratch1, in2, __ D, 0);\n-      __ cbnz(rscratch1, ErrorInLowerHalf);\n+      __ cbnz(r10, ErrorInLowerHalf);\n@@ -5681,11 +5647,5 @@\n-      for (int i = 8; i < 15; i++) {\n-        __ umov(rscratch2, in2, __ B, (u1) i);\n-        __ cbnz(rscratch2, Exit);\n-        __ umov(r10, out0, __ B, (u1) i);\n-        __ umov(r11, out1, __ B, (u1) i);\n-        __ umov(r12, out2, __ B, (u1) i);\n-        __ strb(r10, __ post(dst, 1));\n-        __ strb(r11, __ post(dst, 1));\n-        __ strb(r12, __ post(dst, 1));\n-      }\n-      __ b(Exit);\n+      __ umov(r10, in2,  __ D, 1);\n+      __ umov(r11, out0, __ D, 1);\n+      __ umov(r12, out1, __ D, 1);\n+      __ umov(r13, out2, __ D, 1);\n+      __ b(StoreLegalData);\n@@ -5695,0 +5655,3 @@\n+    __ umov(r11, out0, __ D, 0);\n+    __ umov(r12, out1, __ D, 0);\n+    __ umov(r13, out2, __ D, 0);\n@@ -5696,11 +5659,10 @@\n-    for (int i = 0; i < 7; i++) {\n-        __ umov(rscratch2, in2, __ B, (u1) i);\n-        __ cbnz(rscratch2, Exit);\n-        __ umov(r10, out0, __ B, (u1) i);\n-        __ umov(r11, out1, __ B, (u1) i);\n-        __ umov(r12, out2, __ B, (u1) i);\n-        __ strb(r10, __ post(dst, 1));\n-        __ strb(r11, __ post(dst, 1));\n-        __ strb(r12, __ post(dst, 1));\n-    }\n-    __ b(Exit);\n+    __ BIND(StoreLegalData);\n+    __ tbnz(r10, 5, Exit); \/\/ 0xff indicates illegal input\n+    __ strb(r11, __ post(dst, 1));\n+    __ strb(r12, __ post(dst, 1));\n+    __ strb(r13, __ post(dst, 1));\n+    __ lsr(r10, r10, 8);\n+    __ lsr(r11, r11, 8);\n+    __ lsr(r12, r12, 8);\n+    __ lsr(r13, r13, 8);\n+    __ b(StoreLegalData);\n@@ -5727,0 +5689,7 @@\n+    \/\/ The SIMD part of this Base64 decode intrinsic is based on the algorithm outlined\n+    \/\/ on http:\/\/0x80.pl\/articles\/base64-simd-neon.html#encoding-quadwords, in section\n+    \/\/ titled \"Base64 decoding\".\n+\n+    \/\/ Non-SIMD lookup tables are mostly dumped from fromBase64 array used in java.util.Base64,\n+    \/\/ except the trailing character '=' is also treated illegal value in this instrinsic. That\n+    \/\/ is java.util.Base64.fromBase64['='] = -2, while fromBase(URL)64ForNoSIMD['='] = 255 here.\n@@ -5803,1 +5772,1 @@\n-    Register isURL = c_rarg5;  \/\/ Base64 or URL chracter set\n+    Register isURL = c_rarg5;  \/\/ Base64 or URL character set\n@@ -5810,2 +5779,3 @@\n-    Label ProcessData, PreProcess80B, Process64B, Process32B,\n-          Process4B, SIMDEnter, SIMDExit, Exit;\n+    Label ProcessData, Process64B, Process32B, Process4B, SIMDEnter, SIMDExit, Exit;\n+\n+    __ enter();\n@@ -5826,0 +5796,1 @@\n+    __ mov(rscratch1, length);\n@@ -5830,1 +5801,1 @@\n-    \/\/ We can not benefits from SIMD for this case. The max line size of MIME\n+    \/\/ We cannot benefits from SIMD for this case. The max line size of MIME\n@@ -5833,5 +5804,33 @@\n-    __ movw(rscratch1, 1);\n-    __ BIND(PreProcess80B);\n-    generate_base64_decode_nosimdround(src, dst, nosimd_codec, Exit);\n-    __ lslw(rscratch1, rscratch1, 1);\n-    __ tbz(rscratch1, 20, PreProcess80B);\n+    __ movw(rscratch1, 79);\n+\n+    __ BIND(Process4B);\n+    __ ldrb(r10, __ post(src, 1));\n+    __ ldrb(r11, __ post(src, 1));\n+    __ ldrb(r12, __ post(src, 1));\n+    __ ldrb(r13, __ post(src, 1));\n+    \/\/ get the de-code\n+    __ ldrb(r10, Address(nosimd_codec, r10, Address::uxtw(0)));\n+    __ ldrb(r11, Address(nosimd_codec, r11, Address::uxtw(0)));\n+    __ ldrb(r12, Address(nosimd_codec, r12, Address::uxtw(0)));\n+    __ ldrb(r13, Address(nosimd_codec, r13, Address::uxtw(0)));\n+    \/\/ error detection, 255u indicates an illegal input\n+    __ orrw(r14, r10, r11);\n+    __ orrw(r15, r12, r13);\n+    __ orrw(r14, r14, r15);\n+    __ tbnz(r14, 7, Exit);\n+    \/\/ recover the data\n+    __ lslw(r14, r10, 2);\n+    __ bfmw(r14, r11, 4, 5);\n+    __ lslw(r15, r11, 4);\n+    __ bfmw(r15, r12, 2, 5);\n+    __ orrw(r13, r13, r12, Assembler::LSL, 6);\n+    __ strb(r14, __ post(dst, 1));\n+    __ strb(r15, __ post(dst, 1));\n+    __ strb(r13, __ post(dst, 1));\n+    \/\/ non-simd loop\n+    __ subsw(rscratch1, rscratch1, 4);\n+    __ br(Assembler::GT, Process4B);\n+\n+    \/\/ if exiting from PreProcess80B, rscratch1 == -1;\n+    \/\/ otherwise, rscratch1 == 0.\n+    __ cbzw(rscratch1, Exit);\n@@ -5866,5 +5865,2 @@\n-\n-    __ BIND(Process4B);\n-    generate_base64_decode_nosimdround(src, dst, nosimd_codec, Exit);\n-    __ sub(length, length, 4);\n-    __ cbnz(length, Process4B);\n+    __ movw(rscratch1, length);\n+    __ b(Process4B);\n@@ -5874,0 +5870,2 @@\n+\n+    __ leave();\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":73,"deletions":75,"binary":false,"changes":148,"status":"modified"}]}