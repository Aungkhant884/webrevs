{"files":[{"patch":"@@ -0,0 +1,384 @@\n+\/*\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.Cursor;\n+import java.awt.Dimension;\n+import java.awt.GridLayout;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetContext;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.InputEvent;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.imageio.ImageIO;\n+import javax.swing.JButton;\n+import javax.swing.JDesktopPane;\n+import javax.swing.JFrame;\n+import javax.swing.JInternalFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+  @test\n+  @bug 4395279\n+  @summary Tests that a drop target in InternalFrame functions properly\n+  @key headful\n+  @run main DropTargetInInternalFrameTest\n+*\/\n+public class DropTargetInInternalFrameTest implements Serializable {\n+    private static final CountDownLatch dropLatch = new CountDownLatch(1);\n+    private static final CountDownLatch focusLatch = new CountDownLatch(1);\n+    private static JFrame frame;\n+    private static JInternalFrame sourceFrame;\n+    private static JInternalFrame targetFrame;\n+    private static DragSourcePanel dragSourcePanel;\n+    private static DropTargetPanel dropTargetPanel;\n+    private static Robot robot;\n+\n+    private static void createUI() {\n+        frame = new JFrame(\"Test frame\");\n+        sourceFrame = new JInternalFrame(\"Source\");\n+        targetFrame = new JInternalFrame(\"Destination\");\n+        dragSourcePanel = new DragSourcePanel();\n+        dropTargetPanel = new DropTargetPanel(dropLatch);\n+        JDesktopPane desktopPane = new JDesktopPane();\n+\n+        sourceFrame.getContentPane().setLayout(new GridLayout(3, 1));\n+\n+        \/\/ add panels to content panes\n+        sourceFrame.getContentPane().add(dragSourcePanel);\n+        targetFrame.getContentPane().add(dropTargetPanel);\n+\n+        sourceFrame.setSize(200, 200);\n+        targetFrame.setSize(200, 200);\n+        targetFrame\n+                .setLocation(sourceFrame.getX() + sourceFrame.getWidth() + 10,\n+                             sourceFrame.getY());\n+\n+        desktopPane.add(sourceFrame);\n+        desktopPane.add(targetFrame);\n+\n+        frame.setTitle(\"Test frame\");\n+        frame.setBounds(200, 200, 450, 250);\n+        frame.getContentPane().add(desktopPane);\n+        frame.setAlwaysOnTop(true);\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+\n+        sourceFrame.setVisible(true);\n+        targetFrame.setVisible(true);\n+        frame.setVisible(true);\n+        dragSourcePanel.dragSourceButton.requestFocusInWindow();\n+    }\n+\n+    public static void main(String[] argv) throws Exception {\n+        SwingUtilities.invokeAndWait(DropTargetInInternalFrameTest::createUI);\n+\n+        robot = new Robot();\n+        robot.setAutoDelay(50);\n+        robot.setAutoWaitForIdle(true);\n+        robot.waitForIdle();\n+        if (!focusLatch.await(5, TimeUnit.SECONDS)) {\n+            captureScreen();\n+            SwingUtilities\n+                    .invokeAndWait(DropTargetInInternalFrameTest::disposeFrame);\n+            System.out.println(\n+                    \"Test Failed, Waited too long, but the Drag Button \" +\n+                    \"doesn't gain focus yet\");\n+        }\n+        final AtomicReference<Point> p1Ref = new AtomicReference<>();\n+        final AtomicReference<Point> p2Ref = new AtomicReference<>();\n+        SwingUtilities.invokeAndWait(() -> {\n+            final Point dragLocation =\n+                    dragSourcePanel.dragSourceButton.getLocationOnScreen();\n+            Dimension d1 = dragSourcePanel.dragSourceButton.getSize();\n+            dragLocation.translate(d1.width \/ 2, d1.height \/ 2);\n+            p1Ref.set(dragLocation);\n+            final Point dropLocation = dropTargetPanel.getLocationOnScreen();\n+            dropLocation.translate(d1.width \/ 2, d1.height \/ 2);\n+            p2Ref.set(dropLocation);\n+        });\n+        Point p1 = p1Ref.get();\n+        Point p2 = p2Ref.get();\n+\n+        dragAndDrop(p1, p2);\n+\n+        if (!dropLatch.await(5, TimeUnit.SECONDS)) {\n+            captureScreen();\n+            System.out.println(\"Test Failed, Waited too long, but Drop not \" +\n+                               \"complete yet\");\n+        }\n+        int calledMethods = dropTargetPanel.getCalledMethods();\n+        SwingUtilities\n+                .invokeAndWait(DropTargetInInternalFrameTest::disposeFrame);\n+        System.out.println(\"CalledMethods = \" + calledMethods);\n+        if ((calledMethods & DropTargetPanel.ENTER_CALLED) == 0) {\n+            throw new RuntimeException(\n+                    \"Test Failed, DropTargetListener.dragEnter() not \" +\n+                    \"called.\");\n+        }\n+        if ((calledMethods & DropTargetPanel.OVER_CALLED) == 0) {\n+            throw new RuntimeException(\n+                    \"Test Failed, DropTargetListener.dragOver() not \" +\n+                    \"called.\");\n+        }\n+        if ((calledMethods & DropTargetPanel.DROP_CALLED) == 0) {\n+            throw new RuntimeException(\n+                    \"Test Failed, DropTargetListener.drop() not called.\");\n+        }\n+\n+        System.out.println(\"Test Passed\");\n+    }\n+\n+    private static void dragAndDrop(final Point p1, final Point p2) {\n+        robot.mouseMove(p1.x, p1.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        int dx = 1;\n+        while (p1.x < p2.x) {\n+            p1.translate(dx, 0);\n+            robot.mouseMove(p1.x, p1.y);\n+            dx++;\n+        }\n+        robot.mouseMove(p2.x, p2.y);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+    }\n+\n+    private static void captureScreen() {\n+        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n+        try {\n+            ImageIO.write(robot.createScreenCapture(\n+                    new Rectangle(0, 0, screenSize.width, screenSize.height)),\n+                          \"png\", new File(\"screenImage.png\"));\n+        } catch (IOException ignore) {\n+        }\n+    }\n+\n+    private static void disposeFrame() {\n+        sourceFrame.dispose();\n+        targetFrame.dispose();\n+        frame.dispose();\n+    }\n+\n+    private static class DragSourcePanel extends JPanel {\n+\n+        final Dimension preferredDimension = new Dimension(200, 100);\n+        final DragSourceButton dragSourceButton = new DragSourceButton();\n+\n+        public DragSourcePanel() {\n+            setLayout(new GridLayout(1, 1));\n+            dragSourceButton.addFocusListener(new FocusAdapter() {\n+                @Override\n+                public void focusGained(final FocusEvent e) {\n+                    super.focusGained(e);\n+                    focusLatch.countDown();\n+                }\n+            });\n+            add(dragSourceButton);\n+        }\n+\n+        public Dimension getPreferredSize() {\n+            return preferredDimension;\n+        }\n+\n+    }\n+\n+    private static class DropTargetPanel extends JPanel\n+            implements DropTargetListener {\n+\n+        public static final int ENTER_CALLED = 0x1;\n+        public static final int OVER_CALLED = 0x2;\n+        public static final int DROP_CALLED = 0x4;\n+        private final Dimension preferredDimension = new Dimension(200, 100);\n+        private final CountDownLatch dropLatch;\n+        private volatile int calledMethods = 0;\n+\n+        public DropTargetPanel(final CountDownLatch dropLatch) {\n+            this.dropLatch = dropLatch;\n+            setDropTarget(new DropTarget(this, this));\n+        }\n+\n+        public Dimension getPreferredSize() {\n+            return preferredDimension;\n+        }\n+\n+        public void dragEnter(DropTargetDragEvent dtde) {\n+            calledMethods |= ENTER_CALLED;\n+        }\n+\n+        public void dragOver(DropTargetDragEvent dtde) {\n+            calledMethods |= OVER_CALLED;\n+        }\n+\n+        public void dropActionChanged(DropTargetDragEvent dtde) {\n+        }\n+\n+        public void dragExit(DropTargetEvent dte) {\n+        }\n+\n+        public void drop(DropTargetDropEvent dtde) {\n+            System.out.println(\"Drop!!!!!!!!!!!! \");\n+            calledMethods |= DROP_CALLED;\n+            DropTargetContext dtc = dtde.getDropTargetContext();\n+\n+            if ((dtde.getSourceActions() & DnDConstants.ACTION_COPY) != 0) {\n+                dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+            } else {\n+                dtde.rejectDrop();\n+            }\n+\n+            DataFlavor[] dfs = dtde.getCurrentDataFlavors();\n+            Component comp = null;\n+\n+            if (dfs != null && dfs.length >= 1) {\n+                Transferable transfer = dtde.getTransferable();\n+\n+                try {\n+                    comp = (Component) transfer.getTransferData(dfs[0]);\n+                } catch (Throwable e) {\n+                    e.printStackTrace();\n+                    dtc.dropComplete(false);\n+                }\n+            }\n+            dtc.dropComplete(true);\n+            add(comp);\n+            dropLatch.countDown();\n+        }\n+\n+        public int getCalledMethods() {\n+            return calledMethods;\n+        }\n+\n+    }\n+\n+    private static class DragSourceButton extends JButton\n+            implements Serializable, Transferable, DragGestureListener,\n+                       DragSourceListener {\n+        private final DataFlavor dataflavor =\n+                new DataFlavor(Button.class, \"DragSourceButton\");\n+\n+        public DragSourceButton() {\n+            this(\"DragSourceButton\");\n+        }\n+\n+        public DragSourceButton(String str) {\n+            super(str);\n+            DragSource ds = DragSource.getDefaultDragSource();\n+            ds.createDefaultDragGestureRecognizer(this,\n+                                                  DnDConstants.ACTION_COPY,\n+                                                  this);\n+        }\n+\n+        public void dragGestureRecognized(DragGestureEvent dge) {\n+            dge.startDrag(new Cursor(Cursor.HAND_CURSOR), this, this);\n+        }\n+\n+        public DataFlavor[] getTransferDataFlavors() {\n+            return new DataFlavor[]{dataflavor};\n+        }\n+\n+        public boolean isDataFlavorSupported(DataFlavor dflavor) {\n+            return dataflavor.equals(dflavor);\n+        }\n+\n+        public Object getTransferData(DataFlavor flavor)\n+                throws UnsupportedFlavorException, IOException {\n+\n+            if (!isDataFlavorSupported(flavor)) {\n+                throw new UnsupportedFlavorException(flavor);\n+            }\n+            Object retObj;\n+            ByteArrayOutputStream baoStream = new ByteArrayOutputStream();\n+            ObjectOutputStream ooStream = new ObjectOutputStream(baoStream);\n+            ooStream.writeObject(this);\n+\n+            ByteArrayInputStream baiStream =\n+                    new ByteArrayInputStream(baoStream.toByteArray());\n+            ObjectInputStream ois = new ObjectInputStream(baiStream);\n+            try {\n+                retObj = ois.readObject();\n+            } catch (ClassNotFoundException e) {\n+                e.printStackTrace();\n+                throw new RuntimeException(e.toString());\n+            }\n+            return retObj;\n+        }\n+\n+        @Override\n+        public void dragEnter(final DragSourceDragEvent dsde) {\n+\n+        }\n+\n+        @Override\n+        public void dragOver(final DragSourceDragEvent dsde) {\n+\n+        }\n+\n+        @Override\n+        public void dropActionChanged(final DragSourceDragEvent dsde) {\n+\n+        }\n+\n+        @Override\n+        public void dragExit(final DragSourceEvent dse) {\n+\n+        }\n+\n+        @Override\n+        public void dragDropEnd(final DragSourceDropEvent dsde) {\n+\n+        }\n+\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DropTargetInInternalFrameTest.java","additions":384,"deletions":0,"binary":false,"changes":384,"status":"added"}]}