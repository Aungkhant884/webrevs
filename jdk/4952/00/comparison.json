{"files":[{"patch":"@@ -164,3 +164,0 @@\n-  _num_instance_klasses(0),\n-  _num_obj_array_klasses(0),\n-  _num_type_array_klasses(0),\n@@ -225,8 +222,0 @@\n-      if (klass->is_instance_klass()) {\n-        _num_instance_klasses ++;\n-      } else if (klass->is_objArray_klass()) {\n-        _num_obj_array_klasses ++;\n-      } else {\n-        assert(klass->is_typeArray_klass(), \"sanity\");\n-        _num_type_array_klasses ++;\n-      }\n@@ -261,6 +250,0 @@\n-  log_info(cds)(\"Number of classes %d\", _num_instance_klasses + _num_obj_array_klasses + _num_type_array_klasses);\n-  log_info(cds)(\"    instance classes   = %5d\", _num_instance_klasses);\n-  log_info(cds)(\"    obj array classes  = %5d\", _num_obj_array_klasses);\n-  log_info(cds)(\"    type array classes = %5d\", _num_type_array_klasses);\n-  log_info(cds)(\"               symbols = %5d\", _symbols->length());\n-\n@@ -734,0 +717,10 @@\n+  int num_instance_klasses = 0;\n+  int num_boot_klasses = 0;\n+  int num_platform_klasses = 0;\n+  int num_app_klasses = 0;\n+  int num_hidden_klasses = 0;\n+  int num_unlinked_klasses = 0;\n+  int num_unregistered_klasses = 0;\n+  int num_obj_array_klasses = 0;\n+  int num_type_array_klasses = 0;\n+\n@@ -735,0 +728,3 @@\n+    const char* type;\n+    const char* unlinked = \"\";\n+    const char* hidden = \"\";\n@@ -740,0 +736,2 @@\n+      num_obj_array_klasses ++;\n+      type = \"array\";\n@@ -741,0 +739,2 @@\n+      num_type_array_klasses ++;\n+      type = \"array\";\n@@ -744,0 +744,1 @@\n+      num_instance_klasses ++;\n@@ -749,0 +750,24 @@\n+      if (ik->is_shared_boot_class()) {\n+        type = \"boot\";\n+        num_boot_klasses ++;\n+      } else if (ik->is_shared_platform_class()) {\n+        type = \"plat\";\n+        num_platform_klasses ++;\n+      } else if (ik->is_shared_app_class()) {\n+        type = \"app\";\n+        num_app_klasses ++;\n+      } else {\n+        assert(ik->is_shared_unregistered_class(), \"must be\");\n+        type = \"unreg\";\n+        num_unregistered_klasses ++;\n+      }\n+\n+      if (!ik->is_linked()) {\n+        num_unlinked_klasses ++;\n+        unlinked = \" ** unlinked\";\n+      }\n+\n+      if (ik->is_hidden()) {\n+        num_hidden_klasses ++;\n+        hidden = \" ** hidden\";\n+      }\n@@ -752,0 +777,1 @@\n+    }\n@@ -753,4 +779,3 @@\n-      if (log_is_enabled(Debug, cds, class)) {\n-        ResourceMark rm;\n-        log_debug(cds, class)(\"klasses[%4d] = \" PTR_FORMAT \" %s\", i, p2i(to_requested(ik)), ik->external_name());\n-      }\n+    if (log_is_enabled(Debug, cds, class)) {\n+      ResourceMark rm;\n+      log_debug(cds, class)(\"klasses[%5d] = \" PTR_FORMAT \" %-5s %s%s%s\", i, p2i(to_requested(k)), type, k->external_name(), hidden, unlinked);\n@@ -759,0 +784,12 @@\n+\n+  log_info(cds)(\"Number of classes %d\", num_instance_klasses + num_obj_array_klasses + num_type_array_klasses);\n+  log_info(cds)(\"    instance classes   = %5d\", num_instance_klasses);\n+  log_info(cds)(\"      boot             = %5d\", num_boot_klasses);\n+  log_info(cds)(\"      app              = %5d\", num_app_klasses);\n+  log_info(cds)(\"      platform         = %5d\", num_platform_klasses);\n+  log_info(cds)(\"      unregistered     = %5d\", num_unregistered_klasses);\n+  log_info(cds)(\"      (hidden)         = %5d\", num_hidden_klasses);\n+  log_info(cds)(\"      (unlinked)       = %5d\", num_unlinked_klasses);\n+  log_info(cds)(\"    obj array classes  = %5d\", num_obj_array_klasses);\n+  log_info(cds)(\"    type array classes = %5d\", num_type_array_klasses);\n+  log_info(cds)(\"               symbols = %5d\", _symbols->length());\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":58,"deletions":21,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -208,3 +208,0 @@\n-  int _num_instance_klasses;\n-  int _num_obj_array_klasses;\n-  int _num_type_array_klasses;\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -333,2 +333,0 @@\n-fileStream* ClassListWriter::_classlist_file = NULL;\n-\n@@ -340,8 +338,12 @@\n-      int pool_index = bootstrap_specifier->bss_index();\n-      ClassListWriter w;\n-      w.stream()->print(\"%s %s\", LAMBDA_PROXY_TAG, pool->pool_holder()->name()->as_C_string());\n-      CDSIndyInfo cii;\n-      ClassListParser::populate_cds_indy_info(pool, pool_index, &cii, CHECK);\n-      GrowableArray<const char*>* indy_items = cii.items();\n-      for (int i = 0; i < indy_items->length(); i++) {\n-        w.stream()->print(\" %s\", indy_items->at(i));\n+      if (SystemDictionaryShared::is_builtin_loader(pool->pool_holder()->class_loader_data())) {\n+        \/\/ Currently lambda proxy classes are supported only for the built-in loaders.\n+        int pool_index = bootstrap_specifier->bss_index();\n+        ClassListWriter w;\n+        w.stream()->print(\"%s %s\", LAMBDA_PROXY_TAG, pool->pool_holder()->name()->as_C_string());\n+        CDSIndyInfo cii;\n+        ClassListParser::populate_cds_indy_info(pool, pool_index, &cii, CHECK);\n+        GrowableArray<const char*>* indy_items = cii.items();\n+        for (int i = 0; i < indy_items->length(); i++) {\n+          w.stream()->print(\" %s\", indy_items->at(i));\n+        }\n+        w.stream()->cr();\n@@ -349,1 +351,0 @@\n-      w.stream()->cr();\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.cpp","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,174 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"cds\/classListWriter.hpp\"\n+#include \"classfile\/classFileStream.hpp\"\n+#include \"classfile\/classLoader.hpp\"\n+#include \"classfile\/classLoaderData.hpp\"\n+#include \"classfile\/moduleEntry.hpp\"\n+#include \"classfile\/systemDictionaryShared.hpp\"\n+#include \"memory\/resourceArea.hpp\"\n+#include \"oops\/instanceKlass.hpp\"\n+#include \"runtime\/mutexLocker.hpp\"\n+\n+fileStream* ClassListWriter::_classlist_file = NULL;\n+\n+void ClassListWriter::init() {\n+  \/\/ For -XX:DumpLoadedClassList=<file> option\n+  if (DumpLoadedClassList != NULL) {\n+    const char* list_name = make_log_name(DumpLoadedClassList, NULL);\n+    _classlist_file = new(ResourceObj::C_HEAP, mtInternal)\n+                         fileStream(list_name);\n+    _classlist_file->print_cr(\"# NOTE: Do not modify this file.\");\n+    _classlist_file->print_cr(\"#\");\n+    _classlist_file->print_cr(\"# This file is generated via the -XX:DumpLoadedClassList=<class_list_file> option\");\n+    _classlist_file->print_cr(\"# and is used at CDS archive dump time (see -Xshare:dump).\");\n+    _classlist_file->print_cr(\"#\");\n+    FREE_C_HEAP_ARRAY(char, list_name);\n+  }\n+}\n+\n+void ClassListWriter::write(const InstanceKlass* k, const ClassFileStream* cfs) {\n+  assert(is_enabled(), \"must be\");\n+\n+  if (!ClassLoader::has_jrt_entry()) {\n+    warning(\"DumpLoadedClassList and CDS are not supported in exploded build\");\n+    DumpLoadedClassList = NULL;\n+    return;\n+  }\n+\n+  ClassListWriter w;\n+  write_to_stream(k, w.stream(), cfs);\n+}\n+\n+class ClassListWriter::IDTable : public ResourceHashtable<\n+  const InstanceKlass*, int,\n+  15889, \/\/ prime number\n+  ResourceObj::C_HEAP> {};\n+\n+ClassListWriter::IDTable* ClassListWriter::_id_table = NULL;\n+int ClassListWriter::_total_ids = 0;\n+\n+int ClassListWriter::get_id(const InstanceKlass* k) {\n+  assert_locked();\n+  if (_id_table == NULL) {\n+    _id_table = new (ResourceObj::C_HEAP, mtClass)IDTable();\n+  }\n+  bool created;\n+  int* v = _id_table->put_if_absent(k, &created);\n+  if (created) {\n+    *v = _total_ids++;\n+  }\n+  return *v;\n+}\n+\n+bool ClassListWriter::has_id(const InstanceKlass* k) {\n+  assert_locked();\n+  if (_id_table != NULL) {\n+    return _id_table->get(k) != NULL;\n+  } else {\n+    return false;\n+  }\n+}\n+\n+void ClassListWriter::handle_class_unloading(const InstanceKlass* klass) {\n+  assert_locked();\n+  if (_id_table != NULL) {\n+    _id_table->remove(klass);\n+  }\n+}\n+\n+void ClassListWriter::write_to_stream(const InstanceKlass* k, outputStream* stream, const ClassFileStream* cfs) {\n+  ClassLoaderData* loader_data = k->class_loader_data();\n+\n+  if (!SystemDictionaryShared::is_builtin_loader(loader_data)) {\n+    if (cfs == NULL || strncmp(cfs->source(), \"file:\", 5) != 0) {\n+      return;\n+    }\n+    if (!SystemDictionaryShared::add_unregistered_class(Thread::current(), (InstanceKlass*)k)) {\n+      return;\n+    }\n+  }\n+\n+\n+  {\n+    InstanceKlass* super = k->java_super();\n+    if (super != NULL && !has_id(super)) {\n+      return;\n+    }\n+\n+    Array<InstanceKlass*>* interfaces = k->local_interfaces();\n+    int len = interfaces->length();\n+    for (int i = 0; i < len; i++) {\n+      InstanceKlass* intf = interfaces->at(i);\n+      if (!has_id(intf)) {\n+        return;\n+      }\n+    }\n+  }\n+\n+  if (k->is_hidden()) {\n+    return;\n+  }\n+\n+  if (k->module()->is_patched()) {\n+    return;\n+  }\n+\n+  ResourceMark rm;\n+  stream->print(\"%s id: %d\", k->name()->as_C_string(), get_id(k));\n+  if (!SystemDictionaryShared::is_builtin_loader(loader_data)) {\n+    InstanceKlass* super = k->java_super();\n+    assert(super != NULL, \"must be\");\n+    stream->print(\" super: %d\", get_id(super));\n+\n+    Array<InstanceKlass*>* interfaces = k->local_interfaces();\n+    int len = interfaces->length();\n+    if (len > 0) {\n+      stream->print(\" interfaces:\");\n+      for (int i = 0; i < len; i++) {\n+        InstanceKlass* intf = interfaces->at(i);\n+        stream->print(\" %d\", get_id(intf));\n+      }\n+    }\n+\n+#ifdef _WINDOWS\n+    \/\/ \"file:\/C:\/dir\/foo.jar\" -> \"C:\/dir\/foo.jar\"\n+    stream->print(\" source: %s\", cfs->source() + 6);\n+#else\n+    \/\/ \"file:\/dir\/foo.jar\" -> \"\/dir\/foo.jar\"\n+    stream->print(\" source: %s\", cfs->source() + 5);\n+#endif\n+  }\n+\n+  stream->cr();\n+  stream->flush();\n+}\n+\n+void ClassListWriter::delete_classlist() {\n+  if (_classlist_file != NULL) {\n+    delete _classlist_file;\n+  }\n+}\n","filename":"src\/hotspot\/share\/cds\/classListWriter.cpp","additions":174,"deletions":0,"binary":false,"changes":174,"status":"added"},{"patch":"@@ -32,2 +32,1 @@\n-class ClassListWriter {\n-  friend const char* make_log_name(const char* log_name, const char* force_directory);\n+class ClassFileStream;\n@@ -35,0 +34,3 @@\n+class ClassListWriter {\n+#if INCLUDE_CDS\n+  class IDTable;\n@@ -36,0 +38,2 @@\n+  static IDTable* _id_table;\n+  static int _total_ids;\n@@ -37,0 +41,4 @@\n+\n+  static int get_id(const InstanceKlass* k);\n+  static bool has_id(const InstanceKlass* k);\n+  static void assert_locked() { assert_lock_strong(ClassListFile_lock); }\n@@ -38,1 +46,0 @@\n-#if INCLUDE_CDS\n@@ -40,3 +47,0 @@\n-#else\n-  ClassListWriter() : _locker(Thread::current(), NULL, Mutex::_no_safepoint_check_flag) {}\n-#endif\n@@ -48,0 +52,2 @@\n+  void handle_class_unloading(const InstanceKlass* klass);\n+\n@@ -49,1 +55,0 @@\n-#if INCLUDE_CDS\n@@ -51,3 +56,0 @@\n-#else\n-    return false;\n-#endif\n@@ -56,13 +58,4 @@\n-  static void init() {\n-#if INCLUDE_CDS\n-  \/\/ For -XX:DumpLoadedClassList=<file> option\n-  if (DumpLoadedClassList != NULL) {\n-    const char* list_name = make_log_name(DumpLoadedClassList, NULL);\n-    _classlist_file = new(ResourceObj::C_HEAP, mtInternal)\n-                         fileStream(list_name);\n-    _classlist_file->print_cr(\"# NOTE: Do not modify this file.\");\n-    _classlist_file->print_cr(\"#\");\n-    _classlist_file->print_cr(\"# This file is generated via the -XX:DumpLoadedClassList=<class_list_file> option\");\n-    _classlist_file->print_cr(\"# and is used at CDS archive dump time (see -Xshare:dump).\");\n-    _classlist_file->print_cr(\"#\");\n-    FREE_C_HEAP_ARRAY(char, list_name);\n+#else\n+public:\n+  static bool is_enabled() {\n+    return false;\n@@ -71,1 +64,0 @@\n-  }\n@@ -73,7 +65,5 @@\n-  static void delete_classlist() {\n-#if INCLUDE_CDS\n-    if (_classlist_file != NULL) {\n-        delete _classlist_file;\n-    }\n-#endif\n-  }\n+\n+  static void init() NOT_CDS_RETURN;\n+  static void write(const InstanceKlass* k, const ClassFileStream* cfs) NOT_CDS_RETURN;\n+  static void write_to_stream(const InstanceKlass* k, outputStream* stream, const ClassFileStream* cfs = NULL) NOT_CDS_RETURN;\n+  static void delete_classlist() NOT_CDS_RETURN;\n","filename":"src\/hotspot\/share\/cds\/classListWriter.hpp","additions":21,"deletions":31,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"cds\/classListWriter.hpp\"\n@@ -78,0 +79,1 @@\n+#include \"utilities\/resourceHash.hpp\"\n@@ -151,0 +153,3 @@\n+  static const int INITIAL_TABLE_SIZE = 1987;\n+  static const int MAX_TABLE_SIZE = 61333;\n+\n@@ -152,0 +157,23 @@\n+  ResizeableResourceHashtable<InstanceKlass*, bool,\n+                              ResourceObj::C_HEAP, mtClassShared> _dumped_classes;\n+\n+  void dump(InstanceKlass* ik) {\n+    bool created;\n+    _dumped_classes.put_if_absent(ik, &created);\n+    if (!created) {\n+      return;\n+    }\n+    if (_dumped_classes.maybe_grow(MAX_TABLE_SIZE)) {\n+      log_info(cds, hashtables)(\"Expanded _dumped_classes table to %d\", _dumped_classes.table_size());\n+    }\n+    if (ik->java_super()) {\n+      dump(ik->java_super());\n+    }\n+    Array<InstanceKlass*>* interfaces = ik->local_interfaces();\n+    int len = interfaces->length();\n+    for (int i = 0; i < len; i++) {\n+      dump(interfaces->at(i));\n+    }\n+    ClassListWriter::write_to_stream(ik, _stream);\n+  }\n+\n@@ -153,1 +181,5 @@\n-  DumpClassListCLDClosure(fileStream* f) : CLDClosure() { _stream = f; }\n+  DumpClassListCLDClosure(fileStream* f)\n+  : CLDClosure(), _dumped_classes(INITIAL_TABLE_SIZE) {\n+    _stream = f;\n+  }\n+\n@@ -157,4 +189,1 @@\n-        InstanceKlass* ik = InstanceKlass::cast(klass);\n-        if (ik->is_shareable()) {\n-          _stream->print_cr(\"%s\", ik->name()->as_C_string());\n-        }\n+        dump(InstanceKlass::cast(klass));\n@@ -170,0 +199,1 @@\n+    MutexLocker lock2(ClassListFile_lock, Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":35,"deletions":5,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"cds\/classListWriter.hpp\"\n@@ -335,1 +336,1 @@\n-bool SystemDictionaryShared::is_sharing_possible(ClassLoaderData* loader_data) {\n+bool SystemDictionaryShared::is_builtin_loader(ClassLoaderData* loader_data) {\n@@ -436,1 +437,1 @@\n-  Arguments::assert_is_dumping_archive();\n+  assert(Arguments::is_dumping_archive() || ClassListWriter::is_enabled(), \"sanity\");\n@@ -550,1 +551,3 @@\n-  remove_dumptime_info(klass);\n+  if (Arguments::is_dumping_archive()) {\n+    remove_dumptime_info(klass);\n+  }\n@@ -562,0 +565,5 @@\n+\n+  if (ClassListWriter::is_enabled()) {\n+    ClassListWriter cw;\n+    cw.handle_class_unloading((const InstanceKlass*)klass);\n+  }\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -209,2 +209,1 @@\n-  \/\/ Check if sharing is supported for the class loader.\n-  static bool is_sharing_possible(ClassLoaderData* loader_data);\n+  static bool is_builtin_loader(ClassLoaderData* loader_data);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -679,3 +679,1 @@\n-  if (Arguments::is_dumping_archive()) {\n-    SystemDictionaryShared::handle_class_unloading(this);\n-  }\n+  SystemDictionaryShared::handle_class_unloading(this);\n@@ -2623,3 +2621,1 @@\n-  if (Arguments::is_dumping_archive()) {\n-    SystemDictionaryShared::handle_class_unloading(ik);\n-  }\n+  SystemDictionaryShared::handle_class_unloading(ik);\n@@ -3594,1 +3590,3 @@\n-  log_to_classlist();\n+  if (ClassListWriter::is_enabled()) {\n+    ClassListWriter::write(this, cfs);\n+  }\n@@ -4135,39 +4133,0 @@\n-bool InstanceKlass::is_shareable() const {\n-#if INCLUDE_CDS\n-  ClassLoaderData* loader_data = class_loader_data();\n-  if (!SystemDictionaryShared::is_sharing_possible(loader_data)) {\n-    return false;\n-  }\n-\n-  if (is_hidden()) {\n-    return false;\n-  }\n-\n-  if (module()->is_patched()) {\n-    return false;\n-  }\n-\n-  return true;\n-#else\n-  return false;\n-#endif\n-}\n-\n-void InstanceKlass::log_to_classlist() const {\n-#if INCLUDE_CDS\n-  ResourceMark rm;\n-  if (ClassListWriter::is_enabled()) {\n-    if (!ClassLoader::has_jrt_entry()) {\n-       warning(\"DumpLoadedClassList and CDS are not supported in exploded build\");\n-       DumpLoadedClassList = NULL;\n-       return;\n-    }\n-    if (is_shareable()) {\n-      ClassListWriter w;\n-      w.stream()->print_cr(\"%s\", name()->as_C_string());\n-      w.stream()->flush();\n-    }\n-  }\n-#endif \/\/ INCLUDE_CDS\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":5,"deletions":46,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @modules jdk.jfr\n@@ -31,1 +32,1 @@\n- * @compile test-classes\/ArrayListTest.java\n+ * @compile test-classes\/DumpClassListApp.java\n@@ -43,1 +44,1 @@\n-        String[] appClass = new String[] {\"ArrayListTest\"};\n+        String[] appClass = new String[] {\"DumpClassListApp\"};\n@@ -50,1 +51,1 @@\n-        String source = \"package java.lang; \"                       +\n+        String source = \"package jdk.jfr; \"                         +\n@@ -57,2 +58,2 @@\n-        ClassFileInstaller.writeClassToDisk(\"java\/lang\/NewClass\",\n-             InMemoryJavaCompiler.compile(\"java.lang.NewClass\", source, \"--patch-module=java.base\"),\n+        ClassFileInstaller.writeClassToDisk(\"jdk\/jfr\/NewClass\",\n+             InMemoryJavaCompiler.compile(\"jdk.jfr.NewClass\", source, \"--patch-module=jdk.jfr\"),\n@@ -61,1 +62,1 @@\n-        String patchJar = JarBuilder.build(\"javabase\", \"java\/lang\/NewClass\");\n+        String patchJar = JarBuilder.build(\"jdk_jfr\", \"jdk\/jfr\/NewClass\");\n@@ -79,1 +80,1 @@\n-                                   \"--patch-module=java.base=\" + patchJar,\n+                                   \"--patch-module=jdk.jfr=\" + patchJar,\n@@ -93,0 +94,1 @@\n+                       \"-Xlog:cds+class=debug\",\n@@ -97,1 +99,4 @@\n-            .shouldContain(\"[info][class,load] boot.append.Foo\");\n+            .shouldNotContain(\"Preload Warning: Cannot find jdk\/jfr\/NewClass\")\n+            .shouldMatch(\".info..class,load *. boot.append.Foo\")      \/\/ from -Xlog:class+load\n+            .shouldMatch(\"cds,class.*boot  boot.append.Foo\")          \/\/ from -Xlog:cds+class\n+            .shouldNotMatch(\".info..class,load *. jdk.jfr.NewClass\"); \/\/ from -Xlog:class+load\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/DumpClassList.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary -XX:DumpLoadedClassList should support custom loaders\n+ * @bug 8265602\n+ * @requires vm.cds\n+ * @requires vm.cds.custom.loaders\n+ * @library \/test\/lib\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ *          test-classes\n+ * @build CustomLoaderApp OldClass CustomLoadee CustomLoadee2\n+ *        CustomLoadee3Child CustomLoadee4WithLambda\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar CustomLoaderApp\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar custom.jar\n+ *             OldClass CustomLoadee\n+ *             CustomLoadee2 CustomInterface2_ia CustomInterface2_ib\n+ *             CustomLoadee3 CustomLoadee3Child\n+ *             CustomLoadee4WithLambda\n+ * @run driver CustomClassListDump\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import jdk.test.lib.cds.CDSOptions;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class CustomClassListDump {\n+    private static String appJar = ClassFileInstaller.getJarPath(\"app.jar\");\n+    private static String customJar = ClassFileInstaller.getJarPath(\"custom.jar\");\n+    private static String classList = \"app.list\";\n+    private static String commandLine[] = {\n+        \"-cp\", appJar,\n+        \"CustomLoaderApp\",\n+        customJar,\n+        \"unregistered\",\n+        \"CustomLoadee\",\n+        \"CustomLoadee2\",\n+        \"CustomLoadee3Child\",\n+        \"CustomLoadee4WithLambda\",\n+        \"OldClass\",\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Dump the classlist and check that custom-loader classes are in there.\n+        CDSTestUtils.dumpClassList(classList, commandLine)\n+            .assertNormalExit();\n+\n+        String listData = new String(Files.readAllBytes(Paths.get(classList)));\n+        check(listData, true, \"CustomLoaderApp id: [0-9]+\");\n+        check(listData, true, \"CustomLoadee id: [0-9]+ super: [0-9]+ source: .*\/custom.jar\");\n+        check(listData, true, \"CustomInterface2_ia id: [0-9]+ super: [0-9]+ source: .*\/custom.jar\");\n+        check(listData, true, \"CustomInterface2_ib id: [0-9]+ super: [0-9]+ source: .*\/custom.jar\");\n+        check(listData, true, \"CustomLoadee2 id: [0-9]+ super: [0-9]+ interfaces: [0-9]+ [0-9]+ source: .*\/custom.jar\");\n+        check(listData, true, \"CustomLoadee3 id: [0-9]+ super: [0-9]+ source: .*\/custom.jar\");\n+        check(listData, true, \"CustomLoadee3Child id: [0-9]+ super: [0-9]+ source: .*\/custom.jar\");\n+        check(listData, true, \"CustomLoadee4WithLambda id: [0-9]+ super: [0-9]+ source: .*\/custom.jar\");\n+\n+        \/\/ We don't support archiving of Lambda proxies for custom loaders.\n+        check(listData, false, \"@lambda-proxy.*CustomLoadee4WithLambda\");\n+\n+        \/\/ Dump the static archive\n+        CDSOptions opts = (new CDSOptions())\n+            .addPrefix(\"-cp\", appJar,\n+                       \"-Xlog:cds+class=debug\",\n+                       \"-XX:SharedClassListFile=\" + classList);\n+        CDSTestUtils.createArchiveAndCheck(opts)\n+            .shouldContain(\"unreg CustomLoadee\")\n+            .shouldContain(\"unreg CustomLoadee2\")\n+            .shouldContain(\"unreg CustomLoadee3Child\")\n+            .shouldContain(\"unreg OldClass ** unlinked\");\n+\n+        \/\/ Use the dumped static archive\n+        opts = (new CDSOptions())\n+            .setUseVersion(false)\n+            .addPrefix(\"-cp\", appJar)\n+            .addSuffix(\"-Xlog:class+load,verification\")\n+            .addSuffix(commandLine);\n+        CDSTestUtils.run(opts)\n+            .assertNormalExit(\"CustomLoadee source: shared objects file\",\n+                              \"CustomLoadee2 source: shared objects file\",\n+                              \"CustomLoadee3Child source: shared objects file\",\n+                              \"OldClass source: shared objects file\",\n+                              \"Verifying class OldClass with old format\");\n+    }\n+\n+    static void check(String listData, boolean mustMatch, String regexp) throws Exception {\n+        Pattern pattern = Pattern.compile(regexp, Pattern.MULTILINE);\n+        Matcher matcher = pattern.matcher(listData);\n+        boolean found = matcher.find();\n+        if (mustMatch && !found) {\n+            System.out.println(listData);\n+            throw new RuntimeException(\"Pattern \\\"\" + regexp + \"\\\" not found in classlist\");\n+        }\n+\n+        if (!mustMatch && found) {\n+            throw new RuntimeException(\"Pattern \\\"\" + regexp + \"\\\" found in in classlist: \\\"\"\n+                                       + matcher.group() + \"\\\"\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/CustomClassListDump.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,2 +66,0 @@\n-        String testClass = args[2];\n-        log(\"testClass = \" + testClass);\n@@ -69,6 +67,11 @@\n-        switch(loaderType) {\n-        case \"unregistered\":\n-            loadAndUseWithUnregisteredLoader(urls, testClass);\n-            break;\n-        default:\n-            throw new IllegalArgumentException(\"loader type is wrong: \" + loaderType);\n+        for (int i = 2; i < args.length; i++) {\n+            String testClass = args[i];\n+            log(\"testClass = \" + testClass);\n+\n+            switch(loaderType) {\n+            case \"unregistered\":\n+                loadAndUseWithUnregisteredLoader(urls, testClass);\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"loader type is wrong: \" + loaderType);\n+            }\n@@ -90,1 +93,1 @@\n-        log(\"class =\" + c);\n+        log(\"class  = \" + c);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/CustomLoaderApp.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+public class CustomLoadee4WithLambda {\n+    public static void test() {\n+        doit(() -> {\n+                System.out.println(\"Hello inside a Lambda expression\");\n+            });\n+    }\n+\n+    static void doit(Runnable r) {\n+        r.run();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/test-classes\/CustomLoadee4WithLambda.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-import java.util.*;\n-\n-\/\/ This is a test case executed by DumpClassList.java to load classes\n-\/\/ from various places to ensure that they are not written to the class list.\n-public class ArrayListTest {\n-    public static void main(String args[]) throws Exception {\n-        \/\/ The following lambda usage should generate various classes like\n-        \/\/ java.lang.invoke.LambdaForm$MH\/1146743572. All of them should be excluded from\n-        \/\/ the class list.\n-        List<String> a = new ArrayList<>();\n-        a.add(\"hello world.\");\n-        a.forEach(str -> System.out.println(str));\n-\n-        System.out.println(Class.forName(\"java.lang.NewClass\")); \/\/ should be excluded from the class list.\n-        System.out.println(Class.forName(\"boot.append.Foo\"));    \/\/ should be excluded from the class list.\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/ArrayListTest.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import java.util.*;\n+\n+\/\/ This is a test case executed by DumpClassList.java to load classes\n+\/\/ from various places to ensure that they are not written to the class list.\n+public class DumpClassListApp {\n+    public static void main(String args[]) throws Exception {\n+        \/\/ The following lambda usage should generate various classes like\n+        \/\/ java.lang.invoke.LambdaForm$MH\/1146743572. All of them should be excluded from\n+        \/\/ the class list.\n+        List<String> a = new ArrayList<>();\n+        a.add(\"hello world.\");\n+        a.forEach(str -> System.out.println(str));\n+\n+        System.out.println(Class.forName(\"jdk.jfr.NewClass\")); \/\/ should be excluded from the class list.\n+        System.out.println(Class.forName(\"boot.append.Foo\"));    \/\/ should be excluded from the class list.\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/DumpClassListApp.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"}]}