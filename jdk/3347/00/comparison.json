{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import java.util.function.Supplier;\n@@ -48,0 +49,1 @@\n+import static jdk.jpackage.internal.WindowsAppImageBuilder.ICON_ICO;\n@@ -66,10 +68,5 @@\n-        if (!target.isAbsolute()) {\n-            rebrandInstaller(params, target.toAbsolutePath());\n-            return;\n-        }\n-        rebrandExecutable(params, target, (resourceLock) -> {\n-            rebrandProperties(resourceLock, createResource(\n-                    INSTALLER_PROPERTIES_TEMPLATE, params).setPublicName(\n-                            INSTALLER_PROPERTIES_RESOURE_DIR_ID),\n-                    createSubstituteData(params), target);\n-        });\n+        Path icon = ICON_ICO.fetchFrom(params);\n+        rebrandExecutable(params, icon, () -> {\n+            return createResource(INSTALLER_PROPERTIES_TEMPLATE, params).setPublicName(\n+                    INSTALLER_PROPERTIES_RESOURE_DIR_ID);\n+        }, target);\n@@ -80,0 +77,10 @@\n+        rebrandExecutable(params, icon, () -> {\n+            return createResource(\n+                    LAUNCHER_PROPERTIES_TEMPLATE, params).setPublicName(\n+                            APP_NAME.fetchFrom(params) + \".properties\");\n+        }, target);\n+    }\n+\n+    private void rebrandExecutable(Map<String, ? super Object> params, Path icon,\n+            Supplier<OverridableResource> resourceSupplier, Path target) throws\n+            IOException {\n@@ -85,1 +92,2 @@\n-            rebrandLauncher(params, absIcon, target.toAbsolutePath());\n+            rebrandExecutable(params, absIcon, resourceSupplier,\n+                    target.toAbsolutePath());\n@@ -89,5 +97,3 @@\n-            rebrandProperties(resourceLock, createResource(\n-                    LAUNCHER_PROPERTIES_TEMPLATE, params).setPublicName(\n-                            APP_NAME.fetchFrom(params) + \".properties\"),\n-                    createSubstituteData(params), target);\n-\n+            rebrandProperties(resourceLock, resourceSupplier.get(),\n+                    createSubstituteData(\n+                            params), target);\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/ExecutableRebrander.java","additions":23,"deletions":17,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,175 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Graphics;\n+import java.awt.image.BufferedImage;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.function.Consumer;\n+import javax.swing.Icon;\n+import javax.swing.filechooser.FileSystemView;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.PackageType;\n+import static jdk.jpackage.test.RunnablePackageTest.Action.CREATE;\n+import jdk.jpackage.test.TKit;\n+\n+\/**\n+ * Test that --icon also changes icon of exe installer.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary jpackage with --icon parameter for exe installer\n+ * @library ..\/helpers\n+ * @key jpackagePlatformPackage\n+ * @build jdk.jpackage.test.*\n+ * @build WinInstallerIconTest\n+ * @requires (os.family == \"windows\")\n+ * @modules jdk.jpackage\/jdk.jpackage.internal\n+ * @run main\/othervm\/timeout=360 -Xmx512m  jdk.jpackage.test.Main\n+ *  --jpt-run=WinInstallerIconTest\n+ *\/\n+public class WinInstallerIconTest {\n+\n+    @Test\n+    public void test() throws IOException {\n+        Path customIcon = iconPath(\"icon\");\n+\n+        BufferedImage[] defaultInstallerIconImg = new BufferedImage[1];\n+\n+        \/\/ Create installer with the default icon\n+        createInstaller(null, \"WithDefaultIcon\", installerIconImg -> {\n+            defaultInstallerIconImg[0] = installerIconImg;\n+        }, null, null);\n+\n+        BufferedImage[] customInstallerIconImg = new BufferedImage[1];\n+\n+        \/\/ Create installer with custom icon.\n+        \/\/ This installer icon should differ from the icon\n+        \/\/ of the installer created with the default icon.\n+        createInstaller(customIcon, \"2\", installerIconImg -> {\n+            customInstallerIconImg[0] = installerIconImg;\n+        }, null, defaultInstallerIconImg[0]);\n+\n+        \/\/ Create installer with custom icon again.\n+        \/\/ This installer icon should differ from the icon\n+        \/\/ of the installer created with the default icon and should have\n+        \/\/ the same icon as the icon of installer created with custom icon.\n+        createInstaller(customIcon, null, null,\n+                customInstallerIconImg[0], defaultInstallerIconImg[0]);\n+    }\n+\n+    private void createInstaller(Path icon, String nameSuffix,\n+            Consumer<BufferedImage> installerIconImgConsumer,\n+            BufferedImage expectedInstallerIconImg,\n+            BufferedImage unexpectedInstallerIconImg) throws IOException {\n+\n+        PackageTest test = new PackageTest()\n+                .forTypes(PackageType.WIN_EXE)\n+                .addInitializer(JPackageCommand::setFakeRuntime)\n+                .configureHelloApp();\n+        if (icon != null) {\n+            test.addInitializer(cmd -> cmd.addArguments(\"--icon\", icon));\n+        }\n+\n+        if (nameSuffix != null) {\n+            test.addInitializer(cmd -> {\n+                String name = cmd.name() + nameSuffix;\n+                cmd.setArgumentValue(\"--name\", name);\n+            });\n+        }\n+\n+        Path installerExePath[] = new Path[1];\n+\n+        test.addBundleVerifier(cmd -> {\n+            installerExePath[0] = cmd.outputBundle();\n+\n+            Icon actualIcon = FileSystemView.getFileSystemView().getSystemIcon(\n+                    installerExePath[0].toFile());\n+\n+            BufferedImage actualInstallerIconImg = loadIcon(actualIcon);\n+\n+            if (installerIconImgConsumer != null) {\n+                installerIconImgConsumer.accept(actualInstallerIconImg);\n+            }\n+\n+            if (expectedInstallerIconImg != null) {\n+                TKit.assertTrue(imageEquals(expectedInstallerIconImg,\n+                        actualInstallerIconImg), String.format(\n+                                \"Check icon of %s installer is matching expected value\",\n+                                installerExePath[0]));\n+            }\n+\n+            if (unexpectedInstallerIconImg != null) {\n+                TKit.assertFalse(imageEquals(unexpectedInstallerIconImg,\n+                        actualInstallerIconImg), String.format(\n+                                \"Check icon of %s installer is NOT matching unexpected value\",\n+                                installerExePath[0]));\n+            }\n+        });\n+\n+        test.run(CREATE);\n+\n+        if (installerExePath[0] != null && nameSuffix != null) {\n+            TKit.deleteIfExists(installerExePath[0]);\n+        }\n+    }\n+\n+    private BufferedImage loadIcon(Icon icon) {\n+        TKit.assertNotEquals(0, icon.getIconWidth(),\n+                \"Check icon has not empty width\");\n+        TKit.assertNotEquals(0, icon.getIconHeight(),\n+                \"Check icon has not empty height\");\n+        BufferedImage img = new BufferedImage(\n+                icon.getIconWidth(),\n+                icon.getIconHeight(),\n+                BufferedImage.TYPE_INT_RGB);\n+        Graphics g = img.createGraphics();\n+        icon.paintIcon(null, g, 0, 0);\n+        g.dispose();\n+        return img;\n+    }\n+\n+    private static boolean imageEquals(BufferedImage imgA, BufferedImage imgB) {\n+        if (imgA.getWidth() == imgB.getWidth() && imgA.getHeight()\n+                == imgB.getHeight()) {\n+            for (int x = 0; x < imgA.getWidth(); x++) {\n+                for (int y = 0; y < imgA.getHeight(); y++) {\n+                    if (imgA.getRGB(x, y) != imgB.getRGB(x, y)) {\n+                        return false;\n+                    }\n+                }\n+            }\n+        } else {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private static Path iconPath(String name) {\n+        return TKit.TEST_SRC_ROOT.resolve(Path.of(\"resources\", name\n+                + TKit.ICON_SUFFIX));\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinInstallerIconTest.java","additions":175,"deletions":0,"binary":false,"changes":175,"status":"added"}]}