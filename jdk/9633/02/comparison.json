{"files":[{"patch":"@@ -0,0 +1,155 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package xpath;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+\n+import javax.xml.xpath.*;\n+\n+\/*\n+ * @test\n+ * @bug 8289948\n+ * @library \/javax\/xml\/jaxp\/unittest\n+ * @run testng xpath.XPathExpFnTest\n+ * @summary Test for XPath functions\n+ *\/\n+public class XPathExpFnTest extends XPathTestBase {\n+\n+    private static final Document doc = getDtdDocument();\n+\n+    @DataProvider(name = \"idExpTestCases\")\n+    public Object[][] getIdExp() {\n+        return new Object[][]{\n+                {\"id('x3')\", \"Customer_x3\"},\n+                {\"id('x1 x2 x3')[3]\", \"Customer_x3\"},\n+                {\"id('x1 | x2 | x3')[3]\", \"Customer_x3\"},\n+                {\"id('x')\", \"Email_x\"},\n+                {\"id(\/\/Customer[3]\/@id)\", \"Customer_x3\"},\n+                {\"id(\/\/*[.='123@xyz.com']\/@id)\", \"Email_x\"},\n+        };\n+    }\n+\n+    @DataProvider(name = \"countExpTestCases\")\n+    public Object[][] getCountExp() {\n+        return new Object[][]{\n+                {\"count(\/\/Customer)\", CUSTOMERS},\n+                {\"count(\/\/@id)\", CUSTOMERS + EMAILS},\n+                {\"count(\/\/Customer\/@id)\", CUSTOMERS},\n+                {\"count(\/\/@*)\", CUSTOMERS + EMAILS},\n+                {\"count(\/\/*)\",\n+                        1 + CUSTOMERS + CUSTOMERS * CUSTOMER_ATTRIBUTES},\n+                {\"count(\/\/*[@id])\", CUSTOMERS + EMAILS},\n+                {\"count(.\/*)\", 1},\n+                {\"count(\/\/Customer[1]\/following::*)\",\n+                        CUSTOMERS - 1 + (CUSTOMERS - 1) * CUSTOMER_ATTRIBUTES},\n+                {\"count(\/\/Customer[1]\/following-sibling::*)\", CUSTOMERS - 1},\n+                {\"count(\/\/Customer[3]\/preceding::*)\",\n+                        CUSTOMERS - 1 + (CUSTOMERS - 1) * CUSTOMER_ATTRIBUTES},\n+                {\"count(\/\/Customer[3]\/preceding-sibling::*)\", CUSTOMERS - 1},\n+                {\"count(\/\/Customer[1]\/ancestor::*)\", 1},\n+                {\"count(\/\/Customer[1]\/ancestor-or-self::*)\", 2},\n+                {\"count(\/\/Customer[1]\/descendant::*)\", CUSTOMER_ATTRIBUTES},\n+                {\"count(\/\/Customer[1]\/descendant-or-self::*)\",\n+                        CUSTOMER_ATTRIBUTES + 1},\n+                {\"count(\/\/Customer\/node())\",\n+                        CUSTOMERS + EMAILS + CUSTOMERS * CUSTOMER_ATTRIBUTES},\n+        };\n+    }\n+\n+    @DataProvider(name = \"positionExpTestCases\")\n+    public Object[][] getPositionExp() {\n+        return new Object[][]{\n+                {\"\/\/Customer[position()=1]\", \"Customer_x1\"},\n+                {\"\/\/Customer[position()=last()]\", \"Customer_x3\"},\n+                {\"\/\/Customer[position()>1 and position()<last()]\",\n+                        \"Customer_x2\"},\n+                {\"\/\/Customer[position() mod 2 =0]\", \"Customer_x2\"},\n+                {\"\/\/Customer[last()]\", \"Customer_x3\"},\n+        };\n+    }\n+\n+    @DataProvider(name = \"nameExpTestCases\")\n+    public Object[][] getNameExp() {\n+        return new Object[][]{\n+                {\"local-name(\/\/Customer)\", \"Customer\"},\n+                {\"local-name(\/\/Customer\/@id)\", \"id\"},\n+                {\"local-name(\/\/*[local-name()='Customer'])\", \"Customer\"},\n+                {\"namespace-uri(\/\/Customer)\", \"\"},\n+                {\"name(\/\/Customer)\", \"Customer\"},\n+                {\"name(\/\/Customer\/@id)\", \"id\"},\n+                {\"name(\/\/*[name()='Customer'])\", \"Customer\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"idExpTestCases\")\n+    void testIdFn(String exp, String expected) throws Exception {\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+\n+        Node node = xPath.evaluateExpression(exp, doc, Node.class);\n+        Node node2 = (Node) xPath.evaluate(exp, doc, XPathConstants.NODE);\n+\n+        Assert.assertEquals(node.getNodeName() + \"_\" +\n+                        node.getAttributes().item(0).getNodeValue()\n+                , expected);\n+        Assert.assertEquals(node2, node);\n+    }\n+\n+    @Test(dataProvider = \"countExpTestCases\")\n+    void testCountFn(String exp, int expected) throws Exception {\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+\n+        double num = xPath.evaluateExpression(exp, doc, Double.class);\n+        double num2 = (double) xPath.evaluate(exp, doc, XPathConstants.NUMBER);\n+\n+        Assert.assertEquals(num, expected);\n+        Assert.assertEquals(num2, num);\n+    }\n+\n+    @Test(dataProvider = \"positionExpTestCases\")\n+    void testPositionFn(String exp, String expected) throws Exception {\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+\n+        Node node = xPath.evaluateExpression(exp, doc, Node.class);\n+        Node node2 = (Node) xPath.evaluate(exp, doc, XPathConstants.NODE);\n+\n+        Assert.assertEquals(node.getNodeName() + \"_\" +\n+                        node.getAttributes().item(0).getNodeValue()\n+                , expected);\n+        Assert.assertEquals(node2, node);\n+    }\n+\n+    @Test(dataProvider = \"nameExpTestCases\")\n+    void testNameFn(String exp, String expected) throws Exception {\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+\n+        String s = xPath.evaluateExpression(exp, doc, String.class);\n+        String s2 = (String) xPath.evaluate(exp, doc, XPathConstants.STRING);\n+\n+        Assert.assertEquals(s, expected);\n+        Assert.assertEquals(s2, s);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathExpFnTest.java","additions":155,"deletions":0,"binary":false,"changes":155,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,5 +34,0 @@\n-import static javax.xml.xpath.XPathConstants.BOOLEAN;\n-import static javax.xml.xpath.XPathConstants.NUMBER;\n-import static javax.xml.xpath.XPathConstants.STRING;\n-import static javax.xml.xpath.XPathConstants.NODE;\n-import static javax.xml.xpath.XPathConstants.NODESET;\n@@ -54,0 +49,2 @@\n+    static final String DECLARATION = \"<?xml version=\\\"1.0\\\" \" +\n+            \"encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\";\n@@ -55,4 +52,20 @@\n-    static final String rawXML\n-            = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\"\n-            + \"<Customers>\"\n-            + \"    <Customer id=\\\"1\\\">\"\n+    static final String DTD = \"\"\"\n+            <!DOCTYPE Customers [\n+               <!ELEMENT Customers (Customer*)>\n+               <!ELEMENT Customer (Name, Phone, Email, Address)>\n+               <!ELEMENT Name (#PCDATA)>\n+               <!ELEMENT Phone (#PCDATA)>\n+               <!ELEMENT Email (#PCDATA)>\n+               <!ELEMENT Address (Street, City, State)>\n+               <!ELEMENT Street (#PCDATA)>\n+               <!ELEMENT City (#PCDATA)>\n+               <!ELEMENT State (#PCDATA)>\n+               <!ATTLIST Customer id ID #REQUIRED>\n+               <!ATTLIST Email id ID #REQUIRED>\n+            ]>\n+\n+            \"\"\";\n+\n+    static final String RAW_XML\n+            = \"<Customers>\"\n+            + \"    <Customer id=\\\"x1\\\">\"\n@@ -61,1 +74,1 @@\n-            + \"        <Email>123@xyz.com<\/Email>\"\n+            + \"        <Email id=\\\"x\\\">123@xyz.com<\/Email>\"\n@@ -68,1 +81,1 @@\n-            + \"    <Customer id=\\\"2\\\">\"\n+            + \"    <Customer id=\\\"x2\\\">\"\n@@ -71,1 +84,1 @@\n-            + \"        <Email>123@xyz.com<\/Email>\"\n+            + \"        <Email id=\\\"y\\\">123@xyz.com<\/Email>\"\n@@ -78,1 +91,1 @@\n-            + \"    <Customer id=\\\"3\\\">\"\n+            + \"    <Customer id=\\\"x3\\\">\"\n@@ -81,1 +94,1 @@\n-            + \"        <Email>123@xyz.com<\/Email>\"\n+            + \"        <Email id=\\\"z\\\">123@xyz.com<\/Email>\"\n@@ -90,0 +103,25 @@\n+    final int CUSTOMERS = 3;\n+    final int EMAILS = CUSTOMERS;\n+    final int CUSTOMER_ATTRIBUTES = 7;\n+\n+    public static Document getDtdDocument() throws RuntimeException {\n+        return documentOf(DECLARATION + DTD + RAW_XML);\n+    }\n+\n+    public static Document getDocument() throws RuntimeException {\n+        return documentOf(DECLARATION + RAW_XML);\n+    }\n+\n+    public static Document documentOf(String xml) throws RuntimeException {\n+        try {\n+            var dBF = DocumentBuilderFactory.newInstance();\n+            dBF.setValidating(false);\n+            dBF.setNamespaceAware(true);\n+            return dBF.newDocumentBuilder().parse(\n+                    new ByteArrayInputStream(xml.getBytes(\"UTF-8\")));\n+        } catch (Exception e) {\n+            System.out.println(\"Exception while initializing XML document\");\n+            throw new RuntimeException(e.getMessage());\n+        }\n+    }\n+\n@@ -129,7 +167,7 @@\n-            {xpath, AtomicInteger.class},\n-            {xpath, AtomicLong.class},\n-            {xpath, BigDecimal.class},\n-            {xpath, BigInteger.class},\n-            {xpath, Byte.class},\n-            {xpath, Float.class},\n-            {xpath, Short.class}\n+                {xpath, AtomicInteger.class},\n+                {xpath, AtomicLong.class},\n+                {xpath, BigDecimal.class},\n+                {xpath, BigInteger.class},\n+                {xpath, Byte.class},\n+                {xpath, Float.class},\n+                {xpath, Short.class}\n@@ -143,7 +181,2 @@\n-    public Object[][] getDocument() throws Exception {\n-        DocumentBuilderFactory dBF = DocumentBuilderFactory.newInstance();\n-        dBF.setValidating(false);\n-        dBF.setNamespaceAware(true);\n-        Document doc = dBF.newDocumentBuilder().parse(\n-                new ByteArrayInputStream(rawXML.getBytes(\"UTF-8\")));\n-\n+    public Object[][] getDocuments() throws RuntimeException {\n+        Document doc = getDocument();\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathTestBase.java","additions":62,"deletions":29,"binary":false,"changes":91,"status":"modified"}]}