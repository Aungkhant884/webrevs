{"files":[{"patch":"@@ -1,222 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package xpath;\n-\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import org.w3c.dom.Document;\n-import org.w3c.dom.Node;\n-\n-import javax.xml.xpath.*;\n-\n-\/*\n- * @test\n- * @bug 8289948\n- * @library \/javax\/xml\/jaxp\/unittest\n- * @run testng xpath.XPathExpFnTest\n- * @summary Test for XPath functions\n- *\/\n-public class XPathExpFnTest extends XPathTestBase {\n-\n-    private static final Document doc = getDtdDocument();\n-\n-    \/*\n-     * DataProvider for XPath expressions for id function.\n-     * Data columns:\n-     *  see parameters of the test \"testIdFn\"\n-     *\/\n-    @DataProvider(name = \"idExpTestCases\")\n-    public Object[][] getIdExp() {\n-        return new Object[][]{\n-                {\"id('x3')\", \"Customer_x3\"},\n-                {\"id('x1 x2 x3')[3]\", \"Customer_x3\"},\n-                {\"id('x1 | x2 | x3')[3]\", \"Customer_x3\"},\n-                {\"id('x')\", \"Email_x\"},\n-                {\"id(\/\/Customer[3]\/@id)\", \"Customer_x3\"},\n-                {\"id(\/\/*[.='123@xyz.com']\/@id)\", \"Email_x\"},\n-        };\n-    }\n-\n-    \/*\n-     * DataProvider for XPath expressions for count function.\n-     * Data columns:\n-     *  see parameters of the test \"testCountFn\"\n-     *\/\n-    @DataProvider(name = \"countExpTestCases\")\n-    public Object[][] getCountExp() {\n-        return new Object[][]{\n-                {\"count(\/\/Customer)\", CUSTOMERS},\n-                {\"count(\/\/@id)\", ID_ATTRIBUTES},\n-                {\"count(\/\/Customer\/@id)\", CUSTOMERS},\n-                {\"count(\/\/@*)\", ID_ATTRIBUTES + FOO_ID_ATTRIBUTES},\n-                {\"count(\/\/*)\",\n-                        ROOT + CUSTOMERS + FOO_CUSTOMERS +\n-                                (CUSTOMERS + FOO_CUSTOMERS) *\n-                                        CUSTOMER_ELEMENTS},\n-                {\"count(\/\/*[@id])\", ID_ATTRIBUTES},\n-                {\"count(.\/*)\", ROOT},\n-                {\"count(\/\/Customer[1]\/following::*)\",\n-                        CUSTOMERS - 1 + FOO_CUSTOMERS +\n-                                (CUSTOMERS - 1 + FOO_CUSTOMERS) *\n-                                        CUSTOMER_ELEMENTS},\n-                {\"count(\/\/Customer[1]\/following-sibling::*)\",\n-                        CUSTOMERS - 1 + FOO_CUSTOMERS},\n-                {\"count(\/\/Customer[3]\/preceding::*)\",\n-                        CUSTOMERS - 1 + (CUSTOMERS - 1) * CUSTOMER_ELEMENTS},\n-                {\"count(\/\/Customer[3]\/preceding-sibling::*)\", CUSTOMERS - 1},\n-                {\"count(\/\/Customer[1]\/ancestor::*)\", ROOT},\n-                {\"count(\/\/Customer[1]\/ancestor-or-self::*)\", ROOT + 1},\n-                {\"count(\/\/Customer[1]\/descendant::*)\", CUSTOMER_ELEMENTS},\n-                {\"count(\/\/Customer[1]\/descendant-or-self::*)\",\n-                        CUSTOMER_ELEMENTS + 1},\n-                {\"count(\/\/Customer\/node())\",\n-                        ID_ATTRIBUTES + CUSTOMERS * CUSTOMER_ELEMENTS},\n-        };\n-    }\n-\n-    \/*\n-     * DataProvider for XPath expression for position function.\n-     * Data columns:\n-     *  see parameters of the test \"testPositionFn\"\n-     *\/\n-    @DataProvider(name = \"positionExpTestCases\")\n-    public Object[][] getPositionExp() {\n-        return new Object[][]{\n-                {\"\/\/Customer[position()=1]\", \"Customer_x1\"},\n-                {\"\/\/Customer[position()=last()]\", \"Customer_x3\"},\n-                {\"\/\/Customer[position()>1 and position()<last()]\",\n-                        \"Customer_x2\"},\n-                {\"\/\/Customer[position() mod 2 =0]\", \"Customer_x2\"},\n-                {\"\/\/Customer[last()]\", \"Customer_x3\"},\n-        };\n-    }\n-\n-    \/*\n-     * DataProvider for XPath expression for name and local name function.\n-     * Data columns:\n-     *  see parameters of the test \"testNameFn\"\n-     *\/\n-    @DataProvider(name = \"nameExpTestCases\")\n-    public Object[][] getNameExp() {\n-        return new Object[][]{\n-                {\"local-name(\/\/Customer)\", \"Customer\"},\n-                {\"local-name(\/\/foo:Customer)\", \"Customer\"},\n-                {\"local-name(\/\/Customer\/@id)\", \"id\"},\n-                {\"local-name(\/\/foo:Customer\/@foo:id)\", \"id\"},\n-                {\"local-name(\/\/*[local-name()='Customer'])\", \"Customer\"},\n-                {\"namespace-uri(.)\", \"\"},\n-                {\"namespace-uri(\/\/Customers)\", \"\"},\n-                {\"namespace-uri(\/\/Customer)\", \"\"},\n-                {\"namespace-uri(\/\/foo:Customer)\", \"foo\"},\n-                {\"namespace-uri(\/\/@id)\", \"\"},\n-                {\"namespace-uri(\/\/@foo:id)\", \"foo\"},\n-                {\"name(\/\/*[namespace-uri()=\\\"foo\\\"])\", \"foo:Customer\"},\n-                {\"name(\/\/Customer)\", \"Customer\"},\n-                {\"name(\/\/foo:Customer)\", \"foo:Customer\"},\n-                {\"name(\/\/Customer\/@id)\", \"id\"},\n-                {\"name(\/\/foo:Customer\/@foo:id)\", \"foo:id\"},\n-                {\"name(\/\/*[name()='foo:Customer'])\", \"foo:Customer\"},\n-        };\n-    }\n-\n-    \/**\n-     * This test evaluates XPath expressions of id function and checks against\n-     * the expected result.\n-     *\n-     * @param exp      XPath expression\n-     * @param expected expected result\n-     * @throws Exception\n-     *\/\n-    @Test(dataProvider = \"idExpTestCases\")\n-    void testIdFn(String exp, String expected) throws Exception {\n-        XPath xPath = XPathFactory.newInstance().newXPath();\n-\n-        Node node = xPath.evaluateExpression(exp, doc, Node.class);\n-        Node node2 = (Node) xPath.evaluate(exp, doc, XPathConstants.NODE);\n-\n-        Assert.assertEquals(node.getNodeName() + \"_\" +\n-                        node.getAttributes().item(0).getNodeValue()\n-                , expected);\n-        Assert.assertEquals(node2, node);\n-    }\n-\n-    \/**\n-     * This test evaluates XPath expressions of count function and checks\n-     * against the expected result.\n-     *\n-     * @param exp      XPath expression\n-     * @param expected expected result\n-     * @throws Exception\n-     *\/\n-    @Test(dataProvider = \"countExpTestCases\")\n-    void testCountFn(String exp, int expected) throws Exception {\n-        XPath xPath = XPathFactory.newInstance().newXPath();\n-\n-        double num = xPath.evaluateExpression(exp, doc, Double.class);\n-        double num2 = (double) xPath.evaluate(exp, doc, XPathConstants.NUMBER);\n-\n-        Assert.assertEquals(num, expected);\n-        Assert.assertEquals(num2, num);\n-    }\n-\n-    \/**\n-     * This test evaluates XPath expressions of position function and checks\n-     * against the expected result.\n-     *\n-     * @param exp      XPath expression\n-     * @param expected expected result\n-     * @throws Exception\n-     *\/\n-    @Test(dataProvider = \"positionExpTestCases\")\n-    void testPositionFn(String exp, String expected) throws Exception {\n-        XPath xPath = XPathFactory.newInstance().newXPath();\n-\n-        Node node = xPath.evaluateExpression(exp, doc, Node.class);\n-        Node node2 = (Node) xPath.evaluate(exp, doc, XPathConstants.NODE);\n-\n-        Assert.assertEquals(node.getNodeName() + \"_\" +\n-                        node.getAttributes().item(0).getNodeValue()\n-                , expected);\n-        Assert.assertEquals(node2, node);\n-    }\n-\n-    \/**\n-     * This test evaluates XPath expressions of name and local-name functions\n-     * and checks against the expected result.\n-     *\n-     * @param exp      XPath expression\n-     * @param expected expected result\n-     * @throws Exception\n-     *\/\n-    @Test(dataProvider = \"nameExpTestCases\")\n-    void testNameFn(String exp, String expected) throws Exception {\n-        XPath xPath = XPathFactory.newInstance().newXPath();\n-\n-        String s = xPath.evaluateExpression(exp, doc, String.class);\n-        String s2 = (String) xPath.evaluate(exp, doc, XPathConstants.STRING);\n-\n-        Assert.assertEquals(s, expected);\n-        Assert.assertEquals(s2, s);\n-    }\n-}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathExpFnTest.java","additions":0,"deletions":222,"binary":false,"changes":222,"status":"deleted"},{"patch":"@@ -0,0 +1,222 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package xpath;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+\n+import javax.xml.xpath.*;\n+\n+\/*\n+ * @test\n+ * @bug 8289948\n+ * @library \/javax\/xml\/jaxp\/unittest\n+ * @run testng xpath.XPathNodeSetFnTest\n+ * @summary Tests the XPath Node Set Functions\n+ *\/\n+public class XPathNodeSetFnTest extends XPathTestBase {\n+\n+    private static final Document doc = getDtdDocument();\n+\n+    \/*\n+     * DataProvider for testing the id function.\n+     * Data columns:\n+     *  see parameters of the test \"testIdFn\"\n+     *\/\n+    @DataProvider(name = \"idExpTestCases\")\n+    public Object[][] getIdExp() {\n+        return new Object[][]{\n+                {\"id('x3')\", \"Customer_x3\"},\n+                {\"id('x1 x2 x3')[3]\", \"Customer_x3\"},\n+                {\"id('x1 | x2 | x3')[3]\", \"Customer_x3\"},\n+                {\"id('x')\", \"Email_x\"},\n+                {\"id(\/\/Customer[3]\/@id)\", \"Customer_x3\"},\n+                {\"id(\/\/*[.='123@xyz.com']\/@id)\", \"Email_x\"},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider for testing the count function.\n+     * Data columns:\n+     *  see parameters of the test \"testCountFn\"\n+     *\/\n+    @DataProvider(name = \"countExpTestCases\")\n+    public Object[][] getCountExp() {\n+        return new Object[][]{\n+                {\"count(\/\/Customer)\", CUSTOMERS},\n+                {\"count(\/\/@id)\", ID_ATTRIBUTES},\n+                {\"count(\/\/Customer\/@id)\", CUSTOMERS},\n+                {\"count(\/\/@*)\", ID_ATTRIBUTES + FOO_ID_ATTRIBUTES},\n+                {\"count(\/\/*)\",\n+                        ROOT + CUSTOMERS + FOO_CUSTOMERS +\n+                                (CUSTOMERS + FOO_CUSTOMERS) *\n+                                        CUSTOMER_ELEMENTS},\n+                {\"count(\/\/*[@id])\", ID_ATTRIBUTES},\n+                {\"count(.\/*)\", ROOT},\n+                {\"count(\/\/Customer[1]\/following::*)\",\n+                        CUSTOMERS - 1 + FOO_CUSTOMERS +\n+                                (CUSTOMERS - 1 + FOO_CUSTOMERS) *\n+                                        CUSTOMER_ELEMENTS},\n+                {\"count(\/\/Customer[1]\/following-sibling::*)\",\n+                        CUSTOMERS - 1 + FOO_CUSTOMERS},\n+                {\"count(\/\/Customer[3]\/preceding::*)\",\n+                        CUSTOMERS - 1 + (CUSTOMERS - 1) * CUSTOMER_ELEMENTS},\n+                {\"count(\/\/Customer[3]\/preceding-sibling::*)\", CUSTOMERS - 1},\n+                {\"count(\/\/Customer[1]\/ancestor::*)\", ROOT},\n+                {\"count(\/\/Customer[1]\/ancestor-or-self::*)\", ROOT + 1},\n+                {\"count(\/\/Customer[1]\/descendant::*)\", CUSTOMER_ELEMENTS},\n+                {\"count(\/\/Customer[1]\/descendant-or-self::*)\",\n+                        CUSTOMER_ELEMENTS + 1},\n+                {\"count(\/\/Customer\/node())\",\n+                        ID_ATTRIBUTES + CUSTOMERS * CUSTOMER_ELEMENTS},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider for testing the position function.\n+     * Data columns:\n+     *  see parameters of the test \"testPositionFn\"\n+     *\/\n+    @DataProvider(name = \"positionExpTestCases\")\n+    public Object[][] getPositionExp() {\n+        return new Object[][]{\n+                {\"\/\/Customer[position()=1]\", \"Customer_x1\"},\n+                {\"\/\/Customer[position()=last()]\", \"Customer_x3\"},\n+                {\"\/\/Customer[position()>1 and position()<last()]\",\n+                        \"Customer_x2\"},\n+                {\"\/\/Customer[position() mod 2 =0]\", \"Customer_x2\"},\n+                {\"\/\/Customer[last()]\", \"Customer_x3\"},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider for testing the name and local-name functions.\n+     * Data columns:\n+     *  see parameters of the test \"testNameFn\"\n+     *\/\n+    @DataProvider(name = \"nameExpTestCases\")\n+    public Object[][] getNameExp() {\n+        return new Object[][]{\n+                {\"local-name(\/\/Customer)\", \"Customer\"},\n+                {\"local-name(\/\/foo:Customer)\", \"Customer\"},\n+                {\"local-name(\/\/Customer\/@id)\", \"id\"},\n+                {\"local-name(\/\/foo:Customer\/@foo:id)\", \"id\"},\n+                {\"local-name(\/\/*[local-name()='Customer'])\", \"Customer\"},\n+                {\"namespace-uri(.)\", \"\"},\n+                {\"namespace-uri(\/\/Customers)\", \"\"},\n+                {\"namespace-uri(\/\/Customer)\", \"\"},\n+                {\"namespace-uri(\/\/foo:Customer)\", \"foo\"},\n+                {\"namespace-uri(\/\/@id)\", \"\"},\n+                {\"namespace-uri(\/\/@foo:id)\", \"foo\"},\n+                {\"name(\/\/*[namespace-uri()=\\\"foo\\\"])\", \"foo:Customer\"},\n+                {\"name(\/\/Customer)\", \"Customer\"},\n+                {\"name(\/\/foo:Customer)\", \"foo:Customer\"},\n+                {\"name(\/\/Customer\/@id)\", \"id\"},\n+                {\"name(\/\/foo:Customer\/@foo:id)\", \"foo:id\"},\n+                {\"name(\/\/*[name()='foo:Customer'])\", \"foo:Customer\"},\n+        };\n+    }\n+\n+    \/**\n+     * Verifies that the result of evaluating the id function matches the\n+     * expected result.\n+     *\n+     * @param exp      XPath expression\n+     * @param expected expected result\n+     * @throws Exception if test fails\n+     *\/\n+    @Test(dataProvider = \"idExpTestCases\")\n+    void testIdFn(String exp, String expected) throws Exception {\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+\n+        Node node = xPath.evaluateExpression(exp, doc, Node.class);\n+        Node node2 = (Node) xPath.evaluate(exp, doc, XPathConstants.NODE);\n+\n+        Assert.assertEquals(node.getNodeName() + \"_\" +\n+                        node.getAttributes().item(0).getNodeValue()\n+                , expected);\n+        Assert.assertEquals(node2, node);\n+    }\n+\n+    \/**\n+     * Verifies that the result of evaluating the count function matches the\n+     * expected result.\n+     *\n+     * @param exp      XPath expression\n+     * @param expected expected result\n+     * @throws Exception if test fails\n+     *\/\n+    @Test(dataProvider = \"countExpTestCases\")\n+    void testCountFn(String exp, int expected) throws Exception {\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+\n+        double num = xPath.evaluateExpression(exp, doc, Double.class);\n+        double num2 = (double) xPath.evaluate(exp, doc, XPathConstants.NUMBER);\n+\n+        Assert.assertEquals(num, expected);\n+        Assert.assertEquals(num2, num);\n+    }\n+\n+    \/**\n+     * Verifies that the result of evaluating the position function matches the\n+     * expected result.\n+     *\n+     * @param exp      XPath expression\n+     * @param expected expected result\n+     * @throws Exception if test fails\n+     *\/\n+    @Test(dataProvider = \"positionExpTestCases\")\n+    void testPositionFn(String exp, String expected) throws Exception {\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+\n+        Node node = xPath.evaluateExpression(exp, doc, Node.class);\n+        Node node2 = (Node) xPath.evaluate(exp, doc, XPathConstants.NODE);\n+\n+        Assert.assertEquals(node.getNodeName() + \"_\" +\n+                        node.getAttributes().item(0).getNodeValue()\n+                , expected);\n+        Assert.assertEquals(node2, node);\n+    }\n+\n+    \/**\n+     * Verifies that the result of evaluating the name and local-name functions\n+     * matches the expected result.\n+     *\n+     * @param exp      XPath expression\n+     * @param expected expected result\n+     * @throws Exception if test fails\n+     *\/\n+    @Test(dataProvider = \"nameExpTestCases\")\n+    void testNameFn(String exp, String expected) throws Exception {\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+\n+        String s = xPath.evaluateExpression(exp, doc, String.class);\n+        String s2 = (String) xPath.evaluate(exp, doc, XPathConstants.STRING);\n+\n+        Assert.assertEquals(s, expected);\n+        Assert.assertEquals(s2, s);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathNodeSetFnTest.java","additions":222,"deletions":0,"binary":false,"changes":222,"status":"added"}]}