{"files":[{"patch":"@@ -37,0 +37,2 @@\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n@@ -486,3 +488,10 @@\n-        nativeLibraryLockMap.compute(libraryName, (name, currentLock) -> {\n-            if (currentLock == null) {\n-                currentLock = new CountedLock();\n+        nativeLibraryLockMap.compute(libraryName,\n+            new BiFunction<>() {\n+                public CountedLock apply(String name, CountedLock currentLock) {\n+                    if (currentLock == null) {\n+                        currentLock = new CountedLock();\n+                    }\n+                    \/\/ safe as compute BiFunction<> is executed atomically\n+                    currentLock.increment();\n+                    return currentLock;\n+                }\n@@ -490,4 +499,1 @@\n-            \/\/ safe as compute lambda is executed atomically\n-            currentLock.increment();\n-            return currentLock;\n-        }).lock();\n+        ).lock();\n@@ -497,9 +503,13 @@\n-        CountedLock lock = nativeLibraryLockMap.computeIfPresent(libraryName, (name, currentLock) -> {\n-            if (currentLock.getCounter() == 1) {\n-                \/\/ unlock and release the object if no other threads are queued\n-                currentLock.unlock();\n-                \/\/ remove the element\n-                return null;\n-            } else {\n-                currentLock.decrement();\n-                return currentLock;\n+        CountedLock lock = nativeLibraryLockMap.computeIfPresent(libraryName,\n+            new BiFunction<>() {\n+                public CountedLock apply(String name, CountedLock currentLock) {\n+                    if (currentLock.getCounter() == 1) {\n+                        \/\/ unlock and release the object if no other threads are queued\n+                        currentLock.unlock();\n+                        \/\/ remove the element\n+                        return null;\n+                    } else {\n+                        currentLock.decrement();\n+                        return currentLock;\n+                    }\n+                }\n@@ -507,1 +517,1 @@\n-        });\n+        );\n@@ -524,1 +534,5 @@\n-                    t -> new ArrayDeque<>(8));\n+                    new Function<>() {\n+                        public Deque<NativeLibraryImpl> apply(Thread t) {\n+                            return new ArrayDeque<>(8);\n+                        }\n+                    });\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/NativeLibraries.java","additions":32,"deletions":18,"binary":false,"changes":50,"status":"modified"}]}