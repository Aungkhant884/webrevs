{"files":[{"patch":"@@ -50,0 +50,3 @@\n+  Address(Register b, ByteSize d)\n+    : _base(b), _index(noreg), _disp((intptr_t)d) {}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -8142,1 +8142,1 @@\n-            && n->as_Load()->barrier_data() == 0);\n+            && n->as_LoadStore()->barrier_data() == 0);\n@@ -8157,1 +8157,1 @@\n-            && n->as_Load()->barrier_data() == 0);\n+            && n->as_LoadStore()->barrier_data() == 0);\n@@ -8379,1 +8379,1 @@\n-  predicate(n->as_Load()->barrier_data() == 0);\n+  predicate(n->as_LoadStore()->barrier_data() == 0);\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-  return Address(thread, (intptr_t) ZThreadLocalData::address_bad_mask_offset());\n+  return Address(thread, ZThreadLocalData::address_bad_mask_offset());\n@@ -34,1 +34,1 @@\n-  return Address(env, (intptr_t) (ZThreadLocalData::address_bad_mask_offset() - JavaThread::jni_environment_offset()));\n+  return Address(env, ZThreadLocalData::address_bad_mask_offset() - JavaThread::jni_environment_offset());\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSetAssembler.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}