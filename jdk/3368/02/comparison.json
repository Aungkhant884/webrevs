{"files":[{"patch":"@@ -52,1 +52,1 @@\n-    NSString* swizzleKernel;\n+    const uint8_t* swizzleMap;\n@@ -55,0 +55,6 @@\n+\n+const uint8_t rgb_to_rgba[4] =  {0, 1, 2, 3};\n+const uint8_t xrgb_to_rgba[4] = {1, 2, 3, 0};\n+const uint8_t bgr_to_rgba[4] =  {2, 1, 0, 3};\n+const uint8_t xbgr_to_rgba[4] = {3, 2, 1, 0};\n+\n@@ -65,4 +71,4 @@\n-        { 0, 1, @\"rgb_to_rgba\" }, \/* 2 - IntRgb       *\/\n-        { 0, 1, @\"xrgb_to_rgba\" }, \/* 3 - IntRgbx      *\/\n-        { 0, 1, @\"bgr_to_rgba\"  }, \/* 4 - IntBgr       *\/\n-        { 0, 1, @\"xbgr_to_rgba\" }, \/* 5 - IntBgrx      *\/\n+        { 0, 1, rgb_to_rgba }, \/* 2 - IntRgb       *\/\n+        { 0, 1, xrgb_to_rgba }, \/* 3 - IntRgbx      *\/\n+        { 0, 1, bgr_to_rgba  }, \/* 4 - IntBgr       *\/\n+        { 0, 1, xbgr_to_rgba }, \/* 5 - IntBgrx      *\/\n@@ -155,0 +161,6 @@\n+static void fillSwizzleUniforms(struct SwizzleUniforms *uniforms, const MTLRasterFormatInfo *rfi) {\n+    const size_t SWIZZLE_MAP_SIZE = 4;\n+    memcpy(&uniforms->swizzle, rfi->swizzleMap, SWIZZLE_MAP_SIZE);\n+    uniforms->hasAlpha = rfi->hasAlpha;\n+}\n+\n@@ -183,1 +195,1 @@\n-        if (rfi->swizzleKernel != nil) {\n+        if (rfi->swizzleMap != nil) {\n@@ -190,1 +202,1 @@\n-                                                                getComputePipelineState:rfi->swizzleKernel];\n+                                                                getComputePipelineState:@\"swizzle_to_rgba\"];\n@@ -196,0 +208,7 @@\n+            struct SwizzleUniforms uniforms;\n+            fillSwizzleUniforms(&uniforms, rfi);\n+            [computeEncoder setBytes:&uniforms length:sizeof(struct SwizzleUniforms) atIndex:2];\n+\n+            NSUInteger pixelCount = buff.length \/ srcInfo->pixelStride;\n+            [computeEncoder setBytes:&pixelCount length:sizeof(NSUInteger) atIndex:3];\n+\n@@ -200,1 +219,0 @@\n-            NSUInteger pixelCount = buff.length \/ srcInfo->pixelStride;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLBlitLoops.m","additions":26,"deletions":8,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -159,0 +159,5 @@\n+\n+struct SwizzleUniforms {\n+    unsigned char swizzle[4];\n+    unsigned char hasAlpha;\n+};\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/common.h","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -643,3 +643,5 @@\n-kernel void rgb_to_rgba(const device uchar *imageBuffer [[buffer(0)]],\n-                        device uchar *outputBuffer [[buffer(1)]],\n-                        uint gid [[thread_position_in_grid]])\n+kernel void swizzle_to_rgba(const device uchar *imageBuffer [[buffer(0)]],\n+                            device uchar *outputBuffer [[buffer(1)]],\n+                            constant SwizzleUniforms& uniforms [[buffer(2)]],\n+                            constant uint& size [[buffer(3)]],\n+                            uint gid [[thread_position_in_grid]])\n@@ -647,25 +649,3 @@\n-    outputBuffer[4 * gid]     = imageBuffer[4 * gid];     \/\/ r\n-    outputBuffer[4 * gid + 1] = imageBuffer[4 * gid + 1]; \/\/ g\n-    outputBuffer[4 * gid + 2] = imageBuffer[4 * gid + 2]; \/\/ b\n-    outputBuffer[4 * gid + 3] = 255;                      \/\/ a\n-}\n-\n-kernel void bgr_to_rgba(const device uchar *imageBuffer [[buffer(0)]],\n-                        device uchar *outputBuffer [[buffer(1)]],\n-                        uint gid [[thread_position_in_grid]])\n-{\n-    outputBuffer[4 * gid]     = imageBuffer[4 * gid + 2]; \/\/ r\n-    outputBuffer[4 * gid + 1] = imageBuffer[4 * gid + 1]; \/\/ g\n-    outputBuffer[4 * gid + 2] = imageBuffer[4 * gid];     \/\/ b\n-    outputBuffer[4 * gid + 3] = 255;                      \/\/ a\n-}\n-\n-kernel void xrgb_to_rgba(const device uchar *imageBuffer [[buffer(0)]],\n-                         device uchar *outputBuffer [[buffer(1)]],\n-                         uint gid [[thread_position_in_grid]])\n-{\n-    outputBuffer[4 * gid]     = imageBuffer[4 * gid + 1]; \/\/ r\n-    outputBuffer[4 * gid + 1] = imageBuffer[4 * gid + 2]; \/\/ g\n-    outputBuffer[4 * gid + 2] = imageBuffer[4 * gid + 3]; \/\/ b\n-    outputBuffer[4 * gid + 3] = imageBuffer[4 * gid];     \/\/ a\n-}\n+    if (gid > size) {\n+        return;\n+    }\n@@ -673,0 +653,3 @@\n+    outputBuffer[4 * gid]     = imageBuffer[4 * gid + uniforms.swizzle[0]]; \/\/ r\n+    outputBuffer[4 * gid + 1] = imageBuffer[4 * gid + uniforms.swizzle[1]]; \/\/ g\n+    outputBuffer[4 * gid + 2] = imageBuffer[4 * gid + uniforms.swizzle[2]]; \/\/ b\n@@ -674,8 +657,5 @@\n-kernel void xbgr_to_rgba(const device uchar *imageBuffer [[buffer(0)]],\n-                         device uchar *outputBuffer [[buffer(1)]],\n-                         uint gid [[thread_position_in_grid]])\n-{\n-    outputBuffer[4 * gid]     = imageBuffer[4 * gid + 3]; \/\/ r\n-    outputBuffer[4 * gid + 1] = imageBuffer[4 * gid + 2]; \/\/ g\n-    outputBuffer[4 * gid + 2] = imageBuffer[4 * gid + 1]; \/\/ b\n-    outputBuffer[4 * gid + 3] = imageBuffer[4 * gid];     \/\/ a\n+    if (uniforms.hasAlpha) {\n+        outputBuffer[4 * gid + 3] = imageBuffer[4 * gid + uniforms.swizzle[3]];\n+    } else {\n+        outputBuffer[4 * gid + 3] = 255;\n+    }\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/shaders.metal","additions":16,"deletions":36,"binary":false,"changes":52,"status":"modified"}]}