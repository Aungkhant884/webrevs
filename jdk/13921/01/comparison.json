{"files":[{"patch":"@@ -2595,2 +2595,0 @@\n-  assert(!thread->is_in_any_VTMS_transition(), \"dynamic code generated events are not allowed in any VTMS transition\");\n-\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.util.concurrent.locks.LockSupport;\n@@ -52,0 +53,7 @@\n+        Runnable task = () -> {\n+            String result = \"string\" + System.currentTimeMillis();\n+            \/\/ Park to provoke re-mounting of virtual thread.\n+            LockSupport.parkNanos(1);\n+            Reference.reachabilityFence(result);\n+        };\n+\n@@ -55,5 +63,5 @@\n-                Thread t = new Thread(() -> {\n-                        String result = \"string\" + System.currentTimeMillis();\n-                        Reference.reachabilityFence(result);\n-                });\n-                threads.add(t);\n+                threads.add(Thread.ofVirtual().unstarted(task));\n+                threads.add(Thread.ofPlatform().unstarted(task));\n+            }\n+\n+            for (Thread t: threads) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/DynamicCodeGenerated\/DynamicCodeGeneratedTest.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include \"jvmti_common.h\"\n@@ -46,1 +47,1 @@\n-\n+  LOG(\"Event: %s\\n\", name);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/DynamicCodeGenerated\/libDynamicCodeGenerated.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}