{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n- * @run main\/othervm\/native -agentlib:ji03t003 nsk.jvmti.scenarios.jni_interception.JI03.ji03t003\n+ * @run main\/othervm\/native -agentlib:ji03t003=-verbose nsk.jvmti.scenarios.jni_interception.JI03.ji03t003 -verbose\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/scenarios\/jni_interception\/JI03\/ji03t003\/TestDescription.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,2 @@\n+\/\/ test thread\n+static jthread testThread = NULL;\n@@ -58,0 +60,17 @@\n+void setTestThread(JNIEnv *env) {\n+    jthread curThread = NULL;\n+    NSK_JVMTI_VERIFY(jvmti->GetCurrentThread(&curThread));\n+    testThread = env->NewGlobalRef(curThread);\n+}\n+\n+void resetTestThread(JNIEnv *env) {\n+     env->DeleteGlobalRef(testThread);\n+     testThread = NULL;\n+}\n+\n+bool isOnTestThread(JNIEnv *env) {\n+    jthread curThread = NULL;\n+    NSK_JVMTI_VERIFY(jvmti->GetCurrentThread(&curThread));\n+    return env->IsSameObject(testThread, curThread);\n+}\n+\n@@ -62,4 +81,10 @@\n-    throw_calls++;\n-    if (verbose)\n-        printf(\"\\nMyThrow: the function called successfully: number of calls=%d\\n\",\n-            throw_calls);\n+    if (isOnTestThread(env)) {\n+        throw_calls++;\n+        if (verbose) {\n+            printf(\"\\nMyThrow: the function called successfully: number of calls=%d\\n\", throw_calls);\n+        }\n+    } else {\n+        if (verbose) {\n+            printf(\"\\nMyThrow: the function called on non-test thread, ignoring\\n\");\n+        }\n+    }\n@@ -77,4 +102,10 @@\n-    thrownew_calls++;\n-    if (verbose)\n-        printf(\"\\nMyThrowNew: the function called successfully: number of calls=%d\\n\",\n-            thrownew_calls);\n+    if (isOnTestThread(env)) {\n+        thrownew_calls++;\n+        if (verbose) {\n+            printf(\"\\nMyThrowNew: the function called successfully: number of calls=%d\\n\", thrownew_calls);\n+        }\n+    } else {\n+        if (verbose) {\n+            printf(\"\\nMyThrowNew: the function called on non-test thread, ignoring\\n\");\n+        }\n+    }\n@@ -90,1 +121,1 @@\n-    if (isThreadExpected(jvmti, NULL)) {\n+    if (isOnTestThread(env)) {\n@@ -92,3 +123,7 @@\n-        if (verbose)\n-            printf(\"\\nMyExceptionOccurred: the function called successfully: number of calls=%d\\n\",\n-                   excoccur_calls);\n+        if (verbose) {\n+            printf(\"\\nMyExceptionOccurred: the function called successfully: number of calls=%d\\n\", excoccur_calls);\n+        }\n+    } else {\n+        if (verbose) {\n+            printf(\"\\nMyExceptionOccurred: the function called on non-test thread, ignoring\\n\");\n+        }\n@@ -287,0 +322,2 @@\n+    setTestThread(env);\n+\n@@ -304,0 +341,2 @@\n+    resetTestThread(env);\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/scenarios\/jni_interception\/JI03\/ji03t003\/ji03t003.cpp","additions":52,"deletions":13,"binary":false,"changes":65,"status":"modified"}]}