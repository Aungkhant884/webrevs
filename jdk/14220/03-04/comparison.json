{"files":[{"patch":"@@ -109,1 +109,1 @@\n-  _gc_par_phases[ClearRetainedRegionBitmaps] = new WorkerDataArray<double>(\"ClearRetainedRegionsBitmap\", \"Clear Retained Region Bitmaps (ms):\", max_gc_threads);\n+  _gc_par_phases[ClearRetainedRegionData] = new WorkerDataArray<double>(\"ClearRetainedRegionData\", \"Clear Retained Region Data (ms):\", max_gc_threads);\n@@ -510,1 +510,1 @@\n-    debug_phase(_gc_par_phases[ClearRetainedRegionBitmaps], 1);\n+    debug_phase(_gc_par_phases[ClearRetainedRegionData], 1);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-    ClearRetainedRegionBitmaps,\n+    ClearRetainedRegionData,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -654,1 +654,1 @@\n-  size_t threshold = G1MixedGCLiveThresholdPercent * HeapRegion::GrainBytes \/ 100;\n+  size_t threshold = G1RetainRegionLiveThresholdPercent * HeapRegion::GrainBytes \/ 100;\n@@ -1042,1 +1042,1 @@\n-  double total_time = card_merge_time + card_scan_time + constant_other_time + survivor_evac_time;\n+  double total_time = card_merge_time + card_scan_time + constant_other_time + survivor_evac_time + retained_evac_time;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -337,1 +337,1 @@\n-class G1PostEvacuateCollectionSetCleanupTask2::ClearRetainedRegionBitmaps : public G1AbstractSubTask {\n+class G1PostEvacuateCollectionSetCleanupTask2::ClearRetainedRegionData : public G1AbstractSubTask {\n@@ -341,1 +341,1 @@\n-  class ClearRetainedRegionBitmapsClosure : public HeapRegionClosure {\n+  class ClearRetainedRegionDataClosure : public HeapRegionClosure {\n@@ -349,4 +349,5 @@\n-      \/\/ regions wrt to marking), so we can drop their mark data. The marking information\n-      \/\/ is also only required in a Concurrent Start pause.\n-      bool drop_mark_data = !g1h->collector_state()->in_concurrent_start_gc() ||\n-                            g1h->policy()->retain_evac_failed_region(r);\n+      \/\/ regions wrt to marking), so we must clear their mark data (tams, statistics)\n+      \/\/ previously set eagerly. The marking information on the bitmap is also only\n+      \/\/ required in a Concurrent Start pause for non-retained regions.\n+      bool clear_mark_data = !g1h->collector_state()->in_concurrent_start_gc() ||\n+                             g1h->policy()->retain_evac_failed_region(r);\n@@ -354,1 +355,1 @@\n-      if (drop_mark_data) {\n+      if (clear_mark_data) {\n@@ -369,2 +370,2 @@\n-  ClearRetainedRegionBitmaps(G1EvacFailureRegions* evac_failure_regions) :\n-    G1AbstractSubTask(G1GCPhaseTimes::ClearRetainedRegionBitmaps),\n+  ClearRetainedRegionData(G1EvacFailureRegions* evac_failure_regions) :\n+    G1AbstractSubTask(G1GCPhaseTimes::ClearRetainedRegionData),\n@@ -384,1 +385,1 @@\n-    ClearRetainedRegionBitmapsClosure cl;\n+    ClearRetainedRegionDataClosure cl;\n@@ -769,1 +770,1 @@\n-    add_parallel_task(new ClearRetainedRegionBitmaps(evac_failure_regions));\n+    add_parallel_task(new ClearRetainedRegionData(evac_failure_regions));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-\/\/ - Clear Retained Region Bitmaps (on evacuation failure)\n+\/\/ - Clear Retained Region Data (on evacuation failure)\n@@ -69,1 +69,1 @@\n-  class ClearRetainedRegionBitmaps;\n+  class ClearRetainedRegionData;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -254,0 +254,6 @@\n+  product(uintx, G1RetainRegionLiveThresholdPercent, 85, EXPERIMENTAL,      \\\n+          \"Threshold for evacuation failed regions to be considered for \"   \\\n+          \"inclusion in the collection set candidates.\"                     \\\n+          \"Regions with live bytes exceeding this will not be retained.\")   \\\n+          range(0, 100)                                                     \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/g1\/g1_globals.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -268,0 +268,1 @@\n+        new LogMessageWithLevel(\"Clear Retained Region Data\", Level.DEBUG),\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestGCLogMessages.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}