{"files":[{"patch":"@@ -647,1 +647,1 @@\n-bool G1Policy::retain_evac_failed_region(uint index) const {\n+bool G1Policy::should_retain_evac_failed_region(uint index) const {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -412,2 +412,2 @@\n-  bool retain_evac_failed_region(HeapRegion* r) const {\n-    return retain_evac_failed_region(r->hrm_index());\n+  bool should_retain_evac_failed_region(HeapRegion* r) const {\n+    return should_retain_evac_failed_region(r->hrm_index());\n@@ -415,1 +415,1 @@\n-  bool retain_evac_failed_region(uint index) const;\n+  bool should_retain_evac_failed_region(uint index) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -353,1 +353,1 @@\n-                             g1h->policy()->retain_evac_failed_region(r);\n+                             g1h->policy()->should_retain_evac_failed_region(r);\n@@ -358,0 +358,2 @@\n+        \/\/ Although we only update statistics for evacuation failed regions during\n+        \/\/ the concurrent start pause, for simplicity always clear.\n@@ -575,1 +577,1 @@\n-    bool retain_region = _g1h->policy()->retain_evac_failed_region(r);\n+    bool retain_region = _g1h->policy()->should_retain_evac_failed_region(r);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -274,3 +274,4 @@\n-    \/\/ Self-forwarding marks all objects. Adjust TAMS so that these marks are\n-    \/\/ below it. We might undo this decision later if we find that we want to\n-    \/\/ evacuate that region asap.\n+    \/\/ By default, assume that evacuation failed regions will be part of the\n+    \/\/ marking, so update the TAMS to prepare for marking through them. We might\n+    \/\/ undo this decision later if we find that we want to evacuate that region\n+    \/\/ instead.\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -298,2 +298,4 @@\n-  \/\/ Collection set candidate regions are never going to be marked through.\n-  if (is_old_or_humongous() && !is_collection_set_candidate()) {\n+  \/\/ Collection set candidate regions are never going to be marked through so there\n+  \/\/ is no need to set their TAMS. For regions in the collection set, assume that\n+  \/\/ it is likely they are not failing evacuation either.\n+  if (is_old_or_humongous() && !is_collection_set_candidate() && !in_collection_set()) {\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.inline.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}