{"files":[{"patch":"@@ -109,1 +109,1 @@\n-  _gc_par_phases[ClearRetainedRegionData] = new WorkerDataArray<double>(\"ClearRetainedRegionData\", \"Clear Retained Region Data (ms):\", max_gc_threads);\n+  _gc_par_phases[ProcessEvacuationFailedRegions] = new WorkerDataArray<double>(\"ProcessEvacuationFailedRegions\", \"Process Evacuation Failed Regions (ms):\", max_gc_threads);\n@@ -509,1 +509,1 @@\n-    debug_phase(_gc_par_phases[ClearRetainedRegionData], 1);\n+    debug_phase(_gc_par_phases[ProcessEvacuationFailedRegions], 1);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-    ClearRetainedRegionData,\n+    ProcessEvacuationFailedRegions,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -464,1 +464,1 @@\n-    bool part_of_marking = !(r->is_collection_set_candidate() || !r->is_old_or_humongous());\n+    bool part_of_marking = r->is_old_or_humongous() && !r->is_collection_set_candidate();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapVerifier.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -270,1 +270,6 @@\n-    double base_time_ms = predict_base_time_ms(pending_cards, rs_length, true \/* include_retained *\/);\n+    double base_time_ms = predict_base_time_ms(pending_cards, rs_length);\n+    double retained_time_ms = predict_retained_regions_evac_time();\n+    double total_time_ms = base_time_ms + retained_time_ms;\n+\n+    log_trace(gc, ergo, heap)(\"Predicted total base time: total %f base_time %f retained_time %f\",\n+                              total_time_ms, base_time_ms, retained_time_ms);\n@@ -273,1 +278,1 @@\n-      calculate_desired_eden_length_by_pause(base_time_ms,\n+      calculate_desired_eden_length_by_pause(total_time_ms,\n@@ -521,0 +526,2 @@\n+  uint min_regions_left = MIN2(min_retained_old_cset_length(),\n+                               list.length());\n@@ -525,2 +532,2 @@\n-    if (result + predicted_time_ms >= max_time_for_retaining()) {\n-      \/\/ Over limit. Exit.\n+    if (min_regions_left == 0 && (result + predicted_time_ms >= max_time_for_retaining())) {\n+      \/\/ Over limit, and minimum amount of regions taken. Exit.\n@@ -529,0 +536,3 @@\n+    if (min_regions_left > 0) {\n+      min_regions_left--;\n+    }\n@@ -532,0 +542,1 @@\n+\n@@ -1029,2 +1040,1 @@\n-                                      size_t rs_length,\n-                                      bool include_retained) const {\n+                                      size_t rs_length) const {\n@@ -1042,1 +1052,0 @@\n-  double retained_evac_time = include_retained ? predict_retained_regions_evac_time() : -1.0;\n@@ -1044,2 +1053,1 @@\n-  double total_time = card_merge_time + card_scan_time + constant_other_time + survivor_evac_time +\n-                      (include_retained ? retained_evac_time : 0.0);\n+  double total_time = card_merge_time + card_scan_time + constant_other_time + survivor_evac_time;\n@@ -1048,2 +1056,1 @@\n-                            \"card_merge_time %f card_scan_time %f constant_other_time %f \"\n-                            \"survivor_evac_time %f retained_evac_time %f\",\n+                            \"card_merge_time %f card_scan_time %f constant_other_time %f survivor_evac_time %f\",\n@@ -1051,2 +1058,1 @@\n-                            card_merge_time, card_scan_time, constant_other_time,\n-                            survivor_evac_time, retained_evac_time);\n+                            card_merge_time, card_scan_time, constant_other_time, survivor_evac_time);\n@@ -1059,1 +1065,1 @@\n-  return predict_base_time_ms(pending_cards, rs_length, false \/* include_retained *\/);\n+  return predict_base_time_ms(pending_cards, rs_length);\n@@ -1411,0 +1417,6 @@\n+uint G1Policy::min_retained_old_cset_length() const {\n+  \/\/ Guarantee some progress with retained regions regardless of available time by\n+  \/\/ taking at least one region.\n+  return 1;\n+}\n+\n@@ -1533,3 +1545,1 @@\n-  \/\/ Guarantee some progress with retained regions regardless of available time by\n-  \/\/ taking at least one region.\n-  uint const min_regions = 1;\n+  uint const min_regions = min_retained_old_cset_length();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":27,"deletions":17,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -145,3 +145,1 @@\n-  \/\/ The include_retained parameter determines whether the time retained regions\n-  \/\/ will take is included or not in this base time.\n-  double predict_base_time_ms(size_t pending_cards, size_t rs_length, bool include_retained) const;\n+  double predict_base_time_ms(size_t pending_cards, size_t rs_length) const;\n@@ -265,0 +263,2 @@\n+  \/\/ The minimum number of retained regions we will add to the CSet during a young GC.\n+  uint min_retained_old_cset_length() const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -337,1 +337,1 @@\n-class G1PostEvacuateCollectionSetCleanupTask2::ClearRetainedRegionData : public G1AbstractSubTask {\n+class G1PostEvacuateCollectionSetCleanupTask2::ProcessEvacuationFailedRegionsTask : public G1AbstractSubTask {\n@@ -341,1 +341,1 @@\n-  class ClearRetainedRegionDataClosure : public HeapRegionClosure {\n+  class ProcessEvacuationFailedRegionsClosure : public HeapRegionClosure {\n@@ -361,1 +361,1 @@\n-        \/\/ Evacuation failed region is going to be marked through. Update mark data.\n+        \/\/ This evacuation failed region is going to be marked through. Update mark data.\n@@ -372,2 +372,2 @@\n-  ClearRetainedRegionData(G1EvacFailureRegions* evac_failure_regions) :\n-    G1AbstractSubTask(G1GCPhaseTimes::ClearRetainedRegionData),\n+  ProcessEvacuationFailedRegionsTask(G1EvacFailureRegions* evac_failure_regions) :\n+    G1AbstractSubTask(G1GCPhaseTimes::ProcessEvacuationFailedRegions),\n@@ -387,1 +387,1 @@\n-    ClearRetainedRegionDataClosure cl;\n+    ProcessEvacuationFailedRegionsClosure cl;\n@@ -772,1 +772,1 @@\n-    add_parallel_task(new ClearRetainedRegionData(evac_failure_regions));\n+    add_parallel_task(new ProcessEvacuationFailedRegionsTask(evac_failure_regions));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-  class ClearRetainedRegionData;\n+  class ProcessEvacuationFailedRegionsTask;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -268,1 +268,1 @@\n-        new LogMessageWithLevel(\"Clear Retained Region Data\", Level.DEBUG),\n+        new LogMessageWithLevel(\"Process Evacuation Failed Regions\", Level.DEBUG),\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestGCLogMessages.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}