{"files":[{"patch":"@@ -2048,18 +2048,0 @@\n-void Assembler::evfpclassps(KRegister dst, XMMRegister src, int imm8, int vector_len) {\n-  assert(VM_Version::supports_avx512dq(), \"\");\n-  InstructionAttr attributes(vector_len, \/* rex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n-  attributes.set_is_evex_instruction();\n-  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3A, &attributes);\n-  emit_int16(0x66, (0xC0 | encode));\n-  emit_int8(imm8);\n-}\n-\n-void Assembler::evfpclasspd(KRegister dst, XMMRegister src, int imm8, int vector_len) {\n-  assert(VM_Version::supports_avx512dq(), \"\");\n-  InstructionAttr attributes(vector_len, \/* rex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n-  attributes.set_is_evex_instruction();\n-  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_3A, &attributes);\n-  emit_int16(0x66, (0xC0 | encode));\n-  emit_int8(imm8);\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2706,2 +2706,0 @@\n-  void evfpclassps(KRegister dst, XMMRegister src, int imm8, int vector_len);\n-  void evfpclasspd(KRegister dst, XMMRegister src, int imm8, int vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4308,4 +4308,4 @@\n-    evmovdquq(dst, k0, one, true, vec_enc);\n-    evfpclasspd(ktmp1, src, 0x50, vec_enc);\n-    evsubpd(dst, ktmp1, zero, one, true, vec_enc);\n-    evfpclasspd(ktmp1, src, 0x7, vec_enc);\n+    vsubpd(dst, zero, one, vec_enc);\n+    evcmppd(ktmp1, k0, src, zero, Assembler::LT_OQ, vec_enc);\n+    evblendmpd(dst, ktmp1, one, dst, true, vec_enc);\n+    evcmppd(ktmp1, k0, src, zero, Assembler::EQ_UQ, vec_enc);\n@@ -4315,4 +4315,4 @@\n-    evmovdqul(dst, k0, one, true, vec_enc);\n-    evfpclassps(ktmp1, src, 0x50, vec_enc);\n-    evsubps(dst, ktmp1, zero, one, true, vec_enc);\n-    evfpclassps(ktmp1, src, 0x7, vec_enc);\n+    vsubps(dst, zero, one, vec_enc);\n+    evcmpps(ktmp1, k0, src, zero, Assembler::LT_OQ, vec_enc);\n+    evblendmps(dst, ktmp1, one, dst, true, vec_enc);\n+    evcmpps(ktmp1, k0, src, zero, Assembler::EQ_UQ, vec_enc);\n@@ -4324,1 +4324,1 @@\n-                                          XMMRegister xtmp1, XMMRegister xtmp2, int vec_enc) {\n+                                          XMMRegister xtmp1, int vec_enc) {\n@@ -4326,7 +4326,3 @@\n-    vmovdqu(dst, one);\n-    vcmppd(xtmp1, zero, src, Assembler::LT_OQ, vec_enc);\n-    vsubpd(xtmp2, zero, one, vec_enc);\n-    vblendvpd(dst, xtmp2, one, xtmp1, vec_enc);\n-    vcmppd(xtmp1, src, src, Assembler::UNORD_Q, vec_enc);\n-    vcmppd(xtmp2, src, zero, Assembler::EQ_OQ, vec_enc);\n-    vpor(xtmp1, xtmp1, xtmp2, vec_enc);\n+    vsubpd(dst, zero, one, vec_enc);\n+    vblendvpd(dst, one, dst, src, vec_enc);\n+    vcmppd(xtmp1, src, zero, Assembler::EQ_UQ, vec_enc);\n@@ -4336,7 +4332,3 @@\n-    vmovdqu(dst, one);\n-    vcmpps(xtmp1, zero, src, Assembler::LT_OQ, vec_enc);\n-    vsubps(xtmp2, zero, one, vec_enc);\n-    vblendvps(dst, xtmp2, one, xtmp1, vec_enc);\n-    vcmpps(xtmp1, src, src, Assembler::UNORD_Q, vec_enc);\n-    vcmpps(xtmp2, src, zero, Assembler::EQ_OQ, vec_enc);\n-    vpor(xtmp1, xtmp1, xtmp2, vec_enc);\n+    vsubps(dst, zero, one, vec_enc);\n+    vblendvps(dst, one, dst, src, vec_enc);\n+    vcmpps(xtmp1, src, zero, Assembler::EQ_UQ, vec_enc);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":15,"deletions":23,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -321,1 +321,1 @@\n-                         XMMRegister xtmp1, XMMRegister xtmp2, int vec_enc);\n+                         XMMRegister xtmp1, int vec_enc);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1866,3 +1866,1 @@\n-      if (UseAVX < 1 ||\n-          (size_in_bits == 512 && !VM_Version::supports_avx512dq()) ||\n-          (size_in_bits == 256 && !VM_Version::supports_avx2())) {\n+      if (UseAVX < 1) {\n@@ -6090,1 +6088,1 @@\n-                         $xtmp1$$XMMRegister, $xtmp2$$XMMRegister, vec_enc);\n+                         $xtmp1$$XMMRegister, vec_enc);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8282711\n+ * @summary Accelerate Math.signum function for AVX and AVX512.\n+ * @requires vm.compiler2.enabled\n+ * @requires vm.cpu.features ~= \".*avx.*\"\n+ * @requires os.simpleArch == \"x64\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.vectorization.TestSignumVector\n+ *\/\n+\n+package compiler.vectorization;\n+\n+import compiler.lib.ir_framework.*;\n+\n+public class TestSignumVector {\n+  private static final int ARRLEN = 1024;\n+  private static final int ITERS  = 11000;\n+\n+  private static double [] dinp;\n+  private static double [] dout;\n+  private static float  [] finp;\n+  private static float  [] fout;\n+\n+  public static void main(String args[]) {\n+      TestFramework.runWithFlags(\"-XX:-TieredCompilation\",\n+                                  \"-XX:CompileThresholdScaling=0.3\");\n+      System.out.println(\"PASSED\");\n+  }\n+\n+  @Test\n+  @IR(counts = {\"SignumVD\" , \" > 0 \"})\n+  public void test_signum_double(double[] dout, double[] dinp) {\n+      for (int i = 0; i < dout.length; i+=1) {\n+          dout[i] = Math.signum(dinp[i]);\n+      }\n+  }\n+\n+  @Run(test = {\"test_signum_double\"}, mode = RunMode.STANDALONE)\n+  public void kernel_test_signum_double() {\n+      dinp = new double[ARRLEN];\n+      dout = new double[ARRLEN];\n+      for(int i = 0 ; i < ARRLEN; i++) {\n+          dinp[i] = (double)i*1.4;\n+      }\n+      for (int i = 0; i < ITERS; i++) {\n+          test_signum_double(dout , dinp);\n+      }\n+  }\n+\n+  @Test\n+  @IR(counts = {\"SignumVF\" , \" > 0 \"})\n+  public void test_signum_float(float[] fout, float[] finp) {\n+      for (int i = 0; i < finp.length; i+=1) {\n+          fout[i] = Math.signum(finp[i]);\n+      }\n+  }\n+\n+  @Run(test = {\"test_signum_float\"}, mode = RunMode.STANDALONE)\n+  public void kernel_test_round() {\n+      finp = new float[ARRLEN];\n+      fout = new float[ARRLEN];\n+      for(int i = 0 ; i < ARRLEN; i++) {\n+          finp[i] = (float)i*1.4f;\n+      }\n+      for (int i = 0; i < ITERS; i++) {\n+          test_signum_float(fout , finp);\n+      }\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestSignumVector.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}