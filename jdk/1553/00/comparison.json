{"files":[{"patch":"@@ -744,2 +744,2 @@\n-        Iterable<? extends File> path = getLocation(location);\n-        if (path == null)\n+        Collection<? extends Path> paths = getLocationAsPaths(location);\n+        if (paths == null)\n@@ -748,1 +748,1 @@\n-        for (File f: path) {\n+        for (Path p : paths) {\n@@ -750,1 +750,1 @@\n-                lb.append(f.toURI().toURL());\n+                lb.append(p.toUri().toURL());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/JavacFileManager.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8245956\n+ * @summary JavaCompiler still uses files API instead of Path API in a specific case\n+ * @run main T8245956\n+ *\/\n+\n+import java.net.URI;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.tools.DiagnosticCollector;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.StandardLocation;\n+import javax.tools.ToolProvider;\n+\n+public class T8245956 {\n+    public static void main(String[] args) throws Exception {\n+        Path zipFilePath = Path.of(\"T8245956.zip\");\n+        URI zipFileUri = zipFilePath.toUri();\n+        URI jarZipFileUri = URI.create(\"jar:\" + zipFileUri.toString());\n+        Map<String, String> env = new LinkedHashMap<>();\n+        env.put(\"create\", \"true\");\n+        try (FileSystem fs = FileSystems.newFileSystem(jarZipFileUri, env)) {\n+            Path fsPath = fs.getPath(\"\");\n+            JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+            DiagnosticCollector<JavaFileObject> diagnosticCollector = new DiagnosticCollector<>();\n+            try (StandardJavaFileManager fileManager = compiler.getStandardFileManager(diagnosticCollector, null, null)) {\n+                List<Path> classPath = new ArrayList<>();\n+                classPath.add(fsPath);\n+                fileManager.setLocationFromPaths(StandardLocation.CLASS_PATH, classPath);\n+                fileManager.getClassLoader(StandardLocation.CLASS_PATH);  \/\/ Should not generate any exceptions.\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/T8245956\/T8245956.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}