{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -400,8 +400,1 @@\n-     * Skips characters.\n-     *\n-     * @param  n  The number of characters to skip\n-     *\n-     * @return    The number of characters actually skipped\n-     *\n-     * @throws     IllegalArgumentException  If {@code n} is negative.\n-     * @throws     IOException  If an I\/O error occurs\n+     * {@inheritDoc}\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedReader.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -149,2 +149,1 @@\n-     * Skips characters.  Returns the number of characters that were skipped.\n-     *\n+     * {@inheritDoc}\n@@ -155,4 +154,0 @@\n-     *\n-     * @param      n The number of characters to skip\n-     * @return     The number of characters actually skipped\n-     * @throws     IOException If the stream is closed, or an I\/O error occurs\n","filename":"src\/java.base\/share\/classes\/java\/io\/CharArrayReader.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,1 +79,1 @@\n-     * Skips characters.\n+     * {@inheritDoc}\n@@ -81,1 +81,3 @@\n-     * @throws     IOException  If an I\/O error occurs\n+     * @throws     IllegalArgumentException  If {@code n} is negative and the\n+     *             contained {@code Reader}'s {@code skip} method throws an\n+     *             IllegalArgumentException for a negative parameter\n","filename":"src\/java.base\/share\/classes\/java\/io\/FilterReader.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -270,12 +270,1 @@\n-     * Skip characters.\n-     *\n-     * @param  n\n-     *         The number of characters to skip\n-     *\n-     * @return  The number of characters actually skipped\n-     *\n-     * @throws  IOException\n-     *          If an I\/O error occurs\n-     *\n-     * @throws  IllegalArgumentException\n-     *          If {@code n} is negative\n+     * {@inheritDoc}\n","filename":"src\/java.base\/share\/classes\/java\/io\/LineNumberReader.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -257,9 +257,1 @@\n-     * Skips characters.  This method will block until some characters are\n-     * available, an I\/O error occurs, or the end of the stream is reached.\n-     *\n-     * @param     n  The number of characters to skip\n-     *\n-     * @return    The number of characters actually skipped\n-     *\n-     * @throws    IllegalArgumentException  If {@code n} is negative.\n-     * @throws    IOException  If an I\/O error occurs\n+     * {@inheritDoc}\n","filename":"src\/java.base\/share\/classes\/java\/io\/PushbackReader.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -272,0 +272,2 @@\n+     * If the stream is already at its end before this method is invoked,\n+     * then no characters are skipped and zero is returned.\n","filename":"src\/java.base\/share\/classes\/java\/io\/Reader.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,2 +108,1 @@\n-     * Skips the specified number of characters in the stream. Returns\n-     * the number of characters that were skipped.\n+     * {@inheritDoc}\n@@ -119,3 +118,1 @@\n-     * no effect and always returns 0.\n-     *\n-     * @throws     IOException  If an I\/O error occurs\n+     * no effect and always returns {@code 0}.\n@@ -123,1 +120,1 @@\n-    public long skip(long ns) throws IOException {\n+    public long skip(long n) throws IOException {\n@@ -129,4 +126,4 @@\n-            long n = Math.min(length - next, ns);\n-            n = Math.max(-next, n);\n-            next += n;\n-            return n;\n+            long r = Math.min(length - next, n);\n+            r = Math.max(-next, r);\n+            next += r;\n+            return r;\n","filename":"src\/java.base\/share\/classes\/java\/io\/StringReader.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,3 @@\n-   @bug 4134311\n-   @summary Test if skip works correctly\n+ * @bug 4134311 8247918\n+ * @summary Test if skip works correctly\n+ * @run testng Skip\n@@ -29,0 +30,9 @@\n+import java.io.CharArrayReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.LineNumberReader;\n+import java.io.PushbackReader;\n+import java.io.RandomAccessFile;\n+import java.io.Reader;\n+import java.io.StringReader;\n@@ -30,2 +40,3 @@\n-\n-import java.io.*;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n@@ -34,5 +45,7 @@\n-    public static void main(String argv[]) throws Exception {\n-        File f = new File(System.getProperty(\"test.src\", \".\"),\n-                          \"SkipInput.txt\");\n-        FileReader fr = new FileReader(f);\n-        try {\n+    private static String FILENAME =\n+        System.getProperty(\"test.src\", \".\") + File.separator + \"SkipInput.txt\";\n+    private static File file = new File(FILENAME);\n+\n+    @Test\n+    public void skip() throws IOException {\n+        try (FileReader fr = new FileReader(file)) {\n@@ -42,6 +55,2 @@\n-            if (actual > nchars) {\n-                throw new Exception\n-                    (\"Should skip \" + nchars + \", but skipped \" +actual+\" chars\");\n-            }\n-        } finally {\n-            fr.close();\n+            Assert.assertFalse(actual > nchars,\n+                \"Should skip \" + nchars + \", but skipped \" +actual+\" chars\");\n@@ -50,0 +59,45 @@\n+\n+    @DataProvider(name = \"readers\")\n+    public Object[][] getReaders() throws IOException {\n+        return new Object[][] {\n+            {new LineNumberReader(new FileReader(file))},\n+            {new CharArrayReader(new char[] {27})},\n+            {new PushbackReader(new FileReader(file))},\n+            {new FileReader(file)},\n+            {new StringReader(new String(new byte[] {(byte)42}))}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"readers\")\n+    public void eof(Reader r) throws IOException {\n+         r.skip(Long.MAX_VALUE);\n+         Assert.assertEquals(r.skip(1), 0);\n+         Assert.assertEquals(r.read(), -1);\n+    }\n+\n+    @DataProvider(name = \"skipIAE\")\n+    public Object[][] getSkipIAEs() throws IOException {\n+        return new Object[][] {\n+            {new LineNumberReader(new FileReader(file))},\n+            {new PushbackReader(new FileReader(file))},\n+            {new FileReader(file)}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"skipIAE\", expectedExceptions = IllegalArgumentException.class)\n+    public void testThrowsIAE(Reader r) throws IOException {\n+        r.skip(-1);\n+    }\n+\n+    @DataProvider(name = \"skipNoIAE\")\n+    public Object[][] getSkipNoIAEs() throws IOException {\n+        return new Object[][] {\n+            {new CharArrayReader(new char[] {27})},\n+            {new StringReader(new String(new byte[] {(byte)42}))}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"skipNoIAE\")\n+    public void testNoIAE(Reader r) throws IOException {\n+        r.skip(-1);\n+    }\n","filename":"test\/jdk\/java\/io\/Reader\/Skip.java","additions":70,"deletions":16,"binary":false,"changes":86,"status":"modified"}]}