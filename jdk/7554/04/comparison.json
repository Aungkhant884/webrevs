{"files":[{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8144992\n+ * @requires vm.jvmti\n+ * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @run main\/othervm\/native -agentlib:TestManyBreakpoints\n+ *                          -Xlog:gc+metaspace\n+ *                          -Xint\n+ *                          -XX:MetaspaceSize=16K -XX:MaxMetaspaceSize=64M\n+ *                          TestManyBreakpoints\n+ *\/\n+\n+import jdk.internal.org.objectweb.asm.ClassWriter;\n+import jdk.internal.org.objectweb.asm.Label;\n+import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import jdk.internal.org.objectweb.asm.Opcodes;\n+\n+public class TestManyBreakpoints {\n+\n+  static final int BATCHES = 50;\n+  static final int METHODS = 1000;\n+\n+  public static void main(String[] args) throws Exception {\n+    for (int c = 0; c < BATCHES; c++) {\n+      System.out.println(\"Batch \" + c);\n+      TestClassLoader loader = new TestClassLoader();\n+      Class.forName(\"Target\", true, loader);\n+    }\n+  }\n+\n+  private static class TestClassLoader extends ClassLoader implements Opcodes {\n+    static byte[] TARGET_BYTES = generateTarget();\n+\n+    private static byte[] generateTarget() {\n+      ClassWriter cw = new ClassWriter(0);\n+\n+      cw.visit(52, ACC_SUPER | ACC_PUBLIC, \"Target\", null, \"java\/lang\/Object\", null);\n+      for (int m = 0; m < METHODS; m++) {\n+        MethodVisitor mv = cw.visitMethod(ACC_PUBLIC | ACC_STATIC, \"m\" + m, \"()V\", null, null);\n+        mv.visitCode();\n+        mv.visitInsn(RETURN);\n+        mv.visitMaxs(0, 0);\n+        mv.visitEnd();\n+      }\n+      cw.visitEnd();\n+      return cw.toByteArray();\n+    }\n+\n+    @Override\n+    protected Class<?> findClass(String name) throws ClassNotFoundException {\n+      if (name.equals(\"Target\")) {\n+        return defineClass(name, TARGET_BYTES, 0, TARGET_BYTES.length);\n+      } else {\n+        return super.findClass(name);\n+      }\n+    }\n+  }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/SetBreakpoint\/TestManyBreakpoints.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <string.h>\n+#include <stdio.h>\n+\n+#include \"jvmti.h\"\n+\n+#define TARGET_CLASS_NAME \"LTarget;\"\n+\n+static jvmtiEnv *jvmti = NULL;\n+\n+static void\n+check_jvmti_status(JNIEnv* jni, jvmtiError err, const char* msg) {\n+  if (err != JVMTI_ERROR_NONE) {\n+    printf(\"check_jvmti_status: %s, JVMTI function returned error: %d\\n\", msg, err);\n+    jni->FatalError(msg);\n+  }\n+}\n+\n+void JNICALL classprepare(jvmtiEnv* jvmti_env, JNIEnv* jni_env, jthread thread, jclass klass) {\n+    char* buf;\n+    jvmtiError err;\n+\n+    err = jvmti->GetClassSignature(klass, &buf, NULL);\n+    check_jvmti_status(jni_env, err, \"classprepare: GetClassSignature error\");\n+\n+    if (strncmp(buf, TARGET_CLASS_NAME, strlen(TARGET_CLASS_NAME)) == 0) {\n+        jint nMethods;\n+        jmethodID* methods;\n+        int i;\n+\n+        err = jvmti->GetClassMethods(klass, &nMethods, &methods);\n+        check_jvmti_status(jni_env, err, \"classprepare: GetClassMethods error\");\n+        printf(\"Setting breakpoints in %s\\n\", buf);\n+        fflush(stdout);\n+        for (i = 0; i < nMethods; i++) {\n+            err = jvmti->SetBreakpoint(methods[i], 0);\n+            check_jvmti_status(jni_env, err, \"classprepare: SetBreakpoint error\");\n+        }\n+    }\n+}\n+\n+\n+void JNICALL breakpoint(jvmtiEnv* jvmti_env, JNIEnv* jni_env, jthread thread, jmethodID method, jlocation location) {\n+   \/\/ Do nothing\n+}\n+\n+JNIEXPORT jint JNICALL Agent_OnLoad(JavaVM* vm, char* options, void* reserved) {\n+    jvmtiCapabilities capa;\n+    jvmtiEventCallbacks cbs;\n+    jint err;\n+\n+    err = vm->GetEnv((void**)&jvmti, JVMTI_VERSION_1_0);\n+    if (err != JNI_OK) {\n+        printf(\"Agent_OnLoad: GetEnv error\\n\");\n+        return JNI_ERR;\n+    }\n+\n+    memset(&capa, 0, sizeof(capa));\n+    capa.can_generate_breakpoint_events = 1;\n+    capa.can_generate_single_step_events = 1;\n+    err = jvmti->AddCapabilities(&capa);\n+    if (err != JNI_OK) {\n+        printf(\"Agent_OnLoad: AddCapabilities error\\n\");\n+        return JNI_ERR;\n+    }\n+\n+    memset(&cbs, 0, sizeof(cbs));\n+    cbs.ClassPrepare = classprepare;\n+    cbs.Breakpoint = breakpoint;\n+    err = jvmti->SetEventCallbacks(&cbs, sizeof(cbs));\n+    if (err != JNI_OK) {\n+        printf(\"Agent_OnLoad: SetEventCallbacks error\\n\");\n+        return JNI_ERR;\n+    }\n+\n+    err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_CLASS_PREPARE, NULL);\n+    if (err != JNI_OK) {\n+        printf(\"Agent_OnLoad: SetEventNotificationMode CLASS_PREPARE error\\n\");\n+        return JNI_ERR;\n+    }\n+\n+    err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_BREAKPOINT, NULL);\n+    if (err != JNI_OK) {\n+        printf(\"Agent_OnLoad: SetEventNotificationMode BREAKPOINT error\\n\");\n+        return JNI_ERR;\n+    }\n+\n+    return JNI_OK;\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/SetBreakpoint\/libTestManyBreakpoints.cpp","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"}]}