{"files":[{"patch":"@@ -42,0 +42,1 @@\n+#include \"runtime\/arguments.hpp\"\n@@ -7660,1 +7661,4 @@\n-    libsvml = os::dll_load(JNI_LIB_PREFIX \"svml\" JNI_LIB_SUFFIX, ebuf, sizeof ebuf);\n+    char dll_name[JVM_MAXPATHLEN];\n+    if (os::dll_locate_lib(dll_name, sizeof(dll_name), Arguments::get_dll_dir(), \"svml\")) {\n+      libsvml = os::dll_load(dll_name, ebuf, sizeof ebuf);\n+    }\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -8065,1 +8065,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)) > 8);\n+  predicate(vector_length_in_bytes(n->in(1)->in(1)) > 8);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1035,0 +1035,5 @@\n+  if (stopped()) {\n+    \/\/ Length is known to be always negative during compilation and the IR graph so far constructed is good so return success\n+    return true;\n+  }\n+\n@@ -1042,4 +1047,0 @@\n-  if (stopped()) {\n-    return false;\n-  }\n-\n@@ -1064,1 +1065,2 @@\n-    return false;\n+    \/\/ Range check is known to always fail during compilation and the IR graph so far constructed is good so return success\n+    return true;\n@@ -5346,2 +5348,0 @@\n-    const TypeVect* vt = TypeVect::make(elem_bt, inline_limit);\n-\n@@ -5352,0 +5352,1 @@\n+      const TypeVect* vt = TypeVect::make(elem_bt, inline_limit);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1200,5 +1200,0 @@\n-    if (jvmci_counters_include(this)) {\n-      for (int i = 0; i < JVMCICounterSize; i++) {\n-        _jvmci_old_thread_counters[i] += _jvmci_counters[i];\n-      }\n-    }\n@@ -1460,0 +1455,11 @@\n+\n+#if INCLUDE_JVMCI\n+  if (JVMCICounterSize > 0) {\n+    if (jvmci_counters_include(this)) {\n+      for (int i = 0; i < JVMCICounterSize; i++) {\n+        _jvmci_old_thread_counters[i] += _jvmci_counters[i];\n+      }\n+    }\n+  }\n+#endif \/\/ INCLUDE_JVMCI\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-serviceability\/sa\/TestJmapCoreMetaspace.java                  8268722,8268636   macosx-x64,linux-x64\n+serviceability\/sa\/TestJmapCoreMetaspace.java                  8268722,8268636   generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList-zgc.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,1 +73,0 @@\n-compiler\/intrinsics\/VectorizedMismatchTest.java 8268482 windows-x64\n@@ -114,1 +113,1 @@\n-serviceability\/dcmd\/gc\/RunFinalizationTest.java 8227120 linux-x64\n+serviceability\/dcmd\/gc\/RunFinalizationTest.java 8227120 linux-all,windows-x64\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}