{"files":[{"patch":"@@ -39,1 +39,1 @@\n-#define CURRENT_CDS_ARCHIVE_VERSION 10\n+#define CURRENT_CDS_ARCHIVE_VERSION 11\n","filename":"src\/hotspot\/share\/include\/cds.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -830,7 +830,3 @@\n-        if (!_builder->is_in_buffer_space(*p)) {\n-          tty->print_cr(\"ohashii %p %p\", p, *p);\n-        } else {\n-          assert(_builder->is_in_buffer_space(*p), \"old pointer must point inside buffer space\");\n-          *p += _buffer_to_requested_delta;\n-          assert(_builder->is_in_requested_static_archive(*p), \"new pointer must point inside requested archive\");\n-        }\n+        assert(_builder->is_in_buffer_space(*p), \"old pointer must point inside buffer space\");\n+        *p += _buffer_to_requested_delta;\n+        assert(_builder->is_in_requested_static_archive(*p), \"new pointer must point inside requested archive\");\n","filename":"src\/hotspot\/share\/memory\/archiveBuilder.cpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -215,1 +215,1 @@\n-char* CppVtables::dumptime_init() {\n+char* CppVtables::dumptime_init(ArchiveBuilder* builder) {\n@@ -218,1 +218,1 @@\n-  _index = (CppVtableInfo**)ArchiveBuilder::current()->rw_region()->allocate(vtptrs_bytes);\n+  _index = (CppVtableInfo**)builder->rw_region()->allocate(vtptrs_bytes);\n@@ -222,0 +222,3 @@\n+  size_t cpp_tables_size = builder->rw_region()->top() - builder->rw_region()->base();\n+  builder->alloc_stats()->record_cpp_vtables((int)cpp_tables_size);\n+\n","filename":"src\/hotspot\/share\/memory\/cppVtables.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+class ArchiveBuilder;\n@@ -40,1 +41,1 @@\n-  static char* dumptime_init();\n+  static char* dumptime_init(ArchiveBuilder* builder);\n","filename":"src\/hotspot\/share\/memory\/cppVtables.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-\/\/assert(all_rw_bytes == rw_all, \"everything should have been counted\"); FIXME!\n+  assert(all_rw_bytes == rw_all, \"everything should have been counted\");\n@@ -110,1 +110,0 @@\n-\n","filename":"src\/hotspot\/share\/memory\/dumpAllocStats.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+  f(CppVTables) \\\n@@ -94,0 +95,5 @@\n+\n+  void record_cpp_vtables(int byte_size) {\n+    _bytes[RW][CppVTablesType] += byte_size;\n+  }\n+\n","filename":"src\/hotspot\/share\/memory\/dumpAllocStats.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -461,1 +461,1 @@\n-  char* cloned_vtables = CppVtables::dumptime_init();\n+  char* cloned_vtables = CppVtables::dumptime_init(&builder);\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}