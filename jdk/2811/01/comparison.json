{"files":[{"patch":"@@ -30,0 +30,1 @@\n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure\n@@ -36,1 +37,1 @@\n-    static final int ITERS = 500000;\n+    static final int ITERS = 50000;\n@@ -558,112 +559,138 @@\n-    public static void main(String[] args) {\n-        try {\n-            for (int count = 0; count < ITERS; count++) {\n-                for (int i = 0; i < INT_VALUES.length; i++) {\n-                    int val = INT_VALUES[i];\n-                    verify(\"testRorOrInt1(\" + val + \")\", testRorOrInt1(val), TEST_ROR_OR_INT_1_EXPECTED[i]);\n-                    verify(\"testRorOrInt16(\" + val + \")\", testRorOrInt16(val), TEST_ROR_OR_INT_16_EXPECTED[i]);\n-                    verify(\"testRorOrInt31(\" + val + \")\", testRorOrInt31(val), TEST_ROR_OR_INT_31_EXPECTED[i]);\n-                    verify(\"testRorOrInt32(\" + val + \")\", testRorOrInt32(val), TEST_ROR_OR_INT_32_EXPECTED[i]);\n-\n-                    verify(\"testRorAddInt1(\" + val + \")\", testRorAddInt1(val), TEST_ROR_ADD_INT_1_EXPECTED[i]);\n-                    verify(\"testRorAddInt16(\" + val + \")\", testRorAddInt16(val), TEST_ROR_ADD_INT_16_EXPECTED[i]);\n-                    verify(\"testRorAddInt31(\" + val + \")\", testRorAddInt31(val), TEST_ROR_ADD_INT_31_EXPECTED[i]);\n-                    verify(\"testRorAddInt32(\" + val + \")\", testRorAddInt32(val), TEST_ROR_ADD_INT_32_EXPECTED[i]);\n-\n-                    verify(\"testRorOrInt1Eor(\" + val + \")\", testRorOrInt1Eor(val), TEST_EOR_ROR_SHIFT_1_INT_EXPECTED[i]);\n-                    verify(\"testRorOrInt16Eor(\" + val + \")\", testRorOrInt16Eor(val), TEST_EOR_ROR_SHIFT_16_INT_EXPECTED[i]);\n-                    verify(\"testRorOrInt31Eor(\" + val + \")\", testRorOrInt31Eor(val), TEST_EOR_ROR_SHIFT_31_INT_EXPECTED[i]);\n-                    verify(\"testRorOrInt32Eor(\" + val + \")\", testRorOrInt32Eor(val), TEST_EOR_ROR_SHIFT_32_INT_EXPECTED[i]);\n-\n-                    verify(\"testRorOrInt1And(\" + val + \")\", testRorOrInt1And(val), TEST_AND_ROR_SHIFT_1_INT_EXPECTED[i]);\n-                    verify(\"testRorOrInt16And(\" + val + \")\", testRorOrInt16And(val), TEST_AND_ROR_SHIFT_16_INT_EXPECTED[i]);\n-                    verify(\"testRorOrInt31And(\" + val + \")\", testRorOrInt31And(val), TEST_AND_ROR_SHIFT_31_INT_EXPECTED[i]);\n-                    verify(\"testRorOrInt32And(\" + val + \")\", testRorOrInt32And(val), TEST_AND_ROR_SHIFT_32_INT_EXPECTED[i]);\n-\n-                    verify(\"testRorOrInt1Or(\" + val + \")\", testRorOrInt1Or(val), TEST_OR_ROR_SHIFT_1_INT_EXPECTED[i]);\n-                    verify(\"testRorOrInt16Or(\" + val + \")\", testRorOrInt16Or(val), TEST_OR_ROR_SHIFT_16_INT_EXPECTED[i]);\n-                    verify(\"testRorOrInt31Or(\" + val + \")\", testRorOrInt31Or(val), TEST_OR_ROR_SHIFT_31_INT_EXPECTED[i]);\n-                    verify(\"testRorOrInt32Or(\" + val + \")\", testRorOrInt32Or(val), TEST_OR_ROR_SHIFT_32_INT_EXPECTED[i]);\n-\n-                    verify(\"testRorOrInt1Eon(\" + val + \")\", testRorOrInt1Eon(val), TEST_EON_ROR_SHIFT_1_INT_EXPECTED[i]);\n-                    verify(\"testRorOrInt16Eon(\" + val + \")\", testRorOrInt16Eon(val), TEST_EON_ROR_SHIFT_16_INT_EXPECTED[i]);\n-                    verify(\"testRorOrInt31Eon(\" + val + \")\", testRorOrInt31Eon(val), TEST_EON_ROR_SHIFT_31_INT_EXPECTED[i]);\n-                    verify(\"testRorOrInt32Eon(\" + val + \")\", testRorOrInt32Eon(val), TEST_EON_ROR_SHIFT_32_INT_EXPECTED[i]);\n-\n-                    verify(\"testRorOrInt1Bic(\" + val + \")\", testRorOrInt1Bic(val), TEST_BIC_ROR_SHIFT_1_INT_EXPECTED[i]);\n-                    verify(\"testRorOrInt16Bic(\" + val + \")\", testRorOrInt16Bic(val), TEST_BIC_ROR_SHIFT_16_INT_EXPECTED[i]);\n-                    verify(\"testRorOrInt31Bic(\" + val + \")\", testRorOrInt31Bic(val), TEST_BIC_ROR_SHIFT_31_INT_EXPECTED[i]);\n-                    verify(\"testRorOrInt32Bic(\" + val + \")\", testRorOrInt32Bic(val), TEST_BIC_ROR_SHIFT_32_INT_EXPECTED[i]);\n-\n-                    verify(\"testRorOrInt1Orn(\" + val + \")\", testRorOrInt1Orn(val), TEST_ORN_ROR_SHIFT_1_INT_EXPECTED[i]);\n-                    verify(\"testRorOrInt16Orn(\" + val + \")\", testRorOrInt16Orn(val), TEST_ORN_ROR_SHIFT_16_INT_EXPECTED[i]);\n-                    verify(\"testRorOrInt31Orn(\" + val + \")\", testRorOrInt31Orn(val), TEST_ORN_ROR_SHIFT_31_INT_EXPECTED[i]);\n-                    verify(\"testRorOrInt32Orn(\" + val + \")\", testRorOrInt32Orn(val), TEST_ORN_ROR_SHIFT_32_INT_EXPECTED[i]);\n-\n-                    verify(\"testRorIntApi(\" + val + \", 1)\", testRorIntApi(val, 1), TEST_ROR_INT_API_1_EXPECTED[i]);\n-                    verify(\"testRorIntApi(\" + val + \", 16)\", testRorIntApi(val, 16), TEST_ROR_INT_API_16_EXPECTED[i]);\n-                    verify(\"testRorIntApi(\" + val + \", 31)\", testRorIntApi(val, 31), TEST_ROR_INT_API_31_EXPECTED[i]);\n-                    verify(\"testRorIntApi(\" + val + \", 32)\", testRorIntApi(val, 32), TEST_ROR_INT_API_32_EXPECTED[i]);\n-                    verify(\"testRolIntApi(\" + val + \", 1)\", testRolIntApi(val, 1), TEST_ROL_INT_API_1_EXPECTED[i]);\n-                    verify(\"testRolIntApi(\" + val + \", 16)\", testRolIntApi(val, 16), TEST_ROL_INT_API_16_EXPECTED[i]);\n-                    verify(\"testRolIntApi(\" + val + \", 31)\", testRolIntApi(val, 31), TEST_ROL_INT_API_31_EXPECTED[i]);\n-                    verify(\"testRolIntApi(\" + val + \", 32)\", testRolIntApi(val, 32), TEST_ROL_INT_API_32_EXPECTED[i]);\n-\n-                    testRolIntZero(val);\n-                    testRorIntZero(val);\n-                }\n-\n-                for (int i = 0; i < LONG_VALUES.length; i++) {\n-                    long val = LONG_VALUES[i];\n-                    verify(\"testRorOrLong1(\" + val + \")\", testRorOrLong1(val), TEST_ROR_OR_LONG_1_EXPECTED[i]);\n-                    verify(\"testRorOrLong16(\" + val + \")\", testRorOrLong16(val), TEST_ROR_OR_LONG_16_EXPECTED[i]);\n-                    verify(\"testRorOrLong63(\" + val + \")\", testRorOrLong63(val), TEST_ROR_OR_LONG_63_EXPECTED[i]);\n-                    verify(\"testRorOrLong64(\" + val + \")\", testRorOrLong64(val), TEST_ROR_OR_LONG_64_EXPECTED[i]);\n-\n-                    verify(\"testRorAddLong1(\" + val + \")\", testRorAddLong1(val), TEST_ROR_ADD_LONG_1_EXPECTED[i]);\n-                    verify(\"testRorAddLong16(\" + val + \")\", testRorAddLong16(val), TEST_ROR_ADD_LONG_16_EXPECTED[i]);\n-                    verify(\"testRorAddLong63(\" + val + \")\", testRorAddLong63(val), TEST_ROR_ADD_LONG_63_EXPECTED[i]);\n-                    verify(\"testRorAddLong64(\" + val + \")\", testRorAddLong64(val), TEST_ROR_ADD_LONG_64_EXPECTED[i]);\n-\n-                    verify(\"testRorOrLong1Eor(\" + val + \")\", testRorOrLong1Eor(val), TEST_EOR_ROR_SHIFT_1_LONG_EXPECTED[i]);\n-                    verify(\"testRorOrLong16Eor(\" + val + \")\", testRorOrLong16Eor(val), TEST_EOR_ROR_SHIFT_16_LONG_EXPECTED[i]);\n-                    verify(\"testRorOrLong63Eor(\" + val + \")\", testRorOrLong63Eor(val), TEST_EOR_ROR_SHIFT_63_LONG_EXPECTED[i]);\n-                    verify(\"testRorOrLong64Eor(\" + val + \")\", testRorOrLong64Eor(val), TEST_EOR_ROR_SHIFT_64_LONG_EXPECTED[i]);\n-\n-                    verify(\"testRorOrLong1And(\" + val + \")\", testRorOrLong1And(val), TEST_AND_ROR_SHIFT_1_LONG_EXPECTED[i]);\n-                    verify(\"testRorOrLong16And(\" + val + \")\", testRorOrLong16And(val), TEST_AND_ROR_SHIFT_16_LONG_EXPECTED[i]);\n-                    verify(\"testRorOrLong63And(\" + val + \")\", testRorOrLong63And(val), TEST_AND_ROR_SHIFT_63_LONG_EXPECTED[i]);\n-                    verify(\"testRorOrLong64And(\" + val + \")\", testRorOrLong64And(val), TEST_AND_ROR_SHIFT_64_LONG_EXPECTED[i]);\n-\n-                    verify(\"testRorOrLong1Or(\" + val + \")\", testRorOrLong1Or(val), TEST_OR_ROR_SHIFT_1_LONG_EXPECTED[i]);\n-                    verify(\"testRorOrLong16Or(\" + val + \")\", testRorOrLong16Or(val), TEST_OR_ROR_SHIFT_16_LONG_EXPECTED[i]);\n-                    verify(\"testRorOrLong63Or(\" + val + \")\", testRorOrLong63Or(val), TEST_OR_ROR_SHIFT_63_LONG_EXPECTED[i]);\n-                    verify(\"testRorOrLong64Or(\" + val + \")\", testRorOrLong64Or(val), TEST_OR_ROR_SHIFT_64_LONG_EXPECTED[i]);\n-\n-                    verify(\"testRorOrLong1Eon(\" + val + \")\", testRorOrLong1Eon(val), TEST_EON_ROR_SHIFT_1_LONG_EXPECTED[i]);\n-                    verify(\"testRorOrLong16Eon(\" + val + \")\", testRorOrLong16Eon(val), TEST_EON_ROR_SHIFT_16_LONG_EXPECTED[i]);\n-                    verify(\"testRorOrLong63Eon(\" + val + \")\", testRorOrLong63Eon(val), TEST_EON_ROR_SHIFT_63_LONG_EXPECTED[i]);\n-                    verify(\"testRorOrLong64Eon(\" + val + \")\", testRorOrLong64Eon(val), TEST_EON_ROR_SHIFT_64_LONG_EXPECTED[i]);\n-\n-                    verify(\"testRorOrLong1Bic(\" + val + \")\", testRorOrLong1Bic(val), TEST_BIC_ROR_SHIFT_1_LONG_EXPECTED[i]);\n-                    verify(\"testRorOrLong16Bic(\" + val + \")\", testRorOrLong16Bic(val), TEST_BIC_ROR_SHIFT_16_LONG_EXPECTED[i]);\n-                    verify(\"testRorOrLong63Bic(\" + val + \")\", testRorOrLong63Bic(val), TEST_BIC_ROR_SHIFT_63_LONG_EXPECTED[i]);\n-                    verify(\"testRorOrLong64Bic(\" + val + \")\", testRorOrLong64Bic(val), TEST_BIC_ROR_SHIFT_64_LONG_EXPECTED[i]);\n-\n-                    verify(\"testRorOrLong1Orn(\" + val + \")\", testRorOrLong1Orn(val), TEST_ORN_ROR_SHIFT_1_LONG_EXPECTED[i]);\n-                    verify(\"testRorOrLong16Orn(\" + val + \")\", testRorOrLong16Orn(val), TEST_ORN_ROR_SHIFT_16_LONG_EXPECTED[i]);\n-                    verify(\"testRorOrLong63Orn(\" + val + \")\", testRorOrLong63Orn(val), TEST_ORN_ROR_SHIFT_63_LONG_EXPECTED[i]);\n-                    verify(\"testRorOrLong64Orn(\" + val + \")\", testRorOrLong64Orn(val), TEST_ORN_ROR_SHIFT_64_LONG_EXPECTED[i]);\n-\n-                    verify(\"testRorLongApi(\" + val + \", 1)\", testRorLongApi(val, 1), TEST_ROR_LONG_API_1_EXPECTED[i]);\n-                    verify(\"testRorLongApi(\" + val + \", 16)\", testRorLongApi(val, 16), TEST_ROR_LONG_API_16_EXPECTED[i]);\n-                    verify(\"testRorLongApi(\" + val + \", 63)\", testRorLongApi(val, 63), TEST_ROR_LONG_API_63_EXPECTED[i]);\n-                    verify(\"testRorLongApi(\" + val + \", 64)\", testRorLongApi(val, 64), TEST_ROR_LONG_API_64_EXPECTED[i]);\n-                    verify(\"testRolLongApi(\" + val + \", 1)\", testRolLongApi(val, 1), TEST_ROL_LONG_API_1_EXPECTED[i]);\n-                    verify(\"testRolLongApi(\" + val + \", 16)\", testRolLongApi(val, 16), TEST_ROL_LONG_API_16_EXPECTED[i]);\n-                    verify(\"testRolLongApi(\" + val + \", 63)\", testRolLongApi(val, 63), TEST_ROL_LONG_API_63_EXPECTED[i]);\n-                    verify(\"testRolLongApi(\" + val + \", 64)\", testRolLongApi(val, 64), TEST_ROL_LONG_API_64_EXPECTED[i]);\n-\n-                    testRolLongZero(i);\n-                    testRorLongZero(i);\n-                }\n+    public static void testRorOrInts() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < INT_VALUES.length; i++) {\n+                int val = INT_VALUES[i];\n+                verify(\"testRorOrInt1(\" + val + \")\",  testRorOrInt1(val),  TEST_ROR_OR_INT_1_EXPECTED[i]);\n+                verify(\"testRorOrInt16(\" + val + \")\", testRorOrInt16(val), TEST_ROR_OR_INT_16_EXPECTED[i]);\n+                verify(\"testRorOrInt31(\" + val + \")\", testRorOrInt31(val), TEST_ROR_OR_INT_31_EXPECTED[i]);\n+                verify(\"testRorOrInt32(\" + val + \")\", testRorOrInt32(val), TEST_ROR_OR_INT_32_EXPECTED[i]);\n+            }\n+        }\n+    }\n+\n+    public static void testRorAddInts() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < INT_VALUES.length; i++) {\n+                int val = INT_VALUES[i];\n+                verify(\"testRorAddInt1(\" + val + \")\",  testRorAddInt1(val),  TEST_ROR_ADD_INT_1_EXPECTED[i]);\n+                verify(\"testRorAddInt16(\" + val + \")\", testRorAddInt16(val), TEST_ROR_ADD_INT_16_EXPECTED[i]);\n+                verify(\"testRorAddInt31(\" + val + \")\", testRorAddInt31(val), TEST_ROR_ADD_INT_31_EXPECTED[i]);\n+                verify(\"testRorAddInt32(\" + val + \")\", testRorAddInt32(val), TEST_ROR_ADD_INT_32_EXPECTED[i]);\n+            }\n+        }\n+    }\n+\n+    public static void testRorOrIntEors() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < INT_VALUES.length; i++) {\n+                int val = INT_VALUES[i];\n+                verify(\"testRorOrInt1Eor(\" + val + \")\",  testRorOrInt1Eor(val),  TEST_EOR_ROR_SHIFT_1_INT_EXPECTED[i]);\n+                verify(\"testRorOrInt16Eor(\" + val + \")\", testRorOrInt16Eor(val), TEST_EOR_ROR_SHIFT_16_INT_EXPECTED[i]);\n+                verify(\"testRorOrInt31Eor(\" + val + \")\", testRorOrInt31Eor(val), TEST_EOR_ROR_SHIFT_31_INT_EXPECTED[i]);\n+                verify(\"testRorOrInt32Eor(\" + val + \")\", testRorOrInt32Eor(val), TEST_EOR_ROR_SHIFT_32_INT_EXPECTED[i]);\n+            }\n+        }\n+    }\n+\n+    public static void testRorOrIntAnds() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < INT_VALUES.length; i++) {\n+                int val = INT_VALUES[i];\n+                verify(\"testRorOrInt1And(\" + val + \")\",  testRorOrInt1And(val),  TEST_AND_ROR_SHIFT_1_INT_EXPECTED[i]);\n+                verify(\"testRorOrInt16And(\" + val + \")\", testRorOrInt16And(val), TEST_AND_ROR_SHIFT_16_INT_EXPECTED[i]);\n+                verify(\"testRorOrInt31And(\" + val + \")\", testRorOrInt31And(val), TEST_AND_ROR_SHIFT_31_INT_EXPECTED[i]);\n+                verify(\"testRorOrInt32And(\" + val + \")\", testRorOrInt32And(val), TEST_AND_ROR_SHIFT_32_INT_EXPECTED[i]);\n+            }\n+        }\n+    }\n+\n+    public static void testRorOrIntOrs() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < INT_VALUES.length; i++) {\n+                int val = INT_VALUES[i];\n+                verify(\"testRorOrInt1Or(\" + val + \")\",  testRorOrInt1Or(val),  TEST_OR_ROR_SHIFT_1_INT_EXPECTED[i]);\n+                verify(\"testRorOrInt16Or(\" + val + \")\", testRorOrInt16Or(val), TEST_OR_ROR_SHIFT_16_INT_EXPECTED[i]);\n+                verify(\"testRorOrInt31Or(\" + val + \")\", testRorOrInt31Or(val), TEST_OR_ROR_SHIFT_31_INT_EXPECTED[i]);\n+                verify(\"testRorOrInt32Or(\" + val + \")\", testRorOrInt32Or(val), TEST_OR_ROR_SHIFT_32_INT_EXPECTED[i]);\n+            }\n+        }\n+    }\n+\n+    public static void testRorOrIntEons() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < INT_VALUES.length; i++) {\n+                int val = INT_VALUES[i];\n+                verify(\"testRorOrInt1Eon(\" + val + \")\",  testRorOrInt1Eon(val),  TEST_EON_ROR_SHIFT_1_INT_EXPECTED[i]);\n+                verify(\"testRorOrInt16Eon(\" + val + \")\", testRorOrInt16Eon(val), TEST_EON_ROR_SHIFT_16_INT_EXPECTED[i]);\n+                verify(\"testRorOrInt31Eon(\" + val + \")\", testRorOrInt31Eon(val), TEST_EON_ROR_SHIFT_31_INT_EXPECTED[i]);\n+                verify(\"testRorOrInt32Eon(\" + val + \")\", testRorOrInt32Eon(val), TEST_EON_ROR_SHIFT_32_INT_EXPECTED[i]);\n+            }\n+        }\n+    }\n+\n+    public static void testRorOrIntBics() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < INT_VALUES.length; i++) {\n+                int val = INT_VALUES[i];\n+                verify(\"testRorOrInt1Bic(\" + val + \")\",  testRorOrInt1Bic(val),  TEST_BIC_ROR_SHIFT_1_INT_EXPECTED[i]);\n+                verify(\"testRorOrInt16Bic(\" + val + \")\", testRorOrInt16Bic(val), TEST_BIC_ROR_SHIFT_16_INT_EXPECTED[i]);\n+                verify(\"testRorOrInt31Bic(\" + val + \")\", testRorOrInt31Bic(val), TEST_BIC_ROR_SHIFT_31_INT_EXPECTED[i]);\n+                verify(\"testRorOrInt32Bic(\" + val + \")\", testRorOrInt32Bic(val), TEST_BIC_ROR_SHIFT_32_INT_EXPECTED[i]);\n+            }\n+        }\n+    }\n+\n+    public static void testRorOrIntOrns() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < INT_VALUES.length; i++) {\n+                int val = INT_VALUES[i];\n+                verify(\"testRorOrInt1Orn(\" + val + \")\",  testRorOrInt1Orn(val),  TEST_ORN_ROR_SHIFT_1_INT_EXPECTED[i]);\n+                verify(\"testRorOrInt16Orn(\" + val + \")\", testRorOrInt16Orn(val), TEST_ORN_ROR_SHIFT_16_INT_EXPECTED[i]);\n+                verify(\"testRorOrInt31Orn(\" + val + \")\", testRorOrInt31Orn(val), TEST_ORN_ROR_SHIFT_31_INT_EXPECTED[i]);\n+                verify(\"testRorOrInt32Orn(\" + val + \")\", testRorOrInt32Orn(val), TEST_ORN_ROR_SHIFT_32_INT_EXPECTED[i]);\n+            }\n+        }\n+    }\n+\n+    public static void testRorIntApis() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < INT_VALUES.length; i++) {\n+                int val = INT_VALUES[i];\n+                verify(\"testRorIntApi(\" + val + \", 1)\",  testRorIntApi(val, 1),  TEST_ROR_INT_API_1_EXPECTED[i]);\n+                verify(\"testRorIntApi(\" + val + \", 16)\", testRorIntApi(val, 16), TEST_ROR_INT_API_16_EXPECTED[i]);\n+                verify(\"testRorIntApi(\" + val + \", 31)\", testRorIntApi(val, 31), TEST_ROR_INT_API_31_EXPECTED[i]);\n+                verify(\"testRorIntApi(\" + val + \", 32)\", testRorIntApi(val, 32), TEST_ROR_INT_API_32_EXPECTED[i]);\n+            }\n+        }\n+    }\n+\n+    public static void testRolIntApis() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < INT_VALUES.length; i++) {\n+                int val = INT_VALUES[i];\n+                verify(\"testRolIntApi(\" + val + \", 1)\",  testRolIntApi(val, 1),  TEST_ROL_INT_API_1_EXPECTED[i]);\n+                verify(\"testRolIntApi(\" + val + \", 16)\", testRolIntApi(val, 16), TEST_ROL_INT_API_16_EXPECTED[i]);\n+                verify(\"testRolIntApi(\" + val + \", 31)\", testRolIntApi(val, 31), TEST_ROL_INT_API_31_EXPECTED[i]);\n+                verify(\"testRolIntApi(\" + val + \", 32)\", testRolIntApi(val, 32), TEST_ROL_INT_API_32_EXPECTED[i]);\n+            }\n+        }\n+    }\n+\n+    public static void testRolrIntZeros() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < INT_VALUES.length; i++) {\n+                int val = INT_VALUES[i];\n+                testRolIntZero(val);\n+                testRorIntZero(val);\n+            }\n+        }\n+    }\n+\n+    public static void testRorOrLongs() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < LONG_VALUES.length; i++) {\n+                long val = LONG_VALUES[i];\n+                verify(\"testRorOrLong1(\" + val + \")\",  testRorOrLong1(val),  TEST_ROR_OR_LONG_1_EXPECTED[i]);\n+                verify(\"testRorOrLong16(\" + val + \")\", testRorOrLong16(val), TEST_ROR_OR_LONG_16_EXPECTED[i]);\n+                verify(\"testRorOrLong63(\" + val + \")\", testRorOrLong63(val), TEST_ROR_OR_LONG_63_EXPECTED[i]);\n+                verify(\"testRorOrLong64(\" + val + \")\", testRorOrLong64(val), TEST_ROR_OR_LONG_64_EXPECTED[i]);\n@@ -671,3 +698,0 @@\n-            System.out.println(\"test status : PASS\");\n-        } catch (Exception e) {\n-            System.out.println(e.getMessage());\n@@ -676,0 +700,145 @@\n+\n+    public static void testRorAddLongs() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < LONG_VALUES.length; i++) {\n+                long val = LONG_VALUES[i];\n+                verify(\"testRorAddLong1(\" + val + \")\",  testRorAddLong1(val),  TEST_ROR_ADD_LONG_1_EXPECTED[i]);\n+                verify(\"testRorAddLong16(\" + val + \")\", testRorAddLong16(val), TEST_ROR_ADD_LONG_16_EXPECTED[i]);\n+                verify(\"testRorAddLong63(\" + val + \")\", testRorAddLong63(val), TEST_ROR_ADD_LONG_63_EXPECTED[i]);\n+                verify(\"testRorAddLong64(\" + val + \")\", testRorAddLong64(val), TEST_ROR_ADD_LONG_64_EXPECTED[i]);\n+            }\n+        }\n+    }\n+\n+    public static void testRorOrLongEors() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < LONG_VALUES.length; i++) {\n+                long val = LONG_VALUES[i];\n+                verify(\"testRorOrLong1Eor(\" + val + \")\",  testRorOrLong1Eor(val),  TEST_EOR_ROR_SHIFT_1_LONG_EXPECTED[i]);\n+                verify(\"testRorOrLong16Eor(\" + val + \")\", testRorOrLong16Eor(val), TEST_EOR_ROR_SHIFT_16_LONG_EXPECTED[i]);\n+                verify(\"testRorOrLong63Eor(\" + val + \")\", testRorOrLong63Eor(val), TEST_EOR_ROR_SHIFT_63_LONG_EXPECTED[i]);\n+                verify(\"testRorOrLong64Eor(\" + val + \")\", testRorOrLong64Eor(val), TEST_EOR_ROR_SHIFT_64_LONG_EXPECTED[i]);\n+            }\n+        }\n+    }\n+\n+    public static void testRorOrLongAnds() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < LONG_VALUES.length; i++) {\n+                long val = LONG_VALUES[i];\n+                verify(\"testRorOrLong1And(\" + val + \")\",  testRorOrLong1And(val),  TEST_AND_ROR_SHIFT_1_LONG_EXPECTED[i]);\n+                verify(\"testRorOrLong16And(\" + val + \")\", testRorOrLong16And(val), TEST_AND_ROR_SHIFT_16_LONG_EXPECTED[i]);\n+                verify(\"testRorOrLong63And(\" + val + \")\", testRorOrLong63And(val), TEST_AND_ROR_SHIFT_63_LONG_EXPECTED[i]);\n+                verify(\"testRorOrLong64And(\" + val + \")\", testRorOrLong64And(val), TEST_AND_ROR_SHIFT_64_LONG_EXPECTED[i]);\n+            }\n+        }\n+    }\n+\n+    public static void testRorOrLongOrs() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < LONG_VALUES.length; i++) {\n+                long val = LONG_VALUES[i];\n+                verify(\"testRorOrLong1Or(\" + val + \")\",  testRorOrLong1Or(val),  TEST_OR_ROR_SHIFT_1_LONG_EXPECTED[i]);\n+                verify(\"testRorOrLong16Or(\" + val + \")\", testRorOrLong16Or(val), TEST_OR_ROR_SHIFT_16_LONG_EXPECTED[i]);\n+                verify(\"testRorOrLong63Or(\" + val + \")\", testRorOrLong63Or(val), TEST_OR_ROR_SHIFT_63_LONG_EXPECTED[i]);\n+                verify(\"testRorOrLong64Or(\" + val + \")\", testRorOrLong64Or(val), TEST_OR_ROR_SHIFT_64_LONG_EXPECTED[i]);\n+            }\n+        }\n+    }\n+\n+    public static void testRorOrLongEons() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < LONG_VALUES.length; i++) {\n+                long val = LONG_VALUES[i];\n+                verify(\"testRorOrLong1Eon(\" + val + \")\",  testRorOrLong1Eon(val),  TEST_EON_ROR_SHIFT_1_LONG_EXPECTED[i]);\n+                verify(\"testRorOrLong16Eon(\" + val + \")\", testRorOrLong16Eon(val), TEST_EON_ROR_SHIFT_16_LONG_EXPECTED[i]);\n+                verify(\"testRorOrLong63Eon(\" + val + \")\", testRorOrLong63Eon(val), TEST_EON_ROR_SHIFT_63_LONG_EXPECTED[i]);\n+                verify(\"testRorOrLong64Eon(\" + val + \")\", testRorOrLong64Eon(val), TEST_EON_ROR_SHIFT_64_LONG_EXPECTED[i]);\n+            }\n+        }\n+    }\n+\n+    public static void testRorOrLongBics() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < LONG_VALUES.length; i++) {\n+                long val = LONG_VALUES[i];\n+                verify(\"testRorOrLong1Bic(\" + val + \")\",  testRorOrLong1Bic(val),  TEST_BIC_ROR_SHIFT_1_LONG_EXPECTED[i]);\n+                verify(\"testRorOrLong16Bic(\" + val + \")\", testRorOrLong16Bic(val), TEST_BIC_ROR_SHIFT_16_LONG_EXPECTED[i]);\n+                verify(\"testRorOrLong63Bic(\" + val + \")\", testRorOrLong63Bic(val), TEST_BIC_ROR_SHIFT_63_LONG_EXPECTED[i]);\n+                verify(\"testRorOrLong64Bic(\" + val + \")\", testRorOrLong64Bic(val), TEST_BIC_ROR_SHIFT_64_LONG_EXPECTED[i]);\n+            }\n+        }\n+    }\n+\n+    public static void testRorOrLongOrns() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < LONG_VALUES.length; i++) {\n+                long val = LONG_VALUES[i];\n+                verify(\"testRorOrLong1Orn(\" + val + \")\",  testRorOrLong1Orn(val),  TEST_ORN_ROR_SHIFT_1_LONG_EXPECTED[i]);\n+                verify(\"testRorOrLong16Orn(\" + val + \")\", testRorOrLong16Orn(val), TEST_ORN_ROR_SHIFT_16_LONG_EXPECTED[i]);\n+                verify(\"testRorOrLong63Orn(\" + val + \")\", testRorOrLong63Orn(val), TEST_ORN_ROR_SHIFT_63_LONG_EXPECTED[i]);\n+                verify(\"testRorOrLong64Orn(\" + val + \")\", testRorOrLong64Orn(val), TEST_ORN_ROR_SHIFT_64_LONG_EXPECTED[i]);\n+            }\n+        }\n+    }\n+\n+    public static void testRorLongApis() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < LONG_VALUES.length; i++) {\n+                long val = LONG_VALUES[i];\n+                verify(\"testRorLongApi(\" + val + \", 1)\",  testRorLongApi(val, 1),  TEST_ROR_LONG_API_1_EXPECTED[i]);\n+                verify(\"testRorLongApi(\" + val + \", 16)\", testRorLongApi(val, 16), TEST_ROR_LONG_API_16_EXPECTED[i]);\n+                verify(\"testRorLongApi(\" + val + \", 63)\", testRorLongApi(val, 63), TEST_ROR_LONG_API_63_EXPECTED[i]);\n+                verify(\"testRorLongApi(\" + val + \", 64)\", testRorLongApi(val, 64), TEST_ROR_LONG_API_64_EXPECTED[i]);\n+            }\n+        }\n+    }\n+\n+    public static void testRolLongApis() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < LONG_VALUES.length; i++) {\n+                long val = LONG_VALUES[i];\n+                verify(\"testRolLongApi(\" + val + \", 1)\",  testRolLongApi(val, 1),  TEST_ROL_LONG_API_1_EXPECTED[i]);\n+                verify(\"testRolLongApi(\" + val + \", 16)\", testRolLongApi(val, 16), TEST_ROL_LONG_API_16_EXPECTED[i]);\n+                verify(\"testRolLongApi(\" + val + \", 63)\", testRolLongApi(val, 63), TEST_ROL_LONG_API_63_EXPECTED[i]);\n+                verify(\"testRolLongApi(\" + val + \", 64)\", testRolLongApi(val, 64), TEST_ROL_LONG_API_64_EXPECTED[i]);\n+            }\n+        }\n+    }\n+\n+    public static void testRolrLongZeros() {\n+        for (int count = 0; count < ITERS; count++) {\n+            for (int i = 0; i < LONG_VALUES.length; i++) {\n+                long val = LONG_VALUES[i];\n+                testRolLongZero(i);\n+                testRorLongZero(i);\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        testRorOrInts();\n+        testRorAddInts();\n+        testRorOrIntEors();\n+        testRorOrIntAnds();\n+        testRorOrIntOrs();\n+        testRorOrIntEons();\n+        testRorOrIntBics();\n+        testRorOrIntOrns();\n+        testRorIntApis();\n+        testRolIntApis();\n+        testRolrIntZeros();\n+\n+        testRorOrLongs();\n+        testRorAddLongs();\n+        testRorOrLongEors();\n+        testRorOrLongAnds();\n+        testRorOrLongOrs();\n+        testRorOrLongEons();\n+        testRorOrLongBics();\n+        testRorOrLongOrns();\n+        testRorLongApis();\n+        testRolLongApis();\n+        testRolrLongZeros();\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestRotate.java","additions":285,"deletions":116,"binary":false,"changes":401,"status":"modified"}]}