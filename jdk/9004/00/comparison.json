{"files":[{"patch":"@@ -1373,6 +1373,4 @@\n-  if (is_static()) {\n-    \/\/ just checking the last region is sufficient since the archive is written\n-    \/\/ in sequential order\n-    size_t len = os::lseek(fd, 0, SEEK_END);\n-    FileMapRegion* si = space_at(MetaspaceShared::last_valid_region);\n-    \/\/ The last space might be empty\n+  size_t len = os::lseek(fd, 0, SEEK_END);\n+\n+  for (int i = 0; i <= MetaspaceShared::last_valid_region; i++) {\n+    FileMapRegion* si = space_at(i);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-    public static void testAndCheck(String[] execArgs) throws Exception {\n+    public static void testAndCheck(String[] execArgs, String... expectedMessages) throws Exception {\n@@ -91,0 +91,3 @@\n+        for (int i = 0; i < expectedMessages.length; i++) {\n+            output.shouldContain(expectedMessages[i]);\n+        }\n@@ -239,1 +242,1 @@\n-        System.out.println(\"\\n6. Delete bytes at beginning of data section, should fail\\n\");\n+        System.out.println(\"\\n6a. Delete bytes at beginning of data section, should fail\\n\");\n@@ -244,0 +247,6 @@\n+        \/\/ delete bytes at the end\n+        System.out.println(\"\\n6b. Delete bytes at the end, should fail\\n\");\n+        deleteBytes = startNewArchive(\"delete-bytes-end\");\n+        CDSArchiveUtils.deleteBytesAtTheEnd(orgJsaFile, deleteBytes);\n+        testAndCheck(verifyExecArgs, \"The shared archive file has been truncated.\");\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SharedArchiveConsistency.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -464,0 +464,29 @@\n+    \/\/ returns the size of the last region with used bytes > 0.\n+    private static long getLastUsedRegionSize(File jsaFile) throws Exception {\n+        int i = num_regions - 1;\n+        long regionSize = 0;\n+        while (i >= 0) {\n+            regionSize = usedRegionSizeAligned(jsaFile, i);\n+            if (regionSize > 0) {\n+                break;\n+            }\n+            i--;\n+        }\n+        return regionSize;\n+    }\n+\n+    \/\/ delete last regions's used bytes at the end, so new file will be smaller than the original\n+    public static File deleteBytesAtTheEnd(File orgFile, String newFileName) throws Exception {\n+        long offset = fileHeaderSize(orgFile);\n+        long bytesToDelete = getLastUsedRegionSize(orgFile);\n+        File dstFile = new File(newFileName);\n+        try (FileChannel inputChannel = new FileInputStream(orgFile).getChannel();\n+             FileChannel outputChannel = new FileOutputStream(dstFile).getChannel()) {\n+            long orgSize = inputChannel.size();\n+            transferFrom(inputChannel, outputChannel, 0, offset);\n+            inputChannel.position(offset);\n+            transferFrom(inputChannel, outputChannel, offset, orgSize - bytesToDelete);\n+        }\n+        return dstFile;\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSArchiveUtils.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"}]}