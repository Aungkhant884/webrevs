{"files":[{"patch":"@@ -92,1 +92,1 @@\n-    \/\/ Class c = OpenResources.fetchClass();\n+    \/\/ the open and closed classes\n@@ -95,9 +95,2 @@\n-    jmethodID mid_OpenResources_fetchClass = (*env)->GetStaticMethodID(env, class_OpenResources, \"fetchClass\", \"()Ljava\/lang\/Class;\" );\n-    assert(mid_OpenResources_fetchClass != NULL);\n-    jobject c =(*env)->CallStaticObjectMethod(env, class_OpenResources, mid_OpenResources_fetchClass);\n-    if ((*env)->ExceptionOccurred(env) != NULL) {\n-        printf(\"ERROR: Exception was thrown calling OpenResources::fetchClass.\\n\");\n-        (*env)->ExceptionDescribe(env);\n-        exit(-1);\n-    }\n-    assert(c != NULL);\n+    jclass class_ClosedResources = (*env)->FindClass(env, \"closed\/ClosedResources\");\n+    assert(class_ClosedResources != NULL);\n@@ -105,1 +98,1 @@\n-    \/\/ Module n = c.getModule();\n+    \/\/ Fetch the Module from one of the classes in the module\n@@ -110,1 +103,1 @@\n-    jobject n =(*env)->CallObjectMethod(env, c, mid_Class_getModule);\n+    jobject n =(*env)->CallObjectMethod(env, class_OpenResources, mid_Class_getModule);\n@@ -118,0 +111,1 @@\n+    \/\/ Attempt to fetch an open resource from the module.  It should return a valid stream.\n@@ -131,1 +125,4 @@\n-    assert(in != NULL);\n+    if (in == NULL) {\n+        printf(\"ERROR: Module::getResourceAsStream, expected valid stream for open resource\\n\");\n+        exit(-1);\n+    }\n@@ -136,0 +133,1 @@\n+    \/\/ Attempt to fetch closed resource from the module.  It should return null.\n@@ -144,1 +142,4 @@\n-    assert(in == NULL);\n+    if (in != NULL) {\n+        printf(\"ERROR: Module::getResourceAsStream, expected null value for closed resource\\n\");\n+        exit(-1);\n+    }\n@@ -146,1 +147,2 @@\n-    \/\/ in = c.getResourceAsStream(\"test.txt\");\n+    \/\/ Attempt to fetch open resource from the class.  It should return a valid stream.\n+    \/\/ in = open.OpenReosurces.class.getResourceAsStream(\"test.txt\");\n@@ -150,1 +152,1 @@\n-    in =  (*env)->CallObjectMethod(env, c, mid_Class_getResourceAsStream,\n+    in =  (*env)->CallObjectMethod(env, class_OpenResources, mid_Class_getResourceAsStream,\n@@ -157,1 +159,4 @@\n-    assert(in != NULL);\n+    if (in == NULL) {\n+        printf(\"ERROR: Class::getResourceAsStream, expected valid stream for open resource\\n\");\n+        exit(-1);\n+    }\n@@ -162,15 +167,3 @@\n-    \/\/ Class closed = closed.ClosedResources.fetchClass();\n-    jclass class_ClosedResources = (*env)->FindClass(env, \"closed\/ClosedResources\");\n-    assert(class_ClosedResources != NULL);\n-    jmethodID mid_ClosedResources_fetchClass = (*env)->GetStaticMethodID(env, class_ClosedResources, \"fetchClass\", \"()Ljava\/lang\/Class;\" );\n-    assert(mid_ClosedResources_fetchClass != NULL);\n-    jobject closed =(*env)->CallStaticObjectMethod(env, class_ClosedResources, mid_ClosedResources_fetchClass);\n-    if ((*env)->ExceptionOccurred(env) != NULL) {\n-        printf(\"ERROR: Exception was thrown calling ClosedResources::fetchClass.\\n\");\n-        (*env)->ExceptionDescribe(env);\n-        exit(-1);\n-    }\n-    assert(closed != NULL);\n-\n-    \/\/ in = closed.getResourceAsStream(\"test.txt\");\n-    in =  (*env)->CallObjectMethod(env, closed, mid_Class_getResourceAsStream,\n+    \/\/ Attempt to fetch closed resource from the class.  It should return null.\n+    \/\/ in = closed.ClosedResources.class.getResourceAsStream(\"test.txt\");\n+    in =  (*env)->CallObjectMethod(env, class_ClosedResources, mid_Class_getResourceAsStream,\n@@ -183,1 +176,4 @@\n-    assert(in == NULL);\n+    if (in != NULL) {\n+        printf(\"ERROR: Class::getResourceAsStream, expected null value for closed resource\\n\");\n+        exit(-1);\n+    }\n","filename":"test\/jdk\/java\/lang\/module\/exeNullCallerGetResource\/exeNullCallerGetResource.c","additions":29,"deletions":33,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+\/\/ class to test relative access to a closed resource\n+\/\/ with Class::getResourceAsStream with no caller frame\n@@ -27,4 +29,0 @@\n-\n-    public static Class fetchClass() {\n-        return ClosedResources.class;\n-    }\n","filename":"test\/jdk\/java\/lang\/module\/exeNullCallerGetResource\/src\/n\/closed\/ClosedResources.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,0 +24,2 @@\n+\/\/ module to test access to both open and closed resources using\n+\/\/ Module::getResourceAsStream with no caller frame\n","filename":"test\/jdk\/java\/lang\/module\/exeNullCallerGetResource\/src\/n\/module-info.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+\/\/ class used to test relative access to an open resource\n+\/\/ with Class::getResourceAsStream with no caller frame\n@@ -27,4 +29,0 @@\n-\n-    public static Class fetchClass() {\n-        return OpenResources.class;\n-    }\n","filename":"test\/jdk\/java\/lang\/module\/exeNullCallerGetResource\/src\/n\/open\/OpenResources.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}