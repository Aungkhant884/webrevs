{"files":[{"patch":"@@ -68,0 +68,1 @@\n+  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeNullCallerGetResource := jvm.lib\n@@ -89,0 +90,1 @@\n+  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeNullCallerGetResource := -ljvm\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3005,3 +3005,3 @@\n-                if (callerModule == null && !thisModule.isOpen(pn)) {\n-                    \/\/ no caller, package not open\n-                    return false;\n+                if (callerModule == null) {\n+                    \/\/ no caller, return true if the package is open to all modules\n+                    return thisModule.isOpen(pn);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1657,5 +1657,5 @@\n-                    if (caller == null && !isOpen(pn)) {\n-                        \/\/ no caller, package not open\n-                        return null;\n-                    }\n-                    if (!isOpen(pn, caller)) {\n+                    if (caller == null) {\n+                        if (!isOpen(pn)) {\n+                            return null;\n+                        }\n+                    } else if (!isOpen(pn, caller)) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Module.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8281006\n+ * @summary Test uses custom launcher that starts VM using JNI that verifies\n+ *          Module::getResourceAsStream and Class::getResourceAsStream with\n+ *          a null caller class functions properly.\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.module\n+ *          jdk.compiler\n+ * @build NullCallerGetResource\n+ *        jdk.test.lib.compiler.CompilerUtils\n+ * @requires os.family != \"aix\"\n+ * @run main\/native NullCallerGetResource\n+ *\/\n+\n+\/\/ Test disabled on AIX since we cannot invoke the JVM on the primordial thread.\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.compiler.CompilerUtils;\n+\n+public class NullCallerGetResource {\n+\n+    private static final String TEST_SRC = System.getProperty(\"test.src\");\n+\n+    \/\/ the module name of the test module\n+    private static final String TEST_MODULE = \"n\";\n+\n+    private static final Path SRC_DIR    = Paths.get(TEST_SRC, \"src\");\n+    private static final Path MODS_DIR   = Paths.get(\"mods\");\n+    private static final Path TEST_MOD_DIR = MODS_DIR.resolve(TEST_MODULE);\n+\n+    \/*\n+     * Build the test module called 'n' which opens the package 'open'\n+     * to everyone.  There is also a package 'closed' which is neither\n+     * opened or exported.\n+     *\/\n+    static void compileTestModule() throws Exception {\n+        \/\/ javac -d mods\/$TESTMODULE src\/$TESTMODULE\/**\n+        boolean compiled\n+                = CompilerUtils.compile(SRC_DIR.resolve(TEST_MODULE), TEST_MOD_DIR);\n+        assert (compiled);\n+        var open = TEST_MOD_DIR.resolve(\"open\/test.txt\");\n+        try (var out = Files.newBufferedWriter(open)) {\n+            out.write(\"open\");\n+            out.flush();\n+        }\n+        var closed = TEST_MOD_DIR.resolve(\"closed\/test.txt\");\n+        try (var out = Files.newBufferedWriter(closed)) {\n+            out.write(\"closed\");\n+            out.flush();\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ build the module used for the test\n+        compileTestModule();\n+\n+        var launcher = Path.of(System.getProperty(\"test.nativepath\"), \"NullCallerGetResource\");\n+        var pb = new ProcessBuilder(launcher.toString());\n+        var env = pb.environment();\n+\n+        var libDir = Platform.libDir().toString();\n+        var vmDir = Platform.jvmLibDir().toString();\n+\n+        \/\/ set up shared library path\n+        var sharedLibraryPathEnvName = Platform.sharedLibraryPathVariableName();\n+        env.compute(sharedLibraryPathEnvName,\n+                (k, v) -> (v == null) ? libDir : v + File.pathSeparator + libDir);\n+        env.compute(sharedLibraryPathEnvName,\n+                (k, v) -> (v == null) ? vmDir : v + File.pathSeparator + vmDir);\n+\n+        \/\/ launch the actual test\n+        System.out.println(\"Launching: \" + launcher + \" shared library path: \" +\n+                env.get(sharedLibraryPathEnvName));\n+        new OutputAnalyzer(pb.start())\n+                .outputTo(System.out)\n+                .errorTo(System.err)\n+                .shouldHaveExitValue(0);\n+\n+    }\n+\n+}\n+\n","filename":"test\/jdk\/java\/lang\/module\/exeNullCallerGetResource\/NullCallerGetResource.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"},{"patch":"@@ -0,0 +1,184 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"jni.h\"\n+#undef NDEBUG\n+#include \"assert.h\"\n+#include \"string.h\"\n+\n+static jclass class_InputStream = NULL;\n+static jmethodID mid_InputStream_close = NULL;\n+\n+\/\/ in.close();\n+void closeInputStream(JNIEnv *env, jobject in) {\n+    (*env)->CallObjectMethod(env, in, mid_InputStream_close);\n+    if ((*env)->ExceptionOccurred(env) != NULL) {\n+        printf(\"ERROR: Exception was thrown calling InputStream::close.\\n\");\n+        (*env)->ExceptionDescribe(env);\n+        exit(-1);\n+    }\n+}\n+\n+\/*\n+ * The java test running this native test creates a test module named 'n'\n+ * which opens the package 'open'.  It has a text file resource named\n+ * 'test.txt' in the open package.  It also has a class called\n+ * open.OpenResources.  One should be able to get the resource through\n+ * either the Class or the Module with getResourceAsStream.\n+ *\n+ * Class c = open.OpenResources.fetchClass();\n+ * InputStream in1 = c.getResourceAsStream(\"test.txt\");\n+ * Module n = c.getModule();\n+ * InputStream in2 = n.getResourceAsStream(\"open\/test.txt\");\n+ *\n+ * The test also checks that closed resources are not available and\n+ * don't throw any exceptions.  The test module contains a class\n+ * called closed.ClosedResources and a file 'test.txt' in the package\n+ * 'closed'.\n+ *\n+ * Class closed = closed.ClosedResources.fetchClass();\n+ * assert(closed.getResourceAsStream(\"test.txt\") == null);\n+ * assert(n.getResourceAsStream(\"closed\/test.txt\") == null);\n+ *\n+ *\/\n+int main(int argc, char** args) {\n+    JavaVM *jvm;\n+    JNIEnv *env;\n+    JavaVMInitArgs vm_args;\n+    JavaVMOption options[4];\n+    jint rc;\n+\n+    options[0].optionString = \"--module-path=mods\";\n+    options[1].optionString = \"--add-modules=n\";\n+\n+    vm_args.version = JNI_VERSION_9;\n+    vm_args.nOptions = 2;\n+    vm_args.options = options;\n+\n+    if ((rc = JNI_CreateJavaVM(&jvm, (void**)&env, &vm_args)) != JNI_OK) {\n+        printf(\"ERROR: cannot create VM.\\n\");\n+        exit(-1);\n+    }\n+\n+    \/\/ initialize for stream close\n+    class_InputStream = (*env)->FindClass(env, \"java\/io\/InputStream\");\n+    assert(class_InputStream != NULL);\n+    mid_InputStream_close = (*env)->GetMethodID(env, class_InputStream, \"close\", \"()V\" );\n+    assert(mid_InputStream_close != NULL);\n+\n+    \/\/ the open and closed classes\n+    jclass class_OpenResources = (*env)->FindClass(env, \"open\/OpenResources\");\n+    assert(class_OpenResources != NULL);\n+    jclass class_ClosedResources = (*env)->FindClass(env, \"closed\/ClosedResources\");\n+    assert(class_ClosedResources != NULL);\n+\n+    \/\/ Fetch the Module from one of the classes in the module\n+    jclass class_Class = (*env)->FindClass(env, \"java\/lang\/Class\");\n+    assert(class_Class != NULL);\n+    jmethodID mid_Class_getModule = (*env)->GetMethodID(env, class_Class, \"getModule\", \"()Ljava\/lang\/Module;\" );\n+    assert(mid_Class_getModule != NULL);\n+    jobject n =(*env)->CallObjectMethod(env, class_OpenResources, mid_Class_getModule);\n+    if ((*env)->ExceptionOccurred(env) != NULL) {\n+        printf(\"ERROR: Exception was thrown calling Class::getModule.\\n\");\n+        (*env)->ExceptionDescribe(env);\n+        exit(-1);\n+    }\n+    assert(n != NULL);\n+\n+    \/\/ Attempt to fetch an open resource from the module.  It should return a valid stream.\n+    \/\/ InputStream in = n.getResourceAsStream(\"open\/test.txt\");\n+    jclass class_Module = (*env)->FindClass(env, \"java\/lang\/Module\");\n+    assert(class_Module != NULL);\n+    jmethodID mid_Module_getResourceAsStream =\n+        (*env)->GetMethodID(env, class_Module, \"getResourceAsStream\", \"(Ljava\/lang\/String;)Ljava\/io\/InputStream;\" );\n+    assert(mid_Module_getResourceAsStream != NULL);\n+    jobject in = (*env)->CallObjectMethod(env, n, mid_Module_getResourceAsStream,\n+        (*env)->NewStringUTF(env, \"open\/test.txt\"));\n+    if ((*env)->ExceptionOccurred(env) != NULL) {\n+        printf(\"ERROR: Exception was thrown calling Module::getResourceAsStream on 'open\/test.txt'.\\n\");\n+        (*env)->ExceptionDescribe(env);\n+        exit(-1);\n+    }\n+    if (in == NULL) {\n+        printf(\"ERROR: Module::getResourceAsStream, expected valid stream for open resource\\n\");\n+        exit(-1);\n+    }\n+\n+    \/\/ in.close();\n+    closeInputStream(env, in);\n+\n+    \/\/ Attempt to fetch closed resource from the module.  It should return null.\n+    \/\/ in = n.getResourceAsStream(\"closed\/test.txt\");\n+    in =  (*env)->CallObjectMethod(env, n, mid_Module_getResourceAsStream,\n+        (*env)->NewStringUTF(env, \"closed\/test.txt\"));\n+    if ((*env)->ExceptionOccurred(env) != NULL) {\n+        printf(\"ERROR: Exception was thrown calling Module::getResourceAsStream on 'closed\/test.txt'.\\n\");\n+        (*env)->ExceptionDescribe(env);\n+        exit(-1);\n+    }\n+    if (in != NULL) {\n+        printf(\"ERROR: Module::getResourceAsStream, expected null value for closed resource\\n\");\n+        exit(-1);\n+    }\n+\n+    \/\/ Attempt to fetch open resource from the class.  It should return a valid stream.\n+    \/\/ in = open.OpenReosurces.class.getResourceAsStream(\"test.txt\");\n+    jmethodID mid_Class_getResourceAsStream =\n+        (*env)->GetMethodID(env, class_Class, \"getResourceAsStream\", \"(Ljava\/lang\/String;)Ljava\/io\/InputStream;\" );\n+    assert(mid_Class_getResourceAsStream != NULL);\n+    in =  (*env)->CallObjectMethod(env, class_OpenResources, mid_Class_getResourceAsStream,\n+        (*env)->NewStringUTF(env, \"test.txt\"));\n+    if ((*env)->ExceptionOccurred(env) != NULL) {\n+        printf(\"ERROR: Exception was thrown calling Class::getResourceAsStream on 'test.txt'.\\n\");\n+        (*env)->ExceptionDescribe(env);\n+        exit(-1);\n+    }\n+    if (in == NULL) {\n+        printf(\"ERROR: Class::getResourceAsStream, expected valid stream for open resource\\n\");\n+        exit(-1);\n+    }\n+\n+    \/\/ in.close();\n+    closeInputStream(env, in);\n+\n+    \/\/ Attempt to fetch closed resource from the class.  It should return null.\n+    \/\/ in = closed.ClosedResources.class.getResourceAsStream(\"test.txt\");\n+    in =  (*env)->CallObjectMethod(env, class_ClosedResources, mid_Class_getResourceAsStream,\n+        (*env)->NewStringUTF(env, \"test.txt\"));\n+    if ((*env)->ExceptionOccurred(env) != NULL) {\n+        printf(\"ERROR: Exception was thrown calling Class::getResourceAsStream on closed 'test.txt'.\\n\");\n+        (*env)->ExceptionDescribe(env);\n+        exit(-1);\n+    }\n+    if (in != NULL) {\n+        printf(\"ERROR: Class::getResourceAsStream, expected null value for closed resource\\n\");\n+        exit(-1);\n+    }\n+\n+    (*jvm)->DestroyJavaVM(jvm);\n+    return 0;\n+}\n+\n","filename":"test\/jdk\/java\/lang\/module\/exeNullCallerGetResource\/exeNullCallerGetResource.c","additions":184,"deletions":0,"binary":false,"changes":184,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package closed;\n+\n+\/\/ class to test relative access to a closed resource\n+\/\/ with Class::getResourceAsStream with no caller frame\n+public class ClosedResources {\n+}\n","filename":"test\/jdk\/java\/lang\/module\/exeNullCallerGetResource\/src\/n\/closed\/ClosedResources.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ module to test access to both open and closed resources using\n+\/\/ Module::getResourceAsStream with no caller frame\n+module n {\n+    opens open;\n+}\n","filename":"test\/jdk\/java\/lang\/module\/exeNullCallerGetResource\/src\/n\/module-info.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package open;\n+\n+\/\/ class used to test relative access to an open resource\n+\/\/ with Class::getResourceAsStream with no caller frame\n+public class OpenResources {\n+}\n","filename":"test\/jdk\/java\/lang\/module\/exeNullCallerGetResource\/src\/n\/open\/OpenResources.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"}]}