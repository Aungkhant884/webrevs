{"files":[{"patch":"@@ -163,19 +163,17 @@\n-  AC_MSG_CHECKING([if make --output-sync is supported])\n-  if $MAKE --version -O > \/dev\/null 2>&1; then\n-    OUTPUT_SYNC_SUPPORTED=true\n-    AC_MSG_RESULT([yes])\n-    AC_MSG_CHECKING([for output-sync value])\n-    AC_ARG_WITH([output-sync], [AS_HELP_STRING([--with-output-sync],\n-      [set make output sync type if supported by make. @<:@recurse@:>@])],\n-      [OUTPUT_SYNC=$with_output_sync])\n-    if test \"x$OUTPUT_SYNC\" = \"x\"; then\n-      OUTPUT_SYNC=none\n-    fi\n-    AC_MSG_RESULT([$OUTPUT_SYNC])\n-    if ! $MAKE --version -O$OUTPUT_SYNC > \/dev\/null 2>&1; then\n-      AC_MSG_ERROR([Make did not the support the value $OUTPUT_SYNC as output sync type.])\n-    fi\n-  else\n-    OUTPUT_SYNC_SUPPORTED=false\n-    AC_MSG_RESULT([no])\n-  fi\n+  UTIL_ARG_WITH(NAME: output-sync, TYPE: literal,\n+      VALID_VALUES: [none recurse line target], DEFAULT: recurse,\n+      OPTIONAL: true, ENABLED_DEFAULT: true,\n+      ENABLED_RESULT: OUTPUT_SYNC_SUPPORTED,\n+      CHECKING_MSG: [for make --output-sync value],\n+      DESC: [set make --output-sync type if supported by make],\n+      CHECK_AVAILABLE:\n+      [\n+        AC_MSG_CHECKING([if make --output-sync is supported])\n+        if ! $MAKE --version -O > \/dev\/null 2>&1; then\n+          AC_MSG_RESULT([no])\n+          AVAILABLE=false\n+        else\n+          AC_MSG_RESULT([yes])\n+        fi\n+      ]\n+  )\n@@ -377,10 +375,7 @@\n-    if test \"x$CODESIGN\" != \"x\"; then\n-      # Check for user provided code signing identity.\n-      # If no identity was provided, fall back to \"openjdk_codesign\".\n-      AC_ARG_WITH([macosx-codesign-identity], [AS_HELP_STRING([--with-macosx-codesign-identity],\n-        [specify the code signing identity])],\n-        [MACOSX_CODESIGN_IDENTITY=$with_macosx_codesign_identity],\n-        [MACOSX_CODESIGN_IDENTITY=openjdk_codesign]\n-      )\n-\n-      AC_SUBST(MACOSX_CODESIGN_IDENTITY)\n+    # Check for user provided code signing identity.\n+    UTIL_ARG_WITH(NAME: macosx-codesign-identity, TYPE: string,\n+        DEFAULT: openjdk_codesign, CHECK_VALUE: UTIL_CHECK_STRING_NON_EMPTY,\n+        DESC: [specify the macosx code signing identity],\n+        CHECKING_MSG: [for macosx code signing identity]\n+    )\n+    AC_SUBST(MACOSX_CODESIGN_IDENTITY)\n@@ -388,0 +383,1 @@\n+    if test \"x$CODESIGN\" != \"x\"; then\n","filename":"make\/autoconf\/basic_tools.m4","additions":25,"deletions":29,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -328,1 +328,1 @@\n-# is not available, as specified by AVAILABLE and\/or AVAILABLE_CHECK.\n+# is not available, as specified by AVAILABLE and\/or CHECK_AVAILABLE.\n@@ -333,1 +333,1 @@\n-#     <NAME in uppercase>_RESULT.\n+#     <NAME in uppercase>_ENABLED.\n@@ -379,1 +379,1 @@\n-  m4_define([ARG_CHECKING_MSG], m4_if(ARG_CHECKING_MSG, , [for --enable-ARG_NAME], ARG_CHECKING_MSG))\n+  m4_define([ARG_CHECKING_MSG], m4_if(ARG_CHECKING_MSG, , [for --enable-ARG_NAME], m4_normalize(ARG_CHECKING_MSG)))\n@@ -466,0 +466,348 @@\n+###############################################################################\n+# Helper functions for ARG_WITH, to validate different types of argument\n+\n+# Dispatcher to call the correct UTIL_CHECK_TYPE_* function depending on the ARG_TYPE\n+AC_DEFUN([UTIL_CHECK_TYPE],\n+[\n+  UTIL_CHECK_TYPE_$1($2)\n+])\n+\n+AC_DEFUN([UTIL_CHECK_TYPE_string],\n+[\n+  # All strings always passes\n+])\n+\n+AC_DEFUN([UTIL_CHECK_TYPE_integer],\n+[\n+  # Check that the argument is an integer\n+  # Additional [] needed to keep m4 from mangling shell constructs.\n+  [ if [[ ! \"$1\" =~ ^[0-9]+$ ]] ; then ]\n+    FAILURE=\"Not an integer: $1\"\n+  fi\n+])\n+\n+AC_DEFUN([UTIL_CHECK_TYPE_file],\n+[\n+  # Check that the argument is an existing file\n+  if test ! -f \"$1\" ; then\n+    FAILURE=\"File $1 does not exist or is not readable\"\n+  fi\n+])\n+\n+AC_DEFUN([UTIL_CHECK_TYPE_directory],\n+[\n+  # Check that the argument is an existing directory\n+  if test ! -d \"$1\" ; then\n+    FAILURE=\"Directory $1 does not exist or is not readable\"\n+  fi\n+\n+  if test \"[x]ARG_CHECK_FOR_FILES\" != x; then\n+    for file in ARG_CHECK_FOR_FILES; do\n+      found_files=$($ECHO $(ls $1\/$file 2> \/dev\/null))\n+      if test \"x$found_files\" = x; then\n+        FAILURE=\"Directory $1 does not contain $file\"\n+        break\n+      elif ! test -e \"$found_files\"; then\n+        FAILURE=\"Directory $1 contains multiple $file: $found_files\"\n+        break\n+      fi\n+    done\n+  fi\n+])\n+\n+AC_DEFUN([UTIL_CHECK_TYPE_literal],\n+[\n+  # Check if it contains a space between non-space characters\n+  # Additional [] needed to keep m4 from mangling shell constructs.\n+  [ if [[ \"$1\" =~ [^' ']' '+[^' '] ]] ; then ]\n+    FAILURE=\"Multiple words: $1\"\n+  fi\n+\n+  # Check that the selected variants are valid\n+  UTIL_GET_NON_MATCHING_VALUES(invalid_value, $1, \\\n+      ARG_VALID_VALUES)\n+  if test \"x$invalid_value\" != x; then\n+    FAILURE=\"Invalid value: $invalid_value. Valid values are: ARG_VALID_VALUES\"\n+  fi\n+])\n+\n+AC_DEFUN([UTIL_CHECK_TYPE_multivalue],\n+[\n+  # We accept either space or comma as separator, but use space internally\n+  values=`$ECHO $1 | $SED -e 's\/,\/ \/g'`\n+\n+  # Check that the selected variants are valid\n+  UTIL_GET_NON_MATCHING_VALUES(invalid_value, $values, \\\n+      ARG_VALID_VALUES)\n+  if test \"x$invalid_value\" != x; then\n+    FAILURE=\"Invalid value(s): $invalid_value. Valid values are: ARG_VALID_VALUES\"\n+  fi\n+\n+  # Update to version without comma\n+  ARG_RESULT=$($ECHO $values)\n+])\n+\n+AC_DEFUN([UTIL_CHECK_TYPE_features],\n+[\n+  # We accept either space or comma as separator, but use space internally\n+  feature_list=`$ECHO $1 | $SED -e 's\/,\/ \/g'`\n+  features_enabled=`$ECHO $feature_list | \\\n+    $AWK '{ for (i=1; i<=NF; i++) if (!match($i, \/^-.*\/)) printf(\"%s \", $i) }'`\n+  features_disabled=`$ECHO $feature_list | \\\n+    $AWK '{ for (i=1; i<=NF; i++) if (match($i, \/^-.*\/)) printf(\"%s \", substr($i, 2))}'`\n+\n+  # Check that the selected features are valid\n+  UTIL_GET_NON_MATCHING_VALUES(invalid_features, $features_enabled \\\n+        $features_disabled, ARG_VALID_VALUES)\n+  if test \"x$invalid_features\" != x; then\n+    FAILURE=\"Invalid feature(s): $invalid_features. Valid values are: ARG_VALID_VALUES\"\n+  fi\n+\n+  # Update to version without comma\n+  ARG_RESULT=$($ECHO $feature_list)\n+])\n+\n+###############################################################################\n+# Creates a command-line option using the --with-* pattern. Will return a\n+# string in the RESULT variable with the option provided by the user, or the\n+# empty string if the --with-* option was not given. The option can not be given\n+# if it is not available, as specified by AVAILABLE and\/or CHECK_AVAILABLE.\n+#\n+# Arguments:\n+#   NAME: The base name of this option (i.e. what follows --with-). Required.\n+#   TYPE: The type of the value. Can be one of \"string\", \"integer\", \"file\",\n+#     \"directory\", \"literal\", \"multivalue\" or \"features\". Required.\n+#   DEFAULT: The default value for this option. Can be any valid string.\n+#     Required.\n+#   OPTIONAL: If this feature can be disabled. Defaults to false. If true,\n+#     the feature can be disabled using --without-FOO, --with-FOO=no, or\n+#     --with-FOO=. Check the ENABLED_RESULT variable for the enabled\/disabled\n+#     state.\n+#   RESULT: The name of the variable to set to the result. Defaults to\n+#     <NAME in uppercase>. Set to empty if ENABLED_RESULT is false.\n+#   ENABLED_DEFAULT: If the value is enabled by default. Defaults to false. Only\n+#     relevant if OPTIONAL is true.\n+#   ENABLED_RESULT: The name of the variable to set to the enabled\/disabled\n+#     result state. Defaults to <NAME in uppercase>_ENABLED.\n+#   AVAILABLE: If true, this option is allowed to be selected. Defaults to true.\n+#   DESC: A description of this option. Defaults to a generic and unhelpful\n+#     string.\n+#   DEFAULT_DESC: A message describing the default value, for the help. Defaults\n+#     to the literal value of DEFAULT, or \"<none>\" if DEFAULT is empty.\n+#   CHECKING_MSG: The message to present to user when checking this option.\n+#     Defaults to a generic message.\n+#   CHECK_AVAILABLE: An optional code block to execute to determine if the\n+#     option should be available. Must set AVAILABLE to 'false' if not.\n+#   VALID_VALUES: A list of literals that are the allowed values. Only valid if\n+#     TYPE is \"literal\", \"multivalue\" or \"features\".\n+#   CHECK_VALUE: An optional code block to execute to determine if the value\n+#     is correct. Must set FAILURE to a non-empty string if not. This string\n+#     will be displayed. The value is given in $RESULT.\n+#   CHECK_FOR_FILES: A list of files to verify the presence for. Only valid if\n+#     TYPE is \"directory\". Paths are relative the directory given as value.\n+#     Wildcards are accepted. Exactly one matching file must be found, for each\n+#     listed file, or FAILURE is set.\n+#   IF_AUTO: An optional code block to execute if the value is \"auto\", either by\n+#     default or given by the command line. Must set RESULT to the calculated\n+#     value.\n+#   IF_GIVEN:  An optional code block to execute if the option was given on the\n+#     command line (regardless of the value).\n+#   IF_NOT_GIVEN:  An optional code block to execute if the option was not given\n+#     on the command line (regardless of the value).\n+#\n+UTIL_DEFUN_NAMED([UTIL_ARG_WITH],\n+    [*NAME *TYPE *DEFAULT OPTIONAL RESULT ENABLED_DEFAULT ENABLED_RESULT\n+    AVAILABLE DESC DEFAULT_DESC CHECKING_MSG CHECK_AVAILABLE VALID_VALUES\n+    CHECK_VALUE CHECK_FOR_FILES IF_AUTO IF_GIVEN IF_NOT_GIVEN], [$@],\n+[\n+  ##########################\n+  # Part 1: Set up m4 macros\n+  ##########################\n+\n+  # If ENABLED_DEFAULT is not specified, set it to 'false'.\n+  m4_define([ARG_ENABLED_DEFAULT], m4_if(ARG_ENABLED_DEFAULT, , false, ARG_ENABLED_DEFAULT))\n+\n+  # If AVAILABLE is not specified, set it to 'true'.\n+  m4_define([ARG_AVAILABLE], m4_if(ARG_AVAILABLE, , true, ARG_AVAILABLE))\n+\n+  # If OPTIONAL is not specified, set it to 'false'.\n+  m4_define([ARG_OPTIONAL], m4_if(ARG_OPTIONAL, , false, ARG_OPTIONAL))\n+\n+  # If DEFAULT_DESC is not specified, calculate it from DEFAULT.\n+  m4_define([ARG_DEFAULT_DESC], m4_if(ARG_DEFAULT_DESC, , m4_if(ARG_DEFAULT, , <none>, ARG_DEFAULT), ARG_DEFAULT_DESC))\n+\n+  # If RESULT is not specified, set it to 'ARG_NAME'.\n+  m4_define([ARG_RESULT], m4_if(ARG_RESULT, , m4_translit(ARG_NAME, [a-z-], [A-Z_]), ARG_RESULT))\n+\n+  # If ENABLED_RESULT is not specified, set it to 'ARG_NAME[_ENABLED]'.\n+  m4_define([ARG_ENABLED_RESULT], m4_if(ARG_ENABLED_RESULT, , m4_translit(ARG_NAME, [a-z-], [A-Z_])[_ENABLED], ARG_ENABLED_RESULT))\n+\n+  # Construct shell variable names for the option\n+  m4_define(ARG_OPTION, [with_]m4_translit(ARG_NAME, [-], [_]))\n+  m4_define(ARG_GIVEN, m4_translit(ARG_NAME, [a-z-], [A-Z_])[_GIVEN])\n+\n+  # If DESC is not specified, set it to a generic description.\n+  m4_define([ARG_DESC], m4_if(ARG_DESC, , [Give a value for the ARG_NAME feature], m4_normalize(ARG_DESC)))\n+\n+  # If CHECKING_MSG is not specified, set it to a generic description.\n+  m4_define([ARG_CHECKING_MSG], m4_if(ARG_CHECKING_MSG, , [for --with-ARG_NAME], m4_normalize(ARG_CHECKING_MSG)))\n+\n+  m4_define([ARG_HAS_AUTO_BLOCK], m4_if(ARG_IF_AUTO, , false, true))\n+\n+  # If the code blocks are not given, set them to the empty statements to avoid\n+  # tripping up bash.\n+  m4_define([ARG_CHECK_AVAILABLE], m4_if(ARG_CHECK_AVAILABLE, , :, ARG_CHECK_AVAILABLE))\n+  m4_define([ARG_CHECK_VALUE], m4_if(ARG_CHECK_VALUE, , :, ARG_CHECK_VALUE))\n+  m4_define([ARG_CHECK_FOR_FILES], m4_if(ARG_CHECK_FOR_FILES, , :, ARG_CHECK_FOR_FILES))\n+  m4_define([ARG_IF_AUTO], m4_if(ARG_IF_AUTO, , :, ARG_IF_AUTO))\n+  m4_define([ARG_IF_GIVEN], m4_if(ARG_IF_GIVEN, , :, ARG_IF_GIVEN))\n+  m4_define([ARG_IF_NOT_GIVEN], m4_if(ARG_IF_NOT_GIVEN, , :, ARG_IF_NOT_GIVEN))\n+\n+  ##########################\n+  # Part 2: Set up autoconf shell code\n+  ##########################\n+\n+  # Check that OPTIONAL has a valid value\n+  if test \"[x]ARG_OPTIONAL\" != xtrue && test \"[x]ARG_OPTIONAL\" != xfalse ; then\n+    AC_MSG_ERROR([Internal error: Argument OPTIONAL to [UTIL_ARG_WITH] can only be true or false, was: 'ARG_OPTIONAL'])\n+  fi\n+\n+  # Check that ENABLED_DEFAULT has a valid value\n+  if test \"[x]ARG_ENABLED_DEFAULT\" != xtrue && test \"[x]ARG_ENABLED_DEFAULT\" != xfalse ; then\n+    AC_MSG_ERROR([Internal error: Argument ENABLED_DEFAULT to [UTIL_ARG_WITH] can only be true or false, was: 'ARG_ENABLED_DEFAULT'])\n+  fi\n+\n+  # Check that AVAILABLE has a valid value\n+  if test \"[x]ARG_AVAILABLE\" != xtrue && test \"[x]ARG_AVAILABLE\" != xfalse; then\n+    AC_MSG_ERROR([Internal error: Argument AVAILABLE to [UTIL_ARG_WITH] can only be true or false, was: 'ARG_AVAILABLE'])\n+  fi\n+\n+  # Check that TYPE has a valid value\n+  # Need to assign since we can't expand ARG TYPE inside the m4 quoted if statement\n+  TEST_TYPE=\"ARG_TYPE\"\n+  # Additional [] needed to keep m4 from mangling shell constructs.\n+  [ if [[ ! \"$TEST_TYPE\" =~ ^(string|integer|file|directory|literal|multivalue|features)$ ]] ; then ]\n+    AC_MSG_ERROR([Internal error: Argument TYPE to [UTIL_ARG_WITH] must be a valid type, was: 'ARG_TYPE'])\n+  fi\n+\n+  AC_ARG_WITH(ARG_NAME, AS_HELP_STRING([--with-]ARG_NAME,\n+      [ARG_DESC [ARG_DEFAULT_DESC]]), [ARG_GIVEN=true], [ARG_GIVEN=false])\n+\n+  # Check if the option is available\n+  AVAILABLE=ARG_AVAILABLE\n+  # Run the available check block (if any), which can overwrite AVAILABLE.\n+  ARG_CHECK_AVAILABLE\n+\n+  # Check if the option should be turned on\n+  echo check msg:ARG_CHECKING_MSG:\n+  AC_MSG_CHECKING(ARG_CHECKING_MSG)\n+\n+  if test x$AVAILABLE = xfalse; then\n+    ARG_RESULT=\"$ARG_OPTION\"\n+    ARG_ENABLED_RESULT=false\n+    REASON=\"not available\"\n+  else\n+    if test x$ARG_GIVEN = xfalse; then\n+      ARG_RESULT=\"ARG_DEFAULT\"\n+      if test \"[x]ARG_OPTIONAL\" = xtrue; then\n+        ARG_ENABLED_RESULT=ARG_ENABLED_DEFAULT\n+      else\n+        ARG_ENABLED_RESULT=true\n+      fi\n+      REASON=\"default\"\n+\n+    else # ARG_GIVEN is true\n+      # Special treatment of \"yes\" and \"no\" for \"--with-ARG\" and \"--without-ARG\"\n+      if test \"x$ARG_OPTION\" = xyes || test \"x$ARG_OPTION\" = xno || test \"x$ARG_OPTION\" = x ; then\n+        if test \"[x]ARG_OPTIONAL\" = xfalse; then\n+          if test \"x$ARG_OPTION\" = x; then\n+            # If not optional, the empty string is a valid value\n+            ARG_RESULT=\"\"\n+            ARG_ENABLED_RESULT=true\n+            REASON=\"from command line\"\n+          else\n+            AC_MSG_RESULT([invalid])\n+            AC_MSG_ERROR([Option [--with-]ARG_NAME must have a specified value])\n+          fi\n+        else\n+          if test \"x$ARG_OPTION\" = xyes; then\n+            ARG_RESULT=\"ARG_DEFAULT\"\n+            ARG_ENABLED_RESULT=true\n+            REASON=\"default as enabled from command line\"\n+          else\n+            # For optional values, both --without-FOO and --with-FOO= disables\n+            ARG_RESULT=\"\"\n+            ARG_ENABLED_RESULT=false\n+            REASON=\"from command line\"\n+          fi\n+        fi\n+      else\n+        # The most common case -- the user gives a value for the option.\n+        ARG_RESULT=\"$ARG_OPTION\"\n+        ARG_ENABLED_RESULT=true\n+        REASON=\"from command line\"\n+      fi\n+    fi\n+  fi\n+\n+  if test \"x$ARG_ENABLED_RESULT\" = xfalse; then\n+    if test \"x$REASON\" = \"xnot available\"; then\n+      AC_MSG_RESULT([<invalid>, $REASON])\n+      if test \"x$ARG_RESULT\" != \"x\" && test \"x$ARG_RESULT\" != \"xno\" ; then\n+        AC_MSG_WARN([Option [--with-]ARG_NAME is not available for this configuration])\n+      fi\n+    else\n+      AC_MSG_RESULT([<disabled>, $REASON])\n+    fi\n+    ARG_RESULT=\"\"\n+  else\n+    if test [x]ARG_HAS_AUTO_BLOCK = xtrue && test \"x$ARG_RESULT\" = xauto; then\n+      # Execute \"auto\" payload\n+      ARG_IF_AUTO\n+\n+      ARG_RESULT=\"$RESULT\"\n+      REASON=\"$REASON (calculated from 'auto')\"\n+    fi\n+\n+    if test \"x$ARG_RESULT\" = x; then\n+      AC_MSG_RESULT([<none>, $REASON])\n+    else\n+      AC_MSG_RESULT([$ARG_RESULT, $REASON])\n+    fi\n+  fi\n+\n+  # Verify value\n+  # First use our dispatcher to verify that type requirements are satisfied\n+  UTIL_CHECK_TYPE(ARG_TYPE, $ARG_RESULT)\n+\n+  if test \"x$FAILURE\" = x; then\n+    # Execute custom verification payload, if present\n+    RESULT=\"$ARG_RESULT\"\n+\n+    ARG_CHECK_VALUE\n+\n+    ARG_RESULT=\"$RESULT\"\n+  fi\n+\n+  if test \"x$FAILURE\" != x; then\n+    AC_MSG_NOTICE([Invalid value for [--with-]ARG_NAME: \"$ARG_RESULT\"])\n+    AC_MSG_NOTICE([$FAILURE])\n+    AC_MSG_ERROR([Cannot continue])\n+  fi\n+\n+  # Execute result payloads, if present\n+  if test x$ARG_GIVEN = xtrue; then\n+    ARG_IF_GIVEN\n+  else\n+    ARG_IF_NOT_GIVEN\n+  fi\n+])\n+\n+###############################################################################\n+# Helper functions for CHECK_VALUE in ARG_WITH.\n+AC_DEFUN([UTIL_CHECK_STRING_NON_EMPTY],\n+[\n+  if test \"x$RESULT\" = \"x\"; then\n+    FAILURE=\"Value cannot be empty\"\n+  fi\n+])\n","filename":"make\/autoconf\/util.m4","additions":352,"deletions":4,"binary":false,"changes":356,"status":"modified"}]}