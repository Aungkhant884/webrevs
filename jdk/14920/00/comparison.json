{"files":[{"patch":"@@ -111,1 +111,1 @@\n-const char* get_java_thread_name(const JavaThread* jt, int& length, oop vthread) {\n+static const char* get_java_thread_name(const JavaThread* jt, int& length, oop vthread) {\n@@ -113,6 +113,3 @@\n-  const char* name_str = \"<no-name - thread name unresolved>\";\n-  oop thread_obj = vthread != nullptr ? vthread : jt->threadObj();\n-  if (thread_obj == nullptr) {\n-    if (jt->is_attaching_via_jni()) {\n-      name_str = \"<no-name - thread is attaching>\";\n-    }\n+  oop thread_obj;\n+  if (vthread != nullptr) {\n+    thread_obj = vthread;\n@@ -120,3 +117,3 @@\n-    const oop name = java_lang_Thread::name(thread_obj);\n-    if (name != nullptr) {\n-      name_str = java_lang_String::as_utf8_string(name, length);\n+    thread_obj = jt->threadObj();\n+    if (thread_obj == nullptr) {\n+      return nullptr;\n@@ -125,2 +122,3 @@\n-  assert(name_str != nullptr, \"unexpected null thread name\");\n-  return name_str;\n+  assert(thread_obj != nullptr, \"invariant\");\n+  const oop name = java_lang_Thread::name(thread_obj);\n+  return name != nullptr ? java_lang_String::as_utf8_string(name, length) : nullptr;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrThreadState.cpp","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -272,2 +272,2 @@\n-void JfrThreadConstant::write_name(JfrCheckpointWriter& writer, const char* name, int length) {\n-  if (length == 0) {\n+void JfrThreadConstant::write_name(JfrCheckpointWriter& writer) {\n+  if (_length == 0) {\n@@ -277,1 +277,10 @@\n-  writer.write(name);\n+  writer.write(_name);\n+}\n+\n+void JfrThreadConstant::write_os_name(JfrCheckpointWriter& writer, bool is_vthread) {\n+  if (is_vthread) {\n+    \/\/ Write the null string categorically as the os name for virtual threads.\n+    writer.write((const char*)nullptr);\n+    return;\n+  }\n+  write_name(writer);\n@@ -282,1 +291,1 @@\n-  const bool vthread = _vthread != nullptr;\n+  const bool is_vthread = _vthread != nullptr;\n@@ -284,4 +293,3 @@\n-  int length = -1;\n-  const char* const name = JfrThreadName::name(_thread, length, _vthread);\n-  write_name(writer, name, length);\n-  writer.write(_vthread != nullptr ? static_cast<traceid>(0) : JfrThreadId::os_id(_thread));\n+  _name = JfrThreadName::name(_thread, _length, _vthread);\n+  write_os_name(writer, is_vthread);\n+  writer.write(is_vthread ? static_cast<traceid>(0) : JfrThreadId::os_id(_thread));\n@@ -289,1 +297,1 @@\n-    write_name(writer, nullptr, 0); \/\/ java name\n+    writer.write((const char*)nullptr); \/\/ java name\n@@ -293,12 +301,11 @@\n-  } else {\n-    write_name(writer, name, length);\n-    writer.write(JfrThreadId::jfr_id(_thread, _tid));\n-    \/\/ java thread group - VirtualThread threadgroup reserved id 1\n-    const traceid thread_group_id = vthread ? 1 :\n-      JfrThreadGroup::thread_group_id(JavaThread::cast(_thread), Thread::current());\n-    writer.write(thread_group_id);\n-    writer.write<bool>(vthread); \/\/ isVirtual\n-    if (!vthread) {\n-      JfrThreadGroup::serialize(&writer, thread_group_id);\n-    }\n-    \/\/ VirtualThread threadgroup already serialized invariant.\n+    return;\n+  }\n+  write_name(writer);\n+  writer.write(JfrThreadId::jfr_id(_thread, _tid));\n+  \/\/ java thread group - VirtualThread threadgroup reserved id 1\n+  const traceid thread_group_id = is_vthread ? 1 :\n+    JfrThreadGroup::thread_group_id(JavaThread::cast(_thread), Thread::current());\n+  writer.write(thread_group_id);\n+  writer.write<bool>(is_vthread); \/\/ isVirtual\n+  if (!is_vthread) {\n+    JfrThreadGroup::serialize(&writer, thread_group_id);\n@@ -306,0 +313,1 @@\n+  \/\/ VirtualThread threadgroup already serialized invariant.\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrType.cpp","additions":29,"deletions":21,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -110,1 +110,4 @@\n-  void write_name(JfrCheckpointWriter& writer, const char* name, int length);\n+  const char* _name;\n+  int _length;\n+  void write_name(JfrCheckpointWriter& writer);\n+  void write_os_name(JfrCheckpointWriter& writer, bool is_vthread);\n@@ -112,1 +115,2 @@\n-  JfrThreadConstant(Thread* t, traceid tid, oop vthread = nullptr) : _thread(t), _tid(tid), _vthread(vthread) {}\n+  JfrThreadConstant(Thread* t, traceid tid, oop vthread = nullptr) :\n+    _thread(t), _tid(tid), _vthread(vthread), _name(nullptr), _length(-1) {}\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrType.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -59,0 +59,3 @@\n+        if (isVirtual()) {\n+            return -1L;\n+        }\n@@ -93,1 +96,2 @@\n-        return l.longValue();\n+        long id = l.longValue();\n+        return id == 0 ? -1L : id;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordedThread.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -92,0 +92,2 @@\n+                Asserts.assertEquals(t.getOSName(), null);\n+                Asserts.assertEquals(t.getOSThreadId(), -1L);\n@@ -93,2 +95,0 @@\n-                Asserts.assertEquals(t.getOSName(), \"\");\n-                Asserts.assertEquals(t.getThreadGroup().getName(), \"VirtualThreads\");\n@@ -96,1 +96,1 @@\n-                Asserts.assertEquals(t.getOSThreadId(), 0L);\n+                Asserts.assertEquals(t.getThreadGroup().getName(), \"VirtualThreads\");\n","filename":"test\/jdk\/jdk\/jfr\/threading\/TestManyVirtualThreads.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -77,0 +77,2 @@\n+            Asserts.assertEquals(t.getOSName(), null);\n+            Asserts.assertEquals(t.getOSThreadId(), -1L);\n@@ -78,2 +80,0 @@\n-            Asserts.assertEquals(t.getOSName(), \"\");\n-            Asserts.assertEquals(t.getThreadGroup().getName(), \"VirtualThreads\");\n@@ -81,1 +81,1 @@\n-            Asserts.assertEquals(t.getOSThreadId(), 0L);\n+            Asserts.assertEquals(t.getThreadGroup().getName(), \"VirtualThreads\");\n","filename":"test\/jdk\/jdk\/jfr\/threading\/TestNestedVirtualThreads.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}