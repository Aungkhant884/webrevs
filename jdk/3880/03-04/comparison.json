{"files":[{"patch":"@@ -5151,10 +5151,2 @@\n-void TypeKlassPtr::dump2( Dict & d, uint depth, outputStream *st ) const {\n-  {\n-    const char *name = klass()->name()->as_utf8();\n-    if( name ) {\n-      st->print(\"klass %s: \" INTPTR_FORMAT, name, p2i(klass()));\n-    } else {\n-      ShouldNotReachHere();\n-    }\n-  }\n-  switch( _ptr ) {\n+void TypeKlassPtr::dump2(Dict & d, uint depth, outputStream *st) const {\n+  switch(_ptr) {\n@@ -5164,0 +5156,8 @@\n+    {\n+      const char *name = klass()->name()->as_utf8();\n+      if (name) {\n+        st->print(\"%s: \" INTPTR_FORMAT, name, p2i(klass()));\n+      } else {\n+        ShouldNotReachHere();\n+      }\n+    }\n@@ -5165,1 +5165,1 @@\n-    if( !WizardMode && !Verbose && _ptr != Constant ) break;\n+    if (!WizardMode && !Verbose && _ptr != Constant) break;\n@@ -5169,1 +5169,1 @@\n-    if( _ptr == Constant ) st->print(\":exact\");\n+    if (_ptr == Constant) st->print(\":exact\");\n@@ -5175,3 +5175,3 @@\n-  if( _offset ) {               \/\/ Dump offset, if any\n-    if( _offset == OffsetBot )      { st->print(\"+any\"); }\n-    else if( _offset == OffsetTop ) { st->print(\"+unknown\"); }\n+  if (_offset) {               \/\/ Dump offset, if any\n+    if (_offset == OffsetBot)      { st->print(\"+any\"); }\n+    else if (_offset == OffsetTop) { st->print(\"+unknown\"); }\n@@ -5734,4 +5734,0 @@\n-  _elem->dump2(d, depth, st);\n-  st->print(\"[\");\n-  st->print(\"]\");\n-\n@@ -5742,0 +5738,5 @@\n+    {\n+      st->print(\"[\");\n+      _elem->dump2(d, depth, st);\n+      st->print(\": \");\n+    }\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -52,4 +52,4 @@\n-    public static final String ALLOC = \"(.*precise klass .*\\\\R(.*(movl|xorl|nop|spill).*\\\\R)*.*call,static  wrapper for: _new_instance_Java\" + END;\n-    public static final String ALLOC_OF = \"(.*precise klass .*\";\n-    public static final String ALLOC_ARRAY = \"(.*precise klass \\\\[L.*\\\\R(.*(movl|xorl|nop|spill).*\\\\R)*.*call,static  wrapper for: _new_array_Java\" + END;\n-    public static final String ALLOC_ARRAY_OF = \"(.*precise klass \\\\[L.*\";\n+    public static final String ALLOC = \"(.*precise .*\\\\R(.*(movl|xorl|nop|spill).*\\\\R)*.*call,static  wrapper for: _new_instance_Java\" + END;\n+    public static final String ALLOC_OF = \"(.*precise .*\";\n+    public static final String ALLOC_ARRAY = \"(.*precise \\\\[.*\\\\R(.*(movl|xorl|nop|spill).*\\\\R)*.*call,static  wrapper for: _new_array_Java\" + END;\n+    public static final String ALLOC_ARRAY_OF = \"(.*precise \\\\[.*\";\n@@ -57,2 +57,2 @@\n-    public static final String CHECKCAST_ARRAY = \"(cmp.*precise klass \\\\[.*;:\" + END;\n-    public static final String CHECKCAST_ARRAY_OF = \"(cmp.*precise klass \\\\[.*\";\n+    public static final String CHECKCAST_ARRAY = \"(cmp.*precise \\\\[.*:\" + END;\n+    public static final String CHECKCAST_ARRAY_OF = \"(cmp.*precise \\\\[.*\";\n@@ -128,2 +128,2 @@\n-    private static final String ALLOC_ARRAY_OF_POSTFIX = \";:.*\\\\R(.*(movl|xorl|nop|spill).*\\\\R)*.*call,static  wrapper for: _new_array_Java\" + END;\n-    private static final String CHECKCAST_ARRAY_OF_POSTFIX = \";:\" + END;\n+    private static final String ALLOC_ARRAY_OF_POSTFIX = \":.*\\\\R(.*(movl|xorl|nop|spill).*\\\\R)*.*call,static  wrapper for: _new_array_Java\" + END;\n+    private static final String CHECKCAST_ARRAY_OF_POSTFIX = \":\" + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -187,3 +187,3 @@\n-        runCheck(BadFailOnConstraint.create(CheckCastArray.class, \"array()\", 1, \"cmp\", \"precise klass\"),\n-                 BadFailOnConstraint.create(CheckCastArray.class, \"array()\", 2, 1,\"cmp\", \"precise klass\", \"MyClass\"),\n-                 BadFailOnConstraint.create(CheckCastArray.class, \"array()\", 2, 2,\"cmp\", \"precise klass\", \"ir_framework\/tests\/MyClass\"),\n+        runCheck(BadFailOnConstraint.create(CheckCastArray.class, \"array()\", 1, \"cmp\", \"precise\"),\n+                 BadFailOnConstraint.create(CheckCastArray.class, \"array()\", 2, 1,\"cmp\", \"precise\", \"MyClass\"),\n+                 BadFailOnConstraint.create(CheckCastArray.class, \"array()\", 2, 2,\"cmp\", \"precise\", \"ir_framework\/tests\/MyClass\"),\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestIRMatching.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}