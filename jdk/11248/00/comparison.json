{"files":[{"patch":"@@ -241,0 +241,15 @@\n+\n+    @Override\n+    public long transferTo(OutputStream out) throws IOException {\n+        Objects.requireNonNull(out, \"out\");\n+        if (getClass() == SequenceInputStream.class) {\n+            long c = 0;\n+            while (in != null) {\n+                c += in.transferTo(out);\n+                nextStream();\n+            }\n+            return c;\n+        } else {\n+            return super.transferTo(out);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/io\/SequenceInputStream.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.io.PushbackInputStream;\n+import java.io.SequenceInputStream;\n@@ -51,1 +51,1 @@\n- * @summary Tests whether java.io.PushbackInputStream.transferTo conforms to the\n+ * @summary Tests whether java.io.SequenceInputStream.transferTo conforms to the\n@@ -111,1 +111,1 @@\n-        \/\/ target stream and random pushback\n+        \/\/ target stream\n@@ -117,1 +117,1 @@\n-                    outputStreamProvider, inBytes, posIn, posOut, 1);\n+                    outputStreamProvider, inBytes, posIn, posOut);\n@@ -122,1 +122,1 @@\n-                outputStreamProvider, createRandomBytes(4096, 0), 4096, 0, 0);\n+                outputStreamProvider, createRandomBytes(4096, 0), 4096, 0);\n@@ -126,1 +126,1 @@\n-                outputStreamProvider, createRandomBytes(4096, 0), 0, 4096, 0);\n+                outputStreamProvider, createRandomBytes(4096, 0), 0, 4096);\n@@ -132,1 +132,1 @@\n-     * output streams before the transfer are zero (BOF), and no pushback occurs.\n+     * output streams before the transfer are zero (BOF).\n@@ -137,1 +137,1 @@\n-                outputStreamProvider, inBytes, 0, 0, 0);\n+                outputStreamProvider, inBytes, 0, 0);\n@@ -147,1 +147,1 @@\n-            int posOut, int pushBackBytes) throws Exception {\n+            int posOut) throws Exception {\n@@ -155,7 +155,0 @@\n-            \/\/ pushback\n-            if (in instanceof PushbackInputStream pis) {\n-                byte[] bytes = new byte[pushBackBytes];\n-                int read = pis.read(bytes);\n-                pis.unread(bytes, 0, read);\n-            }\n-\n@@ -195,1 +188,5 @@\n-        return bytes -> new PushbackInputStream(new ByteArrayInputStream(bytes));\n+        return bytes -> {\n+            InputStream is1 = new ByteArrayInputStream(bytes, 0, bytes.length \/ 2);\n+            InputStream is2 = new ByteArrayInputStream(bytes, bytes.length \/ 2, bytes.length);\n+            return new SequenceInputStream(is1, is2);\n+        };\n@@ -209,1 +206,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/io\/SequenceInputStream\/TransferTo.java","additions":15,"deletions":18,"binary":false,"changes":33,"previous_filename":"test\/jdk\/java\/io\/PushbackInputStream\/TransferTo.java","status":"copied"}]}