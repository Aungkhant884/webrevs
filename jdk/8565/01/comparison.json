{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+ *    {&#064;value format reference}\n@@ -43,0 +44,12 @@\n+\n+    \/**\n+     * Returns the format string, or {@code null} if none was provided.\n+     *\n+     * @return the format string\n+     *\n+     * @implSpec This implementation retuyrns {@code null}.\n+     * @since 19\n+     *\/\n+    default TextTree getFormat() {\n+        return null;\n+    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/ValueTree.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -416,0 +416,13 @@\n+    \/**\n+     * Creates a new {@code ValueTree} object, to represent a {@code {@value }} tag.\n+     * @param format a format string for the value\n+     * @param ref a reference to the value\n+     * @return a {@code ValueTree} object\n+     *\n+     * @implSpec This implementation calls {@link #newValueTree(ReferenceTree) newValueTree(ref)}.\n+     * @since 19\n+     *\/\n+    default ValueTree newValueTree(TextTree format, ReferenceTree ref) {\n+        return newValueTree(ref);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTreeFactory.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -641,1 +641,3 @@\n-        return scan(node.getReference(), p);\n+        R r = scan(node.getFormat(), p);\n+        r = scanAndReduce(node.getReference(), p, r);\n+        return r;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTreeScanner.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1582,1 +1582,1 @@\n-            \/\/ {@value package.class#field}\n+            \/\/ {@value [format-string] package.class#field}\n@@ -1586,0 +1586,15 @@\n+                    skipWhitespace();\n+                    DCText format;\n+                    switch (ch) {\n+                        case '%' -> {\n+                            format = inlineWord();\n+                            skipWhitespace();\n+                        }\n+                        case '\"' -> {\n+                            format = quotedString();\n+                            skipWhitespace();\n+                        }\n+                        default -> {\n+                            format = null;\n+                        }\n+                    }\n@@ -1590,1 +1605,3 @@\n-                        return m.at(pos).newValueTree(ref);\n+                        return format == null\n+                                ? m.at(pos).newValueTree(ref)\n+                                : m.at(pos).newValueTree(format, ref);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/DocCommentParser.java","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1313,0 +1313,1 @@\n+        public final DCText format;\n@@ -1315,1 +1316,2 @@\n-        DCValue(DCReference ref) {\n+        DCValue(DCText format, DCReference ref) {\n+            this.format = format;\n@@ -1329,0 +1331,5 @@\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public TextTree getFormat() {\n+            return format;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DCTree.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -635,0 +635,4 @@\n+            if (node.getFormat() != null) {\n+                print(\" \");\n+                print(node.getFormat());\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocPretty.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -483,0 +483,5 @@\n+        return newValueTree(null, ref);\n+    }\n+\n+    @Override @DefinedBy(Api.COMPILER_TREE)\n+    public DCValue newValueTree(TextTree format, ReferenceTree ref) {\n@@ -484,1 +489,1 @@\n-        DCValue tree = new DCValue((DCReference) ref);\n+        DCValue tree = new DCValue((DCText) format, (DCReference) ref);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocTreeMaker.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -126,0 +126,11 @@\n+    \/**\n+     * Reports an error message to the doclet's reporter.\n+     *\n+     * @param e    an element identifying the position to be included with the message\n+     * @param key  the name of a resource containing the message to be printed\n+     * @param args optional arguments to be replaced in the message\n+     *\/\n+    public void error(Element e, String key, Object... args) {\n+        report(ERROR, e, resources.getText(key, args));\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/Messages.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -206,0 +206,1 @@\n+doclet.value_tag_invalid_format=invalid format: {0}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/resources\/doclets.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import java.util.IllegalFormatException;\n+import java.util.Optional;\n@@ -33,0 +35,2 @@\n+import com.sun.source.doctree.TextTree;\n+import com.sun.source.doctree.ValueTree;\n@@ -98,0 +102,19 @@\n+            TextTree format = ((ValueTree) tag).getFormat();\n+            String text;\n+            if (format != null) {\n+                String f = format.getBody();\n+                if (f.startsWith(\"\\\"\")) {\n+                    f = f.substring(1, f.length() - 1);\n+                }\n+                try {\n+                    text = String.format(configuration.getLocale(), f, field.getConstantValue());\n+                } catch (IllegalFormatException e) {\n+                    messages.error(holder,\n+                            \"doclet.value_tag_invalid_format\", format);\n+                    return writer.invalidTagOutput(\n+                            messages.getResources().getText(\"doclet.value_tag_invalid_format\", format),\n+                            Optional.empty());\n+                }\n+            } else {\n+                text = utils.constantValueExpression(field);\n+            }\n@@ -99,1 +122,1 @@\n-                utils.constantValueExpression(field),\n+                text,\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/ValueTaglet.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1118,0 +1118,10 @@\n+        TextTree format = tree.getFormat();\n+        if (format != null) {\n+            String f = format.getBody().toString();\n+            long count = format.getBody().toString().chars()\n+                    .filter(ch -> ch == '%')\n+                    .count();\n+            if (count != 1) {\n+                env.messages.error(REFERENCE, format, \"dc.value.bad.format\", f);\n+            }\n+        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Checker.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,0 +91,1 @@\n+dc.value.bad.format=invalid format: {0}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/resources\/doclint.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8286101\n+ * @summary Support formatting in at-value tag\n+ * @library \/tools\/lib ..\/..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ *          jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build javadoc.tester.*\n+ * @run main TestValueFormats\n+ *\/\n+\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ModuleBuilder;\n+import toolbox.ToolBox;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class TestValueFormats extends JavadocTester {\n+\n+    final ToolBox tb;\n+\n+    public static void main(String... args) throws Exception {\n+        TestValueFormats tester = new TestValueFormats();\n+        tester.runTests(m -> new Object[]{Paths.get(m.getName())});\n+    }\n+\n+    TestValueFormats() {\n+        tb = new ToolBox();\n+    }\n+\n+    @Test\n+    public void testValid(Path base) throws Exception {\n+        Path srcDir = base.resolve(\"src\");\n+        tb.writeJavaFiles(srcDir,\n+                \"\"\"\n+                    package p;\n+                    \/**\n+                     * Comment.\n+                     *\/\n+                    public class C {\n+                        \/** The value {@value} is {@value %4x} or {@value \"0x%04x\"}. *\/\n+                        public static final int i65535 = 65535;\n+                        \/** The value {@value} is {@value %5.2f}. *\/\n+                        public static final double pi = 3.1415926525;\n+                    }\"\"\");\n+\n+        Path outDir = base.resolve(\"out\");\n+        javadoc(\"-d\", outDir.toString(),\n+                \"-sourcepath\", srcDir.toString(),\n+                \"p\");\n+\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <h3>i65535<\/h3>\n+                    <div class=\"member-signature\"><span class=\"modifiers\">public static final<\/span>&nbsp;<span clas\\\n+                    s=\"return-type\">int<\/span>&nbsp;<span class=\"element-name\">i65535<\/span><\/div>\n+                    <div class=\"block\">The value 65535 is ffff or 0xffff.<\/div>\"\"\",\n+                \"\"\"\n+                    <h3>pi<\/h3>\n+                    <div class=\"member-signature\"><span class=\"modifiers\">public static final<\/span>&nbsp;<span class=\"return-type\">double<\/span>&nbsp;<span class=\"element-name\">pi<\/span><\/div>\n+                    <div class=\"block\">The value 3.1415926525 is  3.14.<\/div>\"\"\");\n+    }\n+\n+    @Test\n+    public void testBadFormat(Path base) throws Exception {\n+        Path srcDir = base.resolve(\"src\");\n+        tb.writeJavaFiles(srcDir,\n+                \"\"\"\n+                    package p;\n+                    \/**\n+                     * Comment.\n+                     *\/\n+                    public class C {\n+                        \/** The value {@value} is {@value %a}. *\/\n+                        public static final int i65535 = 65535;\n+                    }\"\"\");\n+\n+        Path outDir = base.resolve(\"out\");\n+        javadoc(\"-d\", outDir.toString(),\n+                \"-sourcepath\", srcDir.toString(),\n+                \"p\");\n+\n+        checkExit(Exit.ERROR);\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <h3>i65535<\/h3>\n+                    <div class=\"member-signature\"><span class=\"modifiers\">public static final<\/span>&nbsp;<span class=\"return-type\">int<\/span>&nbsp;<span class=\"element-name\">i65535<\/span><\/div>\n+                    <div class=\"block\">The value 65535 is <span class=\"invalid-tag\">invalid format: %a<\/span>.<\/div>\"\"\");\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testValueTag\/TestValueFormats.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"},{"patch":"@@ -68,0 +68,12 @@\n+\n+    \/** valid: {@value %04x} *\/\n+    public static final int maxShort = 65535;\n+\n+    \/** valid: {@value \"%5.2f\"} *\/\n+    public static final double pi = 3.14159265358979323846;\n+\n+    \/** invalid format: {@value %%04x} *\/\n+    public static final int f3 = 0;\n+\n+    \/** invalid format: {@value \"04x\"} *\/\n+    public static final int f4 = 0;\n","filename":"test\/langtools\/tools\/doclint\/ValueTest.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -22,1 +22,7 @@\n-7 errors\n+ValueTest.java:75: error: invalid format: %%04x\n+    \/** invalid format: {@value %%04x} *\/\n+                                ^\n+ValueTest.java:78: error: invalid format: \"04x\"\n+    \/** invalid format: {@value \"04x\"} *\/\n+                                ^\n+9 errors\n","filename":"test\/langtools\/tools\/doclint\/ValueTest.out","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -702,0 +702,1 @@\n+                print(\"format\", node.getFormat());\n","filename":"test\/langtools\/tools\/javac\/doctree\/DocCommentTester.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+      format: null\n@@ -62,0 +63,1 @@\n+      format: null\n@@ -79,0 +81,1 @@\n+      format: null\n@@ -105,0 +108,73 @@\n+    \/**\n+     * abc {@value %d java.awt.Color#RED}\n+     *\/\n+    int format_plain() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 2\n+    Text[TEXT, pos:1, abc_]\n+    Value[VALUE, pos:5\n+      format:\n+        Text[TEXT, pos:13, %d]\n+      reference:\n+        Reference[REFERENCE, pos:16, java.awt.Color#RED]\n+    ]\n+  body: empty\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     * abc {@value \"%d\" java.awt.Color#RED}\n+     *\/\n+    int format_quoted() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 2\n+    Text[TEXT, pos:1, abc_]\n+    Value[VALUE, pos:5\n+      format:\n+        Text[TEXT, pos:13, \"%d\"]\n+      reference:\n+        Reference[REFERENCE, pos:18, java.awt.Color#RED]\n+    ]\n+  body: empty\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     * abc {@value 0x%x4 java.awt.Color#RED}\n+     *\/\n+    int format_invalid() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 3\n+    Text[TEXT, pos:1, abc_]\n+    Erroneous[ERRONEOUS, pos:5, prefPos:13\n+      code: compiler.err.dc.ref.unexpected.input\n+      body: {@value_0x%x4\n+    ]\n+    Text[TEXT, pos:18, _java.awt.Color#RED}]\n+  body: empty\n+  block tags: empty\n+]\n+*\/\n+\n+    \/**\n+     * abc {@value \"%d\" java.awt.Color#RED junk}\n+     *\/\n+    int format_trailing_junk() { }\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 3\n+    Text[TEXT, pos:1, abc_]\n+    Erroneous[ERRONEOUS, pos:5, prefPos:37\n+      code: compiler.err.dc.unexpected.content\n+      body: {@value_\"%d\"_jav...a.awt.Color#RED_j\n+    ]\n+    Text[TEXT, pos:38, unk}]\n+  body: empty\n+  block tags: empty\n+]\n+*\/\n","filename":"test\/langtools\/tools\/javac\/doctree\/ValueTest.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1189,0 +1189,1 @@\n+            printDocTree(\"format\", node.getFormat());\n","filename":"test\/langtools\/tools\/javac\/lib\/DPrinter.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}