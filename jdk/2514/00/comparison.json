{"files":[{"patch":"@@ -2766,1 +2766,0 @@\n-    \/\/ store result (unaligned)\n@@ -2768,3 +2767,8 @@\n-    __ lvsl            (toPerm, to);\n-#else\n-    __ lvsr            (toPerm, to);\n+    \/\/ Swap Bytes\n+    \/\/ toPerm = 0x0F0E0D0C0B0A09080706050403020100\n+    __ li(temp, 0);\n+    __ vspltisb(vTmp1, 0xf);\n+    __ lvsl(vTmp2, temp);\n+    __ vxor(toPerm, vTmp1, vTmp2);\n+\n+    __ vperm(vRet, vRet, vRet, toPerm);\n@@ -2772,15 +2776,8 @@\n-    __ vspltisb        (vTmp3, -1);\n-    __ vspltisb        (vTmp4, 0);\n-    __ lvx             (vTmp1, to);\n-    __ lvx             (vTmp2, fifteen, to);\n-#ifdef VM_LITTLE_ENDIAN\n-    __ vperm           (vTmp3, vTmp3, vTmp4, toPerm); \/\/ generate select mask\n-    __ vxor            (toPerm, toPerm, fSplt);       \/\/ swap bytes\n-#else\n-    __ vperm           (vTmp3, vTmp4, vTmp3, toPerm); \/\/ generate select mask\n-#endif\n-    __ vperm           (vTmp4, vRet, vRet, toPerm);   \/\/ rotate data\n-    __ vsel            (vTmp2, vTmp4, vTmp2, vTmp3);\n-    __ vsel            (vTmp1, vTmp1, vTmp4, vTmp3);\n-    __ stvx            (vTmp2, fifteen, to);          \/\/ store this one first (may alias)\n-    __ stvx            (vTmp1, to);\n+\n+    \/\/ store result (unaligned)\n+    Register lo = temp, hi = fifteen; \/\/ Reuse\n+    __ vsldoi          (vTmp1, vRet, vRet, 8);\n+    __ mfvrd           (hi, vRet);\n+    __ mfvrd           (lo, vTmp1);\n+    __ std             (hi, 0 LITTLE_ENDIAN_ONLY(+ 8), to);\n+    __ std             (lo, 0 BIG_ENDIAN_ONLY(+ 8), to);\n@@ -3003,1 +3000,0 @@\n-    \/\/ store result (unaligned)\n@@ -3005,3 +3001,8 @@\n-    __ lvsl            (toPerm, to);\n-#else\n-    __ lvsr            (toPerm, to);\n+    \/\/ Swap Bytes\n+    \/\/ toPerm = 0x0F0E0D0C0B0A09080706050403020100\n+    __ li(temp, 0);\n+    __ vspltisb(vTmp1, 0xf);\n+    __ lvsl(vTmp2, temp);\n+    __ vxor(toPerm, vTmp1, vTmp2);\n+\n+    __ vperm(vRet, vRet, vRet, toPerm);\n@@ -3009,15 +3010,8 @@\n-    __ vspltisb        (vTmp3, -1);\n-    __ vspltisb        (vTmp4, 0);\n-    __ lvx             (vTmp1, to);\n-    __ lvx             (vTmp2, fifteen, to);\n-#ifdef VM_LITTLE_ENDIAN\n-    __ vperm           (vTmp3, vTmp3, vTmp4, toPerm); \/\/ generate select mask\n-    __ vxor            (toPerm, toPerm, fSplt);       \/\/ swap bytes\n-#else\n-    __ vperm           (vTmp3, vTmp4, vTmp3, toPerm); \/\/ generate select mask\n-#endif\n-    __ vperm           (vTmp4, vRet, vRet, toPerm);   \/\/ rotate data\n-    __ vsel            (vTmp2, vTmp4, vTmp2, vTmp3);\n-    __ vsel            (vTmp1, vTmp1, vTmp4, vTmp3);\n-    __ stvx            (vTmp2, fifteen, to);          \/\/ store this one first (may alias)\n-    __ stvx            (vTmp1, to);\n+\n+    \/\/ store result (unaligned)\n+    Register lo = temp, hi = fifteen; \/\/ Reuse\n+    __ vsldoi          (vTmp1, vRet, vRet, 8);\n+    __ mfvrd           (hi, vRet);\n+    __ mfvrd           (lo, vTmp1);\n+    __ std             (hi, 0 LITTLE_ENDIAN_ONLY(+ 8), to);\n+    __ std             (lo, 0 BIG_ENDIAN_ONLY(+ 8), to);\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":32,"deletions":38,"binary":false,"changes":70,"status":"modified"}]}