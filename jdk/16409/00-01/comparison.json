{"files":[{"patch":"@@ -497,0 +497,4 @@\n+  void* operator new(size_t size, void* ptr) {\n+    return ptr;\n+  }\n+\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -409,3 +409,2 @@\n-  template<typename Filler = decltype(default_fill),\n-           ENABLE_IF(std::is_function<Filler>::value)>\n-  E at_grow(int i, Filler filler = default_fill) {\n+  template<typename... Args >\n+  E at_grow(int i, Args... args) {\n@@ -416,13 +415,1 @@\n-        filler(&this->_data[j]);\n-      this->_len = i + 1;\n-    }\n-    return this->_data[i];\n-  }\n-  template<typename Filler,\n-           ENABLE_IF(!std::is_function<Filler>::value)>\n-  E at_grow(int i, Filler fill) {\n-    assert(0 <= i, \"negative index %d\", i);\n-    if (i >= this->_len) {\n-      if (i >= this->_capacity) grow(i);\n-      for (int j = this->_len; j <= i; j++)\n-        this->_data[j] = fill;\n+        new (&this->_data[j]) E(args...);\n@@ -434,3 +421,2 @@\n-  template<typename Filler = decltype(default_fill),\n-           ENABLE_IF(std::is_function<Filler>::value)>\n-  void at_put_grow(int i, const E& elem, Filler filler = default_fill) {\n+  template<typename... Args>\n+  void at_put_grow(int i, const E& elem, Args... args) {\n@@ -441,1 +427,1 @@\n-        filler(&this->_data[j]);\n+        new (&this->_data[j]) E(args...);\n@@ -447,13 +433,0 @@\n-  template<typename Filler,\n-           ENABLE_IF(!std::is_function<Filler>::value)>\n-  void at_put_grow(int i, const E& elem, Filler fill) {\n-    assert(0 <= i, \"negative index %d\", i);\n-    if (i >= this->_len) {\n-      if (i >= this->_capacity) grow(i);\n-      for (int j = this->_len; j < i; j++)\n-        this->_data[j] = fill;\n-      this->_len = i + 1;\n-    }\n-    this->_data[i] = elem;\n-  }\n-\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":6,"deletions":33,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -604,0 +604,40 @@\n+\n+struct Elt {\n+  static int copy_calls;\n+  const char* str; int x;\n+\n+  Elt(const Elt& e)\n+    : str(e.str), x(e.x) {\n+    copy_calls++;\n+  }\n+  Elt(Elt&&) = default;\n+  Elt& operator=(const Elt&) = default;\n+  Elt& operator=(Elt&&) = default;\n+  Elt() {\n+  }\n+  Elt(const char* str, int x)\n+    : str(str),\n+      x(x) {\n+  }\n+};\n+int Elt::copy_calls = 0;\n+\n+TEST(GrowableArrayCHeap, ShouldBeAbleToGrowWithoutCopying) {\n+  Elt::copy_calls = 0;\n+  GrowableArrayCHeap<Elt, mtTest> arr;\n+  arr.at_put_grow(16, Elt{\"final_elt\", 16}, \"earlier_elt\", 1);\n+  for (int i = 0; i < 16; i++) {\n+    ASSERT_STREQ(arr.at(i).str, \"earlier_elt\");\n+    ASSERT_EQ(arr.at(i).x, 1);\n+  }\n+  ASSERT_STREQ(arr.at(16).str, \"final_elt\");\n+  ASSERT_EQ(arr.at(16).x, 16);\n+  ASSERT_EQ(Elt::copy_calls, 0);\n+}\n+TEST(GrowableArrayCHeap, ShouldBeAbleToGrowByCopying) {\n+  Elt::copy_calls = 0;\n+  GrowableArrayCHeap<Elt, mtTest> arr{0};\n+  arr.at_put_grow(16, Elt{\"final_elt\", 16}, Elt{});\n+  ASSERT_GE(Elt::copy_calls, 16);\n+}\n+\n","filename":"test\/hotspot\/gtest\/utilities\/test_growableArray.cpp","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"}]}