{"files":[{"patch":"@@ -181,1 +181,1 @@\n-    _bci2block_successors.at_put_grow(cur_bci, BlockList());\n+    _bci2block_successors.at_put_grow(cur_bci, BlockList(), BlockList());\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -496,1 +496,2 @@\n- public:\n+public:\n+\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -405,1 +405,2 @@\n-  E at_grow(int i, const E& fill = E()) {\n+  template<typename... Args >\n+  E& at_grow(int i, const Args&... args) {\n@@ -409,3 +410,5 @@\n-      for (int j = this->_len; j <= i; j++)\n-        this->_data[j] = fill;\n-      this->_len = i+1;\n+      for (int j = this->_len; j <= i; j++) {\n+        this->_data[j].~E();\n+        ::new (&this->_data[j]) E(args...);\n+      }\n+      this->_len = i + 1;\n@@ -416,1 +419,2 @@\n-  void at_put_grow(int i, const E& elem, const E& fill = E()) {\n+  template<typename... Args>\n+  void at_put_grow(int i, const E& elem, const Args&... args) {\n@@ -420,2 +424,4 @@\n-      for (int j = this->_len; j < i; j++)\n-        this->_data[j] = fill;\n+      for (int j = this->_len; j < i; j++) {\n+        this->_data[j].~E();\n+        ::new (&this->_data[j]) E(args...);\n+      }\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -604,0 +604,40 @@\n+\n+struct Elt {\n+  static int copy_calls;\n+  const char* str; int x;\n+\n+  Elt(const Elt& e)\n+    : str(e.str), x(e.x) {\n+    copy_calls++;\n+  }\n+  Elt(Elt&&) = default;\n+  Elt& operator=(const Elt&) = default;\n+  Elt& operator=(Elt&&) = default;\n+  Elt() {\n+  }\n+  Elt(const char* str, int x)\n+    : str(str),\n+      x(x) {\n+  }\n+};\n+int Elt::copy_calls = 0;\n+\n+TEST(GrowableArrayCHeap, ShouldBeAbleToGrowWithoutCopying) {\n+  Elt::copy_calls = 0;\n+  GrowableArrayCHeap<Elt, mtTest> arr;\n+  arr.at_put_grow(16, Elt{\"final_elt\", 16}, \"earlier_elt\", 1);\n+  for (int i = 0; i < 16; i++) {\n+    ASSERT_STREQ(arr.at(i).str, \"earlier_elt\");\n+    ASSERT_EQ(arr.at(i).x, 1);\n+  }\n+  ASSERT_STREQ(arr.at(16).str, \"final_elt\");\n+  ASSERT_EQ(arr.at(16).x, 16);\n+  ASSERT_EQ(Elt::copy_calls, 0);\n+}\n+TEST(GrowableArrayCHeap, ShouldBeAbleToGrowByCopying) {\n+  Elt::copy_calls = 0;\n+  GrowableArrayCHeap<Elt, mtTest> arr{0};\n+  arr.at_put_grow(16, Elt{\"final_elt\", 16}, Elt{\"\",0});\n+  ASSERT_GE(Elt::copy_calls, 16);\n+}\n+\n","filename":"test\/hotspot\/gtest\/utilities\/test_growableArray.cpp","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"}]}