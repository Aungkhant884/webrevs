{"files":[{"patch":"@@ -328,1 +328,1 @@\n-  if  (for_young_only_phase || !enough_samples_available(_mixed_pending_cards_seq)) {\n+  if (for_young_only_phase || !enough_samples_available(_mixed_pending_cards_seq)) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Analytics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -812,5 +812,1 @@\n-    \/\/ The threshold for the number of cards in a given sampling which we consider\n-    \/\/ large enough so that the impact from setup and other costs is negligible.\n-    size_t const CardsNumSamplingThreshold = 10;\n-\n-    if (total_cards_merged > CardsNumSamplingThreshold) {\n+    if (total_cards_merged >= G1NumCardsCostSampleThreshold) {\n@@ -829,1 +825,1 @@\n-    if (total_cards_scanned > CardsNumSamplingThreshold) {\n+    if (total_cards_scanned >= G1NumCardsCostSampleThreshold) {\n@@ -997,0 +993,27 @@\n+<<<<<<< HEAD\n+double G1Policy::predict_base_time_ms(size_t pending_cards,\n+                                      size_t rs_length) const {\n+  \/\/ Assume that all cards from the log buffers will be scanned, i.e. there are no\n+  \/\/ duplicates in that set.\n+  size_t effective_scanned_cards = _analytics->predict_scan_card_num(rs_length, collector_state()->in_young_only_phase()) + pending_cards;\n+\n+  double card_merge_time = _analytics->predict_card_merge_time_ms(pending_cards + rs_length, collector_state()->in_young_only_phase());\n+  double card_scan_time = _analytics->predict_card_scan_time_ms(effective_scanned_cards, collector_state()->in_young_only_phase());\n+  double constant_other_time = _analytics->predict_constant_other_time_ms();\n+  double survivor_evac_time = predict_survivor_regions_evac_time();\n+\n+  double total_time = card_merge_time + card_scan_time + constant_other_time + survivor_evac_time;\n+\n+  log_trace(gc, ergo, heap)(\"Predicted base time: total %f lb_cards %zu rs_length %zu effective_scanned_cards %zu card_merge_time %f card_scan_time %f constant_other_time %f survivor_evac_time %f\",\n+                            total_time, pending_cards, rs_length, effective_scanned_cards, card_merge_time, card_scan_time, constant_other_time, survivor_evac_time);\n+  return total_time;\n+||||||| 97f1321cb45\n+double G1Policy::predict_base_elapsed_time_ms(size_t pending_cards,\n+                                              size_t rs_length) const {\n+  size_t effective_scanned_cards = _analytics->predict_scan_card_num(rs_length, collector_state()->in_young_only_phase());\n+  return\n+    _analytics->predict_card_merge_time_ms(pending_cards + rs_length, collector_state()->in_young_only_phase()) +\n+    _analytics->predict_card_scan_time_ms(effective_scanned_cards, collector_state()->in_young_only_phase()) +\n+    _analytics->predict_constant_other_time_ms() +\n+    predict_survivor_regions_evac_time();\n+=======\n@@ -1018,0 +1041,1 @@\n+>>>>>>> 312985eea6237d75fae0f3c0cceb4f16e18b73b4\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":30,"deletions":6,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -380,0 +380,5 @@\n+  product(uint, G1NumCardsCostSampleThreshold, 1000, DIAGNOSTIC,            \\\n+          \"Threshold for the number of cards when reporting card cost \"     \\\n+          \"related prediction sample. That sample must involve the same or \"\\\n+          \"more than that number of cards to be used.\")                     \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/g1\/g1_globals.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}