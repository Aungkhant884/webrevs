{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-            return new Integer(id).compareTo(new Integer(f.id));\n+            return Integer.valueOf(id).compareTo(Integer.valueOf(f.id));\n","filename":"test\/lib-test\/jdk\/test\/lib\/AssertsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+        @SuppressWarnings(\"deprecation\")\n","filename":"test\/lib-test\/jdk\/test\/lib\/TestPlatformIsTieredSupported.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -277,0 +277,1 @@\n+            public int hashCode() { return value.hashCode(); }\n@@ -366,1 +367,1 @@\n-            ArrayDiff diff;\n+            ArrayDiff<?> diff;\n","filename":"test\/lib-test\/jdk\/test\/lib\/format\/ArrayDiffTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+        @SuppressWarnings(\"deprecation\")\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/OldWhiteBox.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-            new VmFlagTest(existentFlag, set, get, true).test(tests, results);\n+            new VmFlagTest<T>(existentFlag, set, get, true).test(tests, results);\n@@ -77,1 +77,1 @@\n-        new VmFlagTest(NONEXISTENT_FLAG, set, get, false).test(tests, results);\n+        new VmFlagTest<T>(NONEXISTENT_FLAG, set, get, false).test(tests, results);\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/vm_flags\/VmFlagTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    public static void redefineClass(Class clazz, String javacode) throws Exception {\n+    public static void redefineClass(Class<?> clazz, String javacode) throws Exception {\n@@ -61,1 +61,1 @@\n-    public static void redefineClass(Class clazz, byte[] bytecode) throws Exception {\n+    public static void redefineClass(Class<?> clazz, byte[] bytecode) throws Exception {\n","filename":"test\/lib\/RedefineClassHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -454,0 +454,1 @@\n+    @SuppressWarnings(\"removal\")\n","filename":"test\/lib\/jdk\/test\/lib\/NetworkConfiguration.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import javax.tools.JavaFileManager;\n@@ -109,1 +110,1 @@\n-    private static class FileManagerWrapper extends ForwardingJavaFileManager {\n+    private static class FileManagerWrapper extends ForwardingJavaFileManager<JavaFileManager> {\n","filename":"test\/lib\/jdk\/test\/lib\/compiler\/InMemoryJavaCompiler.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -144,1 +144,1 @@\n-    public static ArrayCodec of(Object array) {\n+    public static ArrayCodec<?> of(Object array) {\n","filename":"test\/lib\/jdk\/test\/lib\/format\/ArrayCodec.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,1 +96,1 @@\n-    public static ArrayDiff of(Object first, Object second) {\n+    public static ArrayDiff<?> of(Object first, Object second) {\n@@ -112,1 +112,2 @@\n-    public static ArrayDiff of(Object first, Object second, int width, int contextBefore) {\n+    @SuppressWarnings(\"rawtypes\")\n+    public static ArrayDiff<?> of(Object first, Object second, int width, int contextBefore) {\n@@ -207,1 +208,0 @@\n-\n","filename":"test\/lib\/jdk\/test\/lib\/format\/ArrayDiff.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -629,0 +629,1 @@\n+    @SuppressWarnings(\"deprecation\")\n","filename":"test\/lib\/jdk\/test\/lib\/hexdump\/ASN1Formatter.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -168,0 +168,1 @@\n+    @SuppressWarnings(\"deprecation\")\n","filename":"test\/lib\/jdk\/test\/lib\/hexdump\/StreamDump.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -116,2 +116,2 @@\n-    private Map<String,String> prop = new HashMap();\n-    private Map<String,String> secprop = new HashMap();\n+    private Map<String,String> prop = new HashMap<>();\n+    private Map<String,String> secprop = new HashMap<>();\n","filename":"test\/lib\/jdk\/test\/lib\/process\/Proc.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -435,0 +435,1 @@\n+    @SuppressWarnings(\"removal\")\n@@ -607,0 +608,1 @@\n+    @SuppressWarnings(\"removal\")\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.io;\n+\n+import org.openjdk.bench.java.io.BlackholedOutputStream;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectInputFilter;\n+import java.io.ObjectInputFilter.Status;\n+import java.io.ObjectOutputStream;\n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class SerialFilterOverhead {\n+\n+    private byte[] bytes;\n+    private int count;\n+    @Setup\n+    public void setup(Blackhole bh) throws IOException {\n+        count = 10;\n+        bytes = serialize(count, new Class1());\n+    }\n+\n+    @TearDown\n+    public void teardown() throws IOException {\n+        bytes = null;\n+    }\n+\n+    @Benchmark\n+    public void readNoFilter() throws IOException, ClassNotFoundException {\n+        deserialize(count, bytes, null);\n+    }\n+\n+    @Benchmark\n+    public void readSerialFilter() throws IOException, ClassNotFoundException {\n+        deserialize(count, bytes, new Filter());\n+    }\n+\n+    @Benchmark\n+    public void readNanoTimeFilter() throws IOException, ClassNotFoundException {\n+        deserialize(count, bytes, new NanoTimeFilter());\n+    }\n+\n+    private static void deserialize(int count, byte[] bytes, ObjectInputFilter filter)\n+            throws IOException, ClassNotFoundException {\n+        try (ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes))) {\n+            if (filter != null)\n+                ois.setObjectInputFilter(filter);\n+            for (int i = 0; i < count; i++) {\n+                Object o = ois.readObject();\n+            }\n+        }\n+    }\n+\n+    private static byte[] serialize(int count, Object o) throws IOException {\n+        try (ByteArrayOutputStream ba = new ByteArrayOutputStream();\n+            ObjectOutputStream oos = new ObjectOutputStream(ba)) {\n+            for (int i = 0; i < count; i++) {\n+                oos.writeObject(o);\n+            }\n+            return ba.toByteArray();\n+        }\n+    }\n+\n+\n+    \/\/ A class with three fields.\n+    public static class Class1 implements Serializable {\n+        private static final long serialVersionUID = 2L;\n+        private String string;\n+        private long longValue;\n+        private Integer integer;\n+\n+        public Class1() {\n+            this.string = \"now is the time\";\n+            this.longValue = 12345L;\n+            this.integer = 17;\n+        }\n+    }\n+\n+    static class Filter implements ObjectInputFilter {\n+        public Status checkInput(FilterInfo info) {\n+            return Status.ALLOWED;\n+        }\n+    }\n+\n+    static class NanoTimeFilter implements ObjectInputFilter {\n+        public Status checkInput(FilterInfo info) {\n+            long t = System.nanoTime();\n+            return Status.ALLOWED;\n+        }\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/SerialFilterOverhead.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}