{"files":[{"patch":"@@ -82,1 +82,0 @@\n-vmTestbase\/nsk\/jdb\/kill\/kill001\/kill001.java        8306467 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList-Virtual.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,1 +103,0 @@\n-        boolean vthreadMode = \"Virtual\".equals(System.getProperty(\"main.wrapper\"));\n@@ -108,0 +107,7 @@\n+        \/\/ Issue a jdb \"catch all\" command for each exception type that will be thrown.\n+        \/\/ This will force jdb to stop when the exception is thrown.\n+        for (int i = 0; i < kill001a.exceptions.length; i++) {\n+            String className = kill001a.exceptions[i].getClass().getName();\n+            reply = jdb.receiveReplyFor(JdbCommand._catch + \"all \" + className);\n+        }\n+\n@@ -121,2 +127,0 @@\n-            \/\/ kill (ThreadReference.stop) is not supproted for vthreads, so we expect an error.\n-            String msg = (vthreadMode ? \"Operation is not supported\" : \"killed\");\n@@ -125,1 +129,1 @@\n-                                                       msg);\n+                                                       \"killed\");\n@@ -132,6 +136,3 @@\n-        \/\/ Continue each of the threads that received the \"kill\" exception. Not needed\n-        \/\/ for the vthread case since they are not actually killed.\n-        if (!vthreadMode) {\n-            for (int i = 0; i < numThreads; i++) {\n-                reply = jdb.receiveReplyFor(JdbCommand.cont);\n-            }\n+        \/\/ Continue each of the threads that received the \"kill\" exception.\n+        for (int i = 0; i < numThreads; i++) {\n+            reply = jdb.receiveReplyFor(JdbCommand.cont);\n@@ -152,6 +153,1 @@\n-            if (vthreadMode) {\n-                if (found.indexOf(DEBUGGEE_RESULT + \" = \" + numThreads) < 0) {\n-                    log.complain(\"Some \" + MYTHREAD + \"s were killed. \" + found + \" remaining\");\n-                    success = false;\n-                }\n-            } else if (found.indexOf(DEBUGGEE_RESULT + \" = 0\") < 0) {\n+            if (found.indexOf(DEBUGGEE_RESULT + \" = 0\") < 0) {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdb\/kill\/kill001\/kill001.java","additions":13,"deletions":17,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,0 @@\n-    static boolean vthreadMode           = \"Virtual\".equals(System.getProperty(\"main.wrapper\"));\n@@ -61,1 +60,1 @@\n-                                          };\n+    };\n@@ -65,1 +64,0 @@\n-\n@@ -75,1 +73,1 @@\n-            holder[i] = JDIThreadFactory.newThread(new MyThread(name), name);\n+            holder[i] = JDIThreadFactory.newThread(new MyThread(name, exceptions[i]), name);\n@@ -99,7 +97,1 @@\n-                if (vthreadMode) {\n-                    \/\/ vthreads will exit on their own without being killed, so just wait for them to exit.\n-                    try {\n-                        holder[i].join();\n-                    } catch (InterruptedException e) {\n-                    }\n-                } else if (holder[i].isAlive()) {\n+                if (holder[i].isAlive()) {\n@@ -112,1 +104,1 @@\n-                        log.display(\"Main thread was interrupted while waiting for killing of \" + MYTHREAD + \"-\" + i);\n+                        log.complain(\"Main thread was interrupted while waiting for killing of \" + MYTHREAD + \"-\" + i);\n@@ -116,1 +108,1 @@\n-            if (!waited || vthreadMode) {\n+            if (!waited) {\n@@ -125,1 +117,1 @@\n-                log.display(\"Debuggee FAILED - thread \" + i + \" is alive\");\n+                log.complain(\"Debuggee FAILED - thread \" + i + \" is alive\");\n@@ -133,0 +125,1 @@\n+}\n@@ -134,4 +127,3 @@\n-    static class MyException extends Exception {\n-        MyException (String message) {\n-            super(message);\n-        }\n+class MyException extends Exception {\n+    MyException (String message) {\n+        super(message);\n@@ -141,1 +133,0 @@\n-\n@@ -144,0 +135,1 @@\n+    Throwable expectedException;\n@@ -145,1 +137,1 @@\n-    public MyThread (String n) {\n+    public MyThread(String n, Throwable e) {\n@@ -147,0 +139,1 @@\n+        expectedException = e;\n@@ -150,0 +143,2 @@\n+        boolean killed = false;\n+\n@@ -151,1 +146,1 @@\n-        String ThreadFinished = \"WARNING: Thread finished: \" + this.name;\n+        String ThreadFinished = \"Thread finished: \" + this.name;\n@@ -153,0 +148,3 @@\n+        String CaughtExpected =\"Thread \" + this.name + \" caught expected async exception: \" + expectedException;\n+        String CaughtUnexpected = \"WARNING: Thread \" + this.name + \" caught unexpected exception:\";\n+\n@@ -162,2 +160,0 @@\n-        \/\/ Note vthreads need a short sleep because they will never receive the kill,\n-        \/\/ and therefore sleep the full time, resulting in a test timeout if too long.\n@@ -165,1 +161,1 @@\n-            Thread.currentThread().sleep(kill001a.vthreadMode ? 10000 : kill001a.waitTime);\n+            Thread.currentThread().sleep(kill001a.waitTime);\n@@ -169,0 +165,9 @@\n+        } catch (Throwable t) {\n+            if (t == expectedException) {\n+                kill001a.log.display(CaughtExpected);\n+                killed = true;\n+            } else {\n+                kill001a.log.display(CaughtUnexpected);\n+                kill001a.log.display(t);\n+                t.printStackTrace(kill001a.log.getOutStream());\n+            }\n@@ -171,3 +176,5 @@\n-        \/\/ Need to make sure the increment is atomic\n-        synchronized (kill001a.lock) {\n-            kill001a.notKilled++;\n+        if (!killed) {\n+            \/\/ Need to make sure the increment is atomic\n+            synchronized (kill001a.lock) {\n+                kill001a.notKilled++;\n+            }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdb\/kill\/kill001\/kill001a.java","additions":35,"deletions":28,"binary":false,"changes":63,"status":"modified"}]}