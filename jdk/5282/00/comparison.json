{"files":[{"patch":"@@ -2248,0 +2248,12 @@\n+void G1CollectedHeap::initiate_conc_gc_for_metadata_allocation(GCCause::Cause gc_cause) {\n+  GCCauseSetter x(this, gc_cause);\n+\n+  \/\/ At this point we are supposed to start a concurrent cycle. We\n+  \/\/ will do so if one is not already in progress.\n+  bool should_start = policy()->force_concurrent_start_if_outside_cycle(gc_cause);\n+  if (should_start) {\n+    double pause_target = policy()->max_pause_time_ms();\n+    do_collection_pause_at_safepoint(pause_target);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -140,1 +140,0 @@\n-  friend class VM_CollectForMetadataAllocation;\n@@ -1138,0 +1137,2 @@\n+  void initiate_conc_gc_for_metadata_allocation(GCCause::Cause gc_cause);\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -206,24 +206,0 @@\n-\/\/ Returns true iff concurrent GCs unloads metadata.\n-bool VM_CollectForMetadataAllocation::initiate_concurrent_GC() {\n-#if INCLUDE_G1GC\n-  if (UseG1GC && ClassUnloadingWithConcurrentMark) {\n-    G1CollectedHeap* g1h = G1CollectedHeap::heap();\n-    g1h->policy()->collector_state()->set_initiate_conc_mark_if_possible(true);\n-\n-    GCCauseSetter x(g1h, _gc_cause);\n-\n-    \/\/ At this point we are supposed to start a concurrent cycle. We\n-    \/\/ will do so if one is not already in progress.\n-    bool should_start = g1h->policy()->force_concurrent_start_if_outside_cycle(_gc_cause);\n-\n-    if (should_start) {\n-      double pause_target = g1h->policy()->max_pause_time_ms();\n-      g1h->do_collection_pause_at_safepoint(pause_target);\n-    }\n-    return true;\n-  }\n-#endif\n-\n-  return false;\n-}\n-\n@@ -246,1 +222,3 @@\n-  if (initiate_concurrent_GC()) {\n+#if INCLUDE_G1GC\n+  if (UseG1GC && ClassUnloadingWithConcurrentMark) {\n+    G1CollectedHeap::heap()->initiate_conc_gc_for_metadata_allocation(_gc_cause);\n@@ -255,0 +233,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shared\/gcVMOperations.cpp","additions":4,"deletions":25,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -247,2 +247,0 @@\n-\n-  bool initiate_concurrent_GC();\n","filename":"src\/hotspot\/share\/gc\/shared\/gcVMOperations.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}