{"files":[{"patch":"@@ -193,7 +193,0 @@\n-                   \/\/ evaluate possible precedence of flushException over closeException\n-                   if ((flushException instanceof ThreadDeath) &&\n-                       !(closeException instanceof ThreadDeath)) {\n-                       flushException.addSuppressed(closeException);\n-                       throw (ThreadDeath) flushException;\n-                   }\n-\n@@ -203,1 +196,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/io\/FilterOutputStream.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2433,2 +2433,0 @@\n-                    ThreadDeath t = null;\n-                    boolean reset = false;\n@@ -2453,13 +2451,4 @@\n-                        do {\n-                            try {\n-                                curContext.setUsed();\n-                                if (oldContext!= null)\n-                                    oldContext.check();\n-                                curContext = oldContext;\n-                                reset = true;\n-                            } catch (ThreadDeath x) {\n-                                t = x;  \/\/ defer until reset is true\n-                            }\n-                        } while (!reset);\n-                        if (t != null)\n-                            throw t;\n+                        curContext.setUsed();\n+                        if (oldContext!= null)\n+                            oldContext.check();\n+                        curContext = oldContext;\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,3 +32,0 @@\n- * The {@code ThreadDeath} error, though a \"normal\" condition,\n- * is also a subclass of {@code Error} because most applications\n- * should not try to catch it.\n@@ -45,1 +42,0 @@\n- * @see     java.lang.ThreadDeath\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Error.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -182,10 +182,0 @@\n- *   <th scope=\"row\">stopThread<\/th>\n- *   <td>Stopping of threads via calls to the Thread {@code stop}\n- * method<\/td>\n- *   <td>This allows code to stop any thread in the system provided that it is\n- * already granted permission to access that thread.\n- * This poses as a threat, because that code may corrupt the system by\n- * killing existing threads.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/RuntimePermission.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -132,3 +132,1 @@\n-                if (t instanceof ThreadDeath td) {\n-                    throw td;\n-                }\n+                \/\/ ignore\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Shutdown.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1632,35 +1632,1 @@\n-     * Forces the thread to stop executing.\n-     * <p>\n-     * If there is a security manager installed, its {@code checkAccess}\n-     * method is called with {@code this}\n-     * as its argument. This may result in a\n-     * {@code SecurityException} being raised (in the current thread).\n-     * <p>\n-     * If this thread is different from the current thread (that is, the current\n-     * thread is trying to stop a thread other than itself), the\n-     * security manager's {@code checkPermission} method (with a\n-     * {@code RuntimePermission(\"stopThread\")} argument) is called in\n-     * addition.\n-     * Again, this may result in throwing a\n-     * {@code SecurityException} (in the current thread).\n-     * <p>\n-     * The thread represented by this thread is forced to stop whatever\n-     * it is doing abnormally and to throw a newly created\n-     * {@code ThreadDeath} object as an exception.\n-     * <p>\n-     * It is permitted to stop a thread that has not yet been started.\n-     * If the thread is eventually started, it immediately terminates.\n-     * <p>\n-     * An application should not normally try to catch\n-     * {@code ThreadDeath} unless it must do some extraordinary\n-     * cleanup operation (note that the throwing of\n-     * {@code ThreadDeath} causes {@code finally} clauses of\n-     * {@code try} statements to be executed before the thread\n-     * officially terminates).  If a {@code catch} clause catches a\n-     * {@code ThreadDeath} object, it is important to rethrow the\n-     * object so that the thread actually terminates.\n-     * <p>\n-     * The top-level error handler that reacts to otherwise uncaught\n-     * exceptions does not print out a message or otherwise notify the\n-     * application if the uncaught exception is an instance of\n-     * {@code ThreadDeath}.\n+     * Throws {@code UnsupportedOperationException}.\n@@ -1668,13 +1634,7 @@\n-     * @throws     SecurityException  if the current thread cannot\n-     *             modify this thread.\n-     * @throws     UnsupportedOperationException if invoked on a virtual thread\n-     * @see        #interrupt()\n-     * @see        #checkAccess()\n-     * @see        ThreadDeath\n-     * @see        ThreadGroup#uncaughtException(Thread,Throwable)\n-     * @see        SecurityManager#checkAccess(Thread)\n-     * @see        SecurityManager#checkPermission\n-     * @deprecated This method is inherently unsafe.  Stopping a thread with\n-     *       Thread.stop causes it to unlock all of the monitors that it\n-     *       has locked (as a natural consequence of the unchecked\n-     *       {@code ThreadDeath} exception propagating up the stack).  If\n+     * @throws  UnsupportedOperationException always\n+     *\n+     * @deprecated This method was originally specified to \"stop\" a victim\n+     *       thread by causing the victim thread to throw a {@link ThreadDeath}.\n+     *       It was inherently unsafe. Stopping a thread caused it to unlock\n+     *       all of the monitors that it had locked (as a natural consequence\n+     *       of the {@code ThreadDeath} exception propagating up the stack). If\n@@ -1682,3 +1642,3 @@\n-     *       an inconsistent state, the damaged objects become visible to\n-     *       other threads, potentially resulting in arbitrary behavior.  Many\n-     *       uses of {@code stop} should be replaced by code that simply\n+     *       an inconsistent state, the damaged objects became visible to\n+     *       other threads, potentially resulting in arbitrary behavior.\n+     *       Usages of {@code stop} should be replaced by code that simply\n@@ -1698,20 +1658,1 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            checkAccess();\n-            if (this != Thread.currentThread()) {\n-                security.checkPermission(SecurityConstants.STOP_THREAD_PERMISSION);\n-            }\n-        }\n-\n-        if (isVirtual())\n-            throw new UnsupportedOperationException();\n-\n-        \/\/ A zero status value corresponds to \"NEW\", it can't change to\n-        \/\/ not-NEW because we hold the lock.\n-        if (holder.threadStatus != 0) {\n-            resume(); \/\/ Wake up thread if it was suspended; no-op otherwise\n-        }\n-\n-        \/\/ The VM can handle all thread states\n-        stop0(new ThreadDeath());\n+        throw new UnsupportedOperationException();\n@@ -3097,1 +3038,0 @@\n-    private native void stop0(Object o);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":12,"deletions":72,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n- * An instance of {@code ThreadDeath} is thrown in the victim thread\n- * when the (deprecated) {@link Thread#stop()} method is invoked.\n+ * An instance of {@code ThreadDeath} was originally specified to be thrown\n+ * by a victim thread when \"stopped\" with {@link Thread#stop()}.\n@@ -32,13 +32,6 @@\n- * <p>An application should catch instances of this class only if it\n- * must clean up after being terminated asynchronously.  If\n- * {@code ThreadDeath} is caught by a method, it is important that it\n- * be rethrown so that the thread actually dies.\n- *\n- * <p>The {@linkplain ThreadGroup#uncaughtException top-level error\n- * handler} does not print out a message if {@code ThreadDeath} is\n- * never caught.\n- *\n- * <p>The class {@code ThreadDeath} is specifically a subclass of\n- * {@code Error} rather than {@code Exception}, even though it is a\n- * \"normal occurrence\", because many applications catch all\n- * occurrences of {@code Exception} and then discard the exception.\n+ * @deprecated {@link Thread#stop()} was originally specified to \"stop\" a victim\n+ *      thread by causing the victim thread to throw a {@code ThreadDeath}. It\n+ *      was inherently unsafe and deprecated in an early JDK release. The ability\n+ *      to \"stop\" a thread with {@code Thread.stop} has been removed and the\n+ *      {@code Thread.stop} method changed to throw an exception. Consequently,\n+ *      {@code ThreadDeath} is also deprecated, for removal.\n@@ -48,1 +41,1 @@\n-\n+@Deprecated(since=\"20\", forRemoval=true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ThreadDeath.java","additions":10,"deletions":17,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -677,6 +677,3 @@\n-     * <li>Otherwise, this method determines if the {@code Throwable}\n-     *     argument is an instance of {@link ThreadDeath}. If so, nothing\n-     *     special is done. Otherwise, a message containing the\n-     *     thread's name, as returned from the thread's {@link\n-     *     Thread#getName getName} method, and a stack backtrace,\n-     *     using the {@code Throwable}'s {@link\n+     * <li>Otherwise, a message containing the thread's name, as returned\n+     *     from the thread's {@link Thread#getName getName} method, and a\n+     *     stack backtrace, using the {@code Throwable}'s {@link\n@@ -702,3 +699,2 @@\n-            } else if (!(e instanceof ThreadDeath)) {\n-                System.err.print(\"Exception in thread \\\"\"\n-                                 + t.getName() + \"\\\" \");\n+            } else {\n+                System.err.print(\"Exception in thread \\\"\" + t.getName() + \"\\\" \");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ThreadGroup.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -181,1 +181,1 @@\n-            \/\/ method is inaccessible, or say ThreadDeath\/OutOfMemoryError\n+            \/\/ method is inaccessible, or say OutOfMemoryError\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/BootstrapMethodInvoker.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -338,1 +338,1 @@\n-            \/\/ method is inaccessible, or say ThreadDeath\/OutOfMemoryError\n+            \/\/ method is inaccessible, or say OutOfMemoryError\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/CallSite.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -128,4 +128,0 @@\n-    \/\/ java.lang.Thread\n-    public static final RuntimePermission STOP_THREAD_PERMISSION =\n-       new RuntimePermission(\"stopThread\");\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SecurityConstants.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-    {\"stop0\",            \"(\" OBJ \")V\", (void *)&JVM_StopThread},\n","filename":"src\/java.base\/share\/native\/libjava\/Thread.c","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -170,5 +170,0 @@\n-            } catch (ThreadDeath td) {\n-                \/\/XXX: if there isn't native code on the stack, the VM just\n-                \/\/kills the thread right away. Do we expect to catch it\n-                \/\/nevertheless?\n-                break;\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/LWToolkit.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -205,4 +205,0 @@\n-        catch (ThreadDeath death) {\n-            doDispatch = false;\n-            throw death;\n-        }\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/EventDispatchThread.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -201,7 +201,0 @@\n-        }\n-        catch (ThreadDeath td) {\n-            \/\/ Mark all the timers we contain as not being queued.\n-            for (DelayedTimer delayedTimer : queue) {\n-                delayedTimer.getTimer().cancelEvent();\n-            }\n-            throw td;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/TimerQueue.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -2389,5 +2389,0 @@\n-        } catch (ThreadDeath e) {\n-            errorContext();\n-            error(\"terminated\");\n-            e.printStackTrace();\n-            throw e;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/parser\/Parser.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -730,3 +730,0 @@\n-            } catch (ThreadDeath td) {\n-                XBaseWindow.ungrabInput();\n-                return;\n@@ -1997,2 +1994,0 @@\n-                } catch (ThreadDeath td) {\n-                    throw td;\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XToolkit.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2669,2 +2669,0 @@\n-            } catch (ThreadDeath death) {\n-                throw death;\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/LogManager.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1033,1 +1033,1 @@\n-             catch (VirtualMachineError | ThreadDeath vme) {\n+             catch (VirtualMachineError vme) {\n@@ -1049,1 +1049,1 @@\n-            catch (VirtualMachineError | ThreadDeath vme) {\n+            catch (VirtualMachineError vme) {\n@@ -1065,1 +1065,1 @@\n-            catch (VirtualMachineError | ThreadDeath vme) {\n+            catch (VirtualMachineError vme) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serialize\/DOMSerializerImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -264,4 +264,0 @@\n-                        if (t instanceof ThreadDeath) {\n-                            ThreadDeath td = (ThreadDeath)t;\n-                            throw td;\n-                        }\n","filename":"src\/jdk.attach\/share\/classes\/com\/sun\/tools\/attach\/spi\/AttachProvider.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,3 +78,0 @@\n-            if (t instanceof ThreadDeath) {\n-                throw (ThreadDeath)t;\n-            }\n@@ -104,3 +101,1 @@\n-                if (t instanceof ThreadDeath) {\n-                    throw (ThreadDeath)t;\n-                }\n+                \/\/ ignore\n@@ -141,4 +136,0 @@\n-            if (t instanceof ThreadDeath) {\n-                ThreadDeath td = (ThreadDeath)t;\n-                throw td;\n-            }\n","filename":"src\/jdk.attach\/share\/classes\/sun\/tools\/attach\/HotSpotAttachProvider.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -102,6 +102,1 @@\n-            } catch (ThreadDeath x) {\n-                throw x;\n-            } catch (Exception x) {\n-                System.err.println(x);\n-                continue;\n-            } catch (Error x) {\n+            } catch (Exception | Error x) {\n@@ -131,6 +126,1 @@\n-            } catch (ThreadDeath x) {\n-                throw x;\n-            } catch (Exception x) {\n-                System.err.println(x);\n-                continue;\n-            } catch (Error x) {\n+            } catch (Exception | Error x) {\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/tools\/jdi\/VirtualMachineManagerImpl.java","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -117,0 +117,1 @@\n+    @SuppressWarnings(\"removal\")\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/LocalExecutionControl.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -163,1 +163,1 @@\n-    @SuppressWarnings(\"serial\")             \/\/ serialVersionUID intentionally omitted\n+    @SuppressWarnings({\"serial\", \"removal\"})       \/\/ serialVersionUID intentionally omitted\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/RemoteExecutionControl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8289610\n+ * @summary Test Thread.stop throws UnsupportedOperationException\n+ * @run testng StopTest\n+ *\/\n+\n+import java.time.Duration;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.LockSupport;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+public class StopTest {\n+\n+    \/**\n+     * Test stop on the current thread.\n+     *\/\n+    @Test\n+    public void testCurrentThread() {\n+        var thread = Thread.currentThread();\n+        assertThrows(UnsupportedOperationException.class, thread::stop);\n+    }\n+\n+    \/**\n+     * Test stop on an unstarted thread.\n+     *\/\n+    @Test\n+    public void testUnstartedThread() {\n+        Thread thread = new Thread(() -> { });\n+        assertThrows(UnsupportedOperationException.class, thread::stop);\n+        assertTrue(thread.getState() == Thread.State.NEW);\n+    }\n+\n+    \/**\n+     * Test stop on a thread spinning in a loop.\n+     *\/\n+    @Test\n+    public void testRunnableThread() throws Exception {\n+        AtomicBoolean done = new AtomicBoolean();\n+        Thread thread = new Thread(() -> {\n+            while (!done.get()) {\n+                Thread.onSpinWait();\n+            }\n+        });\n+        thread.start();\n+        try {\n+            assertThrows(UnsupportedOperationException.class, thread::stop);\n+\n+            \/\/ thread should not terminate\n+            boolean terminated = thread.join(Duration.ofMillis(500));\n+            assertFalse(terminated);\n+        } finally {\n+            done.set(true);\n+            thread.join();\n+        }\n+    }\n+\n+    \/**\n+     * Test stop on a thread that is parked.\n+     *\/\n+    @Test\n+    public void testWaitingThread() throws Exception {\n+        Thread thread = new Thread(LockSupport::park);\n+        thread.start();\n+        try {\n+            \/\/ wait for thread to park\n+            while ((thread.getState() != Thread.State.WAITING)) {\n+                Thread.sleep(10);\n+            }\n+            assertThrows(UnsupportedOperationException.class, thread::stop);\n+            assertTrue(thread.getState() == Thread.State.WAITING);\n+        } finally {\n+            LockSupport.unpark(thread);\n+            thread.join();\n+        }\n+    }\n+\n+    \/**\n+     * Test stop on a terminated thread.\n+     *\/\n+    @Test\n+    public void testTerminatedThread() throws Exception {\n+        Thread thread = new Thread(() -> { });\n+        thread.start();\n+        thread.join();\n+        assertThrows(UnsupportedOperationException.class, thread::stop);\n+        assertTrue(thread.getState() == Thread.State.TERMINATED);\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/StopTest.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"}]}