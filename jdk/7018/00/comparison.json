{"files":[{"patch":"@@ -423,3 +423,0 @@\n-  out->print_cr(\"  samplethreads      (Optional) Flag for activating thread sampling. This value cannot\");\n-  out->print_cr(\"                     be changed once JFR has been initialized. (BOOLEAN, true)\");\n-  out->print_cr(\"\");\n@@ -480,1 +477,0 @@\n-  jobject sample_threads = NULL;\n@@ -502,1 +498,7 @@\n-      sample_threads = JfrJavaSupport::new_java_lang_Boolean(_sample_threads.value(), CHECK);\n+      bool startup = DCmd_Source_Internal == source;\n+      if (startup) {\n+        log_warning(jfr,startup)(\"%s\", \"Option samplethreads is deprecated. Use -XX:StartFlightRecording:method-profiling=<off|normal|high|max>\");\n+      } else {\n+        output()->print_cr(\"%s\", \"Option samplethreads is deprecated. Use JFR.start method-profiling=<off|normal|high|max>\");\n+        output()->print_cr(\"\");\n+      }\n@@ -510,1 +512,1 @@\n-    \"Ljava\/lang\/Long;Ljava\/lang\/Boolean;)[Ljava\/lang\/String;\";\n+    \"Ljava\/lang\/Long;)[Ljava\/lang\/String;\";\n@@ -525,1 +527,0 @@\n-  execute_args.push_jobject(sample_threads);\n","filename":"src\/hotspot\/share\/jfr\/dcmd\/jfrDcmds.cpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -124,4 +124,0 @@\n-NO_TRANSITION(void, jfr_set_sample_threads(JNIEnv* env, jobject jvm, jboolean sampleThreads))\n-  JfrOptionSet::set_sample_threads(sampleThreads);\n-NO_TRANSITION_END\n-\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,2 +90,0 @@\n-void JNICALL jfr_set_sample_threads(JNIEnv* env, jobject jvm, jboolean sampleThreads);\n-\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n-      (char*)\"setSampleThreads\", (char*)\"(Z)V\", (void*)jfr_set_sample_threads,\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethodRegistration.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+\n@@ -121,8 +122,0 @@\n-bool JfrOptionSet::sample_threads() {\n-  return _sample_threads == JNI_TRUE;\n-}\n-\n-void JfrOptionSet::set_sample_threads(jboolean sample) {\n-  _sample_threads = sample;\n-}\n-\n@@ -318,1 +311,0 @@\n-jboolean JfrOptionSet::_sample_threads = JNI_TRUE;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrOptionSet.cpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-  static jboolean _sample_threads;\n@@ -71,2 +70,0 @@\n-  static bool sample_threads();\n-  static void set_sample_threads(jboolean sample);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrOptionSet.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1434,8 +1434,0 @@\n-.B \\f[CB]samplethreads=\\f[R]{\\f[CB]true\\f[R]|\\f[CB]false\\f[R]}\n-Specifies whether thread sampling is enabled.\n-Thread sampling occurs only if the sampling event is enabled along with\n-this parameter.\n-By default, this parameter is enabled.\n-.RS\n-.RE\n-.TP\n","filename":"src\/java.base\/share\/man\/java.1","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -195,1 +195,0 @@\n-                    Logger.log(JFR, DEBUG, \"samplethreads: \" + Options.getSampleThreads());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/FlightRecorder.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -304,9 +304,0 @@\n-    \/**\n-     * Turn on\/off thread sampling.\n-     *\n-     * @param sampleThreads true if threads should be sampled, false otherwise.\n-     *\n-     * @throws IllegalStateException if state can't be changed.\n-     *\/\n-    public native void setSampleThreads(boolean sampleThreads) throws IllegalStateException;\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVM.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-    private static final boolean DEFAULT_SAMPLE_THREADS = true;\n@@ -65,1 +64,0 @@\n-    private static boolean sampleThreads;\n@@ -146,9 +144,0 @@\n-    public static synchronized void setSampleThreads(Boolean sample) {\n-        jvm.setSampleThreads(sample);\n-        sampleThreads = sample;\n-    }\n-\n-    public static synchronized boolean getSampleThreads() {\n-        return sampleThreads;\n-    }\n-\n@@ -165,1 +154,0 @@\n-        setSampleThreads(DEFAULT_SAMPLE_THREADS);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Options.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -72,2 +72,1 @@\n-            Long maxChunkSize,\n-            Boolean sampleThreads\n+            Long maxChunkSize\n@@ -84,2 +83,1 @@\n-                    \", maxchunksize=\" + maxChunkSize +\n-                    \", samplethreads=\" + sampleThreads);\n+                    \", maxchunksize=\" + maxChunkSize);\n@@ -175,8 +173,0 @@\n-        if (sampleThreads != null)  {\n-            Options.setSampleThreads(sampleThreads);\n-            Logger.log(LogTag.JFR, LogLevel.INFO, \"Sample threads set to \" + sampleThreads);\n-            if (verbose) {\n-                printSampleThreads();\n-            }\n-            updated = true;\n-        }\n@@ -197,1 +187,0 @@\n-            printSampleThreads();\n@@ -214,4 +203,0 @@\n-    private void printSampleThreads() {\n-        println(\"Sample threads: \" + Options.getSampleThreads());\n-    }\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/DCmdConfigure.java","additions":2,"deletions":17,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-    private static final String SAMPLE_THREADS = \"samplethreads\";\n@@ -83,2 +82,0 @@\n-        test(SAMPLE_THREADS, false);\n-        test(SAMPLE_THREADS, true);\n@@ -128,1 +125,0 @@\n-            case SAMPLE_THREADS: return Options.getSampleThreads();\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestJcmdConfigure.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}