{"files":[{"patch":"@@ -358,4 +358,0 @@\n-  if (jfa->saved_fp_address()) {\n-    update_map_with_saved_link(map, jfa->saved_fp_address());\n-  }\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,3 +34,0 @@\n-  \/\/ (Optional) location of saved FP register, which GCs want to inspect\n-  intptr_t** volatile _saved_fp_address;\n-\n@@ -50,1 +47,0 @@\n-    _saved_fp_address = NULL;\n@@ -69,2 +65,0 @@\n-\n-    _saved_fp_address = src->_saved_fp_address;\n@@ -81,2 +75,0 @@\n-  intptr_t** saved_fp_address(void) const        { return _saved_fp_address; }\n-\n@@ -86,1 +78,0 @@\n-  static ByteSize saved_fp_address_offset()      { return byte_offset_of(JavaFrameAnchor, _saved_fp_address); }\n","filename":"src\/hotspot\/cpu\/aarch64\/javaFrameAnchor_aarch64.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -323,2 +323,0 @@\n-\n-  str(zr, Address(rthread, JavaThread::saved_fp_address_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -349,4 +349,0 @@\n-  if (jfa->saved_rbp_address()) {\n-    update_map_with_saved_link(map, jfa->saved_rbp_address());\n-  }\n-\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,3 +33,0 @@\n-  \/\/ (Optional) location of saved RBP register, which GCs want to inspect\n-  intptr_t** volatile _saved_rbp_address;\n-\n@@ -49,1 +46,0 @@\n-    _saved_rbp_address = NULL;\n@@ -67,2 +63,0 @@\n-\n-    _saved_rbp_address = src->_saved_rbp_address;\n@@ -79,2 +73,0 @@\n-  intptr_t** saved_rbp_address(void) const       { return _saved_rbp_address; }\n-\n@@ -84,1 +76,0 @@\n-  static ByteSize saved_rbp_address_offset()     { return byte_offset_of(JavaFrameAnchor, _saved_rbp_address); }\n","filename":"src\/hotspot\/cpu\/x86\/javaFrameAnchor_x86.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2735,1 +2735,0 @@\n-  movptr(Address(java_thread, JavaThread::saved_rbp_address_offset()), NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,4 +40,0 @@\n-  static ByteSize saved_rbp_address_offset() {\n-    return byte_offset_of(JavaThread, _anchor) + JavaFrameAnchor::saved_rbp_address_offset();\n-  }\n-\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/thread_bsd_x86.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,4 +42,0 @@\n-  static ByteSize saved_fp_address_offset() {\n-    return byte_offset_of(JavaThread, _anchor) + JavaFrameAnchor::saved_fp_address_offset();\n-  }\n-\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/thread_linux_aarch64.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,4 +40,0 @@\n-  static ByteSize saved_rbp_address_offset() {\n-    return byte_offset_of(JavaThread, _anchor) + JavaFrameAnchor::saved_rbp_address_offset();\n-  }\n-\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/thread_linux_x86.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,4 +41,0 @@\n-  static ByteSize saved_fp_address_offset() {\n-    return byte_offset_of(JavaThread, _anchor) + JavaFrameAnchor::saved_fp_address_offset();\n-  }\n-\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/thread_windows_aarch64.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,4 +47,0 @@\n-  static ByteSize saved_rbp_address_offset() {\n-    return byte_offset_of(JavaThread, _anchor) + JavaFrameAnchor::saved_rbp_address_offset();\n-  }\n-\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/thread_windows_x86.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+public class TestFoldIfNotCanonical {\n+\n+    private static int field;\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 20_000; i++) {\n+            test(true, 1, false);\n+            test(false, 1, false);\n+        }\n+        test(true, 1, true);\n+\/\/        test(true, 1, false);\n+\/\/        for (int i = 0; i < 20_000; i++) {\n+\/\/            test(true, 1, true);\n+\/\/            test(false, 1, true);\n+\/\/        }\n+\/\/        test(true, 1, false);\n+    }\n+\n+    private static void test(boolean b, int stride, boolean b1) {\n+        int i = 0;\n+        if (b) {\n+            i = 5;\n+        }\n+        for (int j = 0; j < 50; j += stride) {\n+\/\/            if (i == 1) {\n+\/\/\n+\/\/            } else {\n+\/\/                if (i >= 5) {\n+\/\/\n+\/\/                } else {\n+\/\/                    if (i >= 0) {\n+\/\/                        if (i > 1) {\n+\/\/                            \/\/ unc\n+\/\/                        } else {\n+\/\/\n+\/\/                        }\n+\/\/                    } else {\n+\/\/                        \/\/ unc\n+\/\/                    }\n+\/\/                }\n+\/\/                if (i >= 0 && i < 5) {\n+\/\/\n+\/\/                } else {\n+\/\/\n+\/\/                }\n+\/\/            }\n+\n+            switch (i) {\n+                case 0: \/\/ 6226\n+                    field = 0x42;\n+                    break;\n+                case 1: \/\/ 160728\n+                    field = 0x42;\n+                    break;\n+                case 2: \/\/ 0\n+                    field = 0x42;\n+                    break;\n+                case 3: \/\/ 0\n+                case 4: \/\/ 0\n+                case 5: \/\/ 6226\n+                default:\n+            }\n+\n+            i = 1;\n+        }\n+        if (b1) {\n+\n+        }\n+    }\n+\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestFoldIfNotCanonical.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -50,2 +50,2 @@\n-    static final LibraryLookup lookup = LibraryLookup.ofDefault();\n-    final static MethodHandle rand = abi.downcallHandle(lookup.lookup(\"rand\").get(),\n+    static final LibraryLookup lookup = LibraryLookup.ofLibrary(\"LinkToNativeRBP\");\n+    final static MethodHandle foo = abi.downcallHandle(lookup.lookup(\"foo\").get(),\n@@ -55,2 +55,2 @@\n-    static int rand() throws Throwable {\n-        return (int)rand.invokeExact();\n+    static int foo() throws Throwable {\n+        return (int)foo.invokeExact();\n@@ -73,1 +73,1 @@\n-            res = rand() + v.intValue();\n+            res = foo() + v.intValue();\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestLinkToNativeRBP.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifdef _WIN64\n+#define EXPORT __declspec(dllexport)\n+#else\n+#define EXPORT\n+#endif\n+\n+EXPORT int foo() {\n+  return 0;\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/libLinkToNativeRBP.c","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"}]}