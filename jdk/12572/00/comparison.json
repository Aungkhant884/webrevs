{"files":[{"patch":"@@ -235,2 +235,2 @@\n-                 JCExpression resultExpression= (JCExpression) this.<JCTree>translate(pattern);\n-                if (!tree.allowNull || !types.isSubtype(currentValue.type, principalType)) {\n+                JCExpression resultExpression = (JCExpression) this.<JCTree>translate(pattern);\n+                if (!tree.allowNull && !principalType.isPrimitive()) {\n@@ -333,1 +333,2 @@\n-                allowNull = true;\n+                allowNull = types.isSubtype(componentType,\n+                                            types.boxedTypeOrType(types.erasure(nestedBinding.type)));\n@@ -713,0 +714,1 @@\n+                    JCExpression lastGuard = null;\n@@ -737,2 +739,0 @@\n-                                types.isSubtype(commonNestedExpression.type,\n-                                                types.boxedTypeOrType(types.erasure(binding.type))) &&\n@@ -749,0 +749,1 @@\n+                        lastGuard = newGuard;\n@@ -750,1 +751,1 @@\n-                    if (!hasUnconditional) {\n+                    if (lastGuard != null || !hasUnconditional) {\n@@ -754,2 +755,4 @@\n-                                                  List.of(make.ConstantCaseLabel(makeNull()),\n-                                                          make.DefaultCaseLabel()),\n+                                                  hasUnconditional\n+                                                          ? List.of(make.DefaultCaseLabel())\n+                                                          : List.of(make.ConstantCaseLabel(makeNull()),\n+                                                                    make.DefaultCaseLabel()),\n@@ -777,0 +780,1 @@\n+        boolean previousNullable = false;\n@@ -780,0 +784,1 @@\n+            boolean currentNullable = false;\n@@ -789,0 +794,1 @@\n+                    currentNullable = instanceofCheck.allowNull;\n@@ -794,0 +800,1 @@\n+                    currentNullable = instanceofCheck.allowNull;\n@@ -809,0 +816,1 @@\n+                       !previousNullable &&\n@@ -823,0 +831,1 @@\n+            previousNullable = currentNullable;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,163 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8302202\n+ * @summary Testing record patterns with null components\n+ * @enablePreview\n+ * @compile NullsInDeconstructionPatterns2.java\n+ * @run main NullsInDeconstructionPatterns2\n+ *\/\n+\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+public class NullsInDeconstructionPatterns2 {\n+\n+    public static void main(String[] args) {\n+        new NullsInDeconstructionPatterns2().run();\n+    }\n+\n+    private void run() {\n+        run1(this::test1a);\n+        run1(this::test1b);\n+        run2(this::test2a);\n+        run2(this::test2b);\n+        run3(this::test3a);\n+        run3(this::test3b);\n+        run4();\n+    }\n+\n+    private void run1(Function<Object, String> method) {\n+        assertEquals(\"R1(null)\", method.apply(new R1(null)));\n+        assertEquals(\"R1(!null)\", method.apply(new R1(\"\")));\n+    }\n+\n+    private void run2(Function<Object, String> method) {\n+        assertEquals(\"R2(null, null)\", method.apply(new R2(null, null)));\n+        assertEquals(\"R2(!null, null)\", method.apply(new R2(\"\", null)));\n+        assertEquals(\"R2(null, !null)\", method.apply(new R2(null, \"\")));\n+        assertEquals(\"R2(!null, !null)\", method.apply(new R2(\"\", \"\")));\n+    }\n+\n+    private void run3(Function<Object, String> method) {\n+        assertEquals(\"R3(null, null, null)\", method.apply(new R3(null, null, null)));\n+        assertEquals(\"R3(!null, null, null)\", method.apply(new R3(\"\", null, null)));\n+        assertEquals(\"R3(null, !null, null)\", method.apply(new R3(null, \"\", null)));\n+        assertEquals(\"R3(!null, !null, null)\", method.apply(new R3(\"\", \"\", null)));\n+        assertEquals(\"R3(null, null, !null)\", method.apply(new R3(null, null, \"\")));\n+        assertEquals(\"R3(!null, null, !null)\", method.apply(new R3(\"\", null, \"\")));\n+        assertEquals(\"R3(null, !null, !null)\", method.apply(new R3(null, \"\", \"\")));\n+        assertEquals(\"R3(!null, !null, !null)\", method.apply(new R3(\"\", \"\", \"\")));\n+    }\n+\n+    private void run4() {\n+        assertEquals(\"integer\", test4(new R1(0)));\n+        assertEquals(\"empty\", test4(new R1(\"\")));\n+        assertEquals(\"default\", test4(new R1(\"a\")));\n+    }\n+    private String test1a(Object i) {\n+        return switch (i) {\n+            case R1(Object o) when o == null -> \"R1(null)\";\n+            case R1(Object o) when o != null -> \"R1(!null)\";\n+            default -> \"default\";\n+        };\n+    }\n+\n+    private String test1b(Object i) {\n+        return switch (i) {\n+            case R1(Object o) when o == null -> \"R1(null)\";\n+            case R1(Object o) -> \"R1(!null)\";\n+            default -> \"default\";\n+        };\n+    }\n+\n+    private String test2a(Object i) {\n+        return switch (i) {\n+            case R2(Object o1, Object o2) when o1 == null && o2 == null -> \"R2(null, null)\";\n+            case R2(Object o1, Object o2) when o1 != null && o2 == null -> \"R2(!null, null)\";\n+            case R2(Object o1, Object o2) when o1 == null && o2 != null -> \"R2(null, !null)\";\n+            case R2(Object o1, Object o2) when o1 != null && o2 != null -> \"R2(!null, !null)\";\n+            default -> \"default\";\n+        };\n+    }\n+\n+    private String test2b(Object i) {\n+        return switch (i) {\n+            case R2(Object o1, Object o2) when o1 == null && o2 == null -> \"R2(null, null)\";\n+            case R2(Object o1, Object o2) when o1 != null && o2 == null -> \"R2(!null, null)\";\n+            case R2(Object o1, Object o2) when o1 == null && o2 != null -> \"R2(null, !null)\";\n+            case R2(Object o1, Object o2) -> \"R2(!null, !null)\";\n+            default -> \"default\";\n+        };\n+    }\n+\n+    private String test3a(Object i) {\n+        return switch (i) {\n+            case R3(Object o1, Object o2, Object o3) when o1 == null && o2 == null && o3 == null -> \"R3(null, null, null)\";\n+            case R3(Object o1, Object o2, Object o3) when o1 != null && o2 == null && o3 == null -> \"R3(!null, null, null)\";\n+            case R3(Object o1, Object o2, Object o3) when o1 == null && o2 != null && o3 == null -> \"R3(null, !null, null)\";\n+            case R3(Object o1, Object o2, Object o3) when o1 != null && o2 != null && o3 == null -> \"R3(!null, !null, null)\";\n+            case R3(Object o1, Object o2, Object o3) when o1 == null && o2 == null && o3 != null -> \"R3(null, null, !null)\";\n+            case R3(Object o1, Object o2, Object o3) when o1 != null && o2 == null && o3 != null -> \"R3(!null, null, !null)\";\n+            case R3(Object o1, Object o2, Object o3) when o1 == null && o2 != null && o3 != null -> \"R3(null, !null, !null)\";\n+            case R3(Object o1, Object o2, Object o3) when o1 != null && o2 != null && o3 != null -> \"R3(!null, !null, !null)\";\n+            default -> \"default\";\n+        };\n+    }\n+\n+    private String test3b(Object i) {\n+        return switch (i) {\n+            case R3(Object o1, Object o2, Object o3) when o1 == null && o2 == null && o3 == null -> \"R3(null, null, null)\";\n+            case R3(Object o1, Object o2, Object o3) when o1 != null && o2 == null && o3 == null -> \"R3(!null, null, null)\";\n+            case R3(Object o1, Object o2, Object o3) when o1 == null && o2 != null && o3 == null -> \"R3(null, !null, null)\";\n+            case R3(Object o1, Object o2, Object o3) when o1 != null && o2 != null && o3 == null -> \"R3(!null, !null, null)\";\n+            case R3(Object o1, Object o2, Object o3) when o1 == null && o2 == null && o3 != null -> \"R3(null, null, !null)\";\n+            case R3(Object o1, Object o2, Object o3) when o1 != null && o2 == null && o3 != null -> \"R3(!null, null, !null)\";\n+            case R3(Object o1, Object o2, Object o3) when o1 == null && o2 != null && o3 != null -> \"R3(null, !null, !null)\";\n+            case R3(Object o1, Object o2, Object o3) -> \"R3(!null, !null, !null)\";\n+            default -> \"default\";\n+        };\n+    }\n+\n+    private String test4(Object i) {\n+        return switch (i) {\n+            case R1(Integer o) -> \"integer\";\n+            case R1(Object o) when o.toString().isEmpty() -> \"empty\";\n+            default -> \"default\";\n+        };\n+    }\n+\n+    private static void assertEquals(String expected, String actual) {\n+        if (!Objects.equals(expected, actual)) {\n+            throw new AssertionError(\"Unexpected result, expected: \" + expected + \",\" +\n+                                                       \" actual: \" + actual);\n+        }\n+    }\n+\n+    record R1(Object o) {}\n+    record R2(Object o1, Object o2) {}\n+    record R3(Object o1, Object o2, Object o3) {}\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/NullsInDeconstructionPatterns2.java","additions":163,"deletions":0,"binary":false,"changes":163,"status":"added"}]}