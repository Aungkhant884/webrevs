{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+    private FilenameFilter oldtmpFileFilter;\n@@ -55,1 +56,1 @@\n-        \/\/ The files are in {tmpdir}\/hsperfdata_{any_user_name}\/[0-9]+\n+        \/\/ 1.4.2 and later: The files are in {tmpdir}\/hsperfdata_{any_user_name}\/[0-9]+\n@@ -69,0 +70,9 @@\n+\n+        \/\/ 1.4.1 (or earlier?): the files are stored directly under {tmpdir}\/ with\n+        \/\/ the following pattern.\n+        Pattern oldtmpFilePattern = Pattern.compile(PerfDataFile.tmpFileNamePattern);\n+        oldtmpFileFilter = new FilenameFilter() {\n+            public boolean accept(File dir, String name) {\n+                return oldtmpFilePattern.matcher(name).matches();\n+            }\n+        };\n@@ -93,1 +103,1 @@\n-            \/\/ Look for the files {tmpdir}\/hsperfdata_{any_user_name}\/[0-9]+\n+            \/\/ 1.4.2 and later: Look for the files {tmpdir}\/hsperfdata_{any_user_name}\/[0-9]+\n@@ -114,0 +124,14 @@\n+\n+            \/\/ look for any 1.4.1 files that are readable by the current user.\n+            File[] files = tmpdir.listFiles(oldtmpFileFilter);\n+            if (files != null) {\n+                for (File file : files) {\n+                    if (file.isFile() && file.canRead()) {\n+                        int vmid = PerfDataFile.getLocalVmId(file);\n+                        if (vmid != -1) {\n+                            jvmSet.add(vmid);\n+                        }\n+                    }\n+                }\n+            }\n+\n","filename":"src\/jdk.internal.jvmstat\/share\/classes\/sun\/jvmstat\/perfdata\/monitor\/protocol\/local\/LocalVmManager.java","additions":27,"deletions":3,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+            \/\/ Try 1.4.2 and later first\n@@ -66,0 +67,24 @@\n+\n+        } catch (IllegalArgumentException e) {\n+            \/\/ now try 1.4.1 by attempting to directly map the files.\n+            try {\n+                String filename = PerfDataFile.getTempDirectory()\n+                                  + PerfDataFile.dirNamePrefix\n+                                  + Integer.toString(vmid.getLocalVmId());\n+\n+                File f = new File(filename);\n+\n+                FileChannel fc = new RandomAccessFile(f, \"r\").getChannel();\n+                ByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0L,\n+                                       (int)fc.size());\n+                fc.close();\n+                createPerfDataBuffer(bb, vmid.getLocalVmId());\n+\n+            } catch (FileNotFoundException e2) {\n+                \/\/ re-throw the exception from the 1.4.2 attach method\n+                throw new MonitorException(vmid.getLocalVmId() + \" not found\",\n+                                           e);\n+            } catch (IOException e2) {\n+                throw new MonitorException(\"Could not map 1.4.1 file for \"\n+                                           + vmid.getLocalVmId(), e2);\n+            }\n","filename":"src\/jdk.internal.jvmstat\/share\/classes\/sun\/jvmstat\/perfdata\/monitor\/protocol\/local\/PerfDataBuffer.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,2 +67,1 @@\n-     * used by the 1.4.2 and later HotSpot JVM. Earlier versions are\n-     * no longer supported.\n+     * used by the 1.4.2 and later HotSpot JVM.\n@@ -72,0 +71,10 @@\n+    \/**\n+     * The file name pattern for 1.4.1 PerfData shared memory files.\n+     * <p>\n+     * This pattern must be kept in synch with the file name pattern\n+     * used by the 1.4.1 HotSpot JVM.\n+     *\/\n+    public static final String tmpFileNamePattern =\n+            \"^hsperfdata_[0-9]+(_[1-2]+)?$\";\n+\n+\n@@ -91,0 +100,1 @@\n+            \/\/ try 1.4.2 and later format first\n@@ -94,1 +104,14 @@\n-        throw new IllegalArgumentException(\"Cannot convert '\" + file + \"' to VM id\");\n+        \/\/ now try the 1.4.1 format\n+        String name = file.getName();\n+        if (name.startsWith(dirNamePrefix)) {\n+            int first = name.indexOf('_');\n+            int last = name.lastIndexOf('_');\n+            try {\n+                if (first == last) {\n+                    return Integer.parseInt(name.substring(first + 1));\n+                } else {\n+                    return Integer.parseInt(name.substring(first + 1, last));\n+                }\n+            } catch (NumberFormatException e) { }\n+        }\n+        throw new IllegalArgumentException(\"file name does not match pattern\");\n","filename":"src\/jdk.internal.jvmstat\/share\/classes\/sun\/jvmstat\/perfdata\/monitor\/protocol\/local\/PerfDataFile.java","additions":27,"deletions":4,"binary":false,"changes":31,"status":"modified"}]}