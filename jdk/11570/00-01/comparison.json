{"files":[{"patch":"@@ -13680,0 +13680,308 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct cmovI_reg_reg_lt(iRegINoSp dst, iRegI src1, iRegI src2, rFlagsReg cr)\n+%{\n+  effect(DEF dst, USE src1, USE src2, USE cr);\n+\n+  ins_cost(INSN_COST * 2);\n+  format %{ \"cselw $dst, $src1, $src2 lt\\t\"  %}\n+\n+  ins_encode %{\n+    __ cselw(as_Register($dst$$reg),\n+             as_Register($src1$$reg),\n+             as_Register($src2$$reg),\n+             Assembler::LT);\n+  %}\n+\n+  ins_pipe(icond_reg_reg);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct cmovI_reg_reg_gt(iRegINoSp dst, iRegI src1, iRegI src2, rFlagsReg cr)\n+%{\n+  effect(DEF dst, USE src1, USE src2, USE cr);\n+\n+  ins_cost(INSN_COST * 2);\n+  format %{ \"cselw $dst, $src1, $src2 gt\\t\"  %}\n+\n+  ins_encode %{\n+    __ cselw(as_Register($dst$$reg),\n+             as_Register($src1$$reg),\n+             as_Register($src2$$reg),\n+             Assembler::GT);\n+  %}\n+\n+  ins_pipe(icond_reg_reg);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct cmovI_reg_imm0_lt(iRegINoSp dst, iRegI src1, rFlagsReg cr)\n+%{\n+  effect(DEF dst, USE src1, USE cr);\n+\n+  ins_cost(INSN_COST * 2);\n+  format %{ \"cselw $dst, $src1, zr lt\\t\"  %}\n+\n+  ins_encode %{\n+    __ cselw(as_Register($dst$$reg),\n+             as_Register($src1$$reg),\n+             zr,\n+             Assembler::LT);\n+  %}\n+\n+  ins_pipe(icond_reg);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct cmovI_reg_imm0_gt(iRegINoSp dst, iRegI src1, rFlagsReg cr)\n+%{\n+  effect(DEF dst, USE src1, USE cr);\n+\n+  ins_cost(INSN_COST * 2);\n+  format %{ \"cselw $dst, $src1, zr gt\\t\"  %}\n+\n+  ins_encode %{\n+    __ cselw(as_Register($dst$$reg),\n+             as_Register($src1$$reg),\n+             zr,\n+             Assembler::GT);\n+  %}\n+\n+  ins_pipe(icond_reg);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct cmovI_reg_imm1_le(iRegINoSp dst, iRegI src1, rFlagsReg cr)\n+%{\n+  effect(DEF dst, USE src1, USE cr);\n+\n+  ins_cost(INSN_COST * 2);\n+  format %{ \"csincw $dst, $src1, zr le\\t\"  %}\n+\n+  ins_encode %{\n+    __ csincw(as_Register($dst$$reg),\n+             as_Register($src1$$reg),\n+             zr,\n+             Assembler::LE);\n+  %}\n+\n+  ins_pipe(icond_reg);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct cmovI_reg_imm1_gt(iRegINoSp dst, iRegI src1, rFlagsReg cr)\n+%{\n+  effect(DEF dst, USE src1, USE cr);\n+\n+  ins_cost(INSN_COST * 2);\n+  format %{ \"csincw $dst, $src1, zr gt\\t\"  %}\n+\n+  ins_encode %{\n+    __ csincw(as_Register($dst$$reg),\n+             as_Register($src1$$reg),\n+             zr,\n+             Assembler::GT);\n+  %}\n+\n+  ins_pipe(icond_reg);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct cmovI_reg_immM1_lt(iRegINoSp dst, iRegI src1, rFlagsReg cr)\n+%{\n+  effect(DEF dst, USE src1, USE cr);\n+\n+  ins_cost(INSN_COST * 2);\n+  format %{ \"csinvw $dst, $src1, zr lt\\t\"  %}\n+\n+  ins_encode %{\n+    __ csinvw(as_Register($dst$$reg),\n+             as_Register($src1$$reg),\n+             zr,\n+             Assembler::LT);\n+  %}\n+\n+  ins_pipe(icond_reg);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct cmovI_reg_immM1_ge(iRegINoSp dst, iRegI src1, rFlagsReg cr)\n+%{\n+  effect(DEF dst, USE src1, USE cr);\n+\n+  ins_cost(INSN_COST * 2);\n+  format %{ \"csinvw $dst, $src1, zr ge\\t\"  %}\n+\n+  ins_encode %{\n+    __ csinvw(as_Register($dst$$reg),\n+             as_Register($src1$$reg),\n+             zr,\n+             Assembler::GE);\n+  %}\n+\n+  ins_pipe(icond_reg);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct minI_reg_imm0(iRegINoSp dst, iRegI src, immI0 imm)\n+%{\n+  match(Set dst (MinI src imm));\n+  ins_cost(INSN_COST * 2);\n+  expand %{\n+    rFlagsReg cr;\n+    compI_reg_imm0(cr, src);\n+    cmovI_reg_imm0_lt(dst, src, cr);\n+  %}\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct minI_imm0_reg(iRegINoSp dst, immI0 imm, iRegI src)\n+%{\n+  match(Set dst (MinI imm src));\n+  ins_cost(INSN_COST * 2);\n+  expand %{\n+    rFlagsReg cr;\n+    compI_reg_imm0(cr, src);\n+    cmovI_reg_imm0_lt(dst, src, cr);\n+  %}\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct minI_reg_imm1(iRegINoSp dst, iRegI src, immI_1 imm)\n+%{\n+  match(Set dst (MinI src imm));\n+  ins_cost(INSN_COST * 2);\n+  expand %{\n+    rFlagsReg cr;\n+    compI_reg_imm0(cr, src);\n+    cmovI_reg_imm1_le(dst, src, cr);\n+  %}\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct minI_imm1_reg(iRegINoSp dst, immI_1 imm, iRegI src)\n+%{\n+  match(Set dst (MinI imm src));\n+  ins_cost(INSN_COST * 2);\n+  expand %{\n+    rFlagsReg cr;\n+    compI_reg_imm0(cr, src);\n+    cmovI_reg_imm1_le(dst, src, cr);\n+  %}\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct minI_reg_immM1(iRegINoSp dst, iRegI src, immI_M1 imm)\n+%{\n+  match(Set dst (MinI src imm));\n+  ins_cost(INSN_COST * 2);\n+  expand %{\n+    rFlagsReg cr;\n+    compI_reg_imm0(cr, src);\n+    cmovI_reg_immM1_lt(dst, src, cr);\n+  %}\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct minI_immM1_reg(iRegINoSp dst, immI_M1 imm, iRegI src)\n+%{\n+  match(Set dst (MinI imm src));\n+  ins_cost(INSN_COST * 2);\n+  expand %{\n+    rFlagsReg cr;\n+    compI_reg_imm0(cr, src);\n+    cmovI_reg_immM1_lt(dst, src, cr);\n+  %}\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct maxI_reg_imm0(iRegINoSp dst, iRegI src, immI0 imm)\n+%{\n+  match(Set dst (MaxI src imm));\n+  ins_cost(INSN_COST * 2);\n+  expand %{\n+    rFlagsReg cr;\n+    compI_reg_imm0(cr, src);\n+    cmovI_reg_imm0_gt(dst, src, cr);\n+  %}\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct maxI_imm0_reg(iRegINoSp dst, immI0 imm, iRegI src)\n+%{\n+  match(Set dst (MaxI imm src));\n+  ins_cost(INSN_COST * 2);\n+  expand %{\n+    rFlagsReg cr;\n+    compI_reg_imm0(cr, src);\n+    cmovI_reg_imm0_gt(dst, src, cr);\n+  %}\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct maxI_reg_imm1(iRegINoSp dst, iRegI src, immI_1 imm)\n+%{\n+  match(Set dst (MaxI src imm));\n+  ins_cost(INSN_COST * 2);\n+  expand %{\n+    rFlagsReg cr;\n+    compI_reg_imm0(cr, src);\n+    cmovI_reg_imm1_gt(dst, src, cr);\n+  %}\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct maxI_imm1_reg(iRegINoSp dst, immI_1 imm, iRegI src)\n+%{\n+  match(Set dst (MaxI imm src));\n+  ins_cost(INSN_COST * 2);\n+  expand %{\n+    rFlagsReg cr;\n+    compI_reg_imm0(cr, src);\n+    cmovI_reg_imm1_gt(dst, src, cr);\n+  %}\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct maxI_reg_immM1(iRegINoSp dst, iRegI src, immI_M1 imm)\n+%{\n+  match(Set dst (MaxI src imm));\n+  ins_cost(INSN_COST * 2);\n+  expand %{\n+    rFlagsReg cr;\n+    compI_reg_imm0(cr, src);\n+    cmovI_reg_immM1_ge(dst, src, cr);\n+  %}\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct maxI_immM1_reg(iRegINoSp dst, immI_M1 imm, iRegI src)\n+%{\n+  match(Set dst (MaxI imm src));\n+  ins_cost(INSN_COST * 2);\n+  expand %{\n+    rFlagsReg cr;\n+    compI_reg_imm0(cr, src);\n+    cmovI_reg_immM1_ge(dst, src, cr);\n+  %}\n+%}\n+\n@@ -15705,67 +16013,1 @@\n-instruct cmovI_reg_reg_lt(iRegINoSp dst, iRegI src1, iRegI src2, rFlagsReg cr)\n-%{\n-  effect( DEF dst, USE src1, USE src2, USE cr );\n-\n-  ins_cost(INSN_COST * 2);\n-  format %{ \"cselw $dst, $src1, $src2 lt\\t\"  %}\n-\n-  ins_encode %{\n-    __ cselw(as_Register($dst$$reg),\n-             as_Register($src1$$reg),\n-             as_Register($src2$$reg),\n-             Assembler::LT);\n-  %}\n-\n-  ins_pipe(icond_reg_reg);\n-%}\n-\n-instruct cmovI_reg_imm0_lt(iRegINoSp dst, iRegI src1, rFlagsReg cr)\n-%{\n-  effect(DEF dst, USE src1, USE cr);\n-\n-  ins_cost(INSN_COST * 2);\n-  format %{ \"cselw $dst, $src1, zr lt\\t\"  %}\n-\n-  ins_encode %{\n-    __ cselw(as_Register($dst$$reg),\n-             as_Register($src1$$reg),\n-             zr,\n-             Assembler::LT);\n-  %}\n-\n-  ins_pipe(icond_reg);\n-%}\n-\n-instruct cmovI_reg_imm1_le(iRegINoSp dst, iRegI src1, rFlagsReg cr) %{\n-  effect(DEF dst, USE src1, USE cr);\n-\n-  ins_cost(INSN_COST * 2);\n-  format %{ \"csincw $dst, $src1, zr le\\t# signed, int\"  %}\n-\n-  ins_encode %{\n-    __ csincw(as_Register($dst$$reg),\n-             as_Register($src1$$reg),\n-             zr,\n-             Assembler::LE);\n-  %}\n-\n-  ins_pipe(icond_reg);\n-%}\n-\n-instruct cmovI_reg_immM1_lt(iRegINoSp dst, iRegI src1, rFlagsReg cr) %{\n-  effect(DEF dst, USE src1, USE cr);\n-\n-  ins_cost(INSN_COST * 2);\n-  format %{ \"csinvw $dst, $src1, zr lt\\t# signed, int\"  %}\n-\n-  ins_encode %{\n-    __ csinvw(as_Register($dst$$reg),\n-             as_Register($src1$$reg),\n-             zr,\n-             Assembler::LT);\n-  %}\n-\n-  ins_pipe(icond_reg);\n-%}\n-\n-instruct minI_rReg(iRegINoSp dst, iRegI src1, iRegI src2)\n+instruct minI_reg_reg(iRegINoSp dst, iRegI src1, iRegI src2)\n@@ -15784,33 +16026,0 @@\n-instruct minI_imm0_rReg(iRegINoSp dst, immI0 zero, iRegI src2)\n-%{\n-  match(Set dst (MinI zero src2));\n-  ins_cost(INSN_COST * 2);\n-  expand %{\n-    rFlagsReg cr;\n-    compI_reg_imm0(cr, src2);\n-    cmovI_reg_imm0_lt(dst, src2, cr);\n-  %}\n-%}\n-\n-instruct minI_imm1_rReg(iRegINoSp dst, immI_1 one, iRegI src2)\n-%{\n-  match(Set dst (MinI one src2));\n-  ins_cost(INSN_COST * 2);\n-  expand %{\n-    rFlagsReg cr;\n-    compI_reg_imm0(cr, src2);\n-    cmovI_reg_imm1_le(dst, src2, cr);\n-  %}\n-%}\n-\n-instruct minI_immM1_rReg(iRegINoSp dst, immI_M1 m1, iRegI src2)\n-%{\n-  match(Set dst (MinI m1 src2));\n-  ins_cost(INSN_COST * 2);\n-  expand %{\n-    rFlagsReg cr;\n-    compI_reg_imm0(cr, src2);\n-    cmovI_reg_immM1_lt(dst, src2, cr);\n-  %}\n-%}\n-\n@@ -15819,67 +16028,1 @@\n-instruct cmovI_reg_reg_gt(iRegINoSp dst, iRegI src1, iRegI src2, rFlagsReg cr)\n-%{\n-  effect( DEF dst, USE src1, USE src2, USE cr );\n-\n-  ins_cost(INSN_COST * 2);\n-  format %{ \"cselw $dst, $src1, $src2 gt\\t\"  %}\n-\n-  ins_encode %{\n-    __ cselw(as_Register($dst$$reg),\n-             as_Register($src1$$reg),\n-             as_Register($src2$$reg),\n-             Assembler::GT);\n-  %}\n-\n-  ins_pipe(icond_reg_reg);\n-%}\n-\n-instruct cmovI_reg_imm0_gt(iRegINoSp dst, iRegI src1, rFlagsReg cr)\n-%{\n-  effect(DEF dst, USE src1, USE cr);\n-\n-  ins_cost(INSN_COST * 2);\n-  format %{ \"cselw $dst, $src1, zr gt\\t\"  %}\n-\n-  ins_encode %{\n-    __ cselw(as_Register($dst$$reg),\n-             as_Register($src1$$reg),\n-             zr,\n-             Assembler::GT);\n-  %}\n-\n-  ins_pipe(icond_reg);\n-%}\n-\n-instruct cmovI_reg_imm1_gt(iRegINoSp dst, iRegI src1, rFlagsReg cr) %{\n-  effect(DEF dst, USE src1, USE cr);\n-\n-  ins_cost(INSN_COST * 2);\n-  format %{ \"csincw $dst, $src1, zr gt\\t# signed, int\"  %}\n-\n-  ins_encode %{\n-    __ csincw(as_Register($dst$$reg),\n-             as_Register($src1$$reg),\n-             zr,\n-             Assembler::GT);\n-  %}\n-\n-  ins_pipe(icond_reg);\n-%}\n-\n-instruct cmovI_reg_immM1_ge(iRegINoSp dst, iRegI src1, rFlagsReg cr) %{\n-  effect(DEF dst, USE src1, USE cr);\n-\n-  ins_cost(INSN_COST * 2);\n-  format %{ \"csinvw $dst, $src1, zr gt\\t# signed, int\"  %}\n-\n-  ins_encode %{\n-    __ csinvw(as_Register($dst$$reg),\n-             as_Register($src1$$reg),\n-             zr,\n-             Assembler::GE);\n-  %}\n-\n-  ins_pipe(icond_reg);\n-%}\n-\n-instruct maxI_rReg(iRegINoSp dst, iRegI src1, iRegI src2)\n+instruct maxI_reg_reg(iRegINoSp dst, iRegI src1, iRegI src2)\n@@ -15896,33 +16039,0 @@\n-instruct maxI_imm0_rReg(iRegINoSp dst, immI0 zero, iRegI src2)\n-%{\n-  match(Set dst (MaxI zero src2));\n-  ins_cost(INSN_COST * 2);\n-  expand %{\n-    rFlagsReg cr;\n-    compI_reg_imm0(cr, src2);\n-    cmovI_reg_imm0_gt(dst, src2, cr);\n-  %}\n-%}\n-\n-instruct maxI_imm1_rReg(iRegINoSp dst, immI_1 one, iRegI src2)\n-%{\n-  match(Set dst (MaxI one src2));\n-  ins_cost(INSN_COST * 2);\n-  expand %{\n-    rFlagsReg cr;\n-    compI_reg_imm0(cr, src2);\n-    cmovI_reg_imm1_gt(dst, src2, cr);\n-  %}\n-%}\n-\n-instruct maxI_immM1_rReg(iRegINoSp dst, immI_M1 m1, iRegI src2)\n-%{\n-  match(Set dst (MaxI m1 src2));\n-  ins_cost(INSN_COST * 2);\n-  expand %{\n-    rFlagsReg cr;\n-    compI_reg_imm0(cr, src2);\n-    cmovI_reg_immM1_ge(dst, src2, cr);\n-  %}\n-%}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":310,"deletions":200,"binary":false,"changes":510,"status":"modified"},{"patch":"@@ -31,0 +31,3 @@\n+define(`upcase', `translit(`$*', `a-z', `A-Z')')dnl\n+define(`downcase', `translit(`$*', `A-Z', `a-z')')dnl\n+dnl\n@@ -542,0 +545,78 @@\n+define(`CMOV_INSN', `\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct cmov$1_reg_reg_$3(iReg$1NoSp dst, iReg$1 src1, iReg$1 src2, rFlagsReg cr)\n+%{\n+  effect(DEF dst, USE src1, USE src2, USE cr);\n+\n+  ins_cost(INSN_COST * 2);\n+  format %{ \"$2 $dst, $src1, $src2 $3\\t\"  %}\n+\n+  ins_encode %{\n+    __ $2(as_Register($dst$$reg),\n+             as_Register($src1$$reg),\n+             as_Register($src2$$reg),\n+             Assembler::upcase($3));\n+  %}\n+\n+  ins_pipe(icond_reg_reg);\n+%}\n+')dnl\n+CMOV_INSN(I, cselw, lt)\n+CMOV_INSN(I, cselw, gt)\n+dnl\n+define(`CMOV_DRAW_INSN', `\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct cmov$1_reg_imm$2_$4(iReg$1NoSp dst, iReg$1 src1, rFlagsReg cr)\n+%{\n+  effect(DEF dst, USE src1, USE cr);\n+\n+  ins_cost(INSN_COST * 2);\n+  format %{ \"$3 $dst, $src1, zr $4\\t\"  %}\n+\n+  ins_encode %{\n+    __ $3(as_Register($dst$$reg),\n+             as_Register($src1$$reg),\n+             zr,\n+             Assembler::upcase($4));\n+  %}\n+\n+  ins_pipe(icond_reg);\n+%}\n+')dnl\n+CMOV_DRAW_INSN(I, 0, cselw, lt)\n+CMOV_DRAW_INSN(I, 0, cselw, gt)\n+CMOV_DRAW_INSN(I, 1, csincw, le)\n+CMOV_DRAW_INSN(I, 1, csincw, gt)\n+CMOV_DRAW_INSN(I, M1, csinvw, lt)\n+CMOV_DRAW_INSN(I, M1, csinvw, ge)\n+dnl\n+define(`MINMAX_DRAW_INSN', `\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+ifelse($6,,\n+instruct downcase($1)$2_reg_imm$4(iReg$2NoSp dst, iReg$2 src, imm$2$3$4 imm),\n+instruct downcase($1)$2_imm$4_reg(iReg$2NoSp dst, imm$2$3$4 imm, iReg$2 src))\n+%{\n+  ifelse($6,,\n+  match(Set dst ($1$2 src imm));,\n+  match(Set dst ($1$2 imm src));)\n+  ins_cost(INSN_COST * 2);\n+  expand %{\n+    rFlagsReg cr;\n+    comp$2_reg_imm0(cr, src);\n+    cmov$2_reg_imm$4_$5(dst, src, cr);\n+  %}\n+%}\n+')dnl\n+MINMAX_DRAW_INSN(Min, I,  , 0, lt)\n+MINMAX_DRAW_INSN(Min, I,  , 0, lt, rev)\n+MINMAX_DRAW_INSN(Min, I, _, 1, le)\n+MINMAX_DRAW_INSN(Min, I, _, 1, le, rev)\n+MINMAX_DRAW_INSN(Min, I, _, M1, lt)\n+MINMAX_DRAW_INSN(Min, I, _, M1, lt, rev)\n+dnl\n+MINMAX_DRAW_INSN(Max, I,  , 0, gt)\n+MINMAX_DRAW_INSN(Max, I,  , 0, gt, rev)\n+MINMAX_DRAW_INSN(Max, I, _, 1, gt)\n+MINMAX_DRAW_INSN(Max, I, _, 1, gt, rev)\n+MINMAX_DRAW_INSN(Max, I, _, M1, ge)\n+MINMAX_DRAW_INSN(Max, I, _, M1, ge, rev)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_ad.m4","additions":81,"deletions":0,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -1127,14 +1127,3 @@\n-  if (r->Opcode() != Op_MaxI) {\n-    if (!l->is_Con()) {\n-      if (r->is_Con()) {\n-        \/\/ Convert \"max(x, con)\" into \"max(con, x)\".\n-        swap_edges(1, 2);\n-        return this;\n-      } else {\n-        \/\/ Otherwise, sort inputs.\n-        if (x->_idx > y->_idx) {\n-          swap_edges(1, 2);\n-          return this;\n-        }\n-      }\n-    }\n+  if (x->_idx > y->_idx && r->Opcode() != Op_MaxI) {\n+    swap_edges(1, 2);\n+    return this;\n@@ -1221,14 +1210,3 @@\n-  if (r->Opcode() != Op_MinI) {\n-    if (!l->is_Con()) {\n-      if (r->is_Con()) {\n-        \/\/ Convert \"min(x, con)\" into \"min(con, x)\".\n-        swap_edges(1, 2);\n-        return this;\n-      } else {\n-        \/\/ Otherwise, sort inputs.\n-        if (x->_idx > y->_idx) {\n-          swap_edges(1, 2);\n-          return this;\n-        }\n-      }\n-    }\n+  if( x->_idx > y->_idx && r->Opcode() != Op_MinI ) {\n+    swap_edges(1, 2);\n+    return this;\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":6,"deletions":28,"binary":false,"changes":34,"status":"modified"}]}