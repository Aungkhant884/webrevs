{"files":[{"patch":"@@ -276,4 +276,0 @@\n-  if (UseMallocOnly && _first != NULL) {\n-    char* end = _first->next() ? _first->top() : _hwm;\n-    free_malloced_objects(_first, _first->bottom(), end, _hwm);\n-  }\n@@ -345,13 +341,0 @@\n-#ifdef ASSERT\n-  if (UseMallocOnly) {\n-    \/\/ always allocate a new object  (otherwise we'll free this one twice)\n-    char* copy = (char*)Amalloc(new_size, alloc_failmode);\n-    if (copy == NULL) {\n-      return NULL;\n-    }\n-    size_t n = MIN2(old_size, new_size);\n-    if (n > 0) memcpy(copy, old_ptr, n);\n-    Afree(old_ptr,old_size);    \/\/ Mostly done to keep stats accurate\n-    return copy;\n-  }\n-#endif\n@@ -389,18 +372,0 @@\n-#ifdef ASSERT\n-  if (UseMallocOnly) {\n-    \/\/ really slow, but not easy to make fast\n-    if (_chunk == NULL) return false;\n-    char** bottom = (char**)_chunk->bottom();\n-    for (char** p = (char**)_hwm - 1; p >= bottom; p--) {\n-      if (*p == ptr) return true;\n-    }\n-    for (Chunk *c = _first; c != NULL; c = c->next()) {\n-      if (c == _chunk) continue;  \/\/ current chunk has been processed\n-      char** bottom = (char**)c->bottom();\n-      for (char** p = (char**)c->top() - 1; p >= bottom; p--) {\n-        if (*p == ptr) return true;\n-      }\n-    }\n-    return false;\n-  }\n-#endif\n@@ -417,48 +382,0 @@\n-\n-\n-#ifdef ASSERT\n-void* Arena::malloc(size_t size) {\n-  assert(UseMallocOnly, \"shouldn't call\");\n-  \/\/ use malloc, but save pointer in res. area for later freeing\n-  char** save = (char**)internal_amalloc(sizeof(char*));\n-  return (*save = (char*)os::malloc(size, mtChunk));\n-}\n-#endif\n-\n-\n-\/\/--------------------------------------------------------------------------------------\n-\/\/ Non-product code\n-\n-#ifndef PRODUCT\n-\n-\/\/ debugging code\n-inline void Arena::free_all(char** start, char** end) {\n-  for (char** p = start; p < end; p++) if (*p) os::free(*p);\n-}\n-\n-void Arena::free_malloced_objects(Chunk* chunk, char* hwm, char* max, char* hwm2) {\n-  assert(UseMallocOnly, \"should not call\");\n-  \/\/ free all objects malloced since resource mark was created; resource area\n-  \/\/ contains their addresses\n-  if (chunk->next()) {\n-    \/\/ this chunk is full, and some others too\n-    for (Chunk* c = chunk->next(); c != NULL; c = c->next()) {\n-      char* top = c->top();\n-      if (c->next() == NULL) {\n-        top = hwm2;     \/\/ last junk is only used up to hwm2\n-        assert(c->contains(hwm2), \"bad hwm2\");\n-      }\n-      free_all((char**)c->bottom(), (char**)top);\n-    }\n-    assert(chunk->contains(hwm), \"bad hwm\");\n-    assert(chunk->contains(max), \"bad max\");\n-    free_all((char**)hwm, (char**)max);\n-  } else {\n-    \/\/ this chunk was partially used\n-    assert(chunk->contains(hwm), \"bad hwm\");\n-    assert(chunk->contains(hwm2), \"bad hwm2\");\n-    free_all((char**)hwm, (char**)hwm2);\n-  }\n-}\n-\n-#endif \/\/ Non-product\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":0,"deletions":83,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -128,1 +128,0 @@\n-    debug_only(if (UseMallocOnly) return malloc(x);)\n@@ -141,1 +140,0 @@\n-    debug_only(if (UseMallocOnly) return malloc(x);)\n@@ -152,1 +150,0 @@\n-    if (UseMallocOnly) return true;\n","filename":"src\/hotspot\/share\/memory\/arena.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -108,4 +108,0 @@\n-    if (UseMallocOnly) {\n-      free_malloced_objects(state._chunk, state._hwm, state._max, _hwm);\n-    }\n-\n","filename":"src\/hotspot\/share\/memory\/resourceArea.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,5 +35,0 @@\n-  if (UseMallocOnly) {\n-    \/\/ use malloc, but save pointer in res. area for later freeing\n-    char** save = (char**)internal_amalloc(sizeof(char*));\n-    return (*save = (char*)os::malloc(size, mtThread, CURRENT_PC));\n-  }\n","filename":"src\/hotspot\/share\/memory\/resourceArea.inline.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -458,4 +458,0 @@\n-  develop(bool, UseMallocOnly, false,                                       \\\n-          \"Use only malloc\/free for allocation (no resource area\/arena). \"  \\\n-          \"Used to help diagnose memory stomping bugs.\")                    \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,4 +60,2 @@\n-  if (!UseMallocOnly) {\n-    \/\/ contains works differently for malloced mode (and there its broken anyway)\n-    ASSERT_FALSE(ar.contains(p));\n-  }\n+\n+  ASSERT_FALSE(ar.contains(p));\n@@ -66,5 +64,3 @@\n-  if (!UseMallocOnly) {\n-    void* p2 = ar.Amalloc(1);\n-    ASSERT_AMALLOC(ar, p2);\n-    ASSERT_EQ(p2, p);\n-  }\n+  void* p2 = ar.Amalloc(1);\n+  ASSERT_AMALLOC(ar, p2);\n+  ASSERT_EQ(p2, p);\n@@ -84,4 +80,2 @@\n-  if (!UseMallocOnly) {\n-    void* p3 = ar.Amalloc(0x20);\n-    ASSERT_EQ(p3, p1);\n-  }\n+  void* p3 = ar.Amalloc(0x20);\n+  ASSERT_EQ(p3, p1);\n@@ -99,3 +93,1 @@\n-  if (!UseMallocOnly) {\n-    ASSERT_EQ(p2, p1);\n-  }\n+  ASSERT_EQ(p2, p1);\n@@ -160,4 +152,2 @@\n-  if (!UseMallocOnly) {\n-    void* p2 = ar.Amalloc(0x20);\n-    ASSERT_EQ(p2, p);\n-  }\n+  void* p2 = ar.Amalloc(0x20);\n+  ASSERT_EQ(p2, p);\n@@ -166,0 +156,1 @@\n+\n@@ -168,2 +159,1 @@\n-  if (!UseMallocOnly) {\n-    Arena ar(mtTest);\n+  Arena ar(mtTest);\n@@ -171,3 +161,3 @@\n-    void* p1 = ar.Amalloc(0x200);\n-    ASSERT_AMALLOC(ar, p1);\n-    GtestUtils::mark_range(p1, 0x200);\n+  void* p1 = ar.Amalloc(0x200);\n+  ASSERT_AMALLOC(ar, p1);\n+  GtestUtils::mark_range(p1, 0x200);\n@@ -175,3 +165,3 @@\n-    void* p2 = ar.Arealloc(p1, 0x200, 0x100);\n-    ASSERT_EQ(p1, p2);\n-    ASSERT_RANGE_IS_MARKED(p2, 0x100); \/\/ realloc should preserve old content\n+  void* p2 = ar.Arealloc(p1, 0x200, 0x100);\n+  ASSERT_EQ(p1, p2);\n+  ASSERT_RANGE_IS_MARKED(p2, 0x100); \/\/ realloc should preserve old content\n@@ -179,4 +169,3 @@\n-    \/\/ A subsequent allocation should be placed right after the end of the first, shrunk, allocation\n-    void* p3 = ar.Amalloc(1);\n-    ASSERT_EQ(p3, ((char*)p1) + 0x100);\n-  }\n+  \/\/ A subsequent allocation should be placed right after the end of the first, shrunk, allocation\n+  void* p3 = ar.Amalloc(1);\n+  ASSERT_EQ(p3, ((char*)p1) + 0x100);\n@@ -196,3 +185,1 @@\n-  if (!UseMallocOnly) {\n-    ASSERT_EQ(p1, p2); \/\/ should still shrink in place\n-  }\n+  ASSERT_EQ(p1, p2); \/\/ should still shrink in place\n@@ -211,3 +198,1 @@\n-  if (!UseMallocOnly) {\n-    ASSERT_EQ(p1, p2);\n-  }\n+  ASSERT_EQ(p1, p2);\n","filename":"test\/hotspot\/gtest\/memory\/test_arena.cpp","additions":23,"deletions":38,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * Note: This runs the Arena portion of the gtests with UseMallocOnly\n- * (restricted to debug since UseMallocOnly is debug-only)\n- *\/\n-\n-\/* @test\n- * @bug 8271242\n- * @summary Run arena tests with UseMallocOnly\n- * @requires vm.debug\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.xml\n- * @requires vm.flagless\n- * @run main\/native GTestWrapper --gtest_filter=Arena* -XX:+UseMallocOnly\n- *\/\n","filename":"test\/hotspot\/jtreg\/gtest\/ArenaGtests.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8007475\n- * @summary Test memory stomp in stack map test\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UseMallocOnly StackMapFrameTest\n- *\/\n-public class StackMapFrameTest {\n-\n-  public static void foo() {\n-    Object o = new Object();\n-  }\n-\n-  public static void main(String args[]) {\n-    for (int i = 0; i < 25000; i++) {\n-      foo();\n-    }\n-  }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/8007475\/StackMapFrameTest.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"}]}