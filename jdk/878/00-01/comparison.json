{"files":[{"patch":"@@ -47,1 +47,1 @@\n-public class MethodHandlesPermuteArgumentsTest extends MethodHandlesTest {\n+public class MethodHandlesPermuteArgumentsTest extends test.java.lang.invoke.MethodHandlesTest {\n@@ -61,0 +61,5 @@\n+\n+        testBadReorderArrayLength();\n+        testBadReorderIndex();\n+        testReturnTypeMismatch();\n+        testReorderTypeMismatch();\n@@ -194,0 +199,52 @@\n+\n+    public void testBadReorderArrayLength() throws Throwable {\n+        MethodHandle mh = MethodHandles.empty(MethodType.methodType(void.class, int.class, int.class, String.class));\n+        MethodType newType = MethodType.methodType(void.class, int.class, String.class);\n+        assertThrows(() -> MethodHandles.permuteArguments(mh, newType, 0, 1),\n+                IllegalArgumentException.class, \".*old type parameter count and reorder array length do not match.*\");\n+    }\n+\n+    public void testBadReorderIndex() throws Throwable {\n+        MethodHandle mh = MethodHandles.empty(MethodType.methodType(void.class, int.class, int.class, String.class));\n+        MethodType newType = MethodType.methodType(void.class, int.class, String.class);\n+        assertThrows(() -> MethodHandles.permuteArguments(mh, newType, 0, 0, 2),\n+                IllegalArgumentException.class, \".*index is out of bounds for new type.*\");\n+        assertThrows(() -> MethodHandles.permuteArguments(mh, newType, 0, 0, -1),\n+                IllegalArgumentException.class, \".*index is out of bounds for new type.*\");\n+    }\n+\n+    public void testReturnTypeMismatch() throws Throwable {\n+        MethodHandle mh = MethodHandles.empty(MethodType.methodType(void.class, int.class, int.class, String.class));\n+        MethodType newType = MethodType.methodType(int.class, int.class, String.class);\n+        assertThrows(() -> MethodHandles.permuteArguments(mh, newType, 0, 0, 1),\n+                IllegalArgumentException.class, \".*return types do not match.*\");\n+    }\n+\n+    public void testReorderTypeMismatch() throws Throwable {\n+        MethodHandle mh = MethodHandles.empty(MethodType.methodType(void.class, int.class, int.class, String.class));\n+        MethodType newType = MethodType.methodType(void.class, double.class, String.class);\n+        assertThrows(() -> MethodHandles.permuteArguments(mh, newType, 0, 0, 1),\n+                IllegalArgumentException.class, \".*parameter types do not match after reorder.*\");\n+    }\n+\n+    private interface RunnableX {\n+        void run() throws Throwable;\n+    }\n+\n+    private static void assertThrows(RunnableX r, Class<?> exceptionClass, String messagePattern) throws Throwable {\n+        try {\n+            r.run();\n+        } catch (Throwable e) {\n+            if (exceptionClass.isInstance(e)) {\n+                assertMatches(e.getMessage(), messagePattern);\n+            } else {\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    private static void assertMatches(String str, String pattern) {\n+        if (!str.matches(pattern)) {\n+            throw new AssertionError(\"'\" + str + \"' did not match the pattern '\" + pattern + \"'.\");\n+        }\n+    }\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandlesPermuteArgumentsTest.java","additions":58,"deletions":1,"binary":false,"changes":59,"status":"modified"}]}