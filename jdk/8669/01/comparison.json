{"files":[{"patch":"@@ -1100,7 +1100,1 @@\n-static void mmap_attach_shared(const char* user, int vmid, char** addr, size_t* sizep, TRAPS) {\n-\n-  char* mapAddress;\n-  int result;\n-  int fd;\n-  size_t size = 0;\n-  const char* luser = NULL;\n+static void mmap_attach_shared(int vmid, char** addr, size_t* sizep, TRAPS) {\n@@ -1115,7 +1109,1 @@\n-\n-  if (user == NULL || strlen(user) == 0) {\n-    luser = get_user_name(vmid, &nspid, CHECK);\n-  }\n-  else {\n-    luser = user;\n-  }\n+  const char* luser = get_user_name(vmid, &nspid, CHECK);\n@@ -1135,3 +1123,1 @@\n-    if (luser != user) {\n-      FREE_C_HEAP_ARRAY(char, luser);\n-    }\n+    FREE_C_HEAP_ARRAY(char, luser);\n@@ -1152,1 +1138,1 @@\n-  if (luser != user) FREE_C_HEAP_ARRAY(char, luser);\n+  FREE_C_HEAP_ARRAY(char, luser);\n@@ -1157,1 +1143,1 @@\n-  fd = open_sharedmem_file(rfilename, file_flags, THREAD);\n+  int fd = open_sharedmem_file(rfilename, file_flags, THREAD);\n@@ -1168,0 +1154,1 @@\n+  size_t size;\n@@ -1176,1 +1163,1 @@\n-  mapAddress = (char*)::mmap((char*)0, size, mmap_prot, MAP_SHARED, fd, 0);\n+  char* mapAddress = (char*)::mmap((char*)0, size, mmap_prot, MAP_SHARED, fd, 0);\n@@ -1178,1 +1165,1 @@\n-  result = ::close(fd);\n+  int result = ::close(fd);\n@@ -1271,1 +1258,1 @@\n-void PerfMemory::attach(const char* user, int vmid, char** addrp, size_t* sizep, TRAPS) {\n+void PerfMemory::attach(int vmid, char** addrp, size_t* sizep, TRAPS) {\n@@ -1279,1 +1266,1 @@\n-  mmap_attach_shared(user, vmid, addrp, sizep, CHECK);\n+  mmap_attach_shared(vmid, addrp, sizep, CHECK);\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":10,"deletions":23,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -1576,1 +1576,1 @@\n-static void open_file_mapping(const char* user, int vmid, char** addrp, size_t* sizep, TRAPS) {\n+static void open_file_mapping(int vmid, char** addrp, size_t* sizep, TRAPS) {\n@@ -1579,4 +1579,0 @@\n-\n-  void *mapAddress = 0;\n-  size_t size = 0;\n-  HANDLE fmh;\n@@ -1585,11 +1581,1 @@\n-  const char* luser = NULL;\n-\n-\n-  \/\/ if a user name wasn't specified, then find the user name for\n-  \/\/ the owner of the target vm.\n-  if (user == NULL || strlen(user) == 0) {\n-    luser = get_user_name(vmid);\n-  }\n-  else {\n-    luser = user;\n-  }\n+  const char* luser = get_user_name(vmid);\n@@ -1610,1 +1596,1 @@\n-    if (luser != user) FREE_C_HEAP_ARRAY(char, luser);\n+    FREE_C_HEAP_ARRAY(char, luser);\n@@ -1629,1 +1615,1 @@\n-  if (luser != user) FREE_C_HEAP_ARRAY(char, luser);\n+  FREE_C_HEAP_ARRAY(char, luser);\n@@ -1634,0 +1620,1 @@\n+  size_t size;\n@@ -1643,2 +1630,1 @@\n-  fmh = open_sharedmem_object(robjectname, ofm_access, CHECK);\n-\n+  HANDLE fmh = open_sharedmem_object(robjectname, ofm_access, CHECK);\n@@ -1648,1 +1634,1 @@\n-  mapAddress = MapViewOfFile(\n+  void* mapAddress = MapViewOfFile(\n@@ -1780,2 +1766,1 @@\n-void PerfMemory::attach(const char* user, int vmid,\n-                        char** addrp, size_t* sizep, TRAPS) {\n+void PerfMemory::attach(int vmid, char** addrp, size_t* sizep, TRAPS) {\n@@ -1789,1 +1774,1 @@\n-  open_file_mapping(user, vmid, addrp, sizep, CHECK);\n+  open_file_mapping(vmid, addrp, sizep, CHECK);\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":9,"deletions":24,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-PERF_ENTRY(jobject, Perf_Attach(JNIEnv *env, jobject unused, jstring user, int vmid))\n+PERF_ENTRY(jobject, Perf_Attach(JNIEnv *env, jobject unused, int vmid))\n@@ -73,9 +73,0 @@\n-  const char* user_utf = NULL;\n-\n-  ResourceMark rm;\n-\n-  {\n-    ThreadToNativeFromVM ttnfv(thread);\n-\n-    user_utf = user == NULL ? NULL : jstr_to_utf(env, user, CHECK_NULL);\n-  }\n@@ -84,1 +75,1 @@\n-  PerfMemory::attach(user_utf, vmid, &address, &capacity, CHECK_NULL);\n+  PerfMemory::attach(vmid, &address, &capacity, CHECK_NULL);\n@@ -297,1 +288,1 @@\n-  {CC \"attach0\",             CC \"(\" JLS \"I)\" BB,  FN_PTR(Perf_Attach)},\n+  {CC \"attach0\",             CC \"(I)\" BB,         FN_PTR(Perf_Attach)},\n","filename":"src\/hotspot\/share\/prims\/perf.cpp","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-    static void attach(const char* user, int vmid, char** addrp, size_t* size, TRAPS);\n+    static void attach(int vmid, char** addrp, size_t* size, TRAPS);\n","filename":"src\/hotspot\/share\/runtime\/perfMemory.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -182,2 +182,1 @@\n-    public ByteBuffer attach(int lvmid)\n-           throws IllegalArgumentException, IOException\n+    public ByteBuffer attach(int lvmid) throws IOException\n@@ -185,54 +184,1 @@\n-        return attachImpl(null, lvmid);\n-    }\n-\n-    \/**\n-     * Attach to the instrumentation buffer for the specified Java virtual\n-     * machine owned by the given user.\n-     * <p>\n-     * This method behaves just as the <code>attach(int lvmid)\n-     * <\/code> method, except that it only searches for Java virtual machines\n-     * owned by the specified user.\n-     *\n-     * @param   user             A <code>String<\/code> object containing the\n-     *                           name of the user that owns the target Java\n-     *                           virtual machine.\n-     * @param   lvmid            an integer that uniquely identifies the\n-     *                           target local Java virtual machine.\n-     * @return  ByteBuffer       a direct allocated byte buffer\n-     * @throws  IllegalArgumentException  The lvmid was invalid.\n-     * @throws  IOException      An I\/O error occurred while trying to acquire\n-     *                           the instrumentation buffer.\n-     * @throws  OutOfMemoryError The instrumentation buffer could not be mapped\n-     *                           into the virtual machine's address space.\n-     * @see     java.nio.ByteBuffer\n-     *\/\n-    public ByteBuffer attach(String user, int lvmid)\n-           throws IllegalArgumentException, IOException\n-    {\n-        return attachImpl(user, lvmid);\n-    }\n-\n-    \/**\n-     * Call the implementation specific attach method.\n-     * <p>\n-     * This method calls into the Java virtual machine to perform the platform\n-     * specific attach method. Buffers returned from this method are\n-     * internally managed as <code>PhantomRefereces<\/code> to provide for\n-     * guaranteed, secure release of the native resources.\n-     *\n-     * @param   user             A <code>String<\/code> object containing the\n-     *                           name of the user that owns the target Java\n-     *                           virtual machine.\n-     * @param   lvmid            an integer that uniquely identifies the\n-     *                           target local Java virtual machine.\n-     * @return  ByteBuffer       a direct allocated byte buffer\n-     * @throws  IllegalArgumentException  The lvmid was invalid.\n-     * @throws  IOException      An I\/O error occurred while trying to acquire\n-     *                           the instrumentation buffer.\n-     * @throws  OutOfMemoryError The instrumentation buffer could not be mapped\n-     *                           into the virtual machine's address space.\n-     *\/\n-    private ByteBuffer attachImpl(String user, int lvmid)\n-            throws IllegalArgumentException, IOException\n-    {\n-        final ByteBuffer b = attach0(user, lvmid);\n+        final ByteBuffer b = attach0(lvmid);\n@@ -289,3 +235,0 @@\n-     * @param   user             A <code>String<\/code> object containing the\n-     *                           name of the user that owns the target Java\n-     *                           virtual machine.\n@@ -301,2 +244,1 @@\n-    private native ByteBuffer attach0(String user, int lvmid)\n-                   throws IllegalArgumentException, IOException;\n+    private native ByteBuffer attach0(int lvmid) throws IOException;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/perf\/Perf.java","additions":3,"deletions":61,"binary":false,"changes":64,"status":"modified"}]}