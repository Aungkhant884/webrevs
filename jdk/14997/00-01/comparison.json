{"files":[{"patch":"@@ -93,1 +93,1 @@\n-     * @implSpec the default implementation for this method copies the contents of the provided Java string\n+     * @implSpec The default implementation for this method copies the contents of the provided Java string\n@@ -107,1 +107,1 @@\n-     * @implSpec the default implementation of this method first calls {@code this.allocate(layout)} to\n+     * @implSpec The default implementation of this method first calls {@code this.allocate(layout)} to\n@@ -127,1 +127,1 @@\n-     * @implSpec the default implementation of this method first calls {@code this.allocate(layout)} to\n+     * @implSpec The default implementation of this method first calls {@code this.allocate(layout)} to\n@@ -147,1 +147,1 @@\n-     * @implSpec the default implementation of this method first calls {@code this.allocate(layout)} to\n+     * @implSpec The default implementation of this method first calls {@code this.allocate(layout)} to\n@@ -167,1 +167,1 @@\n-     * @implSpec the default implementation of this method first calls {@code this.allocate(layout)} to\n+     * @implSpec The default implementation of this method first calls {@code this.allocate(layout)} to\n@@ -187,1 +187,1 @@\n-     * @implSpec the default implementation of this method first calls {@code this.allocate(layout)} to\n+     * @implSpec The default implementation of this method first calls {@code this.allocate(layout)} to\n@@ -207,1 +207,1 @@\n-     * @implSpec the default implementation of this method first calls {@code this.allocate(layout)} to\n+     * @implSpec The default implementation of this method first calls {@code this.allocate(layout)} to\n@@ -227,1 +227,1 @@\n-     * @implSpec the default implementation of this method first calls {@code this.allocate(layout)} to\n+     * @implSpec The default implementation of this method first calls {@code this.allocate(layout)} to\n@@ -249,1 +249,1 @@\n-     * @implSpec the default implementation of this method first calls {@code this.allocate(layout)} to\n+     * @implSpec The default implementation of this method first calls {@code this.allocate(layout)} to\n@@ -265,2 +265,7 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given byte elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E} initialized with the provided {@code E} byte {@code elements}}\n+     *\n+     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n+     * to allocate a segment after which the provided {@code elements} are written into the segment using the\n+     * byte ordering specified by the provided {@code layout}.\n+     *\n@@ -268,2 +273,1 @@\n-     * @param elements the byte elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -276,2 +280,8 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given short elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*2} initialized with the provided {@code E} short {@code elements} using the byte order of\n+     * the provided {@linkplain ValueLayout#order() layout.order()}}\n+     *\n+     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n+     * to allocate a segment after which the provided {@code elements} are written into the segment using the\n+     * byte ordering specified by the provided {@code layout}.\n+     *\n@@ -279,2 +289,1 @@\n-     * @param elements the short elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -287,2 +296,8 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given char elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*2} initialized with the provided {@code E} char {@code elements} using the byte order of\n+     * the provided {@linkplain ValueLayout#order() layout.order()}}\n+     *\n+     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n+     * to allocate a segment after which the provided {@code elements} are written into the segment using the\n+     * byte ordering specified by the provided {@code layout}.\n+     *\n@@ -290,2 +305,1 @@\n-     * @param elements the char elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -298,2 +312,8 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given int elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*4} initialized with the provided {@code E} int {@code elements} using the byte order of\n+     * the provided {@linkplain ValueLayout#order() layout.order()}}\n+     *\n+     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n+     * to allocate a segment after which the provided {@code elements} are written into the segment using the\n+     * byte ordering specified by the provided {@code layout}.\n+     *\n@@ -301,2 +321,1 @@\n-     * @param elements the int elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -309,2 +328,8 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given float elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*4} initialized with the provided {@code E} float {@code elements} using the byte order of\n+     * the provided {@linkplain ValueLayout#order() layout.order()}}\n+     *\n+     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n+     * to allocate a segment after which the provided {@code elements} are written into the segment using the\n+     * byte ordering specified by the provided {@code layout}.\n+     *\n@@ -312,2 +337,1 @@\n-     * @param elements the float elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -320,2 +344,8 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given long elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*8} initialized with the provided {@code E} long {@code elements} using the byte order of\n+     * the provided {@linkplain ValueLayout#order() layout.order()}}\n+     *\n+     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n+     * to allocate a segment after which the provided {@code elements} are written into the segment using the\n+     * byte ordering specified by the provided {@code layout}.\n+     *\n@@ -323,2 +353,1 @@\n-     * @param elements the long elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -331,2 +360,8 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given double elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*8} initialized with the provided {@code E} short {@code elements} using the byte order of\n+     * the provided {@linkplain ValueLayout#order() layout.order()}}\n+     *\n+     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n+     * to allocate a segment after which the provided {@code elements} are written into the segment using the\n+     * byte ordering specified by the provided {@code layout}.\n+     *\n@@ -334,2 +369,1 @@\n-     * @param elements the double elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -344,1 +378,1 @@\n-        MemorySegment addr = allocateArray(Objects.requireNonNull(elementLayout), size);\n+        MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n@@ -347,1 +381,1 @@\n-                    addr, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n+                    seg, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n@@ -349,1 +383,1 @@\n-        return addr;\n+        return seg;\n@@ -354,1 +388,3 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout.byteSize(), layout.byteAlignment())}.\n+     *\n+     * @implSpec The default implementation for this method calls {@code this.allocate(layout.byteSize(), layout.byteAlignment())}.\n+     *\n@@ -365,1 +401,3 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(MemoryLayout.sequenceLayout(count, elementLayout))}.\n+     *\n+     * @implSpec The default implementation for this method calls {@code this.allocate(MemoryLayout.sequenceLayout(count, elementLayout))}.\n+     *\n@@ -382,1 +420,3 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(byteSize, 1)}.\n+     *\n+     * @implSpec The default implementation for this method calls {@code this.allocate(byteSize, 1)}.\n+     *\n@@ -393,0 +433,1 @@\n+     *\n@@ -408,0 +449,1 @@\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":85,"deletions":43,"binary":false,"changes":128,"status":"modified"}]}