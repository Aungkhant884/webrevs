{"files":[{"patch":"@@ -96,1 +96,1 @@\n-     * @return a new native segment containing the converted C string.\n+     * @return a new segment containing the converted C string.\n@@ -104,2 +104,7 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given byte value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of 1\n+     * initialized with the provided byte {@code value}}.\n+     *\n+     * @implSpec the default implementation of this method first calls {@code this.allocate(layout)} to\n+     * allocate a segment after which the provided {@code value} is written into the segment using the\n+     * byte ordering specified by the provided {@code layout}.\n+     *\n@@ -107,2 +112,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -113,3 +117,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -119,2 +123,8 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given char value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of 2\n+     * initialized with the provided char {@code value} using the byte order of the provided\n+     * {@linkplain ValueLayout#order() layout.order()}}\n+     *\n+     * @implSpec the default implementation of this method first calls {@code this.allocate(layout)} to\n+     * allocate a segment after which the provided {@code value} is written into the segment using the\n+     * byte ordering specified by the provided {@code layout}.\n+     *\n@@ -122,2 +132,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -128,3 +137,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -134,2 +143,8 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given short value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of 2\n+     * initialized with the provided short {@code value} using the byte order of the provided\n+     * {@linkplain ValueLayout#order() layout.order()}}\n+     *\n+     * @implSpec the default implementation of this method first calls {@code this.allocate(layout)} to\n+     * allocate a segment after which the provided {@code value} is written into the segment using the\n+     * byte ordering specified by the provided {@code layout}.\n+     *\n@@ -137,2 +152,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -143,3 +157,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -149,2 +163,8 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given int value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of 4\n+     * initialized with the provided int {@code value} using the byte order of the provided\n+     * {@linkplain ValueLayout#order() layout.order()}}\n+     *\n+     * @implSpec the default implementation of this method first calls {@code this.allocate(layout)} to\n+     * allocate a segment after which the provided {@code value} is written into the segment using the\n+     * byte ordering specified by the provided {@code layout}.\n+     *\n@@ -152,2 +172,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -158,3 +177,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -164,2 +183,8 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given float value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of 4\n+     * initialized with the provided float {@code value} using the byte order of the provided\n+     * {@linkplain ValueLayout#order() layout.order()}}\n+     *\n+     * @implSpec the default implementation of this method first calls {@code this.allocate(layout)} to\n+     * allocate a segment after which the provided {@code value} is written into the segment using the\n+     * byte ordering specified by the provided {@code layout}.\n+     *\n@@ -167,2 +192,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -173,3 +197,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -179,2 +203,8 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given long value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of 8\n+     * initialized with the provided long {@code value} using the byte order of the provided\n+     * {@linkplain ValueLayout#order() layout.order()}}\n+     *\n+     * @implSpec the default implementation of this method first calls {@code this.allocate(layout)} to\n+     * allocate a segment after which the provided {@code value} is written into the segment using the\n+     * byte ordering specified by the provided {@code layout}.\n+     *\n@@ -182,2 +212,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -188,3 +217,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -194,2 +223,8 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given double value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of 4\n+     * initialized with the provided double {@code value} using the byte order of the provided\n+     * {@linkplain ValueLayout#order() layout.order()}}\n+     *\n+     * @implSpec the default implementation of this method first calls {@code this.allocate(layout)} to\n+     * allocate a segment after which the provided {@code value} is written into the segment using the\n+     * byte ordering specified by the provided {@code layout}.\n+     *\n@@ -197,2 +232,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -203,3 +237,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -209,1 +243,4 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given address value.\n+     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} as specified by the\n+     * provided {@linkplain AddressLayout#byteSize() layout.byteSize()} initialized with the provided address {@code value}\n+     * using the byte order of the provided {@link ValueLayout#order() layout.order()}}\n+     * <p>\n@@ -211,1 +248,5 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     *\n+     * @implSpec the default implementation of this method first calls {@code this.allocate(layout)} to\n+     * allocate a segment after which the provided {@code value} is written into the segment using the\n+     * byte ordering specified by the provided {@code layout}.\n+     *\n@@ -213,2 +254,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -219,3 +259,3 @@\n-        MemorySegment segment = allocate(layout);\n-        layout.varHandle().set(segment, value);\n-        return segment;\n+        MemorySegment seg = allocate(layout);\n+        layout.varHandle().set(seg, value);\n+        return seg;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":97,"deletions":57,"binary":false,"changes":154,"status":"modified"}]}