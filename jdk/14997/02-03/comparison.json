{"files":[{"patch":"@@ -80,2 +80,1 @@\n-     * Converts a Java string into a UTF-8 encoded, null-terminated C string,\n-     * storing the result into a memory segment.\n+     * {@return a new memory segment with a Java string converted into a UTF-8 encoded, null-terminated C string}\n@@ -96,1 +95,0 @@\n-     * @return a new segment containing the converted C string.\n@@ -109,4 +107,2 @@\n-     *  Objects.requireNonNull(layout);\n-     *  VarHandle handle = layout.varHandle();\n-     *  MemorySegment seg = allocate(layout);\n-     *  handle.set(seg, value);\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n@@ -133,4 +129,2 @@\n-     *  Objects.requireNonNull(layout);\n-     *  VarHandle handle = layout.varHandle();\n-     *  MemorySegment seg = allocate(layout);\n-     *  handle.set(seg, value);\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n@@ -157,4 +151,2 @@\n-     *  Objects.requireNonNull(layout);\n-     *  VarHandle handle = layout.varHandle();\n-     *  MemorySegment seg = allocate(layout);\n-     *  handle.set(seg, value);\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n@@ -181,4 +173,2 @@\n-     *  Objects.requireNonNull(layout);\n-     *  VarHandle handle = layout.varHandle();\n-     *  MemorySegment seg = allocate(layout);\n-     *  handle.set(seg, value);\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n@@ -205,4 +195,2 @@\n-     *  Objects.requireNonNull(layout);\n-     *  VarHandle handle = layout.varHandle();\n-     *  MemorySegment seg = allocate(layout);\n-     *  handle.set(seg, value);\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n@@ -229,4 +217,2 @@\n-     *  Objects.requireNonNull(layout);\n-     *  VarHandle handle = layout.varHandle();\n-     *  MemorySegment seg = allocate(layout);\n-     *  handle.set(seg, value);\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n@@ -253,4 +239,2 @@\n-     *  Objects.requireNonNull(layout);\n-     *  VarHandle handle = layout.varHandle();\n-     *  MemorySegment seg = allocate(layout);\n-     *  handle.set(seg, value);\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n@@ -280,4 +264,2 @@\n-     *  Objects.requireNonNull(layout);\n-     *  VarHandle handle = layout.varHandle();\n-     *  MemorySegment seg = allocate(layout);\n-     *  handle.set(seg, value);\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n@@ -303,3 +285,8 @@\n-     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n-     * to allocate a segment after which the provided {@code elements} are written into the segment as\n-     * specified by the provided {@code layout}.\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(MemorySegment.ofArray(elements), elementLayout, 0,\n+     *                     seg, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n+     *  return seg;\n+     * }\n@@ -319,3 +306,8 @@\n-     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n-     * to allocate a segment after which the provided {@code elements} are written into the segment as\n-     * specified by the provided {@code layout}.\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(MemorySegment.ofArray(elements), elementLayout, 0,\n+     *                     seg, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n+     *  return seg;\n+     * }\n@@ -335,3 +327,8 @@\n-     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n-     * to allocate a segment after which the provided {@code elements} are written into the segment as\n-     * specified by the provided {@code layout}.\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(MemorySegment.ofArray(elements), elementLayout, 0,\n+     *                     seg, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n+     *  return seg;\n+     * }\n@@ -351,3 +348,8 @@\n-     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n-     * to allocate a segment after which the provided {@code elements} are written into the segment as\n-     * specified by the provided {@code layout}.\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(MemorySegment.ofArray(elements), elementLayout, 0,\n+     *                     seg, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n+     *  return seg;\n+     * }\n@@ -367,3 +369,8 @@\n-     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n-     * to allocate a segment after which the provided {@code elements} are written into the segment as\n-     * specified by the provided {@code layout}.\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(MemorySegment.ofArray(elements), elementLayout, 0,\n+     *                     seg, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n+     *  return seg;\n+     * }\n@@ -383,3 +390,8 @@\n-     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n-     * to allocate a segment after which the provided {@code elements} are written into the segment as\n-     * specified by the provided {@code layout}.\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(MemorySegment.ofArray(elements), elementLayout, 0,\n+     *                     seg, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n+     *  return seg;\n+     * }\n@@ -399,3 +411,8 @@\n-     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n-     * to allocate a segment after which the provided {@code elements} are written into the segment as\n-     * specified by the provided {@code layout}.\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(MemorySegment.ofArray(elements), elementLayout, 0,\n+     *                     seg, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n+     *  return seg;\n+     * }\n@@ -472,1 +489,1 @@\n-     *                                  or if {@code byteAlignment} is not a power of 2.\n+     * or if {@code byteAlignment} is not a power of 2.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":74,"deletions":57,"binary":false,"changes":131,"status":"modified"}]}