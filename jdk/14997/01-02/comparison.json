{"files":[{"patch":"@@ -104,6 +104,11 @@\n-     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of 1\n-     * initialized with the provided byte {@code value}}.\n-     *\n-     * @implSpec The default implementation of this method first calls {@code this.allocate(layout)} to\n-     * allocate a segment after which the provided {@code value} is written into the segment using the\n-     * byte ordering specified by the provided {@code layout}.\n+     * {@return a new memory segment initialized with the provided {@code byte} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  Objects.requireNonNull(layout);\n+     *  VarHandle handle = layout.varHandle();\n+     *  MemorySegment seg = allocate(layout);\n+     *  handle.set(seg, value);\n+     *  return seg;\n+     * }\n@@ -123,7 +128,11 @@\n-     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of 2\n-     * initialized with the provided char {@code value} using the byte order of the provided\n-     * {@linkplain ValueLayout#order() layout.order()}}\n-     *\n-     * @implSpec The default implementation of this method first calls {@code this.allocate(layout)} to\n-     * allocate a segment after which the provided {@code value} is written into the segment using the\n-     * byte ordering specified by the provided {@code layout}.\n+     * {@return a new memory segment initialized with the provided {@code char} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  Objects.requireNonNull(layout);\n+     *  VarHandle handle = layout.varHandle();\n+     *  MemorySegment seg = allocate(layout);\n+     *  handle.set(seg, value);\n+     *  return seg;\n+     * }\n@@ -143,7 +152,11 @@\n-     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of 2\n-     * initialized with the provided short {@code value} using the byte order of the provided\n-     * {@linkplain ValueLayout#order() layout.order()}}\n-     *\n-     * @implSpec The default implementation of this method first calls {@code this.allocate(layout)} to\n-     * allocate a segment after which the provided {@code value} is written into the segment using the\n-     * byte ordering specified by the provided {@code layout}.\n+     * {@return a new memory segment initialized with the provided {@code short} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  Objects.requireNonNull(layout);\n+     *  VarHandle handle = layout.varHandle();\n+     *  MemorySegment seg = allocate(layout);\n+     *  handle.set(seg, value);\n+     *  return seg;\n+     * }\n@@ -163,7 +176,11 @@\n-     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of 4\n-     * initialized with the provided int {@code value} using the byte order of the provided\n-     * {@linkplain ValueLayout#order() layout.order()}}\n-     *\n-     * @implSpec The default implementation of this method first calls {@code this.allocate(layout)} to\n-     * allocate a segment after which the provided {@code value} is written into the segment using the\n-     * byte ordering specified by the provided {@code layout}.\n+     * {@return a new memory segment initialized with the provided {@code int} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  Objects.requireNonNull(layout);\n+     *  VarHandle handle = layout.varHandle();\n+     *  MemorySegment seg = allocate(layout);\n+     *  handle.set(seg, value);\n+     *  return seg;\n+     * }\n@@ -183,7 +200,11 @@\n-     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of 4\n-     * initialized with the provided float {@code value} using the byte order of the provided\n-     * {@linkplain ValueLayout#order() layout.order()}}\n-     *\n-     * @implSpec The default implementation of this method first calls {@code this.allocate(layout)} to\n-     * allocate a segment after which the provided {@code value} is written into the segment using the\n-     * byte ordering specified by the provided {@code layout}.\n+     * {@return a new memory segment initialized with the provided {@code float} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  Objects.requireNonNull(layout);\n+     *  VarHandle handle = layout.varHandle();\n+     *  MemorySegment seg = allocate(layout);\n+     *  handle.set(seg, value);\n+     *  return seg;\n+     * }\n@@ -203,7 +224,11 @@\n-     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of 8\n-     * initialized with the provided long {@code value} using the byte order of the provided\n-     * {@linkplain ValueLayout#order() layout.order()}}\n-     *\n-     * @implSpec The default implementation of this method first calls {@code this.allocate(layout)} to\n-     * allocate a segment after which the provided {@code value} is written into the segment using the\n-     * byte ordering specified by the provided {@code layout}.\n+     * {@return a new memory segment initialized with the provided {@code long} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  Objects.requireNonNull(layout);\n+     *  VarHandle handle = layout.varHandle();\n+     *  MemorySegment seg = allocate(layout);\n+     *  handle.set(seg, value);\n+     *  return seg;\n+     * }\n@@ -223,7 +248,11 @@\n-     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of 4\n-     * initialized with the provided double {@code value} using the byte order of the provided\n-     * {@linkplain ValueLayout#order() layout.order()}}\n-     *\n-     * @implSpec The default implementation of this method first calls {@code this.allocate(layout)} to\n-     * allocate a segment after which the provided {@code value} is written into the segment using the\n-     * byte ordering specified by the provided {@code layout}.\n+     * {@return a new memory segment initialized with the provided {@code double} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  Objects.requireNonNull(layout);\n+     *  VarHandle handle = layout.varHandle();\n+     *  MemorySegment seg = allocate(layout);\n+     *  handle.set(seg, value);\n+     *  return seg;\n+     * }\n@@ -243,3 +272,2 @@\n-     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} as specified by the\n-     * provided {@linkplain AddressLayout#byteSize() layout.byteSize()} initialized with the provided address {@code value}\n-     * using the byte order of the provided {@link ValueLayout#order() layout.order()}}\n+     * {@return a new memory segment initialized with the address of the provided {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n@@ -249,3 +277,9 @@\n-     * @implSpec The default implementation of this method first calls {@code this.allocate(layout)} to\n-     * allocate a segment after which the provided {@code value} is written into the segment using the\n-     * byte ordering specified by the provided {@code layout}.\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  Objects.requireNonNull(value);\n+     *  Objects.requireNonNull(layout);\n+     *  VarHandle handle = layout.varHandle();\n+     *  MemorySegment seg = allocate(layout);\n+     *  handle.set(seg, value);\n+     *  return seg;\n+     * }\n@@ -265,2 +299,3 @@\n-     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n-     * {@code E} initialized with the provided {@code E} byte {@code elements}}\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code byte} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n@@ -269,2 +304,2 @@\n-     * to allocate a segment after which the provided {@code elements} are written into the segment using the\n-     * byte ordering specified by the provided {@code layout}.\n+     * to allocate a segment after which the provided {@code elements} are written into the segment as\n+     * specified by the provided {@code layout}.\n@@ -280,3 +315,3 @@\n-     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n-     * {@code E*2} initialized with the provided {@code E} short {@code elements} using the byte order of\n-     * the provided {@linkplain ValueLayout#order() layout.order()}}\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code short} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n@@ -285,2 +320,2 @@\n-     * to allocate a segment after which the provided {@code elements} are written into the segment using the\n-     * byte ordering specified by the provided {@code layout}.\n+     * to allocate a segment after which the provided {@code elements} are written into the segment as\n+     * specified by the provided {@code layout}.\n@@ -296,3 +331,3 @@\n-     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n-     * {@code E*2} initialized with the provided {@code E} char {@code elements} using the byte order of\n-     * the provided {@linkplain ValueLayout#order() layout.order()}}\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code char} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n@@ -301,2 +336,2 @@\n-     * to allocate a segment after which the provided {@code elements} are written into the segment using the\n-     * byte ordering specified by the provided {@code layout}.\n+     * to allocate a segment after which the provided {@code elements} are written into the segment as\n+     * specified by the provided {@code layout}.\n@@ -312,3 +347,3 @@\n-     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n-     * {@code E*4} initialized with the provided {@code E} int {@code elements} using the byte order of\n-     * the provided {@linkplain ValueLayout#order() layout.order()}}\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code int} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n@@ -317,2 +352,2 @@\n-     * to allocate a segment after which the provided {@code elements} are written into the segment using the\n-     * byte ordering specified by the provided {@code layout}.\n+     * to allocate a segment after which the provided {@code elements} are written into the segment as\n+     * specified by the provided {@code layout}.\n@@ -328,3 +363,3 @@\n-     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n-     * {@code E*4} initialized with the provided {@code E} float {@code elements} using the byte order of\n-     * the provided {@linkplain ValueLayout#order() layout.order()}}\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code float} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n@@ -333,2 +368,2 @@\n-     * to allocate a segment after which the provided {@code elements} are written into the segment using the\n-     * byte ordering specified by the provided {@code layout}.\n+     * to allocate a segment after which the provided {@code elements} are written into the segment as\n+     * specified by the provided {@code layout}.\n@@ -344,3 +379,3 @@\n-     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n-     * {@code E*8} initialized with the provided {@code E} long {@code elements} using the byte order of\n-     * the provided {@linkplain ValueLayout#order() layout.order()}}\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code long} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n@@ -349,2 +384,2 @@\n-     * to allocate a segment after which the provided {@code elements} are written into the segment using the\n-     * byte ordering specified by the provided {@code layout}.\n+     * to allocate a segment after which the provided {@code elements} are written into the segment as\n+     * specified by the provided {@code layout}.\n@@ -360,3 +395,3 @@\n-     * {@return a newly allocated memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n-     * {@code E*8} initialized with the provided {@code E} short {@code elements} using the byte order of\n-     * the provided {@linkplain ValueLayout#order() layout.order()}}\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code double} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n@@ -365,2 +400,2 @@\n-     * to allocate a segment after which the provided {@code elements} are written into the segment using the\n-     * byte ordering specified by the provided {@code layout}.\n+     * to allocate a segment after which the provided {@code elements} are written into the segment as\n+     * specified by the provided {@code layout}.\n@@ -387,1 +422,1 @@\n-     * Allocates a memory segment with the given layout.\n+     * {@return a new memory segment with the given layout}\n@@ -389,1 +424,2 @@\n-     * @implSpec The default implementation for this method calls {@code this.allocate(layout.byteSize(), layout.byteAlignment())}.\n+     * @implSpec The default implementation for this method calls\n+     * {@code this.allocate(layout.byteSize(), layout.byteAlignment())}.\n@@ -392,1 +428,0 @@\n-     * @return a segment for the newly allocated memory block.\n@@ -400,1 +435,1 @@\n-     * Allocates a memory segment with the given element layout and size.\n+     * {@return a new memory segment with the given {@code elementLayout} and {@code count}}\n@@ -402,1 +437,2 @@\n-     * @implSpec The default implementation for this method calls {@code this.allocate(MemoryLayout.sequenceLayout(count, elementLayout))}.\n+     * @implSpec The default implementation for this method calls\n+     * {@code this.allocate(MemoryLayout.sequenceLayout(count, elementLayout))}.\n@@ -406,1 +442,0 @@\n-     * @return a segment for the newly allocated memory block.\n@@ -419,1 +454,1 @@\n-     * Allocates a memory segment with the given size.\n+     * {@return a new memory segment with the given {@code byteSize}}\n@@ -421,1 +456,2 @@\n-     * @implSpec The default implementation for this method calls {@code this.allocate(byteSize, 1)}.\n+     * @implSpec The default implementation for this method calls\n+     * {@code this.allocate(byteSize, 1)}.\n@@ -424,1 +460,0 @@\n-     * @return a segment for the newly allocated memory block.\n@@ -432,1 +467,1 @@\n-     * Allocates a memory segment with the given size and alignment constraint.\n+     * {@return a new memory segment with the given {@code byteSize} and {@code byteAlignment}}\n@@ -436,1 +471,0 @@\n-     * @return a segment for the newly allocated memory block.\n@@ -438,1 +472,1 @@\n-     * or if {@code byteAlignment} is not a power of 2.\n+     *                                  or if {@code byteAlignment} is not a power of 2.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":134,"deletions":100,"binary":false,"changes":234,"status":"modified"}]}