{"files":[{"patch":"@@ -93,1 +93,1 @@\n-     * @implSpec the default implementation for this method copies the contents of the provided Java string\n+     * @implSpec The default implementation for this method copies the contents of the provided Java string\n@@ -96,1 +96,1 @@\n-     * @return a new native segment containing the converted C string.\n+     * @return a new segment containing the converted C string.\n@@ -104,2 +104,12 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given byte value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code byte} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  Objects.requireNonNull(layout);\n+     *  VarHandle handle = layout.varHandle();\n+     *  MemorySegment seg = allocate(layout);\n+     *  handle.set(seg, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -107,2 +117,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -113,3 +122,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -119,2 +128,12 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given char value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code char} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  Objects.requireNonNull(layout);\n+     *  VarHandle handle = layout.varHandle();\n+     *  MemorySegment seg = allocate(layout);\n+     *  handle.set(seg, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -122,2 +141,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -128,3 +146,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -134,2 +152,12 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given short value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code short} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  Objects.requireNonNull(layout);\n+     *  VarHandle handle = layout.varHandle();\n+     *  MemorySegment seg = allocate(layout);\n+     *  handle.set(seg, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -137,2 +165,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -143,3 +170,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -149,2 +176,12 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given int value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code int} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  Objects.requireNonNull(layout);\n+     *  VarHandle handle = layout.varHandle();\n+     *  MemorySegment seg = allocate(layout);\n+     *  handle.set(seg, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -152,2 +189,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -158,3 +194,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -164,2 +200,12 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given float value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code float} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  Objects.requireNonNull(layout);\n+     *  VarHandle handle = layout.varHandle();\n+     *  MemorySegment seg = allocate(layout);\n+     *  handle.set(seg, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -167,2 +213,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -173,3 +218,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -179,2 +224,12 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given long value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code long} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  Objects.requireNonNull(layout);\n+     *  VarHandle handle = layout.varHandle();\n+     *  MemorySegment seg = allocate(layout);\n+     *  handle.set(seg, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -182,2 +237,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -188,3 +242,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -194,2 +248,12 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given double value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code double} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  Objects.requireNonNull(layout);\n+     *  VarHandle handle = layout.varHandle();\n+     *  MemorySegment seg = allocate(layout);\n+     *  handle.set(seg, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -197,2 +261,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -203,3 +266,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -209,1 +272,3 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given address value.\n+     * {@return a new memory segment initialized with the address of the provided {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     * <p>\n@@ -211,1 +276,11 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  Objects.requireNonNull(value);\n+     *  Objects.requireNonNull(layout);\n+     *  VarHandle handle = layout.varHandle();\n+     *  MemorySegment seg = allocate(layout);\n+     *  handle.set(seg, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -213,2 +288,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -219,3 +293,3 @@\n-        MemorySegment segment = allocate(layout);\n-        layout.varHandle().set(segment, value);\n-        return segment;\n+        MemorySegment seg = allocate(layout);\n+        layout.varHandle().set(seg, value);\n+        return seg;\n@@ -225,2 +299,8 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given byte elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code byte} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n+     * to allocate a segment after which the provided {@code elements} are written into the segment as\n+     * specified by the provided {@code layout}.\n+     *\n@@ -228,2 +308,1 @@\n-     * @param elements the byte elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -236,2 +315,8 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given short elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code short} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n+     * to allocate a segment after which the provided {@code elements} are written into the segment as\n+     * specified by the provided {@code layout}.\n+     *\n@@ -239,2 +324,1 @@\n-     * @param elements the short elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -247,2 +331,8 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given char elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code char} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n+     * to allocate a segment after which the provided {@code elements} are written into the segment as\n+     * specified by the provided {@code layout}.\n+     *\n@@ -250,2 +340,1 @@\n-     * @param elements the char elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -258,2 +347,8 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given int elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code int} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n+     * to allocate a segment after which the provided {@code elements} are written into the segment as\n+     * specified by the provided {@code layout}.\n+     *\n@@ -261,2 +356,1 @@\n-     * @param elements the int elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -269,2 +363,8 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given float elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code float} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n+     * to allocate a segment after which the provided {@code elements} are written into the segment as\n+     * specified by the provided {@code layout}.\n+     *\n@@ -272,2 +372,1 @@\n-     * @param elements the float elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -280,2 +379,8 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given long elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code long} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n+     * to allocate a segment after which the provided {@code elements} are written into the segment as\n+     * specified by the provided {@code layout}.\n+     *\n@@ -283,2 +388,1 @@\n-     * @param elements the long elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -291,2 +395,8 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given double elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code double} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation of this method first calls {@code this.allocateArray(layout, array.length)}\n+     * to allocate a segment after which the provided {@code elements} are written into the segment as\n+     * specified by the provided {@code layout}.\n+     *\n@@ -294,2 +404,1 @@\n-     * @param elements the double elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -304,1 +413,1 @@\n-        MemorySegment addr = allocateArray(Objects.requireNonNull(elementLayout), size);\n+        MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n@@ -307,1 +416,1 @@\n-                    addr, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n+                    seg, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n@@ -309,1 +418,1 @@\n-        return addr;\n+        return seg;\n@@ -313,2 +422,5 @@\n-     * Allocates a memory segment with the given layout.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout.byteSize(), layout.byteAlignment())}.\n+     * {@return a new memory segment with the given layout}\n+     *\n+     * @implSpec The default implementation for this method calls\n+     * {@code this.allocate(layout.byteSize(), layout.byteAlignment())}.\n+     *\n@@ -316,1 +428,0 @@\n-     * @return a segment for the newly allocated memory block.\n@@ -324,2 +435,5 @@\n-     * Allocates a memory segment with the given element layout and size.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(MemoryLayout.sequenceLayout(count, elementLayout))}.\n+     * {@return a new memory segment with the given {@code elementLayout} and {@code count}}\n+     *\n+     * @implSpec The default implementation for this method calls\n+     * {@code this.allocate(MemoryLayout.sequenceLayout(count, elementLayout))}.\n+     *\n@@ -328,1 +442,0 @@\n-     * @return a segment for the newly allocated memory block.\n@@ -341,2 +454,5 @@\n-     * Allocates a memory segment with the given size.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(byteSize, 1)}.\n+     * {@return a new memory segment with the given {@code byteSize}}\n+     *\n+     * @implSpec The default implementation for this method calls\n+     * {@code this.allocate(byteSize, 1)}.\n+     *\n@@ -344,1 +460,0 @@\n-     * @return a segment for the newly allocated memory block.\n@@ -352,1 +467,2 @@\n-     * Allocates a memory segment with the given size and alignment constraint.\n+     * {@return a new memory segment with the given {@code byteSize} and {@code byteAlignment}}\n+     *\n@@ -355,1 +471,0 @@\n-     * @return a segment for the newly allocated memory block.\n@@ -357,1 +472,1 @@\n-     * or if {@code byteAlignment} is not a power of 2.\n+     *                                  or if {@code byteAlignment} is not a power of 2.\n@@ -368,0 +483,1 @@\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":217,"deletions":101,"binary":false,"changes":318,"status":"modified"}]}