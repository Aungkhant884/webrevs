{"files":[{"patch":"@@ -80,2 +80,1 @@\n-     * Converts a Java string into a UTF-8 encoded, null-terminated C string,\n-     * storing the result into a memory segment.\n+     * {@return a new memory segment with a Java string converted into a UTF-8 encoded, null-terminated C string}\n@@ -93,1 +92,1 @@\n-     * @implSpec the default implementation for this method copies the contents of the provided Java string\n+     * @implSpec The default implementation for this method copies the contents of the provided Java string\n@@ -96,1 +95,0 @@\n-     * @return a new native segment containing the converted C string.\n@@ -104,2 +102,10 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given byte value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code byte} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -107,2 +113,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -113,3 +118,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -119,2 +124,10 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given char value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code char} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -122,2 +135,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -128,3 +140,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -134,2 +146,10 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given short value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code short} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -137,2 +157,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -143,3 +162,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -149,2 +168,10 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given int value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code int} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -152,2 +179,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -158,3 +184,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -164,2 +190,10 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given float value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code float} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -167,2 +201,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -173,3 +206,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -179,2 +212,10 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given long value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code long} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -182,2 +223,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -188,3 +228,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -194,2 +234,10 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given double value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code double} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -197,2 +245,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -203,3 +250,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -209,1 +256,3 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given address value.\n+     * {@return a new memory segment initialized with the address of the provided {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     * <p>\n@@ -211,1 +260,9 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  Objects.requireNonNull(value);\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -213,2 +270,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -219,3 +275,3 @@\n-        MemorySegment segment = allocate(layout);\n-        layout.varHandle().set(segment, value);\n-        return segment;\n+        MemorySegment seg = allocate(layout);\n+        layout.varHandle().set(seg, value);\n+        return seg;\n@@ -225,2 +281,13 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given byte elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code byte} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(MemorySegment.ofArray(elements), elementLayout, 0,\n+     *                     seg, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n+     *  return seg;\n+     * }\n+     *\n@@ -228,2 +295,1 @@\n-     * @param elements the byte elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -236,2 +302,13 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given short elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code short} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(MemorySegment.ofArray(elements), elementLayout, 0,\n+     *                     seg, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n+     *  return seg;\n+     * }\n+     *\n@@ -239,2 +316,1 @@\n-     * @param elements the short elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -247,2 +323,13 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given char elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code char} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(MemorySegment.ofArray(elements), elementLayout, 0,\n+     *                     seg, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n+     *  return seg;\n+     * }\n+     *\n@@ -250,2 +337,1 @@\n-     * @param elements the char elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -258,2 +344,13 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given int elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code int} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(MemorySegment.ofArray(elements), elementLayout, 0,\n+     *                     seg, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n+     *  return seg;\n+     * }\n+     *\n@@ -261,2 +358,1 @@\n-     * @param elements the int elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -269,2 +365,13 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given float elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code float} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(MemorySegment.ofArray(elements), elementLayout, 0,\n+     *                     seg, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n+     *  return seg;\n+     * }\n+     *\n@@ -272,2 +379,1 @@\n-     * @param elements the float elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -280,2 +386,13 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given long elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code long} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(MemorySegment.ofArray(elements), elementLayout, 0,\n+     *                     seg, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n+     *  return seg;\n+     * }\n+     *\n@@ -283,2 +400,1 @@\n-     * @param elements the long elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -291,2 +407,13 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given double elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code double} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(MemorySegment.ofArray(elements), elementLayout, 0,\n+     *                     seg, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n+     *  return seg;\n+     * }\n+     *\n@@ -294,2 +421,1 @@\n-     * @param elements the double elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -304,1 +430,1 @@\n-        MemorySegment addr = allocateArray(Objects.requireNonNull(elementLayout), size);\n+        MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n@@ -307,1 +433,1 @@\n-                    addr, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n+                    seg, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n@@ -309,1 +435,1 @@\n-        return addr;\n+        return seg;\n@@ -313,2 +439,5 @@\n-     * Allocates a memory segment with the given layout.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout.byteSize(), layout.byteAlignment())}.\n+     * {@return a new memory segment with the given layout}\n+     *\n+     * @implSpec The default implementation for this method calls\n+     * {@code this.allocate(layout.byteSize(), layout.byteAlignment())}.\n+     *\n@@ -316,1 +445,0 @@\n-     * @return a segment for the newly allocated memory block.\n@@ -324,2 +452,5 @@\n-     * Allocates a memory segment with the given element layout and size.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(MemoryLayout.sequenceLayout(count, elementLayout))}.\n+     * {@return a new memory segment with the given {@code elementLayout} and {@code count}}\n+     *\n+     * @implSpec The default implementation for this method calls\n+     * {@code this.allocate(MemoryLayout.sequenceLayout(count, elementLayout))}.\n+     *\n@@ -328,1 +459,0 @@\n-     * @return a segment for the newly allocated memory block.\n@@ -341,2 +471,5 @@\n-     * Allocates a memory segment with the given size.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(byteSize, 1)}.\n+     * {@return a new memory segment with the given {@code byteSize}}\n+     *\n+     * @implSpec The default implementation for this method calls\n+     * {@code this.allocate(byteSize, 1)}.\n+     *\n@@ -344,1 +477,0 @@\n-     * @return a segment for the newly allocated memory block.\n@@ -352,1 +484,2 @@\n-     * Allocates a memory segment with the given size and alignment constraint.\n+     * {@return a new memory segment with the given {@code byteSize} and {@code byteAlignment}}\n+     *\n@@ -355,1 +488,0 @@\n-     * @return a segment for the newly allocated memory block.\n@@ -368,0 +500,1 @@\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":235,"deletions":102,"binary":false,"changes":337,"status":"modified"}]}