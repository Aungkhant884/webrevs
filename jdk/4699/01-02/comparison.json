{"files":[{"patch":"@@ -5310,0 +5310,1 @@\n+    \/\/ Input \"src\" is a vector of boolean with \"0\/1\" as the element values.\n@@ -5324,0 +5325,1 @@\n+    \/\/ Input \"src\" is a vector of boolean with \"0\/1\" as the element values.\n@@ -5330,1 +5332,1 @@\n-instruct vmask_firsttrue_LT8B(iRegINoSp dst, vecD src, vecD tmp, rFlagsReg cr) %{\n+instruct vmask_firsttrue_LT8B(iRegINoSp dst, vecD src, rFlagsReg cr) %{\n@@ -5334,2 +5336,2 @@\n-  effect(TEMP_DEF dst, TEMP tmp, KILL cr);\n-  ins_cost(8 * INSN_COST);\n+  effect(KILL cr);\n+  ins_cost(7 * INSN_COST);\n@@ -5338,4 +5340,4 @@\n-    \/\/ Revert the bits and count the leading zero bytes. Get the maximum value\n-    \/\/ between the vector length and the leading zero bytes.\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B, as_FloatRegister($src$$reg));\n-    __ fmovd($dst$$Register, as_FloatRegister($tmp$$reg));\n+    \/\/ Input \"src\" is a vector of boolean with \"0\/1\" as the element values.\n+    \/\/ Reverse the bits and count the leading zero bytes. Get the maximum\n+    \/\/ value between the vector length and the leading zero bytes.\n+    __ fmovd($dst$$Register, as_FloatRegister($src$$reg));\n@@ -5352,1 +5354,1 @@\n-instruct vmask_firsttrue8B(iRegINoSp dst, vecD src, vecD tmp) %{\n+instruct vmask_firsttrue8B(iRegINoSp dst, vecD src) %{\n@@ -5356,2 +5358,1 @@\n-  effect(TEMP_DEF dst, TEMP tmp);\n-  ins_cost(5 * INSN_COST);\n+  ins_cost(4 * INSN_COST);\n@@ -5360,3 +5361,3 @@\n-    \/\/ Revert the bits and count the leading zero bytes.\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B, as_FloatRegister($src$$reg));\n-    __ fmovd($dst$$Register, as_FloatRegister($tmp$$reg));\n+    \/\/ Input \"src\" is a vector of boolean with \"0\/1\" as the element values.\n+    \/\/ Reverse the bits and count the leading zero bytes.\n+    __ fmovd($dst$$Register, as_FloatRegister($src$$reg));\n@@ -5370,1 +5371,1 @@\n-instruct vmask_firsttrue16B(iRegINoSp dst, vecX src, vecX tmp) %{\n+instruct vmask_firsttrue16B(iRegINoSp dst, vecX src) %{\n@@ -5373,2 +5374,1 @@\n-  effect(TEMP_DEF dst, TEMP tmp);\n-  ins_cost(8 * INSN_COST);\n+  ins_cost(6 * INSN_COST);\n@@ -5377,0 +5377,2 @@\n+    \/\/ Input \"src\" is a vector of boolean with \"0\/1\" as the element values.\n+\n@@ -5381,2 +5383,1 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B, as_FloatRegister($src$$reg));\n-    __ fmovd($dst$$Register, as_FloatRegister($tmp$$reg));\n+    __ fmovd($dst$$Register, as_FloatRegister($src$$reg));\n@@ -5388,1 +5389,1 @@\n-    __ fmovhid($dst$$Register, as_FloatRegister($tmp$$reg));\n+    __ fmovhid($dst$$Register, as_FloatRegister($src$$reg));\n@@ -5391,1 +5392,1 @@\n-    \/\/ Revert the bits, count the leading zero bytes and add it with 8\/0.\n+    \/\/ Reverse the bits, count the leading zero bytes and add it with 8\/0.\n@@ -5400,1 +5401,1 @@\n-instruct vmask_lasttrue8B(iRegINoSp dst, vecD src, vecD tmp) %{\n+instruct vmask_lasttrue8B(iRegINoSp dst, vecD src) %{\n@@ -5403,2 +5404,1 @@\n-  effect(TEMP_DEF dst, TEMP tmp);\n-  ins_cost(5 * INSN_COST);\n+  ins_cost(4 * INSN_COST);\n@@ -5407,0 +5407,1 @@\n+    \/\/ Input \"src\" is a vector of boolean with \"0\/1\" as the element values.\n@@ -5408,2 +5409,1 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B, as_FloatRegister($src$$reg));\n-    __ fmovd($dst$$Register, as_FloatRegister($tmp$$reg));\n+    __ fmovd($dst$$Register, as_FloatRegister($src$$reg));\n@@ -5417,1 +5417,1 @@\n-instruct vmask_lasttrue16B(iRegINoSp dst, vecX src, vecX tmp) %{\n+instruct vmask_lasttrue16B(iRegINoSp dst, vecX src) %{\n@@ -5420,2 +5420,1 @@\n-  effect(TEMP_DEF dst, TEMP tmp);\n-  ins_cost(6 * INSN_COST);\n+  ins_cost(5 * INSN_COST);\n@@ -5424,0 +5423,2 @@\n+    \/\/ Input \"src\" is a vector of boolean with \"0\/1\" as the element values.\n+\n@@ -5428,2 +5429,1 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B, as_FloatRegister($src$$reg));\n-    __ fmovhid($dst$$Register, as_FloatRegister($tmp$$reg));\n+    __ fmovhid($dst$$Register, as_FloatRegister($src$$reg));\n@@ -5435,1 +5435,1 @@\n-    __ fmovd($dst$$Register, as_FloatRegister($tmp$$reg));\n+    __ fmovd($dst$$Register, as_FloatRegister($src$$reg));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2257,0 +2257,1 @@\n+    \/\/ Input \"src\" is a vector of boolean with \"0\/1\" as the element values.\n@@ -2268,1 +2269,1 @@\n-instruct vmask_firsttrue_LT8B(iRegINoSp dst, vecD src, vecD tmp, rFlagsReg cr) %{\n+instruct vmask_firsttrue_LT8B(iRegINoSp dst, vecD src, rFlagsReg cr) %{\n@@ -2272,2 +2273,2 @@\n-  effect(TEMP_DEF dst, TEMP tmp, KILL cr);\n-  ins_cost(8 * INSN_COST);\n+  effect(KILL cr);\n+  ins_cost(7 * INSN_COST);\n@@ -2276,4 +2277,4 @@\n-    \/\/ Revert the bits and count the leading zero bytes. Get the maximum value\n-    \/\/ between the vector length and the leading zero bytes.\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B, as_FloatRegister($src$$reg));\n-    __ fmovd($dst$$Register, as_FloatRegister($tmp$$reg));\n+    \/\/ Input \"src\" is a vector of boolean with \"0\/1\" as the element values.\n+    \/\/ Reverse the bits and count the leading zero bytes. Get the maximum\n+    \/\/ value between the vector length and the leading zero bytes.\n+    __ fmovd($dst$$Register, as_FloatRegister($src$$reg));\n@@ -2290,1 +2291,1 @@\n-instruct vmask_firsttrue8B(iRegINoSp dst, vecD src, vecD tmp) %{\n+instruct vmask_firsttrue8B(iRegINoSp dst, vecD src) %{\n@@ -2294,2 +2295,1 @@\n-  effect(TEMP_DEF dst, TEMP tmp);\n-  ins_cost(5 * INSN_COST);\n+  ins_cost(4 * INSN_COST);\n@@ -2298,3 +2298,3 @@\n-    \/\/ Revert the bits and count the leading zero bytes.\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B, as_FloatRegister($src$$reg));\n-    __ fmovd($dst$$Register, as_FloatRegister($tmp$$reg));\n+    \/\/ Input \"src\" is a vector of boolean with \"0\/1\" as the element values.\n+    \/\/ Reverse the bits and count the leading zero bytes.\n+    __ fmovd($dst$$Register, as_FloatRegister($src$$reg));\n@@ -2308,1 +2308,1 @@\n-instruct vmask_firsttrue16B(iRegINoSp dst, vecX src, vecX tmp) %{\n+instruct vmask_firsttrue16B(iRegINoSp dst, vecX src) %{\n@@ -2311,2 +2311,1 @@\n-  effect(TEMP_DEF dst, TEMP tmp);\n-  ins_cost(8 * INSN_COST);\n+  ins_cost(6 * INSN_COST);\n@@ -2315,0 +2314,2 @@\n+    \/\/ Input \"src\" is a vector of boolean with \"0\/1\" as the element values.\n+\n@@ -2319,2 +2320,1 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B, as_FloatRegister($src$$reg));\n-    __ fmovd($dst$$Register, as_FloatRegister($tmp$$reg));\n+    __ fmovd($dst$$Register, as_FloatRegister($src$$reg));\n@@ -2326,1 +2326,1 @@\n-    __ fmovhid($dst$$Register, as_FloatRegister($tmp$$reg));\n+    __ fmovhid($dst$$Register, as_FloatRegister($src$$reg));\n@@ -2329,1 +2329,1 @@\n-    \/\/ Revert the bits, count the leading zero bytes and add it with 8\/0.\n+    \/\/ Reverse the bits, count the leading zero bytes and add it with 8\/0.\n@@ -2338,1 +2338,1 @@\n-instruct vmask_lasttrue8B(iRegINoSp dst, vecD src, vecD tmp) %{\n+instruct vmask_lasttrue8B(iRegINoSp dst, vecD src) %{\n@@ -2341,2 +2341,1 @@\n-  effect(TEMP_DEF dst, TEMP tmp);\n-  ins_cost(5 * INSN_COST);\n+  ins_cost(4 * INSN_COST);\n@@ -2345,0 +2344,1 @@\n+    \/\/ Input \"src\" is a vector of boolean with \"0\/1\" as the element values.\n@@ -2346,2 +2346,1 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B, as_FloatRegister($src$$reg));\n-    __ fmovd($dst$$Register, as_FloatRegister($tmp$$reg));\n+    __ fmovd($dst$$Register, as_FloatRegister($src$$reg));\n@@ -2355,1 +2354,1 @@\n-instruct vmask_lasttrue16B(iRegINoSp dst, vecX src, vecX tmp) %{\n+instruct vmask_lasttrue16B(iRegINoSp dst, vecX src) %{\n@@ -2358,2 +2357,1 @@\n-  effect(TEMP_DEF dst, TEMP tmp);\n-  ins_cost(6 * INSN_COST);\n+  ins_cost(5 * INSN_COST);\n@@ -2362,0 +2360,2 @@\n+    \/\/ Input \"src\" is a vector of boolean with \"0\/1\" as the element values.\n+\n@@ -2366,2 +2366,1 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B, as_FloatRegister($src$$reg));\n-    __ fmovhid($dst$$Register, as_FloatRegister($tmp$$reg));\n+    __ fmovhid($dst$$Register, as_FloatRegister($src$$reg));\n@@ -2373,1 +2372,1 @@\n-    __ fmovd($dst$$Register, as_FloatRegister($tmp$$reg));\n+    __ fmovd($dst$$Register, as_FloatRegister($src$$reg));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":30,"deletions":31,"binary":false,"changes":61,"status":"modified"}]}