{"files":[{"patch":"@@ -176,0 +176,1 @@\n+  friend class ValidateHazardPtrsClosure;  \/\/ for get_threads_hazard_ptr(), untag_hazard_ptr() access\n@@ -180,1 +181,1 @@\n-  ThreadsList*          get_threads_hazard_ptr();\n+  ThreadsList*          get_threads_hazard_ptr() const;\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-inline ThreadsList* Thread::get_threads_hazard_ptr() {\n+inline ThreadsList* Thread::get_threads_hazard_ptr() const {\n","filename":"src\/hotspot\/share\/runtime\/thread.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -285,0 +285,3 @@\n+    guarantee(ThreadsList::is_valid(current_list), \"current_list=\"\n+              INTPTR_FORMAT \" is not valid!\", p2i(current_list));\n+\n@@ -297,0 +300,4 @@\n+\/\/ Since this closure gathers hazard ptrs that may be tagged, this hash\n+\/\/ table of hazard ptrs should only be used for value comparison and not\n+\/\/ traversal of the ThreadsList.\n+\/\/\n@@ -307,3 +314,8 @@\n-    ThreadsList *threads = thread->get_threads_hazard_ptr();\n-    if (threads == NULL) {\n-      return;\n+    ThreadsList *hazard_ptr = thread->get_threads_hazard_ptr();\n+    if (hazard_ptr == NULL) return;\n+    if (!Thread::is_hazard_ptr_tagged(hazard_ptr)) {\n+      \/\/ We only validate hazard_ptrs that are not tagged since a tagged\n+      \/\/ hazard ptr can be deleted at any time.\n+      guarantee(ThreadsList::is_valid(hazard_ptr), \"hazard_ptr=\" INTPTR_FORMAT\n+                \" for thread=\" INTPTR_FORMAT \" is not valid!\", p2i(hazard_ptr),\n+                p2i(thread));\n@@ -316,3 +328,3 @@\n-    threads = Thread::untag_hazard_ptr(threads);\n-    if (!_table->has_entry((void*)threads)) {\n-      _table->add_entry((void*)threads);\n+    hazard_ptr = Thread::untag_hazard_ptr(hazard_ptr);\n+    if (!_table->has_entry((void*)hazard_ptr)) {\n+      _table->add_entry((void*)hazard_ptr);\n@@ -358,0 +370,21 @@\n+\/\/ Closure to validate hazard ptrs.\n+\/\/\n+class ValidateHazardPtrsClosure : public ThreadClosure {\n+ public:\n+  ValidateHazardPtrsClosure() {};\n+\n+  virtual void do_thread(Thread* thread) {\n+    assert_locked_or_safepoint(Threads_lock);\n+\n+    if (thread == NULL) return;\n+    ThreadsList *hazard_ptr = thread->get_threads_hazard_ptr();\n+    if (hazard_ptr == NULL) return;\n+    \/\/ If the hazard ptr is unverified, then ignore it since it could\n+    \/\/ be deleted at any time now.\n+    if (Thread::is_hazard_ptr_tagged(hazard_ptr)) return;\n+    guarantee(ThreadsList::is_valid(hazard_ptr), \"hazard_ptr=\" INTPTR_FORMAT\n+              \" for thread=\" INTPTR_FORMAT \" is not valid!\", p2i(hazard_ptr),\n+              p2i(thread));\n+  }\n+};\n+\n@@ -406,1 +439,1 @@\n-  \/\/ locks so its use of the _smr_java_thread_list & _threads_hazard_ptr\n+  \/\/ locks so its use of the _java_thread_list & _threads_hazard_ptr\n@@ -422,1 +455,1 @@\n-    \/\/ If _smr_java_thread_list has changed, we have lost a race with\n+    \/\/ If _java_thread_list has changed, we have lost a race with\n@@ -533,0 +566,4 @@\n+    guarantee(_previous == NULL || ThreadsList::is_valid(_previous->_list),\n+              \"_previous->_list=\" INTPTR_FORMAT\n+              \" is not valid after calling release_stable_list_wake_up!\",\n+              p2i(_previous->_list));\n@@ -604,0 +641,1 @@\n+  _magic(THREADS_LIST_MAGIC),\n@@ -614,0 +652,1 @@\n+  _magic = 0xDEADBEEF;\n@@ -885,0 +924,3 @@\n+  ValidateHazardPtrsClosure validate_cl;\n+  threads_do(&validate_cl);\n+\n@@ -1099,2 +1141,3 @@\n-  if (thread->_threads_hazard_ptr != NULL) {\n-    st->print(\" _threads_hazard_ptr=\" INTPTR_FORMAT, p2i(thread->_threads_hazard_ptr));\n+  ThreadsList* hazard_ptr = thread->get_threads_hazard_ptr();\n+  if (hazard_ptr != NULL) {\n+    st->print(\" _threads_hazard_ptr=\" INTPTR_FORMAT, p2i(hazard_ptr));\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.cpp","additions":53,"deletions":10,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -165,0 +165,1 @@\n+  enum { THREADS_LIST_MAGIC = (int)(('T' << 24) | ('L' << 16) | ('S' << 8) | 'T') };\n@@ -170,0 +171,1 @@\n+  uint _magic;\n@@ -206,0 +208,2 @@\n+\n+  static bool is_valid(ThreadsList* list) { return list->_magic == THREADS_LIST_MAGIC; }\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}