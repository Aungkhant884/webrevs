{"files":[{"patch":"@@ -346,1 +346,1 @@\n-                    \/\/ the server is disallowing this session resumption,\n+                    \/\/ this server is disallowing this session resumption,\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ServerNameExtension.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,3 +41,4 @@\n- * @summary verifies that if the server rejects session resumption due to SNI mismatch,\n- *          during TLS handshake, then the subsequent communication between the server and the\n- *          client happens correctly without any errors\n+ * @summary verifies that if the server rejects session resumption due to SNI\n+ *          mismatch, during TLS handshake, then the subsequent communication\n+ *          between the server and the client happens correctly without any\n+ *          errors\n@@ -45,1 +46,2 @@\n- * @run main\/othervm -Djavax.net.debug=all ServerNameRejectedTLSSessionResumption\n+ * @run main\/othervm -Djavax.net.debug=all\n+ *                   ServerNameRejectedTLSSessionResumption\n@@ -47,1 +49,2 @@\n-public class ServerNameRejectedTLSSessionResumption extends SSLContextTemplate {\n+public class ServerNameRejectedTLSSessionResumption\n+        extends SSLContextTemplate {\n@@ -64,2 +67,2 @@\n-        \/\/ use a SNIMatcher on the server's SSLEngine which accepts the SNI name presented\n-        \/\/ by the client SSLEngine\n+        \/\/ use a SNIMatcher on the server's SSLEngine which accepts the\n+        \/\/ SNI name presented by the client SSLEngine\n@@ -68,2 +71,3 @@\n-        \/\/ establish communication, which involves TLS handshake, between the client\n-        \/\/ and server engines. this communication expected to be successful.\n+        \/\/ establish communication, which involves TLS handshake, between the\n+        \/\/ client and server engines. this communication expected to be\n+        \/\/ successful.\n@@ -71,13 +75,18 @@\n-        \/\/ now that the communication has been successful, we expect the client SSLContext's\n-        \/\/ (internal) cache to have created and cached a SSLSession against the peer host:port\n-\n-        \/\/ now create the SSLEngine(s) again with the same SSLContext instances as before,\n-        \/\/ so that the SSLContext instance attempts to reuse the cached SSLSession against the\n-        \/\/ peer host:port\n-        final SSLEngine secondClientEngine = createClientSSLEngine(clientSSLContext);\n-        \/\/ the newly created SSLEngine for the server will not use any SNIMatcher so as to reject\n-        \/\/ the session resumption (of the cached SSLSession)\n-        final SSLEngine secondServerEngine = createServerSSLEngine(serverSSLContext, null);\n-        \/\/ attempt communication, which again involves TLS handshake since these are\n-        \/\/ new engine instances. The session resumption should be rejected and a fresh session\n-        \/\/ should get created and communication should succeed without any errors\n+        \/\/ now that the communication has been successful, we expect the client\n+        \/\/ SSLContext's (internal) cache to have created and cached a\n+        \/\/ SSLSession against the peer host:port\n+\n+        \/\/ now create the SSLEngine(s) again with the same SSLContext\n+        \/\/ instances as before, so that the SSLContext instance attempts\n+        \/\/ to reuse the cached SSLSession against the peer host:port\n+        final SSLEngine secondClientEngine =\n+                createClientSSLEngine(clientSSLContext);\n+        \/\/ the newly created SSLEngine for the server will not use any\n+        \/\/ SNIMatcher so as to reject the session resumption (of the\n+        \/\/ cached SSLSession)\n+        final SSLEngine secondServerEngine =\n+                createServerSSLEngine(serverSSLContext, null);\n+        \/\/ attempt communication, which again involves TLS handshake\n+        \/\/ since these are new engine instances. The session resumption\n+        \/\/ should be rejected and a fresh session should get created and\n+        \/\/ communication should succeed without any errors\n@@ -88,1 +97,2 @@\n-                                    final SSLEngine serverEngine) throws Exception {\n+                                    final SSLEngine serverEngine)\n+            throws Exception {\n@@ -90,2 +100,4 @@\n-        final ByteBuffer msgFromClient = ByteBuffer.wrap(\"Hi Server, I'm Client\".getBytes());\n-        final ByteBuffer msgFromServer = ByteBuffer.wrap(\"Hello Client, I'm Server\".getBytes());\n+        final ByteBuffer msgFromClient =\n+                ByteBuffer.wrap(\"Hi Server, I'm Client\".getBytes());\n+        final ByteBuffer msgFromServer =\n+                ByteBuffer.wrap(\"Hello Client, I'm Server\".getBytes());\n@@ -97,2 +109,4 @@\n-        final ByteBuffer clientToServerTransport = ByteBuffer.allocateDirect(1 << 16);\n-        final ByteBuffer serverToClientTransport = ByteBuffer.allocateDirect(1 << 16);\n+        final ByteBuffer clientToServerTransport =\n+                ByteBuffer.allocateDirect(1 << 16);\n+        final ByteBuffer serverToClientTransport =\n+                ByteBuffer.allocateDirect(1 << 16);\n@@ -102,3 +116,4 @@\n-                \/\/ send client's message over the transport, will initiate a TLS handshake if\n-                \/\/ necessary\n-                SSLEngineResult result = clientEngine.wrap(msgFromClient, clientToServerTransport);\n+                \/\/ send client's message over the transport, will initiate a\n+                \/\/ TLS handshake if necessary\n+                SSLEngineResult result = clientEngine.wrap(msgFromClient,\n+                        clientToServerTransport);\n@@ -106,5 +121,10 @@\n-                final HandshakeStatus hsStatus = checkAndRunTasks(clientEngine, result.getHandshakeStatus());\n-                clientToServerTransport.flip(); \/\/ will now contain the network data from client to server\n-\n-                \/\/ read from the client generated network data into server's buffer\n-                result = serverEngine.unwrap(clientToServerTransport, serverBuffer);\n+                final HandshakeStatus hsStatus = checkAndRunTasks(clientEngine,\n+                        result.getHandshakeStatus());\n+                clientToServerTransport.flip(); \/\/ will now contain the\n+                \/\/ network data from\n+                \/\/ client to server\n+\n+                \/\/ read from the client generated network data into\n+                \/\/ server's buffer\n+                result = serverEngine.unwrap(clientToServerTransport,\n+                        serverBuffer);\n@@ -119,1 +139,2 @@\n-                    throw new Exception(\"Unexpected handshake result \" + result);\n+                    throw new Exception(\"Unexpected handshake result \"\n+                            + result);\n@@ -123,1 +144,2 @@\n-                SSLEngineResult result = serverEngine.wrap(msgFromServer, serverToClientTransport);\n+                SSLEngineResult result = serverEngine.wrap(msgFromServer,\n+                        serverToClientTransport);\n@@ -125,5 +147,10 @@\n-                final HandshakeStatus hsStatus = checkAndRunTasks(serverEngine, result.getHandshakeStatus());\n-                serverToClientTransport.flip(); \/\/ will now contain the network data from server to client\n-\n-                \/\/ read from the server generated network data into client's buffer\n-                result = clientEngine.unwrap(serverToClientTransport, clientBuffer);\n+                final HandshakeStatus hsStatus = checkAndRunTasks(serverEngine,\n+                        result.getHandshakeStatus());\n+                serverToClientTransport.flip(); \/\/ will now contain the\n+                \/\/ network data from\n+                \/\/ server to client\n+\n+                \/\/ read from the server generated network data into\n+                \/\/ client's buffer\n+                result = clientEngine.unwrap(serverToClientTransport,\n+                        clientBuffer);\n@@ -139,1 +166,2 @@\n-                    throw new Exception(\"Unexpected handshake result \" + result);\n+                    throw new Exception(\"Unexpected handshake result \"\n+                            + result);\n@@ -149,2 +177,2 @@\n-    private static SSLEngine createServerSSLEngine(final SSLContext sslContext,\n-                                                   final SNIMatcher sniMatcher) {\n+    private static SSLEngine createServerSSLEngine(\n+            final SSLContext sslContext, final SNIMatcher sniMatcher) {\n@@ -154,1 +182,2 @@\n-            final SSLParameters sslParameters = serverEngine.getSSLParameters(); \/\/ returns a copy\n+            final SSLParameters sslParameters =\n+                    serverEngine.getSSLParameters(); \/\/ returns a copy\n@@ -156,1 +185,2 @@\n-            serverEngine.setSSLParameters(sslParameters); \/\/ use the updated params\n+            \/\/ use the updated params\n+            serverEngine.setSSLParameters(sslParameters);\n@@ -161,2 +191,4 @@\n-    private static SSLEngine createClientSSLEngine(final SSLContext sslContext) {\n-        final SSLEngine clientEngine = sslContext.createSSLEngine(PEER_HOST, PEER_PORT);\n+    private static SSLEngine createClientSSLEngine(\n+            final SSLContext sslContext) {\n+        final SSLEngine clientEngine = sslContext.createSSLEngine(PEER_HOST,\n+                PEER_PORT);\n@@ -164,1 +196,2 @@\n-        final SSLParameters params = clientEngine.getSSLParameters(); \/\/ returns a copy\n+        final SSLParameters params =\n+                clientEngine.getSSLParameters(); \/\/ returns a copy\n@@ -171,2 +204,2 @@\n-    private static HandshakeStatus checkAndRunTasks(final SSLEngine engine,\n-                                                    final HandshakeStatus handshakeStatus) {\n+    private static HandshakeStatus checkAndRunTasks(\n+            final SSLEngine engine, final HandshakeStatus handshakeStatus) {\n@@ -196,2 +229,3 @@\n-            System.out.println(\"Attempting SNI match against client request SNI name: \"\n-                    + clientRequestedSNI + \" against server recognized SNI name \"\n+            System.out.println(\"Attempting SNI match against client\" +\n+                    \" request SNI name: \" + clientRequestedSNI +\n+                    \" against server recognized SNI name \"\n@@ -200,1 +234,2 @@\n-                System.out.println(\"SNI match failed - client request SNI isn't a SNIHostName\");\n+                System.out.println(\"SNI match failed - client request\" +\n+                        \" SNI isn't a SNIHostName\");\n@@ -204,2 +239,4 @@\n-            final String requestedName = ((SNIHostName) clientRequestedSNI).getAsciiName();\n-            final boolean matches = recognizedSNIServerName.equals(requestedName);\n+            final String requestedName =\n+                    ((SNIHostName) clientRequestedSNI).getAsciiName();\n+            final boolean matches =\n+                    recognizedSNIServerName.equals(requestedName);\n","filename":"test\/jdk\/javax\/net\/ssl\/SSLSession\/ServerNameRejectedTLSSessionResumption.java","additions":94,"deletions":57,"binary":false,"changes":151,"status":"modified"}]}