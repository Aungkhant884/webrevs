{"files":[{"patch":"@@ -108,1 +108,1 @@\n-        final byte initCoder = str.coder();\n+        final byte initCoder = str.coder;\n@@ -134,1 +134,1 @@\n-                initCoder = ((AbstractStringBuilder)seq).getCoder();\n+                initCoder = ((AbstractStringBuilder)seq).coder;\n@@ -136,1 +136,1 @@\n-                initCoder = ((String)seq).coder();\n+                initCoder = ((String)seq).coder;\n@@ -166,2 +166,2 @@\n-            return isLatin1() ? StringLatin1.compareTo(val1, val2, count1, count2)\n-                              : StringUTF16.compareTo(val1, val2, count1, count2);\n+            return (coder == LATIN1) ? StringLatin1.compareTo(val1, val2, count1, count2)\n+                                     : StringUTF16.compareTo(val1, val2, count1, count2);\n@@ -169,2 +169,2 @@\n-        return isLatin1() ? StringLatin1.compareToUTF16(val1, val2, count1, count2)\n-                          : StringUTF16.compareToLatin1(val1, val2, count1, count2);\n+        return (coder == LATIN1) ? StringLatin1.compareToUTF16(val1, val2, count1, count2)\n+                                 : StringUTF16.compareToLatin1(val1, val2, count1, count2);\n@@ -269,1 +269,1 @@\n-        if (!isLatin1()) {\n+        if (coder == UTF16) {\n@@ -323,1 +323,1 @@\n-            if (isLatin1()) {\n+            if (coder == LATIN1) {\n@@ -352,1 +352,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -383,1 +383,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -415,1 +415,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -445,1 +445,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -511,1 +511,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -534,1 +534,1 @@\n-        if (isLatin1() && StringLatin1.canEncode(ch)) {\n+        if ((coder == LATIN1) && StringLatin1.canEncode(ch)) {\n@@ -537,1 +537,1 @@\n-            if (isLatin1()) {\n+            if (coder == LATIN1) {\n@@ -607,1 +607,1 @@\n-        if (getCoder() != asb.getCoder()) {\n+        if (coder != asb.coder) {\n@@ -634,1 +634,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -761,1 +761,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -803,1 +803,1 @@\n-        if (isLatin1() && StringLatin1.canEncode(c)) {\n+        if ((coder == LATIN1) && StringLatin1.canEncode(c)) {\n@@ -806,1 +806,1 @@\n-            if (isLatin1()) {\n+            if (coder == LATIN1) {\n@@ -830,1 +830,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -855,1 +855,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -1071,1 +1071,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -1355,1 +1355,1 @@\n-        if (isLatin1() && StringLatin1.canEncode(c)) {\n+        if ((coder == LATIN1) && StringLatin1.canEncode(c)) {\n@@ -1358,1 +1358,1 @@\n-            if (isLatin1()) {\n+            if (coder == LATIN1) {\n@@ -1563,1 +1563,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -1672,8 +1672,0 @@\n-    final byte getCoder() {\n-        return COMPACT_STRINGS ? coder : UTF16;\n-    }\n-\n-    final boolean isLatin1() {\n-        return COMPACT_STRINGS && coder == LATIN1;\n-    }\n-\n@@ -1681,1 +1673,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -1699,1 +1691,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -1717,1 +1709,1 @@\n-        if (getCoder() != str.coder()) {\n+        if (coder != str.coder) {\n@@ -1729,1 +1721,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -1750,3 +1742,3 @@\n-        if (isLatin1()) {\n-            if (s.isLatin1()) {\n-                System.arraycopy(s.value(), off, this.value, this.count, end - off);\n+        if (coder == LATIN1) {\n+            if (s.coder == LATIN1) {\n+                System.arraycopy(s.value, off, this.value, this.count, end - off);\n@@ -1764,1 +1756,1 @@\n-                        System.arraycopy(s.value(), i << UTF16, this.value, j << UTF16, (end - i) << UTF16);\n+                        System.arraycopy(s.value, i << UTF16, this.value, j << UTF16, (end - i) << UTF16);\n@@ -1770,1 +1762,1 @@\n-        } else if (s.isLatin1()) {\n+        } else if (s.coder == LATIN1) {\n@@ -1773,1 +1765,1 @@\n-            System.arraycopy(s.value(), off << UTF16, this.value, this.count << UTF16, (end - off) << UTF16);\n+            System.arraycopy(s.value, off << UTF16, this.value, this.count << UTF16, (end - off) << UTF16);\n@@ -1779,1 +1771,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":38,"deletions":46,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-    private final byte[] value;\n+    final byte[] value;\n@@ -168,1 +168,1 @@\n-    private final byte coder;\n+    final byte coder;\n@@ -190,24 +190,0 @@\n-     * The instance field value is generally opaque to optimizing JIT\n-     * compilers. Therefore, in performance-sensitive place, an explicit\n-     * check of the static boolean {@code COMPACT_STRINGS} is done first\n-     * before checking the {@code coder} field since the static boolean\n-     * {@code COMPACT_STRINGS} would be constant folded away by an\n-     * optimizing JIT compiler. The idioms for these cases are as follows.\n-     *\n-     * For code such as:\n-     *\n-     *    if (coder == LATIN1) { ... }\n-     *\n-     * can be written more optimally as\n-     *\n-     *    if (coder() == LATIN1) { ... }\n-     *\n-     * or:\n-     *\n-     *    if (COMPACT_STRINGS && coder == LATIN1) { ... }\n-     *\n-     * An optimizing JIT compiler can fold the above conditional as:\n-     *\n-     *    COMPACT_STRINGS == true  => if (coder == LATIN1) { ... }\n-     *    COMPACT_STRINGS == false => if (false)           { ... }\n-     *\n@@ -892,1 +868,1 @@\n-        return encodeUTF8(s.coder(), s.value(), false);\n+        return encodeUTF8(s.coder, s.value, false);\n@@ -916,2 +892,2 @@\n-        byte[] val = s.value();\n-        byte coder = s.coder();\n+        byte[] val = s.value;\n+        byte coder = s.coder;\n@@ -1451,1 +1427,1 @@\n-        return value.length >> coder();\n+        return value.length >> coder;\n@@ -1486,1 +1462,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -1516,1 +1492,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -1552,1 +1528,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -1584,1 +1560,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -1650,1 +1626,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -1705,1 +1681,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -1735,1 +1711,1 @@\n-        return encode(lookupCharset(charsetName), coder(), value);\n+        return encode(lookupCharset(charsetName), coder, value);\n@@ -1758,1 +1734,1 @@\n-        return encode(charset, coder(), value);\n+        return encode(charset, coder, value);\n@@ -1775,1 +1751,1 @@\n-        return encode(Charset.defaultCharset(), coder(), value);\n+        return encode(Charset.defaultCharset(), coder, value);\n@@ -1838,2 +1814,1 @@\n-        byte coder = coder();\n-        if (coder == sb.getCoder()) {\n+        if (coder == sb.coder) {\n@@ -1895,1 +1870,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n@@ -1992,2 +1967,1 @@\n-        byte coder = coder();\n-        if (coder == anotherString.coder()) {\n+        if (coder == anotherString.coder) {\n@@ -2028,2 +2002,2 @@\n-            byte coder = s1.coder();\n-            if (coder == s2.coder()) {\n+            byte coder = s1.coder;\n+            if (coder == s2.coder) {\n@@ -2110,3 +2084,2 @@\n-        byte coder = coder();\n-        if (coder == other.coder()) {\n-            if (!isLatin1() && (len > 0)) {\n+        if (coder == other.coder) {\n+            if (coder != LATIN1 && (len > 0)) {\n@@ -2203,3 +2176,3 @@\n-        byte coder = coder();\n-        if (coder == other.coder()) {\n-            return coder == LATIN1\n+        byte tc   = coder;\n+        if (tc == other.coder) {\n+            return tc == LATIN1\n@@ -2209,1 +2182,1 @@\n-        return coder == LATIN1\n+        return tc == LATIN1\n@@ -2240,2 +2213,2 @@\n-        byte coder = coder();\n-        if (coder == prefix.coder()) {\n+        byte tc = coder;\n+        if (tc == prefix.coder) {\n@@ -2249,1 +2222,1 @@\n-            if (coder == LATIN1) {  \/\/ && pcoder == UTF16\n+            if (tc == LATIN1) {  \/\/ && pcoder == UTF16\n@@ -2318,2 +2291,2 @@\n-            h = isLatin1() ? StringLatin1.hashCode(value)\n-                           : StringUTF16.hashCode(value);\n+            h = coder == LATIN1 ? StringLatin1.hashCode(value)\n+                                : StringUTF16.hashCode(value);\n@@ -2397,2 +2370,2 @@\n-        return isLatin1() ? StringLatin1.indexOf(value, ch, fromIndex)\n-                          : StringUTF16.indexOf(value, ch, fromIndex);\n+        return (coder == LATIN1) ? StringLatin1.indexOf(value, ch, fromIndex)\n+                                 : StringUTF16.indexOf(value, ch, fromIndex);\n@@ -2463,2 +2436,2 @@\n-        return isLatin1() ? StringLatin1.lastIndexOf(value, ch, fromIndex)\n-                          : StringUTF16.lastIndexOf(value, ch, fromIndex);\n+        return (coder == LATIN1) ? StringLatin1.lastIndexOf(value, ch, fromIndex)\n+                                 : StringUTF16.lastIndexOf(value, ch, fromIndex);\n@@ -2482,4 +2455,3 @@\n-        byte coder = coder();\n-        if (coder == str.coder()) {\n-            return isLatin1() ? StringLatin1.indexOf(value, str.value)\n-                              : StringUTF16.indexOf(value, str.value);\n+        if (coder == str.coder) {\n+            return (coder == LATIN1) ? StringLatin1.indexOf(value, str.value)\n+                                     : StringUTF16.indexOf(value, str.value);\n@@ -2511,1 +2483,1 @@\n-        return indexOf(value, coder(), length(), str, fromIndex);\n+        return indexOf(value, coder, length(), str, fromIndex);\n@@ -2528,1 +2500,1 @@\n-        byte tgtCoder = tgtStr.coder();\n+        byte tgtCoder = tgtStr.coder;\n@@ -2592,1 +2564,1 @@\n-        return lastIndexOf(value, coder(), length(), str, fromIndex);\n+        return lastIndexOf(value, coder, length(), str, fromIndex);\n@@ -2609,1 +2581,1 @@\n-        byte tgtCoder = tgtStr.coder();\n+        byte tgtCoder = tgtStr.coder;\n@@ -2688,2 +2660,2 @@\n-        return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)\n-                          : StringUTF16.newString(value, beginIndex, subLen);\n+        return (coder == LATIN1) ? StringLatin1.newString(value, beginIndex, subLen)\n+                                 : StringUTF16.newString(value, beginIndex, subLen);\n@@ -2782,2 +2754,2 @@\n-            String ret = isLatin1() ? StringLatin1.replace(value, oldChar, newChar)\n-                                    : StringUTF16.replace(value, oldChar, newChar);\n+            String ret = (coder == LATIN1) ? StringLatin1.replace(value, oldChar, newChar)\n+                                           : StringUTF16.replace(value, oldChar, newChar);\n@@ -2945,3 +2917,3 @@\n-            boolean thisIsLatin1 = this.isLatin1();\n-            boolean trgtIsLatin1 = trgtStr.isLatin1();\n-            boolean replIsLatin1 = replStr.isLatin1();\n+            boolean thisIsLatin1 = coder == LATIN1;\n+            boolean trgtIsLatin1 = trgtStr.coder == LATIN1;\n+            boolean replIsLatin1 = replStr.coder == LATIN1;\n@@ -3314,2 +3286,2 @@\n-        return isLatin1() ? StringLatin1.toLowerCase(this, value, locale)\n-                          : StringUTF16.toLowerCase(this, value, locale);\n+        return (coder == LATIN1) ? StringLatin1.toLowerCase(this, value, locale)\n+                                 : StringUTF16.toLowerCase(this, value, locale);\n@@ -3395,2 +3367,2 @@\n-        return isLatin1() ? StringLatin1.toUpperCase(this, value, locale)\n-                          : StringUTF16.toUpperCase(this, value, locale);\n+        return (coder == LATIN1) ? StringLatin1.toUpperCase(this, value, locale)\n+                                 : StringUTF16.toUpperCase(this, value, locale);\n@@ -3455,2 +3427,2 @@\n-        String ret = isLatin1() ? StringLatin1.trim(value)\n-                                : StringUTF16.trim(value);\n+        String ret = (coder == LATIN1) ? StringLatin1.trim(value)\n+                                       : StringUTF16.trim(value);\n@@ -3487,2 +3459,2 @@\n-        String ret = isLatin1() ? StringLatin1.strip(value)\n-                                : StringUTF16.strip(value);\n+        String ret = (coder == LATIN1) ? StringLatin1.strip(value)\n+                                       : StringUTF16.strip(value);\n@@ -3517,2 +3489,2 @@\n-        String ret = isLatin1() ? StringLatin1.stripLeading(value)\n-                                : StringUTF16.stripLeading(value);\n+        String ret = (coder == LATIN1) ? StringLatin1.stripLeading(value)\n+                                       : StringUTF16.stripLeading(value);\n@@ -3547,2 +3519,2 @@\n-        String ret = isLatin1() ? StringLatin1.stripTrailing(value)\n-                                : StringUTF16.stripTrailing(value);\n+        String ret = (coder == LATIN1) ? StringLatin1.stripTrailing(value)\n+                                       : StringUTF16.stripTrailing(value);\n@@ -3600,1 +3572,2 @@\n-        return isLatin1() ? StringLatin1.lines(value) : StringUTF16.lines(value);\n+        return (coder == LATIN1) ? StringLatin1.lines(value)\n+                                 : StringUTF16.lines(value);\n@@ -3656,2 +3629,2 @@\n-        return isLatin1() ? StringLatin1.indexOfNonWhitespace(value)\n-                          : StringUTF16.indexOfNonWhitespace(value);\n+        return (coder == LATIN1) ? StringLatin1.indexOfNonWhitespace(value)\n+                                 : StringUTF16.indexOfNonWhitespace(value);\n@@ -3661,2 +3634,2 @@\n-        return isLatin1() ? StringLatin1.lastIndexOfNonWhitespace(value)\n-                          : StringUTF16.lastIndexOfNonWhitespace(value);\n+        return (coder == LATIN1) ? StringLatin1.lastIndexOfNonWhitespace(value)\n+                                 : StringUTF16.lastIndexOfNonWhitespace(value);\n@@ -3991,2 +3964,2 @@\n-            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n-                       : new StringUTF16.CharsSpliterator(value, Spliterator.IMMUTABLE),\n+            (coder == LATIN1) ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n+                              : new StringUTF16.CharsSpliterator(value, Spliterator.IMMUTABLE),\n@@ -4011,2 +3984,2 @@\n-            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n-                       : new StringUTF16.CodePointsSpliterator(value, Spliterator.IMMUTABLE),\n+            (coder == LATIN1) ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n+                              : new StringUTF16.CodePointsSpliterator(value, Spliterator.IMMUTABLE),\n@@ -4024,2 +3997,2 @@\n-        return isLatin1() ? StringLatin1.toChars(value)\n-                          : StringUTF16.toChars(value);\n+        return (coder == LATIN1) ? StringLatin1.toChars(value)\n+                                 : StringUTF16.toChars(value);\n@@ -4379,1 +4352,1 @@\n-        if (coder() == coder) {\n+        if (this.coder == coder) {\n@@ -4399,1 +4372,1 @@\n-        if (coder() == coder) {\n+        if (this.coder == coder) {\n@@ -4440,1 +4413,1 @@\n-        if (asb.isLatin1()) {\n+        if (asb.coder == LATIN1) {\n@@ -4465,12 +4438,0 @@\n-    byte coder() {\n-        return COMPACT_STRINGS ? coder : UTF16;\n-    }\n-\n-    byte[] value() {\n-        return value;\n-    }\n-\n-    boolean isLatin1() {\n-        return COMPACT_STRINGS && coder == LATIN1;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":76,"deletions":115,"binary":false,"changes":191,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+import static java.lang.String.LATIN1;\n+\n@@ -711,2 +713,2 @@\n-                    isLatin1() ? StringLatin1.newString(value, 0, count)\n-                               : StringUTF16.newString(value, 0, count);\n+                    (coder == LATIN1) ? StringLatin1.newString(value, 0, count)\n+                                      : StringUTF16.newString(value, 0, count);\n@@ -748,1 +750,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringBuffer.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+import static java.lang.String.LATIN1;\n+\n@@ -449,2 +451,2 @@\n-        return isLatin1() ? StringLatin1.newString(value, 0, count)\n-                          : StringUTF16.newString(value, 0, count);\n+        return (coder == LATIN1) ? StringLatin1.newString(value, 0, count)\n+                                 : StringUTF16.newString(value, 0, count);\n@@ -473,1 +475,1 @@\n-        if (isLatin1()) {\n+        if (coder == LATIN1) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringBuilder.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-        if (value.coder() == String.UTF16) {\n+        if (value.coder == String.UTF16) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}