{"files":[{"patch":"@@ -82,1 +82,1 @@\n-        try (DebugContext.Scope s = debug.scope(\"BackEnd\", graph.getLastSchedule()); DebugCloseable a = BackEnd.start(debug)) {\n+        try (DebugContext.Scope s = debug.scope(\"BackEnd\", graph, graph.getLastSchedule()); DebugCloseable a = BackEnd.start(debug)) {\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.core\/src\/org\/graalvm\/compiler\/core\/gen\/LIRCompilerBackend.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import org.graalvm.compiler.api.directives.GraalDirectives;\n@@ -33,1 +34,0 @@\n-import org.graalvm.compiler.replacements.arraycopy.ArrayCopySnippets;\n@@ -39,0 +39,1 @@\n+import org.graalvm.compiler.replacements.arraycopy.ArrayCopySnippets;\n@@ -373,0 +374,18 @@\n+\n+    @Test\n+    public void testArraycopyDeoptWithSideEffect() {\n+        ArgSupplier s = () -> new int[4];\n+        int[] b = new int[]{1, 1, 1, 1};\n+        int[] c = new int[]{2, 2, 2, 2};\n+        test(\"arraycopyAndDeopt\", s, b, c);\n+    }\n+\n+    public static int[] arraycopyAndDeopt(int[] a, int[] b, int[] c) {\n+        if (a[0] == 0) {\n+            System.arraycopy(b, 0, a, 0, b.length);\n+            GraalDirectives.deoptimize();\n+        } else {\n+            System.arraycopy(c, 0, a, 0, b.length);\n+        }\n+        return a;\n+    }\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.hotspot.test\/src\/org\/graalvm\/compiler\/hotspot\/test\/ArrayCopyIntrinsificationTest.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+import org.graalvm.compiler.nodes.StructuredGraph;\n@@ -168,0 +169,1 @@\n+            StructuredGraph graph;\n@@ -169,1 +171,2 @@\n-                result = compiler.compile(method, entryBCI, useProfilingInfo, shouldRetainLocalVariables, compilationId, debug);\n+                graph = compiler.createGraph(method, entryBCI, useProfilingInfo, compilationId, debug.getOptions(), debug);\n+                result = compiler.compile(graph, method, entryBCI, useProfilingInfo, shouldRetainLocalVariables, compilationId, debug);\n@@ -176,1 +179,1 @@\n-                    installMethod(debug, result);\n+                    installMethod(debug, graph, result);\n@@ -355,1 +358,1 @@\n-    private void installMethod(DebugContext debug, final CompilationResult compResult) {\n+    private void installMethod(DebugContext debug, StructuredGraph graph, final CompilationResult compResult) {\n@@ -360,1 +363,1 @@\n-        try (DebugContext.Scope s = debug.scope(\"CodeInstall\", context)) {\n+        try (DebugContext.Scope s = debug.scope(\"CodeInstall\", context, graph)) {\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.hotspot\/src\/org\/graalvm\/compiler\/hotspot\/CompilationTask.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -238,1 +238,2 @@\n-    public CompilationResult compile(ResolvedJavaMethod method,\n+    public CompilationResult compile(StructuredGraph graph,\n+                    ResolvedJavaMethod method,\n@@ -244,1 +245,0 @@\n-        StructuredGraph graph = createGraph(method, entryBCI, useProfilingInfo, compilationId, debug.getOptions(), debug);\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.hotspot\/src\/org\/graalvm\/compiler\/hotspot\/HotSpotGraalCompiler.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -219,0 +219,1 @@\n+            NodeStateAssignment selected = null;\n@@ -220,1 +221,1 @@\n-                stateMapping.put(loop, NodeStateAssignment.INVALID);\n+                selected = NodeStateAssignment.INVALID;\n@@ -223,1 +224,1 @@\n-                    stateMapping.put(loop, NodeStateAssignment.AFTER_BCI);\n+                    selected = NodeStateAssignment.AFTER_BCI;\n@@ -225,1 +226,7 @@\n-                    stateMapping.put(loop, NodeStateAssignment.BEFORE_BCI);\n+                    selected = NodeStateAssignment.BEFORE_BCI;\n+                }\n+            }\n+            stateMapping.put(loop, selected);\n+            if (selected != initialState) {\n+                for (LoopExitNode exit : loop.loopExits()) {\n+                    loopInfo.exitStates.put(exit, selected);\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.phases.common\/src\/org\/graalvm\/compiler\/phases\/common\/SnippetFrameStateAssignment.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+import org.graalvm.compiler.nodes.memory.AbstractMemoryCheckpoint;\n@@ -70,1 +71,1 @@\n-public final class ArrayCopyCallNode extends FixedWithNextNode implements Lowerable, SingleMemoryKill, MemoryAccess, Canonicalizable {\n+public final class ArrayCopyCallNode extends AbstractMemoryCheckpoint implements Lowerable, SingleMemoryKill, MemoryAccess, Canonicalizable {\n@@ -217,0 +218,5 @@\n+    @Override\n+    public boolean hasSideEffect() {\n+        return !killedLocationIdentity.isInit();\n+    }\n+\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.replacements\/src\/org\/graalvm\/compiler\/replacements\/arraycopy\/ArrayCopyCallNode.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}