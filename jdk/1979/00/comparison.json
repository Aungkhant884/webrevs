{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2013, 2021, Red Hat, Inc. All rights reserved.\n@@ -2052,5 +2052,3 @@\n-  {\n-    ShenandoahTimingsTracker t(ShenandoahPhaseTimings::conc_weak_refs_work);\n-    ShenandoahGCWorkerPhase worker_phase(ShenandoahPhaseTimings::conc_weak_refs_work);\n-    ref_processor()->process_references(workers(), true \/* concurrent *\/);\n-  }\n+  ShenandoahTimingsTracker t(ShenandoahPhaseTimings::conc_weak_refs_work);\n+  ShenandoahGCWorkerPhase worker_phase(ShenandoahPhaseTimings::conc_weak_refs_work);\n+  ref_processor()->process_references(ShenandoahPhaseTimings::conc_weak_refs_work, workers(), true \/* concurrent *\/);\n@@ -2061,5 +2059,5 @@\n-  ShenandoahTimingsTracker t(full_gc ? ShenandoahPhaseTimings::full_gc_weakrefs_process\n-                                     : ShenandoahPhaseTimings::degen_gc_weakrefs_process);\n-  ShenandoahGCWorkerPhase worker_phase(full_gc ? ShenandoahPhaseTimings::full_gc_weakrefs_process\n-                                               : ShenandoahPhaseTimings::degen_gc_weakrefs_process);\n-  ref_processor()->process_references(workers(), false \/* concurrent *\/);\n+  ShenandoahPhaseTimings::Phase phase = full_gc ? ShenandoahPhaseTimings::full_gc_weakrefs\n+                                                : ShenandoahPhaseTimings::degen_gc_weakrefs;\n+  ShenandoahTimingsTracker t(phase);\n+  ShenandoahGCWorkerPhase worker_phase(phase);\n+  ref_processor()->process_references(phase, workers(), false \/* concurrent *\/);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2017, 2021, Red Hat, Inc. All rights reserved.\n@@ -108,1 +108,1 @@\n-    case full_gc_weakrefs_process:\n+    case full_gc_weakrefs:\n@@ -112,1 +112,1 @@\n-    case degen_gc_weakrefs_process:\n+    case degen_gc_weakrefs:\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahPhaseTimings.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2017, 2021, Red Hat, Inc. All rights reserved.\n@@ -45,1 +45,1 @@\n-  f(CNT_PREFIX ## FinishQueues,             DESC_PREFIX \"Finish Queues\")               \\\n+  f(CNT_PREFIX ## WeakRefProc,              DESC_PREFIX \"Weak References\")             \\\n@@ -121,2 +121,2 @@\n-  f(degen_gc_weakrefs,                               \"    Weak References\")             \\\n-  f(degen_gc_weakrefs_process,                       \"      Process\")                   \\\n+  f(degen_gc_weakrefs,                               \"   Weak References\")            \\\n+  SHENANDOAH_PAR_PHASE_DO(degen_gc_weakrefs_p_,      \"      WRP: \", f)                  \\\n@@ -145,1 +145,1 @@\n-  f(full_gc_weakrefs_process,                       \"      Process\")                   \\\n+  SHENANDOAH_PAR_PHASE_DO(full_gc_weakrefs_p_,      \"      WRP: \", f)                  \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahPhaseTimings.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, Red Hat, Inc. and\/or its affiliates.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Red Hat, Inc. and\/or its affiliates.\n@@ -476,0 +476,2 @@\n+  bool const                          _concurrent;\n+  ShenandoahPhaseTimings::Phase const _phase;\n@@ -479,1 +481,1 @@\n-  ShenandoahReferenceProcessorTask(ShenandoahReferenceProcessor* reference_processor) :\n+  ShenandoahReferenceProcessorTask(ShenandoahPhaseTimings::Phase phase, bool concurrent, ShenandoahReferenceProcessor* reference_processor) :\n@@ -481,0 +483,2 @@\n+    _concurrent(concurrent),\n+    _phase(phase),\n@@ -485,2 +489,9 @@\n-    ShenandoahConcurrentWorkerSession worker_session(worker_id);\n-    _reference_processor->work();\n+    if (_concurrent) {\n+      ShenandoahConcurrentWorkerSession worker_session(worker_id);\n+      ShenandoahWorkerTimingsTracker x(_phase, ShenandoahPhaseTimings::WeakRefProc, worker_id);\n+      _reference_processor->work();\n+    } else {\n+      ShenandoahParallelWorkerSession worker_session(worker_id);\n+      ShenandoahWorkerTimingsTracker x(_phase, ShenandoahPhaseTimings::WeakRefProc, worker_id);\n+      _reference_processor->work();\n+    }\n@@ -490,1 +501,1 @@\n-void ShenandoahReferenceProcessor::process_references(WorkGang* workers, bool concurrent) {\n+void ShenandoahReferenceProcessor::process_references(ShenandoahPhaseTimings::Phase phase, WorkGang* workers, bool concurrent) {\n@@ -495,1 +506,1 @@\n-  ShenandoahReferenceProcessorTask task(this);\n+  ShenandoahReferenceProcessorTask task(phase, concurrent, this);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, Red Hat, Inc. and\/or its affiliates.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Red Hat, Inc. and\/or its affiliates.\n@@ -30,0 +30,1 @@\n+#include \"gc\/shenandoah\/shenandoahPhaseTimings.hpp\"\n@@ -179,1 +180,1 @@\n-  void process_references(WorkGang* workers, bool concurrent);\n+  void process_references(ShenandoahPhaseTimings::Phase phase, WorkGang* workers, bool concurrent);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}