{"files":[{"patch":"@@ -898,0 +898,5 @@\n+            var annos = (path.getLeaf() instanceof MethodTree m)\n+                    ? m.getModifiers().getAnnotations().toString()\n+                    : \"\";\n+            boolean normalizeTags = !annos.equals(\"@NormalizeTags(false)\");\n+\n@@ -899,1 +904,1 @@\n-            String normRaw = normalize(raw);\n+            String normRaw = normalize(raw, normalizeTags);\n@@ -916,2 +921,9 @@\n-         * Normalize white space in places where the tree does not preserve it.\n-         * Maintain contents of at-code and at-literal inline tags.\n+         * Normalize whitespace in places where the tree does not preserve it.\n+         * Maintain contents of inline tags unless {@code normalizeTags} is\n+         * {@code false}. This should normally be {@code true}, but should be\n+         * set to {@code false} when there is syntactically invalid content\n+         * that might resemble an inline tag, but which is not so.\n+         *\n+         * @param s the comment text to be normalized\n+         * @param normalizeTags whether to normalize inline tags\n+         * @return the normalized content\n@@ -919,1 +931,1 @@\n-        String normalize(String s) {\n+        String normalize(String s, boolean normalizeTags) {\n@@ -925,4 +937,6 @@\n-            while (m.find(start)) {\n-                sb.append(normalizeFragment(s2.substring(start, m.start())));\n-                sb.append(m.group().trim());\n-                start = copyLiteral(s2, m.end(), sb);\n+            if (normalizeTags) {\n+                while (m.find(start)) {\n+                    sb.append(normalizeFragment(s2.substring(start, m.start())));\n+                    sb.append(m.group().trim());\n+                    start = copyLiteral(s2, m.end(), sb);\n+                }\n@@ -931,1 +945,3 @@\n-            return sb.toString();\n+            return sb.toString()\n+                    .replaceAll(\"(?i)\\\\{@([a-z][a-z0-9.:-]*)\\\\s+}\", \"{@$1}\")\n+                    .replaceAll(\"(\\\\{@value\\\\s+[^}]+)\\\\s+(})\", \"$1$2\");\n@@ -935,4 +951,1 @@\n-            return s.replaceAll(\"\\\\{@docRoot\\\\s+}\", \"{@docRoot}\")\n-                    .replaceAll(\"\\\\{@inheritDoc\\\\s+}\", \"{@inheritDoc}\")\n-                    .replaceAll(\"(\\\\{@value\\\\s+[^}]+)\\\\s+(})\", \"$1$2\")\n-                    .replaceAll(\"\\n[ \\t]+@\", \"\\n@\");\n+            return s.replaceAll(\"\\n[ \\t]+@\", \"\\n@\");\n@@ -945,1 +958,1 @@\n-                if (i == start && !Character.isWhitespace(ch)) {\n+                if (i == start && !Character.isWhitespace(ch) && ch != '}') {\n","filename":"test\/langtools\/tools\/javac\/doctree\/DocCommentTester.java","additions":27,"deletions":14,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -244,0 +244,1 @@\n+    @NormalizeTags(false) \/\/ see DocCommentTester.PrettyChecker\n","filename":"test\/langtools\/tools\/javac\/doctree\/IndexTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}