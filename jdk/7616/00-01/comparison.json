{"files":[{"patch":"@@ -55,1 +55,1 @@\n-public class LoopbackAddresses implements HttpHandler {\n+public class LoopbackAddresses {\n@@ -58,11 +58,0 @@\n-    public void handle (HttpExchange req) {\n-        try {\n-            req.sendResponseHeaders(200, 0);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-        try(PrintWriter pw = new PrintWriter(req.getResponseBody())) {\n-            pw.print(\"Hello .\");\n-        }\n-    }\n-\n@@ -77,2 +66,1 @@\n-            server = HttpServer.create(new InetSocketAddress(loopback, 0), 10);\n-            server.createContext(\"\/\", new LoopbackAddresses());\n+            server = HttpServer.create(new InetSocketAddress(loopback, 0), 10, \"\/\", new LoopbackAddressesHandler());\n@@ -168,0 +156,15 @@\n+\n+class LoopbackAddressesHandler implements HttpHandler {\n+\n+    @Override\n+    public void handle(HttpExchange exchange) throws IOException {\n+        try {\n+            exchange.sendResponseHeaders(200, 0);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        try(PrintWriter pw = new PrintWriter(exchange.getResponseBody())) {\n+            pw.print(\"Hello .\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/ProxySelector\/LoopbackAddresses.java","additions":17,"deletions":14,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-public class ProxyTest implements HttpHandler {\n+public class ProxyTest {\n@@ -58,11 +58,0 @@\n-    public void handle(HttpExchange req) {\n-        try {\n-            req.sendResponseHeaders(200, 0);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-        try(PrintWriter pw = new PrintWriter(req.getResponseBody())) {\n-            pw.print(\"Hello .\");\n-        }\n-    }\n-\n@@ -92,2 +81,1 @@\n-            server = HttpServer.create(new InetSocketAddress(loopback, 0), 10);\n-            server.createContext(\"\/\", new ProxyTest());\n+            server = HttpServer.create(new InetSocketAddress(loopback, 0), 10, \"\/\", new ProxyTestHandler());\n@@ -118,0 +106,15 @@\n+\n+class ProxyTestHandler implements HttpHandler {\n+\n+    @Override\n+    public void handle(HttpExchange exchange) throws IOException {\n+        try {\n+            exchange.sendResponseHeaders(200, 0);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        try(PrintWriter pw = new PrintWriter(exchange.getResponseBody())) {\n+            pw.print(\"Hello .\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/ProxySelector\/ProxyTest.java","additions":17,"deletions":14,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-public class PerConnectionProxy implements HttpHandler {\n+public class PerConnectionProxy {\n@@ -52,11 +52,1 @@\n-\n-    public void handle (HttpExchange req) {\n-        try {\n-            req.sendResponseHeaders(200, 0);\n-        } catch (IOException e) {\n-        }\n-        try(PrintWriter pw = new PrintWriter(req.getResponseBody())) {\n-            pw.print(\"Hello .\");\n-        }\n-    }\n-\n+    \n@@ -66,2 +56,1 @@\n-            server = HttpServer.create(new InetSocketAddress(loopbackAddress, 0), 10);\n-            server.createContext(\"\/\", new PerConnectionProxy());\n+            server = HttpServer.create(new InetSocketAddress(loopbackAddress, 0), 10, \"\/\", new PerConnectionProxyHandler());\n@@ -242,0 +231,15 @@\n+\n+class PerConnectionProxyHandler implements HttpHandler {\n+\n+    @Override\n+    public void handle(HttpExchange exchange) throws IOException {\n+        try {\n+            exchange.sendResponseHeaders(200, 0);\n+        } catch (IOException e) {\n+        }\n+        try(PrintWriter pw = new PrintWriter(exchange.getResponseBody())) {\n+            pw.print(\"Hello .\");\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/net\/URL\/PerConnectionProxy.java","additions":18,"deletions":14,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-public class B5052093 implements HttpHandler {\n+public class B5052093 {\n@@ -50,1 +50,1 @@\n-    private static long testSize = ((long) (Integer.MAX_VALUE)) + 2;\n+    static long testSize = ((long) (Integer.MAX_VALUE)) + 2;\n@@ -68,10 +68,0 @@\n-    public void handle(HttpExchange req) {\n-        try {\n-            req.getResponseHeaders().set(\"content-length\", Long.toString(testSize));\n-            req.sendResponseHeaders(200, 0);\n-            req.close();\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n@@ -80,2 +70,1 @@\n-        server = HttpServer.create(new InetSocketAddress(loopback, 0), 10);\n-        server.createContext(\"\/\", new B5052093());\n+        server = HttpServer.create(new InetSocketAddress(loopback, 0), 10, \"\/\", new B5052093Handler());\n@@ -115,0 +104,13 @@\n+\n+class B5052093Handler implements HttpHandler {\n+    @Override\n+    public void handle(HttpExchange exchange) throws IOException {\n+        try {\n+            exchange.getResponseHeaders().set(\"content-length\", Long.toString(B5052093.testSize));\n+            exchange.sendResponseHeaders(200, 0);\n+            exchange.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/URLConnection\/B5052093.java","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -49,40 +49,2 @@\n-public class AuthHeaderTest implements HttpHandler {\n-\n-    static int count = 0;\n-    static String authstring;\n-\n-    void errorReply (HttpExchange req, String reply) throws IOException {\n-        req.getResponseHeaders().set(\"Connection\", \"close\");\n-        req.getResponseHeaders().set(\"Www-authenticate\", reply);\n-        req.sendResponseHeaders(401, -1);\n-    }\n-\n-    void okReply (HttpExchange req) throws IOException {\n-        req.sendResponseHeaders (200, 0);\n-        try(PrintWriter pw = new PrintWriter(req.getResponseBody())) {\n-            pw.print(\"Hello .\");\n-        }\n-    }\n-\n-    public void handle (HttpExchange req) {\n-        try {\n-            if(req.getRequestHeaders().get(\"Authorization\") != null) {\n-                authstring = req.getRequestHeaders().get(\"Authorization\").get(0);\n-                System.out.println (authstring);\n-            }\n-\n-            switch (count) {\n-            case 0:\n-                errorReply (req, \"Basic realm=\\\"wallyworld\\\"\");\n-                break;\n-            case 1:\n-                \/* client stores a username\/pw for wallyworld\n-                 *\/\n-                okReply (req);\n-                break;\n-            }\n-            count ++;\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-    }\n+public class AuthHeaderTest {\n+    static HttpServer server;\n@@ -109,2 +71,0 @@\n-    static HttpServer server;\n-\n@@ -116,2 +76,1 @@\n-            server = HttpServer.create(new InetSocketAddress(loopback, 0), 10);\n-            server.createContext(\"\/\", new AuthHeaderTest());\n+            server = HttpServer.create(new InetSocketAddress(loopback, 0), 10, \"\/\", new AuthHeaderTestHandler());\n@@ -167,0 +126,42 @@\n+\n+class AuthHeaderTestHandler implements HttpHandler {\n+    static int count = 0;\n+    static String authstring;\n+\n+    void errorReply (HttpExchange req, String reply) throws IOException {\n+        req.getResponseHeaders().set(\"Connection\", \"close\");\n+        req.getResponseHeaders().set(\"Www-authenticate\", reply);\n+        req.sendResponseHeaders(401, -1);\n+    }\n+\n+    void okReply (HttpExchange req) throws IOException {\n+        req.sendResponseHeaders (200, 0);\n+        try(PrintWriter pw = new PrintWriter(req.getResponseBody())) {\n+            pw.print(\"Hello .\");\n+        }\n+    }\n+\n+    @Override\n+    public void handle(HttpExchange exchange) throws IOException {\n+        try {\n+            if(exchange.getRequestHeaders().get(\"Authorization\") != null) {\n+                authstring = exchange.getRequestHeaders().get(\"Authorization\").get(0);\n+                System.out.println (authstring);\n+            }\n+\n+            switch (count) {\n+                case 0:\n+                    errorReply (exchange, \"Basic realm=\\\"wallyworld\\\"\");\n+                    break;\n+                case 1:\n+                    \/* client stores a username\/pw for wallyworld\n+                     *\/\n+                    okReply (exchange);\n+                    break;\n+            }\n+            count ++;\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/net\/www\/AuthHeaderTest.java","additions":45,"deletions":44,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -64,3 +64,1 @@\n-public class B5045306\n-{\n-    static SimpleHttpTransaction httpTrans;\n+public class B5045306 {\n@@ -69,1 +67,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) {\n@@ -76,3 +74,1 @@\n-            httpTrans = new SimpleHttpTransaction();\n-            server = HttpServer.create(new InetSocketAddress(InetAddress.getLocalHost(), 0), 10);\n-            server.createContext(\"\/\", httpTrans);\n+            server = HttpServer.create(new InetSocketAddress(InetAddress.getLocalHost(), 0), 10, \"\/\", new SimpleHttpTransactionHandler());\n@@ -114,1 +110,1 @@\n-            if (SimpleHttpTransaction.failed)\n+            if (SimpleHttpTransactionHandler.failed)\n@@ -161,1 +157,1 @@\n-class SimpleHttpTransaction implements HttpHandler\n+class SimpleHttpTransactionHandler implements HttpHandler\n@@ -175,1 +171,0 @@\n-\/\/                port1 = trans.channel().socket().getPort();\n","filename":"test\/jdk\/sun\/net\/www\/http\/KeepAliveCache\/B5045306.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"}]}