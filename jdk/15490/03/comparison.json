{"files":[{"patch":"@@ -73,0 +73,17 @@\n+size_t MallocMemorySnapshot::thread_count() const {\n+  if (ThreadStackTracker::track_as_vm()) {\n+    return _thread_count;\n+  } else {\n+    assert(_thread_count == 0, \"_thread_count can not be used if ThreadStackTracker::track_as_vm() == false\");\n+    return by_type(mtThreadStack)->malloc_count();\n+  }\n+}\n+\n+void MallocMemorySnapshot::snapshot_thread_count() {\n+  if (ThreadStackTracker::track_as_vm()) {\n+    _thread_count = ThreadStackTracker::thread_count();\n+  } else {\n+    \/\/ Thread count will be reported as malloc count for mtThreadStack.\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/services\/mallocTracker.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -155,0 +155,3 @@\n+  \/\/ Used only for ThreadStackTracker::track_as_vm() == true to report thread\n+  \/\/ count diff during \"jcmd <pid> VM.native_memory summary.diff\" correctly.\n+  size_t            _thread_count;\n@@ -157,0 +160,2 @@\n+  MallocMemorySnapshot() : _thread_count(0) {  }\n+\n@@ -184,4 +189,2 @@\n-  inline size_t thread_count() const {\n-    MallocMemorySnapshot* s = const_cast<MallocMemorySnapshot*>(this);\n-    return s->by_type(mtThreadStack)->malloc_count();\n-  }\n+  size_t thread_count() const;\n+  void snapshot_thread_count();\n@@ -250,0 +253,1 @@\n+     s->snapshot_thread_count();\n","filename":"src\/hotspot\/share\/services\/mallocTracker.hpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary run NMT baseline, create threads and verify output from summary.diff\n+ * @author Evgeny Ignatenko\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:NativeMemoryTracking=summary SummaryDiffThreadCount\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.JDKToolFinder;\n+\n+public class SummaryDiffThreadCount {\n+    public static void main(String args[]) throws Exception {\n+        ProcessBuilder pb = new ProcessBuilder();\n+        OutputAnalyzer output;\n+        \/\/ Grab my own PID.\n+        String pid = Long.toString(ProcessTools.getProcessId());\n+\n+        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.native_memory\", \"baseline=true\"});\n+        pb.start().waitFor();\n+\n+        output = new OutputAnalyzer(pb.start());\n+        output.shouldContain(\"Baseline taken\");\n+\n+        \/\/ Creating 5 threads.\n+        for (int i = 0; i < 5; i++) {\n+            new Thread(()-> {\n+                while (true) { continue; }\n+            }).start();\n+        }\n+\n+        \/\/ Running \"jcmd <pid> VM.native_memory summary.diff\" and checking for five new threads reported.\n+        pb.command(new String[] { JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.native_memory\", \"summary.diff\"});\n+        output = new OutputAnalyzer(pb.start());\n+        output.shouldMatch(\"threads #\\\\d+ \\\\+5\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/SummaryDiffThreadCount.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}