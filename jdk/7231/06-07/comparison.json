{"files":[{"patch":"@@ -568,2 +568,2 @@\n-void C2_MacroAssembler::has_negatives(Register src, Register cnt, Register result,\n-                                      Register tmp1, Register tmp2) {\n+void C2_MacroAssembler::count_positives(Register src, Register cnt, Register result,\n+                                        Register tmp1, Register tmp2) {\n@@ -572,1 +572,1 @@\n-  Label Lfastloop, Lslow, Lloop, Lnoneg, Ldone;\n+  Label Lfastloop, Lslow, Lloop, Ldone;\n@@ -577,1 +577,1 @@\n-  li(result, 1);                  \/\/ Assume there's a negative byte.\n+  mr(result, src);                \/\/ Use result reg to point to the current position.\n@@ -585,2 +585,2 @@\n-  ld(tmp2, 0, src);\n-  ld(tmp0, 8, src);\n+  ld(tmp2, 0, result);\n+  ld(tmp0, 8, result);\n@@ -591,3 +591,2 @@\n-  bne(CCR0, Ldone);               \/\/ Found negative byte.\n-  addi(src, src, 16);\n-\n+  bne(CCR0, Lslow);               \/\/ Found negative byte.\n+  addi(result, result, 16);\n@@ -596,3 +595,4 @@\n-  bind(Lslow);                    \/\/ Fallback to slow version\n-  rldicl_(tmp0, cnt, 0, 64-4);\n-  beq(CCR0, Lnoneg);\n+  bind(Lslow);                    \/\/ Fallback to slow version.\n+  subf(tmp0, src, result);        \/\/ Bytes known positive.\n+  subf_(tmp0, tmp0, cnt);         \/\/ Remaining Bytes.\n+  beq(CCR0, Ldone);\n@@ -601,2 +601,1 @@\n-  lbz(tmp0, 0, src);\n-  addi(src, src, 1);\n+  lbz(tmp0, 0, result);\n@@ -605,0 +604,1 @@\n+  addi(result, result, 1);\n@@ -606,2 +606,0 @@\n-  bind(Lnoneg);\n-  li(result, 0);\n@@ -610,0 +608,1 @@\n+  subf(result, src, result);      \/\/ Result is offset from src.\n@@ -611,1 +610,0 @@\n-\n","filename":"src\/hotspot\/cpu\/ppc\/c2_MacroAssembler_ppc.cpp","additions":15,"deletions":17,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-  void has_negatives(Register src, Register cnt, Register result, Register tmp1, Register tmp2);\n+  void count_positives(Register src, Register cnt, Register result, Register tmp1, Register tmp2);\n","filename":"src\/hotspot\/cpu\/ppc\/c2_MacroAssembler_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -12782,2 +12782,2 @@\n-instruct has_negatives(rarg1RegP ary1, iRegIsrc len, iRegIdst result, iRegLdst tmp1, iRegLdst tmp2,\n-                       regCTR ctr, flagsRegCR0 cr0)\n+instruct count_positives(iRegPsrc ary1, iRegIsrc len, iRegIdst result, iRegLdst tmp1, iRegLdst tmp2,\n+                         regCTR ctr, flagsRegCR0 cr0)\n@@ -12785,2 +12785,2 @@\n-  match(Set result (HasNegatives ary1 len));\n-  effect(TEMP_DEF result, USE_KILL ary1, TEMP tmp1, TEMP tmp2, KILL ctr, KILL cr0);\n+  match(Set result (CountPositives ary1 len));\n+  effect(TEMP_DEF result, TEMP tmp1, TEMP tmp2, KILL ctr, KILL cr0);\n@@ -12788,1 +12788,1 @@\n-  format %{ \"has negatives byte[] $ary1,$len -> $result \\t\/\/ KILL $tmp1, $tmp2\" %}\n+  format %{ \"count positives byte[] $ary1,$len -> $result \\t\/\/ KILL $tmp1, $tmp2\" %}\n@@ -12790,2 +12790,2 @@\n-    __ has_negatives($ary1$$Register, $len$$Register, $result$$Register,\n-                     $tmp1$$Register, $tmp2$$Register);\n+    __ count_positives($ary1$$Register, $len$$Register, $result$$Register,\n+                       $tmp1$$Register, $tmp2$$Register);\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -826,46 +826,58 @@\n-\/\/ Kills src.\n-unsigned int C2_MacroAssembler::has_negatives(Register result, Register src, Register cnt,\n-                                              Register odd_reg, Register even_reg, Register tmp) {\n-  int block_start = offset();\n-  Label Lloop1, Lloop2, Lslow, Lnotfound, Ldone;\n-  const Register addr = src, mask = tmp;\n-\n-  BLOCK_COMMENT(\"has_negatives {\");\n-\n-  z_llgfr(Z_R1, cnt);      \/\/ Number of bytes to read. (Must be a positive simm32.)\n-  z_llilf(mask, 0x80808080);\n-  z_lhi(result, 1);        \/\/ Assume true.\n-  \/\/ Last possible addr for fast loop.\n-  z_lay(odd_reg, -16, Z_R1, src);\n-  z_chi(cnt, 16);\n-  z_brl(Lslow);\n-\n-  \/\/ ind1: index, even_reg: index increment, odd_reg: index limit\n-  z_iihf(mask, 0x80808080);\n-  z_lghi(even_reg, 16);\n-\n-  bind(Lloop1); \/\/ 16 bytes per iteration.\n-  z_lg(Z_R0, Address(addr));\n-  z_lg(Z_R1, Address(addr, 8));\n-  z_ogr(Z_R0, Z_R1);\n-  z_ngr(Z_R0, mask);\n-  z_brne(Ldone);           \/\/ If found return 1.\n-  z_brxlg(addr, even_reg, Lloop1);\n-\n-  bind(Lslow);\n-  z_aghi(odd_reg, 16-1);   \/\/ Last possible addr for slow loop.\n-  z_lghi(even_reg, 1);\n-  z_cgr(addr, odd_reg);\n-  z_brh(Lnotfound);\n-\n-  bind(Lloop2); \/\/ 1 byte per iteration.\n-  z_cli(Address(addr), 0x80);\n-  z_brnl(Ldone);           \/\/ If found return 1.\n-  z_brxlg(addr, even_reg, Lloop2);\n-\n-  bind(Lnotfound);\n-  z_lhi(result, 0);\n-\n-  bind(Ldone);\n-\n-  BLOCK_COMMENT(\"} has_negatives\");\n+\/\/ Returns the number of non-negative bytes (aka US-ASCII characters) found\n+\/\/ before the first negative byte is encountered.\n+unsigned int C2_MacroAssembler::count_positives(Register result, Register src, Register cnt, Register tmp) {\n+  const unsigned int block_start   = offset();\n+  const unsigned int byte_mask     = 0x80;\n+  const unsigned int twobyte_mask  = byte_mask<<8 | byte_mask;\n+  const unsigned int unroll_factor = 16;\n+  const unsigned int log_unroll_factor = exact_log2(unroll_factor);\n+  Register pos  = src;     \/\/ current position in src array, restored at end\n+  Register ctr  = result;  \/\/ loop counter, result value\n+  Register mask = tmp;     \/\/ holds the sign detection mask\n+  Label unrolledLoop, unrolledDone, byteLoop, allDone;\n+\n+  assert_different_registers(result, src, cnt, tmp);\n+\n+  BLOCK_COMMENT(\"count_positives {\");\n+\n+  lgr_if_needed(pos, src);              \/\/ current position in src array\n+  z_srak(ctr, cnt, log_unroll_factor);  \/\/ # iterations of unrolled loop\n+  z_brnh(unrolledDone);                 \/\/ array too short for unrolled loop\n+\n+  z_iilf(mask, twobyte_mask<<16 | twobyte_mask);\n+  z_iihf(mask, twobyte_mask<<16 | twobyte_mask);\n+\n+  bind(unrolledLoop);\n+    z_lmg(Z_R0, Z_R1, 0, pos);\n+    z_ogr(Z_R0, Z_R1);\n+    z_ngr(Z_R0, mask);\n+    z_brne(unrolledDone);               \/\/ There is a negative byte somewhere.\n+                                        \/\/ ctr and pos are not updated yet ->\n+                                        \/\/ delegate finding correct pos to byteLoop.\n+    add2reg(pos, unroll_factor);\n+    z_brct(ctr, unrolledLoop);\n+\n+  \/\/ Once we arrive here, we have to examine at most (unroll_factor - 1) bytes more.\n+  \/\/ We then either have reached the end of the array or we hit a negative byte.\n+  bind(unrolledDone);\n+  z_sll(ctr, log_unroll_factor);        \/\/ calculate # bytes not processed by unrolled loop\n+                                        \/\/ > 0 only if a negative byte was found\n+  z_lr(Z_R0, cnt);                      \/\/ calculate remainder bytes\n+  z_nill(Z_R0, unroll_factor - 1);\n+  z_ar(ctr, Z_R0);                      \/\/ remaining bytes\n+  z_brnh(allDone);                      \/\/ shortcut if nothing left to do\n+\n+  bind(byteLoop);\n+    z_cli(0, pos, byte_mask);           \/\/ unsigned comparison! byte@pos must be smaller that byte_mask\n+    z_brnl(allDone);                    \/\/ negative byte found.\n+\n+    add2reg(pos, 1);\n+    z_brct(ctr, byteLoop);\n+\n+  bind(allDone);\n+\n+  z_srk(ctr, cnt, ctr);                 \/\/ # bytes actually processed (= cnt or index of first negative byte)\n+  z_sgfr(pos, ctr);                     \/\/ restore src\n+  z_lgfr(result, ctr);                  \/\/ unnecessary. Only there to be sure the high word has a defined state.\n+\n+  BLOCK_COMMENT(\"} count_positives\");\n","filename":"src\/hotspot\/cpu\/s390\/c2_MacroAssembler_s390.cpp","additions":58,"deletions":46,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -60,3 +60,1 @@\n-  \/\/ Kills src.\n-  unsigned int has_negatives(Register result, Register src, Register cnt,\n-                             Register odd_reg, Register even_reg, Register tmp);\n+  unsigned int count_positives(Register result, Register src, Register cnt, Register tmp);\n","filename":"src\/hotspot\/cpu\/s390\/c2_MacroAssembler_s390.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -10276,3 +10276,3 @@\n-instruct has_negatives(rarg5RegP ary1, iRegI len, iRegI result, roddRegI oddReg, revenRegI evenReg, iRegI tmp, flagsReg cr) %{\n-  match(Set result (HasNegatives ary1 len));\n-  effect(TEMP_DEF result, USE_KILL ary1, TEMP oddReg, TEMP evenReg, TEMP tmp, KILL cr); \/\/ R0, R1 are killed, too.\n+instruct count_positives(rarg5RegP ary1, iRegI len, iRegI result, iRegI tmp, flagsReg cr) %{\n+  match(Set result (CountPositives ary1 len));\n+  effect(TEMP_DEF result, USE_KILL ary1, TEMP tmp, KILL cr); \/\/ R0, R1 are killed, too.\n@@ -10280,1 +10280,1 @@\n-  format %{ \"has negatives byte[] $ary1($len) -> $result\" %}\n+  format %{ \"count positives byte[] $ary1($len) -> $result\" %}\n@@ -10282,2 +10282,1 @@\n-    __ has_negatives($result$$Register, $ary1$$Register, $len$$Register,\n-                     $oddReg$$Register, $evenReg$$Register, $tmp$$Register);\n+    __ count_positives($result$$Register, $ary1$$Register, $len$$Register, $tmp$$Register);\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -615,1 +615,0 @@\n-        strcmp(_matrule->_rChild->_opType,\"HasNegatives\" )==0 ||\n@@ -906,1 +905,0 @@\n-        strcmp(_matrule->_rChild->_opType,\"HasNegatives\")==0 ||\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -232,1 +232,0 @@\n-    case vmIntrinsics::_hasNegatives:\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -357,4 +357,0 @@\n-  do_intrinsic(_hasNegatives,             java_lang_StringCoding, hasNegatives_name, hasNegatives_signature,     F_S)   \\\n-   do_name(     hasNegatives_name,                               \"hasNegatives\")                                        \\\n-   do_signature(hasNegatives_signature,                          \"([BII)Z\")                                             \\\n-                                                                                                                        \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -570,2 +570,0 @@\n-        Op_HasNegatives,\n-        { { 2, ShenandoahLoad },                  { -1, ShenandoahNone} },\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -237,3 +237,0 @@\n-  case vmIntrinsics::_hasNegatives:\n-    if (!Matcher::match_rule_supported(Op_HasNegatives))  return false;\n-    break;\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -177,1 +177,0 @@\n-macro(HasNegatives)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -624,1 +624,0 @@\n-    case Op_HasNegatives:\n@@ -763,1 +762,0 @@\n-    case Op_HasNegatives:\n@@ -3329,1 +3327,1 @@\n-              op == Op_HasNegatives || op == Op_CountPositives ||\n+              op == Op_CountPositives ||\n@@ -3460,1 +3458,1 @@\n-              op == Op_AryEq || op == Op_StrComp || op == Op_HasNegatives ||\n+              op == Op_AryEq || op == Op_StrComp || op == Op_CountPositives ||\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -160,10 +160,1 @@\n-\/\/------------------------------HasNegatives---------------------------------\n-class HasNegativesNode: public StrIntrinsicNode {\n- public:\n-  HasNegativesNode(Node* control, Node* char_array_mem, Node* s1, Node* c1):\n-  StrIntrinsicNode(control, char_array_mem, s1, c1, none) {};\n-  virtual int Opcode() const;\n-  virtual const Type* bottom_type() const { return TypeInt::BOOL; }\n-};\n-\n-\/\/------------------------------HasNegatives---------------------------------\n+\/\/------------------------------CountPositives------------------------------\n","filename":"src\/hotspot\/share\/opto\/intrinsicnode.hpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -206,1 +206,0 @@\n-    case Op_HasNegatives:\n","filename":"src\/hotspot\/share\/opto\/lcm.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -620,3 +620,0 @@\n-  case vmIntrinsics::_hasNegatives:\n-    return inline_hasNegatives();\n-\n@@ -1017,25 +1014,0 @@\n-\/\/------------------------------inline_hasNegatives------------------------------\n-bool LibraryCallKit::inline_hasNegatives() {\n-  if (too_many_traps(Deoptimization::Reason_intrinsic)) {\n-    return false;\n-  }\n-\n-  assert(callee()->signature()->size() == 3, \"hasNegatives has 3 parameters\");\n-  \/\/ no receiver since it is static method\n-  Node* ba         = argument(0);\n-  Node* offset     = argument(1);\n-  Node* len        = argument(2);\n-\n-  ba = must_be_not_null(ba, true);\n-\n-  \/\/ Range checks\n-  generate_string_range_check(ba, offset, len, false);\n-  if (stopped()) {\n-    return true;\n-  }\n-  Node* ba_start = array_element_address(ba, offset, T_BYTE);\n-  Node* result = new HasNegativesNode(control(), memory(TypeAryPtr::BYTES), ba_start, len);\n-  set_result(_gvn.transform(result));\n-  return true;\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -299,1 +299,0 @@\n-  bool inline_hasNegatives();\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -831,1 +831,0 @@\n-      case Op_HasNegatives:\n@@ -978,1 +977,1 @@\n-      case Op_HasNegatives: {\n+      case Op_CountPositives: {\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -5672,1 +5672,0 @@\n-    case Op_HasNegatives:\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1069,1 +1069,0 @@\n-    case Op_HasNegatives:\n@@ -2256,1 +2255,0 @@\n-    case Op_HasNegatives:\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}