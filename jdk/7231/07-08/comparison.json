{"files":[{"patch":"@@ -37,1 +37,0 @@\n-    @IntrinsicCandidate\n@@ -43,2 +42,6 @@\n-     * Count the number of consecutive, leading positive bytes in the\n-     * range.\n+     * Count the number of leading positive bytes in the range.\n+     *\n+     * @implSpec the implementation must return len if there are no negative\n+     *   bytes in the range. If there are negative bytes, the implementation must return\n+     *   a value that is less than or equal to the index of the first negative byte\n+     *   in the range.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringCoding.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -94,3 +94,4 @@\n-                        if (calculated == 0 && expected != len) {\n-                            \/\/ allow intrinsics to bail out and return zero, but only if we're not expecting\n-                            \/\/ the full length (no negative bytes)\n+                        if (calculated < expected && expected != len) {\n+                            \/\/ allow intrinsics to return early with a lower value,\n+                            \/\/ but only if we're not expecting the full length (no\n+                            \/\/ negative bytes)\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestCountPositives.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}