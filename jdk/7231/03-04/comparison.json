{"files":[{"patch":"@@ -4363,1 +4363,1 @@\n-    br(EQ, SET_RESULT);\n+    br(EQ, DONE);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -542,1 +542,1 @@\n-                    int b1 = bytes[offset];\n+                    int b1 = bytes[offset++];\n@@ -545,1 +545,0 @@\n-                        offset++;\n@@ -548,3 +547,3 @@\n-                    if ((b1 & 0xfe) == 0xc2 && offset + 1 < sl) { \/\/ b1 either 0xc2 or 0xc3\n-                        int b2 = bytes[offset + 1];\n-                        if (!isNotContinuation(b2)) {\n+                    if ((b1 & 0xfe) == 0xc2 && offset < sl) { \/\/ b1 either 0xc2 or 0xc3\n+                        int b2 = bytes[offset];\n+                        if (b2 < -64) { \/\/ continuation bytes are always negative values in the range -128 to -65\n@@ -552,1 +551,1 @@\n-                            offset += 2;\n+                            offset++;\n@@ -556,1 +555,1 @@\n-                    \/\/ anything not a latin1, including the repl\n+                    \/\/ anything not a latin1, including the REPL\n@@ -558,0 +557,1 @@\n+                    offset--;\n@@ -710,2 +710,2 @@\n-                    int b2 = bytes[offset++];\n-                    if (!isNotContinuation(b2)) {\n+                    int b2 = bytes[offset];\n+                    if (b2 < -64) { \/\/ continuation bytes are always negative values in the range -128 to -65\n@@ -713,0 +713,1 @@\n+                        offset++;\n@@ -714,2 +715,0 @@\n-                    } else {\n-                        offset--;\n@@ -718,1 +717,0 @@\n-                offset--;\n@@ -721,0 +719,1 @@\n+                offset--;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -91,6 +91,6 @@\n-                    int r = Helper.StringCodingCountPositives(tBa, off, len);\n-                    int t = countPositives(tBa, off, len);\n-                    if (r != t) {\n-                        if (t == 0 && r < len) {\n-                            \/\/ allow intrinsics to bail out and return zero when there\n-                            \/\/ are negative bytes\n+                    int calculated = Helper.StringCodingCountPositives(tBa, off, len);\n+                    int expected = countPositives(tBa, off, len);\n+                    if (calculated != expected) {\n+                        if (calculated == 0 && expected != len) {\n+                            \/\/ allow intrinsics to bail out and return zero, but only if we're not expecting\n+                            \/\/ the full length (no negative bytes)\n@@ -100,1 +100,1 @@\n-                                + \"length: \" + len + \" \" + \"return: \" + r + \" expected: \" + t + \" negatives: \"\n+                                + \"length: \" + len + \" \" + \"return: \" + calculated + \" expected: \" + expected + \" negatives: \"\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestCountPositives.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}