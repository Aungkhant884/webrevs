{"files":[{"patch":"@@ -75,3 +75,24 @@\n-     * implements a {@code switch} on a reference-typed target.  The static\n-     * arguments are a varargs array of case labels. Constants of type {@code String} or\n-     * {@code Integer} and {@code Class} instances are accepted.\n+     * implements a {@code switch} on a target of a reference type.  The static\n+     * arguments are an array of case labels which must be non-null and of type\n+     * {@code String} or {@code Integer} and {@code Class}.\n+     * <p>\n+     * The type of the returned {@code CallSite}'s method handle will have\n+     * a return type of {@code int}.   It has two parameters: the first argument\n+     * will be an {@code Object} instance ({@code target}) and the second\n+     * will be {@code int} ({@code restart}).\n+     * <p>\n+     * If the {@code target} is {@code null}, then the method of the call site\n+     * returns {@literal -1}.\n+     * <p>\n+     * the {@code target} is not {@code null}, then the method of the call site\n+     * returns the index of the first element in the {@code labels} array starting from\n+     * the {@code restart} index matching one of the following conditions:\n+     * <ul>\n+     *   <li>the element is of type {@code Class} and the target value\n+     *       is a subtype of this {@code Class}; or<\/li>\n+     *   <li>the element is of type {@code String} or {@code Integer} and\n+     *       equals to the target.<\/li>\n+     * <\/ul>\n+     * <p>\n+     * If no element in the {@code labels} array matches the target, then\n+     * the method of the call site return the length of the {@code labels} array.\n@@ -82,22 +103,13 @@\n-     * @param invocationName The invocation name, which is ignored.  When used with\n-     *                       {@code invokedynamic}, this is provided by the\n-     *                       {@code NameAndType} of the {@code InvokeDynamic}\n-     *                       structure and is stacked automatically by the VM.\n-     * @param invocationType The invocation type of the {@code CallSite}.  This\n-     *                       method type should have a single parameter of\n-     *                       a reference type, and return {@code int}.  When\n-     *                       used with {@code invokedynamic}, this is provided by\n-     *                       the {@code NameAndType} of the {@code InvokeDynamic}\n-     *                       structure and is stacked automatically by the VM.\n-     * @param labels non-null case labels - {@code String} and {@code Integer} constants\n-     *                        and {@code Class} instances, in any combination\n-     * @return a {@code CallSite}, which accepts two parameters: one is an instance\n-     *         of the target type, and second is a restart index. It returns the\n-     *         index into {@code labels} of the target value, if the target\n-     *         is an instance of any of the types or equal to any of the constants, {@literal -1} if the target\n-     *         value is {@code null}, or {@code types.length} if the target value\n-     *         is not an instance of any of the types or equal to any of the constants. Will return\n-     *         an index that is greater or equal to the restart index provided.\n-     * @throws NullPointerException if any required argument is null\n-     * @throws IllegalArgumentException if any labels are null, or if the\n-     * invocation type is not {@code (T)int for some reference type {@code T}}\n+     * @param invocationName unused\n+     * @param invocationType The invocation type of the {@code CallSite} with two parameters,\n+     *                       a reference type, an {@code int}, and {@code int} as a return type.\n+     * @param labels case labels - {@code String} and {@code Integer} constants\n+     *               and {@code Class} instances, in any combination\n+     * @return a {@code CallSite} returning the first matching element as described above\n+     *\n+     * @throws NullPointerException if any argument is null\n+     * @throws IllegalArgumentException if any element in the labels array is null, if the\n+     * invocation type is not not a method type of first parameter of a reference type,\n+     * second parameter of type {@code int} and with {@code int} as its return type,\n+     * or if {@code labels} contains an element that is not of type {@code String},\n+     * {@code Integer} or {@code Class}.\n@@ -105,0 +117,2 @@\n+     * @jvms 4.4.6 The CONSTANT_NameAndType_info Structure\n+     * @jvms 4.4.10 The CONSTANT_Dynamic_info and CONSTANT_InvokeDynamic_info Structures\n@@ -112,1 +126,2 @@\n-            || invocationType.parameterType(0).isPrimitive())\n+            || invocationType.parameterType(0).isPrimitive()\n+            || !invocationType.parameterType(1).equals(int.class))\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/SwitchBootstraps.java","additions":41,"deletions":26,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -100,0 +100,16 @@\n+\n+    public void testWrongSwitchTypes() throws Throwable {\n+        MethodType[] switchTypes = new MethodType[] {\n+            MethodType.methodType(int.class, Object.class),\n+            MethodType.methodType(int.class, double.class, int.class),\n+            MethodType.methodType(int.class, Object.class, Integer.class)\n+        };\n+        for (MethodType switchType : switchTypes) {\n+            try {\n+                BSM_TYPE_SWITCH.invoke(MethodHandles.lookup(), \"\", switchType);\n+                fail(\"Didn't get the expected exception.\");\n+            } catch (IllegalArgumentException ex) {\n+                \/\/OK, expected\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/java\/lang\/runtime\/SwitchBootstrapsTest.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}