{"files":[{"patch":"@@ -1193,1 +1193,1 @@\n-        handleSwitch(tree, tree.selector, tree.cases);\n+        handleSwitch(tree, tree.selector, tree.cases, tree.patternSwitch);\n@@ -1238,1 +1238,1 @@\n-                handleSwitch(tree, tree.selector, tree.cases);\n+                handleSwitch(tree, tree.selector, tree.cases, tree.patternSwitch);\n@@ -1268,1 +1268,2 @@\n-    private void handleSwitch(JCTree swtch, JCExpression selector, List<JCCase> cases) {\n+    private void handleSwitch(JCTree swtch, JCExpression selector, List<JCCase> cases,\n+                              boolean patternSwitch) {\n@@ -1271,1 +1272,1 @@\n-        int switchStart = code.entryPoint();\n+        int switchStart = patternSwitch ? code.entryPoint() : -1;\n@@ -1376,0 +1377,1 @@\n+                Assert.check(patternSwitch);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8262891\n+ * @summary Verify StackMapTable is sensible for simple ordinary switches\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jdeps\/com.sun.tools.javap\n+ * @build toolbox.ToolBox toolbox.JavapTask\n+ * @run compile OrdinarySwitchStackMapTest.java\n+ * @run main OrdinarySwitchStackMapTest\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import toolbox.JavapTask;\n+import toolbox.Task;\n+import toolbox.ToolBox;\n+\n+public class OrdinarySwitchStackMapTest {\n+\n+    class Test {\n+        void method0(int i) throws Exception {\n+            switch (i) {\n+                case 0: System.err.println(0); break;\n+                case 1: System.err.println(1); break;\n+                default: System.err.println(2); break;\n+            }\n+        }\n+    }\n+\n+    public static void main(String args[]) throws Exception {\n+        ToolBox tb = new ToolBox();\n+        Path pathToClass = Paths.get(ToolBox.testClasses, \"OrdinarySwitchStackMapTest$Test.class\");\n+        String javapOut = new JavapTask(tb)\n+                .options(\"-v\")\n+                .classes(pathToClass.toString())\n+                .run()\n+                .getOutput(Task.OutputKind.DIRECT);\n+\n+        if (!javapOut.contains(\"StackMapTable: number_of_entries = 4\"))\n+            throw new AssertionError(\"The number of entries of the stack map \"\n+                    + \"table should be equal to 4\");\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/stackmap\/OrdinarySwitchStackMapTest.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}