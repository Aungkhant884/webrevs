{"files":[{"patch":"@@ -1711,0 +1711,2 @@\n+                            } else {\n+                                checkCaseLabelDominated(pat.pos(), coveredTypes, sym.type);\n@@ -1734,0 +1736,2 @@\n+                                } else {\n+                                    checkCaseLabelDominated(pat.pos(), coveredTypes, types.boxedTypeOrType(pattype));\n@@ -1751,1 +1755,1 @@\n-                        attribExpr(pat, switchEnv, seltype);\n+                        attribExpr(pat, switchEnv);\n@@ -1753,1 +1757,6 @@\n-                        Type patternType = types.erasure(primary.type());\n+                        Type primaryType = primary.type();\n+                        if (!primaryType.hasTag(TYPEVAR)) {\n+                            primaryType = chk.checkClassOrArrayType(pat.pos(), primaryType);\n+                        }\n+                        checkCastablePattern(pat.pos(), seltype, primaryType);\n+                        Type patternType = types.erasure(primaryType);\n@@ -1755,0 +1764,1 @@\n+                                          !patternType.isErroneous() &&\n@@ -1764,6 +1774,2 @@\n-                        for (Type existing : coveredTypes) {\n-                            if (types.isSubtype(patternType, existing)) {\n-                                log.error(pat.pos(), Errors.PatternDominated);\n-                            }\n-                        }\n-                        if (primary.unconditional()) {\n+                        checkCaseLabelDominated(pat.pos(), coveredTypes, patternType);\n+                        if (primary.unconditional() && !patternType.isErroneous()) {\n@@ -1813,0 +1819,8 @@\n+        private void checkCaseLabelDominated(DiagnosticPosition pos,\n+                                             List<Type> coveredTypes, Type patternType) {\n+            for (Type existing : coveredTypes) {\n+                if (types.isSubtype(patternType, existing)) {\n+                    log.error(pos, Errors.PatternDominated);\n+                }\n+            }\n+        }\n@@ -4074,10 +4088,1 @@\n-                Warner warner = new Warner();\n-                if (!types.isCastable(exprtype, clazztype, warner)) {\n-                    chk.basicHandler.report(tree.expr.pos(),\n-                                            diags.fragment(Fragments.InconvertibleTypes(exprtype, clazztype)));\n-                } else if (warner.hasLint(LintCategory.UNCHECKED)) {\n-                    log.error(tree.expr.pos(),\n-                              Errors.InstanceofReifiableNotSafe(exprtype, clazztype));\n-                } else {\n-                    valid = true;\n-                }\n+                valid = checkCastablePattern(tree.expr.pos(), exprtype, clazztype);\n@@ -4098,0 +4103,17 @@\n+    private boolean checkCastablePattern(DiagnosticPosition pos,\n+                                         Type exprType,\n+                                         Type pattType) {\n+        Warner warner = new Warner();\n+        if (!types.isCastable(exprType, pattType, warner)) {\n+            chk.basicHandler.report(pos,\n+                    diags.fragment(Fragments.InconvertibleTypes(exprType, pattType)));\n+            return false;\n+        } else if (warner.hasLint(LintCategory.UNCHECKED)) {\n+            log.error(pos,\n+                    Errors.InstanceofReifiableNotSafe(exprType, pattType));\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":40,"deletions":18,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -501,1 +501,1 @@\n-    this pattern is dominated by a preceding pattern\n+    this case label is dominated by a preceding case label\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,0 +64,25 @@\n+    int testDominatesStringConstant(String str) {\n+        switch (str) {\n+            case String s: return 1;\n+            case \"\": return -1;\n+        }\n+    }\n+\n+    int testDominatesIntegerConstant(Integer i) {\n+        switch (i) {\n+            case Integer j: return 1;\n+            case 0: return -1;\n+        }\n+    }\n+\n+    int testDominatesEnumConstant() {\n+        enum E {\n+            A, B;\n+        }\n+        E e = E.A;\n+        switch (e) {\n+            case E d: return 1;\n+            case A: return -1;\n+        }\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/Domination.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -4,0 +4,3 @@\n+Domination.java:67:18: compiler.err.pattern.dominated\n+Domination.java:74:18: compiler.err.pattern.dominated\n+Domination.java:85:18: compiler.err.pattern.dominated\n@@ -6,1 +9,1 @@\n-3 errors\n+6 errors\n","filename":"test\/langtools\/tools\/javac\/patterns\/Domination.out","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -133,0 +133,25 @@\n+    void incompatible1(String str) {\n+        switch (str) {\n+            case Integer i: break;\n+            default: break;\n+        }\n+    }\n+    void incompatible2(java.util.List l) {\n+        switch (l) {\n+            case java.util.List<Integer> l2: break;\n+        }\n+    }\n+    void erroneous(Object o) {\n+        switch (o) {\n+            case String s: break;\n+            case Undefined u: break;\n+            case Integer i: break;\n+            default: break;\n+        }\n+    }\n+    void primitivePattern(Object o) {\n+        switch (o) {\n+            case int i: break;\n+            default: break;\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/patterns\/SwitchErrors.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-SwitchErrors.java:46:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.CharSequence, java.lang.Integer)\n+SwitchErrors.java:46:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Integer, java.lang.CharSequence)\n@@ -7,1 +7,1 @@\n-SwitchErrors.java:53:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.CharSequence, int)\n+SwitchErrors.java:53:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: int, java.lang.CharSequence)\n@@ -21,0 +21,4 @@\n+SwitchErrors.java:135:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, java.lang.Integer)\n+SwitchErrors.java:141:18: compiler.err.instanceof.reifiable.not.safe: java.util.List, java.util.List<java.lang.Integer>\n+SwitchErrors.java:147:18: compiler.err.cant.resolve.location: kindname.class, Undefined, , , (compiler.misc.location: kindname.class, SwitchErrors, null)\n+SwitchErrors.java:154:18: compiler.err.type.found.req: int, (compiler.misc.type.req.class.array)\n@@ -23,0 +27,2 @@\n+SwitchErrors.java:44:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:50:9: compiler.err.not.exhaustive.statement\n@@ -31,1 +37,1 @@\n-28 errors\n\\ No newline at end of file\n+34 errors\n","filename":"test\/langtools\/tools\/javac\/patterns\/SwitchErrors.out","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"}]}