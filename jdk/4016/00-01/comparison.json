{"files":[{"patch":"@@ -79,3 +79,4 @@\n- * Instances of this class are used to find the current instant, which can be\n- * interpreted using the stored time-zone to find the current date and time.\n- * As such, a clock can be used instead of {@link System#currentTimeMillis()}\n+ * Instances of this abstract class are used to access a pluggable representation of the\n+ * current instant, which can be interpreted using the stored time-zone to find the\n+ * current date and time.\n+ * For example, {@code Clock} can be used instead of {@link System#currentTimeMillis()}\n@@ -90,0 +91,4 @@\n+ * As such, this abstract class does not guarantee the result actually represents the current instant\n+ * on the time-line. Instead, it allows the application to provide a controlled view as to what\n+ * the current instant and time-zone are.\n+ * <p>\n@@ -111,0 +116,21 @@\n+ * @implSpec\n+ * This abstract class must be implemented with care to ensure other classes operate correctly.\n+ * All implementations must be thread-safe - a single instance must be capable of be invoked\n+ * from multiple threads without negative consequences such as race conditions.\n+ * <p>\n+ * The principal methods are defined to allow the throwing of an exception.\n+ * In normal use, no exceptions will be thrown, however one possible implementation would be to\n+ * obtain the time from a central time server across the network. Obviously, in this case the\n+ * lookup could fail, and so the method is permitted to throw an exception.\n+ * <p>\n+ * The returned instants from {@code Clock} work on a time-scale that ignores leap seconds,\n+ * as described in {@link Instant}. If the implementation wraps a source that provides leap\n+ * second information, then a mechanism should be used to \"smooth\" the leap second.\n+ * The Java Time-Scale mandates the use of UTC-SLS, however clock implementations may choose\n+ * how accurate they are with the time-scale so long as they document how they work.\n+ * Implementations are therefore not required to actually perform the UTC-SLS slew or to\n+ * otherwise be aware of leap seconds.\n+ * <p>\n+ * Implementations should implement {@code Serializable} wherever possible and must\n+ * document whether or not they do support serialization.\n+ *\n@@ -709,1 +735,1 @@\n-     * Implementation of a clock that adds an offset to an underlying clock.\n+     * Implementation of a clock that reduces the tick frequency of an underlying clock.\n","filename":"src\/java.base\/share\/classes\/java\/time\/Clock.java","additions":30,"deletions":4,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n- * Instances of this interface are used to find the current instant.\n- * As such, an {@code InstantSource} can be used instead of {@link System#currentTimeMillis()}.\n+ * Instances of this interface are used to access a pluggable representation of the current instant.\n+ * For example, {@code InstantSource} can be used instead of {@link System#currentTimeMillis()}.\n@@ -41,0 +41,4 @@\n+ * As such, this interface does not guarantee the result actually represents the current instant\n+ * on the time-line. Instead, it allows the application to provide a controlled view as to what\n+ * the current instant is.\n+ * <p>\n@@ -64,1 +68,2 @@\n- * All implementations must be thread-safe.\n+ * All implementations must be thread-safe - a single instance must be capable of be invoked\n+ * from multiple threads without negative consequences such as race conditions.\n","filename":"src\/java.base\/share\/classes\/java\/time\/InstantSource.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"}]}