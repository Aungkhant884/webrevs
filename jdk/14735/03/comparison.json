{"files":[{"patch":"@@ -44,0 +44,1 @@\n+ friend class VMStructs;\n","filename":"src\/hotspot\/share\/oops\/annotations.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -328,0 +328,4 @@\n+  nonstatic_field(Annotations,                 _class_annotations,                            Array<u1>*)                            \\\n+  nonstatic_field(Annotations,                 _fields_annotations,                           Array<Array<u1>*>*)                    \\\n+  nonstatic_field(Annotations,                 _class_type_annotations,                       Array<u1>*)                            \\\n+  nonstatic_field(Annotations,                 _fields_type_annotations,                      Array<Array<u1>*>*)                    \\\n@@ -968,0 +972,1 @@\n+  unchecked_nonstatic_field(Array<Array<u1>*>,        _data,                                  sizeof(Array<u1>*))                    \\\n@@ -1174,0 +1179,1 @@\n+    declare_type(Annotations, MetaspaceObj)                               \\\n@@ -1897,0 +1903,1 @@\n+            declare_type(Array<Array<u1>*>, MetaspaceObj)                 \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package sun.jvm.hotspot.oops;\n+\n+import java.io.*;\n+import java.util.*;\n+import sun.jvm.hotspot.debugger.*;\n+import sun.jvm.hotspot.interpreter.Bytecodes;\n+import sun.jvm.hotspot.runtime.*;\n+import sun.jvm.hotspot.types.*;\n+import sun.jvm.hotspot.utilities.*;\n+import sun.jvm.hotspot.utilities.Observable;\n+import sun.jvm.hotspot.utilities.Observer;\n+\n+\/\/ An Annotation is an oop containing annotations as described in the class file\n+\n+public class Annotations extends Metadata {\n+  static {\n+    VM.registerVMInitializedObserver(new Observer() {\n+        public void update(Observable o, Object data) {\n+          initialize(VM.getVM().getTypeDataBase());\n+        }\n+      });\n+  }\n+\n+  private ArrayOfU1Array fieldAnnotationsArray;\n+  private ArrayOfU1Array fieldTypeAnnotationsArray;\n+\n+  public Annotations(Address addr) {\n+    super(addr);\n+  }\n+\n+  public boolean isAnnotations()            { return true; }\n+\n+  private static synchronized void initialize(TypeDataBase db) throws WrongTypeException {\n+    Type type = db.lookupType(\"Annotations\");\n+    classAnnotations = type.getAddressField(\"_class_annotations\");\n+    fieldsAnnotations = type.getAddressField(\"_fields_annotations\");\n+    classTypeAnnotations = type.getAddressField(\"_class_type_annotations\");\n+    fieldsTypeAnnotations = type.getAddressField(\"_fields_type_annotations\");\n+  }\n+\n+  private static AddressField classAnnotations;\n+  private static AddressField fieldsAnnotations;\n+  private static AddressField classTypeAnnotations;\n+  private static AddressField fieldsTypeAnnotations;\n+\n+  public U1Array getClassAnnotations() {\n+    Address addr = classAnnotations.getValue(getAddress());\n+    return VMObjectFactory.newObject(U1Array.class, addr);\n+  }\n+\n+  public U1Array getFieldAnnotations(int fieldIndex) {\n+    if (fieldAnnotationsArray == null) {\n+      Address addr = fieldsAnnotations.getValue(getAddress());\n+      fieldAnnotationsArray = VMObjectFactory.newObject(ArrayOfU1Array.class, addr);\n+    }\n+    if (fieldAnnotationsArray != null) {\n+      Address addr = fieldAnnotationsArray.at(fieldIndex);\n+      return VMObjectFactory.newObject(U1Array.class, addr);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public U1Array getClassTypeAnnotations() {\n+    Address addr = classTypeAnnotations.getValue(getAddress());\n+    return VMObjectFactory.newObject(U1Array.class, addr);\n+  }\n+\n+  public U1Array getFieldTypeAnnotations(int fieldIndex) {\n+    if (fieldTypeAnnotationsArray == null) {\n+      Address addr = fieldsTypeAnnotations.getValue(getAddress());\n+      fieldTypeAnnotationsArray = VMObjectFactory.newObject(ArrayOfU1Array.class, addr);\n+    }\n+    if (fieldTypeAnnotationsArray != null) {\n+      Address addr = fieldTypeAnnotationsArray.at(fieldIndex);\n+      return VMObjectFactory.newObject(U1Array.class, addr);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public void printValueOn(PrintStream tty) {\n+      tty.print(\"Annotations\" + \"@\" + getAddress());\n+  }\n+}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Annotations.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -420,10 +420,7 @@\n-  private boolean hasMethodParameters() {\n-    return (getFlags() & HAS_METHOD_PARAMETERS) != 0;\n-  }\n-\n-  private boolean hasGenericSignature() {\n-    return (getFlags() & HAS_GENERIC_SIGNATURE) != 0;\n-  }\n-\n-  private boolean hasMethodAnnotations() {\n-    return (getFlags() & HAS_METHOD_ANNOTATIONS) != 0;\n+  public U1Array getMethodAnnotations() {\n+    if (hasMethodAnnotations()) {\n+      Address addr = getAddressAtOffset(getSize() - getMethodAnnotationsOffset());\n+      return VMObjectFactory.newObject(U1Array.class, addr);\n+    } else {\n+      return null;\n+    }\n@@ -432,2 +429,7 @@\n-  private boolean hasParameterAnnotations() {\n-    return (getFlags() & HAS_PARAMETER_ANNOTATIONS) != 0;\n+  public U1Array getParameterAnnotations() {\n+    if (hasParameterAnnotations()) {\n+      Address addr = getAddressAtOffset(getSize() - getParameterAnnotationsOffset());\n+      return VMObjectFactory.newObject(U1Array.class, addr);\n+    } else {\n+      return null;\n+    }\n@@ -436,2 +438,7 @@\n-  private boolean hasDefaultAnnotations() {\n-    return (getFlags() & HAS_DEFAULT_ANNOTATIONS) != 0;\n+  public U1Array getTypeAnnotations() {\n+    if (hasTypeAnnotations()) {\n+      Address addr = getAddressAtOffset(getSize() - getTypeAnnotationsOffset());\n+      return VMObjectFactory.newObject(U1Array.class, addr);\n+    } else {\n+      return null;\n+    }\n@@ -440,2 +447,7 @@\n-  private boolean hasTypeAnnotations() {\n-    return (getFlags() & HAS_TYPE_ANNOTATIONS) != 0;\n+  public U1Array getDefaultAnnotations() {\n+    if (hasDefaultAnnotations()) {\n+      Address addr = getAddressAtOffset(getSize() - getDefaultAnnotationsOffset());\n+      return VMObjectFactory.newObject(U1Array.class, addr);\n+    } else {\n+      return null;\n+    }\n@@ -444,1 +456,0 @@\n-\n@@ -613,0 +624,66 @@\n+  private boolean hasMethodParameters() {\n+    return (getFlags() & HAS_METHOD_PARAMETERS) != 0;\n+  }\n+\n+  private boolean hasGenericSignature() {\n+    return (getFlags() & HAS_GENERIC_SIGNATURE) != 0;\n+  }\n+\n+  private Address getAddressAtOffset(long offsetInWords) {\n+    return getAddress().getAddressAt(offsetInWords * VM.getVM().getAddressSize());\n+  }\n+\n+  \/\/ Pointers to annotations are stored towards the end of the ConstMethod in following format.\n+  \/\/ Each of the pointer may or may not be present.\n+  \/\/\n+  \/\/            |<-------------- getSize() -----------------|\n+  \/\/   start of ConstMethod                          end of ConstMethod\n+  \/\/            |                                           |\n+  \/\/            V                                           V\n+  \/\/            | ... | default | type | parameter | method |\n+  \/\/\n+  \/\/ These methods return the offset of the pointer to the requested annotation from the end of ConstMethod.\n+  private int getMethodAnnotationsOffset() {\n+    return 1;\n+  }\n+\n+  private int getParameterAnnotationsOffset() {\n+    int offset = 1;\n+    if (hasMethodAnnotations()) {\n+      offset += getMethodAnnotationsOffset();\n+    }\n+    return offset;\n+  }\n+\n+  private int getTypeAnnotationsOffset() {\n+    int offset = 1;\n+    if (hasParameterAnnotations()) {\n+      offset += getParameterAnnotationsOffset();\n+    }\n+    return offset;\n+  }\n+\n+  private int getDefaultAnnotationsOffset() {\n+    int offset = 1;\n+    if (hasTypeAnnotations()) {\n+      offset += getTypeAnnotationsOffset();\n+    }\n+    return offset;\n+  }\n+\n+  private boolean hasMethodAnnotations() {\n+    return (getFlags() & HAS_METHOD_ANNOTATIONS) != 0;\n+  }\n+\n+  private boolean hasParameterAnnotations() {\n+    return (getFlags() & HAS_PARAMETER_ANNOTATIONS) != 0;\n+  }\n+\n+  private boolean hasTypeAnnotations() {\n+    return (getFlags() & HAS_TYPE_ANNOTATIONS) != 0;\n+  }\n+\n+  private boolean hasDefaultAnnotations() {\n+    return (getFlags() & HAS_DEFAULT_ANNOTATIONS) != 0;\n+  }\n+\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/ConstMethod.java","additions":94,"deletions":17,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+    annotations          = type.getAddressField(\"_annotations\");\n@@ -133,0 +134,1 @@\n+  private static AddressField  annotations;\n@@ -378,1 +380,0 @@\n-\n@@ -387,0 +388,4 @@\n+  public Annotations  getAnnotations() {\n+    Address addr = annotations.getValue(getAddress());\n+    return VMObjectFactory.newObject(Annotations.class, addr);\n+  }\n@@ -862,0 +867,36 @@\n+  public U1Array getClassAnnotations() {\n+    Annotations annotations = getAnnotations();\n+    if (annotations != null) {\n+      return annotations.getClassAnnotations();\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public U1Array getClassTypeAnnotations() {\n+    Annotations annotations = getAnnotations();\n+    if (annotations != null) {\n+      return annotations.getClassTypeAnnotations();\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public U1Array getFieldAnnotations(int fieldIndex) {\n+    Annotations annotations = getAnnotations();\n+    if (annotations != null) {\n+      return annotations.getFieldAnnotations(fieldIndex);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public U1Array getFieldTypeAnnotations(int fieldIndex) {\n+    Annotations annotations = getAnnotations();\n+    if (annotations != null) {\n+      return annotations.getFieldTypeAnnotations(fieldIndex);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/InstanceKlass.java","additions":42,"deletions":1,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+    metadataConstructor.addMapping(\"Annotations\", Annotations.class);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Metadata.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import sun.jvm.hotspot.utilities.U1Array;\n@@ -379,0 +380,16 @@\n+\n+  public U1Array getAnnotations() {\n+    return getConstMethod().getMethodAnnotations();\n+  }\n+\n+  public U1Array getParameterAnnotations() {\n+    return getConstMethod().getParameterAnnotations();\n+  }\n+\n+  public U1Array getTypeAnnotations() {\n+    return getConstMethod().getTypeAnnotations();\n+  }\n+\n+  public U1Array getAnnotationDefault() {\n+    return getConstMethod().getDefaultAnnotations();\n+  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Method.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -409,0 +409,10 @@\n+            U1Array fieldAnnotations = klass.getFieldAnnotations(index);\n+            if (fieldAnnotations != null) {\n+                fieldAttributeCount++;\n+            }\n+\n+            U1Array fieldTypeAnnotations = klass.getFieldTypeAnnotations(index);\n+            if (fieldTypeAnnotations != null) {\n+                fieldAttributeCount++;\n+            }\n+\n@@ -428,0 +438,8 @@\n+\n+            if (fieldAnnotations != null) {\n+                writeAnnotationAttribute(\"RuntimeVisibleAnnotations\", fieldAnnotations);\n+            }\n+\n+            if (fieldTypeAnnotations != null) {\n+                writeAnnotationAttribute(\"RuntimeVisibleTypeAnnotations\", fieldTypeAnnotations);\n+            }\n@@ -495,0 +513,20 @@\n+        final U1Array annotations = m.getAnnotations();\n+        if (annotations != null) {\n+            methodAttributeCount++;\n+        }\n+\n+        final U1Array parameterAnnotations = m.getParameterAnnotations();\n+        if (parameterAnnotations != null) {\n+            methodAttributeCount++;\n+        }\n+\n+        final U1Array typeAnnotations = m.getTypeAnnotations();\n+        if (typeAnnotations != null) {\n+            methodAttributeCount++;\n+        }\n+\n+        final U1Array annotationDefault = m.getAnnotationDefault();\n+        if (annotationDefault != null) {\n+            methodAttributeCount++;\n+        }\n+\n@@ -690,0 +728,16 @@\n+\n+        if (annotationDefault != null) {\n+           writeAnnotationAttribute(\"AnnotationDefault\", annotationDefault);\n+        }\n+\n+        if (annotations != null) {\n+           writeAnnotationAttribute(\"RuntimeVisibleAnnotations\", annotations);\n+        }\n+\n+        if (parameterAnnotations != null) {\n+           writeAnnotationAttribute(\"RuntimeVisibleParameterAnnotations\", parameterAnnotations);\n+        }\n+\n+        if (typeAnnotations != null) {\n+           writeAnnotationAttribute(\"RuntimeVisibleTypeAnnotations\", typeAnnotations);\n+        }\n@@ -734,0 +788,10 @@\n+        U1Array classAnnotations = klass.getClassAnnotations();\n+        if (classAnnotations != null) {\n+            classAttributeCount++;\n+        }\n+\n+        U1Array classTypeAnnotations = klass.getClassTypeAnnotations();\n+        if (classTypeAnnotations != null) {\n+            classAttributeCount++;\n+        }\n+\n@@ -795,0 +859,21 @@\n+\n+        if (classAnnotations != null) {\n+           writeAnnotationAttribute(\"RuntimeVisibleAnnotations\", classAnnotations);\n+        }\n+\n+        if (classTypeAnnotations != null) {\n+           writeAnnotationAttribute(\"RuntimeVisibleTypeAnnotations\", classTypeAnnotations);\n+        }\n+    }\n+\n+    protected void writeAnnotationAttribute(String annotationName, U1Array annotation) throws IOException {\n+      int length = annotation.length();\n+      Short annotationNameIndex = utf8ToIndex.get(annotationName);\n+      if (Assert.ASSERTS_ENABLED) {\n+        Assert.that(annotationNameIndex != null, \"should not be null\");\n+      }\n+      writeIndex(annotationNameIndex.shortValue());\n+      dos.writeInt(length);\n+      for (int index = 0; index < length; index++) {\n+        dos.writeByte(annotation.at(index));\n+      }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/jcore\/ClassWriter.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package sun.jvm.hotspot.utilities;\n+\n+import sun.jvm.hotspot.debugger.Address;\n+import sun.jvm.hotspot.runtime.VM;\n+import sun.jvm.hotspot.types.Type;\n+import sun.jvm.hotspot.types.TypeDataBase;\n+import sun.jvm.hotspot.types.WrongTypeException;\n+import sun.jvm.hotspot.utilities.Observable;\n+import sun.jvm.hotspot.utilities.Observer;\n+\n+public class ArrayOfU1Array extends GenericArray {\n+  static {\n+    VM.registerVMInitializedObserver(new Observer() {\n+      public void update(Observable o, Object data) {\n+        initialize(VM.getVM().getTypeDataBase());\n+      }\n+    });\n+  }\n+\n+  private static synchronized void initialize(TypeDataBase db) throws WrongTypeException {\n+    elemType = db.lookupType(\"Array<u1>*\");\n+\n+    Type type = db.lookupType(\"Array<Array<u1>*>\");\n+    dataFieldOffset = type.getAddressField(\"_data\").getOffset();\n+  }\n+\n+  private static long dataFieldOffset;\n+  protected static Type elemType;\n+\n+  public ArrayOfU1Array(Address addr) {\n+    super(addr, dataFieldOffset);\n+  }\n+\n+  public Address at(int i) {\n+    return getAddressAt(i);\n+  }\n+\n+  public Type getElemType() {\n+    return elemType;\n+  }\n+}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/utilities\/ArrayOfU1Array.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}