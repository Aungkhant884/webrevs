{"files":[{"patch":"@@ -46,1 +46,1 @@\n-  jlong mem_limit;\n+  jlong host_memory = os::Linux::physical_memory();\n@@ -63,6 +63,0 @@\n-  \/\/ We need to update the amount of physical memory now that\n-  \/\/ cgroup subsystem files have been processed.\n-  if ((mem_limit = cgroup_subsystem->memory_limit_in_bytes()) > 0) {\n-    os::Linux::set_physical_memory(mem_limit);\n-    log_info(os, container)(\"Memory Limit is: \" JLONG_FORMAT, mem_limit);\n-  }\n@@ -71,1 +65,0 @@\n-\n","filename":"src\/hotspot\/os\/linux\/osContainer_linux.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -219,1 +219,2 @@\n-  jlong phys_mem = 0;\n+  jlong phys_mem = Linux::physical_memory();\n+\n@@ -221,2 +222,2 @@\n-    jlong mem_limit;\n-    if ((mem_limit = OSContainer::memory_limit_in_bytes()) > 0) {\n+    jlong mem_limit = OSContainer::memory_limit_in_bytes();\n+    if (mem_limit > 0 && mem_limit < phys_mem) {\n@@ -226,2 +227,10 @@\n-    log_debug(os, container)(\"container memory limit %s: \" JLONG_FORMAT \", using host value\",\n-                            mem_limit == OSCONTAINER_ERROR ? \"failed\" : \"unlimited\", mem_limit);\n+    if (mem_limit >= phys_mem) {\n+      log_debug(os, container)(\"container memory limit ignored: \" JLONG_FORMAT \", using host value \"\n+                               JLONG_FORMAT, mem_limit, phys_mem);\n+    } else if (OSCONTAINER_ERROR == mem_limit) {\n+      log_debug(os, container)(\"container memory limit failed: \" JLONG_FORMAT \", using host value \"\n+                               JLONG_FORMAT, mem_limit, phys_mem);\n+    } else {\n+      log_debug(os, container)(\"container memory limit unlimited: \" JLONG_FORMAT \", using host value \"\n+                               JLONG_FORMAT, mem_limit, phys_mem);\n+    }\n@@ -230,1 +239,0 @@\n-  phys_mem = Linux::physical_memory();\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n-  static void set_physical_memory(julong phys_mem) { _physical_memory = phys_mem; }\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @bug 8146115 8292083\n@@ -44,0 +45,2 @@\n+import java.lang.management.ManagementFactory;\n+\n@@ -79,0 +82,1 @@\n+            testContainerMemExceedsPhysical();\n@@ -99,0 +103,26 @@\n+    \/\/ JDK-8292083\n+    \/\/ Ensure that Java ignores container memory limit values above the host's physical memory.\n+    \/\/\n+    \/\/ let the host's physical memory be P; request 2P memory in the container.\n+    \/\/ set java's InitialRAMPercentage to 25%, and check the calculated InitialHeapSize\n+    \/\/ to see if that was calculated relative to P (P\/4) or 2P (P\/2).\n+    private static void testContainerMemExceedsPhysical()\n+            throws Exception {\n+\n+        com.sun.management.OperatingSystemMXBean os = (com.sun.management.OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean();\n+        long realMem = os.getTotalMemorySize();\n+        long badMem = 2 * realMem;\n+\n+        Common.logNewTestCase(\"bad memory limit: \" + badMem);\n+\n+        DockerRunOptions opts = Common.newOpts(imageName);\n+        opts.addDockerOpts(\"--memory\", Long.toString(badMem));\n+        opts.addJavaOpts(\"-XX:InitialRAMPercentage=25.0\");\n+        opts.addJavaOpts(\"-XX:+PrintFlagsFinal\");\n+\n+        \/\/ one significant digit, to avoid precision\/rounding issues\n+        String goodDigit = Long.toString(realMem\/4).substring(0,1);\n+        Common.run(opts)\n+            .shouldMatch(\"size_t InitialHeapSize.*= \"+goodDigit);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"}]}