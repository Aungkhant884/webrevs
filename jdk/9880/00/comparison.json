{"files":[{"patch":"@@ -46,0 +46,1 @@\n+  jlong host_memory = os::Linux::physical_memory();\n@@ -63,3 +64,5 @@\n-  \/\/ We need to update the amount of physical memory now that\n-  \/\/ cgroup subsystem files have been processed.\n-  if ((mem_limit = cgroup_subsystem->memory_limit_in_bytes()) > 0) {\n+  if ((mem_limit = cgroup_subsystem->memory_limit_in_bytes()) > 0 &&\n+       mem_limit < host_memory) {\n+    \/\/ We need to update the amount of physical memory now that\n+    \/\/ cgroup subsystem files have been processed and has been\n+    \/\/ determined to be less than the physical host memory.\n@@ -68,0 +71,5 @@\n+  } else if (mem_limit >= host_memory) {\n+    log_trace(os, container)(\"Container memory limit exceeded or equal to physical\"\n+                             \" memory! container mem: \" JLONG_FORMAT \", host mem: \" JLONG_FORMAT,\n+                             mem_limit, host_memory);\n+    log_trace(os, container)(\"Ignoring container memory limit.\");\n","filename":"src\/hotspot\/os\/linux\/osContainer_linux.cpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -219,1 +219,2 @@\n-  jlong phys_mem = 0;\n+  jlong phys_mem = Linux::physical_memory();\n+\n@@ -222,1 +223,1 @@\n-    if ((mem_limit = OSContainer::memory_limit_in_bytes()) > 0) {\n+    if ((mem_limit = OSContainer::memory_limit_in_bytes()) > 0 && mem_limit < phys_mem) {\n@@ -230,1 +231,0 @@\n-  phys_mem = Linux::physical_memory();\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @bug 8146115 8292083\n@@ -44,0 +45,2 @@\n+import java.lang.management.ManagementFactory;\n+\n@@ -79,0 +82,1 @@\n+            testBadMemoryLimit();\n@@ -99,0 +103,26 @@\n+    \/\/ JDK-8292083\n+    \/\/ Ensure that Java ignores container memory limit values above the host's physical memory.\n+    \/\/\n+    \/\/ let the host's physical memory be P; request 2P memory in the container.\n+    \/\/ set java's InitialRAMPercentage to 25%, and check the calculated InitialHeapSize\n+    \/\/ to see if that was calculated relative to P (P\/4) or 2P (P\/2).\n+    private static void testBadMemoryLimit()\n+            throws Exception {\n+\n+        com.sun.management.OperatingSystemMXBean os = (com.sun.management.OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean();\n+        long realMem = os.getTotalMemorySize();\n+        long badMem = 2 * realMem;\n+\n+        Common.logNewTestCase(\"bad memory limit: \" + badMem);\n+\n+        DockerRunOptions opts = Common.newOpts(imageName);\n+        opts.addDockerOpts(\"--memory\", Long.toString(badMem));\n+        opts.addJavaOpts(\"-XX:InitialRAMPercentage=25.0\");\n+        opts.addJavaOpts(\"-XX:+PrintFlagsFinal\");\n+\n+        \/\/ one significant digit, to avoid precision\/rounding issues\n+        String goodDigit = Long.toString(realMem\/4).substring(0,1);\n+        Common.run(opts)\n+            .shouldMatch(\"size_t InitialHeapSize.*= \"+goodDigit);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"}]}