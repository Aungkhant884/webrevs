{"files":[{"patch":"@@ -46,2 +46,0 @@\n-  jlong mem_limit;\n-\n@@ -63,6 +61,0 @@\n-  \/\/ We need to update the amount of physical memory now that\n-  \/\/ cgroup subsystem files have been processed.\n-  if ((mem_limit = cgroup_subsystem->memory_limit_in_bytes()) > 0) {\n-    os::Linux::set_physical_memory(mem_limit);\n-    log_info(os, container)(\"Memory Limit is: \" JLONG_FORMAT, mem_limit);\n-  }\n@@ -71,1 +63,0 @@\n-\n","filename":"src\/hotspot\/os\/linux\/osContainer_linux.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -219,1 +219,3 @@\n-  jlong phys_mem = 0;\n+  jlong phys_mem = Linux::physical_memory();\n+  log_debug(os, container)(\"total physical memory: \" JLONG_FORMAT, phys_mem);\n+\n@@ -221,2 +223,2 @@\n-    jlong mem_limit;\n-    if ((mem_limit = OSContainer::memory_limit_in_bytes()) > 0) {\n+    jlong mem_limit = OSContainer::memory_limit_in_bytes();\n+    if (mem_limit > 0 && mem_limit < phys_mem) {\n@@ -226,2 +228,10 @@\n-    log_debug(os, container)(\"container memory limit %s: \" JLONG_FORMAT \", using host value\",\n-                            mem_limit == OSCONTAINER_ERROR ? \"failed\" : \"unlimited\", mem_limit);\n+    if (mem_limit >= phys_mem) {\n+      log_debug(os, container)(\"container memory limit ignored: \" JLONG_FORMAT \", using host value \"\n+                               JLONG_FORMAT, mem_limit, phys_mem);\n+    } else if (OSCONTAINER_ERROR == mem_limit) {\n+      log_debug(os, container)(\"container memory limit failed: \" JLONG_FORMAT \", using host value \"\n+                               JLONG_FORMAT, mem_limit, phys_mem);\n+    } else {\n+      log_debug(os, container)(\"container memory limit unlimited: \" JLONG_FORMAT \", using host value \"\n+                               JLONG_FORMAT, mem_limit, phys_mem);\n+    }\n@@ -230,1 +240,0 @@\n-  phys_mem = Linux::physical_memory();\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n-  static void set_physical_memory(julong phys_mem) { _physical_memory = phys_mem; }\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @bug 8146115 8292083\n@@ -79,0 +80,1 @@\n+            testContainerMemExceedsPhysical();\n@@ -99,0 +101,21 @@\n+    \/\/ JDK-8292083\n+    \/\/ Ensure that Java ignores container memory limit values above the host's physical memory.\n+    private static void testContainerMemExceedsPhysical()\n+            throws Exception {\n+\n+        Common.logNewTestCase(\"container memory limit exceeds physical memory\");\n+\n+        DockerRunOptions opts = Common.newOpts(imageName);\n+\n+        \/\/ first run: establish physical memory in test environment and derive\n+        \/\/ a bad value one power of ten larger\n+        String goodMem = Common.run(opts).firstMatch(\"total physical memory: (\\\\d+)\", 1);\n+        String badMem = goodMem + \"0\";\n+\n+        \/\/ second run: set a container memory limit to the bad value\n+        opts = Common.newOpts(imageName)\n+            .addDockerOpts(\"--memory\", badMem);\n+        Common.run(opts)\n+            .shouldMatch(\"container memory limit ignored: \"+badMem+\", using host value \"+goodMem);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"}]}