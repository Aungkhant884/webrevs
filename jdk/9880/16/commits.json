[{"commit":{"message":"avoid calling OSContainer::memory_usage_in_bytes\n\nif mem_limit isn't set, avoid calling OSContainer::memory_usage_in_bytes"},"files":[{"filename":"src\/hotspot\/os\/linux\/os_linux.cpp"}],"sha":"ac6469310bc08ae37fa9a4951c2dbef24e4ad6c3"},{"commit":{"message":"Improve sanity checking legibility and document in a comment\n\nThanks Severin for the suggestion."},"files":[{"filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.cpp"}],"sha":"d13fae1884ac1d48c71e490f0459b7822a599968"},{"commit":{"message":"Remove superfluous log line from os::Linux::available_memory\n\nNow that os::Linux::available_memory calls\nOSContainer::memory_limit_in_bytes,  we can remove a log_debug\nthat replicates the logging that takes place there."},"files":[{"filename":"src\/hotspot\/os\/linux\/os_linux.cpp"}],"sha":"40930a81b6acfd5bace2aa55b2c19ffd75733b7d"},{"commit":{"message":"Move cgroup max memory sanity checking to\n\nThe sanity checking now takes place on the right side of the value\ncaching.\n\nNow os::available_memory and os::physical_memory are (almost) unmodified\nfrom master"},"files":[{"filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.cpp"},{"filename":"src\/hotspot\/os\/linux\/os_linux.cpp"}],"sha":"bc493c20ba2cd0cd4044e4aa2839abd8589c403a"},{"commit":{"message":"Avoid memory_usage_in_bytes when unconstrained\n\nThanks to Severin for the suggestion. When there is no memory limit\nin place, avoid calling OSContainer::memory_usage_in_bytes, instead\npreferring the non-container sysinfo approach."},"files":[{"filename":"src\/hotspot\/os\/linux\/os_linux.cpp"}],"sha":"608650509542e48c6696f90aa853b499e5760eb3"},{"commit":{"message":"TestMemoryAwareness: assert we can get baseline physical RAM\n\nCatch case where we don't match a trace log line to establish the\nbaseline physical RAM in the test testContainerMemExceedsPhysical"},"files":[{"filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java"}],"sha":"4984ddd9c9f68c00aaa8935769e9ac925690c2fb"},{"commit":{"message":"Rework os::Linux::host_swap() to calculate on call\n\nSwap can be reconfigured at any point during runtime, so caching\nthe value once at initialisation does not make sense. Instead\nread the value from the kernel each time."},"files":[{"filename":"src\/hotspot\/os\/linux\/os_linux.cpp"},{"filename":"src\/hotspot\/os\/linux\/os_linux.hpp"}],"sha":"9de831d5e12aad9d45e016d76c82114f5f3bab43"},{"commit":{"message":"Merge remote-tracking branch 'origin\/master' into 8292083-cgroups-badmaxmem"},"files":[{"filename":"src\/hotspot\/os\/linux\/os_linux.cpp"},{"filename":"src\/hotspot\/os\/linux\/os_linux.hpp"}],"sha":"a88bb6205e866c638c26002aed94f0ecf27d7867"},{"commit":{"message":"Replace _unlimited_memory with calls to os::Linux\n\n_unlimited_memory was a constant in cgroupV1Subsystem_linux which is\ninitialised to a very large number and used as a ceiling sanity check\nwhen reading a number of memory-related cgroup limits. This was not\nsufficient to rule out all possible bad values from cgroups and so a\nlower ceiling, set to the host's physical RAM, was needed (8292083)\n\nEliminate _unlimited_memory which is superfluous and use the host\nphysical memory instead.\n\nFor memory_and_swap_limit_in_bytes we need a higher limit than\nphysical RAM, so extend os::Linux to report on the host's configured\nswap value and combine the two."},"files":[{"filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp"},{"filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.hpp"},{"filename":"src\/hotspot\/os\/linux\/os_linux.cpp"},{"filename":"src\/hotspot\/os\/linux\/os_linux.hpp"}],"sha":"66bb149da64198368c42fc6b51643fd2e0271f4b"},{"commit":{"message":"Remove cgroup sanity checking logic from os::Linux::available_memory\n\nand rely upon it from os::physical_memory instead."},"files":[{"filename":"src\/hotspot\/os\/linux\/os_linux.cpp"}],"sha":"caa7913c8a1187cfe506cfbbc66be83551b783b6"},{"commit":{"message":"tidy up log_debug calls in os::physical_memory\n\nThanks to Ioi Lam for the suggestion."},"files":[{"filename":"src\/hotspot\/os\/linux\/os_linux.cpp"}],"sha":"7e64194b6b1ee04edfe5b51725e12f121094badc"},{"commit":{"message":"Simplify testContainerMemExceedsPhysical, avoid OperatingSystemMXBean\n\nRewrite the test to run two containers. First time, capture the logging\nto get the reported physical memory size. Derive a bad value from this\n(*10). Second run, set the container memory limit to the bad value.\nCheck the trace log for a line indicating this was detected and ignored."},"files":[{"filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java"}],"sha":"ff57cf418e39fdb619bd6fe8f8d6bcfca953380a"},{"commit":{"message":"debug log physical memory (not cgroup constrained)"},"files":[{"filename":"src\/hotspot\/os\/linux\/os_linux.cpp"}],"sha":"07a1d9bc772d1c1e29f4a49d10492c3bb614df37"},{"commit":{"message":"fixup! Don't sanity check mem limit in OSContainer::init\n\nRemove unneeded local variable host_memory"},"files":[{"filename":"src\/hotspot\/os\/linux\/osContainer_linux.cpp"}],"sha":"fc2ae1b96fc49d86d83475d6dd37e2a3e53bd12f"},{"commit":{"message":"Remove set_physical_memory (unneeded)\n\nCgroups code used this to override the real host RAM value with the\ncontainer memory limit. We don't do this any more so this routine\nis not needed. Linux::physical_memory()\/_physical_memory will now\nalways correspond to the hosts physical RAM, unaffected by cgroups\nlimits."},"files":[{"filename":"src\/hotspot\/os\/linux\/os_linux.hpp"}],"sha":"98664643bc53b92ff23b7f1f683c0d9fb5ce7cb5"},{"commit":{"message":"Don't sanity check mem limit in OSContainer::init\n\nOnly do so in os::physical_memory()"},"files":[{"filename":"src\/hotspot\/os\/linux\/osContainer_linux.cpp"},{"filename":"src\/hotspot\/os\/linux\/os_linux.cpp"}],"sha":"4d8a85732c2ebbe31ae1dfc5c756ac14d4989755"},{"commit":{"message":"Rename to more descriptive testContainerMemExceedsPhysical"},"files":[{"filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java"}],"sha":"7ef00765512bd1f3fb068b89e01dd3c03b1c9886"},{"commit":{"message":"restructure conditions for legibility\n\n * split assignment to mem_limit from reading it\n * nest if expressions to avoid comparing mem_limit twice"},"files":[{"filename":"src\/hotspot\/os\/linux\/osContainer_linux.cpp"}],"sha":"7f5307d69bbbc6359d1237994a317443b74d01b9"},{"commit":{"message":"Separate out debug logging for three invalid memory limit scenarios\n\nRefactor the ternary expression into an if\/else chain and expand it\nto the third case (memory limit equal to or exceeding physical RAM)\n\nFormat the trace log message for that case to match that of the other\ntwo\n\nAdjust the other two to incorporate physical RAM into the log message"},"files":[{"filename":"src\/hotspot\/os\/linux\/os_linux.cpp"}],"sha":"8d7e80c6253f5cf17f119bdecae9b574c8e9fd2c"},{"commit":{"message":"Ensure trace log is enabled before trace logging\n\nThanks Severin"},"files":[{"filename":"src\/hotspot\/os\/linux\/osContainer_linux.cpp"}],"sha":"7a63709ff7a8f8a0955c911d5b0916d6c5297fbc"},{"commit":{"message":"Add a test for 8292083\n\nSigned-off-by: Jonathan Dowland <jdowland@redhat.com>"},"files":[{"filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java"}],"sha":"2de864c8e28542f852ccf2734c7ac36e6f6e6ca7"},{"commit":{"message":"Linux: clamp os::physical_memory by Linux::physical_memory\n\nThe memory limit within a cgroup might be higher than the amount\nof physical memory, so clamp it."},"files":[{"filename":"src\/hotspot\/os\/linux\/osContainer_linux.cpp"},{"filename":"src\/hotspot\/os\/linux\/os_linux.cpp"}],"sha":"2304a767f06a32fe72221af331aa9aceb8011637"},{"commit":{"message":"Bound container memory above by host memory"},"files":[{"filename":"src\/hotspot\/os\/linux\/osContainer_linux.cpp"}],"sha":"b0c9cfbeebf58c9dfec7c42b4a01a1350e07da76"}]