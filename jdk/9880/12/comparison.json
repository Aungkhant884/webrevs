{"files":[{"patch":"@@ -34,0 +34,1 @@\n+#include \"os_linux.hpp\"\n@@ -94,1 +95,1 @@\n-  if (memlimit >= _unlimited_memory) {\n+  if (memlimit >= os::Linux::physical_memory()) {\n@@ -102,1 +103,1 @@\n-      if (hier_memlimit >= _unlimited_memory) {\n+      if (hier_memlimit >= os::Linux::physical_memory()) {\n@@ -116,0 +117,1 @@\n+  julong host_total_memsw;\n@@ -118,1 +120,2 @@\n-  if (memswlimit >= _unlimited_memory) {\n+  host_total_memsw = os::Linux::host_swap() + os::Linux::physical_memory();\n+  if (memswlimit >= host_total_memsw) {\n@@ -126,1 +129,1 @@\n-      if (hier_memswlimit >= _unlimited_memory) {\n+      if (hier_memswlimit >= host_total_memsw) {\n@@ -161,1 +164,1 @@\n-  if (memsoftlimit >= _unlimited_memory) {\n+  if (memsoftlimit >= os::Linux::physical_memory()) {\n@@ -208,1 +211,1 @@\n-  if (kmem_limit >= _unlimited_memory) {\n+  if (kmem_limit >= os::Linux::physical_memory()) {\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -107,2 +107,0 @@\n-    julong _unlimited_memory;\n-\n@@ -131,1 +129,0 @@\n-      _unlimited_memory = (LONG_MAX \/ os::vm_page_size()) * os::vm_page_size();\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,2 +46,0 @@\n-  jlong mem_limit;\n-\n@@ -63,6 +61,0 @@\n-  \/\/ We need to update the amount of physical memory now that\n-  \/\/ cgroup subsystem files have been processed.\n-  if ((mem_limit = cgroup_subsystem->memory_limit_in_bytes()) > 0) {\n-    os::Linux::set_physical_memory(mem_limit);\n-    log_info(os, container)(\"Memory Limit is: \" JLONG_FORMAT, mem_limit);\n-  }\n@@ -71,1 +63,0 @@\n-\n","filename":"src\/hotspot\/os\/linux\/osContainer_linux.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -197,4 +197,5 @@\n-    jlong mem_limit, mem_usage;\n-    if ((mem_limit = OSContainer::memory_limit_in_bytes()) < 1) {\n-      log_debug(os, container)(\"container memory limit %s: \" JLONG_FORMAT \", using host value\",\n-                             mem_limit == OSCONTAINER_ERROR ? \"failed\" : \"unlimited\", mem_limit);\n+    jlong mem_limit, mem_usage, host_mem;\n+    host_mem = Linux::physical_memory();\n+    mem_limit = OSContainer::memory_limit_in_bytes();\n+    if (mem_limit > host_mem) {\n+      mem_limit = -1; \/\/ bail out of container code\n@@ -202,7 +203,9 @@\n-    if (mem_limit > 0 && (mem_usage = OSContainer::memory_usage_in_bytes()) < 1) {\n-      log_debug(os, container)(\"container memory usage failed: \" JLONG_FORMAT \", using host value\", mem_usage);\n-    }\n-    if (mem_limit > 0 && mem_usage > 0 ) {\n-      avail_mem = mem_limit > mem_usage ? (julong)mem_limit - (julong)mem_usage : 0;\n-      log_trace(os)(\"available container memory: \" JULONG_FORMAT, avail_mem);\n-      return avail_mem;\n+    if (mem_limit > 0) {\n+      if (mem_usage = OSContainer::memory_usage_in_bytes() < 1) {\n+        log_debug(os, container)(\"container memory usage failed: \" JLONG_FORMAT \", using host value\", mem_usage);\n+      }\n+      if (mem_usage > 0) {\n+        avail_mem = mem_limit > mem_usage ? (julong)mem_limit - (julong)mem_usage : 0;\n+        log_trace(os)(\"available container memory: \" JULONG_FORMAT, avail_mem);\n+        return avail_mem;\n+      }\n@@ -219,1 +222,3 @@\n-  jlong phys_mem = 0;\n+  jlong phys_mem = Linux::physical_memory();\n+  log_debug(os, container)(\"total physical memory: \" JLONG_FORMAT, phys_mem);\n+\n@@ -221,2 +226,3 @@\n-    jlong mem_limit;\n-    if ((mem_limit = OSContainer::memory_limit_in_bytes()) > 0) {\n+    const char *reason;\n+    jlong mem_limit = OSContainer::memory_limit_in_bytes();\n+    if (mem_limit > 0 && mem_limit < phys_mem) {\n@@ -226,2 +232,9 @@\n-    log_debug(os, container)(\"container memory limit %s: \" JLONG_FORMAT \", using host value\",\n-                            mem_limit == OSCONTAINER_ERROR ? \"failed\" : \"unlimited\", mem_limit);\n+    if (mem_limit >= phys_mem) {\n+      reason = \"ignored\";\n+    } else if (OSCONTAINER_ERROR == mem_limit) {\n+      reason = \"failed\";\n+    } else {\n+      reason = \"unlimited\";\n+    }\n+    log_debug(os, container)(\"container memory limit %s: \" JLONG_FORMAT \", using host value \" JLONG_FORMAT,\n+                             reason, mem_limit, phys_mem);\n@@ -230,1 +243,0 @@\n-  phys_mem = Linux::physical_memory();\n@@ -341,0 +353,8 @@\n+}\n+\n+\/\/ Returns the amount of swap currently configured, in bytes.\n+\/\/ This can change at any time.\n+julong os::Linux::host_swap() {\n+  struct sysinfo si;\n+  sysinfo(&si);\n+  return (julong)si.totalswap;\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":37,"deletions":17,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -60,2 +60,0 @@\n-  static julong physical_memory() { return _physical_memory; }\n-  static void set_physical_memory(julong phys_mem) { _physical_memory = phys_mem; }\n@@ -134,0 +132,3 @@\n+  static julong physical_memory() { return _physical_memory; }\n+  static julong host_swap();\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @bug 8146115 8292083\n@@ -44,0 +45,2 @@\n+import static jdk.test.lib.Asserts.assertNotNull;\n+\n@@ -79,0 +82,1 @@\n+            testContainerMemExceedsPhysical();\n@@ -99,0 +103,22 @@\n+    \/\/ JDK-8292083\n+    \/\/ Ensure that Java ignores container memory limit values above the host's physical memory.\n+    private static void testContainerMemExceedsPhysical()\n+            throws Exception {\n+\n+        Common.logNewTestCase(\"container memory limit exceeds physical memory\");\n+\n+        DockerRunOptions opts = Common.newOpts(imageName);\n+\n+        \/\/ first run: establish physical memory in test environment and derive\n+        \/\/ a bad value one power of ten larger\n+        String goodMem = Common.run(opts).firstMatch(\"total physical memory: (\\\\d+)\", 1);\n+        assertNotNull(goodMem, \"no match for 'total physical memory' in trace output\");\n+        String badMem = goodMem + \"0\";\n+\n+        \/\/ second run: set a container memory limit to the bad value\n+        opts = Common.newOpts(imageName)\n+            .addDockerOpts(\"--memory\", badMem);\n+        Common.run(opts)\n+            .shouldMatch(\"container memory limit ignored: \"+badMem+\", using host value \"+goodMem);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"}]}