{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -288,1 +288,1 @@\n-            if (dstoffset > 0 && tz.getOffset(msec - dstoffset) == rawoffset) {\n+            if (dstoffset > 0 && tz.getOffset(msec - dstoffset) == rawoffset && type == WALL_TIME) {\n","filename":"src\/java.base\/share\/classes\/sun\/util\/calendar\/ZoneInfo.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8073446 8262110\n+ * @summary Tests DST related beyond the year 2037\n+ * @run testng Beyond2037\n+ *\/\n+\n+import java.text.SimpleDateFormat;\n+import java.util.TimeZone;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertEquals;\n+\n+@Test\n+public class Beyond2037 {\n+\n+    @DataProvider\n+    Object[][] dstTransition() {\n+        return new Object[][] {\n+            {\"2037\/03\/08 01:59:59:999\", \"2037\/03\/08 01:59:59:999\"},\n+            {\"2037\/03\/08 02:00:00:000\", \"2037\/03\/08 03:00:00:000\"},\n+            {\"2038\/03\/14 01:59:59:999\", \"2038\/03\/14 01:59:59:999\"},\n+            {\"2038\/03\/14 02:00:00:000\", \"2038\/03\/14 03:00:00:000\"},\n+            {\"2099\/03\/08 01:59:59:999\", \"2099\/03\/08 01:59:59:999\"},\n+            {\"2099\/03\/08 02:00:00:000\", \"2099\/03\/08 03:00:00:000\"},\n+            {\"2100\/03\/14 01:59:59:999\", \"2100\/03\/14 01:59:59:999\"},\n+            {\"2100\/03\/14 02:00:00:000\", \"2100\/03\/14 03:00:00:000\"},\n+            {\"8000\/03\/12 01:59:59:999\", \"8000\/03\/12 01:59:59:999\"},\n+            {\"8000\/03\/12 02:00:00:000\", \"8000\/03\/12 03:00:00:000\"},\n+        };\n+    }\n+\n+    @Test(dataProvider=\"dstTransition\")\n+    public void testDstTransition(String source, String expected) throws Exception {\n+        var timeZone = TimeZone.getTimeZone(\"America\/New_York\");\n+        var sdf = new SimpleDateFormat(\"yyyy\/MM\/dd HH:mm:ss:SSS\" );\n+        sdf.setTimeZone(timeZone);\n+        assertEquals(sdf.format(sdf.parse(source)), expected);\n+    }\n+\n+    @Test\n+    public void testGetOffset() throws Exception {\n+        var timeZone = TimeZone.getTimeZone(\"PST8PDT\");\n+        var df = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n+        df.setTimeZone(timeZone);\n+        var tMilli = df.parse(\"7681-03-09 03:20:49\").getTime();\n+        assertEquals(timeZone.getOffset(tMilli), -25200000);\n+    }\n+}\n","filename":"test\/jdk\/sun\/util\/calendar\/zi\/Beyond2037.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}