{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n@@ -35,0 +38,3 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.xml.stream.XMLStreamWriter;\n@@ -134,1 +140,3 @@\n-            xmlConsumer.accept(xml);\n+            xmlConsumer.accept((XMLStreamWriter) Proxy.newProxyInstance(\n+                    XMLStreamWriter.class.getClassLoader(), new Class<?>[]{\n+                XMLStreamWriter.class}, new WixPreprocessorEscaper(xml)));\n@@ -150,0 +158,52 @@\n+    private static class WixPreprocessorEscaper implements InvocationHandler {\n+\n+        WixPreprocessorEscaper(XMLStreamWriter target) {\n+            this.target = target;\n+        }\n+\n+        @Override\n+        public Object invoke(Object proxy, Method method, Object[] args) throws\n+                Throwable {\n+            switch (method.getName()) {\n+                case \"writeAttribute\" -> {\n+                    Object newArgs[] = new Object[args.length];\n+                    for (int i = 0; i < args.length - 1; ++i) {\n+                        newArgs[i] = args[i];\n+                    }\n+                    newArgs[args.length - 1] = escape(\n+                            (CharSequence) args[args.length - 1]);\n+                    return method.invoke(target, newArgs);\n+                }\n+                case \"writeCData\" -> {\n+                    target.writeCData(escape((CharSequence) args[0]));\n+                    return null;\n+                }\n+                case \"writeCharacters\" -> {\n+                    if (args.length == 3) {\n+                        \/\/ writeCharacters(char[] text, int start, int len)\n+                        target.writeCharacters(escape(String.copyValueOf(\n+                                (char[]) args[0], (int) args[1], (int) args[2])));\n+                    } else {\n+                        target.writeCharacters(escape((CharSequence) args[0]));\n+                    }\n+                    return null;\n+                }\n+            }\n+            return method.invoke(target, args);\n+        }\n+\n+        private String escape(CharSequence str) {\n+            Matcher m = dollarPattern.matcher(str);\n+            StringBuilder sb = new StringBuilder();\n+            while (m.find()) {\n+                m.appendReplacement(sb, \"\\\\$\\\\$\");\n+            }\n+            m.appendTail(sb);\n+            return sb.toString();\n+        }\n+\n+        \/\/ Match '$', but don't match $(var.foo)\n+        private final Pattern dollarPattern = Pattern.compile(\"\\\\$(?!\\\\([^)]*\\\\))\");\n+        private final XMLStreamWriter target;\n+    }\n+\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WixFragmentBuilder.java","additions":62,"deletions":2,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.RunnablePackageTest.Action;\n+import jdk.jpackage.test.TKit;\n+\n+\/**\n+ * Test packaging of files with paths containing multiple dollar ($$, $$$)\n+ * character sequences.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test case for JDK-8248254\n+ * @library ..\/helpers\n+ * @build jdk.jpackage.test.*\n+ * @build Win8282351Test\n+ * @requires (os.family == \"windows\")\n+ * @modules jdk.jpackage\/jdk.jpackage.internal\n+ * @run main\/othervm\/timeout=360 -Xmx512m  jdk.jpackage.test.Main\n+ *  --jpt-run=Win8282351Test\n+ *\/\n+public class Win8282351Test {\n+\n+    @Test\n+    public void test() throws IOException {\n+        Path appimageOutput = TKit.createTempDirectory(\"appimage\");\n+\n+        JPackageCommand appImageCmd = JPackageCommand.helloAppImage()\n+                .setFakeRuntime().setArgumentValue(\"--dest\", appimageOutput);\n+\n+        String[] filesWithDollarCharsInNames = new String[]{\n+            \"Pane$$anon$$greater$1.class\",\n+            \"$\",\n+            \"$$\",\n+            \"$$$\",\n+            \"$$$$\",\n+            \"$$$$$\",\n+            \"foo$.class\",\n+            \"1$b$$a$$$r$$$$.class\"\n+        };\n+\n+        String[] dirsWithDollarCharsInNames = new String[]{\n+            Path.of(\"foo\", String.join(\"\/\", filesWithDollarCharsInNames)).toString()\n+        };\n+\n+        String name = appImageCmd.name() + \"$-$$-$$$\";\n+\n+        new PackageTest()\n+                .addRunOnceInitializer(() -> {\n+                    appImageCmd.execute();\n+                    for (var path : filesWithDollarCharsInNames) {\n+                        createImageFile(appImageCmd, Path.of(path));\n+                    }\n+\n+                    for (var path : dirsWithDollarCharsInNames) {\n+                        Files.createDirectories(\n+                                appImageCmd.outputBundle().resolve(path));\n+                    }\n+                })\n+                .addInitializer(cmd -> {\n+                    cmd.setArgumentValue(\"--name\", name);\n+                    cmd.addArguments(\"--app-image\", appImageCmd.outputBundle());\n+                    cmd.removeArgumentWithValue(\"--input\");\n+                    cmd.addArgument(\"--win-menu\");\n+                    cmd.addArgument(\"--win-shortcut\");\n+                })\n+                .addInstallVerifier(cmd -> {\n+                    for (var path : filesWithDollarCharsInNames) {\n+                        verifyImageFile(appImageCmd, Path.of(path));\n+                    }\n+\n+                    for (var path : dirsWithDollarCharsInNames) {\n+                        TKit.assertDirectoryExists(\n+                                appImageCmd.outputBundle().resolve(path));\n+                    }\n+                }).run(Action.CREATE_AND_UNPACK);\n+    }\n+\n+    private static void createImageFile(JPackageCommand cmd, Path name) throws\n+            IOException {\n+        Files.writeString(cmd.outputBundle().resolve(name), name.toString());\n+    }\n+\n+    private static void verifyImageFile(JPackageCommand cmd, Path name) throws\n+            IOException {\n+        TKit.assertEquals(name.toString(), Files.readString(\n+                (cmd.outputBundle().resolve(name))), String.format(\n+                \"Test contents of [%s] image file are euqal to [%s]\", name, name));\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/windows\/Win8282351Test.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}