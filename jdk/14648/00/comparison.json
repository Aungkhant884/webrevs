{"files":[{"patch":"@@ -35,1 +35,1 @@\n- * @run main\/othervm TestStackOverflowDuringInit\n+ * @run main\/othervm -Xss160K -Xint TestStackOverflowDuringInit\n@@ -43,1 +43,26 @@\n-    \/\/ Test case is fuzzed\/obfuscated\n+    \/\/ The setup for this is somewhat intricate. We need to trigger a\n+    \/\/ StackOverflowError during execution of the static initializer\n+    \/\/ for a class, but we need there to be insufficient stack left\n+    \/\/ for the creation of the ExceptionInInitializerError that would\n+    \/\/ occur in that case. So we can't just recurse in a static initializer\n+    \/\/ as that would unwind all the way allowing plenty of stack for the\n+    \/\/ EIIE. Instead we recurse outside of a static initializer context\n+    \/\/ and have a finally clause that will trigger class initialization\n+    \/\/ of another class, which is where we will fail to create the EIIE.\n+    \/\/ Even then this is non-trivial, only the use of Long.valueOf from\n+    \/\/ the original reproducer seems to trigger SOE in just the right places.\n+\n+    static void recurse() {\n+        try {\n+            \/\/ This will initialize Long but not touch LongCache.\n+            Long.valueOf(1024L);\n+            recurse();\n+        } finally {\n+            \/\/ This will require initializing LongCache, which will\n+            \/\/ initially fail due to StackOverflowError and so LongCache\n+            \/\/ will be marked erroneous. As we unwind and again execute this\n+            \/\/ we will throw NoClassDefFoundError due to the erroneous\n+            \/\/ state of LongCache.\n+            Long.valueOf(0);\n+        }\n+    }\n@@ -49,1 +74,0 @@\n-        TestStackOverflowDuringInit i = new TestStackOverflowDuringInit();\n@@ -51,1 +75,1 @@\n-            i.j();\n+            recurse();\n@@ -58,2 +82,0 @@\n-    void j() { ((e) new a()).g = 0; }\n-\n@@ -73,19 +95,0 @@\n-\n-class a {\n-    Boolean b;\n-    {\n-        try {\n-            Long.valueOf(509505376256L);\n-            Boolean c =\n-                true ? new d().b\n-                : 5 != ((e)java.util.HashSet.newHashSet(301758).clone()).f;\n-        } finally {\n-            Long.valueOf(0);\n-        }\n-    }\n-}\n-class e extends a {\n-    double g;\n-    int f;\n-}\n-class d extends a {}\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassInitErrors\/TestStackOverflowDuringInit.java","additions":28,"deletions":25,"binary":false,"changes":53,"status":"modified"}]}