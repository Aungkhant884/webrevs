{"files":[{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib \/\n@@ -28,1 +29,4 @@\n- * @run main compiler.floatingpoint.NaNTest\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   compiler.floatingpoint.NaNTest\n@@ -33,0 +37,3 @@\n+import jdk.test.lib.Platform;\n+import sun.hotspot.WhiteBox;\n+\n@@ -34,1 +41,3 @@\n-    static void testFloat() {\n+    static final WhiteBox WHITE_BOX = WhiteBox.getWhiteBox();\n+\n+    static void testFloat(boolean expectStable) {\n@@ -37,6 +46,1 @@\n-        if (originalValue != readBackValue) {\n-            String errorMessage = String.format(\"Original and read back float values mismatch\\n0x%X 0x%X\\n\",\n-                                                originalValue,\n-                                                readBackValue);\n-            throw new RuntimeException(errorMessage);\n-        } else {\n+        if (originalValue == readBackValue) {\n@@ -46,0 +50,9 @@\n+        } else {\n+            String message = String.format(\"Original and read back float values mismatch\\n0x%X 0x%X\\n\",\n+                                           originalValue,\n+                                           readBackValue);\n+            if (expectStable) {\n+                throw new RuntimeException(message);\n+            } else {\n+                System.out.println(message);\n+            }\n@@ -49,1 +62,1 @@\n-    static void testDouble() {\n+    static void testDouble(boolean expectStable) {\n@@ -52,6 +65,1 @@\n-        if (originalValue != readBackValue) {\n-            String errorMessage = String.format(\"Original and read back double values mismatch\\n0x%X 0x%X\\n\",\n-                                                originalValue,\n-                                                readBackValue);\n-            throw new RuntimeException(errorMessage);\n-        } else {\n+        if (originalValue == readBackValue) {\n@@ -61,0 +69,9 @@\n+        } else {\n+            String message = String.format(\"Original and read back double values mismatch\\n0x%X 0x%X\\n\",\n+                                           originalValue,\n+                                           readBackValue);\n+            if (expectStable) {\n+                throw new RuntimeException(message);\n+            } else {\n+                System.out.println(message);\n+            }\n@@ -62,1 +79,0 @@\n-\n@@ -68,2 +84,16 @@\n-        testFloat();\n-        testDouble();\n+        \/\/ Some platforms are known to strip signaling NaNs.\n+        \/\/ The block below can be used to except them.\n+        boolean expectStableFloats = true;\n+        boolean expectStableDoubles = true;\n+\n+        \/\/ On x86_32 without relevant SSE-enabled stubs, we are entering\n+        \/\/ native methods that use FPU instructions, and those strip the\n+        \/\/ signaling NaNs.\n+        if (Platform.isX86()) {\n+            int sse = WHITE_BOX.getIntxVMFlag(\"UseSSE\").intValue();\n+            expectStableFloats = (sse >= 1);\n+            expectStableDoubles = (sse >= 2);\n+        }\n+\n+        testFloat(expectStableFloats);\n+        testDouble(expectStableDoubles);\n","filename":"test\/hotspot\/jtreg\/compiler\/floatingpoint\/NaNTest.java","additions":48,"deletions":18,"binary":false,"changes":66,"status":"modified"}]}