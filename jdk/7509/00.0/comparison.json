{"files":[{"patch":"@@ -1202,3 +1202,0 @@\n-reg_class p0_reg(P0);\n-reg_class p1_reg(P1);\n-\n@@ -5690,18 +5687,0 @@\n-operand pRegGov_P0()\n-%{\n-  constraint(ALLOC_IN_RC(p0_reg));\n-  match(RegVectMask);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n-operand pRegGov_P1()\n-%{\n-  constraint(ALLOC_IN_RC(p1_reg));\n-  match(RegVectMask);\n-  op_cost(0);\n-  format %{ %}\n-  interface(REG_INTER);\n-%}\n-\n@@ -16686,1 +16665,1 @@\n-  predicate((UseSVE == 0) && (((StrCompNode*)n)->encoding() == StrIntrinsicNode::UU));\n+  predicate(((StrCompNode*)n)->encoding() == StrIntrinsicNode::UU);\n@@ -16696,1 +16675,1 @@\n-                      fnoreg, fnoreg, fnoreg, pnoreg, pnoreg, StrIntrinsicNode::UU);\n+                      fnoreg, fnoreg, fnoreg, StrIntrinsicNode::UU);\n@@ -16704,1 +16683,1 @@\n-  predicate((UseSVE == 0) && (((StrCompNode*)n)->encoding() == StrIntrinsicNode::LL));\n+  predicate(((StrCompNode*)n)->encoding() == StrIntrinsicNode::LL);\n@@ -16713,1 +16692,1 @@\n-                      fnoreg, fnoreg, fnoreg, pnoreg, pnoreg, StrIntrinsicNode::LL);\n+                      fnoreg, fnoreg, fnoreg, StrIntrinsicNode::LL);\n@@ -16722,1 +16701,1 @@\n-  predicate((UseSVE == 0) && (((StrCompNode*)n)->encoding() == StrIntrinsicNode::UL));\n+  predicate(((StrCompNode*)n)->encoding() == StrIntrinsicNode::UL);\n@@ -16733,1 +16712,1 @@\n-                      $vtmp3$$FloatRegister, pnoreg, pnoreg, StrIntrinsicNode::UL);\n+                      $vtmp3$$FloatRegister, StrIntrinsicNode::UL);\n@@ -16742,1 +16721,1 @@\n-  predicate((UseSVE == 0) && (((StrCompNode*)n)->encoding() == StrIntrinsicNode::LU));\n+  predicate(((StrCompNode*)n)->encoding() == StrIntrinsicNode::LU);\n@@ -16753,1 +16732,1 @@\n-                      $vtmp3$$FloatRegister, pnoreg, pnoreg, StrIntrinsicNode::LU);\n+                      $vtmp3$$FloatRegister,StrIntrinsicNode::LU);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":8,"deletions":29,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -278,2 +278,0 @@\n-CONSTANT_REGISTER_DECLARATION(PRegister, pnoreg, (-1));\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5218,91 +5218,0 @@\n-  enum string_compare_mode {\n-    LL,\n-    LU,\n-    UL,\n-    UU,\n-  };\n-\n-  \/\/ The following registers are declared in aarch64.ad\n-  \/\/ r0  = result\n-  \/\/ r1  = str1\n-  \/\/ r2  = cnt1\n-  \/\/ r3  = str2\n-  \/\/ r4  = cnt2\n-  \/\/ r10 = tmp1\n-  \/\/ r11 = tmp2\n-  \/\/ z0  = ztmp1\n-  \/\/ z1  = ztmp2\n-  \/\/ p0  = pgtmp1\n-  \/\/ p1  = pgtmp2\n-  address generate_compare_long_string_sve(string_compare_mode mode) {\n-    __ align(CodeEntryAlignment);\n-    address entry = __ pc();\n-    Register result = r0, str1 = r1, cnt1 = r2, str2 = r3, cnt2 = r4,\n-             tmp1 = r10, tmp2 = r11;\n-\n-    Label LOOP, MATCH, DONE, NOMATCH;\n-    Register vec_len = tmp1;\n-    Register idx = tmp2;\n-    \/\/ The minimum of the string lengths has been stored in cnt2.\n-    Register cnt = cnt2;\n-    FloatRegister ztmp1 = z0, ztmp2 = z1;\n-    PRegister pgtmp1 = p0, pgtmp2 = p1;\n-\n-    if (mode == LL) {\n-      __ sve_cntb(vec_len);\n-    } else {\n-      __ sve_cnth(vec_len);\n-    }\n-\n-    __ mov(idx, 0);\n-    __ sve_whilelt(pgtmp1, mode == LL ? __ B : __ H, idx, cnt);\n-\n-    __ bind(LOOP);\n-      switch (mode) {\n-        case LL:\n-          __ sve_ld1b(ztmp1, __ B, pgtmp1, Address(str1, idx));\n-          __ sve_ld1b(ztmp2, __ B, pgtmp1, Address(str2, idx));\n-          break;\n-        case LU:\n-          __ sve_ld1b(ztmp1, __ H, pgtmp1, Address(str1, idx));\n-          __ sve_ld1h(ztmp2, __ H, pgtmp1, Address(str2, idx, Address::lsl(1)));\n-          break;\n-        case UL:\n-          __ sve_ld1h(ztmp1, __ H, pgtmp1, Address(str1, idx, Address::lsl(1)));\n-          __ sve_ld1b(ztmp2, __ H, pgtmp1, Address(str2, idx));\n-          break;\n-        case UU:\n-          __ sve_ld1h(ztmp1, __ H, pgtmp1, Address(str1, idx, Address::lsl(1)));\n-          __ sve_ld1h(ztmp2, __ H, pgtmp1, Address(str2, idx, Address::lsl(1)));\n-          break;\n-        default: ShouldNotReachHere();\n-      }\n-      __ add(idx, idx, vec_len);\n-\n-      \/\/ Compare strings.\n-      __ sve_cmp(Assembler::NE, pgtmp2, mode == LL ? __ B : __ H, pgtmp1, ztmp1, ztmp2);\n-      __ br(__ NE, MATCH);\n-      __ sve_whilelt(pgtmp1, mode == LL ? __ B : __ H, idx, cnt);\n-      __ br(__ LT, LOOP);\n-\n-      \/\/ The result has been computed in the caller prior to entering this stub.\n-      __ b(DONE);\n-\n-    __ bind(MATCH);\n-\n-      \/\/ Crop the vector to find its location.\n-      __ sve_brkb(pgtmp2, pgtmp1, pgtmp2, false \/* isMerge *\/);\n-\n-      \/\/ Extract the first different characters of each string.\n-      __ sve_lasta(rscratch1, mode == LL ? __ B : __ H, pgtmp2, ztmp1);\n-      __ sve_lasta(rscratch2, mode == LL ? __ B : __ H, pgtmp2, ztmp2);\n-\n-      \/\/ Compute the difference of the first different characters.\n-      __ sub(result, rscratch1, rscratch2);\n-\n-    __ bind(DONE);\n-      __ ret(lr);\n-\n-    return entry;\n-  }\n-\n@@ -5431,1 +5340,0 @@\n-    if (UseSVE == 0) {\n@@ -5440,10 +5348,0 @@\n-    } else {\n-      StubRoutines::aarch64::_compare_long_string_LL\n-          = generate_compare_long_string_sve(LL);\n-      StubRoutines::aarch64::_compare_long_string_UU\n-          = generate_compare_long_string_sve(UU);\n-      StubRoutines::aarch64::_compare_long_string_LU\n-          = generate_compare_long_string_sve(LU);\n-      StubRoutines::aarch64::_compare_long_string_UL\n-          = generate_compare_long_string_sve(UL);\n-    }\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":0,"deletions":102,"binary":false,"changes":102,"status":"modified"}]}