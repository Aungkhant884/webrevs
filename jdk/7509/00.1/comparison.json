{"files":[{"patch":"@@ -8544,1 +8544,1 @@\n-    __ mov($tmp$$FloatRegister, __ T1D, 0, $src$$Register);\n+    __ mov($tmp$$FloatRegister, __ D, 0, $src$$Register);\n@@ -8547,1 +8547,1 @@\n-    __ mov($dst$$Register, $tmp$$FloatRegister, __ T1D, 0);\n+    __ mov($dst$$Register, $tmp$$FloatRegister, __ D, 0);\n@@ -8569,1 +8569,1 @@\n-    __ mov($dst$$Register, $tmp$$FloatRegister, __ T1D, 0);\n+    __ mov($dst$$Register, $tmp$$FloatRegister, __ D, 0);\n@@ -8587,1 +8587,1 @@\n-    __ mov($tmp$$FloatRegister, __ T1D, 0, $src$$Register);\n+    __ mov($tmp$$FloatRegister, __ D, 0, $src$$Register);\n@@ -8590,1 +8590,1 @@\n-    __ mov($dst$$Register, $tmp$$FloatRegister, __ T1D, 0);\n+    __ mov($dst$$Register, $tmp$$FloatRegister, __ D, 0);\n@@ -8612,1 +8612,1 @@\n-    __ mov($dst$$Register, $tmp$$FloatRegister, __ T1D, 0);\n+    __ mov($dst$$Register, $tmp$$FloatRegister, __ D, 0);\n@@ -16997,1 +16997,2 @@\n-  effect(TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, USE_KILL src, USE_KILL dst, USE_KILL len, KILL cr);\n+  effect(TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4,\n+         USE_KILL src, USE_KILL dst, USE len, KILL cr);\n@@ -16999,1 +17000,1 @@\n-  format %{ \"String Compress $src,$dst -> $result    \/\/ KILL R1, R2, R3, R4\" %}\n+  format %{ \"String Compress $src,$dst,$len -> $result  \/\/ KILL $src,$dst\" %}\n@@ -17002,0 +17003,1 @@\n+                           $result$$Register,\n@@ -17003,2 +17005,1 @@\n-                           $tmp3$$FloatRegister, $tmp4$$FloatRegister,\n-                           $result$$Register);\n+                           $tmp3$$FloatRegister, $tmp4$$FloatRegister);\n@@ -17006,1 +17007,1 @@\n-  ins_pipe( pipe_slow );\n+  ins_pipe(pipe_slow);\n@@ -17031,2 +17032,2 @@\n-                          vRegD_V0 Vtmp1, vRegD_V1 Vtmp2,\n-                          vRegD_V2 Vtmp3, vRegD_V3 Vtmp4,\n+                          vRegD_V0 vtmp0, vRegD_V1 vtmp1,\n+                          vRegD_V2 vtmp2, vRegD_V3 vtmp3,\n@@ -17037,2 +17038,2 @@\n-  effect(USE_KILL src, USE_KILL dst, USE_KILL len,\n-         KILL Vtmp1, KILL Vtmp2, KILL Vtmp3, KILL Vtmp4, KILL cr);\n+  effect(USE_KILL src, USE_KILL dst, USE len,\n+         KILL vtmp0, KILL vtmp1, KILL vtmp2, KILL vtmp3, KILL cr);\n@@ -17040,1 +17041,1 @@\n-  format %{ \"Encode array $src,$dst,$len -> $result\" %}\n+  format %{ \"Encode ISO array $src,$dst,$len -> $result\" %}\n@@ -17043,2 +17044,3 @@\n-         $result$$Register, $Vtmp1$$FloatRegister,  $Vtmp2$$FloatRegister,\n-         $Vtmp3$$FloatRegister,  $Vtmp4$$FloatRegister);\n+                        $result$$Register, false,\n+                        $vtmp0$$FloatRegister, $vtmp1$$FloatRegister,\n+                        $vtmp2$$FloatRegister, $vtmp3$$FloatRegister);\n@@ -17046,1 +17048,21 @@\n-  ins_pipe( pipe_class_memory );\n+  ins_pipe(pipe_class_memory);\n+%}\n+\n+instruct encode_ascii_array(iRegP_R2 src, iRegP_R1 dst, iRegI_R3 len,\n+                            vRegD_V0 vtmp0, vRegD_V1 vtmp1,\n+                            vRegD_V2 vtmp2, vRegD_V3 vtmp3,\n+                            iRegI_R0 result, rFlagsReg cr)\n+%{\n+  predicate(((EncodeISOArrayNode*)n)->is_ascii());\n+  match(Set result (EncodeISOArray src (Binary dst len)));\n+  effect(USE_KILL src, USE_KILL dst, USE len,\n+         KILL vtmp0, KILL vtmp1, KILL vtmp2, KILL vtmp3, KILL cr);\n+\n+  format %{ \"Encode ASCII array $src,$dst,$len -> $result\" %}\n+  ins_encode %{\n+    __ encode_iso_array($src$$Register, $dst$$Register, $len$$Register,\n+                        $result$$Register, true,\n+                        $vtmp0$$FloatRegister, $vtmp1$$FloatRegister,\n+                        $vtmp2$$FloatRegister, $vtmp3$$FloatRegister);\n+  %}\n+  ins_pipe(pipe_class_memory);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":41,"deletions":19,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-typedef RegisterImpl* Register;\n+typedef const RegisterImpl* Register;\n@@ -39,3 +39,1 @@\n-inline const Register as_Register(int encoding) {\n-  return (Register)(intptr_t) encoding;\n-}\n+inline constexpr Register as_Register(int encoding);\n@@ -44,1 +42,3 @@\n- public:\n+  static constexpr Register first();\n+\n+public:\n@@ -47,2 +47,1 @@\n-    number_of_byte_registers      = 32,\n-    number_of_registers_for_jvmci = 34,  \/\/ Including SP and ZR.\n+    number_of_declared_registers  = 34,  \/\/ Including SP and ZR.\n@@ -53,1 +52,1 @@\n-  Register successor() const                          { return as_Register(encoding() + 1); }\n+  const Register successor() const { return this + 1; }\n@@ -56,1 +55,1 @@\n-  inline friend const Register as_Register(int encoding);\n+  inline friend constexpr Register as_Register(int encoding);\n@@ -58,1 +57,1 @@\n-  VMReg as_VMReg();\n+  VMReg as_VMReg() const;\n@@ -61,3 +60,2 @@\n-  int   encoding() const                         { assert(is_valid(), \"invalid register\"); return (intptr_t)this; }\n-  bool  is_valid() const                         { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }\n-  bool  has_byte_register() const                { return 0 <= (intptr_t)this && (intptr_t)this < number_of_byte_registers; }\n+  int encoding() const             { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n+  bool is_valid() const            { return (unsigned)encoding_nocheck() < number_of_registers; }\n@@ -65,1 +63,1 @@\n-  int   encoding_nocheck() const                 { return (intptr_t)this; }\n+  int encoding_nocheck() const     { return this - first(); }\n@@ -68,0 +66,3 @@\n+\n+REGISTER_IMPL_DECLARATION(Register, RegisterImpl, RegisterImpl::number_of_declared_registers);\n+\n@@ -72,1 +73,0 @@\n-\n@@ -129,1 +129,1 @@\n-typedef FloatRegisterImpl* FloatRegister;\n+typedef const FloatRegisterImpl* FloatRegister;\n@@ -131,3 +131,1 @@\n-inline FloatRegister as_FloatRegister(int encoding) {\n-  return (FloatRegister)(intptr_t) encoding;\n-}\n+inline constexpr FloatRegister as_FloatRegister(int encoding);\n@@ -137,1 +135,3 @@\n- public:\n+  static constexpr FloatRegister first();\n+\n+public:\n@@ -147,1 +147,1 @@\n-  inline friend FloatRegister as_FloatRegister(int encoding);\n+  inline friend constexpr FloatRegister as_FloatRegister(int encoding);\n@@ -149,1 +149,1 @@\n-  VMReg as_VMReg();\n+  VMReg as_VMReg() const;\n@@ -152,1 +152,3 @@\n-  FloatRegister successor() const                          { return as_FloatRegister((encoding() + 1) % 32); }\n+  FloatRegister successor() const {\n+    return as_FloatRegister((encoding() + 1) % (unsigned)number_of_registers);\n+  }\n@@ -155,3 +157,2 @@\n-  int   encoding() const                          { assert(is_valid(), \"invalid register\"); return (intptr_t)this; }\n-  int   encoding_nocheck() const                         { return (intptr_t)this; }\n-  bool  is_valid() const                          { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }\n+  int encoding() const             { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n+  bool is_valid() const            { return (unsigned)encoding_nocheck() < number_of_registers; }\n@@ -159,1 +160,1 @@\n-\n+  int encoding_nocheck() const     { return this - first(); }\n@@ -162,0 +163,3 @@\n+REGISTER_IMPL_DECLARATION(FloatRegister, FloatRegisterImpl, FloatRegisterImpl::number_of_registers);\n+\n+\n@@ -235,4 +239,2 @@\n-typedef PRegisterImpl* PRegister;\n-inline PRegister as_PRegister(int encoding) {\n-  return (PRegister)(intptr_t)encoding;\n-}\n+typedef const PRegisterImpl* PRegister;\n+inline constexpr PRegister as_PRegister(int encoding);\n@@ -242,0 +244,2 @@\n+  static constexpr PRegister first();\n+\n@@ -255,1 +259,1 @@\n-  inline friend PRegister as_PRegister(int encoding);\n+  inline friend constexpr PRegister as_PRegister(int encoding);\n@@ -257,1 +261,1 @@\n-  VMReg as_VMReg();\n+  VMReg as_VMReg() const;\n@@ -260,1 +264,1 @@\n-  PRegister successor() const     { return as_PRegister(encoding() + 1); }\n+  PRegister successor() const     { return this + 1; }\n@@ -263,4 +267,4 @@\n-  int   encoding() const          { assert(is_valid(), \"invalid register\"); return (intptr_t)this; }\n-  int   encoding_nocheck() const  { return (intptr_t)this; }\n-  bool  is_valid() const          { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }\n-  bool  is_governing() const      { return 0 <= (intptr_t)this && (intptr_t)this < number_of_governing_registers; }\n+  int encoding() const            { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n+  int encoding_nocheck() const    { return this - first(); }\n+  bool is_valid() const           { return (unsigned)encoding_nocheck() < number_of_registers; }\n+  bool is_governing() const       { return first() <= this && this - first() < number_of_governing_registers; }\n@@ -270,0 +274,3 @@\n+\n+REGISTER_IMPL_DECLARATION(PRegister, PRegisterImpl, PRegisterImpl::number_of_registers);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp","additions":45,"deletions":38,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2014, 2021, Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Red Hat Inc. All rights reserved.\n@@ -5249,0 +5249,1 @@\n+      __ align(OptoLoopAlignment);\n@@ -5253,1 +5254,0 @@\n-        __ align(OptoLoopAlignment);\n@@ -6294,0 +6294,12 @@\n+  \/\/ Support for spin waits.\n+  address generate_spin_wait() {\n+    __ align(CodeEntryAlignment);\n+    StubCodeMark mark(this, \"StubRoutines\", \"spin_wait\");\n+    address start = __ pc();\n+\n+    __ spin_wait();\n+    __ ret(lr);\n+\n+    return start;\n+  }\n+\n@@ -7612,0 +7624,2 @@\n+    StubRoutines::aarch64::_spin_wait = generate_spin_wait();\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"}]}