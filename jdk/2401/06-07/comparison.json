{"files":[{"patch":"@@ -321,1 +321,0 @@\n-  bool _is_boxing_call;\n@@ -328,1 +327,0 @@\n-  virtual bool is_boxing_call() const { return _is_boxing_call; }\n@@ -331,5 +329,2 @@\n-  LateInlineCallGenerator(ciMethod* method, CallGenerator* inline_cg, bool is_pure_call = false, bool is_boxing_call = false) :\n-    DirectCallGenerator(method, true), _unique_id(0),\n-    _is_pure_call(is_pure_call),\n-    _is_boxing_call(is_boxing_call),\n-    _inline_cg(inline_cg) {}\n+  LateInlineCallGenerator(ciMethod* method, CallGenerator* inline_cg, bool is_pure_call = false) :\n+    DirectCallGenerator(method, true), _unique_id(0), _is_pure_call(is_pure_call), _inline_cg(inline_cg) {}\n@@ -456,1 +451,0 @@\n-  bool           _is_boxing_call;\n@@ -463,1 +457,0 @@\n-  virtual bool is_boxing_call() const { return _is_boxing_call; }\n@@ -468,4 +461,1 @@\n-    _unique_id(0), _inline_cg(NULL), _callee(NULL),\n-    _is_pure_call(false),\n-    _is_boxing_call(false),\n-    _prof_factor(prof_factor) {}\n+    _unique_id(0), _inline_cg(NULL), _callee(NULL), _is_pure_call(false), _prof_factor(prof_factor) {}\n@@ -567,3 +557,10 @@\n-\/\/ replace box node to scalar node only in case it is directly referenced by debug info\n-static void replace_box_to_scalar(CallNode* call, Node* resproj) {\n-  assert(call->as_CallStaticJava()->is_boxing_method(), \"sanity\");\n+static bool has_non_debug_usages(Node* n) {\n+  for (DUIterator_Fast imax, i = n->fast_outs(imax); i < imax; i++) {\n+    Node* m = n->fast_out(i);\n+    if (!m->is_SafePoint()\n+        || (m->is_Call() && m->as_Call()->has_non_debug_use(n))) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n@@ -571,0 +568,1 @@\n+static void scalarize_debug_usages(CallNode* call, Node* resproj) {\n@@ -574,6 +572,1 @@\n-    if (m->is_SafePoint()\n-        && (!m->is_Call() || !m->as_Call()->has_non_debug_use(resproj))) {\n-      safepoints.push(m);\n-    } else {\n-      return;\n-    }\n+    safepoints.push(m);\n@@ -669,1 +662,1 @@\n-  bool call_can_eliminate = false;\n+  bool result_not_used = false;\n@@ -672,2 +665,6 @@\n-    if (is_boxing_call() && callprojs.resproj != nullptr) {\n-        replace_box_to_scalar(call, callprojs.resproj);\n+    if (is_boxing_late_inline() && callprojs.resproj != nullptr) {\n+        \/\/ replace box node to scalar node only in case it is directly referenced by debug info\n+        assert(call->as_CallStaticJava()->is_boxing_method(), \"sanity\");\n+        if (!has_non_debug_usages(callprojs.resproj)) {\n+          scalarize_debug_usages(call, callprojs.resproj);\n+        }\n@@ -678,1 +675,1 @@\n-    call_can_eliminate = (callprojs.resproj == NULL || callprojs.resproj->outcnt() == 0);\n+    result_not_used = (callprojs.resproj == NULL || callprojs.resproj->outcnt() == 0);\n@@ -681,1 +678,1 @@\n-  if (call_can_eliminate) {\n+  if (result_not_used) {\n@@ -803,1 +800,1 @@\n-    LateInlineCallGenerator(method, inline_cg, \/*is_pure=*\/true, \/*is_boxing*\/true) {}\n+    LateInlineCallGenerator(method, inline_cg, \/*is_pure=*\/true) {}\n@@ -816,0 +813,2 @@\n+  virtual bool is_boxing_late_inline() const { return true; }\n+\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":27,"deletions":28,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -48,3 +48,2 @@\n-  virtual CallGenerator* inline_cg()      const                           { ShouldNotReachHere(); return NULL;  }\n-  virtual bool           is_pure_call()   const                           { ShouldNotReachHere(); return false; }\n-  virtual bool           is_boxing_call() const                           { ShouldNotReachHere(); return false; }\n+  virtual CallGenerator* inline_cg()    const                             { ShouldNotReachHere(); return NULL;  }\n+  virtual bool           is_pure_call() const                             { ShouldNotReachHere(); return false; }\n@@ -78,0 +77,1 @@\n+  virtual bool      is_boxing_late_inline() const  { return false; }\n","filename":"src\/hotspot\/share\/opto\/callGenerator.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Huawei and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Huawei Technologies Co., Ltd. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestEliminateBoxInDebugInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Huawei and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Huawei Technologies Co., Ltd. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestIdentityWithEliminateBoxInDebugInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}