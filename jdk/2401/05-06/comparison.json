{"files":[{"patch":"@@ -321,0 +321,1 @@\n+  bool _is_boxing_call;\n@@ -327,0 +328,1 @@\n+  virtual bool is_boxing_call() const { return _is_boxing_call; }\n@@ -329,2 +331,5 @@\n-  LateInlineCallGenerator(ciMethod* method, CallGenerator* inline_cg, bool is_pure_call = false) :\n-    DirectCallGenerator(method, true), _unique_id(0), _is_pure_call(is_pure_call), _inline_cg(inline_cg) {}\n+  LateInlineCallGenerator(ciMethod* method, CallGenerator* inline_cg, bool is_pure_call = false, bool is_boxing_call = false) :\n+    DirectCallGenerator(method, true), _unique_id(0),\n+    _is_pure_call(is_pure_call),\n+    _is_boxing_call(is_boxing_call),\n+    _inline_cg(inline_cg) {}\n@@ -451,0 +456,1 @@\n+  bool           _is_boxing_call;\n@@ -457,0 +463,1 @@\n+  virtual bool is_boxing_call() const { return _is_boxing_call; }\n@@ -461,1 +468,4 @@\n-    _unique_id(0), _inline_cg(NULL), _callee(NULL), _is_pure_call(false), _prof_factor(prof_factor) {}\n+    _unique_id(0), _inline_cg(NULL), _callee(NULL),\n+    _is_pure_call(false),\n+    _is_boxing_call(false),\n+    _prof_factor(prof_factor) {}\n@@ -559,11 +569,10 @@\n-  if (resproj != nullptr && call->is_CallStaticJava() &&\n-      call->as_CallStaticJava()->is_boxing_method()) {\n-    Unique_Node_List safepoints;\n-    for (DUIterator_Fast imax, i = resproj->fast_outs(imax); i < imax; i++) {\n-      Node* m = resproj->fast_out(i);\n-      if (m->is_SafePoint()\n-          && (!m->is_Call() || !m->as_Call()->has_non_debug_use(resproj))) {\n-        safepoints.push(m);\n-      } else {\n-        return;\n-      }\n+  assert(call->as_CallStaticJava()->is_boxing_method(), \"sanity\");\n+\n+  Unique_Node_List safepoints;\n+  for (DUIterator_Fast imax, i = resproj->fast_outs(imax); i < imax; i++) {\n+    Node* m = resproj->fast_out(i);\n+    if (m->is_SafePoint()\n+        && (!m->is_Call() || !m->as_Call()->has_non_debug_use(resproj))) {\n+      safepoints.push(m);\n+    } else {\n+      return;\n@@ -571,0 +580,1 @@\n+  }\n@@ -573,5 +583,5 @@\n-    if (PrintEliminateAllocations && safepoints.size() > 0) {\n-      tty->print(\"++++ Eliminated: %d \", call->_idx);\n-      call->as_CallStaticJava()->method()->print_short_name(tty);\n-      tty->cr();\n-    }\n+  if (PrintEliminateAllocations && safepoints.size() > 0) {\n+    tty->print(\"++++ Eliminated: %d \", call->_idx);\n+    call->as_CallStaticJava()->method()->print_short_name(tty);\n+    tty->cr();\n+  }\n@@ -580,13 +590,13 @@\n-    GraphKit kit(call->jvms());\n-    PhaseGVN& gvn = kit.gvn();\n-    \/\/ delay box in runtime, treat box as a scalarized object\n-    while (safepoints.size() > 0) {\n-      ProjNode* res = resproj->as_Proj();\n-      Node* sfpt = safepoints.pop();\n-\n-      ciInstanceKlass* klass = call->as_CallStaticJava()->method()->holder();\n-      int n_fields = klass->nof_nonstatic_fields();\n-      assert(n_fields == 1, \"the klass must be an auto-boxing klass\");\n-\n-      uint first_ind = sfpt->req() - sfpt->jvms()->scloff();\n-      Node* sobj = new SafePointScalarObjectNode(gvn.type(res)->isa_oopptr(),\n+  GraphKit kit(call->jvms());\n+  PhaseGVN& gvn = kit.gvn();\n+  \/\/ delay box in runtime, treat box as a scalarized object\n+  while (safepoints.size() > 0) {\n+    ProjNode* res = resproj->as_Proj();\n+    Node* sfpt = safepoints.pop();\n+\n+    ciInstanceKlass* klass = call->as_CallStaticJava()->method()->holder();\n+    int n_fields = klass->nof_nonstatic_fields();\n+    assert(n_fields == 1, \"the klass must be an auto-boxing klass\");\n+\n+    uint first_ind = sfpt->req() - sfpt->jvms()->scloff();\n+    Node* sobj = new SafePointScalarObjectNode(gvn.type(res)->isa_oopptr(),\n@@ -596,11 +606,12 @@\n-                                                  first_ind, n_fields, true);\n-      sobj->init_req(0, kit.root());\n-      sfpt->add_req(call->in(TypeFunc::Parms));\n-      sobj = gvn.transform(sobj);\n-      JVMState* jvms = sfpt->jvms();\n-      jvms->set_endoff(sfpt->req());\n-      int start = jvms->debug_start();\n-      int end   = jvms->debug_end();\n-      sfpt->replace_edges_in_range(res, sobj, start, end);\n-    }\n-  }\n+                                                first_ind, n_fields, true);\n+    sobj->init_req(0, kit.root());\n+    sfpt->add_req(call->in(TypeFunc::Parms));\n+    sobj = gvn.transform(sobj);\n+    JVMState* jvms = sfpt->jvms();\n+    jvms->set_endoff(sfpt->req());\n+    int start = jvms->debug_start();\n+    int end   = jvms->debug_end();\n+    sfpt->replace_edges_in_range(res, sobj, start, end);\n+  }\n+\n+  assert(resproj->outcnt() == 0, \"the box must have no use after replace\");\n@@ -658,3 +669,6 @@\n-  if (C->eliminate_boxing()) {\n-    replace_box_to_scalar(call, callprojs.resproj);\n-  }\n+  bool call_can_eliminate = false;\n+\n+  if (is_pure_call()) {\n+    if (is_boxing_call() && callprojs.resproj != nullptr) {\n+        replace_box_to_scalar(call, callprojs.resproj);\n+    }\n@@ -662,2 +676,0 @@\n-  bool result_not_used = (callprojs.resproj == NULL || callprojs.resproj->outcnt() == 0);\n-  if (is_pure_call() && result_not_used) {\n@@ -666,0 +678,4 @@\n+    call_can_eliminate = (callprojs.resproj == NULL || callprojs.resproj->outcnt() == 0);\n+  }\n+\n+  if (call_can_eliminate) {\n@@ -787,1 +803,1 @@\n-    LateInlineCallGenerator(method, inline_cg, \/*is_pure=*\/true) {}\n+    LateInlineCallGenerator(method, inline_cg, \/*is_pure=*\/true, \/*is_boxing*\/true) {}\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":65,"deletions":49,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -48,2 +48,3 @@\n-  virtual CallGenerator* inline_cg()    const                             { ShouldNotReachHere(); return NULL;  }\n-  virtual bool           is_pure_call() const                             { ShouldNotReachHere(); return false; }\n+  virtual CallGenerator* inline_cg()      const                           { ShouldNotReachHere(); return NULL;  }\n+  virtual bool           is_pure_call()   const                           { ShouldNotReachHere(); return false; }\n+  virtual bool           is_boxing_call() const                           { ShouldNotReachHere(); return false; }\n","filename":"src\/hotspot\/share\/opto\/callGenerator.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+            \"-Xbatch\",\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestEliminateBoxInDebugInfo.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main\/othervm compiler.c2.TestIdentityWithEliminateBoxInDebugInfo\n+ * @run main\/othervm -Xbatch compiler.c2.TestIdentityWithEliminateBoxInDebugInfo\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestIdentityWithEliminateBoxInDebugInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}