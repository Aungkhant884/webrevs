{"files":[{"patch":"@@ -583,1 +583,1 @@\n-                                                nullptr,\n+                                                call,\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1518,1 +1518,1 @@\n-                                                     AllocateNode* alloc,\n+                                                     CallNode* alloc,\n@@ -1531,0 +1531,5 @@\n+#ifdef ASSERT\n+  if (alloc != nullptr) {\n+    assert(alloc->is_Allocate() || alloc->as_CallStaticJava()->is_boxing_method(), \"unexpected alloc\");\n+  }\n+#endif\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -505,1 +505,1 @@\n-  DEBUG_ONLY(AllocateNode* _alloc;)\n+  DEBUG_ONLY(CallNode* _alloc;)\n@@ -515,1 +515,1 @@\n-                            AllocateNode* alloc,\n+                            CallNode* alloc,\n@@ -532,1 +532,1 @@\n-  AllocateNode* alloc() const { return _alloc; }\n+  CallNode* alloc() const { return _alloc; }\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @requires vm.debug == true & vm.flavor == \"server\"\n+ * @requires vm.debug == true & vm.compiler2.enabled\n","filename":"test\/hotspot\/jtreg\/compiler\/eliminateAutobox\/TestEliminateBoxInDebugInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestEliminateBoxInDebugInfo.java","status":"renamed"},{"patch":"","filename":"test\/hotspot\/jtreg\/compiler\/eliminateAutobox\/TestIdentityWithEliminateBoxInDebugInfo.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestIdentityWithEliminateBoxInDebugInfo.java","status":"renamed"}]}