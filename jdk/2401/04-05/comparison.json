{"files":[{"patch":"@@ -561,1 +561,1 @@\n-    Unique_Node_List debuginfo_node_list;\n+    Unique_Node_List safepoints;\n@@ -564,9 +564,3 @@\n-      if (m->is_SafePoint()) {\n-        SafePointNode* sfpt = m->as_SafePoint();\n-        uint dbg_start = sfpt->is_Call() ? sfpt->as_Call()->tf()->domain()->cnt() : (uint)TypeFunc::Parms+1;\n-        for (uint i = 0; i < dbg_start; i++) {\n-          if (sfpt->in(i) == resproj) {\n-            return;\n-          }\n-        }\n-        debuginfo_node_list.push(m);\n+      if (m->is_SafePoint()\n+          && (!m->is_Call() || !m->as_Call()->has_non_debug_use(resproj))) {\n+        safepoints.push(m);\n@@ -578,0 +572,8 @@\n+#ifndef PRODUCT\n+    if (PrintEliminateAllocations && safepoints.size() > 0) {\n+      tty->print(\"++++ Eliminated: %d \", call->_idx);\n+      call->as_CallStaticJava()->method()->print_short_name(tty);\n+      tty->cr();\n+    }\n+#endif\n+\n@@ -581,1 +583,1 @@\n-    while (debuginfo_node_list.size() > 0) {\n+    while (safepoints.size() > 0) {\n@@ -583,1 +585,1 @@\n-      Node* debuginfo_node = debuginfo_node_list.pop();\n+      Node* sfpt = safepoints.pop();\n@@ -589,1 +591,1 @@\n-      uint first_ind = (debuginfo_node->req() - debuginfo_node->jvms()->scloff());\n+      uint first_ind = sfpt->req() - sfpt->jvms()->scloff();\n@@ -596,1 +598,1 @@\n-      debuginfo_node->add_req(call->in(res->_con));\n+      sfpt->add_req(call->in(TypeFunc::Parms));\n@@ -598,2 +600,2 @@\n-      JVMState* jvms = debuginfo_node->jvms();\n-      jvms->set_endoff(debuginfo_node->req());\n+      JVMState* jvms = sfpt->jvms();\n+      jvms->set_endoff(sfpt->req());\n@@ -602,1 +604,1 @@\n-      debuginfo_node->replace_edges_in_range(res, sobj, start, end);\n+      sfpt->replace_edges_in_range(res, sobj, start, end);\n@@ -656,1 +658,3 @@\n-  replace_box_to_scalar(call, callprojs.resproj);\n+  if (C->eliminate_boxing()) {\n+    replace_box_to_scalar(call, callprojs.resproj);\n+  }\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":22,"deletions":18,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -503,1 +503,1 @@\n-  bool _is_auto_box; \/\/ is the scalarized object is auto box.\n+  bool _is_auto_box; \/\/ True if the scalarized object is an auto box.\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2021, Huawei and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8261137\n+ * @requires vm.debug == true & vm.flavor == \"server\"\n+ * @summary Verify that box object is scalarized in case it is directly referenced by debug info.\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm compiler.c2.TestEliminateBoxInDebugInfo\n+ *\/\n+package compiler.c2;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import jdk.test.lib.Asserts;\n+\n+public class TestEliminateBoxInDebugInfo {\n+    public static void runTest() throws Exception {\n+        final String[] arguments = {\n+            \"-XX:CompileCommand=compileonly,compiler\/c2\/TestEliminateBoxInDebugInfo$Test.foo\",\n+            \"-XX:CompileCommand=dontinline,compiler\/c2\/TestEliminateBoxInDebugInfo$Test.black\",\n+            \"-XX:+PrintEliminateAllocations\",\n+            Test.class.getName()\n+            };\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(arguments);\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        System.out.println(output.getStdout());\n+        String pattern = \".*Eliminated.*\";\n+        Pattern r = Pattern.compile(pattern);\n+        Matcher m = r.matcher(output.getStdout());\n+        if (!m.find()) {\n+            throw new RuntimeException(\"Could not find Elimination output\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest();\n+    }\n+\n+    static class Test {\n+        public static void main(String[] args) throws Exception {\n+            \/\/ warmup\n+            for(int i = 0; i < 100000; i++) {\n+               foo(1000 + (i % 1000));\n+            }\n+        }\n+\n+        public static int foo(int value) {\n+            Integer ii = Integer.valueOf(value);\n+            int sum = 0;\n+            if (value > 999) {\n+                sum += ii.intValue();\n+            }\n+            black();\n+            return sum;\n+        }\n+\n+        public static void black() {}\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestEliminateBoxInDebugInfo.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2021, Huawei and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8261137\n+ * @requires vm.flavor == \"server\"\n+ * @summary Verify that box object identity matches after deoptimization When it is eliminated.\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm compiler.c2.TestIdentityWithEliminateBoxInDebugInfo\n+ *\/\n+package compiler.c2;\n+\n+import jdk.test.lib.Asserts;\n+\n+public class TestIdentityWithEliminateBoxInDebugInfo {\n+    interface TestF {\n+        void apply(boolean condition);\n+    }\n+\n+    public static void helper(TestF f) {\n+      \/\/ warmup\n+      for(int i = 0; i < 100000; i++) {\n+        f.apply(true);\n+      }\n+      \/\/ deoptimize\n+      f.apply(false);\n+    }\n+\n+    public static void runTest() throws Exception {\n+        helper((c) -> {\n+            Integer a = Integer.valueOf(42);\n+            Integer b = Integer.valueOf(-42);\n+            if (!c) {\n+                Asserts.assertTrue(a == Integer.valueOf(42));\n+                Asserts.assertTrue(b == Integer.valueOf(-42));\n+            }\n+        });\n+\n+        helper((c) -> {\n+            long highBitsOnly = 2L << 40;\n+            Long a = Long.valueOf(42L);\n+            Long b = Long.valueOf(-42L);\n+            Long h = Long.valueOf(highBitsOnly);\n+            if (!c) {\n+                Asserts.assertTrue(a == Long.valueOf(42L));\n+                Asserts.assertTrue(b == Long.valueOf(-42L));\n+                Asserts.assertFalse(h == Long.valueOf(highBitsOnly));\n+            }\n+        });\n+\n+        helper((c) -> {\n+            Character a = Character.valueOf('a');\n+            Character b = Character.valueOf('Z');\n+            if (!c) {\n+                Asserts.assertTrue(a == Character.valueOf('a'));\n+                Asserts.assertTrue(b == Character.valueOf('Z'));\n+            }\n+        });\n+\n+        helper((c) -> {\n+            Short a = Short.valueOf((short)42);\n+            Short b = Short.valueOf((short)-42);\n+            if (!c) {\n+                Asserts.assertTrue(a == Short.valueOf((short)42));\n+                Asserts.assertTrue(b == Short.valueOf((short)-42));\n+            }\n+        });\n+\n+        helper((c) -> {\n+            Byte a = Byte.valueOf((byte)42);\n+            Byte b = Byte.valueOf((byte)-42);\n+            if (!c) {\n+                Asserts.assertTrue(a == Byte.valueOf((byte)42));\n+                Asserts.assertTrue(b == Byte.valueOf((byte)-42));\n+            }\n+        });\n+\n+        helper((c) -> {\n+            Boolean a = Boolean.valueOf(true);\n+            Boolean b = Boolean.valueOf(false);\n+            if (!c) {\n+                Asserts.assertTrue(a == Boolean.valueOf(true));\n+                Asserts.assertTrue(b == Boolean.valueOf(false));\n+            }\n+        });\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestIdentityWithEliminateBoxInDebugInfo.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"}]}