{"files":[{"patch":"@@ -557,1 +557,2 @@\n-static void delay_box_in_uncommon_trap(CallNode* call, Node* resproj) {\n+\/\/ replace box node to scalar node only in case it is directly referenced by debug info\n+static void replace_box_to_scalar(CallNode* call, Node* resproj) {\n@@ -560,2 +561,1 @@\n-    Unique_Node_List uncommon_trap_list;\n-    bool no_use = true;\n+    Unique_Node_List debuginfo_node_list;\n@@ -564,3 +564,9 @@\n-      if (m->is_CallStaticJava() &&\n-          m->as_CallStaticJava()->uncommon_trap_request() != 0) {\n-        uncommon_trap_list.push(m);\n+      if (m->is_SafePoint()) {\n+        SafePointNode* sfpt = m->as_SafePoint();\n+        uint dbg_start = sfpt->is_Call() ? sfpt->as_Call()->tf()->domain()->cnt() : (uint)TypeFunc::Parms+1;\n+        for (uint i = 0; i < dbg_start; i++) {\n+          if (sfpt->in(i) == resproj) {\n+            return;\n+          }\n+        }\n+        debuginfo_node_list.push(m);\n@@ -568,2 +574,1 @@\n-        no_use = false;\n-        break;\n+        return;\n@@ -573,14 +578,13 @@\n-    if (no_use) {\n-      GraphKit kit(call->jvms());\n-      PhaseGVN& gvn = kit.gvn();\n-      \/\/ delay box node in uncommon_trap runtime, treat box as a scalarized object\n-      while (uncommon_trap_list.size() > 0) {\n-        ProjNode* res = resproj->as_Proj();\n-        Node* uncommon_trap_node = uncommon_trap_list.pop();\n-\n-        ciInstanceKlass* klass = call->as_CallStaticJava()->method()->holder();\n-        int n_fields = klass->nof_nonstatic_fields();\n-        assert(n_fields == 1, \"the klass must be an auto-boxing klass\");\n-\n-        uint first_ind = (uncommon_trap_node->req() - uncommon_trap_node->jvms()->scloff());\n-        Node* sobj = new SafePointScalarObjectNode(gvn.type(res)->isa_oopptr(),\n+    GraphKit kit(call->jvms());\n+    PhaseGVN& gvn = kit.gvn();\n+    \/\/ delay box in runtime, treat box as a scalarized object\n+    while (debuginfo_node_list.size() > 0) {\n+      ProjNode* res = resproj->as_Proj();\n+      Node* debuginfo_node = debuginfo_node_list.pop();\n+\n+      ciInstanceKlass* klass = call->as_CallStaticJava()->method()->holder();\n+      int n_fields = klass->nof_nonstatic_fields();\n+      assert(n_fields == 1, \"the klass must be an auto-boxing klass\");\n+\n+      uint first_ind = (debuginfo_node->req() - debuginfo_node->jvms()->scloff());\n+      Node* sobj = new SafePointScalarObjectNode(gvn.type(res)->isa_oopptr(),\n@@ -588,1 +592,1 @@\n-                                                  (AllocateNode*)call,\n+                                                  call->isa_Allocate(),\n@@ -590,10 +594,9 @@\n-                                                  first_ind, n_fields);\n-        sobj->init_req(0, kit.root());\n-        uncommon_trap_node->add_req(call->in(res->_con));\n-        sobj = gvn.transform(sobj);\n-        JVMState* jvms = uncommon_trap_node->jvms();\n-        jvms->set_endoff(uncommon_trap_node->req());\n-        int start = jvms->debug_start();\n-        int end   = jvms->debug_end();\n-        uncommon_trap_node->replace_edges_in_range(res, sobj, start, end);\n-      }\n+                                                  first_ind, n_fields, true);\n+      sobj->init_req(0, kit.root());\n+      debuginfo_node->add_req(call->in(res->_con));\n+      sobj = gvn.transform(sobj);\n+      JVMState* jvms = debuginfo_node->jvms();\n+      jvms->set_endoff(debuginfo_node->req());\n+      int start = jvms->debug_start();\n+      int end   = jvms->debug_end();\n+      debuginfo_node->replace_edges_in_range(res, sobj, start, end);\n@@ -653,1 +656,1 @@\n-  delay_box_in_uncommon_trap(call, callprojs.resproj);\n+  replace_box_to_scalar(call, callprojs.resproj);\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":37,"deletions":34,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -1515,1 +1515,2 @@\n-                                                     uint n_fields) :\n+                                                     uint n_fields,\n+                                                     bool is_auto_box) :\n@@ -1518,1 +1519,2 @@\n-  _n_fields(n_fields)\n+  _n_fields(n_fields),\n+  _is_auto_box(is_auto_box)\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -503,0 +503,1 @@\n+  bool _is_auto_box; \/\/ is the scalarized object is auto box.\n@@ -515,1 +516,1 @@\n-                            uint first_index, uint n_fields);\n+                            uint first_index, uint n_fields, bool is_auto_box = false);\n@@ -528,0 +529,1 @@\n+  bool is_auto_box() const { return _is_auto_box; }\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -829,2 +829,3 @@\n-      sv = new ObjectValue(spobj->_idx,\n-                           new ConstantOopWriteValue(cik->java_mirror()->constant_encoding()));\n+      ScopeValue* klass_sv = new ConstantOopWriteValue(cik->java_mirror()->constant_encoding());\n+      sv = spobj->is_auto_box() ? new AutoBoxObjectValue(spobj->_idx, klass_sv)\n+                                    : new ObjectValue(spobj->_idx, klass_sv);\n@@ -1102,2 +1103,3 @@\n-          ObjectValue* sv = new ObjectValue(spobj->_idx,\n-                                            new ConstantOopWriteValue(cik->java_mirror()->constant_encoding()));\n+          ScopeValue* klass_sv = new ConstantOopWriteValue(cik->java_mirror()->constant_encoding());\n+          ObjectValue* sv = spobj->is_auto_box() ? new AutoBoxObjectValue(spobj->_idx, klass_sv)\n+                                        : new ObjectValue(spobj->_idx, klass_sv);\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -900,1 +900,1 @@\n-#if INCLUDE_JVMCI || INCLUDE_AOT\n+#if COMPILER2 || INCLUDE_JVMCI || INCLUDE_AOT\n@@ -1029,1 +1029,1 @@\n-#endif \/\/ INCLUDE_JVMCI || INCLUDE_AOT\n+#endif \/\/ COMPILER2 || INCLUDE_JVMCI || INCLUDE_AOT\n@@ -1048,3 +1048,2 @@\n-#if INCLUDE_JVMCI || INCLUDE_AOT\n-      CompiledMethod* cm = fr->cb()->as_compiled_method_or_null();\n-      if (cm->is_compiled_by_jvmci() && sv->is_auto_box()) {\n+#if COMPILER2 || INCLUDE_JVMCI || INCLUDE_AOT\n+      if (sv->is_auto_box()) {\n@@ -1058,1 +1057,1 @@\n-#endif \/\/ INCLUDE_JVMCI || INCLUDE_AOT\n+#endif \/\/ COMPILER2 || INCLUDE_JVMCI || INCLUDE_AOT\n@@ -1400,1 +1399,1 @@\n-#if INCLUDE_JVMCI || INCLUDE_AOT\n+#if COMPILER2 || INCLUDE_JVMCI || INCLUDE_AOT\n@@ -1405,1 +1404,1 @@\n-#endif \/\/ INCLUDE_JVMCI || INCLUDE_AOT\n+#endif \/\/ COMPILER2 || INCLUDE_JVMCI || INCLUDE_AOT\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -166,1 +166,0 @@\n-  static oop get_cached_box(AutoBoxObjectValue* bv, frame* fr, RegisterMap* reg_map, TRAPS);\n@@ -169,0 +168,2 @@\n+  static oop get_cached_box(AutoBoxObjectValue* bv, frame* fr, RegisterMap* reg_map, TRAPS);\n+\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}