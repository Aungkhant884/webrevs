{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -321,0 +321,1 @@\n+  bool _is_boxing_call;\n@@ -327,0 +328,1 @@\n+  virtual bool is_boxing_call() const { return _is_boxing_call; }\n@@ -329,2 +331,5 @@\n-  LateInlineCallGenerator(ciMethod* method, CallGenerator* inline_cg, bool is_pure_call = false) :\n-    DirectCallGenerator(method, true), _unique_id(0), _is_pure_call(is_pure_call), _inline_cg(inline_cg) {}\n+  LateInlineCallGenerator(ciMethod* method, CallGenerator* inline_cg, bool is_pure_call = false, bool is_boxing_call = false) :\n+    DirectCallGenerator(method, true), _unique_id(0),\n+    _is_pure_call(is_pure_call),\n+    _is_boxing_call(is_boxing_call),\n+    _inline_cg(inline_cg) {}\n@@ -451,0 +456,1 @@\n+  bool           _is_boxing_call;\n@@ -457,0 +463,1 @@\n+  virtual bool is_boxing_call() const { return _is_boxing_call; }\n@@ -461,1 +468,4 @@\n-    _unique_id(0), _inline_cg(NULL), _callee(NULL), _is_pure_call(false), _prof_factor(prof_factor) {}\n+    _unique_id(0), _inline_cg(NULL), _callee(NULL),\n+    _is_pure_call(false),\n+    _is_boxing_call(false),\n+    _prof_factor(prof_factor) {}\n@@ -557,0 +567,53 @@\n+\/\/ replace box node to scalar node only in case it is directly referenced by debug info\n+static void replace_box_to_scalar(CallNode* call, Node* resproj) {\n+  assert(call->as_CallStaticJava()->is_boxing_method(), \"sanity\");\n+\n+  Unique_Node_List safepoints;\n+  for (DUIterator_Fast imax, i = resproj->fast_outs(imax); i < imax; i++) {\n+    Node* m = resproj->fast_out(i);\n+    if (m->is_SafePoint()\n+        && (!m->is_Call() || !m->as_Call()->has_non_debug_use(resproj))) {\n+      safepoints.push(m);\n+    } else {\n+      return;\n+    }\n+  }\n+\n+#ifndef PRODUCT\n+  if (PrintEliminateAllocations && safepoints.size() > 0) {\n+    tty->print(\"++++ Eliminated: %d \", call->_idx);\n+    call->as_CallStaticJava()->method()->print_short_name(tty);\n+    tty->cr();\n+  }\n+#endif\n+\n+  GraphKit kit(call->jvms());\n+  PhaseGVN& gvn = kit.gvn();\n+  \/\/ delay box in runtime, treat box as a scalarized object\n+  while (safepoints.size() > 0) {\n+    ProjNode* res = resproj->as_Proj();\n+    Node* sfpt = safepoints.pop();\n+\n+    ciInstanceKlass* klass = call->as_CallStaticJava()->method()->holder();\n+    int n_fields = klass->nof_nonstatic_fields();\n+    assert(n_fields == 1, \"the klass must be an auto-boxing klass\");\n+\n+    uint first_ind = sfpt->req() - sfpt->jvms()->scloff();\n+    Node* sobj = new SafePointScalarObjectNode(gvn.type(res)->isa_oopptr(),\n+#ifdef ASSERT\n+                                                  call->isa_Allocate(),\n+#endif \/\/ ASSERT\n+                                                first_ind, n_fields, true);\n+    sobj->init_req(0, kit.root());\n+    sfpt->add_req(call->in(TypeFunc::Parms));\n+    sobj = gvn.transform(sobj);\n+    JVMState* jvms = sfpt->jvms();\n+    jvms->set_endoff(sfpt->req());\n+    int start = jvms->debug_start();\n+    int end   = jvms->debug_end();\n+    sfpt->replace_edges_in_range(res, sobj, start, end);\n+  }\n+\n+  assert(resproj->outcnt() == 0, \"the box must have no use after replace\");\n+}\n+\n@@ -606,2 +669,7 @@\n-  bool result_not_used = (callprojs.resproj == NULL || callprojs.resproj->outcnt() == 0);\n-  if (is_pure_call() && result_not_used) {\n+  bool call_can_eliminate = false;\n+\n+  if (is_pure_call()) {\n+    if (is_boxing_call() && callprojs.resproj != nullptr) {\n+        replace_box_to_scalar(call, callprojs.resproj);\n+    }\n+\n@@ -610,0 +678,4 @@\n+    call_can_eliminate = (callprojs.resproj == NULL || callprojs.resproj->outcnt() == 0);\n+  }\n+\n+  if (call_can_eliminate) {\n@@ -731,1 +803,1 @@\n-    LateInlineCallGenerator(method, inline_cg, \/*is_pure=*\/true) {}\n+    LateInlineCallGenerator(method, inline_cg, \/*is_pure=*\/true, \/*is_boxing*\/true) {}\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":79,"deletions":7,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -48,2 +48,3 @@\n-  virtual CallGenerator* inline_cg()    const                             { ShouldNotReachHere(); return NULL;  }\n-  virtual bool           is_pure_call() const                             { ShouldNotReachHere(); return false; }\n+  virtual CallGenerator* inline_cg()      const                           { ShouldNotReachHere(); return NULL;  }\n+  virtual bool           is_pure_call()   const                           { ShouldNotReachHere(); return false; }\n+  virtual bool           is_boxing_call() const                           { ShouldNotReachHere(); return false; }\n","filename":"src\/hotspot\/share\/opto\/callGenerator.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1515,1 +1515,2 @@\n-                                                     uint n_fields) :\n+                                                     uint n_fields,\n+                                                     bool is_auto_box) :\n@@ -1518,1 +1519,2 @@\n-  _n_fields(n_fields)\n+  _n_fields(n_fields),\n+  _is_auto_box(is_auto_box)\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -503,0 +503,1 @@\n+  bool _is_auto_box; \/\/ True if the scalarized object is an auto box.\n@@ -515,1 +516,1 @@\n-                            uint first_index, uint n_fields);\n+                            uint first_index, uint n_fields, bool is_auto_box = false);\n@@ -528,0 +529,1 @@\n+  bool is_auto_box() const { return _is_auto_box; }\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -829,2 +829,3 @@\n-      sv = new ObjectValue(spobj->_idx,\n-                           new ConstantOopWriteValue(cik->java_mirror()->constant_encoding()));\n+      ScopeValue* klass_sv = new ConstantOopWriteValue(cik->java_mirror()->constant_encoding());\n+      sv = spobj->is_auto_box() ? new AutoBoxObjectValue(spobj->_idx, klass_sv)\n+                                    : new ObjectValue(spobj->_idx, klass_sv);\n@@ -1102,2 +1103,3 @@\n-          ObjectValue* sv = new ObjectValue(spobj->_idx,\n-                                            new ConstantOopWriteValue(cik->java_mirror()->constant_encoding()));\n+          ScopeValue* klass_sv = new ConstantOopWriteValue(cik->java_mirror()->constant_encoding());\n+          ObjectValue* sv = spobj->is_auto_box() ? new AutoBoxObjectValue(spobj->_idx, klass_sv)\n+                                        : new ObjectValue(spobj->_idx, klass_sv);\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -900,1 +900,1 @@\n-#if INCLUDE_JVMCI || INCLUDE_AOT\n+#if COMPILER2 || INCLUDE_JVMCI || INCLUDE_AOT\n@@ -1029,1 +1029,1 @@\n-#endif \/\/ INCLUDE_JVMCI || INCLUDE_AOT\n+#endif \/\/ COMPILER2 || INCLUDE_JVMCI || INCLUDE_AOT\n@@ -1048,3 +1048,2 @@\n-#if INCLUDE_JVMCI || INCLUDE_AOT\n-      CompiledMethod* cm = fr->cb()->as_compiled_method_or_null();\n-      if (cm->is_compiled_by_jvmci() && sv->is_auto_box()) {\n+#if COMPILER2 || INCLUDE_JVMCI || INCLUDE_AOT\n+      if (sv->is_auto_box()) {\n@@ -1058,1 +1057,1 @@\n-#endif \/\/ INCLUDE_JVMCI || INCLUDE_AOT\n+#endif \/\/ COMPILER2 || INCLUDE_JVMCI || INCLUDE_AOT\n@@ -1400,1 +1399,1 @@\n-#if INCLUDE_JVMCI || INCLUDE_AOT\n+#if COMPILER2 || INCLUDE_JVMCI || INCLUDE_AOT\n@@ -1405,1 +1404,1 @@\n-#endif \/\/ INCLUDE_JVMCI || INCLUDE_AOT\n+#endif \/\/ COMPILER2 || INCLUDE_JVMCI || INCLUDE_AOT\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -166,1 +166,0 @@\n-  static oop get_cached_box(AutoBoxObjectValue* bv, frame* fr, RegisterMap* reg_map, TRAPS);\n@@ -169,0 +168,2 @@\n+  static oop get_cached_box(AutoBoxObjectValue* bv, frame* fr, RegisterMap* reg_map, TRAPS);\n+\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2021, Huawei and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8261137\n+ * @requires vm.debug == true & vm.flavor == \"server\"\n+ * @summary Verify that box object is scalarized in case it is directly referenced by debug info.\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm compiler.c2.TestEliminateBoxInDebugInfo\n+ *\/\n+package compiler.c2;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import jdk.test.lib.Asserts;\n+\n+public class TestEliminateBoxInDebugInfo {\n+    public static void runTest() throws Exception {\n+        final String[] arguments = {\n+            \"-XX:CompileCommand=compileonly,compiler\/c2\/TestEliminateBoxInDebugInfo$Test.foo\",\n+            \"-XX:CompileCommand=dontinline,compiler\/c2\/TestEliminateBoxInDebugInfo$Test.black\",\n+            \"-Xbatch\",\n+            \"-XX:+PrintEliminateAllocations\",\n+            Test.class.getName()\n+            };\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(arguments);\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        System.out.println(output.getStdout());\n+        String pattern = \".*Eliminated.*\";\n+        Pattern r = Pattern.compile(pattern);\n+        Matcher m = r.matcher(output.getStdout());\n+        if (!m.find()) {\n+            throw new RuntimeException(\"Could not find Elimination output\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest();\n+    }\n+\n+    static class Test {\n+        public static void main(String[] args) throws Exception {\n+            \/\/ warmup\n+            for(int i = 0; i < 100000; i++) {\n+               foo(1000 + (i % 1000));\n+            }\n+        }\n+\n+        public static int foo(int value) {\n+            Integer ii = Integer.valueOf(value);\n+            int sum = 0;\n+            if (value > 999) {\n+                sum += ii.intValue();\n+            }\n+            black();\n+            return sum;\n+        }\n+\n+        public static void black() {}\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestEliminateBoxInDebugInfo.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2021, Huawei and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8261137\n+ * @requires vm.flavor == \"server\"\n+ * @summary Verify that box object identity matches after deoptimization When it is eliminated.\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -Xbatch compiler.c2.TestIdentityWithEliminateBoxInDebugInfo\n+ *\/\n+package compiler.c2;\n+\n+import jdk.test.lib.Asserts;\n+\n+public class TestIdentityWithEliminateBoxInDebugInfo {\n+    interface TestF {\n+        void apply(boolean condition);\n+    }\n+\n+    public static void helper(TestF f) {\n+      \/\/ warmup\n+      for(int i = 0; i < 100000; i++) {\n+        f.apply(true);\n+      }\n+      \/\/ deoptimize\n+      f.apply(false);\n+    }\n+\n+    public static void runTest() throws Exception {\n+        helper((c) -> {\n+            Integer a = Integer.valueOf(42);\n+            Integer b = Integer.valueOf(-42);\n+            if (!c) {\n+                Asserts.assertTrue(a == Integer.valueOf(42));\n+                Asserts.assertTrue(b == Integer.valueOf(-42));\n+            }\n+        });\n+\n+        helper((c) -> {\n+            long highBitsOnly = 2L << 40;\n+            Long a = Long.valueOf(42L);\n+            Long b = Long.valueOf(-42L);\n+            Long h = Long.valueOf(highBitsOnly);\n+            if (!c) {\n+                Asserts.assertTrue(a == Long.valueOf(42L));\n+                Asserts.assertTrue(b == Long.valueOf(-42L));\n+                Asserts.assertFalse(h == Long.valueOf(highBitsOnly));\n+            }\n+        });\n+\n+        helper((c) -> {\n+            Character a = Character.valueOf('a');\n+            Character b = Character.valueOf('Z');\n+            if (!c) {\n+                Asserts.assertTrue(a == Character.valueOf('a'));\n+                Asserts.assertTrue(b == Character.valueOf('Z'));\n+            }\n+        });\n+\n+        helper((c) -> {\n+            Short a = Short.valueOf((short)42);\n+            Short b = Short.valueOf((short)-42);\n+            if (!c) {\n+                Asserts.assertTrue(a == Short.valueOf((short)42));\n+                Asserts.assertTrue(b == Short.valueOf((short)-42));\n+            }\n+        });\n+\n+        helper((c) -> {\n+            Byte a = Byte.valueOf((byte)42);\n+            Byte b = Byte.valueOf((byte)-42);\n+            if (!c) {\n+                Asserts.assertTrue(a == Byte.valueOf((byte)42));\n+                Asserts.assertTrue(b == Byte.valueOf((byte)-42));\n+            }\n+        });\n+\n+        helper((c) -> {\n+            Boolean a = Boolean.valueOf(true);\n+            Boolean b = Boolean.valueOf(false);\n+            if (!c) {\n+                Asserts.assertTrue(a == Boolean.valueOf(true));\n+                Asserts.assertTrue(b == Boolean.valueOf(false));\n+            }\n+        });\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestIdentityWithEliminateBoxInDebugInfo.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"}]}