{"files":[{"patch":"@@ -60,1 +60,1 @@\n-     * At this stage, there are at least 2 messages are in queue. Now, start\n+     * At this stage, there are at least 2 messages in queue. Now, start\n@@ -63,1 +63,1 @@\n-     * the a single Ping has to be replied). Then send a Close message. Now\n+     * a single Ping has to be replied). Then send a Close message. Now\n@@ -114,1 +114,1 @@\n-                    cfText.get(MAX_WAIT_SEC, TimeUnit.SECONDS);\n+                    cfText.get(waitSec, TimeUnit.SECONDS);\n@@ -127,0 +127,7 @@\n+            List<MockListener.Invocation> invocations = listener.invocations();\n+            cfClose = webSocket.sendClose(WebSocket.NORMAL_CLOSURE, \"ok\");\n+\n+            assertFalse(invocations.contains(new MockListener.OnError(webSocket, IOException.class)));\n+            assertFalse(cfText.isDone());\n+            assertFalse(cfPing.isDone());\n+            assertFalse(cfClose.isDone());\n@@ -129,7 +136,0 @@\n-        List<MockListener.Invocation> invocations = listener.invocations();\n-        cfClose = webSocket.sendClose(WebSocket.NORMAL_CLOSURE, \"ok\");\n-\n-        assertFalse(invocations.contains(new MockListener.OnError(webSocket, IOException.class)));\n-        assertFalse(cfText.isDone());\n-        assertFalse(cfPing.isDone());\n-        assertFalse(cfClose.isDone());\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/BlowupOutputQueue.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-                    cfBinary.get(MAX_WAIT_SEC, TimeUnit.SECONDS);\n+                    cfBinary.get(waitSec, TimeUnit.SECONDS);\n@@ -77,1 +77,0 @@\n-            assertHangs(cfPing);\n@@ -81,1 +80,2 @@\n-            assertHangs(cfClose);\n+            assertHangs(cfPing);\n+            assertNotDone(cfClose);\n@@ -83,0 +83,4 @@\n+            webSocket.abort();\n+            assertFails(IOE, cfBinary);\n+            assertFails(IOE, cfPing);\n+            assertFails(IOE, cfClose);\n@@ -85,4 +89,0 @@\n-        webSocket.abort();\n-        assertFails(IOE, cfBinary);\n-        assertFails(IOE, cfPing);\n-        assertFails(IOE, cfClose);\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingBinaryPingClose.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -41,2 +41,0 @@\n-import static java.net.http.HttpClient.Builder.NO_PROXY;\n-import static java.net.http.HttpClient.newBuilder;\n@@ -65,1 +63,1 @@\n-                    cfBinary.get(MAX_WAIT_SEC, TimeUnit.SECONDS);\n+                    cfBinary.get(waitSec, TimeUnit.SECONDS);\n@@ -79,1 +77,0 @@\n-            assertHangs(cfPong);\n@@ -83,1 +80,2 @@\n-            assertHangs(cfClose);\n+            assertHangs(cfPong);\n+            assertNotDone(cfClose);\n@@ -85,0 +83,4 @@\n+            webSocket.abort();\n+            assertFails(IOE, cfBinary);\n+            assertFails(IOE, cfPong);\n+            assertFails(IOE, cfClose);\n@@ -87,4 +89,0 @@\n-        webSocket.abort();\n-        assertFails(IOE, cfBinary);\n-        assertFails(IOE, cfPong);\n-        assertFails(IOE, cfClose);\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingBinaryPongClose.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    \/\/ receive buffer must be full. This has been heuristically determined.\n+    \/\/ receive buffer must be full.\n@@ -48,0 +48,1 @@\n+    long waitSec;\n@@ -102,0 +103,5 @@\n+            if (iterations == 1) {\n+                waitSec = initialWaitSec();\n+            } else {\n+                waitSec = MAX_WAIT_SEC;\n+            }\n@@ -128,0 +134,4 @@\n+\n+    long initialWaitSec() {\n+        return 1;\n+    }\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingOperations.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-                    cfPing.get(MAX_WAIT_SEC, TimeUnit.SECONDS);\n+                    cfPing.get(waitSec, TimeUnit.SECONDS);\n@@ -77,1 +77,0 @@\n-            assertHangs(cfBinary);\n@@ -79,1 +78,2 @@\n-            assertHangs(cfClose);\n+            assertHangs(cfBinary);\n+            assertNotDone(cfClose);\n@@ -81,0 +81,4 @@\n+            webSocket.abort();\n+            assertFails(IOE, cfPing);\n+            assertFails(IOE, cfBinary);\n+            assertFails(IOE, cfClose);\n@@ -83,4 +87,6 @@\n-        webSocket.abort();\n-        assertFails(IOE, cfPing);\n-        assertFails(IOE, cfBinary);\n-        assertFails(IOE, cfClose);\n+    }\n+\n+    @Override\n+    long initialWaitSec() {\n+        \/\/ Some Windows machines increase buffer size after 1-2 seconds\n+        return isWindows() ? 3 : 1;\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingPingBinaryClose.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-                        cfPing.get(MAX_WAIT_SEC, TimeUnit.SECONDS);\n+                        cfPing.get(waitSec, TimeUnit.SECONDS);\n@@ -76,1 +76,1 @@\n-                        if (debug || done || (stop - start) > (MAX_WAIT_SEC * 1000L)\/2L)\n+                        if (debug || done || (stop - start) > (waitSec * 1000L)\/2L)\n@@ -82,1 +82,0 @@\n-                System.out.println(\"asserting that sendText hangs\");\n@@ -84,0 +83,2 @@\n+                cfClose = webSocket.sendClose(WebSocket.NORMAL_CLOSURE, \"ok\");\n+                System.out.println(\"asserting that sendText hangs\");\n@@ -86,2 +87,1 @@\n-                cfClose = webSocket.sendClose(WebSocket.NORMAL_CLOSURE, \"ok\");\n-                assertHangs(cfClose);\n+                assertNotDone(cfClose);\n@@ -91,0 +91,4 @@\n+                webSocket.abort();\n+                assertFails(IOE, cfPing);\n+                assertFails(IOE, cfText);\n+                assertFails(IOE, cfClose);\n@@ -93,4 +97,0 @@\n-            webSocket.abort();\n-            assertFails(IOE, cfPing);\n-            assertFails(IOE, cfText);\n-            assertFails(IOE, cfClose);\n@@ -103,0 +103,6 @@\n+\n+    @Override\n+    long initialWaitSec() {\n+        \/\/ Some Windows machines increase buffer size after 1-2 seconds\n+        return isWindows() ? 3 : 1;\n+    }\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingPingTextClose.java","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-                    cfPong.get(MAX_WAIT_SEC, TimeUnit.SECONDS);\n+                    cfPong.get(waitSec, TimeUnit.SECONDS);\n@@ -77,1 +77,0 @@\n-            assertHangs(cfBinary);\n@@ -79,1 +78,2 @@\n-            assertHangs(cfClose);\n+            assertHangs(cfBinary);\n+            assertNotDone(cfClose);\n@@ -81,0 +81,4 @@\n+            webSocket.abort();\n+            assertFails(IOE, cfPong);\n+            assertFails(IOE, cfBinary);\n+            assertFails(IOE, cfClose);\n@@ -83,4 +87,6 @@\n-        webSocket.abort();\n-        assertFails(IOE, cfPong);\n-        assertFails(IOE, cfBinary);\n-        assertFails(IOE, cfClose);\n+    }\n+\n+    @Override\n+    long initialWaitSec() {\n+        \/\/ Some Windows machines increase buffer size after 1-2 seconds\n+        return isWindows() ? 3 : 1;\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingPongBinaryClose.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-                    cfPong.get(MAX_WAIT_SEC, TimeUnit.SECONDS);\n+                    cfPong.get(waitSec, TimeUnit.SECONDS);\n@@ -77,1 +77,0 @@\n-            assertHangs(cfText);\n@@ -79,1 +78,2 @@\n-            assertHangs(cfClose);\n+            assertHangs(cfText);\n+            assertNotDone(cfClose);\n@@ -81,0 +81,4 @@\n+            webSocket.abort();\n+            assertFails(IOE, cfPong);\n+            assertFails(IOE, cfText);\n+            assertFails(IOE, cfClose);\n@@ -83,4 +87,6 @@\n-        webSocket.abort();\n-        assertFails(IOE, cfPong);\n-        assertFails(IOE, cfText);\n-        assertFails(IOE, cfClose);\n+    }\n+\n+    @Override\n+    long initialWaitSec() {\n+        \/\/ Some Windows machines increase buffer size after 1-2 seconds\n+        return isWindows() ? 3 : 1;\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingPongTextClose.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-                    cfText.get(MAX_WAIT_SEC, TimeUnit.SECONDS);\n+                    cfText.get(waitSec, TimeUnit.SECONDS);\n@@ -79,1 +79,0 @@\n-            assertHangs(cfPing);\n@@ -83,1 +82,2 @@\n-            assertHangs(cfClose);\n+            assertHangs(cfPing);\n+            assertNotDone(cfClose);\n@@ -85,0 +85,4 @@\n+            webSocket.abort();\n+            assertFails(IOE, cfText);\n+            assertFails(IOE, cfPing);\n+            assertFails(IOE, cfClose);\n@@ -87,4 +91,0 @@\n-        webSocket.abort();\n-        assertFails(IOE, cfText);\n-        assertFails(IOE, cfPing);\n-        assertFails(IOE, cfClose);\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingTextPingClose.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-                    cfText.get(MAX_WAIT_SEC, TimeUnit.SECONDS);\n+                    cfText.get(waitSec, TimeUnit.SECONDS);\n@@ -78,1 +78,0 @@\n-            assertHangs(cfPong);\n@@ -82,1 +81,2 @@\n-            assertHangs(cfClose);\n+            assertHangs(cfPong);\n+            assertNotDone(cfClose);\n@@ -84,0 +84,4 @@\n+            webSocket.abort();\n+            assertFails(IOE, cfText);\n+            assertFails(IOE, cfPong);\n+            assertFails(IOE, cfClose);\n@@ -86,4 +90,0 @@\n-        webSocket.abort();\n-        assertFails(IOE, cfText);\n-        assertFails(IOE, cfPong);\n-        assertFails(IOE, cfClose);\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingTextPongClose.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}