{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,2 +52,1 @@\n-        initb2c();\n-        return new  DoubleByte.Decoder$DECTYPE$(this, b2c, b2cSB, $B2MIN$, $B2MAX$, $ASCIICOMPATIBLE$);\n+        return new DoubleByte.Decoder$DECTYPE$(this, DecodeHolder.b2c, DecodeHolder.b2cSB, $B2MIN$, $B2MAX$, $ASCIICOMPATIBLE$);\n@@ -57,2 +56,1 @@\n-        initc2b();\n-        return new DoubleByte.Encoder$ENCTYPE$(this, $ENC_REPLACEMENT$ c2b, c2bIndex, $ASCIICOMPATIBLE$);\n+        return new DoubleByte.Encoder$ENCTYPE$(this, $ENC_REPLACEMENT$ EncodeHolder.c2b, EncodeHolder.c2bIndex, $ASCIICOMPATIBLE$);\n@@ -61,4 +59,4 @@\n-    $B2C$\n-    static char[][] b2c = new char[b2cStr.length][];\n-    static char[] b2cSB;\n-    private static volatile boolean b2cInitialized = false;\n+    static class DecodeHolder {\n+        $B2C$\n+        static final char[][] b2c = new char[b2cStr.length][];\n+        static final char[] b2cSB;\n@@ -66,6 +64,1 @@\n-    static void initb2c() {\n-        if (b2cInitialized)\n-            return;\n-        synchronized (b2c) {\n-            if (b2cInitialized)\n-                return;\n+        static {\n@@ -79,1 +72,0 @@\n-            b2cInitialized = true;\n@@ -83,3 +75,3 @@\n-    static char[] c2b = new char[$C2BLENGTH$];\n-    static char[] c2bIndex = new char[0x100];\n-    private static volatile boolean c2bInitialized = false;\n+    static class EncodeHolder {\n+        static final char[] c2b = new char[$C2BLENGTH$];\n+        static final char[] c2bIndex = new char[0x100];\n@@ -87,6 +79,1 @@\n-    static void initc2b() {\n-        if (c2bInitialized)\n-            return;\n-        synchronized (c2b) {\n-            if (c2bInitialized)\n-                return;\n+        static {\n@@ -95,1 +82,2 @@\n-            DoubleByte.Encoder.initC2B(b2cStr, b2cSBStr, b2cNR, c2bNR,\n+            DoubleByte.Encoder.initC2B(DecodeHolder.b2cStr, DecodeHolder.b2cSBStr,\n+                                       b2cNR, c2bNR,\n@@ -98,1 +86,0 @@\n-            c2bInitialized = true;\n","filename":"make\/data\/charsetmapping\/DoubleByte-X.java.template","additions":14,"deletions":27,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-        return new SingleByte.Decoder(this, b2c, $ASCIICOMPATIBLE$, $LATIN1DECODABLE$);\n+        return new SingleByte.Decoder(this, Holder.b2c, $ASCIICOMPATIBLE$, $LATIN1DECODABLE$);\n@@ -55,1 +55,1 @@\n-        return new SingleByte.Encoder(this, c2b, c2bIndex, $ASCIICOMPATIBLE$);\n+        return new SingleByte.Encoder(this, Holder.c2b, Holder.c2bIndex, $ASCIICOMPATIBLE$);\n@@ -58,1 +58,2 @@\n-    private final static String b2cTable = $B2CTABLE$\n+    private static class Holder {\n+        private static final String b2cTable = $B2CTABLE$\n@@ -60,3 +61,3 @@\n-    private final static char[] b2c = b2cTable.toCharArray();\n-    private final static char[] c2b = new char[$C2BLENGTH$];\n-    private final static char[] c2bIndex = new char[0x100];\n+        private static final char[] b2c = b2cTable.toCharArray();\n+        private static final char[] c2b = new char[$C2BLENGTH$];\n+        private static final char[] c2bIndex = new char[0x100];\n@@ -64,6 +65,7 @@\n-    static {\n-        char[] b2cMap = b2c;\n-        char[] c2bNR = null;\n-        $NONROUNDTRIP_B2C$\n-        $NONROUNDTRIP_C2B$\n-        SingleByte.initC2B(b2cMap, c2bNR, c2b, c2bIndex);\n+        static {\n+            char[] b2cMap = b2c;\n+            char[] c2bNR = null;\n+            $NONROUNDTRIP_B2C$\n+            $NONROUNDTRIP_C2B$\n+            SingleByte.initC2B(b2cMap, c2bNR, c2b, c2bIndex);\n+        }\n","filename":"make\/data\/charsetmapping\/SingleByte-X.java.template","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -934,1 +934,3 @@\n-                nameToModule.values().forEach(servicesCatalog::register);\n+                for (Module m : nameToModule.values()) {\n+                    servicesCatalog.register(m);\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ModuleLayer.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-        packagePrefix = \"sun.nio.cs\";\n+        packagePrefix = \"sun.nio.cs.\";\n@@ -75,1 +75,1 @@\n-        packagePrefix = pkgPrefixName;\n+        packagePrefix = pkgPrefixName.concat(\".\");\n@@ -147,1 +147,1 @@\n-            Class<?> c = Class.forName(packagePrefix + \".\" + cln,\n+            Class<?> c = Class.forName(packagePrefix.concat(cln),\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/AbstractCharsetProvider.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-        private static DoubleByte.Decoder big5 =\n+        private static final DoubleByte.Decoder big5 =\n@@ -65,2 +65,2 @@\n-        private static char[][] b2cBmp = new char[0x100][];\n-        private static char[][] b2cSupp = new char[0x100][];\n+        private static final char[][] b2cBmp = new char[0x100][];\n+        private static final char[][] b2cSupp = new char[0x100][];\n@@ -78,1 +78,1 @@\n-        private static DoubleByte.Encoder big5 =\n+        private static final DoubleByte.Encoder big5 =\n@@ -81,2 +81,2 @@\n-        static char[][] c2bBmp = new char[0x100][];\n-        static char[][] c2bSupp = new char[0x100][];\n+        static final char[][] c2bBmp = new char[0x100][];\n+        static final char[][] c2bSupp = new char[0x100][];\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/Big5_HKSCS.java.template","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,2 +59,2 @@\n-        private static char[][] b2cBmp = new char[0x100][];\n-        private static char[][] b2cSupp = new char[0x100][];\n+        private static final char[][] b2cBmp = new char[0x100][];\n+        private static final char[][] b2cSupp = new char[0x100][];\n@@ -75,2 +75,2 @@\n-        static char[][] c2bBmp = new char[0x100][];\n-        static char[][] c2bSupp = new char[0x100][];\n+        static final char[][] c2bBmp = new char[0x100][];\n+        static final char[][] c2bSupp = new char[0x100][];\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/Big5_HKSCS_2001.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,2 +53,1 @@\n-        initb2c();\n-        return new  DoubleByte.Decoder(this, b2c, b2cSB, 0x40, 0xfe, true);\n+        return new DoubleByte.Decoder(this, Holder.b2c, Holder.b2cSB, 0x40, 0xfe, true);\n@@ -58,2 +57,1 @@\n-        initc2b();\n-        return new DoubleByte.Encoder(this, c2b, c2bIndex, true);\n+        return new DoubleByte.Encoder(this, Holder.c2b, Holder.c2bIndex, true);\n@@ -62,3 +60,5 @@\n-    static char[][] b2c;\n-    static char[] b2cSB;\n-    private static volatile boolean b2cInitialized = false;\n+    private static class Holder {\n+        static final char[][] b2c;\n+        static final char[] b2cSB;\n+        static final char[] c2b;\n+        static final char[] c2bIndex;\n@@ -66,8 +66,2 @@\n-    static void initb2c() {\n-        if (b2cInitialized)\n-            return;\n-        synchronized (Big5_Solaris.class) {\n-            if (b2cInitialized)\n-                return;\n-            Big5.initb2c();\n-            b2c = Big5.b2c.clone();\n+        static {\n+            b2c = Big5.DecodeHolder.b2c.clone();\n@@ -91,4 +85,1 @@\n-            b2cSB = Big5.b2cSB;\n-            b2cInitialized = true;\n-        }\n-    }\n+            b2cSB = Big5.DecodeHolder.b2cSB;\n@@ -96,14 +87,3 @@\n-    static char[] c2b;\n-    static char[] c2bIndex;\n-    private static volatile boolean c2bInitialized = false;\n-\n-    static void initc2b() {\n-        if (c2bInitialized)\n-            return;\n-        synchronized (Big5_Solaris.class) {\n-            if (c2bInitialized)\n-                return;\n-            Big5.initc2b();\n-            c2b = Big5.c2b.clone();\n-            c2bIndex = Big5.c2bIndex.clone();\n-            int[] sol = new int[] {\n+            c2b = Big5.EncodeHolder.c2b.clone();\n+            c2bIndex = Big5.EncodeHolder.c2bIndex.clone();\n+            sol = new int[] {\n@@ -124,1 +104,0 @@\n-            c2bInitialized = true;\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/Big5_Solaris.java.template","additions":14,"deletions":35,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,1 @@\n-        final static SingleByte.Decoder DEC0201 =\n+        static final SingleByte.Decoder DEC0201 =\n@@ -73,1 +73,1 @@\n-        final static DoubleByte.Decoder DEC0208 =\n+        static final DoubleByte.Decoder DEC0208 =\n@@ -76,1 +76,1 @@\n-        final static DoubleByte.Decoder DEC0212 =\n+        static final DoubleByte.Decoder DEC0212 =\n@@ -79,1 +79,1 @@\n-        final static DoubleByte.Encoder ibm943 =\n+        static final DoubleByte.Encoder ibm943 =\n@@ -86,1 +86,1 @@\n-        private final String G2_b =\n+        private static final String G2_b =\n@@ -97,1 +97,1 @@\n-        private final String G2_c =\n+        private static final String G2_c =\n@@ -108,1 +108,1 @@\n-        private final String G3_b =\n+        private static final String G3_b =\n@@ -121,1 +121,1 @@\n-        private final String G3_c =\n+        private static final String G3_c =\n@@ -167,1 +167,1 @@\n-        final static String g1_c = \"\\u00a2\\u00a3\\u00ac\\\\\\u007e\";\n+        static final String g1_c = \"\\u00a2\\u00a3\\u00ac\\\\\\u007e\";\n@@ -325,1 +325,1 @@\n-        final static SingleByte.Encoder ENC0201 =\n+        static final SingleByte.Encoder ENC0201 =\n@@ -328,1 +328,1 @@\n-        final static DoubleByte.Encoder ENC0208 =\n+        static final DoubleByte.Encoder ENC0208 =\n@@ -331,1 +331,1 @@\n-        final static DoubleByte.Encoder ENC0212 =\n+        static final DoubleByte.Encoder ENC0212 =\n@@ -334,1 +334,1 @@\n-        final static DoubleByte.Encoder ibm943 =\n+        static final DoubleByte.Encoder ibm943 =\n@@ -343,1 +343,1 @@\n-        private final String G2_c =\n+        private static final String G2_c =\n@@ -356,1 +356,1 @@\n-        private final String G2_b =\n+        private static final String G2_b =\n@@ -369,1 +369,1 @@\n-        private final String G3_c =\n+        private static final String G3_c =\n@@ -382,1 +382,1 @@\n-        private final String G3_b =\n+        private static final String G3_b =\n@@ -415,1 +415,1 @@\n-        private final static String G1_c = \"\\u00A2\\u00A3\\u00AC\";\n+        private static final String G1_c = \"\\u00A2\\u00A3\\u00AC\";\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/IBM29626C.java.template","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n-\n@@ -3,1 +2,1 @@\n- * Copyright (c) 2006, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +51,0 @@\n-        IBM933.initb2c();\n@@ -54,1 +52,1 @@\n-            this, IBM933.b2c, null, 0x40, 0xfe);  \/\/ hardcode the b2min\/max\n+            this, IBM933.DecodeHolder.b2c, null, 0x40, 0xfe);  \/\/ hardcode the b2min\/max\n@@ -58,1 +56,0 @@\n-        IBM933.initc2b();\n@@ -65,1 +62,1 @@\n-                  IBM933.c2b, IBM933.c2bIndex, false);\n+                  IBM933.EncodeHolder.c2b, IBM933.EncodeHolder.c2bIndex, false);\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/IBM834.java.template","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,2 +53,2 @@\n-                                      IBM942.b2c,\n-                                      b2cSB,\n+                                      IBM942.DecodeHolder.b2c,\n+                                      Holder.b2cSB,\n@@ -60,1 +60,1 @@\n-        return new DoubleByte.Encoder(this, c2b, c2bIndex);\n+        return new DoubleByte.Encoder(this, Holder.c2b, Holder.c2bIndex);\n@@ -63,3 +63,4 @@\n-    final static char[] b2cSB;\n-    final static char[] c2b;\n-    final static char[] c2bIndex;\n+    private static class Holder {\n+        static final char[] b2cSB;\n+        static final char[] c2b;\n+        static final char[] c2bIndex;\n@@ -67,2 +68,7 @@\n-    static {\n-        IBM942.initb2c();\n+        static {\n+            \/\/ the mappings need udpate are\n+            \/\/    u+001a  <-> 0x1a\n+            \/\/    u+001c  <-> 0x1c\n+            \/\/    u+005c  <-> 0x5c\n+            \/\/    u+007e  <-> 0x7e\n+            \/\/    u+007f  <-> 0x7f\n@@ -70,6 +76,6 @@\n-        \/\/ the mappings need udpate are\n-        \/\/    u+001a  <-> 0x1a\n-        \/\/    u+001c  <-> 0x1c\n-        \/\/    u+005c  <-> 0x5c\n-        \/\/    u+007e  <-> 0x7e\n-        \/\/    u+007f  <-> 0x7f\n+            b2cSB = Arrays.copyOf(IBM942.DecodeHolder.b2cSB, IBM942.DecodeHolder.b2cSB.length);\n+            b2cSB[0x1a] = 0x1a;\n+            b2cSB[0x1c] = 0x1c;\n+            b2cSB[0x5c] = 0x5c;\n+            b2cSB[0x7e] = 0x7e;\n+            b2cSB[0x7f] = 0x7f;\n@@ -77,15 +83,8 @@\n-        b2cSB = Arrays.copyOf(IBM942.b2cSB, IBM942.b2cSB.length);\n-        b2cSB[0x1a] = 0x1a;\n-        b2cSB[0x1c] = 0x1c;\n-        b2cSB[0x5c] = 0x5c;\n-        b2cSB[0x7e] = 0x7e;\n-        b2cSB[0x7f] = 0x7f;\n-\n-        IBM942.initc2b();\n-        c2b = Arrays.copyOf(IBM942.c2b, IBM942.c2b.length);\n-        c2bIndex = Arrays.copyOf(IBM942.c2bIndex, IBM942.c2bIndex.length);\n-        c2b[c2bIndex[0] + 0x1a] = 0x1a;\n-        c2b[c2bIndex[0] + 0x1c] = 0x1c;\n-        c2b[c2bIndex[0] + 0x5c] = 0x5c;\n-        c2b[c2bIndex[0] + 0x7e] = 0x7e;\n-        c2b[c2bIndex[0] + 0x7f] = 0x7f;\n+            c2b = Arrays.copyOf(IBM942.EncodeHolder.c2b, IBM942.EncodeHolder.c2b.length);\n+            c2bIndex = Arrays.copyOf(IBM942.EncodeHolder.c2bIndex, IBM942.EncodeHolder.c2bIndex.length);\n+            c2b[c2bIndex[0] + 0x1a] = 0x1a;\n+            c2b[c2bIndex[0] + 0x1c] = 0x1c;\n+            c2b[c2bIndex[0] + 0x5c] = 0x5c;\n+            c2b[c2bIndex[0] + 0x7e] = 0x7e;\n+            c2b[c2bIndex[0] + 0x7f] = 0x7f;\n+        }\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/IBM942C.java.template","additions":29,"deletions":30,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,2 +53,2 @@\n-                                      IBM943.b2c,\n-                                      b2cSB,\n+                                      IBM943.DecodeHolder.b2c,\n+                                      Holder.b2cSB,\n@@ -60,1 +60,1 @@\n-        return new DoubleByte.Encoder(this, c2b, c2bIndex);\n+        return new DoubleByte.Encoder(this, Holder.c2b, Holder.c2bIndex);\n@@ -63,3 +63,4 @@\n-    final static char[] b2cSB;\n-    final static char[] c2b;\n-    final static char[] c2bIndex;\n+    private static class Holder {\n+        static final char[] b2cSB;\n+        static final char[] c2b;\n+        static final char[] c2bIndex;\n@@ -67,16 +68,14 @@\n-    static {\n-        IBM943.initb2c();\n-        b2cSB = new char[0x100];\n-        for (int i = 0; i < 0x80; i++) {\n-            b2cSB[i] = (char)i;\n-        }\n-        for (int i = 0x80; i < 0x100; i++) {\n-            b2cSB[i] = IBM943.b2cSB[i];\n-        }\n-\n-        IBM943.initc2b();\n-        c2b = Arrays.copyOf(IBM943.c2b, IBM943.c2b.length);\n-        c2bIndex = Arrays.copyOf(IBM943.c2bIndex, IBM943.c2bIndex.length);\n-        for (char c = '\\0'; c < '\\u0080'; ++c) {\n-            int index = c2bIndex[c >> 8];\n-            c2b[index + (c & 0xff)] = c;\n+        static {\n+            b2cSB = new char[0x100];\n+            for (int i = 0; i < 0x80; i++) {\n+                b2cSB[i] = (char)i;\n+            }\n+            for (int i = 0x80; i < 0x100; i++) {\n+                b2cSB[i] = IBM943.DecodeHolder.b2cSB[i];\n+            }\n+            c2b = Arrays.copyOf(IBM943.EncodeHolder.c2b, IBM943.EncodeHolder.c2b.length);\n+            c2bIndex = Arrays.copyOf(IBM943.EncodeHolder.c2bIndex, IBM943.EncodeHolder.c2bIndex.length);\n+            for (char c = '\\0'; c < '\\u0080'; ++c) {\n+                int index = c2bIndex[c >> 8];\n+                c2b[index + (c & 0xff)] = c;\n+            }\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/IBM943C.java.template","additions":22,"deletions":23,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,2 +53,2 @@\n-                                      IBM949.b2c,\n-                                      b2cSB,\n+                                      IBM949.DecodeHolder.b2c,\n+                                      Holder.b2cSB,\n@@ -60,1 +60,1 @@\n-        return new DoubleByte.Encoder(this, c2b, c2bIndex);\n+        return new DoubleByte.Encoder(this, Holder.c2b, Holder.c2bIndex);\n@@ -63,3 +63,4 @@\n-    final static char[] b2cSB;\n-    final static char[] c2b;\n-    final static char[] c2bIndex;\n+    private static class Holder {\n+        static final char[] b2cSB;\n+        static final char[] c2b;\n+        static final char[] c2bIndex;\n@@ -67,15 +68,14 @@\n-    static {\n-        IBM949.initb2c();\n-        b2cSB = new char[0x100];\n-        for (int i = 0; i < 0x80; i++) {\n-            b2cSB[i] = (char)i;\n-        }\n-        for (int i = 0x80; i < 0x100; i++) {\n-            b2cSB[i] = IBM949.b2cSB[i];\n-        }\n-        IBM949.initc2b();\n-        c2b = Arrays.copyOf(IBM949.c2b, IBM949.c2b.length);\n-        c2bIndex = Arrays.copyOf(IBM949.c2bIndex, IBM949.c2bIndex.length);\n-        for (char c = '\\0'; c < '\\u0080'; ++c) {\n-            int index = c2bIndex[c >> 8];\n-            c2b[index + (c & 0xff)] = c;\n+        static {\n+            b2cSB = new char[0x100];\n+            for (int i = 0; i < 0x80; i++) {\n+                b2cSB[i] = (char)i;\n+            }\n+            for (int i = 0x80; i < 0x100; i++) {\n+                b2cSB[i] = IBM949.DecodeHolder.b2cSB[i];\n+            }\n+            c2b = Arrays.copyOf(IBM949.EncodeHolder.c2b, IBM949.EncodeHolder.c2b.length);\n+            c2bIndex = Arrays.copyOf(IBM949.EncodeHolder.c2bIndex, IBM949.EncodeHolder.c2bIndex.length);\n+            for (char c = '\\0'; c < '\\u0080'; ++c) {\n+                int index = c2bIndex[c >> 8];\n+                c2b[index + (c & 0xff)] = c;\n+            }\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/IBM949C.java.template","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,0 +67,2 @@\n+        private static final Charset cns = new EUC_TW();\n+\n@@ -73,5 +75,1 @@\n-\n-            try {\n-                Charset cset = Charset.forName(\"EUC_TW\"); \/\/ CNS11643\n-                ISOEncoder = cset.newEncoder();\n-            } catch (Exception e) { }\n+            ISOEncoder = cns.newEncoder();\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/ISO2022_CN_CNS.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,0 +68,1 @@\n+        private static final Charset gb2312 = new EUC_CN();\n@@ -72,5 +73,1 @@\n-\n-            try {\n-                Charset cset = Charset.forName(\"EUC_CN\"); \/\/ GB2312\n-                ISOEncoder = cset.newEncoder();\n-            } catch (Exception e) { }\n+            ISOEncoder = gb2312.newEncoder();\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/ISO2022_CN_GB.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,3 @@\n-    private static Charset ksc5601_cs;\n+    private static class Holder {\n+        private static final Charset ksc5601_cs = new EUC_KR();\n+    }\n@@ -47,1 +49,0 @@\n-        ksc5601_cs = new EUC_KR();\n@@ -77,1 +78,1 @@\n-                SODecoder[0] = ksc5601_cs.newDecoder();\n+                SODecoder[0] = Holder.ksc5601_cs.newDecoder();\n@@ -88,1 +89,1 @@\n-                ISOEncoder = ksc5601_cs.newEncoder();\n+                ISOEncoder = Holder.ksc5601_cs.newEncoder();\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/ISO2022_KR.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-        return new Decoder(this, DEC0208, DEC0212);\n+        return new Decoder(this, Holder.DEC0208, Holder.DEC0212);\n@@ -60,1 +60,1 @@\n-        return new Encoder(this, ENC0208, ENC0212, doSBKANA());\n+        return new Encoder(this, Holder.ENC0208, Holder.ENC0212, doSBKANA());\n@@ -63,2 +63,3 @@\n-    private final static DoubleByte.Decoder DEC0208 =\n-        (DoubleByte.Decoder)new JIS_X_0208_MS5022X().newDecoder();\n+    private static class Holder {\n+        private static final DoubleByte.Decoder DEC0208 =\n+                (DoubleByte.Decoder) new JIS_X_0208_MS5022X().newDecoder();\n@@ -66,2 +67,2 @@\n-    private final static DoubleByte.Decoder DEC0212 =\n-        (DoubleByte.Decoder)new JIS_X_0212_MS5022X().newDecoder();\n+        private static final DoubleByte.Decoder DEC0212 =\n+                (DoubleByte.Decoder) new JIS_X_0212_MS5022X().newDecoder();\n@@ -69,2 +70,2 @@\n-    private final static DoubleByte.Encoder ENC0208 =\n-        (DoubleByte.Encoder)new JIS_X_0208_MS5022X().newEncoder();\n+        private static final DoubleByte.Encoder ENC0208 =\n+                (DoubleByte.Encoder) new JIS_X_0208_MS5022X().newEncoder();\n@@ -72,2 +73,3 @@\n-    private final static DoubleByte.Encoder ENC0212 =\n-        (DoubleByte.Encoder)new JIS_X_0212_MS5022X().newEncoder();\n+        private static final DoubleByte.Encoder ENC0212 =\n+                (DoubleByte.Encoder) new JIS_X_0212_MS5022X().newEncoder();\n+    }\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/MS50220.java","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-        static DoubleByte.Decoder decMS932 =\n+        static final DoubleByte.Decoder decMS932 =\n@@ -71,1 +71,1 @@\n-        static DoubleByte.Encoder encMS932 =\n+        static final DoubleByte.Encoder encMS932 =\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/MS932_0213.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,2 +63,2 @@\n-        private static char[][] b2cBmp = new char[0x100][];\n-        private static char[][] b2cSupp = new char[0x100][];\n+        private static final char[][] b2cBmp = new char[0x100][];\n+        private static final char[][] b2cSupp = new char[0x100][];\n@@ -79,2 +79,2 @@\n-        static char[][] c2bBmp = new char[0x100][];\n-        static char[][] c2bSupp = new char[0x100][];\n+        static final char[][] c2bBmp = new char[0x100][];\n+        static final char[][] c2bSupp = new char[0x100][];\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/MS950_HKSCS.java.template","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-        private static char[][] b2cBmp = new char[0x100][];\n+        private static final char[][] b2cBmp = new char[0x100][];\n@@ -91,1 +91,1 @@\n-        static char[][] c2bBmp = new char[0x100][];\n+        static final char[][] c2bBmp = new char[0x100][];\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/MS950_HKSCS_XP.java.template","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-        final static DoubleByte.Decoder DEC0208 =\n+        static final DoubleByte.Decoder DEC0208 =\n@@ -60,1 +60,1 @@\n-        final static DoubleByte.Encoder ENC0208 =\n+        static final DoubleByte.Encoder ENC0208 =\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/MSISO2022JP.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,6 +79,8 @@\n-    static CharsetMapping mapping = AccessController.doPrivileged(\n-        new PrivilegedAction<CharsetMapping>() {\n-            public CharsetMapping run() {\n-                return CharsetMapping.get(SJIS_0213.class.getResourceAsStream(\"sjis0213.dat\"));\n-            }\n-        });\n+    private static class Holder {\n+        static final CharsetMapping mapping = AccessController.doPrivileged(\n+                new PrivilegedAction<CharsetMapping>() {\n+                    public CharsetMapping run() {\n+                        return CharsetMapping.get(SJIS_0213.class.getResourceAsStream(\"sjis0213.dat\"));\n+                    }\n+                });\n+    }\n@@ -191,1 +193,1 @@\n-            return mapping.decodeSingle(b);\n+            return Holder.mapping.decodeSingle(b);\n@@ -195,1 +197,1 @@\n-            return mapping.decodeDouble(b1, b2);\n+            return Holder.mapping.decodeDouble(b1, b2);\n@@ -202,1 +204,1 @@\n-            if (mapping.decodeSurrogate(db, cc) != null)\n+            if (Holder.mapping.decodeSurrogate(db, cc) != null)\n@@ -205,1 +207,1 @@\n-            if (mapping.decodeComposite(comp, cc) != null)\n+            if (Holder.mapping.decodeComposite(comp, cc) != null)\n@@ -224,1 +226,1 @@\n-            return mapping.encodeChar(ch);\n+            return Holder.mapping.encodeChar(ch);\n@@ -228,1 +230,1 @@\n-            return mapping.encodeSurrogate(hi, lo);\n+            return Holder.mapping.encodeSurrogate(hi, lo);\n@@ -235,1 +237,1 @@\n-            return mapping.encodeComposite(comp);\n+            return Holder.mapping.encodeComposite(comp);\n@@ -240,1 +242,1 @@\n-            return mapping.isCompositeBase(comp);\n+            return Holder.mapping.isCompositeBase(comp);\n","filename":"src\/jdk.charsets\/share\/classes\/sun\/nio\/cs\/ext\/SJIS_0213.java","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"}]}