{"files":[{"patch":"@@ -169,5 +169,0 @@\n-typedef HashtableEntry<intptr_t, mtInternal>  IntptrHashtableEntry;\n-typedef Hashtable<intptr_t, mtInternal>       IntptrHashtable;\n-typedef Hashtable<InstanceKlass*, mtClass>       KlassHashtable;\n-typedef HashtableEntry<InstanceKlass*, mtClass>  KlassHashtableEntry;\n-\n@@ -473,21 +468,0 @@\n-  \/* HashtableBucket *\/                                                                                                              \\\n-  \/*******************\/                                                                                                              \\\n-                                                                                                                                     \\\n-  nonstatic_field(HashtableBucket<mtInternal>, _entry,                                        BasicHashtableEntry<mtInternal>*)      \\\n-                                                                                                                                     \\\n-  \/******************\/                                                                                                               \\\n-  \/* HashtableEntry *\/                                                                                                               \\\n-  \/******************\/                                                                                                               \\\n-                                                                                                                                     \\\n-  nonstatic_field(BasicHashtableEntry<mtInternal>, _next,                                     BasicHashtableEntry<mtInternal>*)      \\\n-  nonstatic_field(BasicHashtableEntry<mtInternal>, _hash,                                     unsigned int)                          \\\n-  nonstatic_field(IntptrHashtableEntry,            _literal,                                  intptr_t)                              \\\n-                                                                                                                                     \\\n-  \/*************\/                                                                                                                    \\\n-  \/* Hashtable *\/                                                                                                                    \\\n-  \/*************\/                                                                                                                    \\\n-                                                                                                                                     \\\n-  nonstatic_field(BasicHashtable<mtInternal>,  _table_size,                                   int)                                   \\\n-  nonstatic_field(BasicHashtable<mtInternal>,  _buckets,                                      HashtableBucket<mtInternal>*)          \\\n-                                                                                                                                     \\\n-  \/*******************\/                                                                                                              \\\n@@ -500,1 +474,0 @@\n-  volatile_nonstatic_field(ClassLoaderData,    _dictionary,                                   Dictionary*)                           \\\n@@ -1312,8 +1285,0 @@\n-  declare_toplevel_type(BasicHashtable<mtInternal>)                       \\\n-    declare_type(IntptrHashtable, BasicHashtable<mtInternal>)             \\\n-  declare_toplevel_type(BasicHashtable<mtSymbol>)                         \\\n-    declare_type(Dictionary, KlassHashtable)                              \\\n-  declare_toplevel_type(BasicHashtableEntry<mtInternal>)                  \\\n-  declare_type(IntptrHashtableEntry, BasicHashtableEntry<mtInternal>)     \\\n-    declare_type(DictionaryEntry, KlassHashtableEntry)                    \\\n-  declare_toplevel_type(HashtableBucket<mtInternal>)                      \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":35,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,0 @@\n-    dictionaryField = type.getAddressField(\"_dictionary\");\n@@ -57,1 +56,0 @@\n-  private static AddressField dictionaryField;\n@@ -63,5 +61,0 @@\n-  public Dictionary dictionary() {\n-      Address tmp = dictionaryField.getValue();\n-      return (Dictionary) VMObjectFactory.newObject(Dictionary.class, tmp);\n-  }\n-\n@@ -117,5 +110,0 @@\n-\n-  \/** Iterate over all klasses in the dictionary, including initiating loader. *\/\n-  public void allEntriesDo(ClassLoaderDataGraph.ClassAndLoaderVisitor v) {\n-      dictionary().allEntriesDo(v, getClassLoader());\n-  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/classfile\/ClassLoaderData.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,8 +87,0 @@\n-\n-  \/** Iterate over all klasses - including object, primitive\n-      array klasses, pass initiating loader. *\/\n-  public void allEntriesDo(ClassAndLoaderVisitor v) {\n-    for (ClassLoaderData cld = getClassLoaderGraphHead(); cld != null; cld = cld.next()) {\n-        cld.allEntriesDo(v);\n-    }\n-  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/classfile\/ClassLoaderDataGraph.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * @(#)BinaryTreeDictionary.java\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.memory;\n-\n-import java.util.*;\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.types.*;\n-import sun.jvm.hotspot.runtime.*;\n-import sun.jvm.hotspot.utilities.Observable;\n-import sun.jvm.hotspot.utilities.Observer;\n-\n-public class AFLBinaryTreeDictionary extends VMObject {\n-   static {\n-      VM.registerVMInitializedObserver(new Observer() {\n-         public void update(Observable o, Object data) {\n-            initialize(VM.getVM().getTypeDataBase());\n-         }\n-      });\n-   }\n-\n-   private static synchronized void initialize(TypeDataBase db) {\n-      Type type = db.lookupType(\"AFLBinaryTreeDictionary\");\n-      totalSizeField = type.getCIntegerField(\"_total_size\");\n-   }\n-\n-   \/\/ Fields\n-   private static CIntegerField totalSizeField;\n-\n-   \/\/ Accessors\n-   public long size() {\n-      return totalSizeField.getValue(addr);\n-   }\n-\n-   \/\/ Constructor\n-   public AFLBinaryTreeDictionary(Address addr) {\n-      super(addr);\n-   }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/memory\/AFLBinaryTreeDictionary.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -1,102 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.memory;\n-\n-import java.util.*;\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.classfile.*;\n-import sun.jvm.hotspot.oops.*;\n-import sun.jvm.hotspot.types.*;\n-import sun.jvm.hotspot.runtime.*;\n-import sun.jvm.hotspot.utilities.*;\n-import sun.jvm.hotspot.utilities.Observable;\n-import sun.jvm.hotspot.utilities.Observer;\n-\n-public class Dictionary extends sun.jvm.hotspot.utilities.Hashtable {\n-  static {\n-    VM.registerVMInitializedObserver(new Observer() {\n-        public void update(Observable o, Object data) {\n-          initialize(VM.getVM().getTypeDataBase());\n-        }\n-      });\n-  }\n-\n-  private static synchronized void initialize(TypeDataBase db) {\n-    \/\/ just checking that the type exists\n-    Type type = db.lookupType(\"Dictionary\");\n-  }\n-\n-  public Dictionary(Address addr) {\n-    super(addr);\n-  }\n-\n-  \/\/ this is overriden here so that Hashtable.bucket will return\n-  \/\/ object of DictionaryEntry.class\n-  protected Class<? extends HashtableEntry> getHashtableEntryClass() {\n-    return DictionaryEntry.class;\n-  }\n-\n-  \/** All classes, and their initiating class loader, passed in. *\/\n-  public void allEntriesDo(ClassLoaderDataGraph.ClassAndLoaderVisitor v, Oop loader) {\n-    int tblSize = tableSize();\n-    for (int index = 0; index < tblSize; index++) {\n-      for (DictionaryEntry probe = (DictionaryEntry) bucket(index); probe != null;\n-                                              probe = (DictionaryEntry) probe.next()) {\n-        Klass k = probe.klass();\n-        \/\/ Only visit InstanceKlasses that are at least in the \"loaded\" init_state. Otherwise\n-        \/\/ the InstanceKlass won't have some required fields initialized, which can cause problems.\n-        if (k instanceof InstanceKlass && !((InstanceKlass)k).isLoaded()) {\n-            continue;\n-        }\n-        v.visit(k, loader);\n-      }\n-    }\n-  }\n-\n-  \/\/ - Internals only below this point\n-\n-  private DictionaryEntry getEntry(int index, long hash, Symbol className) {\n-    for (DictionaryEntry entry = (DictionaryEntry) bucket(index); entry != null;\n-                                    entry = (DictionaryEntry) entry.next()) {\n-      if (entry.hash() == hash && entry.equals(className)) {\n-        return entry;\n-      }\n-    }\n-    return null;\n-  }\n-\n-  public boolean contains(Klass c) {\n-    long hash = computeHash(c.getName());\n-    int index = hashToIndex(hash);\n-\n-    for (DictionaryEntry entry = (DictionaryEntry) bucket(index); entry != null;\n-                                    entry = (DictionaryEntry) entry.next()) {\n-      if (entry.literalValue().equals(c.getAddress())) {\n-        return true;\n-      }\n-    }\n-    return false;\n-  }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/memory\/Dictionary.java","additions":0,"deletions":102,"binary":false,"changes":102,"status":"deleted"},{"patch":"@@ -1,69 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.memory;\n-\n-import java.util.*;\n-import sun.jvm.hotspot.classfile.ClassLoaderData;\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.oops.*;\n-import sun.jvm.hotspot.types.*;\n-import sun.jvm.hotspot.runtime.*;\n-import sun.jvm.hotspot.utilities.*;\n-import sun.jvm.hotspot.utilities.Observable;\n-import sun.jvm.hotspot.utilities.Observer;\n-\n-public class DictionaryEntry extends sun.jvm.hotspot.utilities.HashtableEntry {\n-  static {\n-    VM.registerVMInitializedObserver(new Observer() {\n-        public void update(Observable o, Object data) {\n-          initialize(VM.getVM().getTypeDataBase());\n-        }\n-      });\n-  }\n-\n-  private static synchronized void initialize(TypeDataBase db) {\n-    Type type = db.lookupType(\"DictionaryEntry\");\n-  }\n-\n-  public Klass klass() {\n-    return (Klass)Metadata.instantiateWrapperFor(literalValue());\n-  }\n-\n-  public DictionaryEntry(Address addr) {\n-    super(addr);\n-  }\n-\n-  public boolean equals(Symbol className) {\n-    InstanceKlass ik = (InstanceKlass) klass();\n-    return ik.getName().equals(className);\n-  }\n-\n-  \/* covariant return type :-(\n-  public DictionaryEntry next() {\n-    return (DictionaryEntry) super.next();\n-  }\n-  For now, let the caller cast it ..\n-  *\/\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/memory\/DictionaryEntry.java","additions":0,"deletions":69,"binary":false,"changes":69,"status":"deleted"},{"patch":"@@ -32,1 +32,0 @@\n-import sun.jvm.hotspot.memory.Dictionary;\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/InstanceKlass.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -84,13 +84,0 @@\n-  public long identityHash() {\n-    long addr_value = getAddress().asLongValue();\n-    long addr_bits =\n-      (addr_value >> (VM.getVM().getLogBytesPerWord() + 3)) & 0xffffffffL;\n-    int  length = (int)getLength();\n-    int  byte0 = getByteAt(0);\n-    int  byte1 = getByteAt(1);\n-    long id_hash = (long)idHashAndRefcount.getValue(this.addr);\n-    id_hash = (id_hash >> 16) & 0xffff;\n-    return (id_hash |\n-      ((addr_bits ^ (length << 8) ^ ((byte0 << 8) | byte1)) << 16)) & 0xffffffffL;\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Symbol.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1,81 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.utilities;\n-\n-import java.util.*;\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.types.*;\n-import sun.jvm.hotspot.runtime.*;\n-import sun.jvm.hotspot.utilities.Observable;\n-import sun.jvm.hotspot.utilities.Observer;\n-\n-\/\/ Superclass for symbol and string tables.\n-\n-public class BasicHashtable extends VMObject {\n-  static {\n-    VM.registerVMInitializedObserver(new Observer() {\n-        public void update(Observable o, Object data) {\n-          initialize(VM.getVM().getTypeDataBase());\n-        }\n-      });\n-  }\n-\n-  private static synchronized void initialize(TypeDataBase db) {\n-    Type type = db.lookupType(\"BasicHashtable<mtInternal>\");\n-    tableSizeField = type.getCIntegerField(\"_table_size\");\n-    bucketsField   = type.getAddressField(\"_buckets\");\n-    bucketSize = db.lookupType(\"HashtableBucket<mtInternal>\").getSize();\n-  }\n-\n-  \/\/ Fields\n-  private static CIntegerField tableSizeField;\n-  private static AddressField  bucketsField;\n-  private static long bucketSize;\n-\n-  \/\/ Accessors\n-  protected int tableSize() {\n-    return (int) tableSizeField.getValue(addr);\n-  }\n-\n-  protected BasicHashtableEntry bucket(int i) {\n-    if (Assert.ASSERTS_ENABLED) {\n-       Assert.that(i >= 0 && i < tableSize(), \"Invalid bucket id\");\n-    }\n-    Address tmp = bucketsField.getValue(addr);\n-    tmp = tmp.addOffsetTo(i * bucketSize);\n-    HashtableBucket bucket = VMObjectFactory.newObject(\n-                                              HashtableBucket.class, tmp);\n-    return bucket.getEntry(getHashtableEntryClass());\n-  }\n-\n-  \/\/ derived class may return Class<? extends BasicHashtableEntry>\n-  protected Class<? extends BasicHashtableEntry> getHashtableEntryClass() {\n-    return BasicHashtableEntry.class;\n-  }\n-\n-  public BasicHashtable(Address addr) {\n-    super(addr);\n-  }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/utilities\/BasicHashtable.java","additions":0,"deletions":81,"binary":false,"changes":81,"status":"deleted"},{"patch":"@@ -1,82 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.utilities;\n-\n-import java.util.*;\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.oops.Oop;\n-import sun.jvm.hotspot.oops.ObjectHeap;\n-import sun.jvm.hotspot.types.*;\n-import sun.jvm.hotspot.runtime.*;\n-import sun.jvm.hotspot.utilities.Observable;\n-import sun.jvm.hotspot.utilities.Observer;\n-\n-public class BasicHashtableEntry extends VMObject {\n-  static {\n-    VM.registerVMInitializedObserver(new Observer() {\n-        public void update(Observable o, Object data) {\n-          initialize(VM.getVM().getTypeDataBase());\n-        }\n-      });\n-  }\n-\n-  private static synchronized void initialize(TypeDataBase db) {\n-    Type type = db.lookupType(\"BasicHashtableEntry<mtInternal>\");\n-    hashField      = type.getCIntegerField(\"_hash\");\n-    nextField      = type.getAddressField(\"_next\");\n-  }\n-\n-  \/\/ Fields\n-  private static CIntegerField hashField;\n-  private static AddressField  nextField;\n-\n-  \/\/ Accessors\n-  public long hash() {\n-    return hashField.getValue(addr) & 0xFFFFFFFFL;\n-  }\n-\n-  private long nextAddressValue() {\n-    Debugger dbg = VM.getVM().getDebugger();\n-    Address nextValue = nextField.getValue(addr);\n-    return (nextValue != null) ? dbg.getAddressValue(nextValue) : 0L;\n-  }\n-\n-  public boolean isShared() {\n-    return (nextAddressValue() & 1L) != 0;\n-  }\n-\n-  public BasicHashtableEntry next() {\n-    Address nextValue = nextField.getValue(addr);\n-    Address next = (nextValue != null)? nextValue.andWithMask(-2L) : null;\n-    \/\/ using this.getClass so that return type will be as expected in\n-    \/\/ subclass context. But, because we can't use covariant return type\n-    \/\/ caller has to use this next and cast the result to correct type.\n-    return (BasicHashtableEntry) VMObjectFactory.newObject(this.getClass(), next);\n-  }\n-\n-  public BasicHashtableEntry(Address addr) {\n-    super(addr);\n-  }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/utilities\/BasicHashtableEntry.java","additions":0,"deletions":82,"binary":false,"changes":82,"status":"deleted"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.utilities;\n-\n-import java.util.*;\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.types.*;\n-import sun.jvm.hotspot.oops.*;\n-import sun.jvm.hotspot.runtime.*;\n-import sun.jvm.hotspot.utilities.Observable;\n-import sun.jvm.hotspot.utilities.Observer;\n-\n-public class Hashtable extends BasicHashtable {\n-  static {\n-    VM.registerVMInitializedObserver(new Observer() {\n-        public void update(Observable o, Object data) {\n-          initialize(VM.getVM().getTypeDataBase());\n-        }\n-      });\n-  }\n-\n-  private static synchronized void initialize(TypeDataBase db) {\n-    \/\/ just to confirm that type exists\n-    Type type = db.lookupType(\"IntptrHashtable\");\n-  }\n-\n-  protected Class<? extends HashtableEntry> getHashtableEntryClass() {\n-    return HashtableEntry.class;\n-  }\n-\n-  public long computeHash(Symbol name) {\n-    return name.identityHash();\n-  }\n-\n-  public int hashToIndex(long fullHash) {\n-    return (int) (fullHash % tableSize());\n-  }\n-\n-  public Hashtable(Address addr) {\n-    super(addr);\n-  }\n-\n-  \/\/ VM's Hashtable::hash_symbol\n-  protected static long hashSymbol(byte[] buf) {\n-    long h = 0;\n-    int s = 0;\n-    int len = buf.length;\n-    while (len-- > 0) {\n-      h = 31*h + (0xFFL & buf[s]);\n-      s++;\n-    }\n-    return h & 0xFFFFFFFFL;\n-  }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/utilities\/Hashtable.java","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.utilities;\n-\n-import java.util.*;\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.types.*;\n-import sun.jvm.hotspot.runtime.*;\n-import sun.jvm.hotspot.utilities.Observable;\n-import sun.jvm.hotspot.utilities.Observer;\n-\n-public class HashtableBucket extends VMObject {\n-  static {\n-    VM.registerVMInitializedObserver(new Observer() {\n-        public void update(Observable o, Object data) {\n-          initialize(VM.getVM().getTypeDataBase());\n-        }\n-      });\n-  }\n-\n-  private static synchronized void initialize(TypeDataBase db) {\n-    Type type = db.lookupType(\"HashtableBucket<mtInternal>\");\n-    entryField = type.getAddressField(\"_entry\");\n-  }\n-\n-  \/\/ Field\n-  private static AddressField entryField;\n-\n-  \/\/ Accessor\n-  public BasicHashtableEntry getEntry(Class<? extends BasicHashtableEntry> clazz) {\n-    Address tmp = entryField.getValue(addr);\n-    return VMObjectFactory.newObject(clazz, tmp);\n-  }\n-\n-  public BasicHashtableEntry entry() {\n-    return getEntry(HashtableEntry.class);\n-  }\n-\n-  public HashtableBucket(Address addr) {\n-    super(addr);\n-  }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/utilities\/HashtableBucket.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.utilities;\n-\n-import java.util.*;\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.oops.Oop;\n-import sun.jvm.hotspot.oops.ObjectHeap;\n-import sun.jvm.hotspot.types.*;\n-import sun.jvm.hotspot.runtime.*;\n-import sun.jvm.hotspot.utilities.Observable;\n-import sun.jvm.hotspot.utilities.Observer;\n-\n-public class HashtableEntry extends BasicHashtableEntry {\n-  static {\n-    VM.registerVMInitializedObserver(new Observer() {\n-        public void update(Observable o, Object data) {\n-          initialize(VM.getVM().getTypeDataBase());\n-        }\n-      });\n-  }\n-\n-  private static synchronized void initialize(TypeDataBase db) {\n-    Type type = db.lookupType(\"IntptrHashtableEntry\");\n-    literalField   = type.getAddressField(\"_literal\");\n-  }\n-\n-  \/\/ Fields\n-  private static AddressField      literalField;\n-\n-  \/\/ Accessors\n-  public Address literalValue() {\n-    return literalField.getValue(addr);\n-  }\n-\n-  public HashtableEntry(Address addr) {\n-    super(addr);\n-  }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/utilities\/HashtableEntry.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,0 @@\n-                \"type DictionaryEntry KlassHashtableEntry\",\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbVmStructsDump.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}