{"files":[{"patch":"@@ -52,5 +52,0 @@\n- * @apiNote In the future, if the Java language permits, {@linkplain ClassDesc}\n- * may become a {@code sealed} interface, which would prohibit subclassing except\n- * by explicitly permitted types.  Non-platform classes should not implement\n- * {@linkplain ClassDesc} directly.\n- *\n@@ -61,1 +56,1 @@\n-public interface ClassDesc\n+public sealed interface ClassDesc\n@@ -63,1 +58,3 @@\n-                TypeDescriptor.OfField<ClassDesc> {\n+                TypeDescriptor.OfField<ClassDesc>\n+        permits PrimitiveClassDescImpl,\n+                ReferenceClassDescImpl {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDesc.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -71,9 +71,0 @@\n- * @apiNote In the future, if the Java language permits, {@linkplain ConstantDesc}\n- * may become a {@code sealed} interface, which would prohibit subclassing except by\n- * explicitly permitted types.  Clients can assume that the following\n- * set of subtypes is exhaustive: {@link String}, {@link Integer},\n- * {@link Long}, {@link Float}, {@link Double}, {@link ClassDesc},\n- * {@link MethodTypeDesc}, {@link MethodHandleDesc}, and\n- * {@link DynamicConstantDesc}; this list may be extended to reflect future\n- * changes to the constant pool format as defined in JVMS 4.4.\n- *\n@@ -87,1 +78,10 @@\n-public interface ConstantDesc {\n+public sealed interface ConstantDesc\n+        permits ClassDesc,\n+                MethodHandleDesc,\n+                MethodTypeDesc,\n+                Double,\n+                DynamicConstantDesc,\n+                Float,\n+                Integer,\n+                Long,\n+                String {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ConstantDesc.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -49,5 +49,0 @@\n- * @apiNote In the future, if the Java language permits, {@linkplain DirectMethodHandleDesc}\n- * may become a {@code sealed} interface, which would prohibit subclassing except\n- * by explicitly permitted types.  Non-platform classes should not implement\n- * {@linkplain DirectMethodHandleDesc} directly.\n- *\n@@ -56,1 +51,3 @@\n-public interface DirectMethodHandleDesc extends MethodHandleDesc {\n+public sealed interface DirectMethodHandleDesc\n+        extends MethodHandleDesc\n+        permits DirectMethodHandleDescImpl {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/DirectMethodHandleDesc.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-public abstract class DynamicConstantDesc<T>\n+public abstract non-sealed class DynamicConstantDesc<T>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/DynamicConstantDesc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,5 +38,0 @@\n- * @apiNote In the future, if the Java language permits, {@linkplain MethodHandleDesc}\n- * may become a {@code sealed} interface, which would prohibit subclassing except\n- * by explicitly permitted types.  Non-platform classes should not implement\n- * {@linkplain MethodHandleDesc} directly.\n- *\n@@ -45,2 +40,4 @@\n-public interface MethodHandleDesc\n-        extends ConstantDesc {\n+public sealed interface MethodHandleDesc\n+        extends ConstantDesc\n+        permits AsTypeMethodHandleDesc,\n+                DirectMethodHandleDesc {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/MethodHandleDesc.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -37,5 +37,0 @@\n- * @apiNote In the future, if the Java language permits, {@linkplain MethodTypeDesc}\n- * may become a {@code sealed} interface, which would prohibit subclassing except\n- * by explicitly permitted types.  Non-platform classes should not implement\n- * {@linkplain MethodTypeDesc} directly.\n- *\n@@ -44,1 +39,1 @@\n-public interface MethodTypeDesc\n+public sealed interface MethodTypeDesc\n@@ -46,1 +41,2 @@\n-                TypeDescriptor.OfMethod<ClassDesc, MethodTypeDesc> {\n+                TypeDescriptor.OfMethod<ClassDesc, MethodTypeDesc>\n+        permits MethodTypeDescImpl {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/MethodTypeDesc.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"}]}