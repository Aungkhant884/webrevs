{"files":[{"patch":"@@ -0,0 +1,102 @@\n+diff --git a\/src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDesc.java b\/src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDesc.java\n+index 39b98659cf5..abc218fd774 100644\n+--- a\/src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDesc.java\n++++ b\/src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDesc.java\n+@@ -58,9 +58,11 @@ import static java.util.stream.Collectors.joining;\n+  *\n+  * @since 12\n+  *\/\n+-public interface ClassDesc\n++sealed public interface ClassDesc\n+         extends ConstantDesc,\n+-                TypeDescriptor.OfField<ClassDesc> {\n++                TypeDescriptor.OfField<ClassDesc>\n++        permits PrimitiveClassDescImpl,\n++                ReferenceClassDescImpl {\n+ \n+     \/**\n+      * Returns a {@linkplain ClassDesc} for a class or interface type,\n+diff --git a\/src\/java.base\/share\/classes\/java\/lang\/constant\/ConstantDesc.java b\/src\/java.base\/share\/classes\/java\/lang\/constant\/ConstantDesc.java\n+index 9d410e6774b..2c7d6a725f3 100644\n+--- a\/src\/java.base\/share\/classes\/java\/lang\/constant\/ConstantDesc.java\n++++ b\/src\/java.base\/share\/classes\/java\/lang\/constant\/ConstantDesc.java\n+@@ -84,7 +84,16 @@ import java.lang.invoke.VarHandle.VarHandleDesc;\n+  *\n+  * @since 12\n+  *\/\n+-public interface ConstantDesc {\n++sealed public interface ConstantDesc\n++        permits ClassDesc,\n++                MethodHandleDesc,\n++                MethodTypeDesc,\n++                Double,\n++                DynamicConstantDesc,\n++                Float,\n++                Integer,\n++                Long,\n++                String {\n+     \/**\n+      * Resolves this descriptor reflectively, emulating the resolution behavior\n+      * of JVMS 5.4.3 and the access control behavior of JVMS 5.4.4.  The resolution\n+diff --git a\/src\/java.base\/share\/classes\/java\/lang\/constant\/DirectMethodHandleDesc.java b\/src\/java.base\/share\/classes\/java\/lang\/constant\/DirectMethodHandleDesc.java\n+index 6b9e8482442..f6f555d2c98 100644\n+--- a\/src\/java.base\/share\/classes\/java\/lang\/constant\/DirectMethodHandleDesc.java\n++++ b\/src\/java.base\/share\/classes\/java\/lang\/constant\/DirectMethodHandleDesc.java\n+@@ -53,7 +53,9 @@ import static java.lang.invoke.MethodHandleInfo.REF_putStatic;\n+  *\n+  * @since 12\n+  *\/\n+-public interface DirectMethodHandleDesc extends MethodHandleDesc {\n++sealed public interface DirectMethodHandleDesc\n++        extends MethodHandleDesc\n++        permits DirectMethodHandleDescImpl {\n+     \/**\n+      * Kinds of method handles that can be described with {@linkplain DirectMethodHandleDesc}.\n+      *\n+diff --git a\/src\/java.base\/share\/classes\/java\/lang\/constant\/DynamicConstantDesc.java b\/src\/java.base\/share\/classes\/java\/lang\/constant\/DynamicConstantDesc.java\n+index 96d7677a567..a1f6a8f6408 100644\n+--- a\/src\/java.base\/share\/classes\/java\/lang\/constant\/DynamicConstantDesc.java\n++++ b\/src\/java.base\/share\/classes\/java\/lang\/constant\/DynamicConstantDesc.java\n+@@ -56,7 +56,7 @@ import static java.util.stream.Collectors.joining;\n+  *\n+  * @since 12\n+  *\/\n+-public abstract class DynamicConstantDesc<T>\n++non-sealed public abstract class DynamicConstantDesc<T>\n+         implements ConstantDesc {\n+ \n+     private final DirectMethodHandleDesc bootstrapMethod;\n+diff --git a\/src\/java.base\/share\/classes\/java\/lang\/constant\/MethodHandleDesc.java b\/src\/java.base\/share\/classes\/java\/lang\/constant\/MethodHandleDesc.java\n+index a066114de8f..b10eac623c8 100644\n+--- a\/src\/java.base\/share\/classes\/java\/lang\/constant\/MethodHandleDesc.java\n++++ b\/src\/java.base\/share\/classes\/java\/lang\/constant\/MethodHandleDesc.java\n+@@ -42,8 +42,10 @@ import static java.lang.constant.DirectMethodHandleDesc.Kind.CONSTRUCTOR;\n+  *\n+  * @since 12\n+  *\/\n+-public interface MethodHandleDesc\n+-        extends ConstantDesc {\n++sealed public interface MethodHandleDesc\n++        extends ConstantDesc\n++        permits AsTypeMethodHandleDesc,\n++                DirectMethodHandleDesc {\n+ \n+     \/**\n+      * Creates a {@linkplain MethodHandleDesc} corresponding to an invocation of a\n+diff --git a\/src\/java.base\/share\/classes\/java\/lang\/constant\/MethodTypeDesc.java b\/src\/java.base\/share\/classes\/java\/lang\/constant\/MethodTypeDesc.java\n+index d5ab684e1d8..55ccbd31071 100644\n+--- a\/src\/java.base\/share\/classes\/java\/lang\/constant\/MethodTypeDesc.java\n++++ b\/src\/java.base\/share\/classes\/java\/lang\/constant\/MethodTypeDesc.java\n+@@ -41,9 +41,10 @@ import java.util.stream.Stream;\n+  *\n+  * @since 12\n+  *\/\n+-public interface MethodTypeDesc\n++sealed public interface MethodTypeDesc\n+         extends ConstantDesc,\n+-                TypeDescriptor.OfMethod<ClassDesc, MethodTypeDesc> {\n++                TypeDescriptor.OfMethod<ClassDesc, MethodTypeDesc>\n++        permits MethodTypeDescImpl {\n+     \/**\n+      * Creates a {@linkplain MethodTypeDesc} given a method descriptor string.\n+      *\n","filename":"constants.patch","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -52,5 +52,0 @@\n- * @apiNote In the future, if the Java language permits, {@linkplain ClassDesc}\n- * may become a {@code sealed} interface, which would prohibit subclassing except\n- * by explicitly permitted types.  Non-platform classes should not implement\n- * {@linkplain ClassDesc} directly.\n- *\n@@ -61,1 +56,1 @@\n-public interface ClassDesc\n+sealed public interface ClassDesc\n@@ -63,1 +58,3 @@\n-                TypeDescriptor.OfField<ClassDesc> {\n+                TypeDescriptor.OfField<ClassDesc>\n+        permits PrimitiveClassDescImpl,\n+                ReferenceClassDescImpl {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDesc.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -71,9 +71,0 @@\n- * @apiNote In the future, if the Java language permits, {@linkplain ConstantDesc}\n- * may become a {@code sealed} interface, which would prohibit subclassing except by\n- * explicitly permitted types.  Clients can assume that the following\n- * set of subtypes is exhaustive: {@link String}, {@link Integer},\n- * {@link Long}, {@link Float}, {@link Double}, {@link ClassDesc},\n- * {@link MethodTypeDesc}, {@link MethodHandleDesc}, and\n- * {@link DynamicConstantDesc}; this list may be extended to reflect future\n- * changes to the constant pool format as defined in JVMS 4.4.\n- *\n@@ -87,1 +78,10 @@\n-public interface ConstantDesc {\n+sealed public interface ConstantDesc\n+        permits ClassDesc,\n+                MethodHandleDesc,\n+                MethodTypeDesc,\n+                Double,\n+                DynamicConstantDesc,\n+                Float,\n+                Integer,\n+                Long,\n+                String {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ConstantDesc.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -49,5 +49,0 @@\n- * @apiNote In the future, if the Java language permits, {@linkplain DirectMethodHandleDesc}\n- * may become a {@code sealed} interface, which would prohibit subclassing except\n- * by explicitly permitted types.  Non-platform classes should not implement\n- * {@linkplain DirectMethodHandleDesc} directly.\n- *\n@@ -56,1 +51,3 @@\n-public interface DirectMethodHandleDesc extends MethodHandleDesc {\n+sealed public interface DirectMethodHandleDesc\n+        extends MethodHandleDesc\n+        permits DirectMethodHandleDescImpl {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/DirectMethodHandleDesc.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-public abstract class DynamicConstantDesc<T>\n+non-sealed public abstract class DynamicConstantDesc<T>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/DynamicConstantDesc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,5 +38,0 @@\n- * @apiNote In the future, if the Java language permits, {@linkplain MethodHandleDesc}\n- * may become a {@code sealed} interface, which would prohibit subclassing except\n- * by explicitly permitted types.  Non-platform classes should not implement\n- * {@linkplain MethodHandleDesc} directly.\n- *\n@@ -45,2 +40,4 @@\n-public interface MethodHandleDesc\n-        extends ConstantDesc {\n+sealed public interface MethodHandleDesc\n+        extends ConstantDesc\n+        permits AsTypeMethodHandleDesc,\n+                DirectMethodHandleDesc {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/MethodHandleDesc.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -37,5 +37,0 @@\n- * @apiNote In the future, if the Java language permits, {@linkplain MethodTypeDesc}\n- * may become a {@code sealed} interface, which would prohibit subclassing except\n- * by explicitly permitted types.  Non-platform classes should not implement\n- * {@linkplain MethodTypeDesc} directly.\n- *\n@@ -44,1 +39,1 @@\n-public interface MethodTypeDesc\n+sealed public interface MethodTypeDesc\n@@ -46,1 +41,2 @@\n-                TypeDescriptor.OfMethod<ClassDesc, MethodTypeDesc> {\n+                TypeDescriptor.OfMethod<ClassDesc, MethodTypeDesc>\n+        permits MethodTypeDescImpl {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/MethodTypeDesc.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"}]}