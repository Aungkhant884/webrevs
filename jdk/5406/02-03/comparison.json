{"files":[{"patch":"@@ -397,3 +397,3 @@\n-     * @param fromType Type to convert from\n-     * @param toType Type to convert to\n-     * @return True if a sidecast exists from 'fromType' to 'toType'\n+     * @param aType first type\n+     * @param anotherType second type\n+     * @return True if 'aType' is not disjoint from 'anotherType'\n@@ -401,2 +401,2 @@\n-    private boolean sideCastExists(Class<?> fromType, Class<?> toType) {\n-        if (toType.isInterface() && fromType.isInterface()) {\n+    private boolean sideCastExists(Class<?> aType, Class<?> anotherType) {\n+        if (aType.isAssignableFrom(anotherType)) {\n@@ -404,6 +404,20 @@\n-        } else if (toType.isInterface()) {\n-            return ((fromType.getModifiers() & Modifier.FINAL) == 0);\n-        } else if (fromType.isInterface()) {\n-            return ((toType.getModifiers() & Modifier.FINAL) == 0);\n-        } else if (toType.isArray() && fromType.isArray()) {\n-            return sideCastExists(fromType.getComponentType(), toType.getComponentType());\n+        }\n+        \/\/ if non is sealed\n+        if (!anotherType.isSealed() && !aType.isSealed()) {\n+            if (anotherType.isInterface() && aType.isInterface()) {\n+                return true;\n+            } else if (anotherType.isInterface()) {\n+                return ((aType.getModifiers() & Modifier.FINAL) == 0);\n+            } else if (aType.isInterface()) {\n+                return ((anotherType.getModifiers() & Modifier.FINAL) == 0);\n+            } else if (anotherType.isArray() && aType.isArray()) {\n+                return sideCastExists(aType.getComponentType(), anotherType.getComponentType());\n+            }\n+        } else {\n+            Class<?> sealedOne = aType.isSealed() ? aType : anotherType;\n+            Class<?> other = sealedOne == aType ? anotherType : aType;\n+            for (Class<?> subclass : sealedOne.getPermittedSubclasses()) {\n+                if (sideCastExists(subclass, other)) {\n+                    return true;\n+                }\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/AbstractValidatingLambdaMetafactory.java","additions":25,"deletions":11,"binary":false,"changes":36,"status":"modified"}]}