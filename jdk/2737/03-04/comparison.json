{"files":[{"patch":"@@ -50,1 +50,0 @@\n-#include \"memory\/dynamicArchive.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4260,0 +4260,1 @@\n+  ResourceMark rm;\n@@ -4266,25 +4267,6 @@\n-    ClassLoaderData* loader_data = class_loader_data();\n-    if (!SystemDictionaryShared::is_sharing_possible(loader_data)) {\n-      return;\n-    }\n-    bool skip = false;\n-    if (is_shared()) {\n-      assert(stream == NULL, \"shared class with stream\");\n-      if (is_hidden()) {\n-        \/\/ Don't include archived lambda proxy class in the classlist.\n-        assert(!is_non_strong_hidden(), \"unexpected non-strong hidden class\");\n-        return;\n-      }\n-    } else {\n-      assert(stream != NULL, \"non-shared class without stream\");\n-      \/\/ skip hidden class and unsafe anonymous class.\n-      if ( is_hidden() || unsafe_anonymous_host() != NULL) {\n-        return;\n-      }\n-      oop class_loader = loader_data->class_loader();\n-      if (class_loader == NULL || SystemDictionary::is_platform_class_loader(class_loader)) {\n-        \/\/ For the boot and platform class loaders, skip classes that are not found in the\n-        \/\/ java runtime image, such as those found in the --patch-module entries.\n-        \/\/ These classes can't be loaded from the archive during runtime.\n-        if (!stream->from_boot_loader_modules_image() && strncmp(stream->source(), \"jrt:\", 4) != 0) {\n-          skip = true;\n+    if (is_shareable()) {\n+      bool skip = false;\n+      if (is_shared()) {\n+        if (stream == nullptr) {\n+          tty->print_cr(\"%s: shared class with stream?\", name()->as_C_string());\n+          return; \/\/ stream is nullptr will cause below operation fail.\n@@ -4292,0 +4274,10 @@\n+      } else {\n+        if (stream != nullptr) {\n+          oop class_loader = class_loader_data()->class_loader();\n+          if (class_loader == NULL || SystemDictionary::is_platform_class_loader(class_loader)) {\n+            \/\/ For the boot and platform class loaders, skip classes that are not found in the\n+            \/\/ java runtime image, such as those found in the --patch-module entries.\n+            \/\/ These classes can't be loaded from the archive during runtime.\n+            if (!stream->from_boot_loader_modules_image() && strncmp(stream->source(), \"jrt:\", 4) != 0) {\n+              skip = true;\n+            }\n@@ -4293,4 +4285,9 @@\n-        if (class_loader == NULL && ClassLoader::contains_append_entry(stream->source())) {\n-          \/\/ .. but don't skip the boot classes that are loaded from -Xbootclasspath\/a\n-          \/\/ as they can be loaded from the archive during runtime.\n-          skip = false;\n+            if (class_loader == NULL && ClassLoader::contains_append_entry(stream->source())) {\n+              \/\/ .. but don't skip the boot classes that are loaded from -Xbootclasspath\/a\n+              \/\/ as they can be loaded from the archive during runtime.\n+              skip = false;\n+            }\n+          }\n+        } else {\n+          warning(\"non-shared class without stream, skipped\");\n+          return;\n@@ -4299,9 +4296,8 @@\n-    }\n-    ResourceMark rm;\n-    if (skip) {\n-      tty->print_cr(\"skip writing class %s from source %s to classlist file\",\n-                    name()->as_C_string(), stream->source());\n-    } else {\n-      ClassListWriter w;\n-      w.stream()->print_cr(\"%s\", name()->as_C_string());\n-      w.stream()->flush();\n+      if (skip) {\n+        tty->print_cr(\"skip writing class %s from source %s to classlist file\",\n+                      name()->as_C_string(), stream->source());\n+      } else {\n+        ClassListWriter w;\n+        w.stream()->print_cr(\"%s\", name()->as_C_string());\n+        w.stream()->flush();\n+      }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":34,"deletions":38,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -3766,1 +3766,1 @@\n-  assert(UseSharedSpaces && RecordDynamicDumpInfo, \"Sanity check\");\n+  assert(UseSharedSpaces && RecordDynamicDumpInfo, \"already checked in arguments.cpp?\");\n@@ -3774,1 +3774,1 @@\n-  assert(ArchiveClassesAtExit == nullptr, \"Sanity check\");\n+  assert(ArchiveClassesAtExit == nullptr, \"already checked in arguments.cpp?\");\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1129,1 +1129,0 @@\n-  output()->print_cr(\"Call CDS.dumpSharedArchive(%s, %s)\", scmd, (file == NULL ? \"null\" : file));\n@@ -1135,7 +1134,0 @@\n-  \/\/ Upon exception, show stack trace.\n-  if (HAS_PENDING_EXCEPTION) {\n-    Handle throwable(THREAD, PENDING_EXCEPTION);\n-    CLEAR_PENDING_EXCEPTION;\n-    java_lang_Throwable::print_stack_trace(throwable, output());\n-    output()->cr();\n-  }\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.io.PrintStream;\n@@ -210,1 +211,1 @@\n-    private static void outputStdStream(InputStream stream) {\n+    private static void outputStdStream(InputStream stream, String fileName) {\n@@ -214,0 +215,1 @@\n+\n@@ -215,0 +217,1 @@\n+            PrintStream prt = new PrintStream(fileName);\n@@ -216,1 +219,1 @@\n-                System.out.println(line);\n+                prt.println(line);\n@@ -249,0 +252,1 @@\n+        String currentPid = String.valueOf(ProcessHandle.current().pid());\n@@ -250,2 +254,1 @@\n-            \"java_pid\" + ProcessHandle.current().pid() + (isStatic ? \"_static.jsa\" : \"_dynamic.jsa\");\n-        System.out.println((isStatic ? \"Static\" : \" Dynamic\") + \" dump to file \" + archiveFile);\n+            \"java_pid\" + currentPid + (isStatic ? \"_static.jsa\" : \"_dynamic.jsa\");\n@@ -293,1 +296,2 @@\n-            \/\/ Drain stdout in a separate thread.\n+            \/\/ Drain stdout to a file in a separate thread.\n+            String stdOutFile = \"java_pid\" + proc.pid() + \"_stdout.txt\";\n@@ -295,2 +299,1 @@\n-                    System.out.println(\"Dumping process \" + proc.pid() + \" Stdout: \");\n-                    outputStdStream(proc.getInputStream());\n+                    outputStdStream(proc.getInputStream(), stdOutFile);\n@@ -299,1 +302,2 @@\n-            \/\/ Drain stderr in a separate thread.\n+            \/\/ Drain stderr to a file in a separate thread.\n+            String stdErrFile = \"java_pid\" + proc.pid() + \"_stderr.txt\";\n@@ -301,2 +305,1 @@\n-                    System.out.println(\"Dumping process \" + proc.pid() + \" Stdout: \");\n-                    outputStdStream(proc.getErrorStream());\n+                    outputStdStream(proc.getErrorStream(), stdErrFile);\n@@ -306,0 +309,12 @@\n+            \/\/ done, delete classlist file.\n+            if (fileList.exists()) {\n+                fileList.delete();\n+            }\n+            \/\/ Check if archive has been successfully dumped. We won't reach here if exception happens.\n+            \/\/ Throw exception if file is not created.\n+            if (!fileArchive.exists()) {\n+                throw new RuntimeException(\"Archive file \" + archiveFile +\n+                                           \" is not created, please check stdout file \" +\n+                                            stdOutFile + \" or stderr file \" +\n+                                            stdErrFile + \" for more detail\");\n+            }\n@@ -308,0 +323,5 @@\n+            if (!fileArchive.exists()) {\n+                throw new RuntimeException(\"Archive file \" + archiveFile +\n+                                           \" is not created, please check process \" +\n+                                           currentPid + \" output for more detail\");\n+            }\n@@ -309,5 +329,2 @@\n-        \/\/ Check if archive has been successfully dumped. We won't reach here if exception happens.\n-        \/\/ Throw exception if file is not created.\n-        if (!fileArchive.exists()) {\n-            throw new RuntimeException(\"Archive file \" + archiveFile + \" is not created\");\n-        }\n+        \/\/ Everyting goes well, print out the file name.\n+        System.out.println((isStatic ? \"Static\" : \" Dynamic\") + \" dump to file \" + archiveFile);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/CDS.java","additions":32,"deletions":15,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -327,0 +327,1 @@\n+ -runtime\/cds\/appcds\/jcmd\/JCmdTest.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-        \/\/ 3. Test static dump with flags which no dump will happen.\n+        \/\/ 3. Test static dump with flags with which dumping should fail\n@@ -197,1 +197,1 @@\n-        print2ln(\"3. Test static dump with flags which will no dump will happen.\");\n+        print2ln(\"3. Test static dump with flags with which dumping should fail.\");\n@@ -199,1 +199,1 @@\n-            app  = createLingeredApp(\"-cp\", jarFile, flag, \"-XX:SharedArchiveFile=tmp.jsa\");\n+            app = createLingeredApp(\"-cp\", jarFile, flag, \"-XX:SharedArchiveFile=tmp.jsa\");\n@@ -213,1 +213,1 @@\n-            app  = createLingeredApp(\"-cp\", jarFile, flag);\n+            app = createLingeredApp(\"-cp\", jarFile, flag);\n@@ -222,1 +222,1 @@\n-        app  = createLingeredApp(\"-Xshare:off\", \"-cp\", jarFile);\n+        app = createLingeredApp(\"-Xshare:off\", \"-cp\", jarFile);\n@@ -227,3 +227,9 @@\n-        \/\/ 6. Test dynamic dump with -XX:+RecordDynamicDumpInfo.\n-        print2ln(\"6. Test dynamic dump with -XX:+RecordDynamicDumpInfo.\");\n-        app  = createLingeredApp(\"-cp\", jarFile, \"-XX:+RecordDynamicDumpInfo\");\n+        \/\/ 6. Test static with --limit-modules java.base.\n+        print2ln(\"6. Test static with --limit-modules java.base.\");\n+        app = createLingeredApp(\"--limit-modules\", \"java.base\", \"-cp\", jarFile);\n+        pid = app.getPid();\n+        test(SUBCMD_STATIC_DUMP, null, pid, EXPECT_FAIL);\n+\n+        \/\/ 7. Test dynamic dump with -XX:+RecordDynamicDumpInfo.\n+        print2ln(\"7. Test dynamic dump with -XX:+RecordDynamicDumpInfo.\");\n+        app = createLingeredApp(\"-cp\", jarFile, \"-XX:+RecordDynamicDumpInfo\");\n@@ -233,2 +239,2 @@\n-        \/\/ 7. Test dynamic dump twice to same process.\n-        print2ln(\"7. Test dynamic dump second time to the same process.\");\n+        \/\/ 8. Test dynamic dump twice to same process.\n+        print2ln(\"8. Test dynamic dump second time to the same process.\");\n@@ -238,3 +244,3 @@\n-        \/\/ 8. Test dynamic dump with -XX:-RecordDynamicDumpInfo.\n-        print2ln(\"8. Test dynamic dump with -XX:-RecordDynamicDumpInfo.\");\n-        app  = createLingeredApp(\"-cp\", jarFile);\n+        \/\/ 9. Test dynamic dump with -XX:-RecordDynamicDumpInfo.\n+        print2ln(\"9. Test dynamic dump with -XX:-RecordDynamicDumpInfo.\");\n+        app = createLingeredApp(\"-cp\", jarFile);\n@@ -245,2 +251,2 @@\n-        \/\/ 9. Test dynamic dump with default archive name (null).\n-        print2ln(\"9. Test dynamic dump with default archive name (null).\");\n+        \/\/ 10. Test dynamic dump with default archive name (null).\n+        print2ln(\"10. Test dynamic dump with default archive name (null).\");\n@@ -250,0 +256,15 @@\n+        app.stopApp();\n+\n+        \/\/ 11. Test dynamic dump with flags -XX:+RecordDynamicDumpInfo -XX:-DynamicDumpSharedSpaces.\n+        print2ln(\"11. Test dynamic dump with flags -XX:+RecordDynamicDumpInfo -XX:-DynamicDumpSharedSpaces.\");\n+        app = createLingeredApp(\"-cp\", jarFile, \"-XX:+RecordDynamicDumpInfo\", \"-XX:-DynamicDumpSharedSpaces\");\n+        pid = app.getPid();\n+        test(SUBCMD_DYNAMIC_DUMP, null, pid, EXPECT_PASS);\n+        app.stopApp();\n+\n+        \/\/ 12. Test dynamic dump with flags -XX:-DynamicDumpSharedSpaces -XX:+RecordDynamicDumpInfo.\n+        print2ln(\"12. Test dynamic dump with flags -XX:-DynamicDumpSharedSpaces -XX:+RecordDynamicDumpInfo.\");\n+        app = createLingeredApp(\"-cp\", jarFile, \"-XX:-DynamicDumpSharedSpaces\", \"-XX:+RecordDynamicDumpInfo\");\n+        pid = app.getPid();\n+        test(SUBCMD_DYNAMIC_DUMP, null, pid, EXPECT_PASS);\n+        app.stopApp();\n@@ -251,2 +272,2 @@\n-        \/\/ 10. Test dynamic dump with -XX:ArchiveClassAtExit will fail.\n-        print2ln(\"10. Test dynamic dump with -XX:ArchiveClassAtExit will fail.\");\n+        \/\/ 13. Test dynamic dump with -XX:ArchiveClassAtExit will fail.\n+        print2ln(\"13. Test dynamic dump with -XX:ArchiveClassAtExit will fail.\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTest.java","additions":38,"deletions":17,"binary":false,"changes":55,"status":"modified"}]}