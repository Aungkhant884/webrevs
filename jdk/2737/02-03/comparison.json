{"files":[{"patch":"@@ -1124,1 +1124,1 @@\n-  Klass*  cds_klass = SystemDictionary::resolve_or_null(cds_name, THREAD);\n+  Klass*  cds_klass = SystemDictionary::resolve_or_fail(cds_name, true \/*throw error*\/,  CHECK);\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import java.io.InputStream;\n+import java.io.IOException;\n@@ -208,0 +210,24 @@\n+    private static void outputStdStream(InputStream stream) {\n+        String line;\n+        InputStreamReader isr = new InputStreamReader(stream);\n+        BufferedReader rdr = new BufferedReader(isr);\n+        try {\n+            while((line = rdr.readLine()) != null) {\n+                System.out.println(line);\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"IOExeption happens during drain stream \" + e.getMessage());\n+        }\n+    }\n+\n+    private static String[] excludeFlags = {\n+         \"-XX:DumpLoadedClassList=\",\n+         \"-XX:+DumpSharedSpaces\",\n+         \"-XX:+DynamicDumpSharedSpaces\",\n+         \"-XX:+RecordDynamicDumpInfo\",\n+         \"-Xshare:\",\n+         \"-XX:SharedClassListFile=\",\n+         \"-XX:SharedArchiveFile=\",\n+         \"-XX:ArchiveClassesAtExit=\",\n+         \"-XX:+UseSharedSpaces\",\n+         \"-XX:+RequireSharedSpaces\"};\n@@ -209,4 +235,6 @@\n-       return testStr.contains(\"-XX:DumpLoadedClassList=\")     ||\n-              testStr.contains(\"-XX:+DumpSharedSpaces\")        ||\n-              testStr.contains(\"-XX:+DynamicDumpSharedSpaces\") ||\n-              testStr.contains(\"-XX:+RecordDynamicDumpInfo\");\n+       for (String e : excludeFlags) {\n+           if (testStr.contains(e)) {\n+               return true;\n+           }\n+       }\n+       return false;\n@@ -217,1 +245,1 @@\n-    * @param isStatic indicates dump static archive of dynnamic archive.\n+    * @param isStatic true for dump static archive or false for dynnamic archive.\n@@ -221,1 +249,0 @@\n-        boolean DEBUG =  System.getProperty(\"CDS.Debug\") == \"true\";\n@@ -224,2 +251,6 @@\n-        if (DEBUG) {\n-            System.out.println((isStatic ? \"Static\" : \" Dynamic\") + \" dump to file \" + archiveFile);\n+        System.out.println((isStatic ? \"Static\" : \" Dynamic\") + \" dump to file \" + archiveFile);\n+\n+        \/\/ delete if archive file aready exists\n+        File fileArchive = new File(archiveFile);\n+        if (fileArchive.exists()) {\n+            fileArchive.delete();\n@@ -229,0 +260,4 @@\n+            File fileList = new File(listFile);\n+            if (fileList.exists()) {\n+                fileList.delete();\n+            }\n@@ -247,6 +282,3 @@\n-            if (DEBUG) {\n-                System.out.println(\"Static dump cmd: \");\n-                for (String s : cmds) {\n-                    System.out.print(s + \" \");\n-                }\n-                System.out.println(\"\");\n+            System.out.println(\"Static dump cmd: \");\n+            for (String s : cmds) {\n+                System.out.print(s + \" \");\n@@ -254,0 +286,1 @@\n+            System.out.println(\"\");\n@@ -255,1 +288,2 @@\n-            \/\/ Do not take parent env which will cause dumping fail.\n+            \/\/ Do not take parent env which will cause check error on empty directory if\n+            \/\/ classpath carried in envp.\n@@ -258,8 +292,0 @@\n-            if (DEBUG) {\n-                System.out.println(\"Dumping process \" + proc.pid() + \" Stdout: \");\n-                String line;\n-                InputStreamReader isr = new InputStreamReader(proc.getInputStream());\n-                BufferedReader rdr = new BufferedReader(isr);\n-                while((line = rdr.readLine()) != null) {\n-                    System.out.println(line);\n-                }\n@@ -267,7 +293,12 @@\n-                System.out.println(\"Dumping process \" + proc.pid() + \" Stderr: \");\n-                isr = new InputStreamReader(proc.getErrorStream());\n-                rdr = new BufferedReader(isr);\n-                while((line = rdr.readLine()) != null) {\n-                    System.out.println(line);\n-                }\n-            }\n+            \/\/ Drain stdout in a separate thread.\n+            new Thread( ()-> {\n+                    System.out.println(\"Dumping process \" + proc.pid() + \" Stdout: \");\n+                    outputStdStream(proc.getInputStream());\n+                }).start();\n+\n+            \/\/ Drain stderr in a separate thread.\n+            new Thread( ()-> {\n+                    System.out.println(\"Dumping process \" + proc.pid() + \" Stdout: \");\n+                    outputStdStream(proc.getErrorStream());\n+                }).start();\n+\n@@ -278,0 +309,5 @@\n+        \/\/ Check if archive has been successfully dumped. We won't reach here if exception happens.\n+        \/\/ Throw exception if file is not created.\n+        if (!fileArchive.exists()) {\n+            throw new RuntimeException(\"Archive file \" + archiveFile + \" is not created\");\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/CDS.java","additions":66,"deletions":30,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.io.IOException;\n@@ -107,0 +108,5 @@\n+            Process proc = app.getProcess();\n+            if (e instanceof IOException && proc.exitValue() == 0) {\n+                \/\/ Process started and exit normally.\n+                return null;\n+            }\n@@ -113,1 +119,2 @@\n-    private static void test(String jcmdSub, String archiveFile, long pid, boolean expectOK) throws Exception {\n+    private static void test(String jcmdSub, String archiveFile,\n+                             long pid, boolean expectOK) throws Exception {\n@@ -148,1 +155,19 @@\n-    private static void testStatic() throws Exception {\n+    \/\/ Those two flags will not create a successful LingeredApp.\n+    private static String[] noDumpFlags  =\n+        {\"-XX:+DumpSharedSpaces\",\n+         \"-Xshare:dump\"};\n+    \/\/ Those flags will be excluded in static dumping.\n+    private static String[] excludeFlags =\n+        {\"-XX:DumpLoadedClassList=AnyFileName.classlist\",\n+         \"-XX:+UseSharedSpaces\",\n+         \"-XX:+RecordDynamicDumpInfo\",\n+         \"-XX:+RequireSharedSpaces\",\n+         \"-XX:+DynamicDumpSharedSpaces\",\n+         \"-XX:ArchiveClassesAtExit=tmp.jsa\",\n+         \"-Xshare:auto\",\n+         \"-Xshare:on\"};\n+\n+    \/\/ Times to dump cds against same process.\n+    private static final int ITERATION_TIMES = 2;\n+\n+    private static void test() throws Exception {\n@@ -152,2 +177,0 @@\n-        ArrayList<String> vmArgs = new ArrayList<String>();\n-\n@@ -156,3 +179,1 @@\n-        vmArgs.add(\"-cp\");\n-        vmArgs.add(jarFile);\n-        app  = createLingeredApp(vmArgs.toArray(new String[0]));\n+        app  = createLingeredApp(\"-cp\", jarFile);\n@@ -160,1 +181,1 @@\n-        for (int i = 0; i < 3; i++) {\n+        for (int i = 0; i < ITERATION_TIMES; i++) {\n@@ -164,10 +185,0 @@\n-        vmArgs.clear();\n-\n-        \/\/ 2. Test static dump with -XX:+RecordDynamicDumpInfo to create archive multiple times\n-        print2ln(\"2. Test static dump with -XX:+RecordDynamicDumpInfo to create archive multiple times.\");\n-        vmArgs.add(\"-cp\");\n-        vmArgs.add(jarFile);\n-        vmArgs.add(\"-Xlog:class+path\");\n-        vmArgs.add(\"-XX:+RecordDynamicDumpInfo\");\n-        app = createLingeredApp(vmArgs.toArray(new String[0]));\n-        pid = app.getPid();\n@@ -175,1 +186,5 @@\n-        for (int i = 0; i < 3; i++) {\n+        \/\/ 2. Test static dump with given file name.\n+        print2ln(\"2. Test static dump with given file name.\");\n+        app = createLingeredApp(\"-cp\", jarFile);\n+        pid = app.getPid();\n+        for (int i = 0; i < ITERATION_TIMES; i++) {\n@@ -179,1 +194,0 @@\n-    }\n@@ -181,9 +195,36 @@\n-    private static void testDynamic() throws Exception {\n-        ArrayList<String> vmArgs = new ArrayList<String>();\n-        \/\/ 3. Test dynamic dump with -XX:+RecordDynamicDumpInfo.\n-        print2ln(\"3. Test dynamic dump with -XX:+RecordDynamicDumpInfo.\");\n-        vmArgs.add(\"-cp\");\n-        vmArgs.add(jarFile);\n-        vmArgs.add(\"-XX:+RecordDynamicDumpInfo\");\n-        LingeredApp app  = createLingeredApp(vmArgs.toArray(new String[0]));\n-        long pid = app.getPid();\n+        \/\/ 3. Test static dump with flags which no dump will happen.\n+        \/\/    This test will result classes.jsa in default server dir if -XX:SharedArchiveFile= not set.\n+        print2ln(\"3. Test static dump with flags which will no dump will happen.\");\n+        for (String flag : noDumpFlags) {\n+            app  = createLingeredApp(\"-cp\", jarFile, flag, \"-XX:SharedArchiveFile=tmp.jsa\");\n+            \/\/ Following should not be executed.\n+            if (app != null && app.getProcess().isAlive()) {\n+                pid = app.getPid();\n+                test(SUBCMD_STATIC_DUMP, null, pid, EXPECT_FAIL);\n+                app.stopApp();\n+                \/\/ if above executed OK, mean failed.\n+                throw new RuntimeException(\"Should not dump successful with \" + flag);\n+            }\n+        }\n+\n+        \/\/ 4. Test static dump with flags which will be filtered before dumping.\n+        print2ln(\"4. Test static dump with flags which will be filtered before dumping.\");\n+        for (String flag : excludeFlags) {\n+            app  = createLingeredApp(\"-cp\", jarFile, flag);\n+            pid = app.getPid();\n+            test(SUBCMD_STATIC_DUMP, null, pid, EXPECT_PASS);\n+            app.stopApp();\n+        }\n+\n+\n+        \/\/ 5. Test static with -Xshare:off will be OK to dump.\n+        print2ln(\"5. Test static with -Xshare:off will be OK to dump.\");\n+        app  = createLingeredApp(\"-Xshare:off\", \"-cp\", jarFile);\n+        pid = app.getPid();\n+        test(SUBCMD_STATIC_DUMP, null, pid, EXPECT_PASS);\n+        app.stopApp();\n+\n+        \/\/ 6. Test dynamic dump with -XX:+RecordDynamicDumpInfo.\n+        print2ln(\"6. Test dynamic dump with -XX:+RecordDynamicDumpInfo.\");\n+        app  = createLingeredApp(\"-cp\", jarFile, \"-XX:+RecordDynamicDumpInfo\");\n+        pid = app.getPid();\n@@ -191,2 +232,3 @@\n-        \/\/ 4. Test dynamic dump twice to same process\n-        print2ln(\"4. Test dynamic dump second time to the same process.\");\n+\n+        \/\/ 7. Test dynamic dump twice to same process.\n+        print2ln(\"7. Test dynamic dump second time to the same process.\");\n@@ -195,9 +237,20 @@\n-        vmArgs.clear();\n-        \/\/ 5. Test dynamic dump with -XX:ArchiveClassAtExit will fail.\n-        print2ln(\"5. Test dynamic dump with -XX:ArchiveClassAtExit will fail.\");\n-        vmArgs.add(\"-Xshare:auto\");\n-        vmArgs.add(\"-XX:+RecordDynamicDumpInfo\");\n-        vmArgs.add(\"-XX:ArchiveClassesAtExit=noexist.jsa\");\n-        vmArgs.add(\"-cp\");\n-        vmArgs.add(jarFile);\n-        app = createLingeredApp(vmArgs.toArray(new String[0]));\n+\n+        \/\/ 8. Test dynamic dump with -XX:-RecordDynamicDumpInfo.\n+        print2ln(\"8. Test dynamic dump with -XX:-RecordDynamicDumpInfo.\");\n+        app  = createLingeredApp(\"-cp\", jarFile);\n+        pid = app.getPid();\n+        test(SUBCMD_DYNAMIC_DUMP, DYNAMIC_DUMP_FILE + \"01\", pid, EXPECT_FAIL);\n+        app.stopApp();\n+\n+        \/\/ 9. Test dynamic dump with default archive name (null).\n+        print2ln(\"9. Test dynamic dump with default archive name (null).\");\n+        app = createLingeredApp(\"-cp\", jarFile, \"-XX:+RecordDynamicDumpInfo\");\n+        pid = app.getPid();\n+        test(SUBCMD_DYNAMIC_DUMP, null, pid, EXPECT_PASS);\n+\n+        \/\/ 10. Test dynamic dump with -XX:ArchiveClassAtExit will fail.\n+        print2ln(\"10. Test dynamic dump with -XX:ArchiveClassAtExit will fail.\");\n+        app = createLingeredApp(\"-cp\", jarFile,\n+                                \"-Xshare:auto\",\n+                                \"-XX:+RecordDynamicDumpInfo\",\n+                                \"-XX:ArchiveClassesAtExit=AnyName.jsa\");\n@@ -218,2 +271,1 @@\n-        testStatic();\n-        testDynamic();\n+        test();\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTest.java","additions":94,"deletions":42,"binary":false,"changes":136,"status":"modified"}]}