{"files":[{"patch":"@@ -3641,1 +3641,1 @@\n-  log_to_classlist(cfs);\n+  log_to_classlist();\n@@ -4240,11 +4240,12 @@\n-  if (is_shared()) {\n-    if (is_hidden()) {\n-      \/\/ Don't include archived lambda proxy class in the classlist.\n-      assert(!is_non_strong_hidden(), \"unexpected non-strong hidden class\");\n-      return false;\n-    }\n-  } else {\n-    \/\/ skip hidden class and unsafe anonymous class.\n-    if (is_hidden() || unsafe_anonymous_host() != NULL) {\n-      return false;\n-    }\n+\n+  if (is_hidden() || unsafe_anonymous_host() != NULL) {\n+    tty->print_cr(\"skip writing %s class %s to classlist file\",\n+                  (is_hidden() ? \"hidden\" : \"unsafe anonymous host\"),\n+                  name()->as_C_string());\n+    return false;\n+  }\n+\n+  if (module()->is_patched()) {\n+    tty->print_cr(\"skip writing class %s to classlist file, module patched\",\n+                  name()->as_C_string());\n+    return false;\n@@ -4258,1 +4259,1 @@\n-void InstanceKlass::log_to_classlist(const ClassFileStream* stream) const {\n+void InstanceKlass::log_to_classlist() const {\n@@ -4268,36 +4269,3 @@\n-      bool skip = false;\n-      if (is_shared()) {\n-        if (stream == nullptr) {\n-          tty->print_cr(\"%s: shared class with stream?\", name()->as_C_string());\n-          return; \/\/ stream is nullptr will cause below operation fail.\n-        }\n-      } else {\n-        if (stream != nullptr) {\n-          oop class_loader = class_loader_data()->class_loader();\n-          if (class_loader == NULL || SystemDictionary::is_platform_class_loader(class_loader)) {\n-            \/\/ For the boot and platform class loaders, skip classes that are not found in the\n-            \/\/ java runtime image, such as those found in the --patch-module entries.\n-            \/\/ These classes can't be loaded from the archive during runtime.\n-            if (!stream->from_boot_loader_modules_image() && strncmp(stream->source(), \"jrt:\", 4) != 0) {\n-              skip = true;\n-            }\n-\n-            if (class_loader == NULL && ClassLoader::contains_append_entry(stream->source())) {\n-              \/\/ .. but don't skip the boot classes that are loaded from -Xbootclasspath\/a\n-              \/\/ as they can be loaded from the archive during runtime.\n-              skip = false;\n-            }\n-          }\n-        } else {\n-          warning(\"non-shared class without stream, skipped\");\n-          return;\n-        }\n-      }\n-      if (skip) {\n-        tty->print_cr(\"skip writing class %s from source %s to classlist file\",\n-                      name()->as_C_string(), stream->source());\n-      } else {\n-        ClassListWriter w;\n-        w.stream()->print_cr(\"%s\", name()->as_C_string());\n-        w.stream()->flush();\n-      }\n+      ClassListWriter w;\n+      w.stream()->print_cr(\"%s\", name()->as_C_string());\n+      w.stream()->flush();\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":17,"deletions":49,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -364,1 +364,1 @@\n-  \/\/ if can be shared in CDS, used by jcmd VM.cds\n+  \/\/ Check if the class can be shared in CDS\n@@ -1265,1 +1265,1 @@\n-  void log_to_classlist(const ClassFileStream* cfs) const;\n+  void log_to_classlist() const;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}