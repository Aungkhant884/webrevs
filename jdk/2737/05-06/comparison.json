{"files":[{"patch":"@@ -89,1 +89,0 @@\n-JVM_GetVMArguments\n","filename":"make\/data\/hotspot-symbols\/symbols-unix","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -804,13 +804,0 @@\n-\/\/ returns true if entry already on class path\n-bool ClassLoader::contains_append_entry(const char* name) {\n-  ClassPathEntry* e = first_append_entry();\n-  while (e != NULL) {\n-    \/\/ assume zip entries have been canonicalized\n-    if (strcmp(name, e->name()) == 0) {\n-      return true;\n-    }\n-    e = e->next();\n-  }\n-  return false;\n-}\n-\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -387,3 +387,0 @@\n-  \/\/ indicates if class path already contains a entry (exact match by name)\n-  static bool contains_append_entry(const char* name);\n-\n","filename":"src\/hotspot\/share\/classfile\/classLoader.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -188,3 +188,0 @@\n-JNIEXPORT jobjectArray JNICALL\n-JVM_GetVMArguments(JNIEnv* env);\n-\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4242,3 +4242,0 @@\n-    tty->print_cr(\"skip writing %s class %s to classlist file\",\n-                  (is_hidden() ? \"hidden\" : \"unsafe anonymous host\"),\n-                  name()->as_C_string());\n@@ -4249,2 +4246,0 @@\n-    tty->print_cr(\"skip writing class %s to classlist file, module patched\",\n-                  name()->as_C_string());\n@@ -4253,0 +4248,1 @@\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3664,15 +3664,0 @@\n-JVM_ENTRY(jobjectArray, JVM_GetVMArguments(JNIEnv* env))\n-  int num_vm_args = Arguments::num_jvm_args();\n-  if (num_vm_args == 0) {\n-    return NULL;\n-  }\n-\n-  char** vm_args  = Arguments::jvm_args_array();\n-  objArrayHandle h_args = oopFactory::new_objArray_handle(vmClasses::String_klass(), num_vm_args, CHECK_NULL);\n-  for(int i = 0; i < num_vm_args; i++) {\n-    Handle h = java_lang_String::create_from_str(vm_args[i], THREAD);\n-    h_args->obj_at_put(i, h());\n-  }\n-  return (jobjectArray) JNIHandles::make_local(THREAD, h_args());\n-JVM_END\n-\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.io.BufferedReader;\n@@ -29,0 +30,1 @@\n+import java.io.InputStreamReader;\n@@ -34,0 +36,1 @@\n+import java.util.List;\n@@ -38,3 +41,0 @@\n-import java.io.InputStreamReader;\n-import java.io.BufferedReader;\n-\n@@ -74,1 +74,1 @@\n-    private static native String[] getVMArguments(); \/\/ return commandline args except for executable itself.\n+\n@@ -211,1 +211,1 @@\n-    private static void outputStdStream(InputStream stream, String fileName) {\n+    private static void outputStdStream(InputStream stream, String fileName, List<String> cmds) {\n@@ -218,0 +218,5 @@\n+            prt.println(\"Command:\");\n+            for (String s : cmds) {\n+                prt.print(s + \" \");\n+            }\n+            prt.println(\"\");\n@@ -269,1 +274,2 @@\n-            ArrayList<String> cmds = new ArrayList<String>();\n+            String classPath = System.getProperty(\"java.class.path\");\n+            List<String> cmds = new ArrayList<String>();\n@@ -271,1 +277,3 @@\n-            cmds.add(\"-Xlog:cds\");\n+            cmds.add(\"-cp\");\n+            cmds.add(classPath);\n+            cmds.add(\"-Xlog:cds,class+load\");\n@@ -275,2 +283,3 @@\n-            \/\/ All args in command line\n-            String[] vmArgs = getVMArguments();\n+\n+            \/\/ All runtime args.\n+            String[] vmArgs = VM.getRuntimeArguments();\n@@ -285,10 +294,1 @@\n-            System.out.println(\"Static dump cmd: \");\n-            for (String s : cmds) {\n-                System.out.print(s + \" \");\n-            }\n-            System.out.println(\"\");\n-\n-            \/\/ Do not take parent env which will cause check error on empty directory if\n-            \/\/ classpath carried in envp.\n-            Process proc = Runtime.getRuntime().exec(cmds.toArray(new String[0]),\n-                               new String[] {\"EnvP=null\"});\n+            Process proc = Runtime.getRuntime().exec(cmds.toArray(new String[0]));\n@@ -299,1 +299,1 @@\n-                    outputStdStream(proc.getInputStream(), stdOutFile);\n+                    outputStdStream(proc.getInputStream(), stdOutFile, cmds);\n@@ -305,1 +305,1 @@\n-                    outputStdStream(proc.getErrorStream(), stdErrFile);\n+                    outputStdStream(proc.getErrorStream(), stdErrFile, cmds);\n@@ -311,1 +311,1 @@\n-                fileList.delete();\n+                \/\/ fileList.delete();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/CDS.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -76,5 +76,0 @@\n-\n-JNIEXPORT jobjectArray JNICALL\n-Java_jdk_internal_misc_CDS_getVMArguments(JNIEnv *env, jclass jcls) {\n-    return JVM_GetVMArguments(env);\n-}\n","filename":"src\/java.base\/share\/native\/libjava\/CDS.c","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -85,4 +85,0 @@\n-                \/\/ skip classes outside of jrt image\n-                output.shouldContain(\"skip writing class java\/lang\/NewClass\");\n-                \/\/ but classes on -Xbootclasspath\/a should not be skipped\n-                output.shouldNotContain(\"skip writing class boot\/append\/Foo\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/DumpClassList.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @compile ..\/test-classes\/Hello.java\n@@ -45,0 +46,1 @@\n+import java.util.List;\n@@ -58,4 +60,4 @@\n-    static final String TEST_CLASS[] = {\"LingeredTestApp\", \"jdk\/test\/lib\/apps\/LingeredApp\"};\n-    static final String TEST_JAR   = \"test.jar\";\n-    static final String SUBCMD_STATIC_DUMP = \"static_dump\";\n-    static final String SUBCMD_DYNAMIC_DUMP= \"dynamic_dump\";\n+    static final String TEST_CLASSES[]      = {\"LingeredTestApp\", \"jdk\/test\/lib\/apps\/LingeredApp\", \"Hello\"};\n+    static final String BOOT_CLASSES[]      = {\"Hello\"};\n+    static final String SUBCMD_STATIC_DUMP  = \"static_dump\";\n+    static final String SUBCMD_DYNAMIC_DUMP = \"dynamic_dump\";\n@@ -63,2 +65,2 @@\n-    static final String STATIC_DUMP_FILE = \"mystatic\";\n-    static final String DYNAMIC_DUMP_FILE = \"mydynamic\";\n+    static final String STATIC_DUMP_FILE    = \"mystatic\";\n+    static final String DYNAMIC_DUMP_FILE   = \"mydynamic\";\n@@ -66,2 +68,0 @@\n-    static boolean EXPECT_PASS = true;\n-    static boolean EXPECT_FAIL = !EXPECT_PASS;\n@@ -69,1 +69,10 @@\n-    static String jarFile = null;\n+    static final String[] STATIC_MESSAGES   = {\"LingeredTestApp source: shared objects file\",\n+                                               \"LingeredApp source: shared objects file\",\n+                                               \"Hello source: shared objects file\"};\n+    static final String[] DYNAMIC_MESSAGES  = {\"LingeredTestApp source: shared objects file (top)\",\n+                                               \"LingeredApp source: shared objects file (top)\",\n+                                               \"Hello source: shared objects file (top)\"};\n+\n+    static String testJar = null;\n+    static String bootJar = null;\n+    static String allJars = null;\n@@ -72,3 +81,7 @@\n-        jarFile = JarBuilder.build(\"test\", TEST_CLASS);\n-        Path path = FileSystems.getDefault().getPath(jarFile);\n-        System.out.println(\"Jar file created: \" + path.toString());\n+        testJar = JarBuilder.build(\"test\", TEST_CLASSES);\n+        bootJar = JarBuilder.build(\"boot\", BOOT_CLASSES);\n+        Path testJarPath = FileSystems.getDefault().getPath(testJar);\n+        Path bootJarPath = FileSystems.getDefault().getPath(bootJar);\n+        System.out.println(\"Jar file created: \" + testJarPath.toString());\n+        System.out.println(\"Jar file created: \" + bootJarPath.toString());\n+        allJars = testJar+ File.pathSeparator + bootJar;\n@@ -119,0 +132,27 @@\n+    private static void runWithArchiveFile(String archiveName, boolean useBoot,  String... messages) throws Exception {\n+        List<String> args = new ArrayList<String>();\n+        if (useBoot) {\n+            args.add(\"-Xbootclasspath\/a:\" + bootJar);\n+        }\n+        args.add(\"-cp\");\n+        if (useBoot) {\n+            args.add(testJar);\n+        } else {\n+            args.add(allJars);\n+        }\n+        args.add(\"-Xshare:on\");\n+        args.add(\"-XX:SharedArchiveFile=\" + archiveName);\n+        args.add(\"-Xlog:class+load\");\n+\n+        LingeredApp app = createLingeredApp(args.toArray(new String[0]));\n+        app.stopApp();\n+        String output = app.getOutput().getStdout();\n+        if (messages != null) {\n+            for (String msg : messages) {\n+                if (!output.contains(msg)) {\n+                    throw new RuntimeException(msg + \" missed from oupt\");\n+                }\n+            }\n+        }\n+    }\n+\n@@ -120,1 +160,1 @@\n-                             long pid, boolean expectOK) throws Exception {\n+                             long pid, boolean useBoot, boolean expectOK, String... messages) throws Exception {\n@@ -142,0 +182,1 @@\n+                runWithArchiveFile(fileName, useBoot, messages);\n@@ -159,6 +200,6 @@\n-    \/\/ Those flags will be excluded in static dumping.\n-    private static String[] excludeFlags =\n-        {\"-XX:DumpLoadedClassList=AnyFileName.classlist\",\n-         \"-XX:+UseSharedSpaces\",\n-         \"-XX:+RecordDynamicDumpInfo\",\n-         \"-XX:+RequireSharedSpaces\",\n+    \/\/ Those flags will be excluded in static dumping,\n+    \/\/ See src\/java.base\/share\/classes\/jdk\/internal\/misc\/CDS.java\n+    private static String[] excludeFlags = {\n+         \"-XX:DumpLoadedClassList=AnyFileName.classlist\",\n+         \/\/ this flag just dump archive, won't run app normally.\n+         \/\/ \"-XX:+DumpSharedSpaces\",\n@@ -166,1 +207,2 @@\n-         \"-XX:ArchiveClassesAtExit=tmp.jsa\",\n+         \"-XX:+RecordDynamicDumpInfo\",\n+         \"-Xshare:on\",\n@@ -168,1 +210,5 @@\n-         \"-Xshare:on\"};\n+         \"-XX:SharedClassListFile=non-exist.classlist\",\n+         \"-XX:SharedArchiveFile=non-exist.jsa\",\n+         \"-XX:ArchiveClassesAtExit=tmp.jsa\",\n+         \"-XX:+UseSharedSpaces\",\n+         \"-XX:+RequireSharedSpaces\"};\n@@ -176,4 +222,9 @@\n-\n-        \/\/ 1. Static dump with default name multiple times.\n-        print2ln(\"1: Static dump with default name multiple times.\");\n-        app  = createLingeredApp(\"-cp\", jarFile);\n+        int  test_count = 1;\n+        final boolean useBoot = true;\n+        final boolean noBoot = !useBoot;\n+        final boolean EXPECT_PASS = true;\n+        final boolean EXPECT_FAIL = !EXPECT_PASS;\n+\n+        \/\/ Static dump with default name multiple times.\n+        print2ln(test_count++ + \" Static dump with default name multiple times.\");\n+        app  = createLingeredApp(\"-cp\", allJars);\n@@ -182,1 +233,1 @@\n-            test(SUBCMD_STATIC_DUMP, null, pid, EXPECT_PASS);\n+            test(SUBCMD_STATIC_DUMP, null, pid, noBoot,  EXPECT_PASS, STATIC_MESSAGES);\n@@ -186,3 +237,3 @@\n-        \/\/ 2. Test static dump with given file name.\n-        print2ln(\"2. Test static dump with given file name.\");\n-        app = createLingeredApp(\"-cp\", jarFile);\n+        \/\/ Test static dump with given file name.\n+        print2ln(test_count++ + \" Test static dump with given file name.\");\n+        app = createLingeredApp(\"-cp\", allJars);\n@@ -191,1 +242,1 @@\n-            test(SUBCMD_STATIC_DUMP, STATIC_DUMP_FILE + \"0\" + i, pid, EXPECT_PASS);\n+            test(SUBCMD_STATIC_DUMP, STATIC_DUMP_FILE + \"0\" + i, pid, noBoot,  EXPECT_PASS, STATIC_MESSAGES);\n@@ -195,3 +246,3 @@\n-        \/\/ 3. Test static dump with flags with which dumping should fail\n-        \/\/    This test will result classes.jsa in default server dir if -XX:SharedArchiveFile= not set.\n-        print2ln(\"3. Test static dump with flags with which dumping should fail.\");\n+        \/\/  Test static dump with flags with which dumping should fail\n+        \/\/  This test will result classes.jsa in default server dir if -XX:SharedArchiveFile= not set.\n+        print2ln(test_count++ + \" Test static dump with flags with which dumping should fail.\");\n@@ -199,1 +250,1 @@\n-            app = createLingeredApp(\"-cp\", jarFile, flag, \"-XX:SharedArchiveFile=tmp.jsa\");\n+            app = createLingeredApp(\"-cp\", allJars, flag, \"-XX:SharedArchiveFile=tmp.jsa\");\n@@ -203,1 +254,1 @@\n-                test(SUBCMD_STATIC_DUMP, null, pid, EXPECT_FAIL);\n+                test(SUBCMD_STATIC_DUMP, null, pid, noBoot, EXPECT_FAIL);\n@@ -210,2 +261,14 @@\n-        \/\/ 4. Test static dump with flags which will be filtered before dumping.\n-        print2ln(\"4. Test static dump with flags which will be filtered before dumping.\");\n+        \/\/ Test static with -Xbootclasspath\/a:boot.jar\n+        print2ln(test_count++ + \" Test static with -Xbootassath\/a:boot.jar\");\n+        app = createLingeredApp(\"-Xbootclasspath\/a:\" + bootJar, \"-cp\", testJar);\n+        pid = app.getPid();\n+        test(SUBCMD_STATIC_DUMP, null, pid, useBoot, EXPECT_PASS, STATIC_MESSAGES);\n+\n+        \/\/ Test static with limit-modules java.base.\n+        print2ln(test_count++ + \" Test static with --limit-modules java.base.\");\n+        app = createLingeredApp(\"--limit-modules\", \"java.base\", \"-cp\", allJars);\n+        pid = app.getPid();\n+        test(SUBCMD_STATIC_DUMP, null, pid, noBoot, EXPECT_FAIL);\n+\n+        \/\/ Test static dump with flags which will be filtered before dumping.\n+        print2ln(test_count++ + \" Test static dump with flags which will be filtered before dumping.\");\n@@ -213,1 +276,1 @@\n-            app = createLingeredApp(\"-cp\", jarFile, flag);\n+            app = createLingeredApp(\"-cp\", allJars, flag);\n@@ -215,1 +278,1 @@\n-            test(SUBCMD_STATIC_DUMP, null, pid, EXPECT_PASS);\n+            test(SUBCMD_STATIC_DUMP, null, pid, noBoot, EXPECT_PASS, STATIC_MESSAGES);\n@@ -220,3 +283,3 @@\n-        \/\/ 5. Test static with -Xshare:off will be OK to dump.\n-        print2ln(\"5. Test static with -Xshare:off will be OK to dump.\");\n-        app = createLingeredApp(\"-Xshare:off\", \"-cp\", jarFile);\n+        \/\/ Test static with -Xshare:off will be OK to dump.\n+        print2ln(test_count++ + \" Test static with -Xshare:off will be OK to dump.\");\n+        app = createLingeredApp(\"-Xshare:off\", \"-cp\", allJars);\n@@ -224,1 +287,1 @@\n-        test(SUBCMD_STATIC_DUMP, null, pid, EXPECT_PASS);\n+        test(SUBCMD_STATIC_DUMP, null, pid, noBoot,  EXPECT_PASS, STATIC_MESSAGES);\n@@ -227,9 +290,3 @@\n-        \/\/ 6. Test static with --limit-modules java.base.\n-        print2ln(\"6. Test static with --limit-modules java.base.\");\n-        app = createLingeredApp(\"--limit-modules\", \"java.base\", \"-cp\", jarFile);\n-        pid = app.getPid();\n-        test(SUBCMD_STATIC_DUMP, null, pid, EXPECT_FAIL);\n-\n-        \/\/ 7. Test dynamic dump with -XX:+RecordDynamicDumpInfo.\n-        print2ln(\"7. Test dynamic dump with -XX:+RecordDynamicDumpInfo.\");\n-        app = createLingeredApp(\"-cp\", jarFile, \"-XX:+RecordDynamicDumpInfo\");\n+        \/\/ Test dynamic dump with -XX:+RecordDynamicDumpInfo.\n+        print2ln(test_count++ + \" Test dynamic dump with -XX:+RecordDynamicDumpInfo.\");\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\");\n@@ -237,1 +294,1 @@\n-        test(SUBCMD_DYNAMIC_DUMP, DYNAMIC_DUMP_FILE + \"01\", pid, EXPECT_PASS);\n+        test(SUBCMD_DYNAMIC_DUMP, DYNAMIC_DUMP_FILE + \"01\", pid, noBoot, EXPECT_PASS, DYNAMIC_MESSAGES);\n@@ -239,3 +296,3 @@\n-        \/\/ 8. Test dynamic dump twice to same process.\n-        print2ln(\"8. Test dynamic dump second time to the same process.\");\n-        test(SUBCMD_DYNAMIC_DUMP, DYNAMIC_DUMP_FILE + \"02\", pid, EXPECT_FAIL);\n+        \/\/ Test dynamic dump twice to same process.\n+        print2ln(test_count++ + \" Test dynamic dump second time to the same process.\");\n+        test(SUBCMD_DYNAMIC_DUMP, DYNAMIC_DUMP_FILE + \"02\", pid, noBoot,  EXPECT_FAIL);\n@@ -244,3 +301,3 @@\n-        \/\/ 9. Test dynamic dump with -XX:-RecordDynamicDumpInfo.\n-        print2ln(\"9. Test dynamic dump with -XX:-RecordDynamicDumpInfo.\");\n-        app = createLingeredApp(\"-cp\", jarFile);\n+        \/\/ Test dynamic dump with -XX:-RecordDynamicDumpInfo.\n+        print2ln(test_count++ + \" Test dynamic dump with -XX:-RecordDynamicDumpInfo.\");\n+        app = createLingeredApp(\"-cp\", allJars);\n@@ -248,1 +305,1 @@\n-        test(SUBCMD_DYNAMIC_DUMP, DYNAMIC_DUMP_FILE + \"01\", pid, EXPECT_FAIL);\n+        test(SUBCMD_DYNAMIC_DUMP, DYNAMIC_DUMP_FILE + \"01\", pid, noBoot, EXPECT_FAIL);\n@@ -251,3 +308,3 @@\n-        \/\/ 10. Test dynamic dump with default archive name (null).\n-        print2ln(\"10. Test dynamic dump with default archive name (null).\");\n-        app = createLingeredApp(\"-cp\", jarFile, \"-XX:+RecordDynamicDumpInfo\");\n+        \/\/ Test dynamic dump with default archive name (null).\n+        print2ln(test_count++ + \" Test dynamic dump with default archive name (null).\");\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\");\n@@ -255,1 +312,1 @@\n-        test(SUBCMD_DYNAMIC_DUMP, null, pid, EXPECT_PASS);\n+        test(SUBCMD_DYNAMIC_DUMP, null, pid, noBoot, EXPECT_PASS, DYNAMIC_MESSAGES);\n@@ -258,3 +315,3 @@\n-        \/\/ 11. Test dynamic dump with flags -XX:+RecordDynamicDumpInfo -XX:-DynamicDumpSharedSpaces.\n-        print2ln(\"11. Test dynamic dump with flags -XX:+RecordDynamicDumpInfo -XX:-DynamicDumpSharedSpaces.\");\n-        app = createLingeredApp(\"-cp\", jarFile, \"-XX:+RecordDynamicDumpInfo\", \"-XX:-DynamicDumpSharedSpaces\");\n+        \/\/ Test dynamic dump with flags -XX:+RecordDynamicDumpInfo -XX:-DynamicDumpSharedSpaces.\n+        print2ln(test_count++ + \" Test dynamic dump with flags -XX:+RecordDynamicDumpInfo -XX:-DynamicDumpSharedSpaces.\");\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\", \"-XX:-DynamicDumpSharedSpaces\");\n@@ -262,1 +319,1 @@\n-        test(SUBCMD_DYNAMIC_DUMP, null, pid, EXPECT_PASS);\n+        test(SUBCMD_DYNAMIC_DUMP, null, pid, noBoot, EXPECT_PASS, DYNAMIC_MESSAGES);\n@@ -265,3 +322,3 @@\n-        \/\/ 12. Test dynamic dump with flags -XX:-DynamicDumpSharedSpaces -XX:+RecordDynamicDumpInfo.\n-        print2ln(\"12. Test dynamic dump with flags -XX:-DynamicDumpSharedSpaces -XX:+RecordDynamicDumpInfo.\");\n-        app = createLingeredApp(\"-cp\", jarFile, \"-XX:-DynamicDumpSharedSpaces\", \"-XX:+RecordDynamicDumpInfo\");\n+        \/\/ Test dynamic dump with flags -XX:-DynamicDumpSharedSpaces -XX:+RecordDynamicDumpInfo.\n+        print2ln(test_count++ + \" Test dynamic dump with flags -XX:-DynamicDumpSharedSpaces -XX:+RecordDynamicDumpInfo.\");\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:-DynamicDumpSharedSpaces\", \"-XX:+RecordDynamicDumpInfo\");\n@@ -269,1 +326,1 @@\n-        test(SUBCMD_DYNAMIC_DUMP, null, pid, EXPECT_PASS);\n+        test(SUBCMD_DYNAMIC_DUMP, null, pid, noBoot,  EXPECT_PASS, DYNAMIC_MESSAGES);\n@@ -272,3 +329,9 @@\n-        \/\/ 13. Test dynamic dump with -XX:ArchiveClassAtExit will fail.\n-        print2ln(\"13. Test dynamic dump with -XX:ArchiveClassAtExit will fail.\");\n-        app = createLingeredApp(\"-cp\", jarFile,\n+        \/\/ Test dynamic with -Xbootclasspath\/a:boot.jar\n+        print2ln(test_count++ + \" Test dynamic with -Xbootclasspath\/a:boot.jar\");\n+        app = createLingeredApp(\"-cp\", testJar, \"-Xbootclasspath\/a:\" + bootJar, \"-XX:+RecordDynamicDumpInfo\");\n+        pid = app.getPid();\n+        test(SUBCMD_DYNAMIC_DUMP, null, pid, useBoot, EXPECT_PASS, DYNAMIC_MESSAGES);\n+\n+        \/\/ Test dynamic dump with -XX:ArchiveClassAtExit will fail.\n+        print2ln(test_count++ + \" Test dynamic dump with -XX:ArchiveClassAtExit will fail.\");\n+        app = createLingeredApp(\"-cp\", allJars,\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTest.java","additions":138,"deletions":75,"binary":false,"changes":213,"status":"modified"},{"patch":"@@ -31,0 +31,5 @@\n+        try {\n+            Class.forName(\"Hello\");\n+        } catch (Exception e) {\n+            System.out.print(\"Could not load Hello \"+ e);\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/LingeredTestApp.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}