{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.awt.Point;\n@@ -38,0 +39,1 @@\n+import java.awt.event.WindowListener;\n@@ -44,0 +46,1 @@\n+import java.util.Collection;\n@@ -45,0 +48,1 @@\n+import java.util.Objects;\n@@ -66,0 +70,1 @@\n+import static java.util.Collections.unmodifiableList;\n@@ -175,9 +180,6 @@\n-                          boolean enableScreenCapture) throws InterruptedException,\n-            InvocationTargetException {\n-        if (isEventDispatchThread()) {\n-            createUI(title, instructions, testTimeOut, rows, columns,\n-                     enableScreenCapture);\n-        } else {\n-            invokeAndWait(() -> createUI(title, instructions, testTimeOut,\n-                    rows, columns, enableScreenCapture));\n-        }\n+                          boolean enableScreenCapture)\n+            throws InterruptedException, InvocationTargetException {\n+        invokeOnEDT(() -> createUI(title, instructions,\n+                                   testTimeOut,\n+                                   rows, columns,\n+                                   enableScreenCapture));\n@@ -189,1 +191,50 @@\n-                builder.rows, builder.columns, builder.screenCapture);\n+             builder.rows, builder.columns, builder.screenCapture);\n+\n+        if (builder.windowCreator != null) {\n+            invokeOnEDT(() ->\n+                    builder.testWindows = builder.windowCreator.createTestUI());\n+        }\n+\n+        if (builder.testWindows != null) {\n+            addTestWindow(builder.testWindows);\n+            builder.testWindows\n+                   .forEach(w -> w.addWindowListener(windowClosingHandler));\n+\n+            if (builder.positionWindows != null) {\n+                positionInstructionFrame(builder.position);\n+                invokeOnEDT(() -> {\n+                    builder.positionWindows\n+                           .positionTestWindows(unmodifiableList(builder.testWindows),\n+                                                builder.instructionUIHandler);\n+\n+                    windowList.forEach(w -> w.setVisible(true));\n+                });\n+            } else if (builder.testWindows.size() == 1) {\n+                Window window = builder.testWindows.get(0);\n+                positionTestWindow(window, builder.position);\n+                window.setVisible(true);\n+            } else {\n+                positionTestWindow(null, builder.position);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Performs an operation on EDT. If called on EDT, invokes {@code run}\n+     * directly, otherwise wraps into {@code invokeAndWait}.\n+     *\n+     * @param doRun an operation to run on EDT\n+     * @throws InterruptedException if we're interrupted while waiting for\n+     *              the event dispatching thread to finish executing\n+     *              {@code doRun.run()}\n+     * @throws InvocationTargetException if an exception is thrown while\n+     *              running {@code doRun}\n+     * @see javax.swing.SwingUtilities#invokeAndWait(Runnable)\n+     *\/\n+    private static void invokeOnEDT(Runnable doRun)\n+            throws InterruptedException, InvocationTargetException {\n+        if (isEventDispatchThread()) {\n+            doRun.run();\n+        } else {\n+            invokeAndWait(doRun);\n+        }\n@@ -244,10 +295,1 @@\n-        frame.addWindowListener(new WindowAdapter() {\n-            @Override\n-            public void windowClosing(WindowEvent e) {\n-                super.windowClosing(e);\n-                testFailedReason = FAILURE_REASON\n-                                   + \"User closed the instruction Frame\";\n-                failed = true;\n-                latch.countDown();\n-            }\n-        });\n+        frame.addWindowListener(windowClosingHandler);\n@@ -287,0 +329,95 @@\n+\n+    \/**\n+     * Creates one or more windows for test UI.\n+     *\/\n+    @FunctionalInterface\n+    public interface WindowCreator {\n+        \/**\n+         * Creates one or more windows for test UI.\n+         * This method is called by the framework on the EDT.\n+         * @return a list of windows.\n+         *\/\n+        List<? extends Window> createTestUI();\n+    }\n+\n+    \/**\n+     * Positions test UI windows.\n+     *\/\n+    @FunctionalInterface\n+    public interface PositionWindows {\n+        \/**\n+         * Positions test UI windows.\n+         * This method is called by the framework on the EDT after\n+         * the instruction UI frame was positioned on the screen.\n+         * <p>\n+         * The list of the test windows contains the windows\n+         * that were passed to the framework via\n+         * {@link Builder#testUI(WindowCreator) testUI} method.\n+         *\n+         * @param testWindows the list of test windows\n+         * @param instructionUI information about the instruction frame\n+         *\/\n+        void positionTestWindows(List<? extends Window> testWindows,\n+                                 InstructionUI instructionUI);\n+    }\n+\n+    \/**\n+     * Provides information about the instruction frame.\n+     *\/\n+    public interface InstructionUI {\n+        \/**\n+         * {@return the location of the instruction frame}\n+         *\/\n+        Point getLocation();\n+\n+        \/**\n+         * {@return the size of the instruction frame}\n+         *\/\n+        Dimension getSize();\n+\n+        \/**\n+         * {@return the bounds of the instruction frame}\n+         *\/\n+        Rectangle getBounds();\n+\n+        \/**\n+         * Allows to change the location of the instruction frame.\n+         *\n+         * @param location the new location of the instruction frame\n+         *\/\n+        void setLocation(Point location);\n+\n+        \/**\n+         * Allows to change the location of the instruction frame.\n+         *\n+         * @param x the <i>x<\/i> coordinate of the new location\n+         * @param y the <i>y<\/i> coordinate of the new location\n+         *\/\n+        void setLocation(int x, int y);\n+\n+        \/**\n+         * Returns the specified position that was used to set\n+         * the initial location of the instruction frame.\n+         *\n+         * @return the specified position\n+         *\n+         * @see Position\n+         *\/\n+        Position getPosition();\n+    }\n+\n+\n+    private static final class WindowClosingHandler extends WindowAdapter {\n+        @Override\n+        public void windowClosing(WindowEvent e) {\n+            testFailedReason = FAILURE_REASON\n+                               + \"User closed a window\";\n+            failed = true;\n+            latch.countDown();\n+        }\n+    }\n+\n+    private static final WindowListener windowClosingHandler =\n+            new WindowClosingHandler();\n+\n+\n@@ -412,2 +549,2 @@\n-     * Dispose all the window(s) i,e both the test instruction frame and\n-     * the window(s) that is added via addTestWindow(Window testWindow)\n+     * Disposes of all the windows. It disposes of the test instruction frame\n+     * and all other windows added via {@link #addTestWindow(Window)}.\n@@ -416,3 +553,1 @@\n-        for (Window win : windowList) {\n-            win.dispose();\n-        }\n+        windowList.forEach(Window::dispose);\n@@ -453,0 +588,30 @@\n+    private static void positionInstructionFrame(final Position position) {\n+        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n+\n+        \/\/ Get the screen insets to position the frame by taking into\n+        \/\/ account the location of taskbar or menu bar on screen.\n+        GraphicsConfiguration gc = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                                                      .getDefaultScreenDevice()\n+                                                      .getDefaultConfiguration();\n+        Insets screenInsets = Toolkit.getDefaultToolkit().getScreenInsets(gc);\n+\n+        switch (position) {\n+            case HORIZONTAL:\n+                int newX = ((screenSize.width \/ 2) - frame.getWidth());\n+                frame.setLocation((newX + screenInsets.left),\n+                                  (frame.getY() + screenInsets.top));\n+                break;\n+\n+            case VERTICAL:\n+                int newY = ((screenSize.height \/ 2) - frame.getHeight());\n+                frame.setLocation((frame.getX() + screenInsets.left),\n+                                  (newY + screenInsets.top));\n+                break;\n+\n+            case TOP_LEFT_CORNER:\n+                frame.setLocation(screenInsets.left, screenInsets.top);\n+                break;\n+        }\n+        syncLocationToWindowManager();\n+    }\n+\n@@ -483,32 +648,14 @@\n-        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n-\n-        \/\/ Get the screen insets to position the frame by taking into\n-        \/\/ account the location of taskbar\/menubars on screen.\n-        GraphicsConfiguration gc = GraphicsEnvironment.getLocalGraphicsEnvironment()\n-                .getDefaultScreenDevice().getDefaultConfiguration();\n-        Insets screenInsets = Toolkit.getDefaultToolkit().getScreenInsets(gc);\n-\n-        if (position.equals(Position.HORIZONTAL)) {\n-            int newX = ((screenSize.width \/ 2) - frame.getWidth());\n-            frame.setLocation((newX + screenInsets.left),\n-                    (frame.getY() + screenInsets.top));\n-            syncLocationToWindowManager();\n-            if (testWindow != null) {\n-                testWindow.setLocation((frame.getX() + frame.getWidth() + 5),\n-                        frame.getY());\n-            }\n-        } else if (position.equals(Position.VERTICAL)) {\n-            int newY = ((screenSize.height \/ 2) - frame.getHeight());\n-            frame.setLocation((frame.getX() + screenInsets.left),\n-                    (newY + screenInsets.top));\n-            syncLocationToWindowManager();\n-            if (testWindow != null) {\n-                testWindow.setLocation(frame.getX(),\n-                        (frame.getY() + frame.getHeight() + 5));\n-            }\n-        } else if (position.equals(Position.TOP_LEFT_CORNER)) {\n-            frame.setLocation(screenInsets.left, screenInsets.top);\n-            syncLocationToWindowManager();\n-            if (testWindow != null) {\n-                testWindow.setLocation((frame.getX() + frame.getWidth() + 5),\n-                        frame.getY());\n+        positionInstructionFrame(position);\n+\n+        if (testWindow != null) {\n+            switch (position) {\n+                case HORIZONTAL:\n+                case TOP_LEFT_CORNER:\n+                    testWindow.setLocation((frame.getX() + frame.getWidth() + 5),\n+                                           frame.getY());\n+                    break;\n+\n+                case VERTICAL:\n+                    testWindow.setLocation(frame.getX(),\n+                                           (frame.getY() + frame.getHeight() + 5));\n+                    break;\n@@ -517,0 +664,1 @@\n+\n@@ -556,7 +704,1 @@\n-        if (isEventDispatchThread()) {\n-            bounds[0] = frame != null ? frame.getBounds() : null;\n-        } else {\n-            invokeAndWait(() -> {\n-                bounds[0] = frame != null ? frame.getBounds() : null;\n-            });\n-        }\n+        invokeOnEDT(() -> bounds[0] = frame != null ? frame.getBounds() : null);\n@@ -577,0 +719,10 @@\n+    \/**\n+     * Adds a collection of test windows to the windowList to be disposed of\n+     * when the test completes.\n+     *\n+     * @param testWindows the collection of test windows to be disposed of\n+     *\/\n+    public static synchronized void addTestWindow(Collection<? extends Window> testWindows) {\n+        windowList.addAll(testWindows);\n+    }\n+\n@@ -610,1 +762,1 @@\n-    public static class Builder {\n+    public static final class Builder {\n@@ -616,1 +768,8 @@\n-        private boolean screenCapture = false;\n+        private boolean screenCapture;\n+\n+        private List<? extends Window> testWindows;\n+        private WindowCreator windowCreator;\n+        private PositionWindows positionWindows;\n+        private InstructionUI instructionUIHandler;\n+\n+        private Position position;\n@@ -648,0 +807,45 @@\n+        public Builder testUI(Window window) {\n+            return testUI(List.of(window));\n+        }\n+\n+        public Builder testUI(Window... windows) {\n+            return testUI(List.of(windows));\n+        }\n+\n+        public Builder testUI(List<Window> windows) {\n+            if (windows == null) {\n+                throw new IllegalArgumentException(\"The list of windows can't be null\");\n+            }\n+            if (windows.stream()\n+                       .anyMatch(Objects::isNull)) {\n+                throw new IllegalArgumentException(\"The windows list can't contain null\");\n+            }\n+\n+            if (windowCreator != null) {\n+                throw new IllegalStateException(\"windowCreator is already set\");\n+            }\n+            this.testWindows = windows;\n+            return this;\n+        }\n+\n+        public Builder testUI(WindowCreator windowCreator) {\n+            if (windowCreator == null) {\n+                throw new IllegalArgumentException(\"The window creator can't be null\");\n+            }\n+            if (testWindows != null) {\n+                throw new IllegalStateException(\"testWindows are already set\");\n+            }\n+            this.windowCreator = windowCreator;\n+            return this;\n+        }\n+\n+        public Builder positionTestUI(PositionWindows positionWindows) {\n+            this.positionWindows = positionWindows;\n+            return this;\n+        }\n+\n+        public Builder position(Position position) {\n+            this.position = position;\n+            return this;\n+        }\n+\n@@ -655,2 +859,45 @@\n-            if (this.title == null) {\n-                this.title = TITLE;\n+            if (title == null) {\n+                title = TITLE;\n+            }\n+\n+            if (instructions == null || instructions.isEmpty()) {\n+                throw new IllegalStateException(\"Please provide the test \" +\n+                        \"instructions for this manual test\");\n+            }\n+\n+            if (testTimeOut == 0L) {\n+                testTimeOut = TEST_TIMEOUT;\n+            }\n+\n+            if (rows == 0) {\n+                rows = ROWS;\n+            }\n+\n+            if (columns == 0) {\n+                columns = COLUMNS;\n+            }\n+\n+            if (position == null\n+                && (testWindows != null || windowCreator != null)) {\n+\n+                position = Position.HORIZONTAL;\n+            }\n+\n+            if (positionWindows != null) {\n+                if (testWindows == null && windowCreator == null) {\n+                    throw new IllegalStateException(\"To position windows, \"\n+                            + \"provide an a list of windows to the builder\");\n+                }\n+                instructionUIHandler = new InstructionUIHandler();\n+            }\n+        }\n+\n+        private final class InstructionUIHandler implements InstructionUI {\n+            @Override\n+            public Point getLocation() {\n+                return frame.getLocation();\n+            }\n+\n+            @Override\n+            public Dimension getSize() {\n+                return frame.getSize();\n@@ -659,3 +906,3 @@\n-            if (this.instructions == null || this.instructions.length() == 0) {\n-                throw new RuntimeException(\"Please provide the test \" +\n-                        \"instruction for this manual test\");\n+            @Override\n+            public Rectangle getBounds() {\n+                return frame.getBounds();\n@@ -664,2 +911,3 @@\n-            if (this.testTimeOut == 0L) {\n-                this.testTimeOut = TEST_TIMEOUT;\n+            @Override\n+            public void setLocation(Point location) {\n+                setLocation(location.x, location.y);\n@@ -668,2 +916,3 @@\n-            if (this.rows == 0) {\n-                this.rows = ROWS;\n+            @Override\n+            public void setLocation(int x, int y) {\n+                frame.setLocation(x, y);\n@@ -672,2 +921,3 @@\n-            if (this.columns == 0) {\n-                this.columns = COLUMNS;\n+            @Override\n+            public Position getPosition() {\n+                return position;\n@@ -677,0 +927,4 @@\n+\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":331,"deletions":77,"binary":false,"changes":408,"status":"modified"}]}