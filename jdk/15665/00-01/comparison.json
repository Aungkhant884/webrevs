{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.awt.Point;\n@@ -45,0 +46,1 @@\n+import java.util.Collection;\n@@ -46,0 +48,1 @@\n+import java.util.Objects;\n@@ -67,0 +70,1 @@\n+import static java.util.Collections.unmodifiableList;\n@@ -191,1 +195,1 @@\n-                    builder.testWindow = builder.windowCreator.createTestUI());\n+                    builder.testWindows = builder.windowCreator.createTestUI());\n@@ -194,6 +198,21 @@\n-        if (builder.testWindow != null) {\n-            addTestWindow(builder.testWindow);\n-            builder.testWindow.addWindowListener(windowClosingHandler);\n-            positionTestWindow(builder.testWindow, builder.position);\n-\n-            invokeOnEDT(() -> windowList.forEach(w -> w.setVisible(true)));\n+        if (builder.testWindows != null) {\n+            addTestWindow(builder.testWindows);\n+            builder.testWindows\n+                   .forEach(w -> w.addWindowListener(windowClosingHandler));\n+\n+            if (builder.positionWindows != null) {\n+                positionInstructionFrame(builder.position);\n+                invokeOnEDT(() -> {\n+                    builder.positionWindows\n+                           .positionTestWindows(unmodifiableList(builder.testWindows),\n+                                                builder.instructionUIHandler);\n+\n+                    windowList.forEach(w -> w.setVisible(true));\n+                });\n+            } else if (builder.testWindows.size() == 1) {\n+                Window window = builder.testWindows.get(0);\n+                positionTestWindow(window, builder.position);\n+                window.setVisible(true);\n+            } else {\n+                positionTestWindow(null, builder.position);\n+            }\n@@ -311,0 +330,3 @@\n+    \/**\n+     * Creates one or more windows for test UI.\n+     *\/\n@@ -313,1 +335,72 @@\n-        Window createTestUI();\n+        \/**\n+         * Creates one or more windows for test UI.\n+         * This method is called by the framework on the EDT.\n+         * @return a list of windows.\n+         *\/\n+        List<? extends Window> createTestUI();\n+    }\n+\n+    \/**\n+     * Positions test UI windows.\n+     *\/\n+    @FunctionalInterface\n+    public interface PositionWindows {\n+        \/**\n+         * Positions test UI windows.\n+         * This method is called by the framework on the EDT after\n+         * the instruction UI frame was positioned on the screen.\n+         * <p>\n+         * The list of the test windows contains the windows\n+         * that were passed to the framework via\n+         * {@link Builder#testUI(WindowCreator) testUI} method.\n+         *\n+         * @param testWindows the list of test windows\n+         * @param instructionUI information about the instruction frame\n+         *\/\n+        void positionTestWindows(List<? extends Window> testWindows,\n+                                 InstructionUI instructionUI);\n+    }\n+\n+    \/**\n+     * Provides information about the instruction frame.\n+     *\/\n+    public interface InstructionUI {\n+        \/**\n+         * {@return the location of the instruction frame}\n+         *\/\n+        Point getLocation();\n+\n+        \/**\n+         * {@return the size of the instruction frame}\n+         *\/\n+        Dimension getSize();\n+\n+        \/**\n+         * {@return the bounds of the instruction frame}\n+         *\/\n+        Rectangle getBounds();\n+\n+        \/**\n+         * Allows to change the location of the instruction frame.\n+         *\n+         * @param location the new location of the instruction frame\n+         *\/\n+        void setLocation(Point location);\n+\n+        \/**\n+         * Allows to change the location of the instruction frame.\n+         *\n+         * @param x the <i>x<\/i> coordinate of the new location\n+         * @param y the <i>y<\/i> coordinate of the new location\n+         *\/\n+        void setLocation(int x, int y);\n+\n+        \/**\n+         * Returns the specified position that was used to set\n+         * the initial location of the instruction frame.\n+         *\n+         * @return the specified position\n+         *\n+         * @see Position\n+         *\/\n+        Position getPosition();\n@@ -495,0 +588,30 @@\n+    private static void positionInstructionFrame(final Position position) {\n+        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n+\n+        \/\/ Get the screen insets to position the frame by taking into\n+        \/\/ account the location of taskbar or menu bar on screen.\n+        GraphicsConfiguration gc = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                                                      .getDefaultScreenDevice()\n+                                                      .getDefaultConfiguration();\n+        Insets screenInsets = Toolkit.getDefaultToolkit().getScreenInsets(gc);\n+\n+        switch (position) {\n+            case HORIZONTAL:\n+                int newX = ((screenSize.width \/ 2) - frame.getWidth());\n+                frame.setLocation((newX + screenInsets.left),\n+                                  (frame.getY() + screenInsets.top));\n+                break;\n+\n+            case VERTICAL:\n+                int newY = ((screenSize.height \/ 2) - frame.getHeight());\n+                frame.setLocation((frame.getX() + screenInsets.left),\n+                                  (newY + screenInsets.top));\n+                break;\n+\n+            case TOP_LEFT_CORNER:\n+                frame.setLocation(screenInsets.left, screenInsets.top);\n+                break;\n+        }\n+        syncLocationToWindowManager();\n+    }\n+\n@@ -525,32 +648,14 @@\n-        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n-\n-        \/\/ Get the screen insets to position the frame by taking into\n-        \/\/ account the location of taskbar\/menubars on screen.\n-        GraphicsConfiguration gc = GraphicsEnvironment.getLocalGraphicsEnvironment()\n-                .getDefaultScreenDevice().getDefaultConfiguration();\n-        Insets screenInsets = Toolkit.getDefaultToolkit().getScreenInsets(gc);\n-\n-        if (position.equals(Position.HORIZONTAL)) {\n-            int newX = ((screenSize.width \/ 2) - frame.getWidth());\n-            frame.setLocation((newX + screenInsets.left),\n-                    (frame.getY() + screenInsets.top));\n-            syncLocationToWindowManager();\n-            if (testWindow != null) {\n-                testWindow.setLocation((frame.getX() + frame.getWidth() + 5),\n-                        frame.getY());\n-            }\n-        } else if (position.equals(Position.VERTICAL)) {\n-            int newY = ((screenSize.height \/ 2) - frame.getHeight());\n-            frame.setLocation((frame.getX() + screenInsets.left),\n-                    (newY + screenInsets.top));\n-            syncLocationToWindowManager();\n-            if (testWindow != null) {\n-                testWindow.setLocation(frame.getX(),\n-                        (frame.getY() + frame.getHeight() + 5));\n-            }\n-        } else if (position.equals(Position.TOP_LEFT_CORNER)) {\n-            frame.setLocation(screenInsets.left, screenInsets.top);\n-            syncLocationToWindowManager();\n-            if (testWindow != null) {\n-                testWindow.setLocation((frame.getX() + frame.getWidth() + 5),\n-                        frame.getY());\n+        positionInstructionFrame(position);\n+\n+        if (testWindow != null) {\n+            switch (position) {\n+                case HORIZONTAL:\n+                case TOP_LEFT_CORNER:\n+                    testWindow.setLocation((frame.getX() + frame.getWidth() + 5),\n+                                           frame.getY());\n+                    break;\n+\n+                case VERTICAL:\n+                    testWindow.setLocation(frame.getX(),\n+                                           (frame.getY() + frame.getHeight() + 5));\n+                    break;\n@@ -559,0 +664,1 @@\n+\n@@ -613,0 +719,10 @@\n+    \/**\n+     * Adds a collection of test windows to the windowList to be disposed of\n+     * when the test completes.\n+     *\n+     * @param testWindows the collection of test windows to be disposed of\n+     *\/\n+    public static synchronized void addTestWindow(Collection<? extends Window> testWindows) {\n+        windowList.addAll(testWindows);\n+    }\n+\n@@ -654,1 +770,1 @@\n-        private Window testWindow;\n+        private List<? extends Window> testWindows;\n@@ -656,1 +772,4 @@\n-        public Position position;\n+        private PositionWindows positionWindows;\n+        private InstructionUI instructionUIHandler;\n+\n+        private Position position;\n@@ -689,1 +808,17 @@\n-            if (windowCreator != null && window != null) {\n+            return testUI(List.of(window));\n+        }\n+\n+        public Builder testUI(Window... windows) {\n+            return testUI(List.of(windows));\n+        }\n+\n+        public Builder testUI(List<Window> windows) {\n+            if (windows == null) {\n+                throw new IllegalArgumentException(\"The list of windows can't be null\");\n+            }\n+            if (windows.stream()\n+                       .anyMatch(Objects::isNull)) {\n+                throw new IllegalArgumentException(\"The windows list can't contain null\");\n+            }\n+\n+            if (windowCreator != null) {\n@@ -692,1 +827,1 @@\n-            this.testWindow = window;\n+            this.testWindows = windows;\n@@ -697,2 +832,5 @@\n-            if (testWindow != null && windowCreator != null) {\n-                throw new IllegalStateException(\"testWindow is already set\");\n+            if (windowCreator == null) {\n+                throw new IllegalArgumentException(\"The window creator can't be null\");\n+            }\n+            if (testWindows != null) {\n+                throw new IllegalStateException(\"testWindows are already set\");\n@@ -704,0 +842,5 @@\n+        public Builder positionTestUI(PositionWindows positionWindows) {\n+            this.positionWindows = positionWindows;\n+            return this;\n+        }\n+\n@@ -716,2 +859,2 @@\n-            if (this.title == null) {\n-                this.title = TITLE;\n+            if (title == null) {\n+                title = TITLE;\n@@ -720,3 +863,3 @@\n-            if (this.instructions == null || this.instructions.length() == 0) {\n-                throw new RuntimeException(\"Please provide the test \" +\n-                        \"instruction for this manual test\");\n+            if (instructions == null || instructions.isEmpty()) {\n+                throw new IllegalStateException(\"Please provide the test \" +\n+                        \"instructions for this manual test\");\n@@ -725,2 +868,2 @@\n-            if (this.testTimeOut == 0L) {\n-                this.testTimeOut = TEST_TIMEOUT;\n+            if (testTimeOut == 0L) {\n+                testTimeOut = TEST_TIMEOUT;\n@@ -729,2 +872,2 @@\n-            if (this.rows == 0) {\n-                this.rows = ROWS;\n+            if (rows == 0) {\n+                rows = ROWS;\n@@ -733,2 +876,2 @@\n-            if (this.columns == 0) {\n-                this.columns = COLUMNS;\n+            if (columns == 0) {\n+                columns = COLUMNS;\n@@ -738,1 +881,1 @@\n-                && (testWindow != null || windowCreator != null)) {\n+                && (testWindows != null || windowCreator != null)) {\n@@ -742,0 +885,40 @@\n+\n+            if (positionWindows != null) {\n+                if (testWindows == null && windowCreator == null) {\n+                    throw new IllegalStateException(\"To position windows, \"\n+                            + \"provide an a list of windows to the builder\");\n+                }\n+                instructionUIHandler = new InstructionUIHandler();\n+            }\n+        }\n+\n+        private final class InstructionUIHandler implements InstructionUI {\n+            @Override\n+            public Point getLocation() {\n+                return frame.getLocation();\n+            }\n+\n+            @Override\n+            public Dimension getSize() {\n+                return frame.getSize();\n+            }\n+\n+            @Override\n+            public Rectangle getBounds() {\n+                return frame.getBounds();\n+            }\n+\n+            @Override\n+            public void setLocation(Point location) {\n+                setLocation(location.x, location.y);\n+            }\n+\n+            @Override\n+            public void setLocation(int x, int y) {\n+                frame.setLocation(x, y);\n+            }\n+\n+            @Override\n+            public Position getPosition() {\n+                return position;\n+            }\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":241,"deletions":58,"binary":false,"changes":299,"status":"modified"}]}