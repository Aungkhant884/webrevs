{"files":[{"patch":"@@ -38,0 +38,1 @@\n+import java.awt.event.WindowListener;\n@@ -175,9 +176,6 @@\n-                          boolean enableScreenCapture) throws InterruptedException,\n-            InvocationTargetException {\n-        if (isEventDispatchThread()) {\n-            createUI(title, instructions, testTimeOut, rows, columns,\n-                     enableScreenCapture);\n-        } else {\n-            invokeAndWait(() -> createUI(title, instructions, testTimeOut,\n-                    rows, columns, enableScreenCapture));\n-        }\n+                          boolean enableScreenCapture)\n+            throws InterruptedException, InvocationTargetException {\n+        invokeOnEDT(() -> createUI(title, instructions,\n+                                   testTimeOut,\n+                                   rows, columns,\n+                                   enableScreenCapture));\n@@ -189,1 +187,35 @@\n-                builder.rows, builder.columns, builder.screenCapture);\n+             builder.rows, builder.columns, builder.screenCapture);\n+\n+        if (builder.windowCreator != null) {\n+            invokeOnEDT(() ->\n+                    builder.testWindow = builder.windowCreator.createTestUI());\n+        }\n+\n+        if (builder.testWindow != null) {\n+            addTestWindow(builder.testWindow);\n+            builder.testWindow.addWindowListener(windowClosingHandler);\n+            positionTestWindow(builder.testWindow, builder.position);\n+\n+            invokeOnEDT(() -> windowList.forEach(w -> w.setVisible(true)));\n+        }\n+    }\n+\n+    \/**\n+     * Performs an operation on EDT. If called on EDT, invokes {@code run}\n+     * directly, otherwise wraps into {@code invokeAndWait}.\n+     *\n+     * @param doRun an operation to run on EDT\n+     * @throws InterruptedException if we're interrupted while waiting for\n+     *              the event dispatching thread to finish executing\n+     *              {@code doRun.run()}\n+     * @throws InvocationTargetException if an exception is thrown while\n+     *              running {@code doRun}\n+     * @see javax.swing.SwingUtilities#invokeAndWait(Runnable)\n+     *\/\n+    private static void invokeOnEDT(Runnable doRun)\n+            throws InterruptedException, InvocationTargetException {\n+        if (isEventDispatchThread()) {\n+            doRun.run();\n+        } else {\n+            invokeAndWait(doRun);\n+        }\n@@ -244,10 +276,1 @@\n-        frame.addWindowListener(new WindowAdapter() {\n-            @Override\n-            public void windowClosing(WindowEvent e) {\n-                super.windowClosing(e);\n-                testFailedReason = FAILURE_REASON\n-                                   + \"User closed the instruction Frame\";\n-                failed = true;\n-                latch.countDown();\n-            }\n-        });\n+        frame.addWindowListener(windowClosingHandler);\n@@ -287,0 +310,21 @@\n+\n+    @FunctionalInterface\n+    public interface WindowCreator {\n+        Window createTestUI();\n+    }\n+\n+\n+    private static final class WindowClosingHandler extends WindowAdapter {\n+        @Override\n+        public void windowClosing(WindowEvent e) {\n+            testFailedReason = FAILURE_REASON\n+                               + \"User closed a window\";\n+            failed = true;\n+            latch.countDown();\n+        }\n+    }\n+\n+    private static final WindowListener windowClosingHandler =\n+            new WindowClosingHandler();\n+\n+\n@@ -412,2 +456,2 @@\n-     * Dispose all the window(s) i,e both the test instruction frame and\n-     * the window(s) that is added via addTestWindow(Window testWindow)\n+     * Disposes of all the windows. It disposes of the test instruction frame\n+     * and all other windows added via {@link #addTestWindow(Window)}.\n@@ -416,3 +460,1 @@\n-        for (Window win : windowList) {\n-            win.dispose();\n-        }\n+        windowList.forEach(Window::dispose);\n@@ -556,7 +598,1 @@\n-        if (isEventDispatchThread()) {\n-            bounds[0] = frame != null ? frame.getBounds() : null;\n-        } else {\n-            invokeAndWait(() -> {\n-                bounds[0] = frame != null ? frame.getBounds() : null;\n-            });\n-        }\n+        invokeOnEDT(() -> bounds[0] = frame != null ? frame.getBounds() : null);\n@@ -610,1 +646,1 @@\n-    public static class Builder {\n+    public static final class Builder {\n@@ -616,1 +652,5 @@\n-        private boolean screenCapture = false;\n+        private boolean screenCapture;\n+\n+        private Window testWindow;\n+        private WindowCreator windowCreator;\n+        public Position position;\n@@ -648,0 +688,21 @@\n+        public Builder testUI(Window window) {\n+            if (windowCreator != null && window != null) {\n+                throw new IllegalStateException(\"windowCreator is already set\");\n+            }\n+            this.testWindow = window;\n+            return this;\n+        }\n+\n+        public Builder testUI(WindowCreator windowCreator) {\n+            if (testWindow != null && windowCreator != null) {\n+                throw new IllegalStateException(\"testWindow is already set\");\n+            }\n+            this.windowCreator = windowCreator;\n+            return this;\n+        }\n+\n+        public Builder position(Position position) {\n+            this.position = position;\n+            return this;\n+        }\n+\n@@ -675,0 +736,6 @@\n+\n+            if (position == null\n+                && (testWindow != null || windowCreator != null)) {\n+\n+                position = Position.HORIZONTAL;\n+            }\n@@ -677,0 +744,4 @@\n+\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":105,"deletions":34,"binary":false,"changes":139,"status":"modified"}]}