{"files":[{"patch":"@@ -74,0 +74,73 @@\n+\/**\n+ * Provides a framework for manual tests to display test instructions and\n+ * Pass\/Fail buttons.\n+ * <p>\n+ * Instructions for the user can be either plain text or HTML as supported\n+ * by Swing. If the instructions start with {@code <html>}, the\n+ * instructions are displayed as HTML.\n+ * <p>\n+ * A simple test would look like this:\n+ * <pre>{@code\n+ * public class SampleManualTest {\n+ *     private static final String INSTRUCTIONS =\n+ *             \"Click Pass, or click Fail if the test failed.\";\n+ *\n+ *     public static void main(String[] args) throws Exception {\n+ *         PassFailJFrame.builder()\n+ *                       .instructions(INSTRUCTIONS)\n+ *                       .testUI(() -> createTestUI())\n+ *                       .build()\n+ *                       .awaitAndCheck();\n+ *     }\n+ *\n+ *     private static List<Window> createTestUI() {\n+ *         JFrame testUI = new JFrame(\"Test UI\");\n+ *         testUI.setSize(250, 150);\n+ *         return List.of(testUI);\n+ *     }\n+ * }\n+ * }<\/pre>\n+ * <p>\n+ * The above example uses the {@link Builder Builder} to set the parameters of\n+ * the instruction frame. It is the recommended way.\n+ * <p>\n+ * The framework will create instruction UI, it will call\n+ * the provided {@code createTestUI} on the Event Dispatch Thread (EDT),\n+ * and it will automatically position the test UI and make it visible.\n+ * <p>\n+ * Alternatively, use one of the {@code PassFailJFrame} constructors to\n+ * create an object, then create secondary test UI, register it\n+ * with {@code PassFailJFrame}, position it and make it visible.\n+ * The following sample demonstrates it:\n+ * <pre>{@code\n+ * public class SampleOldManualTest {\n+ *     private static final String INSTRUCTIONS =\n+ *             \"Click Pass, or click Fail if the test failed.\";\n+ *\n+ *     public static void main(String[] args) throws Exception {\n+ *         PassFailJFrame passFail = new PassFailJFrame(INSTRUCTIONS);\n+ *\n+ *         SwingUtilities.invokeAndWait(() -> createTestUI());\n+ *\n+ *         passFail.awaitAndCheck();\n+ *     }\n+ *\n+ *     private static void createTestUI() {\n+ *         JFrame testUI = new JFrame(\"Test UI\");\n+ *         testUI.setSize(250, 150);\n+ *         PassFailJFrame.addTestWindow(testUI);\n+ *         PassFailJFrame.positionTestWindow(testUI, PassFailJFrame.Position.HORIZONTAL);\n+ *         testUI.setVisible(true);\n+ *     }\n+ * }\n+ * }<\/pre>\n+ * <p>\n+ * Use methods of the {@code Builder} class or constructors of the\n+ * {@code PassFailJFrame} class to control other parameters:\n+ * <ul>\n+ *     <li>the title of the instruction UI,<\/li>\n+ *     <li>the timeout of the test,<\/li>\n+ *     <li>the size of the instruction UI via rows and columns, and<\/li>\n+ *     <li>to enable screenshots.<\/li>\n+ * <\/ul>\n+ *\/\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"modified"}]}