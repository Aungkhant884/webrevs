{"files":[{"patch":"@@ -763,0 +763,60 @@\n+\n+\n+    \/**\n+     * {@return the file object for this element or {@code null} if\n+     * there is no such file object}\n+     *\n+     * <p>The returned file object is for the reference representation\n+     * of the information used to construct the element. For example,\n+     * if during compilation or annotation processing, a source file\n+     * for class {@code Foo} is compiled into a class file, the file\n+     * object returned for the element representing {@code Foo} would\n+     * be for the source file and <em>not<\/em> for the class file.\n+     *\n+     * <p>An implementation may choose to not support the functionality\n+     * of this method, in which case {@link\n+     * UnsupportedOperationException} is thrown.\n+     *\n+     * <p>In the context of annotation processing, a non-{@code null}\n+     * value is returned if the element was included as part of the\n+     * initial inputs or the containing file was created during the\n+     * run of the annotation processing tool. Otherwise, {@code null}\n+     * is returned. In annotation processing, if a {@linkplain\n+     * javax.annotation.processing.Filer#createClassFile class file is\n+     * created}, that class file can serve as the reference\n+     * representation for elements.\n+     *\n+     * <p>If it has a file object, the file object for a package will\n+     * be a {@code package-info} file. A package may exist and not\n+     * have any {@code package-info} file even if the package is\n+     * (implicitly) created during an annotation processing run from\n+     * the creation of source or class files in that package.\n+     *\n+     * <p>If it has a file object, the file object for a module will\n+     * be a {@code module-info} file.\n+     *\n+     * <p>For other kinds of elements, if they have a file object, the\n+     * file object will be the object associated with the outermost\n+     * class or interface of the element. For top-level classes and\n+     * interfaces, the name of the file object will commonly contain\n+     * the name of the top-level class or interface. For example, for\n+     * class {@code Foo}, its file name could contain \"{@code\n+     * Foo.java}\". Note however that a single source file can contain\n+     * multiple top-level files so this pattern so this relationship\n+     * does not always hold.\n+     *\n+     * @implSpec The default implementation unconditionally throws\n+     * {@link UnsupportedOperationException}.\n+     *\n+     * @throws UnsupportedOperationException if this functionality is not supported\n+     *\n+     * @param e the element to find a file object for\n+     * @since 18\n+     *\/\n+    default javax.tools.JavaFileObject getFileObjectOf(Element e) {\n+        \/\/ Note to reviewers: if this work is done after 8140442: \"Add\n+        \/\/ getOutermostTypeElement to javax.lang.model utility class\",\n+        \/\/ the operational specs can be rephrased in terms of that\n+        \/\/ method.\n+        throw new UnsupportedOperationException();\n+    }\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/Elements.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -730,0 +730,14 @@\n+    @Override @DefinedBy(Api.LANGUAGE_MODEL)\n+    public javax.tools.JavaFileObject getFileObjectOf(Element e) {\n+        return switch(e.getKind()) {\n+            case PACKAGE -> ((PackageSymbol)e).sourcefile;\n+            \/\/ TODO: ModuleSymbol doesn't directly have a JavaFileObject field at present.\n+            case MODULE  -> null;\n+            \/\/ TODO: this is likely not quite right for nested types\n+            \/\/ that have already been compiled; their class file\n+            \/\/ should be their own class file rather than the class\n+            \/\/ file for the outermost class.\n+            default      -> ((Symbol)e).outermostClass().classfile;\n+        };\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/JavacElements.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"}]}