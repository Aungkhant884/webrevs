{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/Filer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/ExecutableElement.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -770,6 +770,8 @@\n-     * <p>The returned file object is for the <a href=\"..\/element\/package-summary.html#accurate_model\">reference representation<\/a>\n-     * of the information used to construct the element. For example,\n-     * if during compilation or annotation processing, a source file\n-     * for class {@code Foo} is compiled into a class file, the file\n-     * object returned for the element representing {@code Foo} would\n-     * be for the source file and <em>not<\/em> for the class file.\n+     * <p>The returned file object is for the <a\n+     * href=\"..\/element\/package-summary.html#accurate_model\">reference\n+     * representation<\/a> of the information used to construct the\n+     * element. For example, if during compilation or annotation\n+     * processing, a source file for class {@code Foo} is compiled\n+     * into a class file, the file object returned for the element\n+     * representing {@code Foo} would be for the source file and\n+     * <em>not<\/em> for the class file.\n@@ -784,5 +786,5 @@\n-     * run of the annotation processing tool. Otherwise, a {@code null}\n-     * may be returned. In annotation processing, if a {@linkplain\n-     * javax.annotation.processing.Filer#createClassFile class file is\n-     * created}, that class file can serve as the reference\n-     * representation for elements.\n+     * run of the annotation processing tool. Otherwise, a {@code\n+     * null} may be returned. In annotation processing, if a\n+     * {@linkplain javax.annotation.processing.Filer#createClassFile\n+     * class file is created}, that class file can serve as the\n+     * reference representation for elements.\n@@ -794,3 +796,3 @@\n-     * the creation of source or class files in that package.\n-     * An {@linkplain PackageElement#isUnnamed unnamed package} will have a\n-     * null file since it cannot be declared in a compilation unit.\n+     * the creation of source or class files in that package.  An\n+     * {@linkplain PackageElement#isUnnamed unnamed package} will have\n+     * a null file since it cannot be declared in a compilation unit.\n@@ -799,4 +801,4 @@\n-     * be a {@code module-info} file.\n-     * An {@linkplain ModuleElement#isUnnamed unnamed module} will have a\n-     * null file since it cannot be declared in a compilation unit.\n-     * An {@linkplain #isAutomaticModule automatic module} will have a\n+     * be a {@code module-info} file.  An {@linkplain\n+     * ModuleElement#isUnnamed unnamed module} will have a null file\n+     * since it cannot be declared in a compilation unit.  An\n+     * {@linkplain #isAutomaticModule automatic module} will have a\n@@ -808,4 +810,4 @@\n-     * typically the leading portion of the name of the file will match\n-     * the name of the class or interface. A single compilation unit\n-     * can define multiple top-level classes and interfaces, such as a\n-     * primary {@code public} class or interfaces whose name\n+     * typically the leading portion of the name of the file will\n+     * match the name of the class or interface. A single compilation\n+     * unit can define multiple top-level classes and interfaces, such\n+     * as a primary {@code public} class or interfaces whose name\n@@ -815,8 +817,7 @@\n-     * representation of an auxiliary class or interface, the file\n-     * for the primary class is returned. (An auxiliary class or\n-     * interface can also be defined in a {@code package-info} source\n-     * file, in which case the file for the {@code package-info} file\n-     * is returned.)\n-     * If a class file is providing\n-     * the reference representation of an auxiliary class or interface,\n-     * the separate class file for the auxiliary class is returned.\n+     * representation of an auxiliary class or interface, the file for\n+     * the primary class is returned. (An auxiliary class or interface\n+     * can also be defined in a {@code package-info} source file, in\n+     * which case the file for the {@code package-info} file is\n+     * returned.)  If a class file is providing the reference\n+     * representation of an auxiliary class or interface, the separate\n+     * class file for the auxiliary class is returned.\n@@ -834,1 +835,2 @@\n-     * the file object for be for the nested class or interface itself\n+     * the file object will be that of the nested class or interface\n+     * itself\n@@ -843,2 +845,2 @@\n-     * Element#getEnclosingElement() enclosing element} of the nested\n-     * element.\n+     * Element#getEnclosingElement() enclosing element} of the\n+     * lexically enclosed element.\n@@ -849,1 +851,2 @@\n-     * @throws UnsupportedOperationException if this functionality is not supported\n+     * @throws UnsupportedOperationException if this functionality is\n+     * not supported\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/Elements.java","additions":37,"deletions":34,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Enter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}