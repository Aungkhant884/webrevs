{"files":[{"patch":"@@ -30,1 +30,1 @@\n-\/\/ The only limitation there is is from the G1CardSetArray.\n+\/\/ The only limitation is from the G1CardSetArray.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetContainers.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-   \/\/ Log of largest card index that can be stored in any G1CardSetContainer\n+  \/\/ Log of largest card index that can be stored in any G1CardSetContainer\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetContainers.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1675,1 +1675,1 @@\n-  HeapRegionRemSet::initialize(_reserved.start());\n+  HeapRegionRemSet::initialize(_reserved);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"runtime\/java.hpp\"\n@@ -46,1 +47,1 @@\n-uintptr_t HeapRegionRemSet::_split_card_mask = 0;\n+size_t HeapRegionRemSet::_split_card_mask = 0;\n@@ -52,4 +53,24 @@\n-void HeapRegionRemSet::initialize(HeapWord* heap_base_address) {\n-  _split_card_shift = MIN2((uint)HeapRegion::LogCardsPerRegion, G1CardSetContainer::LogCardsPerRegionLimit) + CardTable::card_shift;\n-  _split_card_mask = ((uintptr_t)1 << _split_card_shift) - 1;\n-  _heap_base_address = heap_base_address;\n+void HeapRegionRemSet::initialize(MemRegion reserved) {\n+  const uint BitsInUint = sizeof(uint) * BitsPerByte;\n+  const uint CardBitsWithinCardRegion = MIN2((uint)HeapRegion::LogCardsPerRegion, G1CardSetContainer::LogCardsPerRegionLimit);\n+\n+  \/\/ Check if the number of cards within a region fits an uint.\n+  if (CardBitsWithinCardRegion > BitsInUint) {\n+    vm_exit_during_initialization(\"Can not represent all cards in a card region within uint.\");\n+  }\n+\n+  _split_card_shift = CardBitsWithinCardRegion + CardTable::card_shift;\n+  _split_card_mask = ((size_t)1 << _split_card_shift) - 1;\n+\n+  \/\/ Check if the card region\/region within cards combination can cover the heap.\n+  const uint HeapSizeBits = log2i_exact(round_up_power_of_2(reserved.byte_size()));\n+  if (HeapSizeBits > (BitsInUint + _split_card_shift)) {\n+    FormatBuffer<> fmt(\"Can not represent all cards in the heap with card region\/card within region. \"\n+                       \"Heap %zuB (%u bits) Remembered set covers %u bits.\",\n+                       reserved.byte_size(),\n+                       HeapSizeBits,\n+                       BitsInUint + _split_card_shift);\n+    vm_exit_during_initialization(fmt, \"Decrease heap size.\");\n+  }\n+\n+  _heap_base_address = reserved.start();\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.cpp","additions":26,"deletions":5,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  static uintptr_t _split_card_mask;\n+  static size_t _split_card_mask;\n@@ -92,1 +92,1 @@\n-  static void initialize(HeapWord* heap_base_address);\n+  static void initialize(MemRegion reserved);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-  uintptr_t offset = pointer_delta(from, _heap_base_address, 1);\n+  size_t offset = pointer_delta(from, _heap_base_address, 1);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}