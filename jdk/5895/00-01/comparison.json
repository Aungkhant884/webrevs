{"files":[{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+\n+#include \"gc\/g1\/g1CardSetContainers.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+\/\/ The only limitation there is is from the G1CardSetArray.\n+uint G1CardSetContainer::LogCardsPerRegionLimit = sizeof(G1CardSetArray::EntryDataType) * BitsPerByte;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetContainers.cpp","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -182,1 +182,2 @@\n-  static uint max_card_bits_storable();\n+  \/\/ The only limitation there is is from the G1CardSetArray.\n+  static uint LogCardsPerRegionLimit;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetContainers.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,5 +32,0 @@\n-inline uint G1CardSetContainer::max_card_bits_storable() {\n-  \/\/ The only limitation there is is from the G1CardSetArray.\n-  return sizeof(G1CardSetArray::EntryDataType) * BitsPerByte;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetContainers.inline.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  _split_card_shift = MIN2((uint)HeapRegion::LogCardsPerRegion, per_card_region_card_limit()) + CardTable::card_shift;\n+  _split_card_shift = MIN2((uint)HeapRegion::LogCardsPerRegion, G1CardSetContainer::LogCardsPerRegionLimit) + CardTable::card_shift;\n@@ -58,4 +58,0 @@\n-uint HeapRegionRemSet::per_card_region_card_limit() {\n-  return G1CardSetContainer::max_card_bits_storable();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,3 +67,0 @@\n-  \/\/ Maximum number of cards in a (card) region storable in the remembered set in bits.\n-  static uint per_card_region_card_limit();\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  assert(card_within_region < ((uint)1 << per_card_region_card_limit()), \"must be\");\n+  assert(card_within_region < ((uint)1 << G1CardSetContainer::LogCardsPerRegionLimit), \"must be\");\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}