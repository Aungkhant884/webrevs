{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,4 +47,1 @@\n-    private static final int PARAM_COUNT_MASK = 0x00FF;\n-    private static final int NONZERO_BIT = 0x8000_0000;\n-\n-    private final int paramFlags;\n+    private final int paramCount;\n@@ -54,1 +51,1 @@\n-        this.paramFlags = (ctor.getParameterCount() & PARAM_COUNT_MASK) | NONZERO_BIT;\n+        this.paramCount = ctor.getParameterCount();\n@@ -61,3 +58,1 @@\n-        \/\/ only check argument count for specialized forms\n-        int paramCount = paramFlags & PARAM_COUNT_MASK;\n-        if (paramCount <= SPECIALIZED_PARAM_COUNT && argc != paramCount) {\n+        if (argc != paramCount) {\n@@ -90,1 +85,1 @@\n-        return switch (paramFlags & PARAM_COUNT_MASK) {\n+        return switch (paramCount) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/DirectConstructorHandleAccessor.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import static jdk.internal.reflect.MethodHandleAccessorFactory.SPECIALIZED_PARAM_COUNT;\n@@ -332,3 +331,0 @@\n-        \/\/ only check argument count for specialized forms\n-        if (paramCount > SPECIALIZED_PARAM_COUNT) return;\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/DirectMethodHandleAccessor.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8271820\n+ * @bug 8271820 8300924\n@@ -58,0 +58,2 @@\n+    static final boolean newImpl = Boolean.getBoolean(\"jdk.reflect.useDirectMethodHandle\");\n+\n@@ -71,0 +73,6 @@\n+    public static void public_static_V_L3(Object o1, Object o2, Object o3) { }\n+\n+    public static void public_static_V_L4(Object o1, Object o2, Object o3, Object o4) { }\n+\n+    public static void public_V_L5(Object o1, Object o2, Object o3, Object o4, Object o5) { }\n+\n@@ -149,0 +157,8 @@\n+        public Public(Object o1, Object o2, Object o3) {\n+            this(\"3-arg constructor\");\n+        }\n+\n+        public Public(Object o1, Object o2, Object o3, Object o4) {\n+            this(\"4-arg constructor\");\n+        }\n+\n@@ -408,0 +424,4 @@\n+\n+    private static final Throwable[] wrong_argument_count_zero_args = new Throwable[] {\n+            new IllegalArgumentException(\"wrong number of arguments: 0 expected:\")\n+    };\n@@ -465,1 +485,0 @@\n-        boolean newImpl = Boolean.getBoolean(\"jdk.reflect.useDirectMethodHandle\");\n@@ -496,0 +515,21 @@\n+    @DataProvider(name = \"testMultiArgMethods\")\n+    private Object[][] testMultiArgMethods() {\n+        MethodHandleAccessorsTest inst = new MethodHandleAccessorsTest();\n+        Class<?>[] params_L3 = new Class<?>[] { Object.class, Object.class, Object.class};\n+        Class<?>[] params_L4 = new Class<?>[] { Object.class, Object.class, Object.class, Object.class};\n+        Class<?>[] params_L5 = new Class<?>[] { Object.class, Object.class, Object.class, Object.class, Object.class};\n+\n+        return new Object[][]{\n+                new Object[]{\"public_static_V_L3\", params_L3, null, new Object[3], null, noException},\n+                new Object[]{\"public_static_V_L4\", params_L4, null, new Object[4], null, noException},\n+                new Object[]{\"public_V_L5\", params_L5, inst, new Object[5], null, noException},\n+                \/\/ wrong arguments\n+                new Object[]{\"public_static_V_L3\", params_L3, null, null, null,\n+                             newImpl ? wrong_argument_count_zero_args : wrong_argument_count_no_details},\n+                new Object[]{\"public_static_V_L4\", params_L4, null, new Object[0], null,\n+                             newImpl ? wrong_argument_count_zero_args : wrong_argument_count_no_details},\n+                new Object[]{\"public_V_L5\", params_L5, inst, null, null,\n+                             newImpl ? wrong_argument_count_zero_args : wrong_argument_count_no_details},\n+        };\n+    }\n+\n@@ -526,0 +566,6 @@\n+    @Test(dataProvider = \"testMultiArgMethods\")\n+    public void testMultiArgMethod(String methodname, Class<?>[] paramTypes, Object target, Object[] args,\n+                                 Object expectedReturn, Throwable[] expectedExpections) throws Exception {\n+        doTest(MethodHandleAccessorsTest.class.getDeclaredMethod(methodname, paramTypes), target, args, expectedReturn, expectedExpections);\n+    }\n+\n@@ -564,0 +610,20 @@\n+    @DataProvider(name = \"testMultiArgConstructors\")\n+    private Object[][] testMultiArgConstructors() {\n+        Class<?>[] params_L3 = new Class<?>[] { Object.class, Object.class, Object.class};\n+        Class<?>[] params_L4 = new Class<?>[] { Object.class, Object.class, Object.class, Object.class};\n+        Object o = \"arg\";\n+        return new Object[][]{\n+                new Object[]{params_L3, new Object[3], new Public(o, o, o), noException},\n+                new Object[]{params_L4, new Object[4], new Public(o, o, o, o), noException},\n+                new Object[]{params_L3, new Object[]{}, null,\n+                             newImpl ? wrong_argument_count_zero_args : wrong_argument_count_no_details},\n+                new Object[]{params_L4, null, null,\n+                             newImpl ? wrong_argument_count_zero_args : wrong_argument_count_no_details},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"testMultiArgConstructors\")\n+    public void testMultiArgConstructors(Class<?>[] paramTypes, Object[] args, Object expectedReturn, Throwable[] expectedExpections) throws Exception {\n+        doTest(Public.class.getDeclaredConstructor(paramTypes), args, expectedReturn, expectedExpections);\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/MethodHandleAccessorsTest.java","additions":69,"deletions":3,"binary":false,"changes":72,"status":"modified"}]}