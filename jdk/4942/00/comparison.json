{"files":[{"patch":"@@ -665,1 +665,1 @@\n-  SourceObjInfo* p = _src_obj_table.get(src_obj);\n+  const SourceObjInfo* p = _src_obj_table.get(src_obj);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-  void init(LambdaProxyClassKey& key, DumpTimeLambdaProxyClassInfo& info) {\n+  void init(LambdaProxyClassKey const& key, DumpTimeLambdaProxyClassInfo& info) {\n","filename":"src\/hotspot\/share\/cds\/lambdaProxyClassDictionary.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -771,1 +771,1 @@\n-  dumped_interned_strings->iterate(&copier);\n+  dumped_interned_strings->const_iterate(&copier);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -734,1 +734,1 @@\n-  bool do_entry(LambdaProxyClassKey& key, DumpTimeLambdaProxyClassInfo& info) {\n+  bool do_entry(LambdaProxyClassKey const& key, DumpTimeLambdaProxyClassInfo& info) {\n@@ -738,1 +738,1 @@\n-      key.metaspace_pointers_do(_it);\n+      const_cast<LambdaProxyClassKey&>(key).metaspace_pointers_do(_it);\n@@ -1213,1 +1213,1 @@\n-  bool do_entry(LambdaProxyClassKey& key, DumpTimeLambdaProxyClassInfo& info) {\n+  bool do_entry(LambdaProxyClassKey const& key, DumpTimeLambdaProxyClassInfo& info) {\n@@ -1239,1 +1239,1 @@\n-  bool do_entry(LambdaProxyClassKey& key, DumpTimeLambdaProxyClassInfo& info) {\n+  bool do_entry(LambdaProxyClassKey const& key, DumpTimeLambdaProxyClassInfo& info) {\n@@ -1562,1 +1562,1 @@\n-  bool do_entry(LambdaProxyClassKey& key, DumpTimeLambdaProxyClassInfo& info) {\n+  bool do_entry(LambdaProxyClassKey const& key, DumpTimeLambdaProxyClassInfo& info) {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-  Node** table() const {\n+  Node** table() {\n","filename":"src\/hotspot\/share\/utilities\/resizeableResourceHash.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  Node** bucket_at(unsigned index) const {\n+  Node** bucket_at(unsigned index) {\n@@ -64,0 +64,4 @@\n+  const Node** bucket_at(unsigned index) const {\n+    return const_cast<Node const**>(const_cast<ResourceHashtableBase*>(this)->bucket_at(index));\n+  }\n+\n@@ -79,3 +83,4 @@\n-  Node const** lookup_node(unsigned hash, K const& key) const {\n-    return const_cast<Node const**>(\n-        const_cast<ResourceHashtableBase*>(this)->lookup_node(hash, key));\n+  Node** table() { return STORAGE::table(); }\n+\n+  Node const** table() const {\n+    return const_cast<Node const**>(const_cast<ResourceHashtableBase*>(this)->table());\n@@ -85,2 +90,0 @@\n-  Node** table() const { return STORAGE::table(); }\n-\n@@ -112,1 +115,1 @@\n-    return get(key) != NULL;\n+    return const_cast<ResourceHashtableBase*>(this)->get(key) != NULL;\n@@ -115,1 +118,1 @@\n-  V* get(K const& key) const {\n+  V* get(K const& key) {\n@@ -117,1 +120,1 @@\n-    Node const** ptr = lookup_node(hv, key);\n+    Node** ptr = lookup_node(hv, key);\n@@ -119,1 +122,1 @@\n-      return const_cast<V*>(&(*ptr)->_value);\n+      return &((*ptr)->_value);\n@@ -125,0 +128,5 @@\n+  const V* get(K const& key) const {\n+    return const_cast<const V*>(const_cast<ResourceHashtableBase*>(this)->get(key));\n+  }\n+\n+\n@@ -196,9 +204,7 @@\n-  \/\/ ITER contains bool do_entry(K const&, V const&), which will be\n-  \/\/ called for each entry in the table.  If do_entry() returns false,\n-  \/\/ the iteration is cancelled.\n-  template<class ITER>\n-  void iterate(ITER* iter) const {\n-    Node* const* bucket = table();\n-    const unsigned sz = table_size();\n-    while (bucket < bucket_at(sz)) {\n-      Node* node = *bucket;\n+ private:\n+  template<class TABLE, class NODE, class VALUE, class ITER>\n+  static void iterate_impl(TABLE* t, ITER* iter) {\n+    NODE** bucket = t->table();\n+    const unsigned sz = t->table_size();\n+    while (bucket < t->bucket_at(sz)) {\n+      NODE* node = *bucket;\n@@ -206,1 +212,1 @@\n-        bool cont = iter->do_entry(node->_key, node->_value);\n+        bool cont = iter->do_entry(const_cast<K const&>(node->_key), const_cast<VALUE>(node->_value));\n@@ -213,0 +219,19 @@\n+ public:\n+  \/\/ bool ITER::do_entry(K const& key, V& value) will be\n+  \/\/ called for each entry in the table.  If do_entry() returns false,\n+  \/\/ the iteration is cancelled.\n+  \/\/\n+  \/\/ do_entry() may modify the value. However, it should not modify the key,\n+  \/\/ or else the table may no longer be properly hashed.\n+  template<class ITER>\n+  void iterate(ITER* iter) {\n+    return iterate_impl<ResourceHashtableBase, Node, V&, ITER>(this, iter);\n+  }\n+\n+  \/\/ Same as iterate(), except the callback should be\n+  \/\/ bool ITER::do_entry(K const& key, V const& value), and must not modify\n+  \/\/ the value.\n+  template<class ITER>\n+  void const_iterate(ITER* iter) const {\n+    return iterate_impl<ResourceHashtableBase const, Node const, V const&, ITER>(this, iter);\n+  }\n@@ -228,2 +253,2 @@\n-  Node** table() const {\n-    return const_cast<Node**>(_table);\n+  Node** table() {\n+    return _table;\n","filename":"src\/hotspot\/share\/utilities\/resourceHash.hpp","additions":47,"deletions":22,"binary":false,"changes":69,"status":"modified"}]}