{"files":[{"patch":"@@ -273,0 +273,3 @@\n+\/\/ Always evacuate out pinned regions (apart from object types that can actually be\n+\/\/ pinned by JNI) to allow faster future evacuation. We already \"paid\" for this work\n+\/\/ when sizing the young generation.\n@@ -320,0 +323,13 @@\n+\/\/ The current mechanism skips evacuation of pinned old regions like g1 does for\n+\/\/ young regions:\n+\/\/ * evacuating pinned marking collection set candidate regions (available during mixed\n+\/\/   gc) like young regions would not result in any memory gain but only take additional\n+\/\/   time away from processing regions that would actually result in memory being freed.\n+\/\/   To advance mixed gc progress (we committed to evacuate all marking collection set\n+\/\/   candidate regions within the maximum number of mixed gcs in the phase), move them\n+\/\/   to the optional collection set candidates to reclaim them asap as time permits.\n+\/\/ * evacuating out retained collection set candidates would also just take up time with\n+\/\/   no actual space freed in old gen. Better to concentrate on others.\n+\/\/   Retained collection set candidates are aged out, ie. made to regular old regions\n+\/\/   without remembered sets after a few attempts to save computation costs of keeping\n+\/\/   them candidates for very long living pinned regions.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -195,2 +195,2 @@\n-  \/\/ Select the old regions of the initial collection set and determine how many optional\n-  \/\/ regions we might be able to evacuate in this pause.\n+  \/\/ Select the regions comprising the initial and optional collection set from marking\n+  \/\/ and retained collection set candidates.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}