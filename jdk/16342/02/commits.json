[{"commit":{"message":"Move tests into gc.g1.pinnedobjs package"},"files":[{"filename":"test\/hotspot\/jtreg\/gc\/g1\/pinnedobjs\/TestPinnedHumongousFragmentation.java"},{"filename":"test\/hotspot\/jtreg\/gc\/g1\/pinnedobjs\/TestPinnedObjectContents.java"},{"filename":"test\/hotspot\/jtreg\/gc\/g1\/pinnedobjs\/TestPinnedObjectTypes.java"},{"filename":"test\/hotspot\/jtreg\/gc\/g1\/pinnedobjs\/TestPinnedObjectsEvacuation.java"},{"filename":"test\/hotspot\/jtreg\/gc\/g1\/pinnedobjs\/TestPinnedOldObjectsEvacuation.java"}],"sha":"1b1d8ba9dad88224632bfb1691541c67418518dd"},{"commit":{"message":"ayang review1"},"files":[{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.inline.hpp"}],"sha":"e66463995fe6986124f50370053663ecbf40c9f0"},{"commit":{"message":"Improve somewhat unstable test"},"files":[{"filename":"test\/hotspot\/jtreg\/gc\/g1\/pinnedobjs\/TestPinnedOldObjectsEvacuation.java"}],"sha":"b882dd60cbbdd9fa5c6fe61ca20e320803332dfb"},{"commit":{"message":"Fix typo in src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/HeapRegion.java so that resourcehogs\/serviceability\/sa\/ClhsdbRegionDetailsScanOopsForG1.java does not fail"},"files":[{"filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/HeapRegion.java"}],"sha":"fddb8912081c3584ed7785ad1d841d6b294ec07d"},{"commit":{"message":"Fix minimal build"},"files":[{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"}],"sha":"8b9e9a0e3a4ae148214c4e80c8219206b91d403a"},{"commit":{"message":"Region pinning in G1\/JEP-423\n\nThe JEP covers the idea very well, so I'm only covering some implementation details here:\n\n* regions get a \"pin count\" (reference count). As long as it is non-zero, we conservatively\n  never reclaim that region even if there is no reference in there. JNI code might have\n  references to it.\n\n* the JNI spec only requires us to provide pinning support for typeArrays, nothing else.\n  This implementation uses this in various ways:\n\n  * when evacuating from a pinned region, we evacuate everything live but the typeArrays to\n    get more empty regions to clean up later.\n\n  * when formatting dead space within pinned regions we use filler objects. Pinned regions\n    may be referenced by JNI code only, so we can't overwrite contents of any dead typeArray\n    either.\n    These dead but referenced typeArrays luckily have the same header size of our filler\n    objects, so we can use their headers for our fillers. The problem is that previously\n    there has been that restriction that filler objects are half a region size at most, so\n    we can end up with the need for placing a filler object header inside a typeArray.\n    The code could be clever and handle this situation by splitting the to be filled area\n    so that this can't happen, but the solution taken here is allowing filler arrays to\n    cover a whole region. They are not referenced by Java code anyway, so there is no harm\n    in doing so (i.e. gc code never touches them anyway).\n\n* G1 currently only ever actually evacuates young pinned regions. Old pinned regions of any kind\n  are never put into the collection set and automatically skipped. However assuming that the\n  pinning is of short length, we put them into the candidates when we can.\n\n  * there is the problem that if an applications pins a region for a long time g1 will skip\n    evacuating that region over and over. that may lead to issues with the current policy\n    in marking regions (only exit mixed phase when there are no marking candidates) and\n    just waste of processing time (when the candidate stays in the retained candidates)\n\n    The cop-out chosen here is to \"age out\" the regions from the candidates and wait until\n    the next marking happens.\n\n    I.e. pinned marking candidates are immediately moved to retained candidates, and if\n    in total the region has been pinned for `G1NumCollectionsKeepUnreclaimable` collections\n    it is dropped from the candidates. Its current value is fairly random.\n\n* G1 pauses got a new tag if there were pinned regions in the collection set. I.e. in addition\n  to something like:\n\n`GC(6) Pause Young (Normal) (Evacuation Failure) 1M->1M(22M) 36.16ms`\n\n  there is that new tag `(Pinned)` that indicates that one or more regions that were pinned\n  were encountered during gc. E.g.\n\n`GC(6) Pause Young (Normal) (Pinned) (Evacuation Failure) 1M->1M(22M) 36.16ms`\n\n  `Pinned` and `Evacuation Failure` tags are not exclusive. GC might have encountered both pinned\n  regions and evacuation failed regions in the same collection or even in the same region.\n\nwhitespace fixes"},"files":[{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetChooser.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailure.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCResetMetadataTask.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionAttr.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1MonitoringSupport.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1VMOperations.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/g1_globals.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.inline.hpp"},{"filename":"src\/hotspot\/share\/gc\/g1\/vmStructs_g1.hpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp"},{"filename":"src\/hotspot\/share\/prims\/whitebox.cpp"},{"filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp"},{"filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/HSDB.java"},{"filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/HeapRegion.java"},{"filename":"test\/hotspot\/jtreg\/ProblemList.txt"},{"filename":"test\/hotspot\/jtreg\/gc\/g1\/TestGCLogMessages.java"},{"filename":"test\/hotspot\/jtreg\/gc\/g1\/pinnedobjs\/TestPinnedHumongousFragmentation.java"},{"filename":"test\/hotspot\/jtreg\/gc\/g1\/pinnedobjs\/TestPinnedObjectContents.java"},{"filename":"test\/hotspot\/jtreg\/gc\/g1\/pinnedobjs\/TestPinnedObjectTypes.java"},{"filename":"test\/hotspot\/jtreg\/gc\/g1\/pinnedobjs\/TestPinnedObjectsEvacuation.java"},{"filename":"test\/hotspot\/jtreg\/gc\/g1\/pinnedobjs\/TestPinnedOldObjectsEvacuation.java"},{"filename":"test\/hotspot\/jtreg\/gc\/stress\/TestJNIBlockFullGC\/TestJNIBlockFullGC.java"},{"filename":"test\/hotspot\/jtreg\/gc\/stress\/TestJNIBlockFullGC\/libTestJNIBlockFullGC.c"},{"filename":"test\/hotspot\/jtreg\/gc\/stress\/gclocker\/TestExcessGCLockerCollections.java"},{"filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestGCLockerEvent.java"},{"filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java"}],"sha":"44d430a3ed54da2aa7d9adeaca37a309add96824"}]