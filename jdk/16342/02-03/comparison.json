{"files":[{"patch":"@@ -355,8 +355,2 @@\n-    \/\/ in that list have must have been pinned for at least two GCs and hence are\n-    \/\/ considered \"long lived\".\n-    \/\/ Two GCs because:\n-    \/\/ * the GC the region it has been put in the retained regions list. Either due\n-    \/\/   due to being a pinned young region or observing a real evacuation failure.\n-    \/\/ * (if it started off as marking region, the GC it has been moved to the\n-    \/\/   retained candidates)\n-    \/\/ * the GC it has been detected to be pinned (again), i.e. this GC.\n+    \/\/ in that list have must have been pinned for at least\n+    \/\/ G1NumCollectionsKeepUnreclaimable GCs and hence are considered \"long lived\".\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -45,0 +45,188 @@\n+class TestResultTracker {\n+    private int trackedRegion = -1;\n+    private String stdout;\n+    private int expectedMarkingSkipEvents;      \/\/ How many times has the region from the \"marking\" collection set candidate set been \"skipped\".\n+    private int expectedRetainedSkipEvents;     \/\/ How many times has the region from the \"retained\" collection set candidate set been \"skipped\".\n+    private int expectedDropEvents;             \/\/ How many times has the region from the \"retained\" collection set candidate set been \"dropped\".\n+    private int expectedMarkingReclaimEvents;   \/\/ How many times has the region from the \"marking\" collection set candidate set been put into the collection set.\n+    private int expectedRetainedReclaimEvents;  \/\/ How many times has the region from the \"marking\" collection set candidate set been put into the collection set.\n+\n+    TestResultTracker(String stdout,\n+                      int expectedMarkingSkipEvents,\n+                      int expectedRetainedSkipEvents,\n+                      int expectedDropEvents,\n+                      int expectedMarkingReclaimEvents,\n+                      int expectedRetainedReclaimEvents) {\n+        this.stdout = stdout;\n+        this.expectedMarkingSkipEvents = expectedMarkingSkipEvents;\n+        this.expectedRetainedSkipEvents = expectedRetainedSkipEvents;\n+        this.expectedDropEvents = expectedDropEvents;\n+        this.expectedMarkingReclaimEvents = expectedMarkingReclaimEvents;\n+        this.expectedRetainedReclaimEvents = expectedRetainedReclaimEvents;\n+    }\n+\n+    private void updateOrCompareCurRegion(String phase, int curRegion) {\n+        if (trackedRegion == -1) {\n+            trackedRegion = curRegion;\n+        } else {\n+            if (trackedRegion != curRegion) {\n+                Asserts.fail(\"Expected region \" + trackedRegion + \" to be used but is \" + curRegion);\n+            }\n+        }\n+    }\n+\n+    private void expectMoreMatches(Matcher matcher, String event) {\n+        if (!matcher.find()) {\n+            Asserts.fail(\"Expected one more \" + event);\n+        }\n+    }\n+\n+    private int expectIncreasingGC(Matcher matcher) {\n+        int nextGC = Integer.parseInt(matcher.group(1));\n+        if (nextGC <= curGC) {\n+            Asserts.fail(\"Non-increasing GC number from \" + curGC + \" to \" + nextGC);\n+        }\n+        return nextGC;\n+    }\n+\n+    \/\/ Verify log messages based on expected events.\n+    \/\/\n+    \/\/ There are two log messages printed with -Xlog:ergo+cset=trace that report about success or failure to\n+    \/\/ evacuate particular regions (in this case) due to pinning:\n+    \/\/\n+    \/\/   1) GC(<x>) Marking\/Retained candidate <region-idx> can not be reclaimed currently. Skipping\/Dropping.\n+    \/\/\n+    \/\/ and\n+    \/\/\n+    \/\/   2) GC(<x>) Finish adding retained\/marking candidates to collection set. Initial: <y> ... unreclaimable: <z>\n+    \/\/\n+    \/\/ 1) reports about whether the given region has been added to the collection set or not. The last word indicates whether the\n+    \/\/ region has been removed from the collection set candidates completely (\"Dropping\"), or just skipped for this collection\n+    \/\/ (\"Skipping\")\n+    \/\/\n+    \/\/ This message is printed for every such region, however since the test only pins a single object\/region and can only be\n+    \/\/ in one of the collection set candidate sets, there will be only one message per GC.\n+    \/\/\n+    \/\/ 2) reports statistics about how many regions were added to the initial collection set, optional collection set (not shown\n+    \/\/ here) and the amount of unreclaimable (pinned regions) for every kind of collection set candidate sets (\"marking\" or\n+    \/\/ \"retained\").\n+    \/\/\n+    \/\/ There are two such messages per GC.\n+    \/\/\n+    \/\/ The code below tracks that single pinned region through the various stages as defined by the policy.\n+    \/\/\n+    public void verify() throws Exception {\n+        final String skipDropEvents = \"GC\\\\((\\\\d+)\\\\).*(Marking|Retained) candidate (\\\\d+) can not be reclaimed currently\\\\. (Skipping|Dropping)\";\n+        final String reclaimEvents = \"GC\\\\((\\\\d+)\\\\) Finish adding (retained|marking) candidates to collection set\\\\. Initial: (\\\\d+).*unreclaimable: (\\\\d+)\";\n+\n+        Matcher skipDropMatcher = Pattern.compile(skipDropEvents, Pattern.MULTILINE).matcher(stdout);\n+        Matcher reclaimMatcher = Pattern.compile(reclaimEvents, Pattern.MULTILINE).matcher(stdout);\n+\n+        int curGC = -1;\n+        for (int i = 0; i < expectedMarkingSkipEvents; i++) {\n+            expectMoreMatches(skipDropMatcher, \"expectedMarkingSkipEvents\");\n+            curGC = expectIncreasingGC(skipDropMatcher);\n+\n+            Asserts.assertEQ(\"Marking\", skipDropMatcher.group(2), \"Expected \\\"Marking\\\" tag for GC \" + curGC + \" but got \\\"\" + skipDropMatcher.group(2) + \"\\\"\");\n+            updateOrCompareCurRegion(\"MarkingSkip\", Integer.parseInt(skipDropMatcher.group(3)));\n+            Asserts.assertEQ(\"Skipping\", skipDropMatcher.group(4), \"Expected \\\"Skipping\\\" tag for GC \" + curGC + \" but got \\\"\" + skipDropMatcher.group(4) + \"\\\"\");\n+\n+            while (true) {\n+                if (!reclaimMatcher.find()) {\n+                    Asserts.fail(\"Could not find \\\"Finish adding * candidates\\\" line for GC \" + curGC);\n+                }\n+                if (reclaimMatcher.group(2).equals(\"retained\")) {\n+                    continue;\n+                }\n+                if (Integer.parseInt(reclaimMatcher.group(1)) == curGC) {\n+                    int actual = Integer.parseInt(reclaimMatcher.group(4));\n+                    Asserts.assertEQ(actual, 1, \"Expected number of unreclaimable to be 1 after marking skip but is \" + actual);\n+                    break;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < expectedRetainedSkipEvents; i++) {\n+            expectMoreMatches(skipDropMatcher, \"expectedRetainedSkipEvents\");\n+            curGC = expectIncreasingGC(skipDropMatcher);\n+\n+            Asserts.assertEQ(\"Retained\", skipDropMatcher.group(2), \"Expected \\\"Retained\\\" tag for GC \" + curGC + \" but got \\\"\" + skipDropMatcher.group(2) + \"\\\"\");\n+            updateOrCompareCurRegion(\"RetainedSkip\", Integer.parseInt(skipDropMatcher.group(3)));\n+            Asserts.assertEQ(\"Skipping\", skipDropMatcher.group(4), \"Expected \\\"Skipping\\\" tag for GC \" + curGC + \" but got \\\"\" + skipDropMatcher.group(4) + \"\\\"\");\n+\n+            while (true) {\n+                if (!reclaimMatcher.find()) {\n+                    Asserts.fail(\"Could not find \\\"Finish adding * candidates\\\" line for GC \" + curGC);\n+                }\n+                if (reclaimMatcher.group(2).equals(\"marking\")) {\n+                    continue;\n+                }\n+                if (Integer.parseInt(reclaimMatcher.group(1)) == cur) {\n+                    int actual = Integer.parseInt(reclaimMatcher.group(4));\n+                    Asserts.assertEQ(actual, 1, \"Expected number of unreclaimable to be 1 after retained skip but is \" + actual);\n+                    break;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < expectedDropEvents; i++) {\n+            expectMoreMatches(skipDropMatcher, \"expectedDropEvents\");\n+            curGC = expectIncreasingGC(skipDropMatcher);\n+\n+            Asserts.assertEQ(\"Retained\", skipDropMatcher.group(2), \"Expected \\\"Retained\\\" tag for GC \" + curGC + \" but got \\\"\" + skipDropMatcher.group(2) + \"\\\"\");\n+            updateOrCompareCurRegion(\"RetainedDrop\", Integer.parseInt(skipDropMatcher.group(3)));\n+            Asserts.assertEQ(\"Dropping\", skipDropMatcher.group(4), \"Expected \\\"Dropping\\\" tag for GC \" + curGC + \" but got \\\"\" + skipDropMatcher.group(4) + \"\\\"\");\n+\n+            while (true) {\n+                if (!reclaimMatcher.find()) {\n+                    Asserts.fail(\"Could not find \\\"Finish adding * candidates\\\" line for GC \" + curGC);\n+                }\n+                if (reclaimMatcher.group(2).equals(\"marking\")) {\n+                    continue;\n+                }\n+                if (Integer.parseInt(reclaimMatcher.group(1)) == curGC) {\n+                    int actual = Integer.parseInt(reclaimMatcher.group(4));\n+                    if (actual != 1) {\n+                        Asserts.fail(\"Expected number of unreclaimable to be 1 after dropping but is \" + actual);\n+                    }\n+                    break;\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < expectedMarkingReclaimEvents; i++) {\n+            expectMoreMatches(reclaimMatcher, \"\\\"Finish adding * candidates\\\" line for GC \" + curGC);\n+\n+            int nextGC = Integer.parseInt(reclaimMatcher.group(1));\n+            curGC = nextGC;\n+            if (reclaimMatcher.group(2).equals(\"retained\")) {\n+                continue;\n+            }\n+\n+            if (Integer.parseInt(reclaimMatcher.group(1)) == nextGC) {\n+                int actual = Integer.parseInt(reclaimMatcher.group(4));\n+                if (actual != 0) {\n+                    Asserts.fail(\"Expected number of unreclaimable to be 0 after marking reclaim but is \" + actual);\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < expectedRetainedReclaimEvents; i++) {\n+            expectMoreMatches(reclaimMatcher, \"\\\"Finish adding * candidates\\\" line for GC \" + curGC);\n+\n+            int nextGC = Integer.parseInt(reclaimMatcher.group(1));\n+            curGC = nextGC;\n+            if (reclaimMatcher.group(2).equals(\"marking\")) {\n+                continue;\n+            }\n+\n+            if (Integer.parseInt(reclaimMatcher.group(1)) == nextGC) {\n+                int actual = Integer.parseInt(reclaimMatcher.group(4));\n+                if (actual != 0) {\n+                    Asserts.fail(\"Expected number of unreclaimable to be 0 after retained reclaim but is \" + actual);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n@@ -49,1 +237,0 @@\n-        testPinnedEvacuation(0, 0, 0, 0, 1, 0);\n@@ -68,1 +255,1 @@\n-    private static void testPinnedEvacuation(int younGCsBeforeUnpin,\n+    private static void testPinnedEvacuation(int youngGCsBeforeUnpin,\n@@ -88,1 +275,1 @@\n-                                                                  String.valueOf(younGCsBeforeUnpin));\n+                                                                  String.valueOf(youngGCsBeforeUnpin));\n@@ -94,5 +281,7 @@\n-        assertMatches(expectedMarkingSkipEvents, numMatches(output.getStdout(), \".*Marking candidate \\\\d+ can not be reclaimed currently. Skipping.*\"), \"skipMarking\");\n-        assertMatches(expectedRetainedSkipEvents, numMatches(output.getStdout(), \".*Retained candidate \\\\d+ can not be reclaimed currently. Skipping.*\"), \"skipRetained\");\n-        assertMatches(expectedDropEvents, numMatches(output.getStdout(), \".*Retained candidate \\\\d+ can not be reclaimed currently. Dropping.*\"), \"drop\");\n-        assertMatches(expectedMarkingReclaimEvents, numMatches(output.getStdout(), \".*Finish adding marking candidates to collection set. Initial: 1,.*\"), \"reclaimMarking\");\n-        assertMatches(expectedRetainedReclaimEvents, numMatches(output.getStdout(), \".*Finish adding retained candidates to collection set. Initial: 1,.*\"), \"reclaimRetained\");\n+        TestResultTracker t = new TestResultTracker(output.getStdout(),\n+                                                    expectedMarkingSkipEvents,\n+                                                    expectedRetainedSkipEvents,\n+                                                    expectedDropEvents,\n+                                                    expectedMarkingReclaimEvents,\n+                                                    expectedRetainedReclaimEvents);\n+        t.verify();\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/pinnedobjs\/TestPinnedOldObjectsEvacuation.java","additions":197,"deletions":8,"binary":false,"changes":205,"status":"modified"}]}