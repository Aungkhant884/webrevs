{"files":[{"patch":"@@ -772,0 +772,17 @@\n+    private static int[] getTableSelectedInfo(final Accessible a, final Component c,\n+                                              final int info) {\n+        if (a == null) return null;\n+        return invokeAndWait(() -> {\n+            AccessibleContext ac = a.getAccessibleContext();\n+            AccessibleTable table = ac.getAccessibleTable();\n+            if (table != null) {\n+                if (info == JAVA_AX_COLS) {\n+                    return table.getSelectedAccessibleColumns();\n+                } else if (info == JAVA_AX_ROWS) {\n+                    return table.getSelectedAccessibleRows();\n+                }\n+            }\n+            return null;\n+        }, c);\n+    }\n+\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CAccessibility.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -679,1 +679,1 @@\n-    if ([focused respondsToSelector:@selector(setAccessibilitySelectedText)]) {\n+    if ([focused respondsToSelector:@selector(setAccessibilitySelectedText:)]) {\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/AWTView.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-        int inc = [(TableAccessibility *)[self accessibilityParent] accessibleColCount] * 2;\n+        int inc = [(TableAccessibility *)[self accessibilityParent] accessibilityRowCount] * 2;\n@@ -92,1 +92,1 @@\n-            [childrenCells addObject:[child autorelease]];\n+            [childrenCells addObject:[[child retain] autorelease]];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ColumnAccessibility.m","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+    CHECK_EXCEPTION();\n@@ -56,0 +57,1 @@\n+    CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ComboBoxAccessibility.m","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -632,1 +632,1 @@\n-                                                    allowIgnored:([[self accessibilityRole] isEqualToString:NSAccessibilityListRole] || [[self accessibilityRole] isEqualToString:NSAccessibilityOutlineRole])\n+                                                    allowIgnored:([[self accessibilityRole] isEqualToString:NSAccessibilityListRole] || [[self accessibilityRole] isEqualToString:NSAccessibilityOutlineRole] || [[self accessibilityRole] isEqualToString:NSAccessibilityTableRole])\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/CommonComponentAccessibility.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        return [NSArray arrayWithObject:[newChild autorelease]];\n+        return [NSArray arrayWithObject:newChild];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ListRowAccessibility.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,3 @@\n-    return (*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, sjm_isTreeRootVisible, fAccessible, fComponent);\n+    bool isTreeRootVisible = (*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, sjm_isTreeRootVisible, fAccessible, fComponent);\n+    CHECK_EXCEPTION();\n+    return isTreeRootVisible;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/OutlineAccessibility.m","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+    CHECK_EXCEPTION();\n@@ -52,0 +53,1 @@\n+        CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/OutlineRowAccessibility.m","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,4 +29,0 @@\n-@property(readonly) int accessibleRowCount;\n-@property(readonly) int accessibleColCount;\n-@property(readonly) NSArray<NSNumber *> *selectedAccessibleRows;\n-@property(readonly) NSArray<NSNumber *> *selectedAccessibleColumns;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/TableAccessibility.h","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,12 @@\n+#import \"CellAccessibility.h\"\n+\n+#define JAVA_AX_ROWS (1)\n+#define JAVA_AX_COLS (2)\n+\n+static jclass sjc_CAccessibility = NULL;\n+\n+static jmethodID sjm_getAccessibleName = NULL;\n+#define GET_ACCESSIBLENAME_METHOD_RETURN(ret) \\\n+    GET_CACCESSIBILITY_CLASS_RETURN(ret); \\\n+    GET_STATIC_METHOD_RETURN(sjm_getAccessibleName, sjc_CAccessibility, \"getAccessibleName\", \\\n+                     \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/String;\", ret);\n@@ -37,1 +49,1 @@\n-- (int)accessibleRowCount\n+- (id)getTableInfo:(jint)info\n@@ -39,9 +51,1 @@\n-    JNIEnv *env = [ThreadUtilities getJNIEnv];\n-    jobject axContext = [self axContextWithEnv:env];\n-    if (axContext == NULL) return 0;\n-    jclass clsInfo = (*env)->GetObjectClass(env, axContext);\n-    DECLARE_METHOD_RETURN(jm_getAccessibleRowCount, clsInfo, \"getAccessibleRowCount\", \"()I\", 0);\n-    jint javaRowsCount = (*env)->CallIntMethod(env, axContext, jm_getAccessibleRowCount);\n-    (*env)->DeleteLocalRef(env, axContext);\n-    return (int)javaRowsCount;\n-}\n+    if (fAccessible == NULL) return 0;\n@@ -49,10 +53,9 @@\n-- (int)accessibleColCount\n-{\n-    JNIEnv *env = [ThreadUtilities getJNIEnv];\n-    jobject axContext = [self axContextWithEnv:env];\n-    if (axContext == NULL) return 0;\n-    jclass clsInfo = (*env)->GetObjectClass(env, axContext);\n-    DECLARE_METHOD_RETURN(jm_getAccessibleColumnCount, clsInfo, \"getAccessibleColumnCount\", \"()I\", 0);\n-    jint javaColsCount = (*env)->CallIntMethod(env, axContext, jm_getAccessibleColumnCount);\n-    (*env)->DeleteLocalRef(env, axContext);\n-    return (int)javaColsCount;\n+    JNIEnv* env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getTableInfo, sjc_CAccessibility, \"getTableInfo\",\n+                          \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;I)I\", nil);\n+    jint count = (*env)->CallStaticIntMethod(env, sjc_CAccessibility, jm_getTableInfo, fAccessible,\n+                                        fComponent, info);\n+    CHECK_EXCEPTION();\n+    NSNumber *index = [NSNumber numberWithInt:count];\n+    return index;\n@@ -61,1 +64,1 @@\n-- (NSArray<NSNumber *> *)selectedAccessibleRows\n+- (NSArray<NSNumber *> *)getTableSelectedInfo:(jint)info\n@@ -63,19 +66,1 @@\n-    JNIEnv *env = [ThreadUtilities getJNIEnv];\n-    jobject axContext = [self axContextWithEnv:env];\n-    if (axContext == NULL) return nil;\n-    jclass clsInfo = (*env)->GetObjectClass(env, axContext);\n-    DECLARE_METHOD_RETURN(jm_getSelectedAccessibleRows, clsInfo, \"getSelectedAccessibleRows\", \"()[I\", nil);\n-    jintArray selectedRowNumbers = (*env)->CallObjectMethod(env, axContext, jm_getSelectedAccessibleRows);\n-    (*env)->DeleteLocalRef(env, axContext);\n-    if (selectedRowNumbers == NULL) {\n-        return nil;\n-    }\n-    jsize arrayLen = (*env)->GetArrayLength(env, selectedRowNumbers);\n-    jint *indexsis = (*env)->GetIntArrayElements(env, selectedRowNumbers, 0);\n-    NSMutableArray<NSNumber *> *nsArraySelectedRowNumbers = [NSMutableArray<NSNumber *> arrayWithCapacity:arrayLen];\n-    for (int i = 0; i < arrayLen; i++) {\n-        [nsArraySelectedRowNumbers addObject:[NSNumber numberWithInt:indexsis[i]]];\n-    }\n-    (*env)->DeleteLocalRef(env, selectedRowNumbers);\n-    return [NSArray<NSNumber *> arrayWithArray:nsArraySelectedRowNumbers];\n-}\n+    if (fAccessible == NULL) return 0;\n@@ -83,10 +68,8 @@\n-- (NSArray<NSNumber *> *)selectedAccessibleColumns\n-{\n-    JNIEnv *env = [ThreadUtilities getJNIEnv];\n-    jobject axContext = [self axContextWithEnv:env];\n-    if (axContext == NULL) return nil;\n-    jclass clsInfo = (*env)->GetObjectClass(env, axContext);\n-    DECLARE_METHOD_RETURN(jm_getSelectedAccessibleColumns, clsInfo, \"getSelectedAccessibleColumns\", \"()[I\", nil);\n-    jintArray selectedColumnNumbers = (*env)->CallObjectMethod(env, axContext, jm_getSelectedAccessibleColumns);\n-    (*env)->DeleteLocalRef(env, axContext);\n-    if (selectedColumnNumbers == NULL) {\n+    JNIEnv* env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getTableSelectedInfo, sjc_CAccessibility, \"getTableSelectedInfo\",\n+                          \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;I)[I\", nil);\n+    jintArray selected = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getTableSelectedInfo, fAccessible,\n+                                        fComponent, info);\n+    CHECK_EXCEPTION();\n+    if (selected == NULL) {\n@@ -95,3 +78,3 @@\n-    jsize arrayLen = (*env)->GetArrayLength(env, selectedColumnNumbers);\n-    jint *indexsis = (*env)->GetIntArrayElements(env, selectedColumnNumbers, 0);\n-    NSMutableArray<NSNumber *> *nsArraySelectedColumnNumbers = [NSMutableArray<NSNumber *> arrayWithCapacity:arrayLen];\n+    jsize arrayLen = (*env)->GetArrayLength(env, selected);\n+    jint *indexsis = (*env)->GetIntArrayElements(env, selected, 0);\n+    NSMutableArray<NSNumber *> *nsArraySelected = [NSMutableArray<NSNumber *> arrayWithCapacity:arrayLen];\n@@ -99,1 +82,1 @@\n-        [nsArraySelectedColumnNumbers addObject:[NSNumber numberWithInt:indexsis[i]]];\n+        [nsArraySelected addObject:[NSNumber numberWithInt:indexsis[i]]];\n@@ -101,2 +84,2 @@\n-    (*env)->DeleteLocalRef(env, selectedColumnNumbers);\n-    return [NSArray<NSNumber *> arrayWithArray:nsArraySelectedColumnNumbers];\n+    (*env)->DeleteLocalRef(env, selected);\n+    return [NSArray<NSNumber *> arrayWithArray:nsArraySelected];\n@@ -113,0 +96,1 @@\n+    CHECK_EXCEPTION();\n@@ -125,0 +109,1 @@\n+    CHECK_EXCEPTION();\n@@ -137,0 +122,1 @@\n+    CHECK_EXCEPTION();\n@@ -145,6 +131,1 @@\n-    NSArray *children = [self accessibilityRows];\n-    NSArray *columns = [self accessibilityColumns];\n-    NSMutableArray *results = [NSMutableArray arrayWithCapacity:[children count] + [columns count]];\n-    [results addObjectsFromArray:children];\n-    [results addObjectsFromArray:columns];\n-    return [NSArray arrayWithArray:results];\n+    return [self accessibilityRows];\n@@ -160,1 +141,1 @@\n-    int rowCount = [self accessibleRowCount];\n+    int rowCount = [self accessibilityRowCount];\n@@ -175,1 +156,1 @@\n-    NSArray<NSNumber *> *selectedRowIndexses = [self selectedAccessibleRows];\n+    NSArray<NSNumber *> *selectedRowIndexses = [self getTableSelectedInfo:JAVA_AX_ROWS];\n@@ -205,1 +186,1 @@\n-    int colCount = [self accessibleColCount];\n+    int colCount = [self accessibilityColumnCount];\n@@ -220,1 +201,1 @@\n-    NSArray<NSNumber *> *indexes = [self selectedAccessibleColumns];\n+    NSArray<NSNumber *> *indexes = [self getTableSelectedInfo:JAVA_AX_COLS];\n@@ -233,5 +214,4 @@\n-\/* Other optional NSAccessibilityTable Methods\n-- (nullable NSArray<id<NSAccessibilityRow>> *)accessibilityVisibleRows;\n-- (nullable NSArray *)accessibilityColumns;\n-- (nullable NSArray *)accessibilitySelectedColumns;\n-- (nullable NSArray *)accessibilityVisibleColumns;\n+- (NSInteger)accessibilityRowCount\n+{\n+    return [[self getTableInfo:JAVA_AX_ROWS] integerValue];\n+}\n@@ -239,5 +219,19 @@\n- - (nullable NSArray *)accessibilitySelectedCells;\n-- (nullable NSArray *)accessibilityVisibleCells;\n-- (nullable NSArray *)accessibilityRowHeaderUIElements;\n-- (nullable NSArray *)accessibilityColumnHeaderUIElements;\n- *\/\n+- (NSInteger)accessibilityColumnCount\n+{\n+    return [[self getTableInfo:JAVA_AX_COLS] integerValue];\n+}\n+\n+- (nullable NSArray *)accessibilitySelectedCells;\n+{\n+    NSArray *children = [super accessibilitySelectedChildren];\n+    NSMutableArray *cells = [NSMutableArray arrayWithCapacity:[children count]];\n+    for (CommonComponentAccessibility *child in children) {\n+        [cells addObject:[[CellAccessibility alloc] initWithParent:self\n+                                                           withEnv:[ThreadUtilities getJNIEnv]\n+                                                    withAccessible:child->fAccessible\n+                                                         withIndex:child->fIndex\n+                                                          withView:fView\n+                                                      withJavaRole:child->fJavaRole]];\n+    }\n+    return [NSArray arrayWithArray:cells];\n+}\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/TableAccessibility.m","additions":70,"deletions":76,"binary":false,"changes":146,"status":"modified"},{"patch":"@@ -55,5 +55,0 @@\n-- (BOOL)isAccessibilityEnabled\n-{\n-    return YES;\n-}\n-\n@@ -76,1 +71,1 @@\n-        NSUInteger childIndex = [self rowNumberInTable] * [(TableAccessibility *)parent accessibleColCount];\n+        NSUInteger childIndex = [self rowNumberInTable] * [(TableAccessibility *)parent accessibilityColumnCount];\n@@ -78,1 +73,1 @@\n-        NSInteger n = ([self rowNumberInTable] + 1) * [(TableAccessibility *)parent accessibleColCount] * 2;\n+        NSInteger n = ([self rowNumberInTable] + 1) * [(TableAccessibility *)parent accessibilityColumnCount] * 2;\n@@ -100,1 +95,1 @@\n-            [childrenCells addObject:[child autorelease]];\n+            [childrenCells addObject:[[child retain] autorelease]];\n@@ -116,1 +111,1 @@\n-    return [[self accessibilityParent] accessibilityIndexOfChild:self];\n+    return self->fIndex;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/TableRowAccessibility.m","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @summary Create implementation for NSAccessibilityComboBox protocol peer\n+ * @summary Test implementation of NSAccessibilityComboBox protocol peer\n","filename":"test\/jdk\/java\/awt\/a11y\/AccessibleJComboboxTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @summary Create implementation for NSAccessibilityList protocol peer\n+ * @summary Test implementation of NSAccessibilityList protocol peer\n","filename":"test\/jdk\/java\/awt\/a11y\/AccessibleJListTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @summary Create implementation for NSAccessibilityTabGroup protocol peer\n+ * @summary Test implementation of NSAccessibilityTabPanel protocol peer\n","filename":"test\/jdk\/java\/awt\/a11y\/AccessibleJTabbedPaneTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @summary Create implementation for NSAccessibilityTable protocol\n+ * @summary Test implementation of NSAccessibilityTable protocol peer\n@@ -31,0 +31,1 @@\n+ * @requires (os.family == \"windows\" | os.family == \"mac\")\n","filename":"test\/jdk\/java\/awt\/a11y\/AccessibleJTableTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @summary Create implementation for NSAccessibilityOutline protocol\n+ * @summary Test implementation of NSAccessibilityOutLine protocol peer\n","filename":"test\/jdk\/java\/awt\/a11y\/AccessibleJTreeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @summary Create implementation for NSAccessibilityNavigableStaticText protocol\n+ * @summary Test implementation of NSAccessibilityNavigableStaticTest and NSAccessibilityStaticText protocols peer\n","filename":"test\/jdk\/java\/awt\/a11y\/AccessibleTextTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}