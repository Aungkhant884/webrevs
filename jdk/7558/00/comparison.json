{"files":[{"patch":"@@ -41,0 +41,1 @@\n+import java.util.Locale;\n@@ -50,1 +51,1 @@\n- * @run testng PropertiesStoreTest\n+ * @run testng\/othervm PropertiesStoreTest\n@@ -94,0 +95,30 @@\n+    \/**\n+     * Returns a {@link Locale} to use for testing\n+     *\/\n+    @DataProvider(name = \"localeProvider\")\n+    private Object[][] provideLocales() {\n+        \/\/ pick a non-english locale for testing\n+        Locale nonEnglishLocale = null;\n+        for (Locale locale : Locale.getAvailableLocales()) {\n+            \/\/ skip ROOT locale and ENGLISH language ones\n+            if (!locale.getLanguage().isEmpty() && !locale.getLanguage().equals(Locale.ENGLISH.getLanguage())) {\n+                nonEnglishLocale = locale;\n+                System.out.println(\"Selected non-english locale: \" + nonEnglishLocale + \" for tests\");\n+                break;\n+            }\n+        }\n+        if (nonEnglishLocale == null) {\n+            return new Object[][] {\n+                {Locale.getDefault()},\n+                {Locale.US}, \/\/ guaranteed to be present\n+                {Locale.ROOT}, \/\/ guaranteed to be present\n+            };\n+        }\n+        return new Object[][]{\n+                {Locale.getDefault()},\n+                {Locale.US}, \/\/ guaranteed to be present\n+                {Locale.ROOT}, \/\/ guaranteed to be present\n+                {nonEnglishLocale}\n+        };\n+    }\n+\n@@ -156,7 +187,17 @@\n-    @Test\n-    public void testStoreWriterDateComment() throws Exception {\n-        final Properties props = new Properties();\n-        props.setProperty(\"a\", \"b\");\n-        final Path tmpFile = Files.createTempFile(\"8231640\", \"props\");\n-        try (final Writer writer = Files.newBufferedWriter(tmpFile)) {\n-            props.store(writer, null);\n+    @Test(dataProvider = \"localeProvider\")\n+    public void testStoreWriterDateComment(final Locale testLocale) throws Exception {\n+        var prevLocale = Locale.getDefault();\n+        \/\/ switch the default locale to the one being tested\n+        Locale.setDefault(testLocale);\n+        System.out.println(\"Using locale: \" + testLocale + \" for Properties#store(Writer) test\");\n+        try {\n+            final Properties props = new Properties();\n+            props.setProperty(\"a\", \"b\");\n+            final Path tmpFile = Files.createTempFile(\"8231640\", \"props\");\n+            try (final Writer writer = Files.newBufferedWriter(tmpFile)) {\n+                props.store(writer, null);\n+            }\n+            testDateComment(tmpFile);\n+        } finally {\n+            \/\/ reset to the previous one\n+            Locale.setDefault(prevLocale);\n@@ -164,1 +205,0 @@\n-        testDateComment(tmpFile);\n@@ -170,7 +210,17 @@\n-    @Test\n-    public void testStoreOutputStreamDateComment() throws Exception {\n-        final Properties props = new Properties();\n-        props.setProperty(\"a\", \"b\");\n-        final Path tmpFile = Files.createTempFile(\"8231640\", \"props\");\n-        try (final Writer writer = Files.newBufferedWriter(tmpFile)) {\n-            props.store(writer, null);\n+    @Test(dataProvider = \"localeProvider\")\n+    public void testStoreOutputStreamDateComment(final Locale testLocale) throws Exception {\n+        var prevLocale = Locale.getDefault();\n+        \/\/ switch the default locale to the one being tested\n+        Locale.setDefault(testLocale);\n+        System.out.println(\"Using locale: \" + testLocale + \" for Properties#store(OutputStream) test\");\n+        try {\n+            final Properties props = new Properties();\n+            props.setProperty(\"a\", \"b\");\n+            final Path tmpFile = Files.createTempFile(\"8231640\", \"props\");\n+            try (final Writer writer = Files.newBufferedWriter(tmpFile)) {\n+                props.store(writer, null);\n+            }\n+            testDateComment(tmpFile);\n+        } finally {\n+            \/\/ reset to the previous one\n+            Locale.setDefault(prevLocale);\n@@ -178,1 +228,0 @@\n-        testDateComment(tmpFile);\n@@ -202,1 +251,3 @@\n-            DateTimeFormatter.ofPattern(DATE_FORMAT_PATTERN).parse(comment);\n+            \/\/ use a neutral locale for parsing, since when the date comment was written by Properties.store(...),\n+            \/\/ it internally calls the Date.toString() which always writes in a locale insensitive manner\n+            DateTimeFormatter.ofPattern(DATE_FORMAT_PATTERN).withLocale(Locale.ROOT).parse(comment);\n","filename":"test\/jdk\/java\/util\/Properties\/PropertiesStoreTest.java","additions":69,"deletions":18,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -428,1 +428,4 @@\n-            Instant instant = Instant.from(DateTimeFormatter.ofPattern(DATE_FORMAT_PATTERN).parse(dateComment));\n+            \/\/ use a neutral locale for parsing, since when the date comment was written by Properties.store(...),\n+            \/\/ it internally calls the Date.toString() which always writes in a locale insensitive manner\n+            var df = DateTimeFormatter.ofPattern(DATE_FORMAT_PATTERN).withLocale(Locale.ROOT);\n+            Instant instant = Instant.from(df.parse(dateComment));\n@@ -431,1 +434,1 @@\n-            throw new RuntimeException(\"Unexpected date \" + dateComment + \" in stored properties \" + destFile);\n+            throw new RuntimeException(\"Unexpected date \" + dateComment + \" in stored properties \" + destFile, pe);\n","filename":"test\/jdk\/java\/util\/Properties\/StoreReproducibilityTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}