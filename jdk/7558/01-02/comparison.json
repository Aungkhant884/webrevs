{"files":[{"patch":"@@ -46,0 +46,1 @@\n+import java.util.stream.Collectors;\n@@ -51,1 +52,0 @@\n- * @modules jdk.localedata\n@@ -59,3 +59,2 @@\n-    private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(DATE_FORMAT_PATTERN)\n-            .withLocale(Locale.ROOT);\n-    private static final Locale prevLocale = Locale.getDefault();\n+    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern(DATE_FORMAT_PATTERN, Locale.ROOT);\n+    private static final Locale PREV_LOCALE = Locale.getDefault();\n@@ -107,22 +106,12 @@\n-        Locale nonEnglishLocale = null;\n-        for (Locale locale : Locale.getAvailableLocales()) {\n-            \/\/ skip ROOT locale and ENGLISH language ones\n-            if (!locale.getLanguage().isEmpty() && !locale.getLanguage().equals(\"en\")) {\n-                nonEnglishLocale = locale;\n-                System.out.println(\"Selected non-english locale: \" + nonEnglishLocale + \" for tests\");\n-                break;\n-            }\n-        }\n-        if (nonEnglishLocale == null) {\n-            return new Object[][] {\n-                {Locale.getDefault()},\n-                {Locale.US}, \/\/ guaranteed to be present\n-                {Locale.ROOT}, \/\/ guaranteed to be present\n-            };\n-        }\n-        return new Object[][]{\n-                {Locale.getDefault()},\n-                {Locale.US}, \/\/ guaranteed to be present\n-                {Locale.ROOT}, \/\/ guaranteed to be present\n-                {nonEnglishLocale}\n-        };\n+        Set<Locale> locales = Arrays.stream(Locale.getAvailableLocales())\n+                .filter(l -> !l.getLanguage().isEmpty() && !l.getLanguage().equals(\"en\"))\n+                .limit(1)\n+                .collect(Collectors.toSet());\n+        locales.add(Locale.getDefault()); \/\/ always test the default locale\n+        locales.add(Locale.US); \/\/ guaranteed to be present\n+        locales.add(Locale.ROOT); \/\/ guaranteed to be present\n+\n+        \/\/ return the chosen locales\n+        return locales.stream()\n+                .map(m -> new Locale[] {m})\n+                .toArray(n -> new Object[n][0]);\n@@ -208,1 +197,1 @@\n-            Locale.setDefault(prevLocale);\n+            Locale.setDefault(PREV_LOCALE);\n@@ -230,1 +219,1 @@\n-            Locale.setDefault(prevLocale);\n+            Locale.setDefault(PREV_LOCALE);\n@@ -255,1 +244,1 @@\n-            formatter.parse(comment);\n+            FORMATTER.parse(comment);\n","filename":"test\/jdk\/java\/util\/Properties\/PropertiesStoreTest.java","additions":18,"deletions":29,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -55,2 +55,2 @@\n-    private static final DateTimeFormatter reproducibleDateTimeFormatter = DateTimeFormatter.ofPattern(DATE_FORMAT_PATTERN)\n-            .withLocale(Locale.ROOT).withZone(ZoneOffset.UTC);\n+    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern(DATE_FORMAT_PATTERN, Locale.ROOT)\n+            .withZone(ZoneOffset.UTC);\n@@ -91,1 +91,1 @@\n-        final String sysPropVal = reproducibleDateTimeFormatter.format(Instant.ofEpochSecond(243535322));\n+        final String sysPropVal = FORMATTER.format(Instant.ofEpochSecond(243535322));\n@@ -133,1 +133,1 @@\n-        final String sysPropVal = reproducibleDateTimeFormatter.format(Instant.ofEpochSecond(1234342423));\n+        final String sysPropVal = FORMATTER.format(Instant.ofEpochSecond(1234342423));\n@@ -177,1 +177,1 @@\n-        final String sysPropVal = reproducibleDateTimeFormatter.format(Instant.ofEpochSecond(1234342423));\n+        final String sysPropVal = FORMATTER.format(Instant.ofEpochSecond(1234342423));\n@@ -428,1 +428,1 @@\n-            Instant instant = Instant.from(reproducibleDateTimeFormatter.parse(dateComment));\n+            Instant instant = Instant.from(FORMATTER.parse(dateComment));\n","filename":"test\/jdk\/java\/util\/Properties\/StoreReproducibilityTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}