{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import java.util.Locale;\n@@ -45,0 +46,1 @@\n+import java.util.stream.Collectors;\n@@ -49,2 +51,2 @@\n- * @bug 8231640\n- * @run testng PropertiesStoreTest\n+ * @bug 8231640 8282023\n+ * @run testng\/othervm PropertiesStoreTest\n@@ -55,0 +57,4 @@\n+    \/\/ use a neutral locale, since when the date comment was written by Properties.store(...),\n+    \/\/ it internally calls the Date.toString() which always writes in a locale insensitive manner\n+    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern(DATE_FORMAT_PATTERN, Locale.ROOT);\n+    private static final Locale PREV_LOCALE = Locale.getDefault();\n@@ -94,0 +100,20 @@\n+    \/**\n+     * Returns a {@link Locale} to use for testing\n+     *\/\n+    @DataProvider(name = \"localeProvider\")\n+    private Object[][] provideLocales() {\n+        \/\/ pick a non-english locale for testing\n+        Set<Locale> locales = Arrays.stream(Locale.getAvailableLocales())\n+                .filter(l -> !l.getLanguage().isEmpty() && !l.getLanguage().equals(\"en\"))\n+                .limit(1)\n+                .collect(Collectors.toSet());\n+        locales.add(Locale.getDefault()); \/\/ always test the default locale\n+        locales.add(Locale.US); \/\/ guaranteed to be present\n+        locales.add(Locale.ROOT); \/\/ guaranteed to be present\n+\n+        \/\/ return the chosen locales\n+        return locales.stream()\n+                .map(m -> new Locale[] {m})\n+                .toArray(n -> new Object[n][0]);\n+    }\n+\n@@ -156,7 +182,16 @@\n-    @Test\n-    public void testStoreWriterDateComment() throws Exception {\n-        final Properties props = new Properties();\n-        props.setProperty(\"a\", \"b\");\n-        final Path tmpFile = Files.createTempFile(\"8231640\", \"props\");\n-        try (final Writer writer = Files.newBufferedWriter(tmpFile)) {\n-            props.store(writer, null);\n+    @Test(dataProvider = \"localeProvider\")\n+    public void testStoreWriterDateComment(final Locale testLocale) throws Exception {\n+        \/\/ switch the default locale to the one being tested\n+        Locale.setDefault(testLocale);\n+        System.out.println(\"Using locale: \" + testLocale + \" for Properties#store(Writer) test\");\n+        try {\n+            final Properties props = new Properties();\n+            props.setProperty(\"a\", \"b\");\n+            final Path tmpFile = Files.createTempFile(\"8231640\", \"props\");\n+            try (final Writer writer = Files.newBufferedWriter(tmpFile)) {\n+                props.store(writer, null);\n+            }\n+            testDateComment(tmpFile);\n+        } finally {\n+            \/\/ reset to the previous one\n+            Locale.setDefault(PREV_LOCALE);\n@@ -164,1 +199,0 @@\n-        testDateComment(tmpFile);\n@@ -170,7 +204,16 @@\n-    @Test\n-    public void testStoreOutputStreamDateComment() throws Exception {\n-        final Properties props = new Properties();\n-        props.setProperty(\"a\", \"b\");\n-        final Path tmpFile = Files.createTempFile(\"8231640\", \"props\");\n-        try (final Writer writer = Files.newBufferedWriter(tmpFile)) {\n-            props.store(writer, null);\n+    @Test(dataProvider = \"localeProvider\")\n+    public void testStoreOutputStreamDateComment(final Locale testLocale) throws Exception {\n+        \/\/ switch the default locale to the one being tested\n+        Locale.setDefault(testLocale);\n+        System.out.println(\"Using locale: \" + testLocale + \" for Properties#store(OutputStream) test\");\n+        try {\n+            final Properties props = new Properties();\n+            props.setProperty(\"a\", \"b\");\n+            final Path tmpFile = Files.createTempFile(\"8231640\", \"props\");\n+            try (final Writer writer = Files.newBufferedWriter(tmpFile)) {\n+                props.store(writer, null);\n+            }\n+            testDateComment(tmpFile);\n+        } finally {\n+            \/\/ reset to the previous one\n+            Locale.setDefault(PREV_LOCALE);\n@@ -178,1 +221,0 @@\n-        testDateComment(tmpFile);\n@@ -202,1 +244,1 @@\n-            DateTimeFormatter.ofPattern(DATE_FORMAT_PATTERN).parse(comment);\n+            FORMATTER.parse(comment);\n","filename":"test\/jdk\/java\/util\/Properties\/PropertiesStoreTest.java","additions":62,"deletions":20,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n- * @bug 8231640\n+ * @bug 8231640 8282023\n@@ -55,2 +55,2 @@\n-    private static final DateTimeFormatter reproducibleDateTimeFormatter = DateTimeFormatter.ofPattern(DATE_FORMAT_PATTERN)\n-            .withLocale(Locale.ROOT).withZone(ZoneOffset.UTC);\n+    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern(DATE_FORMAT_PATTERN, Locale.ROOT)\n+            .withZone(ZoneOffset.UTC);\n@@ -91,1 +91,1 @@\n-        final String sysPropVal = reproducibleDateTimeFormatter.format(Instant.ofEpochSecond(243535322));\n+        final String sysPropVal = FORMATTER.format(Instant.ofEpochSecond(243535322));\n@@ -133,1 +133,1 @@\n-        final String sysPropVal = reproducibleDateTimeFormatter.format(Instant.ofEpochSecond(1234342423));\n+        final String sysPropVal = FORMATTER.format(Instant.ofEpochSecond(1234342423));\n@@ -177,1 +177,1 @@\n-        final String sysPropVal = reproducibleDateTimeFormatter.format(Instant.ofEpochSecond(1234342423));\n+        final String sysPropVal = FORMATTER.format(Instant.ofEpochSecond(1234342423));\n@@ -428,1 +428,1 @@\n-            Instant instant = Instant.from(DateTimeFormatter.ofPattern(DATE_FORMAT_PATTERN).parse(dateComment));\n+            Instant instant = Instant.from(FORMATTER.parse(dateComment));\n@@ -431,1 +431,1 @@\n-            throw new RuntimeException(\"Unexpected date \" + dateComment + \" in stored properties \" + destFile);\n+            throw new RuntimeException(\"Unexpected date \" + dateComment + \" in stored properties \" + destFile, pe);\n","filename":"test\/jdk\/java\/util\/Properties\/StoreReproducibilityTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}