{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,2 @@\n- * @bug 8231640\n+ * @bug 8231640 8282023\n+ * @modules jdk.localedata\n@@ -56,0 +57,5 @@\n+    \/\/ use a neutral locale, since when the date comment was written by Properties.store(...),\n+    \/\/ it internally calls the Date.toString() which always writes in a locale insensitive manner\n+    private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(DATE_FORMAT_PATTERN)\n+            .withLocale(Locale.ROOT);\n+    private static final Locale prevLocale = Locale.getDefault();\n@@ -104,1 +110,1 @@\n-            if (!locale.getLanguage().isEmpty() && !locale.getLanguage().equals(Locale.ENGLISH.getLanguage())) {\n+            if (!locale.getLanguage().isEmpty() && !locale.getLanguage().equals(\"en\")) {\n@@ -189,1 +195,0 @@\n-        var prevLocale = Locale.getDefault();\n@@ -212,1 +217,0 @@\n-        var prevLocale = Locale.getDefault();\n@@ -251,3 +255,1 @@\n-            \/\/ use a neutral locale for parsing, since when the date comment was written by Properties.store(...),\n-            \/\/ it internally calls the Date.toString() which always writes in a locale insensitive manner\n-            DateTimeFormatter.ofPattern(DATE_FORMAT_PATTERN).withLocale(Locale.ROOT).parse(comment);\n+            formatter.parse(comment);\n","filename":"test\/jdk\/java\/util\/Properties\/PropertiesStoreTest.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n- * @bug 8231640\n+ * @bug 8231640 8282023\n@@ -428,4 +428,1 @@\n-            \/\/ use a neutral locale for parsing, since when the date comment was written by Properties.store(...),\n-            \/\/ it internally calls the Date.toString() which always writes in a locale insensitive manner\n-            var df = DateTimeFormatter.ofPattern(DATE_FORMAT_PATTERN).withLocale(Locale.ROOT);\n-            Instant instant = Instant.from(df.parse(dateComment));\n+            Instant instant = Instant.from(reproducibleDateTimeFormatter.parse(dateComment));\n","filename":"test\/jdk\/java\/util\/Properties\/StoreReproducibilityTest.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"}]}