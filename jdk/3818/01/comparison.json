{"files":[{"patch":"@@ -1370,2 +1370,2 @@\n-Node* LoadNode::eliminate_autobox(PhaseGVN* phase) {\n-  assert(phase->C->eliminate_boxing(), \"sanity\");\n+Node* LoadNode::eliminate_autobox(PhaseIterGVN* igvn) {\n+  assert(igvn->C->eliminate_boxing(), \"sanity\");\n@@ -1373,1 +1373,1 @@\n-  Node* base = AddPNode::Ideal_base_and_offset(in(Address), phase, ignore);\n+  Node* base = AddPNode::Ideal_base_and_offset(in(Address), igvn, ignore);\n@@ -1407,1 +1407,1 @@\n-                            elements[1]->in(2) == phase->intcon(shift)))) {\n+                            elements[1]->in(2) == igvn->intcon(shift)))) {\n@@ -1434,1 +1434,1 @@\n-              result = phase->transform(new AddXNode(result, elements[i]));\n+              result = igvn->transform(new AddXNode(result, elements[i]));\n@@ -1437,1 +1437,1 @@\n-            result = phase->transform(new AddXNode(result, phase->MakeConX(-(int)offset)));\n+            result = igvn->transform(new AddXNode(result, igvn->MakeConX(-(int)offset)));\n@@ -1439,1 +1439,1 @@\n-            if (result->Opcode() == Op_LShiftX && result->in(2) == phase->intcon(shift)) {\n+            if (result->Opcode() == Op_LShiftX && result->in(2) == igvn->intcon(shift)) {\n@@ -1442,1 +1442,2 @@\n-              result = new RShiftXNode(result->in(1), phase->intcon(0));\n+              igvn->_worklist.push(result); \/\/ remove dead node later\n+              result = new RShiftXNode(result->in(1), igvn->intcon(0));\n@@ -1445,1 +1446,1 @@\n-                       result->in(1)->in(2) == phase->intcon(shift)) {\n+                       result->in(1)->in(2) == igvn->intcon(shift)) {\n@@ -1449,2 +1450,3 @@\n-              Node* add_con = new RShiftXNode(result->in(2), phase->intcon(shift));\n-              result = new AddXNode(result->in(1)->in(1), phase->transform(add_con));\n+              igvn->_worklist.push(result); \/\/ remove dead node later\n+              Node* add_con = new RShiftXNode(result->in(2), igvn->intcon(shift));\n+              result = new AddXNode(result->in(1)->in(1), igvn->transform(add_con));\n@@ -1452,1 +1454,1 @@\n-              result = new RShiftXNode(result, phase->intcon(shift));\n+              result = new RShiftXNode(result, igvn->intcon(shift));\n@@ -1456,1 +1458,1 @@\n-              result = new ConvL2INode(phase->transform(result));\n+              result = new ConvL2INode(igvn->transform(result));\n@@ -1460,1 +1462,1 @@\n-              result = new ConvI2LNode(phase->transform(result));\n+              result = new ConvI2LNode(igvn->transform(result));\n@@ -1467,1 +1469,1 @@\n-                result = new AndINode(phase->transform(result), phase->intcon(0xFF));\n+                result = new AndINode(igvn->transform(result), igvn->intcon(0xFF));\n@@ -1470,1 +1472,1 @@\n-                result = new AndINode(phase->transform(result), phase->intcon(0xFFFF));\n+                result = new AndINode(igvn->transform(result), igvn->intcon(0xFFFF));\n@@ -1763,1 +1765,2 @@\n-      if (igvn != NULL && igvn->_worklist.member(opt_mem)) {\n+      assert(igvn != NULL, \"must be PhaseIterGVN when can_reshape is true\");\n+      if (igvn->_worklist.member(opt_mem)) {\n@@ -1773,1 +1776,1 @@\n-        Node* result = eliminate_autobox(phase);\n+        Node* result = eliminate_autobox(igvn);\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":21,"deletions":18,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -251,1 +251,1 @@\n-  Node *eliminate_autobox(PhaseGVN *phase);\n+  Node *eliminate_autobox(PhaseIterGVN *igvn);\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}