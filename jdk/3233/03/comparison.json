{"files":[{"patch":"@@ -66,1 +66,1 @@\n-        \/\/ --connect [<id>@]<host>\n+        \/\/ --connect [<id>@]<host>[:registryport]\n@@ -71,1 +71,1 @@\n-            System.out.println(\"    --connect [<id>@]<host> To connect to a remote debug server (debugd).\");\n+            System.out.println(\"    --connect [<id>@]<host>[:registryport] To connect to a remote debug server (debugd).\");\n@@ -88,2 +88,1 @@\n-            System.out.println(\"          or  jhsdb \" + mode + \" --connect debugserver\");\n-            System.out.println(\"          or  jhsdb \" + mode + \" --connect id@debugserver\");\n+            System.out.println(\"          or  jhsdb \" + mode + \" --connect id@debugserver:1234\");\n@@ -103,0 +102,1 @@\n+        System.out.println(\"    --disableregistry       Do not start RMI registry (use already started RMI registry)\");\n@@ -378,0 +378,1 @@\n+                \"disableregistry\", \"disableregistry\",\n@@ -404,0 +405,5 @@\n+        \/\/ Disable RMI registry if specified\n+        if (argMap.containsKey(\"disableregistry\")) {\n+            System.setProperty(\"sun.jvm.hotspot.rmi.startRegistry\", \"false\");\n+        }\n+\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/SALauncher.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-\\f[CB]\\-\\-connect\\f[R] \\f[I][server\\-id\\@]debugd\\-host\\f[R]\\]\n+\\f[CB]\\-\\-connect\\f[R] \\f[I][server\\-id\\@]debugd\\-host[:registryport]\\f[R]\\]\n@@ -39,1 +39,1 @@\n-\\f[CB]\\-\\-connect\\f[R] \\f[I][server\\-id\\@]debugd\\-host\\f[R]\\]\n+\\f[CB]\\-\\-connect\\f[R] \\f[I][server\\-id\\@]debugd\\-host[:registryport]\\f[R]\\]\n@@ -47,1 +47,1 @@\n-| \\f[CB]\\-\\-connect\\f[R] \\f[I][server\\-id\\@]debugd\\-host\\f[R])\n+| \\f[CB]\\-\\-connect\\f[R] \\f[I][server\\-id\\@]debugd\\-host[:registryport]\\f[R])\n@@ -52,1 +52,1 @@\n-| \\f[CB]\\-\\-connect\\f[R] \\f[I][server\\-id\\@]debugd\\-host\\f[R])\n+| \\f[CB]\\-\\-connect\\f[R] \\f[I][server\\-id\\@]debugd\\-host[:registryport]\\f[R])\n@@ -57,1 +57,1 @@\n-| \\f[CB]\\-\\-connect\\f[R] \\f[I][server\\-id\\@]debugd\\-host\\f[R])\n+| \\f[CB]\\-\\-connect\\f[R] \\f[I][server\\-id\\@]debugd\\-host[:registryport]\\f[R])\n@@ -62,1 +62,1 @@\n-| \\f[CB]\\-\\-connect\\f[R] \\f[I][server\\-id\\@]debugd\\-host\\f[R])\n+| \\f[CB]\\-\\-connect\\f[R] \\f[I][server\\-id\\@]debugd\\-host[:registryport]\\f[R])\n@@ -84,1 +84,1 @@\n-.B \\f[I][server\\-id\\@]debugd\\-host\\f[R]\n+.B \\f[I][server\\-id\\@]debugd\\-host[:registryport]\\f[R]\n@@ -182,0 +182,10 @@\n+.B \\f[CB]\\-\\-disableregistry\\f[R]\n+Disable starting RMI registry on startup.\n+This option overrides the system property\n+\\[aq]sun.jvm.hotspot.rmi.startRegistry\\[aq].\n+If not specified, RMI registry will be started on startup.\n+Otherwise it will not be started, and the already started RMI registry\n+will be used instead.\n+.RS\n+.RE\n+.TP\n","filename":"src\/jdk.hotspot.agent\/share\/man\/jhsdb.1","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-\n@@ -35,1 +34,0 @@\n-\n@@ -37,1 +35,3 @@\n-\n+    private int registryPort;\n+    private boolean disableRegistry;\n+    private String prefix;\n@@ -42,0 +42,3 @@\n+        this.registryPort = 0;\n+        this.disableRegistry = false;\n+        this.prefix = null;\n@@ -45,0 +48,12 @@\n+    public void setRegistryPort(int registryPort) {\n+        this.registryPort = registryPort;\n+    }\n+\n+    public void setDisableRegistry(boolean disableRegistry) {\n+        this.disableRegistry = disableRegistry;\n+    }\n+\n+    public void setPrefix(String prefix) {\n+        this.prefix = prefix;\n+    }\n+\n@@ -48,0 +63,3 @@\n+        if (prefix != null) {\n+            jhsdbLauncher.addToolArg(\"-J-Dsun.jvm.hotspot.rmi.serverNamePrefix=\" + prefix);\n+        }\n@@ -55,0 +73,7 @@\n+        if (registryPort != 0) {\n+            jhsdbLauncher.addToolArg(\"--registryport\");\n+            jhsdbLauncher.addToolArg(Integer.toString(registryPort));\n+        }\n+        if (disableRegistry) {\n+            jhsdbLauncher.addToolArg(\"--disableregistry\");\n+        }\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/sadebugd\/DebugdUtils.java","additions":29,"deletions":4,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021 NTT DATA.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.SA.SATestUtils;\n+\n+import jtreg.SkippedException;\n+\n+\/**\n+ * @test\n+ * @bug 8263636\n+ * @summary Test to use already started RMI registry\n+ * @requires vm.hasSA\n+ * @requires os.family != \"windows\"\n+ * @library \/test\/lib\n+ * @run main\/othervm DisableRegistryTest\n+ *\/\n+\n+public class DisableRegistryTest {\n+    private static final int REGISTRY_PORT = 10000;\n+    private static final String PREFIX_1 = \"app1\";\n+    private static final String PREFIX_2 = \"app2\";\n+\n+    private static DebugdUtils attachWithDebugd(int pid, boolean disableRegistry, String prefix) throws IOException {\n+        var debugd = new DebugdUtils(null);\n+        debugd.setRegistryPort(REGISTRY_PORT);\n+        debugd.setDisableRegistry(disableRegistry);\n+        debugd.setPrefix(prefix);\n+        debugd.attach(pid);\n+        return debugd;\n+    }\n+\n+    private static void test(String prefix) throws IOException, InterruptedException {\n+        JDKToolLauncher jhsdbLauncher = JDKToolLauncher.createUsingTestJDK(\"jhsdb\");\n+        if (prefix != null) {\n+            jhsdbLauncher.addToolArg(\"-J-Dsun.jvm.hotspot.rmi.serverNamePrefix=\" + prefix);\n+        }\n+        jhsdbLauncher.addToolArg(\"jinfo\");\n+        jhsdbLauncher.addToolArg(\"--connect\");\n+        jhsdbLauncher.addToolArg(\"localhost:\" + REGISTRY_PORT);\n+\n+        Process jhsdb = (SATestUtils.createProcessBuilder(jhsdbLauncher)).start();\n+        OutputAnalyzer out = new OutputAnalyzer(jhsdb);\n+        jhsdb.waitFor();\n+        System.out.println(out.getStdout());\n+        System.err.println(out.getStderr());\n+\n+        out.stderrShouldBeEmptyIgnoreDeprecatedWarnings();\n+        out.shouldContain(\"Attaching to remote server localhost:10000, please wait...\");\n+        out.shouldContain(\"java.vm.version\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/ This will detect most SA failures, including during the attach.\n+        out.shouldNotMatch(\"^sun.jvm.hotspot.debugger.DebuggerException:.*$\");\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n+        SATestUtils.validateSADebugDPrivileges();\n+\n+        LingeredApp app1 = null;\n+        LingeredApp app2 = null;\n+        DebugdUtils debugd1 = null;\n+        DebugdUtils debugd2 = null;\n+        try {\n+            app1 = LingeredApp.startApp();\n+            app2 = LingeredApp.startApp();\n+            debugd1 = attachWithDebugd((int)app1.getPid(), false, PREFIX_1);\n+            debugd2 = attachWithDebugd((int)app2.getPid(), true, PREFIX_2);\n+\n+            test(PREFIX_1);\n+            test(PREFIX_2);\n+        } catch (SkippedException se) {\n+            throw se;\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n+        } finally {\n+            if (debugd2 != null) {\n+                debugd2.detach();\n+            }\n+            if (debugd1 != null) {\n+                debugd1.detach();\n+            }\n+            LingeredApp.stopApp(app1);\n+            LingeredApp.stopApp(app2);\n+        }\n+        System.out.println(\"Test PASSED\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/sadebugd\/DisableRegistryTest.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}