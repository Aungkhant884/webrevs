{"files":[{"patch":"@@ -1,114 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2021 NTT DATA.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.IOException;\n-\n-import jdk.test.lib.JDKToolLauncher;\n-import jdk.test.lib.apps.LingeredApp;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.SA.SATestUtils;\n-\n-import jtreg.SkippedException;\n-\n-\/**\n- * @test\n- * @bug 8263636\n- * @summary Test to use already started RMI registry\n- * @requires vm.hasSA\n- * @requires os.family != \"windows\"\n- * @library \/test\/lib\n- * @run main\/othervm DebugdRmidTest\n- *\/\n-\n-public class DebugdRmidTest {\n-\n-    private static final int RMID_PORT = 10000;\n-\n-    private static Process startRMID() throws IOException, InterruptedException {\n-        JDKToolLauncher rmidLauncher = JDKToolLauncher.createUsingTestJDK(\"rmid\");\n-        rmidLauncher.addToolArg(\"-J-Dsun.rmi.activation.execPolicy=none\");\n-        rmidLauncher.addToolArg(\"-J--add-modules=jdk.hotspot.agent\");\n-        rmidLauncher.addToolArg(\"-port\");\n-        rmidLauncher.addToolArg(Integer.toString(RMID_PORT));\n-\n-        ProcessBuilder pb = new ProcessBuilder(rmidLauncher.getCommand());\n-        Process rmidProcess = pb.redirectOutput(ProcessBuilder.Redirect.INHERIT)\n-                                .redirectError(ProcessBuilder.Redirect.INHERIT)\n-                                .start();\n-        Thread.sleep(3000);  \/\/ Sleep 3 sec to wait for rmid to start.\n-        return rmidProcess;\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n-        SATestUtils.validateSADebugDPrivileges();\n-\n-        LingeredApp theApp = null;\n-        Process rmid = null;\n-        DebugdUtils debugd = null;\n-        try {\n-            rmid = startRMID();\n-            System.out.println(\"rmid started\");\n-            theApp = LingeredApp.startApp();\n-            System.out.println(\"Started LingeredApp with pid \" + theApp.getPid());\n-            debugd = new DebugdUtils(null);\n-            debugd.setRegistryPort(RMID_PORT);\n-            debugd.setDisableRegistry(true);\n-            debugd.attach(theApp.getPid());\n-\n-            JDKToolLauncher jhsdbLauncher = JDKToolLauncher.createUsingTestJDK(\"jhsdb\");\n-            jhsdbLauncher.addToolArg(\"jinfo\");\n-            jhsdbLauncher.addToolArg(\"--connect\");\n-            jhsdbLauncher.addToolArg(\"localhost:\" + RMID_PORT);\n-\n-            Process jhsdb = (SATestUtils.createProcessBuilder(jhsdbLauncher)).start();\n-            OutputAnalyzer out = new OutputAnalyzer(jhsdb);\n-            jhsdb.waitFor();\n-            System.out.println(out.getStdout());\n-            System.err.println(out.getStderr());\n-\n-            out.stderrShouldBeEmptyIgnoreDeprecatedWarnings();\n-            out.shouldContain(\"Attaching to remote server localhost:10000, please wait...\");\n-            out.shouldContain(\"java.vm.version\");\n-            out.shouldHaveExitValue(0);\n-\n-            \/\/ This will detect most SA failures, including during the attach.\n-            out.shouldNotMatch(\"^sun.jvm.hotspot.debugger.DebuggerException:.*$\");\n-        } catch (SkippedException se) {\n-            throw se;\n-        } catch (Exception ex) {\n-            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n-        } finally {\n-            if (debugd != null) {\n-                debugd.detach();\n-            }\n-            if (rmid != null) {\n-                rmid.destroy();\n-                rmid.waitFor();\n-            }\n-            LingeredApp.stopApp(theApp);\n-        }\n-        System.out.println(\"Test PASSED\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/sadebugd\/DebugdRmidTest.java","additions":0,"deletions":114,"binary":false,"changes":114,"status":"deleted"},{"patch":"@@ -37,0 +37,1 @@\n+    private String prefix;\n@@ -43,0 +44,1 @@\n+        this.prefix = null;\n@@ -54,0 +56,4 @@\n+    public void setPrefix(String prefix) {\n+        this.prefix = prefix;\n+    }\n+\n@@ -57,0 +63,3 @@\n+        if (prefix != null) {\n+            jhsdbLauncher.addToolArg(\"-J-Dsun.jvm.hotspot.rmi.serverNamePrefix=\" + prefix);\n+        }\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/sadebugd\/DebugdUtils.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021 NTT DATA.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.SA.SATestUtils;\n+\n+import jtreg.SkippedException;\n+\n+\/**\n+ * @test\n+ * @bug 8263636\n+ * @summary Test to use already started RMI registry\n+ * @requires vm.hasSA\n+ * @requires os.family != \"windows\"\n+ * @library \/test\/lib\n+ * @run main\/othervm DisableRegistryTest\n+ *\/\n+\n+public class DisableRegistryTest {\n+    private static final int REGISTRY_PORT = 10000;\n+    private static final String PREFIX_1 = \"app1\";\n+    private static final String PREFIX_2 = \"app2\";\n+\n+    private static DebugdUtils attachWithDebugd(int pid, boolean disableRegistry, String prefix) throws IOException {\n+        var debugd = new DebugdUtils(null);\n+        debugd.setRegistryPort(REGISTRY_PORT);\n+        debugd.setDisableRegistry(disableRegistry);\n+        debugd.setPrefix(prefix);\n+        debugd.attach(pid);\n+        return debugd;\n+    }\n+\n+    private static void test(String prefix) throws IOException, InterruptedException {\n+        JDKToolLauncher jhsdbLauncher = JDKToolLauncher.createUsingTestJDK(\"jhsdb\");\n+        if (prefix != null) {\n+            jhsdbLauncher.addToolArg(\"-J-Dsun.jvm.hotspot.rmi.serverNamePrefix=\" + prefix);\n+        }\n+        jhsdbLauncher.addToolArg(\"jinfo\");\n+        jhsdbLauncher.addToolArg(\"--connect\");\n+        jhsdbLauncher.addToolArg(\"localhost:\" + REGISTRY_PORT);\n+\n+        Process jhsdb = (SATestUtils.createProcessBuilder(jhsdbLauncher)).start();\n+        OutputAnalyzer out = new OutputAnalyzer(jhsdb);\n+        jhsdb.waitFor();\n+        System.out.println(out.getStdout());\n+        System.err.println(out.getStderr());\n+\n+        out.stderrShouldBeEmptyIgnoreDeprecatedWarnings();\n+        out.shouldContain(\"Attaching to remote server localhost:10000, please wait...\");\n+        out.shouldContain(\"java.vm.version\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/ This will detect most SA failures, including during the attach.\n+        out.shouldNotMatch(\"^sun.jvm.hotspot.debugger.DebuggerException:.*$\");\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n+        SATestUtils.validateSADebugDPrivileges();\n+\n+        LingeredApp app1 = null;\n+        LingeredApp app2 = null;\n+        DebugdUtils debugd1 = null;\n+        DebugdUtils debugd2 = null;\n+        try {\n+            app1 = LingeredApp.startApp();\n+            app2 = LingeredApp.startApp();\n+            debugd1 = attachWithDebugd((int)app1.getPid(), false, PREFIX_1);\n+            debugd2 = attachWithDebugd((int)app2.getPid(), true, PREFIX_2);\n+\n+            test(PREFIX_1);\n+            test(PREFIX_2);\n+        } catch (SkippedException se) {\n+            throw se;\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n+        } finally {\n+            if (debugd2 != null) {\n+                debugd2.detach();\n+            }\n+            if (debugd1 != null) {\n+                debugd1.detach();\n+            }\n+            LingeredApp.stopApp(app1);\n+            LingeredApp.stopApp(app2);\n+        }\n+        System.out.println(\"Test PASSED\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/sadebugd\/DisableRegistryTest.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}