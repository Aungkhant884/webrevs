{"files":[{"patch":"@@ -81,1 +81,1 @@\n-     * Various states of this socket.\n+     * The underlying SocketImpl\n@@ -83,4 +83,1 @@\n-    private boolean created = false;\n-    private boolean bound = false;\n-    private boolean closed = false;\n-    private Object closeLock = new Object();\n+    private final SocketImpl impl;\n@@ -89,1 +86,1 @@\n-     * The implementation of this Socket.\n+     * Various states of this socket, need stateLock to change.\n@@ -91,1 +88,4 @@\n-    private SocketImpl impl;\n+    private volatile boolean created;   \/\/ impl.create(boolean) called\n+    private volatile boolean bound;\n+    private volatile boolean closed;\n+    private final Object stateLock = new Object();\n@@ -127,1 +127,1 @@\n-        setImpl();\n+        this.impl = createImpl();\n@@ -267,1 +267,0 @@\n-        setImpl();\n@@ -269,2 +268,1 @@\n-            throw new IllegalArgumentException(\n-                       \"Port value out of range: \" + port);\n+            throw new IllegalArgumentException(\"Port value out of range: \" + port);\n@@ -272,1 +270,3 @@\n-          backlog = 50;\n+            backlog = 50;\n+\n+        this.impl = createImpl();\n@@ -275,4 +275,1 @@\n-        } catch(SecurityException e) {\n-            close();\n-            throw e;\n-        } catch(IOException e) {\n+        } catch (IOException | SecurityException e) {\n@@ -292,3 +289,18 @@\n-    SocketImpl getImpl() throws SocketException {\n-        if (!created)\n-            createImpl();\n+    private SocketImpl getImpl() throws SocketException {\n+        if (!created) {\n+            synchronized (stateLock) {\n+                if (!created) {\n+                    if (closed) {\n+                        throw new SocketException(\"Socket is closed\");\n+                    }\n+                    try {\n+                        impl.create(true);\n+                    } catch (SocketException e) {\n+                        throw e;\n+                    } catch (IOException e) {\n+                        throw new SocketException(e.getMessage());\n+                    }\n+                    created = true;\n+                }\n+            }\n+        }\n@@ -298,1 +310,4 @@\n-    private void setImpl() {\n+    \/**\n+     * Create a SocketImpl for a server socket.\n+     *\/\n+    private static SocketImpl createImpl() {\n@@ -301,1 +316,1 @@\n-            impl = factory.createSocketImpl();\n+            return factory.createSocketImpl();\n@@ -303,18 +318,1 @@\n-            impl = SocketImpl.createPlatformSocketImpl(true);\n-        }\n-    }\n-\n-    \/**\n-     * Creates the socket implementation.\n-     *\n-     * @throws SocketException if creation fails\n-     * @since 1.4\n-     *\/\n-    void createImpl() throws SocketException {\n-        if (impl == null)\n-            setImpl();\n-        try {\n-            impl.create(true);\n-            created = true;\n-        } catch (IOException e) {\n-            throw new SocketException(e.getMessage());\n+            return SocketImpl.createPlatformSocketImpl(true);\n@@ -382,6 +380,12 @@\n-          backlog = 50;\n-        try {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager security = System.getSecurityManager();\n-            if (security != null)\n-                security.checkListen(epoint.getPort());\n+            backlog = 50;\n+\n+        @SuppressWarnings(\"removal\")\n+        SecurityManager security = System.getSecurityManager();\n+        if (security != null)\n+            security.checkListen(epoint.getPort());\n+\n+        synchronized (stateLock) {\n+            if (closed)\n+                throw new SocketException(\"Socket is closed\");\n+            if (bound)\n+                throw new SocketException(\"Already bound\");\n@@ -391,6 +395,0 @@\n-        } catch(SecurityException e) {\n-            bound = false;\n-            throw e;\n-        } catch(IOException e) {\n-            bound = false;\n-            throw e;\n@@ -714,6 +712,12 @@\n-        synchronized(closeLock) {\n-            if (isClosed())\n-                return;\n-            if (created)\n-                impl.close();\n-            closed = true;\n+        synchronized (stateLock) {\n+            if (!closed) {\n+                try {\n+                    \/\/ close underlying socket if created\n+                    if (created) {\n+                        impl.close();\n+                    }\n+                } finally {\n+                    closed = true;\n+                }\n+\n+            }\n@@ -763,3 +767,1 @@\n-        synchronized(closeLock) {\n-            return closed;\n-        }\n+        return closed;\n@@ -786,1 +788,1 @@\n-    public synchronized void setSoTimeout(int timeout) throws SocketException {\n+    public void setSoTimeout(int timeout) throws SocketException {\n@@ -802,1 +804,1 @@\n-    public synchronized int getSoTimeout() throws IOException {\n+    public int getSoTimeout() throws IOException {\n@@ -987,1 +989,1 @@\n-     public synchronized void setReceiveBufferSize (int size) throws SocketException {\n+     public void setReceiveBufferSize (int size) throws SocketException {\n@@ -1010,2 +1012,1 @@\n-    public synchronized int getReceiveBufferSize()\n-    throws SocketException{\n+    public int getReceiveBufferSize() throws SocketException {\n","filename":"src\/java.base\/share\/classes\/java\/net\/ServerSocket.java","additions":66,"deletions":65,"binary":false,"changes":131,"status":"modified"}]}