{"files":[{"patch":"@@ -135,0 +135,18 @@\n+ * The {@code java.net.URL} constructors are deprecated.\n+ * Developers are encouraged to use {@link URI java.net.URI} to parse\n+ * or construct a {@code URL}. In cases where an instance of {@code\n+ * java.net.URL} is needed to open a connection, {@link URI} can be used\n+ * to construct or parse the URL string, possibly calling {@link\n+ * URI#parseServerAuthority()} to validate that the authority component\n+ * can be parsed as a server-based authority, and then calling\n+ * {@link URI#toURL()} to create the {@code URL} instance.\n+ * <p>\n+ * The URL constructors are specified to throw\n+ * {@link MalformedURLException} but the actual parsing\/validation\n+ * that is performed is implementation dependent. Some parsing\/validation\n+ * may be delayed until later, when the underlying {@linkplain\n+ * URLStreamHandler stream handler's implementation} is called.\n+ * Being able to construct an instance of {@code URL} doesn't\n+ * provide any guarantee about its conformance to the URL\n+ * syntax specification.\n+ * <p>\n@@ -154,19 +172,0 @@\n- * <p>\n- * The URL constructors are specified to throw\n- * {@link MalformedURLException} but the actual parsing\/validation\n- * that are performed is implementation dependent. Some parsing\/validation\n- * may be delayed until later, when the underlying {@linkplain\n- * URLStreamHandler stream handler's implementation} is called.\n- * Being able to construct an instance of {@code URL} doesn't\n- * provide any guarantee about its conformance to the URL\n- * syntax specification.\n- * <p>\n- * The {@code java.net.URL} constructors are deprecated.\n- * Developers are encouraged to use {@link URI java.net.URI} to parse\n- * or construct any {@code URL}. In cases where an instance of {@code\n- * java.net.URL} is needed to open a connection, {@link URI} can be used\n- * to construct or parse the URL string, possibly calling {@link\n- * URI#parseServerAuthority()} to validate that the authority component\n- * can be parsed as a server-based authority, and then calling\n- * {@link URI#toURL()} to create the {@code URL} instance.\n- *\n@@ -821,1 +820,1 @@\n-     * @param streamHandler a custom protocol stream handler for\n+     * @param handler a custom protocol stream handler for\n@@ -852,1 +851,1 @@\n-    public static URL of(URI uri, URLStreamHandler streamHandler)\n+    public static URL of(URI uri, URLStreamHandler handler)\n@@ -868,1 +867,1 @@\n-        if (streamHandler == null && protocol.equals(\"jrt\") && !uri.isOpaque()\n+        if (handler == null && protocol.equals(\"jrt\") && !uri.isOpaque()\n@@ -903,1 +902,1 @@\n-        if (streamHandler != null && !isOverrideable(protocol)) {\n+        if (handler != null && !isOverrideable(protocol)) {\n@@ -909,1 +908,1 @@\n-        var result = new URL((URL)null, uri.toString(), streamHandler);\n+        var result = new URL((URL)null, uri.toString(), handler);\n","filename":"src\/java.base\/share\/classes\/java\/net\/URL.java","additions":23,"deletions":24,"binary":false,"changes":47,"status":"modified"}]}