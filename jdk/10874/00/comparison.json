{"files":[{"patch":"@@ -697,1 +697,3 @@\n-        return new URL(\"file\", \"\", slashify(getAbsolutePath(), isDirectory()));\n+        @SuppressWarnings(\"deprecation\")\n+        var result = new URL(\"file\", \"\", slashify(getAbsolutePath(), isDirectory()));\n+        return result;\n","filename":"src\/java.base\/share\/classes\/java\/io\/File.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -187,0 +187,1 @@\n+        @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.base\/share\/classes\/java\/net\/HttpConnectSocketImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -175,1 +175,3 @@\n-        jarFileURL = new URL(spec.substring(0, separator++));\n+        @SuppressWarnings(\"deprecation\")\n+        var tmp = jarFileURL = new URL(spec.substring(0, separator++));\n+\n@@ -182,1 +184,2 @@\n-            jarFileURL = new URL(jarFileURL, \"#runtime\");\n+            @SuppressWarnings(\"deprecation\")\n+            var rtmp = jarFileURL = new URL(jarFileURL, \"#runtime\");\n","filename":"src\/java.base\/share\/classes\/java\/net\/JarURLConnection.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1136,1 +1136,1 @@\n-        return URL.fromURI(this);\n+        return URL.fromURI(this, null);\n","filename":"src\/java.base\/share\/classes\/java\/net\/URI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -132,1 +132,3 @@\n- * <p>\n+ *\n+ * <h2><a id=\"constructor-deprecation\"><\/a>Constructing instances of {@code URL}<\/h2>\n+ *\n@@ -152,0 +154,19 @@\n+ * <p>\n+ * The URL constructors are specified to throw\n+ * {@link MalformedURLException} but the actual parsing\/validation\n+ * that are performed is implementation dependent. Some parsing\/validation\n+ * may be delayed until later, when the underlying {@linkplain\n+ * URLStreamHandler stream handler's implementation} is called.\n+ * Being able to construct an instance of {@code URL} doesn't\n+ * provide any guarantee about its conformance to the URL\n+ * syntax specification.\n+ * <p>\n+ * The {@code java.net.URL} constructors are deprecated.\n+ * Developers are encouraged to use {@link URI java.net.URI} to parse\n+ * or construct any {@code URL}. In cases where an instance of {@code\n+ * java.net.URL} is needed to open a connection, {@link URI} can be used\n+ * to construct or parse the URL string, possibly calling {@link\n+ * URI#parseServerAuthority()} to validate that the authority component\n+ * can be parsed as a server-based authority, and then calling\n+ * {@link URI#toURL()} to create the {@code URL} instance.\n+ *\n@@ -155,0 +176,1 @@\n+ * <a id=\"integrity\"><\/a>\n@@ -167,0 +189,5 @@\n+ * Before constructing a {@code URL} from a {@code URI}, and depending\n+ * on the protocol involved, applications should consider validating\n+ * whether the URI authority {@linkplain URI#parseServerAuthority()\n+ * can be parsed as server-based}.\n+ * <p>\n@@ -376,0 +403,3 @@\n+     * @deprecated Use {@link URI#toURL()} to construct an instance of URL. See the note on\n+     * <a href=\"#constructor-deprecation\">constructor deprecation<\/a> for more\n+     * details.\n@@ -377,0 +407,1 @@\n+    @Deprecated(since = \"20\")\n@@ -402,0 +433,3 @@\n+     * @deprecated Use {@link URI#toURL()} to construct an instance of URL. See the note on\n+     * <a href=\"#constructor-deprecation\">constructor deprecation<\/a> for more\n+     * details.\n@@ -403,0 +437,1 @@\n+    @Deprecated(since = \"20\")\n@@ -449,0 +484,5 @@\n+     * @deprecated\n+     * Use {@link #fromURI(URI, URLStreamHandler)} to construct an instance of URL\n+     * associated with a custom protocol handler.\n+     * See the note on <a href=\"#constructor-deprecation\">constructor deprecation<\/a>\n+     * for more details.\n@@ -450,0 +490,1 @@\n+    @Deprecated(since = \"20\")\n@@ -536,0 +577,3 @@\n+     * @deprecated Use {@link URI#toURL()} to construct an instance of URL. See the note on\n+     * <a href=\"#constructor-deprecation\">constructor deprecation<\/a> for more\n+     * details.\n@@ -537,0 +581,1 @@\n+    @Deprecated(since = \"20\")\n@@ -596,0 +641,3 @@\n+     * @deprecated Use {@link URI#toURL()} to construct an instance of URL. See the note on\n+     * <a href=\"#constructor-deprecation\">constructor deprecation<\/a> for more\n+     * details.\n@@ -597,0 +645,1 @@\n+    @Deprecated(since = \"20\")\n@@ -629,0 +678,5 @@\n+     * @deprecated\n+     * Use {@link #fromURI(URI, URLStreamHandler)} to construct an instance of URL\n+     * associated with a custom protocol handler.\n+     * See the note on <a href=\"#constructor-deprecation\">constructor deprecation<\/a>\n+     * for more details.\n@@ -630,0 +684,1 @@\n+    @Deprecated(since = \"20\")\n@@ -751,1 +806,41 @@\n-     * Creates a URL from a URI, as if by invoking {@code uri.toURL()}.\n+     * Creates a URL from a URI, as if by invoking {@code uri.toURL()}, but\n+     * associating it with the given {@code URLStreamHandler}, if allowed.\n+     *\n+     * @apiNote\n+     * Applications should consider performing additional integrity\n+     * checks before constructing a {@code URL} and opening a connection.\n+     * See the <a href=#integrity>API note<\/a> in the class level API\n+     * documentation.\n+     *\n+     * @implSpec The implementation of this method includes calling the {@link\n+     * URLStreamHandler#parseURL(URL, String, int, int) parseURL} method on the\n+     * selected handler.\n+     *\n+     * @param uri the {@code URI} from which the returned {@code URL} should\n+     *           be built\n+     * @param streamHandler a custom protocol stream handler for\n+     *                      the returned {@code URL}. Can be {@code null},\n+     *                      in which case the default stream handler for\n+     *                      the protocol if any, will be used.\n+     *\n+     * @return a new {@code URL} instance created from the given {@code URI}\n+     *   and associated with the given {@code URLStreamHandler}, if any\n+     *\n+     * @throws NullPointerException if {@code uri} is {@code null}\n+     *\n+     * @throws IllegalArgumentException if no protocol is specified\n+     *         (the {@linkplain URI#getScheme() uri scheme} is {@code null}), or\n+     *         if the {@code URLStreamHandler} is not {@code null} and can not be\n+     *         set for the given protocol\n+     *\n+     * @throws  MalformedURLException if an unknown protocol is found,\n+     *          or the given URI fails to comply with the specific\n+     *          syntax of the associated protocol, or the\n+     *          underlying stream handler's {@linkplain\n+     *          URLStreamHandler#parseURL(URL, String, int, int)\n+     *          parseURL method} throws {@code IllegalArgumentException}\n+     *\n+     * @throws SecurityException\n+     *        if a security manager exists and its\n+     *        {@code checkPermission} method doesn't allow\n+     *        specifying a stream handler\n@@ -754,0 +849,2 @@\n+     *\n+     * @since 20\n@@ -755,1 +852,2 @@\n-    static URL fromURI(URI uri) throws MalformedURLException {\n+    public static URL fromURI(URI uri, URLStreamHandler streamHandler)\n+        throws MalformedURLException {\n@@ -759,0 +857,1 @@\n+\n@@ -761,0 +860,2 @@\n+        \/\/ fast path for canonical jrt:\/... URLs\n+        \/\/\n@@ -767,1 +868,2 @@\n-        if (protocol.equals(\"jrt\") && !uri.isOpaque()\n+        if (streamHandler == null && protocol.equals(\"jrt\") && !uri.isOpaque()\n+                && uri.getRawAuthority() == null\n@@ -782,3 +884,22 @@\n-            return new URL(\"jrt\", host, port, file, null);\n-        } else {\n-            return new URL((URL)null, uri.toString(), null);\n+            @SuppressWarnings(\"deprecation\")\n+            var result = new URL(\"jrt\", host, port, file, null);\n+            return result;\n+        }\n+\n+        \/\/ slow path (will work for non-canonical forms of jrt: too)\n+\n+        if (\"url\".equals(protocol)) {;\n+            String uristr = uri.toString();\n+            try {\n+                URI inner = new URI(uristr.substring(4));\n+                if (inner.isAbsolute()) {\n+                    protocol = inner.getScheme();\n+                }\n+            } catch (URISyntaxException use) {\n+                throw new MalformedURLException(use.getMessage());\n+            }\n+        }\n+\n+        if (streamHandler != null && !isOverrideable(protocol)) {\n+            throw new IllegalArgumentException(\"Can't override URLStreamHandler for protocol \"\n+                    + protocol);\n@@ -786,0 +907,4 @@\n+\n+        @SuppressWarnings(\"deprecation\")\n+        var result = new URL((URL)null, uri.toString(), streamHandler);\n+        return result;\n@@ -1708,1 +1833,2 @@\n-            replacementURL = new URL(urlString);\n+            @SuppressWarnings(\"deprecation\")\n+            var tmp = replacementURL = new URL(urlString);\n","filename":"src\/java.base\/share\/classes\/java\/net\/URL.java","additions":134,"deletions":8,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.net.MalformedURLException;\n@@ -138,1 +139,1 @@\n-                    propURL = new URL\n+                    propURL = newURL\n@@ -141,1 +142,1 @@\n-                    propURL = new URL(extraPropFile);\n+                    propURL = newURL(extraPropFile);\n@@ -996,0 +997,5 @@\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private static URL newURL(String spec) throws MalformedURLException {\n+        return new URL(spec);\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/security\/Security.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -246,1 +246,2 @@\n-            NULL_URL = new URL(\"http:\/\/null.oracle.com\/\");\n+            @SuppressWarnings(\"deprecation\")\n+            var tmp = NULL_URL = new URL(\"http:\/\/null.oracle.com\/\");\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/JceSecurity.java.template","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -94,0 +94,1 @@\n+        @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/ProviderVerifier.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -496,0 +496,1 @@\n+                                    @SuppressWarnings(\"deprecation\")\n@@ -608,1 +609,2 @@\n-                url = new URL(base, ParseUtil.encodePath(name, false));\n+                @SuppressWarnings(\"deprecation\")\n+                var tmp = url = new URL(base, ParseUtil.encodePath(name, false));\n@@ -644,1 +646,2 @@\n-                url = new URL(base, ParseUtil.encodePath(name, false));\n+                @SuppressWarnings(\"deprecation\")\n+                var tmp = url = new URL(base, ParseUtil.encodePath(name, false));\n@@ -732,1 +735,1 @@\n-            super(new URL(\"jar\", \"\", -1, url + \"!\/\", jarHandler));\n+            super(newURL(\"jar\", \"\", -1, url + \"!\/\", jarHandler));\n@@ -741,0 +744,7 @@\n+        @SuppressWarnings(\"deprecation\")\n+        private static URL newURL(String protocol, String host, int port, String file, URLStreamHandler handler)\n+                throws MalformedURLException\n+        {\n+            return new URL(protocol, host, port, file, handler);\n+        }\n+\n@@ -785,0 +795,1 @@\n+                                            @SuppressWarnings(\"deprecation\")\n@@ -832,0 +843,1 @@\n+            @SuppressWarnings(\"deprecation\")\n@@ -865,1 +877,2 @@\n-                url = new URL(getBaseURL(), ParseUtil.encodePath(nm, false));\n+                @SuppressWarnings(\"deprecation\")\n+                var tmp = url = new URL(getBaseURL(), ParseUtil.encodePath(nm, false));\n@@ -996,1 +1009,2 @@\n-                        url = new URL(csu, jarName);\n+                        @SuppressWarnings(\"deprecation\")\n+                        var tmp = url = new URL(csu, jarName);\n@@ -1119,0 +1133,1 @@\n+                @SuppressWarnings(\"deprecation\")\n@@ -1155,0 +1170,1 @@\n+            @SuppressWarnings(\"deprecation\")\n@@ -1176,0 +1192,1 @@\n+                @SuppressWarnings(\"deprecation\")\n@@ -1220,1 +1237,2 @@\n-            normalizedBase = new URL(getBaseURL(), \".\");\n+            @SuppressWarnings(\"deprecation\")\n+            var tmp = normalizedBase = new URL(getBaseURL(), \".\");\n@@ -1239,1 +1257,2 @@\n-                url = new URL(getBaseURL(), ParseUtil.encodePath(name, false));\n+                @SuppressWarnings(\"deprecation\")\n+                var tmp = url = new URL(getBaseURL(), ParseUtil.encodePath(name, false));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/URLClassPath.java","additions":26,"deletions":7,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -457,1 +457,3 @@\n-                        return new URL(\"jar:\" + csURL + \"!\/\" + encodedPath);\n+                        @SuppressWarnings(\"deprecation\")\n+                        var result = new URL(\"jar:\" + csURL + \"!\/\" + encodedPath);\n+                        return result;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModulePatcher.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -98,0 +98,1 @@\n+            @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.base\/share\/classes\/sun\/net\/util\/URLUtil.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -242,1 +242,3 @@\n-        return new URL(\"file\", \"\", path);\n+        @SuppressWarnings(\"deprecation\")\n+        var result = new URL(\"file\", \"\", path);\n+        return result;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/ParseUtil.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -990,1 +990,1 @@\n-                        target = new URL(base, loc);\n+                        target = newURL(base, loc);\n@@ -1888,1 +1888,1 @@\n-                                URL u = new URL (url, path);\n+                                URL u = newURL (url, path);\n@@ -2505,0 +2505,1 @@\n+                    @SuppressWarnings(\"deprecation\")\n@@ -2619,1 +2620,1 @@\n-                            url1 = new URL (url, \"\/\"); \/* truncate the path *\/\n+                            url1 = newURL (url, \"\/\"); \/* truncate the path *\/\n@@ -2777,1 +2778,1 @@\n-            locUrl = new URL(loc);\n+            locUrl = newURL(loc);\n@@ -2783,2 +2784,2 @@\n-          \/\/ treat loc as a relative URI to conform to popular browsers\n-          locUrl = new URL(url, loc);\n+            \/\/ treat loc as a relative URI to conform to popular browsers\n+           locUrl = newURL(url, loc);\n@@ -3997,0 +3998,14 @@\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private static URL newURL(String spec)\n+            throws MalformedURLException\n+    {\n+        return new URL(spec);\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private static URL newURL(URL context, String spec)\n+            throws MalformedURLException\n+    {\n+        return new URL(context, spec);\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/HttpURLConnection.java","additions":21,"deletions":6,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,2 +81,2 @@\n-            enclosedURL1 = new URL(file1.substring(0, sep1));\n-            enclosedURL2 = new URL(file2.substring(0, sep2));\n+            enclosedURL1 = newURL(file1.substring(0, sep1));\n+            enclosedURL2 = newURL(file2.substring(0, sep2));\n@@ -111,1 +111,1 @@\n-            enclosedURL = new URL(fileWithoutEntry);\n+            enclosedURL = newURL(fileWithoutEntry);\n@@ -182,1 +182,1 @@\n-            new URL(innerSpec);\n+            newURL(innerSpec);\n@@ -262,0 +262,5 @@\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private static URL newURL(String spec) throws MalformedURLException {\n+        return new URL(spec);\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/jar\/Handler.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -169,0 +169,1 @@\n+    @SuppressWarnings(\"deprecation\")\n@@ -180,0 +181,1 @@\n+    @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/jrt\/JavaRuntimeURLConnection.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -259,1 +259,1 @@\n-                        configURL = new URL(extra_config);\n+                        configURL = newURL(extra_config);\n@@ -296,1 +296,1 @@\n-                    init(new URL(config_url), newConfig);\n+                    init(newURL(config_url), newConfig);\n@@ -672,0 +672,5 @@\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private static URL newURL(String spec) throws MalformedURLException {\n+        return new URL(spec);\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/ConfigFile.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -417,1 +417,1 @@\n-                                policyURL = new URL(extra_policy);\n+                                policyURL = newURL(extra_policy);\n@@ -675,1 +675,1 @@\n-            location = new URL(ge.codeBase);\n+            location = newURL(ge.codeBase);\n@@ -1610,1 +1610,1 @@\n-                        u = new URL(spec.substring(0, separator));\n+                        u = newURL(spec.substring(0, separator));\n@@ -2226,0 +2226,5 @@\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private static URL newURL(String spec) throws MalformedURLException {\n+        return new URL(spec);\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/PolicyFile.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -507,0 +507,1 @@\n+            @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SeedGenerator.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -186,1 +186,2 @@\n-                url = new URL(encodedGetReq.toString());\n+                @SuppressWarnings(\"deprecation\")\n+                var tmp = url = new URL(encodedGetReq.toString());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/OCSP.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -158,1 +158,2 @@\n-                    url = new URL(arg);\n+                    @SuppressWarnings(\"deprecation\")\n+                    var tmp = url = new URL(arg);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/KeyStoreUtil.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -102,1 +102,3 @@\n-            return new URL(\"file\", \"\", name);\n+            @SuppressWarnings(\"deprecation\")\n+            var result = new URL(\"file\", \"\", name);\n+            return result;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/PathList.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -113,1 +113,2 @@\n-                    passURL = new URL(storePassURL);\n+                    @SuppressWarnings(\"deprecation\")\n+                    var tmp = passURL = new URL(storePassURL);\n@@ -120,1 +121,2 @@\n-                    passURL = new URL(policyUrl, storePassURL);\n+                    @SuppressWarnings(\"deprecation\")\n+                    var tmp = passURL = new URL(policyUrl, storePassURL);\n@@ -141,1 +143,2 @@\n-                    keyStoreUrl = new URL(keyStoreName);\n+                    @SuppressWarnings(\"deprecation\")\n+                    var tmp = keyStoreUrl = new URL(keyStoreName);\n@@ -148,1 +151,2 @@\n-                    keyStoreUrl = new URL(policyUrl, keyStoreName);\n+                    @SuppressWarnings(\"deprecation\")\n+                    var tmp = keyStoreUrl = new URL(policyUrl, keyStoreName);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/PolicyUtil.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,2 @@\n-            ru = new URL(\"ftp\", host, u.getFile() +\n+            @SuppressWarnings(\"deprecation\")\n+            var tmp = ru = new URL(\"ftp\", host, u.getFile() +\n","filename":"src\/java.base\/unix\/classes\/sun\/net\/www\/protocol\/file\/Handler.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,1 +111,2 @@\n-                egdUrl = new URL(egdSource);\n+                @SuppressWarnings(\"deprecation\")\n+                var tmp = egdUrl = new URL(egdSource);\n","filename":"src\/java.base\/unix\/classes\/sun\/security\/provider\/NativePRNG.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,1 +97,2 @@\n-            newurl = new URL(\"ftp\", host, file +\n+            @SuppressWarnings(\"deprecation\")\n+            var tmp = newurl = new URL(\"ftp\", host, file +\n","filename":"src\/java.base\/windows\/classes\/sun\/net\/www\/protocol\/file\/Handler.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -158,1 +158,2 @@\n-                url = new URL(\"file\", \"\", \"\/\/\" + host + url.getPath());\n+                @SuppressWarnings(\"deprecation\")\n+                var tmp = url = new URL(\"file\", \"\", \"\/\/\" + host + url.getPath());\n","filename":"src\/java.base\/windows\/classes\/sun\/net\/www\/protocol\/jar\/JarFileFactory.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -148,1 +148,3 @@\n-            return new URL(extractURL(xml));\n+            @SuppressWarnings(\"deprecation\")\n+            var result = new URL(extractURL(xml));\n+            return result;\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CDataTransferer.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1002,1 +1002,2 @@\n-            return scaledImagePath == null ? null : new URL(url.getProtocol(),\n+            @SuppressWarnings(\"deprecation\")\n+            var result = scaledImagePath == null ? null : new URL(url.getProtocol(),\n@@ -1004,0 +1005,1 @@\n+            return result;\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/LWCToolkit.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -160,0 +160,1 @@\n+            @SuppressWarnings(\"deprecation\")\n@@ -561,1 +562,2 @@\n-                            themeDir = new URL(str.substring(0, str.lastIndexOf('\/'))+\"\/\");\n+                            @SuppressWarnings(\"deprecation\")\n+                            var tmp = themeDir = new URL(str.substring(0, str.lastIndexOf('\/'))+\"\/\");\n@@ -579,0 +581,1 @@\n+                    @SuppressWarnings(\"deprecation\")\n@@ -671,0 +674,1 @@\n+                    @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/Metacity.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -316,1 +316,3 @@\n-            return getImage(new URL(url, name));\n+            @SuppressWarnings(\"deprecation\")\n+            var u = new URL(url, name);\n+            return getImage(u);\n@@ -366,1 +368,3 @@\n-            return getAudioClip(new URL(url, name));\n+            @SuppressWarnings(\"deprecation\")\n+            var u = new URL(url, name);\n+            return getAudioClip(u);\n","filename":"src\/java.desktop\/share\/classes\/java\/applet\/Applet.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -227,1 +227,3 @@\n-                            imageURL = new URL(\"jar:\"+(new File(jarName).toURL().toString())+\"!\/\"+fileName);\n+                            @SuppressWarnings(\"deprecation\")\n+                            var tmp = imageURL =\n+                                    new URL(\"jar:\"+(new File(jarName).toURL().toString())+\"!\/\"+fileName);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/SplashScreen.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+import java.net.MalformedURLException;\n@@ -307,1 +308,1 @@\n-                            codeBase = new URL(s.substring(0,ix));\n+                            codeBase = newURL(s.substring(0,ix));\n@@ -313,1 +314,1 @@\n-                                docBase = new URL(s.substring(0,ix+1));\n+                                docBase = newURL(s.substring(0,ix+1));\n@@ -359,0 +360,5 @@\n+    @SuppressWarnings(\"deprecation\")\n+    private static URL newURL(String spec) throws MalformedURLException {\n+        return new URL(spec);\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/Beans.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -798,1 +798,2 @@\n-                    page = new URL(loc);\n+                    @SuppressWarnings(\"deprecation\")\n+                    var tmp = page = new URL(loc);\n@@ -800,1 +801,2 @@\n-                    page = new URL(page, loc);\n+                    @SuppressWarnings(\"deprecation\")\n+                    var tmp = page = new URL(page, loc);\n@@ -929,0 +931,1 @@\n+        @SuppressWarnings(\"deprecation\")\n@@ -1951,1 +1954,2 @@\n-                            u = new URL(JEditorPane.this.getPage(), href);\n+                            @SuppressWarnings(\"deprecation\")\n+                            var tmp = u = new URL(JEditorPane.this.getPage(), href);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JEditorPane.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -263,1 +263,3 @@\n-                return new URL(_urlResourceBase, path);\n+                @SuppressWarnings(\"deprecation\")\n+                var result = new URL(_urlResourceBase, path);\n+                return result;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthParser.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1296,0 +1296,1 @@\n+            @SuppressWarnings(\"deprecation\")\n@@ -1306,0 +1307,1 @@\n+                @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/CSS.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -279,0 +279,1 @@\n+                @SuppressWarnings(\"deprecation\")\n@@ -518,1 +519,2 @@\n-            actionURL = (action == null)\n+            @SuppressWarnings(\"deprecation\")\n+            var tmp = actionURL = (action == null)\n@@ -524,1 +526,2 @@\n-                actionURL = new URL(actionURL + \"?\" + query);\n+                @SuppressWarnings(\"deprecation\")\n+                var tmp2 = actionURL = new URL(actionURL + \"?\" + query);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/FormView.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -74,1 +74,2 @@\n-                src = new URL(base, srcAtt);\n+                @SuppressWarnings(\"deprecation\")\n+                var tmp = src = new URL(base, srcAtt);\n@@ -376,1 +377,2 @@\n-            src = new URL(base, srcAtt);\n+            @SuppressWarnings(\"deprecation\")\n+            var tmp = src = new URL(base, srcAtt);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/FrameView.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3531,0 +3531,1 @@\n+                        @SuppressWarnings(\"deprecation\")\n@@ -4125,1 +4126,2 @@\n-                url = new URL(base, href);\n+                @SuppressWarnings(\"deprecation\")\n+                var tmp = url = new URL(base, href);\n@@ -4128,1 +4130,2 @@\n-                    url = new URL(href);\n+                    @SuppressWarnings(\"deprecation\")\n+                    var tmp = url = new URL(href);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/HTMLDocument.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -972,1 +972,2 @@\n-                u = new URL(base, href);\n+                @SuppressWarnings(\"deprecation\")\n+                var tmp = u = new URL(base, href);\n@@ -982,1 +983,2 @@\n-                        u = new URL(base, baseFile + href);\n+                        @SuppressWarnings(\"deprecation\")\n+                        var tmp2 = u = new URL(base, baseFile + href);\n@@ -1016,1 +1018,2 @@\n-                    u = new URL(doc.getBase(), this.href);\n+                    @SuppressWarnings(\"deprecation\")\n+                    var tmp = u = new URL(doc.getBase(), this.href);\n@@ -1029,1 +1032,2 @@\n-                    u = new URL(doc.getBase(), href);\n+                    @SuppressWarnings(\"deprecation\")\n+                    var tmp = u = new URL(doc.getBase(), href);\n@@ -2395,0 +2399,1 @@\n+                @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/HTMLEditorKit.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -199,0 +199,1 @@\n+            @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/ImageView.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -107,0 +107,1 @@\n+            @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/IsindexView.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2110,0 +2110,1 @@\n+                    @SuppressWarnings(\"deprecation\")\n@@ -2115,0 +2116,1 @@\n+                            @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/StyleSheet.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-        this(new URL(null, href));\n+        this(newURL(null, href));\n@@ -162,0 +162,7 @@\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private static URL newURL(URL context, String spec)\n+            throws MalformedURLException\n+    {\n+        return new URL(context, spec);\n+    }\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/URLImageSource.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -294,0 +294,1 @@\n+            @SuppressWarnings(\"deprecation\")\n@@ -408,0 +409,1 @@\n+            @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.desktop\/unix\/classes\/sun\/print\/CUPSPrinter.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import java.net.MalformedURLException;\n@@ -409,1 +410,1 @@\n-                new URL(uriStr.replaceFirst(\"ipp\", \"http\"));\n+                newURL(uriStr.replaceFirst(\"ipp\", \"http\"));\n@@ -1765,1 +1766,1 @@\n-                                             new URL(myURL+\".ppd\"));\n+                                             newURL(myURL+\".ppd\"));\n@@ -2079,0 +2080,5 @@\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private static URL newURL(String spec) throws MalformedURLException {\n+        return new URL(spec);\n+    }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/print\/IPPPrintService.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.net.MalformedURLException;\n@@ -478,1 +479,1 @@\n-                                           new URL(\"http:\/\/\"+\n+                                           newURL(\"http:\/\/\"+\n@@ -690,1 +691,1 @@\n-                                            new URL(\"http:\/\/\"+\n+                                            newURL(\"http:\/\/\"+\n@@ -972,0 +973,5 @@\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private static URL newURL(String spec) throws MalformedURLException {\n+        return new URL(spec);\n+    }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/print\/PrintServiceLookupProvider.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -274,1 +274,3 @@\n-            return new URL(new String(bytes, charset));\n+            @SuppressWarnings(\"deprecation\")\n+            var result = new URL(new String(bytes, charset));\n+            return result;\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WDataTransferer.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -409,0 +409,1 @@\n+             @SuppressWarnings(\"deprecation\")\n@@ -574,0 +575,2 @@\n+                     @SuppressWarnings(\"deprecation\")\n+                     var u = new URL(codebase.toString() + tok);\n@@ -575,1 +578,1 @@\n-                         .contains(new URL(codebase.toString() + tok))) {\n+                         .contains(u)) {\n","filename":"src\/java.management\/share\/classes\/javax\/management\/loading\/MLet.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,1 +105,2 @@\n-                baseURL = new URL(documentURL, att);\n+                @SuppressWarnings(\"deprecation\")\n+                var tmp = baseURL = new URL(documentURL, att);\n@@ -115,1 +116,2 @@\n-                    baseURL = new URL(documentURL, file.substring(0, i + 1));\n+                    @SuppressWarnings(\"deprecation\")\n+                    var tmp = baseURL = new URL(documentURL, file.substring(0, i + 1));\n","filename":"src\/java.management\/share\/classes\/javax\/management\/loading\/MLetContent.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -252,0 +252,1 @@\n+    @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.management\/share\/classes\/javax\/management\/loading\/MLetParser.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -129,0 +129,1 @@\n+    @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/VersionHelper.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -288,1 +288,3 @@\n-            list.add(new URL(parser.nextToken()));\n+            @SuppressWarnings(\"deprecation\")\n+            var u = new URL(parser.nextToken());\n+            list.add(u);\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/naming\/internal\/VersionHelper.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -776,1 +776,3 @@\n-            urls[i] = new URL(st.nextToken());\n+            @SuppressWarnings(\"deprecation\")\n+            var url = new URL(st.nextToken());\n+            urls[i] = url;\n","filename":"src\/java.rmi\/share\/classes\/sun\/rmi\/server\/LoaderHandler.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -543,1 +543,3 @@\n-            return new URL(\"file\", \"\", name);\n+            @SuppressWarnings(\"deprecation\")\n+            var result = new URL(\"file\", \"\", name);\n+            return result;\n","filename":"src\/java.scripting\/share\/classes\/com\/sun\/tools\/script\/shell\/Main.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,0 +100,1 @@\n+    @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.sql.rowset\/share\/classes\/javax\/sql\/rowset\/serial\/SerialDatalink.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -197,0 +197,1 @@\n+            @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/dom\/DocumentCache.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1608,1 +1608,2 @@\n-                    url = new URL(systemId);\n+                    @SuppressWarnings(\"deprecation\")\n+                    var tmp = url = new URL(systemId);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/trax\/TransformerFactoryImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -524,1 +524,2 @@\n-                    url = new URL(systemId);\n+                    @SuppressWarnings(\"deprecation\")\n+                    var tmp = url = new URL(systemId);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/xsltc\/trax\/TransformerImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -650,0 +650,1 @@\n+                @SuppressWarnings(\"deprecation\")\n@@ -2040,0 +2041,1 @@\n+        @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/XMLEntityManager.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -128,0 +128,1 @@\n+                @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/xinclude\/XIncludeTextReader.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -223,0 +223,1 @@\n+                            @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/CharInfo.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -338,0 +338,1 @@\n+                @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/Encodings.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -959,0 +959,1 @@\n+                        @SuppressWarnings(\"deprecation\")\n@@ -1237,0 +1238,1 @@\n+                @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/dom3\/LSSerializerImpl.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.net.MalformedURLException;\n@@ -416,1 +417,1 @@\n-            url = new URL(sourceUrl);\n+            url = newURL(sourceUrl);\n@@ -434,1 +435,1 @@\n-                url = new URL(SystemIDResolver.getAbsoluteURI(sourceUrl));\n+                url = newURL(SystemIDResolver.getAbsoluteURI(sourceUrl));\n@@ -565,0 +566,4 @@\n+    @SuppressWarnings(\"deprecation\")\n+    private static URL newURL(String spec) throws MalformedURLException {\n+        return new URL(spec);\n+    }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/utils\/ListingErrorHandler.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -226,1 +226,2 @@\n-                url = new URL(base, uri);\n+                @SuppressWarnings(\"deprecation\")\n+                var tmp = url = new URL(base, uri);\n@@ -228,1 +229,2 @@\n-                url = new URL(uri);\n+                @SuppressWarnings(\"deprecation\")\n+                var tmp = url = new URL(uri);\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/BaseEntry.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -143,1 +143,2 @@\n-                        baseURI = new URL(systemId);\n+                        @SuppressWarnings(\"deprecation\")\n+                        var tmp = baseURI = new URL(systemId);\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/CatalogImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -157,2 +157,0 @@\n-                URL url = null;\n-\n@@ -160,1 +158,2 @@\n-                    url = new URL(uri);\n+                    @SuppressWarnings(\"deprecation\")\n+                    var url = new URL(uri);\n@@ -163,0 +162,1 @@\n+                    @SuppressWarnings(\"deprecation\")\n@@ -164,1 +164,2 @@\n-                    url = (href.length() == 0 ? baseURL : new URL(baseURL, uri));\n+                    @SuppressWarnings(\"deprecation\")\n+                    var url = (href.length() == 0 ? baseURL : new URL(baseURL, uri));\n@@ -222,1 +223,3 @@\n-                return new URL(is.getSystemId()).openStream();\n+                @SuppressWarnings(\"deprecation\")\n+                var result = new URL(is.getSystemId()).openStream();\n+                return result;\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/CatalogResolverImpl.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -343,0 +343,1 @@\n+            @SuppressWarnings(\"deprecation\")\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/SecuritySupport.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -140,0 +140,1 @@\n+        @SuppressWarnings(\"deprecation\")\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/FSInfo.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -693,1 +693,3 @@\n-                return new URL(PROTOCOL, null, -1, name, handler);\n+                @SuppressWarnings(\"deprecation\")\n+                var result = new URL(PROTOCOL, null, -1, name, handler);\n+                return result;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/Main.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -141,0 +141,1 @@\n+                @SuppressWarnings(\"deprecation\")\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/ServiceProxy.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2256,1 +2256,2 @@\n-                        url = new URL(keyStoreName);\n+                        @SuppressWarnings(\"deprecation\")\n+                        var tmp = url = new URL(keyStoreName);\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -461,1 +461,2 @@\n-                            new URL(docrootParent);\n+                            @SuppressWarnings(\"deprecation\")\n+                            var tmp = new URL(docrootParent);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlOptions.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -581,1 +581,2 @@\n-            new URL(urlCandidate);\n+            @SuppressWarnings(\"deprecation\")\n+            var tmp = new URL(urlCandidate);\n@@ -590,0 +591,1 @@\n+    @SuppressWarnings(\"deprecation\")\n@@ -635,1 +637,2 @@\n-                            target = new URL(base, loc);\n+                            @SuppressWarnings(\"deprecation\")\n+                            var tmp = target = new URL(base, loc);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Extern.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1050,1 +1050,3 @@\n-        return new URL(\"file\", \"\", name);\n+        @SuppressWarnings(\"deprecation\")\n+        var result = new URL(\"file\", \"\", name);\n+        return result;\n","filename":"src\/jdk.jconsole\/share\/classes\/sun\/tools\/jconsole\/JConsole.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -3080,1 +3080,2 @@\n-                            url = new URL(filename);\n+                            @SuppressWarnings(\"deprecation\")\n+                            var tmp = url = new URL(filename);\n@@ -3095,1 +3096,2 @@\n-                                url = new URL(filename);\n+                                @SuppressWarnings(\"deprecation\")\n+                                var tmp = url = new URL(filename);\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/JShellTool.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -188,2 +188,2 @@\n-                    return new URL(null,\n-                                   new URI(\"jshell\", null, \"\/\" + name, null).toString(),\n+                    return URL.fromURI(\n+                                   new URI(\"jshell\", null, \"\/\" + name, null),\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/DefaultLoaderDelegate.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -396,1 +396,1 @@\n-            in = new URL(keyStorePasswordURL).openStream();\n+            in = newURL(keyStorePasswordURL).openStream();\n@@ -424,1 +424,1 @@\n-                in = new URL(privateKeyPasswordURL).openStream();\n+                in = newURL(privateKeyPasswordURL).openStream();\n@@ -602,1 +602,1 @@\n-                in = new URL(keyStoreURL).openStream();\n+                in = newURL(keyStoreURL).openStream();\n@@ -914,0 +914,5 @@\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private static URL newURL(String spec) throws MalformedURLException {\n+        return new URL(spec);\n+    }\n","filename":"src\/jdk.security.auth\/share\/classes\/com\/sun\/security\/auth\/module\/KeyStoreLoginModule.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,0 +86,5 @@\n+                    if (!userInfoCheck) {\n+                        throw new RuntimeException(\"uri.userInfo is \" + userInfo +\n+                                \" url.userInfo is \" +\n+                                url.getUserInfo());\n+                    }\n","filename":"test\/jdk\/java\/net\/URL\/URIToURLTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,361 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8294241\n+ * @modules java.base\/java.net:+open\n+ * @summary Test URL::fromURI(URI, URLStreamHandler)\n+ * @run junit\/othervm URLFromURITest\n+ *\/\n+\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodHandles.Lookup;\n+import java.lang.invoke.VarHandle;\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.net.URLStreamHandler;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n+import org.junit.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class URLFromURITest {\n+\n+    record TestInput(String uri, URLStreamHandler handler) {\n+        static TestInput withNoHandler(String uri) {\n+            return new TestInput(uri, null);\n+        }\n+        TestInput withCustomHandler() {\n+            return new TestInput(uri(), new CustomStreamHandler());\n+        }\n+        TestInput withUrlPrefix() {return inputWithUrlPrefix(this);}\n+    }\n+\n+    static TestInput inputWithUrlPrefix(TestInput input) {\n+        String uriStr = input.uri();\n+        var handler = input.handler();\n+        if (uriStr.startsWith(\"url:\")) return null;\n+        var urlUriStr = \"url:\" + uriStr;\n+        var urlURI = URI.create(urlUriStr);\n+        try {\n+            new URL(null, urlURI.toString(), handler);\n+        } catch (Throwable t) {\n+            System.err.println(\"skipping new URL(null, \\\"\" + urlURI + \"\\\", handler): \" + t);\n+            return null;\n+        }\n+        return new TestInput(urlUriStr, handler);\n+    }\n+\n+    static Stream<String> uris() {\n+        var uris = Stream.of(\n+                \"http:\/\/jag:cafebabe@java.sun.com:94\/b\/c\/d?q#g\",\n+                \"http:\/\/[1080:0:0:0:8:800:200C:417A]\/index.html\",\n+                \"http:\/\/a\/b\/c\/d;p?q\",\n+                \"mailto:mduerst@ifi.unizh.ch\",\n+                \"http:comp.infosystems.www.servers.unix\",\n+                \"http:\/\/j%41g:cafeb%41be@java.sun.com:94\/%41\/b\/c\/d?q#g\",\n+                \"jar:file:\/\/\/x.jar!\/\",\n+                \"jmod:\/java.base\",\n+                \"jmod:\/\/\/java.base\");\n+\n+        if (hasFtp()) {\n+            uris = Stream.concat(uris,\n+                    Stream.of(\"ftp:\/\/ftp.is.co.za\/rfc\/rfc1808.txt\"));\n+        }\n+\n+        return uris;\n+    }\n+\n+    static Stream<String> nonOverridableUris() {\n+        return Stream.of(\"file:\/\/\/nohost\/%41\/\",\n+                \"file:\/\/with.host\/%41\/\",\n+                \"file:\/x\/y\/z\",\n+                \"jrt:\/java.base\/java\/lang\/Integer.class\",\n+                \"jrt:\/\/\/java.base\/java\/lang\/Integer.class\");\n+    }\n+    static Stream<TestInput> withNoHandler() {\n+        return Stream.concat(uris(), nonOverridableUris())\n+                .map(TestInput::withNoHandler);\n+    }\n+\n+    static Stream<TestInput> withCustomHandler() {\n+        var withHandlers = uris()\n+                .map(TestInput::withNoHandler)\n+                .map(TestInput::withCustomHandler);\n+        return Stream.concat(withHandlers, Stream.of(\n+                new TestInput(\"foo:bar:baz\", new CustomStreamHandler()),\n+                new TestInput(\"jar:file:\/\/\/x.jar!\/\", new CustomStreamHandler()),\n+                new TestInput(\"jar:jar:file\/\/\/x.jar!\/bing\", new CustomStreamHandler()),\n+                new TestInput(\"blah:\/\/localhost:80\/x\/y\/z\", new CustomStreamHandler())\n+        ));\n+    }\n+\n+    static Stream<TestInput> overridingNonOverridable() {\n+        return nonOverridableUris().map(TestInput::withNoHandler)\n+                .map(TestInput::withCustomHandler);\n+    }\n+\n+    @Test\n+    public void checkExceptions() {\n+        var noscheme = URI.create(\"http\");\n+        var unknown = URI.create(\"unknown:\/\/\/foo\/bar\");\n+        var opaque = URI.create(\"opaque:opaque-path\");\n+        var jrt = URI.create(\"jrt:\/java.base\/java.lang.Integer.class\");\n+        var file = URI.create(\"file:\/\");\n+        var unoscheme = URI.create(\"url:http\");\n+        var uunknown = URI.create(\"url:unknown:\/\/\/foo\/bar\");\n+        var uopaque = URI.create(\"url:opaque:opaque-path\");\n+        var ujrt = URI.create(\"url:jrt:\/java.base\/java.lang.Integer.class\");\n+        var ufile = URI.create(\"url:file:\/\");\n+        var handler = new CustomStreamHandler();\n+        assertThrows(NullPointerException.class, () -> URL.fromURI(null, null));\n+        assertThrows(NullPointerException.class, () -> URL.fromURI(null, handler));\n+        assertThrows(IllegalArgumentException.class, () -> URL.fromURI(noscheme, null));\n+        assertThrows(IllegalArgumentException.class, () -> URL.fromURI(noscheme, handler));\n+        assertThrows(IllegalArgumentException.class, () -> URL.fromURI(jrt, handler));\n+        assertThrows(IllegalArgumentException.class, () -> URL.fromURI(file, handler));\n+        assertThrows(IllegalArgumentException.class, () -> URL.fromURI(ujrt, handler));\n+        assertThrows(IllegalArgumentException.class, () -> URL.fromURI(ufile, handler));\n+        assertThrows(MalformedURLException.class, () -> URL.fromURI(unknown, null));\n+        assertThrows(MalformedURLException.class, () -> URL.fromURI(opaque, null));\n+        assertThrows(MalformedURLException.class, () -> URL.fromURI(uunknown, null));\n+        assertThrows(MalformedURLException.class, () -> URL.fromURI(uopaque, null));\n+        assertThrows(MalformedURLException.class, () -> URL.fromURI(unoscheme, null));\n+        assertThrows(MalformedURLException.class, () -> URL.fromURI(unoscheme, handler));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(value = \"withNoHandler\")\n+    public void testWithNoHandler(TestInput input) throws Exception {\n+        String uriStr = input.uri();\n+        URLStreamHandler handler = input.handler();\n+        System.err.println(\"testWithNoHandler: \" + uriStr);\n+        assertNull(handler, input + \": input handler\");\n+        URI uri = new URI(uriStr);\n+        URL url = URL.fromURI(uri, handler);\n+        checkNoHandler(input, uri, url);\n+        var urlInput = input.withUrlPrefix();\n+        if (urlInput != null) {\n+            try {\n+                var urlURI = URI.create(input.uri());\n+                checkNoHandler(urlInput, uri, URL.fromURI(urlURI, null));\n+            } catch (Throwable x) {\n+                throw new AssertionError(\"Failed: \" + urlInput.uri() + \" with: \" + x, x);\n+            }\n+        }\n+    }\n+\n+    private void checkNoHandler(TestInput input, URI uri, URL url) throws Exception {\n+        System.err.println(\"Testing: \" + uri);\n+        checkURL(input, uri, url);\n+        URLStreamHandler urlHandler = URLAccess.getHandler(url);\n+        assertNotNull(urlHandler, input + \": URL.handler\");\n+        assertNull(urlHandler.getClass().getClassLoader(),\n+                input + \": URL.handler class loader\");\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(value = \"withCustomHandler\")\n+    public void checkCustomHandler(TestInput input) throws Exception {\n+        String uriStr = input.uri();\n+        URLStreamHandler handler = input.handler();\n+        System.err.println(\"testWithCustomHandler: \" + input);\n+        assertNotNull(handler, input + \": input handler\");\n+        URI uri = new URI(uriStr);\n+        URL url = URL.fromURI(uri, handler);\n+        checkCustomHandler(input, uri, url, handler);\n+        var urlInput = input.withUrlPrefix();\n+        if (urlInput != null) {\n+            urlInput = urlInput.withCustomHandler();\n+            handler = urlInput.handler();\n+            try {\n+                var urlURI = URI.create(urlInput.uri());\n+                checkCustomHandler(urlInput, uri, URL.fromURI(urlURI, handler), handler);\n+            } catch (Throwable x) {\n+                throw new AssertionError(\"Failed with handler: \" + urlInput.uri() + \" with: \" + x, x);\n+            }\n+        }\n+    }\n+\n+    private void checkCustomHandler(TestInput input, URI uri, URL url,\n+                                    URLStreamHandler handler) throws Exception {\n+        System.err.println(\"Testing: \" + uri);\n+        checkURL(input, uri, url);\n+        URLStreamHandler urlHandler = URLAccess.getHandler(url);\n+        assertSame(handler, urlHandler, input + \": URL.handler\");\n+        URLConnection c = url.openConnection();\n+        assertNotNull(c, input + \": opened connection\");\n+        assertEquals(CustomURLConnection.class, c.getClass(),\n+                input + \": connection class\");\n+        assertEquals(CustomStreamHandler.class, urlHandler.getClass(),\n+                input + \": handler class\");\n+        assertEquals(((CustomURLConnection)c).handler, handler, input + \": handler\");\n+        assertEquals(c.getURL(), url, input + \": connection url\");\n+        var customHandler = (CustomStreamHandler)urlHandler;\n+        assertEquals(customHandler.parseURLCalled(), 1, \"parseURL calls\");\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(value = \"overridingNonOverridable\")\n+    public void testOverridingNonOverridable(TestInput input) throws Exception {\n+        String uriStr = input.uri();\n+        URLStreamHandler handler = input.handler();\n+        System.err.println(\"testOverridingNonOverridable: \" + input);\n+        assertNotNull(handler, input + \": input handler\");\n+        URI uri = new URI(uriStr);\n+        try {\n+            URL url = URL.fromURI(uri, handler);\n+            throw new AssertionError(\"Should not be able to specify handler for: \" + uriStr);\n+        } catch (IllegalArgumentException x) {\n+            System.err.println(\"Got expected exception: \" + x);\n+        }\n+    }\n+\n+    private static boolean isFileBased(URI uri) {\n+        String scheme = uri.getScheme();\n+        boolean isJrt = \"jrt\".equals(scheme.toLowerCase(Locale.ROOT));\n+        boolean isJmod = \"jmod\".equals(scheme.toLowerCase(Locale.ROOT));\n+        boolean isFile = \"file\".equals(scheme.toLowerCase(Locale.ROOT));\n+        return isJmod || isJrt || isFile;\n+    }\n+\n+    private static void checkURL(TestInput input, URI uri, URL url) throws MalformedURLException {\n+        String scheme = uri.getScheme();\n+        assertEquals(scheme, url.getProtocol(), input + \": scheme\");\n+\n+        if (uri.isOpaque()) {\n+            String ssp = uri.getSchemeSpecificPart();\n+            assertEquals(ssp, url.getPath(), input + \": ssp\");\n+        } else {\n+            String authority = uri.getRawAuthority();\n+            boolean isHierarchical = uri.toString().startsWith(scheme + \":\/\/\");\n+            boolean isFileBased = isFileBased(uri);\n+\n+            \/\/ Network based URLs usually follow URI, but file based\n+            \/\/ protocol handlers have a few discrepancies in how they\n+            \/\/ treat an absent authority:\n+            \/\/ - URI authority is null if there is no authority, always\n+            \/\/ - URL authority is null or empty depending on the protocol\n+            \/\/   and on whether the URL is hierarchical or not.\n+            if (isFileBased  && authority == null) {\n+                \/\/ jrt: takes a fastpath - so that jrt:\/ is equivalent to jrt:\/\/\/\n+                if (scheme.equals(\"jrt\")) {\n+                    authority = \"\";\n+                }\n+                if (isHierarchical) {\n+                    authority = \"\";\n+                }\n+            }\n+            assertEquals(authority, url.getAuthority(), input + \": authority\");\n+\n+            \/\/ Network based URLs usually follow URI, but file based\n+            \/\/ protocol handlers have a few discrepancies in how they\n+            \/\/ treat an absent host:\n+            String host = uri.getHost();\n+            if (isFileBased && host == null) {\n+                host = \"\";\n+            }\n+\n+            assertEquals(host, url.getHost(), input + \": host\");\n+            if (host != null) {\n+                String userInfo = uri.getRawUserInfo();\n+                assertEquals(userInfo, url.getUserInfo(), input + \": userInfo\");\n+                assertEquals(uri.getPort(), url.getPort(), input + \": port\");\n+            }\n+\n+            String path = uri.getRawPath();\n+            assertEquals(path, url.getPath(), input + \": path\");\n+\n+            String query = uri.getQuery();\n+            assertEquals(query, url.getQuery(), input + \": query\");\n+        }\n+        String frag = uri.getRawFragment();\n+        assertEquals(frag, url.getRef(), input + \": fragment\");\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private static boolean hasFtp() {\n+        try {\n+            return new java.net.URL(\"ftp:\/\/localhost\/\") != null;\n+        } catch (java.net.MalformedURLException x) {\n+            System.err.println(\"FTP not supported by this runtime.\");\n+            return false;\n+        }\n+    }\n+\n+    static class CustomURLConnection extends URLConnection {\n+\n+        public final CustomStreamHandler handler;\n+        CustomURLConnection(CustomStreamHandler handler, URL url) {\n+            super(url);\n+            this.handler = handler;\n+        }\n+\n+        @Override\n+        public void connect() throws IOException {\n+\n+        }\n+    }\n+    static class CustomStreamHandler extends URLStreamHandler {\n+\n+        final AtomicInteger parseURLCalled = new AtomicInteger();\n+\n+        @Override\n+        protected void parseURL(URL u, String spec, int start, int limit) {\n+            parseURLCalled.incrementAndGet();\n+            super.parseURL(u, spec, start, limit);\n+        }\n+\n+        @Override\n+        protected URLConnection openConnection(URL u) throws IOException {\n+            return new CustomURLConnection(this, u);\n+        }\n+\n+        public int parseURLCalled() {\n+            return parseURLCalled.get();\n+        }\n+    }\n+\n+    static final class URLAccess {\n+        static final VarHandle HANDLER;\n+        static {\n+            try {\n+                Lookup lookup = MethodHandles.privateLookupIn(URL.class, MethodHandles.lookup());\n+                HANDLER = lookup.findVarHandle(URL.class, \"handler\", URLStreamHandler.class);\n+            } catch (Exception x) {\n+                throw new ExceptionInInitializerError(x);\n+            }\n+        }\n+        static URLStreamHandler getHandler(URL url) {\n+            return (URLStreamHandler)HANDLER.get(url);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/URL\/URLFromURITest.java","additions":361,"deletions":0,"binary":false,"changes":361,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,0 +75,1 @@\n+        @SuppressWarnings(\"deprecation\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/ThreadLocalParseUtil.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+            @SuppressWarnings(\"deprecation\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/ProtectionDomainBench.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}