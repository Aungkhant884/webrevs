{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -170,11 +170,5 @@\n-    public static final ExtendedSocketOptions getInstance() { return instance; }\n-\n-    \/** Registers support for extended socket options. Invoked by the jdk.net module. *\/\n-    public static final void register(ExtendedSocketOptions extOptions) {\n-        if (instance != null)\n-            throw new InternalError(\"Attempting to reregister extended options\");\n-\n-        instance = extOptions;\n-    }\n-\n-    static {\n+    public static ExtendedSocketOptions getInstance() {\n+        ExtendedSocketOptions ext = instance;\n+        if (ext != null) {\n+            return ext;\n+        }\n@@ -185,0 +179,1 @@\n+            ext = instance;\n@@ -186,2 +181,8 @@\n-            \/\/ the jdk.net module is not present => no extended socket options\n-            instance = new NoExtendedSocketOptions();\n+            synchronized (ExtendedSocketOptions.class) {\n+                ext = instance;\n+                if (ext != null) {\n+                    return ext;\n+                }\n+                \/\/ the jdk.net module is not present => no extended socket options\n+                ext = instance = new NoExtendedSocketOptions();\n+            }\n@@ -189,0 +190,9 @@\n+        return ext;\n+    }\n+\n+    \/** Registers support for extended socket options. Invoked by the jdk.net module. *\/\n+    public static synchronized void register(ExtendedSocketOptions extOptions) {\n+        if (instance != null)\n+            throw new InternalError(\"Attempting to reregister extended options\");\n+\n+        instance = extOptions;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/ext\/ExtendedSocketOptions.java","additions":24,"deletions":14,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,158 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+\/**\n+ * @test\n+ * @bug 8260366\n+ * @summary Verify that concurrent classloading of sun.net.ext.ExtendedSocketOptions and\n+ * jdk.net.ExtendedSocketOptions doesn't lead to a deadlock\n+ * @modules java.base\/sun.net.ext:open\n+ *          jdk.net\n+ * @run testng\/othervm ExtendedSocketOptionsTest\n+ * @run testng\/othervm ExtendedSocketOptionsTest\n+ * @run testng\/othervm ExtendedSocketOptionsTest\n+ * @run testng\/othervm ExtendedSocketOptionsTest\n+ * @run testng\/othervm ExtendedSocketOptionsTest\n+ *\/\n+public class ExtendedSocketOptionsTest {\n+\n+    \/**\n+     * Loads {@code jdk.net.ExtendedSocketOptions} and {@code sun.net.ext.ExtendedSocketOptions}\n+     * and invokes {@code sun.net.ext.ExtendedSocketOptions#getInstance()} concurrently in a thread\n+     * of their own and expects the classloading of both those classes\n+     * to succeed. Additionally, after these tasks are done, calls the\n+     * sun.net.ext.ExtendedSocketOptions#getInstance() and expects it to return a registered\n+     * ExtendedSocketOptions instance.\n+     *\/\n+    @Test\n+    public void testConcurrentClassLoad() throws Exception {\n+        final CountDownLatch taskTriggerLatch = new CountDownLatch(4);\n+        final List<Callable<?>> tasks = new ArrayList<>();\n+        tasks.add(new Task(\"jdk.net.ExtendedSocketOptions\", taskTriggerLatch));\n+        tasks.add(new Task(\"sun.net.ext.ExtendedSocketOptions\", taskTriggerLatch));\n+        \/\/ add a couple of tasks which call sun.net.ext.ExtendedSocketOptions#getInstance\n+        tasks.add(new GetInstanceTask(taskTriggerLatch));\n+        tasks.add(new GetInstanceTask(taskTriggerLatch));\n+        final ExecutorService executor = Executors.newFixedThreadPool(tasks.size());\n+        try {\n+            final Future<?>[] results = new Future[tasks.size()];\n+            \/\/ submit\n+            int i = 0;\n+            for (final Callable<?> task : tasks) {\n+                results[i++] = executor.submit(task);\n+            }\n+            \/\/ wait for completion\n+            for (i = 0; i < tasks.size(); i++) {\n+                results[i].get();\n+            }\n+        } finally {\n+            executor.shutdownNow();\n+        }\n+        \/\/ check that the sun.net.ext.ExtendedSocketOptions#getInstance() does indeed return\n+        \/\/ the registered instance\n+        final Object extSocketOptions = callSunNetExtSocketOptionsGetInstance();\n+        Assert.assertNotNull(extSocketOptions, \"sun.net.ext.ExtendedSocketOptions#getInstance()\" +\n+                \" unexpectedly returned null\");\n+        \/\/ now verify that each call to getInstance(), either in the tasks or here, returned the exact\n+        \/\/ same instance of ExtendedSocketOptions\n+        Assert.assertEquals(2, GetInstanceTask.extendedSocketOptionsInstances.size());\n+        for (final Object inst : GetInstanceTask.extendedSocketOptionsInstances) {\n+            Assert.assertSame(inst, extSocketOptions, \"sun.net.ext.ExtendedSocketOptions#getInstance()\" +\n+                    \" returned different instances\");\n+        }\n+    }\n+\n+    \/**\n+     * Reflectively calls sun.net.ext.ExtendedSocketOptions#getInstance() and returns\n+     * the result\n+     *\/\n+    private static Object callSunNetExtSocketOptionsGetInstance() throws Exception {\n+        final Class<?> k = Class.forName(\"sun.net.ext.ExtendedSocketOptions\");\n+        return k.getDeclaredMethod(\"getInstance\").invoke(null);\n+    }\n+\n+    private static class Task implements Callable<Class<?>> {\n+        private final String className;\n+        private final CountDownLatch latch;\n+\n+        private Task(final String className, final CountDownLatch latch) {\n+            this.className = className;\n+            this.latch = latch;\n+        }\n+\n+        @Override\n+        public Class<?> call() {\n+            System.out.println(Thread.currentThread().getName() + \" loading \" + this.className);\n+            try {\n+                \/\/ let the other tasks know we are ready to trigger our work\n+                latch.countDown();\n+                \/\/ wait for the other task to let us know they are ready to trigger their work too\n+                latch.await();\n+                return Class.forName(this.className);\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    private static class GetInstanceTask implements Callable<Object> {\n+        \/\/ keeps track of the instances returned by calls to sun.nex.ext.ExtendedSocketOptions#getInstance()\n+        \/\/ by the GetInstanceTask(s)\n+        private static final List<Object> extendedSocketOptionsInstances = Collections.synchronizedList(new ArrayList<>());\n+        private final CountDownLatch latch;\n+\n+        private GetInstanceTask(final CountDownLatch latch) {\n+            this.latch = latch;\n+        }\n+\n+        @Override\n+        public Object call() {\n+            System.out.println(Thread.currentThread().getName()\n+                    + \" calling  sun.net.ext.ExtendedSocketOptions#getInstance()\");\n+            try {\n+                \/\/ let the other tasks know we are ready to trigger our work\n+                latch.countDown();\n+                \/\/ wait for the other task to let us know they are ready to trigger their work too\n+                latch.await();\n+                \/\/ let's call getInstance on sun.net.ext.ExtendedSocketOptions\n+                final Object inst = callSunNetExtSocketOptionsGetInstance();\n+                extendedSocketOptionsInstances.add(inst);\n+                return inst;\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/net\/ext\/ExtendedSocketOptionsTest.java","additions":158,"deletions":0,"binary":false,"changes":158,"status":"added"}]}