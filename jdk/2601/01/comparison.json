{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -170,1 +170,19 @@\n-    public static final ExtendedSocketOptions getInstance() { return instance; }\n+    public static ExtendedSocketOptions getInstance() {\n+        if (instance != null) {\n+            return instance;\n+        }\n+        synchronized (ExtendedSocketOptions.class) {\n+            if (instance != null) {\n+                return instance;\n+            }\n+            try {\n+                \/\/ If the class is present, it will be initialized which\n+                \/\/ triggers registration of the extended socket options.\n+                Class<?> c = Class.forName(\"jdk.net.ExtendedSocketOptions\");\n+            } catch (ClassNotFoundException e) {\n+                \/\/ the jdk.net module is not present => no extended socket options\n+                instance = new NoExtendedSocketOptions();\n+            }\n+        }\n+        return instance;\n+    }\n@@ -173,1 +191,1 @@\n-    public static final void register(ExtendedSocketOptions extOptions) {\n+    public static synchronized void register(ExtendedSocketOptions extOptions) {\n@@ -180,11 +198,0 @@\n-    static {\n-        try {\n-            \/\/ If the class is present, it will be initialized which\n-            \/\/ triggers registration of the extended socket options.\n-            Class<?> c = Class.forName(\"jdk.net.ExtendedSocketOptions\");\n-        } catch (ClassNotFoundException e) {\n-            \/\/ the jdk.net module is not present => no extended socket options\n-            instance = new NoExtendedSocketOptions();\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/net\/ext\/ExtendedSocketOptions.java","additions":21,"deletions":14,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+\/**\n+ * @test\n+ * @bug 8260366\n+ * @summary Verify that concurrent classloading of sun.net.ext.ExtendedSocketOptions and\n+ * jdk.net.ExtendedSocketOptions doesn't lead to a deadlock\n+ * @modules java.base\/sun.net.ext:open\n+ *          jdk.net\n+ * @run testng\/othervm ExtendedSocketOptionsTest\n+ * @run testng\/othervm ExtendedSocketOptionsTest\n+ * @run testng\/othervm ExtendedSocketOptionsTest\n+ * @run testng\/othervm ExtendedSocketOptionsTest\n+ * @run testng\/othervm ExtendedSocketOptionsTest\n+ *\/\n+public class ExtendedSocketOptionsTest {\n+\n+    \/**\n+     * Loads {@code jdk.net.ExtendedSocketOptions} and {@code sun.net.ext.ExtendedSocketOptions}\n+     * concurrently in a thread of their own and expects the classloading of both those classes\n+     * to succeed. Additionally, after the classloading is successfully done, calls the\n+     * sun.net.ext.ExtendedSocketOptions#getInstance() and expects it to return a registered\n+     * ExtendedSocketOptions instance.\n+     *\/\n+    @Test\n+    public void testConcurrentClassLoad() throws Exception {\n+        final Callable<Class<?>> task1 = new Task(\"jdk.net.ExtendedSocketOptions\");\n+        final Callable<Class<?>> task2 = new Task(\"sun.net.ext.ExtendedSocketOptions\");\n+        final ExecutorService executor = Executors.newFixedThreadPool(2);\n+        try {\n+            final Future<Class<?>>[] results = new Future[2];\n+            \/\/ submit\n+            for (int i = 0; i < 2; i++) {\n+                results[i] = executor.submit(i == 0 ? task1 : task2);\n+            }\n+            \/\/ wait for completion\n+            for (int i = 0; i < 2; i++) {\n+                final Class<?> k = results[i].get();\n+                System.out.println(\"Completed loading \" + k.getName());\n+            }\n+        } finally {\n+            executor.shutdownNow();\n+        }\n+        \/\/ check that the sun.net.ext.ExtendedSocketOptions#getInstance() does indeed return\n+        \/\/ the registered instance\n+        final Class<?> k = Class.forName(\"sun.net.ext.ExtendedSocketOptions\");\n+        final Object extSocketOptions = k.getDeclaredMethod(\"getInstance\").invoke(null);\n+        Assert.assertNotNull(extSocketOptions, \"sun.net.ext.ExtendedSocketOptions#getInstance()\" +\n+                \" unexpectedly returned null\");\n+    }\n+\n+    private static class Task implements Callable<Class<?>> {\n+        private final String className;\n+\n+        private Task(final String className) {\n+            this.className = className;\n+        }\n+\n+        public Class<?> call() {\n+            System.out.println(Thread.currentThread().getName() + \" loading \" + this.className);\n+            try {\n+                return Class.forName(this.className);\n+            } catch (Exception e) {\n+                System.err.println(\"Failed to load \" + this.className);\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/net\/ext\/ExtendedSocketOptionsTest.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}