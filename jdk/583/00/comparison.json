{"files":[{"patch":"@@ -2029,1 +2029,4 @@\n-            return types.lub(condTypes.stream().map(t -> t.baseType()).collect(List.collector()));\n+            return types.lub(condTypes.stream()\n+                        .map(t -> t.baseType())\n+                        .filter(t -> !t.hasTag(BOT))\n+                        .collect(List.collector()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * @bug 8206986\n+ * @bug 8206986 8254286\n@@ -37,0 +37,49 @@\n+    void bug8254286(I1 i1, I2 i2, int s) {\n+        var t1 = switch (s) {\n+            case 1 -> i1;\n+            case 2 -> null;\n+            default -> i2;\n+        };\n+        t1.m();\n+        var t2 = switch (s) {\n+            case 2 -> null;\n+            case 1 -> i1;\n+            default -> i2;\n+        };\n+        t2.m();\n+        var t3 = switch (s) {\n+            case 1 -> i1;\n+            default -> i2;\n+            case 2 -> null;\n+        };\n+        t3.m();\n+        var t4 = switch (s) {\n+            case 1 -> i1;\n+            default -> null;\n+        };\n+        t4.m();\n+        var t5 = switch (s) {\n+            default -> null;\n+            case 1 -> i1;\n+        };\n+        t5.m();\n+        var t6 = switch (s) {\n+            default -> null;\n+        };\n+        var t7 = switch (s) {\n+            case 1 -> null;\n+            default -> null;\n+        };\n+        var t8 = switch (s) {\n+            case 1 -> null;\n+            case 2 -> null;\n+            default -> null;\n+        };\n+    }\n+\n+    interface I {\n+        void m();\n+    }\n+    interface I1 extends I {}\n+    interface I2 extends I {}\n+\n","filename":"test\/langtools\/tools\/javac\/switchexpr\/ExpressionSwitchInfer.java","additions":50,"deletions":1,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -4,1 +4,4 @@\n-3 errors\n+ExpressionSwitchInfer.java:66:13: compiler.err.cant.infer.local.var.type: t6, (compiler.misc.local.cant.infer.null)\n+ExpressionSwitchInfer.java:69:13: compiler.err.cant.infer.local.var.type: t7, (compiler.misc.local.cant.infer.null)\n+ExpressionSwitchInfer.java:73:13: compiler.err.cant.infer.local.var.type: t8, (compiler.misc.local.cant.infer.null)\n+6 errors\n","filename":"test\/langtools\/tools\/javac\/switchexpr\/ExpressionSwitchInfer.out","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}