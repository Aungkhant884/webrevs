{"files":[{"patch":"@@ -437,1 +437,1 @@\n-getString8859_1Chars(JNIEnv *env, jstring jstr)\n+getString8859_1Chars(JNIEnv *env, jstring jstr, jboolean strict)\n@@ -456,0 +456,7 @@\n+        if (strict && unicode == 0) {\n+            (*env)->ReleaseStringCritical(env, jstr, str);\n+            free(result);\n+            JNU_ThrowIllegalArgumentException(env, \"NULL character not allowed in platform string\");\n+            return 0;\n+        }\n+\n@@ -505,1 +512,1 @@\n-getString646_USChars(JNIEnv *env, jstring jstr)\n+getString646_USChars(JNIEnv *env, jstring jstr, jboolean strict)\n@@ -524,0 +531,6 @@\n+        if (strict && unicode == 0) {\n+            (*env)->ReleaseStringCritical(env, jstr, str);\n+            free(result);\n+            JNU_ThrowIllegalArgumentException(env, \"NULL character not allowed in platform string\");\n+            return 0;\n+        }\n@@ -580,1 +593,1 @@\n-getStringCp1252Chars(JNIEnv *env, jstring jstr)\n+getStringCp1252Chars(JNIEnv *env, jstring jstr, jboolean strict)\n@@ -599,0 +612,7 @@\n+        if (strict && c == 0) {\n+            (*env)->ReleaseStringCritical(env, jstr, str);\n+            free(result);\n+            JNU_ThrowIllegalArgumentException(env,\n+                   \"NULL character not allowed in platform string\");\n+            return 0;\n+        }\n@@ -817,0 +837,3 @@\n+static const char *\n+getStringPlatformChars0(JNIEnv *env, jstring jstr, jboolean *isCopy, jboolean);\n+\n@@ -820,1 +843,7 @@\n-    return JNU_GetStringPlatformChars(env, jstr, isCopy);\n+    return getStringPlatformChars0(env, jstr, isCopy, JNI_FALSE);\n+}\n+\n+JNIEXPORT const char *\n+GetStringPlatformCharsStrict(JNIEnv *env, jstring jstr, jboolean *isCopy)\n+{\n+    return getStringPlatformChars0(env, jstr, isCopy, JNI_TRUE);\n@@ -823,1 +852,1 @@\n-static const char* getStringBytes(JNIEnv *env, jstring jstr) {\n+static const char* getStringBytes(JNIEnv *env, jstring jstr, jboolean strict) {\n@@ -842,0 +871,11 @@\n+            if (strict) {\n+                for (int i=0; i<len; i++) {\n+                    if (result[i] == 0) {\n+                        JNU_ThrowIllegalArgumentException(env,\n+                            \"NULL character not allowed in platform string\");\n+                        free(result);\n+                        result = 0;\n+                        break;\n+                    }\n+                }\n+            }\n@@ -843,1 +883,0 @@\n-\n@@ -850,1 +889,1 @@\n-getStringUTF8(JNIEnv *env, jstring jstr)\n+getStringUTF8(JNIEnv *env, jstring jstr, jboolean strict)\n@@ -861,1 +900,1 @@\n-        return getStringBytes(env, jstr);\n+        return getStringBytes(env, jstr, strict);\n@@ -878,0 +917,5 @@\n+        if (strict && str[i] == 0) {\n+            (*env)->ReleasePrimitiveArrayCritical(env, value, str, 0);\n+            JNU_ThrowIllegalArgumentException(env, \"NULL character not allowed in platform string\");\n+            return NULL;\n+        }\n@@ -906,0 +950,12 @@\n+{\n+    return getStringPlatformChars0(env, jstr, isCopy, JNI_FALSE);\n+}\n+\n+JNIEXPORT const char * JNICALL\n+JNU_GetStringPlatformCharsStrict(JNIEnv *env, jstring jstr, jboolean *isCopy)\n+{\n+    return getStringPlatformChars0(env, jstr, isCopy, JNI_TRUE);\n+}\n+\n+static const char *\n+getStringPlatformChars0(JNIEnv *env, jstring jstr, jboolean *isCopy, jboolean strict)\n@@ -912,1 +968,1 @@\n-        return getStringUTF8(env, jstr);\n+        return getStringUTF8(env, jstr, strict);\n@@ -914,1 +970,1 @@\n-        return getString8859_1Chars(env, jstr);\n+        return getString8859_1Chars(env, jstr, strict);\n@@ -916,1 +972,1 @@\n-        return getString646_USChars(env, jstr);\n+        return getString646_USChars(env, jstr, strict);\n@@ -918,1 +974,1 @@\n-        return getStringCp1252Chars(env, jstr);\n+        return getStringCp1252Chars(env, jstr, strict);\n@@ -923,1 +979,1 @@\n-        return getStringBytes(env, jstr);\n+        return getStringBytes(env, jstr, strict);\n","filename":"src\/java.base\/share\/native\/libjava\/jni_util.c","additions":69,"deletions":13,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -102,0 +102,8 @@\n+\/* Convert between Java strings and i18n C strings\n+ * Performs additional sanity checks on converted string\n+ * such as presence of null characters which are not allowed.\n+ * NULL may be returned with IllegalArgumentException pending\n+ *\/\n+JNIEXPORT const char *\n+GetStringPlatformCharsStrict(JNIEnv *env, jstring jstr, jboolean *isCopy);\n+\n@@ -105,0 +113,11 @@\n+\/* Convert between Java strings and i18n C strings\n+ * Performs additional sanity checks on converted string\n+ * such as presence of null characters which are not allowed.\n+ * NULL may be returned with IllegalArgumentException pending\n+ *\/\n+JNIEXPORT const char * JNICALL\n+JNU_GetStringPlatformCharsStrict(JNIEnv *env, jstring jstr, jboolean *isCopy);\n+\n+\/* Convert between Java strings and i18n C strings\n+ * Deprecated: Use JNU_GetStringPlatformCharsStrict\n+ *\/\n","filename":"src\/java.base\/share\/native\/libjava\/jni_util.h","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-    hostname = JNU_GetStringPlatformChars(env, host, NULL);\n+    hostname = JNU_GetStringPlatformCharsStrict(env, host, NULL);\n","filename":"src\/java.base\/unix\/native\/libnet\/Inet4AddressImpl.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -222,1 +222,1 @@\n-    hostname = JNU_GetStringPlatformChars(env, host, NULL);\n+    hostname = JNU_GetStringPlatformCharsStrict(env, host, NULL);\n","filename":"src\/java.base\/unix\/native\/libnet\/Inet6AddressImpl.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-    hostname = JNU_GetStringPlatformChars(env, host, NULL);\n+    hostname = JNU_GetStringPlatformCharsStrict(env, host, NULL);\n","filename":"src\/java.base\/windows\/native\/libnet\/Inet4AddressImpl.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-    hostname = JNU_GetStringPlatformChars(env, host, NULL);\n+    hostname = JNU_GetStringPlatformCharsStrict(env, host, NULL);\n","filename":"src\/java.base\/windows\/native\/libnet\/Inet6AddressImpl.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-        pUser = JNU_GetStringPlatformChars(env, user, &isCopy);\n+        pUser = JNU_GetStringPlatformCharsStrict(env, user, &isCopy);\n@@ -87,1 +87,1 @@\n-        pDomain = JNU_GetStringPlatformChars(env, domain, &isCopy);\n+        pDomain = JNU_GetStringPlatformCharsStrict(env, domain, &isCopy);\n@@ -93,1 +93,1 @@\n-        pPassword = JNU_GetStringPlatformChars(env, password, &isCopy);\n+        pPassword = JNU_GetStringPlatformCharsStrict(env, password, &isCopy);\n","filename":"src\/java.base\/windows\/native\/libnet\/NTLMAuthSequence.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8300038\n+ * @modules java.base\/java.net\n+ * @compile\/module=java.base java\/net\/NullChar.java\n+ * @summary foo\n+ * @run main\/othervm java.base\/java.net.NullChar\n+ * @run main\/othervm -Dfile.encoding=COMPAT java.base\/java.net.NullChar\n+ *\/\n+\n+public class NullCharDriver { }\n","filename":"test\/jdk\/java\/net\/InetAddress\/NullCharDriver.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.net;\n+\n+import java.net.spi.InetAddressResolver.LookupPolicy;\n+\n+public class NullChar {\n+    public static void main(String[] args) {\n+        var name = \"foo\\u0000bar\";\n+        System.out.println(\"file.encoding = \" + System.getProperty(\"file.encoding\"));\n+        System.out.println(\"native.encoding = \" + System.getProperty(\"native.encoding\"));\n+\n+        \/\/ This should throw IAE as it calls the internal impl\n+        try {\n+            var impl = new Inet6AddressImpl();\n+            var addrs = impl.lookupAllHostAddr(name, LookupPolicy.of(LookupPolicy.IPV4));\n+        } catch (UnknownHostException e0) {\n+            throw new RuntimeException(e0);\n+        } catch (IllegalArgumentException e) {\n+            e.printStackTrace();\n+        }\n+\n+        \/\/ This should throw UHE as before and not IAE for compatibility\n+        try {\n+            var addrs = InetAddress.getByName(name);\n+        } catch (IllegalArgumentException e) {\n+            throw new RuntimeException(e);\n+        } catch (UnknownHostException e0) {\n+            e0.printStackTrace();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/InetAddress\/java.base\/java\/net\/NullChar.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"}]}