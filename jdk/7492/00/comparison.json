{"files":[{"patch":"@@ -153,1 +153,1 @@\n-            while ((n = inf.inflate(b, off, len)) == 0) {\n+            do {\n@@ -161,1 +161,1 @@\n-            }\n+            } while ((n = inf.inflate(b, off, len)) == 0);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/InflaterInputStream.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.util.zip;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+import java.util.zip.Inflater;\n+import java.util.zip.InflaterInputStream;\n+import java.util.zip.DeflaterOutputStream;\n+\n+\/**\n+ * A simple benchmark to measure the performance improvements achieved by avoiding\n+ * unnecessary native calls in InflaterInputStream::read() (see JDK-8281962).\n+ *\n+ * before JDK-8281962\n+ * ------------------\n+ * Benchmark                                     (size)  Mode  Cnt  Score   Error  Units\n+ * InflaterInputStreams.inflaterInputStreamRead     256  avgt    5  2.571 ± 0.120  us\/op\n+ * InflaterInputStreams.inflaterInputStreamRead     512  avgt    5  2.861 ± 0.064  us\/op\n+ * InflaterInputStreams.inflaterInputStreamRead    4096  avgt    5  5.110 ± 0.278  us\/op\n+ *\n+ * after JDK-8281962\n+ * -----------------\n+ * Benchmark                                     (size)  Mode  Cnt  Score   Error  Units\n+ * InflaterInputStreams.inflaterInputStreamRead     256  avgt    5  2.332 ± 0.081  us\/op\n+ * InflaterInputStreams.inflaterInputStreamRead     512  avgt    5  2.691 ± 0.293  us\/op\n+ * InflaterInputStreams.inflaterInputStreamRead    4096  avgt    5  4.812 ± 1.038  us\/op\n+ *\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 3, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 5, timeUnit = TimeUnit.SECONDS)\n+public class InflaterInputStreams {\n+\n+    @Param({\"256\", \"512\", \"4096\"})\n+    private int size;\n+    private byte[] chars;\n+    private byte[] words;\n+    private static final int MAX_SIZE = 5000; \/\/ Should be bigger than the biggest size @Param\n+    private static byte[] inflated = new byte[MAX_SIZE];\n+    ByteArrayInputStream deflated;\n+\n+    @Setup(Level.Trial)\n+    public void beforeRun() throws IOException {\n+        final int charCount = 64;\n+        final int wordLength = 8;\n+        chars = new byte[charCount];\n+        Random r = new Random(123456789);\n+        r.nextBytes(chars);\n+        words = new byte[1024];\n+        for (int i = 0; i < words.length \/ wordLength; i++) {\n+            System.arraycopy(chars, r.nextInt(charCount - wordLength), words, i * wordLength, wordLength);\n+        }\n+    }\n+\n+    @Setup(Level.Iteration)\n+    public void beforeIteration() throws IOException {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream(MAX_SIZE);\n+        DeflaterOutputStream defout = new DeflaterOutputStream(baos);\n+        ByteArrayInputStream bais = new ByteArrayInputStream(words, 0, size);\n+        bais.transferTo(defout);\n+        \/\/ We need to close the DeflaterOutputStream in order to flush\n+        \/\/ all the compressed data in the Deflater.\n+        defout.close();\n+        deflated = new ByteArrayInputStream(baos.toByteArray());\n+    }\n+\n+    @Benchmark\n+    public void inflaterInputStreamRead() throws IOException {\n+        deflated.reset();\n+        InflaterInputStream iis = new InflaterInputStream(deflated);\n+        while (iis.read(inflated, 0, inflated.length) != -1);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/zip\/InflaterInputStreams.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"}]}