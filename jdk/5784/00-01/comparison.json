{"files":[{"patch":"@@ -54,0 +54,1 @@\n+import java.util.concurrent.ThreadLocalRandom;\n@@ -226,2 +227,3 @@\n-    public void testGetParallelism() {\n-        ForkJoinPool p = new ForkJoinPool(1);\n+    public void testGetParallelism_requestedValue() {\n+        int parallelism = ThreadLocalRandom.current().nextInt(1, 4);\n+        ForkJoinPool p = new ForkJoinPool(parallelism);\n@@ -229,1 +231,1 @@\n-            assertEquals(1, p.getParallelism());\n+            assertEquals(parallelism, p.getParallelism());\n@@ -232,0 +234,32 @@\n+\n+    private static int availableProcessors() {\n+        return Runtime.getRuntime().availableProcessors();\n+    }\n+\n+    \/**\n+     * default pool parallelism is availableProcessors()\n+     *\/\n+    public void testParallelism_defaultValue() {\n+        ForkJoinPool p = new ForkJoinPool();\n+        try (PoolCleaner cleaner = cleaner(p)) {\n+            assertEquals(availableProcessors(), p.getParallelism());\n+        }\n+    }\n+\n+    \/**\n+     * default common pool parallelism is max(1, availableProcessors() - 1)\n+     * But getParallelism() returns 1 when property-requested parallelism is 0.\n+     *\/\n+    public void testCommonPoolParallelism_defaultValue() {\n+        if (!testImplementationDetails) return;\n+\n+        Integer propertyParallelism =\n+            Integer.getInteger(\n+                \"java.util.concurrent.ForkJoinPool.common.parallelism\");\n+\n+        int expectedParallelism = (propertyParallelism == null)\n+            ? Math.max(1, availableProcessors() - 1)\n+            : Math.max(1, propertyParallelism);\n+        assertEquals(expectedParallelism,\n+                     ForkJoinPool.commonPool().getParallelism());\n+    }\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ForkJoinPoolTest.java","additions":37,"deletions":3,"binary":false,"changes":40,"status":"modified"}]}