{"files":[{"patch":"@@ -97,1 +97,0 @@\n-#include \"runtime\/prefetch.inline.hpp\"\n@@ -2481,29 +2480,0 @@\n-static inline JavaThread *prefetch_and_load_ptr(JavaThread*const * addr, intx prefetch_interval) {\n-  Prefetch::read((void*)addr, prefetch_interval);\n-  return *addr;\n-}\n-\n-struct JavaThreadPrefetchedIterator {\n-    JavaThread*const * _end;\n-    JavaThread*const * _current;\n-\n-    JavaThreadPrefetchedIterator(ThreadsList* list) :\n-      _end(list->threads() + list->length()), _current(list->threads()) {}\n-\n-    JavaThread* current() {\n-      return _current != _end\n-        ? prefetch_and_load_ptr(_current, PrefetchScanIntervalInBytes)\n-        : NULL;\n-    }\n-\n-    void next() {\n-      _current++;\n-    }\n-  };\n-\n-#define DO_JAVA_THREADS(LIST, X) \\\n-  for (JavaThreadPrefetchedIterator iter(LIST); JavaThread* X = iter.current(); iter.next())\n-\n-\/\/ All JavaThreads\n-#define ALL_JAVA_THREADS(X) DO_JAVA_THREADS(ThreadsSMRSupport::get_java_thread_list(), X)\n-\n@@ -2518,0 +2488,4 @@\n+\/\/ All JavaThreads\n+#define ALL_JAVA_THREADS(X) \\\n+  for (JavaThread* X : *ThreadsSMRSupport::get_java_thread_list())\n+\n@@ -3651,1 +3625,1 @@\n-  DO_JAVA_THREADS(t_list, p) {\n+  for (JavaThread* p : *t_list) {\n@@ -3672,1 +3646,1 @@\n-  DO_JAVA_THREADS(t_list, p) {\n+  for (JavaThread* p : *t_list) {\n@@ -3687,1 +3661,1 @@\n-  DO_JAVA_THREADS(t_list, q) {\n+  for (JavaThread* q : *t_list) {\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":7,"deletions":33,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"utilities\/debug.hpp\"\n@@ -632,0 +633,23 @@\n+#ifdef ASSERT\n+\n+ThreadsList::Iterator::Iterator() : _thread_ptr(nullptr), _list(nullptr) {}\n+\n+uint ThreadsList::Iterator::check_index(ThreadsList* list, uint i) {\n+  assert(i <= list->length(), \"invalid index %u\", i);\n+  return i;\n+}\n+\n+void ThreadsList::Iterator::assert_not_singular() const {\n+  assert(_list != nullptr, \"singular iterator\");\n+}\n+\n+void ThreadsList::Iterator::assert_dereferenceable() const {\n+  assert(_thread_ptr < (_list->threads() + _list->length()), \"not dereferenceable\");\n+}\n+\n+void ThreadsList::Iterator::assert_same_list(Iterator i) const {\n+  assert(_list == i._list, \"iterators from different lists\");\n+}\n+\n+#endif \/\/ ASSERT\n+\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.cpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"utilities\/debug.hpp\"\n@@ -195,0 +196,4 @@\n+  class Iterator;\n+  inline Iterator begin();\n+  inline Iterator end();\n+\n@@ -214,0 +219,23 @@\n+class ThreadsList::Iterator {\n+  JavaThread* const* _thread_ptr;\n+  DEBUG_ONLY(ThreadsList* _list;)\n+\n+  static uint check_index(ThreadsList* list, uint i) NOT_DEBUG({ return i; });\n+  void assert_not_singular() const NOT_DEBUG_RETURN;\n+  void assert_dereferenceable() const NOT_DEBUG_RETURN;\n+  void assert_same_list(Iterator i) const NOT_DEBUG_RETURN;\n+\n+public:\n+  Iterator() NOT_DEBUG(= default); \/\/ Singular iterator.\n+  inline Iterator(ThreadsList* list, uint i);\n+\n+  inline bool operator==(Iterator other) const;\n+  inline bool operator!=(Iterator other) const;\n+\n+  inline JavaThread* operator*() const;\n+  inline JavaThread* operator->() const;\n+\n+  inline Iterator& operator++();\n+  inline Iterator operator++(int);\n+};\n+\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.hpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -36,0 +36,53 @@\n+#include \"utilities\/debug.hpp\"\n+#include \"utilities\/macros.hpp\"\n+\n+ThreadsList::Iterator::Iterator(ThreadsList* list, uint i) :\n+  _thread_ptr(list->threads() + check_index(list, i))\n+  DEBUG_ONLY(COMMA _list(list))\n+{}\n+\n+bool ThreadsList::Iterator::operator==(Iterator i) const {\n+  assert_not_singular();\n+  assert_same_list(i);\n+  return _thread_ptr == i._thread_ptr;\n+}\n+\n+bool ThreadsList::Iterator::operator!=(Iterator i) const {\n+  assert_not_singular();\n+  assert_same_list(i);\n+  return _thread_ptr != i._thread_ptr;\n+}\n+\n+JavaThread* ThreadsList::Iterator::operator*() const {\n+  assert_not_singular();\n+  assert_dereferenceable();\n+  Prefetch::read(const_cast<JavaThread**>(_thread_ptr), PrefetchScanIntervalInBytes);\n+  return *_thread_ptr;\n+}\n+\n+JavaThread* ThreadsList::Iterator::operator->() const {\n+  return operator*();\n+}\n+\n+ThreadsList::Iterator& ThreadsList::Iterator::operator++() {\n+  assert_not_singular();\n+  assert_dereferenceable();\n+  ++_thread_ptr;\n+  return *this;\n+}\n+\n+ThreadsList::Iterator ThreadsList::Iterator::operator++(int) {\n+  assert_not_singular();\n+  assert_dereferenceable();\n+  Iterator result = *this;\n+  ++_thread_ptr;\n+  return result;\n+}\n+\n+ThreadsList::Iterator ThreadsList::begin() {\n+  return Iterator(this, 0);\n+}\n+\n+ThreadsList::Iterator ThreadsList::end() {\n+  return Iterator(this, length());\n+}\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.inline.hpp","additions":53,"deletions":0,"binary":false,"changes":53,"status":"modified"}]}