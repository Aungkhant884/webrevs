{"files":[{"patch":"@@ -362,0 +362,1 @@\n+ -runtime\/cds\/appcds\/LambdaWithJavaAgent.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test dumping lambda proxy class with java agent transforming\n+ *          its interface.\n+ * @requires vm.cds\n+ * @requires vm.jvmti\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @compile test-classes\/ClassFileVersionTransformer.java\n+ * @compile test-classes\/OldProvider.jasm\n+ * @compile test-classes\/LambdaContainsOldInfApp.java\n+ * @run driver LambdaWithJavaAgent\n+ *\/\n+\n+import jdk.test.lib.cds.CDSOptions;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class LambdaWithJavaAgent {\n+\n+    public static String agentClasses[] = {\n+        ClassFileVersionTransformer.class.getName(),\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        String mainClass = \"LambdaContainsOldInfApp\";\n+        String namePrefix = \"lambdacontainsoldinf\";\n+        JarBuilder.build(namePrefix, mainClass, \"OldProvider\");\n+\n+        String appJar = TestCommon.getTestJar(namePrefix + \".jar\");\n+        String classList = namePrefix + \".list\";\n+        String archiveName = namePrefix + \".jsa\";\n+\n+        String agentJar =\n+            ClassFileInstaller.writeJar(\"ClassFileVersionTransformer.jar\",\n+                                        ClassFileInstaller.Manifest.fromSourceFile(\"test-classes\/ClassFileVersionTransformer.mf\"),\n+                                        agentClasses);\n+        String useJavaAgent = \"-javaagent:\" + agentJar + \"=OldProvider\";\n+\n+        \/\/ dump class list\n+        CDSTestUtils.dumpClassList(classList, \"-cp\", appJar, mainClass);\n+\n+        \/\/ create archive with the class list\n+        CDSOptions opts = (new CDSOptions())\n+            .addPrefix(\"-XX:ExtraSharedClassListFile=\" + classList,\n+                       \"-cp\", appJar,\n+                       \"-XX:+AllowArchivingWithJavaAgent\",\n+                       useJavaAgent,\n+                       \"-Xlog:class+load,cds\")\n+            .setArchiveName(archiveName);\n+        OutputAnalyzer output = CDSTestUtils.createArchiveAndCheck(opts);\n+        \/\/ Since the java agent has updated the version of the OldProvider class\n+        \/\/ to 50, the OldProvider and the lambda proxy class will not be\n+        \/\/ excluded from the archive.\n+        TestCommon.checkExecReturn(output, 0, false,\n+                                   \"Skipping OldProvider: Old class has been linked\");\n+        output.shouldNotMatch(\"Skipping.LambdaContainsOldInfApp[$][$]Lambda[$].*0x.*:.*Old.class.has.been.linked\");\n+\n+        \/\/ run with archive\n+        CDSOptions runOpts = (new CDSOptions())\n+            .addPrefix(\"-cp\", appJar, \"-Xlog:class+load,cds=debug\",\n+                       \"-XX:+AllowArchivingWithJavaAgent\",\n+                       useJavaAgent)\n+            .setArchiveName(archiveName)\n+            .setUseVersion(false)\n+            .addSuffix(mainClass);\n+        output = CDSTestUtils.runWithArchive(runOpts);\n+        TestCommon.checkExecReturn(output, 0, true,\n+            \"[class,load] LambdaContainsOldInfApp source: shared objects file\");\n+        \/\/ Transformed classes during runtime won't be loaded from the archive.\n+        output.shouldMatch(\".class.load. OldProvider.source:.*lambdacontainsoldinf.jar\")\n+              .shouldMatch(\".class.load. LambdaContainsOldInfApp[$][$]Lambda[$].*\/0x.*source:.*LambdaContainsOldInf\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/LambdaWithJavaAgent.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test dumping lambda proxy class with java agent transforming\n+ *          its interface.\n+ * @requires vm.cds\n+ * @requires vm.jvmti\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n+ * @build LambdaContainsOldInfApp sun.hotspot.WhiteBox OldProvider LambdaVerification ClassFileVersionTransformer\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar lambda_contains_old_inf.jar LambdaVerification\n+ *             LambdaContainsOldInfApp OldProvider\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar WhiteBox.jar sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. LambdaWithJavaAgent\n+ *\/\n+\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class LambdaWithJavaAgent extends DynamicArchiveTestBase {\n+    public static String agentClasses[] = {\n+        ClassFileVersionTransformer.class.getName(),\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest(LambdaWithJavaAgent::test);\n+    }\n+\n+    static void test() throws Exception {\n+        String topArchiveName = getNewArchiveName();\n+        String appJar = ClassFileInstaller.getJarPath(\"lambda_contains_old_inf.jar\");\n+        String mainClass = \"LambdaContainsOldInfApp\";\n+        String wbJar = ClassFileInstaller.getJarPath(\"WhiteBox.jar\");\n+        String use_whitebox_jar = \"-Xbootclasspath\/a:\" + wbJar;\n+\n+        String agentJar =\n+            ClassFileInstaller.writeJar(\"ClassFileVersionTransformer.jar\",\n+                                        ClassFileInstaller.Manifest.fromSourceFile(\"..\/test-classes\/ClassFileVersionTransformer.mf\"),\n+                                        agentClasses);\n+        String useJavaAgent = \"-javaagent:\" + agentJar + \"=OldProvider\";\n+\n+        dump(topArchiveName,\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-XX:+WhiteBoxAPI\",\n+            \"-Xlog:class+load=debug,cds=debug,cds+dynamic=info\",\n+            use_whitebox_jar,\n+            \"-XX:+AllowArchivingWithJavaAgent\",\n+            useJavaAgent,\n+            \"-cp\", appJar, mainClass)\n+            .assertNormalExit(output -> {\n+                \/\/ Since the java agent has updated the version of the OldProvider class\n+                \/\/ to 50, the OldProvider and the lambda proxy class will not be\n+                \/\/ excluded from the archive.\n+                output.shouldNotContain(\"Skipping OldProvider: Old class has been linked\")\n+                      .shouldNotMatch(\"Skipping.LambdaContainsOldInfApp[$][$]Lambda[$].*0x.*:.*Old.class.has.been.linked\")\n+                      .shouldHaveExitValue(0);\n+            });\n+\n+        run(topArchiveName,\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-XX:+WhiteBoxAPI\",\n+            use_whitebox_jar,\n+            \"-Xlog:class+load=debug\",\n+            \"-XX:+AllowArchivingWithJavaAgent\",\n+            useJavaAgent,\n+            \"-cp\", appJar, mainClass)\n+            .assertNormalExit(output -> {\n+                output.shouldContain(\"[class,load] LambdaContainsOldInfApp source: shared objects file\")\n+                      \/\/ Transformed classes during runtime won't be loaded from the archive.\n+                      .shouldMatch(\".class.load. OldProvider.source:.*lambda_contains_old_inf.jar\")\n+                      .shouldMatch(\".class.load. LambdaContainsOldInfApp[$][$]Lambda[$].*\/0x.*source:.*LambdaContainsOldInf\")\n+                      .shouldHaveExitValue(0);\n+            });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaWithJavaAgent.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import java.lang.instrument.ClassFileTransformer;\n+import java.lang.instrument.Instrumentation;\n+import java.lang.instrument.IllegalClassFormatException;\n+import java.security.ProtectionDomain;\n+\n+public class ClassFileVersionTransformer implements ClassFileTransformer {\n+\n+    static String targetClass = null;\n+\n+    public byte[] transform(ClassLoader loader, String name, Class<?> classBeingRedefined,\n+                            ProtectionDomain pd, byte[] buffer) throws IllegalClassFormatException {\n+\n+        if (name.equals(targetClass)) {\n+            System.out.println(\"Transforming class OldProvider\");\n+            buffer[7] = 50; \/\/ set class file major version to 50\n+            return buffer;\n+        }\n+        return null;\n+    }\n+\n+    private static Instrumentation savedInstrumentation;\n+\n+    public static void premain(String agentArguments, Instrumentation instrumentation) {\n+        System.out.println(\"ClassFileVersionTransformer.premain() is called\");\n+        instrumentation.addTransformer(new ClassFileVersionTransformer(), \/*canRetransform=*\/true);\n+        savedInstrumentation = instrumentation;\n+        if (agentArguments != null) {\n+            targetClass = agentArguments;\n+        }\n+    }\n+\n+    public static Instrumentation getInstrumentation() {\n+        return savedInstrumentation;\n+    }\n+\n+    public static void agentmain(String args, Instrumentation inst) throws Exception {\n+        premain(args, inst);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/ClassFileVersionTransformer.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -0,0 +1,5 @@\n+Manifest-Version: 1.0\n+Premain-Class: ClassFileVersionTransformer\n+Agent-Class: ClassFileVersionTransformer\n+Can-Retransform-Classes: true\n+Can-Redefine-Classes: true\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/ClassFileVersionTransformer.mf","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"}]}