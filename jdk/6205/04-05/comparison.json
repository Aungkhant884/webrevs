{"files":[{"patch":"@@ -217,1 +217,1 @@\n-    if (check_for_exclusion_impl(k, false)) {\n+    if (check_for_exclusion_impl(k)) {\n@@ -227,5 +227,3 @@\n-bool SystemDictionaryShared::warn_excluded(InstanceKlass* k, const char* reason, bool silent) {\n-  if (!silent) {\n-    ResourceMark rm;\n-    log_warning(cds)(\"Skipping %s: %s\", k->name()->as_C_string(), reason);\n-  }\n+bool SystemDictionaryShared::warn_excluded(InstanceKlass* k, const char* reason) {\n+  ResourceMark rm;\n+  log_warning(cds)(\"Skipping %s: %s\", k->name()->as_C_string(), reason);\n@@ -272,1 +270,1 @@\n-bool SystemDictionaryShared::check_for_exclusion_impl(InstanceKlass* k, bool silent) {\n+bool SystemDictionaryShared::check_for_exclusion_impl(InstanceKlass* k) {\n@@ -274,1 +272,1 @@\n-    return warn_excluded(k, \"In error state\", silent);\n+    return warn_excluded(k, \"In error state\");\n@@ -277,1 +275,1 @@\n-    return warn_excluded(k, \"A scratch class\", silent);\n+    return warn_excluded(k, \"A scratch class\");\n@@ -280,1 +278,1 @@\n-    return warn_excluded(k, \"Not in loaded state\", silent);\n+    return warn_excluded(k, \"Not in loaded state\");\n@@ -283,1 +281,1 @@\n-    return warn_excluded(k, \"Has been redefined\", silent);\n+    return warn_excluded(k, \"Has been redefined\");\n@@ -288,1 +286,1 @@\n-    return warn_excluded(k, \"Unsupported location\", silent);\n+    return warn_excluded(k, \"Unsupported location\");\n@@ -294,1 +292,1 @@\n-    return warn_excluded(k, \"Signed JAR\", silent);\n+    return warn_excluded(k, \"Signed JAR\");\n@@ -301,1 +299,1 @@\n-    return warn_excluded(k, \"JFR event class\", silent);\n+    return warn_excluded(k, \"JFR event class\");\n@@ -306,1 +304,1 @@\n-      return warn_excluded(k, \"Failed verification\", silent);\n+      return warn_excluded(k, \"Failed verification\");\n@@ -316,1 +314,1 @@\n-      return warn_excluded(k, \"Old class has been linked\", silent);\n+      return warn_excluded(k, \"Old class has been linked\");\n@@ -338,0 +336,1 @@\n+      ResourceMark rm;\n@@ -645,1 +644,1 @@\n-        SystemDictionaryShared::warn_excluded(k, \"Duplicated unregistered class\", false);\n+        SystemDictionaryShared::warn_excluded(k, \"Duplicated unregistered class\");\n@@ -1618,4 +1617,1 @@\n-    if (SystemDictionaryShared::check_for_exclusion_impl(caller_ik, true)) {\n-      \/\/ Note that SystemDictionaryShared::is_excluded_class() cannot be used because during\n-      \/\/ dynamic dump, the caller_ik could be in the base archive and the function\n-      \/\/ will not return the correct result.\n+    if (SystemDictionaryShared::check_for_exclusion(caller_ik, NULL)) {\n@@ -1631,1 +1627,1 @@\n-      if (SystemDictionaryShared::check_for_exclusion_impl(ik, true)) {\n+      if (SystemDictionaryShared::check_for_exclusion(ik, NULL)) {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":18,"deletions":22,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-  static bool check_for_exclusion_impl(InstanceKlass* k, bool silent);\n+  static bool check_for_exclusion_impl(InstanceKlass* k);\n@@ -289,1 +289,1 @@\n-  static bool warn_excluded(InstanceKlass* k, const char* reason, bool silent);\n+  static bool warn_excluded(InstanceKlass* k, const char* reason);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2602,0 +2602,5 @@\n+  if (MetaspaceShared::is_in_shared_metaspace(this)) {\n+    \/\/ This is a class that was dumped into the base archive, so we know\n+    \/\/ it was verified at dump time.\n+    return true;\n+  }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8276184\n+ * @summary Archive an old interface in the base archive and an app class which\n+ *          uses the old interface via a lambda expression in the dynamic archive.\n+ *          The lambda proxy class of the app class should be in the dynamic archive.\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build LambdaContainsOldInfApp sun.hotspot.WhiteBox OldProvider\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar old-inf-base-archive.jar LambdaContainsOldInfApp OldProvider\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. LambdaForOldInfInBaseArchive\n+ *\/\n+\n+import java.io.File;\n+import jdk.test.lib.cds.CDSOptions;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class LambdaForOldInfInBaseArchive extends DynamicArchiveTestBase {\n+    static final String classList = CDSTestUtils.getOutputFileName(\"classlist\");\n+    static final String appClass = \"LambdaContainsOldInfApp\";\n+    static final String baseArchiveClass = \"OldProvider\";\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest(LambdaForOldInfInBaseArchive::testCustomBase);\n+    }\n+\n+    static void testCustomBase() throws Exception {\n+        String topArchiveName = getNewArchiveName(\"top\");\n+        doTestCustomBase(topArchiveName);\n+    }\n+\n+    private static void doTestCustomBase(String topArchiveName) throws Exception {\n+        String appJar = ClassFileInstaller.getJarPath(\"old-inf-base-archive.jar\");\n+\n+        \/\/ create a custom base archive containing and old interface\n+        OutputAnalyzer output = TestCommon.dump(appJar,\n+            TestCommon.list(\"OldProvider\"), \"-Xlog:class+load,cds+class=debug\");\n+        TestCommon.checkDump(output);\n+        \/\/ Check that the OldProvider is being dumped into the base archive.\n+        output.shouldMatch(\".cds,class.*klass.*0x.*app.*OldProvider.*unlinked\");\n+\n+        String baseArchiveName = TestCommon.getCurrentArchiveName();\n+\n+        \/\/ create a dynamic archive with the custom base archive.\n+        \/\/ The old interface is in the base archive and will be\n+        \/\/ accessed using a lambda expression of LambdaContainsOldInfApp.\n+        \/\/ The lambda proxy class and the app class will be archived in the dynamic archive.\n+        dump2(baseArchiveName, topArchiveName,\n+              \"-Xlog:cds,cds+dynamic,class+load,cds+class=debug\",\n+              \"-cp\", appJar,\n+              appClass)\n+            .assertNormalExit(out -> {\n+                    out.shouldContain(\"OldProvider source: shared objects file\")\n+                       .shouldMatch(\"Archiving hidden LambdaContainsOldInfApp[$][$]Lambda[$][\\\\d+]*\");\n+                });\n+\n+        \/\/ Run with both base and dynamic archives. The OldProvider class\n+        \/\/ should be loaded from the base archive. The LambdaContainsOldInfApp\n+        \/\/ and its lambda proxy class should be loaded from the dynamic archive.\n+        run2(baseArchiveName, topArchiveName,\n+              \"-Xlog:cds,cds+dynamic,class+load\",\n+              \"-cp\", appJar,\n+              appClass)\n+            .assertNormalExit(out -> {\n+                    out.shouldContain(\"OldProvider source: shared objects file\")\n+                       .shouldContain(\"LambdaContainsOldInfApp source: shared objects file (top)\")\n+                       .shouldMatch(\".class.load. LambdaContainsOldInfApp[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file.*(top)\");\n+                });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaForOldInfInBaseArchive.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8276184\n+ * @summary Archive an old class in the base archive and an app class which\n+ *          uses the old class in the dynamic archive.\n+ *          The old class should be loaded from the base archive. The app class\n+ *          should be loaded from the dynamic archive.\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build OldSuperApp sun.hotspot.WhiteBox OldSuper ChildOldSuper GChild\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar old-class-base-archive.jar OldSuperApp OldSuper ChildOldSuper GChild\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. OldClassInBaseArchive\n+ *\/\n+\n+import java.io.File;\n+import jdk.test.lib.cds.CDSOptions;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class OldClassInBaseArchive extends DynamicArchiveTestBase {\n+    static final String classList = CDSTestUtils.getOutputFileName(\"classlist\");\n+    static final String appClass = \"OldSuperApp\";\n+    static final String baseArchiveClass = \"OldSuper\";\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest(OldClassInBaseArchive::testCustomBase);\n+    }\n+\n+    static void testCustomBase() throws Exception {\n+        String topArchiveName = getNewArchiveName(\"top\");\n+        doTestCustomBase(topArchiveName);\n+    }\n+\n+    private static void doTestCustomBase(String topArchiveName) throws Exception {\n+        String appJar = ClassFileInstaller.getJarPath(\"old-class-base-archive.jar\");\n+\n+        \/\/ create a custom base archive containing and old class\n+        OutputAnalyzer output = TestCommon.dump(appJar,\n+            TestCommon.list(\"OldSuper\"), \"-Xlog:class+load,cds+class=debug\");\n+        TestCommon.checkDump(output);\n+        \/\/ Check the OldSuper is being dumped into the base archive.\n+        output.shouldMatch(\".cds.class.*klass.*0x.*app.*OldSuper.*unlinked\");\n+\n+        String baseArchiveName = TestCommon.getCurrentArchiveName();\n+\n+        \/\/ create a dynamic archive with the custom base archive.\n+        \/\/ The old class is in the base archive and will be\n+        \/\/ accessed from OldSuperApp.\n+        \/\/ The OldSuperApp, ChildOldSuper, and GChild classes will be archived\n+        \/\/ in the dynamic archive.\n+        dump2(baseArchiveName, topArchiveName,\n+              \"-Xlog:cds,cds+dynamic,class+load,cds+class=debug\",\n+              \"-cp\", appJar,\n+              appClass)\n+            .assertNormalExit(out -> {\n+                    out.shouldContain(\"OldSuper source: shared objects file\")\n+                       \/\/ Check the following classes are being dumped into the dynamic archive.\n+                       .shouldMatch(\".cds,class.*klass.*0x.*app.*OldSuperApp\")\n+                       .shouldMatch(\".cds,class.*klass.*0x.*app.*ChildOldSuper\")\n+                       .shouldMatch(\".cds,class.*klass.*0x.*app.*GChild\");\n+                });\n+\n+        \/\/ Run with both base and dynamic archives. The OldSuper class\n+        \/\/ should be loaded from the base archive. The OldSuperApp\n+        \/\/ and related classes should be loaded from the dynamic archive.\n+        run2(baseArchiveName, topArchiveName,\n+              \"-Xlog:cds,cds+dynamic,class+load\",\n+              \"-cp\", appJar,\n+              appClass)\n+            .assertNormalExit(out -> {\n+                    out.shouldContain(\"OldSuper source: shared objects file\")\n+                       .shouldContain(\"OldSuperApp source: shared objects file (top)\")\n+                       .shouldContain(\"ChildOldSuper source: shared objects file (top)\")\n+                       .shouldContain(\"GChild source: shared objects file (top)\");\n+                });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/OldClassInBaseArchive.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"}]}