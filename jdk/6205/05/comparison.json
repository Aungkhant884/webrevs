{"files":[{"patch":"@@ -115,1 +115,0 @@\n-    SystemDictionaryShared::cleanup_lambda_proxy_class_dictionary();\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -524,1 +524,0 @@\n-  SystemDictionaryShared::cleanup_lambda_proxy_class_dictionary();\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -248,0 +248,8 @@\n+void SystemDictionaryShared::reset_registered_lambda_proxy_class(InstanceKlass* ik) {\n+  DumpTimeClassInfo* info = _dumptime_table->get(ik);\n+  if (info != NULL) {\n+    info->_is_archived_lambda_proxy = false;\n+    info->set_excluded();\n+  }\n+}\n+\n@@ -328,0 +336,1 @@\n+      ResourceMark rm;\n@@ -666,0 +675,2 @@\n+\n+  cleanup_lambda_proxy_class_dictionary();\n@@ -1605,1 +1616,10 @@\n-    for (int i = 0; i < info._proxy_klasses->length(); i++) {\n+    InstanceKlass* caller_ik = key.caller_ik();\n+    if (SystemDictionaryShared::check_for_exclusion(caller_ik, NULL)) {\n+      \/\/ If the caller class is excluded, unregister all the associated lambda proxy classes\n+      \/\/ so that they will not be included in the CDS archive.\n+      for (int i = info._proxy_klasses->length() - 1; i >= 0; i--) {\n+        SystemDictionaryShared::reset_registered_lambda_proxy_class(info._proxy_klasses->at(i));\n+        info._proxy_klasses->remove_at(i);\n+      }\n+    }\n+    for (int i = info._proxy_klasses->length() - 1; i >= 0; i--) {\n@@ -1607,1 +1627,2 @@\n-      if (!ik->can_be_verified_at_dumptime()) {\n+      if (SystemDictionaryShared::check_for_exclusion(ik, NULL)) {\n+        SystemDictionaryShared::reset_registered_lambda_proxy_class(ik);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -139,0 +139,1 @@\n+  friend class CleanupDumpTimeLambdaProxyClassTable;\n@@ -176,0 +177,2 @@\n+  static void cleanup_lambda_proxy_class_dictionary();\n+  static void reset_registered_lambda_proxy_class(InstanceKlass* ik);\n@@ -291,1 +294,0 @@\n-  static void cleanup_lambda_proxy_class_dictionary();\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2602,0 +2602,5 @@\n+  if (MetaspaceShared::is_in_shared_metaspace(this)) {\n+    \/\/ This is a class that was dumped into the base archive, so we know\n+    \/\/ it was verified at dump time.\n+    return true;\n+  }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @bug 8274944\n+ * @bug 8274944 8276184\n@@ -52,2 +52,1 @@\n-        \/\/ dump class list\n-        CDSTestUtils.dumpClassList(classList, \"-cp\", appJar, mainClass);\n+        String[] mainArgs = { \"dummy\", \"addLambda\" };\n@@ -55,10 +54,3 @@\n-        \/\/ create archive with the class list\n-        CDSOptions opts = (new CDSOptions())\n-            .addPrefix(\"-XX:ExtraSharedClassListFile=\" + classList,\n-                       \"-cp\", appJar,\n-                       \"-Xlog:class+load,cds\")\n-            .setArchiveName(archiveName);\n-        OutputAnalyzer output = CDSTestUtils.createArchiveAndCheck(opts);\n-        TestCommon.checkExecReturn(output, 0, true,\n-                                   \"Skipping OldProvider: Old class has been linked\");\n-        output.shouldMatch(\"Skipping.LambdaContainsOldInfApp[$][$]Lambda[$].*0x.*:.*Old.class.has.been.linked\");\n+        for (String mainArg : mainArgs) {\n+            \/\/ dump class list\n+            CDSTestUtils.dumpClassList(classList, \"-cp\", appJar, mainClass, mainArg);\n@@ -66,11 +58,24 @@\n-        \/\/ run with archive\n-        CDSOptions runOpts = (new CDSOptions())\n-            .addPrefix(\"-cp\", appJar, \"-Xlog:class+load,cds=debug\")\n-            .setArchiveName(archiveName)\n-            .setUseVersion(false)\n-            .addSuffix(mainClass);\n-        output = CDSTestUtils.runWithArchive(runOpts);\n-        TestCommon.checkExecReturn(output, 0, true,\n-            \"[class,load] LambdaContainsOldInfApp source: shared objects file\");\n-        output.shouldMatch(\".class.load. OldProvider.source:.*lambdacontainsoldinf.jar\")\n-              .shouldMatch(\".class.load. LambdaContainsOldInfApp[$][$]Lambda[$].*\/0x.*source:.*LambdaContainsOldInf\");\n+            \/\/ create archive with the class list\n+            CDSOptions opts = (new CDSOptions())\n+                .addPrefix(\"-XX:ExtraSharedClassListFile=\" + classList,\n+                           \"-cp\", appJar,\n+                           \"-Xlog:class+load,cds\")\n+                .setArchiveName(archiveName);\n+            OutputAnalyzer output = CDSTestUtils.createArchiveAndCheck(opts);\n+            TestCommon.checkExecReturn(output, 0, true,\n+                                       \"Skipping OldProvider: Old class has been linked\");\n+            output.shouldMatch(\"Skipping.LambdaContainsOldInfApp[$][$]Lambda[$].*0x.*:.*Old.class.has.been.linked\");\n+\n+            \/\/ run with archive\n+            CDSOptions runOpts = (new CDSOptions())\n+                .addPrefix(\"-cp\", appJar, \"-Xlog:class+load,cds=debug\")\n+                .setArchiveName(archiveName)\n+                .setUseVersion(false)\n+                .addSuffix(mainClass)\n+                .addSuffix(mainArg);\n+            output = CDSTestUtils.runWithArchive(runOpts);\n+            TestCommon.checkExecReturn(output, 0, true,\n+                \"[class,load] LambdaContainsOldInfApp source: shared objects file\");\n+            output.shouldMatch(\".class.load. OldProvider.source:.*lambdacontainsoldinf.jar\")\n+                  .shouldMatch(\".class.load. LambdaContainsOldInfApp[$][$]Lambda[$].*\/0x.*source:.*LambdaContainsOldInf\");\n+       }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/LambdaContainsOldInf.java","additions":29,"deletions":24,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @bug 8276184\n@@ -45,2 +46,0 @@\n-        output = TestCommon.dump(signedJar, TestCommon.list(\"Hello\"));\n-        TestCommon.checkDump(output, \"Skipping Hello: Signed JAR\");\n@@ -48,5 +47,3 @@\n-        \/\/ At runtime, the Hello class should be loaded from the jar file\n-        \/\/ instead of from the shared archive since a class from a signed\n-        \/\/ jar shouldn't be dumped into the archive.\n-        output = TestCommon.exec(signedJar, \"-verbose:class\", \"Hello\");\n-        String expectedOutput = \".class,load. Hello source: file:.*signed_hello.jar\";\n+        \/\/ \"testlambda\" is for testing JDK-8276184\n+        String[] mainArgs = { \"dummy\", \"testlambda\" };\n+        String mainClass = \"Hello\";\n@@ -54,5 +51,15 @@\n-        try {\n-            output.shouldMatch(expectedOutput);\n-        } catch (Exception e) {\n-            TestCommon.checkCommonExecExceptions(output, e);\n-        }\n+        String skipMsg = \"Skipping Hello: Signed JAR\";\n+        String lambdaInArchive = \"klasses.*=.*app.*Hello[$][$]Lambda[$].*hidden\";\n+        String loadFromJar = \".class,load. Hello source: file:.*signed_hello.jar\";\n+        String lambdaLoadFromHello = \".class.load. Hello[$][$]Lambda[$].*\/0x.*source.*Hello\";\n+\n+        for (String mainArg : mainArgs) {\n+            output = TestCommon.dump(signedJar, TestCommon.list(mainClass),\n+                                     \"-Xlog:cds+class=debug\", mainClass, mainArg);\n+            TestCommon.checkDump(output, skipMsg);\n+            output.shouldNotContain(lambdaInArchive);\n+\n+            \/\/ At runtime, the Hello class should be loaded from the jar file\n+            \/\/ instead of from the shared archive since a class from a signed\n+            \/\/ jar shouldn't be dumped into the archive.\n+            output = TestCommon.exec(signedJar, \"-verbose:class\", mainClass, mainArg);\n@@ -60,4 +67,16 @@\n-        \/\/ Test class exists in both signed JAR and unsigned JAR\n-        String jars = signedJar + System.getProperty(\"path.separator\") + unsignedJar;\n-        output = TestCommon.dump(jars, TestCommon.list(\"Hello\"));\n-        TestCommon.checkDump(output, \"Skipping Hello: Signed JAR\");\n+            try {\n+                output.shouldMatch(loadFromJar);\n+                if (mainArg.equals(\"testlambda\")) {\n+                    output.shouldMatch(lambdaLoadFromHello);\n+                }\n+            } catch (Exception e) {\n+                TestCommon.checkCommonExecExceptions(output, e);\n+            }\n+\n+            \/\/ Test class exists in both signed JAR and unsigned JAR\n+            String jars = signedJar + System.getProperty(\"path.separator\") + unsignedJar;\n+            output = TestCommon.dump(jars, TestCommon.list(mainClass),\n+                                     \"-Xlog:cds+class=debug\", mainClass, mainArg);\n+            TestCommon.checkDump(output, skipMsg);\n+            output.shouldNotContain(lambdaInArchive);\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SignedJar.java","additions":35,"deletions":16,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @bug 8274944\n+ * @bug 8274944 8276184\n@@ -56,10 +56,14 @@\n-        dump(topArchiveName,\n-            \"-XX:+UnlockDiagnosticVMOptions\",\n-            \"-XX:+WhiteBoxAPI\",\n-            \"-Xlog:class+load=debug,cds=debug,cds+dynamic=info\",\n-            use_whitebox_jar,\n-            \"-cp\", appJar, mainClass)\n-            .assertNormalExit(output -> {\n-                output.shouldContain(\"Skipping OldProvider: Old class has been linked\")\n-                      .shouldMatch(\"Skipping.LambdaContainsOldInfApp[$][$]Lambda[$].*0x.*:.*Old.class.has.been.linked\")\n-                      .shouldHaveExitValue(0);\n+        String[] mainArgs = { \"dummy\", \"addLambda\" };\n+\n+        for (String mainArg : mainArgs) {\n+\n+            dump(topArchiveName,\n+                \"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-XX:+WhiteBoxAPI\",\n+                \"-Xlog:class+load=debug,cds=debug,cds+dynamic=info\",\n+                use_whitebox_jar,\n+                \"-cp\", appJar, mainClass, mainArg)\n+                .assertNormalExit(output -> {\n+                    output.shouldContain(\"Skipping OldProvider: Old class has been linked\")\n+                          .shouldMatch(\"Skipping.LambdaContainsOldInfApp[$][$]Lambda[$].*0x.*:.*Old.class.has.been.linked\")\n+                          .shouldHaveExitValue(0);\n@@ -68,11 +72,11 @@\n-        run(topArchiveName,\n-            \"-XX:+UnlockDiagnosticVMOptions\",\n-            \"-XX:+WhiteBoxAPI\",\n-            use_whitebox_jar,\n-            \"-Xlog:class+load=debug\",\n-            \"-cp\", appJar, mainClass)\n-            .assertNormalExit(output -> {\n-                output.shouldContain(\"[class,load] LambdaContainsOldInfApp source: shared objects file (top)\")\n-                      .shouldMatch(\".class.load. OldProvider.source:.*lambda_contains_old_inf.jar\")\n-                      .shouldMatch(\".class.load. LambdaContainsOldInfApp[$][$]Lambda[$].*\/0x.*source:.*LambdaContainsOldInf\")\n-                      .shouldHaveExitValue(0);\n+            run(topArchiveName,\n+                \"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-XX:+WhiteBoxAPI\",\n+                use_whitebox_jar,\n+                \"-Xlog:class+load=debug\",\n+                \"-cp\", appJar, mainClass, mainArg)\n+                .assertNormalExit(output -> {\n+                    output.shouldContain(\"[class,load] LambdaContainsOldInfApp source: shared objects file (top)\")\n+                          .shouldMatch(\".class.load. OldProvider.source:.*lambda_contains_old_inf.jar\")\n+                          .shouldMatch(\".class.load. LambdaContainsOldInfApp[$][$]Lambda[$].*\/0x.*source:.*LambdaContainsOldInf\")\n+                          .shouldHaveExitValue(0);\n@@ -80,0 +84,1 @@\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaContainsOldInf.java","additions":27,"deletions":22,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8276184\n+ * @summary Archive an old interface in the base archive and an app class which\n+ *          uses the old interface via a lambda expression in the dynamic archive.\n+ *          The lambda proxy class of the app class should be in the dynamic archive.\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build LambdaContainsOldInfApp sun.hotspot.WhiteBox OldProvider\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar old-inf-base-archive.jar LambdaContainsOldInfApp OldProvider\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. LambdaForOldInfInBaseArchive\n+ *\/\n+\n+import java.io.File;\n+import jdk.test.lib.cds.CDSOptions;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class LambdaForOldInfInBaseArchive extends DynamicArchiveTestBase {\n+    static final String classList = CDSTestUtils.getOutputFileName(\"classlist\");\n+    static final String appClass = \"LambdaContainsOldInfApp\";\n+    static final String baseArchiveClass = \"OldProvider\";\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest(LambdaForOldInfInBaseArchive::testCustomBase);\n+    }\n+\n+    static void testCustomBase() throws Exception {\n+        String topArchiveName = getNewArchiveName(\"top\");\n+        doTestCustomBase(topArchiveName);\n+    }\n+\n+    private static void doTestCustomBase(String topArchiveName) throws Exception {\n+        String appJar = ClassFileInstaller.getJarPath(\"old-inf-base-archive.jar\");\n+\n+        \/\/ create a custom base archive containing and old interface\n+        OutputAnalyzer output = TestCommon.dump(appJar,\n+            TestCommon.list(\"OldProvider\"), \"-Xlog:class+load,cds+class=debug\");\n+        TestCommon.checkDump(output);\n+        \/\/ Check that the OldProvider is being dumped into the base archive.\n+        output.shouldMatch(\".cds,class.*klass.*0x.*app.*OldProvider.*unlinked\");\n+\n+        String baseArchiveName = TestCommon.getCurrentArchiveName();\n+\n+        \/\/ create a dynamic archive with the custom base archive.\n+        \/\/ The old interface is in the base archive and will be\n+        \/\/ accessed using a lambda expression of LambdaContainsOldInfApp.\n+        \/\/ The lambda proxy class and the app class will be archived in the dynamic archive.\n+        dump2(baseArchiveName, topArchiveName,\n+              \"-Xlog:cds,cds+dynamic,class+load,cds+class=debug\",\n+              \"-cp\", appJar,\n+              appClass)\n+            .assertNormalExit(out -> {\n+                    out.shouldContain(\"OldProvider source: shared objects file\")\n+                       .shouldMatch(\"Archiving hidden LambdaContainsOldInfApp[$][$]Lambda[$][\\\\d+]*\");\n+                });\n+\n+        \/\/ Run with both base and dynamic archives. The OldProvider class\n+        \/\/ should be loaded from the base archive. The LambdaContainsOldInfApp\n+        \/\/ and its lambda proxy class should be loaded from the dynamic archive.\n+        run2(baseArchiveName, topArchiveName,\n+              \"-Xlog:cds,cds+dynamic,class+load\",\n+              \"-cp\", appJar,\n+              appClass)\n+            .assertNormalExit(out -> {\n+                    out.shouldContain(\"OldProvider source: shared objects file\")\n+                       .shouldContain(\"LambdaContainsOldInfApp source: shared objects file (top)\")\n+                       .shouldMatch(\".class.load. LambdaContainsOldInfApp[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file.*(top)\");\n+                });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaForOldInfInBaseArchive.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8276184\n+ * @summary Archive an old class in the base archive and an app class which\n+ *          uses the old class in the dynamic archive.\n+ *          The old class should be loaded from the base archive. The app class\n+ *          should be loaded from the dynamic archive.\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build OldSuperApp sun.hotspot.WhiteBox OldSuper ChildOldSuper GChild\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar old-class-base-archive.jar OldSuperApp OldSuper ChildOldSuper GChild\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. OldClassInBaseArchive\n+ *\/\n+\n+import java.io.File;\n+import jdk.test.lib.cds.CDSOptions;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class OldClassInBaseArchive extends DynamicArchiveTestBase {\n+    static final String classList = CDSTestUtils.getOutputFileName(\"classlist\");\n+    static final String appClass = \"OldSuperApp\";\n+    static final String baseArchiveClass = \"OldSuper\";\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest(OldClassInBaseArchive::testCustomBase);\n+    }\n+\n+    static void testCustomBase() throws Exception {\n+        String topArchiveName = getNewArchiveName(\"top\");\n+        doTestCustomBase(topArchiveName);\n+    }\n+\n+    private static void doTestCustomBase(String topArchiveName) throws Exception {\n+        String appJar = ClassFileInstaller.getJarPath(\"old-class-base-archive.jar\");\n+\n+        \/\/ create a custom base archive containing and old class\n+        OutputAnalyzer output = TestCommon.dump(appJar,\n+            TestCommon.list(\"OldSuper\"), \"-Xlog:class+load,cds+class=debug\");\n+        TestCommon.checkDump(output);\n+        \/\/ Check the OldSuper is being dumped into the base archive.\n+        output.shouldMatch(\".cds.class.*klass.*0x.*app.*OldSuper.*unlinked\");\n+\n+        String baseArchiveName = TestCommon.getCurrentArchiveName();\n+\n+        \/\/ create a dynamic archive with the custom base archive.\n+        \/\/ The old class is in the base archive and will be\n+        \/\/ accessed from OldSuperApp.\n+        \/\/ The OldSuperApp, ChildOldSuper, and GChild classes will be archived\n+        \/\/ in the dynamic archive.\n+        dump2(baseArchiveName, topArchiveName,\n+              \"-Xlog:cds,cds+dynamic,class+load,cds+class=debug\",\n+              \"-cp\", appJar,\n+              appClass)\n+            .assertNormalExit(out -> {\n+                    out.shouldContain(\"OldSuper source: shared objects file\")\n+                       \/\/ Check the following classes are being dumped into the dynamic archive.\n+                       .shouldMatch(\".cds,class.*klass.*0x.*app.*OldSuperApp\")\n+                       .shouldMatch(\".cds,class.*klass.*0x.*app.*ChildOldSuper\")\n+                       .shouldMatch(\".cds,class.*klass.*0x.*app.*GChild\");\n+                });\n+\n+        \/\/ Run with both base and dynamic archives. The OldSuper class\n+        \/\/ should be loaded from the base archive. The OldSuperApp\n+        \/\/ and related classes should be loaded from the dynamic archive.\n+        run2(baseArchiveName, topArchiveName,\n+              \"-Xlog:cds,cds+dynamic,class+load\",\n+              \"-cp\", appJar,\n+              appClass)\n+            .assertNormalExit(out -> {\n+                    out.shouldContain(\"OldSuper source: shared objects file\")\n+                       .shouldContain(\"OldSuperApp source: shared objects file (top)\")\n+                       .shouldContain(\"ChildOldSuper source: shared objects file (top)\")\n+                       .shouldContain(\"GChild source: shared objects file (top)\");\n+                });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/OldClassInBaseArchive.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8276184\n+ * @summary If the caller class is redefined during dump time, the caller class\n+ *          and its lambda proxy class should not be archived.\n+ * @requires vm.cds\n+ * @requires vm.jvmti\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n+ * @build sun.hotspot.WhiteBox OldProvider\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run driver RedefineClassHelper\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. RedefineCallerClassTest\n+ *\/\n+\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class RedefineCallerClassTest extends DynamicArchiveTestBase {\n+    static String mainClass = RedefineCallerClass.class.getName();\n+\n+    static String providerClass = OldProvider.class.getName();\n+\n+    static String sharedClasses[] = {\n+        mainClass,\n+        \"SimpleLambda\", \/\/ caller class will be redefined in RedefineCallerClass\n+        providerClass,  \/\/ inteface with class file major version < 50\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler\",\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$FileManagerWrapper\",\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$FileManagerWrapper$1\",\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$MemoryJavaFileObject\"\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest(RedefineCallerClassTest::test);\n+    }\n+\n+    static void test() throws Exception {\n+        String topArchiveName = getNewArchiveName();\n+        String appJar = ClassFileInstaller.writeJar(\"redefine_caller_class.jar\", sharedClasses);\n+\n+        String[] mainArgs = {\n+            \"redefineCaller\", \/\/ redefine caller class only\n+            \"useOldInf\",      \/\/ use old interface only\n+            \"both\"            \/\/ both of the above\n+        };\n+\n+        for (String mainArg : mainArgs) {\n+            String[] options = {\n+                \"-Xlog:class+load,cds\",\n+                \"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-XX:+AllowArchivingWithJavaAgent\",\n+                \"-javaagent:redefineagent.jar\",\n+                \"-cp\", appJar, mainClass, mainArg\n+            };\n+\n+            dump(topArchiveName, options)\n+                .assertNormalExit(output -> {\n+                    output.shouldHaveExitValue(0);\n+                    if (mainArg.equals(\"both\") || mainArg.equals(\"useOldInf\")) {\n+                        output.shouldContain(\"Skipping OldProvider: Old class has been linked\")\n+                              .shouldMatch(\"Skipping.SimpleLambda[$][$]Lambda[$].*0x.*:.*Old.class.has.been.linked\");\n+                    }\n+                    if (mainArg.equals(\"both\") || mainArg.equals(\"redefineCaller\")) {\n+                        output.shouldContain(\"Skipping SimpleLambda: Has been redefined\");\n+                    }\n+                });\n+\n+            run(topArchiveName, options)\n+                .assertNormalExit(output -> {\n+                    output.shouldHaveExitValue(0)\n+                          .shouldContain(\"RedefineCallerClass source: shared objects file (top)\")\n+                          .shouldMatch(\".class.load. SimpleLambda[$][$]Lambda[$].*\/0x.*source:.*SimpleLambda\");\n+                    if (mainArg.equals(\"both\") || mainArg.equals(\"useOldInf\")) {\n+                        output.shouldMatch(\".class.load. OldProvider.source:.*redefine_caller_class.jar\");\n+                    }\n+                    if (mainArg.equals(\"both\") || mainArg.equals(\"redefineCaller\")) {\n+                        output.shouldMatch(\".class.load. SimpleLambda.source:.*redefine_caller_class.jar\");\n+                    }\n+                });\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/RedefineCallerClassTest.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+class SimpleLambda {\n+    public Runnable getRunnable() {\n+        return () -> {};\n+    }\n+    public OldProvider getProvider() {\n+        return () -> {\n+            return null;\n+        };\n+    }\n+}\n+\n+public class RedefineCallerClass {\n+\n+    public static String newClass =\n+        \" class SimpleLambda { \" +\n+        \"     public Runnable getRunnable() { \" +\n+        \"         return () -> {}; \" +\n+        \"     } \" +\n+        \"     public OldProvider getProvider() { \" +\n+        \"         return () -> { \" +\n+        \"             return null; \" +\n+        \"         }; \" +\n+        \"     } \" +\n+        \" } \";\n+\n+    public static void main(String args[]) throws Exception {\n+      String mode = \"both\";\n+      if (args.length == 1) {\n+          mode = args[0];\n+      }\n+      SimpleLambda s = new SimpleLambda();\n+      if (mode.equals(\"both\") || mode.equals(\"useOldInf\")) {\n+          System.out.println(s.getProvider());\n+      } else {\n+          System.out.println(s.getRunnable());\n+      }\n+      if (mode.equals(\"both\") || mode.equals(\"redefineCaller\")) {\n+          RedefineClassHelper.redefineClass(s.getClass(), newClass);\n+      }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\/RedefineCallerClass.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,7 @@\n+    if (args.length > 0 && args[0].equals(\"testlambda\")) {\n+        System.out.println(getRunnable());\n+    }\n+  }\n+\n+  public static Runnable getRunnable() {\n+    return () -> {};\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/Hello.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+        if (args.length == 1 && args[0].equals(\"addLambda\")) {\n+            getProvider2();\n+        }\n@@ -34,0 +37,6 @@\n+\n+    public static OldProvider getProvider2() {\n+        return () -> {\n+            return null;\n+        };\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/LambdaContainsOldInfApp.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}