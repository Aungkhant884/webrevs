{"files":[{"patch":"@@ -217,1 +217,1 @@\n-    if (check_for_exclusion_impl(k)) {\n+    if (check_for_exclusion_impl(k, false)) {\n@@ -227,3 +227,5 @@\n-bool SystemDictionaryShared::warn_excluded(InstanceKlass* k, const char* reason) {\n-  ResourceMark rm;\n-  log_warning(cds)(\"Skipping %s: %s\", k->name()->as_C_string(), reason);\n+bool SystemDictionaryShared::warn_excluded(InstanceKlass* k, const char* reason, bool silent) {\n+  if (!silent) {\n+    ResourceMark rm;\n+    log_warning(cds)(\"Skipping %s: %s\", k->name()->as_C_string(), reason);\n+  }\n@@ -248,0 +250,8 @@\n+void SystemDictionaryShared::reset_registered_lambda_proxy_class(InstanceKlass* ik) {\n+  DumpTimeClassInfo* info = _dumptime_table->get(ik);\n+  if (info != NULL) {\n+    info->_is_archived_lambda_proxy = false;\n+    info->set_excluded();\n+  }\n+}\n+\n@@ -262,1 +272,1 @@\n-bool SystemDictionaryShared::check_for_exclusion_impl(InstanceKlass* k) {\n+bool SystemDictionaryShared::check_for_exclusion_impl(InstanceKlass* k, bool silent) {\n@@ -264,1 +274,1 @@\n-    return warn_excluded(k, \"In error state\");\n+    return warn_excluded(k, \"In error state\", silent);\n@@ -267,1 +277,1 @@\n-    return warn_excluded(k, \"A scratch class\");\n+    return warn_excluded(k, \"A scratch class\", silent);\n@@ -270,1 +280,1 @@\n-    return warn_excluded(k, \"Not in loaded state\");\n+    return warn_excluded(k, \"Not in loaded state\", silent);\n@@ -273,1 +283,1 @@\n-    return warn_excluded(k, \"Has been redefined\");\n+    return warn_excluded(k, \"Has been redefined\", silent);\n@@ -278,1 +288,1 @@\n-    return warn_excluded(k, \"Unsupported location\");\n+    return warn_excluded(k, \"Unsupported location\", silent);\n@@ -284,1 +294,1 @@\n-    return warn_excluded(k, \"Signed JAR\");\n+    return warn_excluded(k, \"Signed JAR\", silent);\n@@ -291,1 +301,1 @@\n-    return warn_excluded(k, \"JFR event class\");\n+    return warn_excluded(k, \"JFR event class\", silent);\n@@ -296,1 +306,1 @@\n-      return warn_excluded(k, \"Failed verification\");\n+      return warn_excluded(k, \"Failed verification\", silent);\n@@ -306,1 +316,1 @@\n-      return warn_excluded(k, \"Old class has been linked\");\n+      return warn_excluded(k, \"Old class has been linked\", silent);\n@@ -635,1 +645,1 @@\n-        SystemDictionaryShared::warn_excluded(k, \"Duplicated unregistered class\");\n+        SystemDictionaryShared::warn_excluded(k, \"Duplicated unregistered class\", false);\n@@ -1605,0 +1615,9 @@\n+    InstanceKlass* caller_ik = key.caller_ik();\n+    if (SystemDictionaryShared::check_for_exclusion_impl(caller_ik, true)) {\n+      \/\/ If the caller class is excluded, unregister all the associated lambda proxy classes so that\n+      \/\/ they won't be included in the CDS archive.\n+      for (int i = 0; i < info._proxy_klasses->length(); i++) {\n+        SystemDictionaryShared::reset_registered_lambda_proxy_class(info._proxy_klasses->at(i));\n+        info._proxy_klasses->remove_at(i);\n+      }\n+    }\n@@ -1607,1 +1626,2 @@\n-      if (!ik->can_be_verified_at_dumptime()) {\n+      if (SystemDictionaryShared::check_for_exclusion_impl(ik, true)) {\n+        SystemDictionaryShared::reset_registered_lambda_proxy_class(ik);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":36,"deletions":16,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -178,1 +178,0 @@\n-  static bool check_for_exclusion_impl(InstanceKlass* k);\n@@ -191,0 +190,2 @@\n+  static bool check_for_exclusion_impl(InstanceKlass* k, bool silent);\n+  static void reset_registered_lambda_proxy_class(InstanceKlass* ik);\n@@ -286,1 +287,1 @@\n-  static bool warn_excluded(InstanceKlass* k, const char* reason);\n+  static bool warn_excluded(InstanceKlass* k, const char* reason, bool silent);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary If the caller class is redefined during dump time, the caller class\n+ *          and its lambda proxy class should not be archived.\n+ * @requires vm.cds\n+ * @requires vm.jvmti\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run driver RedefineClassHelper\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. RedefineCallerClassTest\n+ *\/\n+\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class RedefineCallerClassTest extends DynamicArchiveTestBase {\n+    static String mainClass = RedefineCallerClass.class.getName();\n+\n+    static String sharedClasses[] = {\n+        mainClass,\n+        \"SimpleLambda\", \/\/ caller class will be redefined in RedefineCallerClass\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler\",\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$FileManagerWrapper\",\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$FileManagerWrapper$1\",\n+        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$MemoryJavaFileObject\"\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest(RedefineCallerClassTest::test);\n+    }\n+\n+    static void test() throws Exception {\n+        String topArchiveName = getNewArchiveName();\n+        String appJar = ClassFileInstaller.writeJar(\"redefine_caller_class.jar\", sharedClasses);\n+        String[] options = {\n+            \"-Xlog:class+load,cds\",\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-XX:+AllowArchivingWithJavaAgent\",\n+            \"-javaagent:redefineagent.jar\",\n+            \"-cp\", appJar, mainClass\n+        };\n+\n+        dump(topArchiveName, options)\n+            .assertNormalExit(output -> {\n+                output.shouldHaveExitValue(0)\n+                      .shouldContain(\"Skipping SimpleLambda: Has been redefined\");\n+            });\n+\n+        run(topArchiveName, options)\n+            .assertNormalExit(output -> {\n+                output.shouldHaveExitValue(0)\n+                      .shouldContain(\"RedefineCallerClass source: shared objects file (top)\")\n+                      .shouldMatch(\".class.load. SimpleLambda.source:.*redefine_caller_class.jar\")\n+                      .shouldMatch(\".class.load. SimpleLambda[$][$]Lambda[$].*\/0x.*source:.*SimpleLambda\");\n+            });\n+\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/RedefineCallerClassTest.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+class SimpleLambda {\n+    public static Runnable getRunnable() {\n+      return () -> {};\n+    }\n+}\n+\n+public class RedefineCallerClass {\n+\n+    public static String newClass = \n+        \" class SimpleLambda { \" +\n+        \"     public static Runnable getRunnable() { \" +\n+        \"         return () -> {}; \" +\n+        \"     } \" +\n+        \" } \";\n+\n+    public static void main(String args[]) throws Exception {\n+      SimpleLambda s = new SimpleLambda();\n+      System.out.println(s.getRunnable());\n+      RedefineClassHelper.redefineClass(s.getClass(), newClass);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\/RedefineCallerClass.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+    System.out.println(getRunnable());\n+  }\n+\n+  public static Runnable getRunnable() {\n+    return () -> {};\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/Hello.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}