{"files":[{"patch":"@@ -8,5 +8,13 @@\n-  <style type=\"text\/css\">\n-      code{white-space: pre-wrap;}\n-      span.smallcaps{font-variant: small-caps;}\n-      span.underline{text-decoration: underline;}\n-      div.column{display: inline-block; vertical-align: top; width: 50%;}\n+  <style>\n+    code{white-space: pre-wrap;}\n+    span.smallcaps{font-variant: small-caps;}\n+    div.columns{display: flex; gap: min(4vw, 1.5em);}\n+    div.column{flex: auto; overflow-x: auto;}\n+    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n+    ul.task-list{list-style: none;}\n+    ul.task-list li input[type=\"checkbox\"] {\n+      width: 0.8em;\n+      margin: 0 0.8em 0.2em -1.6em;\n+      vertical-align: middle;\n+    }\n+    .display.math{display: block; text-align: center; margin: 0.5rem auto;}\n@@ -15,0 +23,1 @@\n+  <style type=\"text\/css\">pre, code, tt { color: #1d6ae5; }<\/style>\n@@ -18,1 +27,0 @@\n-  <style type=\"text\/css\">pre, code, tt { color: #1d6ae5; }<\/style>\n@@ -24,1 +32,8 @@\n-<nav id=\"TOC\">\n+<nav id=\"TOC\" role=\"doc-toc\">\n+<ul>\n+<li><a href=\"#tldr-instructions-for-the-impatient\"\n+id=\"toc-tldr-instructions-for-the-impatient\">TL;DR (Instructions for the\n+Impatient)<\/a><\/li>\n+<li><a href=\"#introduction\" id=\"toc-introduction\">Introduction<\/a><\/li>\n+<li><a href=\"#getting-the-source-code\"\n+id=\"toc-getting-the-source-code\">Getting the Source Code<\/a>\n@@ -26,4 +41,2 @@\n-<li><a href=\"#tldr-instructions-for-the-impatient\">TL;DR (Instructions for the Impatient)<\/a><\/li>\n-<li><a href=\"#introduction\">Introduction<\/a><\/li>\n-<li><a href=\"#getting-the-source-code\">Getting the Source Code<\/a><ul>\n-<li><a href=\"#special-considerations\">Special Considerations<\/a><\/li>\n+<li><a href=\"#special-considerations\"\n+id=\"toc-special-considerations\">Special Considerations<\/a><\/li>\n@@ -31,4 +44,9 @@\n-<li><a href=\"#build-hardware-requirements\">Build Hardware Requirements<\/a><ul>\n-<li><a href=\"#building-on-x86\">Building on x86<\/a><\/li>\n-<li><a href=\"#building-on-aarch64\">Building on aarch64<\/a><\/li>\n-<li><a href=\"#building-on-32-bit-arm\">Building on 32-bit arm<\/a><\/li>\n+<li><a href=\"#build-hardware-requirements\"\n+id=\"toc-build-hardware-requirements\">Build Hardware Requirements<\/a>\n+<ul>\n+<li><a href=\"#building-on-x86\" id=\"toc-building-on-x86\">Building on\n+x86<\/a><\/li>\n+<li><a href=\"#building-on-aarch64\" id=\"toc-building-on-aarch64\">Building\n+on aarch64<\/a><\/li>\n+<li><a href=\"#building-on-32-bit-arm\"\n+id=\"toc-building-on-32-bit-arm\">Building on 32-bit arm<\/a><\/li>\n@@ -36,5 +54,7 @@\n-<li><a href=\"#operating-system-requirements\">Operating System Requirements<\/a><ul>\n-<li><a href=\"#windows\">Windows<\/a><\/li>\n-<li><a href=\"#macos\">macOS<\/a><\/li>\n-<li><a href=\"#linux\">Linux<\/a><\/li>\n-<li><a href=\"#aix\">AIX<\/a><\/li>\n+<li><a href=\"#operating-system-requirements\"\n+id=\"toc-operating-system-requirements\">Operating System Requirements<\/a>\n+<ul>\n+<li><a href=\"#windows\" id=\"toc-windows\">Windows<\/a><\/li>\n+<li><a href=\"#macos\" id=\"toc-macos\">macOS<\/a><\/li>\n+<li><a href=\"#linux\" id=\"toc-linux\">Linux<\/a><\/li>\n+<li><a href=\"#aix\" id=\"toc-aix\">AIX<\/a><\/li>\n@@ -42,6 +62,10 @@\n-<li><a href=\"#native-compiler-toolchain-requirements\">Native Compiler (Toolchain) Requirements<\/a><ul>\n-<li><a href=\"#gcc\">gcc<\/a><\/li>\n-<li><a href=\"#clang\">clang<\/a><\/li>\n-<li><a href=\"#apple-xcode\">Apple Xcode<\/a><\/li>\n-<li><a href=\"#microsoft-visual-studio\">Microsoft Visual Studio<\/a><\/li>\n-<li><a href=\"#ibm-xl-cc\">IBM XL C\/C++<\/a><\/li>\n+<li><a href=\"#native-compiler-toolchain-requirements\"\n+id=\"toc-native-compiler-toolchain-requirements\">Native Compiler\n+(Toolchain) Requirements<\/a>\n+<ul>\n+<li><a href=\"#gcc\" id=\"toc-gcc\">gcc<\/a><\/li>\n+<li><a href=\"#clang\" id=\"toc-clang\">clang<\/a><\/li>\n+<li><a href=\"#apple-xcode\" id=\"toc-apple-xcode\">Apple Xcode<\/a><\/li>\n+<li><a href=\"#microsoft-visual-studio\"\n+id=\"toc-microsoft-visual-studio\">Microsoft Visual Studio<\/a><\/li>\n+<li><a href=\"#ibm-xl-cc\" id=\"toc-ibm-xl-cc\">IBM XL C\/C++<\/a><\/li>\n@@ -49,2 +73,5 @@\n-<li><a href=\"#boot-jdk-requirements\">Boot JDK Requirements<\/a><ul>\n-<li><a href=\"#getting-jdk-binaries\">Getting JDK binaries<\/a><\/li>\n+<li><a href=\"#boot-jdk-requirements\" id=\"toc-boot-jdk-requirements\">Boot\n+JDK Requirements<\/a>\n+<ul>\n+<li><a href=\"#getting-jdk-binaries\"\n+id=\"toc-getting-jdk-binaries\">Getting JDK binaries<\/a><\/li>\n@@ -52,6 +79,8 @@\n-<li><a href=\"#external-library-requirements\">External Library Requirements<\/a><ul>\n-<li><a href=\"#freetype\">FreeType<\/a><\/li>\n-<li><a href=\"#cups\">CUPS<\/a><\/li>\n-<li><a href=\"#x11\">X11<\/a><\/li>\n-<li><a href=\"#alsa\">ALSA<\/a><\/li>\n-<li><a href=\"#libffi\">libffi<\/a><\/li>\n+<li><a href=\"#external-library-requirements\"\n+id=\"toc-external-library-requirements\">External Library Requirements<\/a>\n+<ul>\n+<li><a href=\"#freetype\" id=\"toc-freetype\">FreeType<\/a><\/li>\n+<li><a href=\"#cups\" id=\"toc-cups\">CUPS<\/a><\/li>\n+<li><a href=\"#x11\" id=\"toc-x11\">X11<\/a><\/li>\n+<li><a href=\"#alsa\" id=\"toc-alsa\">ALSA<\/a><\/li>\n+<li><a href=\"#libffi\" id=\"toc-libffi\">libffi<\/a><\/li>\n@@ -59,4 +88,6 @@\n-<li><a href=\"#build-tools-requirements\">Build Tools Requirements<\/a><ul>\n-<li><a href=\"#autoconf\">Autoconf<\/a><\/li>\n-<li><a href=\"#gnu-make\">GNU Make<\/a><\/li>\n-<li><a href=\"#gnu-bash\">GNU Bash<\/a><\/li>\n+<li><a href=\"#build-tools-requirements\"\n+id=\"toc-build-tools-requirements\">Build Tools Requirements<\/a>\n+<ul>\n+<li><a href=\"#autoconf\" id=\"toc-autoconf\">Autoconf<\/a><\/li>\n+<li><a href=\"#gnu-make\" id=\"toc-gnu-make\">GNU Make<\/a><\/li>\n+<li><a href=\"#gnu-bash\" id=\"toc-gnu-bash\">GNU Bash<\/a><\/li>\n@@ -64,3 +95,8 @@\n-<li><a href=\"#running-configure\">Running Configure<\/a><ul>\n-<li><a href=\"#common-configure-arguments\">Common Configure Arguments<\/a><\/li>\n-<li><a href=\"#configure-control-variables\">Configure Control Variables<\/a><\/li>\n+<li><a href=\"#running-configure\" id=\"toc-running-configure\">Running\n+Configure<\/a>\n+<ul>\n+<li><a href=\"#common-configure-arguments\"\n+id=\"toc-common-configure-arguments\">Common Configure Arguments<\/a><\/li>\n+<li><a href=\"#configure-control-variables\"\n+id=\"toc-configure-control-variables\">Configure Control\n+Variables<\/a><\/li>\n@@ -68,3 +104,6 @@\n-<li><a href=\"#running-make\">Running Make<\/a><ul>\n-<li><a href=\"#common-make-targets\">Common Make Targets<\/a><\/li>\n-<li><a href=\"#make-control-variables\">Make Control Variables<\/a><\/li>\n+<li><a href=\"#running-make\" id=\"toc-running-make\">Running Make<\/a>\n+<ul>\n+<li><a href=\"#common-make-targets\" id=\"toc-common-make-targets\">Common\n+Make Targets<\/a><\/li>\n+<li><a href=\"#make-control-variables\"\n+id=\"toc-make-control-variables\">Make Control Variables<\/a><\/li>\n@@ -72,3 +111,5 @@\n-<li><a href=\"#running-tests\">Running Tests<\/a><\/li>\n-<li><a href=\"#signing\">Signing<\/a><ul>\n-<li><a href=\"#macos-1\">macOS<\/a><\/li>\n+<li><a href=\"#running-tests\" id=\"toc-running-tests\">Running\n+Tests<\/a><\/li>\n+<li><a href=\"#signing\" id=\"toc-signing\">Signing<\/a>\n+<ul>\n+<li><a href=\"#macos-1\" id=\"toc-macos-1\">macOS<\/a><\/li>\n@@ -76,10 +117,24 @@\n-<li><a href=\"#cross-compiling\">Cross-compiling<\/a><ul>\n-<li><a href=\"#cross-compiling-the-easy-way-with-openjdk-devkits\">Cross compiling the easy way with OpenJDK devkits<\/a><\/li>\n-<li><a href=\"#boot-jdk-and-build-jdk\">Boot JDK and Build JDK<\/a><\/li>\n-<li><a href=\"#specifying-the-target-platform\">Specifying the Target Platform<\/a><\/li>\n-<li><a href=\"#toolchain-considerations\">Toolchain Considerations<\/a><\/li>\n-<li><a href=\"#native-libraries\">Native Libraries<\/a><\/li>\n-<li><a href=\"#cross-compiling-with-debian-sysroots\">Cross compiling with Debian sysroots<\/a><\/li>\n-<li><a href=\"#building-for-armaarch64\">Building for ARM\/aarch64<\/a><\/li>\n-<li><a href=\"#building-for-musl\">Building for musl<\/a><\/li>\n-<li><a href=\"#verifying-the-build\">Verifying the Build<\/a><\/li>\n+<li><a href=\"#cross-compiling\"\n+id=\"toc-cross-compiling\">Cross-compiling<\/a>\n+<ul>\n+<li><a href=\"#cross-compiling-the-easy-way-with-openjdk-devkits\"\n+id=\"toc-cross-compiling-the-easy-way-with-openjdk-devkits\">Cross\n+compiling the easy way with OpenJDK devkits<\/a><\/li>\n+<li><a href=\"#boot-jdk-and-build-jdk\"\n+id=\"toc-boot-jdk-and-build-jdk\">Boot JDK and Build JDK<\/a><\/li>\n+<li><a href=\"#specifying-the-target-platform\"\n+id=\"toc-specifying-the-target-platform\">Specifying the Target\n+Platform<\/a><\/li>\n+<li><a href=\"#toolchain-considerations\"\n+id=\"toc-toolchain-considerations\">Toolchain Considerations<\/a><\/li>\n+<li><a href=\"#native-libraries\" id=\"toc-native-libraries\">Native\n+Libraries<\/a><\/li>\n+<li><a href=\"#cross-compiling-with-debian-sysroots\"\n+id=\"toc-cross-compiling-with-debian-sysroots\">Cross compiling with\n+Debian sysroots<\/a><\/li>\n+<li><a href=\"#building-for-armaarch64\"\n+id=\"toc-building-for-armaarch64\">Building for ARM\/aarch64<\/a><\/li>\n+<li><a href=\"#building-for-musl\" id=\"toc-building-for-musl\">Building for\n+musl<\/a><\/li>\n+<li><a href=\"#verifying-the-build\"\n+id=\"toc-verifying-the-build\">Verifying the Build<\/a><\/li>\n@@ -87,8 +142,15 @@\n-<li><a href=\"#build-performance\">Build Performance<\/a><ul>\n-<li><a href=\"#disk-speed\">Disk Speed<\/a><\/li>\n-<li><a href=\"#virus-checking\">Virus Checking<\/a><\/li>\n-<li><a href=\"#ccache\">Ccache<\/a><\/li>\n-<li><a href=\"#precompiled-headers\">Precompiled Headers<\/a><\/li>\n-<li><a href=\"#icecc-icecream\">Icecc \/ icecream<\/a><\/li>\n-<li><a href=\"#using-the-javac-server\">Using the javac server<\/a><\/li>\n-<li><a href=\"#building-the-right-target\">Building the Right Target<\/a><\/li>\n+<li><a href=\"#build-performance\" id=\"toc-build-performance\">Build\n+Performance<\/a>\n+<ul>\n+<li><a href=\"#disk-speed\" id=\"toc-disk-speed\">Disk Speed<\/a><\/li>\n+<li><a href=\"#virus-checking\" id=\"toc-virus-checking\">Virus\n+Checking<\/a><\/li>\n+<li><a href=\"#ccache\" id=\"toc-ccache\">Ccache<\/a><\/li>\n+<li><a href=\"#precompiled-headers\"\n+id=\"toc-precompiled-headers\">Precompiled Headers<\/a><\/li>\n+<li><a href=\"#icecc-icecream\" id=\"toc-icecc-icecream\">Icecc \/\n+icecream<\/a><\/li>\n+<li><a href=\"#using-the-javac-server\"\n+id=\"toc-using-the-javac-server\">Using the javac server<\/a><\/li>\n+<li><a href=\"#building-the-right-target\"\n+id=\"toc-building-the-right-target\">Building the Right Target<\/a><\/li>\n@@ -96,5 +158,12 @@\n-<li><a href=\"#troubleshooting\">Troubleshooting<\/a><ul>\n-<li><a href=\"#locating-the-source-of-the-error\">Locating the Source of the Error<\/a><\/li>\n-<li><a href=\"#fixing-unexpected-build-failures\">Fixing Unexpected Build Failures<\/a><\/li>\n-<li><a href=\"#specific-build-issues\">Specific Build Issues<\/a><\/li>\n-<li><a href=\"#getting-help\">Getting Help<\/a><\/li>\n+<li><a href=\"#troubleshooting\"\n+id=\"toc-troubleshooting\">Troubleshooting<\/a>\n+<ul>\n+<li><a href=\"#locating-the-source-of-the-error\"\n+id=\"toc-locating-the-source-of-the-error\">Locating the Source of the\n+Error<\/a><\/li>\n+<li><a href=\"#fixing-unexpected-build-failures\"\n+id=\"toc-fixing-unexpected-build-failures\">Fixing Unexpected Build\n+Failures<\/a><\/li>\n+<li><a href=\"#specific-build-issues\"\n+id=\"toc-specific-build-issues\">Specific Build Issues<\/a><\/li>\n+<li><a href=\"#getting-help\" id=\"toc-getting-help\">Getting Help<\/a><\/li>\n@@ -102,6 +171,16 @@\n-<li><a href=\"#reproducible-builds\">Reproducible Builds<\/a><\/li>\n-<li><a href=\"#hints-and-suggestions-for-advanced-users\">Hints and Suggestions for Advanced Users<\/a><ul>\n-<li><a href=\"#bash-completion\">Bash Completion<\/a><\/li>\n-<li><a href=\"#using-multiple-configurations\">Using Multiple Configurations<\/a><\/li>\n-<li><a href=\"#handling-reconfigurations\">Handling Reconfigurations<\/a><\/li>\n-<li><a href=\"#using-fine-grained-make-targets\">Using Fine-Grained Make Targets<\/a><\/li>\n+<li><a href=\"#reproducible-builds\"\n+id=\"toc-reproducible-builds\">Reproducible Builds<\/a><\/li>\n+<li><a href=\"#hints-and-suggestions-for-advanced-users\"\n+id=\"toc-hints-and-suggestions-for-advanced-users\">Hints and Suggestions\n+for Advanced Users<\/a>\n+<ul>\n+<li><a href=\"#bash-completion\" id=\"toc-bash-completion\">Bash\n+Completion<\/a><\/li>\n+<li><a href=\"#using-multiple-configurations\"\n+id=\"toc-using-multiple-configurations\">Using Multiple\n+Configurations<\/a><\/li>\n+<li><a href=\"#handling-reconfigurations\"\n+id=\"toc-handling-reconfigurations\">Handling Reconfigurations<\/a><\/li>\n+<li><a href=\"#using-fine-grained-make-targets\"\n+id=\"toc-using-fine-grained-make-targets\">Using Fine-Grained Make\n+Targets<\/a><\/li>\n@@ -109,7 +188,16 @@\n-<li><a href=\"#understanding-the-build-system\">Understanding the Build System<\/a><ul>\n-<li><a href=\"#configurations\">Configurations<\/a><\/li>\n-<li><a href=\"#build-output-structure\">Build Output Structure<\/a><\/li>\n-<li><a href=\"#fixpath\">Fixpath<\/a><\/li>\n-<li><a href=\"#native-debug-symbols\">Native Debug Symbols<\/a><\/li>\n-<li><a href=\"#autoconf-details\">Autoconf Details<\/a><\/li>\n-<li><a href=\"#developing-the-build-system-itself\">Developing the Build System Itself<\/a><\/li>\n+<li><a href=\"#understanding-the-build-system\"\n+id=\"toc-understanding-the-build-system\">Understanding the Build\n+System<\/a>\n+<ul>\n+<li><a href=\"#configurations\"\n+id=\"toc-configurations\">Configurations<\/a><\/li>\n+<li><a href=\"#build-output-structure\"\n+id=\"toc-build-output-structure\">Build Output Structure<\/a><\/li>\n+<li><a href=\"#fixpath\" id=\"toc-fixpath\">Fixpath<\/a><\/li>\n+<li><a href=\"#native-debug-symbols\" id=\"toc-native-debug-symbols\">Native\n+Debug Symbols<\/a><\/li>\n+<li><a href=\"#autoconf-details\" id=\"toc-autoconf-details\">Autoconf\n+Details<\/a><\/li>\n+<li><a href=\"#developing-the-build-system-itself\"\n+id=\"toc-developing-the-build-system-itself\">Developing the Build System\n+Itself<\/a><\/li>\n@@ -117,2 +205,4 @@\n-<li><a href=\"#contributing-to-the-jdk\">Contributing to the JDK<\/a><\/li>\n-<li><a href=\"#editing-this-document\">Editing this document<\/a><\/li>\n+<li><a href=\"#contributing-to-the-jdk\"\n+id=\"toc-contributing-to-the-jdk\">Contributing to the JDK<\/a><\/li>\n+<li><a href=\"#editing-this-document\"\n+id=\"toc-editing-this-document\">Editing this document<\/a><\/li>\n@@ -121,2 +211,6 @@\n-<h2 id=\"tldr-instructions-for-the-impatient\">TL;DR (Instructions for the Impatient)<\/h2>\n-<p>If you are eager to try out building the JDK, these simple steps works most of the time. They assume that you have installed Git (and Cygwin if running on Windows) and cloned the top-level JDK repository that you want to build.<\/p>\n+<h2 id=\"tldr-instructions-for-the-impatient\">TL;DR (Instructions for the\n+Impatient)<\/h2>\n+<p>If you are eager to try out building the JDK, these simple steps\n+works most of the time. They assume that you have installed Git (and\n+Cygwin if running on Windows) and cloned the top-level JDK repository\n+that you want to build.<\/p>\n@@ -124,1 +218,2 @@\n-<li><p><a href=\"#getting-the-source-code\">Get the complete source code<\/a>:<br \/>\n+<li><p><a href=\"#getting-the-source-code\">Get the complete source\n+code<\/a>:<br \/>\n@@ -128,1 +223,9 @@\n-<p>If <code>configure<\/code> fails due to missing dependencies (to either the <a href=\"#native-compiler-toolchain-requirements\">toolchain<\/a>, <a href=\"#build-tools-requirements\">build tools<\/a>, <a href=\"#external-library-requirements\">external libraries<\/a> or the <a href=\"#boot-jdk-requirements\">boot JDK<\/a>), most of the time it prints a suggestion on how to resolve the situation on your platform. Follow the instructions, and try running <code>bash configure<\/code> again.<\/p><\/li>\n+<p>If <code>configure<\/code> fails due to missing dependencies (to\n+either the <a\n+href=\"#native-compiler-toolchain-requirements\">toolchain<\/a>, <a\n+href=\"#build-tools-requirements\">build tools<\/a>, <a\n+href=\"#external-library-requirements\">external libraries<\/a> or the <a\n+href=\"#boot-jdk-requirements\">boot JDK<\/a>), most of the time it prints\n+a suggestion on how to resolve the situation on your platform. Follow\n+the instructions, and try running <code>bash configure<\/code>\n+again.<\/p><\/li>\n@@ -136,1 +239,3 @@\n-<p>If any of these steps failed, or if you want to know more about build requirements or build functionality, please continue reading this document.<\/p>\n+<p>If any of these steps failed, or if you want to know more about build\n+requirements or build functionality, please continue reading this\n+document.<\/p>\n@@ -138,2 +243,7 @@\n-<p>The JDK is a complex software project. Building it requires a certain amount of technical expertise, a fair number of dependencies on external software, and reasonably powerful hardware.<\/p>\n-<p>If you just want to use the JDK and not build it yourself, this document is not for you. See for instance <a href=\"http:\/\/openjdk.org\/install\">OpenJDK installation<\/a> for some methods of installing a prebuilt JDK.<\/p>\n+<p>The JDK is a complex software project. Building it requires a certain\n+amount of technical expertise, a fair number of dependencies on external\n+software, and reasonably powerful hardware.<\/p>\n+<p>If you just want to use the JDK and not build it yourself, this\n+document is not for you. See for instance <a\n+href=\"http:\/\/openjdk.org\/install\">OpenJDK installation<\/a> for some\n+methods of installing a prebuilt JDK.<\/p>\n@@ -141,2 +251,11 @@\n-<p>Make sure you are getting the correct version. As of JDK 10, the source is no longer split into separate repositories so you only need to clone one single repository. At the <a href=\"https:\/\/git.openjdk.org\/\">OpenJDK Git site<\/a> you can see a list of all available repositories. If you want to build an older version, e.g. JDK 11, it is recommended that you get the <code>jdk11u<\/code> repo, which contains incremental updates, instead of the <code>jdk11<\/code> repo, which was frozen at JDK 11 GA.<\/p>\n-<p>If you are new to Git, a good place to start is the book <a href=\"https:\/\/git-scm.com\/book\/en\/v2\">Pro Git<\/a>. The rest of this document assumes a working knowledge of Git.<\/p>\n+<p>Make sure you are getting the correct version. As of JDK 10, the\n+source is no longer split into separate repositories so you only need to\n+clone one single repository. At the <a\n+href=\"https:\/\/git.openjdk.org\/\">OpenJDK Git site<\/a> you can see a list\n+of all available repositories. If you want to build an older version,\n+e.g. JDK 11, it is recommended that you get the <code>jdk11u<\/code>\n+repo, which contains incremental updates, instead of the\n+<code>jdk11<\/code> repo, which was frozen at JDK 11 GA.<\/p>\n+<p>If you are new to Git, a good place to start is the book <a\n+href=\"https:\/\/git-scm.com\/book\/en\/v2\">Pro Git<\/a>. The rest of this\n+document assumes a working knowledge of Git.<\/p>\n@@ -144,1 +263,2 @@\n-<p>For a smooth building experience, it is recommended that you follow these rules on where and how to check out the source code.<\/p>\n+<p>For a smooth building experience, it is recommended that you follow\n+these rules on where and how to check out the source code.<\/p>\n@@ -146,4 +266,14 @@\n-<li><p>Do not check out the source code in a path which contains spaces. Chances are the build will not work. This is most likely to be an issue on Windows systems.<\/p><\/li>\n-<li><p>Do not check out the source code in a path which has a very long name or is nested many levels deep. Chances are you will hit an OS limitation during the build.<\/p><\/li>\n-<li><p>Put the source code on a local disk, not a network share. If possible, use an SSD. The build process is very disk intensive, and having slow disk access will significantly increase build times. If you need to use a network share for the source code, see below for suggestions on how to keep the build artifacts on a local disk.<\/p><\/li>\n-<li><p>On Windows, if using <a href=\"#cygwin\">Cygwin<\/a>, extra care must be taken to make sure the environment is consistent. It is recommended that you follow this procedure:<\/p>\n+<li><p>Do not check out the source code in a path which contains spaces.\n+Chances are the build will not work. This is most likely to be an issue\n+on Windows systems.<\/p><\/li>\n+<li><p>Do not check out the source code in a path which has a very long\n+name or is nested many levels deep. Chances are you will hit an OS\n+limitation during the build.<\/p><\/li>\n+<li><p>Put the source code on a local disk, not a network share. If\n+possible, use an SSD. The build process is very disk intensive, and\n+having slow disk access will significantly increase build times. If you\n+need to use a network share for the source code, see below for\n+suggestions on how to keep the build artifacts on a local disk.<\/p><\/li>\n+<li><p>On Windows, if using <a href=\"#cygwin\">Cygwin<\/a>, extra care\n+must be taken to make sure the environment is consistent. It is\n+recommended that you follow this procedure:<\/p>\n@@ -151,3 +281,11 @@\n-<li><p>Create the directory that is going to contain the top directory of the JDK clone by using the <code>mkdir<\/code> command in the Cygwin bash shell. That is, do <em>not<\/em> create it using Windows Explorer. This will ensure that it will have proper Cygwin attributes, and that it's children will inherit those attributes.<\/p><\/li>\n-<li><p>Do not put the JDK clone in a path under your Cygwin home directory. This is especially important if your user name contains spaces and\/or mixed upper and lower case letters.<\/p><\/li>\n-<li><p>You need to install a git client. You have two choices, Cygwin git or Git for Windows. Unfortunately there are pros and cons with each choice.<\/p>\n+<li><p>Create the directory that is going to contain the top directory\n+of the JDK clone by using the <code>mkdir<\/code> command in the Cygwin\n+bash shell. That is, do <em>not<\/em> create it using Windows Explorer.\n+This will ensure that it will have proper Cygwin attributes, and that\n+it's children will inherit those attributes.<\/p><\/li>\n+<li><p>Do not put the JDK clone in a path under your Cygwin home\n+directory. This is especially important if your user name contains\n+spaces and\/or mixed upper and lower case letters.<\/p><\/li>\n+<li><p>You need to install a git client. You have two choices, Cygwin\n+git or Git for Windows. Unfortunately there are pros and cons with each\n+choice.<\/p>\n@@ -155,2 +293,12 @@\n-<li><p>The Cygwin <code>git<\/code> client has no line ending issues and understands Cygwin paths (which are used throughout the JDK build system). However, it does not currently work well with the Skara CLI tooling. Please see the <a href=\"https:\/\/wiki.openjdk.org\/display\/SKARA\/Skara#Skara-Git\">Skara wiki on Git clients<\/a> for up-to-date information about the Skara git client support.<\/p><\/li>\n-<li><p>The <a href=\"https:\/\/gitforwindows.org\">Git for Windows<\/a> client has issues with line endings, and do not understand Cygwin paths. It does work well with the Skara CLI tooling, however. To alleviate the line ending problems, make sure you set <code>core.autocrlf<\/code> to <code>false<\/code> (this is asked during installation).<\/p><\/li>\n+<li><p>The Cygwin <code>git<\/code> client has no line ending issues and\n+understands Cygwin paths (which are used throughout the JDK build\n+system). However, it does not currently work well with the Skara CLI\n+tooling. Please see the <a\n+href=\"https:\/\/wiki.openjdk.org\/display\/SKARA\/Skara#Skara-Git\">Skara wiki\n+on Git clients<\/a> for up-to-date information about the Skara git client\n+support.<\/p><\/li>\n+<li><p>The <a href=\"https:\/\/gitforwindows.org\">Git for Windows<\/a>\n+client has issues with line endings, and do not understand Cygwin paths.\n+It does work well with the Skara CLI tooling, however. To alleviate the\n+line ending problems, make sure you set <code>core.autocrlf<\/code> to\n+<code>false<\/code> (this is asked during installation).<\/p><\/li>\n@@ -159,1 +307,2 @@\n-<p>Failure to follow this procedure might result in hard-to-debug build problems.<\/p><\/li>\n+<p>Failure to follow this procedure might result in hard-to-debug build\n+problems.<\/p><\/li>\n@@ -162,2 +311,6 @@\n-<p>The JDK is a massive project, and require machines ranging from decent to powerful to be able to build in a reasonable amount of time, or to be able to complete a build at all.<\/p>\n-<p>We <em>strongly<\/em> recommend usage of an SSD disk for the build, since disk speed is one of the limiting factors for build performance.<\/p>\n+<p>The JDK is a massive project, and require machines ranging from\n+decent to powerful to be able to build in a reasonable amount of time,\n+or to be able to complete a build at all.<\/p>\n+<p>We <em>strongly<\/em> recommend usage of an SSD disk for the build,\n+since disk speed is one of the limiting factors for build\n+performance.<\/p>\n@@ -165,2 +318,6 @@\n-<p>At a minimum, a machine with 2-4 cores is advisable, as well as 2-4 GB of RAM. (The more cores to use, the more memory you need.) At least 6 GB of free disk space is required.<\/p>\n-<p>Even for 32-bit builds, it is recommended to use a 64-bit build machine, and instead create a 32-bit target using <code>--with-target-bits=32<\/code>.<\/p>\n+<p>At a minimum, a machine with 2-4 cores is advisable, as well as 2-4\n+GB of RAM. (The more cores to use, the more memory you need.) At least 6\n+GB of free disk space is required.<\/p>\n+<p>Even for 32-bit builds, it is recommended to use a 64-bit build\n+machine, and instead create a 32-bit target using\n+<code>--with-target-bits=32<\/code>.<\/p>\n@@ -168,2 +325,5 @@\n-<p>At a minimum, a machine with 8 cores is advisable, as well as 8 GB of RAM. (The more cores to use, the more memory you need.) At least 6 GB of free disk space is required.<\/p>\n-<p>If you do not have access to sufficiently powerful hardware, it is also possible to use <a href=\"#cross-compiling\">cross-compiling<\/a>.<\/p>\n+<p>At a minimum, a machine with 8 cores is advisable, as well as 8 GB of\n+RAM. (The more cores to use, the more memory you need.) At least 6 GB of\n+free disk space is required.<\/p>\n+<p>If you do not have access to sufficiently powerful hardware, it is\n+also possible to use <a href=\"#cross-compiling\">cross-compiling<\/a>.<\/p>\n@@ -171,1 +331,6 @@\n-<p>In order to use Branch Protection features in the VM, <code>--enable-branch-protection<\/code> must be used. This option requires C++ compiler support (GCC 9.1.0+ or Clang 10+). The resulting build can be run on both machines with and without support for branch protection in hardware. Branch Protection is only supported for Linux targets.<\/p>\n+<p>In order to use Branch Protection features in the VM,\n+<code>--enable-branch-protection<\/code> must be used. This option\n+requires C++ compiler support (GCC 9.1.0+ or Clang 10+). The resulting\n+build can be run on both machines with and without support for branch\n+protection in hardware. Branch Protection is only supported for Linux\n+targets.<\/p>\n@@ -173,5 +338,13 @@\n-<p>This is not recommended. Instead, see the section on <a href=\"#cross-compiling\">Cross-compiling<\/a>.<\/p>\n-<h2 id=\"operating-system-requirements\">Operating System Requirements<\/h2>\n-<p>The mainline JDK project supports Linux, macOS, AIX and Windows. Support for other operating system, e.g. BSD, exists in separate &quot;port&quot; projects.<\/p>\n-<p>In general, the JDK can be built on a wide range of versions of these operating systems, but the further you deviate from what is tested on a daily basis, the more likely you are to run into problems.<\/p>\n-<p>This table lists the OS versions used by Oracle when building the JDK. Such information is always subject to change, but this table is up to date at the time of writing.<\/p>\n+<p>This is not recommended. Instead, see the section on <a\n+href=\"#cross-compiling\">Cross-compiling<\/a>.<\/p>\n+<h2 id=\"operating-system-requirements\">Operating System\n+Requirements<\/h2>\n+<p>The mainline JDK project supports Linux, macOS, AIX and Windows.\n+Support for other operating system, e.g. BSD, exists in separate \"port\"\n+projects.<\/p>\n+<p>In general, the JDK can be built on a wide range of versions of these\n+operating systems, but the further you deviate from what is tested on a\n+daily basis, the more likely you are to run into problems.<\/p>\n+<p>This table lists the OS versions used by Oracle when building the\n+JDK. Such information is always subject to change, but this table is up\n+to date at the time of writing.<\/p>\n@@ -200,2 +373,7 @@\n-<p>The double version numbers for Linux are due to the hybrid model used at Oracle, where header files and external libraries from an older version are used when building on a more modern version of the OS.<\/p>\n-<p>The Build Group has a wiki page with <a href=\"https:\/\/wiki.openjdk.org\/display\/Build\/Supported+Build+Platforms\">Supported Build Platforms<\/a>. From time to time, this is updated by contributors to list successes or failures of building on different platforms.<\/p>\n+<p>The double version numbers for Linux are due to the hybrid model used\n+at Oracle, where header files and external libraries from an older\n+version are used when building on a more modern version of the OS.<\/p>\n+<p>The Build Group has a wiki page with <a\n+href=\"https:\/\/wiki.openjdk.org\/display\/Build\/Supported+Build+Platforms\">Supported\n+Build Platforms<\/a>. From time to time, this is updated by contributors\n+to list successes or failures of building on different platforms.<\/p>\n@@ -203,4 +381,19 @@\n-<p>Windows XP is not a supported platform, but all newer Windows should be able to build the JDK.<\/p>\n-<p>On Windows, it is important that you pay attention to the instructions in the <a href=\"#special-considerations\">Special Considerations<\/a>.<\/p>\n-<p>Windows is the only non-POSIX OS supported by the JDK, and as such, requires some extra care. A POSIX support layer is required to build on Windows. Currently, the only supported such layers are Cygwin, Windows Subsystem for Linux (WSL), and MSYS2. (MSYS is no longer supported due to an outdated bash; While OpenJDK can be built with MSYS2, support for it is still experimental, so build failures and unusual errors are not uncommon.)<\/p>\n-<p>Internally in the build system, all paths are represented as Unix-style paths, e.g. <code>\/cygdrive\/c\/git\/jdk\/Makefile<\/code> rather than <code>C:\\git\\jdk\\Makefile<\/code>. This rule also applies to input to the build system, e.g. in arguments to <code>configure<\/code>. So, use <code>--with-msvcr-dll=\/cygdrive\/c\/msvcr100.dll<\/code> rather than <code>--with-msvcr-dll=c:\\msvcr100.dll<\/code>. For details on this conversion, see the section on <a href=\"#fixpath\">Fixpath<\/a>.<\/p>\n+<p>Windows XP is not a supported platform, but all newer Windows should\n+be able to build the JDK.<\/p>\n+<p>On Windows, it is important that you pay attention to the\n+instructions in the <a href=\"#special-considerations\">Special\n+Considerations<\/a>.<\/p>\n+<p>Windows is the only non-POSIX OS supported by the JDK, and as such,\n+requires some extra care. A POSIX support layer is required to build on\n+Windows. Currently, the only supported such layers are Cygwin, Windows\n+Subsystem for Linux (WSL), and MSYS2. (MSYS is no longer supported due\n+to an outdated bash; While OpenJDK can be built with MSYS2, support for\n+it is still experimental, so build failures and unusual errors are not\n+uncommon.)<\/p>\n+<p>Internally in the build system, all paths are represented as\n+Unix-style paths, e.g. <code>\/cygdrive\/c\/git\/jdk\/Makefile<\/code> rather\n+than <code>C:\\git\\jdk\\Makefile<\/code>. This rule also applies to input\n+to the build system, e.g. in arguments to <code>configure<\/code>. So,\n+use <code>--with-msvcr-dll=\/cygdrive\/c\/msvcr100.dll<\/code> rather than\n+<code>--with-msvcr-dll=c:\\msvcr100.dll<\/code>. For details on this\n+conversion, see the section on <a href=\"#fixpath\">Fixpath<\/a>.<\/p>\n@@ -208,4 +401,14 @@\n-<p>A functioning <a href=\"http:\/\/www.cygwin.com\/\">Cygwin<\/a> environment is required for building the JDK on Windows. If you have a 64-bit OS, we strongly recommend using the 64-bit version of Cygwin.<\/p>\n-<p><strong>Note:<\/strong> Cygwin has a model of continuously updating all packages without any easy way to install or revert to a specific version of a package. This means that whenever you add or update a package in Cygwin, you might (inadvertently) update tools that are used by the JDK build process, and that can cause unexpected build problems.<\/p>\n-<p>The JDK requires GNU Make 4.0 or greater in Cygwin. This is usually not a problem, since Cygwin currently only distributes GNU Make at a version above 4.0.<\/p>\n-<p>Apart from the basic Cygwin installation, the following packages must also be installed:<\/p>\n+<p>A functioning <a href=\"http:\/\/www.cygwin.com\/\">Cygwin<\/a> environment\n+is required for building the JDK on Windows. If you have a 64-bit OS, we\n+strongly recommend using the 64-bit version of Cygwin.<\/p>\n+<p><strong>Note:<\/strong> Cygwin has a model of continuously updating\n+all packages without any easy way to install or revert to a specific\n+version of a package. This means that whenever you add or update a\n+package in Cygwin, you might (inadvertently) update tools that are used\n+by the JDK build process, and that can cause unexpected build\n+problems.<\/p>\n+<p>The JDK requires GNU Make 4.0 or greater in Cygwin. This is usually\n+not a problem, since Cygwin currently only distributes GNU Make at a\n+version above 4.0.<\/p>\n+<p>Apart from the basic Cygwin installation, the following packages must\n+also be installed:<\/p>\n@@ -218,1 +421,2 @@\n-<p>Often, you can install these packages using the following command line:<\/p>\n+<p>Often, you can install these packages using the following command\n+line:<\/p>\n@@ -220,6 +424,29 @@\n-<p>Unfortunately, Cygwin can be unreliable in certain circumstances. If you experience build tool crashes or strange issues when building on Windows, please check the Cygwin FAQ on the <a href=\"https:\/\/cygwin.com\/faq\/faq.html#faq.using.bloda\">&quot;BLODA&quot; list<\/a> and the section on <a href=\"https:\/\/cygwin.com\/faq\/faq.html#faq.using.fixing-fork-failures\">fork() failures<\/a>.<\/p>\n-<h4 id=\"windows-subsystem-for-linux-wsl\">Windows Subsystem for Linux (WSL)<\/h4>\n-<p>Windows 10 1809 or newer is supported due to a dependency on the wslpath utility and support for environment variable sharing through WSLENV. Version 1803 can work but intermittent build failures have been observed.<\/p>\n-<p>It's possible to build both Windows and Linux binaries from WSL. To build Windows binaries, you must use a Windows boot JDK (located in a Windows-accessible directory). To build Linux binaries, you must use a Linux boot JDK. The default behavior is to build for Windows. To build for Linux, pass <code>--build=x86_64-unknown-linux-gnu --openjdk-target=x86_64-unknown-linux-gnu<\/code> to <code>configure<\/code>.<\/p>\n-<p>If building Windows binaries, the source code must be located in a Windows- accessible directory. This is because Windows executables (such as Visual Studio and the boot JDK) must be able to access the source code. Also, the drive where the source is stored must be mounted as case-insensitive by changing either \/etc\/fstab or \/etc\/wsl.conf in WSL. Individual directories may be corrected using the fsutil tool in case the source was cloned before changing the mount options.<\/p>\n-<p>Note that while it's possible to build on WSL, testing is still not fully supported.<\/p>\n+<p>Unfortunately, Cygwin can be unreliable in certain circumstances. If\n+you experience build tool crashes or strange issues when building on\n+Windows, please check the Cygwin FAQ on the <a\n+href=\"https:\/\/cygwin.com\/faq\/faq.html#faq.using.bloda\">\"BLODA\" list<\/a>\n+and the section on <a\n+href=\"https:\/\/cygwin.com\/faq\/faq.html#faq.using.fixing-fork-failures\">fork()\n+failures<\/a>.<\/p>\n+<h4 id=\"windows-subsystem-for-linux-wsl\">Windows Subsystem for Linux\n+(WSL)<\/h4>\n+<p>Windows 10 1809 or newer is supported due to a dependency on the\n+wslpath utility and support for environment variable sharing through\n+WSLENV. Version 1803 can work but intermittent build failures have been\n+observed.<\/p>\n+<p>It's possible to build both Windows and Linux binaries from WSL. To\n+build Windows binaries, you must use a Windows boot JDK (located in a\n+Windows-accessible directory). To build Linux binaries, you must use a\n+Linux boot JDK. The default behavior is to build for Windows. To build\n+for Linux, pass\n+<code>--build=x86_64-unknown-linux-gnu --openjdk-target=x86_64-unknown-linux-gnu<\/code>\n+to <code>configure<\/code>.<\/p>\n+<p>If building Windows binaries, the source code must be located in a\n+Windows- accessible directory. This is because Windows executables (such\n+as Visual Studio and the boot JDK) must be able to access the source\n+code. Also, the drive where the source is stored must be mounted as\n+case-insensitive by changing either \/etc\/fstab or \/etc\/wsl.conf in WSL.\n+Individual directories may be corrected using the fsutil tool in case\n+the source was cloned before changing the mount options.<\/p>\n+<p>Note that while it's possible to build on WSL, testing is still not\n+fully supported.<\/p>\n@@ -227,3 +454,13 @@\n-<p>Apple is using a quite aggressive scheme of pushing OS updates, and coupling these updates with required updates of Xcode. Unfortunately, this makes it difficult for a project such as the JDK to keep pace with a continuously updated machine running macOS. See the section on <a href=\"#apple-xcode\">Apple Xcode<\/a> on some strategies to deal with this.<\/p>\n-<p>It is recommended that you use at least Mac OS X 10.13 (High Sierra). At the time of writing, the JDK has been successfully compiled on macOS 10.12 (Sierra).<\/p>\n-<p>The standard macOS environment contains the basic tooling needed to build, but for external libraries a package manager is recommended. The JDK uses <a href=\"https:\/\/brew.sh\/\">homebrew<\/a> in the examples, but feel free to use whatever manager you want (or none).<\/p>\n+<p>Apple is using a quite aggressive scheme of pushing OS updates, and\n+coupling these updates with required updates of Xcode. Unfortunately,\n+this makes it difficult for a project such as the JDK to keep pace with\n+a continuously updated machine running macOS. See the section on <a\n+href=\"#apple-xcode\">Apple Xcode<\/a> on some strategies to deal with\n+this.<\/p>\n+<p>It is recommended that you use at least Mac OS X 10.13 (High Sierra).\n+At the time of writing, the JDK has been successfully compiled on macOS\n+10.12 (Sierra).<\/p>\n+<p>The standard macOS environment contains the basic tooling needed to\n+build, but for external libraries a package manager is recommended. The\n+JDK uses <a href=\"https:\/\/brew.sh\/\">homebrew<\/a> in the examples, but\n+feel free to use whatever manager you want (or none).<\/p>\n@@ -231,2 +468,5 @@\n-<p>It is often not much problem to build the JDK on Linux. The only general advice is to try to use the compilers, external libraries and header files as provided by your distribution.<\/p>\n-<p>The basic tooling is provided as part of the core operating system, but you will most likely need to install developer packages.<\/p>\n+<p>It is often not much problem to build the JDK on Linux. The only\n+general advice is to try to use the compilers, external libraries and\n+header files as provided by your distribution.<\/p>\n+<p>The basic tooling is provided as part of the core operating system,\n+but you will most likely need to install developer packages.<\/p>\n@@ -237,1 +477,2 @@\n-<p>For Alpine Linux, aside from basic tooling, install the GNU versions of some programs:<\/p>\n+<p>For Alpine Linux, aside from basic tooling, install the GNU versions\n+of some programs:<\/p>\n@@ -240,3 +481,14 @@\n-<p>Please consult the AIX section of the <a href=\"https:\/\/wiki.openjdk.org\/display\/Build\/Supported+Build+Platforms\">Supported Build Platforms<\/a> OpenJDK Build Wiki page for details about which versions of AIX are supported.<\/p>\n-<h2 id=\"native-compiler-toolchain-requirements\">Native Compiler (Toolchain) Requirements<\/h2>\n-<p>Large portions of the JDK consists of native code, that needs to be compiled to be able to run on the target platform. In theory, toolchain and operating system should be independent factors, but in practice there's more or less a one-to-one correlation between target operating system and toolchain. There are ongoing efforts to loosen this strict coupling between compiler and operating system (see <a href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8288293\">JDK-8288293<\/a>) but it will likely be a very long time before this goal can be realized.<\/p>\n+<p>Please consult the AIX section of the <a\n+href=\"https:\/\/wiki.openjdk.org\/display\/Build\/Supported+Build+Platforms\">Supported\n+Build Platforms<\/a> OpenJDK Build Wiki page for details about which\n+versions of AIX are supported.<\/p>\n+<h2 id=\"native-compiler-toolchain-requirements\">Native Compiler\n+(Toolchain) Requirements<\/h2>\n+<p>Large portions of the JDK consists of native code, that needs to be\n+compiled to be able to run on the target platform. In theory, toolchain\n+and operating system should be independent factors, but in practice\n+there's more or less a one-to-one correlation between target operating\n+system and toolchain. There are ongoing efforts to loosen this strict\n+coupling between compiler and operating system (see <a\n+href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8288293\">JDK-8288293<\/a>) but\n+it will likely be a very long time before this goal can be realized.<\/p>\n@@ -269,1 +521,6 @@\n-<p>Please see the individual sections on the toolchains for version recommendations. As a reference, these versions of the toolchains are used, at the time of writing, by Oracle for the daily builds of the JDK. It should be possible to compile the JDK with both older and newer versions, but the closer you stay to this list, the more likely you are to compile successfully without issues.<\/p>\n+<p>Please see the individual sections on the toolchains for version\n+recommendations. As a reference, these versions of the toolchains are\n+used, at the time of writing, by Oracle for the daily builds of the JDK.\n+It should be possible to compile the JDK with both older and newer\n+versions, but the closer you stay to this list, the more likely you are\n+to compile successfully without issues.<\/p>\n@@ -288,1 +545,2 @@\n-<td style=\"text-align: left;\">Microsoft Visual Studio 2022 update 17.1.0<\/td>\n+<td style=\"text-align: left;\">Microsoft Visual Studio 2022 update\n+17.1.0<\/td>\n@@ -292,1 +550,4 @@\n-<p>All compilers are expected to be able to compile to the C99 language standard, as some C99 features are used in the source code. Microsoft Visual Studio doesn't fully support C99 so in practice shared code is limited to using C99 features that it does support.<\/p>\n+<p>All compilers are expected to be able to compile to the C99 language\n+standard, as some C99 features are used in the source code. Microsoft\n+Visual Studio doesn't fully support C99 so in practice shared code is\n+limited to using C99 features that it does support.<\/p>\n@@ -294,2 +555,5 @@\n-<p>The minimum accepted version of gcc is 5.0. Older versions will generate a warning by <code>configure<\/code> and are unlikely to work.<\/p>\n-<p>The JDK is currently known to be able to compile with at least version 11.2 of gcc.<\/p>\n+<p>The minimum accepted version of gcc is 5.0. Older versions will\n+generate a warning by <code>configure<\/code> and are unlikely to\n+work.<\/p>\n+<p>The JDK is currently known to be able to compile with at least\n+version 11.2 of gcc.<\/p>\n@@ -298,2 +562,4 @@\n-<p>The minimum accepted version of clang is 3.5. Older versions will not be accepted by <code>configure<\/code>.<\/p>\n-<p>To use clang instead of gcc on Linux, use <code>--with-toolchain-type=clang<\/code>.<\/p>\n+<p>The minimum accepted version of clang is 3.5. Older versions will not\n+be accepted by <code>configure<\/code>.<\/p>\n+<p>To use clang instead of gcc on Linux, use\n+<code>--with-toolchain-type=clang<\/code>.<\/p>\n@@ -302,1 +568,3 @@\n-<p>You will need the Xcode command lines developers tools to be able to build the JDK. (Actually, <em>only<\/em> the command lines tools are needed, not the IDE.) The simplest way to install these is to run:<\/p>\n+<p>You will need the Xcode command lines developers tools to be able to\n+build the JDK. (Actually, <em>only<\/em> the command lines tools are\n+needed, not the IDE.) The simplest way to install these is to run:<\/p>\n@@ -304,2 +572,15 @@\n-<p>It is advisable to keep an older version of Xcode for building the JDK when updating Xcode. This <a href=\"http:\/\/iosdevelopertips.com\/xcode\/install-multiple-versions-of-xcode.html\">blog page<\/a> has good suggestions on managing multiple Xcode versions. To use a specific version of Xcode, use <code>xcode-select -s<\/code> before running <code>configure<\/code>, or use <code>--with-toolchain-path<\/code> to point to the version of Xcode to use, e.g. <code>configure --with-toolchain-path=\/Applications\/Xcode8.app\/Contents\/Developer\/usr\/bin<\/code><\/p>\n-<p>If you have recently (inadvertently) updated your OS and\/or Xcode version, and the JDK can no longer be built, please see the section on <a href=\"#problems-with-the-build-environment\">Problems with the Build Environment<\/a>, and <a href=\"#getting-help\">Getting Help<\/a> to find out if there are any recent, non-merged patches available for this update.<\/p>\n+<p>It is advisable to keep an older version of Xcode for building the\n+JDK when updating Xcode. This <a\n+href=\"http:\/\/iosdevelopertips.com\/xcode\/install-multiple-versions-of-xcode.html\">blog\n+page<\/a> has good suggestions on managing multiple Xcode versions. To\n+use a specific version of Xcode, use <code>xcode-select -s<\/code> before\n+running <code>configure<\/code>, or use\n+<code>--with-toolchain-path<\/code> to point to the version of Xcode to\n+use, e.g.\n+<code>configure --with-toolchain-path=\/Applications\/Xcode8.app\/Contents\/Developer\/usr\/bin<\/code><\/p>\n+<p>If you have recently (inadvertently) updated your OS and\/or Xcode\n+version, and the JDK can no longer be built, please see the section on\n+<a href=\"#problems-with-the-build-environment\">Problems with the Build\n+Environment<\/a>, and <a href=\"#getting-help\">Getting Help<\/a> to find\n+out if there are any recent, non-merged patches available for this\n+update.<\/p>\n@@ -307,3 +588,13 @@\n-<p>The minimum accepted version is Visual Studio 2019 version 16.8. (Note that this version is often presented as &quot;MSVC 14.28&quot;, and reported by cl.exe as 19.28.) Older versions will not be accepted by <code>configure<\/code> and will not work. The maximum accepted version of Visual Studio is 2022.<\/p>\n-<p>If you have multiple versions of Visual Studio installed, <code>configure<\/code> will by default pick the latest. You can request a specific version to be used by setting <code>--with-toolchain-version<\/code>, e.g. <code>--with-toolchain-version=2022<\/code>.<\/p>\n-<p>If you have Visual Studio installed but <code>configure<\/code> fails to detect it, it may be because of <a href=\"#spaces-in-path\">spaces in path<\/a>.<\/p>\n+<p>The minimum accepted version is Visual Studio 2019 version 16.8.\n+(Note that this version is often presented as \"MSVC 14.28\", and reported\n+by cl.exe as 19.28.) Older versions will not be accepted by\n+<code>configure<\/code> and will not work. The maximum accepted version\n+of Visual Studio is 2022.<\/p>\n+<p>If you have multiple versions of Visual Studio installed,\n+<code>configure<\/code> will by default pick the latest. You can request\n+a specific version to be used by setting\n+<code>--with-toolchain-version<\/code>, e.g.\n+<code>--with-toolchain-version=2022<\/code>.<\/p>\n+<p>If you have Visual Studio installed but <code>configure<\/code> fails\n+to detect it, it may be because of <a href=\"#spaces-in-path\">spaces in\n+path<\/a>.<\/p>\n@@ -311,1 +602,4 @@\n-<p>Please consult the AIX section of the <a href=\"https:\/\/wiki.openjdk.org\/display\/Build\/Supported+Build+Platforms\">Supported Build Platforms<\/a> OpenJDK Build Wiki page for details about which versions of XLC are supported.<\/p>\n+<p>Please consult the AIX section of the <a\n+href=\"https:\/\/wiki.openjdk.org\/display\/Build\/Supported+Build+Platforms\">Supported\n+Build Platforms<\/a> OpenJDK Build Wiki page for details about which\n+versions of XLC are supported.<\/p>\n@@ -313,4 +607,18 @@\n-<p>Paradoxically, building the JDK requires a pre-existing JDK. This is called the &quot;boot JDK&quot;. The boot JDK does not, however, have to be a JDK built directly from the source code available in the OpenJDK Community. If you are porting the JDK to a new platform, chances are that there already exists another JDK for that platform that is usable as boot JDK.<\/p>\n-<p>The rule of thumb is that the boot JDK for building JDK major version <em>N<\/em> should be a JDK of major version <em>N-1<\/em>, so for building JDK 9 a JDK 8 would be suitable as boot JDK. However, the JDK should be able to &quot;build itself&quot;, so an up-to-date build of the current JDK source is an acceptable alternative. If you are following the <em>N-1<\/em> rule, make sure you've got the latest update version, since JDK 8 GA might not be able to build JDK 9 on all platforms.<\/p>\n-<p>Early in the release cycle, version <em>N-1<\/em> may not yet have been released. In that case, the preferred boot JDK will be version <em>N-2<\/em> until version <em>N-1<\/em> is available.<\/p>\n-<p>If the boot JDK is not automatically detected, or the wrong JDK is picked, use <code>--with-boot-jdk<\/code> to point to the JDK to use.<\/p>\n+<p>Paradoxically, building the JDK requires a pre-existing JDK. This is\n+called the \"boot JDK\". The boot JDK does not, however, have to be a JDK\n+built directly from the source code available in the OpenJDK Community.\n+If you are porting the JDK to a new platform, chances are that there\n+already exists another JDK for that platform that is usable as boot\n+JDK.<\/p>\n+<p>The rule of thumb is that the boot JDK for building JDK major version\n+<em>N<\/em> should be a JDK of major version <em>N-1<\/em>, so for\n+building JDK 9 a JDK 8 would be suitable as boot JDK. However, the JDK\n+should be able to \"build itself\", so an up-to-date build of the current\n+JDK source is an acceptable alternative. If you are following the\n+<em>N-1<\/em> rule, make sure you've got the latest update version, since\n+JDK 8 GA might not be able to build JDK 9 on all platforms.<\/p>\n+<p>Early in the release cycle, version <em>N-1<\/em> may not yet have\n+been released. In that case, the preferred boot JDK will be version\n+<em>N-2<\/em> until version <em>N-1<\/em> is available.<\/p>\n+<p>If the boot JDK is not automatically detected, or the wrong JDK is\n+picked, use <code>--with-boot-jdk<\/code> to point to the JDK to use.<\/p>\n@@ -318,6 +626,28 @@\n-<p>JDK binaries for Linux, Windows and macOS can be downloaded from <a href=\"http:\/\/jdk.java.net\">jdk.java.net<\/a>. An alternative is to download the <a href=\"http:\/\/www.oracle.com\/technetwork\/java\/javase\/downloads\">Oracle JDK<\/a>. Another is the <a href=\"https:\/\/adoptopenjdk.net\/\">Adopt OpenJDK Project<\/a>, which publishes experimental prebuilt binaries for various platforms.<\/p>\n-<p>On Linux you can also get a JDK from the Linux distribution. On apt-based distros (like Debian and Ubuntu), <code>sudo apt-get install openjdk-&lt;VERSION&gt;-jdk<\/code> is typically enough to install a JDK &lt;VERSION&gt;. On rpm-based distros (like Fedora and Red Hat), try <code>sudo yum install java-&lt;VERSION&gt;-openjdk-devel<\/code>.<\/p>\n-<h2 id=\"external-library-requirements\">External Library Requirements<\/h2>\n-<p>Different platforms require different external libraries. In general, libraries are not optional - that is, they are either required or not used.<\/p>\n-<p>If a required library is not detected by <code>configure<\/code>, you need to provide the path to it. There are two forms of the <code>configure<\/code> arguments to point to an external library: <code>--with-&lt;LIB&gt;=&lt;path&gt;<\/code> or <code>--with-&lt;LIB&gt;-include=&lt;path to include&gt; --with-&lt;LIB&gt;-lib=&lt;path to lib&gt;<\/code>. The first variant is more concise, but require the include files and library files to reside in a default hierarchy under this directory. In most cases, it works fine.<\/p>\n-<p>As a fallback, the second version allows you to point to the include directory and the lib directory separately.<\/p>\n+<p>JDK binaries for Linux, Windows and macOS can be downloaded from <a\n+href=\"http:\/\/jdk.java.net\">jdk.java.net<\/a>. An alternative is to\n+download the <a\n+href=\"http:\/\/www.oracle.com\/technetwork\/java\/javase\/downloads\">Oracle\n+JDK<\/a>. Another is the <a href=\"https:\/\/adoptopenjdk.net\/\">Adopt\n+OpenJDK Project<\/a>, which publishes experimental prebuilt binaries for\n+various platforms.<\/p>\n+<p>On Linux you can also get a JDK from the Linux distribution. On\n+apt-based distros (like Debian and Ubuntu),\n+<code>sudo apt-get install openjdk-&lt;VERSION&gt;-jdk<\/code> is\n+typically enough to install a JDK &lt;VERSION&gt;. On rpm-based distros\n+(like Fedora and Red Hat), try\n+<code>sudo yum install java-&lt;VERSION&gt;-openjdk-devel<\/code>.<\/p>\n+<h2 id=\"external-library-requirements\">External Library\n+Requirements<\/h2>\n+<p>Different platforms require different external libraries. In general,\n+libraries are not optional - that is, they are either required or not\n+used.<\/p>\n+<p>If a required library is not detected by <code>configure<\/code>, you\n+need to provide the path to it. There are two forms of the\n+<code>configure<\/code> arguments to point to an external library:\n+<code>--with-&lt;LIB&gt;=&lt;path&gt;<\/code> or\n+<code>--with-&lt;LIB&gt;-include=&lt;path to include&gt; --with-&lt;LIB&gt;-lib=&lt;path to lib&gt;<\/code>.\n+The first variant is more concise, but require the include files and\n+library files to reside in a default hierarchy under this directory. In\n+most cases, it works fine.<\/p>\n+<p>As a fallback, the second version allows you to point to the include\n+directory and the lib directory separately.<\/p>\n@@ -325,1 +655,5 @@\n-<p>FreeType2 from <a href=\"http:\/\/www.freetype.org\/\">The FreeType Project<\/a> is not required on any platform. The exception is on Unix-based platforms when configuring such that the build artifacts will reference a system installed library, rather than bundling the JDK's own copy.<\/p>\n+<p>FreeType2 from <a href=\"http:\/\/www.freetype.org\/\">The FreeType\n+Project<\/a> is not required on any platform. The exception is on\n+Unix-based platforms when configuring such that the build artifacts will\n+reference a system installed library, rather than bundling the JDK's own\n+copy.<\/p>\n@@ -327,4 +661,8 @@\n-<li>To install on an apt-based Linux, try running <code>sudo apt-get install libfreetype6-dev<\/code>.<\/li>\n-<li>To install on an rpm-based Linux, try running <code>sudo yum install freetype-devel<\/code>.<\/li>\n-<li>To install on Alpine Linux, try running <code>sudo apk add freetype-dev<\/code>.<\/li>\n-<li>To install on macOS, try running <code>brew install freetype<\/code>.<\/li>\n+<li>To install on an apt-based Linux, try running\n+<code>sudo apt-get install     libfreetype6-dev<\/code>.<\/li>\n+<li>To install on an rpm-based Linux, try running\n+<code>sudo yum install     freetype-devel<\/code>.<\/li>\n+<li>To install on Alpine Linux, try running\n+<code>sudo apk add freetype-dev<\/code>.<\/li>\n+<li>To install on macOS, try running\n+<code>brew install freetype<\/code>.<\/li>\n@@ -332,1 +670,3 @@\n-<p>Use <code>--with-freetype-include=&lt;path&gt;<\/code> and <code>--with-freetype-lib=&lt;path&gt;<\/code> if <code>configure<\/code> does not automatically locate the platform FreeType files.<\/p>\n+<p>Use <code>--with-freetype-include=&lt;path&gt;<\/code> and\n+<code>--with-freetype-lib=&lt;path&gt;<\/code> if <code>configure<\/code>\n+does not automatically locate the platform FreeType files.<\/p>\n@@ -334,1 +674,3 @@\n-<p>CUPS, <a href=\"http:\/\/www.cups.org\">Common UNIX Printing System<\/a> header files are required on all platforms, except Windows. Often these files are provided by your operating system.<\/p>\n+<p>CUPS, <a href=\"http:\/\/www.cups.org\">Common UNIX Printing System<\/a>\n+header files are required on all platforms, except Windows. Often these\n+files are provided by your operating system.<\/p>\n@@ -336,3 +678,6 @@\n-<li>To install on an apt-based Linux, try running <code>sudo apt-get install libcups2-dev<\/code>.<\/li>\n-<li>To install on an rpm-based Linux, try running <code>sudo yum install cups-devel<\/code>.<\/li>\n-<li>To install on Alpine Linux, try running <code>sudo apk add cups-dev<\/code>.<\/li>\n+<li>To install on an apt-based Linux, try running\n+<code>sudo apt-get install     libcups2-dev<\/code>.<\/li>\n+<li>To install on an rpm-based Linux, try running\n+<code>sudo yum install     cups-devel<\/code>.<\/li>\n+<li>To install on Alpine Linux, try running\n+<code>sudo apk add cups-dev<\/code>.<\/li>\n@@ -340,1 +685,2 @@\n-<p>Use <code>--with-cups=&lt;path&gt;<\/code> if <code>configure<\/code> does not properly locate your CUPS files.<\/p>\n+<p>Use <code>--with-cups=&lt;path&gt;<\/code> if <code>configure<\/code>\n+does not properly locate your CUPS files.<\/p>\n@@ -342,1 +688,2 @@\n-<p>Certain <a href=\"http:\/\/www.x.org\/\">X11<\/a> libraries and include files are required on Linux.<\/p>\n+<p>Certain <a href=\"http:\/\/www.x.org\/\">X11<\/a> libraries and include\n+files are required on Linux.<\/p>\n@@ -344,3 +691,6 @@\n-<li>To install on an apt-based Linux, try running <code>sudo apt-get install libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev<\/code>.<\/li>\n-<li>To install on an rpm-based Linux, try running <code>sudo yum install libXtst-devel libXt-devel libXrender-devel libXrandr-devel libXi-devel<\/code>.<\/li>\n-<li>To install on Alpine Linux, try running <code>sudo apk add libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev<\/code>.<\/li>\n+<li>To install on an apt-based Linux, try running\n+<code>sudo apt-get install     libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev<\/code>.<\/li>\n+<li>To install on an rpm-based Linux, try running\n+<code>sudo yum install     libXtst-devel libXt-devel libXrender-devel libXrandr-devel libXi-devel<\/code>.<\/li>\n+<li>To install on Alpine Linux, try running\n+<code>sudo apk add libx11-dev     libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev<\/code>.<\/li>\n@@ -348,1 +698,2 @@\n-<p>Use <code>--with-x=&lt;path&gt;<\/code> if <code>configure<\/code> does not properly locate your X11 files.<\/p>\n+<p>Use <code>--with-x=&lt;path&gt;<\/code> if <code>configure<\/code> does\n+not properly locate your X11 files.<\/p>\n@@ -350,1 +701,3 @@\n-<p>ALSA, <a href=\"https:\/\/www.alsa-project.org\/\">Advanced Linux Sound Architecture<\/a> is required on Linux. At least version 0.9.1 of ALSA is required.<\/p>\n+<p>ALSA, <a href=\"https:\/\/www.alsa-project.org\/\">Advanced Linux Sound\n+Architecture<\/a> is required on Linux. At least version 0.9.1 of ALSA is\n+required.<\/p>\n@@ -352,3 +705,6 @@\n-<li>To install on an apt-based Linux, try running <code>sudo apt-get install libasound2-dev<\/code>.<\/li>\n-<li>To install on an rpm-based Linux, try running <code>sudo yum install alsa-lib-devel<\/code>.<\/li>\n-<li>To install on Alpine Linux, try running <code>sudo apk add alsa-lib-dev<\/code>.<\/li>\n+<li>To install on an apt-based Linux, try running\n+<code>sudo apt-get install     libasound2-dev<\/code>.<\/li>\n+<li>To install on an rpm-based Linux, try running\n+<code>sudo yum install     alsa-lib-devel<\/code>.<\/li>\n+<li>To install on Alpine Linux, try running\n+<code>sudo apk add alsa-lib-dev<\/code>.<\/li>\n@@ -356,1 +712,2 @@\n-<p>Use <code>--with-alsa=&lt;path&gt;<\/code> if <code>configure<\/code> does not properly locate your ALSA files.<\/p>\n+<p>Use <code>--with-alsa=&lt;path&gt;<\/code> if <code>configure<\/code>\n+does not properly locate your ALSA files.<\/p>\n@@ -358,1 +715,3 @@\n-<p>libffi, the <a href=\"http:\/\/sourceware.org\/libffi\">Portable Foreign Function Interface Library<\/a> is required when building the Zero version of Hotspot.<\/p>\n+<p>libffi, the <a href=\"http:\/\/sourceware.org\/libffi\">Portable Foreign\n+Function Interface Library<\/a> is required when building the Zero\n+version of Hotspot.<\/p>\n@@ -360,3 +719,6 @@\n-<li>To install on an apt-based Linux, try running <code>sudo apt-get install libffi-dev<\/code>.<\/li>\n-<li>To install on an rpm-based Linux, try running <code>sudo yum install libffi-devel<\/code>.<\/li>\n-<li>To install on Alpine Linux, try running <code>sudo apk add libffi-dev<\/code>.<\/li>\n+<li>To install on an apt-based Linux, try running\n+<code>sudo apt-get install     libffi-dev<\/code>.<\/li>\n+<li>To install on an rpm-based Linux, try running\n+<code>sudo yum install     libffi-devel<\/code>.<\/li>\n+<li>To install on Alpine Linux, try running\n+<code>sudo apk add libffi-dev<\/code>.<\/li>\n@@ -364,1 +726,2 @@\n-<p>Use <code>--with-libffi=&lt;path&gt;<\/code> if <code>configure<\/code> does not properly locate your libffi files.<\/p>\n+<p>Use <code>--with-libffi=&lt;path&gt;<\/code> if <code>configure<\/code>\n+does not properly locate your libffi files.<\/p>\n@@ -367,1 +730,3 @@\n-<p>The JDK requires <a href=\"http:\/\/www.gnu.org\/software\/autoconf\">Autoconf<\/a> on all platforms. At least version 2.69 is required.<\/p>\n+<p>The JDK requires <a\n+href=\"http:\/\/www.gnu.org\/software\/autoconf\">Autoconf<\/a> on all\n+platforms. At least version 2.69 is required.<\/p>\n@@ -369,5 +734,10 @@\n-<li>To install on an apt-based Linux, try running <code>sudo apt-get install autoconf<\/code>.<\/li>\n-<li>To install on an rpm-based Linux, try running <code>sudo yum install autoconf<\/code>.<\/li>\n-<li>To install on Alpine Linux, try running <code>sudo apk add autoconf<\/code>.<\/li>\n-<li>To install on macOS, try running <code>brew install autoconf<\/code>.<\/li>\n-<li>To install on Windows, try running <code>&lt;path to Cygwin setup&gt;\/setup-x86_64 -q -P autoconf<\/code>.<\/li>\n+<li>To install on an apt-based Linux, try running\n+<code>sudo apt-get install     autoconf<\/code>.<\/li>\n+<li>To install on an rpm-based Linux, try running\n+<code>sudo yum install     autoconf<\/code>.<\/li>\n+<li>To install on Alpine Linux, try running\n+<code>sudo apk add autoconf<\/code>.<\/li>\n+<li>To install on macOS, try running\n+<code>brew install autoconf<\/code>.<\/li>\n+<li>To install on Windows, try running\n+<code>&lt;path to Cygwin setup&gt;\/setup-x86_64 -q     -P autoconf<\/code>.<\/li>\n@@ -375,1 +745,3 @@\n-<p>If <code>configure<\/code> has problems locating your installation of autoconf, you can specify it using the <code>AUTOCONF<\/code> environment variable, like this:<\/p>\n+<p>If <code>configure<\/code> has problems locating your installation of\n+autoconf, you can specify it using the <code>AUTOCONF<\/code> environment\n+variable, like this:<\/p>\n@@ -378,4 +750,20 @@\n-<p>The JDK requires <a href=\"http:\/\/www.gnu.org\/software\/make\">GNU Make<\/a>. No other flavors of make are supported.<\/p>\n-<p>At least version 3.81 of GNU Make must be used. For distributions supporting GNU Make 4.0 or above, we strongly recommend it. GNU Make 4.0 contains useful functionality to handle parallel building (supported by <code>--with-output-sync<\/code>) and speed and stability improvements.<\/p>\n-<p>Note that <code>configure<\/code> locates and verifies a properly functioning version of <code>make<\/code> and stores the path to this <code>make<\/code> binary in the configuration. If you start a build using <code>make<\/code> on the command line, you will be using the version of make found first in your <code>PATH<\/code>, and not necessarily the one stored in the configuration. This initial make will be used as &quot;bootstrap make&quot;, and in a second stage, the make located by <code>configure<\/code> will be called. Normally, this will present no issues, but if you have a very old <code>make<\/code>, or a non-GNU Make <code>make<\/code> in your path, this might cause issues.<\/p>\n-<p>If you want to override the default make found by <code>configure<\/code>, use the <code>MAKE<\/code> configure variable, e.g. <code>configure MAKE=\/opt\/gnu\/make<\/code>.<\/p>\n+<p>The JDK requires <a href=\"http:\/\/www.gnu.org\/software\/make\">GNU\n+Make<\/a>. No other flavors of make are supported.<\/p>\n+<p>At least version 3.81 of GNU Make must be used. For distributions\n+supporting GNU Make 4.0 or above, we strongly recommend it. GNU Make 4.0\n+contains useful functionality to handle parallel building (supported by\n+<code>--with-output-sync<\/code>) and speed and stability\n+improvements.<\/p>\n+<p>Note that <code>configure<\/code> locates and verifies a properly\n+functioning version of <code>make<\/code> and stores the path to this\n+<code>make<\/code> binary in the configuration. If you start a build\n+using <code>make<\/code> on the command line, you will be using the\n+version of make found first in your <code>PATH<\/code>, and not\n+necessarily the one stored in the configuration. This initial make will\n+be used as \"bootstrap make\", and in a second stage, the make located by\n+<code>configure<\/code> will be called. Normally, this will present no\n+issues, but if you have a very old <code>make<\/code>, or a non-GNU Make\n+<code>make<\/code> in your path, this might cause issues.<\/p>\n+<p>If you want to override the default make found by\n+<code>configure<\/code>, use the <code>MAKE<\/code> configure variable,\n+e.g. <code>configure MAKE=\/opt\/gnu\/make<\/code>.<\/p>\n@@ -383,1 +771,2 @@\n-<p>The JDK requires <a href=\"http:\/\/www.gnu.org\/software\/bash\">GNU Bash<\/a>. No other shells are supported.<\/p>\n+<p>The JDK requires <a href=\"http:\/\/www.gnu.org\/software\/bash\">GNU\n+Bash<\/a>. No other shells are supported.<\/p>\n@@ -386,2 +775,7 @@\n-<p>To build the JDK, you need a &quot;configuration&quot;, which consists of a directory where to store the build output, coupled with information about the platform, the specific build machine, and choices that affect how the JDK is built.<\/p>\n-<p>The configuration is created by the <code>configure<\/code> script. The basic invocation of the <code>configure<\/code> script looks like this:<\/p>\n+<p>To build the JDK, you need a \"configuration\", which consists of a\n+directory where to store the build output, coupled with information\n+about the platform, the specific build machine, and choices that affect\n+how the JDK is built.<\/p>\n+<p>The configuration is created by the <code>configure<\/code> script.\n+The basic invocation of the <code>configure<\/code> script looks like\n+this:<\/p>\n@@ -389,2 +783,12 @@\n-<p>This will create an output directory containing the configuration and setup an area for the build result. This directory typically looks like <code>build\/linux-x64-server-release<\/code>, but the actual name depends on your specific configuration. (It can also be set directly, see <a href=\"#using-multiple-configurations\">Using Multiple Configurations<\/a>). This directory is referred to as <code>$BUILD<\/code> in this documentation.<\/p>\n-<p><code>configure<\/code> will try to figure out what system you are running on and where all necessary build components are. If you have all prerequisites for building installed, it should find everything. If it fails to detect any component automatically, it will exit and inform you about the problem.<\/p>\n+<p>This will create an output directory containing the configuration and\n+setup an area for the build result. This directory typically looks like\n+<code>build\/linux-x64-server-release<\/code>, but the actual name depends\n+on your specific configuration. (It can also be set directly, see <a\n+href=\"#using-multiple-configurations\">Using Multiple\n+Configurations<\/a>). This directory is referred to as\n+<code>$BUILD<\/code> in this documentation.<\/p>\n+<p><code>configure<\/code> will try to figure out what system you are\n+running on and where all necessary build components are. If you have all\n+prerequisites for building installed, it should find everything. If it\n+fails to detect any component automatically, it will exit and inform you\n+about the problem.<\/p>\n@@ -393,4 +797,6 @@\n-<li><p>Create a 32-bit build for Windows with FreeType2 in <code>C:\\freetype-i586<\/code>:<\/p>\n-<pre><code>bash configure --with-freetype=\/cygdrive\/c\/freetype-i586 --with-target-bits=32<\/code><\/pre><\/li>\n-<li><p>Create a debug build with the <code>server<\/code> JVM and DTrace enabled:<\/p>\n-<pre><code>bash configure --enable-debug --with-jvm-variants=server --enable-dtrace<\/code><\/pre><\/li>\n+<li><p>Create a 32-bit build for Windows with FreeType2 in\n+<code>C:\\freetype-i586<\/code>:\n+<code>bash configure --with-freetype=\/cygdrive\/c\/freetype-i586 --with-target-bits=32<\/code><\/p><\/li>\n+<li><p>Create a debug build with the <code>server<\/code> JVM and DTrace\n+enabled:\n+<code>bash configure --enable-debug --with-jvm-variants=server --enable-dtrace<\/code><\/p><\/li>\n@@ -399,2 +805,4 @@\n-<p>Here follows some of the most common and important <code>configure<\/code> argument.<\/p>\n-<p>To get up-to-date information on <em>all<\/em> available <code>configure<\/code> argument, please run:<\/p>\n+<p>Here follows some of the most common and important\n+<code>configure<\/code> argument.<\/p>\n+<p>To get up-to-date information on <em>all<\/em> available\n+<code>configure<\/code> argument, please run:<\/p>\n@@ -402,2 +810,6 @@\n-<p>(Note that this help text also include general autoconf options, like <code>--dvidir<\/code>, that is not relevant to the JDK. To list only JDK-specific features, use <code>bash configure --help=short<\/code> instead.)<\/p>\n-<h4 id=\"configure-arguments-for-tailoring-the-build\">Configure Arguments for Tailoring the Build<\/h4>\n+<p>(Note that this help text also include general autoconf options, like\n+<code>--dvidir<\/code>, that is not relevant to the JDK. To list only\n+JDK-specific features, use <code>bash configure --help=short<\/code>\n+instead.)<\/p>\n+<h4 id=\"configure-arguments-for-tailoring-the-build\">Configure Arguments\n+for Tailoring the Build<\/h4>\n@@ -405,8 +817,44 @@\n-<li><code>--enable-debug<\/code> - Set the debug level to <code>fastdebug<\/code> (this is a shorthand for <code>--with-debug-level=fastdebug<\/code>)<\/li>\n-<li><code>--with-debug-level=&lt;level&gt;<\/code> - Set the debug level, which can be <code>release<\/code>, <code>fastdebug<\/code>, <code>slowdebug<\/code> or <code>optimized<\/code>. Default is <code>release<\/code>. <code>optimized<\/code> is variant of <code>release<\/code> with additional Hotspot debug code.<\/li>\n-<li><code>--with-native-debug-symbols=&lt;method&gt;<\/code> - Specify if and how native debug symbols should be built. Available methods are <code>none<\/code>, <code>internal<\/code>, <code>external<\/code>, <code>zipped<\/code>. Default behavior depends on platform. See <a href=\"#native-debug-symbols\">Native Debug Symbols<\/a> for more details.<\/li>\n-<li><code>--with-version-string=&lt;string&gt;<\/code> - Specify the version string this build will be identified with.<\/li>\n-<li><code>--with-version-&lt;part&gt;=&lt;value&gt;<\/code> - A group of options, where <code>&lt;part&gt;<\/code> can be any of <code>pre<\/code>, <code>opt<\/code>, <code>build<\/code>, <code>major<\/code>, <code>minor<\/code>, <code>security<\/code> or <code>patch<\/code>. Use these options to modify just the corresponding part of the version string from the default, or the value provided by <code>--with-version-string<\/code>.<\/li>\n-<li><code>--with-jvm-variants=&lt;variant&gt;[,&lt;variant&gt;...]<\/code> - Build the specified variant (or variants) of Hotspot. Valid variants are: <code>server<\/code>, <code>client<\/code>, <code>minimal<\/code>, <code>core<\/code>, <code>zero<\/code>, <code>custom<\/code>. Note that not all variants are possible to combine in a single build.<\/li>\n-<li><code>--enable-jvm-feature-&lt;feature&gt;<\/code> or <code>--disable-jvm-feature-&lt;feature&gt;<\/code> - Include (or exclude) <code>&lt;feature&gt;<\/code> as a JVM feature in Hotspot. You can also specify a list of features to be enabled, separated by space or comma, as <code>--with-jvm-features=&lt;feature&gt;[,&lt;feature&gt;...]<\/code>. If you prefix <code>&lt;feature&gt;<\/code> with a <code>-<\/code>, it will be disabled. These options will modify the default list of features for the JVM variant(s) you are building. For the <code>custom<\/code> JVM variant, the default list is empty. A complete list of valid JVM features can be found using <code>bash configure --help<\/code>.<\/li>\n-<li><code>--with-target-bits=&lt;bits&gt;<\/code> - Create a target binary suitable for running on a <code>&lt;bits&gt;<\/code> platform. Use this to create 32-bit output on a 64-bit build platform, instead of doing a full cross-compile. (This is known as a <em>reduced<\/em> build.)<\/li>\n+<li><code>--enable-debug<\/code> - Set the debug level to\n+<code>fastdebug<\/code> (this is a shorthand for\n+<code>--with-debug-level=fastdebug<\/code>)<\/li>\n+<li><code>--with-debug-level=&lt;level&gt;<\/code> - Set the debug level,\n+which can be <code>release<\/code>, <code>fastdebug<\/code>,\n+<code>slowdebug<\/code> or <code>optimized<\/code>. Default is\n+<code>release<\/code>. <code>optimized<\/code> is variant of\n+<code>release<\/code> with additional Hotspot debug code.<\/li>\n+<li><code>--with-native-debug-symbols=&lt;method&gt;<\/code> - Specify if\n+and how native debug symbols should be built. Available methods are\n+<code>none<\/code>, <code>internal<\/code>, <code>external<\/code>,\n+<code>zipped<\/code>. Default behavior depends on platform. See <a\n+href=\"#native-debug-symbols\">Native Debug Symbols<\/a> for more\n+details.<\/li>\n+<li><code>--with-version-string=&lt;string&gt;<\/code> - Specify the\n+version string this build will be identified with.<\/li>\n+<li><code>--with-version-&lt;part&gt;=&lt;value&gt;<\/code> - A group of\n+options, where <code>&lt;part&gt;<\/code> can be any of <code>pre<\/code>,\n+<code>opt<\/code>, <code>build<\/code>, <code>major<\/code>,\n+<code>minor<\/code>, <code>security<\/code> or <code>patch<\/code>. Use\n+these options to modify just the corresponding part of the version\n+string from the default, or the value provided by\n+<code>--with-version-string<\/code>.<\/li>\n+<li><code>--with-jvm-variants=&lt;variant&gt;[,&lt;variant&gt;...]<\/code>\n+- Build the specified variant (or variants) of Hotspot. Valid variants\n+are: <code>server<\/code>, <code>client<\/code>, <code>minimal<\/code>,\n+<code>core<\/code>, <code>zero<\/code>, <code>custom<\/code>. Note that not\n+all variants are possible to combine in a single build.<\/li>\n+<li><code>--enable-jvm-feature-&lt;feature&gt;<\/code> or\n+<code>--disable-jvm-feature-&lt;feature&gt;<\/code> - Include (or\n+exclude) <code>&lt;feature&gt;<\/code> as a JVM feature in Hotspot. You\n+can also specify a list of features to be enabled, separated by space or\n+comma, as\n+<code>--with-jvm-features=&lt;feature&gt;[,&lt;feature&gt;...]<\/code>.\n+If you prefix <code>&lt;feature&gt;<\/code> with a <code>-<\/code>, it\n+will be disabled. These options will modify the default list of features\n+for the JVM variant(s) you are building. For the <code>custom<\/code> JVM\n+variant, the default list is empty. A complete list of valid JVM\n+features can be found using <code>bash configure --help<\/code>.<\/li>\n+<li><code>--with-target-bits=&lt;bits&gt;<\/code> - Create a target\n+binary suitable for running on a <code>&lt;bits&gt;<\/code> platform. Use\n+this to create 32-bit output on a 64-bit build platform, instead of\n+doing a full cross-compile. (This is known as a <em>reduced<\/em>\n+build.)<\/li>\n@@ -414,1 +862,5 @@\n-<p>On Linux, BSD and AIX, it is possible to override where Java by default searches for runtime\/JNI libraries. This can be useful in situations where there is a special shared directory for system JNI libraries. This setting can in turn be overridden at runtime by setting the <code>java.library.path<\/code> property.<\/p>\n+<p>On Linux, BSD and AIX, it is possible to override where Java by\n+default searches for runtime\/JNI libraries. This can be useful in\n+situations where there is a special shared directory for system JNI\n+libraries. This setting can in turn be overridden at runtime by setting\n+the <code>java.library.path<\/code> property.<\/p>\n@@ -416,1 +868,2 @@\n-<li><code>--with-jni-libpath=&lt;path&gt;<\/code> - Use the specified path as a default when searching for runtime libraries.<\/li>\n+<li><code>--with-jni-libpath=&lt;path&gt;<\/code> - Use the specified\n+path as a default when searching for runtime libraries.<\/li>\n@@ -418,1 +871,2 @@\n-<h4 id=\"configure-arguments-for-native-compilation\">Configure Arguments for Native Compilation<\/h4>\n+<h4 id=\"configure-arguments-for-native-compilation\">Configure Arguments\n+for Native Compilation<\/h4>\n@@ -420,7 +874,16 @@\n-<li><code>--with-devkit=&lt;path&gt;<\/code> - Use this devkit for compilers, tools and resources<\/li>\n-<li><code>--with-sysroot=&lt;path&gt;<\/code> - Use this directory as sysroot<\/li>\n-<li><code>--with-extra-path=&lt;path&gt;[;&lt;path&gt;]<\/code> - Prepend these directories to the default path when searching for all kinds of binaries<\/li>\n-<li><code>--with-toolchain-path=&lt;path&gt;[;&lt;path&gt;]<\/code> - Prepend these directories when searching for toolchain binaries (compilers etc)<\/li>\n-<li><code>--with-extra-cflags=&lt;flags&gt;<\/code> - Append these flags when compiling JDK C files<\/li>\n-<li><code>--with-extra-cxxflags=&lt;flags&gt;<\/code> - Append these flags when compiling JDK C++ files<\/li>\n-<li><code>--with-extra-ldflags=&lt;flags&gt;<\/code> - Append these flags when linking JDK libraries<\/li>\n+<li><code>--with-devkit=&lt;path&gt;<\/code> - Use this devkit for\n+compilers, tools and resources<\/li>\n+<li><code>--with-sysroot=&lt;path&gt;<\/code> - Use this directory as\n+sysroot<\/li>\n+<li><code>--with-extra-path=&lt;path&gt;[;&lt;path&gt;]<\/code> - Prepend\n+these directories to the default path when searching for all kinds of\n+binaries<\/li>\n+<li><code>--with-toolchain-path=&lt;path&gt;[;&lt;path&gt;]<\/code> -\n+Prepend these directories when searching for toolchain binaries\n+(compilers etc)<\/li>\n+<li><code>--with-extra-cflags=&lt;flags&gt;<\/code> - Append these flags\n+when compiling JDK C files<\/li>\n+<li><code>--with-extra-cxxflags=&lt;flags&gt;<\/code> - Append these\n+flags when compiling JDK C++ files<\/li>\n+<li><code>--with-extra-ldflags=&lt;flags&gt;<\/code> - Append these flags\n+when linking JDK libraries<\/li>\n@@ -428,1 +891,2 @@\n-<h4 id=\"configure-arguments-for-external-dependencies\">Configure Arguments for External Dependencies<\/h4>\n+<h4 id=\"configure-arguments-for-external-dependencies\">Configure\n+Arguments for External Dependencies<\/h4>\n@@ -430,7 +894,14 @@\n-<li><code>--with-boot-jdk=&lt;path&gt;<\/code> - Set the path to the <a href=\"#boot-jdk-requirements\">Boot JDK<\/a><\/li>\n-<li><code>--with-freetype=&lt;path&gt;<\/code> - Set the path to <a href=\"#freetype\">FreeType<\/a><\/li>\n-<li><code>--with-cups=&lt;path&gt;<\/code> - Set the path to <a href=\"#cups\">CUPS<\/a><\/li>\n-<li><code>--with-x=&lt;path&gt;<\/code> - Set the path to <a href=\"#x11\">X11<\/a><\/li>\n-<li><code>--with-alsa=&lt;path&gt;<\/code> - Set the path to <a href=\"#alsa\">ALSA<\/a><\/li>\n-<li><code>--with-libffi=&lt;path&gt;<\/code> - Set the path to <a href=\"#libffi\">libffi<\/a><\/li>\n-<li><code>--with-jtreg=&lt;path&gt;<\/code> - Set the path to JTReg. See <a href=\"#running-tests\">Running Tests<\/a><\/li>\n+<li><code>--with-boot-jdk=&lt;path&gt;<\/code> - Set the path to the <a\n+href=\"#boot-jdk-requirements\">Boot JDK<\/a><\/li>\n+<li><code>--with-freetype=&lt;path&gt;<\/code> - Set the path to <a\n+href=\"#freetype\">FreeType<\/a><\/li>\n+<li><code>--with-cups=&lt;path&gt;<\/code> - Set the path to <a\n+href=\"#cups\">CUPS<\/a><\/li>\n+<li><code>--with-x=&lt;path&gt;<\/code> - Set the path to <a\n+href=\"#x11\">X11<\/a><\/li>\n+<li><code>--with-alsa=&lt;path&gt;<\/code> - Set the path to <a\n+href=\"#alsa\">ALSA<\/a><\/li>\n+<li><code>--with-libffi=&lt;path&gt;<\/code> - Set the path to <a\n+href=\"#libffi\">libffi<\/a><\/li>\n+<li><code>--with-jtreg=&lt;path&gt;<\/code> - Set the path to JTReg. See\n+<a href=\"#running-tests\">Running Tests<\/a><\/li>\n@@ -438,1 +909,8 @@\n-<p>Certain third-party libraries used by the JDK (libjpeg, giflib, libpng, lcms and zlib) are included in the JDK repository. The default behavior of the JDK build is to use the included (&quot;bundled&quot;) versions of libjpeg, giflib, libpng and lcms. For zlib, the system lib (if present) is used except on Windows and AIX. However the bundled libraries may be replaced by an external version. To do so, specify <code>system<\/code> as the <code>&lt;source&gt;<\/code> option in these arguments. (The default is <code>bundled<\/code>).<\/p>\n+<p>Certain third-party libraries used by the JDK (libjpeg, giflib,\n+libpng, lcms and zlib) are included in the JDK repository. The default\n+behavior of the JDK build is to use the included (\"bundled\") versions of\n+libjpeg, giflib, libpng and lcms. For zlib, the system lib (if present)\n+is used except on Windows and AIX. However the bundled libraries may be\n+replaced by an external version. To do so, specify <code>system<\/code>\n+as the <code>&lt;source&gt;<\/code> option in these arguments. (The\n+default is <code>bundled<\/code>).<\/p>\n@@ -440,5 +918,10 @@\n-<li><code>--with-libjpeg=&lt;source&gt;<\/code> - Use the specified source for libjpeg<\/li>\n-<li><code>--with-giflib=&lt;source&gt;<\/code> - Use the specified source for giflib<\/li>\n-<li><code>--with-libpng=&lt;source&gt;<\/code> - Use the specified source for libpng<\/li>\n-<li><code>--with-lcms=&lt;source&gt;<\/code> - Use the specified source for lcms<\/li>\n-<li><code>--with-zlib=&lt;source&gt;<\/code> - Use the specified source for zlib<\/li>\n+<li><code>--with-libjpeg=&lt;source&gt;<\/code> - Use the specified\n+source for libjpeg<\/li>\n+<li><code>--with-giflib=&lt;source&gt;<\/code> - Use the specified source\n+for giflib<\/li>\n+<li><code>--with-libpng=&lt;source&gt;<\/code> - Use the specified source\n+for libpng<\/li>\n+<li><code>--with-lcms=&lt;source&gt;<\/code> - Use the specified source\n+for lcms<\/li>\n+<li><code>--with-zlib=&lt;source&gt;<\/code> - Use the specified source\n+for zlib<\/li>\n@@ -446,1 +929,3 @@\n-<p>On Linux, it is possible to select either static or dynamic linking of the C++ runtime. The default is static linking, with dynamic linking as fallback if the static library is not found.<\/p>\n+<p>On Linux, it is possible to select either static or dynamic linking\n+of the C++ runtime. The default is static linking, with dynamic linking\n+as fallback if the static library is not found.<\/p>\n@@ -448,1 +933,3 @@\n-<li><code>--with-stdc++lib=&lt;method&gt;<\/code> - Use the specified method (<code>static<\/code>, <code>dynamic<\/code> or <code>default<\/code>) for linking the C++ runtime.<\/li>\n+<li><code>--with-stdc++lib=&lt;method&gt;<\/code> - Use the specified\n+method (<code>static<\/code>, <code>dynamic<\/code> or\n+<code>default<\/code>) for linking the C++ runtime.<\/li>\n@@ -451,5 +938,20 @@\n-<p>It is possible to control certain aspects of <code>configure<\/code> by overriding the value of <code>configure<\/code> variables, either on the command line or in the environment.<\/p>\n-<p>Normally, this is <strong>not recommended<\/strong>. If used improperly, it can lead to a broken configuration. Unless you're well versed in the build system, this is hard to use properly. Therefore, <code>configure<\/code> will print a warning if this is detected.<\/p>\n-<p>However, there are a few <code>configure<\/code> variables, known as <em>control variables<\/em> that are supposed to be overridden on the command line. These are variables that describe the location of tools needed by the build, like <code>MAKE<\/code> or <code>GREP<\/code>. If any such variable is specified, <code>configure<\/code> will use that value instead of trying to autodetect the tool. For instance, <code>bash configure MAKE=\/opt\/gnumake4.0\/bin\/make<\/code>.<\/p>\n-<p>If a configure argument exists, use that instead, e.g. use <code>--with-jtreg<\/code> instead of setting <code>JTREGEXE<\/code>.<\/p>\n-<p>Also note that, despite what autoconf claims, setting <code>CFLAGS<\/code> will not accomplish anything. Instead use <code>--with-extra-cflags<\/code> (and similar for <code>cxxflags<\/code> and <code>ldflags<\/code>).<\/p>\n+<p>It is possible to control certain aspects of <code>configure<\/code>\n+by overriding the value of <code>configure<\/code> variables, either on\n+the command line or in the environment.<\/p>\n+<p>Normally, this is <strong>not recommended<\/strong>. If used\n+improperly, it can lead to a broken configuration. Unless you're well\n+versed in the build system, this is hard to use properly. Therefore,\n+<code>configure<\/code> will print a warning if this is detected.<\/p>\n+<p>However, there are a few <code>configure<\/code> variables, known as\n+<em>control variables<\/em> that are supposed to be overridden on the\n+command line. These are variables that describe the location of tools\n+needed by the build, like <code>MAKE<\/code> or <code>GREP<\/code>. If any\n+such variable is specified, <code>configure<\/code> will use that value\n+instead of trying to autodetect the tool. For instance,\n+<code>bash configure MAKE=\/opt\/gnumake4.0\/bin\/make<\/code>.<\/p>\n+<p>If a configure argument exists, use that instead, e.g. use\n+<code>--with-jtreg<\/code> instead of setting <code>JTREGEXE<\/code>.<\/p>\n+<p>Also note that, despite what autoconf claims, setting\n+<code>CFLAGS<\/code> will not accomplish anything. Instead use\n+<code>--with-extra-cflags<\/code> (and similar for <code>cxxflags<\/code>\n+and <code>ldflags<\/code>).<\/p>\n@@ -457,3 +959,16 @@\n-<p>When you have a proper configuration, all you need to do to build the JDK is to run <code>make<\/code>. (But see the warning at <a href=\"#gnu-make\">GNU Make<\/a> about running the correct version of make.)<\/p>\n-<p>When running <code>make<\/code> without any arguments, the default target is used, which is the same as running <code>make default<\/code> or <code>make jdk<\/code>. This will build a minimal (or roughly minimal) set of compiled output (known as an &quot;exploded image&quot;) needed for a developer to actually execute the newly built JDK. The idea is that in an incremental development fashion, when doing a normal make, you should only spend time recompiling what's changed (making it purely incremental) and only do the work that's needed to actually run and test your code.<\/p>\n-<p>The output of the exploded image resides in <code>$BUILD\/jdk<\/code>. You can test the newly built JDK like this: <code>$BUILD\/jdk\/bin\/java -version<\/code>.<\/p>\n+<p>When you have a proper configuration, all you need to do to build the\n+JDK is to run <code>make<\/code>. (But see the warning at <a\n+href=\"#gnu-make\">GNU Make<\/a> about running the correct version of\n+make.)<\/p>\n+<p>When running <code>make<\/code> without any arguments, the default\n+target is used, which is the same as running <code>make default<\/code>\n+or <code>make jdk<\/code>. This will build a minimal (or roughly minimal)\n+set of compiled output (known as an \"exploded image\") needed for a\n+developer to actually execute the newly built JDK. The idea is that in\n+an incremental development fashion, when doing a normal make, you should\n+only spend time recompiling what's changed (making it purely\n+incremental) and only do the work that's needed to actually run and test\n+your code.<\/p>\n+<p>The output of the exploded image resides in <code>$BUILD\/jdk<\/code>.\n+You can test the newly built JDK like this:\n+<code>$BUILD\/jdk\/bin\/java -version<\/code>.<\/p>\n@@ -464,3 +979,6 @@\n-<li><code>hotspot-&lt;variant&gt;<\/code> - Build just the specified jvm variant<\/li>\n-<li><code>images<\/code> or <code>product-images<\/code> - Build the JDK image<\/li>\n-<li><code>docs<\/code> or <code>docs-image<\/code> - Build the documentation image<\/li>\n+<li><code>hotspot-&lt;variant&gt;<\/code> - Build just the specified jvm\n+variant<\/li>\n+<li><code>images<\/code> or <code>product-images<\/code> - Build the JDK\n+image<\/li>\n+<li><code>docs<\/code> or <code>docs-image<\/code> - Build the\n+documentation image<\/li>\n@@ -468,4 +986,8 @@\n-<li><code>all<\/code> or <code>all-images<\/code> - Build all images (product, docs and test)<\/li>\n-<li><code>bootcycle-images<\/code> - Build images twice, second time with newly built JDK (good for testing)<\/li>\n-<li><code>clean<\/code> - Remove all files generated by make, but not those generated by configure<\/li>\n-<li><code>dist-clean<\/code> - Remove all files, including configuration<\/li>\n+<li><code>all<\/code> or <code>all-images<\/code> - Build all images\n+(product, docs and test)<\/li>\n+<li><code>bootcycle-images<\/code> - Build images twice, second time with\n+newly built JDK (good for testing)<\/li>\n+<li><code>clean<\/code> - Remove all files generated by make, but not\n+those generated by configure<\/li>\n+<li><code>dist-clean<\/code> - Remove all files, including\n+configuration<\/li>\n@@ -473,2 +995,9 @@\n-<p>Run <code>make help<\/code> to get an up-to-date list of important make targets and make control variables.<\/p>\n-<p>It is possible to build just a single module, a single phase, or a single phase of a single module, by creating make targets according to these followin patterns. A phase can be either of <code>gensrc<\/code>, <code>gendata<\/code>, <code>copy<\/code>, <code>java<\/code>, <code>launchers<\/code>, or <code>libs<\/code>. See <a href=\"#using-fine-grained-make-targets\">Using Fine-Grained Make Targets<\/a> for more details about this functionality.<\/p>\n+<p>Run <code>make help<\/code> to get an up-to-date list of important\n+make targets and make control variables.<\/p>\n+<p>It is possible to build just a single module, a single phase, or a\n+single phase of a single module, by creating make targets according to\n+these followin patterns. A phase can be either of <code>gensrc<\/code>,\n+<code>gendata<\/code>, <code>copy<\/code>, <code>java<\/code>,\n+<code>launchers<\/code>, or <code>libs<\/code>. See <a\n+href=\"#using-fine-grained-make-targets\">Using Fine-Grained Make\n+Targets<\/a> for more details about this functionality.<\/p>\n@@ -476,3 +1005,6 @@\n-<li><code>&lt;phase&gt;<\/code> - Build the specified phase and everything it depends on<\/li>\n-<li><code>&lt;module&gt;<\/code> - Build the specified module and everything it depends on<\/li>\n-<li><code>&lt;module&gt;-&lt;phase&gt;<\/code> - Compile the specified phase for the specified module and everything it depends on<\/li>\n+<li><code>&lt;phase&gt;<\/code> - Build the specified phase and\n+everything it depends on<\/li>\n+<li><code>&lt;module&gt;<\/code> - Build the specified module and\n+everything it depends on<\/li>\n+<li><code>&lt;module&gt;-&lt;phase&gt;<\/code> - Compile the specified\n+phase for the specified module and everything it depends on<\/li>\n@@ -480,1 +1012,2 @@\n-<p>Similarly, it is possible to clean just a part of the build by creating make targets according to these patterns:<\/p>\n+<p>Similarly, it is possible to clean just a part of the build by\n+creating make targets according to these patterns:<\/p>\n@@ -482,4 +1015,8 @@\n-<li><code>clean-&lt;outputdir&gt;<\/code> - Remove the subdir in the output dir with the name<\/li>\n-<li><code>clean-&lt;phase&gt;<\/code> - Remove all build results related to a certain build phase<\/li>\n-<li><code>clean-&lt;module&gt;<\/code> - Remove all build results related to a certain module<\/li>\n-<li><code>clean-&lt;module&gt;-&lt;phase&gt;<\/code> - Remove all build results related to a certain module and phase<\/li>\n+<li><code>clean-&lt;outputdir&gt;<\/code> - Remove the subdir in the\n+output dir with the name<\/li>\n+<li><code>clean-&lt;phase&gt;<\/code> - Remove all build results related\n+to a certain build phase<\/li>\n+<li><code>clean-&lt;module&gt;<\/code> - Remove all build results related\n+to a certain module<\/li>\n+<li><code>clean-&lt;module&gt;-&lt;phase&gt;<\/code> - Remove all build\n+results related to a certain module and phase<\/li>\n@@ -488,4 +1025,13 @@\n-<p>It is possible to control <code>make<\/code> behavior by overriding the value of <code>make<\/code> variables, either on the command line or in the environment.<\/p>\n-<p>Normally, this is <strong>not recommended<\/strong>. If used improperly, it can lead to a broken build. Unless you're well versed in the build system, this is hard to use properly. Therefore, <code>make<\/code> will print a warning if this is detected.<\/p>\n-<p>However, there are a few <code>make<\/code> variables, known as <em>control variables<\/em> that are supposed to be overridden on the command line. These make up the &quot;make time&quot; configuration, as opposed to the &quot;configure time&quot; configuration.<\/p>\n-<h4 id=\"general-make-control-variables\">General Make Control Variables<\/h4>\n+<p>It is possible to control <code>make<\/code> behavior by overriding\n+the value of <code>make<\/code> variables, either on the command line or\n+in the environment.<\/p>\n+<p>Normally, this is <strong>not recommended<\/strong>. If used\n+improperly, it can lead to a broken build. Unless you're well versed in\n+the build system, this is hard to use properly. Therefore,\n+<code>make<\/code> will print a warning if this is detected.<\/p>\n+<p>However, there are a few <code>make<\/code> variables, known as\n+<em>control variables<\/em> that are supposed to be overridden on the\n+command line. These make up the \"make time\" configuration, as opposed to\n+the \"configure time\" configuration.<\/p>\n+<h4 id=\"general-make-control-variables\">General Make Control\n+Variables<\/h4>\n@@ -493,3 +1039,9 @@\n-<li><code>JOBS<\/code> - Specify the number of jobs to build with. See <a href=\"#build-performance\">Build Performance<\/a>.<\/li>\n-<li><code>LOG<\/code> - Specify the logging level and functionality. See <a href=\"#checking-the-build-log-file\">Checking the Build Log File<\/a><\/li>\n-<li><code>CONF<\/code> and <code>CONF_NAME<\/code> - Selecting the configuration(s) to use. See <a href=\"#using-multiple-configurations\">Using Multiple Configurations<\/a><\/li>\n+<li><code>JOBS<\/code> - Specify the number of jobs to build with. See <a\n+href=\"#build-performance\">Build Performance<\/a>.<\/li>\n+<li><code>LOG<\/code> - Specify the logging level and functionality. See\n+<a href=\"#checking-the-build-log-file\">Checking the Build Log\n+File<\/a><\/li>\n+<li><code>CONF<\/code> and <code>CONF_NAME<\/code> - Selecting the\n+configuration(s) to use. See <a\n+href=\"#using-multiple-configurations\">Using Multiple\n+Configurations<\/a><\/li>\n@@ -498,1 +1050,4 @@\n-<p>These make control variables only make sense when running tests. Please see <strong>Testing the JDK<\/strong> (<a href=\"testing.html\">html<\/a>, <a href=\"testing.md\">markdown<\/a>) for details.<\/p>\n+<p>These make control variables only make sense when running tests.\n+Please see <strong>Testing the JDK<\/strong> (<a\n+href=\"testing.html\">html<\/a>, <a href=\"testing.md\">markdown<\/a>) for\n+details.<\/p>\n@@ -505,2 +1060,7 @@\n-<h4 id=\"advanced-make-control-variables\">Advanced Make Control Variables<\/h4>\n-<p>These advanced make control variables can be potentially unsafe. See <a href=\"#hints-and-suggestions-for-advanced-users\">Hints and Suggestions for Advanced Users<\/a> and <a href=\"#understanding-the-build-system\">Understanding the Build System<\/a> for details.<\/p>\n+<h4 id=\"advanced-make-control-variables\">Advanced Make Control\n+Variables<\/h4>\n+<p>These advanced make control variables can be potentially unsafe. See\n+<a href=\"#hints-and-suggestions-for-advanced-users\">Hints and\n+Suggestions for Advanced Users<\/a> and <a\n+href=\"#understanding-the-build-system\">Understanding the Build\n+System<\/a> for details.<\/p>\n@@ -515,3 +1075,19 @@\n-<p>Most of the JDK tests are using the <a href=\"http:\/\/openjdk.org\/jtreg\">JTReg<\/a> test framework. Make sure that your configuration knows where to find your installation of JTReg. If this is not picked up automatically, use the <code>--with-jtreg=&lt;path to jtreg home&gt;<\/code> option to point to the JTReg framework. Note that this option should point to the JTReg home, i.e. the top directory, containing <code>lib\/jtreg.jar<\/code> etc.<\/p>\n-<p>The <a href=\"https:\/\/wiki.openjdk.org\/display\/Adoption\">Adoption Group<\/a> provides recent builds of jtreg <a href=\"https:\/\/ci.adoptopenjdk.net\/view\/Dependencies\/job\/dependency_pipeline\/lastSuccessfulBuild\/artifact\/jtreg\/\">here<\/a>. Download the latest <code>.tar.gz<\/code> file, unpack it, and point <code>--with-jtreg<\/code> to the <code>jtreg<\/code> directory that you just unpacked.<\/p>\n-<p>Building of Hotspot Gtest suite requires the source code of Google Test framework. The top directory, which contains both <code>googletest<\/code> and <code>googlemock<\/code> directories, should be specified via <code>--with-gtest<\/code>. The supported version of Google Test is 1.8.1, whose source code can be obtained:<\/p>\n+<p>Most of the JDK tests are using the <a\n+href=\"http:\/\/openjdk.org\/jtreg\">JTReg<\/a> test framework. Make sure that\n+your configuration knows where to find your installation of JTReg. If\n+this is not picked up automatically, use the\n+<code>--with-jtreg=&lt;path to jtreg home&gt;<\/code> option to point to\n+the JTReg framework. Note that this option should point to the JTReg\n+home, i.e. the top directory, containing <code>lib\/jtreg.jar<\/code>\n+etc.<\/p>\n+<p>The <a href=\"https:\/\/wiki.openjdk.org\/display\/Adoption\">Adoption\n+Group<\/a> provides recent builds of jtreg <a\n+href=\"https:\/\/ci.adoptopenjdk.net\/view\/Dependencies\/job\/dependency_pipeline\/lastSuccessfulBuild\/artifact\/jtreg\/\">here<\/a>.\n+Download the latest <code>.tar.gz<\/code> file, unpack it, and point\n+<code>--with-jtreg<\/code> to the <code>jtreg<\/code> directory that you\n+just unpacked.<\/p>\n+<p>Building of Hotspot Gtest suite requires the source code of Google\n+Test framework. The top directory, which contains both\n+<code>googletest<\/code> and <code>googlemock<\/code> directories, should\n+be specified via <code>--with-gtest<\/code>. The supported version of\n+Google Test is 1.8.1, whose source code can be obtained:<\/p>\n@@ -519,2 +1095,5 @@\n-<li>by downloading and unpacking the source bundle from <a href=\"https:\/\/github.com\/google\/googletest\/releases\/tag\/release-1.8.1\">here<\/a><\/li>\n-<li>or by checking out <code>release-1.8.1<\/code> tag of <code>googletest<\/code> project: <code>git clone -b release-1.8.1 https:\/\/github.com\/google\/googletest<\/code><\/li>\n+<li>by downloading and unpacking the source bundle from <a\n+href=\"https:\/\/github.com\/google\/googletest\/releases\/tag\/release-1.8.1\">here<\/a><\/li>\n+<li>or by checking out <code>release-1.8.1<\/code> tag of\n+<code>googletest<\/code> project:\n+<code>git clone -b release-1.8.1 https:\/\/github.com\/google\/googletest<\/code><\/li>\n@@ -524,1 +1103,3 @@\n-<p>For more details on how to run tests, please see <strong>Testing the JDK<\/strong> (<a href=\"testing.html\">html<\/a>, <a href=\"testing.md\">markdown<\/a>).<\/p>\n+<p>For more details on how to run tests, please see <strong>Testing the\n+JDK<\/strong> (<a href=\"testing.html\">html<\/a>, <a\n+href=\"testing.md\">markdown<\/a>).<\/p>\n@@ -527,4 +1108,35 @@\n-<p>Modern versions of macOS require applications to be signed and notarizied before distribution. See Apple's documentation for more background on what this means and how it works. To help support this, the JDK build can be configured to automatically sign all native binaries, and the JDK bundle, with all the options needed for successful notarization, as well as all the entitlements required by the JDK. To enable <code>hardened<\/code> signing, use configure parameter <code>--with-macosx-codesign=hardened<\/code> and configure the signing identity you wish to use with <code>--with-macosx-codesign-identity=&lt;identity&gt;<\/code>. The identity refers to a signing identity from Apple that needs to be preinstalled on the build host.<\/p>\n-<p>When not signing for distribution with the hardened option, the JDK build will still attempt to perform <code>adhoc<\/code> signing to add the special entitlement <code>com.apple.security.get-task-allow<\/code> to each binary. This entitlement is required to be able to dump core files from a process. Note that adding this entitlement makes the build invalid for notarization, so it is only added when signing in <code>debug<\/code> mode. To explicitly enable this kind of adhoc signing, use configure parameter <code>--with-macosx-codesign=debug<\/code>. It will be enabled by default in most cases.<\/p>\n-<p>It's also possible to completely disable any explicit codesign operations done by the JDK build using the configure parameter <code>--without-macosx-codesign<\/code>. The exact behavior then depends on the architecture. For macOS on x64, it (at least at the time of this writing) results in completely unsigned binaries that should still work fine for development and debugging purposes. On aarch64, the Xcode linker will apply a default &quot;adhoc&quot; signing, without any entitlements. Such a build does not allow dumping core files.<\/p>\n-<p>The default mode &quot;auto&quot; will try for <code>hardened<\/code> signing if the debug level is <code>release<\/code> and either the default identity or the specified identity is valid. If hardened isn't possible, then <code>debug<\/code> signing is chosen if it works. If nothing works, the codesign build step is disabled.<\/p>\n+<p>Modern versions of macOS require applications to be signed and\n+notarizied before distribution. See Apple's documentation for more\n+background on what this means and how it works. To help support this,\n+the JDK build can be configured to automatically sign all native\n+binaries, and the JDK bundle, with all the options needed for successful\n+notarization, as well as all the entitlements required by the JDK. To\n+enable <code>hardened<\/code> signing, use configure parameter\n+<code>--with-macosx-codesign=hardened<\/code> and configure the signing\n+identity you wish to use with\n+<code>--with-macosx-codesign-identity=&lt;identity&gt;<\/code>. The\n+identity refers to a signing identity from Apple that needs to be\n+preinstalled on the build host.<\/p>\n+<p>When not signing for distribution with the hardened option, the JDK\n+build will still attempt to perform <code>adhoc<\/code> signing to add\n+the special entitlement <code>com.apple.security.get-task-allow<\/code>\n+to each binary. This entitlement is required to be able to dump core\n+files from a process. Note that adding this entitlement makes the build\n+invalid for notarization, so it is only added when signing in\n+<code>debug<\/code> mode. To explicitly enable this kind of adhoc\n+signing, use configure parameter\n+<code>--with-macosx-codesign=debug<\/code>. It will be enabled by default\n+in most cases.<\/p>\n+<p>It's also possible to completely disable any explicit codesign\n+operations done by the JDK build using the configure parameter\n+<code>--without-macosx-codesign<\/code>. The exact behavior then depends\n+on the architecture. For macOS on x64, it (at least at the time of this\n+writing) results in completely unsigned binaries that should still work\n+fine for development and debugging purposes. On aarch64, the Xcode\n+linker will apply a default \"adhoc\" signing, without any entitlements.\n+Such a build does not allow dumping core files.<\/p>\n+<p>The default mode \"auto\" will try for <code>hardened<\/code> signing if\n+the debug level is <code>release<\/code> and either the default identity\n+or the specified identity is valid. If hardened isn't possible, then\n+<code>debug<\/code> signing is chosen if it works. If nothing works, the\n+codesign build step is disabled.<\/p>\n@@ -532,7 +1144,31 @@\n-<p>Cross-compiling means using one platform (the <em>build<\/em> platform) to generate output that can ran on another platform (the <em>target<\/em> platform).<\/p>\n-<p>The typical reason for cross-compiling is that the build is performed on a more powerful desktop computer, but the resulting binaries will be able to run on a different, typically low-performing system. Most of the complications that arise when building for embedded is due to this separation of <em>build<\/em> and <em>target<\/em> systems.<\/p>\n-<p>This requires a more complex setup and build procedure. This section assumes you are familiar with cross-compiling in general, and will only deal with the particularities of cross-compiling the JDK. If you are new to cross-compiling, please see the <a href=\"https:\/\/en.wikipedia.org\/wiki\/Cross_compiler#External_links\">external links at Wikipedia<\/a> for a good start on reading materials.<\/p>\n-<p>Cross-compiling the JDK requires you to be able to build both for the build platform and for the target platform. The reason for the former is that we need to build and execute tools during the build process, both native tools and Java tools.<\/p>\n-<p>If all you want to do is to compile a 32-bit version, for the same OS, on a 64-bit machine, consider using <code>--with-target-bits=32<\/code> instead of doing a full-blown cross-compilation. (While this surely is possible, it's a lot more work and will take much longer to build.)<\/p>\n-<h3 id=\"cross-compiling-the-easy-way-with-openjdk-devkits\">Cross compiling the easy way with OpenJDK devkits<\/h3>\n-<p>The OpenJDK build system provides out-of-the box support for creating and using so called devkits. A <code>devkit<\/code> is basically a collection of a cross-compiling toolchain and a sysroot environment which can easily be used together with the <code>--with-devkit<\/code> configure option to cross compile the OpenJDK. On Linux\/x86_64, the following command:<\/p>\n+<p>Cross-compiling means using one platform (the <em>build<\/em>\n+platform) to generate output that can ran on another platform (the\n+<em>target<\/em> platform).<\/p>\n+<p>The typical reason for cross-compiling is that the build is performed\n+on a more powerful desktop computer, but the resulting binaries will be\n+able to run on a different, typically low-performing system. Most of the\n+complications that arise when building for embedded is due to this\n+separation of <em>build<\/em> and <em>target<\/em> systems.<\/p>\n+<p>This requires a more complex setup and build procedure. This section\n+assumes you are familiar with cross-compiling in general, and will only\n+deal with the particularities of cross-compiling the JDK. If you are new\n+to cross-compiling, please see the <a\n+href=\"https:\/\/en.wikipedia.org\/wiki\/Cross_compiler#External_links\">external\n+links at Wikipedia<\/a> for a good start on reading materials.<\/p>\n+<p>Cross-compiling the JDK requires you to be able to build both for the\n+build platform and for the target platform. The reason for the former is\n+that we need to build and execute tools during the build process, both\n+native tools and Java tools.<\/p>\n+<p>If all you want to do is to compile a 32-bit version, for the same\n+OS, on a 64-bit machine, consider using\n+<code>--with-target-bits=32<\/code> instead of doing a full-blown\n+cross-compilation. (While this surely is possible, it's a lot more work\n+and will take much longer to build.)<\/p>\n+<h3 id=\"cross-compiling-the-easy-way-with-openjdk-devkits\">Cross\n+compiling the easy way with OpenJDK devkits<\/h3>\n+<p>The OpenJDK build system provides out-of-the box support for creating\n+and using so called devkits. A <code>devkit<\/code> is basically a\n+collection of a cross-compiling toolchain and a sysroot environment\n+which can easily be used together with the <code>--with-devkit<\/code>\n+configure option to cross compile the OpenJDK. On Linux\/x86_64, the\n+following command:<\/p>\n@@ -540,2 +1176,5 @@\n-<p>will configure and build OpenJDK for Linux\/ppc64 assuming that <code>&lt;devkit-path&gt;<\/code> points to a Linux\/x86_64 to Linux\/ppc64 devkit.<\/p>\n-<p>Devkits can be created from the <code>make\/devkit<\/code> directory by executing:<\/p>\n+<p>will configure and build OpenJDK for Linux\/ppc64 assuming that\n+<code>&lt;devkit-path&gt;<\/code> points to a Linux\/x86_64 to Linux\/ppc64\n+devkit.<\/p>\n+<p>Devkits can be created from the <code>make\/devkit<\/code> directory by\n+executing:<\/p>\n@@ -543,1 +1182,6 @@\n-<p>where <code>TARGETS<\/code> contains one or more <code>TARGET_TRIPLET<\/code>s of the form described in <a href=\"https:\/\/sourceware.org\/autobook\/autobook\/autobook_17.html\">section 3.4 of the GNU Autobook<\/a>. If no targets are given, a native toolchain for the current platform will be created. Currently, at least the following targets are known to work:<\/p>\n+<p>where <code>TARGETS<\/code> contains one or more\n+<code>TARGET_TRIPLET<\/code>s of the form described in <a\n+href=\"https:\/\/sourceware.org\/autobook\/autobook\/autobook_17.html\">section\n+3.4 of the GNU Autobook<\/a>. If no targets are given, a native toolchain\n+for the current platform will be created. Currently, at least the\n+following targets are known to work:<\/p>\n@@ -571,1 +1215,6 @@\n-<p><code>BASE_OS<\/code> must be one of &quot;OEL6&quot; for Oracle Enterprise Linux 6 or &quot;Fedora&quot; (if not specified &quot;OEL6&quot; will be the default). If the base OS is &quot;Fedora&quot; the corresponding Fedora release can be specified with the help of the <code>BASE_OS_VERSION<\/code> option (with &quot;27&quot; as default version). If the build is successful, the new devkits can be found in the <code>build\/devkit\/result<\/code> subdirectory:<\/p>\n+<p><code>BASE_OS<\/code> must be one of \"OEL6\" for Oracle Enterprise\n+Linux 6 or \"Fedora\" (if not specified \"OEL6\" will be the default). If\n+the base OS is \"Fedora\" the corresponding Fedora release can be\n+specified with the help of the <code>BASE_OS_VERSION<\/code> option (with\n+\"27\" as default version). If the build is successful, the new devkits\n+can be found in the <code>build\/devkit\/result<\/code> subdirectory:<\/p>\n@@ -577,1 +1226,9 @@\n-<p>Notice that devkits are not only useful for targeting different build platforms. Because they contain the full build dependencies for a system (i.e. compiler and root file system), they can easily be used to build well-known, reliable and reproducible build environments. You can for example create and use a devkit with GCC 7.3 and a Fedora 12 sysroot environment (with glibc 2.11) on Ubuntu 14.04 (which doesn't have GCC 7.3 by default) to produce OpenJDK binaries which will run on all Linux systems with runtime libraries newer than the ones from Fedora 12 (e.g. Ubuntu 16.04, SLES 11 or RHEL 6).<\/p>\n+<p>Notice that devkits are not only useful for targeting different build\n+platforms. Because they contain the full build dependencies for a system\n+(i.e. compiler and root file system), they can easily be used to build\n+well-known, reliable and reproducible build environments. You can for\n+example create and use a devkit with GCC 7.3 and a Fedora 12 sysroot\n+environment (with glibc 2.11) on Ubuntu 14.04 (which doesn't have GCC\n+7.3 by default) to produce OpenJDK binaries which will run on all Linux\n+systems with runtime libraries newer than the ones from Fedora 12 (e.g.\n+Ubuntu 16.04, SLES 11 or RHEL 6).<\/p>\n@@ -579,6 +1236,29 @@\n-<p>When cross-compiling, make sure you use a boot JDK that runs on the <em>build<\/em> system, and not on the <em>target<\/em> system.<\/p>\n-<p>To be able to build, we need a &quot;Build JDK&quot;, which is a JDK built from the current sources (that is, the same as the end result of the entire build process), but able to run on the <em>build<\/em> system, and not the <em>target<\/em> system. (In contrast, the Boot JDK should be from an older release, e.g. JDK 8 when building JDK 9.)<\/p>\n-<p>The build process will create a minimal Build JDK for you, as part of building. To speed up the build, you can use <code>--with-build-jdk<\/code> to <code>configure<\/code> to point to a pre-built Build JDK. Please note that the build result is unpredictable, and can possibly break in subtle ways, if the Build JDK does not <strong>exactly<\/strong> match the current sources.<\/p>\n-<h3 id=\"specifying-the-target-platform\">Specifying the Target Platform<\/h3>\n-<p>You <em>must<\/em> specify the target platform when cross-compiling. Doing so will also automatically turn the build into a cross-compiling mode. The simplest way to do this is to use the <code>--openjdk-target<\/code> argument, e.g. <code>--openjdk-target=arm-linux-gnueabihf<\/code>. or <code>--openjdk-target=aarch64-oe-linux<\/code>. This will automatically set the <code>--host<\/code> and <code>--target<\/code> options for autoconf, which can otherwise be confusing. (In autoconf terminology, the &quot;target&quot; is known as &quot;host&quot;, and &quot;target&quot; is used for building a Canadian cross-compiler.)<\/p>\n-<p>If <code>--build<\/code> has not been explicitly passed to configure, <code>--openjdk-target<\/code> will autodetect the build platform and internally set the flag automatically, otherwise the platform that was explicitly passed to <code>--build<\/code> will be used instead.<\/p>\n+<p>When cross-compiling, make sure you use a boot JDK that runs on the\n+<em>build<\/em> system, and not on the <em>target<\/em> system.<\/p>\n+<p>To be able to build, we need a \"Build JDK\", which is a JDK built from\n+the current sources (that is, the same as the end result of the entire\n+build process), but able to run on the <em>build<\/em> system, and not\n+the <em>target<\/em> system. (In contrast, the Boot JDK should be from an\n+older release, e.g. JDK 8 when building JDK 9.)<\/p>\n+<p>The build process will create a minimal Build JDK for you, as part of\n+building. To speed up the build, you can use\n+<code>--with-build-jdk<\/code> to <code>configure<\/code> to point to a\n+pre-built Build JDK. Please note that the build result is unpredictable,\n+and can possibly break in subtle ways, if the Build JDK does not\n+<strong>exactly<\/strong> match the current sources.<\/p>\n+<h3 id=\"specifying-the-target-platform\">Specifying the Target\n+Platform<\/h3>\n+<p>You <em>must<\/em> specify the target platform when cross-compiling.\n+Doing so will also automatically turn the build into a cross-compiling\n+mode. The simplest way to do this is to use the\n+<code>--openjdk-target<\/code> argument, e.g.\n+<code>--openjdk-target=arm-linux-gnueabihf<\/code>. or\n+<code>--openjdk-target=aarch64-oe-linux<\/code>. This will automatically\n+set the <code>--host<\/code> and <code>--target<\/code> options for\n+autoconf, which can otherwise be confusing. (In autoconf terminology,\n+the \"target\" is known as \"host\", and \"target\" is used for building a\n+Canadian cross-compiler.)<\/p>\n+<p>If <code>--build<\/code> has not been explicitly passed to configure,\n+<code>--openjdk-target<\/code> will autodetect the build platform and\n+internally set the flag automatically, otherwise the platform that was\n+explicitly passed to <code>--build<\/code> will be used instead.<\/p>\n@@ -586,3 +1266,23 @@\n-<p>You will need two copies of your toolchain, one which generates output that can run on the target system (the normal, or <em>target<\/em>, toolchain), and one that generates output that can run on the build system (the <em>build<\/em> toolchain). Note that cross-compiling is only supported for gcc at the time being. The gcc standard is to prefix cross-compiling toolchains with the target denominator. If you follow this standard, <code>configure<\/code> is likely to pick up the toolchain correctly.<\/p>\n-<p>The <em>build<\/em> toolchain will be autodetected just the same way the normal <em>build<\/em>\/<em>target<\/em> toolchain will be autodetected when not cross-compiling. If this is not what you want, or if the autodetection fails, you can specify a devkit containing the <em>build<\/em> toolchain using <code>--with-build-devkit<\/code> to <code>configure<\/code>, or by giving <code>BUILD_CC<\/code> and <code>BUILD_CXX<\/code> arguments.<\/p>\n-<p>It is often helpful to locate the cross-compilation tools, headers and libraries in a separate directory, outside the normal path, and point out that directory to <code>configure<\/code>. Do this by setting the sysroot (<code>--with-sysroot<\/code>) and appending the directory when searching for cross-compilations tools (<code>--with-toolchain-path<\/code>). As a compact form, you can also use <code>--with-devkit<\/code> to point to a single directory, if it is correctly setup. (See <code>basics.m4<\/code> for details.)<\/p>\n+<p>You will need two copies of your toolchain, one which generates\n+output that can run on the target system (the normal, or\n+<em>target<\/em>, toolchain), and one that generates output that can run\n+on the build system (the <em>build<\/em> toolchain). Note that\n+cross-compiling is only supported for gcc at the time being. The gcc\n+standard is to prefix cross-compiling toolchains with the target\n+denominator. If you follow this standard, <code>configure<\/code> is\n+likely to pick up the toolchain correctly.<\/p>\n+<p>The <em>build<\/em> toolchain will be autodetected just the same way\n+the normal <em>build<\/em>\/<em>target<\/em> toolchain will be autodetected\n+when not cross-compiling. If this is not what you want, or if the\n+autodetection fails, you can specify a devkit containing the\n+<em>build<\/em> toolchain using <code>--with-build-devkit<\/code> to\n+<code>configure<\/code>, or by giving <code>BUILD_CC<\/code> and\n+<code>BUILD_CXX<\/code> arguments.<\/p>\n+<p>It is often helpful to locate the cross-compilation tools, headers\n+and libraries in a separate directory, outside the normal path, and\n+point out that directory to <code>configure<\/code>. Do this by setting\n+the sysroot (<code>--with-sysroot<\/code>) and appending the directory\n+when searching for cross-compilations tools\n+(<code>--with-toolchain-path<\/code>). As a compact form, you can also\n+use <code>--with-devkit<\/code> to point to a single directory, if it is\n+correctly setup. (See <code>basics.m4<\/code> for details.)<\/p>\n@@ -590,3 +1290,8 @@\n-<p>You will need copies of external native libraries for the <em>target<\/em> system, present on the <em>build<\/em> machine while building.<\/p>\n-<p>Take care not to replace the <em>build<\/em> system's version of these libraries by mistake, since that can render the <em>build<\/em> machine unusable.<\/p>\n-<p>Make sure that the libraries you point to (ALSA, X11, etc) are for the <em>target<\/em>, not the <em>build<\/em>, platform.<\/p>\n+<p>You will need copies of external native libraries for the\n+<em>target<\/em> system, present on the <em>build<\/em> machine while\n+building.<\/p>\n+<p>Take care not to replace the <em>build<\/em> system's version of these\n+libraries by mistake, since that can render the <em>build<\/em> machine\n+unusable.<\/p>\n+<p>Make sure that the libraries you point to (ALSA, X11, etc) are for\n+the <em>target<\/em>, not the <em>build<\/em>, platform.<\/p>\n@@ -594,2 +1299,5 @@\n-<p>You will need alsa libraries suitable for your <em>target<\/em> system. For most cases, using Debian's pre-built libraries work fine.<\/p>\n-<p>Note that alsa is needed even if you only want to build a headless JDK.<\/p>\n+<p>You will need alsa libraries suitable for your <em>target<\/em>\n+system. For most cases, using Debian's pre-built libraries work\n+fine.<\/p>\n+<p>Note that alsa is needed even if you only want to build a headless\n+JDK.<\/p>\n@@ -597,2 +1305,6 @@\n-<li><p>Go to <a href=\"https:\/\/www.debian.org\/distrib\/packages\">Debian Package Search<\/a> and search for the <code>libasound2<\/code> and <code>libasound2-dev<\/code> packages for your <em>target<\/em> system. Download them to \/tmp.<\/p><\/li>\n-<li>Install the libraries into the cross-compilation toolchain. For instance:<\/li>\n+<li><p>Go to <a href=\"https:\/\/www.debian.org\/distrib\/packages\">Debian\n+Package Search<\/a> and search for the <code>libasound2<\/code> and\n+<code>libasound2-dev<\/code> packages for your <em>target<\/em> system.\n+Download them to \/tmp.<\/p><\/li>\n+<li><p>Install the libraries into the cross-compilation toolchain. For\n+instance:<\/p><\/li>\n@@ -604,1 +1316,2 @@\n-<li>If alsa is not properly detected by <code>configure<\/code>, you can point it out by <code>--with-alsa<\/code>.<\/li>\n+<li>If alsa is not properly detected by <code>configure<\/code>, you can\n+point it out by <code>--with-alsa<\/code>.<\/li>\n@@ -607,2 +1320,4 @@\n-<p>You will need X11 libraries suitable for your <em>target<\/em> system. For most cases, using Debian's pre-built libraries work fine.<\/p>\n-<p>Note that X11 is needed even if you only want to build a headless JDK.<\/p>\n+<p>You will need X11 libraries suitable for your <em>target<\/em> system.\n+For most cases, using Debian's pre-built libraries work fine.<\/p>\n+<p>Note that X11 is needed even if you only want to build a headless\n+JDK.<\/p>\n@@ -610,1 +1325,3 @@\n-<li>Go to <a href=\"https:\/\/www.debian.org\/distrib\/packages\">Debian Package Search<\/a>, search for the following packages for your <em>target<\/em> system, and download them to \/tmp\/target-x11:\n+<li><p>Go to <a href=\"https:\/\/www.debian.org\/distrib\/packages\">Debian\n+Package Search<\/a>, search for the following packages for your\n+<em>target<\/em> system, and download them to \/tmp\/target-x11:<\/p>\n@@ -632,13 +1349,20 @@\n-<li><p>Install the libraries into the cross-compilation toolchain. For instance:<\/p>\n-<pre><code>cd \/tools\/gcc-linaro-arm-linux-gnueabihf-raspbian-2012.09-20120921_linux\/arm-linux-gnueabihf\/libc\/usr\n-mkdir X11R6\n-cd X11R6\n-for deb in \/tmp\/target-x11\/*.deb ; do dpkg-deb -x $deb . ; done\n-mv usr\/* .\n-cd lib\n-cp arm-linux-gnueabihf\/* .<\/code><\/pre>\n-<p>You can ignore the following messages. These libraries are not needed to successfully complete a full JDK build.<\/p>\n-<pre><code>cp: cannot stat `arm-linux-gnueabihf\/libICE.so&#39;: No such file or directory\n-cp: cannot stat `arm-linux-gnueabihf\/libSM.so&#39;: No such file or directory\n-cp: cannot stat `arm-linux-gnueabihf\/libXt.so&#39;: No such file or directory<\/code><\/pre><\/li>\n-<li><p>If the X11 libraries are not properly detected by <code>configure<\/code>, you can point them out by <code>--with-x<\/code>.<\/p><\/li>\n+<li><p>Install the libraries into the cross-compilation toolchain. For\n+instance:<\/p>\n+<pre><code>    cd \/tools\/gcc-linaro-arm-linux-gnueabihf-raspbian-2012.09-20120921_linux\/arm-linux-gnueabihf\/libc\/usr\n+    mkdir X11R6\n+    cd X11R6\n+    for deb in \/tmp\/target-x11\/*.deb ; do dpkg-deb -x $deb . ; done\n+    mv usr\/* .\n+    cd lib\n+    cp arm-linux-gnueabihf\/* .\n+    ```\n+\n+You can ignore the following messages. These libraries are not needed to\n+successfully complete a full JDK build.<\/code><\/pre>\n+<p>cp: cannot stat\n+<code>arm-linux-gnueabihf\/libICE.so': No such file or directory cp: cannot stat<\/code>arm-linux-gnueabihf\/libSM.so':\n+No such file or directory cp: cannot stat\n+`arm-linux-gnueabihf\/libXt.so': No such file or directory ```<\/p><\/li>\n+<li><p>If the X11 libraries are not properly detected by\n+<code>configure<\/code>, you can point them out by\n+<code>--with-x<\/code>.<\/p><\/li>\n@@ -646,3 +1370,12 @@\n-<h3 id=\"cross-compiling-with-debian-sysroots\">Cross compiling with Debian sysroots<\/h3>\n-<p>Fortunately, you can create sysroots for foreign architectures with tools provided by your OS. On Debian\/Ubuntu systems, one could use <code>qemu-deboostrap<\/code> to create the <em>target<\/em> system chroot, which would have the native libraries and headers specific to that <em>target<\/em> system. After that, we can use the cross-compiler on the <em>build<\/em> system, pointing into chroot to get the build dependencies right. This allows building for foreign architectures with native compilation speed.<\/p>\n-<p>For example, cross-compiling to AArch64 from x86_64 could be done like this:<\/p>\n+<h3 id=\"cross-compiling-with-debian-sysroots\">Cross compiling with\n+Debian sysroots<\/h3>\n+<p>Fortunately, you can create sysroots for foreign architectures with\n+tools provided by your OS. On Debian\/Ubuntu systems, one could use\n+<code>qemu-deboostrap<\/code> to create the <em>target<\/em> system\n+chroot, which would have the native libraries and headers specific to\n+that <em>target<\/em> system. After that, we can use the cross-compiler\n+on the <em>build<\/em> system, pointing into chroot to get the build\n+dependencies right. This allows building for foreign architectures with\n+native compilation speed.<\/p>\n+<p>For example, cross-compiling to AArch64 from x86_64 could be done\n+like this:<\/p>\n@@ -650,19 +1383,11 @@\n-<li><p>Install cross-compiler on the <em>build<\/em> system:<\/p>\n-<pre><code>apt install g++-aarch64-linux-gnu gcc-aarch64-linux-gnu<\/code><\/pre><\/li>\n-<li><p>Create chroot on the <em>build<\/em> system, configuring it for <em>target<\/em> system:<\/p>\n-<pre><code>sudo qemu-debootstrap \\\n-  --arch=arm64 \\\n-  --verbose \\\n-  --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev,libffi-dev \\\n-  --resolve-deps \\\n-  buster \\\n-  ~\/sysroot-arm64 \\\n-  http:\/\/httpredir.debian.org\/debian\/<\/code><\/pre><\/li>\n-<li><p>Make sure the symlinks inside the newly created chroot point to proper locations:<\/p>\n-<pre><code>sudo chroot ~\/sysroot-arm64 symlinks -cr .<\/code><\/pre><\/li>\n-<li><p>Configure and build with newly created chroot as sysroot\/toolchain-path:<\/p>\n-<pre><code>sh .\/configure \\\n-  --openjdk-target=aarch64-linux-gnu \\\n-  --with-sysroot=~\/sysroot-arm64\n-make images\n-ls build\/linux-aarch64-server-release\/<\/code><\/pre><\/li>\n+<li><p>Install cross-compiler on the <em>build<\/em> system:\n+<code>apt install g++-aarch64-linux-gnu gcc-aarch64-linux-gnu<\/code><\/p><\/li>\n+<li><p>Create chroot on the <em>build<\/em> system, configuring it for\n+<em>target<\/em> system:\n+<code>sudo qemu-debootstrap \\       --arch=arm64 \\       --verbose \\       --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev,libffi-dev \\       --resolve-deps \\       buster \\       ~\/sysroot-arm64 \\       http:\/\/httpredir.debian.org\/debian\/<\/code><\/p><\/li>\n+<li><p>Make sure the symlinks inside the newly created chroot point to\n+proper locations:\n+<code>sudo chroot ~\/sysroot-arm64 symlinks -cr .<\/code><\/p><\/li>\n+<li><p>Configure and build with newly created chroot as\n+sysroot\/toolchain-path:\n+<code>sh .\/configure \\       --openjdk-target=aarch64-linux-gnu \\       --with-sysroot=~\/sysroot-arm64     make images     ls build\/linux-aarch64-server-release\/<\/code><\/p><\/li>\n@@ -670,2 +1395,4 @@\n-<p>The build does not create new files in that chroot, so it can be reused for multiple builds without additional cleanup.<\/p>\n-<p>The build system should automatically detect the toolchain paths and dependencies, but sometimes it might require a little nudge with:<\/p>\n+<p>The build does not create new files in that chroot, so it can be\n+reused for multiple builds without additional cleanup.<\/p>\n+<p>The build system should automatically detect the toolchain paths and\n+dependencies, but sometimes it might require a little nudge with:<\/p>\n@@ -673,4 +1400,9 @@\n-<li><p>Native compilers: override <code>CC<\/code> or <code>CXX<\/code> for <code>.\/configure<\/code><\/p><\/li>\n-<li><p>Freetype lib location: override <code>--with-freetype-lib<\/code>, for example <code>${sysroot}\/usr\/lib\/${target}\/<\/code><\/p><\/li>\n-<li><p>Freetype includes location: override <code>--with-freetype-include<\/code> for example <code>${sysroot}\/usr\/include\/freetype2\/<\/code><\/p><\/li>\n-<li><p>X11 libraries location: override <code>--x-libraries<\/code>, for example <code>${sysroot}\/usr\/lib\/${target}\/<\/code><\/p><\/li>\n+<li><p>Native compilers: override <code>CC<\/code> or <code>CXX<\/code>\n+for <code>.\/configure<\/code><\/p><\/li>\n+<li><p>Freetype lib location: override <code>--with-freetype-lib<\/code>,\n+for example <code>${sysroot}\/usr\/lib\/${target}\/<\/code><\/p><\/li>\n+<li><p>Freetype includes location: override\n+<code>--with-freetype-include<\/code> for example\n+<code>${sysroot}\/usr\/include\/freetype2\/<\/code><\/p><\/li>\n+<li><p>X11 libraries location: override <code>--x-libraries<\/code>, for\n+example <code>${sysroot}\/usr\/lib\/${target}\/<\/code><\/p><\/li>\n@@ -678,1 +1410,2 @@\n-<p>Architectures that are known to successfully cross-compile like this are:<\/p>\n+<p>Architectures that are known to successfully cross-compile like this\n+are:<\/p>\n@@ -784,1 +1517,6 @@\n-<p>A common cross-compilation target is the ARM CPU. When building for ARM, it is useful to set the ABI profile. A number of pre-defined ABI profiles are available using <code>--with-abi-profile<\/code>: arm-vfp-sflt, arm-vfp-hflt, arm-sflt, armv5-vfp-sflt, armv6-vfp-hflt. Note that soft-float ABIs are no longer properly supported by the JDK.<\/p>\n+<p>A common cross-compilation target is the ARM CPU. When building for\n+ARM, it is useful to set the ABI profile. A number of pre-defined ABI\n+profiles are available using <code>--with-abi-profile<\/code>:\n+arm-vfp-sflt, arm-vfp-hflt, arm-sflt, armv5-vfp-sflt, armv6-vfp-hflt.\n+Note that soft-float ABIs are no longer properly supported by the\n+JDK.<\/p>\n@@ -786,1 +1524,6 @@\n-<p>Just like it's possible to cross-compile for a different CPU, it's possible to cross-compile for musl libc on a glibc-based <em>build<\/em> system. A devkit suitable for most target CPU architectures can be obtained from <a href=\"https:\/\/musl.cc\">musl.cc<\/a>. After installing the required packages in the sysroot, configure the build with <code>--openjdk-target<\/code>:<\/p>\n+<p>Just like it's possible to cross-compile for a different CPU, it's\n+possible to cross-compile for musl libc on a glibc-based <em>build<\/em>\n+system. A devkit suitable for most target CPU architectures can be\n+obtained from <a href=\"https:\/\/musl.cc\">musl.cc<\/a>. After installing\n+the required packages in the sysroot, configure the build with\n+<code>--openjdk-target<\/code>:<\/p>\n@@ -795,3 +1538,6 @@\n-<p>The build will end up in a directory named like <code>build\/linux-arm-normal-server-release<\/code>.<\/p>\n-<p>Inside this build output directory, the <code>images\/jdk<\/code> will contain the newly built JDK, for your <em>target<\/em> system.<\/p>\n-<p>Copy these folders to your <em>target<\/em> system. Then you can run e.g. <code>images\/jdk\/bin\/java -version<\/code>.<\/p>\n+<p>The build will end up in a directory named like\n+<code>build\/linux-arm-normal-server-release<\/code>.<\/p>\n+<p>Inside this build output directory, the <code>images\/jdk<\/code> will\n+contain the newly built JDK, for your <em>target<\/em> system.<\/p>\n+<p>Copy these folders to your <em>target<\/em> system. Then you can run\n+e.g. <code>images\/jdk\/bin\/java -version<\/code>.<\/p>\n@@ -799,1 +1545,6 @@\n-<p>Building the JDK requires a lot of horsepower. Some of the build tools can be adjusted to utilize more or less of resources such as parallel threads and memory. The <code>configure<\/code> script analyzes your system and selects reasonable values for such options based on your hardware. If you encounter resource problems, such as out of memory conditions, you can modify the detected values with:<\/p>\n+<p>Building the JDK requires a lot of horsepower. Some of the build\n+tools can be adjusted to utilize more or less of resources such as\n+parallel threads and memory. The <code>configure<\/code> script analyzes\n+your system and selects reasonable values for such options based on your\n+hardware. If you encounter resource problems, such as out of memory\n+conditions, you can modify the detected values with:<\/p>\n@@ -801,2 +1552,4 @@\n-<li><p><code>--with-num-cores<\/code> -- number of cores in the build system, e.g. <code>--with-num-cores=8<\/code>.<\/p><\/li>\n-<li><p><code>--with-memory-size<\/code> -- memory (in MB) available in the build system, e.g. <code>--with-memory-size=1024<\/code><\/p><\/li>\n+<li><p><code>--with-num-cores<\/code> -- number of cores in the build\n+system, e.g. <code>--with-num-cores=8<\/code>.<\/p><\/li>\n+<li><p><code>--with-memory-size<\/code> -- memory (in MB) available in\n+the build system, e.g. <code>--with-memory-size=1024<\/code><\/p><\/li>\n@@ -804,4 +1557,16 @@\n-<p>You can also specify directly the number of build jobs to use with <code>--with-jobs=N<\/code> to <code>configure<\/code>, or <code>JOBS=N<\/code> to <code>make<\/code>. Do not use the <code>-j<\/code> flag to <code>make<\/code>. In most cases it will be ignored by the makefiles, but it can cause problems for some make targets.<\/p>\n-<p>It might also be necessary to specify the JVM arguments passed to the Boot JDK, using e.g. <code>--with-boot-jdk-jvmargs=&quot;-Xmx8G&quot;<\/code>. Doing so will override the default JVM arguments passed to the Boot JDK.<\/p>\n-<p>At the end of a successful execution of <code>configure<\/code>, you will get a performance summary, indicating how well the build will perform. Here you will also get performance hints. If you want to build fast, pay attention to those!<\/p>\n-<p>If you want to tweak build performance, run with <code>make LOG=info<\/code> to get a build time summary at the end of the build process.<\/p>\n+<p>You can also specify directly the number of build jobs to use with\n+<code>--with-jobs=N<\/code> to <code>configure<\/code>, or\n+<code>JOBS=N<\/code> to <code>make<\/code>. Do not use the <code>-j<\/code>\n+flag to <code>make<\/code>. In most cases it will be ignored by the\n+makefiles, but it can cause problems for some make targets.<\/p>\n+<p>It might also be necessary to specify the JVM arguments passed to the\n+Boot JDK, using e.g. <code>--with-boot-jdk-jvmargs=\"-Xmx8G\"<\/code>.\n+Doing so will override the default JVM arguments passed to the Boot\n+JDK.<\/p>\n+<p>At the end of a successful execution of <code>configure<\/code>, you\n+will get a performance summary, indicating how well the build will\n+perform. Here you will also get performance hints. If you want to build\n+fast, pay attention to those!<\/p>\n+<p>If you want to tweak build performance, run with\n+<code>make LOG=info<\/code> to get a build time summary at the end of the\n+build process.<\/p>\n@@ -809,3 +1574,9 @@\n-<p>If you are using network shares, e.g. via NFS, for your source code, make sure the build directory is situated on local disk (e.g. by <code>ln -s \/localdisk\/jdk-build $JDK-SHARE\/build<\/code>). The performance penalty is extremely high for building on a network share; close to unusable.<\/p>\n-<p>Also, make sure that your build tools (including Boot JDK and toolchain) is located on a local disk and not a network share.<\/p>\n-<p>As has been stressed elsewhere, do use SSD for source code and build directory, as well as (if possible) the build tools.<\/p>\n+<p>If you are using network shares, e.g. via NFS, for your source code,\n+make sure the build directory is situated on local disk (e.g. by\n+<code>ln -s \/localdisk\/jdk-build $JDK-SHARE\/build<\/code>). The\n+performance penalty is extremely high for building on a network share;\n+close to unusable.<\/p>\n+<p>Also, make sure that your build tools (including Boot JDK and\n+toolchain) is located on a local disk and not a network share.<\/p>\n+<p>As has been stressed elsewhere, do use SSD for source code and build\n+directory, as well as (if possible) the build tools.<\/p>\n@@ -813,1 +1584,4 @@\n-<p>The use of virus checking software, especially on Windows, can <em>significantly<\/em> slow down building of the JDK. If possible, turn off such software, or exclude the directory containing the JDK source code from on-the-fly checking.<\/p>\n+<p>The use of virus checking software, especially on Windows, can\n+<em>significantly<\/em> slow down building of the JDK. If possible, turn\n+off such software, or exclude the directory containing the JDK source\n+code from on-the-fly checking.<\/p>\n@@ -815,1 +1589,5 @@\n-<p>The JDK build supports building with ccache when using gcc or clang. Using ccache can radically speed up compilation of native code if you often rebuild the same sources. Your milage may vary however, so we recommend evaluating it for yourself. To enable it, make sure it's on the path and configure with <code>--enable-ccache<\/code>.<\/p>\n+<p>The JDK build supports building with ccache when using gcc or clang.\n+Using ccache can radically speed up compilation of native code if you\n+often rebuild the same sources. Your milage may vary however, so we\n+recommend evaluating it for yourself. To enable it, make sure it's on\n+the path and configure with <code>--enable-ccache<\/code>.<\/p>\n@@ -817,2 +1595,6 @@\n-<p>By default, the Hotspot build uses preccompiled headers (PCH) on the toolchains were it is properly supported (clang, gcc, and Visual Studio). Normally, this speeds up the build process, but in some circumstances, it can actually slow things down.<\/p>\n-<p>You can experiment by disabling precompiled headers using <code>--disable-precompiled-headers<\/code>.<\/p>\n+<p>By default, the Hotspot build uses preccompiled headers (PCH) on the\n+toolchains were it is properly supported (clang, gcc, and Visual\n+Studio). Normally, this speeds up the build process, but in some\n+circumstances, it can actually slow things down.<\/p>\n+<p>You can experiment by disabling precompiled headers using\n+<code>--disable-precompiled-headers<\/code>.<\/p>\n@@ -820,2 +1602,7 @@\n-<p><a href=\"http:\/\/github.com\/icecc\/icecream\">icecc\/icecream<\/a> is a simple way to setup a distributed compiler network. If you have multiple machines available for building the JDK, you can drastically cut individual build times by utilizing it.<\/p>\n-<p>To use, setup an icecc network, and install icecc on the build machine. Then run <code>configure<\/code> using <code>--enable-icecc<\/code>.<\/p>\n+<p><a href=\"http:\/\/github.com\/icecc\/icecream\">icecc\/icecream<\/a> is a\n+simple way to setup a distributed compiler network. If you have multiple\n+machines available for building the JDK, you can drastically cut\n+individual build times by utilizing it.<\/p>\n+<p>To use, setup an icecc network, and install icecc on the build\n+machine. Then run <code>configure<\/code> using\n+<code>--enable-icecc<\/code>.<\/p>\n@@ -823,1 +1610,5 @@\n-<p>To speed up compilation of Java code, especially during incremental compilations, the javac server is automatically enabled in the configuration step by default. To explicitly enable or disable the javac server, use either <code>--enable-javac-server<\/code> or <code>--disable-javac-server<\/code>.<\/p>\n+<p>To speed up compilation of Java code, especially during incremental\n+compilations, the javac server is automatically enabled in the\n+configuration step by default. To explicitly enable or disable the javac\n+server, use either <code>--enable-javac-server<\/code> or\n+<code>--disable-javac-server<\/code>.<\/p>\n@@ -825,2 +1616,7 @@\n-<p>Selecting the proper target to build can have dramatic impact on build time. For normal usage, <code>jdk<\/code> or the default target is just fine. You only need to build <code>images<\/code> for shipping, or if your tests require it.<\/p>\n-<p>See also <a href=\"#using-fine-grained-make-targets\">Using Fine-Grained Make Targets<\/a> on how to build an even smaller subset of the product.<\/p>\n+<p>Selecting the proper target to build can have dramatic impact on\n+build time. For normal usage, <code>jdk<\/code> or the default target is\n+just fine. You only need to build <code>images<\/code> for shipping, or\n+if your tests require it.<\/p>\n+<p>See also <a href=\"#using-fine-grained-make-targets\">Using\n+Fine-Grained Make Targets<\/a> on how to build an even smaller subset of\n+the product.<\/p>\n@@ -828,3 +1624,7 @@\n-<p>If your build fails, it can sometimes be difficult to pinpoint the problem or find a proper solution.<\/p>\n-<h3 id=\"locating-the-source-of-the-error\">Locating the Source of the Error<\/h3>\n-<p>When a build fails, it can be hard to pinpoint the actual cause of the error. In a typical build process, different parts of the product build in parallel, with the output interlaced.<\/p>\n+<p>If your build fails, it can sometimes be difficult to pinpoint the\n+problem or find a proper solution.<\/p>\n+<h3 id=\"locating-the-source-of-the-error\">Locating the Source of the\n+Error<\/h3>\n+<p>When a build fails, it can be hard to pinpoint the actual cause of\n+the error. In a typical build process, different parts of the product\n+build in parallel, with the output interlaced.<\/p>\n@@ -832,1 +1632,2 @@\n-<p>To help you, the build system will print a failure summary at the end. It looks like this:<\/p>\n+<p>To help you, the build system will print a failure summary at the\n+end. It looks like this:<\/p>\n@@ -850,6 +1651,35 @@\n-<p>Let's break it down! First, the selected configuration, and the top-level target you entered on the command line that caused the failure is printed.<\/p>\n-<p>Then, between the <code>Output from failing command(s) repeated here<\/code> and <code>End of repeated output<\/code> the first lines of output (stdout and stderr) from the actual failing command is repeated. In most cases, this is the error message that caused the build to fail. If multiple commands were failing (this can happen in a parallel build), output from all failed commands will be printed here.<\/p>\n-<p>The path to the <code>failure-logs<\/code> directory is printed. In this file you will find a <code>&lt;target&gt;.log<\/code> file that contains the output from this command in its entirety, and also a <code>&lt;target&gt;.cmd<\/code>, which contain the complete command line used for running this command. You can re-run the failing command by executing <code>. &lt;path to failure-logs&gt;\/&lt;target&gt;.cmd<\/code> in your shell.<\/p>\n-<p>Another way to trace the failure is to follow the chain of make targets, from top-level targets to individual file targets. Between <code>Make failed targets repeated here<\/code> and <code>End of repeated output<\/code> the output from make showing this chain is repeated. The first failed recipe will typically contain the full path to the file in question that failed to compile. Following lines will show a trace of make targets why we ended up trying to compile that file.<\/p>\n-<p>Finally, some hints are given on how to locate the error in the complete log. In this example, we would try searching the log file for &quot;<code>psMemoryPool.o<\/code>&quot;. Another way to quickly locate make errors in the log is to search for &quot;<code>] Error<\/code>&quot; or &quot;<code>***<\/code>&quot;.<\/p>\n-<p>Note that the build failure summary will only help you if the issue was a compilation failure or similar. If the problem is more esoteric, or is due to errors in the build machinery, you will likely get empty output logs, and <code>No indication of failed target found<\/code> instead of the make target chain.<\/p>\n+<p>Let's break it down! First, the selected configuration, and the\n+top-level target you entered on the command line that caused the failure\n+is printed.<\/p>\n+<p>Then, between the\n+<code>Output from failing command(s) repeated here<\/code> and\n+<code>End of repeated output<\/code> the first lines of output (stdout\n+and stderr) from the actual failing command is repeated. In most cases,\n+this is the error message that caused the build to fail. If multiple\n+commands were failing (this can happen in a parallel build), output from\n+all failed commands will be printed here.<\/p>\n+<p>The path to the <code>failure-logs<\/code> directory is printed. In\n+this file you will find a <code>&lt;target&gt;.log<\/code> file that\n+contains the output from this command in its entirety, and also a\n+<code>&lt;target&gt;.cmd<\/code>, which contain the complete command line\n+used for running this command. You can re-run the failing command by\n+executing <code>. &lt;path to failure-logs&gt;\/&lt;target&gt;.cmd<\/code>\n+in your shell.<\/p>\n+<p>Another way to trace the failure is to follow the chain of make\n+targets, from top-level targets to individual file targets. Between\n+<code>Make failed targets repeated here<\/code> and\n+<code>End of repeated output<\/code> the output from make showing this\n+chain is repeated. The first failed recipe will typically contain the\n+full path to the file in question that failed to compile. Following\n+lines will show a trace of make targets why we ended up trying to\n+compile that file.<\/p>\n+<p>Finally, some hints are given on how to locate the error in the\n+complete log. In this example, we would try searching the log file for\n+\"<code>psMemoryPool.o<\/code>\". Another way to quickly locate make errors\n+in the log is to search for \"<code>] Error<\/code>\" or\n+\"<code>***<\/code>\".<\/p>\n+<p>Note that the build failure summary will only help you if the issue\n+was a compilation failure or similar. If the problem is more esoteric,\n+or is due to errors in the build machinery, you will likely get empty\n+output logs, and <code>No indication of failed target found<\/code>\n+instead of the make target chain.<\/p>\n@@ -857,12 +1687,51 @@\n-<p>The output (stdout and stderr) from the latest build is always stored in <code>$BUILD\/build.log<\/code>. The previous build log is stored as <code>build.log.old<\/code>. This means that it is not necessary to redirect the build output yourself if you want to process it.<\/p>\n-<p>You can increase the verbosity of the log file, by the <code>LOG<\/code> control variable to <code>make<\/code>. If you want to see the command lines used in compilations, use <code>LOG=cmdlines<\/code>. To increase the general verbosity, use <code>LOG=info<\/code>, <code>LOG=debug<\/code> or <code>LOG=trace<\/code>. Both of these can be combined with <code>cmdlines<\/code>, e.g. <code>LOG=info,cmdlines<\/code>. The <code>debug<\/code> log level will show most shell commands executed by make, and <code>trace<\/code> will show all. Beware that both these log levels will produce a massive build log!<\/p>\n-<h3 id=\"fixing-unexpected-build-failures\">Fixing Unexpected Build Failures<\/h3>\n-<p>Most of the time, the build will fail due to incorrect changes in the source code.<\/p>\n-<p>Sometimes the build can fail with no apparent changes that have caused the failure. If this is the first time you are building the JDK on this particular computer, and the build fails, the problem is likely with your build environment. But even if you have previously built the JDK with success, and it now fails, your build environment might have changed (perhaps due to OS upgrades or similar). But most likely, such failures are due to problems with the incremental rebuild.<\/p>\n-<h4 id=\"problems-with-the-build-environment\">Problems with the Build Environment<\/h4>\n-<p>Make sure your configuration is correct. Re-run <code>configure<\/code>, and look for any warnings. Warnings that appear in the middle of the <code>configure<\/code> output is also repeated at the end, after the summary. The entire log is stored in <code>$BUILD\/configure.log<\/code>.<\/p>\n-<p>Verify that the summary at the end looks correct. Are you indeed using the Boot JDK and native toolchain that you expect?<\/p>\n-<p>By default, the JDK has a strict approach where warnings from the compiler is considered errors which fail the build. For very new or very old compiler versions, this can trigger new classes of warnings, which thus fails the build. Run <code>configure<\/code> with <code>--disable-warnings-as-errors<\/code> to turn of this behavior. (The warnings will still show, but not make the build fail.)<\/p>\n-<h4 id=\"problems-with-incremental-rebuilds\">Problems with Incremental Rebuilds<\/h4>\n-<p>Incremental rebuilds mean that when you modify part of the product, only the affected parts get rebuilt. While this works great in most cases, and significantly speed up the development process, from time to time complex interdependencies will result in an incorrect build result. This is the most common cause for unexpected build problems.<\/p>\n-<p>Here are a suggested list of things to try if you are having unexpected build problems. Each step requires more time than the one before, so try them in order. Most issues will be solved at step 1 or 2.<\/p>\n+<p>The output (stdout and stderr) from the latest build is always stored\n+in <code>$BUILD\/build.log<\/code>. The previous build log is stored as\n+<code>build.log.old<\/code>. This means that it is not necessary to\n+redirect the build output yourself if you want to process it.<\/p>\n+<p>You can increase the verbosity of the log file, by the\n+<code>LOG<\/code> control variable to <code>make<\/code>. If you want to\n+see the command lines used in compilations, use\n+<code>LOG=cmdlines<\/code>. To increase the general verbosity, use\n+<code>LOG=info<\/code>, <code>LOG=debug<\/code> or <code>LOG=trace<\/code>.\n+Both of these can be combined with <code>cmdlines<\/code>, e.g.\n+<code>LOG=info,cmdlines<\/code>. The <code>debug<\/code> log level will\n+show most shell commands executed by make, and <code>trace<\/code> will\n+show all. Beware that both these log levels will produce a massive build\n+log!<\/p>\n+<h3 id=\"fixing-unexpected-build-failures\">Fixing Unexpected Build\n+Failures<\/h3>\n+<p>Most of the time, the build will fail due to incorrect changes in the\n+source code.<\/p>\n+<p>Sometimes the build can fail with no apparent changes that have\n+caused the failure. If this is the first time you are building the JDK\n+on this particular computer, and the build fails, the problem is likely\n+with your build environment. But even if you have previously built the\n+JDK with success, and it now fails, your build environment might have\n+changed (perhaps due to OS upgrades or similar). But most likely, such\n+failures are due to problems with the incremental rebuild.<\/p>\n+<h4 id=\"problems-with-the-build-environment\">Problems with the Build\n+Environment<\/h4>\n+<p>Make sure your configuration is correct. Re-run\n+<code>configure<\/code>, and look for any warnings. Warnings that appear\n+in the middle of the <code>configure<\/code> output is also repeated at\n+the end, after the summary. The entire log is stored in\n+<code>$BUILD\/configure.log<\/code>.<\/p>\n+<p>Verify that the summary at the end looks correct. Are you indeed\n+using the Boot JDK and native toolchain that you expect?<\/p>\n+<p>By default, the JDK has a strict approach where warnings from the\n+compiler is considered errors which fail the build. For very new or very\n+old compiler versions, this can trigger new classes of warnings, which\n+thus fails the build. Run <code>configure<\/code> with\n+<code>--disable-warnings-as-errors<\/code> to turn of this behavior. (The\n+warnings will still show, but not make the build fail.)<\/p>\n+<h4 id=\"problems-with-incremental-rebuilds\">Problems with Incremental\n+Rebuilds<\/h4>\n+<p>Incremental rebuilds mean that when you modify part of the product,\n+only the affected parts get rebuilt. While this works great in most\n+cases, and significantly speed up the development process, from time to\n+time complex interdependencies will result in an incorrect build result.\n+This is the most common cause for unexpected build problems.<\/p>\n+<p>Here are a suggested list of things to try if you are having\n+unexpected build problems. Each step requires more time than the one\n+before, so try them in order. Most issues will be solved at step 1 or\n+2.<\/p>\n@@ -871,1 +1740,2 @@\n-<p>Run <code>git pull origin master<\/code> to make sure you have the latest changes.<\/p><\/li>\n+<p>Run <code>git pull origin master<\/code> to make sure you have the\n+latest changes.<\/p><\/li>\n@@ -873,1 +1743,5 @@\n-<p>The simplest way to fix incremental rebuild issues is to run <code>make clean<\/code>. This will remove all build results, but not the configuration or any build system support artifacts. In most cases, this will solve build errors resulting from incremental build mismatches.<\/p><\/li>\n+<p>The simplest way to fix incremental rebuild issues is to run\n+<code>make clean<\/code>. This will remove all build results, but not the\n+configuration or any build system support artifacts. In most cases, this\n+will solve build errors resulting from incremental build\n+mismatches.<\/p><\/li>\n@@ -875,1 +1749,8 @@\n-<p>If this does not work, the next step is to run <code>make dist-clean<\/code>, or removing the build output directory (<code>$BUILD<\/code>). This will clean all generated output, including your configuration. You will need to re-run <code>configure<\/code> after this step. A good idea is to run <code>make print-configuration<\/code> before running <code>make dist-clean<\/code>, as this will print your current <code>configure<\/code> command line. Here's a way to do this:<\/p>\n+<p>If this does not work, the next step is to run\n+<code>make dist-clean<\/code>, or removing the build output directory\n+(<code>$BUILD<\/code>). This will clean all generated output, including\n+your configuration. You will need to re-run <code>configure<\/code> after\n+this step. A good idea is to run <code>make print-configuration<\/code>\n+before running <code>make dist-clean<\/code>, as this will print your\n+current <code>configure<\/code> command line. Here's a way to do\n+this:<\/p>\n@@ -881,1 +1762,5 @@\n-<p>Sometimes the Git repository gets in a state that causes the product to be un-buildable. In such a case, the simplest solution is often the &quot;sledgehammer approach&quot;: delete the entire repository, and re-clone it. If you have local changes, save them first to a different location using <code>git format-patch<\/code>.<\/p><\/li>\n+<p>Sometimes the Git repository gets in a state that causes the product\n+to be un-buildable. In such a case, the simplest solution is often the\n+\"sledgehammer approach\": delete the entire repository, and re-clone it.\n+If you have local changes, save them first to a different location using\n+<code>git format-patch<\/code>.<\/p><\/li>\n@@ -888,2 +1773,7 @@\n-<p>then the clock on your build machine is out of sync with the timestamps on the source files. Other errors, apparently unrelated but in fact caused by the clock skew, can occur along with the clock skew warnings. These secondary errors may tend to obscure the fact that the true root cause of the problem is an out-of-sync clock.<\/p>\n-<p>If you see these warnings, reset the clock on the build machine, run <code>make clean<\/code> and restart the build.<\/p>\n+<p>then the clock on your build machine is out of sync with the\n+timestamps on the source files. Other errors, apparently unrelated but\n+in fact caused by the clock skew, can occur along with the clock skew\n+warnings. These secondary errors may tend to obscure the fact that the\n+true root cause of the problem is an out-of-sync clock.<\/p>\n+<p>If you see these warnings, reset the clock on the build machine, run\n+<code>make clean<\/code> and restart the build.<\/p>\n@@ -895,1 +1785,3 @@\n-<p>This can be a sign of a Cygwin problem. See the information about solving problems in the <a href=\"#cygwin\">Cygwin<\/a> section. Rebooting the computer might help temporarily.<\/p>\n+<p>This can be a sign of a Cygwin problem. See the information about\n+solving problems in the <a href=\"#cygwin\">Cygwin<\/a> section. Rebooting\n+the computer might help temporarily.<\/p>\n@@ -897,1 +1789,9 @@\n-<p>On Windows, when configuring, <code>fixpath.sh<\/code> may report that some directory names have spaces. Usually, it assumes those directories have <a href=\"https:\/\/docs.microsoft.com\/en-us\/windows-server\/administration\/windows-commands\/fsutil-8dot3name\">short paths<\/a>. You can run <code>fsutil file setshortname<\/code> in <code>cmd<\/code> on certain directories, such as <code>Microsoft Visual Studio<\/code> or <code>Windows Kits<\/code>, to assign arbitrary short paths so <code>configure<\/code> can access them.<\/p>\n+<p>On Windows, when configuring, <code>fixpath.sh<\/code> may report that\n+some directory names have spaces. Usually, it assumes those directories\n+have <a\n+href=\"https:\/\/docs.microsoft.com\/en-us\/windows-server\/administration\/windows-commands\/fsutil-8dot3name\">short\n+paths<\/a>. You can run <code>fsutil file setshortname<\/code> in\n+<code>cmd<\/code> on certain directories, such as\n+<code>Microsoft Visual Studio<\/code> or <code>Windows Kits<\/code>, to\n+assign arbitrary short paths so <code>configure<\/code> can access\n+them.<\/p>\n@@ -899,2 +1799,9 @@\n-<p>If none of the suggestions in this document helps you, or if you find what you believe is a bug in the build system, please contact the Build Group by sending a mail to <a href=\"mailto:build-dev@openjdk.org\">build-dev@openjdk.org<\/a>. Please include the relevant parts of the configure and\/or build log.<\/p>\n-<p>If you need general help or advice about developing for the JDK, you can also contact the Adoption Group. See the section on <a href=\"#contributing-to-openjdk\">Contributing to OpenJDK<\/a> for more information.<\/p>\n+<p>If none of the suggestions in this document helps you, or if you find\n+what you believe is a bug in the build system, please contact the Build\n+Group by sending a mail to <a\n+href=\"mailto:build-dev@openjdk.org\">build-dev@openjdk.org<\/a>. Please\n+include the relevant parts of the configure and\/or build log.<\/p>\n+<p>If you need general help or advice about developing for the JDK, you\n+can also contact the Adoption Group. See the section on <a\n+href=\"#contributing-to-openjdk\">Contributing to OpenJDK<\/a> for more\n+information.<\/p>\n@@ -902,6 +1809,32 @@\n-<p>Build reproducibility is the property of getting exactly the same bits out when building, every time, independent on who builds the product, or where. This is for many reasons a harder goal than it initially appears, but it is an important goal, for security reasons and others. Please see <a href=\"https:\/\/reproducible-builds.org\">Reproducible Builds<\/a> for more information about the background and reasons for reproducible builds.<\/p>\n-<p>Currently, it is not possible to build OpenJDK fully reproducibly, but getting there is an ongoing effort.<\/p>\n-<p>An absolute prerequisite for building reproducible is to speficy a fixed build time, since time stamps are embedded in many file formats. This is done by setting the <code>SOURCE_DATE_EPOCH<\/code> environment variable, which is an <a href=\"https:\/\/reproducible-builds.org\/docs\/source-date-epoch\/\">industry standard<\/a>, that many tools, such as gcc, recognize, and use in place of the current time when generating output.<\/p>\n-<p>To generate reproducible builds, you must set <code>SOURCE_DATE_EPOCH<\/code> before running <code>configure<\/code>. The value in <code>SOURCE_DATE_EPOCH<\/code> will be stored in the configuration, and used by <code>make<\/code>. Setting <code>SOURCE_DATE_EPOCH<\/code> before running <code>make<\/code> will have no effect on the build.<\/p>\n-<p>You must also make sure your build does not rely on <code>configure<\/code>'s default adhoc version strings. Default adhoc version strings <code>OPT<\/code> segment include user name and source directory. You can either override just the <code>OPT<\/code> segment using <code>--with-version-opt=&lt;any fixed string&gt;<\/code>, or you can specify the entire version string using <code>--with-version-string=&lt;your version&gt;<\/code>.<\/p>\n-<p>This is a typical example of how to build the JDK in a reproducible way:<\/p>\n+<p>Build reproducibility is the property of getting exactly the same\n+bits out when building, every time, independent on who builds the\n+product, or where. This is for many reasons a harder goal than it\n+initially appears, but it is an important goal, for security reasons and\n+others. Please see <a\n+href=\"https:\/\/reproducible-builds.org\">Reproducible Builds<\/a> for more\n+information about the background and reasons for reproducible\n+builds.<\/p>\n+<p>Currently, it is not possible to build OpenJDK fully reproducibly,\n+but getting there is an ongoing effort.<\/p>\n+<p>An absolute prerequisite for building reproducible is to speficy a\n+fixed build time, since time stamps are embedded in many file formats.\n+This is done by setting the <code>SOURCE_DATE_EPOCH<\/code> environment\n+variable, which is an <a\n+href=\"https:\/\/reproducible-builds.org\/docs\/source-date-epoch\/\">industry\n+standard<\/a>, that many tools, such as gcc, recognize, and use in place\n+of the current time when generating output.<\/p>\n+<p>To generate reproducible builds, you must set\n+<code>SOURCE_DATE_EPOCH<\/code> before running <code>configure<\/code>.\n+The value in <code>SOURCE_DATE_EPOCH<\/code> will be stored in the\n+configuration, and used by <code>make<\/code>. Setting\n+<code>SOURCE_DATE_EPOCH<\/code> before running <code>make<\/code> will\n+have no effect on the build.<\/p>\n+<p>You must also make sure your build does not rely on\n+<code>configure<\/code>'s default adhoc version strings. Default adhoc\n+version strings <code>OPT<\/code> segment include user name and source\n+directory. You can either override just the <code>OPT<\/code> segment\n+using <code>--with-version-opt=&lt;any fixed string&gt;<\/code>, or you\n+can specify the entire version string using\n+<code>--with-version-string=&lt;your version&gt;<\/code>.<\/p>\n+<p>This is a typical example of how to build the JDK in a reproducible\n+way:<\/p>\n@@ -911,2 +1844,11 @@\n-<p>Note that regardless if you specify a source date for <code>configure<\/code> or not, the JDK build system will set <code>SOURCE_DATE_EPOCH<\/code> for all build tools when building. If <code>--with-source-date<\/code> has the value <code>current<\/code> (which is the default unless <code>SOURCE_DATE_EPOCH<\/code> is found by in the environment by <code>configure<\/code>), the source date value will be determined at configure time.<\/p>\n-<p>There are several aspects of reproducible builds that can be individually adjusted by <code>configure<\/code> arguments. If any of these are given, they will override the value derived from <code>SOURCE_DATE_EPOCH<\/code>. These arguments are:<\/p>\n+<p>Note that regardless if you specify a source date for\n+<code>configure<\/code> or not, the JDK build system will set\n+<code>SOURCE_DATE_EPOCH<\/code> for all build tools when building. If\n+<code>--with-source-date<\/code> has the value <code>current<\/code>\n+(which is the default unless <code>SOURCE_DATE_EPOCH<\/code> is found by\n+in the environment by <code>configure<\/code>), the source date value\n+will be determined at configure time.<\/p>\n+<p>There are several aspects of reproducible builds that can be\n+individually adjusted by <code>configure<\/code> arguments. If any of\n+these are given, they will override the value derived from\n+<code>SOURCE_DATE_EPOCH<\/code>. These arguments are:<\/p>\n@@ -915,3 +1857,17 @@\n-<p>This option controls how the JDK build sets <code>SOURCE_DATE_EPOCH<\/code> when building. It can be set to a value describing a date, either an epoch based timestamp as an integer, or a valid ISO-8601 date.<\/p>\n-<p>It can also be set to one of the special values <code>current<\/code>, <code>updated<\/code> or <code>version<\/code>. <code>current<\/code> means that the time of running <code>configure<\/code> will be used. <code>version<\/code> will use the nominal release date for the current JDK version. <code>updated<\/code>, which means that <code>SOURCE_DATE_EPOCH<\/code> will be set to the current time each time you are running <code>make<\/code>. All choices, except for <code>updated<\/code>, will set a fixed value for the source date timestamp.<\/p>\n-<p>When <code>SOURCE_DATE_EPOCH<\/code> is set, the default value for <code>--with-source-date<\/code> will be the value given by <code>SOURCE_DATE_EPOCH<\/code>. Otherwise, the default value is <code>current<\/code>.<\/p><\/li>\n+<p>This option controls how the JDK build sets\n+<code>SOURCE_DATE_EPOCH<\/code> when building. It can be set to a value\n+describing a date, either an epoch based timestamp as an integer, or a\n+valid ISO-8601 date.<\/p>\n+<p>It can also be set to one of the special values <code>current<\/code>,\n+<code>updated<\/code> or <code>version<\/code>. <code>current<\/code> means\n+that the time of running <code>configure<\/code> will be used.\n+<code>version<\/code> will use the nominal release date for the current\n+JDK version. <code>updated<\/code>, which means that\n+<code>SOURCE_DATE_EPOCH<\/code> will be set to the current time each time\n+you are running <code>make<\/code>. All choices, except for\n+<code>updated<\/code>, will set a fixed value for the source date\n+timestamp.<\/p>\n+<p>When <code>SOURCE_DATE_EPOCH<\/code> is set, the default value for\n+<code>--with-source-date<\/code> will be the value given by\n+<code>SOURCE_DATE_EPOCH<\/code>. Otherwise, the default value is\n+<code>current<\/code>.<\/p><\/li>\n@@ -919,1 +1875,7 @@\n-<p>This option controls the build time string that will be included in the hotspot library (<code>libjvm.so<\/code> or <code>jvm.dll<\/code>). When the source date is fixed (e.g. by setting <code>SOURCE_DATE_EPOCH<\/code>), the default value for <code>--with-hotspot-build-time<\/code> will be an ISO 8601 representation of that time stamp. Otherwise the default value will be the current time when building hotspot.<\/p><\/li>\n+<p>This option controls the build time string that will be included in\n+the hotspot library (<code>libjvm.so<\/code> or <code>jvm.dll<\/code>).\n+When the source date is fixed (e.g. by setting\n+<code>SOURCE_DATE_EPOCH<\/code>), the default value for\n+<code>--with-hotspot-build-time<\/code> will be an ISO 8601\n+representation of that time stamp. Otherwise the default value will be\n+the current time when building hotspot.<\/p><\/li>\n@@ -921,1 +1883,7 @@\n-<p>This option controls the copyright year in some generated text files. When the source date is fixed (e.g. by setting <code>SOURCE_DATE_EPOCH<\/code>), the default value for <code>--with-copyright-year<\/code> will be the year of that time stamp. Otherwise the default is the current year at the time of running configure. This can be overridden by <code>--with-copyright-year=&lt;year&gt;<\/code>.<\/p><\/li>\n+<p>This option controls the copyright year in some generated text files.\n+When the source date is fixed (e.g. by setting\n+<code>SOURCE_DATE_EPOCH<\/code>), the default value for\n+<code>--with-copyright-year<\/code> will be the year of that time stamp.\n+Otherwise the default is the current year at the time of running\n+configure. This can be overridden by\n+<code>--with-copyright-year=&lt;year&gt;<\/code>.<\/p><\/li>\n@@ -923,1 +1891,5 @@\n-<p>This option controls some additional behavior needed to make the build reproducible. When the source date is fixed (e.g. by setting <code>SOURCE_DATE_EPOCH<\/code>), this flag will be turned on by default. Otherwise, the value is determined by heuristics. If it is explicitly turned off, the build might not be reproducible.<\/p><\/li>\n+<p>This option controls some additional behavior needed to make the\n+build reproducible. When the source date is fixed (e.g. by setting\n+<code>SOURCE_DATE_EPOCH<\/code>), this flag will be turned on by default.\n+Otherwise, the value is determined by heuristics. If it is explicitly\n+turned off, the build might not be reproducible.<\/p><\/li>\n@@ -925,1 +1897,2 @@\n-<h2 id=\"hints-and-suggestions-for-advanced-users\">Hints and Suggestions for Advanced Users<\/h2>\n+<h2 id=\"hints-and-suggestions-for-advanced-users\">Hints and Suggestions\n+for Advanced Users<\/h2>\n@@ -927,3 +1900,15 @@\n-<p>The <code>configure<\/code> and <code>make<\/code> commands tries to play nice with bash command-line completion (using <code>&lt;tab&gt;<\/code> or <code>&lt;tab&gt;&lt;tab&gt;<\/code>). To use this functionality, make sure you enable completion in your <code>~\/.bashrc<\/code> (see instructions for bash in your operating system).<\/p>\n-<p>Make completion will work out of the box, and will complete valid make targets. For instance, typing <code>make jdk-i&lt;tab&gt;<\/code> will complete to <code>make jdk-image<\/code>.<\/p>\n-<p>The <code>configure<\/code> script can get completion for options, but for this to work you need to help <code>bash<\/code> on the way. The standard way of running the script, <code>bash configure<\/code>, will not be understood by bash completion. You need <code>configure<\/code> to be the command to run. One way to achieve this is to add a simple helper script to your path:<\/p>\n+<p>The <code>configure<\/code> and <code>make<\/code> commands tries to\n+play nice with bash command-line completion (using\n+<code>&lt;tab&gt;<\/code> or <code>&lt;tab&gt;&lt;tab&gt;<\/code>). To use\n+this functionality, make sure you enable completion in your\n+<code>~\/.bashrc<\/code> (see instructions for bash in your operating\n+system).<\/p>\n+<p>Make completion will work out of the box, and will complete valid\n+make targets. For instance, typing <code>make jdk-i&lt;tab&gt;<\/code>\n+will complete to <code>make jdk-image<\/code>.<\/p>\n+<p>The <code>configure<\/code> script can get completion for options, but\n+for this to work you need to help <code>bash<\/code> on the way. The\n+standard way of running the script, <code>bash configure<\/code>, will\n+not be understood by bash completion. You need <code>configure<\/code> to\n+be the command to run. One way to achieve this is to add a simple helper\n+script to your path:<\/p>\n@@ -941,4 +1926,21 @@\n-<p>Now <code>configure --en&lt;tab&gt;-dt&lt;tab&gt;<\/code> will result in <code>configure --enable-dtrace<\/code>.<\/p>\n-<h3 id=\"using-multiple-configurations\">Using Multiple Configurations<\/h3>\n-<p>You can have multiple configurations for a single source repository. When you create a new configuration, run <code>configure --with-conf-name=&lt;name&gt;<\/code> to create a configuration with the name <code>&lt;name&gt;<\/code>. Alternatively, you can create a directory under <code>build<\/code> and run <code>configure<\/code> from there, e.g. <code>mkdir build\/&lt;name&gt; &amp;&amp; cd build\/&lt;name&gt; &amp;&amp; bash ..\/..\/configure<\/code>.<\/p>\n-<p>Then you can build that configuration using <code>make CONF_NAME=&lt;name&gt;<\/code> or <code>make CONF=&lt;pattern&gt;<\/code>, where <code>&lt;pattern&gt;<\/code> is a substring matching one or several configurations, e.g. <code>CONF=debug<\/code>. The special empty pattern (<code>CONF=<\/code>) will match <em>all<\/em> available configuration, so <code>make CONF= hotspot<\/code> will build the <code>hotspot<\/code> target for all configurations. Alternatively, you can execute <code>make<\/code> in the configuration directory, e.g. <code>cd build\/&lt;name&gt; &amp;&amp; make<\/code>.<\/p>\n+<p>Now <code>configure --en&lt;tab&gt;-dt&lt;tab&gt;<\/code> will result\n+in <code>configure --enable-dtrace<\/code>.<\/p>\n+<h3 id=\"using-multiple-configurations\">Using Multiple\n+Configurations<\/h3>\n+<p>You can have multiple configurations for a single source repository.\n+When you create a new configuration, run\n+<code>configure --with-conf-name=&lt;name&gt;<\/code> to create a\n+configuration with the name <code>&lt;name&gt;<\/code>. Alternatively,\n+you can create a directory under <code>build<\/code> and run\n+<code>configure<\/code> from there, e.g.\n+<code>mkdir build\/&lt;name&gt; &amp;&amp; cd build\/&lt;name&gt; &amp;&amp; bash ..\/..\/configure<\/code>.<\/p>\n+<p>Then you can build that configuration using\n+<code>make CONF_NAME=&lt;name&gt;<\/code> or\n+<code>make CONF=&lt;pattern&gt;<\/code>, where\n+<code>&lt;pattern&gt;<\/code> is a substring matching one or several\n+configurations, e.g. <code>CONF=debug<\/code>. The special empty pattern\n+(<code>CONF=<\/code>) will match <em>all<\/em> available configuration, so\n+<code>make CONF= hotspot<\/code> will build the <code>hotspot<\/code>\n+target for all configurations. Alternatively, you can execute\n+<code>make<\/code> in the configuration directory, e.g.\n+<code>cd build\/&lt;name&gt; &amp;&amp; make<\/code>.<\/p>\n@@ -946,7 +1948,28 @@\n-<p>If you update the repository and part of the configure script has changed, the build system will force you to re-run <code>configure<\/code>.<\/p>\n-<p>Most of the time, you will be fine by running <code>configure<\/code> again with the same arguments as the last time, which can easily be performed by <code>make reconfigure<\/code>. To simplify this, you can use the <code>CONF_CHECK<\/code> make control variable, either as <code>make CONF_CHECK=auto<\/code>, or by setting an environment variable. For instance, if you add <code>export CONF_CHECK=auto<\/code> to your <code>.bashrc<\/code> file, <code>make<\/code> will always run <code>reconfigure<\/code> automatically whenever the configure script has changed.<\/p>\n-<p>You can also use <code>CONF_CHECK=ignore<\/code> to skip the check for a needed configure update. This might speed up the build, but comes at the risk of an incorrect build result. This is only recommended if you know what you're doing.<\/p>\n-<p>From time to time, you will also need to modify the command line to <code>configure<\/code> due to changes. Use <code>make print-configuration<\/code> to show the command line used for your current configuration.<\/p>\n-<h3 id=\"using-fine-grained-make-targets\">Using Fine-Grained Make Targets<\/h3>\n-<p>The default behavior for make is to create consistent and correct output, at the expense of build speed, if necessary.<\/p>\n-<p>If you are prepared to take some risk of an incorrect build, and know enough of the system to understand how things build and interact, you can speed up the build process considerably by instructing make to only build a portion of the product.<\/p>\n+<p>If you update the repository and part of the configure script has\n+changed, the build system will force you to re-run\n+<code>configure<\/code>.<\/p>\n+<p>Most of the time, you will be fine by running <code>configure<\/code>\n+again with the same arguments as the last time, which can easily be\n+performed by <code>make reconfigure<\/code>. To simplify this, you can\n+use the <code>CONF_CHECK<\/code> make control variable, either as\n+<code>make CONF_CHECK=auto<\/code>, or by setting an environment\n+variable. For instance, if you add <code>export CONF_CHECK=auto<\/code>\n+to your <code>.bashrc<\/code> file, <code>make<\/code> will always run\n+<code>reconfigure<\/code> automatically whenever the configure script has\n+changed.<\/p>\n+<p>You can also use <code>CONF_CHECK=ignore<\/code> to skip the check for\n+a needed configure update. This might speed up the build, but comes at\n+the risk of an incorrect build result. This is only recommended if you\n+know what you're doing.<\/p>\n+<p>From time to time, you will also need to modify the command line to\n+<code>configure<\/code> due to changes. Use\n+<code>make print-configuration<\/code> to show the command line used for\n+your current configuration.<\/p>\n+<h3 id=\"using-fine-grained-make-targets\">Using Fine-Grained Make\n+Targets<\/h3>\n+<p>The default behavior for make is to create consistent and correct\n+output, at the expense of build speed, if necessary.<\/p>\n+<p>If you are prepared to take some risk of an incorrect build, and know\n+enough of the system to understand how things build and interact, you\n+can speed up the build process considerably by instructing make to only\n+build a portion of the product.<\/p>\n@@ -954,4 +1977,16 @@\n-<p>The safe way to use fine-grained make targets is to use the module specific make targets. All source code in the JDK is organized so it belongs to a module, e.g. <code>java.base<\/code> or <code>jdk.jdwp.agent<\/code>. You can build only a specific module, by giving it as make target: <code>make jdk.jdwp.agent<\/code>. If the specified module depends on other modules (e.g. <code>java.base<\/code>), those modules will be built first.<\/p>\n-<p>You can also specify a set of modules, just as you can always specify a set of make targets: <code>make jdk.crypto.cryptoki jdk.crypto.ec jdk.crypto.mscapi<\/code><\/p>\n-<h4 id=\"building-individual-module-phases\">Building Individual Module Phases<\/h4>\n-<p>The build process for each module is divided into separate phases. Not all modules need all phases. Which are needed depends on what kind of source code and other artifact the module consists of. The phases are:<\/p>\n+<p>The safe way to use fine-grained make targets is to use the module\n+specific make targets. All source code in the JDK is organized so it\n+belongs to a module, e.g. <code>java.base<\/code> or\n+<code>jdk.jdwp.agent<\/code>. You can build only a specific module, by\n+giving it as make target: <code>make jdk.jdwp.agent<\/code>. If the\n+specified module depends on other modules (e.g. <code>java.base<\/code>),\n+those modules will be built first.<\/p>\n+<p>You can also specify a set of modules, just as you can always specify\n+a set of make targets:\n+<code>make jdk.crypto.cryptoki jdk.crypto.ec jdk.crypto.mscapi<\/code><\/p>\n+<h4 id=\"building-individual-module-phases\">Building Individual Module\n+Phases<\/h4>\n+<p>The build process for each module is divided into separate phases.\n+Not all modules need all phases. Which are needed depends on what kind\n+of source code and other artifact the module consists of. The phases\n+are:<\/p>\n@@ -966,4 +2001,13 @@\n-<p>You can build only a single phase for a module by using the notation <code>$MODULE-$PHASE<\/code>. For instance, to build the <code>gensrc<\/code> phase for <code>java.base<\/code>, use <code>make java.base-gensrc<\/code>.<\/p>\n-<p>Note that some phases may depend on others, e.g. <code>java<\/code> depends on <code>gensrc<\/code> (if present). Make will build all needed prerequisites before building the requested phase.<\/p>\n-<h4 id=\"skipping-the-dependency-check\">Skipping the Dependency Check<\/h4>\n-<p>When using an iterative development style with frequent quick rebuilds, the dependency check made by make can take up a significant portion of the time spent on the rebuild. In such cases, it can be useful to bypass the dependency check in make.<\/p>\n+<p>You can build only a single phase for a module by using the notation\n+<code>$MODULE-$PHASE<\/code>. For instance, to build the\n+<code>gensrc<\/code> phase for <code>java.base<\/code>, use\n+<code>make java.base-gensrc<\/code>.<\/p>\n+<p>Note that some phases may depend on others, e.g. <code>java<\/code>\n+depends on <code>gensrc<\/code> (if present). Make will build all needed\n+prerequisites before building the requested phase.<\/p>\n+<h4 id=\"skipping-the-dependency-check\">Skipping the Dependency\n+Check<\/h4>\n+<p>When using an iterative development style with frequent quick\n+rebuilds, the dependency check made by make can take up a significant\n+portion of the time spent on the rebuild. In such cases, it can be\n+useful to bypass the dependency check in make.<\/p>\n@@ -971,1 +2015,2 @@\n-<p><strong>Note that if used incorrectly, this can lead to a broken build!<\/strong><\/p>\n+<p><strong>Note that if used incorrectly, this can lead to a broken\n+build!<\/strong><\/p>\n@@ -973,7 +2018,26 @@\n-<p>To achieve this, append <code>-only<\/code> to the build target. For instance, <code>make jdk.jdwp.agent-java-only<\/code> will <em>only<\/em> build the <code>java<\/code> phase of the <code>jdk.jdwp.agent<\/code> module. If the required dependencies are not present, the build can fail. On the other hand, the execution time measures in milliseconds.<\/p>\n-<p>A useful pattern is to build the first time normally (e.g. <code>make jdk.jdwp.agent<\/code>) and then on subsequent builds, use the <code>-only<\/code> make target.<\/p>\n-<h4 id=\"rebuilding-part-of-java.base-jdk_filter\">Rebuilding Part of java.base (JDK_FILTER)<\/h4>\n-<p>If you are modifying files in <code>java.base<\/code>, which is the by far largest module in the JDK, then you need to rebuild all those files whenever a single file has changed. (This inefficiency will hopefully be addressed in JDK 10.)<\/p>\n-<p>As a hack, you can use the make control variable <code>JDK_FILTER<\/code> to specify a pattern that will be used to limit the set of files being recompiled. For instance, <code>make java.base JDK_FILTER=javax\/crypto<\/code> (or, to combine methods, <code>make java.base-java-only JDK_FILTER=javax\/crypto<\/code>) will limit the compilation to files in the <code>javax.crypto<\/code> package.<\/p>\n-<h2 id=\"understanding-the-build-system\">Understanding the Build System<\/h2>\n-<p>This section will give you a more technical description on the details of the build system.<\/p>\n+<p>To achieve this, append <code>-only<\/code> to the build target. For\n+instance, <code>make jdk.jdwp.agent-java-only<\/code> will <em>only<\/em>\n+build the <code>java<\/code> phase of the <code>jdk.jdwp.agent<\/code>\n+module. If the required dependencies are not present, the build can\n+fail. On the other hand, the execution time measures in\n+milliseconds.<\/p>\n+<p>A useful pattern is to build the first time normally (e.g.\n+<code>make jdk.jdwp.agent<\/code>) and then on subsequent builds, use the\n+<code>-only<\/code> make target.<\/p>\n+<h4 id=\"rebuilding-part-of-java.base-jdk_filter\">Rebuilding Part of\n+java.base (JDK_FILTER)<\/h4>\n+<p>If you are modifying files in <code>java.base<\/code>, which is the by\n+far largest module in the JDK, then you need to rebuild all those files\n+whenever a single file has changed. (This inefficiency will hopefully be\n+addressed in JDK 10.)<\/p>\n+<p>As a hack, you can use the make control variable\n+<code>JDK_FILTER<\/code> to specify a pattern that will be used to limit\n+the set of files being recompiled. For instance,\n+<code>make java.base JDK_FILTER=javax\/crypto<\/code> (or, to combine\n+methods, <code>make java.base-java-only JDK_FILTER=javax\/crypto<\/code>)\n+will limit the compilation to files in the <code>javax.crypto<\/code>\n+package.<\/p>\n+<h2 id=\"understanding-the-build-system\">Understanding the Build\n+System<\/h2>\n+<p>This section will give you a more technical description on the\n+details of the build system.<\/p>\n@@ -981,2 +2045,11 @@\n-<p>The build system expects to find one or more configuration. These are technically defined by the <code>spec.gmk<\/code> in a subdirectory to the <code>build<\/code> subdirectory. The <code>spec.gmk<\/code> file is generated by <code>configure<\/code>, and contains in principle the configuration (directly or by files included by <code>spec.gmk<\/code>).<\/p>\n-<p>You can, in fact, select a configuration to build by pointing to the <code>spec.gmk<\/code> file with the <code>SPEC<\/code> make control variable, e.g. <code>make SPEC=$BUILD\/spec.gmk<\/code>. While this is not the recommended way to call <code>make<\/code> as a user, it is what is used under the hood by the build system.<\/p>\n+<p>The build system expects to find one or more configuration. These are\n+technically defined by the <code>spec.gmk<\/code> in a subdirectory to\n+the <code>build<\/code> subdirectory. The <code>spec.gmk<\/code> file is\n+generated by <code>configure<\/code>, and contains in principle the\n+configuration (directly or by files included by\n+<code>spec.gmk<\/code>).<\/p>\n+<p>You can, in fact, select a configuration to build by pointing to the\n+<code>spec.gmk<\/code> file with the <code>SPEC<\/code> make control\n+variable, e.g. <code>make SPEC=$BUILD\/spec.gmk<\/code>. While this is not\n+the recommended way to call <code>make<\/code> as a user, it is what is\n+used under the hood by the build system.<\/p>\n@@ -984,1 +2057,4 @@\n-<p>The build output for a configuration will end up in <code>build\/&lt;configuration name&gt;<\/code>, which we refer to as <code>$BUILD<\/code> in this document. The <code>$BUILD<\/code> directory contains the following important directories:<\/p>\n+<p>The build output for a configuration will end up in\n+<code>build\/&lt;configuration name&gt;<\/code>, which we refer to as\n+<code>$BUILD<\/code> in this document. The <code>$BUILD<\/code> directory\n+contains the following important directories:<\/p>\n@@ -996,7 +2072,23 @@\n-<li><p><code>images<\/code>: This is the directory were the output of the <code>*-image<\/code> make targets end up. For instance, <code>make jdk-image<\/code> ends up in <code>images\/jdk<\/code>.<\/p><\/li>\n-<li><p><code>jdk<\/code>: This is the &quot;exploded image&quot;. After <code>make jdk<\/code>, you will be able to launch the newly built JDK by running <code>$BUILD\/jdk\/bin\/java<\/code>.<\/p><\/li>\n-<li><p><code>test-results<\/code>: This directory contains the results from running tests.<\/p><\/li>\n-<li><p><code>support<\/code>: This is an area for intermediate files needed during the build, e.g. generated source code, object files and class files. Some noteworthy directories in <code>support<\/code> is <code>gensrc<\/code>, which contains the generated source code, and the <code>modules_*<\/code> directories, which contains the files in a per-module hierarchy that will later be collapsed into the <code>jdk<\/code> directory of the exploded image.<\/p><\/li>\n-<li><p><code>buildtools<\/code>: This is an area for tools compiled for the build platform that are used during the rest of the build.<\/p><\/li>\n-<li><p><code>hotspot<\/code>: This is an area for intermediate files needed when building hotspot.<\/p><\/li>\n-<li><p><code>configure-support<\/code>, <code>make-support<\/code> and <code>test-support<\/code>: These directories contain files that are needed by the build system for <code>configure<\/code>, <code>make<\/code> and for running tests.<\/p><\/li>\n+<li><p><code>images<\/code>: This is the directory were the output of the\n+<code>*-image<\/code> make targets end up. For instance,\n+<code>make jdk-image<\/code> ends up in <code>images\/jdk<\/code>.<\/p><\/li>\n+<li><p><code>jdk<\/code>: This is the \"exploded image\". After\n+<code>make jdk<\/code>, you will be able to launch the newly built JDK by\n+running <code>$BUILD\/jdk\/bin\/java<\/code>.<\/p><\/li>\n+<li><p><code>test-results<\/code>: This directory contains the results\n+from running tests.<\/p><\/li>\n+<li><p><code>support<\/code>: This is an area for intermediate files\n+needed during the build, e.g. generated source code, object files and\n+class files. Some noteworthy directories in <code>support<\/code> is\n+<code>gensrc<\/code>, which contains the generated source code, and the\n+<code>modules_*<\/code> directories, which contains the files in a\n+per-module hierarchy that will later be collapsed into the\n+<code>jdk<\/code> directory of the exploded image.<\/p><\/li>\n+<li><p><code>buildtools<\/code>: This is an area for tools compiled for\n+the build platform that are used during the rest of the build.<\/p><\/li>\n+<li><p><code>hotspot<\/code>: This is an area for intermediate files\n+needed when building hotspot.<\/p><\/li>\n+<li><p><code>configure-support<\/code>, <code>make-support<\/code> and\n+<code>test-support<\/code>: These directories contain files that are\n+needed by the build system for <code>configure<\/code>, <code>make<\/code>\n+and for running tests.<\/p><\/li>\n@@ -1005,3 +2097,10 @@\n-<p>Windows path typically look like <code>C:\\User\\foo<\/code>, while Unix paths look like <code>\/home\/foo<\/code>. Tools with roots from Unix often experience issues related to this mismatch when running on Windows.<\/p>\n-<p>In the JDK build, we always use Unix paths internally, and only just before calling a tool that does not understand Unix paths do we convert them to Windows paths.<\/p>\n-<p>This conversion is done by the <code>fixpath<\/code> tool, which is a small wrapper that modifies unix-style paths to Windows-style paths in command lines. Fixpath is compiled automatically by <code>configure<\/code>.<\/p>\n+<p>Windows path typically look like <code>C:\\User\\foo<\/code>, while Unix\n+paths look like <code>\/home\/foo<\/code>. Tools with roots from Unix often\n+experience issues related to this mismatch when running on Windows.<\/p>\n+<p>In the JDK build, we always use Unix paths internally, and only just\n+before calling a tool that does not understand Unix paths do we convert\n+them to Windows paths.<\/p>\n+<p>This conversion is done by the <code>fixpath<\/code> tool, which is a\n+small wrapper that modifies unix-style paths to Windows-style paths in\n+command lines. Fixpath is compiled automatically by\n+<code>configure<\/code>.<\/p>\n@@ -1009,2 +2108,9 @@\n-<p>Native libraries and executables can have debug symbol (and other debug information) associated with them. How this works is very much platform dependent, but a common problem is that debug symbol information takes a lot of disk space, but is rarely needed by the end user.<\/p>\n-<p>The JDK supports different methods on how to handle debug symbols. The method used is selected by <code>--with-native-debug-symbols<\/code>, and available methods are <code>none<\/code>, <code>internal<\/code>, <code>external<\/code>, <code>zipped<\/code>.<\/p>\n+<p>Native libraries and executables can have debug symbol (and other\n+debug information) associated with them. How this works is very much\n+platform dependent, but a common problem is that debug symbol\n+information takes a lot of disk space, but is rarely needed by the end\n+user.<\/p>\n+<p>The JDK supports different methods on how to handle debug symbols.\n+The method used is selected by <code>--with-native-debug-symbols<\/code>,\n+and available methods are <code>none<\/code>, <code>internal<\/code>,\n+<code>external<\/code>, <code>zipped<\/code>.<\/p>\n@@ -1012,4 +2118,12 @@\n-<li><p><code>none<\/code> means that no debug symbols will be generated during the build.<\/p><\/li>\n-<li><p><code>internal<\/code> means that debug symbols will be generated during the build, and they will be stored in the generated binary.<\/p><\/li>\n-<li><p><code>external<\/code> means that debug symbols will be generated during the build, and after the compilation, they will be moved into a separate <code>.debuginfo<\/code> file. (This was previously known as FDS, Full Debug Symbols).<\/p><\/li>\n-<li><p><code>zipped<\/code> is like <code>external<\/code>, but the .debuginfo file will also be zipped into a <code>.diz<\/code> file.<\/p><\/li>\n+<li><p><code>none<\/code> means that no debug symbols will be generated\n+during the build.<\/p><\/li>\n+<li><p><code>internal<\/code> means that debug symbols will be generated\n+during the build, and they will be stored in the generated\n+binary.<\/p><\/li>\n+<li><p><code>external<\/code> means that debug symbols will be generated\n+during the build, and after the compilation, they will be moved into a\n+separate <code>.debuginfo<\/code> file. (This was previously known as\n+FDS, Full Debug Symbols).<\/p><\/li>\n+<li><p><code>zipped<\/code> is like <code>external<\/code>, but the\n+.debuginfo file will also be zipped into a <code>.diz<\/code>\n+file.<\/p><\/li>\n@@ -1017,1 +2131,4 @@\n-<p>When building for distribution, <code>zipped<\/code> is a good solution. Binaries built with <code>internal<\/code> is suitable for use by developers, since they facilitate debugging, but should be stripped before distributed to end users.<\/p>\n+<p>When building for distribution, <code>zipped<\/code> is a good\n+solution. Binaries built with <code>internal<\/code> is suitable for use\n+by developers, since they facilitate debugging, but should be stripped\n+before distributed to end users.<\/p>\n@@ -1019,7 +2136,31 @@\n-<p>The <code>configure<\/code> script is based on the autoconf framework, but in some details deviate from a normal autoconf <code>configure<\/code> script.<\/p>\n-<p>The <code>configure<\/code> script in the top level directory of the JDK is just a thin wrapper that calls <code>make\/autoconf\/configure<\/code>. This in turn will run <code>autoconf<\/code> to create the runnable (generated) configure script, as <code>.build\/generated-configure.sh<\/code>. Apart from being responsible for the generation of the runnable script, the <code>configure<\/code> script also provides functionality that is not easily expressed in the normal Autoconf framework. As part of this functionality, the generated script is called.<\/p>\n-<p>The build system will detect if the Autoconf source files have changed, and will trigger a regeneration of the generated script if needed. You can also manually request such an update by <code>bash configure autogen<\/code>.<\/p>\n-<p>In previous versions of the JDK, the generated script was checked in at <code>make\/autoconf\/generated-configure.sh<\/code>. This is no longer the case.<\/p>\n-<h3 id=\"developing-the-build-system-itself\">Developing the Build System Itself<\/h3>\n-<p>This section contains a few remarks about how to develop for the build system itself. It is not relevant if you are only making changes in the product source code.<\/p>\n-<p>While technically using <code>make<\/code>, the make source files of the JDK does not resemble most other Makefiles. Instead of listing specific targets and actions (perhaps using patterns), the basic modus operandi is to call a high-level function (or properly, macro) from the API in <code>make\/common<\/code>. For instance, to compile all classes in the <code>jdk.internal.foo<\/code> package in the <code>jdk.foo<\/code> module, a call like this would be made:<\/p>\n+<p>The <code>configure<\/code> script is based on the autoconf framework,\n+but in some details deviate from a normal autoconf\n+<code>configure<\/code> script.<\/p>\n+<p>The <code>configure<\/code> script in the top level directory of the\n+JDK is just a thin wrapper that calls\n+<code>make\/autoconf\/configure<\/code>. This in turn will run\n+<code>autoconf<\/code> to create the runnable (generated) configure\n+script, as <code>.build\/generated-configure.sh<\/code>. Apart from being\n+responsible for the generation of the runnable script, the\n+<code>configure<\/code> script also provides functionality that is not\n+easily expressed in the normal Autoconf framework. As part of this\n+functionality, the generated script is called.<\/p>\n+<p>The build system will detect if the Autoconf source files have\n+changed, and will trigger a regeneration of the generated script if\n+needed. You can also manually request such an update by\n+<code>bash configure autogen<\/code>.<\/p>\n+<p>In previous versions of the JDK, the generated script was checked in\n+at <code>make\/autoconf\/generated-configure.sh<\/code>. This is no longer\n+the case.<\/p>\n+<h3 id=\"developing-the-build-system-itself\">Developing the Build System\n+Itself<\/h3>\n+<p>This section contains a few remarks about how to develop for the\n+build system itself. It is not relevant if you are only making changes\n+in the product source code.<\/p>\n+<p>While technically using <code>make<\/code>, the make source files of\n+the JDK does not resemble most other Makefiles. Instead of listing\n+specific targets and actions (perhaps using patterns), the basic modus\n+operandi is to call a high-level function (or properly, macro) from the\n+API in <code>make\/common<\/code>. For instance, to compile all classes in\n+the <code>jdk.internal.foo<\/code> package in the <code>jdk.foo<\/code>\n+module, a call like this would be made:<\/p>\n@@ -1032,5 +2173,16 @@\n-<p>By encapsulating and expressing the high-level knowledge of <em>what<\/em> should be done, rather than <em>how<\/em> it should be done (as is normal in Makefiles), we can build a much more powerful and flexible build system.<\/p>\n-<p>Correct dependency tracking is paramount. Sloppy dependency tracking will lead to improper parallelization, or worse, race conditions.<\/p>\n-<p>To test for\/debug race conditions, try running <code>make JOBS=1<\/code> and <code>make JOBS=100<\/code> and see if it makes any difference. (It shouldn't).<\/p>\n-<p>To compare the output of two different builds and see if, and how, they differ, run <code>$BUILD1\/compare.sh -o $BUILD2<\/code>, where <code>$BUILD1<\/code> and <code>$BUILD2<\/code> are the two builds you want to compare.<\/p>\n-<p>To automatically build two consecutive versions and compare them, use <code>COMPARE_BUILD<\/code>. The value of <code>COMPARE_BUILD<\/code> is a set of variable=value assignments, like this:<\/p>\n+<p>By encapsulating and expressing the high-level knowledge of\n+<em>what<\/em> should be done, rather than <em>how<\/em> it should be done\n+(as is normal in Makefiles), we can build a much more powerful and\n+flexible build system.<\/p>\n+<p>Correct dependency tracking is paramount. Sloppy dependency tracking\n+will lead to improper parallelization, or worse, race conditions.<\/p>\n+<p>To test for\/debug race conditions, try running\n+<code>make JOBS=1<\/code> and <code>make JOBS=100<\/code> and see if it\n+makes any difference. (It shouldn't).<\/p>\n+<p>To compare the output of two different builds and see if, and how,\n+they differ, run <code>$BUILD1\/compare.sh -o $BUILD2<\/code>, where\n+<code>$BUILD1<\/code> and <code>$BUILD2<\/code> are the two builds you\n+want to compare.<\/p>\n+<p>To automatically build two consecutive versions and compare them, use\n+<code>COMPARE_BUILD<\/code>. The value of <code>COMPARE_BUILD<\/code> is a\n+set of variable=value assignments, like this:<\/p>\n@@ -1038,3 +2190,8 @@\n-<p>See <code>make\/InitSupport.gmk<\/code> for details on how to use <code>COMPARE_BUILD<\/code>.<\/p>\n-<p>To analyze build performance, run with <code>LOG=trace<\/code> and check <code>$BUILD\/build-trace-time.log<\/code>. Use <code>JOBS=1<\/code> to avoid parallelism.<\/p>\n-<p>Please check that you adhere to the <a href=\"http:\/\/openjdk.org\/groups\/build\/doc\/code-conventions.html\">Code Conventions for the Build System<\/a> before submitting patches.<\/p>\n+<p>See <code>make\/InitSupport.gmk<\/code> for details on how to use\n+<code>COMPARE_BUILD<\/code>.<\/p>\n+<p>To analyze build performance, run with <code>LOG=trace<\/code> and\n+check <code>$BUILD\/build-trace-time.log<\/code>. Use <code>JOBS=1<\/code>\n+to avoid parallelism.<\/p>\n+<p>Please check that you adhere to the <a\n+href=\"http:\/\/openjdk.org\/groups\/build\/doc\/code-conventions.html\">Code\n+Conventions for the Build System<\/a> before submitting patches.<\/p>\n@@ -1042,4 +2199,19 @@\n-<p>So, now you've built your JDK, and made your first patch, and want to contribute it back to the OpenJDK Community.<\/p>\n-<p>First of all: Thank you! We gladly welcome your contribution. However, please bear in mind that the JDK is a massive project, and we must ask you to follow our rules and guidelines to be able to accept your contribution.<\/p>\n-<p>The official place to start is the <a href=\"http:\/\/openjdk.org\/contribute\/\">'How to contribute' page<\/a>. There is also an official (but somewhat outdated and skimpy on details) <a href=\"http:\/\/openjdk.org\/guide\/\">Developer's Guide<\/a>.<\/p>\n-<p>If this seems overwhelming to you, the Adoption Group is there to help you! A good place to start is their <a href=\"https:\/\/wiki.openjdk.org\/display\/Adoption\/New+Contributor\">'New Contributor' page<\/a>, or start reading the comprehensive <a href=\"https:\/\/adoptopenjdk.gitbooks.io\/adoptopenjdk-getting-started-kit\/en\/\">Getting Started Kit<\/a>. The Adoption Group will also happily answer any questions you have about contributing. Contact them by <a href=\"http:\/\/mail.openjdk.org\/mailman\/listinfo\/adoption-discuss\">mail<\/a> or <a href=\"http:\/\/openjdk.org\/irc\/\">IRC<\/a>.<\/p>\n+<p>So, now you've built your JDK, and made your first patch, and want to\n+contribute it back to the OpenJDK Community.<\/p>\n+<p>First of all: Thank you! We gladly welcome your contribution.\n+However, please bear in mind that the JDK is a massive project, and we\n+must ask you to follow our rules and guidelines to be able to accept\n+your contribution.<\/p>\n+<p>The official place to start is the <a\n+href=\"http:\/\/openjdk.org\/contribute\/\">'How to contribute' page<\/a>.\n+There is also an official (but somewhat outdated and skimpy on details)\n+<a href=\"http:\/\/openjdk.org\/guide\/\">Developer's Guide<\/a>.<\/p>\n+<p>If this seems overwhelming to you, the Adoption Group is there to\n+help you! A good place to start is their <a\n+href=\"https:\/\/wiki.openjdk.org\/display\/Adoption\/New+Contributor\">'New\n+Contributor' page<\/a>, or start reading the comprehensive <a\n+href=\"https:\/\/adoptopenjdk.gitbooks.io\/adoptopenjdk-getting-started-kit\/en\/\">Getting\n+Started Kit<\/a>. The Adoption Group will also happily answer any\n+questions you have about contributing. Contact them by <a\n+href=\"http:\/\/mail.openjdk.org\/mailman\/listinfo\/adoption-discuss\">mail<\/a>\n+or <a href=\"http:\/\/openjdk.org\/irc\/\">IRC<\/a>.<\/p>\n@@ -1047,1 +2219,4 @@\n-<p>If you want to contribute changes to this document, edit <code>doc\/building.md<\/code> and then run <code>make update-build-docs<\/code> to generate the same changes in <code>doc\/building.html<\/code>.<\/p>\n+<p>If you want to contribute changes to this document, edit\n+<code>doc\/building.md<\/code> and then run\n+<code>make update-build-docs<\/code> to generate the same changes in\n+<code>doc\/building.html<\/code>.<\/p>\n","filename":"doc\/building.html","additions":1686,"deletions":511,"binary":false,"changes":2197,"status":"modified"},{"patch":"@@ -8,5 +8,13 @@\n-  <style type=\"text\/css\">\n-      code{white-space: pre-wrap;}\n-      span.smallcaps{font-variant: small-caps;}\n-      span.underline{text-decoration: underline;}\n-      div.column{display: inline-block; vertical-align: top; width: 50%;}\n+  <style>\n+    code{white-space: pre-wrap;}\n+    span.smallcaps{font-variant: small-caps;}\n+    div.columns{display: flex; gap: min(4vw, 1.5em);}\n+    div.column{flex: auto; overflow-x: auto;}\n+    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n+    ul.task-list{list-style: none;}\n+    ul.task-list li input[type=\"checkbox\"] {\n+      width: 0.8em;\n+      margin: 0 0.8em 0.2em -1.6em;\n+      vertical-align: middle;\n+    }\n+    .display.math{display: block; text-align: center; margin: 0.5rem auto;}\n@@ -23,1 +31,3 @@\n-<nav id=\"TOC\">\n+<nav id=\"TOC\" role=\"doc-toc\">\n+<ul>\n+<li><a href=\"#introduction\" id=\"toc-introduction\">Introduction<\/a>\n@@ -25,3 +35,5 @@\n-<li><a href=\"#introduction\">Introduction<\/a><ul>\n-<li><a href=\"#why-care-about-style\">Why Care About Style?<\/a><\/li>\n-<li><a href=\"#counterexamples-and-updates\">Counterexamples and Updates<\/a><\/li>\n+<li><a href=\"#why-care-about-style\" id=\"toc-why-care-about-style\">Why\n+Care About Style?<\/a><\/li>\n+<li><a href=\"#counterexamples-and-updates\"\n+id=\"toc-counterexamples-and-updates\">Counterexamples and\n+Updates<\/a><\/li>\n@@ -29,9 +41,13 @@\n-<li><a href=\"#structure-and-formatting\">Structure and Formatting<\/a><ul>\n-<li><a href=\"#factoring-and-class-design\">Factoring and Class Design<\/a><\/li>\n-<li><a href=\"#source-files\">Source Files<\/a><\/li>\n-<li><a href=\"#jtreg-tests\">JTReg Tests<\/a><\/li>\n-<li><a href=\"#naming\">Naming<\/a><\/li>\n-<li><a href=\"#commenting\">Commenting<\/a><\/li>\n-<li><a href=\"#macros\">Macros<\/a><\/li>\n-<li><a href=\"#whitespace\">Whitespace<\/a><\/li>\n-<li><a href=\"#miscellaneous\">Miscellaneous<\/a><\/li>\n+<li><a href=\"#structure-and-formatting\"\n+id=\"toc-structure-and-formatting\">Structure and Formatting<\/a>\n+<ul>\n+<li><a href=\"#factoring-and-class-design\"\n+id=\"toc-factoring-and-class-design\">Factoring and Class Design<\/a><\/li>\n+<li><a href=\"#source-files\" id=\"toc-source-files\">Source Files<\/a><\/li>\n+<li><a href=\"#jtreg-tests\" id=\"toc-jtreg-tests\">JTReg Tests<\/a><\/li>\n+<li><a href=\"#naming\" id=\"toc-naming\">Naming<\/a><\/li>\n+<li><a href=\"#commenting\" id=\"toc-commenting\">Commenting<\/a><\/li>\n+<li><a href=\"#macros\" id=\"toc-macros\">Macros<\/a><\/li>\n+<li><a href=\"#whitespace\" id=\"toc-whitespace\">Whitespace<\/a><\/li>\n+<li><a href=\"#miscellaneous\"\n+id=\"toc-miscellaneous\">Miscellaneous<\/a><\/li>\n@@ -39,19 +55,36 @@\n-<li><a href=\"#use-of-c-features\">Use of C++ Features<\/a><ul>\n-<li><a href=\"#error-handling\">Error Handling<\/a><\/li>\n-<li><a href=\"#rtti-runtime-type-information\">RTTI (Runtime Type Information)<\/a><\/li>\n-<li><a href=\"#memory-allocation\">Memory Allocation<\/a><\/li>\n-<li><a href=\"#class-inheritance\">Class Inheritance<\/a><\/li>\n-<li><a href=\"#namespaces\">Namespaces<\/a><\/li>\n-<li><a href=\"#c-standard-library\">C++ Standard Library<\/a><\/li>\n-<li><a href=\"#type-deduction\">Type Deduction<\/a><\/li>\n-<li><a href=\"#expression-sfinae\">Expression SFINAE<\/a><\/li>\n-<li><a href=\"#enum\">enum<\/a><\/li>\n-<li><a href=\"#thread_local\">thread_local<\/a><\/li>\n-<li><a href=\"#nullptr\">nullptr<\/a><\/li>\n-<li><a href=\"#atomic\">&lt;atomic&gt;<\/a><\/li>\n-<li><a href=\"#uniform-initialization\">Uniform Initialization<\/a><\/li>\n-<li><a href=\"#local-function-objects\">Local Function Objects<\/a><\/li>\n-<li><a href=\"#inheriting-constructors\">Inheriting constructors<\/a><\/li>\n-<li><a href=\"#additional-permitted-features\">Additional Permitted Features<\/a><\/li>\n-<li><a href=\"#excluded-features\">Excluded Features<\/a><\/li>\n-<li><a href=\"#undecided-features\">Undecided Features<\/a><\/li>\n+<li><a href=\"#use-of-c-features\" id=\"toc-use-of-c-features\">Use of C++\n+Features<\/a>\n+<ul>\n+<li><a href=\"#error-handling\" id=\"toc-error-handling\">Error\n+Handling<\/a><\/li>\n+<li><a href=\"#rtti-runtime-type-information\"\n+id=\"toc-rtti-runtime-type-information\">RTTI (Runtime Type\n+Information)<\/a><\/li>\n+<li><a href=\"#memory-allocation\" id=\"toc-memory-allocation\">Memory\n+Allocation<\/a><\/li>\n+<li><a href=\"#class-inheritance\" id=\"toc-class-inheritance\">Class\n+Inheritance<\/a><\/li>\n+<li><a href=\"#namespaces\" id=\"toc-namespaces\">Namespaces<\/a><\/li>\n+<li><a href=\"#c-standard-library\" id=\"toc-c-standard-library\">C++\n+Standard Library<\/a><\/li>\n+<li><a href=\"#type-deduction\" id=\"toc-type-deduction\">Type\n+Deduction<\/a><\/li>\n+<li><a href=\"#expression-sfinae\" id=\"toc-expression-sfinae\">Expression\n+SFINAE<\/a><\/li>\n+<li><a href=\"#enum\" id=\"toc-enum\">enum<\/a><\/li>\n+<li><a href=\"#thread_local\" id=\"toc-thread_local\">thread_local<\/a><\/li>\n+<li><a href=\"#nullptr\" id=\"toc-nullptr\">nullptr<\/a><\/li>\n+<li><a href=\"#atomic\" id=\"toc-atomic\">&lt;atomic&gt;<\/a><\/li>\n+<li><a href=\"#uniform-initialization\"\n+id=\"toc-uniform-initialization\">Uniform Initialization<\/a><\/li>\n+<li><a href=\"#local-function-objects\"\n+id=\"toc-local-function-objects\">Local Function Objects<\/a><\/li>\n+<li><a href=\"#inheriting-constructors\"\n+id=\"toc-inheriting-constructors\">Inheriting constructors<\/a><\/li>\n+<li><a href=\"#additional-permitted-features\"\n+id=\"toc-additional-permitted-features\">Additional Permitted\n+Features<\/a><\/li>\n+<li><a href=\"#excluded-features\" id=\"toc-excluded-features\">Excluded\n+Features<\/a><\/li>\n+<li><a href=\"#undecided-features\" id=\"toc-undecided-features\">Undecided\n+Features<\/a><\/li>\n@@ -62,1 +95,5 @@\n-<p>This is a collection of rules, guidelines, and suggestions for writing HotSpot code. Following these will help new code fit in with existing HotSpot code, making it easier to read and maintain. Failure to follow these guidelines may lead to discussion during code reviews, if not outright rejection of a change.<\/p>\n+<p>This is a collection of rules, guidelines, and suggestions for\n+writing HotSpot code. Following these will help new code fit in with\n+existing HotSpot code, making it easier to read and maintain. Failure to\n+follow these guidelines may lead to discussion during code reviews, if\n+not outright rejection of a change.<\/p>\n@@ -64,4 +101,24 @@\n-<p>Some programmers seem to have lexers and even C preprocessors installed directly behind their eyeballs. The rest of us require code that is not only functionally correct but also easy to read. More than that, since there is no one style for easy-to-read code, and since a mashup of many styles is just as confusing as no style at all, it is important for coders to be conscious of the many implicit stylistic choices that historically have gone into the HotSpot code base.<\/p>\n-<p>Some of these guidelines are driven by the cross-platform requirements for HotSpot. Shared code must work on a variety of platforms, and may encounter deficiencies in some. Using platform conditionalization in shared code is usually avoided, while shared code is strongly preferred to multiple platform-dependent implementations, so some language features may be recommended against.<\/p>\n-<p>Some of the guidelines here are relatively arbitrary choices among equally plausible alternatives. The purpose of stating and enforcing these rules is largely to provide a consistent look to the code. That consistency makes the code more readable by avoiding non-functional distractions from the interesting functionality.<\/p>\n-<p>When changing pre-existing code, it is reasonable to adjust it to match these conventions. Exception: If the pre-existing code clearly conforms locally to its own peculiar conventions, it is not worth reformatting the whole thing. Also consider separating changes that make extensive stylistic updates from those which make functional changes.<\/p>\n+<p>Some programmers seem to have lexers and even C preprocessors\n+installed directly behind their eyeballs. The rest of us require code\n+that is not only functionally correct but also easy to read. More than\n+that, since there is no one style for easy-to-read code, and since a\n+mashup of many styles is just as confusing as no style at all, it is\n+important for coders to be conscious of the many implicit stylistic\n+choices that historically have gone into the HotSpot code base.<\/p>\n+<p>Some of these guidelines are driven by the cross-platform\n+requirements for HotSpot. Shared code must work on a variety of\n+platforms, and may encounter deficiencies in some. Using platform\n+conditionalization in shared code is usually avoided, while shared code\n+is strongly preferred to multiple platform-dependent implementations, so\n+some language features may be recommended against.<\/p>\n+<p>Some of the guidelines here are relatively arbitrary choices among\n+equally plausible alternatives. The purpose of stating and enforcing\n+these rules is largely to provide a consistent look to the code. That\n+consistency makes the code more readable by avoiding non-functional\n+distractions from the interesting functionality.<\/p>\n+<p>When changing pre-existing code, it is reasonable to adjust it to\n+match these conventions. Exception: If the pre-existing code clearly\n+conforms locally to its own peculiar conventions, it is not worth\n+reformatting the whole thing. Also consider separating changes that make\n+extensive stylistic updates from those which make functional\n+changes.<\/p>\n@@ -69,5 +126,26 @@\n-<p>Many of the guidelines mentioned here have (sometimes widespread) counterexamples in the HotSpot code base. Finding a counterexample is not sufficient justification for new code to follow the counterexample as a precedent, since readers of your code will rightfully expect your code to follow the greater bulk of precedents documented here.<\/p>\n-<p>Occasionally a guideline mentioned here may be just out of synch with the actual HotSpot code base. If you find that a guideline is consistently contradicted by a large number of counterexamples, please bring it up for discussion and possible change. The architectural rule, of course, is &quot;When in Rome do as the Romans&quot;. Sometimes in the suburbs of Rome the rules are a little different; these differences can be pointed out here.<\/p>\n-<p>Proposed changes should be discussed on the <a href=\"mailto:hotspot-dev@openjdk.org\">HotSpot Developers<\/a> mailing list. Changes are likely to be cautious and incremental, since HotSpot coders have been using these guidelines for years.<\/p>\n-<p>Substantive changes are approved by <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc7282.html\">rough consensus<\/a> of the <a href=\"https:\/\/openjdk.org\/census#hotspot\">HotSpot Group<\/a> Members. The Group Lead determines whether consensus has been reached.<\/p>\n-<p>Editorial changes (changes that only affect the description of HotSpot style, not its substance) do not require the full consensus gathering process. The normal HotSpot pull request process may be used for editorial changes, with the additional requirement that the requisite reviewers are also HotSpot Group Members.<\/p>\n+<p>Many of the guidelines mentioned here have (sometimes widespread)\n+counterexamples in the HotSpot code base. Finding a counterexample is\n+not sufficient justification for new code to follow the counterexample\n+as a precedent, since readers of your code will rightfully expect your\n+code to follow the greater bulk of precedents documented here.<\/p>\n+<p>Occasionally a guideline mentioned here may be just out of synch with\n+the actual HotSpot code base. If you find that a guideline is\n+consistently contradicted by a large number of counterexamples, please\n+bring it up for discussion and possible change. The architectural rule,\n+of course, is \"When in Rome do as the Romans\". Sometimes in the suburbs\n+of Rome the rules are a little different; these differences can be\n+pointed out here.<\/p>\n+<p>Proposed changes should be discussed on the <a\n+href=\"mailto:hotspot-dev@openjdk.org\">HotSpot Developers<\/a> mailing\n+list. Changes are likely to be cautious and incremental, since HotSpot\n+coders have been using these guidelines for years.<\/p>\n+<p>Substantive changes are approved by <a\n+href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc7282.html\">rough consensus<\/a>\n+of the <a href=\"https:\/\/openjdk.org\/census#hotspot\">HotSpot Group<\/a>\n+Members. The Group Lead determines whether consensus has been\n+reached.<\/p>\n+<p>Editorial changes (changes that only affect the description of\n+HotSpot style, not its substance) do not require the full consensus\n+gathering process. The normal HotSpot pull request process may be used\n+for editorial changes, with the additional requirement that the\n+requisite reviewers are also HotSpot Group Members.<\/p>\n@@ -77,18 +155,48 @@\n-<li><p>Group related code together, so readers can concentrate on one section of one file.<\/p><\/li>\n-<li><p>Classes are the primary code structuring mechanism. Place related functionality in a class, or a set of related classes. Use of either namespaces or public non-member functions is rare in HotSpot code. Static non-member functions are not uncommon.<\/p><\/li>\n-<li><p>If a class <code>FooBar<\/code> is going to be used in more than one place, put it a file named fooBar.hpp and fooBar.cpp. If the class is a sidekick to a more important class <code>BazBat<\/code>, it can go in bazBat.hpp.<\/p><\/li>\n-<li><p>Put a member function <code>FooBar::bang<\/code> into the same file that defined <code>FooBar<\/code>, or its associated <em>.inline.hpp or <\/em>.cpp file.<\/p><\/li>\n-<li><p>Use public accessor functions for member variables accessed outside the class.<\/p><\/li>\n-<li><p>Assign names to constant literals and use the names instead.<\/p><\/li>\n-<li><p>Keep functions small, a screenful at most. Split out chunks of logic into file-local classes or static functions if needed.<\/p><\/li>\n-<li><p>Factor away nonessential complexity into local inline helper functions and helper classes.<\/p><\/li>\n-<li><p>Think clearly about internal invariants that apply to each class, and document them in the form of asserts within member functions.<\/p><\/li>\n-<li><p>Make simple, self-evident contracts for member functions. If you cannot communicate a simple contract, redesign the class.<\/p><\/li>\n-<li><p>Implement classes as if expecting rough usage by clients. Check for incorrect usage of a class using <code>assert(...)<\/code>, <code>guarantee(...)<\/code>, <code>ShouldNotReachHere()<\/code> and comments wherever needed. Performance is almost never a reason to omit asserts.<\/p><\/li>\n-<li><p>When possible, design as if for reusability. This forces a clear design of the class's externals, and clean hiding of its internals.<\/p><\/li>\n-<li><p>Initialize all variables and data structures to a known state. If a class has a constructor, initialize it there.<\/p><\/li>\n-<li><p>Do no optimization before its time. Prove the need to optimize.<\/p><\/li>\n-<li><p>When you must defactor to optimize, preserve as much structure as possible. If you must hand-inline some name, label the local copy with the original name.<\/p><\/li>\n-<li><p>If you need to use a hidden detail (e.g., a structure offset), name it (as a constant or function) in the class that owns it.<\/p><\/li>\n-<li><p>Don't use the Copy and Paste keys to replicate more than a couple lines of code. Name what you must repeat.<\/p><\/li>\n-<li><p>If a class needs a member function to change a user-visible attribute, the change should be done with a &quot;setter&quot; accessor matched to the simple &quot;getter&quot;.<\/p><\/li>\n+<li><p>Group related code together, so readers can concentrate on one\n+section of one file.<\/p><\/li>\n+<li><p>Classes are the primary code structuring mechanism. Place related\n+functionality in a class, or a set of related classes. Use of either\n+namespaces or public non-member functions is rare in HotSpot code.\n+Static non-member functions are not uncommon.<\/p><\/li>\n+<li><p>If a class <code>FooBar<\/code> is going to be used in more than\n+one place, put it a file named fooBar.hpp and fooBar.cpp. If the class\n+is a sidekick to a more important class <code>BazBat<\/code>, it can go\n+in bazBat.hpp.<\/p><\/li>\n+<li><p>Put a member function <code>FooBar::bang<\/code> into the same\n+file that defined <code>FooBar<\/code>, or its associated <em>.inline.hpp\n+or <\/em>.cpp file.<\/p><\/li>\n+<li><p>Use public accessor functions for member variables accessed\n+outside the class.<\/p><\/li>\n+<li><p>Assign names to constant literals and use the names\n+instead.<\/p><\/li>\n+<li><p>Keep functions small, a screenful at most. Split out chunks of\n+logic into file-local classes or static functions if needed.<\/p><\/li>\n+<li><p>Factor away nonessential complexity into local inline helper\n+functions and helper classes.<\/p><\/li>\n+<li><p>Think clearly about internal invariants that apply to each class,\n+and document them in the form of asserts within member\n+functions.<\/p><\/li>\n+<li><p>Make simple, self-evident contracts for member functions. If you\n+cannot communicate a simple contract, redesign the class.<\/p><\/li>\n+<li><p>Implement classes as if expecting rough usage by clients. Check\n+for incorrect usage of a class using <code>assert(...)<\/code>,\n+<code>guarantee(...)<\/code>, <code>ShouldNotReachHere()<\/code> and\n+comments wherever needed. Performance is almost never a reason to omit\n+asserts.<\/p><\/li>\n+<li><p>When possible, design as if for reusability. This forces a clear\n+design of the class's externals, and clean hiding of its\n+internals.<\/p><\/li>\n+<li><p>Initialize all variables and data structures to a known state. If\n+a class has a constructor, initialize it there.<\/p><\/li>\n+<li><p>Do no optimization before its time. Prove the need to\n+optimize.<\/p><\/li>\n+<li><p>When you must defactor to optimize, preserve as much structure as\n+possible. If you must hand-inline some name, label the local copy with\n+the original name.<\/p><\/li>\n+<li><p>If you need to use a hidden detail (e.g., a structure offset),\n+name it (as a constant or function) in the class that owns it.<\/p><\/li>\n+<li><p>Don't use the Copy and Paste keys to replicate more than a couple\n+lines of code. Name what you must repeat.<\/p><\/li>\n+<li><p>If a class needs a member function to change a user-visible\n+attribute, the change should be done with a \"setter\" accessor matched to\n+the simple \"getter\".<\/p><\/li>\n@@ -98,6 +206,16 @@\n-<li><p>All source files must have a globally unique basename. The build system depends on this uniqueness.<\/p><\/li>\n-<li><p>Do not put non-trivial function implementations in .hpp files. If the implementation depends on other .hpp files, put it in a .cpp or a .inline.hpp file.<\/p><\/li>\n-<li><p>.inline.hpp files should only be included in .cpp or .inline.hpp files.<\/p><\/li>\n-<li><p>All .inline.hpp files should include their corresponding .hpp file as the first include line. Declarations needed by other files should be put in the .hpp file, and not in the .inline.hpp file. This rule exists to resolve problems with circular dependencies between .inline.hpp files.<\/p><\/li>\n-<li><p>All .cpp files include precompiled.hpp as the first include line.<\/p><\/li>\n-<li><p>precompiled.hpp is just a build time optimization, so don't rely on it to resolve include problems.<\/p><\/li>\n+<li><p>All source files must have a globally unique basename. The build\n+system depends on this uniqueness.<\/p><\/li>\n+<li><p>Do not put non-trivial function implementations in .hpp files. If\n+the implementation depends on other .hpp files, put it in a .cpp or a\n+.inline.hpp file.<\/p><\/li>\n+<li><p>.inline.hpp files should only be included in .cpp or .inline.hpp\n+files.<\/p><\/li>\n+<li><p>All .inline.hpp files should include their corresponding .hpp\n+file as the first include line. Declarations needed by other files\n+should be put in the .hpp file, and not in the .inline.hpp file. This\n+rule exists to resolve problems with circular dependencies between\n+.inline.hpp files.<\/p><\/li>\n+<li><p>All .cpp files include precompiled.hpp as the first include\n+line.<\/p><\/li>\n+<li><p>precompiled.hpp is just a build time optimization, so don't rely\n+on it to resolve include problems.<\/p><\/li>\n@@ -105,1 +223,2 @@\n-<li><p>Put conditional inclusions (<code>#if ...<\/code>) at the end of the include list.<\/p><\/li>\n+<li><p>Put conditional inclusions (<code>#if ...<\/code>) at the end of\n+the include list.<\/p><\/li>\n@@ -110,2 +229,9 @@\n-<li><p>JTReg tests associated with specific bugs should be tagged with the <code>@bug<\/code> keyword in the test description.<\/p><\/li>\n-<li><p>JTReg tests should be organized by component or feature under <code>test\/<\/code>, in a directory hierarchy that generally follows that of the <code>src\/<\/code> directory. There may be additional subdirectories to further categorize tests by feature. This structure makes it easy to run a collection of tests associated with a specific feature by specifying the associated directory as the source of the tests to run.<\/p>\n+<li><p>JTReg tests associated with specific bugs should be tagged with\n+the <code>@bug<\/code> keyword in the test description.<\/p><\/li>\n+<li><p>JTReg tests should be organized by component or feature under\n+<code>test\/<\/code>, in a directory hierarchy that generally follows that\n+of the <code>src\/<\/code> directory. There may be additional\n+subdirectories to further categorize tests by feature. This structure\n+makes it easy to run a collection of tests associated with a specific\n+feature by specifying the associated directory as the source of the\n+tests to run.<\/p>\n@@ -113,1 +239,4 @@\n-<li>Some (older) tests use the associated bug number in the directory name, the test name, or both. That naming style should no longer be used, with existing tests using that style being candidates for migration.<\/li>\n+<li>Some (older) tests use the associated bug number in the directory\n+name, the test name, or both. That naming style should no longer be\n+used, with existing tests using that style being candidates for\n+migration.<\/li>\n@@ -118,18 +247,54 @@\n-<li><p>The length of a name may be correlated to the size of its scope. In particular, short names (even single letter names) may be fine in a small scope, but are usually inappropriate for larger scopes.<\/p><\/li>\n-<li><p>Prefer whole words rather than abbreviations, unless the abbreviation is more widely used than the long form in the code's domain.<\/p><\/li>\n-<li><p>Choose names consistently. Do not introduce spurious variations. Abbreviate corresponding terms to a consistent length.<\/p><\/li>\n-<li><p>Global names must be unique, to avoid <a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/definition\" title=\"One Definition Rule\">One Definition Rule<\/a> (ODR) violations. A common prefixing scheme for related global names is often used. (This is instead of using namespaces, which are mostly avoided in HotSpot.)<\/p><\/li>\n-<li><p>Don't give two names to the semantically same thing. But use different names for semantically different things, even if they are representationally the same. (So use meaningful <code>typedef<\/code> or template alias names where appropriate.)<\/p><\/li>\n-<li><p>When choosing names, avoid categorical nouns like &quot;variable&quot;, &quot;field&quot;, &quot;parameter&quot;, &quot;value&quot;, and verbs like &quot;compute&quot;, &quot;get&quot;. (<code>storeValue(int param)<\/code> is bad.)<\/p><\/li>\n-<li><p>Type names and global names should use mixed-case with the first letter of each word capitalized (<code>FooBar<\/code>).<\/p><\/li>\n-<li><p>Embedded abbreviations in otherwise mixed-case names are usually capitalized entirely rather than being treated as a single word with only the initial letter capitalized, e.g. &quot;HTML&quot; rather than &quot;Html&quot;.<\/p><\/li>\n-<li><p>Function and local variable names use lowercase with words separated by a single underscore (<code>foo_bar<\/code>).<\/p><\/li>\n-<li><p>Class data member names have a leading underscore, and use lowercase with words separated by a single underscore (<code>_foo_bar<\/code>).<\/p><\/li>\n-<li><p>Constant names may be upper-case or mixed-case, according to historical necessity. (Note: There are many examples of constants with lowercase names.)<\/p><\/li>\n-<li><p>Constant names should follow an existing pattern, and must have a distinct appearance from other names in related APIs.<\/p><\/li>\n-<li><p>Class and type names should be noun phrases. Consider an &quot;er&quot; suffix for a class that represents an action.<\/p><\/li>\n-<li><p>Function names should be verb phrases that reflect changes of state known to a class's user, or else noun phrases if they cause no change of state visible to the class's user.<\/p><\/li>\n-<li><p>Getter accessor names are noun phrases, with no &quot;<code>get_<\/code>&quot; noise word. Boolean getters can also begin with &quot;<code>is_<\/code>&quot; or &quot;<code>has_<\/code>&quot;. Member function for reading data members usually have the same name as the data member, exclusive of the leading underscore.<\/p><\/li>\n-<li><p>Setter accessor names prepend &quot;<code>set_<\/code>&quot; to the getter name.<\/p><\/li>\n-<li><p>Other member function names are verb phrases, as if commands to the receiver.<\/p><\/li>\n-<li><p>Avoid leading underscores (as &quot;<code>_oop<\/code>&quot;) except in cases required above. (Names with leading underscores can cause portability problems.)<\/p><\/li>\n+<li><p>The length of a name may be correlated to the size of its scope.\n+In particular, short names (even single letter names) may be fine in a\n+small scope, but are usually inappropriate for larger scopes.<\/p><\/li>\n+<li><p>Prefer whole words rather than abbreviations, unless the\n+abbreviation is more widely used than the long form in the code's\n+domain.<\/p><\/li>\n+<li><p>Choose names consistently. Do not introduce spurious variations.\n+Abbreviate corresponding terms to a consistent length.<\/p><\/li>\n+<li><p>Global names must be unique, to avoid <a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/definition\"\n+title=\"One Definition Rule\">One Definition Rule<\/a> (ODR) violations. A\n+common prefixing scheme for related global names is often used. (This is\n+instead of using namespaces, which are mostly avoided in\n+HotSpot.)<\/p><\/li>\n+<li><p>Don't give two names to the semantically same thing. But use\n+different names for semantically different things, even if they are\n+representationally the same. (So use meaningful <code>typedef<\/code> or\n+template alias names where appropriate.)<\/p><\/li>\n+<li><p>When choosing names, avoid categorical nouns like \"variable\",\n+\"field\", \"parameter\", \"value\", and verbs like \"compute\", \"get\".\n+(<code>storeValue(int param)<\/code> is bad.)<\/p><\/li>\n+<li><p>Type names and global names should use mixed-case with the first\n+letter of each word capitalized (<code>FooBar<\/code>).<\/p><\/li>\n+<li><p>Embedded abbreviations in otherwise mixed-case names are usually\n+capitalized entirely rather than being treated as a single word with\n+only the initial letter capitalized, e.g. \"HTML\" rather than\n+\"Html\".<\/p><\/li>\n+<li><p>Function and local variable names use lowercase with words\n+separated by a single underscore (<code>foo_bar<\/code>).<\/p><\/li>\n+<li><p>Class data member names have a leading underscore, and use\n+lowercase with words separated by a single underscore\n+(<code>_foo_bar<\/code>).<\/p><\/li>\n+<li><p>Constant names may be upper-case or mixed-case, according to\n+historical necessity. (Note: There are many examples of constants with\n+lowercase names.)<\/p><\/li>\n+<li><p>Constant names should follow an existing pattern, and must have a\n+distinct appearance from other names in related APIs.<\/p><\/li>\n+<li><p>Class and type names should be noun phrases. Consider an \"er\"\n+suffix for a class that represents an action.<\/p><\/li>\n+<li><p>Function names should be verb phrases that reflect changes of\n+state known to a class's user, or else noun phrases if they cause no\n+change of state visible to the class's user.<\/p><\/li>\n+<li><p>Getter accessor names are noun phrases, with no\n+\"<code>get_<\/code>\" noise word. Boolean getters can also begin with\n+\"<code>is_<\/code>\" or \"<code>has_<\/code>\". Member function for reading\n+data members usually have the same name as the data member, exclusive of\n+the leading underscore.<\/p><\/li>\n+<li><p>Setter accessor names prepend \"<code>set_<\/code>\" to the getter\n+name.<\/p><\/li>\n+<li><p>Other member function names are verb phrases, as if commands to\n+the receiver.<\/p><\/li>\n+<li><p>Avoid leading underscores (as \"<code>_oop<\/code>\") except in\n+cases required above. (Names with leading underscores can cause\n+portability problems.)<\/p><\/li>\n@@ -141,3 +306,9 @@\n-<li><p>If you have to choose between commenting code and writing wiki content, comment the code. Link from the wiki to the source file if it makes sense.<\/p><\/li>\n-<li><p>As a general rule don't add bug numbers to comments (they would soon overwhelm the code). But if the bug report contains significant information that can't reasonably be added as a comment, then refer to the bug report.<\/p><\/li>\n-<li><p>Personal names are discouraged in the source code, which is a team product.<\/p><\/li>\n+<li><p>If you have to choose between commenting code and writing wiki\n+content, comment the code. Link from the wiki to the source file if it\n+makes sense.<\/p><\/li>\n+<li><p>As a general rule don't add bug numbers to comments (they would\n+soon overwhelm the code). But if the bug report contains significant\n+information that can't reasonably be added as a comment, then refer to\n+the bug report.<\/p><\/li>\n+<li><p>Personal names are discouraged in the source code, which is a\n+team product.<\/p><\/li>\n@@ -147,6 +318,21 @@\n-<li><p>You can almost always use an inline function or class instead of a macro. Use a macro only when you really need it.<\/p><\/li>\n-<li><p>Templates may be preferable to multi-line macros. (There may be subtle performance effects with templates on some platforms; revert to macros if absolutely necessary.)<\/p><\/li>\n-<li><p><code>#ifdef<\/code>s should not be used to introduce platform-specific code into shared code (except for <code>_LP64<\/code>). They must be used to manage header files, in the pattern found at the top of every source file. They should be used mainly for major build features, including <code>PRODUCT<\/code>, <code>ASSERT<\/code>, <code>_LP64<\/code>, <code>INCLUDE_SERIALGC<\/code>, <code>COMPILER1<\/code>, etc.<\/p><\/li>\n-<li><p>For build features such as <code>PRODUCT<\/code>, use <code>#ifdef PRODUCT<\/code> for multiple-line inclusions or exclusions.<\/p><\/li>\n-<li><p>For short inclusions or exclusions based on build features, use macros like <code>PRODUCT_ONLY<\/code> and <code>NOT_PRODUCT<\/code>. But avoid using them with multiple-line arguments, since debuggers do not handle that well.<\/p><\/li>\n-<li><p>Use <code>CATCH<\/code>, <code>THROW<\/code>, etc. for HotSpot-specific exception processing.<\/p><\/li>\n+<li><p>You can almost always use an inline function or class instead of\n+a macro. Use a macro only when you really need it.<\/p><\/li>\n+<li><p>Templates may be preferable to multi-line macros. (There may be\n+subtle performance effects with templates on some platforms; revert to\n+macros if absolutely necessary.)<\/p><\/li>\n+<li><p><code>#ifdef<\/code>s should not be used to introduce\n+platform-specific code into shared code (except for <code>_LP64<\/code>).\n+They must be used to manage header files, in the pattern found at the\n+top of every source file. They should be used mainly for major build\n+features, including <code>PRODUCT<\/code>, <code>ASSERT<\/code>,\n+<code>_LP64<\/code>, <code>INCLUDE_SERIALGC<\/code>,\n+<code>COMPILER1<\/code>, etc.<\/p><\/li>\n+<li><p>For build features such as <code>PRODUCT<\/code>, use\n+<code>#ifdef PRODUCT<\/code> for multiple-line inclusions or\n+exclusions.<\/p><\/li>\n+<li><p>For short inclusions or exclusions based on build features, use\n+macros like <code>PRODUCT_ONLY<\/code> and <code>NOT_PRODUCT<\/code>. But\n+avoid using them with multiple-line arguments, since debuggers do not\n+handle that well.<\/p><\/li>\n+<li><p>Use <code>CATCH<\/code>, <code>THROW<\/code>, etc. for\n+HotSpot-specific exception processing.<\/p><\/li>\n@@ -156,2 +342,10 @@\n-<li><p>In general, don't change whitespace unless it improves readability or consistency. Gratuitous whitespace changes will make integrations and backports more difficult.<\/p><\/li>\n-<li><p>Use <a href=\"https:\/\/en.wikipedia.org\/wiki\/Indentation_style#Variant:_1TBS_(OTBS)\">One-True-Brace-Style<\/a>. The opening brace for a function or class is normally at the end of the line; it is sometimes moved to the beginning of the next line for emphasis. Substatements are enclosed in braces, even if there is only a single statement. Extremely simple one-line statements may drop braces around a substatement.<\/p><\/li>\n+<li><p>In general, don't change whitespace unless it improves\n+readability or consistency. Gratuitous whitespace changes will make\n+integrations and backports more difficult.<\/p><\/li>\n+<li><p>Use <a\n+href=\"https:\/\/en.wikipedia.org\/wiki\/Indentation_style#Variant:_1TBS_(OTBS)\">One-True-Brace-Style<\/a>.\n+The opening brace for a function or class is normally at the end of the\n+line; it is sometimes moved to the beginning of the next line for\n+emphasis. Substatements are enclosed in braces, even if there is only a\n+single statement. Extremely simple one-line statements may drop braces\n+around a substatement.<\/p><\/li>\n@@ -159,5 +353,21 @@\n-<li><p>There is no hard line length limit. That said, bear in mind that excessively long lines can cause difficulties. Some people like to have multiple side-by-side windows in their editors, and long lines may force them to choose among unpleasant options. They can use wide windows, reducing the number that can fit across the screen, and wasting a lot of screen real estate because most lines are not that long. Alternatively, they can have more windows across the screen, with long lines wrapping (or worse, requiring scrolling to see in their entirety), which is harder to read. Similar issues exist for side-by-side code reviews.<\/p><\/li>\n-<li><p>Tabs are not allowed in code. Set your editor accordingly.<br> (Emacs: <code>(setq-default indent-tabs-mode nil)<\/code>.)<\/p><\/li>\n-<li><p>Use good taste to break lines and align corresponding tokens on adjacent lines.<\/p><\/li>\n-<li><p>Use spaces around operators, especially comparisons and assignments. (Relaxable for boolean expressions and high-precedence operators in classic math-style formulas.)<\/p><\/li>\n-<li><p>Put spaces on both sides of control flow keywords <code>if<\/code>, <code>else<\/code>, <code>for<\/code>, <code>switch<\/code>, etc. Don't add spaces around the associated <em>control<\/em> expressions. Examples:<\/p>\n+<li><p>There is no hard line length limit. That said, bear in mind that\n+excessively long lines can cause difficulties. Some people like to have\n+multiple side-by-side windows in their editors, and long lines may force\n+them to choose among unpleasant options. They can use wide windows,\n+reducing the number that can fit across the screen, and wasting a lot of\n+screen real estate because most lines are not that long. Alternatively,\n+they can have more windows across the screen, with long lines wrapping\n+(or worse, requiring scrolling to see in their entirety), which is\n+harder to read. Similar issues exist for side-by-side code\n+reviews.<\/p><\/li>\n+<li><p>Tabs are not allowed in code. Set your editor accordingly.<br>\n+(Emacs: <code>(setq-default indent-tabs-mode nil)<\/code>.)<\/p><\/li>\n+<li><p>Use good taste to break lines and align corresponding tokens on\n+adjacent lines.<\/p><\/li>\n+<li><p>Use spaces around operators, especially comparisons and\n+assignments. (Relaxable for boolean expressions and high-precedence\n+operators in classic math-style formulas.)<\/p><\/li>\n+<li><p>Put spaces on both sides of control flow keywords\n+<code>if<\/code>, <code>else<\/code>, <code>for<\/code>,\n+<code>switch<\/code>, etc. Don't add spaces around the associated\n+<em>control<\/em> expressions. Examples:<\/p>\n@@ -167,3 +377,10 @@\n-<li><p>Use extra parentheses in expressions whenever operator precedence seems doubtful. Always use parentheses in shift\/mask expressions (<code>&lt;&lt;<\/code>, <code>&amp;<\/code>, <code>|<\/code>). Don't add whitespace immediately inside parentheses.<\/p><\/li>\n-<li><p>Use more spaces and blank lines between larger constructs, such as classes or function definitions.<\/p><\/li>\n-<li><p>If the surrounding code has any sort of vertical organization, adjust new lines horizontally to be consistent with that organization. (E.g., trailing backslashes on long macro definitions often align.)<\/p><\/li>\n+<li><p>Use extra parentheses in expressions whenever operator precedence\n+seems doubtful. Always use parentheses in shift\/mask expressions\n+(<code>&lt;&lt;<\/code>, <code>&amp;<\/code>, <code>|<\/code>). Don't add\n+whitespace immediately inside parentheses.<\/p><\/li>\n+<li><p>Use more spaces and blank lines between larger constructs, such\n+as classes or function definitions.<\/p><\/li>\n+<li><p>If the surrounding code has any sort of vertical organization,\n+adjust new lines horizontally to be consistent with that organization.\n+(E.g., trailing backslashes on long macro definitions often\n+align.)<\/p><\/li>\n@@ -173,2 +390,5 @@\n-<li><p>Use the <a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/raii\" title=\"Resource Acquisition Is Initialization\">Resource Acquisition Is Initialization<\/a> (RAII) design pattern to manage bracketed critical sections. See class <code>ResourceMark<\/code> for an example.<\/p><\/li>\n-<li>Avoid implicit conversions to <code>bool<\/code>.\n+<li><p>Use the <a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/raii\"\n+title=\"Resource Acquisition Is Initialization\">Resource Acquisition Is\n+Initialization<\/a> (RAII) design pattern to manage bracketed critical\n+sections. See class <code>ResourceMark<\/code> for an example.<\/p><\/li>\n+<li><p>Avoid implicit conversions to <code>bool<\/code>.<\/p>\n@@ -177,2 +397,6 @@\n-<li>Do not use ints or pointers as (implicit) booleans with <code>&amp;&amp;<\/code>, <code>||<\/code>, <code>if<\/code>, <code>while<\/code>. Instead, compare explicitly, i.e. <code>if (x != 0)<\/code> or <code>if (ptr != nullptr)<\/code>, etc.<\/li>\n-<li>Do not use declarations in <em>condition<\/em> forms, i.e. don't use <code>if (T v = value) { ... }<\/code>.<\/li>\n+<li>Do not use ints or pointers as (implicit) booleans with\n+<code>&amp;&amp;<\/code>, <code>||<\/code>, <code>if<\/code>,\n+<code>while<\/code>. Instead, compare explicitly, i.e.\n+<code>if (x != 0)<\/code> or <code>if (ptr != nullptr)<\/code>, etc.<\/li>\n+<li>Do not use declarations in <em>condition<\/em> forms, i.e. don't use\n+<code>if (T v = value) { ... }<\/code>.<\/li>\n@@ -180,1 +404,5 @@\n-<li><p>Use functions from globalDefinitions.hpp and related files when performing bitwise operations on integers. Do not code directly as C operators, unless they are extremely simple. (Examples: <code>align_up<\/code>, <code>is_power_of_2<\/code>, <code>exact_log2<\/code>.)<\/p><\/li>\n+<li><p>Use functions from globalDefinitions.hpp and related files when\n+performing bitwise operations on integers. Do not code directly as C\n+operators, unless they are extremely simple. (Examples:\n+<code>align_up<\/code>, <code>is_power_of_2<\/code>,\n+<code>exact_log2<\/code>.)<\/p><\/li>\n@@ -182,1 +410,2 @@\n-<li><p>Always enumerate all cases in a switch statement or provide a default case. It is ok to have an empty default with comment.<\/p><\/li>\n+<li><p>Always enumerate all cases in a switch statement or provide a\n+default case. It is ok to have an empty default with comment.<\/p><\/li>\n@@ -185,11 +414,36 @@\n-<p>HotSpot was originally written in a subset of the C++98\/03 language. More recently, support for C++14 is provided, though again, HotSpot only uses a subset. (Backports to JDK versions lacking support for more recent Standards must of course stick with the original C++98\/03 subset.)<\/p>\n-<p>This section describes that subset. Features from the C++98\/03 language may be used unless explicitly excluded here. Features from C++11 and C++14 may be explicitly permitted or explicitly excluded, and discussed accordingly here. There is a third category, undecided features, about which HotSpot developers have not yet reached a consensus, or perhaps have not discussed at all. Use of these features is also excluded.<\/p>\n-<p>(The use of some features may not be immediately obvious and may slip in anyway, since the compiler will accept them. The code review process is the main defense against this.)<\/p>\n-<p>Some features are discussed in their own subsection, typically to provide more extensive discussion or rationale for limitations. Features that don't have their own subsection are listed in omnibus feature sections for permitted, excluded, and undecided features.<\/p>\n-<p>Lists of new features for C++11 and C++14, along with links to their descriptions, can be found in the online documentation for some of the compilers and libraries. The C++14 Standard is the definitive description.<\/p>\n-<ul>\n-<li><a href=\"https:\/\/gcc.gnu.org\/projects\/cxx-status.html\">C++ Standards Support in GCC<\/a><\/li>\n-<li><a href=\"https:\/\/clang.llvm.org\/cxx_status.html\">C++ Support in Clang<\/a><\/li>\n-<li><a href=\"https:\/\/docs.microsoft.com\/en-us\/cpp\/visual-cpp-language-conformance\">Visual C++ Language Conformance<\/a><\/li>\n-<li><a href=\"https:\/\/gcc.gnu.org\/onlinedocs\/libstdc++\/manual\/status.html\">libstdc++ Status<\/a><\/li>\n-<li><a href=\"https:\/\/libcxx.llvm.org\/cxx1y_status.html\">libc++ Status<\/a><\/li>\n+<p>HotSpot was originally written in a subset of the C++98\/03 language.\n+More recently, support for C++14 is provided, though again, HotSpot only\n+uses a subset. (Backports to JDK versions lacking support for more\n+recent Standards must of course stick with the original C++98\/03\n+subset.)<\/p>\n+<p>This section describes that subset. Features from the C++98\/03\n+language may be used unless explicitly excluded here. Features from\n+C++11 and C++14 may be explicitly permitted or explicitly excluded, and\n+discussed accordingly here. There is a third category, undecided\n+features, about which HotSpot developers have not yet reached a\n+consensus, or perhaps have not discussed at all. Use of these features\n+is also excluded.<\/p>\n+<p>(The use of some features may not be immediately obvious and may slip\n+in anyway, since the compiler will accept them. The code review process\n+is the main defense against this.)<\/p>\n+<p>Some features are discussed in their own subsection, typically to\n+provide more extensive discussion or rationale for limitations. Features\n+that don't have their own subsection are listed in omnibus feature\n+sections for permitted, excluded, and undecided features.<\/p>\n+<p>Lists of new features for C++11 and C++14, along with links to their\n+descriptions, can be found in the online documentation for some of the\n+compilers and libraries. The C++14 Standard is the definitive\n+description.<\/p>\n+<ul>\n+<li><a href=\"https:\/\/gcc.gnu.org\/projects\/cxx-status.html\">C++ Standards\n+Support in GCC<\/a><\/li>\n+<li><a href=\"https:\/\/clang.llvm.org\/cxx_status.html\">C++ Support in\n+Clang<\/a><\/li>\n+<li><a\n+href=\"https:\/\/docs.microsoft.com\/en-us\/cpp\/visual-cpp-language-conformance\">Visual\n+C++ Language Conformance<\/a><\/li>\n+<li><a\n+href=\"https:\/\/gcc.gnu.org\/onlinedocs\/libstdc++\/manual\/status.html\">libstdc++\n+Status<\/a><\/li>\n+<li><a href=\"https:\/\/libcxx.llvm.org\/cxx1y_status.html\">libc++\n+Status<\/a><\/li>\n@@ -197,1 +451,2 @@\n-<p>As a rule of thumb, permitting features which simplify writing code and, especially, reading code, is encouraged.<\/p>\n+<p>As a rule of thumb, permitting features which simplify writing code\n+and, especially, reading code, is encouraged.<\/p>\n@@ -200,4 +455,13 @@\n-<li><p><a href=\"https:\/\/google.github.io\/styleguide\/cppguide.html\">Google C++ Style Guide<\/a> — Currently (2020) targeting C++17.<\/p><\/li>\n-<li><p><a href=\"https:\/\/chromium.googlesource.com\/chromium\/src\/+\/main\/styleguide\/c++\/c++-features.md\">C++11 and C++14 use in Chromium<\/a> — Categorizes features as allowed, banned, or to be discussed.<\/p><\/li>\n-<li><p><a href=\"https:\/\/llvm.org\/docs\/CodingStandards.html\">llvm Coding Standards<\/a> — Currently (2020) targeting C++14.<\/p><\/li>\n-<li><p><a href=\"https:\/\/firefox-source-docs.mozilla.org\/code-quality\/coding-style\/using_cxx_in_firefox_code.html\">Using C++ in Mozilla code<\/a> — C++17 support is required for recent versions (2020).<\/p><\/li>\n+<li><p><a\n+href=\"https:\/\/google.github.io\/styleguide\/cppguide.html\">Google C++\n+Style Guide<\/a> — Currently (2020) targeting C++17.<\/p><\/li>\n+<li><p><a\n+href=\"https:\/\/chromium.googlesource.com\/chromium\/src\/+\/main\/styleguide\/c++\/c++-features.md\">C++11\n+and C++14 use in Chromium<\/a> — Categorizes features as allowed, banned,\n+or to be discussed.<\/p><\/li>\n+<li><p><a href=\"https:\/\/llvm.org\/docs\/CodingStandards.html\">llvm Coding\n+Standards<\/a> — Currently (2020) targeting C++14.<\/p><\/li>\n+<li><p><a\n+href=\"https:\/\/firefox-source-docs.mozilla.org\/code-quality\/coding-style\/using_cxx_in_firefox_code.html\">Using\n+C++ in Mozilla code<\/a> — C++17 support is required for recent versions\n+(2020).<\/p><\/li>\n@@ -206,6 +470,36 @@\n-<p>Do not use exceptions. Exceptions are disabled by the build configuration for some platforms.<\/p>\n-<p>Rationale: There is significant concern over the performance cost of exceptions and their usage model and implications for maintainable code. That's not just a matter of history that has been fixed; there remain questions and problems even today (2019). See, for example, <a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2018\/p0709r0.pdf\">Zero cost deterministic exceptions<\/a>. Because of this, HotSpot has always used a build configuration that disables exceptions where that is available. As a result, HotSpot code uses error handling mechanisms such as two-phase construction, factory functions, returning error codes, and immediate termination. Even if the cost of exceptions were not a concern, the existing body of code was not written with exception safety in mind. Making HotSpot exception safe would be a very large undertaking.<\/p>\n-<p>In addition to the usual alternatives to exceptions, HotSpot provides its own exception mechanism. This is based on a set of macros defined in utilities\/exceptions.hpp.<\/p>\n-<h3 id=\"rtti-runtime-type-information\">RTTI (Runtime Type Information)<\/h3>\n-<p>Do not use <a href=\"https:\/\/en.wikipedia.org\/wiki\/Run-time_type_information\" title=\"Runtime Type Information\">Runtime Type Information<\/a> (RTTI). <a href=\"https:\/\/en.wikipedia.org\/wiki\/Run-time_type_information\" title=\"Runtime Type Information\">RTTI<\/a> is disabled by the build configuration for some platforms. Among other things, this means <code>dynamic_cast<\/code> cannot be used.<\/p>\n-<p>Rationale: Other than to implement exceptions (which HotSpot doesn't use), most potential uses of <a href=\"https:\/\/en.wikipedia.org\/wiki\/Run-time_type_information\" title=\"Runtime Type Information\">RTTI<\/a> are better done via virtual functions. Some of the remainder can be replaced by bespoke mechanisms. The cost of the additional runtime data structures needed to support <a href=\"https:\/\/en.wikipedia.org\/wiki\/Run-time_type_information\" title=\"Runtime Type Information\">RTTI<\/a> are deemed not worthwhile, given the alternatives.<\/p>\n+<p>Do not use exceptions. Exceptions are disabled by the build\n+configuration for some platforms.<\/p>\n+<p>Rationale: There is significant concern over the performance cost of\n+exceptions and their usage model and implications for maintainable code.\n+That's not just a matter of history that has been fixed; there remain\n+questions and problems even today (2019). See, for example, <a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2018\/p0709r0.pdf\">Zero\n+cost deterministic exceptions<\/a>. Because of this, HotSpot has always\n+used a build configuration that disables exceptions where that is\n+available. As a result, HotSpot code uses error handling mechanisms such\n+as two-phase construction, factory functions, returning error codes, and\n+immediate termination. Even if the cost of exceptions were not a\n+concern, the existing body of code was not written with exception safety\n+in mind. Making HotSpot exception safe would be a very large\n+undertaking.<\/p>\n+<p>In addition to the usual alternatives to exceptions, HotSpot provides\n+its own exception mechanism. This is based on a set of macros defined in\n+utilities\/exceptions.hpp.<\/p>\n+<h3 id=\"rtti-runtime-type-information\">RTTI (Runtime Type\n+Information)<\/h3>\n+<p>Do not use <a\n+href=\"https:\/\/en.wikipedia.org\/wiki\/Run-time_type_information\"\n+title=\"Runtime Type Information\">Runtime Type Information<\/a> (RTTI). <a\n+href=\"https:\/\/en.wikipedia.org\/wiki\/Run-time_type_information\"\n+title=\"Runtime Type Information\">RTTI<\/a> is disabled by the build\n+configuration for some platforms. Among other things, this means\n+<code>dynamic_cast<\/code> cannot be used.<\/p>\n+<p>Rationale: Other than to implement exceptions (which HotSpot doesn't\n+use), most potential uses of <a\n+href=\"https:\/\/en.wikipedia.org\/wiki\/Run-time_type_information\"\n+title=\"Runtime Type Information\">RTTI<\/a> are better done via virtual\n+functions. Some of the remainder can be replaced by bespoke mechanisms.\n+The cost of the additional runtime data structures needed to support <a\n+href=\"https:\/\/en.wikipedia.org\/wiki\/Run-time_type_information\"\n+title=\"Runtime Type Information\">RTTI<\/a> are deemed not worthwhile,\n+given the alternatives.<\/p>\n@@ -213,3 +507,12 @@\n-<p>Do not use the standard global allocation and deallocation functions (operator new and related functions). Use of these functions by HotSpot code is disabled for some platforms.<\/p>\n-<p>Rationale: HotSpot often uses &quot;resource&quot; or &quot;arena&quot; allocation. Even where heap allocation is used, the standard global functions are avoided in favor of wrappers around malloc and free that support the VM's Native Memory Tracking (NMT) feature. Typically, uses of the global operator new are inadvertent and therefore often associated with memory leaks.<\/p>\n-<p>Native memory allocation failures are often treated as non-recoverable. The place where &quot;out of memory&quot; is (first) detected may be an innocent bystander, unrelated to the actual culprit.<\/p>\n+<p>Do not use the standard global allocation and deallocation functions\n+(operator new and related functions). Use of these functions by HotSpot\n+code is disabled for some platforms.<\/p>\n+<p>Rationale: HotSpot often uses \"resource\" or \"arena\" allocation. Even\n+where heap allocation is used, the standard global functions are avoided\n+in favor of wrappers around malloc and free that support the VM's Native\n+Memory Tracking (NMT) feature. Typically, uses of the global operator\n+new are inadvertent and therefore often associated with memory\n+leaks.<\/p>\n+<p>Native memory allocation failures are often treated as\n+non-recoverable. The place where \"out of memory\" is (first) detected may\n+be an innocent bystander, unrelated to the actual culprit.<\/p>\n@@ -219,1 +522,2 @@\n-<p>Restrict inheritance to the &quot;is-a&quot; case; use composition rather than non-is-a related inheritance.<\/p>\n+<p>Restrict inheritance to the \"is-a\" case; use composition rather than\n+non-is-a related inheritance.<\/p>\n@@ -222,1 +526,4 @@\n-<p>Avoid using namespaces. HotSpot code normally uses &quot;all static&quot; classes rather than namespaces for grouping. An &quot;all static&quot; class is not instantiable, has only static members, and is normally derived (possibly indirectly) from the helper class <code>AllStatic<\/code>.<\/p>\n+<p>Avoid using namespaces. HotSpot code normally uses \"all static\"\n+classes rather than namespaces for grouping. An \"all static\" class is\n+not instantiable, has only static members, and is normally derived\n+(possibly indirectly) from the helper class <code>AllStatic<\/code>.<\/p>\n@@ -225,3 +532,7 @@\n-<li><p>Provides access control for members, which is unavailable with namespaces.<\/p><\/li>\n-<li><p>Avoids <a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/adl\" title=\"Argument Dependent Lookup\">Argument Dependent Lookup<\/a> (ADL).<\/p><\/li>\n-<li><p>Closed for additional members. Namespaces allow names to be added in multiple contexts, making it harder to see the complete API.<\/p><\/li>\n+<li><p>Provides access control for members, which is unavailable with\n+namespaces.<\/p><\/li>\n+<li><p>Avoids <a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/adl\"\n+title=\"Argument Dependent Lookup\">Argument Dependent Lookup<\/a>\n+(ADL).<\/p><\/li>\n+<li><p>Closed for additional members. Namespaces allow names to be added\n+in multiple contexts, making it harder to see the complete API.<\/p><\/li>\n@@ -229,5 +540,21 @@\n-<p>Namespaces should be used only in cases where one of those &quot;benefits&quot; is actually a hindrance.<\/p>\n-<p>In particular, don't use anonymous namespaces. They seem like they should be useful, and indeed have some real benefits for naming and generated code size on some platforms. Unfortunately, debuggers don't seem to like them at all.<\/p>\n-<p><a href=\"https:\/\/groups.google.com\/forum\/#!topic\/mozilla.dev.platform\/KsaG3lEEaRM\" class=\"uri\">https:\/\/groups.google.com\/forum\/#!topic\/mozilla.dev.platform\/KsaG3lEEaRM<\/a><br> Suggests Visual Studio debugger might not be able to refer to anonymous namespace symbols, so can't set breakpoints in them. Though the discussion seems to go back and forth on that.<\/p>\n-<p><a href=\"https:\/\/firefox-source-docs.mozilla.org\/code-quality\/coding-style\/coding_style_cpp.html\" class=\"uri\">https:\/\/firefox-source-docs.mozilla.org\/code-quality\/coding-style\/coding_style_cpp.html<\/a><br> Search for &quot;Anonymous namespaces&quot; Suggests preferring &quot;static&quot; to anonymous namespaces where applicable, because of poor debugger support for anonymous namespaces.<\/p>\n-<p><a href=\"https:\/\/sourceware.org\/bugzilla\/show_bug.cgi?id=16874\" class=\"uri\">https:\/\/sourceware.org\/bugzilla\/show_bug.cgi?id=16874<\/a><br> Bug for similar gdb problems.<\/p>\n+<p>Namespaces should be used only in cases where one of those \"benefits\"\n+is actually a hindrance.<\/p>\n+<p>In particular, don't use anonymous namespaces. They seem like they\n+should be useful, and indeed have some real benefits for naming and\n+generated code size on some platforms. Unfortunately, debuggers don't\n+seem to like them at all.<\/p>\n+<p><a\n+href=\"https:\/\/groups.google.com\/forum\/#!topic\/mozilla.dev.platform\/KsaG3lEEaRM\"\n+class=\"uri\">https:\/\/groups.google.com\/forum\/#!topic\/mozilla.dev.platform\/KsaG3lEEaRM<\/a><br>\n+Suggests Visual Studio debugger might not be able to refer to anonymous\n+namespace symbols, so can't set breakpoints in them. Though the\n+discussion seems to go back and forth on that.<\/p>\n+<p><a\n+href=\"https:\/\/firefox-source-docs.mozilla.org\/code-quality\/coding-style\/coding_style_cpp.html\"\n+class=\"uri\">https:\/\/firefox-source-docs.mozilla.org\/code-quality\/coding-style\/coding_style_cpp.html<\/a><br>\n+Search for \"Anonymous namespaces\" Suggests preferring \"static\" to\n+anonymous namespaces where applicable, because of poor debugger support\n+for anonymous namespaces.<\/p>\n+<p><a href=\"https:\/\/sourceware.org\/bugzilla\/show_bug.cgi?id=16874\"\n+class=\"uri\">https:\/\/sourceware.org\/bugzilla\/show_bug.cgi?id=16874<\/a><br>\n+Bug for similar gdb problems.<\/p>\n@@ -236,2 +563,6 @@\n-<p>Historically, HotSpot has mostly avoided use of the Standard Library.<\/p>\n-<p>(It used to be impossible to use most of it in shared code, because the build configuration for Solaris with Solaris Studio made all but a couple of pieces inaccessible. Support for header-only parts was added in mid-2017. Support for Solaris was removed in 2020.)<\/p>\n+<p>Historically, HotSpot has mostly avoided use of the Standard\n+Library.<\/p>\n+<p>(It used to be impossible to use most of it in shared code, because\n+the build configuration for Solaris with Solaris Studio made all but a\n+couple of pieces inaccessible. Support for header-only parts was added\n+in mid-2017. Support for Solaris was removed in 2020.)<\/p>\n@@ -240,5 +571,21 @@\n-<li><p>Exceptions. Perhaps the largest core issue with adopting the use of Standard Library facilities is exceptions. HotSpot does not use exceptions and, for platforms which allow doing so, builds with them turned off. Many Standard Library facilities implicitly or explicitly use exceptions.<\/p><\/li>\n-<li><p><code>assert<\/code>. An issue that is quickly encountered is the <code>assert<\/code> macro name collision (<a href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8007770\">JDK-8007770<\/a>). Some mechanism for addressing this would be needed before much of the Standard Library could be used. (Not all Standard Library implementations use assert in header files, but some do.)<\/p><\/li>\n-<li><p>Memory allocation. HotSpot requires explicit control over where allocations occur. The C++98\/03 <code>std::allocator<\/code> class is too limited to support our usage. (Changes in more recent Standards may remove this limitation.)<\/p><\/li>\n-<li><p>Implementation vagaries. Bugs, or simply different implementation choices, can lead to different behaviors among the various Standard Libraries we need to deal with.<\/p><\/li>\n-<li><p>Inconsistent naming conventions. HotSpot and the C++ Standard use different naming conventions. The coexistence of those different conventions might appear jarring and reduce readability.<\/p><\/li>\n+<li><p>Exceptions. Perhaps the largest core issue with adopting the use\n+of Standard Library facilities is exceptions. HotSpot does not use\n+exceptions and, for platforms which allow doing so, builds with them\n+turned off. Many Standard Library facilities implicitly or explicitly\n+use exceptions.<\/p><\/li>\n+<li><p><code>assert<\/code>. An issue that is quickly encountered is the\n+<code>assert<\/code> macro name collision (<a\n+href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8007770\">JDK-8007770<\/a>).\n+Some mechanism for addressing this would be needed before much of the\n+Standard Library could be used. (Not all Standard Library\n+implementations use assert in header files, but some do.)<\/p><\/li>\n+<li><p>Memory allocation. HotSpot requires explicit control over where\n+allocations occur. The C++98\/03 <code>std::allocator<\/code> class is too\n+limited to support our usage. (Changes in more recent Standards may\n+remove this limitation.)<\/p><\/li>\n+<li><p>Implementation vagaries. Bugs, or simply different implementation\n+choices, can lead to different behaviors among the various Standard\n+Libraries we need to deal with.<\/p><\/li>\n+<li><p>Inconsistent naming conventions. HotSpot and the C++ Standard use\n+different naming conventions. The coexistence of those different\n+conventions might appear jarring and reduce readability.<\/p><\/li>\n@@ -248,2 +595,4 @@\n-<li><code>#include &lt;new&gt;<\/code> to use placement <code>new<\/code>, <code>std::nothrow<\/code>, and <code>std::nothrow_t<\/code>.<\/li>\n-<li><code>#include &lt;limits&gt;<\/code> to use <code>std::numeric_limits<\/code>.<\/li>\n+<li><code>#include &lt;new&gt;<\/code> to use placement <code>new<\/code>,\n+<code>std::nothrow<\/code>, and <code>std::nothrow_t<\/code>.<\/li>\n+<li><code>#include &lt;limits&gt;<\/code> to use\n+<code>std::numeric_limits<\/code>.<\/li>\n@@ -251,1 +600,2 @@\n-<li><code>#include &lt;cstddef&gt;<\/code> to use <code>std::nullptr_t<\/code>.<\/li>\n+<li><code>#include &lt;cstddef&gt;<\/code> to use\n+<code>std::nullptr_t<\/code>.<\/li>\n@@ -253,1 +603,5 @@\n-<p>TODO: Rather than directly #including (permitted) Standard Library headers, use a convention of #including wrapper headers (in some location like hotspot\/shared\/stdcpp). This provides a single place for dealing with issues we might have for any given header, esp. platform-specific issues.<\/p>\n+<p>TODO: Rather than directly #including (permitted) Standard Library\n+headers, use a convention of #including wrapper headers (in some\n+location like hotspot\/shared\/stdcpp). This provides a single place for\n+dealing with issues we might have for any given header, esp.\n+platform-specific issues.<\/p>\n@@ -255,1 +609,5 @@\n-<p>Use type deduction only if it makes the code clearer or safer. Do not use it merely to avoid the inconvenience of writing an explicit type, unless that type is itself difficult to write. An example of the latter is a function template return type that depends on template parameters in a non-trivial way.<\/p>\n+<p>Use type deduction only if it makes the code clearer or safer. Do not\n+use it merely to avoid the inconvenience of writing an explicit type,\n+unless that type is itself difficult to write. An example of the latter\n+is a function template return type that depends on template parameters\n+in a non-trivial way.<\/p>\n@@ -258,4 +616,15 @@\n-<li><p>Function argument deduction. This is always permitted, and indeed encouraged. It is nearly always better to allow the type of a function template argument to be deduced rather than explicitly specified.<\/p><\/li>\n-<li><p><code>auto<\/code> variable declarations (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2006\/n1984.pdf\">n1984<\/a>)<br> For local variables, this can be used to make the code clearer by eliminating type information that is obvious or irrelevant. Excessive use can make code much harder to understand.<\/p><\/li>\n-<li><p>Function return type deduction (<a href=\"https:\/\/isocpp.org\/files\/papers\/N3638.html\">n3638<\/a>)<br> Only use if the function body has a very small number of <code>return<\/code> statements, and generally relatively little other code.<\/p><\/li>\n-<li><p>Also see <a href=\"#lambdaexpressions\">lambda expressions<\/a>.<\/p><\/li>\n+<li><p>Function argument deduction. This is always permitted, and indeed\n+encouraged. It is nearly always better to allow the type of a function\n+template argument to be deduced rather than explicitly\n+specified.<\/p><\/li>\n+<li><p><code>auto<\/code> variable declarations (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2006\/n1984.pdf\">n1984<\/a>)<br>\n+For local variables, this can be used to make the code clearer by\n+eliminating type information that is obvious or irrelevant. Excessive\n+use can make code much harder to understand.<\/p><\/li>\n+<li><p>Function return type deduction (<a\n+href=\"https:\/\/isocpp.org\/files\/papers\/N3638.html\">n3638<\/a>)<br> Only\n+use if the function body has a very small number of <code>return<\/code>\n+statements, and generally relatively little other code.<\/p><\/li>\n+<li><p>Also see <a href=\"#lambdaexpressions\">lambda\n+expressions<\/a>.<\/p><\/li>\n@@ -264,3 +633,22 @@\n-<p><a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/sfinae\" title=\"Substitution Failure Is Not An Error\">Substitution Failure Is Not An Error<\/a> (SFINAE) is a template metaprogramming technique that makes use of template parameter substitution failures to make compile-time decisions.<\/p>\n-<p>C++11 relaxed the rules for what constitutes a hard-error when attempting to substitute template parameters with template arguments, making most deduction errors be substitution errors; see (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2634.html\">n2634<\/a>). This makes <a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/sfinae\" title=\"Substitution Failure Is Not An Error\">SFINAE<\/a> more powerful and easier to use. However, the implementation complexity for this change is significant, and this seems to be a place where obscure corner-case bugs in various compilers can be found. So while this feature can (and indeed should) be used (and would be difficult to avoid), caution should be used when pushing to extremes.<\/p>\n-<p>Here are a few closely related example bugs:<br> <a href=\"https:\/\/gcc.gnu.org\/bugzilla\/show_bug.cgi?id=95468\" class=\"uri\">https:\/\/gcc.gnu.org\/bugzilla\/show_bug.cgi?id=95468<\/a><br> <a href=\"https:\/\/developercommunity.visualstudio.com\/content\/problem\/396562\/sizeof-deduced-type-is-sometimes-not-a-constant-ex.html\" class=\"uri\">https:\/\/developercommunity.visualstudio.com\/content\/problem\/396562\/sizeof-deduced-type-is-sometimes-not-a-constant-ex.html<\/a><\/p>\n+<p><a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/sfinae\"\n+title=\"Substitution Failure Is Not An Error\">Substitution Failure Is Not\n+An Error<\/a> (SFINAE) is a template metaprogramming technique that makes\n+use of template parameter substitution failures to make compile-time\n+decisions.<\/p>\n+<p>C++11 relaxed the rules for what constitutes a hard-error when\n+attempting to substitute template parameters with template arguments,\n+making most deduction errors be substitution errors; see (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2634.html\">n2634<\/a>).\n+This makes <a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/sfinae\"\n+title=\"Substitution Failure Is Not An Error\">SFINAE<\/a> more powerful\n+and easier to use. However, the implementation complexity for this\n+change is significant, and this seems to be a place where obscure\n+corner-case bugs in various compilers can be found. So while this\n+feature can (and indeed should) be used (and would be difficult to\n+avoid), caution should be used when pushing to extremes.<\/p>\n+<p>Here are a few closely related example bugs:<br> <a\n+href=\"https:\/\/gcc.gnu.org\/bugzilla\/show_bug.cgi?id=95468\"\n+class=\"uri\">https:\/\/gcc.gnu.org\/bugzilla\/show_bug.cgi?id=95468<\/a><br>\n+<a\n+href=\"https:\/\/developercommunity.visualstudio.com\/content\/problem\/396562\/sizeof-deduced-type-is-sometimes-not-a-constant-ex.html\"\n+class=\"uri\">https:\/\/developercommunity.visualstudio.com\/content\/problem\/396562\/sizeof-deduced-type-is-sometimes-not-a-constant-ex.html<\/a><\/p>\n@@ -268,5 +656,17 @@\n-<p>Where appropriate, <em>scoped-enums<\/em> should be used. (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2347.pdf\">n2347<\/a>)<\/p>\n-<p>Use of <em>unscoped-enums<\/em> is permitted, though ordinary constants may be preferable when the automatic initializer feature isn't used.<\/p>\n-<p>The underlying type (the <em>enum-base<\/em>) of an unscoped enum type should always be specified explicitly. When unspecified, the underlying type is dependent on the range of the enumerator values and the platform.<\/p>\n-<p>The underlying type of a <em>scoped-enum<\/em> should also be specified explicitly if conversions may be applied to values of that type.<\/p>\n-<p>Due to bugs in certain (very old) compilers, there is widespread use of enums and avoidance of in-class initialization of static integral constant members. Compilers having such bugs are no longer supported. Except where an enum is semantically appropriate, new code should use integral constants.<\/p>\n+<p>Where appropriate, <em>scoped-enums<\/em> should be used. (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2347.pdf\">n2347<\/a>)<\/p>\n+<p>Use of <em>unscoped-enums<\/em> is permitted, though ordinary\n+constants may be preferable when the automatic initializer feature isn't\n+used.<\/p>\n+<p>The underlying type (the <em>enum-base<\/em>) of an unscoped enum type\n+should always be specified explicitly. When unspecified, the underlying\n+type is dependent on the range of the enumerator values and the\n+platform.<\/p>\n+<p>The underlying type of a <em>scoped-enum<\/em> should also be\n+specified explicitly if conversions may be applied to values of that\n+type.<\/p>\n+<p>Due to bugs in certain (very old) compilers, there is widespread use\n+of enums and avoidance of in-class initialization of static integral\n+constant members. Compilers having such bugs are no longer supported.\n+Except where an enum is semantically appropriate, new code should use\n+integral constants.<\/p>\n@@ -274,2 +674,20 @@\n-<p>Avoid use of <code>thread_local<\/code> (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2659.htm\">n2659<\/a>); and instead, use the HotSpot macro <code>THREAD_LOCAL<\/code>, for which the initializer must be a constant expression. When <code>thread_local<\/code> must be used, use the Hotspot macro <code>APPROVED_CPP_THREAD_LOCAL<\/code> to indicate that the use has been given appropriate consideration.<\/p>\n-<p>As was discussed in the review for <a href=\"https:\/\/mail.openjdk.org\/pipermail\/hotspot-dev\/2019-September\/039487.html\">JDK-8230877<\/a>, <code>thread_local<\/code> allows dynamic initialization and destruction semantics. However, that support requires a run-time penalty for references to non-function-local <code>thread_local<\/code> variables defined in a different translation unit, even if they don't need dynamic initialization. Dynamic initialization and destruction of non-local <code>thread_local<\/code> variables also has the same ordering problems as for ordinary non-local variables. So we avoid use of <code>thread_local<\/code> in general, limiting its use to only those cases where dynamic initialization or destruction are essential. See <a href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8282469\">JDK-8282469<\/a> for further discussion.<\/p>\n+<p>Avoid use of <code>thread_local<\/code> (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2659.htm\">n2659<\/a>);\n+and instead, use the HotSpot macro <code>THREAD_LOCAL<\/code>, for which\n+the initializer must be a constant expression. When\n+<code>thread_local<\/code> must be used, use the Hotspot macro\n+<code>APPROVED_CPP_THREAD_LOCAL<\/code> to indicate that the use has been\n+given appropriate consideration.<\/p>\n+<p>As was discussed in the review for <a\n+href=\"https:\/\/mail.openjdk.org\/pipermail\/hotspot-dev\/2019-September\/039487.html\">JDK-8230877<\/a>,\n+<code>thread_local<\/code> allows dynamic initialization and destruction\n+semantics. However, that support requires a run-time penalty for\n+references to non-function-local <code>thread_local<\/code> variables\n+defined in a different translation unit, even if they don't need dynamic\n+initialization. Dynamic initialization and destruction of non-local\n+<code>thread_local<\/code> variables also has the same ordering problems\n+as for ordinary non-local variables. So we avoid use of\n+<code>thread_local<\/code> in general, limiting its use to only those\n+cases where dynamic initialization or destruction are essential. See <a\n+href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8282469\">JDK-8282469<\/a> for\n+further discussion.<\/p>\n@@ -277,2 +695,6 @@\n-<p>Prefer <code>nullptr<\/code> (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2431.pdf\">n2431<\/a>) to <code>NULL<\/code>. Don't use (constexpr or literal) 0 for pointers.<\/p>\n-<p>For historical reasons there are widespread uses of both <code>NULL<\/code> and of integer 0 as a pointer value.<\/p>\n+<p>Prefer <code>nullptr<\/code> (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2431.pdf\">n2431<\/a>)\n+to <code>NULL<\/code>. Don't use (constexpr or literal) 0 for\n+pointers.<\/p>\n+<p>For historical reasons there are widespread uses of both\n+<code>NULL<\/code> and of integer 0 as a pointer value.<\/p>\n@@ -280,3 +702,16 @@\n-<p>Do not use facilities provided by the <code>&lt;atomic&gt;<\/code> header (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2427.html\">n2427<\/a>), (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2752.htm\">n2752<\/a>); instead, use the HotSpot <code>Atomic<\/code> class and related facilities.<\/p>\n-<p>Atomic operations in HotSpot code must have semantics which are consistent with those provided by the JDK's compilers for Java. There are platform-specific implementation choices that a C++ compiler might make or change that are outside the scope of the C++ Standard, and might differ from what the Java compilers implement.<\/p>\n-<p>In addition, HotSpot <code>Atomic<\/code> has a concept of &quot;conservative&quot; memory ordering, which may differ from (may be stronger than) sequentially consistent. There are algorithms in HotSpot that are believed to rely on that ordering.<\/p>\n+<p>Do not use facilities provided by the <code>&lt;atomic&gt;<\/code>\n+header (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2427.html\">n2427<\/a>),\n+(<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2752.htm\">n2752<\/a>);\n+instead, use the HotSpot <code>Atomic<\/code> class and related\n+facilities.<\/p>\n+<p>Atomic operations in HotSpot code must have semantics which are\n+consistent with those provided by the JDK's compilers for Java. There\n+are platform-specific implementation choices that a C++ compiler might\n+make or change that are outside the scope of the C++ Standard, and might\n+differ from what the Java compilers implement.<\/p>\n+<p>In addition, HotSpot <code>Atomic<\/code> has a concept of\n+\"conservative\" memory ordering, which may differ from (may be stronger\n+than) sequentially consistent. There are algorithms in HotSpot that are\n+believed to rely on that ordering.<\/p>\n@@ -284,1 +719,3 @@\n-<p>The use of <em>uniform initialization<\/em> (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2672.htm\">n2672<\/a>), also known as <em>brace initialization<\/em>, is permitted.<\/p>\n+<p>The use of <em>uniform initialization<\/em> (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2672.htm\">n2672<\/a>),\n+also known as <em>brace initialization<\/em>, is permitted.<\/p>\n@@ -287,5 +724,14 @@\n-<li><a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/initialization\">initialization<\/a><\/li>\n-<li><a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/value_initialization\">value initialization<\/a><\/li>\n-<li><a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/direct_initialization\">direct initialization<\/a><\/li>\n-<li><a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/list_initialization\">list initialization<\/a><\/li>\n-<li><a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/aggregate_initialization\">aggregate initialization<\/a><\/li>\n+<li><a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/initialization\">initialization<\/a><\/li>\n+<li><a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/value_initialization\">value\n+initialization<\/a><\/li>\n+<li><a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/direct_initialization\">direct\n+initialization<\/a><\/li>\n+<li><a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/list_initialization\">list\n+initialization<\/a><\/li>\n+<li><a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/aggregate_initialization\">aggregate\n+initialization<\/a><\/li>\n@@ -293,1 +739,3 @@\n-<p>Although related, the use of <code>std::initializer_list<\/code> remains forbidden, as part of the avoidance of the C++ Standard Library in HotSpot code.<\/p>\n+<p>Although related, the use of <code>std::initializer_list<\/code>\n+remains forbidden, as part of the avoidance of the C++ Standard Library\n+in HotSpot code.<\/p>\n@@ -296,1 +744,2 @@\n-<li>Local function objects, including lambda expressions, may be used.<\/li>\n+<li>Local function objects, including lambda expressions, may be\n+used.<\/li>\n@@ -298,2 +747,4 @@\n-<li>Prefer <code>[&amp;]<\/code> as the capture list of a lambda expression.<\/li>\n-<li>Return type deduction for lambda expressions is permitted, and indeed encouraged.<\/li>\n+<li>Prefer <code>[&amp;]<\/code> as the capture list of a lambda\n+expression.<\/li>\n+<li>Return type deduction for lambda expressions is permitted, and\n+indeed encouraged.<\/li>\n@@ -304,1 +755,2 @@\n-<li>Anonymous lambda expressions should not overly clutter the enclosing expression.<\/li>\n+<li>Anonymous lambda expressions should not overly clutter the enclosing\n+expression.<\/li>\n@@ -308,3 +760,13 @@\n-<p>Single-use function objects can be defined locally within a function, directly at the point of use. This is an alternative to having a function or function object class defined at class or namespace scope.<\/p>\n-<p>This usage was somewhat limited by C++03, which does not permit such a class to be used as a template parameter. That restriction was removed by C++11 (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2657.htm\">n2657<\/a>). Use of this feature is permitted.<\/p>\n-<p>Many HotSpot protocols involve &quot;function-like&quot; objects that involve some named member function rather than a call operator. For example, a function that performs some action on all threads might be written as<\/p>\n+<p>Single-use function objects can be defined locally within a function,\n+directly at the point of use. This is an alternative to having a\n+function or function object class defined at class or namespace\n+scope.<\/p>\n+<p>This usage was somewhat limited by C++03, which does not permit such\n+a class to be used as a template parameter. That restriction was removed\n+by C++11 (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2657.htm\">n2657<\/a>).\n+Use of this feature is permitted.<\/p>\n+<p>Many HotSpot protocols involve \"function-like\" objects that involve\n+some named member function rather than a call operator. For example, a\n+function that performs some action on all threads might be written\n+as<\/p>\n@@ -319,17 +781,79 @@\n-<p>HotSpot code has historically usually placed the DoSomething class at namespace (or sometimes class) scope. This separates the function's code from its use, often to the detriment of readability. It requires giving the class a globally unique name (if at namespace scope). It also loses the information that the class is intended for use in exactly one place, and does not have any subclasses. (However, the latter can now be indicated by declaring it <code>final<\/code>.) Often, for simplicity, a local class will skip things like access control and accessor functions, giving the enclosing function direct access to the implementation and eliminating some boilerplate that might be provided if the class is in some outer (more accessible) scope. On the other hand, if there is a lot of surrounding code in the function body or the local class is of significant size, defining it locally can increase clutter and reduce readability.<\/p>\n-<p><a name=\"lambdaexpressions\"><\/a> C++11 added <em>lambda expressions<\/em> as a new way to write a function object. Simple lambda expressions can be significantly more concise than a function object, eliminating a lot of boiler-plate. On the other hand, a complex lambda expression may not provide much, if any, readability benefit compared to an ordinary function object. Also, while a lambda can encapsulate a call to a &quot;function-like&quot; object, it cannot be used in place of such.<\/p>\n-<p>A common use for local functions is as one-use <a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/raii\" title=\"Resource Acquisition Is Initialization\">RAII<\/a> objects. The amount of boilerplate for a function object class (local or not) makes such usage somewhat clumsy and verbose. But with the help of a small amount of supporting utility code, lambdas work particularly well for this use case.<\/p>\n-<p>Another use for local functions is <a href=\"https:\/\/en.wikipedia.org\/wiki\/Partial_application\" title=\"Partial Application\">partial application<\/a>. Again here, lambdas are typically much simpler and less verbose than function object classes.<\/p>\n-<p>Because of these benefits, lambda expressions are permitted in HotSpot code, with some restrictions and usage guidance. An anonymous lambda is one which is passed directly as an argument. A named lambda is the value of a variable, which is its name.<\/p>\n-<p>Lambda expressions should only be passed downward. In particular, a lambda should not be returned from a function or stored in a global variable, whether directly or as the value of a member of some other object. Lambda capture is syntactically subtle (by design), and propagating a lambda in such ways can easily pass references to captured values to places where they are no longer valid. In particular, members of the enclosing <code>this<\/code> object are effectively captured by reference, even if the default capture is by-value. For such uses-cases a function object class should be used to make the desired value capturing and propagation explicit.<\/p>\n-<p>Limiting the capture list to <code>[&amp;]<\/code> (implicitly capture by reference) is a simplifying restriction that still provides good support for HotSpot usage, while reducing the cases a reader must recognize and understand.<\/p>\n-<ul>\n-<li><p>Many common lambda uses require reference capture. Not permitting it would substantially reduce the utility of lambdas.<\/p><\/li>\n-<li><p>Referential transparency. Implicit reference capture makes variable references in the lambda body have the same meaning they would have in the enclosing code. There isn't a semantic barrier across which the meaning of a variable changes.<\/p><\/li>\n-<li><p>Explicit reference capture introduces significant clutter, especially when lambda expressions are relatively small and simple, as they should be in HotSpot code.<\/p><\/li>\n-<li><p>There are a number of reasons why by-value capture might be used, but for the most part they don't apply to HotSpot code, given other usage restrictions.<\/p>\n-<ul>\n-<li><p>A primary use-case for by-value capture is to support escaping uses, where values captured by-reference might become invalid. That use-case doesn't apply if only downward lambdas are used.<\/p><\/li>\n-<li><p>By-value capture can also make a lambda-local copy for mutation, which requires making the lambda <code>mutable<\/code>; see below.<\/p><\/li>\n-<li><p>By-value capture might be viewed as an optimization, avoiding any overhead for reference capture of cheap to copy values. But the compiler can often eliminate any such overhead.<\/p><\/li>\n-<li><p>By-value capture by a non-<code>mutable<\/code> lambda makes the captured values const, preventing any modification by the lambda and making the captured value unaffected by modifications to the outer variable. But this only applies to captured auto variables, not member variables, and is inconsistent with referential transparency.<\/p><\/li>\n+<p>HotSpot code has historically usually placed the DoSomething class at\n+namespace (or sometimes class) scope. This separates the function's code\n+from its use, often to the detriment of readability. It requires giving\n+the class a globally unique name (if at namespace scope). It also loses\n+the information that the class is intended for use in exactly one place,\n+and does not have any subclasses. (However, the latter can now be\n+indicated by declaring it <code>final<\/code>.) Often, for simplicity, a\n+local class will skip things like access control and accessor functions,\n+giving the enclosing function direct access to the implementation and\n+eliminating some boilerplate that might be provided if the class is in\n+some outer (more accessible) scope. On the other hand, if there is a lot\n+of surrounding code in the function body or the local class is of\n+significant size, defining it locally can increase clutter and reduce\n+readability.<\/p>\n+<p><a name=\"lambdaexpressions\"><\/a> C++11 added <em>lambda\n+expressions<\/em> as a new way to write a function object. Simple lambda\n+expressions can be significantly more concise than a function object,\n+eliminating a lot of boiler-plate. On the other hand, a complex lambda\n+expression may not provide much, if any, readability benefit compared to\n+an ordinary function object. Also, while a lambda can encapsulate a call\n+to a \"function-like\" object, it cannot be used in place of such.<\/p>\n+<p>A common use for local functions is as one-use <a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/raii\"\n+title=\"Resource Acquisition Is Initialization\">RAII<\/a> objects. The\n+amount of boilerplate for a function object class (local or not) makes\n+such usage somewhat clumsy and verbose. But with the help of a small\n+amount of supporting utility code, lambdas work particularly well for\n+this use case.<\/p>\n+<p>Another use for local functions is <a\n+href=\"https:\/\/en.wikipedia.org\/wiki\/Partial_application\"\n+title=\"Partial Application\">partial application<\/a>. Again here, lambdas\n+are typically much simpler and less verbose than function object\n+classes.<\/p>\n+<p>Because of these benefits, lambda expressions are permitted in\n+HotSpot code, with some restrictions and usage guidance. An anonymous\n+lambda is one which is passed directly as an argument. A named lambda is\n+the value of a variable, which is its name.<\/p>\n+<p>Lambda expressions should only be passed downward. In particular, a\n+lambda should not be returned from a function or stored in a global\n+variable, whether directly or as the value of a member of some other\n+object. Lambda capture is syntactically subtle (by design), and\n+propagating a lambda in such ways can easily pass references to captured\n+values to places where they are no longer valid. In particular, members\n+of the enclosing <code>this<\/code> object are effectively captured by\n+reference, even if the default capture is by-value. For such uses-cases\n+a function object class should be used to make the desired value\n+capturing and propagation explicit.<\/p>\n+<p>Limiting the capture list to <code>[&amp;]<\/code> (implicitly capture\n+by reference) is a simplifying restriction that still provides good\n+support for HotSpot usage, while reducing the cases a reader must\n+recognize and understand.<\/p>\n+<ul>\n+<li><p>Many common lambda uses require reference capture. Not permitting\n+it would substantially reduce the utility of lambdas.<\/p><\/li>\n+<li><p>Referential transparency. Implicit reference capture makes\n+variable references in the lambda body have the same meaning they would\n+have in the enclosing code. There isn't a semantic barrier across which\n+the meaning of a variable changes.<\/p><\/li>\n+<li><p>Explicit reference capture introduces significant clutter,\n+especially when lambda expressions are relatively small and simple, as\n+they should be in HotSpot code.<\/p><\/li>\n+<li><p>There are a number of reasons why by-value capture might be used,\n+but for the most part they don't apply to HotSpot code, given other\n+usage restrictions.<\/p>\n+<ul>\n+<li><p>A primary use-case for by-value capture is to support escaping\n+uses, where values captured by-reference might become invalid. That\n+use-case doesn't apply if only downward lambdas are used.<\/p><\/li>\n+<li><p>By-value capture can also make a lambda-local copy for mutation,\n+which requires making the lambda <code>mutable<\/code>; see\n+below.<\/p><\/li>\n+<li><p>By-value capture might be viewed as an optimization, avoiding any\n+overhead for reference capture of cheap to copy values. But the compiler\n+can often eliminate any such overhead.<\/p><\/li>\n+<li><p>By-value capture by a non-<code>mutable<\/code> lambda makes the\n+captured values const, preventing any modification by the lambda and\n+making the captured value unaffected by modifications to the outer\n+variable. But this only applies to captured auto variables, not member\n+variables, and is inconsistent with referential transparency.<\/p><\/li>\n@@ -337,2 +861,9 @@\n-<li><p>Non-capturing lambdas (with an empty capture list - <code>[]<\/code>) have limited utility. There are cases where no captures are required (pure functions, for example), but if the function is small and simple then that's obvious anyway.<\/p><\/li>\n-<li><p>Capture initializers (a C++14 feature - <a href=\"https:\/\/isocpp.org\/files\/papers\/N3649.html\">N3649<\/a>) are not permitted. Capture initializers inherently increase the complexity of the capture list, and provide little benefit over an additional in-scope local variable.<\/p><\/li>\n+<li><p>Non-capturing lambdas (with an empty capture list -\n+<code>[]<\/code>) have limited utility. There are cases where no captures\n+are required (pure functions, for example), but if the function is small\n+and simple then that's obvious anyway.<\/p><\/li>\n+<li><p>Capture initializers (a C++14 feature - <a\n+href=\"https:\/\/isocpp.org\/files\/papers\/N3649.html\">N3649<\/a>) are not\n+permitted. Capture initializers inherently increase the complexity of\n+the capture list, and provide little benefit over an additional in-scope\n+local variable.<\/p><\/li>\n@@ -340,3 +871,12 @@\n-<p>The use of <code>mutable<\/code> lambda expressions is forbidden because there don't seem to be many, if any, good use-cases for them in HotSpot. A lambda expression needs to be mutable in order to modify a by-value captured value. But with only downward lambdas, such usage seems likely to be rare and complicated. It is better to use a function object class in any such cases that arise, rather than requiring all HotSpot developers to understand this relatively obscure feature.<\/p>\n-<p>While it is possible to directly invoke an anonymous lambda expression, that feature should not be used, as such a form can be confusing to readers. Instead, name the lambda and call it by name.<\/p>\n-<p>Some reasons to prefer a named lambda instead of an anonymous lambda are<\/p>\n+<p>The use of <code>mutable<\/code> lambda expressions is forbidden\n+because there don't seem to be many, if any, good use-cases for them in\n+HotSpot. A lambda expression needs to be mutable in order to modify a\n+by-value captured value. But with only downward lambdas, such usage\n+seems likely to be rare and complicated. It is better to use a function\n+object class in any such cases that arise, rather than requiring all\n+HotSpot developers to understand this relatively obscure feature.<\/p>\n+<p>While it is possible to directly invoke an anonymous lambda\n+expression, that feature should not be used, as such a form can be\n+confusing to readers. Instead, name the lambda and call it by name.<\/p>\n+<p>Some reasons to prefer a named lambda instead of an anonymous lambda\n+are<\/p>\n@@ -344,2 +884,5 @@\n-<li><p>The body contains non-trivial control flow or declarations or other nested constructs.<\/p><\/li>\n-<li><p>Its role in an argument list is hard to guess without examining the function declaration. Give it a name that indicates its purpose.<\/p><\/li>\n+<li><p>The body contains non-trivial control flow or declarations or\n+other nested constructs.<\/p><\/li>\n+<li><p>Its role in an argument list is hard to guess without examining\n+the function declaration. Give it a name that indicates its\n+purpose.<\/p><\/li>\n@@ -347,1 +890,2 @@\n-<li><p>It has a complex explicit return type or parameter types.<\/p><\/li>\n+<li><p>It has a complex explicit return type or parameter\n+types.<\/p><\/li>\n@@ -349,2 +893,13 @@\n-<p>Lambda expressions, and particularly anonymous lambda expressions, should be simple and compact. One-liners are good. Anonymous lambdas should usually be limited to a couple lines of body code. More complex lambdas should be named. A named lambda should not clutter the enclosing function and make it long and complex; do continue to break up large functions via the use of separate helper functions.<\/p>\n-<p>An anonymous lambda expression should either be a one-liner in a one-line expression, or isolated in its own set of lines. Don't place part of a lambda expression on the same line as other arguments to a function. The body of a multi-line lambda argument should be indented from the start of the capture list, as if that were the start of an ordinary function definition. The body of a multi-line named lambda should be indented one step from the variable's indentation.<\/p>\n+<p>Lambda expressions, and particularly anonymous lambda expressions,\n+should be simple and compact. One-liners are good. Anonymous lambdas\n+should usually be limited to a couple lines of body code. More complex\n+lambdas should be named. A named lambda should not clutter the enclosing\n+function and make it long and complex; do continue to break up large\n+functions via the use of separate helper functions.<\/p>\n+<p>An anonymous lambda expression should either be a one-liner in a\n+one-line expression, or isolated in its own set of lines. Don't place\n+part of a lambda expression on the same line as other arguments to a\n+function. The body of a multi-line lambda argument should be indented\n+from the start of the capture list, as if that were the start of an\n+ordinary function definition. The body of a multi-line named lambda\n+should be indented one step from the variable's indentation.<\/p>\n@@ -353,4 +908,4 @@\n-<li><code>foo([&amp;] { ++counter; });<\/code><\/li>\n-<li><code>foo(x, [&amp;] { ++counter; });<\/code><\/li>\n-<li><code>foo([&amp;] { if (predicate) ++counter; });<\/code><\/li>\n-<li><code>foo([&amp;] { auto tmp = process(x); tmp.f(); return tmp.g(); })<\/code><\/li>\n+<li><p><code>foo([&amp;] { ++counter; });<\/code><\/p><\/li>\n+<li><p><code>foo(x, [&amp;] { ++counter; });<\/code><\/p><\/li>\n+<li><p><code>foo([&amp;] { if (predicate) ++counter; });<\/code><\/p><\/li>\n+<li><p><code>foo([&amp;] { auto tmp = process(x); tmp.f(); return tmp.g(); })<\/code><\/p><\/li>\n@@ -380,1 +935,3 @@\n-<p>Item 4, and especially items 6 and 7, are pushing the simplicity limits for anonymous lambdas. Item 6 might be better written using a named lambda:<\/p>\n+<p>Item 4, and especially items 6 and 7, are pushing the simplicity\n+limits for anonymous lambdas. Item 6 might be better written using a\n+named lambda:<\/p>\n@@ -382,1 +939,8 @@\n-<p>Note that C++11 also added <em>bind expressions<\/em> as a way to write a function object for partial application, using <code>std::bind<\/code> and related facilities from the Standard Library. <code>std::bind<\/code> generalizes and replaces some of the binders from C++03. Bind expressions are not permitted in HotSpot code. They don't provide enough benefit over lambdas or local function classes in the cases where bind expressions are applicable to warrant the introduction of yet another mechanism in this space into HotSpot code.<\/p>\n+<p>Note that C++11 also added <em>bind expressions<\/em> as a way to\n+write a function object for partial application, using\n+<code>std::bind<\/code> and related facilities from the Standard Library.\n+<code>std::bind<\/code> generalizes and replaces some of the binders from\n+C++03. Bind expressions are not permitted in HotSpot code. They don't\n+provide enough benefit over lambdas or local function classes in the\n+cases where bind expressions are applicable to warrant the introduction\n+of yet another mechanism in this space into HotSpot code.<\/p>\n@@ -385,4 +949,8 @@\n-<li>Local and unnamed types as template parameters (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2657.htm\">n2657<\/a>)<\/li>\n-<li>New wording for C++0x lambdas (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2009\/n2927.pdf\">n2927<\/a>)<\/li>\n-<li>Generalized lambda capture (init-capture) (<a href=\"https:\/\/isocpp.org\/files\/papers\/N3648.html\">N3648<\/a>)<\/li>\n-<li>Generic (polymorphic) lambda expressions (<a href=\"https:\/\/isocpp.org\/files\/papers\/N3649.html\">N3649<\/a>)<\/li>\n+<li>Local and unnamed types as template parameters (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2657.htm\">n2657<\/a>)<\/li>\n+<li>New wording for C++0x lambdas (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2009\/n2927.pdf\">n2927<\/a>)<\/li>\n+<li>Generalized lambda capture (init-capture) (<a\n+href=\"https:\/\/isocpp.org\/files\/papers\/N3648.html\">N3648<\/a>)<\/li>\n+<li>Generic (polymorphic) lambda expressions (<a\n+href=\"https:\/\/isocpp.org\/files\/papers\/N3649.html\">N3649<\/a>)<\/li>\n@@ -392,2 +960,4 @@\n-<li>Wording for constexpr lambda (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2016\/p0170r1.pdf\">p0170r1<\/a>)<\/li>\n-<li>Lambda capture of *this by Value (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2016\/p0018r3.html\">p0018r3<\/a>)<\/li>\n+<li>Wording for constexpr lambda (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2016\/p0170r1.pdf\">p0170r1<\/a>)<\/li>\n+<li>Lambda capture of *this by Value (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2016\/p0018r3.html\">p0018r3<\/a>)<\/li>\n@@ -397,7 +967,16 @@\n-<li>Allow lambda capture [=, this] (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0409r2.html\">p0409r2<\/a>)<\/li>\n-<li>Familiar template syntax for generic lambdas (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0428r2.pdf\">p0428r2<\/a>)<\/li>\n-<li>Simplifying implicit lambda capture (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0588r1.html\">p0588r1<\/a>)<\/li>\n-<li>Default constructible and assignable stateless lambdas (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0624r2.pdf\">p0624r2<\/a>)<\/li>\n-<li>Lambdas in unevaluated contexts (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0315r4.pdf\">p0315r4<\/a>)<\/li>\n-<li>Allow pack expansion in lambda init-capture (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2018\/p0780r2.html\">p0780r2<\/a>) (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2020\/p2095r0.html\">p2095r0<\/a>)<\/li>\n-<li>Deprecate implicit capture of this via [=] (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2018\/p0806r2.html\">p0806r2<\/a>)<\/li>\n+<li>Allow lambda capture [=, this] (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0409r2.html\">p0409r2<\/a>)<\/li>\n+<li>Familiar template syntax for generic lambdas (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0428r2.pdf\">p0428r2<\/a>)<\/li>\n+<li>Simplifying implicit lambda capture (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0588r1.html\">p0588r1<\/a>)<\/li>\n+<li>Default constructible and assignable stateless lambdas (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0624r2.pdf\">p0624r2<\/a>)<\/li>\n+<li>Lambdas in unevaluated contexts (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0315r4.pdf\">p0315r4<\/a>)<\/li>\n+<li>Allow pack expansion in lambda init-capture (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2018\/p0780r2.html\">p0780r2<\/a>)\n+(<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2020\/p2095r0.html\">p2095r0<\/a>)<\/li>\n+<li>Deprecate implicit capture of this via [=] (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2018\/p0806r2.html\">p0806r2<\/a>)<\/li>\n@@ -407,1 +986,2 @@\n-<li>Make () more optional for lambdas (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2020\/p1102r2.html\">p1102r2<\/a>)<\/li>\n+<li>Make () more optional for lambdas (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2020\/p1102r2.html\">p1102r2<\/a>)<\/li>\n@@ -410,22 +990,78 @@\n-<p>Do not use <em>inheriting constructors<\/em> (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2540.htm\">n2540<\/a>).<\/p>\n-<p>C++11 provides simple syntax allowing a class to inherit the constructors of a base class. Unfortunately there are a number of problems with the original specification, and C++17 contains significant revisions (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2015\/p0136r1.html\" title=\"p0136r1\">p0136r1<\/a> opens with a list of 8 Core Issues). Since HotSpot doesn't support use of C++17, use of inherited constructors could run into those problems. Such uses might also change behavior in a future HotSpot update to use C++17 or later, potentially in subtle ways that could lead to hard to diagnose problems. Because of this, HotSpot code must not use inherited constructors.<\/p>\n-<p>Note that gcc7 provides the <code>-fnew-inheriting-ctors<\/code> option to use the <a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2015\/p0136r1.html\" title=\"p0136r1\">p0136r1<\/a> semantics. This is enabled by default when using C++17 or later. It is also enabled by default for <code>fabi-version=11<\/code> (introduced by gcc7) or higher when using C++11\/14, as the change is considered a Defect Report that applies to those versions. Earlier versions of gcc don't have that option, and other supported compilers may not have anything similar.<\/p>\n-<h3 id=\"additional-permitted-features\">Additional Permitted Features<\/h3>\n-<ul>\n-<li><p><code>constexpr<\/code> (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2235.pdf\">n2235<\/a>) (<a href=\"https:\/\/isocpp.org\/files\/papers\/N3652.html\">n3652<\/a>)<\/p><\/li>\n-<li><p>Sized deallocation (<a href=\"https:\/\/isocpp.org\/files\/papers\/n3778.html\">n3778<\/a>)<\/p><\/li>\n-<li><p>Variadic templates (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2242.pdf\">n2242<\/a>) (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2555.pdf\">n2555<\/a>)<\/p><\/li>\n-<li><p>Static assertions (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2004\/n1720.html\">n1720<\/a>)<\/p><\/li>\n-<li><p><code>decltype<\/code> (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2343.pdf\">n2343<\/a>) (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2011\/n3276.pdf\">n3276<\/a>)<\/p><\/li>\n-<li><p>Right angle brackets (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2005\/n1757.html\">n1757<\/a>)<\/p><\/li>\n-<li><p>Default template arguments for function templates (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/cwg_defects.html#226\">CWG D226<\/a>)<\/p><\/li>\n-<li><p>Template aliases (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2258.pdf\">n2258<\/a>)<\/p><\/li>\n-<li><p>Delegating constructors (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2006\/n1986.pdf\">n1986<\/a>)<\/p><\/li>\n-<li><p>Explicit conversion operators (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2437.pdf\">n2437<\/a>)<\/p><\/li>\n-<li><p>Standard Layout Types (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2342.htm\">n2342<\/a>)<\/p><\/li>\n-<li><p>Defaulted and deleted functions (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2346.htm\">n2346<\/a>)<\/p><\/li>\n-<li><p>Dynamic initialization and destruction with concurrency (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2660.htm\">n2660<\/a>)<\/p><\/li>\n-<li><p><code>final<\/code> virtual specifiers for classes and virtual functions (<a href=\"http:\/\/www.open-std.org\/JTC1\/SC22\/WG21\/docs\/papers\/2009\/n2928.htm\">n2928<\/a>), (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2010\/n3206.htm\">n3206<\/a>), (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2011\/n3272.htm\">n3272<\/a>)<\/p><\/li>\n-<li><p><code>override<\/code> virtual specifiers for virtual functions (<a href=\"http:\/\/www.open-std.org\/JTC1\/SC22\/WG21\/docs\/papers\/2009\/n2928.htm\">n2928<\/a>), (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2010\/n3206.htm\">n3206<\/a>), (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2011\/n3272.htm\">n3272<\/a>)<\/p><\/li>\n-<li><p>Range-based <code>for<\/code> loops (<a href=\"http:\/\/www.open-std.org\/JTC1\/SC22\/WG21\/docs\/papers\/2009\/n2930.html\">n2930<\/a>) (<a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/range-for\">range-for<\/a>)<\/p><\/li>\n-<li><p>Unrestricted Unions (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2544.pdf\">n2544<\/a>)<\/p><\/li>\n+<p>Do not use <em>inheriting constructors<\/em> (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2540.htm\">n2540<\/a>).<\/p>\n+<p>C++11 provides simple syntax allowing a class to inherit the\n+constructors of a base class. Unfortunately there are a number of\n+problems with the original specification, and C++17 contains significant\n+revisions (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2015\/p0136r1.html\"\n+title=\"p0136r1\">p0136r1<\/a> opens with a list of 8 Core Issues). Since\n+HotSpot doesn't support use of C++17, use of inherited constructors\n+could run into those problems. Such uses might also change behavior in a\n+future HotSpot update to use C++17 or later, potentially in subtle ways\n+that could lead to hard to diagnose problems. Because of this, HotSpot\n+code must not use inherited constructors.<\/p>\n+<p>Note that gcc7 provides the <code>-fnew-inheriting-ctors<\/code>\n+option to use the <a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2015\/p0136r1.html\"\n+title=\"p0136r1\">p0136r1<\/a> semantics. This is enabled by default when\n+using C++17 or later. It is also enabled by default for\n+<code>fabi-version=11<\/code> (introduced by gcc7) or higher when using\n+C++11\/14, as the change is considered a Defect Report that applies to\n+those versions. Earlier versions of gcc don't have that option, and\n+other supported compilers may not have anything similar.<\/p>\n+<h3 id=\"additional-permitted-features\">Additional Permitted\n+Features<\/h3>\n+<ul>\n+<li><p><code>constexpr<\/code> (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2235.pdf\">n2235<\/a>)\n+(<a\n+href=\"https:\/\/isocpp.org\/files\/papers\/N3652.html\">n3652<\/a>)<\/p><\/li>\n+<li><p>Sized deallocation (<a\n+href=\"https:\/\/isocpp.org\/files\/papers\/n3778.html\">n3778<\/a>)<\/p><\/li>\n+<li><p>Variadic templates (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2242.pdf\">n2242<\/a>)\n+(<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2555.pdf\">n2555<\/a>)<\/p><\/li>\n+<li><p>Static assertions (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2004\/n1720.html\">n1720<\/a>)<\/p><\/li>\n+<li><p><code>decltype<\/code> (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2343.pdf\">n2343<\/a>)\n+(<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2011\/n3276.pdf\">n3276<\/a>)<\/p><\/li>\n+<li><p>Right angle brackets (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2005\/n1757.html\">n1757<\/a>)<\/p><\/li>\n+<li><p>Default template arguments for function templates (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/cwg_defects.html#226\">CWG\n+D226<\/a>)<\/p><\/li>\n+<li><p>Template aliases (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2258.pdf\">n2258<\/a>)<\/p><\/li>\n+<li><p>Delegating constructors (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2006\/n1986.pdf\">n1986<\/a>)<\/p><\/li>\n+<li><p>Explicit conversion operators (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2437.pdf\">n2437<\/a>)<\/p><\/li>\n+<li><p>Standard Layout Types (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2342.htm\">n2342<\/a>)<\/p><\/li>\n+<li><p>Defaulted and deleted functions (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2346.htm\">n2346<\/a>)<\/p><\/li>\n+<li><p>Dynamic initialization and destruction with concurrency (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2660.htm\">n2660<\/a>)<\/p><\/li>\n+<li><p><code>final<\/code> virtual specifiers for classes and virtual\n+functions (<a\n+href=\"http:\/\/www.open-std.org\/JTC1\/SC22\/WG21\/docs\/papers\/2009\/n2928.htm\">n2928<\/a>),\n+(<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2010\/n3206.htm\">n3206<\/a>),\n+(<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2011\/n3272.htm\">n3272<\/a>)<\/p><\/li>\n+<li><p><code>override<\/code> virtual specifiers for virtual functions\n+(<a\n+href=\"http:\/\/www.open-std.org\/JTC1\/SC22\/WG21\/docs\/papers\/2009\/n2928.htm\">n2928<\/a>),\n+(<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2010\/n3206.htm\">n3206<\/a>),\n+(<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2011\/n3272.htm\">n3272<\/a>)<\/p><\/li>\n+<li><p>Range-based <code>for<\/code> loops (<a\n+href=\"http:\/\/www.open-std.org\/JTC1\/SC22\/WG21\/docs\/papers\/2009\/n2930.html\">n2930<\/a>)\n+(<a\n+href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/range-for\">range-for<\/a>)<\/p><\/li>\n+<li><p>Unrestricted Unions (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2544.pdf\">n2544<\/a>)<\/p><\/li>\n@@ -435,1 +1071,1 @@\n-<li>New string and character literals\n+<li><p>New string and character literals<\/p>\n@@ -437,4 +1073,8 @@\n-<li>New character types (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2249.html\">n2249<\/a>)<\/li>\n-<li>Unicode string literals (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2442.htm\">n2442<\/a>)<\/li>\n-<li>Raw string literals (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2442.htm\">n2442<\/a>)<\/li>\n-<li>Universal character name literals (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2170.html\">n2170<\/a>)<\/li>\n+<li>New character types (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2249.html\">n2249<\/a>)<\/li>\n+<li>Unicode string literals (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2442.htm\">n2442<\/a>)<\/li>\n+<li>Raw string literals (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2442.htm\">n2442<\/a>)<\/li>\n+<li>Universal character name literals (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2170.html\">n2170<\/a>)<\/li>\n@@ -442,9 +1082,32 @@\n-<p>HotSpot doesn't need any of the new character and string literal types.<\/p><\/li>\n-<li><p>User-defined literals (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2765.pdf\">n2765<\/a>) — User-defined literals should not be added casually, but only through a proposal to add a specific UDL.<\/p><\/li>\n-<li><p>Inline namespaces (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2535.htm\">n2535<\/a>) — HotSpot makes very limited use of namespaces.<\/p><\/li>\n-<li><p><code>using namespace<\/code> directives. In particular, don't use <code>using namespace std;<\/code> to avoid needing to qualify Standard Library names.<\/p><\/li>\n-<li><p>Propagating exceptions (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2179.html\">n2179<\/a>) — HotSpot does not permit the use of exceptions, so this feature isn't useful.<\/p><\/li>\n-<li><p>Avoid non-local variables with non-constexpr initialization. In particular, avoid variables with types requiring non-trivial initialization or destruction. Initialization order problems can be difficult to deal with and lead to surprises, as can destruction ordering. HotSpot doesn't generally try to cleanup on exit, and running destructors at exit can also lead to problems.<\/p><\/li>\n-<li><p><code>[[deprecated]]<\/code> attribute (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2013\/n3760.html\">n3760<\/a>) — Not relevant in HotSpot code.<\/p><\/li>\n-<li><p>Avoid most operator overloading, preferring named functions. When operator overloading is used, ensure the semantics conform to the normal expected behavior of the operation.<\/p><\/li>\n-<li><p>Avoid most implicit conversion constructors and (implicit or explicit) conversion operators. (Note that conversion to <code>bool<\/code> isn't needed in HotSpot code because of the &quot;no implicit boolean&quot; guideline.)<\/p><\/li>\n+<p>HotSpot doesn't need any of the new character and string literal\n+types.<\/p><\/li>\n+<li><p>User-defined literals (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2765.pdf\">n2765<\/a>)\n+— User-defined literals should not be added casually, but only through a\n+proposal to add a specific UDL.<\/p><\/li>\n+<li><p>Inline namespaces (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2535.htm\">n2535<\/a>)\n+— HotSpot makes very limited use of namespaces.<\/p><\/li>\n+<li><p><code>using namespace<\/code> directives. In particular, don't use\n+<code>using namespace std;<\/code> to avoid needing to qualify Standard\n+Library names.<\/p><\/li>\n+<li><p>Propagating exceptions (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2179.html\">n2179<\/a>)\n+— HotSpot does not permit the use of exceptions, so this feature isn't\n+useful.<\/p><\/li>\n+<li><p>Avoid non-local variables with non-constexpr initialization. In\n+particular, avoid variables with types requiring non-trivial\n+initialization or destruction. Initialization order problems can be\n+difficult to deal with and lead to surprises, as can destruction\n+ordering. HotSpot doesn't generally try to cleanup on exit, and running\n+destructors at exit can also lead to problems.<\/p><\/li>\n+<li><p><code>[[deprecated]]<\/code> attribute (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2013\/n3760.html\">n3760<\/a>)\n+— Not relevant in HotSpot code.<\/p><\/li>\n+<li><p>Avoid most operator overloading, preferring named functions. When\n+operator overloading is used, ensure the semantics conform to the normal\n+expected behavior of the operation.<\/p><\/li>\n+<li><p>Avoid most implicit conversion constructors and (implicit or\n+explicit) conversion operators. (Note that conversion to\n+<code>bool<\/code> isn't needed in HotSpot code because of the \"no\n+implicit boolean\" guideline.)<\/p><\/li>\n@@ -454,1 +1117,2 @@\n-<p>This list is incomplete; it serves to explicitly call out some features that have not yet been discussed.<\/p>\n+<p>This list is incomplete; it serves to explicitly call out some\n+features that have not yet been discussed.<\/p>\n@@ -456,4 +1120,8 @@\n-<li><p>Trailing return type syntax for functions (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2541.htm\">n2541<\/a>)<\/p><\/li>\n-<li><p>Variable templates (<a href=\"https:\/\/isocpp.org\/files\/papers\/N3651.pdf\">n3651<\/a>)<\/p><\/li>\n-<li><p>Member initializers and aggregates (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2013\/n3653.html\">n3653<\/a>)<\/p><\/li>\n-<li><p><code>[[noreturn]]<\/code> attribute (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2761.pdf\">n2761<\/a>)<\/p><\/li>\n+<li><p>Trailing return type syntax for functions (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2541.htm\">n2541<\/a>)<\/p><\/li>\n+<li><p>Variable templates (<a\n+href=\"https:\/\/isocpp.org\/files\/papers\/N3651.pdf\">n3651<\/a>)<\/p><\/li>\n+<li><p>Member initializers and aggregates (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2013\/n3653.html\">n3653<\/a>)<\/p><\/li>\n+<li><p><code>[[noreturn]]<\/code> attribute (<a\n+href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2761.pdf\">n2761<\/a>)<\/p><\/li>\n","filename":"doc\/hotspot-style.html","additions":954,"deletions":286,"binary":false,"changes":1240,"status":"modified"},{"patch":"@@ -8,5 +8,13 @@\n-  <style type=\"text\/css\">\n-      code{white-space: pre-wrap;}\n-      span.smallcaps{font-variant: small-caps;}\n-      span.underline{text-decoration: underline;}\n-      div.column{display: inline-block; vertical-align: top; width: 50%;}\n+  <style>\n+    code{white-space: pre-wrap;}\n+    span.smallcaps{font-variant: small-caps;}\n+    div.columns{display: flex; gap: min(4vw, 1.5em);}\n+    div.column{flex: auto; overflow-x: auto;}\n+    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n+    ul.task-list{list-style: none;}\n+    ul.task-list li input[type=\"checkbox\"] {\n+      width: 0.8em;\n+      margin: 0 0.8em 0.2em -1.6em;\n+      vertical-align: middle;\n+    }\n+    .display.math{display: block; text-align: center; margin: 0.5rem auto;}\n@@ -23,1 +31,1 @@\n-<nav id=\"TOC\">\n+<nav id=\"TOC\" role=\"doc-toc\">\n@@ -25,8 +33,16 @@\n-<li><a href=\"#good-test-properties\">Good test properties<\/a><ul>\n-<li><a href=\"#lightness\">Lightness<\/a><\/li>\n-<li><a href=\"#isolation\">Isolation<\/a><\/li>\n-<li><a href=\"#atomicity-and-self-containment\">Atomicity and self-containment<\/a><\/li>\n-<li><a href=\"#repeatability\">Repeatability<\/a><\/li>\n-<li><a href=\"#informativeness\">Informativeness<\/a><\/li>\n-<li><a href=\"#testing-instead-of-visiting\">Testing instead of visiting<\/a><\/li>\n-<li><a href=\"#nearness\">Nearness<\/a><\/li>\n+<li><a href=\"#good-test-properties\" id=\"toc-good-test-properties\">Good\n+test properties<\/a>\n+<ul>\n+<li><a href=\"#lightness\" id=\"toc-lightness\">Lightness<\/a><\/li>\n+<li><a href=\"#isolation\" id=\"toc-isolation\">Isolation<\/a><\/li>\n+<li><a href=\"#atomicity-and-self-containment\"\n+id=\"toc-atomicity-and-self-containment\">Atomicity and\n+self-containment<\/a><\/li>\n+<li><a href=\"#repeatability\"\n+id=\"toc-repeatability\">Repeatability<\/a><\/li>\n+<li><a href=\"#informativeness\"\n+id=\"toc-informativeness\">Informativeness<\/a><\/li>\n+<li><a href=\"#testing-instead-of-visiting\"\n+id=\"toc-testing-instead-of-visiting\">Testing instead of\n+visiting<\/a><\/li>\n+<li><a href=\"#nearness\" id=\"toc-nearness\">Nearness<\/a><\/li>\n@@ -34,8 +50,17 @@\n-<li><a href=\"#asserts\">Asserts<\/a><ul>\n-<li><a href=\"#several-checks\">Several checks<\/a><\/li>\n-<li><a href=\"#first-parameter-is-expected-value\">First parameter is expected value<\/a><\/li>\n-<li><a href=\"#floating-point-comparison\">Floating-point comparison<\/a><\/li>\n-<li><a href=\"#c-string-comparison\">C string comparison<\/a><\/li>\n-<li><a href=\"#error-messages\">Error messages<\/a><\/li>\n-<li><a href=\"#uncluttered-output\">Uncluttered output<\/a><\/li>\n-<li><a href=\"#failures-propagation\">Failures propagation<\/a><\/li>\n+<li><a href=\"#asserts\" id=\"toc-asserts\">Asserts<\/a>\n+<ul>\n+<li><a href=\"#several-checks\" id=\"toc-several-checks\">Several\n+checks<\/a><\/li>\n+<li><a href=\"#first-parameter-is-expected-value\"\n+id=\"toc-first-parameter-is-expected-value\">First parameter is expected\n+value<\/a><\/li>\n+<li><a href=\"#floating-point-comparison\"\n+id=\"toc-floating-point-comparison\">Floating-point comparison<\/a><\/li>\n+<li><a href=\"#c-string-comparison\" id=\"toc-c-string-comparison\">C string\n+comparison<\/a><\/li>\n+<li><a href=\"#error-messages\" id=\"toc-error-messages\">Error\n+messages<\/a><\/li>\n+<li><a href=\"#uncluttered-output\"\n+id=\"toc-uncluttered-output\">Uncluttered output<\/a><\/li>\n+<li><a href=\"#failures-propagation\"\n+id=\"toc-failures-propagation\">Failures propagation<\/a><\/li>\n@@ -43,8 +68,15 @@\n-<li><a href=\"#naming-and-grouping\">Naming and Grouping<\/a><ul>\n-<li><a href=\"#test-group-names\">Test group names<\/a><\/li>\n-<li><a href=\"#filename\">Filename<\/a><\/li>\n-<li><a href=\"#file-location\">File location<\/a><\/li>\n-<li><a href=\"#test-names\">Test names<\/a><\/li>\n-<li><a href=\"#fixture-classes\">Fixture classes<\/a><\/li>\n-<li><a href=\"#friend-classes\">Friend classes<\/a><\/li>\n-<li><a href=\"#oscpu-specific-tests\">OS\/CPU specific tests<\/a><\/li>\n+<li><a href=\"#naming-and-grouping\" id=\"toc-naming-and-grouping\">Naming\n+and Grouping<\/a>\n+<ul>\n+<li><a href=\"#test-group-names\" id=\"toc-test-group-names\">Test group\n+names<\/a><\/li>\n+<li><a href=\"#filename\" id=\"toc-filename\">Filename<\/a><\/li>\n+<li><a href=\"#file-location\" id=\"toc-file-location\">File\n+location<\/a><\/li>\n+<li><a href=\"#test-names\" id=\"toc-test-names\">Test names<\/a><\/li>\n+<li><a href=\"#fixture-classes\" id=\"toc-fixture-classes\">Fixture\n+classes<\/a><\/li>\n+<li><a href=\"#friend-classes\" id=\"toc-friend-classes\">Friend\n+classes<\/a><\/li>\n+<li><a href=\"#oscpu-specific-tests\" id=\"toc-oscpu-specific-tests\">OS\/CPU\n+specific tests<\/a><\/li>\n@@ -52,9 +84,18 @@\n-<li><a href=\"#miscellaneous\">Miscellaneous<\/a><ul>\n-<li><a href=\"#hotspot-style\">Hotspot style<\/a><\/li>\n-<li><a href=\"#codetest-metrics\">Code\/test metrics<\/a><\/li>\n-<li><a href=\"#access-to-non-public-members\">Access to non-public members<\/a><\/li>\n-<li><a href=\"#death-tests\">Death tests<\/a><\/li>\n-<li><a href=\"#external-flags\">External flags<\/a><\/li>\n-<li><a href=\"#test-specific-flags\">Test-specific flags<\/a><\/li>\n-<li><a href=\"#flag-restoring\">Flag restoring<\/a><\/li>\n-<li><a href=\"#googletest-documentation\">GoogleTest documentation<\/a><\/li>\n+<li><a href=\"#miscellaneous\" id=\"toc-miscellaneous\">Miscellaneous<\/a>\n+<ul>\n+<li><a href=\"#hotspot-style\" id=\"toc-hotspot-style\">Hotspot\n+style<\/a><\/li>\n+<li><a href=\"#codetest-metrics\" id=\"toc-codetest-metrics\">Code\/test\n+metrics<\/a><\/li>\n+<li><a href=\"#access-to-non-public-members\"\n+id=\"toc-access-to-non-public-members\">Access to non-public\n+members<\/a><\/li>\n+<li><a href=\"#death-tests\" id=\"toc-death-tests\">Death tests<\/a><\/li>\n+<li><a href=\"#external-flags\" id=\"toc-external-flags\">External\n+flags<\/a><\/li>\n+<li><a href=\"#test-specific-flags\"\n+id=\"toc-test-specific-flags\">Test-specific flags<\/a><\/li>\n+<li><a href=\"#flag-restoring\" id=\"toc-flag-restoring\">Flag\n+restoring<\/a><\/li>\n+<li><a href=\"#googletest-documentation\"\n+id=\"toc-googletest-documentation\">GoogleTest documentation<\/a><\/li>\n@@ -62,1 +103,1 @@\n-<li><a href=\"#todo\">TODO<\/a><\/li>\n+<li><a href=\"#todo\" id=\"toc-todo\">TODO<\/a><\/li>\n@@ -65,2 +106,9 @@\n-<p>The purpose of these guidelines is to establish a shared vision on what kind of native tests and how we want to develop them for Hotspot using GoogleTest. Hence these guidelines include style items as well as test approach items.<\/p>\n-<p>First section of this document describes properties of good tests which are common for almost all types of test regardless of language, framework, etc. Further sections provide recommendations to achieve those properties and other HotSpot and\/or GoogleTest specific guidelines.<\/p>\n+<p>The purpose of these guidelines is to establish a shared vision on\n+what kind of native tests and how we want to develop them for Hotspot\n+using GoogleTest. Hence these guidelines include style items as well as\n+test approach items.<\/p>\n+<p>First section of this document describes properties of good tests\n+which are common for almost all types of test regardless of language,\n+framework, etc. Further sections provide recommendations to achieve\n+those properties and other HotSpot and\/or GoogleTest specific\n+guidelines.<\/p>\n@@ -70,1 +118,2 @@\n-<p>In Hotspot, there are 3 different types of tests regarding their dependency on a JVM, each next level is slower than previous<\/p>\n+<p>In Hotspot, there are 3 different types of tests regarding their\n+dependency on a JVM, each next level is slower than previous<\/p>\n@@ -73,2 +122,5 @@\n-<li><p><code>TEST_VM<\/code> : a test does depend on an initialized JVM, but are supposed not to break a JVM, i.e. leave it in a workable state.<\/p><\/li>\n-<li><p><code>TEST_OTHER_VM<\/code> : a test depends on a JVM and requires a freshly initialized JVM or leaves a JVM in non-workable state<\/p><\/li>\n+<li><p><code>TEST_VM<\/code> : a test does depend on an initialized JVM,\n+but are supposed not to break a JVM, i.e. leave it in a workable\n+state.<\/p><\/li>\n+<li><p><code>TEST_OTHER_VM<\/code> : a test depends on a JVM and requires\n+a freshly initialized JVM or leaves a JVM in non-workable state<\/p><\/li>\n@@ -77,6 +129,28 @@\n-<p>Tests have to be isolated: not to have visible side-effects, influences on other tests results.<\/p>\n-<p>Results of one test should not depend on test execution order, other tests, otherwise it is becoming almost impossible to find out why a test failed. Due to hotspot-specific, it is not so easy to get a full isolation, e.g. we share an initialized JVM between all <code>TEST_VM<\/code> tests, so if your test changes JVM's state too drastically and does not change it back, you had better consider <code>TEST_OTHER_VM<\/code>.<\/p>\n-<h3 id=\"atomicity-and-self-containment\">Atomicity and self-containment<\/h3>\n-<p>Tests should be <em>atomic<\/em> and <em>self-contained<\/em> at the same time.<\/p>\n-<p>One test should check a particular part of a class, subsystem, functionality, etc. Then it is quite easy to determine what parts of a product are broken basing on test failures. On the other hand, a test should test that part more-or-less entirely, because when one sees a test <code>FooTest::bar<\/code>, they assume all aspects of bar from <code>Foo<\/code> are tested.<\/p>\n-<p>However, it is impossible to cover all aspects even of a method, not to mention a subsystem. In such cases, it is recommended to have several tests, one for each aspect of a thing under test. For example one test to tests how <code>Foo::bar<\/code> works if an argument is <code>null<\/code>, another test to test how it works if an argument is acceptable but <code>Foo<\/code> is not in the right state to accept it and so on. This helps not only to make tests atomic, self-contained but also makes test name self-descriptive (discussed in more details in <a href=\"#test-names\">Test names<\/a>).<\/p>\n+<p>Tests have to be isolated: not to have visible side-effects,\n+influences on other tests results.<\/p>\n+<p>Results of one test should not depend on test execution order, other\n+tests, otherwise it is becoming almost impossible to find out why a test\n+failed. Due to hotspot-specific, it is not so easy to get a full\n+isolation, e.g. we share an initialized JVM between all\n+<code>TEST_VM<\/code> tests, so if your test changes JVM's state too\n+drastically and does not change it back, you had better consider\n+<code>TEST_OTHER_VM<\/code>.<\/p>\n+<h3 id=\"atomicity-and-self-containment\">Atomicity and\n+self-containment<\/h3>\n+<p>Tests should be <em>atomic<\/em> and <em>self-contained<\/em> at the\n+same time.<\/p>\n+<p>One test should check a particular part of a class, subsystem,\n+functionality, etc. Then it is quite easy to determine what parts of a\n+product are broken basing on test failures. On the other hand, a test\n+should test that part more-or-less entirely, because when one sees a\n+test <code>FooTest::bar<\/code>, they assume all aspects of bar from\n+<code>Foo<\/code> are tested.<\/p>\n+<p>However, it is impossible to cover all aspects even of a method, not\n+to mention a subsystem. In such cases, it is recommended to have several\n+tests, one for each aspect of a thing under test. For example one test\n+to tests how <code>Foo::bar<\/code> works if an argument is\n+<code>null<\/code>, another test to test how it works if an argument is\n+acceptable but <code>Foo<\/code> is not in the right state to accept it\n+and so on. This helps not only to make tests atomic, self-contained but\n+also makes test name self-descriptive (discussed in more details in <a\n+href=\"#test-names\">Test names<\/a>).<\/p>\n@@ -85,2 +159,7 @@\n-<p>Reproducibility is very crucial for a test. No one likes sporadic test failures, they are hard to investigate, fix and verify a fix.<\/p>\n-<p>In some cases, it is quite hard to write a 100% repeatable test, since besides a test there can be other moving parts, e.g. in case of <code>TEST_VM<\/code> there are several concurrently running threads. Despite this, we should try to make a test as reproducible as possible.<\/p>\n+<p>Reproducibility is very crucial for a test. No one likes sporadic\n+test failures, they are hard to investigate, fix and verify a fix.<\/p>\n+<p>In some cases, it is quite hard to write a 100% repeatable test,\n+since besides a test there can be other moving parts, e.g. in case of\n+<code>TEST_VM<\/code> there are several concurrently running threads.\n+Despite this, we should try to make a test as reproducible as\n+possible.<\/p>\n@@ -88,3 +167,11 @@\n-<p>In case of a failure, a test should be as <em>informative<\/em> as possible.<\/p>\n-<p>Having more information about a test failure than just compared values can be very useful for failure troubleshooting, it can reduce or even completely eliminate debugging hours. This is even more important in case of not 100% reproducible failures.<\/p>\n-<p>Achieving this property, one can easily make a test too verbose, so it will be really hard to find useful information in the ocean of useless information. Hence they should not only think about how to provide <a href=\"#error-messages\">good information<\/a>, but also <a href=\"#uncluttered-output\">when to do it<\/a>.<\/p>\n+<p>In case of a failure, a test should be as <em>informative<\/em> as\n+possible.<\/p>\n+<p>Having more information about a test failure than just compared\n+values can be very useful for failure troubleshooting, it can reduce or\n+even completely eliminate debugging hours. This is even more important\n+in case of not 100% reproducible failures.<\/p>\n+<p>Achieving this property, one can easily make a test too verbose, so\n+it will be really hard to find useful information in the ocean of\n+useless information. Hence they should not only think about how to\n+provide <a href=\"#error-messages\">good information<\/a>, but also <a\n+href=\"#uncluttered-output\">when to do it<\/a>.<\/p>\n@@ -93,2 +180,8 @@\n-<p>It is not enough just to &quot;visit&quot; some code, a test should check that code does that it has to do, compare return values with expected values, check that desired side effects are done, and undesired are not, and so on. In other words, a test should contain at least one GoogleTest assertion and do not rely on JVM asserts.<\/p>\n-<p>Generally speaking to write a good test, one should create a model of the system under tests, a model of possible bugs (or bugs which one wants to find) and design tests using those models.<\/p>\n+<p>It is not enough just to \"visit\" some code, a test should check that\n+code does that it has to do, compare return values with expected values,\n+check that desired side effects are done, and undesired are not, and so\n+on. In other words, a test should contain at least one GoogleTest\n+assertion and do not rely on JVM asserts.<\/p>\n+<p>Generally speaking to write a good test, one should create a model of\n+the system under tests, a model of possible bugs (or bugs which one\n+wants to find) and design tests using those models.<\/p>\n@@ -97,1 +190,6 @@\n-<p>Not only does having test logic outside, e.g. verification method, depending on asserts in product code contradict with several items above but also decreases test’s readability and stability. It is much easier to understand that a test is testing when all testing logic is located inside a test or nearby in shared test libraries. As a rule of thumb, the closer a check to a test, the better.<\/p>\n+<p>Not only does having test logic outside, e.g. verification method,\n+depending on asserts in product code contradict with several items above\n+but also decreases test’s readability and stability. It is much easier\n+to understand that a test is testing when all testing logic is located\n+inside a test or nearby in shared test libraries. As a rule of thumb,\n+the closer a check to a test, the better.<\/p>\n@@ -101,5 +199,26 @@\n-<p>This is related to the <a href=\"#informativeness\">informativeness<\/a> property of tests, information for other checks can help to better localize a defect’s root-cause. One should use <code>ASSERT<\/code> if it is impossible to continue test execution or if it does not make much sense. Later in the text, <code>EXPECT<\/code> forms will be used to refer to both <code>ASSERT\/EXPECT<\/code>.<\/p>\n-<p>When it is possible to make several different checks, but impossible to continue test execution if at least one check fails, you can use <code>::testing::Test::HasNonfatalFailure()<\/code> function. The recommended way to express that is <code>ASSERT_FALSE(::testing::Test::HasNonfatalFailure())<\/code>. Besides making it clear why a test is aborted, it also allows you to provide more information about a failure.<\/p>\n-<h3 id=\"first-parameter-is-expected-value\">First parameter is expected value<\/h3>\n-<p>In all equality assertions, expected values should be passed as the first parameter.<\/p>\n-<p>This convention is adopted by GoogleTest, and there is a slight difference in how GoogleTest treats parameters, the most important one is <code>null<\/code> detection. Due to different reasons, <code>null<\/code> detection is enabled only for the first parameter, that is to said <code>EXPECT_EQ(NULL, object)<\/code> checks that object is <code>null<\/code>, while <code>EXPECT_EQ(object, NULL)<\/code> checks that object equals to <code>NULL<\/code>, GoogleTest is very strict regarding types of compared values so the latter will generates a compile-time error.<\/p>\n+<p>This is related to the <a href=\"#informativeness\">informativeness<\/a>\n+property of tests, information for other checks can help to better\n+localize a defect’s root-cause. One should use <code>ASSERT<\/code> if it\n+is impossible to continue test execution or if it does not make much\n+sense. Later in the text, <code>EXPECT<\/code> forms will be used to\n+refer to both <code>ASSERT\/EXPECT<\/code>.<\/p>\n+<p>When it is possible to make several different checks, but impossible\n+to continue test execution if at least one check fails, you can use\n+<code>::testing::Test::HasNonfatalFailure()<\/code> function. The\n+recommended way to express that is\n+<code>ASSERT_FALSE(::testing::Test::HasNonfatalFailure())<\/code>.\n+Besides making it clear why a test is aborted, it also allows you to\n+provide more information about a failure.<\/p>\n+<h3 id=\"first-parameter-is-expected-value\">First parameter is expected\n+value<\/h3>\n+<p>In all equality assertions, expected values should be passed as the\n+first parameter.<\/p>\n+<p>This convention is adopted by GoogleTest, and there is a slight\n+difference in how GoogleTest treats parameters, the most important one\n+is <code>null<\/code> detection. Due to different reasons,\n+<code>null<\/code> detection is enabled only for the first parameter,\n+that is to said <code>EXPECT_EQ(NULL, object)<\/code> checks that object\n+is <code>null<\/code>, while <code>EXPECT_EQ(object, NULL)<\/code> checks\n+that object equals to <code>NULL<\/code>, GoogleTest is very strict\n+regarding types of compared values so the latter will generates a\n+compile-time error.<\/p>\n@@ -107,2 +226,10 @@\n-<p>Use floating-point special macros to compare <code>float\/double<\/code> values.<\/p>\n-<p>Because of floating-point number representations and round-off errors, regular equality comparison will not return true in most cases. There are special <code>EXPECT_FLOAT_EQ\/EXPECT_DOUBLE_EQ<\/code> assertions which check that the distance between compared values is not more than 4 ULPs, there is also <code>EXPECT_NEAR(v1, v2, eps)<\/code> which checks that the absolute value of the difference between <code>v1<\/code> and <code>v2<\/code> is not greater than <code>eps<\/code>.<\/p>\n+<p>Use floating-point special macros to compare\n+<code>float\/double<\/code> values.<\/p>\n+<p>Because of floating-point number representations and round-off\n+errors, regular equality comparison will not return true in most cases.\n+There are special <code>EXPECT_FLOAT_EQ\/EXPECT_DOUBLE_EQ<\/code>\n+assertions which check that the distance between compared values is not\n+more than 4 ULPs, there is also <code>EXPECT_NEAR(v1, v2, eps)<\/code>\n+which checks that the absolute value of the difference between\n+<code>v1<\/code> and <code>v2<\/code> is not greater than\n+<code>eps<\/code>.<\/p>\n@@ -111,1 +238,5 @@\n-<p><code>EXPECT_EQ<\/code> just compares pointers’ values, which is hardly what one wants comparing C strings. GoogleTest provides <code>EXPECT_STREQ<\/code> and <code>EXPECT_STRNE<\/code> macros to compare C string contents. There are also case-insensitive versions <code>EXPECT_STRCASEEQ<\/code>, <code>EXPECT_STRCASENE<\/code>.<\/p>\n+<p><code>EXPECT_EQ<\/code> just compares pointers’ values, which is\n+hardly what one wants comparing C strings. GoogleTest provides\n+<code>EXPECT_STREQ<\/code> and <code>EXPECT_STRNE<\/code> macros to\n+compare C string contents. There are also case-insensitive versions\n+<code>EXPECT_STRCASEEQ<\/code>, <code>EXPECT_STRCASENE<\/code>.<\/p>\n@@ -114,2 +245,15 @@\n-<p>All GoogleTest asserts print compared expressions and their values, so there is no need to have them in error messages. Asserts print only compared values, they do not print any of interim variables, e.g. <code>ASSERT_TRUE((val1 == val2 &amp;&amp; isFail(foo(8)) || i == 18)<\/code> prints only one value. If you use some complex predicates, please consider <code>EXPECT_PRED*<\/code> or <code>EXPECT_FORMAT_PRED<\/code> assertions family, they check that a predicate returns true\/success and print out all parameters values.<\/p>\n-<p>However in some cases, default information is not enough, a commonly used example is an assert inside a loop, GoogleTest will not print iteration values (unless it is an assert's parameter). Other demonstrative examples are printing error code and a corresponding error message; printing internal states which might have an impact on results. One should add this information to assert message using <code>&lt;&lt;<\/code> operator.<\/p>\n+<p>All GoogleTest asserts print compared expressions and their values,\n+so there is no need to have them in error messages. Asserts print only\n+compared values, they do not print any of interim variables, e.g.\n+<code>ASSERT_TRUE((val1 == val2 &amp;&amp; isFail(foo(8)) || i == 18)<\/code>\n+prints only one value. If you use some complex predicates, please\n+consider <code>EXPECT_PRED*<\/code> or <code>EXPECT_FORMAT_PRED<\/code>\n+assertions family, they check that a predicate returns true\/success and\n+print out all parameters values.<\/p>\n+<p>However in some cases, default information is not enough, a commonly\n+used example is an assert inside a loop, GoogleTest will not print\n+iteration values (unless it is an assert's parameter). Other\n+demonstrative examples are printing error code and a corresponding error\n+message; printing internal states which might have an impact on results.\n+One should add this information to assert message using\n+<code>&lt;&lt;<\/code> operator.<\/p>\n@@ -118,1 +262,8 @@\n-<p>Too verbose tests which print all information even if they pass are very bad practice. They just pollute output, so it becomes harder to find useful information. In order not print information till it is really needed, one should consider saving it to a temporary buffer and pass to an assert. <a href=\"https:\/\/git.openjdk.org\/jdk\/blob\/master\/test\/hotspot\/gtest\/gc\/shared\/test_memset_with_concurrent_readers.cpp\" class=\"uri\">https:\/\/git.openjdk.org\/jdk\/blob\/master\/test\/hotspot\/gtest\/gc\/shared\/test_memset_with_concurrent_readers.cpp<\/a> has a good example how to do that.<\/p>\n+<p>Too verbose tests which print all information even if they pass are\n+very bad practice. They just pollute output, so it becomes harder to\n+find useful information. In order not print information till it is\n+really needed, one should consider saving it to a temporary buffer and\n+pass to an assert. <a\n+href=\"https:\/\/git.openjdk.org\/jdk\/blob\/master\/test\/hotspot\/gtest\/gc\/shared\/test_memset_with_concurrent_readers.cpp\"\n+class=\"uri\">https:\/\/git.openjdk.org\/jdk\/blob\/master\/test\/hotspot\/gtest\/gc\/shared\/test_memset_with_concurrent_readers.cpp<\/a>\n+has a good example how to do that.<\/p>\n@@ -120,3 +271,17 @@\n-<p>Wrap a subroutine call into <code>EXPECT_NO_FATAL_FAILURE<\/code> macro to propagate failures.<\/p>\n-<p><code>ASSERT<\/code> and <code>FAIL<\/code> abort only the current function, so if you have them in a subroutine, a test will not be aborted after the subroutine even if <code>ASSERT<\/code> or <code>FAIL<\/code> fails. You should call such subroutines in <code>ASSERT_NO_FATAL_FAILURE<\/code> macro to propagate fatal failures and abort a test. <code>(EXPECT|ASSERT)_NO_FATAL_FAILURE<\/code> can also be used to provide more information.<\/p>\n-<p>Due to obvious reasons, there are no <code>(EXPECT|ASSERT)_NO_NONFATAL_FAILURE<\/code> macros. However, if you need to check if a subroutine generated a nonfatal failure (failed an <code>EXPECT<\/code>), you can use <code>::testing::Test::HasNonfatalFailure<\/code> function, or <code>::testing::Test::HasFailure<\/code> function to check if a subroutine generated any failures, see <a href=\"#several-checks\">Several checks<\/a>.<\/p>\n+<p>Wrap a subroutine call into <code>EXPECT_NO_FATAL_FAILURE<\/code>\n+macro to propagate failures.<\/p>\n+<p><code>ASSERT<\/code> and <code>FAIL<\/code> abort only the current\n+function, so if you have them in a subroutine, a test will not be\n+aborted after the subroutine even if <code>ASSERT<\/code> or\n+<code>FAIL<\/code> fails. You should call such subroutines in\n+<code>ASSERT_NO_FATAL_FAILURE<\/code> macro to propagate fatal failures\n+and abort a test. <code>(EXPECT|ASSERT)_NO_FATAL_FAILURE<\/code> can also\n+be used to provide more information.<\/p>\n+<p>Due to obvious reasons, there are no\n+<code>(EXPECT|ASSERT)_NO_NONFATAL_FAILURE<\/code> macros. However, if you\n+need to check if a subroutine generated a nonfatal failure (failed an\n+<code>EXPECT<\/code>), you can use\n+<code>::testing::Test::HasNonfatalFailure<\/code> function, or\n+<code>::testing::Test::HasFailure<\/code> function to check if a\n+subroutine generated any failures, see <a href=\"#several-checks\">Several\n+checks<\/a>.<\/p>\n@@ -125,2 +290,8 @@\n-<p>Test group names should be in CamelCase, start and end with a letter. A test group should be named after tested class, functionality, subsystem, etc.<\/p>\n-<p>This naming scheme helps to find tests, filter them and simplifies test failure analysis. For example, class <code>Foo<\/code> - test group <code>Foo<\/code>, compiler logging subsystem - test group <code>CompilerLogging<\/code>, G1 GC — test group <code>G1GC<\/code>, and so forth.<\/p>\n+<p>Test group names should be in CamelCase, start and end with a letter.\n+A test group should be named after tested class, functionality,\n+subsystem, etc.<\/p>\n+<p>This naming scheme helps to find tests, filter them and simplifies\n+test failure analysis. For example, class <code>Foo<\/code> - test group\n+<code>Foo<\/code>, compiler logging subsystem - test group\n+<code>CompilerLogging<\/code>, G1 GC — test group <code>G1GC<\/code>, and\n+so forth.<\/p>\n@@ -128,2 +299,4 @@\n-<p>A test file must have <code>test_<\/code> prefix and <code>.cpp<\/code> suffix.<\/p>\n-<p>Both are actually requirements from the current build system to recognize your tests.<\/p>\n+<p>A test file must have <code>test_<\/code> prefix and <code>.cpp<\/code>\n+suffix.<\/p>\n+<p>Both are actually requirements from the current build system to\n+recognize your tests.<\/p>\n@@ -131,1 +304,2 @@\n-<p>Test file location should reflect a location of the tested part of the product.<\/p>\n+<p>Test file location should reflect a location of the tested part of\n+the product.<\/p>\n@@ -133,2 +307,11 @@\n-<li><p>All unit tests for a class from <code>foo\/bar\/baz.cpp<\/code> should be placed <code>foo\/bar\/test_baz.cpp<\/code> in <code>hotspot\/test\/native\/<\/code> directory. Having all tests for a class in one file is a common practice for unit tests, it helps to see all existing tests at once, share functions and\/or resources without losing encapsulation.<\/p><\/li>\n-<li><p>For tests which test more than one class, directory hierarchy should be the same as product hierarchy, and file name should reflect the name of the tested subsystem\/functionality. For example, if a sub-system under tests belongs to <code>gc\/g1<\/code>, tests should be placed in <code>gc\/g1<\/code> directory.<\/p><\/li>\n+<li><p>All unit tests for a class from <code>foo\/bar\/baz.cpp<\/code>\n+should be placed <code>foo\/bar\/test_baz.cpp<\/code> in\n+<code>hotspot\/test\/native\/<\/code> directory. Having all tests for a\n+class in one file is a common practice for unit tests, it helps to see\n+all existing tests at once, share functions and\/or resources without\n+losing encapsulation.<\/p><\/li>\n+<li><p>For tests which test more than one class, directory hierarchy\n+should be the same as product hierarchy, and file name should reflect\n+the name of the tested subsystem\/functionality. For example, if a\n+sub-system under tests belongs to <code>gc\/g1<\/code>, tests should be\n+placed in <code>gc\/g1<\/code> directory.<\/p><\/li>\n@@ -136,1 +319,6 @@\n-<p>Please note that framework prepends directory name to a test group name. For example, if <code>TEST(foo, check_this)<\/code> and <code>TEST(bar, check_that)<\/code> are defined in <code>hotspot\/test\/native\/gc\/shared\/test_foo.cpp<\/code> file, they will be reported as <code>gc\/shared\/foo::check_this<\/code> and <code>gc\/shared\/bar::check_that<\/code>.<\/p>\n+<p>Please note that framework prepends directory name to a test group\n+name. For example, if <code>TEST(foo, check_this)<\/code> and\n+<code>TEST(bar, check_that)<\/code> are defined in\n+<code>hotspot\/test\/native\/gc\/shared\/test_foo.cpp<\/code> file, they will\n+be reported as <code>gc\/shared\/foo::check_this<\/code> and\n+<code>gc\/shared\/bar::check_that<\/code>.<\/p>\n@@ -138,3 +326,15 @@\n-<p>Test names should be in small_snake_case, start and end with a letter. A test name should reflect that a test checks.<\/p>\n-<p>Such naming makes tests self-descriptive and helps a lot during the whole test life cycle. It is easy to do test planning, test inventory, to see what things are not tested, to review tests, to analyze test failures, to evolve a test, etc. For example <code>foo_return_0_if_name_is_null<\/code> is better than <code>foo_sanity<\/code> or <code>foo_basic<\/code> or just <code>foo<\/code>, <code>humongous_objects_can_not_be_moved_by_young_gc<\/code> is better than <code>ho_young_gc<\/code>.<\/p>\n-<p>Actually using underscore is against GoogleTest project convention, because it can lead to illegal identifiers, however, this is too strict. Restricting usage of underscore for test names only and prohibiting test name starts or ends with an underscore are enough to be safe.<\/p>\n+<p>Test names should be in small_snake_case, start and end with a\n+letter. A test name should reflect that a test checks.<\/p>\n+<p>Such naming makes tests self-descriptive and helps a lot during the\n+whole test life cycle. It is easy to do test planning, test inventory,\n+to see what things are not tested, to review tests, to analyze test\n+failures, to evolve a test, etc. For example\n+<code>foo_return_0_if_name_is_null<\/code> is better than\n+<code>foo_sanity<\/code> or <code>foo_basic<\/code> or just\n+<code>foo<\/code>,\n+<code>humongous_objects_can_not_be_moved_by_young_gc<\/code> is better\n+than <code>ho_young_gc<\/code>.<\/p>\n+<p>Actually using underscore is against GoogleTest project convention,\n+because it can lead to illegal identifiers, however, this is too strict.\n+Restricting usage of underscore for test names only and prohibiting test\n+name starts or ends with an underscore are enough to be safe.<\/p>\n@@ -142,1 +342,3 @@\n-<p>Fixture classes should be named after tested classes, subsystems, etc (follow <a href=\"#test-group-names\">Test group names rule<\/a>) and have <code>Test<\/code> suffix to prevent class name conflicts.<\/p>\n+<p>Fixture classes should be named after tested classes, subsystems, etc\n+(follow <a href=\"#test-group-names\">Test group names rule<\/a>) and have\n+<code>Test<\/code> suffix to prevent class name conflicts.<\/p>\n@@ -144,2 +346,7 @@\n-<p>All test purpose friends should have either <code>Test<\/code> or <code>Testable<\/code> suffix.<\/p>\n-<p>It greatly simplifies understanding of friendship’s purpose and allows statically check that private members are not exposed unexpectedly. Having <code>FooTest<\/code> as a friend of <code>Foo<\/code> without any comments will be understood as a necessary evil to get testability.<\/p>\n+<p>All test purpose friends should have either <code>Test<\/code> or\n+<code>Testable<\/code> suffix.<\/p>\n+<p>It greatly simplifies understanding of friendship’s purpose and\n+allows statically check that private members are not exposed\n+unexpectedly. Having <code>FooTest<\/code> as a friend of\n+<code>Foo<\/code> without any comments will be understood as a necessary\n+evil to get testability.<\/p>\n@@ -147,2 +354,6 @@\n-<p>Guard OS\/CPU specific tests by <code>#ifdef<\/code> and have OS\/CPU name in filename.<\/p>\n-<p>For the time being, we do not support separate directories for OS, CPU, OS-CPU specific tests, in case we will have lots of such tests, we will change directory layout and build system to support that in the same way it is done in hotspot.<\/p>\n+<p>Guard OS\/CPU specific tests by <code>#ifdef<\/code> and have OS\/CPU\n+name in filename.<\/p>\n+<p>For the time being, we do not support separate directories for OS,\n+CPU, OS-CPU specific tests, in case we will have lots of such tests, we\n+will change directory layout and build system to support that in the\n+same way it is done in hotspot.<\/p>\n@@ -152,1 +363,3 @@\n-<p>Tests are a part of Hotspot, so everything (if applicable) we use for Hotspot, should be used for tests as well. Those guidelines cover test-specific things.<\/p>\n+<p>Tests are a part of Hotspot, so everything (if applicable) we use for\n+Hotspot, should be used for tests as well. Those guidelines cover\n+test-specific things.<\/p>\n@@ -154,2 +367,8 @@\n-<p>Coverage information and other code\/test metrics are quite useful to decide what tests should be written, what tests should be improved and what can be removed.<\/p>\n-<p>For unit tests, widely used and well-known coverage metric is branch coverage, which provides good quality of tests with relatively easy test development process. For other levels of testing, branch coverage is not as good, and one should consider others metrics, e.g. transaction flow coverage, data flow coverage.<\/p>\n+<p>Coverage information and other code\/test metrics are quite useful to\n+decide what tests should be written, what tests should be improved and\n+what can be removed.<\/p>\n+<p>For unit tests, widely used and well-known coverage metric is branch\n+coverage, which provides good quality of tests with relatively easy test\n+development process. For other levels of testing, branch coverage is not\n+as good, and one should consider others metrics, e.g. transaction flow\n+coverage, data flow coverage.<\/p>\n@@ -158,2 +377,6 @@\n-<p>We do not use GoogleTest macro to declare friendship relation, because, from our point of view, it is less clear than an explicit declaration.<\/p>\n-<p>Declaring a test fixture class as a friend class of a tested test is the easiest and the clearest way to get access. However, it has some disadvantages, here is some of them:<\/p>\n+<p>We do not use GoogleTest macro to declare friendship relation,\n+because, from our point of view, it is less clear than an explicit\n+declaration.<\/p>\n+<p>Declaring a test fixture class as a friend class of a tested test is\n+the easiest and the clearest way to get access. However, it has some\n+disadvantages, here is some of them:<\/p>\n@@ -164,1 +387,7 @@\n-<p>In other words, it is harder to share code between tests. Hence if you want to share code or expect it to be useful in other tests, you should consider making members in a tested class protected and introduce a shared test-only class which expose those members via public functions, or even making members publicly accessible right away in a product class. If it is not an option to change members visibility, one can create a friend class which exposes members.<\/p>\n+<p>In other words, it is harder to share code between tests. Hence if\n+you want to share code or expect it to be useful in other tests, you\n+should consider making members in a tested class protected and introduce\n+a shared test-only class which expose those members via public\n+functions, or even making members publicly accessible right away in a\n+product class. If it is not an option to change members visibility, one\n+can create a friend class which exposes members.<\/p>\n@@ -166,2 +395,8 @@\n-<p>You can not use death tests inside <code>TEST_OTHER_VM<\/code> and <code>TEST_VM_ASSERT*<\/code>.<\/p>\n-<p>We tried to make Hotspot-GoogleTest integration as transparent as possible, however, due to the current implementation of <code>TEST_OTHER_VM<\/code> and <code>TEST_VM_ASSERT*<\/code> tests, you cannot use death test functionality in them. These tests are implemented as GoogleTest death tests, and GoogleTest does not allow to have a death test inside another death test.<\/p>\n+<p>You can not use death tests inside <code>TEST_OTHER_VM<\/code> and\n+<code>TEST_VM_ASSERT*<\/code>.<\/p>\n+<p>We tried to make Hotspot-GoogleTest integration as transparent as\n+possible, however, due to the current implementation of\n+<code>TEST_OTHER_VM<\/code> and <code>TEST_VM_ASSERT*<\/code> tests, you\n+cannot use death test functionality in them. These tests are implemented\n+as GoogleTest death tests, and GoogleTest does not allow to have a death\n+test inside another death test.<\/p>\n@@ -170,1 +405,8 @@\n-<p>The rationality of such design decision is to simplify both tests and a test framework and to avoid failures related to incompatible flags combination till there is a good solution for that. However there are cases when one wants to test a JVM with specific flags combination, <code>_JAVA_OPTIONS<\/code> environment variable can be used to do that. Flags from <code>_JAVA_OPTIONS<\/code> will be used in <code>TEST_VM<\/code>, <code>TEST_OTHER_VM<\/code> and <code>TEST_VM_ASSERT*<\/code> tests.<\/p>\n+<p>The rationality of such design decision is to simplify both tests and\n+a test framework and to avoid failures related to incompatible flags\n+combination till there is a good solution for that. However there are\n+cases when one wants to test a JVM with specific flags combination,\n+<code>_JAVA_OPTIONS<\/code> environment variable can be used to do that.\n+Flags from <code>_JAVA_OPTIONS<\/code> will be used in\n+<code>TEST_VM<\/code>, <code>TEST_OTHER_VM<\/code> and\n+<code>TEST_VM_ASSERT*<\/code> tests.<\/p>\n@@ -172,4 +414,21 @@\n-<p>Passing flags to a tested JVM in <code>TEST_OTHER_VM<\/code> and <code>TEST_VM_ASSERT*<\/code> should be possible, but is not implemented yet.<\/p>\n-<p>Facility to pass test-specific flags is needed for system, regression or other types of tests which require a fully initialized JVM in some particular configuration, e.g. with Serial GC selected. There is no support for such tests now, however, there is a plan to add that in upcoming releases.<\/p>\n-<p>For now, if a test depends on flags values, it should have <code>if (!&lt;flag&gt;) { return }<\/code> guards in the very beginning and <code>@requires<\/code> comment similar to jtreg <code>@requires<\/code> directive right before test macros. <a href=\"https:\/\/git.openjdk.org\/jdk\/blob\/master\/test\/hotspot\/gtest\/gc\/g1\/test_g1IHOPControl.cpp\" class=\"uri\">https:\/\/git.openjdk.org\/jdk\/blob\/master\/test\/hotspot\/gtest\/gc\/g1\/test_g1IHOPControl.cpp<\/a> ha an example of this temporary workaround. It is important to follow that pattern as it allows us to easily find all such tests and update them as soon as there is an implementation of flag passing facility.<\/p>\n-<p>In long-term, we expect jtreg to support GoogleTest tests as first class citizens, that is to say, jtreg will parse <span class=\"citation\" data-cites=\"requires\">@requires<\/span> comments and filter out inapplicable tests.<\/p>\n+<p>Passing flags to a tested JVM in <code>TEST_OTHER_VM<\/code> and\n+<code>TEST_VM_ASSERT*<\/code> should be possible, but is not implemented\n+yet.<\/p>\n+<p>Facility to pass test-specific flags is needed for system, regression\n+or other types of tests which require a fully initialized JVM in some\n+particular configuration, e.g. with Serial GC selected. There is no\n+support for such tests now, however, there is a plan to add that in\n+upcoming releases.<\/p>\n+<p>For now, if a test depends on flags values, it should have\n+<code>if (!&lt;flag&gt;) { return }<\/code> guards in the very beginning\n+and <code>@requires<\/code> comment similar to jtreg\n+<code>@requires<\/code> directive right before test macros. <a\n+href=\"https:\/\/git.openjdk.org\/jdk\/blob\/master\/test\/hotspot\/gtest\/gc\/g1\/test_g1IHOPControl.cpp\"\n+class=\"uri\">https:\/\/git.openjdk.org\/jdk\/blob\/master\/test\/hotspot\/gtest\/gc\/g1\/test_g1IHOPControl.cpp<\/a>\n+ha an example of this temporary workaround. It is important to follow\n+that pattern as it allows us to easily find all such tests and update\n+them as soon as there is an implementation of flag passing facility.<\/p>\n+<p>In long-term, we expect jtreg to support GoogleTest tests as first\n+class citizens, that is to say, jtreg will parse <span class=\"citation\"\n+data-cites=\"requires\">@requires<\/span> comments and filter out\n+inapplicable tests.<\/p>\n@@ -178,1 +437,8 @@\n-<p>It is quite common for tests to configure JVM in a certain way changing flags’ values. GoogleTest provides two ways to set up environment before a test and restore it afterward: using either constructor and destructor or <code>SetUp<\/code> and <code>TearDown<\/code> functions. Both ways require to use a test fixture class, which sometimes is too wordy. The simpler facilities like <code>FLAG_GUARD<\/code> macro or <code>*FlagSetting<\/code> classes could be used in such cases to restore\/set values.<\/p>\n+<p>It is quite common for tests to configure JVM in a certain way\n+changing flags’ values. GoogleTest provides two ways to set up\n+environment before a test and restore it afterward: using either\n+constructor and destructor or <code>SetUp<\/code> and\n+<code>TearDown<\/code> functions. Both ways require to use a test fixture\n+class, which sometimes is too wordy. The simpler facilities like\n+<code>FLAG_GUARD<\/code> macro or <code>*FlagSetting<\/code> classes could\n+be used in such cases to restore\/set values.<\/p>\n@@ -181,2 +447,8 @@\n-<li><p>Changing a flag’s value could break the invariants between flags' values and hence could lead to unexpected\/unsupported JVM state.<\/p><\/li>\n-<li><p><code>FLAG_SET_*<\/code> macros can change more than one flag (in order to maintain invariants) so it is hard to predict what flags will be changed and it makes restoring all changed flags a nontrivial task. Thus in case one uses <code>FLAG_SET_*<\/code> macros, they should use <code>TEST_OTHER_VM<\/code> test type.<\/p><\/li>\n+<li><p>Changing a flag’s value could break the invariants between flags'\n+values and hence could lead to unexpected\/unsupported JVM\n+state.<\/p><\/li>\n+<li><p><code>FLAG_SET_*<\/code> macros can change more than one flag (in\n+order to maintain invariants) so it is hard to predict what flags will\n+be changed and it makes restoring all changed flags a nontrivial task.\n+Thus in case one uses <code>FLAG_SET_*<\/code> macros, they should use\n+<code>TEST_OTHER_VM<\/code> test type.<\/p><\/li>\n@@ -185,1 +457,3 @@\n-<p>In case you have any questions regarding GoogleTest itself, its asserts, test declaration macros, other macros, etc, please consult its documentation.<\/p>\n+<p>In case you have any questions regarding GoogleTest itself, its\n+asserts, test declaration macros, other macros, etc, please consult its\n+documentation.<\/p>\n@@ -187,1 +461,2 @@\n-<p>Although this document provides guidelines on the most important parts of test development using GTest, it still misses a few items:<\/p>\n+<p>Although this document provides guidelines on the most important\n+parts of test development using GTest, it still misses a few items:<\/p>\n@@ -189,2 +464,3 @@\n-<li><p>Examples, esp for <a href=\"#access-to-non-public-members\">access to non-public members<\/a><\/p><\/li>\n-<li>test types: purpose, drawbacks, limitation\n+<li><p>Examples, esp for <a href=\"#access-to-non-public-members\">access\n+to non-public members<\/a><\/p><\/li>\n+<li><p>test types: purpose, drawbacks, limitation<\/p>\n@@ -198,1 +474,1 @@\n-<li>Miscellaneous\n+<li><p>Miscellaneous<\/p>\n@@ -211,1 +487,2 @@\n-<li>check that a test can find bugs it is supposed to by introducing them<\/li>\n+<li>check that a test can find bugs it is supposed to by introducing\n+them<\/li>\n","filename":"doc\/hotspot-unit-tests.html","additions":388,"deletions":111,"binary":false,"changes":499,"status":"modified"},{"patch":"@@ -8,5 +8,13 @@\n-  <style type=\"text\/css\">\n-      code{white-space: pre-wrap;}\n-      span.smallcaps{font-variant: small-caps;}\n-      span.underline{text-decoration: underline;}\n-      div.column{display: inline-block; vertical-align: top; width: 50%;}\n+  <style>\n+    code{white-space: pre-wrap;}\n+    span.smallcaps{font-variant: small-caps;}\n+    div.columns{display: flex; gap: min(4vw, 1.5em);}\n+    div.column{flex: auto; overflow-x: auto;}\n+    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n+    ul.task-list{list-style: none;}\n+    ul.task-list li input[type=\"checkbox\"] {\n+      width: 0.8em;\n+      margin: 0 0.8em 0.2em -1.6em;\n+      vertical-align: middle;\n+    }\n+    .display.math{display: block; text-align: center; margin: 0.5rem auto;}\n@@ -23,1 +31,1 @@\n-<nav id=\"TOC\">\n+<nav id=\"TOC\" role=\"doc-toc\">\n@@ -25,3 +33,7 @@\n-<li><a href=\"#introduction\">Introduction<\/a><ul>\n-<li><a href=\"#ide-support-for-native-code\">IDE support for native code<\/a><\/li>\n-<li><a href=\"#ide-support-for-java-code\">IDE support for Java code<\/a><\/li>\n+<li><a href=\"#introduction\" id=\"toc-introduction\">Introduction<\/a>\n+<ul>\n+<li><a href=\"#ide-support-for-native-code\"\n+id=\"toc-ide-support-for-native-code\">IDE support for native\n+code<\/a><\/li>\n+<li><a href=\"#ide-support-for-java-code\"\n+id=\"toc-ide-support-for-java-code\">IDE support for Java code<\/a><\/li>\n@@ -32,1 +44,4 @@\n-<p>When you are familiar with building and testing the JDK, you may want to configure an IDE to work with the source code. The instructions differ a bit depending on whether you are interested in working with the native (C\/C++) or the Java code.<\/p>\n+<p>When you are familiar with building and testing the JDK, you may want\n+to configure an IDE to work with the source code. The instructions\n+differ a bit depending on whether you are interested in working with the\n+native (C\/C++) or the Java code.<\/p>\n@@ -34,1 +49,2 @@\n-<p>There are a few ways to generate IDE configuration for the native sources, depending on which IDE to use.<\/p>\n+<p>There are a few ways to generate IDE configuration for the native\n+sources, depending on which IDE to use.<\/p>\n@@ -36,1 +52,5 @@\n-<p>The make system can generate a <a href=\"https:\/\/code.visualstudio.com\">Visual Studio Code<\/a> workspace that has C\/C++ source indexing configured correctly, as well as launcher targets for tests and the Java launcher. After configuring, a workspace for the configuration can be generated using:<\/p>\n+<p>The make system can generate a <a\n+href=\"https:\/\/code.visualstudio.com\">Visual Studio Code<\/a> workspace\n+that has C\/C++ source indexing configured correctly, as well as launcher\n+targets for tests and the Java launcher. After configuring, a workspace\n+for the configuration can be generated using:<\/p>\n@@ -38,1 +58,4 @@\n-<p>This creates a file called <code>jdk.code-workspace<\/code> in the build output folder. The full location will be printed after the workspace has been generated. To use it, choose <code>File -&gt; Open Workspace...<\/code> in Visual Studio Code.<\/p>\n+<p>This creates a file called <code>jdk.code-workspace<\/code> in the\n+build output folder. The full location will be printed after the\n+workspace has been generated. To use it, choose\n+<code>File -&gt; Open Workspace...<\/code> in Visual Studio Code.<\/p>\n@@ -40,1 +63,8 @@\n-<p>The main <code>vscode-project<\/code> target configures the default C++ support in Visual Studio Code. There are also other source indexers that can be installed, that may provide additional features. It's currently possible to generate configuration for two such indexers, <a href=\"https:\/\/clang.llvm.org\/extra\/clangd\/\">clangd<\/a> and <a href=\"https:\/\/github.com\/Andersbakken\/rtags\">rtags<\/a>. These can be configured by appending the name of the indexer to the make target, such as:<\/p>\n+<p>The main <code>vscode-project<\/code> target configures the default\n+C++ support in Visual Studio Code. There are also other source indexers\n+that can be installed, that may provide additional features. It's\n+currently possible to generate configuration for two such indexers, <a\n+href=\"https:\/\/clang.llvm.org\/extra\/clangd\/\">clangd<\/a> and <a\n+href=\"https:\/\/github.com\/Andersbakken\/rtags\">rtags<\/a>. These can be\n+configured by appending the name of the indexer to the make target, such\n+as:<\/p>\n@@ -42,1 +72,2 @@\n-<p>Additional instructions for configuring the given indexer will be displayed after the workspace has been generated.<\/p>\n+<p>Additional instructions for configuring the given indexer will be\n+displayed after the workspace has been generated.<\/p>\n@@ -44,1 +75,2 @@\n-<p>The make system can generate a Visual Studio project for the Hotspot native source. After configuring, the project is generated using:<\/p>\n+<p>The make system can generate a Visual Studio project for the Hotspot\n+native source. After configuring, the project is generated using:<\/p>\n@@ -46,1 +78,4 @@\n-<p>This creates a file named <code>jvm.vcxproj<\/code> in <code>ide\\hotspot-visualstudio<\/code> subfolder of the build output folder. The file can be opened in Visual Studio via <code>File -&gt; Open -&gt; Project\/Solution<\/code>.<\/p>\n+<p>This creates a file named <code>jvm.vcxproj<\/code> in\n+<code>ide\\hotspot-visualstudio<\/code> subfolder of the build output\n+folder. The file can be opened in Visual Studio via\n+<code>File -&gt; Open -&gt; Project\/Solution<\/code>.<\/p>\n@@ -48,1 +83,5 @@\n-<p>The make system can generate generic native code indexing support in the form of a <a href=\"https:\/\/clang.llvm.org\/docs\/JSONCompilationDatabase.html\">Compilation Database<\/a> that can be used by many different IDEs and source code indexers.<\/p>\n+<p>The make system can generate generic native code indexing support in\n+the form of a <a\n+href=\"https:\/\/clang.llvm.org\/docs\/JSONCompilationDatabase.html\">Compilation\n+Database<\/a> that can be used by many different IDEs and source code\n+indexers.<\/p>\n@@ -50,1 +89,3 @@\n-<p>It's also possible to generate the Compilation Database for the HotSpot source code only, which is a bit faster as it includes less information.<\/p>\n+<p>It's also possible to generate the Compilation Database for the\n+HotSpot source code only, which is a bit faster as it includes less\n+information.<\/p>\n@@ -54,1 +95,4 @@\n-<p>The JDK project has a script that can be used for indexing the project with IntelliJ. After configuring and building the JDK, an IntelliJ workspace can be generated by running the following command in the top-level folder of the cloned repository:<\/p>\n+<p>The JDK project has a script that can be used for indexing the\n+project with IntelliJ. After configuring and building the JDK, an\n+IntelliJ workspace can be generated by running the following command in\n+the top-level folder of the cloned repository:<\/p>\n@@ -56,3 +100,8 @@\n-<p>To use it, choose <code>File -&gt; Open...<\/code> in IntelliJ and select the folder where you ran the above script.<\/p>\n-<p>Next, configure the project SDK in IntelliJ. Open <code>File -&gt; Project Structure -&gt; Project<\/code> and select <code>build\/&lt;config&gt;\/images\/jdk<\/code> as the SDK to use.<\/p>\n-<p>In order to run the tests from the IDE, you can use the JTReg plugin. Instructions for building and using the plugin can be found <a href=\"https:\/\/github.com\/openjdk\/jtreg\/tree\/master\/plugins\/idea\">here<\/a>.<\/p>\n+<p>To use it, choose <code>File -&gt; Open...<\/code> in IntelliJ and\n+select the folder where you ran the above script.<\/p>\n+<p>Next, configure the project SDK in IntelliJ. Open\n+<code>File -&gt; Project Structure -&gt; Project<\/code> and select\n+<code>build\/&lt;config&gt;\/images\/jdk<\/code> as the SDK to use.<\/p>\n+<p>In order to run the tests from the IDE, you can use the JTReg plugin.\n+Instructions for building and using the plugin can be found <a\n+href=\"https:\/\/github.com\/openjdk\/jtreg\/tree\/master\/plugins\/idea\">here<\/a>.<\/p>\n","filename":"doc\/ide.html","additions":72,"deletions":23,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -8,5 +8,13 @@\n-  <style type=\"text\/css\">\n-      code{white-space: pre-wrap;}\n-      span.smallcaps{font-variant: small-caps;}\n-      span.underline{text-decoration: underline;}\n-      div.column{display: inline-block; vertical-align: top; width: 50%;}\n+  <style>\n+    code{white-space: pre-wrap;}\n+    span.smallcaps{font-variant: small-caps;}\n+    div.columns{display: flex; gap: min(4vw, 1.5em);}\n+    div.column{flex: auto; overflow-x: auto;}\n+    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n+    ul.task-list{list-style: none;}\n+    ul.task-list li input[type=\"checkbox\"] {\n+      width: 0.8em;\n+      margin: 0 0.8em 0.2em -1.6em;\n+      vertical-align: middle;\n+    }\n+    .display.math{display: block; text-align: center; margin: 0.5rem auto;}\n@@ -15,0 +23,1 @@\n+  <style type=\"text\/css\">pre, code, tt { color: #1d6ae5; }<\/style>\n@@ -18,1 +27,0 @@\n-  <style type=\"text\/css\">pre, code, tt { color: #1d6ae5; }<\/style>\n@@ -24,1 +32,6 @@\n-<nav id=\"TOC\">\n+<nav id=\"TOC\" role=\"doc-toc\">\n+<ul>\n+<li><a href=\"#overview\" id=\"toc-overview\">Overview<\/a><\/li>\n+<li><a href=\"#running-tests-locally-with-make-test\"\n+id=\"toc-running-tests-locally-with-make-test\">Running tests locally with\n+<code>make test<\/code><\/a>\n@@ -26,3 +39,2 @@\n-<li><a href=\"#overview\">Overview<\/a><\/li>\n-<li><a href=\"#running-tests-locally-with-make-test\">Running tests locally with <code>make test<\/code><\/a><ul>\n-<li><a href=\"#configuration\">Configuration<\/a><\/li>\n+<li><a href=\"#configuration\"\n+id=\"toc-configuration\">Configuration<\/a><\/li>\n@@ -30,6 +42,10 @@\n-<li><a href=\"#test-selection\">Test selection<\/a><ul>\n-<li><a href=\"#common-test-groups\">Common Test Groups<\/a><\/li>\n-<li><a href=\"#jtreg\">JTReg<\/a><\/li>\n-<li><a href=\"#gtest\">Gtest<\/a><\/li>\n-<li><a href=\"#microbenchmarks\">Microbenchmarks<\/a><\/li>\n-<li><a href=\"#special-tests\">Special tests<\/a><\/li>\n+<li><a href=\"#test-selection\" id=\"toc-test-selection\">Test selection<\/a>\n+<ul>\n+<li><a href=\"#common-test-groups\" id=\"toc-common-test-groups\">Common\n+Test Groups<\/a><\/li>\n+<li><a href=\"#jtreg\" id=\"toc-jtreg\">JTReg<\/a><\/li>\n+<li><a href=\"#gtest\" id=\"toc-gtest\">Gtest<\/a><\/li>\n+<li><a href=\"#microbenchmarks\"\n+id=\"toc-microbenchmarks\">Microbenchmarks<\/a><\/li>\n+<li><a href=\"#special-tests\" id=\"toc-special-tests\">Special\n+tests<\/a><\/li>\n@@ -37,6 +53,14 @@\n-<li><a href=\"#test-results-and-summary\">Test results and summary<\/a><\/li>\n-<li><a href=\"#test-suite-control\">Test suite control<\/a><ul>\n-<li><a href=\"#general-keywords-test_opts\">General keywords (TEST_OPTS)<\/a><\/li>\n-<li><a href=\"#jtreg-keywords\">JTReg keywords<\/a><\/li>\n-<li><a href=\"#gtest-keywords\">Gtest keywords<\/a><\/li>\n-<li><a href=\"#microbenchmark-keywords\">Microbenchmark keywords<\/a><\/li>\n+<li><a href=\"#test-results-and-summary\"\n+id=\"toc-test-results-and-summary\">Test results and summary<\/a><\/li>\n+<li><a href=\"#test-suite-control\" id=\"toc-test-suite-control\">Test suite\n+control<\/a>\n+<ul>\n+<li><a href=\"#general-keywords-test_opts\"\n+id=\"toc-general-keywords-test_opts\">General keywords\n+(TEST_OPTS)<\/a><\/li>\n+<li><a href=\"#jtreg-keywords\" id=\"toc-jtreg-keywords\">JTReg\n+keywords<\/a><\/li>\n+<li><a href=\"#gtest-keywords\" id=\"toc-gtest-keywords\">Gtest\n+keywords<\/a><\/li>\n+<li><a href=\"#microbenchmark-keywords\"\n+id=\"toc-microbenchmark-keywords\">Microbenchmark keywords<\/a><\/li>\n@@ -44,5 +68,9 @@\n-<li><a href=\"#notes-for-specific-tests\">Notes for Specific Tests<\/a><ul>\n-<li><a href=\"#docker-tests\">Docker Tests<\/a><\/li>\n-<li><a href=\"#non-us-locale\">Non-US locale<\/a><\/li>\n-<li><a href=\"#pkcs11-tests\">PKCS11 Tests<\/a><\/li>\n-<li><a href=\"#client-ui-tests\">Client UI Tests<\/a><\/li>\n+<li><a href=\"#notes-for-specific-tests\"\n+id=\"toc-notes-for-specific-tests\">Notes for Specific Tests<\/a>\n+<ul>\n+<li><a href=\"#docker-tests\" id=\"toc-docker-tests\">Docker Tests<\/a><\/li>\n+<li><a href=\"#non-us-locale\" id=\"toc-non-us-locale\">Non-US\n+locale<\/a><\/li>\n+<li><a href=\"#pkcs11-tests\" id=\"toc-pkcs11-tests\">PKCS11 Tests<\/a><\/li>\n+<li><a href=\"#client-ui-tests\" id=\"toc-client-ui-tests\">Client UI\n+Tests<\/a><\/li>\n@@ -50,1 +78,2 @@\n-<li><a href=\"#editing-this-document\">Editing this document<\/a><\/li>\n+<li><a href=\"#editing-this-document\"\n+id=\"toc-editing-this-document\">Editing this document<\/a><\/li>\n@@ -54,3 +83,10 @@\n-<p>The bulk of JDK tests use <a href=\"https:\/\/openjdk.org\/jtreg\/\">jtreg<\/a>, a regression test framework and test runner built for the JDK's specific needs. Other test frameworks are also used. The different test frameworks can be executed directly, but there is also a set of make targets intended to simplify the interface, and figure out how to run your tests for you.<\/p>\n-<h2 id=\"running-tests-locally-with-make-test\">Running tests locally with <code>make test<\/code><\/h2>\n-<p>This is the easiest way to get started. Assuming you've built the JDK locally, execute:<\/p>\n+<p>The bulk of JDK tests use <a\n+href=\"https:\/\/openjdk.org\/jtreg\/\">jtreg<\/a>, a regression test framework\n+and test runner built for the JDK's specific needs. Other test\n+frameworks are also used. The different test frameworks can be executed\n+directly, but there is also a set of make targets intended to simplify\n+the interface, and figure out how to run your tests for you.<\/p>\n+<h2 id=\"running-tests-locally-with-make-test\">Running tests locally with\n+<code>make test<\/code><\/h2>\n+<p>This is the easiest way to get started. Assuming you've built the JDK\n+locally, execute:<\/p>\n@@ -58,1 +94,7 @@\n-<p>This will run a default set of tests against the JDK, and present you with the results. <code>make test<\/code> is part of a family of test-related make targets which simplify running tests, because they invoke the various test frameworks for you. The &quot;make test framework&quot; is simple to start with, but more complex ad-hoc combination of tests is also possible. You can always invoke the test frameworks directly if you want even more control.<\/p>\n+<p>This will run a default set of tests against the JDK, and present you\n+with the results. <code>make test<\/code> is part of a family of\n+test-related make targets which simplify running tests, because they\n+invoke the various test frameworks for you. The \"make test framework\" is\n+simple to start with, but more complex ad-hoc combination of tests is\n+also possible. You can always invoke the test frameworks directly if you\n+want even more control.<\/p>\n@@ -68,2 +110,15 @@\n-<p>&quot;tier1&quot; and &quot;tier2&quot; refer to tiered testing, see further down. &quot;TEST&quot; is a test selection argument which the make test framework will use to try to find the tests you want. It iterates over the available test frameworks, and if the test isn't present in one, it tries the next one. The main target <code>test<\/code> uses the jdk-image as the tested product. There is also an alternate target <code>exploded-test<\/code> that uses the exploded image instead. Not all tests will run successfully on the exploded image, but using this target can greatly improve rebuild times for certain workflows.<\/p>\n-<p>Previously, <code>make test<\/code> was used to invoke an old system for running tests, and <code>make run-test<\/code> was used for the new test framework. For backward compatibility with scripts and muscle memory, <code>run-test<\/code> and variants like <code>exploded-run-test<\/code> or <code>run-test-tier1<\/code> are kept as aliases.<\/p>\n+<p>\"tier1\" and \"tier2\" refer to tiered testing, see further down. \"TEST\"\n+is a test selection argument which the make test framework will use to\n+try to find the tests you want. It iterates over the available test\n+frameworks, and if the test isn't present in one, it tries the next one.\n+The main target <code>test<\/code> uses the jdk-image as the tested\n+product. There is also an alternate target <code>exploded-test<\/code>\n+that uses the exploded image instead. Not all tests will run\n+successfully on the exploded image, but using this target can greatly\n+improve rebuild times for certain workflows.<\/p>\n+<p>Previously, <code>make test<\/code> was used to invoke an old system\n+for running tests, and <code>make run-test<\/code> was used for the new\n+test framework. For backward compatibility with scripts and muscle\n+memory, <code>run-test<\/code> and variants like\n+<code>exploded-run-test<\/code> or <code>run-test-tier1<\/code> are kept\n+as aliases.<\/p>\n@@ -71,3 +126,33 @@\n-<p>To be able to run JTReg tests, <code>configure<\/code> needs to know where to find the JTReg test framework. If it is not picked up automatically by configure, use the <code>--with-jtreg=&lt;path to jtreg home&gt;<\/code> option to point to the JTReg framework. Note that this option should point to the JTReg home, i.e. the top directory, containing <code>lib\/jtreg.jar<\/code> etc. (An alternative is to set the <code>JT_HOME<\/code> environment variable to point to the JTReg home before running <code>configure<\/code>.)<\/p>\n-<p>To be able to run microbenchmarks, <code>configure<\/code> needs to know where to find the JMH dependency. Use <code>--with-jmh=&lt;path to JMH jars&gt;<\/code> to point to a directory containing the core JMH and transitive dependencies. The recommended dependencies can be retrieved by running <code>sh make\/devkit\/createJMHBundle.sh<\/code>, after which <code>--with-jmh=build\/jmh\/jars<\/code> should work.<\/p>\n-<p>When tests fail or timeout, jtreg runs its failure handler to capture necessary data from the system where the test was run. This data can then be used to analyze the test failures. Collecting this data involves running various commands (which are listed in files residing in <code>test\/failure_handler\/src\/share\/conf<\/code>) and some of these commands use <code>sudo<\/code>. If the system's <code>sudoers<\/code> file isn't configured to allow running these commands, then it can result in password being prompted during the failure handler execution. Typically, when running locally, collecting this additional data isn't always necessary. To disable running the failure handler, use <code>--enable-jtreg-failure-handler=no<\/code> when running <code>configure<\/code>. If, however, you want to let the failure handler to run and don't want to be prompted for sudo password, then you can configure your <code>sudoers<\/code> file appropriately. Please read the necessary documentation of your operating system to see how to do that; here we only show one possible way of doing that - edit the <code>\/etc\/sudoers.d\/sudoers<\/code> file to include the following line:<\/p>\n+<p>To be able to run JTReg tests, <code>configure<\/code> needs to know\n+where to find the JTReg test framework. If it is not picked up\n+automatically by configure, use the\n+<code>--with-jtreg=&lt;path to jtreg home&gt;<\/code> option to point to\n+the JTReg framework. Note that this option should point to the JTReg\n+home, i.e. the top directory, containing <code>lib\/jtreg.jar<\/code> etc.\n+(An alternative is to set the <code>JT_HOME<\/code> environment variable\n+to point to the JTReg home before running <code>configure<\/code>.)<\/p>\n+<p>To be able to run microbenchmarks, <code>configure<\/code> needs to\n+know where to find the JMH dependency. Use\n+<code>--with-jmh=&lt;path to JMH jars&gt;<\/code> to point to a directory\n+containing the core JMH and transitive dependencies. The recommended\n+dependencies can be retrieved by running\n+<code>sh make\/devkit\/createJMHBundle.sh<\/code>, after which\n+<code>--with-jmh=build\/jmh\/jars<\/code> should work.<\/p>\n+<p>When tests fail or timeout, jtreg runs its failure handler to capture\n+necessary data from the system where the test was run. This data can\n+then be used to analyze the test failures. Collecting this data involves\n+running various commands (which are listed in files residing in\n+<code>test\/failure_handler\/src\/share\/conf<\/code>) and some of these\n+commands use <code>sudo<\/code>. If the system's <code>sudoers<\/code>\n+file isn't configured to allow running these commands, then it can\n+result in password being prompted during the failure handler execution.\n+Typically, when running locally, collecting this additional data isn't\n+always necessary. To disable running the failure handler, use\n+<code>--enable-jtreg-failure-handler=no<\/code> when running\n+<code>configure<\/code>. If, however, you want to let the failure handler\n+to run and don't want to be prompted for sudo password, then you can\n+configure your <code>sudoers<\/code> file appropriately. Please read the\n+necessary documentation of your operating system to see how to do that;\n+here we only show one possible way of doing that - edit the\n+<code>\/etc\/sudoers.d\/sudoers<\/code> file to include the following\n+line:<\/p>\n@@ -75,1 +160,7 @@\n-<p>This line configures <code>sudo<\/code> to <em>not<\/em> prompt for password for the <code>\/sbin\/dmesg<\/code> command (this is one of the commands that is listed in the files at <code>test\/failure_handler\/src\/share\/conf<\/code>), for the user <code>johndoe<\/code>. Here <code>johndoe<\/code> is the user account under which the jtreg tests are run. Replace the username with a relevant user account of your system.<\/p>\n+<p>This line configures <code>sudo<\/code> to <em>not<\/em> prompt for\n+password for the <code>\/sbin\/dmesg<\/code> command (this is one of the\n+commands that is listed in the files at\n+<code>test\/failure_handler\/src\/share\/conf<\/code>), for the user\n+<code>johndoe<\/code>. Here <code>johndoe<\/code> is the user account\n+under which the jtreg tests are run. Replace the username with a\n+relevant user account of your system.<\/p>\n@@ -77,3 +168,18 @@\n-<p>All functionality is available using the <code>test<\/code> make target. In this use case, the test or tests to be executed is controlled using the <code>TEST<\/code> variable. To speed up subsequent test runs with no source code changes, <code>test-only<\/code> can be used instead, which do not depend on the source and test image build.<\/p>\n-<p>For some common top-level tests, direct make targets have been generated. This includes all JTReg test groups, the hotspot gtest, and custom tests (if present). This means that <code>make test-tier1<\/code> is equivalent to <code>make test TEST=&quot;tier1&quot;<\/code>, but the latter is more tab-completion friendly. For more complex test runs, the <code>test TEST=&quot;x&quot;<\/code> solution needs to be used.<\/p>\n-<p>The test specifications given in <code>TEST<\/code> is parsed into fully qualified test descriptors, which clearly and unambigously show which tests will be run. As an example, <code>:tier1<\/code> will expand to <code>jtreg:$(TOPDIR)\/test\/hotspot\/jtreg:tier1 jtreg:$(TOPDIR)\/test\/jdk:tier1 jtreg:$(TOPDIR)\/test\/langtools:tier1 jtreg:$(TOPDIR)\/test\/nashorn:tier1 jtreg:$(TOPDIR)\/test\/jaxp:tier1<\/code>. You can always submit a list of fully qualified test descriptors in the <code>TEST<\/code> variable if you want to shortcut the parser.<\/p>\n+<p>All functionality is available using the <code>test<\/code> make\n+target. In this use case, the test or tests to be executed is controlled\n+using the <code>TEST<\/code> variable. To speed up subsequent test runs\n+with no source code changes, <code>test-only<\/code> can be used instead,\n+which do not depend on the source and test image build.<\/p>\n+<p>For some common top-level tests, direct make targets have been\n+generated. This includes all JTReg test groups, the hotspot gtest, and\n+custom tests (if present). This means that <code>make test-tier1<\/code>\n+is equivalent to <code>make test TEST=\"tier1\"<\/code>, but the latter is\n+more tab-completion friendly. For more complex test runs, the\n+<code>test TEST=\"x\"<\/code> solution needs to be used.<\/p>\n+<p>The test specifications given in <code>TEST<\/code> is parsed into\n+fully qualified test descriptors, which clearly and unambigously show\n+which tests will be run. As an example, <code>:tier1<\/code> will expand\n+to\n+<code>jtreg:$(TOPDIR)\/test\/hotspot\/jtreg:tier1 jtreg:$(TOPDIR)\/test\/jdk:tier1 jtreg:$(TOPDIR)\/test\/langtools:tier1 jtreg:$(TOPDIR)\/test\/nashorn:tier1 jtreg:$(TOPDIR)\/test\/jaxp:tier1<\/code>.\n+You can always submit a list of fully qualified test descriptors in the\n+<code>TEST<\/code> variable if you want to shortcut the parser.<\/p>\n@@ -81,5 +187,21 @@\n-<p>Ideally, all tests are run for every change but this may not be practical due to the limited testing resources, the scope of the change, etc.<\/p>\n-<p>The source tree currently defines a few common test groups in the relevant <code>TEST.groups<\/code> files. There are test groups that cover a specific component, for example <code>hotspot_gc<\/code>. It is a good idea to look into <code>TEST.groups<\/code> files to get a sense what tests are relevant to a particular JDK component.<\/p>\n-<p>Component-specific tests may miss some unintended consequences of a change, so other tests should also be run. Again, it might be impractical to run all tests, and therefore <em>tiered<\/em> test groups exist. Tiered test groups are not component-specific, but rather cover the significant parts of the entire JDK.<\/p>\n-<p>Multiple tiers allow balancing test coverage and testing costs. Lower test tiers are supposed to contain the simpler, quicker and more stable tests. Higher tiers are supposed to contain progressively more thorough, slower, and sometimes less stable tests, or the tests that require special configuration.<\/p>\n-<p>Contributors are expected to run the tests for the areas that are changed, and the first N tiers they can afford to run, but at least tier1.<\/p>\n+<p>Ideally, all tests are run for every change but this may not be\n+practical due to the limited testing resources, the scope of the change,\n+etc.<\/p>\n+<p>The source tree currently defines a few common test groups in the\n+relevant <code>TEST.groups<\/code> files. There are test groups that\n+cover a specific component, for example <code>hotspot_gc<\/code>. It is a\n+good idea to look into <code>TEST.groups<\/code> files to get a sense\n+what tests are relevant to a particular JDK component.<\/p>\n+<p>Component-specific tests may miss some unintended consequences of a\n+change, so other tests should also be run. Again, it might be\n+impractical to run all tests, and therefore <em>tiered<\/em> test groups\n+exist. Tiered test groups are not component-specific, but rather cover\n+the significant parts of the entire JDK.<\/p>\n+<p>Multiple tiers allow balancing test coverage and testing costs. Lower\n+test tiers are supposed to contain the simpler, quicker and more stable\n+tests. Higher tiers are supposed to contain progressively more thorough,\n+slower, and sometimes less stable tests, or the tests that require\n+special configuration.<\/p>\n+<p>Contributors are expected to run the tests for the areas that are\n+changed, and the first N tiers they can afford to run, but at least\n+tier1.<\/p>\n@@ -88,4 +210,23 @@\n-<li><p><code>tier1<\/code>: This is the lowest test tier. Multiple developers run these tests every day. Because of the widespread use, the tests in <code>tier1<\/code> are carefully selected and optimized to run fast, and to run in the most stable manner. The test failures in <code>tier1<\/code> are usually followed up on quickly, either with fixes, or adding relevant tests to problem list. GitHub Actions workflows, if enabled, run <code>tier1<\/code> tests.<\/p><\/li>\n-<li><p><code>tier2<\/code>: This test group covers even more ground. These contain, among other things, tests that either run for too long to be at <code>tier1<\/code>, or may require special configuration, or tests that are less stable, or cover the broader range of non-core JVM and JDK features\/components(for example, XML).<\/p><\/li>\n-<li><p><code>tier3<\/code>: This test group includes more stressful tests, the tests for corner cases not covered by previous tiers, plus the tests that require GUIs. As such, this suite should either be run with low concurrency (<code>TEST_JOBS=1<\/code>), or without headful tests(<code>JTREG_KEYWORDS=\\!headful<\/code>), or both.<\/p><\/li>\n-<li><p><code>tier4<\/code>: This test group includes every other test not covered by previous tiers. It includes, for example, <code>vmTestbase<\/code> suites for Hotspot, which run for many hours even on large machines. It also runs GUI tests, so the same <code>TEST_JOBS<\/code> and <code>JTREG_KEYWORDS<\/code> caveats apply.<\/p><\/li>\n+<li><p><code>tier1<\/code>: This is the lowest test tier. Multiple\n+developers run these tests every day. Because of the widespread use, the\n+tests in <code>tier1<\/code> are carefully selected and optimized to run\n+fast, and to run in the most stable manner. The test failures in\n+<code>tier1<\/code> are usually followed up on quickly, either with\n+fixes, or adding relevant tests to problem list. GitHub Actions\n+workflows, if enabled, run <code>tier1<\/code> tests.<\/p><\/li>\n+<li><p><code>tier2<\/code>: This test group covers even more ground.\n+These contain, among other things, tests that either run for too long to\n+be at <code>tier1<\/code>, or may require special configuration, or tests\n+that are less stable, or cover the broader range of non-core JVM and JDK\n+features\/components(for example, XML).<\/p><\/li>\n+<li><p><code>tier3<\/code>: This test group includes more stressful\n+tests, the tests for corner cases not covered by previous tiers, plus\n+the tests that require GUIs. As such, this suite should either be run\n+with low concurrency (<code>TEST_JOBS=1<\/code>), or without headful\n+tests(<code>JTREG_KEYWORDS=\\!headful<\/code>), or both.<\/p><\/li>\n+<li><p><code>tier4<\/code>: This test group includes every other test not\n+covered by previous tiers. It includes, for example,\n+<code>vmTestbase<\/code> suites for Hotspot, which run for many hours\n+even on large machines. It also runs GUI tests, so the same\n+<code>TEST_JOBS<\/code> and <code>JTREG_KEYWORDS<\/code> caveats\n+apply.<\/p><\/li>\n@@ -94,5 +235,32 @@\n-<p>JTReg tests can be selected either by picking a JTReg test group, or a selection of files or directories containing JTReg tests. Documentation can be found at <a href=\"https:\/\/openjdk.org\/jtreg\/\">https:\/\/openjdk.org\/jtreg\/<\/a>, note especially the extensive <a href=\"https:\/\/openjdk.org\/jtreg\/faq.html\">FAQ<\/a>.<\/p>\n-<p>JTReg test groups can be specified either without a test root, e.g. <code>:tier1<\/code> (or <code>tier1<\/code>, the initial colon is optional), or with, e.g. <code>hotspot:tier1<\/code>, <code>test\/jdk:jdk_util<\/code> or <code>$(TOPDIR)\/test\/hotspot\/jtreg:hotspot_all<\/code>. The test root can be specified either as an absolute path, or a path relative to the JDK top directory, or the <code>test<\/code> directory. For simplicity, the hotspot JTReg test root, which really is <code>hotspot\/jtreg<\/code> can be abbreviated as just <code>hotspot<\/code>.<\/p>\n-<p>When specified without a test root, all matching groups from all test roots will be added. Otherwise, only the group from the specified test root will be added.<\/p>\n-<p>Individual JTReg tests or directories containing JTReg tests can also be specified, like <code>test\/hotspot\/jtreg\/native_sanity\/JniVersion.java<\/code> or <code>hotspot\/jtreg\/native_sanity<\/code>. Just like for test root selection, you can either specify an absolute path (which can even point to JTReg tests outside the source tree), or a path relative to either the JDK top directory or the <code>test<\/code> directory. <code>hotspot<\/code> can be used as an alias for <code>hotspot\/jtreg<\/code> here as well.<\/p>\n-<p>As long as the test groups or test paths can be uniquely resolved, you do not need to enter the <code>jtreg:<\/code> prefix. If this is not possible, or if you want to use a fully qualified test descriptor, add <code>jtreg:<\/code>, e.g. <code>jtreg:test\/hotspot\/jtreg\/native_sanity<\/code>.<\/p>\n+<p>JTReg tests can be selected either by picking a JTReg test group, or\n+a selection of files or directories containing JTReg tests.\n+Documentation can be found at <a\n+href=\"https:\/\/openjdk.org\/jtreg\/\">https:\/\/openjdk.org\/jtreg\/<\/a>, note\n+especially the extensive <a\n+href=\"https:\/\/openjdk.org\/jtreg\/faq.html\">FAQ<\/a>.<\/p>\n+<p>JTReg test groups can be specified either without a test root, e.g.\n+<code>:tier1<\/code> (or <code>tier1<\/code>, the initial colon is\n+optional), or with, e.g. <code>hotspot:tier1<\/code>,\n+<code>test\/jdk:jdk_util<\/code> or\n+<code>$(TOPDIR)\/test\/hotspot\/jtreg:hotspot_all<\/code>. The test root can\n+be specified either as an absolute path, or a path relative to the JDK\n+top directory, or the <code>test<\/code> directory. For simplicity, the\n+hotspot JTReg test root, which really is <code>hotspot\/jtreg<\/code> can\n+be abbreviated as just <code>hotspot<\/code>.<\/p>\n+<p>When specified without a test root, all matching groups from all test\n+roots will be added. Otherwise, only the group from the specified test\n+root will be added.<\/p>\n+<p>Individual JTReg tests or directories containing JTReg tests can also\n+be specified, like\n+<code>test\/hotspot\/jtreg\/native_sanity\/JniVersion.java<\/code> or\n+<code>hotspot\/jtreg\/native_sanity<\/code>. Just like for test root\n+selection, you can either specify an absolute path (which can even point\n+to JTReg tests outside the source tree), or a path relative to either\n+the JDK top directory or the <code>test<\/code> directory.\n+<code>hotspot<\/code> can be used as an alias for\n+<code>hotspot\/jtreg<\/code> here as well.<\/p>\n+<p>As long as the test groups or test paths can be uniquely resolved,\n+you do not need to enter the <code>jtreg:<\/code> prefix. If this is not\n+possible, or if you want to use a fully qualified test descriptor, add\n+<code>jtreg:<\/code>, e.g.\n+<code>jtreg:test\/hotspot\/jtreg\/native_sanity<\/code>.<\/p>\n@@ -100,4 +268,19 @@\n-<p><strong>Note:<\/strong> To be able to run the Gtest suite, you need to configure your build to be able to find a proper version of the gtest source. For details, see the section <a href=\"building.html#running-tests\">&quot;Running Tests&quot; in the build documentation<\/a>.<\/p>\n-<p>Since the Hotspot Gtest suite is so quick, the default is to run all tests. This is specified by just <code>gtest<\/code>, or as a fully qualified test descriptor <code>gtest:all<\/code>.<\/p>\n-<p>If you want, you can single out an individual test or a group of tests, for instance <code>gtest:LogDecorations<\/code> or <code>gtest:LogDecorations.level_test_vm<\/code>. This can be particularly useful if you want to run a shaky test repeatedly.<\/p>\n-<p>For Gtest, there is a separate test suite for each JVM variant. The JVM variant is defined by adding <code>\/&lt;variant&gt;<\/code> to the test descriptor, e.g. <code>gtest:Log\/client<\/code>. If you specify no variant, gtest will run once for each JVM variant present (e.g. server, client). So if you only have the server JVM present, then <code>gtest:all<\/code> will be equivalent to <code>gtest:all\/server<\/code>.<\/p>\n+<p><strong>Note:<\/strong> To be able to run the Gtest suite, you need to\n+configure your build to be able to find a proper version of the gtest\n+source. For details, see the section <a\n+href=\"building.html#running-tests\">\"Running Tests\" in the build\n+documentation<\/a>.<\/p>\n+<p>Since the Hotspot Gtest suite is so quick, the default is to run all\n+tests. This is specified by just <code>gtest<\/code>, or as a fully\n+qualified test descriptor <code>gtest:all<\/code>.<\/p>\n+<p>If you want, you can single out an individual test or a group of\n+tests, for instance <code>gtest:LogDecorations<\/code> or\n+<code>gtest:LogDecorations.level_test_vm<\/code>. This can be\n+particularly useful if you want to run a shaky test repeatedly.<\/p>\n+<p>For Gtest, there is a separate test suite for each JVM variant. The\n+JVM variant is defined by adding <code>\/&lt;variant&gt;<\/code> to the\n+test descriptor, e.g. <code>gtest:Log\/client<\/code>. If you specify no\n+variant, gtest will run once for each JVM variant present (e.g. server,\n+client). So if you only have the server JVM present, then\n+<code>gtest:all<\/code> will be equivalent to\n+<code>gtest:all\/server<\/code>.<\/p>\n@@ -105,2 +288,8 @@\n-<p>Which microbenchmarks to run is selected using a regular expression following the <code>micro:<\/code> test descriptor, e.g., <code>micro:java.lang.reflect<\/code>. This delegates the test selection to JMH, meaning package name, class name and even benchmark method names can be used to select tests.<\/p>\n-<p>Using special characters like <code>|<\/code> in the regular expression is possible, but needs to be escaped multiple times: <code>micro:ArrayCopy\\\\\\\\\\|reflect<\/code>.<\/p>\n+<p>Which microbenchmarks to run is selected using a regular expression\n+following the <code>micro:<\/code> test descriptor, e.g.,\n+<code>micro:java.lang.reflect<\/code>. This delegates the test selection\n+to JMH, meaning package name, class name and even benchmark method names\n+can be used to select tests.<\/p>\n+<p>Using special characters like <code>|<\/code> in the regular\n+expression is possible, but needs to be escaped multiple times:\n+<code>micro:ArrayCopy\\\\\\\\\\|reflect<\/code>.<\/p>\n@@ -108,1 +297,4 @@\n-<p>A handful of odd tests that are not covered by any other testing framework are accessible using the <code>special:<\/code> test descriptor. Currently, this includes <code>failure-handler<\/code> and <code>make<\/code>.<\/p>\n+<p>A handful of odd tests that are not covered by any other testing\n+framework are accessible using the <code>special:<\/code> test\n+descriptor. Currently, this includes <code>failure-handler<\/code> and\n+<code>make<\/code>.<\/p>\n@@ -110,3 +302,11 @@\n-<li><p>Failure handler testing is run using <code>special:failure-handler<\/code> or just <code>failure-handler<\/code> as test descriptor.<\/p><\/li>\n-<li><p>Tests for the build system, including both makefiles and related functionality, is run using <code>special:make<\/code> or just <code>make<\/code> as test descriptor. This is equivalent to <code>special:make:all<\/code>.<\/p>\n-<p>A specific make test can be run by supplying it as argument, e.g. <code>special:make:idea<\/code>. As a special syntax, this can also be expressed as <code>make-idea<\/code>, which allows for command lines as <code>make test-make-idea<\/code>.<\/p><\/li>\n+<li><p>Failure handler testing is run using\n+<code>special:failure-handler<\/code> or just\n+<code>failure-handler<\/code> as test descriptor.<\/p><\/li>\n+<li><p>Tests for the build system, including both makefiles and related\n+functionality, is run using <code>special:make<\/code> or just\n+<code>make<\/code> as test descriptor. This is equivalent to\n+<code>special:make:all<\/code>.<\/p>\n+<p>A specific make test can be run by supplying it as argument, e.g.\n+<code>special:make:idea<\/code>. As a special syntax, this can also be\n+expressed as <code>make-idea<\/code>, which allows for command lines as\n+<code>make test-make-idea<\/code>.<\/p><\/li>\n@@ -115,1 +315,3 @@\n-<p>At the end of the test run, a summary of all tests run will be presented. This will have a consistent look, regardless of what test suites were used. This is a sample summary:<\/p>\n+<p>At the end of the test run, a summary of all tests run will be\n+presented. This will have a consistent look, regardless of what test\n+suites were used. This is a sample summary:<\/p>\n@@ -125,5 +327,20 @@\n-<p>Tests where the number of TOTAL tests does not equal the number of PASSed tests will be considered a test failure. These are marked with the <code>&gt;&gt; ... &lt;&lt;<\/code> marker for easy identification.<\/p>\n-<p>The classification of non-passed tests differs a bit between test suites. In the summary, ERROR is used as a catch-all for tests that neither passed nor are classified as failed by the framework. This might indicate test framework error, timeout or other problems.<\/p>\n-<p>In case of test failures, <code>make test<\/code> will exit with a non-zero exit value.<\/p>\n-<p>All tests have their result stored in <code>build\/$BUILD\/test-results\/$TEST_ID<\/code>, where TEST_ID is a path-safe conversion from the fully qualified test descriptor, e.g. for <code>jtreg:jdk\/test:tier1<\/code> the TEST_ID is <code>jtreg_jdk_test_tier1<\/code>. This path is also printed in the log at the end of the test run.<\/p>\n-<p>Additional work data is stored in <code>build\/$BUILD\/test-support\/$TEST_ID<\/code>. For some frameworks, this directory might contain information that is useful in determining the cause of a failed test.<\/p>\n+<p>Tests where the number of TOTAL tests does not equal the number of\n+PASSed tests will be considered a test failure. These are marked with\n+the <code>&gt;&gt; ... &lt;&lt;<\/code> marker for easy\n+identification.<\/p>\n+<p>The classification of non-passed tests differs a bit between test\n+suites. In the summary, ERROR is used as a catch-all for tests that\n+neither passed nor are classified as failed by the framework. This might\n+indicate test framework error, timeout or other problems.<\/p>\n+<p>In case of test failures, <code>make test<\/code> will exit with a\n+non-zero exit value.<\/p>\n+<p>All tests have their result stored in\n+<code>build\/$BUILD\/test-results\/$TEST_ID<\/code>, where TEST_ID is a\n+path-safe conversion from the fully qualified test descriptor, e.g. for\n+<code>jtreg:jdk\/test:tier1<\/code> the TEST_ID is\n+<code>jtreg_jdk_test_tier1<\/code>. This path is also printed in the log\n+at the end of the test run.<\/p>\n+<p>Additional work data is stored in\n+<code>build\/$BUILD\/test-support\/$TEST_ID<\/code>. For some frameworks,\n+this directory might contain information that is useful in determining\n+the cause of a failed test.<\/p>\n@@ -131,5 +348,26 @@\n-<p>It is possible to control various aspects of the test suites using make control variables.<\/p>\n-<p>These variables use a keyword=value approach to allow multiple values to be set. So, for instance, <code>JTREG=&quot;JOBS=1;TIMEOUT_FACTOR=8&quot;<\/code> will set the JTReg concurrency level to 1 and the timeout factor to 8. This is equivalent to setting <code>JTREG_JOBS=1 JTREG_TIMEOUT_FACTOR=8<\/code>, but using the keyword format means that the <code>JTREG<\/code> variable is parsed and verified for correctness, so <code>JTREG=&quot;TMIEOUT_FACTOR=8&quot;<\/code> would give an error, while <code>JTREG_TMIEOUT_FACTOR=8<\/code> would just pass unnoticed.<\/p>\n-<p>To separate multiple keyword=value pairs, use <code>;<\/code> (semicolon). Since the shell normally eats <code>;<\/code>, the recommended usage is to write the assignment inside qoutes, e.g. <code>JTREG=&quot;...;...&quot;<\/code>. This will also make sure spaces are preserved, as in <code>JTREG=&quot;JAVA_OPTIONS=-XshowSettings -Xlog:gc+ref=debug&quot;<\/code>.<\/p>\n-<p>(Other ways are possible, e.g. using backslash: <code>JTREG=JOBS=1\\;TIMEOUT_FACTOR=8<\/code>. Also, as a special technique, the string <code>%20<\/code> will be replaced with space for certain options, e.g. <code>JTREG=JAVA_OPTIONS=-XshowSettings%20-Xlog:gc+ref=debug<\/code>. This can be useful if you have layers of scripts and have trouble getting proper quoting of command line arguments through.)<\/p>\n-<p>As far as possible, the names of the keywords have been standardized between test suites.<\/p>\n+<p>It is possible to control various aspects of the test suites using\n+make control variables.<\/p>\n+<p>These variables use a keyword=value approach to allow multiple values\n+to be set. So, for instance,\n+<code>JTREG=\"JOBS=1;TIMEOUT_FACTOR=8\"<\/code> will set the JTReg\n+concurrency level to 1 and the timeout factor to 8. This is equivalent\n+to setting <code>JTREG_JOBS=1 JTREG_TIMEOUT_FACTOR=8<\/code>, but using\n+the keyword format means that the <code>JTREG<\/code> variable is parsed\n+and verified for correctness, so <code>JTREG=\"TMIEOUT_FACTOR=8\"<\/code>\n+would give an error, while <code>JTREG_TMIEOUT_FACTOR=8<\/code> would\n+just pass unnoticed.<\/p>\n+<p>To separate multiple keyword=value pairs, use <code>;<\/code>\n+(semicolon). Since the shell normally eats <code>;<\/code>, the\n+recommended usage is to write the assignment inside qoutes, e.g.\n+<code>JTREG=\"...;...\"<\/code>. This will also make sure spaces are\n+preserved, as in\n+<code>JTREG=\"JAVA_OPTIONS=-XshowSettings -Xlog:gc+ref=debug\"<\/code>.<\/p>\n+<p>(Other ways are possible, e.g. using backslash:\n+<code>JTREG=JOBS=1\\;TIMEOUT_FACTOR=8<\/code>. Also, as a special\n+technique, the string <code>%20<\/code> will be replaced with space for\n+certain options, e.g.\n+<code>JTREG=JAVA_OPTIONS=-XshowSettings%20-Xlog:gc+ref=debug<\/code>.\n+This can be useful if you have layers of scripts and have trouble\n+getting proper quoting of command line arguments through.)<\/p>\n+<p>As far as possible, the names of the keywords have been standardized\n+between test suites.<\/p>\n@@ -137,2 +375,7 @@\n-<p>Some keywords are valid across different test suites. If you want to run tests from multiple test suites, or just don't want to care which test suite specific control variable to use, then you can use the general TEST_OPTS control variable.<\/p>\n-<p>There are also some keywords that applies globally to the test runner system, not to any specific test suites. These are also available as TEST_OPTS keywords.<\/p>\n+<p>Some keywords are valid across different test suites. If you want to\n+run tests from multiple test suites, or just don't want to care which\n+test suite specific control variable to use, then you can use the\n+general TEST_OPTS control variable.<\/p>\n+<p>There are also some keywords that applies globally to the test runner\n+system, not to any specific test suites. These are also available as\n+TEST_OPTS keywords.<\/p>\n@@ -150,4 +393,14 @@\n-<p>This keywords applies globally to the test runner system. If set to <code>true<\/code>, it enables JCov coverage reporting for all tests run. To be useful, the JDK under test must be run with a JDK built with JCov instrumentation (<code>configure --with-jcov=&lt;path to directory containing lib\/jcov.jar&gt;<\/code>, <code>make jcov-image<\/code>).<\/p>\n-<p>The simplest way to run tests with JCov coverage report is to use the special target <code>jcov-test<\/code> instead of <code>test<\/code>, e.g. <code>make jcov-test TEST=jdk_lang<\/code>. This will make sure the JCov image is built, and that JCov reporting is enabled.<\/p>\n-<p>The JCov report is stored in <code>build\/$BUILD\/test-results\/jcov-output\/report<\/code>.<\/p>\n-<p>Please note that running with JCov reporting can be very memory intensive.<\/p>\n+<p>This keywords applies globally to the test runner system. If set to\n+<code>true<\/code>, it enables JCov coverage reporting for all tests run.\n+To be useful, the JDK under test must be run with a JDK built with JCov\n+instrumentation\n+(<code>configure --with-jcov=&lt;path to directory containing lib\/jcov.jar&gt;<\/code>,\n+<code>make jcov-image<\/code>).<\/p>\n+<p>The simplest way to run tests with JCov coverage report is to use the\n+special target <code>jcov-test<\/code> instead of <code>test<\/code>, e.g.\n+<code>make jcov-test TEST=jdk_lang<\/code>. This will make sure the JCov\n+image is built, and that JCov reporting is enabled.<\/p>\n+<p>The JCov report is stored in\n+<code>build\/$BUILD\/test-results\/jcov-output\/report<\/code>.<\/p>\n+<p>Please note that running with JCov reporting can be very memory\n+intensive.<\/p>\n@@ -155,2 +408,7 @@\n-<p>While collecting code coverage with JCov, it is also possible to find coverage for only recently changed code. JCOV_DIFF_CHANGESET specifies a source revision. A textual report will be generated showing coverage of the diff between the specified revision and the repository tip.<\/p>\n-<p>The report is stored in <code>build\/$BUILD\/test-results\/jcov-output\/diff_coverage_report<\/code> file.<\/p>\n+<p>While collecting code coverage with JCov, it is also possible to find\n+coverage for only recently changed code. JCOV_DIFF_CHANGESET specifies a\n+source revision. A textual report will be generated showing coverage of\n+the diff between the specified revision and the repository tip.<\/p>\n+<p>The report is stored in\n+<code>build\/$BUILD\/test-results\/jcov-output\/diff_coverage_report<\/code>\n+file.<\/p>\n@@ -160,1 +418,4 @@\n-<p>Defaults to TEST_JOBS (if set by <code>--with-test-jobs=<\/code>), otherwise it defaults to JOBS, except for Hotspot, where the default is <em>number of CPU cores\/2<\/em>, but never more than <em>memory size in GB\/2<\/em>.<\/p>\n+<p>Defaults to TEST_JOBS (if set by <code>--with-test-jobs=<\/code>),\n+otherwise it defaults to JOBS, except for Hotspot, where the default is\n+<em>number of CPU cores\/2<\/em>, but never more than <em>memory size in\n+GB\/2<\/em>.<\/p>\n@@ -165,1 +426,3 @@\n-<p>Sets the argument <code>-timeoutHandlerTimeout<\/code> for JTReg. The default value is 0. This is only valid if the failure handler is built.<\/p>\n+<p>Sets the argument <code>-timeoutHandlerTimeout<\/code> for JTReg. The\n+default value is 0. This is only valid if the failure handler is\n+built.<\/p>\n@@ -171,1 +434,2 @@\n-<p>Set to <code>true<\/code> or <code>false<\/code>. If true, adds <code>-ea -esa<\/code>. Defaults to true, except for hotspot.<\/p>\n+<p>Set to <code>true<\/code> or <code>false<\/code>. If true, adds\n+<code>-ea -esa<\/code>. Defaults to true, except for hotspot.<\/p>\n@@ -179,3 +443,6 @@\n-<p>Limit memory consumption (<code>-Xmx<\/code> and <code>-vmoption:-Xmx<\/code>, or none).<\/p>\n-<p>Limit memory consumption for JTReg test framework and VM under test. Set to 0 to disable the limits.<\/p>\n-<p>Defaults to 512m, except for hotspot, where it defaults to 0 (no limit).<\/p>\n+<p>Limit memory consumption (<code>-Xmx<\/code> and\n+<code>-vmoption:-Xmx<\/code>, or none).<\/p>\n+<p>Limit memory consumption for JTReg test framework and VM under test.\n+Set to 0 to disable the limits.<\/p>\n+<p>Defaults to 512m, except for hotspot, where it defaults to 0 (no\n+limit).<\/p>\n@@ -183,1 +450,2 @@\n-<p>Set the property <code>javatest.maxOutputSize<\/code> for the launcher, to change the default JTReg log limit.<\/p>\n+<p>Set the property <code>javatest.maxOutputSize<\/code> for the\n+launcher, to change the default JTReg log limit.<\/p>\n@@ -185,1 +453,4 @@\n-<p>JTReg keywords sent to JTReg using <code>-k<\/code>. Please be careful in making sure that spaces and special characters (like <code>!<\/code>) are properly quoted. To avoid some issues, the special value <code>%20<\/code> can be used instead of space.<\/p>\n+<p>JTReg keywords sent to JTReg using <code>-k<\/code>. Please be careful\n+in making sure that spaces and special characters (like <code>!<\/code>)\n+are properly quoted. To avoid some issues, the special value\n+<code>%20<\/code> can be used instead of space.<\/p>\n@@ -187,3 +458,7 @@\n-<p>Use additional problem lists file or files, in addition to the default ProblemList.txt located at the JTReg test roots.<\/p>\n-<p>If multiple file names are specified, they should be separated by space (or, to help avoid quoting issues, the special value <code>%20<\/code>).<\/p>\n-<p>The file names should be either absolute, or relative to the JTReg test root of the tests to be run.<\/p>\n+<p>Use additional problem lists file or files, in addition to the\n+default ProblemList.txt located at the JTReg test roots.<\/p>\n+<p>If multiple file names are specified, they should be separated by\n+space (or, to help avoid quoting issues, the special value\n+<code>%20<\/code>).<\/p>\n+<p>The file names should be either absolute, or relative to the JTReg\n+test root of the tests to be run.<\/p>\n@@ -192,1 +467,3 @@\n-<p>Set to <code>true<\/code> or <code>false<\/code>. If <code>true<\/code>, JTReg will use <code>-match:<\/code> option, otherwise <code>-exclude:<\/code> will be used. Default is <code>false<\/code>.<\/p>\n+<p>Set to <code>true<\/code> or <code>false<\/code>. If <code>true<\/code>,\n+JTReg will use <code>-match:<\/code> option, otherwise\n+<code>-exclude:<\/code> will be used. Default is <code>false<\/code>.<\/p>\n@@ -195,1 +472,2 @@\n-<p>Use <code>JTREG=&quot;OPTIONS=--help all&quot;<\/code> to see all available JTReg options.<\/p>\n+<p>Use <code>JTREG=\"OPTIONS=--help all\"<\/code> to see all available\n+JTReg options.<\/p>\n@@ -197,1 +475,2 @@\n-<p>Additional Java options for running test classes (sent to JTReg as <code>-javaoption<\/code>).<\/p>\n+<p>Additional Java options for running test classes (sent to JTReg as\n+<code>-javaoption<\/code>).<\/p>\n@@ -199,2 +478,4 @@\n-<p>Additional Java options to be used when compiling and running classes (sent to JTReg as <code>-vmoption<\/code>).<\/p>\n-<p>This option is only needed in special circumstances. To pass Java options to your test classes, use <code>JAVA_OPTIONS<\/code>.<\/p>\n+<p>Additional Java options to be used when compiling and running classes\n+(sent to JTReg as <code>-vmoption<\/code>).<\/p>\n+<p>This option is only needed in special circumstances. To pass Java\n+options to your test classes, use <code>JAVA_OPTIONS<\/code>.<\/p>\n@@ -202,1 +483,2 @@\n-<p>Additional Java options that are sent to the java launcher that starts the JTReg harness.<\/p>\n+<p>Additional Java options that are sent to the java launcher that\n+starts the JTReg harness.<\/p>\n@@ -204,1 +486,4 @@\n-<p>Generate AOT modules before testing for the specified module, or set of modules. If multiple modules are specified, they should be separated by space (or, to help avoid quoting issues, the special value <code>%20<\/code>).<\/p>\n+<p>Generate AOT modules before testing for the specified module, or set\n+of modules. If multiple modules are specified, they should be separated\n+by space (or, to help avoid quoting issues, the special value\n+<code>%20<\/code>).<\/p>\n@@ -206,1 +491,2 @@\n-<p>Retry failed tests up to a set number of times, until they pass. This allows to pass the tests with intermittent failures. Defaults to 0.<\/p>\n+<p>Retry failed tests up to a set number of times, until they pass. This\n+allows to pass the tests with intermittent failures. Defaults to 0.<\/p>\n@@ -208,1 +494,3 @@\n-<p>Repeat the tests up to a set number of times, stopping at first failure. This helps to reproduce intermittent test failures. Defaults to 0.<\/p>\n+<p>Repeat the tests up to a set number of times, stopping at first\n+failure. This helps to reproduce intermittent test failures. Defaults to\n+0.<\/p>\n@@ -211,2 +499,6 @@\n-<p>The number of times to repeat the tests (<code>--gtest_repeat<\/code>).<\/p>\n-<p>Default is 1. Set to -1 to repeat indefinitely. This can be especially useful combined with <code>OPTIONS=--gtest_break_on_failure<\/code> to reproduce an intermittent problem.<\/p>\n+<p>The number of times to repeat the tests\n+(<code>--gtest_repeat<\/code>).<\/p>\n+<p>Default is 1. Set to -1 to repeat indefinitely. This can be\n+especially useful combined with\n+<code>OPTIONS=--gtest_break_on_failure<\/code> to reproduce an\n+intermittent problem.<\/p>\n@@ -215,1 +507,2 @@\n-<p>Use <code>GTEST=&quot;OPTIONS=--help&quot;<\/code> to see all available Gtest options.<\/p>\n+<p>Use <code>GTEST=\"OPTIONS=--help\"<\/code> to see all available Gtest\n+options.<\/p>\n@@ -217,1 +510,4 @@\n-<p>Generate AOT modules before testing for the specified module, or set of modules. If multiple modules are specified, they should be separated by space (or, to help avoid quoting issues, the special value <code>%20<\/code>).<\/p>\n+<p>Generate AOT modules before testing for the specified module, or set\n+of modules. If multiple modules are specified, they should be separated\n+by space (or, to help avoid quoting issues, the special value\n+<code>%20<\/code>).<\/p>\n@@ -220,1 +516,2 @@\n-<p>Override the number of benchmark forks to spawn. Same as specifying <code>-f &lt;num&gt;<\/code>.<\/p>\n+<p>Override the number of benchmark forks to spawn. Same as specifying\n+<code>-f &lt;num&gt;<\/code>.<\/p>\n@@ -222,1 +519,2 @@\n-<p>Number of measurement iterations per fork. Same as specifying <code>-i &lt;num&gt;<\/code>.<\/p>\n+<p>Number of measurement iterations per fork. Same as specifying\n+<code>-i &lt;num&gt;<\/code>.<\/p>\n@@ -224,1 +522,2 @@\n-<p>Amount of time to spend in each measurement iteration, in seconds. Same as specifying <code>-r &lt;num&gt;<\/code><\/p>\n+<p>Amount of time to spend in each measurement iteration, in seconds.\n+Same as specifying <code>-r &lt;num&gt;<\/code><\/p>\n@@ -226,1 +525,2 @@\n-<p>Number of warmup iterations to run before the measurement phase in each fork. Same as specifying <code>-wi &lt;num&gt;<\/code>.<\/p>\n+<p>Number of warmup iterations to run before the measurement phase in\n+each fork. Same as specifying <code>-wi &lt;num&gt;<\/code>.<\/p>\n@@ -228,1 +528,2 @@\n-<p>Amount of time to spend in each warmup iteration. Same as specifying <code>-w &lt;num&gt;<\/code>.<\/p>\n+<p>Amount of time to spend in each warmup iteration. Same as specifying\n+<code>-w &lt;num&gt;<\/code>.<\/p>\n@@ -230,1 +531,4 @@\n-<p>Specify to have the test run save a log of the values. Accepts the same values as <code>-rff<\/code>, i.e., <code>text<\/code>, <code>csv<\/code>, <code>scsv<\/code>, <code>json<\/code>, or <code>latex<\/code>.<\/p>\n+<p>Specify to have the test run save a log of the values. Accepts the\n+same values as <code>-rff<\/code>, i.e., <code>text<\/code>,\n+<code>csv<\/code>, <code>scsv<\/code>, <code>json<\/code>, or\n+<code>latex<\/code>.<\/p>\n@@ -232,1 +536,2 @@\n-<p>Additional VM arguments to provide to forked off VMs. Same as <code>-jvmArgs &lt;args&gt;<\/code><\/p>\n+<p>Additional VM arguments to provide to forked off VMs. Same as\n+<code>-jvmArgs &lt;args&gt;<\/code><\/p>\n@@ -237,1 +542,4 @@\n-<p>Docker tests with default parameters may fail on systems with glibc versions not compatible with the one used in the default docker image (e.g., Oracle Linux 7.6 for x86). For example, they pass on Ubuntu 16.04 but fail on Ubuntu 18.04 if run like this on x86:<\/p>\n+<p>Docker tests with default parameters may fail on systems with glibc\n+versions not compatible with the one used in the default docker image\n+(e.g., Oracle Linux 7.6 for x86). For example, they pass on Ubuntu 16.04\n+but fail on Ubuntu 18.04 if run like this on x86:<\/p>\n@@ -239,1 +547,3 @@\n-<p>To run these tests correctly, additional parameters for the correct docker image are required on Ubuntu 18.04 by using <code>JAVA_OPTIONS<\/code>.<\/p>\n+<p>To run these tests correctly, additional parameters for the correct\n+docker image are required on Ubuntu 18.04 by using\n+<code>JAVA_OPTIONS<\/code>.<\/p>\n@@ -244,1 +554,6 @@\n-<p>If your locale is non-US, some tests are likely to fail. To work around this you can set the locale to US. On Unix platforms simply setting <code>LANG=&quot;en_US&quot;<\/code> in the environment before running tests should work. On Windows or MacOS, setting <code>JTREG=&quot;VM_OPTIONS=-Duser.language=en -Duser.country=US&quot;<\/code> helps for most, but not all test cases.<\/p>\n+<p>If your locale is non-US, some tests are likely to fail. To work\n+around this you can set the locale to US. On Unix platforms simply\n+setting <code>LANG=\"en_US\"<\/code> in the environment before running\n+tests should work. On Windows or MacOS, setting\n+<code>JTREG=\"VM_OPTIONS=-Duser.language=en -Duser.country=US\"<\/code>\n+helps for most, but not all test cases.<\/p>\n@@ -249,1 +564,8 @@\n-<p>It is highly recommended to use the latest NSS version when running PKCS11 tests. Improper NSS version may lead to unexpected failures which are hard to diagnose. For example, sun\/security\/pkcs11\/Secmod\/AddTrustedCert.java may fail on Ubuntu 18.04 with the default NSS version in the system. To run these tests correctly, the system property <code>test.nss.lib.paths<\/code> is required on Ubuntu 18.04 to specify the alternative NSS lib directories.<\/p>\n+<p>It is highly recommended to use the latest NSS version when running\n+PKCS11 tests. Improper NSS version may lead to unexpected failures which\n+are hard to diagnose. For example,\n+sun\/security\/pkcs11\/Secmod\/AddTrustedCert.java may fail on Ubuntu 18.04\n+with the default NSS version in the system. To run these tests\n+correctly, the system property <code>test.nss.lib.paths<\/code> is\n+required on Ubuntu 18.04 to specify the alternative NSS lib\n+directories.<\/p>\n@@ -253,1 +575,2 @@\n-<p>For more notes about the PKCS11 tests, please refer to test\/jdk\/sun\/security\/pkcs11\/README.<\/p>\n+<p>For more notes about the PKCS11 tests, please refer to\n+test\/jdk\/sun\/security\/pkcs11\/README.<\/p>\n@@ -255,1 +578,5 @@\n-<p>Some Client UI tests use key sequences which may be reserved by the operating system. Usually that causes the test failure. So it is highly recommended to disable system key shortcuts prior testing. The steps to access and disable system key shortcuts for various platforms are provided below.<\/p>\n+<p>Some Client UI tests use key sequences which may be reserved by the\n+operating system. Usually that causes the test failure. So it is highly\n+recommended to disable system key shortcuts prior testing. The steps to\n+access and disable system key shortcuts for various platforms are\n+provided below.<\/p>\n@@ -257,2 +584,10 @@\n-<p>Choose Apple menu; System Preferences, click Keyboard, then click Shortcuts; select or deselect desired shortcut.<\/p>\n-<p>For example, test\/jdk\/javax\/swing\/TooltipManager\/JMenuItemToolTipKeyBindingsTest\/JMenuItemToolTipKeyBindingsTest.java fails on MacOS because it uses <code>CTRL + F1<\/code> key sequence to show or hide tooltip message but the key combination is reserved by the operating system. To run the test correctly the default global key shortcut should be disabled using the steps described above, and then deselect &quot;Turn keyboard access on or off&quot; option which is responsible for <code>CTRL + F1<\/code> combination.<\/p>\n+<p>Choose Apple menu; System Preferences, click Keyboard, then click\n+Shortcuts; select or deselect desired shortcut.<\/p>\n+<p>For example,\n+test\/jdk\/javax\/swing\/TooltipManager\/JMenuItemToolTipKeyBindingsTest\/JMenuItemToolTipKeyBindingsTest.java\n+fails on MacOS because it uses <code>CTRL + F1<\/code> key sequence to\n+show or hide tooltip message but the key combination is reserved by the\n+operating system. To run the test correctly the default global key\n+shortcut should be disabled using the steps described above, and then\n+deselect \"Turn keyboard access on or off\" option which is responsible\n+for <code>CTRL + F1<\/code> combination.<\/p>\n@@ -260,1 +595,3 @@\n-<p>Open the Activities overview and start typing Settings; Choose Settings, click Devices, then click Keyboard; set or override desired shortcut.<\/p>\n+<p>Open the Activities overview and start typing Settings; Choose\n+Settings, click Devices, then click Keyboard; set or override desired\n+shortcut.<\/p>\n@@ -262,1 +599,5 @@\n-<p>Type <code>gpedit<\/code> in the Search and then click Edit group policy; navigate to User Configuration -&gt; Administrative Templates -&gt; Windows Components -&gt; File Explorer; in the right-side pane look for &quot;Turn off Windows key hotkeys&quot; and double click on it; enable or disable hotkeys.<\/p>\n+<p>Type <code>gpedit<\/code> in the Search and then click Edit group\n+policy; navigate to User Configuration -&gt; Administrative Templates\n+-&gt; Windows Components -&gt; File Explorer; in the right-side pane\n+look for \"Turn off Windows key hotkeys\" and double click on it; enable\n+or disable hotkeys.<\/p>\n@@ -265,1 +606,4 @@\n-<p>If you want to contribute changes to this document, edit <code>doc\/testing.md<\/code> and then run <code>make update-build-docs<\/code> to generate the same changes in <code>doc\/testing.html<\/code>.<\/p>\n+<p>If you want to contribute changes to this document, edit\n+<code>doc\/testing.md<\/code> and then run\n+<code>make update-build-docs<\/code> to generate the same changes in\n+<code>doc\/testing.html<\/code>.<\/p>\n","filename":"doc\/testing.html","additions":470,"deletions":126,"binary":false,"changes":596,"status":"modified"}]}