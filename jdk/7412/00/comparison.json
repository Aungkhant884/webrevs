{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -592,0 +592,4 @@\n+            if (checkIncrement(iPart, compactDataIndex, divisor)) {\n+                divisor = (Long) divisors.get(++compactDataIndex);\n+                iPart = getIntegerPart(number, divisor);\n+            }\n@@ -661,0 +665,4 @@\n+            if (checkIncrement(iPart, compactDataIndex, divisor)) {\n+                divisor = (Long) divisors.get(++compactDataIndex);\n+                iPart = getIntegerPart(number, divisor);\n+            }\n@@ -756,0 +764,4 @@\n+            if (checkIncrement(iPart, compactDataIndex, divisor.doubleValue())) {\n+                divisor = divisors.get(++compactDataIndex);\n+                iPart = getIntegerPart(number.doubleValue(), divisor.doubleValue());\n+            }\n@@ -823,0 +835,4 @@\n+            if (checkIncrement(iPart, compactDataIndex, divisor.doubleValue())) {\n+                divisor = divisors.get(++compactDataIndex);\n+                iPart = getIntegerPart(number.doubleValue(), divisor.doubleValue());\n+            }\n@@ -878,1 +894,1 @@\n-     * @param result the resulting string, where the pefix is to be appended\n+     * @param result the resulting string, where the prefix is to be appended\n@@ -913,1 +929,1 @@\n-     * @param positions a list of {@code FieldPostion} in the given\n+     * @param positions a list of {@code FieldPosition} in the given\n@@ -959,1 +975,1 @@\n-     * Returns a list of {@code FieldPostion} in the given {@code pattern}.\n+     * Returns a list of {@code FieldPosition} in the given {@code pattern}.\n@@ -962,1 +978,1 @@\n-     * @return a list of {@code FieldPostion}\n+     * @return a list of {@code FieldPosition}\n@@ -1772,1 +1788,1 @@\n-                \/\/ Check if a double can be represeneted as a long\n+                \/\/ Check if a double can be represented as a long\n@@ -2399,0 +2415,13 @@\n+    \/\/ Checks whether the iPart is incremented by the BigDecimal division in\n+    \/\/ getIntegerPart(), and affects the compact number index.\n+    private boolean checkIncrement(int iPart, int index, double divisor) {\n+        if (index < compactPatterns.length - 1 &&\n+            !\"\".equals(compactPatterns[index])) { \/\/ ignore empty pattern\n+            var nextDiv = divisors.get(index + 1).doubleValue();\n+            if (divisor != nextDiv) {\n+                return Math.log10(iPart) == Math.log10(nextDiv) - Math.log10(divisor);\n+            }\n+        }\n+        return false;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":35,"deletions":6,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 8177552 8217254 8251499\n+ * @bug 8177552 8217254 8251499 8281317\n@@ -104,2 +104,3 @@\n-            {COMPACT_PATTERN8, List.of(new BigInteger(\"223565686837667632\"), new BigDecimal(\"12322456774334.89766\"), 30000, 3456.78),\n-                    List.of(\"223566T\", \"12T\", \"30K\", \"3K\")},\n+            {COMPACT_PATTERN8, List.of(new BigInteger(\"223565686837667632\"), new BigDecimal(\"12322456774334.89766\"), 30000, 3456.78,\n+                    new BigInteger(\"999999999999\"), new BigDecimal(\"999999999999.0\"), 999_999),\n+                    List.of(\"223566T\", \"12T\", \"30K\", \"3K\", \"1T\", \"1T\", \"1M\")},\n@@ -113,1 +114,2 @@\n-            {COMPACT_PATTERN13, List.of(1000, new BigInteger(\"10000000000000000000\")), List.of(\"Thousand\", \"BeyondLong\")},\n+            {COMPACT_PATTERN13, List.of(1000, new BigInteger(\"10000000000000000000\"), new BigDecimal(\"9999999999999999999.9\")),\n+                    List.of(\"Thousand\", \"BeyondLong\", \"BeyondLong\")},\n","filename":"test\/jdk\/java\/text\/Format\/CompactNumberFormat\/TestCompactPatternsValidity.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}