{"files":[{"patch":"@@ -878,0 +878,1 @@\n+                e.setMethod(ZipEntry.STORED);\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Main.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2022, Alphabet LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8297875\n+ * @summary jar should not compress the manifest directory entry\n+ * @modules jdk.jartool\n+ * @run testng ManifestDirectoryCompression\n+ *\/\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.fail;\n+\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.jar.JarFile;\n+import java.util.spi.ToolProvider;\n+import java.util.stream.Stream;\n+import java.util.zip.ZipEntry;\n+\n+public class ManifestDirectoryCompression {\n+    private static final ToolProvider JAR_TOOL =\n+            ToolProvider.findFirst(\"jar\")\n+                    .orElseThrow(() -> new RuntimeException(\"jar tool not found\"));\n+\n+    private Path tempDir;\n+\n+    @BeforeMethod\n+    private void setUp() throws Exception {\n+        tempDir = Files.createTempDirectory(\"temp\");\n+    }\n+\n+    \/** Remove dirs & files needed for test. *\/\n+    @AfterMethod\n+    private void cleanup() {\n+        deleteRecursively(tempDir);\n+    }\n+\n+    private static void deleteRecursively(Path path) {\n+        try {\n+            if (Files.isDirectory(path)) {\n+                try (Stream<Path> s = Files.list(path)) {\n+                    s.forEach(p -> deleteRecursively(p));\n+                }\n+            }\n+            Files.delete(path);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @Test\n+    public void run() throws Exception {\n+        Path entryPath = Files.writeString(tempDir.resolve(\"test.txt\"), \"Some text...\");\n+        Path jar = tempDir.resolve(\"test.jar\");\n+        String[] jarArgs = new String[] {\"cf\", jar.toString(), entryPath.toString()};\n+        if (JAR_TOOL.run(System.out, System.err, jarArgs) != 0) {\n+            fail(\"Could not create jar file: \" + List.of(jarArgs));\n+        }\n+        try (JarFile jarFile = new JarFile(jar.toFile())) {\n+            ZipEntry zipEntry = jarFile.getEntry(\"META-INF\/\");\n+            assertNotNull(zipEntry);\n+            assertEquals(zipEntry.getMethod(), ZipEntry.STORED);\n+            assertEquals(zipEntry.getSize(), 0);\n+            assertEquals(zipEntry.getCompressedSize(), 0);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jar\/ManifestDirectoryCompression.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}