{"files":[{"patch":"@@ -1679,5 +1679,12 @@\n-    if (d != NULL && d->getd() == 2.0) {\n-      \/\/ Special case: pow(x, 2.0) => x * x\n-      Node* base = round_double_node(argument(0));\n-      set_result(_gvn.transform(new MulDNode(base, base)));\n-      return true;\n+    if (d != NULL) {\n+      if (d->getd() == 2.0) {\n+        \/\/ Special case: pow(x, 2.0) => x * x\n+        Node* base = round_double_node(argument(0));\n+        set_result(_gvn.transform(new MulDNode(base, base)));\n+        return true;\n+      } else if (d->getd() == 0.5 && Matcher::match_rule_supported(Op_SqrtD)) {\n+        \/\/ Special case: pow(x, 0.5) => sqrt(x)\n+        Node* base = round_double_node(argument(0));\n+        set_result(_gvn.transform(new SqrtDNode(C, control(), base)));\n+        return true;\n+      }\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -411,0 +411,16 @@\n+    @Benchmark\n+    public double  powDouble0Dot5() {\n+        return  Math.pow(double4Dot1, 0.5);\n+    }\n+\n+    @Benchmark\n+    public double  powDouble0Dot5Loop() {\n+        double sum = 0.0;\n+        for (int i = 0; i < 1000; i++) {\n+            for (int j = 0; j < 1000; j++) {\n+                sum += i + Math.pow(j * 1.0, 0.5);\n+            }\n+        }\n+        return sum;\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/MathBench.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}