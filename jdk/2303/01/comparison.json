{"files":[{"patch":"@@ -35,2 +35,2 @@\n- * interface {@code T}, then an annotation of type {@code T} may be written as\n- * a modifier for any declaration except a type parameter declaration.\n+ * interface {@code T}, then an annotation of type {@code T} is applicable\n+ * in all declaration contexts and all type contexts.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/annotation\/Target.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -179,5 +179,6 @@\n-        return (targets == null) ?\n-                AnnotationType.DECLARATION :\n-                targets.stream()\n-                        .map(attr -> targetToAnnotationType(attr, s))\n-                        .reduce(AnnotationType.NONE, this::combineAnnotationType);\n+        if (targets == null) {\n+            return typeAnnotationAdmissible(s) ? AnnotationType.BOTH : AnnotationType.DECLARATION;\n+        }\n+        return targets.stream()\n+                .map(attr -> targetToAnnotationType(attr, s))\n+                .reduce(AnnotationType.NONE, this::combineAnnotationType);\n@@ -233,5 +234,1 @@\n-            if (s.kind == TYP ||\n-                    s.kind == VAR ||\n-                    (s.kind == MTH && !s.isConstructor() &&\n-                    !s.type.getReturnType().hasTag(TypeTag.VOID)) ||\n-                    (s.kind == MTH && s.isConstructor()))\n+            if (typeAnnotationAdmissible(s))\n@@ -255,0 +252,13 @@\n+    \/**\n+     * Returns true for symbols that are valid type annotation contexts.\n+     * Includes types, variables, non-void methods, and constructors.\n+     *\/\n+    private boolean typeAnnotationAdmissible(Symbol s) {\n+        return s.kind == TYP ||\n+                s.kind == VAR ||\n+                (s.kind == MTH && !s.isConstructor() &&\n+                !s.type.getReturnType().hasTag(TypeTag.VOID)) ||\n+                (s.kind == MTH && s.isConstructor());\n+\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/TypeAnnotations.java","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -120,3 +120,0 @@\n-        dfltTargetMeta = new Name[] { names.PACKAGE, names.TYPE,\n-            names.FIELD, names.RECORD_COMPONENT, names.METHOD, names.CONSTRUCTOR,\n-            names.ANNOTATION_TYPE, names.LOCAL_VARIABLE, names.PARAMETER, names.MODULE };\n@@ -162,0 +159,2 @@\n+        allowTypeAnnotations = Feature.TYPE_ANNOTATIONS.allowedInSource(source);\n+        allowModules = Feature.MODULES.allowedInSource(source);\n@@ -196,0 +195,8 @@\n+    \/** Are type annotations allowed\n+     *\/\n+    private final boolean allowTypeAnnotations;\n+\n+    \/** Are modules allowed\n+     *\/\n+    private final boolean allowModules;\n+\n@@ -3199,14 +3206,1 @@\n-            Set<Name> targets = new HashSet<>();\n-            targets.add(names.ANNOTATION_TYPE);\n-            targets.add(names.CONSTRUCTOR);\n-            targets.add(names.FIELD);\n-            if (allowRecords) {\n-                targets.add(names.RECORD_COMPONENT);\n-            }\n-            targets.add(names.LOCAL_VARIABLE);\n-            targets.add(names.METHOD);\n-            targets.add(names.PACKAGE);\n-            targets.add(names.PARAMETER);\n-            targets.add(names.TYPE);\n-\n-            defaultTargets = java.util.Collections.unmodifiableSet(targets);\n+            defaultTargets = Set.of(defaultTargetMetaInfo());\n@@ -3284,3 +3278,2 @@\n-        return (targets == null) ?\n-                false :\n-                targets.stream()\n+        return targets == null\n+                || targets.stream()\n@@ -3416,1 +3409,1 @@\n-    public final Name[] dfltTargetMeta;\n+    private Name[] dfltTargetMeta;\n@@ -3418,0 +3411,22 @@\n+        if (dfltTargetMeta == null) {\n+            ArrayList<Name> defaultTargets = new ArrayList<>();\n+            defaultTargets.add(names.PACKAGE);\n+            defaultTargets.add(names.TYPE);\n+            defaultTargets.add(names.FIELD);\n+            defaultTargets.add(names.METHOD);\n+            defaultTargets.add(names.CONSTRUCTOR);\n+            defaultTargets.add(names.ANNOTATION_TYPE);\n+            defaultTargets.add(names.LOCAL_VARIABLE);\n+            defaultTargets.add(names.PARAMETER);\n+            if (allowRecords) {\n+                defaultTargets.add(names.RECORD_COMPONENT);\n+            }\n+            if (allowModules) {\n+                defaultTargets.add(names.MODULE);\n+            }\n+            if (allowTypeAnnotations) {\n+                defaultTargets.add(names.TYPE_USE);\n+                defaultTargets.add(names.TYPE_PARAMETER);\n+            }\n+            dfltTargetMeta = defaultTargets.toArray(new Name[0]);\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":36,"deletions":21,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -31,0 +31,10 @@\n+@Target({\n+    ElementType.TYPE,\n+    ElementType.FIELD,\n+    ElementType.METHOD,\n+    ElementType.PARAMETER,\n+    ElementType.CONSTRUCTOR,\n+    ElementType.LOCAL_VARIABLE,\n+    ElementType.ANNOTATION_TYPE,\n+    ElementType.PACKAGE,\n+})\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testNewLanguageFeatures\/pkg\/AnnotationType.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,0 +32,10 @@\n+@Target({\n+    ElementType.TYPE,\n+    ElementType.FIELD,\n+    ElementType.METHOD,\n+    ElementType.PARAMETER,\n+    ElementType.CONSTRUCTOR,\n+    ElementType.LOCAL_VARIABLE,\n+    ElementType.ANNOTATION_TYPE,\n+    ElementType.PACKAGE,\n+})\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testNewLanguageFeatures\/pkg\/AnnotationTypeUndocumented.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -426,0 +426,3 @@\n+            if (set.isEmpty()) {\n+                continue;\n+            }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testRecordTypes\/TestRecordTypes.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -6,2 +6,1 @@\n-TypeUseTargetNeg.java:92:1: compiler.err.invalid.repeatable.annotation.incompatible.target: QuuuxContainer, Quuux\n-6 errors\n+5 errors\n","filename":"test\/langtools\/tools\/javac\/annotations\/repeatingAnnotations\/8029017\/TypeUseTargetNeg.out","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -5,2 +5,2 @@\n- * @bug 8006547\n- * @compile\/fail\/ref=DefaultTargetTypeParameter.out -XDrawDiagnostics DefaultTargetTypeParameter.java\n+ * @bug 8006547 8231436\n+ * @compile DefaultTargetTypeParameter.java\n","filename":"test\/langtools\/tools\/javac\/annotations\/repeatingAnnotations\/DefaultTargetTypeParameter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,2 +0,0 @@\n-DefaultTargetTypeParameter.java:16:1: compiler.err.invalid.repeatable.annotation.incompatible.target: Container, DefaultTargetTypeParameter\n-1 error\n","filename":"test\/langtools\/tools\/javac\/annotations\/repeatingAnnotations\/DefaultTargetTypeParameter.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -5,2 +5,2 @@\n- * @bug 8006547\n- * @compile\/fail\/ref=DefaultTargetTypeUse.out -XDrawDiagnostics DefaultTargetTypeUse.java\n+ * @bug 8006547 8231436\n+ * @compile DefaultTargetTypeUse.java\n","filename":"test\/langtools\/tools\/javac\/annotations\/repeatingAnnotations\/DefaultTargetTypeUse.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,2 +0,0 @@\n-DefaultTargetTypeUse.java:16:1: compiler.err.invalid.repeatable.annotation.incompatible.target: Container, DefaultTargetTypeUse\n-1 error\n","filename":"test\/langtools\/tools\/javac\/annotations\/repeatingAnnotations\/DefaultTargetTypeUse.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -28,1 +28,1 @@\n- * @bug 8006547\n+ * @bug 8006547 8261088\n@@ -45,1 +45,4 @@\n-    ElementType.RECORD_COMPONENT\n+    ElementType.RECORD_COMPONENT,\n+    ElementType.MODULE,\n+    ElementType.TYPE_USE,\n+    ElementType.TYPE_PARAMETER,\n","filename":"test\/langtools\/tools\/javac\/annotations\/repeatingAnnotations\/NoTargetOnContainer.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @bug 8006547\n+ * @bug 8006547 8261088\n@@ -47,1 +47,2 @@\n-    ElementType.RECORD_COMPONENT\n+    ElementType.RECORD_COMPONENT,\n+    ElementType.MODULE,\n","filename":"test\/langtools\/tools\/javac\/annotations\/repeatingAnnotations\/NoTargetOnContainer2.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug      7151010 8006547 8007766 8029017 8246774\n+ * @bug      7151010 8006547 8007766 8029017 8246774 8231436\n@@ -69,1 +69,1 @@\n-    \/\/ PACKAGE, TYPE_PARAMETER, TYPE_USE, RECORD_COMPONENT]\n+    \/\/ PACKAGE, TYPE_PARAMETER, TYPE_USE, MODULE, RECORD_COMPONENT]\n@@ -147,5 +147,1 @@\n-                if (containerAnnotations == null) {\n-                    return true;\n-                }\n-                return !(containerAnnotations.contains(TYPE_USE) ||\n-                         containerAnnotations.contains(TYPE_PARAMETER));\n+                return true;\n@@ -172,1 +168,5 @@\n-                return tempBaseSet.containsAll(jdk7);\n+                if (source8.equals(options)) {\n+                    return tempBaseSet.containsAll(jdk7) && tempBaseSet.containsAll(jdk8);\n+                } else {\n+                    return tempBaseSet.containsAll(allTargets);\n+                }\n@@ -387,3 +387,1 @@\n-            Set<ElementType> copySet = EnumSet.noneOf(ElementType.class);\n-            copySet.addAll(jdk7);\n-            conAnnoTarget = copySet;\n+            conAnnoTarget = EnumSet.copyOf(allTargets);\n","filename":"test\/langtools\/tools\/javac\/annotations\/repeatingAnnotations\/combo\/TargetAnnoCombo.java","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @bug 8231436\n@@ -35,1 +36,1 @@\n- *          only once as declaration annotation\n+ *          as both a declaration and type annotation\n@@ -194,1 +195,1 @@\n-    static int expected_visibles = 0;\n+    static int expected_visibles = 1;\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/NoTargetAnnotations.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -8,0 +8,2 @@\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n@@ -10,0 +12,1 @@\n+    @Target(ElementType.METHOD)\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/AnnotatedMethodSelectorTest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-AnnotatedMethodSelectorTest.java:12:19: compiler.err.annotation.type.not.applicable.to.type: AnnotatedMethodSelectorTest.A\n+AnnotatedMethodSelectorTest.java:15:19: compiler.err.annotation.type.not.applicable.to.type: AnnotatedMethodSelectorTest.A\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/AnnotatedMethodSelectorTest.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,0 +8,3 @@\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n@@ -9,0 +12,1 @@\n+    @Target(ElementType.METHOD)\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/AnnotatedMethodSelectorTest2.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,2 +1,2 @@\n-AnnotatedMethodSelectorTest2.java:12:42: compiler.err.annotation.type.not.applicable.to.type: AnnotatedMethodSelectorTest2.A\n-AnnotatedMethodSelectorTest2.java:13:23: compiler.err.annotation.type.not.applicable.to.type: AnnotatedMethodSelectorTest2.A\n+AnnotatedMethodSelectorTest2.java:16:42: compiler.err.annotation.type.not.applicable.to.type: AnnotatedMethodSelectorTest2.A\n+AnnotatedMethodSelectorTest2.java:17:23: compiler.err.annotation.type.not.applicable.to.type: AnnotatedMethodSelectorTest2.A\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/AnnotatedMethodSelectorTest2.out","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,0 +8,2 @@\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n@@ -10,0 +12,1 @@\n+    @Target(ElementType.METHOD)\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/AnnotatedMethodSelectorTest3.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-AnnotatedMethodSelectorTest3.java:15:39: compiler.err.annotation.type.not.applicable.to.type: AnnotatedMethodSelectorTest3.A\n+AnnotatedMethodSelectorTest3.java:18:39: compiler.err.annotation.type.not.applicable.to.type: AnnotatedMethodSelectorTest3.A\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/AnnotatedMethodSelectorTest3.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9,0 +9,4 @@\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n@@ -16,0 +20,1 @@\n+@Target(ElementType.METHOD)\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/common\/arrays\/DeclarationAnnotation.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,4 +1,4 @@\n-DeclarationAnnotation.java:13:21: compiler.err.annotation.type.not.applicable.to.type: DA\n-DeclarationAnnotation.java:10:21: compiler.err.annotation.type.not.applicable.to.type: DA\n-DeclarationAnnotation.java:11:21: compiler.err.annotation.type.not.applicable.to.type: DA\n-DeclarationAnnotation.java:12:21: compiler.err.annotation.type.not.applicable.to.type: DA\n+DeclarationAnnotation.java:17:21: compiler.err.annotation.type.not.applicable.to.type: DA\n+DeclarationAnnotation.java:14:21: compiler.err.annotation.type.not.applicable.to.type: DA\n+DeclarationAnnotation.java:15:21: compiler.err.annotation.type.not.applicable.to.type: DA\n+DeclarationAnnotation.java:16:21: compiler.err.annotation.type.not.applicable.to.type: DA\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/common\/arrays\/DeclarationAnnotation.out","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -4,2 +4,1 @@\n-BrokenAnnotation.java:15:34: compiler.err.annotation.type.not.applicable.to.type: BrokenAnnotation.A\n-4 errors\n+3 errors\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/common\/parambounds\/BrokenAnnotation.out","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * @ignore 8261197\n@@ -18,0 +19,1 @@\n+@Target(ElementType.PARAMETER)\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/common\/receiver\/DeclarationAnnotation.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-DeclarationAnnotation.java:14:14: compiler.err.annotation.type.not.applicable.to.type: DA\n+DeclarationAnnotation.java:14:14: compiler.err.annotation.type.not.applicable: DA\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/common\/receiver\/DeclarationAnnotation.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -19,0 +19,1 @@\n+@Target(ElementType.METHOD)\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/common\/wildcards\/DeclarationAnnotation.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-    @TADescriptions({})\n+    @TADescription(annotation = \"A\", type = FIELD)\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/Fields.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-    @TADescriptions({})\n+    @TADescription(annotation = \"A\", type = METHOD_FORMAL_PARAMETER, paramIndex = 0)\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MethodParameters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-    @TADescriptions({})\n+    @TADescription(annotation = \"A\", type = METHOD_RETURN)\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MethodReturns.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -620,1 +620,1 @@\n-                                List.of(\"i:int\", \"super:java.lang.Record\", \"this:Test\"),\n+                                List.of(\"i:@Annotation int\", \"super:java.lang.Record\", \"this:Test\"),\n","filename":"test\/langtools\/tools\/javac\/api\/TestGetScopeResult.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,3 @@\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n@@ -27,0 +30,1 @@\n+    @Target(ElementType.METHOD)\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/TypeAnnoNotApplicableInTypeContext.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,0 +24,5 @@\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+@Target(ElementType.LOCAL_VARIABLE)\n+\n","filename":"test\/langtools\/tools\/javac\/lvti\/harness\/InferredType.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -221,0 +221,1 @@\n+                           \"@Target({ElementType.TYPE, ElementType.PARAMETER}) \" +\n@@ -222,0 +223,1 @@\n+                           \"@Target({ElementType.TYPE, ElementType.PARAMETER}) \" +\n@@ -226,0 +228,1 @@\n+                           \"@Target({ElementType.TYPE, ElementType.PARAMETER}) \" +\n@@ -227,0 +230,1 @@\n+                           \"@Target({ElementType.TYPE, ElementType.PARAMETER}) \" +\n@@ -238,0 +242,1 @@\n+                           \"@java.lang.annotation.Target({TYPE, PARAMETER})\\n\" +\n@@ -247,0 +252,1 @@\n+                           \"@Target({ElementType.TYPE, ElementType.PARAMETER}) \" +\n@@ -248,0 +254,1 @@\n+                           \"@Target({ElementType.TYPE, ElementType.PARAMETER}) \" +\n@@ -256,0 +263,1 @@\n+                           \"@Target({ElementType.TYPE, ElementType.PARAMETER}) \" +\n@@ -257,0 +265,1 @@\n+                           \"@Target({ElementType.TYPE, ElementType.PARAMETER}) \" +\n@@ -269,0 +278,1 @@\n+                           \"@java.lang.annotation.Target({TYPE, PARAMETER})\\n\" +\n@@ -277,0 +287,1 @@\n+                           \"@Target({ElementType.TYPE, ElementType.PARAMETER}) \" +\n@@ -489,0 +500,1 @@\n+                           \"import java.lang.annotation.*; \" +\n@@ -491,0 +503,2 @@\n+                           \"    @Target({ElementType.RECORD_COMPONENT, ElementType.PARAMETER, \" +\n+                           \"             ElementType.METHOD}) \" +\n","filename":"test\/langtools\/tools\/javac\/platform\/createsymbols\/CreateSymbolsTestImpl.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+    @Target({ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.RECORD_COMPONENT})\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/RecordNotPreservingNestedTypeAnnotationsTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -384,0 +384,1 @@\n+    @Target({ElementType.TYPE, ElementType.FIELD, ElementType.METHOD})\n@@ -394,0 +395,1 @@\n+    @Target({ElementType.TYPE, ElementType.FIELD, ElementType.METHOD})\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/type\/BasicAnnoTests.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}