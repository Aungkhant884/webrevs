{"files":[{"patch":"@@ -126,29 +126,23 @@\n-            try {\n-                \/\/ Universal Non-Real-Time SysEx\n-                if ((data[1] & 0xFF) == 0x7E) {\n-                    int deviceID = data[2] & 0xFF;\n-                    if (deviceID == 0x7F || deviceID == synth.getDeviceID()) {\n-                        int subid1 = data[3] & 0xFF;\n-                        int subid2;\n-                        switch (subid1) {\n-                            case 0x08:  \/\/ MIDI Tuning Standard\n-                                subid2 = data[4] & 0xFF;\n-                                switch (subid2) {\n-                                    case 0x01:  \/\/ BULK TUNING DUMP\n-                                    {\n-                                        \/\/ http:\/\/www.midi.org\/about-midi\/tuning.shtml\n-                                        SoftTuning tuning = synth.getTuning(new Patch(0,\n-                                                data[5] & 0xFF));\n-                                        tuning.load(data);\n-                                        break;\n-                                    }\n-                                    case 0x04:  \/\/ KEY-BASED TUNING DUMP\n-                                    case 0x05:  \/\/ SCALE\/OCTAVE TUNING DUMP, 1 byte format\n-                                    case 0x06:  \/\/ SCALE\/OCTAVE TUNING DUMP, 2 byte format\n-                                    case 0x07:  \/\/ SINGLE NOTE TUNING CHANGE (NON REAL-TIME)\n-                                        \/\/ (BANK)\n-                                    {\n-                                        \/\/ http:\/\/www.midi.org\/about-midi\/tuning_extens.shtml\n-                                        SoftTuning tuning = synth.getTuning(new Patch(\n-                                                data[5] & 0xFF, data[6] & 0xFF));\n-                                        tuning.load(data);\n+            if (data.length < 3 || (data[1] & 0xFF) != 0x7E && (data[1] & 0xFF) != 0x7F ) {\n+                \/\/ Not enough data to determine SysEx type or SysEx type is not supported\n+                return;\n+            }\n+            \/\/ Universal Non-Real-Time SysEx\n+            if ((data[1] & 0xFF) == 0x7E) {\n+                int deviceID = data[2] & 0xFF;\n+                if (deviceID == 0x7F || deviceID == synth.getDeviceID()) {\n+                    if (data.length < 4) {\n+                        return;\n+                    }\n+                    int subid1 = data[3] & 0xFF;\n+                    int subid2;\n+                    switch (subid1) {\n+                        case 0x08:  \/\/ MIDI Tuning Standard\n+                            if (data.length < 5) {\n+                                break;\n+                            }\n+                            subid2 = data[4] & 0xFF;\n+                            switch (subid2) {\n+                                case 0x01:  \/\/ BULK TUNING DUMP\n+                                {\n+                                    if (data.length < 6) {\n@@ -157,13 +151,13 @@\n-                                    case 0x08:  \/\/ scale\/octave tuning 1-byte form (Non\n-                                        \/\/ Real-Time)\n-                                    case 0x09:  \/\/ scale\/octave tuning 2-byte form (Non\n-                                        \/\/ Real-Time)\n-                                    {\n-                                        \/\/ http:\/\/www.midi.org\/about-midi\/tuning-scale.shtml\n-                                        SoftTuning tuning = new SoftTuning(data);\n-                                        int channelmask = (data[5] & 0xFF) * 16384\n-                                                + (data[6] & 0xFF) * 128 + (data[7] & 0xFF);\n-                                        SoftChannel[] channels = synth.channels;\n-                                        for (int i = 0; i < channels.length; i++)\n-                                            if ((channelmask & (1 << i)) != 0)\n-                                                channels[i].tuning = tuning;\n+                                    \/\/ http:\/\/www.midi.org\/about-midi\/tuning.shtml\n+                                    SoftTuning tuning = synth.getTuning(new Patch(0,\n+                                            data[5] & 0xFF));\n+                                    tuning.load(data);\n+                                    break;\n+                                }\n+                                case 0x04:  \/\/ KEY-BASED TUNING DUMP\n+                                case 0x05:  \/\/ SCALE\/OCTAVE TUNING DUMP, 1 byte format\n+                                case 0x06:  \/\/ SCALE\/OCTAVE TUNING DUMP, 2 byte format\n+                                case 0x07:  \/\/ SINGLE NOTE TUNING CHANGE (NON REAL-TIME)\n+                                    \/\/ (BANK)\n+                                {\n+                                    if (data.length < 7) {\n@@ -172,2 +166,5 @@\n-                                    default:\n-                                        break;\n+                                    \/\/ http:\/\/www.midi.org\/about-midi\/tuning_extens.shtml\n+                                    SoftTuning tuning = synth.getTuning(new Patch(\n+                                            data[5] & 0xFF, data[6] & 0xFF));\n+                                    tuning.load(data); \/\/ Check inside!\n+                                    break;\n@@ -175,17 +172,6 @@\n-                                break;\n-                            case 0x09:  \/\/ General Midi Message\n-                                subid2 = data[4] & 0xFF;\n-                                switch (subid2) {\n-                                    case 0x01:  \/\/ General Midi 1 On\n-                                        synth.setGeneralMidiMode(1);\n-                                        reset();\n-                                        break;\n-                                    case 0x02:  \/\/ General Midi Off\n-                                        synth.setGeneralMidiMode(0);\n-                                        reset();\n-                                        break;\n-                                    case 0x03:  \/\/ General MidI Level 2 On\n-                                        synth.setGeneralMidiMode(2);\n-                                        reset();\n-                                        break;\n-                                    default:\n+                                case 0x08:  \/\/ scale\/octave tuning 1-byte form (Non\n+                                    \/\/ Real-Time)\n+                                case 0x09:  \/\/ scale\/octave tuning 2-byte form (Non\n+                                    \/\/ Real-Time)\n+                                {\n+                                    if (data.length < 8) {\n@@ -193,0 +179,10 @@\n+                                    }\n+                                    \/\/ http:\/\/www.midi.org\/about-midi\/tuning-scale.shtml\n+                                    SoftTuning tuning = new SoftTuning(data);\n+                                    int channelmask = (data[5] & 0xFF) * 16384\n+                                            + (data[6] & 0xFF) * 128 + (data[7] & 0xFF);\n+                                    SoftChannel[] channels = synth.channels;\n+                                    for (int i = 0; i < channels.length; i++)\n+                                        if ((channelmask & (1 << i)) != 0)\n+                                            channels[i].tuning = tuning;\n+                                    break;\n@@ -194,0 +190,6 @@\n+                                default:\n+                                    break;\n+                            }\n+                            break;\n+                        case 0x09:  \/\/ General Midi Message\n+                            if (data.length < 5) {\n@@ -195,23 +197,21 @@\n-                            case 0x0A: \/\/ DLS Message\n-                                subid2 = data[4] & 0xFF;\n-                                switch (subid2) {\n-                                    case 0x01:  \/\/ DLS On\n-                                        if (synth.getGeneralMidiMode() == 0)\n-                                            synth.setGeneralMidiMode(1);\n-                                        synth.voice_allocation_mode = 1;\n-                                        reset();\n-                                        break;\n-                                    case 0x02:  \/\/ DLS Off\n-                                        synth.setGeneralMidiMode(0);\n-                                        synth.voice_allocation_mode = 0;\n-                                        reset();\n-                                        break;\n-                                    case 0x03:  \/\/ DLS Static Voice Allocation Off\n-                                        synth.voice_allocation_mode = 0;\n-                                        break;\n-                                    case 0x04:  \/\/ DLS Static Voice Allocation On\n-                                        synth.voice_allocation_mode = 1;\n-                                        break;\n-                                    default:\n-                                        break;\n-                                }\n+                            }\n+                            subid2 = data[4] & 0xFF;\n+                            switch (subid2) {\n+                                case 0x01:  \/\/ General Midi 1 On\n+                                    synth.setGeneralMidiMode(1);\n+                                    reset();\n+                                    break;\n+                                case 0x02:  \/\/ General Midi Off\n+                                    synth.setGeneralMidiMode(0);\n+                                    reset();\n+                                    break;\n+                                case 0x03:  \/\/ General MidI Level 2 On\n+                                    synth.setGeneralMidiMode(2);\n+                                    reset();\n+                                    break;\n+                                default:\n+                                    break;\n+                            }\n+                            break;\n+                        case 0x0A: \/\/ DLS Message\n+                            if (data.length < 5) {\n@@ -219,0 +219,24 @@\n+                            }\n+                            subid2 = data[4] & 0xFF;\n+                            switch (subid2) {\n+                                case 0x01:  \/\/ DLS On\n+                                    if (synth.getGeneralMidiMode() == 0)\n+                                        synth.setGeneralMidiMode(1);\n+                                    synth.voice_allocation_mode = 1;\n+                                    reset();\n+                                    break;\n+                                case 0x02:  \/\/ DLS Off\n+                                    synth.setGeneralMidiMode(0);\n+                                    synth.voice_allocation_mode = 0;\n+                                    reset();\n+                                    break;\n+                                case 0x03:  \/\/ DLS Static Voice Allocation Off\n+                                    synth.voice_allocation_mode = 0;\n+                                    break;\n+                                case 0x04:  \/\/ DLS Static Voice Allocation On\n+                                    synth.voice_allocation_mode = 1;\n+                                    break;\n+                                default:\n+                                    break;\n+                            }\n+                            break;\n@@ -220,3 +244,2 @@\n-                            default:\n-                                break;\n-                        }\n+                        default:\n+                            break;\n@@ -225,0 +248,1 @@\n+            }\n@@ -226,56 +250,12 @@\n-                \/\/ Universal Real-Time SysEx\n-                if ((data[1] & 0xFF) == 0x7F) {\n-                    int deviceID = data[2] & 0xFF;\n-                    if (deviceID == 0x7F || deviceID == synth.getDeviceID()) {\n-                        int subid1 = data[3] & 0xFF;\n-                        int subid2;\n-                        switch (subid1) {\n-                            case 0x04: \/\/ Device Control\n-\n-                                subid2 = data[4] & 0xFF;\n-                                switch (subid2) {\n-                                    case 0x01: \/\/ Master Volume\n-                                    case 0x02: \/\/ Master Balane\n-                                    case 0x03: \/\/ Master fine tuning\n-                                    case 0x04: \/\/ Master coarse tuning\n-                                        int val = (data[5] & 0x7F)\n-                                                + ((data[6] & 0x7F) * 128);\n-                                        if (subid2 == 0x01)\n-                                            setVolume(val);\n-                                        else if (subid2 == 0x02)\n-                                            setBalance(val);\n-                                        else if (subid2 == 0x03)\n-                                            setFineTuning(val);\n-                                        else if (subid2 == 0x04)\n-                                            setCoarseTuning(val);\n-                                        break;\n-                                    case 0x05: \/\/ Global Parameter Control\n-                                        int ix = 5;\n-                                        int slotPathLen = (data[ix++] & 0xFF);\n-                                        int paramWidth = (data[ix++] & 0xFF);\n-                                        int valueWidth = (data[ix++] & 0xFF);\n-                                        int[] slotPath = new int[slotPathLen];\n-                                        for (int i = 0; i < slotPathLen; i++) {\n-                                            int msb = (data[ix++] & 0xFF);\n-                                            int lsb = (data[ix++] & 0xFF);\n-                                            slotPath[i] = msb * 128 + lsb;\n-                                        }\n-                                        int paramCount = (data.length - 1 - ix)\n-                                                \/ (paramWidth + valueWidth);\n-                                        long[] params = new long[paramCount];\n-                                        long[] values = new long[paramCount];\n-                                        for (int i = 0; i < paramCount; i++) {\n-                                            values[i] = 0;\n-                                            for (int j = 0; j < paramWidth; j++)\n-                                                params[i] = params[i] * 128\n-                                                        + (data[ix++] & 0xFF);\n-                                            for (int j = 0; j < valueWidth; j++)\n-                                                values[i] = values[i] * 128\n-                                                        + (data[ix++] & 0xFF);\n-\n-                                        }\n-                                        globalParameterControlChange(slotPath, params, values);\n-                                        break;\n-                                    default:\n-                                        break;\n-                                }\n+            \/\/ Universal Real-Time SysEx\n+            if ((data[1] & 0xFF) == 0x7F) {\n+                int deviceID = data[2] & 0xFF;\n+                if (deviceID == 0x7F || deviceID == synth.getDeviceID()) {\n+                    if (data.length < 4) {\n+                        return;\n+                    }\n+                    int subid1 = data[3] & 0xFF;\n+                    int subid2;\n+                    switch (subid1) {\n+                        case 0x04: \/\/ Device Control\n+                            if (data.length < 5) {\n@@ -283,15 +263,8 @@\n-\n-                            case 0x08:  \/\/ MIDI Tuning Standard\n-                                subid2 = data[4] & 0xFF;\n-                                switch (subid2) {\n-                                    case 0x02:  \/\/ SINGLE NOTE TUNING CHANGE (REAL-TIME)\n-                                    {\n-                                        \/\/ http:\/\/www.midi.org\/about-midi\/tuning.shtml\n-                                        SoftTuning tuning = synth.getTuning(new Patch(0,\n-                                                data[5] & 0xFF));\n-                                        tuning.load(data);\n-                                        SoftVoice[] voices = synth.getVoices();\n-                                        for (int i = 0; i < voices.length; i++)\n-                                            if (voices[i].active)\n-                                                if (voices[i].tuning == tuning)\n-                                                    voices[i].updateTuning(tuning);\n+                            }\n+                            subid2 = data[4] & 0xFF;\n+                            switch (subid2) {\n+                                case 0x01: \/\/ Master Volume\n+                                case 0x02: \/\/ Master Balane\n+                                case 0x03: \/\/ Master fine tuning\n+                                case 0x04: \/\/ Master coarse tuning\n+                                    if (data.length < 7) {\n@@ -300,12 +273,13 @@\n-                                    case 0x07:  \/\/ SINGLE NOTE TUNING CHANGE (REAL-TIME)\n-                                        \/\/ (BANK)\n-                                    {\n-                                        \/\/ http:\/\/www.midi.org\/about-midi\/tuning_extens.shtml\n-                                        SoftTuning tuning = synth.getTuning(new Patch(\n-                                                data[5] & 0xFF, data[6] & 0xFF));\n-                                        tuning.load(data);\n-                                        SoftVoice[] voices = synth.getVoices();\n-                                        for (int i = 0; i < voices.length; i++)\n-                                            if (voices[i].active)\n-                                                if (voices[i].tuning == tuning)\n-                                                    voices[i].updateTuning(tuning);\n+                                    int val = (data[5] & 0x7F)\n+                                            + ((data[6] & 0x7F) * 128);\n+                                    if (subid2 == 0x01)\n+                                        setVolume(val);\n+                                    else if (subid2 == 0x02)\n+                                        setBalance(val);\n+                                    else if (subid2 == 0x03)\n+                                        setFineTuning(val);\n+                                    else if (subid2 == 0x04)\n+                                        setCoarseTuning(val);\n+                                    break;\n+                                case 0x05: \/\/ Global Parameter Control\n+                                    if (data.length < 6) {\n@@ -314,18 +288,3 @@\n-                                    case 0x08:  \/\/ scale\/octave tuning 1-byte form\n-                                        \/\/(Real-Time)\n-                                    case 0x09:  \/\/ scale\/octave tuning 2-byte form\n-                                        \/\/ (Real-Time)\n-                                    {\n-                                        \/\/ http:\/\/www.midi.org\/about-midi\/tuning-scale.shtml\n-                                        SoftTuning tuning = new SoftTuning(data);\n-                                        int channelmask = (data[5] & 0xFF) * 16384\n-                                                + (data[6] & 0xFF) * 128 + (data[7] & 0xFF);\n-                                        SoftChannel[] channels = synth.channels;\n-                                        for (int i = 0; i < channels.length; i++)\n-                                            if ((channelmask & (1 << i)) != 0)\n-                                                channels[i].tuning = tuning;\n-                                        SoftVoice[] voices = synth.getVoices();\n-                                        for (int i = 0; i < voices.length; i++)\n-                                            if (voices[i].active)\n-                                                if ((channelmask & (1 << (voices[i].channel))) != 0)\n-                                                    voices[i].updateTuning(tuning);\n+                                    int ix = 5;\n+                                    int slotPathLen = (data[ix++] & 0xFF);\n+                                    if (data.length < slotPathLen * 2 + 8) {\n@@ -334,1 +293,11 @@\n-                                    default:\n+                                    int paramWidth = (data[ix++] & 0xFF);\n+                                    int valueWidth = (data[ix++] & 0xFF);\n+                                    int[] slotPath = new int[slotPathLen];\n+                                    for (int i = 0; i < slotPathLen; i++) {\n+                                        int msb = (data[ix++] & 0xFF);\n+                                        int lsb = (data[ix++] & 0xFF);\n+                                        slotPath[i] = msb * 128 + lsb;\n+                                    }\n+                                    int paramCount = (data.length - 1 - ix)\n+                                            \/ (paramWidth + valueWidth);\n+                                    if (paramCount < 1) {\n@@ -336,1 +305,22 @@\n-                                }\n+                                    }\n+                                    long[] params = new long[paramCount];\n+                                    long[] values = new long[paramCount];\n+                                    for (int i = 0; i < paramCount; i++) {\n+                                        values[i] = 0;\n+                                        for (int j = 0; j < paramWidth; j++)\n+                                            params[i] = params[i] * 128\n+                                                    + (data[ix++] & 0xFF);\n+                                        for (int j = 0; j < valueWidth; j++)\n+                                            values[i] = values[i] * 128\n+                                                    + (data[ix++] & 0xFF);\n+\n+                                    }\n+                                    globalParameterControlChange(slotPath, params, values);\n+                                    break;\n+                                default:\n+                                    break;\n+                            }\n+                            break;\n+\n+                        case 0x08:  \/\/ MIDI Tuning Standard\n+                            if (data.length < 5) {\n@@ -338,17 +328,7 @@\n-                            case 0x09:  \/\/ Control Destination Settings\n-                                subid2 = data[4] & 0xFF;\n-                                switch (subid2) {\n-                                    case 0x01: \/\/ Channel Pressure\n-                                    {\n-                                        int[] destinations = new int[(data.length - 7) \/ 2];\n-                                        int[] ranges = new int[(data.length - 7) \/ 2];\n-                                        int ix = 0;\n-                                        for (int j = 6; j < data.length - 1; j += 2) {\n-                                            destinations[ix] = data[j] & 0xFF;\n-                                            ranges[ix] = data[j + 1] & 0xFF;\n-                                            ix++;\n-                                        }\n-                                        int channel = data[5] & 0xFF;\n-                                        SoftChannel softchannel = synth.channels[channel];\n-                                        softchannel.mapChannelPressureToDestination(\n-                                                destinations, ranges);\n+                            }\n+                            subid2 = data[4] & 0xFF;\n+                            switch (subid2) {\n+                                case 0x02:  \/\/ SINGLE NOTE TUNING CHANGE (REAL-TIME)\n+                                {\n+                                    \/\/ http:\/\/www.midi.org\/about-midi\/tuning.shtml\n+                                    if (data.length < 6) {\n@@ -357,14 +337,15 @@\n-                                    case 0x02: \/\/ Poly Pressure\n-                                    {\n-                                        int[] destinations = new int[(data.length - 7) \/ 2];\n-                                        int[] ranges = new int[(data.length - 7) \/ 2];\n-                                        int ix = 0;\n-                                        for (int j = 6; j < data.length - 1; j += 2) {\n-                                            destinations[ix] = data[j] & 0xFF;\n-                                            ranges[ix] = data[j + 1] & 0xFF;\n-                                            ix++;\n-                                        }\n-                                        int channel = data[5] & 0xFF;\n-                                        SoftChannel softchannel = synth.channels[channel];\n-                                        softchannel.mapPolyPressureToDestination(\n-                                                destinations, ranges);\n+                                    SoftTuning tuning = synth.getTuning(new Patch(0,\n+                                            data[5] & 0xFF));\n+                                    tuning.load(data);\n+                                    SoftVoice[] voices = synth.getVoices();\n+                                    for (int i = 0; i < voices.length; i++)\n+                                        if (voices[i].active)\n+                                            if (voices[i].tuning == tuning)\n+                                                voices[i].updateTuning(tuning);\n+                                    break;\n+                                }\n+                                case 0x07:  \/\/ SINGLE NOTE TUNING CHANGE (REAL-TIME)\n+                                    \/\/ (BANK)\n+                                {\n+                                    \/\/ http:\/\/www.midi.org\/about-midi\/tuning_extens.shtml\n+                                    if (data.length < 7) {\n@@ -373,15 +354,17 @@\n-                                    case 0x03: \/\/ Control Change\n-                                    {\n-                                        int[] destinations = new int[(data.length - 7) \/ 2];\n-                                        int[] ranges = new int[(data.length - 7) \/ 2];\n-                                        int ix = 0;\n-                                        for (int j = 7; j < data.length - 1; j += 2) {\n-                                            destinations[ix] = data[j] & 0xFF;\n-                                            ranges[ix] = data[j + 1] & 0xFF;\n-                                            ix++;\n-                                        }\n-                                        int channel = data[5] & 0xFF;\n-                                        SoftChannel softchannel = synth.channels[channel];\n-                                        int control = data[6] & 0xFF;\n-                                        softchannel.mapControlToDestination(control,\n-                                                destinations, ranges);\n+                                    SoftTuning tuning = synth.getTuning(new Patch(\n+                                            data[5] & 0xFF, data[6] & 0xFF));\n+                                    tuning.load(data); \/\/ various\n+                                    SoftVoice[] voices = synth.getVoices();\n+                                    for (int i = 0; i < voices.length; i++)\n+                                        if (voices[i].active)\n+                                            if (voices[i].tuning == tuning)\n+                                                voices[i].updateTuning(tuning);\n+                                    break;\n+                                }\n+                                case 0x08:  \/\/ scale\/octave tuning 1-byte form\n+                                    \/\/(Real-Time)\n+                                case 0x09:  \/\/ scale\/octave tuning 2-byte form\n+                                    \/\/ (Real-Time)\n+                                {\n+                                    \/\/ http:\/\/www.midi.org\/about-midi\/tuning-scale.shtml\n+                                    if (data.length < 8) {\n@@ -390,2 +373,13 @@\n-                                    default:\n-                                        break;\n+                                    SoftTuning tuning = new SoftTuning(data);\n+                                    int channelmask = (data[5] & 0xFF) * 16384\n+                                            + (data[6] & 0xFF) * 128 + (data[7] & 0xFF);\n+                                    SoftChannel[] channels = synth.channels;\n+                                    for (int i = 0; i < channels.length; i++)\n+                                        if ((channelmask & (1 << i)) != 0)\n+                                            channels[i].tuning = tuning;\n+                                    SoftVoice[] voices = synth.getVoices();\n+                                    for (int i = 0; i < voices.length; i++)\n+                                        if (voices[i].active)\n+                                            if ((channelmask & (1 << (voices[i].channel))) != 0)\n+                                                voices[i].updateTuning(tuning);\n+                                    break;\n@@ -393,0 +387,6 @@\n+                                default:\n+                                    break;\n+                            }\n+                            break;\n+                        case 0x09:  \/\/ Control Destination Settings\n+                            if (data.length < 5) {\n@@ -394,15 +394,6 @@\n-\n-                            case 0x0A:  \/\/ Key Based Instrument Control\n-                            {\n-                                subid2 = data[4] & 0xFF;\n-                                switch (subid2) {\n-                                    case 0x01: \/\/ Basic Message\n-                                        int channel = data[5] & 0xFF;\n-                                        int keynumber = data[6] & 0xFF;\n-                                        SoftChannel softchannel = synth.channels[channel];\n-                                        for (int j = 7; j < data.length - 1; j += 2) {\n-                                            int controlnumber = data[j] & 0xFF;\n-                                            int controlvalue = data[j + 1] & 0xFF;\n-                                            softchannel.controlChangePerNote(keynumber,\n-                                                    controlnumber, controlvalue);\n-                                        }\n+                            }\n+                            subid2 = data[4] & 0xFF;\n+                            switch (subid2) {\n+                                case 0x01: \/\/ Channel Pressure\n+                                {\n+                                    if (data.length < 7) {\n@@ -410,1 +401,18 @@\n-                                    default:\n+                                    }\n+                                    int[] destinations = new int[(data.length - 7) \/ 2];\n+                                    int[] ranges = new int[(data.length - 7) \/ 2];\n+                                    int ix = 0;\n+                                    for (int j = 6; j < data.length - 1; j += 2) {\n+                                        destinations[ix] = data[j] & 0xFF;\n+                                        ranges[ix] = data[j + 1] & 0xFF;\n+                                        ix++;\n+                                    }\n+                                    int channel = data[5] & 0xFF;\n+                                    SoftChannel softchannel = synth.channels[channel];\n+                                    softchannel.mapChannelPressureToDestination(\n+                                            destinations, ranges);\n+                                    break;\n+                                }\n+                                case 0x02: \/\/ Poly Pressure\n+                                {\n+                                    if (data.length < 7) {\n@@ -412,0 +420,14 @@\n+                                    }\n+                                    int[] destinations = new int[(data.length - 7) \/ 2];\n+                                    int[] ranges = new int[(data.length - 7) \/ 2];\n+                                    int ix = 0;\n+                                    for (int j = 6; j < data.length - 1; j += 2) {\n+                                        destinations[ix] = data[j] & 0xFF;\n+                                        ranges[ix] = data[j + 1] & 0xFF;\n+                                        ix++;\n+                                    }\n+                                    int channel = data[5] & 0xFF;\n+                                    SoftChannel softchannel = synth.channels[channel];\n+                                    softchannel.mapPolyPressureToDestination(\n+                                            destinations, ranges);\n+                                    break;\n@@ -413,1 +435,22 @@\n-                                break;\n+                                case 0x03: \/\/ Control Change\n+                                {\n+                                    if (data.length < 7) {\n+                                        break;\n+                                    }\n+                                    int[] destinations = new int[(data.length - 7) \/ 2];\n+                                    int[] ranges = new int[(data.length - 7) \/ 2];\n+                                    int ix = 0;\n+                                    for (int j = 7; j < data.length - 1; j += 2) {\n+                                        destinations[ix] = data[j] & 0xFF;\n+                                        ranges[ix] = data[j + 1] & 0xFF;\n+                                        ix++;\n+                                    }\n+                                    int channel = data[5] & 0xFF;\n+                                    SoftChannel softchannel = synth.channels[channel];\n+                                    int control = data[6] & 0xFF;\n+                                    softchannel.mapControlToDestination(control,\n+                                            destinations, ranges);\n+                                    break;\n+                                }\n+                                default:\n+                                    break;\n@@ -415,1 +458,5 @@\n-                            default:\n+                            break;\n+\n+                        case 0x0A:  \/\/ Key Based Instrument Control\n+                        {\n+                            if (data.length < 7 || (data[4] & 0xFF) != 01) {\n@@ -417,0 +464,18 @@\n+                            }\n+                            subid2 = data[4] & 0xFF;\n+                            switch (subid2) {\n+                                case 0x01: \/\/ Basic Message\n+                                    int channel = data[5] & 0xFF;\n+                                    int keynumber = data[6] & 0xFF;\n+                                    SoftChannel softchannel = synth.channels[channel];\n+                                    for (int j = 7; j < data.length - 1; j += 2) {\n+                                        int controlnumber = data[j] & 0xFF;\n+                                        int controlvalue = data[j + 1] & 0xFF;\n+                                        softchannel.controlChangePerNote(keynumber,\n+                                                controlnumber, controlvalue);\n+                                    }\n+                                    break;\n+                                default:\n+                                    break;\n+                            }\n+                            break;\n@@ -418,0 +483,2 @@\n+                        default:\n+                            break;\n@@ -420,2 +487,0 @@\n-            } catch (ArrayIndexOutOfBoundsException aioobe) {\n-                \/\/ Silently ignore malformed SysEx message\n@@ -423,1 +488,0 @@\n-\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/SoftMainMixer.java","additions":323,"deletions":259,"binary":false,"changes":582,"status":"modified"},{"patch":"@@ -92,0 +92,4 @@\n+        if (data.length < 2) {\n+            return;\n+        }\n+\n@@ -93,0 +97,4 @@\n+            if (data.length < 4) {\n+                return;\n+            }\n+\n@@ -96,0 +104,3 @@\n+                if (data.length < 5) {\n+                    break;\n+                }\n@@ -103,0 +114,3 @@\n+                    if (data.length < 406) {\n+                        break;\n+                    }\n@@ -118,0 +132,3 @@\n+                    if (data.length < 7) {\n+                        break;\n+                    }\n@@ -119,0 +136,3 @@\n+                    if (data.length < ll * 4 + 8) {\n+                        break;\n+                    }\n@@ -135,0 +155,3 @@\n+                    if (data.length < 407) {\n+                        break;\n+                    }\n@@ -152,0 +175,3 @@\n+                    if (data.length < 35) {\n+                        break;\n+                    }\n@@ -166,0 +192,3 @@\n+                    if (data.length < 47) {\n+                        break;\n+                    }\n@@ -180,0 +209,3 @@\n+                    if (data.length < 8) {\n+                        break;\n+                    }\n@@ -181,0 +213,3 @@\n+                    if (data.length < ll * 4 + 8) {\n+                        break;\n+                    }\n@@ -196,0 +231,3 @@\n+                    if (data.length < 21) {\n+                        break;\n+                    }\n@@ -207,0 +245,3 @@\n+                    if (data.length < 32) {\n+                        break;\n+                    }\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/SoftTuning.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"modified"}]}