{"files":[{"patch":"@@ -319,4 +319,6 @@\n-                \/\/ restore old state\n-                ZONES.put(zoneId, old);\n-                provider.provideZoneIds().stream()\n-                    .forEach(id -> ZONES.remove(id, provider));\n+                if(!old.equals(provider)) {\n+                    \/\/ restore old state\n+                    ZONES.put(zoneId, old);\n+                    provider.provideZoneIds().stream()\n+                        .forEach(id -> ZONES.remove(id, provider));\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/time\/zone\/ZoneRulesProvider.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import static org.testng.Assert.assertNotNull;\n@@ -38,0 +39,1 @@\n+import static org.testng.Assert.fail;\n@@ -42,0 +44,1 @@\n+ * @bug 8302983\n@@ -94,0 +97,44 @@\n+\n+    \/**\n+     * Tests whether registering a provider twice will still leave it registered.\n+     *\/\n+    @Test\n+    public void test_registerTwice() {\n+        String zone = \"MyID\";\n+        var provider = new ZoneRulesProvider() {\n+            @Override\n+            protected Set<String> provideZoneIds() {\n+                return Set.of(zone);\n+            }\n+\n+            @Override\n+            protected ZoneRules provideRules(String zoneId, boolean forCaching) {\n+                return null;\n+            }\n+\n+            @Override\n+            protected NavigableMap<String, ZoneRules> provideVersions(String zoneId) {\n+                return null;\n+            }\n+        }\n+        assertFalse(ZoneId.getAvailableZoneIds().contains(zone), \"Unexpected availability for \" + zone);\n+        ZoneRulesProvider.registerProvider(provider);\n+        assertTrue(ZoneId.getAvailableZoneIds().contains(zone), \"Unexpected non-availability for \" + zone);\n+        assertNotNull(ZoneId.of(zone), \"ZoneId instance for \" + zone + \" should be obtainable\");\n+\n+        try {\n+            ZoneRulesProvider.registerProvider(provider);\n+            throw new RuntimeException(\"Registering an already registered provider should throw an exception\");\n+        } catch (ZoneRulesException e) {\n+            \/\/ Ignore. Failure on duplicate registration is expected.\n+        }\n+\n+        \/\/ availability check\n+        assertTrue(ZoneId.getAvailableZoneIds().contains(zone), \"Unexpected non-availability for \" + id);\n+        \/\/ instantiation check\n+        try {\n+            assertNotNull(ZoneId.of(zone), \"ZoneId instance for \" + zone + \" should still be obtainable\");\n+        } catch (ZoneRulesException e) {\n+            fail(\"ZoneId instance for \" + zone + \" should still be obtainable\", e);\n+        }\n+    }\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/zone\/TestZoneRulesProvider.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"}]}