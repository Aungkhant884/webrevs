{"files":[{"patch":"@@ -202,3 +202,0 @@\n-  address stack_bottom;\n-  size_t stack_bytes;\n-\n@@ -208,12 +205,2 @@\n-    stack_bottom = os::Linux::initial_thread_stack_bottom();\n-    stack_bytes  = os::Linux::initial_thread_stack_size();\n-  } else {\n-    pthread_attr_t attr;\n-    int res = pthread_getattr_np(pthread_self(), &attr);\n-    if (res != 0) {\n-      if (res == ENOMEM) {\n-        vm_exit_out_of_memory(0, OOM_MMAP_ERROR, \"pthread_getattr_np\");\n-      } else {\n-        fatal(\"pthread_getattr_np failed with error = %d\", res);\n-      }\n-    }\n+    address stack_bottom = os::Linux::initial_thread_stack_bottom();\n+    size_t stack_bytes  = os::Linux::initial_thread_stack_size();\n@@ -221,4 +208,2 @@\n-    res = pthread_attr_getstack(&attr, (void **) &stack_bottom, &stack_bytes);\n-    if (res != 0) {\n-      fatal(\"pthread_attr_getstack failed with error = %d\", res);\n-    }\n+    assert(os::current_stack_pointer() >= stack_bottom, \"should do\");\n+    assert(os::current_stack_pointer() < stack_bottom + stack_bytes, \"should do\");\n@@ -226,4 +211,4 @@\n-    \/\/ The block of memory returned by pthread_attr_getstack() includes\n-    \/\/ guard pages where present.  We need to trim these off.\n-    size_t page_bytes = os::Linux::page_size();\n-    assert(((intptr_t) stack_bottom & (page_bytes - 1)) == 0, \"unaligned stack\");\n+    *bottom = stack_bottom;\n+    *size = stack_bytes;\n+    return;\n+  }\n@@ -231,4 +216,5 @@\n-    size_t guard_bytes;\n-    res = pthread_attr_getguardsize(&attr, &guard_bytes);\n-    if (res != 0) {\n-      fatal(\"pthread_attr_getguardsize failed with errno = %d\", res);\n+  pthread_attr_t attr;\n+  int res = pthread_getattr_np(pthread_self(), &attr);\n+  if (res != 0) {\n+    if (res == ENOMEM) {\n+      vm_exit_out_of_memory(0, OOM_MMAP_ERROR, \"pthread_getattr_np\");\n@@ -236,2 +222,25 @@\n-    int guard_pages = align_up(guard_bytes, page_bytes) \/ page_bytes;\n-    assert(guard_bytes == guard_pages * page_bytes, \"unaligned guard\");\n+    else {\n+      fatal(\"pthread_getattr_np failed with error = %d\", res);\n+    }\n+  }\n+\n+  address stack_bottom;\n+  size_t stack_bytes;\n+  res = pthread_attr_getstack(&attr, (void **) &stack_bottom, &stack_bytes);\n+  if (res != 0) {\n+    fatal(\"pthread_attr_getstack failed with error = %d\", res);\n+  }\n+  address stack_top = stack_bottom + stack_bytes;\n+\n+  \/\/ The block of memory returned by pthread_attr_getstack() includes\n+  \/\/ guard pages where present.  We need to trim these off.\n+  size_t page_bytes = os::Linux::page_size();\n+  assert(((intptr_t) stack_bottom & (page_bytes - 1)) == 0, \"unaligned stack\");\n+\n+  size_t guard_bytes;\n+  res = pthread_attr_getguardsize(&attr, &guard_bytes);\n+  if (res != 0) {\n+    fatal(\"pthread_attr_getguardsize failed with errno = %d\", res);\n+  }\n+  int guard_pages = align_up(guard_bytes, page_bytes) \/ page_bytes;\n+  assert(guard_bytes == guard_pages * page_bytes, \"unaligned guard\");\n@@ -240,9 +249,9 @@\n-    \/\/ IA64 has two stacks sharing the same area of memory, a normal\n-    \/\/ stack growing downwards and a register stack growing upwards.\n-    \/\/ Guard pages, if present, are in the centre.  This code splits\n-    \/\/ the stack in two even without guard pages, though in theory\n-    \/\/ there's nothing to stop us allocating more to the normal stack\n-    \/\/ or more to the register stack if one or the other were found\n-    \/\/ to grow faster.\n-    int total_pages = align_down(stack_bytes, page_bytes) \/ page_bytes;\n-    stack_bottom += (total_pages - guard_pages) \/ 2 * page_bytes;\n+  \/\/ IA64 has two stacks sharing the same area of memory, a normal\n+  \/\/ stack growing downwards and a register stack growing upwards.\n+  \/\/ Guard pages, if present, are in the centre.  This code splits\n+  \/\/ the stack in two even without guard pages, though in theory\n+  \/\/ there's nothing to stop us allocating more to the normal stack\n+  \/\/ or more to the register stack if one or the other were found\n+  \/\/ to grow faster.\n+  int total_pages = align_down(stack_bytes, page_bytes) \/ page_bytes;\n+  stack_bottom += (total_pages - guard_pages) \/ 2 * page_bytes;\n@@ -251,1 +260,1 @@\n-    stack_bottom += guard_bytes;\n+  stack_bottom += guard_bytes;\n@@ -253,2 +262,1 @@\n-    pthread_attr_destroy(&attr);\n-  }\n+  pthread_attr_destroy(&attr);\n@@ -257,1 +265,1 @@\n-  assert(os::current_stack_pointer() < stack_bottom + stack_bytes, \"should do\");\n+  assert(os::current_stack_pointer() < stack_top, \"should do\");\n@@ -260,1 +268,1 @@\n-  *size = stack_bytes;\n+  *size = stack_top - stack_bottom;\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/os_linux_zero.cpp","additions":51,"deletions":43,"binary":false,"changes":94,"status":"modified"}]}