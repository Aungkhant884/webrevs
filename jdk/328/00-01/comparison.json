{"files":[{"patch":"@@ -58,6 +58,2 @@\n-#ifdef ASSERT\n-  AsmOperand(ByteSize bytesize_8) {\n-    const int imm_8 = in_bytes(bytesize_8);\n-    encode(imm_8);\n-  }\n-#endif \/\/ ASSERT\n+  AsmOperand(ByteSize bytesize_8) :\n+    AsmOperand(in_bytes(bytesize_8)) {}\n","filename":"src\/hotspot\/cpu\/arm\/assembler_arm_32.hpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -591,1 +591,1 @@\n-    __ add(Rbcp, Rtemp, in_bytes(ConstMethod::codes_offset())); \/\/ get codebase\n+    __ add(Rbcp, Rtemp, ConstMethod::codes_offset()); \/\/ get codebase\n","filename":"src\/hotspot\/cpu\/arm\/templateInterpreterGenerator_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n-inline WordSize in_WordSize(int size) { return WordSize(size); }\n-inline int      in_words(WordSize x)  { return static_cast<int>(x); }\n+constexpr WordSize in_WordSize(int size) { return static_cast<WordSize>(size); }\n+constexpr int      in_words(WordSize x)  { return static_cast<int>(x); }\n@@ -50,2 +50,2 @@\n-inline ByteSize in_ByteSize(int size) { return ByteSize(size); }\n-inline int      in_bytes(ByteSize x)  { return static_cast<int>(x); }\n+constexpr ByteSize in_ByteSize(int size) { return static_cast<ByteSize>(size); }\n+constexpr int      in_bytes(ByteSize x)  { return static_cast<int>(x); }\n@@ -53,3 +53,3 @@\n-inline ByteSize operator + (ByteSize x, ByteSize y) { return ByteSize(in_bytes(x) + in_bytes(y)); }\n-inline ByteSize operator - (ByteSize x, ByteSize y) { return ByteSize(in_bytes(x) - in_bytes(y)); }\n-inline ByteSize operator * (ByteSize x, int      y) { return ByteSize(in_bytes(x) * y          ); }\n+constexpr ByteSize operator + (ByteSize x, ByteSize y) { return in_ByteSize(in_bytes(x) + in_bytes(y)); }\n+constexpr ByteSize operator - (ByteSize x, ByteSize y) { return in_ByteSize(in_bytes(x) - in_bytes(y)); }\n+constexpr ByteSize operator * (ByteSize x, int      y) { return in_ByteSize(in_bytes(x) * y          ); }\n","filename":"src\/hotspot\/share\/utilities\/sizes.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"utilities\/sizes.hpp\"\n+#include \"unittest.hpp\"\n+\n+TEST(ByteSize, constructors) {\n+  EXPECT_EQ(in_bytes(in_ByteSize(10)), 10);\n+}\n+\n+TEST(ByteSize, operators) {\n+  ByteSize s = in_ByteSize(7);\n+  ASSERT_EQ(in_bytes(s + in_ByteSize(3)), 10);\n+  ASSERT_EQ(in_bytes(s - in_ByteSize(3)), 4);\n+  ASSERT_EQ(in_bytes(s * 3), 21);\n+}\n+\n+TEST(WordSize, constructors) {\n+  EXPECT_EQ(in_words(in_WordSize(10)), 10);\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_sizes.cpp","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"}]}