{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import jdk.internal.vm.annotation.ForceInline;\n@@ -3807,1 +3806,1 @@\n-        if (newLength < 0)\n+        if (newLength < 0) {\n@@ -3809,0 +3808,1 @@\n+        }\n@@ -3818,7 +3818,0 @@\n-    @ForceInline\n-    private static void checkLength(int from, int to) {\n-        if (to < from) {\n-            throw new IllegalArgumentException(from + \" > \" + to);\n-        }\n-    }\n-\n@@ -3852,4 +3845,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeByte(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -3857,5 +3847,1 @@\n-    }\n-\n-    @ForceInline\n-    private static byte[] copyOfRangeByte(byte[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -3863,0 +3849,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -3865,1 +3854,1 @@\n-                         Math.min(original.length - from, newLength));\n+                Math.min(original.length - from, newLength));\n@@ -3896,4 +3885,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeShort(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -3901,5 +3887,1 @@\n-    }\n-\n-    @ForceInline\n-    private static short[] copyOfRangeShort(short[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -3907,0 +3889,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -3940,4 +3925,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeInt(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -3945,5 +3927,1 @@\n-    }\n-\n-    @ForceInline\n-    private static int[] copyOfRangeInt(int[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -3951,0 +3929,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -3984,4 +3965,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeLong(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -3989,5 +3967,1 @@\n-    }\n-\n-    @ForceInline\n-    private static long[] copyOfRangeLong(long[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -3995,0 +3969,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -4028,4 +4005,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeChar(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -4033,5 +4007,1 @@\n-    }\n-\n-    @ForceInline\n-    private static char[] copyOfRangeChar(char[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -4039,0 +4009,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -4072,4 +4045,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeFloat(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -4077,5 +4047,1 @@\n-    }\n-\n-    @ForceInline\n-    private static float[] copyOfRangeFloat(float[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -4083,0 +4049,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -4116,4 +4085,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeDouble(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -4121,5 +4087,1 @@\n-    }\n-\n-    @ForceInline\n-    private static double[] copyOfRangeDouble(double[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -4127,0 +4089,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -4160,4 +4125,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeBoolean(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -4165,5 +4127,1 @@\n-    }\n-\n-    @ForceInline\n-    private static boolean[] copyOfRangeBoolean(boolean[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -4171,0 +4129,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":43,"deletions":82,"binary":false,"changes":125,"status":"modified"}]}