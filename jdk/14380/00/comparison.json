{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import jdk.internal.vm.annotation.ForceInline;\n@@ -3807,1 +3806,1 @@\n-        if (newLength < 0)\n+        if (newLength < 0) {\n@@ -3809,0 +3808,1 @@\n+        }\n@@ -3818,7 +3818,0 @@\n-    @ForceInline\n-    private static void checkLength(int from, int to) {\n-        if (to < from) {\n-            throw new IllegalArgumentException(from + \" > \" + to);\n-        }\n-    }\n-\n@@ -3853,3 +3846,1 @@\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeByte(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -3857,5 +3848,1 @@\n-    }\n-\n-    @ForceInline\n-    private static byte[] copyOfRangeByte(byte[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -3863,0 +3850,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -3865,1 +3855,1 @@\n-                         Math.min(original.length - from, newLength));\n+                Math.min(original.length - from, newLength));\n@@ -3896,4 +3886,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeShort(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -3901,5 +3888,1 @@\n-    }\n-\n-    @ForceInline\n-    private static short[] copyOfRangeShort(short[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -3907,0 +3890,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -3940,4 +3926,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeInt(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -3945,5 +3928,1 @@\n-    }\n-\n-    @ForceInline\n-    private static int[] copyOfRangeInt(int[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -3951,0 +3930,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -3984,4 +3966,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeLong(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -3989,5 +3968,1 @@\n-    }\n-\n-    @ForceInline\n-    private static long[] copyOfRangeLong(long[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -3995,0 +3970,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -4029,3 +4007,1 @@\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeChar(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -4033,5 +4009,1 @@\n-    }\n-\n-    @ForceInline\n-    private static char[] copyOfRangeChar(char[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -4039,0 +4011,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -4072,4 +4047,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeFloat(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -4077,5 +4049,1 @@\n-    }\n-\n-    @ForceInline\n-    private static float[] copyOfRangeFloat(float[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -4083,0 +4051,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -4116,4 +4087,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeDouble(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -4121,5 +4089,1 @@\n-    }\n-\n-    @ForceInline\n-    private static double[] copyOfRangeDouble(double[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -4127,0 +4091,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n@@ -4160,4 +4127,1 @@\n-        \/\/ Tickle the JIT to fold special cases optimally\n-        if (from != 0 || to != original.length)\n-            return copyOfRangeBoolean(original, from, to);\n-        else \/\/ from == 0 && to == original.length\n+        if (from == 0 && to == original.length) {\n@@ -4165,5 +4129,1 @@\n-    }\n-\n-    @ForceInline\n-    private static boolean[] copyOfRangeBoolean(boolean[] original, int from, int to) {\n-        checkLength(from, to);\n+        }\n@@ -4171,0 +4131,3 @@\n+        if (newLength < 0) {\n+            throw new IllegalArgumentException(from + \" > \" + to);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":43,"deletions":80,"binary":false,"changes":123,"status":"modified"}]}