{"files":[{"patch":"@@ -1848,14 +1848,0 @@\n-\/\/ Clear the unused cmove pack and its related packs from superword candidate packset.\n-void SuperWord::remove_cmove_and_related_packs(Node_List* cmove_pk) {\n-  Node* cmove = cmove_pk->at(0);\n-  Node* bol = cmove->as_CMove()->in(CMoveNode::Condition);\n-  if (my_pack(bol)) {\n-    remove_pack(my_pack(bol));\n-  }\n-  Node* cmp = bol->in(1);\n-  if (my_pack(cmp)) {\n-    remove_pack(my_pack(cmp));\n-  }\n-  remove_pack(cmove_pk);\n-}\n-\n@@ -1885,1 +1871,0 @@\n-\/\/ Also delete unqualified CMove pack from the packset and clear all info.\n@@ -1890,6 +1875,2 @@\n-    if (_cmovev_kit.is_cmove_pack_candidate(pk)) {\n-      if (_cmovev_kit.can_merge_cmove_pack(pk)) {\n-        _cmovev_kit.make_cmove_pack(pk);\n-      } else {\n-        remove_cmove_and_related_packs(pk);\n-      }\n+    if (_cmovev_kit.can_merge_cmove_pack(pk)) {\n+      _cmovev_kit.make_cmove_pack(pk);\n@@ -1936,9 +1917,0 @@\n-bool CMoveKit::is_cmove_pack_candidate(Node_List* cmove_pk) {\n-  Node* cmove = cmove_pk->at(0);\n-  if ((cmove->Opcode() != Op_CMoveF && cmove->Opcode() != Op_CMoveD) ||\n-      pack(cmove) != NULL \/* already in the cmove pack *\/) {\n-    return false;\n-  }\n-  return true;\n-}\n-\n@@ -1950,0 +1922,5 @@\n+  if (!SuperWord::is_cmove_fp_opcode(cmove->Opcode()) ||\n+      pack(cmove) != NULL \/* already in the cmove pack *\/) {\n+    return false;\n+  }\n+\n@@ -1951,1 +1928,1 @@\n-    NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmove_pack: CMove %d has control flow, escaping...\", cmove->_idx); cmove->dump();})\n+    NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::can_merge_cmove_pack: CMove %d has control flow, escaping...\", cmove->_idx); cmove->dump();})\n@@ -1961,1 +1938,1 @@\n-      NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmove_pack: Bool %d does not fit CMove %d for building vector, escaping...\", bol->_idx, cmove->_idx); bol->dump();})\n+      NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::can_merge_cmove_pack: Bool %d does not fit CMove %d for building vector, escaping...\", bol->_idx, cmove->_idx); bol->dump();})\n@@ -1975,1 +1952,1 @@\n-      NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmove_pack: Cmp %d does not fit CMove %d for building vector, escaping...\", cmp->_idx, cmove->_idx); cmp->dump();})\n+      NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::can_merge_cmove_pack: Cmp %d does not fit CMove %d for building vector, escaping...\", cmp->_idx, cmove->_idx); cmp->dump();})\n@@ -1984,1 +1961,1 @@\n-    NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmove_pack: cmp pack for Cmp %d failed vectorization test\", cmp->_idx); cmp->dump();})\n+    NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::can_merge_cmove_pack: cmp pack for Cmp %d failed vectorization test\", cmp->_idx); cmp->dump();})\n@@ -2102,0 +2079,3 @@\n+    } else if (is_cmove_fp_opcode(opc)) {\n+      retValue = is_cmov_pack(p) && VectorNode::implemented(opc, size, velt_basic_type(p0));\n+      NOT_PRODUCT(if(retValue && is_trace_cmov()) {tty->print_cr(\"SWPointer::implemented: found cmove pack\"); print_pack(p);})\n@@ -2111,1 +2091,0 @@\n-      NOT_PRODUCT(if(retValue && is_trace_cmov() && is_cmov_pack(p)) {tty->print_cr(\"SWPointer::implemented: found cmpd pack\"); print_pack(p);})\n@@ -3722,10 +3701,0 @@\n-\/\/------------------------------remove_pack------------------------------\n-\/\/ Remove the pack in the packset\n-void SuperWord::remove_pack(Node_List* p) {\n-  for (uint i = 0; i < p->size(); i++) {\n-    Node* s = p->at(i);\n-    set_my_pack(s, NULL);\n-  }\n-  _packset.remove(p);\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":14,"deletions":45,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -218,3 +218,1 @@\n-  \/\/ If the input pack is a cmove candidate, return true, otherwise return false.\n-  bool is_cmove_pack_candidate(Node_List* cmove_pk);\n-  \/\/ Determine if the current cmove pack can be vectorized.\n+  \/\/ Determine if the current pack is a cmove candidate that can be vectorized.\n@@ -458,1 +456,1 @@\n-  \/\/ is pack good for converting into one vector node replacing 12 nodes of Cmp, Bool, CMov\n+  \/\/ is pack good for converting into one vector node replacing bunches of Cmp, Bool, CMov nodes.\n@@ -461,0 +459,1 @@\n+  static bool is_cmove_fp_opcode(int opc) { return (opc == Op_CMoveF || opc == Op_CMoveD); }\n@@ -543,2 +542,0 @@\n-  \/\/ Clear the unused cmove pack and its related packs from superword candidate packset.\n-  void remove_cmove_and_related_packs(Node_List* cmove_pk);\n@@ -593,2 +590,0 @@\n-  \/\/ Remove the pack in the packset\n-  void remove_pack(Node_List* p);\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8295407\n+ * @summary C2 crash: Error: ShouldNotReachHere() in multiple vector tests with\n+ *          -XX:-MonomorphicArrayCheck -XX:-UncommonNullCast\n+ * @library \/test\/lib \/\n+ * @run main TestUnsupportedConditionalMove\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+\n+public class TestUnsupportedConditionalMove {\n+    public static int LENGTH = 3000;\n+    public static float[] fa = new float[LENGTH];\n+    public static float[] fb = new float[LENGTH];\n+    public static boolean[] mask = new boolean[LENGTH];\n+\n+    public static void test() {\n+        for (int i = 0; i < fa.length; i++) {\n+            fb[i] = mask[i]? fa[i]: -fa[i];\n+        }\n+    }\n+\n+    public static void main(String[] k) {\n+        for (int i= 0; i < LENGTH; i++) {\n+            mask[i] = (i % 3 == 0);\n+            fa[i] = i + 1.0f;\n+        }\n+\n+        for (int i = 0; i < 10_000; i++) {\n+            test();\n+        }\n+\n+        for (int i = 0; i < LENGTH; i++) {\n+            if (i % 3 == 0) {\n+                Asserts.assertEquals(fb[i], i + 1.0f);\n+            } else {\n+                Asserts.assertEquals(fb[i], - (i + 1.0f));\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestUnsupportedConditionalMove.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}