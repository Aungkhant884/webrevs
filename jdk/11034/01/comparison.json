{"files":[{"patch":"@@ -538,1 +538,1 @@\n-      merge_packs_to_cmovd();\n+      merge_packs_to_cmove();\n@@ -1414,1 +1414,1 @@\n-    use = _cmovev_kit.is_CmpD_candidate(s);\n+    use = _cmovev_kit.is_Cmp_candidate(s);\n@@ -1848,17 +1848,3 @@\n-\/\/ Clear the unused cmove pack and its related packs from superword candidate packset.\n-void SuperWord::remove_cmove_and_related_packs(Node_List* cmove_pk) {\n-  Node* cmove = cmove_pk->at(0);\n-  Node* bol = cmove->as_CMove()->in(CMoveNode::Condition);\n-  if (my_pack(bol)) {\n-    remove_pack(my_pack(bol));\n-  }\n-  Node* cmp = bol->in(1);\n-  if (my_pack(cmp)) {\n-    remove_pack(my_pack(cmp));\n-  }\n-  remove_pack(cmove_pk);\n-}\n-\n-\/\/------------------------------merge_packs_to_cmovd---------------------------\n-\/\/ Merge qualified CMoveD into new vector-nodes\n-\/\/ We want to catch this pattern and subsume CmpD and Bool into CMoveD\n+\/\/------------------------------merge_packs_to_cmove---------------------------\n+\/\/ Merge qualified CMove into new vector-nodes\n+\/\/ We want to catch this pattern and subsume Cmp and Bool into CMove\n@@ -1866,1 +1852,1 @@\n-\/\/                   SubD             ConD\n+\/\/                   Sub              Con\n@@ -1874,1 +1860,1 @@\n-\/\/         CmpD        |         \/\n+\/\/         Cmp         |         \/\n@@ -1883,1 +1869,1 @@\n-\/\/                   CMoveD\n+\/\/                   CMove\n@@ -1885,1 +1871,0 @@\n-\/\/ Also delete unqualified CMove pack from the packset and clear all info.\n@@ -1887,1 +1872,1 @@\n-void SuperWord::merge_packs_to_cmovd() {\n+void SuperWord::merge_packs_to_cmove() {\n@@ -1890,6 +1875,2 @@\n-    if (_cmovev_kit.is_cmove_pack_candidate(pk)) {\n-      if (_cmovev_kit.can_merge_cmove_pack(pk)) {\n-        _cmovev_kit.make_cmove_pack(pk);\n-      } else {\n-        remove_cmove_and_related_packs(pk);\n-      }\n+    if (_cmovev_kit.can_merge_cmove_pack(pk)) {\n+      _cmovev_kit.make_cmove_pack(pk);\n@@ -1901,1 +1882,1 @@\n-      tty->print_cr(\"\\nSuperWord::merge_packs_to_cmovd(): After merge\");\n+      tty->print_cr(\"\\nSuperWord::merge_packs_to_cmove(): After merge\");\n@@ -1922,1 +1903,1 @@\n-Node* CMoveKit::is_CmpD_candidate(Node* def) const {\n+Node* CMoveKit::is_Cmp_candidate(Node* def) const {\n@@ -1936,9 +1917,0 @@\n-bool CMoveKit::is_cmove_pack_candidate(Node_List* cmove_pk) {\n-  Node* cmove = cmove_pk->at(0);\n-  if ((cmove->Opcode() != Op_CMoveF && cmove->Opcode() != Op_CMoveD) ||\n-      pack(cmove) != NULL \/* already in the cmove pack *\/) {\n-    return false;\n-  }\n-  return true;\n-}\n-\n@@ -1950,0 +1922,5 @@\n+  if (!SuperWord::is_cmove_fp_opcode(cmove->Opcode()) ||\n+      pack(cmove) != NULL \/* already in the cmove pack *\/) {\n+    return false;\n+  }\n+\n@@ -1951,1 +1928,1 @@\n-    NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmove_pack: CMove %d has control flow, escaping...\", cmove->_idx); cmove->dump();})\n+    NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::can_merge_cmove_pack: CMove %d has control flow, escaping...\", cmove->_idx); cmove->dump();})\n@@ -1959,1 +1936,1 @@\n-      bol->in(0) != NULL || \/\/ BoolNode has control flow!!\n+      bol->in(0) != NULL || \/\/ Bool node has control flow!!\n@@ -1961,1 +1938,1 @@\n-      NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmove_pack: Bool %d does not fit CMove %d for building vector, escaping...\", bol->_idx, cmove->_idx); bol->dump();})\n+      NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::can_merge_cmove_pack: Bool %d does not fit CMove %d for building vector, escaping...\", bol->_idx, cmove->_idx); bol->dump();})\n@@ -1973,1 +1950,1 @@\n-      cmp->in(0) != NULL || \/\/ CmpNode has control flow!!\n+      cmp->in(0) != NULL || \/\/ Cmp node has control flow!!\n@@ -1975,1 +1952,1 @@\n-      NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmove_pack: Cmp %d does not fit CMove %d for building vector, escaping...\", cmp->_idx, cmove->_idx); cmp->dump();})\n+      NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::can_merge_cmove_pack: Cmp %d does not fit CMove %d for building vector, escaping...\", cmp->_idx, cmove->_idx); cmp->dump();})\n@@ -1983,2 +1960,2 @@\n-  if (!test_cmpd_pack(cmp_pk, cmove_pk)) {\n-    NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::make_cmove_pack: cmp pack for Cmp %d failed vectorization test\", cmp->_idx); cmp->dump();})\n+  if (!test_cmp_pack(cmp_pk, cmove_pk)) {\n+    NOT_PRODUCT(if(_sw->is_trace_cmov()) {tty->print(\"CMoveKit::can_merge_cmove_pack: cmp pack for Cmp %d failed vectorization test\", cmp->_idx); cmp->dump();})\n@@ -2022,7 +1999,7 @@\n-bool CMoveKit::test_cmpd_pack(Node_List* cmpd_pk, Node_List* cmovd_pk) {\n-  Node* cmpd0 = cmpd_pk->at(0);\n-  assert(cmpd0->is_Cmp(), \"CMoveKit::test_cmpd_pack: should be CmpDNode\");\n-  assert(cmovd_pk->at(0)->is_CMove(), \"CMoveKit::test_cmpd_pack: should be CMoveD\");\n-  assert(cmpd_pk->size() == cmovd_pk->size(), \"CMoveKit::test_cmpd_pack: should be same size\");\n-  Node* in1 = cmpd0->in(1);\n-  Node* in2 = cmpd0->in(2);\n+bool CMoveKit::test_cmp_pack(Node_List* cmp_pk, Node_List* cmove_pk) {\n+  Node* cmp0 = cmp_pk->at(0);\n+  assert(cmp0->is_Cmp(), \"CMoveKit::test_cmp_pack: should be Cmp Node\");\n+  assert(cmove_pk->at(0)->is_CMove(), \"CMoveKit::test_cmp_pack: should be CMove\");\n+  assert(cmp_pk->size() == cmove_pk->size(), \"CMoveKit::test_cmp_pack: should be same size\");\n+  Node* in1 = cmp0->in(1);\n+  Node* in2 = cmp0->in(2);\n@@ -2032,2 +2009,2 @@\n-  if (  (in1_pk != NULL && in1_pk->size() != cmpd_pk->size())\n-     || (in2_pk != NULL && in2_pk->size() != cmpd_pk->size()) ) {\n+  if (  (in1_pk != NULL && in1_pk->size() != cmp_pk->size())\n+     || (in2_pk != NULL && in2_pk->size() != cmp_pk->size()) ) {\n@@ -2039,2 +2016,2 @@\n-    for (uint j = 1; j < cmpd_pk->size(); j++) {\n-      if (cmpd_pk->at(j)->in(1) != in1) {\n+    for (uint j = 1; j < cmp_pk->size(); j++) {\n+      if (cmp_pk->at(j)->in(1) != in1) {\n@@ -2043,1 +2020,1 @@\n-    }\/\/for: in1_pk is not pack but all CmpD nodes in the pack have the same in(1)\n+    }\/\/for: in1_pk is not pack but all Cmp nodes in the pack have the same in(1)\n@@ -2047,2 +2024,2 @@\n-    for (uint j = 1; j < cmpd_pk->size(); j++) {\n-      if (cmpd_pk->at(j)->in(2) != in2) {\n+    for (uint j = 1; j < cmp_pk->size(); j++) {\n+      if (cmp_pk->at(j)->in(2) != in2) {\n@@ -2051,1 +2028,1 @@\n-    }\/\/for: in2_pk is not pack but all CmpD nodes in the pack have the same in(2)\n+    }\/\/for: in2_pk is not pack but all Cmp nodes in the pack have the same in(2)\n@@ -2053,10 +2030,10 @@\n-  \/\/now check if cmpd_pk may be subsumed in vector built for cmovd_pk\n-  int cmovd_ind1, cmovd_ind2;\n-  if (cmpd_pk->at(0)->in(1) == cmovd_pk->at(0)->as_CMove()->in(CMoveNode::IfFalse)\n-   && cmpd_pk->at(0)->in(2) == cmovd_pk->at(0)->as_CMove()->in(CMoveNode::IfTrue)) {\n-      cmovd_ind1 = CMoveNode::IfFalse;\n-      cmovd_ind2 = CMoveNode::IfTrue;\n-  } else if (cmpd_pk->at(0)->in(2) == cmovd_pk->at(0)->as_CMove()->in(CMoveNode::IfFalse)\n-          && cmpd_pk->at(0)->in(1) == cmovd_pk->at(0)->as_CMove()->in(CMoveNode::IfTrue)) {\n-      cmovd_ind2 = CMoveNode::IfFalse;\n-      cmovd_ind1 = CMoveNode::IfTrue;\n+  \/\/now check if cmp_pk may be subsumed in vector built for cmove_pk\n+  int cmove_ind1, cmove_ind2;\n+  if (cmp_pk->at(0)->in(1) == cmove_pk->at(0)->as_CMove()->in(CMoveNode::IfFalse)\n+   && cmp_pk->at(0)->in(2) == cmove_pk->at(0)->as_CMove()->in(CMoveNode::IfTrue)) {\n+      cmove_ind1 = CMoveNode::IfFalse;\n+      cmove_ind2 = CMoveNode::IfTrue;\n+  } else if (cmp_pk->at(0)->in(2) == cmove_pk->at(0)->as_CMove()->in(CMoveNode::IfFalse)\n+          && cmp_pk->at(0)->in(1) == cmove_pk->at(0)->as_CMove()->in(CMoveNode::IfTrue)) {\n+      cmove_ind2 = CMoveNode::IfFalse;\n+      cmove_ind1 = CMoveNode::IfTrue;\n@@ -2068,3 +2045,3 @@\n-  for (uint j = 1; j < cmpd_pk->size(); j++) {\n-    if (cmpd_pk->at(j)->in(1) != cmovd_pk->at(j)->as_CMove()->in(cmovd_ind1)\n-        || cmpd_pk->at(j)->in(2) != cmovd_pk->at(j)->as_CMove()->in(cmovd_ind2)) {\n+  for (uint j = 1; j < cmp_pk->size(); j++) {\n+    if (cmp_pk->at(j)->in(1) != cmove_pk->at(j)->as_CMove()->in(cmove_ind1)\n+        || cmp_pk->at(j)->in(2) != cmove_pk->at(j)->as_CMove()->in(cmove_ind2)) {\n@@ -2074,1 +2051,1 @@\n-  NOT_PRODUCT(if(_sw->is_trace_cmov()) { tty->print(\"CMoveKit::test_cmpd_pack: cmpd pack for 1st CmpD %d is OK for vectorization: \", cmpd0->_idx); cmpd0->dump(); })\n+  NOT_PRODUCT(if(_sw->is_trace_cmov()) { tty->print(\"CMoveKit::test_cmp_pack: cmp pack for 1st Cmp %d is OK for vectorization: \", cmp0->_idx); cmp0->dump(); })\n@@ -2102,0 +2079,3 @@\n+    } else if (is_cmove_fp_opcode(opc)) {\n+      retValue = is_cmov_pack(p) && VectorNode::implemented(opc, size, velt_basic_type(p0));\n+      NOT_PRODUCT(if(retValue && is_trace_cmov()) {tty->print_cr(\"SWPointer::implemented: found cmove pack\"); print_pack(p);})\n@@ -2111,1 +2091,0 @@\n-      NOT_PRODUCT(if(retValue && is_trace_cmov() && is_cmov_pack(p)) {tty->print_cr(\"SWPointer::implemented: found cmpd pack\"); print_pack(p);})\n@@ -3722,10 +3701,0 @@\n-\/\/------------------------------remove_pack------------------------------\n-\/\/ Remove the pack in the packset\n-void SuperWord::remove_pack(Node_List* p) {\n-  for (uint i = 0; i < p->size(); i++) {\n-    Node* s = p->at(i);\n-    set_my_pack(s, NULL);\n-  }\n-  _packset.remove(p);\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":57,"deletions":88,"binary":false,"changes":145,"status":"modified"},{"patch":"@@ -217,4 +217,2 @@\n-  Node* is_CmpD_candidate(Node* nd) const; \/\/ otherwise return NULL\n-  \/\/ If the input pack is a cmove candidate, return true, otherwise return false.\n-  bool is_cmove_pack_candidate(Node_List* cmove_pk);\n-  \/\/ Determine if the current cmove pack can be vectorized.\n+  Node* is_Cmp_candidate(Node* nd) const; \/\/ otherwise return NULL\n+  \/\/ Determine if the current pack is a cmove candidate that can be vectorized.\n@@ -222,2 +220,2 @@\n-  void make_cmove_pack(Node_List* cmovd_pk);\n-  bool test_cmpd_pack(Node_List* cmpd_pk, Node_List* cmovd_pk);\n+  void make_cmove_pack(Node_List* cmove_pk);\n+  bool test_cmp_pack(Node_List* cmp_pk, Node_List* cmove_pk);\n@@ -458,1 +456,1 @@\n-  \/\/ is pack good for converting into one vector node replacing 12 nodes of Cmp, Bool, CMov\n+  \/\/ is pack good for converting into one vector node replacing bunches of Cmp, Bool, CMov nodes.\n@@ -461,0 +459,1 @@\n+  static bool is_cmove_fp_opcode(int opc) { return (opc == Op_CMoveF || opc == Op_CMoveD); }\n@@ -543,4 +542,2 @@\n-  \/\/ Clear the unused cmove pack and its related packs from superword candidate packset.\n-  void remove_cmove_and_related_packs(Node_List* cmove_pk);\n-  \/\/ Merge CMoveD into new vector-nodes\n-  void merge_packs_to_cmovd();\n+  \/\/ Merge CMove into new vector-nodes\n+  void merge_packs_to_cmove();\n@@ -593,2 +590,0 @@\n-  \/\/ Remove the pack in the packset\n-  void remove_pack(Node_List* p);\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8295407\n+ * @summary Superword should remove unsupported cmove packs from candidate packset\n+ * @library \/test\/lib \/\n+ * @run main TestUnsupportedConditionalMove\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+\n+public class TestUnsupportedConditionalMove {\n+    public static int LENGTH = 3000;\n+    public static float[] fa = new float[LENGTH];\n+    public static float[] fb = new float[LENGTH];\n+    public static boolean[] mask = new boolean[LENGTH];\n+\n+    public static void test() {\n+        for (int i = 0; i < fa.length; i++) {\n+            fb[i] = mask[i]? fa[i]: -fa[i];\n+        }\n+    }\n+\n+    public static void main(String[] k) {\n+        for (int i= 0; i < LENGTH; i++) {\n+            mask[i] = (i % 3 == 0);\n+            fa[i] = i + 1.0f;\n+        }\n+\n+        for (int i = 0; i < 10_000; i++) {\n+            test();\n+        }\n+\n+        for (int i = 0; i < LENGTH; i++) {\n+            if (i % 3 == 0) {\n+                Asserts.assertEquals(fb[i], i + 1.0f);\n+            } else {\n+                Asserts.assertEquals(fb[i], - (i + 1.0f));\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestUnsupportedConditionalMove.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}