{"files":[{"patch":"@@ -538,1 +538,1 @@\n-      merge_packs_to_cmovd();\n+      merge_packs_to_cmove();\n@@ -1414,1 +1414,1 @@\n-    use = _cmovev_kit.is_CmpD_candidate(s);\n+    use = _cmovev_kit.is_Cmp_candidate(s);\n@@ -1848,3 +1848,3 @@\n-\/\/------------------------------merge_packs_to_cmovd---------------------------\n-\/\/ Merge qualified CMoveD into new vector-nodes\n-\/\/ We want to catch this pattern and subsume CmpD and Bool into CMoveD\n+\/\/------------------------------merge_packs_to_cmove---------------------------\n+\/\/ Merge qualified CMove into new vector-nodes\n+\/\/ We want to catch this pattern and subsume Cmp and Bool into CMove\n@@ -1852,1 +1852,1 @@\n-\/\/                   SubD             ConD\n+\/\/                   Sub              Con\n@@ -1860,1 +1860,1 @@\n-\/\/         CmpD        |         \/\n+\/\/         Cmp         |         \/\n@@ -1869,1 +1869,1 @@\n-\/\/                   CMoveD\n+\/\/                   CMove\n@@ -1872,1 +1872,1 @@\n-void SuperWord::merge_packs_to_cmovd() {\n+void SuperWord::merge_packs_to_cmove() {\n@@ -1882,1 +1882,1 @@\n-      tty->print_cr(\"\\nSuperWord::merge_packs_to_cmovd(): After merge\");\n+      tty->print_cr(\"\\nSuperWord::merge_packs_to_cmove(): After merge\");\n@@ -1903,1 +1903,1 @@\n-Node* CMoveKit::is_CmpD_candidate(Node* def) const {\n+Node* CMoveKit::is_Cmp_candidate(Node* def) const {\n@@ -1936,1 +1936,1 @@\n-      bol->in(0) != NULL || \/\/ BoolNode has control flow!!\n+      bol->in(0) != NULL || \/\/ Bool node has control flow!!\n@@ -1950,1 +1950,1 @@\n-      cmp->in(0) != NULL || \/\/ CmpNode has control flow!!\n+      cmp->in(0) != NULL || \/\/ Cmp node has control flow!!\n@@ -1960,1 +1960,1 @@\n-  if (!test_cmpd_pack(cmp_pk, cmove_pk)) {\n+  if (!test_cmp_pack(cmp_pk, cmove_pk)) {\n@@ -1999,7 +1999,7 @@\n-bool CMoveKit::test_cmpd_pack(Node_List* cmpd_pk, Node_List* cmovd_pk) {\n-  Node* cmpd0 = cmpd_pk->at(0);\n-  assert(cmpd0->is_Cmp(), \"CMoveKit::test_cmpd_pack: should be CmpDNode\");\n-  assert(cmovd_pk->at(0)->is_CMove(), \"CMoveKit::test_cmpd_pack: should be CMoveD\");\n-  assert(cmpd_pk->size() == cmovd_pk->size(), \"CMoveKit::test_cmpd_pack: should be same size\");\n-  Node* in1 = cmpd0->in(1);\n-  Node* in2 = cmpd0->in(2);\n+bool CMoveKit::test_cmp_pack(Node_List* cmp_pk, Node_List* cmove_pk) {\n+  Node* cmp0 = cmp_pk->at(0);\n+  assert(cmp0->is_Cmp(), \"CMoveKit::test_cmp_pack: should be Cmp Node\");\n+  assert(cmove_pk->at(0)->is_CMove(), \"CMoveKit::test_cmp_pack: should be CMove\");\n+  assert(cmp_pk->size() == cmove_pk->size(), \"CMoveKit::test_cmp_pack: should be same size\");\n+  Node* in1 = cmp0->in(1);\n+  Node* in2 = cmp0->in(2);\n@@ -2009,2 +2009,2 @@\n-  if (  (in1_pk != NULL && in1_pk->size() != cmpd_pk->size())\n-     || (in2_pk != NULL && in2_pk->size() != cmpd_pk->size()) ) {\n+  if (  (in1_pk != NULL && in1_pk->size() != cmp_pk->size())\n+     || (in2_pk != NULL && in2_pk->size() != cmp_pk->size()) ) {\n@@ -2016,2 +2016,2 @@\n-    for (uint j = 1; j < cmpd_pk->size(); j++) {\n-      if (cmpd_pk->at(j)->in(1) != in1) {\n+    for (uint j = 1; j < cmp_pk->size(); j++) {\n+      if (cmp_pk->at(j)->in(1) != in1) {\n@@ -2020,1 +2020,1 @@\n-    }\/\/for: in1_pk is not pack but all CmpD nodes in the pack have the same in(1)\n+    }\/\/for: in1_pk is not pack but all Cmp nodes in the pack have the same in(1)\n@@ -2024,2 +2024,2 @@\n-    for (uint j = 1; j < cmpd_pk->size(); j++) {\n-      if (cmpd_pk->at(j)->in(2) != in2) {\n+    for (uint j = 1; j < cmp_pk->size(); j++) {\n+      if (cmp_pk->at(j)->in(2) != in2) {\n@@ -2028,12 +2028,12 @@\n-    }\/\/for: in2_pk is not pack but all CmpD nodes in the pack have the same in(2)\n-  }\n-  \/\/now check if cmpd_pk may be subsumed in vector built for cmovd_pk\n-  int cmovd_ind1, cmovd_ind2;\n-  if (cmpd_pk->at(0)->in(1) == cmovd_pk->at(0)->as_CMove()->in(CMoveNode::IfFalse)\n-   && cmpd_pk->at(0)->in(2) == cmovd_pk->at(0)->as_CMove()->in(CMoveNode::IfTrue)) {\n-      cmovd_ind1 = CMoveNode::IfFalse;\n-      cmovd_ind2 = CMoveNode::IfTrue;\n-  } else if (cmpd_pk->at(0)->in(2) == cmovd_pk->at(0)->as_CMove()->in(CMoveNode::IfFalse)\n-          && cmpd_pk->at(0)->in(1) == cmovd_pk->at(0)->as_CMove()->in(CMoveNode::IfTrue)) {\n-      cmovd_ind2 = CMoveNode::IfFalse;\n-      cmovd_ind1 = CMoveNode::IfTrue;\n+    }\/\/for: in2_pk is not pack but all Cmp nodes in the pack have the same in(2)\n+  }\n+  \/\/now check if cmp_pk may be subsumed in vector built for cmove_pk\n+  int cmove_ind1, cmove_ind2;\n+  if (cmp_pk->at(0)->in(1) == cmove_pk->at(0)->as_CMove()->in(CMoveNode::IfFalse)\n+   && cmp_pk->at(0)->in(2) == cmove_pk->at(0)->as_CMove()->in(CMoveNode::IfTrue)) {\n+      cmove_ind1 = CMoveNode::IfFalse;\n+      cmove_ind2 = CMoveNode::IfTrue;\n+  } else if (cmp_pk->at(0)->in(2) == cmove_pk->at(0)->as_CMove()->in(CMoveNode::IfFalse)\n+          && cmp_pk->at(0)->in(1) == cmove_pk->at(0)->as_CMove()->in(CMoveNode::IfTrue)) {\n+      cmove_ind2 = CMoveNode::IfFalse;\n+      cmove_ind1 = CMoveNode::IfTrue;\n@@ -2045,3 +2045,3 @@\n-  for (uint j = 1; j < cmpd_pk->size(); j++) {\n-    if (cmpd_pk->at(j)->in(1) != cmovd_pk->at(j)->as_CMove()->in(cmovd_ind1)\n-        || cmpd_pk->at(j)->in(2) != cmovd_pk->at(j)->as_CMove()->in(cmovd_ind2)) {\n+  for (uint j = 1; j < cmp_pk->size(); j++) {\n+    if (cmp_pk->at(j)->in(1) != cmove_pk->at(j)->as_CMove()->in(cmove_ind1)\n+        || cmp_pk->at(j)->in(2) != cmove_pk->at(j)->as_CMove()->in(cmove_ind2)) {\n@@ -2051,1 +2051,1 @@\n-  NOT_PRODUCT(if(_sw->is_trace_cmov()) { tty->print(\"CMoveKit::test_cmpd_pack: cmpd pack for 1st CmpD %d is OK for vectorization: \", cmpd0->_idx); cmpd0->dump(); })\n+  NOT_PRODUCT(if(_sw->is_trace_cmov()) { tty->print(\"CMoveKit::test_cmp_pack: cmp pack for 1st Cmp %d is OK for vectorization: \", cmp0->_idx); cmp0->dump(); })\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":44,"deletions":44,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-  Node* is_CmpD_candidate(Node* nd) const; \/\/ otherwise return NULL\n+  Node* is_Cmp_candidate(Node* nd) const; \/\/ otherwise return NULL\n@@ -220,2 +220,2 @@\n-  void make_cmove_pack(Node_List* cmovd_pk);\n-  bool test_cmpd_pack(Node_List* cmpd_pk, Node_List* cmovd_pk);\n+  void make_cmove_pack(Node_List* cmove_pk);\n+  bool test_cmp_pack(Node_List* cmp_pk, Node_List* cmove_pk);\n@@ -542,2 +542,2 @@\n-  \/\/ Merge CMoveD into new vector-nodes\n-  void merge_packs_to_cmovd();\n+  \/\/ Merge CMove into new vector-nodes\n+  void merge_packs_to_cmove();\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,2 +27,1 @@\n- * @summary C2 crash: Error: ShouldNotReachHere() in multiple vector tests with\n- *          -XX:-MonomorphicArrayCheck -XX:-UncommonNullCast\n+ * @summary Superword should remove unsupported cmove packs from candidate packset\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestUnsupportedConditionalMove.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}