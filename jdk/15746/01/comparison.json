{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import java.util.TreeSet;\n@@ -42,2 +43,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.IndexBuilder;\n-import jdk.javadoc.internal.doclets.toolkit.util.IndexItem;\n@@ -51,5 +50,0 @@\n-    \/**\n-     * Index of all the classes.\n-     *\/\n-    protected IndexBuilder indexBuilder;\n-\n@@ -61,1 +55,0 @@\n-     * @param indexBuilder Unicode based Index from {@link IndexBuilder}\n@@ -63,1 +56,1 @@\n-    public AllClassesIndexWriter(HtmlConfiguration configuration, IndexBuilder indexBuilder) {\n+    public AllClassesIndexWriter(HtmlConfiguration configuration) {\n@@ -65,1 +58,0 @@\n-        this.indexBuilder = indexBuilder;\n@@ -70,0 +62,1 @@\n+        messages.notice(\"doclet.Building_Index_For_All_Classes\");\n@@ -100,7 +93,3 @@\n-        for (Character unicode : indexBuilder.getFirstCharacters()) {\n-            for (IndexItem indexItem : indexBuilder.getItems(unicode)) {\n-                TypeElement typeElement = (TypeElement) indexItem.getElement();\n-                if (typeElement != null && utils.isCoreClass(typeElement)) {\n-                    addTableRow(table, typeElement);\n-                }\n-            }\n+        Set<TypeElement> typeElements = getTypeElements();\n+        for (TypeElement typeElement : typeElements) {\n+            addTableRow(table, typeElement);\n@@ -118,0 +107,18 @@\n+    private Set<TypeElement> getTypeElements() {\n+        Set<TypeElement> classes = new TreeSet<>(utils.comparators.allClassesComparator());\n+        boolean noDeprecated = options.noDeprecated();\n+        Set<TypeElement> includedTypes = configuration.getIncludedTypeElements();\n+        for (TypeElement typeElement : includedTypes) {\n+            if (utils.hasHiddenTag(typeElement) || !utils.isCoreClass(typeElement)) {\n+                continue;\n+            }\n+            if (noDeprecated\n+                    && (utils.isDeprecated(typeElement)\n+                    || utils.isDeprecated(utils.containingPackage(typeElement)))) {\n+                continue;\n+            }\n+            classes.add(typeElement);\n+        }\n+        return classes;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AllClassesIndexWriter.java","additions":24,"deletions":17,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -478,2 +478,2 @@\n-        if (hasConstants && configuration.mainIndex != null) {\n-            configuration.mainIndex.add(IndexItem.of(IndexItem.Category.TAGS,\n+        if (hasConstants && configuration.indexBuilder != null) {\n+            configuration.indexBuilder.add(IndexItem.of(IndexItem.Category.TAGS,\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ConstantsSummaryWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -89,2 +89,2 @@\n-        boolean hasExternalSpecs = configuration.mainIndex != null\n-                && !configuration.mainIndex.getItems(DocTree.Kind.SPEC).isEmpty();\n+        boolean hasExternalSpecs = configuration.indexBuilder != null\n+                && !configuration.indexBuilder.getItems(DocTree.Kind.SPEC).isEmpty();\n@@ -113,2 +113,2 @@\n-        if (configuration.mainIndex != null) {\n-            configuration.mainIndex.add(IndexItem.of(IndexItem.Category.TAGS, title, path));\n+        if (configuration.indexBuilder != null) {\n+            configuration.indexBuilder.add(IndexItem.of(IndexItem.Category.TAGS, title, path));\n@@ -121,1 +121,1 @@\n-        for (IndexItem ii : configuration.mainIndex.getItems(DocTree.Kind.SPEC)) {\n+        for (IndexItem ii : configuration.indexBuilder.getItems(DocTree.Kind.SPEC)) {\n@@ -233,1 +233,1 @@\n-        return configuration.mainIndex.getItems(DocTree.Kind.SPEC).stream()\n+        return configuration.indexBuilder.getItems(DocTree.Kind.SPEC).stream()\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ExternalSpecsWriter.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-    public HtmlIndexBuilder mainIndex;\n+    public HtmlIndexBuilder indexBuilder;\n@@ -310,1 +310,1 @@\n-            mainIndex = new HtmlIndexBuilder(this);\n+            indexBuilder = new HtmlIndexBuilder(this);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlConfiguration.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.IndexBuilder;\n@@ -276,3 +275,1 @@\n-            configuration.mainIndex.addElements();\n-            IndexBuilder allClassesIndex = new IndexBuilder(configuration, nodeprecated, true);\n-            allClassesIndex.addElements();\n+            configuration.indexBuilder.addElements();\n@@ -280,1 +277,1 @@\n-            writerFactory.newAllClassesIndexWriter(allClassesIndex).buildPage();\n+            writerFactory.newAllClassesIndexWriter().buildPage();\n@@ -285,1 +282,1 @@\n-            configuration.mainIndex.createSearchIndexFiles();\n+            configuration.indexBuilder.createSearchIndexFiles();\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDoclet.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1473,1 +1473,1 @@\n-        if (!headingContent.isEmpty() && configuration.mainIndex != null) {\n+        if (!headingContent.isEmpty() && configuration.indexBuilder != null) {\n@@ -1479,1 +1479,1 @@\n-            configuration.mainIndex.add(item);\n+            configuration.indexBuilder.add(item);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.Utils;\n@@ -54,1 +53,0 @@\n-    private final HtmlConfiguration configuration;\n@@ -57,1 +55,0 @@\n-    private final Utils utils;\n@@ -66,5 +63,3 @@\n-        super(configuration, configuration.getOptions().noDeprecated());\n-        this.configuration = configuration;\n-        resources = configuration.docResources;\n-        utils = configuration.utils;\n-        htmlIds = configuration.htmlIds;\n+        super(configuration);\n+        this.resources = configuration.docResources;\n+        this.htmlIds = configuration.htmlIds;\n@@ -82,3 +77,0 @@\n-        if (classesOnly) {\n-            return;\n-        }\n@@ -90,1 +82,1 @@\n-                                            (k, v) -> v == null ? 1 : v + 1);\n+                        (k, v) -> v == null ? 1 : v + 1);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlIndexBuilder.java","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-        IndexBuilder mainIndex = configuration.mainIndex;\n+        IndexBuilder mainIndex = configuration.indexBuilder;\n@@ -107,1 +107,1 @@\n-        this.mainIndex = configuration.mainIndex;\n+        this.mainIndex = configuration.indexBuilder;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/IndexWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -699,2 +699,2 @@\n-        if (configuration.mainIndex != null) {\n-            configuration.mainIndex.add(IndexItem.of(IndexItem.Category.TAGS,\n+        if (configuration.indexBuilder != null) {\n+            configuration.indexBuilder.add(IndexItem.of(IndexItem.Category.TAGS,\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SerializedFormWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,2 +76,2 @@\n-        boolean hasSystemProperties = configuration.mainIndex != null\n-                && !configuration.mainIndex.getItems(DocTree.Kind.SYSTEM_PROPERTY).isEmpty();\n+        boolean hasSystemProperties = configuration.indexBuilder != null\n+                && !configuration.indexBuilder.getItems(DocTree.Kind.SYSTEM_PROPERTY).isEmpty();\n@@ -98,2 +98,2 @@\n-        if (configuration.mainIndex != null) {\n-            configuration.mainIndex.add(IndexItem.of(IndexItem.Category.TAGS, title, path));\n+        if (configuration.indexBuilder != null) {\n+            configuration.indexBuilder.add(IndexItem.of(IndexItem.Category.TAGS, title, path));\n@@ -130,1 +130,1 @@\n-        return configuration.mainIndex.getItems(DocTree.Kind.SYSTEM_PROPERTY).stream()\n+        return configuration.indexBuilder.getItems(DocTree.Kind.SYSTEM_PROPERTY).stream()\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SystemPropertiesWriter.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -106,2 +106,2 @@\n-    public HtmlDocletWriter newAllClassesIndexWriter(IndexBuilder indexBuilder) {\n-        return new AllClassesIndexWriter(configuration, indexBuilder);\n+    public HtmlDocletWriter newAllClassesIndexWriter() {\n+        return new AllClassesIndexWriter(configuration);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/WriterFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -382,1 +382,1 @@\n-                configuration.mainIndex.add(item);\n+                configuration.indexBuilder.add(item);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/TagletWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.Messages;\n@@ -45,2 +44,2 @@\n- * one is indexed by the first character of each items name;\n- * the other is index by the item's category, indicating the JavaScript\n+ * one is indexed by the first character of each item's name;\n+ * the other is indexed by the item's category, indicating the JavaScript\n@@ -49,1 +48,1 @@\n-public class IndexBuilder {\n+public abstract class IndexBuilder {\n@@ -68,7 +67,2 @@\n-    \/**\n-     * Build this index only for classes?\n-     *\/\n-    protected final boolean classesOnly;\n-\n-    private final BaseConfiguration configuration;\n-    private final Utils utils;\n+    protected final BaseConfiguration configuration;\n+    protected final Utils utils;\n@@ -81,12 +75,0 @@\n-    \/**\n-     * Creates a new {@code IndexBuilder}.\n-     *\n-     * @param configuration the current configuration of the doclet\n-     * @param noDeprecated  true if -nodeprecated option is used,\n-     *                      false otherwise\n-     *\/\n-    public IndexBuilder(BaseConfiguration configuration,\n-                        boolean noDeprecated)\n-    {\n-        this(configuration, noDeprecated, false);\n-    }\n@@ -98,3 +80,0 @@\n-     * @param noDeprecated  true if -nodeprecated option is used,\n-     *                      false otherwise\n-     * @param classesOnly   include only classes in index\n@@ -102,4 +81,1 @@\n-    public IndexBuilder(BaseConfiguration configuration,\n-                        boolean noDeprecated,\n-                        boolean classesOnly)\n-    {\n+    public IndexBuilder(BaseConfiguration configuration) {\n@@ -109,9 +85,1 @@\n-        Messages messages = configuration.getMessages();\n-        if (classesOnly) {\n-            messages.notice(\"doclet.Building_Index_For_All_Classes\");\n-        } else {\n-            messages.notice(\"doclet.Building_Index\");\n-        }\n-\n-        this.noDeprecated = noDeprecated;\n-        this.classesOnly = classesOnly;\n+        configuration.getMessages().notice(\"doclet.Building_Index\");\n@@ -119,0 +87,1 @@\n+        noDeprecated = configuration.getOptions().noDeprecated();\n@@ -121,2 +90,1 @@\n-\n-        mainComparator = classesOnly ? makeClassComparator() : makeIndexComparator();\n+        mainComparator = makeComparator();\n@@ -126,2 +94,1 @@\n-     * Adds all the selected modules, packages, types and their members to the index,\n-     * or just the type elements if {@code classesOnly} is {@code true}.\n+     * Adds all the selected modules, packages, types and their members to the index.\n@@ -129,1 +96,1 @@\n-    public void addElements()  {\n+    public void addElements() {\n@@ -132,3 +99,1 @@\n-        if (classesOnly) {\n-            return;\n-        }\n+\n@@ -313,8 +278,0 @@\n-    \/**\n-     * Returns a comparator for the all-classes list.\n-     * @return a comparator for class element items\n-     *\/\n-    private Comparator<IndexItem> makeClassComparator() {\n-        return Comparator.comparing(IndexItem::getElement, utils.comparators.allClassesComparator());\n-    }\n-\n@@ -328,1 +285,1 @@\n-    private Comparator<IndexItem> makeIndexComparator() {\n+    private Comparator<IndexItem> makeComparator() {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/IndexBuilder.java","additions":13,"deletions":56,"binary":false,"changes":69,"status":"modified"}]}