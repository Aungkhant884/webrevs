{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,3 @@\n-    private final CountDownLatch cleanerInvoked = new CountDownLatch(1);\n-    private final Cleaner cleaner = Cleaner.create();\n+    private final static Cleaner cleaner = Cleaner.create();\n+\n+    private final CountDownLatch cleanerInvoked;\n@@ -41,1 +42,2 @@\n-        cleaner.register(o, () -> cleanerInvoked.countDown());\n+        this.cleanerInvoked = new CountDownLatch(1);\n+        cleaner.register(o, cleanerInvoked::countDown);\n@@ -44,1 +46,1 @@\n-    private void doit(int iter) {\n+    private void doIt(int iter) {\n@@ -46,1 +48,1 @@\n-            for (int i = 0; i < 10; i++) {\n+            for (int i = 0; i < 100; i++) {\n@@ -48,2 +50,2 @@\n-                System.out.println(\"doit() iter: \" + iter + \", gc \" + i);\n-                if (cleanerInvoked.await(1L, TimeUnit.SECONDS)) {\n+                System.out.println(\"doIt() iter: \" + iter + \", gc \" + i);\n+                if (cleanerInvoked.await(100L, TimeUnit.MILLISECONDS)) {\n@@ -65,1 +67,0 @@\n-     * @throws InterruptedException if the current thread is interrupted while waiting\n@@ -70,4 +71,9 @@\n-        for (int i = 0; i < 10; i++) {\n-            if (s.getAsBoolean()) return true;\n-            doit(i);\n-            try { Thread.sleep(1000); } catch (InterruptedException e) {\n+        for (int i = 0; i < 1000; i++) {\n+            if (s.getAsBoolean()) {\n+                return true;\n+            }\n+\n+            doIt(i);\n+            try {\n+                Thread.sleep(10);\n+            } catch (InterruptedException e) {\n@@ -77,0 +83,1 @@\n+\n","filename":"test\/lib\/jdk\/test\/lib\/util\/ForceGC.java","additions":20,"deletions":13,"binary":false,"changes":33,"status":"modified"}]}