{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import java.lang.ref.Reference;\n@@ -187,12 +188,9 @@\n-        \/\/ Only unmapped for the original Spliterator\n-        MemorySegment s = ss.mapIfUnmapped(fence);\n-        final int hi = fence, lo = index;\n-\n-        \/\/ Check if line separator hits the mid point\n-        int mid = (lo + hi) >>> 1;\n-        int c = s.get(ValueLayout.JAVA_BYTE, mid);\n-        if (c == '\\n') {\n-            mid++;\n-        } else if (c == '\\r') {\n-            \/\/ Check if a line separator of \"\\r\\n\"\n-            if (++mid < hi && s.get(ValueLayout.JAVA_BYTE, mid) == '\\n') {\n+        try {\n+            \/\/ Only unmapped for the original Spliterator\n+            MemorySegment s = ss.mapIfUnmapped(fence);\n+            final int hi = fence, lo = index;\n+\n+            \/\/ Check if line separator hits the mid point\n+            int mid = (lo + hi) >>> 1;\n+            int c = s.get(ValueLayout.JAVA_BYTE, mid);\n+            if (c == '\\n') {\n@@ -200,15 +198,4 @@\n-            }\n-        } else {\n-            \/\/ TODO give up after a certain distance from the mid point?\n-            \/\/ Scan to the left and right of the mid point\n-            int midL = mid - 1;\n-            int midR = mid + 1;\n-            mid = 0;\n-            while (midL > lo && midR < hi) {\n-                \/\/ Sample to the left\n-                c = s.get(ValueLayout.JAVA_BYTE, midL--);\n-                if (c == '\\n' || c == '\\r') {\n-                    \/\/ If c is \"\\r\" then no need to check for \"\\r\\n\"\n-                    \/\/ since the subsequent value was previously checked\n-                    mid = midL + 2;\n-                    break;\n+            } else if (c == '\\r') {\n+                \/\/ Check if a line separator of \"\\r\\n\"\n+                if (++mid < hi && s.get(ValueLayout.JAVA_BYTE, mid) == '\\n') {\n+                    mid++;\n@@ -216,0 +203,15 @@\n+            } else {\n+                \/\/ TODO give up after a certain distance from the mid point?\n+                \/\/ Scan to the left and right of the mid point\n+                int midL = mid - 1;\n+                int midR = mid + 1;\n+                mid = 0;\n+                while (midL > lo && midR < hi) {\n+                    \/\/ Sample to the left\n+                    c = s.get(ValueLayout.JAVA_BYTE, midL--);\n+                    if (c == '\\n' || c == '\\r') {\n+                        \/\/ If c is \"\\r\" then no need to check for \"\\r\\n\"\n+                        \/\/ since the subsequent value was previously checked\n+                        mid = midL + 2;\n+                        break;\n+                    }\n@@ -217,7 +219,9 @@\n-                \/\/ Sample to the right\n-                c = s.get(ValueLayout.JAVA_BYTE, midR++);\n-                if (c == '\\n' || c == '\\r') {\n-                    mid = midR;\n-                    \/\/ Check if line-separator is \"\\r\\n\"\n-                    if (c == '\\r' && mid < hi && s.get(ValueLayout.JAVA_BYTE, mid) == '\\n') {\n-                        mid++;\n+                    \/\/ Sample to the right\n+                    c = s.get(ValueLayout.JAVA_BYTE, midR++);\n+                    if (c == '\\n' || c == '\\r') {\n+                        mid = midR;\n+                        \/\/ Check if line-separator is \"\\r\\n\"\n+                        if (c == '\\r' && mid < hi && s.get(ValueLayout.JAVA_BYTE, mid) == '\\n') {\n+                            mid++;\n+                        }\n+                        break;\n@@ -225,1 +229,0 @@\n-                    break;\n@@ -228,1 +231,0 @@\n-        }\n@@ -230,4 +232,8 @@\n-        \/\/ The left spliterator will have the line-separator at the end\n-        return (mid > lo && mid < hi)\n-                ? new FileChannelLinesSpliterator(this, lo, index = mid)\n-                : null;\n+            \/\/ The left spliterator will have the line-separator at the end\n+            return (mid > lo && mid < hi)\n+                    ? new FileChannelLinesSpliterator(this, lo, index = mid)\n+                    : null;\n+        } finally {\n+            \/\/ Make sure the underlying `original` remains strongly referenced until the segment is fully used\n+            Reference.reachabilityFence(ss.original);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/FileChannelLinesSpliterator.java","additions":46,"deletions":40,"binary":false,"changes":86,"status":"modified"}]}