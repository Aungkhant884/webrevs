{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import jdk.internal.ref.CleanerFactory;\n@@ -34,0 +35,4 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n+import java.lang.ref.Cleaner;\n@@ -41,1 +46,0 @@\n-import java.util.concurrent.atomic.AtomicInteger;\n@@ -44,3 +48,0 @@\n-import jdk.internal.access.SharedSecrets;\n-import jdk.internal.access.JavaNioAccess;\n-\n@@ -48,1 +49,1 @@\n- * A file-based lines spliterator, leveraging a shared mapped byte buffer and\n+ * A file-based lines spliterator, leveraging a shared mapped memory segment and\n@@ -54,1 +55,1 @@\n- * When the root spliterator is first split a mapped byte buffer will be created\n+ * When the root spliterator is first split a mapped memory segment will be created\n@@ -56,3 +57,3 @@\n- * Thus a mapped byte buffer is only required for parallel stream execution.\n- * Sub-spliterators will share that mapped byte buffer.  Splitting will use the\n- * mapped byte buffer to find the closest line feed characters(s) to the left or\n+ * Thus, a mapped memory segment is only required for parallel stream execution.\n+ * Sub-spliterators will share that mapped memory segment.  Splitting will use the\n+ * mapped memory segment to find the closest line feed characters(s) to the left or\n@@ -73,3 +74,3 @@\n-        UTF_8.INSTANCE,\n-        ISO_8859_1.INSTANCE,\n-        US_ASCII.INSTANCE\n+            UTF_8.INSTANCE,\n+            ISO_8859_1.INSTANCE,\n+            US_ASCII.INSTANCE\n@@ -78,3 +79,2 @@\n-    private final FileChannel fc;\n-    private final Charset cs;\n-    private int index;\n+    \/\/ This state is shared across all splits\n+    private final SharedState ss;\n@@ -82,0 +82,1 @@\n+    private int index;\n@@ -83,2 +84,0 @@\n-    \/\/ Null before first split, non-null when splitting, null when traversing\n-    private ByteBuffer buffer;\n@@ -88,12 +87,5 @@\n-    \/\/ Number of references to the shared mapped buffer.  Initialized to unity\n-    \/\/ when the buffer is created by the root spliterator.  Incremented in the\n-    \/\/ sub-spliterator constructor.  Decremented when 'buffer' transitions from\n-    \/\/ non-null to null, either when traversing begins or if the spliterator is\n-    \/\/ closed before traversal.  If the count is zero after decrementing, then\n-    \/\/ the buffer is unmapped.\n-    private final AtomicInteger bufRefCount;\n-\n-    FileChannelLinesSpliterator(FileChannel fc, Charset cs, int index, int fence) {\n-        this.fc = fc;\n-        this.cs = cs;\n-        this.index = index;\n+    FileChannelLinesSpliterator(FileChannel fc,\n+                                Charset cs,\n+                                int fence) {\n+        this.ss = new SharedState(this, fc, cs);\n+        this.index = 0;\n@@ -101,1 +93,0 @@\n-        this.bufRefCount = new AtomicInteger();\n@@ -104,4 +95,4 @@\n-    private FileChannelLinesSpliterator(FileChannel fc, Charset cs, int index,\n-        int fence, ByteBuffer buffer, AtomicInteger bufRefCount) {\n-        this.fc = fc;\n-        this.cs = cs;\n+    private FileChannelLinesSpliterator(FileChannelLinesSpliterator parent,\n+                                        int index,\n+                                        int fence) {\n+        this.ss = parent.ss;\n@@ -110,3 +101,0 @@\n-        this.buffer = buffer;\n-        this.bufRefCount = bufRefCount;\n-        this.bufRefCount.incrementAndGet();\n@@ -135,1 +123,1 @@\n-        \/**\n+        \/*\n@@ -153,1 +141,1 @@\n-                    bytesRead = fc.read(dst, index);\n+                    bytesRead = ss.fc.read(dst, index);\n@@ -156,1 +144,1 @@\n-                    bytesRead = fc.read(dst, index);\n+                    bytesRead = ss.fc.read(dst, index);\n@@ -169,1 +157,1 @@\n-                return fc.isOpen();\n+                return ss.fc.isOpen();\n@@ -174,1 +162,1 @@\n-                fc.close();\n+                ss.fc.close();\n@@ -177,1 +165,1 @@\n-        return new BufferedReader(Channels.newReader(rrbc, cs.newDecoder(), -1));\n+        return new BufferedReader(Channels.newReader(rrbc, ss.cs.newDecoder(), -1));\n@@ -183,1 +171,0 @@\n-            unmap();\n@@ -193,7 +180,0 @@\n-    private ByteBuffer getMappedByteBuffer() {\n-        try {\n-            return fc.map(FileChannel.MapMode.READ_ONLY, 0, fence);\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n-    }\n@@ -207,6 +187,2 @@\n-        ByteBuffer b;\n-        if ((b = buffer) == null) {\n-            b = buffer = getMappedByteBuffer();\n-            bufRefCount.set(1);\n-        }\n-\n+        \/\/ Only unmapped for the original Spliterator\n+        MemorySegment s = ss.mapIfUnmapped(fence);\n@@ -217,1 +193,1 @@\n-        int c =  b.get(mid);\n+        int c = s.get(ValueLayout.JAVA_BYTE, mid);\n@@ -222,1 +198,1 @@\n-            if (++mid < hi && b.get(mid) == '\\n') {\n+            if (++mid < hi && s.get(ValueLayout.JAVA_BYTE, mid) == '\\n') {\n@@ -233,1 +209,1 @@\n-                c = b.get(midL--);\n+                c = s.get(ValueLayout.JAVA_BYTE, midL--);\n@@ -242,1 +218,1 @@\n-                c = b.get(midR++);\n+                c = s.get(ValueLayout.JAVA_BYTE, midR++);\n@@ -246,1 +222,1 @@\n-                    if (c == '\\r' && mid < hi && b.get(mid) == '\\n') {\n+                    if (c == '\\r' && mid < hi && s.get(ValueLayout.JAVA_BYTE, mid) == '\\n') {\n@@ -256,3 +232,2 @@\n-               ? new FileChannelLinesSpliterator(fc, cs, lo, index = mid,\n-                                                 b, bufRefCount)\n-               : null;\n+                ? new FileChannelLinesSpliterator(this, lo, index = mid)\n+                : null;\n@@ -279,10 +254,35 @@\n-    private void unmap() {\n-        if (buffer != null) {\n-            ByteBuffer b = buffer;\n-            buffer = null;\n-            if (bufRefCount.decrementAndGet() == 0) {\n-                JavaNioAccess nioAccess = SharedSecrets.getJavaNioAccess();\n-                try {\n-                    nioAccess.unmapper(b).unmap();\n-                } catch (UnsupportedOperationException ignored) {\n-                }\n+    \/\/ Only called on the original root Spliterator and not on splits\n+    void close() {\n+        ss.cleanupAction.clean();\n+    }\n+\n+    private static final class SharedState {\n+        \/\/ Holds a reference to the original (top-most) spliterator to ensure the original's Cleaner\n+        \/\/ is invoked only once itself _and all its splits_ are no longer phantom reachable.\n+        final FileChannelLinesSpliterator original;\n+        final Cleaner.Cleanable cleanupAction;\n+        final FileChannel fc;\n+        final Charset cs;\n+        final Arena arena;\n+\n+        \/\/ Null before first split, non-null otherwise\n+        MemorySegment segment;\n+\n+        SharedState(FileChannelLinesSpliterator original,\n+                    FileChannel fc,\n+                    Charset cs) {\n+            this.original = original;\n+            this.fc = fc;\n+            this.cs = cs;\n+            this.arena = Arena.ofShared();\n+            this.cleanupAction = cleanupAction();\n+        }\n+\n+        MemorySegment mapIfUnmapped(int fence) {\n+            if (segment != null) {\n+                return segment;\n+            }\n+            try {\n+                return segment = fc.map(FileChannel.MapMode.READ_ONLY, 0, fence, arena);\n+            } catch (IOException e) {\n+                throw new UncheckedIOException(e);\n@@ -291,1 +291,0 @@\n-    }\n@@ -293,2 +292,7 @@\n-    void close() {\n-        unmap();\n+        Cleaner.Cleanable cleanupAction() {\n+            record Cleanup(Arena arena) implements Runnable {\n+                @Override public void run() { arena.close(); }\n+            }\n+            return CleanerFactory.cleaner().register(original, new Cleanup(arena));\n+        }\n+\n@@ -296,0 +300,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/FileChannelLinesSpliterator.java","additions":83,"deletions":78,"binary":false,"changes":161,"status":"modified"},{"patch":"@@ -4138,1 +4138,1 @@\n-                    new FileChannelLinesSpliterator(fc, cs, 0, (int) length);\n+                    new FileChannelLinesSpliterator(fc, cs,(int) length);\n@@ -4141,1 +4141,1 @@\n-                        .onClose(() -> fcls.close());\n+                        .onClose(fcls::close);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Files.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @summary Unit test for checking parallel use of Files::lines\n+ * @run junit LinesParallel\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.LockSupport;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class LinesParallel {\n+\n+    \/\/ file used by the tests\n+    private Path tmpFile;\n+\n+    @BeforeEach\n+    void setup() throws IOException {\n+        tmpFile = Files.createTempFile(\"text_file\", null);\n+        Files.write(tmpFile, genBytes(20_000), StandardOpenOption.CREATE);\n+    }\n+\n+    @AfterEach\n+    void cleanup() throws IOException {\n+        Files.deleteIfExists(tmpFile);\n+    }\n+\n+    @Test\n+    void basicEquality() throws IOException {\n+        List<String> expected;\n+        List<String> actual;\n+\n+        try (var lines = Files.lines(tmpFile, StandardCharsets.UTF_8)) {\n+            expected = lines.toList();\n+        }\n+\n+        try (var lines = Files.lines(tmpFile, StandardCharsets.UTF_8)) {\n+            actual = lines.parallel().toList();\n+        }\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+        \/*\n+         * The objective of this test is to ensure it is very likely the mapped\n+         * memory region in the underlying Spliterator is released in a proper way.\n+         *\n+         * This works by creating parallel streams of various lengths and then\n+         * , at the same time, invoking GC frequently (the mapped memory region can\n+         * be freed both explicitly via the `Stream::close` method and via the GC).\n+         *\/\n+    void fuzzer() throws IOException {\n+\n+        AtomicBoolean ready = new AtomicBoolean();\n+        Thread.ofPlatform().factory().newThread(() -> {\n+            while (!ready.get()) {\n+                System.gc();\n+                \/\/ Hammer GC\n+                LockSupport.parkNanos(1_000);\n+            }\n+        });\n+\n+        int elements;\n+        try (var lines = Files.lines(tmpFile, StandardCharsets.UTF_8)) {\n+            elements = Math.toIntExact(lines.count());\n+        }\n+\n+        long cnt = 0;\n+\n+        for (int i = 0; i < 100; i++) {\n+            \/\/ Properly close the Stream\n+            try (var lines = Files.lines(tmpFile, StandardCharsets.UTF_8)) {\n+                List<String> list = lines.parallel()\n+                        .limit(((long) elements * i \/ 100))\n+                        .toList();\n+                cnt += list.size();\n+            }\n+\n+            \/\/ Leave the Stream dangling\n+            List<String> list = Files.lines(tmpFile, StandardCharsets.UTF_8)\n+                    .parallel()\n+                    .limit(((long) elements * i \/ 100))\n+                    .toList();\n+            cnt += list.size();\n+        }\n+\n+        \/\/ Make the background thread exit\n+        ready.set(true);\n+        System.out.println(cnt);\n+    }\n+\n+    \/**\n+     * Returns a byte[] of at least the given size with random content and\n+     * with newlines at random places\n+     *\/\n+    private static byte[] genBytes(int size) {\n+        Random rnd = new Random(42);\n+        int maxLen = 127;\n+        byte[] arr = new byte[size + maxLen + 2];\n+        int c = 0;\n+        while (c < size) {\n+            int lineLen = rnd.nextInt(3, 127);\n+            int end = c + lineLen;\n+            for (; c < end; c++) {\n+                arr[c] = 'a';\n+            }\n+            arr[c++] = '\\r';\n+            arr[c++] = '\\n';\n+        }\n+        \/\/ No harm we might have one or more \\0 at the end\n+        return arr;\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/nio\/file\/Files\/LinesParallel.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"}]}