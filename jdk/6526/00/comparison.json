{"files":[{"patch":"@@ -57,1 +57,1 @@\n-    DEBUG_ONLY(verify_raw_mem(C->root());)\n+    \/\/DEBUG_ONLY(verify_raw_mem(C->root());)\n@@ -967,1 +967,1 @@\n-void ShenandoahBarrierC2Support::call_lrb_stub(Node*& ctrl, Node*& val, Node* load_addr, Node*& result_mem, Node* raw_mem,\n+void ShenandoahBarrierC2Support::call_lrb_stub(Node*& ctrl, Node*& val, Node* load_addr,\n@@ -972,7 +972,0 @@\n-  \/\/ The slow path stub consumes and produces raw memory in addition\n-  \/\/ to the existing memory edges\n-  Node* base = find_bottom_mem(ctrl, phase);\n-  MergeMemNode* mm = MergeMemNode::make(base);\n-  mm->set_memory_at(Compile::AliasIdxRaw, raw_mem);\n-  phase->register_new_node(mm, ctrl);\n-\n@@ -1016,1 +1009,1 @@\n-  call->init_req(TypeFunc::Memory, mm);\n+  call->init_req(TypeFunc::Memory, phase->C->top());\n@@ -1024,2 +1017,0 @@\n-  result_mem = new ProjNode(call, TypeFunc::Memory);\n-  phase->register_new_node(result_mem, call);\n@@ -1344,1 +1335,0 @@\n-\n@@ -1348,2 +1338,0 @@\n-    Node* init_raw_mem = raw_mem;\n-    Node* raw_mem_for_ctrl = fixer.find_mem(ctrl, NULL);\n@@ -1362,1 +1350,0 @@\n-    Node* raw_mem_phi = PhiNode::make(region, raw_mem, Type::MEMORY, TypeRawPtr::BOTTOM);\n@@ -1375,1 +1362,0 @@\n-    raw_mem_phi->init_req(_heap_stable, raw_mem);\n@@ -1387,1 +1373,0 @@\n-      raw_mem_phi->init_req(_not_cset, raw_mem);\n@@ -1391,1 +1376,0 @@\n-      raw_mem_phi->del_req(_not_cset);\n@@ -1432,1 +1416,1 @@\n-    call_lrb_stub(ctrl, val, addr, result_mem, raw_mem, lrb->decorators(), phase);\n+    call_lrb_stub(ctrl, val, addr, lrb->decorators(), phase);\n@@ -1435,1 +1419,0 @@\n-    raw_mem_phi->init_req(_evac_path, result_mem);\n@@ -1440,1 +1423,0 @@\n-    phase->register_new_node(raw_mem_phi, region);\n@@ -1453,1 +1435,1 @@\n-      assert(n != init_raw_mem, \"should leave input raw mem above the barrier\");\n+      assert(n != raw_mem, \"should leave input raw mem above the barrier\");\n@@ -1457,8 +1439,0 @@\n-\n-    \/\/ The slow path call produces memory: hook the raw memory phi\n-    \/\/ from the expanded load reference barrier with the rest of the graph\n-    \/\/ which may require adding memory phis at every post dominated\n-    \/\/ region and at enclosing loop heads. Use the memory state\n-    \/\/ collected in memory_nodes to fix the memory graph. Update that\n-    \/\/ memory state as we go.\n-    fixer.fix_mem(ctrl, region, init_raw_mem, raw_mem_for_ctrl, raw_mem_phi, uses);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":5,"deletions":31,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-  static void call_lrb_stub(Node*& ctrl, Node*& val, Node* load_addr, Node*& result_mem, Node* raw_mem,\n+  static void call_lrb_stub(Node*& ctrl, Node*& val, Node* load_addr,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}