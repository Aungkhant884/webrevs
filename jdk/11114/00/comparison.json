{"files":[{"patch":"@@ -49,1 +49,0 @@\n-compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/NativeCallTest.java 8296821 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -162,1 +162,7 @@\n-                asm.emitFloatRet(((RegisterValue) cc.getReturn()).getRegister());\n+                if (returnClazz == float.class) {\n+                    asm.emitFloatRet(((RegisterValue) cc.getReturn()).getRegister());\n+                } else if (returnClazz == int.class) {\n+                    asm.emitIntRet(((RegisterValue) cc.getReturn()).getRegister());\n+                } else {\n+                    assert false : \"Unimplemented return type: \" + returnClazz;\n+                }\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/NativeCallTest.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -406,2 +406,1 @@\n-        emitGrowStack(cc.getStackSize());\n-        frameSize += cc.getStackSize();\n+        growFrame(cc.getStackSize());\n@@ -430,2 +429,1 @@\n-        emitGrowStack(-cc.getStackSize());\n-        frameSize -= cc.getStackSize();\n+        growFrame(-cc.getStackSize());\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.code.test\/src\/jdk\/vm\/ci\/code\/test\/amd64\/AMD64TestAssembler.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}