{"files":[{"patch":"@@ -506,0 +506,3 @@\n+        if (!arrayType.isArray()) {\n+            return parseUnknownArray(length, buf);\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/annotation\/AnnotationParser.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8266791\n+ * @summary Annotation property which is compiled as an array property but\n+ *          changed observed as a singular element should throw an\n+ *          AnnotationTypeMismatchException\n+ * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @run main ArityTypeMismatchTest\n+ *\/\n+\n+import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n+import jdk.internal.org.objectweb.asm.ClassWriter;\n+import jdk.internal.org.objectweb.asm.Opcodes;\n+import jdk.internal.org.objectweb.asm.Type;\n+\n+import java.lang.annotation.AnnotationTypeMismatchException;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+public class ArityTypeMismatchTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        \/*\n+         * This test creates an annotation with a member with a non-array type where the annotation\n+         * defines an array property of this type. This can happen if the annotation class is recompiled\n+         * without recompiling the code that declares an annotation of this type. In the example, a\n+         * class is defined to be annotated as\n+         *\n+         * @AnAnnotation(value = {\"v\"}) \/\/ should no longer be an array\n+         * class Carrier { }\n+         *\n+         * where @AnAnnotation expects a singular value.\n+         *\/\n+        ClassWriter writer = new ClassWriter(0);\n+        writer.visit(Opcodes.V1_8, 0, \"sample\/Carrier\", null, Type.getInternalName(Object.class), null);\n+        AnnotationVisitor v = writer.visitAnnotation(Type.getDescriptor(AnAnnotation.class), true);\n+        AnnotationVisitor v2 = v.visitArray(\"value\");\n+        v2.visit(null, \"v\");\n+        v2.visitEnd();\n+        v.visitEnd();\n+        writer.visitEnd();\n+        byte[] b = writer.toByteArray();\n+        ByteArrayClassLoader cl = new ByteArrayClassLoader(ArityTypeMismatchTest.class.getClassLoader());\n+        cl.init(b);\n+        AnAnnotation sample = cl.loadClass(\"sample.Carrier\").getAnnotation(AnAnnotation.class);\n+        try {\n+            String value = sample.value();\n+            throw new IllegalStateException(\"Found value: \" + value);\n+        } catch (AnnotationTypeMismatchException e) {\n+            if (!e.element().getName().equals(\"value\")) {\n+                throw new IllegalStateException(\"Unexpected element: \" + e.element());\n+            } else if (!e.foundType().equals(\"Array with component tag: s\")) {\n+                throw new IllegalStateException(\"Unexpected type: \" + e.foundType());\n+            }\n+        }\n+    }\n+\n+    @Retention(RetentionPolicy.RUNTIME)\n+    public @interface AnAnnotation {\n+        String value();\n+    }\n+\n+    public static class ByteArrayClassLoader extends ClassLoader {\n+\n+        public ByteArrayClassLoader(ClassLoader parent) {\n+            super(parent);\n+        }\n+\n+        public void init(byte[] b) {\n+            defineClass(\"sample.Carrier\", b, 0, b.length);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/annotation\/AnnotationTypeMismatchException\/ArityTypeMismatchTest.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}