{"files":[{"patch":"@@ -130,2 +130,1 @@\n-  Klass* k = array_klass(n+dimension(), CHECK_NULL);\n-  ArrayKlass* ak = ArrayKlass::cast(k);\n+  ArrayKlass* ak = array_klass(n + dimension(), CHECK_NULL);\n@@ -163,1 +162,1 @@\n-    ArrayKlass *ak = ArrayKlass::cast(higher_dimension());\n+    ArrayKlass *ak = higher_dimension();\n@@ -171,1 +170,1 @@\n-    ArrayKlass *ak = ArrayKlass::cast(higher_dimension());\n+    ArrayKlass *ak = higher_dimension();\n@@ -182,1 +181,1 @@\n-    ArrayKlass *ak = ArrayKlass::cast(higher_dimension());\n+    ArrayKlass *ak = higher_dimension();\n@@ -191,1 +190,1 @@\n-    ArrayKlass* ak = ArrayKlass::cast(higher_dimension());\n+    ArrayKlass* ak = higher_dimension();\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+class ObjArrayKlass;\n@@ -41,2 +42,2 @@\n-  Klass* volatile _higher_dimension;  \/\/ Refers the (n+1)'th-dimensional array (if present).\n-  Klass* volatile _lower_dimension;   \/\/ Refers the (n-1)'th-dimensional array (if present).\n+  ObjArrayKlass* volatile _higher_dimension;  \/\/ Refers the (n+1)'th-dimensional array (if present).\n+  ArrayKlass* volatile    _lower_dimension;   \/\/ Refers the (n-1)'th-dimensional array (if present).\n@@ -59,4 +60,4 @@\n-  Klass* higher_dimension() const     { return _higher_dimension; }\n-  inline Klass* higher_dimension_acquire() const; \/\/ load with acquire semantics\n-  void set_higher_dimension(Klass* k) { _higher_dimension = k; }\n-  inline void release_set_higher_dimension(Klass* k); \/\/ store with release semantics\n+  ObjArrayKlass* higher_dimension() const     { return _higher_dimension; }\n+  inline ObjArrayKlass* higher_dimension_acquire() const; \/\/ load with acquire semantics\n+  void set_higher_dimension(ObjArrayKlass* k) { _higher_dimension = k; }\n+  inline void release_set_higher_dimension(ObjArrayKlass* k); \/\/ store with release semantics\n@@ -64,2 +65,2 @@\n-  Klass* lower_dimension() const      { return _lower_dimension; }\n-  void set_lower_dimension(Klass* k)  { _lower_dimension = k; }\n+  ArrayKlass* lower_dimension() const      { return _lower_dimension; }\n+  void set_lower_dimension(ArrayKlass* k)  { _lower_dimension = k; }\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-inline Klass* ArrayKlass::higher_dimension_acquire() const {\n+inline ObjArrayKlass* ArrayKlass::higher_dimension_acquire() const {\n@@ -36,1 +36,1 @@\n-inline void ArrayKlass::release_set_higher_dimension(Klass* k) {\n+inline void ArrayKlass::release_set_higher_dimension(ObjArrayKlass* k) {\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1425,1 +1425,1 @@\n-  Klass* ak = array_klass(n, CHECK_NULL);\n+  ArrayKlass* ak = array_klass(n, CHECK_NULL);\n@@ -1489,1 +1489,1 @@\n-Klass* InstanceKlass::array_klass(int n, TRAPS) {\n+ArrayKlass* InstanceKlass::array_klass(int n, TRAPS) {\n@@ -1511,1 +1511,1 @@\n-Klass* InstanceKlass::array_klass_or_null(int n) {\n+ArrayKlass* InstanceKlass::array_klass_or_null(int n) {\n@@ -1521,1 +1521,1 @@\n-Klass* InstanceKlass::array_klass(TRAPS) {\n+ArrayKlass* InstanceKlass::array_klass(TRAPS) {\n@@ -1525,1 +1525,1 @@\n-Klass* InstanceKlass::array_klass_or_null() {\n+ArrayKlass* InstanceKlass::array_klass_or_null() {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1078,2 +1078,2 @@\n-  virtual Klass* array_klass(int n, TRAPS);\n-  virtual Klass* array_klass_or_null(int n);\n+  virtual ArrayKlass* array_klass(int n, TRAPS);\n+  virtual ArrayKlass* array_klass_or_null(int n);\n@@ -1082,2 +1082,2 @@\n-  virtual Klass* array_klass(TRAPS);\n-  virtual Klass* array_klass_or_null();\n+  virtual ArrayKlass* array_klass(TRAPS);\n+  virtual ArrayKlass* array_klass_or_null();\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -542,1 +542,1 @@\n-  virtual Klass* array_klass(int rank, TRAPS) = 0;\n+  virtual ArrayKlass* array_klass(int rank, TRAPS) = 0;\n@@ -545,1 +545,1 @@\n-  virtual Klass* array_klass(TRAPS) = 0;\n+  virtual ArrayKlass* array_klass(TRAPS) = 0;\n@@ -548,2 +548,2 @@\n-  virtual Klass* array_klass_or_null(int rank) = 0;\n-  virtual Klass* array_klass_or_null() = 0;\n+  virtual ArrayKlass* array_klass_or_null(int rank) = 0;\n+  virtual ArrayKlass* array_klass_or_null() = 0;\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -172,3 +172,1 @@\n-  \/\/ Call to lower_dimension uses this pointer, so most be called before a\n-  \/\/ possible GC\n-  Klass* ld_klass = lower_dimension();\n+  ArrayKlass* ld_klass = lower_dimension();\n@@ -181,2 +179,1 @@\n-        ArrayKlass* ak = ArrayKlass::cast(ld_klass);\n-        oop sub_array = ak->multi_allocate(rank-1, &sizes[1], CHECK_NULL);\n+        oop sub_array = ld_klass->multi_allocate(rank - 1, &sizes[1], CHECK_NULL);\n@@ -311,1 +308,1 @@\n-Klass* ObjArrayKlass::array_klass(int n, TRAPS) {\n+ArrayKlass* ObjArrayKlass::array_klass(int n, TRAPS) {\n@@ -329,1 +326,1 @@\n-        Klass* k =\n+        ObjArrayKlass* ak =\n@@ -331,1 +328,0 @@\n-        ObjArrayKlass* ak = ObjArrayKlass::cast(k);\n@@ -340,1 +336,1 @@\n-  ObjArrayKlass *ak = ObjArrayKlass::cast(higher_dimension());\n+  ObjArrayKlass *ak = higher_dimension();\n@@ -345,1 +341,1 @@\n-Klass* ObjArrayKlass::array_klass_or_null(int n) {\n+ArrayKlass* ObjArrayKlass::array_klass_or_null(int n) {\n@@ -356,1 +352,1 @@\n-  ObjArrayKlass *ak = ObjArrayKlass::cast(higher_dimension());\n+  ObjArrayKlass *ak = higher_dimension();\n@@ -360,1 +356,1 @@\n-Klass* ObjArrayKlass::array_klass(TRAPS) {\n+ArrayKlass* ObjArrayKlass::array_klass(TRAPS) {\n@@ -364,1 +360,1 @@\n-Klass* ObjArrayKlass::array_klass_or_null() {\n+ArrayKlass* ObjArrayKlass::array_klass_or_null() {\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -100,2 +100,2 @@\n-  virtual Klass* array_klass(int n, TRAPS);\n-  virtual Klass* array_klass_or_null(int n);\n+  virtual ArrayKlass* array_klass(int n, TRAPS);\n+  virtual ArrayKlass* array_klass_or_null(int n);\n@@ -104,2 +104,2 @@\n-  virtual Klass* array_klass(TRAPS);\n-  virtual Klass* array_klass_or_null();\n+  virtual ArrayKlass* array_klass(TRAPS);\n+  virtual ArrayKlass* array_klass_or_null();\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-Klass* TypeArrayKlass::array_klass(int n, TRAPS) {\n+ArrayKlass* TypeArrayKlass::array_klass(int n, TRAPS) {\n@@ -201,1 +201,1 @@\n-  ObjArrayKlass* h_ak = ObjArrayKlass::cast(higher_dimension());\n+  ObjArrayKlass* h_ak = higher_dimension();\n@@ -207,1 +207,1 @@\n-Klass* TypeArrayKlass::array_klass_or_null(int n) {\n+ArrayKlass* TypeArrayKlass::array_klass_or_null(int n) {\n@@ -218,1 +218,1 @@\n-  ObjArrayKlass* h_ak = ObjArrayKlass::cast(higher_dimension());\n+  ObjArrayKlass* h_ak = higher_dimension();\n@@ -222,1 +222,1 @@\n-Klass* TypeArrayKlass::array_klass(TRAPS) {\n+ArrayKlass* TypeArrayKlass::array_klass(TRAPS) {\n@@ -226,1 +226,1 @@\n-Klass* TypeArrayKlass::array_klass_or_null() {\n+ArrayKlass* TypeArrayKlass::array_klass_or_null() {\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -98,2 +98,2 @@\n-  virtual Klass* array_klass(int n, TRAPS);\n-  virtual Klass* array_klass_or_null(int n);\n+  virtual ArrayKlass* array_klass(int n, TRAPS);\n+  virtual ArrayKlass* array_klass_or_null(int n);\n@@ -102,2 +102,2 @@\n-  virtual Klass* array_klass(TRAPS);\n-  virtual Klass* array_klass_or_null();\n+  virtual ArrayKlass* array_klass(TRAPS);\n+  virtual ArrayKlass* array_klass_or_null();\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -208,2 +208,2 @@\n-  volatile_nonstatic_field(ArrayKlass,         _higher_dimension,                             Klass*)                                \\\n-  volatile_nonstatic_field(ArrayKlass,         _lower_dimension,                              Klass*)                                \\\n+  volatile_nonstatic_field(ArrayKlass,         _higher_dimension,                             ObjArrayKlass*)                        \\\n+  volatile_nonstatic_field(ArrayKlass,         _lower_dimension,                              ArrayKlass*)                           \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,2 +73,2 @@\n-  public Klass getHigherDimension() { return (Klass) higherDimension.getValue(this); }\n-  public Klass getLowerDimension()  { return (Klass) lowerDimension.getValue(this); }\n+  public ObjArrayKlass getHigherDimension() { return (ObjArrayKlass) higherDimension.getValue(this); }\n+  public ArrayKlass getLowerDimension()     { return (ArrayKlass) lowerDimension.getValue(this); }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/ArrayKlass.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,1 @@\n-    ObjArrayKlass ak = (ObjArrayKlass) getHigherDimension();\n+    ObjArrayKlass ak = getHigherDimension();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/ObjArrayKlass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,1 +113,1 @@\n-    ObjArrayKlass ak = (ObjArrayKlass) getHigherDimension();\n+    ObjArrayKlass ak = getHigherDimension();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/TypeArrayKlass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}