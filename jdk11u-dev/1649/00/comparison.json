{"files":[{"patch":"@@ -245,0 +245,1 @@\n+  GrowableArray<JavaObjectNode*> jobj_worklist;\n@@ -246,0 +247,1 @@\n+  bool found_nsr_alloc = false;\n@@ -259,1 +261,3 @@\n-        alloc_worklist.append(ptn->ideal_node());\n+        jobj_worklist.push(ptn);\n+      } else {\n+        found_nsr_alloc = true;\n@@ -264,0 +268,12 @@\n+  \/\/ Propagate NSR (Not Scalar Replaceable) state.\n+  if (found_nsr_alloc) {\n+    find_scalar_replaceable_allocs(jobj_worklist);\n+  }\n+\n+  for (int next = 0; next < jobj_worklist.length(); ++next) {\n+    JavaObjectNode* jobj = jobj_worklist.at(next);\n+    if (jobj->scalar_replaceable()) {\n+      alloc_worklist.append(jobj->ideal_node());\n+    }\n+  }\n+\n@@ -1762,9 +1778,13 @@\n-      \/\/ 2. An object is not scalar replaceable if the field into which it is\n-      \/\/ stored has multiple bases one of which is null.\n-      if (field->base_count() > 1) {\n-        for (BaseIterator i(field); i.has_next(); i.next()) {\n-          PointsToNode* base = i.get();\n-          if (base == null_obj) {\n-            jobj->set_scalar_replaceable(false);\n-            return;\n-          }\n+      for (BaseIterator i(field); i.has_next(); i.next()) {\n+        PointsToNode* base = i.get();\n+        \/\/ 2. An object is not scalar replaceable if the field into which it is\n+        \/\/ stored has multiple bases one of which is null.\n+        if ((base == null_obj) && (field->base_count() > 1)) {\n+          set_not_scalar_replaceable(jobj NOT_PRODUCT(COMMA \"is stored into field with potentially null base\"));\n+          return;\n+        }\n+        \/\/ 2.5. An object is not scalar replaceable if the field into which it is\n+        \/\/ stored has NSR base.\n+        if (!base->scalar_replaceable()) {\n+          set_not_scalar_replaceable(jobj NOT_PRODUCT(COMMA \"is stored into field with NSR base\"));\n+          return;\n@@ -1860,0 +1880,30 @@\n+\/\/ Propagate NSR (Not scalar replaceable) state.\n+void ConnectionGraph::find_scalar_replaceable_allocs(GrowableArray<JavaObjectNode*>& jobj_worklist) {\n+  int jobj_length = jobj_worklist.length();\n+  bool found_nsr_alloc = true;\n+  while (found_nsr_alloc) {\n+    found_nsr_alloc = false;\n+    for (int next = 0; next < jobj_length; ++next) {\n+      JavaObjectNode* jobj = jobj_worklist.at(next);\n+      for (UseIterator i(jobj); (jobj->scalar_replaceable() && i.has_next()); i.next()) {\n+        PointsToNode* use = i.get();\n+        if (use->is_Field()) {\n+          FieldNode* field = use->as_Field();\n+          assert(field->is_oop() && field->scalar_replaceable(), \"sanity\");\n+          assert(field->offset() != Type::OffsetBot, \"sanity\");\n+          for (BaseIterator i(field); i.has_next(); i.next()) {\n+            PointsToNode* base = i.get();\n+            \/\/ An object is not scalar replaceable if the field into which\n+            \/\/ it is stored has NSR base.\n+            if ((base != null_obj) && !base->scalar_replaceable()) {\n+              set_not_scalar_replaceable(jobj NOT_PRODUCT(COMMA \"is stored into field with NSR base\"));\n+              found_nsr_alloc = true;\n+              break;\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":60,"deletions":10,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -459,0 +459,3 @@\n+  \/\/ Propagate NSR (Not scalar replaceable) state.\n+  void find_scalar_replaceable_allocs(GrowableArray<JavaObjectNode*>& jobj_worklist);\n+\n@@ -585,0 +588,5 @@\n+  void set_not_scalar_replaceable(PointsToNode* ptn NOT_PRODUCT(COMMA const char* reason)) const {\n+    ptn->set_scalar_replaceable(false);\n+  }\n+\n+\n","filename":"src\/hotspot\/share\/opto\/escape.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}