{"files":[{"patch":"@@ -5028,0 +5028,4 @@\n+        protected void reportIllegalSignature(Type t) {\n+            throw new InvalidSignatureException(t);\n+        }\n+\n@@ -5062,1 +5066,1 @@\n-                        throw new InvalidSignatureException(type);\n+                        reportIllegalSignature(type);\n@@ -5107,1 +5111,1 @@\n-                        throw new InvalidSignatureException(type);\n+                        reportIllegalSignature(type);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import com.sun.tools.javac.code.Types.SignatureGenerator.InvalidSignatureException;\n+import com.sun.tools.javac.resources.CompilerProperties.Errors;\n+import com.sun.tools.javac.resources.CompilerProperties.Fragments;\n@@ -2033,1 +2036,1 @@\n-                    buf.append(typeSig(owner.type));\n+                    buf.append(typeSig(owner.type, true));\n@@ -2049,1 +2052,1 @@\n-                        buf.append(typeSig(fv.type));\n+                        buf.append(typeSig(fv.type, true));\n@@ -2438,3 +2441,13 @@\n-        L2MSignatureGenerator sg = new L2MSignatureGenerator();\n-        sg.assembleSig(type);\n-        return sg.toString();\n+        return typeSig(type, false);\n+    }\n+\n+    private String typeSig(Type type, boolean allowIllegalSignature) {\n+        try {\n+            L2MSignatureGenerator sg = new L2MSignatureGenerator(allowIllegalSignature);\n+            sg.assembleSig(type);\n+            return sg.toString();\n+        } catch (InvalidSignatureException ex) {\n+            Symbol c = attrEnv.enclClass.sym;\n+            log.error(Errors.CannotGenerateClass(c, Fragments.IllegalSignature(c, ex.type())));\n+            return \"<ERRONEOUS>\";\n+        }\n@@ -2444,3 +2457,9 @@\n-        L2MSignatureGenerator sg = new L2MSignatureGenerator();\n-        sg.assembleClassSig(type);\n-        return sg.toString();\n+        try {\n+            L2MSignatureGenerator sg = new L2MSignatureGenerator(false);\n+            sg.assembleClassSig(type);\n+            return sg.toString();\n+        } catch (InvalidSignatureException ex) {\n+            Symbol c = attrEnv.enclClass.sym;\n+            log.error(Errors.CannotGenerateClass(c, Fragments.IllegalSignature(c, ex.type())));\n+            return \"<ERRONEOUS>\";\n+        }\n@@ -2459,1 +2478,7 @@\n-        L2MSignatureGenerator() {\n+        \/**\n+         * Are signatures incompatible with JVM spec allowed?\n+         * Used by {@link LambdaTranslationContext#serializedLambdaDisambiguation()}.\n+         *\/\n+        boolean allowIllegalSignatures;\n+\n+        L2MSignatureGenerator(boolean allowIllegalSignatures) {\n@@ -2461,0 +2486,8 @@\n+            this.allowIllegalSignatures = allowIllegalSignatures;\n+        }\n+\n+        @Override\n+        protected void reportIllegalSignature(Type t) {\n+            if (!allowIllegalSignatures) {\n+                super.reportIllegalSignature(t);\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":42,"deletions":9,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8210495\n+ * @summary compiler crashes because of illegal signature in otherwise legal code\n+ * @compile T8210495.java\n+ *\/\n+\n+import java.awt.*;\n+import java.awt.event.ActionListener;\n+import java.util.List;\n+\n+class T8210495 {\n+    interface IFilter {\n+        Component getComponent();\n+    }\n+\n+    static class Filter implements IFilter {\n+        @Override\n+        public Component getComponent() {\n+            return null;\n+        }\n+\n+    }\n+\n+    public Component buildFilter(List<? extends Filter> l, Dialog dialog) {\n+        Panel c = new Panel();\n+        l.stream()\n+                .map(f -> {\n+                    Button btn = (Button)f.getComponent();\n+                    btn.addActionListener((java.io.Serializable & ActionListener)evt -> {\n+                        applyFilter(f);\n+                        dialog.setVisible(false);\n+                    });\n+                    return btn;\n+                })\n+                .forEach(c::add);\n+        return c;\n+    }\n+\n+    private void applyFilter(IFilter f) { }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/8210495\/T8210495.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}