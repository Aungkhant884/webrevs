{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-package com.sun.beans.introspect;\n@@ -27,1 +26,1 @@\n-import com.sun.beans.util.Cache;\n+package com.sun.beans.introspect;\n@@ -33,0 +32,2 @@\n+import com.sun.beans.util.Cache;\n+\n@@ -57,0 +58,8 @@\n+    public static void clear() {\n+        CACHE.clear();\n+    }\n+\n+    public static void remove(Class<?> clz) {\n+        CACHE.remove(clz);\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/beans\/introspect\/ClassInfo.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -381,0 +381,1 @@\n+            ClassInfo.clear();\n@@ -407,0 +408,1 @@\n+            ClassInfo.remove(clz);\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/Introspector.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.beans.IntrospectionException;\n+import java.beans.Introspector;\n+import java.lang.ref.Reference;\n+import java.lang.ref.WeakReference;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+\n+\/**\n+ * @test\n+ * @bug 8231454\n+ * @summary Tests cache cleanup by the Introspector.flushXXX()\n+ *\/\n+public final class FlushClassInfoCache {\n+\n+    public static void main(String[] args) throws Exception {\n+        verify(getLoader(\"testClass\"));\n+        verify(getLoader(\"testAll\"));\n+        Reference<ClassLoader> loader = getLoader(\"test\");\n+        \/\/ Clear the cache in com.sun.beans.introspect.ClassInfo::CACHE\n+        Introspector.flushCaches();\n+        verify(loader);\n+    }\n+\n+    private static void verify(Reference<?> loader) throws Exception {\n+        int attempt = 0;\n+        while (loader.get() != null) {\n+            if (++attempt > 10) {\n+                throw new RuntimeException(\"Too many attempts: \" + attempt);\n+            }\n+            \/\/ Cannot generate OOM here, it will clear the CACHE as well\n+            System.gc();\n+            Thread.sleep(1000);\n+            System.out.println(\"Not freed :(\");\n+        }\n+    }\n+\n+    public static void test() {\n+        try {\n+            Introspector.getBeanInfo(FlushClassInfoCache.class);\n+        } catch (IntrospectionException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public static void testClass() {\n+        try {\n+            Introspector.getBeanInfo(FlushClassInfoCache.class);\n+            \/\/ Clear the cache in com.sun.beans.introspect.ClassInfo::CACHE\n+            Introspector.flushFromCaches(FlushClassInfoCache.class);\n+        } catch (IntrospectionException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public static void testAll() {\n+        try {\n+            Introspector.getBeanInfo(FlushClassInfoCache.class);\n+            \/\/ Clear the cache in com.sun.beans.introspect.ClassInfo::CACHE\n+            Introspector.flushCaches();\n+        } catch (IntrospectionException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static Reference<ClassLoader> getLoader(String m) throws Exception {\n+        URL url = FlushClassInfoCache.class.getProtectionDomain()\n+                                     .getCodeSource().getLocation();\n+        URLClassLoader loader = new URLClassLoader(new URL[]{url}, null);\n+        Class<?> cls = Class.forName(\"FlushClassInfoCache\", true, loader);\n+        cls.getDeclaredMethod(m).invoke(null);\n+        loader.close();\n+        return new WeakReference<>(loader);\n+    }\n+}\n","filename":"test\/jdk\/java\/beans\/Introspector\/FlushClassInfoCache.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"}]}