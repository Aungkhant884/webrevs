{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,3 +31,6 @@\n-import java.io.*;\n-import java.util.ArrayList;\n-import java.util.concurrent.TimeUnit;\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n@@ -39,13 +42,0 @@\n-    public Process killProc(boolean force) throws Exception {\n-        if (force) {\n-            p.destroyForcibly();\n-        } else {\n-            p.destroy();\n-        }\n-        return p;\n-    }\n-\n-    public boolean isAlive() {\n-        return p.isAlive();\n-    }\n-\n@@ -66,1 +56,11 @@\n-    public abstract void runTest() throws Exception;\n+    public void runTest() throws Exception {\n+        \/\/ The destroy() method is not tested because\n+        \/\/ the process streams are closed by the destroy() call.\n+        \/\/ After a destroy() call, the process terminates with a\n+        \/\/ SIGPIPE even if it was trapping SIGTERM.\n+        \/\/ So skip the trap test and go straight to destroyForcibly().\n+        p.destroyForcibly();\n+        p.waitFor();\n+        if (p.isAlive())\n+            throw new RuntimeException(\"Problem terminating the process.\");\n+    }\n@@ -81,2 +81,2 @@\n-        FileWriter fstream = new FileWriter(processTrapScript);\n-        try (BufferedWriter out = new BufferedWriter(fstream)) {\n+        try (FileWriter fstream = new FileWriter(processTrapScript);\n+             BufferedWriter out = new BufferedWriter(fstream)) {\n@@ -84,7 +84,1 @@\n-                \"echo \\\\\\\"ProcessTrap.sh started: trapping SIGTERM\/SIGINT\\\\\\\"\\n\" +\n-                \"trap bashtrap SIGTERM SIGINT\\n\" +\n-                \"bashtrap()\\n\" +\n-                \"{\\n\" +\n-                \"    echo \\\\\\\"SIGTERM\/SIGINT detected!\\\\\\\"\\n\" +\n-                \"}\\n\" +\n-                \"\\n\" +\n+                \"echo \\\\\\\"ProcessTrap.sh started\\\\\\\"\\n\" +\n@@ -99,27 +93,0 @@\n-    @Override\n-    public void runTest() throws Exception {\n-        killProc(false);\n-        Thread.sleep(1000);\n-        if (!p.isAlive())\n-            throw new RuntimeException(\"Process terminated prematurely.\");\n-        killProc(true).waitFor();\n-        if (p.isAlive())\n-            throw new RuntimeException(\"Problem terminating the process.\");\n-    }\n-}\n-\n-class MacTest extends UnixTest {\n-    public MacTest(File script) throws IOException {\n-        super(script);\n-    }\n-\n-    @Override\n-    public void runTest() throws Exception {\n-        \/\/ On Mac, it appears that when we close the processes streams\n-        \/\/ after a destroy() call, the process terminates with a\n-        \/\/ SIGPIPE even if it was trapping the SIGTERM, so as with\n-        \/\/ windows, we skip the trap test and go straight to destroyForcibly().\n-        killProc(true).waitFor();\n-        if (p.isAlive())\n-            throw new RuntimeException(\"Problem terminating the process.\");\n-    }\n@@ -136,4 +103,0 @@\n-    @Override\n-    public void runTest() throws Exception {\n-        killProc(true).waitFor();\n-    }\n@@ -151,1 +114,2 @@\n-            if (osName.startsWith(\"Linux\") == true\n+            if (osName.startsWith(\"Linux\")\n+                    || osName.startsWith(\"Mac OS\")\n@@ -155,2 +119,0 @@\n-            } else if (osName.startsWith(\"Mac OS\")) {\n-                return new MacTest(tempFile);\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/DestroyTest.java","additions":23,"deletions":61,"binary":false,"changes":84,"status":"modified"}]}