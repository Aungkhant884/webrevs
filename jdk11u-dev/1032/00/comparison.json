{"files":[{"patch":"@@ -1169,2 +1169,1 @@\n-        int numBands = outputSampleSize.length;\n-        for (int b = 0; b < numBands; b++) {\n+        for (int b = 0; b < inputBands; b++) {\n@@ -1183,2 +1182,2 @@\n-            scale = new int[numBands][];\n-            for (int b = 0; b < numBands; b++) {\n+            scale = new int[inputBands][];\n+            for (int b = 0; b < inputBands; b++) {\n@@ -1310,1 +1309,1 @@\n-                            for (int b = 0; b < numBands; b++) {\n+                            for (int b = 0; b < inputBands; b++) {\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/png\/PNGImageReader.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug     8211795\n+ * @summary Test verifies that PNGImageReader maintains proper\n+ *          number of bands for scale array when PNG image\n+ *          has tRNS chunk.\n+ * @run     main VerifyBitDepthScalingWithTRNSChunk\n+ *\/\n+\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n+import java.awt.Color;\n+import java.awt.image.IndexColorModel;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Iterator;\n+import javax.imageio.ImageTypeSpecifier;\n+import javax.imageio.ImageWriter;\n+import javax.imageio.ImageIO;\n+import javax.imageio.ImageWriteParam;\n+import javax.imageio.metadata.IIOInvalidTreeException;\n+import javax.imageio.metadata.IIOMetadata;\n+import javax.imageio.metadata.IIOMetadataNode;\n+import javax.imageio.stream.ImageOutputStream;\n+import javax.imageio.IIOImage;\n+\n+public class VerifyBitDepthScalingWithTRNSChunk {\n+\n+    private static BufferedImage img;\n+    private static ImageWriter writer;\n+    private static ImageWriteParam param;\n+    private static IIOMetadata metadata;\n+    private static byte[] imageByteArray;\n+\n+    private static void initialize(int type) {\n+        int width = 1;\n+        int height = 1;\n+        \/\/ create Palette & IndexColorModel for bitdepth 1\n+        int size = 2;\n+        int bitDepth = 1;\n+        byte[] r = new byte[size];\n+        byte[] g = new byte[size];\n+        byte[] b = new byte[size];\n+\n+        r[0] = g[0] = b[0] = 0;\n+        r[1] = g[1] = b[1] = (byte)255;\n+\n+        IndexColorModel cm = new IndexColorModel(bitDepth, size, r, g, b);\n+        img = new BufferedImage(width, height, type, cm);\n+        Graphics2D g2D = img.createGraphics();\n+        g2D.setColor(new Color(255, 255, 255));\n+        g2D.fillRect(0, 0, width, height);\n+\n+        Iterator<ImageWriter> iterWriter =\n+                ImageIO.getImageWritersBySuffix(\"png\");\n+        writer = iterWriter.next();\n+\n+        param = writer.getDefaultWriteParam();\n+        ImageTypeSpecifier specifier =\n+                ImageTypeSpecifier.\n+                        createFromBufferedImageType(type);\n+        metadata = writer.getDefaultImageMetadata(specifier, param);\n+    }\n+\n+    private static void createTRNSNode(String tRNS_value)\n+            throws IIOInvalidTreeException {\n+        IIOMetadataNode tRNS_gray = new IIOMetadataNode(\"tRNS_Grayscale\");\n+        tRNS_gray.setAttribute(\"gray\", tRNS_value);\n+\n+        IIOMetadataNode tRNS = new IIOMetadataNode(\"tRNS\");\n+        tRNS.appendChild(tRNS_gray);\n+        IIOMetadataNode root = new IIOMetadataNode(\"javax_imageio_png_1.0\");\n+        root.appendChild(tRNS);\n+        metadata.mergeTree(\"javax_imageio_png_1.0\", root);\n+    }\n+\n+    private static void writeImage() throws IOException {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ImageOutputStream ios = ImageIO.createImageOutputStream(baos);\n+        writer.setOutput(ios);\n+        writer.write(metadata, new IIOImage(img, null, metadata), param);\n+        writer.dispose();\n+\n+        baos.flush();\n+        imageByteArray = baos.toByteArray();\n+        baos.close();\n+    }\n+\n+    private static void verifyBitDepthScalingWithTRNSChunk()\n+        throws IOException {\n+        initialize(BufferedImage.TYPE_BYTE_BINARY);\n+        \/\/ Create tRNS node with some value and merge it with default metadata\n+        createTRNSNode(\"255\");\n+\n+        writeImage();\n+\n+        InputStream input= new ByteArrayInputStream(imageByteArray);\n+        \/*\n+         * Read 1 bit PNG Gray image with tRNS chunk.\n+         * Since bitDepth is 1 there will be scaling of each channel,\n+         * and it has tRNS chunk for which we will add extra alpha channel.\n+         * This will result in creation of scale array in PNGImageReader.\n+         *\/\n+        ImageIO.read(input);\n+        input.close();\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        verifyBitDepthScalingWithTRNSChunk();\n+    }\n+}\n+\n","filename":"test\/jdk\/javax\/imageio\/plugins\/png\/VerifyBitDepthScalingWithTRNSChunk.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"}]}