{"files":[{"patch":"@@ -60,2 +60,0 @@\n-# Save the stderr output of the command and print it along with stdout in case\n-# something goes wrong.\n","filename":"make\/GenerateLinkOptData.gmk","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-ifeq ($(call isTargetOs, windows), true)\n+ifeq ($(OPENJDK_TARGET_OS), windows)\n@@ -70,1 +70,0 @@\n-    $(call LogDebug, Setting _NT_SYMBOL_PATH to $(_NT_SYMBOL_PATH))\n","filename":"make\/RunTests.gmk","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-\t$(ECHO) > $(TEST_IMAGE_DIR)\/Readme.txt 'JDK tesUTIL_FIXUP_PATH_CYGWINt image'\n+\t$(ECHO) > $(TEST_IMAGE_DIR)\/Readme.txt 'JDK test image'\n","filename":"make\/TestImage.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,8 +92,0 @@\n-  if test \"x$CUSTOM_ROOT\" != x; then\n-    UTIL_FIXUP_PATH(CUSTOM_ROOT)\n-    WORKSPACE_ROOT=\"${CUSTOM_ROOT}\"\n-  else\n-    WORKSPACE_ROOT=\"${TOPDIR}\"\n-  fi\n-  AC_SUBST(WORKSPACE_ROOT)\n-\n","filename":"make\/autoconf\/basic.m4","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -356,1 +356,1 @@\n-  # Dtrace is usually found in \/usr\/sbin, but that directory may not\n+  # Dtrace is usually found in \/usr\/sbin on Solaris, but that directory may not\n","filename":"make\/autoconf\/basic_tools.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,21 +29,0 @@\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl\"; then\n-    # Clarify if it is wsl1 or wsl2, and use that as OS_ENV from this point forward\n-    $PATHTOOL -w \/ > \/dev\/null 2>&1\n-    if test $? -ne 0; then\n-      # Without Windows access to our root, it's definitely WSL1\n-      OPENJDK_BUILD_OS_ENV=windows.wsl1\n-    else\n-      # This test is not guaranteed, but there is no documented way of\n-      # distinguishing between WSL1 and WSL2. Assume only WSL2 has WSL_INTEROP\n-      # in \/run\/WSL\n-      if test -d \"\/run\/WSL\" ; then\n-        OPENJDK_BUILD_OS_ENV=windows.wsl2\n-      else\n-        OPENJDK_BUILD_OS_ENV=windows.wsl1\n-      fi\n-    fi\n-    # This is a bit silly since we really don't have a target env as such,\n-    # but do it to keep consistency.\n-    OPENJDK_TARGET_OS_ENV=$OPENJDK_BUILD_OS_ENV\n-  fi\n-\n@@ -60,1 +39,1 @@\n-    AC_MSG_ERROR([Unknown Windows environment. Neither cygwin, msys2, wsl1 nor wsl2 was detected.])\n+    AC_MSG_ERROR([Unknown Windows environment. Neither cygwin nor msys2 was detected.])\n@@ -64,1 +43,1 @@\n-    AC_MSG_ERROR([Incorrect $WINENV_VENDOR installation. Neither cygpath nor wslpath was found])\n+    AC_MSG_ERROR([Incorrect $WINENV_VENDOR installation. cygpath was found])\n@@ -91,7 +70,0 @@\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.wsl2\"; then\n-    # Don't trust the current directory for WSL2, but change to an OK temp dir\n-    cd \"$WINENV_TEMP_DIR\"\n-    # Bring along confdefs.h or autoconf gets all confused\n-    cp \"$CONFIGURE_START_DIR\/confdefs.h\" \"$WINENV_TEMP_DIR\"\n-  fi\n-\n","filename":"make\/autoconf\/basic_windows.m4","additions":2,"deletions":30,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-JARSIGNER_CMD := $(FIXPATH) $(BOOT_JDK)\/bin\/jarsigner\n","filename":"make\/autoconf\/bootcycle-spec.gmk.in","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-# Filter out everything that doesn't begin with \"aarch64-\"\n+# First, filter out everything that doesn't begin with \"aarch64-\"\n","filename":"make\/autoconf\/build-aux\/config.sub","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-  UTIL_LOOKUP_PROGS(PKGHANDLER, zypper apt-get yum brew port pkgutil pkgadd pacman apk)\n+  UTIL_LOOKUP_PROGS(PKGHANDLER, apt-get yum brew port pkgutil pkgadd pacman apk)\n@@ -55,2 +55,0 @@\n-      zypper)\n-        zypper_help  $MISSING_DEPENDENCY ;;\n","filename":"make\/autoconf\/help.m4","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -135,4 +135,1 @@\n-ifneq ($(findstring windows.wsl, @OPENJDK_BUILD_OS_ENV@), )\n-  # Tell WSL to convert PATH between linux and windows\n-  export WSLENV := PATH\/l\n-else ifeq (@OPENJDK_BUILD_OS_ENV@, windows.msys2)\n+ifeq (@OPENJDK_BUILD_OS_ENV@, windows.msys2)\n@@ -630,0 +627,1 @@\n+SJAVAC_SERVER_JAVA_CMD:=@SJAVAC_SERVER_JAVA@\n@@ -634,0 +632,1 @@\n+JAVA_JAVAC = $(JAVA_CMD) $(JAVA_FLAGS_JAVAC) $(JAVA_FLAGS)\n@@ -639,0 +638,8 @@\n+# A specific java binary with specific options can be used to run\n+# the long running background sjavac servers and other long running tasks.\n+SJAVAC_SERVER_JAVA = $(SJAVAC_SERVER_JAVA_CMD) \\\n+    $(SJAVAC_SERVER_JAVA_FLAGS)\n+\n+# Hotspot sets this variable before reading the SPEC when compiling sa-jdi.jar. Avoid\n+# overriding that value by using ?=.\n+JAVAC_FLAGS? = @JAVAC_FLAGS@\n@@ -758,4 +765,0 @@\n-<<<<<<< HEAD\n-FIXPATH:=@FIXPATH@\n-ULIMIT:=@ULIMIT@\n-=======\n@@ -764,1 +767,1 @@\n->>>>>>> cafc444bfdd (Backport d29c78da19ba78214efe9e7856cde30fdd9ba8ab)\n+ULIMIT:=@ULIMIT@\n","filename":"make\/autoconf\/spec.gmk.in","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -435,61 +435,0 @@\n-<<<<<<< HEAD:make\/autoconf\/toolchain_windows.m4\n-      # We have found a Visual Studio environment on disk, let's extract variables from the vsvars bat file.\n-      UTIL_FIXUP_EXECUTABLE(VS_ENV_CMD)\n-\n-      # Lets extract the variables that are set by vcvarsall.bat\/vsvars32.bat\/vsvars64.bat\n-      AC_MSG_NOTICE([Trying to extract Visual Studio environment variables])\n-\n-      # We need to create a couple of temporary files.\n-      VS_ENV_TMP_DIR=\"$CONFIGURESUPPORT_OUTPUTDIR\/vs-env\"\n-      $MKDIR -p $VS_ENV_TMP_DIR\n-\n-      # Cannot use the VS10 setup script directly (since it only updates the DOS subshell environment).\n-      # Instead create a shell script which will set the relevant variables when run.\n-      WINPATH_VS_ENV_CMD=\"$VS_ENV_CMD\"\n-      UTIL_REWRITE_AS_WINDOWS_MIXED_PATH([WINPATH_VS_ENV_CMD])\n-      WINPATH_BASH=\"$BASH\"\n-      UTIL_REWRITE_AS_WINDOWS_MIXED_PATH([WINPATH_BASH])\n-\n-      # Generate a DOS batch file which runs $VS_ENV_CMD, and then creates a shell\n-      # script (executable by bash) that will setup the important variables.\n-      EXTRACT_VC_ENV_BAT_FILE=\"$VS_ENV_TMP_DIR\/extract-vs-env.bat\"\n-      $ECHO \"@echo off\" >  $EXTRACT_VC_ENV_BAT_FILE\n-      # This will end up something like:\n-      # call C:\/progra~2\/micros~2.0\/vc\/bin\/amd64\/vcvars64.bat\n-      $ECHO \"call $WINPATH_VS_ENV_CMD $VS_ENV_ARGS\" >> $EXTRACT_VC_ENV_BAT_FILE\n-      # In some cases, the VS_ENV_CMD will change directory, change back so\n-      # the set-vs-env.sh ends up in the right place.\n-      $ECHO 'cd %~dp0' >> $EXTRACT_VC_ENV_BAT_FILE\n-      # These will end up something like:\n-      # C:\/CygWin\/bin\/bash -c 'echo VS_PATH=\\\"$PATH\\\" > localdevenv.sh\n-      # The trailing space for everyone except PATH is no typo, but is needed due\n-      # to trailing \\ in the Windows paths. These will be stripped later.\n-      $ECHO \"$WINPATH_BASH -c 'echo VS_PATH=\"'\\\"$PATH\\\" > set-vs-env.sh' \\\n-          >> $EXTRACT_VC_ENV_BAT_FILE\n-      $ECHO \"$WINPATH_BASH -c 'echo VS_INCLUDE=\"'\\\"$INCLUDE\\;$include \\\" >> set-vs-env.sh' \\\n-          >> $EXTRACT_VC_ENV_BAT_FILE\n-      $ECHO \"$WINPATH_BASH -c 'echo VS_LIB=\"'\\\"$LIB\\;$lib \\\" >> set-vs-env.sh' \\\n-          >> $EXTRACT_VC_ENV_BAT_FILE\n-      $ECHO \"$WINPATH_BASH -c 'echo VCINSTALLDIR=\"'\\\"$VCINSTALLDIR \\\" >> set-vs-env.sh' \\\n-          >> $EXTRACT_VC_ENV_BAT_FILE\n-      $ECHO \"$WINPATH_BASH -c 'echo VCToolsRedistDir=\"'\\\"$VCToolsRedistDir \\\" >> set-vs-env.sh' \\\n-          >> $EXTRACT_VC_ENV_BAT_FILE\n-      $ECHO \"$WINPATH_BASH -c 'echo WindowsSdkDir=\"'\\\"$WindowsSdkDir \\\" >> set-vs-env.sh' \\\n-          >> $EXTRACT_VC_ENV_BAT_FILE\n-      $ECHO \"$WINPATH_BASH -c 'echo WINDOWSSDKDIR=\"'\\\"$WINDOWSSDKDIR \\\" >> set-vs-env.sh' \\\n-          >> $EXTRACT_VC_ENV_BAT_FILE\n-\n-      # Now execute the newly created bat file.\n-      # The | cat is to stop SetEnv.Cmd to mess with system colors on msys.\n-      # Change directory so we don't need to mess with Windows paths in redirects.\n-      cd $VS_ENV_TMP_DIR\n-      cmd \/c extract-vs-env.bat | $CAT\n-      cd $CONFIGURE_START_DIR\n-\n-      if test ! -s $VS_ENV_TMP_DIR\/set-vs-env.sh; then\n-        AC_MSG_NOTICE([Could not succesfully extract the envionment variables needed for the VS setup.])\n-        AC_MSG_NOTICE([Try setting --with-tools-dir to the VC\/bin directory within the VS installation])\n-        AC_MSG_NOTICE([or run \"bash.exe -l\" from a VS command prompt and then run configure from there.])\n-        AC_MSG_ERROR([Cannot continue])\n-      fi\n-=======\n@@ -499,1 +438,0 @@\n->>>>>>> cafc444bfdd (Backport d29c78da19ba78214efe9e7856cde30fdd9ba8ab):make\/autoconf\/toolchain_microsoft.m4\n","filename":"make\/autoconf\/toolchain_microsoft.m4","additions":0,"deletions":62,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -954,1 +954,1 @@\n-ifeq ($(call isTargetOs, windows), true)\n+ifeq ($(OPENJDK_TARGET_OS), windows)\n@@ -962,0 +962,29 @@\n+################################################################################\n+# Write to and read from file\n+\n+# Param 1 - File to read\n+ReadFile = \\\n+    $(shell $(CAT) $1)\n+\n+# Param 1 - Text to write\n+# Param 2 - File to write to\n+ifeq ($(HAS_FILE_FUNCTION), true)\n+  WriteFile = \\\n+      $(file >$2,$(strip $1))\n+else\n+  # Use printf to get consistent behavior on all platforms.\n+  WriteFile = \\\n+      $(shell $(PRINTF) \"%s\" $(call ShellQuote, $1) > $2)\n+endif\n+\n+# Param 1 - Text to write\n+# Param 2 - File to write to\n+ifeq ($(HAS_FILE_FUNCTION), true)\n+  AppendFile = \\\n+      $(file >>$2,$(strip $1))\n+else\n+  # Use printf to get consistent behavior on all platforms.\n+  AppendFile = \\\n+      $(shell $(PRINTF) \"%s\" $(call ShellQuote, $1) >> $2)\n+endif\n+\n","filename":"make\/common\/MakeBase.gmk","additions":30,"deletions":1,"binary":false,"changes":31,"status":"modified"}]}