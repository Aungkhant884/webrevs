{"files":[{"patch":"@@ -70,0 +70,1 @@\n+    $(info _NT_SYMBOL_PATH=$(_NT_SYMBOL_PATH))\n","filename":"make\/RunTests.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-  UTIL_REQUIRE_PROGS(NAWK, gawk nawk awk)\n+  UTIL_REQUIRE_PROGS(NAWK, nawk gawk awk)\n@@ -463,1 +463,0 @@\n-\n","filename":"make\/autoconf\/basic_tools.m4","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -607,3 +607,1 @@\n-    # If using gold it will look like:\n-    #   GNU gold (GNU Binutils 2.30) 1.15\n-    LINKER_VERSION_STRING=`$LINKER -Wl,--version 2> \/dev\/null | $HEAD -n 1`\n+    LINKER_VERSION_STRING=`$LINKER -Wl,--version 2>&1 | $HEAD -n 1`\n@@ -779,1 +777,5 @@\n-  if test \"x$OPENJDK_TARGET_OS\" != xwindows; then\n+  if test \"x$OPENJDK_TARGET_OS\" = xsolaris; then\n+    UTIL_LOOKUP_PROGS(STRIP, strip)\n+    UTIL_LOOKUP_PROGS(NM, nm)\n+    UTIL_LOOKUP_PROGS(GNM, gnm)\n+  elif test \"x$OPENJDK_TARGET_OS\" != xwindows; then\n","filename":"make\/autoconf\/toolchain.m4","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-            vc\/auxiliary\/build\/vcvarsx86_amd64.bat vc\/auxiliary\/build\/vcvars64.bat\"\n+            \/vcvarsx86_amd64.bat \/vcvars64.bat\"\n@@ -668,1 +668,1 @@\n-      [path to microsoft C++ runtime dll (vcruntime*_1.dll) (Windows only) @<:@probed@:>@])])\n+      [path to microsoft C++ runtime dll (vcruntime*_1.dll) (Windows x64 only) @<:@probed@:>@])])\n@@ -689,1 +689,0 @@\n-    AC_SUBST(VCRUNTIME_1_DLL)\n@@ -691,0 +690,1 @@\n+  AC_SUBST(VCRUNTIME_1_DLL)\n","filename":"make\/autoconf\/toolchain_microsoft.m4","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -229,143 +229,0 @@\n-\n-###############################################################################\n-# Creates a command-line option using the --enable-* pattern. Will return a\n-# value of 'true' or 'false' in the RESULT variable, depending on whether the\n-# option was enabled or not by the user. The option can not be turned on if it\n-# is not available, as specified by AVAILABLE and\/or AVAILABLE_CHECK.\n-#\n-# Arguments:\n-#   NAME: The base name of this option (i.e. what follows --enable-). Required.\n-#   RESULT: The name of the variable to set to the result. Defaults to\n-#     <NAME in uppercase>_RESULT.\n-#   DEFAULT: The default value for this option. Can be true, false or auto.\n-#     Defaults to true.\n-#   AVAILABLE: If true, this option is allowed to be selected. Defaults to true.\n-#   DESC: A description of this option. Defaults to a generic and unhelpful\n-#     string.\n-#   DEFAULT_DESC: A message describing the default value, for the help. Defaults\n-#     to the literal value of DEFAULT.\n-#   CHECKING_MSG: The message to present to user when checking this option.\n-#     Defaults to a generic message.\n-#   CHECK_AVAILABLE: An optional code block to execute to determine if the\n-#     option should be available. Must set AVAILABLE to 'false' if not.\n-#   IF_GIVEN:  An optional code block to execute if the option was given on the\n-#     command line (regardless of the value).\n-#   IF_NOT_GIVEN:  An optional code block to execute if the option was not given\n-#     on the command line (regardless of the value).\n-#   IF_ENABLED:  An optional code block to execute if the option is turned on.\n-#   IF_DISABLED:  An optional code block to execute if the option is turned off.\n-#\n-UTIL_DEFUN_NAMED([UTIL_ARG_ENABLE],\n-    [*NAME RESULT DEFAULT AVAILABLE DESC DEFAULT_DESC CHECKING_MSG\n-    CHECK_AVAILABLE IF_GIVEN IF_NOT_GIVEN IF_ENABLED IF_DISABLED], [$@],\n-[\n-  ##########################\n-  # Part 1: Set up m4 macros\n-  ##########################\n-\n-  # If DEFAULT is not specified, set it to 'true'.\n-  m4_define([ARG_DEFAULT], m4_if(ARG_DEFAULT, , true, ARG_DEFAULT))\n-\n-  # If AVAILABLE is not specified, set it to 'true'.\n-  m4_define([ARG_AVAILABLE], m4_if(ARG_AVAILABLE, , true, ARG_AVAILABLE))\n-\n-  # If DEFAULT_DESC is not specified, calculate it from DEFAULT.\n-  m4_define([ARG_DEFAULT_DESC], m4_if(ARG_DEFAULT_DESC, , m4_if(ARG_DEFAULT, true, enabled, m4_if(ARG_DEFAULT, false, disabled, ARG_DEFAULT)), ARG_DEFAULT_DESC))\n-\n-  # If RESULT is not specified, set it to 'ARG_NAME[_ENABLED]'.\n-  m4_define([ARG_RESULT], m4_if(ARG_RESULT, , m4_translit(ARG_NAME, [a-z-], [A-Z_])[_ENABLED], ARG_RESULT))\n-  # Construct shell variable names for the option\n-  m4_define(ARG_OPTION, [enable_]m4_translit(ARG_NAME, [-], [_]))\n-  m4_define(ARG_GIVEN, m4_translit(ARG_NAME, [a-z-], [A-Z_])[_GIVEN])\n-\n-  # If DESC is not specified, set it to a generic description.\n-  m4_define([ARG_DESC], m4_if(ARG_DESC, , [Enable the ARG_NAME feature], m4_normalize(ARG_DESC)))\n-\n-  # If CHECKING_MSG is not specified, set it to a generic description.\n-  m4_define([ARG_CHECKING_MSG], m4_if(ARG_CHECKING_MSG, , [for --enable-ARG_NAME], ARG_CHECKING_MSG))\n-\n-  # If the code blocks are not given, set them to the empty statements to avoid\n-  # tripping up bash.\n-  m4_define([ARG_CHECK_AVAILABLE], m4_if(ARG_CHECK_AVAILABLE, , :, ARG_CHECK_AVAILABLE))\n-  m4_define([ARG_IF_GIVEN], m4_if(ARG_IF_GIVEN, , :, ARG_IF_GIVEN))\n-  m4_define([ARG_IF_NOT_GIVEN], m4_if(ARG_IF_NOT_GIVEN, , :, ARG_IF_NOT_GIVEN))\n-  m4_define([ARG_IF_ENABLED], m4_if(ARG_IF_ENABLED, , :, ARG_IF_ENABLED))\n-  m4_define([ARG_IF_DISABLED], m4_if(ARG_IF_DISABLED, , :, ARG_IF_DISABLED))\n-\n-  ##########################\n-  # Part 2: Set up autoconf shell code\n-  ##########################\n-\n-  # Check that DEFAULT has a valid value\n-  if test \"[x]ARG_DEFAULT\" != xtrue && test \"[x]ARG_DEFAULT\" != xfalse && \\\n-      test \"[x]ARG_DEFAULT\" != xauto ; then\n-    AC_MSG_ERROR([Internal error: Argument DEFAULT to [UTIL_ARG_ENABLE] can only be true, false or auto, was: 'ARG_DEFAULT'])\n-  fi\n-\n-  # Check that AVAILABLE has a valid value\n-  if test \"[x]ARG_AVAILABLE\" != xtrue && test \"[x]ARG_AVAILABLE\" != xfalse; then\n-    AC_MSG_ERROR([Internal error: Argument AVAILABLE to [UTIL_ARG_ENABLE] can only be true or false, was: 'ARG_AVAILABLE'])\n-  fi\n-\n-  AC_ARG_ENABLE(ARG_NAME, AS_HELP_STRING([--enable-]ARG_NAME,\n-      [ARG_DESC [ARG_DEFAULT_DESC]]), [ARG_GIVEN=true], [ARG_GIVEN=false])\n-\n-  # Check if the option is available\n-  AVAILABLE=ARG_AVAILABLE\n-  # Run the available check block (if any), which can overwrite AVAILABLE.\n-  ARG_CHECK_AVAILABLE\n-\n-  # Check if the option should be turned on\n-  AC_MSG_CHECKING(ARG_CHECKING_MSG)\n-  if test x$ARG_GIVEN = xfalse; then\n-    if test ARG_DEFAULT = auto; then\n-      # If not given, and default is auto, set it to true iff it's available.\n-      ARG_RESULT=$AVAILABLE\n-      REASON=\"from default 'auto'\"\n-    else\n-      ARG_RESULT=ARG_DEFAULT\n-      REASON=\"default\"\n-    fi\n-  else\n-    if test x$ARG_OPTION = xyes; then\n-      ARG_RESULT=true\n-      REASON=\"from command line\"\n-    elif test x$ARG_OPTION = xno; then\n-      ARG_RESULT=false\n-      REASON=\"from command line\"\n-    elif test x$ARG_OPTION = xauto; then\n-      if test ARG_DEFAULT = auto; then\n-        # If both given and default is auto, set it to true iff it's available.\n-        ARG_RESULT=$AVAILABLE\n-      else\n-        ARG_RESULT=ARG_DEFAULT\n-      fi\n-      REASON=\"from command line 'auto'\"\n-    else\n-      AC_MSG_ERROR([Option [--enable-]ARG_NAME can only be 'yes', 'no' or 'auto'])\n-    fi\n-  fi\n-\n-  if test x$ARG_RESULT = xtrue; then\n-    AC_MSG_RESULT([enabled, $REASON])\n-    if test x$AVAILABLE = xfalse; then\n-      AC_MSG_ERROR([Option [--enable-]ARG_NAME is not available])\n-    fi\n-  else\n-    AC_MSG_RESULT([disabled, $REASON])\n-  fi\n-\n-  # Execute result payloads, if present\n-  if test x$ARG_GIVEN = xtrue; then\n-    ARG_IF_GIVEN\n-  else\n-    ARG_IF_NOT_GIVEN\n-  fi\n-\n-  if test x$ARG_RESULT = xtrue; then\n-    ARG_IF_ENABLED\n-  else\n-    ARG_IF_DISABLED\n-  fi\n-])\n-\n","filename":"make\/autoconf\/util.m4","additions":0,"deletions":143,"binary":false,"changes":143,"status":"modified"}]}