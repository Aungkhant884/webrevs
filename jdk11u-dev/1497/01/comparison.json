{"files":[{"patch":"@@ -47,0 +47,2 @@\n+import java.security.cert.CertPathValidatorException;\n+import java.security.cert.CertPathValidatorException.BasicReason;\n@@ -51,0 +53,2 @@\n+import java.security.cert.CertificateParsingException;\n+import java.security.cert.TrustAnchor;\n@@ -58,0 +62,2 @@\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n@@ -74,0 +80,1 @@\n+import sun.security.provider.certpath.CertPathConstraintsParameters;\n@@ -82,0 +89,1 @@\n+import sun.security.util.KnownOIDs;\n@@ -96,0 +104,1 @@\n+import sun.security.validator.Validator;\n@@ -189,0 +198,2 @@\n+    private Set<X509Certificate> trustedCerts = new HashSet<>();\n+\n@@ -1113,0 +1124,1 @@\n+        KeyStore cakstore = buildTrustedCerts();\n@@ -1121,1 +1133,7 @@\n-            caks = KeyStoreUtil.getCacertsKeyStore();\n+            if (cakstore != null) {\n+                caks = cakstore;\n+            } else {\n+                \/\/ try to load cacerts again, and let exception propagate\n+                \/\/ if it cannot be loaded\n+                caks = KeyStoreUtil.getCacertsKeyStore();\n+            }\n@@ -1482,1 +1500,3 @@\n-        checkWeak(rb.getString(\"the.certificate.request\"), req);\n+        CertPathConstraintsParameters cpcp = new CertPathConstraintsParameters(\n+                req.getSubjectPublicKeyInfo(), null, null);\n+        checkWeakConstraint(rb.getString(\"the.certificate.request\"), req, cpcp);\n@@ -1541,2 +1561,5 @@\n-        checkWeak(rb.getString(\"the.issuer\"), keyStore.getCertificateChain(alias));\n-        checkWeak(rb.getString(\"the.generated.certificate\"), cert);\n+        checkWeakConstraint(rb.getString(\"the.issuer\"),\n+                keyStore.getCertificateChain(alias));\n+        cpcp = buildCertPathConstraint(cert, null);\n+        checkWeakConstraint(rb.getString(\"the.generated.certificate\"),\n+                cert, cpcp);\n@@ -1591,1 +1614,4 @@\n-        checkWeak(rb.getString(\"the.generated.crl\"), crl, privateKey);\n+        CertPathConstraintsParameters cpcp = new CertPathConstraintsParameters(\n+                privateKey, null, null);\n+        checkWeakConstraint(rb.getString(\"the.generated.crl\"), crl, privateKey,\n+                cpcp);\n@@ -1642,1 +1668,4 @@\n-        checkWeak(rb.getString(\"the.generated.certificate.request\"), request);\n+        CertPathConstraintsParameters cpcp = new CertPathConstraintsParameters(\n+                request.getSubjectPublicKeyInfo(), null, null);\n+        checkWeakConstraint(rb.getString(\"the.generated.certificate.request\"),\n+                request, cpcp);\n@@ -1687,1 +1716,3 @@\n-        checkWeak(rb.getString(\"the.certificate\"), cert);\n+        CertPathConstraintsParameters cpcp =\n+                buildCertPathConstraint(cert, null);\n+        checkWeakConstraint(rb.getString(\"the.certificate\"), cert, cpcp);\n@@ -1965,1 +1996,2 @@\n-        checkWeak(rb.getString(\"the.generated.certificate\"), chain[0]);\n+        checkWeakConstraint(rb.getString(\"the.generated.certificate\"),\n+                chain);\n@@ -2058,0 +2090,1 @@\n+        CertPathConstraintsParameters cpcp;\n@@ -2114,0 +2147,4 @@\n+\n+                    X509Certificate[] xcerts = convertCerts(chain);\n+                    List<X509Certificate> certs = Arrays.asList(xcerts);\n+                    TrustAnchor anchor = findTrustAnchor(certs);\n@@ -2126,1 +2163,13 @@\n-                        checkWeak(label, chain[i]);\n+\n+                        if (i == 0 &&\n+                                ((X509Certificate)chain[0]).\n+                                getBasicConstraints() == -1) {\n+                            \/\/ this is an EE\n+                            cpcp = buildCertPathConstraint((X509Certificate) chain[i], anchor);\n+                        } else {\n+                            cpcp = new CertPathConstraintsParameters(\n+                                    (X509Certificate)chain[i], null, anchor,\n+                                    null);\n+                        }\n+\n+                        checkWeakConstraint(label, chain[i], cpcp);\n@@ -2133,1 +2182,1 @@\n-                    checkWeak(label, chain);\n+                    checkWeakConstraint(label, chain);\n@@ -2162,1 +2211,2 @@\n-            checkWeak(label, cert);\n+            cpcp = buildCertPathConstraint((X509Certificate)cert, null);\n+            checkWeakConstraint(label, cert, cpcp);\n@@ -2382,1 +2432,3 @@\n-                checkWeak(\"<\" + newAlias + \">\", c);\n+                CertPathConstraintsParameters cpcp =\n+                        buildCertPathConstraint((X509Certificate)c, null);\n+                checkWeakConstraint(\"<\" + newAlias + \">\", c, cpcp);\n@@ -2606,0 +2658,3 @@\n+                    CertPathConstraintsParameters cpcp =\n+                            buildCertPathConstraint((X509Certificate)signer,\n+                            null);\n@@ -2610,1 +2665,1 @@\n-                            withWeak(signer.getPublicKey()));\n+                            withWeakConstraint(signer.getPublicKey(), cpcp));\n@@ -2618,0 +2673,3 @@\n+                    CertPathConstraintsParameters cpcp =\n+                            buildCertPathConstraint((X509Certificate)signer,\n+                            null);\n@@ -2622,1 +2680,1 @@\n-                            withWeak(signer.getPublicKey()));\n+                            withWeakConstraint(signer.getPublicKey(), cpcp));\n@@ -2634,1 +2692,9 @@\n-            checkWeak(rb.getString(\"the.crl\"), crl, signer == null ? null : signer.getPublicKey());\n+\n+            if (signer != null) {\n+                CertPathConstraintsParameters cpcp =\n+                        buildCertPathConstraint((X509Certificate)signer, null);\n+                checkWeakConstraint(rb.getString(\"the.crl\"), crl,\n+                        signer.getPublicKey(), cpcp);\n+            } else {\n+                checkWeak(rb.getString(\"the.crl\"), crl, null);\n+            }\n@@ -2680,0 +2746,2 @@\n+        CertPathConstraintsParameters cpcp =\n+                new CertPathConstraintsParameters(pkey, null, null);\n@@ -2683,1 +2751,1 @@\n-                withWeak(pkey),\n+                withWeakConstraint(pkey, cpcp),\n@@ -2707,1 +2775,6 @@\n-        checkWeak(rb.getString(\"the.certificate.request\"), req);\n+\n+        CertPathConstraintsParameters cpcp1 =\n+                new CertPathConstraintsParameters(\n+                req.getSubjectPublicKeyInfo(), null, null);\n+        checkWeakConstraint(rb.getString(\"the.certificate.request\"), req,\n+                cpcp1);\n@@ -2727,0 +2800,3 @@\n+        X509Certificate[] xcerts = convertCerts(certs);\n+        List<X509Certificate> chain = Arrays.asList(xcerts);\n+        TrustAnchor anchor = findTrustAnchor(chain);\n@@ -2747,1 +2823,11 @@\n-            checkWeak(oneInMany(rb.getString(\"the.certificate\"), i, certs.length), x509Cert);\n+            CertPathConstraintsParameters cpcp;\n+            if (i == 0 &&\n+                    x509Cert.getBasicConstraints() == -1) {\n+                \/\/ this is an EE\n+                cpcp = buildCertPathConstraint(x509Cert, anchor);\n+            } else {\n+                cpcp = new CertPathConstraintsParameters(x509Cert,\n+                        null, anchor, null);\n+            }\n+            checkWeakConstraint(oneInMany(rb.getString(\"the.certificate\"),\n+                    i, certs.length), x509Cert, cpcp);\n@@ -2759,0 +2845,17 @@\n+    private static String oneInManys(String label, int certNo, int certCnt, int signerNo,\n+        int signerCnt) {\n+        if (certCnt == 1 && signerCnt == 1) {\n+            return label;\n+        }\n+        if (certCnt > 1 && signerCnt == 1) {\n+            return String.format(rb.getString(\"one.in.many1\"), label, certNo);\n+        }\n+        if (certCnt == 1 && signerCnt > 1) {\n+            return String.format(rb.getString(\"one.in.many2\"), label, signerNo);\n+        }\n+        if (certCnt > 1 && signerCnt > 1) {\n+            return String.format(rb.getString(\"one.in.many3\"), label, certNo, signerNo);\n+        }\n+        return label;\n+    }\n+\n@@ -2767,1 +2870,1 @@\n-            Set<CodeSigner> ss = new HashSet<>();\n+            LinkedHashSet<CodeSigner> ss = new LinkedHashSet<>();\n@@ -2784,38 +2887,0 @@\n-                            out.printf(rb.getString(\"Signer.d.\"), ++pos);\n-                            out.println();\n-                            out.println();\n-                            out.println(rb.getString(\"Signature.\"));\n-                            out.println();\n-\n-                            List<? extends Certificate> certs\n-                                    = signer.getSignerCertPath().getCertificates();\n-                            int cc = 0;\n-                            for (Certificate cert: certs) {\n-                                X509Certificate x = (X509Certificate)cert;\n-                                if (rfc) {\n-                                    out.println(rb.getString(\"Certificate.owner.\") + x.getSubjectDN() + \"\\n\");\n-                                    dumpCert(x, out);\n-                                } else {\n-                                    printX509Cert(x, out);\n-                                }\n-                                out.println();\n-                                checkWeak(oneInMany(rb.getString(\"the.certificate\"), cc++, certs.size()), x);\n-                            }\n-                            Timestamp ts = signer.getTimestamp();\n-                            if (ts != null) {\n-                                out.println(rb.getString(\"Timestamp.\"));\n-                                out.println();\n-                                certs = ts.getSignerCertPath().getCertificates();\n-                                cc = 0;\n-                                for (Certificate cert: certs) {\n-                                    X509Certificate x = (X509Certificate)cert;\n-                                    if (rfc) {\n-                                        out.println(rb.getString(\"Certificate.owner.\") + x.getSubjectDN() + \"\\n\");\n-                                        dumpCert(x, out);\n-                                    } else {\n-                                        printX509Cert(x, out);\n-                                    }\n-                                    out.println();\n-                                    checkWeak(oneInMany(rb.getString(\"the.tsa.certificate\"), cc++, certs.size()), x);\n-                                }\n-                            }\n@@ -2826,0 +2891,73 @@\n+\n+            for (CodeSigner signer: ss) {\n+                out.printf(rb.getString(\"Signer.d.\"), ++pos);\n+                out.println();\n+                out.println();\n+\n+                List<? extends Certificate> certs\n+                        = signer.getSignerCertPath().getCertificates();\n+                @SuppressWarnings(\"unchecked\")\n+                List<X509Certificate> chain =\n+                        (List<X509Certificate>)certs;\n+                TrustAnchor anchor = findTrustAnchor(chain);\n+                CertPathConstraintsParameters cpcp;\n+                int cc = 0;\n+                for (Certificate cert: certs) {\n+                    out.printf(rb.getString(\"Certificate.d.\"), ++cc);\n+                    out.println();\n+                    X509Certificate x = (X509Certificate)cert;\n+                    if (rfc) {\n+                        out.println(rb.getString(\"Certificate.owner.\") + x.getSubjectDN() + \"\\n\");\n+                        dumpCert(x, out);\n+                    } else {\n+                        printX509Cert(x, out);\n+                    }\n+                    out.println();\n+                    if (cc == 0 && x.getBasicConstraints() == -1) {\n+                        \/\/ this is an EE\n+                        cpcp = buildCertPathConstraint(x, anchor);\n+                    } else {\n+                        cpcp = new CertPathConstraintsParameters(\n+                                x, null, anchor, null);\n+                    }\n+                    checkWeakConstraint(oneInManys(rb.getString(\n+                            \"the.certificate\"), cc,\n+                            certs.size(), pos,\n+                            ss.size()), x, cpcp);\n+                }\n+                Timestamp ts = signer.getTimestamp();\n+                if (ts != null) {\n+                    out.println(rb.getString(\"Timestamp.\"));\n+                    out.println();\n+                    certs = ts.getSignerCertPath().getCertificates();\n+                    @SuppressWarnings(\"unchecked\")\n+                    List<X509Certificate> tschain =\n+                            (List<X509Certificate>)certs;\n+                    anchor = findTrustAnchor(tschain);\n+                    cc = 0;\n+                    for (Certificate cert: certs) {\n+                        out.printf(rb.getString(\"Certificate.d.\"), ++cc);\n+                        out.println();\n+                        X509Certificate x = (X509Certificate)cert;\n+                        if (rfc) {\n+                            out.println(rb.getString(\"Certificate.owner.\") + x.getSubjectDN() + \"\\n\");\n+                            dumpCert(x, out);\n+                        } else {\n+                            printX509Cert(x, out);\n+                        }\n+                        out.println();\n+                        if (cc == 0 &&\n+                                x.getBasicConstraints() == -1) {\n+                            \/\/ this is an EE\n+                            cpcp = buildCertPathConstraint(x, anchor);\n+                        } else {\n+                            cpcp = new CertPathConstraintsParameters(\n+                                    x, null, anchor, null);\n+                        }\n+                        checkWeakConstraint(oneInManys(rb.getString(\n+                                \"the.tsa.certificate\"), cc,\n+                                certs.size(), pos,\n+                                ss.size()), x, cpcp);\n+                    }\n+                }\n+            }\n@@ -2852,0 +2990,3 @@\n+            @SuppressWarnings(\"unchecked\")\n+            List<X509Certificate> xcerts = (List<X509Certificate>)chain;\n+            TrustAnchor anchor = findTrustAnchor(xcerts);\n@@ -2862,1 +3003,11 @@\n-                    checkWeak(oneInMany(rb.getString(\"the.certificate\"), i++, chain.size()), cert);\n+                    X509Certificate x = (X509Certificate)cert;\n+                    CertPathConstraintsParameters cpcp;\n+                    if (i == 0 && x.getBasicConstraints() == -1) {\n+                        \/\/ this is an EE\n+                        cpcp = buildCertPathConstraint(x, anchor);\n+                    } else {\n+                        cpcp = new CertPathConstraintsParameters(\n+                                x, null, anchor, null);\n+                    }\n+                    checkWeakConstraint(oneInMany(rb.getString(\n+                            \"the.certificate\"), i++, chain.size()), x, cpcp);\n@@ -3098,0 +3249,3 @@\n+        CertPathConstraintsParameters cpcp =\n+                buildCertPathConstraint(cert, null);\n+\n@@ -3099,1 +3253,1 @@\n-            checkWeak(rb.getString(\"the.input\"), cert);\n+            checkWeakConstraint(rb.getString(\"the.input\"), cert, cpcp);\n@@ -3119,1 +3273,1 @@\n-            checkWeak(rb.getString(\"the.input\"), cert);\n+            checkWeakConstraint(rb.getString(\"the.input\"), cert, cpcp);\n@@ -3130,1 +3284,1 @@\n-                checkWeak(rb.getString(\"the.input\"), cert);\n+                checkWeakConstraint(rb.getString(\"the.input\"), cert, cpcp);\n@@ -3139,1 +3293,1 @@\n-                checkWeak(rb.getString(\"the.input\"), cert);\n+                checkWeakConstraint(rb.getString(\"the.input\"), cert, cpcp);\n@@ -3166,1 +3320,1 @@\n-            checkWeak(rb.getString(\"the.input\"), cert);\n+            checkWeakConstraint(rb.getString(\"the.input\"), cert, cpcp);\n@@ -3306,0 +3460,15 @@\n+    private String withWeakConstraint(String alg,\n+            CertPathConstraintsParameters cpcp) {\n+        try {\n+            DISABLED_CHECK.permits(alg, cpcp, false);\n+        } catch (CertPathValidatorException e) {\n+            return String.format(rb.getString(\"with.disabled\"), alg);\n+        }\n+        try {\n+            LEGACY_CHECK.permits(alg, cpcp, false);\n+            return alg;\n+        } catch (CertPathValidatorException e) {\n+            return String.format(rb.getString(\"with.weak\"), alg);\n+        }\n+    }\n+\n@@ -3329,1 +3498,2 @@\n-    private String withWeak(PublicKey key) {\n+    private String withWeakConstraint(PublicKey key,\n+            CertPathConstraintsParameters cpcp) {\n@@ -3332,7 +3502,9 @@\n-        if (DISABLED_CHECK.permits(SIG_PRIMITIVE_SET, key)) {\n-            if (LEGACY_CHECK.permits(SIG_PRIMITIVE_SET, key)) {\n-                if (kLen >= 0) {\n-                    return String.format(rb.getString(\"key.bit\"), kLen, displayAlg);\n-                } else {\n-                    return String.format(rb.getString(\"unknown.size.1\"), displayAlg);\n-                }\n+        try {\n+            DISABLED_CHECK.permits(key.getAlgorithm(), cpcp, true);\n+        } catch (CertPathValidatorException e) {\n+            return String.format(rb.getString(\"key.bit.disabled\"), kLen, displayAlg);\n+        }\n+        try {\n+            LEGACY_CHECK.permits(key.getAlgorithm(), cpcp, true);\n+            if (kLen >= 0) {\n+                return String.format(rb.getString(\"key.bit\"), kLen, displayAlg);\n@@ -3340,1 +3512,1 @@\n-                return String.format(rb.getString(\"key.bit.weak\"), kLen, displayAlg);\n+                return String.format(rb.getString(\"unknown.size.1\"), displayAlg);\n@@ -3342,2 +3514,2 @@\n-        } else {\n-            return String.format(rb.getString(\"key.bit.disabled\"), kLen, displayAlg);\n+        } catch (CertPathValidatorException e) {\n+            return String.format(rb.getString(\"key.bit.weak\"), kLen, displayAlg);\n@@ -3358,0 +3530,2 @@\n+        CertPathConstraintsParameters cpcp =\n+                buildCertPathConstraint(cert, null);\n@@ -3360,1 +3534,1 @@\n-            sigName = withWeak(sigName);\n+            sigName = withWeakConstraint(sigName, cpcp);\n@@ -3370,1 +3544,1 @@\n-                        withWeak(pkey),\n+                        withWeakConstraint(pkey, cpcp),\n@@ -3721,1 +3895,1 @@\n-        checkWeak(rb.getString(\"reply\"), replyCerts);\n+        checkWeakConstraint(rb.getString(\"reply\"), replyCerts);\n@@ -3803,1 +3977,4 @@\n-                checkWeak(String.format(rb.getString(fromKeyStore ?\n+                CertPathConstraintsParameters cpcp =\n+                        buildCertPathConstraint((X509Certificate)root.snd,\n+                        null);\n+                checkWeakConstraint(String.format(rb.getString(fromKeyStore ?\n@@ -3806,2 +3983,2 @@\n-                                        root.fst),\n-                          root.snd);\n+                                            root.fst),\n+                          root.snd, cpcp);\n@@ -3872,1 +4049,3 @@\n-                checkWeak(p.fst, p.snd);\n+                CertPathConstraintsParameters cpcp =\n+                        buildCertPathConstraint(p.snd, null);\n+                checkWeakConstraint(p.fst, p.snd, cpcp);\n@@ -4644,0 +4823,72 @@\n+    private void checkWeakConstraint(String label, String sigAlg, Key key,\n+            CertPathConstraintsParameters cpcp) throws Exception {\n+        if (sigAlg != null) {\n+            try {\n+                DISABLED_CHECK.permits(sigAlg, cpcp, false);\n+                try {\n+                    LEGACY_CHECK.permits(sigAlg, cpcp, false);\n+                } catch (CertPathValidatorException e) {\n+                    weakWarnings.add(String.format(\n+                            rb.getString(\"whose.sigalg.weak\"), label, sigAlg));\n+                }\n+            } catch (CertPathValidatorException e) {\n+                String eMessage = e.getMessage();\n+                if (eMessage.contains(\"denyAfter constraint check failed\") &&\n+                        e.getReason() == BasicReason.ALGORITHM_CONSTRAINED) {\n+                    String startSeparator = \"Constraint date: \";\n+                    int startSepPos = eMessage.indexOf(startSeparator);\n+                    String endSeparator = \"; params date\";\n+                    int endSepPos = eMessage.indexOf(endSeparator);\n+                    String denyAfterDate = null;\n+                    try {\n+                        denyAfterDate = eMessage.substring(startSepPos + startSeparator.length(),\n+                                endSepPos);\n+                    } catch (IndexOutOfBoundsException e1) {\n+                        throw new Exception(rb.getString(\n+                                \"Unable.to.parse.denyAfter.string.in.exception.message\"));\n+                    }\n+\n+                    SimpleDateFormat formatter = new SimpleDateFormat(\"EEE MMM dd HH:mm:ss Z yyyy\");\n+                    Date dateObj = null;\n+                    try {\n+                        dateObj = formatter.parse(denyAfterDate);\n+                    } catch (ParseException e2) {\n+                        throw new Exception(rb.getString(\n+                                \"Unable.to.parse.denyAfter.string.in.exception.message\"));\n+                    }\n+                    formatter = new SimpleDateFormat(\"yyyy-MM-dd\");\n+                    denyAfterDate = formatter.format(dateObj);\n+\n+                    weakWarnings.add(String.format(\n+                            rb.getString(\"whose.sigalg.usagesignedjar\"), label, sigAlg,\n+                            denyAfterDate));\n+                } else {\n+                    weakWarnings.add(String.format(\n+                            rb.getString(\"whose.sigalg.disabled\"), label, sigAlg));\n+                }\n+                if (debug) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                DISABLED_CHECK.permits(key.getAlgorithm(), cpcp, true);\n+                try {\n+                    LEGACY_CHECK.permits(key.getAlgorithm(), cpcp, true);\n+                } catch (CertPathValidatorException e) {\n+                    weakWarnings.add(String.format(\n+                            rb.getString(\"whose.key.weak\"), label,\n+                            String.format(rb.getString(\"key.bit\"),\n+                            KeyUtil.getKeySize(key), fullDisplayAlgName(key))));\n+                }\n+            } catch (CertPathValidatorException e) {\n+                weakWarnings.add(String.format(\n+                        rb.getString(\"whose.key.disabled\"), label,\n+                        String.format(rb.getString(\"key.bit\"),\n+                        KeyUtil.getKeySize(key), fullDisplayAlgName(key))));\n+            }\n+        }\n+    }\n+\n@@ -4670,2 +4921,5 @@\n-    private void checkWeak(String label, Certificate[] certs)\n-            throws KeyStoreException {\n+    private void checkWeakConstraint(String label, Certificate[] certs)\n+            throws KeyStoreException, Exception {\n+        X509Certificate[] xcerts = convertCerts(certs);\n+        List<X509Certificate> chain = Arrays.asList(xcerts);\n+        TrustAnchor anchor = findTrustAnchor(chain);\n@@ -4680,1 +4934,10 @@\n-                checkWeak(fullLabel, xc);\n+\n+                CertPathConstraintsParameters cpcp = null;\n+                if (i == 0 && xc.getBasicConstraints() == -1) {\n+                    \/\/ this is an EE\n+                    cpcp = buildCertPathConstraint(xc, anchor);\n+                } else {\n+                    cpcp = new CertPathConstraintsParameters(\n+                            xc, null, anchor, null);\n+                }\n+                checkWeakConstraint(fullLabel, xc, cpcp);\n@@ -4685,2 +4948,3 @@\n-    private void checkWeak(String label, Certificate cert)\n-            throws KeyStoreException {\n+    private void checkWeakConstraint(String label, Certificate cert,\n+            CertPathConstraintsParameters cpcp)\n+            throws KeyStoreException, Exception {\n@@ -4691,1 +4955,1 @@\n-            checkWeak(label, sigAlg, xc.getPublicKey());\n+            checkWeakConstraint(label, sigAlg, xc.getPublicKey(), cpcp);\n@@ -4695,2 +4959,12 @@\n-    private void checkWeak(String label, PKCS10 p10) {\n-        checkWeak(label, p10.getSigAlg(), p10.getSubjectPublicKeyInfo());\n+    private void checkWeakConstraint(String label, PKCS10 p10,\n+            CertPathConstraintsParameters cpcp) throws Exception {\n+        checkWeakConstraint(label, p10.getSigAlg(),\n+                p10.getSubjectPublicKeyInfo(), cpcp);\n+    }\n+\n+    private void checkWeakConstraint(String label, CRL crl, Key key,\n+            CertPathConstraintsParameters cpcp) throws Exception {\n+        if (crl instanceof X509CRLImpl) {\n+            X509CRLImpl impl = (X509CRLImpl)crl;\n+            checkWeakConstraint(label, impl.getSigAlgName(), key, cpcp);\n+        }\n@@ -4706,0 +4980,70 @@\n+    private KeyStore buildTrustedCerts() {\n+        KeyStore caks = null;\n+        try {\n+            caks = KeyStoreUtil.getCacertsKeyStore();\n+            if (caks != null) {\n+                Enumeration<String> aliases = caks.aliases();\n+                while (aliases.hasMoreElements()) {\n+                    String a = aliases.nextElement();\n+                    try {\n+                        trustedCerts.add((X509Certificate)caks.getCertificate(a));\n+                    } catch (Exception e2) {\n+                        \/\/ ignore, if the keystore has not been loaded\/initialized properly\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            \/\/ Ignore, if cacerts cannot be loaded\n+        }\n+        return caks;\n+    }\n+\n+    private TrustAnchor findTrustAnchor(List<X509Certificate> chain) {\n+        if (chain.isEmpty()) {\n+            return null;\n+        }\n+\n+        X509Certificate last = chain.get(chain.size() - 1);\n+        Optional<X509Certificate> trusted =\n+                trustedCerts.stream()\n+                        .filter(c -> c.getSubjectX500Principal().equals(last.getIssuerX500Principal()))\n+                        .findFirst();\n+        return trusted.isPresent() ? new TrustAnchor(trusted.get(), null) : null;\n+    }\n+\n+    private X509Certificate[] convertCerts(Certificate[] certs) {\n+        X509Certificate[] xcerts = new X509Certificate[certs.length];\n+\n+        for (int i = 0; i < certs.length; i++) {\n+            if (certs[i] instanceof X509Certificate) {\n+                xcerts[i] = (X509Certificate) certs[i];\n+            }\n+        }\n+        return xcerts;\n+    }\n+\n+    private CertPathConstraintsParameters buildCertPathConstraint(\n+        X509Certificate xcert, TrustAnchor anchor) throws Exception{\n+        List<String> eku = xcert.getExtendedKeyUsage();\n+        if (eku == null) {\n+            return new CertPathConstraintsParameters(xcert, null,\n+                    anchor, null);\n+        }\n+\n+        if (eku.contains(KnownOIDs.codeSigning.value())) {\n+            return new CertPathConstraintsParameters(xcert,\n+                    Validator.VAR_CODE_SIGNING, anchor, null);\n+        } else if (eku.contains(KnownOIDs.clientAuth.value())) {\n+            return new CertPathConstraintsParameters(xcert,\n+                    Validator.VAR_TLS_CLIENT, anchor, null);\n+        } else if (eku.contains(KnownOIDs.serverAuth.value())) {\n+            return new CertPathConstraintsParameters(xcert,\n+                    Validator.VAR_TLS_SERVER, anchor, null);\n+        } else if (eku.contains(KnownOIDs.KP_TimeStamping.value())) {\n+            return new CertPathConstraintsParameters(xcert,\n+                    Validator.VAR_TSA_SERVER, anchor, null);\n+        }\n+        return new CertPathConstraintsParameters(xcert, Validator.VAR_GENERIC,\n+                anchor, null);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":433,"deletions":89,"binary":false,"changes":522,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -396,0 +396,1 @@\n+        {\"Certificate.d.\", \"Certificate #%d:\"},\n@@ -397,1 +398,0 @@\n-        {\"Signature.\", \"Signature:\"},\n@@ -466,0 +466,3 @@\n+        {\"one.in.many1\", \"%1$s #%2$d\"},\n+        {\"one.in.many2\", \"%1$s of signer #%2$d\"},\n+        {\"one.in.many3\", \"%1$s #%2$d of signer #%3$d\"},\n@@ -481,0 +484,2 @@\n+        {\"whose.sigalg.usagesignedjar\", \"%1$s uses the %2$s signature algorithm which is considered a security risk and cannot be used to sign JARs after %3$s.\"},\n+        {\"Unable.to.parse.denyAfter.string.in.exception.message\", \"Unable to parse denyAfter date string in exception message\"},\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Resources.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -722,45 +722,0 @@\n-    static void checkWeak(String file) throws Exception {\n-        verify(file)\n-                .shouldHaveExitValue(0)\n-                .shouldNotContain(\"treated as unsigned\");\n-        verify(file, \"-verbose\")\n-                .shouldHaveExitValue(0)\n-                .shouldNotContain(\"treated as unsigned\")\n-                .shouldMatch(\"Digest algorithm: .*(weak)\")\n-                .shouldMatch(\"Signature algorithm: .*(weak)\")\n-                .shouldMatch(\"Timestamp digest algorithm: .*(weak)\")\n-                .shouldNotMatch(\"Timestamp signature algorithm: .*(weak).*(weak)\")\n-                .shouldMatch(\"Timestamp signature algorithm: .*key.*(weak)\");\n-        verify(file, \"-J-Djava.security.debug=jar\")\n-                .shouldHaveExitValue(0)\n-                .shouldNotMatch(\"SignatureException:.*disabled\");\n-\n-        \/\/ keytool should print out warnings when reading or\n-        \/\/ generating cert\/cert req using legacy algorithms.\n-        String sout = SecurityTools.keytool(\"-printcert -jarfile \" + file)\n-                .stderrShouldContain(\"The TSA certificate uses a 1024-bit RSA key\" +\n-                        \" which is considered a security risk.\" +\n-                        \" This key size will be disabled in a future update.\")\n-                .getStdout();\n-        if (sout.indexOf(\"weak\", sout.indexOf(\"Timestamp:\")) < 0) {\n-            throw new RuntimeException(\"timestamp not weak: \" + sout);\n-        }\n-    }\n-\n-    static void checkHalfWeak(String file) throws Exception {\n-        verify(file)\n-                .shouldHaveExitValue(0)\n-                .shouldNotContain(\"treated as unsigned\");\n-        verify(file, \"-verbose\")\n-                .shouldHaveExitValue(0)\n-                .shouldNotContain(\"treated as unsigned\")\n-                .shouldMatch(\"Digest algorithm: .*(weak)\")\n-                .shouldNotMatch(\"Signature algorithm: .*(weak)\")\n-                .shouldNotMatch(\"Signature algorithm: .*(disabled)\")\n-                .shouldNotMatch(\"Timestamp digest algorithm: .*(weak)\")\n-                .shouldNotMatch(\"Timestamp signature algorithm: .*(weak).*(weak)\")\n-                .shouldNotMatch(\"Timestamp signature algorithm: .*(disabled).*(disabled)\")\n-                .shouldNotMatch(\"Timestamp signature algorithm: .*key.*(weak)\")\n-                .shouldNotMatch(\"Timestamp signature algorithm: .*key.*(disabled)\");\n-    }\n-\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/TimestampCheck.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6890872 8168882\n+ * @bug 6890872 8168882 8257722\n@@ -45,0 +45,1 @@\n+import java.nio.file.Path;\n@@ -48,0 +49,11 @@\n+    static OutputAnalyzer kt(String cmd, String ks) throws Exception {\n+        return SecurityTools.keytool(\"-storepass changeit \" + cmd +\n+                \" -keystore \" + ks);\n+    }\n+\n+    static void gencert(String owner, String cmd) throws Exception {\n+        kt(\"-certreq -alias \" + owner + \" -file tmp.req\", \"ks\");\n+        kt(\"-gencert -infile tmp.req -outfile tmp.cert \" + cmd, \"ks\");\n+        kt(\"-importcert -alias \" + owner + \" -file tmp.cert\", \"ks\");\n+    }\n+\n@@ -50,0 +62,1 @@\n+        testCertOutput();\n@@ -94,0 +107,83 @@\n+\n+    private static void testCertOutput() throws Throwable {\n+        kt(\"-genkeypair -keyalg rsa -alias e0 -dname CN=E0 \" +\n+                \"-keysize 512\", \"ks\");\n+        JarUtils.createJarFile(Path.of(\"a0.jar\"), Path.of(\".\"), Path.of(\"ks\"));\n+        \/\/ sign a0.jar file\n+        SecurityTools.jarsigner(\"-keystore ks -storepass changeit \" +\n+                \" a0.jar e0\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.keytool(\"-printcert -jarfile a0.jar\")\n+                .shouldNotContain(\"Signature:\")\n+                .shouldContain(\"Signer #1:\")\n+                .shouldContain(\"Certificate #1:\")\n+                .shouldNotContain(\"Certificate #2:\")\n+                .shouldNotContain(\"Signer #2:\")\n+                .shouldMatch(\"The certificate uses a 512-bit RSA key.*is disabled\")\n+                .shouldHaveExitValue(0);\n+\n+        kt(\"-genkeypair -keyalg rsa -alias ca1 -dname CN=CA1 -ext bc:c \" +\n+                \"-keysize 512\", \"ks\");\n+        kt(\"-genkeypair -keyalg rsa -alias e1 -dname CN=E1\", \"ks\");\n+        gencert(\"e1\", \"-alias ca1 -ext san=dns:e1\");\n+\n+        JarUtils.createJarFile(Path.of(\"a1.jar\"), Path.of(\".\"), Path.of(\"ks\"));\n+        \/\/ sign a1.jar file\n+        SecurityTools.jarsigner(\"-keystore ks -storepass changeit \" +\n+                \" a1.jar e1\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.keytool(\"-printcert -jarfile a1.jar\")\n+                .shouldNotContain(\"Signature:\")\n+                .shouldContain(\"Signer #1:\")\n+                .shouldContain(\"Certificate #1:\")\n+                .shouldContain(\"Certificate #2:\")\n+                .shouldNotContain(\"Signer #2:\")\n+                .shouldMatch(\"The certificate #2 uses a 512-bit RSA key.*is disabled\")\n+                .shouldHaveExitValue(0);\n+\n+        kt(\"-genkeypair -keyalg rsa -alias ca2 -dname CN=CA2 -ext bc:c \" +\n+                \"-sigalg SHA1withRSA\", \"ks\");\n+        kt(\"-genkeypair -keyalg rsa -alias e2 -dname CN=E2\", \"ks\");\n+        gencert(\"e2\", \"-alias ca2 -ext san=dns:e2\");\n+\n+        \/\/ sign a1.jar file again with different signer\n+        SecurityTools.jarsigner(\"-keystore ks -storepass changeit \" +\n+                \" a1.jar e2\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.keytool(\"-printcert -jarfile a1.jar\")\n+                .shouldNotContain(\"Signature:\")\n+                .shouldContain(\"Signer #1:\")\n+                .shouldContain(\"Certificate #1:\")\n+                .shouldContain(\"Certificate #2:\")\n+                .shouldContain(\"Signer #2:\")\n+                .shouldMatch(\"The certificate #.* of signer #.*\" + \"uses the SHA1withRSA.*will be disabled\")\n+                .shouldMatch(\"The certificate #.* of signer #.*\" + \"uses a 512-bit RSA key.*is disabled\")\n+                .shouldHaveExitValue(0);\n+\n+        kt(\"-genkeypair -keyalg rsa -alias e3 -dname CN=E3\",\n+                \"ks\");\n+        JarUtils.createJarFile(Path.of(\"a2.jar\"), Path.of(\".\"), Path.of(\"ks\"));\n+        \/\/ sign a2.jar file\n+        SecurityTools.jarsigner(\"-keystore ks -storepass changeit \" +\n+                \" a2.jar e3\")\n+                .shouldHaveExitValue(0);\n+\n+        kt(\"-genkeypair -keyalg rsa -alias e4 -dname CN=E4 \" +\n+                \"-keysize 1024\", \"ks\");\n+        \/\/ sign a2.jar file again with different signer\n+        SecurityTools.jarsigner(\"-keystore ks -storepass changeit \" +\n+                \" a2.jar e4\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.keytool(\"-printcert -jarfile a2.jar\")\n+                .shouldNotContain(\"Signature:\")\n+                .shouldContain(\"Signer #1:\")\n+                .shouldContain(\"Certificate #1:\")\n+                .shouldNotContain(\"Certificate #2:\")\n+                .shouldContain(\"Signer #2:\")\n+                .shouldMatch(\"The certificate of signer #.*\" + \"uses a 1024-bit RSA key.*will be disabled\")\n+                .shouldHaveExitValue(0);\n+    }\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/ReadJar.java","additions":98,"deletions":2,"binary":false,"changes":100,"status":"modified"}]}