{"files":[{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc.arguments;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/**\n+ * Helper class for adding options to child processes that should be\n+ * used by all of the argument tests in this package.  The default\n+ * options are added at the front, to allow them to be overridden by\n+ * explicit options from any particular test.\n+ *\/\n+\n+public final class GCArguments {\n+\n+    \/\/ Avoid excessive execution time.\n+    static private void disableZapUnusedHeapArea(List<String> arguments) {\n+        \/\/ Develop option, only available in debug builds.\n+        if (Platform.isDebugBuild()) {\n+            arguments.add(\"-XX:-ZapUnusedHeapArea\");\n+        }\n+    }\n+\n+    \/\/ Avoid excessive execution time.\n+    static private void disableVerifyBeforeExit(List<String> arguments) {\n+        \/\/ Diagnostic option, default enabled in debug builds.\n+        if (Platform.isDebugBuild()) {\n+            arguments.add(\"-XX:-VerifyBeforeExit\");\n+        }\n+    }\n+\n+    static private void addDefaults(List<String> arguments) {\n+        disableZapUnusedHeapArea(arguments);\n+        disableVerifyBeforeExit(arguments);\n+    }\n+\n+    static private String[] withDefaults(String[] arguments) {\n+        List<String> augmented = new ArrayList<String>();\n+        addDefaults(augmented);\n+        Collections.addAll(augmented, arguments);\n+        return augmented.toArray(new String[augmented.size()]);\n+    }\n+\n+    static public ProcessBuilder createJavaProcessBuilder(String... arguments) {\n+        return createJavaProcessBuilder(false, arguments);\n+    }\n+\n+    static public ProcessBuilder createJavaProcessBuilder(boolean addTestVmAndJavaOptions,\n+                                                          String... arguments) {\n+        return ProcessTools.createJavaProcessBuilder(addTestVmAndJavaOptions,\n+                                                     withDefaults(arguments));\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/GCArguments.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -33,0 +33,1 @@\n+ * @library \/\n@@ -69,1 +70,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+        ProcessBuilder pb = GCArguments.createJavaProcessBuilder(\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestAggressiveHeap.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @library \/\n@@ -55,1 +56,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(\n@@ -81,1 +82,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestArrayAllocatorMallocLimit.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+ * @library \/\n@@ -53,1 +54,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(args);\n+        ProcessBuilder pb = GCArguments.createJavaProcessBuilder(args);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestCompressedClassFlags.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @library \/\n@@ -44,7 +45,7 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-XX:-UseSerialGC\",\n-                                                                  \"-XX:-UseParallelGC\",\n-                                                                  \"-XX:-UseG1GC\",\n-                                                                  \"-XX:-UseConcMarkSweepGC\",\n-                                                                  \"-XX:+UnlockExperimentalVMOptions\",\n-                                                                  \"-XX:-UseZGC\",\n-                                                                  \"-version\");\n+        ProcessBuilder pb = GCArguments.createJavaProcessBuilder(\"-XX:-UseSerialGC\",\n+                                                                 \"-XX:-UseParallelGC\",\n+                                                                 \"-XX:-UseG1GC\",\n+                                                                 \"-XX:-UseConcMarkSweepGC\",\n+                                                                 \"-XX:+UnlockExperimentalVMOptions\",\n+                                                                 \"-XX:-UseZGC\",\n+                                                                 \"-version\");\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestDisableDefaultGC.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @library \/\n@@ -82,1 +83,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(vmOpts.toArray(new String[vmOpts.size()]));\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(vmOpts.toArray(new String[vmOpts.size()]));\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1ConcMarkStepDurationMillis.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @library \/\n@@ -73,1 +74,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(vmOpts.toArray(new String[vmOpts.size()]));\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(vmOpts.toArray(new String[vmOpts.size()]));\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1ConcRefinementThreads.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @library \/\n@@ -56,1 +57,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(flagList.toArray(new String[0]));\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(flagList.toArray(new String[0]));\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1HeapRegionSize.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @library \/\n@@ -68,1 +69,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(flags);\n+        ProcessBuilder pb = GCArguments.createJavaProcessBuilder(flags);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1PercentageOptions.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @library \/\n@@ -51,1 +52,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestHeapFreeRatio.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @library \/\n@@ -45,1 +46,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(\n@@ -62,1 +63,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestInitialTenuringThreshold.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(gcflag,\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(gcflag,\n@@ -182,1 +182,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(finalargs.toArray(new String[0]));\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(finalargs.toArray(new String[0]));\n@@ -282,1 +282,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(flags);\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(flags);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMaxHeapSizeTools.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-        ProcessBuilder procBuilder = ProcessTools.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n+        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n@@ -128,1 +128,1 @@\n-        ProcessBuilder procBuilder = ProcessTools.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n+        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMaxMinHeapFreeRatioFlags.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @library \/\n@@ -48,0 +49,1 @@\n+ * @library \/\n@@ -62,0 +64,1 @@\n+ * @library \/\n@@ -75,0 +78,1 @@\n+ * @library \/\n@@ -107,1 +111,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(finalargs.toArray(new String[0]));\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(finalargs.toArray(new String[0]));\n@@ -130,1 +134,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(finalargs.toArray(new String[0]));\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(finalargs.toArray(new String[0]));\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMaxNewSize.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-        ProcessBuilder procBuilder = ProcessTools.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n+        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMinAndInitialSurvivorRatioFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-        ProcessBuilder procBuilder = ProcessTools.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n+        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestNewRatioFlag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-        ProcessBuilder procBuilder = ProcessTools.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n+        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestNewSizeFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @library \/\n@@ -70,7 +71,7 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-XX:+UseSerialGC\",\n-                                                              \"-Xms96M\",\n-                                                              \"-Xmx128M\",\n-                                                              \"-XX:NewRatio=2\",\n-                                                              \"-Xlog:gc+heap+ergo=debug\",\n-                                                              \"-XX:NewSizeThreadIncrease=\"+expectedValue,\n-                                                              GCTest.class.getName());\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(\"-XX:+UseSerialGC\",\n+                                                             \"-Xms96M\",\n+                                                             \"-Xmx128M\",\n+                                                             \"-XX:NewRatio=2\",\n+                                                             \"-Xlog:gc+heap+ergo=debug\",\n+                                                             \"-XX:NewSizeThreadIncrease=\"+expectedValue,\n+                                                             GCTest.class.getName());\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestNewSizeThreadIncrease.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(vmOpts.toArray(new String[vmOpts.size()]));\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(vmOpts.toArray(new String[vmOpts.size()]));\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestObjectTenuringFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(\n@@ -104,1 +104,1 @@\n-      ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(flags);\n+      ProcessBuilder pb = GCArguments.createJavaProcessBuilder(flags);\n@@ -127,1 +127,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(flags);\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(flags);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestParallelGCThreads.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @library \/\n@@ -83,1 +84,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(result.toArray(new String[0]));\n+        ProcessBuilder pb = GCArguments.createJavaProcessBuilder(result.toArray(new String[0]));\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestParallelRefProc.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @library \/\n@@ -58,1 +59,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(args);\n+        ProcessBuilder pb = GCArguments.createJavaProcessBuilder(args);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestSelectDefaultGC.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @library \/\n@@ -70,1 +71,1 @@\n-    ProcessBuilder pb_enabled = ProcessTools.createJavaProcessBuilder(vmArgs);\n+    ProcessBuilder pb_enabled = GCArguments.createJavaProcessBuilder(vmArgs);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestSmallInitialHeapWithLargePageAndNUMA.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-        ProcessBuilder procBuilder = ProcessTools.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n+        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestSurvivorRatioFlag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-        ProcessBuilder procBuilder = ProcessTools.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n+        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n@@ -155,1 +155,1 @@\n-        ProcessBuilder procBuilder = ProcessTools.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n+        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestTargetSurvivorRatioFlag.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @library \/\n@@ -44,1 +45,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(\n@@ -54,1 +55,1 @@\n-    pb = ProcessTools.createJavaProcessBuilder(\n+    pb = GCArguments.createJavaProcessBuilder(\n@@ -65,1 +66,1 @@\n-    pb = ProcessTools.createJavaProcessBuilder(\n+    pb = GCArguments.createJavaProcessBuilder(\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestUnrecognizedVMOptionsHandling.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(finalargs.toArray(new String[0]));\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(finalargs.toArray(new String[0]));\n@@ -172,1 +172,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(flags);\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(flags);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestUseCompressedOopsErgoTools.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @library \/\n@@ -48,1 +49,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, vmargs);\n+        ProcessBuilder pb = GCArguments.createJavaProcessBuilder(true, vmargs);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestUseNUMAInterleaving.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+ * @library \/\n@@ -79,1 +80,0 @@\n-\n@@ -92,2 +92,2 @@\n-            ProcessTools.createJavaProcessBuilder(vmOpts.toArray(\n-                                                   new String[vmOpts.size()]));\n+            GCArguments.createJavaProcessBuilder(vmOpts.toArray(\n+                                                     new String[vmOpts.size()]));\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestVerifyBeforeAndAfterGCFlags.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}