{"files":[{"patch":"@@ -0,0 +1,156 @@\n+\/****************************************************************************\n+ *\n+ * ftcolor.c\n+ *\n+ *   FreeType's glyph color management (body).\n+ *\n+ * Copyright (C) 2018-2022 by\n+ * David Turner, Robert Wilhelm, and Werner Lemberg.\n+ *\n+ * This file is part of the FreeType project, and may only be used,\n+ * modified, and distributed under the terms of the FreeType project\n+ * license, LICENSE.TXT.  By continuing to use, modify, or distribute\n+ * this file you indicate that you have read the license and\n+ * understand and accept it fully.\n+ *\n+ *\/\n+\n+\n+#include <freetype\/internal\/ftdebug.h>\n+#include <freetype\/internal\/sfnt.h>\n+#include <freetype\/internal\/tttypes.h>\n+#include <freetype\/ftcolor.h>\n+\n+\n+#ifdef TT_CONFIG_OPTION_COLOR_LAYERS\n+\n+  static\n+  const FT_Palette_Data  null_palette_data = { 0, NULL, NULL, 0, NULL };\n+\n+\n+  \/* documentation is in ftcolor.h *\/\n+\n+  FT_EXPORT_DEF( FT_Error )\n+  FT_Palette_Data_Get( FT_Face           face,\n+                       FT_Palette_Data  *apalette_data )\n+  {\n+    if ( !face )\n+      return FT_THROW( Invalid_Face_Handle );\n+    if ( !apalette_data)\n+      return FT_THROW( Invalid_Argument );\n+\n+    if ( FT_IS_SFNT( face ) )\n+      *apalette_data = ( (TT_Face)face )->palette_data;\n+    else\n+      *apalette_data = null_palette_data;\n+\n+    return FT_Err_Ok;\n+  }\n+\n+\n+  \/* documentation is in ftcolor.h *\/\n+\n+  FT_EXPORT_DEF( FT_Error )\n+  FT_Palette_Select( FT_Face     face,\n+                     FT_UShort   palette_index,\n+                     FT_Color*  *apalette )\n+  {\n+    FT_Error  error;\n+\n+    TT_Face       ttface;\n+    SFNT_Service  sfnt;\n+\n+\n+    if ( !face )\n+      return FT_THROW( Invalid_Face_Handle );\n+\n+    if ( !FT_IS_SFNT( face ) )\n+    {\n+      if ( apalette )\n+        *apalette = NULL;\n+\n+      return FT_Err_Ok;\n+    }\n+\n+    ttface = (TT_Face)face;\n+    sfnt   = (SFNT_Service)ttface->sfnt;\n+\n+    error = sfnt->set_palette( ttface, palette_index );\n+    if ( error )\n+      return error;\n+\n+    ttface->palette_index = palette_index;\n+\n+    if ( apalette )\n+      *apalette = ttface->palette;\n+\n+    return FT_Err_Ok;\n+  }\n+\n+\n+  \/* documentation is in ftcolor.h *\/\n+\n+  FT_EXPORT_DEF( FT_Error )\n+  FT_Palette_Set_Foreground_Color( FT_Face   face,\n+                                   FT_Color  foreground_color )\n+  {\n+    TT_Face  ttface;\n+\n+\n+    if ( !face )\n+      return FT_THROW( Invalid_Face_Handle );\n+\n+    if ( !FT_IS_SFNT( face ) )\n+      return FT_Err_Ok;\n+\n+    ttface = (TT_Face)face;\n+\n+    ttface->foreground_color      = foreground_color;\n+    ttface->have_foreground_color = 1;\n+\n+    return FT_Err_Ok;\n+  }\n+\n+#else \/* !TT_CONFIG_OPTION_COLOR_LAYERS *\/\n+\n+  FT_EXPORT_DEF( FT_Error )\n+  FT_Palette_Data_Get( FT_Face           face,\n+                       FT_Palette_Data  *apalette_data )\n+  {\n+    FT_UNUSED( face );\n+    FT_UNUSED( apalette_data );\n+\n+\n+    return FT_THROW( Unimplemented_Feature );\n+  }\n+\n+\n+  FT_EXPORT_DEF( FT_Error )\n+  FT_Palette_Select( FT_Face     face,\n+                     FT_UShort   palette_index,\n+                     FT_Color*  *apalette )\n+  {\n+    FT_UNUSED( face );\n+    FT_UNUSED( palette_index );\n+    FT_UNUSED( apalette );\n+\n+\n+    return FT_THROW( Unimplemented_Feature );\n+  }\n+\n+\n+  FT_EXPORT_DEF( FT_Error )\n+  FT_Palette_Set_Foreground_Color( FT_Face   face,\n+                                   FT_Color  foreground_color )\n+  {\n+    FT_UNUSED( face );\n+    FT_UNUSED( foreground_color );\n+\n+\n+    return FT_THROW( Unimplemented_Feature );\n+  }\n+\n+#endif \/* !TT_CONFIG_OPTION_COLOR_LAYERS *\/\n+\n+\n+\/* END *\/\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftcolor.c","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"}]}