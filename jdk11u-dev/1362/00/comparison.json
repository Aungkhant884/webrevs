{"files":[{"patch":"@@ -2213,12 +2213,7 @@\n-#ifdef ASSERT\n-        \/\/ Added assertion code since no case has been observed that should pick the first memory state.\n-        \/\/ Remove the assertion code whenever we find a (valid) case that really needs the first memory state.\n-        pk->dump();\n-        first_mem->dump();\n-        last_mem->dump();\n-        current->dump();\n-        ld->dump();\n-        ld->in(MemNode::Memory)->dump();\n-        assert(false, \"never observed that first memory should be picked\");\n-#endif\n-        return first_mem; \/\/ A later store depends on this load, pick memory state of first load\n+        \/\/ A later store depends on this load, pick the memory state of the first load. This can happen, for example,\n+        \/\/ if a load pack has interleaving stores that are part of a store pack which, however, is removed at the pack\n+        \/\/ filtering stage. This leaves us with only a load pack for which we cannot take the memory state of the\n+        \/\/ last load as the remaining unvectorized stores could interfere since they have a dependency to the loads.\n+        \/\/ Some stores could be executed before the load vector resulting in a wrong result. We need to take the\n+        \/\/ memory state of the first load to prevent this.\n+        return first_mem;\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/**\n+ * @test\n+ * @requires vm.compiler2.enabled\n+ * @bug 8240281\n+ * @summary Test which needs to select the memory state of the first load in a load pack in SuperWord::co_locate_pack.\n+ *\n+ * @run main\/othervm -Xcomp -XX:CompileCommand=compileonly,compiler.loopopts.superword.TestPickFirstMemoryState::*\n+ *                   compiler.loopopts.superword.TestPickFirstMemoryState\n+ * @run main\/othervm -XX:CompileCommand=dontinline,compiler.loopopts.superword.TestPickFirstMemoryState::*\n+ *                   compiler.loopopts.superword.TestPickFirstMemoryState\n+ *\/\n+\n+package compiler.loopopts.superword;\n+\n+public class TestPickFirstMemoryState {\n+\n+    static int iArrFld[] = new int[50];\n+\n+    static int test() {\n+        int x = 2;\n+        for (int i = 50; i > 9; i--) {\n+            \/\/ We create an AddI pack and a LoadI pack for the following loop. The StoreI pack gets filtered. When\n+            \/\/ finding the memory state for the load pack, we cannot pick the memory state from the last load as\n+            \/\/ the stores (which are not vectorized) could interfere and be executed before the load pack (already\n+            \/\/ writing 'j' to iArrFld which is afterwards loaded by the load vector operation). This leads to a\n+            \/\/ wrong result for 'x'. We must take the memory state of the first load where we have not yet assigned\n+            \/\/ any new values ('j') to the iArrFld array.\n+            x = 2;\n+            for (int j = 10; j < 50; j++) {\n+                x += iArrFld[j]; \/\/ AddI pack + LoadI pack\n+                iArrFld[j] = j; \/\/ StoreI pack that gets removed while filtering packs\n+            }\n+            reset();\n+        }\n+\n+        return x;\n+    }\n+\n+    static int test2() {\n+        int x = 2;\n+        int y = 3;\n+        for (int i = 50; i > 9; i--) {\n+            x = 2;\n+            for (int j = 10; j < 50; j++) {\n+                x += iArrFld[j];\n+                iArrFld[j] = (y++);\n+            }\n+            reset();\n+        }\n+        return x;\n+    }\n+\n+    static int test3() {\n+        int x = 2;\n+        for (int i = 50; i > 9; i--) {\n+            x = 2;\n+            int y = i;\n+            for (int j = 10; j < 50; j++) {\n+                y++;\n+                x += iArrFld[j];\n+                iArrFld[j] = y;\n+            }\n+            reset();\n+        }\n+        return x;\n+    }\n+\n+    static int test4() {\n+        int x = 2;\n+        long y = 3L;\n+        for (int i = 50; i > 9; i--) {\n+            x = 2;\n+            for (int j = 10; j < 50; j++) {\n+                x += iArrFld[j];\n+                iArrFld[j] = (int)(y++);\n+            }\n+            reset();\n+        }\n+        return x;\n+    }\n+\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 5000; i++) {\n+            reset();\n+            int x = test();\n+            if (x != 202) {\n+                throw new RuntimeException(\"test() wrong result: \" + x);\n+            }\n+            x = test2();\n+            if (x != 202) {\n+                throw new RuntimeException(\"test2() wrong result: \" + x);\n+            }\n+            x = test3();\n+            if (x != 202) {\n+                throw new RuntimeException(\"test3() wrong result: \" + x);\n+            }\n+            x = test4();\n+            if (x != 202) {\n+                throw new RuntimeException(\"test4() wrong result: \" + x);\n+            }\n+        }\n+    }\n+\n+    public static void reset() {\n+        for (int i = 0; i < iArrFld.length; i++) {\n+            iArrFld[i] = 5;\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestPickFirstMemoryState.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"}]}