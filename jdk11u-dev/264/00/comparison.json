{"files":[{"patch":"@@ -43,1 +43,0 @@\n-\n@@ -47,1 +46,9 @@\n-    jstring jStr = (*env)->NewStringUTF(env, [str UTF8String]);\n+    jsize len = [str length];\n+    unichar *buffer = (unichar*)calloc(len, sizeof(unichar));\n+    if (buffer == NULL) {\n+       return NULL;\n+    }\n+    NSRange crange = NSMakeRange(0, len);\n+    [str getCharacters:buffer range:crange];\n+    jstring jStr = (*env)->NewString(env, buffer, len);\n+    free(buffer);\n","filename":"src\/java.desktop\/macosx\/native\/libosxapp\/JNIUtilities.m","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @key headful\n+  @bug 8272602\n+  @summary Ctrl+Space should generate a KeyTyped event on macOS\n+  @run main CtrlSpace\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.TextField;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+\n+public class CtrlSpace extends Frame implements KeyListener {\n+\n+    static volatile boolean testPassed = false;\n+    static volatile Robot robot;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(100);\n+\n+        Frame frame = createAndShowGUI(robot);\n+\n+        test(robot);\n+        robot.waitForIdle();\n+        Thread.sleep(2000);\n+        frame.setVisible(false);\n+        frame.dispose();\n+        if (!testPassed) {\n+            throw new RuntimeException(\"No KeyTyped event\");\n+        }\n+    }\n+\n+\n+   static Frame createAndShowGUI(Robot robot) {\n+        CtrlSpace win = new CtrlSpace();\n+        win.setSize(300, 300);\n+        Panel panel = new Panel(new BorderLayout());\n+        TextField textField = new TextField(\"abcdefghijk\");\n+        textField.addKeyListener(win);\n+        panel.add(textField, BorderLayout.CENTER);\n+        win.add(panel);\n+        win.setVisible(true);\n+        robot.waitForIdle();\n+        textField.requestFocusInWindow();\n+        robot.waitForIdle();\n+        return win;\n+    }\n+\n+    public static void test(Robot robot) {\n+        robot.keyPress(KeyEvent.VK_CONTROL);\n+        robot.keyPress(KeyEvent.VK_SPACE);\n+        robot.keyRelease(KeyEvent.VK_SPACE);\n+        robot.keyRelease(KeyEvent.VK_CONTROL);\n+        robot.delay(200);\n+    }\n+\n+    public void keyPressed(KeyEvent evt) {\n+        System.out.println(\"Pressed \" + evt);\n+    }\n+\n+    public void keyReleased(KeyEvent evt) {\n+        System.out.println(\"Released \" + evt);\n+    }\n+\n+    public void keyTyped(KeyEvent evt) {\n+        System.out.println(\"Typed \" + evt);\n+        testPassed = true;\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/KeyTyped\/CtrlSpace.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"}]}