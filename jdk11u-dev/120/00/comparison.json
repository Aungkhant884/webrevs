{"files":[{"patch":"@@ -66,0 +66,23 @@\n+    \/**\n+     * Classes for lambdas can have {@code \/} characters that are not package separators. These are\n+     * distinguished by being followed by a character that is not a\n+     * {@link Character#isJavaIdentifierStart(char)} (e.g.,\n+     * \"jdk.vm.ci.runtime.test.TypeUniverse$$Lambda$1\/869601985\").\n+     *\/\n+    private static String replacePackageSeparatorsWithDot(String name) {\n+        int length = name.length();\n+        int i = 0;\n+        StringBuilder buf = new StringBuilder(length);\n+        while (i < length - 1) {\n+            char ch = name.charAt(i);\n+            if (ch == '\/' && Character.isJavaIdentifierStart(name.charAt(i + 1))) {\n+                buf.append('.');\n+            } else {\n+                buf.append(ch);\n+            }\n+            i++;\n+        }\n+        buf.append(name.charAt(length - 1));\n+        return buf.toString();\n+    }\n+\n@@ -79,1 +102,1 @@\n-                String result = name.substring(1, name.length() - 1).replace('\/', '.');\n+                String result = replacePackageSeparatorsWithDot(name.substring(1, name.length() - 1));\n@@ -89,1 +112,1 @@\n-                return classForNameCompatible ? name.replace('\/', '.') : internalNameToJava(name.substring(1), qualified, classForNameCompatible) + \"[]\";\n+                return classForNameCompatible ? replacePackageSeparatorsWithDot(name) : internalNameToJava(name.substring(1), qualified, classForNameCompatible) + \"[]\";\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.meta\/src\/jdk\/vm\/ci\/meta\/MetaUtil.java","additions":25,"deletions":2,"binary":false,"changes":27,"status":"modified"}]}