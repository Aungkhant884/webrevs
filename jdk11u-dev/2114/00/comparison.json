{"files":[{"patch":"@@ -243,0 +243,1 @@\n+        java.net.http,\n@@ -244,1 +245,1 @@\n-        java.net.http;\n+        jdk.sctp;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * value determines if the channel should try to receive another notificaiton or\n+ * value determines if the channel should try to receive another notification or\n","filename":"src\/jdk.sctp\/share\/classes\/com\/sun\/nio\/sctp\/HandlerResult.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+import sun.net.util.IPAddressUtil;\n@@ -1036,0 +1037,3 @@\n+            if (addr.isLinkLocalAddress()) {\n+                addr = IPAddressUtil.toScopedAddress(addr);\n+            }\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpChannelImpl.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+import sun.net.util.IPAddressUtil;\n@@ -895,0 +896,3 @@\n+            if (addr.isLinkLocalAddress()) {\n+                addr = IPAddressUtil.toScopedAddress(addr);\n+            }\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpMultiChannelImpl.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import sun.net.util.IPAddressUtil;\n@@ -172,0 +173,4 @@\n+                InetAddress inetAddress = netAddr.getAddress();\n+                if (inetAddress.isLinkLocalAddress()) {\n+                    inetAddress = IPAddressUtil.toScopedAddress(inetAddress);\n+                }\n@@ -174,1 +179,1 @@\n-                                   netAddr.getAddress(),\n+                                   inetAddress,\n","filename":"src\/jdk.sctp\/unix\/classes\/sun\/nio\/ch\/sctp\/SctpNet.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,3 +113,4 @@\n-                connectChannel(channel);\n-                channel.bind(null);\n-                fail(\"AlreadyConnectedException expected\");\n+                try (var peer = connectChannel(channel)) {\n+                    channel.bind(null);\n+                    fail(\"AlreadyConnectedException expected\");\n+                }\n@@ -267,1 +268,3 @@\n-        }\n+            try { if (peerChannel != null) peerChannel.close(); }\n+            catch (IOException ioe) { unexpected(ioe); }\n+         }\n","filename":"test\/jdk\/com\/sun\/nio\/sctp\/SctpChannel\/Bind.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -194,0 +194,3 @@\n+            try { sc.close(); }\n+            catch (IOException ioe) { unexpected(ioe); }\n+\n","filename":"test\/jdk\/com\/sun\/nio\/sctp\/SctpChannel\/CommUp.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -64,1 +64,0 @@\n-        SctpServerChannel ssc = null;\n@@ -66,1 +65,1 @@\n-        try {\n+        try (SctpServerChannel ssc = SctpServerChannel.open()) {\n@@ -68,1 +67,1 @@\n-            ssc = SctpServerChannel.open().bind(null);\n+            ssc.bind(null);\n@@ -212,2 +211,0 @@\n-            try { if (ssc != null) ssc.close(); }\n-            catch (IOException unused) {}\n","filename":"test\/jdk\/com\/sun\/nio\/sctp\/SctpChannel\/Connect.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -75,2 +75,1 @@\n-        try {\n-            SctpChannel sc = SctpChannel.open();\n+        try (SctpChannel sc = SctpChannel.open()) {\n@@ -146,2 +145,0 @@\n-        SocketAddress addrToSet = null;;\n-\n@@ -161,3 +158,3 @@\n-        Set<SocketAddress> peerAddrs = peerChannel.getAllLocalAddresses();\n-        debug(\"Peer local Addresses: \");\n-        for (Iterator<SocketAddress> it = peerAddrs.iterator(); it.hasNext(); ) {\n+        Set<SocketAddress> remoteAddresses = sc.getRemoteAddresses();\n+        debug(\"Remote Addresses: \");\n+        for (Iterator<SocketAddress> it = remoteAddresses.iterator(); it.hasNext(); ) {\n@@ -166,1 +163,0 @@\n-            addrToSet = addr;   \/\/ any of the peer addresses will do!\n@@ -179,9 +175,11 @@\n-            \/* Verify that this is one of the peer addresses *\/\n-            boolean found = false;\n-            addrToSet = primaryAddr; \/\/ may not have more than one addr\n-            for (Iterator<SocketAddress> it = peerAddrs.iterator(); it.hasNext(); ) {\n-                InetSocketAddress addr = (InetSocketAddress)it.next();\n-                if (addr.equals(primaryAddr)) {\n-                    found = true;\n-                }\n-                addrToSet = addr;\n+            \/* Verify that this is one of the remote addresses *\/\n+            check(remoteAddresses.contains(primaryAddr), \"SCTP_PRIMARY_ADDR returned bogus address!\");\n+\n+            for (Iterator<SocketAddress> it = remoteAddresses.iterator(); it.hasNext(); ) {\n+                InetSocketAddress addrToSet = (InetSocketAddress) it.next();\n+                System.out.println(\"SCTP_PRIMARY_ADDR try set to: \" + addrToSet);\n+                sc.setOption(SCTP_PRIMARY_ADDR, addrToSet);\n+                System.out.println(\"SCTP_PRIMARY_ADDR set to    : \" + addrToSet);\n+                primaryAddr = sc.getOption(SCTP_PRIMARY_ADDR);\n+                System.out.println(\"SCTP_PRIMARY_ADDR returned  : \" + primaryAddr);\n+                check(addrToSet.equals(primaryAddr), \"SCTP_PRIMARY_ADDR not set correctly\");\n@@ -189,8 +187,0 @@\n-            check(found, \"SCTP_PRIMARY_ADDR returned bogus address!\");\n-\n-            System.out.println(\"SCTP_PRIMARY_ADDR try set to: \" + addrToSet);\n-            sc.setOption(SCTP_PRIMARY_ADDR, addrToSet);\n-            System.out.println(\"SCTP_PRIMARY_ADDR set to: \" + addrToSet);\n-            primaryAddr = sc.getOption(SCTP_PRIMARY_ADDR);\n-            System.out.println(\"SCTP_PRIMARY_ADDR returned: \" + primaryAddr);\n-            check(addrToSet.equals(primaryAddr),\"SCTP_PRIMARY_ADDR not set correctly\");\n@@ -198,0 +188,2 @@\n+        sc.close();\n+        peerChannel.close();\n","filename":"test\/jdk\/com\/sun\/nio\/sctp\/SctpChannel\/SocketOptionTests.java","additions":17,"deletions":25,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -213,1 +213,2 @@\n-                int bytes = serverChannel.send(buffer, info);\n+                MessageInfo sendInfo = MessageInfo.createOutgoing(info.association(), null, 0);\n+                int bytes = serverChannel.send(buffer, sendInfo);\n","filename":"test\/jdk\/com\/sun\/nio\/sctp\/SctpMultiChannel\/Branch.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -279,1 +279,2 @@\n-                int bytes = serverChannel.send(buffer, info);\n+                MessageInfo sendInfo = MessageInfo.createOutgoing(assoc, null, info.streamNumber());\n+                int bytes = serverChannel.send(buffer, sendInfo);\n@@ -305,1 +306,2 @@\n-                bytes = serverChannel.send(buffer, info);\n+                sendInfo = MessageInfo.createOutgoing(assoc, null, info.streamNumber());\n+                bytes = serverChannel.send(buffer, sendInfo);\n","filename":"test\/jdk\/com\/sun\/nio\/sctp\/SctpMultiChannel\/Send.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -100,8 +100,13 @@\n-            channel.receive(recvBuffer, null, handler);\n-\n-            \/\/ verify sent buffer received by send failed notification\n-            ByteBuffer buffer = handler.getSendFailedByteBuffer();\n-            check(buffer.remaining() == sent);\n-            check(buffer.position() == 0);\n-            check(buffer.limit() == sent);\n-            assertSameContent(sendBuffer, handler.getSendFailedByteBuffer());\n+            MessageInfo info = channel.receive(recvBuffer, null, handler);\n+            debug(\"receive returned info:\" + info);\n+\n+            if (handler.receivedSendFailed) {\n+                \/\/ verify sent buffer received by send failed notification\n+                ByteBuffer buffer = handler.getSendFailedByteBuffer();\n+                check(buffer.remaining() == sent);\n+                check(buffer.position() == 0);\n+                check(buffer.limit() == sent);\n+                assertSameContent(sendBuffer, handler.getSendFailedByteBuffer());\n+            } else {\n+                debug(\"Unexpected event or received data. Check output.\");\n+            }\n@@ -115,0 +120,1 @@\n+        boolean receivedSendFailed;\n@@ -137,0 +143,1 @@\n+            receivedSendFailed = true;\n","filename":"test\/jdk\/com\/sun\/nio\/sctp\/SctpMultiChannel\/SendFailed.java","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -157,1 +157,0 @@\n-        SocketAddress addrToSet = null;\n@@ -192,3 +191,3 @@\n-        Set<SocketAddress> peerAddrs = peerChannel.getAllLocalAddresses();\n-        debug(\"Peer local Addresses: \");\n-        for (Iterator<SocketAddress> it = peerAddrs.iterator(); it.hasNext(); ) {\n+        Set<SocketAddress> remoteAddresses = smc.getRemoteAddresses(assoc);\n+        debug(\"Remote Addresses: \");\n+        for (Iterator<SocketAddress> it = remoteAddresses.iterator(); it.hasNext(); ) {\n@@ -197,1 +196,0 @@\n-            addrToSet = addr;   \/\/ any of the peer addresses will do!\n@@ -210,9 +208,11 @@\n-            \/* Verify that this is one of the peer addresses *\/\n-            boolean found = false;\n-            addrToSet = primaryAddr; \/\/ may not have more than one addr\n-            for (Iterator<SocketAddress> it = peerAddrs.iterator(); it.hasNext(); ) {\n-                InetSocketAddress addr = (InetSocketAddress)it.next();\n-                if (addr.equals(primaryAddr)) {\n-                    found = true;\n-                }\n-                addrToSet = addr;\n+            \/* Verify that this is one of the remote addresses *\/\n+            check(remoteAddresses.contains(primaryAddr), \"SCTP_PRIMARY_ADDR returned bogus address!\");\n+\n+            for (Iterator<SocketAddress> it = remoteAddresses.iterator(); it.hasNext(); ) {\n+                InetSocketAddress addrToSet = (InetSocketAddress) it.next();\n+                System.out.println(\"SCTP_PRIMARY_ADDR try set to: \" + addrToSet);\n+                smc.setOption(SCTP_PRIMARY_ADDR, addrToSet, assoc);\n+                System.out.println(\"SCTP_PRIMARY_ADDR set to    : \" + addrToSet);\n+                primaryAddr = smc.getOption(SCTP_PRIMARY_ADDR, assoc);\n+                System.out.println(\"SCTP_PRIMARY_ADDR returned  : \" + primaryAddr);\n+                check(addrToSet.equals(primaryAddr), \"SCTP_PRIMARY_ADDR not set correctly\");\n@@ -220,8 +220,0 @@\n-            check(found, \"SCTP_PRIMARY_ADDR returned bogus address!\");\n-\n-            System.out.println(\"Try SCTP_PRIMARY_ADDR set to: \" + addrToSet);\n-            smc.setOption(SCTP_PRIMARY_ADDR, addrToSet, assoc);\n-            System.out.println(\"SCTP_PRIMARY_ADDR set to: \" + addrToSet);\n-            primaryAddr = smc.getOption(SCTP_PRIMARY_ADDR, assoc);\n-            System.out.println(\"SCTP_PRIMARY_ADDR returned: \" + primaryAddr);\n-            check(addrToSet.equals(primaryAddr),\"SCTP_PRIMARY_ADDR not set correctly\");\n@@ -229,0 +221,2 @@\n+        smc.close();\n+        peerChannel.close();\n","filename":"test\/jdk\/com\/sun\/nio\/sctp\/SctpMultiChannel\/SocketOptionTests.java","additions":16,"deletions":22,"binary":false,"changes":38,"status":"modified"}]}