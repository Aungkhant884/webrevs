{"files":[{"patch":"@@ -3,3 +3,3 @@\n-AARCH64_AS = \"<PATH-TO-AS>\"\n-AARCH64_OBJDUMP = \"<PATH-TO-OBJDUMP>\"\n-AARCH64_OBJCOPY = \"<PATH-TO-OBJCOPY>\"\n+AARCH64_AS = \"as\"\n+AARCH64_OBJDUMP = \"objdump\"\n+AARCH64_OBJCOPY = \"objcopy\"\n@@ -351,1 +351,1 @@\n-          return super(AddSubImmOp, self).cstr() + \"l);\"\n+          return super(AddSubImmOp, self).cstr() + \"ll);\"\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64-asmtest.py","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1618,1 +1618,1 @@\n-  const long framesize = C->frame_size_in_bytes();\n+  const int framesize = C->frame_size_in_bytes();\n@@ -3008,1 +3008,1 @@\n-          unsigned long offset;\n+          uintptr_t offset;\n@@ -3032,1 +3032,1 @@\n-    unsigned long off;\n+    uint64_t off;\n@@ -4082,1 +4082,1 @@\n-  predicate(Assembler::operand_valid_for_add_sub_immediate((long)n->get_int()));\n+  predicate(Assembler::operand_valid_for_add_sub_immediate((int64_t)n->get_int()));\n@@ -4093,1 +4093,1 @@\n-  predicate(Assembler::operand_valid_for_logical_immediate(\/*is32*\/true, (unsigned long)n->get_int()));\n+  predicate(Assembler::operand_valid_for_logical_immediate(\/*is32*\/true, (uint64_t)n->get_int()));\n@@ -4171,1 +4171,1 @@\n-  predicate(Assembler::operand_valid_for_logical_immediate(\/*is32*\/false, (unsigned long)n->get_long()));\n+  predicate(Assembler::operand_valid_for_logical_immediate(\/*is32*\/false, (uint64_t)n->get_long()));\n@@ -10263,0 +10263,4 @@\n+\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10279,0 +10283,3 @@\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10296,0 +10303,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10313,0 +10322,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10330,0 +10341,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10347,0 +10360,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10364,0 +10379,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10381,0 +10398,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10398,0 +10417,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10416,0 +10437,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10434,0 +10457,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10452,0 +10477,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10470,0 +10497,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10488,0 +10517,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10506,0 +10537,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10524,0 +10557,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10542,0 +10577,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10560,0 +10597,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10578,0 +10617,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10596,0 +10637,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10614,0 +10657,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10632,0 +10677,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10650,0 +10697,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10668,0 +10717,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10686,0 +10737,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10704,0 +10757,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10722,0 +10777,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10741,0 +10798,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10760,0 +10819,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10779,0 +10840,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10798,0 +10861,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10817,0 +10882,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10836,0 +10903,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10855,0 +10924,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10874,0 +10945,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10893,0 +10966,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10912,0 +10987,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10931,0 +11008,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10950,0 +11029,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10969,0 +11050,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -10988,0 +11071,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11007,0 +11092,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11026,0 +11113,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11045,0 +11134,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11064,0 +11155,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11083,0 +11176,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11102,0 +11197,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11121,0 +11218,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11140,0 +11239,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11159,0 +11260,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11178,0 +11281,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11197,0 +11302,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11216,0 +11323,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11235,0 +11344,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11254,0 +11365,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11273,0 +11386,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11292,1 +11407,3 @@\n-\n+ \n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11314,0 +11431,3 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+\n@@ -11334,0 +11454,3 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+\n@@ -11354,0 +11477,3 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+\n@@ -11373,0 +11499,1 @@\n+\n@@ -11375,0 +11502,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11385,1 +11514,1 @@\n-    long mask = $mask$$constant;\n+    intptr_t mask = $mask$$constant;\n@@ -11392,0 +11521,3 @@\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11402,1 +11534,1 @@\n-    long mask = $mask$$constant;\n+    intptr_t mask = $mask$$constant;\n@@ -11410,0 +11542,4 @@\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+\n@@ -11422,1 +11558,1 @@\n-    long mask = $mask$$constant;\n+    intptr_t mask = $mask$$constant;\n@@ -11431,0 +11567,3 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+\n@@ -11442,1 +11581,1 @@\n-    long mask = $mask$$constant;\n+    intptr_t mask = $mask$$constant;\n@@ -11450,0 +11589,3 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+\n@@ -11461,1 +11603,1 @@\n-    long mask = $mask$$constant;\n+    intptr_t mask = $mask$$constant;\n@@ -11469,0 +11611,3 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+\n@@ -11480,1 +11625,1 @@\n-    long mask = $mask$$constant;\n+    intptr_t mask = $mask$$constant;\n@@ -11488,0 +11633,3 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+\n@@ -11499,1 +11647,1 @@\n-    long mask = $mask$$constant;\n+    intptr_t mask = $mask$$constant;\n@@ -11508,0 +11656,3 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+\n@@ -11518,1 +11669,1 @@\n-    long mask = $mask$$constant;\n+    intptr_t mask = $mask$$constant;\n@@ -11526,0 +11677,3 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+\n@@ -11536,1 +11690,1 @@\n-    long mask = $mask$$constant;\n+    intptr_t mask = $mask$$constant;\n@@ -11556,1 +11710,0 @@\n-\/\/ Rotations\n@@ -11558,0 +11711,3 @@\n+\/\/ Rotations \n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11573,0 +11729,3 @@\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11588,0 +11747,3 @@\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11603,0 +11765,3 @@\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11619,1 +11784,2 @@\n-\/\/ rol expander\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11621,0 +11787,1 @@\n+\/\/ rol expander\n@@ -11635,1 +11802,2 @@\n-\/\/ rol expander\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11637,0 +11805,1 @@\n+\/\/ rol expander\n@@ -11651,0 +11820,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11660,0 +11831,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11669,0 +11842,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11678,0 +11853,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11687,1 +11864,2 @@\n-\/\/ ror expander\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11689,0 +11867,1 @@\n+\/\/ ror expander\n@@ -11702,1 +11881,2 @@\n-\/\/ ror expander\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11704,0 +11884,1 @@\n+\/\/ ror expander\n@@ -11717,0 +11898,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11726,0 +11909,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11735,0 +11920,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11744,0 +11931,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11753,0 +11942,1 @@\n+\n@@ -11755,0 +11945,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11766,1 +11958,1 @@\n-%};\n+%}\n@@ -11768,0 +11960,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11779,2 +11973,1 @@\n-%};\n-\n+%}\n@@ -11782,0 +11975,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11795,0 +11990,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11808,0 +12005,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11821,0 +12020,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11834,0 +12035,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11847,0 +12050,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11860,0 +12065,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11873,1 +12080,2 @@\n-\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11887,0 +12095,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11900,0 +12110,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11913,0 +12125,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11926,0 +12140,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11939,0 +12155,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11952,0 +12170,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11965,0 +12185,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11978,0 +12200,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -11991,0 +12215,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12005,0 +12231,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12018,0 +12246,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12031,0 +12261,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12044,0 +12276,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12057,0 +12291,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12070,0 +12306,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12083,0 +12321,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12096,0 +12336,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12109,0 +12351,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12122,0 +12366,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12135,1 +12381,2 @@\n-\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12147,1 +12394,1 @@\n-%};\n+%}\n@@ -12149,0 +12396,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12160,2 +12409,1 @@\n-%};\n-\n+%}\n@@ -12163,0 +12411,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12176,0 +12426,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12189,0 +12441,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12202,0 +12456,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12215,0 +12471,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12228,0 +12486,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12241,0 +12501,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12254,0 +12516,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12267,0 +12531,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12280,0 +12546,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -12292,0 +12560,3 @@\n+\n+\n+\n@@ -12294,0 +12565,1 @@\n+\n@@ -12833,1 +13105,1 @@\n-            (unsigned long)($src2$$constant));\n+            (uint64_t)($src2$$constant));\n@@ -12865,1 +13137,1 @@\n-            (unsigned long)($src2$$constant));\n+            (uint64_t)($src2$$constant));\n@@ -12897,1 +13169,1 @@\n-            (unsigned long)($src2$$constant));\n+            (uint64_t)($src2$$constant));\n@@ -12930,1 +13202,1 @@\n-            (unsigned long)($src2$$constant));\n+            (uint64_t)($src2$$constant));\n@@ -12962,1 +13234,1 @@\n-           (unsigned long)($src2$$constant));\n+           (uint64_t)($src2$$constant));\n@@ -12994,1 +13266,1 @@\n-           (unsigned long)($src2$$constant));\n+           (uint64_t)($src2$$constant));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":307,"deletions":35,"binary":false,"changes":342,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-dnl Copyright (c) 2014, Red Hat Inc. All rights reserved.\n+dnl Copyright (c) 2014, 2020, Red Hat Inc. All rights reserved.\n@@ -26,1 +26,0 @@\n-\/\/ BEGIN This section of the file is automatically generated. Do not edit --------------\n@@ -31,1 +30,2 @@\n-`\n+`\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -49,1 +49,2 @@\n-%}')dnl\n+%}\n+')dnl\n@@ -51,1 +52,2 @@\n-`\n+`\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -71,1 +73,2 @@\n-%}')dnl\n+%}\n+')dnl\n@@ -73,1 +76,2 @@\n-`\n+`\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -94,1 +98,2 @@\n-%}')dnl\n+%}\n+')dnl\n@@ -96,1 +101,3 @@\n-`instruct reg$1_not_reg(iReg$1NoSp dst,\n+`\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct reg$1_not_reg(iReg$1NoSp dst,\n@@ -111,1 +118,2 @@\n-%}')dnl\n+%}\n+')dnl\n@@ -123,1 +131,1 @@\n-INVERTED_SHIFT_INSN(L, $1, $2, $3, $4, ~0l, long)')dnl\n+INVERTED_SHIFT_INSN(L, $1, $2, $3, $4, ~0l, jlong)')dnl\n@@ -150,2 +158,4 @@\n-define(`EXTEND', `($2$1 (LShift$1 $3 $4) $5)')\n-define(`BFM_INSN',`\n+define(`EXTEND', `($2$1 (LShift$1 $3 $4) $5)') dnl\n+define(`BFM_INSN',`\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+\n@@ -170,1 +180,2 @@\n-%}')\n+%}\n+')\n@@ -178,1 +189,3 @@\n-`instruct $3$1(iReg$1NoSp dst, iReg$1`'ORL2I($1) src, immI rshift, imm$1_bitmask mask)\n+`\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct $3$1(iReg$1NoSp dst, iReg$1`'ORL2I($1) src, immI rshift, imm$1_bitmask mask)\n@@ -188,1 +201,1 @@\n-    long mask = $mask$$constant;\n+    intptr_t mask = $mask$$constant;\n@@ -194,1 +207,2 @@\n-%}')\n+%}\n+')\n@@ -198,0 +212,3 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+\n@@ -210,1 +227,1 @@\n-    long mask = $mask$$constant;\n+    intptr_t mask = $mask$$constant;\n@@ -218,1 +235,4 @@\n-define(`UBFIZ_INSN', `\/\/ We can use ubfiz when masking by a positive number and then left shifting the result.\n+define(`UBFIZ_INSN', `\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+\n+\/\/ We can use ubfiz when masking by a positive number and then left shifting the result.\n@@ -233,1 +253,1 @@\n-    long mask = $mask$$constant;\n+    intptr_t mask = $mask$$constant;\n@@ -246,1 +266,4 @@\n-define(`BFX1_INSN', `\/\/ If there is a convert $1 to $2 block between and And$1 and a LShift$2, we can also match ubfiz\n+define(`BFX1_INSN', `\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+\n+\/\/ If there is a convert $1 to $2 block between and And$1 and a LShift$2, we can also match ubfiz\n@@ -256,1 +279,1 @@\n-    long mask = $mask$$constant;\n+    intptr_t mask = $mask$$constant;\n@@ -278,1 +301,0 @@\n-\/\/ Rotations\n@@ -280,2 +302,5 @@\n-define(`EXTRACT_INSN',\n-`instruct extr$3$1(iReg$1NoSp dst, iReg$1`'ORL2I($1) src1, iReg$1`'ORL2I($1) src2, immI lshift, immI rshift, rFlagsReg cr)\n+\/\/ Rotations dnl\n+define(`EXTRACT_INSN',`\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct extr$3$1(iReg$1NoSp dst, iReg$1`'ORL2I($1) src1, iReg$1`'ORL2I($1) src2, immI lshift, immI rshift, rFlagsReg cr)\n@@ -300,2 +325,2 @@\n-define(`ROL_EXPAND', `\n-\/\/ $2 expander\n+define(`ROL_EXPAND', `\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -303,0 +328,1 @@\n+\/\/ $2 expander\n@@ -315,3 +341,4 @@\n-%}')dnl\n-define(`ROR_EXPAND', `\n-\/\/ $2 expander\n+%}\n+')\n+define(`ROR_EXPAND', `\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -319,0 +346,1 @@\n+\/\/ $2 expander\n@@ -330,2 +358,4 @@\n-%}')dnl\n-define(ROL_INSN, `\n+%}\n+')dnl\n+define(ROL_INSN, `\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -339,2 +369,4 @@\n-%}')dnl\n-define(ROR_INSN, `\n+%}\n+')dnl\n+define(ROR_INSN, `\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -348,1 +380,2 @@\n-%}')dnl\n+%}\n+')dnl\n@@ -365,0 +398,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -377,2 +412,2 @@\n-ADD_SUB_CONV(I,L,Add,add,sxtw);\n-ADD_SUB_CONV(I,L,Sub,sub,sxtw);\n+ADD_SUB_CONV(I,L,Add,add,sxtw)\n+ADD_SUB_CONV(I,L,Sub,sub,sxtw)\n@@ -381,0 +416,2 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -392,1 +429,1 @@\n-%}')\n+%}')dnl\n@@ -402,1 +439,2 @@\n-define(`ADD_SUB_ZERO_EXTEND', `\n+define(`ADD_SUB_ZERO_EXTEND', `\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -414,1 +452,2 @@\n-%}')\n+%}\n+')\n@@ -429,1 +468,2 @@\n-define(`ADD_SUB_EXTENDED_SHIFT', `\n+define(`ADD_SUB_EXTENDED_SHIFT', `\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -441,1 +481,2 @@\n-%}')\n+%}\n+')\n@@ -458,1 +499,2 @@\n-define(`ADD_SUB_CONV_SHIFT', `\n+define(`ADD_SUB_CONV_SHIFT', `\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -470,4 +512,4 @@\n-%}')\n-dnl\n-ADD_SUB_CONV_SHIFT(L,Add,add,sxtw);\n-ADD_SUB_CONV_SHIFT(L,Sub,sub,sxtw);\n+%}\n+')dnl\n+ADD_SUB_CONV_SHIFT(L,Add,add,sxtw)\n+ADD_SUB_CONV_SHIFT(L,Sub,sub,sxtw)\n@@ -476,1 +518,2 @@\n-define(`ADD_SUB_ZERO_EXTEND_SHIFT', `\n+define(`ADD_SUB_ZERO_EXTEND_SHIFT', `\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -488,2 +531,2 @@\n-%}')\n-dnl\n+%}\n+')dnl\n@@ -505,1 +548,1 @@\n-\/\/ END This section of the file is automatically generated. Do not edit --------------\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_ad.m4","additions":94,"deletions":51,"binary":false,"changes":145,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-const unsigned long Assembler::asm_bp = 0x00007fffee09ac88;\n+const uintptr_t Assembler::asm_bp = 0x00007fffee09ac88;\n@@ -135,8 +135,8 @@\n-    __ andw(r28, r19, 4294709247ul);                   \/\/        and        w28, w19, #0xfffc0fff\n-    __ orrw(r27, r5, 536870910ul);                     \/\/        orr        w27, w5, #0x1ffffffe\n-    __ eorw(r30, r20, 4294840319ul);                   \/\/        eor        w30, w20, #0xfffe0fff\n-    __ andsw(r22, r26, 4294959615ul);                  \/\/        ands        w22, w26, #0xffffe1ff\n-    __ andr(r5, r7, 4194300ul);                        \/\/        and        x5, x7, #0x3ffffc\n-    __ orr(r13, r7, 18014398509481728ul);              \/\/        orr        x13, x7, #0x3fffffffffff00\n-    __ eor(r7, r9, 18442240474082197503ul);            \/\/        eor        x7, x9, #0xfff0000000003fff\n-    __ ands(r3, r0, 18374686479671656447ul);           \/\/        ands        x3, x0, #0xff00000000007fff\n+    __ andw(r28, r19, 4294709247ull);                  \/\/        and        w28, w19, #0xfffc0fff\n+    __ orrw(r27, r5, 536870910ull);                    \/\/        orr        w27, w5, #0x1ffffffe\n+    __ eorw(r30, r20, 4294840319ull);                  \/\/        eor        w30, w20, #0xfffe0fff\n+    __ andsw(r22, r26, 4294959615ull);                 \/\/        ands        w22, w26, #0xffffe1ff\n+    __ andr(r5, r7, 4194300ull);                       \/\/        and        x5, x7, #0x3ffffc\n+    __ orr(r13, r7, 18014398509481728ull);             \/\/        orr        x13, x7, #0x3fffffffffff00\n+    __ eor(r7, r9, 18442240474082197503ull);           \/\/        eor        x7, x9, #0xfff0000000003fff\n+    __ ands(r3, r0, 18374686479671656447ull);          \/\/        ands        x3, x0, #0xff00000000007fff\n@@ -1496,1 +1496,1 @@\n-  JNIEXPORT void das1(unsigned long insn) {\n+  JNIEXPORT void das1(uintptr_t insn) {\n@@ -1535,1 +1535,1 @@\n-void Assembler::adrp(Register reg1, const Address &dest, unsigned long &byte_offset) {\n+void Assembler::adrp(Register reg1, const Address &dest, uintptr_t &byte_offset) {\n@@ -1544,1 +1544,1 @@\n-    long offset = adr - pc();\n+    intptr_t offset = adr - pc();\n@@ -1555,1 +1555,1 @@\n-    long offset = adr_page - pc_page;\n+    intptr_t offset = adr_page - pc_page;\n@@ -1704,3 +1704,2 @@\n-bool Assembler::operand_valid_for_add_sub_immediate(long imm) {\n-  bool shift = false;\n-  unsigned long uimm = uabs(imm);\n+bool Assembler::operand_valid_for_add_sub_immediate(int64_t imm) {\n+  uint64_t uimm = (uint64_t)uabs(imm);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.cpp","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -202,1 +202,1 @@\n-  static void patch(address a, int msb, int lsb, unsigned long val) {\n+  static void patch(address a, int msb, int lsb, uint64_t val) {\n@@ -215,1 +215,1 @@\n-  static void spatch(address a, int msb, int lsb, long val) {\n+  static void spatch(address a, int msb, int lsb, int64_t val) {\n@@ -217,1 +217,1 @@\n-    long chk = val >> (nbits - 1);\n+    int64_t chk = val >> (nbits - 1);\n@@ -248,1 +248,1 @@\n-  void sf(long val, int msb, int lsb) {\n+  void sf(int64_t val, int msb, int lsb) {\n@@ -250,1 +250,1 @@\n-    long chk = val >> (nbits - 1);\n+    int64_t chk = val >> (nbits - 1);\n@@ -360,1 +360,1 @@\n-  long _offset;\n+  int64_t _offset;\n@@ -383,1 +383,1 @@\n-  Address(Register r, long o)\n+  Address(Register r, int64_t o)\n@@ -385,1 +385,1 @@\n-  Address(Register r, unsigned long o)\n+  Address(Register r, uint64_t o)\n@@ -425,1 +425,1 @@\n-  long offset() const {\n+  int64_t offset() const {\n@@ -611,1 +611,1 @@\n-  static const unsigned long asm_bp;\n+  static const uintptr_t asm_bp;\n@@ -614,1 +614,1 @@\n-    if ((unsigned long)pc() == asm_bp)\n+    if ((uintptr_t)pc() == asm_bp)\n@@ -657,1 +657,1 @@\n-  void sf(long val, int msb, int lsb) {\n+  void sf(int64_t val, int msb, int lsb) {\n@@ -707,1 +707,1 @@\n-  void adrp(Register Rd, const Address &dest, unsigned long &offset);\n+  void adrp(Register Rd, const Address &dest, uint64_t &offset);\n@@ -833,1 +833,1 @@\n-  static const unsigned long branch_range = NOT_DEBUG(128 * M) DEBUG_ONLY(2 * M);\n+  static const uint64_t branch_range = NOT_DEBUG(128 * M) DEBUG_ONLY(2 * M);\n@@ -843,1 +843,1 @@\n-    long offset = (dest - pc()) >> 2;                                   \\\n+    int64_t offset = (dest - pc()) >> 2;                                \\\n@@ -860,1 +860,1 @@\n-    long offset = (dest - pc()) >> 2;                   \\\n+    int64_t offset = (dest - pc()) >> 2;                \\\n@@ -878,1 +878,1 @@\n-    long offset = (dest - pc()) >> 2;                                   \\\n+    int64_t offset = (dest - pc()) >> 2;                                \\\n@@ -899,1 +899,1 @@\n-    long offset = (dest - pc()) >> 2;\n+    int64_t offset = (dest - pc()) >> 2;\n@@ -1278,1 +1278,1 @@\n-    long offset = (dest - pc()) >> 2;                                   \\\n+    int64_t offset = (dest - pc()) >> 2;                                \\\n@@ -1303,1 +1303,1 @@\n-    long offset = (dest - pc()) >> 2;                                   \\\n+    int64_t offset = (dest - pc()) >> 2;                                \\\n@@ -1318,1 +1318,1 @@\n-    long offset = (dest - pc()) >> 2;                                   \\\n+    int64_t offset = (dest - pc()) >> 2;                                \\\n@@ -1394,1 +1394,1 @@\n-      long offset = (adr.target() - pc()) >> 2;\n+      int64_t offset = (adr.target() - pc()) >> 2;\n@@ -2696,1 +2696,1 @@\n-  static bool operand_valid_for_add_sub_immediate(long imm);\n+  static bool operand_valid_for_add_sub_immediate(int64_t imm);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2014, Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2014, 2020, Red Hat Inc. All rights reserved.\n@@ -1381,1 +1381,1 @@\n-      __ ldr(rscratch1, Address(klass_RInfo, long(k->super_check_offset())));\n+      __ ldr(rscratch1, Address(klass_RInfo, int64_t(k->super_check_offset())));\n@@ -2707,1 +2707,1 @@\n-  unsigned long offset;\n+  uint64_t offset;\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2014, Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2014, 2021, Red Hat Inc. All rights reserved.\n@@ -681,2 +681,2 @@\n-    unsigned long *p = (unsigned long *)fp;                             \\\n-    printf(\"0x%016lx 0x%016lx %s\\n\", (unsigned long)(p + frame::name##_offset), \\\n+    uintptr_t *p = (uintptr_t *)fp;                                     \\\n+    printf(\"0x%016lx 0x%016lx %s\\n\", (uintptr_t)(p + frame::name##_offset), \\\n@@ -686,3 +686,3 @@\n-static __thread unsigned long nextfp;\n-static __thread unsigned long nextpc;\n-static __thread unsigned long nextsp;\n+static __thread uintptr_t nextfp;\n+static __thread uintptr_t nextpc;\n+static __thread uintptr_t nextsp;\n@@ -707,1 +707,1 @@\n-void internal_pf(unsigned long sp, unsigned long fp, unsigned long pc, unsigned long bcx) {\n+void internal_pf(uintptr_t sp, uintptr_t fp, uintptr_t pc, uintptr_t bcx) {\n@@ -721,1 +721,1 @@\n-  unsigned long *p = (unsigned long *)fp;\n+  uintptr_t *p = (uintptr_t *)fp;\n@@ -731,3 +731,3 @@\n-    nextfp = (unsigned long)sender.fp();\n-    nextpc = (unsigned long)sender.pc();\n-    nextsp = (unsigned long)sender.unextended_sp();\n+    nextfp = (uintptr_t)sender.fp();\n+    nextpc = (uintptr_t)sender.pc();\n+    nextsp = (uintptr_t)sender.unextended_sp();\n@@ -737,1 +737,1 @@\n-    nextsp = (unsigned long)&p[frame::sender_sp_offset];\n+    nextsp = (uintptr_t)&p[frame::sender_sp_offset];\n@@ -740,1 +740,1 @@\n-  if (bcx == -1ul)\n+  if (bcx == -1ULL)\n@@ -774,2 +774,2 @@\n-extern \"C\" void pf(unsigned long sp, unsigned long fp, unsigned long pc,\n-                   unsigned long bcx, unsigned long thread) {\n+extern \"C\" void pf(uintptr_t sp, uintptr_t fp, uintptr_t pc,\n+                   uintptr_t bcx, uintptr_t thread) {\n@@ -794,1 +794,1 @@\n-extern \"C\" void pm(unsigned long fp, unsigned long bcx) {\n+extern \"C\" void pm(uintptr_t fp, uintptr_t bcx) {\n@@ -796,1 +796,1 @@\n-  unsigned long *p = (unsigned long *)fp;\n+  uintptr_t *p = (uintptr_t *)fp;\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-      unsigned long offset;\n+      uint64_t offset;\n@@ -184,1 +184,1 @@\n-      unsigned long offset;\n+      uint64_t offset;\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2014, 2020, Red Hat Inc. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include <stdint.h>\n@@ -66,1 +67,1 @@\n-static inline u_int64_t ones(int N)\n+static inline uint64_t ones(int N)\n@@ -68,1 +69,1 @@\n-  return (N == 64 ? (u_int64_t)-1UL : ((1UL << N) - 1));\n+  return (N == 64 ? -1ULL : (1ULL << N) - 1);\n","filename":"src\/hotspot\/cpu\/aarch64\/immediate_aarch64.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2014, Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Red Hat Inc. All rights reserved.\n@@ -171,1 +171,1 @@\n-  unsigned long offset;\n+  uint64_t offset;\n@@ -762,1 +762,1 @@\n-    ands(swap_reg, swap_reg, (unsigned long)(7 - os::vm_page_size()));\n+    ands(swap_reg, swap_reg, (uint64_t)(7 - os::vm_page_size()));\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2014, Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Red Hat Inc. All rights reserved.\n@@ -350,1 +350,1 @@\n-      *_fp_identifiers |= (1 << _num_fp_args); \/\/ mark as double\n+      *_fp_identifiers |= (1ull << _num_fp_args); \/\/ mark as double\n@@ -386,1 +386,1 @@\n-  ssh.iterate(UCONST64(-1));\n+  ssh.iterate((uint64_t)CONST64(-1));\n","filename":"src\/hotspot\/cpu\/aarch64\/interpreterRT_aarch64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2004, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2014, Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2004, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Red Hat Inc. All rights reserved.\n@@ -76,1 +76,1 @@\n-  unsigned long offset;\n+  uint64_t offset;\n","filename":"src\/hotspot\/cpu\/aarch64\/jniFastGetField_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -73,2 +73,2 @@\n-  assert((uint64_t)target < (1ul << 48), \"48-bit overflow in address constant\");\n-  long offset = (target - branch) >> 2;\n+  assert((uint64_t)target < (1ull << 48), \"48-bit overflow in address constant\");\n+  intptr_t offset = (target - branch) >> 2;\n@@ -137,3 +137,3 @@\n-        long dest = ((long)target & 0xffffffffL) | ((long)branch & 0xffff00000000L);\n-        long pc_page = (long)branch >> 12;\n-        long adr_page = (long)dest >> 12;\n+        uintptr_t dest = ((uintptr_t)target & 0xffffffffULL) | ((uintptr_t)branch & 0xffff00000000ULL);\n+        uintptr_t pc_page = (uintptr_t)branch >> 12;\n+        uintptr_t adr_page = (uintptr_t)dest >> 12;\n@@ -208,1 +208,1 @@\n-  long offset = 0;\n+  intptr_t offset = 0;\n@@ -408,1 +408,1 @@\n-    unsigned long offset;\n+    uintptr_t offset;\n@@ -426,1 +426,1 @@\n-    unsigned long offset;\n+    uintptr_t offset;\n@@ -850,1 +850,1 @@\n-  \/\/ unsigned long offset;\n+  \/\/ uintptr_t offset;\n@@ -1703,1 +1703,1 @@\n-Address MacroAssembler::form_address(Register Rd, Register base, long byte_offset, int shift) {\n+Address MacroAssembler::form_address(Register Rd, Register base, int64_t byte_offset, int shift) {\n@@ -1718,3 +1718,3 @@\n-    unsigned long word_offset = byte_offset >> shift;\n-    unsigned long masked_offset = word_offset & 0xfff000;\n-    if (Address::offset_ok_for_immed(word_offset - masked_offset)\n+    uint64_t word_offset = byte_offset >> shift;\n+    uint64_t masked_offset = word_offset & 0xfff000;\n+    if (Address::offset_ok_for_immed(word_offset - masked_offset, 0)\n@@ -1960,1 +1960,1 @@\n-    mov(rscratch2, (unsigned long)value);\n+    mov(rscratch2, (uint64_t)value);\n@@ -2641,2 +2641,2 @@\n-                                           long cur_offset,\n-                                           long prev_offset) const {\n+                                           int64_t cur_offset,\n+                                           int64_t prev_offset) const {\n@@ -2646,2 +2646,2 @@\n-      long pair_mask = size * 2 - 1;\n-      long offset = prev_offset > cur_offset ? cur_offset : prev_offset;\n+      int64_t pair_mask = size * 2 - 1;\n+      int64_t offset = prev_offset > cur_offset ? cur_offset : prev_offset;\n@@ -2653,1 +2653,1 @@\n-    long mask = size - 1;\n+    int64_t mask = size - 1;\n@@ -2686,2 +2686,2 @@\n-  long max_offset = 63 * prev_size_in_bytes;\n-  long min_offset = -64 * prev_size_in_bytes;\n+  int64_t max_offset = 63 * prev_size_in_bytes;\n+  int64_t min_offset = -64 * prev_size_in_bytes;\n@@ -2696,2 +2696,2 @@\n-  long cur_offset = adr.offset();\n-  long prev_offset = prev_ldst->offset();\n+  int64_t cur_offset = adr.offset();\n+  int64_t prev_offset = prev_ldst->offset();\n@@ -2714,1 +2714,1 @@\n-  long low_offset = prev_offset > cur_offset ? cur_offset : prev_offset;\n+  int64_t low_offset = prev_offset > cur_offset ? cur_offset : prev_offset;\n@@ -2739,1 +2739,1 @@\n-  long offset;\n+  int64_t offset;\n@@ -3285,1 +3285,1 @@\n-  unsigned long offset;\n+  uint64_t offset;\n@@ -3587,1 +3587,1 @@\n-  unsigned long offset;\n+  uint64_t offset;\n@@ -3616,1 +3616,1 @@\n-  unsigned long offset;\n+  uint64_t offset;\n@@ -4224,7 +4224,6 @@\n-void MacroAssembler::adrp(Register reg1, const Address &dest, unsigned long &byte_offset) {\n-  relocInfo::relocType rtype = dest.rspec().reloc()->type();\n-  unsigned long low_page = (unsigned long)CodeCache::low_bound() >> 12;\n-  unsigned long high_page = (unsigned long)(CodeCache::high_bound()-1) >> 12;\n-  unsigned long dest_page = (unsigned long)dest.target() >> 12;\n-  long offset_low = dest_page - low_page;\n-  long offset_high = dest_page - high_page;\n+void MacroAssembler::adrp(Register reg1, const Address &dest, uint64_t &byte_offset) {\n+  uint64_t low_page = (uint64_t)CodeCache::low_bound() >> 12;\n+  uint64_t high_page = (uint64_t)(CodeCache::high_bound()-1) >> 12;\n+  uint64_t dest_page = (uint64_t)dest.target() >> 12;\n+  int64_t offset_low = dest_page - low_page;\n+  int64_t offset_high = dest_page - high_page;\n@@ -4242,3 +4241,3 @@\n-    unsigned long target = (unsigned long)dest.target();\n-    unsigned long adrp_target\n-      = (target & 0xffffffffUL) | ((unsigned long)pc() & 0xffff00000000UL);\n+    uint64_t target = (uint64_t)dest.target();\n+    uint64_t adrp_target\n+      = (target & 0xffffffffULL) | ((uint64_t)pc() & 0xffff00000000ULL);\n@@ -4246,1 +4245,0 @@\n-    _adrp(reg1, (address)adrp_target);\n@@ -4249,1 +4247,1 @@\n-  byte_offset = (unsigned long)dest.target() & 0xfff;\n+  byte_offset = (uint64_t)dest.target() & 0xfff;\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":38,"deletions":40,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -488,1 +488,1 @@\n-  inline void mov(Register dst, long l)\n+  inline void mov(Register dst, int64_t l)\n@@ -495,1 +495,1 @@\n-    mov(dst, (long)i);\n+    mov(dst, (int64_t)i);\n@@ -1163,1 +1163,1 @@\n-  void adrp(Register reg1, const Address &dest, unsigned long &byte_offset);\n+  void adrp(Register reg1, const Address &dest, uint64_t &byte_offset);\n@@ -1180,1 +1180,1 @@\n-  Address form_address(Register Rd, Register base, long byte_offset, int shift);\n+  Address form_address(Register Rd, Register base, int64_t byte_offset, int shift);\n@@ -1205,1 +1205,1 @@\n-      unsigned long offset;\n+      uint64_t offset;\n@@ -1317,1 +1317,1 @@\n-  bool merge_alignment_check(Register base, size_t size, long cur_offset, long prev_offset) const;\n+  bool merge_alignment_check(Register base, size_t size, int64_t cur_offset, int64_t prev_offset) const;\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -263,3 +263,3 @@\n-  const long INF_OR_NAN_PREFIX = 0x7FF0;\n-  const long MINF_OR_MNAN_PREFIX = 0xFFF0;\n-  const long ONE_PREFIX = 0x3FF0;\n+  const int64_t INF_OR_NAN_PREFIX = 0x7FF0;\n+  const int64_t MINF_OR_MNAN_PREFIX = 0xFFF0;\n+  const int64_t ONE_PREFIX = 0x3FF0;\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64_log.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -204,3 +204,3 @@\n-  const long PIO2_1t = 0x3DD0B4611A626331UL;\n-  const long PIO2_2  = 0x3DD0B4611A600000UL;\n-  const long PIO2_2t = 0x3BA3198A2E037073UL;\n+  const int64_t PIO2_1t = 0x3DD0B4611A626331ULL;\n+  const int64_t PIO2_2  = 0x3DD0B4611A600000ULL;\n+  const int64_t PIO2_2t = 0x3BA3198A2E037073ULL;\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64_trig.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 1997, 2010, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2014, 2018, Red Hat Inc. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Red Hat Inc. All rights reserved.\n@@ -304,1 +304,1 @@\n-    *(long*)addr = x;\n+    *(int64_t*)addr = x;\n","filename":"src\/hotspot\/cpu\/aarch64\/nativeInst_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2014, Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2014, 2020, Red Hat Inc. All rights reserved.\n@@ -68,1 +68,1 @@\n-  unsigned long bit(bool should_set = true) const { return should_set ? 1 << encoding() : 0; }\n+  uint64_t bit(bool should_set = true) const { return should_set ? 1 << encoding() : 0; }\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -401,1 +401,1 @@\n-    \/\/ However to make thing extra confusing. Because we can fit a long\/double in\n+    \/\/ However to make thing extra confusing. Because we can fit a Java long\/double in\n@@ -434,1 +434,1 @@\n-          __ mov(rscratch1, 0xdeadffffdeadaaaaul);\n+          __ mov(rscratch1, (uint64_t)0xdeadffffdeadaaaaull);\n@@ -451,1 +451,1 @@\n-          \/\/ long\/double in gpr\n+          \/\/ jlong\/double in gpr\n@@ -453,2 +453,1 @@\n-          \/\/ Overwrite the unused slot with known junk\n-          __ mov(rscratch1, 0xdeadffffdeadaaabul);\n+          __ mov(rscratch1, (uint64_t)0xdeadffffdeadaaabull);\n@@ -470,1 +469,1 @@\n-        __ mov(rscratch1, 0xdeadffffdeadaaacul);\n+        __ mov(rscratch1, (uint64_t)0xdeadffffdeadaaacull);\n@@ -1678,1 +1677,1 @@\n-    unsigned long offset;\n+    uint64_t offset;\n@@ -1903,1 +1902,1 @@\n-    unsigned long offset;\n+    uint64_t offset;\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -3246,2 +3246,2 @@\n-    unsigned long BASE = 0xfff1;\n-    unsigned long NMAX = 0x15B0;\n+    uint64_t BASE = 0xfff1;\n+    uint64_t NMAX = 0x15B0;\n@@ -5610,6 +5610,6 @@\n-    \/\/ montgomery_multiply(unsigned long Pa_base[], unsigned long Pb_base[],\n-    \/\/                     unsigned long Pn_base[], unsigned long Pm_base[],\n-    \/\/                     unsigned long inv, int len) {\n-    \/\/   unsigned long t0 = 0, t1 = 0, t2 = 0; \/\/ Triple-precision accumulator\n-    \/\/   unsigned long *Pa, *Pb, *Pn, *Pm;\n-    \/\/   unsigned long Ra, Rb, Rn, Rm;\n+    \/\/ montgomery_multiply(julong Pa_base[], julong Pb_base[],\n+    \/\/                     julong Pn_base[], julong Pm_base[],\n+    \/\/                     julong inv, int len) {\n+    \/\/   julong t0 = 0, t1 = 0, t2 = 0; \/\/ Triple-precision accumulator\n+    \/\/   julong *Pa, *Pb, *Pn, *Pm;\n+    \/\/   julong Ra, Rb, Rn, Rm;\n@@ -5823,5 +5823,6 @@\n-    \/\/ montgomery_square(unsigned long Pa_base[], unsigned long Pn_base[],\n-    \/\/                   unsigned long Pm_base[], unsigned long inv, int len) {\n-    \/\/   unsigned long t0 = 0, t1 = 0, t2 = 0; \/\/ Triple-precision accumulator\n-    \/\/   unsigned long *Pa, *Pb, *Pn, *Pm;\n-    \/\/   unsigned long Ra, Rb, Rn, Rm;\n+    \/\/ montgomery_multiply(julong Pa_base[], julong Pb_base[],\n+    \/\/                     julong Pn_base[], julong Pm_base[],\n+    \/\/                     julong inv, int len) {\n+    \/\/   julong t0 = 0, t1 = 0, t2 = 0; \/\/ Triple-precision accumulator\n+    \/\/   julong *Pa, *Pb, *Pn, *Pm;\n+    \/\/   julong Ra, Rb, Rn, Rm;\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2014, 2019, Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Red Hat Inc. All rights reserved.\n@@ -1006,1 +1006,1 @@\n-    unsigned long offset;\n+    uint64_t offset;\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-  unsigned long auxv = getauxval(AT_HWCAP);\n+  uint64_t auxv = getauxval(AT_HWCAP);\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}