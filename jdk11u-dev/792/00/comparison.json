{"files":[{"patch":"@@ -701,1 +701,1 @@\n-                                       Node* range, bool upper, bool &overflow) {\n+                                       Node* range, bool upper, bool &overflow, bool negate) {\n@@ -827,1 +827,1 @@\n-  BoolNode* bol = new BoolNode(cmp, BoolTest::lt);\n+  BoolNode* bol = new BoolNode(cmp, negate ? BoolTest::ge : BoolTest::lt);\n@@ -1194,0 +1194,1 @@\n+    bool negate = (proj->_con != predicate_proj->_con);\n@@ -1196,8 +1197,2 @@\n-    BoolNode* lower_bound_bol = rc_predicate(loop, ctrl, scale, offset, init, limit, stride, rng, false, overflow);\n-    \/\/ Negate test if necessary\n-    bool negated = false;\n-    if (proj->_con != predicate_proj->_con) {\n-      lower_bound_bol = new BoolNode(lower_bound_bol->in(1), lower_bound_bol->_test.negate());\n-      register_new_node(lower_bound_bol, ctrl);\n-      negated = true;\n-    }\n+    BoolNode* lower_bound_bol = rc_predicate(loop, ctrl, scale, offset, init, limit, stride, rng, false, overflow, negate);\n+\n@@ -1208,1 +1203,1 @@\n-    if (TraceLoopPredicate) tty->print_cr(\"lower bound check if: %s %d \", negated ? \" negated\" : \"\", lower_bound_iff->_idx);\n+    if (TraceLoopPredicate) tty->print_cr(\"lower bound check if: %s %d \", negate ? \" negated\" : \"\", lower_bound_iff->_idx);\n@@ -1211,7 +1206,2 @@\n-    BoolNode* upper_bound_bol = rc_predicate(loop, lower_bound_proj, scale, offset, init, limit, stride, rng, true, overflow);\n-    negated = false;\n-    if (proj->_con != predicate_proj->_con) {\n-      upper_bound_bol = new BoolNode(upper_bound_bol->in(1), upper_bound_bol->_test.negate());\n-      register_new_node(upper_bound_bol, ctrl);\n-      negated = true;\n-    }\n+    BoolNode* upper_bound_bol = rc_predicate(loop, lower_bound_proj, scale, offset, init, limit, stride, rng, true, overflow, negate);\n+\n@@ -1223,1 +1213,1 @@\n-    if (TraceLoopPredicate) tty->print_cr(\"upper bound check if: %s %d \", negated ? \" negated\" : \"\", lower_bound_iff->_idx);\n+    if (TraceLoopPredicate) tty->print_cr(\"upper bound check if: %s %d \", negate ? \" negated\" : \"\", lower_bound_iff->_idx);\n@@ -1269,1 +1259,0 @@\n-  assert(proj->_con && predicate_proj->_con, \"not a range check?\");\n@@ -1272,1 +1261,2 @@\n-  BoolNode* bol = rc_predicate(loop, upper_bound_proj, scale, offset, opaque_init, limit, stride, rng, (stride > 0) != (scale > 0), overflow);\n+  bool negate = (proj->_con != predicate_proj->_con);\n+  BoolNode* bol = rc_predicate(loop, upper_bound_proj, scale, offset, opaque_init, limit, stride, rng, (stride > 0) != (scale > 0), overflow, negate);\n@@ -1289,1 +1279,1 @@\n-  bol = rc_predicate(loop, new_proj, scale, offset, max_value, limit, stride, rng, (stride > 0) != (scale > 0), overflow);\n+  bol = rc_predicate(loop, new_proj, scale, offset, max_value, limit, stride, rng, (stride > 0) != (scale > 0), overflow, negate);\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":12,"deletions":22,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2422,1 +2422,1 @@\n-  BoolNode* bol = rc_predicate(loop, predicate_proj, scale_con, offset, value, NULL, stride_con, limit, (stride_con > 0) != (scale_con > 0), overflow);\n+  BoolNode* bol = rc_predicate(loop, predicate_proj, scale_con, offset, value, NULL, stride_con, limit, (stride_con > 0) != (scale_con > 0), overflow, false);\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1108,1 +1108,2 @@\n-                         Node* range, bool upper, bool &overflow);\n+                         Node* range, bool upper, bool &overflow,\n+                         bool negate);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8273277\n+ * @summary Skeleton predicates sometimes need to be negated\n+ * @run main compiler.loopopts.TestSkeletonPredicateNegation\n+ *\n+ *\/\n+\n+package compiler.loopopts;\n+\n+public class TestSkeletonPredicateNegation {\n+    public static int in0 = 2;\n+\n+    public static void main(String[] args) {\n+        try {\n+            TestSkeletonPredicateNegation instance = new TestSkeletonPredicateNegation();\n+            for (int i = 0; i < 10000; ++i) {\n+                instance.mainTest(args);\n+            }\n+        } catch (Exception ex) {\n+            System.out.println(ex.getClass().getCanonicalName());\n+        } catch (OutOfMemoryError e) {\n+            System.out.println(\"OOM Error\");\n+        }\n+    }\n+\n+    public void mainTest (String[] args){\n+        long loa11[] = new long[1987];\n+\n+        for (long lo14 : loa11) {\n+            TestSkeletonPredicateNegation.in0 = -128;\n+            for (int i18 = 0; i18 < 52; i18++) {\n+                try {\n+                    loa11[TestSkeletonPredicateNegation.in0] %= 2275269548L;\n+                    Math.ceil(1374905370.2785515599);\n+                } catch (Exception a_e) {\n+                    TestSkeletonPredicateNegation.in0--;\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestSkeletonPredicateNegation.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -26,0 +26,1 @@\n+ * @bug 8273277\n@@ -33,0 +34,1 @@\n+ * @run main\/othervm -XX:-OmitStackTraceInFastThrow -Xbatch -XX:Tier0BackedgeNotifyFreqLog=0 -XX:Tier2BackedgeNotifyFreqLog=0 -XX:Tier3BackedgeNotifyFreqLog=0 -XX:Tier2BackEdgeThreshold=1 -XX:Tier3BackEdgeThreshold=1 -XX:Tier4BackEdgeThreshold=1 jit.t.t105.t105\n@@ -34,1 +36,1 @@\n- * This test must be run with ProfileTraps disabled to avoid preallocated\n+ * This test must be run with OmitStackTraceInFastThrow disabled to avoid preallocated\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/jit\/t\/t105\/t105.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}