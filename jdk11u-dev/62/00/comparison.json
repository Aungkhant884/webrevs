{"files":[{"patch":"@@ -1108,0 +1108,4 @@\n+        if (family.isEmpty()) {\n+            return false;\n+        }\n+\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WPrinterJob.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,289 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8265761\n+ * @requires (os.family == \"windows\")\n+ * @summary Font with missed font family name is not properly printed on Windows\n+ * @run main\/othervm\/manual PrintFontWithMissedFontFamilyTest\n+ *\/\n+\n+import javax.print.PrintServiceLookup;\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.GlyphVector;\n+import java.awt.geom.AffineTransform;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public class PrintFontWithMissedFontFamilyTest {\n+\n+    private static final String DESCRIPTION =\n+            \" 1. Setup 'Microsoft Print to PDF' printer on Windows.\\n\" +\n+                    \" 2. Press Print button to print a text with a custom font to PDF.\\n\" +\n+                    \" 3. Choose 'Microsoft Print to PDF' on the print dialog and press OK.\\n\" +\n+                    \" 4. Open the PDF file.\\n\" +\n+                    \"    Three lines with text ABCDEF and the same custom font should be printed.\\n\" +\n+                    \" 5. Compare the text from the pdf with three strings drawn on the right pane.\\n\" +\n+                    \"    The pdf and the pane text should have the same font.\\n\" +\n+                    \" 6. If so, press PASS button, otherwise press FAIL button.\\n\";\n+\n+    private static final CountDownLatch testEndedSignal = new CountDownLatch(1);\n+    private static final int testTimeout = 300000;\n+    private static volatile String testFailureMsg;\n+    private static volatile boolean testPassed;\n+    private static volatile boolean testFinished;\n+    private static final float FONT_SIZE = 32.0f;\n+    private static final String TEXT = \"ABCDEF\";\n+    private static final String FONT_FILE = \"SampleFontMissedFontFamily.ttf\";\n+    private static Font customFont;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        SwingUtilities.invokeLater(() -> createAndShowTestDialog());\n+\n+        try {\n+            if (!testEndedSignal.await(testTimeout, TimeUnit.MILLISECONDS)) {\n+                throw new RuntimeException(String.format(\n+                        \"Test timeout '%d ms' elapsed.\", testTimeout));\n+            }\n+            if (!testPassed) {\n+                String failureMsg = testFailureMsg;\n+                if ((failureMsg != null) && (!failureMsg.trim().isEmpty())) {\n+                    throw new RuntimeException(failureMsg);\n+                } else {\n+                    throw new RuntimeException(\"Test failed.\");\n+                }\n+            }\n+        } catch (InterruptedException ie) {\n+            throw new RuntimeException(ie);\n+        } finally {\n+            testFinished = true;\n+        }\n+    }\n+\n+    private static void pass() {\n+        testPassed = true;\n+        testEndedSignal.countDown();\n+    }\n+\n+    private static void fail(String failureMsg) {\n+        testFailureMsg = failureMsg;\n+        testPassed = false;\n+        testEndedSignal.countDown();\n+    }\n+\n+    private static String convertMillisToTimeStr(int millis) {\n+        if (millis < 0) {\n+            return \"00:00:00\";\n+        }\n+        int hours = millis \/ 3600000;\n+        int minutes = (millis - hours * 3600000) \/ 60000;\n+        int seconds = (millis - hours * 3600000 - minutes * 60000) \/ 1000;\n+        return String.format(\"%02d:%02d:%02d\", hours, minutes, seconds);\n+    }\n+\n+    private static void createAndShowTestDialog() {\n+\n+        final JDialog dialog = new JDialog();\n+        dialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+        dialog.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                dialog.dispose();\n+                fail(\"Main dialog was closed.\");\n+            }\n+        });\n+\n+        final JLabel testTimeoutLabel = new JLabel(String.format(\n+                \"Test timeout: %s\", convertMillisToTimeStr(testTimeout)));\n+        final long startTime = System.currentTimeMillis();\n+        final Timer timer = new Timer(0, null);\n+        timer.setDelay(1000);\n+        timer.addActionListener((e) -> {\n+            int leftTime = testTimeout - (int) (System.currentTimeMillis() - startTime);\n+            if ((leftTime < 0) || testFinished) {\n+                timer.stop();\n+                dialog.dispose();\n+            }\n+            testTimeoutLabel.setText(String.format(\n+                    \"Test timeout: %s\", convertMillisToTimeStr(leftTime)));\n+        });\n+        timer.start();\n+\n+        JTextArea textArea = new JTextArea(DESCRIPTION);\n+        textArea.setEditable(false);\n+\n+        final JButton testButton = new JButton(\"Print\");\n+        final JButton passButton = new JButton(\"PASS\");\n+        final JButton failButton = new JButton(\"FAIL\");\n+\n+        testButton.addActionListener((e) -> {\n+            testButton.setEnabled(false);\n+            new Thread(() -> {\n+                try {\n+                    doTest();\n+\n+                    SwingUtilities.invokeLater(() -> {\n+                        passButton.setEnabled(true);\n+                        failButton.setEnabled(true);\n+                    });\n+                } catch (Throwable t) {\n+                    t.printStackTrace();\n+                    dialog.dispose();\n+                    fail(\"Exception occurred in a thread executing the test.\");\n+                }\n+            }).start();\n+        });\n+        passButton.setEnabled(false);\n+        passButton.addActionListener((e) -> {\n+            dialog.dispose();\n+            pass();\n+        });\n+        failButton.setEnabled(false);\n+        failButton.addActionListener((e) -> {\n+            dialog.dispose();\n+            fail(\"TitledBorder label is cut off\");\n+        });\n+\n+        try {\n+            File dir = new File(System.getProperty(\"test.src\", \".\"));\n+            File customFontFile = new File(dir, FONT_FILE);\n+            customFont = Font.createFont(Font.TRUETYPE_FONT, customFontFile);\n+            customFont = customFont.deriveFont(FONT_SIZE);\n+        } catch(Exception e) {\n+            fail(\"Unable to load the custom font: \" + e);\n+        }\n+\n+        JPanel mainPanel = new JPanel(new BorderLayout());\n+        JPanel textPanel = new JPanel() {\n+            @Override\n+            public void paint(Graphics g) {\n+                super.paint(g);\n+                drawText((Graphics2D) g, customFont, TEXT);\n+            }\n+        };\n+\n+        textPanel.setPreferredSize(new Dimension(300, 300));\n+\n+        JPanel labelPanel = new JPanel(new FlowLayout());\n+        labelPanel.add(testTimeoutLabel);\n+        mainPanel.add(labelPanel, BorderLayout.NORTH);\n+        mainPanel.add(textPanel, BorderLayout.EAST);\n+        mainPanel.add(textArea, BorderLayout.CENTER);\n+        JPanel buttonPanel = new JPanel(new FlowLayout());\n+        buttonPanel.add(testButton);\n+        buttonPanel.add(passButton);\n+        buttonPanel.add(failButton);\n+        mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n+        dialog.add(mainPanel);\n+\n+        dialog.pack();\n+        dialog.setVisible(true);\n+    }\n+\n+    private static void doTest() throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                new TestPrintable();\n+            } catch (PrinterException e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+    }\n+\n+    private static void drawText(Graphics2D g, Font font, String text) {\n+\n+        Font prevFont = g.getFont();\n+        g.setFont(font);\n+        FontRenderContext frc = new FontRenderContext(new AffineTransform(), false, true);\n+\n+        Rectangle clip = g.getClipBounds();\n+        int cx = (int) clip.getCenterX();\n+        int cy = (int) (0.5 * clip.getCenterY());\n+\n+        FontMetrics metrics = g.getFontMetrics();\n+        int w = metrics.stringWidth(text);\n+        int h = metrics.getHeight();\n+\n+        int x = cx - w \/ 2;\n+        int y = cy - h \/ 4;\n+\n+        g.drawString(text, x, y);\n+\n+        GlyphVector gv = font.createGlyphVector(frc, text);\n+        g.drawGlyphVector(gv, x, y + h);\n+\n+        gv = font.deriveFont(1.0f).createGlyphVector(frc, text);\n+        int fontSize = font.getSize();\n+\n+        AffineTransform scale = AffineTransform.getScaleInstance(fontSize, fontSize);\n+        for (int i = 0; i < gv.getNumGlyphs(); i++) {\n+            gv.setGlyphTransform(i, scale);\n+        }\n+\n+        g.drawGlyphVector(gv, x, y + 2 * h);\n+\n+        g.setFont(prevFont);\n+    }\n+\n+    private static class TestPrintable implements Printable {\n+\n+        TestPrintable() throws PrinterException {\n+            PrinterJob job = PrinterJob.getPrinterJob();\n+            job.setPrintService(PrintServiceLookup.lookupDefaultPrintService());\n+            job.setPrintable(this);\n+\n+            if (job.printDialog()) {\n+                job.print();\n+            } else {\n+                throw new RuntimeException(\"Printing was canceled!\");\n+            }\n+        }\n+\n+        void paint(Graphics2D g) {\n+            drawText(g, customFont, TEXT);\n+        }\n+\n+        @Override\n+        public int print(Graphics graphics, PageFormat pageFormat, int index) {\n+            if (index == 0) {\n+                paint((Graphics2D) graphics);\n+                return PAGE_EXISTS;\n+            } else {\n+                return NO_SUCH_PAGE;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/print\/MissedFontFamilyName\/PrintFontWithMissedFontFamilyTest.java","additions":289,"deletions":0,"binary":false,"changes":289,"status":"added"},{"filename":"test\/jdk\/java\/awt\/print\/MissedFontFamilyName\/SampleFontMissedFontFamily.ttf","binary":true,"status":"added"}]}