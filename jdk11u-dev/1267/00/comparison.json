{"files":[{"patch":"@@ -0,0 +1,220 @@\n+\/*\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JSplitPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UIManager.LookAndFeelInfo;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4164779\n+ * @summary This test confirms that JSplitPane keyboard navigation supports F6 and Ctrl+Tab.\n+ * @run main JSplitPaneKeyboardNavigationTest\n+ *\/\n+public class JSplitPaneKeyboardNavigationTest {\n+\n+    private static final StringBuffer failedVerifiers = new StringBuffer();\n+    private static JPanel panel;\n+    private static JButton leftButton;\n+    private static JButton rightButton1;\n+    private static JButton rightButton2;\n+    private static JButton topButton;\n+    private static JButton bottomButton;\n+    private static Robot robot;\n+    private static JFrame frame;\n+\n+    public static void main(String[] s) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(200);\n+        List<String> lafs = Arrays.stream(getInstalledLookAndFeels())\n+                                  .map(LookAndFeelInfo::getClassName)\n+                                  .collect(Collectors.toList());\n+        for (final String laf : lafs) {\n+            try {\n+                AtomicBoolean lafSetSuccess = new AtomicBoolean(false);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    lafSetSuccess.set(setLookAndFeel(laf));\n+                    if (lafSetSuccess.get()) {\n+                        createUI();\n+                    }\n+                });\n+                if (!lafSetSuccess.get()) {\n+                    continue;\n+                }\n+                robot.waitForIdle();\n+\n+                \/\/ Press Right button 1 and move focus to it.\n+                pressButton(rightButton1);\n+                hitKeys(KeyEvent.VK_F6);\n+\n+                \/\/ Verifier1 - Verifies that, F6 transfers focus to the right\/bottom side of the splitpane\n+                if (isFocusOwner(rightButton2)) {\n+                    System.out.println(\"Verifier 1 passed\");\n+                } else {\n+                    failedVerifiers.append(\"1,\");\n+                    System.out.println(\"Verifier 1 failed, rightButton2 is not focus owner,\" +\n+                            \"F6 doesn't transfer focus to the right\/bottom side of the splitpane\");\n+                }\n+\n+                \/\/ Press Right button 2 and move focus to it.\n+                pressButton(rightButton2);\n+                hitKeys(KeyEvent.VK_F6);\n+\n+                \/\/ Verifier2 - Verifies that, F6 transfers focus to the left side of the parent splitpane,\n+                \/\/ if the right\/bottom side of splitpane already has focus, and it is contained within another splitpane\n+                if (isFocusOwner(leftButton)) {\n+                    System.out.println(\"Verifier 2 passed\");\n+                } else {\n+                    failedVerifiers.append(\"2,\");\n+                    System.out.println(\"Verifier 2 failed, leftButton is not focus owner, \" +\n+                            \"F6 doesn't transfer focus to the left side of the splitpane\");\n+                }\n+\n+                \/\/ Press Left button and move focus to it.\n+                pressButton(leftButton);\n+                hitKeys(KeyEvent.VK_CONTROL, KeyEvent.VK_TAB);\n+                \/\/ Verifier3 - Verifies that, CTRL-TAB navigates forward outside the JSplitPane\n+                if (isFocusOwner(bottomButton)) {\n+                    System.out.println(\"Verifier 3 passed\");\n+                } else {\n+                    failedVerifiers.append(\"3,\");\n+                    System.out.println(\"Verifier 3 failed, bottomButton is not focus owner, \" +\n+                            \"CTRL-TAB doesn't navigate forward outside the JSplitPane\");\n+                }\n+\n+                \/\/ Press Left button and move focus to it.\n+                pressButton(leftButton);\n+                hitKeys(KeyEvent.VK_CONTROL, KeyEvent.VK_SHIFT, KeyEvent.VK_TAB);\n+\n+                \/\/ Verifier4 - Verifies that, CTRL-SHIFT-TAB navigates backward outside the JSplitPane\n+                if (isFocusOwner(topButton)) {\n+                    System.out.println(\"Verifier 4 passed\");\n+                } else {\n+                    failedVerifiers.append(\"4\");\n+                    System.out.println(\"Verifier 4 failed, topButton is not focus owner, \" +\n+                            \"CTRL-SHIFT-TAB doesn't navigate backward outside the JSplitPane\");\n+                }\n+\n+                if (failedVerifiers.toString().isEmpty()) {\n+                    System.out.println(\"Test passed, All verifiers succeeded for \" + laf);\n+                } else {\n+                    throw new RuntimeException(\"Test failed, verifiers \" + failedVerifiers.toString() + \" failed for \" + laf);\n+                }\n+            } finally {\n+                SwingUtilities.invokeAndWait(JSplitPaneKeyboardNavigationTest::disposeFrame);\n+            }\n+        }\n+    }\n+\n+    private static boolean isFocusOwner(JButton button) throws Exception {\n+        final AtomicBoolean isFocusOwner = new AtomicBoolean(false);\n+        SwingUtilities.invokeAndWait(() -> {\n+            isFocusOwner.set(button.isFocusOwner());\n+        });\n+        return isFocusOwner.get();\n+    }\n+\n+    private static void pressButton(JButton button) throws Exception {\n+        final AtomicReference<Point> loc = new AtomicReference<>();\n+        SwingUtilities.invokeAndWait(() -> {\n+            loc.set(button.getLocationOnScreen());\n+        });\n+        final Point buttonLoc = loc.get();\n+        robot.mouseMove(buttonLoc.x + 8, buttonLoc.y + 8);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+    }\n+\n+    public static void createUI() {\n+        frame = new JFrame();\n+        panel = new JPanel();\n+        panel.setLayout(new BorderLayout());\n+        leftButton = new JButton(\"Left Button\");\n+        rightButton1 = new JButton(\"Right Button 1\");\n+        rightButton2 = new JButton(\"Right Button 2\");\n+        topButton = new JButton(\"Top Button\");\n+        bottomButton = new JButton(\"Bottom Button\");\n+        panel.add(topButton, BorderLayout.NORTH);\n+        panel.add(bottomButton, BorderLayout.SOUTH);\n+        final JSplitPane splitPane2 = new JSplitPane(JSplitPane.VERTICAL_SPLIT, true, rightButton1, rightButton2);\n+        final JSplitPane splitPane1 = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, true, leftButton, splitPane2);\n+        panel.add(splitPane1, BorderLayout.CENTER);\n+        frame.setContentPane(panel);\n+        frame.setSize(200, 200);\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        frame.pack();\n+        frame.setAlwaysOnTop(true);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void hitKeys(int... keys) {\n+        for (int key : keys) {\n+            robot.keyPress(key);\n+        }\n+\n+        for (int i = keys.length - 1; i >= 0; i--) {\n+            robot.keyRelease(keys[i]);\n+        }\n+    }\n+\n+    private static boolean setLookAndFeel(String lafName) {\n+        try {\n+            UIManager.setLookAndFeel(lafName);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Ignoring Unsupported L&F: \" + lafName);\n+            return false;\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return true;\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JSplitPane\/4164779\/JSplitPaneKeyboardNavigationTest.java","additions":220,"deletions":0,"binary":false,"changes":220,"status":"added"}]}