{"files":[{"patch":"@@ -2068,1 +2068,1 @@\n-    if (!create_numbered_property(\"jdk.module.addmods\", \"jdk.internal.vm.ci\", addmods_count++)) {\n+    if (!create_numbered_module_property(\"jdk.module.addmods\", \"jdk.internal.vm.ci\", addmods_count++)) {\n@@ -2142,1 +2142,3 @@\n-bool Arguments::create_property(const char* prop_name, const char* prop_value, PropertyInternal internal) {\n+bool Arguments::create_module_property(const char* prop_name, const char* prop_value, PropertyInternal internal) {\n+  assert(is_internal_module_property(prop_name) ||\n+         strcmp(prop_name, \"jdk.module.illegalAccess\") == 0, \"unknown module property: '%s'\", prop_name);\n@@ -2150,1 +2152,6 @@\n-  bool added = add_property(property, UnwriteableProperty, internal);\n+  \/\/ These are not strictly writeable properties as they cannot be set via -Dprop=val. But that\n+  \/\/ is enforced by checking is_internal_module_property(). We need the property to be writeable so\n+  \/\/ that multiple occurrences of the associated flag just causes the existing property value to be\n+  \/\/ replaced (\"last option wins\"). Otherwise we would need to keep track of the flags and only convert\n+  \/\/ to a property after we have finished flag processing.\n+  bool added = add_property(property, WriteableProperty, internal);\n@@ -2155,1 +2162,2 @@\n-bool Arguments::create_numbered_property(const char* prop_base_name, const char* prop_value, unsigned int count) {\n+bool Arguments::create_numbered_module_property(const char* prop_base_name, const char* prop_value, unsigned int count) {\n+  assert(is_internal_module_property(prop_base_name), \"unknown module property: '%s'\", prop_base_name);\n@@ -2314,1 +2322,1 @@\n-      if (!create_numbered_property(\"jdk.module.patch\", patch_mod_tail, patch_mod_count++)) {\n+      if (!create_numbered_module_property(\"jdk.module.patch\", patch_mod_tail, patch_mod_count++)) {\n@@ -2461,1 +2469,1 @@\n-      if (!create_numbered_property(\"jdk.module.addreads\", tail, addreads_count++)) {\n+      if (!create_numbered_module_property(\"jdk.module.addreads\", tail, addreads_count++)) {\n@@ -2465,1 +2473,1 @@\n-      if (!create_numbered_property(\"jdk.module.addexports\", tail, addexports_count++)) {\n+      if (!create_numbered_module_property(\"jdk.module.addexports\", tail, addexports_count++)) {\n@@ -2469,1 +2477,1 @@\n-      if (!create_numbered_property(\"jdk.module.addopens\", tail, addopens_count++)) {\n+      if (!create_numbered_module_property(\"jdk.module.addopens\", tail, addopens_count++)) {\n@@ -2473,1 +2481,1 @@\n-      if (!create_numbered_property(\"jdk.module.addmods\", tail, addmods_count++)) {\n+      if (!create_numbered_module_property(\"jdk.module.addmods\", tail, addmods_count++)) {\n@@ -2477,1 +2485,1 @@\n-      if (!create_property(\"jdk.module.limitmods\", tail, InternalProperty)) {\n+      if (!create_module_property(\"jdk.module.limitmods\", tail, InternalProperty)) {\n@@ -2481,1 +2489,1 @@\n-      if (!create_property(\"jdk.module.path\", tail, ExternalProperty)) {\n+      if (!create_module_property(\"jdk.module.path\", tail, ExternalProperty)) {\n@@ -2485,1 +2493,1 @@\n-      if (!create_property(\"jdk.module.upgrade.path\", tail, ExternalProperty)) {\n+      if (!create_module_property(\"jdk.module.upgrade.path\", tail, ExternalProperty)) {\n@@ -2495,1 +2503,1 @@\n-      if (!create_property(\"jdk.module.illegalAccess\", tail, ExternalProperty)) {\n+      if (!create_module_property(\"jdk.module.illegalAccess\", tail, ExternalProperty)) {\n@@ -2539,1 +2547,1 @@\n-        if (!create_numbered_property(\"jdk.module.addmods\", \"java.instrument\", addmods_count++)) {\n+        if (!create_numbered_module_property(\"jdk.module.addmods\", \"java.instrument\", addmods_count++)) {\n@@ -2748,1 +2756,1 @@\n-        if (!create_numbered_property(\"jdk.module.addmods\", \"jdk.management.agent\", addmods_count++)) {\n+        if (!create_numbered_module_property(\"jdk.module.addmods\", \"jdk.management.agent\", addmods_count++)) {\n@@ -4202,1 +4210,2 @@\n-  \/\/ If property key exist then update with new value.\n+  \/\/ If property key exists and is writeable, then update with new value.\n+  \/\/ Trying to update a non-writeable property is silently ignored.\n@@ -4207,1 +4216,1 @@\n-        prop->append_value(v);\n+        prop->append_writeable_value(v);\n@@ -4209,1 +4218,1 @@\n-        prop->set_value(v);\n+        prop->set_writeable_value(v);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":27,"deletions":18,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -123,0 +123,5 @@\n+  void append_writeable_value(const char *value) {\n+    if (writeable()) {\n+      append_value(value);\n+    }\n+  }\n@@ -399,2 +404,5 @@\n-  static bool create_property(const char* prop_name, const char* prop_value, PropertyInternal internal);\n-  static bool create_numbered_property(const char* prop_base_name, const char* prop_value, unsigned int count);\n+  \/\/ Used for module system related properties: converted from command-line flags.\n+  \/\/ Basic properties are writeable as they operate as \"last one wins\" and will get overwritten.\n+  \/\/ Numbered properties are never writeable, and always internal.\n+  static bool create_module_property(const char* prop_name, const char* prop_value, PropertyInternal internal);\n+  static bool create_numbered_module_property(const char* prop_base_name, const char* prop_value, unsigned int count);\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8243936\n+ * @summary Ensure non-writeable system properties are not writeable\n+ *\n+ * @run main\/othervm -Djava.vm.name=Unexpected NonWriteableProperty java.vm.name Unexpected\n+ *\/\n+\n+public class NonWriteableProperty {\n+    public static void main(String[] args) {\n+        if (System.getProperty(args[0]).equals(args[1])) {\n+            throw new RuntimeException(\"Non-writeable system property \" +\n+                                       args[0] + \" was rewritten\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/NonWriteableProperty.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"}]}