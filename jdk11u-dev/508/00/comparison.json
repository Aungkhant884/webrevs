{"files":[{"patch":"@@ -222,1 +222,0 @@\n-java\/awt\/FontMetrics\/MaxAdvanceIsMax.java 8221305,8231495 solaris-all,macosx-all,linux-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,143 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Red Hat, Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8218854\n- * @requires jdk.version.major >= 8\n- * @run main\/othervm MaxAdvanceIsMax\n- *\/\n-\n-import java.awt.Font;\n-import java.awt.FontMetrics;\n-import java.awt.Graphics2D;\n-import java.awt.GraphicsEnvironment;\n-import java.awt.RenderingHints;\n-import java.awt.image.BufferedImage;\n-\n-public class MaxAdvanceIsMax {\n-\n-    private static boolean debug = true;\n-\n-    private static final class AntialiasHint {\n-        private Object aaHint;\n-        private String asString = \"\";\n-\n-        AntialiasHint(Object aaHint) {\n-            if (aaHint.equals(\n-                    RenderingHints.VALUE_TEXT_ANTIALIAS_OFF)) {\n-                asString += \"FT_LOAD_TARGET_MONO\";\n-            } else if (aaHint.equals(\n-                    RenderingHints.VALUE_TEXT_ANTIALIAS_ON)) {\n-                asString += \"FT_LOAD_TARGET_NORMAL\";\n-            } else if (aaHint.equals(\n-                    RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HRGB)) {\n-                asString += \"FT_LOAD_TARGET_LCD\";\n-            } else if (aaHint.equals(\n-                    RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_VRGB)) {\n-                asString += \"FT_LOAD_TARGET_LCD_V\";\n-            }\n-            this.aaHint = aaHint;\n-        }\n-\n-        public Object getHint() {\n-            return aaHint;\n-        }\n-\n-        public String toString() {\n-            return asString;\n-        }\n-    }\n-\n-    private static final AntialiasHint[] antialiasHints = {\n-            new AntialiasHint(RenderingHints.VALUE_TEXT_ANTIALIAS_OFF),\n-            new AntialiasHint(RenderingHints.VALUE_TEXT_ANTIALIAS_ON),\n-            new AntialiasHint(RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HRGB),\n-            new AntialiasHint(RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_VRGB)\n-    };\n-\n-    private static final class StyleAndSize {\n-        int style;\n-        float size;\n-        public StyleAndSize(int style, float size) {\n-            this.style = style;\n-            this.size = size;\n-        }\n-    };\n-\n-    private static final StyleAndSize[] stylesAndSizes = new StyleAndSize[] {\n-        new StyleAndSize(Font.BOLD | Font.ITALIC, 10)\n-    };\n-\n-    public static void main(String[] args) throws Exception {\n-        GraphicsEnvironment e =\n-                GraphicsEnvironment.getLocalGraphicsEnvironment();\n-        Font[] fonts = e.getAllFonts();\n-        BufferedImage bi = new BufferedImage(500, 500,\n-                BufferedImage.TYPE_INT_RGB);\n-        for (AntialiasHint antialiasHint : antialiasHints) {\n-            for (Font f : fonts) {\n-                for (StyleAndSize styleAndSize : stylesAndSizes) {\n-                    f = f.deriveFont(styleAndSize.style, styleAndSize.size);\n-                    Graphics2D g2d = bi.createGraphics();\n-                    g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,\n-                            antialiasHint.getHint());\n-                    FontMetrics fm = g2d.getFontMetrics(f);\n-                    int[] width;\n-                    int maxWidth = -1;\n-                    int maxAdvance = fm.getMaxAdvance();\n-                    if (debug) {\n-                        System.out.println(\"Testing \" + f + \" in \" +\n-                                antialiasHint);\n-                        System.out.println(\"getMaxAdvance: \" + maxAdvance);\n-                    }\n-                    if (maxAdvance != -1) {\n-                        String failureMessage = null;\n-                        width = fm.getWidths();\n-                        for (int j = 0; j < width.length; j++) {\n-                            if (width[j] > maxWidth) {\n-                                maxWidth = width[j];\n-                            }\n-                            if (width[j] > maxAdvance) {\n-                                failureMessage = \"FAILED: getMaxAdvance is \" +\n-                                                 \"not max for font: \" +\n-                                                 f.toString() +\n-                                                 \" getMaxAdvance(): \" +\n-                                                 maxAdvance +\n-                                                 \" getWidths()[\" + j + \"]: \" +\n-                                                 width[j];\n-                                throw new Exception(failureMessage);\n-                            }\n-                        }\n-                    }\n-                    if (debug) {\n-                        System.out.println(\"Max char width: \" + maxWidth);\n-                        System.out.println(\"PASSED\");\n-                        System.out.println(\".........................\");\n-                    }\n-                }\n-            }\n-        }\n-        System.out.println(\"TEST PASS - OK\");\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/FontMetrics\/MaxAdvanceIsMax.java","additions":0,"deletions":143,"binary":false,"changes":143,"status":"deleted"}]}