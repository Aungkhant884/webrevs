{"files":[{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8222430\n+ * @summary Test various predicates of ElementKind.\n+ *\/\n+\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import javax.lang.model.element.ElementKind;\n+\n+\/**\n+ * Test the isClass, isField, and isInterface predicates of ElementKind.\n+ *\/\n+public class TestElementKindPredicates {\n+    public static void main(String... args) {\n+        Set<ElementKind> ALL_KINDS = Set.of(ElementKind.values());\n+\n+        \/\/ isClass: Returns true if this is a kind of class: either CLASS or ENUM.\n+        test(ALL_KINDS,\n+             (ElementKind k) -> Set.of(ElementKind.CLASS,\n+                                       ElementKind.ENUM).contains(k),\n+             (ElementKind k) -> k.isClass(), \"isClass\");\n+\n+        \/\/ isField: Returns true if this is a kind of field: either FIELD or ENUM_CONSTANT.\n+        test(ALL_KINDS,\n+             (ElementKind k) -> Set.of(ElementKind.FIELD,\n+                                       ElementKind.ENUM_CONSTANT).contains(k),\n+             (ElementKind k) -> k.isField(), \"isField\");\n+\n+        \/\/ isInterface: Returns true if this is a kind of interface: either INTERFACE or ANNOTATION_TYPE.\n+        test(ALL_KINDS,\n+             (ElementKind k) -> Set.of(ElementKind.INTERFACE,\n+                                       ElementKind.ANNOTATION_TYPE).contains(k),\n+             (ElementKind k) -> k.isInterface(), \"isInterface\");\n+    }\n+\n+    private static void test(Set<ElementKind> kinds,\n+                             Predicate<ElementKind> expectedPred,\n+                             Predicate<ElementKind> actualPred,\n+                             String errorMessage) {\n+        for(ElementKind kind : kinds) {\n+            boolean expected = expectedPred.test(kind);\n+            boolean actual = actualPred.test(kind);\n+\n+            if (expected != actual) {\n+                throw new RuntimeException(\"Error testing ElementKind.\" + errorMessage + \"(\" +  kind +\n+                                           \"):\\texpected \" + expected + \"\\tgot \" + actual);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestElementKindPredicates.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}