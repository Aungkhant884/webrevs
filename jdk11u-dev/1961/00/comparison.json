{"files":[{"patch":"@@ -1810,0 +1810,2 @@\n+        if (interruptible && Thread.interrupted())\n+            return null;\n@@ -1821,0 +1823,5 @@\n+            else if (interruptible && q.interrupted) {\n+                q.thread = null;\n+                cleanStack();\n+                return null;\n+            }\n@@ -1827,2 +1834,0 @@\n-                if (q.interrupted && interruptible)\n-                    break;\n@@ -1831,1 +1836,1 @@\n-        if (q != null && queued) {\n+        if (q != null) {\n@@ -1833,1 +1838,1 @@\n-            if (!interruptible && q.interrupted)\n+            if (q.interrupted)\n@@ -1835,2 +1840,0 @@\n-            if (r == null)\n-                cleanStack();\n@@ -1838,2 +1841,1 @@\n-        if (r != null || (r = result) != null)\n-            postComplete();\n+        postComplete();\n@@ -1848,27 +1850,16 @@\n-        if (Thread.interrupted())\n-            return null;\n-        if (nanos > 0L) {\n-            long d = System.nanoTime() + nanos;\n-            long deadline = (d == 0L) ? 1L : d; \/\/ avoid 0\n-            Signaller q = null;\n-            boolean queued = false;\n-            Object r;\n-            while ((r = result) == null) { \/\/ similar to untimed\n-                if (q == null) {\n-                    q = new Signaller(true, nanos, deadline);\n-                    if (Thread.currentThread() instanceof ForkJoinWorkerThread)\n-                        ForkJoinPool.helpAsyncBlocker(defaultExecutor(), q);\n-                }\n-                else if (!queued)\n-                    queued = tryPushStack(q);\n-                else if (q.nanos <= 0L)\n-                    break;\n-                else {\n-                    try {\n-                        ForkJoinPool.managedBlock(q);\n-                    } catch (InterruptedException ie) {\n-                        q.interrupted = true;\n-                    }\n-                    if (q.interrupted)\n-                        break;\n-                }\n+        long d = System.nanoTime() + nanos;\n+        long deadline = (d == 0L) ? 1L : d; \/\/ avoid 0\n+        boolean interrupted = false, queued = false;\n+        Signaller q = null;\n+        Object r = null;\n+        for (;;) { \/\/ order of checking interrupt, result, timeout matters\n+            if (interrupted || (interrupted = Thread.interrupted()))\n+                break;\n+            else if ((r = result) != null)\n+                break;\n+            else if (nanos <= 0L)\n+                break;\n+            else if (q == null) {\n+                q = new Signaller(true, nanos, deadline);\n+                if (Thread.currentThread() instanceof ForkJoinWorkerThread)\n+                    ForkJoinPool.helpAsyncBlocker(defaultExecutor(), q);\n@@ -1876,4 +1867,10 @@\n-            if (q != null && queued) {\n-                q.thread = null;\n-                if (r == null)\n-                    cleanStack();\n+            else if (!queued)\n+                queued = tryPushStack(q);\n+            else {\n+                try {\n+                    ForkJoinPool.managedBlock(q);\n+                    interrupted = q.interrupted;\n+                    nanos = q.nanos;\n+                } catch (InterruptedException ie) {\n+                    interrupted = true;\n+                }\n@@ -1881,4 +1878,0 @@\n-            if (r != null || (r = result) != null)\n-                postComplete();\n-            if (r != null || (q != null && q.interrupted))\n-                return r;\n@@ -1886,1 +1879,14 @@\n-        throw new TimeoutException();\n+        if (q != null) {\n+            q.thread = null;\n+            if (r == null)\n+                cleanStack();\n+        }\n+        if (r != null) {\n+            if (interrupted)\n+                Thread.currentThread().interrupt();\n+            postComplete();\n+            return r;\n+        } else if (interrupted)\n+            return null;\n+        else\n+            throw new TimeoutException();\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CompletableFuture.java","additions":50,"deletions":44,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.ThreadLocalRandom;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+\n+\/*\n+ * @test\n+ * @bug 8254350\n+ * @run main LostInterrupt\n+ * @summary CompletableFuture.get may swallow interrupt status\n+ * @key randomness\n+ *\/\n+\n+\/\/ TODO: Rewrite as a CompletableFuture tck test ?\n+\n+\/**\n+ * Submits a task that completes immediately, then invokes CompletableFuture.get\n+ * with the interrupt status set. CompletableFuture.get should either complete\n+ * immediately with the interrupt status set, or else throw InterruptedException\n+ * with the interrupt status cleared.\n+ *\/\n+public class LostInterrupt {\n+    static final int ITERATIONS = 10_000;\n+\n+    public static void main(String[] args) throws Exception {\n+        ThreadLocalRandom rnd = ThreadLocalRandom.current();\n+        ForkJoinPool executor = new ForkJoinPool(1);\n+        try {\n+            for (int i = 0; i < ITERATIONS; i++) {\n+                CompletableFuture<String> future = new CompletableFuture<>();\n+                boolean timed = rnd.nextBoolean();\n+                executor.execute(() -> future.complete(\"foo\"));\n+\n+                Thread.currentThread().interrupt();\n+                try {\n+                    String result = timed ? future.get(1, DAYS) : future.get();\n+\n+                    if (!Thread.interrupted())\n+                        throw new AssertionError(\"lost interrupt, run=\" + i);\n+                } catch (InterruptedException expected) {\n+                    if (Thread.interrupted())\n+                        throw new AssertionError(\n+                            \"interrupt status not cleared, run=\" + i);\n+                }\n+            }\n+        } finally {\n+            executor.shutdown();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/concurrent\/CompletableFuture\/LostInterrupt.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ThreadLocalRandom;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+\/*\n+ * @test\n+ * @bug 8254350\n+ * @run main SwallowedInterruptedException\n+ * @key randomness\n+ *\/\n+\n+\/\/ TODO: incorporate into CompletableFuture tck tests\n+\n+public class SwallowedInterruptedException {\n+    static final int ITERATIONS = 100;\n+\n+    public static void main(String[] args) throws Throwable {\n+        ThreadLocalRandom rnd = ThreadLocalRandom.current();\n+        for (int i = 1; i <= ITERATIONS; i++) {\n+            boolean timed = rnd.nextBoolean();\n+            long sleepMillis = rnd.nextLong(10);\n+\n+            CompletableFuture<Void> future = new CompletableFuture<>();\n+            CountDownLatch threadRunning = new CountDownLatch(1);\n+            AtomicReference<Throwable> fail = new AtomicReference<>();\n+\n+            Thread thread = new Thread(() -> {\n+                threadRunning.countDown();\n+\n+                try {\n+                    Void result = (timed) ? future.get(1, DAYS) : future.get();\n+\n+                    if (!Thread.currentThread().isInterrupted()) {\n+                        fail.set(new AssertionError(\n+                            \"Future.get completed with interrupt status not set\"));\n+                    }\n+                } catch (InterruptedException ex) {\n+                    if (Thread.currentThread().isInterrupted()) {\n+                        fail.set(new AssertionError(\n+                            \"InterruptedException with interrupt status set\"));\n+                    }\n+                } catch (Throwable ex) {\n+                    fail.set(ex);\n+                }\n+            });\n+            thread.start();\n+            threadRunning.await();\n+\n+            \/\/ interrupt thread, then set result after an optional (random) delay\n+            thread.interrupt();\n+            if (sleepMillis > 0)\n+                Thread.sleep(sleepMillis);\n+            future.complete(null);\n+\n+            thread.join();\n+            if (fail.get() != null) {\n+                throw new AssertionError(\n+                    String.format(\"Test failed at iteration %d with [timed=%s sleepMillis=%d]\",\n+                                  i, timed, sleepMillis),\n+                    fail.get());\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/concurrent\/CompletableFuture\/SwallowedInterruptedException.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}