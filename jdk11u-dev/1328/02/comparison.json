{"files":[{"patch":"@@ -856,3 +856,0 @@\n-\n-#if defined(MACOSX)\n-\n@@ -862,7 +859,5 @@\n-    time_t offset;\n-    char sign, buf[32];\n-    struct tm local_tm;\n-    time_t clock;\n-\n-    clock = time(NULL);\n-    if (localtime_r(&clock, &local_tm) == NULL) {\n+    char buf[32];\n+    char offset[6];\n+    struct tm localtm;\n+    time_t clock = time(NULL);\n+    if (localtime_r(&clock, &localtm) == NULL) {\n@@ -871,2 +866,5 @@\n-    offset = (time_t)local_tm.tm_gmtoff;\n-    if (offset == 0) {\n+\n+#if defined(MACOSX)\n+    time_t gmt_offset;\n+    gmt_offset = (time_t)localtm.tm_gmtoff;\n+    if (gmt_offset == 0) {\n@@ -875,11 +873,0 @@\n-    if (offset > 0) {\n-        sign = '+';\n-    } else {\n-        offset = -offset;\n-        sign = '-';\n-    }\n-    sprintf(buf, (const char *)\"GMT%c%02d:%02d\",\n-            sign, (int)(offset\/3600), (int)((offset%3600)\/60));\n-    return strdup(buf);\n-}\n-\n@@ -887,12 +874,2 @@\n-\n-char *\n-getGMTOffsetID()\n-{\n-    time_t offset;\n-    char sign, buf[32];\n-#if defined(__solaris__)\n-    struct tm localtm;\n-    time_t currenttime;\n-\n-    currenttime = time(NULL);\n-    if (localtime_r(&currenttime, &localtm) == NULL) {\n+    struct tm gmt;\n+    if (gmtime_r(&clock, &gmt) == NULL) {\n@@ -902,3 +879,3 @@\n-    offset = localtm.tm_isdst ? altzone : timezone;\n-#else\n-    offset = timezone;\n+    if(localtm.tm_hour == gmt.tm_hour && localtm.tm_min == gmt.tm_min) {\n+        return strdup(\"GMT\");\n+    }\n@@ -907,1 +884,1 @@\n-    if (offset == 0) {\n+    if (strftime(offset, 6, \"%z\", &localtm) != 5) {\n@@ -911,9 +888,2 @@\n-    \/* Note that the time offset direction is opposite. *\/\n-    if (offset > 0) {\n-        sign = '-';\n-    } else {\n-        offset = -offset;\n-        sign = '+';\n-    }\n-    sprintf(buf, (const char *)\"GMT%c%02d:%02d\",\n-            sign, (int)(offset\/3600), (int)((offset%3600)\/60));\n+    sprintf(buf, (const char *)\"GMT%c%c%c:%c%c\", offset[0], offset[1], offset[2],\n+        offset[3], offset[4]);\n@@ -922,1 +892,0 @@\n-#endif \/* MACOSX *\/\n","filename":"src\/java.base\/unix\/native\/libjava\/TimeZone_md.c","additions":18,"deletions":49,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8285838\n+ * @library \/test\/lib\n+ * @summary This test will ensure that daylight savings rules are followed\n+ * appropriately when setting a custom timezone ID via the TZ env variable.\n+ * @requires os.family != \"windows\"\n+ * @run main\/othervm CustomTzIDCheckDST\n+ *\/\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.SimpleTimeZone;\n+import java.time.DayOfWeek;\n+import java.time.ZonedDateTime;\n+import java.time.temporal.TemporalAdjusters;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+public class CustomTzIDCheckDST {\n+    private static String CUSTOM_TZ = \"MEZ-1MESZ,M3.5.0,M10.5.0\";\n+    public static void main(String args[]) throws Throwable {\n+        if (args.length == 0) {\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"CustomTzIDCheckDST\", \"runTZTest\");\n+            pb.environment().put(\"TZ\", CUSTOM_TZ);\n+            OutputAnalyzer output = ProcessTools.executeProcess(pb);\n+            output.shouldHaveExitValue(0);\n+        } else {\n+            runTZTest();\n+        }\n+    }\n+\n+    \/* TZ code will always be set to \"MEZ-1MESZ,M3.5.0,M10.5.0\".\n+     * This ensures the transition periods for Daylights Savings should be at March's last\n+     * Sunday and October's last Sunday.\n+     *\/\n+    private static void runTZTest() {\n+        Date time = new Date();\n+        if (new SimpleTimeZone(3600000, \"MEZ-1MESZ\", Calendar.MARCH, -1, Calendar.SUNDAY, 0,\n+                Calendar.OCTOBER, -1, Calendar.SUNDAY, 0).inDaylightTime(time)) {\n+            \/\/ We are in Daylight savings period.\n+            if (time.toString().endsWith(\"GMT+02:00 \" + Integer.toString(time.getYear() + 1900)))\n+                return;\n+        } else {\n+            if (time.toString().endsWith(\"GMT+01:00 \" + Integer.toString(time.getYear() + 1900)))\n+                return;\n+        }\n+\n+        \/\/ Reaching here means time zone did not match up as expected.\n+        throw new RuntimeException(\"Got unexpected timezone information: \" + time);\n+    }\n+\n+    private static ZonedDateTime getLastSundayOfMonth(ZonedDateTime date) {\n+        return date.with(TemporalAdjusters.lastInMonth(DayOfWeek.SUNDAY));\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/TimeZone\/CustomTzIDCheckDST.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}