{"files":[{"patch":"@@ -44,3 +44,0 @@\n-    static int passes = 0;\n-    static int errors = 0;\n-\n@@ -65,2 +62,0 @@\n-    private static final Map<String, String> env = new HashMap<>();\n-\n@@ -77,2 +72,4 @@\n-    static void run(Map<String, String> env,\n-            int nLLPComponents, String caseID) {\n+    static boolean run(int nLLPComponents, File variantDir, String caseID) {\n+\n+        Map<String, String> env = new HashMap<>();\n+        env.put(LD_LIBRARY_PATH, variantDir.getAbsolutePath());\n@@ -88,1 +85,9 @@\n-        analyze(tr, nLLPComponents, caseID);\n+        int len = getLLPComponents(tr);\n+        if (len == nLLPComponents) {\n+            System.out.printf(\"Test7029048 OK %s%n\", caseID);\n+            return true;\n+        } else {\n+            System.out.printf(\"Test7029048 FAIL %s: expected %d but got %d%n\",\n+                    caseID, nLLPComponents, len);\n+            return false;\n+        }\n@@ -91,1 +96,1 @@\n-    static void analyze(TestResult tr, int nLLPComponents, String caseID) {\n+    static int getLLPComponents(TestResult tr) {\n@@ -100,11 +105,3 @@\n-        int len = (envValue.equals(\"null\")\n-                   ? 0 : envValue.split(File.pathSeparator).length);\n-        if (len == nLLPComponents) {\n-            System.out.println(caseID + \": OK\");\n-            passes++;\n-        } else {\n-            System.out.println(\"FAIL: test7029048, \" + caseID);\n-            System.out.println(\" expected \" + nLLPComponents\n-                               + \" but got \" + len);\n-            System.out.println(envValue);\n-            errors++;\n+\n+        if (envValue.equals(\"null\")) {\n+            return 0;\n@@ -112,0 +109,2 @@\n+\n+        return envValue.split(File.pathSeparator).length;\n@@ -133,1 +132,1 @@\n-    static void test7029048() throws IOException {\n+    static boolean runTest() throws IOException {\n@@ -135,0 +134,1 @@\n+        boolean pass = true;\n@@ -159,2 +159,1 @@\n-                        System.out.println(\"Skipping test case \\\"\" + desc +\n-                                           \"\\\" because the Aix launcher adds the paths in any case.\");\n+                        printSkipMessage(desc);\n@@ -170,2 +169,1 @@\n-                        System.out.println(\"Skipping test case \\\"\" + desc +\n-                                           \"\\\" because the Aix launcher adds the paths in any case.\");\n+                        printSkipMessage(desc);\n@@ -179,0 +177,3 @@\n+            \/\/ Add one to account for our setting\n+            int nLLPComponents = v.value + 1;\n+\n@@ -182,5 +183,1 @@\n-            env.clear();\n-            env.put(LD_LIBRARY_PATH, dstServerDir.getAbsolutePath());\n-            run(env,\n-                v.value + 1,            \/\/ Add one to account for our setting\n-                \"Case 1: \" + desc);\n+            boolean pass1 = run(nLLPComponents, dstServerDir, \"Case 1: \" + desc);\n@@ -191,18 +188,3 @@\n-            env.clear();\n-            env.put(LD_LIBRARY_PATH, dstClientDir.getAbsolutePath());\n-            run(env,\n-                v.value + 1,            \/\/ Add one to account for our setting\n-                \"Case 2: \" + desc);\n-\n-            if (isSolaris) {\n-                \/*\n-                 * Case 3: set the appropriate LLP_XX flag,\n-                 * java64 LLP_64 is relevant, LLP_32 is ignored\n-                 *\/\n-                env.clear();\n-                env.put(LD_LIBRARY_PATH_64, dstServerDir.getAbsolutePath());\n-                run(env,\n-                    v.value,            \/\/ Do not add one, since we didn't set\n-                                        \/\/ LD_LIBRARY_PATH here\n-                    \"Case 3: \" + desc);\n-            }\n+            boolean pass2 = run(nLLPComponents, dstClientDir, \"Case 2: \" + desc);\n+\n+            pass &= pass1 && pass2;\n@@ -210,1 +192,6 @@\n-        return;\n+        return pass;\n+    }\n+\n+    private static void printSkipMessage(String description) {\n+        System.out.printf(\"Skipping test case '%s' because the Aix launcher\" +\n+                          \" adds the paths in any case.%n\", description);\n@@ -225,13 +212,2 @@\n-        \/\/ run the tests\n-        test7029048();\n-        if (errors > 0) {\n-            throw new Exception(\"Test7029048: FAIL: with \"\n-                    + errors + \" errors and passes \" + passes);\n-        } else if (isSolaris && passes < 9) {\n-            throw new Exception(\"Test7029048: FAIL: \" +\n-                    \"all tests did not run, expected \" + 9 + \" got \" + passes);\n-        } else if (isLinux && passes < 6) {\n-             throw new Exception(\"Test7029048: FAIL: \" +\n-                    \"all tests did not run, expected \" + 6 + \" got \" + passes);\n-        } else {\n-            System.out.println(\"Test7029048: PASS \" + passes);\n+        if (!runTest()) {\n+            throw new Exception(\"Test7029048 fails\");\n@@ -240,1 +216,0 @@\n-\n","filename":"test\/jdk\/tools\/launcher\/Test7029048.java","additions":38,"deletions":63,"binary":false,"changes":101,"status":"modified"}]}