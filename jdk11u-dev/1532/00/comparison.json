{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -705,1 +705,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -768,1 +768,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -909,1 +909,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -1631,1 +1631,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/ToHTMLStream.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1230,1 +1230,1 @@\n-            if (!m_cdataTagOpen && shouldIndent())\n+            if (!m_cdataTagOpen && shouldIndentForText())\n@@ -1269,0 +1269,1 @@\n+            m_isprevtext = true;\n@@ -1535,2 +1536,2 @@\n-     * Used to flush the buffered characters when indentation is on, this method\n-     * will be called when the next node is traversed.\n+     * Flushes the buffered characters when indentation is on. This method\n+     * is called before the next node is traversed.\n@@ -1538,0 +1539,2 @@\n+     * @param isText indicates whether the node to be traversed is text\n+     * @throws org.xml.sax.SAXException\n@@ -1539,1 +1542,1 @@\n-    final protected void flushCharactersBuffer() throws SAXException {\n+    final protected void flushCharactersBuffer(boolean isText) throws SAXException {\n@@ -1552,1 +1555,3 @@\n-                m_childNodeNum++;\n+                if (!isText) {\n+                    m_childNodeNum++;\n+                }\n@@ -1845,1 +1850,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -2089,1 +2094,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -2281,1 +2286,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -2463,2 +2468,1 @@\n-            m_childNodeNum++;\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(true);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/ToStream.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+ * @LastModified: July 2019\n@@ -203,1 +204,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -270,1 +271,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/ToXMLStream.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n- * @bug 6439439 8087303 8174025 8249867 8261209\n+ * @bug 6439439 8087303 8174025 8223291 8249867 8261209\n@@ -526,1 +526,0 @@\n-        dbf.setValidating(true);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/prettyprint\/PrettyPrintTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,3 +1,1 @@\n-<a>\n-    <![CDATA[ ]]>\n-<\/a>\n+<a><![CDATA[ ]]><\/a>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/prettyprint\/xmltest1.out","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,2 +1,1 @@\n-<a>\n-    <![CDATA[  abc def \n+<a><![CDATA[  abc def \n@@ -4,2 +3,1 @@\n- test]]>\n-<\/a>\n+ test]]><\/a>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/prettyprint\/xmltest2.out","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,2 +2,1 @@\n-         t\n-    <![CDATA[ ]]>\n+     t<![CDATA[ ]]>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/prettyprint\/xmltest8.out","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.io.StringWriter;\n@@ -28,0 +29,2 @@\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.OutputKeys;\n@@ -29,0 +32,1 @@\n+import javax.xml.transform.Transformer;\n@@ -30,0 +34,1 @@\n+import javax.xml.transform.stream.StreamResult;\n@@ -32,0 +37,1 @@\n+import org.testng.annotations.DataProvider;\n@@ -33,0 +39,2 @@\n+import org.w3c.dom.Document;\n+import org.xml.sax.InputSource;\n@@ -36,1 +44,1 @@\n- * @bug 8219705\n+ * @bug 8219705 8223291\n@@ -42,0 +50,50 @@\n+    \/*\n+       DataProvider: for testing indentation\n+       Data: xml, expected result\n+     *\/\n+    @DataProvider(name = \"Indentation\")\n+    public Object[][] getData() {\n+        String mix = \"\\n\" +\n+                \"        abc\\n\" +\n+                \"        mix\\n\" +\n+                \"        xyz\\n\" +\n+                \"    \";\n+        return new Object[][]{\n+            {\"abc<![CDATA[data]]>xyz\", \"abcdataxyz\"},\n+            {\"abc<![CDATA[ & ]]>xyz\", \"abc & xyz\"},\n+            {\"<![CDATA[data]]>\", \"data\"},\n+            {\"abc<mix>mix<\/mix>xyz\", mix}\n+        };\n+    }\n+\n+\n+    \/**\n+     * bug 8223291\n+     * Verifies that no extra indentation is added for CDATA.\n+     * @param xml the xml content to be tested\n+     * @param expected the expected result\n+     * @throws Exception\n+     *\/\n+    @Test(dataProvider = \"Indentation\")\n+    public void testIndentation(String xml, String expected) throws Exception\n+    {\n+        StreamSource source = new StreamSource(new StringReader(\"<foo><bar>\" + xml + \"<\/bar><\/foo>\"));\n+        StreamResult result = new StreamResult(new StringWriter());\n+\n+        Transformer tform = TransformerFactory.newInstance().newTransformer();\n+        tform.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+        tform.transform(source, result);\n+\n+        String xml1 = result.getWriter().toString();\n+\n+        Document document = DocumentBuilderFactory.newInstance()\n+            .newDocumentBuilder()\n+            .parse(new InputSource(new StringReader(xml1)));\n+\n+        String resultData = document.getElementsByTagName(\"bar\")\n+            .item(0)\n+            .getTextContent();\n+\n+        Assert.assertEquals(resultData, expected);\n+    }\n+\n@@ -73,0 +131,1 @@\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/OutputPropertiesTest.java","additions":60,"deletions":1,"binary":false,"changes":61,"status":"modified"}]}