{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -628,22 +628,1 @@\n-Dependencies::DepType Dependencies::validate_dependencies(CompileTask* task, bool counter_changed, char** failure_detail) {\n-  \/\/ First, check non-klass dependencies as we might return early and\n-  \/\/ not check klass dependencies if the system dictionary\n-  \/\/ modification counter hasn't changed (see below).\n-  for (Dependencies::DepStream deps(this); deps.next(); ) {\n-    if (deps.is_klass_type())  continue;  \/\/ skip klass dependencies\n-    Klass* witness = deps.check_dependency();\n-    if (witness != NULL) {\n-      return deps.type();\n-    }\n-  }\n-\n-  \/\/ Klass dependencies must be checked when the system dictionary\n-  \/\/ changes.  If logging is enabled all violated dependences will be\n-  \/\/ recorded in the log.  In debug mode check dependencies even if\n-  \/\/ the system dictionary hasn't changed to verify that no invalid\n-  \/\/ dependencies were inserted.  Any violated dependences in this\n-  \/\/ case are dumped to the tty.\n-  if (!counter_changed && !trueInDebug) {\n-    return end_marker;\n-  }\n-\n+Dependencies::DepType Dependencies::validate_dependencies(CompileTask* task, char** failure_detail) {\n@@ -653,1 +632,0 @@\n-    if (!deps.is_klass_type())  continue;  \/\/ skip non-klass dependencies\n@@ -668,6 +646,1 @@\n-      if (!counter_changed) {\n-        \/\/ Dependence failed but counter didn't change.  Log a message\n-        \/\/ describing what failed and allow the assert at the end to\n-        \/\/ trigger.\n-        deps.print_dependency(witness);\n-      } else if (xtty == NULL) {\n+      if (xtty == NULL) {\n@@ -682,9 +655,0 @@\n-  if (klass_violations != 0) {\n-#ifdef ASSERT\n-    if (task != NULL && !counter_changed && !PrintCompilation) {\n-      \/\/ Print out the compile task that failed\n-      task->print_tty();\n-    }\n-#endif\n-    assert(counter_changed, \"failed dependencies, but counter didn't change\");\n-  }\n","filename":"src\/hotspot\/share\/code\/dependencies.cpp","additions":3,"deletions":39,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2167,0 +2167,1 @@\n+      MutexLockerEx ml(SafepointSynchronize::is_at_safepoint() ? NULL : mdo->extra_data_lock());\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -761,1 +761,1 @@\n-                                (getManifestFromReference());\n+                                (getManifestFromReference(), jv.manifestName);\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarFile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -21,1 +21,1 @@\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 9406+5 USA\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n@@ -62,1 +62,1 @@\n-    public synchronized void close() throws IOException {\n+    public void close() throws IOException {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DTLSInputRecord.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}