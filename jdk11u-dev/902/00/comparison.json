{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n@@ -40,1 +42,0 @@\n-    private static final String LOCAL_HOST = \"127.0.0.1\";\n@@ -46,3 +47,3 @@\n-\n-        try (ServerSocket ss = new ServerSocket(0);\n-                Socket s = new Socket(LOCAL_HOST, ss.getLocalPort());\n+        var loopback = InetAddress.getLoopbackAddress();\n+        try (ServerSocket ss = boundServer(loopback);\n+                Socket s = new Socket(loopback, ss.getLocalPort());\n@@ -113,0 +114,7 @@\n+\n+    private static ServerSocket boundServer(InetAddress address) throws IOException {\n+        var socketAddress = new InetSocketAddress(address, 0);\n+        var server = new ServerSocket();\n+        server.bind(socketAddress);\n+        return server;\n+    }\n","filename":"test\/jdk\/java\/net\/SocketOption\/TcpKeepAliveTest.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @library \/test\/lib\n@@ -34,0 +35,2 @@\n+import jdk.test.lib.net.URIBuilder;\n+\n@@ -35,0 +38,2 @@\n+    static volatile boolean successfulHeaderCheck = false;\n+    static final String MARKER = \"A-test-name\";\n@@ -51,1 +56,2 @@\n-            try {\n+            boolean foundMarker = false;\n+            while (!foundMarker) {\n@@ -53,12 +59,30 @@\n-                s = srv.accept ();\n-                is = s.getInputStream ();\n-                BufferedReader r = new BufferedReader(new InputStreamReader(is));\n-                os = s.getOutputStream ();\n-                while ((x=r.readLine()) != null) {\n-                    String header = \"If-Modified-Since: \";\n-                    if (x.startsWith(header)) {\n-                        if (x.charAt(header.length()) == '?') {\n-                            s.close ();\n-                            srv.close (); \/\/ or else the HTTPURLConnection will retry\n-                            throw new RuntimeException\n-                                    (\"Invalid HTTP date specification\");\n+                try {\n+                    s = srv.accept();\n+                    System.out.println(\"Server: accepting connection from: \" + s);\n+                    is = s.getInputStream ();\n+                } catch (IOException io) {\n+                    System.err.println(\"Server: Failed to accept connection: \" + io);\n+                    io.printStackTrace();\n+                    try { srv.close(); } catch (IOException ioc) { }\n+                    break;\n+                }\n+                try {\n+                    BufferedReader r = new BufferedReader(new InputStreamReader(is));\n+                    os = s.getOutputStream ();\n+                    boolean foundHeader;\n+                    while ((x=r.readLine()) != null) {\n+                        String testname = MARKER + \": \";\n+                        String header = \"If-Modified-Since: \";\n+                        if (x.startsWith(header)) {\n+                            foundHeader = true;\n+                            System.out.println(\"Server: found header: \" + x);\n+                            if (x.charAt(header.length()) == '?') {\n+                                s.close ();\n+                                srv.close (); \/\/ or else the HTTPURLConnection will retry\n+                                throw new RuntimeException\n+                                        (\"Invalid HTTP date specification\");\n+                            }\n+                            if (foundMarker) break;\n+                        } else if (x.startsWith(testname)) {\n+                           foundMarker = true;\n+                           System.out.println(\"Server: found marker: \" + x);\n@@ -66,1 +90,0 @@\n-                        break;\n@@ -68,4 +91,8 @@\n-                }\n-                s.close ();\n-                srv.close (); \/\/ or else the HTTPURLConnection will retry\n-            } catch (IOException e) {}\n+                    successfulHeaderCheck = true;\n+                    s.close ();\n+                    \/\/ only close server if connected from this test.\n+                    if (foundMarker) {\n+                        srv.close (); \/\/ or else the HTTPURLConnection will retry\n+                    }\n+                } catch (IOException e) {}\n+            }\n@@ -75,1 +102,1 @@\n-    public static void main (String[] args) {\n+    public static void main(String[] args) throws Exception {\n@@ -79,1 +106,2 @@\n-            ServerSocket serversocket = new ServerSocket (0);\n+            ServerSocket serversocket = new ServerSocket();\n+            serversocket.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));\n@@ -84,2 +112,8 @@\n-            URL url = new URL (\"http:\/\/localhost:\"+port+\"\/index.html\");\n-            URLConnection urlc = url.openConnection ();\n+            URL url = URIBuilder.newBuilder()\n+                    .scheme(\"http\")\n+                    .loopback()\n+                    .port(port)\n+                    .path(\"\/index.html\")\n+                    .toURLUnchecked();\n+            URLConnection urlc = url.openConnection(Proxy.NO_PROXY);\n+            urlc.setRequestProperty(MARKER, \"SetIfModifiedSince\");\n@@ -88,3 +122,10 @@\n-            int i=0, c;\n-            Thread.sleep (5000);\n-        } catch (Exception e) {\n+            int i = 0, c;\n+            Thread.sleep(5000);\n+            if (!successfulHeaderCheck) {\n+                throw new RuntimeException(\"Header check was unsuccessful\");\n+            }\n+        } catch (SocketException ce) {\n+            if (!successfulHeaderCheck) {\n+                throw ce;\n+            }\n+            System.out.println(\"ConnectionException expected on successful check of If-modified-since header\");\n","filename":"test\/jdk\/java\/net\/URLConnection\/SetIfModifiedSince.java","additions":67,"deletions":26,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/test\/lib\n@@ -31,0 +32,2 @@\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n@@ -34,0 +37,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -37,2 +41,8 @@\n-        ServerSocket ss = new ServerSocket(0);\n-        URL myURL = new URL(\"http:\/\/localhost:\" + ss.getLocalPort());\n+        ServerSocket ss = new ServerSocket();\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        ss.bind(new InetSocketAddress(loopback, 0));\n+        URL myURL = URIBuilder.newBuilder()\n+            .scheme(\"http\")\n+            .loopback()\n+            .port(ss.getLocalPort())\n+            .toURL();\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/GetProxyPort.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/test\/lib\n@@ -32,0 +33,2 @@\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n@@ -35,0 +38,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -40,1 +44,3 @@\n-        ServerSocket ss = new ServerSocket(0);\n+        ServerSocket ss = new ServerSocket();\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        ss.bind(new InetSocketAddress(loopback, 0));\n@@ -42,1 +48,5 @@\n-        URL url = new URL(\"http:\/\/localhost:\" + ss.getLocalPort());\n+        URL url = URIBuilder.newBuilder()\n+            .scheme(\"http\")\n+            .loopback()\n+            .port(ss.getLocalPort())\n+            .toURL();\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/ImplicitFileName.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+ * @library \/test\/lib\n@@ -33,0 +34,2 @@\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n@@ -38,0 +41,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -43,1 +47,3 @@\n-        ServerSocket ss = new ServerSocket(0);\n+        ServerSocket ss = new ServerSocket();\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        ss.bind(new InetSocketAddress(loopback, 0));\n@@ -45,2 +51,1 @@\n-        URL url1 = new URL(\"http:\/\/localhost:\" + ss.getLocalPort());\n-        HttpClient c1 = HttpClient.New(url1);\n+        try (ServerSocket toclose = ss) {\n@@ -48,3 +53,5 @@\n-        Method available = HttpClient.class.\n-                getDeclaredMethod(\"available\", null);\n-        available.setAccessible(true);\n+            URL url1 = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(ss.getLocalPort())\n+                .toURL();\n@@ -52,8 +59,1 @@\n-        c1.setReadTimeout(readTimeout);\n-        boolean a = (boolean) available.invoke(c1);\n-        if (!a) {\n-            throw new RuntimeException(\"connection should be available\");\n-        }\n-        if (c1.getReadTimeout() != readTimeout) {\n-            throw new RuntimeException(\"read timeout has been altered\");\n-        }\n+            HttpClient c1 = HttpClient.New(url1);\n@@ -61,1 +61,3 @@\n-        c1.closeServer();\n+            Method available = HttpClient.class.\n+                    getDeclaredMethod(\"available\", null);\n+            available.setAccessible(true);\n@@ -63,4 +65,8 @@\n-        a = (boolean) available.invoke(c1);\n-        if (a) {\n-            throw new RuntimeException(\"connection shouldn't be available\");\n-        }\n+            c1.setReadTimeout(readTimeout);\n+            boolean a = (boolean) available.invoke(c1);\n+            if (!a) {\n+                throw new RuntimeException(\"connection should be available\");\n+            }\n+            if (c1.getReadTimeout() != readTimeout) {\n+                throw new RuntimeException(\"read timeout has been altered\");\n+            }\n@@ -68,1 +74,7 @@\n-        ss.close();\n+            c1.closeServer();\n+\n+            a = (boolean) available.invoke(c1);\n+            if (a) {\n+                throw new RuntimeException(\"connection shouldn't be available\");\n+            }\n+        }\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/IsAvailable.java","additions":33,"deletions":21,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+ * @library \/test\/lib\n@@ -34,0 +35,2 @@\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n@@ -38,0 +41,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -43,1 +47,3 @@\n-        ServerSocket ss = new ServerSocket(0);\n+        ServerSocket ss = new ServerSocket();\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        ss.bind(new InetSocketAddress(loopback, 0));\n@@ -45,7 +51,6 @@\n-        SecurityManager security = System.getSecurityManager();\n-        if (security == null) {\n-            security = new SecurityManager();\n-            System.setSecurityManager(security);\n-        }\n-\n-        URL url1 = new URL(\"http:\/\/localhost:\" + ss.getLocalPort());\n+        try (ServerSocket toClose = ss) {\n+            SecurityManager security = System.getSecurityManager();\n+            if (security == null) {\n+                security = new SecurityManager();\n+                System.setSecurityManager(security);\n+            }\n@@ -53,1 +58,5 @@\n-        HttpClient c1 = HttpClient.New(url1);\n+            URL url1 = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(ss.getLocalPort())\n+                .toURL();\n@@ -55,1 +64,1 @@\n-        boolean keepAlive = c1.isKeepingAlive();\n+            HttpClient c1 = HttpClient.New(url1);\n@@ -57,1 +66,2 @@\n-        ss.close();\n+            boolean keepAlive = c1.isKeepingAlive();\n+        }\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/IsKeepingAlive.java","additions":22,"deletions":12,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/test\/lib\n@@ -35,0 +36,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -40,1 +42,3 @@\n-        ServerSocket ss = new ServerSocket(0);\n+        ServerSocket ss = new ServerSocket();\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        ss.bind(new InetSocketAddress(loopback, 0));\n@@ -42,2 +46,6 @@\n-        URL myURL = new URL(\"http:\/\/localhost:\" + ss.getLocalPort());\n-        HttpClient httpC = new HttpClient(myURL, null, -1);\n+        try (ServerSocket toClose = ss) {\n+            URL myURL = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(ss.getLocalPort())\n+                .toURL();\n@@ -45,1 +53,2 @@\n-        ss.close();\n+            HttpClient httpC = new HttpClient(myURL, null, -1);\n+        }\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/OpenServer.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -33,0 +34,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -78,1 +80,4 @@\n-        ServerSocket serversocket = new ServerSocket (0);\n+        final InetAddress loopback = InetAddress.getLoopbackAddress();\n+        final ServerSocket serversocket = new ServerSocket();\n+        serversocket.bind(new InetSocketAddress(loopback, 0));\n+\n@@ -83,2 +88,6 @@\n-            URL url = new URL (\"http:\/\/localhost:\"+port);\n-            HttpURLConnection urlc = (HttpURLConnection)url.openConnection ();\n+            URL url = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(port)\n+                .toURL();\n+            HttpURLConnection urlc = (HttpURLConnection)url.openConnection(Proxy.NO_PROXY);\n@@ -101,1 +110,1 @@\n-            if (serversocket != null) serversocket.close();\n+            serversocket.close();\n","filename":"test\/jdk\/sun\/net\/www\/http\/KeepAliveStream\/KeepAliveStreamCloseWithWrongContentLength.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-            HttpURLConnection uc = (HttpURLConnection)url.openConnection();\n+            HttpURLConnection uc = (HttpURLConnection)url.openConnection(Proxy.NO_PROXY);\n@@ -90,1 +90,12 @@\n-        httpServer = com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0), 0);\n+        InetAddress address = InetAddress.getLocalHost();\n+        if (!InetAddress.getByName(address.getHostName()).equals(address)) {\n+            \/\/ if this happens then we should possibly change the client\n+            \/\/ side to use the address literal in its URL instead of\n+            \/\/ the host name.\n+            throw new IOException(address.getHostName()\n+                                  + \" resolves to \"\n+                                  + InetAddress.getByName(address.getHostName())\n+                                  + \" not to \"\n+                                  + address + \": check host configuration.\");\n+        }\n+        httpServer = com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(address, 0), 0);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/StreamingOutputStream.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,13 @@\n-        httpServer = com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0), 0);\n+        InetAddress address = InetAddress.getLocalHost();\n+        if (!InetAddress.getByName(address.getHostName()).equals(address)) {\n+            \/\/ if this happens then we should possibly change the client\n+            \/\/ side to use the address literal in its URL instead of\n+            \/\/ the host name.\n+            throw new IOException(address.getHostName()\n+                                  + \" resolves to \"\n+                                  + InetAddress.getByName(address.getHostName())\n+                                  + \" not to \"\n+                                  + address + \": check host configuration.\");\n+        }\n+\n+        httpServer = com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(address, 0), 0);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/UserAuth.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,13 @@\n-        httpServer = com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0), 0);\n+        InetAddress address = InetAddress.getLocalHost();\n+        if (!InetAddress.getByName(address.getHostName()).equals(address)) {\n+            \/\/ if this happens then we should possibly change the client\n+            \/\/ side to use the address literal in its URL instead of\n+            \/\/ the host name.\n+            throw new IOException(address.getHostName()\n+                                  + \" resolves to \"\n+                                  + InetAddress.getByName(address.getHostName())\n+                                  + \" not to \"\n+                                  + address + \": check host configuration.\");\n+        }\n+\n+        httpServer = com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(address, 0), 0);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/UserCookie.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"}]}