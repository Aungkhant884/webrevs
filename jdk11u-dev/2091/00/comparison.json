{"files":[{"patch":"@@ -48,0 +48,1 @@\n+import javax.print.attribute.standard.Sides;\n@@ -685,0 +686,18 @@\n+    private int getSides() {\n+        return (this.sidesAttr == null) ? -1 : this.sidesAttr.getValue();\n+    }\n+\n+    private void setSides(int sides) {\n+        if (attributes == null) {\n+            return;\n+        }\n+\n+        final Sides[] sidesTable = new Sides[] {Sides.ONE_SIDED, Sides.TWO_SIDED_LONG_EDGE, Sides.TWO_SIDED_SHORT_EDGE};\n+\n+        if (sides >= 0 && sides < sidesTable.length) {\n+            Sides s = sidesTable[sides];\n+            attributes.add(s);\n+            this.sidesAttr = s;\n+        }\n+    }\n+\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPrinterJob.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -40,0 +40,4 @@\n+#define ONE_SIDED 0\n+#define TWO_SIDED_LONG_EDGE 1\n+#define TWO_SIDED_SHORT_EDGE 2\n+\n@@ -354,0 +358,18 @@\n+static jint duplexModeToSides(PMDuplexMode duplexMode) {\n+    switch(duplexMode) {\n+        case kPMDuplexNone: return ONE_SIDED;\n+        case kPMDuplexTumble: return TWO_SIDED_SHORT_EDGE;\n+        case kPMDuplexNoTumble: return TWO_SIDED_LONG_EDGE;\n+        default: return -1;\n+    }\n+}\n+\n+static PMDuplexMode sidesToDuplexMode(jint sides) {\n+    switch(sides) {\n+        case ONE_SIDED: return kPMDuplexNone;\n+        case TWO_SIDED_SHORT_EDGE: return kPMDuplexTumble;\n+        case TWO_SIDED_LONG_EDGE: return kPMDuplexNoTumble;\n+        default: return kPMDuplexNone;\n+    }\n+}\n+\n@@ -363,0 +385,1 @@\n+    DECLARE_METHOD(jm_setSides, sjc_CPrinterJob, \"setSides\", \"(I)V\");\n@@ -423,0 +446,6 @@\n+        PMDuplexMode duplexSetting;\n+        if (PMGetDuplex(src.PMPrintSettings, &duplexSetting) == noErr) {\n+            jint sides = duplexModeToSides(duplexSetting);\n+            (*env)->CallVoidMethod(env, dstPrinterJob, jm_setSides, sides); \/\/ AWT_THREADING Safe (known object)\n+            CHECK_EXCEPTION();\n+        }\n@@ -441,0 +470,2 @@\n+    DECLARE_METHOD(jm_getSides, sjc_CPrinterJob, \"getSides\", \"()I\");\n+\n@@ -499,0 +530,11 @@\n+\n+    jint sides = (*env)->CallIntMethod(env, srcPrinterJob, jm_getSides);\n+    CHECK_EXCEPTION();\n+\n+    if (sides >= 0) {\n+        PMDuplexMode duplexMode = sidesToDuplexMode(sides);\n+        PMPrintSettings printSettings = dst.PMPrintSettings;\n+        if (PMSetDuplex(printSettings, duplexMode) == noErr) {\n+            [dst updateFromPMPrintSettings];\n+        }\n+    }\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CPrinterJob.m","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -1080,0 +1080,2 @@\n+        this.attributes = attributes;\n+\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/RasterPrinterJob.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,272 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug JDK-8311033\n+ * @summary [macos] PrinterJob does not take into account Sides attribute\n+ * @run main\/manual SidesAttributeTest\n+ *\/\n+\n+import javax.print.PrintService;\n+import javax.print.attribute.Attribute;\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.PrintRequestAttributeSet;\n+import javax.print.attribute.standard.Sides;\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class SidesAttributeTest {\n+\n+    private static final long TIMEOUT = 10 * 60_000;\n+    private static volatile boolean testPassed = true;\n+    private static volatile boolean testFinished = false;\n+    private static volatile boolean timeout = false;\n+\n+    private static volatile int testCount;\n+    private static volatile int testTotalCount;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        SwingUtilities.invokeLater(() -> {\n+\n+            Set<Attribute> supportedSides = getSupportedSidesAttributes();\n+            if (supportedSides.size() > 1) {\n+                testTotalCount = supportedSides.size();\n+                testPrint(Sides.ONE_SIDED, supportedSides);\n+                testPrint(Sides.DUPLEX, supportedSides);\n+                testPrint(Sides.TUMBLE, supportedSides);\n+            }\n+            testFinished = true;\n+        });\n+\n+        long time = System.currentTimeMillis() + TIMEOUT;\n+\n+        while (System.currentTimeMillis() < time) {\n+            if (!testPassed || testFinished) {\n+                break;\n+            }\n+            Thread.sleep(500);\n+        }\n+\n+        timeout = true;\n+\n+        closeDialogs();\n+\n+        if (!testPassed) {\n+            throw new Exception(\"Test failed!\");\n+        }\n+\n+        if (testCount != testTotalCount) {\n+            throw new Exception(\n+                    \"Timeout: \" + testCount + \" tests passed out from \" + testTotalCount);\n+        }\n+    }\n+\n+    private static void print(Sides sides) throws PrinterException {\n+        PrintRequestAttributeSet attr = new HashPrintRequestAttributeSet();\n+        attr.add(sides);\n+\n+        for (Attribute attribute : attr.toArray()) {\n+            System.out.printf(\"Used print request attribute: %s%n\", attribute);\n+        }\n+\n+        PrinterJob job = PrinterJob.getPrinterJob();\n+        job.setPrintable(new SidesAttributePrintable(sides));\n+\n+        job.print(attr);\n+    }\n+\n+    private static class SidesAttributePrintable implements Printable {\n+\n+        private final Sides sidesAttr;\n+\n+        public SidesAttributePrintable(Sides sidesAttr) {\n+            this.sidesAttr = sidesAttr;\n+        }\n+\n+        @Override\n+        public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {\n+\n+            if (pageIndex >= 2) {\n+                return NO_SUCH_PAGE;\n+            }\n+\n+            int x = (int) (pageFormat.getImageableX() + pageFormat.getImageableWidth() \/ 10);\n+            int y = (int) (pageFormat.getImageableY() + pageFormat.getImageableHeight() \/ 5);\n+\n+            Graphics2D g = (Graphics2D) graphics;\n+            String text = getPageText(sidesAttr, pageIndex + 1);\n+            g.drawString(text, x, y);\n+            return PAGE_EXISTS;\n+        }\n+    }\n+\n+    private static String getPageText(Sides sides, int page) {\n+        return String.format(\"Page: %d - %s\", page, getSidesText(sides));\n+    }\n+\n+    private static String getSidesText(Sides sides) {\n+        if (Sides.ONE_SIDED.equals(sides)) {\n+            return \"ONE_SIDED\";\n+        } else if (Sides.TWO_SIDED_SHORT_EDGE.equals(sides)) {\n+            return \"TWO_SIDED_SHORT_EDGE (TUMBLE)\";\n+        } else if (Sides.TWO_SIDED_LONG_EDGE.equals(sides)) {\n+            return \"TWO_SIDED_LONG_EDGE (DUPLEX)\";\n+        }\n+        throw new RuntimeException(\"Unknown sides attribute: \" + sides);\n+    }\n+\n+    private static String getSidesDescription(Sides sides) {\n+        if (Sides.ONE_SIDED.equals(sides)) {\n+            return \"a one-sided document\";\n+        } else if (Sides.TWO_SIDED_SHORT_EDGE.equals(sides)) {\n+            return \"double-sided document along the short edge of the paper\";\n+        } else if (Sides.TWO_SIDED_LONG_EDGE.equals(sides)) {\n+            return \"double-sided document along the long edge of the paper\";\n+        }\n+        throw new RuntimeException(\"Unknown sides attribute: \" + sides);\n+    }\n+\n+    private static Set<Attribute> getSupportedSidesAttributes() {\n+        Set<Attribute> supportedSides = new HashSet<>();\n+\n+        PrinterJob printerJob = PrinterJob.getPrinterJob();\n+        PrintService service = printerJob.getPrintService();\n+\n+        Object obj = service.getSupportedAttributeValues(Sides.class, null, null);\n+        if (obj instanceof Attribute[]) {\n+            Attribute[] attr = (Attribute[]) obj;\n+            Collections.addAll(supportedSides, attr);\n+        }\n+\n+        return supportedSides;\n+    }\n+\n+    private static void pass() {\n+        testCount++;\n+    }\n+\n+    private static void fail(Sides sides) {\n+        System.out.printf(\"Failed test: %s%n\", getSidesText(sides));\n+        testPassed = false;\n+    }\n+\n+    private static void runPrint(Sides sides) {\n+        try {\n+            print(sides);\n+        } catch (PrinterException e) {\n+            fail(sides);\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private static void testPrint(Sides sides, Set<Attribute> supportedSides) {\n+\n+        if (!supportedSides.contains(sides) || !testPassed || timeout) {\n+            return;\n+        }\n+\n+        String[] instructions = {\n+                \"Up to \" + testTotalCount + \" tests will run and it will test all the cases\",\n+                \"supported by the printer.\",\n+                \"\",\n+                \"The test is \" + (testCount + 1) + \" from \" + testTotalCount + \".\",\n+                \"\",\n+                \"On-screen inspection is not possible for this printing-specific\",\n+                \"test therefore its only output is two printed pages (one or two sided).\",\n+                \"To be able to run this test it is required to have a default\",\n+                \"printer configured in your user environment.\",\n+                \"\",\n+                \"Visual inspection of the printed pages is needed.\",\n+                \"A passing test will print 2 pages:\",\n+                \"  - the first page with the text: \" + getPageText(sides, 1),\n+                \"  - the second page with the text: \" + getPageText(sides, 2),\n+                \"\",\n+                \"The test fails if the pages are not printed according to the tested\",\n+                getSidesText(sides) + \" attribute where \" + getSidesDescription(sides),\n+                \"needs to be printed.\",\n+                \"\",\n+        };\n+\n+        String title = String.format(\"Print %s sides test: %d from %d\",\n+                getSidesText(sides), testCount + 1, testTotalCount);\n+        final JDialog dialog = new JDialog((Frame) null, title, Dialog.ModalityType.DOCUMENT_MODAL);\n+        JTextArea textArea = new JTextArea(String.join(\"\\n\", instructions));\n+        textArea.setEditable(false);\n+        final JButton testButton = new JButton(\"Start Test\");\n+        final JButton passButton = new JButton(\"PASS\");\n+        passButton.setEnabled(false);\n+        passButton.addActionListener((e) -> {\n+            pass();\n+            dialog.dispose();\n+        });\n+        final JButton failButton = new JButton(\"FAIL\");\n+        failButton.setEnabled(false);\n+        failButton.addActionListener((e) -> {\n+            fail(sides);\n+            dialog.dispose();\n+        });\n+        testButton.addActionListener((e) -> {\n+            testButton.setEnabled(false);\n+            runPrint(sides);\n+            passButton.setEnabled(true);\n+            failButton.setEnabled(true);\n+        });\n+\n+        JPanel mainPanel = new JPanel(new BorderLayout());\n+        mainPanel.add(textArea, BorderLayout.CENTER);\n+        JPanel buttonPanel = new JPanel(new FlowLayout());\n+        buttonPanel.add(testButton);\n+        buttonPanel.add(passButton);\n+        buttonPanel.add(failButton);\n+        mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n+        dialog.add(mainPanel);\n+        dialog.pack();\n+        dialog.setVisible(true);\n+        dialog.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                System.out.println(\"Dialog closing\");\n+                fail(sides);\n+            }\n+        });\n+    }\n+\n+    private static void closeDialogs() {\n+        for (Window w : Dialog.getWindows()) {\n+            w.dispose();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/print\/attribute\/SidesAttributeTest.java","additions":272,"deletions":0,"binary":false,"changes":272,"status":"added"}]}