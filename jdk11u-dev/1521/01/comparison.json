{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,9 +23,0 @@\n-import com.sun.org.apache.xml.internal.serializer.utils.MsgKey;\n-import com.sun.org.apache.xml.internal.serializer.utils.Utils;\n-import com.sun.org.apache.xml.internal.serializer.utils.WrappedRuntimeException;\n-import java.io.BufferedInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.util.Enumeration;\n@@ -71,2 +62,2 @@\n- * This non-standard property key is used to set a value of \"yes\" if the href values for HTML serialization should\n- *  use %xx escaping.\n+ * This non-standard property key is used to set a value of \"yes\" if the href values\n+ * for HTML serialization should use %xx escaping.\n@@ -75,2 +66,2 @@\n- * This non-standard property key is used to set a value of \"yes\" if the META tag should be omitted where it would\n- *  otherwise be supplied.\n+ * This non-standard property key is used to set a value of \"yes\" if the META tag\n+ * should be omitted where it would otherwise be supplied.\n@@ -82,1 +73,1 @@\n- * @LastModified: Oct 2017\n+ * @LastModified: Mar 2019\n@@ -150,2 +141,3 @@\n-     * This non-standard property key is used to set a value of \"yes\" if the href values for HTML serialization should\n-     *  use %xx escaping. *\/\n+     * This non-standard property key is used to set a value of \"yes\" if the href\n+     * values for HTML serialization should use %xx escaping.\n+     *\/\n@@ -156,2 +148,2 @@\n-     * This non-standard property key is used to set a value of \"yes\" if the META tag should be omitted where it would\n-     *  otherwise be supplied.\n+     * This non-standard property key is used to set a value of \"yes\" if the META\n+     * tag should be omitted where it would otherwise be supplied.\n@@ -177,4 +169,17 @@\n-     * This non-standard, Oracle-impl only property key is used as if OutputKeys.STANDALONE is specified but\n-     * without writing it out in the declaration; It can be used to reverse the change by Xalan patch 1495.\n-     * Since Xalan patch 1495 can cause incompatible behavior, this property is add for application to neutralize\n-     * the effect of Xalan patch 1495\n+     * This non-standard, Oracle-impl only property key is used as if\n+     * OutputKeys.STANDALONE is specified but without writing it out in the declaration;\n+     * It can be used to reverse the change by Xalan patch 1495.\n+     * Since Xalan patch 1495 can cause incompatible behavior, this property is\n+     * added for application to neutralize the effect of Xalan patch 1495\n+     *\/\n+    \/**\n+     * <p>Is Standalone<\/p>\n+     *\n+     * <ul>\n+     *   <li>\n+     *     <code>yes<\/code> to indicate the output is intended to be used as standalone\n+     *   <\/li>\n+     *   <li>\n+     *     <code>no<\/code> has no effect.\n+     *   <\/li>\n+     * <\/ul>\n@@ -182,12 +187,0 @@\n-        \/**\n-         * <p>Is Standalone<\/p>\n-         *\n-         * <ul>\n-         *   <li>\n-         *     <code>yes<\/code> to indicate the output is intended to be used as standalone\n-         *   <\/li>\n-         *   <li>\n-         *     <code>no<\/code> has no effect.\n-         *   <\/li>\n-         * <\/ul>\n-         *\/\n@@ -200,18 +193,97 @@\n-    private static final String S_XSLT_PREFIX = \"xslt.output.\";\n-    private static final int S_XSLT_PREFIX_LEN = S_XSLT_PREFIX.length();\n-    private static final String S_XALAN_PREFIX = \"org.apache.xslt.\";\n-    private static final int S_XALAN_PREFIX_LEN = S_XALAN_PREFIX.length();\n-\n-    \/** Synchronization object for lazy initialization of the above tables. *\/\n-    private static final Object m_synch_object = new Object();\n-\n-    \/** the directory in which the various method property files are located *\/\n-    private static final String PROP_DIR = \"com\/sun\/org\/apache\/xml\/internal\/serializer\/\";\n-    \/** property file for default XML properties *\/\n-    private static final String PROP_FILE_XML = \"output_xml.properties\";\n-    \/** property file for default TEXT properties *\/\n-    private static final String PROP_FILE_TEXT = \"output_text.properties\";\n-    \/** property file for default HTML properties *\/\n-    private static final String PROP_FILE_HTML = \"output_html.properties\";\n-    \/** property file for default UNKNOWN (Either XML or HTML, to be determined later) properties *\/\n-    private static final String PROP_FILE_UNKNOWN = \"output_unknown.properties\";\n+    \/*\n+     * XSLT properties do not need namespace qualification.\n+     *\n+     * Xalan-specific output properties can be overridden in the stylesheet\n+     * assigning a xalan namespace.  For example:\n+     * <xsl:stylesheet version=\"1.0\"\n+     *          xmlns:xsl=\"http:\/\/www.w3.org\/1999\/XSL\/Transform\"\n+     *          xmlns:xalan=\"http:\/\/xml.apache.org\/xalan\">\n+     *  <xsl:output method=\"html\" encoding=\"UTF-8\"\n+     *              xalan:content-handler=\"MyContentHandler\"\/>\n+     *  ...\n+     *\/\n+    private static final String[] PROP_XML = {\n+        \"method\",\n+        \"version\",\n+        \"encoding\",\n+        \"indent\",\n+        \"omit-xml-declaration\",\n+        \"standalone\",\n+        \"media-type\",\n+        \"{http:\/\/xml.apache.org\/xalan}indent-amount\",\n+        \"{http:\/\/xml.apache.org\/xalan}content-handler\",\n+        \"{http:\/\/xml.apache.org\/xalan}entities\"\n+    };\n+\n+    private static final String[] PROP_XML_VALUE = {\n+        \"xml\",\n+        \"1.0\",\n+        \"UTF-8\",\n+        \"no\",\n+        \"no\",\n+        \"no\",\n+        \"text\/xml\",\n+        \"0\",\n+        \"com.sun.org.apache.xml.internal.serializer.ToXMLStream\",\n+        \"com\/sun\/org\/apache\/xml\/internal\/serializer\/XMLEntities\"\n+    };\n+\n+    private static final String[] PROP_HTML = {\n+        \"method\",\n+        \"indent\",\n+        \"media-type\",\n+        \"version\",\n+        \"{http:\/\/xml.apache.org\/xalan}indent-amount\",\n+        \"{http:\/\/xml.apache.org\/xalan}content-handler\",\n+        \"{http:\/\/xml.apache.org\/xalan}entities\",\n+        \"{http:\/\/xml.apache.org\/xalan}use-url-escaping\",\n+        \"{http:\/\/xml.apache.org\/xalan}omit-meta-tag\"\n+    };\n+\n+    private static final String[] PROP_HTML_VALUE = {\n+        \"html\",\n+        \"yes\",\n+        \"text\/html\",\n+        \"4.0\",\n+        \"4\",\n+        \"com.sun.org.apache.xml.internal.serializer.ToHTMLStream\",\n+        \"com\/sun\/org\/apache\/xml\/internal\/serializer\/HTMLEntities\",\n+        \"yes\",\n+        \"no\"\n+    };\n+\n+    private static final String[] PROP_TEXT = {\n+        \"method\",\n+        \"media-type\",\n+        \"{http:\/\/xml.apache.org\/xalan}content-handler\"\n+    };\n+\n+    private static final String[] PROP_TEXT_VALUE = {\n+        \"text\",\n+        \"text\/plain\",\n+        \"com.sun.org.apache.xml.internal.serializer.ToTextStream\"\n+    };\n+\n+    private static final String[] PROP_UNKNOWN = {\n+        \"method\",\n+        \"version\",\n+        \"encoding\",\n+        \"indent\",\n+        \"omit-xml-declaration\",\n+        \"standalone\",\n+        \"media-type\",\n+        \"{http:\/\/xml.apache.org\/xalan}indent-amount\",\n+        \"{http:\/\/xml.apache.org\/xalan}content-handler\"\n+    };\n+\n+    private static final String[] PROP_UNKNOWN_VALUE = {\n+        \"xml\",\n+        \"1.0\",\n+        \"UTF-8\",\n+        \"no\",\n+        \"no\",\n+        \"no\",\n+        \"text\/xml\",\n+        \"0\",\n+        \"com.sun.org.apache.xml.internal.serializer.ToUnknownStream\",\n+    };\n@@ -223,1 +295,1 @@\n-    \/** The default properties of all output files. *\/\n+    \/** The default properties for all other than html and text. *\/\n@@ -235,24 +307,0 @@\n-    private static final Class<?>\n-        ACCESS_CONTROLLER_CLASS = findAccessControllerClass();\n-\n-    private static Class<?> findAccessControllerClass() {\n-        try\n-        {\n-            \/\/ This Class was introduced in JDK 1.2. With the re-architecture of\n-            \/\/ security mechanism ( starting in JDK 1.2 ), we have option of\n-            \/\/ giving privileges to certain part of code using doPrivileged block.\n-            \/\/ In JDK1.1.X applications won't be having security manager and if\n-            \/\/ there is security manager ( in applets ), code need to be signed\n-            \/\/ and trusted for having access to resources.\n-\n-            return Class.forName(\"java.security.AccessController\");\n-        }\n-        catch (Exception e)\n-        {\n-            \/\/User may be using older JDK ( JDK <1.2 ). Allow him\/her to use it.\n-            \/\/ But don't try to use doPrivileged\n-        }\n-\n-        return null;\n-    }\n-\n@@ -260,7 +308,1 @@\n-     * Creates an empty OutputProperties with the property key\/value defaults specified by\n-     * a property file.  The method argument is used to construct a string of\n-     * the form output_[method].properties (for instance, output_html.properties).\n-     * The output_xml.properties file is always used as the base.\n-     *\n-     * <p>Anything other than 'text', 'xml', and 'html', will\n-     * use the output_xml.properties file.<\/p>\n+     * Returns a Properties based on the specified method. The default is xml.\n@@ -274,1 +316,0 @@\n-        String fileName = null;\n@@ -276,12 +317,0 @@\n-        \/\/ According to this article : Double-check locking does not work\n-        \/\/ http:\/\/www.javaworld.com\/javaworld\/jw-02-2001\/jw-0209-toolbox.html\n-        try\n-        {\n-            synchronized (m_synch_object)\n-            {\n-                if (null == m_xml_properties) \/\/ double check\n-                {\n-                    fileName = PROP_FILE_XML;\n-                    m_xml_properties = loadPropertiesFile(fileName, null);\n-                }\n-            }\n@@ -289,2 +318,7 @@\n-            if (method.equals(Method.XML))\n-            {\n+        if (null == m_xml_properties) {\n+            m_xml_properties = initProperties(PROP_XML, PROP_XML_VALUE, null);\n+        }\n+\n+\n+        switch (method) {\n+            case Method.XML:\n@@ -292,8 +326,5 @@\n-            }\n-            else if (method.equals(Method.HTML))\n-            {\n-                if (null == m_html_properties) \/\/ double check\n-                {\n-                    fileName = PROP_FILE_HTML;\n-                    m_html_properties =\n-                        loadPropertiesFile(fileName, m_xml_properties);\n+                break;\n+            case Method.HTML:\n+                if (null == m_html_properties) {\n+                    m_html_properties = initProperties(\n+                            PROP_HTML, PROP_HTML_VALUE, m_xml_properties);\n@@ -301,1 +332,0 @@\n-\n@@ -303,10 +333,7 @@\n-            }\n-            else if (method.equals(Method.TEXT))\n-            {\n-                if (null == m_text_properties) \/\/ double check\n-                {\n-                    fileName = PROP_FILE_TEXT;\n-                    m_text_properties =\n-                        loadPropertiesFile(fileName, m_xml_properties);\n-                    if (null\n-                        == m_text_properties.getProperty(OutputKeys.ENCODING))\n+                break;\n+            case Method.TEXT:\n+                if (null == m_text_properties) {\n+                    m_text_properties = initProperties(\n+                            PROP_TEXT, PROP_TEXT_VALUE, m_xml_properties);\n+\n+                    if (null == m_text_properties.getProperty(OutputKeys.ENCODING))\n@@ -315,3 +342,1 @@\n-                        m_text_properties.put(\n-                            OutputKeys.ENCODING,\n-                            mimeEncoding);\n+                        m_text_properties.put(OutputKeys.ENCODING, mimeEncoding);\n@@ -320,1 +345,0 @@\n-\n@@ -322,8 +346,5 @@\n-            }\n-            else if (method.equals(com.sun.org.apache.xml.internal.serializer.Method.UNKNOWN))\n-            {\n-                if (null == m_unknown_properties) \/\/ double check\n-                {\n-                    fileName = PROP_FILE_UNKNOWN;\n-                    m_unknown_properties =\n-                        loadPropertiesFile(fileName, m_xml_properties);\n+                break;\n+            case com.sun.org.apache.xml.internal.serializer.Method.UNKNOWN:\n+                if (null == m_unknown_properties) {\n+                    m_unknown_properties = initProperties(\n+                            PROP_UNKNOWN, PROP_UNKNOWN_VALUE, m_xml_properties);\n@@ -331,1 +352,0 @@\n-\n@@ -333,4 +353,2 @@\n-            }\n-            else\n-            {\n-                \/\/ TODO: Calculate res file from name.\n+                break;\n+            default:\n@@ -338,9 +356,1 @@\n-            }\n-        }\n-        catch (IOException ioe)\n-        {\n-            throw new WrappedRuntimeException(\n-                Utils.messages.createMessage(\n-                    MsgKey.ER_COULD_NOT_LOAD_METHOD_PROPERTY,\n-                    new Object[] { fileName, method }),\n-                ioe);\n+                break;\n@@ -348,0 +358,1 @@\n+\n@@ -354,7 +365,1 @@\n-     * Load the properties file from a resource stream.  If a\n-     * key name such as \"org.apache.xslt.xxx\", fix up the start of\n-     * string to be a curly namespace.  If a key name starts with\n-     * \"xslt.output.xxx\", clip off \"xslt.output.\".  If a key name *or* a\n-     * key value is discovered, check for \\u003a in the text, and\n-     * fix it up to be \":\", since earlier versions of the JDK do not\n-     * handle the escape sequence (at least in key names).\n+     * Initiates the properties\n@@ -362,1 +367,2 @@\n-     * @param resourceName non-null reference to resource name.\n+     * @param keys an array of keys\n+     * @param values values corresponding to the keys\n@@ -365,4 +371,1 @@\n-    static private Properties loadPropertiesFile(\n-        final String resourceName,\n-        Properties defaults)\n-        throws IOException\n+    static private Properties initProperties(String[] keys, String[] values, Properties defaults)\n@@ -370,5 +373,0 @@\n-\n-        \/\/ This static method should eventually be moved to a thread-specific class\n-        \/\/ so that we can cache the ContextClassLoader and bottleneck all properties file\n-        \/\/ loading throughout Xalan.\n-\n@@ -377,124 +375,4 @@\n-        InputStream is = null;\n-        BufferedInputStream bis = null;\n-\n-        try\n-        {\n-            if (ACCESS_CONTROLLER_CLASS != null)\n-            {\n-                is = AccessController.doPrivileged(new PrivilegedAction<InputStream>() {\n-                        public InputStream run()\n-                        {\n-                            return OutputPropertiesFactory.class\n-                                .getResourceAsStream(resourceName);\n-                        }\n-                    });\n-            }\n-            else\n-            {\n-                \/\/ User may be using older JDK ( JDK < 1.2 )\n-                is = OutputPropertiesFactory.class\n-                    .getResourceAsStream(resourceName);\n-            }\n-\n-            bis = new BufferedInputStream(is);\n-            props.load(bis);\n-        }\n-        catch (IOException ioe)\n-        {\n-            if (defaults == null)\n-            {\n-                throw ioe;\n-            }\n-            else\n-            {\n-                throw new WrappedRuntimeException(\n-                    Utils.messages.createMessage(\n-                        MsgKey.ER_COULD_NOT_LOAD_RESOURCE,\n-                        new Object[] { resourceName }),\n-                    ioe);\n-                \/\/\"Could not load '\"+resourceName+\"' (check CLASSPATH), now using just the defaults \", ioe);\n-            }\n-        }\n-        catch (SecurityException se)\n-        {\n-            \/\/ Repeat IOException handling for sandbox\/applet case -sc\n-            if (defaults == null)\n-            {\n-                throw se;\n-            }\n-            else\n-            {\n-                throw new WrappedRuntimeException(\n-                    Utils.messages.createMessage(\n-                        MsgKey.ER_COULD_NOT_LOAD_RESOURCE,\n-                        new Object[] { resourceName }),\n-                    se);\n-                \/\/\"Could not load '\"+resourceName+\"' (check CLASSPATH, applet security), now using just the defaults \", se);\n-            }\n-        }\n-        finally\n-        {\n-            if (bis != null)\n-            {\n-                bis.close();\n-            }\n-            if (is != null)\n-            {\n-                is.close();\n-            }\n-        }\n-\n-        \/\/ Note that we're working at the HashTable level here,\n-        \/\/ and not at the Properties level!  This is important\n-        \/\/ because we don't want to modify the default properties.\n-        \/\/ NB: If fixupPropertyString ends up changing the property\n-        \/\/ name or value, we need to remove the old key and re-add\n-        \/\/ with the new key and value.  However, then our Enumeration\n-        \/\/ could lose its place in the HashTable.  So, we first\n-        \/\/ clone the HashTable and enumerate over that since the\n-        \/\/ clone will not change.  When we migrate to Collections,\n-        \/\/ this code should be revisited and cleaned up to use\n-        \/\/ an Iterator which may (or may not) alleviate the need for\n-        \/\/ the clone.  Many thanks to Padraig O'hIceadha\n-        \/\/ <padraig@gradient.ie> for finding this problem.  Bugzilla 2000.\n-\n-        Enumeration<Object> keys = ((Properties) props.clone()).keys();\n-        while (keys.hasMoreElements())\n-        {\n-            String key = (String) keys.nextElement();\n-            \/\/ Now check if the given key was specified as a\n-            \/\/ System property. If so, the system property\n-            \/\/ overides the default value in the propery file.\n-            String value = null;\n-            try\n-            {\n-                value = SecuritySupport.getSystemProperty(key);\n-            }\n-            catch (SecurityException se)\n-            {\n-                \/\/ No-op for sandbox\/applet case, leave null -sc\n-            }\n-            if (value == null)\n-                value = (String) props.get(key);\n-\n-            String newKey = fixupPropertyString(key, true);\n-            String newValue = null;\n-            try\n-            {\n-                newValue = SecuritySupport.getSystemProperty(newKey);\n-            }\n-            catch (SecurityException se)\n-            {\n-                \/\/ No-op for sandbox\/applet case, leave null -sc\n-            }\n-            if (newValue == null)\n-                newValue = fixupPropertyString(value, false);\n-            else\n-                newValue = fixupPropertyString(newValue, false);\n-\n-            if (key != newKey || value != newValue)\n-            {\n-                props.remove(key);\n-                props.put(newKey, newValue);\n-            }\n-\n+        for (int i = 0; i < keys.length; i++) {\n+            \/\/ check System Property. This is kept as is for binary compatibility\n+            String sys = SecuritySupport.getSystemProperty(keys[i]);\n+            props.put(keys[i], (sys == null) ? values[i] : sys);\n@@ -505,30 +383,0 @@\n-\n-    \/**\n-     * Fix up a string in an output properties file according to\n-     * the rules of {@link #loadPropertiesFile}.\n-     *\n-     * @param s non-null reference to string that may need to be fixed up.\n-     * @return A new string if fixup occured, otherwise the s argument.\n-     *\/\n-    static private String fixupPropertyString(String s, boolean doClipping)\n-    {\n-        int index;\n-        if (doClipping && s.startsWith(S_XSLT_PREFIX))\n-        {\n-            s = s.substring(S_XSLT_PREFIX_LEN);\n-        }\n-        if (s.startsWith(S_XALAN_PREFIX))\n-        {\n-            s =\n-                S_BUILTIN_EXTENSIONS_UNIVERSAL\n-                    + s.substring(S_XALAN_PREFIX_LEN);\n-        }\n-        if ((index = s.indexOf(\"\\\\u003a\")) > 0)\n-        {\n-            String temp = s.substring(index + 6);\n-            s = s.substring(0, index) + \":\" + temp;\n-\n-        }\n-        return s;\n-    }\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/OutputPropertiesFactory.java","additions":164,"deletions":316,"binary":false,"changes":480,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n- *\/\n+*\/\n@@ -705,1 +705,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -768,1 +768,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -909,1 +909,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -1631,1 +1631,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/ToHTMLStream.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1230,1 +1230,1 @@\n-            if (!m_cdataTagOpen && shouldIndent())\n+            if (!m_cdataTagOpen && shouldIndentForText())\n@@ -1269,0 +1269,1 @@\n+            m_isprevtext = true;\n@@ -1535,2 +1536,2 @@\n-     * Used to flush the buffered characters when indentation is on, this method\n-     * will be called when the next node is traversed.\n+     * Flushes the buffered characters when indentation is on. This method\n+     * is called before the next node is traversed.\n@@ -1538,0 +1539,2 @@\n+     * @param isText indicates whether the node to be traversed is text\n+     * @throws org.xml.sax.SAXException\n@@ -1539,1 +1542,1 @@\n-    final protected void flushCharactersBuffer() throws SAXException {\n+    final protected void flushCharactersBuffer(boolean isText) throws SAXException {\n@@ -1552,1 +1555,3 @@\n-                m_childNodeNum++;\n+                if (!isText) {\n+                    m_childNodeNum++;\n+                }\n@@ -1845,1 +1850,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -2089,1 +2094,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -2281,1 +2286,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -2463,2 +2468,1 @@\n-            m_childNodeNum++;\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(true);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/ToStream.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+ * @LastModified: July 2019\n@@ -203,1 +204,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -270,1 +271,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/ToXMLStream.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,45 +0,0 @@\n-###########################################################################\n-# Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n-###########################################################################\n-##\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements. See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership. The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the  \"License\");\n-# you may not use this file except in compliance with the License.\n-# You may obtain a copy of the License at\n-#\n-#     http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing, software\n-# distributed under the License is distributed on an \"AS IS\" BASIS,\n-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-# See the License for the specific language governing permissions and\n-# limitations under the License.\n-##\n-#\n-# Specify defaults when method=\"html\".  These defaults use output_xml.properties\n-# as a base.\n-#\n-\n-# XSLT properties do not need namespace qualification.\n-method=html\n-indent=yes\n-media-type=text\/html\n-version=4.0\n-\n-# Xalan-specific output properties.  These can be overridden in the stylesheet \n-# assigning a xalan namespace.  For example:\n-# <xsl:stylesheet version=\"1.0\"\n-#          xmlns:xsl=\"http:\/\/www.w3.org\/1999\/XSL\/Transform\"\n-#          xmlns:xalan=\"http:\/\/xml.apache.org\/xalan\">\n-#  <xsl:output method=\"html\" encoding=\"UTF-8\"\n-#              xalan:content-handler=\"MyContentHandler\"\/>\n-#  ...\n-# Note that the colon after the protocol needs to be escaped.\n-{http\\u003a\/\/xml.apache.org\/xalan}indent-amount=4\n-{http\\u003a\/\/xml.apache.org\/xalan}content-handler=com.sun.org.apache.xml.internal.serializer.ToHTMLStream\n-{http\\u003a\/\/xml.apache.org\/xalan}entities=com\/sun\/org\/apache\/xml\/internal\/serializer\/HTMLEntities\n-{http\\u003a\/\/xml.apache.org\/xalan}use-url-escaping=yes\n-{http\\u003a\/\/xml.apache.org\/xalan}omit-meta-tag=no\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/output_html.properties","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,39 +0,0 @@\n-###########################################################################\n-# reserved comment block\n-# DO NOT REMOVE OR ALTER!\n-###########################################################################\n-##########################################################################\n-# Copyright 2003-2004 The Apache Software Foundation.\n-#\n-# Licensed under the Apache License, Version 2.0 (the \"License\");\n-# you may not use this file except in compliance with the License.\n-# You may obtain a copy of the License at\n-#\n-#     http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing, software\n-# distributed under the License is distributed on an \"AS IS\" BASIS,\n-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-# See the License for the specific language governing permissions and\n-# limitations under the License.\n-##########################################################################\n-#\n-# $Id: output_text.properties,v 1.3 2005\/09\/28 13:49:10 pvedula Exp $\n-#\n-# Specify defaults when method=\"text\".\n-#\n-\n-# XSLT properties do not need namespace qualification.\n-method=text\n-media-type=text\/plain\n-\n-# Xalan-specific output properties.  These can be overridden in the stylesheet \n-# assigning a xalan namespace.  For example:\n-# <xsl:stylesheet version=\"1.0\"\n-#          xmlns:xsl=\"http:\/\/www.w3.org\/1999\/XSL\/Transform\"\n-#          xmlns:xalan=\"http:\/\/xml.apache.org\/xalan\">\n-#  <xsl:output method=\"html\" encoding=\"UTF-8\"\n-#              xalan:content-handler=\"MyContentHandler\"\/>\n-#  ...\n-# Note that the colon after the protocol needs to be escaped.\n-{http\\u003a\/\/xml.apache.org\/xalan}content-handler=com.sun.org.apache.xml.internal.serializer.ToTextStream\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/output_text.properties","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-###########################################################################\n-# reserved comment block\n-# DO NOT REMOVE OR ALTER!\n-###########################################################################\n-###########################################################################\n-# Copyright 2003-2004 The Apache Software Foundation.\n-#\n-# Licensed under the Apache License, Version 2.0 (the \"License\");\n-# you may not use this file except in compliance with the License.\n-# You may obtain a copy of the License at\n-#\n-#     http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing, software\n-# distributed under the License is distributed on an \"AS IS\" BASIS,\n-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-# See the License for the specific language governing permissions and\n-# limitations under the License.\n-##########################################################################\n-#\n-# $Id: output_unknown.properties,v 1.2.4.1 2005\/09\/15 08:15:33 suresh_emailid Exp $\n-#\n-# Specify defaults when no method=\"...\" is specified.\n-# This type of output will quickly switch to \"xml\" or \"html\"\n-# depending on the first element name.\n-#\n-\n-# XSLT properties do not need namespace qualification.\n-method=xml\n-version=1.0\n-encoding=UTF-8\n-indent=no\n-omit-xml-declaration=no\n-standalone=no\n-media-type=text\/xml\n-\n-# Xalan-specific output properties.  These can be overridden in the stylesheet \n-# assigning a xalan namespace.  For example:\n-# <xsl:stylesheet version=\"1.0\"\n-#          xmlns:xsl=\"http:\/\/www.w3.org\/1999\/XSL\/Transform\"\n-#          xmlns:xalan=\"http:\/\/xml.apache.org\/xalan\">\n-#  <xsl:output method=\"html\" encoding=\"UTF-8\"\n-#              xalan:content-handler=\"MyContentHandler\"\/>\n-#  ...\n-# Note that the colon after the protocol needs to be escaped.\n-{http\\u003a\/\/xml.apache.org\/xalan}indent-amount=0\n-{http\\u003a\/\/xml.apache.org\/xalan}content-handler=com.sun.org.apache.xml.internal.serializer.ToUnknownStream\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/output_unknown.properties","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-###########################################################################\n-# reserved comment block\n-# DO NOT REMOVE OR ALTER!\n-###########################################################################\n-###########################################################################\n-# Copyright 2003-2004 The Apache Software Foundation.\n-#\n-# Licensed under the Apache License, Version 2.0 (the \"License\");\n-# you may not use this file except in compliance with the License.\n-# You may obtain a copy of the License at\n-#\n-#     http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing, software\n-# distributed under the License is distributed on an \"AS IS\" BASIS,\n-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-# See the License for the specific language governing permissions and\n-# limitations under the License.\n-##########################################################################\n-#\n-# $Id: output_xml.properties,v 1.2.4.1 2005\/09\/15 08:15:33 suresh_emailid Exp $\n-#\n-# Specify defaults when method=\"xml\".  These defaults serve as a base for \n-# other defaults, such as output_html and output_text.\n-#\n-\n-# XSLT properties do not need namespace qualification.\n-method=xml\n-version=1.0\n-encoding=UTF-8\n-indent=no\n-omit-xml-declaration=no\n-standalone=no\n-media-type=text\/xml\n-\n-# Xalan-specific output properties.  These can be overridden in the stylesheet \n-# assigning a xalan namespace.  For example:\n-# <xsl:stylesheet version=\"1.0\"\n-#          xmlns:xsl=\"http:\/\/www.w3.org\/1999\/XSL\/Transform\"\n-#          xmlns:xalan=\"http:\/\/xml.apache.org\/xalan\">\n-#  <xsl:output method=\"html\" encoding=\"UTF-8\"\n-#              xalan:content-handler=\"MyContentHandler\"\/>\n-#  ...\n-# Note that the colon after the protocol needs to be escaped.\n-{http\\u003a\/\/xml.apache.org\/xalan}indent-amount=0\n-{http\\u003a\/\/xml.apache.org\/xalan}content-handler=com.sun.org.apache.xml.internal.serializer.ToXMLStream\n-{http\\u003a\/\/xml.apache.org\/xalan}entities=com\/sun\/org\/apache\/xml\/internal\/serializer\/XMLEntities\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/output_xml.properties","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -69,1 +69,1 @@\n- * @bug 6439439 8087303 8174025 8249867 8261209\n+ * @bug 6439439 8087303 8174025 8223291 8249867 8261209\n@@ -526,1 +526,0 @@\n-        dbf.setValidating(true);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/prettyprint\/PrettyPrintTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,3 +1,1 @@\n-<a>\n-    <![CDATA[ ]]>\n-<\/a>\n+<a><![CDATA[ ]]><\/a>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/prettyprint\/xmltest1.out","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,2 +1,1 @@\n-<a>\n-    <![CDATA[  abc def \n+<a><![CDATA[  abc def \n@@ -4,2 +3,1 @@\n- test]]>\n-<\/a>\n+ test]]><\/a>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/prettyprint\/xmltest2.out","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,2 +2,1 @@\n-         t\n-    <![CDATA[ ]]>\n+     t<![CDATA[ ]]>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/prettyprint\/xmltest8.out","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package transform;\n+\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.Properties;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Templates;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.w3c.dom.Document;\n+import org.xml.sax.InputSource;\n+\n+\/*\n+ * @test\n+ * @bug 8219705 8223291\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @run testng transform.OutputPropertiesTest\n+ * @summary Verifies the output properties are set correctly\n+ *\/\n+public class OutputPropertiesTest {\n+    \/*\n+       DataProvider: for testing indentation\n+       Data: xml, expected result\n+     *\/\n+    @DataProvider(name = \"Indentation\")\n+    public Object[][] getData() {\n+        String mix = \"\\n\" +\n+                \"        abc\\n\" +\n+                \"        mix\\n\" +\n+                \"        xyz\\n\" +\n+                \"    \";\n+        return new Object[][]{\n+            {\"abc<![CDATA[data]]>xyz\", \"abcdataxyz\"},\n+            {\"abc<![CDATA[ & ]]>xyz\", \"abc & xyz\"},\n+            {\"<![CDATA[data]]>\", \"data\"},\n+            {\"abc<mix>mix<\/mix>xyz\", mix}\n+        };\n+    }\n+\n+\n+    \/**\n+     * bug 8223291\n+     * Verifies that no extra indentation is added for CDATA.\n+     * @param xml the xml content to be tested\n+     * @param expected the expected result\n+     * @throws Exception\n+     *\/\n+    @Test(dataProvider = \"Indentation\")\n+    public void testIndentation(String xml, String expected) throws Exception\n+    {\n+        StreamSource source = new StreamSource(new StringReader(\"<foo><bar>\" + xml + \"<\/bar><\/foo>\"));\n+        StreamResult result = new StreamResult(new StringWriter());\n+\n+        Transformer tform = TransformerFactory.newInstance().newTransformer();\n+        tform.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+        tform.transform(source, result);\n+\n+        String xml1 = result.getWriter().toString();\n+\n+        Document document = DocumentBuilderFactory.newInstance()\n+            .newDocumentBuilder()\n+            .parse(new InputSource(new StringReader(xml1)));\n+\n+        String resultData = document.getElementsByTagName(\"bar\")\n+            .item(0)\n+            .getTextContent();\n+\n+        Assert.assertEquals(resultData, expected);\n+    }\n+\n+    @Test\n+    public void testOutputProperties() throws Exception {\n+        String xslData = \"<?xml version='1.0'?>\"\n+                + \"<xsl:stylesheet\"\n+                + \" xmlns:xsl='http:\/\/www.w3.org\/1999\/XSL\/Transform'\"\n+                + \" version='1.0'\"\n+                + \">\\n\"\n+                + \"   <xsl:output method='html'\/>\\n\"\n+                + \"   <xsl:template match='\/'>\\n\"\n+                + \"     Hello World! \\n\"\n+                + \"   <\/xsl:template>\\n\"\n+                + \"<\/xsl:stylesheet>\";\n+\n+        System.out.println(xslData);\n+\n+        Templates templates = TransformerFactory.newInstance()\n+                    .newTemplates(new StreamSource(new StringReader(xslData)));\n+\n+        Properties properties = templates.getOutputProperties();\n+        String[] prNames = new String[]{\"method\", \"version\", \"indent\", \"media-type\"};\n+        String[] prValues = new String[]{\"html\", \"4.0\", \"yes\", \"text\/html\"};\n+\n+        for (int i = 0; i < prNames.length; i++) {\n+            String value = properties.getProperty(prNames[i]);\n+            String msg = \"The value of the property '\" + prNames[i] + \"' should be '\"\n+                    + prValues[i] + \"' when the method is '\" + prValues[0] + \"'. \\n\";\n+            Assert.assertEquals(value, prValues[i], msg);\n+            System.out.println(\n+                    prNames[i] + \": actual: \" + value + \", expected: \" + prValues[i]);\n+        }\n+    }\n+\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/OutputPropertiesTest.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"}]}