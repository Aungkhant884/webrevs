{"files":[{"patch":"@@ -98,1 +98,1 @@\n-ciEnv::ciEnv(CompileTask* task, int system_dictionary_modification_counter)\n+ciEnv::ciEnv(CompileTask* task)\n@@ -118,1 +118,0 @@\n-  _system_dictionary_modification_counter = system_dictionary_modification_counter;\n@@ -183,1 +182,0 @@\n-  _system_dictionary_modification_counter = 0;\n@@ -926,4 +924,0 @@\n-bool ciEnv::system_dictionary_modification_counter_changed() {\n-  return _system_dictionary_modification_counter != SystemDictionary::number_of_modifications();\n-}\n-\n@@ -938,2 +932,1 @@\n-  bool counter_changed = system_dictionary_modification_counter_changed();\n-  Dependencies::DepType result = dependencies()->validate_dependencies(_task, counter_changed);\n+  Dependencies::DepType result = dependencies()->validate_dependencies(_task);\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-  int              _system_dictionary_modification_counter;\n@@ -298,1 +297,1 @@\n-  ciEnv(CompileTask* task, int system_dictionary_modification_counter);\n+  ciEnv(CompileTask* task);\n@@ -454,3 +453,0 @@\n-  \/\/ Check for changes to the system dictionary during compilation\n-  bool system_dictionary_modification_counter_changed();\n-\n","filename":"src\/hotspot\/share\/ci\/ciEnv.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -100,1 +100,0 @@\n-int         SystemDictionary::_number_of_modifications = 0;\n@@ -1013,1 +1012,0 @@\n-\n@@ -1015,3 +1013,0 @@\n-\n-      \/\/ compiled code dependencies need to be validated anyway\n-      notice_modification();\n@@ -1910,1 +1905,0 @@\n-  _number_of_modifications = 0;\n@@ -2199,2 +2193,0 @@\n-\n-      notice_modification();\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -401,7 +401,0 @@\n-  \/\/ Monotonically increasing counter which grows as classes are\n-  \/\/ loaded or modifications such as hot-swapping or setting\/removing\n-  \/\/ of breakpoints are performed\n-  static inline int number_of_modifications()     { assert_locked_or_safepoint(Compile_lock); return _number_of_modifications; }\n-  \/\/ Needed by evolution and breakpoint code\n-  static inline void notice_modification()        { assert_locked_or_safepoint(Compile_lock); ++_number_of_modifications;      }\n-\n@@ -616,5 +609,0 @@\n-  \/\/ Monotonically increasing counter which grows with\n-  \/\/ loading classes as well as hot-swapping and breakpoint setting\n-  \/\/ and removal.\n-  static int                     _number_of_modifications;\n-\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -628,22 +628,1 @@\n-Dependencies::DepType Dependencies::validate_dependencies(CompileTask* task, bool counter_changed, char** failure_detail) {\n-  \/\/ First, check non-klass dependencies as we might return early and\n-  \/\/ not check klass dependencies if the system dictionary\n-  \/\/ modification counter hasn't changed (see below).\n-  for (Dependencies::DepStream deps(this); deps.next(); ) {\n-    if (deps.is_klass_type())  continue;  \/\/ skip klass dependencies\n-    Klass* witness = deps.check_dependency();\n-    if (witness != NULL) {\n-      return deps.type();\n-    }\n-  }\n-\n-  \/\/ Klass dependencies must be checked when the system dictionary\n-  \/\/ changes.  If logging is enabled all violated dependences will be\n-  \/\/ recorded in the log.  In debug mode check dependencies even if\n-  \/\/ the system dictionary hasn't changed to verify that no invalid\n-  \/\/ dependencies were inserted.  Any violated dependences in this\n-  \/\/ case are dumped to the tty.\n-  if (!counter_changed && !trueInDebug) {\n-    return end_marker;\n-  }\n-\n+Dependencies::DepType Dependencies::validate_dependencies(CompileTask* task, char** failure_detail) {\n@@ -653,1 +632,0 @@\n-    if (!deps.is_klass_type())  continue;  \/\/ skip non-klass dependencies\n@@ -668,6 +646,1 @@\n-      if (!counter_changed) {\n-        \/\/ Dependence failed but counter didn't change.  Log a message\n-        \/\/ describing what failed and allow the assert at the end to\n-        \/\/ trigger.\n-        deps.print_dependency(witness);\n-      } else if (xtty == NULL) {\n+      if (xtty == NULL) {\n@@ -682,9 +655,0 @@\n-  if (klass_violations != 0) {\n-#ifdef ASSERT\n-    if (task != NULL && !counter_changed && !PrintCompilation) {\n-      \/\/ Print out the compile task that failed\n-      task->print_tty();\n-    }\n-#endif\n-    assert(counter_changed, \"failed dependencies, but counter didn't change\");\n-  }\n","filename":"src\/hotspot\/share\/code\/dependencies.cpp","additions":3,"deletions":39,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -474,1 +474,1 @@\n-  DepType validate_dependencies(CompileTask* task, bool counter_changed, char** failure_detail = NULL);\n+  DepType validate_dependencies(CompileTask* task, char** failure_detail = NULL);\n","filename":"src\/hotspot\/share\/code\/dependencies.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1668,6 +1668,0 @@\n-  int system_dictionary_modification_counter;\n-  {\n-    MutexLocker locker(Compile_lock, thread);\n-    system_dictionary_modification_counter = SystemDictionary::number_of_modifications();\n-  }\n-\n@@ -1677,1 +1671,1 @@\n-    ciEnv ci_env(NULL, system_dictionary_modification_counter);\n+    ciEnv ci_env((CompileTask*)NULL);\n@@ -2122,6 +2116,0 @@\n-  int system_dictionary_modification_counter;\n-  {\n-    MutexLocker locker(Compile_lock, thread);\n-    system_dictionary_modification_counter = SystemDictionary::number_of_modifications();\n-  }\n-\n@@ -2141,1 +2129,1 @@\n-        JVMCIEnv env(task, system_dictionary_modification_counter);\n+        JVMCIEnv env(task);\n@@ -2162,1 +2150,1 @@\n-    ciEnv ci_env(task, system_dictionary_modification_counter);\n+    ciEnv ci_env(task);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":3,"deletions":15,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-JVMCIEnv::JVMCIEnv(CompileTask* task, int system_dictionary_modification_counter):\n+JVMCIEnv::JVMCIEnv(CompileTask* task):\n@@ -59,1 +59,0 @@\n-  _system_dictionary_modification_counter(system_dictionary_modification_counter),\n@@ -424,1 +423,0 @@\n-  bool counter_changed = env == NULL || env->_system_dictionary_modification_counter != SystemDictionary::number_of_modifications();\n@@ -426,1 +424,1 @@\n-  Dependencies::DepType result = dependencies->validate_dependencies(task, counter_changed, failure_detail);\n+  Dependencies::DepType result = dependencies->validate_dependencies(task, failure_detail);\n@@ -431,1 +429,1 @@\n-  if (!Dependencies::is_klass_type(result) || counter_changed) {\n+  if (!Dependencies::is_klass_type(result)) {\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-  JVMCIEnv(CompileTask* task, int system_dictionary_modification_counter);\n+  JVMCIEnv(CompileTask* task);\n@@ -99,1 +99,0 @@\n-  int              _system_dictionary_modification_counter;\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1959,1 +1959,0 @@\n-  SystemDictionary::notice_modification();\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -99,8 +99,0 @@\n-#ifdef ASSERT\n-  if (parser.tf() != (parser.depth() == 1 ? C->tf() : tf())) {\n-    MutexLockerEx ml(Compile_lock, Mutex::_no_safepoint_check_flag);\n-    assert(C->env()->system_dictionary_modification_counter_changed(),\n-           \"Must invalidate if TypeFuncs differ\");\n-  }\n-#endif\n-\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -527,5 +527,0 @@\n-    if (C->tf() != tf()) {\n-      MutexLockerEx ml(Compile_lock, Mutex::_no_safepoint_check_flag);\n-      assert(C->env()->system_dictionary_modification_counter_changed(),\n-             \"Must invalidate if TypeFuncs differ\");\n-    }\n@@ -1038,14 +1033,6 @@\n-      \/\/ In case of concurrent class loading, the type we set for the\n-      \/\/ ret_phi in build_exits() may have been too optimistic and the\n-      \/\/ ret_phi may be top now.\n-      \/\/ Otherwise, we've encountered an error and have to mark the method as\n-      \/\/ not compilable. Just using an assertion instead would be dangerous\n-      \/\/ as this could lead to an infinite compile loop in non-debug builds.\n-      {\n-        MutexLockerEx ml(Compile_lock, Mutex::_no_safepoint_check_flag);\n-        if (C->env()->system_dictionary_modification_counter_changed()) {\n-          C->record_failure(C2Compiler::retry_class_loading_during_parsing());\n-        } else {\n-          C->record_method_not_compilable(\"Can't determine return type.\");\n-        }\n-      }\n+      \/\/ If the type we set for the ret_phi in build_exits() is too optimistic and\n+      \/\/ the ret_phi is top now, there's an extremely small chance that it may be due to class\n+      \/\/ loading.  It could also be due to an error, so mark this method as not compilable because\n+      \/\/ otherwise this could lead to an infinite compile loop.\n+      \/\/ In any case, this code path is rarely (and never in my testing) reached.\n+      C->record_method_not_compilable(\"Can't determine return type.\");\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":6,"deletions":19,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -222,3 +222,0 @@\n-  \/\/ Disable any dependent concurrent compilations\n-  SystemDictionary::notice_modification();\n-\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -861,1 +861,0 @@\n-  nonstatic_field(ciEnv,                       _system_dictionary_modification_counter,       int)                                   \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,0 @@\n-    systemDictionaryModificationCounterField = new CIntField(type.getCIntegerField(\"_system_dictionary_modification_counter\"), 0);\n@@ -60,1 +59,0 @@\n-  private static CIntField systemDictionaryModificationCounterField;\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/ci\/ciEnv.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}