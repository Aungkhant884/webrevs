{"files":[{"patch":"@@ -441,0 +441,1 @@\n+  Node* _data_dependency_on; \/\/ The projection into the loop on which data nodes are dependent or NULL otherwise\n@@ -541,1 +542,2 @@\n-    _clone_visited(area), _old_new(area)\n+    _clone_visited(area), _old_new(area),\n+    _data_dependency_on(NULL)\n@@ -549,1 +551,6 @@\n-      \/\/ as non loop invariatnt.\n+      \/\/ as non-loop-invariant.\n+      \/\/ Loop predication could create new nodes for which the below\n+      \/\/ invariant information is missing. Mark the 'entry' node to\n+      \/\/ later check again if a node needs to be treated as non-loop-\n+      \/\/ invariant as well.\n+      _data_dependency_on = entry;\n@@ -568,0 +575,6 @@\n+  \/\/ Did we explicitly mark some nodes non-loop-invariant? If so, return the entry node on which some data nodes\n+  \/\/ are dependent that prevent loop predication. Otherwise, return NULL.\n+  Node* data_dependency_on() {\n+    return _data_dependency_on;\n+  }\n+\n@@ -629,0 +642,3 @@\n+\n+  Compile* C = Compile::current();\n+  uint old_unique_idx = C->unique();\n@@ -635,2 +651,13 @@\n-  if (offset && !invar.is_invariant(offset)) { \/\/ offset must be invariant\n-    return false;\n+  if (offset != NULL) {\n+    if (!invar.is_invariant(offset)) { \/\/ offset must be invariant\n+      return false;\n+    }\n+    Node* data_dependency_on = invar.data_dependency_on();\n+    if (data_dependency_on != NULL && old_unique_idx < C->unique()) {\n+      \/\/ 'offset' node was newly created by is_scaled_iv_plus_offset(). Check that it does not depend on the entry projection\n+      \/\/ into the loop. If it does, we cannot perform loop predication (see Invariant::Invariant()).\n+      assert(!offset->is_CFG(), \"offset must be a data node\");\n+      if (_phase->get_ctrl(offset) == data_dependency_on) {\n+        return false;\n+      }\n+    }\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":31,"deletions":4,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -1557,8 +1557,1 @@\n-        if (mem->is_Phi() && (mem->in(0) == region) && mem->in(i)->in(0) != NULL &&\n-            MemNode::all_controls_dominate(address, region)) {\n-          \/\/ Enable other optimizations such as loop predication which does not work\n-          \/\/ if we directly pin the node to node `in`\n-          x->set_req(0, mem->in(i)->in(0)); \/\/ Use same control as memory\n-        } else {\n-          x->set_req(0, in);\n-        }\n+        x->set_req(0, in);\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8277529\n+ * @summary RangeCheck should not be moved out of a loop if a node on the data input chain for the bool is dependent\n+ *          on the projection into the loop (after the predicates).\n+ * @run main\/othervm -Xbatch -XX:CompileCommand=compileonly,compiler.loopopts.TestDepBetweenLoopAndPredicate::test*\n+ *                   compiler.loopopts.TestDepBetweenLoopAndPredicate\n+ *\/\n+\n+package compiler.loopopts;\n+\n+public class TestDepBetweenLoopAndPredicate {\n+    static int x, y, z;\n+    static boolean flag;\n+    static int[] iArrFld = new int[25];\n+    static int[] iArrFld2 = new int[5];\n+    static int limit = 5;\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10000; i++) {\n+            flag = !flag;\n+            test();\n+        }\n+\n+        for (int i = 0; i < 5000; i++) {\n+            flag = !flag;\n+            test2();\n+            test3();\n+            test4();\n+            test5();\n+        }\n+    }\n+\n+    public static void test()  {\n+        int[] iArr = new int[20];\n+        System.arraycopy(iArrFld, x, iArr, y, 18);\n+\n+        if (flag) {\n+            return;\n+        }\n+\n+        for (int i = 0; i < limit; i++) {\n+            iArr[19]++;\n+        }\n+    }\n+\n+    public static void test2() {\n+        for (int i = 0; i < limit; i++) {\n+            int[] iArr = new int[20];\n+            System.arraycopy(iArrFld, x, iArr, y, 18);\n+\n+            if (flag) {\n+                return;\n+            }\n+\n+            for (int j = i; j < limit; j++) {\n+                x = iArrFld[iArr[19]]; \/\/ No new offset node created\n+                iArr[19]++;\n+            }\n+        }\n+    }\n+\n+    public static void test3() {\n+        for (int i = 0; i < limit; i++) {\n+            int[] iArr = new int[20];\n+            System.arraycopy(iArrFld, x, iArr, y, 18);\n+\n+            if (flag) {\n+                return;\n+            }\n+\n+            for (int j = i + 1; j < limit; j++) {\n+                x = iArrFld[iArr[19]]; \/\/ New offset node created\n+                iArr[19]++;\n+            }\n+        }\n+    }\n+\n+    public static void test4() {\n+        for (int i = 0; i < limit; i++) {\n+            int[] iArr = new int[20];\n+            System.arraycopy(iArrFld, x, iArr, y, 18);\n+\n+            if (flag) {\n+                return;\n+            }\n+\n+            for (int j = i + 1 + z; j < limit; j++) {\n+                x = iArrFld[iArr[19]]; \/\/ New offset node created\n+                iArr[19]++;\n+            }\n+        }\n+    }\n+\n+    public static void test5() {\n+        for (int i = 0; i < limit; i++) {\n+            int[] iArr = new int[20];\n+            System.arraycopy(iArrFld, x, iArr, y, 18);\n+\n+            if (flag) {\n+                return;\n+            }\n+\n+            for (int j = i + 1 + z; j < limit; j++) {\n+                x = iArrFld[iArr[19]]; \/\/ New offset node created\n+                iArr[19]++;\n+                y += iArrFld2[3]; \/\/ Range check removed because not dependent on projection into the loop\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestDepBetweenLoopAndPredicate.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"}]}