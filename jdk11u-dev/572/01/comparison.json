{"files":[{"patch":"@@ -1,15 +0,0 @@\n-\/build\/\n-\/dist\/\n-\/.idea\/\n-nbproject\/private\/\n-\/webrev\n-\/.src-rev\n-\/.jib\/\n-.DS_Store\n-.metadata\/\n-.recommenders\/\n-test\/nashorn\/script\/external\n-test\/nashorn\/lib\n-NashornProfile.txt\n-**\/JTreport\/**\n-**\/JTwork\/**\n","filename":".gitignore","additions":0,"deletions":15,"binary":false,"changes":15,"status":"deleted"},{"patch":"@@ -43,0 +43,4 @@\n+import java.util.Set;\n+import java.util.WeakHashMap;\n+import java.util.stream.*;\n+import java.util.ServiceLoader.Provider;\n@@ -224,0 +228,2 @@\n+    private static final WeakHashMap<ClassLoader, Set<Provider<LoginModule>>> providersCache =\n+        new WeakHashMap<>();\n@@ -289,0 +295,1 @@\n+\n@@ -687,7 +694,23 @@\n-                    ServiceLoader<LoginModule> sc = AccessController.doPrivileged(\n-                            (PrivilegedAction<ServiceLoader<LoginModule>>)\n-                                    () -> ServiceLoader.load(\n-                                        LoginModule.class, contextClassLoader));\n-                    for (LoginModule m: sc) {\n-                        if (m.getClass().getName().equals(name)) {\n-                            moduleStack[i].module = m;\n+                    Set<Provider<LoginModule>> lmProviders;\n+                    synchronized(providersCache){\n+                        lmProviders = providersCache.get(contextClassLoader);\n+                        if (lmProviders == null){\n+                            if (debug != null){\n+                                debug.println(\"Build ServiceProviders cache for ClassLoader: \" + contextClassLoader.getName());\n+                            }\n+                            @SuppressWarnings(\"removal\")\n+                            ServiceLoader<LoginModule> sc = AccessController.doPrivileged(\n+                                    (PrivilegedAction<ServiceLoader<LoginModule>>)\n+                                            () -> java.util.ServiceLoader.load(\n+                                                LoginModule.class, contextClassLoader));\n+                            lmProviders = sc.stream().collect(Collectors.toSet());\n+                                if (debug != null){\n+                                    debug.println(\"Discovered ServiceProviders for ClassLoader: \" + contextClassLoader.getName());\n+                                    lmProviders.forEach(System.err::println);\n+                                }\n+                            providersCache.put(contextClassLoader,lmProviders);\n+                        }\n+                    }\n+                    for (Provider<LoginModule> lm: lmProviders){\n+                        if (lm.type().getName().equals(name)){\n+                            moduleStack[i].module = lm.get();\n@@ -700,1 +723,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/login\/LoginContext.java","additions":30,"deletions":8,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @bug 8047789\n+ * @bug 8047789 8273026\n@@ -31,1 +31,5 @@\n- * @build FirstLoginModule SecondLoginModule\n+ * @comment shows that the SecondLoginModule is still needed even if it's not in the JAAS login config file\n+ * @build FirstLoginModule\n+ * @clean SecondLoginModule\n+ * @run main\/othervm\/fail Loader\n+ * @build SecondLoginModule\n@@ -42,4 +46,0 @@\n-        if (SecondLoginModule.isLoaded) {\n-            throw new Exception();\n-        }\n-\n@@ -48,7 +48,0 @@\n-        \/\/ Although only FirstLoginModule is specified in the JAAS login\n-        \/\/ config file, LoginContext will first create all LoginModule\n-        \/\/ implementations that are registered as services, which include\n-        \/\/ SecondLoginModule.\n-        if (!SecondLoginModule.isLoaded) {\n-            throw new Exception();\n-        }\n","filename":"test\/jdk\/javax\/security\/auth\/spi\/Loader.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -32,5 +32,0 @@\n-    public static boolean isLoaded;\n-\n-    public SecondLoginModule() {\n-        isLoaded = true;\n-    }\n","filename":"test\/jdk\/javax\/security\/auth\/spi\/SecondLoginModule.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}