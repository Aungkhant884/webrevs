{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,0 +71,1 @@\n+    vm.flagless \\\n","filename":"test\/hotspot\/jtreg\/TEST.ROOT","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/applications\/scimark\/Scimark.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021 Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/gtest\/GTestWrapper.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -34,0 +35,1 @@\n+import java.util.Collections;\n@@ -38,0 +40,1 @@\n+import java.util.Set;\n@@ -120,0 +123,1 @@\n+        map.put(\"vm.flagless\", this::isFlagless);\n@@ -518,0 +522,59 @@\n+    \/**\n+     * Checks if we are in <i>almost<\/i> out-of-box configuration, i.e. the flags\n+     * which JVM is started with don't affect its behavior \"significantly\".\n+     * {@code TEST_VM_FLAGLESS} enviroment variable can be used to force this\n+     * method to return true and allow any flags.\n+     *\n+     * @return true if there are no JVM flags\n+     *\/\n+    private String isFlagless() {\n+        boolean result = true;\n+        if (System.getenv(\"TEST_VM_FLAGLESS\") != null) {\n+            return \"\" + result;\n+        }\n+\n+        List<String> allFlags = new ArrayList<String>();\n+        Collections.addAll(allFlags, System.getProperty(\"test.vm.opts\", \"\").trim().split(\"\\\\s+\"));\n+        Collections.addAll(allFlags, System.getProperty(\"test.java.opts\", \"\").trim().split(\"\\\\s+\"));\n+\n+        \/\/ check -XX flags\n+        var ignoredXXFlags = Set.of(\n+                \/\/ added by run-test framework\n+                \"MaxRAMPercentage\",\n+                \/\/ added by test environment\n+                \"CreateCoredumpOnCrash\"\n+        );\n+        result &= allFlags.stream()\n+                          .filter(s -> s.startsWith(\"-XX:\"))\n+                          \/\/ map to names:\n+                              \/\/ remove -XX:\n+                              .map(s -> s.substring(4))\n+                              \/\/ remove +\/- from bool flags\n+                              .map(s -> s.charAt(0) == '+' || s.charAt(0) == '-' ? s.substring(1) : s)\n+                              \/\/ remove =.* from others\n+                              .map(s -> s.contains(\"=\") ? s.substring(0, s.indexOf('=')) : s)\n+                          \/\/ skip known-to-be-there flags\n+                          .filter(s -> !ignoredXXFlags.contains(s))\n+                          .findAny()\n+                          .isEmpty();\n+\n+        \/\/ check -X flags\n+        var ignoredXFlags = Set.of(\n+                \/\/ default, yet still seen to be explicitly set\n+                \"mixed\"\n+        );\n+        result &= allFlags.stream()\n+                          .filter(s -> s.startsWith(\"-X\") && !s.startsWith(\"-XX:\"))\n+                          \/\/ map to names:\n+                              \/\/ remove -X\n+                              .map(s -> s.substring(2))\n+                              \/\/ remove :.* from flags with values\n+                              .map(s -> s.contains(\":\") ? s.substring(0, s.indexOf(':')) : s)\n+                          \/\/ skip known-to-be-there flags\n+                          .filter(s -> !ignoredXFlags.contains(s))\n+                          .findAny()\n+                          .isEmpty();\n+\n+        return \"\" + result;\n+    }\n+\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":64,"deletions":1,"binary":false,"changes":65,"status":"modified"}]}