{"files":[{"patch":"@@ -299,4 +299,0 @@\n-\n-    static bool equals(oop o1, oop o2) {\n-      return Raw::equals(o1, o2);\n-    }\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSet.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,36 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"oops\/access.inline.hpp\"\n-#include \"oops\/accessDecorators.hpp\"\n-\n-\/\/ This macro allows instantiating selected accesses to be usable from the\n-\/\/ access.hpp file, to break dependencies to the access.inline.hpp file.\n-#define INSTANTIATE_HPP_ACCESS(decorators, T, barrier_type)  \\\n-  template struct RuntimeDispatch<DecoratorFixup<decorators>::value, T, barrier_type>\n-\n-namespace AccessInternal {\n-  INSTANTIATE_HPP_ACCESS(INTERNAL_EMPTY, oop, BARRIER_EQUALS);\n-}\n","filename":"src\/hotspot\/share\/oops\/access.cpp","additions":0,"deletions":36,"binary":false,"changes":36,"status":"deleted"},{"patch":"@@ -61,1 +61,0 @@\n-\/\/ * equals: Object equality, e.g. when different copies of the same objects are in use (from-space vs. to-space)\n@@ -278,5 +277,0 @@\n-\n-  static bool equals(oop o1, oop o2) {\n-    verify_decorators<INTERNAL_EMPTY>();\n-    return AccessInternal::equals<decorators>(o1, o2);\n-  }\n","filename":"src\/hotspot\/share\/oops\/access.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -209,7 +209,0 @@\n-  template <class GCBarrierType, DecoratorSet decorators>\n-  struct PostRuntimeDispatch<GCBarrierType, BARRIER_EQUALS, decorators>: public AllStatic {\n-    static bool access_barrier(oop o1, oop o2) {\n-      return GCBarrierType::equals(o1, o2);\n-    }\n-  };\n-\n@@ -370,7 +363,0 @@\n-\n-  template <DecoratorSet decorators, typename T>\n-  bool RuntimeDispatch<decorators, T, BARRIER_EQUALS>::equals_init(oop o1, oop o2) {\n-    func_t function = BarrierResolver<decorators, func_t, BARRIER_EQUALS>::resolve_barrier();\n-    _equals_func = function;\n-    return function(o1, o2);\n-  }\n","filename":"src\/hotspot\/share\/oops\/access.inline.hpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -66,2 +66,1 @@\n-    BARRIER_RESOLVE,\n-    BARRIER_EQUALS\n+    BARRIER_RESOLVE\n@@ -118,1 +117,0 @@\n-    typedef bool (*equals_func_t)(oop o1, oop o2);\n@@ -146,1 +144,0 @@\n-  ACCESS_GENERATE_ACCESS_FUNCTION(BARRIER_EQUALS, equals_func_t);\n@@ -412,2 +409,0 @@\n-\n-  static bool equals(oop o1, oop o2) { return o1 == o2; }\n@@ -607,12 +602,0 @@\n-  template <DecoratorSet decorators, typename T>\n-  struct RuntimeDispatch<decorators, T, BARRIER_EQUALS>: AllStatic {\n-    typedef typename AccessFunction<decorators, T, BARRIER_EQUALS>::type func_t;\n-    static func_t _equals_func;\n-\n-    static bool equals_init(oop o1, oop o2);\n-\n-    static inline bool equals(oop o1, oop o2) {\n-      return _equals_func(o1, o2);\n-    }\n-  };\n-\n@@ -664,4 +647,0 @@\n-  template <DecoratorSet decorators, typename T>\n-  typename AccessFunction<decorators, T, BARRIER_EQUALS>::type\n-  RuntimeDispatch<decorators, T, BARRIER_EQUALS>::_equals_func = &equals_init;\n-\n@@ -998,15 +977,0 @@\n-\n-    template <DecoratorSet decorators>\n-    inline static typename EnableIf<\n-      HasDecorator<decorators, INTERNAL_BT_TO_SPACE_INVARIANT>::value, bool>::type\n-    equals(oop o1, oop o2) {\n-      typedef RawAccessBarrier<decorators & RAW_DECORATOR_MASK> Raw;\n-      return Raw::equals(o1, o2);\n-    }\n-\n-    template <DecoratorSet decorators>\n-    inline static typename EnableIf<\n-      !HasDecorator<decorators, INTERNAL_BT_TO_SPACE_INVARIANT>::value, bool>::type\n-    equals(oop o1, oop o2) {\n-      return RuntimeDispatch<decorators, oop, BARRIER_EQUALS>::equals(o1, o2);\n-    }\n@@ -1311,6 +1275,0 @@\n-  template <DecoratorSet decorators>\n-  inline bool equals(oop o1, oop o2) {\n-    const DecoratorSet expanded_decorators = DecoratorFixup<decorators>::value;\n-    return PreRuntimeDispatch::equals<expanded_decorators>(o1, o2);\n-  }\n-\n","filename":"src\/hotspot\/share\/oops\/accessBackend.hpp","additions":1,"deletions":43,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-  inline static bool equals(oop o1, oop o2) { return Access<>::equals(o1, o2); }\n+  inline static bool equals(oop o1, oop o2) { return o1 == o2; }\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}