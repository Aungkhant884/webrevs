{"files":[{"patch":"@@ -27,1 +27,1 @@\n- * @test TestAgeOutput\n+ * @test TestAgeOutputSerial\n@@ -29,1 +29,0 @@\n- * @summary Check that collectors using age table based aging print an age table even for the first garbage collection\n@@ -31,1 +30,1 @@\n- * @requires vm.gc==\"null\"\n+ * @requires vm.gc.Serial\n@@ -37,0 +36,12 @@\n+ *\/\n+\n+\/*\n+ * @test TestAgeOutputG1\n+ * @bug 8164936\n+ * @summary Check that collectors using age table based aging print an age table even for the first garbage collection\n+ * @key gc\n+ * @requires vm.gc.G1\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n@@ -45,1 +56,1 @@\n- * @requires vm.gc==\"null\" & !vm.graal.enabled\n+ * @requires vm.gc.ConcMarkSweep & !vm.graal.enabled\n","filename":"test\/hotspot\/jtreg\/gc\/TestAgeOutput.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-\/* @test TestGenerationPerfCounter\n+\/* @test TestGenerationPerfCounterSerial\n@@ -33,1 +33,1 @@\n- * @requires vm.gc==\"null\"\n+ * @requires vm.gc.Serial\n@@ -41,0 +41,11 @@\n+ *\/\n+\n+\/* @test TestGenerationPerfCounterParallel\n+ * @bug 8080345\n+ * @requires vm.gc.Parallel\n+ * @library \/test\/lib \/\n+ * @summary Tests that the sun.gc.policy.generations returns 2 for all GCs.\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\/sun.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n@@ -42,0 +53,11 @@\n+ *\/\n+\n+\/* @test TestGenerationPerfCounterG1\n+ * @bug 8080345\n+ * @requires vm.gc.G1\n+ * @library \/test\/lib \/\n+ * @summary Tests that the sun.gc.policy.generations returns 2 for all GCs.\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\/sun.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n@@ -48,1 +70,1 @@\n- * @requires vm.gc==\"null\" & !vm.graal.enabled\n+ * @requires vm.gc.ConcMarkSweep & !vm.graal.enabled\n","filename":"test\/hotspot\/jtreg\/gc\/TestGenerationPerfCounter.java","additions":25,"deletions":3,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -29,3 +29,3 @@\n- * @test\n- * @summary Test that verifies that iteration over large, plain Java objects, that potentially cross region boundaries on G1, with references in them works.\n- * @requires vm.gc == \"null\"\n+ * @test TestHumongousReferenceObjectParallel\n+ * @summary Test that verifies that iteration over large, plain Java objects, that potentially cross region boundaries, with references in them works.\n+ * @requires vm.gc.Parallel\n@@ -35,0 +35,8 @@\n+ *\/\n+\n+\/*\n+ * @test TestHumongousReferenceObjectG1\n+ * @summary Test that verifies that iteration over large, plain Java objects, that potentially cross region boundaries on G1, with references in them works.\n+ * @requires vm.gc.G1\n+ * @bug 8151499 8153734\n+ * @modules java.base\/jdk.internal.vm.annotation\n","filename":"test\/hotspot\/jtreg\/gc\/TestHumongousReferenceObject.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-\/* @test TestMemoryMXBeansAndPoolsPresence\n+\/* @test TestMemoryMXBeansAndPoolsPresenceG1\n@@ -38,1 +38,1 @@\n- * @requires vm.gc == null\n+ * @requires vm.gc.G1\n@@ -40,0 +40,9 @@\n+ *\/\n+\n+\/* @test TestMemoryMXBeansAndPoolsPresenceParallel\n+ * @bug 8191564\n+ * @summary Tests that GarbageCollectorMXBeans and GC MemoryPools are created.\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @requires vm.gc.Parallel\n@@ -41,0 +50,9 @@\n+ *\/\n+\n+\/* @test TestMemoryMXBeansAndPoolsPresenceSerial\n+ * @bug 8191564\n+ * @summary Tests that GarbageCollectorMXBeans and GC MemoryPools are created.\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @requires vm.gc.Serial\n@@ -50,1 +68,1 @@\n- * @requires vm.gc == null & !vm.graal.enabled\n+ * @requires vm.gc.ConcMarkSweep & !vm.graal.enabled\n","filename":"test\/hotspot\/jtreg\/gc\/TestMemoryMXBeansAndPoolsPresence.java","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @test TestNumWorkerOutput\n+ * @test TestNumWorkerOutputG1\n@@ -31,1 +31,1 @@\n- * @requires vm.gc==\"null\"\n+ * @requires vm.gc.G1\n@@ -44,1 +44,1 @@\n- * @requires vm.gc==\"null\" & !vm.graal.enabled\n+ * @requires vm.gc.ConcMarkSweep & !vm.graal.enabled\n","filename":"test\/hotspot\/jtreg\/gc\/TestNumWorkerOutput.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-\/* @test TestPolicyNamePerfCounter\n+\/* @test TestPolicyNamePerfCounterSerial\n@@ -33,1 +33,1 @@\n- * @requires vm.gc==\"null\"\n+ * @requires vm.gc.Serial\n@@ -41,0 +41,11 @@\n+ *\/\n+\n+\/* @test TestPolicyNamePerfCounterParallel\n+ * @bug 8210192\n+ * @requires vm.gc.Parallel\n+ * @library \/test\/lib \/\n+ * @summary Tests that sun.gc.policy.name returns expected values for different GCs.\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\/sun.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n@@ -42,0 +53,11 @@\n+ *\/\n+\n+\/* @test TestPolicyNamePerfCounterG1\n+ * @bug 8210192\n+ * @requires vm.gc.G1\n+ * @library \/test\/lib \/\n+ * @summary Tests that sun.gc.policy.name returns expected values for different GCs.\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\/sun.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n@@ -48,1 +70,1 @@\n- * @requires vm.gc==\"null\" & !vm.graal.enabled\n+ * @requires vm.gc.ConcMarkSweep & !vm.graal.enabled\n","filename":"test\/hotspot\/jtreg\/gc\/TestPolicyNamePerfCounter.java","additions":25,"deletions":3,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @requires vm.gc==\"null\"\n@@ -67,0 +66,1 @@\n+import jtreg.SkippedException;\n@@ -68,0 +68,1 @@\n+import sun.hotspot.gc.GC;\n@@ -79,0 +80,1 @@\n+        boolean noneGCSupported = true;\n@@ -80,4 +82,19 @@\n-        verifySmallHeapSize(\"-XX:+UseParallelGC\", expectedMaxHeap);\n-        verifySmallHeapSize(\"-XX:+UseSerialGC\", expectedMaxHeap);\n-        verifySmallHeapSize(\"-XX:+UseG1GC\", expectedMaxHeap);\n-        verifySmallHeapSize(\"-XX:+UseConcMarkSweepGC\", expectedMaxHeap);\n+        if (GC.Parallel.isSupported()) {\n+            noneGCSupported = false;\n+            verifySmallHeapSize(\"-XX:+UseParallelGC\", expectedMaxHeap);\n+        }\n+        if (GC.Serial.isSupported()) {\n+            noneGCSupported = false;\n+            verifySmallHeapSize(\"-XX:+UseSerialGC\", expectedMaxHeap);\n+        }\n+        if (GC.G1.isSupported()) {\n+            noneGCSupported = false;\n+            verifySmallHeapSize(\"-XX:+UseG1GC\", expectedMaxHeap);\n+        }\n+        if (GC.ConcMarkSweep.isSupported()) {\n+            noneGCSupported = false;\n+            verifySmallHeapSize(\"-XX:+UseConcMarkSweepGC\", expectedMaxHeap);\n+        }\n+        if (noneGCSupported) {\n+            throw new SkippedException(\"Skipping test because none of Parallel\/Serial\/G1\/ConcMarkSweep is supported.\");\n+        }\n","filename":"test\/hotspot\/jtreg\/gc\/TestSmallHeap.java","additions":22,"deletions":5,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @test TestSystemGC\n+ * @test TestSystemGCSerial\n@@ -29,1 +29,1 @@\n- * @requires vm.gc==\"null\"\n+ * @requires vm.gc.Serial\n@@ -31,1 +31,0 @@\n- * @run main\/othervm gc.TestSystemGC\n@@ -33,0 +32,7 @@\n+ *\/\n+\n+\/*\n+ * @test TestSystemGCParallel\n+ * @key gc\n+ * @requires vm.gc.Parallel\n+ * @summary Runs System.gc() with different flags.\n@@ -35,0 +41,7 @@\n+ *\/\n+\n+\/*\n+ * @test TestSystemGCG1\n+ * @key gc\n+ * @requires vm.gc.G1\n+ * @summary Runs System.gc() with different flags.\n@@ -45,1 +58,1 @@\n- * @requires vm.gc==\"null\" & !vm.graal.enabled\n+ * @requires vm.gc.ConcMarkSweep & !vm.graal.enabled\n","filename":"test\/hotspot\/jtreg\/gc\/TestSystemGC.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @test TestAlignmentToUseLargePages\n+ * @test TestAlignmentToUseLargePagesSerial\n@@ -29,2 +29,0 @@\n- * @summary All parallel GC variants may use large pages without the requirement that the\n- * heap alignment is large page aligned. Other collectors also need to start up with odd sized heaps.\n@@ -32,1 +30,11 @@\n- * @requires vm.gc==\"null\"\n+ * @requires vm.gc.Serial\n+ * @run main\/othervm -Xms71M -Xmx91M -XX:+UseSerialGC -XX:+UseLargePages gc.arguments.TestAlignmentToUseLargePages\n+ * @run main\/othervm -Xms71M -Xmx91M -XX:+UseSerialGC -XX:-UseLargePages gc.arguments.TestAlignmentToUseLargePages\n+ *\/\n+\n+\/**\n+ * @test TestAlignmentToUseLargePagesParallel\n+ * @key gc regression\n+ * @summary All parallel GC variants may use large pages without the requirement that the heap alignment is large page aligned. Other collectors also need to start up with odd sized heaps.\n+ * @bug 8024396\n+ * @requires vm.gc.Parallel\n@@ -37,2 +45,7 @@\n- * @run main\/othervm -Xms71M -Xmx91M -XX:+UseSerialGC -XX:+UseLargePages gc.arguments.TestAlignmentToUseLargePages\n- * @run main\/othervm -Xms71M -Xmx91M -XX:+UseSerialGC -XX:-UseLargePages gc.arguments.TestAlignmentToUseLargePages\n+ *\/\n+\n+\/**\n+ * @test TestAlignmentToUseLargePagesG1\n+ * @key gc regression\n+ * @bug 8024396\n+ * @requires vm.gc.G1\n@@ -48,1 +61,1 @@\n- * @requires vm.gc==\"null\" & !vm.graal.enabled\n+ * @requires vm.gc.ConcMarkSweep & !vm.graal.enabled\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestAlignmentToUseLargePages.java","additions":20,"deletions":7,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @test TestMaxNewSize\n+ * @test TestMaxNewSizeSerial\n@@ -32,1 +32,1 @@\n- * @requires vm.gc==\"null\"\n+ * @requires vm.gc.Serial\n@@ -37,0 +37,13 @@\n+ * @author thomas.schatzl@oracle.com, jesper.wilhelmsson@oracle.com\n+ *\/\n+\n+\/*\n+ * @test TestMaxNewSizeParallel\n+ * @key gc\n+ * @bug 7057939\n+ * @summary Make sure that MaxNewSize always has a useful value after argument\n+ * processing.\n+ * @requires vm.gc.Parallel\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n@@ -38,0 +51,13 @@\n+ * @author thomas.schatzl@oracle.com, jesper.wilhelmsson@oracle.com\n+ *\/\n+\n+\/*\n+ * @test TestMaxNewSizeG1\n+ * @key gc\n+ * @bug 7057939\n+ * @summary Make sure that MaxNewSize always has a useful value after argument\n+ * processing.\n+ * @requires vm.gc.G1\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n@@ -47,1 +73,1 @@\n- * @requires vm.gc==\"null\" & !vm.graal.enabled\n+ * @requires vm.gc.ConcMarkSweep & !vm.graal.enabled\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMaxNewSize.java","additions":29,"deletions":3,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n- * @summary Test ergonomics decisions related to minimum and initial heap size.\n+ * @requires vm.gc.Parallel\n+ * @summary Test Parallel GC ergonomics decisions related to minimum and initial heap size.\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMinInitialErgonomics.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,1 +35,3 @@\n- * @run driver gc.arguments.TestParallelGCThreads\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox sun.hotspot.WhiteBox$WhiteBoxPermission\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI gc.arguments.TestParallelGCThreads\n@@ -38,0 +40,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -41,0 +45,2 @@\n+import jtreg.SkippedException;\n+import sun.hotspot.gc.GC;\n@@ -78,1 +84,17 @@\n-    for (String gc : new String[] {\"G1\", \"Parallel\", \"ConcMarkSweep\"}) {\n+    List<String> supportedGC = new ArrayList<String>();\n+\n+    if (GC.G1.isSupported()) {\n+      supportedGC.add(\"G1\");\n+    }\n+    if (GC.Parallel.isSupported()) {\n+      supportedGC.add(\"Parallel\");\n+    }\n+    if (GC.ConcMarkSweep.isSupported()) {\n+      supportedGC.add(\"ConcMarkSweep\");\n+    }\n+\n+    if (supportedGC.isEmpty()) {\n+      throw new SkippedException(\"Skipping test because none of G1\/Parallel\/ConcMarkSweep is supported.\");\n+    }\n+\n+    for (String gc : supportedGC) {\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestParallelGCThreads.java","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @requires vm.gc==\"null\"\n+ * @requires vm.gc.Parallel\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestParallelHeapSizeFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,3 @@\n- * @run driver gc.arguments.TestParallelRefProc\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox sun.hotspot.WhiteBox$WhiteBoxPermission\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI gc.arguments.TestParallelRefProc\n@@ -40,0 +42,3 @@\n+import jtreg.SkippedException;\n+import sun.hotspot.gc.GC;\n+\n@@ -43,6 +48,22 @@\n-        testFlag(new String[] { \"-XX:+UseSerialGC\" }, false);\n-        testFlag(new String[] { \"-XX:+UseConcMarkSweepGC\" }, false);\n-        testFlag(new String[] { \"-XX:+UseParallelGC\" }, false);\n-        testFlag(new String[] { \"-XX:+UseG1GC\", \"-XX:ParallelGCThreads=1\" }, false);\n-        testFlag(new String[] { \"-XX:+UseG1GC\", \"-XX:ParallelGCThreads=2\" }, true);\n-        testFlag(new String[] { \"-XX:+UseG1GC\", \"-XX:-ParallelRefProcEnabled\", \"-XX:ParallelGCThreads=2\" }, false);\n+        boolean noneGCSupported = true;\n+        if (GC.Serial.isSupported()) {\n+            noneGCSupported = false;\n+            testFlag(new String[] { \"-XX:+UseSerialGC\" }, false);\n+        }\n+        if (GC.ConcMarkSweep.isSupported()) {\n+            noneGCSupported = false;\n+            testFlag(new String[] { \"-XX:+UseConcMarkSweepGC\" }, false);\n+        }\n+        if (GC.Parallel.isSupported()) {\n+            noneGCSupported = false;\n+            testFlag(new String[] { \"-XX:+UseParallelGC\" }, false);\n+        }\n+        if (GC.G1.isSupported()) {\n+            noneGCSupported = false;\n+            testFlag(new String[] { \"-XX:+UseG1GC\", \"-XX:ParallelGCThreads=1\" }, false);\n+            testFlag(new String[] { \"-XX:+UseG1GC\", \"-XX:ParallelGCThreads=2\" }, true);\n+            testFlag(new String[] { \"-XX:+UseG1GC\", \"-XX:-ParallelRefProcEnabled\", \"-XX:ParallelGCThreads=2\" }, false);\n+        }\n+        if (noneGCSupported) {\n+            throw new SkippedException(\"Skipping test because none of Serial\/ConcMarkSweep\/Parallel\/G1 is supported.\");\n+        }\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestParallelRefProc.java","additions":28,"deletions":7,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @requires vm.gc==\"null\"\n+ * @requires vm.gc.Serial & vm.gc.G1\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestSelectDefaultGC.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @test TestUseCompressedOopsErgo\n+ * @test TestUseCompressedOopsErgoSerial\n@@ -31,1 +31,17 @@\n- * @requires vm.gc==\"null\"\n+ * @requires vm.gc.Serial\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\/sun.management\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ *                              sun.hotspot.WhiteBox$WhiteBoxPermission\n+ * @run main\/othervm gc.arguments.TestUseCompressedOopsErgo -XX:+UseSerialGC\n+ *\/\n+\n+\/*\n+ * @test TestUseCompressedOopsErgoParallel\n+ * @key gc\n+ * @bug 8010722\n+ * @summary Tests ergonomics for UseCompressedOops.\n+ * @requires vm.gc.Parallel\n@@ -39,1 +55,0 @@\n- * @run main\/othervm gc.arguments.TestUseCompressedOopsErgo -XX:+UseG1GC\n@@ -42,1 +57,16 @@\n- * @run main\/othervm gc.arguments.TestUseCompressedOopsErgo -XX:+UseSerialGC\n+ *\/\n+\n+\/*\n+ * @test TestUseCompressedOopsErgoG1\n+ * @key gc\n+ * @bug 8010722\n+ * @summary Tests ergonomics for UseCompressedOops.\n+ * @requires vm.gc.G1\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\/sun.management\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ *                              sun.hotspot.WhiteBox$WhiteBoxPermission\n+ * @run main\/othervm gc.arguments.TestUseCompressedOopsErgo -XX:+UseG1GC\n@@ -50,1 +80,1 @@\n- * @requires vm.gc==\"null\" & !vm.graal.enabled\n+ * @requires vm.gc.ConcMarkSweep & !vm.graal.enabled\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestUseCompressedOopsErgo.java","additions":35,"deletions":5,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @requires !vm.graal.enabled\n+ * @requires vm.gc.ConcMarkSweep & !vm.graal.enabled\n","filename":"test\/hotspot\/jtreg\/gc\/class_unloading\/TestCMSClassUnloadingEnabledHWM.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @test\n+ * @test TestClassUnloadingDisabledSerial\n@@ -30,1 +30,0 @@\n- * @requires vm.gc == null\n@@ -33,0 +32,1 @@\n+ * @requires vm.gc.Serial\n@@ -41,3 +41,0 @@\n- *                   -XX:-ClassUnloading -XX:+UseG1GC gc.class_unloading.TestClassUnloadingDisabled\n- *\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n@@ -46,0 +43,16 @@\n+ *\/\n+\n+\/*\n+ * @test TestClassUnloadingDisabledParallel\n+ * @key gc\n+ * @bug 8114823\n+ * @requires vm.opt.ExplicitGCInvokesConcurrent != true\n+ * @requires vm.opt.ClassUnloading != true\n+ * @requires vm.gc.Parallel\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ *                              sun.hotspot.WhiteBox$WhiteBoxPermission\n+ *\n@@ -52,1 +65,20 @@\n- * @test\n+ * @test TestClassUnloadingDisabledG1\n+ * @key gc\n+ * @bug 8114823\n+ * @requires vm.opt.ExplicitGCInvokesConcurrent != true\n+ * @requires vm.opt.ClassUnloading != true\n+ * @requires vm.gc.G1\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ *                              sun.hotspot.WhiteBox$WhiteBoxPermission\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -XX:-ClassUnloading -XX:+UseG1GC gc.class_unloading.TestClassUnloadingDisabled\n+ *\n+ *\/\n+\n+\/*\n+ * @test TestClassUnloadingDisabledCMS\n@@ -56,1 +88,1 @@\n- * @requires vm.gc==\"null\" & !vm.graal.enabled\n+ * @requires vm.gc.ConcMarkSweep & !vm.graal.enabled\n","filename":"test\/hotspot\/jtreg\/gc\/class_unloading\/TestClassUnloadingDisabled.java","additions":39,"deletions":7,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @requires vm.gc.G1\n","filename":"test\/hotspot\/jtreg\/gc\/class_unloading\/TestG1ClassUnloadingHWM.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @requires !vm.graal.enabled\n+ * @requires vm.gc.ConcMarkSweep & !vm.graal.enabled\n","filename":"test\/hotspot\/jtreg\/gc\/cms\/GuardShrinkWarning.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @requires vm.gc==\"null\"\n@@ -41,0 +40,1 @@\n+import jtreg.SkippedException;\n@@ -45,0 +45,1 @@\n+    boolean noneGCSupported = true;\n@@ -46,1 +47,4 @@\n-    testDynamicNumberOfGCThreads(\"UseConcMarkSweepGC\");\n+    if (GC.ConcMarkSweep.isSupported()) {\n+      noneGCSupported = false;\n+      testDynamicNumberOfGCThreads(\"UseConcMarkSweepGC\");\n+    }\n@@ -48,1 +52,4 @@\n-    testDynamicNumberOfGCThreads(\"UseG1GC\");\n+    if (GC.G1.isSupported()) {\n+      noneGCSupported = false;\n+      testDynamicNumberOfGCThreads(\"UseG1GC\");\n+    }\n@@ -50,1 +57,4 @@\n-    testDynamicNumberOfGCThreads(\"UseParallelGC\");\n+    if (GC.Parallel.isSupported()) {\n+      noneGCSupported = false;\n+      testDynamicNumberOfGCThreads(\"UseParallelGC\");\n+    }\n@@ -53,1 +63,6 @@\n-        testDynamicNumberOfGCThreads(\"UseShenandoahGC\");\n+      noneGCSupported = false;\n+      testDynamicNumberOfGCThreads(\"UseShenandoahGC\");\n+    }\n+\n+    if (noneGCSupported) {\n+      throw new SkippedException(\"Skipping test because none of ConcMarkSweep\/G1\/Parallel\/Shenandoah is supported.\");\n","filename":"test\/hotspot\/jtreg\/gc\/ergonomics\/TestDynamicNumberOfGCThreads.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @requires vm.gc==\"null\"\n@@ -41,0 +40,1 @@\n+import jtreg.SkippedException;\n@@ -45,0 +45,1 @@\n+    boolean noneGCSupported = true;\n@@ -46,1 +47,4 @@\n-    testInitialGCThreadLogging(\"UseConcMarkSweepGC\", \"GC Thread\");\n+    if (GC.ConcMarkSweep.isSupported()) {\n+      noneGCSupported = false;\n+      testInitialGCThreadLogging(\"UseConcMarkSweepGC\", \"GC Thread\");\n+    }\n@@ -48,1 +52,4 @@\n-    testInitialGCThreadLogging(\"UseG1GC\", \"GC Thread\");\n+    if (GC.G1.isSupported()) {\n+      noneGCSupported = false;\n+      testInitialGCThreadLogging(\"UseG1GC\", \"GC Thread\");\n+    }\n@@ -50,1 +57,4 @@\n-    testInitialGCThreadLogging(\"UseParallelGC\", \"ParGC Thread\");\n+    if (GC.Parallel.isSupported()) {\n+      noneGCSupported = false;\n+      testInitialGCThreadLogging(\"UseParallelGC\", \"ParGC Thread\");\n+    }\n@@ -53,1 +63,6 @@\n-        testInitialGCThreadLogging(\"UseShenandoahGC\", \"Shenandoah GC Thread\");\n+      noneGCSupported = false;\n+      testInitialGCThreadLogging(\"UseShenandoahGC\", \"Shenandoah GC Thread\");\n+    }\n+\n+    if (noneGCSupported) {\n+      throw new SkippedException(\"Skipping test because none of ConcMarkSweep\/G1\/Parallel\/Shenandoah is supported.\");\n","filename":"test\/hotspot\/jtreg\/gc\/ergonomics\/TestInitialGCThreadLogging.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+ * @requires vm.gc.G1\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestShrinkDefragmentedHeap.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @requires vm.gc==\"null\"\n@@ -42,0 +41,1 @@\n+import jtreg.SkippedException;\n@@ -46,4 +46,18 @@\n-    testGCId(\"UseParallelGC\");\n-    testGCId(\"UseG1GC\");\n-    testGCId(\"UseConcMarkSweepGC\");\n-    testGCId(\"UseSerialGC\");\n+    boolean noneGCSupported = true;\n+\n+    if (GC.Parallel.isSupported()) {\n+      noneGCSupported = false;\n+      testGCId(\"UseParallelGC\");\n+    }\n+    if (GC.G1.isSupported()) {\n+      noneGCSupported = false;\n+      testGCId(\"UseG1GC\");\n+    }\n+    if (GC.ConcMarkSweep.isSupported()) {\n+      noneGCSupported = false;\n+      testGCId(\"UseConcMarkSweepGC\");\n+    }\n+    if (GC.Serial.isSupported()) {\n+      noneGCSupported = false;\n+      testGCId(\"UseSerialGC\");\n+    }\n@@ -51,1 +65,6 @@\n-        testGCId(\"UseShenandoahGC\");\n+      noneGCSupported = false;\n+      testGCId(\"UseShenandoahGC\");\n+    }\n+\n+    if (noneGCSupported) {\n+      throw new SkippedException(\"Skipping test because none of Parallel\/G1\/ConcMarkSweep\/Serial\/Shenandoah is supported.\");\n","filename":"test\/hotspot\/jtreg\/gc\/logging\/TestGCId.java","additions":25,"deletions":6,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @requires vm.gc.G1\n","filename":"test\/hotspot\/jtreg\/gc\/logging\/TestPrintReferences.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @requires !vm.graal.enabled\n+ * @requires vm.gc.ConcMarkSweep & !vm.graal.enabled\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/TestMetaspaceCMSCancel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-\/* @test TestMetaspacePerfCounters\n+\/* @test TestMetaspacePerfCountersSerial\n@@ -42,1 +42,1 @@\n- * @requires vm.gc==\"null\"\n+ * @requires vm.gc.Serial\n@@ -51,3 +51,0 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseParallelGC -XX:+UseParallelOldGC gc.metaspace.TestMetaspacePerfCounters\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseG1GC gc.metaspace.TestMetaspacePerfCounters\n- *\n@@ -55,0 +52,13 @@\n+ *\/\n+\n+\/* @test TestMetaspacePerfCountersParallel\n+ * @bug 8014659\n+ * @requires vm.gc.Parallel\n+ * @library \/test\/lib \/\n+ * @summary Tests that performance counters for metaspace and compressed class\n+ *          space exists and works.\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\/sun.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseParallelGC -XX:+UseParallelOldGC gc.metaspace.TestMetaspacePerfCounters\n@@ -56,0 +66,13 @@\n+ *\/\n+\n+\/* @test TestMetaspacePerfCountersG1\n+ * @bug 8014659\n+ * @requires vm.gc.G1\n+ * @library \/test\/lib \/\n+ * @summary Tests that performance counters for metaspace and compressed class\n+ *          space exists and works.\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\/sun.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:+UsePerfData -XX:+UseG1GC gc.metaspace.TestMetaspacePerfCounters\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/TestMetaspacePerfCounters.java","additions":28,"deletions":5,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @requires vm.gc.Parallel\n","filename":"test\/hotspot\/jtreg\/gc\/parallel\/AdaptiveGCBoundary.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @requires !vm.graal.enabled\n+ * @requires vm.gc.ConcMarkSweep & !vm.graal.enabled\n","filename":"test\/hotspot\/jtreg\/gc\/startup_warnings\/TestCMS.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+* @requires vm.gc.G1\n","filename":"test\/hotspot\/jtreg\/gc\/startup_warnings\/TestG1.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+* @requires vm.gc.Parallel\n","filename":"test\/hotspot\/jtreg\/gc\/startup_warnings\/TestParallelGC.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+* @requires vm.gc.Parallel\n","filename":"test\/hotspot\/jtreg\/gc\/startup_warnings\/TestParallelScavengeSerialOld.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}