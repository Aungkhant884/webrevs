{"files":[{"patch":"@@ -746,0 +746,15 @@\n+  bool need_trampoline = far_branches();\n+  if (!need_trampoline && entry.rspec().type() == relocInfo::runtime_call_type && !CodeCache::contains(entry.target())) {\n+    \/\/ If it is a runtime call of an address outside small CodeCache,\n+    \/\/ we need to check whether it is in range.\n+    address target = entry.target();\n+    assert(target < CodeCache::low_bound() || target >= CodeCache::high_bound(), \"target is inside CodeCache\");\n+    \/\/ Case 1: -------T-------L====CodeCache====H-------\n+    \/\/                ^-------longest branch---|\n+    \/\/ Case 2: -------L====CodeCache====H-------T-------\n+    \/\/                |-------longest branch ---^\n+    address longest_branch_start = (target < CodeCache::low_bound()) ? CodeCache::high_bound() - NativeInstruction::instruction_size\n+                                                                     : CodeCache::low_bound();\n+    need_trampoline = !reachable_from_branch_at(longest_branch_start, target);\n+  }\n+\n@@ -747,1 +762,1 @@\n-  if (far_branches()) {\n+  if (need_trampoline) {\n@@ -768,1 +783,1 @@\n-  if (!far_branches()) {\n+  if (!need_trampoline) {\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"}]}