{"files":[{"patch":"@@ -32,1 +32,1 @@\n- * @run main gc.TestAllocateHeapAt\n+ * @run driver gc.TestAllocateHeapAt\n@@ -43,7 +43,0 @@\n-    ArrayList<String> vmOpts = new ArrayList<>();\n-\n-    String testVmOptsStr = System.getProperty(\"test.java.opts\");\n-    if (!testVmOptsStr.isEmpty()) {\n-      String[] testVmOpts = testVmOptsStr.split(\" \");\n-      Collections.addAll(vmOpts, testVmOpts);\n-    }\n@@ -51,14 +44,8 @@\n-    Collections.addAll(vmOpts, new String[] {\"-XX:AllocateHeapAt=\" + test_dir,\n-                                             \"-Xlog:gc+heap=info\",\n-                                             \"-Xmx32m\",\n-                                             \"-Xms32m\",\n-                                             \"-version\"});\n-\n-    System.out.print(\"Testing:\\n\" + JDKToolFinder.getJDKTool(\"java\"));\n-    for (int i = 0; i < vmOpts.size(); i += 1) {\n-      System.out.print(\" \" + vmOpts.get(i));\n-    }\n-    System.out.println();\n-\n-    ProcessBuilder pb =\n-      ProcessTools.createJavaProcessBuilder(vmOpts.toArray(new String[vmOpts.size()]));\n+    String[] flags = {\n+        \"-XX:AllocateHeapAt=\" + test_dir,\n+        \"-Xlog:gc+heap=info\",\n+        \"-Xmx32m\",\n+        \"-Xms32m\",\n+        \"-version\"};\n+\n+    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, flags);\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocateHeapAt.java","additions":9,"deletions":22,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main gc.TestAllocateHeapAtError\n+ * @run driver gc.TestAllocateHeapAtError\n@@ -36,1 +36,0 @@\n-import jdk.test.lib.JDKToolFinder;\n@@ -39,2 +38,0 @@\n-import java.util.ArrayList;\n-import java.util.Collections;\n@@ -45,7 +42,0 @@\n-    ArrayList<String> vmOpts = new ArrayList<>();\n-\n-    String testVmOptsStr = System.getProperty(\"test.java.opts\");\n-    if (!testVmOptsStr.isEmpty()) {\n-      String[] testVmOpts = testVmOptsStr.split(\" \");\n-      Collections.addAll(vmOpts, testVmOpts);\n-    }\n@@ -59,11 +49,6 @@\n-    Collections.addAll(vmOpts, new String[] {\"-XX:AllocateHeapAt=\" + f.getName(),\n-                                             \"-Xlog:gc+heap=info\",\n-                                             \"-Xmx32m\",\n-                                             \"-Xms32m\",\n-                                             \"-version\"});\n-\n-    System.out.print(\"Testing:\\n\" + JDKToolFinder.getJDKTool(\"java\"));\n-    for (int i = 0; i < vmOpts.size(); i += 1) {\n-      System.out.print(\" \" + vmOpts.get(i));\n-    }\n-    System.out.println();\n+    String[] flags = {\n+        \"-XX:AllocateHeapAt=\" + f.getName(),\n+        \"-Xlog:gc+heap=info\",\n+        \"-Xmx32m\",\n+        \"-Xms32m\",\n+        \"-version\"};\n@@ -71,2 +56,1 @@\n-    ProcessBuilder pb =\n-      ProcessTools.createJavaProcessBuilder(vmOpts.toArray(new String[vmOpts.size()]));\n+    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, flags);\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocateHeapAtError.java","additions":8,"deletions":24,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main\/timeout=360 gc.TestAllocateHeapAtMultiple\n+ * @run driver\/timeout=360 gc.TestAllocateHeapAtMultiple\n@@ -43,2 +43,1 @@\n-    ArrayList<String> vmOpts = new ArrayList<>();\n-    String[] testVmOpts = null;\n+    ArrayList<String> flags = new ArrayList<>();\n@@ -48,12 +47,7 @@\n-    String testVmOptsStr = System.getProperty(\"test.java.opts\");\n-    if (!testVmOptsStr.isEmpty()) {\n-      testVmOpts = testVmOptsStr.split(\" \");\n-    }\n-\n-    \/\/ Extra options for each of the sub-tests\n-    String[] extraOptsList = new String[] {\n-      \"-Xmx32m -Xms32m -XX:+UseCompressedOops\",     \/\/ 1. With compressedoops enabled.\n-      \"-Xmx32m -Xms32m -XX:-UseCompressedOops\",     \/\/ 2. With compressedoops disabled.\n-      \"-Xmx32m -Xms32m -XX:HeapBaseMinAddress=3g\",  \/\/ 3. With user specified HeapBaseMinAddress.\n-      \"-Xmx32m -Xms32m -XX:+UseLargePages\",         \/\/ 4. Set UseLargePages.\n-      \"-Xmx32m -Xms32m -XX:+UseNUMA\"                \/\/ 5. Set UseNUMA.\n+    \/\/ Extra flags for each of the sub-tests\n+    String[][] extraFlagsList = new String[][] {\n+      {\"-Xmx32m\", \"-Xms32m\", \"-XX:+UseCompressedOops\"},     \/\/ 1. With compressedoops enabled.\n+      {\"-Xmx32m\", \"-Xms32m\", \"-XX:-UseCompressedOops\"},     \/\/ 2. With compressedoops disabled.\n+      {\"-Xmx32m\", \"-Xms32m\", \"-XX:HeapBaseMinAddress=3g\"},  \/\/ 3. With user specified HeapBaseMinAddress.\n+      {\"-Xmx32m\", \"-Xms32m\", \"-XX:+UseLargePages\"},         \/\/ 4. Set UseLargePages.\n+      {\"-Xmx32m\", \"-Xms32m\", \"-XX:+UseNUMA\"}                \/\/ 5. Set UseNUMA.\n@@ -62,20 +56,8 @@\n-    for(String extraOpts : extraOptsList) {\n-      vmOpts.clear();\n-      if(testVmOpts != null) {\n-        Collections.addAll(vmOpts, testVmOpts);\n-      }\n-      \/\/ Add extra options specific to the sub-test.\n-      String[] extraOptsArray = extraOpts.split(\" \");\n-      if(extraOptsArray != null) {\n-        Collections.addAll(vmOpts, extraOptsArray);\n-      }\n-      \/\/ Add common options\n-      Collections.addAll(vmOpts, new String[] {\"-XX:AllocateHeapAt=\" + test_dir,\n-                                               \"-Xlog:gc+heap=info\",\n-                                               \"-version\"});\n-\n-      System.out.print(\"Testing:\\n\" + JDKToolFinder.getJDKTool(\"java\"));\n-      for (int i = 0; i < vmOpts.size(); i += 1) {\n-        System.out.print(\" \" + vmOpts.get(i));\n-      }\n-      System.out.println();\n+    for (String[] extraFlags : extraFlagsList) {\n+      flags.clear();\n+      \/\/ Add extra flags specific to the sub-test.\n+      Collections.addAll(flags, extraFlags);\n+      \/\/ Add common flags\n+      Collections.addAll(flags, new String[] {\"-XX:AllocateHeapAt=\" + test_dir,\n+                                              \"-Xlog:gc+heap=info\",\n+                                              \"-version\"});\n@@ -84,1 +66,1 @@\n-        ProcessTools.createJavaProcessBuilder(vmOpts.toArray(new String[vmOpts.size()]));\n+          ProcessTools.createJavaProcessBuilder(true, flags.toArray(String[]::new));\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocateHeapAtMultiple.java","additions":18,"deletions":36,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run main gc.TestVerifyDuringStartup\n+ * @run driver gc.TestVerifyDuringStartup\n@@ -36,1 +36,0 @@\n-import jdk.test.lib.JDKToolFinder;\n@@ -39,2 +38,0 @@\n-import java.util.ArrayList;\n-import java.util.Collections;\n@@ -44,21 +41,8 @@\n-    ArrayList<String> vmOpts = new ArrayList<>();\n-\n-    String testVmOptsStr = System.getProperty(\"test.java.opts\");\n-    if (!testVmOptsStr.isEmpty()) {\n-      String[] testVmOpts = testVmOptsStr.split(\" \");\n-      Collections.addAll(vmOpts, testVmOpts);\n-    }\n-    Collections.addAll(vmOpts, new String[] {\"-XX:-UseTLAB\",\n-                                             \"-XX:+UnlockDiagnosticVMOptions\",\n-                                             \"-XX:+VerifyDuringStartup\",\n-                                             \"-Xlog:gc+verify=debug\",\n-                                             \"-version\"});\n-\n-    System.out.print(\"Testing:\\n\" + JDKToolFinder.getJDKTool(\"java\"));\n-    for (int i = 0; i < vmOpts.size(); i += 1) {\n-      System.out.print(\" \" + vmOpts.get(i));\n-    }\n-    System.out.println();\n-\n-    ProcessBuilder pb =\n-      ProcessTools.createJavaProcessBuilder(vmOpts.toArray(new String[vmOpts.size()]));\n+    String[] flags = {\n+        \"-XX:-UseTLAB\",\n+        \"-XX:+UnlockDiagnosticVMOptions\",\n+        \"-XX:+VerifyDuringStartup\",\n+        \"-Xlog:gc+verify=debug\",\n+        \"-version\"};\n+\n+    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, flags);\n","filename":"test\/hotspot\/jtreg\/gc\/TestVerifyDuringStartup.java","additions":9,"deletions":25,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -155,1 +155,0 @@\n-   * @param useTestDotJavaDotOpts Use test.java.opts as part of the VM argument string\n@@ -158,1 +157,1 @@\n-  public static OutputAnalyzer runWhiteBoxTest(String[] vmargs, String classname, String[] arguments, boolean useTestDotJavaDotOpts) throws Exception {\n+  public static OutputAnalyzer runWhiteBoxTest(String[] vmargs, String classname, String[] arguments) throws Exception {\n@@ -167,10 +166,0 @@\n-    if (useTestDotJavaDotOpts) {\n-      \/\/ System.getProperty(\"test.java.opts\") is '' if no options is set,\n-      \/\/ we need to skip such a result\n-      String[] externalVMOpts = new String[0];\n-      if (System.getProperty(\"test.java.opts\") != null && System.getProperty(\"test.java.opts\").length() != 0) {\n-        externalVMOpts = System.getProperty(\"test.java.opts\").split(\" \");\n-      }\n-      finalargs.addAll(Arrays.asList(externalVMOpts));\n-    }\n-\n@@ -182,1 +171,1 @@\n-    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(finalargs.toArray(new String[0]));\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(finalargs.toArray(String[]::new));\n@@ -190,1 +179,1 @@\n-    OutputAnalyzer output = runWhiteBoxTest(args, ErgoArgsPrinter.class.getName(), new String[] {}, false);\n+    OutputAnalyzer output = runWhiteBoxTest(args, ErgoArgsPrinter.class.getName(), new String[] {});\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMaxHeapSizeTools.java","additions":3,"deletions":14,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n- *                              sun.hotspot.WhiteBox$WhiteBoxPermission\n- * @run main\/othervm gc.arguments.TestUseCompressedOopsErgo -XX:+UseSerialGC\n+ *                                sun.hotspot.WhiteBox$WhiteBoxPermission\n+ * @run driver gc.arguments.TestUseCompressedOopsErgo -XX:+UseSerialGC\n@@ -54,3 +54,3 @@\n- *                              sun.hotspot.WhiteBox$WhiteBoxPermission\n- * @run main\/othervm gc.arguments.TestUseCompressedOopsErgo -XX:+UseParallelGC\n- * @run main\/othervm gc.arguments.TestUseCompressedOopsErgo -XX:+UseParallelGC -XX:-UseParallelOldGC\n+ *                                sun.hotspot.WhiteBox$WhiteBoxPermission\n+ * @run driver gc.arguments.TestUseCompressedOopsErgo -XX:+UseParallelGC\n+ * @run driver gc.arguments.TestUseCompressedOopsErgo -XX:+UseParallelGC -XX:-UseParallelOldGC\n@@ -71,2 +71,2 @@\n- *                              sun.hotspot.WhiteBox$WhiteBoxPermission\n- * @run main\/othervm gc.arguments.TestUseCompressedOopsErgo -XX:+UseG1GC\n+ *                                sun.hotspot.WhiteBox$WhiteBoxPermission\n+ * @run driver gc.arguments.TestUseCompressedOopsErgo -XX:+UseG1GC\n@@ -87,2 +87,2 @@\n- *                              sun.hotspot.WhiteBox$WhiteBoxPermission\n- * @run main\/othervm gc.arguments.TestUseCompressedOopsErgo -XX:+UseConcMarkSweepGC\n+ *                                sun.hotspot.WhiteBox$WhiteBoxPermission\n+ * @run driver gc.arguments.TestUseCompressedOopsErgo -XX:+UseConcMarkSweepGC\n@@ -103,2 +103,2 @@\n- *                              sun.hotspot.WhiteBox$WhiteBoxPermission\n- * @run main\/othervm gc.arguments.TestUseCompressedOopsErgo -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC\n+ *                                sun.hotspot.WhiteBox$WhiteBoxPermission\n+ * @run driver gc.arguments.TestUseCompressedOopsErgo -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestUseCompressedOopsErgo.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-    OutputAnalyzer output = runWhiteBoxTest(vmargs, DetermineMaxHeapForCompressedOops.class.getName(), new String[] {}, false);\n+    OutputAnalyzer output = runWhiteBoxTest(vmargs, DetermineMaxHeapForCompressedOops.class.getName(), new String[] {});\n@@ -81,1 +81,0 @@\n-   * @param useTestDotJavaDotOpts Use test.java.opts as part of the VM argument string\n@@ -84,1 +83,1 @@\n-  public static OutputAnalyzer runWhiteBoxTest(String[] vmargs, String classname, String[] arguments, boolean useTestDotJavaDotOpts) throws Exception {\n+  public static OutputAnalyzer runWhiteBoxTest(String[] vmargs, String classname, String[] arguments) throws Exception {\n@@ -93,10 +92,0 @@\n-    if (useTestDotJavaDotOpts) {\n-      \/\/ System.getProperty(\"test.java.opts\") is '' if no options is set,\n-      \/\/ we need to skip such a result\n-      String[] externalVMOpts = new String[0];\n-      if (System.getProperty(\"test.java.opts\") != null && System.getProperty(\"test.java.opts\").length() != 0) {\n-        externalVMOpts = System.getProperty(\"test.java.opts\").split(\" \");\n-      }\n-      finalargs.addAll(Arrays.asList(externalVMOpts));\n-    }\n-\n@@ -108,1 +97,1 @@\n-    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(finalargs.toArray(new String[0]));\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(finalargs.toArray(String[]::new));\n@@ -118,1 +107,1 @@\n-    return result.toArray(new String[0]);\n+    return result.toArray(String[]::new);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestUseCompressedOopsErgoTools.java","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- *                              sun.hotspot.WhiteBox$WhiteBoxPermission\n+ *                                sun.hotspot.WhiteBox$WhiteBoxPermission\n@@ -38,2 +38,2 @@\n- * @run main gc.g1.TestHumongousCodeCacheRoots\n-*\/\n+ * @run driver gc.g1.TestHumongousCodeCacheRoots\n+ *\/\n@@ -95,1 +95,0 @@\n-   * @param useTestDotJavaDotOpts Use test.java.opts as part of the VM argument string\n@@ -98,1 +97,1 @@\n-  public static OutputAnalyzer runWhiteBoxTest(String[] vmargs, String classname, String[] arguments, boolean useTestDotJavaDotOpts) throws Exception {\n+  public static OutputAnalyzer runWhiteBoxTest(String[] vmargs, String classname, String[] arguments) throws Exception {\n@@ -107,10 +106,0 @@\n-    if (useTestDotJavaDotOpts) {\n-      \/\/ System.getProperty(\"test.java.opts\") is '' if no options is set,\n-      \/\/ we need to skip such a result\n-      String[] externalVMOpts = new String[0];\n-      if (System.getProperty(\"test.java.opts\") != null && System.getProperty(\"test.java.opts\").length() != 0) {\n-        externalVMOpts = System.getProperty(\"test.java.opts\").split(\" \");\n-      }\n-      finalargs.addAll(Arrays.asList(externalVMOpts));\n-    }\n-\n@@ -122,1 +111,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(finalargs.toArray(new String[0]));\n+    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(finalargs.toArray(String[]::new));\n@@ -136,2 +125,1 @@\n-    runWhiteBoxTest(baseArguments, TestHumongousCodeCacheRootsHelper.class.getName(),\n-      new String[] {}, false);\n+    runWhiteBoxTest(baseArguments, TestHumongousCodeCacheRootsHelper.class.getName(), new String[] { });\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestHumongousCodeCacheRoots.java","additions":6,"deletions":18,"binary":false,"changes":24,"status":"modified"}]}