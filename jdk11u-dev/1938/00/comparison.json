{"files":[{"patch":"@@ -245,3 +245,2 @@\n-    p->set_klass(klass);\n-    p->set_next(bucket(index));\n-    set_entry(index, p);\n+    Hashtable<InstanceKlass*, mtClass>::add_entry(index, p);\n+\n@@ -481,2 +480,1 @@\n-      probe->name()->print_on(st);\n-      st->print(\" , loaders:\");\n+      st->print(\"Symbol: %s loaders:\", probe->name()->as_C_string());\n@@ -484,0 +482,2 @@\n+        st->cr();\n+        st->print(\"    \");\n@@ -485,1 +485,0 @@\n-        st->print(\", \");\n","filename":"src\/hotspot\/share\/classfile\/loaderConstraints.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1347,6 +1347,0 @@\n-  \/\/ The following guarantee is meant to ensure that no loader constraints\n-  \/\/ exist yet, since the constraints table is not shared.  This becomes\n-  \/\/ more important now that we don't re-initialize vtables\/itables for\n-  \/\/ shared classes at runtime, where constraints were previously created.\n-  guarantee(SystemDictionary::constraints()->number_of_entries() == 0,\n-            \"loader constraints are not saved\");\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+            output.shouldNotContain(\"constraints=0\");\n","filename":"test\/hotspot\/jtreg\/runtime\/SharedArchiveFile\/DumpSymbolAndStringTable.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}