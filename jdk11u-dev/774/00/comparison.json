{"files":[{"patch":"@@ -996,0 +996,8 @@\n+    if (phi->is_local()) {\n+      for (int i = 0; i < phi->operand_count(); i++) {\n+        Value op = phi->operand_at(i);\n+        if (op != NULL && op->type()->is_illegal()) {\n+          bailout(\"illegal phi operand\");\n+        }\n+      }\n+    }\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8271202\n+ * @requires vm.debug == true & vm.compiler1.enabled\n+ * @run main\/othervm -Xbatch -XX:TieredStopAtLevel=1 -XX:+DeoptimizeALot\n+ *                   Test8271202\n+ *\/\n+\n+public class Test8271202 {\n+    public static void main(String[] strArr) {\n+        try {\n+            test();\n+        } catch (Exception e) {\n+            \/\/ Expected\n+        }\n+    }\n+\n+    static void test() {\n+        long l6 = 10L;\n+        int counter = 0;\n+        int i2, i26, i29, iArr[] = new int[400];\n+        boolean b3 = true;\n+        for (int smallinvoc = 0; smallinvoc < 139; smallinvoc++) {\n+        }\n+        for (i2 = 13; i2 < 1000; i2++) {\n+            for (i26 = 2; i26 < 114; l6 += 2) {\n+                \/\/ Infinite loop\n+                if (b3) {\n+                    for (i29 = 1; i29 < 2; i29++) {\n+                        try {\n+                            iArr[i26] = 0;\n+                        } catch (ArithmeticException a_e) {\n+                        }\n+                    }\n+                }\n+                counter++;\n+                if (counter == 100000) {\n+                    throw new RuntimeException(\"expected\");\n+                }\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/Test8271202.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"}]}