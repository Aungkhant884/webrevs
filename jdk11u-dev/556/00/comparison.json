{"files":[{"patch":"@@ -539,2 +539,0 @@\n-java\/lang\/management\/ThreadMXBean\/AllThreadIds.java             8131745 generic-all\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,4 @@\n-import java.time.Instant;\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n@@ -64,0 +67,2 @@\n+    private static final Set<Long> allThreadIds = new HashSet<>();\n+\n@@ -69,1 +74,1 @@\n-    private static int prevLiveThreadCount = 0;\n+    private static long prevLiveTestThreadCount = 0;\n@@ -98,3 +103,5 @@\n-            allThreads[i] = new MyThread(i);\n-            allThreads[i].setDaemon(i < DAEMON_THREADS);\n-            allThreads[i].start();\n+            Thread thread = new MyThread(i);\n+            thread.setDaemon(i < DAEMON_THREADS);\n+            thread.start();\n+            allThreadIds.add(thread.getId());\n+            allThreads[i] = thread;\n@@ -110,5 +117,2 @@\n-        long[] list = mbean.getAllThreadIds();\n-\n-        for (int i = 0; i < ALL_THREADS; i++) {\n-            long expectedId = allThreads[i].getId();\n-            boolean found = false;\n+        Set<Long> currentThreadIds = new HashSet<>();\n+        Arrays.stream(mbean.getAllThreadIds()).forEach(currentThreadIds::add);\n@@ -116,0 +120,2 @@\n+        if (!currentThreadIds.containsAll(allThreadIds)) {\n+            testFailed = true;\n@@ -117,17 +123,1 @@\n-                System.out.print(\"Looking for thread with id \" + expectedId);\n-            }\n-            for (int j = 0; j < list.length; j++) {\n-                if (expectedId == list[j]) {\n-                    found = true;\n-                    break;\n-                }\n-            }\n-\n-            if (!found) {\n-                testFailed = true;\n-            }\n-            if (trace) {\n-                if (!found) {\n-                    System.out.print(\". TEST FAILED.\");\n-                }\n-                System.out.println();\n+                System.out.print(\". TEST FAILED.\");\n@@ -204,3 +194,1 @@\n-                                         int numTerminatedThreads)\n-        throws Exception {\n-\n+                                         int numTerminatedThreads) {\n@@ -210,1 +198,1 @@\n-        checkThreadIds();\n+        checkThreadIds(numNewThreads, numTerminatedThreads);\n@@ -214,2 +202,1 @@\n-                                         int numTerminatedThreads)\n-        throws InterruptedException {\n+                                         int numTerminatedThreads) {\n@@ -217,11 +204,9 @@\n-\n-        waitTillEquals(\n-            diff + prevLiveThreadCount,\n-            ()->(long)mbean.getThreadCount(),\n-            \"Unexpected number of live threads: \" +\n-                \" Prev live = %1$d Current live = ${provided} Threads added = %2$d\" +\n-                \" Threads terminated = %3$d\",\n-            ()->prevLiveThreadCount,\n-            ()->numNewThreads,\n-            ()->numTerminatedThreads\n-        );\n+        long threadCount = mbean.getThreadCount();\n+        long expectedThreadCount = prevLiveTestThreadCount + diff;\n+        \/\/ Check that number of live test threads is no less\n+        \/\/ than number of all threads returned by mbean.getThreadCount()\n+        if (threadCount < expectedThreadCount) {\n+            testFailed = true;\n+            System.err.println(MessageFormat.format(\"Unexpected number of threads count %d.\" +\n+                    \"The expected number is %d or greater\", threadCount, expectedThreadCount));\n+        }\n@@ -230,10 +215,8 @@\n-    private static void checkPeakThreads(int numNewThreads)\n-        throws InterruptedException {\n-\n-        waitTillEquals(numNewThreads + prevPeakThreadCount,\n-            ()->(long)mbean.getPeakThreadCount(),\n-            \"Unexpected number of peak threads: \" +\n-                \" Prev peak = %1$d Current peak = ${provided} Threads added = %2$d\",\n-            ()->prevPeakThreadCount,\n-            ()->numNewThreads\n-        );\n+    private static void checkPeakThreads(int numNewThreads) {\n+        long peakThreadCount = mbean.getPeakThreadCount();\n+        long expectedThreadCount = Math.max(prevPeakThreadCount, numNewThreads);\n+        if (peakThreadCount < expectedThreadCount) {\n+            testFailed = true;\n+            System.err.println(MessageFormat.format(\"Unexpected number of peak threads count %d.\" +\n+                    \"The expected number is %d or greater\", peakThreadCount, expectedThreadCount));\n+        }\n@@ -242,10 +225,8 @@\n-    private static void checkTotalThreads(int numNewThreads)\n-        throws InterruptedException {\n-\n-        waitTillEquals(numNewThreads + prevTotalThreadCount,\n-            ()->mbean.getTotalStartedThreadCount(),\n-            \"Unexpected number of total threads: \" +\n-                \" Prev Total = %1$d Current Total = ${provided} Threads added = %2$d\",\n-            ()->prevTotalThreadCount,\n-            ()->numNewThreads\n-        );\n+    private static void checkTotalThreads(int numNewThreads) {\n+        long totalThreadCount = mbean.getTotalStartedThreadCount();\n+        long expectedThreadCount = prevTotalThreadCount + numNewThreads;\n+        if (totalThreadCount < expectedThreadCount) {\n+            testFailed = true;\n+            System.err.println(MessageFormat.format(\"Unexpected number of total threads %d.\" +\n+                    \"The expected number is %d or greater\", totalThreadCount, expectedThreadCount));\n+        }\n@@ -254,10 +235,8 @@\n-    private static void checkThreadIds() throws InterruptedException {\n-        long[] list = mbean.getAllThreadIds();\n-\n-        waitTillEquals(\n-            list.length,\n-            ()->(long)mbean.getThreadCount(),\n-            \"Array length returned by \" +\n-                \"getAllThreadIds() = %1$d not matched count = ${provided}\",\n-            ()->list.length\n-        );\n+    private static void checkThreadIds(int numNewThreads, int numTerminatedThreads) {\n+        int threadCount = mbean.getAllThreadIds().length;\n+        int expectedThreadCount = numNewThreads - numTerminatedThreads;\n+        if (threadCount < expectedThreadCount) {\n+            testFailed = true;\n+            System.err.println(MessageFormat.format(\"Unexpected number of threads %d.\" +\n+                    \"The expected number is %d or greater\", threadCount, expectedThreadCount));\n+        }\n@@ -266,39 +245,3 @@\n-    \/**\n-     * Waits till the <em>expectedVal<\/em> equals to the <em>retrievedVal<\/em>.\n-     * It will report a status message on the first occasion of the value mismatch\n-     * and then, subsequently, when the <em>retrievedVal<\/em> value changes.\n-     * @param expectedVal The value to wait for\n-     * @param retrievedVal The supplier of the value to check against the <em>expectedVal<\/em>\n-     * @param msgFormat The formatted message to be printed in case of mismatch\n-     * @param msgArgs The parameters to the formatted message\n-     * @throws InterruptedException\n-     *\/\n-    private static void waitTillEquals(long expectedVal, Supplier<Long> retrievedVal,\n-                                        String msgFormat, Supplier<Object> ... msgArgs)\n-        throws InterruptedException {\n-        Object[] args = null;\n-\n-        long countPrev = -1;\n-        while (true) {\n-            Long count = retrievedVal.get();\n-            if (count == expectedVal) break;\n-            if (countPrev == -1 || countPrev != count) {\n-                if (args == null) {\n-                    args = new Object[msgArgs.length];\n-                    for(int i=0; i < msgArgs.length; i++) {\n-                        args[i] = new ArgWrapper<>((Supplier<Object>)msgArgs[i]);\n-                    }\n-                }\n-                System.err.format(\"TS: %s\\n\", Instant.now());\n-                System.err.format(\n-                    msgFormat\n-                        .replace(\"${provided}\", String.valueOf(count))\n-                        .replace(\"$d\", \"$s\"),\n-                    args\n-                ).flush();\n-                printThreadList();\n-                System.err.println(\"\\nRetrying ...\\n\");\n-            }\n-            countPrev = count;\n-            Thread.sleep(1);\n-        }\n+    private static long getTestThreadCount() {\n+        return Thread.getAllStackTraces().keySet().stream().filter(\n+                thread -> thread.isAlive() && allThreadIds.contains(thread.getId())).count();\n@@ -309,1 +252,1 @@\n-        prevLiveThreadCount = mbean.getThreadCount();\n+        prevLiveTestThreadCount = getTestThreadCount();\n","filename":"test\/jdk\/java\/lang\/management\/ThreadMXBean\/AllThreadIds.java","additions":58,"deletions":115,"binary":false,"changes":173,"status":"modified"}]}