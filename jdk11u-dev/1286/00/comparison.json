{"files":[{"patch":"@@ -0,0 +1,226 @@\n+\/*\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JTree;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UIManager.LookAndFeelInfo;\n+import javax.swing.UnsupportedLookAndFeelException;\n+import javax.swing.event.MenuEvent;\n+import javax.swing.event.MenuListener;\n+\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4618767\n+ * @summary This test confirms that typing a letter while a JTree has focus now makes the selection\n+ *          not jump to the item whose text starts with that letter if that typed letter is accompanied\n+ *          by modifier keys such as ALT or CTRL(eg: ALT+F).\n+ * @run main JTreeSelectedElementTest\n+ *\/\n+public class JTreeSelectedElementTest {\n+\n+    private static final int FILE_MENU = KeyEvent.VK_F;\n+    private static JFrame frame;\n+    private static JTree tree;\n+    private static Robot robot;\n+    private static CountDownLatch menuSelectedEventLatch;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(200);\n+\n+        final boolean isMac = System.getProperty(\"os.name\")\n+                                    .toLowerCase()\n+                                    .contains(\"os x\");\n+\n+        List<String> lafs = Arrays.stream(getInstalledLookAndFeels())\n+                                  .map(LookAndFeelInfo::getClassName)\n+                                  .collect(Collectors.toList());\n+        for (final String laf : lafs) {\n+            menuSelectedEventLatch = new CountDownLatch(1);\n+            try {\n+                AtomicBoolean lafSetSuccess = new AtomicBoolean(false);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    lafSetSuccess.set(setLookAndFeel(laf));\n+                    if (lafSetSuccess.get()) {\n+                        createUI();\n+                    }\n+                });\n+                if (!lafSetSuccess.get()) {\n+                    continue;\n+                }\n+                robot.waitForIdle();\n+\n+                \/\/ Select the node named as 'colors'\n+                Point pt = getNodeLocation(1);\n+                robot.mouseMove(pt.x, pt.y);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+                \/\/ Assertion check to verify that the selected node is 'colors'\n+                final String elementSelBefore = getCurrentNodeName();\n+                if (!\"colors\".equals(elementSelBefore)) {\n+                    throw new RuntimeException(\"Test failed for \" + laf\n+                            + \" as the tree node selected: \" + elementSelBefore\n+                            + \" is not the expected one 'colors'\"\n+                    );\n+                }\n+\n+                \/\/ Now operate Menu using Mnemonics, different key combinations for different OSes.\n+                \/\/ For most OSes it's ALT+F; on macOS it's ALT+CNTRL+F except for Nimbus LaF.\n+                if (isMac && !laf.contains(\"Nimbus\")) {\n+                    hitKeys(KeyEvent.VK_ALT, KeyEvent.VK_CONTROL, FILE_MENU);\n+                } else {\n+                    hitKeys(KeyEvent.VK_ALT, FILE_MENU);\n+                }\n+\n+                \/\/ Wait until the menu got selected.\n+                if (!menuSelectedEventLatch.await(3, TimeUnit.SECONDS)) {\n+                    throw new RuntimeException(\"Waited too long, but can't select menu using mnemonics for \" + laf);\n+                }\n+\n+                hitKeys(KeyEvent.VK_ENTER);\n+\n+                String elementSelAfter = getCurrentNodeName();\n+\n+                \/\/ As per the fix of BugID 4618767, the tree element selection should not change\n+                if (!elementSelBefore.equals(elementSelAfter)) {\n+                    throw new RuntimeException(\"Test failed for \" + laf\n+                            + \" as tree.getLastSelectedPathComponent() before: \" + elementSelBefore\n+                            + \" not same as tree.getLastSelectedPathComponent() after pressing Enter: \"\n+                            + elementSelAfter\n+                    );\n+                }\n+\n+                System.out.println(\"Test passed for laf: \" + laf);\n+\n+            } finally {\n+                SwingUtilities.invokeAndWait(JTreeSelectedElementTest::disposeFrame);\n+            }\n+        }\n+    }\n+\n+    private static void hitKeys(int... keys) {\n+        for (int key : keys) {\n+            robot.keyPress(key);\n+        }\n+\n+        for (int i = keys.length - 1; i >= 0; i--) {\n+            robot.keyRelease(keys[i]);\n+        }\n+    }\n+\n+    private static String getCurrentNodeName() throws Exception {\n+        AtomicReference<String> nodeName = new AtomicReference<>();\n+        SwingUtilities.invokeAndWait(() -> {\n+            nodeName.set(tree.getLastSelectedPathComponent().toString().trim());\n+        });\n+        return nodeName.get();\n+    }\n+\n+    private static Point getNodeLocation(int rowCount) throws Exception {\n+        AtomicReference<Point> treeNodeLoc = new AtomicReference<>();\n+        SwingUtilities.invokeAndWait(() -> {\n+            final Point locationOnScreen = tree.getLocationOnScreen();\n+            Rectangle rt = tree.getPathBounds(tree.getPathForRow(rowCount));\n+            locationOnScreen.translate(rt.x + rt.width \/ 2, rt.y + rt.height \/ 2);\n+            treeNodeLoc.set(locationOnScreen);\n+        });\n+        return treeNodeLoc.get();\n+    }\n+\n+    private static void createUI() {\n+        frame = new JFrame();\n+        tree = new JTree();\n+        JMenu menu = new JMenu(\"File\");\n+        menu.setMnemonic(FILE_MENU);\n+        JMenuItem menuItem = new JMenuItem(\"Dummy\");\n+        menu.add(menuItem);\n+        menu.addMenuListener(new MenuListener() {\n+            @Override\n+            public void menuSelected(MenuEvent e) {\n+                menuSelectedEventLatch.countDown();\n+            }\n+\n+            @Override\n+            public void menuDeselected(MenuEvent e) {\n+            }\n+\n+            @Override\n+            public void menuCanceled(MenuEvent e) {\n+            }\n+        });\n+\n+        JMenuBar menuBar = new JMenuBar();\n+        menuBar.add(menu);\n+\n+        frame.setJMenuBar(menuBar);\n+        frame.setContentPane(tree);\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        frame.pack();\n+        frame.setAlwaysOnTop(true);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static boolean setLookAndFeel(String lafName) {\n+        try {\n+            UIManager.setLookAndFeel(lafName);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Ignoring Unsupported L&F: \" + lafName);\n+            return false;\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return true;\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JTree\/4618767\/JTreeSelectedElementTest.java","additions":226,"deletions":0,"binary":false,"changes":226,"status":"added"}]}