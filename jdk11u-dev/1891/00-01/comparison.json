{"files":[{"patch":"@@ -30,1 +30,0 @@\n-import java.security.interfaces.RSAKey;\n@@ -171,117 +170,0 @@\n-    public static class EdDSADigestAlgHolder {\n-        public static final AlgorithmId sha512;\n-        public static final AlgorithmId shake256;\n-\n-        static {\n-            \/\/ try {\n-                sha512 = new AlgorithmId(ObjectIdentifier.of(KnownOIDs.SHA_512));\n-                shake256 = new AlgorithmId(ObjectIdentifier.of(KnownOIDs.SHAKE256));\n-            \/\/ }\n-            \/\/  catch (IOException e) {\n-            \/\/     throw new AssertionError(\"Should not happen\", e);\n-            \/\/ }\n-        }\n-    }\n-    \/**\n-     * Determines the digestEncryptionAlgorithmId in PKCS7 SignerInfo.\n-     *\n-     * @param signer Signature object that tells you RSASSA-PSS params\n-     * @param sigalg Signature algorithm\n-     * @param privateKey key tells you EdDSA params\n-     * @param directsign Ed448 uses different digest algs depending on this\n-     * @return the digest algId\n-     * @throws NoSuchAlgorithmException\n-     *\/\n-    public static AlgorithmId getDigestAlgInPkcs7SignerInfo(\n-            Signature signer, String sigalg, PrivateKey privateKey, boolean directsign)\n-            throws NoSuchAlgorithmException {\n-        AlgorithmId digAlgID;\n-        String kAlg = privateKey.getAlgorithm();\n-        if (sigalg.equalsIgnoreCase(\"RSASSA-PSS\")) {\n-            try {\n-                digAlgID = AlgorithmId.get(signer.getParameters()\n-                        .getParameterSpec(PSSParameterSpec.class)\n-                        .getDigestAlgorithm());\n-            } catch (InvalidParameterSpecException e) {\n-                throw new AssertionError(\"Should not happen\", e);\n-            }\n-        } else {\n-            digAlgID = AlgorithmId.get(extractDigestAlgFromDwithE(sigalg));\n-        }\n-        return digAlgID;\n-    }\n-\n-    \/**\n-     * Extracts the digest algorithm name from a signature\n-     * algorithm name in either the \"DIGESTwithENCRYPTION\" or the\n-     * \"DIGESTwithENCRYPTIONandWHATEVER\" format.\n-     *\n-     * It's OK to return \"SHA1\" instead of \"SHA-1\".\n-     *\/\n-    public static String extractDigestAlgFromDwithE(String signatureAlgorithm) {\n-        signatureAlgorithm = signatureAlgorithm.toUpperCase(Locale.ENGLISH);\n-        int with = signatureAlgorithm.indexOf(\"WITH\");\n-        if (with > 0) {\n-            return signatureAlgorithm.substring(0, with);\n-        } else {\n-            throw new IllegalArgumentException(\n-                    \"Unknown algorithm: \" + signatureAlgorithm);\n-        }\n-    }\n-\n-    \/**\n-     * Extracts the key algorithm name from a signature\n-     * algorithm name in either the \"DIGESTwithENCRYPTION\" or the\n-     * \"DIGESTwithENCRYPTIONandWHATEVER\" format.\n-     *\n-     * @return the key algorithm name, or null if the input\n-     *      is not in either of the formats.\n-     *\/\n-    public static String extractKeyAlgFromDwithE(String signatureAlgorithm) {\n-        signatureAlgorithm = signatureAlgorithm.toUpperCase(Locale.ENGLISH);\n-        int with = signatureAlgorithm.indexOf(\"WITH\");\n-        String keyAlgorithm = null;\n-        if (with > 0) {\n-            int and = signatureAlgorithm.indexOf(\"AND\", with + 4);\n-            if (and > 0) {\n-                keyAlgorithm = signatureAlgorithm.substring(with + 4, and);\n-            } else {\n-                keyAlgorithm = signatureAlgorithm.substring(with + 4);\n-            }\n-            if (keyAlgorithm.equalsIgnoreCase(\"ECDSA\")) {\n-                keyAlgorithm = \"EC\";\n-            }\n-        }\n-        return keyAlgorithm;\n-    }\n-\n-    \/**\n-     * Returns default AlgorithmParameterSpec for a key used in a signature.\n-     * This is only useful for RSASSA-PSS now, which is the only algorithm\n-     * that must be initialized with a AlgorithmParameterSpec now.\n-     *\/\n-    public static AlgorithmParameterSpec getDefaultParamSpec(\n-            String sigAlg, Key k) {\n-        sigAlg = checkName(sigAlg);\n-        if (sigAlg.equalsIgnoreCase(\"RSASSA-PSS\")) {\n-            if (k instanceof RSAKey) {\n-                AlgorithmParameterSpec spec = ((RSAKey) k).getParams();\n-                if (spec instanceof PSSParameterSpec) {\n-                    return spec;\n-                }\n-            }\n-            switch (ifcFfcStrength(KeyUtil.getKeySize(k))) {\n-                case \"SHA256\":\n-                    return PSSParamsHolder.PSS_256_SPEC;\n-                case \"SHA384\":\n-                    return PSSParamsHolder.PSS_384_SPEC;\n-                case \"SHA512\":\n-                    return PSSParamsHolder.PSS_512_SPEC;\n-                default:\n-                    throw new AssertionError(\"Should not happen\");\n-            }\n-        } else {\n-            return null;\n-        }\n-    }\n-\n@@ -296,2 +178,2 @@\n-            throws NoSuchAlgorithmException, NoSuchProviderException,\n-                   InvalidKeyException{\n+        throws NoSuchAlgorithmException, NoSuchProviderException,\n+        InvalidKeyException{\n@@ -299,2 +181,2 @@\n-                ? Signature.getInstance(sigAlg)\n-                : Signature.getInstance(sigAlg, provider);\n+            ? Signature.getInstance(sigAlg)\n+            : Signature.getInstance(sigAlg, provider);\n@@ -320,3 +202,3 @@\n-            throws InvalidKeyException {\n-        AlgorithmParameterSpec params = SignatureUtil\n-                .getDefaultParamSpec(alg, key);\n+        throws InvalidKeyException {\n+        AlgorithmParameterSpec params = AlgorithmId\n+                .getDefaultAlgorithmParameterSpec(alg, key);\n@@ -339,1 +221,1 @@\n-            throws SignatureException {\n+        throws SignatureException {\n@@ -363,131 +245,0 @@\n-\n-    \/**\n-     * Checks if a signature algorithm matches a key, i.e. if this\n-     * signature can be initialized with this key. Currently used\n-     * in {@link jdk.security.jarsigner.JarSigner} to fail early.\n-     *\n-     * Note: Unknown signature algorithms are allowed.\n-     *\n-     * @param key must not be null\n-     * @param sAlg must not be null\n-     * @throws IllegalArgumentException if they are known to not match\n-     *\/\n-    public static void checkKeyAndSigAlgMatch(PrivateKey key, String sAlg) {\n-        String kAlg = key.getAlgorithm().toUpperCase(Locale.ENGLISH);\n-        sAlg = checkName(sAlg).toUpperCase(Locale.ENGLISH);\n-        switch (sAlg) {\n-            case \"RSASSA-PSS\" : {\n-                if (!kAlg.equals(\"RSASSA-PSS\")\n-                        && !kAlg.equals(\"RSA\")) {\n-                    throw new IllegalArgumentException(\n-                            \"key algorithm not compatible with signature algorithm\");\n-                }\n-            }\n-            break;\n-            case \"EDDSA\" : {\n-                \/\/ General EdDSA, any EDDSA name variance is OK\n-                if (!kAlg.equals(\"EDDSA\") && !kAlg.equals(\"ED448\")\n-                        && !kAlg.equals(\"ED25519\")) {\n-                    throw new IllegalArgumentException(\n-                            \"key algorithm not compatible with signature algorithm\");\n-                }\n-            }\n-            break;\n-            case \"ED25519\":\n-            case \"ED448\": {\n-                \/\/ Other vendor might be generalized or fix-size\n-                if (!kAlg.equals(\"EDDSA\") && !kAlg.equals(sAlg)) {\n-                    throw new IllegalArgumentException(\n-                            \"key algorithm not compatible with signature algorithm\");\n-                }\n-            }\n-            break;\n-            default : {\n-                if (sAlg.contains(\"WITH\")) {\n-                    if ((sAlg.endsWith(\"WITHRSA\") && !kAlg.equals(\"RSA\")) ||\n-                            (sAlg.endsWith(\"WITHECDSA\") && !kAlg.equals(\"EC\")) ||\n-                            (sAlg.endsWith(\"WITHDSA\") && !kAlg.equals(\"DSA\"))) {\n-                        throw new IllegalArgumentException(\n-                                \"key algorithm not compatible with signature algorithm\");\n-                    }\n-                }\n-                \/\/ Do not fail now. Maybe new algorithm we don't know.\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Returns the default signature algorithm for a private key.\n-     *\n-     * @param k cannot be null\n-     * @return the default alg, might be null if unsupported\n-     *\/\n-    public static String getDefaultSigAlgForKey(PrivateKey k) {\n-        String kAlg = k.getAlgorithm();\n-        switch (kAlg.toUpperCase(Locale.ENGLISH)) {\n-            case \"DSA\":\n-            case \"RSA\":\n-                return ifcFfcStrength(KeyUtil.getKeySize(k)) + \"with\" + kAlg;\n-            case \"EC\":\n-                return ecStrength(KeyUtil.getKeySize(k)) + \"withECDSA\";\n-            case \"EDDSA\" :\n-            case \"RSASSA-PSS\":\n-            case \"ED25519\":\n-            case \"ED448\":\n-                return kAlg;\n-            default:\n-                return null;\n-        }\n-    }\n-\n-    \/\/ Useful PSSParameterSpec objects\n-    private static class PSSParamsHolder {\n-        static final PSSParameterSpec PSS_256_SPEC = new PSSParameterSpec(\n-                \"SHA-256\", \"MGF1\",\n-                MGF1ParameterSpec.SHA256,\n-                32, PSSParameterSpec.TRAILER_FIELD_BC);\n-        static final PSSParameterSpec PSS_384_SPEC = new PSSParameterSpec(\n-                \"SHA-384\", \"MGF1\",\n-                MGF1ParameterSpec.SHA384,\n-                48, PSSParameterSpec.TRAILER_FIELD_BC);\n-        static final PSSParameterSpec PSS_512_SPEC = new PSSParameterSpec(\n-                \"SHA-512\", \"MGF1\",\n-                MGF1ParameterSpec.SHA512,\n-                64, PSSParameterSpec.TRAILER_FIELD_BC);\n-    }\n-\n-    \/\/ The following values are from SP800-57 part 1 rev 4 tables 2 and 3\n-\n-    \/**\n-     * Return the default message digest algorithm with the same security\n-     * strength as the specified EC key size.\n-     *\n-     * Attention: sync with the @implNote inside\n-     * {@link jdk.security.jarsigner.JarSigner.Builder#getDefaultSignatureAlgorithm}.\n-     *\/\n-    private static String ecStrength (int bitLength) {\n-        if (bitLength >= 512) { \/\/ 256 bits of strength\n-            return \"SHA512\";\n-        } else if (bitLength >= 384) {  \/\/ 192 bits of strength\n-            return \"SHA384\";\n-        } else { \/\/ 128 bits of strength and less\n-            return \"SHA256\";\n-        }\n-    }\n-\n-    \/**\n-     * Return the default message digest algorithm with the same security\n-     * strength as the specified IFC\/FFC key size.\n-     *\n-     * Attention: sync with the @implNote inside\n-     * {@link jdk.security.jarsigner.JarSigner.Builder#getDefaultSignatureAlgorithm}.\n-     *\/\n-    private static String ifcFfcStrength (int bitLength) {\n-        if (bitLength > 7680) { \/\/ 256 bits\n-            return \"SHA512\";\n-        } else if (bitLength > 3072) {  \/\/ 192 bits\n-            return \"SHA384\";\n-        } else  { \/\/ 128 bits and less\n-            return \"SHA256\";\n-        }\n-    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SignatureUtil.java","additions":8,"deletions":257,"binary":false,"changes":265,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-        sigAlgId = AlgorithmId.get(SignatureUtil.getDefaultSigAlgForKey(signerKey));\n+        sigAlgId = AlgorithmId.get(AlgorithmId.getDefaultSigAlgForKey(signerKey));\n","filename":"test\/jdk\/java\/security\/testlibrary\/SimpleOCSPServer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}