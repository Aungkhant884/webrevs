{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,1 @@\n-\/**\n- *\n+\/*\n@@ -30,1 +29,1 @@\n- * @run main\/manual=yesno\/timeout=900 ImageTypes\n+ * @run main\/manual ImageTypes\n@@ -33,1 +32,27 @@\n-import java.io.*;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Frame;\n+import java.awt.GradientPaint;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.TextArea;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.DataBuffer;\n+import java.awt.image.IndexColorModel;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.PrintRequestAttributeSet;\n+\n@@ -35,5 +60,0 @@\n-import java.awt.*;\n-import java.awt.geom.*;\n-import java.awt.event.*;\n-import java.awt.print.*;\n-import java.awt.image.*;\n@@ -41,3 +61,0 @@\n-import javax.print.*;\n-import javax.print.attribute.*;\n-import javax.print.attribute.standard.*;\n@@ -45,1 +62,1 @@\n-public class ImageTypes extends Frame implements ActionListener {\n+public class ImageTypes {\n@@ -47,1 +64,4 @@\n-    private ImageCanvas c;\n+    private static Frame testFrame;\n+    private static ImageCanvas imageCanvas;\n+    private static volatile boolean testResult;\n+    private static final CountDownLatch countDownLatch = new CountDownLatch(1);\n@@ -49,4 +69,8 @@\n-    public static void main(String args[]) {\n-\n-        ImageTypes f = new ImageTypes();\n-        f.show();\n+    public static void main(String[] args) throws InterruptedException {\n+        createTestUI();\n+        if (!countDownLatch.await(10, TimeUnit.MINUTES)) {\n+            throw new RuntimeException(\"Timeout : No action was performed on the test UI.\");\n+        }\n+        if (!testResult) {\n+            throw new RuntimeException(\"Test failed!\");\n+        }\n@@ -55,14 +79,14 @@\n-    public ImageTypes () {\n-        super(\"Image Types Printing Test\");\n-        c = new ImageCanvas();\n-        add(\"Center\", c);\n-\n-        Button printThisButton = new Button(\"Print\");\n-        printThisButton.addActionListener(this);\n-        Panel p = new Panel();\n-        p.add(printThisButton);\n-        add(\"South\", p);\n-        add(\"North\", getInstructions());\n-        addWindowListener(new WindowAdapter() {\n-                public void windowClosing(WindowEvent e) {\n-                    System.exit(0);\n+    public static void createTestUI() {\n+        testFrame = new Frame(\"Image Types Printing Test\");\n+        imageCanvas = new ImageCanvas();\n+        testFrame.add(\"Center\", imageCanvas);\n+\n+        Button printButton = new Button(\"Print\");\n+        printButton.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                PrinterJob pj = PrinterJob.getPrinterJob();\n+                if (pj.getPrintService() == null) {\n+                    System.out.println(\"No printers. Test cannot continue. Install \" +\n+                            \"printer and restart the test.\");\n+                    return;\n@@ -70,3 +94,43 @@\n-            });\n-\n-        pack();\n+                PrintRequestAttributeSet attrs = new HashPrintRequestAttributeSet();\n+                if (pj != null && pj.printDialog(attrs)) {\n+                    pj.setPrintable(imageCanvas);\n+                    try {\n+                        pj.print(attrs);\n+                    } catch (PrinterException pe) {\n+                        pe.printStackTrace();\n+                        throw new RuntimeException(\"Exception whilst printing.\");\n+                    } finally {\n+                        System.out.println(\"PRINT RETURNED OK.\");\n+                    }\n+                }\n+            }\n+        });\n+\n+        Button passButton = new Button(\"Pass\");\n+        passButton.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                testResult = true;\n+                countDownLatch.countDown();\n+                testFrame.dispose();\n+            }\n+        });\n+\n+        Button failButton = new Button(\"Fail\");\n+        failButton.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                testResult = false;\n+                countDownLatch.countDown();\n+                testFrame.dispose();\n+            }\n+        });\n+\n+        Panel buttonPanel = new Panel(new GridLayout(1,3));\n+        buttonPanel.add(printButton);\n+        buttonPanel.add(passButton);\n+        buttonPanel.add(failButton);\n+        testFrame.add(\"South\", buttonPanel);\n+        testFrame.add(\"North\", getInstructions());\n+        testFrame.pack();\n+        testFrame.setVisible(true);\n@@ -75,2 +139,9 @@\n-    private TextArea getInstructions() {\n-        TextArea ta = new TextArea(10, 60);\n+    private static TextArea getInstructions() {\n+        String testInstruction = \"This is a manual test as it requires that you compare \"+\n+                \"the on-screen rendering with the printed output.\\n\"+\n+                \"Select the 'Print' button to print out the test.\\n\"+\n+                \"For each image compare the printed one to the on-screen one.\\n\"+\n+                \"Press Pass button if the onscreen and printed rendering \" +\n+                \"match else Press fail button\";\n+        TextArea ta = new TextArea(testInstruction,7, 60,\n+                TextArea.SCROLLBARS_NONE);\n@@ -78,6 +149,0 @@\n-        ta.setText\n-            (\"This is a manual test as it requires that you compare \"+\n-             \"the on-screen rendering with the printed output.\\n\"+\n-             \"Select the 'Print' button to print out the test.\\n\"+\n-             \"For each image compare the printed one to the on-screen one.\\n\"+\n-             \"The test PASSES if the onscreen and printed rendering match.\");\n@@ -86,17 +151,0 @@\n-\n-    public void actionPerformed(ActionEvent e) {\n-        PrinterJob pj = PrinterJob.getPrinterJob();\n-\n-        PrintRequestAttributeSet attrs = new HashPrintRequestAttributeSet();\n-        if (pj != null && pj.printDialog(attrs)) {\n-            pj.setPrintable(c);\n-            try {\n-                pj.print(attrs);\n-            } catch (PrinterException pe) {\n-                pe.printStackTrace();\n-                throw new RuntimeException(\"Exception whilst printing.\");\n-            } finally {\n-                System.out.println(\"PRINT RETURNED OK.\");\n-            }\n-        }\n-    }\n@@ -114,1 +162,0 @@\n-\n@@ -135,1 +182,0 @@\n-\n@@ -174,1 +220,0 @@\n-\n@@ -176,1 +221,0 @@\n-\n@@ -187,1 +231,0 @@\n-\n@@ -205,1 +248,0 @@\n-\n@@ -262,7 +304,5 @@\n-\n-\n-     \/* Size is chosen to match default imageable width of a NA letter\n-      * page. This means there will be clipping, what is clipped will\n-      * depend on PageFormat orientation.\n-      *\/\n-     public Dimension getPreferredSize() {\n+    \/* Size is chosen to match default imageable width of a NA letter\n+     * page. This means there will be clipping, what is clipped will\n+     * depend on PageFormat orientation.\n+     *\/\n+    public Dimension getPreferredSize() {\n@@ -271,1 +311,0 @@\n-\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/ImagePrinting\/ImageTypes.java","additions":114,"deletions":75,"binary":false,"changes":189,"status":"modified"}]}