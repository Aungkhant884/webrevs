{"files":[{"patch":"@@ -43,1 +43,1 @@\n-    ArrayList<String> vmOpts = new ArrayList();\n+    ArrayList<String> vmOpts = new ArrayList<>();\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocateHeapAt.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    ArrayList<String> vmOpts = new ArrayList();\n+    ArrayList<String> vmOpts = new ArrayList<>();\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocateHeapAtError.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    ArrayList<String> vmOpts = new ArrayList();\n+    ArrayList<String> vmOpts = new ArrayList<>();\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocateHeapAtMultiple.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        HashMap<String, List> counts = new HashMap<>();\n+        HashMap<String, List<Long>> counts = new HashMap<>();\n@@ -94,1 +94,1 @@\n-    private static void addCollectionCount(HashMap<String, List> counts, int iteration) {\n+    private static void addCollectionCount(HashMap<String, List<Long>> counts, int iteration) {\n@@ -97,1 +97,1 @@\n-            List thisList = counts.get(collector.getName());\n+            List<Long> thisList = counts.get(collector.getName());\n","filename":"test\/hotspot\/jtreg\/gc\/TestFullGCCount.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-        LinkedList<SoftReference> arrSoftRefs = new LinkedList();\n+        LinkedList<SoftReference<byte[]>> arrSoftRefs = new LinkedList<>();\n@@ -76,1 +76,1 @@\n-        LinkedList arrObjects = new LinkedList();\n+        LinkedList<byte[]> arrObjects = new LinkedList<>();\n@@ -92,1 +92,1 @@\n-                arrSoftRefs.add(new SoftReference(new byte[allocationSize]));\n+                arrSoftRefs.add(new SoftReference<byte[]>(new byte[allocationSize]));\n@@ -109,1 +109,1 @@\n-            for (SoftReference sr : arrSoftRefs) {\n+            for (SoftReference<byte[]> sr : arrSoftRefs) {\n","filename":"test\/hotspot\/jtreg\/gc\/TestSoftReferencesBehaviorOnOOME.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    ArrayList<String> vmOpts = new ArrayList();\n+    ArrayList<String> vmOpts = new ArrayList<>();\n","filename":"test\/hotspot\/jtreg\/gc\/TestVerifyDuringStartup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    ArrayList<String> vmOpts = new ArrayList();\n+    ArrayList<String> vmOpts = new ArrayList<>();\n","filename":"test\/hotspot\/jtreg\/gc\/TestVerifySilently.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        ArrayList<String> vmOpts = new ArrayList();\n+        ArrayList<String> vmOpts = new ArrayList<>();\n","filename":"test\/hotspot\/jtreg\/gc\/TestVerifySubSet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-        List list = new LinkedList();\n+        List<byte[]> list = new LinkedList<>();\n","filename":"test\/hotspot\/jtreg\/gc\/cms\/TestMBeanCMS.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    private static final List<List<byte[]>> garbage = new ArrayList();\n+    private static final List<List<byte[]>> garbage = new ArrayList<>();\n@@ -111,1 +111,1 @@\n-            List<byte[]> stuff = new ArrayList();\n+            List<byte[]> stuff = new ArrayList<>();\n@@ -123,1 +123,1 @@\n-        List stuff = garbage.get(garbage.size() - 1);\n+        List<byte[]> stuff = garbage.get(garbage.size() - 1);\n@@ -128,1 +128,1 @@\n-    private static void allocateList(List garbage, int count, int size) {\n+    private static void allocateList(List<byte[]> garbage, int count, int size) {\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestHumongousShrinkHeap.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-        ArrayList<String> vmOpts = new ArrayList();\n+        ArrayList<String> vmOpts = new ArrayList<>();\n@@ -90,1 +90,1 @@\n-            ArrayList<String> vmOptsWithoutAlign = new ArrayList(vmOpts);\n+            ArrayList<String> vmOptsWithoutAlign = new ArrayList<>(vmOpts);\n@@ -97,1 +97,1 @@\n-            ArrayList<String> vmOptsWithAlign = new ArrayList(vmOpts);\n+            ArrayList<String> vmOptsWithAlign = new ArrayList<>(vmOpts);\n@@ -208,2 +208,2 @@\n-            private final List<byte[]> payload = new ArrayList();\n-            private final List<GarbageObject> ref = new LinkedList();\n+            private final List<byte[]> payload = new ArrayList<>();\n+            private final List<GarbageObject> ref = new LinkedList<>();\n@@ -226,1 +226,1 @@\n-        private final List<GarbageObject> garbage = new ArrayList();\n+        private final List<GarbageObject> garbage = new ArrayList<>();\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestShrinkAuxiliaryData.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-            ArrayList stuff = garbage.get(garbage.size() - 1);\n+            ArrayList<byte[]> stuff = garbage.get(garbage.size() - 1);\n@@ -163,1 +163,1 @@\n-        private static void allocateList(List garbage, int count, int size) {\n+        private static void allocateList(List<byte[]> garbage, int count, int size) {\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestShrinkDefragmentedHeap.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-        Reference reference = ref.create();\n+        Reference<byte[]> reference = ref.create();\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/humongousObjects\/TestObjectCollected.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-    public static Class fooClass = null;\n+    public static Class<?> fooClass = null;\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/TestMetaspacePerfCounters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,6 +58,6 @@\n-        ArrayList<String> baseargs = new ArrayList(Arrays.asList( \"-Xms256M\",\n-                                                                  \"-Xmx256M\",\n-                                                                  \"-Xlog:gc*,stringtable*=debug:gc.log\",\n-                                                                  \"-XX:NativeMemoryTracking=summary\",\n-                                                                  \"-XX:+UnlockDiagnosticVMOptions\",\n-                                                                  \"-XX:+PrintNMTStatistics\" ));\n+        ArrayList<String> baseargs = new ArrayList<>(Arrays.asList(\"-Xms256M\",\n+                                                                   \"-Xmx256M\",\n+                                                                   \"-Xlog:gc*,stringtable*=debug:gc.log\",\n+                                                                   \"-XX:NativeMemoryTracking=summary\",\n+                                                                   \"-XX:+UnlockDiagnosticVMOptions\",\n+                                                                   \"-XX:+PrintNMTStatistics\" ));\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/TestReclaimStringsLeaksMemory.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}