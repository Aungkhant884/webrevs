{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,11 +24,0 @@\n-\/*\n- * @test\n- * @summary Tests Exception detail message when too few response bytes are\n- *          received before a socket exception or eof.\n- * @library \/lib\/testlibrary\n- * @build jdk.testlibrary.SimpleSSLContext\n- * @run testng\/othervm\n- *       -Djdk.httpclient.HttpClient.log=headers,errors,channel\n- *       ShortResponseBody\n- *\/\n-\n@@ -46,1 +35,0 @@\n-import java.net.http.HttpRequest.BodyPublishers;\n@@ -51,1 +39,0 @@\n-import java.util.concurrent.ExecutionException;\n@@ -83,1 +70,1 @@\n-public class ShortResponseBody {\n+public abstract class ShortResponseBody {\n@@ -100,0 +87,3 @@\n+    static final long PAUSE_FOR_GC = 5; \/\/ 5ms to let gc work\n+    static final long PAUSE_FOR_PEER = 5; \/\/ 5ms to let server react\n+\n@@ -103,1 +93,5 @@\n-    final static AtomicLong ids = new AtomicLong();\n+    \/\/ A request number used to replace %reqnb% in URLs with a unique\n+    \/\/ number for better log analysis\n+    static final AtomicLong reqnb = new AtomicLong();\n+\n+    static final AtomicLong ids = new AtomicLong();\n@@ -127,0 +121,6 @@\n+        System.gc();\n+        try {\n+            Thread.sleep(PAUSE_FOR_GC);\n+        } catch (InterruptedException x) {\n+\n+        }\n@@ -164,0 +164,4 @@\n+    public static String uniqueURL(String url) {\n+        return url.replace(\"%reqnb%\", String.valueOf(reqnb.incrementAndGet()));\n+    }\n+\n@@ -167,0 +171,1 @@\n+        url = uniqueURL(url);\n@@ -168,0 +173,1 @@\n+        out.println(\"Request: \" + request);\n@@ -265,53 +271,6 @@\n-    @Test(dataProvider = \"uris\")\n-    void testSynchronousGET(String url, String expectedMsg, boolean sameClient)\n-        throws Exception\n-    {\n-        checkSkip();\n-        out.print(\"---\\n\");\n-        HttpClient client = null;\n-        for (int i=0; i< ITERATION_COUNT; i++) {\n-            if (!sameClient || client == null)\n-                client = newHttpClient();\n-            HttpRequest request = HttpRequest.newBuilder(URI.create(url)).build();\n-            try {\n-                HttpResponse<String> response = client.send(request, ofString());\n-                String body = response.body();\n-                out.println(response + \": \" + body);\n-                fail(\"UNEXPECTED RESPONSE: \" + response);\n-            } catch (IOException ioe) {\n-                out.println(\"Caught expected exception:\" + ioe);\n-                String msg = ioe.getMessage();\n-                assertTrue(msg.contains(expectedMsg), \"exception msg:[\" + msg + \"]\");\n-                \/\/ synchronous API must have the send method on the stack\n-                assertSendMethodOnStack(ioe);\n-                assertNoConnectionExpiredException(ioe);\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"uris\")\n-    void testAsynchronousGET(String url, String expectedMsg, boolean sameClient)\n-        throws Exception\n-    {\n-        checkSkip();\n-        out.print(\"---\\n\");\n-        HttpClient client = null;\n-        for (int i=0; i< ITERATION_COUNT; i++) {\n-            if (!sameClient || client == null)\n-                client = newHttpClient();\n-            HttpRequest request = HttpRequest.newBuilder(URI.create(url)).build();\n-            try {\n-                HttpResponse<String> response = client.sendAsync(request, ofString()).get();\n-                String body = response.body();\n-                out.println(response + \": \" + body);\n-                fail(\"UNEXPECTED RESPONSE: \" + response);\n-            } catch (ExecutionException ee) {\n-                if (ee.getCause() instanceof IOException) {\n-                    IOException ioe = (IOException) ee.getCause();\n-                    out.println(\"Caught expected exception:\" + ioe);\n-                    String msg = ioe.getMessage();\n-                    assertTrue(msg.contains(expectedMsg), \"exception msg:[\" + msg + \"]\");\n-                    assertNoConnectionExpiredException(ioe);\n-                } else {\n-                    throw ee;\n-                }\n+    HttpClient sharedClient = null;\n+    HttpClient newHttpClient(boolean shared) {\n+        if (shared) {\n+            HttpClient sharedClient = this.sharedClient;\n+            if (sharedClient == null) {\n+                sharedClient = this.sharedClient = newHttpClient();\n@@ -319,0 +278,1 @@\n+            return sharedClient;\n@@ -320,0 +280,1 @@\n+        return newHttpClient();\n@@ -335,0 +296,5 @@\n+                try {\n+                    Thread.sleep(PAUSE_FOR_PEER);\n+                } catch (InterruptedException x) {\n+                    \/\/ ignore\n+                }\n@@ -357,0 +323,5 @@\n+                try {\n+                    Thread.sleep(PAUSE_FOR_PEER);\n+                } catch (InterruptedException x) {\n+                    \/\/ ignore\n+                }\n@@ -375,76 +346,0 @@\n-\n-    @Test(dataProvider = \"uris\")\n-    void testSynchronousPOST(String url, String expectedMsg, boolean sameClient)\n-        throws Exception\n-    {\n-        checkSkip();\n-        out.print(\"---\\n\");\n-        HttpClient client = null;\n-        for (int i=0; i< ITERATION_COUNT; i++) {\n-            if (!sameClient || client == null)\n-                client = newHttpClient();\n-            HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                    .POST(BodyPublishers.ofInputStream(() -> new InfiniteInputStream()))\n-                    .build();\n-            try {\n-                HttpResponse<String> response = client.send(request, ofString());\n-                String body = response.body();\n-                out.println(response + \": \" + body);\n-                fail(\"UNEXPECTED RESPONSE: \" + response);\n-            } catch (IOException ioe) {\n-                out.println(\"Caught expected exception:\" + ioe);\n-                String msg = ioe.getMessage();\n-\n-                List<String> expectedMessages = new ArrayList<>();\n-                expectedMessages.add(expectedMsg);\n-                MSGS_ORDER.stream().takeWhile(s -> !s.equals(expectedMsg))\n-                                   .forEach(expectedMessages::add);\n-\n-                assertTrue(expectedMessages.stream().anyMatch(s -> msg.indexOf(s) != -1),\n-                           \"exception msg:[\" + msg + \"], not in [\" + expectedMessages);\n-                \/\/ synchronous API must have the send method on the stack\n-                assertSendMethodOnStack(ioe);\n-                assertNoConnectionExpiredException(ioe);\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"uris\")\n-    void testAsynchronousPOST(String url, String expectedMsg, boolean sameClient)\n-        throws Exception\n-    {\n-        checkSkip();\n-        out.print(\"---\\n\");\n-        HttpClient client = null;\n-        for (int i=0; i< ITERATION_COUNT; i++) {\n-            if (!sameClient || client == null)\n-                client = newHttpClient();\n-            HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n-                    .POST(BodyPublishers.ofInputStream(() -> new InfiniteInputStream()))\n-                    .build();\n-            try {\n-                HttpResponse<String> response = client.sendAsync(request, ofString()).get();\n-                String body = response.body();\n-                out.println(response + \": \" + body);\n-                fail(\"UNEXPECTED RESPONSE: \" + response);\n-            } catch (ExecutionException ee) {\n-                if (ee.getCause() instanceof IOException) {\n-                    IOException ioe = (IOException) ee.getCause();\n-                    out.println(\"Caught expected exception:\" + ioe);\n-                    String msg = ioe.getMessage();\n-\n-                    List<String> expectedMessages = new ArrayList<>();\n-                    expectedMessages.add(expectedMsg);\n-                    MSGS_ORDER.stream().takeWhile(s -> !s.equals(expectedMsg))\n-                            .forEach(expectedMessages::add);\n-\n-                    assertTrue(expectedMessages.stream().anyMatch(s -> msg.indexOf(s) != -1),\n-                               \"exception msg:[\" + msg + \"], not in [\" + expectedMessages);\n-                    assertNoConnectionExpiredException(ioe);\n-                } else {\n-                    throw ee;\n-                }\n-            }\n-        }\n-    }\n-\n@@ -742,1 +637,1 @@\n-                + \"\/http1\/closeImmediately\/foo\";\n+                + \"\/http1\/closeImmediately\/req=%reqnb%\/foo\";\n@@ -746,1 +641,1 @@\n-                + \"\/https1\/closeImmediately\/foo\";\n+                + \"\/https1\/closeImmediately\/req=%reqnb%\/foo\";\n@@ -750,1 +645,1 @@\n-                + \"\/http1\/variable\/bar\";\n+                + \"\/http1\/variable\/req=%reqnb%\/bar\";\n@@ -754,1 +649,1 @@\n-                + \"\/https1\/variable\/bar\";\n+                + \"\/https1\/variable\/req=%reqnb%\/bar\";\n@@ -758,1 +653,1 @@\n-                + \"\/http1\/fixed\/baz\";\n+                + \"\/http1\/fixed\/req=%reqnb%\/baz\";\n@@ -763,0 +658,1 @@\n+        if (sharedClient != null) sharedClient = null;\n","filename":"test\/jdk\/java\/net\/httpclient\/ShortResponseBody.java","additions":46,"deletions":150,"binary":false,"changes":196,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8216498\n+ * @summary Tests Exception detail message when too few response bytes are\n+ *          received before a socket exception or eof.\n+ * @library \/lib\/testlibrary\n+ * @build jdk.testlibrary.SimpleSSLContext ShortResponseBody ShortResponseBodyGet\n+ * @run testng\/othervm\n+ *       -Djdk.httpclient.HttpClient.log=headers,errors,channel\n+ *       ShortResponseBodyGet\n+ *\/\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.ExecutionException;\n+import org.testng.annotations.Test;\n+import static java.lang.System.out;\n+import static java.net.http.HttpResponse.BodyHandlers.ofString;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+public class ShortResponseBodyGet extends ShortResponseBody {\n+\n+    @Test(dataProvider = \"uris\")\n+    void testSynchronousGET(String urlp, String expectedMsg, boolean sameClient)\n+        throws Exception\n+    {\n+        checkSkip();\n+        out.print(\"---\\n\");\n+        HttpClient client = null;\n+        for (int i=0; i< ITERATION_COUNT; i++) {\n+            String url = uniqueURL(urlp);\n+            if (client == null)\n+                client = newHttpClient(sameClient);\n+            HttpRequest request = HttpRequest.newBuilder(URI.create(url)).build();\n+            out.println(\"Request: \" + request);\n+            try {\n+                HttpResponse<String> response = client.send(request, ofString());\n+                String body = response.body();\n+                out.println(response + \": \" + body);\n+                fail(\"UNEXPECTED RESPONSE: \" + response);\n+            } catch (IOException ioe) {\n+                out.println(\"Caught expected exception:\" + ioe);\n+                String msg = ioe.getMessage();\n+                assertTrue(msg.contains(expectedMsg), \"exception msg:[\" + msg + \"]\");\n+                \/\/ synchronous API must have the send method on the stack\n+                assertSendMethodOnStack(ioe);\n+                assertNoConnectionExpiredException(ioe);\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"uris\")\n+    void testAsynchronousGET(String urlp, String expectedMsg, boolean sameClient)\n+        throws Exception\n+    {\n+        checkSkip();\n+        out.print(\"---\\n\");\n+        HttpClient client = null;\n+        for (int i=0; i< ITERATION_COUNT; i++) {\n+            String url = uniqueURL(urlp);\n+            if (client == null)\n+                client = newHttpClient(sameClient);\n+            HttpRequest request = HttpRequest.newBuilder(URI.create(url)).build();\n+            out.println(\"Request: \" + request);\n+            try {\n+                HttpResponse<String> response = client.sendAsync(request, ofString()).get();\n+                String body = response.body();\n+                out.println(response + \": \" + body);\n+                fail(\"UNEXPECTED RESPONSE: \" + response);\n+            } catch (ExecutionException ee) {\n+                if (ee.getCause() instanceof IOException) {\n+                    IOException ioe = (IOException) ee.getCause();\n+                    out.println(\"Caught expected exception:\" + ioe);\n+                    String msg = ioe.getMessage();\n+                    assertTrue(msg.contains(expectedMsg), \"exception msg:[\" + msg + \"]\");\n+                    assertNoConnectionExpiredException(ioe);\n+                } else {\n+                    throw ee;\n+                }\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/ShortResponseBodyGet.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -0,0 +1,142 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8216498\n+ * @summary Tests Exception detail message when too few response bytes are\n+ *          received before a socket exception or eof.\n+ * @library \/lib\/testlibrary\n+ * @build jdk.testlibrary.SimpleSSLContext ShortResponseBody ShortResponseBodyPost\n+ * @run testng\/othervm\n+ *       -Djdk.httpclient.HttpClient.log=headers,errors,channel\n+ *       -Djdk.internal.httpclient.debug=true\n+ *       ShortResponseBodyPost\n+ *\/\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpRequest.BodyPublishers;\n+import java.net.http.HttpResponse;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import org.testng.annotations.Test;\n+import static java.lang.System.out;\n+import static java.net.http.HttpResponse.BodyHandlers.ofString;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+public class ShortResponseBodyPost extends ShortResponseBody {\n+\n+    \/\/ POST tests are racy in what may be received before writing may cause a\n+    \/\/ broken pipe or reset exception, before all the received data can be read.\n+    \/\/ Any message up to, and including, the \"expected\" error message can occur.\n+    \/\/ Strictly ordered list, in order of possible occurrence.\n+    static final List<String> MSGS_ORDER =\n+            List.of(\"no bytes\", \"status line\", \"header\");\n+\n+\n+    @Test(dataProvider = \"uris\")\n+    void testSynchronousPOST(String urlp, String expectedMsg, boolean sameClient)\n+        throws Exception\n+    {\n+        checkSkip();\n+        out.print(\"---\\n\");\n+        HttpClient client = null;\n+        for (int i=0; i< ITERATION_COUNT; i++) {\n+            String url = uniqueURL(urlp);\n+            if (client == null)\n+                client = newHttpClient(sameClient);\n+            HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n+                    .POST(BodyPublishers.ofInputStream(() -> new InfiniteInputStream()))\n+                    .build();\n+            out.println(\"Request: \" + request);\n+            try {\n+                HttpResponse<String> response = client.send(request, ofString());\n+                String body = response.body();\n+                out.println(response + \": \" + body);\n+                fail(\"UNEXPECTED RESPONSE: \" + response);\n+            } catch (IOException ioe) {\n+                out.println(\"Caught expected exception:\" + ioe);\n+                String msg = ioe.getMessage();\n+\n+                List<String> expectedMessages = new ArrayList<>();\n+                expectedMessages.add(expectedMsg);\n+                MSGS_ORDER.stream().takeWhile(s -> !s.equals(expectedMsg))\n+                                   .forEach(expectedMessages::add);\n+\n+                assertTrue(expectedMessages.stream().anyMatch(s -> msg.indexOf(s) != -1),\n+                           \"exception msg:[\" + msg + \"], not in [\" + expectedMessages);\n+                \/\/ synchronous API must have the send method on the stack\n+                assertSendMethodOnStack(ioe);\n+                assertNoConnectionExpiredException(ioe);\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"uris\")\n+    void testAsynchronousPOST(String urlp, String expectedMsg, boolean sameClient)\n+        throws Exception\n+    {\n+        checkSkip();\n+        out.print(\"---\\n\");\n+        HttpClient client = null;\n+        for (int i=0; i< ITERATION_COUNT; i++) {\n+            String url = uniqueURL(urlp);\n+            if (client == null)\n+                client = newHttpClient(sameClient);\n+            HttpRequest request = HttpRequest.newBuilder(URI.create(url))\n+                    .POST(BodyPublishers.ofInputStream(() -> new InfiniteInputStream()))\n+                    .build();\n+            out.println(\"Request: \" + request);\n+            try {\n+                HttpResponse<String> response = client.sendAsync(request, ofString()).get();\n+                String body = response.body();\n+                out.println(response + \": \" + body);\n+                fail(\"UNEXPECTED RESPONSE: \" + response);\n+            } catch (ExecutionException ee) {\n+                if (ee.getCause() instanceof IOException) {\n+                    IOException ioe = (IOException) ee.getCause();\n+                    out.println(\"Caught expected exception:\" + ioe);\n+                    String msg = ioe.getMessage();\n+\n+                    List<String> expectedMessages = new ArrayList<>();\n+                    expectedMessages.add(expectedMsg);\n+                    MSGS_ORDER.stream().takeWhile(s -> !s.equals(expectedMsg))\n+                            .forEach(expectedMessages::add);\n+\n+                    assertTrue(expectedMessages.stream().anyMatch(s -> msg.indexOf(s) != -1),\n+                               \"exception msg:[\" + msg + \"], not in [\" + expectedMessages);\n+                    assertNoConnectionExpiredException(ioe);\n+                } else {\n+                    throw ee;\n+                }\n+            }\n+        }\n+    }\n+\n+}\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/ShortResponseBodyPost.java","additions":142,"deletions":0,"binary":false,"changes":142,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Run of ShortResponseBodyPost with -Djdk.httpclient.enableAllMethodRetry\n+ * @library \/lib\/testlibrary\n+ * @build jdk.testlibrary.SimpleSSLContext\n+ * @build ShortResponseBody ShortResponseBodyPost\n+ * @run testng\/othervm\n+ *       -Djdk.httpclient.HttpClient.log=headers,errors,channel\n+ *       -Djdk.httpclient.enableAllMethodRetry\n+ *       -Djdk.internal.httpclient.debug=true\n+ *       ShortResponseBodyPost\n+ *\/\n","filename":"test\/jdk\/java\/net\/httpclient\/ShortResponseBodyPostWithRetry.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -1,34 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Run of ShortResponseBody with -Djdk.httpclient.enableAllMethodRetry\n- * @library \/lib\/testlibrary\n- * @build jdk.testlibrary.SimpleSSLContext\n- * @build ShortResponseBody\n- * @run testng\/othervm\n- *       -Djdk.httpclient.HttpClient.log=headers,errors,channel\n- *       -Djdk.httpclient.enableAllMethodRetry\n- *       ShortResponseBody\n- *\/\n","filename":"test\/jdk\/java\/net\/httpclient\/ShortResponseBodyWithRetry.java","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"}]}