{"files":[{"patch":"@@ -371,0 +371,22 @@\n+    @Test\n+    public static void upgradeableModule() throws IOException {\n+        Path mpath = Paths.get(System.getProperty(\"java.home\"), \"jmods\");\n+        if (!Files.exists(mpath)) {\n+            return;\n+        }\n+\n+        Path dest = Paths.get(\"test4\");\n+        HashesTest ht = new HashesTest(dest);\n+        ht.makeModule(\"m1\");\n+        ht.makeModule(\"java.compiler\", \"m1\");\n+        ht.makeModule(\"m2\", \"java.compiler\");\n+\n+        ht.makeJmod(\"m1\");\n+        ht.makeJmod(\"m2\");\n+        ht.makeJmod(\"java.compiler\",\n+                    \"--module-path\",\n+                    ht.lib.toString() + File.pathSeparator + mpath,\n+                    \"--hash-modules\", \"java\\\\.(?!se)|^m.*\");\n+\n+        ht.checkHashes(\"java.compiler\",  \"m2\");\n+    }\n","filename":"test\/jdk\/tools\/jmod\/hashes\/HashesTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n- * @modules jdk.compiler\n+ * @modules java.compiler\n+ *          jdk.compiler\n@@ -54,0 +55,1 @@\n+    private static final Path UPGRADE_MODS_DIRS = Paths.get(\"upgrademods\");\n@@ -59,1 +61,3 @@\n-\n+    \/\/ test module m2 uses java.compiler internals\n+    private static final String TEST2_MODULE = \"m2\";\n+    private static final String TEST2_MAIN_CLASS = \"jdk.test2.Main\";\n@@ -77,0 +81,5 @@\n+        \/\/ javac -d upgrademods\/java.compiler src\/java.compiler\/**\n+        compiled = CompilerUtils.compile(\n+                SRC_DIR.resolve(\"java.compiler\"),\n+                UPGRADE_MODS_DIRS.resolve(\"java.compiler\"));\n+        assertTrue(compiled, \"module java.compiler did not compile\");\n@@ -78,0 +87,7 @@\n+        \/\/ javac --upgrade-module-path upgrademods -d mods\/m2 src\/m2\/**\n+        compiled = CompilerUtils.compile(\n+                SRC_DIR.resolve(TEST2_MODULE),\n+                MODS_DIR.resolve(TEST2_MODULE),\n+                \"--upgrade-module-path\", UPGRADE_MODS_DIRS.toString(),\n+                \"--add-exports\", \"java.compiler\/javax.tools.internal=m2\");\n+        assertTrue(compiled, \"module \" + TEST2_MODULE + \" did not compile\");\n@@ -149,0 +165,16 @@\n+    \/**\n+     * Test --add-exports with upgraded module\n+     *\/\n+    public void testWithUpgradedModule() throws Exception {\n+\n+        \/\/ java --add-exports java.compiler\/javax.tools.internal=m2\n+        \/\/      --upgrade-module-path upgrademods --module-path mods -m ...\n+        String mid = TEST2_MODULE + \"\/\" + TEST2_MAIN_CLASS;\n+        int exitValue = executeTestJava(\n+                \"--add-exports\", \"java.compiler\/javax.tools.internal=m2\",\n+                \"--upgrade-module-path\", UPGRADE_MODS_DIRS.toString(),\n+                \"--module-path\", MODS_DIR.toString(),\n+                \"-m\", mid)\n+                .outputTo(System.out)\n+                .errorTo(System.out)\n+                .getExitValue();\n@@ -150,0 +182,2 @@\n+        assertTrue(exitValue == 0);\n+    }\n","filename":"test\/jdk\/tools\/launcher\/modules\/addexports\/AddExportsTest.java","additions":36,"deletions":2,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+package javax.annotation.processing;\n+\n+public interface Generated {\n@@ -26,1 +29,0 @@\n-package sun.security.ssl;\n@@ -28,1 +30,0 @@\n-interface SSLCredentials {\n","filename":"test\/jdk\/tools\/launcher\/modules\/addexports\/src\/java.compiler\/javax\/annotation\/processing\/Generated.java","additions":3,"deletions":2,"binary":false,"changes":5,"previous_filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLCredentials.java","status":"copied"},{"patch":"@@ -24,1 +24,1 @@\n-package p;\n+package javax.tools;\n@@ -26,1 +26,1 @@\n-public class A {\n+public class ToolsHelper {\n","filename":"test\/jdk\/tools\/launcher\/modules\/addexports\/src\/java.compiler\/javax\/tools\/ToolsHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/java\/lang\/Package\/A.java","status":"copied"},{"patch":"@@ -24,1 +24,1 @@\n-package nsk.stress.jni;\n+package javax.tools.internal;\n@@ -26,1 +26,1 @@\n-class Synchronizer {\n+public class Helper {\n","filename":"test\/jdk\/tools\/launcher\/modules\/addexports\/src\/java.compiler\/javax\/tools\/internal\/Helper.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/jni\/Synchronizer.java","status":"copied"},{"patch":"@@ -22,1 +22,0 @@\n- *\n@@ -25,2 +24,3 @@\n-module com.hello {\n-    requires org.astro;\n+module java.compiler {\n+    exports javax.tools;\n+    exports javax.annotation.processing;\n","filename":"test\/jdk\/tools\/launcher\/modules\/addexports\/src\/java.compiler\/module-info.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/hotspot\/jtreg\/runtime\/appcds\/jigsaw\/modulepath\/src\/com.hello\/module-info.java","status":"copied"},{"patch":"@@ -0,0 +1,32 @@\n+\/**\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test2;\n+\n+import javax.tools.internal.Helper;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        Helper h = new Helper();\n+    }\n+}\n","filename":"test\/jdk\/tools\/launcher\/modules\/addexports\/src\/m2\/jdk\/test2\/Main.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -24,2 +24,2 @@\n-module foo {\n-    exports jdk.test.foo;\n+module m2 {\n+    requires java.compiler;\n","filename":"test\/jdk\/tools\/launcher\/modules\/addexports\/src\/m2\/module-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/tools\/jmod\/src\/foo\/module-info.java","status":"copied"}]}