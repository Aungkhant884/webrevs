{"files":[{"patch":"@@ -4443,0 +4443,10 @@\n+operand immI_positive()\n+%{\n+  predicate(n->get_int() > 0);\n+  match(ConI);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n@@ -17435,1 +17445,1 @@\n-instruct vsra8B_imm(vecD dst, vecD src, immI shift) %{\n+instruct vsra8B_imm(vecD dst, vecD src, immI_positive shift) %{\n@@ -17450,1 +17460,1 @@\n-instruct vsra16B_imm(vecX dst, vecX src, immI shift) %{\n+instruct vsra16B_imm(vecX dst, vecX src, immI_positive shift) %{\n@@ -17464,1 +17474,1 @@\n-instruct vsrl8B_imm(vecD dst, vecD src, immI shift) %{\n+instruct vsrl8B_imm(vecD dst, vecD src, immI_positive shift) %{\n@@ -17484,1 +17494,1 @@\n-instruct vsrl16B_imm(vecX dst, vecX src, immI shift) %{\n+instruct vsrl16B_imm(vecX dst, vecX src, immI_positive shift) %{\n@@ -17639,1 +17649,1 @@\n-instruct vsra4S_imm(vecD dst, vecD src, immI shift) %{\n+instruct vsra4S_imm(vecD dst, vecD src, immI_positive shift) %{\n@@ -17654,1 +17664,1 @@\n-instruct vsra8S_imm(vecX dst, vecX src, immI shift) %{\n+instruct vsra8S_imm(vecX dst, vecX src, immI_positive shift) %{\n@@ -17668,1 +17678,1 @@\n-instruct vsrl4S_imm(vecD dst, vecD src, immI shift) %{\n+instruct vsrl4S_imm(vecD dst, vecD src, immI_positive shift) %{\n@@ -17688,1 +17698,1 @@\n-instruct vsrl8S_imm(vecX dst, vecX src, immI shift) %{\n+instruct vsrl8S_imm(vecX dst, vecX src, immI_positive shift) %{\n@@ -17827,1 +17837,1 @@\n-instruct vsra2I_imm(vecD dst, vecD src, immI shift) %{\n+instruct vsra2I_imm(vecD dst, vecD src, immI_positive shift) %{\n@@ -17840,1 +17850,1 @@\n-instruct vsra4I_imm(vecX dst, vecX src, immI shift) %{\n+instruct vsra4I_imm(vecX dst, vecX src, immI_positive shift) %{\n@@ -17853,1 +17863,1 @@\n-instruct vsrl2I_imm(vecD dst, vecD src, immI shift) %{\n+instruct vsrl2I_imm(vecD dst, vecD src, immI_positive shift) %{\n@@ -17866,1 +17876,1 @@\n-instruct vsrl4I_imm(vecX dst, vecX src, immI shift) %{\n+instruct vsrl4I_imm(vecX dst, vecX src, immI_positive shift) %{\n@@ -17939,1 +17949,1 @@\n-instruct vsra2L_imm(vecX dst, vecX src, immI shift) %{\n+instruct vsra2L_imm(vecX dst, vecX src, immI_positive shift) %{\n@@ -17952,1 +17962,1 @@\n-instruct vsrl2L_imm(vecX dst, vecX src, immI shift) %{\n+instruct vsrl2L_imm(vecX dst, vecX src, immI_positive shift) %{\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":24,"deletions":14,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8288445\n+ * @summary Test shift by 0\n+ * @run main\/othervm -Xbatch -XX:-TieredCompilation\n+ * compiler.codegen.ShiftByZero\n+ *\/\n+\n+package compiler.codegen;\n+\n+public class ShiftByZero {\n+\n+    public static final int N = 64;\n+\n+    public static int[] i32 = new int[N];\n+\n+    public static void bMeth() {\n+        int shift = i32[0];\n+        \/\/ This loop is to confuse the optimizer, so that \"shift\" is\n+        \/\/ optimized to 0 only after loop vectorization.\n+        for (int i8 = 279; i8 > 1; --i8) {\n+            shift <<= 6;\n+        }\n+        \/\/ low 6 bits of shift are 0, so shift can be\n+        \/\/ simplified to constant 0\n+        {\n+            for (int i = 0; i < N; ++i) {\n+                i32[i] += i32[i] >>= shift;\n+            }\n+            for (int i = 0; i < N; ++i) {\n+                i32[i] += i32[i] >>>= shift;\n+            }\n+            for (int i = 0; i < N; ++i) {\n+                i32[i] >>>= shift;\n+            }\n+            for (int i = 0; i < N; ++i) {\n+                i32[i] >>= shift;\n+            }\n+            for (int i = 0; i < N; ++i) {\n+                i32[i] <<= shift;\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 20_000; i++) {\n+            bMeth();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/codegen\/ShiftByZero.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}