{"files":[{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2010, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 4750978\n- * @run main\/othervm\/timeout=300 ExecWithDir\n- * @summary Ensure that we can fork-and-exec repeatedly when a new working\n- *          directory is specified\n- *\/\n-\n-import java.io.File;\n-\n-public class ExecWithDir {\n-\n-    private static final int N = 500;\n-\n-    public static void main(String args[]) throws Exception {\n-        if (! UnixCommands.isUnix) {\n-            System.out.println(\"For UNIX only\");\n-            return;\n-        }\n-        UnixCommands.ensureCommandsAvailable(\"true\");\n-\n-        final String trueCmd = UnixCommands.findCommand(\"true\");\n-        File dir = new File(\".\");\n-        for (int i = 1; i <= N; i++) {\n-            System.out.print(i);\n-            System.out.print(\" e\");\n-            Process p = Runtime.getRuntime().exec(trueCmd, null, dir);\n-            System.out.print('w');\n-            int s = p.waitFor();\n-            System.out.println(\"x \" + s);\n-            if (s != 0) throw new Error(\"Unexpected return code \" + s);\n-\n-            \/\/ Avoid \"Too many open files\"\n-            p.getInputStream().close();\n-            p.getOutputStream().close();\n-            p.getErrorStream().close();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Runtime\/exec\/ExecWithDir.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"}]}