{"files":[{"patch":"@@ -0,0 +1,175 @@\n+\/*\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4494085 8079258 8234802\n+ * @summary Verifies that the right mouse button drag gesture is recognized\n+ *          on Win32 and Mac OS X\n+ * @run main RightMouseButtonDragTest\n+ *\/\n+\n+import java.awt.*;\n+import java.awt.datatransfer.*;\n+import java.awt.dnd.*;\n+import java.awt.event.*;\n+import java.io.*;\n+import javax.swing.*;\n+\n+public class RightMouseButtonDragTest implements AWTEventListener {\n+\n+    private static Frame frame;\n+    boolean dragRecognized = false;\n+\n+    final DragSource dragSource = DragSource.getDefaultDragSource();\n+    final Transferable transferable = new StringSelection(\"TEXT\");\n+    final DragGestureListener dragGestureListener = new DragGestureListener() {\n+            public void dragGestureRecognized(DragGestureEvent dge) {\n+                dragRecognized = true;\n+            }\n+        };\n+\n+    static final Object SYNC_LOCK = new Object();\n+    static final int FRAME_ACTIVATION_TIMEOUT = 2000;\n+    static final int DROP_COMPLETION_TIMEOUT = 5000;\n+    static final int MOUSE_RELEASE_TIMEOUT = 1000;\n+\n+    final String os = System.getProperty(\"os.name\");\n+    final boolean isWin = os.startsWith(\"Win\");\n+    final boolean isMac = os.startsWith(\"Mac\");\n+\n+    Component clickedComponent = null;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            RightMouseButtonDragTest app = new RightMouseButtonDragTest();\n+            SwingUtilities.invokeAndWait(() -> app.init());\n+            app.start();\n+        } finally {\n+            if(frame != null) SwingUtilities.invokeAndWait(() -> frame.dispose());\n+        }\n+    }\n+\n+    public void init() {\n+        \/\/Create instructions for the user here, as well as set up\n+        \/\/ the environment -- set the layout manager, add buttons,\n+        \/\/ etc.\n+        frame = new JFrame();\n+        frame.setTitle(\"Test frame\");\n+        frame.setBounds(100, 100, 200, 200);\n+        dragSource.createDefaultDragGestureRecognizer(frame, DnDConstants.ACTION_COPY_OR_MOVE,\n+                                                      dragGestureListener);\n+\n+\n+        frame.getToolkit().addAWTEventListener(this, AWTEvent.MOUSE_EVENT_MASK);\n+        frame.setVisible(true);\n+\n+    }\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+\n+    public void start() {\n+        try {\n+            final Robot robot = new Robot();\n+            robot.waitForIdle();\n+\n+            Thread.sleep(FRAME_ACTIVATION_TIMEOUT);\n+\n+            final Point srcPoint = frame.getLocationOnScreen();\n+            Dimension d = frame.getSize();\n+            srcPoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+            if (!pointInComponent(robot, srcPoint, frame)) {\n+                System.err.println(\"WARNING: Couldn't locate source frame.\");\n+                return;\n+            }\n+\n+            final Point dstPoint = new Point(srcPoint);\n+            dstPoint.translate(d.width \/ 4, d.height \/ 4);\n+\n+            if (!pointInComponent(robot, dstPoint, frame)) {\n+                System.err.println(\"WARNING: Couldn't locate target frame.\");\n+                return;\n+            }\n+\n+            robot.mouseMove(srcPoint.x, srcPoint.y);\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.mousePress(InputEvent.BUTTON3_MASK);\n+            for (;!srcPoint.equals(dstPoint);\n+                 srcPoint.translate(sign(dstPoint.x - srcPoint.x),\n+                                    sign(dstPoint.y - srcPoint.y))) {\n+                robot.mouseMove(srcPoint.x, srcPoint.y);\n+                Thread.sleep(50);\n+            }\n+\n+            robot.mouseRelease(InputEvent.BUTTON3_MASK);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            throw new RuntimeException(\"The test failed.\");\n+        }\n+\n+        if ( (isWin || isMac) && !dragRecognized) {\n+            throw new RuntimeException(\"Drag is not recognized on: \" + os);\n+        } else if (!isWin && !isMac && dragRecognized) {\n+            throw new RuntimeException(\"Drag is recognized on: \" + os);\n+        }\n+    }\n+\n+    public void reset() {\n+        clickedComponent = null;\n+    }\n+\n+    public void eventDispatched(AWTEvent e) {\n+        if (e.getID() == MouseEvent.MOUSE_RELEASED) {\n+            clickedComponent = (Component)e.getSource();\n+            synchronized (SYNC_LOCK) {\n+                SYNC_LOCK.notifyAll();\n+            }\n+        }\n+    }\n+\n+    boolean pointInComponent(Robot robot, Point p, Component comp)\n+      throws InterruptedException {\n+        robot.waitForIdle();\n+        reset();\n+        robot.mouseMove(p.x, p.y);\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        synchronized (SYNC_LOCK) {\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+            SYNC_LOCK.wait(MOUSE_RELEASE_TIMEOUT);\n+        }\n+\n+        Component c = clickedComponent;\n+\n+        while (c != null && c != comp) {\n+            c = c.getParent();\n+        }\n+\n+        return c == comp;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/RightMouseButtonDragTest\/RightMouseButtonDragTest.java","additions":175,"deletions":0,"binary":false,"changes":175,"status":"added"}]}