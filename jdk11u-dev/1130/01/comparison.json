{"files":[{"patch":"@@ -13,1 +13,1 @@\n-        default: \"Linux additional (hotspot only), Linux x64, Linux x86, Windows x64, macOS x64\"\n+        default: \"Linux additional (hotspot only), Linux x64, Linux x86, Windows x64, macOS x64, macOS aarch64\"\n@@ -26,0 +26,1 @@\n+      jdk_version: ${{ steps.check_jdk_versions.outputs.jdk_version }}\n@@ -71,0 +72,20 @@\n+      - name: Determine full JDK versions\n+        id: check_jdk_versions\n+        shell: bash\n+        run: |\n+          FEATURE=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_FEATURE }}\n+          INTERIM=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_INTERIM }}\n+          UPDATE=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_UPDATE }}\n+          PATCH=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_PATCH }}\n+          if [ \"x${PATCH}\" != \"x0\" ]; then\n+             V=${FEATURE}.${INTERIM}.${UPDATE}.${PATCH}\n+          elif [ \"x${UPDATE}\" != \"x0\" ]; then\n+             V=${FEATURE}.${INTERIM}.${UPDATE}\n+          elif [ \"x${INTERIM}\" != \"x0\" ]; then\n+             V={FEATURE}.${INTERIM}\n+          else\n+             V=${FEATURE}\n+          fi\n+          echo \"::set-output name=jdk_version::${V}\"\n+        if: steps.check_submit.outputs.should_run != 'false'\n+\n@@ -134,1 +155,1 @@\n-      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}.${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_INTERIM }}.${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_UPDATE }}\"\n+      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n@@ -259,1 +280,1 @@\n-      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}.${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_INTERIM }}.${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_UPDATE }}\"\n+      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n@@ -448,1 +469,1 @@\n-      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}.${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_INTERIM }}.${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_UPDATE }}\"\n+      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n@@ -596,1 +617,1 @@\n-      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}.${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_INTERIM }}.${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_UPDATE }}\"\n+      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n@@ -729,1 +750,1 @@\n-      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}.${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_INTERIM }}.${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_UPDATE }}\"\n+      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n@@ -882,1 +903,1 @@\n-      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}.${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_INTERIM }}.${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_UPDATE }}\"\n+      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n@@ -1037,1 +1058,1 @@\n-      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}.${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_INTERIM }}.${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_UPDATE }}\"\n+      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n@@ -1224,1 +1245,1 @@\n-      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}.${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_INTERIM }}.${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_UPDATE }}\"\n+      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n@@ -1322,1 +1343,1 @@\n-      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}\"\n+      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n@@ -1449,1 +1470,1 @@\n-      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}.${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_INTERIM }}.${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_UPDATE }}\"\n+      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n","filename":".github\/workflows\/submit.yml","additions":32,"deletions":11,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-version=11.0.16\n+version=11.0.17\n","filename":".jcheck\/conf","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-DEFAULT_VERSION_UPDATE=16\n+DEFAULT_VERSION_UPDATE=17\n@@ -36,1 +36,1 @@\n-DEFAULT_VERSION_DATE=2022-07-19\n+DEFAULT_VERSION_DATE=2022-10-18\n@@ -40,1 +40,1 @@\n-DEFAULT_PROMOTED_VERSION_PRE=\n+DEFAULT_PROMOTED_VERSION_PRE=ea\n","filename":"make\/autoconf\/version-numbers","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2337,1 +2337,1 @@\n-                int rs = resizeStamp(n);\n+                int rs = resizeStamp(n) << RESIZE_STAMP_SHIFT;\n@@ -2339,3 +2339,2 @@\n-                    if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||\n-                        sc == rs + MAX_RESIZERS || (nt = nextTable) == null ||\n-                        transferIndex <= 0)\n+                    if (sc == rs + MAX_RESIZERS || sc == rs + 1 ||\n+                        (nt = nextTable) == null || transferIndex <= 0)\n@@ -2346,2 +2345,1 @@\n-                else if (U.compareAndSetInt(this, SIZECTL, sc,\n-                                             (rs << RESIZE_STAMP_SHIFT) + 2))\n+                else if (U.compareAndSetInt(this, SIZECTL, sc, rs + 2))\n@@ -2361,1 +2359,1 @@\n-            int rs = resizeStamp(tab.length);\n+            int rs = resizeStamp(tab.length) << RESIZE_STAMP_SHIFT;\n@@ -2364,2 +2362,2 @@\n-                if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||\n-                    sc == rs + MAX_RESIZERS || transferIndex <= 0)\n+                if (sc == rs + MAX_RESIZERS || sc == rs + 1 ||\n+                    transferIndex <= 0)\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ConcurrentHashMap.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2022, Huawei Technologies Co., Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8240903\n+ * @summary Test consistency of moduleHashes attribute between builds\n+ * @library \/test\/lib\n+ * @run testng HashesOrderTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.spi.ToolProvider;\n+import java.util.stream.Collectors;\n+\n+import jdk.test.lib.compiler.ModuleInfoMaker;\n+\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+public class HashesOrderTest {\n+    private ToolProvider JMOD_TOOL = ToolProvider.findFirst(\"jmod\")\n+        .orElseThrow(() ->\n+            new RuntimeException(\"jmod tool not found\")\n+        );\n+\n+    \/\/ buffer size used for reading and writing\n+    private static final int BUFFER_SIZE = 8192;\n+\n+    private int NUM_MODULES = 64;\n+    private Path mods;\n+    private Path lib1;\n+    private Path lib2;\n+    private ModuleInfoMaker builder;\n+\n+    @Test\n+    public void test() throws Exception {\n+        mods = Path.of(\"mods\");\n+        lib1 = Path.of(\"lib1\");\n+        lib2 = Path.of(\"lib2\");\n+        builder = new ModuleInfoMaker(Path.of(\"src\"));\n+\n+        Files.createDirectories(mods);\n+        Files.createDirectories(lib1);\n+        Files.createDirectories(lib2);\n+\n+        makeModule(\"ma\");\n+        String moduleName;\n+        for (int i = 0; i < NUM_MODULES; i++) {\n+            moduleName = \"m\" + i + \"b\";\n+            makeModule(moduleName, \"ma\");\n+            makeJmod(moduleName, lib1);\n+            makeJmod(moduleName, lib2);\n+        }\n+        makeJmod(\"ma\", lib1, \"--module-path\", lib1.toString(),\n+                \"--hash-modules\", \".*\");\n+        Path jmod1 = lib1.resolve(\"ma.jmod\");\n+\n+        makeJmod(\"ma\", lib2, \"--module-path\", lib2.toString(),\n+                \"--hash-modules\", \".*\");\n+        Path jmod2 = lib2.resolve(\"ma.jmod\");\n+\n+        assertEquals(mismatch(jmod1, jmod2), -1);\n+    }\n+\n+    private void makeModule(String mn, String... deps)\n+        throws IOException\n+    {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"module \")\n+          .append(mn)\n+          .append(\" {\")\n+          .append(\"\\n\");\n+        Arrays.stream(deps)\n+              .forEach(req -> {\n+                  sb.append(\"    requires \");\n+                  sb.append(req)\n+                    .append(\";\\n\");\n+              });\n+        sb.append(\"}\\n\");\n+        builder.writeJavaFiles(mn, sb.toString());\n+        builder.compile(mn, mods);\n+    }\n+\n+    private void makeJmod(String moduleName, Path libName, String... options) {\n+        Path mclasses = mods.resolve(moduleName);\n+        Path outfile = libName.resolve(moduleName + \".jmod\");\n+        List<String> args = new ArrayList<>();\n+        args.add(\"create\");\n+        Collections.addAll(args, options);\n+        Collections.addAll(args, \"--class-path\", mclasses.toString(),\n+                           outfile.toString());\n+\n+        runJmod(args);\n+    }\n+\n+    private void runJmod(List<String> args) {\n+        runJmod(args.toArray(new String[args.size()]));\n+    }\n+\n+    private void runJmod(String... args) {\n+        int rc = JMOD_TOOL.run(System.out, System.out, args);\n+        System.out.println(\"jmod \" + Arrays.stream(args).collect(Collectors.joining(\" \")));\n+        if (rc != 0) {\n+            throw new AssertionError(\"jmod failed: rc = \" + rc);\n+        }\n+    }\n+\n+    private long mismatch(Path path, Path path2) throws IOException {\n+        if (Files.isSameFile(path, path2)) {\n+            return -1;\n+        }\n+        byte[] buffer1 = new byte[BUFFER_SIZE];\n+        byte[] buffer2 = new byte[BUFFER_SIZE];\n+        try (InputStream in1 = Files.newInputStream(path);\n+             InputStream in2 = Files.newInputStream(path2);) {\n+            long totalRead = 0;\n+            while (true) {\n+                int nRead1 = in1.readNBytes(buffer1, 0, BUFFER_SIZE);\n+                int nRead2 = in2.readNBytes(buffer2, 0, BUFFER_SIZE);\n+\n+                int i = Arrays.mismatch(buffer1, 0, nRead1, buffer2, 0, nRead2);\n+                if (i > -1) {\n+                    return totalRead + i;\n+                }\n+                if (nRead1 < BUFFER_SIZE) {\n+                    \/\/ we've reached the end of the files, but found no mismatch\n+                    return -1;\n+                }\n+                totalRead += nRead1;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jmod\/hashes\/HashesOrderTest.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"}]}