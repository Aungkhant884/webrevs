{"files":[{"patch":"@@ -1221,2 +1221,8 @@\n-          assert(get_block_for_node(def) || def->is_Con(), \"must have block; constants for debug info ok\");\n-          \/\/ Verify that instructions in the block is in correct order.\n+          Block* def_block = get_block_for_node(def);\n+          assert(def_block || def->is_Con(), \"must have block; constants for debug info ok\");\n+          \/\/ Verify that all definitions dominate their uses (except for virtual\n+          \/\/ instructions merging multiple definitions).\n+          assert(n->is_Root() || n->is_Region() || n->is_Phi() || n->is_MachMerge() ||\n+                 def_block->dominates(block),\n+                 \"uses must be dominated by definitions\");\n+          \/\/ Verify that instructions in the block are in correct order.\n@@ -1226,1 +1232,1 @@\n-          if (get_block_for_node(def) == block && !(block->head()->is_Loop() && n->is_Phi()) &&\n+          if (def_block == block && !(block->head()->is_Loop() && n->is_Phi()) &&\n@@ -1242,0 +1248,8 @@\n+      if (n->is_Proj()) {\n+        assert(j >= 1, \"a projection cannot be the first instruction in a block\");\n+        Node* pred = block->get_node(j - 1);\n+        Node* parent = n->in(0);\n+        assert(parent != NULL, \"projections must have a parent\");\n+        assert(pred == parent || (pred->is_Proj() && pred->in(0) == parent),\n+               \"projections must follow their parents or other sibling projections\");\n+      }\n","filename":"src\/hotspot\/share\/opto\/block.cpp","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1393,1 +1393,1 @@\n-  for(uint i4 = 0; i4 < block->_num_succs; i4++ ) {\n+  for (uint i4 = 0; i4 < block->_num_succs; i4++) {\n@@ -1396,2 +1396,4 @@\n-    \/\/ Remove any newly created, but dead, nodes.\n-    for( uint j = new_cnt; j > 0; j-- ) {\n+    \/\/ Remove any newly created, but dead, nodes by traversing their schedule\n+    \/\/ backwards. Here, a dead node is a node whose only outputs (if any) are\n+    \/\/ unused projections.\n+    for (uint j = new_cnt; j > 0; j--) {\n@@ -1399,2 +1401,26 @@\n-      if (n->outcnt() == 0 &&\n-          (!n->is_Proj() || n->as_Proj()->in(0)->outcnt() == 1) ){\n+      \/\/ Individual projections are examined together with all siblings when\n+      \/\/ their parent is visited.\n+      if (n->is_Proj()) {\n+        continue;\n+      }\n+      bool dead = true;\n+      for (DUIterator_Fast imax, i = n->fast_outs(imax); i < imax; i++) {\n+        Node* out = n->fast_out(i);\n+        \/\/ n is live if it has a non-projection output or a used projection.\n+        if (!out->is_Proj() || out->outcnt() > 0) {\n+          dead = false;\n+          break;\n+        }\n+      }\n+      if (dead) {\n+        \/\/ n's only outputs (if any) are unused projections scheduled next to n\n+        \/\/ (see PhaseCFG::select()). Remove these projections backwards.\n+        for (uint k = j + n->outcnt(); k > j; k--) {\n+          Node* proj = sb->get_node(k);\n+          assert(proj->is_Proj() && proj->in(0) == n,\n+                 \"projection should correspond to dead node\");\n+          proj->disconnect_inputs(NULL, C);\n+          sb->remove_node(k);\n+          new_cnt--;\n+        }\n+        \/\/ Now remove the node itself.\n","filename":"src\/hotspot\/share\/opto\/lcm.cpp","additions":31,"deletions":5,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -117,0 +117,2 @@\n+    \/\/ This assumes that the instruction is not used in the other exception\n+    \/\/ blocks. Global code motion is responsible for maintaining this invariant.\n","filename":"src\/hotspot\/share\/opto\/reg_split.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.exceptions;\n+\n+\/**\n+ * @test\n+ * @bug 8263227\n+ * @summary Tests that users of return values from exception-throwing method\n+ *          calls are not duplicated in the call's exception path. The second\n+ *          run with a variable seed is added for test robustness.\n+ * @library \/test\/lib \/\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:+UnlockDiagnosticVMOptions\n+ *                   -Xbatch -XX:+StressGCM -XX:StressSeed=0\n+ *                   -XX:+VerifyRegisterAllocator\n+ *                   -XX:CompileCommand=dontinline,java.lang.Integer::*\n+ *                   compiler.exceptions.TestSpilling\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:+UnlockDiagnosticVMOptions\n+ *                   -Xbatch -XX:+StressGCM\n+ *                   -XX:+VerifyRegisterAllocator\n+ *                   -XX:CompileCommand=dontinline,java.lang.Integer::*\n+ *                   compiler.exceptions.TestSpilling\n+ *\/\n+\n+public class TestSpilling {\n+\n+    public static void test() {\n+        int a = Integer.valueOf(42).intValue();\n+        \/\/ After global code motion, the logic below should only be placed in\n+        \/\/ the fall-through path of java.lang.Integer::intValue(). Otherwise,\n+        \/\/ live range splitting might create uses without reaching definitions\n+        \/\/ if 'a' is spilled.\n+        int b = (((a & 0x0000F000)) + 1);\n+        int c = a \/ b + ((a % b > 0) ? 1 : 0);\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10_000; i++) {\n+            test();\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/exceptions\/TestSpilling.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}