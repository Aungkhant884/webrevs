{"files":[{"patch":"@@ -31,4 +31,3 @@\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.LinkedList;\n-import java.util.Locale;\n+import java.util.*;\n+\n+import sun.security.action.GetPropertyAction;\n@@ -631,2 +630,2 @@\n-        for (int i = 0; i < supportedProtocols.length; i++) {\n-            if (supportedProtocols[i] == protocolVersion) {\n+        for (ProtocolVersion supportedProtocol : supportedProtocols) {\n+            if (supportedProtocol == protocolVersion) {\n@@ -696,0 +695,2 @@\n+            Collection<String> clientDisabledExtensions =\n+                    getDisabledExtensions(\"jdk.tls.client.disableExtensions\");\n@@ -698,1 +699,2 @@\n-                if (extension.handshakeType != SSLHandshake.NOT_APPLICABLE) {\n+                if (extension.handshakeType != SSLHandshake.NOT_APPLICABLE &&\n+                        !clientDisabledExtensions.contains(extension.name)) {\n@@ -703,5 +705,7 @@\n-            \/\/ Switch off SNI extention?\n-            boolean enableExtension =\n-                Utilities.getBooleanProperty(\"jsse.enableSNIExtension\", true);\n-            if (!enableExtension) {\n-                extensions.remove(CH_SERVER_NAME);\n+            \/\/ Switch off SNI extension?\n+            if (extensions.contains(CH_SERVER_NAME)) {\n+                boolean enableExtension = Utilities.getBooleanProperty(\n+                        \"jsse.enableSNIExtension\", true);\n+                if (!enableExtension) {\n+                    extensions.remove(CH_SERVER_NAME);\n+                }\n@@ -718,7 +722,9 @@\n-            enableExtension =\n-                Utilities.getBooleanProperty(\n-                        \"jsse.enableMFLNExtension\", false) ||\n-                Utilities.getBooleanProperty(\n-                        \"jsse.enableMFLExtension\", false);\n-            if (!enableExtension) {\n-                extensions.remove(CH_MAX_FRAGMENT_LENGTH);\n+            if (extensions.contains(CH_MAX_FRAGMENT_LENGTH)) {\n+                boolean enableExtension =\n+                        Utilities.getBooleanProperty(\n+                                \"jsse.enableMFLNExtension\", false) ||\n+                        Utilities.getBooleanProperty(\n+                                \"jsse.enableMFLExtension\", false);\n+                if (!enableExtension) {\n+                    extensions.remove(CH_MAX_FRAGMENT_LENGTH);\n+                }\n@@ -765,4 +771,6 @@\n-            enableExtension = Utilities.getBooleanProperty(\n-                    \"jdk.tls.client.enableCAExtension\", false);\n-            if (!enableExtension) {\n-                extensions.remove(CH_CERTIFICATE_AUTHORITIES);\n+            if (extensions.contains(CH_CERTIFICATE_AUTHORITIES)) {\n+                boolean enableExtension = Utilities.getBooleanProperty(\n+                        \"jdk.tls.client.enableCAExtension\", false);\n+                if (!enableExtension) {\n+                    extensions.remove(CH_CERTIFICATE_AUTHORITIES);\n+                }\n@@ -780,0 +788,2 @@\n+            Collection<String> serverDisabledExtensions =\n+                    getDisabledExtensions(\"jdk.tls.server.disableExtensions\");\n@@ -782,1 +792,2 @@\n-                if (extension.handshakeType != SSLHandshake.NOT_APPLICABLE) {\n+                if (extension.handshakeType != SSLHandshake.NOT_APPLICABLE &&\n+                        !serverDisabledExtensions.contains(extension.name)) {\n@@ -790,0 +801,34 @@\n+\n+    \/\/ Get disabled extensions, which could be customized with System Properties.\n+    private static Collection<String> getDisabledExtensions(\n+                String propertyName) {\n+        String property = GetPropertyAction.privilegedGetProperty(propertyName);\n+        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,sslctx\")) {\n+            SSLLogger.fine(\n+                    \"System property \" + propertyName + \" is set to '\" +\n+                            property + \"'\");\n+        }\n+        if (property != null && !property.isEmpty()) {\n+            \/\/ remove double quote marks from beginning\/end of the property\n+            if (property.length() > 1 && property.charAt(0) == '\"' &&\n+                    property.charAt(property.length() - 1) == '\"') {\n+                property = property.substring(1, property.length() - 1);\n+            }\n+        }\n+\n+        if (property != null && !property.isEmpty()) {\n+            String[] extensionNames = property.split(\",\");\n+            Collection<String> extensions =\n+                    new ArrayList<>(extensionNames.length);\n+            for (String extension : extensionNames) {\n+                extension = extension.trim();\n+                if (!extension.isEmpty()) {\n+                    extensions.add(extension);\n+                }\n+            }\n+\n+            return extensions;\n+        }\n+\n+        return Collections.emptyList();\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLExtension.java","additions":69,"deletions":24,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8217633\n+ * @library \/javax\/net\/ssl\/templates\n+ * @summary Configurable extensions with system properties\n+ * @run main\/othervm DisableExtensions supported_versions TLSv1.3 fail\n+ * @run main\/othervm DisableExtensions supported_versions TLSv1.2\n+ *\/\n+\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLException;\n+\n+public class DisableExtensions extends SSLSocketTemplate {\n+\n+    private final String[] protocols;\n+\n+    public DisableExtensions(String[] protocols) {\n+        this.protocols = protocols;\n+    }\n+\n+    @Override\n+    protected void configureClientSocket(SSLSocket socket) {\n+        socket.setEnabledProtocols(protocols);\n+    }\n+\n+    \/\/ Run the test case.\n+    \/\/\n+    \/\/ Check that the extension could be disabled, and the impact may be\n+    \/\/ different for different protocols.\n+    public static void main(String[] args) throws Exception {\n+        System.setProperty(\"jdk.tls.client.disableExtensions\", args[0]);\n+\n+        boolean shouldSuccess = (args.length != 3);\n+\n+        try {\n+            (new DisableExtensions(new String[] {args[1]})).run();\n+        } catch (SSLException | IllegalStateException ssle) {\n+            if (shouldSuccess) {\n+                throw new RuntimeException(\n+                        \"The extension \" + args[0] + \" is disabled\");\n+            }\n+\n+            return;\n+        }\n+\n+        if (!shouldSuccess) {\n+            throw new RuntimeException(\n+                    \"The extension \" + args[0] +\n+                    \" should be disabled and the connection should fail\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/DisableExtensions.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}