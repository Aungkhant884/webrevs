{"files":[{"patch":"@@ -76,0 +76,38 @@\n+        for (int i = 1; i <= ITERATIONS; i++) {\n+            System.out.format(\"Iteration %d%n\", i);\n+\n+            CompletableFuture<Void> future = new CompletableFuture<>();\n+            CountDownLatch running = new CountDownLatch(1);\n+            AtomicReference<String> failed = new AtomicReference<>();\n+\n+            Thread thread = new Thread(() -> {\n+                \/\/ signal main thread that child is running\n+                running.countDown();\n+\n+                \/\/ invoke Future.get, it complete with the interrupt status set or\n+                \/\/ else throw InterruptedException with the interrupt status not set.\n+                try {\n+                    future.get();\n+\n+                    \/\/ interrupt status should be set\n+                    if (!Thread.currentThread().isInterrupted()) {\n+                        failed.set(\"Future.get completed with interrupt status not set\");\n+                    }\n+                } catch (InterruptedException ex) {\n+                    \/\/ interrupt status should be cleared\n+                    if (Thread.currentThread().isInterrupted()) {\n+                        failed.set(\"InterruptedException with interrupt status set\");\n+                    }\n+                } catch (Throwable ex) {\n+                    failed.set(\"Unexpected exception \" + ex);\n+                }\n+            });\n+            thread.setDaemon(true);\n+            thread.start();\n+\n+            \/\/ wait for thread to run\n+            running.await();\n+\n+            \/\/ interrupt thread and set result after an optional (random) delay\n+            thread.interrupt();\n+            long sleepMillis = ThreadLocalRandom.current().nextLong(10);\n@@ -86,0 +124,5 @@\n+            \/\/ wait for thread to terminate and check for failure\n+            thread.join();\n+            String failedReason = failed.get();\n+            if (failedReason != null) {\n+                throw new RuntimeException(\"Test failed: \" + failedReason);\n","filename":"test\/jdk\/java\/util\/concurrent\/CompletableFuture\/SwallowedInterruptedException.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"modified"}]}