{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,1 @@\n+import java.net.ConnectException;\n@@ -37,1 +38,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -39,2 +39,1 @@\n-import jdk.test.lib.Utils;\n-import jdk.test.lib.process.ProcessTools;\n+import lib.jdb.Debuggee;\n@@ -49,1 +48,1 @@\n- * @build VMConnection BadHandshakeTest Exit0\n+ * @build BadHandshakeTest Exit0\n@@ -61,1 +60,1 @@\n-            Connector connector = (Connector)iter.next();\n+            Connector connector = iter.next();\n@@ -69,38 +68,2 @@\n-    \/*\n-     * Launch a server debuggee with the given address\n-     *\/\n-    private static LaunchResult launch(String address, String class_name) throws Exception {\n-        String[] args = VMConnection.insertDebuggeeVMOptions(new String[] {\n-            \"-agentlib:jdwp=transport=dt_socket\" +\n-            \",server=y\" + \",suspend=y\" + \",address=\" + address,\n-            class_name\n-        });\n-\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(args);\n-\n-        final AtomicBoolean success = new AtomicBoolean();\n-        final AtomicBoolean bindFailed = new AtomicBoolean();\n-        Process p = ProcessTools.startProcess(\n-            class_name,\n-            pb,\n-            (line) -> {\n-                \/\/ 'Listening for transport dt_socket at address: xxxxx'\n-                \/\/ indicates the debuggee is ready to accept connections\n-                if (line.contains(\"Listening for transport dt_socket at address:\")) {\n-                    success.set(true);\n-                    return true;\n-                }\n-                \/\/ 'Address already in use' indicates\n-                \/\/ the debuggee has failed to start due to busy port.\n-                if (line.contains(\"Address already in use\")) {\n-                    bindFailed.set(true);\n-                    return true;\n-                }\n-                return false;\n-            },\n-            Integer.MAX_VALUE,\n-            TimeUnit.MILLISECONDS\n-        );\n-\n-        return new LaunchResult(success.get() ? p : null,\n-                bindFailed.get());\n+    private static void log(Object s) {\n+        System.out.println(String.valueOf(s));\n@@ -109,6 +72,0 @@\n-    \/*\n-     * - pick a TCP port\n-     * - Launch a server debuggee: server=y,suspend=y,address=${port}\n-     * - run it to VM death\n-     * - verify we saw no error\n-     *\/\n@@ -116,13 +73,37 @@\n-        \/\/ Launch the server debuggee\n-        int port = 0;\n-        Process process = null;\n-        while (process == null) {\n-            port = Utils.getFreePort();\n-            String address = String.valueOf(port);\n-            LaunchResult launchResult = launch(address, \"Exit0\");\n-            process = launchResult.getProcess();\n-            if (launchResult.isBindFailed()) {\n-                System.out.println(\"Port \" + port + \" already in use. Trying to restart debuggee with a new one...\");\n-                Thread.sleep(100);\n-            } else if (process == null ) {\n-                throw new RuntimeException(\"Unable to start debugee\");\n+        \/\/ Launch the server debugee\n+        log(\"Starting debuggee...\");\n+        try (Debuggee debuggee = Debuggee.launcher(\"Exit0\").launch()) {\n+            log(\"Debuggee started.\");\n+            int port = Integer.parseInt(debuggee.getAddress());\n+            log(\"Debuggee port: \" + port);\n+\n+            log(\"testcase 1...\");\n+            \/\/ Connect to the debuggee and handshake with garbage\n+            Socket s = new Socket(\"localhost\", port);\n+            s.getOutputStream().write(\"Here's a poke in the eye\".getBytes(\"UTF-8\"));\n+            s.close();\n+\n+            log(\"testcase 2...\");\n+            \/\/ Re-connect and do a partial handshake - don't disconnect\n+            \/\/ Re-connect just after disconnect may cause \"connection refused\" error (see JDK-8192057)\n+            Exception error = null;\n+            long retryDelay = 20;\n+            for (int retry = 0; retry < 5; retry++) {\n+                if (error != null) {\n+                    try {\n+                        Thread.sleep(retryDelay);\n+                    } catch (InterruptedException ex) {\n+                        \/\/ ignore\n+                    }\n+                    retryDelay *= 2;\n+                    error = null;\n+                }\n+                try {\n+                    log(\"retry: \" + retry);\n+                    s = new Socket(\"localhost\", port);\n+                    s.getOutputStream().write(\"JDWP-\".getBytes(\"UTF-8\"));\n+                    break;\n+                } catch (ConnectException ex) {\n+                    log(\"got exception: \" + ex.toString());\n+                    error = ex;\n+                }\n@@ -130,26 +111,2 @@\n-        }\n-\n-        \/\/ Connect to the debuggee and handshake with garbage\n-        Socket s = new Socket(\"localhost\", port);\n-        s.getOutputStream().write(\"Here's a poke in the eye\".getBytes(\"UTF-8\"));\n-        s.close();\n-\n-        \/\/ Re-connect and to a partial handshake - don't disconnect\n-        s = new Socket(\"localhost\", port);\n-        s.getOutputStream().write(\"JDWP-\".getBytes(\"UTF-8\"));\n-\n-\n-        \/\/ Attach to server debuggee and resume it so it can exit\n-        AttachingConnector conn = (AttachingConnector)findConnector(\"com.sun.jdi.SocketAttach\");\n-        Map<String, Argument> conn_args = conn.defaultArguments();\n-        Connector.IntegerArgument port_arg =\n-            (Connector.IntegerArgument)conn_args.get(\"port\");\n-        port_arg.setValue(port);\n-        VirtualMachine vm = conn.attach(conn_args);\n-\n-        \/\/ The first event is always a VMStartEvent, and it is always in\n-        \/\/ an EventSet by itself.  Wait for it.\n-        EventSet evtSet = vm.eventQueue().remove();\n-        for (Event event: evtSet) {\n-            if (event instanceof VMStartEvent) {\n-                break;\n+            if (error != null) {\n+                throw error;\n@@ -157,18 +114,0 @@\n-            throw new RuntimeException(\"Test failed - debuggee did not start properly\");\n-        }\n-\n-        vm.eventRequestManager().deleteAllBreakpoints();\n-        vm.resume();\n-\n-        process.waitFor();\n-    }\n-\n-    private static class LaunchResult {\n-\n-        private final Process p;\n-        private final boolean bindFailed;\n-\n-        public LaunchResult(Process p, boolean bindFailed) {\n-            this.p = p;\n-            this.bindFailed = bindFailed;\n-        }\n@@ -176,3 +115,43 @@\n-        public Process getProcess() {\n-            return p;\n-        }\n+            log(\"final attach...\");\n+            \/\/ Attach to server debuggee to ensure it's still available to attach and resume it so it can exit\n+            AttachingConnector conn = (AttachingConnector)findConnector(\"com.sun.jdi.SocketAttach\");\n+            retryDelay = 20;\n+            for (int retry = 0; retry < 5; retry++) {\n+                if (error != null) {\n+                    try {\n+                        Thread.sleep(retryDelay);\n+                    } catch (InterruptedException ex) {\n+                        \/\/ ignore\n+                    }\n+                    retryDelay *= 2;\n+                    error = null;\n+                }\n+                try {\n+                    log(\"retry: \" + retry);\n+                    Map<String, Argument> conn_args = conn.defaultArguments();\n+                    Connector.IntegerArgument port_arg =\n+                            (Connector.IntegerArgument)conn_args.get(\"port\");\n+                    port_arg.setValue(port);\n+                    VirtualMachine vm = conn.attach(conn_args);\n+\n+                    \/\/ The first event is always a VMStartEvent, and it is always in\n+                    \/\/ an EventSet by itself.  Wait for it.\n+                    EventSet evtSet = vm.eventQueue().remove();\n+                    for (Event event : evtSet) {\n+                        if (event instanceof VMStartEvent) {\n+                            break;\n+                        }\n+                        throw new RuntimeException(\"Test failed - debuggee did not start properly\");\n+                    }\n+\n+                    vm.eventRequestManager().deleteAllBreakpoints();\n+                    vm.resume();\n+                    break;\n+                } catch (ConnectException ex) {\n+                    log(\"got exception: \" + ex.toString());\n+                    error = ex;\n+                }\n+            }\n+            if (error != null) {\n+                throw error;\n+            }\n@@ -180,2 +159,2 @@\n-        public boolean isBindFailed() {\n-            return bindFailed;\n+            \/\/ give the debuggee some time to exit before forcibly terminating it\n+            debuggee.waitFor(10, TimeUnit.SECONDS);\n@@ -183,1 +162,0 @@\n-\n@@ -185,1 +163,0 @@\n-\n","filename":"test\/jdk\/com\/sun\/jdi\/BadHandshakeTest.java","additions":91,"deletions":114,"binary":false,"changes":205,"status":"modified"}]}