{"files":[{"patch":"@@ -2726,1 +2726,1 @@\n-            }.scan(tree);\n+            }.scan(tree.body);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8222251\n+ * @summary preflow visitor is not visiting lambda expressions\n+ * @compile PreflowNotVisitingLambdaExpTest.java\n+ *\/\n+\n+public class PreflowNotVisitingLambdaExpTest {\n+    interface HandleCallback<T, X extends Exception> {\n+        T withHandle(Handle handle) throws X;\n+    }\n+\n+    interface HandleConsumer<X extends Exception> {\n+        void useHandle(Handle handle) throws X;\n+    }\n+\n+    interface Handle {}\n+\n+    interface Jdbi {\n+        <R, X extends Exception> R withHandle(HandleCallback<R, X> callback) throws X;\n+        <X extends Exception> void useHandle(final HandleConsumer<X> callback) throws X;\n+    }\n+\n+    interface ObjectAssert<ACTUAL> {\n+        void isSameAs(ACTUAL t);\n+    }\n+\n+    static <T> ObjectAssert<T> assertThat(T actual) {\n+        return null;\n+    }\n+\n+    private Jdbi jdbi;\n+\n+    public void nestedUseHandle() {\n+        jdbi.withHandle(h1 -> {\n+            jdbi.useHandle(h2 ->\n+                    assertThat(h1).isSameAs(h2));\n+            return null;\n+        });\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/T8222251\/PreflowNotVisitingLambdaExpTest.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}