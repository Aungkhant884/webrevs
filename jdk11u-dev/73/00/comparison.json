{"files":[{"patch":"@@ -327,1 +327,1 @@\n-                                             hash, CHECK_NULL);\n+                                             hash, THREAD);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -380,0 +380,4 @@\n+    } else {\n+      \/\/ The unhandled oop detector will poison local variable obj,\n+      \/\/ so reset it to NULL if mem is NULL.\n+      obj = NULL;\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -352,3 +352,0 @@\n-\n-  CHECK_UNHANDLED_OOPS_ONLY(thread->clear_unhandled_oops();)\n-\n@@ -401,4 +398,0 @@\n-  \/\/ NOTE: if we move the computation of the result_val_address inside\n-  \/\/ the call to call_stub, the optimizer produces wrong code.\n-  intptr_t* result_val_address = (intptr_t*)(result->get_value_addr());\n-\n@@ -442,0 +435,5 @@\n+      \/\/ NOTE: if we move the computation of the result_val_address inside\n+      \/\/ the call to call_stub, the optimizer produces wrong code.\n+      intptr_t* result_val_address = (intptr_t*)(result->get_value_addr());\n+      intptr_t* parameter_address = args->parameters();\n+\n@@ -449,1 +447,1 @@\n-        args->parameters(),\n+        parameter_address,\n","filename":"src\/hotspot\/share\/runtime\/javaCalls.cpp","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-static bool unhandled_oop_print=0;\n+static Thread* unhandled_oop_print = NULL;\n@@ -65,3 +65,3 @@\n-  _level ++;\n-  if (unhandled_oop_print) {\n-    for (int i=0; i<_level; i++) tty->print(\" \");\n+  _level++;\n+  if (unhandled_oop_print == _thread) {\n+    for (int i=0; i < _level; i++) tty->print(\" \");\n@@ -102,3 +102,2 @@\n-  _level --;\n-  if (unhandled_oop_print) {\n-    for (int i=0; i<_level; i++) tty->print(\" \");\n+  if (unhandled_oop_print == _thread) {\n+    for (int i=0; i < _level; i++) tty->print(\" \");\n@@ -107,0 +106,1 @@\n+  _level--;\n","filename":"src\/hotspot\/share\/runtime\/unhandledOops.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -162,1 +162,1 @@\n-                          CHECK_NH);\n+                          THREAD);\n","filename":"src\/hotspot\/share\/services\/gcNotifier.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8227766\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+CheckUnhandledOops -Xmx100m TestOutOfMemory\n+ *\/\n+\n+public class TestOutOfMemory {\n+    public static void main(java.lang.String[] unused) {\n+        final int BIG = 0x100000;\n+        \/\/ Getting OOM breaks the unhandled oop detector\n+        try {\n+            int[][] X = new int[BIG][];\n+            for (int i = 0; i < BIG; i++) {\n+                X[i] = new int[BIG];\n+                System.out.println(\"length = \" + X.length);\n+            }\n+         } catch (OutOfMemoryError oom) {\n+            System.out.println(\"OOM expected\");\n+         }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/CheckUnhandledOops\/TestOutOfMemory.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"}]}