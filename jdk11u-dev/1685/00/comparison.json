{"files":[{"patch":"@@ -1940,0 +1940,24 @@\n+        push_cast_ii(worklist, n, m);\n+      }\n+    }\n+  }\n+}\n+\n+void PhaseCCP::push_if_not_bottom_type(Unique_Node_List& worklist, Node* n) const {\n+  if (n->bottom_type() != type(n)) {\n+    worklist.push(n);\n+  }\n+}\n+\n+\/\/ CastII::Value() optimizes CmpI\/If patterns if the right input of the CmpI has a constant type. If the CastII input is\n+\/\/ the same node as the left input into the CmpI node, the type of the CastII node can be improved accordingly. Add the\n+\/\/ CastII node back to the worklist to re-apply Value() to either not miss this optimization or to undo it because it\n+\/\/ cannot be applied anymore. We could have optimized the type of the CastII before but now the type of the right input\n+\/\/ of the CmpI (i.e. 'parent') is no longer constant. The type of the CastII must be widened in this case.\n+void PhaseCCP::push_cast_ii(Unique_Node_List& worklist, const Node* parent, const Node* use) const {\n+  if (use->Opcode() == Op_CmpI && use->in(2) == parent) {\n+    Node* other_cmp_input = use->in(1);\n+    for (DUIterator_Fast imax, i = other_cmp_input->fast_outs(imax); i < imax; i++) {\n+      Node* cast_ii = other_cmp_input->fast_out(i);\n+      if (cast_ii->is_CastII()) {\n+        push_if_not_bottom_type(worklist, cast_ii);\n@@ -2004,1 +2028,0 @@\n-\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -588,0 +588,2 @@\n+  void push_if_not_bottom_type(Unique_Node_List& worklist, Node* n) const;\n+  void push_cast_ii(Unique_Node_List& worklist, const Node* parent, const Node* use) const;\n","filename":"src\/hotspot\/share\/opto\/phaseX.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8297264\n+ * @summary Test that CastII nodes are added to the CCP worklist if they could have been\n+ *          optimized due to a CmpI\/If pattern.\n+ * @run main\/othervm -Xcomp -XX:CompileCommand=compileonly,compiler.ccp.TestCastIIWrongTypeCCP::*\n+ *                   compiler.ccp.TestCastIIWrongTypeCCP\n+ *\/\n+package compiler.ccp;\n+\n+public class TestCastIIWrongTypeCCP {\n+\n+    static int x;\n+\n+    public static void main(String[] args) {\n+        test();\n+    }\n+\n+    static void test() {\n+        int iArr[] = new int[400];\n+        int i = 0;\n+        do {\n+            for (int i5 = 1; i5 < 4; i5++) {\n+                for (int i9 = 2; i9 > i5; i9 -= 3) {\n+                    if (x != 0) {\n+                        A.unloaded(); \/\/ unloaded UCT\n+                    }\n+                    x = 1;\n+                    iArr[5] = 1;\n+                }\n+            }\n+            i++;\n+        } while (i < 10000);\n+    }\n+}\n+\n+class A {\n+    public static void unloaded() {\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/ccp\/TestCastIIWrongTypeCCP.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}