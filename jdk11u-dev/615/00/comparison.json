{"files":[{"patch":"@@ -1,45 +0,0 @@\n-<!--\n- Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-<!--\n-  @test\n-  @bug 8007220\n-  @summary The popup menu is not added to the tray icon after it was added to tray\n-  @author Petr Pchelko\n-  @library ..\/..\/regtesthelpers\n-  @build Sysout\n-  @run applet\/manual=yesno AddPopupAfterShowTest.html\n-  -->\n-<head>\n-    <title> AddPopupAfterShowTest <\/title>\n-<\/head>\n-<body>\n-\n-<h1>AddPopupAfterShowTest<br>Bug ID: 8007220<\/h1>\n-\n-<p> See the dialog box (usually in upper left corner) for instructions<\/p>\n-\n-<APPLET CODE=\"AddPopupAfterShowTest.class\" WIDTH=200 HEIGHT=200><\/APPLET>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/AddPopupAfterShowTest\/AddPopupAfterShowTest.html","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,7 @@\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8007220 8204161\n+ * @summary The popup menu is not added to the tray icon after it was added to tray\n+ * @run main\/manual AddPopupAfterShowTest\n+ *\/\n@@ -25,4 +32,5 @@\n-import test.java.awt.regtesthelpers.Sysout;\n-\n-import java.applet.Applet;\n-import java.awt.*;\n+import java.awt.AWTException;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n@@ -30,4 +38,30 @@\n-\n-public class AddPopupAfterShowTest extends Applet {\n-    @Override\n-    public void init() {\n+import java.awt.Frame;\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.Insets;\n+import java.awt.Image;\n+import java.awt.Graphics2D;\n+import java.awt.event.ActionEvent;\n+import java.awt.TextArea;\n+import java.awt.TrayIcon;\n+import java.awt.Panel;\n+import java.awt.PopupMenu;\n+import java.awt.RenderingHints;\n+import java.awt.MenuItem;\n+import java.awt.SystemTray;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public class AddPopupAfterShowTest {\n+\n+    private static final Frame instructionFrame = new Frame();\n+    private static TrayIcon trayIcon = null;\n+\n+    private static volatile boolean testResult = false;\n+    private static volatile CountDownLatch countDownLatch;\n+    private static final String INSTRUCTIONS = \"INSTRUCTIONS:\\n\\n\" +\n+            \"1) The red circle icon was added to the system tray.\\n\"+\n+            \"2) Check that a popup menu is opened when the icon is clicked.\\n\"+\n+            \"3) If true the test is passed, otherwise failed.\";\n+\n+    public static void main(String[] args) throws Exception {\n@@ -35,2 +69,2 @@\n-            Sysout.createDialogWithInstructions(new String[]{\n-                    \"Press PASS, the System Tray is not supported\"});\n+            System.out.println(\"The System Tray is not supported,\" +\n+                    \"so this test can not be run in this scenario.\");\n@@ -39,7 +73,9 @@\n-\n-\n-        String[] instructions = {\n-                \"1) The red circle icon was added to the system tray.\",\n-                \"2) Check that a popup menu is opened when the icon is clicked.\",\n-                \"3) If true the test is passed, otherwise failed.\"};\n-        Sysout.createDialogWithInstructions(instructions);\n+        countDownLatch = new CountDownLatch(1);\n+\n+        createInstructionUI();\n+        createTestUI();\n+        countDownLatch.await(15, TimeUnit.MINUTES);\n+        disposeUI();\n+        if (!testResult) {\n+            throw new RuntimeException(\"Test failed!\");\n+        }\n@@ -48,6 +84,55 @@\n-    @Override\n-    public void start() {\n-        setSize(200, 200);\n-        show();\n-\n-        createSystemTrayIcon();\n+    private static void createInstructionUI() {\n+        GridBagLayout layout = new GridBagLayout();\n+        Panel mainControlPanel = new Panel(layout);\n+        Panel resultButtonPanel = new Panel(layout);\n+\n+        GridBagConstraints gbc = new GridBagConstraints();\n+\n+        gbc.gridx = 0;\n+        gbc.gridy = 0;\n+        gbc.insets = new Insets(5, 15, 5, 15);\n+        gbc.fill = GridBagConstraints.HORIZONTAL;\n+\n+        TextArea instructionTextArea = new TextArea();\n+        instructionTextArea.setText(INSTRUCTIONS);\n+        instructionTextArea.setEditable(false);\n+        instructionTextArea.setBackground(Color.white);\n+        mainControlPanel.add(instructionTextArea, gbc);\n+\n+        Button passButton = new Button(\"Pass\");\n+        passButton.setActionCommand(\"Pass\");\n+        passButton.addActionListener((ActionEvent e) -> {\n+            testResult = true;\n+            countDownLatch.countDown();\n+        });\n+\n+        Button failButton = new Button(\"Fail\");\n+        failButton.setActionCommand(\"Fail\");\n+        failButton.addActionListener(e -> {\n+            countDownLatch.countDown();\n+        });\n+\n+        gbc.gridx = 0;\n+        gbc.gridy = 0;\n+\n+        resultButtonPanel.add(passButton, gbc);\n+\n+        gbc.gridx = 1;\n+        gbc.gridy = 0;\n+        resultButtonPanel.add(failButton, gbc);\n+\n+        gbc.gridx = 0;\n+        gbc.gridy = 2;\n+        mainControlPanel.add(resultButtonPanel, gbc);\n+\n+        instructionFrame.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+                countDownLatch.countDown();\n+            }\n+        });\n+        instructionFrame.pack();\n+        instructionFrame.add(mainControlPanel);\n+        instructionFrame.pack();\n+        instructionFrame.setVisible(true);\n@@ -56,2 +141,2 @@\n-    private static void createSystemTrayIcon() {\n-        final TrayIcon trayIcon = new TrayIcon(createTrayIconImage());\n+    private static void createTestUI() throws Exception {\n+        trayIcon = new TrayIcon(createTrayIconImage());\n@@ -59,8 +144,4 @@\n-\n-        try {\n-            \/\/ Add tray icon to system tray *before* adding popup menu to demonstrate buggy behaviour\n-            SystemTray.getSystemTray().add(trayIcon);\n-            trayIcon.setPopupMenu(createTrayIconPopupMenu());\n-        } catch (final AWTException awte) {\n-            awte.printStackTrace();\n-        }\n+        \/\/ Add tray icon to system tray *before* adding popup menu\n+        \/\/ to demonstrate buggy behaviour\n+        SystemTray.getSystemTray().add(trayIcon);\n+        trayIcon.setPopupMenu(createTrayIconPopupMenu());\n@@ -71,1 +152,2 @@\n-         * Create a small image of a red circle to use as the icon for the tray icon\n+         * Create a small image of a red circle to use as the icon\n+         * for the tray icon\n@@ -74,2 +156,4 @@\n-        final BufferedImage trayImage = new BufferedImage(trayIconImageSize, trayIconImageSize, BufferedImage.TYPE_INT_ARGB);\n-        final Graphics2D trayImageGraphics = (Graphics2D) trayImage.getGraphics();\n+        final BufferedImage trayImage = new BufferedImage(trayIconImageSize,\n+                trayIconImageSize, BufferedImage.TYPE_INT_ARGB);\n+        final Graphics2D trayImageGraphics =\n+                (Graphics2D) trayImage.getGraphics();\n@@ -77,1 +161,2 @@\n-        trayImageGraphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n+        trayImageGraphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n+                RenderingHints.VALUE_ANTIALIAS_ON);\n@@ -80,1 +165,2 @@\n-        trayImageGraphics.fillRect(0, 0, trayImage.getWidth(), trayImage.getHeight());\n+        trayImageGraphics.fillRect(0, 0, trayImage.getWidth(),\n+                trayImage.getHeight());\n@@ -106,0 +192,5 @@\n+\n+    private static void disposeUI() {\n+        SystemTray.getSystemTray().remove(trayIcon);\n+        instructionFrame.dispose();\n+    }\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/AddPopupAfterShowTest\/AddPopupAfterShowTest.java","additions":130,"deletions":39,"binary":false,"changes":169,"status":"modified"},{"patch":"@@ -0,0 +1,185 @@\n+\/*\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 6272324 8204161\n+ * @summary Tests that clicking TrayIcon with middle button generates events.\n+ * @run main\/manual MiddleButtonEventTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.image.BufferedImage;\n+import java.awt.Frame;\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.Insets;\n+import java.awt.Graphics;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.TextArea;\n+import java.awt.Toolkit;\n+import java.awt.TrayIcon;\n+import java.awt.Panel;\n+import java.awt.SystemTray;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MiddleButtonEventTest {\n+\n+    private static final Frame instructionFrame = new Frame();\n+    private static TrayIcon trayIcon = null;\n+    private static final String INSTRUCTIONS = \"INSTRUCTIONS:\\n\\n\" +\n+            \"Tests that clicking TrayIcon with middle button generates events.\\n\"+\n+            \"When the test is started you will see three-color icon in the \" +\n+            \"system tray.\\n Click on it with the middle mouse button:\\n\" +\n+            \"- MOUSE_PRESSED, MOUSE_RELEASED, MOUSE_CLICKED events should be\\n\"+\n+            \"  generated for the middle button.\\n\" +\n+            \"  If so, the test passed, otherwise failed.\";\n+    private static final TextArea eventOutputArea = new TextArea(\"\", 5, 50,\n+                                                    TextArea.SCROLLBARS_BOTH);\n+    private static volatile boolean testResult = false;\n+    private static volatile CountDownLatch countDownLatch;\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!SystemTray.isSupported()) {\n+            System.out.println(\"The System Tray is not supported, \" +\n+                    \"so this test can not be run in this scenario.\");\n+            return;\n+        }\n+        countDownLatch = new CountDownLatch(1);\n+\n+        createInstructionUI();\n+        createTestUI();\n+        countDownLatch.await(15, TimeUnit.MINUTES);\n+        disposeUI();\n+        if (!testResult) {\n+            throw new RuntimeException(\"Test failed!\");\n+        }\n+    }\n+\n+    private static void createInstructionUI() {\n+        GridBagLayout layout = new GridBagLayout();\n+        Panel mainControlPanel = new Panel(layout);\n+        Panel resultButtonPanel = new Panel(layout);\n+\n+        GridBagConstraints gbc = new GridBagConstraints();\n+\n+        gbc.gridx = 0;\n+        gbc.gridy = 0;\n+        gbc.insets = new Insets(5, 15, 5, 15);\n+        gbc.fill = GridBagConstraints.HORIZONTAL;\n+\n+        TextArea instructionTextArea = new TextArea();\n+        instructionTextArea.setText(INSTRUCTIONS);\n+        instructionTextArea.setEditable(false);\n+        instructionTextArea.setBackground(Color.white);\n+        mainControlPanel.add(instructionTextArea, gbc);\n+\n+        Button passButton = new Button(\"Pass\");\n+        passButton.setActionCommand(\"Pass\");\n+        passButton.addActionListener((ActionEvent e) -> {\n+            testResult = true;\n+            countDownLatch.countDown();\n+        });\n+\n+        Button failButton = new Button(\"Fail\");\n+        failButton.setActionCommand(\"Fail\");\n+        failButton.addActionListener(e -> {\n+            countDownLatch.countDown();\n+        });\n+\n+        gbc.gridx = 0;\n+        gbc.gridy = 0;\n+\n+        resultButtonPanel.add(passButton, gbc);\n+\n+        gbc.gridx = 1;\n+        gbc.gridy = 0;\n+        resultButtonPanel.add(failButton, gbc);\n+\n+        gbc.gridx = 0;\n+        gbc.gridy = 2;\n+        mainControlPanel.add(resultButtonPanel, gbc);\n+\n+        gbc.gridx = 0;\n+        gbc.gridy = 3;\n+        mainControlPanel.add(eventOutputArea, gbc);\n+\n+        instructionFrame.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                super.windowClosing(e);\n+                countDownLatch.countDown();\n+            }\n+        });\n+        instructionFrame.pack();\n+        instructionFrame.add(mainControlPanel);\n+        instructionFrame.pack();\n+        instructionFrame.setVisible(true);\n+    }\n+\n+    private static void createTestUI() throws Exception {\n+        BufferedImage im = new BufferedImage(16, 16,\n+                BufferedImage.TYPE_INT_ARGB);\n+        Graphics gr = im.createGraphics();\n+        gr.setColor(Color.white);\n+        gr.fillRect(0, 0, 16, 5);\n+        gr.setColor(Color.blue);\n+        gr.fillRect(0, 5, 16, 10);\n+        gr.setColor(Color.red);\n+        gr.fillRect(0, 10, 16, 16);\n+\n+        trayIcon = new TrayIcon(im);\n+        trayIcon.setImageAutoSize(true);\n+        trayIcon.addMouseListener(new MouseAdapter() {\n+            public void mousePressed(MouseEvent e) {\n+                printEventStr(e.toString());\n+            }\n+\n+            public void mouseReleased(MouseEvent e) {\n+                printEventStr(e.toString());\n+            }\n+\n+            public void mouseClicked(MouseEvent e) {\n+                printEventStr(e.toString());\n+            }\n+        });\n+        SystemTray.getSystemTray().add(trayIcon);\n+    }\n+\n+    private static void disposeUI() {\n+        SystemTray.getSystemTray().remove(trayIcon);\n+        instructionFrame.dispose();\n+    }\n+\n+    private static void printEventStr(String msg) {\n+        eventOutputArea.append(msg + \"\\n\");\n+        System.out.println(msg);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/MiddleButtonEventTest\/MiddleButtonEventTest.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"added"}]}