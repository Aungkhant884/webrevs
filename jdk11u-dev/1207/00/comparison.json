{"files":[{"patch":"@@ -2717,0 +2717,9 @@\n+\n+                @Override\n+                public void visitClassDef(JCClassDecl that) {\n+                    \/\/ or class declaration trees!\n+                }\n+\n+                public void visitLambda(JCLambda that) {\n+                    \/\/ or lambda expressions!\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8203277\n+ * @summary preflow visitor used during lambda attribution shouldn't visit class definitions inside the lambda body\n+ * @compile PreflowShouldVisitLambdaOrDiamondInsideLambdaTest.java\n+ *\/\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+class PreflowShouldVisitLambdaOrDiamondInsideLambdaTest {\n+    void build() {\n+        List<Function<String, Double>> list1 = transform(null,\n+                builder -> new Function<>() {\n+                    public Double apply(String params) { return null; }\n+                });\n+\n+        List<Function<String, Double>> list2 = transform(null,\n+                builder -> arg -> null);\n+    }\n+\n+    static <Argument, Result> List<Result> transform(List<Argument> fromList,\n+            Function<? super Argument,? extends Result> function) { return null; }\n+}\n","filename":"test\/langtools\/tools\/javac\/T8203277\/PreflowShouldVisitLambdaOrDiamondInsideLambdaTest.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"}]}