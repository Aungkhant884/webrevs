{"files":[{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4160499\n+ * @modules jdk.httpserver\n+ * @summary sun.net.www.protocol.http.HttpURLConnection.getErrorStream not hooked up\n+ *\/\n+import static java.net.HttpURLConnection.HTTP_NOT_FOUND;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+\n+public class GetErrorStream {\n+    public static void main(String[] args) throws Exception {\n+        InetSocketAddress addr = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n+        HttpServer server = HttpServer.create(addr, 10);\n+        server.createContext(\"\/\" + HTTP_NOT_FOUND, he -> {\n+            final String RESPONSE = \"Test: File Not Found.\";\n+            he.sendResponseHeaders(HTTP_NOT_FOUND, RESPONSE.length());\n+            OutputStream os = he.getResponseBody();\n+            os.write(RESPONSE.getBytes());\n+            os.close();\n+        });\n+        int port = server.getAddress().getPort();\n+        System.out.println(\"Server port = \" + port);\n+\n+        ExecutorService executor = Executors.newCachedThreadPool();\n+        server.setExecutor(executor);\n+        server.start();\n+\n+        URL url = new URL(\"http:\/\/localhost:\" + port + \"\/\" + HTTP_NOT_FOUND);\n+        URLConnection conn = url.openConnection();\n+\n+        try {\n+            InputStream is = conn.getInputStream();\n+            throw new RuntimeException(\"Expect HTTP_NOT_FOUND!\");\n+        } catch (FileNotFoundException e) {\n+            try {\n+                int respCode = ((HttpURLConnection) conn).getResponseCode();\n+                InputStream es = ((HttpURLConnection) conn).getErrorStream();\n+                if (respCode == HTTP_NOT_FOUND && es != null) {\n+                    System.out.println(\"Passed!\");\n+                } else {\n+                    throw new RuntimeException(\"getErrorStream failure.\");\n+                }\n+            } catch (Exception ex) {\n+            }\n+        } finally {\n+            server.stop(0);\n+            executor.shutdownNow();\n+        }\n+\n+    }\n+}\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/GetErrorStream.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}