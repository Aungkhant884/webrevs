{"files":[{"patch":"@@ -37,1 +37,0 @@\n-  _metaspace_used_bytes = MetaspaceUtils::used_bytes();\n@@ -120,1 +119,1 @@\n-  MetaspaceUtils::print_metaspace_change(_before._metaspace_used_bytes);\n+  MetaspaceUtils::print_metaspace_change(_before._meta_sizes);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapTransition.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"memory\/metaspace\/metaspaceSizesSnapshot.hpp\"\n@@ -38,1 +39,1 @@\n-    size_t _metaspace_used_bytes;\n+    const metaspace::MetaspaceSizesSnapshot _meta_sizes;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapTransition.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"memory\/metaspace\/metaspaceSizesSnapshot.hpp\"\n@@ -270,2 +271,1 @@\n-      _old_gen_used(heap->old_gen()->used_in_bytes()),\n-      _metadata_used(MetaspaceUtils::used_bytes()) { };\n+      _old_gen_used(heap->old_gen()->used_in_bytes()) { }\n@@ -276,1 +276,1 @@\n-  size_t metadata_used() const  { return _metadata_used; }\n+  const metaspace::MetaspaceSizesSnapshot& metaspace_sizes() const { return _meta_sizes; }\n@@ -282,1 +282,1 @@\n-  size_t _metadata_used;\n+  const metaspace::MetaspaceSizesSnapshot _meta_sizes;\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -193,5 +193,1 @@\n-    \/\/ Capture metadata size before collection for sizing.\n-    size_t metadata_prev_used = MetaspaceUtils::used_bytes();\n-\n-    size_t old_gen_prev_used = old_gen->used_in_bytes();\n-    size_t young_gen_prev_used = young_gen->used_in_bytes();\n+    const PreGCValues pre_gc_values(heap);\n@@ -354,3 +350,3 @@\n-    young_gen->print_used_change(young_gen_prev_used);\n-    old_gen->print_used_change(old_gen_prev_used);\n-    MetaspaceUtils::print_metaspace_change(metadata_prev_used);\n+    young_gen->print_used_change(pre_gc_values.young_gen_used());\n+    old_gen->print_used_change(pre_gc_values.old_gen_used());\n+    MetaspaceUtils::print_metaspace_change(pre_gc_values.metaspace_sizes());\n","filename":"src\/hotspot\/share\/gc\/parallel\/psMarkSweep.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1756,1 +1756,1 @@\n-  PreGCValues pre_gc_values(heap);\n+  const PreGCValues pre_gc_values(heap);\n@@ -1905,1 +1905,1 @@\n-    MetaspaceUtils::print_metaspace_change(pre_gc_values.metadata_used());\n+    MetaspaceUtils::print_metaspace_change(pre_gc_values.metaspace_sizes());\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -331,1 +331,1 @@\n-    PreGCValues pre_gc_values(heap);\n+    const PreGCValues pre_gc_values(heap);\n@@ -611,1 +611,1 @@\n-    MetaspaceUtils::print_metaspace_change(pre_gc_values.metadata_used());\n+    MetaspaceUtils::print_metaspace_change(pre_gc_values.metaspace_sizes());\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -567,2 +567,0 @@\n-  const size_t metadata_prev_used = MetaspaceUtils::used_bytes();\n-\n@@ -593,0 +591,1 @@\n+    const metaspace::MetaspaceSizesSnapshot prev_meta_sizes;\n@@ -653,1 +652,1 @@\n-    MetaspaceUtils::print_metaspace_change(metadata_prev_used);\n+    MetaspaceUtils::print_metaspace_change(prev_meta_sizes);\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-      const size_t metadata_prev_used = MetaspaceUtils::used_bytes();\n+      const metaspace::MetaspaceSizesSnapshot prev_meta_sizes;\n@@ -276,1 +276,1 @@\n-      MetaspaceUtils::print_metaspace_change(metadata_prev_used);\n+      MetaspaceUtils::print_metaspace_change(prev_meta_sizes);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -473,3 +473,30 @@\n-void MetaspaceUtils::print_metaspace_change(size_t prev_metadata_used) {\n-  log_info(gc, metaspace)(\"Metaspace: \"  SIZE_FORMAT \"K->\" SIZE_FORMAT \"K(\"  SIZE_FORMAT \"K)\",\n-                          prev_metadata_used\/K, used_bytes()\/K, reserved_bytes()\/K);\n+void MetaspaceUtils::print_metaspace_change(const metaspace::MetaspaceSizesSnapshot& pre_meta_values) {\n+  const metaspace::MetaspaceSizesSnapshot meta_values;\n+\n+  if (Metaspace::using_class_space()) {\n+    log_info(gc, metaspace)(HEAP_CHANGE_FORMAT\" \"\n+                            HEAP_CHANGE_FORMAT\" \"\n+                            HEAP_CHANGE_FORMAT,\n+                            HEAP_CHANGE_FORMAT_ARGS(\"Metaspace\",\n+                                                    pre_meta_values.used(),\n+                                                    pre_meta_values.committed(),\n+                                                    meta_values.used(),\n+                                                    meta_values.committed()),\n+                            HEAP_CHANGE_FORMAT_ARGS(\"NonClass\",\n+                                                    pre_meta_values.non_class_used(),\n+                                                    pre_meta_values.non_class_committed(),\n+                                                    meta_values.non_class_used(),\n+                                                    meta_values.non_class_committed()),\n+                            HEAP_CHANGE_FORMAT_ARGS(\"Class\",\n+                                                    pre_meta_values.class_used(),\n+                                                    pre_meta_values.class_committed(),\n+                                                    meta_values.class_used(),\n+                                                    meta_values.class_committed()));\n+  } else {\n+    log_info(gc, metaspace)(HEAP_CHANGE_FORMAT,\n+                            HEAP_CHANGE_FORMAT_ARGS(\"Metaspace\",\n+                                                    pre_meta_values.used(),\n+                                                    pre_meta_values.committed(),\n+                                                    meta_values.used(),\n+                                                    meta_values.committed()));\n+  }\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":30,"deletions":3,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"memory\/metaspace\/metaspaceSizesSnapshot.hpp\"\n@@ -430,2 +431,2 @@\n-  \/\/ Print change in used metadata.\n-  static void print_metaspace_change(size_t prev_metadata_used);\n+  \/\/ Log change in used metadata.\n+  static void print_metaspace_change(const metaspace::MetaspaceSizesSnapshot& pre_meta_values);\n","filename":"src\/hotspot\/share\/memory\/metaspace.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Twitter, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+\n+#include \"memory\/metaspace.hpp\"\n+#include \"memory\/metaspace\/metaspaceSizesSnapshot.hpp\"\n+\n+namespace metaspace {\n+\n+MetaspaceSizesSnapshot::MetaspaceSizesSnapshot()\n+    : _used(MetaspaceUtils::used_bytes()),\n+      _committed(MetaspaceUtils::committed_bytes()),\n+      _non_class_used(MetaspaceUtils::used_bytes(Metaspace::NonClassType)),\n+      _non_class_committed(MetaspaceUtils::committed_bytes(Metaspace::NonClassType)),\n+      _class_used(MetaspaceUtils::used_bytes(Metaspace::ClassType)),\n+      _class_committed(MetaspaceUtils::committed_bytes(Metaspace::ClassType)) { }\n+\n+} \/\/ namespace metaspace\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceSizesSnapshot.cpp","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Twitter, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_MEMORY_METASPACE_METASPACESIZESSNAPSHOT_HPP\n+#define SHARE_MEMORY_METASPACE_METASPACESIZESSNAPSHOT_HPP\n+\n+namespace metaspace {\n+\n+class MetaspaceSizesSnapshot {\n+public:\n+  MetaspaceSizesSnapshot();\n+\n+  size_t used() const { return _used; }\n+  size_t committed() const { return _committed; }\n+  size_t non_class_used() const { return _non_class_used; }\n+  size_t non_class_committed() const { return _non_class_committed; }\n+  size_t class_used() const { return _class_used; }\n+  size_t class_committed() const { return _class_committed; }\n+\n+private:\n+  const size_t _used;\n+  const size_t _committed;\n+  const size_t _non_class_used;\n+  const size_t _non_class_committed;\n+  const size_t _class_used;\n+  const size_t _class_committed;\n+};\n+\n+} \/\/ namespace metaspace\n+\n+#endif \/\/ SHARE_MEMORY_METASPACE_METASPACESIZESSNAPSHOT_HPP\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceSizesSnapshot.hpp","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -336,0 +336,7 @@\n+\/\/ Memory size transition formatting.\n+\n+#define HEAP_CHANGE_FORMAT \"%s: \" SIZE_FORMAT \"K(\" SIZE_FORMAT \"K)->\" SIZE_FORMAT \"K(\" SIZE_FORMAT \"K)\"\n+\n+#define HEAP_CHANGE_FORMAT_ARGS(_name_, _prev_used_, _prev_capacity_, _used_, _capacity_) \\\n+  (_name_), (_prev_used_) \/ K, (_prev_capacity_) \/ K, (_used_) \/ K, (_capacity_) \/ K\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}