{"files":[{"patch":"@@ -257,0 +257,5 @@\n+    boolean isPrintToFile = false;\n+    private void setPrintToFile(boolean printToFile) {\n+        isPrintToFile = printToFile;\n+    }\n+\n@@ -261,1 +266,0 @@\n-\n@@ -268,1 +272,1 @@\n-        if (psvc == null) {\n+        if (psvc == null && !isPrintToFile) {\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPrinterJob.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -361,0 +361,8 @@\n+    DECLARE_METHOD(jm_setPrintToFile, sjc_CPrinterJob, \"setPrintToFile\", \"(Z)V\");\n+\n+    NSPrintJobDispositionValue jobDisposition = [src jobDisposition];\n+    if (jobDisposition == NSPrintSaveJob) {\n+        (*env)->CallVoidMethod(env, dstPrinterJob, jm_setPrintToFile, true);\n+    } else {\n+        (*env)->CallVoidMethod(env, dstPrinterJob, jm_setPrintToFile, false);\n+    }\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CPrinterJob.m","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,218 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 8211055\n+   @summary Verifies \"print to file\" works even when there is no printer\n+   @requires (os.family == \"mac\")\n+   @run main\/manual TestSaveFileWithoutPrinter\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.FlowLayout;\n+import java.awt.Graphics;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.print.Printable;\n+import java.awt.print.PageFormat;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javax.swing.JButton;\n+import javax.swing.JDialog;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+import javax.swing.Timer;\n+import javax.swing.WindowConstants;\n+\n+public class TestSaveFileWithoutPrinter implements Printable {\n+    private static final CountDownLatch testEndedSignal = new CountDownLatch(1);\n+    private static final int testTimeout = 300000;\n+    private static volatile String testFailureMsg;\n+    private static volatile boolean testPassed;\n+    private static volatile boolean testFinished;\n+    private static PrinterJob job;\n+\n+    public static void main(String[] args) {\n+        job = PrinterJob.getPrinterJob();\n+        if (job.getPrintService() != null) {\n+            System.out.println(\"This test requires no printers to be installed. Exiting.\");\n+            return;\n+        }\n+        SwingUtilities.invokeLater(() -> createAndShowTestDialog());\n+\n+        try {\n+            if (!testEndedSignal.await(testTimeout, TimeUnit.MILLISECONDS)) {\n+                throw new RuntimeException(String.format(\n+                    \"Test timeout '%d ms' elapsed.\", testTimeout));\n+            }\n+            if (!testPassed) {\n+                String failureMsg = testFailureMsg;\n+                if ((failureMsg != null) && (!failureMsg.trim().isEmpty())) {\n+                    throw new RuntimeException(failureMsg);\n+                } else {\n+                    throw new RuntimeException(\"Test failed.\");\n+                }\n+            }\n+        } catch (InterruptedException ie) {\n+            throw new RuntimeException(ie);\n+        } finally {\n+            testFinished = true;\n+        }\n+    }\n+\n+    private static void doTest() {\n+        job.setPrintable(new TestSaveFileWithoutPrinter());\n+        if (job.printDialog()) {\n+            try {\n+                job.print();\n+            } catch (PrinterException pe) {\n+                throw new RuntimeException(pe);\n+            }\n+        }\n+    }\n+\n+    private static void pass() {\n+        testPassed = true;\n+        testEndedSignal.countDown();\n+    }\n+\n+    private static void fail(String failureMsg) {\n+        testFailureMsg = failureMsg;\n+        testPassed = false;\n+        testEndedSignal.countDown();\n+    }\n+\n+    private static String convertMillisToTimeStr(int millis) {\n+        if (millis < 0) {\n+            return \"00:00:00\";\n+        }\n+        int hours = millis \/ 3600000;\n+        int minutes = (millis - hours * 3600000) \/ 60000;\n+        int seconds = (millis - hours * 3600000 - minutes * 60000) \/ 1000;\n+        return String.format(\"%02d:%02d:%02d\", hours, minutes, seconds);\n+    }\n+\n+    private static void createAndShowTestDialog() {\n+        String description =\n+            \" To run this test it is required to delete any installed printers.\\r\\n\" +\n+            \"\\r\\n\" +\n+            \" 1. Verify that saving file via \\\"Save as PDF\\\" results in saving file\\r\\n\" +\n+            \" even if there is no installed printer.\\r\\n\" +\n+            \" 2. Click on \\\"Start Test\\\" button.\\r\\n\" +\n+            \" 3. In the shown print dialog select \\\"Save as PDF\\\" in PDF drop-down list\\r\\n\" +\n+            \" 4. Another dialog opens prompting for filename, enter any filename and press \\\"Save\\\".\\r\\n\" +\n+            \"\\r\\n\" +\n+            \" If the file is saved without any PrinterException, click on \\\"PASS\\\"\\r\\n\" +\n+            \" button, otherwise click on \\\"FAIL\\\" button.\";\n+\n+        final JDialog dialog = new JDialog();\n+        dialog.setTitle(\"SaveFileWithoutPrinter\");\n+        dialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+        dialog.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                dialog.dispose();\n+                fail(\"Main dialog was closed.\");\n+            }\n+        });\n+\n+        final JLabel testTimeoutLabel = new JLabel(String.format(\n+            \"Test timeout: %s\", convertMillisToTimeStr(testTimeout)));\n+        final long startTime = System.currentTimeMillis();\n+        final Timer timer = new Timer(0, null);\n+        timer.setDelay(1000);\n+        timer.addActionListener((e) -> {\n+            int leftTime = testTimeout - (int) (System.currentTimeMillis() - startTime);\n+            if ((leftTime < 0) || testFinished) {\n+                timer.stop();\n+                dialog.dispose();\n+            }\n+            testTimeoutLabel.setText(String.format(\n+                \"Test timeout: %s\", convertMillisToTimeStr(leftTime)));\n+        });\n+        timer.start();\n+\n+        JTextArea textArea = new JTextArea(description);\n+        textArea.setEditable(false);\n+\n+        final JButton testButton = new JButton(\"Start Test\");\n+        final JButton passButton = new JButton(\"PASS\");\n+        final JButton failButton = new JButton(\"FAIL\");\n+        testButton.addActionListener((e) -> {\n+            testButton.setEnabled(false);\n+            new Thread(() -> {\n+                try {\n+                    doTest();\n+\n+                    SwingUtilities.invokeLater(() -> {\n+                        passButton.setEnabled(true);\n+                        failButton.setEnabled(true);\n+                    });\n+                } catch (Throwable t) {\n+                    t.printStackTrace();\n+                    dialog.dispose();\n+                    fail(\"Exception occurred in a thread executing the test.\");\n+                }\n+            }).start();\n+        });\n+        passButton.setEnabled(false);\n+        passButton.addActionListener((e) -> {\n+            dialog.dispose();\n+            pass();\n+        });\n+        failButton.setEnabled(false);\n+        failButton.addActionListener((e) -> {\n+            dialog.dispose();\n+            fail(\"PrinterException thrown.\");\n+        });\n+\n+        JPanel mainPanel = new JPanel(new BorderLayout());\n+        JPanel labelPanel = new JPanel(new FlowLayout());\n+        labelPanel.add(testTimeoutLabel);\n+        mainPanel.add(labelPanel, BorderLayout.NORTH);\n+        mainPanel.add(textArea, BorderLayout.CENTER);\n+        JPanel buttonPanel = new JPanel(new FlowLayout());\n+        buttonPanel.add(testButton);\n+        buttonPanel.add(passButton);\n+        buttonPanel.add(failButton);\n+        mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n+        dialog.add(mainPanel);\n+\n+        dialog.pack();\n+        dialog.setVisible(true);\n+    }\n+\n+    @Override\n+    public int print(Graphics g, PageFormat pf, int pageIndex)\n+        throws PrinterException {\n+        if (pageIndex == 0) {\n+            return Printable.PAGE_EXISTS;\n+        } else {\n+            return Printable.NO_SUCH_PAGE;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/TestSaveFileWithoutPrinter.java","additions":218,"deletions":0,"binary":false,"changes":218,"status":"added"}]}