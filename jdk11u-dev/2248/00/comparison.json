{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,3 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n@@ -41,1 +44,6 @@\n-        String hostsFileName = System.getProperty(\"test.src\", \".\") + \"\/DefaultCachingHosts\";\n+        String hostsFileNameSrc = System.getProperty(\"test.src\", \".\") + \"\/DefaultCachingHosts\";\n+        String hostsFileName = System.getProperty(\"user.dir\", \".\") + \"\/DefaultCachingHosts\";\n+        if (!hostsFileNameSrc.equals(hostsFileName)) {\n+            Files.copy(Path.of(hostsFileNameSrc), Path.of(hostsFileName), REPLACE_EXISTING);\n+            System.out.println(\"Host file created: \" + hostsFileName);\n+        }\n@@ -47,2 +55,2 @@\n-        test (\"theclub\", \"129.156.220.219\", true);      \/\/ lk: 1\n-        test (\"luster\", \"1.16.20.2\", false);            \/\/ lk: 2\n+        test(\"theclub\", \"129.156.220.219\", true);      \/\/ lk: 1\n+        test(\"luster\", \"1.16.20.2\", false);            \/\/ lk: 2\n@@ -53,2 +61,2 @@\n-        test (\"luster\", \"1.16.20.2\", false);            \/\/ lk: 2\n-        sleep (10+1);\n+        test(\"luster\", \"1.16.20.2\", false);            \/\/ lk: 2\n+        sleep(10+1);\n@@ -56,1 +64,1 @@\n-        sleep (5);\n+        sleep(5);\n@@ -63,4 +71,4 @@\n-        test (\"theclub\", \"129.156.220.219\", true, 3);\n-        test (\"luster\", \"10.5.18.21\", true, 3);\n-        test (\"bar\", \"10.5.18.22\", false, 4);\n-        test (\"foo\", \"10.5.18.22\", true, 5);\n+        test(\"theclub\", \"129.156.220.219\", true, 3);\n+        test(\"luster\", \"10.5.18.21\", true, 3);\n+        test(\"bar\", \"10.5.18.22\", false, 4);\n+        test(\"foo\", \"10.5.18.22\", true, 5);\n@@ -69,1 +77,1 @@\n-        sleep (5);\n+        sleep(5);\n@@ -71,2 +79,2 @@\n-        test (\"foo\", \"10.5.18.22\", true, 5);\n-        test (\"theclub\", \"129.156.220.1\", true, 6);\n+        test(\"foo\", \"10.5.18.22\", true, 5);\n+        test(\"theclub\", \"129.156.220.1\", true, 6);\n@@ -74,1 +82,1 @@\n-        sleep (11);\n+        sleep(11);\n@@ -76,2 +84,2 @@\n-        test (\"luster\", \"10.5.18.21\", true, 7);\n-        test (\"theclub\", \"129.156.220.1\", true, 7);\n+        test(\"luster\", \"10.5.18.21\", true, 7);\n+        test(\"theclub\", \"129.156.220.1\", true, 7);\n@@ -80,1 +88,1 @@\n-        sleep (10+6);\n+        sleep(10+6);\n@@ -82,3 +90,3 @@\n-        test (\"theclub\", \"129.156.220.1\", true, 8);\n-        test (\"luster\", \"10.5.18.21\", true, 8);\n-        test (\"foo\", \"10.5.18.22\", true, 9);\n+        test(\"theclub\", \"129.156.220.1\", true, 8);\n+        test(\"luster\", \"10.5.18.21\", true, 8);\n+        test(\"foo\", \"10.5.18.22\", true, 9);\n@@ -89,3 +97,3 @@\n-    static void test (String host, String address,\n-                        boolean shouldSucceed, int count) {\n-        test (host, address, shouldSucceed);\n+    static void test(String host, String address,\n+                     boolean shouldSucceed, int count) {\n+        test(host, address, shouldSucceed);\n@@ -94,1 +102,1 @@\n-    static void sleep (int seconds) {\n+    static void sleep(int seconds) {\n@@ -96,1 +104,1 @@\n-            Thread.sleep (seconds * 1000);\n+            Thread.sleep(seconds * 1000);\n@@ -100,1 +108,1 @@\n-    static void test (String host, String address, boolean shouldSucceed) {\n+    static void test(String host, String address, boolean shouldSucceed) {\n@@ -103,1 +111,1 @@\n-            addr = InetAddress.getByName (host);\n+            addr = InetAddress.getByName(host);\n@@ -105,2 +113,2 @@\n-                throw new RuntimeException (host+\":\"+address+\": should fail\");\n-\n+                throw new RuntimeException(host+\":\"+address+\": should fail (got \"\n+                                           + addr + \")\");\n@@ -109,1 +117,2 @@\n-                throw new RuntimeException(host+\":\"+address+\": compare failed\");\n+                throw new RuntimeException(host+\":\"+address+\": compare failed (found \"\n+                                           + addr + \")\");\n@@ -111,0 +120,2 @@\n+            System.out.println(\"test: \" + host + \"\/\" + address\n+                               + \" succeeded - got \" + addr);\n@@ -114,0 +125,3 @@\n+            } else {\n+                System.out.println(\"test: \" + host + \"\/\" + address\n+                                   + \" succeeded - got expected \" + e);\n@@ -119,4 +133,4 @@\n-    private static void addMappingToHostsFile (String host,\n-                                               String addr,\n-                                               String hostsFileName,\n-                                               boolean append)\n+    private static void addMappingToHostsFile(String host,\n+                                              String addr,\n+                                              String hostsFileName,\n+                                              boolean append)\n@@ -128,1 +142,1 @@\n-}\n+        }\n","filename":"test\/jdk\/sun\/net\/InetAddress\/nameservice\/simple\/DefaultCaching.java","additions":50,"deletions":36,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+ * @run main KeepAliveTimerThread\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true KeepAliveTimerThread\n@@ -106,2 +108,4 @@\n-        ServerSocket ss = new ServerSocket(0);\n-        Server s = new Server (ss);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        ServerSocket ss = new ServerSocket();\n+        ss.bind(new InetSocketAddress(loopback, 0));\n+        Server s = new Server(ss);\n","filename":"test\/jdk\/sun\/net\/www\/http\/KeepAliveCache\/KeepAliveTimerThread.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,0 +29,3 @@\n+ * @library \/test\/lib\n+ * @run main InfiniteLoop\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true InfiniteLoop\n@@ -38,0 +41,1 @@\n+import java.net.InetAddress;\n@@ -39,0 +43,1 @@\n+import java.net.Proxy;\n@@ -42,0 +47,2 @@\n+import jdk.test.lib.net.URIBuilder;\n+\n@@ -52,2 +59,6 @@\n-            URL url = new URL(\"http:\/\/localhost:\" + address.getPort()\n-                              + \"\/test\/InfiniteLoop\");\n+            URL url = URIBuilder.newBuilder()\n+                      .scheme(\"http\")\n+                      .host(server.getAddress().getAddress())\n+                      .port(server.getAddress().getPort())\n+                      .path(\"\/test\/InfiniteLoop\")\n+                      .toURL();\n@@ -56,1 +67,2 @@\n-                HttpURLConnection uc = (HttpURLConnection)url.openConnection();\n+                HttpURLConnection uc = (HttpURLConnection)\n+                    url.openConnection(Proxy.NO_PROXY);\n","filename":"test\/jdk\/sun\/net\/www\/http\/KeepAliveStream\/InfiniteLoop.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,2 @@\n-            String urlString = \"http:\/\/\" + InetAddress.getLocalHost().getHostName() + \":\" + address.getPort() + \"\/test\/\";\n+            String urlString = \"http:\/\/\" + InetAddress.getLocalHost().getHostName()\n+                               + \":\" + address.getPort() + \"\/test\/\";\n@@ -66,1 +67,1 @@\n-            URL url = new URL(\"http:\/\/\" + InetAddress.getLocalHost().getHostName() + \":\" + address.getPort() + \"\/test\/\");\n+            URL url = new URL(urlString);\n@@ -98,1 +99,2 @@\n-        httpServer = com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0), 0);\n+        InetAddress localhost = InetAddress.getLocalHost();\n+        httpServer = HttpServer.create(new InetSocketAddress(localhost, 0), 0);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/B6369510.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+ * @library \/test\/lib\n+ * @run main BasicLongCredentials\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true BasicLongCredentials\n@@ -40,0 +43,1 @@\n+import java.net.InetAddress;\n@@ -42,0 +46,1 @@\n+import java.net.Proxy;\n@@ -45,0 +50,2 @@\n+import jdk.test.lib.net.URIBuilder;\n+\n@@ -54,1 +61,2 @@\n-        HttpServer server = HttpServer.create(new InetSocketAddress(0), 0);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        HttpServer server = HttpServer.create(new InetSocketAddress(loopback, 0), 0);\n@@ -69,2 +77,7 @@\n-            URL url = new URL(\"http:\/\/localhost:\"+server.getAddress().getPort()+\"\/test\/\");\n-            HttpURLConnection urlc = (HttpURLConnection)url.openConnection();\n+            URL url = URIBuilder.newBuilder()\n+                      .scheme(\"http\")\n+                      .host(server.getAddress().getAddress())\n+                      .port(server.getAddress().getPort())\n+                      .path(\"\/test\/\")\n+                      .toURL();\n+            HttpURLConnection urlc = (HttpURLConnection)url.openConnection(Proxy.NO_PROXY);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/BasicLongCredentials.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -35,0 +36,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -38,1 +40,1 @@\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws Exception {\n@@ -42,4 +44,1 @@\n-            \/\/ Test with direct connection.\n-            ServerSocket serverSS = new ServerSocket(0);\n-            startServer(serverSS, false);\n-            runClient(Proxy.NO_PROXY, serverSS.getLocalPort());\n+            InetAddress loopback = InetAddress.getLoopbackAddress();\n@@ -47,0 +46,4 @@\n+            \/\/ Test with direct connection.\n+            try (NTLMServer server = startServer(new ServerSocket(0, 0, loopback), false)) {\n+                runClient(Proxy.NO_PROXY, server.getLocalPort());\n+            }\n@@ -48,5 +51,5 @@\n-            serverSS = new ServerSocket(0);\n-            startServer(serverSS, true \/*proxy*\/);\n-            SocketAddress proxyAddr = new InetSocketAddress(\"localhost\", serverSS.getLocalPort());\n-            runClient(new Proxy(java.net.Proxy.Type.HTTP, proxyAddr), 8888);\n-\n+            try (NTLMServer server =\n+                    startServer(new ServerSocket(0, 0, loopback), true \/*proxy*\/)) {\n+                SocketAddress proxyAddr = new InetSocketAddress(loopback, server.getLocalPort());\n+                runClient(new Proxy(java.net.Proxy.Type.HTTP, proxyAddr), 8888);\n+            }\n@@ -54,1 +57,1 @@\n-            e.printStackTrace();\n+            throw e;\n@@ -60,2 +63,6 @@\n-            String urlStr = \"http:\/\/localhost:\" + serverPort + \"\/\";\n-            URL url = new URL(urlStr);\n+            URL url = URIBuilder.newBuilder()\n+                      .scheme(\"http\")\n+                      .loopback()\n+                      .port(serverPort)\n+                      .path(\"\/\")\n+                      .toURLUnchecked();\n@@ -63,1 +70,1 @@\n-            uc.getInputStream();\n+            uc.getInputStream().readAllBytes();\n@@ -73,0 +80,1 @@\n+            System.out.println(\"Got expected \" + ioe);\n@@ -96,22 +104,26 @@\n-    static void startServer(ServerSocket serverSS, boolean proxy) {\n-        final ServerSocket ss = serverSS;\n-        final boolean isProxy = proxy;\n-\n-        Thread thread = new Thread(new Runnable() {\n-            public void run() {\n-                boolean doing2ndStageNTLM = false;\n-                while (true) {\n-                    try {\n-                        Socket s = ss.accept();\n-                        if (!doing2ndStageNTLM) {\n-                            handleConnection(s, isProxy ? proxyResp : serverResp, 0, 1);\n-                            doing2ndStageNTLM = true;\n-                        } else {\n-                            handleConnection(s, isProxy ? proxyResp : serverResp, 1, 2);\n-                            doing2ndStageNTLM = false;\n-                        }\n-                        connectionCount++;\n-                        \/\/System.out.println(\"connectionCount = \" + connectionCount);\n-\n-                    } catch (IOException ioe) {\n-                        ioe.printStackTrace();\n+    static class NTLMServer extends Thread implements AutoCloseable {\n+        final ServerSocket ss;\n+        final boolean isProxy;\n+        volatile boolean closed;\n+\n+        NTLMServer(ServerSocket serverSS, boolean proxy) {\n+            super();\n+            setDaemon(true);\n+            ss = serverSS;\n+            isProxy = proxy;\n+        }\n+\n+       public int getLocalPort() { return ss.getLocalPort(); }\n+\n+        @Override\n+        public void run() {\n+            boolean doing2ndStageNTLM = false;\n+            while (!closed) {\n+                try {\n+                    Socket s = ss.accept();\n+                    if (!doing2ndStageNTLM) {\n+                        handleConnection(s, isProxy ? proxyResp : serverResp, 0, 1);\n+                        doing2ndStageNTLM = true;\n+                    } else {\n+                        handleConnection(s, isProxy ? proxyResp : serverResp, 1, 2);\n+                        doing2ndStageNTLM = false;\n@@ -119,0 +131,4 @@\n+                    connectionCount++;\n+                    \/\/System.out.println(\"connectionCount = \" + connectionCount);\n+                } catch (IOException ioe) {\n+                    if (!closed) ioe.printStackTrace();\n@@ -120,3 +136,13 @@\n-            } });\n-            thread.setDaemon(true);\n-            thread.start();\n+            }\n+        }\n+\n+        @Override\n+        public void close() {\n+           if (closed) return;\n+           synchronized(this) {\n+               if (closed) return;\n+               closed = true;\n+           }\n+           try { ss.close(); } catch (IOException x) { };\n+        }\n+    }\n@@ -124,0 +150,4 @@\n+    public static NTLMServer startServer(ServerSocket serverSS, boolean proxy) {\n+        NTLMServer server = new NTLMServer(serverSS, proxy);\n+        server.start();\n+        return server;\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/NTLMTest.java","additions":70,"deletions":40,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -30,0 +31,1 @@\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true HttpsPost\n@@ -38,0 +40,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -98,0 +101,1 @@\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n@@ -101,1 +105,1 @@\n-            (SSLServerSocket) sslssf.createServerSocket(serverPort);\n+            (SSLServerSocket) sslssf.createServerSocket(serverPort, 0, loopback);\n@@ -104,0 +108,3 @@\n+        System.out.println(\"Starting server at: \"\n+                            +  sslServerSocket.getInetAddress()\n+                            + \":\" + serverPort);\n@@ -158,1 +165,5 @@\n-            URL url = new URL(\"https:\/\/localhost:\"+serverPort);\n+            URL url = URIBuilder.newBuilder()\n+                      .scheme(\"https\")\n+                      .loopback()\n+                      .port(serverPort)\n+                      .toURL();\n@@ -160,0 +171,1 @@\n+            System.out.println(\"Client connecting to: \" + url);\n@@ -161,1 +173,1 @@\n-            HttpsURLConnection http = (HttpsURLConnection)url.openConnection();\n+            HttpsURLConnection http = (HttpsURLConnection)url.openConnection(Proxy.NO_PROXY);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/HttpsPost.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,1 @@\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.net.URIBuilder;\n@@ -42,6 +41,0 @@\n- * @build jdk.test.lib.Utils\n- *        jdk.test.lib.Asserts\n- *        jdk.test.lib.JDKToolFinder\n- *        jdk.test.lib.JDKToolLauncher\n- *        jdk.test.lib.Platform\n- *        jdk.test.lib.process.*\n@@ -65,0 +58,3 @@\n+    private static ProxyTunnelServer pserver;\n+    private static TestServer server;\n+    static final String RESPONSE_MSG = \"Https POST thru proxy is successful\";\n@@ -82,2 +78,1 @@\n-            return \"Https POST thru proxy is successful\".\n-                        getBytes();\n+            return RESPONSE_MSG.getBytes();\n@@ -91,0 +86,1 @@\n+\n@@ -100,0 +96,1 @@\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n@@ -106,1 +103,1 @@\n-            ServerSocket ss = ssf.createServerSocket(serverPort);\n+            ServerSocket ss = ssf.createServerSocket(serverPort, 0, loopback);\n@@ -109,1 +106,2 @@\n-            new TestServer(ss);\n+            server = new TestServer(ss);\n+            System.out.println(\"Server started at: \" + ss);\n@@ -123,0 +121,6 @@\n+        long connectCount = pserver.getConnectCount();\n+        if (connectCount == 0) {\n+            throw new AssertionError(\"Proxy was not used!\");\n+        } else {\n+            System.out.println(\"Proxy CONNECT count: \" + connectCount);\n+        }\n@@ -165,1 +169,5 @@\n-            URL url = new URL(\"https:\/\/\" + getHostname() +\":\" + serverPort);\n+            URL url = URIBuilder.newBuilder()\n+                      .scheme(\"https\")\n+                      .loopback()\n+                      .port(serverPort)\n+                      .toURL();\n@@ -168,0 +176,2 @@\n+            System.out.println(\"Client connecting to: \" + url);\n+            System.out.println(\"Through proxy: \" + pAddr);\n@@ -188,1 +198,2 @@\n-               while ((inputLine = in.readLine()) != null)\n+               boolean msgFound = false;\n+               while ((inputLine = in.readLine()) != null) {\n@@ -190,0 +201,2 @@\n+                    if (inputLine.contains(RESPONSE_MSG)) msgFound = true;\n+               }\n@@ -191,0 +204,3 @@\n+               if (!msgFound) {\n+                   throw new RuntimeException(\"POST message not found.\");\n+               }\n@@ -211,1 +227,2 @@\n-        ProxyTunnelServer pserver = new ProxyTunnelServer();\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        pserver = new ProxyTunnelServer(loopback);\n@@ -216,1 +233,1 @@\n-        return new InetSocketAddress(\"localhost\", pserver.getPort());\n+        return new InetSocketAddress(loopback, pserver.getPort());\n@@ -219,8 +236,0 @@\n-    private static String getHostname() {\n-        try {\n-            OutputAnalyzer oa = ProcessTools.executeCommand(\"hostname\");\n-            return oa.getOutput().trim();\n-        } catch (Throwable e) {\n-            throw new RuntimeException(\"Get hostname failed.\", e);\n-        }\n-    }\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/PostThruProxy.java","additions":34,"deletions":25,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -50,0 +51,2 @@\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true\n+                     -Djdk.http.auth.tunneling.disabledSchemes= PostThruProxyWithAuth\n@@ -65,0 +68,5 @@\n+    private static ProxyTunnelServer pserver;\n+    private static TestServer server;\n+\n+    static final String RESPONSE_MSG =\n+        \"Https POST thru proxy is successful with proxy authentication\";\n@@ -82,3 +90,1 @@\n-            return\n-                \"Https POST thru proxy is successful with proxy authentication\".\n-                getBytes();\n+            return RESPONSE_MSG.getBytes();\n@@ -106,0 +112,1 @@\n+            InetAddress localhost = InetAddress.getLocalHost();\n@@ -107,1 +114,1 @@\n-            ServerSocket ss = ssf.createServerSocket(serverPort);\n+            ServerSocket ss = ssf.createServerSocket(serverPort, 0, localhost);\n@@ -110,1 +117,2 @@\n-            new TestServer(ss);\n+            server = new TestServer(ss);\n+            System.out.println(\"Server started at: \" + ss);\n@@ -123,1 +131,7 @@\n-          }\n+        }\n+        long connectCount = pserver.getConnectCount();\n+        if (connectCount == 0) {\n+            throw new AssertionError(\"Proxy was not used!\");\n+        } else {\n+            System.out.println(\"Proxy CONNECT count: \" + connectCount);\n+        }\n@@ -163,1 +177,6 @@\n-        URL url = new URL(\"https:\/\/\" + getHostname() + \":\" + serverPort);\n+\n+        URL url = URIBuilder.newBuilder()\n+                      .scheme(\"https\")\n+                      .host(getHostname())\n+                      .port(serverPort)\n+                      .toURL();\n@@ -166,0 +185,2 @@\n+        System.out.println(\"Client connecting to: \" + url);\n+        System.out.println(\"Through proxy: \" + pAddr);\n@@ -185,2 +206,5 @@\n-           while ((inputLine = in.readLine()) != null)\n-                 System.out.println(\"Client received: \" + inputLine);\n+           boolean msgFound = false;\n+           while ((inputLine = in.readLine()) != null) {\n+                System.out.println(\"Client received: \" + inputLine);\n+                if (inputLine.contains(RESPONSE_MSG)) msgFound = true;\n+           }\n@@ -188,0 +212,3 @@\n+           if (!msgFound) {\n+               throw new RuntimeException(\"POST message not found.\");\n+           }\n@@ -205,1 +232,3 @@\n-        ProxyTunnelServer pserver = new ProxyTunnelServer();\n+\n+        InetAddress localhost = InetAddress.getLocalHost();\n+        pserver = new ProxyTunnelServer(localhost);\n@@ -219,1 +248,1 @@\n-        return new InetSocketAddress(\"localhost\", pserver.getPort());\n+        return new InetSocketAddress(localhost, pserver.getPort());\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/PostThruProxyWithAuth.java","additions":41,"deletions":12,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,0 +66,2 @@\n+    volatile long connectCount;\n+\n@@ -71,0 +73,10 @@\n+            System.out.println(\"Proxy server created: \" + ss);\n+        }\n+    }\n+\n+    public ProxyTunnelServer(InetAddress address) throws IOException {\n+        if (ss == null) {\n+            ss = (ServerSocket) ServerSocketFactory.getDefault()\n+                    .createServerSocket(0, 0, address);\n+            ss.setSoTimeout(TIMEOUT);\n+            System.out.println(\"Proxy server created: \" + ss);\n@@ -89,0 +101,1 @@\n+            System.out.println(\"Proxy server listening at: \" + ss);\n@@ -90,0 +103,1 @@\n+            System.out.println(\"Proxy server accepted connection: \" + clientSocket);\n@@ -104,1 +118,3 @@\n-          }\n+         } finally {\n+            System.out.println(\"Proxy server: request served\");\n+         }\n@@ -121,0 +137,1 @@\n+            synchronized(this) { connectCount++; }\n@@ -157,0 +174,4 @@\n+    public long getConnectCount() {\n+        return connectCount;\n+    }\n+\n@@ -276,2 +297,8 @@\n-            endi = connectInfo.indexOf(':');\n-            serverName = connectInfo.substring(0, endi);\n+            if (connectInfo.charAt(0) == '[') {\n+                 endi = connectInfo.indexOf(']');\n+                 serverName = connectInfo.substring(1, endi++);\n+                 assert connectInfo.charAt(endi) == ':' : \"Expected [IPv6]:port\";\n+            } else {\n+                 endi = connectInfo.indexOf(':');\n+                 serverName = connectInfo.substring(0, endi);\n+            }\n@@ -282,1 +309,1 @@\n-          }\n+        }\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/ProxyTunnelServer.java","additions":32,"deletions":5,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -28,0 +29,1 @@\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true RetryHttps\n@@ -38,0 +40,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -83,0 +86,1 @@\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n@@ -86,1 +90,1 @@\n-            (SSLServerSocket) sslssf.createServerSocket(serverPort);\n+            (SSLServerSocket) sslssf.createServerSocket(serverPort, 0, loopback);\n@@ -89,0 +93,4 @@\n+        System.out.println(\"Starting server at: \"\n+                            +  sslServerSocket.getInetAddress()\n+                            + \":\" + serverPort);\n+\n@@ -148,1 +156,6 @@\n-                URL url = new URL(\"https:\/\/localhost:\" + serverPort+\"\/file1\");\n+               URL url = URIBuilder.newBuilder()\n+                      .scheme(\"https\")\n+                      .loopback()\n+                      .port(serverPort)\n+                      .path(\"\/file1\")\n+                      .toURL();\n@@ -152,1 +165,1 @@\n-                http = (HttpsURLConnection)url.openConnection();\n+                http = (HttpsURLConnection)url.openConnection(Proxy.NO_PROXY);\n@@ -160,2 +173,7 @@\n-                url = new URL(\"https:\/\/localhost:\" + serverPort+\"\/file2\");\n-                http = (HttpsURLConnection)url.openConnection();\n+                url = URIBuilder.newBuilder()\n+                      .scheme(\"https\")\n+                      .loopback()\n+                      .port(serverPort)\n+                      .path(\"\/file2\")\n+                      .toURL();\n+                http = (HttpsURLConnection)url.openConnection(Proxy.NO_PROXY);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/RetryHttps.java","additions":24,"deletions":6,"binary":false,"changes":30,"status":"modified"}]}