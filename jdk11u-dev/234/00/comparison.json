{"files":[{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @requires (os.family == \"linux\")\n+ * @key headful\n+ * @bug 8218472\n+ * @summary Tests JProgressBar highlight color\n+ * @run main TestJProgressBarHighlightColor\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JProgressBar;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+\n+public class TestJProgressBarHighlightColor {\n+    private static JFrame frame;\n+    private static JProgressBar progressBar;\n+    private static Point point;\n+    private static Rectangle rect;\n+    private static Robot robot;\n+    private static final String GTK_LAF_CLASS = \"GTKLookAndFeel\";\n+    private static int minColorDifference = 100;\n+\n+    private static void blockTillDisplayed(Component comp) {\n+        Point p = null;\n+        while (p == null) {\n+            try {\n+                p = comp.getLocationOnScreen();\n+            } catch (IllegalStateException e) {\n+                try {\n+                    Thread.sleep(500);\n+                } catch (InterruptedException ie) {\n+                }\n+            }\n+        }\n+    }\n+\n+    private static int getMaxColorDiff(Color c1, Color c2) {\n+        return Math.max(Math.abs(c1.getRed() - c2.getRed()),\n+                Math.max(Math.abs(c1.getGreen() - c2.getGreen()),\n+                        Math.abs(c1.getBlue() - c2.getBlue())));\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!System.getProperty(\"os.name\").startsWith(\"Linux\")) {\n+            System.out.println(\"This test is meant for Linux platform only\");\n+            return;\n+        }\n+\n+        for (UIManager.LookAndFeelInfo lookAndFeelInfo :\n+                UIManager.getInstalledLookAndFeels()) {\n+            if (lookAndFeelInfo.getClassName().contains(GTK_LAF_CLASS)) {\n+                try {\n+                    UIManager.setLookAndFeel(lookAndFeelInfo.getClassName());\n+                } catch (final UnsupportedLookAndFeelException ignored) {\n+                    System.out.println(\"GTK L&F could not be set, so this \" +\n+                            \"test can not be run in this scenario \");\n+                    return;\n+                }\n+            }\n+        }\n+\n+        robot = new Robot();\n+        robot.setAutoDelay(100);\n+\n+        try {\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                public void run() {\n+                    JPanel panel = new JPanel();\n+                    progressBar = new JProgressBar();\n+                    progressBar.setValue(50);\n+                    panel.add(progressBar, BorderLayout.CENTER);\n+                    frame = new JFrame(\"TestSelectedTextBackgroundColor\");\n+                    frame.add(panel);\n+                    frame.setSize(200, 200);\n+                    frame.setAlwaysOnTop(true);\n+                    frame.setLocationRelativeTo(null);\n+                    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+                    frame.setVisible(true);\n+                }\n+            });\n+\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            blockTillDisplayed(progressBar);\n+            SwingUtilities.invokeAndWait(() -> {\n+                point = progressBar.getLocationOnScreen();\n+                rect = progressBar.getBounds();\n+            });\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            Color backgroundColor = robot\n+                    .getPixelColor(point.x+rect.width*3\/4, point.y+rect.height\/2);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            Color highlightColor = robot\n+                    .getPixelColor(point.x+rect.width\/4, point.y+rect.height\/2);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            int actualColorDifference = getMaxColorDiff(backgroundColor, highlightColor);\n+            if (actualColorDifference < minColorDifference) {\n+                throw new RuntimeException(\"The expected highlight color for \" +\n+                        \"JProgressBar was not found\");\n+            }\n+        } finally {\n+            if (frame != null) {\n+                SwingUtilities.invokeAndWait(frame::dispose);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JProgressBar\/TestJProgressBarHighlightColor.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"}]}