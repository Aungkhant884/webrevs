{"files":[{"patch":"@@ -35,1 +35,5 @@\n-import java.nio.file.*;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n@@ -37,1 +41,4 @@\n-import java.util.*;\n+import java.util.Formatter;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n@@ -62,0 +69,1 @@\n+        \/\/ generate key for signing\n@@ -73,0 +81,1 @@\n+        \/\/ sign zip file - expect warning\n@@ -82,2 +91,3 @@\n-        \/\/ sign jar file - no posix warning message expected\n-        SecurityTools.jarsigner(\"-keystore\", \"examplekeystore\",\n+        \/\/ sign jar file - expect no warning\n+        SecurityTools.jarsigner(\n+                \"-keystore\", \"examplekeystore\",\n@@ -91,1 +101,3 @@\n-        SecurityTools.jarsigner(\"-keystore\", \"examplekeystore\",\n+        \/\/ verify zip file - expect warning\n+        SecurityTools.jarsigner(\n+                \"-keystore\", \"examplekeystore\",\n@@ -99,2 +111,3 @@\n-        \/\/ no warning expected for regular jar file\n-        SecurityTools.jarsigner(\"-keystore\", \"examplekeystore\",\n+        \/\/ verify jar file - expect no warning\n+        SecurityTools.jarsigner(\n+                \"-keystore\", \"examplekeystore\",\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/PosixPermissionsTest.java","additions":20,"deletions":7,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -34,3 +34,4 @@\n-import java.io.*;\n-import java.net.URI;\n-import java.nio.file.*;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -42,0 +43,1 @@\n+    private final static int BYTES_PER_ROW = 8;\n@@ -48,3 +50,5 @@\n-        Files.deleteIfExists(Paths.get(ZIPFILENAME));\n-        try (FileOutputStream fos = new FileOutputStream(ZIPFILENAME)) {\n-            fos.write(ZIPBYTES);\n+        \/\/ call main with an argument to print the prepared zipfile as byte array declaration\n+        if (args.length > 0) {\n+            System.out.println(\"Bytes of \" + ZIPFILENAME + \":\");\n+            System.out.println(createByteArray(Files.readAllBytes(Path.of(ZIPFILENAME)), \"ZIPBYTES\"));\n+            System.exit(0);\n@@ -53,1 +57,3 @@\n-        \/\/ check permissions before signing\n+        Files.write(Path.of(ZIPFILENAME), ZIPBYTES);\n+\n+        \/\/ check attributes before signing\n@@ -56,0 +62,1 @@\n+        \/\/ generate key for signing\n@@ -67,0 +74,1 @@\n+        \/\/ sign zip file - expect warning\n@@ -76,1 +84,1 @@\n-        \/\/ zip file now signed. Recheck attributes\n+        \/\/ recheck attributes after signing\n@@ -79,1 +87,3 @@\n-        SecurityTools.jarsigner(\"-keystore\", \"examplekeystore\",\n+        \/\/ verify zip file - expect warning\n+        SecurityTools.jarsigner(\n+                \"-keystore\", \"examplekeystore\",\n@@ -117,8 +127,15 @@\n-    public static String createByteArray(byte[] bytes, String name) {\n-        StringBuilder sb = new StringBuilder(bytes.length * 5);\n-        Formatter fmt = new Formatter(sb);\n-        fmt.format(\"    public static byte[] %s = {\", name);\n-        final int linelen = 8;\n-        for (int i = 0; i < bytes.length; i++) {\n-            if (i % linelen == 0) {\n-                fmt.format(\"%n        \");\n+    private static String createByteArray(byte[] bytes, String name) {\n+        StringBuilder sb = new StringBuilder();\n+        try (Formatter fmt = new Formatter(sb)) {\n+            fmt.format(\"    public final static byte[] %s = {\", name);\n+            for (int i = 0; i < bytes.length; i++) {\n+                int mod = i % BYTES_PER_ROW;\n+                if (mod == 0) {\n+                    fmt.format(\"%n        \");\n+                } else {\n+                    fmt.format(\" \");\n+                }\n+                fmt.format(\"(byte)0x%02x\", bytes[i]);\n+                if (i != bytes.length - 1) {\n+                    fmt.format(\",\");\n+                }\n@@ -126,1 +143,1 @@\n-            fmt.format(\" (byte) 0x%x,\", bytes[i] & 0xff);\n+            fmt.format(\"%n    };%n\");\n@@ -128,1 +145,0 @@\n-        fmt.format(\"%n    };%n\");\n@@ -133,2 +149,2 @@\n-     * Created using the createByteArray utility method.\n-     * The zipfile itself was created via this example:\n+     * The zipfile itself was created like this:\n+     * $ ln -s ..\/z z\n@@ -137,1 +153,4 @@\n-     * $ zip -ry test.zip z\n+     * $ zip -ry 8250968-test.zip z\n+     *\n+     * The byte array representation was generated using the createByteArray utility method:\n+     * $ java SymLinkTest generate\n@@ -140,20 +159,20 @@\n-            (byte) 0x50, (byte) 0x4b, (byte) 0x3, (byte) 0x4, (byte) 0xa, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n-            (byte) 0x0, (byte) 0x0, (byte) 0x2e, (byte) 0x94, (byte) 0x1b, (byte) 0x51, (byte) 0xb4, (byte) 0xcc,\n-            (byte) 0xb6, (byte) 0xf1, (byte) 0x4, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x4, (byte) 0x0,\n-            (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x1c, (byte) 0x0, (byte) 0x7a, (byte) 0x55,\n-            (byte) 0x54, (byte) 0x9, (byte) 0x0, (byte) 0x3, (byte) 0x77, (byte) 0xfc, (byte) 0x47, (byte) 0x5f,\n-            (byte) 0x78, (byte) 0xfc, (byte) 0x47, (byte) 0x5f, (byte) 0x75, (byte) 0x78, (byte) 0xb, (byte) 0x0,\n-            (byte) 0x1, (byte) 0x4, (byte) 0xec, (byte) 0x3, (byte) 0x0, (byte) 0x0, (byte) 0x4, (byte) 0xec,\n-            (byte) 0x3, (byte) 0x0, (byte) 0x0, (byte) 0x2e, (byte) 0x2e, (byte) 0x2f, (byte) 0x7a, (byte) 0x50,\n-            (byte) 0x4b, (byte) 0x1, (byte) 0x2, (byte) 0x1e, (byte) 0x3, (byte) 0xa, (byte) 0x0, (byte) 0x0,\n-            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x2e, (byte) 0x94, (byte) 0x1b, (byte) 0x51, (byte) 0xb4,\n-            (byte) 0xcc, (byte) 0xb6, (byte) 0xf1, (byte) 0x4, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x4,\n-            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x18, (byte) 0x0, (byte) 0x0,\n-            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0xff,\n-            (byte) 0xa1, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x7a, (byte) 0x55, (byte) 0x54,\n-            (byte) 0x5, (byte) 0x0, (byte) 0x3, (byte) 0x77, (byte) 0xfc, (byte) 0x47, (byte) 0x5f, (byte) 0x75,\n-            (byte) 0x78, (byte) 0xb, (byte) 0x0, (byte) 0x1, (byte) 0x4, (byte) 0xec, (byte) 0x3, (byte) 0x0,\n-            (byte) 0x0, (byte) 0x4, (byte) 0xec, (byte) 0x3, (byte) 0x0, (byte) 0x0, (byte) 0x50, (byte) 0x4b,\n-            (byte) 0x5, (byte) 0x6, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x0,\n-            (byte) 0x1, (byte) 0x0, (byte) 0x47, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x3f, (byte) 0x0,\n-            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+        (byte)0x50, (byte)0x4b, (byte)0x03, (byte)0x04, (byte)0x0a, (byte)0x00, (byte)0x00, (byte)0x00,\n+        (byte)0x00, (byte)0x00, (byte)0x2e, (byte)0x94, (byte)0x1b, (byte)0x51, (byte)0xb4, (byte)0xcc,\n+        (byte)0xb6, (byte)0xf1, (byte)0x04, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04, (byte)0x00,\n+        (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x00, (byte)0x1c, (byte)0x00, (byte)0x7a, (byte)0x55,\n+        (byte)0x54, (byte)0x09, (byte)0x00, (byte)0x03, (byte)0x77, (byte)0xfc, (byte)0x47, (byte)0x5f,\n+        (byte)0x78, (byte)0xfc, (byte)0x47, (byte)0x5f, (byte)0x75, (byte)0x78, (byte)0x0b, (byte)0x00,\n+        (byte)0x01, (byte)0x04, (byte)0xec, (byte)0x03, (byte)0x00, (byte)0x00, (byte)0x04, (byte)0xec,\n+        (byte)0x03, (byte)0x00, (byte)0x00, (byte)0x2e, (byte)0x2e, (byte)0x2f, (byte)0x7a, (byte)0x50,\n+        (byte)0x4b, (byte)0x01, (byte)0x02, (byte)0x1e, (byte)0x03, (byte)0x0a, (byte)0x00, (byte)0x00,\n+        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x2e, (byte)0x94, (byte)0x1b, (byte)0x51, (byte)0xb4,\n+        (byte)0xcc, (byte)0xb6, (byte)0xf1, (byte)0x04, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04,\n+        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x00, (byte)0x18, (byte)0x00, (byte)0x00,\n+        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xff,\n+        (byte)0xa1, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x7a, (byte)0x55, (byte)0x54,\n+        (byte)0x05, (byte)0x00, (byte)0x03, (byte)0x77, (byte)0xfc, (byte)0x47, (byte)0x5f, (byte)0x75,\n+        (byte)0x78, (byte)0x0b, (byte)0x00, (byte)0x01, (byte)0x04, (byte)0xec, (byte)0x03, (byte)0x00,\n+        (byte)0x00, (byte)0x04, (byte)0xec, (byte)0x03, (byte)0x00, (byte)0x00, (byte)0x50, (byte)0x4b,\n+        (byte)0x05, (byte)0x06, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x00,\n+        (byte)0x01, (byte)0x00, (byte)0x47, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x3f, (byte)0x00,\n+        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/SymLinkTest.java","additions":61,"deletions":42,"binary":false,"changes":103,"status":"modified"}]}