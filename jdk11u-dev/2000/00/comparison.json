{"files":[{"patch":"@@ -95,1 +95,1 @@\n-            pb = ProcessTools.createJavaProcessBuilder(true, \"-cp\", \".\",\n+            pb = ProcessTools.createTestJvm(\"-cp\", \".\",\n","filename":"test\/hotspot\/jtreg\/compiler\/aot\/verification\/ClassAndLibraryNotMatchTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-            pb = ProcessTools.createJavaProcessBuilder(true, \"-XX:+UnlockExperimentalVMOptions\",\n+            pb = ProcessTools.createTestJvm(\"-XX:+UnlockExperimentalVMOptions\",\n","filename":"test\/hotspot\/jtreg\/compiler\/aot\/verification\/vmflags\/BasicFlagsChange.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-                crashOut = ProcessTools.executeProcess(getTestJavaCommandlineWithPrefix(\n+                crashOut = ProcessTools.executeProcess(getTestJvmCommandlineWithPrefix(\n@@ -143,2 +143,1 @@\n-                crashOut = ProcessTools.executeProcess(ProcessTools.createJavaProcessBuilder(true,\n-                        options));\n+                crashOut = ProcessTools.executeProcess(ProcessTools.createTestJvm(options));\n@@ -188,1 +187,1 @@\n-            OutputAnalyzer oa = ProcessTools.executeProcess(getTestJavaCommandlineWithPrefix(\n+            OutputAnalyzer oa = ProcessTools.executeProcess(getTestJvmCommandlineWithPrefix(\n@@ -288,1 +287,1 @@\n-    private String[] getTestJavaCommandlineWithPrefix(String prefix, String... args) {\n+    private String[] getTestJvmCommandlineWithPrefix(String prefix, String... args) {\n@@ -290,1 +289,1 @@\n-            String cmd = ProcessTools.getCommandLine(ProcessTools.createJavaProcessBuilder(true, args));\n+            String cmd = ProcessTools.getCommandLine(ProcessTools.createTestJvm(args));\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/CiReplayBase.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-            pb = ProcessTools.createJavaProcessBuilder(true, \"--add-modules\", \"jdk.hotspot.agent\",\n+            pb = ProcessTools.createTestJvm(\"--add-modules\", \"jdk.hotspot.agent\",\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/SABase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(false,\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n@@ -266,2 +266,1 @@\n-        ProcessBuilder javaPB = ProcessTools.createJavaProcessBuilder(true,\n-                javaFlags);\n+        ProcessBuilder javaPB = ProcessTools.createTestJvm(javaFlags);\n","filename":"test\/hotspot\/jtreg\/compiler\/graalunit\/common\/GraalUnitTestLauncher.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-            oa = ProcessTools.executeProcess(ProcessTools.createJavaProcessBuilder(\n-                    \/* add test vm options *\/ true, Test8015436.class.getName()));\n+            oa = ProcessTools.executeProcess(ProcessTools.createTestJvm(\n+                    Test8015436.class.getName()));\n","filename":"test\/hotspot\/jtreg\/compiler\/runtime\/cr8015436\/Driver8015436.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-        ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(\/* addTestVmOptions= *\/ true, OPTIONS);\n+        ProcessBuilder processBuilder = ProcessTools.createTestJvm(OPTIONS);\n","filename":"test\/hotspot\/jtreg\/compiler\/types\/correctness\/OffTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,2 +43,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-        true,\n+    ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocateHeapAt.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,2 +49,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-        true,\n+    ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocateHeapAtError.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-      ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, flags);\n+      ProcessBuilder pb = ProcessTools.createTestJvm(flags);\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocateHeapAtMultiple.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,2 +41,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-        true,\n+    ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/gc\/TestVerifyDuringStartup.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-        return createJavaProcessBuilder(false, arguments);\n+        return createJavaProcessBuilder(arguments.toArray(String[]::new));\n@@ -73,4 +73,2 @@\n-    static public ProcessBuilder createJavaProcessBuilder(boolean addTestVmAndJavaOptions,\n-                                                          List<String> arguments) {\n-        return createJavaProcessBuilder(addTestVmAndJavaOptions,\n-                                        arguments.toArray(String[]::new));\n+    static public ProcessBuilder createJavaProcessBuilder(String... arguments) {\n+        return ProcessTools.createJavaProcessBuilder(withDefaults(arguments));\n@@ -79,2 +77,2 @@\n-    static public ProcessBuilder createJavaProcessBuilder(String... arguments) {\n-        return createJavaProcessBuilder(false, arguments);\n+    static public ProcessBuilder createTestJvm(List<String> arguments) {\n+        return createTestJvm(arguments.toArray(String[]::new));\n@@ -83,4 +81,2 @@\n-    static public ProcessBuilder createJavaProcessBuilder(boolean addTestVmAndJavaOptions,\n-                                                          String... arguments) {\n-        return ProcessTools.createJavaProcessBuilder(addTestVmAndJavaOptions,\n-                                                     withDefaults(arguments));\n+    static public ProcessBuilder createTestJvm(String... arguments) {\n+        return ProcessTools.createTestJvm(withDefaults(arguments));\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/GCArguments.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -44,2 +44,1 @@\n-        ProcessBuilder pb = GCArguments.createJavaProcessBuilder(\n-            true,\n+        ProcessBuilder pb = GCArguments.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestUseNUMAInterleaving.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, opts);\n+        ProcessBuilder pb = ProcessTools.createTestJvm(opts);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestShrinkAuxiliaryData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -98,2 +98,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(false,\n-                testOpts);\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(testOpts);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/mixedgc\/TestLogging.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,2 +46,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-                true,\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/gc\/whitebox\/TestWBGC.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, \"-cp\", \".\",  classTestCName);\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\"-cp\", \".\",  classTestCName);\n","filename":"test\/hotspot\/jtreg\/runtime\/BootstrapMethod\/BSMCalledTwice.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, \"-cp\", \".\",  \"ClassFile\");\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\"-cp\", \".\",  \"ClassFile\");\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassFile\/UnsupportedClassFileVersion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true,\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n@@ -51,1 +51,1 @@\n-        pb = ProcessTools.createJavaProcessBuilder(true,\n+        pb = ProcessTools.createTestJvm(\n@@ -57,1 +57,1 @@\n-        pb = ProcessTools.createJavaProcessBuilder(true,\n+        pb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/runtime\/SharedArchiveFile\/SharedArchiveFile.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, \"-cp\", \".\",  \"Large\");\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\"-cp\", \".\",  \"Large\");\n","filename":"test\/hotspot\/jtreg\/runtime\/StackTrace\/LargeClassTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,2 +47,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-                true,\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/runtime\/Unsafe\/RangeCheck.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -79,2 +79,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-            true,\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/DumpClassList.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true,\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n@@ -117,1 +117,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true,\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/GraalWithLimitedMetaspace.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, cmd);\n+        ProcessBuilder pb = ProcessTools.createTestJvm(cmd);\n@@ -200,1 +200,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, cmd);\n+        ProcessBuilder pb = ProcessTools.createTestJvm(cmd);\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/TestCommon.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        ProcessBuilder dumpPb = ProcessTools.createJavaProcessBuilder(true,\n+        ProcessBuilder dumpPb = ProcessTools.createTestJvm(\n@@ -61,1 +61,1 @@\n-        ProcessBuilder runPb = ProcessTools.createJavaProcessBuilder(true,\n+        ProcessBuilder runPb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/sharedStrings\/SharedStringsBasic.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        ProcessBuilder dumpPb = ProcessTools.createJavaProcessBuilder(true,\n+        ProcessBuilder dumpPb = ProcessTools.createTestJvm(\n@@ -54,1 +54,1 @@\n-        ProcessBuilder runPb = ProcessTools.createJavaProcessBuilder(true,\n+        ProcessBuilder runPb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/sharedStrings\/SysDictCrash.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,2 +56,1 @@\n-            ProcessTools.createJavaProcessBuilder(\n-                    true,\n+            ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/runtime\/handshake\/HandshakeTransitionTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -66,2 +66,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-            true,\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n@@ -101,2 +100,1 @@\n-        pb = ProcessTools.createJavaProcessBuilder(\n-            true,\n+        pb = ProcessTools.createTestJvm(\n@@ -134,2 +132,1 @@\n-        pb = ProcessTools.createJavaProcessBuilder(\n-            true,\n+        pb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/PatchModule\/PatchModuleClassList.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -71,2 +71,1 @@\n-                    ProcessTools.createJavaProcessBuilder(false,\n-                                                          \"-Xlog:os=trace\",\n+                    ProcessTools.createJavaProcessBuilder(\"-Xlog:os=trace\",\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/AvailableProcessors.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -44,2 +44,1 @@\n-            ProcessTools.createJavaProcessBuilder(false,\n-                                                  \"-Xlog:os=trace\",\n+            ProcessTools.createJavaProcessBuilder(\"-Xlog:os=trace\",\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestUseCpuAllocPath.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, \"-cp\", \".\",  \"Overrider\");\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\"-cp\", \".\",  \"Overrider\");\n","filename":"test\/hotspot\/jtreg\/runtime\/verifier\/OverriderMsg.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, \"-verify\", \"-cp\", \".\",  classCName);\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\"-verify\", \"-cp\", \".\",  classCName);\n@@ -81,1 +81,1 @@\n-        pb = ProcessTools.createJavaProcessBuilder(true, \"-verify\", \"-cp\", \".\",  classCName);\n+        pb = ProcessTools.createTestJvm(\"-verify\", \"-cp\", \".\",  classCName);\n@@ -98,1 +98,1 @@\n-        pb = ProcessTools.createJavaProcessBuilder(true, \"-verify\", \"-cp\", \".\",  classCName);\n+        pb = ProcessTools.createTestJvm(\"-verify\", \"-cp\", \".\",  classCName);\n","filename":"test\/hotspot\/jtreg\/runtime\/verifier\/TestANewArray.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, \"-cp\", \".\",  \"ClassFile\");\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\"-cp\", \".\",  \"ClassFile\");\n","filename":"test\/hotspot\/jtreg\/runtime\/verifier\/TestMultiANewArray.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        ProcessBuilder pt = ProcessTools.createJavaProcessBuilder(true, \"-javaagent:agent.jar\",  \"GetObjectSizeClassAgent\");\n+        ProcessBuilder pt = ProcessTools.createTestJvm(\"-javaagent:agent.jar\",  \"GetObjectSizeClassAgent\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/GetObjectSizeClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        ProcessBuilder pt = ProcessTools.createJavaProcessBuilder(true, \"-Xmx4000m\", \"-javaagent:agent.jar\",  \"GetObjectSizeOverflowAgent\");\n+        ProcessBuilder pt = ProcessTools.createTestJvm(\"-Xmx4000m\", \"-javaagent:agent.jar\",  \"GetObjectSizeOverflowAgent\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/GetObjectSizeOverflow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,2 +75,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-                true,\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/serviceability\/logging\/TestLogRotation.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-                   ProcessTools.executeProcess(getTestJavaCommandlineWithPrefix(\n+                   ProcessTools.executeProcess(getTestJvmCommandlineWithPrefix(\n@@ -261,1 +261,1 @@\n-    private static String[] getTestJavaCommandlineWithPrefix(String prefix, String... args) {\n+    private static String[] getTestJvmCommandlineWithPrefix(String prefix, String... args) {\n@@ -263,1 +263,1 @@\n-            String cmd = ProcessTools.getCommandLine(ProcessTools.createJavaProcessBuilder(true, args));\n+            String cmd = ProcessTools.getCommandLine(ProcessTools.createTestJvm(args));\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbCDSCore.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, \"-XX:+CreateCoredumpOnCrash\",\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\"-XX:+CreateCoredumpOnCrash\",\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestJmapCore.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -177,3 +177,1 @@\n-                ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-                        \/* addTestVmAndJavaOptions = *\/ true,\n-                        cmd);\n+                ProcessBuilder pb = ProcessTools.createTestJvm(cmd);\n","filename":"test\/hotspot\/jtreg\/testlibrary\/ctw\/src\/sun\/hotspot\/tools\/ctw\/CtwRunner.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, args);\n+            ProcessBuilder pb = ProcessTools.createTestJvm(args);\n","filename":"test\/hotspot\/jtreg\/testlibrary\/jittester\/src\/jdk\/test\/lib\/jittester\/jtreg\/JitTesterDriver.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, cmd);\n+        ProcessBuilder pb = ProcessTools.createTestJvm(cmd);\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ctw\/CtwTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-        var pb = ProcessTools.createJavaProcessBuilder(true, cmd);\n+        var pb = ProcessTools.createTestJvm(cmd);\n@@ -110,1 +110,1 @@\n-        var pb = ProcessTools.createJavaProcessBuilder(true, cmd);\n+        var pb = ProcessTools.createTestJvm(cmd);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/huge\/quicklook\/largeheap\/MemOptions\/MemOptionsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-            var pb = ProcessTools.createJavaProcessBuilder(true,\n+            var pb = ProcessTools.createTestJvm(\n@@ -67,1 +67,1 @@\n-            var pb = ProcessTools.createJavaProcessBuilder(true,\n+            var pb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/jit\/tiered\/Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,2 +42,2 @@\n-            ProcessTools.createJavaProcessBuilder(true, \"-XX:MaxMetaspaceSize=100m\",\n-                                                  maxMetaspaceSize.class.getName());\n+            ProcessTools.createTestJvm(\"-XX:MaxMetaspaceSize=100m\",\n+                                       maxMetaspaceSize.class.getName());\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/flags\/maxMetaspaceSize\/TestMaxMetaspaceSize.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,2 +72,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-                true,\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/RetransformClasses\/retransform003\/TestDriver.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -61,2 +61,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-                true,\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/SetNativeMethodPrefix\/SetNativeMethodPrefix002\/TestDriver.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-            var pb = ProcessTools.createJavaProcessBuilder(true,\n+            var pb = ProcessTools.createTestJvm(\n@@ -66,1 +66,1 @@\n-            var pb = ProcessTools.createJavaProcessBuilder(true,\n+            var pb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/compiler\/CodeCacheInfo\/Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        var pb = ProcessTools.createJavaProcessBuilder(true,\n+        var pb = ProcessTools.createTestJvm(\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/compiler\/CodeCacheInfoOnCompilation\/Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true);\n+        ProcessBuilder pb = ProcessTools.createTestJvm();\n","filename":"test\/jdk\/com\/sun\/jdi\/JITDebug.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true,\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/jdk\/com\/sun\/jdi\/PrivateTransportTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        pb = ProcessTools.createJavaProcessBuilder(true, testArgs);\n+        pb = ProcessTools.createTestJvm(testArgs);\n","filename":"test\/jdk\/com\/sun\/jdi\/cds\/CDSJDITest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,0 @@\n-        private boolean addTestVmAndJavaOptions = true;\n@@ -99,5 +98,0 @@\n-        \/\/ default is \"true\"\n-        public Launcher addTestVmAndJavaOptions(boolean value) {\n-            addTestVmAndJavaOptions = value;\n-            return this;\n-        }\n@@ -112,2 +106,1 @@\n-            return ProcessTools.createJavaProcessBuilder(addTestVmAndJavaOptions,\n-                    debuggeeArgs.toArray(new String[0]));\n+            return ProcessTools.createTestJvm(debuggeeArgs);\n","filename":"test\/jdk\/com\/sun\/jdi\/lib\/jdb\/Debuggee.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-                ProcessTools.createJavaProcessBuilder(true, MacPathTest.class.getName());\n+                ProcessTools.createTestJvm(MacPathTest.class.getName());\n","filename":"test\/jdk\/java\/io\/File\/MacPath.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true,\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n@@ -96,1 +96,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true,\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/jdk\/java\/io\/Serializable\/evolution\/RenamePackage\/RenamePackageTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-            ProcessBuilder pb = createJavaProcessBuilder(true, \"ShutdownInterruptedMain\");\n+            ProcessBuilder pb = createTestJvm(\"ShutdownInterruptedMain\");\n","filename":"test\/jdk\/java\/lang\/Runtime\/shutdown\/ShutdownInterruptedMain.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, \"CallerFromMain\");\n+            ProcessBuilder pb = ProcessTools.createTestJvm(\"CallerFromMain\");\n","filename":"test\/jdk\/java\/lang\/StackWalker\/CallerFromMain.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true,\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/jdk\/java\/lang\/System\/MacEncoding\/MacJNUEncoding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, \"-javaagent:DummyAgent.jar\", \"TestDaemonThread\", \".\");\n+            ProcessBuilder pb = ProcessTools.createTestJvm(\"-javaagent:DummyAgent.jar\", \"TestDaemonThread\", \".\");\n","filename":"test\/jdk\/java\/lang\/instrument\/DaemonThread\/TestDaemonThreadLauncher.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-            = ProcessTools.createJavaProcessBuilder(true, Default.class.getName());\n+            = ProcessTools.createTestJvm(Default.class.getName());\n","filename":"test\/jdk\/java\/nio\/charset\/Charset\/DefaultCharsetTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, cmd);\n+        ProcessBuilder pb = ProcessTools.createTestJvm(cmd);\n","filename":"test\/jdk\/java\/nio\/charset\/coders\/SJISMappingPropTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, MacPath.class.getName());\n+        ProcessBuilder pb = ProcessTools.createTestJvm(MacPath.class.getName());\n","filename":"test\/jdk\/java\/nio\/file\/Path\/MacPathTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, \"-Djava.library.path=\" + lib, \"jdk.jfr.event.sampling.TestNative$Test\");\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\"-Djava.library.path=\" + lib, \"jdk.jfr.event.sampling.TestNative$Test\");\n","filename":"test\/jdk\/jdk\/jfr\/event\/sampling\/TestNative.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-        Process p = ProcessTools.createJavaProcessBuilder(true,\n+        Process p = ProcessTools.createTestJvm(\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestDumpOnCrash.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-            output = ProcessTools.executeProcess(ProcessTools.createJavaProcessBuilder(false,\n+            output = ProcessTools.executeProcess(ProcessTools.createJavaProcessBuilder(\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestJfrJavaBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, args);\n+        ProcessBuilder pb = ProcessTools.createTestJvm(args);\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestDumpOnExit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -488,7 +488,6 @@\n-                pb = ProcessTools.createJavaProcessBuilder(true,\n-                                                           \"--add-exports=jdk.jfr\/jdk.jfr.internal=ALL-UNNAMED\",\n-                                                           \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\",\n-                                                           flightRecorderOptions,\n-                                                           \"-XX:StartFlightRecording\",\n-                                                           SUT.class.getName(),\n-                                                           tc.getTestName());\n+                pb = ProcessTools.createTestJvm(\"--add-exports=jdk.jfr\/jdk.jfr.internal=ALL-UNNAMED\",\n+                                                \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\",\n+                                                flightRecorderOptions,\n+                                                \"-XX:StartFlightRecording\",\n+                                                SUT.class.getName(),\n+                                                tc.getTestName());\n@@ -497,6 +496,5 @@\n-                pb = ProcessTools.createJavaProcessBuilder(true,\n-                                                           \"--add-exports=jdk.jfr\/jdk.jfr.internal=ALL-UNNAMED\",\n-                                                           \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\",\n-                                                           \"-XX:StartFlightRecording\",\n-                                                           SUT.class.getName(),\n-                                                           tc.getTestName());\n+                pb = ProcessTools.createTestJvm(\"--add-exports=jdk.jfr\/jdk.jfr.internal=ALL-UNNAMED\",\n+                                                \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\",\n+                                                \"-XX:StartFlightRecording\",\n+                                                SUT.class.getName(),\n+                                                tc.getTestName());\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestMemoryOptions.java","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, recording1, MainClass.class.getName());\n+        ProcessBuilder pb = ProcessTools.createTestJvm(recording1, MainClass.class.getName());\n@@ -67,1 +67,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, recording1, recording2, MainClass.class.getName());\n+        ProcessBuilder pb = ProcessTools.createTestJvm(recording1, recording2, MainClass.class.getName());\n@@ -75,1 +75,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, recording1, recording2, recording3, MainClass.class.getName());\n+        ProcessBuilder pb = ProcessTools.createTestJvm(recording1, recording2, recording3, MainClass.class.getName());\n@@ -99,1 +99,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, flightRecorderOptions, recording1, recording2, MainClass.class.getName());\n+        ProcessBuilder pb = ProcessTools.createTestJvm(flightRecorderOptions, recording1, recording2, MainClass.class.getName());\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestMultipleStartupRecordings.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, args.toArray(new String[0]));\n+        ProcessBuilder pb = ProcessTools.createTestJvm(args);\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestRetransformUsingLog.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true,\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n@@ -68,1 +68,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true,\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestStartDuration.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true,\n+        ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestStartName.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true,\n+            ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLEngineImpl\/SSLEngineKeyLimit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true,\n+            ProcessBuilder pb = ProcessTools.createTestJvm(\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/SSLSocketKeyLimit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, cmdLine);\n+        ProcessBuilder pb = ProcessTools.createTestJvm(cmdLine);\n@@ -412,1 +412,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, cmdLine);\n+        ProcessBuilder pb = ProcessTools.createTestJvm(cmdLine);\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSTestUtils.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, arguments.toArray(new String[0]));\n+        ProcessBuilder pb = ProcessTools.createTestJvm(arguments);\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/AppExecutorHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -280,13 +280,1 @@\n-        return createJavaProcessBuilder(false, command);\n-    }\n-\n-    \/**\n-     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n-     * <p>\n-     * @param addTestVmAndJavaOptions If true, adds test.vm.opts and test.java.opts\n-     *        to the java arguments.\n-     * @param command Arguments to pass to the java command.\n-     * @return The ProcessBuilder instance representing the java command.\n-     *\/\n-    public static ProcessBuilder createJavaProcessBuilder(boolean addTestVmAndJavaOptions, List<String> command) {\n-        return createJavaProcessBuilder(addTestVmAndJavaOptions, command.toArray(String[]::new));\n+        return createJavaProcessBuilder(command.toArray(String[]::new));\n@@ -302,12 +290,0 @@\n-        return createJavaProcessBuilder(false, command);\n-    }\n-\n-    \/**\n-     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n-     *\n-     * @param addTestVmAndJavaOptions If true, adds test.vm.opts and test.java.opts\n-     *        to the java arguments.\n-     * @param command Arguments to pass to the java command.\n-     * @return The ProcessBuilder instance representing the java command.\n-     *\/\n-    public static ProcessBuilder createJavaProcessBuilder(boolean addTestVmAndJavaOptions, String... command) {\n@@ -322,4 +298,0 @@\n-        if (addTestVmAndJavaOptions) {\n-            Collections.addAll(args, Utils.getTestJavaOpts());\n-        }\n-\n@@ -347,0 +319,30 @@\n+    \/**\n+     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n+     * The default jvm options from jtreg, test.vm.opts and test.java.opts, are added.\n+     *\n+     * The command line will be like:\n+     * {test.jdk}\/bin\/java {test.vm.opts} {test.java.opts} cmds\n+     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n+     *\n+     * @param command Arguments to pass to the java command.\n+     * @return The ProcessBuilder instance representing the java command.\n+     *\/\n+    public static ProcessBuilder createTestJvm(List<String> command) {\n+        return createTestJvm(command.toArray(String[]::new));\n+    }\n+\n+    \/**\n+     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n+     * The default jvm options from jtreg, test.vm.opts and test.java.opts, are added.\n+     *\n+     * The command line will be like:\n+     * {test.jdk}\/bin\/java {test.vm.opts} {test.java.opts} cmds\n+     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n+     *\n+     * @param command Arguments to pass to the java command.\n+     * @return The ProcessBuilder instance representing the java command.\n+     *\/\n+    public static ProcessBuilder createTestJvm(String... command) {\n+        return createJavaProcessBuilder(Utils.prependTestJavaOpts(command));\n+    }\n+\n@@ -378,1 +380,1 @@\n-        ProcessBuilder pb = createJavaProcessBuilder(true, cmds);\n+        ProcessBuilder pb = createTestJvm(cmds);\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":32,"deletions":30,"binary":false,"changes":62,"status":"modified"}]}