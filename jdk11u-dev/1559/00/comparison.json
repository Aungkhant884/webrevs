{"files":[{"patch":"@@ -0,0 +1,212 @@\n+\/*\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4424517\n+ * @summary Verify the mapping of various KeyEvents with their KeyLocations\n+ * is as expected.\n+ * @run main KeyEventLocationTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.awt.event.MouseEvent;\n+\n+import javax.swing.SwingUtilities;\n+\n+public class KeyEventLocationTest {\n+\n+    private static volatile Frame frame;\n+    private static volatile boolean keyPressed;\n+    private static volatile boolean keyReleased;\n+    private static volatile boolean keyTyped;\n+    private static volatile Robot robot;\n+    private static volatile int xLocation;\n+    private static volatile int yLocation;\n+    private static volatile int width;\n+    private static volatile int height;\n+    private static volatile Label label = new Label();\n+    private static volatile String currentString = \"\";\n+\n+    private static int[] keyEvents = { KeyEvent.VK_0, KeyEvent.VK_1,\n+        KeyEvent.VK_2, KeyEvent.VK_3, KeyEvent.VK_4, KeyEvent.VK_5,\n+        KeyEvent.VK_6, KeyEvent.VK_7, KeyEvent.VK_8, KeyEvent.VK_9,\n+        KeyEvent.VK_A, KeyEvent.VK_B, KeyEvent.VK_C, KeyEvent.VK_D,\n+        KeyEvent.VK_E, KeyEvent.VK_F, KeyEvent.VK_G, KeyEvent.VK_H,\n+        KeyEvent.VK_I, KeyEvent.VK_J, KeyEvent.VK_K, KeyEvent.VK_L,\n+        KeyEvent.VK_M, KeyEvent.VK_N, KeyEvent.VK_O, KeyEvent.VK_P,\n+        KeyEvent.VK_Q, KeyEvent.VK_R, KeyEvent.VK_S, KeyEvent.VK_T,\n+        KeyEvent.VK_U, KeyEvent.VK_V, KeyEvent.VK_W, KeyEvent.VK_X,\n+        KeyEvent.VK_Y, KeyEvent.VK_Z, KeyEvent.VK_BACK_QUOTE,\n+        KeyEvent.VK_BACK_SLASH, KeyEvent.VK_BACK_SPACE,\n+        KeyEvent.VK_CLOSE_BRACKET, KeyEvent.VK_COMMA, KeyEvent.VK_EQUALS,\n+        KeyEvent.VK_ESCAPE, KeyEvent.VK_MINUS, KeyEvent.VK_OPEN_BRACKET,\n+        KeyEvent.VK_PERIOD, KeyEvent.VK_QUOTE, KeyEvent.VK_SEMICOLON,\n+        KeyEvent.VK_SLASH, KeyEvent.VK_SPACE };\n+\n+    private static int specialKeyEvents[] = { KeyEvent.VK_F1, KeyEvent.VK_F2,\n+        KeyEvent.VK_F3, KeyEvent.VK_F4, KeyEvent.VK_F5, KeyEvent.VK_F6,\n+        KeyEvent.VK_F7, KeyEvent.VK_F8, KeyEvent.VK_F9, KeyEvent.VK_F10 };\n+\n+    private static void createGUI() {\n+        frame = new Frame(\"Test frame\");\n+        frame.setLayout(new BorderLayout());\n+        frame.setAlwaysOnTop(true);\n+\n+        frame.addKeyListener(new KeyListener() {\n+            public void keyPressed(KeyEvent event) {\n+                try {\n+                    handleEvent(\"keyPressed\", event);\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+                keyPressed = true;\n+            }\n+\n+            public void keyReleased(KeyEvent event) {\n+                try {\n+                    handleEvent(\"keyReleased\", event);\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+                keyReleased = true;\n+            }\n+\n+            public void keyTyped(KeyEvent event) {\n+                try {\n+                    handleEvent(\"keyTyped\", event);\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+                keyTyped = true;\n+            }\n+\n+            private void handleEvent(String eventString, KeyEvent event)\n+                throws Exception {\n+                label.setText(eventString + \" triggered for \" + event);\n+                if ((event.getID() == KeyEvent.KEY_TYPED\n+                    && event.getKeyLocation() != KeyEvent.KEY_LOCATION_UNKNOWN)\n+                    || ((event.getID() == KeyEvent.KEY_PRESSED\n+                    || event.getID() == KeyEvent.KEY_PRESSED)\n+                    && event.getKeyLocation()\n+                    != KeyEvent.KEY_LOCATION_STANDARD)) {\n+                    throw new Exception(\"FAIL: Incorrect KeyLocation: \"\n+                        + event.getKeyLocation() + \" returned when \"\n+                        + eventString + \" triggered for \" + event.getKeyChar());\n+                }\n+            }\n+        });\n+        label.setText(\"Current Event: \");\n+        frame.add(label, BorderLayout.SOUTH);\n+        frame.setSize(600, 300);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+        frame.toFront();\n+    }\n+\n+    private static void doTest() throws Exception {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(100);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            xLocation = frame.getLocationOnScreen().x;\n+            yLocation = frame.getLocationOnScreen().y;\n+            width = frame.getWidth();\n+            height = frame.getHeight();\n+        });\n+\n+        robot.mouseMove(xLocation + width \/ 2, yLocation + height \/ 2);\n+        robot.mousePress(MouseEvent.BUTTON1_MASK);\n+        robot.mouseRelease(MouseEvent.BUTTON1_MASK);\n+\n+        for (int i = 0; i < keyEvents.length; i++) {\n+            resetValues();\n+            robot.keyPress(keyEvents[i]);\n+            robot.delay(200);\n+            if (!keyPressed) {\n+                throw new Exception(\n+                    \"FAIL: keyPressed did not get triggered for \"\n+                        + KeyEvent.getKeyText(keyEvents[i]));\n+            }\n+            robot.keyRelease(keyEvents[i]);\n+            robot.delay(200);\n+            if (!keyReleased) {\n+                throw new Exception(\n+                    \"FAIL: keyReleased did not get triggered for \"\n+                        + KeyEvent.getKeyText(keyEvents[i]));\n+            }\n+            robot.delay(200);\n+            if (!keyTyped) {\n+                throw new Exception(\"FAIL: keyTyped did not get triggered for \"\n+                    + KeyEvent.getKeyText(keyEvents[i]));\n+            }\n+        }\n+\n+        for (int i = 0; i < specialKeyEvents.length; i++) {\n+            resetValues();\n+            robot.keyPress(specialKeyEvents[i]);\n+            robot.delay(200);\n+            if (!keyPressed) {\n+                throw new Exception(\"FAIL: keyPressed did not get triggered\"\n+                    + \" for \" + KeyEvent.getKeyText(specialKeyEvents[i]));\n+            }\n+            robot.keyRelease(specialKeyEvents[i]);\n+            robot.delay(200);\n+            if (!keyReleased) {\n+                throw new Exception(\"FAIL: keyReleased got triggered for \"\n+                    + KeyEvent.getKeyText(specialKeyEvents[i]));\n+            }\n+            robot.delay(200);\n+            if (keyTyped) {\n+                throw new Exception(\"FAIL: keyTyped got triggered for \"\n+                    + KeyEvent.getKeyText(specialKeyEvents[i]));\n+            }\n+        }\n+    }\n+\n+    private static void resetValues() {\n+        keyPressed = false;\n+        keyReleased = false;\n+        keyTyped = false;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> createGUI());\n+            doTest();\n+            System.out.println(\"Test Passed\");\n+        } finally {\n+            if (frame != null)\n+                EventQueue.invokeAndWait(() -> frame.dispose());\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/KeyEventLocationTest.java","additions":212,"deletions":0,"binary":false,"changes":212,"status":"added"}]}