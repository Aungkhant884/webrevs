{"files":[{"patch":"@@ -48,0 +48,2 @@\n+        byte byteField = 42;\n+        char charField = 'X';\n@@ -75,0 +77,6 @@\n+        char charField = event.getValue(\"charField\");\n+        Asserts.assertEquals(charField, myEvent.charField);\n+\n+        byte byteField = event.getValue(\"byteField\");\n+        Asserts.assertEquals(byteField, myEvent.byteField);\n+\n@@ -106,1 +114,0 @@\n-\n@@ -128,0 +135,2 @@\n+        Asserts.assertTrue(event.hasField(\"charField\"));\n+        Asserts.assertTrue(event.hasField(\"byteField\"));\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestFieldAccess.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.util.function.Consumer;\n@@ -56,2 +55,2 @@\n-        testStackTrace(r -> r.enable(SimpleEvent.class), TestGetStackTrace::assertNoStackTrace);\n-        testStackTrace(r -> r.enable(SimpleEvent.class).withoutStackTrace(), TestGetStackTrace::assertStackTrace);\n+        testWithoutStackTrace(recordEvent(\"stackTrace\", \"false\"));\n+        testWithStackTrace(recordEvent(\"stackTrace\", \"true\"));\n@@ -60,10 +59,9 @@\n-    private static void testStackTrace(Consumer<Recording> recordingConfigurer, Consumer<RecordedEvent> asserter) throws Throwable {\n-        Recording r = new Recording();\n-        recordingConfigurer.accept(r);\n-        r.start();\n-        SimpleEvent event = new SimpleEvent();\n-        event.commit();\n-        r.stop();\n-        List<RecordedEvent> events = Events.fromRecording(r);\n-        r.close();\n-        Events.hasEvents(events);\n+    private static RecordedEvent recordEvent(String key, String value) throws Throwable {\n+        try (Recording r = new Recording()) {\n+            r.enable(SimpleEvent.class).with(key, value);\n+            r.start();\n+            SimpleEvent event = new SimpleEvent();\n+            event.commit();\n+            r.stop();\n+            return Events.fromRecording(r).get(0);\n+        }\n@@ -72,1 +70,1 @@\n-    private static void assertNoStackTrace(RecordedEvent re) {\n+    private static void testWithoutStackTrace(RecordedEvent re) {\n@@ -76,1 +74,1 @@\n-    private static void assertStackTrace(RecordedEvent re) {\n+    private static void testWithStackTrace(RecordedEvent re) {\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestGetStackTrace.java","additions":13,"deletions":15,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -59,3 +59,3 @@\n-        Recording recording = new Recording();\n-        recording.enable(MyEvent.class).withThreshold(Duration.ofMillis(0));\n-        recording.start();\n+        try (Recording recording = new Recording()) {\n+            recording.enable(MyEvent.class).withThreshold(Duration.ofMillis(0));\n+            recording.start();\n@@ -63,14 +63,14 @@\n-        \/\/ Commit event with hidden methods\n-        ScriptEngineManager manager = new ScriptEngineManager();\n-        ScriptEngine engine = manager.getEngineByName(\"nashorn\");\n-        engine.eval(\n-                \"function emit() {\"\n-                + \"  print('About to emit event from Javascript');\"\n-                + \"  var TestEvent = Java.type(\\\"jdk.jfr.api.consumer.TestHiddenMethod$MyEvent\\\");\"\n-                + \"  var event = new TestEvent;\"\n-                + \"  event.begin();\"\n-                + \"  event.end();\"\n-                + \"  event.commit();\"\n-                + \"  print('Event emitted from Javascript!');\"\n-                + \"}\"\n-                + \"emit();\");\n+            \/\/ Commit event with hidden methods\n+            ScriptEngineManager manager = new ScriptEngineManager();\n+            ScriptEngine engine = manager.getEngineByName(\"nashorn\");\n+            engine.eval(\n+                    \"function emit() {\"\n+                    + \"  print('About to emit event from Javascript');\"\n+                    + \"  var TestEvent = Java.type(\\\"jdk.jfr.api.consumer.TestHiddenMethod$MyEvent\\\");\"\n+                    + \"  var event = new TestEvent;\"\n+                    + \"  event.begin();\"\n+                    + \"  event.end();\"\n+                    + \"  event.commit();\"\n+                    + \"  print('Event emitted from Javascript!');\"\n+                    + \"}\"\n+                    + \"emit();\");\n@@ -78,6 +78,6 @@\n-        \/\/ Commit event with visible method\n-        MyEvent visible = new MyEvent();\n-        visible.begin();\n-        visible.end();\n-        visible.commit();\n-        recording.stop();\n+            \/\/ Commit event with visible method\n+            MyEvent visible = new MyEvent();\n+            visible.begin();\n+            visible.end();\n+            visible.commit();\n+            recording.stop();\n@@ -85,4 +85,4 @@\n-        List<RecordedEvent> events = Events.fromRecording(recording);\n-        assertEquals(2, events.size(), \"Expected two events\");\n-        RecordedEvent hiddenEvent = events.get(0);\n-        RecordedEvent visibleEvent = events.get(1);\n+            List<RecordedEvent> events = Events.fromRecording(recording);\n+            assertEquals(2, events.size(), \"Expected two events\");\n+            RecordedEvent hiddenEvent = events.get(0);\n+            RecordedEvent visibleEvent = events.get(1);\n@@ -90,2 +90,2 @@\n-        System.out.println(\"hiddenEvent:\" + hiddenEvent);\n-        System.out.println(\"visibleEvent:\" + visibleEvent);\n+            System.out.println(\"hiddenEvent:\" + hiddenEvent);\n+            System.out.println(\"visibleEvent:\" + visibleEvent);\n@@ -93,2 +93,3 @@\n-        assertTrue(hasHiddenStackFrame(hiddenEvent), \"No hidden frame in hidden event: \" + hiddenEvent);\n-        assertFalse(hasHiddenStackFrame(visibleEvent), \"Hidden frame in visible event: \" + visibleEvent);\n+            assertTrue(hasHiddenStackFrame(hiddenEvent), \"No hidden frame in hidden event: \" + hiddenEvent);\n+            assertFalse(hasHiddenStackFrame(visibleEvent), \"Hidden frame in visible event: \" + visibleEvent);\n+        }\n@@ -111,1 +112,0 @@\n-\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestHiddenMethod.java","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+ * @summary Verifies that a recorded method has the correct modifier\n@@ -52,2 +53,2 @@\n-        Recording recording = new Recording();\n-        recording.start();\n+        try (Recording recording = new Recording()) {\n+            recording.start();\n@@ -55,3 +56,3 @@\n-        SimpleEvent ev = new SimpleEvent();\n-        ev.commit();\n-        recording.stop();\n+            SimpleEvent ev = new SimpleEvent();\n+            ev.commit();\n+            recording.stop();\n@@ -59,3 +60,3 @@\n-        List<RecordedEvent> recordedEvents = Events.fromRecording(recording);\n-        Events.hasEvents(recordedEvents);\n-        RecordedEvent recordedEvent = recordedEvents.get(0);\n+            List<RecordedEvent> recordedEvents = Events.fromRecording(recording);\n+            Events.hasEvents(recordedEvents);\n+            RecordedEvent recordedEvent = recordedEvents.get(0);\n@@ -63,1 +64,1 @@\n-        System.out.println(\"recorded event:\" + recordedEvent);\n+            System.out.println(recordedEvent);\n@@ -65,11 +66,12 @@\n-        RecordedStackTrace stacktrace = recordedEvent.getStackTrace();\n-        List<RecordedFrame> frames = stacktrace.getFrames();\n-        for (RecordedFrame frame : frames) {\n-            RecordedMethod method = frame.getMethod();\n-            if (method.getName().equals(\"main\")) {\n-                System.out.println(\"'main' method: \" + method);\n-                int modifiers = TestMethodGetModifiers.class.getDeclaredMethod(\"main\", (Class<?>)String[].class).getModifiers();\n-                System.out.println(\"modifiers: \" + modifiers);\n-                Asserts.assertEquals(method.getModifiers(), modifiers, \"Incorrect method modifier reported\");\n-                RecordedClass type = method.getType();\n-                assertNotNull(type, \"Recorded class can not be null\");\n+            RecordedStackTrace stacktrace = recordedEvent.getStackTrace();\n+            List<RecordedFrame> frames = stacktrace.getFrames();\n+            for (RecordedFrame frame : frames) {\n+                RecordedMethod method = frame.getMethod();\n+                if (method.getName().equals(\"main\")) {\n+                    System.out.println(\"'main' method: \" + method);\n+                    int modifiers = TestMethodGetModifiers.class.getDeclaredMethod(\"main\", (Class<?>)String[].class).getModifiers();\n+                    System.out.println(\"modifiers: \" + modifiers);\n+                    Asserts.assertEquals(method.getModifiers(), modifiers, \"Incorrect method modifier reported\");\n+                    RecordedClass type = method.getType();\n+                    assertNotNull(type, \"Recorded class can not be null\");\n+                }\n@@ -77,1 +79,0 @@\n-\n@@ -80,1 +81,0 @@\n-\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestMethodGetModifiers.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-\n@@ -55,3 +54,3 @@\n-        Recording r = new Recording();\n-        r.enable(MyEvent.class).withoutStackTrace();\n-        r.start();\n+        try (Recording r = new Recording()) {\n+            r.enable(MyEvent.class).withoutStackTrace();\n+            r.start();\n@@ -59,3 +58,3 @@\n-        \/\/ Commit a single event to the recording\n-        MyEvent event = new MyEvent();\n-        event.commit();\n+            \/\/ Commit a single event to the recording\n+            MyEvent event = new MyEvent();\n+            event.commit();\n@@ -63,1 +62,1 @@\n-        r.stop();\n+            r.stop();\n@@ -65,5 +64,4 @@\n-        \/\/ Dump the recording to a file\n-        Path path = Utils.createTempFile(\"read-twice\", \".jfr\");\n-        System.out.println(\"Dumping to \" + path);\n-        r.dump(path);\n-        r.close();\n+            \/\/ Dump the recording to a file\n+            Path path = Utils.createTempFile(\"read-twice\", \".jfr\");\n+            System.out.println(\"Dumping to \" + path);\n+            r.dump(path);\n@@ -71,2 +69,2 @@\n-        \/\/ Read all events from the file in one go\n-        List<RecordedEvent> events = RecordingFile.readAllEvents(path);\n+            \/\/ Read all events from the file in one go\n+            List<RecordedEvent> events = RecordingFile.readAllEvents(path);\n@@ -74,6 +72,6 @@\n-        \/\/ Read again the same events one by one\n-        RecordingFile rfile = new RecordingFile(path);\n-        List<RecordedEvent> events2 = new LinkedList<>();\n-        while (rfile.hasMoreEvents()) {\n-            events2.add(rfile.readEvent());\n-        }\n+            \/\/ Read again the same events one by one\n+            try (RecordingFile rfile = new RecordingFile(path)) {\n+                List<RecordedEvent> events2 = new LinkedList<>();\n+                while (rfile.hasMoreEvents()) {\n+                    events2.add(rfile.readEvent());\n+                }\n@@ -81,3 +79,4 @@\n-        \/\/ Compare sizes\n-        Asserts.assertEquals(events.size(), events2.size());\n-        rfile.close();\n+                \/\/ Compare sizes\n+                Asserts.assertEquals(events.size(), events2.size());\n+            }\n+        }\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestReadTwice.java","additions":23,"deletions":24,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+\n@@ -55,61 +56,62 @@\n-        Recording recording = new Recording();\n-        recording.enable(EVENT_NAME).withoutStackTrace();\n-        TestClassLoader cl = new TestClassLoader();\n-        recording.start();\n-        cl.loadClass(TEST_CLASS_NAME);\n-        recording.stop();\n-\n-        List<RecordedEvent> events = Events.fromRecording(recording);\n-        boolean isDefined = false;\n-        for (RecordedEvent event : events) {\n-            RecordedClass definedClass = event.getValue(\"definedClass\");\n-            if (TEST_CLASS_NAME.equals(definedClass.getName())) {\n-                System.out.println(event);\n-\n-                \/\/ get the RecordedClassLoader from the RecordedClass, the \"definedClass\"\n-                RecordedClassLoader definingClassLoader = definedClass.getClassLoader();\n-                Asserts.assertNotNull(definingClassLoader, \"Defining Class Loader should not be null\");\n-\n-                \/\/ invoke RecordedClassLoader.getType() in order to validate the type of the RecordedClassLoader\n-                RecordedClass definingClassLoaderType = definingClassLoader.getType();\n-                Asserts.assertNotNull(definingClassLoaderType, \"The defining Class Loader type should not be null\");\n-\n-                \/\/ verify matching types\n-                Asserts.assertEquals(cl.getClass().getName(), definingClassLoaderType.getName(),\n-                    \"Expected type \" + cl.getClass().getName() + \", got type \" + definingClassLoaderType.getName());\n-\n-                \/\/ get a RecordedClassLoader directly from the \"definingClassLoader\" field as well\n-                RecordedClassLoader definingClassLoaderFromField = event.getValue(\"definingClassLoader\");\n-                Asserts.assertNotNull(definingClassLoaderFromField,\n-                    \"Defining Class Loader instantatiated from field should not be null\");\n-\n-                \/\/ ensure that the class loader instance used in the test actually has a name\n-                Asserts.assertNotNull(cl.getName(),\n-                    \"Expected a valid name for the TestClassLoader\");\n-\n-                \/\/ invoke RecordedClassLoader.getName() to get the name of the class loader instance\n-                Asserts.assertEquals(cl.getName(), definingClassLoader.getName(),\n-                    \"Defining Class Loader should have the same name as the original class loader\");\n-                Asserts.assertEquals(definingClassLoaderFromField.getName(), definingClassLoader.getName(),\n-                    \"Defining Class Loader representations should have the same class loader name\");\n-\n-                \/\/ invoke uniqueID()\n-                Asserts.assertGreaterThan(definingClassLoader.getId(), 0L, \"Invalid id assignment\");\n-\n-                \/\/ second order class loader information (\"check class loader of the class loader\")\n-                RecordedClassLoader classLoaderOfDefClassLoader = definingClassLoaderType.getClassLoader();\n-                Asserts.assertNotNull(classLoaderOfDefClassLoader,\n-                    \"The class loader for the definining class loader should not be null\");\n-                Asserts.assertEquals(cl.getClass().getClassLoader().getName(), classLoaderOfDefClassLoader.getName(),\n-                    \"Expected class loader name \" + cl.getClass().getClassLoader().getName() + \", got name \" + classLoaderOfDefClassLoader.getName());\n-\n-                RecordedClass classLoaderOfDefClassLoaderType = classLoaderOfDefClassLoader.getType();\n-                Asserts.assertNotNull(classLoaderOfDefClassLoaderType,\n-                    \"The class loader type for the defining class loader should not be null\");\n-                Asserts.assertEquals(cl.getClass().getClassLoader().getClass().getName(), classLoaderOfDefClassLoaderType.getName(),\n-                    \"Expected type \" + cl.getClass().getClassLoader().getClass().getName() + \", got type \" + classLoaderOfDefClassLoaderType.getName());\n-\n-                Asserts.assertGreaterThan(definingClassLoader.getId(), classLoaderOfDefClassLoader.getId(),\n-                    \"expected id assignment invariant broken for Class Loaders\");\n-\n-                isDefined = true;\n+        try (Recording recording = new Recording()) {\n+            recording.enable(EVENT_NAME).withoutStackTrace();\n+            TestClassLoader cl = new TestClassLoader();\n+            recording.start();\n+            cl.loadClass(TEST_CLASS_NAME);\n+            recording.stop();\n+\n+            List<RecordedEvent> events = Events.fromRecording(recording);\n+            boolean isDefined = false;\n+            for (RecordedEvent event : events) {\n+                RecordedClass definedClass = event.getValue(\"definedClass\");\n+                if (TEST_CLASS_NAME.equals(definedClass.getName())) {\n+                    System.out.println(event);\n+\n+                    \/\/ get the RecordedClassLoader from the RecordedClass, the \"definedClass\"\n+                    RecordedClassLoader definingClassLoader = definedClass.getClassLoader();\n+                    Asserts.assertNotNull(definingClassLoader, \"Defining Class Loader should not be null\");\n+\n+                    \/\/ invoke RecordedClassLoader.getType() in order to validate the type of the RecordedClassLoader\n+                    RecordedClass definingClassLoaderType = definingClassLoader.getType();\n+                    Asserts.assertNotNull(definingClassLoaderType, \"The defining Class Loader type should not be null\");\n+\n+                    \/\/ verify matching types\n+                    Asserts.assertEquals(cl.getClass().getName(), definingClassLoaderType.getName(),\n+                        \"Expected type \" + cl.getClass().getName() + \", got type \" + definingClassLoaderType.getName());\n+\n+                    \/\/ get a RecordedClassLoader directly from the \"definingClassLoader\" field as well\n+                    RecordedClassLoader definingClassLoaderFromField = event.getValue(\"definingClassLoader\");\n+                    Asserts.assertNotNull(definingClassLoaderFromField,\n+                        \"Defining Class Loader instantatiated from field should not be null\");\n+\n+                    \/\/ ensure that the class loader instance used in the test actually has a name\n+                    Asserts.assertNotNull(cl.getName(),\n+                        \"Expected a valid name for the TestClassLoader\");\n+\n+                    \/\/ invoke RecordedClassLoader.getName() to get the name of the class loader instance\n+                    Asserts.assertEquals(cl.getName(), definingClassLoader.getName(),\n+                        \"Defining Class Loader should have the same name as the original class loader\");\n+                    Asserts.assertEquals(definingClassLoaderFromField.getName(), definingClassLoader.getName(),\n+                        \"Defining Class Loader representations should have the same class loader name\");\n+\n+                    \/\/ invoke uniqueID()\n+                    Asserts.assertGreaterThan(definingClassLoader.getId(), 0L, \"Invalid id assignment\");\n+\n+                    \/\/ second order class loader information (\"check class loader of the class loader\")\n+                    RecordedClassLoader classLoaderOfDefClassLoader = definingClassLoaderType.getClassLoader();\n+                    Asserts.assertNotNull(classLoaderOfDefClassLoader,\n+                        \"The class loader for the definining class loader should not be null\");\n+                    Asserts.assertEquals(cl.getClass().getClassLoader().getName(), classLoaderOfDefClassLoader.getName(),\n+                        \"Expected class loader name \" + cl.getClass().getClassLoader().getName() + \", got name \" + classLoaderOfDefClassLoader.getName());\n+\n+                    RecordedClass classLoaderOfDefClassLoaderType = classLoaderOfDefClassLoader.getType();\n+                    Asserts.assertNotNull(classLoaderOfDefClassLoaderType,\n+                        \"The class loader type for the defining class loader should not be null\");\n+                    Asserts.assertEquals(cl.getClass().getClassLoader().getClass().getName(), classLoaderOfDefClassLoaderType.getName(),\n+                        \"Expected type \" + cl.getClass().getClassLoader().getClass().getName() + \", got type \" + classLoaderOfDefClassLoaderType.getName());\n+\n+                    Asserts.assertGreaterThan(definingClassLoader.getId(), classLoaderOfDefClassLoader.getId(),\n+                        \"expected id assignment invariant broken for Class Loaders\");\n+\n+                    isDefined = true;\n+                }\n@@ -117,0 +119,1 @@\n+            Asserts.assertTrue(isDefined, \"No class define event found to verify RecordedClassLoader\");\n@@ -118,1 +121,0 @@\n-        Asserts.assertTrue(isDefined, \"No class define event found to verify RecordedClassLoader\");\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordedClassLoader.java","additions":64,"deletions":62,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-\n@@ -63,9 +62,5 @@\n-        Recording r = new Recording();\n-        r.start();\n-        TestEvent t = new TestEvent();\n-        t.commit();\n-        r.stop();\n-        List<RecordedEvent> events = Events.fromRecording(r);\n-        Events.hasEvents(events);\n-\n-        Asserts.assertEquals(events.size(), 1);\n+        try (Recording r = new Recording()) {\n+            r.start();\n+            TestEvent t = new TestEvent();\n+            t.commit();\n+            r.stop();\n@@ -73,1 +68,4 @@\n-        RecordedEvent event = events.get(0);\n+            List<RecordedEvent> events = Events.fromRecording(r);\n+            Events.hasEvents(events);\n+            Asserts.assertEquals(events.size(), 1);\n+            RecordedEvent event = events.get(0);\n@@ -75,1 +73,1 @@\n-        List<ValueDescriptor> descriptors = event.getFields();\n+            List<ValueDescriptor> descriptors = event.getFields();\n@@ -77,6 +75,6 @@\n-        System.out.println(\"Descriptors\");\n-        for (ValueDescriptor descriptor : descriptors) {\n-            System.out.println(descriptor.getName());\n-            System.out.println(descriptor.getTypeName());\n-        }\n-        System.out.println(\"Descriptors end\");\n+            System.out.println(\"Descriptors\");\n+            for (ValueDescriptor descriptor : descriptors) {\n+                System.out.println(descriptor.getName());\n+                System.out.println(descriptor.getTypeName());\n+            }\n+            System.out.println(\"Descriptors end\");\n@@ -84,2 +82,2 @@\n-        Object recordedClass = event.getValue(\"clzField\");\n-        Asserts.assertTrue(recordedClass instanceof RecordedClass, \"Expected Recorded Class got \" + recordedClass);\n+            Object recordedClass = event.getValue(\"clzField\");\n+            Asserts.assertTrue(recordedClass instanceof RecordedClass, \"Expected Recorded Class got \" + recordedClass);\n@@ -87,2 +85,2 @@\n-        Object recordedInt = event.getValue(\"intField\");\n-        Asserts.assertTrue(recordedInt instanceof Integer);\n+            Object recordedInt = event.getValue(\"intField\");\n+            Asserts.assertTrue(recordedInt instanceof Integer);\n@@ -90,3 +88,3 @@\n-        Object recordedString = event.getValue(\"stringField\");\n-        System.out.println(\"recordedString class: \" + recordedString.getClass());\n-        Asserts.assertTrue(recordedString instanceof String);\n+            Object recordedString = event.getValue(\"stringField\");\n+            System.out.println(\"recordedString class: \" + recordedString.getClass());\n+            Asserts.assertTrue(recordedString instanceof String);\n@@ -94,2 +92,2 @@\n-        Object myClass = event.getValue(\"myClass\");\n-        Asserts.assertTrue(myClass instanceof RecordedClass, \"Expected Recorded Class got \" + recordedClass);\n+            Object myClass = event.getValue(\"myClass\");\n+            Asserts.assertTrue(myClass instanceof RecordedClass, \"Expected Recorded Class got \" + recordedClass);\n@@ -97,2 +95,2 @@\n-        RecordedClass myRecClass = (RecordedClass) myClass;\n-        Asserts.assertEquals(MyClass.class.getName(), myRecClass.getName(), \"Got \" + myRecClass.getName());\n+            RecordedClass myRecClass = (RecordedClass) myClass;\n+            Asserts.assertEquals(MyClass.class.getName(), myRecClass.getName(), \"Got \" + myRecClass.getName());\n@@ -100,2 +98,2 @@\n-        Object recordedClassLoader = myRecClass.getValue(\"classLoader\");\n-        Asserts.assertTrue(recordedClassLoader instanceof RecordedClassLoader, \"Expected Recorded ClassLoader got \" + recordedClassLoader);\n+            Object recordedClassLoader = myRecClass.getValue(\"classLoader\");\n+            Asserts.assertTrue(recordedClassLoader instanceof RecordedClassLoader, \"Expected Recorded ClassLoader got \" + recordedClassLoader);\n@@ -103,3 +101,3 @@\n-        RecordedClassLoader myRecClassLoader = (RecordedClassLoader)recordedClassLoader;\n-        ClassLoader cl = MyClass.class.getClassLoader();\n-        Asserts.assertEquals(cl.getClass().getName(), myRecClassLoader.getType().getName(), \"Expected Recorded ClassLoader type to equal loader type\");\n+            RecordedClassLoader myRecClassLoader = (RecordedClassLoader) recordedClassLoader;\n+            ClassLoader cl = MyClass.class.getClassLoader();\n+            Asserts.assertEquals(cl.getClass().getName(), myRecClassLoader.getType().getName(), \"Expected Recorded ClassLoader type to equal loader type\");\n@@ -107,1 +105,2 @@\n-        Asserts.assertNotNull(myRecClass.getModifiers());\n+            Asserts.assertNotNull(myRecClass.getModifiers());\n+        }\n@@ -109,1 +108,0 @@\n-\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordedEvent.java","additions":34,"deletions":36,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-        long expectedThreadId = currentThread.getId();\n@@ -54,10 +53,5 @@\n-        Recording r = new Recording();\n-        r.start();\n-        SimpleEvent t = new SimpleEvent();\n-        t.commit();\n-        r.stop();\n-        List<RecordedEvent> events = Events.fromRecording(r);\n-        r.close();\n-        Events.hasEvents(events);\n-        RecordedEvent event = events.get(0);\n-        RecordedThread recordedThread = event.getThread();\n+        try (Recording r = new Recording()) {\n+            r.start();\n+            SimpleEvent t = new SimpleEvent();\n+            t.commit();\n+            r.stop();\n@@ -65,6 +59,12 @@\n-        Asserts.assertNotNull(recordedThread);\n-        Asserts.assertEquals(recordedThread.getJavaName(), MY_THREAD_NAME);\n-        Asserts.assertEquals(recordedThread.getJavaThreadId(), expectedThreadId);\n-        Asserts.assertNotNull(recordedThread.getOSThreadId());\n-        Asserts.assertNotNull(recordedThread.getId());\n-        Asserts.assertEquals(recordedThread.getOSName(), MY_THREAD_NAME);\n+            List<RecordedEvent> events = Events.fromRecording(r);\n+            Events.hasEvents(events);\n+            RecordedEvent event = events.get(0);\n+            RecordedThread recordedThread = event.getThread();\n+            Asserts.assertNotNull(recordedThread);\n+\n+            Asserts.assertEquals(recordedThread.getJavaName(), MY_THREAD_NAME);\n+            Asserts.assertEquals(recordedThread.getJavaThreadId(), currentThread.getId());\n+            Asserts.assertNotNull(recordedThread.getOSThreadId());\n+            Asserts.assertNotNull(recordedThread.getId());\n+            Asserts.assertEquals(recordedThread.getOSName(), MY_THREAD_NAME);\n+        }\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordedEventGetThread.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -50,2 +50,0 @@\n-    private static long expectedThreadId;\n-    private static Path dumpFilePath;\n@@ -57,4 +55,3 @@\n-\n-        PostingThread() {\n-            setName(MY_THREAD_NAME);\n-            expectedThreadId = getId();\n+        private final Path dumpFilePath;\n+        PostingThread(Path dumpFilePath) {\n+            this.dumpFilePath = dumpFilePath;\n@@ -67,2 +64,8 @@\n-                dumpFilePath = postEventAndDumpToFile();\n-                System.out.println(\"events dumped to the file \" + dumpFilePath);\n+                try (Recording r = new Recording()) {\n+                    r.start();\n+                    TestEvent t = new TestEvent();\n+                    t.commit();\n+                    r.stop();\n+                    r.dump(dumpFilePath);\n+                    System.out.println(\"events dumped to the file \" + dumpFilePath);\n+                }\n@@ -76,2 +79,2 @@\n-    public static void main(String[] args) throws Throwable {\n-        Thread.currentThread().setName(\"MyMainThread\");\n+    public static void main(String[] args) throws Exception  {\n+        Path dumpFilePath = Utils.createTempFile(\"event-thread\", \".jfr\");\n@@ -79,1 +82,2 @@\n-        PostingThread thread = new PostingThread();\n+        PostingThread thread = new PostingThread(dumpFilePath);\n+        thread.setName(MY_THREAD_NAME);\n@@ -82,1 +86,0 @@\n-        System.out.println(\"testing dump in file \" + dumpFilePath);\n@@ -92,1 +95,1 @@\n-        Asserts.assertEquals(recordedThread.getJavaThreadId(), expectedThreadId);\n+        Asserts.assertEquals(recordedThread.getJavaThreadId(), thread.getId());\n@@ -96,13 +99,0 @@\n-\n-    private static Path postEventAndDumpToFile() throws Throwable {\n-        Recording r = new Recording();\n-        r.start();\n-        TestEvent t = new TestEvent();\n-        t.commit();\n-        r.stop();\n-        Path path = Utils.createTempFile(\"event-thread\", \".jfr\");\n-        System.out.println(\"Created path: \" + path);\n-        r.dump(path);\n-        r.close();\n-        return path;\n-    }\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordedEventGetThreadOther.java","additions":16,"deletions":26,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.Set;\n@@ -52,2 +53,42 @@\n-        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n-        doTest(getLineNumber(\"main\", stackTrace) + 1);\n+        System.out.println(); \/\/ Makes BCI for method larger than 0\n+        test(); \/\/ Records the line number and BCI for the main method\/frame\n+    }\n+\n+    static void test() throws IOException {\n+        try (Recording recording = new Recording()) {\n+            recording.start();\n+\n+            SimpleEvent ev = new SimpleEvent();\n+            ev.commit();\n+            recording.stop();\n+\n+            List<RecordedEvent> recordedEvents = Events.fromRecording(recording);\n+            Events.hasEvents(recordedEvents);\n+            RecordedEvent recordedEvent = recordedEvents.get(0);\n+\n+            RecordedStackTrace stacktrace = recordedEvent.getStackTrace();\n+            List<RecordedFrame> frames = stacktrace.getFrames();\n+            for (RecordedFrame frame : frames) {\n+                \/\/ All frames are java frames\n+                Asserts.assertTrue(frame.isJavaFrame());\n+                \/\/ Verify the main() method frame\n+                RecordedMethod method = frame.getMethod();\n+                if (method.getName().equals(\"main\")) {\n+                    \/\/ Frame type\n+                    String type = frame.getType();\n+                    System.out.println(\"type: \" + type);\n+                    Set<String> types = Set.of(\"Interpreted\", \"JIT compiled\", \"Inlined\");\n+                    Asserts.assertTrue(types.contains(type));\n+                    \/\/ Line number\n+                    Asserts.assertEquals(getLineNumber(\"main\"), frame.getLineNumber());\n+                    \/\/ Interpreted\n+                    boolean isInterpreted = \"Interpreted\".equals(type);\n+                    boolean expectedInterpreted = \"true\".equals(System.getProperty(\"interpreted\"));\n+                    Asserts.assertEquals(isInterpreted, expectedInterpreted);\n+                    \/\/ BCI\n+                    int bci = frame.getBytecodeIndex();\n+                    System.out.println(\"bci: \" + bci);\n+                    Asserts.assertGreaterThan(bci, 0);\n+                }\n+            }\n+        }\n@@ -57,1 +98,1 @@\n-     * Returns line number of the passed method for the passed stacktrace\n+     * Returns line number of a method on the stack\n@@ -59,2 +100,2 @@\n-    private static int getLineNumber(String methodName, StackTraceElement[] stackTrace) {\n-        for (StackTraceElement ste : stackTrace) {\n+    private static int getLineNumber(String methodName) {\n+        for (StackTraceElement ste : Thread.currentThread().getStackTrace()) {\n@@ -67,55 +108,0 @@\n-\n-    public static void doTest(int lineNumber) throws IOException {\n-\n-        System.out.println(\"Enetring method\");\n-\n-        Recording recording = new Recording();\n-        recording.start();\n-\n-        SimpleEvent ev = new SimpleEvent();\n-        commitEvent(ev);\n-        recording.stop();\n-\n-        List<RecordedEvent> recordedEvents = Events.fromRecording(recording);\n-        Events.hasEvents(recordedEvents);\n-        RecordedEvent recordedEvent = recordedEvents.get(0);\n-\n-        RecordedStackTrace stacktrace = recordedEvent.getStackTrace();\n-        List<RecordedFrame> frames = stacktrace.getFrames();\n-        for (RecordedFrame frame : frames) {\n-\n-            \/\/ All frames are java frames\n-            Asserts.assertTrue(frame.isJavaFrame());\n-            \/\/ Verify the main() method frame\n-            RecordedMethod method = frame.getMethod();\n-            if (method.getName().equals(\"main\")) {\n-\n-                \/\/ Frame type\n-                String type = frame.getType();\n-                System.out.println(\"type: \" + type);\n-                Asserts.assertTrue(\n-                        type.equals(\"Interpreted\")\n-                        || type.equals(\"JIT compiled\")\n-                        || type.equals(\"Inlined\"));\n-\n-                Asserts.assertEquals(lineNumber, frame.getLineNumber());\n-\n-                boolean isInterpreted = \"Interpreted\".equals(type);\n-                boolean expectedInterpreted = \"true\".equals(System.getProperty(\"interpreted\"));\n-                Asserts.assertEquals(isInterpreted, expectedInterpreted);\n-\n-                int bci = frame.getBytecodeIndex();\n-\n-                System.out.println(\"bci: \" + bci);\n-                Asserts.assertTrue(bci > 0);\n-            }\n-\n-        }\n-\n-    }\n-\n-    private static void commitEvent(SimpleEvent ev) {\n-        System.out.println(\"commit\");\n-        ev.commit();\n-    }\n-\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordedFrame.java","additions":46,"deletions":60,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -82,10 +82,10 @@\n-            Recording recording = new Recording();\n-            recording.enable(EVENT_NAME).withPeriod(Duration.ofMillis(50));\n-            recording.start();\n-            Thread.sleep(500);\n-            recording.stop();\n-            \/\/ Dump the recording to a file\n-            path = Utils.createTempFile(\"execution-stack-trace\", \".jfr\");\n-            System.out.println(\"Dumping to \" + path);\n-            recording.dump(path);\n-            recording.close();\n+            try (Recording recording = new Recording()) {\n+                recording.enable(EVENT_NAME).withPeriod(Duration.ofMillis(1));\n+                recording.start();\n+                Thread.sleep(50);\n+                recording.stop();\n+                \/\/ Dump the recording to a file\n+                path = Utils.createTempFile(\"execution-stack-trace\", \".jfr\");\n+                System.out.println(\"Dumping to \" + path);\n+                recording.dump(path);\n+            }\n@@ -106,2 +106,1 @@\n-                    System.out.println(\"ThreadName=\" + currThread.getName() + \", depth=\" + currThread.totalDepth);\n-                    Asserts.assertEquals(threadName, currThread.getName(), \"Wrong thread name\");\n+                    Asserts.assertEquals(threadName, currThread.getName(), \"Wrong thread name, deptth=\" + currThread.totalDepth);\n@@ -150,2 +149,1 @@\n-                System.out.printf(\"method[%d]=%s, expected=%s%n\", i, name, expectedName);\n-                Asserts.assertEquals(name, expectedName, \"Wrong method name\");\n+                Asserts.assertEquals(name, expectedName, \"Wrong method name at index \" + i);\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordedFullStackTrace.java","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -47,5 +47,5 @@\n-        Recording r = new Recording();\n-        r.start();\n-        SimpleEvent s = new SimpleEvent();\n-        s.commit();\n-        r.stop();\n+        try (Recording r = new Recording()) {\n+            r.start();\n+            SimpleEvent s = new SimpleEvent();\n+            s.commit();\n+            r.stop();\n@@ -53,6 +53,5 @@\n-        List<RecordedEvent> events = Events.fromRecording(r);\n-        Events.hasEvents(events);\n-        RecordedEvent event = events.get(0);\n-        Asserts.assertEquals(event.getStartTime(), event.getEndTime());\n-\n-        r.close();\n+            List<RecordedEvent> events = Events.fromRecording(r);\n+            Events.hasEvents(events);\n+            RecordedEvent event = events.get(0);\n+            Asserts.assertEquals(event.getStartTime(), event.getEndTime());\n+        }\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordedInstantEventTimestamp.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import jdk.jfr.consumer.RecordedMethod;\n@@ -39,0 +38,1 @@\n+import jdk.jfr.consumer.RecordedMethod;\n@@ -45,0 +45,1 @@\n+ * @summary Verifies that the method descriptor is correct\n@@ -52,27 +53,1 @@\n-    private static boolean isMainMethodDescriptorRecorded;\n-    private static final String MAIN_METHOD_DESCRIPTOR = \"([Ljava\/lang\/String;)V\";\n-    private static final String MAIN_METHOD_NAME = \"main\";\n-\n-    public static void main(String[] args) throws Throwable {\n-        Recording recording = new Recording();\n-        recording.enable(MyEvent.class).withStackTrace();\n-        recording.start();\n-\n-        MyEvent event = new MyEvent();\n-        event.begin();\n-        event.end();\n-        event.commit();\n-        recording.stop();\n-\n-        List<RecordedEvent> recordedEvents = Events.fromRecording(recording);\n-        assertEquals(1, recordedEvents.size(), \"Expected one event\");\n-        RecordedEvent recordedEvent = recordedEvents.get(0);\n-\n-        RecordedStackTrace stacktrace = recordedEvent.getStackTrace();\n-        List<RecordedFrame> frames = stacktrace.getFrames();\n-        assertFalse(frames.isEmpty(), \"Stacktrace frames was empty\");\n-        for (RecordedFrame frame : frames) {\n-            analyzeRecordedMethodDescriptor(frame.getMethod());\n-        }\n-\n-        assertTrue(isMainMethodDescriptorRecorded, \"main() method descriptor has never been recorded\");\n+    public static class MyEvent extends Event {\n@@ -81,6 +56,2 @@\n-    private static void analyzeRecordedMethodDescriptor(RecordedMethod method) {\n-\n-        String descr = method.getDescriptor();\n-        assertNotNull(descr, \"Method descriptor is null\");\n-        String name = method.getName();\n-        assertNotNull(name, \"Method name is null\");\n+    private static final String MAIN_METHOD_DESCRIPTOR = \"([Ljava\/lang\/String;)V\";\n+    private static final String MAIN_METHOD_NAME = \"main\";\n@@ -88,3 +59,30 @@\n-        if (name.equals(MAIN_METHOD_NAME) && descr.equals(MAIN_METHOD_DESCRIPTOR)) {\n-            assertFalse(isMainMethodDescriptorRecorded, \"main() method descriptor already recorded\");\n-            isMainMethodDescriptorRecorded = true;\n+    public static void main(String[] args) throws Exception  {\n+        try (Recording recording = new Recording()) {\n+            recording.enable(MyEvent.class);\n+            recording.start();\n+\n+            MyEvent event = new MyEvent();\n+            event.commit();\n+            recording.stop();\n+\n+            List<RecordedEvent> recordedEvents = Events.fromRecording(recording);\n+            assertEquals(1, recordedEvents.size(), \"Expected one event\");\n+            RecordedEvent recordedEvent = recordedEvents.get(0);\n+\n+            RecordedStackTrace stacktrace = recordedEvent.getStackTrace();\n+            List<RecordedFrame> frames = stacktrace.getFrames();\n+            assertFalse(frames.isEmpty(), \"Stacktrace frames was empty\");\n+\n+            boolean foundMainMethod = false;\n+            for (RecordedFrame frame : frames) {\n+                RecordedMethod method = frame.getMethod();\n+                String descr = method.getDescriptor();\n+                assertNotNull(descr, \"Method descriptor is null\");\n+                String name = method.getName();\n+                assertNotNull(name, \"Method name is null\");\n+                if (name.equals(MAIN_METHOD_NAME) && descr.equals(MAIN_METHOD_DESCRIPTOR)) {\n+                    assertFalse(foundMainMethod, \"main() method descriptor already recorded\");\n+                    foundMainMethod = true;\n+                }\n+            }\n+            assertTrue(foundMainMethod, \"main() method descriptor has never been recorded\");\n@@ -93,4 +91,0 @@\n-\n-    public static class MyEvent extends Event {\n-    }\n-\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordedMethodDescriptor.java","additions":35,"deletions":41,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -380,8 +380,9 @@\n-        Recording r = new Recording();\n-        r.start();\n-        EventWithValues t = new EventWithValues();\n-        t.commit();\n-        r.stop();\n-        List<RecordedEvent> events = Events.fromRecording(r);\n-        Events.hasEvents(events);\n-        return events.get(0);\n+        try (Recording r = new Recording()) {\n+            r.start();\n+            EventWithValues t = new EventWithValues();\n+            t.commit();\n+            r.stop();\n+            List<RecordedEvent> events = Events.fromRecording(r);\n+            Events.hasEvents(events);\n+            return events.get(0);\n+        }\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordedObject.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -77,14 +77,0 @@\n-\n-        \/\/ create some recording data\n-        Recording r = new Recording();\n-        r.enable(TestEvent1.class).withoutStackTrace();\n-        r.enable(TestEvent2.class).withoutStackTrace();\n-        r.enable(TestEvent3.class).withoutStackTrace();\n-        r.start();\n-        TestEvent1 t1 = new TestEvent1();\n-        t1.commit();\n-        TestEvent2 t2 = new TestEvent2();\n-        t2.commit();\n-        TestEvent3 t3 = new TestEvent3();\n-        t3.commit();\n-        r.stop();\n@@ -92,2 +78,0 @@\n-        r.dump(valid);\n-        r.close();\n@@ -95,0 +79,15 @@\n+        \/\/ create some recording data\n+        try (Recording r = new Recording()) {\n+            r.enable(TestEvent1.class).withoutStackTrace();\n+            r.enable(TestEvent2.class).withoutStackTrace();\n+            r.enable(TestEvent3.class).withoutStackTrace();\n+            r.start();\n+            TestEvent1 t1 = new TestEvent1();\n+            t1.commit();\n+            TestEvent2 t2 = new TestEvent2();\n+            t2.commit();\n+            TestEvent3 t3 = new TestEvent3();\n+            t3.commit();\n+            r.stop();\n+            r.dump(valid);\n+        }\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordingFile.java","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -47,9 +47,6 @@\n-        Recording r = new Recording();\n-        r.start();\n-        SimpleEvent t = new SimpleEvent();\n-        t.commit();\n-        r.stop();\n-        RecordingFile file = Events.copyTo(r);\n-        r.close();\n-        file.readEvent();\n-        try {\n+        try (Recording r = new Recording()) {\n+            r.start();\n+            SimpleEvent t = new SimpleEvent();\n+            t.commit();\n+            r.stop();\n+            RecordingFile file = Events.copyTo(r);\n@@ -57,3 +54,6 @@\n-            Asserts.fail(\"Expected EOFException not thrown\");\n-        } catch (EOFException x) {\n-            \/\/ OK, as expected\n+            try {\n+                file.readEvent();\n+                Asserts.fail(\"Expected EOFException not thrown\");\n+            } catch (EOFException x) {\n+                \/\/ OK, as expected\n+            }\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordingFileReadEventEof.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -52,8 +52,8 @@\n-        Recording r = new Recording();\n-        r.start();\n-        \/\/ Commit a single event to the recording\n-        MyEvent event = new MyEvent();\n-        event.commit();\n-        r.stop();\n-        List<RecordedEvent> events = Events.fromRecording(r);\n-        Events.hasEvents(events);\n+        try (Recording r = new Recording()) {\n+            r.start();\n+            \/\/ Commit a single event to the recording\n+            MyEvent event = new MyEvent();\n+            event.commit();\n+            r.stop();\n+            List<RecordedEvent> events = Events.fromRecording(r);\n+            Events.hasEvents(events);\n@@ -61,7 +61,5 @@\n-        \/\/ Should be 1 event only\n-        Asserts.assertEquals(events.size(), 1);\n-\n-        RecordedEvent recordedEvent = events.get(0);\n-\n-        \/\/ Event description should be the same\n-        Asserts.assertEquals(recordedEvent.getEventType().getDescription(), \"MyDescription\");\n+            \/\/ Should be 1 event only\n+            Asserts.assertEquals(events.size(), 1);\n+            RecordedEvent recordedEvent = events.get(0);\n+            Asserts.assertEquals(recordedEvent.getEventType().getDescription(), \"MyDescription\");\n+        }\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestSingleRecordedEvent.java","additions":13,"deletions":15,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-\n@@ -58,10 +57,6 @@\n-        Recording r = new Recording();\n-        r.enable(MyEvent.class).withoutStackTrace();\n-        r.start();\n-        MyEvent event = new MyEvent();\n-        event.commit();\n-        r.stop();\n-\n-        List<RecordedEvent> events = Events.fromRecording(r);\n-        Events.hasEvents(events);\n-        RecordedEvent recordedEvent = events.get(0);\n+        try (Recording r = new Recording()) {\n+            r.enable(MyEvent.class).withoutStackTrace();\n+            r.start();\n+            MyEvent event = new MyEvent();\n+            event.commit();\n+            r.stop();\n@@ -69,7 +64,11 @@\n-        for (ValueDescriptor desc : recordedEvent.getFields()) {\n-            if (\"myValue\".equals(desc.getName())) {\n-                Asserts.assertEquals(desc.getLabel(), \"myLabel\");\n-                Asserts.assertEquals(desc.getDescription(), \"myDescription\");\n-                Asserts.assertEquals(desc.getTypeName(), int.class.getName());\n-                Asserts.assertFalse(desc.isArray());\n-                Asserts.assertNull(desc.getContentType());\n+            List<RecordedEvent> events = Events.fromRecording(r);\n+            Events.hasEvents(events);\n+            RecordedEvent recordedEvent = events.get(0);\n+            for (ValueDescriptor desc : recordedEvent.getFields()) {\n+                if (\"myValue\".equals(desc.getName())) {\n+                    Asserts.assertEquals(desc.getLabel(), \"myLabel\");\n+                    Asserts.assertEquals(desc.getDescription(), \"myDescription\");\n+                    Asserts.assertEquals(desc.getTypeName(), int.class.getName());\n+                    Asserts.assertFalse(desc.isArray());\n+                    Asserts.assertNull(desc.getContentType());\n+                }\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestValueDescriptorRecorded.java","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"}]}