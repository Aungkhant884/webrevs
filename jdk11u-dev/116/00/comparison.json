{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.AfterTest;\n@@ -59,8 +58,0 @@\n-    private DummyWebSocketServer server;\n-    private WebSocket webSocket;\n-\n-    @AfterTest\n-    public void cleanup() {\n-        server.close();\n-        webSocket.abort();\n-    }\n@@ -73,8 +64,20 @@\n-        server = Support.serverWithCannedData(bytes);\n-        server.open();\n-        \/\/ messages are available\n-        MockListener listener = new MockListener() {\n-            @Override\n-            protected void onOpen0(WebSocket webSocket) {\n-                \/\/ unbounded request\n-                webSocket.request(Long.MAX_VALUE);\n+        try (var server = Support.serverWithCannedData(bytes)) {\n+            server.open();\n+            \/\/ messages are available\n+            MockListener listener = new MockListener() {\n+                @Override\n+                protected void onOpen0(WebSocket webSocket) {\n+                    \/\/ unbounded request\n+                    webSocket.request(Long.MAX_VALUE);\n+                    webSocket.abort();\n+                }\n+            };\n+            var webSocket = newHttpClient().newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), listener)\n+                    .join();\n+            try {\n+                TimeUnit.SECONDS.sleep(5);\n+                List<MockListener.Invocation> inv = listener.invocationsSoFar();\n+                \/\/ no more invocations after onOpen as WebSocket was aborted\n+                assertEquals(inv, List.of(MockListener.Invocation.onOpen(webSocket)));\n+            } finally {\n@@ -83,8 +86,1 @@\n-        };\n-        webSocket = newHttpClient().newWebSocketBuilder()\n-                .buildAsync(server.getURI(), listener)\n-                .join();\n-        TimeUnit.SECONDS.sleep(5);\n-        List<MockListener.Invocation> inv = listener.invocationsSoFar();\n-        \/\/ no more invocations after onOpen as WebSocket was aborted\n-        assertEquals(inv, List.of(MockListener.Invocation.onOpen(webSocket)));\n+        }\n@@ -99,8 +95,8 @@\n-        server = Support.serverWithCannedData(bytes);\n-        server.open();\n-        MockListener listener = new MockListener() {\n-            @Override\n-            protected void onOpen0(WebSocket webSocket) {\n-                \/\/ unbounded request\n-                webSocket.request(Long.MAX_VALUE);\n-            }\n+        try (var server = Support.serverWithCannedData(bytes)) {\n+            server.open();\n+            MockListener listener = new MockListener() {\n+                @Override\n+                protected void onOpen0(WebSocket webSocket) {\n+                    \/\/ unbounded request\n+                    webSocket.request(Long.MAX_VALUE);\n+                }\n@@ -108,4 +104,20 @@\n-            @Override\n-            protected CompletionStage<?> onText0(WebSocket webSocket,\n-                                                 CharSequence message,\n-                                                 boolean last) {\n+                @Override\n+                protected CompletionStage<?> onText0(WebSocket webSocket,\n+                                                     CharSequence message,\n+                                                     boolean last) {\n+                    webSocket.abort();\n+                    return super.onText0(webSocket, message, last);\n+                }\n+            };\n+            var webSocket = newHttpClient().newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), listener)\n+                    .join();\n+            try {\n+                TimeUnit.SECONDS.sleep(5);\n+                List<MockListener.Invocation> inv = listener.invocationsSoFar();\n+                \/\/ no more invocations after onOpen, onBinary as WebSocket was aborted\n+                List<MockListener.Invocation> expected = List.of(\n+                        MockListener.Invocation.onOpen(webSocket),\n+                        MockListener.Invocation.onText(webSocket, \"\", true));\n+                assertEquals(inv, expected);\n+            } finally {\n@@ -113,1 +125,0 @@\n-                return super.onText0(webSocket, message, last);\n@@ -115,11 +126,1 @@\n-        };\n-        webSocket = newHttpClient().newWebSocketBuilder()\n-                .buildAsync(server.getURI(), listener)\n-                .join();\n-        TimeUnit.SECONDS.sleep(5);\n-        List<MockListener.Invocation> inv = listener.invocationsSoFar();\n-        \/\/ no more invocations after onOpen, onBinary as WebSocket was aborted\n-        List<MockListener.Invocation> expected = List.of(\n-                MockListener.Invocation.onOpen(webSocket),\n-                MockListener.Invocation.onText(webSocket, \"\", true));\n-        assertEquals(inv, expected);\n+        }\n@@ -134,8 +135,8 @@\n-        server = Support.serverWithCannedData(bytes);\n-        server.open();\n-        MockListener listener = new MockListener() {\n-            @Override\n-            protected void onOpen0(WebSocket webSocket) {\n-                \/\/ unbounded request\n-                webSocket.request(Long.MAX_VALUE);\n-            }\n+        try (var server = Support.serverWithCannedData(bytes)) {\n+            server.open();\n+            MockListener listener = new MockListener() {\n+                @Override\n+                protected void onOpen0(WebSocket webSocket) {\n+                    \/\/ unbounded request\n+                    webSocket.request(Long.MAX_VALUE);\n+                }\n@@ -143,4 +144,20 @@\n-            @Override\n-            protected CompletionStage<?> onBinary0(WebSocket webSocket,\n-                                                   ByteBuffer message,\n-                                                   boolean last) {\n+                @Override\n+                protected CompletionStage<?> onBinary0(WebSocket webSocket,\n+                                                       ByteBuffer message,\n+                                                       boolean last) {\n+                    webSocket.abort();\n+                    return super.onBinary0(webSocket, message, last);\n+                }\n+            };\n+            var webSocket = newHttpClient().newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), listener)\n+                    .join();\n+            try {\n+                TimeUnit.SECONDS.sleep(5);\n+                List<MockListener.Invocation> inv = listener.invocationsSoFar();\n+                \/\/ no more invocations after onOpen, onBinary as WebSocket was aborted\n+                List<MockListener.Invocation> expected = List.of(\n+                        MockListener.Invocation.onOpen(webSocket),\n+                        MockListener.Invocation.onBinary(webSocket, ByteBuffer.allocate(0), true));\n+                assertEquals(inv, expected);\n+            } finally {\n@@ -148,1 +165,0 @@\n-                return super.onBinary0(webSocket, message, last);\n@@ -150,11 +166,1 @@\n-        };\n-        webSocket = newHttpClient().newWebSocketBuilder()\n-                .buildAsync(server.getURI(), listener)\n-                .join();\n-        TimeUnit.SECONDS.sleep(5);\n-        List<MockListener.Invocation> inv = listener.invocationsSoFar();\n-        \/\/ no more invocations after onOpen, onBinary as WebSocket was aborted\n-        List<MockListener.Invocation> expected = List.of(\n-                MockListener.Invocation.onOpen(webSocket),\n-                MockListener.Invocation.onBinary(webSocket, ByteBuffer.allocate(0), true));\n-        assertEquals(inv, expected);\n+        }\n@@ -169,8 +175,8 @@\n-        server = Support.serverWithCannedData(bytes);\n-        server.open();\n-        MockListener listener = new MockListener() {\n-            @Override\n-            protected void onOpen0(WebSocket webSocket) {\n-                \/\/ unbounded request\n-                webSocket.request(Long.MAX_VALUE);\n-            }\n+        try (var server = Support.serverWithCannedData(bytes)) {\n+            server.open();\n+            MockListener listener = new MockListener() {\n+                @Override\n+                protected void onOpen0(WebSocket webSocket) {\n+                    \/\/ unbounded request\n+                    webSocket.request(Long.MAX_VALUE);\n+                }\n@@ -178,3 +184,19 @@\n-            @Override\n-            protected CompletionStage<?> onPing0(WebSocket webSocket,\n-                                                 ByteBuffer message) {\n+                @Override\n+                protected CompletionStage<?> onPing0(WebSocket webSocket,\n+                                                     ByteBuffer message) {\n+                    webSocket.abort();\n+                    return super.onPing0(webSocket, message);\n+                }\n+            };\n+            var webSocket = newHttpClient().newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), listener)\n+                    .join();\n+            try {\n+                TimeUnit.SECONDS.sleep(5);\n+                List<MockListener.Invocation> inv = listener.invocationsSoFar();\n+                \/\/ no more invocations after onOpen, onPing as WebSocket was aborted\n+                List<MockListener.Invocation> expected = List.of(\n+                        MockListener.Invocation.onOpen(webSocket),\n+                        MockListener.Invocation.onPing(webSocket, ByteBuffer.allocate(0)));\n+                assertEquals(inv, expected);\n+            } finally {\n@@ -182,1 +204,0 @@\n-                return super.onPing0(webSocket, message);\n@@ -184,11 +205,1 @@\n-        };\n-        webSocket = newHttpClient().newWebSocketBuilder()\n-                .buildAsync(server.getURI(), listener)\n-                .join();\n-        TimeUnit.SECONDS.sleep(5);\n-        List<MockListener.Invocation> inv = listener.invocationsSoFar();\n-        \/\/ no more invocations after onOpen, onPing as WebSocket was aborted\n-        List<MockListener.Invocation> expected = List.of(\n-                MockListener.Invocation.onOpen(webSocket),\n-                MockListener.Invocation.onPing(webSocket, ByteBuffer.allocate(0)));\n-        assertEquals(inv, expected);\n+        }\n@@ -203,8 +214,8 @@\n-        server = Support.serverWithCannedData(bytes);\n-        server.open();\n-        MockListener listener = new MockListener() {\n-            @Override\n-            protected void onOpen0(WebSocket webSocket) {\n-                \/\/ unbounded request\n-                webSocket.request(Long.MAX_VALUE);\n-            }\n+        try (var server = Support.serverWithCannedData(bytes)) {\n+            server.open();\n+            MockListener listener = new MockListener() {\n+                @Override\n+                protected void onOpen0(WebSocket webSocket) {\n+                    \/\/ unbounded request\n+                    webSocket.request(Long.MAX_VALUE);\n+                }\n@@ -212,3 +223,19 @@\n-            @Override\n-            protected CompletionStage<?> onPong0(WebSocket webSocket,\n-                                                 ByteBuffer message) {\n+                @Override\n+                protected CompletionStage<?> onPong0(WebSocket webSocket,\n+                                                     ByteBuffer message) {\n+                    webSocket.abort();\n+                    return super.onPong0(webSocket, message);\n+                }\n+            };\n+            var webSocket = newHttpClient().newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), listener)\n+                    .join();\n+            try {\n+                TimeUnit.SECONDS.sleep(5);\n+                List<MockListener.Invocation> inv = listener.invocationsSoFar();\n+                \/\/ no more invocations after onOpen, onPong as WebSocket was aborted\n+                List<MockListener.Invocation> expected = List.of(\n+                        MockListener.Invocation.onOpen(webSocket),\n+                        MockListener.Invocation.onPong(webSocket, ByteBuffer.allocate(0)));\n+                assertEquals(inv, expected);\n+            } finally {\n@@ -216,1 +243,0 @@\n-                return super.onPong0(webSocket, message);\n@@ -218,11 +244,1 @@\n-        };\n-        webSocket = newHttpClient().newWebSocketBuilder()\n-                .buildAsync(server.getURI(), listener)\n-                .join();\n-        TimeUnit.SECONDS.sleep(5);\n-        List<MockListener.Invocation> inv = listener.invocationsSoFar();\n-        \/\/ no more invocations after onOpen, onPong as WebSocket was aborted\n-        List<MockListener.Invocation> expected = List.of(\n-                MockListener.Invocation.onOpen(webSocket),\n-                MockListener.Invocation.onPong(webSocket, ByteBuffer.allocate(0)));\n-        assertEquals(inv, expected);\n+        }\n@@ -237,8 +253,8 @@\n-        server = Support.serverWithCannedData(bytes);\n-        server.open();\n-        MockListener listener = new MockListener() {\n-            @Override\n-            protected void onOpen0(WebSocket webSocket) {\n-                \/\/ unbounded request\n-                webSocket.request(Long.MAX_VALUE);\n-            }\n+        try (var server = Support.serverWithCannedData(bytes)) {\n+            server.open();\n+            MockListener listener = new MockListener() {\n+                @Override\n+                protected void onOpen0(WebSocket webSocket) {\n+                    \/\/ unbounded request\n+                    webSocket.request(Long.MAX_VALUE);\n+                }\n@@ -246,4 +262,20 @@\n-            @Override\n-            protected CompletionStage<?> onClose0(WebSocket webSocket,\n-                                                  int statusCode,\n-                                                  String reason) {\n+                @Override\n+                protected CompletionStage<?> onClose0(WebSocket webSocket,\n+                                                      int statusCode,\n+                                                      String reason) {\n+                    webSocket.abort();\n+                    return super.onClose0(webSocket, statusCode, reason);\n+                }\n+            };\n+            var webSocket = newHttpClient().newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), listener)\n+                    .join();\n+            try {\n+                TimeUnit.SECONDS.sleep(5);\n+                List<MockListener.Invocation> inv = listener.invocationsSoFar();\n+                \/\/ no more invocations after onOpen, onClose\n+                List<MockListener.Invocation> expected = List.of(\n+                        MockListener.Invocation.onOpen(webSocket),\n+                        MockListener.Invocation.onClose(webSocket, 1005, \"\"));\n+                assertEquals(inv, expected);\n+            } finally {\n@@ -251,1 +283,0 @@\n-                return super.onClose0(webSocket, statusCode, reason);\n@@ -253,11 +284,1 @@\n-        };\n-        webSocket = newHttpClient().newWebSocketBuilder()\n-                .buildAsync(server.getURI(), listener)\n-                .join();\n-        TimeUnit.SECONDS.sleep(5);\n-        List<MockListener.Invocation> inv = listener.invocationsSoFar();\n-        \/\/ no more invocations after onOpen, onClose\n-        List<MockListener.Invocation> expected = List.of(\n-                MockListener.Invocation.onOpen(webSocket),\n-                MockListener.Invocation.onClose(webSocket, 1005, \"\"));\n-        assertEquals(inv, expected);\n+        }\n@@ -274,8 +295,8 @@\n-        server = Support.serverWithCannedData(bytes);\n-        server.open();\n-        MockListener listener = new MockListener() {\n-            @Override\n-            protected void onOpen0(WebSocket webSocket) {\n-                \/\/ unbounded request\n-                webSocket.request(Long.MAX_VALUE);\n-            }\n+        try (var server = Support.serverWithCannedData(bytes)) {\n+            server.open();\n+            MockListener listener = new MockListener() {\n+                @Override\n+                protected void onOpen0(WebSocket webSocket) {\n+                    \/\/ unbounded request\n+                    webSocket.request(Long.MAX_VALUE);\n+                }\n@@ -283,2 +304,19 @@\n-            @Override\n-            protected void onError0(WebSocket webSocket, Throwable error) {\n+                @Override\n+                protected void onError0(WebSocket webSocket, Throwable error) {\n+                    webSocket.abort();\n+                    super.onError0(webSocket, error);\n+                }\n+            };\n+            var webSocket = newHttpClient().newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), listener)\n+                    .join();\n+            try {\n+                TimeUnit.SECONDS.sleep(5);\n+                List<MockListener.Invocation> inv = listener.invocationsSoFar();\n+                \/\/ no more invocations after onOpen, onError\n+                List<MockListener.Invocation> expected = List.of(\n+                        MockListener.Invocation.onOpen(webSocket),\n+                        MockListener.Invocation.onError(webSocket, ProtocolException.class));\n+                System.out.println(\"actual invocations:\" + Arrays.toString(inv.toArray()));\n+                assertEquals(inv, expected);\n+            } finally {\n@@ -286,1 +324,0 @@\n-                super.onError0(webSocket, error);\n@@ -288,12 +325,1 @@\n-        };\n-        webSocket = newHttpClient().newWebSocketBuilder()\n-                .buildAsync(server.getURI(), listener)\n-                .join();\n-        TimeUnit.SECONDS.sleep(5);\n-        List<MockListener.Invocation> inv = listener.invocationsSoFar();\n-        \/\/ no more invocations after onOpen, onError\n-        List<MockListener.Invocation> expected = List.of(\n-                MockListener.Invocation.onOpen(webSocket),\n-                MockListener.Invocation.onError(webSocket, ProtocolException.class));\n-        System.out.println(\"actual invocations:\" + Arrays.toString(inv.toArray()));\n-        assertEquals(inv, expected);\n+        }\n@@ -355,2 +381,2 @@\n-        server = Support.serverWithCannedData(bytes);\n-        server.open();\n+        try (var server = Support.serverWithCannedData(bytes)) {\n+            server.open();\n@@ -358,11 +384,59 @@\n-        WebSocket ws = newHttpClient()\n-                .newWebSocketBuilder()\n-                .buildAsync(server.getURI(), listener)\n-                .join();\n-        for (int i = 0; i < 3; i++) {\n-            System.out.printf(\"iteration #%s%n\", i);\n-            \/\/ after the first abort() each consecutive one must be a no-op,\n-            \/\/ moreover, query methods should continue to return consistent\n-            \/\/ values\n-            for (int j = 0; j < 3; j++) {\n-                System.out.printf(\"abort #%s%n\", j);\n+            WebSocket ws = newHttpClient()\n+                    .newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), listener)\n+                    .join();\n+            try {\n+                for (int i = 0; i < 3; i++) {\n+                    System.out.printf(\"iteration #%s%n\", i);\n+                    \/\/ after the first abort() each consecutive one must be a no-op,\n+                    \/\/ moreover, query methods should continue to return consistent\n+                    \/\/ values\n+                    for (int j = 0; j < 3; j++) {\n+                        System.out.printf(\"abort #%s%n\", j);\n+                        ws.abort();\n+                        assertTrue(ws.isInputClosed());\n+                        assertTrue(ws.isOutputClosed());\n+                        assertEquals(ws.getSubprotocol(), \"\");\n+                    }\n+                    \/\/ at this point valid requests MUST be a no-op:\n+                    for (int j = 0; j < 3; j++) {\n+                        System.out.printf(\"request #%s%n\", j);\n+                        ws.request(1);\n+                        ws.request(2);\n+                        ws.request(8);\n+                        ws.request(Integer.MAX_VALUE);\n+                        ws.request(Long.MAX_VALUE);\n+                        \/\/ invalid requests MUST throw IAE:\n+                        assertThrows(IAE, () -> ws.request(Integer.MIN_VALUE));\n+                        assertThrows(IAE, () -> ws.request(Long.MIN_VALUE));\n+                        assertThrows(IAE, () -> ws.request(-1));\n+                        assertThrows(IAE, () -> ws.request(0));\n+                    }\n+                }\n+                \/\/ even though there is a bunch of messages readily available on the\n+                \/\/ wire we shouldn't have received any of them as we aborted before\n+                \/\/ the first request\n+                try {\n+                    messageReceived.get(5, TimeUnit.SECONDS);\n+                    fail();\n+                } catch (TimeoutException expected) {\n+                    System.out.println(\"Finished waiting\");\n+                }\n+                for (int i = 0; i < 3; i++) {\n+                    System.out.printf(\"send #%s%n\", i);\n+                    Support.assertFails(IOE, ws.sendText(\"text!\", false));\n+                    Support.assertFails(IOE, ws.sendText(\"text!\", true));\n+                    Support.assertFails(IOE, ws.sendBinary(ByteBuffer.allocate(16), false));\n+                    Support.assertFails(IOE, ws.sendBinary(ByteBuffer.allocate(16), true));\n+                    Support.assertFails(IOE, ws.sendPing(ByteBuffer.allocate(16)));\n+                    Support.assertFails(IOE, ws.sendPong(ByteBuffer.allocate(16)));\n+                    Support.assertFails(IOE, ws.sendClose(NORMAL_CLOSURE, \"a reason\"));\n+                    assertThrows(NPE, () -> ws.sendText(null, false));\n+                    assertThrows(NPE, () -> ws.sendText(null, true));\n+                    assertThrows(NPE, () -> ws.sendBinary(null, false));\n+                    assertThrows(NPE, () -> ws.sendBinary(null, true));\n+                    assertThrows(NPE, () -> ws.sendPing(null));\n+                    assertThrows(NPE, () -> ws.sendPong(null));\n+                    assertThrows(NPE, () -> ws.sendClose(NORMAL_CLOSURE, null));\n+                }\n+            } finally {\n@@ -370,17 +444,0 @@\n-                assertTrue(ws.isInputClosed());\n-                assertTrue(ws.isOutputClosed());\n-                assertEquals(ws.getSubprotocol(), \"\");\n-            }\n-            \/\/ at this point valid requests MUST be a no-op:\n-            for (int j = 0; j < 3; j++) {\n-                System.out.printf(\"request #%s%n\", j);\n-                ws.request(1);\n-                ws.request(2);\n-                ws.request(8);\n-                ws.request(Integer.MAX_VALUE);\n-                ws.request(Long.MAX_VALUE);\n-                \/\/ invalid requests MUST throw IAE:\n-                assertThrows(IAE, () -> ws.request(Integer.MIN_VALUE));\n-                assertThrows(IAE, () -> ws.request(Long.MIN_VALUE));\n-                assertThrows(IAE, () -> ws.request(-1));\n-                assertThrows(IAE, () -> ws.request(0));\n@@ -389,26 +446,0 @@\n-        \/\/ even though there is a bunch of messages readily available on the\n-        \/\/ wire we shouldn't have received any of them as we aborted before\n-        \/\/ the first request\n-        try {\n-            messageReceived.get(5, TimeUnit.SECONDS);\n-            fail();\n-        } catch (TimeoutException expected) {\n-            System.out.println(\"Finished waiting\");\n-        }\n-        for (int i = 0; i < 3; i++) {\n-            System.out.printf(\"send #%s%n\", i);\n-            Support.assertFails(IOE, ws.sendText(\"text!\", false));\n-            Support.assertFails(IOE, ws.sendText(\"text!\", true));\n-            Support.assertFails(IOE, ws.sendBinary(ByteBuffer.allocate(16), false));\n-            Support.assertFails(IOE, ws.sendBinary(ByteBuffer.allocate(16), true));\n-            Support.assertFails(IOE, ws.sendPing(ByteBuffer.allocate(16)));\n-            Support.assertFails(IOE, ws.sendPong(ByteBuffer.allocate(16)));\n-            Support.assertFails(IOE, ws.sendClose(NORMAL_CLOSURE, \"a reason\"));\n-            assertThrows(NPE, () -> ws.sendText(null, false));\n-            assertThrows(NPE, () -> ws.sendText(null, true));\n-            assertThrows(NPE, () -> ws.sendBinary(null, false));\n-            assertThrows(NPE, () -> ws.sendBinary(null, true));\n-            assertThrows(NPE, () -> ws.sendPing(null));\n-            assertThrows(NPE, () -> ws.sendPong(null));\n-            assertThrows(NPE, () -> ws.sendClose(NORMAL_CLOSURE, null));\n-        }\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/Abort.java","additions":254,"deletions":223,"binary":false,"changes":477,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-\n-import org.testng.annotations.AfterTest;\n@@ -49,10 +47,0 @@\n-\n-    private DummyWebSocketServer server;\n-    private WebSocket webSocket;\n-\n-    @AfterTest\n-    public void cleanup() {\n-        server.close();\n-        webSocket.abort();\n-    }\n-\n@@ -75,6 +63,28 @@\n-        server = Support.serverWithCannedData(bytes);\n-        server.open();\n-        MockListener listener = new MockListener() {\n-            @Override\n-            protected void onOpen0(WebSocket webSocket) {\n-                \/* request nothing *\/\n+        try (var server = Support.serverWithCannedData(bytes)) {\n+            server.open();\n+            MockListener listener = new MockListener() {\n+                @Override\n+                protected void onOpen0(WebSocket webSocket) {\n+                    \/* request nothing *\/\n+                }\n+            };\n+            var webSocket = newHttpClient()\n+                    .newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), listener)\n+                    .join();\n+            try {\n+                webSocket.sendClose(WebSocket.NORMAL_CLOSURE, \"ok\").join();\n+                \/\/ now request all messages available\n+                webSocket.request(Long.MAX_VALUE);\n+                List<MockListener.Invocation> actual = listener.invocations();\n+                ByteBuffer hello = ByteBuffer.wrap(\"hello?\".getBytes(StandardCharsets.UTF_8));\n+                ByteBuffer empty = ByteBuffer.allocate(0);\n+                List<MockListener.Invocation> expected = List.of(\n+                        MockListener.Invocation.onOpen(webSocket),\n+                        MockListener.Invocation.onPing(webSocket, empty),\n+                        MockListener.Invocation.onPing(webSocket, hello),\n+                        MockListener.Invocation.onClose(webSocket, 1005, \"\")\n+                );\n+                assertEquals(actual, expected);\n+            } finally {\n+                webSocket.abort();\n@@ -82,19 +92,1 @@\n-        };\n-        webSocket = newHttpClient()\n-                .newWebSocketBuilder()\n-                .buildAsync(server.getURI(), listener)\n-                .join();\n-\n-        webSocket.sendClose(WebSocket.NORMAL_CLOSURE, \"ok\").join();\n-        \/\/ now request all messages available\n-        webSocket.request(Long.MAX_VALUE);\n-        List<MockListener.Invocation> actual = listener.invocations();\n-        ByteBuffer hello = ByteBuffer.wrap(\"hello?\".getBytes(StandardCharsets.UTF_8));\n-        ByteBuffer empty = ByteBuffer.allocate(0);\n-        List<MockListener.Invocation> expected = List.of(\n-                MockListener.Invocation.onOpen(webSocket),\n-                MockListener.Invocation.onPing(webSocket, empty),\n-                MockListener.Invocation.onPing(webSocket, hello),\n-                MockListener.Invocation.onClose(webSocket, 1005, \"\")\n-        );\n-        assertEquals(actual, expected);\n+        }\n@@ -134,37 +126,90 @@\n-        server = Support.serverWithCannedData(buffer.array());\n-        server.open();\n-        MockListener listener = new MockListener();\n-        webSocket = newHttpClient()\n-                .newWebSocketBuilder()\n-                .buildAsync(server.getURI(), listener)\n-                .join();\n-        List<MockListener.Invocation> inv = listener.invocations();\n-        assertEquals(inv.size(), nPings + 2); \/\/ n * onPing + onOpen + onClose\n-\n-        ByteBuffer data = server.read();\n-        Frame.Reader reader = new Frame.Reader();\n-\n-        Frame.Consumer consumer = new Frame.Consumer() {\n-\n-            ByteBuffer number = ByteBuffer.allocate(4);\n-            Frame.Masker masker = new Frame.Masker();\n-            int i = -1;\n-            boolean closed;\n-\n-            @Override\n-            public void fin(boolean value) { assertTrue(value); }\n-\n-            @Override\n-            public void rsv1(boolean value) { assertFalse(value); }\n-\n-            @Override\n-            public void rsv2(boolean value) { assertFalse(value); }\n-\n-            @Override\n-            public void rsv3(boolean value) { assertFalse(value); }\n-\n-            @Override\n-            public void opcode(Frame.Opcode value) {\n-                if (value == Frame.Opcode.CLOSE) {\n-                    closed = true;\n-                    return;\n+        try (var server = Support.serverWithCannedData(buffer.array())) {\n+            server.open();\n+            MockListener listener = new MockListener();\n+            var webSocket = newHttpClient()\n+                    .newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), listener)\n+                    .join();\n+            try {\n+                List<MockListener.Invocation> inv = listener.invocations();\n+                assertEquals(inv.size(), nPings + 2); \/\/ n * onPing + onOpen + onClose\n+\n+                ByteBuffer data = server.read();\n+                Frame.Reader reader = new Frame.Reader();\n+\n+                Frame.Consumer consumer = new Frame.Consumer() {\n+\n+                    ByteBuffer number = ByteBuffer.allocate(4);\n+                    Frame.Masker masker = new Frame.Masker();\n+                    int i = -1;\n+                    boolean closed;\n+\n+                    @Override\n+                    public void fin(boolean value) {\n+                        assertTrue(value);\n+                    }\n+\n+                    @Override\n+                    public void rsv1(boolean value) {\n+                        assertFalse(value);\n+                    }\n+\n+                    @Override\n+                    public void rsv2(boolean value) {\n+                        assertFalse(value);\n+                    }\n+\n+                    @Override\n+                    public void rsv3(boolean value) {\n+                        assertFalse(value);\n+                    }\n+\n+                    @Override\n+                    public void opcode(Frame.Opcode value) {\n+                        if (value == Frame.Opcode.CLOSE) {\n+                            closed = true;\n+                            return;\n+                        }\n+                        assertEquals(value, Frame.Opcode.PONG);\n+                    }\n+\n+                    @Override\n+                    public void mask(boolean value) {\n+                        assertTrue(value);\n+                    }\n+\n+                    @Override\n+                    public void payloadLen(long value) {\n+                        if (!closed)\n+                            assertEquals(value, 4);\n+                    }\n+\n+                    @Override\n+                    public void maskingKey(int value) {\n+                        masker.mask(value);\n+                    }\n+\n+                    @Override\n+                    public void payloadData(ByteBuffer src) {\n+                        masker.transferMasking(src, number);\n+                        if (closed) {\n+                            return;\n+                        }\n+                        number.flip();\n+                        int n = number.getInt();\n+                        System.out.printf(\"pong number=%s%n\", n);\n+                        number.clear();\n+                        \/\/ a Pong with the number less than the maximum of Pongs already\n+                        \/\/ received MUST never be received\n+                        if (i >= n) {\n+                            fail(String.format(\"i=%s, n=%s\", i, n));\n+                        }\n+                        i = n;\n+                    }\n+\n+                    @Override\n+                    public void endFrame() {\n+                    }\n+                };\n+                while (data.hasRemaining()) {\n+                    reader.readFrame(data, consumer);\n@@ -172,1 +217,2 @@\n-                assertEquals(value, Frame.Opcode.PONG);\n+            } finally {\n+                webSocket.abort();\n@@ -174,38 +220,0 @@\n-\n-            @Override\n-            public void mask(boolean value) { assertTrue(value); }\n-\n-            @Override\n-            public void payloadLen(long value) {\n-                if (!closed)\n-                    assertEquals(value, 4);\n-            }\n-\n-            @Override\n-            public void maskingKey(int value) {\n-                masker.mask(value);\n-            }\n-\n-            @Override\n-            public void payloadData(ByteBuffer src) {\n-                masker.transferMasking(src, number);\n-                if (closed) {\n-                    return;\n-                }\n-                number.flip();\n-                int n = number.getInt();\n-                System.out.printf(\"pong number=%s%n\", n);\n-                number.clear();\n-                \/\/ a Pong with the number less than the maximum of Pongs already\n-                \/\/ received MUST never be received\n-                if (i >= n) {\n-                    fail(String.format(\"i=%s, n=%s\", i, n));\n-                }\n-                i = n;\n-            }\n-\n-            @Override\n-            public void endFrame() { }\n-        };\n-        while (data.hasRemaining()) {\n-            reader.readFrame(data, consumer);\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/AutomaticPong.java","additions":122,"deletions":114,"binary":false,"changes":236,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.testng.annotations.AfterTest;\n@@ -49,9 +48,0 @@\n-    private DummyWebSocketServer server;\n-    private WebSocket webSocket;\n-\n-    @AfterTest\n-    public void cleanup() {\n-        server.close();\n-        webSocket.abort();\n-    }\n-\n@@ -60,5 +50,13 @@\n-        server = new DummyWebSocketServer();\n-        server.open();\n-        webSocket = newBuilder().proxy(NO_PROXY).build().newWebSocketBuilder()\n-                .buildAsync(server.getURI(), new WebSocket.Listener() { })\n-                .join();\n+        try (var server = new DummyWebSocketServer()) {\n+            server.open();\n+            var webSocket = newBuilder().proxy(NO_PROXY).build().newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), new WebSocket.Listener() { })\n+                    .join();\n+            try {\n+                assertThrows(NPE, () -> webSocket.sendText(null, false));\n+                assertThrows(NPE, () -> webSocket.sendText(null, true));\n+                assertThrows(NPE, () -> webSocket.sendBinary(null, false));\n+                assertThrows(NPE, () -> webSocket.sendBinary(null, true));\n+                assertThrows(NPE, () -> webSocket.sendPing(null));\n+                assertThrows(NPE, () -> webSocket.sendPong(null));\n+                assertThrows(NPE, () -> webSocket.sendClose(NORMAL_CLOSURE, null));\n@@ -66,7 +64,1 @@\n-        assertThrows(NPE, () -> webSocket.sendText(null, false));\n-        assertThrows(NPE, () -> webSocket.sendText(null, true));\n-        assertThrows(NPE, () -> webSocket.sendBinary(null, false));\n-        assertThrows(NPE, () -> webSocket.sendBinary(null, true));\n-        assertThrows(NPE, () -> webSocket.sendPing(null));\n-        assertThrows(NPE, () -> webSocket.sendPong(null));\n-        assertThrows(NPE, () -> webSocket.sendClose(NORMAL_CLOSURE, null));\n+                webSocket.abort();\n@@ -74,9 +66,11 @@\n-        webSocket.abort();\n-\n-        assertThrows(NPE, () -> webSocket.sendText(null, false));\n-        assertThrows(NPE, () -> webSocket.sendText(null, true));\n-        assertThrows(NPE, () -> webSocket.sendBinary(null, false));\n-        assertThrows(NPE, () -> webSocket.sendBinary(null, true));\n-        assertThrows(NPE, () -> webSocket.sendPing(null));\n-        assertThrows(NPE, () -> webSocket.sendPong(null));\n-        assertThrows(NPE, () -> webSocket.sendClose(NORMAL_CLOSURE, null));\n+                assertThrows(NPE, () -> webSocket.sendText(null, false));\n+                assertThrows(NPE, () -> webSocket.sendText(null, true));\n+                assertThrows(NPE, () -> webSocket.sendBinary(null, false));\n+                assertThrows(NPE, () -> webSocket.sendBinary(null, true));\n+                assertThrows(NPE, () -> webSocket.sendPing(null));\n+                assertThrows(NPE, () -> webSocket.sendPong(null));\n+                assertThrows(NPE, () -> webSocket.sendClose(NORMAL_CLOSURE, null));\n+            } finally {\n+                webSocket.abort();\n+            }\n+        }\n@@ -91,9 +85,14 @@\n-        server = new DummyWebSocketServer();\n-        server.open();\n-        webSocket = newBuilder().proxy(NO_PROXY).build().newWebSocketBuilder()\n-                .buildAsync(server.getURI(), new WebSocket.Listener() { })\n-                .join();\n-        webSocket.sendClose(NORMAL_CLOSURE, \"\").join();\n-        assertTrue(webSocket.isOutputClosed());\n-        assertEquals(webSocket.getSubprotocol(), \"\");\n-        webSocket.request(1); \/\/ No exceptions must be thrown\n+        try (var server = new DummyWebSocketServer()) {\n+            server.open();\n+            var webSocket = newBuilder().proxy(NO_PROXY).build().newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), new WebSocket.Listener() { })\n+                    .join();\n+            try {\n+                webSocket.sendClose(NORMAL_CLOSURE, \"\").join();\n+                assertTrue(webSocket.isOutputClosed());\n+                assertEquals(webSocket.getSubprotocol(), \"\");\n+                webSocket.request(1); \/\/ No exceptions must be thrown\n+            } finally {\n+                webSocket.abort();\n+            }\n+        }\n@@ -102,0 +101,1 @@\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/SendTest.java","additions":41,"deletions":41,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import org.testng.annotations.AfterTest;\n@@ -76,12 +75,0 @@\n-    private DummyWebSocketServer server;\n-    private WebSocket webSocket;\n-\n-    @AfterTest\n-    public void cleanup() {\n-        System.out.println(\"AFTER TEST\");\n-        if (server != null)\n-            server.close();\n-        if (webSocket != null)\n-            webSocket.abort();\n-    }\n-\n@@ -90,62 +77,65 @@\n-        server = new DummyWebSocketServer();\n-        server.open();\n-        webSocket = newBuilder().proxy(NO_PROXY).build()\n-                .newWebSocketBuilder()\n-                .buildAsync(server.getURI(), new WebSocket.Listener() { })\n-                .join();\n-\n-        assertFails(IAE, webSocket.sendPing(ByteBuffer.allocate(126)));\n-        assertFails(IAE, webSocket.sendPing(ByteBuffer.allocate(127)));\n-        assertFails(IAE, webSocket.sendPing(ByteBuffer.allocate(128)));\n-        assertFails(IAE, webSocket.sendPing(ByteBuffer.allocate(129)));\n-        assertFails(IAE, webSocket.sendPing(ByteBuffer.allocate(256)));\n-\n-        assertFails(IAE, webSocket.sendPong(ByteBuffer.allocate(126)));\n-        assertFails(IAE, webSocket.sendPong(ByteBuffer.allocate(127)));\n-        assertFails(IAE, webSocket.sendPong(ByteBuffer.allocate(128)));\n-        assertFails(IAE, webSocket.sendPong(ByteBuffer.allocate(129)));\n-        assertFails(IAE, webSocket.sendPong(ByteBuffer.allocate(256)));\n-\n-        assertFails(IOE, webSocket.sendText(Support.incompleteString(), true));\n-        assertFails(IOE, webSocket.sendText(Support.incompleteString(), false));\n-        assertFails(IOE, webSocket.sendText(Support.malformedString(), true));\n-        assertFails(IOE, webSocket.sendText(Support.malformedString(), false));\n-\n-        assertFails(IAE, webSocket.sendClose(NORMAL_CLOSURE, Support.stringWithNBytes(124)));\n-        assertFails(IAE, webSocket.sendClose(NORMAL_CLOSURE, Support.stringWithNBytes(125)));\n-        assertFails(IAE, webSocket.sendClose(NORMAL_CLOSURE, Support.stringWithNBytes(128)));\n-        assertFails(IAE, webSocket.sendClose(NORMAL_CLOSURE, Support.stringWithNBytes(256)));\n-        assertFails(IAE, webSocket.sendClose(NORMAL_CLOSURE, Support.stringWithNBytes(257)));\n-        assertFails(IAE, webSocket.sendClose(NORMAL_CLOSURE, Support.stringWith2NBytes((123 \/ 2) + 1)));\n-        assertFails(IAE, webSocket.sendClose(NORMAL_CLOSURE, Support.malformedString()));\n-        assertFails(IAE, webSocket.sendClose(NORMAL_CLOSURE, Support.incompleteString()));\n-\n-        assertFails(IAE, webSocket.sendClose(-2, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(-1, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(0, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(1, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(500, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(998, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(999, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(1002, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(1003, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(1006, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(1007, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(1009, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(1010, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(1012, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(1013, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(1015, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(5000, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(32768, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(65535, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(65536, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(Integer.MAX_VALUE, \"a reason\"));\n-        assertFails(IAE, webSocket.sendClose(Integer.MIN_VALUE, \"a reason\"));\n-\n-        assertThrows(IAE, () -> webSocket.request(Integer.MIN_VALUE));\n-        assertThrows(IAE, () -> webSocket.request(Long.MIN_VALUE));\n-        assertThrows(IAE, () -> webSocket.request(-1));\n-        assertThrows(IAE, () -> webSocket.request(0));\n-\n-        server.close();\n+        try (var server = new DummyWebSocketServer()) {\n+            server.open();\n+            var webSocket = newBuilder().proxy(NO_PROXY).build()\n+                    .newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), new WebSocket.Listener() { })\n+                    .join();\n+            try {\n+                assertFails(IAE, webSocket.sendPing(ByteBuffer.allocate(126)));\n+                assertFails(IAE, webSocket.sendPing(ByteBuffer.allocate(127)));\n+                assertFails(IAE, webSocket.sendPing(ByteBuffer.allocate(128)));\n+                assertFails(IAE, webSocket.sendPing(ByteBuffer.allocate(129)));\n+                assertFails(IAE, webSocket.sendPing(ByteBuffer.allocate(256)));\n+\n+                assertFails(IAE, webSocket.sendPong(ByteBuffer.allocate(126)));\n+                assertFails(IAE, webSocket.sendPong(ByteBuffer.allocate(127)));\n+                assertFails(IAE, webSocket.sendPong(ByteBuffer.allocate(128)));\n+                assertFails(IAE, webSocket.sendPong(ByteBuffer.allocate(129)));\n+                assertFails(IAE, webSocket.sendPong(ByteBuffer.allocate(256)));\n+\n+                assertFails(IOE, webSocket.sendText(Support.incompleteString(), true));\n+                assertFails(IOE, webSocket.sendText(Support.incompleteString(), false));\n+                assertFails(IOE, webSocket.sendText(Support.malformedString(), true));\n+                assertFails(IOE, webSocket.sendText(Support.malformedString(), false));\n+\n+                assertFails(IAE, webSocket.sendClose(NORMAL_CLOSURE, Support.stringWithNBytes(124)));\n+                assertFails(IAE, webSocket.sendClose(NORMAL_CLOSURE, Support.stringWithNBytes(125)));\n+                assertFails(IAE, webSocket.sendClose(NORMAL_CLOSURE, Support.stringWithNBytes(128)));\n+                assertFails(IAE, webSocket.sendClose(NORMAL_CLOSURE, Support.stringWithNBytes(256)));\n+                assertFails(IAE, webSocket.sendClose(NORMAL_CLOSURE, Support.stringWithNBytes(257)));\n+                assertFails(IAE, webSocket.sendClose(NORMAL_CLOSURE, Support.stringWith2NBytes((123 \/ 2) + 1)));\n+                assertFails(IAE, webSocket.sendClose(NORMAL_CLOSURE, Support.malformedString()));\n+                assertFails(IAE, webSocket.sendClose(NORMAL_CLOSURE, Support.incompleteString()));\n+\n+                assertFails(IAE, webSocket.sendClose(-2, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(-1, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(0, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(1, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(500, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(998, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(999, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(1002, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(1003, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(1006, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(1007, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(1009, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(1010, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(1012, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(1013, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(1015, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(5000, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(32768, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(65535, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(65536, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(Integer.MAX_VALUE, \"a reason\"));\n+                assertFails(IAE, webSocket.sendClose(Integer.MIN_VALUE, \"a reason\"));\n+\n+                assertThrows(IAE, () -> webSocket.request(Integer.MIN_VALUE));\n+                assertThrows(IAE, () -> webSocket.request(Long.MIN_VALUE));\n+                assertThrows(IAE, () -> webSocket.request(-1));\n+                assertThrows(IAE, () -> webSocket.request(0));\n+\n+            } finally {\n+                webSocket.abort();\n+            }\n+        }\n@@ -156,12 +146,16 @@\n-        server = new DummyWebSocketServer();\n-        server.open();\n-        webSocket = newBuilder().proxy(NO_PROXY).build().newWebSocketBuilder()\n-                .buildAsync(server.getURI(), new WebSocket.Listener() { })\n-                .join();\n-        webSocket.sendBinary(ByteBuffer.allocate(16), false).join();\n-        assertFails(ISE, webSocket.sendText(\"text\", false));\n-        assertFails(ISE, webSocket.sendText(\"text\", true));\n-        \/\/ Pings & Pongs are fine\n-        webSocket.sendPing(ByteBuffer.allocate(125)).join();\n-        webSocket.sendPong(ByteBuffer.allocate(125)).join();\n-        server.close();\n+        try (var server = new DummyWebSocketServer()) {\n+            server.open();\n+            var webSocket = newBuilder().proxy(NO_PROXY).build().newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), new WebSocket.Listener() { })\n+                    .join();\n+            try {\n+                webSocket.sendBinary(ByteBuffer.allocate(16), false).join();\n+                assertFails(ISE, webSocket.sendText(\"text\", false));\n+                assertFails(ISE, webSocket.sendText(\"text\", true));\n+                \/\/ Pings & Pongs are fine\n+                webSocket.sendPing(ByteBuffer.allocate(125)).join();\n+                webSocket.sendPong(ByteBuffer.allocate(125)).join();\n+            } finally {\n+                webSocket.abort();\n+            }\n+        }\n@@ -172,13 +166,16 @@\n-        server = new DummyWebSocketServer();\n-        server.open();\n-        webSocket = newBuilder().proxy(NO_PROXY).build().newWebSocketBuilder()\n-                .buildAsync(server.getURI(), new WebSocket.Listener() { })\n-                .join();\n-\n-        webSocket.sendText(\"text\", false).join();\n-        assertFails(ISE, webSocket.sendBinary(ByteBuffer.allocate(16), false));\n-        assertFails(ISE, webSocket.sendBinary(ByteBuffer.allocate(16), true));\n-        \/\/ Pings & Pongs are fine\n-        webSocket.sendPing(ByteBuffer.allocate(125)).join();\n-        webSocket.sendPong(ByteBuffer.allocate(125)).join();\n-        server.close();\n+        try (var server = new DummyWebSocketServer()) {\n+            server.open();\n+            var webSocket = newBuilder().proxy(NO_PROXY).build().newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), new WebSocket.Listener() { })\n+                    .join();\n+            try {\n+                webSocket.sendText(\"text\", false).join();\n+                assertFails(ISE, webSocket.sendBinary(ByteBuffer.allocate(16), false));\n+                assertFails(ISE, webSocket.sendBinary(ByteBuffer.allocate(16), true));\n+                \/\/ Pings & Pongs are fine\n+                webSocket.sendPing(ByteBuffer.allocate(125)).join();\n+                webSocket.sendPong(ByteBuffer.allocate(125)).join();\n+            } finally {\n+                webSocket.abort();\n+            }\n+        }\n@@ -189,31 +186,33 @@\n-        server = new DummyWebSocketServer();\n-        server.open();\n-        webSocket = newBuilder().proxy(NO_PROXY).build()\n-                .newWebSocketBuilder()\n-                .buildAsync(server.getURI(), new WebSocket.Listener() { })\n-                .join();\n-\n-        webSocket.sendClose(NORMAL_CLOSURE, \"ok\").join();\n-\n-        assertFails(IOE, webSocket.sendClose(WebSocket.NORMAL_CLOSURE, \"ok\"));\n-\n-        assertFails(IOE, webSocket.sendText(\"\", true));\n-        assertFails(IOE, webSocket.sendText(\"\", false));\n-        assertFails(IOE, webSocket.sendText(\"abc\", true));\n-        assertFails(IOE, webSocket.sendText(\"abc\", false));\n-        assertFails(IOE, webSocket.sendBinary(ByteBuffer.allocate(0), true));\n-        assertFails(IOE, webSocket.sendBinary(ByteBuffer.allocate(0), false));\n-        assertFails(IOE, webSocket.sendBinary(ByteBuffer.allocate(1), true));\n-        assertFails(IOE, webSocket.sendBinary(ByteBuffer.allocate(1), false));\n-\n-        assertFails(IOE, webSocket.sendPing(ByteBuffer.allocate(125)));\n-        assertFails(IOE, webSocket.sendPing(ByteBuffer.allocate(124)));\n-        assertFails(IOE, webSocket.sendPing(ByteBuffer.allocate(1)));\n-        assertFails(IOE, webSocket.sendPing(ByteBuffer.allocate(0)));\n-\n-        assertFails(IOE, webSocket.sendPong(ByteBuffer.allocate(125)));\n-        assertFails(IOE, webSocket.sendPong(ByteBuffer.allocate(124)));\n-        assertFails(IOE, webSocket.sendPong(ByteBuffer.allocate(1)));\n-        assertFails(IOE, webSocket.sendPong(ByteBuffer.allocate(0)));\n-\n-        server.close();\n+        try (var server = new DummyWebSocketServer()) {\n+            server.open();\n+            var webSocket = newBuilder().proxy(NO_PROXY).build()\n+                    .newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), new WebSocket.Listener() { })\n+                    .join();\n+            try {\n+                webSocket.sendClose(NORMAL_CLOSURE, \"ok\").join();\n+\n+                assertFails(IOE, webSocket.sendClose(WebSocket.NORMAL_CLOSURE, \"ok\"));\n+\n+                assertFails(IOE, webSocket.sendText(\"\", true));\n+                assertFails(IOE, webSocket.sendText(\"\", false));\n+                assertFails(IOE, webSocket.sendText(\"abc\", true));\n+                assertFails(IOE, webSocket.sendText(\"abc\", false));\n+                assertFails(IOE, webSocket.sendBinary(ByteBuffer.allocate(0), true));\n+                assertFails(IOE, webSocket.sendBinary(ByteBuffer.allocate(0), false));\n+                assertFails(IOE, webSocket.sendBinary(ByteBuffer.allocate(1), true));\n+                assertFails(IOE, webSocket.sendBinary(ByteBuffer.allocate(1), false));\n+\n+                assertFails(IOE, webSocket.sendPing(ByteBuffer.allocate(125)));\n+                assertFails(IOE, webSocket.sendPing(ByteBuffer.allocate(124)));\n+                assertFails(IOE, webSocket.sendPing(ByteBuffer.allocate(1)));\n+                assertFails(IOE, webSocket.sendPing(ByteBuffer.allocate(0)));\n+\n+                assertFails(IOE, webSocket.sendPong(ByteBuffer.allocate(125)));\n+                assertFails(IOE, webSocket.sendPong(ByteBuffer.allocate(124)));\n+                assertFails(IOE, webSocket.sendPong(ByteBuffer.allocate(1)));\n+                assertFails(IOE, webSocket.sendPong(ByteBuffer.allocate(0)));\n+            } finally {\n+                webSocket.abort();\n+            }\n+        }\n@@ -254,0 +253,2 @@\n+        try (var server = Support.serverWithCannedData(binary)) {\n+            server.open();\n@@ -255,4 +256,1 @@\n-        server = Support.serverWithCannedData(binary);\n-        server.open();\n-\n-        CompletableFuture<Void> violation = new CompletableFuture<>();\n+            CompletableFuture<Void> violation = new CompletableFuture<>();\n@@ -260,1 +258,1 @@\n-        MockListener listener = new MockListener(requestSize) {\n+            MockListener listener = new MockListener(requestSize) {\n@@ -262,1 +260,1 @@\n-            final AtomicBoolean guard = new AtomicBoolean();\n+                final AtomicBoolean guard = new AtomicBoolean();\n@@ -264,8 +262,2 @@\n-            private <T> T checkRunExclusively(Supplier<T> action) {\n-                if (guard.getAndSet(true)) {\n-                    violation.completeExceptionally(new RuntimeException());\n-                }\n-                try {\n-                    return action.get();\n-                } finally {\n-                    if (!guard.getAndSet(false)) {\n+                private <T> T checkRunExclusively(Supplier<T> action) {\n+                    if (guard.getAndSet(true)) {\n@@ -274,0 +266,7 @@\n+                    try {\n+                        return action.get();\n+                    } finally {\n+                        if (!guard.getAndSet(false)) {\n+                            violation.completeExceptionally(new RuntimeException());\n+                        }\n+                    }\n@@ -275,9 +274,0 @@\n-            }\n-\n-            @Override\n-            public void onOpen(WebSocket webSocket) {\n-                checkRunExclusively(() -> {\n-                    super.onOpen(webSocket);\n-                    return null;\n-                });\n-            }\n@@ -285,22 +275,7 @@\n-            @Override\n-            public CompletionStage<?> onText(WebSocket webSocket,\n-                                             CharSequence data,\n-                                             boolean last) {\n-                return checkRunExclusively(\n-                        () -> super.onText(webSocket, data, last));\n-            }\n-\n-            @Override\n-            public CompletionStage<?> onBinary(WebSocket webSocket,\n-                                               ByteBuffer data,\n-                                               boolean last) {\n-                return checkRunExclusively(\n-                        () -> super.onBinary(webSocket, data, last));\n-            }\n-\n-            @Override\n-            public CompletionStage<?> onPing(WebSocket webSocket,\n-                                             ByteBuffer message) {\n-                return checkRunExclusively(\n-                        () -> super.onPing(webSocket, message));\n-            }\n+                @Override\n+                public void onOpen(WebSocket webSocket) {\n+                    checkRunExclusively(() -> {\n+                        super.onOpen(webSocket);\n+                        return null;\n+                    });\n+                }\n@@ -308,6 +283,7 @@\n-            @Override\n-            public CompletionStage<?> onPong(WebSocket webSocket,\n-                                             ByteBuffer message) {\n-                return checkRunExclusively(\n-                        () -> super.onPong(webSocket, message));\n-            }\n+                @Override\n+                public CompletionStage<?> onText(WebSocket webSocket,\n+                                                 CharSequence data,\n+                                                 boolean last) {\n+                    return checkRunExclusively(\n+                            () -> super.onText(webSocket, data, last));\n+                }\n@@ -315,7 +291,7 @@\n-            @Override\n-            public CompletionStage<?> onClose(WebSocket webSocket,\n-                                              int statusCode,\n-                                              String reason) {\n-                return checkRunExclusively(\n-                        () -> super.onClose(webSocket, statusCode, reason));\n-            }\n+                @Override\n+                public CompletionStage<?> onBinary(WebSocket webSocket,\n+                                                   ByteBuffer data,\n+                                                   boolean last) {\n+                    return checkRunExclusively(\n+                            () -> super.onBinary(webSocket, data, last));\n+                }\n@@ -323,8 +299,6 @@\n-            @Override\n-            public void onError(WebSocket webSocket, Throwable error) {\n-                checkRunExclusively(() -> {\n-                    super.onError(webSocket, error);\n-                    return null;\n-                });\n-            }\n-        };\n+                @Override\n+                public CompletionStage<?> onPing(WebSocket webSocket,\n+                                                 ByteBuffer message) {\n+                    return checkRunExclusively(\n+                            () -> super.onPing(webSocket, message));\n+                }\n@@ -332,3 +306,6 @@\n-        webSocket = newBuilder().proxy(NO_PROXY).build().newWebSocketBuilder()\n-                .buildAsync(server.getURI(), listener)\n-                .join();\n+                @Override\n+                public CompletionStage<?> onPong(WebSocket webSocket,\n+                                                 ByteBuffer message) {\n+                    return checkRunExclusively(\n+                            () -> super.onPong(webSocket, message));\n+                }\n@@ -336,0 +313,7 @@\n+                @Override\n+                public CompletionStage<?> onClose(WebSocket webSocket,\n+                                                  int statusCode,\n+                                                  String reason) {\n+                    return checkRunExclusively(\n+                            () -> super.onClose(webSocket, statusCode, reason));\n+                }\n@@ -337,3 +321,8 @@\n-        listener.invocations();\n-        violation.complete(null); \/\/ won't affect if completed exceptionally\n-        violation.join();\n+                @Override\n+                public void onError(WebSocket webSocket, Throwable error) {\n+                    checkRunExclusively(() -> {\n+                        super.onError(webSocket, error);\n+                        return null;\n+                    });\n+                }\n+            };\n@@ -341,1 +330,11 @@\n-        server.close();\n+            var webSocket = newBuilder().proxy(NO_PROXY).build().newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), listener)\n+                    .join();\n+            try {\n+                listener.invocations();\n+                violation.complete(null); \/\/ won't affect if completed exceptionally\n+                violation.join();\n+            } finally {\n+                webSocket.abort();\n+            }\n+        }\n@@ -346,40 +345,2 @@\n-        server = Support.serverWithCannedData(0x88, 0x00);\n-        server.open();\n-        CompletableFuture<Void> onCloseCalled = new CompletableFuture<>();\n-        CompletableFuture<Void> canClose = new CompletableFuture<>();\n-\n-        WebSocket.Listener listener = new WebSocket.Listener() {\n-            @Override\n-            public CompletionStage<?> onClose(WebSocket webSocket,\n-                                              int statusCode,\n-                                              String reason) {\n-                System.out.printf(\"onClose(%s, '%s')%n\", statusCode, reason);\n-                onCloseCalled.complete(null);\n-                return canClose;\n-            }\n-\n-            @Override\n-            public void onError(WebSocket webSocket, Throwable error) {\n-                System.out.println(\"onError(\" + error + \")\");\n-                onCloseCalled.completeExceptionally(error);\n-            }\n-        };\n-\n-        webSocket = newBuilder().proxy(NO_PROXY).build().newWebSocketBuilder()\n-                .buildAsync(server.getURI(), listener)\n-                .join();\n-\n-        onCloseCalled.join();      \/\/ Wait for onClose to be called\n-        canClose.complete(null);   \/\/ Signal to the WebSocket it can close the output\n-        TimeUnit.SECONDS.sleep(5); \/\/ Give canClose some time to reach the WebSocket\n-\n-        assertFails(IOE, webSocket.sendClose(WebSocket.NORMAL_CLOSURE, \"ok\"));\n-\n-        assertFails(IOE, webSocket.sendText(\"\", true));\n-        assertFails(IOE, webSocket.sendText(\"\", false));\n-        assertFails(IOE, webSocket.sendText(\"abc\", true));\n-        assertFails(IOE, webSocket.sendText(\"abc\", false));\n-        assertFails(IOE, webSocket.sendBinary(ByteBuffer.allocate(0), true));\n-        assertFails(IOE, webSocket.sendBinary(ByteBuffer.allocate(0), false));\n-        assertFails(IOE, webSocket.sendBinary(ByteBuffer.allocate(1), true));\n-        assertFails(IOE, webSocket.sendBinary(ByteBuffer.allocate(1), false));\n+        try (var server = Support.serverWithCannedData(0x88, 0x00)) {\n+            server.open();\n@@ -387,4 +348,12 @@\n-        assertFails(IOE, webSocket.sendPing(ByteBuffer.allocate(125)));\n-        assertFails(IOE, webSocket.sendPing(ByteBuffer.allocate(124)));\n-        assertFails(IOE, webSocket.sendPing(ByteBuffer.allocate(1)));\n-        assertFails(IOE, webSocket.sendPing(ByteBuffer.allocate(0)));\n+            CompletableFuture<Void> onCloseCalled = new CompletableFuture<>();\n+            CompletableFuture<Void> canClose = new CompletableFuture<>();\n+\n+            WebSocket.Listener listener = new WebSocket.Listener() {\n+                @Override\n+                public CompletionStage<?> onClose(WebSocket webSocket,\n+                                                  int statusCode,\n+                                                  String reason) {\n+                    System.out.printf(\"onClose(%s, '%s')%n\", statusCode, reason);\n+                    onCloseCalled.complete(null);\n+                    return canClose;\n+                }\n@@ -392,4 +361,6 @@\n-        assertFails(IOE, webSocket.sendPong(ByteBuffer.allocate(125)));\n-        assertFails(IOE, webSocket.sendPong(ByteBuffer.allocate(124)));\n-        assertFails(IOE, webSocket.sendPong(ByteBuffer.allocate(1)));\n-        assertFails(IOE, webSocket.sendPong(ByteBuffer.allocate(0)));\n+                @Override\n+                public void onError(WebSocket webSocket, Throwable error) {\n+                    System.out.println(\"onError(\" + error + \")\");\n+                    onCloseCalled.completeExceptionally(error);\n+                }\n+            };\n@@ -397,1 +368,32 @@\n-        server.close();\n+            var webSocket = newBuilder().proxy(NO_PROXY).build().newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), listener)\n+                    .join();\n+            try {\n+                onCloseCalled.join();      \/\/ Wait for onClose to be called\n+                canClose.complete(null);   \/\/ Signal to the WebSocket it can close the output\n+                TimeUnit.SECONDS.sleep(5); \/\/ Give canClose some time to reach the WebSocket\n+\n+                assertFails(IOE, webSocket.sendClose(WebSocket.NORMAL_CLOSURE, \"ok\"));\n+\n+                assertFails(IOE, webSocket.sendText(\"\", true));\n+                assertFails(IOE, webSocket.sendText(\"\", false));\n+                assertFails(IOE, webSocket.sendText(\"abc\", true));\n+                assertFails(IOE, webSocket.sendText(\"abc\", false));\n+                assertFails(IOE, webSocket.sendBinary(ByteBuffer.allocate(0), true));\n+                assertFails(IOE, webSocket.sendBinary(ByteBuffer.allocate(0), false));\n+                assertFails(IOE, webSocket.sendBinary(ByteBuffer.allocate(1), true));\n+                assertFails(IOE, webSocket.sendBinary(ByteBuffer.allocate(1), false));\n+\n+                assertFails(IOE, webSocket.sendPing(ByteBuffer.allocate(125)));\n+                assertFails(IOE, webSocket.sendPing(ByteBuffer.allocate(124)));\n+                assertFails(IOE, webSocket.sendPing(ByteBuffer.allocate(1)));\n+                assertFails(IOE, webSocket.sendPing(ByteBuffer.allocate(0)));\n+\n+                assertFails(IOE, webSocket.sendPong(ByteBuffer.allocate(125)));\n+                assertFails(IOE, webSocket.sendPong(ByteBuffer.allocate(124)));\n+                assertFails(IOE, webSocket.sendPong(ByteBuffer.allocate(1)));\n+                assertFails(IOE, webSocket.sendPong(ByteBuffer.allocate(0)));\n+            } finally {\n+                webSocket.abort();\n+            }\n+        }\n@@ -461,2 +463,2 @@\n-        server = serverSupplier.apply(binary);\n-        server.open();\n+        try (var server = serverSupplier.apply(binary)) {\n+            server.open();\n@@ -464,1 +466,1 @@\n-        WebSocket.Listener listener = new WebSocket.Listener() {\n+            WebSocket.Listener listener = new WebSocket.Listener() {\n@@ -466,2 +468,2 @@\n-            List<byte[]> collectedBytes = new ArrayList<>();\n-            ByteBuffer buffer = ByteBuffer.allocate(1024);\n+                List<byte[]> collectedBytes = new ArrayList<>();\n+                ByteBuffer buffer = ByteBuffer.allocate(1024);\n@@ -469,6 +471,6 @@\n-            @Override\n-            public CompletionStage<?> onBinary(WebSocket webSocket,\n-                                               ByteBuffer message,\n-                                               boolean last) {\n-                System.out.printf(\"onBinary(%s, %s)%n\", message, last);\n-                webSocket.request(1);\n+                @Override\n+                public CompletionStage<?> onBinary(WebSocket webSocket,\n+                                                   ByteBuffer message,\n+                                                   boolean last) {\n+                    System.out.printf(\"onBinary(%s, %s)%n\", message, last);\n+                    webSocket.request(1);\n@@ -476,7 +478,9 @@\n-                append(message);\n-                if (last) {\n-                    buffer.flip();\n-                    byte[] bytes = new byte[buffer.remaining()];\n-                    buffer.get(bytes);\n-                    buffer.clear();\n-                    processWholeBinary(bytes);\n+                    append(message);\n+                    if (last) {\n+                        buffer.flip();\n+                        byte[] bytes = new byte[buffer.remaining()];\n+                        buffer.get(bytes);\n+                        buffer.clear();\n+                        processWholeBinary(bytes);\n+                    }\n+                    return null;\n@@ -484,2 +488,0 @@\n-                return null;\n-            }\n@@ -487,7 +489,9 @@\n-            private void append(ByteBuffer message) {\n-                if (buffer.remaining() < message.remaining()) {\n-                    assert message.remaining() > 0;\n-                    int cap = (buffer.capacity() + message.remaining()) * 2;\n-                    ByteBuffer b = ByteBuffer.allocate(cap);\n-                    b.put(buffer.flip());\n-                    buffer = b;\n+                private void append(ByteBuffer message) {\n+                    if (buffer.remaining() < message.remaining()) {\n+                        assert message.remaining() > 0;\n+                        int cap = (buffer.capacity() + message.remaining()) * 2;\n+                        ByteBuffer b = ByteBuffer.allocate(cap);\n+                        b.put(buffer.flip());\n+                        buffer = b;\n+                    }\n+                    buffer.put(message);\n@@ -495,2 +499,0 @@\n-                buffer.put(message);\n-            }\n@@ -498,19 +500,5 @@\n-            private void processWholeBinary(byte[] bytes) {\n-                String stringBytes = new String(bytes, UTF_8);\n-                System.out.println(\"processWholeBinary: \" + stringBytes);\n-                collectedBytes.add(bytes);\n-            }\n-\n-            @Override\n-            public CompletionStage<?> onClose(WebSocket webSocket,\n-                                              int statusCode,\n-                                              String reason) {\n-                actual.complete(collectedBytes);\n-                return null;\n-            }\n-\n-            @Override\n-            public void onError(WebSocket webSocket, Throwable error) {\n-                actual.completeExceptionally(error);\n-            }\n-        };\n+                private void processWholeBinary(byte[] bytes) {\n+                    String stringBytes = new String(bytes, UTF_8);\n+                    System.out.println(\"processWholeBinary: \" + stringBytes);\n+                    collectedBytes.add(bytes);\n+                }\n@@ -518,6 +506,7 @@\n-        webSocket = newBuilder()\n-                .proxy(NO_PROXY)\n-                .authenticator(new WSAuthenticator())\n-                .build().newWebSocketBuilder()\n-                .buildAsync(server.getURI(), listener)\n-                .join();\n+                @Override\n+                public CompletionStage<?> onClose(WebSocket webSocket,\n+                                                  int statusCode,\n+                                                  String reason) {\n+                    actual.complete(collectedBytes);\n+                    return null;\n+                }\n@@ -525,2 +514,5 @@\n-        List<byte[]> a = actual.join();\n-        assertEquals(a, expected);\n+                @Override\n+                public void onError(WebSocket webSocket, Throwable error) {\n+                    actual.completeExceptionally(error);\n+                }\n+            };\n@@ -528,1 +520,13 @@\n-        server.close();\n+            var webSocket = newBuilder()\n+                    .proxy(NO_PROXY)\n+                    .authenticator(new WSAuthenticator())\n+                    .build().newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), listener)\n+                    .join();\n+            try {\n+                List<byte[]> a = actual.join();\n+                assertEquals(a, expected);\n+            } finally {\n+                webSocket.abort();\n+            }\n+        }\n@@ -557,22 +561,2 @@\n-        server = serverSupplier.apply(binary);\n-        server.open();\n-\n-        WebSocket.Listener listener = new WebSocket.Listener() {\n-\n-            List<String> collectedStrings = new ArrayList<>();\n-            StringBuilder text = new StringBuilder();\n-\n-            @Override\n-            public CompletionStage<?> onText(WebSocket webSocket,\n-                                             CharSequence message,\n-                                             boolean last) {\n-                System.out.printf(\"onText(%s, %s)%n\", message, last);\n-                webSocket.request(1);\n-                text.append(message);\n-                if (last) {\n-                    String str = text.toString();\n-                    text.setLength(0);\n-                    processWholeText(str);\n-                }\n-                return null;\n-            }\n+        try (var server = serverSupplier.apply(binary)) {\n+            server.open();\n@@ -580,4 +564,1 @@\n-            private void processWholeText(String string) {\n-                System.out.println(string);\n-                collectedStrings.add(string);\n-            }\n+            WebSocket.Listener listener = new WebSocket.Listener() {\n@@ -585,7 +566,2 @@\n-            @Override\n-            public CompletionStage<?> onClose(WebSocket webSocket,\n-                                              int statusCode,\n-                                              String reason) {\n-                actual.complete(collectedStrings);\n-                return null;\n-            }\n+                List<String> collectedStrings = new ArrayList<>();\n+                StringBuilder text = new StringBuilder();\n@@ -593,5 +569,14 @@\n-            @Override\n-            public void onError(WebSocket webSocket, Throwable error) {\n-                actual.completeExceptionally(error);\n-            }\n-        };\n+                @Override\n+                public CompletionStage<?> onText(WebSocket webSocket,\n+                                                 CharSequence message,\n+                                                 boolean last) {\n+                    System.out.printf(\"onText(%s, %s)%n\", message, last);\n+                    webSocket.request(1);\n+                    text.append(message);\n+                    if (last) {\n+                        String str = text.toString();\n+                        text.setLength(0);\n+                        processWholeText(str);\n+                    }\n+                    return null;\n+                }\n@@ -599,6 +584,4 @@\n-        webSocket = newBuilder()\n-                .proxy(NO_PROXY)\n-                .authenticator(new WSAuthenticator())\n-                .build().newWebSocketBuilder()\n-                .buildAsync(server.getURI(), listener)\n-                .join();\n+                private void processWholeText(String string) {\n+                    System.out.println(string);\n+                    collectedStrings.add(string);\n+                }\n@@ -606,2 +589,7 @@\n-        List<String> a = actual.join();\n-        assertEquals(a, expected);\n+                @Override\n+                public CompletionStage<?> onClose(WebSocket webSocket,\n+                                                  int statusCode,\n+                                                  String reason) {\n+                    actual.complete(collectedStrings);\n+                    return null;\n+                }\n@@ -609,1 +597,19 @@\n-        server.close();\n+                @Override\n+                public void onError(WebSocket webSocket, Throwable error) {\n+                    actual.completeExceptionally(error);\n+                }\n+            };\n+\n+            var webSocket = newBuilder()\n+                    .proxy(NO_PROXY)\n+                    .authenticator(new WSAuthenticator())\n+                    .build().newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), listener)\n+                    .join();\n+            try {\n+                List<String> a = actual.join();\n+                assertEquals(a, expected);\n+            } finally {\n+                webSocket.abort();\n+            }\n+        }\n@@ -642,39 +648,2 @@\n-        server = serverSupplier.apply(binary);\n-        server.open();\n-\n-        WebSocket.Listener listener = new WebSocket.Listener() {\n-\n-            List<CharSequence> parts = new ArrayList<>();\n-            \/*\n-             * A CompletableFuture which will complete once the current\n-             * message has been fully assembled. Until then the listener\n-             * returns this instance for every call.\n-             *\/\n-            CompletableFuture<?> currentCf = new CompletableFuture<>();\n-            List<String> collected = new ArrayList<>();\n-\n-            @Override\n-            public CompletionStage<?> onText(WebSocket webSocket,\n-                                             CharSequence message,\n-                                             boolean last) {\n-                parts.add(message);\n-                if (!last) {\n-                    webSocket.request(1);\n-                } else {\n-                    this.currentCf.thenRun(() -> webSocket.request(1));\n-                    CompletableFuture<?> refCf = this.currentCf;\n-                    processWholeMessage(new ArrayList<>(parts), refCf);\n-                    currentCf = new CompletableFuture<>();\n-                    parts.clear();\n-                    return refCf;\n-                }\n-                return currentCf;\n-            }\n-\n-            @Override\n-            public CompletionStage<?> onClose(WebSocket webSocket,\n-                                              int statusCode,\n-                                              String reason) {\n-                actual.complete(collected);\n-                return null;\n-            }\n+        try (var server = serverSupplier.apply(binary)) {\n+            server.open();\n@@ -682,4 +651,28 @@\n-            @Override\n-            public void onError(WebSocket webSocket, Throwable error) {\n-                actual.completeExceptionally(error);\n-            }\n+            WebSocket.Listener listener = new WebSocket.Listener() {\n+\n+                List<CharSequence> parts = new ArrayList<>();\n+                \/*\n+                 * A CompletableFuture which will complete once the current\n+                 * message has been fully assembled. Until then the listener\n+                 * returns this instance for every call.\n+                 *\/\n+                CompletableFuture<?> currentCf = new CompletableFuture<>();\n+                List<String> collected = new ArrayList<>();\n+\n+                @Override\n+                public CompletionStage<?> onText(WebSocket webSocket,\n+                                                 CharSequence message,\n+                                                 boolean last) {\n+                    parts.add(message);\n+                    if (!last) {\n+                        webSocket.request(1);\n+                    } else {\n+                        this.currentCf.thenRun(() -> webSocket.request(1));\n+                        CompletableFuture<?> refCf = this.currentCf;\n+                        processWholeMessage(new ArrayList<>(parts), refCf);\n+                        currentCf = new CompletableFuture<>();\n+                        parts.clear();\n+                        return refCf;\n+                    }\n+                    return currentCf;\n+                }\n@@ -687,10 +680,7 @@\n-            public void processWholeMessage(List<CharSequence> data,\n-                                            CompletableFuture<?> cf) {\n-                StringBuilder b = new StringBuilder();\n-                data.forEach(b::append);\n-                String s = b.toString();\n-                System.out.println(s);\n-                cf.complete(null);\n-                collected.add(s);\n-            }\n-        };\n+                @Override\n+                public CompletionStage<?> onClose(WebSocket webSocket,\n+                                                  int statusCode,\n+                                                  String reason) {\n+                    actual.complete(collected);\n+                    return null;\n+                }\n@@ -698,6 +688,4 @@\n-        webSocket = newBuilder()\n-                .proxy(NO_PROXY)\n-                .authenticator(new WSAuthenticator())\n-                .build().newWebSocketBuilder()\n-                .buildAsync(server.getURI(), listener)\n-                .join();\n+                @Override\n+                public void onError(WebSocket webSocket, Throwable error) {\n+                    actual.completeExceptionally(error);\n+                }\n@@ -705,2 +693,10 @@\n-        List<String> a = actual.join();\n-        assertEquals(a, expected);\n+                public void processWholeMessage(List<CharSequence> data,\n+                                                CompletableFuture<?> cf) {\n+                    StringBuilder b = new StringBuilder();\n+                    data.forEach(b::append);\n+                    String s = b.toString();\n+                    System.out.println(s);\n+                    cf.complete(null);\n+                    collected.add(s);\n+                }\n+            };\n@@ -708,1 +704,13 @@\n-        server.close();\n+            var webSocket = newBuilder()\n+                    .proxy(NO_PROXY)\n+                    .authenticator(new WSAuthenticator())\n+                    .build().newWebSocketBuilder()\n+                    .buildAsync(server.getURI(), listener)\n+                    .join();\n+            try {\n+                List<String> a = actual.join();\n+                assertEquals(a, expected);\n+            } finally {\n+                webSocket.abort();\n+            }\n+        }\n@@ -728,0 +736,1 @@\n+            webSocket.abort();\n@@ -748,0 +757,1 @@\n+            webSocket.abort();\n@@ -766,0 +776,1 @@\n+                silentAbort(webSocket);\n@@ -786,1 +797,1 @@\n-                    return new PasswordAuthentication(\"BAD\"+USERNAME, \"\".toCharArray());\n+                    return new PasswordAuthentication(\"BAD\" + USERNAME, \"\".toCharArray());\n@@ -799,0 +810,1 @@\n+                silentAbort(webSocket);\n@@ -805,0 +817,5 @@\n+    private static void silentAbort(WebSocket ws) {\n+        try {\n+            ws.abort();\n+        } catch (Throwable t) { }\n+    }\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/WebSocketTest.java","additions":437,"deletions":420,"binary":false,"changes":857,"status":"modified"}]}