{"files":[{"patch":"@@ -16,0 +16,2 @@\n+        if self.number == 18:\n+            self.number = 17\n@@ -40,0 +42,2 @@\n+        if self.number == 18:\n+            self.number = 16\n@@ -57,0 +61,2 @@\n+        if self.number == 18:\n+            self.number = 15\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64-asmtest.py","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -113,2 +113,2 @@\n-reg_def R18     ( SOC, SOC, Op_RegI, 18, r18->as_VMReg()        );\n-reg_def R18_H   ( SOC, SOC, Op_RegI, 18, r18->as_VMReg()->next());\n+reg_def R18     ( SOC, SOC, Op_RegI, 18, r18_tls->as_VMReg()        );\n+reg_def R18_H   ( SOC, SOC, Op_RegI, 18, r18_tls->as_VMReg()->next());\n@@ -355,1 +355,0 @@\n-    R18, R18_H,\n@@ -378,1 +377,1 @@\n-\n+    R18, R18_H, \/\/ platform\n@@ -536,0 +535,2 @@\n+#ifndef R18_RESERVED\n+    \/\/ See comment in register_aarch64.hpp\n@@ -537,0 +538,1 @@\n+#endif\n@@ -569,0 +571,2 @@\n+#ifndef R18_RESERVED\n+    \/\/ See comment in register_aarch64.hpp\n@@ -570,0 +574,1 @@\n+#endif\n@@ -605,0 +610,2 @@\n+#ifndef R18_RESERVED\n+    \/\/ See comment in register_aarch64.hpp\n@@ -606,0 +613,1 @@\n+#endif\n@@ -638,0 +646,2 @@\n+#ifndef R18_RESERVED\n+    \/\/ See comment in register_aarch64.hpp\n@@ -639,0 +649,1 @@\n+#endif\n@@ -778,0 +789,2 @@\n+#ifndef R18_RESERVED\n+    \/\/ See comment in register_aarch64.hpp\n@@ -779,0 +792,1 @@\n+#endif\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -99,24 +99,24 @@\n-    __ add(r15, r12, r16, Assembler::LSR, 30);         \/\/        add        x15, x12, x16, LSR #30\n-    __ sub(r1, r15, r3, Assembler::LSR, 32);           \/\/        sub        x1, x15, x3, LSR #32\n-    __ adds(r13, r25, r5, Assembler::LSL, 13);         \/\/        adds        x13, x25, x5, LSL #13\n-    __ subs(r22, r28, r6, Assembler::ASR, 17);         \/\/        subs        x22, x28, x6, ASR #17\n-    __ addw(r0, r9, r22, Assembler::ASR, 6);           \/\/        add        w0, w9, w22, ASR #6\n-    __ subw(r19, r3, r25, Assembler::LSL, 21);         \/\/        sub        w19, w3, w25, LSL #21\n-    __ addsw(r4, r19, r11, Assembler::LSL, 20);        \/\/        adds        w4, w19, w11, LSL #20\n-    __ subsw(r24, r7, r19, Assembler::ASR, 0);         \/\/        subs        w24, w7, w19, ASR #0\n-    __ andr(r30, r7, r11, Assembler::LSL, 48);         \/\/        and        x30, x7, x11, LSL #48\n-    __ orr(r24, r8, r15, Assembler::LSL, 12);          \/\/        orr        x24, x8, x15, LSL #12\n-    __ eor(r17, r9, r23, Assembler::LSL, 1);           \/\/        eor        x17, x9, x23, LSL #1\n-    __ ands(r14, r11, r4, Assembler::LSR, 55);         \/\/        ands        x14, x11, x4, LSR #55\n-    __ andw(r19, r7, r12, Assembler::LSR, 17);         \/\/        and        w19, w7, w12, LSR #17\n-    __ orrw(r19, r27, r11, Assembler::ASR, 28);        \/\/        orr        w19, w27, w11, ASR #28\n-    __ eorw(r30, r3, r22, Assembler::LSR, 31);         \/\/        eor        w30, w3, w22, LSR #31\n-    __ andsw(r19, r26, r28, Assembler::ASR, 0);        \/\/        ands        w19, w26, w28, ASR #0\n-    __ bic(r29, r6, r26, Assembler::LSL, 51);          \/\/        bic        x29, x6, x26, LSL #51\n-    __ orn(r26, r27, r17, Assembler::LSL, 35);         \/\/        orn        x26, x27, x17, LSL #35\n-    __ eon(r21, r4, r14, Assembler::LSL, 5);           \/\/        eon        x21, x4, x14, LSL #5\n-    __ bics(r2, r15, r0, Assembler::ASR, 5);           \/\/        bics        x2, x15, x0, ASR #5\n-    __ bicw(r2, r7, r2, Assembler::LSL, 29);           \/\/        bic        w2, w7, w2, LSL #29\n-    __ ornw(r24, r12, r21, Assembler::LSR, 5);         \/\/        orn        w24, w12, w21, LSR #5\n-    __ eonw(r30, r15, r19, Assembler::LSL, 2);         \/\/        eon        w30, w15, w19, LSL #2\n-    __ bicsw(r30, r23, r17, Assembler::ASR, 28);       \/\/        bics        w30, w23, w17, ASR #28\n+    __ add(r15, r0, r24, Assembler::LSL, 59);          \/\/ add x15, x0, x24, LSL #59\n+    __ sub(r17, r22, r22, Assembler::ASR, 13);         \/\/ sub x17, x22, x22, ASR #13\n+    __ adds(r10, r26, r28, Assembler::LSL, 57);        \/\/ adds  x10, x26, x28, LSL #57\n+    __ subs(r25, r16, r24, Assembler::LSL, 18);        \/\/ subs  x25, x16, x24, LSL #18\n+    __ addw(r8, r5, r28, Assembler::LSL, 7);           \/\/ add w8, w5, w28, LSL #7\n+    __ subw(r8, r28, r1, Assembler::ASR, 28);          \/\/ sub w8, w28, w1, ASR #28\n+    __ addsw(r12, r2, r1, Assembler::LSL, 0);          \/\/ adds  w12, w2, w1, LSL #0\n+    __ subsw(r23, r5, r17, Assembler::LSR, 25);        \/\/ subs  w23, w5, w17, LSR #25\n+    __ andr(r21, r12, r13, Assembler::LSL, 21);        \/\/ and x21, x12, x13, LSL #21\n+    __ orr(r21, r15, r23, Assembler::ASR, 36);         \/\/ orr x21, x15, x23, ASR #36\n+    __ eor(r22, r24, r27, Assembler::ASR, 48);         \/\/ eor x22, x24, x27, ASR #48\n+    __ ands(r22, r15, r2, Assembler::ASR, 52);         \/\/ ands  x22, x15, x2, ASR #52\n+    __ andw(r1, r17, r24, Assembler::ASR, 3);          \/\/ and w1, w17, w24, ASR #3\n+    __ orrw(r5, r2, r6, Assembler::ASR, 11);           \/\/ orr w5, w2, w6, ASR #11\n+    __ eorw(r23, r1, r5, Assembler::LSR, 12);          \/\/ eor w23, w1, w5, LSR #12\n+    __ andsw(r0, r12, r14, Assembler::ASR, 20);        \/\/ ands  w0, w12, w14, ASR #20\n+    __ bic(r1, r6, r2, Assembler::LSR, 7);             \/\/ bic x1, x6, x2, LSR #7\n+    __ orn(r30, r8, r4, Assembler::LSL, 47);           \/\/ orn x30, x8, x4, LSL #47\n+    __ eon(r17, r22, r20, Assembler::ASR, 53);         \/\/ eon x17, x22, x20, ASR #53\n+    __ bics(r29, r15, r5, Assembler::ASR, 36);         \/\/ bics  x29, x15, x5, ASR #36\n+    __ bicw(r30, r23, r29, Assembler::LSR, 27);        \/\/ bic w30, w23, w29, LSR #27\n+    __ ornw(r12, r29, r2, Assembler::LSL, 20);         \/\/ orn w12, w29, w2, LSL #20\n+    __ eonw(r7, r12, r6, Assembler::ASR, 4);           \/\/ eon w7, w12, w6, ASR #4\n+    __ bicsw(r16, r13, r7, Assembler::ASR, 21);        \/\/ bics  w16, w13, w7, ASR #21\n@@ -125,8 +125,8 @@\n-    __ addw(r4, r20, 660u);                            \/\/        add        w4, w20, #660\n-    __ addsw(r2, r10, 710u);                           \/\/        adds        w2, w10, #710\n-    __ subw(r19, r26, 244u);                           \/\/        sub        w19, w26, #244\n-    __ subsw(r28, r13, 73u);                           \/\/        subs        w28, w13, #73\n-    __ add(r2, r30, 862u);                             \/\/        add        x2, x30, #862\n-    __ adds(r27, r16, 574u);                           \/\/        adds        x27, x16, #574\n-    __ sub(r22, r9, 589u);                             \/\/        sub        x22, x9, #589\n-    __ subs(r4, r1, 698u);                             \/\/        subs        x4, x1, #698\n+    __ addw(r5, r17, 726u);                            \/\/ add w5, w17, #726\n+    __ addsw(r10, r16, 347u);                          \/\/ adds  w10, w16, #347\n+    __ subw(r26, r5, 978u);                            \/\/ sub w26, w5, #978\n+    __ subsw(r21, r24, 689u);                          \/\/ subs  w21, w24, #689\n+    __ add(r10, r16, 987u);                            \/\/ add x10, x16, #987\n+    __ adds(r15, r15, 665u);                           \/\/ adds  x15, x15, #665\n+    __ sub(r24, r20, 39u);                             \/\/ sub x24, x20, #39\n+    __ subs(r10, r13, 76u);                            \/\/ subs  x10, x13, #76\n@@ -135,8 +135,8 @@\n-    __ andw(r28, r19, 4294709247ull);                  \/\/        and        w28, w19, #0xfffc0fff\n-    __ orrw(r27, r5, 536870910ull);                    \/\/        orr        w27, w5, #0x1ffffffe\n-    __ eorw(r30, r20, 4294840319ull);                  \/\/        eor        w30, w20, #0xfffe0fff\n-    __ andsw(r22, r26, 4294959615ull);                 \/\/        ands        w22, w26, #0xffffe1ff\n-    __ andr(r5, r7, 4194300ull);                       \/\/        and        x5, x7, #0x3ffffc\n-    __ orr(r13, r7, 18014398509481728ull);             \/\/        orr        x13, x7, #0x3fffffffffff00\n-    __ eor(r7, r9, 18442240474082197503ull);           \/\/        eor        x7, x9, #0xfff0000000003fff\n-    __ ands(r3, r0, 18374686479671656447ull);          \/\/        ands        x3, x0, #0xff00000000007fff\n+    __ andw(r7, r19, 8388600ull);                      \/\/ and w7, w19, #0x7ffff8\n+    __ orrw(r5, r17, 4026535935ull);                   \/\/ orr w5, w17, #0xf0000fff\n+    __ eorw(r16, r28, 4186112ull);                     \/\/ eor w16, w28, #0x3fe000\n+    __ andsw(r14, r24, 7168ull);                       \/\/ ands  w14, w24, #0x1c00\n+    __ andr(r14, r27, 18446744073709543551ull);        \/\/ and x14, x27, #0xffffffffffffe07f\n+    __ orr(r12, r11, 576456354256912384ull);           \/\/ orr x12, x11, #0x7fffc0000000000\n+    __ eor(r2, r0, 18437736874454811647ull);           \/\/ eor x2, x0, #0xffe00000000003ff\n+    __ ands(r13, r20, 18446744073642573823ull);        \/\/ ands  x13, x20, #0xfffffffffc01ffff\n@@ -145,6 +145,6 @@\n-    __ b(__ pc());                                     \/\/        b        .\n-    __ b(back);                                        \/\/        b        back\n-    __ b(forth);                                       \/\/        b        forth\n-    __ bl(__ pc());                                    \/\/        bl        .\n-    __ bl(back);                                       \/\/        bl        back\n-    __ bl(forth);                                      \/\/        bl        forth\n+    __ b(__ pc());                                     \/\/ b .\n+    __ b(back);                                        \/\/ b back\n+    __ b(forth);                                       \/\/ b forth\n+    __ bl(__ pc());                                    \/\/ bl  .\n+    __ bl(back);                                       \/\/ bl  back\n+    __ bl(forth);                                      \/\/ bl  forth\n@@ -153,16 +153,16 @@\n-    __ cbzw(r16, __ pc());                             \/\/        cbz        w16, .\n-    __ cbzw(r16, back);                                \/\/        cbz        w16, back\n-    __ cbzw(r16, forth);                               \/\/        cbz        w16, forth\n-    __ cbnzw(r19, __ pc());                            \/\/        cbnz        w19, .\n-    __ cbnzw(r19, back);                               \/\/        cbnz        w19, back\n-    __ cbnzw(r19, forth);                              \/\/        cbnz        w19, forth\n-    __ cbz(r5, __ pc());                               \/\/        cbz        x5, .\n-    __ cbz(r5, back);                                  \/\/        cbz        x5, back\n-    __ cbz(r5, forth);                                 \/\/        cbz        x5, forth\n-    __ cbnz(r4, __ pc());                              \/\/        cbnz        x4, .\n-    __ cbnz(r4, back);                                 \/\/        cbnz        x4, back\n-    __ cbnz(r4, forth);                                \/\/        cbnz        x4, forth\n-    __ adr(r27, __ pc());                              \/\/        adr        x27, .\n-    __ adr(r27, back);                                 \/\/        adr        x27, back\n-    __ adr(r27, forth);                                \/\/        adr        x27, forth\n-    __ _adrp(r16, __ pc());                            \/\/        adrp        x16, .\n+    __ cbzw(r15, __ pc());                             \/\/ cbz w15, .\n+    __ cbzw(r15, back);                                \/\/ cbz w15, back\n+    __ cbzw(r15, forth);                               \/\/ cbz w15, forth\n+    __ cbnzw(r28, __ pc());                            \/\/ cbnz  w28, .\n+    __ cbnzw(r28, back);                               \/\/ cbnz  w28, back\n+    __ cbnzw(r28, forth);                              \/\/ cbnz  w28, forth\n+    __ cbz(r27, __ pc());                              \/\/ cbz x27, .\n+    __ cbz(r27, back);                                 \/\/ cbz x27, back\n+    __ cbz(r27, forth);                                \/\/ cbz x27, forth\n+    __ cbnz(r0, __ pc());                              \/\/ cbnz  x0, .\n+    __ cbnz(r0, back);                                 \/\/ cbnz  x0, back\n+    __ cbnz(r0, forth);                                \/\/ cbnz  x0, forth\n+    __ adr(r13, __ pc());                              \/\/ adr x13, .\n+    __ adr(r13, back);                                 \/\/ adr x13, back\n+    __ adr(r13, forth);                                \/\/ adr x13, forth\n+    __ _adrp(r3, __ pc());                             \/\/ adrp  x3, .\n@@ -171,6 +171,6 @@\n-    __ tbz(r28, 8, __ pc());                           \/\/        tbz        x28, #8, .\n-    __ tbz(r28, 8, back);                              \/\/        tbz        x28, #8, back\n-    __ tbz(r28, 8, forth);                             \/\/        tbz        x28, #8, forth\n-    __ tbnz(r1, 1, __ pc());                           \/\/        tbnz        x1, #1, .\n-    __ tbnz(r1, 1, back);                              \/\/        tbnz        x1, #1, back\n-    __ tbnz(r1, 1, forth);                             \/\/        tbnz        x1, #1, forth\n+    __ tbz(r21, 7, __ pc());                           \/\/ tbz x21, #7, .\n+    __ tbz(r21, 7, back);                              \/\/ tbz x21, #7, back\n+    __ tbz(r21, 7, forth);                             \/\/ tbz x21, #7, forth\n+    __ tbnz(r15, 9, __ pc());                          \/\/ tbnz  x15, #9, .\n+    __ tbnz(r15, 9, back);                             \/\/ tbnz  x15, #9, back\n+    __ tbnz(r15, 9, forth);                            \/\/ tbnz  x15, #9, forth\n@@ -179,6 +179,6 @@\n-    __ movnw(r20, 8639, 16);                           \/\/        movn        w20, #8639, lsl 16\n-    __ movzw(r7, 25835, 0);                            \/\/        movz        w7, #25835, lsl 0\n-    __ movkw(r17, 7261, 0);                            \/\/        movk        w17, #7261, lsl 0\n-    __ movn(r14, 2097, 32);                            \/\/        movn        x14, #2097, lsl 32\n-    __ movz(r9, 16082, 0);                             \/\/        movz        x9, #16082, lsl 0\n-    __ movk(r19, 13962, 16);                           \/\/        movk        x19, #13962, lsl 16\n+    __ movnw(r14, 2655, 16);                           \/\/ movn  w14, #2655, lsl 16\n+    __ movzw(r17, 7642, 0);                            \/\/ movz  w17, #7642, lsl 0\n+    __ movkw(r27, 11381, 0);                           \/\/ movk  w27, #11381, lsl 0\n+    __ movn(r1, 19524, 32);                            \/\/ movn  x1, #19524, lsl 32\n+    __ movz(r20, 21126, 16);                           \/\/ movz  x20, #21126, lsl 16\n+    __ movk(r20, 32462, 16);                           \/\/ movk  x20, #32462, lsl 16\n@@ -187,6 +187,6 @@\n-    __ sbfm(r9, r22, 6, 22);                           \/\/        sbfm        x9, x22, #6, #22\n-    __ bfmw(r19, r0, 11, 0);                           \/\/        bfm        w19, w0, #11, #0\n-    __ ubfmw(r10, r19, 11, 19);                        \/\/        ubfm        w10, w19, #11, #19\n-    __ sbfm(r4, r15, 5, 17);                           \/\/        sbfm        x4, x15, #5, #17\n-    __ bfm(r3, r5, 19, 28);                            \/\/        bfm        x3, x5, #19, #28\n-    __ ubfm(r12, r28, 17, 2);                          \/\/        ubfm        x12, x28, #17, #2\n+    __ sbfm(r13, r2, 28, 20);                          \/\/ sbfm  x13, x2, #28, #20\n+    __ bfmw(r16, r20, 19, 15);                         \/\/ bfm w16, w20, #19, #15\n+    __ ubfmw(r11, r11, 9, 6);                          \/\/ ubfm  w11, w11, #9, #6\n+    __ sbfm(r2, r4, 25, 21);                           \/\/ sbfm  x2, x4, #25, #21\n+    __ bfm(r13, r16, 2, 19);                           \/\/ bfm x13, x16, #2, #19\n+    __ ubfm(r8, r25, 8, 5);                            \/\/ ubfm  x8, x25, #8, #5\n@@ -195,2 +195,2 @@\n-    __ extrw(r15, r0, r22, 3);                         \/\/        extr        w15, w0, w22, #3\n-    __ extr(r6, r14, r14, 55);                         \/\/        extr        x6, x14, x14, #55\n+    __ extrw(r29, r27, r10, 14);                       \/\/ extr  w29, w27, w10, #14\n+    __ extr(r6, r20, r6, 24);                          \/\/ extr  x6, x20, x6, #24\n@@ -199,54 +199,54 @@\n-    __ br(Assembler::EQ, __ pc());                     \/\/        b.EQ        .\n-    __ br(Assembler::EQ, back);                        \/\/        b.EQ        back\n-    __ br(Assembler::EQ, forth);                       \/\/        b.EQ        forth\n-    __ br(Assembler::NE, __ pc());                     \/\/        b.NE        .\n-    __ br(Assembler::NE, back);                        \/\/        b.NE        back\n-    __ br(Assembler::NE, forth);                       \/\/        b.NE        forth\n-    __ br(Assembler::HS, __ pc());                     \/\/        b.HS        .\n-    __ br(Assembler::HS, back);                        \/\/        b.HS        back\n-    __ br(Assembler::HS, forth);                       \/\/        b.HS        forth\n-    __ br(Assembler::CS, __ pc());                     \/\/        b.CS        .\n-    __ br(Assembler::CS, back);                        \/\/        b.CS        back\n-    __ br(Assembler::CS, forth);                       \/\/        b.CS        forth\n-    __ br(Assembler::LO, __ pc());                     \/\/        b.LO        .\n-    __ br(Assembler::LO, back);                        \/\/        b.LO        back\n-    __ br(Assembler::LO, forth);                       \/\/        b.LO        forth\n-    __ br(Assembler::CC, __ pc());                     \/\/        b.CC        .\n-    __ br(Assembler::CC, back);                        \/\/        b.CC        back\n-    __ br(Assembler::CC, forth);                       \/\/        b.CC        forth\n-    __ br(Assembler::MI, __ pc());                     \/\/        b.MI        .\n-    __ br(Assembler::MI, back);                        \/\/        b.MI        back\n-    __ br(Assembler::MI, forth);                       \/\/        b.MI        forth\n-    __ br(Assembler::PL, __ pc());                     \/\/        b.PL        .\n-    __ br(Assembler::PL, back);                        \/\/        b.PL        back\n-    __ br(Assembler::PL, forth);                       \/\/        b.PL        forth\n-    __ br(Assembler::VS, __ pc());                     \/\/        b.VS        .\n-    __ br(Assembler::VS, back);                        \/\/        b.VS        back\n-    __ br(Assembler::VS, forth);                       \/\/        b.VS        forth\n-    __ br(Assembler::VC, __ pc());                     \/\/        b.VC        .\n-    __ br(Assembler::VC, back);                        \/\/        b.VC        back\n-    __ br(Assembler::VC, forth);                       \/\/        b.VC        forth\n-    __ br(Assembler::HI, __ pc());                     \/\/        b.HI        .\n-    __ br(Assembler::HI, back);                        \/\/        b.HI        back\n-    __ br(Assembler::HI, forth);                       \/\/        b.HI        forth\n-    __ br(Assembler::LS, __ pc());                     \/\/        b.LS        .\n-    __ br(Assembler::LS, back);                        \/\/        b.LS        back\n-    __ br(Assembler::LS, forth);                       \/\/        b.LS        forth\n-    __ br(Assembler::GE, __ pc());                     \/\/        b.GE        .\n-    __ br(Assembler::GE, back);                        \/\/        b.GE        back\n-    __ br(Assembler::GE, forth);                       \/\/        b.GE        forth\n-    __ br(Assembler::LT, __ pc());                     \/\/        b.LT        .\n-    __ br(Assembler::LT, back);                        \/\/        b.LT        back\n-    __ br(Assembler::LT, forth);                       \/\/        b.LT        forth\n-    __ br(Assembler::GT, __ pc());                     \/\/        b.GT        .\n-    __ br(Assembler::GT, back);                        \/\/        b.GT        back\n-    __ br(Assembler::GT, forth);                       \/\/        b.GT        forth\n-    __ br(Assembler::LE, __ pc());                     \/\/        b.LE        .\n-    __ br(Assembler::LE, back);                        \/\/        b.LE        back\n-    __ br(Assembler::LE, forth);                       \/\/        b.LE        forth\n-    __ br(Assembler::AL, __ pc());                     \/\/        b.AL        .\n-    __ br(Assembler::AL, back);                        \/\/        b.AL        back\n-    __ br(Assembler::AL, forth);                       \/\/        b.AL        forth\n-    __ br(Assembler::NV, __ pc());                     \/\/        b.NV        .\n-    __ br(Assembler::NV, back);                        \/\/        b.NV        back\n-    __ br(Assembler::NV, forth);                       \/\/        b.NV        forth\n+    __ br(Assembler::EQ, __ pc());                     \/\/ b.EQ  .\n+    __ br(Assembler::EQ, back);                        \/\/ b.EQ  back\n+    __ br(Assembler::EQ, forth);                       \/\/ b.EQ  forth\n+    __ br(Assembler::NE, __ pc());                     \/\/ b.NE  .\n+    __ br(Assembler::NE, back);                        \/\/ b.NE  back\n+    __ br(Assembler::NE, forth);                       \/\/ b.NE  forth\n+    __ br(Assembler::HS, __ pc());                     \/\/ b.HS  .\n+    __ br(Assembler::HS, back);                        \/\/ b.HS  back\n+    __ br(Assembler::HS, forth);                       \/\/ b.HS  forth\n+    __ br(Assembler::CS, __ pc());                     \/\/ b.CS  .\n+    __ br(Assembler::CS, back);                        \/\/ b.CS  back\n+    __ br(Assembler::CS, forth);                       \/\/ b.CS  forth\n+    __ br(Assembler::LO, __ pc());                     \/\/ b.LO  .\n+    __ br(Assembler::LO, back);                        \/\/ b.LO  back\n+    __ br(Assembler::LO, forth);                       \/\/ b.LO  forth\n+    __ br(Assembler::CC, __ pc());                     \/\/ b.CC  .\n+    __ br(Assembler::CC, back);                        \/\/ b.CC  back\n+    __ br(Assembler::CC, forth);                       \/\/ b.CC  forth\n+    __ br(Assembler::MI, __ pc());                     \/\/ b.MI  .\n+    __ br(Assembler::MI, back);                        \/\/ b.MI  back\n+    __ br(Assembler::MI, forth);                       \/\/ b.MI  forth\n+    __ br(Assembler::PL, __ pc());                     \/\/ b.PL  .\n+    __ br(Assembler::PL, back);                        \/\/ b.PL  back\n+    __ br(Assembler::PL, forth);                       \/\/ b.PL  forth\n+    __ br(Assembler::VS, __ pc());                     \/\/ b.VS  .\n+    __ br(Assembler::VS, back);                        \/\/ b.VS  back\n+    __ br(Assembler::VS, forth);                       \/\/ b.VS  forth\n+    __ br(Assembler::VC, __ pc());                     \/\/ b.VC  .\n+    __ br(Assembler::VC, back);                        \/\/ b.VC  back\n+    __ br(Assembler::VC, forth);                       \/\/ b.VC  forth\n+    __ br(Assembler::HI, __ pc());                     \/\/ b.HI  .\n+    __ br(Assembler::HI, back);                        \/\/ b.HI  back\n+    __ br(Assembler::HI, forth);                       \/\/ b.HI  forth\n+    __ br(Assembler::LS, __ pc());                     \/\/ b.LS  .\n+    __ br(Assembler::LS, back);                        \/\/ b.LS  back\n+    __ br(Assembler::LS, forth);                       \/\/ b.LS  forth\n+    __ br(Assembler::GE, __ pc());                     \/\/ b.GE  .\n+    __ br(Assembler::GE, back);                        \/\/ b.GE  back\n+    __ br(Assembler::GE, forth);                       \/\/ b.GE  forth\n+    __ br(Assembler::LT, __ pc());                     \/\/ b.LT  .\n+    __ br(Assembler::LT, back);                        \/\/ b.LT  back\n+    __ br(Assembler::LT, forth);                       \/\/ b.LT  forth\n+    __ br(Assembler::GT, __ pc());                     \/\/ b.GT  .\n+    __ br(Assembler::GT, back);                        \/\/ b.GT  back\n+    __ br(Assembler::GT, forth);                       \/\/ b.GT  forth\n+    __ br(Assembler::LE, __ pc());                     \/\/ b.LE  .\n+    __ br(Assembler::LE, back);                        \/\/ b.LE  back\n+    __ br(Assembler::LE, forth);                       \/\/ b.LE  forth\n+    __ br(Assembler::AL, __ pc());                     \/\/ b.AL  .\n+    __ br(Assembler::AL, back);                        \/\/ b.AL  back\n+    __ br(Assembler::AL, forth);                       \/\/ b.AL  forth\n+    __ br(Assembler::NV, __ pc());                     \/\/ b.NV  .\n+    __ br(Assembler::NV, back);                        \/\/ b.NV  back\n+    __ br(Assembler::NV, forth);                       \/\/ b.NV  forth\n@@ -255,5 +255,5 @@\n-    __ svc(22064);                                     \/\/        svc        #22064\n-    __ hvc(533);                                       \/\/        hvc        #533\n-    __ smc(9942);                                      \/\/        smc        #9942\n-    __ brk(4714);                                      \/\/        brk        #4714\n-    __ hlt(4302);                                      \/\/        hlt        #4302\n+    __ svc(26948);                                     \/\/ svc #26948\n+    __ hvc(29998);                                     \/\/ hvc #29998\n+    __ smc(10437);                                     \/\/ smc #10437\n+    __ brk(30290);                                     \/\/ brk #30290\n+    __ hlt(20851);                                     \/\/ hlt #20851\n@@ -262,4 +262,4 @@\n-    __ nop();                                          \/\/        nop\n-    __ eret();                                         \/\/        eret\n-    __ drps();                                         \/\/        drps\n-    __ isb();                                          \/\/        isb\n+    __ nop();                                          \/\/ nop\n+    __ eret();                                         \/\/ eret\n+    __ drps();                                         \/\/ drps\n+    __ isb();                                          \/\/ isb\n@@ -268,2 +268,2 @@\n-    __ dsb(Assembler::OSH);                            \/\/        dsb        OSH\n-    __ dmb(Assembler::NSHLD);                          \/\/        dmb        NSHLD\n+    __ dsb(Assembler::LD);                             \/\/ dsb LD\n+    __ dmb(Assembler::ISH);                            \/\/ dmb ISH\n@@ -272,2 +272,2 @@\n-    __ br(r20);                                        \/\/        br        x20\n-    __ blr(r2);                                        \/\/        blr        x2\n+    __ br(r9);                                         \/\/ br  x9\n+    __ blr(r9);                                        \/\/ blr x9\n@@ -276,6 +276,6 @@\n-    __ stxr(r18, r23, r0);                             \/\/        stxr        w18, x23, [x0]\n-    __ stlxr(r30, r5, r22);                            \/\/        stlxr        w30, x5, [x22]\n-    __ ldxr(r5, r8);                                   \/\/        ldxr        x5, [x8]\n-    __ ldaxr(r20, r16);                                \/\/        ldaxr        x20, [x16]\n-    __ stlr(r6, r11);                                  \/\/        stlr        x6, [x11]\n-    __ ldar(r6, r27);                                  \/\/        ldar        x6, [x27]\n+    __ stxr(r2, r29, r11);                             \/\/ stxr  w2, x29, [x11]\n+    __ stlxr(r22, r5, r28);                            \/\/ stlxr w22, x5, [x28]\n+    __ ldxr(r14, r20);                                 \/\/ ldxr  x14, [x20]\n+    __ ldaxr(r29, r19);                                \/\/ ldaxr x29, [x19]\n+    __ stlr(r6, r21);                                  \/\/ stlr  x6, [x21]\n+    __ ldar(r19, r3);                                  \/\/ ldar  x19, [x3]\n@@ -284,6 +284,6 @@\n-    __ stxrw(r10, r17, r5);                            \/\/        stxr        w10, w17, [x5]\n-    __ stlxrw(r22, r9, r12);                           \/\/        stlxr        w22, w9, [x12]\n-    __ ldxrw(r27, r8);                                 \/\/        ldxr        w27, [x8]\n-    __ ldaxrw(r23, r2);                                \/\/        ldaxr        w23, [x2]\n-    __ stlrw(r26, r29);                                \/\/        stlr        w26, [x29]\n-    __ ldarw(r13, r10);                                \/\/        ldar        w13, [x10]\n+    __ stxrw(r12, r3, r27);                            \/\/ stxr  w12, w3, [x27]\n+    __ stlxrw(r17, r26, r15);                          \/\/ stlxr w17, w26, [x15]\n+    __ ldxrw(r13, r14);                                \/\/ ldxr  w13, [x14]\n+    __ ldaxrw(r12, r26);                               \/\/ ldaxr w12, [x26]\n+    __ stlrw(r8, r17);                                 \/\/ stlr  w8, [x17]\n+    __ ldarw(r21, r30);                                \/\/ ldar  w21, [x30]\n@@ -292,6 +292,6 @@\n-    __ stxrh(r25, r28, r27);                           \/\/        stxrh        w25, w28, [x27]\n-    __ stlxrh(r29, r22, r12);                          \/\/        stlxrh        w29, w22, [x12]\n-    __ ldxrh(r22, r28);                                \/\/        ldxrh        w22, [x28]\n-    __ ldaxrh(r3, r30);                                \/\/        ldaxrh        w3, [x30]\n-    __ stlrh(r24, r15);                                \/\/        stlrh        w24, [x15]\n-    __ ldarh(r27, r26);                                \/\/        ldarh        w27, [x26]\n+    __ stxrh(r0, r15, r11);                            \/\/ stxrh w0, w15, [x11]\n+    __ stlxrh(r17, r20, r1);                           \/\/ stlxrh  w17, w20, [x1]\n+    __ ldxrh(r29, r8);                                 \/\/ ldxrh w29, [x8]\n+    __ ldaxrh(r17, r12);                               \/\/ ldaxrh  w17, [x12]\n+    __ stlrh(r11, r4);                                 \/\/ stlrh w11, [x4]\n+    __ ldarh(r16, r4);                                 \/\/ ldarh w16, [x4]\n@@ -300,6 +300,6 @@\n-    __ stxrb(r11, r10, r19);                           \/\/        stxrb        w11, w10, [x19]\n-    __ stlxrb(r23, r27, r22);                          \/\/        stlxrb        w23, w27, [x22]\n-    __ ldxrb(r24, r16);                                \/\/        ldxrb        w24, [x16]\n-    __ ldaxrb(r24, r1);                                \/\/        ldaxrb        w24, [x1]\n-    __ stlrb(r5, r29);                                 \/\/        stlrb        w5, [x29]\n-    __ ldarb(r24, r16);                                \/\/        ldarb        w24, [x16]\n+    __ stxrb(r14, r5, r4);                             \/\/ stxrb w14, w5, [x4]\n+    __ stlxrb(r27, r17, r16);                          \/\/ stlxrb  w27, w17, [x16]\n+    __ ldxrb(r6, r27);                                 \/\/ ldxrb w6, [x27]\n+    __ ldaxrb(r27, r24);                               \/\/ ldaxrb  w27, [x24]\n+    __ stlrb(r10, r20);                                \/\/ stlrb w10, [x20]\n+    __ ldarb(r9, r26);                                 \/\/ ldarb w9, [x26]\n@@ -308,4 +308,4 @@\n-    __ ldxp(r25, r24, r17);                            \/\/        ldxp        x25, x24, [x17]\n-    __ ldaxp(r22, r12, r19);                           \/\/        ldaxp        x22, x12, [x19]\n-    __ stxp(r0, r26, r21, r25);                        \/\/        stxp        w0, x26, x21, [x25]\n-    __ stlxp(r1, r6, r11, r5);                         \/\/        stlxp        w1, x6, x11, [x5]\n+    __ ldxp(r5, r30, r28);                             \/\/ ldxp  x5, x30, [x28]\n+    __ ldaxp(r10, r9, r19);                            \/\/ ldaxp x10, x9, [x19]\n+    __ stxp(r11, r16, r21, r12);                       \/\/ stxp  w11, x16, x21, [x12]\n+    __ stlxp(r10, r20, r23, r4);                       \/\/ stlxp w10, x20, x23, [x4]\n@@ -314,4 +314,4 @@\n-    __ ldxpw(r13, r14, r4);                            \/\/        ldxp        w13, w14, [x4]\n-    __ ldaxpw(r17, r2, r6);                            \/\/        ldaxp        w17, w2, [x6]\n-    __ stxpw(r15, r3, r9, r18);                        \/\/        stxp        w15, w3, w9, [x18]\n-    __ stlxpw(r18, r17, r4, r9);                       \/\/        stlxp        w18, w17, w4, [x9]\n+    __ ldxpw(r22, r1, r0);                             \/\/ ldxp  w22, w1, [x0]\n+    __ ldaxpw(r3, r1, r8);                             \/\/ ldaxp w3, w1, [x8]\n+    __ stxpw(r0, r9, r23, r30);                        \/\/ stxp  w0, w9, w23, [x30]\n+    __ stlxpw(r23, r0, r17, r11);                      \/\/ stlxp w23, w0, w17, [x11]\n@@ -321,16 +321,16 @@\n-    __ str(r23, Address(r21, -49));                    \/\/        str        x23, [x21, -49]\n-    __ strw(r21, Address(r2, 63));                     \/\/        str        w21, [x2, 63]\n-    __ strb(r27, Address(r28, 11));                    \/\/        strb        w27, [x28, 11]\n-    __ strh(r29, Address(r15, -13));                   \/\/        strh        w29, [x15, -13]\n-    __ ldr(r14, Address(r30, -45));                    \/\/        ldr        x14, [x30, -45]\n-    __ ldrw(r29, Address(r28, 53));                    \/\/        ldr        w29, [x28, 53]\n-    __ ldrb(r20, Address(r26, 7));                     \/\/        ldrb        w20, [x26, 7]\n-    __ ldrh(r25, Address(r2, -50));                    \/\/        ldrh        w25, [x2, -50]\n-    __ ldrsb(r3, Address(r10, -15));                   \/\/        ldrsb        x3, [x10, -15]\n-    __ ldrsh(r14, Address(r15, 19));                   \/\/        ldrsh        x14, [x15, 19]\n-    __ ldrshw(r29, Address(r11, -5));                  \/\/        ldrsh        w29, [x11, -5]\n-    __ ldrsw(r15, Address(r5, -71));                   \/\/        ldrsw        x15, [x5, -71]\n-    __ ldrd(v19, Address(r12, 3));                     \/\/        ldr        d19, [x12, 3]\n-    __ ldrs(v12, Address(r27, 42));                    \/\/        ldr        s12, [x27, 42]\n-    __ strd(v22, Address(r28, 125));                   \/\/        str        d22, [x28, 125]\n-    __ strs(v24, Address(r15, -20));                   \/\/        str        s24, [x15, -20]\n+    __ str(r6, Address(r10, -31));                     \/\/ str x6, [x10, -31]\n+    __ strw(r7, Address(r0, -5));                      \/\/ str w7, [x0, -5]\n+    __ strb(r5, Address(r16, -13));                    \/\/ strb  w5, [x16, -13]\n+    __ strh(r30, Address(r19, 31));                    \/\/ strh  w30, [x19, 31]\n+    __ ldr(r16, Address(r9, 119));                     \/\/ ldr x16, [x9, 119]\n+    __ ldrw(r8, Address(r16, 59));                     \/\/ ldr w8, [x16, 59]\n+    __ ldrb(r10, Address(r12, -7));                    \/\/ ldrb  w10, [x12, -7]\n+    __ ldrh(r14, Address(r9, -38));                    \/\/ ldrh  w14, [x9, -38]\n+    __ ldrsb(r24, Address(r30, -8));                   \/\/ ldrsb x24, [x30, -8]\n+    __ ldrsh(r7, Address(r4, 23));                     \/\/ ldrsh x7, [x4, 23]\n+    __ ldrshw(r17, Address(r14, -39));                 \/\/ ldrsh w17, [x14, -39]\n+    __ ldrsw(r11, Address(r27, -31));                  \/\/ ldrsw x11, [x27, -31]\n+    __ ldrd(v12, Address(r7, 65));                     \/\/ ldr d12, [x7, 65]\n+    __ ldrs(v0, Address(r16, -2));                     \/\/ ldr s0, [x16, -2]\n+    __ strd(v13, Address(r23, -161));                  \/\/ str d13, [x23, -161]\n+    __ strs(v21, Address(r3, -62));                    \/\/ str s21, [x3, -62]\n@@ -340,16 +340,16 @@\n-    __ str(r8, Address(__ pre(r28, -24)));             \/\/        str        x8, [x28, -24]!\n-    __ strw(r6, Address(__ pre(r15, 37)));             \/\/        str        w6, [x15, 37]!\n-    __ strb(r7, Address(__ pre(r1, 7)));               \/\/        strb        w7, [x1, 7]!\n-    __ strh(r0, Address(__ pre(r17, 30)));             \/\/        strh        w0, [x17, 30]!\n-    __ ldr(r25, Address(__ pre(r29, 84)));             \/\/        ldr        x25, [x29, 84]!\n-    __ ldrw(r26, Address(__ pre(r20, -52)));           \/\/        ldr        w26, [x20, -52]!\n-    __ ldrb(r26, Address(__ pre(r29, -25)));           \/\/        ldrb        w26, [x29, -25]!\n-    __ ldrh(r4, Address(__ pre(r25, 26)));             \/\/        ldrh        w4, [x25, 26]!\n-    __ ldrsb(r28, Address(__ pre(r8, -21)));           \/\/        ldrsb        x28, [x8, -21]!\n-    __ ldrsh(r17, Address(__ pre(r14, -6)));           \/\/        ldrsh        x17, [x14, -6]!\n-    __ ldrshw(r28, Address(__ pre(r23, 10)));          \/\/        ldrsh        w28, [x23, 10]!\n-    __ ldrsw(r30, Address(__ pre(r27, -64)));          \/\/        ldrsw        x30, [x27, -64]!\n-    __ ldrd(v20, Address(__ pre(r30, -242)));          \/\/        ldr        d20, [x30, -242]!\n-    __ ldrs(v17, Address(__ pre(r27, 20)));            \/\/        ldr        s17, [x27, 20]!\n-    __ strd(v7, Address(__ pre(r3, 17)));              \/\/        str        d7, [x3, 17]!\n-    __ strs(v13, Address(__ pre(r11, -16)));           \/\/        str        s13, [x11, -16]!\n+    __ str(r2, Address(__ pre(r5, 100)));              \/\/ str x2, [x5, 100]!\n+    __ strw(r9, Address(__ pre(r1, -92)));             \/\/ str w9, [x1, -92]!\n+    __ strb(r27, Address(__ pre(r30, -5)));            \/\/ strb  w27, [x30, -5]!\n+    __ strh(r27, Address(__ pre(r15, 12)));            \/\/ strh  w27, [x15, 12]!\n+    __ ldr(r4, Address(__ pre(r17, -212)));            \/\/ ldr x4, [x17, -212]!\n+    __ ldrw(r21, Address(__ pre(r23, 30)));            \/\/ ldr w21, [x23, 30]!\n+    __ ldrb(r13, Address(__ pre(r17, -7)));            \/\/ ldrb  w13, [x17, -7]!\n+    __ ldrh(r25, Address(__ pre(r0, -50)));            \/\/ ldrh  w25, [x0, -50]!\n+    __ ldrsb(r1, Address(__ pre(r21, -21)));           \/\/ ldrsb x1, [x21, -21]!\n+    __ ldrsh(r28, Address(__ pre(r21, -54)));          \/\/ ldrsh x28, [x21, -54]!\n+    __ ldrshw(r11, Address(__ pre(r4, 2)));            \/\/ ldrsh w11, [x4, 2]!\n+    __ ldrsw(r17, Address(__ pre(r9, 61)));            \/\/ ldrsw x17, [x9, 61]!\n+    __ ldrd(v29, Address(__ pre(r19, 39)));            \/\/ ldr d29, [x19, 39]!\n+    __ ldrs(v22, Address(__ pre(r22, -85)));           \/\/ ldr s22, [x22, -85]!\n+    __ strd(v9, Address(__ pre(r25, -225)));           \/\/ str d9, [x25, -225]!\n+    __ strs(v9, Address(__ pre(r2, -15)));             \/\/ str s9, [x2, -15]!\n@@ -359,16 +359,16 @@\n-    __ str(r6, Address(__ post(r9, -61)));             \/\/        str        x6, [x9], -61\n-    __ strw(r16, Address(__ post(r5, -29)));           \/\/        str        w16, [x5], -29\n-    __ strb(r29, Address(__ post(r29, 15)));           \/\/        strb        w29, [x29], 15\n-    __ strh(r4, Address(__ post(r20, 18)));            \/\/        strh        w4, [x20], 18\n-    __ ldr(r19, Address(__ post(r18, 46)));            \/\/        ldr        x19, [x18], 46\n-    __ ldrw(r22, Address(__ post(r2, 23)));            \/\/        ldr        w22, [x2], 23\n-    __ ldrb(r7, Address(__ post(r3, -30)));            \/\/        ldrb        w7, [x3], -30\n-    __ ldrh(r11, Address(__ post(r12, -29)));          \/\/        ldrh        w11, [x12], -29\n-    __ ldrsb(r8, Address(__ post(r6, -29)));           \/\/        ldrsb        x8, [x6], -29\n-    __ ldrsh(r24, Address(__ post(r23, 4)));           \/\/        ldrsh        x24, [x23], 4\n-    __ ldrshw(r17, Address(__ post(r16, 0)));          \/\/        ldrsh        w17, [x16], 0\n-    __ ldrsw(r0, Address(__ post(r20, -8)));           \/\/        ldrsw        x0, [x20], -8\n-    __ ldrd(v20, Address(__ post(r2, -126)));          \/\/        ldr        d20, [x2], -126\n-    __ ldrs(v19, Address(__ post(r30, -104)));         \/\/        ldr        s19, [x30], -104\n-    __ strd(v4, Address(__ post(r17, 118)));           \/\/        str        d4, [x17], 118\n-    __ strs(v21, Address(__ post(r19, -112)));         \/\/        str        s21, [x19], -112\n+    __ str(r13, Address(__ post(r23, -66)));           \/\/ str x13, [x23], -66\n+    __ strw(r17, Address(__ post(r16, 10)));           \/\/ str w17, [x16], 10\n+    __ strb(r1, Address(__ post(r14, -32)));           \/\/ strb  w1, [x14], -32\n+    __ strh(r17, Address(__ post(r0, 6)));             \/\/ strh  w17, [x0], 6\n+    __ ldr(r27, Address(__ post(r25, -172)));          \/\/ ldr x27, [x25], -172\n+    __ ldrw(r13, Address(__ post(r25, -38)));          \/\/ ldr w13, [x25], -38\n+    __ ldrb(r11, Address(__ post(r25, -29)));          \/\/ ldrb  w11, [x25], -29\n+    __ ldrh(r30, Address(__ post(r5, 20)));            \/\/ ldrh  w30, [x5], 20\n+    __ ldrsb(r9, Address(__ post(r7, -7)));            \/\/ ldrsb x9, [x7], -7\n+    __ ldrsh(r0, Address(__ post(r3, -62)));           \/\/ ldrsh x0, [x3], -62\n+    __ ldrshw(r7, Address(__ post(r14, 31)));          \/\/ ldrsh w7, [x14], 31\n+    __ ldrsw(r17, Address(__ post(r27, 39)));          \/\/ ldrsw x17, [x27], 39\n+    __ ldrd(v17, Address(__ post(r4, -235)));          \/\/ ldr d17, [x4], -235\n+    __ ldrs(v26, Address(__ post(r21, 34)));           \/\/ ldr s26, [x21], 34\n+    __ strd(v5, Address(__ post(r17, -57)));           \/\/ str d5, [x17], -57\n+    __ strs(v13, Address(__ post(r13, -109)));         \/\/ str s13, [x13], -109\n@@ -378,16 +378,16 @@\n-    __ str(r26, Address(r2, r19, Address::lsl(3)));    \/\/        str        x26, [x2, x19, lsl #3]\n-    __ strw(r9, Address(r0, r15, Address::sxtw(2)));   \/\/        str        w9, [x0, w15, sxtw #2]\n-    __ strb(r26, Address(r12, r1, Address::lsl(0)));   \/\/        strb        w26, [x12, x1, lsl #0]\n-    __ strh(r21, Address(r11, r10, Address::lsl(1)));  \/\/        strh        w21, [x11, x10, lsl #1]\n-    __ ldr(r16, Address(r23, r16, Address::sxtx(0)));  \/\/        ldr        x16, [x23, x16, sxtx #0]\n-    __ ldrw(r10, Address(r11, r17, Address::sxtw(2))); \/\/        ldr        w10, [x11, w17, sxtw #2]\n-    __ ldrb(r13, Address(r23, r11, Address::lsl(0)));  \/\/        ldrb        w13, [x23, x11, lsl #0]\n-    __ ldrh(r27, Address(r4, r21, Address::lsl(0)));   \/\/        ldrh        w27, [x4, x21, lsl #0]\n-    __ ldrsb(r26, Address(r8, r15, Address::sxtw(0))); \/\/        ldrsb        x26, [x8, w15, sxtw #0]\n-    __ ldrsh(r21, Address(r10, r2, Address::sxtw(0))); \/\/        ldrsh        x21, [x10, w2, sxtw #0]\n-    __ ldrshw(r8, Address(r30, r14, Address::lsl(0))); \/\/        ldrsh        w8, [x30, x14, lsl #0]\n-    __ ldrsw(r29, Address(r14, r20, Address::sxtx(2))); \/\/        ldrsw        x29, [x14, x20, sxtx #2]\n-    __ ldrd(v30, Address(r27, r22, Address::sxtx(0))); \/\/        ldr        d30, [x27, x22, sxtx #0]\n-    __ ldrs(v13, Address(r9, r22, Address::lsl(0)));   \/\/        ldr        s13, [x9, x22, lsl #0]\n-    __ strd(v8, Address(r25, r17, Address::sxtw(3)));  \/\/        str        d8, [x25, w17, sxtw #3]\n-    __ strs(v1, Address(r24, r5, Address::uxtw(2)));   \/\/        str        s1, [x24, w5, uxtw #2]\n+    __ str(r6, Address(r16, r4, Address::sxtw(3)));    \/\/ str x6, [x16, w4, sxtw #3]\n+    __ strw(r9, Address(r24, r20, Address::sxtw(2)));  \/\/ str w9, [x24, w20, sxtw #2]\n+    __ strb(r3, Address(r29, r3, Address::lsl(0)));    \/\/ strb  w3, [x29, x3, lsl #0]\n+    __ strh(r10, Address(r17, r30, Address::lsl(0)));  \/\/ strh  w10, [x17, x30, lsl #0]\n+    __ ldr(r27, Address(r11, r7, Address::uxtw(0)));   \/\/ ldr x27, [x11, w7, uxtw #0]\n+    __ ldrw(r14, Address(r15, r25, Address::uxtw(0))); \/\/ ldr w14, [x15, w25, uxtw #0]\n+    __ ldrb(r24, Address(r14, r19, Address::lsl(0)));  \/\/ ldrb  w24, [x14, x19, lsl #0]\n+    __ ldrh(r16, Address(r0, r6, Address::sxtw(0)));   \/\/ ldrh  w16, [x0, w6, sxtw #0]\n+    __ ldrsb(r10, Address(r12, r12, Address::sxtw(0))); \/\/  ldrsb x10, [x12, w12, sxtw #0]\n+    __ ldrsh(r26, Address(r12, r16, Address::uxtw(0))); \/\/  ldrsh x26, [x12, w16, uxtw #0]\n+    __ ldrshw(r26, Address(r0, r14, Address::lsl(1))); \/\/ ldrsh w26, [x0, x14, lsl #1]\n+    __ ldrsw(r17, Address(r11, r27, Address::sxtx(2))); \/\/  ldrsw x17, [x11, x27, sxtx #2]\n+    __ ldrd(v3, Address(r0, r19, Address::sxtw(3)));   \/\/ ldr d3, [x0, w19, sxtw #3]\n+    __ ldrs(v26, Address(r15, r9, Address::lsl(2)));   \/\/ ldr s26, [x15, x9, lsl #2]\n+    __ strd(v11, Address(r13, r16, Address::sxtx(0))); \/\/ str d11, [x13, x16, sxtx #0]\n+    __ strs(v26, Address(r19, r21, Address::uxtw(2))); \/\/ str s26, [x19, w21, uxtw #2]\n@@ -397,16 +397,16 @@\n-    __ str(r10, Address(r21, 14496));                  \/\/        str        x10, [x21, 14496]\n-    __ strw(r18, Address(r29, 7228));                  \/\/        str        w18, [x29, 7228]\n-    __ strb(r23, Address(r3, 2018));                   \/\/        strb        w23, [x3, 2018]\n-    __ strh(r28, Address(r11, 3428));                  \/\/        strh        w28, [x11, 3428]\n-    __ ldr(r24, Address(r26, 14376));                  \/\/        ldr        x24, [x26, 14376]\n-    __ ldrw(r21, Address(r2, 6972));                   \/\/        ldr        w21, [x2, 6972]\n-    __ ldrb(r4, Address(r5, 1848));                    \/\/        ldrb        w4, [x5, 1848]\n-    __ ldrh(r14, Address(r14, 3112));                  \/\/        ldrh        w14, [x14, 3112]\n-    __ ldrsb(r4, Address(r27, 1959));                  \/\/        ldrsb        x4, [x27, 1959]\n-    __ ldrsh(r4, Address(r27, 3226));                  \/\/        ldrsh        x4, [x27, 3226]\n-    __ ldrshw(r10, Address(r28, 3286));                \/\/        ldrsh        w10, [x28, 3286]\n-    __ ldrsw(r10, Address(r17, 7912));                 \/\/        ldrsw        x10, [x17, 7912]\n-    __ ldrd(v13, Address(r28, 13400));                 \/\/        ldr        d13, [x28, 13400]\n-    __ ldrs(v24, Address(r3, 7596));                   \/\/        ldr        s24, [x3, 7596]\n-    __ strd(v2, Address(r12, 15360));                  \/\/        str        d2, [x12, 15360]\n-    __ strs(v17, Address(r1, 6492));                   \/\/        str        s17, [x1, 6492]\n+    __ str(r8, Address(r21, 12552));                   \/\/ str x8, [x21, 12552]\n+    __ strw(r10, Address(r27, 6380));                  \/\/ str w10, [x27, 6380]\n+    __ strb(r27, Address(r14, 1733));                  \/\/ strb  w27, [x14, 1733]\n+    __ strh(r16, Address(r7, 3424));                   \/\/ strh  w16, [x7, 3424]\n+    __ ldr(r27, Address(r9, 12520));                   \/\/ ldr x27, [x9, 12520]\n+    __ ldrw(r24, Address(r10, 6680));                  \/\/ ldr w24, [x10, 6680]\n+    __ ldrb(r24, Address(r24, 1743));                  \/\/ ldrb  w24, [x24, 1743]\n+    __ ldrh(r20, Address(r5, 3072));                   \/\/ ldrh  w20, [x5, 3072]\n+    __ ldrsb(r17, Address(r4, 1570));                  \/\/ ldrsb x17, [x4, 1570]\n+    __ ldrsh(r14, Address(r13, 3392));                 \/\/ ldrsh x14, [x13, 3392]\n+    __ ldrshw(r10, Address(r25, 3722));                \/\/ ldrsh w10, [x25, 3722]\n+    __ ldrsw(r2, Address(r26, 6160));                  \/\/ ldrsw x2, [x26, 6160]\n+    __ ldrd(v26, Address(r14, 14912));                 \/\/ ldr d26, [x14, 14912]\n+    __ ldrs(v28, Address(r4, 7804));                   \/\/ ldr s28, [x4, 7804]\n+    __ strd(v14, Address(r19, 13984));                 \/\/ str d14, [x19, 13984]\n+    __ strs(v23, Address(r28, 6364));                  \/\/ str s23, [x28, 6364]\n@@ -416,2 +416,2 @@\n-    __ ldr(r16, __ pc());                              \/\/        ldr        x16, .\n-    __ ldrw(r13, __ pc());                             \/\/        ldr        w13, .\n+    __ ldr(r8, forth);                                 \/\/ ldr x8, forth\n+    __ ldrw(r17, back);                                \/\/ ldr w17, back\n@@ -420,1 +420,1 @@\n-    __ prfm(Address(r18, -127));                       \/\/        prfm        PLDL1KEEP, [x18, -127]\n+    __ prfm(Address(r4, -175));                        \/\/ prfm  PLDL1KEEP, [x4, -175]\n@@ -423,1 +423,1 @@\n-    __ prfm(back);                                     \/\/        prfm        PLDL1KEEP, back\n+    __ prfm(__ pc());                                  \/\/ prfm  PLDL1KEEP, .\n@@ -426,1 +426,1 @@\n-    __ prfm(Address(r20, r2, Address::lsl(3)));        \/\/        prfm        PLDL1KEEP, [x20, x2, lsl #3]\n+    __ prfm(Address(r8, r4, Address::sxtw(0)));        \/\/ prfm  PLDL1KEEP, [x8, w4, sxtw #0]\n@@ -429,1 +429,1 @@\n-    __ prfm(Address(r9, 13808));                       \/\/        prfm        PLDL1KEEP, [x9, 13808]\n+    __ prfm(Address(r12, 13248));                      \/\/ prfm  PLDL1KEEP, [x12, 13248]\n@@ -432,8 +432,8 @@\n-    __ adcw(r8, r23, r2);                              \/\/        adc        w8, w23, w2\n-    __ adcsw(r24, r3, r19);                            \/\/        adcs        w24, w3, w19\n-    __ sbcw(r22, r24, r29);                            \/\/        sbc        w22, w24, w29\n-    __ sbcsw(r12, r27, r3);                            \/\/        sbcs        w12, w27, w3\n-    __ adc(r11, r23, r1);                              \/\/        adc        x11, x23, x1\n-    __ adcs(r29, r5, r23);                             \/\/        adcs        x29, x5, x23\n-    __ sbc(r9, r25, r12);                              \/\/        sbc        x9, x25, x12\n-    __ sbcs(r12, r0, r22);                             \/\/        sbcs        x12, x0, x22\n+    __ adcw(r20, r27, r21);                            \/\/ adc w20, w27, w21\n+    __ adcsw(r7, r17, r6);                             \/\/ adcs  w7, w17, w6\n+    __ sbcw(r5, r6, r25);                              \/\/ sbc w5, w6, w25\n+    __ sbcsw(r30, r11, r14);                           \/\/ sbcs  w30, w11, w14\n+    __ adc(r3, r17, r11);                              \/\/ adc x3, x17, x11\n+    __ adcs(r25, r10, r17);                            \/\/ adcs  x25, x10, x17\n+    __ sbc(r7, r16, r23);                              \/\/ sbc x7, x16, x23\n+    __ sbcs(r4, r10, r5);                              \/\/ sbcs  x4, x10, x5\n@@ -442,8 +442,8 @@\n-    __ addw(r26, r12, r3, ext::uxtw, 1);               \/\/        add        w26, w12, w3, uxtw #1\n-    __ addsw(r20, r16, r18, ext::sxtb, 2);             \/\/        adds        w20, w16, w18, sxtb #2\n-    __ sub(r30, r30, r7, ext::uxtw, 2);                \/\/        sub        x30, x30, x7, uxtw #2\n-    __ subsw(r11, r21, r2, ext::uxth, 3);              \/\/        subs        w11, w21, w2, uxth #3\n-    __ add(r2, r26, r1, ext::uxtw, 2);                 \/\/        add        x2, x26, x1, uxtw #2\n-    __ adds(r18, r29, r20, ext::sxth, 1);              \/\/        adds        x18, x29, x20, sxth #1\n-    __ sub(r14, r16, r4, ext::uxtw, 4);                \/\/        sub        x14, x16, x4, uxtw #4\n-    __ subs(r0, r17, r23, ext::sxtb, 3);               \/\/        subs        x0, x17, x23, sxtb #3\n+    __ addw(r9, r30, r9, ext::uxtx, 4);                \/\/ add w9, w30, w9, uxtx #4\n+    __ addsw(r0, r5, r16, ext::sxth, 2);               \/\/ adds  w0, w5, w16, sxth #2\n+    __ sub(r15, r29, r27, ext::sxtb, 2);               \/\/ sub x15, x29, x27, sxtb #2\n+    __ subsw(r11, r9, r1, ext::sxtx, 4);               \/\/ subs  w11, w9, w1, sxtx #4\n+    __ add(r2, r24, r6, ext::uxtw, 3);                 \/\/ add x2, x24, x6, uxtw #3\n+    __ adds(r19, r6, r26, ext::uxtx, 4);               \/\/ adds  x19, x6, x26, uxtx #4\n+    __ sub(r8, r26, r25, ext::sxtx, 3);                \/\/ sub x8, x26, x25, sxtx #3\n+    __ subs(r26, r20, r9, ext::uxth, 4);               \/\/ subs  x26, x20, x9, uxth #4\n@@ -452,4 +452,4 @@\n-    __ ccmnw(r20, r22, 3u, Assembler::PL);             \/\/        ccmn        w20, w22, #3, PL\n-    __ ccmpw(r25, r2, 1u, Assembler::EQ);              \/\/        ccmp        w25, w2, #1, EQ\n-    __ ccmn(r18, r24, 7u, Assembler::GT);              \/\/        ccmn        x18, x24, #7, GT\n-    __ ccmp(r8, r13, 6u, Assembler::PL);               \/\/        ccmp        x8, x13, #6, PL\n+    __ ccmnw(r13, r26, 7u, Assembler::MI);             \/\/ ccmn  w13, w26, #7, MI\n+    __ ccmpw(r8, r20, 15u, Assembler::LO);             \/\/ ccmp  w8, w20, #15, LO\n+    __ ccmn(r22, r3, 8u, Assembler::EQ);               \/\/ ccmn  x22, x3, #8, EQ\n+    __ ccmp(r2, r24, 10u, Assembler::GE);              \/\/ ccmp  x2, x24, #10, GE\n@@ -458,4 +458,4 @@\n-    __ ccmnw(r9, 2, 4, Assembler::VS);                 \/\/        ccmn        w9, #2, #4, VS\n-    __ ccmpw(r2, 27, 7, Assembler::EQ);                \/\/        ccmp        w2, #27, #7, EQ\n-    __ ccmn(r16, 1, 2, Assembler::CC);                 \/\/        ccmn        x16, #1, #2, CC\n-    __ ccmp(r17, 31, 3, Assembler::LT);                \/\/        ccmp        x17, #31, #3, LT\n+    __ ccmnw(r8, 16, 13, Assembler::MI);               \/\/ ccmn  w8, #16, #13, MI\n+    __ ccmpw(r16, 12, 1, Assembler::EQ);               \/\/ ccmp  w16, #12, #1, EQ\n+    __ ccmn(r15, 31, 3, Assembler::VC);                \/\/ ccmn  x15, #31, #3, VC\n+    __ ccmp(r23, 12, 15, Assembler::EQ);               \/\/ ccmp  x23, #12, #15, EQ\n@@ -464,8 +464,8 @@\n-    __ cselw(r23, r27, r23, Assembler::LS);            \/\/        csel        w23, w27, w23, LS\n-    __ csincw(r10, r0, r6, Assembler::VS);             \/\/        csinc        w10, w0, w6, VS\n-    __ csinvw(r11, r0, r9, Assembler::CC);             \/\/        csinv        w11, w0, w9, CC\n-    __ csnegw(r17, r27, r18, Assembler::LO);           \/\/        csneg        w17, w27, w18, LO\n-    __ csel(r12, r16, r11, Assembler::VC);             \/\/        csel        x12, x16, x11, VC\n-    __ csinc(r6, r28, r6, Assembler::HI);              \/\/        csinc        x6, x28, x6, HI\n-    __ csinv(r13, r27, r26, Assembler::VC);            \/\/        csinv        x13, x27, x26, VC\n-    __ csneg(r29, r22, r18, Assembler::PL);            \/\/        csneg        x29, x22, x18, PL\n+    __ cselw(r14, r7, r26, Assembler::LO);             \/\/ csel  w14, w7, w26, LO\n+    __ csincw(r3, r27, r30, Assembler::LE);            \/\/ csinc w3, w27, w30, LE\n+    __ csinvw(r11, r21, r23, Assembler::EQ);           \/\/ csinv w11, w21, w23, EQ\n+    __ csnegw(r26, r30, r21, Assembler::GT);           \/\/ csneg w26, w30, w21, GT\n+    __ csel(r28, r26, r13, Assembler::HI);             \/\/ csel  x28, x26, x13, HI\n+    __ csinc(r17, r3, r16, Assembler::LS);             \/\/ csinc x17, x3, x16, LS\n+    __ csinv(r11, r5, r3, Assembler::HI);              \/\/ csinv x11, x5, x3, HI\n+    __ csneg(r1, r3, r19, Assembler::GT);              \/\/ csneg x1, x3, x19, GT\n@@ -474,11 +474,11 @@\n-    __ rbitw(r12, r19);                                \/\/        rbit        w12, w19\n-    __ rev16w(r23, r18);                               \/\/        rev16        w23, w18\n-    __ revw(r9, r28);                                  \/\/        rev        w9, w28\n-    __ clzw(r2, r19);                                  \/\/        clz        w2, w19\n-    __ clsw(r25, r29);                                 \/\/        cls        w25, w29\n-    __ rbit(r4, r23);                                  \/\/        rbit        x4, x23\n-    __ rev16(r29, r18);                                \/\/        rev16        x29, x18\n-    __ rev32(r7, r8);                                  \/\/        rev32        x7, x8\n-    __ rev(r13, r17);                                  \/\/        rev        x13, x17\n-    __ clz(r17, r0);                                   \/\/        clz        x17, x0\n-    __ cls(r18, r26);                                  \/\/        cls        x18, x26\n+    __ rbitw(r0, r9);                                  \/\/ rbit  w0, w9\n+    __ rev16w(r26, r14);                               \/\/ rev16 w26, w14\n+    __ revw(r13, r17);                                 \/\/ rev w13, w17\n+    __ clzw(r11, r20);                                 \/\/ clz w11, w20\n+    __ clsw(r28, r17);                                 \/\/ cls w28, w17\n+    __ rbit(r13, r4);                                  \/\/ rbit  x13, x4\n+    __ rev16(r1, r30);                                 \/\/ rev16 x1, x30\n+    __ rev32(r13, r14);                                \/\/ rev32 x13, x14\n+    __ rev(r5, r8);                                    \/\/ rev x5, x8\n+    __ clz(r2, r25);                                   \/\/ clz x2, x25\n+    __ cls(r20, r8);                                   \/\/ cls x20, x8\n@@ -487,14 +487,14 @@\n-    __ udivw(r11, r12, r16);                           \/\/        udiv        w11, w12, w16\n-    __ sdivw(r4, r9, r7);                              \/\/        sdiv        w4, w9, w7\n-    __ lslvw(r12, r7, r16);                            \/\/        lslv        w12, w7, w16\n-    __ lsrvw(r19, r16, r23);                           \/\/        lsrv        w19, w16, w23\n-    __ asrvw(r7, r4, r6);                              \/\/        asrv        w7, w4, w6\n-    __ rorvw(r21, r20, r23);                           \/\/        rorv        w21, w20, w23\n-    __ udiv(r16, r12, r28);                            \/\/        udiv        x16, x12, x28\n-    __ sdiv(r4, r12, r13);                             \/\/        sdiv        x4, x12, x13\n-    __ lslv(r9, r13, r7);                              \/\/        lslv        x9, x13, x7\n-    __ lsrv(r28, r27, r15);                            \/\/        lsrv        x28, x27, x15\n-    __ asrv(r20, r30, r14);                            \/\/        asrv        x20, x30, x14\n-    __ rorv(r14, r18, r30);                            \/\/        rorv        x14, x18, x30\n-    __ umulh(r3, r11, r7);                             \/\/        umulh        x3, x11, x7\n-    __ smulh(r23, r20, r24);                           \/\/        smulh        x23, x20, x24\n+    __ udivw(r21, r25, r27);                           \/\/ udiv  w21, w25, w27\n+    __ sdivw(r13, r10, r16);                           \/\/ sdiv  w13, w10, w16\n+    __ lslvw(r28, r1, r17);                            \/\/ lslv  w28, w1, w17\n+    __ lsrvw(r25, r23, r10);                           \/\/ lsrv  w25, w23, w10\n+    __ asrvw(r7, r3, r7);                              \/\/ asrv  w7, w3, w7\n+    __ rorvw(r14, r30, r14);                           \/\/ rorv  w14, w30, w14\n+    __ udiv(r12, r22, r15);                            \/\/ udiv  x12, x22, x15\n+    __ sdiv(r2, r25, r13);                             \/\/ sdiv  x2, x25, x13\n+    __ lslv(r7, r23, r21);                             \/\/ lslv  x7, x23, x21\n+    __ lsrv(r11, r12, r0);                             \/\/ lsrv  x11, x12, x0\n+    __ asrv(r30, r9, r28);                             \/\/ asrv  x30, x9, x28\n+    __ rorv(r13, r5, r22);                             \/\/ rorv  x13, x5, x22\n+    __ umulh(r5, r21, r4);                             \/\/ umulh x5, x21, x4\n+    __ smulh(r17, r2, r7);                             \/\/ smulh x17, x2, x7\n@@ -503,8 +503,8 @@\n-    __ maddw(r2, r5, r21, r9);                         \/\/        madd        w2, w5, w21, w9\n-    __ msubw(r24, r24, r4, r8);                        \/\/        msub        w24, w24, w4, w8\n-    __ madd(r11, r12, r15, r19);                       \/\/        madd        x11, x12, x15, x19\n-    __ msub(r29, r25, r12, r25);                       \/\/        msub        x29, x25, x12, x25\n-    __ smaddl(r17, r11, r12, r22);                     \/\/        smaddl        x17, w11, w12, x22\n-    __ smsubl(r28, r3, r20, r18);                      \/\/        smsubl        x28, w3, w20, x18\n-    __ umaddl(r7, r4, r28, r26);                       \/\/        umaddl        x7, w4, w28, x26\n-    __ umsubl(r22, r10, r17, r5);                      \/\/        umsubl        x22, w10, w17, x5\n+    __ maddw(r12, r12, r17, r12);                      \/\/ madd  w12, w12, w17, w12\n+    __ msubw(r30, r15, r1, r27);                       \/\/ msub  w30, w15, w1, w27\n+    __ madd(r2, r19, r17, r29);                        \/\/ madd  x2, x19, x17, x29\n+    __ msub(r4, r23, r3, r30);                         \/\/ msub  x4, x23, x3, x30\n+    __ smaddl(r15, r23, r17, r15);                     \/\/ smaddl  x15, w23, w17, x15\n+    __ smsubl(r27, r12, r1, r13);                      \/\/ smsubl  x27, w12, w1, x13\n+    __ umaddl(r6, r13, r12, r17);                      \/\/ umaddl  x6, w13, w12, x17\n+    __ umsubl(r25, r1, r6, r10);                       \/\/ umsubl  x25, w1, w6, x10\n@@ -513,10 +513,10 @@\n-    __ fmuls(v17, v3, v17);                            \/\/        fmul        s17, s3, s17\n-    __ fdivs(v11, v17, v6);                            \/\/        fdiv        s11, s17, s6\n-    __ fadds(v29, v7, v9);                             \/\/        fadd        s29, s7, s9\n-    __ fsubs(v7, v12, v19);                            \/\/        fsub        s7, s12, s19\n-    __ fmuls(v0, v23, v3);                             \/\/        fmul        s0, s23, s3\n-    __ fmuld(v26, v3, v21);                            \/\/        fmul        d26, d3, d21\n-    __ fdivd(v0, v19, v5);                             \/\/        fdiv        d0, d19, d5\n-    __ faddd(v0, v26, v9);                             \/\/        fadd        d0, d26, d9\n-    __ fsubd(v25, v21, v21);                           \/\/        fsub        d25, d21, d21\n-    __ fmuld(v16, v13, v19);                           \/\/        fmul        d16, d13, d19\n+    __ fmuls(v17, v3, v4);                             \/\/ fmul  s17, s3, s4\n+    __ fdivs(v16, v5, v21);                            \/\/ fdiv  s16, s5, s21\n+    __ fadds(v3, v27, v17);                            \/\/ fadd  s3, s27, s17\n+    __ fsubs(v25, v10, v15);                           \/\/ fsub  s25, s10, s15\n+    __ fmuls(v10, v17, v0);                            \/\/ fmul  s10, s17, s0\n+    __ fmuld(v28, v26, v3);                            \/\/ fmul  d28, d26, d3\n+    __ fdivd(v4, v0, v27);                             \/\/ fdiv  d4, d0, d27\n+    __ faddd(v28, v14, v2);                            \/\/ fadd  d28, d14, d2\n+    __ fsubd(v12, v26, v23);                           \/\/ fsub  d12, d26, d23\n+    __ fmuld(v15, v30, v1);                            \/\/ fmul  d15, d30, d1\n@@ -525,8 +525,8 @@\n-    __ fmadds(v29, v18, v0, v16);                      \/\/        fmadd        s29, s18, s0, s16\n-    __ fmsubs(v23, v13, v29, v5);                      \/\/        fmsub        s23, s13, s29, s5\n-    __ fnmadds(v9, v7, v10, v14);                      \/\/        fnmadd        s9, s7, s10, s14\n-    __ fnmadds(v25, v28, v15, v23);                    \/\/        fnmadd        s25, s28, s15, s23\n-    __ fmaddd(v6, v13, v21, v17);                      \/\/        fmadd        d6, d13, d21, d17\n-    __ fmsubd(v3, v21, v2, v7);                        \/\/        fmsub        d3, d21, d2, d7\n-    __ fnmaddd(v10, v25, v5, v17);                     \/\/        fnmadd        d10, d25, d5, d17\n-    __ fnmaddd(v14, v14, v20, v18);                    \/\/        fnmadd        d14, d14, d20, d18\n+    __ fmadds(v4, v5, v5, v13);                        \/\/ fmadd s4, s5, s5, s13\n+    __ fmsubs(v21, v13, v28, v1);                      \/\/ fmsub s21, s13, s28, s1\n+    __ fnmadds(v17, v3, v29, v7);                      \/\/ fnmadd  s17, s3, s29, s7\n+    __ fnmadds(v23, v25, v29, v26);                    \/\/ fnmadd  s23, s25, s29, s26\n+    __ fmaddd(v14, v7, v30, v26);                      \/\/ fmadd d14, d7, d30, d26\n+    __ fmsubd(v22, v7, v10, v9);                       \/\/ fmsub d22, d7, d10, d9\n+    __ fnmaddd(v7, v7, v14, v9);                       \/\/ fnmadd  d7, d7, d14, d9\n+    __ fnmaddd(v14, v24, v15, v24);                    \/\/ fnmadd  d14, d24, d15, d24\n@@ -535,10 +535,10 @@\n-    __ fmovs(v15, v2);                                 \/\/        fmov        s15, s2\n-    __ fabss(v18, v7);                                 \/\/        fabs        s18, s7\n-    __ fnegs(v3, v6);                                  \/\/        fneg        s3, s6\n-    __ fsqrts(v12, v1);                                \/\/        fsqrt        s12, s1\n-    __ fcvts(v9, v0);                                  \/\/        fcvt        d9, s0\n-    __ fmovd(v4, v5);                                  \/\/        fmov        d4, d5\n-    __ fabsd(v3, v15);                                 \/\/        fabs        d3, d15\n-    __ fnegd(v17, v25);                                \/\/        fneg        d17, d25\n-    __ fsqrtd(v12, v24);                               \/\/        fsqrt        d12, d24\n-    __ fcvtd(v21, v5);                                 \/\/        fcvt        s21, d5\n+    __ fmovs(v22, v2);                                 \/\/ fmov  s22, s2\n+    __ fabss(v0, v3);                                  \/\/ fabs  s0, s3\n+    __ fnegs(v9, v17);                                 \/\/ fneg  s9, s17\n+    __ fsqrts(v24, v11);                               \/\/ fsqrt s24, s11\n+    __ fcvts(v15, v25);                                \/\/ fcvt  d15, s25\n+    __ fmovd(v4, v3);                                  \/\/ fmov  d4, d3\n+    __ fabsd(v26, v22);                                \/\/ fabs  d26, d22\n+    __ fnegd(v30, v19);                                \/\/ fneg  d30, d19\n+    __ fsqrtd(v12, v14);                               \/\/ fsqrt d12, d14\n+    __ fcvtd(v17, v7);                                 \/\/ fcvt  s17, d7\n@@ -547,12 +547,12 @@\n-    __ fcvtzsw(r4, v21);                               \/\/        fcvtzs        w4, s21\n-    __ fcvtzs(r27, v3);                                \/\/        fcvtzs        x27, s3\n-    __ fcvtzdw(r29, v8);                               \/\/        fcvtzs        w29, d8\n-    __ fcvtzd(r9, v21);                                \/\/        fcvtzs        x9, d21\n-    __ scvtfws(v20, r29);                              \/\/        scvtf        s20, w29\n-    __ scvtfs(v7, r8);                                 \/\/        scvtf        s7, x8\n-    __ scvtfwd(v12, r21);                              \/\/        scvtf        d12, w21\n-    __ scvtfd(v16, r21);                               \/\/        scvtf        d16, x21\n-    __ fmovs(r18, v5);                                 \/\/        fmov        w18, s5\n-    __ fmovd(r25, v8);                                 \/\/        fmov        x25, d8\n-    __ fmovs(v18, r26);                                \/\/        fmov        s18, w26\n-    __ fmovd(v0, r11);                                 \/\/        fmov        d0, x11\n+    __ fcvtzsw(r24, v14);                              \/\/ fcvtzs  w24, s14\n+    __ fcvtzs(r13, v26);                               \/\/ fcvtzs  x13, s26\n+    __ fcvtzdw(r2, v1);                                \/\/ fcvtzs  w2, d1\n+    __ fcvtzd(r5, v11);                                \/\/ fcvtzs  x5, d11\n+    __ scvtfws(v14, r19);                              \/\/ scvtf s14, w19\n+    __ scvtfs(v1, r22);                                \/\/ scvtf s1, x22\n+    __ scvtfwd(v27, r17);                              \/\/ scvtf d27, w17\n+    __ scvtfd(v22, r9);                                \/\/ scvtf d22, x9\n+    __ fmovs(r14, v3);                                 \/\/ fmov  w14, s3\n+    __ fmovd(r12, v17);                                \/\/ fmov  x12, d17\n+    __ fmovs(v8, r27);                                 \/\/ fmov  s8, w27\n+    __ fmovd(v29, r28);                                \/\/ fmov  d29, x28\n@@ -561,4 +561,4 @@\n-    __ fcmps(v16, v6);                                 \/\/        fcmp        s16, s6\n-    __ fcmpd(v16, v29);                                \/\/        fcmp        d16, d29\n-    __ fcmps(v30, 0.0);                                \/\/        fcmp        s30, #0.0\n-    __ fcmpd(v9, 0.0);                                 \/\/        fcmp        d9, #0.0\n+    __ fcmps(v0, v30);                                 \/\/ fcmp  s0, s30\n+    __ fcmpd(v12, v9);                                 \/\/ fcmp  d12, d9\n+    __ fcmps(v10, 0.0);                                \/\/ fcmp  s10, #0.0\n+    __ fcmpd(v25, 0.0);                                \/\/ fcmp  d25, #0.0\n@@ -567,5 +567,5 @@\n-    __ stpw(r27, r4, Address(r12, -16));               \/\/        stp        w27, w4, [x12, #-16]\n-    __ ldpw(r3, r9, Address(r10, 80));                 \/\/        ldp        w3, w9, [x10, #80]\n-    __ ldpsw(r16, r3, Address(r3, 64));                \/\/        ldpsw        x16, x3, [x3, #64]\n-    __ stp(r10, r28, Address(r19, -192));              \/\/        stp        x10, x28, [x19, #-192]\n-    __ ldp(r19, r18, Address(r7, -192));               \/\/        ldp        x19, x18, [x7, #-192]\n+    __ stpw(r8, r30, Address(r27, -144));              \/\/ stp w8, w30, [x27, #-144]\n+    __ ldpw(r21, r19, Address(r24, 80));               \/\/ ldp w21, w19, [x24, #80]\n+    __ ldpsw(r16, r27, Address(r2, -240));             \/\/ ldpsw x16, x27, [x2, #-240]\n+    __ stp(r21, r5, Address(r6, -128));                \/\/ stp x21, x5, [x6, #-128]\n+    __ ldp(r29, r25, Address(r28, -32));               \/\/ ldp x29, x25, [x28, #-32]\n@@ -574,5 +574,5 @@\n-    __ stpw(r10, r16, Address(__ pre(r30, 16)));       \/\/        stp        w10, w16, [x30, #16]!\n-    __ ldpw(r2, r4, Address(__ pre(r18, -240)));       \/\/        ldp        w2, w4, [x18, #-240]!\n-    __ ldpsw(r24, r19, Address(__ pre(r13, 48)));      \/\/        ldpsw        x24, x19, [x13, #48]!\n-    __ stp(r17, r0, Address(__ pre(r24, 0)));          \/\/        stp        x17, x0, [x24, #0]!\n-    __ ldp(r14, r26, Address(__ pre(r3, -192)));       \/\/        ldp        x14, x26, [x3, #-192]!\n+    __ stpw(r8, r13, Address(__ pre(r0, 128)));        \/\/ stp w8, w13, [x0, #128]!\n+    __ ldpw(r25, r20, Address(__ pre(r1, -160)));      \/\/ ldp w25, w20, [x1, #-160]!\n+    __ ldpsw(r14, r24, Address(__ pre(r22, -32)));     \/\/ ldpsw x14, x24, [x22, #-32]!\n+    __ stp(r17, r1, Address(__ pre(r6, 80)));          \/\/ stp x17, x1, [x6, #80]!\n+    __ ldp(r21, r17, Address(__ pre(r25, -64)));       \/\/ ldp x21, x17, [x25, #-64]!\n@@ -581,5 +581,5 @@\n-    __ stpw(r22, r1, Address(__ post(r0, 80)));        \/\/        stp        w22, w1, [x0], #80\n-    __ ldpw(r18, r10, Address(__ post(r0, -16)));      \/\/        ldp        w18, w10, [x0], #-16\n-    __ ldpsw(r24, r24, Address(__ post(r22, -16)));    \/\/        ldpsw        x24, x24, [x22], #-16\n-    __ stp(r12, r12, Address(__ post(r4, 80)));        \/\/        stp        x12, x12, [x4], #80\n-    __ ldp(r4, r9, Address(__ post(r19, -240)));       \/\/        ldp        x4, x9, [x19], #-240\n+    __ stpw(r17, r21, Address(__ post(r20, -128)));    \/\/ stp w17, w21, [x20], #-128\n+    __ ldpw(r28, r28, Address(__ post(r2, 64)));       \/\/ ldp w28, w28, [x2], #64\n+    __ ldpsw(r19, r30, Address(__ post(r10, -256)));   \/\/ ldpsw x19, x30, [x10], #-256\n+    __ stp(r17, r15, Address(__ post(r17, -16)));      \/\/ stp x17, x15, [x17], #-16\n+    __ ldp(r17, r0, Address(__ post(r25, -32)));       \/\/ ldp x17, x0, [x25], #-32\n@@ -588,4 +588,4 @@\n-    __ stnpw(r18, r26, Address(r6, -224));             \/\/        stnp        w18, w26, [x6, #-224]\n-    __ ldnpw(r21, r20, Address(r1, 112));              \/\/        ldnp        w21, w20, [x1, #112]\n-    __ stnp(r25, r29, Address(r20, -224));             \/\/        stnp        x25, x29, [x20, #-224]\n-    __ ldnp(r1, r5, Address(r23, 112));                \/\/        ldnp        x1, x5, [x23, #112]\n+    __ stnpw(r14, r5, Address(r24, -32));              \/\/ stnp  w14, w5, [x24, #-32]\n+    __ ldnpw(r23, r19, Address(r1, 112));              \/\/ ldnp  w23, w19, [x1, #112]\n+    __ stnp(r11, r6, Address(r14, 64));                \/\/ stnp  x11, x6, [x14, #64]\n+    __ ldnp(r2, r11, Address(r27, -224));              \/\/ ldnp  x2, x11, [x27, #-224]\n@@ -594,22 +594,22 @@\n-    __ ld1(v4, __ T8B, Address(r20));                  \/\/        ld1        {v4.8B}, [x20]\n-    __ ld1(v24, v25, __ T16B, Address(__ post(r10, 32))); \/\/        ld1        {v24.16B, v25.16B}, [x10], 32\n-    __ ld1(v24, v25, v26, __ T1D, Address(__ post(r6, r15))); \/\/        ld1        {v24.1D, v25.1D, v26.1D}, [x6], x15\n-    __ ld1(v3, v4, v5, v6, __ T8H, Address(__ post(r4, 64))); \/\/        ld1        {v3.8H, v4.8H, v5.8H, v6.8H}, [x4], 64\n-    __ ld1r(v2, __ T8B, Address(r6));                  \/\/        ld1r        {v2.8B}, [x6]\n-    __ ld1r(v13, __ T4S, Address(__ post(r14, 4)));    \/\/        ld1r        {v13.4S}, [x14], 4\n-    __ ld1r(v15, __ T1D, Address(__ post(r21, r24)));  \/\/        ld1r        {v15.1D}, [x21], x24\n-    __ ld2(v9, v10, __ T2D, Address(r21));             \/\/        ld2        {v9.2D, v10.2D}, [x21]\n-    __ ld2(v29, v30, __ T4H, Address(__ post(r21, 16))); \/\/        ld2        {v29.4H, v30.4H}, [x21], 16\n-    __ ld2r(v8, v9, __ T16B, Address(r14));            \/\/        ld2r        {v8.16B, v9.16B}, [x14]\n-    __ ld2r(v7, v8, __ T2S, Address(__ post(r20, 8))); \/\/        ld2r        {v7.2S, v8.2S}, [x20], 8\n-    __ ld2r(v28, v29, __ T2D, Address(__ post(r3, r3))); \/\/        ld2r        {v28.2D, v29.2D}, [x3], x3\n-    __ ld3(v27, v28, v29, __ T4S, Address(__ post(r11, r29))); \/\/        ld3        {v27.4S, v28.4S, v29.4S}, [x11], x29\n-    __ ld3(v16, v17, v18, __ T2S, Address(r10));       \/\/        ld3        {v16.2S, v17.2S, v18.2S}, [x10]\n-    __ ld3r(v21, v22, v23, __ T8H, Address(r12));      \/\/        ld3r        {v21.8H, v22.8H, v23.8H}, [x12]\n-    __ ld3r(v4, v5, v6, __ T4S, Address(__ post(r29, 12))); \/\/        ld3r        {v4.4S, v5.4S, v6.4S}, [x29], 12\n-    __ ld3r(v24, v25, v26, __ T1D, Address(__ post(r9, r19))); \/\/        ld3r        {v24.1D, v25.1D, v26.1D}, [x9], x19\n-    __ ld4(v10, v11, v12, v13, __ T8H, Address(__ post(r3, 64))); \/\/        ld4        {v10.8H, v11.8H, v12.8H, v13.8H}, [x3], 64\n-    __ ld4(v27, v28, v29, v30, __ T8B, Address(__ post(r28, r9))); \/\/        ld4        {v27.8B, v28.8B, v29.8B, v30.8B}, [x28], x9\n-    __ ld4r(v21, v22, v23, v24, __ T8B, Address(r30)); \/\/        ld4r        {v21.8B, v22.8B, v23.8B, v24.8B}, [x30]\n-    __ ld4r(v23, v24, v25, v26, __ T4H, Address(__ post(r14, 8))); \/\/        ld4r        {v23.4H, v24.4H, v25.4H, v26.4H}, [x14], 8\n-    __ ld4r(v4, v5, v6, v7, __ T2S, Address(__ post(r13, r20))); \/\/        ld4r        {v4.2S, v5.2S, v6.2S, v7.2S}, [x13], x20\n+    __ ld1(v16, __ T8B, Address(r17));                 \/\/ ld1 {v16.8B}, [x17]\n+    __ ld1(v29, v30, __ T16B, Address(__ post(r9, 32))); \/\/ ld1 {v29.16B, v30.16B}, [x9], 32\n+    __ ld1(v30, v31, v0, __ T1D, Address(__ post(r24, r21))); \/\/  ld1 {v30.1D, v31.1D, v0.1D}, [x24], x21\n+    __ ld1(v0, v1, v2, v3, __ T8H, Address(__ post(r2, 64))); \/\/  ld1 {v0.8H, v1.8H, v2.8H, v3.8H}, [x2], 64\n+    __ ld1r(v20, __ T8B, Address(r9));                 \/\/ ld1r  {v20.8B}, [x9]\n+    __ ld1r(v17, __ T4S, Address(__ post(r0, 4)));     \/\/ ld1r  {v17.4S}, [x0], 4\n+    __ ld1r(v21, __ T1D, Address(__ post(r22, r26)));  \/\/ ld1r  {v21.1D}, [x22], x26\n+    __ ld2(v19, v20, __ T2D, Address(r25));            \/\/ ld2 {v19.2D, v20.2D}, [x25]\n+    __ ld2(v10, v11, __ T4H, Address(__ post(r5, 16))); \/\/  ld2 {v10.4H, v11.4H}, [x5], 16\n+    __ ld2r(v10, v11, __ T16B, Address(r24));          \/\/ ld2r  {v10.16B, v11.16B}, [x24]\n+    __ ld2r(v13, v14, __ T2S, Address(__ post(r29, 8))); \/\/ ld2r  {v13.2S, v14.2S}, [x29], 8\n+    __ ld2r(v22, v23, __ T2D, Address(__ post(r28, r2))); \/\/  ld2r  {v22.2D, v23.2D}, [x28], x2\n+    __ ld3(v30, v31, v0, __ T4S, Address(__ post(r4, r11))); \/\/ ld3 {v30.4S, v31.4S, v0.4S}, [x4], x11\n+    __ ld3(v29, v30, v31, __ T2S, Address(r0));        \/\/ ld3 {v29.2S, v30.2S, v31.2S}, [x0]\n+    __ ld3r(v23, v24, v25, __ T8H, Address(r27));      \/\/ ld3r  {v23.8H, v24.8H, v25.8H}, [x27]\n+    __ ld3r(v3, v4, v5, __ T4S, Address(__ post(r10, 12))); \/\/  ld3r  {v3.4S, v4.4S, v5.4S}, [x10], 12\n+    __ ld3r(v19, v20, v21, __ T1D, Address(__ post(r14, r22))); \/\/  ld3r  {v19.1D, v20.1D, v21.1D}, [x14], x22\n+    __ ld4(v14, v15, v16, v17, __ T8H, Address(__ post(r0, 64))); \/\/  ld4 {v14.8H, v15.8H, v16.8H, v17.8H}, [x0], 64\n+    __ ld4(v30, v31, v0, v1, __ T8B, Address(__ post(r22, r25))); \/\/  ld4 {v30.8B, v31.8B, v0.8B, v1.8B}, [x22], x25\n+    __ ld4r(v25, v26, v27, v28, __ T8B, Address(r0));  \/\/ ld4r  {v25.8B, v26.8B, v27.8B, v28.8B}, [x0]\n+    __ ld4r(v10, v11, v12, v13, __ T4H, Address(__ post(r8, 8))); \/\/  ld4r  {v10.4H, v11.4H, v12.4H, v13.4H}, [x8], 8\n+    __ ld4r(v1, v2, v3, v4, __ T2S, Address(__ post(r6, r28))); \/\/  ld4r  {v1.2S, v2.2S, v3.2S, v4.2S}, [x6], x28\n@@ -618,15 +618,15 @@\n-    __ ccmn(zr, zr, 3u, Assembler::LE);                \/\/        ccmn        xzr, xzr, #3, LE\n-    __ ccmnw(zr, zr, 5u, Assembler::EQ);               \/\/        ccmn        wzr, wzr, #5, EQ\n-    __ ccmp(zr, 1, 4u, Assembler::NE);                 \/\/        ccmp        xzr, 1, #4, NE\n-    __ ccmpw(zr, 2, 2, Assembler::GT);                 \/\/        ccmp        wzr, 2, #2, GT\n-    __ extr(zr, zr, zr, 0);                            \/\/        extr        xzr, xzr, xzr, 0\n-    __ stlxp(r0, zr, zr, sp);                          \/\/        stlxp        w0, xzr, xzr, [sp]\n-    __ stlxpw(r2, zr, zr, r3);                         \/\/        stlxp        w2, wzr, wzr, [x3]\n-    __ stxp(r4, zr, zr, r5);                           \/\/        stxp        w4, xzr, xzr, [x5]\n-    __ stxpw(r6, zr, zr, sp);                          \/\/        stxp        w6, wzr, wzr, [sp]\n-    __ dup(v0, __ T16B, zr);                           \/\/        dup        v0.16b, wzr\n-    __ mov(v1, __ T1D, 0, zr);                         \/\/        mov        v1.d[0], xzr\n-    __ mov(v1, __ T2S, 1, zr);                         \/\/        mov        v1.s[1], wzr\n-    __ mov(v1, __ T4H, 2, zr);                         \/\/        mov        v1.h[2], wzr\n-    __ mov(v1, __ T8B, 3, zr);                         \/\/        mov        v1.b[3], wzr\n-    __ ld1(v31, v0, __ T2D, Address(__ post(r1, r0))); \/\/        ld1        {v31.2d, v0.2d}, [x1], x0\n+    __ ccmn(zr, zr, 3u, Assembler::LE);                \/\/ ccmn  xzr, xzr, #3, LE\n+    __ ccmnw(zr, zr, 5u, Assembler::EQ);               \/\/ ccmn  wzr, wzr, #5, EQ\n+    __ ccmp(zr, 1, 4u, Assembler::NE);                 \/\/ ccmp  xzr, 1, #4, NE\n+    __ ccmpw(zr, 2, 2, Assembler::GT);                 \/\/ ccmp  wzr, 2, #2, GT\n+    __ extr(zr, zr, zr, 0);                            \/\/ extr  xzr, xzr, xzr, 0\n+    __ stlxp(r0, zr, zr, sp);                          \/\/ stlxp w0, xzr, xzr, [sp]\n+    __ stlxpw(r2, zr, zr, r3);                         \/\/ stlxp w2, wzr, wzr, [x3]\n+    __ stxp(r4, zr, zr, r5);                           \/\/ stxp  w4, xzr, xzr, [x5]\n+    __ stxpw(r6, zr, zr, sp);                          \/\/ stxp  w6, wzr, wzr, [sp]\n+    __ dup(v0, __ T16B, zr);                           \/\/ dup v0.16b, wzr\n+    __ mov(v1, __ T1D, 0, zr);                         \/\/ mov v1.d[0], xzr\n+    __ mov(v1, __ T2S, 1, zr);                         \/\/ mov v1.s[1], wzr\n+    __ mov(v1, __ T4H, 2, zr);                         \/\/ mov v1.h[2], wzr\n+    __ mov(v1, __ T8B, 3, zr);                         \/\/ mov v1.b[3], wzr\n+    __ ld1(v31, v0, __ T2D, Address(__ post(r1, r0))); \/\/ ld1 {v31.2d, v0.2d}, [x1], x0\n@@ -635,32 +635,32 @@\n-    __ fmovd(v0, 2.0);                                 \/\/        fmov d0, #2.0\n-    __ fmovd(v0, 2.125);                               \/\/        fmov d0, #2.125\n-    __ fmovd(v0, 4.0);                                 \/\/        fmov d0, #4.0\n-    __ fmovd(v0, 4.25);                                \/\/        fmov d0, #4.25\n-    __ fmovd(v0, 8.0);                                 \/\/        fmov d0, #8.0\n-    __ fmovd(v0, 8.5);                                 \/\/        fmov d0, #8.5\n-    __ fmovd(v0, 16.0);                                \/\/        fmov d0, #16.0\n-    __ fmovd(v0, 17.0);                                \/\/        fmov d0, #17.0\n-    __ fmovd(v0, 0.125);                               \/\/        fmov d0, #0.125\n-    __ fmovd(v0, 0.1328125);                           \/\/        fmov d0, #0.1328125\n-    __ fmovd(v0, 0.25);                                \/\/        fmov d0, #0.25\n-    __ fmovd(v0, 0.265625);                            \/\/        fmov d0, #0.265625\n-    __ fmovd(v0, 0.5);                                 \/\/        fmov d0, #0.5\n-    __ fmovd(v0, 0.53125);                             \/\/        fmov d0, #0.53125\n-    __ fmovd(v0, 1.0);                                 \/\/        fmov d0, #1.0\n-    __ fmovd(v0, 1.0625);                              \/\/        fmov d0, #1.0625\n-    __ fmovd(v0, -2.0);                                \/\/        fmov d0, #-2.0\n-    __ fmovd(v0, -2.125);                              \/\/        fmov d0, #-2.125\n-    __ fmovd(v0, -4.0);                                \/\/        fmov d0, #-4.0\n-    __ fmovd(v0, -4.25);                               \/\/        fmov d0, #-4.25\n-    __ fmovd(v0, -8.0);                                \/\/        fmov d0, #-8.0\n-    __ fmovd(v0, -8.5);                                \/\/        fmov d0, #-8.5\n-    __ fmovd(v0, -16.0);                               \/\/        fmov d0, #-16.0\n-    __ fmovd(v0, -17.0);                               \/\/        fmov d0, #-17.0\n-    __ fmovd(v0, -0.125);                              \/\/        fmov d0, #-0.125\n-    __ fmovd(v0, -0.1328125);                          \/\/        fmov d0, #-0.1328125\n-    __ fmovd(v0, -0.25);                               \/\/        fmov d0, #-0.25\n-    __ fmovd(v0, -0.265625);                           \/\/        fmov d0, #-0.265625\n-    __ fmovd(v0, -0.5);                                \/\/        fmov d0, #-0.5\n-    __ fmovd(v0, -0.53125);                            \/\/        fmov d0, #-0.53125\n-    __ fmovd(v0, -1.0);                                \/\/        fmov d0, #-1.0\n-    __ fmovd(v0, -1.0625);                             \/\/        fmov d0, #-1.0625\n+    __ fmovd(v0, 2.0);                                 \/\/ fmov d0, #2.0\n+    __ fmovd(v0, 2.125);                               \/\/ fmov d0, #2.125\n+    __ fmovd(v0, 4.0);                                 \/\/ fmov d0, #4.0\n+    __ fmovd(v0, 4.25);                                \/\/ fmov d0, #4.25\n+    __ fmovd(v0, 8.0);                                 \/\/ fmov d0, #8.0\n+    __ fmovd(v0, 8.5);                                 \/\/ fmov d0, #8.5\n+    __ fmovd(v0, 16.0);                                \/\/ fmov d0, #16.0\n+    __ fmovd(v0, 17.0);                                \/\/ fmov d0, #17.0\n+    __ fmovd(v0, 0.125);                               \/\/ fmov d0, #0.125\n+    __ fmovd(v0, 0.1328125);                           \/\/ fmov d0, #0.1328125\n+    __ fmovd(v0, 0.25);                                \/\/ fmov d0, #0.25\n+    __ fmovd(v0, 0.265625);                            \/\/ fmov d0, #0.265625\n+    __ fmovd(v0, 0.5);                                 \/\/ fmov d0, #0.5\n+    __ fmovd(v0, 0.53125);                             \/\/ fmov d0, #0.53125\n+    __ fmovd(v0, 1.0);                                 \/\/ fmov d0, #1.0\n+    __ fmovd(v0, 1.0625);                              \/\/ fmov d0, #1.0625\n+    __ fmovd(v0, -2.0);                                \/\/ fmov d0, #-2.0\n+    __ fmovd(v0, -2.125);                              \/\/ fmov d0, #-2.125\n+    __ fmovd(v0, -4.0);                                \/\/ fmov d0, #-4.0\n+    __ fmovd(v0, -4.25);                               \/\/ fmov d0, #-4.25\n+    __ fmovd(v0, -8.0);                                \/\/ fmov d0, #-8.0\n+    __ fmovd(v0, -8.5);                                \/\/ fmov d0, #-8.5\n+    __ fmovd(v0, -16.0);                               \/\/ fmov d0, #-16.0\n+    __ fmovd(v0, -17.0);                               \/\/ fmov d0, #-17.0\n+    __ fmovd(v0, -0.125);                              \/\/ fmov d0, #-0.125\n+    __ fmovd(v0, -0.1328125);                          \/\/ fmov d0, #-0.1328125\n+    __ fmovd(v0, -0.25);                               \/\/ fmov d0, #-0.25\n+    __ fmovd(v0, -0.265625);                           \/\/ fmov d0, #-0.265625\n+    __ fmovd(v0, -0.5);                                \/\/ fmov d0, #-0.5\n+    __ fmovd(v0, -0.53125);                            \/\/ fmov d0, #-0.53125\n+    __ fmovd(v0, -1.0);                                \/\/ fmov d0, #-1.0\n+    __ fmovd(v0, -1.0625);                             \/\/ fmov d0, #-1.0625\n@@ -669,9 +669,9 @@\n-    __ swp(Assembler::xword, r21, r5, r24);            \/\/        swp        x21, x5, [x24]\n-    __ ldadd(Assembler::xword, r13, r13, r15);         \/\/        ldadd        x13, x13, [x15]\n-    __ ldbic(Assembler::xword, r22, r19, r26);         \/\/        ldclr        x22, x19, [x26]\n-    __ ldeor(Assembler::xword, r25, r10, r26);         \/\/        ldeor        x25, x10, [x26]\n-    __ ldorr(Assembler::xword, r5, r27, r15);          \/\/        ldset        x5, x27, [x15]\n-    __ ldsmin(Assembler::xword, r19, r5, r11);         \/\/        ldsmin        x19, x5, [x11]\n-    __ ldsmax(Assembler::xword, r26, r0, r4);          \/\/        ldsmax        x26, x0, [x4]\n-    __ ldumin(Assembler::xword, r22, r23, r30);        \/\/        ldumin        x22, x23, [x30]\n-    __ ldumax(Assembler::xword, r18, r28, r8);         \/\/        ldumax        x18, x28, [x8]\n+    __ swp(Assembler::xword, r16, r20, r15);           \/\/ swp x16, x20, [x15]\n+    __ ldadd(Assembler::xword, r2, r7, r28);           \/\/ ldadd x2, x7, [x28]\n+    __ ldbic(Assembler::xword, r20, r10, r25);         \/\/ ldclr x20, x10, [x25]\n+    __ ldeor(Assembler::xword, r22, r11, r2);          \/\/ ldeor x22, x11, [x2]\n+    __ ldorr(Assembler::xword, r1, r10, r19);          \/\/ ldset x1, x10, [x19]\n+    __ ldsmin(Assembler::xword, r14, r21, r3);         \/\/ ldsmin  x14, x21, [x3]\n+    __ ldsmax(Assembler::xword, r28, r27, r13);        \/\/ ldsmax  x28, x27, [x13]\n+    __ ldumin(Assembler::xword, r17, r30, r21);        \/\/ ldumin  x17, x30, [x21]\n+    __ ldumax(Assembler::xword, r27, r16, r29);        \/\/ ldumax  x27, x16, [x29]\n@@ -680,9 +680,9 @@\n-    __ swpa(Assembler::xword, r13, r29, r27);          \/\/        swpa        x13, x29, [x27]\n-    __ ldadda(Assembler::xword, r11, r5, r13);         \/\/        ldadda        x11, x5, [x13]\n-    __ ldbica(Assembler::xword, r1, r24, r21);         \/\/        ldclra        x1, x24, [x21]\n-    __ ldeora(Assembler::xword, r27, r17, r24);        \/\/        ldeora        x27, x17, [x24]\n-    __ ldorra(Assembler::xword, r18, r30, r5);         \/\/        ldseta        x18, x30, [x5]\n-    __ ldsmina(Assembler::xword, r7, r22, r25);        \/\/        ldsmina        x7, x22, [x25]\n-    __ ldsmaxa(Assembler::xword, r4, r26, r19);        \/\/        ldsmaxa        x4, x26, [x19]\n-    __ ldumina(Assembler::xword, r6, r30, r3);         \/\/        ldumina        x6, x30, [x3]\n-    __ ldumaxa(Assembler::xword, r24, r23, r5);        \/\/        ldumaxa        x24, x23, [x5]\n+    __ swpa(Assembler::xword, r30, r9, r0);            \/\/ swpa  x30, x9, [x0]\n+    __ ldadda(Assembler::xword, r28, r27, r28);        \/\/ ldadda  x28, x27, [x28]\n+    __ ldbica(Assembler::xword, r21, r25, r10);        \/\/ ldclra  x21, x25, [x10]\n+    __ ldeora(Assembler::xword, zr, r20, r15);         \/\/ ldeora  xzr, x20, [x15]\n+    __ ldorra(Assembler::xword, r1, r25, r14);         \/\/ ldseta  x1, x25, [x14]\n+    __ ldsmina(Assembler::xword, r21, r26, r29);       \/\/ ldsmina x21, x26, [x29]\n+    __ ldsmaxa(Assembler::xword, r8, r29, r25);        \/\/ ldsmaxa x8, x29, [x25]\n+    __ ldumina(Assembler::xword, r13, r2, r25);        \/\/ ldumina x13, x2, [x25]\n+    __ ldumaxa(Assembler::xword, r15, r23, r0);        \/\/ ldumaxa x15, x23, [x0]\n@@ -691,9 +691,9 @@\n-    __ swpal(Assembler::xword, r24, r18, r28);         \/\/        swpal        x24, x18, [x28]\n-    __ ldaddal(Assembler::xword, r19, zr, r7);         \/\/        ldaddal        x19, xzr, [x7]\n-    __ ldbical(Assembler::xword, r13, r6, r28);        \/\/        ldclral        x13, x6, [x28]\n-    __ ldeoral(Assembler::xword, r8, r15, r21);        \/\/        ldeoral        x8, x15, [x21]\n-    __ ldorral(Assembler::xword, r2, r13, r1);         \/\/        ldsetal        x2, x13, [x1]\n-    __ ldsminal(Assembler::xword, r17, r29, r25);      \/\/        ldsminal        x17, x29, [x25]\n-    __ ldsmaxal(Assembler::xword, r25, r18, r14);      \/\/        ldsmaxal        x25, x18, [x14]\n-    __ lduminal(Assembler::xword, zr, r6, r27);        \/\/        lduminal        xzr, x6, [x27]\n-    __ ldumaxal(Assembler::xword, r16, r5, r15);       \/\/        ldumaxal        x16, x5, [x15]\n+    __ swpal(Assembler::xword, r3, r1, r2);            \/\/ swpal x3, x1, [x2]\n+    __ ldaddal(Assembler::xword, r28, r3, r20);        \/\/ ldaddal x28, x3, [x20]\n+    __ ldbical(Assembler::xword, r14, zr, r14);        \/\/ ldclral x14, xzr, [x14]\n+    __ ldeoral(Assembler::xword, r7, r28, r2);         \/\/ ldeoral x7, x28, [x2]\n+    __ ldorral(Assembler::xword, r0, r11, r5);         \/\/ ldsetal x0, x11, [x5]\n+    __ ldsminal(Assembler::xword, r11, r14, r20);      \/\/ ldsminal  x11, x14, [x20]\n+    __ ldsmaxal(Assembler::xword, zr, r4, r2);         \/\/ ldsmaxal  xzr, x4, [x2]\n+    __ lduminal(Assembler::xword, r26, r0, r22);       \/\/ lduminal  x26, x0, [x22]\n+    __ ldumaxal(Assembler::xword, r17, r1, r13);       \/\/ ldumaxal  x17, x1, [x13]\n@@ -702,9 +702,9 @@\n-    __ swpl(Assembler::xword, r11, r18, r3);           \/\/        swpl        x11, x18, [x3]\n-    __ ldaddl(Assembler::xword, r26, r20, r2);         \/\/        ldaddl        x26, x20, [x2]\n-    __ ldbicl(Assembler::xword, r11, r4, r11);         \/\/        ldclrl        x11, x4, [x11]\n-    __ ldeorl(Assembler::xword, r30, r19, r23);        \/\/        ldeorl        x30, x19, [x23]\n-    __ ldorrl(Assembler::xword, r3, r15, r14);         \/\/        ldsetl        x3, x15, [x14]\n-    __ ldsminl(Assembler::xword, r30, r22, r20);       \/\/        ldsminl        x30, x22, [x20]\n-    __ ldsmaxl(Assembler::xword, r7, r5, r24);         \/\/        ldsmaxl        x7, x5, [x24]\n-    __ lduminl(Assembler::xword, r23, r16, r15);       \/\/        lduminl        x23, x16, [x15]\n-    __ ldumaxl(Assembler::xword, r11, r19, r0);        \/\/        ldumaxl        x11, x19, [x0]\n+    __ swpl(Assembler::xword, r23, r26, r20);          \/\/ swpl  x23, x26, [x20]\n+    __ ldaddl(Assembler::xword, r14, r11, r12);        \/\/ ldaddl  x14, x11, [x12]\n+    __ ldbicl(Assembler::xword, r12, zr, r15);         \/\/ ldclrl  x12, xzr, [x15]\n+    __ ldeorl(Assembler::xword, r27, r14, r8);         \/\/ ldeorl  x27, x14, [x8]\n+    __ ldorrl(Assembler::xword, r10, r30, r25);        \/\/ ldsetl  x10, x30, [x25]\n+    __ ldsminl(Assembler::xword, r22, r7, r16);        \/\/ ldsminl x22, x7, [x16]\n+    __ ldsmaxl(Assembler::xword, r1, r16, r8);         \/\/ ldsmaxl x1, x16, [x8]\n+    __ lduminl(Assembler::xword, r1, r1, r26);         \/\/ lduminl x1, x1, [x26]\n+    __ ldumaxl(Assembler::xword, r0, r23, r15);        \/\/ ldumaxl x0, x23, [x15]\n@@ -713,9 +713,9 @@\n-    __ swp(Assembler::word, r28, r28, r1);             \/\/        swp        w28, w28, [x1]\n-    __ ldadd(Assembler::word, r11, r21, r12);          \/\/        ldadd        w11, w21, [x12]\n-    __ ldbic(Assembler::word, r29, r0, r18);           \/\/        ldclr        w29, w0, [x18]\n-    __ ldeor(Assembler::word, r5, r0, r25);            \/\/        ldeor        w5, w0, [x25]\n-    __ ldorr(Assembler::word, r14, r0, r26);           \/\/        ldset        w14, w0, [x26]\n-    __ ldsmin(Assembler::word, r28, r18, r29);         \/\/        ldsmin        w28, w18, [x29]\n-    __ ldsmax(Assembler::word, r15, r1, r29);          \/\/        ldsmax        w15, w1, [x29]\n-    __ ldumin(Assembler::word, r8, r26, r28);          \/\/        ldumin        w8, w26, [x28]\n-    __ ldumax(Assembler::word, r17, r14, r4);          \/\/        ldumax        w17, w14, [x4]\n+    __ swp(Assembler::word, r11, r16, r8);             \/\/ swp w11, w16, [x8]\n+    __ ldadd(Assembler::word, r1, r7, r14);            \/\/ ldadd w1, w7, [x14]\n+    __ ldbic(Assembler::word, r16, zr, r9);            \/\/ ldclr w16, wzr, [x9]\n+    __ ldeor(Assembler::word, r22, r6, r13);           \/\/ ldeor w22, w6, [x13]\n+    __ ldorr(Assembler::word, r11, r13, r4);           \/\/ ldset w11, w13, [x4]\n+    __ ldsmin(Assembler::word, r16, r22, r0);          \/\/ ldsmin  w16, w22, [x0]\n+    __ ldsmax(Assembler::word, r28, zr, r10);          \/\/ ldsmax  w28, wzr, [x10]\n+    __ ldumin(Assembler::word, r16, r5, r8);           \/\/ ldumin  w16, w5, [x8]\n+    __ ldumax(Assembler::word, r26, r20, r15);         \/\/ ldumax  w26, w20, [x15]\n@@ -724,9 +724,9 @@\n-    __ swpa(Assembler::word, r24, r25, r1);            \/\/        swpa        w24, w25, [x1]\n-    __ ldadda(Assembler::word, r10, r17, r17);         \/\/        ldadda        w10, w17, [x17]\n-    __ ldbica(Assembler::word, r29, r20, r21);         \/\/        ldclra        w29, w20, [x21]\n-    __ ldeora(Assembler::word, r29, r9, r12);          \/\/        ldeora        w29, w9, [x12]\n-    __ ldorra(Assembler::word, r11, r6, r5);           \/\/        ldseta        w11, w6, [x5]\n-    __ ldsmina(Assembler::word, r21, r7, r21);         \/\/        ldsmina        w21, w7, [x21]\n-    __ ldsmaxa(Assembler::word, r10, r23, r12);        \/\/        ldsmaxa        w10, w23, [x12]\n-    __ ldumina(Assembler::word, r21, r5, r10);         \/\/        ldumina        w21, w5, [x10]\n-    __ ldumaxa(Assembler::word, r30, r20, r18);        \/\/        ldumaxa        w30, w20, [x18]\n+    __ swpa(Assembler::word, r27, r6, r16);            \/\/ swpa  w27, w6, [x16]\n+    __ ldadda(Assembler::word, zr, zr, r2);            \/\/ ldadda  wzr, wzr, [x2]\n+    __ ldbica(Assembler::word, r24, r28, r8);          \/\/ ldclra  w24, w28, [x8]\n+    __ ldeora(Assembler::word, r15, r9, r23);          \/\/ ldeora  w15, w9, [x23]\n+    __ ldorra(Assembler::word, r26, r2, r7);           \/\/ ldseta  w26, w2, [x7]\n+    __ ldsmina(Assembler::word, r3, r17, r15);         \/\/ ldsmina w3, w17, [x15]\n+    __ ldsmaxa(Assembler::word, r19, r5, r21);         \/\/ ldsmaxa w19, w5, [x21]\n+    __ ldumina(Assembler::word, r7, r26, r12);         \/\/ ldumina w7, w26, [x12]\n+    __ ldumaxa(Assembler::word, r12, r7, r29);         \/\/ ldumaxa w12, w7, [x29]\n@@ -735,9 +735,9 @@\n-    __ swpal(Assembler::word, r13, r23, r5);           \/\/        swpal        w13, w23, [x5]\n-    __ ldaddal(Assembler::word, r15, r24, r5);         \/\/        ldaddal        w15, w24, [x5]\n-    __ ldbical(Assembler::word, r9, r10, r25);         \/\/        ldclral        w9, w10, [x25]\n-    __ ldeoral(Assembler::word, r20, r17, r17);        \/\/        ldeoral        w20, w17, [x17]\n-    __ ldorral(Assembler::word, r12, r18, r30);        \/\/        ldsetal        w12, w18, [x30]\n-    __ ldsminal(Assembler::word, r3, r3, r25);         \/\/        ldsminal        w3, w3, [x25]\n-    __ ldsmaxal(Assembler::word, r26, r25, r10);       \/\/        ldsmaxal        w26, w25, [x10]\n-    __ lduminal(Assembler::word, r2, r11, sp);         \/\/        lduminal        w2, w11, [sp]\n-    __ ldumaxal(Assembler::word, r7, r2, r5);          \/\/        ldumaxal        w7, w2, [x5]\n+    __ swpal(Assembler::word, r9, r8, r20);            \/\/ swpal w9, w8, [x20]\n+    __ ldaddal(Assembler::word, r8, zr, r30);          \/\/ ldaddal w8, wzr, [x30]\n+    __ ldbical(Assembler::word, r0, r6, r12);          \/\/ ldclral w0, w6, [x12]\n+    __ ldeoral(Assembler::word, r17, r23, r2);         \/\/ ldeoral w17, w23, [x2]\n+    __ ldorral(Assembler::word, r0, r30, r1);          \/\/ ldsetal w0, w30, [x1]\n+    __ ldsminal(Assembler::word, r22, r3, r15);        \/\/ ldsminal  w22, w3, [x15]\n+    __ ldsmaxal(Assembler::word, r25, r21, r13);       \/\/ ldsmaxal  w25, w21, [x13]\n+    __ lduminal(Assembler::word, r13, r24, r27);       \/\/ lduminal  w13, w24, [x27]\n+    __ ldumaxal(Assembler::word, r20, r3, r11);        \/\/ ldumaxal  w20, w3, [x11]\n@@ -746,9 +746,9 @@\n-    __ swpl(Assembler::word, r0, r7, r20);             \/\/        swpl        w0, w7, [x20]\n-    __ ldaddl(Assembler::word, r5, zr, r2);            \/\/        ldaddl        w5, wzr, [x2]\n-    __ ldbicl(Assembler::word, r27, r25, r27);         \/\/        ldclrl        w27, w25, [x27]\n-    __ ldeorl(Assembler::word, r30, r24, r26);         \/\/        ldeorl        w30, w24, [x26]\n-    __ ldorrl(Assembler::word, r15, r2, r22);          \/\/        ldsetl        w15, w2, [x22]\n-    __ ldsminl(Assembler::word, r0, r3, sp);           \/\/        ldsminl        w0, w3, [sp]\n-    __ ldsmaxl(Assembler::word, r15, r20, r10);        \/\/        ldsmaxl        w15, w20, [x10]\n-    __ lduminl(Assembler::word, r22, r21, r14);        \/\/        lduminl        w22, w21, [x14]\n-    __ ldumaxl(Assembler::word, r6, r30, r2);          \/\/        ldumaxl        w6, w30, [x2]\n+    __ swpl(Assembler::word, r3, r13, r21);            \/\/ swpl  w3, w13, [x21]\n+    __ ldaddl(Assembler::word, r26, r15, r26);         \/\/ ldaddl  w26, w15, [x26]\n+    __ ldbicl(Assembler::word, r9, r19, r2);           \/\/ ldclrl  w9, w19, [x2]\n+    __ ldeorl(Assembler::word, r24, r29, r7);          \/\/ ldeorl  w24, w29, [x7]\n+    __ ldorrl(Assembler::word, r29, r25, r15);         \/\/ ldsetl  w29, w25, [x15]\n+    __ ldsminl(Assembler::word, r11, r30, r7);         \/\/ ldsminl w11, w30, [x7]\n+    __ ldsmaxl(Assembler::word, r11, r2, r6);          \/\/ ldsmaxl w11, w2, [x6]\n+    __ lduminl(Assembler::word, r16, r11, r14);        \/\/ lduminl w16, w11, [x14]\n+    __ ldumaxl(Assembler::word, r5, r8, r11);          \/\/ ldumaxl w5, w8, [x11]\n@@ -765,536 +765,536 @@\n-   0:        8b50798f         add        x15, x12, x16, lsr #30\n-   4:        cb4381e1         sub        x1, x15, x3, lsr #32\n-   8:        ab05372d         adds        x13, x25, x5, lsl #13\n-   c:        eb864796         subs        x22, x28, x6, asr #17\n-  10:        0b961920         add        w0, w9, w22, asr #6\n-  14:        4b195473         sub        w19, w3, w25, lsl #21\n-  18:        2b0b5264         adds        w4, w19, w11, lsl #20\n-  1c:        6b9300f8         subs        w24, w7, w19, asr #0\n-  20:        8a0bc0fe         and        x30, x7, x11, lsl #48\n-  24:        aa0f3118         orr        x24, x8, x15, lsl #12\n-  28:        ca170531         eor        x17, x9, x23, lsl #1\n-  2c:        ea44dd6e         ands        x14, x11, x4, lsr #55\n-  30:        0a4c44f3         and        w19, w7, w12, lsr #17\n-  34:        2a8b7373         orr        w19, w27, w11, asr #28\n-  38:        4a567c7e         eor        w30, w3, w22, lsr #31\n-  3c:        6a9c0353         ands        w19, w26, w28, asr #0\n-  40:        8a3accdd         bic        x29, x6, x26, lsl #51\n-  44:        aa318f7a         orn        x26, x27, x17, lsl #35\n-  48:        ca2e1495         eon        x21, x4, x14, lsl #5\n-  4c:        eaa015e2         bics        x2, x15, x0, asr #5\n-  50:        0a2274e2         bic        w2, w7, w2, lsl #29\n-  54:        2a751598         orn        w24, w12, w21, lsr #5\n-  58:        4a3309fe         eon        w30, w15, w19, lsl #2\n-  5c:        6ab172fe         bics        w30, w23, w17, asr #28\n-  60:        110a5284         add        w4, w20, #0x294\n-  64:        310b1942         adds        w2, w10, #0x2c6\n-  68:        5103d353         sub        w19, w26, #0xf4\n-  6c:        710125bc         subs        w28, w13, #0x49\n-  70:        910d7bc2         add        x2, x30, #0x35e\n-  74:        b108fa1b         adds        x27, x16, #0x23e\n-  78:        d1093536         sub        x22, x9, #0x24d\n-  7c:        f10ae824         subs        x4, x1, #0x2ba\n-  80:        120e667c         and        w28, w19, #0xfffc0fff\n-  84:        321f6cbb         orr        w27, w5, #0x1ffffffe\n-  88:        520f6a9e         eor        w30, w20, #0xfffe0fff\n-  8c:        72136f56         ands        w22, w26, #0xffffe1ff\n-  90:        927e4ce5         and        x5, x7, #0x3ffffc\n-  94:        b278b4ed         orr        x13, x7, #0x3fffffffffff00\n-  98:        d24c6527         eor        x7, x9, #0xfff0000000003fff\n-  9c:        f2485803         ands        x3, x0, #0xff00000000007fff\n-  a0:        14000000         b        a0 <back+0xa0>\n-  a4:        17ffffd7         b        0 <back>\n-  a8:        140001ee         b        860 <forth>\n-  ac:        94000000         bl        ac <back+0xac>\n-  b0:        97ffffd4         bl        0 <back>\n-  b4:        940001eb         bl        860 <forth>\n-  b8:        34000010         cbz        w16, b8 <back+0xb8>\n-  bc:        34fffa30         cbz        w16, 0 <back>\n-  c0:        34003d10         cbz        w16, 860 <forth>\n-  c4:        35000013         cbnz        w19, c4 <back+0xc4>\n-  c8:        35fff9d3         cbnz        w19, 0 <back>\n-  cc:        35003cb3         cbnz        w19, 860 <forth>\n-  d0:        b4000005         cbz        x5, d0 <back+0xd0>\n-  d4:        b4fff965         cbz        x5, 0 <back>\n-  d8:        b4003c45         cbz        x5, 860 <forth>\n-  dc:        b5000004         cbnz        x4, dc <back+0xdc>\n-  e0:        b5fff904         cbnz        x4, 0 <back>\n-  e4:        b5003be4         cbnz        x4, 860 <forth>\n-  e8:        1000001b         adr        x27, e8 <back+0xe8>\n-  ec:        10fff8bb         adr        x27, 0 <back>\n-  f0:        10003b9b         adr        x27, 860 <forth>\n-  f4:        90000010         adrp        x16, 0 <back>\n-  f8:        3640001c         tbz        w28, #8, f8 <back+0xf8>\n-  fc:        3647f83c         tbz        w28, #8, 0 <back>\n- 100:        36403b1c         tbz        w28, #8, 860 <forth>\n- 104:        37080001         tbnz        w1, #1, 104 <back+0x104>\n- 108:        370ff7c1         tbnz        w1, #1, 0 <back>\n- 10c:        37083aa1         tbnz        w1, #1, 860 <forth>\n- 110:        12a437f4         mov        w20, #0xde40ffff                    \/\/ #-566165505\n- 114:        528c9d67         mov        w7, #0x64eb                        \/\/ #25835\n- 118:        72838bb1         movk        w17, #0x1c5d\n- 11c:        92c1062e         mov        x14, #0xfffff7ceffffffff            \/\/ #-9006546419713\n- 120:        d287da49         mov        x9, #0x3ed2                        \/\/ #16082\n- 124:        f2a6d153         movk        x19, #0x368a, lsl #16\n- 128:        93465ac9         sbfx        x9, x22, #6, #17\n- 12c:        330b0013         bfi        w19, w0, #21, #1\n- 130:        530b4e6a         ubfx        w10, w19, #11, #9\n- 134:        934545e4         sbfx        x4, x15, #5, #13\n- 138:        b35370a3         bfxil        x3, x5, #19, #10\n- 13c:        d3510b8c         ubfiz        x12, x28, #47, #3\n- 140:        13960c0f         extr        w15, w0, w22, #3\n- 144:        93ceddc6         ror        x6, x14, #55\n- 148:        54000000         b.eq        148 <back+0x148>  \/\/ b.none\n- 14c:        54fff5a0         b.eq        0 <back>  \/\/ b.none\n- 150:        54003880         b.eq        860 <forth>  \/\/ b.none\n- 154:        54000001         b.ne        154 <back+0x154>  \/\/ b.any\n- 158:        54fff541         b.ne        0 <back>  \/\/ b.any\n- 15c:        54003821         b.ne        860 <forth>  \/\/ b.any\n- 160:        54000002         b.cs        160 <back+0x160>  \/\/ b.hs, b.nlast\n- 164:        54fff4e2         b.cs        0 <back>  \/\/ b.hs, b.nlast\n- 168:        540037c2         b.cs        860 <forth>  \/\/ b.hs, b.nlast\n- 16c:        54000002         b.cs        16c <back+0x16c>  \/\/ b.hs, b.nlast\n- 170:        54fff482         b.cs        0 <back>  \/\/ b.hs, b.nlast\n- 174:        54003762         b.cs        860 <forth>  \/\/ b.hs, b.nlast\n- 178:        54000003         b.cc        178 <back+0x178>  \/\/ b.lo, b.ul, b.last\n- 17c:        54fff423         b.cc        0 <back>  \/\/ b.lo, b.ul, b.last\n- 180:        54003703         b.cc        860 <forth>  \/\/ b.lo, b.ul, b.last\n- 184:        54000003         b.cc        184 <back+0x184>  \/\/ b.lo, b.ul, b.last\n- 188:        54fff3c3         b.cc        0 <back>  \/\/ b.lo, b.ul, b.last\n- 18c:        540036a3         b.cc        860 <forth>  \/\/ b.lo, b.ul, b.last\n- 190:        54000004         b.mi        190 <back+0x190>  \/\/ b.first\n- 194:        54fff364         b.mi        0 <back>  \/\/ b.first\n- 198:        54003644         b.mi        860 <forth>  \/\/ b.first\n- 19c:        54000005         b.pl        19c <back+0x19c>  \/\/ b.nfrst\n- 1a0:        54fff305         b.pl        0 <back>  \/\/ b.nfrst\n- 1a4:        540035e5         b.pl        860 <forth>  \/\/ b.nfrst\n- 1a8:        54000006         b.vs        1a8 <back+0x1a8>\n- 1ac:        54fff2a6         b.vs        0 <back>\n- 1b0:        54003586         b.vs        860 <forth>\n- 1b4:        54000007         b.vc        1b4 <back+0x1b4>\n- 1b8:        54fff247         b.vc        0 <back>\n- 1bc:        54003527         b.vc        860 <forth>\n- 1c0:        54000008         b.hi        1c0 <back+0x1c0>  \/\/ b.pmore\n- 1c4:        54fff1e8         b.hi        0 <back>  \/\/ b.pmore\n- 1c8:        540034c8         b.hi        860 <forth>  \/\/ b.pmore\n- 1cc:        54000009         b.ls        1cc <back+0x1cc>  \/\/ b.plast\n- 1d0:        54fff189         b.ls        0 <back>  \/\/ b.plast\n- 1d4:        54003469         b.ls        860 <forth>  \/\/ b.plast\n- 1d8:        5400000a         b.ge        1d8 <back+0x1d8>  \/\/ b.tcont\n- 1dc:        54fff12a         b.ge        0 <back>  \/\/ b.tcont\n- 1e0:        5400340a         b.ge        860 <forth>  \/\/ b.tcont\n- 1e4:        5400000b         b.lt        1e4 <back+0x1e4>  \/\/ b.tstop\n- 1e8:        54fff0cb         b.lt        0 <back>  \/\/ b.tstop\n- 1ec:        540033ab         b.lt        860 <forth>  \/\/ b.tstop\n- 1f0:        5400000c         b.gt        1f0 <back+0x1f0>\n- 1f4:        54fff06c         b.gt        0 <back>\n- 1f8:        5400334c         b.gt        860 <forth>\n- 1fc:        5400000d         b.le        1fc <back+0x1fc>\n- 200:        54fff00d         b.le        0 <back>\n- 204:        540032ed         b.le        860 <forth>\n- 208:        5400000e         b.al        208 <back+0x208>\n- 20c:        54ffefae         b.al        0 <back>\n- 210:        5400328e         b.al        860 <forth>\n- 214:        5400000f         b.nv        214 <back+0x214>\n- 218:        54ffef4f         b.nv        0 <back>\n- 21c:        5400322f         b.nv        860 <forth>\n- 220:        d40ac601         svc        #0x5630\n- 224:        d40042a2         hvc        #0x215\n- 228:        d404dac3         smc        #0x26d6\n- 22c:        d4224d40         brk        #0x126a\n- 230:        d44219c0         hlt        #0x10ce\n- 234:        d503201f         nop\n- 238:        d69f03e0         eret\n- 23c:        d6bf03e0         drps\n- 240:        d5033fdf         isb\n- 244:        d503339f         dsb        osh\n- 248:        d50335bf         dmb        nshld\n- 24c:        d61f0280         br        x20\n- 250:        d63f0040         blr        x2\n- 254:        c8127c17         stxr        w18, x23, [x0]\n- 258:        c81efec5         stlxr        w30, x5, [x22]\n- 25c:        c85f7d05         ldxr        x5, [x8]\n- 260:        c85ffe14         ldaxr        x20, [x16]\n- 264:        c89ffd66         stlr        x6, [x11]\n- 268:        c8dfff66         ldar        x6, [x27]\n- 26c:        880a7cb1         stxr        w10, w17, [x5]\n- 270:        8816fd89         stlxr        w22, w9, [x12]\n- 274:        885f7d1b         ldxr        w27, [x8]\n- 278:        885ffc57         ldaxr        w23, [x2]\n- 27c:        889fffba         stlr        w26, [x29]\n- 280:        88dffd4d         ldar        w13, [x10]\n- 284:        48197f7c         stxrh        w25, w28, [x27]\n- 288:        481dfd96         stlxrh        w29, w22, [x12]\n- 28c:        485f7f96         ldxrh        w22, [x28]\n- 290:        485fffc3         ldaxrh        w3, [x30]\n- 294:        489ffdf8         stlrh        w24, [x15]\n- 298:        48dfff5b         ldarh        w27, [x26]\n- 29c:        080b7e6a         stxrb        w11, w10, [x19]\n- 2a0:        0817fedb         stlxrb        w23, w27, [x22]\n- 2a4:        085f7e18         ldxrb        w24, [x16]\n- 2a8:        085ffc38         ldaxrb        w24, [x1]\n- 2ac:        089fffa5         stlrb        w5, [x29]\n- 2b0:        08dffe18         ldarb        w24, [x16]\n- 2b4:        c87f6239         ldxp        x25, x24, [x17]\n- 2b8:        c87fb276         ldaxp        x22, x12, [x19]\n- 2bc:        c820573a         stxp        w0, x26, x21, [x25]\n- 2c0:        c821aca6         stlxp        w1, x6, x11, [x5]\n- 2c4:        887f388d         ldxp        w13, w14, [x4]\n- 2c8:        887f88d1         ldaxp        w17, w2, [x6]\n- 2cc:        882f2643         stxp        w15, w3, w9, [x18]\n- 2d0:        88329131         stlxp        w18, w17, w4, [x9]\n- 2d4:        f81cf2b7         stur        x23, [x21, #-49]\n- 2d8:        b803f055         stur        w21, [x2, #63]\n- 2dc:        39002f9b         strb        w27, [x28, #11]\n- 2e0:        781f31fd         sturh        w29, [x15, #-13]\n- 2e4:        f85d33ce         ldur        x14, [x30, #-45]\n- 2e8:        b843539d         ldur        w29, [x28, #53]\n- 2ec:        39401f54         ldrb        w20, [x26, #7]\n- 2f0:        785ce059         ldurh        w25, [x2, #-50]\n- 2f4:        389f1143         ldursb        x3, [x10, #-15]\n- 2f8:        788131ee         ldursh        x14, [x15, #19]\n- 2fc:        78dfb17d         ldursh        w29, [x11, #-5]\n- 300:        b89b90af         ldursw        x15, [x5, #-71]\n- 304:        fc403193         ldur        d19, [x12, #3]\n- 308:        bc42a36c         ldur        s12, [x27, #42]\n- 30c:        fc07d396         stur        d22, [x28, #125]\n- 310:        bc1ec1f8         stur        s24, [x15, #-20]\n- 314:        f81e8f88         str        x8, [x28, #-24]!\n- 318:        b8025de6         str        w6, [x15, #37]!\n- 31c:        38007c27         strb        w7, [x1, #7]!\n- 320:        7801ee20         strh        w0, [x17, #30]!\n- 324:        f8454fb9         ldr        x25, [x29, #84]!\n- 328:        b85cce9a         ldr        w26, [x20, #-52]!\n- 32c:        385e7fba         ldrb        w26, [x29, #-25]!\n- 330:        7841af24         ldrh        w4, [x25, #26]!\n- 334:        389ebd1c         ldrsb        x28, [x8, #-21]!\n- 338:        789fadd1         ldrsh        x17, [x14, #-6]!\n- 33c:        78c0aefc         ldrsh        w28, [x23, #10]!\n- 340:        b89c0f7e         ldrsw        x30, [x27, #-64]!\n- 344:        fc50efd4         ldr        d20, [x30, #-242]!\n- 348:        bc414f71         ldr        s17, [x27, #20]!\n- 34c:        fc011c67         str        d7, [x3, #17]!\n- 350:        bc1f0d6d         str        s13, [x11, #-16]!\n- 354:        f81c3526         str        x6, [x9], #-61\n- 358:        b81e34b0         str        w16, [x5], #-29\n- 35c:        3800f7bd         strb        w29, [x29], #15\n- 360:        78012684         strh        w4, [x20], #18\n- 364:        f842e653         ldr        x19, [x18], #46\n- 368:        b8417456         ldr        w22, [x2], #23\n- 36c:        385e2467         ldrb        w7, [x3], #-30\n- 370:        785e358b         ldrh        w11, [x12], #-29\n- 374:        389e34c8         ldrsb        x8, [x6], #-29\n- 378:        788046f8         ldrsh        x24, [x23], #4\n- 37c:        78c00611         ldrsh        w17, [x16], #0\n- 380:        b89f8680         ldrsw        x0, [x20], #-8\n- 384:        fc582454         ldr        d20, [x2], #-126\n- 388:        bc5987d3         ldr        s19, [x30], #-104\n- 38c:        fc076624         str        d4, [x17], #118\n- 390:        bc190675         str        s21, [x19], #-112\n- 394:        f833785a         str        x26, [x2, x19, lsl #3]\n- 398:        b82fd809         str        w9, [x0, w15, sxtw #2]\n- 39c:        3821799a         strb        w26, [x12, x1, lsl #0]\n- 3a0:        782a7975         strh        w21, [x11, x10, lsl #1]\n- 3a4:        f870eaf0         ldr        x16, [x23, x16, sxtx]\n- 3a8:        b871d96a         ldr        w10, [x11, w17, sxtw #2]\n- 3ac:        386b7aed         ldrb        w13, [x23, x11, lsl #0]\n- 3b0:        7875689b         ldrh        w27, [x4, x21]\n- 3b4:        38afd91a         ldrsb        x26, [x8, w15, sxtw #0]\n- 3b8:        78a2c955         ldrsh        x21, [x10, w2, sxtw]\n- 3bc:        78ee6bc8         ldrsh        w8, [x30, x14]\n- 3c0:        b8b4f9dd         ldrsw        x29, [x14, x20, sxtx #2]\n- 3c4:        fc76eb7e         ldr        d30, [x27, x22, sxtx]\n- 3c8:        bc76692d         ldr        s13, [x9, x22]\n- 3cc:        fc31db28         str        d8, [x25, w17, sxtw #3]\n- 3d0:        bc255b01         str        s1, [x24, w5, uxtw #2]\n- 3d4:        f91c52aa         str        x10, [x21, #14496]\n- 3d8:        b91c3fb2         str        w18, [x29, #7228]\n- 3dc:        391f8877         strb        w23, [x3, #2018]\n- 3e0:        791ac97c         strh        w28, [x11, #3428]\n- 3e4:        f95c1758         ldr        x24, [x26, #14376]\n- 3e8:        b95b3c55         ldr        w21, [x2, #6972]\n- 3ec:        395ce0a4         ldrb        w4, [x5, #1848]\n- 3f0:        795851ce         ldrh        w14, [x14, #3112]\n- 3f4:        399e9f64         ldrsb        x4, [x27, #1959]\n- 3f8:        79993764         ldrsh        x4, [x27, #3226]\n- 3fc:        79d9af8a         ldrsh        w10, [x28, #3286]\n- 400:        b99eea2a         ldrsw        x10, [x17, #7912]\n- 404:        fd5a2f8d         ldr        d13, [x28, #13400]\n- 408:        bd5dac78         ldr        s24, [x3, #7596]\n- 40c:        fd1e0182         str        d2, [x12, #15360]\n- 410:        bd195c31         str        s17, [x1, #6492]\n- 414:        58000010         ldr        x16, 414 <back+0x414>\n- 418:        1800000d         ldr        w13, 418 <back+0x418>\n- 41c:        f8981240         prfum        pldl1keep, [x18, #-127]\n- 420:        d8ffdf00         prfm        pldl1keep, 0 <back>\n- 424:        f8a27a80         prfm        pldl1keep, [x20, x2, lsl #3]\n- 428:        f99af920         prfm        pldl1keep, [x9, #13808]\n- 42c:        1a0202e8         adc        w8, w23, w2\n- 430:        3a130078         adcs        w24, w3, w19\n- 434:        5a1d0316         sbc        w22, w24, w29\n- 438:        7a03036c         sbcs        w12, w27, w3\n- 43c:        9a0102eb         adc        x11, x23, x1\n- 440:        ba1700bd         adcs        x29, x5, x23\n- 444:        da0c0329         sbc        x9, x25, x12\n- 448:        fa16000c         sbcs        x12, x0, x22\n- 44c:        0b23459a         add        w26, w12, w3, uxtw #1\n- 450:        2b328a14         adds        w20, w16, w18, sxtb #2\n- 454:        cb274bde         sub        x30, x30, w7, uxtw #2\n- 458:        6b222eab         subs        w11, w21, w2, uxth #3\n- 45c:        8b214b42         add        x2, x26, w1, uxtw #2\n- 460:        ab34a7b2         adds        x18, x29, w20, sxth #1\n- 464:        cb24520e         sub        x14, x16, w4, uxtw #4\n- 468:        eb378e20         subs        x0, x17, w23, sxtb #3\n- 46c:        3a565283         ccmn        w20, w22, #0x3, pl  \/\/ pl = nfrst\n- 470:        7a420321         ccmp        w25, w2, #0x1, eq  \/\/ eq = none\n- 474:        ba58c247         ccmn        x18, x24, #0x7, gt\n- 478:        fa4d5106         ccmp        x8, x13, #0x6, pl  \/\/ pl = nfrst\n- 47c:        3a426924         ccmn        w9, #0x2, #0x4, vs\n- 480:        7a5b0847         ccmp        w2, #0x1b, #0x7, eq  \/\/ eq = none\n- 484:        ba413a02         ccmn        x16, #0x1, #0x2, cc  \/\/ cc = lo, ul, last\n- 488:        fa5fba23         ccmp        x17, #0x1f, #0x3, lt  \/\/ lt = tstop\n- 48c:        1a979377         csel        w23, w27, w23, ls  \/\/ ls = plast\n- 490:        1a86640a         csinc        w10, w0, w6, vs\n- 494:        5a89300b         csinv        w11, w0, w9, cc  \/\/ cc = lo, ul, last\n- 498:        5a923771         csneg        w17, w27, w18, cc  \/\/ cc = lo, ul, last\n- 49c:        9a8b720c         csel        x12, x16, x11, vc\n- 4a0:        9a868786         csinc        x6, x28, x6, hi  \/\/ hi = pmore\n- 4a4:        da9a736d         csinv        x13, x27, x26, vc\n- 4a8:        da9256dd         csneg        x29, x22, x18, pl  \/\/ pl = nfrst\n- 4ac:        5ac0026c         rbit        w12, w19\n- 4b0:        5ac00657         rev16        w23, w18\n- 4b4:        5ac00b89         rev        w9, w28\n- 4b8:        5ac01262         clz        w2, w19\n- 4bc:        5ac017b9         cls        w25, w29\n- 4c0:        dac002e4         rbit        x4, x23\n- 4c4:        dac0065d         rev16        x29, x18\n- 4c8:        dac00907         rev32        x7, x8\n- 4cc:        dac00e2d         rev        x13, x17\n- 4d0:        dac01011         clz        x17, x0\n- 4d4:        dac01752         cls        x18, x26\n- 4d8:        1ad0098b         udiv        w11, w12, w16\n- 4dc:        1ac70d24         sdiv        w4, w9, w7\n- 4e0:        1ad020ec         lsl        w12, w7, w16\n- 4e4:        1ad72613         lsr        w19, w16, w23\n- 4e8:        1ac62887         asr        w7, w4, w6\n- 4ec:        1ad72e95         ror        w21, w20, w23\n- 4f0:        9adc0990         udiv        x16, x12, x28\n- 4f4:        9acd0d84         sdiv        x4, x12, x13\n- 4f8:        9ac721a9         lsl        x9, x13, x7\n- 4fc:        9acf277c         lsr        x28, x27, x15\n- 500:        9ace2bd4         asr        x20, x30, x14\n- 504:        9ade2e4e         ror        x14, x18, x30\n- 508:        9bc77d63         umulh        x3, x11, x7\n- 50c:        9b587e97         smulh        x23, x20, x24\n- 510:        1b1524a2         madd        w2, w5, w21, w9\n- 514:        1b04a318         msub        w24, w24, w4, w8\n- 518:        9b0f4d8b         madd        x11, x12, x15, x19\n- 51c:        9b0ce73d         msub        x29, x25, x12, x25\n- 520:        9b2c5971         smaddl        x17, w11, w12, x22\n- 524:        9b34c87c         smsubl        x28, w3, w20, x18\n- 528:        9bbc6887         umaddl        x7, w4, w28, x26\n- 52c:        9bb19556         umsubl        x22, w10, w17, x5\n- 530:        1e310871         fmul        s17, s3, s17\n- 534:        1e261a2b         fdiv        s11, s17, s6\n- 538:        1e2928fd         fadd        s29, s7, s9\n- 53c:        1e333987         fsub        s7, s12, s19\n- 540:        1e230ae0         fmul        s0, s23, s3\n- 544:        1e75087a         fmul        d26, d3, d21\n- 548:        1e651a60         fdiv        d0, d19, d5\n- 54c:        1e692b40         fadd        d0, d26, d9\n- 550:        1e753ab9         fsub        d25, d21, d21\n- 554:        1e7309b0         fmul        d16, d13, d19\n- 558:        1f00425d         fmadd        s29, s18, s0, s16\n- 55c:        1f1d95b7         fmsub        s23, s13, s29, s5\n- 560:        1f2a38e9         fnmadd        s9, s7, s10, s14\n- 564:        1f2f5f99         fnmadd        s25, s28, s15, s23\n- 568:        1f5545a6         fmadd        d6, d13, d21, d17\n- 56c:        1f429ea3         fmsub        d3, d21, d2, d7\n- 570:        1f65472a         fnmadd        d10, d25, d5, d17\n- 574:        1f7449ce         fnmadd        d14, d14, d20, d18\n- 578:        1e20404f         fmov        s15, s2\n- 57c:        1e20c0f2         fabs        s18, s7\n- 580:        1e2140c3         fneg        s3, s6\n- 584:        1e21c02c         fsqrt        s12, s1\n- 588:        1e22c009         fcvt        d9, s0\n- 58c:        1e6040a4         fmov        d4, d5\n- 590:        1e60c1e3         fabs        d3, d15\n- 594:        1e614331         fneg        d17, d25\n- 598:        1e61c30c         fsqrt        d12, d24\n- 59c:        1e6240b5         fcvt        s21, d5\n- 5a0:        1e3802a4         fcvtzs        w4, s21\n- 5a4:        9e38007b         fcvtzs        x27, s3\n- 5a8:        1e78011d         fcvtzs        w29, d8\n- 5ac:        9e7802a9         fcvtzs        x9, d21\n- 5b0:        1e2203b4         scvtf        s20, w29\n- 5b4:        9e220107         scvtf        s7, x8\n- 5b8:        1e6202ac         scvtf        d12, w21\n- 5bc:        9e6202b0         scvtf        d16, x21\n- 5c0:        1e2600b2         fmov        w18, s5\n- 5c4:        9e660119         fmov        x25, d8\n- 5c8:        1e270352         fmov        s18, w26\n- 5cc:        9e670160         fmov        d0, x11\n- 5d0:        1e262200         fcmp        s16, s6\n- 5d4:        1e7d2200         fcmp        d16, d29\n- 5d8:        1e2023c8         fcmp        s30, #0.0\n- 5dc:        1e602128         fcmp        d9, #0.0\n- 5e0:        293e119b         stp        w27, w4, [x12, #-16]\n- 5e4:        294a2543         ldp        w3, w9, [x10, #80]\n- 5e8:        69480c70         ldpsw        x16, x3, [x3, #64]\n- 5ec:        a934726a         stp        x10, x28, [x19, #-192]\n- 5f0:        a97448f3         ldp        x19, x18, [x7, #-192]\n- 5f4:        298243ca         stp        w10, w16, [x30, #16]!\n- 5f8:        29e21242         ldp        w2, w4, [x18, #-240]!\n- 5fc:        69c64db8         ldpsw        x24, x19, [x13, #48]!\n- 600:        a9800311         stp        x17, x0, [x24, #0]!\n- 604:        a9f4686e         ldp        x14, x26, [x3, #-192]!\n- 608:        288a0416         stp        w22, w1, [x0], #80\n- 60c:        28fe2812         ldp        w18, w10, [x0], #-16\n- 610:        68fe62d8         .inst        0x68fe62d8 ; undefined\n- 614:        a885308c         stp        x12, x12, [x4], #80\n- 618:        a8f12664         ldp        x4, x9, [x19], #-240\n- 61c:        282468d2         stnp        w18, w26, [x6, #-224]\n- 620:        284e5035         ldnp        w21, w20, [x1, #112]\n- 624:        a8327699         stnp        x25, x29, [x20, #-224]\n- 628:        a84716e1         ldnp        x1, x5, [x23, #112]\n- 62c:        0c407284         ld1        {v4.8b}, [x20]\n- 630:        4cdfa158         ld1        {v24.16b, v25.16b}, [x10], #32\n- 634:        0ccf6cd8         ld1        {v24.1d-v26.1d}, [x6], x15\n- 638:        4cdf2483         ld1        {v3.8h-v6.8h}, [x4], #64\n- 63c:        0d40c0c2         ld1r        {v2.8b}, [x6]\n- 640:        4ddfc9cd         ld1r        {v13.4s}, [x14], #4\n- 644:        0dd8ceaf         ld1r        {v15.1d}, [x21], x24\n- 648:        4c408ea9         ld2        {v9.2d, v10.2d}, [x21]\n- 64c:        0cdf86bd         ld2        {v29.4h, v30.4h}, [x21], #16\n- 650:        4d60c1c8         ld2r        {v8.16b, v9.16b}, [x14]\n- 654:        0dffca87         ld2r        {v7.2s, v8.2s}, [x20], #8\n- 658:        4de3cc7c         ld2r        {v28.2d, v29.2d}, [x3], x3\n- 65c:        4cdd497b         ld3        {v27.4s-v29.4s}, [x11], x29\n- 660:        0c404950         ld3        {v16.2s-v18.2s}, [x10]\n- 664:        4d40e595         ld3r        {v21.8h-v23.8h}, [x12]\n- 668:        4ddfeba4         ld3r        {v4.4s-v6.4s}, [x29], #12\n- 66c:        0dd3ed38         ld3r        {v24.1d-v26.1d}, [x9], x19\n- 670:        4cdf046a         ld4        {v10.8h-v13.8h}, [x3], #64\n- 674:        0cc9039b         ld4        {v27.8b-v30.8b}, [x28], x9\n- 678:        0d60e3d5         ld4r        {v21.8b-v24.8b}, [x30]\n- 67c:        0dffe5d7         ld4r        {v23.4h-v26.4h}, [x14], #8\n- 680:        0df4e9a4         ld4r        {v4.2s-v7.2s}, [x13], x20\n- 684:        ba5fd3e3         ccmn        xzr, xzr, #0x3, le\n- 688:        3a5f03e5         ccmn        wzr, wzr, #0x5, eq  \/\/ eq = none\n- 68c:        fa411be4         ccmp        xzr, #0x1, #0x4, ne  \/\/ ne = any\n- 690:        7a42cbe2         ccmp        wzr, #0x2, #0x2, gt\n- 694:        93df03ff         ror        xzr, xzr, #0\n- 698:        c820ffff         stlxp        w0, xzr, xzr, [sp]\n- 69c:        8822fc7f         stlxp        w2, wzr, wzr, [x3]\n- 6a0:        c8247cbf         stxp        w4, xzr, xzr, [x5]\n- 6a4:        88267fff         stxp        w6, wzr, wzr, [sp]\n- 6a8:        4e010fe0         dup        v0.16b, wzr\n- 6ac:        4e081fe1         mov        v1.d[0], xzr\n- 6b0:        4e0c1fe1         mov        v1.s[1], wzr\n- 6b4:        4e0a1fe1         mov        v1.h[2], wzr\n- 6b8:        4e071fe1         mov        v1.b[3], wzr\n- 6bc:        4cc0ac3f         ld1        {v31.2d, v0.2d}, [x1], x0\n- 6c0:        1e601000         fmov        d0, #2.000000000000000000e+00\n- 6c4:        1e603000         fmov        d0, #2.125000000000000000e+00\n- 6c8:        1e621000         fmov        d0, #4.000000000000000000e+00\n- 6cc:        1e623000         fmov        d0, #4.250000000000000000e+00\n- 6d0:        1e641000         fmov        d0, #8.000000000000000000e+00\n- 6d4:        1e643000         fmov        d0, #8.500000000000000000e+00\n- 6d8:        1e661000         fmov        d0, #1.600000000000000000e+01\n- 6dc:        1e663000         fmov        d0, #1.700000000000000000e+01\n- 6e0:        1e681000         fmov        d0, #1.250000000000000000e-01\n- 6e4:        1e683000         fmov        d0, #1.328125000000000000e-01\n- 6e8:        1e6a1000         fmov        d0, #2.500000000000000000e-01\n- 6ec:        1e6a3000         fmov        d0, #2.656250000000000000e-01\n- 6f0:        1e6c1000         fmov        d0, #5.000000000000000000e-01\n- 6f4:        1e6c3000         fmov        d0, #5.312500000000000000e-01\n- 6f8:        1e6e1000         fmov        d0, #1.000000000000000000e+00\n- 6fc:        1e6e3000         fmov        d0, #1.062500000000000000e+00\n- 700:        1e701000         fmov        d0, #-2.000000000000000000e+00\n- 704:        1e703000         fmov        d0, #-2.125000000000000000e+00\n- 708:        1e721000         fmov        d0, #-4.000000000000000000e+00\n- 70c:        1e723000         fmov        d0, #-4.250000000000000000e+00\n- 710:        1e741000         fmov        d0, #-8.000000000000000000e+00\n- 714:        1e743000         fmov        d0, #-8.500000000000000000e+00\n- 718:        1e761000         fmov        d0, #-1.600000000000000000e+01\n- 71c:        1e763000         fmov        d0, #-1.700000000000000000e+01\n- 720:        1e781000         fmov        d0, #-1.250000000000000000e-01\n- 724:        1e783000         fmov        d0, #-1.328125000000000000e-01\n- 728:        1e7a1000         fmov        d0, #-2.500000000000000000e-01\n- 72c:        1e7a3000         fmov        d0, #-2.656250000000000000e-01\n- 730:        1e7c1000         fmov        d0, #-5.000000000000000000e-01\n- 734:        1e7c3000         fmov        d0, #-5.312500000000000000e-01\n- 738:        1e7e1000         fmov        d0, #-1.000000000000000000e+00\n- 73c:        1e7e3000         fmov        d0, #-1.062500000000000000e+00\n- 740:        f8358305         swp        x21, x5, [x24]\n- 744:        f82d01ed         ldadd        x13, x13, [x15]\n- 748:        f8361353         ldclr        x22, x19, [x26]\n- 74c:        f839234a         ldeor        x25, x10, [x26]\n- 750:        f82531fb         ldset        x5, x27, [x15]\n- 754:        f8335165         ldsmin        x19, x5, [x11]\n- 758:        f83a4080         ldsmax        x26, x0, [x4]\n- 75c:        f83673d7         ldumin        x22, x23, [x30]\n- 760:        f832611c         ldumax        x18, x28, [x8]\n- 764:        f8ad837d         swpa        x13, x29, [x27]\n- 768:        f8ab01a5         ldadda        x11, x5, [x13]\n- 76c:        f8a112b8         ldclra        x1, x24, [x21]\n- 770:        f8bb2311         ldeora        x27, x17, [x24]\n- 774:        f8b230be         ldseta        x18, x30, [x5]\n- 778:        f8a75336         ldsmina        x7, x22, [x25]\n- 77c:        f8a4427a         ldsmaxa        x4, x26, [x19]\n- 780:        f8a6707e         ldumina        x6, x30, [x3]\n- 784:        f8b860b7         ldumaxa        x24, x23, [x5]\n- 788:        f8f88392         swpal        x24, x18, [x28]\n- 78c:        f8f300ff         ldaddal        x19, xzr, [x7]\n- 790:        f8ed1386         ldclral        x13, x6, [x28]\n- 794:        f8e822af         ldeoral        x8, x15, [x21]\n- 798:        f8e2302d         ldsetal        x2, x13, [x1]\n- 79c:        f8f1533d         ldsminal        x17, x29, [x25]\n- 7a0:        f8f941d2         ldsmaxal        x25, x18, [x14]\n- 7a4:        f8ff7366         lduminal        xzr, x6, [x27]\n- 7a8:        f8f061e5         ldumaxal        x16, x5, [x15]\n- 7ac:        f86b8072         swpl        x11, x18, [x3]\n- 7b0:        f87a0054         ldaddl        x26, x20, [x2]\n- 7b4:        f86b1164         ldclrl        x11, x4, [x11]\n- 7b8:        f87e22f3         ldeorl        x30, x19, [x23]\n- 7bc:        f86331cf         ldsetl        x3, x15, [x14]\n- 7c0:        f87e5296         ldsminl        x30, x22, [x20]\n- 7c4:        f8674305         ldsmaxl        x7, x5, [x24]\n- 7c8:        f87771f0         lduminl        x23, x16, [x15]\n- 7cc:        f86b6013         ldumaxl        x11, x19, [x0]\n- 7d0:        b83c803c         swp        w28, w28, [x1]\n- 7d4:        b82b0195         ldadd        w11, w21, [x12]\n- 7d8:        b83d1240         ldclr        w29, w0, [x18]\n- 7dc:        b8252320         ldeor        w5, w0, [x25]\n- 7e0:        b82e3340         ldset        w14, w0, [x26]\n- 7e4:        b83c53b2         ldsmin        w28, w18, [x29]\n- 7e8:        b82f43a1         ldsmax        w15, w1, [x29]\n- 7ec:        b828739a         ldumin        w8, w26, [x28]\n- 7f0:        b831608e         ldumax        w17, w14, [x4]\n- 7f4:        b8b88039         swpa        w24, w25, [x1]\n- 7f8:        b8aa0231         ldadda        w10, w17, [x17]\n- 7fc:        b8bd12b4         ldclra        w29, w20, [x21]\n- 800:        b8bd2189         ldeora        w29, w9, [x12]\n- 804:        b8ab30a6         ldseta        w11, w6, [x5]\n- 808:        b8b552a7         ldsmina        w21, w7, [x21]\n- 80c:        b8aa4197         ldsmaxa        w10, w23, [x12]\n- 810:        b8b57145         ldumina        w21, w5, [x10]\n- 814:        b8be6254         ldumaxa        w30, w20, [x18]\n- 818:        b8ed80b7         swpal        w13, w23, [x5]\n- 81c:        b8ef00b8         ldaddal        w15, w24, [x5]\n- 820:        b8e9132a         ldclral        w9, w10, [x25]\n- 824:        b8f42231         ldeoral        w20, w17, [x17]\n- 828:        b8ec33d2         ldsetal        w12, w18, [x30]\n- 82c:        b8e35323         ldsminal        w3, w3, [x25]\n- 830:        b8fa4159         ldsmaxal        w26, w25, [x10]\n- 834:        b8e273eb         lduminal        w2, w11, [sp]\n- 838:        b8e760a2         ldumaxal        w7, w2, [x5]\n- 83c:        b8608287         swpl        w0, w7, [x20]\n- 840:        b865005f         staddl        w5, [x2]\n- 844:        b87b1379         ldclrl        w27, w25, [x27]\n- 848:        b87e2358         ldeorl        w30, w24, [x26]\n- 84c:        b86f32c2         ldsetl        w15, w2, [x22]\n- 850:        b86053e3         ldsminl        w0, w3, [sp]\n- 854:        b86f4154         ldsmaxl        w15, w20, [x10]\n- 858:        b87671d5         lduminl        w22, w21, [x14]\n- 85c:        b866605e         ldumaxl        w6, w30, [x2]\n+   0: 8b18ec0f  add x15, x0, x24, lsl #59\n+   4: cb9636d1  sub x17, x22, x22, asr #13\n+   8: ab1ce74a  adds  x10, x26, x28, lsl #57\n+   c: eb184a19  subs  x25, x16, x24, lsl #18\n+  10: 0b1c1ca8  add w8, w5, w28, lsl #7\n+  14: 4b817388  sub w8, w28, w1, asr #28\n+  18: 2b01004c  adds  w12, w2, w1\n+  1c: 6b5164b7  subs  w23, w5, w17, lsr #25\n+  20: 8a0d5595  and x21, x12, x13, lsl #21\n+  24: aa9791f5  orr x21, x15, x23, asr #36\n+  28: ca9bc316  eor x22, x24, x27, asr #48\n+  2c: ea82d1f6  ands  x22, x15, x2, asr #52\n+  30: 0a980e21  and w1, w17, w24, asr #3\n+  34: 2a862c45  orr w5, w2, w6, asr #11\n+  38: 4a453037  eor w23, w1, w5, lsr #12\n+  3c: 6a8e5180  ands  w0, w12, w14, asr #20\n+  40: 8a621cc1  bic x1, x6, x2, lsr #7\n+  44: aa24bd1e  orn x30, x8, x4, lsl #47\n+  48: cab4d6d1  eon x17, x22, x20, asr #53\n+  4c: eaa591fd  bics  x29, x15, x5, asr #36\n+  50: 0a7d6efe  bic w30, w23, w29, lsr #27\n+  54: 2a2253ac  orn w12, w29, w2, lsl #20\n+  58: 4aa61187  eon w7, w12, w6, asr #4\n+  5c: 6aa755b0  bics  w16, w13, w7, asr #21\n+  60: 110b5a25  add w5, w17, #0x2d6\n+  64: 31056e0a  adds  w10, w16, #0x15b\n+  68: 510f48ba  sub w26, w5, #0x3d2\n+  6c: 710ac715  subs  w21, w24, #0x2b1\n+  70: 910f6e0a  add x10, x16, #0x3db\n+  74: b10a65ef  adds  x15, x15, #0x299\n+  78: d1009e98  sub x24, x20, #0x27\n+  7c: f10131aa  subs  x10, x13, #0x4c\n+  80: 121d4e67  and w7, w19, #0x7ffff8\n+  84: 32043e25  orr w5, w17, #0xf0000fff\n+  88: 52132390  eor w16, w28, #0x3fe000\n+  8c: 72160b0e  ands  w14, w24, #0x1c00\n+  90: 9273e76e  and x14, x27, #0xffffffffffffe07f\n+  94: b256416c  orr x12, x11, #0x7fffc0000000000\n+  98: d24b5002  eor x2, x0, #0xffe00000000003ff\n+  9c: f266da8d  ands  x13, x20, #0xfffffffffc01ffff\n+  a0: 14000000  b a0 <back+0xa0>\n+  a4: 17ffffd7  b 0 <back>\n+  a8: 140001ee  b 860 <forth>\n+  ac: 94000000  bl  ac <back+0xac>\n+  b0: 97ffffd4  bl  0 <back>\n+  b4: 940001eb  bl  860 <forth>\n+  b8: 3400000f  cbz w15, b8 <back+0xb8>\n+  bc: 34fffa2f  cbz w15, 0 <back>\n+  c0: 34003d0f  cbz w15, 860 <forth>\n+  c4: 3500001c  cbnz  w28, c4 <back+0xc4>\n+  c8: 35fff9dc  cbnz  w28, 0 <back>\n+  cc: 35003cbc  cbnz  w28, 860 <forth>\n+  d0: b400001b  cbz x27, d0 <back+0xd0>\n+  d4: b4fff97b  cbz x27, 0 <back>\n+  d8: b4003c5b  cbz x27, 860 <forth>\n+  dc: b5000000  cbnz  x0, dc <back+0xdc>\n+  e0: b5fff900  cbnz  x0, 0 <back>\n+  e4: b5003be0  cbnz  x0, 860 <forth>\n+  e8: 1000000d  adr x13, e8 <back+0xe8>\n+  ec: 10fff8ad  adr x13, 0 <back>\n+  f0: 10003b8d  adr x13, 860 <forth>\n+  f4: 90000003  adrp  x3, 0 <back>\n+  f8: 36380015  tbz w21, #7, f8 <back+0xf8>\n+  fc: 363ff835  tbz w21, #7, 0 <back>\n+ 100: 36383b15  tbz w21, #7, 860 <forth>\n+ 104: 3748000f  tbnz  w15, #9, 104 <back+0x104>\n+ 108: 374ff7cf  tbnz  w15, #9, 0 <back>\n+ 10c: 37483aaf  tbnz  w15, #9, 860 <forth>\n+ 110: 12a14bee  mov w14, #0xf5a0ffff              \/\/ #-173998081\n+ 114: 5283bb51  mov w17, #0x1dda                  \/\/ #7642\n+ 118: 72858ebb  movk  w27, #0x2c75\n+ 11c: 92c98881  mov x1, #0xffffb3bbffffffff     \/\/ #-83854941487105\n+ 120: d2aa50d4  mov x20, #0x52860000              \/\/ #1384513536\n+ 124: f2afd9d4  movk  x20, #0x7ece, lsl #16\n+ 128: 935c504d  sbfiz x13, x2, #36, #21\n+ 12c: 33133e90  bfi w16, w20, #13, #16\n+ 130: 5309196b  ubfiz w11, w11, #23, #7\n+ 134: 93595482  sbfiz x2, x4, #39, #22\n+ 138: b3424e0d  bfxil x13, x16, #2, #18\n+ 13c: d3481728  ubfiz x8, x25, #56, #6\n+ 140: 138a3b7d  extr  w29, w27, w10, #14\n+ 144: 93c66286  extr  x6, x20, x6, #24\n+ 148: 54000000  b.eq  148 <back+0x148>  \/\/ b.none\n+ 14c: 54fff5a0  b.eq  0 <back>  \/\/ b.none\n+ 150: 54003880  b.eq  860 <forth>  \/\/ b.none\n+ 154: 54000001  b.ne  154 <back+0x154>  \/\/ b.any\n+ 158: 54fff541  b.ne  0 <back>  \/\/ b.any\n+ 15c: 54003821  b.ne  860 <forth>  \/\/ b.any\n+ 160: 54000002  b.cs  160 <back+0x160>  \/\/ b.hs, b.nlast\n+ 164: 54fff4e2  b.cs  0 <back>  \/\/ b.hs, b.nlast\n+ 168: 540037c2  b.cs  860 <forth>  \/\/ b.hs, b.nlast\n+ 16c: 54000002  b.cs  16c <back+0x16c>  \/\/ b.hs, b.nlast\n+ 170: 54fff482  b.cs  0 <back>  \/\/ b.hs, b.nlast\n+ 174: 54003762  b.cs  860 <forth>  \/\/ b.hs, b.nlast\n+ 178: 54000003  b.cc  178 <back+0x178>  \/\/ b.lo, b.ul, b.last\n+ 17c: 54fff423  b.cc  0 <back>  \/\/ b.lo, b.ul, b.last\n+ 180: 54003703  b.cc  860 <forth>  \/\/ b.lo, b.ul, b.last\n+ 184: 54000003  b.cc  184 <back+0x184>  \/\/ b.lo, b.ul, b.last\n+ 188: 54fff3c3  b.cc  0 <back>  \/\/ b.lo, b.ul, b.last\n+ 18c: 540036a3  b.cc  860 <forth>  \/\/ b.lo, b.ul, b.last\n+ 190: 54000004  b.mi  190 <back+0x190>  \/\/ b.first\n+ 194: 54fff364  b.mi  0 <back>  \/\/ b.first\n+ 198: 54003644  b.mi  860 <forth>  \/\/ b.first\n+ 19c: 54000005  b.pl  19c <back+0x19c>  \/\/ b.nfrst\n+ 1a0: 54fff305  b.pl  0 <back>  \/\/ b.nfrst\n+ 1a4: 540035e5  b.pl  860 <forth>  \/\/ b.nfrst\n+ 1a8: 54000006  b.vs  1a8 <back+0x1a8>\n+ 1ac: 54fff2a6  b.vs  0 <back>\n+ 1b0: 54003586  b.vs  860 <forth>\n+ 1b4: 54000007  b.vc  1b4 <back+0x1b4>\n+ 1b8: 54fff247  b.vc  0 <back>\n+ 1bc: 54003527  b.vc  860 <forth>\n+ 1c0: 54000008  b.hi  1c0 <back+0x1c0>  \/\/ b.pmore\n+ 1c4: 54fff1e8  b.hi  0 <back>  \/\/ b.pmore\n+ 1c8: 540034c8  b.hi  860 <forth>  \/\/ b.pmore\n+ 1cc: 54000009  b.ls  1cc <back+0x1cc>  \/\/ b.plast\n+ 1d0: 54fff189  b.ls  0 <back>  \/\/ b.plast\n+ 1d4: 54003469  b.ls  860 <forth>  \/\/ b.plast\n+ 1d8: 5400000a  b.ge  1d8 <back+0x1d8>  \/\/ b.tcont\n+ 1dc: 54fff12a  b.ge  0 <back>  \/\/ b.tcont\n+ 1e0: 5400340a  b.ge  860 <forth>  \/\/ b.tcont\n+ 1e4: 5400000b  b.lt  1e4 <back+0x1e4>  \/\/ b.tstop\n+ 1e8: 54fff0cb  b.lt  0 <back>  \/\/ b.tstop\n+ 1ec: 540033ab  b.lt  860 <forth>  \/\/ b.tstop\n+ 1f0: 5400000c  b.gt  1f0 <back+0x1f0>\n+ 1f4: 54fff06c  b.gt  0 <back>\n+ 1f8: 5400334c  b.gt  860 <forth>\n+ 1fc: 5400000d  b.le  1fc <back+0x1fc>\n+ 200: 54fff00d  b.le  0 <back>\n+ 204: 540032ed  b.le  860 <forth>\n+ 208: 5400000e  b.al  208 <back+0x208>\n+ 20c: 54ffefae  b.al  0 <back>\n+ 210: 5400328e  b.al  860 <forth>\n+ 214: 5400000f  b.nv  214 <back+0x214>\n+ 218: 54ffef4f  b.nv  0 <back>\n+ 21c: 5400322f  b.nv  860 <forth>\n+ 220: d40d2881  svc #0x6944\n+ 224: d40ea5c2  hvc #0x752e\n+ 228: d40518a3  smc #0x28c5\n+ 22c: d42eca40  brk #0x7652\n+ 230: d44a2e60  hlt #0x5173\n+ 234: d503201f  nop\n+ 238: d69f03e0  eret\n+ 23c: d6bf03e0  drps\n+ 240: d5033fdf  isb\n+ 244: d5033d9f  dsb ld\n+ 248: d5033bbf  dmb ish\n+ 24c: d61f0120  br  x9\n+ 250: d63f0120  blr x9\n+ 254: c8027d7d  stxr  w2, x29, [x11]\n+ 258: c816ff85  stlxr w22, x5, [x28]\n+ 25c: c85f7e8e  ldxr  x14, [x20]\n+ 260: c85ffe7d  ldaxr x29, [x19]\n+ 264: c89ffea6  stlr  x6, [x21]\n+ 268: c8dffc73  ldar  x19, [x3]\n+ 26c: 880c7f63  stxr  w12, w3, [x27]\n+ 270: 8811fdfa  stlxr w17, w26, [x15]\n+ 274: 885f7dcd  ldxr  w13, [x14]\n+ 278: 885fff4c  ldaxr w12, [x26]\n+ 27c: 889ffe28  stlr  w8, [x17]\n+ 280: 88dfffd5  ldar  w21, [x30]\n+ 284: 48007d6f  stxrh w0, w15, [x11]\n+ 288: 4811fc34  stlxrh  w17, w20, [x1]\n+ 28c: 485f7d1d  ldxrh w29, [x8]\n+ 290: 485ffd91  ldaxrh  w17, [x12]\n+ 294: 489ffc8b  stlrh w11, [x4]\n+ 298: 48dffc90  ldarh w16, [x4]\n+ 29c: 080e7c85  stxrb w14, w5, [x4]\n+ 2a0: 081bfe11  stlxrb  w27, w17, [x16]\n+ 2a4: 085f7f66  ldxrb w6, [x27]\n+ 2a8: 085fff1b  ldaxrb  w27, [x24]\n+ 2ac: 089ffe8a  stlrb w10, [x20]\n+ 2b0: 08dfff49  ldarb w9, [x26]\n+ 2b4: c87f7b85  ldxp  x5, x30, [x28]\n+ 2b8: c87fa66a  ldaxp x10, x9, [x19]\n+ 2bc: c82b5590  stxp  w11, x16, x21, [x12]\n+ 2c0: c82adc94  stlxp w10, x20, x23, [x4]\n+ 2c4: 887f0416  ldxp  w22, w1, [x0]\n+ 2c8: 887f8503  ldaxp w3, w1, [x8]\n+ 2cc: 88205fc9  stxp  w0, w9, w23, [x30]\n+ 2d0: 8837c560  stlxp w23, w0, w17, [x11]\n+ 2d4: f81e1146  stur  x6, [x10, #-31]\n+ 2d8: b81fb007  stur  w7, [x0, #-5]\n+ 2dc: 381f3205  sturb w5, [x16, #-13]\n+ 2e0: 7801f27e  sturh w30, [x19, #31]\n+ 2e4: f8477130  ldur  x16, [x9, #119]\n+ 2e8: b843b208  ldur  w8, [x16, #59]\n+ 2ec: 385f918a  ldurb w10, [x12, #-7]\n+ 2f0: 785da12e  ldurh w14, [x9, #-38]\n+ 2f4: 389f83d8  ldursb  x24, [x30, #-8]\n+ 2f8: 78817087  ldursh  x7, [x4, #23]\n+ 2fc: 78dd91d1  ldursh  w17, [x14, #-39]\n+ 300: b89e136b  ldursw  x11, [x27, #-31]\n+ 304: fc4410ec  ldur  d12, [x7, #65]\n+ 308: bc5fe200  ldur  s0, [x16, #-2]\n+ 30c: fc15f2ed  stur  d13, [x23, #-161]\n+ 310: bc1c2075  stur  s21, [x3, #-62]\n+ 314: f8064ca2  str x2, [x5, #100]!\n+ 318: b81a4c29  str w9, [x1, #-92]!\n+ 31c: 381fbfdb  strb  w27, [x30, #-5]!\n+ 320: 7800cdfb  strh  w27, [x15, #12]!\n+ 324: f852ce24  ldr x4, [x17, #-212]!\n+ 328: b841eef5  ldr w21, [x23, #30]!\n+ 32c: 385f9e2d  ldrb  w13, [x17, #-7]!\n+ 330: 785cec19  ldrh  w25, [x0, #-50]!\n+ 334: 389ebea1  ldrsb x1, [x21, #-21]!\n+ 338: 789caebc  ldrsh x28, [x21, #-54]!\n+ 33c: 78c02c8b  ldrsh w11, [x4, #2]!\n+ 340: b883dd31  ldrsw x17, [x9, #61]!\n+ 344: fc427e7d  ldr d29, [x19, #39]!\n+ 348: bc5abed6  ldr s22, [x22, #-85]!\n+ 34c: fc11ff29  str d9, [x25, #-225]!\n+ 350: bc1f1c49  str s9, [x2, #-15]!\n+ 354: f81be6ed  str x13, [x23], #-66\n+ 358: b800a611  str w17, [x16], #10\n+ 35c: 381e05c1  strb  w1, [x14], #-32\n+ 360: 78006411  strh  w17, [x0], #6\n+ 364: f855473b  ldr x27, [x25], #-172\n+ 368: b85da72d  ldr w13, [x25], #-38\n+ 36c: 385e372b  ldrb  w11, [x25], #-29\n+ 370: 784144be  ldrh  w30, [x5], #20\n+ 374: 389f94e9  ldrsb x9, [x7], #-7\n+ 378: 789c2460  ldrsh x0, [x3], #-62\n+ 37c: 78c1f5c7  ldrsh w7, [x14], #31\n+ 380: b8827771  ldrsw x17, [x27], #39\n+ 384: fc515491  ldr d17, [x4], #-235\n+ 388: bc4226ba  ldr s26, [x21], #34\n+ 38c: fc1c7625  str d5, [x17], #-57\n+ 390: bc1935ad  str s13, [x13], #-109\n+ 394: f824da06  str x6, [x16, w4, sxtw #3]\n+ 398: b834db09  str w9, [x24, w20, sxtw #2]\n+ 39c: 38237ba3  strb  w3, [x29, x3, lsl #0]\n+ 3a0: 783e6a2a  strh  w10, [x17, x30]\n+ 3a4: f867497b  ldr x27, [x11, w7, uxtw]\n+ 3a8: b87949ee  ldr w14, [x15, w25, uxtw]\n+ 3ac: 387379d8  ldrb  w24, [x14, x19, lsl #0]\n+ 3b0: 7866c810  ldrh  w16, [x0, w6, sxtw]\n+ 3b4: 38acd98a  ldrsb x10, [x12, w12, sxtw #0]\n+ 3b8: 78b0499a  ldrsh x26, [x12, w16, uxtw]\n+ 3bc: 78ee781a  ldrsh w26, [x0, x14, lsl #1]\n+ 3c0: b8bbf971  ldrsw x17, [x11, x27, sxtx #2]\n+ 3c4: fc73d803  ldr d3, [x0, w19, sxtw #3]\n+ 3c8: bc6979fa  ldr s26, [x15, x9, lsl #2]\n+ 3cc: fc30e9ab  str d11, [x13, x16, sxtx]\n+ 3d0: bc355a7a  str s26, [x19, w21, uxtw #2]\n+ 3d4: f91886a8  str x8, [x21, #12552]\n+ 3d8: b918ef6a  str w10, [x27, #6380]\n+ 3dc: 391b15db  strb  w27, [x14, #1733]\n+ 3e0: 791ac0f0  strh  w16, [x7, #3424]\n+ 3e4: f958753b  ldr x27, [x9, #12520]\n+ 3e8: b95a1958  ldr w24, [x10, #6680]\n+ 3ec: 395b3f18  ldrb  w24, [x24, #1743]\n+ 3f0: 795800b4  ldrh  w20, [x5, #3072]\n+ 3f4: 39988891  ldrsb x17, [x4, #1570]\n+ 3f8: 799a81ae  ldrsh x14, [x13, #3392]\n+ 3fc: 79dd172a  ldrsh w10, [x25, #3722]\n+ 400: b9981342  ldrsw x2, [x26, #6160]\n+ 404: fd5d21da  ldr d26, [x14, #14912]\n+ 408: bd5e7c9c  ldr s28, [x4, #7804]\n+ 40c: fd1b526e  str d14, [x19, #13984]\n+ 410: bd18df97  str s23, [x28, #6364]\n+ 414: 58002268  ldr x8, 860 <forth>\n+ 418: 18ffdf51  ldr w17, 0 <back>\n+ 41c: f8951080  prfum pldl1keep, [x4, #-175]\n+ 420: d8000000  prfm  pldl1keep, 420 <back+0x420>\n+ 424: f8a4c900  prfm  pldl1keep, [x8, w4, sxtw]\n+ 428: f999e180  prfm  pldl1keep, [x12, #13248]\n+ 42c: 1a150374  adc w20, w27, w21\n+ 430: 3a060227  adcs  w7, w17, w6\n+ 434: 5a1900c5  sbc w5, w6, w25\n+ 438: 7a0e017e  sbcs  w30, w11, w14\n+ 43c: 9a0b0223  adc x3, x17, x11\n+ 440: ba110159  adcs  x25, x10, x17\n+ 444: da170207  sbc x7, x16, x23\n+ 448: fa050144  sbcs  x4, x10, x5\n+ 44c: 0b2973c9  add w9, w30, w9, uxtx #4\n+ 450: 2b30a8a0  adds  w0, w5, w16, sxth #2\n+ 454: cb3b8baf  sub x15, x29, w27, sxtb #2\n+ 458: 6b21f12b  subs  w11, w9, w1, sxtx #4\n+ 45c: 8b264f02  add x2, x24, w6, uxtw #3\n+ 460: ab3a70d3  adds  x19, x6, x26, uxtx #4\n+ 464: cb39ef48  sub x8, x26, x25, sxtx #3\n+ 468: eb29329a  subs  x26, x20, w9, uxth #4\n+ 46c: 3a5a41a7  ccmn  w13, w26, #0x7, mi  \/\/ mi = first\n+ 470: 7a54310f  ccmp  w8, w20, #0xf, cc  \/\/ cc = lo, ul, last\n+ 474: ba4302c8  ccmn  x22, x3, #0x8, eq  \/\/ eq = none\n+ 478: fa58a04a  ccmp  x2, x24, #0xa, ge  \/\/ ge = tcont\n+ 47c: 3a50490d  ccmn  w8, #0x10, #0xd, mi  \/\/ mi = first\n+ 480: 7a4c0a01  ccmp  w16, #0xc, #0x1, eq  \/\/ eq = none\n+ 484: ba5f79e3  ccmn  x15, #0x1f, #0x3, vc\n+ 488: fa4c0aef  ccmp  x23, #0xc, #0xf, eq  \/\/ eq = none\n+ 48c: 1a9a30ee  csel  w14, w7, w26, cc  \/\/ cc = lo, ul, last\n+ 490: 1a9ed763  csinc w3, w27, w30, le\n+ 494: 5a9702ab  csinv w11, w21, w23, eq  \/\/ eq = none\n+ 498: 5a95c7da  csneg w26, w30, w21, gt\n+ 49c: 9a8d835c  csel  x28, x26, x13, hi  \/\/ hi = pmore\n+ 4a0: 9a909471  csinc x17, x3, x16, ls  \/\/ ls = plast\n+ 4a4: da8380ab  csinv x11, x5, x3, hi  \/\/ hi = pmore\n+ 4a8: da93c461  csneg x1, x3, x19, gt\n+ 4ac: 5ac00120  rbit  w0, w9\n+ 4b0: 5ac005da  rev16 w26, w14\n+ 4b4: 5ac00a2d  rev w13, w17\n+ 4b8: 5ac0128b  clz w11, w20\n+ 4bc: 5ac0163c  cls w28, w17\n+ 4c0: dac0008d  rbit  x13, x4\n+ 4c4: dac007c1  rev16 x1, x30\n+ 4c8: dac009cd  rev32 x13, x14\n+ 4cc: dac00d05  rev x5, x8\n+ 4d0: dac01322  clz x2, x25\n+ 4d4: dac01514  cls x20, x8\n+ 4d8: 1adb0b35  udiv  w21, w25, w27\n+ 4dc: 1ad00d4d  sdiv  w13, w10, w16\n+ 4e0: 1ad1203c  lsl w28, w1, w17\n+ 4e4: 1aca26f9  lsr w25, w23, w10\n+ 4e8: 1ac72867  asr w7, w3, w7\n+ 4ec: 1ace2fce  ror w14, w30, w14\n+ 4f0: 9acf0acc  udiv  x12, x22, x15\n+ 4f4: 9acd0f22  sdiv  x2, x25, x13\n+ 4f8: 9ad522e7  lsl x7, x23, x21\n+ 4fc: 9ac0258b  lsr x11, x12, x0\n+ 500: 9adc293e  asr x30, x9, x28\n+ 504: 9ad62cad  ror x13, x5, x22\n+ 508: 9bc47ea5  umulh x5, x21, x4\n+ 50c: 9b477c51  smulh x17, x2, x7\n+ 510: 1b11318c  madd  w12, w12, w17, w12\n+ 514: 1b01edfe  msub  w30, w15, w1, w27\n+ 518: 9b117662  madd  x2, x19, x17, x29\n+ 51c: 9b03fae4  msub  x4, x23, x3, x30\n+ 520: 9b313eef  smaddl  x15, w23, w17, x15\n+ 524: 9b21b59b  smsubl  x27, w12, w1, x13\n+ 528: 9bac45a6  umaddl  x6, w13, w12, x17\n+ 52c: 9ba6a839  umsubl  x25, w1, w6, x10\n+ 530: 1e240871  fmul  s17, s3, s4\n+ 534: 1e3518b0  fdiv  s16, s5, s21\n+ 538: 1e312b63  fadd  s3, s27, s17\n+ 53c: 1e2f3959  fsub  s25, s10, s15\n+ 540: 1e200a2a  fmul  s10, s17, s0\n+ 544: 1e630b5c  fmul  d28, d26, d3\n+ 548: 1e7b1804  fdiv  d4, d0, d27\n+ 54c: 1e6229dc  fadd  d28, d14, d2\n+ 550: 1e773b4c  fsub  d12, d26, d23\n+ 554: 1e610bcf  fmul  d15, d30, d1\n+ 558: 1f0534a4  fmadd s4, s5, s5, s13\n+ 55c: 1f1c85b5  fmsub s21, s13, s28, s1\n+ 560: 1f3d1c71  fnmadd  s17, s3, s29, s7\n+ 564: 1f3d6b37  fnmadd  s23, s25, s29, s26\n+ 568: 1f5e68ee  fmadd d14, d7, d30, d26\n+ 56c: 1f4aa4f6  fmsub d22, d7, d10, d9\n+ 570: 1f6e24e7  fnmadd  d7, d7, d14, d9\n+ 574: 1f6f630e  fnmadd  d14, d24, d15, d24\n+ 578: 1e204056  fmov  s22, s2\n+ 57c: 1e20c060  fabs  s0, s3\n+ 580: 1e214229  fneg  s9, s17\n+ 584: 1e21c178  fsqrt s24, s11\n+ 588: 1e22c32f  fcvt  d15, s25\n+ 58c: 1e604064  fmov  d4, d3\n+ 590: 1e60c2da  fabs  d26, d22\n+ 594: 1e61427e  fneg  d30, d19\n+ 598: 1e61c1cc  fsqrt d12, d14\n+ 59c: 1e6240f1  fcvt  s17, d7\n+ 5a0: 1e3801d8  fcvtzs  w24, s14\n+ 5a4: 9e38034d  fcvtzs  x13, s26\n+ 5a8: 1e780022  fcvtzs  w2, d1\n+ 5ac: 9e780165  fcvtzs  x5, d11\n+ 5b0: 1e22026e  scvtf s14, w19\n+ 5b4: 9e2202c1  scvtf s1, x22\n+ 5b8: 1e62023b  scvtf d27, w17\n+ 5bc: 9e620136  scvtf d22, x9\n+ 5c0: 1e26006e  fmov  w14, s3\n+ 5c4: 9e66022c  fmov  x12, d17\n+ 5c8: 1e270368  fmov  s8, w27\n+ 5cc: 9e67039d  fmov  d29, x28\n+ 5d0: 1e3e2000  fcmp  s0, s30\n+ 5d4: 1e692180  fcmp  d12, d9\n+ 5d8: 1e202148  fcmp  s10, #0.0\n+ 5dc: 1e602328  fcmp  d25, #0.0\n+ 5e0: 292e7b68  stp w8, w30, [x27, #-144]\n+ 5e4: 294a4f15  ldp w21, w19, [x24, #80]\n+ 5e8: 69626c50  ldpsw x16, x27, [x2, #-240]\n+ 5ec: a93814d5  stp x21, x5, [x6, #-128]\n+ 5f0: a97e679d  ldp x29, x25, [x28, #-32]\n+ 5f4: 29903408  stp w8, w13, [x0, #128]!\n+ 5f8: 29ec5039  ldp w25, w20, [x1, #-160]!\n+ 5fc: 69fc62ce  ldpsw x14, x24, [x22, #-32]!\n+ 600: a98504d1  stp x17, x1, [x6, #80]!\n+ 604: a9fc4735  ldp x21, x17, [x25, #-64]!\n+ 608: 28b05691  stp w17, w21, [x20], #-128\n+ 60c: 28c8705c  ldp w28, w28, [x2], #64\n+ 610: 68e07953  ldpsw x19, x30, [x10], #-256\n+ 614: a8bf3e31  stp x17, x15, [x17], #-16\n+ 618: a8fe0331  ldp x17, x0, [x25], #-32\n+ 61c: 283c170e  stnp  w14, w5, [x24, #-32]\n+ 620: 284e4c37  ldnp  w23, w19, [x1, #112]\n+ 624: a80419cb  stnp  x11, x6, [x14, #64]\n+ 628: a8722f62  ldnp  x2, x11, [x27, #-224]\n+ 62c: 0c407230  ld1 {v16.8b}, [x17]\n+ 630: 4cdfa13d  ld1 {v29.16b, v30.16b}, [x9], #32\n+ 634: 0cd56f1e  ld1 {v30.1d, v31.1d, v0.1d}, [x24], x21\n+ 638: 4cdf2440  ld1 {v0.8h-v3.8h}, [x2], #64\n+ 63c: 0d40c134  ld1r  {v20.8b}, [x9]\n+ 640: 4ddfc811  ld1r  {v17.4s}, [x0], #4\n+ 644: 0ddaced5  ld1r  {v21.1d}, [x22], x26\n+ 648: 4c408f33  ld2 {v19.2d, v20.2d}, [x25]\n+ 64c: 0cdf84aa  ld2 {v10.4h, v11.4h}, [x5], #16\n+ 650: 4d60c30a  ld2r  {v10.16b, v11.16b}, [x24]\n+ 654: 0dffcbad  ld2r  {v13.2s, v14.2s}, [x29], #8\n+ 658: 4de2cf96  ld2r  {v22.2d, v23.2d}, [x28], x2\n+ 65c: 4ccb489e  ld3 {v30.4s, v31.4s, v0.4s}, [x4], x11\n+ 660: 0c40481d  ld3 {v29.2s-v31.2s}, [x0]\n+ 664: 4d40e777  ld3r  {v23.8h-v25.8h}, [x27]\n+ 668: 4ddfe943  ld3r  {v3.4s-v5.4s}, [x10], #12\n+ 66c: 0dd6edd3  ld3r  {v19.1d-v21.1d}, [x14], x22\n+ 670: 4cdf040e  ld4 {v14.8h-v17.8h}, [x0], #64\n+ 674: 0cd902de  ld4 {v30.8b, v31.8b, v0.8b, v1.8b}, [x22], x25\n+ 678: 0d60e019  ld4r  {v25.8b-v28.8b}, [x0]\n+ 67c: 0dffe50a  ld4r  {v10.4h-v13.4h}, [x8], #8\n+ 680: 0dfce8c1  ld4r  {v1.2s-v4.2s}, [x6], x28\n+ 684: ba5fd3e3  ccmn  xzr, xzr, #0x3, le\n+ 688: 3a5f03e5  ccmn  wzr, wzr, #0x5, eq  \/\/ eq = none\n+ 68c: fa411be4  ccmp  xzr, #0x1, #0x4, ne  \/\/ ne = any\n+ 690: 7a42cbe2  ccmp  wzr, #0x2, #0x2, gt\n+ 694: 93df03ff  ror xzr, xzr, #0\n+ 698: c820ffff  stlxp w0, xzr, xzr, [sp]\n+ 69c: 8822fc7f  stlxp w2, wzr, wzr, [x3]\n+ 6a0: c8247cbf  stxp  w4, xzr, xzr, [x5]\n+ 6a4: 88267fff  stxp  w6, wzr, wzr, [sp]\n+ 6a8: 4e010fe0  dup v0.16b, wzr\n+ 6ac: 4e081fe1  mov v1.d[0], xzr\n+ 6b0: 4e0c1fe1  mov v1.s[1], wzr\n+ 6b4: 4e0a1fe1  mov v1.h[2], wzr\n+ 6b8: 4e071fe1  mov v1.b[3], wzr\n+ 6bc: 4cc0ac3f  ld1 {v31.2d, v0.2d}, [x1], x0\n+ 6c0: 1e601000  fmov  d0, #2.000000000000000000e+00\n+ 6c4: 1e603000  fmov  d0, #2.125000000000000000e+00\n+ 6c8: 1e621000  fmov  d0, #4.000000000000000000e+00\n+ 6cc: 1e623000  fmov  d0, #4.250000000000000000e+00\n+ 6d0: 1e641000  fmov  d0, #8.000000000000000000e+00\n+ 6d4: 1e643000  fmov  d0, #8.500000000000000000e+00\n+ 6d8: 1e661000  fmov  d0, #1.600000000000000000e+01\n+ 6dc: 1e663000  fmov  d0, #1.700000000000000000e+01\n+ 6e0: 1e681000  fmov  d0, #1.250000000000000000e-01\n+ 6e4: 1e683000  fmov  d0, #1.328125000000000000e-01\n+ 6e8: 1e6a1000  fmov  d0, #2.500000000000000000e-01\n+ 6ec: 1e6a3000  fmov  d0, #2.656250000000000000e-01\n+ 6f0: 1e6c1000  fmov  d0, #5.000000000000000000e-01\n+ 6f4: 1e6c3000  fmov  d0, #5.312500000000000000e-01\n+ 6f8: 1e6e1000  fmov  d0, #1.000000000000000000e+00\n+ 6fc: 1e6e3000  fmov  d0, #1.062500000000000000e+00\n+ 700: 1e701000  fmov  d0, #-2.000000000000000000e+00\n+ 704: 1e703000  fmov  d0, #-2.125000000000000000e+00\n+ 708: 1e721000  fmov  d0, #-4.000000000000000000e+00\n+ 70c: 1e723000  fmov  d0, #-4.250000000000000000e+00\n+ 710: 1e741000  fmov  d0, #-8.000000000000000000e+00\n+ 714: 1e743000  fmov  d0, #-8.500000000000000000e+00\n+ 718: 1e761000  fmov  d0, #-1.600000000000000000e+01\n+ 71c: 1e763000  fmov  d0, #-1.700000000000000000e+01\n+ 720: 1e781000  fmov  d0, #-1.250000000000000000e-01\n+ 724: 1e783000  fmov  d0, #-1.328125000000000000e-01\n+ 728: 1e7a1000  fmov  d0, #-2.500000000000000000e-01\n+ 72c: 1e7a3000  fmov  d0, #-2.656250000000000000e-01\n+ 730: 1e7c1000  fmov  d0, #-5.000000000000000000e-01\n+ 734: 1e7c3000  fmov  d0, #-5.312500000000000000e-01\n+ 738: 1e7e1000  fmov  d0, #-1.000000000000000000e+00\n+ 73c: 1e7e3000  fmov  d0, #-1.062500000000000000e+00\n+ 740: f83081f4  swp x16, x20, [x15]\n+ 744: f8220387  ldadd x2, x7, [x28]\n+ 748: f834132a  ldclr x20, x10, [x25]\n+ 74c: f836204b  ldeor x22, x11, [x2]\n+ 750: f821326a  ldset x1, x10, [x19]\n+ 754: f82e5075  ldsmin  x14, x21, [x3]\n+ 758: f83c41bb  ldsmax  x28, x27, [x13]\n+ 75c: f83172be  ldumin  x17, x30, [x21]\n+ 760: f83b63b0  ldumax  x27, x16, [x29]\n+ 764: f8be8009  swpa  x30, x9, [x0]\n+ 768: f8bc039b  ldadda  x28, x27, [x28]\n+ 76c: f8b51159  ldclra  x21, x25, [x10]\n+ 770: f8bf21f4  ldeora  xzr, x20, [x15]\n+ 774: f8a131d9  ldseta  x1, x25, [x14]\n+ 778: f8b553ba  ldsmina x21, x26, [x29]\n+ 77c: f8a8433d  ldsmaxa x8, x29, [x25]\n+ 780: f8ad7322  ldumina x13, x2, [x25]\n+ 784: f8af6017  ldumaxa x15, x23, [x0]\n+ 788: f8e38041  swpal x3, x1, [x2]\n+ 78c: f8fc0283  ldaddal x28, x3, [x20]\n+ 790: f8ee11df  ldclral x14, xzr, [x14]\n+ 794: f8e7205c  ldeoral x7, x28, [x2]\n+ 798: f8e030ab  ldsetal x0, x11, [x5]\n+ 79c: f8eb528e  ldsminal  x11, x14, [x20]\n+ 7a0: f8ff4044  ldsmaxal  xzr, x4, [x2]\n+ 7a4: f8fa72c0  lduminal  x26, x0, [x22]\n+ 7a8: f8f161a1  ldumaxal  x17, x1, [x13]\n+ 7ac: f877829a  swpl  x23, x26, [x20]\n+ 7b0: f86e018b  ldaddl  x14, x11, [x12]\n+ 7b4: f86c11ff  stclrl  x12, [x15]\n+ 7b8: f87b210e  ldeorl  x27, x14, [x8]\n+ 7bc: f86a333e  ldsetl  x10, x30, [x25]\n+ 7c0: f8765207  ldsminl x22, x7, [x16]\n+ 7c4: f8614110  ldsmaxl x1, x16, [x8]\n+ 7c8: f8617341  lduminl x1, x1, [x26]\n+ 7cc: f86061f7  ldumaxl x0, x23, [x15]\n+ 7d0: b82b8110  swp w11, w16, [x8]\n+ 7d4: b82101c7  ldadd w1, w7, [x14]\n+ 7d8: b830113f  stclr w16, [x9]\n+ 7dc: b83621a6  ldeor w22, w6, [x13]\n+ 7e0: b82b308d  ldset w11, w13, [x4]\n+ 7e4: b8305016  ldsmin  w16, w22, [x0]\n+ 7e8: b83c415f  stsmax  w28, [x10]\n+ 7ec: b8307105  ldumin  w16, w5, [x8]\n+ 7f0: b83a61f4  ldumax  w26, w20, [x15]\n+ 7f4: b8bb8206  swpa  w27, w6, [x16]\n+ 7f8: b8bf005f  ldadda  wzr, wzr, [x2]\n+ 7fc: b8b8111c  ldclra  w24, w28, [x8]\n+ 800: b8af22e9  ldeora  w15, w9, [x23]\n+ 804: b8ba30e2  ldseta  w26, w2, [x7]\n+ 808: b8a351f1  ldsmina w3, w17, [x15]\n+ 80c: b8b342a5  ldsmaxa w19, w5, [x21]\n+ 810: b8a7719a  ldumina w7, w26, [x12]\n+ 814: b8ac63a7  ldumaxa w12, w7, [x29]\n+ 818: b8e98288  swpal w9, w8, [x20]\n+ 81c: b8e803df  ldaddal w8, wzr, [x30]\n+ 820: b8e01186  ldclral w0, w6, [x12]\n+ 824: b8f12057  ldeoral w17, w23, [x2]\n+ 828: b8e0303e  ldsetal w0, w30, [x1]\n+ 82c: b8f651e3  ldsminal  w22, w3, [x15]\n+ 830: b8f941b5  ldsmaxal  w25, w21, [x13]\n+ 834: b8ed7378  lduminal  w13, w24, [x27]\n+ 838: b8f46163  ldumaxal  w20, w3, [x11]\n+ 83c: b86382ad  swpl  w3, w13, [x21]\n+ 840: b87a034f  ldaddl  w26, w15, [x26]\n+ 844: b8691053  ldclrl  w9, w19, [x2]\n+ 848: b87820fd  ldeorl  w24, w29, [x7]\n+ 84c: b87d31f9  ldsetl  w29, w25, [x15]\n+ 850: b86b50fe  ldsminl w11, w30, [x7]\n+ 854: b86b40c2  ldsmaxl w11, w2, [x6]\n+ 858: b87071cb  lduminl w16, w11, [x14]\n+ 85c: b8656168  ldumaxl w5, w8, [x11]\n@@ -1305,10 +1305,10 @@\n-    0x8b50798f,     0xcb4381e1,     0xab05372d,     0xeb864796,\n-    0x0b961920,     0x4b195473,     0x2b0b5264,     0x6b9300f8,\n-    0x8a0bc0fe,     0xaa0f3118,     0xca170531,     0xea44dd6e,\n-    0x0a4c44f3,     0x2a8b7373,     0x4a567c7e,     0x6a9c0353,\n-    0x8a3accdd,     0xaa318f7a,     0xca2e1495,     0xeaa015e2,\n-    0x0a2274e2,     0x2a751598,     0x4a3309fe,     0x6ab172fe,\n-    0x110a5284,     0x310b1942,     0x5103d353,     0x710125bc,\n-    0x910d7bc2,     0xb108fa1b,     0xd1093536,     0xf10ae824,\n-    0x120e667c,     0x321f6cbb,     0x520f6a9e,     0x72136f56,\n-    0x927e4ce5,     0xb278b4ed,     0xd24c6527,     0xf2485803,\n+    0x8b18ec0f,     0xcb9636d1,     0xab1ce74a,     0xeb184a19,\n+    0x0b1c1ca8,     0x4b817388,     0x2b01004c,     0x6b5164b7,\n+    0x8a0d5595,     0xaa9791f5,     0xca9bc316,     0xea82d1f6,\n+    0x0a980e21,     0x2a862c45,     0x4a453037,     0x6a8e5180,\n+    0x8a621cc1,     0xaa24bd1e,     0xcab4d6d1,     0xeaa591fd,\n+    0x0a7d6efe,     0x2a2253ac,     0x4aa61187,     0x6aa755b0,\n+    0x110b5a25,     0x31056e0a,     0x510f48ba,     0x710ac715,\n+    0x910f6e0a,     0xb10a65ef,     0xd1009e98,     0xf10131aa,\n+    0x121d4e67,     0x32043e25,     0x52132390,     0x72160b0e,\n+    0x9273e76e,     0xb256416c,     0xd24b5002,     0xf266da8d,\n@@ -1316,10 +1316,10 @@\n-    0x97ffffd4,     0x940001eb,     0x34000010,     0x34fffa30,\n-    0x34003d10,     0x35000013,     0x35fff9d3,     0x35003cb3,\n-    0xb4000005,     0xb4fff965,     0xb4003c45,     0xb5000004,\n-    0xb5fff904,     0xb5003be4,     0x1000001b,     0x10fff8bb,\n-    0x10003b9b,     0x90000010,     0x3640001c,     0x3647f83c,\n-    0x36403b1c,     0x37080001,     0x370ff7c1,     0x37083aa1,\n-    0x12a437f4,     0x528c9d67,     0x72838bb1,     0x92c1062e,\n-    0xd287da49,     0xf2a6d153,     0x93465ac9,     0x330b0013,\n-    0x530b4e6a,     0x934545e4,     0xb35370a3,     0xd3510b8c,\n-    0x13960c0f,     0x93ceddc6,     0x54000000,     0x54fff5a0,\n+    0x97ffffd4,     0x940001eb,     0x3400000f,     0x34fffa2f,\n+    0x34003d0f,     0x3500001c,     0x35fff9dc,     0x35003cbc,\n+    0xb400001b,     0xb4fff97b,     0xb4003c5b,     0xb5000000,\n+    0xb5fff900,     0xb5003be0,     0x1000000d,     0x10fff8ad,\n+    0x10003b8d,     0x90000003,     0x36380015,     0x363ff835,\n+    0x36383b15,     0x3748000f,     0x374ff7cf,     0x37483aaf,\n+    0x12a14bee,     0x5283bb51,     0x72858ebb,     0x92c98881,\n+    0xd2aa50d4,     0xf2afd9d4,     0x935c504d,     0x33133e90,\n+    0x5309196b,     0x93595482,     0xb3424e0d,     0xd3481728,\n+    0x138a3b7d,     0x93c66286,     0x54000000,     0x54fff5a0,\n@@ -1339,71 +1339,71 @@\n-    0xd40ac601,     0xd40042a2,     0xd404dac3,     0xd4224d40,\n-    0xd44219c0,     0xd503201f,     0xd69f03e0,     0xd6bf03e0,\n-    0xd5033fdf,     0xd503339f,     0xd50335bf,     0xd61f0280,\n-    0xd63f0040,     0xc8127c17,     0xc81efec5,     0xc85f7d05,\n-    0xc85ffe14,     0xc89ffd66,     0xc8dfff66,     0x880a7cb1,\n-    0x8816fd89,     0x885f7d1b,     0x885ffc57,     0x889fffba,\n-    0x88dffd4d,     0x48197f7c,     0x481dfd96,     0x485f7f96,\n-    0x485fffc3,     0x489ffdf8,     0x48dfff5b,     0x080b7e6a,\n-    0x0817fedb,     0x085f7e18,     0x085ffc38,     0x089fffa5,\n-    0x08dffe18,     0xc87f6239,     0xc87fb276,     0xc820573a,\n-    0xc821aca6,     0x887f388d,     0x887f88d1,     0x882f2643,\n-    0x88329131,     0xf81cf2b7,     0xb803f055,     0x39002f9b,\n-    0x781f31fd,     0xf85d33ce,     0xb843539d,     0x39401f54,\n-    0x785ce059,     0x389f1143,     0x788131ee,     0x78dfb17d,\n-    0xb89b90af,     0xfc403193,     0xbc42a36c,     0xfc07d396,\n-    0xbc1ec1f8,     0xf81e8f88,     0xb8025de6,     0x38007c27,\n-    0x7801ee20,     0xf8454fb9,     0xb85cce9a,     0x385e7fba,\n-    0x7841af24,     0x389ebd1c,     0x789fadd1,     0x78c0aefc,\n-    0xb89c0f7e,     0xfc50efd4,     0xbc414f71,     0xfc011c67,\n-    0xbc1f0d6d,     0xf81c3526,     0xb81e34b0,     0x3800f7bd,\n-    0x78012684,     0xf842e653,     0xb8417456,     0x385e2467,\n-    0x785e358b,     0x389e34c8,     0x788046f8,     0x78c00611,\n-    0xb89f8680,     0xfc582454,     0xbc5987d3,     0xfc076624,\n-    0xbc190675,     0xf833785a,     0xb82fd809,     0x3821799a,\n-    0x782a7975,     0xf870eaf0,     0xb871d96a,     0x386b7aed,\n-    0x7875689b,     0x38afd91a,     0x78a2c955,     0x78ee6bc8,\n-    0xb8b4f9dd,     0xfc76eb7e,     0xbc76692d,     0xfc31db28,\n-    0xbc255b01,     0xf91c52aa,     0xb91c3fb2,     0x391f8877,\n-    0x791ac97c,     0xf95c1758,     0xb95b3c55,     0x395ce0a4,\n-    0x795851ce,     0x399e9f64,     0x79993764,     0x79d9af8a,\n-    0xb99eea2a,     0xfd5a2f8d,     0xbd5dac78,     0xfd1e0182,\n-    0xbd195c31,     0x58000010,     0x1800000d,     0xf8981240,\n-    0xd8ffdf00,     0xf8a27a80,     0xf99af920,     0x1a0202e8,\n-    0x3a130078,     0x5a1d0316,     0x7a03036c,     0x9a0102eb,\n-    0xba1700bd,     0xda0c0329,     0xfa16000c,     0x0b23459a,\n-    0x2b328a14,     0xcb274bde,     0x6b222eab,     0x8b214b42,\n-    0xab34a7b2,     0xcb24520e,     0xeb378e20,     0x3a565283,\n-    0x7a420321,     0xba58c247,     0xfa4d5106,     0x3a426924,\n-    0x7a5b0847,     0xba413a02,     0xfa5fba23,     0x1a979377,\n-    0x1a86640a,     0x5a89300b,     0x5a923771,     0x9a8b720c,\n-    0x9a868786,     0xda9a736d,     0xda9256dd,     0x5ac0026c,\n-    0x5ac00657,     0x5ac00b89,     0x5ac01262,     0x5ac017b9,\n-    0xdac002e4,     0xdac0065d,     0xdac00907,     0xdac00e2d,\n-    0xdac01011,     0xdac01752,     0x1ad0098b,     0x1ac70d24,\n-    0x1ad020ec,     0x1ad72613,     0x1ac62887,     0x1ad72e95,\n-    0x9adc0990,     0x9acd0d84,     0x9ac721a9,     0x9acf277c,\n-    0x9ace2bd4,     0x9ade2e4e,     0x9bc77d63,     0x9b587e97,\n-    0x1b1524a2,     0x1b04a318,     0x9b0f4d8b,     0x9b0ce73d,\n-    0x9b2c5971,     0x9b34c87c,     0x9bbc6887,     0x9bb19556,\n-    0x1e310871,     0x1e261a2b,     0x1e2928fd,     0x1e333987,\n-    0x1e230ae0,     0x1e75087a,     0x1e651a60,     0x1e692b40,\n-    0x1e753ab9,     0x1e7309b0,     0x1f00425d,     0x1f1d95b7,\n-    0x1f2a38e9,     0x1f2f5f99,     0x1f5545a6,     0x1f429ea3,\n-    0x1f65472a,     0x1f7449ce,     0x1e20404f,     0x1e20c0f2,\n-    0x1e2140c3,     0x1e21c02c,     0x1e22c009,     0x1e6040a4,\n-    0x1e60c1e3,     0x1e614331,     0x1e61c30c,     0x1e6240b5,\n-    0x1e3802a4,     0x9e38007b,     0x1e78011d,     0x9e7802a9,\n-    0x1e2203b4,     0x9e220107,     0x1e6202ac,     0x9e6202b0,\n-    0x1e2600b2,     0x9e660119,     0x1e270352,     0x9e670160,\n-    0x1e262200,     0x1e7d2200,     0x1e2023c8,     0x1e602128,\n-    0x293e119b,     0x294a2543,     0x69480c70,     0xa934726a,\n-    0xa97448f3,     0x298243ca,     0x29e21242,     0x69c64db8,\n-    0xa9800311,     0xa9f4686e,     0x288a0416,     0x28fe2812,\n-    0x68fe62d8,     0xa885308c,     0xa8f12664,     0x282468d2,\n-    0x284e5035,     0xa8327699,     0xa84716e1,     0x0c407284,\n-    0x4cdfa158,     0x0ccf6cd8,     0x4cdf2483,     0x0d40c0c2,\n-    0x4ddfc9cd,     0x0dd8ceaf,     0x4c408ea9,     0x0cdf86bd,\n-    0x4d60c1c8,     0x0dffca87,     0x4de3cc7c,     0x4cdd497b,\n-    0x0c404950,     0x4d40e595,     0x4ddfeba4,     0x0dd3ed38,\n-    0x4cdf046a,     0x0cc9039b,     0x0d60e3d5,     0x0dffe5d7,\n-    0x0df4e9a4,     0xba5fd3e3,     0x3a5f03e5,     0xfa411be4,\n+    0xd40d2881,     0xd40ea5c2,     0xd40518a3,     0xd42eca40,\n+    0xd44a2e60,     0xd503201f,     0xd69f03e0,     0xd6bf03e0,\n+    0xd5033fdf,     0xd5033d9f,     0xd5033bbf,     0xd61f0120,\n+    0xd63f0120,     0xc8027d7d,     0xc816ff85,     0xc85f7e8e,\n+    0xc85ffe7d,     0xc89ffea6,     0xc8dffc73,     0x880c7f63,\n+    0x8811fdfa,     0x885f7dcd,     0x885fff4c,     0x889ffe28,\n+    0x88dfffd5,     0x48007d6f,     0x4811fc34,     0x485f7d1d,\n+    0x485ffd91,     0x489ffc8b,     0x48dffc90,     0x080e7c85,\n+    0x081bfe11,     0x085f7f66,     0x085fff1b,     0x089ffe8a,\n+    0x08dfff49,     0xc87f7b85,     0xc87fa66a,     0xc82b5590,\n+    0xc82adc94,     0x887f0416,     0x887f8503,     0x88205fc9,\n+    0x8837c560,     0xf81e1146,     0xb81fb007,     0x381f3205,\n+    0x7801f27e,     0xf8477130,     0xb843b208,     0x385f918a,\n+    0x785da12e,     0x389f83d8,     0x78817087,     0x78dd91d1,\n+    0xb89e136b,     0xfc4410ec,     0xbc5fe200,     0xfc15f2ed,\n+    0xbc1c2075,     0xf8064ca2,     0xb81a4c29,     0x381fbfdb,\n+    0x7800cdfb,     0xf852ce24,     0xb841eef5,     0x385f9e2d,\n+    0x785cec19,     0x389ebea1,     0x789caebc,     0x78c02c8b,\n+    0xb883dd31,     0xfc427e7d,     0xbc5abed6,     0xfc11ff29,\n+    0xbc1f1c49,     0xf81be6ed,     0xb800a611,     0x381e05c1,\n+    0x78006411,     0xf855473b,     0xb85da72d,     0x385e372b,\n+    0x784144be,     0x389f94e9,     0x789c2460,     0x78c1f5c7,\n+    0xb8827771,     0xfc515491,     0xbc4226ba,     0xfc1c7625,\n+    0xbc1935ad,     0xf824da06,     0xb834db09,     0x38237ba3,\n+    0x783e6a2a,     0xf867497b,     0xb87949ee,     0x387379d8,\n+    0x7866c810,     0x38acd98a,     0x78b0499a,     0x78ee781a,\n+    0xb8bbf971,     0xfc73d803,     0xbc6979fa,     0xfc30e9ab,\n+    0xbc355a7a,     0xf91886a8,     0xb918ef6a,     0x391b15db,\n+    0x791ac0f0,     0xf958753b,     0xb95a1958,     0x395b3f18,\n+    0x795800b4,     0x39988891,     0x799a81ae,     0x79dd172a,\n+    0xb9981342,     0xfd5d21da,     0xbd5e7c9c,     0xfd1b526e,\n+    0xbd18df97,     0x58002268,     0x18ffdf51,     0xf8951080,\n+    0xd8000000,     0xf8a4c900,     0xf999e180,     0x1a150374,\n+    0x3a060227,     0x5a1900c5,     0x7a0e017e,     0x9a0b0223,\n+    0xba110159,     0xda170207,     0xfa050144,     0x0b2973c9,\n+    0x2b30a8a0,     0xcb3b8baf,     0x6b21f12b,     0x8b264f02,\n+    0xab3a70d3,     0xcb39ef48,     0xeb29329a,     0x3a5a41a7,\n+    0x7a54310f,     0xba4302c8,     0xfa58a04a,     0x3a50490d,\n+    0x7a4c0a01,     0xba5f79e3,     0xfa4c0aef,     0x1a9a30ee,\n+    0x1a9ed763,     0x5a9702ab,     0x5a95c7da,     0x9a8d835c,\n+    0x9a909471,     0xda8380ab,     0xda93c461,     0x5ac00120,\n+    0x5ac005da,     0x5ac00a2d,     0x5ac0128b,     0x5ac0163c,\n+    0xdac0008d,     0xdac007c1,     0xdac009cd,     0xdac00d05,\n+    0xdac01322,     0xdac01514,     0x1adb0b35,     0x1ad00d4d,\n+    0x1ad1203c,     0x1aca26f9,     0x1ac72867,     0x1ace2fce,\n+    0x9acf0acc,     0x9acd0f22,     0x9ad522e7,     0x9ac0258b,\n+    0x9adc293e,     0x9ad62cad,     0x9bc47ea5,     0x9b477c51,\n+    0x1b11318c,     0x1b01edfe,     0x9b117662,     0x9b03fae4,\n+    0x9b313eef,     0x9b21b59b,     0x9bac45a6,     0x9ba6a839,\n+    0x1e240871,     0x1e3518b0,     0x1e312b63,     0x1e2f3959,\n+    0x1e200a2a,     0x1e630b5c,     0x1e7b1804,     0x1e6229dc,\n+    0x1e773b4c,     0x1e610bcf,     0x1f0534a4,     0x1f1c85b5,\n+    0x1f3d1c71,     0x1f3d6b37,     0x1f5e68ee,     0x1f4aa4f6,\n+    0x1f6e24e7,     0x1f6f630e,     0x1e204056,     0x1e20c060,\n+    0x1e214229,     0x1e21c178,     0x1e22c32f,     0x1e604064,\n+    0x1e60c2da,     0x1e61427e,     0x1e61c1cc,     0x1e6240f1,\n+    0x1e3801d8,     0x9e38034d,     0x1e780022,     0x9e780165,\n+    0x1e22026e,     0x9e2202c1,     0x1e62023b,     0x9e620136,\n+    0x1e26006e,     0x9e66022c,     0x1e270368,     0x9e67039d,\n+    0x1e3e2000,     0x1e692180,     0x1e202148,     0x1e602328,\n+    0x292e7b68,     0x294a4f15,     0x69626c50,     0xa93814d5,\n+    0xa97e679d,     0x29903408,     0x29ec5039,     0x69fc62ce,\n+    0xa98504d1,     0xa9fc4735,     0x28b05691,     0x28c8705c,\n+    0x68e07953,     0xa8bf3e31,     0xa8fe0331,     0x283c170e,\n+    0x284e4c37,     0xa80419cb,     0xa8722f62,     0x0c407230,\n+    0x4cdfa13d,     0x0cd56f1e,     0x4cdf2440,     0x0d40c134,\n+    0x4ddfc811,     0x0ddaced5,     0x4c408f33,     0x0cdf84aa,\n+    0x4d60c30a,     0x0dffcbad,     0x4de2cf96,     0x4ccb489e,\n+    0x0c40481d,     0x4d40e777,     0x4ddfe943,     0x0dd6edd3,\n+    0x4cdf040e,     0x0cd902de,     0x0d60e019,     0x0dffe50a,\n+    0x0dfce8c1,     0xba5fd3e3,     0x3a5f03e5,     0xfa411be4,\n@@ -1421,18 +1421,18 @@\n-    0xf8358305,     0xf82d01ed,     0xf8361353,     0xf839234a,\n-    0xf82531fb,     0xf8335165,     0xf83a4080,     0xf83673d7,\n-    0xf832611c,     0xf8ad837d,     0xf8ab01a5,     0xf8a112b8,\n-    0xf8bb2311,     0xf8b230be,     0xf8a75336,     0xf8a4427a,\n-    0xf8a6707e,     0xf8b860b7,     0xf8f88392,     0xf8f300ff,\n-    0xf8ed1386,     0xf8e822af,     0xf8e2302d,     0xf8f1533d,\n-    0xf8f941d2,     0xf8ff7366,     0xf8f061e5,     0xf86b8072,\n-    0xf87a0054,     0xf86b1164,     0xf87e22f3,     0xf86331cf,\n-    0xf87e5296,     0xf8674305,     0xf87771f0,     0xf86b6013,\n-    0xb83c803c,     0xb82b0195,     0xb83d1240,     0xb8252320,\n-    0xb82e3340,     0xb83c53b2,     0xb82f43a1,     0xb828739a,\n-    0xb831608e,     0xb8b88039,     0xb8aa0231,     0xb8bd12b4,\n-    0xb8bd2189,     0xb8ab30a6,     0xb8b552a7,     0xb8aa4197,\n-    0xb8b57145,     0xb8be6254,     0xb8ed80b7,     0xb8ef00b8,\n-    0xb8e9132a,     0xb8f42231,     0xb8ec33d2,     0xb8e35323,\n-    0xb8fa4159,     0xb8e273eb,     0xb8e760a2,     0xb8608287,\n-    0xb865005f,     0xb87b1379,     0xb87e2358,     0xb86f32c2,\n-    0xb86053e3,     0xb86f4154,     0xb87671d5,     0xb866605e,\n+    0xf83081f4,     0xf8220387,     0xf834132a,     0xf836204b,\n+    0xf821326a,     0xf82e5075,     0xf83c41bb,     0xf83172be,\n+    0xf83b63b0,     0xf8be8009,     0xf8bc039b,     0xf8b51159,\n+    0xf8bf21f4,     0xf8a131d9,     0xf8b553ba,     0xf8a8433d,\n+    0xf8ad7322,     0xf8af6017,     0xf8e38041,     0xf8fc0283,\n+    0xf8ee11df,     0xf8e7205c,     0xf8e030ab,     0xf8eb528e,\n+    0xf8ff4044,     0xf8fa72c0,     0xf8f161a1,     0xf877829a,\n+    0xf86e018b,     0xf86c11ff,     0xf87b210e,     0xf86a333e,\n+    0xf8765207,     0xf8614110,     0xf8617341,     0xf86061f7,\n+    0xb82b8110,     0xb82101c7,     0xb830113f,     0xb83621a6,\n+    0xb82b308d,     0xb8305016,     0xb83c415f,     0xb8307105,\n+    0xb83a61f4,     0xb8bb8206,     0xb8bf005f,     0xb8b8111c,\n+    0xb8af22e9,     0xb8ba30e2,     0xb8a351f1,     0xb8b342a5,\n+    0xb8a7719a,     0xb8ac63a7,     0xb8e98288,     0xb8e803df,\n+    0xb8e01186,     0xb8f12057,     0xb8e0303e,     0xb8f651e3,\n+    0xb8f941b5,     0xb8ed7378,     0xb8f46163,     0xb86382ad,\n+    0xb87a034f,     0xb8691053,     0xb87820fd,     0xb87d31f9,\n+    0xb86b50fe,     0xb86b40c2,     0xb87071cb,     0xb8656168,\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.cpp","additions":1181,"deletions":1181,"binary":false,"changes":2362,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-  pd_nof_caller_save_cpu_regs_frame_map = 19 - 2,  \/\/ number of registers killed by calls\n+  pd_nof_caller_save_cpu_regs_frame_map = 19 - 2 \/* rscratch1 and rscratch2 *\/ R18_RESERVED_ONLY(- 1),  \/\/ number of registers killed by calls\n@@ -50,2 +50,2 @@\n-  pd_first_callee_saved_reg = 19 - 2,\n-  pd_last_callee_saved_reg = 26 - 2,\n+  pd_first_callee_saved_reg = 19 - 2 \/* rscratch1 and rscratch2 *\/ R18_RESERVED_ONLY(- 1),\n+  pd_last_callee_saved_reg = 26 - 2 \/* rscratch1 and rscratch2 *\/ R18_RESERVED_ONLY(- 1),\n@@ -53,1 +53,1 @@\n-  pd_last_allocatable_cpu_reg = 16,\n+  pd_last_allocatable_cpu_reg = 16 R18_RESERVED_ONLY(- 1),\n@@ -63,1 +63,1 @@\n-  pd_last_cpu_reg = 16,\n+  pd_last_cpu_reg = 16 R18_RESERVED_ONLY(- 1),\n@@ -65,1 +65,1 @@\n-  pd_last_byte_reg = 16,\n+  pd_last_byte_reg = 16 R18_RESERVED_ONLY(- 1),\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_Defs_aarch64.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -184,1 +184,4 @@\n-  map_register(i, r18); r18_opr = LIR_OprFact::single_cpu(i); i++;\n+#ifndef R18_RESERVED\n+  \/\/ See comment in register_aarch64.hpp\n+  map_register(i, r18_tls); r18_opr = LIR_OprFact::single_cpu(i); i++;\n+#endif\n@@ -202,0 +205,5 @@\n+#ifdef R18_RESERVED\n+  \/\/ See comment in register_aarch64.hpp\n+  map_register(i, r18_tls); r18_opr = LIR_OprFact::single_cpu(i); i++;\n+#endif\n+\n@@ -230,0 +238,2 @@\n+#ifndef R18_RESERVED\n+  \/\/ See comment in register_aarch64.hpp\n@@ -231,0 +241,1 @@\n+#endif\n@@ -256,1 +267,1 @@\n-  r18_oop_opr = as_oop_opr(r18);\n+  r18_oop_opr = as_oop_opr(r18_tls);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_FrameMap_aarch64.cpp","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -56,0 +56,9 @@\n+#if defined(_WIN64)\n+#define R18_RESERVED\n+#define R18_RESERVED_ONLY(code) code\n+#define NOT_R18_RESERVED(code)\n+#else\n+#define R18_RESERVED_ONLY(code)\n+#define NOT_R18_RESERVED(code) code\n+#endif\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/globalDefinitions_aarch64.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2547,0 +2547,8 @@\n+RegSet MacroAssembler::call_clobbered_registers() {\n+  RegSet regs = RegSet::range(r0, r17) - RegSet::of(rscratch1, rscratch2);\n+#ifndef R18_RESERVED\n+  regs += r18_tls;\n+#endif\n+  return regs;\n+}\n+\n@@ -2549,1 +2557,1 @@\n-  push(RegSet::range(r0, r18) - RegSet::of(rscratch1, rscratch2), sp);\n+  push(call_clobbered_registers(), sp);\n@@ -2569,1 +2577,1 @@\n-  pop(RegSet::range(r0, r18) - RegSet::of(rscratch1, rscratch2), sp);\n+  pop(call_clobbered_registers() - RegSet::of(rscratch1, rscratch2), sp);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -463,0 +463,2 @@\n+  static RegSet call_clobbered_registers();\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -692,1 +692,1 @@\n-      jz = r14, j = r15, twoOverPiBase = r16, i = r17, qBase = r18;\n+      jz = r14, j = r15, twoOverPiBase = r16, i = r17, qBase = r19;\n@@ -1424,0 +1424,6 @@\n+\n+  enter();\n+  \/\/ r19 is used in TemplateInterpreterGenerator::generate_math_entry\n+  RegSet saved_regs = RegSet::of(r19);\n+  push (saved_regs, sp);\n+\n@@ -1441,1 +1447,1 @@\n-      ret(lr);\n+      b(DONE);\n@@ -1448,1 +1454,1 @@\n-      ret(lr);\n+      b(DONE);\n@@ -1468,1 +1474,1 @@\n-      ret(lr);\n+      b(DONE);\n@@ -1477,1 +1483,1 @@\n-      ret(lr);\n+      b(DONE);\n@@ -1487,0 +1493,2 @@\n+    pop(saved_regs, sp);\n+    leave();\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64_trig.cpp","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-    \"r17\", \"r18\", \"r19\",\n+    \"r17\", \"r18_tls\", \"r19\",\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,12 @@\n-CONSTANT_REGISTER_DECLARATION(Register, r18,  (18));\n+\n+\/\/ In the ABI for Windows+AArch64 the register r18 is used to store the pointer\n+\/\/ to the current thread's TEB (where TLS variables are stored). We could\n+\/\/ carefully save and restore r18 at key places, however Win32 Structured\n+\/\/ Exception Handling (SEH) is using TLS to unwind the stack. If r18 is used\n+\/\/ for any other purpose at the time of an exception happening, SEH would not\n+\/\/ be able to unwind the stack properly and most likely crash.\n+\/\/\n+\/\/ It's easier to avoid allocating r18 altogether.\n+\/\/\n+\/\/ See https:\/\/docs.microsoft.com\/en-us\/cpp\/build\/arm64-windows-abi-conventions?view=vs-2019#integer-registers\n+CONSTANT_REGISTER_DECLARATION(Register, r18_tls,  (18));\n@@ -210,0 +221,2 @@\n+class RegSetIterator;\n+\n@@ -237,0 +250,5 @@\n+  RegSet &operator-=(const RegSet aSet) {\n+    *this = *this - aSet;\n+    return *this;\n+  }\n+\n@@ -263,0 +281,39 @@\n+\n+private:\n+\n+  Register first() {\n+    uint32_t first = _bitset & -_bitset;\n+    return first ? as_Register(exact_log2(first)) : noreg;\n+  }\n+\n+public:\n+\n+  friend class RegSetIterator;\n+\n+  RegSetIterator begin();\n+};\n+\n+class RegSetIterator {\n+  RegSet _regs;\n+\n+public:\n+  RegSetIterator(RegSet x): _regs(x) {}\n+  RegSetIterator(const RegSetIterator& mit) : _regs(mit._regs) {}\n+\n+  RegSetIterator& operator++() {\n+    Register r = _regs.first();\n+    if (r != noreg)\n+      _regs -= r;\n+    return *this;\n+  }\n+\n+  bool operator==(const RegSetIterator& rhs) const {\n+    return _regs.bits() == rhs._regs.bits();\n+  }\n+  bool operator!=(const RegSetIterator& rhs) const {\n+    return ! (rhs == *this);\n+  }\n+\n+  Register operator*() {\n+    return _regs.first();\n+  }\n@@ -265,0 +322,4 @@\n+inline RegSetIterator RegSet::begin() {\n+  return RegSetIterator(*this);\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp","additions":62,"deletions":1,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-REGISTER_DEFINITION(Register, r18);\n+REGISTER_DEFINITION(Register, r18_tls); \/\/ see comment in register_aarch64.hpp\n","filename":"src\/hotspot\/cpu\/aarch64\/register_definitions_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1076,1 +1076,1 @@\n-    const Register send = r17, dend = r18;\n+    const Register send = r17, dend = r16;\n@@ -1289,0 +1289,2 @@\n+    RegSet clobbered\n+      = MacroAssembler::call_clobbered_registers() - rscratch1;\n@@ -1291,2 +1293,3 @@\n-    for (Register r = r3; r <= r18; r++)\n-      if (r != rscratch1) __ mov(r, rscratch1);\n+    for (RegSetIterator it = clobbered.begin(); *it != noreg; ++it) {\n+      __ mov(*it, rscratch1);\n+    }\n@@ -1294,0 +1297,1 @@\n+\n@@ -1716,1 +1720,2 @@\n-    \/\/ Registers used as temps (r18, r19, r20 are save-on-entry)\n+    \/\/ Registers used as temps (r19, r20, r21, r22 are save-on-entry)\n+    const Register copied_oop  = r22;       \/\/ actual oop copied\n@@ -1719,1 +1724,0 @@\n-    const Register copied_oop  = r18;       \/\/ actual oop copied\n@@ -1756,2 +1760,1 @@\n-\n-    __ push(RegSet::of(r18, r19, r20, r21), sp);\n+    __ push(RegSet::of(r19, r20, r21, r22), sp);\n@@ -1826,1 +1829,1 @@\n-    __ pop(RegSet::of(r18, r19, r20, r21), sp);\n+    __ pop(RegSet::of(r19, r20, r21, r22), sp);\n@@ -2002,1 +2005,1 @@\n-    const Register lh                = r18; \/\/ layout helper\n+    const Register lh                = r15; \/\/ layout helper\n@@ -2073,1 +2076,1 @@\n-    const Register r18_elsize = lh; \/\/ element size\n+    const Register r15_elsize = lh; \/\/ element size\n@@ -2094,2 +2097,2 @@\n-    __ tbnz(r18_elsize, 1, L_copy_ints);\n-    __ tbnz(r18_elsize, 0, L_copy_shorts);\n+    __ tbnz(r15_elsize, 1, L_copy_ints);\n+    __ tbnz(r15_elsize, 0, L_copy_shorts);\n@@ -2108,1 +2111,1 @@\n-    __ tbnz(r18_elsize, 0, L_copy_longs);\n+    __ tbnz(r15_elsize, 0, L_copy_longs);\n@@ -2119,2 +2122,2 @@\n-      __ andw(lh, lh, Klass::_lh_log2_element_size_mask); \/\/ lh -> r18_elsize\n-      __ cmpw(r18_elsize, LogBytesPerLong);\n+      __ andw(lh, lh, Klass::_lh_log2_element_size_mask); \/\/ lh -> r15_elsize\n+      __ cmpw(r15_elsize, LogBytesPerLong);\n@@ -2138,2 +2141,2 @@\n-    __ load_klass(r18, dst);\n-    __ cmp(scratch_src_klass, r18); \/\/ usual case is exact equality\n+    __ load_klass(r15, dst);\n+    __ cmp(scratch_src_klass, r15); \/\/ usual case is exact equality\n@@ -2155,1 +2158,1 @@\n-    \/\/ live at this point:  scratch_src_klass, scratch_length, r18 (dst_klass)\n+    \/\/ live at this point:  scratch_src_klass, scratch_length, r15 (dst_klass)\n@@ -2158,1 +2161,1 @@\n-      __ ldrw(rscratch1, Address(r18, lh_offset));\n+      __ ldrw(rscratch1, Address(r15, lh_offset));\n@@ -2165,1 +2168,1 @@\n-                             r18, L_failed);\n+                             r15, L_failed);\n@@ -5118,2 +5121,2 @@\n-      Register reg = c_rarg0;\n-      Pa_base = reg;       \/\/ Argument registers\n+      RegSetIterator regs = (RegSet::range(r0, r26) - r18_tls).begin();\n+      Pa_base = *regs;       \/\/ Argument registers\n@@ -5123,5 +5126,5 @@\n-        Pb_base = ++reg;\n-      Pn_base = ++reg;\n-      Rlen= ++reg;\n-      inv = ++reg;\n-      Pm_base = ++reg;\n+        Pb_base = *++regs;\n+      Pn_base = *++regs;\n+      Rlen= *++regs;\n+      inv = *++regs;\n+      Pm_base = *++regs;\n@@ -5130,4 +5133,4 @@\n-      Ra =  ++reg;        \/\/ The current digit of a, b, n, and m.\n-      Rb =  ++reg;\n-      Rm =  ++reg;\n-      Rn =  ++reg;\n+      Ra =  *++regs;        \/\/ The current digit of a, b, n, and m.\n+      Rb =  *++regs;\n+      Rm =  *++regs;\n+      Rn =  *++regs;\n@@ -5135,4 +5138,4 @@\n-      Pa =  ++reg;        \/\/ Pointers to the current\/next digit of a, b, n, and m.\n-      Pb =  ++reg;\n-      Pm =  ++reg;\n-      Pn =  ++reg;\n+      Pa =  *++regs;        \/\/ Pointers to the current\/next digit of a, b, n, and m.\n+      Pb =  *++regs;\n+      Pm =  *++regs;\n+      Pn =  *++regs;\n@@ -5140,3 +5143,3 @@\n-      t0 =  ++reg;        \/\/ Three registers which form a\n-      t1 =  ++reg;        \/\/ triple-precision accumuator.\n-      t2 =  ++reg;\n+      t0 =  *++regs;        \/\/ Three registers which form a\n+      t1 =  *++regs;        \/\/ triple-precision accumuator.\n+      t2 =  *++regs;\n@@ -5144,2 +5147,2 @@\n-      Ri =  ++reg;        \/\/ Inner and outer loop indexes.\n-      Rj =  ++reg;\n+      Ri =  *++regs;        \/\/ Inner and outer loop indexes.\n+      Rj =  *++regs;\n@@ -5147,4 +5150,4 @@\n-      Rhi_ab = ++reg;     \/\/ Product registers: low and high parts\n-      Rlo_ab = ++reg;     \/\/ of a*b and m*n.\n-      Rhi_mn = ++reg;\n-      Rlo_mn = ++reg;\n+      Rhi_ab = *++regs;     \/\/ Product registers: low and high parts\n+      Rlo_ab = *++regs;     \/\/ of a*b and m*n.\n+      Rhi_mn = *++regs;\n+      Rlo_mn = *++regs;\n@@ -5153,1 +5156,1 @@\n-      _toSave = RegSet::range(r19, reg) + Pm_base;\n+      _toSave = RegSet::range(r19, *regs) + Pm_base;\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":48,"deletions":45,"binary":false,"changes":93,"status":"modified"}]}