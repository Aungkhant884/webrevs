{"files":[{"patch":"@@ -43,1 +43,0 @@\n-import jdk.test.lib.Platform;\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/DeadlockDetectionTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @library \/lib\/testlibrary\n@@ -48,1 +47,1 @@\n-import jdk.testlibrary.JDKToolFinder;\n+import jdk.test.lib.JDKToolFinder;\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/getResource\/GetResource.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import jdk.testlibrary.JDKToolFinder;\n+import jdk.test.lib.JDKToolFinder;\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/modules\/Base.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n- * @library \/lib\/testlibrary \/test\/lib\n- * @build Base jdk.test.lib.compiler.CompilerUtils jdk.testlibrary.*\n+ * @library \/test\/lib\n+ * @build Base jdk.test.lib.compiler.CompilerUtils\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/modules\/JDKLoggerForImageTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n- * @library \/lib\/testlibrary \/test\/lib\n- * @build Base jdk.test.lib.compiler.CompilerUtils jdk.testlibrary.*\n+ * @library \/test\/lib\n+ * @build Base jdk.test.lib.compiler.CompilerUtils\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/modules\/JDKLoggerForJDKTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n- * @library \/lib\/testlibrary \/test\/lib\n- * @build Base jdk.test.lib.compiler.CompilerUtils jdk.testlibrary.*\n+ * @library \/test\/lib\n+ * @build Base jdk.test.lib.compiler.CompilerUtils\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/modules\/LoggerInImageTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n- * @library \/lib\/testlibrary \/test\/lib\n- * @build Base jdk.test.lib.compiler.CompilerUtils jdk.testlibrary.*\n+ * @library \/test\/lib\n+ * @build Base jdk.test.lib.compiler.CompilerUtils\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/modules\/NamedLoggerForImageTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n- * @library \/lib\/testlibrary \/test\/lib\n- * @build Base jdk.test.lib.compiler.CompilerUtils jdk.testlibrary.*\n+ * @library \/test\/lib\n+ * @build Base jdk.test.lib.compiler.CompilerUtils\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/modules\/NamedLoggerForJDKTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n- * @library \/lib\/testlibrary \/test\/lib\n- * @build Base jdk.test.lib.compiler.CompilerUtils jdk.testlibrary.*\n+ * @library \/test\/lib\n+ * @build Base jdk.test.lib.compiler.CompilerUtils\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/modules\/UnnamedLoggerForImageTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n- * @library \/lib\/testlibrary \/test\/lib\n- * @build Base jdk.test.lib.compiler.CompilerUtils jdk.testlibrary.*\n+ * @library \/test\/lib\n+ * @build Base jdk.test.lib.compiler.CompilerUtils\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/modules\/UnnamedLoggerForJDKTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+import jdk.test.lib.JDKToolFinder;\n@@ -49,1 +50,0 @@\n-import jdk.testlibrary.JDKToolFinder;\n","filename":"test\/jdk\/java\/lang\/management\/MemoryMXBean\/LowMemoryTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.test.lib.JDKToolFinder;\n@@ -34,1 +35,0 @@\n-import jdk.testlibrary.JDKToolFinder;\n","filename":"test\/jdk\/java\/lang\/management\/MemoryMXBean\/RunUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -39,1 +40,1 @@\n-import jdk.testlibrary.JDKToolLauncher;\n+import jdk.test.lib.JDKToolLauncher;\n","filename":"test\/jdk\/java\/net\/MulticastSocket\/MultiDead.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-import jdk.testlibrary.JDKToolFinder;\n+import jdk.test.lib.JDKToolFinder;\n@@ -58,1 +58,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -61,1 +61,1 @@\n- *        jdk.testlibrary.JDKToolFinder\n+ *        jdk.test.lib.JDKToolFinder\n","filename":"test\/jdk\/java\/net\/spi\/URLStreamHandlerProvider\/Basic.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * @library \/test\/lib \/lib\/testlibrary ..\/\n+ * @library \/test\/lib ..\/\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/EntryProtectionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @library \/lib\/testlibrary ..\/\n+ * @library ..\/\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/KeytoolReaderP12Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @library \/lib\/testlibrary ..\/\n+ * @library ..\/\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/KeytoolWriteP12Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * @library \/lib\/testlibrary ..\/\n+ * @library ..\/\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/MetadataEmptyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n- * @library \/lib\/testlibrary ..\/\n+ * @library ..\/\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/MetadataStoreLoadTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * @library \/lib\/testlibrary ..\/\n+ * @library ..\/\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/StoreTrustedCertAPITest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n- * @library \/lib\/testlibrary ..\/\n+ * @library ..\/\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/StoreTrustedCertKeytool.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import jdk.testlibrary.JDKToolFinder;\n+import jdk.test.lib.JDKToolFinder;\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/Utils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+import jdk.test.lib.JDKToolFinder;\n@@ -63,1 +64,0 @@\n-import jdk.testlibrary.JDKToolFinder;\n","filename":"test\/jdk\/javax\/management\/mxbean\/MXBeanWeirdParamTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+import jdk.test.lib.JDKToolFinder;\n@@ -69,1 +70,0 @@\n-import jdk.testlibrary.JDKToolFinder;\n","filename":"test\/jdk\/javax\/management\/security\/AuthorizationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,0 +84,1 @@\n+import jdk.test.lib.JDKToolFinder;\n@@ -85,1 +86,0 @@\n-import jdk.testlibrary.JDKToolFinder;\n","filename":"test\/jdk\/javax\/management\/security\/SecurityTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,115 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.testlibrary;\n-\n-import java.io.FileNotFoundException;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-\n-\/**\n- * @deprecated This class is deprecated. Use the one from\n- *             {@code <root>\/test\/lib\/jdk\/test\/lib}\n- *\/\n-@Deprecated\n-public final class JDKToolFinder {\n-\n-    private JDKToolFinder() {\n-    }\n-\n-    \/**\n-     * Returns the full path to an executable in jdk\/bin based on System\n-     * property {@code test.jdk} or {@code compile.jdk} (both are set by the jtreg test suite)\n-     *\n-     * @return Full path to an executable in jdk\/bin\n-     *\/\n-    public static String getJDKTool(String tool) {\n-\n-        \/\/ First try to find the executable in test.jdk\n-        try {\n-            return getTool(tool, \"test.jdk\");\n-        } catch (FileNotFoundException e) {\n-\n-        }\n-\n-        \/\/ Now see if it's available in compile.jdk\n-        try {\n-            return getTool(tool, \"compile.jdk\");\n-        } catch (FileNotFoundException e) {\n-            throw new RuntimeException(\"Failed to find \" + tool +\n-                    \", looked in test.jdk (\" + System.getProperty(\"test.jdk\") +\n-                    \") and compile.jdk (\" + System.getProperty(\"compile.jdk\") + \")\");\n-        }\n-    }\n-\n-    \/**\n-     * Returns the full path to an executable in jdk\/bin based on System\n-     * property {@code compile.jdk}\n-     *\n-     * @return Full path to an executable in jdk\/bin\n-     *\/\n-    public static String getCompileJDKTool(String tool) {\n-        try {\n-            return getTool(tool, \"compile.jdk\");\n-        } catch (FileNotFoundException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    \/**\n-     * Returns the full path to an executable in jdk\/bin based on System\n-     * property {@code test.jdk}\n-     *\n-     * @return Full path to an executable in jdk\/bin\n-     *\/\n-    public static String getTestJDKTool(String tool) {\n-        try {\n-            return getTool(tool, \"test.jdk\");\n-        } catch (FileNotFoundException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    private static String getTool(String tool, String property) throws FileNotFoundException {\n-        String jdkPath = System.getProperty(property);\n-\n-        if (jdkPath == null) {\n-            throw new RuntimeException(\n-                    \"System property '\" + property + \"' not set. This property is normally set by jtreg. \"\n-                    + \"When running test separately, set this property using '-D\" + property + \"=\/path\/to\/jdk'.\");\n-        }\n-\n-        Path toolName = Paths.get(\"bin\", tool + (isWindows() ? \".exe\" : \"\"));\n-\n-        Path jdkTool = Paths.get(jdkPath, toolName.toString());\n-        if (!jdkTool.toFile().exists()) {\n-            throw new FileNotFoundException(\"Could not find file \" + jdkTool.toAbsolutePath());\n-        }\n-\n-        return jdkTool.toAbsolutePath().toString();\n-    }\n-\n-    private static boolean isWindows() {\n-        return System.getProperty(\"os.name\").toLowerCase().startsWith(\"win\");\n-    }\n-}\n","filename":"test\/jdk\/lib\/testlibrary\/jdk\/testlibrary\/JDKToolFinder.java","additions":0,"deletions":115,"binary":false,"changes":115,"status":"deleted"},{"patch":"@@ -1,134 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.testlibrary;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-\/**\n- * A utility for constructing command lines for starting JDK tool processes.\n- *\n- * The JDKToolLauncher can in particular be combined with a\n- * java.lang.ProcessBuilder to easily run a JDK tool. For example, the following\n- * code run {@code jmap -heap} against a process with GC logging turned on for\n- * the {@code jmap} process:\n- *\n- * <pre>\n- * {@code\n- * JDKToolLauncher jmap = JDKToolLauncher.create(\"jmap\")\n- *                                       .addVMArg(\"-Xlog:gc*=debug\")\n- *                                       .addToolArg(\"-heap\")\n- *                                       .addToolArg(pid);\n- * ProcessBuilder pb = new ProcessBuilder(jmap.getCommand());\n- * Process p = pb.start();\n- * }\n- * <\/pre>\n- * @deprecated This class is deprecated. Use the one from\n- *             {@code <root>\/test\/lib\/jdk\/test\/lib}\n- *\/\n-@Deprecated\n-public class JDKToolLauncher {\n-    private final String executable;\n-    private final List<String> vmArgs = new ArrayList<String>();\n-    private final List<String> toolArgs = new ArrayList<String>();\n-\n-    private JDKToolLauncher(String tool, boolean useCompilerJDK) {\n-        if (useCompilerJDK) {\n-            executable = JDKToolFinder.getJDKTool(tool);\n-        } else {\n-            executable = JDKToolFinder.getTestJDKTool(tool);\n-        }\n-    }\n-\n-    \/**\n-     * Creates a new JDKToolLauncher for the specified tool. Using tools path\n-     * from the compiler JDK.\n-     *\n-     * @param tool\n-     *            The name of the tool\n-     * @return A new JDKToolLauncher\n-     *\/\n-    public static JDKToolLauncher create(String tool) {\n-        return new JDKToolLauncher(tool, true);\n-    }\n-\n-    \/**\n-     * Creates a new JDKToolLauncher for the specified tool in the Tested JDK.\n-     *\n-     * @param tool\n-     *            The name of the tool\n-     *\n-     * @return A new JDKToolLauncher\n-     *\/\n-    public static JDKToolLauncher createUsingTestJDK(String tool) {\n-        return new JDKToolLauncher(tool, false);\n-    }\n-\n-    \/**\n-     * Adds an argument to the JVM running the tool.\n-     *\n-     * The JVM arguments are passed to the underlying JVM running the tool.\n-     * Arguments will automatically be prepended with \"-J\".\n-     *\n-     * Any platform specific arguments required for running the tool are\n-     * automatically added.\n-     *\n-     *\n-     * @param arg\n-     *            The argument to VM running the tool\n-     * @return The JDKToolLauncher instance\n-     *\/\n-    public JDKToolLauncher addVMArg(String arg) {\n-        vmArgs.add(arg);\n-        return this;\n-    }\n-\n-    \/**\n-     * Adds an argument to the tool.\n-     *\n-     * @param arg\n-     *            The argument to the tool\n-     * @return The JDKToolLauncher instance\n-     *\/\n-    public JDKToolLauncher addToolArg(String arg) {\n-        toolArgs.add(arg);\n-        return this;\n-    }\n-\n-    \/**\n-     * Returns the command that can be used for running the tool.\n-     *\n-     * @return An array whose elements are the arguments of the command.\n-     *\/\n-    public String[] getCommand() {\n-        List<String> command = new ArrayList<String>();\n-        command.add(executable);\n-        \/\/ Add -J in front of all vmArgs\n-        for (String arg : vmArgs) {\n-            command.add(\"-J\" + arg);\n-        }\n-        command.addAll(toolArgs);\n-        return command.toArray(new String[command.size()]);\n-    }\n-}\n","filename":"test\/jdk\/lib\/testlibrary\/jdk\/testlibrary\/JDKToolLauncher.java","additions":0,"deletions":134,"binary":false,"changes":134,"status":"deleted"},{"patch":"@@ -36,1 +36,1 @@\n-import jdk.testlibrary.JDKToolLauncher;\n+import jdk.test.lib.JDKToolLauncher;\n","filename":"test\/jdk\/sun\/management\/jmxremote\/startstop\/ManagementAgentJcmd.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.testlibrary.JDKToolLauncher;\n+import jdk.test.lib.JDKToolLauncher;\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/Warning.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.testlibrary.JDKToolLauncher;\n+import jdk.test.lib.JDKToolLauncher;\n","filename":"test\/jdk\/sun\/tools\/jcmd\/JcmdBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-import jdk.testlibrary.JDKToolLauncher;\n+import jdk.test.lib.JDKToolLauncher;\n","filename":"test\/jdk\/sun\/tools\/jhsdb\/BasicLauncherTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,0 +42,2 @@\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.JDKToolLauncher;\n@@ -45,1 +47,0 @@\n-import jdk.test.lib.Platform;\n@@ -47,1 +48,0 @@\n-import jdk.testlibrary.JDKToolLauncher;\n","filename":"test\/jdk\/sun\/tools\/jhsdb\/HeapDumpTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import jdk.testlibrary.JDKToolLauncher;\n+import jdk.test.lib.JDKToolLauncher;\n","filename":"test\/jdk\/sun\/tools\/jhsdb\/heapconfig\/TmtoolTestScenario.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import jdk.test.lib.JDKToolLauncher;\n@@ -28,1 +29,0 @@\n-import jdk.testlibrary.JDKToolLauncher;\n@@ -33,1 +33,0 @@\n- * @library \/lib\/testlibrary\n@@ -35,1 +34,0 @@\n- * @build jdk.testlibrary.*\n","filename":"test\/jdk\/sun\/tools\/jinfo\/BasicJInfoTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.test.lib.JDKToolLauncher;\n@@ -33,1 +34,0 @@\n-import jdk.testlibrary.JDKToolLauncher;\n","filename":"test\/jdk\/sun\/tools\/jmap\/BasicJMapTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import jdk.test.lib.JDKToolLauncher;\n@@ -41,1 +42,0 @@\n-import jdk.testlibrary.JDKToolLauncher;\n","filename":"test\/jdk\/sun\/tools\/jps\/JpsHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.testlibrary.JDKToolLauncher;\n+import jdk.test.lib.JDKToolLauncher;\n@@ -33,1 +33,0 @@\n- * @library \/lib\/testlibrary\n@@ -35,1 +34,0 @@\n- * @build jdk.testlibrary.*\n","filename":"test\/jdk\/sun\/tools\/jstack\/BasicJStackTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import jdk.testlibrary.JDKToolLauncher;\n+import jdk.test.lib.JDKToolLauncher;\n","filename":"test\/jdk\/sun\/tools\/jstack\/DeadlockDetectionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @library \/lib\/testlibrary\n@@ -33,1 +32,1 @@\n- * @build jdk.testlibrary.* JStatInterval\n+ * @build JStatInterval\n@@ -37,0 +36,1 @@\n+import jdk.test.lib.JDKToolLauncher;\n@@ -38,1 +38,0 @@\n-import jdk.testlibrary.JDKToolLauncher;\n","filename":"test\/jdk\/sun\/tools\/jstat\/JStatInterval.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-# @bug 6959965 \n+# @bug 6959965\n","filename":"test\/jdk\/sun\/tools\/jstat\/jstatClassloadOutput1.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.test.lib.JDKToolLauncher;\n@@ -35,1 +36,0 @@\n-import jdk.testlibrary.JDKToolLauncher;\n","filename":"test\/jdk\/sun\/tools\/jstatd\/JstatdTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.testlibrary.JDKToolLauncher;\n+import jdk.test.lib.JDKToolLauncher;\n@@ -31,1 +31,0 @@\n- * @library \/lib\/testlibrary\n@@ -34,1 +33,0 @@\n- * @build jdk.testlibrary.*\n","filename":"test\/jdk\/sun\/tools\/jstatd\/TestJstatdUsage.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import jdk.testlibrary.JDKToolFinder;\n+import jdk.test.lib.JDKToolFinder;\n@@ -55,1 +55,1 @@\n- *        jdk.testlibrary.JDKToolFinder\n+ *        jdk.test.lib.JDKToolFinder\n","filename":"test\/jdk\/tools\/jar\/compat\/CLICompatibility.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import jdk.testlibrary.JDKToolFinder;\n+import jdk.test.lib.JDKToolFinder;\n@@ -50,1 +50,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -55,1 +55,1 @@\n- *        jdk.testlibrary.JDKToolFinder\n+ *        jdk.test.lib.JDKToolFinder\n","filename":"test\/jdk\/tools\/jar\/modularJar\/Basic.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -46,1 +46,1 @@\n-import jdk.testlibrary.JDKToolFinder;\n+import jdk.test.lib.JDKToolFinder;\n","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/systemmodules\/PatchSystemModules.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}