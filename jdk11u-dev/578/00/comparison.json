{"files":[{"patch":"@@ -2565,1 +2565,1 @@\n-char* os::pd_attempt_reserve_memory_at(size_t bytes, char* requested_addr, int file_desc) {\n+char* os::pd_attempt_map_memory_to_file_at(size_t bytes, char* requested_addr, int file_desc) {\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2286,1 +2286,1 @@\n-char* os::pd_attempt_reserve_memory_at(size_t bytes, char* requested_addr, int file_desc) {\n+char* os::pd_attempt_map_memory_to_file_at(size_t bytes, char* requested_addr, int file_desc) {\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4270,1 +4270,1 @@\n-char* os::pd_attempt_reserve_memory_at(size_t bytes, char* requested_addr, int file_desc) {\n+char* os::pd_attempt_map_memory_to_file_at(size_t bytes, char* requested_addr, int file_desc) {\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -284,4 +284,1 @@\n-\/\/ Multiple threads can race in this code, and can remap over each other with MAP_FIXED,\n-\/\/ so on posix, unmap the section at the start and at the end of the chunk that we mapped\n-\/\/ rather than unmapping and remapping the whole chunk to get requested alignment.\n-char* os::reserve_memory_aligned(size_t size, size_t alignment, int file_desc) {\n+static size_t calculate_aligned_extra_size(size_t size, size_t alignment) {\n@@ -294,0 +291,2 @@\n+  return extra_size;\n+}\n@@ -295,19 +294,2 @@\n-  char* extra_base;\n-  if (file_desc != -1) {\n-    \/\/ For file mapping, we do not call os:reserve_memory(extra_size, NULL, alignment, file_desc) because\n-    \/\/ we need to deal with shrinking of the file space later when we release extra memory after alignment.\n-    \/\/ We also cannot called os:reserve_memory() with file_desc set to -1 because on aix we might get SHM memory.\n-    \/\/ So here to call a helper function while reserve memory for us. After we have a aligned base,\n-    \/\/ we will replace anonymous mapping with file mapping.\n-    extra_base = reserve_mmapped_memory(extra_size, NULL);\n-    if (extra_base != NULL) {\n-      MemTracker::record_virtual_memory_reserve((address)extra_base, extra_size, CALLER_PC);\n-    }\n-  } else {\n-    extra_base = os::reserve_memory(extra_size, alignment);\n-  }\n-\n-  if (extra_base == NULL) {\n-    return NULL;\n-  }\n-\n+\/\/ After a bigger chunk was mapped, unmaps start and end parts to get the requested alignment.\n+static char* chop_extra_memory(size_t size, size_t alignment, char* extra_base, size_t extra_size) {\n@@ -335,6 +317,31 @@\n-  if (file_desc != -1) {\n-    \/\/ After we have an aligned address, we can replace anonymous mapping with file mapping\n-    if (replace_existing_mapping_with_file_mapping(aligned_base, size, file_desc) == NULL) {\n-      vm_exit_during_initialization(err_msg(\"Error in mapping Java heap at the given filesystem directory\"));\n-    }\n-    MemTracker::record_virtual_memory_commit((address)aligned_base, size, CALLER_PC);\n+  return aligned_base;\n+}\n+\n+\/\/ Multiple threads can race in this code, and can remap over each other with MAP_FIXED,\n+\/\/ so on posix, unmap the section at the start and at the end of the chunk that we mapped\n+\/\/ rather than unmapping and remapping the whole chunk to get requested alignment.\n+char* os::reserve_memory_aligned(size_t size, size_t alignment) {\n+  size_t extra_size = calculate_aligned_extra_size(size, alignment);\n+  char* extra_base = os::reserve_memory(extra_size, alignment);\n+  if (extra_base == NULL) {\n+    return NULL;\n+  }\n+  return chop_extra_memory(size, alignment, extra_base, extra_size);\n+}\n+\n+char* os::map_memory_to_file_aligned(size_t size, size_t alignment, int file_desc) {\n+  size_t extra_size = calculate_aligned_extra_size(size, alignment);\n+  \/\/ For file mapping, we do not call os:map_memory_to_file(size,fd) since:\n+  \/\/ - we later chop away parts of the mapping using os::release_memory and that could fail if the\n+  \/\/   original mmap call had been tied to an fd.\n+  \/\/ - The memory API os::reserve_memory uses is an implementation detail. It may (and usually is)\n+  \/\/   mmap but it also may System V shared memory which cannot be uncommitted as a whole, so\n+  \/\/   chopping off and unmapping excess bits back and front (see below) would not work.\n+  char* extra_base = reserve_mmapped_memory(extra_size, NULL);\n+  if (extra_base == NULL) {\n+    return NULL;\n+  }\n+  char* aligned_base = chop_extra_memory(size, alignment, extra_base, extra_size);\n+  \/\/ After we have an aligned address, we can replace anonymous mapping with file mapping\n+  if (replace_existing_mapping_with_file_mapping(aligned_base, size, file_desc) == NULL) {\n+    vm_exit_during_initialization(err_msg(\"Error in mapping Java heap at the given filesystem directory\"));\n@@ -342,0 +349,1 @@\n+  MemTracker::record_virtual_memory_commit((address)aligned_base, size, CALLER_PC);\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":37,"deletions":29,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2576,1 +2576,1 @@\n-char* os::pd_attempt_reserve_memory_at(size_t bytes, char* requested_addr, int file_desc) {\n+char* os::pd_attempt_map_memory_to_file_at(size_t bytes, char* requested_addr, int file_desc) {\n","filename":"src\/hotspot\/os\/solaris\/os_solaris.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3069,1 +3069,1 @@\n-char* os::reserve_memory_aligned(size_t size, size_t alignment, int file_desc) {\n+static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int file_desc) {\n@@ -3081,1 +3081,3 @@\n-    char* extra_base = os::reserve_memory_with_fd(extra_size, alignment, file_desc);\n+    char* extra_base = file_desc != -1 ?\n+      os::map_memory_to_file(extra_size, file_desc) :\n+      os::reserve_memory(extra_size, alignment);\n@@ -3099,1 +3101,3 @@\n-    aligned_base = os::attempt_reserve_memory_at(size, aligned_base, file_desc);\n+    aligned_base = file_desc != -1 ?\n+      os::attempt_map_memory_to_file_at(size, aligned_base, file_desc) :\n+      os::attempt_reserve_memory_at(size, aligned_base);\n@@ -3108,0 +3112,8 @@\n+char* os::reserve_memory_aligned(size_t size, size_t alignment) {\n+  return map_or_reserve_memory_aligned(size, alignment, -1 \/* file_desc *\/);\n+}\n+\n+char* os::map_memory_to_file_aligned(size_t size, size_t alignment, int fd) {\n+  return map_or_reserve_memory_aligned(size, alignment, fd);\n+}\n+\n@@ -3146,1 +3158,1 @@\n-char* os::pd_attempt_reserve_memory_at(size_t bytes, char* requested_addr, int file_desc) {\n+char* os::pd_attempt_map_memory_to_file_at(size_t bytes, char* requested_addr, int file_desc) {\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -85,0 +85,24 @@\n+\/\/ Helper method\n+static char* attempt_map_or_reserve_memory_at(size_t size, char* base, int fd) {\n+  if (fd != -1) {\n+    return os::attempt_map_memory_to_file_at(size, base, fd);\n+  }\n+  return os::attempt_reserve_memory_at(size, base);\n+}\n+\n+\/\/ Helper method\n+static char* map_or_reserve_memory(size_t size, int fd) {\n+  if (fd != -1) {\n+    return os::map_memory_to_file(size, fd);\n+  }\n+  return os::reserve_memory(size);\n+}\n+\n+\/\/ Helper method\n+static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int fd) {\n+  if (fd != -1) {\n+    return os::map_memory_to_file_aligned(size, alignment, fd);\n+  }\n+  return os::reserve_memory_aligned(size, alignment);\n+}\n+\n@@ -193,1 +217,1 @@\n-      base = os::attempt_reserve_memory_at(size, requested_address, _fd_for_heap);\n+      base = attempt_map_or_reserve_memory_at(size, requested_address, _fd_for_heap);\n@@ -199,1 +223,1 @@\n-      base = os::reserve_memory_with_fd(size, alignment, _fd_for_heap);\n+      base = map_or_reserve_memory(size, _fd_for_heap);\n@@ -211,1 +235,1 @@\n-      base = os::reserve_memory_aligned(size, alignment, _fd_for_heap);\n+      base = map_or_reserve_memory_aligned(size, alignment, _fd_for_heap);\n@@ -391,1 +415,1 @@\n-      base = os::attempt_reserve_memory_at(size, requested_address, _fd_for_heap);\n+      base = attempt_map_or_reserve_memory_at(size, requested_address, _fd_for_heap);\n@@ -393,1 +417,1 @@\n-      base = os::reserve_memory_with_fd(size, alignment, _fd_for_heap);\n+      base = map_or_reserve_memory(size, _fd_for_heap);\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":29,"deletions":5,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1752,16 +1752,0 @@\n-char* os::reserve_memory_with_fd(size_t bytes, size_t alignment_hint, int file_desc) {\n-  char* result;\n-\n-  if (file_desc != -1) {\n-    \/\/ Could have called pd_reserve_memory() followed by replace_existing_mapping_with_file_mapping(),\n-    \/\/ but AIX may use SHM in which case its more trouble to detach the segment and remap memory to the file.\n-    result = os::map_memory_to_file(NULL \/* addr *\/, bytes, file_desc);\n-    if (result != NULL) {\n-      MemTracker::record_virtual_memory_reserve_and_commit(result, bytes, CALLER_PC);\n-    }\n-  } else {\n-    result = pd_reserve_memory(bytes, alignment_hint);\n-    if (result != NULL) {\n-      MemTracker::record_virtual_memory_reserve(result, bytes, CALLER_PC);\n-    }\n-  }\n@@ -1769,15 +1753,4 @@\n-  return result;\n-}\n-\n-char* os::attempt_reserve_memory_at(size_t bytes, char* addr, int file_desc) {\n-  char* result = NULL;\n-  if (file_desc != -1) {\n-    result = pd_attempt_reserve_memory_at(bytes, addr, file_desc);\n-    if (result != NULL) {\n-      MemTracker::record_virtual_memory_reserve_and_commit((address)result, bytes, CALLER_PC);\n-    }\n-  } else {\n-    result = pd_attempt_reserve_memory_at(bytes, addr);\n-    if (result != NULL) {\n-      MemTracker::record_virtual_memory_reserve((address)result, bytes, CALLER_PC);\n-    }\n+char* os::attempt_reserve_memory_at(size_t bytes, char* addr) {\n+  char* result = pd_attempt_reserve_memory_at(bytes, addr);\n+  if (result != NULL) {\n+    MemTracker::record_virtual_memory_reserve((address)result, bytes, CALLER_PC);\n@@ -1856,0 +1829,19 @@\n+char* os::map_memory_to_file(size_t bytes, int file_desc) {\n+  \/\/ Could have called pd_reserve_memory() followed by replace_existing_mapping_with_file_mapping(),\n+  \/\/ but AIX may use SHM in which case its more trouble to detach the segment and remap memory to the file.\n+  \/\/ On all current implementations NULL is interpreted as any available address.\n+  char* result = os::map_memory_to_file(NULL \/* addr *\/, bytes, file_desc);\n+  if (result != NULL) {\n+    MemTracker::record_virtual_memory_reserve_and_commit(result, bytes, CALLER_PC);\n+  }\n+  return result;\n+}\n+\n+char* os::attempt_map_memory_to_file_at(size_t bytes, char* addr, int file_desc) {\n+  char* result = pd_attempt_map_memory_to_file_at(bytes, addr, file_desc);\n+  if (result != NULL) {\n+    MemTracker::record_virtual_memory_reserve_and_commit((address)result, bytes, CALLER_PC);\n+  }\n+  return result;\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":23,"deletions":31,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -117,1 +117,0 @@\n-  static char*  pd_attempt_reserve_memory_at(size_t bytes, char* addr, int file_desc);\n@@ -134,0 +133,2 @@\n+  static char*  pd_attempt_map_memory_to_file_at(size_t bytes, char* addr, int file_desc);\n+\n@@ -334,4 +335,0 @@\n-  \/\/ Reserves virtual memory.\n-  \/\/ if file_desc != -1, also attaches the memory to the file.\n-  static char*  reserve_memory_with_fd(size_t bytes, size_t alignment_hint, int file_desc);\n-\n@@ -339,1 +336,1 @@\n-  static char*  reserve_memory_aligned(size_t size, size_t alignment, int file_desc = -1);\n+  static char*  reserve_memory_aligned(size_t size, size_t alignment);\n@@ -343,1 +340,1 @@\n-  static char*  attempt_reserve_memory_at(size_t bytes, char* addr, int file_desc = -1);\n+  static char*  attempt_reserve_memory_at(size_t bytes, char* addr);\n@@ -380,0 +377,2 @@\n+  static char* map_memory_to_file(size_t size, int fd);\n+  static char* map_memory_to_file_aligned(size_t size, size_t alignment, int fd);\n@@ -381,0 +380,1 @@\n+  static char* attempt_map_memory_to_file_at(size_t size, char* base, int fd);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}