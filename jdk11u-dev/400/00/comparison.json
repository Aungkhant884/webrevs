{"files":[{"patch":"@@ -653,1 +653,1 @@\n-sun\/security\/pkcs11\/KeyStore\/SecretKeysBasic.sh                 8209398 generic-all\n+sun\/security\/pkcs11\/KeyStore\/SecretKeysBasic.java                 8209398 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,10 @@\n+\/* @test\n+ * @bug 8187023\n+ * @summary Pkcs11 config file should be assumed in ISO-8859-1\n+ * @library \/test\/lib\n+ * @run testng\/othervm ReadConfInUTF16Env\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import org.testng.annotations.Test;\n+\n@@ -28,4 +38,10 @@\n-    public static void main(String argv[]) {\n-        Provider p = Security.getProvider(\"SunPKCS11\");\n-        if (p == null) {\n-            p = Security.getProvider(\"SunPKCS11-Solaris\");\n+    @Test\n+    public void testReadConfInUTF16Env() throws Exception {\n+        String[] testCommand = new String[] { \"-Dfile.encoding=UTF-16\",\n+                TestSunPKCS11Provider.class.getName()};\n+        ProcessTools.executeTestJvm(testCommand).shouldHaveExitValue(0);\n+    }\n+\n+    static class TestSunPKCS11Provider {\n+        public static void main(String[] args) throws Exception {\n+            Provider p = Security.getProvider(\"SunPKCS11\");\n@@ -36,0 +52,1 @@\n+            System.out.println(p.getName());\n@@ -37,2 +54,0 @@\n-\n-        System.out.println(p.getName());\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Config\/ReadConfInUTF16Env.java","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -1,39 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 8187023\n-# @summary Pkcs11 config file should be assumed in ISO-8859-1\n-# @library \/test\/lib\n-# @build ReadConfInUTF16Env\n-# @run shell ReadConfInUTF16Env.sh\n-\n-# jtreg does not like -Dfile.encoding=UTF-16 inside a @run main line,\n-# testlibrary.ProcessTools.createJavaProcessBuilder() also had troubles\n-# executing a subprocess with -Dfile.encoding=UTF-16 option added,\n-# therefore a shell test is written.\n-\n-$TESTJAVA\/bin\/java $TESTVMOPTS -cp $TESTCLASSES \\\n-  -Dfile.encoding=UTF-16 \\\n-  ReadConfInUTF16Env\n-\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Config\/ReadConfInUTF16Env.sh","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,15 @@\n+\/* @test\n+ * @bug 4938185\n+ * @summary KeyStore support for NSS cert\/key databases\n+ * To run manually:\n+ *    set environment variable:\n+ *     <token>     [activcard|ibutton|nss|sca1000]\n+ *     <command>   [list|basic]\n+ *\n+ * Note:\n+ *    . 'list' lists the token aliases\n+ *    . 'basic' does not run with activcard,\n+ * @library \/test\/lib ..\n+ * @run testng\/othervm Basic\n+ *\/\n+\n@@ -25,0 +40,1 @@\n+import java.nio.file.Path;\n@@ -30,4 +46,0 @@\n-import java.security.KeyPairGenerator;\n-import java.security.KeyPair;\n-import java.security.SecureRandom;\n-import java.security.AuthProvider;\n@@ -36,1 +48,0 @@\n-import java.security.ProviderException;\n@@ -47,1 +58,0 @@\n-import javax.security.auth.login.LoginException;\n@@ -51,0 +61,2 @@\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n@@ -55,3 +67,3 @@\n-    private static final char SEP = File.separatorChar;\n-\n-    private static String DIR = System.getProperty(\"DIR\");\n+    private static final Path TEST_DATA_PATH = Path.of(BASE)\n+            .resolve(\"BasicData\");\n+    private static final String DIR = TEST_DATA_PATH.toString();\n@@ -91,0 +103,16 @@\n+    @BeforeClass\n+    public void setUp() throws Exception {\n+        copyNssCertKeyToClassesDir();\n+        setCommonSystemProps();\n+        System.setProperty(\"CUSTOM_P11_CONFIG\",\n+                TEST_DATA_PATH.resolve(\"p11-nss.txt\").toString());\n+        System.setProperty(\"TOKEN\", \"nss\");\n+        System.setProperty(\"TEST\", \"basic\");\n+    }\n+\n+    @Test\n+    public void testBasic() throws Exception {\n+        String[] args = {\"sm\", \"Basic.policy\"};\n+        main(new Basic(), args);\n+    }\n+\n@@ -105,4 +133,0 @@\n-    public static void main(String[] args) throws Exception {\n-        main(new Basic(), args);\n-    }\n-\n@@ -139,1 +163,1 @@\n-        Certificate caCert = (X509Certificate)cf.generateCertificate\n+        Certificate caCert = cf.generateCertificate\n@@ -141,1 +165,1 @@\n-        Certificate ca2Cert = (X509Certificate)cf.generateCertificate\n+        Certificate ca2Cert = cf.generateCertificate\n@@ -143,1 +167,1 @@\n-        Certificate pk1cert = (X509Certificate)cf.generateCertificate\n+        Certificate pk1cert = cf.generateCertificate\n@@ -145,1 +169,1 @@\n-        Certificate pk1cert2 = (X509Certificate)cf.generateCertificate\n+        Certificate pk1cert2 = cf.generateCertificate\n@@ -147,1 +171,1 @@\n-        Certificate pk2cert = (X509Certificate)cf.generateCertificate\n+        Certificate pk2cert = cf.generateCertificate\n@@ -149,1 +173,1 @@\n-        Certificate pk3cert = (X509Certificate)cf.generateCertificate\n+        Certificate pk3cert = cf.generateCertificate\n@@ -376,1 +400,1 @@\n-        Map options = new HashMap();\n+        Map<String, String> options = new HashMap<>();\n@@ -381,1 +405,1 @@\n-        m.initialize(s, new TextCallbackHandler(), new HashMap(), options);\n+        m.initialize(s, new TextCallbackHandler(), new HashMap<>(), options);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/Basic.java","additions":46,"deletions":22,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -1,200 +0,0 @@\n-#\n-# Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 4938185\n-# @library \/test\/lib\n-# @summary KeyStore support for NSS cert\/key databases\n-#\n-# @run shell Basic.sh\n-\n-# To run by hand:\n-#    %sh Basic.sh <recompile> [yes|no]\n-#\t\t  <token>     [activcard|ibutton|nss|sca1000]\n-#                 <command>   [list|basic]\n-#\n-#    %sh Basic.sh no ibutton list\n-#\n-# Note:\n-#    . 'list' lists the token aliases\n-#    . 'basic' does not run with activcard,\n-#      and tests different things depending on what is supported by each token\n-\n-# set a few environment variables so that the shell-script can run stand-alone\n-# in the source directory\n-\n-# if running by hand on windows, change TESTSRC and TESTCLASSES to \".\"\n-if [ \"${TESTSRC}\" = \"\" ] ; then\n-    TESTSRC=`pwd`\n-fi\n-if [ \"${TESTCLASSES}\" = \"\" ] ; then\n-    TESTCLASSES=`pwd`\n-fi\n-\n-# if running by hand on windows, change this to appropriate value\n-if [ \"${TESTJAVA}\" = \"\" ] ; then\n-    TESTJAVA=\"\/net\/radiant\/export1\/charlie\/mustang\/build\/solaris-sparc\"\n-fi\n-if [ \"${COMPILEJAVA}\" = \"\" ]; then\n-  COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-echo TESTSRC=${TESTSRC}\n-echo TESTCLASSES=${TESTCLASSES}\n-echo TESTJAVA=${TESTJAVA}\n-echo COMPILEJAVA=${COMPILEJAVA}\n-echo CPAPPEND=${CPAPPEND}\n-echo \"\"\n-\n-# get command from input args -\n-# default to 'nss basic'\n-\n-RECOMPILE=\"yes\"\n-if [ $# = '3' ] ; then\n-    RECOMPILE=$1\n-    TOKEN=$2\n-    TEST=$3\n-elif [ $# = '2' ] ; then\n-    TOKEN=$1\n-    TEST=$2\n-else\n-    TOKEN=\"nss\"\n-    TEST=\"basic\"\n-fi\n-\n-DEBUG=sunpkcs11,pkcs11keystore\n-\n-echo RECOMPILE=${RECOMPILE}\n-echo TOKEN=${TOKEN}\n-echo TEST=${TEST}\n-echo DEBUG=${DEBUG}\n-echo \"\"\n-\n-OS=`uname -s`\n-case \"$OS\" in\n-  SunOS )\n-    ARCH=`isainfo`\n-    case \"$ARCH\" in\n-      sparc* )\n-\tFS=\"\/\"\n-\tPS=\":\"\n-\tCP=\"${FS}bin${FS}cp\"\n-\tCHMOD=\"${FS}bin${FS}chmod\"\n-\t;;\n-      i[3-6]86 )\n-\tFS=\"\/\"\n-\tPS=\":\"\n-\tCP=\"${FS}bin${FS}cp\"\n-\tCHMOD=\"${FS}bin${FS}chmod\"\n-\t;;\n-      amd64* )\n-\tFS=\"\/\"\n-\tPS=\":\"\n-\tCP=\"${FS}bin${FS}cp\"\n-\tCHMOD=\"${FS}bin${FS}chmod\"\n-\t;;\n-      * )\n-#     ?itanium? )\n-#     amd64* )\n-\techo \"Unsupported System: Solaris ${ARCH}\"\n-\texit 0;\n-\t;;\n-    esac\n-    ;;\n-  Linux )\n-    ARCH=`uname -m`\n-    case \"$ARCH\" in\n-      i[3-6]86 ) \n-\tFS=\"\/\"\n-\tPS=\":\"\n-\tCP=\"${FS}bin${FS}cp\"\n-\tCHMOD=\"${FS}bin${FS}chmod\"\n-\t;;\n-      * )\n-#     ia64 )\n-#     x86_64 )\n-\techo \"Unsupported System: Linux ${ARCH}\"\n-\texit 0;\n-\t;;\n-    esac\n-    ;;\n-  Windows* )  \n-    FS=\"\\\\\"\n-    PS=\";\"\n-    CP=\"cp\"\n-    CHMOD=\"chmod\"\n-\n-    # 'uname -m' does not give us enough information -\n-    #  should rely on $PROCESSOR_IDENTIFIER (as is done in Defs-windows.gmk),\n-    #  but JTREG does not pass this env variable when executing a shell script.\n-    #\n-    #  execute test program - rely on it to exit if platform unsupported\n-\n-    ;;\n-  * )\n-    echo \"Unsupported System: ${OS}\"\n-    exit 0;\n-    ;;\n-esac\n-\n-# first make cert\/key DBs writable if token is NSS\n-\n-if [ \"${TOKEN}\" = \"nss\" ] ; then\n-    ${CP} ${TESTSRC}${FS}..${FS}nss${FS}db${FS}cert8.db ${TESTCLASSES}\n-    ${CHMOD} +w ${TESTCLASSES}${FS}cert8.db\n-\n-    ${CP} ${TESTSRC}${FS}..${FS}nss${FS}db${FS}key3.db ${TESTCLASSES}\n-    ${CHMOD} +w ${TESTCLASSES}${FS}key3.db\n-fi\n-\n-# compile test\n-\n-if [ \"${RECOMPILE}\" = \"yes\" ] ; then\n-    ${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} \\\n-  -classpath ${TESTSRC}${FS}..${PS}${TESTSRC}${FS}loader.jar \\\n-  -d ${TESTCLASSES} \\\n-  ${TESTSRC}${FS}..${FS}..${FS}..${FS}..${FS}..${FS}lib${FS}jdk${FS}test${FS}lib${FS}artifacts${FS}*.java \\\n-  ${TESTSRC}${FS}Basic.java \\\n-  ${TESTSRC}${FS}..${FS}PKCS11Test.java\n-fi\n-\n-# run test\n-\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} \\\n-\t-classpath ${TESTCLASSES}${PS}${TESTSRC}${FS}loader.jar${PS}${CPAPPEND} \\\n-\t-DDIR=${TESTSRC}${FS}BasicData \\\n-\t-DCUSTOM_DB_DIR=${TESTCLASSES} \\\n-\t-DCUSTOM_P11_CONFIG=${TESTSRC}${FS}BasicData${FS}p11-${TOKEN}.txt \\\n-\t-DNO_DEFAULT=true \\\n-\t-DNO_DEIMOS=true \\\n-\t-DTOKEN=${TOKEN} \\\n-\t-DTEST=${TEST} \\\n-\t-Dtest.src=${TESTSRC} \\\n-\t-Dtest.classes=${TESTCLASSES} \\\n-\t-Djava.security.debug=${DEBUG} \\\n-\tBasic sm Basic.policy\n-\n-# save error status\n-status=$?\n-\n-# return\n-exit $status\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/Basic.sh","additions":0,"deletions":200,"binary":false,"changes":200,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,11 @@\n+\/* @test\n+ * @bug 4938185 7106773\n+ * @summary KeyStore support for NSS cert\/key databases\n+ *          512 bits RSA key cannot work with SHA384 and SHA512\n+ * @library \/test\/lib ..\n+ * @run testng\/othervm ClientAuth\n+ *\/\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n@@ -25,2 +36,3 @@\n-import java.net.*;\n-import java.util.*;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.nio.file.Path;\n@@ -28,0 +40,2 @@\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n@@ -46,1 +60,4 @@\n-    private static String DIR = System.getProperty(\"DIR\");\n+    private static final Path TEST_DATA_PATH = Path.of(BASE)\n+            .resolve(\"ClientAuthData\");\n+\n+    private static final String DIR = TEST_DATA_PATH.toString();\n@@ -58,1 +75,1 @@\n-    volatile static boolean serverReady = false;\n+    private final CountDownLatch serverReadyLatch = new CountDownLatch(1);\n@@ -74,0 +91,34 @@\n+    @BeforeClass\n+    public void setUp() throws Exception {\n+        copyNssCertKeyToClassesDir(TEST_DATA_PATH);\n+        setCommonSystemProps();\n+        System.setProperty(\"CUSTOM_P11_CONFIG\",\n+                TEST_DATA_PATH.resolve(\"p11-nss.txt\").toString());\n+        Security.setProperty(\"jdk.tls.disabledAlgorithms\", \"\");\n+        Security.setProperty(\"jdk.certpath.disabledAlgorithms\", \"\");\n+    }\n+\n+    @Test\n+    public void testClientAuthTLSv1() throws Exception {\n+        String[] args = { \"TLSv1\" };\n+        runTest(args);\n+    }\n+\n+    @Test\n+    public void testClientAuthTLSv11() throws Exception {\n+        String[] args = { \"TLSv1.1\" };\n+        runTest(args);\n+    }\n+\n+    @Test\n+    public void testClientAuthTLSv12AndCipherSuite() throws Exception {\n+        String[] args = { \"TLSv1.2\", \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\" };\n+        runTest(args);\n+    }\n+\n+    private void runTest(String[] args) throws Exception {\n+        System.out.println(\"Running with args: \" + Arrays.toString(args));\n+        parseArguments(args);\n+        main(new ClientAuth());\n+    }\n+\n@@ -103,2 +154,4 @@\n-        SSLServerSocket sslServerSocket = (SSLServerSocket)\n-                                ssf.createServerSocket(serverPort);\n+        InetSocketAddress socketAddress =\n+                new InetSocketAddress(InetAddress.getLoopbackAddress(), serverPort);\n+        SSLServerSocket sslServerSocket = (SSLServerSocket) ssf.createServerSocket();\n+        sslServerSocket.bind(socketAddress);\n@@ -112,1 +165,1 @@\n-        serverReady = true;\n+        serverReadyLatch.countDown();\n@@ -136,3 +189,1 @@\n-        while (!serverReady) {\n-            Thread.sleep(50);\n-        }\n+        serverReadyLatch.await();\n@@ -199,9 +250,0 @@\n-    public static void main(String[] args) throws Exception {\n-        Security.setProperty(\"jdk.tls.disabledAlgorithms\", \"\");\n-        Security.setProperty(\"jdk.certpath.disabledAlgorithms\", \"\");\n-\n-        \/\/ Get the customized arguments.\n-        parseArguments(args);\n-        main(new ClientAuth());\n-    }\n-\n@@ -306,1 +348,1 @@\n-    void startServer(boolean newThread) throws Exception {\n+    void startServer (boolean newThread) {\n@@ -308,14 +350,12 @@\n-            serverThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doServerSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our server thread just died.\n-                         *\n-                         * Release the client, if not active already...\n-                         *\/\n-                        System.err.println(\"Server died...\");\n-                        serverReady = true;\n-                        serverException = e;\n-                    }\n+            serverThread = new Thread(() -> {\n+                try {\n+                    doServerSide();\n+                } catch (Exception e) {\n+                    \/*\n+                     * Our server thread just died.\n+                     *\n+                     * Release the client, if not active already...\n+                     *\/\n+                    System.err.println(\"Server died...\");\n+                    serverReadyLatch.countDown();\n+                    serverException = e;\n@@ -323,1 +363,1 @@\n-            };\n+            });\n@@ -331,1 +371,1 @@\n-                serverReady = true;\n+                serverReadyLatch.countDown();\n@@ -336,1 +376,1 @@\n-    void startClient(boolean newThread) throws Exception {\n+    void startClient (boolean newThread) {\n@@ -338,11 +378,9 @@\n-            clientThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doClientSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our client thread just died.\n-                         *\/\n-                        System.err.println(\"Client died...\");\n-                        clientException = e;\n-                    }\n+            clientThread = new Thread(() -> {\n+                try {\n+                    doClientSide();\n+                } catch (Exception e) {\n+                    \/*\n+                     * Our client thread just died.\n+                     *\/\n+                    System.err.println(\"Client died...\");\n+                    clientException = e;\n@@ -350,1 +388,1 @@\n-            };\n+            });\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/ClientAuth.java","additions":88,"deletions":50,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -1,195 +0,0 @@\n-#\n-# Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 4938185 7106773\n-# @summary KeyStore support for NSS cert\/key databases\n-#          512 bits RSA key cannot work with SHA384 and SHA512\n-# @library \/test\/lib\n-# @run shell ClientAuth.sh\n-\n-# set a few environment variables so that the shell-script can run stand-alone\n-# in the source directory\n-\n-if [ \"${TESTSRC}\" = \"\" ] ; then\n-    TESTSRC=`pwd`\n-fi\n-if [ \"${TESTCLASSES}\" = \"\" ] ; then\n-    TESTCLASSES=`pwd`\n-fi\n-if [ \"${TESTJAVA}\" = \"\" ] ; then\n-    TESTJAVA=\"\/net\/radiant\/export1\/charlie\/mustang\/build\/solaris-sparc\"\n-fi\n-if [ \"${COMPILEJAVA}\" = \"\" ]; then\n-  COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-echo TESTSRC=${TESTSRC}\n-echo TESTCLASSES=${TESTCLASSES}\n-echo TESTJAVA=${TESTJAVA}\n-echo COMPILEJAVA=${COMPILEJAVA}\n-echo CPAPPEND=${CPAPPEND}\n-echo \"\"\n-\n-OS=`uname -s`\n-case \"$OS\" in\n-  SunOS )\n-    ARCH=`isainfo`\n-    case \"$ARCH\" in\n-      sparc* )\n-    FS=\"\/\"\n-    PS=\":\"\n-    CP=\"${FS}bin${FS}cp\"\n-    CHMOD=\"${FS}bin${FS}chmod\"\n-    ;;\n-      i[3-6]86 )\n-    FS=\"\/\"\n-    PS=\":\"\n-    CP=\"${FS}bin${FS}cp\"\n-    CHMOD=\"${FS}bin${FS}chmod\"\n-    ;;\n-      amd64* )\n-    FS=\"\/\"\n-    PS=\":\"\n-    CP=\"${FS}bin${FS}cp\"\n-    CHMOD=\"${FS}bin${FS}chmod\"\n-    ;;\n-      * )\n-#     ?itanium? )\n-#     amd64* )\n-    echo \"Unsupported System: Solaris ${ARCH}\"\n-    exit 0;\n-    ;;\n-    esac\n-    ;;\n-  Linux )\n-    ARCH=`uname -m`\n-    case \"$ARCH\" in\n-      i[3-6]86 )\n-    FS=\"\/\"\n-    PS=\":\"\n-    CP=\"${FS}bin${FS}cp\"\n-    CHMOD=\"${FS}bin${FS}chmod\"\n-    ;;\n-      * )\n-#     ia64 )\n-#     x86_64 )\n-    echo \"Unsupported System: Linux ${ARCH}\"\n-    exit 0;\n-    ;;\n-    esac\n-    ;;\n-  Windows* )\n-    FS=\"\\\\\"\n-    PS=\";\"\n-    CP=\"cp\"\n-    CHMOD=\"chmod\"\n-\n-    # 'uname -m' does not give us enough information -\n-    #  should rely on $PROCESSOR_IDENTIFIER (as is done in Defs-windows.gmk),\n-    #  but JTREG does not pass this env variable when executing a shell script.\n-    #\n-    #  execute test program - rely on it to exit if platform unsupported\n-\n-    ;;\n-  * )\n-    echo \"Unsupported System: ${OS}\"\n-    exit 0;\n-    ;;\n-esac\n-\n-# first make cert\/key DBs writable\n-\n-${CP} ${TESTSRC}${FS}ClientAuthData${FS}cert8.db ${TESTCLASSES}\n-${CHMOD} +w ${TESTCLASSES}${FS}cert8.db\n-\n-${CP} ${TESTSRC}${FS}ClientAuthData${FS}key3.db ${TESTCLASSES}\n-${CHMOD} +w ${TESTCLASSES}${FS}key3.db\n-\n-# compile test\n-${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} \\\n-    -classpath ${TESTSRC} \\\n-    -d ${TESTCLASSES} \\\n-    ${TESTSRC}${FS}..${FS}..${FS}..${FS}..${FS}..${FS}lib${FS}jdk${FS}test${FS}lib${FS}artifacts${FS}*.java \\\n-    ${TESTSRC}${FS}ClientAuth.java \\\n-    ${TESTSRC}${FS}..${FS}PKCS11Test.java\n-\n-# run test\n-echo \"Run ClientAuth TLSv1 ...\"\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} \\\n-    -classpath ${TESTCLASSES}${PS}${CPAPPEND} \\\n-    -DDIR=${TESTSRC}${FS}ClientAuthData${FS} \\\n-    -DCUSTOM_DB_DIR=${TESTCLASSES} \\\n-    -DCUSTOM_P11_CONFIG=${TESTSRC}${FS}ClientAuthData${FS}p11-nss.txt \\\n-    -DNO_DEFAULT=true \\\n-    -DNO_DEIMOS=true \\\n-    -Dtest.src=${TESTSRC} \\\n-    -Dtest.classes=${TESTCLASSES} \\\n-    ClientAuth TLSv1\n-\n-# save error status\n-status=$?\n-\n-# return if failed\n-if [ \"${status}\" != \"0\" ] ; then\n-    exit $status\n-fi\n-\n-# run test\n-echo \"Run ClientAuth TLSv1.1 ...\"\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} \\\n-    -classpath ${TESTCLASSES}${PS}${CPAPPEND} \\\n-    -DDIR=${TESTSRC}${FS}ClientAuthData${FS} \\\n-    -DCUSTOM_DB_DIR=${TESTCLASSES} \\\n-    -DCUSTOM_P11_CONFIG=${TESTSRC}${FS}ClientAuthData${FS}p11-nss.txt \\\n-    -DNO_DEFAULT=true \\\n-    -DNO_DEIMOS=true \\\n-    -Dtest.src=${TESTSRC} \\\n-    -Dtest.classes=${TESTCLASSES} \\\n-    ClientAuth TLSv1.1\n-\n-# save error status\n-status=$?\n-\n-# return if failed\n-if [ \"${status}\" != \"0\" ] ; then\n-    exit $status\n-fi\n-\n-# run test with specified TLS protocol and cipher suite\n-echo \"Run ClientAuth TLSv1.2 TLS_DHE_RSA_WITH_AES_128_CBC_SHA\"\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} \\\n-    -classpath ${TESTCLASSES}${PS}${CPAPPEND} \\\n-    -DDIR=${TESTSRC}${FS}ClientAuthData${FS} \\\n-    -DCUSTOM_DB_DIR=${TESTCLASSES} \\\n-    -DCUSTOM_P11_CONFIG=${TESTSRC}${FS}ClientAuthData${FS}p11-nss.txt \\\n-    -DNO_DEFAULT=true \\\n-    -DNO_DEIMOS=true \\\n-    -Dtest.src=${TESTSRC} \\\n-    -Dtest.classes=${TESTCLASSES} \\\n-    ClientAuth TLSv1.2 TLS_DHE_RSA_WITH_AES_128_CBC_SHA\n-\n-# save error status\n-status=$?\n-\n-# return\n-exit $status\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/ClientAuth.sh","additions":0,"deletions":195,"binary":false,"changes":195,"status":"deleted"},{"filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/ClientAuthData\/cert8.db","binary":true,"status":"modified"},{"filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/ClientAuthData\/key3.db","binary":true,"status":"modified"},{"filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/ClientAuthData\/secmod.db","binary":true,"status":"modified"},{"filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/ClientAuthData\/truststore","binary":true,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,8 @@\n+\/* @test\n+ * @bug 6599979\n+ * @summary Ensure that re-assigning the alias works\n+ * @library \/test\/lib ..\n+ * @run testng\/othervm SecretKeysBasic\n+ *\/\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n@@ -25,0 +33,1 @@\n+import java.nio.file.Path;\n@@ -45,1 +54,11 @@\n-    public static void main(String[] args) throws Exception {\n+    @BeforeClass\n+    public void setUp() throws Exception {\n+        copyNssCertKeyToClassesDir();\n+        setCommonSystemProps();\n+        System.setProperty(\"TOKEN\", \"nss\");\n+        System.setProperty(\"CUSTOM_P11_CONFIG\", Path.of(BASE)\n+                .resolve(\"BasicData\").resolve(\"p11-nss.txt\").toString());\n+    }\n+\n+    @Test\n+    public void testBasic() throws Exception {\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/SecretKeysBasic.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1,172 +0,0 @@\n-#\n-# Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 6599979\n-# @summary Ensure that re-assigning the alias works\n-#\n-# @library \/test\/lib ..\n-# @build SecretKeysBasic\n-# @run shell SecretKeysBasic.sh\n-#\n-# To run by hand:\n-#    %sh SecretKeysBasic.sh\n-#\n-# Note:\n-#    . test only runs on solaris at the moment\n-\n-# set a few environment variables so that the shell-script can run stand-alone\n-# in the source directory\n-\n-# if running by hand on windows, change TESTSRC and TESTCLASSES to \".\"\n-if [ \"${TESTSRC}\" = \"\" ] ; then\n-    TESTSRC=`pwd`\n-fi\n-if [ \"${TESTCLASSES}\" = \"\" ] ; then\n-    TESTCLASSES=`pwd`\n-fi\n-if [ \"${TESTJAVA}\" = \"\" ] ; then\n-    JAVAC_CMD=`which javac`\n-    TESTJAVA=`dirname $JAVAC_CMD`\/..\n-fi\n-echo TESTSRC=${TESTSRC}\n-echo TESTCLASSES=${TESTCLASSES}\n-echo TESTJAVA=${TESTJAVA}\n-echo CPAPPEND=${CPAPPEND}\n-echo \"\"\n-\n-#DEBUG=sunpkcs11,pkcs11keystore\n-\n-echo DEBUG=${DEBUG}\n-echo \"\"\n-\n-OS=`uname -s`\n-case \"$OS\" in\n-  SunOS )\n-    FS=\"\/\"\n-    PS=\":\"\n-    OS_VERSION=`uname -r`\n-    case \"${OS_VERSION}\" in\n-      5.1* )\n-        SOFTTOKEN_DIR=${TESTCLASSES}\n-        export SOFTTOKEN_DIR\n-        TOKENS=\"nss solaris\"\n-        ;;\n-      * )\n-        # SunPKCS11-Solaris Test only runs on Solaris 5.10 and later\n-        TOKENS=\"nss\"\n-        ;;\n-    esac\n-    ;;\n-  Windows_* )\n-    FS=\"\\\\\"\n-    PS=\";\"\n-    TOKENS=\"nss\"\n-    ;;\n-  CYGWIN* )\n-    FS=\"\/\"\n-    PS=\";\"\n-    TOKENS=\"nss\"\n-    ;;\n-  * )\n-    FS=\"\/\"\n-    PS=\":\"\n-    TOKENS=\"nss\"\n-    ;;\n-esac\n-\n-CP=\"cp -f\"\n-RM=\"rm -rf\"\n-MKDIR=\"mkdir -p\"\n-CHMOD=\"chmod\"\n-\n-\n-STATUS=0\n-for token in ${TOKENS}\n-do\n-\n-if [ ${token} = \"nss\" ]\n-then\n-    # make cert\/key DBs writable if token is NSS\n-    ${CP} ${TESTSRC}${FS}..${FS}nss${FS}db${FS}cert8.db ${TESTCLASSES}\n-    ${CHMOD} +w ${TESTCLASSES}${FS}cert8.db\n-\n-    ${CP} ${TESTSRC}${FS}..${FS}nss${FS}db${FS}key3.db ${TESTCLASSES}\n-    ${CHMOD} +w ${TESTCLASSES}${FS}key3.db\n-    USED_FILE_LIST=\"${TESTCLASSES}${FS}cert8.db ${TESTCLASSES}${FS}key3.db\"\n-elif [ ${token} = \"solaris\" ]\n-then\n-    # copy keystore into write-able location\n-    if [ -d ${TESTCLASSES}${FS}pkcs11_softtoken ]\n-    then\n-        echo \"Removing old pkcs11_keystore, creating new pkcs11_keystore\"\n-\n-        echo ${RM} ${TESTCLASSES}${FS}pkcs11_softtoken\n-        ${RM} ${TESTCLASSES}${FS}pkcs11_softtoken\n-    fi\n-    echo ${MKDIR} ${TESTCLASSES}${FS}pkcs11_softtoken${FS}private\n-    ${MKDIR} ${TESTCLASSES}${FS}pkcs11_softtoken${FS}private\n-\n-    echo ${MKDIR} ${TESTCLASSES}${FS}pkcs11_softtoken${FS}public\n-    ${MKDIR} ${TESTCLASSES}${FS}pkcs11_softtoken${FS}public\n-\n-    echo ${CP} ${TESTSRC}${FS}BasicData${FS}pkcs11_softtoken${FS}objstore_info \\\n-    ${TESTCLASSES}${FS}pkcs11_softtoken\n-    ${CP} ${TESTSRC}${FS}BasicData${FS}pkcs11_softtoken${FS}objstore_info \\\n-    ${TESTCLASSES}${FS}pkcs11_softtoken\n-\n-    echo ${CHMOD} +w ${TESTCLASSES}${FS}pkcs11_softtoken${FS}objstore_info\n-    ${CHMOD} 600 ${TESTCLASSES}${FS}pkcs11_softtoken${FS}objstore_info\n-    USED_FILE_LIST=\"${TESTCLASSES}${FS}pkcs11_softtoken\"\n-fi\n-\n-# run test\n-cd ${TESTSRC}\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} \\\n-        -DDIR=${TESTSRC}${FS}BasicData${FS} \\\n-        -classpath \\\n-        ${TESTCLASSES}${PS}${TESTCLASSES}${FS}..${PS}${TESTSRC}${FS}loader.jar${PS}${CPAPPEND} \\\n-        -DCUSTOM_DB_DIR=${TESTCLASSES} \\\n-        -DCUSTOM_P11_CONFIG=${TESTSRC}${FS}BasicData${FS}p11-${token}.txt \\\n-        -DNO_DEFAULT=true \\\n-        -DNO_DEIMOS=true \\\n-        -DTOKEN=${token} \\\n-        -Djava.security.debug=${DEBUG} \\\n-        SecretKeysBasic\n-\n-#\t-DCUSTOM_P11_CONFIG=${TESTSRC}${FS}BasicData${FS}p11-${token}.txt \\\n-\n-# save error status\n-if [ $? != 0 ]\n-then\n-    echo \"Test against \" ${token} \" Failed!\"\n-    STATUS=1\n-fi\n-\n-# clean up\n-${RM} ${USED_FILE_LIST}\n-\n-done\n-\n-# return\n-exit ${STATUS}\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/SecretKeysBasic.sh","additions":0,"deletions":172,"binary":false,"changes":172,"status":"deleted"},{"patch":"@@ -34,0 +34,4 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n@@ -71,0 +75,2 @@\n+    static final String TEST_CLASSES = System.getProperty(\"test.classes\", \".\");\n+\n@@ -906,0 +912,25 @@\n+    protected void setCommonSystemProps() {\n+        System.setProperty(\"java.security.debug\", \"true\");\n+        System.setProperty(\"NO_DEIMOS\", \"true\");\n+        System.setProperty(\"NO_DEFAULT\", \"true\");\n+        System.setProperty(\"CUSTOM_DB_DIR\", TEST_CLASSES);\n+    }\n+\n+    protected void copyNssCertKeyToClassesDir() throws IOException {\n+        Path dbPath = Path.of(BASE).getParent().resolve(\"nss\").resolve(\"db\");\n+        copyNssCertKeyToClassesDir(dbPath);\n+    }\n+\n+    protected void copyNssCertKeyToClassesDir(Path dbPath) throws IOException {\n+        Path destinationPath = Path.of(TEST_CLASSES);\n+        String keyDbFile = \"key3.db\";\n+        String certDbFile = \"cert8.db\";\n+\n+        Files.copy(dbPath.resolve(certDbFile),\n+                destinationPath.resolve(certDbFile),\n+                StandardCopyOption.REPLACE_EXISTING);\n+        Files.copy(dbPath.resolve(keyDbFile),\n+                destinationPath.resolve(keyDbFile),\n+                StandardCopyOption.REPLACE_EXISTING);\n+    }\n+\n","filename":"test\/jdk\/sun\/security\/pkcs11\/PKCS11Test.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,11 @@\n-import java.io.*;\n-import java.util.*;\n+\/* @test\n+ * @bug 5070773\n+ * @summary SunPKCS11 provider does not support spaces config's provider name\n+ * @library \/test\/lib ..\n+ * @run testng\/othervm ConfigQuotedString\n+ *\/\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.nio.file.Path;\n@@ -27,1 +36,0 @@\n-import javax.security.auth.callback.*;\n@@ -31,1 +39,8 @@\n-    public static void main(String[] args) throws Exception {\n+    @BeforeClass\n+    public void setUp() throws Exception {\n+        Path configPath = Path.of(BASE).resolve(\"ConfigQuotedString-nss.txt\");\n+        System.setProperty(\"CUSTOM_P11_CONFIG\", configPath.toString());\n+    }\n+\n+    @Test\n+    public void testQuotedString() throws Exception {\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/ConfigQuotedString.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1,126 +0,0 @@\n-#\n-# Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 5070773\n-# @summary SunPKCS11 provider does not support spaces config's provider name\n-# @run shell ConfigQuotedString.sh\n-\n-# set a few environment variables so that the shell-script can run stand-alone\n-# in the source directory\n-\n-# if running by hand on windows, change TESTSRC and TESTCLASSES to \".\"\n-if [ \"${TESTSRC}\" = \"\" ] ; then\n-    TESTSRC=`pwd`\n-fi\n-if [ \"${TESTCLASSES}\" = \"\" ] ; then\n-    TESTCLASSES=`pwd`\n-fi\n-\n-# if running by hand on windows, change this to appropriate value\n-if [ \"${TESTJAVA}\" = \"\" ] ; then\n-    TESTJAVA=\"\/net\/radiant\/export1\/charlie\/mustang\/build\/solaris-sparc\"\n-fi\n-if [ \"${COMPILEJAVA}\" = \"\" ]; then\n-    COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-echo TESTSRC=${TESTSRC}\n-echo TESTCLASSES=${TESTCLASSES}\n-echo TESTJAVA=${TESTJAVA}\n-echo COMPILEJAVA=${COMPILEJAVA}\n-echo CPAPPEND=${CPAPPEND}\n-echo \"\"\n-\n-# let java test exit if platform unsupported\n-\n-OS=`uname -s`\n-case \"$OS\" in\n-  SunOS )\n-    FS=\"\/\"\n-    PS=\":\"\n-    CP=\"${FS}bin${FS}cp\"\n-    CHMOD=\"${FS}bin${FS}chmod\"\n-    ;;\n-  Linux )\n-    FS=\"\/\"\n-    PS=\":\"\n-    CP=\"${FS}bin${FS}cp\"\n-    CHMOD=\"${FS}bin${FS}chmod\"\n-    ;;\n-  Darwin )\n-    FS=\"\/\"\n-    PS=\":\"\n-    CP=\"${FS}bin${FS}cp\"\n-    CHMOD=\"${FS}bin${FS}chmod\"\n-    ;;\n-  AIX )\n-    FS=\"\/\"\n-    PS=\":\"\n-    CP=\"${FS}bin${FS}cp\"\n-    CHMOD=\"${FS}bin${FS}chmod\"\n-    ;;\n-  Windows* )\n-    FS=\"\\\\\"\n-    PS=\";\"\n-    CP=\"cp\"\n-    CHMOD=\"chmod\"\n-    ;;\n-  CYGWIN* )\n-    FS=\"\/\"\n-    PS=\";\"\n-    CP=\"cp\"\n-    CHMOD=\"chmod\"\n-    #\n-    # javac does not like \/cygdrive produced by `pwd`\n-    #\n-    TESTSRC=`cygpath -d ${TESTSRC}`\n-    ;;\n-  * )\n-    echo \"Unrecognized system!\"\n-    exit 1;\n-    ;;\n-esac\n-\n-# compile test\n-\n-${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} \\\n-        -classpath ${TESTSRC}${FS}.. \\\n-        -d ${TESTCLASSES} \\\n-        ${TESTSRC}${FS}..${FS}..${FS}..${FS}..${FS}..${FS}lib${FS}jdk${FS}test${FS}lib${FS}artifacts${FS}*.java \\\n-        ${TESTSRC}${FS}ConfigQuotedString.java \\\n-        ${TESTSRC}${FS}..${FS}PKCS11Test.java\n-\n-# run test\n-\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} \\\n-        -classpath ${TESTCLASSES}${PS}${CPAPPEND} \\\n-        -DCUSTOM_P11_CONFIG=${TESTSRC}${FS}ConfigQuotedString-nss.txt \\\n-        -Dtest.src=${TESTSRC} \\\n-        -Dtest.classes=${TESTCLASSES} \\\n-        ConfigQuotedString\n-\n-# save error status\n-status=$?\n-\n-# return\n-exit $status\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/ConfigQuotedString.sh","additions":0,"deletions":126,"binary":false,"changes":126,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,10 @@\n+\/* @test\n+ * @bug 4850423\n+ * @summary login facilities for hardware tokens\n+ * @library \/test\/lib ..\n+ * @run testng\/othervm Login\n+ *\/\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n@@ -25,1 +35,1 @@\n-import java.util.*;\n+import java.nio.file.Path;\n@@ -37,1 +47,11 @@\n-    public static void main(String[] args) throws Exception {\n+    @BeforeClass\n+    public void setUp() throws Exception {\n+        copyNssCertKeyToClassesDir();\n+        setCommonSystemProps();\n+        System.setProperty(\"CUSTOM_P11_CONFIG\",\n+                Path.of(BASE).resolve(\"Login-nss.txt\").toString());\n+    }\n+\n+    @Test\n+    public void testLogin() throws Exception {\n+        String[] args = new String[]{ \"sm\", \"Login.policy\"};\n@@ -48,1 +68,1 @@\n-        if (ks.getProvider() instanceof java.security.AuthProvider) {\n+        if (ks.getProvider() instanceof AuthProvider) {\n@@ -55,1 +75,2 @@\n-        AuthProvider ap = (AuthProvider)ks.getProvider();\n+        AuthProvider ap = (AuthProvider) ks.getProvider();\n+\n@@ -113,1 +134,1 @@\n-            PasswordCallback pc = (PasswordCallback)callbacks[0];\n+            PasswordCallback pc = (PasswordCallback) callbacks[0];\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/Login.java","additions":27,"deletions":6,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -1,139 +0,0 @@\n-#\n-# Copyright (c) 2004, 2016, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 4850423\n-# @summary login facilities for hardware tokens\n-#\n-# @run shell Login.sh\n-\n-# set a few environment variables so that the shell-script can run stand-alone\n-# in the source directory\n-\n-# if running by hand on windows, change TESTSRC and TESTCLASSES to \".\"\n-if [ \"${TESTSRC}\" = \"\" ] ; then\n-    TESTSRC=`pwd`\n-fi\n-if [ \"${TESTCLASSES}\" = \"\" ] ; then\n-    TESTCLASSES=`pwd`\n-fi\n-\n-# if running by hand on windows, change this to appropriate value\n-if [ \"${TESTJAVA}\" = \"\" ] ; then\n-    TESTJAVA=\"\/net\/radiant\/export1\/charlie\/mustang\/build\/solaris-sparc\"\n-fi\n-if [ \"${COMPILEJAVA}\" = \"\" ]; then\n-    COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-echo TESTSRC=${TESTSRC}\n-echo TESTCLASSES=${TESTCLASSES}\n-echo TESTJAVA=${TESTJAVA}\n-echo COMPILEJAVA=${COMPILEJAVA}\n-echo CPAPPEND=${CPAPPEND}\n-echo \"\"\n-\n-# let java test exit if platform unsupported\n-\n-OS=`uname -s`\n-case \"$OS\" in\n-  SunOS )\n-    FS=\"\/\"\n-    PS=\":\"\n-    CP=\"${FS}bin${FS}cp\"\n-    CHMOD=\"${FS}bin${FS}chmod\"\n-    ;;\n-  Linux )\n-    FS=\"\/\"\n-    PS=\":\"\n-    CP=\"${FS}bin${FS}cp\"\n-    CHMOD=\"${FS}bin${FS}chmod\"\n-    ;;\n-  Darwin )\n-    FS=\"\/\"\n-    PS=\":\"\n-    CP=\"${FS}bin${FS}cp\"\n-    CHMOD=\"${FS}bin${FS}chmod\"\n-    ;;\n-  AIX )\n-    FS=\"\/\"\n-    PS=\":\"\n-    CP=\"${FS}bin${FS}cp\"\n-    CHMOD=\"${FS}bin${FS}chmod\"\n-    ;;\n-  Windows* )\n-    FS=\"\\\\\"\n-    PS=\";\"\n-    CP=\"cp\"\n-    CHMOD=\"chmod\"\n-    ;;\n-  CYGWIN* )\n-    FS=\"\/\"\n-    PS=\";\"\n-    CP=\"cp\"\n-    CHMOD=\"chmod\"\n-    #\n-    # javac does not like \/cygdrive produced by `pwd`\n-    #\n-    TESTSRC=`cygpath -d ${TESTSRC}`\n-    ;;\n-  * )\n-    echo \"Unrecognized system!\"\n-    exit 1;\n-    ;;\n-esac\n-\n-# first make cert\/key DBs writable\n-\n-${CP} ${TESTSRC}${FS}..${FS}nss${FS}db${FS}cert8.db ${TESTCLASSES}\n-${CHMOD} +w ${TESTCLASSES}${FS}cert8.db\n-\n-${CP} ${TESTSRC}${FS}..${FS}nss${FS}db${FS}key3.db ${TESTCLASSES}\n-${CHMOD} +w ${TESTCLASSES}${FS}key3.db\n-\n-# compile test\n-\n-${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} \\\n-        -classpath ${TESTSRC}${FS}.. \\\n-        -d ${TESTCLASSES} \\\n-        ${TESTSRC}${FS}..${FS}..${FS}..${FS}..${FS}..${FS}lib${FS}jdk${FS}test${FS}lib${FS}artifacts${FS}*.java \\\n-        ${TESTSRC}${FS}Login.java \\\n-        ${TESTSRC}${FS}..${FS}PKCS11Test.java\n-\n-# run test\n-\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} \\\n-        -classpath ${TESTCLASSES}${PS}${CPAPPEND} \\\n-        -DCUSTOM_DB_DIR=${TESTCLASSES} \\\n-        -DCUSTOM_P11_CONFIG=${TESTSRC}${FS}Login-nss.txt \\\n-        -DNO_DEFAULT=true \\\n-        -DNO_DEIMOS=true \\\n-        -Dtest.src=${TESTSRC} \\\n-        -Dtest.classes=${TESTCLASSES} \\\n-        -Djava.security.debug=${DEBUG} \\\n-        Login sm Login.policy\n-\n-# save error status\n-status=$?\n-\n-# return\n-exit $status\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/Login.sh","additions":0,"deletions":139,"binary":false,"changes":139,"status":"deleted"},{"patch":"@@ -0,0 +1,578 @@\n+\/*\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8076190 8242151 8153005 8266182\n+ * @summary This is java keytool <-> openssl interop test. This test generates\n+ *          some openssl keystores on the fly, java operates on it and\n+ *          vice versa.\n+ *\n+ *          Note: This test executes some openssl command, so need to set\n+ *          openssl path using system property \"test.openssl.path\" or it should\n+ *          be available in \/usr\/bin or \/usr\/local\/bin\n+ *          Required OpenSSL version : OpenSSL 1.1.*\n+ *\n+ * @modules java.base\/sun.security.pkcs\n+ *          java.base\/sun.security.x509\n+ *          java.base\/sun.security.util\n+ * @library \/test\/lib\n+ * @library \/sun\/security\/pkcs11\/\n+ * @run main\/othervm\/timeout=600 KeytoolOpensslInteropTest\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.security.OpensslArtifactFetcher;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.KeyStore;\n+import java.util.Base64;\n+import java.util.Objects;\n+\n+import static jdk.test.lib.security.DerUtils.*;\n+import static jdk.test.lib.KnownOIDs.*;\n+import static sun.security.x509.AlgorithmId.*;\n+import static sun.security.pkcs.ContentInfo.*;\n+\n+public class KeytoolOpensslInteropTest {\n+\n+    public static void main(String[] args) throws Throwable {\n+        String opensslPath = OpensslArtifactFetcher.getOpenssl1dot1dotStar();\n+        if (opensslPath != null) {\n+            \/\/ if preferred version of openssl is available perform all\n+            \/\/ keytool <-> openssl interop tests\n+            generateInitialKeystores(opensslPath);\n+            testWithJavaCommands();\n+            testWithOpensslCommands(opensslPath);\n+        } else {\n+            \/\/ since preferred version of openssl is not available skip all\n+            \/\/ openssl command dependent tests with a warning\n+            System.out.println(\"\\n\\u001B[31mWarning: Can't find openssl \"\n+                    + \"(version 1.1.*) binary on this machine, please install\"\n+                    + \" and set openssl path with property \"\n+                    + \"'test.openssl.path'. Now running only half portion of \"\n+                    + \"the test, skipping all tests which depends on openssl \"\n+                    + \"commands.\\u001B[0m\\n\");\n+            \/\/ De-BASE64 textual files in .\/params to `pwd`\n+            try (DirectoryStream<Path> stream = Files.newDirectoryStream(\n+                    Path.of(System.getProperty(\"test.src\"), \"params\"),\n+                    p -> !p.getFileName().toString().equals(\"README\"))) {\n+                stream.forEach(p -> {\n+                    try (InputStream is = Files.newInputStream(p);\n+                        OutputStream os = Files.newOutputStream(\n+                                p.getFileName())) {\n+                        Base64.getMimeDecoder().wrap(is).transferTo(os);\n+                    } catch (IOException e) {\n+                        throw new UncheckedIOException(e);\n+                    }\n+                });\n+            }\n+            testWithJavaCommands();\n+        }\n+    }\n+\n+    private static void generateInitialKeystores(String opensslPath)\n+            throws Throwable {\n+        keytool(\"-keystore ks -keyalg ec -genkeypair -storepass\"\n+                + \" changeit -alias a -dname CN=A\").shouldHaveExitValue(0);\n+\n+        ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-in\", \"ks\",\n+                \"-nodes\", \"-out\", \"kandc\", \"-passin\", \"pass:changeit\")\n+                .shouldHaveExitValue(0);\n+\n+        ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-export\", \"-in\",\n+                \"kandc\", \"-out\", \"os2\", \"-name\", \"a\", \"-passout\",\n+                \"pass:changeit\", \"-certpbe\", \"NONE\", \"-nomac\")\n+                .shouldHaveExitValue(0);\n+\n+        ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-export\", \"-in\",\n+                \"kandc\", \"-out\", \"os3\", \"-name\", \"a\", \"-passout\",\n+                \"pass:changeit\", \"-certpbe\", \"NONE\")\n+                .shouldHaveExitValue(0);\n+\n+        ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-export\", \"-in\",\n+                \"kandc\", \"-out\", \"os4\", \"-name\", \"a\", \"-passout\",\n+                \"pass:changeit\", \"-certpbe\", \"PBE-SHA1-RC4-128\", \"-keypbe\",\n+                \"PBE-SHA1-RC4-128\", \"-macalg\", \"SHA224\")\n+                .shouldHaveExitValue(0);\n+\n+        ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-export\", \"-in\",\n+                \"kandc\", \"-out\", \"os5\", \"-name\", \"a\", \"-passout\",\n+                \"pass:changeit\", \"-certpbe\", \"AES-256-CBC\", \"-keypbe\",\n+                \"AES-256-CBC\", \"-macalg\", \"SHA512\")\n+                .shouldHaveExitValue(0);\n+    }\n+\n+    private static void testWithJavaCommands() throws Throwable {\n+        byte[] data;\n+\n+        \/\/ openssl -> keytool interop check\n+        \/\/ os2. no cert pbe, no mac.\n+        check(\"os2\", \"a\", null, \"changeit\", true, true, true);\n+        check(\"os2\", \"a\", \"changeit\", \"changeit\", true, true, true);\n+        \/\/ You can even load it with a wrong storepass, controversial\n+        check(\"os2\", \"a\", \"wrongpass\", \"changeit\", true, true, true);\n+\n+        \/\/ os3. no cert pbe, has mac. just like JKS\n+        check(\"os3\", \"a\", null, \"changeit\", true, true, true);\n+        check(\"os3\", \"a\", \"changeit\", \"changeit\", true, true, true);\n+        \/\/ Cannot load with a wrong storepass, same as JKS\n+        check(\"os3\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n+\n+        \/\/ os4. non default algs\n+        check(\"os4\", \"a\", \"changeit\", \"changeit\", true, true, true);\n+        check(\"os4\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n+        \/\/ no storepass no cert\n+        check(\"os4\", \"a\", null, \"changeit\", true, false, true);\n+\n+        \/\/ os5. strong non default algs\n+        check(\"os5\", \"a\", \"changeit\", \"changeit\", true, true, true);\n+        check(\"os5\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n+        \/\/ no storepass no cert\n+        check(\"os5\", \"a\", null, \"changeit\", true, false, true);\n+\n+        \/\/ keytool\n+\n+        \/\/ Current default pkcs12 setting\n+        keytool(\"-importkeystore -srckeystore ks -srcstorepass changeit \"\n+                + \"-destkeystore ksnormal -deststorepass changeit\");\n+        data = Files.readAllBytes(Path.of(\"ksnormal\"));\n+        checkInt(data, \"22\", 100000); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_1); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        check(\"ksnormal\", \"a\", \"changeit\", \"changeit\", true, true, true);\n+        check(\"ksnormal\", \"a\", null, \"changeit\", true, false, true);\n+        check(\"ksnormal\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n+\n+        \/\/ Import it into a new keystore with legacy algorithms\n+        keytool(\"-importkeystore -srckeystore ksnormal -srcstorepass changeit \"\n+               + \"-destkeystore kslegacyimp -deststorepass changeit \"\n+                + \"-J-Dkeystore.pkcs12.legacy\");\n+        data = Files.readAllBytes(Path.of(\"kslegacyimp\"));\n+        checkInt(data, \"22\", 100000); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_1); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndDESede); \/\/ key alg\n+        checkInt(data, \"110c010c010011\", 50000); \/\/ key ic\n+        checkAlg(data, \"110c110110\", PBEWithSHA1AndRC2_40); \/\/ cert alg\n+        checkInt(data, \"110c1101111\", 50000); \/\/ cert ic\n+\n+        \/\/ Add a new entry with password-less settings, still has a storepass\n+        keytool(\"-keystore ksnormal -genkeypair -storepass changeit -alias b -dname CN=b \"\n+                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n+                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\");\n+        data = Files.readAllBytes(Path.of(\"ksnormal\"));\n+        checkInt(data, \"22\", 100000); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_1); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n+        checkAlg(data, \"110c010c11000\", PBES2); \/\/ new key alg\n+        checkInt(data, \"110c010c11001011\", 10000); \/\/ new key ic\n+        checkAlg(data, \"110c10\", ENCRYPTED_DATA_OID);\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        check(\"ksnormal\", \"b\", null, \"changeit\", true, false, true);\n+        check(\"ksnormal\", \"b\", \"changeit\", \"changeit\", true, true, true);\n+\n+        \/\/ Different keypbe alg, no cert pbe and no mac\n+        keytool(\"-importkeystore -srckeystore ks -srcstorepass changeit \"\n+                + \"-destkeystore ksnopass -deststorepass changeit \"\n+                + \"-J-Dkeystore.pkcs12.keyProtectionAlgorithm=PBEWithSHA1AndRC4_128 \"\n+                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n+                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\");\n+        data = Files.readAllBytes(Path.of(\"ksnopass\"));\n+        shouldNotExist(data, \"2\"); \/\/ no Mac\n+        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n+        checkInt(data, \"110c010c010011\", 10000);\n+        checkAlg(data, \"110c10\", DATA_OID);\n+        check(\"ksnopass\", \"a\", null, \"changeit\", true, true, true);\n+        check(\"ksnopass\", \"a\", \"changeit\", \"changeit\", true, true, true);\n+        check(\"ksnopass\", \"a\", \"wrongpass\", \"changeit\", true, true, true);\n+\n+        \/\/ Add a new entry with normal settings, still password-less\n+        keytool(\"-keystore ksnopass -genkeypair -storepass changeit -alias b -dname CN=B\");\n+        data = Files.readAllBytes(Path.of(\"ksnopass\"));\n+        shouldNotExist(data, \"2\"); \/\/ no Mac\n+        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n+        checkInt(data, \"110c010c010011\", 10000);\n+        checkAlg(data, \"110c010c11000\", PBES2);\n+        checkInt(data, \"110c010c11001011\", 10000);\n+        checkAlg(data, \"110c10\", DATA_OID);\n+        check(\"ksnopass\", \"a\", null, \"changeit\", true, true, true);\n+        check(\"ksnopass\", \"b\", null, \"changeit\", true, true, true);\n+\n+        keytool(\"-importkeystore -srckeystore ks -srcstorepass changeit \"\n+                + \"-destkeystore ksnewic -deststorepass changeit \"\n+                + \"-J-Dkeystore.pkcs12.macIterationCount=5555 \"\n+                + \"-J-Dkeystore.pkcs12.certPbeIterationCount=6666 \"\n+                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=7777\");\n+        data = Files.readAllBytes(Path.of(\"ksnewic\"));\n+        checkInt(data, \"22\", 5555); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_1); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n+\n+        \/\/ keypbe alg cannot be NONE\n+        keytool(\"-keystore ksnewic -genkeypair -storepass changeit -alias b -dname CN=B \"\n+                + \"-J-Dkeystore.pkcs12.keyProtectionAlgorithm=NONE\")\n+                .shouldContain(\"NONE AlgorithmParameters not available\")\n+                .shouldHaveExitValue(1);\n+\n+        \/\/ new entry new keypbe alg (and default ic), else unchanged\n+        keytool(\"-keystore ksnewic -genkeypair -storepass changeit -alias b -dname CN=B \"\n+                + \"-J-Dkeystore.pkcs12.keyProtectionAlgorithm=PBEWithSHA1AndRC4_128\");\n+        data = Files.readAllBytes(Path.of(\"ksnewic\"));\n+        checkInt(data, \"22\", 5555); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_1); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n+        checkAlg(data, \"110c010c11000\", PBEWithSHA1AndRC4_128); \/\/ new key alg\n+        checkInt(data, \"110c010c110011\", 10000); \/\/ new key ic\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n+\n+        \/\/ Check KeyStore loading multiple keystores\n+        KeyStore ks = KeyStore.getInstance(\"pkcs12\");\n+        try (FileInputStream fis = new FileInputStream(\"ksnormal\");\n+                FileOutputStream fos = new FileOutputStream(\"ksnormaldup\")) {\n+            ks.load(fis, \"changeit\".toCharArray());\n+            ks.store(fos, \"changeit\".toCharArray());\n+        }\n+        data = Files.readAllBytes(Path.of(\"ksnormaldup\"));\n+        checkInt(data, \"22\", 100000); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_1); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n+        checkAlg(data, \"110c010c11000\", PBES2); \/\/ new key alg\n+        checkInt(data, \"110c010c11001011\", 10000); \/\/ new key ic\n+        checkAlg(data, \"110c10\", ENCRYPTED_DATA_OID);\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        checkInt(data, \"110c110111011\", 10000); \/\/ cert ic\n+\n+        try (FileInputStream fis = new FileInputStream(\"ksnopass\");\n+             FileOutputStream fos = new FileOutputStream(\"ksnopassdup\")) {\n+            ks.load(fis, \"changeit\".toCharArray());\n+            ks.store(fos, \"changeit\".toCharArray());\n+        }\n+        data = Files.readAllBytes(Path.of(\"ksnopassdup\"));\n+        shouldNotExist(data, \"2\"); \/\/ no Mac\n+        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n+        checkInt(data, \"110c010c010011\", 10000);\n+        checkAlg(data, \"110c010c11000\", PBES2);\n+        checkInt(data, \"110c010c11001011\", 10000);\n+        checkAlg(data, \"110c10\", DATA_OID);\n+\n+        try (FileInputStream fis = new FileInputStream(\"ksnewic\");\n+             FileOutputStream fos = new FileOutputStream(\"ksnewicdup\")) {\n+            ks.load(fis, \"changeit\".toCharArray());\n+            ks.store(fos, \"changeit\".toCharArray());\n+        }\n+        data = Files.readAllBytes(Path.of(\"ksnewicdup\"));\n+        checkInt(data, \"22\", 5555); \/\/ Mac ic\n+        checkAlg(data, \"2000\", SHA_1); \/\/ Mac alg\n+        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n+        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n+        checkAlg(data, \"110c010c11000\", PBEWithSHA1AndRC4_128); \/\/ new key alg\n+        checkInt(data, \"110c010c110011\", 10000); \/\/ new key ic\n+        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n+        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n+\n+        \/\/ Check keytool behavior\n+\n+        \/\/ ksnormal has password\n+\n+        keytool(\"-list -keystore ksnormal\")\n+                .shouldContain(\"WARNING WARNING WARNING\")\n+                .shouldContain(\"Certificate chain length: 0\");\n+\n+        SecurityTools.setResponse(\"changeit\");\n+        keytool(\"-list -keystore ksnormal\")\n+                .shouldNotContain(\"WARNING WARNING WARNING\")\n+                .shouldContain(\"Certificate fingerprint\");\n+\n+        \/\/ ksnopass is password-less\n+\n+        keytool(\"-list -keystore ksnopass\")\n+                .shouldNotContain(\"WARNING WARNING WARNING\")\n+                .shouldContain(\"Certificate fingerprint\");\n+\n+        \/\/ -certreq prompts for keypass\n+        SecurityTools.setResponse(\"changeit\");\n+        keytool(\"-certreq -alias a -keystore ksnopass\")\n+                .shouldContain(\"Enter key password for <a>\")\n+                .shouldContain(\"-----BEGIN NEW CERTIFICATE REQUEST-----\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ -certreq -storepass works fine\n+        keytool(\"-certreq -alias a -keystore ksnopass -storepass changeit\")\n+                .shouldNotContain(\"Enter key password for <a>\")\n+                .shouldContain(\"-----BEGIN NEW CERTIFICATE REQUEST-----\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ -certreq -keypass also works fine\n+        keytool(\"-certreq -alias a -keystore ksnopass -keypass changeit\")\n+                .shouldNotContain(\"Enter key password for <a>\")\n+                .shouldContain(\"-----BEGIN NEW CERTIFICATE REQUEST-----\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ -importkeystore prompts for srckeypass\n+        SecurityTools.setResponse(\"changeit\", \"changeit\");\n+        keytool(\"-importkeystore -srckeystore ksnopass \"\n+                + \"-destkeystore jks3 -deststorepass changeit\")\n+                .shouldContain(\"Enter key password for <a>\")\n+                .shouldContain(\"Enter key password for <b>\")\n+                .shouldContain(\"2 entries successfully imported\");\n+\n+        \/\/ ksnopass2 is ksnopass + 2 cert entries\n+\n+        ks = KeyStore.getInstance(new File(\"ksnopass\"), (char[])null);\n+        ks.setCertificateEntry(\"aa\", ks.getCertificate(\"a\"));\n+        ks.setCertificateEntry(\"bb\", ks.getCertificate(\"b\"));\n+        try (FileOutputStream fos = new FileOutputStream(\"ksnopass2\")) {\n+            ks.store(fos, null);\n+        }\n+\n+        \/\/ -importkeystore prompts for srckeypass for private keys\n+        \/\/ and no prompt for certs\n+        SecurityTools.setResponse(\"changeit\", \"changeit\");\n+        keytool(\"-importkeystore -srckeystore ksnopass2 \"\n+                + \"-destkeystore jks5 -deststorepass changeit\")\n+                .shouldContain(\"Enter key password for <a>\")\n+                .shouldContain(\"Enter key password for <b>\")\n+                .shouldNotContain(\"Enter key password for <aa>\")\n+                .shouldNotContain(\"Enter key password for <bb>\")\n+                .shouldContain(\"4 entries successfully imported\");\n+\n+        \/\/ ksonlycert has only cert entries\n+\n+        ks.deleteEntry(\"a\");\n+        ks.deleteEntry(\"b\");\n+        try (FileOutputStream fos = new FileOutputStream(\"ksonlycert\")) {\n+            ks.store(fos, null);\n+        }\n+\n+        \/\/ -importkeystore does not prompt at all\n+        keytool(\"-importkeystore -srckeystore ksonlycert \"\n+                + \"-destkeystore jks6 -deststorepass changeit\")\n+                .shouldNotContain(\"Enter key password for <aa>\")\n+                .shouldNotContain(\"Enter key password for <bb>\")\n+                .shouldContain(\"2 entries successfully imported\");\n+\n+        \/\/ create a new password-less keystore\n+        keytool(\"-keystore ksnopass -exportcert -alias a -file a.cert -rfc\");\n+\n+        \/\/ Normally storepass is prompted for\n+        keytool(\"-keystore kscert1 -importcert -alias a -file a.cert -noprompt\")\n+                .shouldContain(\"Enter keystore password:\");\n+        keytool(\"-keystore kscert2 -importcert -alias a -file a.cert -noprompt \"\n+                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE\")\n+                .shouldContain(\"Enter keystore password:\");\n+        keytool(\"-keystore kscert3 -importcert -alias a -file a.cert -noprompt \"\n+                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\")\n+                .shouldContain(\"Enter keystore password:\");\n+        \/\/ ... but not if it's password-less\n+        keytool(\"-keystore kscert4 -importcert -alias a -file a.cert -noprompt \"\n+                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n+                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\")\n+                .shouldNotContain(\"Enter keystore password:\");\n+\n+        \/\/ still prompt for keypass for genkeypair and certreq\n+        SecurityTools.setResponse(\"changeit\", \"changeit\");\n+        keytool(\"-keystore ksnopassnew -genkeypair -alias a -dname CN=A \"\n+                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n+                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\")\n+                .shouldNotContain(\"Enter keystore password:\")\n+                .shouldContain(\"Enter key password for <a>\");\n+        keytool(\"-keystore ksnopassnew -certreq -alias a\")\n+                .shouldNotContain(\"Enter keystore password:\")\n+                .shouldContain(\"Enter key password for <a>\");\n+        keytool(\"-keystore ksnopassnew -list -v -alias a\")\n+                .shouldNotContain(\"Enter keystore password:\")\n+                .shouldNotContain(\"Enter key password for <a>\");\n+\n+        \/\/ params only read on demand\n+\n+        \/\/ keyPbeIterationCount is used by -genkeypair\n+        keytool(\"-keystore ksgenbadkeyic -genkeypair -alias a -dname CN=A \"\n+                + \"-storepass changeit \"\n+                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=abc\")\n+                .shouldContain(\"keyPbeIterationCount is not a number: abc\")\n+                .shouldHaveExitValue(1);\n+\n+        keytool(\"-keystore ksnopassnew -exportcert -alias a -file a.cert\");\n+\n+        \/\/ but not used by -importcert\n+        keytool(\"-keystore ksimpbadkeyic -importcert -alias a -file a.cert \"\n+                + \"-noprompt -storepass changeit \"\n+                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=abc\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ None is used by -list\n+        keytool(\"-keystore ksnormal -storepass changeit -list \"\n+                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=abc \"\n+                + \"-J-Dkeystore.pkcs12.certPbeIterationCount=abc \"\n+                + \"-J-Dkeystore.pkcs12.macIterationCount=abc\")\n+                .shouldHaveExitValue(0);\n+    }\n+\n+    private static void testWithOpensslCommands(String opensslPath)\n+            throws Throwable {\n+\n+        OutputAnalyzer output1 = ProcessTools.executeCommand(opensslPath,\n+                \"pkcs12\", \"-in\", \"ksnormal\", \"-passin\", \"pass:changeit\",\n+                \"-info\", \"-nokeys\", \"-nocerts\");\n+        output1.shouldHaveExitValue(0)\n+            .shouldContain(\"MAC: sha1, Iteration 100000\")\n+            .shouldContain(\"Shrouded Keybag: PBES2, PBKDF2, AES-256-CBC,\"\n+                    + \" Iteration 10000, PRF hmacWithSHA256\")\n+            .shouldContain(\"PKCS7 Encrypted data: PBES2, PBKDF2, AES-256-CBC,\"\n+                    + \" Iteration 10000, PRF hmacWithSHA256\");\n+\n+        OutputAnalyzer output2 = ProcessTools.executeCommand(opensslPath,\n+                \"pkcs12\", \"-in\", \"ksnormaldup\", \"-passin\", \"pass:changeit\",\n+                \"-info\", \"-nokeys\", \"-nocerts\");\n+        output2.shouldHaveExitValue(0);\n+        if(!output1.getStderr().equals(output2.getStderr())) {\n+            throw new RuntimeException(\"Duplicate pkcs12 keystores\"\n+                    + \" ksnormal & ksnormaldup show different info\");\n+        }\n+\n+        output1 = ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-in\",\n+                \"ksnopass\", \"-passin\", \"pass:changeit\", \"-info\", \"-nokeys\",\n+                \"-nocerts\");\n+        output1.shouldNotHaveExitValue(0);\n+\n+        output1 = ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-in\",\n+                \"ksnopass\", \"-passin\", \"pass:changeit\", \"-info\", \"-nokeys\",\n+                \"-nocerts\", \"-nomacver\");\n+        output1.shouldHaveExitValue(0)\n+            .shouldNotContain(\"PKCS7 Encrypted data:\")\n+            .shouldContain(\"Shrouded Keybag: PBES2, PBKDF2, AES-256-CBC,\"\n+                    + \" Iteration 10000, PRF hmacWithSHA256\")\n+            .shouldContain(\"Shrouded Keybag: pbeWithSHA1And128BitRC4,\"\n+                    + \" Iteration 10000\");\n+\n+        output2 = ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-in\",\n+                \"ksnopassdup\", \"-passin\", \"pass:changeit\", \"-info\", \"-nokeys\",\n+                \"-nocerts\", \"-nomacver\");\n+        output2.shouldHaveExitValue(0);\n+        if(!output1.getStderr().equals(output2.getStderr())) {\n+            throw new RuntimeException(\"Duplicate pkcs12 keystores\"\n+                    + \" ksnopass & ksnopassdup show different info\");\n+        }\n+\n+        output1 = ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-in\",\n+                \"ksnewic\", \"-passin\", \"pass:changeit\", \"-info\", \"-nokeys\",\n+                \"-nocerts\");\n+        output1.shouldHaveExitValue(0)\n+            .shouldContain(\"MAC: sha1, Iteration 5555\")\n+            .shouldContain(\"Shrouded Keybag: PBES2, PBKDF2, AES-256-CBC,\"\n+                    + \" Iteration 7777, PRF hmacWithSHA256\")\n+            .shouldContain(\"Shrouded Keybag: pbeWithSHA1And128BitRC4,\"\n+                    + \" Iteration 10000\")\n+            .shouldContain(\"PKCS7 Encrypted data: PBES2, PBKDF2, AES-256-CBC,\"\n+                    + \" Iteration 6666, PRF hmacWithSHA256\");\n+\n+        output2 = ProcessTools.executeCommand(opensslPath, \"pkcs12\", \"-in\",\n+                \"ksnewicdup\", \"-passin\", \"pass:changeit\", \"-info\", \"-nokeys\",\n+                \"-nocerts\");\n+        output2.shouldHaveExitValue(0);\n+        if(!output1.getStderr().equals(output2.getStderr())) {\n+            throw new RuntimeException(\"Duplicate pkcs12 keystores\"\n+                    + \" ksnewic & ksnewicdup show different info\");\n+        }\n+    }\n+\n+    \/**\n+     * Check keystore loading and key\/cert reading.\n+     *\n+     * @param keystore the file name of keystore\n+     * @param alias the key\/cert to read\n+     * @param storePass store pass to try out, can be null\n+     * @param keypass key pass to try, can not be null\n+     * @param expectedLoad expected result of keystore loading, true if non\n+     *                     null, false if null, exception class if exception\n+     * @param expectedCert expected result of cert reading\n+     * @param expectedKey expected result of key reading\n+     *\/\n+    private static void check(\n+            String keystore,\n+            String alias,\n+            String storePass,\n+            String keypass,\n+            Object expectedLoad,\n+            Object expectedCert,\n+            Object expectedKey) {\n+        KeyStore ks = null;\n+        Object actualLoad, actualCert, actualKey;\n+        String label = keystore + \"-\" + alias + \"-\" + storePass + \"-\" + keypass;\n+        try {\n+            ks = KeyStore.getInstance(new File(keystore),\n+                    storePass == null ? null : storePass.toCharArray());\n+            actualLoad = ks != null;\n+        } catch (Exception e) {\n+            e.printStackTrace(System.out);\n+            actualLoad = e.getClass();\n+        }\n+        Asserts.assertEQ(expectedLoad, actualLoad, label + \"-load\");\n+\n+        \/\/ If not loaded correctly, skip cert\/key reading\n+        if (!Objects.equals(actualLoad, true)) {\n+            return;\n+        }\n+\n+        try {\n+            actualCert = (ks.getCertificate(alias) != null);\n+        } catch (Exception e) {\n+            e.printStackTrace(System.out);\n+            actualCert = e.getClass();\n+        }\n+        Asserts.assertEQ(expectedCert, actualCert, label + \"-cert\");\n+\n+        try {\n+            actualKey = (ks.getKey(alias, keypass.toCharArray()) != null);\n+        } catch (Exception e) {\n+            e.printStackTrace(System.out);\n+            actualKey = e.getClass();\n+        }\n+        Asserts.assertEQ(expectedKey, actualKey, label + \"-key\");\n+    }\n+\n+    private static OutputAnalyzer keytool(String s) throws Throwable {\n+        return SecurityTools.keytool(s);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs12\/KeytoolOpensslInteropTest.java","additions":578,"deletions":0,"binary":false,"changes":578,"status":"added"},{"patch":"@@ -1,447 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8076190 8153005\n- * @library \/test\/lib\n- * @modules java.base\/sun.security.pkcs\n- *          java.base\/sun.security.x509\n- *          java.base\/sun.security.util\n- * @summary Customizing the generation of a PKCS12 keystore\n- *\/\n-\n-import jdk.test.lib.Asserts;\n-import jdk.test.lib.SecurityTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.io.UncheckedIOException;\n-import java.nio.file.DirectoryStream;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.security.KeyStore;\n-import java.util.Base64;\n-import java.util.Objects;\n-\n-import static jdk.test.lib.security.DerUtils.*;\n-import static jdk.test.lib.KnownOIDs.*;\n-import static sun.security.x509.AlgorithmId.*;\n-import static sun.security.pkcs.ContentInfo.*;\n-\n-public class ParamsTest  {\n-\n-    public static void main(String[] args) throws Throwable {\n-\n-        \/\/ De-BASE64 textual files in .\/params to `pwd`\n-        try (DirectoryStream<Path> stream = Files.newDirectoryStream(\n-                Path.of(System.getProperty(\"test.src\"), \"params\"),\n-                p -> !p.getFileName().toString().equals(\"README\"))) {\n-            stream.forEach(p -> {\n-                try (InputStream is = Files.newInputStream(p);\n-                     OutputStream os = Files.newOutputStream(p.getFileName())) {\n-                    Base64.getMimeDecoder().wrap(is).transferTo(os);\n-                } catch (IOException e) {\n-                    throw new UncheckedIOException(e);\n-                }\n-            });\n-        }\n-\n-        byte[] data;\n-\n-        \/\/ openssl -> keytool interop check\n-\n-        \/\/ os2. no cert pbe, no mac.\n-        check(\"os2\", \"a\", null, \"changeit\", true, true, true);\n-        check(\"os2\", \"a\", \"changeit\", \"changeit\", true, true, true);\n-        \/\/ You can even load it with a wrong storepass, controversial\n-        check(\"os2\", \"a\", \"wrongpass\", \"changeit\", true, true, true);\n-\n-        \/\/ os3. no cert pbe, has mac. just like JKS\n-        check(\"os3\", \"a\", null, \"changeit\", true, true, true);\n-        check(\"os3\", \"a\", \"changeit\", \"changeit\", true, true, true);\n-        \/\/ Cannot load with a wrong storepass, same as JKS\n-        check(\"os3\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n-\n-        \/\/ os4. non default algs\n-        check(\"os4\", \"a\", \"changeit\", \"changeit\", true, true, true);\n-        check(\"os4\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n-        \/\/ no storepass no cert\n-        check(\"os4\", \"a\", null, \"changeit\", true, false, true);\n-\n-        \/\/ os5. strong non default algs\n-        check(\"os5\", \"a\", \"changeit\", \"changeit\", true, true, true);\n-        check(\"os5\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n-        \/\/ no storepass no cert\n-        check(\"os5\", \"a\", null, \"changeit\", true, false, true);\n-\n-        \/\/ keytool\n-\n-        \/\/ Current default pkcs12 setting\n-        keytool(\"-importkeystore -srckeystore ks -srcstorepass changeit \"\n-                + \"-destkeystore ksnormal -deststorepass changeit\");\n-        data = Files.readAllBytes(Path.of(\"ksnormal\"));\n-        checkInt(data, \"22\", 100000); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_1); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n-        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n-        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n-        check(\"ksnormal\", \"a\", \"changeit\", \"changeit\", true, true, true);\n-        check(\"ksnormal\", \"a\", null, \"changeit\", true, false, true);\n-        check(\"ksnormal\", \"a\", \"wrongpass\", \"-\", IOException.class, \"-\", \"-\");\n-\n-        \/\/ Import it into a new keystore with legacy algorithms\n-        keytool(\"-importkeystore -srckeystore ksnormal -srcstorepass changeit \"\n-               + \"-destkeystore kslegacyimp -deststorepass changeit \"\n-                + \"-J-Dkeystore.pkcs12.legacy\");\n-        data = Files.readAllBytes(Path.of(\"kslegacyimp\"));\n-        checkInt(data, \"22\", 100000); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_1); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndDESede); \/\/ key alg\n-        checkInt(data, \"110c010c010011\", 50000); \/\/ key ic\n-        checkAlg(data, \"110c110110\", PBEWithSHA1AndRC2_40); \/\/ cert alg\n-        checkInt(data, \"110c1101111\", 50000); \/\/ cert ic\n-\n-        \/\/ Add a new entry with password-less settings, still has a storepass\n-        keytool(\"-keystore ksnormal -genkeypair -storepass changeit -alias b -dname CN=b \"\n-                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n-                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\");\n-        data = Files.readAllBytes(Path.of(\"ksnormal\"));\n-        checkInt(data, \"22\", 100000); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_1); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n-        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n-        checkAlg(data, \"110c010c11000\", PBES2); \/\/ new key alg\n-        checkInt(data, \"110c010c11001011\", 10000); \/\/ new key ic\n-        checkAlg(data, \"110c10\", ENCRYPTED_DATA_OID);\n-        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n-        check(\"ksnormal\", \"b\", null, \"changeit\", true, false, true);\n-        check(\"ksnormal\", \"b\", \"changeit\", \"changeit\", true, true, true);\n-\n-        \/\/ Different keypbe alg, no cert pbe and no mac\n-        keytool(\"-importkeystore -srckeystore ks -srcstorepass changeit \"\n-                + \"-destkeystore ksnopass -deststorepass changeit \"\n-                + \"-J-Dkeystore.pkcs12.keyProtectionAlgorithm=PBEWithSHA1AndRC4_128 \"\n-                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n-                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\");\n-        data = Files.readAllBytes(Path.of(\"ksnopass\"));\n-        shouldNotExist(data, \"2\"); \/\/ no Mac\n-        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n-        checkInt(data, \"110c010c010011\", 10000);\n-        checkAlg(data, \"110c10\", DATA_OID);\n-        check(\"ksnopass\", \"a\", null, \"changeit\", true, true, true);\n-        check(\"ksnopass\", \"a\", \"changeit\", \"changeit\", true, true, true);\n-        check(\"ksnopass\", \"a\", \"wrongpass\", \"changeit\", true, true, true);\n-\n-        \/\/ Add a new entry with normal settings, still password-less\n-        keytool(\"-keystore ksnopass -genkeypair -storepass changeit -alias b -dname CN=B\");\n-        data = Files.readAllBytes(Path.of(\"ksnopass\"));\n-        shouldNotExist(data, \"2\"); \/\/ no Mac\n-        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n-        checkInt(data, \"110c010c010011\", 10000);\n-        checkAlg(data, \"110c010c11000\", PBES2);\n-        checkInt(data, \"110c010c11001011\", 10000);\n-        checkAlg(data, \"110c10\", DATA_OID);\n-        check(\"ksnopass\", \"a\", null, \"changeit\", true, true, true);\n-        check(\"ksnopass\", \"b\", null, \"changeit\", true, true, true);\n-\n-        keytool(\"-importkeystore -srckeystore ks -srcstorepass changeit \"\n-                + \"-destkeystore ksnewic -deststorepass changeit \"\n-                + \"-J-Dkeystore.pkcs12.macIterationCount=5555 \"\n-                + \"-J-Dkeystore.pkcs12.certPbeIterationCount=6666 \"\n-                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=7777\");\n-        data = Files.readAllBytes(Path.of(\"ksnewic\"));\n-        checkInt(data, \"22\", 5555); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_1); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n-        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n-        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n-        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n-\n-        \/\/ keypbe alg cannot be NONE\n-        keytool(\"-keystore ksnewic -genkeypair -storepass changeit -alias b -dname CN=B \"\n-                + \"-J-Dkeystore.pkcs12.keyProtectionAlgorithm=NONE\")\n-                .shouldContain(\"NONE AlgorithmParameters not available\")\n-                .shouldHaveExitValue(1);\n-\n-        \/\/ new entry new keypbe alg (and default ic), else unchanged\n-        keytool(\"-keystore ksnewic -genkeypair -storepass changeit -alias b -dname CN=B \"\n-                + \"-J-Dkeystore.pkcs12.keyProtectionAlgorithm=PBEWithSHA1AndRC4_128\");\n-        data = Files.readAllBytes(Path.of(\"ksnewic\"));\n-        checkInt(data, \"22\", 5555); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_1); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n-        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n-        checkAlg(data, \"110c010c11000\", PBEWithSHA1AndRC4_128); \/\/ new key alg\n-        checkInt(data, \"110c010c110011\", 10000); \/\/ new key ic\n-        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n-        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n-\n-        \/\/ Check KeyStore loading multiple keystores\n-        KeyStore ks = KeyStore.getInstance(\"pkcs12\");\n-        try (FileInputStream fis = new FileInputStream(\"ksnormal\");\n-                FileOutputStream fos = new FileOutputStream(\"ksnormaldup\")) {\n-            ks.load(fis, \"changeit\".toCharArray());\n-            ks.store(fos, \"changeit\".toCharArray());\n-        }\n-        data = Files.readAllBytes(Path.of(\"ksnormaldup\"));\n-        checkInt(data, \"22\", 100000); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_1); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n-        checkInt(data, \"110c010c01001011\", 10000); \/\/ key ic\n-        checkAlg(data, \"110c010c11000\", PBES2); \/\/ new key alg\n-        checkInt(data, \"110c010c11001011\", 10000); \/\/ new key ic\n-        checkAlg(data, \"110c10\", ENCRYPTED_DATA_OID);\n-        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n-        checkInt(data, \"110c110111011\", 10000); \/\/ cert ic\n-\n-        try (FileInputStream fis = new FileInputStream(\"ksnopass\");\n-             FileOutputStream fos = new FileOutputStream(\"ksnopassdup\")) {\n-            ks.load(fis, \"changeit\".toCharArray());\n-            ks.store(fos, \"changeit\".toCharArray());\n-        }\n-        data = Files.readAllBytes(Path.of(\"ksnopassdup\"));\n-        shouldNotExist(data, \"2\"); \/\/ no Mac\n-        checkAlg(data, \"110c010c01000\", PBEWithSHA1AndRC4_128);\n-        checkInt(data, \"110c010c010011\", 10000);\n-        checkAlg(data, \"110c010c11000\", PBES2);\n-        checkInt(data, \"110c010c11001011\", 10000);\n-        checkAlg(data, \"110c10\", DATA_OID);\n-\n-        try (FileInputStream fis = new FileInputStream(\"ksnewic\");\n-             FileOutputStream fos = new FileOutputStream(\"ksnewicdup\")) {\n-            ks.load(fis, \"changeit\".toCharArray());\n-            ks.store(fos, \"changeit\".toCharArray());\n-        }\n-        data = Files.readAllBytes(Path.of(\"ksnewicdup\"));\n-        checkInt(data, \"22\", 5555); \/\/ Mac ic\n-        checkAlg(data, \"2000\", SHA_1); \/\/ Mac alg\n-        checkAlg(data, \"110c010c01000\", PBES2); \/\/ key alg\n-        checkInt(data, \"110c010c01001011\", 7777); \/\/ key ic\n-        checkAlg(data, \"110c010c11000\", PBEWithSHA1AndRC4_128); \/\/ new key alg\n-        checkInt(data, \"110c010c110011\", 10000); \/\/ new key ic\n-        checkAlg(data, \"110c110110\", PBES2); \/\/ cert alg\n-        checkInt(data, \"110c110111011\", 6666); \/\/ cert ic\n-\n-        \/\/ Check keytool behavior\n-\n-        \/\/ ksnormal has password\n-\n-        keytool(\"-list -keystore ksnormal\")\n-                .shouldContain(\"WARNING WARNING WARNING\")\n-                .shouldContain(\"Certificate chain length: 0\");\n-\n-        SecurityTools.setResponse(\"changeit\");\n-        keytool(\"-list -keystore ksnormal\")\n-                .shouldNotContain(\"WARNING WARNING WARNING\")\n-                .shouldContain(\"Certificate fingerprint\");\n-\n-        \/\/ ksnopass is password-less\n-\n-        keytool(\"-list -keystore ksnopass\")\n-                .shouldNotContain(\"WARNING WARNING WARNING\")\n-                .shouldContain(\"Certificate fingerprint\");\n-\n-        \/\/ -certreq prompts for keypass\n-        SecurityTools.setResponse(\"changeit\");\n-        keytool(\"-certreq -alias a -keystore ksnopass\")\n-                .shouldContain(\"Enter key password for <a>\")\n-                .shouldContain(\"-----BEGIN NEW CERTIFICATE REQUEST-----\")\n-                .shouldHaveExitValue(0);\n-\n-        \/\/ -certreq -storepass works fine\n-        keytool(\"-certreq -alias a -keystore ksnopass -storepass changeit\")\n-                .shouldNotContain(\"Enter key password for <a>\")\n-                .shouldContain(\"-----BEGIN NEW CERTIFICATE REQUEST-----\")\n-                .shouldHaveExitValue(0);\n-\n-        \/\/ -certreq -keypass also works fine\n-        keytool(\"-certreq -alias a -keystore ksnopass -keypass changeit\")\n-                .shouldNotContain(\"Enter key password for <a>\")\n-                .shouldContain(\"-----BEGIN NEW CERTIFICATE REQUEST-----\")\n-                .shouldHaveExitValue(0);\n-\n-        \/\/ -importkeystore prompts for srckeypass\n-        SecurityTools.setResponse(\"changeit\", \"changeit\");\n-        keytool(\"-importkeystore -srckeystore ksnopass \"\n-                + \"-destkeystore jks3 -deststorepass changeit\")\n-                .shouldContain(\"Enter key password for <a>\")\n-                .shouldContain(\"Enter key password for <b>\")\n-                .shouldContain(\"2 entries successfully imported\");\n-\n-        \/\/ ksnopass2 is ksnopass + 2 cert entries\n-\n-        ks = KeyStore.getInstance(new File(\"ksnopass\"), (char[])null);\n-        ks.setCertificateEntry(\"aa\", ks.getCertificate(\"a\"));\n-        ks.setCertificateEntry(\"bb\", ks.getCertificate(\"b\"));\n-        try (FileOutputStream fos = new FileOutputStream(\"ksnopass2\")) {\n-            ks.store(fos, null);\n-        }\n-\n-        \/\/ -importkeystore prompts for srckeypass for private keys\n-        \/\/ and no prompt for certs\n-        SecurityTools.setResponse(\"changeit\", \"changeit\");\n-        keytool(\"-importkeystore -srckeystore ksnopass2 \"\n-                + \"-destkeystore jks5 -deststorepass changeit\")\n-                .shouldContain(\"Enter key password for <a>\")\n-                .shouldContain(\"Enter key password for <b>\")\n-                .shouldNotContain(\"Enter key password for <aa>\")\n-                .shouldNotContain(\"Enter key password for <bb>\")\n-                .shouldContain(\"4 entries successfully imported\");\n-\n-        \/\/ ksonlycert has only cert entries\n-\n-        ks.deleteEntry(\"a\");\n-        ks.deleteEntry(\"b\");\n-        try (FileOutputStream fos = new FileOutputStream(\"ksonlycert\")) {\n-            ks.store(fos, null);\n-        }\n-\n-        \/\/ -importkeystore does not prompt at all\n-        keytool(\"-importkeystore -srckeystore ksonlycert \"\n-                + \"-destkeystore jks6 -deststorepass changeit\")\n-                .shouldNotContain(\"Enter key password for <aa>\")\n-                .shouldNotContain(\"Enter key password for <bb>\")\n-                .shouldContain(\"2 entries successfully imported\");\n-\n-        \/\/ create a new password-less keystore\n-        keytool(\"-keystore ksnopass -exportcert -alias a -file a.cert -rfc\");\n-\n-        \/\/ Normally storepass is prompted for\n-        keytool(\"-keystore kscert1 -importcert -alias a -file a.cert -noprompt\")\n-                .shouldContain(\"Enter keystore password:\");\n-        keytool(\"-keystore kscert2 -importcert -alias a -file a.cert -noprompt \"\n-                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE\")\n-                .shouldContain(\"Enter keystore password:\");\n-        keytool(\"-keystore kscert3 -importcert -alias a -file a.cert -noprompt \"\n-                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\")\n-                .shouldContain(\"Enter keystore password:\");\n-        \/\/ ... but not if it's password-less\n-        keytool(\"-keystore kscert4 -importcert -alias a -file a.cert -noprompt \"\n-                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n-                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\")\n-                .shouldNotContain(\"Enter keystore password:\");\n-\n-        \/\/ still prompt for keypass for genkeypair and certreq\n-        SecurityTools.setResponse(\"changeit\", \"changeit\");\n-        keytool(\"-keystore ksnopassnew -genkeypair -alias a -dname CN=A \"\n-                + \"-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE \"\n-                + \"-J-Dkeystore.pkcs12.macAlgorithm=NONE\")\n-                .shouldNotContain(\"Enter keystore password:\")\n-                .shouldContain(\"Enter key password for <a>\");\n-        keytool(\"-keystore ksnopassnew -certreq -alias a\")\n-                .shouldNotContain(\"Enter keystore password:\")\n-                .shouldContain(\"Enter key password for <a>\");\n-        keytool(\"-keystore ksnopassnew -list -v -alias a\")\n-                .shouldNotContain(\"Enter keystore password:\")\n-                .shouldNotContain(\"Enter key password for <a>\");\n-\n-        \/\/ params only read on demand\n-\n-        \/\/ keyPbeIterationCount is used by -genkeypair\n-        keytool(\"-keystore ksgenbadkeyic -genkeypair -alias a -dname CN=A \"\n-                + \"-storepass changeit \"\n-                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=abc\")\n-                .shouldContain(\"keyPbeIterationCount is not a number: abc\")\n-                .shouldHaveExitValue(1);\n-\n-        keytool(\"-keystore ksnopassnew -exportcert -alias a -file a.cert\");\n-\n-        \/\/ but not used by -importcert\n-        keytool(\"-keystore ksimpbadkeyic -importcert -alias a -file a.cert \"\n-                + \"-noprompt -storepass changeit \"\n-                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=abc\")\n-                .shouldHaveExitValue(0);\n-\n-        \/\/ None is used by -list\n-        keytool(\"-keystore ksnormal -storepass changeit -list \"\n-                + \"-J-Dkeystore.pkcs12.keyPbeIterationCount=abc \"\n-                + \"-J-Dkeystore.pkcs12.certPbeIterationCount=abc \"\n-                + \"-J-Dkeystore.pkcs12.macIterationCount=abc\")\n-                .shouldHaveExitValue(0);\n-    }\n-\n-    \/**\n-     * Check keystore loading and key\/cert reading.\n-     *\n-     * @param keystore the file name of keystore\n-     * @param alias the key\/cert to read\n-     * @param storePass store pass to try out, can be null\n-     * @param keypass key pass to try, can not be null\n-     * @param expectedLoad expected result of keystore loading, true if non\n-     *                     null, false if null, exception class if exception\n-     * @param expectedCert expected result of cert reading\n-     * @param expectedKey expected result of key reading\n-     *\/\n-    private static void check(\n-            String keystore,\n-            String alias,\n-            String storePass,\n-            String keypass,\n-            Object expectedLoad,\n-            Object expectedCert,\n-            Object expectedKey) {\n-        KeyStore ks = null;\n-        Object actualLoad, actualCert, actualKey;\n-        String label = keystore + \"-\" + alias + \"-\" + storePass + \"-\" + keypass;\n-        try {\n-            ks = KeyStore.getInstance(new File(keystore),\n-                    storePass == null ? null : storePass.toCharArray());\n-            actualLoad = ks != null;\n-        } catch (Exception e) {\n-            e.printStackTrace(System.out);\n-            actualLoad = e.getClass();\n-        }\n-        Asserts.assertEQ(expectedLoad, actualLoad, label + \"-load\");\n-\n-        \/\/ If not loaded correctly, skip cert\/key reading\n-        if (!Objects.equals(actualLoad, true)) {\n-            return;\n-        }\n-\n-        try {\n-            actualCert = (ks.getCertificate(alias) != null);\n-        } catch (Exception e) {\n-            e.printStackTrace(System.out);\n-            actualCert = e.getClass();\n-        }\n-        Asserts.assertEQ(expectedCert, actualCert, label + \"-cert\");\n-\n-        try {\n-            actualKey = (ks.getKey(alias, keypass.toCharArray()) != null);\n-        } catch (Exception e) {\n-            e.printStackTrace(System.out);\n-            actualKey = e.getClass();\n-        }\n-        Asserts.assertEQ(expectedKey, actualKey, label + \"-key\");\n-    }\n-\n-    static OutputAnalyzer keytool(String s) throws Throwable {\n-        return SecurityTools.keytool(s);\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/pkcs12\/ParamsTest.java","additions":0,"deletions":447,"binary":false,"changes":447,"status":"deleted"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.lib.security;\n+\n+import java.io.File;\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.artifacts.Artifact;\n+import jdk.test.lib.artifacts.ArtifactResolver;\n+import jdk.test.lib.artifacts.ArtifactResolverException;\n+\n+public class OpensslArtifactFetcher {\n+\n+    \/**\n+     * Gets the openssl binary path of version 1.1.*\n+     *\n+     * Openssl selection flow:\n+        1. Check whether property test.openssl.path is set and it's the\n+           preferred version(1.1.*) of openssl, then return that path.\n+        2. Else look for already installed openssl (version 1.1.*) in system\n+           path \/usr\/bin\/openssl or \/usr\/local\/bin\/openssl, then return that\n+           path.\n+        3. Else try to download openssl (version 1.1.*) from the artifactory\n+           and return that path, if download fails then return null.\n+     *\n+     * @return openssl binary path of version 1.1.*\n+     *\/\n+    public static String getOpenssl1dot1dotStar() {\n+        String version = \"1.1.\";\n+        String path = getOpensslFromSystemProp(version);\n+        if (path != null) {\n+            return path;\n+        } else {\n+            path = getDefaultSystemOpensslPath(version);\n+            if (path != null) {\n+                return path;\n+            } else if (Platform.is64bit()) {\n+                if (Platform.isLinux()) {\n+                    path = fetchOpenssl(LINUX_X64.class);\n+                } else if (Platform.isOSX()) {\n+                    path = fetchOpenssl(MACOSX_X64.class);\n+                } else if (Platform.isWindows()) {\n+                    path = fetchOpenssl(WINDOWS_X64.class);\n+                }\n+                if (verifyOpensslVersion(path, version)) {\n+                    return path;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static String getOpensslFromSystemProp(String version) {\n+        String path = System.getProperty(\"test.openssl.path\");\n+        System.out.println(\"System Property - test.openssl.path: \" + path);\n+        if (!verifyOpensslVersion(path, version)) {\n+            path = null;\n+        }\n+        return path;\n+    }\n+\n+    private static String getDefaultSystemOpensslPath(String version) {\n+        if (verifyOpensslVersion(\"\/usr\/bin\/openssl\", version)) {\n+            return \"\/usr\/bin\/openssl\";\n+        } else if (verifyOpensslVersion(\"\/usr\/local\/bin\/openssl\", version)) {\n+            return \"\/usr\/local\/bin\/openssl\";\n+        }\n+        return null;\n+    }\n+\n+    private static boolean verifyOpensslVersion(String path, String version) {\n+        if (path != null) {\n+            try {\n+                ProcessTools.executeCommand(path, \"version\")\n+                        .shouldHaveExitValue(0)\n+                        .shouldContain(version);\n+                return true;\n+            } catch (Throwable t) {\n+                t.printStackTrace();\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static String fetchOpenssl(Class<?> clazz) {\n+        String path = null;\n+        try {\n+            path = ArtifactResolver.resolve(clazz).entrySet().stream()\n+                    .findAny().get().getValue() + File.separator + \"openssl\"\n+                    + File.separator + \"bin\" + File.separator + \"openssl\";\n+            System.out.println(\"path: \" + path);\n+        } catch (ArtifactResolverException e) {\n+            Throwable cause = e.getCause();\n+            if (cause == null) {\n+                System.out.println(\"Cannot resolve artifact, \"\n+                        + \"please check if JIB jar is present in classpath.\");\n+            } else {\n+                throw new RuntimeException(\"Fetch artifact failed: \" + clazz\n+                        + \"\\nPlease make sure the artifact is available.\", e);\n+            }\n+        }\n+        return path;\n+    }\n+\n+    @Artifact(\n+            organization = \"jpg.tests.jdk.openssl\",\n+            name = \"openssl-linux_x64\",\n+            revision = \"1.1.1g\",\n+            extension = \"zip\")\n+    private static class LINUX_X64 { }\n+\n+    @Artifact(\n+            organization = \"jpg.tests.jdk.openssl\",\n+            name = \"openssl-macosx_x64\",\n+            revision = \"1.1.1g\",\n+            extension = \"zip\")\n+    private static class MACOSX_X64 { }\n+\n+    @Artifact(\n+            organization = \"jpg.tests.jdk.openssl\",\n+            name = \"openssl-windows_x64\",\n+            revision = \"1.1.1g\",\n+            extension = \"zip\")\n+    private static class WINDOWS_X64 { }\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/security\/OpensslArtifactFetcher.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"}]}