{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import org.testng.ITestContext;\n@@ -30,0 +31,1 @@\n+import org.testng.annotations.BeforeMethod;\n@@ -135,0 +137,11 @@\n+    protected boolean stopAfterFirstFailure() {\n+        return Boolean.getBoolean(\"jdk.internal.httpclient.debug\");\n+    }\n+\n+    @BeforeMethod\n+    void beforeMethod(ITestContext context) {\n+        if (stopAfterFirstFailure() && context.getFailedTests().size() > 0) {\n+            throw new RuntimeException(\"some tests failed\");\n+        }\n+    }\n+\n@@ -220,1 +233,4 @@\n-    public Object[][] subscribeProvider() {\n+    public Object[][] subscribeProvider(ITestContext context) {\n+        if (stopAfterFirstFailure() && context.getFailedTests().size() > 0) {\n+            return new Object[0][];\n+        }\n@@ -228,1 +244,4 @@\n-    public Object[][] requestProvider() {\n+    public Object[][] requestProvider(ITestContext context) {\n+        if (stopAfterFirstFailure() && context.getFailedTests().size() > 0) {\n+            return new Object[0][];\n+        }\n@@ -236,1 +255,4 @@\n-    public Object[][] nextRequestProvider() {\n+    public Object[][] nextRequestProvider(ITestContext context) {\n+        if (stopAfterFirstFailure() && context.getFailedTests().size() > 0) {\n+            return new Object[0][];\n+        }\n@@ -244,1 +266,4 @@\n-    public Object[][] beforeCancelProviderIO() {\n+    public Object[][] beforeCancelProviderIO(ITestContext context) {\n+        if (stopAfterFirstFailure() && context.getFailedTests().size() > 0) {\n+            return new Object[0][];\n+        }\n@@ -251,1 +276,4 @@\n-    public Object[][] afterCancelProviderIO() {\n+    public Object[][] afterCancelProviderIO(ITestContext context) {\n+        if (stopAfterFirstFailure() && context.getFailedTests().size() > 0) {\n+            return new Object[0][];\n+        }\n@@ -258,1 +286,4 @@\n-    public Object[][] beforeCancelProviderCustom() {\n+    public Object[][] beforeCancelProviderCustom(ITestContext context) {\n+        if (stopAfterFirstFailure() && context.getFailedTests().size() > 0) {\n+            return new Object[0][];\n+        }\n@@ -265,1 +296,4 @@\n-    public Object[][] afterCancelProvider() {\n+    public Object[][] afterCancelProvider(ITestContext context) {\n+        if (stopAfterFirstFailure() && context.getFailedTests().size() > 0) {\n+            return new Object[0][];\n+        }\n","filename":"test\/jdk\/java\/net\/httpclient\/AbstractThrowingPublishers.java","additions":42,"deletions":8,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import org.testng.ITestContext;\n@@ -46,0 +47,1 @@\n+import org.testng.annotations.BeforeMethod;\n@@ -48,1 +50,0 @@\n-import org.testng.annotations.Test;\n@@ -148,0 +149,11 @@\n+    protected boolean stopAfterFirstFailure() {\n+        return Boolean.getBoolean(\"jdk.internal.httpclient.debug\");\n+    }\n+\n+    @BeforeMethod\n+    void beforeMethod(ITestContext context) {\n+        if (stopAfterFirstFailure() && context.getFailedTests().size() > 0) {\n+            throw new RuntimeException(\"some tests failed\");\n+        }\n+    }\n+\n@@ -210,1 +222,6 @@\n-        Object[][] result = new Object[uris.length * 2 * throwers.size()][];\n+        \/\/ reduce traces by always using the same client if\n+        \/\/ stopAfterFirstFailure is requested.\n+        List<Boolean> sameClients = stopAfterFirstFailure()\n+                ? List.of(true)\n+                : List.of(false, true);\n+        Object[][] result = new Object[uris.length * sameClients.size() * throwers.size()][];\n@@ -213,1 +230,1 @@\n-            for (boolean sameClient : List.of(false, true)) {\n+            for (boolean sameClient : sameClients) {\n@@ -219,1 +236,1 @@\n-        assert i == uris.length * 2 * throwers.size();\n+        assert i == uris.length * sameClients.size() * throwers.size();\n@@ -224,1 +241,4 @@\n-    public Object[][] ioVariants() {\n+    public Object[][] ioVariants(ITestContext context) {\n+        if (stopAfterFirstFailure() && context.getFailedTests().size() > 0) {\n+            return new Object[0][];\n+        }\n@@ -230,1 +250,4 @@\n-    public Object[][] customVariants() {\n+    public Object[][] customVariants(ITestContext context) {\n+        if (stopAfterFirstFailure() && context.getFailedTests().size() > 0) {\n+            return new Object[0][];\n+        }\n","filename":"test\/jdk\/java\/net\/httpclient\/AbstractThrowingPushPromises.java","additions":29,"deletions":6,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import org.testng.ITestContext;\n@@ -30,0 +31,1 @@\n+import org.testng.annotations.BeforeMethod;\n@@ -134,0 +136,11 @@\n+    protected boolean stopAfterFirstFailure() {\n+        return Boolean.getBoolean(\"jdk.internal.httpclient.debug\");\n+    }\n+\n+    @BeforeMethod\n+    void beforeMethod(ITestContext context) {\n+        if (stopAfterFirstFailure() && context.getFailedTests().size() > 0) {\n+            throw new RuntimeException(\"some tests failed\");\n+        }\n+    }\n+\n@@ -185,1 +198,4 @@\n-    public Object[][] variants() {\n+    public Object[][] variants(ITestContext context) {\n+        if (stopAfterFirstFailure() && context.getFailedTests().size() > 0) {\n+            return new Object[0][];\n+        }\n","filename":"test\/jdk\/java\/net\/httpclient\/AbstractThrowingSubscribers.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.net.SocketException;\n@@ -79,0 +80,1 @@\n+    static final String MARKER = \"ShortRequestBody\";\n@@ -137,1 +139,1 @@\n-                URI uri = new URI(\"http:\/\/localhost:\" + server.getPort() + \"\/\");\n+                URI uri = new URI(\"http:\/\/localhost:\" + server.getPort() + \"\/\" + MARKER);\n@@ -251,0 +253,1 @@\n+                err.println(\"Server: waiting for connection\");\n@@ -254,1 +257,9 @@\n-                    readRequestHeaders(is);\n+                    try {\n+                        String headers = readRequestHeaders(is);\n+                        if (headers == null) continue;\n+                    } catch (SocketException ex) {\n+                        err.println(\"Ignoring unexpected exception while reading headers: \" + ex);\n+                        ex.printStackTrace(err);\n+                        \/\/ proceed in order to update count etc..., even though\n+                        \/\/ we know that read() will fail;\n+                    }\n@@ -261,11 +272,14 @@\n-                    int read = is.readNBytes(ba, 0, length);\n-                    err.println(\"Server: actually read \" + read + \" bytes\");\n-\n-                    \/\/ Update the counts before replying, to prevent the\n-                    \/\/ client-side racing reset with this thread.\n-                    count++;\n-                    if (count % 6 == 0) \/\/ 6 is the number of failure requests per offset\n-                        offset++;\n-                    if (count % 42 == 0) {\n-                        count = 0;  \/\/ reset, for second iteration\n-                        offset = 0;\n+                    int read = 0;\n+                    try {\n+                        read = is.readNBytes(ba, 0, length);\n+                        err.println(\"Server: actually read \" + read + \" bytes\");\n+                    } finally {\n+                        \/\/ Update the counts before replying, to prevent the\n+                        \/\/ client-side racing reset with this thread.\n+                        count++;\n+                        if (count % 6 == 0) \/\/ 6 is the number of failure requests per offset\n+                            offset++;\n+                        if (count % 42 == 0) {\n+                            count = 0;  \/\/ reset, for second iteration\n+                            offset = 0;\n+                        }\n@@ -273,1 +287,0 @@\n-\n@@ -278,1 +291,1 @@\n-                            new AssertionError(\"Unexpected read\");\n+                            new AssertionError(\"Unexpected read: \" + read);\n@@ -285,4 +298,5 @@\n-\n-                } catch (IOException e) {\n-                    if (!closed)\n-                        System.out.println(\"Unexpected\" + e);\n+                } catch (Throwable e) {\n+                    if (!closed) {\n+                        err.println(\"Unexpected: \" + e);\n+                        e.printStackTrace();\n+                    }\n@@ -309,2 +323,3 @@\n-    static void readRequestHeaders(InputStream is) throws IOException {\n-        int requestEndCount = 0, r;\n+    static String readRequestHeaders(InputStream is) throws IOException {\n+        int requestEndCount = 0, r, eol = -1;\n+        StringBuilder headers = new StringBuilder();\n@@ -312,0 +327,4 @@\n+            if (r == '\\r' && eol < 0) {\n+                eol = headers.length();\n+            }\n+            headers.append((char) r);\n@@ -321,0 +340,5 @@\n+\n+        if (eol <= 0) return null;\n+        String requestLine = headers.toString().substring(0, eol);\n+        if (!requestLine.contains(MARKER)) return null;\n+        return headers.toString();\n","filename":"test\/jdk\/java\/net\/httpclient\/ShortRequestBody.java","additions":46,"deletions":22,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -59,0 +59,2 @@\n+import org.testng.ITestContext;\n+import org.testng.annotations.BeforeMethod;\n@@ -107,0 +109,7 @@\n+    @BeforeMethod\n+    void beforeMethod(ITestContext context) {\n+        if (context.getFailedTests().size() > 0) {\n+            throw new RuntimeException(\"some tests failed\");\n+        }\n+    }\n+\n@@ -130,1 +139,1 @@\n-    public Object[][] variants() {\n+    public Object[][] variants(ITestContext context) {\n@@ -189,0 +198,7 @@\n+        if (context.getFailedTests().size() > 0) {\n+            \/\/ Shorten the log output by preventing useless\n+            \/\/ skip traces to be printed for subsequent methods\n+            \/\/ if one of the previous @Test method has failed.\n+            return new Object[0][];\n+        }\n+\n@@ -450,1 +466,3 @@\n-                throw new UncheckedIOException(\"Unexpected\", e);\n+                out.println(\"Unexpected exception while closing server: \" + e);\n+                e.printStackTrace(out);\n+                throw new UncheckedIOException(\"Unexpected: \", e);\n@@ -475,3 +493,6 @@\n-                } catch (IOException e) {\n-                    if (!closed)\n-                        throw new UncheckedIOException(\"Unexpected\", e);\n+                } catch (Throwable e) {\n+                    if (!closed) {\n+                        out.println(\"Unexpected exception in server: \" + e);\n+                        e.printStackTrace(out);\n+                        throw new RuntimeException(\"Unexpected: \", e);\n+                    }\n@@ -546,3 +567,6 @@\n-                } catch (IOException e) {\n-                    if (!closed)\n-                        throw new UncheckedIOException(\"Unexpected\", e);\n+                } catch (Throwable e) {\n+                    if (!closed) {\n+                        out.println(\"Unexpected exception in server: \" + e);\n+                        e.printStackTrace(out);\n+                        throw new RuntimeException(\"Unexpected: \" + e, e);\n+                    }\n","filename":"test\/jdk\/java\/net\/httpclient\/ShortResponseBody.java","additions":32,"deletions":8,"binary":false,"changes":40,"status":"modified"}]}