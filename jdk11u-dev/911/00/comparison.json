{"files":[{"patch":"@@ -78,0 +78,1 @@\n+<li><a href=\"#building-for-musl\">Building for musl<\/a><\/li>\n@@ -227,0 +228,2 @@\n+<p>For Alpine Linux, aside from basic tooling, install the GNU versions of some programs:<\/p>\n+<pre><code>sudo apk add build-base bash grep zip<\/code><\/pre>\n@@ -383,0 +386,1 @@\n+<li>To install on Alpine Linux, try running <code>sudo apk add freetype-dev<\/code>.<\/li>\n@@ -391,0 +395,1 @@\n+<li>To install on Alpine Linux, try running <code>sudo apk add cups-dev<\/code>.<\/li>\n@@ -399,0 +404,1 @@\n+<li>To install on Alpine Linux, try running <code>sudo apk add libx11-dev libxext-dev libxrender-dev libxtst-dev libxt-dev<\/code>.<\/li>\n@@ -407,0 +413,1 @@\n+<li>To install on Alpine Linux, try running <code>sudo apk add alsa-lib-dev<\/code>.<\/li>\n@@ -414,0 +421,1 @@\n+<li>To install on Alpine Linux, try running <code>sudo apk add libffi-dev<\/code>.<\/li>\n@@ -422,0 +430,1 @@\n+<li>To install on Alpine Linux, try running <code>sudo apk add autoconf<\/code>.<\/li>\n@@ -822,0 +831,9 @@\n+<h3 id=\"building-for-musl\">Building for musl<\/h3>\n+<p>Just like it's possible to cross-compile for a different CPU, it's possible to cross-compile for musl libc on a glibc-based <em>build<\/em> system. A devkit suitable for most target CPU architectures can be obtained from <a href=\"https:\/\/musl.cc\">musl.cc<\/a>. After installing the required packages in the sysroot, configure the build with <code>--openjdk-target<\/code>:<\/p>\n+<pre><code>sh .\/configure --with-jvm-variants=server \\\n+--with-boot-jdk=$BOOT_JDK \\\n+--with-build-jdk=$BUILD_JDK \\\n+--openjdk-target=x86_64-unknown-linux-musl \\\n+--with-devkit=$DEVKIT \\\n+--with-sysroot=$SYSROOT<\/code><\/pre>\n+<p>and run <code>make<\/code> normally.<\/p>\n","filename":"doc\/building.html","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -275,0 +275,7 @@\n+For Alpine Linux, aside from basic tooling, install the GNU versions of some\n+programs:\n+\n+```\n+sudo apk add build-base bash grep zip\n+```\n+\n@@ -468,0 +475,1 @@\n+  * To install on Alpine Linux, try running `sudo apk add freetype-dev`.\n@@ -483,0 +491,1 @@\n+  * To install on Alpine Linux, try running `sudo apk add cups-dev`.\n@@ -497,0 +506,2 @@\n+  * To install on Alpine Linux, try running `sudo apk add libx11-dev\n+    libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev`.\n@@ -515,0 +526,1 @@\n+  * To install on Alpine Linux, try running `sudo apk add alsa-lib-dev`.\n@@ -529,0 +541,1 @@\n+  * To install on Alpine Linux, try running `sudo apk add libffi-dev`.\n@@ -544,0 +557,1 @@\n+  * To install on Alpine Linux, try running `sudo apk add autoconf`.\n@@ -1181,0 +1195,19 @@\n+### Building for musl\n+\n+Just like it's possible to cross-compile for a different CPU, it's possible to\n+cross-compile for musl libc on a glibc-based *build* system.\n+A devkit suitable for most target CPU architectures can be obtained from\n+[musl.cc](https:\/\/musl.cc). After installing the required packages in the\n+sysroot, configure the build with `--openjdk-target`:\n+\n+```\n+sh .\/configure --with-jvm-variants=server \\\n+--with-boot-jdk=$BOOT_JDK \\\n+--with-build-jdk=$BUILD_JDK \\\n+--openjdk-target=x86_64-unknown-linux-musl \\\n+--with-devkit=$DEVKIT \\\n+--with-sysroot=$SYSROOT\n+```\n+\n+and run `make` normally.\n+\n","filename":"doc\/building.md","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"}]}