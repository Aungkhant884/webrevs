{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2018 Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,16 @@\n-import java.util.*;\n+\/*\n+ * @test\n+ * @bug 8003267\n+ * @summary Unit test for generic time zone names support. This test is locale\n+ *          data-dependent and assumes that both JRE and CLDR have the same\n+ *          geneic time zone names in English.\n+ * @modules java.base\/sun.util.locale.provider\n+ * @comment Locale providers: default\n+ * @run main GenericTimeZoneNamesTest en-US\n+ * @comment Locale providers: CLDR\n+ * @run main\/othervm -Djava.locale.providers=CLDR GenericTimeZoneNamesTest en-US\n+*\/\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n","filename":"test\/jdk\/java\/util\/Calendar\/GenericTimeZoneNamesTest.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1,46 +0,0 @@\n-#\n-# Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 8003267\n-# @summary Unit test for generic time zone names support\n-# @modules java.base\/sun.util.locale.provider\n-# @compile GenericTimeZoneNamesTest.java\n-# @run shell GenericTimeZoneNamesTest.sh\n-\n-# This test is locale data-dependent and assumes that both JRE and CLDR\n-# have the same geneic time zone names in English.\n-\n-EXTRAOPTS=\"--add-exports java.base\/sun.util.locale.provider=ALL-UNNAMED\"\n-STATUS=0\n-echo \"Locale providers: default\"\n-if ! ${TESTJAVA}\/bin\/java -esa ${TESTVMOPTS} ${EXTRAOPTS} -cp \"${TESTCLASSES}\" GenericTimeZoneNamesTest en-US; then\n-    STATUS=1\n-fi\n-\n-echo \"Locale providers: CLDR\"\n-if ! ${TESTJAVA}\/bin\/java -esa ${TESTVMOPTS} ${EXTRAOPTS} -cp \"${TESTCLASSES}\" -Djava.locale.providers=CLDR GenericTimeZoneNamesTest en-US; then\n-   STATUS=1\n-fi\n-exit ${STATUS}\n-\n","filename":"test\/jdk\/java\/util\/Calendar\/GenericTimeZoneNamesTest.sh","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -24,0 +24,12 @@\n+\/*\n+ * @test\n+ * @bug 8000983 8008577\n+ * @summary Unit test for narrow names support. This test is locale data-dependent\n+ *          and assumes that both JRE and CLDR have the same narrow names.\n+ * @modules jdk.localedata\n+ * @comment Locale providers: JRE,SPI\n+ * @run main\/othervm -Djava.locale.providers=JRE,SPI NarrowNamesTest JRE,SPI\n+ * @comment Locale providers: CLDR\n+ * @run main\/othervm -Djava.locale.providers=CLDR NarrowNamesTest CLDR\n+ *\/\n+\n@@ -25,1 +37,5 @@\n-import java.util.*;\n+import java.util.Calendar;\n+import java.util.Comparator;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.TreeMap;\n","filename":"test\/jdk\/java\/util\/Calendar\/NarrowNamesTest.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1,41 +0,0 @@\n-#\n-# Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 8000983 8008577\n-# @summary Unit test for narrow names support\n-# @build NarrowNamesTest\n-# @run shell NarrowNamesTest.sh\n-\n-# This test is locale data-dependent and assumes that both JRE and CLDR\n-# have the same narrow names.\n-\n-STATUS=0\n-for P in \"JRE,SPI\" \"CLDR\"\n-do\n-    echo \"Locale providers: $P\"\n-    if ! ${TESTJAVA}\/bin\/java -esa ${TESTVMOPTS} -cp \"${TESTCLASSES}\" -Djava.locale.providers=\"${P}\" NarrowNamesTest ${P}; then\n-        STATUS=1\n-    fi\n-done\n-exit ${STATUS}\n","filename":"test\/jdk\/java\/util\/Calendar\/NarrowNamesTest.sh","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -35,1 +35,0 @@\n-import java.util.TimeZone;\n@@ -39,5 +38,0 @@\n- *   java SupplementalJapaneseEraTest <flag>\n- *    <flag>\n- *      -s   prints start time for a test era\n- *      -e   prints the English name of the last predefined era\n- *\n@@ -48,1 +42,0 @@\n- *           <eraname> must be the output with -e\n@@ -60,20 +53,0 @@\n-        case \"-s\":\n-            \/\/ print the start time of the new era for testing\n-            Calendar cal = new Calendar.Builder()\n-                .setCalendarType(\"japanese\")\n-                .setTimeZone(TimeZone.getTimeZone(\"GMT\"))\n-                .setFields(ERA, 5)\n-                .setDate(200, FEBRUARY, 11)\n-                .build();\n-            System.out.println(cal.getTimeInMillis());\n-            break;\n-\n-        case \"-e\":\n-            \/\/ print the current era name in English\n-            Calendar jcal = new Calendar.Builder()\n-                .setCalendarType(\"japanese\")\n-                .setFields(YEAR, 1, DAY_OF_YEAR, 1)\n-                .build();\n-            System.out.println(jcal.getDisplayName(ERA, LONG, Locale.US));\n-            break;\n-\n@@ -87,1 +60,1 @@\n-            \/\/ args[1] is the current era name given by -e.\n+            \/\/ args[1] is the current era name.\n","filename":"test\/jdk\/java\/util\/Calendar\/SupplementalJapaneseEraTest.java","additions":1,"deletions":28,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -1,74 +0,0 @@\n-#\n-# Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 8048123 8054214 8173423\n-# @summary Test for jdk.calendar.japanese.supplemental.era support\n-# @build SupplementalJapaneseEraTest\n-# @run shell SupplementalJapaneseEraTest.sh\n-\n-PROPERTY=jdk.calendar.japanese.supplemental.era\n-STATUS=0\n-\n-# get the start time of the fictional next era\n-SINCE=`${TESTJAVA}\/bin\/java -cp \"${TESTCLASSES}\" SupplementalJapaneseEraTest -s`\n-\n-echo \"Tests with valid property values...\"\n-for P in \"name=SupEra,abbr=S.E.,since=$SINCE\" \\\n-         \"name = SupEra, abbr = S.E., since = $SINCE\"\n-do\n-    if ${TESTJAVA}\/bin\/java ${TESTVMOPTS} -cp \"${TESTCLASSES}\" \\\n-           -D$PROPERTY=\"$P\" SupplementalJapaneseEraTest -t; then\n-        echo \"$P: passed\"\n-    else\n-        echo \"$P: failed\"\n-        STATUS=1\n-    fi\n-done\n-\n-# get the name of the current era to be used to confirm that\n-# invalid property values are ignored.\n-ERA=`${TESTJAVA}\/bin\/java -cp \"${TESTCLASSES}\" SupplementalJapaneseEraTest -e`\n-\n-echo \"Tests with invalid property values...\"\n-for P in \"foo=Bar,name=SupEra,abbr=S.E.,since=$SINCE\" \\\n-         \"=SupEra,abbr=S.E.,since=$SINCE\" \\\n-         \"=,abbr=S.E.,since=$SINCE\" \\\n-         \"name,abbr=S.E.,since=$SINCE\" \\\n-         \"abbr=S.E.,since=$SINCE\" \\\n-         \"name=SupEra,since=$SINCE\" \\\n-         \"name=,abbr=S.E.,since=$SINCE\" \\\n-         \"name=SupEra,abbr=,since=$SINCE\" \\\n-         \"name=SupEra,abbr=S.E.\" \\\n-         \"name=SupEra,abbr=S.E.,since=0\" \\\n-         \"name=SupEra,abbr=S.E.,since=9223372036854775808\" # Long.MAX_VALUE+1\n-do\n-    if ${TESTJAVA}\/bin\/java ${TESTVMOPTS} -cp \"${TESTCLASSES}\" \\\n-           -D$PROPERTY=\"$P\" SupplementalJapaneseEraTest -b \"$ERA\"; then\n-        echo \"$P: passed\"\n-    else\n-        echo \"$P: failed\"\n-        STATUS=1\n-    fi\n-done\n-exit $STATUS\n","filename":"test\/jdk\/java\/util\/Calendar\/SupplementalJapaneseEraTest.sh","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8048123 8054214 8173423\n+ * @summary Test for jdk.calendar.japanese.supplemental.era support\n+ * @library \/test\/lib\n+ * @build SupplementalJapaneseEraTest\n+ * @run testng\/othervm SupplementalJapaneseEraTestRun\n+ *\/\n+\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+import static java.util.Calendar.*;\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.Utils;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+public class SupplementalJapaneseEraTestRun {\n+    @DataProvider(name = \"validprop\")\n+    Object[][] validPropertyData() {\n+        return new Object[][] {\n+                \/\/Tests with valid property values\n+                {\"name=SupEra,abbr=S.E.,since=\"},\n+                {\"name = SupEra, abbr = S.E., since = \"},\n+        };\n+    }\n+\n+    @DataProvider(name = \"invalidprop\")\n+    Object[][] invalidPropertyData() {\n+        return new Object[][] {\n+                \/\/Tests with invalid property values\n+                {\"=SupEra,abbr=S.E.,since=\"},\n+                {\"=,abbr=S.E.,since=\"},\n+                {\"name,abbr=S.E.,since=\"},\n+                {\"abbr=S.E.,since=\"},\n+                {\"name=SupEra,since=\"},\n+                {\"name=,abbr=S.E.,since\"},\n+                {\"name=SupEra,abbr=,since=\"},\n+                {\"name=SupEra,abbr=S.E.\"},\n+                {\"name=SupEra,abbr=S.E.,since=0\"},\n+                \/\/since=9223372036854775808 the number means Long.MAX_VALUE+1\n+                {\"name=SupEra,abbr=S.E.,since=9223372036854775808\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"validprop\")\n+    public void ValidPropertyValuesTest(String prop)\n+            throws Throwable {\n+        \/\/get the start time of the fictional next era\n+        String startTime = getStartTime();\n+        testRun(prop + startTime, List.of(\"-t\"));\n+    }\n+\n+    @Test(dataProvider = \"invalidprop\")\n+    public void InvalidPropertyValuesTest(String prop)\n+            throws Throwable {\n+        \/\/get the start time of the fictional next era\n+        String startTime = getStartTime();\n+        \/\/get the name of the current era to be used to confirm that\n+        \/\/invalid property values are ignored.\n+        String currentEra = getCurrentEra();\n+        testRun(prop + startTime, List.of(\"-b\", currentEra));\n+    }\n+\n+    private static void testRun(String property, List<String> javaParam)\n+            throws Throwable{\n+        JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(\"java\");\n+        launcher.addToolArg(\"-cp\")\n+                .addToolArg(Utils.TEST_CLASS_PATH)\n+                .addToolArg(\"-Djdk.calendar.japanese.supplemental.era=\" + property)\n+                .addToolArg(\"SupplementalJapaneseEraTest\");\n+        for (String para: javaParam) {\n+            launcher.addToolArg(para);\n+        }\n+        int exitCode = ProcessTools.executeCommand(launcher.getCommand())\n+                .getExitValue();\n+        System.out.println(property + \":pass\");\n+        if (exitCode != 0) {\n+            System.out.println(property + \":fail\");\n+            throw new RuntimeException(\"Unexpected exit code: \" + exitCode);\n+        }\n+    }\n+\n+    private static String getStartTime(){\n+        Calendar cal = new Calendar.Builder().setCalendarType(\"japanese\")\n+                .setTimeZone(TimeZone.getTimeZone(\"GMT\")).setFields(ERA, 5)\n+                .setDate(200, FEBRUARY, 11).build();\n+        return String.valueOf(cal.getTimeInMillis());\n+    }\n+\n+    private static String getCurrentEra(){\n+        Calendar jcal = new Calendar.Builder()\n+                .setCalendarType(\"japanese\")\n+                .setFields(YEAR, 1, DAY_OF_YEAR, 1)\n+                .build();\n+        return jcal.getDisplayName(ERA, LONG, Locale.US);\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Calendar\/SupplementalJapaneseEraTestRun.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"}]}