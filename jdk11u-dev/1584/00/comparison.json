{"files":[{"patch":"@@ -2,1 +2,1 @@\n-<html>\n+<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\" lang=\"\" xml:lang=\"\">\n@@ -4,3 +4,3 @@\n-  <meta charset=\"utf-8\">\n-  <meta name=\"generator\" content=\"pandoc\">\n-  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n+  <meta charset=\"utf-8\" \/>\n+  <meta name=\"generator\" content=\"pandoc\" \/>\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" \/>\n@@ -8,2 +8,7 @@\n-  <style type=\"text\/css\">code{white-space: pre;}<\/style>\n-  <link rel=\"stylesheet\" href=\"..\/make\/data\/docs-resources\/resources\/jdk-default.css\">\n+  <style type=\"text\/css\">\n+      code{white-space: pre-wrap;}\n+      span.smallcaps{font-variant: small-caps;}\n+      span.underline{text-decoration: underline;}\n+      div.column{display: inline-block; vertical-align: top; width: 50%;}\n+  <\/style>\n+  <link rel=\"stylesheet\" href=\"..\/make\/data\/docs-resources\/resources\/jdk-default.css\" \/>\n@@ -16,1 +21,1 @@\n-<header>\n+<header id=\"title-block-header\">\n@@ -237,2 +242,2 @@\n-<th style=\"text-align: left;\">Operating system<\/th>\n-<th style=\"text-align: left;\">Supported toolchain<\/th>\n+<th>Operating system<\/th>\n+<th>Supported toolchain<\/th>\n@@ -243,2 +248,2 @@\n-<td style=\"text-align: left;\">Linux<\/td>\n-<td style=\"text-align: left;\">gcc, clang<\/td>\n+<td>Linux<\/td>\n+<td>gcc, clang<\/td>\n@@ -247,2 +252,2 @@\n-<td style=\"text-align: left;\">macOS<\/td>\n-<td style=\"text-align: left;\">Apple Xcode (using clang)<\/td>\n+<td>macOS<\/td>\n+<td>Apple Xcode (using clang)<\/td>\n@@ -251,2 +256,2 @@\n-<td style=\"text-align: left;\">Solaris<\/td>\n-<td style=\"text-align: left;\">Oracle Solaris Studio<\/td>\n+<td>Solaris<\/td>\n+<td>Oracle Solaris Studio<\/td>\n@@ -255,2 +260,2 @@\n-<td style=\"text-align: left;\">AIX<\/td>\n-<td style=\"text-align: left;\">IBM XL C\/C++<\/td>\n+<td>AIX<\/td>\n+<td>IBM XL C\/C++<\/td>\n@@ -259,2 +264,2 @@\n-<td style=\"text-align: left;\">Windows<\/td>\n-<td style=\"text-align: left;\">Microsoft Visual Studio<\/td>\n+<td>Windows<\/td>\n+<td>Microsoft Visual Studio<\/td>\n@@ -268,2 +273,2 @@\n-<th style=\"text-align: left;\">Operating system<\/th>\n-<th style=\"text-align: left;\">Toolchain version<\/th>\n+<th>Operating system<\/th>\n+<th>Toolchain version<\/th>\n@@ -274,2 +279,2 @@\n-<td style=\"text-align: left;\">Linux<\/td>\n-<td style=\"text-align: left;\">gcc 7.3.0<\/td>\n+<td>Linux<\/td>\n+<td>gcc 7.3.0<\/td>\n@@ -278,2 +283,2 @@\n-<td style=\"text-align: left;\">macOS<\/td>\n-<td style=\"text-align: left;\">Apple Xcode 9.4 (using clang 9.1.0)<\/td>\n+<td>macOS<\/td>\n+<td>Apple Xcode 9.4 (using clang 9.1.0)<\/td>\n@@ -282,2 +287,2 @@\n-<td style=\"text-align: left;\">Solaris<\/td>\n-<td style=\"text-align: left;\">Oracle Solaris Studio 12.4 (with compiler version 5.13)<\/td>\n+<td>Solaris<\/td>\n+<td>Oracle Solaris Studio 12.4 (with compiler version 5.13)<\/td>\n@@ -286,2 +291,2 @@\n-<td style=\"text-align: left;\">Windows<\/td>\n-<td style=\"text-align: left;\">Microsoft Visual Studio 2017 update 15.9.16<\/td>\n+<td>Windows<\/td>\n+<td>Microsoft Visual Studio 2017 update 15.9.16<\/td>\n@@ -300,1 +305,1 @@\n-<p>You will need the Xcode command lines developers tools to be able to build the JDK. (Actually, <em>only<\/em> the command lines tools are needed, not the IDE.) The simplest way to install these is to run:<\/p>\n+<p>You will need the Xcode command line developer tools to be able to build the JDK. (Actually, <em>only<\/em> the command line tools are needed, not the IDE.) The simplest way to install these is to run:<\/p>\n@@ -302,1 +307,5 @@\n-<p>It is advisable to keep an older version of Xcode for building the JDK when updating Xcode. This <a href=\"http:\/\/iosdevelopertips.com\/xcode\/install-multiple-versions-of-xcode.html\">blog page<\/a> has good suggestions on managing multiple Xcode versions. To use a specific version of Xcode, use <code>xcode-select -s<\/code> before running <code>configure<\/code>, or use <code>--with-toolchain-path<\/code> to point to the version of Xcode to use, e.g. <code>configure --with-toolchain-path=\/Applications\/Xcode8.app\/Contents\/Developer\/usr\/bin<\/code><\/p>\n+<p>When updating Xcode, it is advisable to keep an older version for building the JDK. To use a specific version of Xcode you have multiple options:<\/p>\n+<ul>\n+<li>Use <code>xcode-select -s<\/code> before running <code>configure<\/code>, e.g. <code>xcode-select -s \/Applications\/Xcode13.1.app<\/code>. The drawback is that the setting is system wide and you may have to revert it after an OpenJDK build.<\/li>\n+<li>Use configure option <code>--with-xcode-path<\/code>, e.g. <code>configure --with-xcode-path=\/Applications\/Xcode13.1.app<\/code> This allows using a specific Xcode version for an OpenJDK build, independently of the active Xcode version by <code>xcode-select<\/code>.<\/li>\n+<\/ul>\n@@ -365,1 +374,0 @@\n-<p>If you have Visual Studio installed but <code>configure<\/code> fails to detect it, it may be because of <a href=\"#spaces-in-path\">spaces in path<\/a>.<\/p>\n@@ -367,0 +375,1 @@\n+<p>If you have Visual Studio installed but <code>configure<\/code> fails to detect it, it may be because of <a href=\"#spaces-in-path\">spaces in path<\/a>.<\/p>\n@@ -406,1 +415,1 @@\n-<li>To install on Alpine Linux, try running <code>sudo apk add libx11-dev libxext-dev libxrender-dev libxtst-dev libxt-dev<\/code>.<\/li>\n+<li>To install on Alpine Linux, try running <code>sudo apk add libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev<\/code>.<\/li>\n@@ -648,1 +657,2 @@\n-<li><p>Install the libraries into the cross-compilation toolchain. For instance:<\/p>\n+<li>Install the libraries into the cross-compilation toolchain. For instance:<\/li>\n+<\/ul>\n@@ -651,2 +661,3 @@\n-dpkg-deb -x \/tmp\/libasound2-dev_1.0.25-4_armhf.deb .<\/code><\/pre><\/li>\n-<li><p>If alsa is not properly detected by <code>configure<\/code>, you can point it out by <code>--with-alsa<\/code>.<\/p><\/li>\n+dpkg-deb -x \/tmp\/libasound2-dev_1.0.25-4_armhf.deb .<\/code><\/pre>\n+<ul>\n+<li>If alsa is not properly detected by <code>configure<\/code>, you can point it out by <code>--with-alsa<\/code>.<\/li>\n","filename":"doc\/building.html","additions":47,"deletions":36,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -294,7 +294,7 @@\n- Operating system   Supported toolchain\n- ------------------ -------------------------\n- Linux              gcc, clang\n- macOS              Apple Xcode (using clang)\n- Solaris            Oracle Solaris Studio\n- AIX                IBM XL C\/C++\n- Windows            Microsoft Visual Studio\n+| Operating system   | Supported toolchain       |\n+| ------------------ | ------------------------- |\n+| Linux              | gcc, clang                |\n+| macOS              | Apple Xcode (using clang) |\n+| Solaris            | Oracle Solaris Studio     |\n+| AIX                | IBM XL C\/C++              |\n+| Windows            | Microsoft Visual Studio   |\n@@ -309,6 +309,6 @@\n- Operating system   Toolchain version\n- ------------------ -------------------------------------------------------\n- Linux              gcc 7.3.0\n- macOS              Apple Xcode 9.4 (using clang 9.1.0)\n- Solaris            Oracle Solaris Studio 12.4 (with compiler version 5.13)\n- Windows            Microsoft Visual Studio 2017 update 15.9.16\n+| Operating system   | Toolchain version                                       |\n+| ------------------ | ------------------------------------------------------- |\n+| Linux              | gcc 7.3.0                                               |\n+| macOS              | Apple Xcode 9.4 (using clang 9.1.0)                     |\n+| Solaris            | Oracle Solaris Studio 12.4 (with compiler version 5.13) |\n+| Windows            | Microsoft Visual Studio 2017 update 15.9.16             |\n@@ -337,2 +337,2 @@\n-You will need the Xcode command lines developers tools to be able to build\n-the JDK. (Actually, *only* the command lines tools are needed, not the IDE.)\n+You will need the Xcode command line developer tools to be able to build\n+the JDK. (Actually, *only* the command line tools are needed, not the IDE.)\n@@ -344,7 +344,7 @@\n-It is advisable to keep an older version of Xcode for building the JDK when\n-updating Xcode. This [blog page](\n-http:\/\/iosdevelopertips.com\/xcode\/install-multiple-versions-of-xcode.html) has\n-good suggestions on managing multiple Xcode versions. To use a specific version\n-of Xcode, use `xcode-select -s` before running `configure`, or use\n-`--with-toolchain-path` to point to the version of Xcode to use, e.g.\n-`configure --with-toolchain-path=\/Applications\/Xcode8.app\/Contents\/Developer\/usr\/bin`\n+When updating Xcode, it is advisable to keep an older version for building the JDK.\n+To use a specific version of Xcode you have multiple options:\n+\n+  * Use `xcode-select -s` before running `configure`, e.g. `xcode-select -s \/Applications\/Xcode13.1.app`. The drawback is that the setting\n+    is system wide and you may have to revert it after an OpenJDK build.\n+  * Use configure option `--with-xcode-path`, e.g. `configure --with-xcode-path=\/Applications\/Xcode13.1.app`\n+    This allows using a specific Xcode version for an OpenJDK build, independently of the active Xcode version by `xcode-select`.\n","filename":"doc\/building.md","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-<p>The main target “run-test” uses the jdk-image as the tested product. There is also an alternate target “exploded-run-test” that uses the exploded image instead. Not all tests will run successfully on the exploded image, but using this target can greatly improve rebuild times for certain workflows.<\/p>\n+<p>The main target &quot;run-test&quot; uses the jdk-image as the tested product. There is also an alternate target &quot;exploded-run-test&quot; that uses the exploded image instead. Not all tests will run successfully on the exploded image, but using this target can greatly improve rebuild times for certain workflows.<\/p>\n@@ -58,1 +58,1 @@\n-<p>To be able to run JTReg tests, <code>configure<\/code> needs to know where to find the JTReg test framework. If it is not picked up automatically by configure, use the <code>--with-jtreg=&lt;path to jtreg home&gt;<\/code> option to point to the JTReg framework. Note that this option should point to the JTReg home, i.e. the top directory, containing <code>lib\/jtreg.jar<\/code> etc. (An alternative is to set the <code>JT_HOME<\/code> environment variable to point to the JTReg home before running <code>configure<\/code>.)<\/p>\n+<p>To be able to run JTReg tests, <code>configure<\/code> needs to know where to find the JTReg test framework. If it is not picked up automatically by configure, use the <code>--with-jtreg=&lt;path to jtreg home&gt;<\/code> option to point to the JTReg framework. Note that this option should point to the JTReg home, i.e. the top directory, containing <code>lib\/jtreg.jar<\/code> etc. (An alternative is to set the <code>JT_HOME<\/code> environment variable to point to the JTReg home before running <code>configure<\/code>.)<\/p>\n@@ -85,1 +85,1 @@\n-<p>For Gtest, there is a separate test suite for each JVM variant. The JVM variant is defined by adding <code>\/&lt;variant&gt;<\/code> to the test descriptor, e.g. <code>gtest:Log\/client<\/code>. If you specify no variant, gtest will run once for each JVM variant present (e.g. server, client). So if you only have the server JVM present, then <code>gtest:all<\/code> will be equivalent to <code>gtest:all\/server<\/code>.<\/p>\n+<p>For Gtest, there is a separate test suite for each JVM variant. The JVM variant is defined by adding <code>\/&lt;variant&gt;<\/code> to the test descriptor, e.g. <code>gtest:Log\/client<\/code>. If you specify no variant, gtest will run once for each JVM variant present (e.g. server, client). So if you only have the server JVM present, then <code>gtest:all<\/code> will be equivalent to <code>gtest:all\/server<\/code>.<\/p>\n@@ -100,1 +100,1 @@\n-<p>All tests have their result stored in <code>build\/$BUILD\/test-results\/$TEST_ID<\/code>, where TEST_ID is a path-safe conversion from the fully qualified test descriptor, e.g. for <code>jtreg:jdk\/test:tier1<\/code> the TEST_ID is <code>jtreg_jdk_test_tier1<\/code>. This path is also printed in the log at the end of the test run.<\/p>\n+<p>All tests have their result stored in <code>build\/$BUILD\/test-results\/$TEST_ID<\/code>, where TEST_ID is a path-safe conversion from the fully qualified test descriptor, e.g. for <code>jtreg:jdk\/test:tier1<\/code> the TEST_ID is <code>jtreg_jdk_test_tier1<\/code>. This path is also printed in the log at the end of the test run.<\/p>\n@@ -106,1 +106,1 @@\n-<p>(Other ways are possible, e.g. using backslash: <code>JTREG=JOBS=1\\;TIMEOUT=8<\/code>. Also, as a special technique, the string <code>%20<\/code> will be replaced with space for certain options, e.g. <code>JTREG=VM_OPTIONS=-XshowSettings%20-Xlog:gc+ref=debug<\/code>. This can be useful if you have layers of scripts and have trouble getting proper quoting of command line arguments through.)<\/p>\n+<p>(Other ways are possible, e.g. using backslash: <code>JTREG=JOBS=1\\;TIMEOUT=8<\/code>. Also, as a special technique, the string <code>%20<\/code> will be replaced with space for certain options, e.g. <code>JTREG=VM_OPTIONS=-XshowSettings%20-Xlog:gc+ref=debug<\/code>. This can be useful if you have layers of scripts and have trouble getting proper quoting of command line arguments through.)<\/p>\n@@ -109,1 +109,1 @@\n-<p>Some keywords are valid across different test suites. If you want to run tests from multiple test suites, or just don’t want to care which test suite specific control variable to use, then you can use the general TEST_OPTS control variable.<\/p>\n+<p>Some keywords are valid across different test suites. If you want to run tests from multiple test suites, or just don't want to care which test suite specific control variable to use, then you can use the general TEST_OPTS control variable.<\/p>\n@@ -182,1 +182,1 @@\n-<p>For example, test\/jdk\/javax\/swing\/TooltipManager\/JMenuItemToolTipKeyBindingsTest\/JMenuItemToolTipKeyBindingsTest.java fails on MacOS because it uses <code>CTRL + F1<\/code> key sequence to show or hide tooltip message but the key combination is reserved by the operating system. To run the test correctly the default global key shortcut should be disabled using the steps described above, and then deselect “Turn keyboard access on or off” option which is responsible for <code>CTRL + F1<\/code> combination.<\/p>\n+<p>For example, test\/jdk\/javax\/swing\/TooltipManager\/JMenuItemToolTipKeyBindingsTest\/JMenuItemToolTipKeyBindingsTest.java fails on MacOS because it uses <code>CTRL + F1<\/code> key sequence to show or hide tooltip message but the key combination is reserved by the operating system. To run the test correctly the default global key shortcut should be disabled using the steps described above, and then deselect &quot;Turn keyboard access on or off&quot; option which is responsible for <code>CTRL + F1<\/code> combination.<\/p>\n@@ -186,1 +186,1 @@\n-<p>Type <code>gpedit<\/code> in the Search and then click Edit group policy; navigate to User Configuration -&gt; Administrative Templates -&gt; Windows Components -&gt; File Explorer; in the right-side pane look for “Turn off Windows key hotkeys” and double click on it; enable or disable hotkeys.<\/p>\n+<p>Type <code>gpedit<\/code> in the Search and then click Edit group policy; navigate to User Configuration -&gt; Administrative Templates -&gt; Windows Components -&gt; File Explorer; in the right-side pane look for &quot;Turn off Windows key hotkeys&quot; and double click on it; enable or disable hotkeys.<\/p>\n","filename":"doc\/testing.html","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -223,0 +223,12 @@\n+  AC_ARG_WITH([xcode-path], [AS_HELP_STRING([--with-xcode-path],\n+      [set up toolchain on Mac OS using a path to an Xcode installation])])\n+\n+  if test \"x$with_xcode_path\" != x; then\n+    if test \"x$OPENJDK_BUILD_OS\" = \"xmacosx\"; then\n+      UTIL_PREPEND_TO_PATH([TOOLCHAIN_PATH],\n+          $with_xcode_path\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/bin:$with_xcode_path\/Contents\/Developer\/usr\/bin)\n+    else\n+      AC_MSG_WARN([Option --with-xcode-path is only valid on Mac OS, ignoring.])\n+    fi\n+  fi\n+\n@@ -233,1 +245,1 @@\n-    if test \"x$DEVKIT_ROOT\" != x || \/usr\/bin\/xcodebuild -version >\/dev\/null 2>&1; then\n+    if test \"x$DEVKIT_ROOT\" != x || test \"x$TOOLCHAIN_PATH\" != x || \/usr\/bin\/xcodebuild -version >\/dev\/null 2>&1; then\n","filename":"make\/autoconf\/basic.m4","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"}]}