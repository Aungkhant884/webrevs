{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,0 @@\n- * Note: The test doesn't check the GC count if CMS is used.\n- *\n@@ -178,5 +176,0 @@\n-        if (VMRuntimeEnvUtils.isVMOptionEnabled(\"UseConcMarkSweepGC\")) {\n-            System.out.println(\"ConcMarkSweep is used, cannot count GC\");\n-            return;\n-        }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/gc\/HighWaterMarkTest.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,5 @@\n+ * @comment Don't run test in configurations where we can't reliably count number of metaspace triggered GCs\n+ * @requires vm.gc != null | !vm.opt.final.ClassUnloadingWithConcurrentMark\n+ * @requires vm.gc != \"G1\" | !vm.opt.final.ClassUnloadingWithConcurrentMark\n+ * @requires vm.gc != \"ConcMarkSweep\"\n+ * @requires vm.gc != \"Z\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/gc\/watermark_0_1\/TestDescription.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,5 @@\n+ * @comment Don't run test in configurations where we can't reliably count number of metaspace triggered GCs\n+ * @requires vm.gc != null | !vm.opt.final.ClassUnloadingWithConcurrentMark\n+ * @requires vm.gc != \"G1\" | !vm.opt.final.ClassUnloadingWithConcurrentMark\n+ * @requires vm.gc != \"ConcMarkSweep\"\n+ * @requires vm.gc != \"Z\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/gc\/watermark_10_20\/TestDescription.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,5 @@\n+ * @comment Don't run test in configurations where we can't reliably count number of metaspace triggered GCs\n+ * @requires vm.gc != null | !vm.opt.final.ClassUnloadingWithConcurrentMark\n+ * @requires vm.gc != \"G1\" | !vm.opt.final.ClassUnloadingWithConcurrentMark\n+ * @requires vm.gc != \"ConcMarkSweep\"\n+ * @requires vm.gc != \"Z\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/gc\/watermark_70_80\/TestDescription.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,5 @@\n+ * @comment Don't run test in configurations where we can't reliably count number of metaspace triggered GCs\n+ * @requires vm.gc != null | !vm.opt.final.ClassUnloadingWithConcurrentMark\n+ * @requires vm.gc != \"G1\" | !vm.opt.final.ClassUnloadingWithConcurrentMark\n+ * @requires vm.gc != \"ConcMarkSweep\"\n+ * @requires vm.gc != \"Z\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/gc\/watermark_99_100\/TestDescription.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -307,0 +307,1 @@\n+        vmOptFinalFlag(map, \"ClassUnloadingWithConcurrentMark\");\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}