{"files":[{"patch":"@@ -44,0 +44,2 @@\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n@@ -45,1 +47,5 @@\n-\n+\/*\n+ * If not explicitly specified the latest source and latest target\n+ * values are the defaults. If explicitly specified, the target value\n+ * has to be greater than or equal to the source value.\n+ *\/\n@@ -62,1 +68,36 @@\n-    void run() {\n+    public static final Set<String> RETIRED_SOURCES =\n+        Set.of(\"1.2\", \"1.3\", \"1.4\", \"1.5\");\n+\n+    public static final Set<String> VALID_SOURCES =\n+        Set.of(\"1.6\", \"1.7\", \"1.8\", \"1.9\", \"1.10\", \"11\");\n+\n+    public static final String LATEST_MAJOR_VERSION = \"55.0\";\n+\n+    static enum SourceTarget {\n+        SIX(true,     \"50.0\",  \"6\", Versions::checksrc16),\n+        SEVEN(true,   \"51.0\",  \"7\", Versions::checksrc17),\n+        EIGHT(true,   \"52.0\",  \"8\", Versions::checksrc18),\n+        NINE(true,    \"53.0\",  \"9\", Versions::checksrc19),\n+        TEN(true,     \"54.0\", \"10\", Versions::checksrc110),\n+        ELEVEN(false, \"55.0\", \"11\", Versions::checksrc111);\n+\n+        private final boolean dotOne;\n+        private final String classFileVer;\n+        private final String target;\n+        private final BiConsumer<Versions, String[]> checker;\n+\n+        private SourceTarget(boolean dotOne, String classFileVer, String target,\n+                             BiConsumer<Versions, String[]> checker) {\n+            this.dotOne = dotOne;\n+            this.classFileVer = classFileVer;\n+            this.target = target;\n+            this.checker = checker;\n+        }\n+\n+        public void checksrc(Versions version, String... args) {\n+            checker.accept(version, args);\n+        }\n+\n+        public boolean dotOne() {\n+            return dotOne;\n+        }\n@@ -64,0 +105,10 @@\n+        public String classFileVer() {\n+            return classFileVer;\n+        }\n+\n+        public String target() {\n+            return target;\n+        }\n+    }\n+\n+    void run() {\n@@ -67,69 +118,59 @@\n-        check(\"55.0\");\n-        check(\"55.0\", \"-source 1.6\");\n-        check(\"55.0\", \"-source 1.7\");\n-        check(\"55.0\", \"-source 1.8\");\n-        check(\"55.0\", \"-source 1.9\");\n-        check(\"55.0\", \"-source 1.10\");\n-        check(\"55.0\", \"-source 11\");\n-\n-        check_source_target(true, \"50.0\", \"6\", \"6\");\n-        check_source_target(true, \"51.0\", \"6\", \"7\");\n-        check_source_target(true, \"51.0\", \"7\", \"7\");\n-        check_source_target(true, \"52.0\", \"6\", \"8\");\n-        check_source_target(true, \"52.0\", \"7\", \"8\");\n-        check_source_target(true, \"52.0\", \"8\", \"8\");\n-        check_source_target(true, \"53.0\", \"6\", \"9\");\n-        check_source_target(true, \"53.0\", \"7\", \"9\");\n-        check_source_target(true, \"53.0\", \"8\", \"9\");\n-        check_source_target(true, \"53.0\", \"9\", \"9\");\n-        check_source_target(true, \"54.0\", \"6\", \"10\");\n-        check_source_target(true, \"54.0\", \"7\", \"10\");\n-        check_source_target(true, \"54.0\", \"8\", \"10\");\n-        check_source_target(true, \"54.0\", \"9\", \"10\");\n-        check_source_target(true, \"54.0\", \"10\", \"10\");\n-        check_source_target(false, \"55.0\", \"6\", \"11\");\n-        check_source_target(false, \"55.0\", \"7\", \"11\");\n-        check_source_target(false, \"55.0\", \"8\", \"11\");\n-        check_source_target(false, \"55.0\", \"9\", \"11\");\n-        check_source_target(false, \"55.0\", \"10\", \"11\");\n-        check_source_target(false, \"55.0\", \"11\", \"11\");\n-\n-        checksrc16(\"-source 1.6\");\n-        checksrc16(\"-source 6\");\n-        checksrc16(\"-source 1.6\", \"-target 1.6\");\n-        checksrc16(\"-source 6\", \"-target 6\");\n-        checksrc17(\"-source 1.7\");\n-        checksrc17(\"-source 7\");\n-        checksrc17(\"-source 1.7\", \"-target 1.7\");\n-        checksrc17(\"-source 7\", \"-target 7\");\n-        checksrc18(\"-source 1.8\");\n-        checksrc18(\"-source 8\");\n-        checksrc18(\"-source 1.8\", \"-target 1.8\");\n-        checksrc18(\"-source 8\", \"-target 8\");\n-        checksrc19(\"-source 1.9\");\n-        checksrc19(\"-source 9\");\n-        checksrc19(\"-source 1.9\", \"-target 1.9\");\n-        checksrc19(\"-source 9\", \"-target 9\");\n-        checksrc110();\n-        checksrc110(\"-source 1.10\");\n-        checksrc110(\"-source 10\");\n-        checksrc110(\"-source 1.10\", \"-target 1.10\");\n-        checksrc110(\"-source 10\", \"-target 10\");\n-        checksrc111(\"-source 11\");\n-        checksrc111(\"-source 11\", \"-target 11\");\n-        checksrc111(\"-target 11\");\n-\n-        fail(\"-source 7\", \"-target 1.6\", \"Base.java\");\n-        fail(\"-source 8\", \"-target 1.6\", \"Base.java\");\n-        fail(\"-source 8\", \"-target 1.7\", \"Base.java\");\n-        fail(\"-source 9\", \"-target 1.7\", \"Base.java\");\n-        fail(\"-source 9\", \"-target 1.8\", \"Base.java\");\n-        fail(\"-source 10\", \"-target 1.7\", \"Base.java\");\n-        fail(\"-source 10\", \"-target 1.8\", \"Base.java\");\n-        fail(\"-source 11\", \"-target 1.9\", \"Base.java\");\n-        fail(\"-source 11\", \"-target 1.10\", \"Base.java\");\n-\n-        fail(\"-source 1.5\", \"-target 1.5\", \"Base.java\");\n-        fail(\"-source 1.4\", \"-target 1.4\", \"Base.java\");\n-        fail(\"-source 1.3\", \"-target 1.3\", \"Base.java\");\n-        fail(\"-source 1.2\", \"-target 1.2\", \"Base.java\");\n+        check(LATEST_MAJOR_VERSION);\n+        for (String source : VALID_SOURCES) {\n+            check(LATEST_MAJOR_VERSION, \"-source \" + source);\n+        }\n+\n+        \/\/ Verify that a -source value less than a -target value is\n+        \/\/ accepted and that the resulting class files are dependent\n+        \/\/ on the target setting alone.\n+        SourceTarget[] sourceTargets = SourceTarget.values();\n+        for (int i = 0; i < sourceTargets.length; i++) {\n+            SourceTarget st = sourceTargets[i];\n+            String classFileVer = st.classFileVer();\n+            String target = st.target();\n+            boolean dotOne = st.dotOne();\n+            check_source_target(dotOne, classFileVer, target, target);\n+            for (int j = i; j > 0; j--) {\n+                String source = sourceTargets[j].target();\n+                check_source_target(dotOne, classFileVer, source, target);\n+            }\n+        }\n+\n+        \/\/ Verify acceptance of different combinations of -source N,\n+        \/\/ -target M; N <= M\n+        for (int i = 0; i < sourceTargets.length; i++) {\n+            SourceTarget st = sourceTargets[i];\n+\n+            st.checksrc(this, \"-source \" + st.target());\n+            st.checksrc(this, \"-source \" + st.target(), \"-target \" + st.target());\n+\n+            if (st.dotOne()) {\n+                st.checksrc(this, \"-source 1.\" + st.target());\n+                st.checksrc(this, \"-source 1.\" + st.target(), \"-target 1.\" + st.target());\n+            }\n+\n+            if (i == sourceTargets.length) {\n+                \/\/ Can use -target without -source setting only for\n+                \/\/ most recent target since the most recent source is\n+                \/\/ the default.\n+                st.checksrc(this, \"-target \" + st.target());\n+\n+                if (!st.classFileVer().equals(LATEST_MAJOR_VERSION)) {\n+                    throw new RuntimeException(st +\n+                                               \"does not have class file version\" +\n+                                               LATEST_MAJOR_VERSION);\n+                }\n+            }\n+        }\n+\n+        \/\/ Verify that -source N -target (N-1) is rejected\n+        for (int i = 1 \/* Skip zeroth value *\/; i < sourceTargets.length; i++) {\n+            fail(\"-source \" + sourceTargets[i].target(),\n+                 \"-target \" + sourceTargets[i-1].target(),\n+                 \"Base.java\");\n+        }\n+\n+        \/\/ Previously supported source\/target values\n+        for (String source  : RETIRED_SOURCES) {\n+            fail(\"-source \" + source, \"-target \" + source, \"Base.java\");\n+        }\n@@ -248,1 +289,11 @@\n-        checksrc110(args);\n+        int asize = args.length;\n+        String[] newargs = new String[asize+1];\n+        System.arraycopy(args, 0, newargs,0 , asize);\n+        newargs[asize] = \"New17.java\";\n+        pass(newargs);\n+        newargs[asize] = \"New18.java\";\n+        pass(newargs);\n+        newargs[asize] = \"New110.java\";\n+        pass(newargs);\n+        newargs[asize] = \"New111.java\";\n+        pass(newargs);\n@@ -390,0 +441,11 @@\n+        \/*\n+         * Create a file with a new feature in 11, not in 10 : var for lambda parameters\n+         *\/\n+        writeSourceFile(\"New111.java\",\n+            \"public class New111 { \\n\" +\n+            \"    static java.util.function.Function<String,String> f = (var x) -> x.substring(0);\\n\" +\n+            \"    void m(String name) { \\n\" +\n+            \"    var tmp = new Thread(() -> { }, f.apply(name)); \\n\" +\n+            \"    } \\n\" +\n+            \"} \\n\"\n+        );\n","filename":"test\/langtools\/tools\/javac\/versions\/Versions.java","additions":134,"deletions":72,"binary":false,"changes":206,"status":"modified"}]}