{"files":[{"patch":"@@ -857,0 +857,2 @@\n+  methodHandle resolved_method;\n+\n@@ -862,13 +864,4 @@\n-    if (JvmtiExport::can_hotswap_or_post_breakpoint()) {\n-      int retry_count = 0;\n-      while (info.resolved_method()->is_old()) {\n-        \/\/ It is very unlikely that method is redefined more than 100 times\n-        \/\/ in the middle of resolve. If it is looping here more than 100 times\n-        \/\/ means then there could be a bug here.\n-        guarantee((retry_count++ < 100),\n-                  \"Could not resolve to latest version of redefined method\");\n-        \/\/ method is redefined in the middle of resolve so re-try.\n-        LinkResolver::resolve_invoke(info, receiver, pool,\n-                                     last_frame.get_index_u2_cpcache(bytecode), bytecode,\n-                                     CHECK);\n-      }\n+    if (JvmtiExport::can_hotswap_or_post_breakpoint() && info.resolved_method()->is_old()) {\n+      resolved_method = methodHandle(thread, info.resolved_method()->get_new_method());\n+    } else {\n+      resolved_method = info.resolved_method();\n@@ -884,2 +877,1 @@\n-    if (info.resolved_method()->method_holder() ==\n-                                            SystemDictionary::Object_klass()) {\n+    if (resolved_method->method_holder() == SystemDictionary::Object_klass()) {\n@@ -890,2 +882,1 @@\n-      methodHandle rm = info.resolved_method();\n-      assert(rm->is_final() || info.has_vtable_index(),\n+      assert(resolved_method->is_final() || info.has_vtable_index(),\n@@ -893,1 +884,1 @@\n-    } else if (!info.resolved_method()->has_itable_index()) {\n+    } else if (!resolved_method->has_itable_index()) {\n@@ -899,1 +890,1 @@\n-      int index = info.resolved_method()->itable_index();\n+      int index = resolved_method->itable_index();\n@@ -919,1 +910,1 @@\n-      info.resolved_method(),\n+      resolved_method,\n@@ -925,1 +916,1 @@\n-      info.resolved_method(),\n+      resolved_method,\n@@ -932,1 +923,1 @@\n-      info.resolved_method(),\n+      resolved_method,\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":13,"deletions":22,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -987,0 +987,9 @@\n+  Method* get_new_method() const {\n+    InstanceKlass* holder = method_holder();\n+    Method* new_method = holder->method_with_idnum(orig_method_idnum());\n+\n+    assert(new_method != NULL, \"method_with_idnum() should not be null\");\n+    assert(this != new_method, \"sanity check\");\n+    return new_method;\n+  }\n+\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}