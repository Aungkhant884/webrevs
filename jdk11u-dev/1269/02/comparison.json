{"files":[{"patch":"@@ -61,1 +61,0 @@\n-    vm.hasSAandCanAttach \\\n","filename":"test\/hotspot\/jtreg\/TEST.ROOT","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @requires vm.hasSAandCanAttach & vm.flightRecorder != true & vm.compMode != \"Xint\" & vm.debug == true & vm.flavor == \"client\"\n+ * @requires vm.hasSA & vm.flightRecorder != true & vm.compMode != \"Xint\" & vm.debug == true & vm.flavor == \"client\"\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/TestSAClient.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @requires vm.hasSAandCanAttach & vm.flightRecorder != true & vm.compMode != \"Xint\" & vm.debug == true & vm.flavor == \"server\"\n+ * @requires vm.hasSA & vm.flightRecorder != true & vm.compMode != \"Xint\" & vm.debug == true & vm.flavor == \"server\"\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/TestSAServer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @requires vm.hasSAandCanAttach\n+ * @requires vm.hasSA\n@@ -42,0 +42,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -50,0 +51,2 @@\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n+\n@@ -62,1 +65,1 @@\n-        ProcessBuilder pb = new ProcessBuilder(jmap.getCommand());\n+        ProcessBuilder pb = SATestUtils.createProcessBuilder(jmap);\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/CompressedClassSpaceSizeInJmapHeap.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.test.lib.Asserts;\n@@ -42,0 +43,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -43,1 +45,0 @@\n-import jdk.test.lib.Asserts;\n@@ -49,1 +50,1 @@\n- * @requires vm.hasSAandCanAttach & (vm.bits == \"64\" & os.maxMemory > 8g)\n+ * @requires vm.hasSA & (vm.bits == \"64\" & os.maxMemory > 8g)\n@@ -74,2 +75,1 @@\n-        ProcessBuilder processBuilder = new ProcessBuilder();\n-        processBuilder.command(launcher.getCommand());\n+        ProcessBuilder processBuilder = SATestUtils.createProcessBuilder(launcher);\n@@ -90,0 +90,1 @@\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n","filename":"test\/hotspot\/jtreg\/resourcehogs\/serviceability\/sa\/TestHeapDumpForLargeArray.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.hasSAandCanAttach & vm.cds\n+ * @requires vm.hasSA & vm.cds\n@@ -42,0 +42,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -53,2 +54,1 @@\n-        ProcessBuilder processBuilder = new ProcessBuilder();\n-        processBuilder.command(launcher.getCommand());\n+        ProcessBuilder processBuilder = SATestUtils.createProcessBuilder(launcher);\n@@ -67,0 +67,1 @@\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/CDSJMapClstats.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -71,14 +71,10 @@\n-            \/\/ Output could be null if the test was skipped due to\n-            \/\/ attach permission issues.\n-            if (output != null) {\n-                String cmdStr = null;\n-                String[] parts = output.split(\"LingeredAppWithTrivialMain.main\");\n-                String[] tokens = parts[1].split(\" \");\n-                for (String token : tokens) {\n-                    if (token.contains(\"pc\")) {\n-                        String[] address = token.split(\"=\");\n-                        \/\/ address[1] represents the address of the Method\n-                        cmdStr = \"findpc \" + address[1].replace(\",\",\"\");\n-                        cmds.add(cmdStr);\n-                        break;\n-                    }\n+            String cmdStr = null;\n+            String[] parts = output.split(\"LingeredAppWithTrivialMain.main\");\n+            String[] tokens = parts[1].split(\" \");\n+            for (String token : tokens) {\n+                if (token.contains(\"pc\")) {\n+                    String[] address = token.split(\"=\");\n+                    \/\/ address[1] represents the address of the Method\n+                    cmdStr = \"findpc \" + address[1].replace(\",\",\"\");\n+                    cmds.add(cmdStr);\n+                    break;\n@@ -86,0 +82,1 @@\n+            }\n@@ -87,3 +84,3 @@\n-                Map<String, List<String>> expStrMap = new HashMap<>();\n-                if (withXcomp) {\n-                    expStrMap.put(cmdStr, List.of(\n+            Map<String, List<String>> expStrMap = new HashMap<>();\n+            if (withXcomp) {\n+                expStrMap.put(cmdStr, List.of(\n@@ -94,2 +91,2 @@\n-                } else {\n-                    expStrMap.put(cmdStr, List.of(\n+            } else {\n+                expStrMap.put(cmdStr, List.of(\n@@ -97,3 +94,0 @@\n-                }\n-\n-                test.run(theApp.getPid(), cmds, expStrMap, null);\n@@ -101,0 +95,2 @@\n+\n+            test.run(theApp.getPid(), cmds, expStrMap, null);\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbFindPC.java","additions":18,"deletions":22,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -39,1 +40,1 @@\n- * @requires vm.hasSAandCanAttach\n+ * @requires vm.hasSA\n@@ -65,2 +66,1 @@\n-            ProcessBuilder pb = new ProcessBuilder();\n-            pb.command(launcher.getCommand());\n+            ProcessBuilder pb = SATestUtils.createProcessBuilder(launcher);\n@@ -90,0 +90,1 @@\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbJstackXcompStress.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,2 +36,0 @@\n-import jtreg.SkippedException;\n-\n@@ -48,1 +46,0 @@\n-    private boolean needPrivileges;\n@@ -52,1 +49,0 @@\n-        needPrivileges = false;\n@@ -69,6 +65,1 @@\n-        List<String> cmdStringList = Arrays.asList(launcher.getCommand());\n-        if (needPrivileges) {\n-            cmdStringList = SATestUtils.addPrivileges(cmdStringList);\n-        }\n-        ProcessBuilder processBuilder = new ProcessBuilder(cmdStringList);\n-        processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);\n+        ProcessBuilder processBuilder = SATestUtils.createProcessBuilder(launcher);\n@@ -183,12 +174,1 @@\n-        if (!Platform.shouldSAAttach()) {\n-            if (Platform.isOSX() && SATestUtils.canAddPrivileges()) {\n-                needPrivileges = true;\n-            }\n-            else {\n-               \/\/ Skip the test if we don't have enough permissions to attach\n-               \/\/ and cannot add privileges.\n-               throw new SkippedException(\n-                   \"SA attach not expected to work. Insufficient privileges.\");\n-           }\n-        }\n-\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbLauncher.java","additions":2,"deletions":22,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -27,2 +27,1 @@\n- * @requires vm.hasSAandCanAttach\n- * @requires os.family != \"mac\"\n+ * @requires vm.hasSA\n@@ -41,2 +40,0 @@\n-\n-import jdk.test.lib.Utils;\n@@ -46,0 +43,2 @@\n+import jdk.test.lib.SA.SATestUtils;\n+import jdk.test.lib.Utils;\n@@ -52,1 +51,0 @@\n-    private static ProcessBuilder processBuilder = new ProcessBuilder();\n@@ -63,1 +61,1 @@\n-        processBuilder.command(launcher.getCommand());\n+        ProcessBuilder processBuilder = SATestUtils.createProcessBuilder(launcher);\n@@ -72,0 +70,1 @@\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n@@ -96,1 +95,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/DeadlockDetectionTest.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -37,1 +38,1 @@\n- * @requires vm.hasSAandCanAttach\n+ * @requires vm.hasSA\n@@ -44,1 +45,1 @@\n-\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n@@ -57,2 +58,1 @@\n-            ProcessBuilder pb = new ProcessBuilder();\n-            pb.command(jhsdbLauncher.getCommand());\n+            ProcessBuilder pb = SATestUtils.createProcessBuilder(jhsdbLauncher);\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/JhsdbThreadInfoTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -37,1 +38,1 @@\n- * @requires vm.hasSAandCanAttach\n+ * @requires vm.hasSA\n@@ -53,0 +54,1 @@\n+        SATestUtils.addPrivilegesIfNeeded(pb);\n@@ -72,0 +74,1 @@\n+        SATestUtils.addPrivilegesIfNeeded(pb);\n@@ -86,0 +89,1 @@\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestClassDump.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @requires vm.hasSAandCanAttach\n+ * @requires vm.hasSA\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestClhsdbJstackLock.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.test.lib.Asserts;\n@@ -41,0 +42,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -42,1 +44,0 @@\n-import jdk.test.lib.Asserts;\n@@ -47,1 +48,1 @@\n- * @requires vm.hasSAandCanAttach & os.family != \"mac\"\n+ * @requires vm.hasSA\n@@ -106,0 +107,1 @@\n+        SATestUtils.addPrivilegesIfNeeded(processBuilder);\n@@ -118,0 +120,1 @@\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestCpoolForInvokeDynamic.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.test.lib.Asserts;\n@@ -40,0 +41,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -41,1 +43,0 @@\n-import jdk.test.lib.Asserts;\n@@ -46,1 +47,1 @@\n- * @requires vm.hasSAandCanAttach & os.family != \"mac\"\n+ * @requires vm.hasSA\n@@ -112,0 +113,1 @@\n+        SATestUtils.addPrivilegesIfNeeded(processBuilder);\n@@ -127,1 +129,1 @@\n-\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestDefaultMethods.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -42,1 +43,1 @@\n- * @requires vm.hasSAandCanAttach & os.family != \"mac\"\n+ * @requires vm.hasSA\n@@ -85,0 +86,1 @@\n+        SATestUtils.addPrivilegesIfNeeded(processBuilder);\n@@ -91,0 +93,1 @@\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestG1HeapRegion.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.test.lib.Asserts;\n@@ -42,0 +43,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -43,1 +45,0 @@\n-import jdk.test.lib.Asserts;\n@@ -52,1 +53,1 @@\n- * @requires vm.hasSAandCanAttach & os.family != \"mac\"\n+ * @requires vm.hasSA\n@@ -100,2 +101,1 @@\n-        ProcessBuilder processBuilder = new ProcessBuilder();\n-        processBuilder.command(launcher.getCommand());\n+        ProcessBuilder processBuilder = SATestUtils.createProcessBuilder(launcher);\n@@ -115,1 +115,1 @@\n-\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestHeapDumpForInvokeDynamic.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.Asserts;\n@@ -37,0 +39,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -38,2 +41,0 @@\n-import jdk.test.lib.apps.LingeredApp;\n-import jdk.test.lib.Asserts;\n@@ -47,1 +48,1 @@\n- * @requires vm.hasSAandCanAttach\n+ * @requires vm.hasSA\n@@ -125,0 +126,1 @@\n+            SATestUtils.addPrivilegesIfNeeded(processBuilder);\n@@ -177,1 +179,1 @@\n-\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestInstanceKlassSize.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import jdk.test.lib.Asserts;\n@@ -38,0 +39,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -39,1 +41,0 @@\n-import jdk.test.lib.Asserts;\n@@ -44,1 +45,1 @@\n- * @requires vm.hasSAandCanAttach\n+ * @requires vm.hasSA\n@@ -113,0 +114,1 @@\n+        SATestUtils.addPrivilegesIfNeeded(processBuilder);\n@@ -150,0 +152,1 @@\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestInstanceKlassSizeForInterface.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @requires vm.hasSAandCanAttach\n+ * @requires vm.hasSA\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestIntConstant.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -42,1 +43,1 @@\n- * @requires vm.hasSAandCanAttach\n+ * @requires vm.hasSA\n@@ -50,1 +51,1 @@\n-\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n@@ -65,2 +66,1 @@\n-            ProcessBuilder pb = new ProcessBuilder();\n-            pb.command(launcher.getCommand());\n+            ProcessBuilder pb = SATestUtils.createProcessBuilder(launcher);\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestJhsdbJstackLock.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -38,1 +39,1 @@\n- * @requires (os.family == \"linux\") & (vm.hasSAandCanAttach)\n+ * @requires (os.family == \"linux\") & (vm.hasSA)\n@@ -139,2 +140,1 @@\n-            ProcessBuilder pb = new ProcessBuilder();\n-            pb.command(launcher.getCommand());\n+            ProcessBuilder pb = SATestUtils.createProcessBuilder(launcher);\n@@ -165,1 +165,1 @@\n-\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestJhsdbJstackMixed.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @requires vm.hasSAandCanAttach\n+ * @requires vm.hasSA\n@@ -44,1 +44,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestPrintMdo.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -42,1 +43,1 @@\n- * @requires vm.hasSAandCanAttach & os.family != \"mac\"\n+ * @requires vm.hasSA\n@@ -77,0 +78,1 @@\n+        SATestUtils.addPrivilegesIfNeeded(processBuilder);\n@@ -83,0 +85,1 @@\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestRevPtrsForInvokeDynamic.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @requires vm.hasSAandCanAttach\n+ * @requires vm.hasSA\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @requires vm.hasSAandCanAttach & vm.gc != \"Z\"\n+ * @requires vm.hasSA & vm.gc != \"Z\"\n@@ -48,1 +48,1 @@\n- * @requires vm.hasSAandCanAttach & vm.gc == \"Z\"\n+ * @requires vm.hasSA & vm.gc == \"Z\"\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestUniverse.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -44,1 +45,1 @@\n- * @requires vm.hasSAandCanAttach\n+ * @requires vm.hasSA\n@@ -62,0 +63,1 @@\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n@@ -104,2 +106,1 @@\n-            ProcessBuilder jMapProcessBuilder = new ProcessBuilder(\n-                    jMapLauncher.getCommand());\n+            ProcessBuilder jMapProcessBuilder = SATestUtils.createProcessBuilder(jMapLauncher);\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/jmap-hprof\/JMapHProfLargeHeapTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @requires vm.hasSAandCanAttach\n+ * @requires vm.hasSA\n@@ -39,0 +39,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -55,1 +56,1 @@\n-        Process jhsdb = (new ProcessBuilder(jhsdbLauncher.getCommand())).start();\n+        Process jhsdb = (SATestUtils.createProcessBuilder(jhsdbLauncher)).start();\n@@ -113,0 +114,1 @@\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/sadebugd\/DebugdConnectTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @requires vm.hasSAandCanAttach\n+ * @requires vm.hasSA\n@@ -41,0 +41,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -43,0 +44,2 @@\n+import jtreg.SkippedException;\n+\n@@ -48,0 +51,14 @@\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n+\n+        if (SATestUtils.needsPrivileges()) {\n+            \/\/ This tests has issues if you try adding privileges on OSX. The debugd process cannot\n+            \/\/ be killed if you do this (because it is a root process and the test is not), so the destroy()\n+            \/\/ call fails to do anything, and then waitFor() will time out. If you try to manually kill it with\n+            \/\/ a \"sudo kill\" command, that seems to work, but then leaves the LingeredApp it was\n+            \/\/ attached to in a stuck state for some unknown reason, causing the stopApp() call\n+            \/\/ to timeout. For that reason we don't run this test when privileges are needed. Note\n+            \/\/ it does appear to run fine as root, so we still allow it to run on OSX when privileges\n+            \/\/ are not required.\n+            throw new SkippedException(\"Cannot run this test on OSX if adding privileges is required.\");\n+        }\n+\n@@ -58,1 +75,1 @@\n-            ProcessBuilder pb = new ProcessBuilder(jhsdbLauncher.getCommand());\n+            ProcessBuilder pb = SATestUtils.createProcessBuilder(jhsdbLauncher);\n@@ -62,1 +79,1 @@\n-            Process debugd = startProcess(\"debugd\", pb, null, l -> l.contains(GOLDEN), 0, TimeUnit.SECONDS);\n+            Process debugd = startProcess(\"debugd\", pb, null, l -> l.contains(GOLDEN), 20, TimeUnit.SECONDS);\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/sadebugd\/SADebugDTest.java","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -54,1 +54,2 @@\n-                \"hasSA\", \"shouldSAAttach\", \"isTieredSupported\", \"areCustomLoadersSupportedForCDS\");\n+                \"hasSA\", \"isRoot\", \"isTieredSupported\", \"areCustomLoadersSupportedForCDS\",\n+                \"isSignedOSX\");\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/TestMutuallyExclusivePlatformPredicates.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-    vm.hasSAandCanAttach \\\n","filename":"test\/jdk\/TEST.ROOT","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.hasSAandCanAttach\n+ * @requires vm.hasSA\n@@ -46,0 +46,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -81,1 +82,1 @@\n-            ProcessBuilder processBuilder = new ProcessBuilder(launcher.getCommand());\n+            ProcessBuilder processBuilder = SATestUtils.createProcessBuilder(launcher);\n@@ -125,7 +126,0 @@\n-\n-        if (Platform.isOSX()) {\n-            \/\/ Coredump stackwalking is not implemented for Darwin\n-            System.out.println(\"This test is not expected to work on OS X. Skipping\");\n-            return;\n-        }\n-\n@@ -142,1 +136,1 @@\n-            ProcessBuilder processBuilder = new ProcessBuilder(launcher.getCommand());\n+            ProcessBuilder processBuilder = SATestUtils.createProcessBuilder(launcher);\n@@ -178,1 +172,1 @@\n-            ProcessBuilder processBuilder = new ProcessBuilder(launcher.getCommand());\n+            ProcessBuilder processBuilder = SATestUtils.createProcessBuilder(launcher);\n@@ -201,0 +195,1 @@\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n","filename":"test\/jdk\/sun\/tools\/jhsdb\/BasicLauncherTest.java","additions":6,"deletions":11,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.hasSAandCanAttach\n+ * @requires vm.hasSA\n@@ -42,1 +42,2 @@\n-import jdk.test.lib.Platform;\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.hprof.parser.HprofReader;\n@@ -46,2 +47,1 @@\n-import jdk.test.lib.apps.LingeredApp;\n-import jdk.test.lib.hprof.parser.HprofReader;\n+import jdk.test.lib.SA.SATestUtils;\n@@ -76,1 +76,1 @@\n-            ProcessBuilder processBuilder = new ProcessBuilder(launcher.getCommand());\n+            ProcessBuilder processBuilder = SATestUtils.createProcessBuilder(launcher);\n@@ -129,1 +129,1 @@\n-\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n","filename":"test\/jdk\/sun\/tools\/jhsdb\/HeapDumpTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @requires vm.hasSAandCanAttach\n+ * @requires vm.hasSA\n@@ -41,0 +41,1 @@\n+import jdk.test.lib.hprof.parser.HprofReader;\n@@ -45,1 +46,1 @@\n-import jdk.test.lib.hprof.parser.HprofReader;\n+import jdk.test.lib.SA.SATestUtils;\n@@ -69,1 +70,1 @@\n-            ProcessBuilder processBuilder = new ProcessBuilder(launcher.getCommand());\n+            ProcessBuilder processBuilder = SATestUtils.createProcessBuilder(launcher);\n@@ -151,1 +152,1 @@\n-\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n","filename":"test\/jdk\/sun\/tools\/jhsdb\/JShellHeapDumpTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -33,1 +34,0 @@\n-import jdk.test.lib.Platform;\n@@ -40,1 +40,1 @@\n- * @requires vm.hasSAandCanAttach\n+ * @requires vm.hasSA\n@@ -121,0 +121,1 @@\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n","filename":"test\/jdk\/sun\/tools\/jhsdb\/heapconfig\/JMapHeapConfigTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.test.lib.SA.SATestUtils;\n@@ -112,2 +113,2 @@\n-                ProcessBuilder processBuilder = new ProcessBuilder(launcher.getCommand());\n-                processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);\n+                ProcessBuilder processBuilder = SATestUtils.createProcessBuilder(launcher);\n+               processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);\n","filename":"test\/jdk\/sun\/tools\/jhsdb\/heapconfig\/TmtoolTestScenario.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import jdk.test.lib.Platform;\n+import jdk.test.lib.JDKToolLauncher;\n@@ -33,1 +33,0 @@\n-\n@@ -35,1 +34,2 @@\n-import jdk.test.lib.JDKToolLauncher;\n+\n+import jtreg.SkippedException;\n@@ -40,1 +40,1 @@\n- * @requires vm.hasSAandCanAttach\n+ * @requires vm.hasSA\n@@ -42,1 +42,1 @@\n- * @build jdk.test.lib.apps.* jdk.test.lib.Platform\n+ * @build jdk.test.lib.apps.*\n@@ -88,3 +88,2 @@\n-                System.out.println(\"Test can't run for some reason. Skipping\");\n-            }\n-            else {\n+                throw new SkippedException(\"Test can't run for some reason\");\n+            } else {\n@@ -94,1 +93,0 @@\n-\n","filename":"test\/jdk\/sun\/tools\/jstack\/DeadlockDetectionTest.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -102,3 +102,0 @@\n-        \/\/ vm.hasSAandCanAttach is \"true\" if the VM contains the serviceability agent\n-        \/\/ and jhsdb and it can attach to the VM.\n-        map.put(\"vm.hasSAandCanAttach\", this::vmHasSAandCanAttach);\n@@ -325,13 +322,0 @@\n-    \/**\n-     * @return \"true\" if VM has a serviceability agent and it can\n-     * attach to the VM.\n-     *\/\n-    protected String vmHasSAandCanAttach() {\n-        try {\n-            return \"\" + Platform.shouldSAAttach();\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-            return errorWithMessage(\"Checking whether SA can attach to the VM failed.:\" + e);\n-        }\n-    }\n-\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n@@ -29,5 +31,0 @@\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.RandomAccessFile;\n-import java.util.regex.Pattern;\n@@ -36,2 +33,2 @@\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Pattern;\n@@ -235,0 +232,4 @@\n+    public static boolean isRoot() {\n+        return userName.equals(\"root\");\n+    }\n+\n@@ -255,3 +256,1 @@\n-     * Return a boolean for whether we expect to be able to attach\n-     * the SA to our own processes on this system.  This requires\n-     * that SA is ported\/available on this platform.\n+     * Return true if the test JDK is signed, otherwise false. Only valid on OSX.\n@@ -259,9 +258,5 @@\n-    public static boolean shouldSAAttach() throws IOException {\n-        if (!hasSA()) return false;\n-        if (isLinux()) {\n-            return canPtraceAttachLinux();\n-        } else if (isOSX()) {\n-            return canAttachOSX();\n-        } else {\n-            \/\/ Other platforms expected to work:\n-            return true;\n+    public static boolean isSignedOSX() throws IOException {\n+        \/\/ We only care about signed binaries for 10.14 and later (actually 10.14.5, but\n+        \/\/ for simplicity we'll also include earlier 10.14 versions).\n+        if (getOsVersionMajor() == 10 && getOsVersionMinor() < 14) {\n+            return false; \/\/ assume not signed\n@@ -269,1 +264,0 @@\n-    }\n@@ -271,20 +265,6 @@\n-    \/**\n-     * On Linux, first check the SELinux boolean \"deny_ptrace\" and return false\n-     * as we expect to be denied if that is \"1\".  Then expect permission to attach\n-     * if we are root, so return true.  Then return false for an expected denial\n-     * if \"ptrace_scope\" is 1, and true otherwise.\n-     *\/\n-    private static boolean canPtraceAttachLinux() throws IOException {\n-        \/\/ SELinux deny_ptrace:\n-        File deny_ptrace = new File(\"\/sys\/fs\/selinux\/booleans\/deny_ptrace\");\n-        if (deny_ptrace.exists()) {\n-            try (RandomAccessFile file = AccessController.doPrivileged(\n-                    (PrivilegedExceptionAction<RandomAccessFile>) () -> new RandomAccessFile(deny_ptrace, \"r\"))) {\n-                if (file.readByte() != '0') {\n-                    return false;\n-                }\n-            } catch (PrivilegedActionException e) {\n-                @SuppressWarnings(\"unchecked\")\n-                IOException t = (IOException) e.getException();\n-                throw t;\n-            }\n+        \/\/ Find the path to the java binary.\n+        String jdkPath = System.getProperty(\"java.home\");\n+        Path javaPath = Paths.get(jdkPath + \"\/bin\/java\");\n+        String javaFileName = javaPath.toAbsolutePath().toString();\n+        if (!javaPath.toFile().exists()) {\n+            throw new FileNotFoundException(\"Could not find file \" + javaFileName);\n@@ -293,21 +273,10 @@\n-        \/\/ YAMA enhanced security ptrace_scope:\n-        \/\/ 0 - a process can PTRACE_ATTACH to any other process running under the same uid\n-        \/\/ 1 - restricted ptrace: a process must be a children of the inferior or user is root\n-        \/\/ 2 - only processes with CAP_SYS_PTRACE may use ptrace or user is root\n-        \/\/ 3 - no attach: no processes may use ptrace with PTRACE_ATTACH\n-        File ptrace_scope = new File(\"\/proc\/sys\/kernel\/yama\/ptrace_scope\");\n-        if (ptrace_scope.exists()) {\n-            try (RandomAccessFile file = AccessController.doPrivileged(\n-                    (PrivilegedExceptionAction<RandomAccessFile>) () -> new RandomAccessFile(ptrace_scope, \"r\"))) {\n-                byte yama_scope = file.readByte();\n-                if (yama_scope == '3') {\n-                    return false;\n-                }\n-\n-                if (!userName.equals(\"root\") && yama_scope != '0') {\n-                    return false;\n-                }\n-            } catch (PrivilegedActionException e) {\n-                @SuppressWarnings(\"unchecked\")\n-                IOException t = (IOException) e.getException();\n-                throw t;\n+        \/\/ Run codesign on the java binary.\n+        ProcessBuilder pb = new ProcessBuilder(\"codesign\", \"-d\", \"-v\", javaFileName);\n+        pb.redirectError(ProcessBuilder.Redirect.DISCARD);\n+        pb.redirectOutput(ProcessBuilder.Redirect.DISCARD);\n+        Process codesignProcess = pb.start();\n+        try {\n+            if (codesignProcess.waitFor(10, TimeUnit.SECONDS) == false) {\n+                System.err.println(\"Timed out waiting for the codesign process to complete. Assuming not signed.\");\n+                codesignProcess.destroyForcibly();\n+                return false; \/\/ assume not signed\n@@ -315,0 +284,2 @@\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(e);\n@@ -316,3 +287,0 @@\n-        \/\/ Otherwise expect to be permitted:\n-        return true;\n-    }\n@@ -320,5 +288,18 @@\n-    \/**\n-     * On OSX, expect permission to attach only if we are root.\n-     *\/\n-    private static boolean canAttachOSX() {\n-        return userName.equals(\"root\");\n+        \/\/ Check codesign result to see if java binary is signed. Here are the\n+        \/\/ exit code meanings:\n+        \/\/    0: signed\n+        \/\/    1: not signed\n+        \/\/    2: invalid arguments\n+        \/\/    3: only has meaning with the -R argument.\n+        \/\/ So we should always get 0 or 1 as an exit value.\n+        if (codesignProcess.exitValue() == 0) {\n+            System.out.println(\"Target JDK is signed. Some tests may be skipped.\");\n+            return true; \/\/ signed\n+        } else if (codesignProcess.exitValue() == 1) {\n+            System.out.println(\"Target JDK is not signed.\");\n+            return false; \/\/ not signed\n+        } else {\n+            System.err.println(\"Executing codesign failed. Assuming unsigned: \" +\n+                               codesignProcess.exitValue());\n+            return false; \/\/ not signed\n+        }\n","filename":"test\/lib\/jdk\/test\/lib\/Platform.java","additions":50,"deletions":69,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import java.io.File;\n@@ -26,1 +27,4 @@\n-import java.util.List;\n+import java.io.RandomAccessFile;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n@@ -28,2 +32,2 @@\n-import jdk.test.lib.Asserts;\n-import jdk.test.lib.Platform;\n+import java.util.Arrays;\n+import java.util.List;\n@@ -32,0 +36,4 @@\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.Platform;\n+import jtreg.SkippedException;\n+\n@@ -33,0 +41,43 @@\n+    \/**\n+     * Creates a ProcessBuilder, adding privileges (sudo) if needed.\n+     *\/\n+    public static ProcessBuilder createProcessBuilder(JDKToolLauncher launcher) {\n+        List<String> cmdStringList = Arrays.asList(launcher.getCommand());\n+        if (needsPrivileges()) {\n+            cmdStringList = addPrivileges(cmdStringList);\n+        }\n+        return new ProcessBuilder(cmdStringList);\n+    }\n+\n+    \/**\n+     * Checks if SA Attach is expected to work.\n+     * @throws SkippedException if SA Attach is not expected to work.\n+    *\/\n+    public static void skipIfCannotAttach() {\n+        if (!Platform.hasSA()) {\n+            throw new SkippedException(\"SA not supported.\");\n+        }\n+        try {\n+            if (Platform.isLinux()) {\n+                if (!canPtraceAttachLinux()) {\n+                    throw new SkippedException(\"SA Attach not expected to work. Ptrace attach not supported.\");\n+                }\n+            } else if (Platform.isOSX()) {\n+                if (Platform.isSignedOSX()) {\n+                    throw new SkippedException(\"SA Attach not expected to work. JDK is signed.\");\n+                }\n+                if (!Platform.isRoot() && !canAddPrivileges()) {\n+                    throw new SkippedException(\"SA Attach not expected to work. Insufficient privileges (not root and can't use sudo).\");\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"skipIfCannotAttach() failed due to IOException.\", e);\n+        }\n+    }\n+\n+    \/**\n+     * Returns true if this platform is expected to require extra privileges (running using sudo).\n+     *\/\n+    public static boolean needsPrivileges() {\n+        return Platform.isOSX() && !Platform.isRoot();\n+    }\n@@ -34,8 +85,11 @@\n-    public static boolean canAddPrivileges()\n-       throws IOException, InterruptedException {\n-       List<String> echoList = new ArrayList<String>();\n-       echoList.add(\"sudo\");\n-       echoList.add(\"-E\");\n-       echoList.add(\"\/bin\/echo\");\n-       echoList.add(\"'Checking for sudo'\");\n-       ProcessBuilder pb = new ProcessBuilder(echoList);\n+    \/**\n+     * Returns true if a no-password sudo is expected to work properly.\n+     *\/\n+    private static boolean canAddPrivileges()  throws IOException {\n+       List<String> sudoList = new ArrayList<String>();\n+       sudoList.add(\"sudo\");\n+       sudoList.add(\"-E\"); \/\/ Preserve existing environment variables.\n+       sudoList.add(\"-n\"); \/\/ non-interactive. Don't prompt for password. Must be cached or not required.\n+       sudoList.add(\"\/bin\/echo\");\n+       sudoList.add(\"'Checking for sudo'\");\n+       ProcessBuilder pb = new ProcessBuilder(sudoList);\n@@ -43,8 +97,9 @@\n-       if (echoProcess.waitFor(60, TimeUnit.SECONDS) == false) {\n-           \/\/ 'sudo' has been added but we don't have a no-password\n-           \/\/ entry for the user in the \/etc\/sudoers list. Could\n-           \/\/ have timed out waiting for the password. Skip the\n-           \/\/ test if there is a timeout here.\n-           System.out.println(\"Timed out waiting for the password to be entered.\");\n-           echoProcess.destroyForcibly();\n-           return false;\n+       try {\n+           if (echoProcess.waitFor(60, TimeUnit.SECONDS) == false) {\n+               \/\/ Due to using the \"-n\" option, sudo should complete almost immediately. 60 seconds\n+               \/\/ is more than generous. If it didn't complete in that time, something went very wrong.\n+               echoProcess.destroyForcibly();\n+               throw new RuntimeException(\"Timed out waiting for sudo to execute.\");\n+           }\n+       } catch (InterruptedException e) {\n+           throw new RuntimeException(\"sudo process interrupted\", e);\n@@ -52,0 +107,1 @@\n+\n@@ -58,5 +114,4 @@\n-       \/\/ 'sudo' has been added but we don't have a no-password\n-       \/\/ entry for the user in the \/etc\/sudoers list. Check for\n-       \/\/ the sudo error message and skip the test.\n-       if (err.contains(\"no tty present\") ||\n-           err.contains(\"a password is required\")) {\n+       \/\/ 'sudo' has been run, but did not succeed, probably because the cached credentials\n+       \/\/  have expired, or we don't have a no-password entry for the user in the \/etc\/sudoers list.\n+       \/\/ Check the sudo error message and skip the test.\n+       if (err.contains(\"no tty present\") || err.contains(\"a password is required\")) {\n@@ -65,1 +120,1 @@\n-           throw new Error(\"Unknown Error from 'sudo'\");\n+           throw new RuntimeException(\"Unknown error from 'sudo': \" + err);\n@@ -69,3 +124,7 @@\n-    public static List<String> addPrivileges(List<String> cmdStringList)\n-        throws IOException {\n-        Asserts.assertTrue(Platform.isOSX());\n+    \/**\n+     * Adds privileges (sudo) to the command.\n+     *\/\n+    private static List<String> addPrivileges(List<String> cmdStringList) {\n+        if (!Platform.isOSX()) {\n+            throw new RuntimeException(\"Can only add privileges on OSX.\");\n+        }\n@@ -73,1 +132,1 @@\n-        System.out.println(\"Adding 'sudo -E' to the command.\");\n+        System.out.println(\"Adding 'sudo -E -n' to the command.\");\n@@ -76,1 +135,2 @@\n-        outStringList.add(\"-E\");\n+        outStringList.add(\"-E\"); \/\/ Preserve existing environment variables.\n+        outStringList.add(\"-n\"); \/\/ non-interactive. Don't prompt for password. Must be cached or not required.\n@@ -80,0 +140,62 @@\n+\n+    \/**\n+     * Adds privileges (sudo) to the command already setup for the ProcessBuilder.\n+     *\/\n+    public static void addPrivilegesIfNeeded(ProcessBuilder pb) {\n+        if (!Platform.isOSX()) {\n+            return;\n+        }\n+\n+        if (needsPrivileges()) {\n+            List<String> cmdStringList = pb.command();\n+            cmdStringList = addPrivileges(cmdStringList);\n+            pb.command(cmdStringList);\n+        }\n+    }\n+\n+    \/**\n+     * On Linux, first check the SELinux boolean \"deny_ptrace\" and return false\n+     * as we expect to be denied if that is \"1\".  Then expect permission to attach\n+     * if we are root, so return true.  Then return false for an expected denial\n+     * if \"ptrace_scope\" is 1, and true otherwise.\n+     *\/\n+    private static boolean canPtraceAttachLinux() throws IOException {\n+        \/\/ SELinux deny_ptrace:\n+        File deny_ptrace = new File(\"\/sys\/fs\/selinux\/booleans\/deny_ptrace\");\n+        if (deny_ptrace.exists()) {\n+            try (RandomAccessFile file = AccessController.doPrivileged(\n+                    (PrivilegedExceptionAction<RandomAccessFile>) () -> new RandomAccessFile(deny_ptrace, \"r\"))) {\n+                if (file.readByte() != '0') {\n+                    return false;\n+                }\n+            } catch (PrivilegedActionException e) {\n+                IOException t = (IOException) e.getException();\n+                throw t;\n+            }\n+        }\n+\n+        \/\/ YAMA enhanced security ptrace_scope:\n+        \/\/ 0 - a process can PTRACE_ATTACH to any other process running under the same uid\n+        \/\/ 1 - restricted ptrace: a process must be a children of the inferior or user is root\n+        \/\/ 2 - only processes with CAP_SYS_PTRACE may use ptrace or user is root\n+        \/\/ 3 - no attach: no processes may use ptrace with PTRACE_ATTACH\n+        File ptrace_scope = new File(\"\/proc\/sys\/kernel\/yama\/ptrace_scope\");\n+        if (ptrace_scope.exists()) {\n+            try (RandomAccessFile file = AccessController.doPrivileged(\n+                    (PrivilegedExceptionAction<RandomAccessFile>) () -> new RandomAccessFile(ptrace_scope, \"r\"))) {\n+                byte yama_scope = file.readByte();\n+                if (yama_scope == '3') {\n+                    return false;\n+                }\n+\n+                if (!Platform.isRoot() && yama_scope != '0') {\n+                    return false;\n+                }\n+            } catch (PrivilegedActionException e) {\n+                IOException t = (IOException) e.getException();\n+                throw t;\n+            }\n+        }\n+        \/\/ Otherwise expect to be permitted:\n+        return true;\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/SA\/SATestUtils.java","additions":153,"deletions":31,"binary":false,"changes":184,"status":"modified"}]}