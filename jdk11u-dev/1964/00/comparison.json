{"files":[{"patch":"@@ -1810,0 +1810,2 @@\n+        if (interruptible && Thread.interrupted())\n+            return null;\n@@ -1821,0 +1823,5 @@\n+            else if (interruptible && q.interrupted) {\n+                q.thread = null;\n+                cleanStack();\n+                return null;\n+            }\n@@ -1827,2 +1834,0 @@\n-                if (q.interrupted && interruptible)\n-                    break;\n@@ -1831,1 +1836,1 @@\n-        if (q != null && queued) {\n+        if (q != null) {\n@@ -1833,1 +1838,1 @@\n-            if (!interruptible && q.interrupted)\n+            if (q.interrupted)\n@@ -1835,2 +1840,0 @@\n-            if (r == null)\n-                cleanStack();\n@@ -1838,2 +1841,1 @@\n-        if (r != null || (r = result) != null)\n-            postComplete();\n+        postComplete();\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CompletableFuture.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.ThreadLocalRandom;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+\n+\/*\n+ * @test\n+ * @bug 8254350\n+ * @run main LostInterrupt\n+ * @summary CompletableFuture.get may swallow interrupt status\n+ * @key randomness\n+ *\/\n+\n+\/\/ TODO: Rewrite as a CompletableFuture tck test ?\n+\n+\/**\n+ * Submits a task that completes immediately, then invokes CompletableFuture.get\n+ * with the interrupt status set. CompletableFuture.get should either complete\n+ * immediately with the interrupt status set, or else throw InterruptedException\n+ * with the interrupt status cleared.\n+ *\/\n+public class LostInterrupt {\n+    static final int ITERATIONS = 10_000;\n+\n+    public static void main(String[] args) throws Exception {\n+        ThreadLocalRandom rnd = ThreadLocalRandom.current();\n+        ForkJoinPool executor = new ForkJoinPool(1);\n+        try {\n+            for (int i = 0; i < ITERATIONS; i++) {\n+                CompletableFuture<String> future = new CompletableFuture<>();\n+                boolean timed = rnd.nextBoolean();\n+                executor.execute(() -> future.complete(\"foo\"));\n+\n+                Thread.currentThread().interrupt();\n+                try {\n+                    String result = timed ? future.get(1, DAYS) : future.get();\n+\n+                    if (!Thread.interrupted())\n+                        throw new AssertionError(\"lost interrupt, run=\" + i);\n+                } catch (InterruptedException expected) {\n+                    if (Thread.interrupted())\n+                        throw new AssertionError(\n+                            \"interrupt status not cleared, run=\" + i);\n+                }\n+            }\n+        } finally {\n+            executor.shutdown();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/concurrent\/CompletableFuture\/LostInterrupt.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+\/*\n+ * @test\n+ * @bug 8254350\n+ * @run main SwallowedInterruptedException\n+ * @key randomness\n+ *\/\n+\n+public class SwallowedInterruptedException {\n+    static final int ITERATIONS = 100;\n+\n+    public static void main(String[] args) throws Throwable {\n+        for (int i = 1; i <= ITERATIONS; i++) {\n+            System.out.format(\"Iteration %d%n\", i);\n+\n+            CompletableFuture<Void> future = new CompletableFuture<>();\n+            CountDownLatch running = new CountDownLatch(1);\n+            AtomicReference<String> failed = new AtomicReference<>();\n+\n+            Thread thread = new Thread(() -> {\n+                \/\/ signal main thread that child is running\n+                running.countDown();\n+\n+                \/\/ invoke Future.get, it complete with the interrupt status set or\n+                \/\/ else throw InterruptedException with the interrupt status not set.\n+                try {\n+                    future.get();\n+\n+                    \/\/ interrupt status should be set\n+                    if (!Thread.currentThread().isInterrupted()) {\n+                        failed.set(\"Future.get completed with interrupt status not set\");\n+                    }\n+                } catch (InterruptedException ex) {\n+                    \/\/ interrupt status should be cleared\n+                    if (Thread.currentThread().isInterrupted()) {\n+                        failed.set(\"InterruptedException with interrupt status set\");\n+                    }\n+                } catch (Throwable ex) {\n+                    failed.set(\"Unexpected exception \" + ex);\n+                }\n+            });\n+            thread.setDaemon(true);\n+            thread.start();\n+\n+            \/\/ wait for thread to run\n+            running.await();\n+\n+            \/\/ interrupt thread and set result after an optional (random) delay\n+            thread.interrupt();\n+            long sleepMillis = ThreadLocalRandom.current().nextLong(10);\n+            if (sleepMillis > 0)\n+                Thread.sleep(sleepMillis);\n+            future.complete(null);\n+\n+            \/\/ wait for thread to terminate and check for failure\n+            thread.join();\n+            String failedReason = failed.get();\n+            if (failedReason != null) {\n+                throw new RuntimeException(\"Test failed: \" + failedReason);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/concurrent\/CompletableFuture\/SwallowedInterruptedException.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"}]}