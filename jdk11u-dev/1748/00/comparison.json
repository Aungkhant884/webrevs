{"files":[{"patch":"@@ -26,1 +26,1 @@\n- * @bug 6332435\n+ * @bug 6332435 8221168\n@@ -33,0 +33,1 @@\n+import java.util.concurrent.ThreadLocalRandom;\n@@ -35,0 +36,1 @@\n+import java.util.function.Supplier;\n@@ -40,4 +42,0 @@\n-    interface AwaiterFactory {\n-        Awaiter getAwaiter();\n-    }\n-\n@@ -45,10 +43,8 @@\n-        private volatile Throwable result = null;\n-        protected void result(Throwable result) { this.result = result; }\n-        public Throwable result() { return this.result; }\n-    }\n-\n-    private void toTheStartingGate(CountDownLatch gate) {\n-        try {\n-            gate.await();\n-        }\n-        catch (Throwable t) { fail(t); }\n+        volatile Throwable exception;\n+        volatile boolean interrupted;\n+        abstract void realRun() throws Exception;\n+        public final void run() {\n+            try { realRun(); }\n+            catch (Throwable ex) { exception = ex; }\n+            interrupted = Thread.interrupted();\n+        };\n@@ -57,7 +53,5 @@\n-    private Awaiter awaiter(final CountDownLatch latch,\n-                            final CountDownLatch gate) {\n-        return new Awaiter() { public void run() {\n-            System.out.println(\"without millis: \" + latch.toString());\n-            gate.countDown();\n-\n-            try {\n+    static Awaiter awaiter(CountDownLatch latch,\n+                           CountDownLatch gate) {\n+        return new Awaiter() {\n+            public void realRun() throws InterruptedException {\n+                gate.countDown();\n@@ -65,17 +59,1 @@\n-                System.out.println(\"without millis - ComingOut\");\n-            }\n-            catch (Throwable result) { result(result); }}};\n-    }\n-\n-    private Awaiter awaiter(final CountDownLatch latch,\n-                            final CountDownLatch gate,\n-                            final long millis) {\n-        return new Awaiter() { public void run() {\n-            System.out.println(\"with millis: \"+latch.toString());\n-            gate.countDown();\n-\n-            try {\n-                latch.await(millis, TimeUnit.MILLISECONDS);\n-                System.out.println(\"with millis - ComingOut\");\n-            }\n-            catch (Throwable result) { result(result); }}};\n+            }};\n@@ -84,2 +62,8 @@\n-    AwaiterFactory awaiterFactory(CountDownLatch latch, CountDownLatch gate) {\n-        return () -> awaiter(latch, gate);\n+    static Awaiter awaiter(CountDownLatch latch,\n+                           CountDownLatch gate,\n+                           long timeoutMillis) {\n+        return new Awaiter() {\n+            public void realRun() throws InterruptedException {\n+                gate.countDown();\n+                latch.await(timeoutMillis, TimeUnit.MILLISECONDS);\n+            }};\n@@ -88,2 +72,5 @@\n-    AwaiterFactory timedAwaiterFactory(CountDownLatch latch, CountDownLatch gate) {\n-        return () -> awaiter(latch, gate, LONG_DELAY_MS);\n+    static Supplier<Awaiter> randomAwaiterSupplier(\n+            CountDownLatch latch, CountDownLatch gate) {\n+        return () -> (ThreadLocalRandom.current().nextBoolean())\n+            ? awaiter(latch, gate)\n+            : awaiter(latch, gate, LONG_DELAY_MS);\n@@ -97,1 +84,0 @@\n-        Basic test = new Basic();\n@@ -103,8 +89,6 @@\n-            AwaiterFactory factory1 = test.awaiterFactory(latch, gate);\n-            AwaiterFactory factory2 = test.timedAwaiterFactory(latch, gate);\n-            a[count] = factory1.getAwaiter(); a[count++].start();\n-            a[count] = factory1.getAwaiter(); a[count++].start();\n-            a[count] = factory2.getAwaiter(); a[count++].start();\n-            a[count] = factory2.getAwaiter(); a[count++].start();\n-            test.toTheStartingGate(gate);\n-            System.out.println(\"Main Thread: \" + latch.toString());\n+            Supplier<Awaiter> s = randomAwaiterSupplier(latch, gate);\n+            a[count] = s.get(); a[count++].start();\n+            a[count] = s.get(); a[count++].start();\n+            a[count] = s.get(); a[count++].start();\n+            a[count] = s.get(); a[count++].start();\n+            gate.await();\n@@ -114,5 +98,4 @@\n-        for (int i = 0; i < 12; i++)\n-            a[i].join();\n-\n-        for (int i = 0; i < 12; i++)\n-            checkResult(a[i], null);\n+        for (Awaiter awaiter : a)\n+            awaiter.join();\n+        for (Awaiter awaiter : a)\n+            checkException(awaiter, null);\n@@ -126,1 +109,0 @@\n-        Basic test = new Basic();\n@@ -132,6 +114,6 @@\n-            AwaiterFactory factory1 = test.awaiterFactory(latch, gate);\n-            AwaiterFactory factory2 = test.timedAwaiterFactory(latch, gate);\n-            a[count] = factory1.getAwaiter(); a[count++].start();\n-            a[count] = factory1.getAwaiter(); a[count++].start();\n-            a[count] = factory2.getAwaiter(); a[count++].start();\n-            a[count] = factory2.getAwaiter(); a[count++].start();\n+            Supplier<Awaiter> s = randomAwaiterSupplier(latch, gate);\n+            a[count] = s.get(); a[count++].start();\n+            a[count] = s.get(); a[count++].start();\n+            a[count] = s.get(); a[count++].start();\n+            a[count] = s.get(); a[count++].start();\n+            gate.await();\n@@ -139,2 +121,0 @@\n-            test.toTheStartingGate(gate);\n-            System.out.println(\"Main Thread: \" + latch.toString());\n@@ -144,6 +124,10 @@\n-        for (int i = 0; i < 12; i++)\n-            a[i].join();\n-\n-        for (int i = 0; i < 12; i++)\n-            checkResult(a[i],\n-                        (i % 4) == 3 ? InterruptedException.class : null);\n+        for (Awaiter awaiter : a)\n+            awaiter.join();\n+        for (int i = 0; i < a.length; i++) {\n+            Awaiter awaiter = a[i];\n+            Throwable ex = awaiter.exception;\n+            if ((i % 4) == 3 && !awaiter.interrupted)\n+                checkException(awaiter, InterruptedException.class);\n+            else\n+                checkException(awaiter, null);\n+        }\n@@ -156,2 +140,1 @@\n-        int count =0;\n-        Basic test = new Basic();\n+        int count = 0;\n@@ -165,8 +148,6 @@\n-            AwaiterFactory factory1 = test.awaiterFactory(latch, gate);\n-            AwaiterFactory factory2 = test.timedAwaiterFactory(latch, gate);\n-            a[count] = test.awaiter(latch, gate, timeout[i]); a[count++].start();\n-            a[count] = factory1.getAwaiter(); a[count++].start();\n-            a[count] = factory2.getAwaiter(); a[count++].start();\n-            a[count] = factory2.getAwaiter(); a[count++].start();\n-            test.toTheStartingGate(gate);\n-            System.out.println(\"Main Thread: \" + latch.toString());\n+            Supplier<Awaiter> s = randomAwaiterSupplier(latch, gate);\n+            a[count] = awaiter(latch, gate, timeout[i]); a[count++].start();\n+            a[count] = s.get(); a[count++].start();\n+            a[count] = s.get(); a[count++].start();\n+            a[count] = s.get(); a[count++].start();\n+            gate.await();\n@@ -176,5 +157,4 @@\n-        for (int i = 0; i < 12; i++)\n-            a[i].join();\n-\n-        for (int i = 0; i < 12; i++)\n-            checkResult(a[i], null);\n+        for (Awaiter awaiter : a)\n+            awaiter.join();\n+        for (Awaiter awaiter : a)\n+            checkException(awaiter, null);\n@@ -184,3 +164,10 @@\n-        normalUse();\n-        threadInterrupted();\n-        timeOut();\n+        try {\n+            normalUse();\n+        } catch (Throwable ex) { fail(ex); }\n+        try {\n+            threadInterrupted();\n+        } catch (Throwable ex) { fail(ex); }\n+        try {\n+            timeOut();\n+        } catch (Throwable ex) { fail(ex); }\n+\n@@ -191,1 +178,1 @@\n-    private static final AtomicInteger failures = new AtomicInteger(0);\n+    static final AtomicInteger failures = new AtomicInteger(0);\n@@ -193,1 +180,1 @@\n-    private static void fail(String msg) {\n+    static void fail(String msg) {\n@@ -197,1 +184,1 @@\n-    private static void fail(Throwable t) {\n+    static void fail(Throwable t) {\n@@ -202,1 +189,1 @@\n-    private static void checkCount(CountDownLatch b, int expected) {\n+    static void checkCount(CountDownLatch b, int expected) {\n@@ -208,6 +195,4 @@\n-    private static void checkResult(Awaiter a, Class c) {\n-        Throwable t = a.result();\n-        if (! ((t == null && c == null) || c.isInstance(t))) {\n-            System.out.println(\"Mismatch: \" + t + \", \" + c.getName());\n-            failures.getAndIncrement();\n-        }\n+    static void checkException(Awaiter awaiter, Class<? extends Throwable> c) {\n+        Throwable ex = awaiter.exception;\n+        if (! ((ex == null && c == null) || c.isInstance(ex)))\n+            fail(\"Expected: \" + c + \", got: \" + ex);\n","filename":"test\/jdk\/java\/util\/concurrent\/CountDownLatch\/Basic.java","additions":85,"deletions":100,"binary":false,"changes":185,"status":"modified"}]}