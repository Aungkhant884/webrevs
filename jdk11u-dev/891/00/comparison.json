{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1089,1 +1089,1 @@\n-  } else if (_i2i_entry != NULL) {\n+  } else if (adapter() != NULL) {\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8059550\n+ * @bug 8059550 8279356\n@@ -37,2 +37,2 @@\n- *                   -XX:-SegmentedCodeCache\n- *                   compiler.codecache.OverflowCodeCacheTest\n+ *                   -XX:-SegmentedCodeCache -Xmixed\n+ *                   compiler.codecache.OverflowCodeCacheTest CompilationDisabled\n@@ -41,1 +41,4 @@\n- *                   -XX:+SegmentedCodeCache\n+ *                   -XX:+SegmentedCodeCache -Xmixed\n+ *                   compiler.codecache.OverflowCodeCacheTest CompilationDisabled\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -XX:-SegmentedCodeCache -Xmixed\n@@ -53,0 +56,1 @@\n+import java.lang.reflect.Method;\n@@ -56,0 +60,5 @@\n+class Helper {\n+    \/\/ Uncommon signature to prevent sharing and force creation of a new adapter\n+    public void method(float a, float b, float c, Object o) { }\n+}\n+\n@@ -58,0 +67,1 @@\n+    private static boolean COMPILATION_DISABLED = false;\n@@ -60,0 +70,1 @@\n+        COMPILATION_DISABLED = args.length > 0;\n@@ -78,0 +89,2 @@\n+        \/\/ Lock compilation to be able to better control code cache space\n+        WHITE_BOX.lockCompilation();\n@@ -92,1 +105,1 @@\n-               possibly have no free cache for futher work *\/\n+               possibly have no free cache for further work *\/\n@@ -94,0 +107,4 @@\n+\n+            \/\/ Use smallest allocation size to make sure all of the available space\n+            \/\/ is filled up. Don't free these below to put some pressure on the sweeper.\n+            while ((addr = WHITE_BOX.allocateCodeBlob(1, type.id)) != 0) { }\n@@ -95,0 +112,8 @@\n+            try {\n+                \/\/ Trigger creation of a new adapter for Helper::method\n+                \/\/ which will fail because we are out of code cache space.\n+                Helper helper = new Helper();\n+            } catch (VirtualMachineError e) {\n+                \/\/ Expected\n+            }\n+            \/\/ Free code cache space\n@@ -98,0 +123,18 @@\n+\n+            \/\/ Convert some nmethods to zombie and then free them to re-enable compilation\n+            WHITE_BOX.unlockCompilation();\n+            WHITE_BOX.forceNMethodSweep();\n+            WHITE_BOX.forceNMethodSweep();\n+\n+            \/\/ Trigger compilation of Helper::method which will hit an assert because\n+            \/\/ adapter creation failed above due to a lack of code cache space.\n+            Helper helper = new Helper();\n+            for (int i = 0; i < 100_000; i++) {\n+                helper.method(0, 0, 0, null);\n+            }\n+        }\n+        \/\/ Only check this if compilation is disabled, otherwise the sweeper might have\n+        \/\/ freed enough nmethods to allow for re-enabling compilation.\n+        if (COMPILATION_DISABLED) {\n+            Asserts.assertNotEquals(compilationActivityMode, 1 \/* run_compilation*\/,\n+                    \"Compilation must be disabled when CodeCache(CodeHeap) overflows\");\n@@ -99,2 +142,0 @@\n-        Asserts.assertNotEquals(compilationActivityMode, 1 \/* run_compilation*\/,\n-                \"Compilation must be disabled when CodeCache(CodeHeap) overflows\");\n","filename":"test\/hotspot\/jtreg\/compiler\/codecache\/OverflowCodeCacheTest.java","additions":49,"deletions":8,"binary":false,"changes":57,"status":"modified"}]}