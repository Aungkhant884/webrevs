{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,1 +119,1 @@\n-            private int entry_point;                    \/\/ Elf32_Addr\n+            private long entry_point;                    \/\/ Elf32_Addr\n@@ -122,1 +122,1 @@\n-            private int ph_offset;                      \/\/ Elf32_Off\n+            private long ph_offset;                      \/\/ Elf32_Off\n@@ -125,1 +125,1 @@\n-            private int sh_offset;                      \/\/ Elf32_Off\n+            private long sh_offset;                      \/\/ Elf32_Off\n@@ -168,3 +168,3 @@\n-                entry_point = readInt();\n-                ph_offset = readInt();\n-                sh_offset = readInt();\n+                entry_point = readWord();\n+                ph_offset = readWord();\n+                sh_offset = readWord();\n@@ -387,1 +387,1 @@\n-            private int flags;                        \/\/ Elf32_Word\n+            private long flags;                        \/\/ Elf32_Word\n@@ -391,1 +391,1 @@\n-            private int address;                      \/\/ Elf32_Addr\n+            private long address;                      \/\/ Elf32_Addr\n@@ -393,1 +393,1 @@\n-            private int section_offset;               \/\/ Elf32_Off\n+            private long section_offset;               \/\/ Elf32_Off\n@@ -395,1 +395,1 @@\n-            private int size;                         \/\/ Elf32_Word\n+            private long size;                         \/\/ Elf32_Word\n@@ -401,1 +401,1 @@\n-            private int address_alignment;            \/\/ Elf32_Word\n+            private long address_alignment;            \/\/ Elf32_Word\n@@ -403,1 +403,1 @@\n-            private int entry_size;                   \/\/ Elf32_Word\n+            private long entry_size;                   \/\/ Elf32_Word\n@@ -419,4 +419,4 @@\n-                flags = readInt();\n-                address = readInt();\n-                section_offset = readInt();\n-                size = readInt();\n+                flags = readWord();\n+                address = readWord();\n+                section_offset = readWord();\n+                size = readWord();\n@@ -425,2 +425,2 @@\n-                address_alignment = readInt();\n-                entry_size = readInt();\n+                address_alignment = readWord();\n+                entry_size = readWord();\n@@ -436,1 +436,1 @@\n-                        int num_entries = size \/ entry_size;\n+                        int num_entries = (int)(size \/ entry_size);\n@@ -439,1 +439,1 @@\n-                            final int symbolOffset = section_offset +\n+                            final long symbolOffset = section_offset +\n@@ -450,2 +450,3 @@\n-                        final int strTableOffset = section_offset;\n-                        final int strTableSize = size;\n+                        final long strTableOffset = section_offset;\n+                        final long strTableSize = size;\n+                        assert32bitLong(strTableSize);  \/\/ must fit in 32-bits\n@@ -455,1 +456,1 @@\n-                                                           strTableSize);\n+                                                              (int)strTableSize);\n@@ -462,2 +463,3 @@\n-                        final int hashTableOffset = section_offset;\n-                        final int hashTableSize = size;\n+                        final long hashTableOffset = section_offset;\n+                        final long hashTableSize = size;\n+                        assert32bitLong(hashTableSize);  \/\/ must fit in 32-bits\n@@ -467,1 +469,1 @@\n-                                                         hashTableSize);\n+                                                            (int)hashTableSize);\n@@ -534,1 +536,1 @@\n-            public int getOffset() {\n+            public long getOffset() {\n@@ -628,1 +630,1 @@\n-            private int value;                          \/\/ Elf32_Addr\n+            private long value;                          \/\/ Elf32_Addr\n@@ -631,1 +633,1 @@\n-            private int size;                           \/\/ Elf32_Word\n+            private long size;                           \/\/ Elf32_Word\n@@ -649,6 +651,22 @@\n-                name_ndx = readInt();\n-                value = readInt();\n-                size = readInt();\n-                info = readByte();\n-                other = readByte();\n-                section_header_ndx = readShort();\n+                switch (getObjectSize()) {\n+                    case CLASS_32: {\n+                        name_ndx = readInt();\n+                        value = readInt();\n+                        size = readInt();\n+                        info = readByte();\n+                        other = readByte();\n+                        section_header_ndx = readShort();\n+                        break;\n+                    }\n+                    case CLASS_64: {\n+                        name_ndx = readInt();\n+                        info = readByte();\n+                        other = readByte();\n+                        section_header_ndx = readShort();\n+                        value = readWord();\n+                        size = readWord();\n+                        break;\n+                    }\n+                    default:\n+                        throw new ELFException(\"Invalid Object Size.\");\n+                }\n@@ -704,1 +722,1 @@\n-            public int getSize() {\n+            public long getSize() {\n@@ -926,0 +944,11 @@\n+        long readWord() throws ELFException {\n+            switch (getObjectSize()) {\n+                case CLASS_32:\n+                    return readInt();\n+                case CLASS_64:\n+                    return readLong();\n+                default:\n+                    throw new ELFException(\"Invalid Object Size.\");\n+            }\n+        }\n+\n@@ -1033,0 +1062,6 @@\n+\n+        void assert32bitLong(long x) {\n+            if (x != (long)(int)x) {\n+                throw new ELFException(\"64-bit value does not fit in 32-bits: \" + x);\n+            }\n+        }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/posix\/elf\/ELFFileParser.java","additions":72,"deletions":37,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,1 +120,1 @@\n-    public int getOffset();\n+    public long getOffset();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/posix\/elf\/ELFSectionHeader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,1 +76,1 @@\n-    public int getSize();\n+    public long getSize();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/posix\/elf\/ELFSymbol.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}