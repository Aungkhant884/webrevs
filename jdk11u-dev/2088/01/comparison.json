{"files":[{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 5006427\n+  @summary Shows many modal dialog and checks if there is a deadlock or thread race.\n+  @key headful\n+  @run main DialogDeadlockTest\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Dialog;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Window;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+public class DialogDeadlockTest {\n+    public static final int MAX_COUNT = 200;\n+    private static Dialog lastDialog;\n+    private static Runnable r;\n+    private static volatile int count;\n+    private static volatile int cumul;\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        DialogDeadlockTest ddt = new DialogDeadlockTest();\n+        ddt.start();\n+    }\n+\n+    public void start() {\n+        final Frame frame = new Frame(\"abc\");\n+        final List<Window> toDispose = new LinkedList<>();\n+\n+        try {\n+            frame.setLocation(300, 0);\n+            frame.add(new Button(\"def\"));\n+            frame.pack();\n+            frame.setVisible(true);\n+            cumul = 0;\n+\n+            r = new Runnable() {\n+                public void run() {\n+                    count++;\n+                    if (count < 10) {\n+                        Dialog xlastDialog = lastDialog;\n+                        cumul += count;\n+                        Dialog d = new Dialog(frame, \"Dialog \"\n+                                + cumul, true);\n+                        d.setLayout(new BorderLayout());\n+                        d.add(new Button(\"button \" + count), BorderLayout.CENTER);\n+                        d.pack();\n+                        toDispose.add(d);\n+                        lastDialog = d;\n+                        EventQueue.invokeLater(r);\n+                        d.setVisible(true);\n+                        if (xlastDialog != null) {\n+                            xlastDialog.setVisible(false);\n+                        } else {\n+                            if (cumul < MAX_COUNT) {\n+                                count = 0;\n+                                lastDialog = null;\n+                                EventQueue.invokeLater(r);\n+                            }\n+                        }\n+                    } else {\n+                        try {\n+                            Thread.sleep(1000);\n+                        } catch (InterruptedException ignore) {\n+                        }\n+                        lastDialog.setVisible(false);\n+                        lastDialog = null;\n+                    }\n+                }\n+            };\n+            try {\n+                EventQueue.invokeAndWait(r);\n+            } catch (InterruptedException ignore) {\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Unexpected exception: \"\n+                        + e.getLocalizedMessage());\n+            }\n+            while (cumul < MAX_COUNT - 1) {\n+                try {\n+                    Thread.sleep(1000);\n+                } catch (InterruptedException ignore) {}\n+            }\n+            System.out.println(\"Test PASSED\");\n+        } finally {\n+            try {\n+                EventQueue.invokeAndWait(() -> {\n+                    frame.setVisible(false);\n+                    frame.dispose();\n+                    for (Window w: toDispose) {\n+                        w.dispose();\n+                    }\n+                });\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            } catch (InvocationTargetException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/DialogDeadlockTest.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -0,0 +1,176 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4101437\n+  @summary Dialog.setLocation(int,int) works unstable when the dialog is visible\n+  @key headful\n+  @run main DialogLocationTest\n+*\/\n+\n+import java.awt.AWTException;\n+import java.awt.Container;\n+import java.awt.Dialog;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.ComponentAdapter;\n+import java.awt.event.ComponentEvent;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Random;\n+\n+public class DialogLocationTest extends Panel {\n+    private volatile int count = 0;\n+    private Dialog my_dialog;\n+    private volatile boolean waitingForEvent = false;\n+    private volatile int newX, newY;\n+    Random random = new Random();\n+\n+    public void init() {\n+        Container f = getParent();\n+\n+        while (!(f instanceof Frame)) {\n+            f = f.getParent();\n+        }\n+\n+        my_dialog = new Dialog((Frame) f, \"TestDialog\");\n+        my_dialog.setSize(150, 100);\n+\n+        setSize(200, 200);\n+    }\n+\n+    public void start() throws InterruptedException,\n+            InvocationTargetException {\n+        Robot robot;\n+        try {\n+            robot = new Robot();\n+            EventQueue.invokeAndWait(() -> {\n+                my_dialog.setLocationRelativeTo(null);\n+                my_dialog.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            my_dialog.addComponentListener(new CL());\n+            setDialogLocation(my_dialog);\n+        } catch (AWTException e) {\n+            throw new RuntimeException(e);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                my_dialog.setVisible(false);\n+                my_dialog.dispose();\n+            });\n+        }\n+    }\n+\n+    public void setDialogLocation(Dialog dialog) {\n+        int height, width, insetX, insetY;\n+        Point curLoc;\n+        int i;\n+\n+        Rectangle screen = GraphicsEnvironment\n+                .getLocalGraphicsEnvironment()\n+                .getMaximumWindowBounds();\n+        height = screen.height;\n+        width = screen.width;\n+        insetX = screen.x;\n+        insetY = screen.y;\n+\n+        for (i = 0; i < 100; i++) {\n+            newX = random.nextInt(width - 300 - insetX) +  insetX;\n+            newY = random.nextInt(height - 400 - insetY) + insetY;\n+\n+            if (newX == 0 && newY == 0) {\n+                i--;\n+                continue;\n+            }\n+\n+            waitingForEvent = true;\n+\n+            EventQueue.invokeLater(() -> {\n+                dialog.setLocation(newX, newY);\n+            });\n+\n+            while (waitingForEvent) {\n+                Thread.yield();\n+            }\n+\n+            curLoc = dialog.getLocation();\n+            if (curLoc.x != newX || curLoc.y != newY) {\n+                count++;\n+                System.out.println(\"Failed on iteration \" + i + \" expect:[\" + newX + \",\" + newY + \"] reported:[\" + curLoc.x + \",\"\n+                                + curLoc.y + \"] diff:[\" + (curLoc.x - newX) + \",\" + (curLoc.y - newY) + \"]\");\n+                System.out.flush();\n+            }\n+        }\n+\n+        if (count > 0) {\n+            throw new RuntimeException(\"Dialog Location was set incorrectly\");\n+        }\n+    }\n+\n+    public class CL extends ComponentAdapter {\n+        int lastX, lastY;\n+\n+        public void componentMoved(ComponentEvent e) {\n+            if (e.getComponent() == my_dialog) {\n+                Point eventLoc = e.getComponent().getLocation();\n+                if (lastX != eventLoc.x || lastY != eventLoc.y) {\n+                    lastX = eventLoc.x;\n+                    lastY = eventLoc.y;\n+                    if (newX != 0 && newY != 0 && (eventLoc.x != newX || eventLoc.y != newY)) {\n+                        count++;\n+                        System.out.println(\"Failed in componentMoved() expect:[\" + newX +\",\" + newY + \"] reported: [\" +\n+                                eventLoc.x + \",\" + eventLoc.y + \"] diff [\" + (eventLoc.x - newX) + \",\" + (eventLoc.y - newY) + \"]\");\n+                        System.out.flush();\n+                    }\n+                    waitingForEvent = false;\n+                }\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        Frame frame = new Frame(\"DialogLocationTest\");\n+        try {\n+            DialogLocationTest test = new DialogLocationTest();\n+            EventQueue.invokeAndWait(() -> {\n+                frame.add(test);\n+                test.init();\n+                frame.setVisible(true);\n+            });\n+            test.start();\n+        } finally {\n+            EventQueue.invokeLater(() -> {\n+                frame.setVisible(false);\n+                frame.dispose();\n+            });\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Dialog\/DialogLocationTest.java","additions":176,"deletions":0,"binary":false,"changes":176,"status":"added"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4636311 4645035\n+  @summary Modal dialog shown on EDT after modal dialog on EDT doesn't receive mouse events\n+  @key headful\n+  @run main ModalDialogOnNonEdt\n+*\/\n+\n+import java.awt.Dialog;\n+import java.awt.Frame;\n+import java.awt.EventQueue;\n+import java.awt.Robot;\n+import java.awt.Point;\n+import java.awt.Dimension;\n+import java.awt.Window;\n+import java.awt.event.InputEvent;\n+import java.awt.AWTException;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseAdapter;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class ModalDialogOnNonEdt {\n+\n+    public void start () {\n+        ShowModalDialog showModalDialog = new ShowModalDialog();\n+\n+        try {\n+            EventQueue.invokeLater(showModalDialog);\n+            Robot robot = new Robot();\n+            robot.delay(2000);\n+\n+            Point origin = ShowModalDialog.lastShownDialog.getLocationOnScreen();\n+            Dimension dim = ShowModalDialog.lastShownDialog.getSize();\n+            robot.mouseMove((int)origin.getX() + (int)dim.getWidth()\/2,\n+                            (int)origin.getY() + (int)dim.getHeight()\/2);\n+            robot.mousePress(InputEvent.BUTTON1_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+\n+            robot.delay(2000);\n+            if (ShowModalDialog.count < 2) {\n+                throw new RuntimeException(\"TEST FAILED: second modal dialog was not shown\");\n+            }\n+\n+            \/* click on second modal dialog to verify if it receives mouse events *\/\n+            synchronized (ShowModalDialog.monitor) {\n+                origin = ShowModalDialog.lastShownDialog.getLocationOnScreen();\n+                dim = ShowModalDialog.lastShownDialog.getSize();\n+                robot.mouseMove((int)origin.getX() + (int)dim.getWidth()\/2,\n+                                (int)origin.getY() + (int)dim.getHeight()\/2);\n+                robot.mousePress(InputEvent.BUTTON1_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+\n+                ShowModalDialog.monitor.wait(2000);\n+            }\n+\n+            if (ShowModalDialog.count < 3) {\n+                throw new RuntimeException(\"TEST FAILED: second modal dialog didn't receive mouse events\");\n+            }\n+\n+        } catch (AWTException e) {\n+            e.printStackTrace();\n+            throw new RuntimeException(\"Some AWTException occurred\");\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+            throw new RuntimeException(\"Test was interrupted\");\n+        } finally {\n+            for (Window w : ShowModalDialog.toDispose) {\n+                w.setVisible(false);\n+                w.dispose();\n+            }\n+        }\n+\n+        System.out.println(\"TEST PASSED\");\n+    }\n+\n+    public static void main(String[] args) {\n+        new ModalDialogOnNonEdt().start();\n+    }\n+}\n+\n+class ShowModalDialog implements Runnable {\n+    static volatile int count = 0;\n+    static Object monitor = new Object();\n+    static Dialog lastShownDialog;\n+    static List<Window> toDispose = new ArrayList<>();\n+\n+    public void run() {\n+        count++;\n+        Frame frame = new Frame(\"Frame #\" + count);\n+        toDispose.add(frame);\n+        Dialog dialog = new Dialog(frame, \"Modal Dialog #\" + count, true);\n+        dialog.setSize(100, 100);\n+        dialog.setLocation(100, 100*count);\n+        dialog.addMouseListener(new MouseAdapter() {\n+                public void mouseClicked(MouseEvent me) {\n+                    System.out.println(me.toString());\n+                    if (ShowModalDialog.count < 2) {\n+                        Runnable runner = new ShowModalDialog();\n+                        new Thread(runner).start();\n+                    } else {\n+                        synchronized (monitor) {\n+                            ShowModalDialog.count++;\n+                            monitor.notifyAll();\n+                        }\n+                    }\n+                }\n+            });\n+        lastShownDialog = dialog;\n+        toDispose.add(dialog);\n+        dialog.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/ModalDialogOnNonEdt.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4119383\n+  @summary Tests total rewrite of modality blocking model\n+  @key headful\n+  @run main\/timeout=30 NewMessagePumpTest\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class NewMessagePumpTest {\n+    public void start() {\n+        Frame1 frame = new Frame1();\n+        frame.validate();\n+        frame.setVisible(true);\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        NewMessagePumpTest test = new NewMessagePumpTest();\n+        EventQueue.invokeAndWait(test::start);\n+    }\n+}\n+\n+class Frame1 extends Frame {\n+    Frame1() {\n+        try {\n+            jbInit();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private void jbInit() throws Exception {\n+        MyPanel panel1 = new MyPanel(this);\n+        this.setLayout(new BorderLayout());\n+        this.setSize(new Dimension(400, 300));\n+        this.setLocationRelativeTo(null);\n+        this.setTitle(\"Frame Title\");\n+        panel1.setLayout(new BorderLayout());\n+        this.add(panel1, BorderLayout.CENTER);\n+    }\n+}\n+\n+class Dialog1 extends Dialog {\n+    BorderLayout borderLayout1 = new BorderLayout();\n+    Button button1 = new Button();\n+\n+    Dialog1(Frame f) {\n+        super(f, true);\n+        try {\n+            jbInit();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    void jbInit() throws Exception {\n+        button1.setLabel(\"close\");\n+        button1.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                button1_actionPerformed(e);\n+            }\n+        });\n+        this.setLayout(borderLayout1);\n+        this.add(button1, BorderLayout.NORTH);\n+    }\n+\n+    void button1_actionPerformed(ActionEvent e) {\n+        dispose();\n+    }\n+}\n+\n+class MyPanel extends Panel {\n+    Frame frame;\n+\n+    MyPanel(Frame f) {\n+        frame = f;\n+    }\n+\n+    public void addNotify() {\n+        super.addNotify();\n+        System.out.println(\"AddNotify bringing up modal dialog...\");\n+        final Dialog1 dlg = new Dialog1(frame);\n+        dlg.pack();\n+        new Thread(() -> {\n+            try {\n+                Thread.sleep(5000);\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+            try {\n+                EventQueue.invokeAndWait(() -> {\n+                    dlg.setVisible(false);\n+                    dlg.dispose();\n+                });\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            } catch (InvocationTargetException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }).start();\n+        dlg.setVisible(true);\n+        frame.setVisible(false);\n+        frame.dispose();\n+        System.out.println(\"Test passed\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/NewMessagePumpTest.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"}]}