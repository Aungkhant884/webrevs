{"files":[{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4653170\n+  @summary Make sure setCursor does not produce Arithmetic Exception.\n+  @key headful\n+  @run main SingleColorCursorTest\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Cursor;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Toolkit;\n+import java.awt.image.BufferedImage;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class SingleColorCursorTest extends Panel {\n+    public void init() {\n+        setLayout (new BorderLayout());\n+        setSize (200,200);\n+        add(new Button(\"JButton\"));\n+    }\n+\n+    public void start () {\n+        Cursor singleColorCursor = Toolkit.getDefaultToolkit()\n+                .createCustomCursor(new BufferedImage(1, 1, BufferedImage.TYPE_BYTE_BINARY),\n+                                    new Point(0,0), \"Single Color Cursor\");\n+        try {\n+            setCursor(singleColorCursor);\n+        } catch (ArithmeticException ae) {\n+            throw new RuntimeException(\"Setting a 1x1 custom cursor causes arithmetic exception\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException, InvocationTargetException {\n+        EventQueue.invokeAndWait(() -> {\n+            Frame frame = new Frame(\"Test window\");\n+            try {\n+                SingleColorCursorTest test = new SingleColorCursorTest();\n+                test.init();\n+                frame.add(test);\n+                frame.pack();\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+                test.start();\n+                frame.setVisible(false);\n+            } finally {\n+                frame.dispose();\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Cursor\/SingleColorCursorTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4274360\n+  @summary Ensures that Dialogs receive COMPONENT_SHOWN events\n+  @key headful\n+  @run main ComponentShownEvent\n+*\/\n+\n+import java.awt.AWTException;\n+import java.awt.Dialog;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.event.ComponentAdapter;\n+import java.awt.event.ComponentEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class ComponentShownEvent {\n+\n+    volatile boolean componentShown = false;\n+    Frame f;\n+    Dialog d;\n+\n+    public void start() throws InterruptedException,\n+                        InvocationTargetException, AWTException {\n+        Robot robot = new Robot();\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                f = new Frame();\n+                d = new Dialog(f);\n+\n+                d.addComponentListener(new ComponentAdapter() {\n+                    public void componentShown(ComponentEvent e) {\n+                        componentShown = true;\n+                    }\n+                });\n+\n+                f.setSize(100, 100);\n+                f.setLocationRelativeTo(null);\n+                f.setVisible(true);\n+                d.setVisible(true);\n+            });\n+\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            if (!componentShown) {\n+                throw new RuntimeException(\"test failed\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (d != null) {\n+                    d.setVisible(false);\n+                    d.dispose();\n+                }\n+                if (f != null) {\n+                    f.setVisible(false);\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+                               InvocationTargetException, AWTException {\n+        ComponentShownEvent test = new ComponentShownEvent();\n+        test.start();\n+        System.out.println(\"test passed\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/ComponentShownEvent.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -0,0 +1,189 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4221123\n+  @summary Why Dialog can't be an owner of FileDialog?\n+  @key headful\n+  @run main DialogAsParentOfFileDialog\n+*\/\n+\n+import java.awt.Dialog;\n+import java.awt.EventQueue;\n+import java.awt.FileDialog;\n+import java.awt.Frame;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class DialogAsParentOfFileDialog {\n+    FileDialog fdialog;\n+\n+    public void start () {\n+        StringBuilder errors = new StringBuilder();\n+        String nl = System.lineSeparator();\n+        Dialog dlg;\n+        String title;\n+        int mode;\n+        boolean passed;\n+\n+        System.out.println(\"DialogAsParentOfFileDialog\");\n+\n+        \/*\n+         * public FileDialog(Dialog parent),\n+         * checks owner and default settings.\n+         *\/\n+        System.out.print(\"\\ttest 01: \");\n+        dlg = new Dialog(new Frame());\n+        fdialog = new FileDialog(dlg);\n+        passed =\n+            fdialog.getOwner() == dlg\n+            && fdialog.isModal()\n+            && fdialog.getTitle().equals(\"\")\n+            && fdialog.getMode() == FileDialog.LOAD\n+            && fdialog.getFile() == null\n+            && fdialog.getDirectory() == null\n+            && fdialog.getFilenameFilter() == null;\n+        System.out.println(passed ? \"passed\" : \"FAILED\");\n+        if (!passed) {\n+            errors.append(nl);\n+            errors.append(\"DialogAsParentOfFileDialog FAILED\");\n+        }\n+\n+        \/*\n+         * public FileDialog(Dialog parent, String title),\n+         * checks owner, title and default settings.\n+         *\/\n+        System.out.print(\"\\ttest 02: \");\n+        dlg = new Dialog(new Frame());\n+        title = \"Title\";\n+        fdialog = new FileDialog(dlg, title);\n+        passed =\n+            fdialog.getOwner() == dlg\n+            && fdialog.isModal()\n+            && fdialog.getTitle().equals(title)\n+            && fdialog.getMode() == FileDialog.LOAD\n+            && fdialog.getFile() == null\n+            && fdialog.getDirectory() == null\n+            && fdialog.getFilenameFilter() == null;\n+        System.out.println(passed ? \"passed\" : \"FAILED\");\n+        if (!passed) {\n+            errors.append(nl);\n+            errors.append(\"DialogAsParentOfFileDialog FAILED\");\n+        }\n+\n+        \/*\n+         * public FileDialog(Dialog parent, String title),\n+         * title: null.\n+         * expected results: FileDialog object with a null title\n+         *\/\n+        System.out.print(\"\\ttest 03: \");\n+        dlg = new Dialog(new Frame());\n+        title = null;\n+        fdialog = new FileDialog(dlg, title);\n+        passed =\n+            fdialog.getOwner() == dlg\n+            && (fdialog.getTitle() == null\n+                || fdialog.getTitle().equals(\"\"));\n+        System.out.println(passed ? \"passed\" : \"FAILED\");\n+        if (!passed) {\n+            errors.append(nl);\n+            errors.append(\"DialogAsParentOfFileDialog FAILED\");\n+        }\n+\n+        \/*\n+         * public FileDialog(Dialog parent, String title, int mode),\n+         * checks owner, title and mode.\n+         *\/\n+        dlg = new Dialog(new Frame());\n+        title = \"Title\";\n+\n+        System.out.print(\"\\ttest 04: \");\n+        mode = FileDialog.SAVE;\n+        fdialog = new FileDialog(dlg, title, mode);\n+        passed =\n+            fdialog.getOwner() == dlg\n+            && fdialog.isModal()\n+            && fdialog.getTitle().equals(title)\n+            && fdialog.getMode() == mode\n+            && fdialog.getFile() == null\n+            && fdialog.getDirectory() == null\n+            && fdialog.getFilenameFilter() == null;\n+        System.out.println(passed ? \"passed\" : \"FAILED\");\n+        if (!passed) {\n+            errors.append(nl);\n+            errors.append(\"DialogAsParentOfFileDialog FAILED\");\n+        }\n+\n+        System.out.print(\"\\ttest 05: \");\n+        mode = FileDialog.LOAD;\n+        fdialog = new FileDialog(dlg, title, mode);\n+        passed =\n+            fdialog.getOwner() == dlg\n+            && fdialog.isModal()\n+            && fdialog.getTitle().equals(title)\n+            && fdialog.getMode() == mode\n+            && fdialog.getFile() == null\n+            && fdialog.getDirectory() == null\n+            && fdialog.getFilenameFilter() == null;\n+        System.out.println(passed ? \"passed\" : \"FAILED\");\n+        if (!passed) {\n+            errors.append(nl);\n+            errors.append(\"DialogAsParentOfFileDialog FAILED\");\n+        }\n+\n+        \/*\n+         * public FileDialog(Dialog parent, String title, int mode),\n+         * mode: Integer.MIN_VALUE, Integer.MIN_VALUE+1,\n+         *       Integer.MAX_VALUE-1, Integer.MAX_VALUE\n+         * expected results: IllegalArgumentException should be thrown\n+         *\/\n+        System.out.print(\"\\ttest 06: \");\n+        dlg = new Dialog(new Frame());\n+        title = \"Title\";\n+        int[] modes = {Integer.MIN_VALUE, Integer.MIN_VALUE+1,\n+                       Integer.MAX_VALUE-1, Integer.MAX_VALUE};\n+        passed = true;\n+        for (int i = 0; i < modes.length; i++) {\n+            try {\n+                fdialog = new FileDialog(dlg, title, modes[i]);\n+                passed = false;\n+            } catch (IllegalArgumentException e) {}\n+        }\n+        System.out.println(passed ? \"passed\" : \"FAILED\");\n+        if (!passed) {\n+            errors.append(nl);\n+            errors.append(\"DialogAsParentOfFileDialog FAILED\");\n+        }\n+\n+        if (errors.length() > 0) {\n+            throw new RuntimeException(\"Following tests failed:\" + errors);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+                                           InvocationTargetException {\n+        EventQueue.invokeAndWait(() -> {\n+            new DialogAsParentOfFileDialog().start();\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/DialogAsParentOfFileDialog.java","additions":189,"deletions":0,"binary":false,"changes":189,"status":"added"}]}