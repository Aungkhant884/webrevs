{"files":[{"patch":"@@ -34,0 +34,2 @@\n+\n+import java.io.UncheckedIOException;\n@@ -36,0 +38,2 @@\n+import jdk.test.lib.NetworkConfiguration;\n+\n@@ -70,2 +74,3 @@\n-                throw new RuntimeException(\"Expected message not received, \"\n-                                            + e.getMessage());\n+                throw new RuntimeException(mc.getLocalSocketAddress()\n+                        + \": Expected message not received, \"\n+                        + e.getMessage());\n@@ -91,0 +96,4 @@\n+    static SocketAddress toSocketAddress(InetAddress group) {\n+        return new InetSocketAddress(group, 0);\n+    }\n+\n@@ -108,4 +117,15 @@\n-            mc1.joinGroup(group1);\n-            out.printf(\"mc1 joined the MC group: %s\\n\", group1);\n-            mc2.joinGroup(group2);\n-            out.printf(\"mc2 joined the MC group: %s\\n\", group2);\n+            \/\/ join groups on all network interfaces\n+            NetworkConfiguration.probe()\n+                    .multicastInterfaces(false)\n+                    .forEach((nic) -> {\n+                try {\n+                    mc1.joinGroup(toSocketAddress(group1), nic);\n+                    out.printf(\"mc1 joined the MC group on %s: %s\\n\",\n+                            nic.getDisplayName(), group1);\n+                    mc2.joinGroup(toSocketAddress(group2), nic);\n+                    out.printf(\"mc2 joined the MC group on %s: %s\\n\",\n+                            nic.getDisplayName(), group2);\n+                } catch (IOException io) {\n+                    throw new UncheckedIOException(io);\n+                }\n+            });\n@@ -133,2 +153,15 @@\n-            mc1.leaveGroup(group1);\n-            mc2.leaveGroup(group2);\n+            \/\/ leave groups on all network interfaces\n+            NetworkConfiguration.probe()\n+                    .multicastInterfaces(false)\n+                    .forEach((nic) -> {\n+                try {\n+                    mc1.leaveGroup(toSocketAddress(group1), nic);\n+                    out.printf(\"mc1 left the MC group on %s: %s\\n\",\n+                            nic.getDisplayName(), group1);\n+                    mc2.leaveGroup(toSocketAddress(group2), nic);\n+                    out.printf(\"mc2 left the MC group on %s: %s\\n\",\n+                            nic.getDisplayName(), group2);\n+                } catch (IOException io) {\n+                    throw new UncheckedIOException(io);\n+                }\n+            });\n@@ -155,2 +188,2 @@\n-        InetAddress ip4Group1 = InetAddress.getByName(\"224.0.0.120\");\n-        InetAddress ip4Group2 = InetAddress.getByName(\"224.0.0.121\");\n+        InetAddress ip4Group1 = InetAddress.getByName(\"224.1.1.120\");\n+        InetAddress ip4Group2 = InetAddress.getByName(\"224.1.1.121\");\n","filename":"test\/jdk\/java\/net\/MulticastSocket\/Promiscuous.java","additions":43,"deletions":10,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -29,0 +30,1 @@\n+import java.io.IOException;\n@@ -31,0 +33,1 @@\n+import jdk.test.lib.NetworkConfiguration;\n@@ -33,2 +36,1 @@\n-public class SetOutgoingIf {\n-    private static int PORT = 9001;\n+public class SetOutgoingIf implements AutoCloseable {\n@@ -36,0 +38,10 @@\n+    private final MulticastSocket SOCKET;\n+    private final int PORT;\n+    private SetOutgoingIf() {\n+        try {\n+            SOCKET = new MulticastSocket();\n+            PORT = SOCKET.getLocalPort();\n+        } catch (IOException io) {\n+            throw new ExceptionInInitializerError(io);\n+        }\n+    }\n@@ -48,8 +60,9 @@\n-        List<NetworkInterface> nics = Collections.list(\n-                                        NetworkInterface.getNetworkInterfaces());\n-        for (NetworkInterface nic : nics) {\n-            List<InetAddress> addrs = Collections.list(nic.getInetAddresses());\n-            for (InetAddress addr : addrs) {\n-                if (addr instanceof Inet6Address)\n-                    return true;\n-            }\n+        return NetworkConfiguration.probe()\n+                .ip6Addresses()\n+                .findAny()\n+                .isPresent();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try (var test = new SetOutgoingIf()) {\n+            test.run();\n@@ -57,0 +70,1 @@\n+    }\n@@ -58,1 +72,3 @@\n-        return false;\n+    @Override\n+    public void close() {\n+        SOCKET.close();\n@@ -61,1 +77,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public void run() throws Exception {\n@@ -102,0 +118,1 @@\n+        Collections.reverse(netIfs);\n@@ -107,0 +124,2 @@\n+        System.out.println(\"Using PORT: \" + PORT);\n+\n@@ -180,6 +199,2 @@\n-        if (isMacOS() && nif.getName().contains(\"awdl\"))\n-            return true;\n-        String dName = nif.getDisplayName();\n-        if (isWindows() && dName != null && dName.contains(\"Teredo\"))\n-            return true;\n-        return false;\n+       return !NetworkConfiguration.isTestable(nif)\n+               || isMacOS() && nif.getName().startsWith(\"utun\");\n@@ -284,1 +299,0 @@\n-\n","filename":"test\/jdk\/java\/net\/MulticastSocket\/SetOutgoingIf.java","additions":33,"deletions":19,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-import java.util.HashMap;\n+import java.util.LinkedHashMap;\n@@ -38,0 +38,1 @@\n+import java.util.function.Predicate;\n@@ -88,3 +89,14 @@\n-    private static boolean isNotExcludedInterface(NetworkInterface nif) {\n-        if (Platform.isOSX() && nif.getName().contains(\"awdl\")) {\n-            return false;\n+    private static boolean isIPv6LinkLocal(InetAddress a) {\n+        return Inet6Address.class.isInstance(a) && a.isLinkLocalAddress();\n+    }\n+\n+    public static boolean isTestable(NetworkInterface nif) {\n+        if (Platform.isOSX()) {\n+            if (nif.getName().contains(\"awdl\")) {\n+                return false; \/\/ exclude awdl\n+            }\n+            \/\/ filter out interfaces that only have link-local addresses\n+            return nif.inetAddresses()\n+                    .filter(Predicate.not(NetworkConfiguration::isIPv6LinkLocal))\n+                    .findAny()\n+                    .isPresent();\n@@ -202,1 +214,1 @@\n-                            .filter(NetworkConfiguration::isNotExcludedInterface)\n+                            .filter(NetworkConfiguration::isTestable)\n@@ -212,1 +224,1 @@\n-                            .filter(NetworkConfiguration::isNotExcludedInterface)\n+                            .filter(NetworkConfiguration::isTestable)\n@@ -310,2 +322,2 @@\n-        Map<NetworkInterface, List<Inet4Address>> ip4Interfaces = new HashMap<>();\n-        Map<NetworkInterface, List<Inet6Address>> ip6Interfaces = new HashMap<>();\n+        Map<NetworkInterface, List<Inet4Address>> ip4Interfaces = new LinkedHashMap<>();\n+        Map<NetworkInterface, List<Inet6Address>> ip6Interfaces = new LinkedHashMap<>();\n","filename":"test\/lib\/jdk\/test\/lib\/NetworkConfiguration.java","additions":21,"deletions":9,"binary":false,"changes":30,"status":"modified"}]}