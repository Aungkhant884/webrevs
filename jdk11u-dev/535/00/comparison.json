{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,4 +33,4 @@\n-import java.lang.reflect.Method;\n-import java.nio.*;\n-import java.nio.file.*;\n-import java.nio.file.attribute.*;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.BasicFileAttributes;\n@@ -38,2 +38,7 @@\n-import java.util.concurrent.*;\n-import java.util.zip.*;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.zip.CRC32;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+import java.util.zip.ZipOutputStream;\n@@ -43,5 +48,5 @@\n-    private static Random r = new Random();\n-    private static int    N = 50;\n-    private static int    NN = 10;\n-    private static int    ENUM = 10000;\n-    private static int    ESZ = 10000;\n+    private static final Random r = new Random();\n+    private static final int    N = 50;\n+    private static final int    NN = 10;\n+    private static final int    ENUM = 10000;\n+    private static final int    ESZ = 10000;\n@@ -49,1 +54,3 @@\n-    private static Set<Path> paths = new HashSet<>();\n+    private static final Set<Path> paths = new HashSet<>();\n+    private static final boolean isWindows = System.getProperty(\"os.name\")\n+            .startsWith(\"Windows\");\n@@ -52,1 +59,0 @@\n-\n@@ -58,1 +64,3 @@\n-\n+            executor.shutdown();\n+            executor.awaitTermination(10, TimeUnit.MINUTES);\n+            executor = Executors.newFixedThreadPool(20);\n@@ -62,3 +70,4 @@\n-                testCachedDelete();\n-                testCachedOverwrite();\n-                \/\/test(r.nextInt(ENUM), r.nextInt(ESZ), false, true);\n+                if(!isWindows) {\n+                    testCachedDelete();\n+                    testCachedOverwrite();\n+                }\n@@ -66,1 +75,0 @@\n-\n@@ -80,1 +88,1 @@\n-        String name = \"zftest\" + r.nextInt() + \".zip\";\n+        String name = \"test-\" + r.nextInt() + \".zip\";\n@@ -92,1 +100,1 @@\n-        String name = \"zftest\" + r.nextInt() + \".zip\";\n+        String name = \"testDelete-\" + r.nextInt() + \".zip\";\n@@ -111,1 +119,1 @@\n-        String name = \"zftest\" + r.nextInt() + \".zip\";\n+        String name = \"testCachedDelete-\" + r.nextInt() + \".zip\";\n@@ -138,1 +146,1 @@\n-        String name = \"zftest\" + r.nextInt() + \".zip\";\n+        String name = \"testCachedOverWrite-\" + r.nextInt() + \".zip\";\n@@ -156,2 +164,2 @@\n-            List<ZipEntry> zlist = new ArrayList(zip.entries.keySet());\n-            String[] elist = zf.stream().map( e -> e.getName()).toArray(String[]::new);\n+            List<ZipEntry> zlist = new ArrayList<>(zip.entries.keySet());\n+            String[] elist = zf.stream().map(e -> e.getName()).toArray(String[]::new);\n@@ -222,1 +230,1 @@\n-            check(zf.getEntry(\"\") == null);;\n+            check(zf.getEntry(\"\") == null);\n@@ -227,1 +235,1 @@\n-        List<ZipEntry> list = new ArrayList(zip.entries.keySet());\n+        List<ZipEntry> list = new ArrayList<>(zip.entries.keySet());\n@@ -259,18 +267,0 @@\n-        \/\/ (3) check getMetaInfEntryNames\n-        String[] metas = list.stream()\n-                             .map( e -> e.getName())\n-                             .filter( s -> s.startsWith(\"META-INF\/\"))\n-                             .sorted()\n-                             .toArray(String[]::new);\n-        if (metas.length > 0) {\n-            \/\/ meta-inf entries\n-            Method getMetas = ZipFile.class.getDeclaredMethod(\"getMetaInfEntryNames\");\n-            getMetas.setAccessible(true);\n-            String[] names = (String[])getMetas.invoke(zf);\n-            if (names == null) {\n-                fail(\"Failed to get metanames from \" + zf);\n-            } else {\n-                Arrays.sort(names);\n-                check(Arrays.equals(names, metas));\n-            }\n-        }\n@@ -280,2 +270,2 @@\n-        String name;\n-        Map<ZipEntry, byte[]> entries;\n+        final String name;\n+        final Map<ZipEntry, byte[]> entries;\n@@ -295,1 +285,1 @@\n-                throw (RuntimeException)x;\n+                throw new RuntimeException(x);\n@@ -312,1 +302,1 @@\n-                    writeEntry(zos, crc, ze, ZipEntry.STORED, szMax);\n+                    writeEntry(zos, crc, ze, method, szMax);\n@@ -321,1 +311,1 @@\n-                throw (RuntimeException)x;\n+                throw new RuntimeException(x);\n@@ -327,1 +317,1 @@\n-                throw (RuntimeException)x;\n+                throw new RuntimeException(x);\n@@ -361,2 +351,1 @@\n-    static void unexpected(Throwable t, String msg) {\n-        System.out.println(msg); failed++; t.printStackTrace();}\n+\n@@ -365,1 +354,1 @@\n-    public static void main(String[] args) throws Throwable {\n+    public static void main(String[] args) {\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/TestZipFile.java","additions":43,"deletions":54,"binary":false,"changes":97,"status":"modified"}]}