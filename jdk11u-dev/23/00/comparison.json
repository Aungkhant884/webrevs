{"files":[{"patch":"@@ -1044,5 +1044,1 @@\n-  NoSafepointVerifier no_safepoints; \/\/ we mustn't GC until we've installed the\n-                                     \/\/ ClassLoaderData in the graph since the CLD\n-                                     \/\/ contains oops in _handles that must be walked.\n-\n-  ClassLoaderData* cld = new ClassLoaderData(loader, is_anonymous);\n+  ClassLoaderData* cld;\n@@ -1051,6 +1047,4 @@\n-    \/\/ First, Atomically set it\n-    ClassLoaderData* old = java_lang_ClassLoader::cmpxchg_loader_data(cld, loader(), NULL);\n-    if (old != NULL) {\n-      delete cld;\n-      \/\/ Returns the data.\n-      return old;\n+    MutexLocker ml(ClassLoaderDataGraph_lock);\n+    cld = java_lang_ClassLoader::loader_data(loader());\n+    if (cld != NULL) {\n+      return cld;\n@@ -1058,0 +1052,4 @@\n+    cld = new ClassLoaderData(loader, is_anonymous);\n+    java_lang_ClassLoader::set_loader_data(loader(), cld);\n+  } else {\n+    cld = new ClassLoaderData(loader, is_anonymous);\n@@ -1060,0 +1058,4 @@\n+  NoSafepointVerifier no_safepoints; \/\/ we mustn't GC until we've installed the\n+                                     \/\/ ClassLoaderData in the graph since the CLD\n+                                     \/\/ contains oops in _handles that must be walked.\n+\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.cpp","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -4028,3 +4028,4 @@\n-ClassLoaderData* java_lang_ClassLoader::cmpxchg_loader_data(ClassLoaderData* new_data, oop loader, ClassLoaderData* expected_data) {\n-  assert(loader != NULL && oopDesc::is_oop(loader), \"loader must be oop\");\n-  return HeapAccess<>::atomic_cmpxchg_at(new_data, loader, _loader_data_offset, expected_data);\n+void java_lang_ClassLoader::set_loader_data(oop loader, ClassLoaderData* new_data) {\n+  assert(loader != NULL, \"loader must not be NULL\");\n+  assert(oopDesc::is_oop(loader), \"loader must be oop\");\n+  HeapAccess<>::store_at(loader, _loader_data_offset, new_data);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1324,1 +1324,1 @@\n-  static ClassLoaderData* cmpxchg_loader_data(ClassLoaderData* new_data, oop loader, ClassLoaderData* expected_data);\n+  static void set_loader_data(oop loader, ClassLoaderData* new_data);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -150,0 +150,1 @@\n+Mutex*   ClassLoaderDataGraph_lock    = NULL;\n@@ -238,0 +239,1 @@\n+  def(ClassLoaderDataGraph_lock    , PaddedMutex  , nonleaf,     true,  Monitor::_safepoint_check_sometimes);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-\n+extern Mutex*   ClassLoaderDataGraph_lock;       \/\/ protects CLDG list, needed for concurrent unloading\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}