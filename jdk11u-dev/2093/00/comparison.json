{"files":[{"patch":"@@ -136,2 +136,2 @@\n-\/\/ bool, int, uint, intx, uintx, size_t, ccstr, double, or uint64_t.\n-\/\/ The type \"ccstr\" is an alias for \"const char*\" and is used\n+\/\/ bool, int, uint, intx, uintx, size_t, ccstr, ccstrlist, double, or uint64_t.\n+\/\/ The type \"ccstr\" and \"ccstrlist\" are an alias for \"const char*\" and is used\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -133,0 +133,1 @@\n+  private static Type uint64tType;\n@@ -234,0 +235,44 @@\n+     public boolean isCcstr() {\n+        return type.equals(\"ccstr\");\n+     }\n+\n+     public String getCcstr() {\n+        if (Assert.ASSERTS_ENABLED) {\n+           Assert.that(isCcstr(), \"not a ccstr flag!\");\n+        }\n+        return CStringUtilities.getString(addr.getAddressAt(0));\n+     }\n+\n+     public boolean isCcstrlist() {\n+        return type.equals(\"ccstrlist\");\n+     }\n+\n+     public String getCcstrlist() {\n+        if (Assert.ASSERTS_ENABLED) {\n+           Assert.that(isCcstrlist(), \"not a ccstrlist flag!\");\n+        }\n+        return CStringUtilities.getString(addr.getAddressAt(0));\n+     }\n+\n+     public boolean isDouble() {\n+        return type.equals(\"double\");\n+     }\n+\n+     public double getDouble() {\n+        if (Assert.ASSERTS_ENABLED) {\n+           Assert.that(isDouble(), \"not a double flag!\");\n+        }\n+        return addr.getJDoubleAt(0);\n+     }\n+\n+     public boolean isUint64t() {\n+        return type.equals(\"uint64_t\");\n+     }\n+\n+     public long getUint64t() {\n+        if (Assert.ASSERTS_ENABLED) {\n+           Assert.that(isUint64t(), \"not an uint64_t flag!\");\n+        }\n+        return addr.getCIntegerAt(0, uint64tType.getSize(), true);\n+     }\n+\n@@ -244,1 +289,1 @@\n-           return Long.toString(getUIntx());\n+           return Long.toUnsignedString(getUIntx());\n@@ -246,1 +291,17 @@\n-            return Long.toString(getSizet());\n+           return Long.toUnsignedString(getSizet());\n+        } else if (isCcstr()) {\n+           var str = getCcstr();\n+           if (str != null) {\n+               str = \"\\\"\" + str + \"\\\"\";\n+           }\n+           return str;\n+        } else if (isCcstrlist()) {\n+           var str = getCcstrlist();\n+           if (str != null) {\n+               str = \"\\\"\" + str + \"\\\"\";\n+           }\n+           return str;\n+        } else if (isDouble()) {\n+           return Double.toString(getDouble());\n+        } else if (isUint64t()) {\n+           return Long.toUnsignedString(getUint64t());\n@@ -248,1 +309,1 @@\n-           return null;\n+           throw new WrongTypeException(\"Unknown type: \" + type + \" (\" + name + \")\");\n@@ -386,0 +447,1 @@\n+    uint64tType = db.lookupType(\"uint64_t\");\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/VM.java","additions":66,"deletions":4,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+ * @bug 8217612\n@@ -44,2 +45,2 @@\n-    public static void main(String[] args) throws Exception {\n-        System.out.println(\"Starting ClhsdbFlags test\");\n+    public static void runBasicTest() throws Exception {\n+        System.out.println(\"Starting ClhsdbFlags basic test\");\n@@ -93,0 +94,50 @@\n+\n+    public static void runAllTypesTest() throws Exception {\n+        System.out.println(\"Starting ClhsdbFlags all types test\");\n+\n+        LingeredApp theApp = null;\n+        try {\n+            ClhsdbLauncher test = new ClhsdbLauncher();\n+            List<String> vmArgs = new ArrayList<String>();\n+            vmArgs.add(\"-XX:+UnlockDiagnosticVMOptions\");   \/\/ bool\n+            vmArgs.add(\"-XX:ActiveProcessorCount=1\");       \/\/ int\n+            vmArgs.add(\"-XX:ParallelGCThreads=1\");          \/\/ uint\n+            vmArgs.add(\"-XX:MaxJavaStackTraceDepth=1024\");  \/\/ intx\n+            vmArgs.add(\"-XX:LogEventsBufferEntries=10\");    \/\/ uintx\n+            vmArgs.add(\"-XX:HeapSizePerGCThread=32m\");      \/\/ size_t\n+            vmArgs.add(\"-XX:NativeMemoryTracking=off\");     \/\/ ccstr\n+            vmArgs.add(\"-XX:OnError='echo error'\");         \/\/ ccstrlist\n+            vmArgs.add(\"-XX:CompileThresholdScaling=1.0\");  \/\/ double\n+            vmArgs.add(\"-XX:ErrorLogTimeout=120\");          \/\/ uint64_t\n+            vmArgs.addAll(Utils.getVmOptions());\n+            theApp = LingeredApp.startApp(vmArgs);\n+            System.out.println(\"Started LingeredApp with pid \" + theApp.getPid());\n+\n+            List<String> cmds = List.of(\"flags\");\n+\n+            Map<String, List<String>> expStrMap = new HashMap<>();\n+            expStrMap.put(\"flags\", List.of(\n+                    \"UnlockDiagnosticVMOptions = true\",\n+                    \"ActiveProcessorCount = 1\",\n+                    \"ParallelGCThreads = 1\",\n+                    \"MaxJavaStackTraceDepth = 1024\",\n+                    \"LogEventsBufferEntries = 10\",\n+                    \"HeapSizePerGCThread = 3\",\n+                    \"NativeMemoryTracking = \\\"off\\\"\",\n+                    \"OnError = \\\"'echo error'\\\"\",\n+                    \"CompileThresholdScaling = 1.0\",\n+                    \"ErrorLogTimeout = 120\"));\n+\n+            test.run(theApp.getPid(), cmds, expStrMap, null);\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n+        } finally {\n+            LingeredApp.stopApp(theApp);\n+        }\n+        System.out.println(\"Test PASSED\");\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        runBasicTest();\n+        runAllTypesTest();\n+    }\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbFlags.java","additions":54,"deletions":3,"binary":false,"changes":57,"status":"modified"}]}