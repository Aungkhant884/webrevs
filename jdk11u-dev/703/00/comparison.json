{"files":[{"patch":"@@ -85,1 +85,1 @@\n-  T operator()(const volatile T* p) const { register T t = Atomic::load(p); inlasm_acquire_reg(t); return t; }\n+  T operator()(const volatile T* p) const { T t = Atomic::load(p); inlasm_acquire_reg(t); return t; }\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/orderAccess_aix_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -281,1 +281,1 @@\n-  register void *esp;\n+  void *esp;\n@@ -285,1 +285,1 @@\n-  register void *esp;\n+  void *esp;\n@@ -413,1 +413,1 @@\n-  register intptr_t **ebp;\n+  intptr_t **ebp;\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/os_bsd_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-  T operator()(const volatile T* p) const { register T t = Atomic::load(p); inlasm_acquire_reg(t); return t; }\n+  T operator()(const volatile T* p) const { T t = Atomic::load(p); inlasm_acquire_reg(t); return t; }\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/orderAccess_linux_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-  T operator()(const volatile T* p) const { register T t = *p; inlasm_zarch_acquire(); return t; }\n+  T operator()(const volatile T* p) const { T t = *p; inlasm_zarch_acquire(); return t; }\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/orderAccess_linux_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-  register void *esp;\n+  void *esp;\n@@ -102,1 +102,1 @@\n-  intptr_t* esp;\n+  void* esp;\n@@ -232,1 +232,1 @@\n-  register intptr_t **ebp;\n+  intptr_t **ebp;\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4569,1 +4569,1 @@\n-  register char c;\n+  char c;\n@@ -4767,1 +4767,1 @@\n-  register char c;\n+  char          c;\n","filename":"src\/hotspot\/share\/adlc\/adlparse.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-  register Chunk *k = _first;\n+  Chunk *k = _first;\n@@ -96,1 +96,1 @@\n-  register Chunk *k = _chunk;   \/\/ Get filled-up chunk address\n+  Chunk *k = _chunk;            \/\/ Get filled-up chunk address\n","filename":"src\/hotspot\/share\/adlc\/arena.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -286,3 +286,3 @@\n-  register char c, k = 0;\n-  register int sum = 0;\n-  register const char *s = (const char *)t;\n+  char c, k = 0;\n+  int sum = 0;\n+  const char *s = (const char *)t;\n","filename":"src\/hotspot\/share\/adlc\/dict2.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-    register char *s = argv[i]; \/\/ Get option\/filename\n+    char *s = argv[i];          \/\/ Get option\/filename\n","filename":"src\/hotspot\/share\/adlc\/main.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -497,5 +497,5 @@\n-  register intptr_t*        topOfStack = (intptr_t *)istate->stack(); \/* access with STACK macros *\/\n-  register address          pc = istate->bcp();\n-  register jubyte opcode;\n-  register intptr_t*        locals = istate->locals();\n-  register ConstantPoolCache*    cp = istate->constants(); \/\/ method()->constants()->cache()\n+  intptr_t*        topOfStack = (intptr_t *)istate->stack(); \/* access with STACK macros *\/\n+  address          pc = istate->bcp();\n+  jubyte opcode;\n+  intptr_t*        locals = istate->locals();\n+  ConstantPoolCache*    cp = istate->constants(); \/\/ method()->constants()->cache()\n@@ -503,1 +503,1 @@\n-  register JavaThread*      THREAD = istate->thread();\n+  JavaThread*      THREAD = istate->thread();\n@@ -592,1 +592,1 @@\n-  register uintptr_t *dispatch_table = (uintptr_t*)&opclabels_data[0];\n+  uintptr_t *dispatch_table = (uintptr_t*)&opclabels_data[0];\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeInterpreter.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -308,3 +308,3 @@\n-  register char c, k = 0;\n-  register int32_t sum = 0;\n-  register const char *s = (const char *)t;\n+  char c, k = 0;\n+  int32_t sum = 0;\n+  const char *s = (const char *)t;\n","filename":"src\/hotspot\/share\/libadt\/dict.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-  register char *s = buf;       \/\/ Current working string pointer\n+  char *s = buf;                \/\/ Current working string pointer\n@@ -119,2 +119,2 @@\n-  register char c;              \/\/ Parse character\n-  register const char *t = s;   \/\/ Save the starting position of s.\n+  char c;                       \/\/ Parse character\n+  const char *t = s;            \/\/ Save the starting position of s.\n","filename":"src\/hotspot\/share\/libadt\/set.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -104,2 +104,2 @@\n-  register uint word = elem >> 5;            \/\/ Get the longword offset\n-  register uint32_t mask = 1L << (elem & 31);  \/\/ Get bit mask\n+  uint word = elem >> 5;            \/\/ Get the longword offset\n+  uint32_t mask = 1L << (elem & 31);  \/\/ Get bit mask\n@@ -117,1 +117,1 @@\n-  register uint word = elem >> 5; \/\/ Get the longword offset\n+  uint word = elem >> 5;          \/\/ Get the longword offset\n@@ -120,1 +120,1 @@\n-  register uint32_t mask = 1L << (elem & 31);     \/\/ Get bit mask\n+  uint32_t mask = 1L << (elem & 31);     \/\/ Get bit mask\n@@ -131,2 +131,2 @@\n-  register uint32_t *u1 = data;   \/\/ Pointer to the destination data\n-  register uint32_t *u2 = s.data; \/\/ Pointer to the source data\n+  uint32_t *u1 = data;          \/\/ Pointer to the destination data\n+  uint32_t *u2 = s.data;        \/\/ Pointer to the source data\n@@ -150,3 +150,3 @@\n-  register uint cnt = ((size<s.size)?size:s.size);\n-  register uint32_t *u1 = data;   \/\/ Pointer to the destination data\n-  register uint32_t *u2 = s.data; \/\/ Pointer to the source data\n+  uint cnt = ((size<s.size)?size:s.size);\n+  uint32_t *u1 = data;          \/\/ Pointer to the destination data\n+  uint32_t *u2 = s.data;        \/\/ Pointer to the source data\n@@ -175,3 +175,3 @@\n-  register uint cnt = ((size<s.size)?size:s.size);\n-  register uint32_t *u1 = data;   \/\/ Pointer to the destination data\n-  register uint32_t *u2 = s.data; \/\/ Pointer to the source data\n+  uint cnt = ((size<s.size)?size:s.size);\n+  uint32_t *u1 = data;          \/\/ Pointer to the destination data\n+  uint32_t *u2 = s.data;        \/\/ Pointer to the source data\n@@ -198,3 +198,3 @@\n-  register uint32_t *u1 = data;   \/\/ Pointer to the destination data\n-  register uint32_t *u2 = s.data; \/\/ Pointer to the source data\n-  register uint32_t AnotB = 0, BnotA = 0;\n+  uint32_t *u1 = data;          \/\/ Pointer to the destination data\n+  uint32_t *u2 = s.data;        \/\/ Pointer to the source data\n+  uint32_t AnotB = 0, BnotA = 0;\n@@ -202,1 +202,1 @@\n-  register uint cnt = ((size<s.size)?size:s.size);\n+  uint cnt = ((size<s.size)?size:s.size);\n@@ -207,2 +207,2 @@\n-    register uint32_t A = *u1++;  \/\/ Data from one guy\n-    register uint32_t B = *u2++;  \/\/ Data from other guy\n+    uint32_t A = *u1++;         \/\/ Data from one guy\n+    uint32_t B = *u2++;         \/\/ Data from other guy\n@@ -248,3 +248,3 @@\n-  register uint small_size = ((size<s.size)?size:s.size);\n-  register uint32_t *u1 = data;        \/\/ Pointer to the destination data\n-  register uint32_t *u2 = s.data;      \/\/ Pointer to the source data\n+  uint small_size = ((size<s.size)?size:s.size);\n+  uint32_t *u1 = data;               \/\/ Pointer to the destination data\n+  uint32_t *u2 = s.data;             \/\/ Pointer to the source data\n@@ -289,5 +289,5 @@\n-  register uint word = elem >> 5; \/\/ Get the longword offset\n-  if( word >= size )              \/\/ Beyond the last?\n-    return 0;                     \/\/ Then it's clear\n-  register uint32_t mask = 1L << (elem & 31);  \/\/ Get bit mask\n-  return ((data[word] & mask))!=0;           \/\/ Return the sense of the bit\n+  uint word = elem >> 5;              \/\/ Get the longword offset\n+  if( word >= size )                  \/\/ Beyond the last?\n+    return 0;                         \/\/ Then it's clear\n+  uint32_t mask = 1L << (elem & 31);  \/\/ Get bit mask\n+  return ((data[word] & mask))!=0;    \/\/ Return the sense of the bit\n","filename":"src\/hotspot\/share\/libadt\/vectset.cpp","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -340,1 +340,1 @@\n-  register Chunk *k = _first;\n+  Chunk *k = _first;\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  register const Type *one = mul_id();  \/\/ The multiplicative identity\n+  const Type *one = mul_id();  \/\/ The multiplicative identity\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}