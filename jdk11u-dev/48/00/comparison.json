{"files":[{"patch":"@@ -373,0 +373,3 @@\n+  if (method->can_be_statically_bound()) {\n+    THROW_MSG_0(vmSymbols::java_lang_InternalError(), err_msg(\"Effectively static method %s.%s should be handled in Java code\", method->method_holder()->external_name(), method->external_name()));\n+  }\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-        return (isFinal() || isPrivate() || isStatic() || holder.isLeaf()) && isConcrete();\n+        return (isFinal() || isPrivate() || isStatic() || holder.isLeaf() || isConstructor()) && isConcrete();\n@@ -395,0 +395,2 @@\n+        assert !canBeStaticallyBound() : this;\n+\n@@ -406,0 +408,1 @@\n+        assert !receiver.isLinked() || isInVirtualMethodTable(receiver);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotResolvedJavaMethodImpl.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-        result.add(new TestCase(true, SingleSubclass.class, \"privateMethod\"));\n+        result.add(new TestCase(InternalError.class, SingleSubclass.class, \"privateMethod\"));\n@@ -95,1 +95,1 @@\n-        result.add(new TestCase(false, SingleSubclass.class, \"staticMethod\"));\n+        result.add(new TestCase(InternalError.class, SingleSubclass.class, \"staticMethod\"));\n@@ -112,4 +112,15 @@\n-        HotSpotResolvedJavaMethod concreteMethod = CompilerToVMHelper\n-                .findUniqueConcreteMethod(resolvedType, testMethod);\n-        Asserts.assertEQ(concreteMethod, tcase.isPositive ? testMethod : null,\n-                \"Unexpected concrete method for \" + tcase.methodName);\n+        if (tcase.exception != null) {\n+            try {\n+                HotSpotResolvedJavaMethod concreteMethod = CompilerToVMHelper\n+                        .findUniqueConcreteMethod(resolvedType, testMethod);\n+\n+                Asserts.fail(\"Exception \" + tcase.exception.getName() + \" not thrown for \" + tcase.methodName);\n+            } catch (Throwable t) {\n+                Asserts.assertEQ(t.getClass(), tcase.exception, \"Wrong exception thrown for \" + tcase.methodName);\n+            }\n+        } else {\n+            HotSpotResolvedJavaMethod concreteMethod = CompilerToVMHelper\n+                    .findUniqueConcreteMethod(resolvedType, testMethod);\n+            Asserts.assertEQ(concreteMethod, tcase.isPositive ? testMethod : null,\n+                    \"Unexpected concrete method for \" + tcase.methodName);\n+        }\n@@ -123,0 +134,1 @@\n+        public final Class<?> exception;\n@@ -125,1 +137,1 @@\n-                        String methodName) {\n+                        String methodName, Class<?> exception) {\n@@ -130,0 +142,6 @@\n+            this.exception = exception;\n+        }\n+\n+        public TestCase(boolean isPositive, Class<?> clazz, Class<?> holder,\n+                        String methodName) {\n+            this(isPositive, clazz, holder, methodName, null);\n@@ -133,1 +151,5 @@\n-            this(isPositive, clazz, clazz, methodName);\n+            this(isPositive, clazz, clazz, methodName, null);\n+        }\n+\n+        public TestCase(Class<?> exception, Class<?> clazz, String methodName) {\n+            this(false, clazz, clazz, methodName, exception);\n@@ -138,2 +160,3 @@\n-            return String.format(\"CASE: receiver=%s, holder=%s, method=%s, isPositive=%s\",\n-                                 receiver.getName(), holder.getName(), methodName, isPositive);\n+            return String.format(\"CASE: receiver=%s, holder=%s, method=%s, isPositive=%s, exception=%s\",\n+                                 receiver.getName(), holder.getName(), methodName, isPositive,\n+                                 exception == null ? \"<none>\" : exception.getName());\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/FindUniqueConcreteMethodTest.java","additions":33,"deletions":10,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -217,1 +217,2 @@\n-        return (Modifier.isFinal(modifiers) || Modifier.isPrivate(modifiers) || Modifier.isStatic(modifiers) || Modifier.isFinal(method.getDeclaringClass().getModifiers())) &&\n+        boolean isConstructor = method instanceof Constructor;\n+        return (Modifier.isFinal(modifiers) || Modifier.isPrivate(modifiers) || Modifier.isStatic(modifiers) || Modifier.isFinal(method.getDeclaringClass().getModifiers()) || isConstructor) &&\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/TestResolvedJavaMethod.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}