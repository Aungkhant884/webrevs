{"files":[{"patch":"@@ -38,2 +38,2 @@\n-static bool initialized = false;\n-static volatile int lock_count = -1;\n+static INIT_ONCE initialized = INIT_ONCE_STATIC_INIT;\n+static int lock_count = 0;\n@@ -41,1 +41,1 @@\n-static DWORD lock_owner = -1;\n+static DWORD lock_owner = 0;\n@@ -54,0 +54,6 @@\n+static BOOL WINAPI initialize(PINIT_ONCE InitOnce, PVOID Parameter, PVOID *Context) {\n+  lock_event = CreateEvent(NULL, false, true, NULL);\n+  assert(lock_event != NULL, \"unexpected return value from CreateEvent\");\n+  return true;\n+}\n+\n@@ -55,1 +61,1 @@\n-  DWORD current_thread = GetCurrentThreadId();\n+  InitOnceExecuteOnce(&initialized, &initialize, NULL, NULL);\n@@ -57,0 +63,1 @@\n+  DWORD current_thread = GetCurrentThreadId();\n@@ -59,15 +66,2 @@\n-    while (Atomic::cmpxchg(0, &lock_count, -1) != -1) {\n-      if (initialized) {\n-        DWORD ret = WaitForSingleObject(lock_event,  INFINITE);\n-        assert(ret == WAIT_OBJECT_0, \"unexpected return value from WaitForSingleObject\");\n-      }\n-    }\n-\n-    \/\/ Make sure the event object is allocated.\n-    if (!initialized) {\n-      \/\/ Locking will not work correctly unless this is autoreset.\n-      lock_event = CreateEvent(NULL, false, false, NULL);\n-      initialized = true;\n-    }\n-\n-    assert(lock_owner == -1, \"Lock acquired illegally.\");\n+    DWORD ret = WaitForSingleObject(lock_event,  INFINITE);\n+    assert(ret == WAIT_OBJECT_0, \"unexpected return value from WaitForSingleObject\");\n@@ -75,3 +69,0 @@\n-  } else {\n-    \/\/ Atomicity isn't required. Bump the recursion count.\n-    lock_count++;\n@@ -79,2 +70,2 @@\n-\n-  assert(lock_owner == GetCurrentThreadId(), \"Lock acquired illegally.\");\n+  \/\/ Atomicity isn't required. Bump the recursion count.\n+  lock_count++;\n@@ -87,0 +78,1 @@\n+  lock_count--;\n@@ -89,2 +81,1 @@\n-    lock_owner = -1;\n-    lock_count = -1;\n+    lock_owner = 0;\n@@ -94,3 +85,0 @@\n-  } else {\n-    \/\/ Just unwinding a recursive lock;\n-    lock_count--;\n","filename":"src\/hotspot\/os\/windows\/threadCritical_windows.cpp","additions":17,"deletions":29,"binary":false,"changes":46,"status":"modified"}]}