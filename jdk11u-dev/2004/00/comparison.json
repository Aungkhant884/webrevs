{"files":[{"patch":"@@ -213,1 +213,1 @@\n-        SSLParameters params = new SSLParameters();\n+        SSLParameters params = socket.getSSLParameters();\n@@ -218,1 +218,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLContextSpi.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-        this.preferLocalCipherSuites = false;\n+        this.preferLocalCipherSuites = true;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLConfiguration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ SunJSSE does not support dynamic system properties, no way to re-use\n+\/\/ system properties in samevm\/agentvm mode.\n+\n+\/*\n+ * @test\n+ * @bug 8168261\n+ * @summary Use server cipher suites preference by default\n+ * @run main\/othervm DefaultCipherSuitePreference\n+ *\/\n+\n+import javax.net.SocketFactory;\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLParameters;\n+import javax.net.ssl.SSLServerSocket;\n+import javax.net.ssl.SSLServerSocketFactory;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.TrustManager;\n+\n+public class DefaultCipherSuitePreference {\n+    private static final String[] contextAlgorithms = {\n+            \"Default\", \"SSL\", \"TLS\", \"SSLv3\", \"TLSv1\",\n+            \"TLSv1.1\", \"TLSv1.2\", \"TLSv1.3\"\n+        };\n+\n+    public static void main(String[] args) throws Exception {\n+        for (String algorithm : contextAlgorithms) {\n+            System.out.println(\"Checking SSLContext of \" + algorithm);\n+            SSLContext sslContext = SSLContext.getInstance(algorithm);\n+\n+            \/\/ Default SSLContext is initialized automatically.\n+            if (!algorithm.equals(\"Default\")) {\n+                \/\/ Use default TK, KM and random.\n+                sslContext.init((KeyManager[])null, (TrustManager[])null, null);\n+            }\n+\n+            \/\/\n+            \/\/ Check SSLContext\n+            \/\/\n+            \/\/ Check default SSLParameters of SSLContext\n+            checkDefaultCipherSuitePreference(\n+                    sslContext.getDefaultSSLParameters(),\n+                    \"SSLContext.getDefaultSSLParameters()\");\n+\n+            \/\/ Check supported SSLParameters of SSLContext\n+            checkDefaultCipherSuitePreference(\n+                    sslContext.getSupportedSSLParameters(),\n+                    \"SSLContext.getSupportedSSLParameters()\");\n+\n+            \/\/\n+            \/\/ Check SSLEngine\n+            \/\/\n+            \/\/ Check SSLParameters of SSLEngine\n+            SSLEngine engine = sslContext.createSSLEngine();\n+            engine.setUseClientMode(true);\n+            checkDefaultCipherSuitePreference(\n+                    engine.getSSLParameters(),\n+                    \"client mode SSLEngine.getSSLParameters()\");\n+\n+            engine.setUseClientMode(false);\n+            checkDefaultCipherSuitePreference(\n+                    engine.getSSLParameters(),\n+                    \"server mode SSLEngine.getSSLParameters()\");\n+\n+            \/\/\n+            \/\/ Check SSLSocket\n+            \/\/\n+            \/\/ Check SSLParameters of SSLSocket\n+            SocketFactory fac = sslContext.getSocketFactory();\n+            SSLSocket socket = (SSLSocket)fac.createSocket();\n+            checkDefaultCipherSuitePreference(\n+                    socket.getSSLParameters(),\n+                    \"SSLSocket.getSSLParameters()\");\n+\n+            \/\/\n+            \/\/ Check SSLServerSocket\n+            \/\/\n+            \/\/ Check SSLParameters of SSLServerSocket\n+            SSLServerSocketFactory sf = sslContext.getServerSocketFactory();\n+            SSLServerSocket ssocket = (SSLServerSocket)sf.createServerSocket();\n+            checkDefaultCipherSuitePreference(\n+                    ssocket.getSSLParameters(),\n+                    \"SSLServerSocket.getSSLParameters()\");\n+        }\n+    }\n+\n+    private static void checkDefaultCipherSuitePreference(\n+            SSLParameters parameters, String context) throws Exception {\n+        if (!parameters.getUseCipherSuitesOrder()) {\n+            throw new Exception(\n+                    \"The local cipher suite preference is not honored \" +\n+                    \"in the connection populated SSLParameters object (\" +\n+                    context + \")\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLContextImpl\/DefaultCipherSuitePreference.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"}]}