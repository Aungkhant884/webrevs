{"files":[{"patch":"@@ -58,0 +58,3 @@\n+# Disable MSVC warning C4146 \"unary minus operator applied to unsigned type,\n+# result still unsigned\". This operation is well-defined.\n+\n@@ -81,0 +84,1 @@\n+    DISABLED_WARNINGS_microsoft := 4146, \\\n","filename":"make\/hotspot\/lib\/CompileGtest.gmk","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -151,0 +151,2 @@\n+# Disable MSVC warning C4146 \"unary minus operator applied to unsigned type,\n+# result still unsigned\". This operation is well-defined.\n@@ -167,0 +169,1 @@\n+    DISABLED_WARNINGS_microsoft := 4146, \\\n","filename":"make\/hotspot\/lib\/CompileJvm.gmk","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2058,5 +2058,0 @@\n-  switch (opcode) {\n-  default:\n-    break;\n-  }\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-    guarantee(val < (1U << nbits), \"Field too big for insn\");\n+    guarantee(val < (1ULL << nbits), \"Field too big for insn\");\n@@ -439,2 +439,2 @@\n-    guarantee((_mode == base_plus_offset | _mode == base_plus_offset_reg\n-               | _mode == post | _mode == post_reg),\n+    guarantee((_mode == base_plus_offset || _mode == base_plus_offset_reg\n+               || _mode == post || _mode == post_reg),\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -679,5 +679,6 @@\n-#define DESCRIBE_FP_OFFSET(name)                                        \\\n-  {                                                                     \\\n-    uintptr_t *p = (uintptr_t *)fp;                                     \\\n-    printf(\"0x%016lx 0x%016lx %s\\n\", (uintptr_t)(p + frame::name##_offset), \\\n-           p[frame::name##_offset], #name);                             \\\n+#define DESCRIBE_FP_OFFSET(name)                       \\\n+  {                                                    \\\n+    uintptr_t *p = (uintptr_t *)fp;                    \\\n+    printf(INTPTR_FORMAT \" \" INTPTR_FORMAT \" %s\\n\",    \\\n+           (uintptr_t)(p + frame::name##_offset),      \\\n+           p[frame::name##_offset], #name);            \\\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1835,1 +1835,1 @@\n-    const unsigned mask = size_in_bytes - 1;\n+    const uint64_t mask = size_in_bytes - 1;\n@@ -2777,1 +2777,1 @@\n-  const int sz = prev_ldst->size_in_bytes();\n+  const size_t sz = prev_ldst->size_in_bytes();\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-             > (1UL << log2_intptr((uintptr_t)Universe::narrow_klass_range()))));\n+             > (1ULL << log2_intptr(Universe::narrow_klass_range()))));\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -684,1 +684,1 @@\n-  size_t size_in_bytes() { return 1 << size(); }\n+  size_t size_in_bytes() { return 1ULL << size(); }\n","filename":"src\/hotspot\/cpu\/aarch64\/nativeInst_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1501,1 +1501,1 @@\n-    __ bang_stack_with_offset(JavaThread::stack_shadow_zone_size());\n+    __ bang_stack_with_offset(checked_cast<int>(JavaThread::stack_shadow_zone_size()));\n@@ -2449,1 +2449,1 @@\n-  __ mov(rscratch1, (address)0xDEADDEAD);        \/\/ Make a recognizable pattern\n+  __ mov(rscratch1, (uint64_t)0xDEADDEAD);        \/\/ Make a recognizable pattern\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1302,1 +1302,1 @@\n-  void verify_oop_array (size_t size, Register a, Register count, Register temp) {\n+  void verify_oop_array (int size, Register a, Register count, Register temp) {\n@@ -1309,1 +1309,1 @@\n-    if (size == (size_t)wordSize) {\n+    if (size == wordSize) {\n@@ -1341,1 +1341,1 @@\n-                                  const char *name, bool dest_uninitialized = false) {\n+                                 const char *name, bool dest_uninitialized = false) {\n@@ -1370,1 +1370,1 @@\n-    copy_memory(aligned, s, d, count, rscratch1, size);\n+    copy_memory(aligned, s, d, count, rscratch1, checked_cast<int>(size));\n@@ -1375,1 +1375,1 @@\n-        verify_oop_array(size, d, count, r16);\n+        verify_oop_array(checked_cast<int>(size), d, count, r16);\n@@ -1401,1 +1401,1 @@\n-  address generate_conjoint_copy(size_t size, bool aligned, bool is_oop, address nooverlap_target,\n+  address generate_conjoint_copy(int size, bool aligned, bool is_oop, address nooverlap_target,\n@@ -1647,1 +1647,1 @@\n-    const size_t size = UseCompressedOops ? sizeof (jint) : sizeof (jlong);\n+    const int size = UseCompressedOops ? sizeof (jint) : sizeof (jlong);\n@@ -1665,1 +1665,1 @@\n-    const size_t size = UseCompressedOops ? sizeof (jint) : sizeof (jlong);\n+    const int size = UseCompressedOops ? sizeof (jint) : sizeof (jlong);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1128,1 +1128,1 @@\n-    const int n_shadow_pages = JavaThread::stack_shadow_zone_size() \/ os::vm_page_size();\n+    const int n_shadow_pages = checked_cast<int>(JavaThread::stack_shadow_zone_size() \/ os::vm_page_size());\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}