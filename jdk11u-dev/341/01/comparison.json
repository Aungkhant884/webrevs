{"files":[{"patch":"@@ -981,27 +981,0 @@\n-    if (inner_out->outcnt() != 1) {\n-      ResourceMark rm;\n-      Unique_Node_List wq;\n-\n-      for (DUIterator_Fast imax, i = inner_out->fast_outs(imax); i < imax; i++) {\n-        Node* u = inner_out->fast_out(i);\n-        if (u == sfpt) {\n-          continue;\n-        }\n-        wq.clear();\n-        wq.push(u);\n-        bool found_sfpt = false;\n-        for (uint next = 0; next < wq.size() && !found_sfpt; next++) {\n-          Node *n = wq.at(next);\n-          for (DUIterator_Fast imax, i = n->fast_outs(imax); i < imax && !found_sfpt; i++) {\n-            Node* u = n->fast_out(i);\n-            if (u == sfpt) {\n-              found_sfpt = true;\n-            }\n-            if (!u->is_CFG()) {\n-              wq.push(u);\n-            }\n-          }\n-        }\n-        assert(found_sfpt, \"no node in loop that's not input to safepoint\");\n-      }\n-    }\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1857,1 +1857,4 @@\n-      if (outer_loop->is_member(u_loop)) {\n+      if (outer_loop->is_member(u_loop) ||\n+          \/\/ nodes pinned with control in the outer loop but not referenced from the safepoint must be moved out of\n+          \/\/ the outer loop too\n+          (u->in(0) != NULL && outer_loop->is_member(phase->get_loop(u->in(0))))) {\n@@ -1977,0 +1980,6 @@\n+\n+    Node* inner_out = sfpt->in(0);\n+    if (inner_out->outcnt() > 1) {\n+      clone_outer_loop_helper(inner_out, loop, outer_loop, old_new, wq, this, true);\n+    }\n+\n@@ -1982,0 +1991,3 @@\n+      if (n->in(0) != NULL) {\n+        _igvn.replace_input_of(n, 0, new_ctrl);\n+      }\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8268672\n+ * @summary C2: assert(!loop->is_member(u_loop)) failed: can be in outer loop or out of both loops only\n+ *\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestPinnedNodeInInnerLoop TestPinnedNodeInInnerLoop\n+ *\n+ *\/\n+\n+public class TestPinnedNodeInInnerLoop {\n+    boolean b;\n+    double d;\n+    int iArr[];\n+\n+    public static void main(String[] args) {\n+        TestPinnedNodeInInnerLoop t = new TestPinnedNodeInInnerLoop();\n+        for (int i = 0; i < 10; i++) {\n+            t.test();\n+        }\n+    }\n+\n+    void test() {\n+        int e = 4, f = -51874, g = 7, h = 0;\n+\n+        for (; f < 3; ++f) {\n+        }\n+        while (++g < 2) {\n+            if (b) {\n+                d = h;\n+            } else {\n+                iArr[g] = e;\n+            }\n+        }\n+        System.out.println(g);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/TestPinnedNodeInInnerLoop.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8263303\n+ * @summary C2 compilation fails with assert(found_sfpt) failed: no node in loop that's not input to safepoint\n+ *\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:LoopUnrollLimit=0 TestPinnedUseInOuterLSMUnusedBySfpt\n+ *\n+ *\/\n+\n+public class TestPinnedUseInOuterLSMUnusedBySfpt {\n+    public static void main(String[] args) {\n+        int[] array = new int[10000];\n+        for (int i = 0; i < 20_000; i++) {\n+            test(100, array, 42);\n+            test(100, array, 0);\n+        }\n+    }\n+\n+    private static float test(int stop, int[] array, int val) {\n+        if (array == null) {\n+        }\n+        int j;\n+        for (j = 0; j < 10; j++) {\n+\n+        }\n+        int i;\n+        int v = 0;\n+        float f = 1;\n+        for (i = 0; i < 10000; i++) {\n+            if ((j - 10) * i + val == 42) {\n+                f *= 2;\n+            } else {\n+                f *= 3;\n+            }\n+            v = (j - 10) * array[i];\n+            if (i % 10001 != i) {\n+                return v;\n+            }\n+        }\n+        return v + array[i-1] + f;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/TestPinnedUseInOuterLSMUnusedBySfpt.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}