{"files":[{"patch":"@@ -1,141 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jaxp.library;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.OutputStream;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardCopyOption;\n-import java.util.ArrayList;\n-import java.util.Enumeration;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.jar.JarEntry;\n-import java.util.jar.JarFile;\n-import java.util.jar.JarOutputStream;\n-import java.util.jar.Manifest;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-\/**\n- * This class consists exclusively of static utility methods that are useful\n- * for creating and manipulating JAR files.\n- *\/\n-\n-public final class JarUtils {\n-    private JarUtils() { }\n-\n-    \/**\n-     * Creates a JAR file.\n-     *\n-     * Equivalent to {@code jar cfm <jarfile> <manifest> -C <dir> file...}\n-     *\n-     * The input files are resolved against the given directory. Any input\n-     * files that are directories are processed recursively.\n-     *\/\n-    public static void createJarFile(Path jarfile, Manifest man, Path dir, Path... file)\n-        throws IOException\n-    {\n-        \/\/ create the target directory\n-        Path parent = jarfile.getParent();\n-        if (parent != null)\n-            Files.createDirectories(parent);\n-\n-        List<Path> entries = new ArrayList<>();\n-        for (Path entry : file) {\n-            Files.find(dir.resolve(entry), Integer.MAX_VALUE,\n-                        (p, attrs) -> attrs.isRegularFile())\n-                    .map(e -> dir.relativize(e))\n-                    .forEach(entries::add);\n-        }\n-\n-        try (OutputStream out = Files.newOutputStream(jarfile);\n-             JarOutputStream jos = new JarOutputStream(out))\n-        {\n-            if (man != null) {\n-                JarEntry je = new JarEntry(JarFile.MANIFEST_NAME);\n-                jos.putNextEntry(je);\n-                man.write(jos);\n-                jos.closeEntry();\n-            }\n-\n-            for (Path entry : entries) {\n-                String name = toJarEntryName(entry);\n-                jos.putNextEntry(new JarEntry(name));\n-                Files.copy(dir.resolve(entry), jos);\n-                jos.closeEntry();\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Creates a JAR file.\n-     *\n-     * Equivalent to {@code jar cf <jarfile>  -C <dir> file...}\n-     *\n-     * The input files are resolved against the given directory. Any input\n-     * files that are directories are processed recursively.\n-     *\/\n-    public static void createJarFile(Path jarfile, Path dir, Path... file)\n-        throws IOException\n-    {\n-        createJarFile(jarfile, null, dir, file);\n-    }\n-\n-    \/**\n-     * Creates a JAR file.\n-     *\n-     * Equivalent to {@code jar cf <jarfile> -C <dir> file...}\n-     *\n-     * The input files are resolved against the given directory. Any input\n-     * files that are directories are processed recursively.\n-     *\/\n-    public static void createJarFile(Path jarfile, Path dir, String... input)\n-        throws IOException\n-    {\n-        Path[] paths = Stream.of(input).map(Paths::get).toArray(Path[]::new);\n-        createJarFile(jarfile, dir, paths);\n-    }\n-\n-    \/**\n-     * Creates a JAR file from the contents of a directory.\n-     *\n-     * Equivalent to {@code jar cf <jarfile> -C <dir> .}\n-     *\/\n-    public static void createJarFile(Path jarfile, Path dir) throws IOException {\n-        createJarFile(jarfile, dir, Paths.get(\".\"));\n-    }\n-\n-    \/**\n-     * Map a file path to the equivalent name in a JAR file\n-     *\/\n-    private static String toJarEntryName(Path file) {\n-        Path normalized = file.normalize();\n-        return normalized.subpath(0, normalized.getNameCount())  \/\/ drop root\n-                .toString()\n-                .replace(File.separatorChar, '\/');\n-    }\n-}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/libs\/jaxp\/library\/JarUtils.java","additions":0,"deletions":141,"binary":false,"changes":141,"status":"deleted"},{"patch":"@@ -45,0 +45,1 @@\n+\n@@ -46,1 +47,0 @@\n-import jaxp.library.JarUtils;\n@@ -48,0 +48,2 @@\n+import jdk.test.lib.util.JarUtils;\n+\n@@ -59,1 +61,1 @@\n- * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest \/test\/lib\n@@ -62,1 +64,1 @@\n-            Verifies that the CatalogFeatures' builder throws\n+ *          Verifies that the CatalogFeatures' builder throws\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/CatalogFileInputTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -37,0 +37,1 @@\n+ *        jdk.test.lib.util.JarUtils\n@@ -43,0 +44,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/java\/io\/FilePermission\/ReadFileOnPath.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n- * @library \/lib\/testlibrary\n- * @build JarUtils A B C D PackageAccessTest\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.util.JarUtils A B C D PackageAccessTest\n@@ -49,0 +49,2 @@\n+import jdk.test.lib.util.JarUtils;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/packageAccess\/PackageAccessTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n- * @library \/lib\/testlibrary\n- * @build JarUtils SetupJar Boot\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.util.JarUtils SetupJar Boot\n@@ -42,0 +42,2 @@\n+import jdk.test.lib.util.JarUtils;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/resolveClass\/consTest\/ConsTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import jdk.test.lib.util.JarUtils;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/resolveClass\/consTest\/SetupJar.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n- * @library \/lib\/testlibrary\n- * @build JarUtils Foo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.util.JarUtils Foo\n@@ -41,0 +41,2 @@\n+import jdk.test.lib.util.JarUtils;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/resolveClass\/deserializeButton\/DeserializeButtonTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n- * @library \/lib\/testlibrary\n- * @build JarUtils A B\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.util.JarUtils A B\n@@ -50,0 +50,2 @@\n+import jdk.test.lib.util.JarUtils;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/superclassDataLoss\/SuperclassDataLossTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,2 +29,3 @@\n- * @library \/lib\/testlibrary\n- * @build jdk.testlibrary.Utils JarUtils\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Utils\n+ *        jdk.test.lib.util.JarUtils\n@@ -51,1 +52,2 @@\n-import jdk.testlibrary.Utils;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/forNameLeak\/ClassForNameLeak.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,2 +26,3 @@\n- * @library \/lib\/testlibrary\n- * @build Driver Main JarUtils jdk.testlibrary.ProcessTools\n+ * @library \/lib\/testlibrary \/test\/lib\n+ * @build Driver Main\n+ *        jdk.test.lib.util.JarUtils jdk.testlibrary.ProcessTools\n@@ -42,0 +43,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/getResource\/automaticmodules\/Driver.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @library \/test\/lib\n@@ -31,1 +32,1 @@\n- * @build JarUtils\n+ * @build jdk.test.lib.util.JarUtils\n@@ -53,0 +54,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/securityManager\/ClassLoaderTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @library \/lib\/testlibrary\n@@ -31,1 +30,1 @@\n- *        JarUtils\n+ *        jdk.test.lib.util.JarUtils\n@@ -47,0 +46,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/java\/lang\/Package\/IsCompatibleWithDriver.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @library \/lib\/testlibrary\n@@ -45,0 +44,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/java\/lang\/Package\/PackageFromManifest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,3 @@\n- * @build ExecJarWithAgent Main Agent AgentHelper JarUtils jdk.testlibrary.*\n+ * @library \/test\/lib\n+ * @build ExecJarWithAgent Main Agent AgentHelper jdk.testlibrary.*\n+ *        jdk.test.lib.util.JarUtils\n@@ -43,0 +45,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/java\/lang\/instrument\/executableJAR\/ExecJarWithAgent.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,2 +26,3 @@\n- * @library \/lib\/testlibrary\n- * @build AutomaticModulesTest ModuleUtils JarUtils\n+ * @library \/lib\/testlibrary \/test\/lib\n+ * @build AutomaticModulesTest ModuleUtils\n+ *        jdk.test.lib.util.JarUtils\n@@ -51,0 +52,2 @@\n+import jdk.test.lib.util.JarUtils;\n+\n","filename":"test\/jdk\/java\/lang\/module\/AutomaticModulesTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -30,1 +30,3 @@\n- * @build ModuleReaderTest jdk.test.lib.compiler.CompilerUtils JarUtils\n+ * @build ModuleReaderTest\n+ *        jdk.test.lib.compiler.CompilerUtils\n+ *        jdk.test.lib.util.JarUtils\n@@ -58,0 +60,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/java\/lang\/module\/ModuleReader\/ModuleReaderTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -28,1 +28,1 @@\n- * @build MultiReleaseJarTest JarUtils\n+ * @build MultiReleaseJarTest jdk.test.lib.util.JarUtils\n@@ -58,0 +58,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/java\/lang\/module\/MultiReleaseJarTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,2 +27,3 @@\n- * @library \/lib\/testlibrary\n- * @build ModulesInCustomFileSystem JarUtils m1\/* m2\/*\n+ * @library \/test\/lib\n+ * @build ModulesInCustomFileSystem m1\/* m2\/*\n+ *        jdk.test.lib.util.JarUtils\n@@ -46,0 +47,2 @@\n+import jdk.test.lib.util.JarUtils;\n+\n","filename":"test\/jdk\/java\/lang\/module\/customfs\/ModulesInCustomFileSystem.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n- *          \/lib\/testlibrary\n@@ -35,0 +34,1 @@\n+ *        jdk.test.lib.util.JarUtils\n@@ -36,1 +36,1 @@\n- *        FileServerHandler JarUtils\n+ *        FileServerHandler\n@@ -53,0 +53,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/java\/net\/URLClassLoader\/closetest\/CloseTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -31,0 +31,1 @@\n+ *        jdk.test.lib.util.JarUtils\n@@ -32,1 +33,0 @@\n- *        JarUtils\n@@ -47,0 +47,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/java\/net\/URLClassLoader\/closetest\/GetResourceAsStream.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,2 +28,3 @@\n- * @library \/lib\/testlibrary bootlib\n- * @build JarUtils PrivilegedThreadFactory Attack\n+ * @library \/test\/lib bootlib\n+ * @build PrivilegedThreadFactory Attack\n+ *        jdk.test.lib.util.JarUtils\n","filename":"test\/jdk\/java\/nio\/channels\/AsynchronousChannelGroup\/AsExecutor.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import jdk.test.lib.util.JarUtils;\n+\n","filename":"test\/jdk\/java\/nio\/channels\/AsynchronousChannelGroup\/SetupJar.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- *          \/lib\/testlibrary\n@@ -36,1 +35,1 @@\n- *        JarUtils\n+ *        jdk.test.lib.util.JarUtils\n","filename":"test\/jdk\/java\/nio\/charset\/spi\/CharsetProviderBasicTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import jdk.test.lib.util.JarUtils;\n+\n","filename":"test\/jdk\/java\/nio\/charset\/spi\/SetupJar.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,3 @@\n- *        ModuleTest jdk.test.lib.compiler.CompilerUtils JarUtils\n+ *        jdk.test.lib.compiler.CompilerUtils\n+ *        jdk.test.lib.util.JarUtils\n+ *        ModuleTest\n@@ -40,0 +42,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/java\/rmi\/module\/ModuleTest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import jdk.test.lib.util.JarUtils;\n@@ -50,1 +51,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -52,1 +53,1 @@\n- * @build JarUtils TestProvider TestClient\n+ * @build jdk.test.lib.util.JarUtils TestProvider TestClient\n","filename":"test\/jdk\/java\/security\/Provider\/SecurityProviderModularTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library modules \/lib\/testlibrary\n+ * @library modules \/test\/lib\n@@ -29,1 +29,1 @@\n- * @build JarUtils\n+ * @build jdk.test.lib.util.JarUtils\n@@ -56,0 +56,2 @@\n+import jdk.test.lib.util.JarUtils;\n+\n","filename":"test\/jdk\/java\/util\/ServiceLoader\/ModulesTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,2 +28,3 @@\n- * @library \/lib\/testlibrary \/test\/lib\n- * @build JarUtils jdk.test.lib.process.*\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.process.*\n+ *        jdk.test.lib.util.JarUtils\n@@ -44,0 +45,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/java\/util\/ServiceLoader\/basic\/ServiceLoaderBasicTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,2 +28,3 @@\n- * @library \/test\/lib \/lib\/testlibrary\n- * @build JarUtils jdk.test.lib.process.*\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.process.*\n+ *        jdk.test.lib.util.JarUtils\n@@ -44,0 +45,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/javax\/naming\/spi\/FactoryCacheTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-\n+import jdk.test.lib.util.JarUtils;\n@@ -46,1 +46,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -48,1 +48,1 @@\n- * @build JarUtils\n+ * @build jdk.test.lib.util.JarUtils\n","filename":"test\/jdk\/javax\/security\/auth\/login\/modules\/JaasModularClientTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import jdk.test.lib.util.JarUtils;\n@@ -44,1 +45,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -46,1 +47,1 @@\n- * @build JarUtils\n+ * @build jdk.test.lib.util.JarUtils\n","filename":"test\/jdk\/javax\/security\/auth\/login\/modules\/JaasModularDefaultHandlerTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library  \/lib\/testlibrary \/test\/lib\n@@ -30,1 +30,3 @@\n- * @build RunWithAutomaticModules jdk.test.lib.compiler.CompilerUtils JarUtils\n+ * @build RunWithAutomaticModules\n+ *        jdk.test.lib.compiler.CompilerUtils\n+ *        jdk.test.lib.util.JarUtils\n@@ -41,0 +43,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/jdk\/modules\/scenarios\/automaticmodules\/RunWithAutomaticModules.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,202 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.OutputStream;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardCopyOption;\n-import java.util.ArrayList;\n-import java.util.Enumeration;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.jar.JarEntry;\n-import java.util.jar.JarFile;\n-import java.util.jar.JarOutputStream;\n-import java.util.jar.Manifest;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-\/**\n- * This class consists exclusively of static utility methods that are useful\n- * for creating and manipulating JAR files.\n- *\/\n-\n-public final class JarUtils {\n-    private JarUtils() { }\n-\n-    \/**\n-     * Creates a JAR file.\n-     *\n-     * Equivalent to {@code jar cfm <jarfile> <manifest> -C <dir> file...}\n-     *\n-     * The input files are resolved against the given directory. Any input\n-     * files that are directories are processed recursively.\n-     *\/\n-    public static void createJarFile(Path jarfile, Manifest man, Path dir, Path... file)\n-        throws IOException\n-    {\n-        \/\/ create the target directory\n-        Path parent = jarfile.getParent();\n-        if (parent != null)\n-            Files.createDirectories(parent);\n-\n-        List<Path> entries = new ArrayList<>();\n-        for (Path entry : file) {\n-            Files.find(dir.resolve(entry), Integer.MAX_VALUE,\n-                        (p, attrs) -> attrs.isRegularFile())\n-                    .map(e -> dir.relativize(e))\n-                    .forEach(entries::add);\n-        }\n-\n-        try (OutputStream out = Files.newOutputStream(jarfile);\n-             JarOutputStream jos = new JarOutputStream(out))\n-        {\n-            if (man != null) {\n-                JarEntry je = new JarEntry(JarFile.MANIFEST_NAME);\n-                jos.putNextEntry(je);\n-                man.write(jos);\n-                jos.closeEntry();\n-            }\n-\n-            for (Path entry : entries) {\n-                String name = toJarEntryName(entry);\n-                jos.putNextEntry(new JarEntry(name));\n-                Files.copy(dir.resolve(entry), jos);\n-                jos.closeEntry();\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Creates a JAR file.\n-     *\n-     * Equivalent to {@code jar cf <jarfile>  -C <dir> file...}\n-     *\n-     * The input files are resolved against the given directory. Any input\n-     * files that are directories are processed recursively.\n-     *\/\n-    public static void createJarFile(Path jarfile, Path dir, Path... file)\n-        throws IOException\n-    {\n-        createJarFile(jarfile, null, dir, file);\n-    }\n-\n-    \/**\n-     * Creates a JAR file.\n-     *\n-     * Equivalent to {@code jar cf <jarfile> -C <dir> file...}\n-     *\n-     * The input files are resolved against the given directory. Any input\n-     * files that are directories are processed recursively.\n-     *\/\n-    public static void createJarFile(Path jarfile, Path dir, String... input)\n-        throws IOException\n-    {\n-        Path[] paths = Stream.of(input).map(Paths::get).toArray(Path[]::new);\n-        createJarFile(jarfile, dir, paths);\n-    }\n-\n-    \/**\n-     * Creates a JAR file from the contents of a directory.\n-     *\n-     * Equivalent to {@code jar cf <jarfile> -C <dir> .}\n-     *\/\n-    public static void createJarFile(Path jarfile, Path dir) throws IOException {\n-        createJarFile(jarfile, dir, Paths.get(\".\"));\n-    }\n-\n-    \/**\n-     * Update a JAR file.\n-     *\n-     * Equivalent to {@code jar uf <jarfile> -C <dir> file...}\n-     *\n-     * The input files are resolved against the given directory. Any input\n-     * files that are directories are processed recursively.\n-     *\/\n-    public static void updateJarFile(Path jarfile, Path dir, Path... file)\n-        throws IOException\n-    {\n-        List<Path> entries = new ArrayList<>();\n-        for (Path entry : file) {\n-            Files.find(dir.resolve(entry), Integer.MAX_VALUE,\n-                    (p, attrs) -> attrs.isRegularFile())\n-                    .map(e -> dir.relativize(e))\n-                    .forEach(entries::add);\n-        }\n-\n-        Set<String> names = entries.stream()\n-                .map(JarUtils::toJarEntryName)\n-                .collect(Collectors.toSet());\n-\n-        Path tmpfile = Files.createTempFile(\"jar\", \"jar\");\n-\n-        try (OutputStream out = Files.newOutputStream(tmpfile);\n-             JarOutputStream jos = new JarOutputStream(out))\n-        {\n-            \/\/ copy existing entries from the original JAR file\n-            try (JarFile jf = new JarFile(jarfile.toString())) {\n-                Enumeration<JarEntry> jentries = jf.entries();\n-                while (jentries.hasMoreElements()) {\n-                    JarEntry jentry = jentries.nextElement();\n-                    if (!names.contains(jentry.getName())) {\n-                        jos.putNextEntry(jentry);\n-                        jf.getInputStream(jentry).transferTo(jos);\n-                    }\n-                }\n-            }\n-\n-            \/\/ add the new entries\n-            for (Path entry : entries) {\n-                String name = toJarEntryName(entry);\n-                jos.putNextEntry(new JarEntry(name));\n-                Files.copy(dir.resolve(entry), jos);\n-            }\n-        }\n-\n-        \/\/ replace the original JAR file\n-        Files.move(tmpfile, jarfile, StandardCopyOption.REPLACE_EXISTING);\n-    }\n-\n-    \/**\n-     * Update a JAR file.\n-     *\n-     * Equivalent to {@code jar uf <jarfile> -C <dir> .}\n-     *\/\n-    public static void updateJarFile(Path jarfile, Path dir) throws IOException {\n-        updateJarFile(jarfile, dir, Paths.get(\".\"));\n-    }\n-\n-\n-    \/**\n-     * Map a file path to the equivalent name in a JAR file\n-     *\/\n-    private static String toJarEntryName(Path file) {\n-        Path normalized = file.normalize();\n-        return normalized.subpath(0, normalized.getNameCount())  \/\/ drop root\n-                .toString()\n-                .replace(File.separatorChar, '\/');\n-    }\n-}\n","filename":"test\/jdk\/lib\/testlibrary\/JarUtils.java","additions":0,"deletions":202,"binary":false,"changes":202,"status":"deleted"},{"patch":"@@ -28,1 +28,0 @@\n- *          \/lib\/testlibrary\n@@ -37,1 +36,2 @@\n- *        src.test.src.TestDriver JarUtils\n+ *        jdk.test.lib.util.JarUtils\n+ *        src.test.src.TestDriver\n@@ -45,0 +45,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/jar\/jarbug\/TestDriver.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n- *        JarUtils jdk.test.lib.compiler.CompilerUtils\n+ *        jdk.test.lib.compiler.CompilerUtils\n+ *        jdk.test.lib.util.JarUtils\n@@ -51,0 +52,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/tools\/jlink\/basic\/BasicTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -28,1 +29,2 @@\n- * @build AddExportsAndOpensInManifest Test2 JarUtils jdk.testlibrary.*\n+ * @build AddExportsAndOpensInManifest Test2 jdk.testlibrary.*\n+ *        jdk.test.lib.util.JarUtils\n@@ -44,0 +46,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/tools\/launcher\/modules\/addexports\/manifest\/AddExportsAndOpensInManifest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @build AddReadsTest JarUtils jdk.testlibrary.*\n+ * @build AddReadsTest jdk.testlibrary.*\n@@ -30,0 +30,1 @@\n+ *        jdk.test.lib.util.JarUtils\n@@ -39,0 +40,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/tools\/launcher\/modules\/addreads\/AddReadsTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @build IllegalAccessTest TryAccess JarUtils\n+ * @build IllegalAccessTest TryAccess\n@@ -32,0 +32,1 @@\n+ *        jdk.test.lib.util.JarUtils\n@@ -50,0 +51,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/tools\/launcher\/modules\/illegalaccess\/IllegalAccessTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @build PatchTest JarUtils jdk.testlibrary.*\n+ * @build PatchTest jdk.testlibrary.*\n@@ -31,0 +31,1 @@\n+ *        jdk.test.lib.util.JarUtils\n@@ -43,0 +44,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/basic\/PatchTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @build PatchTestWarningError JarUtils jdk.testlibrary.*\n+ * @build PatchTestWarningError jdk.testlibrary.*\n@@ -32,0 +32,1 @@\n+ *        jdk.test.lib.util.JarUtils\n","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/basic\/PatchTestWarningError.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n- * @library src \/lib\/testlibrary\n- * @build ValidateModulesTest hello\/* JarUtils jdk.testlibrary.*\n+ * @library src \/lib\/testlibrary \/test\/lib\n+ * @build ValidateModulesTest hello\/* jdk.test.lib.util.JarUtils jdk.testlibrary.*\n@@ -41,0 +41,1 @@\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/tools\/launcher\/modules\/validate\/ValidateModulesTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.nio.file.StandardCopyOption;\n@@ -42,0 +43,1 @@\n+import java.util.Set;\n@@ -46,0 +48,1 @@\n+import java.util.stream.Collectors;\n@@ -49,1 +52,2 @@\n- * Common library for various test jar file utility functions.\n+ * This class consists exclusively of static utility methods that are useful\n+ * for creating and manipulating JAR files.\n@@ -105,0 +109,9 @@\n+    \/**\n+     * Creates a JAR file from the contents of a directory.\n+     *\n+     * Equivalent to {@code jar cf <jarfile> -C <dir> .}\n+     *\/\n+    public static void createJarFile(Path jarfile, Path dir) throws IOException {\n+        createJarFile(jarfile, dir, Paths.get(\".\"));\n+    }\n+\n@@ -120,0 +133,54 @@\n+    \/**\n+     * Updates a JAR file.\n+     *\n+     * Equivalent to {@code jar uf <jarfile> -C <dir> file...}\n+     *\n+     * The input files are resolved against the given directory. Any input\n+     * files that are directories are processed recursively.\n+     *\/\n+    public static void updateJarFile(Path jarfile, Path dir, Path... files)\n+            throws IOException\n+    {\n+        List<Path> entries = findAllRegularFiles(dir, files);\n+\n+        Set<String> names = entries.stream()\n+                                   .map(JarUtils::toJarEntryName)\n+                                   .collect(Collectors.toSet());\n+\n+        Path tmpfile = Files.createTempFile(\"jar\", \"jar\");\n+\n+        try (OutputStream out = Files.newOutputStream(tmpfile);\n+             JarOutputStream jos = new JarOutputStream(out)) {\n+            \/\/ copy existing entries from the original JAR file\n+            try (JarFile jf = new JarFile(jarfile.toString())) {\n+                Enumeration<JarEntry> jentries = jf.entries();\n+                while (jentries.hasMoreElements()) {\n+                    JarEntry jentry = jentries.nextElement();\n+                    if (!names.contains(jentry.getName())) {\n+                        jos.putNextEntry(jentry);\n+                        jf.getInputStream(jentry).transferTo(jos);\n+                    }\n+                }\n+            }\n+\n+            \/\/ add the new entries\n+            for (Path entry : entries) {\n+                String name = toJarEntryName(entry);\n+                jos.putNextEntry(new JarEntry(name));\n+                Files.copy(dir.resolve(entry), jos);\n+            }\n+        }\n+\n+        \/\/ replace the original JAR file\n+        Files.move(tmpfile, jarfile, StandardCopyOption.REPLACE_EXISTING);\n+    }\n+\n+    \/**\n+     * Updates a JAR file.\n+     *\n+     * Equivalent to {@code jar uf <jarfile> -C <dir> .}\n+     *\/\n+    public static void updateJarFile(Path jarfile, Path dir) throws IOException {\n+        updateJarFile(jarfile, dir, Paths.get(\".\"));\n+    }\n+\n@@ -124,0 +191,1 @@\n+    @Deprecated\n@@ -158,0 +226,1 @@\n+    @Deprecated\n@@ -195,0 +264,1 @@\n+    @Deprecated\n","filename":"test\/lib\/jdk\/test\/lib\/util\/JarUtils.java","additions":71,"deletions":1,"binary":false,"changes":72,"status":"modified"}]}