{"files":[{"patch":"@@ -0,0 +1,194 @@\n+\/*\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8234808\n+ *\n+ * @library \/test\/lib\n+ * @run main\/othervm JdbOptions\n+ *\/\n+\n+import jdk.test.lib.Platform;\n+import lib.jdb.Jdb;\n+import lib.jdb.JdbCommand;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.lang.management.ManagementFactory;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+class JbdOptionsTarg {\n+    static final String OK_MSG = \"JbdOptionsTarg: OK\";\n+\n+    static String argString(String s) {\n+        return \"arg >\" + s + \"<\";\n+    }\n+\n+    static String propString(String name, String value) {\n+        return \"prop[\" + name + \"] = >\" + value + \"<\";\n+    }\n+\n+    \/**\n+     * 1st argument is a filename to redirect application output,\n+     * the rest are names of the properties to dump.\n+     *\/\n+    public static void main(String[] args) throws IOException {\n+        String outFile = args[0];\n+        try (PrintStream out = new PrintStream(outFile, StandardCharsets.UTF_8)) {\n+            out.println(OK_MSG);\n+            \/\/ print all args\n+            List<String> vmArgs = ManagementFactory.getRuntimeMXBean().getInputArguments();\n+            for (String s : vmArgs) {\n+                out.println(argString(s));\n+            }\n+            \/\/ print requested sys.props (skip 1st arg which is output filename)\n+            for (int i=1; i < args.length; i++) {\n+                String p = args[i];\n+                out.println(propString(p, System.getProperty(p)));\n+            }\n+        }\n+    }\n+}\n+\n+public class JdbOptions {\n+    private static final String outFilename = UUID.randomUUID().toString() + \".out\";\n+    private static final Path outPath = Paths.get(outFilename);\n+    private static final String targ = JbdOptionsTarg.class.getName();\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ the simplest case\n+        test(\"-connect\",\n+                \"com.sun.jdi.CommandLineLaunch:vmexec=java,options=-client -XX:+PrintVMOptions\"\n+                + \",main=\" + targ + \" \" + outFilename)\n+            .expectedArg(\"-XX:+PrintVMOptions\");\n+\n+        \/\/ pass property through 'options'\n+        test(\"-connect\",\n+                \"com.sun.jdi.CommandLineLaunch:vmexec=java,options='-Dboo=foo'\"\n+                + \",main=\" + targ + \" \" + outFilename + \" boo\")\n+            .expectedProp(\"boo\", \"foo\");\n+\n+        \/\/ property with spaces\n+        test(\"-connect\",\n+                \"com.sun.jdi.CommandLineLaunch:vmexec=java,options=\\\"-Dboo=foo 2\\\"\"\n+                + \",main=\" + targ + \" \" + outFilename + \" boo\")\n+            .expectedProp(\"boo\", \"foo 2\");\n+\n+        \/\/ property with spaces (with single quotes)\n+        test(\"-connect\",\n+                \"com.sun.jdi.CommandLineLaunch:vmexec=java,options='-Dboo=foo 2'\"\n+                + \",main=\" + targ + \" \" + outFilename + \" boo\")\n+                .expectedProp(\"boo\", \"foo 2\");\n+\n+        \/\/ properties with spaces (with single quotes)\n+        test(\"-connect\",\n+                \"com.sun.jdi.CommandLineLaunch:vmexec=java,options=-Dboo=foo '-Dboo2=foo 2'\"\n+                + \",main=\" + targ + \" \" + outFilename + \" boo boo2\")\n+                .expectedProp(\"boo\", \"foo\")\n+                .expectedProp(\"boo2\", \"foo 2\");\n+\n+        \/\/ 'options' contains commas - values are quoted (double quotes)\n+        test(\"-connect\",\n+                \"com.sun.jdi.CommandLineLaunch:vmexec=java,options=\\\"-client\\\" \\\"-XX:+PrintVMOptions\\\"\"\n+                + \" -XX:+IgnoreUnrecognizedVMOptions\"\n+                + \" \\\"-XX:StartFlightRecording=dumponexit=true,maxsize=500M\\\" \\\"-XX:FlightRecorderOptions=repository=jfrrep\\\"\"\n+                + \",main=\" + targ + \" \" + outFilename)\n+            .expectedArg(\"-XX:StartFlightRecording=dumponexit=true,maxsize=500M\")\n+            .expectedArg(\"-XX:FlightRecorderOptions=repository=jfrrep\");\n+\n+        \/\/ 'options' contains commas - values are quoted (single quotes)\n+        test(\"-connect\",\n+                \"com.sun.jdi.CommandLineLaunch:vmexec=java,options='-client' '-XX:+PrintVMOptions'\"\n+                        + \" -XX:+IgnoreUnrecognizedVMOptions\"\n+                        + \" '-XX:StartFlightRecording=dumponexit=true,maxsize=500M' '-XX:FlightRecorderOptions=repository=jfrrep'\"\n+                        + \",main=\" + targ + \" \" + outFilename)\n+            .expectedArg(\"-XX:StartFlightRecording=dumponexit=true,maxsize=500M\")\n+            .expectedArg(\"-XX:FlightRecorderOptions=repository=jfrrep\");\n+\n+        \/\/ java options are specified in 2 ways, with and without spaces\n+        \/\/ options are quoted by using single and double quotes.\n+        test(\"-Dprop1=val1\",\n+                \"-Dprop2=val 2\",\n+                \"-connect\",\n+                \"com.sun.jdi.CommandLineLaunch:vmexec=java,options=-Dprop3=val3 '-Dprop4=val 4'\"\n+                        + \" -XX:+IgnoreUnrecognizedVMOptions\"\n+                        + \" \\\"-XX:StartFlightRecording=dumponexit=true,maxsize=500M\\\"\"\n+                        + \" '-XX:FlightRecorderOptions=repository=jfrrep'\"\n+                        + \",main=\" + targ + \" \" + outFilename + \" prop1 prop2 prop3 prop4\")\n+                .expectedProp(\"prop1\", \"val1\")\n+                .expectedProp(\"prop2\", \"val 2\")\n+                .expectedProp(\"prop3\", \"val3\")\n+                .expectedProp(\"prop4\", \"val 4\")\n+                .expectedArg(\"-XX:StartFlightRecording=dumponexit=true,maxsize=500M\")\n+                .expectedArg(\"-XX:FlightRecorderOptions=repository=jfrrep\");\n+\n+    }\n+\n+    private static class TestResult {\n+        OutputAnalyzer out;\n+        TestResult(OutputAnalyzer output) {\n+            out = output;\n+        }\n+        TestResult expectedArg(String s) {\n+            out.shouldContain(JbdOptionsTarg.argString(s));\n+            return this;\n+        }\n+        TestResult expectedProp(String name, String value) {\n+            out.shouldContain(JbdOptionsTarg.propString(name, value));\n+            return this;\n+        }\n+    }\n+\n+    private static TestResult test(String... args) throws Exception {\n+        System.out.println();\n+        System.out.println(\"...testcase...\");\n+        if (Platform.isWindows()) {\n+            \/\/ on Windows we need to escape quotes\n+            args = Arrays.stream(args)\n+                    .map(s -> s.replace(\"\\\"\", \"\\\\\\\"\"))\n+                    .toArray(String[]::new);\n+        }\n+\n+        try (Jdb jdb = new Jdb(args)) {\n+            jdb.waitForSimplePrompt(1024, true); \/\/ 1024 lines should be enough\n+            jdb.command(JdbCommand.run().allowExit());\n+        }\n+        String output = Files.readAllLines(outPath, StandardCharsets.UTF_8).stream()\n+                .collect(Collectors.joining(System.getProperty(\"line.separator\")));\n+        Files.deleteIfExists(outPath);\n+        System.out.println(\"Debuggee output: [\");\n+        System.out.println(output);\n+        System.out.println(\"]\");\n+        OutputAnalyzer out = new OutputAnalyzer(output);\n+        return new TestResult(out);\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/jdi\/JdbOptions.java","additions":194,"deletions":0,"binary":false,"changes":194,"status":"added"}]}