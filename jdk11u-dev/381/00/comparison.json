{"files":[{"patch":"@@ -82,1 +82,1 @@\n-            expStrMap.put(cmd, List.of(\"[Ljava\/lang\/String\"));\n+            expStrMap.put(cmd, List.of(\"\\\\[Ljava\/lang\/String\"));\n","filename":"test\/hotspot\/jtreg\/resourcehogs\/serviceability\/sa\/ClhsdbRegionDetailsScanOopsForG1.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -182,1 +182,1 @@\n-                \"public static void main(java.lang.String[])\",\n+                \"public static void main\\\\(java.lang.String\\\\[\\\\]\\\\)\",\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbCDSCore.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,1 +98,1 @@\n-                \"public static void main(java.lang.String[])\",\n+                \"public static void main\\\\(java.lang.String\\\\[\\\\]\\\\)\",\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbCDSJstackPrintAll.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import jdk.test.lib.Platform;\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbFlags.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-                          \"instance of Oop for java\/lang\/ref\/ReferenceQueue$Lock\");\n+                          \"instance of Oop for java\/lang\/ref\/ReferenceQueue\\\\$Lock\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbInspect.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-                    \"public static void main(java.lang.String[])\",\n+                    \"public static void main\\\\(java\\\\.lang\\\\.String\\\\[\\\\]\\\\)\",\n@@ -83,0 +83,1 @@\n+                    \"public class jdk\\\\.test\\\\.lib\\\\.apps\\\\.LingeredApp @\",\n@@ -87,1 +88,1 @@\n-                    \"Constant Pool of [public class jdk.test.lib.apps.LingeredApp @\"));\n+                    \"Constant Pool of \\\\[public class jdk\\\\.test\\\\.lib\\\\.apps\\\\.LingeredApp @\"));\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbJdis.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.test.lib.Platform;\n@@ -59,1 +58,1 @@\n-                    \"Common-Cleaner\",\n+                    \"Common\\\\-Cleaner\",\n@@ -61,1 +60,1 @@\n-                    \"java.lang.ref.Finalizer$FinalizerThread.run\",\n+                    \"java.lang.ref.Finalizer\\\\$FinalizerThread.run\",\n@@ -63,1 +62,1 @@\n-                    \"Method*\",\n+                    \"Method\\\\*\",\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbJstack.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-                        out.shouldContain(exp);\n+                        out.shouldMatch(exp);\n@@ -149,1 +149,1 @@\n-                        out.shouldNotContain(unExp);\n+                        out.shouldNotMatch(unExp);\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbLauncher.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.test.lib.Platform;\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbPmap.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-                \"public static void main(java.lang.String[])\",\n+                \"public static void main\\\\(java.lang.String\\\\[\\\\]\\\\)\",\n@@ -60,3 +60,3 @@\n-                \"[enum] class Song [signature Ljava\/lang\/Enum<LSong;>;]\",\n-                \"Method java.lang.Object clone()\",\n-                \"public static Song[] values()\",\n+                \"\\\\[enum\\\\] class Song \\\\[signature Ljava\/lang\/Enum\\\\<LSong;\\\\>;\\\\]\",\n+                \"Method java.lang.Object clone\\\\(\\\\)\",\n+                \"public static Song\\\\[\\\\] values\\\\(\\\\)\",\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbPrintAll.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.test.lib.Platform;\n@@ -73,1 +72,1 @@\n-                    \"JavaThread* Threads\"));\n+                    \"JavaThread\\\\* Threads\"));\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbPrintStatics.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.test.lib.Platform;\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbPstack.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                 \"java\/lang\/String\", \"[B\", \"[I\"));\n+                 \"java\/lang\/String\", \"\\\\[B\", \"\\\\[I\"));\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbScanOops.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-                    \"Common-Cleaner\",\n+                    \"Common\\\\-Cleaner\",\n@@ -62,1 +62,1 @@\n-                    \"java.lang.ref.Finalizer$FinalizerThread.run\",\n+                    \"java.lang.ref.Finalizer\\\\$FinalizerThread.run\",\n@@ -64,1 +64,1 @@\n-                    \"Method*\",\n+                    \"Method\\\\*\",\n@@ -67,3 +67,3 @@\n-                    \"attach pid | exec core\",\n-                    \"intConstant [ name [ value ] ]\",\n-                    \"type [ type [ name super isOop isInteger isUnsigned size ] ]\"));\n+                    \"attach pid \\\\| exec core\",\n+                    \"intConstant \\\\[ name \\\\[ value \\\\] \\\\]\",\n+                    \"type \\\\[ type \\\\[ name super isOop isInteger isUnsigned size \\\\] \\\\]\"));\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbSource.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-            expStrMap.put(\"thread\", List.of( \"Usage: thread { -a | id }\"));\n+            expStrMap.put(\"thread\", List.of( \"Usage: thread \\\\{ \\\\-a \\\\| id \\\\}\"));\n@@ -71,1 +71,1 @@\n-                List.of(\"Couldn't find thread -a\"));\n+                List.of(\"Couldn't find thread \\\\-a\"));\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbThread.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.test.lib.Platform;\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbWhere.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-import java.util.Scanner;\n@@ -27,4 +26,0 @@\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.stream.Collectors;\n-import java.io.OutputStream;\n@@ -32,4 +27,0 @@\n-import jdk.test.lib.JDKToolLauncher;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n@@ -37,1 +28,3 @@\n-import jdk.test.lib.Asserts;\n+import java.util.Map;\n+import java.util.HashMap;\n+import jtreg.SkippedException;\n@@ -48,97 +41,0 @@\n-    private static final String JSTACK_OUT_FILE = \"jstack_out.txt\";\n-\n-    private static void verifyJStackOutput() throws Exception {\n-\n-        Exception unexpected = null;\n-        File jstackFile = new File(JSTACK_OUT_FILE);\n-        Asserts.assertTrue(jstackFile.exists() && jstackFile.isFile(),\n-                           \"File with jstack output not created: \" +\n-                           jstackFile.getAbsolutePath());\n-        try {\n-            Scanner scanner = new Scanner(jstackFile);\n-\n-            boolean classLockOwnerFound = false;\n-            boolean classLockWaiterFound = false;\n-            boolean objectLockOwnerFound = false;\n-            boolean primitiveLockOwnerFound = false;\n-\n-            while (scanner.hasNextLine()) {\n-                String line = scanner.nextLine();\n-                System.out.println(line);\n-\n-                if (line.contains(\"missing reason for \")) {\n-                    unexpected = new RuntimeException(\"Unexpected msg: missing reason for \");\n-                    break;\n-                }\n-                if (line.matches(\"^\\\\s+- locked <0x[0-9a-f]+> \\\\(a java\\\\.lang\\\\.Class for LingeredAppWithLock\\\\)$\")) {\n-                    classLockOwnerFound = true;\n-                }\n-                if (line.matches(\"^\\\\s+- waiting to lock <0x[0-9a-f]+> \\\\(a java\\\\.lang\\\\.Class for LingeredAppWithLock\\\\)$\")) {\n-                    classLockWaiterFound = true;\n-                }\n-                if (line.matches(\"^\\\\s+- locked <0x[0-9a-f]+> \\\\(a java\\\\.lang\\\\.Thread\\\\)$\")) {\n-                    objectLockOwnerFound = true;\n-                }\n-                if (line.matches(\"^\\\\s+- locked <0x[0-9a-f]+> \\\\(a java\\\\.lang\\\\.Class for int\\\\)$\")) {\n-                    primitiveLockOwnerFound = true;\n-                }\n-            }\n-\n-            if (!classLockOwnerFound || !classLockWaiterFound ||\n-                !objectLockOwnerFound || !primitiveLockOwnerFound) {\n-                unexpected = new RuntimeException(\n-                      \"classLockOwnerFound = \" + classLockOwnerFound +\n-                      \", classLockWaiterFound = \" + classLockWaiterFound +\n-                      \", objectLockOwnerFound = \" + objectLockOwnerFound +\n-                      \", primitiveLockOwnerFound = \" + primitiveLockOwnerFound);\n-            }\n-            if (unexpected != null) {\n-                throw unexpected;\n-            }\n-        } catch (Exception ex) {\n-            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n-        } finally {\n-            jstackFile.delete();\n-        }\n-    }\n-\n-    private static void startClhsdbForLock(long lingeredAppPid) throws Exception {\n-\n-        Process p;\n-        JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(\"jhsdb\");\n-        launcher.addToolArg(\"clhsdb\");\n-        launcher.addToolArg(\"--pid\");\n-        launcher.addToolArg(Long.toString(lingeredAppPid));\n-\n-        ProcessBuilder pb = new ProcessBuilder();\n-        pb.command(launcher.getCommand());\n-        System.out.println(pb.command().stream().collect(Collectors.joining(\" \")));\n-\n-        try {\n-            p = pb.start();\n-        } catch (Exception attachE) {\n-            throw new Error(\"Couldn't start jhsdb or attach to LingeredApp : \" + attachE);\n-        }\n-\n-        \/\/ Issue the 'jstack' input at the clhsdb prompt.\n-        OutputStream input = p.getOutputStream();\n-        String str = \"jstack > \" + JSTACK_OUT_FILE + \"\\nquit\\n\";\n-        try {\n-            input.write(str.getBytes());\n-            input.flush();\n-        } catch (IOException ioe) {\n-            throw new Error(\"Problem issuing the jstack command: \" + str, ioe);\n-        }\n-\n-        OutputAnalyzer output = new OutputAnalyzer(p);\n-\n-        try {\n-            p.waitFor();\n-        } catch (InterruptedException ie) {\n-            p.destroyForcibly();\n-            throw new Error(\"Problem awaiting the child process: \" + ie, ie);\n-        }\n-\n-        output.shouldHaveExitValue(0);\n-    }\n-\n@@ -146,3 +42,2 @@\n-\n-        LingeredApp app = null;\n-\n+        System.out.println(\"Starting TestClhsdbJstackLock test\");\n+        LingeredAppWithLock app = null;\n@@ -150,0 +45,1 @@\n+            ClhsdbLauncher test = new ClhsdbLauncher();\n@@ -154,3 +50,19 @@\n-            System.out.println (\"Started LingeredApp with pid \" + app.getPid());\n-            startClhsdbForLock(app.getPid());\n-            verifyJStackOutput();\n+\n+            System.out.println (\"Started LingeredAppWithLock with pid \" + app.getPid());\n+\n+            List<String> cmds = List.of(\"jstack\");\n+\n+            Map<String, List<String>> expStrMap = new HashMap<>();\n+            Map<String, List<String>> unExpStrMap = new HashMap<>();\n+            expStrMap.put(\"jstack\", List.of(\n+                \"^\\\\s+- locked <0x[0-9a-f]+> \\\\(a java\\\\.lang\\\\.Class for LingeredAppWithLock\\\\)$\",\n+                \"^\\\\s+- waiting to lock <0x[0-9a-f]+> \\\\(a java\\\\.lang\\\\.Class for LingeredAppWithLock\\\\)$\",\n+                \"^\\\\s+- locked <0x[0-9a-f]+> \\\\(a java\\\\.lang\\\\.Thread\\\\)$\",\n+                \"^\\\\s+- locked <0x[0-9a-f]+> \\\\(a java\\\\.lang\\\\.Class for int\\\\)$\"));\n+            unExpStrMap.put(\"jstack\", List.of(\n+                \"missing reason for \"));\n+            test.run(app.getPid(), cmds, expStrMap, unExpStrMap);\n+        } catch (SkippedException se) {\n+            throw se;\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n@@ -160,0 +72,2 @@\n+\n+        System.out.println(\"Test PASSED\");\n@@ -162,0 +76,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestClhsdbJstackLock.java","additions":29,"deletions":114,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-import java.io.IOException;\n-import java.util.stream.Collectors;\n-import java.io.OutputStream;\n@@ -30,3 +27,0 @@\n-import jdk.test.lib.JDKToolLauncher;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.OutputAnalyzer;\n@@ -34,0 +28,3 @@\n+import java.util.Map;\n+import java.util.HashMap;\n+import jtreg.SkippedException;\n@@ -47,52 +44,2 @@\n-    private static void testClhsdbForIntConstant(\n-                        long lingeredAppPid,\n-                        String commandString,\n-                        String[] expectedOutputStrings) throws Exception {\n-\n-        Process p;\n-        JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(\"jhsdb\");\n-        launcher.addToolArg(\"clhsdb\");\n-        launcher.addToolArg(\"--pid\");\n-        launcher.addToolArg(Long.toString(lingeredAppPid));\n-\n-        ProcessBuilder pb = new ProcessBuilder();\n-        pb.command(launcher.getCommand());\n-        pb.redirectError(ProcessBuilder.Redirect.INHERIT);\n-        System.out.println(\n-            pb.command().stream().collect(Collectors.joining(\" \")));\n-\n-        try {\n-            p = pb.start();\n-        } catch (Exception attachE) {\n-            throw new Error(\"Couldn't start jhsdb or attach to LingeredApp : \" + attachE);\n-        }\n-\n-        \/\/ Issue the 'intConstant' inputs at the clhsdb prompt.\n-        OutputStream input = p.getOutputStream();\n-        try {\n-            input.write((commandString + \"\\n\").getBytes());\n-            input.write(\"quit\\n\".getBytes());\n-            input.flush();\n-        } catch (IOException ioe) {\n-            throw new Error(\"Problem issuing the intConstant command: \" +\n-                            commandString + ioe);\n-        }\n-\n-        OutputAnalyzer output = new OutputAnalyzer(p);\n-\n-        System.out.println(\"Awaiting process completion\");\n-        try {\n-            p.waitFor();\n-        } catch (InterruptedException ie) {\n-            p.destroyForcibly();\n-            throw new Error(\"Problem awaiting the child process: \" + ie);\n-        }\n-\n-        output.shouldHaveExitValue(0);\n-        System.out.println(output.getOutput());\n-        for (String expectedOutputString: expectedOutputStrings) {\n-            output.shouldContain(expectedOutputString);\n-        }\n-    }\n-\n-    public static void testIntConstant() throws Exception {\n+    public static void main (String... args) throws Exception {\n+        System.out.println(\"Starting TestIntConstant test\");\n@@ -102,2 +49,2 @@\n-            List<String> vmArgs = new ArrayList<String>();\n-            vmArgs.addAll(Utils.getVmOptions());\n+            ClhsdbLauncher test = new ClhsdbLauncher();\n+            List<String> vmArgs = new ArrayList<String>(Utils.getVmOptions());\n@@ -106,0 +53,1 @@\n+\n@@ -108,0 +56,6 @@\n+            List<String> cmds = List.of(\"intConstant\",\n+                                        \"intConstant _temp_constant 45\",\n+                                        \"intConstant _temp_constant\");\n+\n+            Map<String, List<String>> expStrMap = new HashMap<>();\n+\n@@ -113,2 +67,2 @@\n-            String[] defaultOutputStrings =\n-                {\"CollectedHeap::G1 4\",\n+            expStrMap.put(\"intConstant\", List.of(\n+                 \"CollectedHeap::G1 4\",\n@@ -119,11 +73,0 @@\n-                 \"_thread_uninitialized 0\"};\n-            String[] tempConstantString = {\"intConstant _temp_constant 45\"};\n-            testClhsdbForIntConstant(app.getPid(), \"intConstant\", defaultOutputStrings);\n-            testClhsdbForIntConstant(\n-                app.getPid(),\n-                \"intConstant _temp_constant 45\\nintConstant _temp_constant\",\n-                tempConstantString);\n-          } finally {\n-              LingeredApp.stopApp(app);\n-          }\n-    }\n@@ -131,6 +74,10 @@\n-    public static void main (String... args) throws Exception {\n-\n-        try {\n-            testIntConstant();\n-        } catch (Exception e) {\n-            throw new Error(\"Test failed with \" + e);\n+                 \"_thread_uninitialized 0\"));\n+            expStrMap.put(\"intConstant _temp_constant\", List.of(\n+                 \"intConstant _temp_constant 45\"));\n+            test.run(app.getPid(), cmds, expStrMap, null);\n+        } catch (SkippedException se) {\n+            throw se;\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n+        } finally {\n+            LingeredApp.stopApp(app);\n@@ -138,0 +85,1 @@\n+        System.out.println(\"Test PASSED\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestIntConstant.java","additions":28,"deletions":80,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-import java.util.Scanner;\n@@ -27,4 +26,2 @@\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.stream.Collectors;\n-import java.io.OutputStream;\n+import java.util.Map;\n+import java.util.HashMap;\n@@ -32,4 +29,0 @@\n-import jdk.test.lib.JDKToolLauncher;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n@@ -37,1 +30,1 @@\n-import jdk.test.lib.Asserts;\n+import jtreg.SkippedException;\n@@ -50,98 +43,0 @@\n-    private static final String PRINTMDO_OUT_FILE = \"printmdo_out.txt\";\n-\n-    private static void verifyPrintMdoOutput() throws Exception {\n-\n-        Exception unexpected = null;\n-        File printMdoFile = new File(PRINTMDO_OUT_FILE);\n-        Asserts.assertTrue(printMdoFile.exists() && printMdoFile.isFile(),\n-                           \"File with printmdo output not created: \" +\n-                           printMdoFile.getAbsolutePath());\n-        try {\n-            Scanner scanner = new Scanner(printMdoFile);\n-\n-            String unexpectedMsg =\n-                 \"One or more of 'VirtualCallData', 'CounterData', \" +\n-                 \"'ReceiverTypeData', 'bci', 'MethodData' \"  +\n-                 \"or 'java\/lang\/Object' not found\";\n-            boolean knownClassFound = false;\n-            boolean knownProfileDataTypeFound = false;\n-            boolean knownTokensFound = false;\n-\n-            while (scanner.hasNextLine()) {\n-                String line = scanner.nextLine();\n-                line = line.trim();\n-                System.out.println(line);\n-\n-                if (line.contains(\"missing reason for \")) {\n-                    unexpected = new RuntimeException(\"Unexpected msg: missing reason for \");\n-                    break;\n-                }\n-                if (line.contains(\"VirtualCallData\")  ||\n-                    line.contains(\"CounterData\")      ||\n-                    line.contains(\"ReceiverTypeData\")) {\n-                    knownProfileDataTypeFound = true;\n-                }\n-                if (line.contains(\"bci\") ||\n-                    line.contains(\"MethodData\")) {\n-                    knownTokensFound = true;\n-                }\n-                if (line.contains(\"java\/lang\/Object\")) {\n-                    knownClassFound = true;\n-                }\n-            }\n-            if ((knownClassFound           == false)  ||\n-                (knownTokensFound          == false)  ||\n-                (knownProfileDataTypeFound == false)) {\n-                unexpected = new RuntimeException(unexpectedMsg);\n-            }\n-            if (unexpected != null) {\n-                throw unexpected;\n-            }\n-        } catch (Exception ex) {\n-           throw new RuntimeException(\"Test ERROR \" + ex, ex);\n-        } finally {\n-           printMdoFile.delete();\n-        }\n-    }\n-\n-    private static void startClhsdbForPrintMdo(long lingeredAppPid) throws Exception {\n-\n-        Process p;\n-        JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(\"jhsdb\");\n-        launcher.addToolArg(\"clhsdb\");\n-        launcher.addToolArg(\"--pid\");\n-        launcher.addToolArg(Long.toString(lingeredAppPid));\n-\n-        ProcessBuilder pb = new ProcessBuilder();\n-        pb.command(launcher.getCommand());\n-        System.out.println(\n-            pb.command().stream().collect(Collectors.joining(\" \")));\n-\n-        try {\n-            p = pb.start();\n-        } catch (Exception attachE) {\n-            throw new Error(\"Couldn't start jhsdb or attach to LingeredApp : \" + attachE);\n-        }\n-\n-        \/\/ Issue the 'printmdo' input at the clhsdb prompt.\n-        OutputStream input = p.getOutputStream();\n-        String str = \"printmdo -a > \" + PRINTMDO_OUT_FILE + \"\\nquit\\n\";\n-        try {\n-            input.write(str.getBytes());\n-            input.flush();\n-        } catch (IOException ioe) {\n-            throw new Error(\"Problem issuing the printmdo command: \" + str, ioe);\n-        }\n-\n-        OutputAnalyzer output = new OutputAnalyzer(p);\n-\n-        try {\n-            p.waitFor();\n-        } catch (InterruptedException ie) {\n-            p.destroyForcibly();\n-            throw new Error(\"Problem awaiting the child process: \" + ie, ie);\n-        }\n-\n-        output.shouldHaveExitValue(0);\n-    }\n-\n@@ -150,0 +45,1 @@\n+        System.out.println(\"Starting TestPrintMdo test\");\n@@ -151,1 +47,0 @@\n-\n@@ -153,0 +48,1 @@\n+            ClhsdbLauncher test = new ClhsdbLauncher();\n@@ -159,2 +55,18 @@\n-            startClhsdbForPrintMdo(app.getPid());\n-            verifyPrintMdoOutput();\n+            List<String> cmds = List.of(\"printmdo -a\");\n+\n+            Map<String, List<String>> expStrMap = new HashMap<>();\n+            Map<String, List<String>> unExpStrMap = new HashMap<>();\n+            expStrMap.put(\"printmdo -a\", List.of(\n+                \"VirtualCallData\",\n+                \"CounterData\",\n+                \"ReceiverTypeData\",\n+                \"bci\",\n+                \"MethodData\",\n+                \"java\/lang\/Object\"));\n+            unExpStrMap.put(\"printmdo -a\", List.of(\n+                            \"missing reason for \"));\n+            test.run(app.getPid(), cmds, expStrMap, unExpStrMap);\n+        } catch (SkippedException se) {\n+            throw se;\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n@@ -164,0 +76,2 @@\n+\n+        System.out.println(\"Test PASSED\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestPrintMdo.java","additions":26,"deletions":112,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,2 @@\n-import java.io.IOException;\n-import java.util.stream.Collectors;\n-import java.io.OutputStream;\n+import java.util.Map;\n+import java.util.HashMap;\n@@ -30,3 +29,0 @@\n-import jdk.test.lib.JDKToolLauncher;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.OutputAnalyzer;\n@@ -34,0 +30,1 @@\n+import jtreg.SkippedException;\n@@ -47,33 +44,1 @@\n-    private static void testClhsdbForType(\n-                        long lingeredAppPid,\n-                        String commandString,\n-                        String[] expectedOutputStrings) throws Exception {\n-\n-        Process p;\n-        JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(\"jhsdb\");\n-        launcher.addToolArg(\"clhsdb\");\n-        launcher.addToolArg(\"--pid\");\n-        launcher.addToolArg(Long.toString(lingeredAppPid));\n-\n-        ProcessBuilder pb = new ProcessBuilder();\n-        pb.command(launcher.getCommand());\n-        System.out.println(\n-            pb.command().stream().collect(Collectors.joining(\" \")));\n-\n-        try {\n-            p = pb.start();\n-        } catch (Exception attachE) {\n-            throw new Error(\"Couldn't start jhsdb or attach to LingeredApp : \" + attachE);\n-        }\n-\n-        \/\/ Issue the 'type' commands at the clhsdb prompt.\n-        OutputStream input = p.getOutputStream();\n-        try {\n-            input.write((commandString + \"\\n\").getBytes());\n-            input.write(\"quit\\n\".getBytes());\n-            input.flush();\n-        } catch (IOException ioe) {\n-            throw new Error(\"Problem issuing the 'type' command \", ioe);\n-        }\n-\n-        OutputAnalyzer output = new OutputAnalyzer(p);\n+    public static void main (String... args) throws Exception {\n@@ -81,0 +46,2 @@\n+        System.out.println(\"Starting TestType test\");\n+        LingeredApp app = null;\n@@ -82,5 +49,2 @@\n-            p.waitFor();\n-        } catch (InterruptedException ie) {\n-            p.destroyForcibly();\n-            throw new Error(\"Problem awaiting the child process: \" + ie);\n-        }\n+            ClhsdbLauncher test = new ClhsdbLauncher();\n+            List<String> vmArgs = new ArrayList<String>(Utils.getVmOptions());\n@@ -88,10 +52,3 @@\n-        output.shouldHaveExitValue(0);\n-        System.out.println(output.getOutput());\n-\n-        for (String expectedOutputString: expectedOutputStrings) {\n-            output.shouldContain(expectedOutputString);\n-        }\n-    }\n-\n-    public static void main (String... args) throws Exception {\n-        LingeredApp app = null;\n+            app = LingeredApp.startApp(vmArgs);\n+            System.out.println (\"Started LingeredApp with pid \" + app.getPid());\n+            List<String> cmds = List.of(\"type\", \"type InstanceKlass\");\n@@ -99,3 +56,1 @@\n-        try {\n-            List<String> vmArgs = new ArrayList<String>();\n-            vmArgs.addAll(Utils.getVmOptions());\n+            Map<String, List<String>> expStrMap = new HashMap<>();\n@@ -106,8 +61,8 @@\n-            String[] defaultOutputStrings =\n-                {\"type G1CollectedHeap CollectedHeap\",\n-                 \"type ConstantPoolCache MetaspaceObj\",\n-                 \"type ConstantPool Metadata\",\n-                 \"type CompilerThread JavaThread\",\n-                 \"type CardGeneration Generation\",\n-                 \"type ArrayKlass Klass\",\n-                 \"type InstanceKlass Klass\"};\n+            expStrMap.put(\"type\", List.of(\n+                \"type G1CollectedHeap CollectedHeap\",\n+                \"type ConstantPoolCache MetaspaceObj\",\n+                \"type ConstantPool Metadata\",\n+                \"type CompilerThread JavaThread\",\n+                \"type CardGeneration Generation\",\n+                \"type ArrayKlass Klass\",\n+                \"type InstanceKlass Klass\"));\n@@ -115,8 +70,6 @@\n-            String[] instanceKlassOutputString = {\"type InstanceKlass Klass\"};\n-\n-            app = LingeredApp.startApp(vmArgs);\n-            System.out.println (\"Started LingeredApp with pid \" + app.getPid());\n-            testClhsdbForType(app.getPid(), \"type\", defaultOutputStrings);\n-            testClhsdbForType(app.getPid(),\n-                              \"type InstanceKlass\",\n-                              instanceKlassOutputString);\n+            expStrMap.put(\"type InstanceKlass\", List.of(\"type InstanceKlass Klass\"));\n+            test.run(app.getPid(), cmds, expStrMap, null);\n+        } catch (SkippedException se) {\n+            throw se;\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n@@ -126,0 +79,1 @@\n+        System.out.println(\"Test PASSED\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestType.java","additions":28,"deletions":74,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,2 @@\n-import java.io.IOException;\n-import java.util.stream.Collectors;\n-import java.io.OutputStream;\n+import java.util.Map;\n+import java.util.HashMap;\n@@ -32,3 +31,1 @@\n-import jdk.test.lib.JDKToolLauncher;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.OutputAnalyzer;\n+import jtreg.SkippedException;\n@@ -65,5 +62,5 @@\n-        Process p;\n-        JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(\"jhsdb\");\n-        launcher.addToolArg(\"clhsdb\");\n-        launcher.addToolArg(\"--pid\");\n-        launcher.addToolArg(Long.toString(lingeredAppPid));\n+        ClhsdbLauncher launcher = new ClhsdbLauncher();\n+        List<String> cmds = List.of(\"universe\");\n+        Map<String, List<String>> expStrMap = new HashMap<>();\n+        List<String> expStrings = new ArrayList<String>();\n+        expStrings.add(\"Heap Parameters\");\n@@ -71,29 +68,0 @@\n-        ProcessBuilder pb = new ProcessBuilder();\n-        pb.command(launcher.getCommand());\n-        System.out.println(\n-            pb.command().stream().collect(Collectors.joining(\" \")));\n-\n-        try {\n-            p = pb.start();\n-        } catch (Exception attachE) {\n-            throw new Error(\"Couldn't start jhsdb or attach to LingeredApp : \" + attachE);\n-        }\n-\n-        \/\/ Issue the 'universe' command at the clhsdb prompt.\n-        OutputStream input = p.getOutputStream();\n-        try {\n-            input.write(\"universe\\n\".getBytes());\n-            input.write(\"quit\\n\".getBytes());\n-            input.flush();\n-        } catch (IOException ioe) {\n-            throw new Error(\"Problem issuing the 'universe' command \", ioe);\n-        }\n-\n-        OutputAnalyzer output = new OutputAnalyzer(p);\n-\n-        try {\n-            p.waitFor();\n-        } catch (InterruptedException ie) {\n-            p.destroyForcibly();\n-            throw new Error(\"Problem awaiting the child process: \" + ie, ie);\n-        }\n@@ -101,1 +69,1 @@\n-            output.shouldContain(\"ZHeap\");\n+            expStrings.add(\"ZHeap\");\n@@ -103,5 +71,0 @@\n-\n-        output.shouldHaveExitValue(0);\n-        System.out.println(output.getOutput());\n-\n-        output.shouldContain(\"Heap Parameters\");\n@@ -109,4 +72,4 @@\n-            output.shouldContain(\"garbage-first heap\");\n-            output.shouldContain(\"region size\");\n-            output.shouldContain(\"G1 Young Generation:\");\n-            output.shouldContain(\"regions  =\");\n+            expStrings.add(\"garbage-first heap\");\n+            expStrings.add(\"region size\");\n+            expStrings.add(\"G1 Young Generation:\");\n+            expStrings.add(\"regions  =\");\n@@ -115,1 +78,1 @@\n-            output.shouldContain(\"Gen 1: concurrent mark-sweep generation\");\n+            expStrings.add(\"Gen 1: concurrent mark-sweep generation\");\n@@ -118,1 +81,1 @@\n-            output.shouldContain(\"Gen 1:   old\");\n+            expStrings.add(\"Gen 1:   old\");\n@@ -121,3 +84,3 @@\n-            output.shouldContain(\"ParallelScavengeHeap\");\n-            output.shouldContain(\"PSYoungGen\");\n-            output.shouldContain(\"eden\");\n+            expStrings.add(\"ParallelScavengeHeap\");\n+            expStrings.add(\"PSYoungGen\");\n+            expStrings.add(\"eden\");\n@@ -126,4 +89,4 @@\n-            output.shouldContain(\"Epsilon heap\");\n-            output.shouldContain(\"reserved\");\n-            output.shouldContain(\"committed\");\n-            output.shouldContain(\"used\");\n+            expStrings.add(\"Epsilon heap\");\n+            expStrings.add(\"reserved\");\n+            expStrings.add(\"committed\");\n+            expStrings.add(\"used\");\n@@ -131,0 +94,2 @@\n+        expStrMap.put(\"universe\", expStrings);\n+        launcher.run(lingeredAppPid, cmds, expStrMap, null);\n@@ -148,1 +113,0 @@\n-\n@@ -150,0 +114,1 @@\n+        System.out.println(\"Starting TestUniverse test\");\n@@ -161,0 +126,2 @@\n+        } catch (SkippedException se) {\n+            throw se;\n@@ -162,0 +129,2 @@\n+            System.out.println(e.getMessage());\n+            e.printStackTrace();\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestUniverse.java","additions":30,"deletions":61,"binary":false,"changes":91,"status":"modified"}]}