{"files":[{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8214994\n+ * @summary The split-if optimization fails because an unexpected Opaque1 is encountered.\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-UseOnStackReplacement -XX:-BackgroundCompilation\n+ *                   compiler.loopopts.TestSplitIfOpaque1\n+ *\/\n+\n+package compiler.loopopts;\n+\n+public class TestSplitIfOpaque1 {\n+\n+    static class MyClass {\n+        int f;\n+        MyClass(int f) {\n+            this.f = f;\n+        }\n+    }\n+\n+    \/\/ The inner loop is found to be a counted loop and a loop limit check\n+    \/\/ is added by updating the Opaque1 input of the predicate template.\n+    \/\/ This Opaque1 node is then pushed upwards to before the predicates of\n+    \/\/ the outer loop and ends up right after the second 'if (b)'.\n+    \/\/ The split-if optimization kicks in and splits the first predicate of\n+    \/\/ the outer loop (an \"obj != NULL\" check) through the 'if (b)' region.\n+    \/\/ We fail because the region contains an unexpected Opaque1 node.\n+    static int test1(boolean b, int limit, MyClass obj) {\n+        int res = 0;\n+        MyClass notNull = new MyClass(42);\n+        if (b) {\n+            limit = 100;\n+        }\n+        if (b) {\n+            obj = notNull;\n+        }\n+        for (int i = 0; i < 1000; ++i) {\n+            res += obj.f;\n+            for (int j = 0; j <= limit; ++j) {\n+                \/\/ Empty\n+            }\n+        }\n+        return res;\n+    }\n+\n+    \/\/ Same as test1 but triggers slightly different failure mode\n+    static int test2(boolean b, int limit, MyClass obj, int[] array) {\n+        int res = 0;\n+        MyClass notNull = new MyClass(12);\n+        if (b) {\n+            limit = 100;\n+        }\n+        if (b) {\n+            obj = notNull;\n+        }\n+        for (int i = 0; i < 1000; ++i) {\n+            res += obj.f;\n+            for (int j = 0; j <= limit; ++j) {\n+                array[j] = j;\n+            }\n+        }\n+        return res;\n+    }\n+\n+    public static void main(String[] args) {\n+        MyClass obj = new MyClass(42);\n+        int[] array = new int[101];\n+        for (int i = 0; i < 20_000; i++) {\n+            test1(true, 50, obj);\n+            test1(false, 100, obj);\n+            test2(true, 50, obj, array);\n+            test2(false, 100, obj, array);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestSplitIfOpaque1.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"}]}