{"files":[{"patch":"@@ -668,1 +668,1 @@\n-        return getBreakLocation(s, metrics, x0, x, e, startOffset, false);\n+        return getBreakLocation(s, metrics, x0, x, e, startOffset, true);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/Utilities.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -363,1 +363,2 @@\n-                                                tabBase, tabBase + currentWidth,\n+                                                (float)tabBase,\n+                                                (float)(tabBase + currentWidth),\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/WrappedPlainView.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @key headful\n+ * @bug 8212904\n+ * @summary Verifies JTextArea line wrapping using UI scale\n+ * @run main JTextAreaWordWrapTest\n+ *\/\n+import java.awt.BorderLayout;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextArea;\n+import javax.swing.ScrollPaneConstants;\n+import javax.swing.SwingUtilities;\n+\n+public class JTextAreaWordWrapTest {\n+\n+    static JFrame frame;\n+    static JFrame frame1;\n+    static JTextArea textArea;\n+    static JTextArea textArea1;\n+\n+    public static void doWrapOnTest() {\n+\n+        frame = new JFrame();\n+        frame.setSize( 720, 300 );\n+        frame.setLayout( new BorderLayout() );\n+\n+        textArea = new JTextArea();\n+        textArea.setLineWrap( true );\n+        textArea.setWrapStyleWord( true );\n+\n+        StringBuffer sb = new StringBuffer();\n+        for (int i = 0; i < 100; i++) {\n+            sb.append( \"zz zzz zzzz zz zz zz zzz xzzzz zzzzzzzzzzzzzzzzx yyyyyyy tttttttttt sssss hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\\n\" );\n+        }\n+        textArea.setText( sb.toString() );\n+        JScrollPane pane = new JScrollPane( textArea,\n+                                            ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,\n+                                            ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED );\n+        frame.add( pane, BorderLayout.CENTER );\n+        frame.setVisible( true );\n+\n+    }\n+\n+    public static void doWrapOffTest() {\n+        frame1 = new JFrame();\n+        frame1.setSize( 720, 300 );\n+        frame1.setLayout( new BorderLayout() );\n+\n+        textArea1 = new JTextArea();\n+\n+        StringBuffer sb1 = new StringBuffer();\n+        for (int i = 0; i < 100; i++) {\n+            sb1.append( \"zz zzz zzzz zz zz zz zzz xzzzz zzzzzzzzzzzzzzzzx yyyyyyy tttttttttt sssss hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\\n\" );\n+        }\n+        textArea1.setText( sb1.toString() );\n+        JScrollPane pane1 = new JScrollPane( textArea1,\n+                                             ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,\n+                                             ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED );\n+        frame1.add( pane1, BorderLayout.CENTER );\n+        frame1.setLocationRelativeTo(null);\n+        frame1.setVisible( true );\n+    }\n+\n+    public static void main( String[] args ) throws Exception {\n+        System.setProperty( \"sun.java2d.uiScale\", \"1.25\" );\n+        try {\n+            SwingUtilities.invokeAndWait(() -> doWrapOnTest());\n+            Thread.sleep(500);\n+            SwingUtilities.invokeAndWait(() -> doWrapOffTest());\n+            Thread.sleep(500);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+\n+                int wraponHeight = textArea.getHeight();\n+                System.out.println(\"wraponheight \" + wraponHeight);\n+                int wrapoffHeight = textArea1.getHeight();\n+                System.out.println(\"wrapoffheight \" + wrapoffHeight);\n+\n+                if (wraponHeight == wrapoffHeight) {\n+                    throw new RuntimeException(\"JTextArea line wrapping incorrect when using UI scale\");\n+                }\n+            });\n+\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> frame.dispose());\n+            SwingUtilities.invokeAndWait(() -> frame1.dispose());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTextArea\/JTextAreaWordWrapTest.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"}]}