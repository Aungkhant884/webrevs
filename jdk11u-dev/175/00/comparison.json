{"files":[{"patch":"@@ -1255,1 +1255,1 @@\n-         * deliver {@code buffersize} bytes of data to each invocation of the\n+         * deliver {@code bufferSize} bytes of data to each invocation of the\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpResponse.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+import java.util.concurrent.atomic.AtomicBoolean;\n@@ -59,0 +60,1 @@\n+    private final AtomicBoolean subscribed = new AtomicBoolean();\n@@ -75,0 +77,6 @@\n+        Objects.requireNonNull(subscription);\n+        if (!subscribed.compareAndSet(false, true)) {\n+            subscription.cancel();\n+            return;\n+        }\n+\n@@ -85,0 +93,1 @@\n+        Objects.requireNonNull(item);\n@@ -94,0 +103,1 @@\n+        Objects.requireNonNull(throwable);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/LineSubscriberAdapter.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -87,0 +87,1 @@\n+            Objects.requireNonNull(subscription);\n@@ -97,0 +98,1 @@\n+            Objects.requireNonNull(items);\n@@ -107,0 +109,1 @@\n+            Objects.requireNonNull(throwable);\n@@ -134,0 +137,1 @@\n+        private final AtomicBoolean subscribed = new AtomicBoolean();\n@@ -173,0 +177,6 @@\n+            Objects.requireNonNull(subscription);\n+            if (!subscribed.compareAndSet(false, true)) {\n+                subscription.cancel();\n+                return;\n+            }\n+\n@@ -414,0 +424,1 @@\n+            Objects.requireNonNull(s);\n@@ -542,0 +553,1 @@\n+            Objects.requireNonNull(subscription);\n@@ -556,0 +568,1 @@\n+            Objects.requireNonNull(throwable);\n@@ -822,0 +835,2 @@\n+        private final AtomicBoolean subscribed = new AtomicBoolean();\n+\n@@ -824,1 +839,6 @@\n-            subscriptionCF.complete(subscription);\n+            Objects.requireNonNull(subscription);\n+            if (!subscribed.compareAndSet(false, true)) {\n+                subscription.cancel();\n+            } else {\n+                subscriptionCF.complete(subscription);\n+            }\n@@ -829,0 +849,1 @@\n+            Objects.requireNonNull(item);\n@@ -856,0 +877,1 @@\n+            Objects.requireNonNull(throwable);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ResponseSubscribers.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,159 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Basic test for the standard BodySubscribers default behavior\n+ * @bug 8225583\n+ * @run testng BodySubscribersTest\n+ *\/\n+\n+import java.net.http.HttpResponse.BodySubscriber;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.concurrent.Flow;\n+import java.util.function.Supplier;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import static java.lang.System.out;\n+import static java.net.http.HttpResponse.BodySubscribers.*;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.nio.file.StandardOpenOption.CREATE;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.expectThrows;\n+import static org.testng.Assert.fail;\n+\n+public class BodySubscribersTest {\n+\n+    static final Class<NullPointerException> NPE = NullPointerException.class;\n+\n+    \/\/ Supplier of BodySubscriber<?>, with a descriptive name\n+    static class BSSupplier implements Supplier<BodySubscriber<?>> {\n+        private final Supplier<BodySubscriber<?>> supplier;\n+        private final String name;\n+        private BSSupplier(Supplier<BodySubscriber<?>> supplier, String name) {\n+            this.supplier = supplier;\n+            this.name = name;\n+        }\n+        static BSSupplier create(String name, Supplier<BodySubscriber<?>> supplier) {\n+            return new BSSupplier(supplier, name);\n+        }\n+        @Override public BodySubscriber<?> get() { return supplier.get(); }\n+        @Override public String toString() { return name; }\n+    }\n+\n+    static class LineSubscriber implements Flow.Subscriber<String> {\n+        @Override public void onSubscribe(Flow.Subscription subscription) {  }\n+        @Override public void onNext(String item) { fail(); }\n+        @Override public void onError(Throwable throwable) { fail(); }\n+        @Override public void onComplete() { fail(); }\n+    }\n+\n+    static class BBSubscriber implements Flow.Subscriber<List<ByteBuffer>> {\n+        @Override public void onSubscribe(Flow.Subscription subscription) {  }\n+        @Override public void onNext(List<ByteBuffer> item) { fail(); }\n+        @Override public void onError(Throwable throwable) { fail(); }\n+        @Override public void onComplete() { fail(); }\n+    }\n+\n+    @DataProvider(name = \"bodySubscriberSuppliers\")\n+    public Object[][] bodySubscriberSuppliers() { ;\n+        List<Supplier<BodySubscriber<?>>> list = List.of(\n+            BSSupplier.create(\"ofByteArray\",   () -> ofByteArray()),\n+            BSSupplier.create(\"ofInputStream\", () -> ofInputStream()),\n+            BSSupplier.create(\"ofBAConsumer\",  () -> ofByteArrayConsumer(ba -> { })),\n+            BSSupplier.create(\"ofLines\",       () -> ofLines(UTF_8)),\n+            BSSupplier.create(\"ofPublisher\",   () -> ofPublisher()),\n+            BSSupplier.create(\"ofFile\",        () -> ofFile(Path.of(\"f\"))),\n+            BSSupplier.create(\"ofFile-opts)\",  () -> ofFile(Path.of(\"f\"), CREATE)),\n+            BSSupplier.create(\"ofString\",      () -> ofString(UTF_8)),\n+            BSSupplier.create(\"buffering\",     () -> buffering(ofByteArray(), 10)),\n+            BSSupplier.create(\"discarding\",    () -> discarding()),\n+            BSSupplier.create(\"mapping\",       () -> mapping(ofString(UTF_8), s -> s)),\n+            BSSupplier.create(\"replacing\",     () -> replacing(\"hello\")),\n+            BSSupplier.create(\"fromSubscriber-1\",     () -> fromSubscriber(new BBSubscriber())),\n+            BSSupplier.create(\"fromSubscriber-2\",     () -> fromSubscriber(new BBSubscriber(), s -> s)),\n+            BSSupplier.create(\"fromLineSubscriber-1\", () -> fromLineSubscriber(new LineSubscriber())),\n+            BSSupplier.create(\"fromLineSubscriber-2\", () -> fromLineSubscriber(new LineSubscriber(), s -> s, UTF_8, \",\"))\n+        );\n+\n+        return list.stream().map(x -> new Object[] { x }).toArray(Object[][]::new);\n+    }\n+\n+    @Test(dataProvider = \"bodySubscriberSuppliers\")\n+    void nulls(Supplier<BodySubscriber<?>> bodySubscriberSupplier) {\n+        BodySubscriber<?> bodySubscriber = bodySubscriberSupplier.get();\n+        boolean subscribed = false;\n+\n+        do {\n+            assertNotNull(bodySubscriber.getBody());\n+            assertNotNull(bodySubscriber.getBody());\n+            assertNotNull(bodySubscriber.getBody());\n+            expectThrows(NPE, () -> bodySubscriber.onSubscribe(null));\n+            expectThrows(NPE, () -> bodySubscriber.onSubscribe(null));\n+            expectThrows(NPE, () -> bodySubscriber.onSubscribe(null));\n+\n+            expectThrows(NPE, () -> bodySubscriber.onNext(null));\n+            expectThrows(NPE, () -> bodySubscriber.onNext(null));\n+            expectThrows(NPE, () -> bodySubscriber.onNext(null));\n+            expectThrows(NPE, () -> bodySubscriber.onNext(null));\n+\n+            expectThrows(NPE, () -> bodySubscriber.onError(null));\n+            expectThrows(NPE, () -> bodySubscriber.onError(null));\n+            expectThrows(NPE, () -> bodySubscriber.onError(null));\n+\n+            if (!subscribed) {\n+                out.println(\"subscribing\");\n+                \/\/ subscribe the Subscriber and repeat\n+                bodySubscriber.onSubscribe(new Flow.Subscription() {\n+                    @Override public void request(long n) { \/* do nothing *\/ }\n+                    @Override public void cancel() { fail(); }\n+                });\n+                subscribed = true;\n+                continue;\n+            }\n+            break;\n+        } while (true);\n+    }\n+\n+    @Test(dataProvider = \"bodySubscriberSuppliers\")\n+    void subscribeMoreThanOnce(Supplier<BodySubscriber<?>> bodySubscriberSupplier) {\n+        BodySubscriber<?> bodySubscriber = bodySubscriberSupplier.get();\n+        bodySubscriber.onSubscribe(new Flow.Subscription() {\n+            @Override public void request(long n) { \/* do nothing *\/ }\n+            @Override public void cancel() { fail(); }\n+        });\n+\n+        for (int i = 0; i < 5; i++) {\n+            var subscription = new Flow.Subscription() {\n+                volatile boolean cancelled;\n+                @Override public void request(long n) { fail(); }\n+                @Override public void cancel() { cancelled = true; }\n+            };\n+            bodySubscriber.onSubscribe(subscription);\n+            assertTrue(subscription.cancelled);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/BodySubscribersTest.java","additions":159,"deletions":0,"binary":false,"changes":159,"status":"added"}]}