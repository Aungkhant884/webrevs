{"files":[{"patch":"@@ -86,0 +86,1 @@\n+      assert(!methods->at(i)->is_private(), \"private methods should not need a vtable entry\");\n@@ -285,1 +286,1 @@\n-\/\/ Private methods do not override and are not overridden.\n+\/\/ Private methods do not override, and are not overridden and are not in the vtable.\n@@ -395,2 +396,3 @@\n-  \/\/ Static and <init> methods are never in\n-  if (target_method()->is_static() || target_method()->name() ==  vmSymbols::object_initializer_name()) {\n+  \/\/ Private, static and <init> methods are never in\n+  if (target_method()->is_private() || target_method()->is_static() ||\n+      (target_method()->name()->fast_compare(vmSymbols::object_initializer_name()) == 0)) {\n@@ -416,4 +418,1 @@\n-    \/\/ Private interface methods have no itable index and are always invoked nonvirtually,\n-    \/\/ so they retain their nonvirtual_vtable_index value, and therefore can_be_statically_bound()\n-    \/\/ will return true.\n-    if ((!is_default || !target_method()->has_itable_index()) && !target_method()->is_private()) {\n+    if ((!is_default || !target_method()->has_itable_index())) {\n@@ -430,8 +429,0 @@\n-  \/\/ private methods in classes always have a new entry in the vtable\n-  \/\/ specification interpretation since classic has\n-  \/\/ private methods not overriding\n-  \/\/ JDK8 adds private methods in interfaces which require invokespecial\n-  if (target_method()->is_private()) {\n-    return allocate_new;\n-  }\n-\n@@ -560,0 +551,1 @@\n+  assert(!m->is_private(), \"private methods should not be in vtable\");\n@@ -611,0 +603,2 @@\n+      (target_method()->is_private()) ||\n+      \/\/ private methods don't need to be in vtable\n@@ -613,1 +607,1 @@\n-      (target_method()->name() ==  vmSymbols::object_initializer_name())\n+      (target_method()->name()->fast_compare(vmSymbols::object_initializer_name()) == 0)\n@@ -624,1 +618,1 @@\n-    assert(target_method()->is_default_method() || target_method()->is_private(),\n+    assert(target_method()->is_default_method(),\n@@ -634,6 +628,0 @@\n-  \/\/ private methods in classes always have a new entry in the vtable.\n-  \/\/ Specification interpretation since classic has private methods not overriding.\n-  if (target_method()->is_private()) {\n-    return true;\n-  }\n-\n@@ -666,2 +654,2 @@\n-    \/\/ pretend private methods are not in the super vtable\n-    \/\/ since we do override around them: e.g. a.m pub\/b.m private\/c.m pub,\n+    \/\/ ignore private methods found via lookup_method since they do not participate in overriding,\n+    \/\/ and since we do override around them: e.g. a.m pub\/b.m private\/c.m pub,\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":13,"deletions":25,"binary":false,"changes":38,"status":"modified"}]}