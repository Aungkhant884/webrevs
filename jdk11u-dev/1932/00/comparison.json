{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @key intermittent\n@@ -28,1 +29,4 @@\n- *           Testing for Bind exception on Windows\n+ *           Testing for Bind exception on Windows. This test may fail\n+ *           intermittently if other tests \/ process manage to bind to\n+ *           the same port that the test is using in the short window\n+ *           time where the port might appear available again.\n@@ -44,1 +48,1 @@\n-        final int serverPort = server.getAddress().getPort();\n+        int serverPort = server.getAddress().getPort();\n@@ -49,0 +53,1 @@\n+        boolean failedOnce = false;\n@@ -50,8 +55,21 @@\n-        for (int i = 0; i < 100; i++) {\n-            try {\n-                server = HttpServer.create(serverAddr, 0);\n-                server.start();\n-                server.stop(0);\n-            } catch (Exception ex) {\n-                ex.printStackTrace();\n-                exceptionCount++;\n+        RETRY: while (exceptionCount == 0) {\n+            for (int i = 0; i < 100; i++) {\n+                try {\n+                    server = HttpServer.create(serverAddr, 0);\n+                    server.start();\n+                    server.stop(0);\n+                } catch (Exception ex) {\n+                    if (!failedOnce) {\n+                        failedOnce = true;\n+                        server = HttpServer.create(new InetSocketAddress(0), 0);\n+                        serverPort = server.getAddress().getPort();\n+                        server.start();\n+                        server.stop(0);\n+                        serverAddr = new InetSocketAddress(serverPort);\n+                        System.out.println(\"Retrying with serverPort == \" + serverPort);\n+                        continue RETRY;\n+                    }\n+                    System.err.println(\"Got exception at iteration: \" + i );\n+                    ex.printStackTrace();\n+                    exceptionCount++;\n+                }\n@@ -59,0 +77,1 @@\n+            break;\n@@ -61,1 +80,2 @@\n-           throw new RuntimeException(\"Test Failed\");\n+           throw new RuntimeException(\"Test Failed: got \"\n+                 + exceptionCount + \" exceptions.\");\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/SimpleHttpServerTest.java","additions":32,"deletions":12,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,1 @@\n+    static boolean retried;\n@@ -51,4 +52,0 @@\n-        String s1_type = (String)test[0];\n-        String s2_type = (String)test[1];\n-        int port = 0;\n-\n@@ -60,0 +57,9 @@\n+        doTest(test, count, ia1, ia2, silent, !retried);\n+    }\n+\n+    static void doTest(Object test[], int count, InetAddress ia1, InetAddress ia2,\n+                       boolean silent, boolean retry) throws Exception {\n+        String s1_type = (String)test[0];\n+        String s2_type = (String)test[1];\n+        int port = 0;\n+\n@@ -71,0 +77,2 @@\n+        boolean firstBound = false;\n+\n@@ -92,0 +100,7 @@\n+            \/\/ The fact that the port was available for ia1 does not\n+            \/\/ guarantee that it will also be available for ia2 as something\n+            \/\/ else might already be bound to that port.\n+            \/\/ For the sake of test stability we will retry once in\n+            \/\/ case of unexpected bind exception.\n+\n+            firstBound = true;\n@@ -144,0 +159,12 @@\n+        if (failed && retry && firstBound) {\n+            \/\/ retry once at the first failure only\n+            retried = true;\n+            if (!silent) {\n+                System.out.println(\"\");\n+                System.out.println(\"**************************\");\n+                System.out.println(\"Test \" + count + \": Retrying...\");\n+            }\n+            doTest(test, count, ia1, ia2, silent, false);\n+            return;\n+        }\n+\n","filename":"test\/jdk\/java\/net\/BindException\/Test.java","additions":32,"deletions":5,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,4 @@\n-        ServerSocket ss = new ServerSocket(0);\n-        Socket s1 = new Socket(\"localhost\", ss.getLocalPort());\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        ServerSocket ss = new ServerSocket(0, 0, loopback);\n+\n+        Socket s1 = new Socket(loopback, ss.getLocalPort());\n","filename":"test\/jdk\/java\/net\/PlainSocketImpl\/SetOption.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,2 +47,4 @@\n-        ServerSocket ss = new ServerSocket(0);\n-        client = new Socket(\"localhost\", ss.getLocalPort());\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        ServerSocket ss = new ServerSocket();\n+        ss.bind(new InetSocketAddress(loopback, 0));\n+        client = new Socket(loopback, ss.getLocalPort());\n","filename":"test\/jdk\/java\/net\/Socket\/RST.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/test\/lib\n@@ -36,0 +37,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -80,1 +82,1 @@\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws Exception {\n@@ -82,7 +84,14 @@\n-            ServerSocket serversocket = new ServerSocket (0);\n-            int port = serversocket.getLocalPort ();\n-            XServer server = new XServer (serversocket);\n-            server.start ();\n-            Thread.sleep (200);\n-            URL url = new URL (\"http:\/\/localhost:\"+port+\"\/index.html\");\n-            URLConnection uc = url.openConnection ();\n+            InetAddress loopback = InetAddress.getLoopbackAddress();\n+            ServerSocket serversocket = new ServerSocket();\n+            serversocket.bind(new InetSocketAddress(loopback, 0));\n+            int port = serversocket.getLocalPort();\n+            XServer server = new XServer(serversocket);\n+            server.start();\n+            Thread.sleep(200);\n+            URL url = URIBuilder.newBuilder()\n+                      .scheme(\"http\")\n+                      .loopback()\n+                      .port(port)\n+                      .path(\"\/index.html\")\n+                      .toURL();\n+            URLConnection uc = url.openConnection();\n@@ -109,0 +118,1 @@\n+            throw e;\n","filename":"test\/jdk\/java\/net\/URLConnection\/URLConnectionHeaders.java","additions":19,"deletions":9,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,4 @@\n- * @summary IPv6 support for Windows XP and 2003 server\n+ * @key intermittent\n+ * @summary IPv6 support for Windows XP and 2003 server.\n+ *          This test requires binding to the wildcard address and as such\n+ *          may fail intermittently on some platforms.\n@@ -31,1 +34,1 @@\n- * @run main UdpTest\n+ * @run main UdpTest -d\n@@ -91,0 +94,1 @@\n+        System.out.println(\"Test1 starting\");\n@@ -129,0 +133,1 @@\n+        System.out.println(\"Test2 starting\");\n@@ -179,0 +184,1 @@\n+        System.out.println(\"Test3 starting\");\n@@ -190,0 +196,1 @@\n+        System.out.println(\"Test4 starting\");\n","filename":"test\/jdk\/java\/net\/ipv6tests\/UdpTest.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,1 +108,2 @@\n-        FtpServer server = new FtpServer(0);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        FtpServer server = new FtpServer(loopback, 0);\n@@ -113,2 +114,2 @@\n-        URL url = new URL(\"ftp:\/\/user:passwd@localhost:\" + port + \"\/foo.txt\");\n-        URLConnection con = url.openConnection();\n+        URL url = new URL(\"ftp:\/\/user:passwd@\" + server.getAuthority() + \"\/foo.txt\");\n+        URLConnection con = url.openConnection(Proxy.NO_PROXY);\n","filename":"test\/jdk\/sun\/net\/ftp\/B6427768.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -241,3 +241,0 @@\n-            if (pasv == null)\n-                pasv = new ServerSocket(0);\n-            int port = pasv.getLocalPort();\n@@ -249,0 +246,3 @@\n+            if (pasv == null)\n+                pasv = new ServerSocket(0, 0, rAddress);\n+            int port = pasv.getLocalPort();\n@@ -269,1 +269,1 @@\n-                pasv = new ServerSocket(0);\n+                pasv = new ServerSocket(0, 0, parent.getInetAddress());\n","filename":"test\/jdk\/sun\/net\/www\/ftptest\/FtpCommandHandler.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -113,0 +113,4 @@\n+    public InetAddress getInetAddress() {\n+        return listener.getInetAddress();\n+    }\n+\n@@ -114,1 +118,1 @@\n-        InetAddress address = listener.getInetAddress();\n+        InetAddress address = getInetAddress();\n","filename":"test\/jdk\/sun\/net\/www\/ftptest\/FtpServer.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -39,0 +40,1 @@\n+import java.net.InetAddress;\n@@ -45,0 +47,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -69,1 +72,6 @@\n-            URL url = new URL(\"http:\/\/localhost:\" + address.getPort() + \"\/test\/\");\n+            URL url = URIBuilder.newBuilder()\n+                      .scheme(\"http\")\n+                      .host(address.getAddress())\n+                      .port(address.getPort())\n+                      .path(\"\/test\/\")\n+                      .toURLUnchecked();\n@@ -96,1 +104,2 @@\n-        httpServer = com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0), 0);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        httpServer = com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(loopback, 0), 0);\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/RetryPost.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+ * @library \/test\/lib\n@@ -38,0 +39,1 @@\n+import java.net.InetAddress;\n@@ -43,0 +45,1 @@\n+import javax.net.ssl.SSLHandshakeException;\n@@ -47,0 +50,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -94,0 +98,1 @@\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n@@ -97,1 +102,1 @@\n-            (SSLServerSocket) sslssf.createServerSocket(serverPort);\n+            (SSLServerSocket) sslssf.createServerSocket(serverPort, 0, loopback);\n@@ -140,1 +145,8 @@\n-        URL url = new URL(\"https:\/\/localhost:\" + serverPort +\"\/\");\n+        URL url = URIBuilder.newBuilder()\n+                  .scheme(\"https\")\n+                  .loopback()\n+                  .port(serverPort)\n+                  .path(\"\/\")\n+                  .toURL();\n+\n+        System.out.println(\"Client ready to connect to: \" + url);\n@@ -143,1 +155,1 @@\n-        InputStream in = url.openConnection().getInputStream();\n+        InputStream in = url.openConnection(java.net.Proxy.NO_PROXY).getInputStream();\n@@ -186,0 +198,4 @@\n+    private boolean sslConnectionFailed() {\n+        return clientException instanceof SSLHandshakeException;\n+    }\n+\n@@ -232,1 +248,5 @@\n-                serverThread.join();\n+                \/\/ don't join the server thread if the\n+                \/\/ client failed to connect\n+                if (!sslConnectionFailed()) {\n+                    serverThread.join();\n+                }\n@@ -262,1 +282,1 @@\n-            local.initCause(remote);\n+            local.addSuppressed(remote);\n@@ -277,1 +297,1 @@\n-            if (exception != startException) {\n+            if (exception != startException && startException != null) {\n@@ -326,1 +346,1 @@\n-                        System.err.println(\"Client died...\");\n+                        System.err.println(\"Client died: \" + e);\n@@ -336,0 +356,1 @@\n+                System.err.println(\"Client died: \" + e);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/CookieHttpsClientTest.java","additions":29,"deletions":8,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+ * @library \/test\/lib\n@@ -41,0 +42,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -96,0 +98,1 @@\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n@@ -99,1 +102,1 @@\n-            (SSLServerSocket) sslssf.createServerSocket(serverPort);\n+            (SSLServerSocket) sslssf.createServerSocket(serverPort, 0, loopback);\n@@ -166,1 +169,5 @@\n-                URL url = new URL(\"https:\/\/localhost:\" + serverPort);\n+                URL url = URIBuilder.newBuilder()\n+                          .scheme(\"https\")\n+                          .loopback()\n+                          .port(serverPort)\n+                          .toURL();\n@@ -187,1 +194,5 @@\n-                URL url = new URL(\"https:\/\/localhost:\" + serverPort);\n+                URL url = URIBuilder.newBuilder()\n+                          .scheme(\"https\")\n+                          .loopback()\n+                          .port(serverPort)\n+                          .toURL();\n@@ -242,0 +253,4 @@\n+    private boolean sslConnectionFailed() {\n+        return clientException instanceof SSLHandshakeException;\n+    }\n+\n@@ -285,1 +300,3 @@\n-            serverThread.join();\n+            if (!sslConnectionFailed()) {\n+                serverThread.join();\n+            }\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/ReadTimeout.java","additions":22,"deletions":5,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -38,0 +39,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -98,0 +100,1 @@\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n@@ -101,1 +104,1 @@\n-            (SSLServerSocket) sslssf.createServerSocket(serverPort);\n+            (SSLServerSocket) sslssf.createServerSocket(serverPort, 0, loopback);\n@@ -157,1 +160,5 @@\n-            URL url = new URL(\"https:\/\/localhost:\"+serverPort);\n+            URL url = URIBuilder.newBuilder()\n+                      .scheme(\"https\")\n+                      .loopback()\n+                      .port(serverPort)\n+                      .toURL();\n@@ -193,0 +200,4 @@\n+    private boolean sslConnectionFailed() {\n+        return clientException instanceof SSLHandshakeException;\n+    }\n+\n@@ -236,1 +247,3 @@\n-            serverThread.join();\n+            if (!sslConnectionFailed()) {\n+                serverThread.join();\n+            }\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/Redirect.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"}]}