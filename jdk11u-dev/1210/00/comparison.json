{"files":[{"patch":"@@ -4267,2 +4267,1 @@\n-            endPosMap.putAtIndex(tree, errorEndPos > endpos ? errorEndPos : endpos,\n-                                 endPosMap.lookup(tree));\n+            endPosMap.put(tree, errorEndPos > endpos ? errorEndPos : endpos);\n@@ -4282,1 +4281,1 @@\n-            int value = endPosMap.getFromIndex(endPosMap.lookup(tree));\n+            int value = endPosMap.get(tree);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-    public int hash(Object key) {\n+    protected int hash(Object key) {\n@@ -84,2 +84,1 @@\n-     * @param key The key to whose value you want to find.\n-     * @param hash The hash code of this key.\n+     * @param key The key to whose index you want to find.\n@@ -89,1 +88,1 @@\n-    public int lookup(Object key, int hash) {\n+    protected int lookup(Object key) {\n@@ -91,0 +90,1 @@\n+        int hash = hash(key);\n@@ -106,12 +106,1 @@\n-     * Lookup a given key's value in the hash table.\n-     *\n-     * @param key The key whose value you want to find.\n-     * @return Either the index of the key's value, or an index pointing to\n-     * unoccupied space.\n-     *\/\n-    public int lookup(Object key) {\n-        return lookup(key, hash(key));\n-    }\n-\n-    \/**\n-     * Return the value stored at the specified index in the table.\n+     * Return the value to which the specified key is mapped.\n@@ -119,3 +108,3 @@\n-     * @param index The index to inspect, as returned from {@link #lookup}\n-     * @return A non-negative integer if the index contains a non-null\n-     *         value, or -1 if it does.\n+     * @param key The key to whose value you want to find.\n+     * @return A non-negative integer if the value is found.\n+     *         Otherwise, it is -1.\n@@ -123,1 +112,2 @@\n-    public int getFromIndex(int index) {\n+    public int get(Object key) {\n+        int index = lookup(key);\n@@ -133,2 +123,0 @@\n-     * @param index the index at which to place this binding, as returned\n-     *              from {@link #lookup}.\n@@ -138,1 +126,2 @@\n-    public int putAtIndex(Object key, int value, int index) {\n+    public int put(Object key, int value) {\n+        int index = lookup(key);\n@@ -155,0 +144,7 @@\n+    \/**\n+     * Remove the mapping(key and value) of the specified key.\n+     *\n+     * @param key the key to whose value you want to remove.\n+     * @return the removed value associated with the specified key,\n+     *         or -1 if there was no mapping for the specified key.\n+     *\/\n@@ -172,8 +168,4 @@\n-        int oldCapacity = oldObjsTable.length;\n-        int newCapacity = oldCapacity << 1;\n-        Object[] newObjTable = new Object[newCapacity];\n-        int[] newIntTable = new int[newCapacity];\n-        int newMask = newCapacity - 1;\n-        objs = newObjTable;\n-        ints = newIntTable;\n-        mask = newMask;\n+        int newCapacity = oldObjsTable.length << 1;\n+        objs = new Object[newCapacity];\n+        ints = new int[newCapacity];\n+        mask = newCapacity - 1;\n@@ -185,1 +177,1 @@\n-                putAtIndex(key, oldIntsTable[i], lookup(key, hash(key)));\n+                put(key, oldIntsTable[i]);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/IntHashTable.java","additions":25,"deletions":33,"binary":false,"changes":58,"status":"modified"}]}