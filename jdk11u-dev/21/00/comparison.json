{"files":[{"patch":"@@ -324,1 +324,0 @@\n-  static Monitor* _transition_block_lock;\n@@ -342,1 +341,1 @@\n-  static Monitor* transition_block() { return _transition_block_lock; }\n+  static Monitor* transition_block() { return JfrThreadSampler_lock; }\n@@ -346,2 +345,0 @@\n-Monitor* JfrThreadSampler::_transition_block_lock = new Monitor(Mutex::leaf, \"Trace block\", true, Monitor::_safepoint_check_never);\n-\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampler.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-\n+Mutex*   NMethodSweeperStats_lock     = NULL;\n@@ -142,0 +142,1 @@\n+Monitor* JfrThreadSampler_lock        = NULL;\n@@ -151,0 +152,3 @@\n+Monitor* ThreadsSMRDelete_lock       = NULL;\n+Mutex*   SharedDecoder_lock           = NULL;\n+Mutex*   DCmdFactory_lock             = NULL;\n@@ -244,1 +248,1 @@\n-  def(SharedDictionary_lock        , PaddedMutex,   leaf,        true,  Monitor::_safepoint_check_always);     \/\/ lookups done by VM thread\n+  def(SharedDictionary_lock        , PaddedMutex  , leaf,        true,  Monitor::_safepoint_check_always);     \/\/ lookups done by VM thread\n@@ -326,0 +330,1 @@\n+  def(JfrThreadSampler_lock        , PaddedMonitor, leaf,        true,  Monitor::_safepoint_check_never);\n@@ -334,0 +339,5 @@\n+\n+  def(NMethodSweeperStats_lock     , PaddedMutex  , special,     true,  Monitor::_safepoint_check_sometimes);\n+  def(ThreadsSMRDelete_lock        , PaddedMonitor, special,     false, Monitor::_safepoint_check_never);\n+  def(SharedDecoder_lock           , PaddedMutex  , native,      false, Monitor::_safepoint_check_never);\n+  def(DCmdFactory_lock             , PaddedMutex  , leaf,        true,  Monitor::_safepoint_check_never);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -112,0 +112,1 @@\n+extern Mutex*   NMethodSweeperStats_lock;        \/\/ a lock used to serialize access to sweeper statistics\n@@ -137,0 +138,3 @@\n+extern Monitor* ThreadsSMRDelete_lock;           \/\/ Used by ThreadsSMRSupport to take pressure off the Threads_lock\n+extern Mutex*   SharedDecoder_lock;              \/\/ serializes access to the decoder during normal (not error reporting) use\n+extern Mutex*   DCmdFactory_lock;                \/\/ serialize access to DCmdFactory information\n@@ -142,0 +146,1 @@\n+extern Monitor* JfrThreadSampler_lock;           \/\/ used to suspend\/resume JFR thread sampler\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -163,2 +163,0 @@\n-Monitor* NMethodSweeper::_stat_lock = new Monitor(Mutex::special, \"Sweeper::Statistics\", true, Monitor::_safepoint_check_sometimes);\n-\n@@ -508,1 +506,1 @@\n-    MutexLockerEx mu(_stat_lock, Mutex::_no_safepoint_check_flag);\n+    MutexLockerEx mu(NMethodSweeperStats_lock, Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/runtime\/sweeper.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -91,2 +91,0 @@\n-  static Monitor*  _stat_lock;\n-\n","filename":"src\/hotspot\/share\/runtime\/sweeper.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,4 +41,0 @@\n-Monitor*              ThreadsSMRSupport::_delete_lock =\n-                          new Monitor(Monitor::special, \"Thread_SMR_delete_lock\",\n-                                      false \/* allow_vm_block *\/,\n-                                      Monitor::_safepoint_check_never);\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -94,1 +94,2 @@\n-  static Monitor*              _delete_lock;\n+  static Monitor* delete_lock() { return ThreadsSMRDelete_lock; }\n+\n@@ -124,1 +125,0 @@\n-  static Monitor* delete_lock() { return _delete_lock; }\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -494,1 +494,0 @@\n-Mutex* DCmdFactory::_dcmdFactory_lock = new Mutex(Mutex::leaf, \"DCmdFactory\", true, Monitor::_safepoint_check_never);\n@@ -498,1 +497,1 @@\n-  MutexLockerEx ml(_dcmdFactory_lock, Mutex::_no_safepoint_check_flag);\n+  MutexLockerEx ml(DCmdFactory_lock, Mutex::_no_safepoint_check_flag);\n@@ -515,1 +514,1 @@\n-  MutexLockerEx ml(_dcmdFactory_lock, Mutex::_no_safepoint_check_flag);\n+  MutexLockerEx ml(DCmdFactory_lock, Mutex::_no_safepoint_check_flag);\n@@ -540,1 +539,1 @@\n-  MutexLockerEx ml(_dcmdFactory_lock, Mutex::_no_safepoint_check_flag);\n+  MutexLockerEx ml(DCmdFactory_lock, Mutex::_no_safepoint_check_flag);\n@@ -553,1 +552,1 @@\n-  MutexLockerEx ml(_dcmdFactory_lock, Mutex::_no_safepoint_check_flag);\n+  MutexLockerEx ml(DCmdFactory_lock, Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/services\/diagnosticFramework.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -347,1 +347,0 @@\n-  static Mutex*       _dcmdFactory_lock;\n","filename":"src\/hotspot\/share\/services\/diagnosticFramework.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,4 +44,0 @@\n-Mutex*            Decoder::_shared_decoder_lock = new Mutex(Mutex::native,\n-                                \"SharedDecoderLock\",\n-                                false,\n-                                Monitor::_safepoint_check_never);\n@@ -50,2 +46,1 @@\n-  assert(_shared_decoder_lock != NULL && _shared_decoder_lock->owned_by_self(),\n-    \"Require DecoderLock to enter\");\n+  assert(shared_decoder_lock()->owned_by_self(), \"Require DecoderLock to enter\");\n@@ -92,1 +87,2 @@\n-                NULL : Decoder::shared_decoder_lock(), true) {\n+                NULL : Decoder::shared_decoder_lock(),\n+                Mutex::_no_safepoint_check_flag) {\n@@ -99,2 +95,2 @@\n-  assert(_shared_decoder_lock != NULL, \"Just check\");\n-  return _shared_decoder_lock;\n+  assert(SharedDecoder_lock != NULL, \"Just check\");\n+  return SharedDecoder_lock;\n@@ -104,1 +100,0 @@\n-  assert(_shared_decoder_lock != NULL, \"Just check\");\n@@ -106,1 +101,2 @@\n-  MutexLockerEx locker(error_handling_thread ? NULL : _shared_decoder_lock, true);\n+  MutexLockerEx locker(error_handling_thread ? NULL : shared_decoder_lock(),\n+                       Mutex::_no_safepoint_check_flag);\n@@ -115,1 +111,0 @@\n-  assert(_shared_decoder_lock != NULL, \"Just check\");\n@@ -117,1 +112,2 @@\n-  MutexLockerEx locker(error_handling_thread ? NULL : _shared_decoder_lock, true);\n+  MutexLockerEx locker(error_handling_thread ? NULL : shared_decoder_lock(),\n+                       Mutex::_no_safepoint_check_flag);\n@@ -127,1 +123,0 @@\n-  assert(_shared_decoder_lock != NULL, \"Just check\");\n@@ -129,1 +124,2 @@\n-  MutexLockerEx locker(error_handling_thread ? NULL : _shared_decoder_lock, true);\n+  MutexLockerEx locker(error_handling_thread ? NULL : shared_decoder_lock(),\n+                       Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/utilities\/decoder.cpp","additions":12,"deletions":16,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -134,1 +134,0 @@\n-  static Mutex*               _shared_decoder_lock;\n","filename":"src\/hotspot\/share\/utilities\/decoder.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}