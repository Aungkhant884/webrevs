{"files":[{"patch":"@@ -125,0 +125,26 @@\n+void CgroupSubsystemFactory::set_controller_paths(CgroupInfo* cg_infos,\n+                                                  int controller,\n+                                                  const char* name,\n+                                                  char* mount_path,\n+                                                  char* root_path) {\n+  if (cg_infos[controller]._mount_path != NULL) {\n+    \/\/ On some systems duplicate controllers get mounted in addition to\n+    \/\/ the main cgroup controllers most likely under \/sys\/fs\/cgroup. In that\n+    \/\/ case pick the one under \/sys\/fs\/cgroup and discard others.\n+    if (strstr(cg_infos[controller]._mount_path, \"\/sys\/fs\/cgroup\") != cg_infos[controller]._mount_path) {\n+      log_debug(os, container)(\"Duplicate %s controllers detected. Picking %s, skipping %s.\",\n+                               name, mount_path, cg_infos[controller]._mount_path);\n+      os::free(cg_infos[controller]._mount_path);\n+      os::free(cg_infos[controller]._root_mount_path);\n+      cg_infos[controller]._mount_path = os::strdup(mount_path);\n+      cg_infos[controller]._root_mount_path = os::strdup(root_path);\n+    } else {\n+      log_debug(os, container)(\"Duplicate %s controllers detected. Picking %s, skipping %s.\",\n+                               name, cg_infos[controller]._mount_path, mount_path);\n+    }\n+  } else {\n+    cg_infos[controller]._mount_path = os::strdup(mount_path);\n+    cg_infos[controller]._root_mount_path = os::strdup(root_path);\n+  }\n+}\n+\n@@ -290,1 +316,0 @@\n-    char tmp_mount_point[MAXPATHLEN+1];\n@@ -301,2 +326,1 @@\n-    \/\/\n-    if (is_cgroupsV2 && sscanf(p, \"%*d %*d %*d:%*d %*s %s %*[^-]- %s %*s %*s\", tmp_mount_point, tmp_fs_type) == 2) {\n+    if (is_cgroupsV2 && sscanf(p, \"%*d %*d %*d:%*d %s %s %*[^-]- %s %*s %*s\", tmproot, tmpmount, tmp_fs_type) == 3) {\n@@ -304,1 +328,1 @@\n-      if (!cgroupv2_mount_point_found && strcmp(\"cgroup2\", tmp_fs_type) == 0) {\n+      if (strcmp(\"cgroup2\", tmp_fs_type) == 0) {\n@@ -308,2 +332,1 @@\n-          assert(cg_infos[i]._mount_path == NULL, \"_mount_path memory stomping\");\n-          cg_infos[i]._mount_path = os::strdup(tmp_mount_point);\n+          set_controller_paths(cg_infos, i, \"(cg2, unified)\", tmpmount, tmproot);\n@@ -334,3 +357,1 @@\n-          assert(cg_infos[MEMORY_IDX]._mount_path == NULL, \"stomping of _mount_path\");\n-          cg_infos[MEMORY_IDX]._mount_path = os::strdup(tmpmount);\n-          cg_infos[MEMORY_IDX]._root_mount_path = os::strdup(tmproot);\n+          set_controller_paths(cg_infos, MEMORY_IDX, token, tmpmount, tmproot);\n@@ -340,17 +361,1 @@\n-          if (cg_infos[CPUSET_IDX]._mount_path != NULL) {\n-            \/\/ On some systems duplicate cpuset controllers get mounted in addition to\n-            \/\/ the main cgroup controllers most likely under \/sys\/fs\/cgroup. In that\n-            \/\/ case pick the one under \/sys\/fs\/cgroup and discard others.\n-            if (strstr(cg_infos[CPUSET_IDX]._mount_path, \"\/sys\/fs\/cgroup\") != cg_infos[CPUSET_IDX]._mount_path) {\n-              log_warning(os, container)(\"Duplicate cpuset controllers detected. Picking %s, skipping %s.\",\n-                                         tmpmount, cg_infos[CPUSET_IDX]._mount_path);\n-              os::free(cg_infos[CPUSET_IDX]._mount_path);\n-              cg_infos[CPUSET_IDX]._mount_path = os::strdup(tmpmount);\n-            } else {\n-              log_warning(os, container)(\"Duplicate cpuset controllers detected. Picking %s, skipping %s.\",\n-                                         cg_infos[CPUSET_IDX]._mount_path, tmpmount);\n-            }\n-          } else {\n-            cg_infos[CPUSET_IDX]._mount_path = os::strdup(tmpmount);\n-          }\n-          cg_infos[CPUSET_IDX]._root_mount_path = os::strdup(tmproot);\n+          set_controller_paths(cg_infos, CPUSET_IDX, token, tmpmount, tmproot);\n@@ -360,3 +365,1 @@\n-          assert(cg_infos[CPU_IDX]._mount_path == NULL, \"stomping of _mount_path\");\n-          cg_infos[CPU_IDX]._mount_path = os::strdup(tmpmount);\n-          cg_infos[CPU_IDX]._root_mount_path = os::strdup(tmproot);\n+          set_controller_paths(cg_infos, CPU_IDX, token, tmpmount, tmproot);\n@@ -366,3 +369,1 @@\n-          assert(cg_infos[CPUACCT_IDX]._mount_path == NULL, \"stomping of _mount_path\");\n-          cg_infos[CPUACCT_IDX]._mount_path = os::strdup(tmpmount);\n-          cg_infos[CPUACCT_IDX]._root_mount_path = os::strdup(tmproot);\n+          set_controller_paths(cg_infos, CPUACCT_IDX, token, tmpmount, tmproot);\n@@ -372,3 +373,1 @@\n-          assert(cg_infos[PIDS_IDX]._mount_path == NULL, \"stomping of _mount_path\");\n-          cg_infos[PIDS_IDX]._mount_path = os::strdup(tmpmount);\n-          cg_infos[PIDS_IDX]._root_mount_path = os::strdup(tmproot);\n+          set_controller_paths(cg_infos, PIDS_IDX, token, tmpmount, tmproot);\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.cpp","additions":34,"deletions":35,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -311,0 +311,5 @@\n+    static void set_controller_paths(CgroupInfo* cg_infos,\n+                                     int controller,\n+                                     const char* name,\n+                                     char* mount_path,\n+                                     char* root_path);\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -323,0 +323,1 @@\n+                        case CPUSET_CTRL:\n@@ -326,21 +327,1 @@\n-                            assert info.getMountPoint() == null;\n-                            assert info.getMountRoot() == null;\n-                            info.setMountPoint(mountPath);\n-                            info.setMountRoot(mountRoot);\n-                            cgroupv1ControllerFound = true;\n-                            break;\n-                        }\n-                        case CPUSET_CTRL: {\n-                            CgroupInfo info = infos.get(controllerName);\n-                            if (info.getMountPoint() != null) {\n-                                \/\/ On some systems duplicate cpuset controllers get mounted in addition to\n-                                \/\/ the main cgroup controllers most likely under \/sys\/fs\/cgroup. In that\n-                                \/\/ case pick the one under \/sys\/fs\/cgroup and discard others.\n-                                if (!info.getMountPoint().startsWith(\"\/sys\/fs\/cgroup\")) {\n-                                    info.setMountPoint(mountPath);\n-                                    info.setMountRoot(mountRoot);\n-                                }\n-                            } else {\n-                                info.setMountPoint(mountPath);\n-                                info.setMountRoot(mountRoot);\n-                            }\n+                            setMountPoints(info, mountPath, mountRoot);\n@@ -360,4 +341,1 @@\n-                        assert info.getMountPoint() == null;\n-                        assert info.getMountRoot() == null;\n-                        info.setMountPoint(mountPath);\n-                        info.setMountRoot(mountRoot);\n+                        setMountPoints(info, mountPath, mountRoot);\n@@ -372,0 +350,16 @@\n+    private static void setMountPoints(CgroupInfo info, String mountPath, String mountRoot) {\n+        if (info.getMountPoint() != null) {\n+            \/\/ On some systems duplicate controllers get mounted in addition to\n+            \/\/ the main cgroup controllers (which are under \/sys\/fs\/cgroup). In that\n+            \/\/ case pick the main one and discard others as the limits\n+            \/\/ are associated with the ones in \/sys\/fs\/cgroup.\n+            if (!info.getMountPoint().startsWith(\"\/sys\/fs\/cgroup\")) {\n+                info.setMountPoint(mountPath);\n+                info.setMountRoot(mountRoot);\n+            }\n+        } else {\n+            info.setMountPoint(mountPath);\n+            info.setMountRoot(mountRoot);\n+        }\n+    }\n+\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupSubsystemFactory.java","additions":19,"deletions":25,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -66,0 +66,2 @@\n+    private Path cgroupv2MntInfoDouble;\n+    private Path cgroupv2MntInfoDouble2;\n@@ -71,0 +73,6 @@\n+    private Path cgroupv1MntInfoDoubleMemory;\n+    private Path cgroupv1MntInfoDoubleMemory2;\n+    private Path cgroupv1MntInfoDoubleCpu;\n+    private Path cgroupv1MntInfoDoubleCpu2;\n+    private Path cgroupv1MntInfoDoublePids;\n+    private Path cgroupv1MntInfoDoublePids2;\n@@ -164,0 +172,9 @@\n+    private String mntInfoCgroupv1MoreMemoryLine = \"1100 1098 0:28 \/ \/memory rw,nosuid,nodev,noexec,relatime master:6 - cgroup cgroup rw,memory\\n\";\n+    private String mntInfoCgroupv1DoubleMemory = mntInfoCgroupv1MoreMemoryLine + mntInfoHybrid;\n+    private String mntInfoCgroupv1DoubleMemory2 = mntInfoHybrid + mntInfoCgroupv1MoreMemoryLine;\n+    private String mntInfoCgroupv1DoubleCpuLine = \"1101 1098 0:29 \/ \/cpu,cpuacct rw,nosuid,nodev,noexec,relatime master:7 - cgroup cgroup rw,cpu,cpuacct\\n\";\n+    private String mntInfoCgroupv1DoubleCpu = mntInfoCgroupv1DoubleCpuLine + mntInfoHybrid;\n+    private String mntInfoCgroupv1DoubleCpu2 = mntInfoHybrid + mntInfoCgroupv1DoubleCpuLine;\n+    private String mntInfoCgroupv1DoublePidsLine = \"1107 1098 0:35 \/ \/pids rw,nosuid,nodev,noexec,relatime master:13 - cgroup cgroup rw,pids\\n\";\n+    private String mntInfoCgroupv1DoublePids = mntInfoCgroupv1DoublePidsLine + mntInfoHybrid;\n+    private String mntInfoCgroupv1DoublePids2 = mntInfoHybrid + mntInfoCgroupv1DoublePidsLine;\n@@ -179,1 +196,5 @@\n-            \"28 21 0:25 \/ \/sys\/fs\/cgroup rw,nosuid,nodev,noexec,relatime shared:4 - cgroup2 none rw,seclabel,nsdelegate\";\n+            \"28 21 0:25 \/ \/sys\/fs\/cgroup rw,nosuid,nodev,noexec,relatime shared:4 - cgroup2 none rw,seclabel,nsdelegate\\n\";\n+    private String mntInfoCgroupsV2MoreLine =\n+            \"240 232 0:24 \/..\/.. \/cgroup-in ro,relatime - cgroup2 cgroup2 rw,nsdelegate\\n\";\n+    private String mntInfoCgroupsV2Double = mntInfoCgroupsV2MoreLine + mntInfoCgroupsV2Only;\n+    private String mntInfoCgroupsV2Double2 = mntInfoCgroupsV2Only + mntInfoCgroupsV2MoreLine;\n@@ -221,0 +242,6 @@\n+            cgroupv2MntInfoDouble = Paths.get(existingDirectory.toString(), \"mountinfo_cgroupv2_double\");\n+            Files.writeString(cgroupv2MntInfoDouble, mntInfoCgroupsV2Double);\n+\n+            cgroupv2MntInfoDouble2 = Paths.get(existingDirectory.toString(), \"mountinfo_cgroupv2_double2\");\n+            Files.writeString(cgroupv2MntInfoDouble2, mntInfoCgroupsV2Double2);\n+\n@@ -248,0 +275,18 @@\n+            cgroupv1MntInfoDoubleMemory = Paths.get(existingDirectory.toString(), \"mnt_info_cgroupv1_double_memory\");\n+            Files.writeString(cgroupv1MntInfoDoubleMemory, mntInfoCgroupv1DoubleMemory);\n+\n+            cgroupv1MntInfoDoubleMemory2 = Paths.get(existingDirectory.toString(), \"mnt_info_cgroupv1_double_memory2\");\n+            Files.writeString(cgroupv1MntInfoDoubleMemory2, mntInfoCgroupv1DoubleMemory2);\n+\n+            cgroupv1MntInfoDoubleCpu = Paths.get(existingDirectory.toString(), \"mnt_info_cgroupv1_double_cpu\");\n+            Files.writeString(cgroupv1MntInfoDoubleCpu, mntInfoCgroupv1DoubleCpu);\n+\n+            cgroupv1MntInfoDoubleCpu2 = Paths.get(existingDirectory.toString(), \"mnt_info_cgroupv1_double_cpu2\");\n+            Files.writeString(cgroupv1MntInfoDoubleCpu2, mntInfoCgroupv1DoubleCpu2);\n+\n+            cgroupv1MntInfoDoublePids = Paths.get(existingDirectory.toString(), \"mnt_info_cgroupv1_double_pids\");\n+            Files.writeString(cgroupv1MntInfoDoublePids, mntInfoCgroupv1DoublePids);\n+\n+            cgroupv1MntInfoDoublePids2 = Paths.get(existingDirectory.toString(), \"mnt_info_cgroupv1_double_pids2\");\n+            Files.writeString(cgroupv1MntInfoDoublePids2, mntInfoCgroupv1DoublePids2);\n+\n@@ -295,1 +340,1 @@\n-    public void testCgroupv1MultipleCpusetMounts(WhiteBox wb, Path mountInfo) {\n+    public void testCgroupv1MultipleControllerMounts(WhiteBox wb, Path mountInfo) {\n@@ -300,1 +345,1 @@\n-        Asserts.assertEQ(CGROUPS_V1, retval, \"Multiple cpuset controllers, but only one in \/sys\/fs\/cgroup\");\n+        Asserts.assertEQ(CGROUPS_V1, retval, \"Multiple controllers, but only one in \/sys\/fs\/cgroup\");\n@@ -302,1 +347,1 @@\n-        System.out.println(\"testCgroupv1MultipleCpusetMounts PASSED!\");\n+        System.out.println(\"testCgroupv1MultipleControllerMounts PASSED!\");\n@@ -345,1 +390,1 @@\n-    public void testCgroupv2(WhiteBox wb) {\n+    public void testCgroupv2(WhiteBox wb, Path mountInfo) {\n@@ -348,1 +393,1 @@\n-        String procSelfMountinfo = cgroupv2MntInfoZeroHierarchy.toString();\n+        String procSelfMountinfo = mountInfo.toString();\n@@ -392,1 +437,3 @@\n-            test.testCgroupv2(wb);\n+            test.testCgroupv2(wb, test.cgroupv2MntInfoZeroHierarchy);\n+            test.testCgroupv2(wb, test.cgroupv2MntInfoDouble);\n+            test.testCgroupv2(wb, test.cgroupv2MntInfoDouble2);\n@@ -397,2 +444,8 @@\n-            test.testCgroupv1MultipleCpusetMounts(wb, test.cgroupv1MntInfoDoubleCpuset);\n-            test.testCgroupv1MultipleCpusetMounts(wb, test.cgroupv1MntInfoDoubleCpuset2);\n+            test.testCgroupv1MultipleControllerMounts(wb, test.cgroupv1MntInfoDoubleCpuset);\n+            test.testCgroupv1MultipleControllerMounts(wb, test.cgroupv1MntInfoDoubleCpuset2);\n+            test.testCgroupv1MultipleControllerMounts(wb, test.cgroupv1MntInfoDoubleMemory);\n+            test.testCgroupv1MultipleControllerMounts(wb, test.cgroupv1MntInfoDoubleMemory2);\n+            test.testCgroupv1MultipleControllerMounts(wb, test.cgroupv1MntInfoDoubleCpu);\n+            test.testCgroupv1MultipleControllerMounts(wb, test.cgroupv1MntInfoDoubleCpu2);\n+            test.testCgroupv1MultipleControllerMounts(wb, test.cgroupv1MntInfoDoublePids);\n+            test.testCgroupv1MultipleControllerMounts(wb, test.cgroupv1MntInfoDoublePids2);\n","filename":"test\/hotspot\/jtreg\/containers\/cgroup\/CgroupSubsystemFactory.java","additions":62,"deletions":9,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+            testJavaVersionWithCgMounts();\n@@ -84,0 +85,13 @@\n+\n+\n+    private static void testJavaVersionWithCgMounts() throws Exception {\n+        DockerRunOptions opts =\n+            new DockerRunOptions(imageNameAndTag, \"\/jdk\/bin\/java\", \"-version\")\n+            .addDockerOpts(\"-v\", \"\/sys\/fs\/cgroup:\/cgroups-in:ro\");\n+\n+        \/\/ Duplicated cgroup mounts should be handled by the container detection\n+        \/\/ code and should not cause any error\/warning output.\n+        DockerTestUtils.dockerRunJava(opts)\n+            .shouldHaveExitValue(0)\n+            .shouldNotMatch(\"\\\\[os,container *\\\\]\");\n+    }\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/DockerBasicTest.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -78,4 +78,5 @@\n-            testCpuQuotaAndPeriod(50*1000, 100*1000);\n-            testCpuQuotaAndPeriod(100*1000, 100*1000);\n-            testCpuQuotaAndPeriod(150*1000, 100*1000);\n-            testCpuQuotaAndPeriod(400*1000, 100*1000);\n+            testCpuQuotaAndPeriod(50*1000, 100*1000, false);\n+            testCpuQuotaAndPeriod(100*1000, 100*1000, false);\n+            testCpuQuotaAndPeriod(150*1000, 100*1000, false);\n+            testCpuQuotaAndPeriod(400*1000, 100*1000, false);\n+            testCpuQuotaAndPeriod(50*1000, 100*1000, true \/* additional cgroup mount *\/);\n@@ -177,1 +178,1 @@\n-    private static void testCpuQuotaAndPeriod(int quota, int period)\n+    private static void testCpuQuotaAndPeriod(int quota, int period, boolean addCgmounts)\n@@ -191,0 +192,4 @@\n+        if (addCgmounts) {\n+            opts = opts.addDockerOpts(\"--volume\", \"\/sys\/fs\/cgroup:\/cgroups-in:ro\");\n+        }\n+\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestCPUAwareness.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -66,4 +66,5 @@\n-            testMemoryLimit(\"100m\", \"104857600\");\n-            testMemoryLimit(\"500m\", \"524288000\");\n-            testMemoryLimit(\"1g\", \"1073741824\");\n-            testMemoryLimit(\"4g\", \"4294967296\");\n+            testMemoryLimit(\"100m\", \"104857600\", false);\n+            testMemoryLimit(\"500m\", \"524288000\", false);\n+            testMemoryLimit(\"1g\", \"1073741824\", false);\n+            testMemoryLimit(\"4g\", \"4294967296\", false);\n+            testMemoryLimit(\"100m\", \"104857600\", true \/* additional cgroup mount *\/);\n@@ -89,0 +90,5 @@\n+            testOperatingSystemMXBeanAwareness(\n+                \"100M\", Integer.toString(((int) Math.pow(2, 20)) * 100),\n+                \"200M\", Integer.toString(((int) Math.pow(2, 20)) * (200 - 100)),\n+                true \/* additional cgroup fs mounts *\/\n+            );\n@@ -101,1 +107,1 @@\n-    private static void testMemoryLimit(String valueToSet, String expectedTraceValue)\n+    private static void testMemoryLimit(String valueToSet, String expectedTraceValue, boolean addCgmounts)\n@@ -109,0 +115,4 @@\n+        if (addCgmounts) {\n+            opts = opts.addDockerOpts(\"--volume\", \"\/sys\/fs\/cgroup:\/cgroups-in:ro\");\n+        }\n+\n@@ -169,0 +179,6 @@\n+        testOperatingSystemMXBeanAwareness(memoryAllocation, expectedMemory, swapAllocation, expectedSwap, false);\n+    }\n+\n+    private static void testOperatingSystemMXBeanAwareness(String memoryAllocation, String expectedMemory,\n+            String swapAllocation, String expectedSwap, boolean addCgroupMounts) throws Exception {\n+\n@@ -180,0 +196,4 @@\n+        if (addCgroupMounts) {\n+            \/\/ Extra cgroup mount should be ignored by product code\n+            opts.addDockerOpts(\"--volume\", \"\/sys\/fs\/cgroup:\/cgroup-in:ro\");\n+        }\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n- * @bug 8287107 8287073\n+ * @bug 8287107 8287073 8293540\n@@ -75,2 +75,2 @@\n-    private Path cgroupv1MntInfoDoubleCpusets;\n-    private Path cgroupv1MntInfoDoubleCpusets2;\n+    private Path cgroupv1MntInfoDoubleControllers;\n+    private Path cgroupv1MntInfoDoubleControllers2;\n@@ -197,3 +197,7 @@\n-    private String mntInfoCgroupv1MoreCpusetLine = \"121 32 0:37 \/ \/cpuset rw,relatime shared:69 - cgroup none rw,cpuset\\n\";\n-    private String mntInfoCgroupsV1DoubleCpuset = mntInfoHybrid + mntInfoCgroupv1MoreCpusetLine;\n-    private String mntInfoCgroupsV1DoubleCpuset2 = mntInfoCgroupv1MoreCpusetLine + mntInfoHybrid;\n+    private String mntInfoCgroupv1MoreControllers = \"121 32 0:37 \/ \/cpuset rw,relatime shared:69 - cgroup none rw,cpuset\\n\" +\n+            \"35 30 0:31 \/ \/cgroup-in\/memory rw,nosuid,nodev,noexec,relatime shared:7 - cgroup none rw,seclabel,memory\\n\" +\n+            \"36 30 0:32 \/ \/cgroup-in\/pids rw,nosuid,nodev,noexec,relatime shared:8 - cgroup none rw,seclabel,pids\\n\" +\n+            \"40 30 0:36 \/ \/cgroup-in\/cpu,cpuacct rw,nosuid,nodev,noexec,relatime shared:12 - cgroup none rw,seclabel,cpu,cpuacct\\n\" +\n+            \"40 30 0:36 \/ \/cgroup-in\/blkio rw,nosuid,nodev,noexec,relatime shared:12 - cgroup none rw,seclabel,blkio\\n\";\n+    private String mntInfoCgroupsV1DoubleControllers = mntInfoHybrid + mntInfoCgroupv1MoreControllers;\n+    private String mntInfoCgroupsV1DoubleControllers2 = mntInfoCgroupv1MoreControllers + mntInfoHybrid;\n@@ -278,2 +282,2 @@\n-            cgroupv1MntInfoDoubleCpusets = Paths.get(existingDirectory.toString(), \"mountinfo_cgroupv1_double_cpuset\");\n-            Files.writeString(cgroupv1MntInfoDoubleCpusets, mntInfoCgroupsV1DoubleCpuset);\n+            cgroupv1MntInfoDoubleControllers = Paths.get(existingDirectory.toString(), \"mountinfo_cgroupv1_double_controllers\");\n+            Files.writeString(cgroupv1MntInfoDoubleControllers, mntInfoCgroupsV1DoubleControllers);\n@@ -281,2 +285,2 @@\n-            cgroupv1MntInfoDoubleCpusets2 = Paths.get(existingDirectory.toString(), \"mountinfo_cgroupv1_double_cpuset2\");\n-            Files.writeString(cgroupv1MntInfoDoubleCpusets2, mntInfoCgroupsV1DoubleCpuset2);\n+            cgroupv1MntInfoDoubleControllers2 = Paths.get(existingDirectory.toString(), \"mountinfo_cgroupv1_double_controllers2\");\n+            Files.writeString(cgroupv1MntInfoDoubleControllers2, mntInfoCgroupsV1DoubleControllers2);\n@@ -393,2 +397,2 @@\n-        doMultipleCpusetMountsTest(cgroupv1MntInfoDoubleCpusets);\n-        doMultipleCpusetMountsTest(cgroupv1MntInfoDoubleCpusets2);\n+        doMultipleMountsTest(cgroupv1MntInfoDoubleControllers);\n+        doMultipleMountsTest(cgroupv1MntInfoDoubleControllers2);\n@@ -397,1 +401,1 @@\n-    private void doMultipleCpusetMountsTest(Path info) throws IOException {\n+    private void doMultipleMountsTest(Path info) throws IOException {\n@@ -409,0 +413,7 @@\n+        \/\/ Ensure controllers at \/sys\/fs\/cgroup will be used\n+        String[] ctrlNames = new String[] { \"memory\", \"cpu\", \"cpuacct\", \"blkio\", \"pids\" };\n+        for (int i = 0; i < ctrlNames.length; i++) {\n+            CgroupInfo cinfo = res.getInfos().get(ctrlNames[i]);\n+            assertTrue(cinfo.getMountPoint().startsWith(\"\/sys\/fs\/cgroup\/\"));\n+            assertEquals(\"\/\", cinfo.getMountRoot());\n+        }\n","filename":"test\/jdk\/jdk\/internal\/platform\/cgroup\/TestCgroupSubsystemFactory.java","additions":24,"deletions":13,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8293540\n+ * @summary Verify that -XshowSettings:system works\n+ * @key cgroups\n+ * @requires docker.support\n+ * @library \/test\/lib\n+ * @run main\/timeout=360 TestDockerBasic\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerRunOptions;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+\n+public class TestDockerBasic {\n+    private static final String imageName = Common.imageName(\"javaDockerBasic\");\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!DockerTestUtils.canTestDocker()) {\n+            return;\n+        }\n+\n+        DockerTestUtils.buildJdkContainerImage(imageName);\n+\n+        try {\n+            testXshowSettingsSystem(true);\n+            testXshowSettingsSystem(false);\n+        } finally {\n+            DockerTestUtils.removeDockerImage(imageName);\n+        }\n+    }\n+\n+    private static void testXshowSettingsSystem(boolean addCgroupMounts) throws Exception {\n+        String testMsg = (addCgroupMounts ? \" with \" : \" without \") + \" additional cgroup FS mounts in \/cgroup-in\";\n+        Common.logNewTestCase(\"Test TestDockerBasic \" + testMsg);\n+        DockerRunOptions opts =\n+                new DockerRunOptions(imageName, \"\/jdk\/bin\/java\", \"-version\");\n+        opts.addJavaOpts(\"-esa\");\n+        opts.addJavaOpts(\"-XshowSettings:system\");\n+        opts.addDockerOpts(\"--memory\", \"300m\");\n+        if (addCgroupMounts) {\n+            \/\/ Extra cgroup mount should be ignored by product code\n+            opts.addDockerOpts(\"--volume\", \"\/sys\/fs\/cgroup:\/cgroup-in:ro\");\n+        }\n+        DockerTestUtils.dockerRunJava(opts).shouldHaveExitValue(0)\n+            .shouldNotContain(\"AssertionError\")\n+            .shouldContain(\"Memory Limit: 300.00M\");\n+    }\n+}\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestDockerBasic.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -68,0 +68,1 @@\n+            testCpuSet(\"0\", true \/* additional cgroup fs mount *\/);\n@@ -73,0 +74,1 @@\n+            testCpuQuota(200 * 1000, 100 * 1000, true \/* additional cgroup fs mount *\/);\n@@ -111,0 +113,4 @@\n+        testCpuSet(value, false);\n+    }\n+\n+    private static void testCpuSet(String value, boolean addCgroupMount) throws Exception {\n@@ -115,0 +121,4 @@\n+        if (addCgroupMount) {\n+            \/\/ Extra cgroup mount should be ignored by product code\n+            opts.addDockerOpts(\"--volume\", \"\/sys\/fs\/cgroup:\/cgroup-in:ro\");\n+        }\n@@ -123,0 +133,4 @@\n+        testCpuQuota(quota, period, false);\n+    }\n+\n+    private static void testCpuQuota(long quota, long period, boolean addCgroupMount) throws Exception {\n@@ -127,0 +141,4 @@\n+        if (addCgroupMount) {\n+            \/\/ Extra cgroup mount should be ignored by product code\n+            opts.addDockerOpts(\"--volume\", \"\/sys\/fs\/cgroup:\/cgroup-in:ro\");\n+        }\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestDockerCpuMetrics.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -59,0 +59,2 @@\n+            \/\/ Memory limit test with additional cgroup fs mounted\n+            testMemoryLimit(\"500m\", true \/* cgroup fs mount *\/);\n@@ -92,0 +94,4 @@\n+        testMemoryLimit(value, false);\n+    }\n+\n+    private static void testMemoryLimit(String value, boolean addCgroupMount) throws Exception {\n@@ -100,0 +106,4 @@\n+        if (addCgroupMount) {\n+            \/\/ Extra cgroup mount should be ignored by product code\n+            opts.addDockerOpts(\"--volume\", \"\/sys\/fs\/cgroup:\/cgroup-in:ro\");\n+        }\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestDockerMemoryMetrics.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}