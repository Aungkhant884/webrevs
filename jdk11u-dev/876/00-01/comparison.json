{"files":[{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.lib;\n+\n+import java.util.Arrays;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+\n+public final class OSVersion implements Comparable<OSVersion> {\n+    public static final OSVersion WINDOWS_95 = new OSVersion(4, 0);\n+    public static final OSVersion WINDOWS_98 = new OSVersion(4, 10);\n+    public static final OSVersion WINDOWS_ME = new OSVersion(4, 90);\n+    public static final OSVersion WINDOWS_2000 = new OSVersion(5, 0);\n+    public static final OSVersion WINDOWS_XP = new OSVersion(5, 1);\n+    public static final OSVersion WINDOWS_2003 = new OSVersion(5, 2);\n+    public static final OSVersion WINDOWS_VISTA = new OSVersion(6, 0);\n+\n+    private final int[] versionTokens;\n+\n+    public static OSVersion current() {\n+        if (Platform.isSolaris()) {\n+            return new OSVersion(getSolarisVersion());\n+        }\n+        return new OSVersion(Platform.getOsVersion());\n+    }\n+\n+    public OSVersion(int major, int minor) {\n+        versionTokens = new int[] {major, minor};\n+    }\n+\n+    public OSVersion(String version) {\n+        Pattern onlyDigits = Pattern.compile(\"^\\\\d+$\");\n+        this.versionTokens = Arrays.stream(version.split(\"-\")[0].split(\"\\\\.\"))\n+                                   .filter(onlyDigits.asPredicate())\n+                                   .mapToInt(Integer::parseInt)\n+                                   .toArray();\n+    }\n+\n+    private static String getSolarisVersion() {\n+        try {\n+            return Utils.distro();\n+        } catch (Throwable e) {\n+            System.out.println(\"First attempt failed with: \" + e.getMessage());\n+        }\n+\n+        \/\/ Try to get Solaris version from \/etc\/release\n+        try (BufferedReader in = new BufferedReader(AccessController.doPrivileged(\n+                (PrivilegedExceptionAction<FileReader>) () -> new FileReader(\"\/etc\/release\")))) {\n+            return in.readLine().trim().split(\" \")[2];\n+        } catch (PrivilegedActionException e) {\n+            System.out.println(\"Second attempt failed with: \" + e.getException().getMessage());\n+        } catch (Exception e) {\n+            System.out.println(\"Second attempt failed with: \" + e.getMessage());\n+        }\n+\n+        throw new RuntimeException(\"Unable to get Solaris version\");\n+    }\n+\n+    @Override\n+    public int compareTo(OSVersion o) {\n+        return Arrays.compare(this.versionTokens, o.versionTokens);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Arrays.hashCode(versionTokens);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        OSVersion osVersion = (OSVersion) o;\n+        return Arrays.equals(versionTokens, osVersion.versionTokens);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return Arrays.stream(versionTokens)\n+                     .mapToObj(String::valueOf)\n+                     .collect(Collectors.joining(\".\"));\n+    }\n+}\n+\n","filename":"test\/lib\/jdk\/test\/lib\/OSVersion.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"}]}