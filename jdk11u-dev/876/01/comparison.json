{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+import jdk.test.lib.OSVersion;\n@@ -379,4 +380,1 @@\n-        return Platform.isSolaris()\n-                && Platform.getOsVersionMajor() <= 5\n-                && Platform.getOsVersionMinor() <= 11\n-                && Utils.distro().compareTo(\"11.3\") < 0;\n+        return Platform.isSolaris() && OSVersion.current().compareTo(new OSVersion(11, 3)) < 0;\n","filename":"test\/jdk\/com\/oracle\/security\/ucrypto\/TestAES.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+ * @library \/test\/lib\n@@ -58,1 +59,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -113,3 +114,1 @@\n-        OSInfo.OSType os = OSInfo.getOSType();\n-\n-        switch (os) {\n+        if (Platform.isLinux()) {\n@@ -120,10 +119,7 @@\n-\n-            case LINUX: {\n-                String swapSizeStr = ProcessTools.executeCommand(\"free\", \"-b\")\n-                                        .firstMatch(\"Swap:\\\\s+([0-9]+)\\\\s+.*\", 1);\n-                return Long.parseLong(swapSizeStr);\n-            }\n-            case SOLARIS: {\n-                \/\/ swapfile             dev   swaplo blocks   free\n-                \/\/ \/dev\/dsk\/c0t0d0s1   136,1      16 1638608 1600528\n-                OutputAnalyzer out= ProcessTools.executeCommand(\n+            String swapSizeStr = ProcessTools.executeCommand(\"free\", \"-b\")\n+                                             .firstMatch(\"Swap:\\\\s+([0-9]+)\\\\s+.*\", 1);\n+            return Long.parseLong(swapSizeStr);\n+        } else if (Platform.isSolaris()) {\n+            \/\/ swapfile             dev   swaplo blocks   free\n+            \/\/ \/dev\/dsk\/c0t0d0s1   136,1      16 1638608 1600528\n+            OutputAnalyzer out= ProcessTools.executeCommand(\n@@ -132,1 +128,1 @@\n-                );\n+            );\n@@ -134,1 +130,1 @@\n-                long swapSize = 0;\n+            long swapSize = 0;\n@@ -136,2 +132,2 @@\n-                for (String line : out.asLines()) {\n-                    if (line.contains(\"swapfile\")) continue;\n+            for (String line : out.asLines()) {\n+                if (line.contains(\"swapfile\")) continue;\n@@ -139,4 +135,3 @@\n-                    String[] vals = line.split(\"\\\\s+\");\n-                    if (vals.length == 5) {\n-                        swapSize += Long.parseLong(vals[3]) * 512; \/\/ size is reported in 512b blocks\n-                    }\n+                String[] vals = line.split(\"\\\\s+\");\n+                if (vals.length == 5) {\n+                    swapSize += Long.parseLong(vals[3]) * 512; \/\/ size is reported in 512b blocks\n@@ -144,2 +139,0 @@\n-\n-                return swapSize;\n@@ -147,3 +140,5 @@\n-            case MACOSX: {\n-                \/\/ total = 8192.00M used = 7471.11M free = 720.89M (encrypted)\n-                String swapSizeStr = ProcessTools.executeCommand(\n+\n+            return swapSize;\n+        } else if (Platform.isOSX()) {\n+            \/\/ total = 8192.00M used = 7471.11M free = 720.89M (encrypted)\n+            String swapSizeStr = ProcessTools.executeCommand(\n@@ -153,9 +148,4 @@\n-                ).firstMatch(\"total\\\\s+=\\\\s+([0-9]+(\\\\.[0-9]+)?[Mm]?).*\", 1);\n-                if (swapSizeStr.toLowerCase().endsWith(\"m\")) {\n-                    swapSizeStr = swapSizeStr.substring(0, swapSizeStr.length() - 1);\n-                    return (long)(Double.parseDouble(swapSizeStr) * 1024 * 1024); \/\/ size in MB\n-                }\n-                return (long)(Double.parseDouble(swapSizeStr) * 1024 * 1024);\n-            }\n-            default: {\n-                System.err.println(\"Unsupported operating system: \" + os);\n+            ).firstMatch(\"total\\\\s+=\\\\s+([0-9]+(\\\\.[0-9]+)?[Mm]?).*\", 1);\n+            if (swapSizeStr.toLowerCase().endsWith(\"m\")) {\n+                swapSizeStr = swapSizeStr.substring(0, swapSizeStr.length() - 1);\n+                return (long)(Double.parseDouble(swapSizeStr) * 1024 * 1024); \/\/ size in MB\n@@ -163,0 +153,3 @@\n+            return (long)(Double.parseDouble(swapSizeStr) * 1024 * 1024);\n+        } else {\n+            System.err.println(\"Unsupported operating system: \" + Platform.getOsName());\n","filename":"test\/jdk\/com\/sun\/management\/OperatingSystemMXBean\/TestTotalSwap.java","additions":30,"deletions":37,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-  @library ..\/..\/..\/..\/lib\/testlibrary\n+  @library \/test\/lib\n@@ -34,1 +34,1 @@\n-  @build jdk.testlibrary.OSInfo\n+  @build jdk.test.lib.Platform\n@@ -38,0 +38,1 @@\n+import jdk.test.lib.Platform;\n@@ -39,1 +40,0 @@\n-import jdk.testlibrary.OSInfo;\n@@ -54,1 +54,1 @@\n-        if (OSInfo.getOSType() != OSInfo.OSType.WINDOWS) {\n+        if (!Platform.isWindows()) {\n","filename":"test\/jdk\/java\/awt\/Choice\/ItemStateChangeTest\/ItemStateChangeTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/awt\/Choice\/PopupPosTest\/PopupPosTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n-  @library ..\/..\/..\/..\/lib\/testlibrary\n-  @build jdk.testlibrary.OSInfo\n+  @library \/test\/lib\n+  @build jdk.test.lib.Platform\n@@ -37,1 +37,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -49,1 +49,1 @@\n-        if(OSInfo.getOSType().equals(OSInfo.OSType.MACOSX)) {\n+        if (Platform.isOSX()) {\n","filename":"test\/jdk\/java\/awt\/Choice\/ResizeAutoClosesChoice\/ResizeAutoClosesChoice.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,2 @@\n-import jdk.testlibrary.OSInfo;\n+\n+import jdk.test.lib.Platform;\n@@ -44,1 +45,1 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -46,1 +47,1 @@\n- * @build jdk.testlibrary.OSInfo\n+ * @build jdk.test.lib.Platform\n@@ -61,1 +62,1 @@\n-        if (OSInfo.getOSType().equals(OSInfo.OSType.MACOSX)) {\n+        if (Platform.isOSX()) {\n","filename":"test\/jdk\/java\/awt\/Cursor\/MultiResolutionCursorTest\/MultiResolutionCursorTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,1 @@\n- * @build jdk.testlibrary.OSInfo\n+ * @build jdk.test.lib.Platform\n@@ -35,1 +35,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -40,0 +40,1 @@\n+import java.security.PrivilegedAction;\n@@ -47,1 +48,1 @@\n-        if (AccessController.doPrivileged(OSInfo.getOSTypeAction()) != OSInfo.OSType.WINDOWS) {\n+        if (!AccessController.doPrivileged((PrivilegedAction<Boolean>) Platform::isWindows)) {\n","filename":"test\/jdk\/java\/awt\/Desktop\/8064934\/bug8064934.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-   @library \/lib\/testlibrary\n-   @build jdk.testlibrary.OSInfo\n+   @library \/test\/lib\n+   @build jdk.test.lib.OSVersion jdk.test.lib.Platform\n@@ -34,1 +34,2 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.OSVersion;\n@@ -42,2 +43,2 @@\n-        if (OSInfo.getOSType() == OSInfo.OSType.WINDOWS &&\n-                OSInfo.getWindowsVersion().compareTo(OSInfo.WINDOWS_VISTA) > 0 ) {\n+        if (Platform.isWindows() &&\n+                OSVersion.current().compareTo(OSVersion.WINDOWS_VISTA) > 0 ) {\n","filename":"test\/jdk\/java\/awt\/FileDialog\/8003399\/bug8003399.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n-   @library \/lib\/testlibrary\n-   @build jdk.testlibrary.OSInfo\n+   @library \/test\/lib\n+   @build jdk.test.lib.OSVersion jdk.test.lib.Platform\n@@ -36,1 +36,2 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.OSVersion;\n@@ -46,2 +47,2 @@\n-        if (OSInfo.getOSType() == OSInfo.OSType.WINDOWS &&\n-                OSInfo.getWindowsVersion().compareTo(OSInfo.WINDOWS_VISTA) > 0 ) {\n+        if (Platform.isWindows() &&\n+                OSVersion.current().compareTo(OSVersion.WINDOWS_VISTA) > 0 ) {\n","filename":"test\/jdk\/java\/awt\/FileDialog\/8017487\/bug8017487.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-  @library ..\/..\/..\/..\/lib\/testlibrary\n+  @library \/test\/lib\n@@ -33,1 +33,1 @@\n-  @build jdk.testlibrary.OSInfo\n+  @build jdk.test.lib.Platform\n","filename":"test\/jdk\/java\/awt\/FileDialog\/FileDialogForDirectories\/FileDialogForDirectories.html","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -42,1 +42,1 @@\n-        if (OSInfo.getOSType() != OSInfo.OSType.MACOSX) {\n+        if (!Platform.isOSX()) {\n","filename":"test\/jdk\/java\/awt\/FileDialog\/FileDialogForDirectories\/FileDialogForDirectories.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-  @library ..\/..\/..\/..\/lib\/testlibrary\n+  @library \/test\/lib\n@@ -33,1 +33,1 @@\n-  @build jdk.testlibrary.OSInfo\n+  @build jdk.test.lib.Platform\n","filename":"test\/jdk\/java\/awt\/FileDialog\/FileDialogForPackages\/FileDialogForPackages.html","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -44,1 +44,1 @@\n-        if (OSInfo.getOSType() != OSInfo.OSType.MACOSX) {\n+        if (!Platform.isOSX()) {\n","filename":"test\/jdk\/java\/awt\/FileDialog\/FileDialogForPackages\/FileDialogForPackages.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -50,2 +50,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -152,1 +152,1 @@\n-        if (!OSInfo.getOSType().equals(OSInfo.OSType.MACOSX)) {\n+        if (!Platform.isOSX()) {\n","filename":"test\/jdk\/java\/awt\/Focus\/MouseClickRequestFocusRaceTest\/MouseClickRequestFocusRaceTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -35,1 +35,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -44,1 +44,1 @@\n-        if (OSInfo.getOSType() != OSInfo.OSType.MACOSX) {\n+        if (!Platform.isOSX()) {\n","filename":"test\/jdk\/java\/awt\/Frame\/MaximizedByPlatform\/MaximizedByPlatform.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,5 +27,5 @@\n-  @bug       6346690\n-  @summary   Tests that key_typed is consumed after mnemonic key_pressed is handled for a menu item.\n-  @library   ..\/..\/..\/..\/lib\/testlibrary\n-  @build jdk.testlibrary.OSInfo\n-  @run       main ConsumeNextMnemonicKeyTypedTest\n+  @bug        6346690\n+  @summary    Tests that key_typed is consumed after mnemonic key_pressed is handled for a menu item.\n+  @library    \/test\/lib\n+  @build      jdk.test.lib.Platform\n+  @run        main ConsumeNextMnemonicKeyTypedTest\n@@ -34,0 +34,2 @@\n+import jdk.test.lib.Platform;\n+\n@@ -113,1 +115,1 @@\n-        if (jdk.testlibrary.OSInfo.getOSType() == jdk.testlibrary.OSInfo.OSType.MACOSX) {\n+        if (Platform.isOSX()) {\n@@ -121,1 +123,1 @@\n-        if (jdk.testlibrary.OSInfo.getOSType() == jdk.testlibrary.OSInfo.OSType.MACOSX) {\n+        if (Platform.isOSX()) {\n","filename":"test\/jdk\/java\/awt\/KeyboardFocusmanager\/ConsumeNextMnemonicKeyTypedTest\/ConsumeNextMnemonicKeyTypedTest.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  @library ..\/..\/..\/..\/..\/lib\/testlibrary\n+  @library \/test\/lib\n@@ -33,0 +33,1 @@\n+  @build jdk.test.lib.Platform\n@@ -47,0 +48,1 @@\n+import jdk.test.lib.Platform;\n@@ -48,1 +50,0 @@\n-import jdk.testlibrary.OSInfo;\n@@ -118,1 +119,1 @@\n-        boolean isMacOSX = (OSInfo.getOSType() == OSInfo.OSType.MACOSX);\n+        boolean isMacOSX = Platform.isOSX();\n","filename":"test\/jdk\/java\/awt\/KeyboardFocusmanager\/TypeAhead\/SubMenuShowTest\/SubMenuShowTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n-  @library ..\/..\/..\/..\/lib\/testlibrary\n-  @build jdk.testlibrary.OSInfo\n+  @library \/test\/lib\n+  @build jdk.test.lib.Platform\n@@ -34,0 +34,2 @@\n+import jdk.test.lib.Platform;\n+\n@@ -78,1 +80,1 @@\n-        if (jdk.testlibrary.OSInfo.getOSType() == jdk.testlibrary.OSInfo.OSType.MACOSX) {\n+        if (Platform.isOSX()) {\n","filename":"test\/jdk\/java\/awt\/List\/FirstItemRemoveTest\/FirstItemRemoveTest.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n-  @library ..\/..\/..\/..\/lib\/testlibrary\n-  @build jdk.testlibrary.OSInfo\n+  @library \/test\/lib\n+  @build jdk.test.lib.Platform\n@@ -45,1 +45,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -275,1 +275,1 @@\n-        if (OSInfo.getOSType() == OSInfo.OSType.WINDOWS) {\n+        if (Platform.isWindows()) {\n@@ -277,1 +277,1 @@\n-        }else if(OSInfo.getOSType() == OSInfo.OSType.MACOSX) {\n+        } else if (Platform.isOSX()) {\n","filename":"test\/jdk\/java\/awt\/List\/KeyEventsTest\/KeyEventsTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  @library ..\/..\/..\/..\/lib\/testlibrary\n+  @library \/test\/lib\n@@ -33,1 +33,1 @@\n-  @build jdk.testlibrary.OSInfo\n+  @build jdk.test.lib.Platform\n@@ -41,1 +41,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -49,2 +49,1 @@\n-        if (!(OSInfo.getOSType().equals(OSInfo.OSType.LINUX)\n-                || OSInfo.getOSType().equals(OSInfo.OSType.SOLARIS))) {\n+        if (!(Platform.isLinux() || Platform.isSolaris())) {\n","filename":"test\/jdk\/java\/awt\/Menu\/OpensWithNoGrab\/OpensWithNoGrab.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build ExtendedRobot jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build ExtendedRobot jdk.test.lib.Platform\n@@ -38,1 +38,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -45,1 +45,1 @@\n-        if (OSInfo.getOSType() != OSInfo.OSType.MACOSX) {\n+        if (!Platform.isOSX()) {\n","filename":"test\/jdk\/java\/awt\/MenuBar\/8007006\/bug8007006.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -44,2 +44,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -71,1 +71,1 @@\n-        if (OSInfo.getOSType() == OSInfo.OSType.MACOSX) {\n+        if (Platform.isOSX()) {\n","filename":"test\/jdk\/java\/awt\/MenuBar\/MenuBarSetFont\/MenuBarSetFont.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n-  @library ..\/..\/..\/..\/lib\/testlibrary\n-  @build jdk.testlibrary.OSInfo\n+  @library \/test\/lib\n+  @build jdk.test.lib.Platform\n@@ -35,1 +35,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -69,1 +69,1 @@\n-    private final static String SHIFT_MODIFIER = OSInfo.getOSType().equals(OSInfo.OSType.MACOSX) ?\n+    private final static String SHIFT_MODIFIER = Platform.isOSX() ?\n@@ -72,1 +72,1 @@\n-    private final static String ALT_MODIFIER = OSInfo.getOSType().equals(OSInfo.OSType.MACOSX) ?\n+    private final static String ALT_MODIFIER = Platform.isOSX() ?\n@@ -76,1 +76,1 @@\n-    private final static String CTRL_MODIFIER = OSInfo.getOSType().equals(OSInfo.OSType.MACOSX) ?\n+    private final static String CTRL_MODIFIER = Platform.isOSX() ?\n","filename":"test\/jdk\/java\/awt\/Mouse\/MouseModifiersUnitTest\/MouseModifiersUnitTest_Extra.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,2 @@\n-  @library ..\/..\/..\/..\/lib\/testlibrary\n-  @build jdk.testlibrary.OSInfo\n+  @library \/test\/lib\n+  @build jdk.test.lib.Platform\n@@ -43,1 +43,2 @@\n-import jdk.testlibrary.OSInfo;\n+\n+import jdk.test.lib.Platform;\n@@ -49,2 +50,1 @@\n-        OSInfo.OSType type = OSInfo.getOSType();\n-        if (type != OSInfo.OSType.LINUX && type != OSInfo.OSType.SOLARIS) {\n+        if (!Platform.isLinux() && !Platform.isSolaris()) {\n","filename":"test\/jdk\/java\/awt\/Multiscreen\/MultiScreenInsetsTest\/MultiScreenInsetsTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,2 @@\n-import jdk.testlibrary.OSInfo;\n+\n+import jdk.test.lib.Platform;\n@@ -35,2 +36,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -48,1 +49,1 @@\n-            int wheelSign = OSInfo.getOSType().equals(OSInfo.OSType.MACOSX) ? -1 : 1;\n+            int wheelSign = Platform.isOSX() ? -1 : 1;\n","filename":"test\/jdk\/java\/awt\/Robot\/RobotWheelTest\/RobotWheelTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,2 @@\n-  @library ..\/..\/..\/..\/lib\/testlibrary\n-  @build jdk.testlibrary.OSInfo\n+  @library \/test\/lib\n+  @build jdk.test.lib.Platform\n@@ -38,1 +38,0 @@\n-import jdk.testlibrary.OSInfo;\n@@ -40,0 +39,1 @@\n+import jdk.test.lib.Platform;\n@@ -137,1 +137,1 @@\n-        if (OSInfo.getOSType() == OSInfo.OSType.MACOSX) {\n+        if (Platform.isOSX()) {\n","filename":"test\/jdk\/java\/awt\/TextArea\/ScrollbarIntersectionTest\/ScrollbarIntersectionTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -34,0 +34,2 @@\n+import jdk.test.lib.Platform;\n+\n@@ -38,1 +40,1 @@\n-        if (jdk.testlibrary.OSInfo.getOSType() != jdk.testlibrary.OSInfo.OSType.MACOSX) {\n+        if (!Platform.isOSX()) {\n","filename":"test\/jdk\/java\/awt\/Toolkit\/ToolkitPropertyTest\/bug7129133.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n-   @library ..\/..\/..\/..\/lib\/testlibrary\n-   @build jdk.testlibrary.OSInfo\n+   @library \/test\/lib\n+   @build jdk.test.lib.Platform\n@@ -35,1 +35,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -44,1 +44,1 @@\n-        if (OSInfo.getOSType() == OSInfo.OSType.WINDOWS) {\n+        if (Platform.isWindows()) {\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/8072769\/bug8072769.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-  @library ..\/..\/..\/..\/lib\/testlibrary\n+  @library \/test\/lib\n@@ -33,1 +33,1 @@\n-  @build jdk.testlibrary.OSInfo\n+  @build jdk.test.lib.Platform\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/DblClickActionEventTest\/DblClickActionEventTest.html","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -53,1 +53,1 @@\n-            if (OSInfo.getOSType().equals(OSInfo.OSType.MACOSX)) {\n+            if (Platform.isOSX()) {\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/DblClickActionEventTest\/DblClickActionEventTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-  @library ..\/..\/..\/..\/lib\/testlibrary\n+  @library \/test\/lib\n@@ -34,1 +34,1 @@\n-  @build jdk.testlibrary.OSInfo\n+  @build jdk.test.lib.Platform\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/DisposeInActionEventTest\/DisposeInActionEventTest.html","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -62,1 +62,1 @@\n-            if (OSInfo.getOSType().equals(OSInfo.OSType.MACOSX)) {\n+            if (Platform.isOSX()) {\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/DisposeInActionEventTest\/DisposeInActionEventTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -34,1 +34,1 @@\n- * @build jdk.testlibrary.OSInfo\n+ * @build jdk.test.lib.Platform\n@@ -38,0 +38,2 @@\n+import jdk.test.lib.Platform;\n+\n@@ -50,1 +52,1 @@\n-        if (jdk.testlibrary.OSInfo.getOSType() != jdk.testlibrary.OSInfo.OSType.WINDOWS) {\n+        if (!Platform.isWindows()) {\n","filename":"test\/jdk\/java\/awt\/datatransfer\/HTMLDataFlavors\/HTMLDataFlavorTest.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import jdk.test.lib.Platform;\n@@ -33,1 +34,0 @@\n-import jdk.testlibrary.OSInfo;\n@@ -44,1 +44,1 @@\n-    @library ..\/..\/..\/..\/lib\/testlibrary\n+    @library \/test\/lib\n@@ -47,1 +47,1 @@\n-    @build jdk.testlibrary.OSInfo\n+    @build jdk.test.lib.Platform\n@@ -53,2 +53,1 @@\n-        if (OSInfo.getOSType() != OSInfo.OSType.MACOSX\n-                && OSInfo.getOSType() != OSInfo.OSType.WINDOWS) {\n+        if (!Platform.isOSX() && !Platform.isWindows()) {\n","filename":"test\/jdk\/java\/awt\/datatransfer\/MissedHtmlAndRtfBug\/MissedHtmlAndRtfBug.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,1 @@\n- * @build jdk.testlibrary.OSInfo ProcessResults ProcessCommunicator\n+ * @build jdk.test.lib.Platform ProcessResults ProcessCommunicator\n@@ -37,0 +37,1 @@\n+import jdk.test.lib.Platform;\n@@ -39,1 +40,0 @@\n-import jdk.testlibrary.OSInfo;\n@@ -191,2 +191,1 @@\n-        if (OSInfo.OSType.WINDOWS.equals(OSInfo.getOSType()) &&\n-            !ln.contains(\"METAFILEPICT\"))\n+        if (Platform.isWindows() &&  !ln.contains(\"METAFILEPICT\"))\n","filename":"test\/jdk\/java\/awt\/dnd\/ImageTransferTest\/ImageTransferTest.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n- * @library ..\/..\/..\/..\/..\/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -38,1 +38,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -50,1 +50,1 @@\n-        if (OSInfo.getOSType() != OSInfo.OSType.MACOSX) {\n+        if (!Platform.isOSX()) {\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/8020209\/bug8020209.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n- * @library ..\/..\/..\/..\/..\/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -40,1 +40,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -48,1 +48,1 @@\n-        if (OSInfo.getOSType() != OSInfo.OSType.MACOSX) {\n+        if (!Platform.isOSX()) {\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/DeadKey\/DeadKeyMacOSXInputText.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n- * @library ..\/..\/..\/..\/..\/lib\/testlibrary\n- * @build  jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build  jdk.test.lib.Platform\n@@ -39,1 +39,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -47,1 +47,1 @@\n-        if (OSInfo.getOSType() != OSInfo.OSType.MACOSX) {\n+        if (!Platform.isOSX()) {\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/DeadKey\/deadKeyMacOSX.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-  @library ..\/..\/..\/..\/..\/lib\/testlibrary\n+  @library \/test\/lib\n@@ -33,1 +33,1 @@\n-  @build jdk.testlibrary.OSInfo\n+  @build jdk.test.lib.Platform\n@@ -38,1 +38,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -57,1 +57,1 @@\n-        if (OSInfo.getOSType() == OSInfo.OSType.WINDOWS) {\n+        if (Platform.isWindows()) {\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/SwallowKeyEvents\/SwallowKeyEvents.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,2 @@\n-import jdk.testlibrary.OSInfo;\n+\n+import jdk.test.lib.Platform;\n@@ -35,2 +36,2 @@\n- * @library \/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -44,1 +45,1 @@\n-        if (OSInfo.getOSType() != OSInfo.OSType.MACOSX) {\n+        if (!Platform.isOSX()) {\n","filename":"test\/jdk\/java\/awt\/image\/MultiResolutionImage\/NSImageToMultiResolutionImageTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,2 @@\n-  @library \/lib\/testlibrary\n-  @build jdk.testlibrary.OSInfo\n+  @library \/test\/lib\n+  @build jdk.test.lib.Platform\n@@ -41,1 +41,0 @@\n-import jdk.testlibrary.OSInfo;\n@@ -43,0 +42,1 @@\n+import jdk.test.lib.Platform;\n@@ -53,3 +53,1 @@\n-        OSInfo.OSType os = OSInfo.getOSType();\n-        return (os.equals(OSInfo.OSType.WINDOWS) ||\n-            os.equals(OSInfo.OSType.MACOSX));\n+        return Platform.isWindows() || Platform.isOSX();\n","filename":"test\/jdk\/java\/awt\/image\/multiresolution\/MultiDisplayTest\/MultiDisplayTest.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -35,1 +35,1 @@\n- * @build jdk.testlibrary.OSInfo\n+ * @build jdk.test.lib.OSVersion jdk.test.lib.Platform\n@@ -40,1 +40,2 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.OSVersion;\n@@ -53,2 +54,2 @@\n-            if (OSInfo.getOSType() == OSInfo.OSType.WINDOWS\n-                && OSInfo.getWindowsVersion() == OSInfo.WINDOWS_XP) {\n+        if (Platform.isWindows()\n+                && OSVersion.current().equals(OSVersion.WINDOWS_XP)) {\n","filename":"test\/jdk\/javax\/swing\/JButton\/4796987\/bug4796987.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -30,1 +30,1 @@\n- * @build jdk.testlibrary.OSInfo\n+ * @build jdk.test.lib.Platform\n@@ -38,1 +38,2 @@\n-import jdk.testlibrary.OSInfo;\n+\n+import jdk.test.lib.Platform;\n@@ -47,1 +48,1 @@\n-            if (OSInfo.getOSType() == OSInfo.OSType.MACOSX) {\n+            if (Platform.isOSX()) {\n","filename":"test\/jdk\/javax\/swing\/JCheckBox\/4449413\/bug4449413.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,2 @@\n-import jdk.testlibrary.OSInfo;\n+\n+import jdk.test.lib.Platform;\n@@ -36,2 +37,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -47,1 +48,1 @@\n-        if(!OSInfo.OSType.MACOSX.equals(OSInfo.getOSType())){\n+        if (!Platform.isOSX()) {\n","filename":"test\/jdk\/javax\/swing\/JCheckBox\/8032667\/bug8032667_image_diff.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-   @library ..\/..\/..\/..\/lib\/testlibrary\n+   @library \/test\/lib\n@@ -33,1 +33,1 @@\n-   @build jdk.testlibrary.OSInfo\n+   @build jdk.test.libr.Platform\n@@ -38,1 +38,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -232,1 +232,1 @@\n-        if (OSInfo.getOSType() == OSInfo.OSType.WINDOWS) {\n+        if (Platform.isWindows()) {\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/4199622\/bug4199622.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2013, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n- @library ..\/..\/..\/..\/lib\/testlibrary\n- @build jdk.testlibrary.OSInfo\n+ @library \/test\/lib\n+ @build jdk.test.lib.Platform\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/4150029\/bug4150029.html","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+import jdk.test.lib.Platform;\n+\n@@ -38,1 +40,1 @@\n-        if (jdk.testlibrary.OSInfo.getOSType() == jdk.testlibrary.OSInfo.OSType.MACOSX) {\n+        if (Platform.isOSX()) {\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/4150029\/bug4150029.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build Util jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build Util jdk.test.lib.Platform\n@@ -39,1 +39,2 @@\n-import jdk.testlibrary.OSInfo;\n+\n+import jdk.test.lib.Platform;\n@@ -61,1 +62,1 @@\n-        if (OSInfo.OSType.MACOSX.equals(OSInfo.getOSType())) {\n+        if (Platform.isOSX()) {\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/4524490\/bug4524490.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-   @library ..\/..\/..\/..\/lib\/testlibrary\n+   @library \/test\/lib\n@@ -30,1 +30,1 @@\n-   @build jdk.testlibrary.OSInfo\n+   @build jdk.test.lib.Platform\n@@ -34,1 +34,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -49,1 +49,1 @@\n-        if (OSInfo.getOSType() != OSInfo.OSType.WINDOWS) {\n+        if (!Platform.isWindows()) {\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/6840086\/bug6840086.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -48,1 +48,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -62,1 +62,1 @@\n-            if (OSInfo.getOSType() == OSInfo.OSType.WINDOWS) {\n+            if (Platform.isWindows()) {\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/8041694\/bug8041694.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,1 @@\n- * @build jdk.testlibrary.OSInfo\n+ * @build jdk.test.lib.Platform\n@@ -37,2 +37,1 @@\n-import jdk.testlibrary.OSInfo;\n-import jdk.testlibrary.OSInfo.OSType;\n+import jdk.test.lib.Platform;\n@@ -48,2 +47,1 @@\n-        OSType type = OSInfo.getOSType();\n-        if (type != OSType.WINDOWS) {\n+        if (!Platform.isWindows()) {\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/8046391\/bug8046391.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -42,1 +42,1 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -44,1 +44,1 @@\n- * @build jdk.testlibrary.OSInfo\n+ * @build jdk.test.lib.Platform\n@@ -122,1 +122,1 @@\n-        if (!OSInfo.getOSType().equals(OSInfo.OSType.WINDOWS)) {\n+        if (!Platform.isWindows()) {\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/8062561\/bug8062561.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -50,1 +50,2 @@\n-import jdk.testlibrary.OSInfo;\n+\n+import jdk.test.lib.Platform;\n@@ -63,1 +64,1 @@\n-        if (OSInfo.getOSType() == OSInfo.OSType.WINDOWS) {\n+        if (Platform.isWindows()) {\n","filename":"test\/jdk\/javax\/swing\/JFrame\/8016356\/bug8016356.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,2 @@\n-import jdk.testlibrary.OSInfo;\n+\n+import jdk.test.lib.Platform;\n@@ -39,2 +40,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build ExtendedRobot jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build ExtendedRobot jdk.test.lib.Platform\n@@ -55,1 +56,1 @@\n-        if (OSInfo.getOSType() != OSInfo.OSType.MACOSX) {\n+        if (!Platform.isOSX()) {\n","filename":"test\/jdk\/javax\/swing\/JFrame\/NSTexturedJFrame\/NSTexturedJFrame.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n-   @library ..\/..\/..\/..\/lib\/testlibrary\n-   @build jdk.testlibrary.OSInfo\n+   @library \/test\/lib\n+   @build jdk.test.lib.Platform\n@@ -37,1 +37,0 @@\n-import jdk.testlibrary.OSInfo;\n@@ -39,0 +38,1 @@\n+import jdk.test.lib.Platform;\n@@ -43,1 +43,1 @@\n-        if (OSInfo.getOSType() == OSInfo.OSType.MACOSX) {\n+        if (Platform.isOSX()) {\n","filename":"test\/jdk\/javax\/swing\/JInternalFrame\/4251301\/bug4251301.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build Util jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build Util jdk.test.lib.Platform\n@@ -42,1 +42,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -82,1 +82,1 @@\n-            if (OSInfo.getOSType() == OSInfo.OSType.MACOSX) {\n+            if (Platform.isOSX()) {\n","filename":"test\/jdk\/javax\/swing\/JLabel\/6596966\/bug6596966.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -38,1 +38,2 @@\n-import jdk.testlibrary.OSInfo;\n+\n+import jdk.test.lib.Platform;\n@@ -70,1 +71,1 @@\n-            if (OSInfo.getOSType() == OSInfo.OSType.MACOSX) {\n+            if (Platform.isOSX()) {\n@@ -77,1 +78,1 @@\n-            if (OSInfo.getOSType() == OSInfo.OSType.MACOSX) {\n+            if (Platform.isOSX()) {\n","filename":"test\/jdk\/javax\/swing\/JMenu\/6470128\/bug6470128.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -36,1 +36,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -59,1 +59,1 @@\n-        if (OSInfo.getOSType() != OSInfo.OSType.MACOSX) {\n+        if (!Platform.isOSX()) {\n","filename":"test\/jdk\/javax\/swing\/JMenuItem\/ActionListenerCalledTwice\/ActionListenerCalledTwiceTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -34,0 +34,2 @@\n+import jdk.test.lib.Platform;\n+\n@@ -44,1 +46,1 @@\n-        if (jdk.testlibrary.OSInfo.getOSType() != jdk.testlibrary.OSInfo.OSType.MACOSX) {\n+        if (!Platform.isOSX()) {\n","filename":"test\/jdk\/javax\/swing\/JMenuItem\/ShortcutNotDiplayed\/ShortcutNotDisplayedTest.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,2 @@\n-import jdk.testlibrary.OSInfo;\n+\n+import jdk.test.lib.Platform;\n@@ -37,2 +38,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -51,1 +52,1 @@\n-        if (OSInfo.getOSType().equals(OSInfo.OSType.MACOSX)) {\n+        if (Platform.isOSX()) {\n","filename":"test\/jdk\/javax\/swing\/JOptionPane\/8024926\/bug8024926.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -33,1 +33,1 @@\n- * @build jdk.testlibrary.OSInfo\n+ * @build jdk.test.lib.Platform\n@@ -37,1 +37,2 @@\n-import jdk.testlibrary.OSInfo;\n+\n+import jdk.test.lib.Platform;\n@@ -77,1 +78,1 @@\n-            if (OSInfo.getOSType() == OSInfo.OSType.MACOSX) {\n+            if (Platform.isOSX()) {\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/6827786\/bug6827786.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build ExtendedRobot jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build ExtendedRobot jdk.test.lib.Platform\n@@ -40,1 +40,2 @@\n-import jdk.testlibrary.OSInfo;\n+\n+import jdk.test.lib.Platform;\n@@ -71,1 +72,1 @@\n-        if (OSInfo.getOSType() != OSInfo.OSType.MACOSX) {\n+        if (!Platform.isOSX()) {\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/7154841\/bug7154841.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-   @library ..\/..\/..\/..\/lib\/testlibrary\n+   @library \/test\/lib\n@@ -29,1 +29,1 @@\n-   @build Util jdk.testlibrary.OSInfo\n+   @build Util jdk.test.lib.Platform\n@@ -37,1 +37,2 @@\n-import jdk.testlibrary.OSInfo;\n+\n+import jdk.test.lib.Platform;\n@@ -45,1 +46,1 @@\n-            if (OSInfo.getOSType() == OSInfo.OSType.MACOSX) {\n+            if (Platform.isOSX()) {\n","filename":"test\/jdk\/javax\/swing\/JScrollBar\/bug4202954\/bug4202954.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -42,2 +42,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -55,1 +55,1 @@\n-        delta = OSInfo.getOSType().equals(OSInfo.OSType.MACOSX) ? -30 : 30;\n+        delta = Platform.isOSX() ? -30 : 30;\n","filename":"test\/jdk\/javax\/swing\/JScrollPane\/HorizontalMouseWheelOnShiftPressed\/HorizontalMouseWheelOnShiftPressed.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.OSVersion jdk.test.lib.Platform\n@@ -34,1 +34,2 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.OSVersion;\n@@ -41,2 +42,2 @@\n-        if (OSInfo.getOSType() != OSInfo.OSType.WINDOWS ||\n-                OSInfo.getWindowsVersion() != OSInfo.WINDOWS_VISTA) {\n+        if (!Platform.isWindows() ||\n+                !OSVersion.current().equals(OSVersion.WINDOWS_VISTA)) {\n","filename":"test\/jdk\/javax\/swing\/JSlider\/6579827\/bug6579827.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,1 @@\n- * @build Util jdk.testlibrary.OSInfo\n+ * @build Util jdk.test.lib.Platform\n@@ -43,1 +43,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -106,1 +106,1 @@\n-            if (OSInfo.getOSType() == OSInfo.OSType.MACOSX) {\n+            if (Platform.isOSX()) {\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/4624207\/bug4624207.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -40,1 +40,2 @@\n-import jdk.testlibrary.OSInfo;\n+\n+import jdk.test.lib.Platform;\n@@ -47,1 +48,1 @@\n-        if(OSInfo.getOSType() != OSInfo.OSType.WINDOWS){\n+        if (!Platform.isWindows()) {\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/6416920\/bug6416920.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,2 @@\n- * @library ..\/..\/..\/..\/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -36,1 +36,1 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n@@ -62,1 +62,1 @@\n-        if (OSInfo.getOSType() != OSInfo.OSType.WINDOWS) {\n+        if (!Platform.isWindows()) {\n","filename":"test\/jdk\/javax\/swing\/JTextArea\/6940863\/bug6940863.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,2 @@\n- * @library ..\/..\/..\/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -37,2 +37,2 @@\n-import jdk.testlibrary.OSInfo;\n-import jdk.testlibrary.OSInfo.OSType;\n+\n+import jdk.test.lib.Platform;\n@@ -43,1 +43,0 @@\n-        OSType os = OSInfo.getOSType();\n@@ -45,0 +44,5 @@\n+        if (Platform.isWindows()) {\n+            \/\/ Make sure we don't have GTK.\n+            if (hasLAF(\"gtk\", lafInfo)) {\n+                throw new RuntimeException(\"On windows, but GTK is present\");\n+            }\n@@ -46,31 +50,4 @@\n-        switch (os) {\n-            case WINDOWS:\n-\n-                \/\/ Make sure we don't have GTK.\n-                if (hasLAF(\"gtk\", lafInfo)) {\n-                    throw new RuntimeException(\"On windows, but GTK is present\");\n-                }\n-\n-                \/\/ Make sure we don't have Aqua.\n-                if (hasLAF(\"mac\", lafInfo)) {\n-                    throw new RuntimeException(\"On windows, but Aqua is present\");\n-                }\n-\n-                \/\/ Make sure we have Windows.\n-                if (!hasLAF(\"windows\", lafInfo)) {\n-                    throw new RuntimeException(\"On windows and don't have Windows\");\n-                }\n-\n-                break;\n-\n-            case MACOSX:\n-\n-                \/\/ Make sure we don't have GTK.\n-                if (hasLAF(\"gtk\", lafInfo)) {\n-                    throw new RuntimeException(\"On mac, but GTK is present\");\n-                }\n-\n-                \/\/ Make sure we don't have Windows.\n-                if (hasLAF(\"windows\", lafInfo)) {\n-                    throw new RuntimeException(\"On mac, but Windows is present\");\n-                }\n+            \/\/ Make sure we don't have Aqua.\n+            if (hasLAF(\"mac\", lafInfo)) {\n+                throw new RuntimeException(\"On windows, but Aqua is present\");\n+            }\n@@ -78,4 +55,9 @@\n-                \/\/ Make sure we have Aqua.\n-                if (!hasLAF(\"mac\", lafInfo)) {\n-                    throw new RuntimeException(\"On mac and don't have Aqua\");\n-                }\n+            \/\/ Make sure we have Windows.\n+            if (!hasLAF(\"windows\", lafInfo)) {\n+                throw new RuntimeException(\"On windows and don't have Windows\");\n+            }\n+        } else if (Platform.isOSX()) {\n+            \/\/ Make sure we don't have GTK.\n+            if (hasLAF(\"gtk\", lafInfo)) {\n+                throw new RuntimeException(\"On mac, but GTK is present\");\n+            }\n@@ -83,1 +65,4 @@\n-                break;\n+            \/\/ Make sure we don't have Windows.\n+            if (hasLAF(\"windows\", lafInfo)) {\n+                throw new RuntimeException(\"On mac, but Windows is present\");\n+            }\n@@ -85,2 +70,6 @@\n-            default:\n-                \/\/ Not windows and mac\n+            \/\/ Make sure we have Aqua.\n+            if (!hasLAF(\"mac\", lafInfo)) {\n+                throw new RuntimeException(\"On mac and don't have Aqua\");\n+            }\n+        } else {\n+            \/\/ Not windows and mac\n@@ -88,4 +77,4 @@\n-                \/\/ Make sure we don't have Windows.\n-                if (hasLAF(\"windows\", lafInfo)) {\n-                    throw new RuntimeException(\"Not on windows and have Windows\");\n-                }\n+            \/\/ Make sure we don't have Windows.\n+            if (hasLAF(\"windows\", lafInfo)) {\n+                throw new RuntimeException(\"Not on windows and have Windows\");\n+            }\n@@ -93,4 +82,4 @@\n-                \/\/ Make sure we don't have Aqua.\n-                if (hasLAF(\"mac\", lafInfo)) {\n-                    throw new RuntimeException(\"Not on mac and have Aqua\");\n-                }\n+            \/\/ Make sure we don't have Aqua.\n+            if (hasLAF(\"mac\", lafInfo)) {\n+                throw new RuntimeException(\"Not on mac and have Aqua\");\n+            }\n@@ -98,5 +87,5 @@\n-                \/\/ Make sure we have GTK.\n-                if (!hasLAF(\"gtk\", lafInfo)) {\n-                    throw new RuntimeException(\n-                            \"Not on Windows and Mac and don't have GTK!\");\n-                }\n+            \/\/ Make sure we have GTK.\n+            if (!hasLAF(\"gtk\", lafInfo)) {\n+                throw new RuntimeException(\n+                        \"Not on Windows and Mac and don't have GTK!\");\n+            }\n@@ -104,1 +93,0 @@\n-\n","filename":"test\/jdk\/javax\/swing\/UITest\/UITest.java","additions":46,"deletions":58,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,2 @@\n- * @library \/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -57,1 +57,2 @@\n-import jdk.testlibrary.OSInfo;\n+\n+import jdk.test.lib.Platform;\n@@ -64,1 +65,1 @@\n-        if (OSInfo.getOSType() != OSInfo.OSType.MACOSX) {\n+        if (!Platform.isOSX()) {\n","filename":"test\/jdk\/javax\/swing\/plaf\/aqua\/CustomComboBoxFocusTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,2 @@\n- * @library \/lib\/testlibrary\n- * @build jdk.testlibrary.OSInfo\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -41,1 +41,2 @@\n-import jdk.testlibrary.OSInfo;\n+\n+import jdk.test.lib.Platform;\n@@ -50,1 +51,1 @@\n-        if (OSInfo.getOSType() != OSInfo.OSType.WINDOWS) {\n+        if (!Platform.isWindows()) {\n","filename":"test\/jdk\/javax\/swing\/plaf\/basic\/BasicLabelUI\/bug7172652.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @library \/lib\/testlibrary\n- * @build jdk.testlibrary.*\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.OSVersion jdk.test.lib.Platform\n@@ -35,1 +35,0 @@\n-import jdk.net.ExtendedSocketOptions;\n@@ -38,1 +37,2 @@\n-import jdk.testlibrary.OSInfo;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.OSVersion;\n@@ -56,1 +56,0 @@\n-    private static final double solarisVersionToCheck = 11.2;\n@@ -193,3 +192,4 @@\n-        if (OSInfo.getOSType().equals(OSInfo.OSType.SOLARIS)) {\n-            double solarisVersion = OSInfo.getSolarisVersion();\n-            if (solarisVersion >= solarisVersionToCheck) {\n+        if (Platform.isSolaris()) {\n+            OSVersion solarisVersion = OSVersion.current();\n+            OSVersion solarisVersionToCheck = new OSVersion(11, 2);\n+            if (solarisVersion.compareTo(solarisVersionToCheck) >= 0) {\n","filename":"test\/jdk\/jdk\/net\/Sockets\/Test.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1,4 +1,2 @@\n-grant {\n-    permission java.util.PropertyPermission \"os.name\", \"read\";\n-    permission java.io.FilePermission \"<<ALL FILES>>\", \"execute\";\n-    permission java.util.PropertyPermission \"line.separator\", \"read\";\n+grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/test\/lib\/-\" {\n+    permission java.util.PropertyPermission \"*\", \"read\";\n@@ -6,2 +4,6 @@\n-    permission java.net.SocketPermission \"127.0.0.1\", \"connect,accept\" ;\n-    permission java.net.SocketPermission \"localhost\", \"listen\" ;\n+    permission java.io.FilePermission \"<<ALL FILES>>\", \"execute\";\n+};\n+\n+grant codeBase \"file:${test.classes}\/*\" {\n+    permission java.net.SocketPermission \"127.0.0.1\", \"connect,accept\";\n+    permission java.net.SocketPermission \"localhost\", \"listen\";\n","filename":"test\/jdk\/jdk\/net\/Sockets\/policy.fail","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1,4 +1,2 @@\n-grant {\n-    permission java.util.PropertyPermission \"os.name\", \"read\";\n-    permission java.io.FilePermission \"<<ALL FILES>>\", \"execute\";\n-    permission java.util.PropertyPermission \"line.separator\", \"read\";\n+grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/test\/lib\/-\" {\n+    permission java.util.PropertyPermission \"*\", \"read\";\n@@ -6,2 +4,6 @@\n-    permission java.net.SocketPermission \"127.0.0.1\", \"connect,accept\" ;\n-    permission java.net.SocketPermission \"localhost\", \"listen\" ;\n+    permission java.io.FilePermission \"<<ALL FILES>>\", \"execute\";\n+};\n+\n+grant codeBase \"file:${test.classes}\/*\" {\n+    permission java.net.SocketPermission \"127.0.0.1\", \"connect,accept\";\n+    permission java.net.SocketPermission \"localhost\", \"listen\";\n","filename":"test\/jdk\/jdk\/net\/Sockets\/policy.success","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1,217 +0,0 @@\n-\/*\n- * Copyright (c) 1997, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.testlibrary;\n-\n-import java.security.PrivilegedAction;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.io.BufferedReader;\n-import java.io.FileReader;\n-import java.io.InputStreamReader;\n-\n-import static jdk.testlibrary.OSInfo.OSType.*;\n-\n-\/**\n- * @author Pavel Porvatov\n- * copied to testlibrary by yan\n- *\/\n-public class OSInfo {\n-    public static enum OSType {\n-        WINDOWS,\n-        LINUX,\n-        SOLARIS,\n-        MACOSX,\n-        UNKNOWN\n-    }\n-\n-    \/*\n-       The map windowsVersionMap must contain all windows version constants except WINDOWS_UNKNOWN,\n-       and so the method getWindowsVersion() will return the constant for known OS.\n-       It allows compare objects by \"==\" instead of \"equals\".\n-     *\/\n-    public static final WindowsVersion WINDOWS_UNKNOWN = new WindowsVersion(-1, -1);\n-    public static final WindowsVersion WINDOWS_95 = new WindowsVersion(4, 0);\n-    public static final WindowsVersion WINDOWS_98 = new WindowsVersion(4, 10);\n-    public static final WindowsVersion WINDOWS_ME = new WindowsVersion(4, 90);\n-    public static final WindowsVersion WINDOWS_2000 = new WindowsVersion(5, 0);\n-    public static final WindowsVersion WINDOWS_XP = new WindowsVersion(5, 1);\n-    public static final WindowsVersion WINDOWS_2003 = new WindowsVersion(5, 2);\n-    public static final WindowsVersion WINDOWS_VISTA = new WindowsVersion(6, 0);\n-\n-    private static final String OS_NAME = \"os.name\";\n-    private static final String OS_VERSION = \"os.version\";\n-\n-    private final static Map<String, WindowsVersion> windowsVersionMap = new HashMap<String, OSInfo.WindowsVersion>();\n-\n-    static {\n-        windowsVersionMap.put(WINDOWS_95.toString(), WINDOWS_95);\n-        windowsVersionMap.put(WINDOWS_98.toString(), WINDOWS_98);\n-        windowsVersionMap.put(WINDOWS_ME.toString(), WINDOWS_ME);\n-        windowsVersionMap.put(WINDOWS_2000.toString(), WINDOWS_2000);\n-        windowsVersionMap.put(WINDOWS_XP.toString(), WINDOWS_XP);\n-        windowsVersionMap.put(WINDOWS_2003.toString(), WINDOWS_2003);\n-        windowsVersionMap.put(WINDOWS_VISTA.toString(), WINDOWS_VISTA);\n-    }\n-\n-    private static final PrivilegedAction<OSType> osTypeAction = new PrivilegedAction<OSType>() {\n-        public OSType run() {\n-            return getOSType();\n-        }\n-    };\n-\n-    private OSInfo() {\n-        \/\/ Don't allow to create instances\n-    }\n-\n-    \/**\n-     * Returns type of operating system.\n-     *\/\n-    public static OSType getOSType() throws SecurityException {\n-        String osName = System.getProperty(OS_NAME);\n-\n-        if (osName != null) {\n-            if (osName.contains(\"Windows\")) {\n-                return WINDOWS;\n-            }\n-\n-            if (osName.contains(\"Linux\")) {\n-                return LINUX;\n-            }\n-\n-            if (osName.contains(\"Solaris\") || osName.contains(\"SunOS\")) {\n-                return SOLARIS;\n-            }\n-\n-            if (osName.contains(\"OS X\")) {\n-                return MACOSX;\n-            }\n-\n-            \/\/ determine another OS here\n-        }\n-\n-        return UNKNOWN;\n-    }\n-\n-    public static PrivilegedAction<OSType> getOSTypeAction() {\n-        return osTypeAction;\n-    }\n-\n-    public static WindowsVersion getWindowsVersion() throws SecurityException {\n-        String osVersion = System.getProperty(OS_VERSION);\n-\n-        if (osVersion == null) {\n-            return WINDOWS_UNKNOWN;\n-        }\n-\n-        synchronized (windowsVersionMap) {\n-            WindowsVersion result = windowsVersionMap.get(osVersion);\n-\n-            if (result == null) {\n-                \/\/ Try parse version and put object into windowsVersionMap\n-                String[] arr = osVersion.split(\"\\\\.\");\n-\n-                if (arr.length == 2) {\n-                    try {\n-                        result = new WindowsVersion(Integer.parseInt(arr[0]), Integer.parseInt(arr[1]));\n-                    } catch (NumberFormatException e) {\n-                        return WINDOWS_UNKNOWN;\n-                    }\n-                } else {\n-                    return WINDOWS_UNKNOWN;\n-                }\n-\n-                windowsVersionMap.put(osVersion, result);\n-            }\n-\n-            return result;\n-        }\n-    }\n-\n-    public static double getSolarisVersion() {\n-        try {\n-            OutputAnalyzer output = ProcessTools.executeProcess(\"uname\", \"-v\");\n-            System.out.println(\"'uname -v' finished with code \"\n-                    + output.getExitValue());\n-            String version = output.getOutput().replaceAll(\"(\\\\d+\\\\.\\\\d+)\\\\..*\", \"$1\");\n-            return Double.parseDouble(version);\n-        } catch (Exception e) {\n-            System.out.println(\"First attempt failed with: \" + e.getMessage());\n-        }\n-\n-        \/\/Try to get Solaris version from \/etc\/release\n-        try (BufferedReader in =\n-                     new BufferedReader(new FileReader(\"\/etc\/release\"))) {\n-            String line = in.readLine().trim().split(\" \")[2];\n-            return Double.parseDouble(line);\n-        } catch (Exception e) {\n-            System.out.println(\"Second attempt failed with: \" + e.getMessage());\n-        }\n-\n-        throw new RuntimeException(\"Unable to get Solaris version\");\n-    }\n-\n-    public static class WindowsVersion implements Comparable<WindowsVersion> {\n-        private final int major;\n-\n-        private final int minor;\n-\n-        private WindowsVersion(int major, int minor) {\n-            this.major = major;\n-            this.minor = minor;\n-        }\n-\n-        public int getMajor() {\n-            return major;\n-        }\n-\n-        public int getMinor() {\n-            return minor;\n-        }\n-\n-        public int compareTo(WindowsVersion o) {\n-            int result = major - o.getMajor();\n-\n-            if (result == 0) {\n-                result = minor - o.getMinor();\n-            }\n-\n-            return result;\n-        }\n-\n-        public boolean equals(Object obj) {\n-            return obj instanceof WindowsVersion && compareTo((WindowsVersion) obj) == 0;\n-        }\n-\n-        public int hashCode() {\n-            return 31 * major + minor;\n-        }\n-\n-        public String toString() {\n-            return major + \".\" + minor;\n-        }\n-    }\n-}\n-\n","filename":"test\/jdk\/lib\/testlibrary\/jdk\/testlibrary\/OSInfo.java","additions":0,"deletions":217,"binary":false,"changes":217,"status":"deleted"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.lib;\n+\n+import java.util.Arrays;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+\n+public final class OSVersion implements Comparable<OSVersion> {\n+    public static final OSVersion WINDOWS_95 = new OSVersion(4, 0);\n+    public static final OSVersion WINDOWS_98 = new OSVersion(4, 10);\n+    public static final OSVersion WINDOWS_ME = new OSVersion(4, 90);\n+    public static final OSVersion WINDOWS_2000 = new OSVersion(5, 0);\n+    public static final OSVersion WINDOWS_XP = new OSVersion(5, 1);\n+    public static final OSVersion WINDOWS_2003 = new OSVersion(5, 2);\n+    public static final OSVersion WINDOWS_VISTA = new OSVersion(6, 0);\n+\n+    private final int[] versionTokens;\n+\n+    public static OSVersion current() {\n+        if (Platform.isSolaris()) {\n+            return new OSVersion(getSolarisVersion());\n+        }\n+        return new OSVersion(Platform.getOsVersion());\n+    }\n+\n+    public OSVersion(int major, int minor) {\n+        versionTokens = new int[] {major, minor};\n+    }\n+\n+    public OSVersion(String version) {\n+        Pattern onlyDigits = Pattern.compile(\"^\\\\d+$\");\n+        this.versionTokens = Arrays.stream(version.split(\"-\")[0].split(\"\\\\.\"))\n+                                   .filter(onlyDigits.asPredicate())\n+                                   .mapToInt(Integer::parseInt)\n+                                   .toArray();\n+    }\n+\n+    private static String getSolarisVersion() {\n+        try {\n+            return Utils.distro();\n+        } catch (Throwable e) {\n+            System.out.println(\"First attempt failed with: \" + e.getMessage());\n+        }\n+\n+        \/\/ Try to get Solaris version from \/etc\/release\n+        try (BufferedReader in = new BufferedReader(AccessController.doPrivileged(\n+                (PrivilegedExceptionAction<FileReader>) () -> new FileReader(\"\/etc\/release\")))) {\n+            return in.readLine().trim().split(\" \")[2];\n+        } catch (PrivilegedActionException e) {\n+            System.out.println(\"Second attempt failed with: \" + e.getException().getMessage());\n+        } catch (Exception e) {\n+            System.out.println(\"Second attempt failed with: \" + e.getMessage());\n+        }\n+\n+        throw new RuntimeException(\"Unable to get Solaris version\");\n+    }\n+\n+    @Override\n+    public int compareTo(OSVersion o) {\n+        return Arrays.compare(this.versionTokens, o.versionTokens);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Arrays.hashCode(versionTokens);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        OSVersion osVersion = (OSVersion) o;\n+        return Arrays.equals(versionTokens, osVersion.versionTokens);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return Arrays.stream(versionTokens)\n+                     .mapToObj(String::valueOf)\n+                     .collect(Collectors.joining(\".\"));\n+    }\n+}\n+\n","filename":"test\/lib\/jdk\/test\/lib\/OSVersion.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -29,3 +29,0 @@\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Objects;\n@@ -33,1 +30,4 @@\n-import java.util.stream.Collectors;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n@@ -36,4 +36,3 @@\n-    public  static final String vmName      = System.getProperty(\"java.vm.name\");\n-    public  static final String vmInfo      = System.getProperty(\"java.vm.info\");\n-    private static final String osVersion   = System.getProperty(\"os.version\");\n-    private static       String[] osVersionTokens;\n+    public  static final String vmName      = privilegedGetProperty(\"java.vm.name\");\n+    public  static final String vmInfo      = privilegedGetProperty(\"java.vm.info\");\n+    private static final String osVersion   = privilegedGetProperty(\"os.version\");\n@@ -42,7 +41,12 @@\n-    private static final String osName      = System.getProperty(\"os.name\");\n-    private static final String dataModel   = System.getProperty(\"sun.arch.data.model\");\n-    private static final String vmVersion   = System.getProperty(\"java.vm.version\");\n-    private static final String jdkDebug    = System.getProperty(\"jdk.debug\");\n-    private static final String osArch      = System.getProperty(\"os.arch\");\n-    private static final String userName    = System.getProperty(\"user.name\");\n-    private static final String compiler    = System.getProperty(\"sun.management.compiler\");\n+    private static final String osName      = privilegedGetProperty(\"os.name\");\n+    private static final String dataModel   = privilegedGetProperty(\"sun.arch.data.model\");\n+    private static final String vmVersion   = privilegedGetProperty(\"java.vm.version\");\n+    private static final String jdkDebug    = privilegedGetProperty(\"jdk.debug\");\n+    private static final String osArch      = privilegedGetProperty(\"os.arch\");\n+    private static final String userName    = privilegedGetProperty(\"user.name\");\n+    private static final String compiler    = privilegedGetProperty(\"sun.management.compiler\");\n+\n+    private static String privilegedGetProperty(String key) {\n+        return AccessController.doPrivileged((\n+                PrivilegedAction<String>) () -> System.getProperty(key));\n+    }\n@@ -132,1 +136,1 @@\n-        osVersionTokens = osVersion.split(\"\\\\.\");\n+        String[] osVersionTokens = osVersion.split(\"\\\\.\");\n@@ -163,39 +167,0 @@\n-    \/**\n-     * Compares the platform version with the supplied version. The\n-     * version must be of the form a[.b[.c[.d...]]] where a, b, c, d, ...\n-     * are decimal integers.\n-     *\n-     * @throws NullPointerException if the parameter is null\n-     * @throws NumberFormatException if there is an error parsing either\n-     *         version as split into component strings\n-     * @return -1, 0, or 1 according to whether the platform version is\n-     *         less than, equal to, or greater than the supplied version\n-     *\/\n-    public static int compareOsVersion(String version) {\n-        if (osVersionTokens == null) init_version();\n-\n-        Objects.requireNonNull(version);\n-\n-        List<Integer> s1 = Arrays\n-            .stream(osVersionTokens)\n-            .map(Integer::valueOf)\n-            .collect(Collectors.toList());\n-        List<Integer> s2 = Arrays\n-            .stream(version.split(\"\\\\.\"))\n-            .map(Integer::valueOf)\n-            .collect(Collectors.toList());\n-\n-        int count = Math.max(s1.size(), s2.size());\n-        for (int i = 0; i < count; i++) {\n-            int i1 = i < s1.size() ? s1.get(i) : 0;\n-            int i2 = i < s2.size() ? s2.get(i) : 0;\n-            if (i1 > i2) {\n-                return 1;\n-            } else if (i2 > i1) {\n-                return -1;\n-            }\n-        }\n-\n-        return 0;\n-    }\n-\n@@ -300,1 +265,2 @@\n-            try (RandomAccessFile file = new RandomAccessFile(deny_ptrace, \"r\")) {\n+            try (RandomAccessFile file = AccessController.doPrivileged(\n+                    (PrivilegedExceptionAction<RandomAccessFile>) () -> new RandomAccessFile(deny_ptrace, \"r\"))) {\n@@ -304,0 +270,4 @@\n+            } catch (PrivilegedActionException e) {\n+                @SuppressWarnings(\"unchecked\")\n+                IOException t = (IOException) e.getException();\n+                throw t;\n@@ -314,1 +284,2 @@\n-            try (RandomAccessFile file = new RandomAccessFile(ptrace_scope, \"r\")) {\n+            try (RandomAccessFile file = AccessController.doPrivileged(\n+                    (PrivilegedExceptionAction<RandomAccessFile>) () -> new RandomAccessFile(ptrace_scope, \"r\"))) {\n@@ -323,0 +294,4 @@\n+            } catch (PrivilegedActionException e) {\n+                @SuppressWarnings(\"unchecked\")\n+                IOException t = (IOException) e.getException();\n+                throw t;\n","filename":"test\/lib\/jdk\/test\/lib\/Platform.java","additions":32,"deletions":57,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,3 @@\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n@@ -72,1 +75,1 @@\n-        return getOutput(processBuilder.start());\n+        return getOutput(privilegedStart(processBuilder));\n@@ -204,1 +207,1 @@\n-        Process p = processBuilder.start();\n+        Process p = privilegedStart(processBuilder);\n@@ -396,1 +399,1 @@\n-            p = pb.start();\n+            p = privilegedStart(pb);\n@@ -501,0 +504,11 @@\n+    private static Process privilegedStart(ProcessBuilder pb) throws IOException {\n+        try {\n+            return AccessController.doPrivileged(\n+                (PrivilegedExceptionAction<Process>) () -> pb.start());\n+        } catch (PrivilegedActionException e) {\n+            @SuppressWarnings(\"unchecked\")\n+            IOException t = (IOException) e.getException();\n+            throw t;\n+        }\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"}]}