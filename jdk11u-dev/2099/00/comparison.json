{"files":[{"patch":"@@ -46,1 +46,8 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attempts with delay on failure.\n+    \/\/ Be mindful of worst-case total time on test, which would be at\n+    \/\/ roughly (delay*attempts) milliseconds.\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 100);\n+    static final int WEAK_DELAY_MS = Math.max(1, Integer.getInteger(\"weakDelay\", 1));\n@@ -89,0 +96,10 @@\n+    static void weakDelay() {\n+        try {\n+            if (WEAK_DELAY_MS > 0) {\n+                Thread.sleep(WEAK_DELAY_MS);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n@@ -214,0 +231,1 @@\n+                if (!success) weakDelay();\n@@ -231,0 +249,1 @@\n+                if (!success) weakDelay();\n@@ -248,0 +267,1 @@\n+                if (!success) weakDelay();\n@@ -265,0 +285,1 @@\n+                if (!success) weakDelay();\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestBoolean.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -46,1 +46,8 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attempts with delay on failure.\n+    \/\/ Be mindful of worst-case total time on test, which would be at\n+    \/\/ roughly (delay*attempts) milliseconds.\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 100);\n+    static final int WEAK_DELAY_MS = Math.max(1, Integer.getInteger(\"weakDelay\", 1));\n@@ -89,0 +96,10 @@\n+    static void weakDelay() {\n+        try {\n+            if (WEAK_DELAY_MS > 0) {\n+                Thread.sleep(WEAK_DELAY_MS);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n@@ -243,0 +260,1 @@\n+                if (!success) weakDelay();\n@@ -260,0 +278,1 @@\n+                if (!success) weakDelay();\n@@ -277,0 +296,1 @@\n+                if (!success) weakDelay();\n@@ -294,0 +314,1 @@\n+                if (!success) weakDelay();\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestByte.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -46,1 +46,8 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attempts with delay on failure.\n+    \/\/ Be mindful of worst-case total time on test, which would be at\n+    \/\/ roughly (delay*attempts) milliseconds.\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 100);\n+    static final int WEAK_DELAY_MS = Math.max(1, Integer.getInteger(\"weakDelay\", 1));\n@@ -89,0 +96,10 @@\n+    static void weakDelay() {\n+        try {\n+            if (WEAK_DELAY_MS > 0) {\n+                Thread.sleep(WEAK_DELAY_MS);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n@@ -261,0 +278,1 @@\n+                if (!success) weakDelay();\n@@ -278,0 +296,1 @@\n+                if (!success) weakDelay();\n@@ -295,0 +314,1 @@\n+                if (!success) weakDelay();\n@@ -312,0 +332,1 @@\n+                if (!success) weakDelay();\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestChar.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -46,1 +46,8 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attempts with delay on failure.\n+    \/\/ Be mindful of worst-case total time on test, which would be at\n+    \/\/ roughly (delay*attempts) milliseconds.\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 100);\n+    static final int WEAK_DELAY_MS = Math.max(1, Integer.getInteger(\"weakDelay\", 1));\n@@ -89,0 +96,10 @@\n+    static void weakDelay() {\n+        try {\n+            if (WEAK_DELAY_MS > 0) {\n+                Thread.sleep(WEAK_DELAY_MS);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n@@ -243,0 +260,1 @@\n+                if (!success) weakDelay();\n@@ -260,0 +278,1 @@\n+                if (!success) weakDelay();\n@@ -277,0 +296,1 @@\n+                if (!success) weakDelay();\n@@ -294,0 +314,1 @@\n+                if (!success) weakDelay();\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestDouble.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -46,1 +46,8 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attempts with delay on failure.\n+    \/\/ Be mindful of worst-case total time on test, which would be at\n+    \/\/ roughly (delay*attempts) milliseconds.\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 100);\n+    static final int WEAK_DELAY_MS = Math.max(1, Integer.getInteger(\"weakDelay\", 1));\n@@ -89,0 +96,10 @@\n+    static void weakDelay() {\n+        try {\n+            if (WEAK_DELAY_MS > 0) {\n+                Thread.sleep(WEAK_DELAY_MS);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n@@ -243,0 +260,1 @@\n+                if (!success) weakDelay();\n@@ -260,0 +278,1 @@\n+                if (!success) weakDelay();\n@@ -277,0 +296,1 @@\n+                if (!success) weakDelay();\n@@ -294,0 +314,1 @@\n+                if (!success) weakDelay();\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestFloat.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -46,1 +46,8 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attempts with delay on failure.\n+    \/\/ Be mindful of worst-case total time on test, which would be at\n+    \/\/ roughly (delay*attempts) milliseconds.\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 100);\n+    static final int WEAK_DELAY_MS = Math.max(1, Integer.getInteger(\"weakDelay\", 1));\n@@ -89,0 +96,10 @@\n+    static void weakDelay() {\n+        try {\n+            if (WEAK_DELAY_MS > 0) {\n+                Thread.sleep(WEAK_DELAY_MS);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n@@ -261,0 +278,1 @@\n+                if (!success) weakDelay();\n@@ -278,0 +296,1 @@\n+                if (!success) weakDelay();\n@@ -295,0 +314,1 @@\n+                if (!success) weakDelay();\n@@ -312,0 +332,1 @@\n+                if (!success) weakDelay();\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestInt.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -46,1 +46,8 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attempts with delay on failure.\n+    \/\/ Be mindful of worst-case total time on test, which would be at\n+    \/\/ roughly (delay*attempts) milliseconds.\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 100);\n+    static final int WEAK_DELAY_MS = Math.max(1, Integer.getInteger(\"weakDelay\", 1));\n@@ -89,0 +96,10 @@\n+    static void weakDelay() {\n+        try {\n+            if (WEAK_DELAY_MS > 0) {\n+                Thread.sleep(WEAK_DELAY_MS);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n@@ -261,0 +278,1 @@\n+                if (!success) weakDelay();\n@@ -278,0 +296,1 @@\n+                if (!success) weakDelay();\n@@ -295,0 +314,1 @@\n+                if (!success) weakDelay();\n@@ -312,0 +332,1 @@\n+                if (!success) weakDelay();\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestLong.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -46,1 +46,8 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attempts with delay on failure.\n+    \/\/ Be mindful of worst-case total time on test, which would be at\n+    \/\/ roughly (delay*attempts) milliseconds.\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 100);\n+    static final int WEAK_DELAY_MS = Math.max(1, Integer.getInteger(\"weakDelay\", 1));\n@@ -89,0 +96,10 @@\n+    static void weakDelay() {\n+        try {\n+            if (WEAK_DELAY_MS > 0) {\n+                Thread.sleep(WEAK_DELAY_MS);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n@@ -214,0 +231,1 @@\n+                if (!success) weakDelay();\n@@ -231,0 +249,1 @@\n+                if (!success) weakDelay();\n@@ -248,0 +267,1 @@\n+                if (!success) weakDelay();\n@@ -265,0 +285,1 @@\n+                if (!success) weakDelay();\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestObject.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -46,1 +46,8 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attempts with delay on failure.\n+    \/\/ Be mindful of worst-case total time on test, which would be at\n+    \/\/ roughly (delay*attempts) milliseconds.\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 100);\n+    static final int WEAK_DELAY_MS = Math.max(1, Integer.getInteger(\"weakDelay\", 1));\n@@ -89,0 +96,10 @@\n+    static void weakDelay() {\n+        try {\n+            if (WEAK_DELAY_MS > 0) {\n+                Thread.sleep(WEAK_DELAY_MS);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n@@ -261,0 +278,1 @@\n+                if (!success) weakDelay();\n@@ -278,0 +296,1 @@\n+                if (!success) weakDelay();\n@@ -295,0 +314,1 @@\n+                if (!success) weakDelay();\n@@ -312,0 +332,1 @@\n+                if (!success) weakDelay();\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestShort.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -46,1 +46,8 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attempts with delay on failure.\n+    \/\/ Be mindful of worst-case total time on test, which would be at\n+    \/\/ roughly (delay*attempts) milliseconds.\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 100);\n+    static final int WEAK_DELAY_MS = Math.max(1, Integer.getInteger(\"weakDelay\", 1));\n@@ -89,0 +96,10 @@\n+    static void weakDelay() {\n+        try {\n+            if (WEAK_DELAY_MS > 0) {\n+                Thread.sleep(WEAK_DELAY_MS);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestBoolean.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -46,1 +46,8 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attempts with delay on failure.\n+    \/\/ Be mindful of worst-case total time on test, which would be at\n+    \/\/ roughly (delay*attempts) milliseconds.\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 100);\n+    static final int WEAK_DELAY_MS = Math.max(1, Integer.getInteger(\"weakDelay\", 1));\n@@ -89,0 +96,10 @@\n+    static void weakDelay() {\n+        try {\n+            if (WEAK_DELAY_MS > 0) {\n+                Thread.sleep(WEAK_DELAY_MS);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestByte.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -46,1 +46,8 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attempts with delay on failure.\n+    \/\/ Be mindful of worst-case total time on test, which would be at\n+    \/\/ roughly (delay*attempts) milliseconds.\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 100);\n+    static final int WEAK_DELAY_MS = Math.max(1, Integer.getInteger(\"weakDelay\", 1));\n@@ -89,0 +96,10 @@\n+    static void weakDelay() {\n+        try {\n+            if (WEAK_DELAY_MS > 0) {\n+                Thread.sleep(WEAK_DELAY_MS);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestChar.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -46,1 +46,8 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attempts with delay on failure.\n+    \/\/ Be mindful of worst-case total time on test, which would be at\n+    \/\/ roughly (delay*attempts) milliseconds.\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 100);\n+    static final int WEAK_DELAY_MS = Math.max(1, Integer.getInteger(\"weakDelay\", 1));\n@@ -89,0 +96,10 @@\n+    static void weakDelay() {\n+        try {\n+            if (WEAK_DELAY_MS > 0) {\n+                Thread.sleep(WEAK_DELAY_MS);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestDouble.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -46,1 +46,8 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attempts with delay on failure.\n+    \/\/ Be mindful of worst-case total time on test, which would be at\n+    \/\/ roughly (delay*attempts) milliseconds.\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 100);\n+    static final int WEAK_DELAY_MS = Math.max(1, Integer.getInteger(\"weakDelay\", 1));\n@@ -89,0 +96,10 @@\n+    static void weakDelay() {\n+        try {\n+            if (WEAK_DELAY_MS > 0) {\n+                Thread.sleep(WEAK_DELAY_MS);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestFloat.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -46,1 +46,8 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attempts with delay on failure.\n+    \/\/ Be mindful of worst-case total time on test, which would be at\n+    \/\/ roughly (delay*attempts) milliseconds.\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 100);\n+    static final int WEAK_DELAY_MS = Math.max(1, Integer.getInteger(\"weakDelay\", 1));\n@@ -89,0 +96,10 @@\n+    static void weakDelay() {\n+        try {\n+            if (WEAK_DELAY_MS > 0) {\n+                Thread.sleep(WEAK_DELAY_MS);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestInt.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -46,1 +46,8 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attempts with delay on failure.\n+    \/\/ Be mindful of worst-case total time on test, which would be at\n+    \/\/ roughly (delay*attempts) milliseconds.\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 100);\n+    static final int WEAK_DELAY_MS = Math.max(1, Integer.getInteger(\"weakDelay\", 1));\n@@ -89,0 +96,10 @@\n+    static void weakDelay() {\n+        try {\n+            if (WEAK_DELAY_MS > 0) {\n+                Thread.sleep(WEAK_DELAY_MS);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestLong.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -46,1 +46,8 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attempts with delay on failure.\n+    \/\/ Be mindful of worst-case total time on test, which would be at\n+    \/\/ roughly (delay*attempts) milliseconds.\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 100);\n+    static final int WEAK_DELAY_MS = Math.max(1, Integer.getInteger(\"weakDelay\", 1));\n@@ -89,0 +96,10 @@\n+    static void weakDelay() {\n+        try {\n+            if (WEAK_DELAY_MS > 0) {\n+                Thread.sleep(WEAK_DELAY_MS);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestObject.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -46,1 +46,8 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attempts with delay on failure.\n+    \/\/ Be mindful of worst-case total time on test, which would be at\n+    \/\/ roughly (delay*attempts) milliseconds.\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 100);\n+    static final int WEAK_DELAY_MS = Math.max(1, Integer.getInteger(\"weakDelay\", 1));\n@@ -89,0 +96,10 @@\n+    static void weakDelay() {\n+        try {\n+            if (WEAK_DELAY_MS > 0) {\n+                Thread.sleep(WEAK_DELAY_MS);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestShort.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -50,1 +50,8 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attempts with delay on failure.\n+    \/\/ Be mindful of worst-case total time on test, which would be at\n+    \/\/ roughly (delay*attempts) milliseconds.\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 100);\n+    static final int WEAK_DELAY_MS = Math.max(1, Integer.getInteger(\"weakDelay\", 1));\n@@ -93,0 +100,10 @@\n+    static void weakDelay() {\n+        try {\n+            if (WEAK_DELAY_MS > 0) {\n+                Thread.sleep(WEAK_DELAY_MS);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n@@ -305,0 +322,1 @@\n+                if (!success) weakDelay();\n@@ -322,0 +340,1 @@\n+                if (!success) weakDelay();\n@@ -339,0 +358,1 @@\n+                if (!success) weakDelay();\n@@ -356,0 +376,1 @@\n+                if (!success) weakDelay();\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/X-UnsafeAccessTest.java.template","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,8 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attempts with delay on failure.\n+    \/\/ Be mindful of worst-case total time on test, which would be at\n+    \/\/ roughly (delay*attempts) milliseconds.\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 100);\n+    static final int WEAK_DELAY_MS = Math.max(1, Integer.getInteger(\"weakDelay\", 1));\n@@ -493,0 +500,10 @@\n+\n+    static void weakDelay() {\n+        try {\n+            if (WEAK_DELAY_MS > 0) {\n+                Thread.sleep(WEAK_DELAY_MS);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleBaseTest.java","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -445,0 +445,1 @@\n+                if (!success) weakDelay();\n@@ -462,0 +463,1 @@\n+                if (!success) weakDelay();\n@@ -479,0 +481,1 @@\n+                if (!success) weakDelay();\n@@ -496,0 +499,1 @@\n+                if (!success) weakDelay();\n@@ -733,0 +737,1 @@\n+                if (!success) weakDelay();\n@@ -750,0 +755,1 @@\n+                if (!success) weakDelay();\n@@ -767,0 +773,1 @@\n+                if (!success) weakDelay();\n@@ -784,0 +791,1 @@\n+                if (!success) weakDelay();\n@@ -1024,0 +1032,1 @@\n+                    if (!success) weakDelay();\n@@ -1041,0 +1050,1 @@\n+                    if (!success) weakDelay();\n@@ -1058,0 +1068,1 @@\n+                    if (!success) weakDelay();\n@@ -1075,0 +1086,1 @@\n+                    if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessBoolean.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -423,0 +423,1 @@\n+                if (!success) weakDelay();\n@@ -440,0 +441,1 @@\n+                if (!success) weakDelay();\n@@ -457,0 +459,1 @@\n+                if (!success) weakDelay();\n@@ -474,0 +477,1 @@\n+                if (!success) weakDelay();\n@@ -727,0 +731,1 @@\n+                if (!success) weakDelay();\n@@ -744,0 +749,1 @@\n+                if (!success) weakDelay();\n@@ -761,0 +767,1 @@\n+                if (!success) weakDelay();\n@@ -778,0 +785,1 @@\n+                if (!success) weakDelay();\n@@ -1034,0 +1042,1 @@\n+                    if (!success) weakDelay();\n@@ -1051,0 +1060,1 @@\n+                    if (!success) weakDelay();\n@@ -1068,0 +1078,1 @@\n+                    if (!success) weakDelay();\n@@ -1085,0 +1096,1 @@\n+                    if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessByte.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -423,0 +423,1 @@\n+                if (!success) weakDelay();\n@@ -440,0 +441,1 @@\n+                if (!success) weakDelay();\n@@ -457,0 +459,1 @@\n+                if (!success) weakDelay();\n@@ -474,0 +477,1 @@\n+                if (!success) weakDelay();\n@@ -727,0 +731,1 @@\n+                if (!success) weakDelay();\n@@ -744,0 +749,1 @@\n+                if (!success) weakDelay();\n@@ -761,0 +767,1 @@\n+                if (!success) weakDelay();\n@@ -778,0 +785,1 @@\n+                if (!success) weakDelay();\n@@ -1034,0 +1042,1 @@\n+                    if (!success) weakDelay();\n@@ -1051,0 +1060,1 @@\n+                    if (!success) weakDelay();\n@@ -1068,0 +1078,1 @@\n+                    if (!success) weakDelay();\n@@ -1085,0 +1096,1 @@\n+                    if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessChar.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -493,0 +493,1 @@\n+                if (!success) weakDelay();\n@@ -510,0 +511,1 @@\n+                if (!success) weakDelay();\n@@ -527,0 +529,1 @@\n+                if (!success) weakDelay();\n@@ -544,0 +547,1 @@\n+                if (!success) weakDelay();\n@@ -749,0 +753,1 @@\n+                if (!success) weakDelay();\n@@ -766,0 +771,1 @@\n+                if (!success) weakDelay();\n@@ -783,0 +789,1 @@\n+                if (!success) weakDelay();\n@@ -800,0 +807,1 @@\n+                if (!success) weakDelay();\n@@ -1008,0 +1016,1 @@\n+                    if (!success) weakDelay();\n@@ -1025,0 +1034,1 @@\n+                    if (!success) weakDelay();\n@@ -1042,0 +1052,1 @@\n+                    if (!success) weakDelay();\n@@ -1059,0 +1070,1 @@\n+                    if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessDouble.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -493,0 +493,1 @@\n+                if (!success) weakDelay();\n@@ -510,0 +511,1 @@\n+                if (!success) weakDelay();\n@@ -527,0 +529,1 @@\n+                if (!success) weakDelay();\n@@ -544,0 +547,1 @@\n+                if (!success) weakDelay();\n@@ -749,0 +753,1 @@\n+                if (!success) weakDelay();\n@@ -766,0 +771,1 @@\n+                if (!success) weakDelay();\n@@ -783,0 +789,1 @@\n+                if (!success) weakDelay();\n@@ -800,0 +807,1 @@\n+                if (!success) weakDelay();\n@@ -1008,0 +1016,1 @@\n+                    if (!success) weakDelay();\n@@ -1025,0 +1034,1 @@\n+                    if (!success) weakDelay();\n@@ -1042,0 +1052,1 @@\n+                    if (!success) weakDelay();\n@@ -1059,0 +1070,1 @@\n+                    if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessFloat.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -423,0 +423,1 @@\n+                if (!success) weakDelay();\n@@ -440,0 +441,1 @@\n+                if (!success) weakDelay();\n@@ -457,0 +459,1 @@\n+                if (!success) weakDelay();\n@@ -474,0 +477,1 @@\n+                if (!success) weakDelay();\n@@ -727,0 +731,1 @@\n+                if (!success) weakDelay();\n@@ -744,0 +749,1 @@\n+                if (!success) weakDelay();\n@@ -761,0 +767,1 @@\n+                if (!success) weakDelay();\n@@ -778,0 +785,1 @@\n+                if (!success) weakDelay();\n@@ -1034,0 +1042,1 @@\n+                    if (!success) weakDelay();\n@@ -1051,0 +1060,1 @@\n+                    if (!success) weakDelay();\n@@ -1068,0 +1078,1 @@\n+                    if (!success) weakDelay();\n@@ -1085,0 +1096,1 @@\n+                    if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessInt.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -423,0 +423,1 @@\n+                if (!success) weakDelay();\n@@ -440,0 +441,1 @@\n+                if (!success) weakDelay();\n@@ -457,0 +459,1 @@\n+                if (!success) weakDelay();\n@@ -474,0 +477,1 @@\n+                if (!success) weakDelay();\n@@ -727,0 +731,1 @@\n+                if (!success) weakDelay();\n@@ -744,0 +749,1 @@\n+                if (!success) weakDelay();\n@@ -761,0 +767,1 @@\n+                if (!success) weakDelay();\n@@ -778,0 +785,1 @@\n+                if (!success) weakDelay();\n@@ -1034,0 +1042,1 @@\n+                    if (!success) weakDelay();\n@@ -1051,0 +1060,1 @@\n+                    if (!success) weakDelay();\n@@ -1068,0 +1078,1 @@\n+                    if (!success) weakDelay();\n@@ -1085,0 +1096,1 @@\n+                    if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessLong.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -423,0 +423,1 @@\n+                if (!success) weakDelay();\n@@ -440,0 +441,1 @@\n+                if (!success) weakDelay();\n@@ -457,0 +459,1 @@\n+                if (!success) weakDelay();\n@@ -474,0 +477,1 @@\n+                if (!success) weakDelay();\n@@ -727,0 +731,1 @@\n+                if (!success) weakDelay();\n@@ -744,0 +749,1 @@\n+                if (!success) weakDelay();\n@@ -761,0 +767,1 @@\n+                if (!success) weakDelay();\n@@ -778,0 +785,1 @@\n+                if (!success) weakDelay();\n@@ -1034,0 +1042,1 @@\n+                    if (!success) weakDelay();\n@@ -1051,0 +1060,1 @@\n+                    if (!success) weakDelay();\n@@ -1068,0 +1078,1 @@\n+                    if (!success) weakDelay();\n@@ -1085,0 +1096,1 @@\n+                    if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessShort.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -522,0 +522,1 @@\n+                if (!success) weakDelay();\n@@ -539,0 +540,1 @@\n+                if (!success) weakDelay();\n@@ -556,0 +558,1 @@\n+                if (!success) weakDelay();\n@@ -573,0 +576,1 @@\n+                if (!success) weakDelay();\n@@ -762,0 +766,1 @@\n+                if (!success) weakDelay();\n@@ -779,0 +784,1 @@\n+                if (!success) weakDelay();\n@@ -796,0 +802,1 @@\n+                if (!success) weakDelay();\n@@ -813,0 +820,1 @@\n+                if (!success) weakDelay();\n@@ -1005,0 +1013,1 @@\n+                    if (!success) weakDelay();\n@@ -1022,0 +1031,1 @@\n+                    if (!success) weakDelay();\n@@ -1039,0 +1049,1 @@\n+                    if (!success) weakDelay();\n@@ -1056,0 +1067,1 @@\n+                    if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessString.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1053,0 +1053,1 @@\n+                        if (!success) weakDelay();\n@@ -1070,0 +1071,1 @@\n+                        if (!success) weakDelay();\n@@ -1087,0 +1089,1 @@\n+                        if (!success) weakDelay();\n@@ -1104,0 +1107,1 @@\n+                        if (!success) weakDelay();\n@@ -1254,0 +1258,1 @@\n+                        if (!success) weakDelay();\n@@ -1271,0 +1276,1 @@\n+                        if (!success) weakDelay();\n@@ -1288,0 +1294,1 @@\n+                        if (!success) weakDelay();\n@@ -1305,0 +1312,1 @@\n+                        if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsDouble.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1053,0 +1053,1 @@\n+                        if (!success) weakDelay();\n@@ -1070,0 +1071,1 @@\n+                        if (!success) weakDelay();\n@@ -1087,0 +1089,1 @@\n+                        if (!success) weakDelay();\n@@ -1104,0 +1107,1 @@\n+                        if (!success) weakDelay();\n@@ -1254,0 +1258,1 @@\n+                        if (!success) weakDelay();\n@@ -1271,0 +1276,1 @@\n+                        if (!success) weakDelay();\n@@ -1288,0 +1294,1 @@\n+                        if (!success) weakDelay();\n@@ -1305,0 +1312,1 @@\n+                        if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsFloat.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1237,0 +1237,1 @@\n+                        if (!success) weakDelay();\n@@ -1254,0 +1255,1 @@\n+                        if (!success) weakDelay();\n@@ -1271,0 +1273,1 @@\n+                        if (!success) weakDelay();\n@@ -1288,0 +1291,1 @@\n+                        if (!success) weakDelay();\n@@ -1548,0 +1552,1 @@\n+                        if (!success) weakDelay();\n@@ -1565,0 +1570,1 @@\n+                        if (!success) weakDelay();\n@@ -1582,0 +1588,1 @@\n+                        if (!success) weakDelay();\n@@ -1599,0 +1606,1 @@\n+                        if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsInt.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1237,0 +1237,1 @@\n+                        if (!success) weakDelay();\n@@ -1254,0 +1255,1 @@\n+                        if (!success) weakDelay();\n@@ -1271,0 +1273,1 @@\n+                        if (!success) weakDelay();\n@@ -1288,0 +1291,1 @@\n+                        if (!success) weakDelay();\n@@ -1548,0 +1552,1 @@\n+                        if (!success) weakDelay();\n@@ -1565,0 +1570,1 @@\n+                        if (!success) weakDelay();\n@@ -1582,0 +1588,1 @@\n+                        if (!success) weakDelay();\n@@ -1599,0 +1606,1 @@\n+                        if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsLong.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.invoke.MethodHandle;\n@@ -211,0 +212,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -213,1 +215,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(recv, true, false);\n+                success = (boolean) mh.invokeExact(recv, true, false);\n+                if (!success) weakDelay();\n@@ -228,0 +231,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -230,1 +234,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(recv, false, true);\n+                success = (boolean) mh.invokeExact(recv, false, true);\n+                if (!success) weakDelay();\n@@ -245,0 +250,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -247,1 +253,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(recv, true, false);\n+                success = (boolean) mh.invokeExact(recv, true, false);\n+                if (!success) weakDelay();\n@@ -263,0 +270,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -264,1 +272,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(recv, false, true);\n+                success = (boolean) mh.invokeExact(recv, false, true);\n+                if (!success) weakDelay();\n@@ -473,0 +482,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -475,1 +485,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(true, false);\n+                success = (boolean) mh.invokeExact(true, false);\n+                if (!success) weakDelay();\n@@ -490,0 +501,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -492,1 +504,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(false, true);\n+                success = (boolean) mh.invokeExact(false, true);\n+                if (!success) weakDelay();\n@@ -500,1 +513,2 @@\n-            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(false, false);\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n+            boolean success = (boolean) mh.invokeExact(false, false);\n@@ -507,0 +521,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -509,1 +524,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(true, false);\n+                success = (boolean) mh.invokeExact(true, false);\n+                if (!success) weakDelay();\n@@ -524,0 +540,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -526,1 +543,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(false, true);\n+                success = (boolean) mh.invokeExact(false, true);\n+                if (!success) weakDelay();\n@@ -760,0 +778,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -762,1 +781,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(array, i, true, false);\n+                    success = (boolean) mh.invokeExact(array, i, true, false);\n+                    if (!success) weakDelay();\n@@ -777,0 +797,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -779,1 +800,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(array, i, false, true);\n+                    success = (boolean) mh.invokeExact(array, i, false, true);\n+                    if (!success) weakDelay();\n@@ -794,0 +816,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -796,1 +819,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(array, i, true, false);\n+                    success = (boolean) mh.invokeExact(array, i, true, false);\n+                    if (!success) weakDelay();\n@@ -811,0 +835,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -813,1 +838,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(array, i, false, true);\n+                    success = (boolean) mh.invokeExact(array, i, false, true);\n+                    if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessBoolean.java","additions":39,"deletions":13,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.invoke.MethodHandle;\n@@ -211,0 +212,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -213,1 +215,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(recv, (byte)0x01, (byte)0x23);\n+                success = (boolean) mh.invokeExact(recv, (byte)0x01, (byte)0x23);\n+                if (!success) weakDelay();\n@@ -228,0 +231,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -230,1 +234,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(recv, (byte)0x23, (byte)0x01);\n+                success = (boolean) mh.invokeExact(recv, (byte)0x23, (byte)0x01);\n+                if (!success) weakDelay();\n@@ -245,0 +250,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -247,1 +253,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(recv, (byte)0x01, (byte)0x23);\n+                success = (boolean) mh.invokeExact(recv, (byte)0x01, (byte)0x23);\n+                if (!success) weakDelay();\n@@ -263,0 +270,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -264,1 +272,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(recv, (byte)0x23, (byte)0x01);\n+                success = (boolean) mh.invokeExact(recv, (byte)0x23, (byte)0x01);\n+                if (!success) weakDelay();\n@@ -495,0 +504,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -497,1 +507,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact((byte)0x01, (byte)0x23);\n+                success = (boolean) mh.invokeExact((byte)0x01, (byte)0x23);\n+                if (!success) weakDelay();\n@@ -512,0 +523,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -514,1 +526,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact((byte)0x23, (byte)0x01);\n+                success = (boolean) mh.invokeExact((byte)0x23, (byte)0x01);\n+                if (!success) weakDelay();\n@@ -522,1 +535,2 @@\n-            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact((byte)0x23, (byte)0x45);\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n+            boolean success = (boolean) mh.invokeExact((byte)0x23, (byte)0x45);\n@@ -529,0 +543,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -531,1 +546,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact((byte)0x01, (byte)0x23);\n+                success = (boolean) mh.invokeExact((byte)0x01, (byte)0x23);\n+                if (!success) weakDelay();\n@@ -546,0 +562,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -548,1 +565,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact((byte)0x23, (byte)0x01);\n+                success = (boolean) mh.invokeExact((byte)0x23, (byte)0x01);\n+                if (!success) weakDelay();\n@@ -804,0 +822,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -806,1 +825,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(array, i, (byte)0x01, (byte)0x23);\n+                    success = (boolean) mh.invokeExact(array, i, (byte)0x01, (byte)0x23);\n+                    if (!success) weakDelay();\n@@ -821,0 +841,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -823,1 +844,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(array, i, (byte)0x23, (byte)0x01);\n+                    success = (boolean) mh.invokeExact(array, i, (byte)0x23, (byte)0x01);\n+                    if (!success) weakDelay();\n@@ -838,0 +860,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -840,1 +863,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(array, i, (byte)0x01, (byte)0x23);\n+                    success = (boolean) mh.invokeExact(array, i, (byte)0x01, (byte)0x23);\n+                    if (!success) weakDelay();\n@@ -855,0 +879,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -857,1 +882,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(array, i, (byte)0x23, (byte)0x01);\n+                    success = (boolean) mh.invokeExact(array, i, (byte)0x23, (byte)0x01);\n+                    if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessByte.java","additions":39,"deletions":13,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.invoke.MethodHandle;\n@@ -211,0 +212,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -213,1 +215,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(recv, '\\u0123', '\\u4567');\n+                success = (boolean) mh.invokeExact(recv, '\\u0123', '\\u4567');\n+                if (!success) weakDelay();\n@@ -228,0 +231,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -230,1 +234,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(recv, '\\u4567', '\\u0123');\n+                success = (boolean) mh.invokeExact(recv, '\\u4567', '\\u0123');\n+                if (!success) weakDelay();\n@@ -245,0 +250,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -247,1 +253,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(recv, '\\u0123', '\\u4567');\n+                success = (boolean) mh.invokeExact(recv, '\\u0123', '\\u4567');\n+                if (!success) weakDelay();\n@@ -263,0 +270,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -264,1 +272,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(recv, '\\u4567', '\\u0123');\n+                success = (boolean) mh.invokeExact(recv, '\\u4567', '\\u0123');\n+                if (!success) weakDelay();\n@@ -495,0 +504,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -497,1 +507,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact('\\u0123', '\\u4567');\n+                success = (boolean) mh.invokeExact('\\u0123', '\\u4567');\n+                if (!success) weakDelay();\n@@ -512,0 +523,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -514,1 +526,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact('\\u4567', '\\u0123');\n+                success = (boolean) mh.invokeExact('\\u4567', '\\u0123');\n+                if (!success) weakDelay();\n@@ -522,1 +535,2 @@\n-            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact('\\u4567', '\\u89AB');\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n+            boolean success = (boolean) mh.invokeExact('\\u4567', '\\u89AB');\n@@ -529,0 +543,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -531,1 +546,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact('\\u0123', '\\u4567');\n+                success = (boolean) mh.invokeExact('\\u0123', '\\u4567');\n+                if (!success) weakDelay();\n@@ -546,0 +562,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -548,1 +565,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact('\\u4567', '\\u0123');\n+                success = (boolean) mh.invokeExact('\\u4567', '\\u0123');\n+                if (!success) weakDelay();\n@@ -804,0 +822,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -806,1 +825,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(array, i, '\\u0123', '\\u4567');\n+                    success = (boolean) mh.invokeExact(array, i, '\\u0123', '\\u4567');\n+                    if (!success) weakDelay();\n@@ -821,0 +841,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -823,1 +844,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(array, i, '\\u4567', '\\u0123');\n+                    success = (boolean) mh.invokeExact(array, i, '\\u4567', '\\u0123');\n+                    if (!success) weakDelay();\n@@ -838,0 +860,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -840,1 +863,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(array, i, '\\u0123', '\\u4567');\n+                    success = (boolean) mh.invokeExact(array, i, '\\u0123', '\\u4567');\n+                    if (!success) weakDelay();\n@@ -855,0 +879,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -857,1 +882,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(array, i, '\\u4567', '\\u0123');\n+                    success = (boolean) mh.invokeExact(array, i, '\\u4567', '\\u0123');\n+                    if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessChar.java","additions":39,"deletions":13,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.invoke.MethodHandle;\n@@ -211,0 +212,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -213,1 +215,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(recv, 1.0d, 2.0d);\n+                success = (boolean) mh.invokeExact(recv, 1.0d, 2.0d);\n+                if (!success) weakDelay();\n@@ -228,0 +231,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -230,1 +234,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(recv, 2.0d, 1.0d);\n+                success = (boolean) mh.invokeExact(recv, 2.0d, 1.0d);\n+                if (!success) weakDelay();\n@@ -245,0 +250,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -247,1 +253,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(recv, 1.0d, 2.0d);\n+                success = (boolean) mh.invokeExact(recv, 1.0d, 2.0d);\n+                if (!success) weakDelay();\n@@ -263,0 +270,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -264,1 +272,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(recv, 2.0d, 1.0d);\n+                success = (boolean) mh.invokeExact(recv, 2.0d, 1.0d);\n+                if (!success) weakDelay();\n@@ -417,0 +426,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -419,1 +429,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(1.0d, 2.0d);\n+                success = (boolean) mh.invokeExact(1.0d, 2.0d);\n+                if (!success) weakDelay();\n@@ -434,0 +445,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -436,1 +448,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(2.0d, 1.0d);\n+                success = (boolean) mh.invokeExact(2.0d, 1.0d);\n+                if (!success) weakDelay();\n@@ -444,1 +457,2 @@\n-            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(2.0d, 3.0d);\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n+            boolean success = (boolean) mh.invokeExact(2.0d, 3.0d);\n@@ -451,0 +465,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -453,1 +468,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(1.0d, 2.0d);\n+                success = (boolean) mh.invokeExact(1.0d, 2.0d);\n+                if (!success) weakDelay();\n@@ -468,0 +484,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -470,1 +487,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(2.0d, 1.0d);\n+                success = (boolean) mh.invokeExact(2.0d, 1.0d);\n+                if (!success) weakDelay();\n@@ -648,0 +666,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -650,1 +669,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(array, i, 1.0d, 2.0d);\n+                    success = (boolean) mh.invokeExact(array, i, 1.0d, 2.0d);\n+                    if (!success) weakDelay();\n@@ -665,0 +685,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -667,1 +688,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(array, i, 2.0d, 1.0d);\n+                    success = (boolean) mh.invokeExact(array, i, 2.0d, 1.0d);\n+                    if (!success) weakDelay();\n@@ -682,0 +704,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -684,1 +707,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(array, i, 1.0d, 2.0d);\n+                    success = (boolean) mh.invokeExact(array, i, 1.0d, 2.0d);\n+                    if (!success) weakDelay();\n@@ -699,0 +723,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -701,1 +726,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(array, i, 2.0d, 1.0d);\n+                    success = (boolean) mh.invokeExact(array, i, 2.0d, 1.0d);\n+                    if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessDouble.java","additions":39,"deletions":13,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.invoke.MethodHandle;\n@@ -211,0 +212,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -213,1 +215,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(recv, 1.0f, 2.0f);\n+                success = (boolean) mh.invokeExact(recv, 1.0f, 2.0f);\n+                if (!success) weakDelay();\n@@ -228,0 +231,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -230,1 +234,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(recv, 2.0f, 1.0f);\n+                success = (boolean) mh.invokeExact(recv, 2.0f, 1.0f);\n+                if (!success) weakDelay();\n@@ -245,0 +250,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -247,1 +253,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(recv, 1.0f, 2.0f);\n+                success = (boolean) mh.invokeExact(recv, 1.0f, 2.0f);\n+                if (!success) weakDelay();\n@@ -263,0 +270,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -264,1 +272,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(recv, 2.0f, 1.0f);\n+                success = (boolean) mh.invokeExact(recv, 2.0f, 1.0f);\n+                if (!success) weakDelay();\n@@ -417,0 +426,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -419,1 +429,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(1.0f, 2.0f);\n+                success = (boolean) mh.invokeExact(1.0f, 2.0f);\n+                if (!success) weakDelay();\n@@ -434,0 +445,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -436,1 +448,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(2.0f, 1.0f);\n+                success = (boolean) mh.invokeExact(2.0f, 1.0f);\n+                if (!success) weakDelay();\n@@ -444,1 +457,2 @@\n-            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(2.0f, 3.0f);\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n+            boolean success = (boolean) mh.invokeExact(2.0f, 3.0f);\n@@ -451,0 +465,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -453,1 +468,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(1.0f, 2.0f);\n+                success = (boolean) mh.invokeExact(1.0f, 2.0f);\n+                if (!success) weakDelay();\n@@ -468,0 +484,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -470,1 +487,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(2.0f, 1.0f);\n+                success = (boolean) mh.invokeExact(2.0f, 1.0f);\n+                if (!success) weakDelay();\n@@ -648,0 +666,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -650,1 +669,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(array, i, 1.0f, 2.0f);\n+                    success = (boolean) mh.invokeExact(array, i, 1.0f, 2.0f);\n+                    if (!success) weakDelay();\n@@ -665,0 +685,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -667,1 +688,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(array, i, 2.0f, 1.0f);\n+                    success = (boolean) mh.invokeExact(array, i, 2.0f, 1.0f);\n+                    if (!success) weakDelay();\n@@ -682,0 +704,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -684,1 +707,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(array, i, 1.0f, 2.0f);\n+                    success = (boolean) mh.invokeExact(array, i, 1.0f, 2.0f);\n+                    if (!success) weakDelay();\n@@ -699,0 +723,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -701,1 +726,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(array, i, 2.0f, 1.0f);\n+                    success = (boolean) mh.invokeExact(array, i, 2.0f, 1.0f);\n+                    if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessFloat.java","additions":39,"deletions":13,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.invoke.MethodHandle;\n@@ -211,0 +212,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -213,1 +215,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(recv, 0x01234567, 0x89ABCDEF);\n+                success = (boolean) mh.invokeExact(recv, 0x01234567, 0x89ABCDEF);\n+                if (!success) weakDelay();\n@@ -228,0 +231,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -230,1 +234,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(recv, 0x89ABCDEF, 0x01234567);\n+                success = (boolean) mh.invokeExact(recv, 0x89ABCDEF, 0x01234567);\n+                if (!success) weakDelay();\n@@ -245,0 +250,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -247,1 +253,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(recv, 0x01234567, 0x89ABCDEF);\n+                success = (boolean) mh.invokeExact(recv, 0x01234567, 0x89ABCDEF);\n+                if (!success) weakDelay();\n@@ -263,0 +270,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -264,1 +272,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(recv, 0x89ABCDEF, 0x01234567);\n+                success = (boolean) mh.invokeExact(recv, 0x89ABCDEF, 0x01234567);\n+                if (!success) weakDelay();\n@@ -495,0 +504,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -497,1 +507,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(0x01234567, 0x89ABCDEF);\n+                success = (boolean) mh.invokeExact(0x01234567, 0x89ABCDEF);\n+                if (!success) weakDelay();\n@@ -512,0 +523,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -514,1 +526,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(0x89ABCDEF, 0x01234567);\n+                success = (boolean) mh.invokeExact(0x89ABCDEF, 0x01234567);\n+                if (!success) weakDelay();\n@@ -522,1 +535,2 @@\n-            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(0x89ABCDEF, 0xCAFEBABE);\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n+            boolean success = (boolean) mh.invokeExact(0x89ABCDEF, 0xCAFEBABE);\n@@ -529,0 +543,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -531,1 +546,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(0x01234567, 0x89ABCDEF);\n+                success = (boolean) mh.invokeExact(0x01234567, 0x89ABCDEF);\n+                if (!success) weakDelay();\n@@ -546,0 +562,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -548,1 +565,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(0x89ABCDEF, 0x01234567);\n+                success = (boolean) mh.invokeExact(0x89ABCDEF, 0x01234567);\n+                if (!success) weakDelay();\n@@ -804,0 +822,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -806,1 +825,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(array, i, 0x01234567, 0x89ABCDEF);\n+                    success = (boolean) mh.invokeExact(array, i, 0x01234567, 0x89ABCDEF);\n+                    if (!success) weakDelay();\n@@ -821,0 +841,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -823,1 +844,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(array, i, 0x89ABCDEF, 0x01234567);\n+                    success = (boolean) mh.invokeExact(array, i, 0x89ABCDEF, 0x01234567);\n+                    if (!success) weakDelay();\n@@ -838,0 +860,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -840,1 +863,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(array, i, 0x01234567, 0x89ABCDEF);\n+                    success = (boolean) mh.invokeExact(array, i, 0x01234567, 0x89ABCDEF);\n+                    if (!success) weakDelay();\n@@ -855,0 +879,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -857,1 +882,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(array, i, 0x89ABCDEF, 0x01234567);\n+                    success = (boolean) mh.invokeExact(array, i, 0x89ABCDEF, 0x01234567);\n+                    if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessInt.java","additions":39,"deletions":13,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.invoke.MethodHandle;\n@@ -211,0 +212,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -213,1 +215,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(recv, 0x0123456789ABCDEFL, 0xCAFEBABECAFEBABEL);\n+                success = (boolean) mh.invokeExact(recv, 0x0123456789ABCDEFL, 0xCAFEBABECAFEBABEL);\n+                if (!success) weakDelay();\n@@ -228,0 +231,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -230,1 +234,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(recv, 0xCAFEBABECAFEBABEL, 0x0123456789ABCDEFL);\n+                success = (boolean) mh.invokeExact(recv, 0xCAFEBABECAFEBABEL, 0x0123456789ABCDEFL);\n+                if (!success) weakDelay();\n@@ -245,0 +250,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -247,1 +253,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(recv, 0x0123456789ABCDEFL, 0xCAFEBABECAFEBABEL);\n+                success = (boolean) mh.invokeExact(recv, 0x0123456789ABCDEFL, 0xCAFEBABECAFEBABEL);\n+                if (!success) weakDelay();\n@@ -263,0 +270,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -264,1 +272,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(recv, 0xCAFEBABECAFEBABEL, 0x0123456789ABCDEFL);\n+                success = (boolean) mh.invokeExact(recv, 0xCAFEBABECAFEBABEL, 0x0123456789ABCDEFL);\n+                if (!success) weakDelay();\n@@ -495,0 +504,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -497,1 +507,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(0x0123456789ABCDEFL, 0xCAFEBABECAFEBABEL);\n+                success = (boolean) mh.invokeExact(0x0123456789ABCDEFL, 0xCAFEBABECAFEBABEL);\n+                if (!success) weakDelay();\n@@ -512,0 +523,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -514,1 +526,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(0xCAFEBABECAFEBABEL, 0x0123456789ABCDEFL);\n+                success = (boolean) mh.invokeExact(0xCAFEBABECAFEBABEL, 0x0123456789ABCDEFL);\n+                if (!success) weakDelay();\n@@ -522,1 +535,2 @@\n-            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(0xCAFEBABECAFEBABEL, 0xDEADBEEFDEADBEEFL);\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n+            boolean success = (boolean) mh.invokeExact(0xCAFEBABECAFEBABEL, 0xDEADBEEFDEADBEEFL);\n@@ -529,0 +543,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -531,1 +546,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(0x0123456789ABCDEFL, 0xCAFEBABECAFEBABEL);\n+                success = (boolean) mh.invokeExact(0x0123456789ABCDEFL, 0xCAFEBABECAFEBABEL);\n+                if (!success) weakDelay();\n@@ -546,0 +562,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -548,1 +565,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(0xCAFEBABECAFEBABEL, 0x0123456789ABCDEFL);\n+                success = (boolean) mh.invokeExact(0xCAFEBABECAFEBABEL, 0x0123456789ABCDEFL);\n+                if (!success) weakDelay();\n@@ -804,0 +822,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -806,1 +825,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(array, i, 0x0123456789ABCDEFL, 0xCAFEBABECAFEBABEL);\n+                    success = (boolean) mh.invokeExact(array, i, 0x0123456789ABCDEFL, 0xCAFEBABECAFEBABEL);\n+                    if (!success) weakDelay();\n@@ -821,0 +841,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -823,1 +844,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(array, i, 0xCAFEBABECAFEBABEL, 0x0123456789ABCDEFL);\n+                    success = (boolean) mh.invokeExact(array, i, 0xCAFEBABECAFEBABEL, 0x0123456789ABCDEFL);\n+                    if (!success) weakDelay();\n@@ -838,0 +860,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -840,1 +863,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(array, i, 0x0123456789ABCDEFL, 0xCAFEBABECAFEBABEL);\n+                    success = (boolean) mh.invokeExact(array, i, 0x0123456789ABCDEFL, 0xCAFEBABECAFEBABEL);\n+                    if (!success) weakDelay();\n@@ -855,0 +879,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -857,1 +882,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(array, i, 0xCAFEBABECAFEBABEL, 0x0123456789ABCDEFL);\n+                    success = (boolean) mh.invokeExact(array, i, 0xCAFEBABECAFEBABEL, 0x0123456789ABCDEFL);\n+                    if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessLong.java","additions":39,"deletions":13,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.invoke.MethodHandle;\n@@ -211,0 +212,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -213,1 +215,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(recv, (short)0x0123, (short)0x4567);\n+                success = (boolean) mh.invokeExact(recv, (short)0x0123, (short)0x4567);\n+                if (!success) weakDelay();\n@@ -228,0 +231,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -230,1 +234,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(recv, (short)0x4567, (short)0x0123);\n+                success = (boolean) mh.invokeExact(recv, (short)0x4567, (short)0x0123);\n+                if (!success) weakDelay();\n@@ -245,0 +250,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -247,1 +253,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(recv, (short)0x0123, (short)0x4567);\n+                success = (boolean) mh.invokeExact(recv, (short)0x0123, (short)0x4567);\n+                if (!success) weakDelay();\n@@ -263,0 +270,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -264,1 +272,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(recv, (short)0x4567, (short)0x0123);\n+                success = (boolean) mh.invokeExact(recv, (short)0x4567, (short)0x0123);\n+                if (!success) weakDelay();\n@@ -495,0 +504,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -497,1 +507,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact((short)0x0123, (short)0x4567);\n+                success = (boolean) mh.invokeExact((short)0x0123, (short)0x4567);\n+                if (!success) weakDelay();\n@@ -512,0 +523,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -514,1 +526,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact((short)0x4567, (short)0x0123);\n+                success = (boolean) mh.invokeExact((short)0x4567, (short)0x0123);\n+                if (!success) weakDelay();\n@@ -522,1 +535,2 @@\n-            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact((short)0x4567, (short)0x89AB);\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n+            boolean success = (boolean) mh.invokeExact((short)0x4567, (short)0x89AB);\n@@ -529,0 +543,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -531,1 +546,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact((short)0x0123, (short)0x4567);\n+                success = (boolean) mh.invokeExact((short)0x0123, (short)0x4567);\n+                if (!success) weakDelay();\n@@ -546,0 +562,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -548,1 +565,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact((short)0x4567, (short)0x0123);\n+                success = (boolean) mh.invokeExact((short)0x4567, (short)0x0123);\n+                if (!success) weakDelay();\n@@ -804,0 +822,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -806,1 +825,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(array, i, (short)0x0123, (short)0x4567);\n+                    success = (boolean) mh.invokeExact(array, i, (short)0x0123, (short)0x4567);\n+                    if (!success) weakDelay();\n@@ -821,0 +841,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -823,1 +844,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(array, i, (short)0x4567, (short)0x0123);\n+                    success = (boolean) mh.invokeExact(array, i, (short)0x4567, (short)0x0123);\n+                    if (!success) weakDelay();\n@@ -838,0 +860,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -840,1 +863,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(array, i, (short)0x0123, (short)0x4567);\n+                    success = (boolean) mh.invokeExact(array, i, (short)0x0123, (short)0x4567);\n+                    if (!success) weakDelay();\n@@ -855,0 +879,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -857,1 +882,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(array, i, (short)0x4567, (short)0x0123);\n+                    success = (boolean) mh.invokeExact(array, i, (short)0x4567, (short)0x0123);\n+                    if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessShort.java","additions":39,"deletions":13,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.invoke.MethodHandle;\n@@ -211,0 +212,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -213,1 +215,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(recv, \"foo\", \"bar\");\n+                success = (boolean) mh.invokeExact(recv, \"foo\", \"bar\");\n+                if (!success) weakDelay();\n@@ -228,0 +231,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -230,1 +234,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(recv, \"bar\", \"foo\");\n+                success = (boolean) mh.invokeExact(recv, \"bar\", \"foo\");\n+                if (!success) weakDelay();\n@@ -245,0 +250,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -247,1 +253,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(recv, \"foo\", \"bar\");\n+                success = (boolean) mh.invokeExact(recv, \"foo\", \"bar\");\n+                if (!success) weakDelay();\n@@ -263,0 +270,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -264,1 +272,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(recv, \"bar\", \"foo\");\n+                success = (boolean) mh.invokeExact(recv, \"bar\", \"foo\");\n+                if (!success) weakDelay();\n@@ -395,0 +404,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -397,1 +407,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(\"foo\", \"bar\");\n+                success = (boolean) mh.invokeExact(\"foo\", \"bar\");\n+                if (!success) weakDelay();\n@@ -412,0 +423,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -414,1 +426,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(\"bar\", \"foo\");\n+                success = (boolean) mh.invokeExact(\"bar\", \"foo\");\n+                if (!success) weakDelay();\n@@ -422,1 +435,2 @@\n-            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(\"bar\", \"baz\");\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n+            boolean success = (boolean) mh.invokeExact(\"bar\", \"baz\");\n@@ -429,0 +443,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -431,1 +446,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(\"foo\", \"bar\");\n+                success = (boolean) mh.invokeExact(\"foo\", \"bar\");\n+                if (!success) weakDelay();\n@@ -446,0 +462,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -448,1 +465,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(\"bar\", \"foo\");\n+                success = (boolean) mh.invokeExact(\"bar\", \"foo\");\n+                if (!success) weakDelay();\n@@ -604,0 +622,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -606,1 +625,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(array, i, \"foo\", \"bar\");\n+                    success = (boolean) mh.invokeExact(array, i, \"foo\", \"bar\");\n+                    if (!success) weakDelay();\n@@ -621,0 +641,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -623,1 +644,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(array, i, \"bar\", \"foo\");\n+                    success = (boolean) mh.invokeExact(array, i, \"bar\", \"foo\");\n+                    if (!success) weakDelay();\n@@ -638,0 +660,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -640,1 +663,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(array, i, \"foo\", \"bar\");\n+                    success = (boolean) mh.invokeExact(array, i, \"foo\", \"bar\");\n+                    if (!success) weakDelay();\n@@ -655,0 +679,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -657,1 +682,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(array, i, \"bar\", \"foo\");\n+                    success = (boolean) mh.invokeExact(array, i, \"bar\", \"foo\");\n+                    if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessString.java","additions":39,"deletions":13,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -661,0 +661,1 @@\n+                if (!success) weakDelay();\n@@ -678,0 +679,1 @@\n+                if (!success) weakDelay();\n@@ -695,0 +697,1 @@\n+                if (!success) weakDelay();\n@@ -712,0 +715,1 @@\n+                if (!success) weakDelay();\n@@ -1066,0 +1070,1 @@\n+                if (!success) weakDelay();\n@@ -1083,0 +1088,1 @@\n+                if (!success) weakDelay();\n@@ -1100,0 +1106,1 @@\n+                if (!success) weakDelay();\n@@ -1117,0 +1124,1 @@\n+                if (!success) weakDelay();\n@@ -1474,0 +1482,1 @@\n+                    if (!success) weakDelay();\n@@ -1491,0 +1500,1 @@\n+                    if (!success) weakDelay();\n@@ -1508,0 +1518,1 @@\n+                    if (!success) weakDelay();\n@@ -1525,0 +1536,1 @@\n+                    if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestAccess.java.template","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1594,0 +1594,1 @@\n+                        if (!success) weakDelay();\n@@ -1611,0 +1612,1 @@\n+                        if (!success) weakDelay();\n@@ -1628,0 +1630,1 @@\n+                        if (!success) weakDelay();\n@@ -1645,0 +1648,1 @@\n+                        if (!success) weakDelay();\n@@ -1911,0 +1915,1 @@\n+                        if (!success) weakDelay();\n@@ -1928,0 +1933,1 @@\n+                        if (!success) weakDelay();\n@@ -1945,0 +1951,1 @@\n+                        if (!success) weakDelay();\n@@ -1962,0 +1969,1 @@\n+                        if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestByteArrayView.java.template","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.invoke.MethodHandle;\n@@ -212,0 +213,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -214,1 +216,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(recv, $value1$, $value2$);\n+                success = (boolean) mh.invokeExact(recv, $value1$, $value2$);\n+                if (!success) weakDelay();\n@@ -229,0 +232,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -231,1 +235,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(recv, $value2$, $value1$);\n+                success = (boolean) mh.invokeExact(recv, $value2$, $value1$);\n+                if (!success) weakDelay();\n@@ -246,0 +251,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -248,1 +254,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(recv, $value1$, $value2$);\n+                success = (boolean) mh.invokeExact(recv, $value1$, $value2$);\n+                if (!success) weakDelay();\n@@ -264,0 +271,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -265,1 +273,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(recv, $value2$, $value1$);\n+                success = (boolean) mh.invokeExact(recv, $value2$, $value1$);\n+                if (!success) weakDelay();\n@@ -535,0 +544,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -537,1 +547,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact($value1$, $value2$);\n+                success = (boolean) mh.invokeExact($value1$, $value2$);\n+                if (!success) weakDelay();\n@@ -552,0 +563,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -554,1 +566,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact($value2$, $value1$);\n+                success = (boolean) mh.invokeExact($value2$, $value1$);\n+                if (!success) weakDelay();\n@@ -562,1 +575,2 @@\n-            boolean success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact($value2$, $value3$);\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n+            boolean success = (boolean) mh.invokeExact($value2$, $value3$);\n@@ -569,0 +583,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -571,1 +586,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact($value1$, $value2$);\n+                success = (boolean) mh.invokeExact($value1$, $value2$);\n+                if (!success) weakDelay();\n@@ -586,0 +602,1 @@\n+            MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -588,1 +605,2 @@\n-                success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact($value2$, $value1$);\n+                success = (boolean) mh.invokeExact($value2$, $value1$);\n+                if (!success) weakDelay();\n@@ -883,0 +901,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN);\n@@ -885,1 +904,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_PLAIN).invokeExact(array, i, $value1$, $value2$);\n+                    success = (boolean) mh.invokeExact(array, i, $value1$, $value2$);\n+                    if (!success) weakDelay();\n@@ -900,0 +920,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE);\n@@ -902,1 +923,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_ACQUIRE).invokeExact(array, i, $value2$, $value1$);\n+                    success = (boolean) mh.invokeExact(array, i, $value2$, $value1$);\n+                    if (!success) weakDelay();\n@@ -917,0 +939,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE);\n@@ -919,1 +942,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET_RELEASE).invokeExact(array, i, $value1$, $value2$);\n+                    success = (boolean) mh.invokeExact(array, i, $value1$, $value2$);\n+                    if (!success) weakDelay();\n@@ -934,0 +958,1 @@\n+                MethodHandle mh = hs.get(TestAccessMode.WEAK_COMPARE_AND_SET);\n@@ -936,1 +961,2 @@\n-                    success = (boolean) hs.get(TestAccessMode.WEAK_COMPARE_AND_SET).invokeExact(array, i, $value2$, $value1$);\n+                    success = (boolean) mh.invokeExact(array, i, $value2$, $value1$);\n+                    if (!success) weakDelay();\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestMethodHandleAccess.java.template","additions":39,"deletions":13,"binary":false,"changes":52,"status":"modified"}]}