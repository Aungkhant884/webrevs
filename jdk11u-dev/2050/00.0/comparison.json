{"files":[{"patch":"@@ -916,1 +916,2 @@\n-jdk.tls.keyLimits=AES\/GCM\/NoPadding KeyUpdate 2^37\n+jdk.tls.keyLimits=AES\/GCM\/NoPadding KeyUpdate 2^37, \\\n+                  ChaCha20-Poly1305 KeyUpdate 2^37\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8164879\n+ * @bug 8164879 8300285\n@@ -29,1 +29,2 @@\n- * @summary Verify AES\/GCM's limits set in the jdk.tls.keyLimits property\n+ * @summary Verify AEAD TLS cipher suite limits set in the jdk.tls.keyLimits\n+ * property\n@@ -35,2 +36,8 @@\n- * @run main SSLEngineKeyLimit 0 server AES\/GCM\/NoPadding keyupdate 1050000\n- * @run main SSLEngineKeyLimit 1 client AES\/GCM\/NoPadding keyupdate 2^22\n+ * @run main SSLEngineKeyLimit 0 server TLS_AES_256_GCM_SHA384\n+ *      AES\/GCM\/NoPadding keyupdate 1050000\n+ * @run main SSLEngineKeyLimit 1 client TLS_AES_256_GCM_SHA384\n+ *      AES\/GCM\/NoPadding keyupdate 2^22\n+ * @run main SSLEngineKeyLimit 0 server TLS_CHACHA20_POLY1305_SHA256\n+ *      AES\/GCM\/NoPadding keyupdate 1050000, ChaCha20-Poly1305 KeyUpdate 1050000\n+ * @run main SSLEngineKeyLimit 1 client TLS_CHACHA20_POLY1305_SHA256\n+ *      AES\/GCM\/NoPadding keyupdate 2^22, ChaCha20-Poly1305 KeyUpdate 2^22\n@@ -89,1 +96,1 @@\n-     * args should have two values:  server|client, <limit size>\n+     * args should have two values:  server|client, cipher suite, <limit size>\n@@ -108,1 +115,1 @@\n-            for (int i = 2; i < args.length; i++) {\n+            for (int i = 3; i < args.length; i++) {\n@@ -122,0 +129,1 @@\n+<<<<<<< HEAD\n@@ -124,0 +132,5 @@\n+=======\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true,\n+                    Utils.addTestJavaOpts(\"SSLEngineKeyLimit\", \"p\", args[1],\n+                            args[2]));\n+>>>>>>> a829804de566fb89ad0fe45d242a09db24a5867c\n@@ -127,0 +140,2 @@\n+                output.shouldContain(String.format(\n+                        \"\\\"cipher suite\\\"        : \\\"%s\", args[2]));\n@@ -174,1 +189,2 @@\n-        Thread ts = new Thread(serverwrite ? new Client() : new Server());\n+        Thread ts = new Thread(serverwrite ? new Client() :\n+                new Server(args[2]));\n@@ -176,1 +192,1 @@\n-        (serverwrite ? new Server() : new Client()).run();\n+        (serverwrite ? new Server(args[2]) : new Client()).run();\n@@ -420,1 +436,1 @@\n-        Server() throws Exception {\n+        Server(String cipherSuite) throws Exception {\n@@ -425,0 +441,3 @@\n+            if (cipherSuite != null && cipherSuite.length() > 0) {\n+                eng.setEnabledCipherSuites(new String[] { cipherSuite });\n+            }\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLEngineImpl\/SSLEngineKeyLimit.java","additions":29,"deletions":10,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8164879\n+ * @bug 8164879 8300285\n@@ -30,4 +30,14 @@\n- * @summary Verify AES\/GCM's limits set in the jdk.tls.keyLimits property\n- * @run main SSLSocketKeyLimit 0 server AES\/GCM\/NoPadding keyupdate 1000000\n- * @run main SSLSocketKeyLimit 0 client AES\/GCM\/NoPadding keyupdate 1000000\n- * @run main SSLSocketKeyLimit 1 client AES\/GCM\/NoPadding keyupdate 2^22\n+ * @summary Verify AEAD TLS cipher suite limits set in the jdk.tls.keyLimits\n+ * property\n+ * @run main SSLSocketKeyLimit 0 server TLS_AES_256_GCM_SHA384\n+ *      AES\/GCM\/NoPadding keyupdate 1000000\n+ * @run main SSLSocketKeyLimit 0 client TLS_AES_256_GCM_SHA384\n+ *      AES\/GCM\/NoPadding keyupdate 1000000\n+ * @run main SSLSocketKeyLimit 1 client TLS_AES_256_GCM_SHA384\n+ *      AES\/GCM\/NoPadding keyupdate 2^22\n+ * @run main SSLSocketKeyLimit 0 server TLS_CHACHA20_POLY1305_SHA256\n+ *      AES\/GCM\/NoPadding keyupdate 1000000, ChaCha20-Poly1305 KeyUpdate 1000000\n+ * @run main SSLSocketKeyLimit 0 client TLS_CHACHA20_POLY1305_SHA256\n+ *      AES\/GCM\/NoPadding keyupdate 1000000, ChaCha20-Poly1305 KeyUpdate 1000000\n+ * @run main SSLSocketKeyLimit 1 client TLS_CHACHA20_POLY1305_SHA256\n+ *      AES\/GCM\/NoPadding keyupdate 2^22, ChaCha20-Poly1305 KeyUpdate 2^22\n@@ -99,1 +109,1 @@\n-     * args should have two values:  server|client, <limit size>\n+     * args should have three values:  server|client, cipher suite, <limit size>\n@@ -113,1 +123,1 @@\n-            for (int i = 2; i < args.length; i++) {\n+            for (int i = 3; i < args.length; i++) {\n@@ -128,1 +138,2 @@\n-                    Utils.addTestJavaOpts(\"SSLSocketKeyLimit\", \"p\", args[1]));\n+                    Utils.addTestJavaOpts(\"SSLSocketKeyLimit\", \"p\", args[1],\n+                            args[2]));\n@@ -132,0 +143,2 @@\n+                output.shouldContain(String.format(\n+                        \"\\\"cipher suite\\\"        : \\\"%s\", args[2]));\n@@ -153,1 +166,1 @@\n-        if (args.length > 0 && args[0].compareToIgnoreCase(\"client\") == 0) {\n+        if (args.length > 0 && args[1].compareToIgnoreCase(\"client\") == 0) {\n@@ -165,1 +178,1 @@\n-        Thread ts = new Thread(new Server());\n+        Thread ts = new Thread(new Server(args[2]));\n@@ -203,1 +216,2 @@\n-            System.out.println(\"Server: connected \" + s.getSession().getCipherSuite());\n+            System.out.println(\"Server: connected \" +\n+                    s.getSession().getCipherSuite());\n@@ -215,1 +229,2 @@\n-                    System.out.println(\"\\nData invalid: \" + new HexDumpEncoder().encode(buf));\n+                    System.out.println(\"\\nData invalid: \" +\n+                            new HexDumpEncoder().encode(buf));\n@@ -240,1 +255,1 @@\n-        Server() {\n+        Server(String cipherSuite) {\n@@ -245,0 +260,3 @@\n+                if (cipherSuite != null && cipherSuite.length() > 0) {\n+                    ss.setEnabledCipherSuites(new String[] { cipherSuite });\n+                }\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/SSLSocketKeyLimit.java","additions":32,"deletions":14,"binary":false,"changes":46,"status":"modified"}]}