{"files":[{"patch":"@@ -2,1 +2,1 @@\n-<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\" lang=\"\" xml:lang=\"\">\n+<html>\n@@ -4,3 +4,3 @@\n-  <meta charset=\"utf-8\" \/>\n-  <meta name=\"generator\" content=\"pandoc\" \/>\n-  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" \/>\n+  <meta charset=\"utf-8\">\n+  <meta name=\"generator\" content=\"pandoc\">\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n@@ -8,9 +8,2 @@\n-  <style>\n-    code{white-space: pre-wrap;}\n-    span.smallcaps{font-variant: small-caps;}\n-    span.underline{text-decoration: underline;}\n-    div.column{display: inline-block; vertical-align: top; width: 50%;}\n-    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n-    ul.task-list{list-style: none;}\n-  <\/style>\n-  <link rel=\"stylesheet\" href=\"..\/make\/data\/docs-resources\/resources\/jdk-default.css\" \/>\n+  <style type=\"text\/css\">code{white-space: pre;}<\/style>\n+  <link rel=\"stylesheet\" href=\"..\/make\/data\/docs-resources\/resources\/jdk-default.css\">\n@@ -23,1 +16,1 @@\n-<header id=\"title-block-header\">\n+<header>\n@@ -26,1 +19,1 @@\n-<nav id=\"TOC\" role=\"doc-toc\">\n+<nav id=\"TOC\">\n@@ -30,2 +23,1 @@\n-<li><a href=\"#getting-the-source-code\">Getting the Source Code<\/a>\n-<ul>\n+<li><a href=\"#getting-the-source-code\">Getting the Source Code<\/a><ul>\n@@ -34,2 +26,1 @@\n-<li><a href=\"#build-hardware-requirements\">Build Hardware Requirements<\/a>\n-<ul>\n+<li><a href=\"#build-hardware-requirements\">Build Hardware Requirements<\/a><ul>\n@@ -40,2 +31,1 @@\n-<li><a href=\"#operating-system-requirements\">Operating System Requirements<\/a>\n-<ul>\n+<li><a href=\"#operating-system-requirements\">Operating System Requirements<\/a><ul>\n@@ -48,2 +38,1 @@\n-<li><a href=\"#native-compiler-toolchain-requirements\">Native Compiler (Toolchain) Requirements<\/a>\n-<ul>\n+<li><a href=\"#native-compiler-toolchain-requirements\">Native Compiler (Toolchain) Requirements<\/a><ul>\n@@ -57,2 +46,1 @@\n-<li><a href=\"#boot-jdk-requirements\">Boot JDK Requirements<\/a>\n-<ul>\n+<li><a href=\"#boot-jdk-requirements\">Boot JDK Requirements<\/a><ul>\n@@ -61,2 +49,1 @@\n-<li><a href=\"#external-library-requirements\">External Library Requirements<\/a>\n-<ul>\n+<li><a href=\"#external-library-requirements\">External Library Requirements<\/a><ul>\n@@ -69,2 +56,1 @@\n-<li><a href=\"#build-tools-requirements\">Build Tools Requirements<\/a>\n-<ul>\n+<li><a href=\"#build-tools-requirements\">Build Tools Requirements<\/a><ul>\n@@ -75,2 +61,1 @@\n-<li><a href=\"#running-configure\">Running Configure<\/a>\n-<ul>\n+<li><a href=\"#running-configure\">Running Configure<\/a><ul>\n@@ -80,2 +65,1 @@\n-<li><a href=\"#running-make\">Running Make<\/a>\n-<ul>\n+<li><a href=\"#running-make\">Running Make<\/a><ul>\n@@ -86,2 +70,1 @@\n-<li><a href=\"#cross-compiling\">Cross-compiling<\/a>\n-<ul>\n+<li><a href=\"#cross-compiling\">Cross-compiling<\/a><ul>\n@@ -97,2 +80,1 @@\n-<li><a href=\"#build-performance\">Build Performance<\/a>\n-<ul>\n+<li><a href=\"#build-performance\">Build Performance<\/a><ul>\n@@ -107,2 +89,1 @@\n-<li><a href=\"#troubleshooting\">Troubleshooting<\/a>\n-<ul>\n+<li><a href=\"#troubleshooting\">Troubleshooting<\/a><ul>\n@@ -114,2 +95,1 @@\n-<li><a href=\"#hints-and-suggestions-for-advanced-users\">Hints and Suggestions for Advanced Users<\/a>\n-<ul>\n+<li><a href=\"#hints-and-suggestions-for-advanced-users\">Hints and Suggestions for Advanced Users<\/a><ul>\n@@ -121,2 +101,1 @@\n-<li><a href=\"#understanding-the-build-system\">Understanding the Build System<\/a>\n-<ul>\n+<li><a href=\"#understanding-the-build-system\">Understanding the Build System<\/a><ul>\n@@ -153,1 +132,1 @@\n-<p>Make sure you are getting the correct version. As of JDK 10, the source is no longer split into separate repositories so you only need to clone one single repository. At the <a href=\"https:\/\/git.openjdk.java.net\/\">OpenJDK Git site<\/a> you can see a list of all available repositories. If you want to build an older version, e.g. JDK 8, it is recommended that you get the <code>jdk8u<\/code> forest, which contains incremental updates, instead of the <code>jdk8<\/code> forest, which was frozen at JDK 8 GA.<\/p>\n+<p>Make sure you are getting the correct version. As of JDK 10, the source is no longer split into separate repositories so you only need to clone one single repository. At the <a href=\"https:\/\/git.openjdk.java.net\/\">OpenJDK Git site<\/a> you can see a list of all available repositories. If you want to build an older version, e.g. JDK 8, it is recommended that you get the <code>jdk8u<\/code> forest, which contains incremental updates, instead of the <code>jdk8<\/code> forest, which was frozen at JDK 8 GA.<\/p>\n@@ -163,1 +142,1 @@\n-<li><p>Create the directory that is going to contain the top directory of the JDK clone by using the <code>mkdir<\/code> command in the Cygwin bash shell. That is, do <em>not<\/em> create it using Windows Explorer. This will ensure that it will have proper Cygwin attributes, and that it’s children will inherit those attributes.<\/p><\/li>\n+<li><p>Create the directory that is going to contain the top directory of the JDK clone by using the <code>mkdir<\/code> command in the Cygwin bash shell. That is, do <em>not<\/em> create it using Windows Explorer. This will ensure that it will have proper Cygwin attributes, and that it's children will inherit those attributes.<\/p><\/li>\n@@ -184,1 +163,1 @@\n-<p>The mainline JDK project supports Linux, Solaris, macOS, AIX and Windows. Support for other operating system, e.g. BSD, exists in separate “port” projects.<\/p>\n+<p>The mainline JDK project supports Linux, Solaris, macOS, AIX and Windows. Support for other operating system, e.g. BSD, exists in separate &quot;port&quot; projects.<\/p>\n@@ -219,1 +198,1 @@\n-<p>Internally in the build system, all paths are represented as Unix-style paths, e.g. <code>\/cygdrive\/c\/git\/jdk\/Makefile<\/code> rather than <code>C:\\git\\jdk\\Makefile<\/code>. This rule also applies to input to the build system, e.g. in arguments to <code>configure<\/code>. So, use <code>--with-msvcr-dll=\/cygdrive\/c\/msvcr100.dll<\/code> rather than <code>--with-msvcr-dll=c:\\msvcr100.dll<\/code>. For details on this conversion, see the section on <a href=\"#fixpath\">Fixpath<\/a>.<\/p>\n+<p>Internally in the build system, all paths are represented as Unix-style paths, e.g. <code>\/cygdrive\/c\/git\/jdk\/Makefile<\/code> rather than <code>C:\\git\\jdk\\Makefile<\/code>. This rule also applies to input to the build system, e.g. in arguments to <code>configure<\/code>. So, use <code>--with-msvcr-dll=\/cygdrive\/c\/msvcr100.dll<\/code> rather than <code>--with-msvcr-dll=c:\\msvcr100.dll<\/code>. For details on this conversion, see the section on <a href=\"#fixpath\">Fixpath<\/a>.<\/p>\n@@ -233,1 +212,1 @@\n-<p>Unfortunately, Cygwin can be unreliable in certain circumstances. If you experience build tool crashes or strange issues when building on Windows, please check the Cygwin FAQ on the <a href=\"https:\/\/cygwin.com\/faq\/faq.html#faq.using.bloda\">“BLODA” list<\/a> and the section on <a href=\"https:\/\/cygwin.com\/faq\/faq.html#faq.using.fixing-fork-failures\">fork() failures<\/a>.<\/p>\n+<p>Unfortunately, Cygwin can be unreliable in certain circumstances. If you experience build tool crashes or strange issues when building on Windows, please check the Cygwin FAQ on the <a href=\"https:\/\/cygwin.com\/faq\/faq.html#faq.using.bloda\">&quot;BLODA&quot; list<\/a> and the section on <a href=\"https:\/\/cygwin.com\/faq\/faq.html#faq.using.fixing-fork-failures\">fork() failures<\/a>.<\/p>\n@@ -251,1 +230,1 @@\n-<p>Large portions of the JDK consists of native code, that needs to be compiled to be able to run on the target platform. In theory, toolchain and operating system should be independent factors, but in practice there’s more or less a one-to-one correlation between target operating system and toolchain.<\/p>\n+<p>Large portions of the JDK consists of native code, that needs to be compiled to be able to run on the target platform. In theory, toolchain and operating system should be independent factors, but in practice there's more or less a one-to-one correlation between target operating system and toolchain.<\/p>\n@@ -382,1 +361,1 @@\n-<p>If you have multiple versions of Visual Studio installed, <code>configure<\/code> will by default pick the latest. You can request a specific version to be used by setting <code>--with-toolchain-version<\/code>, e.g. <code>--with-toolchain-version=2015<\/code>.<\/p>\n+<p>If you have multiple versions of Visual Studio installed, <code>configure<\/code> will by default pick the latest. You can request a specific version to be used by setting <code>--with-toolchain-version<\/code>, e.g. <code>--with-toolchain-version=2015<\/code>.<\/p>\n@@ -388,2 +367,2 @@\n-<p>Paradoxically, building the JDK requires a pre-existing JDK. This is called the “boot JDK”. The boot JDK does not, however, have to be a JDK built directly from the source code available in the OpenJDK Community. If you are porting the JDK to a new platform, chances are that there already exists another JDK for that platform that is usable as boot JDK.<\/p>\n-<p>The rule of thumb is that the boot JDK for building JDK major version <em>N<\/em> should be a JDK of major version <em>N-1<\/em>, so for building JDK 9 a JDK 8 would be suitable as boot JDK. However, the JDK should be able to “build itself”, so an up-to-date build of the current JDK source is an acceptable alternative. If you are following the <em>N-1<\/em> rule, make sure you’ve got the latest update version, since JDK 8 GA might not be able to build JDK 9 on all platforms.<\/p>\n+<p>Paradoxically, building the JDK requires a pre-existing JDK. This is called the &quot;boot JDK&quot;. The boot JDK does not, however, have to be a JDK built directly from the source code available in the OpenJDK Community. If you are porting the JDK to a new platform, chances are that there already exists another JDK for that platform that is usable as boot JDK.<\/p>\n+<p>The rule of thumb is that the boot JDK for building JDK major version <em>N<\/em> should be a JDK of major version <em>N-1<\/em>, so for building JDK 9 a JDK 8 would be suitable as boot JDK. However, the JDK should be able to &quot;build itself&quot;, so an up-to-date build of the current JDK source is an acceptable alternative. If you are following the <em>N-1<\/em> rule, make sure you've got the latest update version, since JDK 8 GA might not be able to build JDK 9 on all platforms.<\/p>\n@@ -400,1 +379,1 @@\n-<p>FreeType2 from <a href=\"http:\/\/www.freetype.org\/\">The FreeType Project<\/a> is not required on any platform. The exception is on Unix-based platforms when configuring such that the build artifacts will reference a system installed library, rather than bundling the JDK’s own copy.<\/p>\n+<p>FreeType2 from <a href=\"http:\/\/www.freetype.org\/\">The FreeType Project<\/a> is not required on any platform. The exception is on Unix-based platforms when configuring such that the build artifacts will reference a system installed library, rather than bundling the JDK's own copy.<\/p>\n@@ -402,2 +381,2 @@\n-<li>To install on an apt-based Linux, try running <code>sudo apt-get install     libfreetype6-dev<\/code>.<\/li>\n-<li>To install on an rpm-based Linux, try running <code>sudo yum install     freetype-devel<\/code>.<\/li>\n+<li>To install on an apt-based Linux, try running <code>sudo apt-get install libfreetype6-dev<\/code>.<\/li>\n+<li>To install on an rpm-based Linux, try running <code>sudo yum install freetype-devel<\/code>.<\/li>\n@@ -410,2 +389,2 @@\n-<li>To install on an apt-based Linux, try running <code>sudo apt-get install     libcups2-dev<\/code>.<\/li>\n-<li>To install on an rpm-based Linux, try running <code>sudo yum install     cups-devel<\/code>.<\/li>\n+<li>To install on an apt-based Linux, try running <code>sudo apt-get install libcups2-dev<\/code>.<\/li>\n+<li>To install on an rpm-based Linux, try running <code>sudo yum install cups-devel<\/code>.<\/li>\n@@ -418,3 +397,3 @@\n-<li>To install on an apt-based Linux, try running <code>sudo apt-get install     libx11-dev libxext-dev libxrender-dev libxtst-dev libxt-dev<\/code>.<\/li>\n-<li>To install on an rpm-based Linux, try running <code>sudo yum install     libXtst-devel libXt-devel libXrender-devel libXi-devel<\/code>.<\/li>\n-<li>To install on Solaris, try running <code>pkg install x11\/header\/x11-protocols     x11\/library\/libice x11\/library\/libpthread-stubs x11\/library\/libsm     x11\/library\/libx11 x11\/library\/libxau x11\/library\/libxcb     x11\/library\/libxdmcp x11\/library\/libxevie x11\/library\/libxext     x11\/library\/libxrender x11\/library\/libxscrnsaver x11\/library\/libxtst     x11\/library\/toolkit\/libxt<\/code>.<\/li>\n+<li>To install on an apt-based Linux, try running <code>sudo apt-get install libx11-dev libxext-dev libxrender-dev libxtst-dev libxt-dev<\/code>.<\/li>\n+<li>To install on an rpm-based Linux, try running <code>sudo yum install libXtst-devel libXt-devel libXrender-devel libXi-devel<\/code>.<\/li>\n+<li>To install on Solaris, try running <code>pkg install x11\/header\/x11-protocols x11\/library\/libice x11\/library\/libpthread-stubs x11\/library\/libsm x11\/library\/libx11 x11\/library\/libxau x11\/library\/libxcb x11\/library\/libxdmcp x11\/library\/libxevie x11\/library\/libxext x11\/library\/libxrender x11\/library\/libxscrnsaver x11\/library\/libxtst x11\/library\/toolkit\/libxt<\/code>.<\/li>\n@@ -426,2 +405,2 @@\n-<li>To install on an apt-based Linux, try running <code>sudo apt-get install     libasound2-dev<\/code>.<\/li>\n-<li>To install on an rpm-based Linux, try running <code>sudo yum install     alsa-lib-devel<\/code>.<\/li>\n+<li>To install on an apt-based Linux, try running <code>sudo apt-get install libasound2-dev<\/code>.<\/li>\n+<li>To install on an rpm-based Linux, try running <code>sudo yum install alsa-lib-devel<\/code>.<\/li>\n@@ -433,2 +412,2 @@\n-<li>To install on an apt-based Linux, try running <code>sudo apt-get install     libffi-dev<\/code>.<\/li>\n-<li>To install on an rpm-based Linux, try running <code>sudo yum install     libffi-devel<\/code>.<\/li>\n+<li>To install on an apt-based Linux, try running <code>sudo apt-get install libffi-dev<\/code>.<\/li>\n+<li>To install on an rpm-based Linux, try running <code>sudo yum install libffi-devel<\/code>.<\/li>\n@@ -441,2 +420,2 @@\n-<li>To install on an apt-based Linux, try running <code>sudo apt-get install     autoconf<\/code>.<\/li>\n-<li>To install on an rpm-based Linux, try running <code>sudo yum install     autoconf<\/code>.<\/li>\n+<li>To install on an apt-based Linux, try running <code>sudo apt-get install autoconf<\/code>.<\/li>\n+<li>To install on an rpm-based Linux, try running <code>sudo yum install autoconf<\/code>.<\/li>\n@@ -444,1 +423,1 @@\n-<li>To install on Windows, try running <code>&lt;path to Cygwin setup&gt;\/setup-x86_64 -q     -P autoconf<\/code>.<\/li>\n+<li>To install on Windows, try running <code>&lt;path to Cygwin setup&gt;\/setup-x86_64 -q -P autoconf<\/code>.<\/li>\n@@ -451,2 +430,2 @@\n-<p>Note that <code>configure<\/code> locates and verifies a properly functioning version of <code>make<\/code> and stores the path to this <code>make<\/code> binary in the configuration. If you start a build using <code>make<\/code> on the command line, you will be using the version of make found first in your <code>PATH<\/code>, and not necessarily the one stored in the configuration. This initial make will be used as “bootstrap make”, and in a second stage, the make located by <code>configure<\/code> will be called. Normally, this will present no issues, but if you have a very old <code>make<\/code>, or a non-GNU Make <code>make<\/code> in your path, this might cause issues.<\/p>\n-<p>If you want to override the default make found by <code>configure<\/code>, use the <code>MAKE<\/code> configure variable, e.g. <code>configure MAKE=\/opt\/gnu\/make<\/code>.<\/p>\n+<p>Note that <code>configure<\/code> locates and verifies a properly functioning version of <code>make<\/code> and stores the path to this <code>make<\/code> binary in the configuration. If you start a build using <code>make<\/code> on the command line, you will be using the version of make found first in your <code>PATH<\/code>, and not necessarily the one stored in the configuration. This initial make will be used as &quot;bootstrap make&quot;, and in a second stage, the make located by <code>configure<\/code> will be called. Normally, this will present no issues, but if you have a very old <code>make<\/code>, or a non-GNU Make <code>make<\/code> in your path, this might cause issues.<\/p>\n+<p>If you want to override the default make found by <code>configure<\/code>, use the <code>MAKE<\/code> configure variable, e.g. <code>configure MAKE=\/opt\/gnu\/make<\/code>.<\/p>\n@@ -458,1 +437,1 @@\n-<p>To build the JDK, you need a “configuration”, which consists of a directory where to store the build output, coupled with information about the platform, the specific build machine, and choices that affect how the JDK is built.<\/p>\n+<p>To build the JDK, you need a &quot;configuration&quot;, which consists of a directory where to store the build output, coupled with information about the platform, the specific build machine, and choices that affect how the JDK is built.<\/p>\n@@ -465,2 +444,4 @@\n-<li><p>Create a 32-bit build for Windows with FreeType2 in <code>C:\\freetype-i586<\/code>: <code>bash configure --with-freetype=\/cygdrive\/c\/freetype-i586 --with-target-bits=32<\/code><\/p><\/li>\n-<li><p>Create a debug build with the <code>server<\/code> JVM and DTrace enabled: <code>bash configure --enable-debug --with-jvm-variants=server --enable-dtrace<\/code><\/p><\/li>\n+<li><p>Create a 32-bit build for Windows with FreeType2 in <code>C:\\freetype-i586<\/code>:<\/p>\n+<pre><code>bash configure --with-freetype=\/cygdrive\/c\/freetype-i586 --with-target-bits=32<\/code><\/pre><\/li>\n+<li><p>Create a debug build with the <code>server<\/code> JVM and DTrace enabled:<\/p>\n+<pre><code>bash configure --enable-debug --with-jvm-variants=server --enable-dtrace<\/code><\/pre><\/li>\n@@ -481,1 +462,1 @@\n-<li><code>--with-jvm-features=&lt;feature&gt;[,&lt;feature&gt;...]<\/code> - Use the specified JVM features when building Hotspot. The list of features will be enabled on top of the default list. For the <code>custom<\/code> JVM variant, this default list is empty. A complete list of available JVM features can be found using <code>bash     configure --help<\/code>.<\/li>\n+<li><code>--with-jvm-features=&lt;feature&gt;[,&lt;feature&gt;...]<\/code> - Use the specified JVM features when building Hotspot. The list of features will be enabled on top of the default list. For the <code>custom<\/code> JVM variant, this default list is empty. A complete list of available JVM features can be found using <code>bash configure --help<\/code>.<\/li>\n@@ -518,1 +499,1 @@\n-<p>Normally, this is <strong>not recommended<\/strong>. If used improperly, it can lead to a broken configuration. Unless you’re well versed in the build system, this is hard to use properly. Therefore, <code>configure<\/code> will print a warning if this is detected.<\/p>\n+<p>Normally, this is <strong>not recommended<\/strong>. If used improperly, it can lead to a broken configuration. Unless you're well versed in the build system, this is hard to use properly. Therefore, <code>configure<\/code> will print a warning if this is detected.<\/p>\n@@ -520,1 +501,1 @@\n-<p>If a configure argument exists, use that instead, e.g. use <code>--with-jtreg<\/code> instead of setting <code>JTREGEXE<\/code>.<\/p>\n+<p>If a configure argument exists, use that instead, e.g. use <code>--with-jtreg<\/code> instead of setting <code>JTREGEXE<\/code>.<\/p>\n@@ -524,1 +505,1 @@\n-<p>When running <code>make<\/code> without any arguments, the default target is used, which is the same as running <code>make default<\/code> or <code>make jdk<\/code>. This will build a minimal (or roughly minimal) set of compiled output (known as an “exploded image”) needed for a developer to actually execute the newly built JDK. The idea is that in an incremental development fashion, when doing a normal make, you should only spend time recompiling what’s changed (making it purely incremental) and only do the work that’s needed to actually run and test your code.<\/p>\n+<p>When running <code>make<\/code> without any arguments, the default target is used, which is the same as running <code>make default<\/code> or <code>make jdk<\/code>. This will build a minimal (or roughly minimal) set of compiled output (known as an &quot;exploded image&quot;) needed for a developer to actually execute the newly built JDK. The idea is that in an incremental development fashion, when doing a normal make, you should only spend time recompiling what's changed (making it purely incremental) and only do the work that's needed to actually run and test your code.<\/p>\n@@ -555,2 +536,2 @@\n-<p>Normally, this is <strong>not recommended<\/strong>. If used improperly, it can lead to a broken build. Unless you’re well versed in the build system, this is hard to use properly. Therefore, <code>make<\/code> will print a warning if this is detected.<\/p>\n-<p>However, there are a few <code>make<\/code> variables, known as <em>control variables<\/em> that are supposed to be overriden on the command line. These make up the “make time” configuration, as opposed to the “configure time” configuration.<\/p>\n+<p>Normally, this is <strong>not recommended<\/strong>. If used improperly, it can lead to a broken build. Unless you're well versed in the build system, this is hard to use properly. Therefore, <code>make<\/code> will print a warning if this is detected.<\/p>\n+<p>However, there are a few <code>make<\/code> variables, known as <em>control variables<\/em> that are supposed to be overriden on the command line. These make up the &quot;make time&quot; configuration, as opposed to the &quot;configure time&quot; configuration.<\/p>\n@@ -580,1 +561,1 @@\n-<p>Most of the JDK tests are using the <a href=\"http:\/\/openjdk.java.net\/jtreg\">JTReg<\/a> test framework. Make sure that your configuration knows where to find your installation of JTReg. If this is not picked up automatically, use the <code>--with-jtreg=&lt;path to jtreg home&gt;<\/code> option to point to the JTReg framework. Note that this option should point to the JTReg home, i.e. the top directory, containing <code>lib\/jtreg.jar<\/code> etc.<\/p>\n+<p>Most of the JDK tests are using the <a href=\"http:\/\/openjdk.java.net\/jtreg\">JTReg<\/a> test framework. Make sure that your configuration knows where to find your installation of JTReg. If this is not picked up automatically, use the <code>--with-jtreg=&lt;path to jtreg home&gt;<\/code> option to point to the JTReg framework. Note that this option should point to the JTReg home, i.e. the top directory, containing <code>lib\/jtreg.jar<\/code> etc.<\/p>\n@@ -590,1 +571,1 @@\n-<p>If all you want to do is to compile a 32-bit version, for the same OS, on a 64-bit machine, consider using <code>--with-target-bits=32<\/code> instead of doing a full-blown cross-compilation. (While this surely is possible, it’s a lot more work and will take much longer to build.)<\/p>\n+<p>If all you want to do is to compile a 32-bit version, for the same OS, on a 64-bit machine, consider using <code>--with-target-bits=32<\/code> instead of doing a full-blown cross-compilation. (While this surely is possible, it's a lot more work and will take much longer to build.)<\/p>\n@@ -625,1 +606,1 @@\n-<p><code>BASE_OS<\/code> must be one of “OEL6” for Oracle Enterprise Linux 6 or “Fedora” (if not specified “OEL6” will be the default). If the base OS is “Fedora” the corresponding Fedora release can be specified with the help of the <code>BASE_OS_VERSION<\/code> option (with “27” as default version). If the build is successful, the new devkits can be found in the <code>build\/devkit\/result<\/code> subdirectory:<\/p>\n+<p><code>BASE_OS<\/code> must be one of &quot;OEL6&quot; for Oracle Enterprise Linux 6 or &quot;Fedora&quot; (if not specified &quot;OEL6&quot; will be the default). If the base OS is &quot;Fedora&quot; the corresponding Fedora release can be specified with the help of the <code>BASE_OS_VERSION<\/code> option (with &quot;27&quot; as default version). If the build is successful, the new devkits can be found in the <code>build\/devkit\/result<\/code> subdirectory:<\/p>\n@@ -631,1 +612,1 @@\n-<p>Notice that devkits are not only useful for targeting different build platforms. Because they contain the full build dependencies for a system (i.e. compiler and root file system), they can easily be used to build well-known, reliable and reproducible build environments. You can for example create and use a devkit with GCC 7.3 and a Fedora 12 sysroot environment (with glibc 2.11) on Ubuntu 14.04 (which doesn’t have GCC 7.3 by default) to produce OpenJDK binaries which will run on all Linux systems with runtime libraries newer than the ones from Fedora 12 (e.g. Ubuntu 16.04, SLES 11 or RHEL 6).<\/p>\n+<p>Notice that devkits are not only useful for targeting different build platforms. Because they contain the full build dependencies for a system (i.e. compiler and root file system), they can easily be used to build well-known, reliable and reproducible build environments. You can for example create and use a devkit with GCC 7.3 and a Fedora 12 sysroot environment (with glibc 2.11) on Ubuntu 14.04 (which doesn't have GCC 7.3 by default) to produce OpenJDK binaries which will run on all Linux systems with runtime libraries newer than the ones from Fedora 12 (e.g. Ubuntu 16.04, SLES 11 or RHEL 6).<\/p>\n@@ -634,1 +615,1 @@\n-<p>To be able to build, we need a “Build JDK”, which is a JDK built from the current sources (that is, the same as the end result of the entire build process), but able to run on the <em>build<\/em> system, and not the <em>target<\/em> system. (In contrast, the Boot JDK should be from an older release, e.g. JDK 8 when building JDK 9.)<\/p>\n+<p>To be able to build, we need a &quot;Build JDK&quot;, which is a JDK built from the current sources (that is, the same as the end result of the entire build process), but able to run on the <em>build<\/em> system, and not the <em>target<\/em> system. (In contrast, the Boot JDK should be from an older release, e.g. JDK 8 when building JDK 9.)<\/p>\n@@ -637,1 +618,1 @@\n-<p>You <em>must<\/em> specify the target platform when cross-compiling. Doing so will also automatically turn the build into a cross-compiling mode. The simplest way to do this is to use the <code>--openjdk-target<\/code> argument, e.g. <code>--openjdk-target=arm-linux-gnueabihf<\/code>. or <code>--openjdk-target=aarch64-oe-linux<\/code>. This will automatically set the <code>--build<\/code>, <code>--host<\/code> and <code>--target<\/code> options for autoconf, which can otherwise be confusing. (In autoconf terminology, the “target” is known as “host”, and “target” is used for building a Canadian cross-compiler.)<\/p>\n+<p>You <em>must<\/em> specify the target platform when cross-compiling. Doing so will also automatically turn the build into a cross-compiling mode. The simplest way to do this is to use the <code>--openjdk-target<\/code> argument, e.g. <code>--openjdk-target=arm-linux-gnueabihf<\/code>. or <code>--openjdk-target=aarch64-oe-linux<\/code>. This will automatically set the <code>--build<\/code>, <code>--host<\/code> and <code>--target<\/code> options for autoconf, which can otherwise be confusing. (In autoconf terminology, the &quot;target&quot; is known as &quot;host&quot;, and &quot;target&quot; is used for building a Canadian cross-compiler.)<\/p>\n@@ -649,1 +630,1 @@\n-<p>Take care not to replace the <em>build<\/em> system’s version of these libraries by mistake, since that can render the <em>build<\/em> machine unusable.<\/p>\n+<p>Take care not to replace the <em>build<\/em> system's version of these libraries by mistake, since that can render the <em>build<\/em> machine unusable.<\/p>\n@@ -652,1 +633,1 @@\n-<p>You will need alsa libraries suitable for your <em>target<\/em> system. For most cases, using Debian’s pre-built libraries work fine.<\/p>\n+<p>You will need alsa libraries suitable for your <em>target<\/em> system. For most cases, using Debian's pre-built libraries work fine.<\/p>\n@@ -656,2 +637,1 @@\n-<li><p>Install the libraries into the cross-compilation toolchain. For instance:<\/p><\/li>\n-<\/ul>\n+<li><p>Install the libraries into the cross-compilation toolchain. For instance:<\/p>\n@@ -660,3 +640,2 @@\n-dpkg-deb -x \/tmp\/libasound2-dev_1.0.25-4_armhf.deb .<\/code><\/pre>\n-<ul>\n-<li>If alsa is not properly detected by <code>configure<\/code>, you can point it out by <code>--with-alsa<\/code>.<\/li>\n+dpkg-deb -x \/tmp\/libasound2-dev_1.0.25-4_armhf.deb .<\/code><\/pre><\/li>\n+<li><p>If alsa is not properly detected by <code>configure<\/code>, you can point it out by <code>--with-alsa<\/code>.<\/p><\/li>\n@@ -665,1 +644,1 @@\n-<p>You will need X11 libraries suitable for your <em>target<\/em> system. For most cases, using Debian’s pre-built libraries work fine.<\/p>\n+<p>You will need X11 libraries suitable for your <em>target<\/em> system. For most cases, using Debian's pre-built libraries work fine.<\/p>\n@@ -668,1 +647,1 @@\n-<li><p>Go to <a href=\"https:\/\/www.debian.org\/distrib\/packages\">Debian Package Search<\/a>, search for the following packages for your <em>target<\/em> system, and download them to \/tmp\/target-x11:<\/p>\n+<li>Go to <a href=\"https:\/\/www.debian.org\/distrib\/packages\">Debian Package Search<\/a>, search for the following packages for your <em>target<\/em> system, and download them to \/tmp\/target-x11:\n@@ -690,12 +669,11 @@\n-<pre><code>    cd \/tools\/gcc-linaro-arm-linux-gnueabihf-raspbian-2012.09-20120921_linux\/arm-linux-gnueabihf\/libc\/usr\n-    mkdir X11R6\n-    cd X11R6\n-    for deb in \/tmp\/target-x11\/*.deb ; do dpkg-deb -x $deb . ; done\n-    mv usr\/* .\n-    cd lib\n-    cp arm-linux-gnueabihf\/* .\n-    ```\n-\n-You can ignore the following messages. These libraries are not needed to\n-successfully complete a full JDK build.<\/code><\/pre>\n-<p>cp: cannot stat <code>arm-linux-gnueabihf\/libICE.so': No such file or directory cp: cannot stat<\/code>arm-linux-gnueabihf\/libSM.so’: No such file or directory cp: cannot stat `arm-linux-gnueabihf\/libXt.so’: No such file or directory ```<\/p><\/li>\n+<pre><code>cd \/tools\/gcc-linaro-arm-linux-gnueabihf-raspbian-2012.09-20120921_linux\/arm-linux-gnueabihf\/libc\/usr\n+mkdir X11R6\n+cd X11R6\n+for deb in \/tmp\/target-x11\/*.deb ; do dpkg-deb -x $deb . ; done\n+mv usr\/* .\n+cd lib\n+cp arm-linux-gnueabihf\/* .<\/code><\/pre>\n+<p>You can ignore the following messages. These libraries are not needed to successfully complete a full JDK build.<\/p>\n+<pre><code>cp: cannot stat `arm-linux-gnueabihf\/libICE.so&#39;: No such file or directory\n+cp: cannot stat `arm-linux-gnueabihf\/libSM.so&#39;: No such file or directory\n+cp: cannot stat `arm-linux-gnueabihf\/libXt.so&#39;: No such file or directory<\/code><\/pre><\/li>\n@@ -708,6 +686,3 @@\n-<li>Install cross-compiler on the <em>build<\/em> system:<\/li>\n-<\/ul>\n-<pre><code>apt install g++-aarch64-linux-gnu gcc-aarch64-linux-gnu<\/code><\/pre>\n-<ul>\n-<li>Create chroot on the <em>build<\/em> system, configuring it for <em>target<\/em> system:<\/li>\n-<\/ul>\n+<li><p>Install cross-compiler on the <em>build<\/em> system:<\/p>\n+<pre><code>apt install g++-aarch64-linux-gnu gcc-aarch64-linux-gnu<\/code><\/pre><\/li>\n+<li><p>Create chroot on the <em>build<\/em> system, configuring it for <em>target<\/em> system:<\/p>\n@@ -715,5 +690,3 @@\n-       --include=fakeroot,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng12-dev \\\n-       --resolve-deps jessie \/chroots\/arm64 http:\/\/httpredir.debian.org\/debian\/<\/code><\/pre>\n-<ul>\n-<li>Configure and build with newly created chroot as sysroot\/toolchain-path:<\/li>\n-<\/ul>\n+   --include=fakeroot,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng12-dev \\\n+   --resolve-deps jessie \/chroots\/arm64 http:\/\/httpredir.debian.org\/debian\/<\/code><\/pre><\/li>\n+<li><p>Configure and build with newly created chroot as sysroot\/toolchain-path:<\/p>\n@@ -722,1 +695,2 @@\n-ls build\/linux-aarch64-normal-server-release\/<\/code><\/pre>\n+ls build\/linux-aarch64-normal-server-release\/<\/code><\/pre><\/li>\n+<\/ul>\n@@ -776,1 +750,1 @@\n-<p>The JDK contains two different ports for the aarch64 platform, one is the original aarch64 port from the <a href=\"http:\/\/openjdk.java.net\/projects\/aarch64-port\">AArch64 Port Project<\/a> and one is a 64-bit version of the Oracle contributed ARM port. When targeting aarch64, by the default the original aarch64 port is used. To select the Oracle ARM 64 port, use <code>--with-cpu-port=arm64<\/code>. Also set the corresponding value (<code>aarch64<\/code> or <code>arm64<\/code>) to –with-abi-profile, to ensure a consistent build.<\/p>\n+<p>The JDK contains two different ports for the aarch64 platform, one is the original aarch64 port from the <a href=\"http:\/\/openjdk.java.net\/projects\/aarch64-port\">AArch64 Port Project<\/a> and one is a 64-bit version of the Oracle contributed ARM port. When targeting aarch64, by the default the original aarch64 port is used. To select the Oracle ARM 64 port, use <code>--with-cpu-port=arm64<\/code>. Also set the corresponding value (<code>aarch64<\/code> or <code>arm64<\/code>) to --with-abi-profile, to ensure a consistent build.<\/p>\n@@ -784,2 +758,2 @@\n-<li><p><code>--with-num-cores<\/code> – number of cores in the build system, e.g. <code>--with-num-cores=8<\/code>.<\/p><\/li>\n-<li><p><code>--with-memory-size<\/code> – memory (in MB) available in the build system, e.g. <code>--with-memory-size=1024<\/code><\/p><\/li>\n+<li><p><code>--with-num-cores<\/code> -- number of cores in the build system, e.g. <code>--with-num-cores=8<\/code>.<\/p><\/li>\n+<li><p><code>--with-memory-size<\/code> -- memory (in MB) available in the build system, e.g. <code>--with-memory-size=1024<\/code><\/p><\/li>\n@@ -788,1 +762,1 @@\n-<p>It might also be necessary to specify the JVM arguments passed to the Boot JDK, using e.g. <code>--with-boot-jdk-jvmargs=\"-Xmx8G\"<\/code>. Doing so will override the default JVM arguments passed to the Boot JDK.<\/p>\n+<p>It might also be necessary to specify the JVM arguments passed to the Boot JDK, using e.g. <code>--with-boot-jdk-jvmargs=&quot;-Xmx8G&quot;<\/code>. Doing so will override the default JVM arguments passed to the Boot JDK.<\/p>\n@@ -792,1 +766,1 @@\n-<p>If you are using network shares, e.g. via NFS, for your source code, make sure the build directory is situated on local disk (e.g. by <code>ln -s \/localdisk\/jdk-build $JDK-SHARE\/build<\/code>). The performance penalty is extremely high for building on a network share; close to unusable.<\/p>\n+<p>If you are using network shares, e.g. via NFS, for your source code, make sure the build directory is situated on local disk (e.g. by <code>ln -s \/localdisk\/jdk-build $JDK-SHARE\/build<\/code>). The performance penalty is extremely high for building on a network share; close to unusable.<\/p>\n@@ -798,1 +772,1 @@\n-<p>The JDK build supports building with ccache when using gcc or clang. Using ccache can radically speed up compilation of native code if you often rebuild the same sources. Your milage may vary however, so we recommend evaluating it for yourself. To enable it, make sure it’s on the path and configure with <code>--enable-ccache<\/code>.<\/p>\n+<p>The JDK build supports building with ccache when using gcc or clang. Using ccache can radically speed up compilation of native code if you often rebuild the same sources. Your milage may vary however, so we recommend evaluating it for yourself. To enable it, make sure it's on the path and configure with <code>--enable-ccache<\/code>.<\/p>\n@@ -833,1 +807,1 @@\n-<p>Let’s break it down! First, the selected configuration, and the top-level target you entered on the command line that caused the failure is printed.<\/p>\n+<p>Let's break it down! First, the selected configuration, and the top-level target you entered on the command line that caused the failure is printed.<\/p>\n@@ -837,1 +811,1 @@\n-<p>Finally, some hints are given on how to locate the error in the complete log. In this example, we would try searching the log file for “<code>psMemoryPool.o<\/code>”. Another way to quickly locate make errors in the log is to search for “<code>] Error<\/code>” or “<code>***<\/code>”.<\/p>\n+<p>Finally, some hints are given on how to locate the error in the complete log. In this example, we would try searching the log file for &quot;<code>psMemoryPool.o<\/code>&quot;. Another way to quickly locate make errors in the log is to search for &quot;<code>] Error<\/code>&quot; or &quot;<code>***<\/code>&quot;.<\/p>\n@@ -858,1 +832,1 @@\n-<p>If this does not work, the next step is to run <code>make dist-clean<\/code>, or removing the build output directory (<code>$BUILD<\/code>). This will clean all generated output, including your configuration. You will need to re-run <code>configure<\/code> after this step. A good idea is to run <code>make print-configuration<\/code> before running <code>make dist-clean<\/code>, as this will print your current <code>configure<\/code> command line. Here’s a way to do this:<\/p>\n+<p>If this does not work, the next step is to run <code>make dist-clean<\/code>, or removing the build output directory (<code>$BUILD<\/code>). This will clean all generated output, including your configuration. You will need to re-run <code>configure<\/code> after this step. A good idea is to run <code>make print-configuration<\/code> before running <code>make dist-clean<\/code>, as this will print your current <code>configure<\/code> command line. Here's a way to do this:<\/p>\n@@ -864,1 +838,1 @@\n-<p>Sometimes the Git repository gets in a state that causes the product to be un-buildable. In such a case, the simplest solution is often the “sledgehammer approach”: delete the entire repository, and re-clone it. If you have local changes, save them first to a different location using <code>git format-patch<\/code>.<\/p><\/li>\n+<p>Sometimes the Git repository gets in a state that causes the product to be un-buildable. In such a case, the simplest solution is often the &quot;sledgehammer approach&quot;: delete the entire repository, and re-clone it. If you have local changes, save them first to a different location using <code>git format-patch<\/code>.<\/p><\/li>\n@@ -903,2 +877,2 @@\n-<p>You can have multiple configurations for a single source forest. When you create a new configuration, run <code>configure --with-conf-name=&lt;name&gt;<\/code> to create a configuration with the name <code>&lt;name&gt;<\/code>. Alternatively, you can create a directory under <code>build<\/code> and run <code>configure<\/code> from there, e.g. <code>mkdir build\/&lt;name&gt; &amp;&amp; cd build\/&lt;name&gt; &amp;&amp; bash ..\/..\/configure<\/code>.<\/p>\n-<p>Then you can build that configuration using <code>make CONF_NAME=&lt;name&gt;<\/code> or <code>make CONF=&lt;pattern&gt;<\/code>, where <code>&lt;pattern&gt;<\/code> is a substring matching one or several configurations, e.g. <code>CONF=debug<\/code>. The special empty pattern (<code>CONF=<\/code>) will match <em>all<\/em> available configuration, so <code>make CONF= hotspot<\/code> will build the <code>hotspot<\/code> target for all configurations. Alternatively, you can execute <code>make<\/code> in the configuration directory, e.g. <code>cd build\/&lt;name&gt; &amp;&amp; make<\/code>.<\/p>\n+<p>You can have multiple configurations for a single source forest. When you create a new configuration, run <code>configure --with-conf-name=&lt;name&gt;<\/code> to create a configuration with the name <code>&lt;name&gt;<\/code>. Alternatively, you can create a directory under <code>build<\/code> and run <code>configure<\/code> from there, e.g. <code>mkdir build\/&lt;name&gt; &amp;&amp; cd build\/&lt;name&gt; &amp;&amp; bash ..\/..\/configure<\/code>.<\/p>\n+<p>Then you can build that configuration using <code>make CONF_NAME=&lt;name&gt;<\/code> or <code>make CONF=&lt;pattern&gt;<\/code>, where <code>&lt;pattern&gt;<\/code> is a substring matching one or several configurations, e.g. <code>CONF=debug<\/code>. The special empty pattern (<code>CONF=<\/code>) will match <em>all<\/em> available configuration, so <code>make CONF= hotspot<\/code> will build the <code>hotspot<\/code> target for all configurations. Alternatively, you can execute <code>make<\/code> in the configuration directory, e.g. <code>cd build\/&lt;name&gt; &amp;&amp; make<\/code>.<\/p>\n@@ -908,1 +882,1 @@\n-<p>You can also use <code>CONF_CHECK=ignore<\/code> to skip the check for a needed configure update. This might speed up the build, but comes at the risk of an incorrect build result. This is only recommended if you know what you’re doing.<\/p>\n+<p>You can also use <code>CONF_CHECK=ignore<\/code> to skip the check for a needed configure update. This might speed up the build, but comes at the risk of an incorrect build result. This is only recommended if you know what you're doing.<\/p>\n@@ -914,1 +888,1 @@\n-<p>The safe way to use fine-grained make targets is to use the module specific make targets. All source code in the JDK is organized so it belongs to a module, e.g. <code>java.base<\/code> or <code>jdk.jdwp.agent<\/code>. You can build only a specific module, by giving it as make target: <code>make jdk.jdwp.agent<\/code>. If the specified module depends on other modules (e.g. <code>java.base<\/code>), those modules will be built first.<\/p>\n+<p>The safe way to use fine-grained make targets is to use the module specific make targets. All source code in the JDK is organized so it belongs to a module, e.g. <code>java.base<\/code> or <code>jdk.jdwp.agent<\/code>. You can build only a specific module, by giving it as make target: <code>make jdk.jdwp.agent<\/code>. If the specified module depends on other modules (e.g. <code>java.base<\/code>), those modules will be built first.<\/p>\n@@ -928,1 +902,1 @@\n-<p>Note that some phases may depend on others, e.g. <code>java<\/code> depends on <code>gensrc<\/code> (if present). Make will build all needed prerequisites before building the requested phase.<\/p>\n+<p>Note that some phases may depend on others, e.g. <code>java<\/code> depends on <code>gensrc<\/code> (if present). Make will build all needed prerequisites before building the requested phase.<\/p>\n@@ -935,1 +909,1 @@\n-<p>A useful pattern is to build the first time normally (e.g. <code>make jdk.jdwp.agent<\/code>) and then on subsequent builds, use the <code>-only<\/code> make target.<\/p>\n+<p>A useful pattern is to build the first time normally (e.g. <code>make jdk.jdwp.agent<\/code>) and then on subsequent builds, use the <code>-only<\/code> make target.<\/p>\n@@ -943,1 +917,1 @@\n-<p>You can, in fact, select a configuration to build by pointing to the <code>spec.gmk<\/code> file with the <code>SPEC<\/code> make control variable, e.g. <code>make SPEC=$BUILD\/spec.gmk<\/code>. While this is not the recommended way to call <code>make<\/code> as a user, it is what is used under the hood by the build system.<\/p>\n+<p>You can, in fact, select a configuration to build by pointing to the <code>spec.gmk<\/code> file with the <code>SPEC<\/code> make control variable, e.g. <code>make SPEC=$BUILD\/spec.gmk<\/code>. While this is not the recommended way to call <code>make<\/code> as a user, it is what is used under the hood by the build system.<\/p>\n@@ -958,1 +932,1 @@\n-<li><p><code>jdk<\/code>: This is the “exploded image”. After <code>make jdk<\/code>, you will be able to launch the newly built JDK by running <code>$BUILD\/jdk\/bin\/java<\/code>.<\/p><\/li>\n+<li><p><code>jdk<\/code>: This is the &quot;exploded image&quot;. After <code>make jdk<\/code>, you will be able to launch the newly built JDK by running <code>$BUILD\/jdk\/bin\/java<\/code>.<\/p><\/li>\n@@ -960,1 +934,1 @@\n-<li><p><code>support<\/code>: This is an area for intermediate files needed during the build, e.g. generated source code, object files and class files. Some noteworthy directories in <code>support<\/code> is <code>gensrc<\/code>, which contains the generated source code, and the <code>modules_*<\/code> directories, which contains the files in a per-module hierarchy that will later be collapsed into the <code>jdk<\/code> directory of the exploded image.<\/p><\/li>\n+<li><p><code>support<\/code>: This is an area for intermediate files needed during the build, e.g. generated source code, object files and class files. Some noteworthy directories in <code>support<\/code> is <code>gensrc<\/code>, which contains the generated source code, and the <code>modules_*<\/code> directories, which contains the files in a per-module hierarchy that will later be collapsed into the <code>jdk<\/code> directory of the exploded image.<\/p><\/li>\n@@ -995,1 +969,1 @@\n-<p>To test for\/debug race conditions, try running <code>make JOBS=1<\/code> and <code>make JOBS=100<\/code> and see if it makes any difference. (It shouldn’t).<\/p>\n+<p>To test for\/debug race conditions, try running <code>make JOBS=1<\/code> and <code>make JOBS=100<\/code> and see if it makes any difference. (It shouldn't).<\/p>\n@@ -1003,1 +977,1 @@\n-<p>So, now you’ve built your JDK, and made your first patch, and want to contribute it back to the OpenJDK Community.<\/p>\n+<p>So, now you've built your JDK, and made your first patch, and want to contribute it back to the OpenJDK Community.<\/p>\n@@ -1005,2 +979,2 @@\n-<p>The official place to start is the <a href=\"http:\/\/openjdk.java.net\/contribute\/\">‘How to contribute’ page<\/a>. There is also an official (but somewhat outdated and skimpy on details) <a href=\"http:\/\/openjdk.java.net\/guide\/\">Developer’s Guide<\/a>.<\/p>\n-<p>If this seems overwhelming to you, the Adoption Group is there to help you! A good place to start is their <a href=\"https:\/\/wiki.openjdk.java.net\/display\/Adoption\/New+Contributor\">‘New Contributor’ page<\/a>, or start reading the comprehensive <a href=\"https:\/\/adoptopenjdk.gitbooks.io\/adoptopenjdk-getting-started-kit\/en\/\">Getting Started Kit<\/a>. The Adoption Group will also happily answer any questions you have about contributing. Contact them by <a href=\"http:\/\/mail.openjdk.java.net\/mailman\/listinfo\/adoption-discuss\">mail<\/a> or <a href=\"http:\/\/openjdk.java.net\/irc\/\">IRC<\/a>.<\/p>\n+<p>The official place to start is the <a href=\"http:\/\/openjdk.java.net\/contribute\/\">'How to contribute' page<\/a>. There is also an official (but somewhat outdated and skimpy on details) <a href=\"http:\/\/openjdk.java.net\/guide\/\">Developer's Guide<\/a>.<\/p>\n+<p>If this seems overwhelming to you, the Adoption Group is there to help you! A good place to start is their <a href=\"https:\/\/wiki.openjdk.java.net\/display\/Adoption\/New+Contributor\">'New Contributor' page<\/a>, or start reading the comprehensive <a href=\"https:\/\/adoptopenjdk.gitbooks.io\/adoptopenjdk-getting-started-kit\/en\/\">Getting Started Kit<\/a>. The Adoption Group will also happily answer any questions you have about contributing. Contact them by <a href=\"http:\/\/mail.openjdk.java.net\/mailman\/listinfo\/adoption-discuss\">mail<\/a> or <a href=\"http:\/\/openjdk.java.net\/irc\/\">IRC<\/a>.<\/p>\n","filename":"doc\/building.html","additions":114,"deletions":140,"binary":false,"changes":254,"status":"modified"}]}