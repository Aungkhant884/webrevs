{"files":[{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 6251988\n+  @summary PIT: Choice consumes MouseReleased, MouseClicked events when clicking it with left button,\n+  @key headful\n+*\/\n+\n+import java.awt.Choice;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+public class ChoiceConsumeMouseEvents {\n+\n+    static volatile Frame frame;\n+    static volatile Robot robot;\n+    static volatile Choice choice1 = new Choice();\n+    static volatile boolean mousePressed = false;\n+    static volatile boolean mouseReleased = false;\n+    static volatile boolean mouseClicked = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> createUI());\n+            runTest();\n+        } finally {\n+           if (frame != null) {\n+               EventQueue.invokeAndWait(() -> frame.dispose());\n+           }\n+        }\n+    }\n+\n+    static void createUI() {\n+        for (int i = 1; i<10; i++){\n+            choice1.add(\"item-0\"+i);\n+        }\n+        choice1.addMouseListener(new MouseAdapter() {\n+            public void mousePressed(MouseEvent me) {\n+                mousePressed = true;\n+                System.out.println(me);\n+            }\n+            public void mouseReleased(MouseEvent me) {\n+                mouseReleased = true;\n+                System.out.println(me);\n+            }\n+            public void mouseClicked(MouseEvent me) {\n+                mouseClicked = true;\n+                System.out.println(me);\n+            }\n+        });\n+\n+        frame = new Frame(\"ChoiceConsumeMouseEvents\");\n+        frame.add(choice1);\n+        frame.setSize(400, 400);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+        frame.validate();\n+    }\n+\n+    static void runTest() {\n+        try {\n+            robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.setAutoDelay(50);\n+            robot.delay(100);\n+            testMouseClick(InputEvent.BUTTON1_DOWN_MASK, 0);\n+            robot.delay(100);\n+            testMouseClick(InputEvent.BUTTON1_DOWN_MASK, 100);\n+        } catch (Throwable e) {\n+            throw new RuntimeException(\"Test failed. Exception thrown: \"+e);\n+        }\n+    }\n+\n+    static void testMouseClick(int button, int delay) {\n+        Point pt = choice1.getLocationOnScreen();\n+        robot.mouseMove(pt.x + choice1.getWidth()\/2, pt.y + choice1.getHeight()\/2);\n+        robot.delay(100);\n+        robot.mousePress(button);\n+        robot.delay(delay);\n+        robot.mouseRelease(button);\n+        robot.delay(200);\n+        if (!(mousePressed &&\n+              mouseReleased &&\n+              mouseClicked))\n+        {\n+            throw new RuntimeException(\"Test failed. Choice should generate PRESSED, RELEASED, CLICKED events\");\n+        } else {\n+            System.out.println(\"Test passed. Choice generated MouseDragged PRESSED, RELEASED, CLICKED events\");\n+        }\n+        robot.keyPress(KeyEvent.VK_ESCAPE);\n+        robot.keyRelease(KeyEvent.VK_ESCAPE);\n+        robot.delay(200);\n+        mousePressed = false;\n+        mouseReleased = false;\n+        mouseClicked = false;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/ChoiceConsumeMouseEvents.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4338368\n+  @summary Tests that choice doesn't throw spurious mouse events when losing focus\n+  @key headful\n+*\/\n+\n+import java.awt.Button;\n+import java.awt.Choice;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.Robot;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+public class ChoiceFocusLostTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> createUI());\n+            Robot robot = new Robot();\n+            robot.waitForIdle();\n+            robot.keyPress(KeyEvent.VK_TAB);\n+            robot.delay(50);\n+            robot.keyRelease(KeyEvent.VK_TAB);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            if (!client.isPassed()) {\n+                throw new RuntimeException(\"Test failed: choice fires spurious events\");\n+            } else {\n+                System.out.println(\"Test passed.\");\n+            }\n+        } finally {\n+            if (frame != null) {\n+                EventQueue.invokeAndWait(() -> frame.dispose());\n+            }\n+        }\n+    }\n+\n+    static volatile Frame frame;\n+    static volatile ChoiceBug client;\n+\n+    static void createUI() {\n+        frame = new Frame(\"ChoiceFocusLostTest\");\n+        client = new ChoiceBug();\n+        frame.add(client);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n+\n+class ChoiceBug extends Panel {\n+\n+    volatile boolean passed = true;\n+\n+    public ChoiceBug() {\n+        Choice choice = new Choice();\n+        choice.add(\"item-1\");\n+        choice.add(\"item-2\");\n+        Button button = new Button(\"Button\");\n+        add(choice);\n+        add(button);\n+        choice.addMouseListener(new MouseAdapter() {\n+            public void mouseReleased(MouseEvent me) {\n+                passed = false;\n+            }\n+            public void mouseClicked(MouseEvent me) {\n+                passed = false;\n+            }\n+        });\n+        choice.addFocusListener(new FocusAdapter() {\n+            public void focusGained(FocusEvent fe) {\n+                System.out.println(\"Focus Gained\");\n+                System.out.println(fe);\n+            }\n+            public void focusLost(FocusEvent fe) {\n+                System.out.println(\"Got expected FocusLost event.\");\n+                System.out.println(fe);\n+            }\n+        });\n+        setSize(400, 400);\n+        choice.requestFocus();\n+    }\n+\n+    public boolean isPassed() {\n+        return passed;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/ChoiceFocusLostTest.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4303064\n+  @summary Tests that choice doesn't freeze display when its container is\n+           disabled and enabled after.\n+  @key headful\n+*\/\n+\n+import java.awt.Button;\n+import java.awt.Choice;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+public class ChoiceFreezeTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> createUI());\n+            runTest();\n+        } finally {\n+            if (frame != null) {\n+                EventQueue.invokeAndWait(() -> frame.dispose());\n+            }\n+        }\n+    }\n+\n+    static volatile Frame frame;\n+    static volatile ChoiceFreezeBug client;\n+\n+    static void createUI() {\n+        frame = new Frame(\"ChoiceFreezeTest\");\n+        client = new ChoiceFreezeBug();\n+        frame.add(client);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+        client.init();\n+     }\n+\n+     static void runTest() throws Exception {\n+         Robot robot = new Robot();\n+         robot.waitForIdle();\n+         robot.delay(2000);\n+         robot.mouseMove(client.choice.getLocationOnScreen().x + 1, client.choice.getLocationOnScreen().y + 1);\n+         robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+         robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+         robot.delay(1000);\n+         robot.mouseMove(client.button.getLocationOnScreen().x + 3, client.button.getLocationOnScreen().y + 3);\n+         robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+         robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+         robot.delay(1000);\n+         robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+         robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+         robot.delay(6000);\n+\n+         if (!client.isPassed()) {\n+             throw new RuntimeException(\"Test failed: display is frozen.\");\n+         }\n+    }\n+}\n+\n+class ChoiceFreezeBug extends Panel {\n+\n+    volatile Button button;\n+    volatile Choice choice;\n+    volatile ChoiceMouseListener listener = new ChoiceMouseListener();\n+\n+    public ChoiceFreezeBug() {\n+        choice = new Choice();\n+        choice.addItem(\"Item 1\");\n+        choice.addItem(\"Item 2\");\n+        button = new Button(\"Button\");\n+        add(choice);\n+        add(button);\n+        button.addMouseListener(listener);\n+        setEnabled(false);\n+    }\n+\n+    void init() {\n+        setEnabled(true);\n+        choice.requestFocus();\n+    }\n+\n+    public boolean isPassed() {\n+        return listener.isPassed();\n+    }\n+}\n+\n+class ChoiceMouseListener extends MouseAdapter {\n+\n+    volatile boolean passed = false;\n+\n+    public void mouseReleased(MouseEvent e) {\n+        passed = true;\n+    }\n+\n+    public void mousePressed(MouseEvent e) {\n+        passed = true;\n+    }\n+\n+    public boolean isPassed() {\n+        return passed;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/ChoiceFreezeTest.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 6239941\n+  @summary Choice triggers ItemEvent when selecting an item with right mouse button, Xtoolkit\n+  @key headful\n+  @requires (os.family == \"linux\")\n+*\/\n+\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+import java.awt.event.KeyEvent;\n+\n+public class ChoiceGeneratesItemEvents implements ItemListener {\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!System.getProperty(\"os.name\").toLowerCase().startsWith(\"linux\")) {\n+            System.out.println(\"This test is for Linux only\");\n+            return;\n+        }\n+        try {\n+            EventQueue.invokeAndWait(() -> createUI());\n+            runTest();\n+        } finally {\n+            if (frame != null) {\n+                EventQueue.invokeAndWait(() -> frame.dispose());\n+\n+            }\n+        }\n+    }\n+\n+    static volatile Frame frame;\n+    static volatile Robot robot;\n+    static volatile Choice choice1;\n+    static volatile boolean passed = true;\n+\n+    static void createUI() {\n+        choice1 = new Choice();\n+        for (int i = 1; i<10; i++){\n+            choice1.add(\"item-0\"+i);\n+        }\n+        choice1.setForeground(Color.red);\n+        choice1.setBackground(Color.red);\n+        choice1.addItemListener(new ChoiceGeneratesItemEvents());\n+        frame = new Frame(\"ChoiceGeneratesItemEvents\");\n+        frame.add(choice1);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.validate();\n+        frame.setVisible(true);\n+    }\n+\n+    static void runTest() throws Exception {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(50);\n+        robot.delay(100);\n+        testMousePressOnChoice(InputEvent.BUTTON2_DOWN_MASK);\n+        testMousePressOnChoice(InputEvent.BUTTON3_DOWN_MASK);\n+        if (!passed) {\n+            throw new RuntimeException(\"Test failed.\");\n+        } else {\n+            System.out.println(\"Test passed. \");\n+        }\n+    }\n+\n+    static void testMousePressOnChoice(int button) {\n+        Point pt = choice1.getLocationOnScreen();\n+        robot.mouseMove(pt.x + choice1.getWidth()\/2, pt.y + choice1.getHeight()\/2);\n+        robot.delay(100);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(2000);\n+\n+        int px = pt.x + choice1.getWidth()\/2;\n+        int py = pt.y + 2 * choice1.getHeight();\n+        Color color = robot.getPixelColor(px, py);\n+        \/\/we should take a color on the point on the choice's menu\n+        System.out.println(\"Got color \" + color + \" at (\" + px + \",\" + py + \")\");\n+        if (!color.equals(Color.red)) {\n+            throw new RuntimeException(\"Test failed. Choice wasn't open with LEFTMOUSE button.\" +button);\n+        }\n+        robot.mouseMove(pt.x + choice1.getWidth()\/2,\n+                        pt.y + 5*choice1.getHeight());\n+        robot.delay(200);\n+        robot.mousePress(button);\n+        robot.mouseRelease(button);\n+        robot.delay(200);\n+\n+        \/\/close opened choice\n+        robot.keyPress(KeyEvent.VK_ESCAPE);\n+        robot.keyRelease(KeyEvent.VK_ESCAPE);\n+        robot.delay(200);\n+    }\n+\n+    public void itemStateChanged(ItemEvent ie) {\n+        System.err.println(\"Opened Choice generated ItemEvent on RIGHT\/MIDDLE mouse press.\" +ie);\n+        passed = false;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/ChoiceGeneratesItemEvents.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -0,0 +1,206 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 5003166\n+  @summary REG:Mouse button not validated before bringing up the drop-down menu for choice\n+  @key headful\n+  @requires (os.family == \"linux\" | os.family == \"windows\")\n+*\/\n+\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+public class ChoiceHandleMouseEvent {\n+    static Robot robot;\n+    static volatile Choice choice1;\n+    static volatile Frame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        String os = System.getProperty(\"os.name\").toLowerCase();\n+        if (!os.startsWith(\"windows\") && !os.startsWith(\"linux\")) {\n+            System.out.println(\"This test is only for Windows and Linux\");\n+            return;\n+        }\n+        try {\n+            EventQueue.invokeAndWait(() -> createUI());\n+            runTest();\n+        } finally {\n+            if (frame != null) {\n+                EventQueue.invokeAndWait(() -> frame.dispose());\n+            }\n+       }\n+    }\n+\n+    static void createUI() {\n+        choice1 = new Choice();\n+        choice1.add(\"item-01\");\n+        choice1.add(\"item-02\");\n+        choice1.add(\"item-03\");\n+        choice1.add(\"item-04\");\n+        choice1.setForeground(Color.red);\n+        choice1.setBackground(Color.red);\n+        frame = new Frame(\"ChoiceHandleMouseEvent\");\n+        frame.add(choice1);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.validate();\n+        frame.setVisible(true);\n+    }\n+\n+    static void runTest() throws Exception {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(50);\n+\n+        \/*\n+         * Stage 1: Choice should only opens with LEFTMOUSE click.\n+         * Should only pass on Windows or XAWT.\n+         * Choice on motif might be opened only by click on small box\n+         * in the right side.\n+         *\/\n+        testPressMouseButton(InputEvent.BUTTON2_DOWN_MASK);\n+        testPressMouseButton(InputEvent.BUTTON3_DOWN_MASK);\n+        System.out.println(\"Passed Stage 1: Choice should only opens with LEFT BUTTON.\");\n+\n+        \/*\n+         * Stage 2: Choice should only change its value if pressed\n+         * mouse button is LEFTMOUSE.\n+         *\/\n+        \/\/ first parameter is for opening choice. The second is for\n+        \/\/ selecting item inside the menu\n+        testPressMouseButton_2(InputEvent.BUTTON1_DOWN_MASK, InputEvent.BUTTON2_DOWN_MASK);\n+        testPressMouseButton_2(InputEvent.BUTTON1_DOWN_MASK, InputEvent.BUTTON3_DOWN_MASK);\n+        System.out.println(\"Passed Stage 2: Choice should not change its value if pressed mouse buttonis  not left.\");\n+\n+        \/*\n+         * Stage 3: Choice should only react on drags with LEFTMOUSE button.\n+         *\/\n+        \/\/ first parameter is for opening choice. The second is for\n+        \/\/ selecting item inside the menu\n+        testDragMouseButton(InputEvent.BUTTON1_DOWN_MASK, InputEvent.BUTTON2_DOWN_MASK);\n+        testDragMouseButton(InputEvent.BUTTON1_DOWN_MASK, InputEvent.BUTTON3_DOWN_MASK);\n+        System.out.println(\"Passed Stage 3: Choice should only react on drags with LEFTMOUSE button.\");\n+    }\n+\n+    static void testPressMouseButton(int button) {\n+        Point pt = choice1.getLocationOnScreen();\n+        robot.mouseMove(pt.x + choice1.getWidth()\/2, pt.y + choice1.getHeight()\/2);\n+        robot.delay(100);\n+        robot.mousePress(button);\n+        robot.mouseRelease(button);\n+        robot.delay(200);\n+\n+        int px = pt.x + choice1.getWidth()\/2;\n+        int py = pt.y + 3 * choice1.getHeight();\n+        Color color = robot.getPixelColor(px, py);\n+        \/\/we should take a color on the point on the choice's menu\n+        System.out.println(\"Got color \" + color + \" at (\" + px + \",\" + py + \")\");\n+        System.out.println(\"RED=\"+Color.red);\n+        if (color.equals(Color.red)) {\n+            throw new RuntimeException(\"Test failed. Choice opens with \"+button);\n+        } else {\n+            System.out.println(\"Stage 1 passed.\"+ button);\n+        }\n+\n+        \/\/close opened choice\n+        robot.keyPress(KeyEvent.VK_ESCAPE);\n+        robot.keyRelease(KeyEvent.VK_ESCAPE);\n+    }\n+\n+    static void testPressMouseButton_2(int openButton, int button) {\n+        Point pt = choice1.getLocationOnScreen();\n+        robot.mouseMove(pt.x + choice1.getWidth()\/2,\n+                        pt.y + choice1.getHeight()\/2);\n+        robot.delay(100);\n+        robot.mousePress(openButton);\n+        robot.mouseRelease(openButton);\n+        robot.delay(200);\n+        robot.mouseMove(pt.x + choice1.getWidth()\/2,\n+                        pt.y + 2 * choice1.getHeight());\n+        robot.mousePress(button);\n+        robot.mouseRelease(button);\n+\n+        System.out.println();\n+\n+        if (choice1.getSelectedIndex() == 0) {\n+            System.out.println(\"Stage 2 passed.\" + openButton +\":\"+button);\n+        } else {\n+            throw new RuntimeException(\"Stage 2 failed.\" + openButton +\":\"+button);\n+        }\n+\n+        \/\/close opened choice\n+        robot.keyPress(KeyEvent.VK_ESCAPE);\n+        robot.keyRelease(KeyEvent.VK_ESCAPE);\n+    }\n+\n+    static void testDragMouseButton(int openButton, int button) {\n+        Point pt = choice1.getLocationOnScreen();\n+        robot.mouseMove(pt.x + choice1.getWidth()\/2, pt.y + choice1.getHeight()\/2);\n+        robot.delay(100);\n+        robot.mousePress(openButton);\n+        robot.mouseRelease(openButton);\n+        robot.delay(200);\n+\n+        robot.mousePress(button);\n+        dragMouse(pt.x + choice1.getWidth()\/2, pt.y +\n+                  choice1.getHeight()\/2,\n+                  pt.x + choice1.getWidth()\/2,\n+                  pt.y + 2 * choice1.getHeight());\n+        robot.mouseRelease(button);\n+\n+        if (choice1.getSelectedIndex() == 0 ){\n+            System.out.println(\"Stage 3 passed.\" + openButton +\":\"+button);\n+            \/\/            System.out.println(\"choice1.getSelectedIndex()\" + choice1.getSelectedIndex());\n+        } else {\n+            throw new RuntimeException(\"Stage 3 failed.\" + openButton +\":\"+button);\n+        }\n+\n+        \/\/close opened choice\n+        robot.keyPress(KeyEvent.VK_ESCAPE);\n+        robot.keyRelease(KeyEvent.VK_ESCAPE);\n+    }\n+\n+    static void dragMouse(int x0, int y0, int x1, int y1) {\n+        int curX = x0;\n+        int curY = y0;\n+        int dx = x0 < x1 ? 1 : -1;\n+        int dy = y0 < y1 ? 1 : -1;\n+\n+        while (curX != x1){\n+            curX += dx;\n+            robot.mouseMove(curX, curY);\n+        }\n+        while (curY != y1 ){\n+            curY += dy;\n+            robot.mouseMove(curX, curY);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/ChoiceHandleMouseEvent.java","additions":206,"deletions":0,"binary":false,"changes":206,"status":"added"},{"patch":"@@ -0,0 +1,340 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 6239944\n+  @summary PIT: Right clicking on the scrollbar of the choice's dropdown disposes the drop-down, on XToolkit\n+  @key headful\n+  @requires (os.family == \"linux\" | os.family == \"windows\")\n+*\/\n+\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+public class ChoiceHandleMouseEvent_2 {\n+\n+    static Robot robot;\n+    static volatile Choice choice1;\n+    static volatile Frame frame;\n+    static boolean isWindows;\n+\n+    public static void main(String[] args) throws Exception {\n+        String os = System.getProperty(\"os.name\").toLowerCase();\n+        if (!os.startsWith(\"windows\") && !os.startsWith(\"linux\")) {\n+            System.out.println(\"This test is only for Windows and Linux\");\n+            return;\n+        }\n+        isWindows = os.startsWith(\"windows\");\n+        try {\n+            EventQueue.invokeAndWait(() -> createUI());\n+            runTest();\n+        } finally {\n+            if (frame != null) {\n+                EventQueue.invokeAndWait(() -> frame.dispose());\n+            }\n+       }\n+    }\n+\n+    static void createUI() {\n+        choice1 = new Choice();\n+        for (int i = 1; i<50; i++) {\n+            choice1.add(\"item-0\"+i);\n+        }\n+        choice1.setForeground(Color.red);\n+        choice1.setBackground(Color.red);\n+        frame = new Frame(\"ChoiceHandleMouseEvent_2\");\n+        frame.setBackground(Color.green);\n+        Panel panel = new Panel();\n+        panel.setBackground(Color.green);\n+        panel.add(choice1);\n+        frame.add(panel);\n+        frame.setSize(300,300);\n+        frame.setLocationRelativeTo(null);\n+        frame.validate();\n+        frame.setVisible(true);\n+    }\n+\n+    static void runTest() throws Exception {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(50);\n+        robot.delay(100);\n+\n+        \/*\n+         * Stage 1. Choice should be closed if user dragged mouse\n+         * outside of Choice after opening it.\n+         * Should only pass on Windows or XAWT.\n+         * Choice on motif might be opened only by click on small box\n+         * in the right side.\n+         *\/\n+         testDragMouseButtonOut(InputEvent.BUTTON1_DOWN_MASK);\n+         System.out.println(\"Passed Stage 1: Choice should be closed if mouse dragged out.\");\n+\n+        \/*\n+         * Stage 2: Choice should be closed if LeftMouse drag finished\n+         * on Scrollbar. This involeves only one\n+         * MousePress and one MouseRelease event\n+         *\/\n+         \/\/ first parameter is for opening choice. The second is for\n+         \/\/ selecting item inside the menu\n+         testDragMouseButtonOnSB(InputEvent.BUTTON1_DOWN_MASK);\n+         System.out.println(\"Passed Stage 2: Choice should be closed if \" +\n+                            \"LeftMouse drag finished on Scrollbar.\");\n+\n+        \/*\n+         * Stage 3: Pressing RIGHT\/MIDDLE MouseButton on Scrollbar\n+         * shouldn't close Choice's pop-down menu.\n+         * Pressing LEFT MouseButton shouldn't close it too. It should\n+         * scroll it.\n+         * This is an unstable test because we doesn't have an API to\n+         * get Scrollbar from Choice. There is a possibility not to\n+         * hit the scrollbar that couldn't been predicted.\n+         *\/\n+         \/\/ first parameter is for opening choice. The second is for\n+         \/\/ selecting item inside the menu\n+         testPressOnScrollbar(InputEvent.BUTTON1_DOWN_MASK, InputEvent.BUTTON2_DOWN_MASK);\n+         testPressOnScrollbar(InputEvent.BUTTON1_DOWN_MASK, InputEvent.BUTTON3_DOWN_MASK);\n+         System.out.println(\"Passed Stage 3: Choice correctly reacts on mouse click on its Scrollbar.\");\n+\n+         \/*\n+          * Stage 4: Choice should close its popdown menu if user opened a Choice then\n+          * releases Mouse and then presses Mouse again and dragged it on Choice's Scrollbar\n+          * This involves only one MousePress and one MouseRelease\n+          * event, so it differs from Stage 2.\n+          *\/\n+          \/\/ first parameter is for opening choice. The second is for\n+          \/\/ selecting item inside the menu or scrollbar\n+          testDragMouseOnScrollbar(InputEvent.BUTTON1_DOWN_MASK, InputEvent.BUTTON1_DOWN_MASK);\n+          System.out.println(\"Passed Stage 4: Choice should close if user opened a \" +\n+                             \"Choice then releases Mouse and then presses Mouse again \" +\n+                             \"and drag it on Choice's Scrollbar .\");\n+    }\n+\n+\n+    \/\/Stage 4\n+    static void testDragMouseOnScrollbar(int openButton, int button) {\n+        Point pt = choice1.getLocationOnScreen();\n+        robot.mouseMove(pt.x + choice1.getWidth()\/2, pt.y + choice1.getHeight()\/2);\n+        robot.delay(100);\n+        robot.mousePress(openButton);\n+        robot.mouseRelease(openButton);\n+        robot.delay(200);\n+\n+        robot.mouseMove(pt.x + choice1.getWidth()\/2, pt.y + choice1.getHeight()\/2);\n+        robot.mousePress(button);\n+        \/*X-coordinate should be closer to right edge of Choice, so\n+          divider 4 is used. *\/\n+        dragMouse(pt.x + choice1.getWidth()\/2, pt.y + choice1.getHeight()\/2,\n+                  pt.x + choice1.getWidth() - choice1.getHeight()\/4, pt.y + 5*choice1.getHeight());\n+        robot.mouseRelease(button);\n+        robot.delay(200);\n+\n+        int px = pt.x + choice1.getWidth()\/2;\n+        int py = pt.y + 3 * choice1.getHeight();\n+        Color color = robot.getPixelColor(px, py);\n+        \/\/should take a color on the point on the choice's menu\n+        System.out.println(\"Got color \" + color + \" at (\" + px + \",\" + py + \")\");\n+        if (color.equals(Color.red)) {\n+            throw new RuntimeException(\n+               \"Test failed. Choice didn't close after drag without firstPress on ScrollBar \" + button);\n+        } else {\n+            System.out.println(\"Stage 4 passed.\"+ button);\n+        }\n+\n+        \/\/close opened choice\n+        robot.keyPress(KeyEvent.VK_ESCAPE);\n+        robot.keyRelease(KeyEvent.VK_ESCAPE);\n+        robot.delay(200);\n+    }\n+\n+    \/\/stage 3\n+    static void testPressOnScrollbar(int openButton, int button) {\n+        if (!isWindows) {\n+            return; \/\/ Windows-only tests.\n+        }\n+        Point pt = choice1.getLocationOnScreen();\n+        robot.mouseMove(pt.x + choice1.getWidth()\/2, pt.y + choice1.getHeight()\/2);\n+        robot.delay(100);\n+        robot.mousePress(openButton);\n+        robot.mouseRelease(openButton);\n+        robot.delay(200);\n+        \/*X-coordinate should be closer to right edge of Choice, so\n+          divide by 4 is used. *\/\n+        int px = pt.x + choice1.getWidth() - choice1.getHeight()\/4;\n+        int py = pt.y + 5*choice1.getHeight();\n+        robot.mouseMove(px, py);\n+        robot.delay(200);\n+        robot.mousePress(button);\n+        robot.mouseRelease(button);\n+        robot.delay(200);\n+\n+        System.out.println(\"x= \"+px);\n+        System.out.println(\"y= \"+py);\n+\n+        \/*\n+          This is for Windows only.\n+          On XP theme choice become closed on RightMouseClick over a scrollbar.\n+          A system menu is opened after that. On Classic theme Choice doesn't react on it at all.\n+        *\/\n+        boolean isXPTheme = false;\n+        Object themeObject = Toolkit.getDefaultToolkit().getDesktopProperty(\"win.xpstyle.themeActive\");\n+        \/\/ it returns null when Classic theme is active but we should\n+        \/\/ check it's boolean value anyway if event it's not null.\n+        if (themeObject != null) {\n+            isXPTheme = ((Boolean)themeObject).booleanValue();\n+        }\n+        System.out.println(\"isXPTheme=\"+isXPTheme);\n+        px = pt.x + choice1.getWidth()\/2;\n+        py = pt.y + 3 * choice1.getHeight();\n+        Color color = robot.getPixelColor(px, py);\n+        \/\/we should take a color on the point on the choice's menu\n+        System.out.println(\"Got color \" + color + \" at (\" + px + \",\" + py + \")\");\n+        System.out.println(\"RED=\"+Color.red);\n+        System.out.println(\"GREEN=\"+Color.green);\n+        if (isXPTheme && button == InputEvent.BUTTON3_DOWN_MASK) {\n+            if (!color.equals(Color.green)) {\n+                throw new RuntimeException(\"Stage 3 failed(XP theme). \" +\n+                  \"Choice wasn't closed with pressing button on its Scrollbar\" + openButton +\":\"+button);\n+            } else {\n+                System.out.println(\"Stage 3 passed(XP theme).\" + openButton +\":\"+button);\n+            }\n+        } else {\n+            if (!color.equals(Color.red)) {\n+                throw new RuntimeException(\"Stage 3 failed(classic theme). \" +\n+                   \"Choice is being closed with pressing button on its Scrollbar\" + openButton +\":\"+button);\n+            } else {\n+                System.out.println(\"Stage 3 passed(classic theme).\" + openButton +\":\"+button);\n+            }\n+        }\n+\n+        \/\/close opened choice\n+        robot.keyPress(KeyEvent.VK_ESCAPE);\n+        robot.keyRelease(KeyEvent.VK_ESCAPE);\n+        robot.delay(200);\n+    }\n+\n+    \/\/ Stage 1\n+    static void testDragMouseButtonOut(int button) {\n+        Point pt = choice1.getLocationOnScreen();\n+\n+        robot.mouseMove(pt.x + choice1.getWidth()\/2, pt.y + choice1.getHeight()\/2);\n+        robot.mousePress(button);\n+        dragMouse(pt.x + choice1.getWidth()\/2, pt.y + choice1.getHeight()\/2,\n+                  pt.x + choice1.getWidth()*2, pt.y + choice1.getHeight()\/2);\n+        robot.mouseRelease(button);\n+        robot.delay(200);\n+        int px = pt.x + choice1.getWidth()\/2;\n+        int py = pt.y + 3 * choice1.getHeight();\n+        Color color = robot.getPixelColor(px, py);\n+        \/\/should take a color on the point on the choice's menu\n+        System.out.println(\"Got color \" + color + \" at (\" + px + \",\" + py + \")\");\n+        System.out.println(\"RED=\"+Color.red);\n+        \/\/ fix 6268989: On Windows Choice shouldn't been closed if\n+        \/\/  Mouse dragged outside of Choice after one mouse press.\n+        if (isWindows) {\n+            if (color.equals(Color.red)) {\n+                System.out.println(\"Stage 1 passed. On Windows Choice shouldn't be \" +\n+                      \"closed if Mouse dragged outside of Choice after one mouse press \"+button);\n+            } else {\n+                throw new RuntimeException(\"Test failed. Choice on Windows shouldn't be \" +\n+                   \"closed after drag outside of Choice after one mouse press \"+button);\n+            }\n+        } else {\n+            if (color.equals(Color.red)) {\n+                throw new RuntimeException(\"Test failed. Choice didn't close \" +\n+                                           \"after drag outside of Choice \"+button);\n+            } else {\n+                System.out.println(\"Stage 1 passed.\"+ button);\n+            }\n+        }\n+\n+        \/\/close opened choice\n+        robot.keyPress(KeyEvent.VK_ESCAPE);\n+        robot.keyRelease(KeyEvent.VK_ESCAPE);\n+        robot.delay(200);\n+    }\n+\n+    \/\/stage 2\n+    static void testDragMouseButtonOnSB(int button) {\n+        Point pt = choice1.getLocationOnScreen();\n+\n+        robot.mouseMove(pt.x + choice1.getWidth()\/2, pt.y + choice1.getHeight()\/2);\n+        robot.mousePress(button);\n+        \/*X-coordinate should be closer to right edge of Choice, so\n+          divider 4 is used. *\/\n+        dragMouse(pt.x + choice1.getWidth()\/2, pt.y + choice1.getHeight()\/2,\n+                  pt.x + choice1.getWidth() - choice1.getHeight()\/4, pt.y + 5*choice1.getHeight());\n+        robot.mouseRelease(button);\n+        robot.delay(200);\n+        int px = pt.x + choice1.getWidth()\/2;\n+        int py = pt.y + 3 * choice1.getHeight();\n+        Color color = robot.getPixelColor(px, py);\n+        \/\/should take a color on the point on the choice's menu\n+        System.out.println(\"Got color \" + color + \" at (\" + px + \",\" + py + \")\");\n+        if (isWindows) {\n+            if (color.equals(Color.red)) {\n+                System.out.println(\"Stage 2 passed. On Windows Choice shouldn't be \" +\n+                                   \" closed if Mouse dragged on its scrollbar \"+button);\n+            } else {\n+                throw new RuntimeException(\"Test failed. On Windows Choice shouldn't be \" +\n+                                           \" closed if Mouse dragged on its scrollbar  \"+button);\n+            }\n+        } else {\n+            if (color.equals(Color.red)) {\n+                throw new RuntimeException(\"Test failed. Choice didn't close after drag on ScrollBar \"+button);\n+            } else {\n+                System.out.println(\"Stage 2 passed.\"+ button);\n+            }\n+        }\n+\n+        \/\/close opened choice\n+        robot.keyPress(KeyEvent.VK_ESCAPE);\n+        robot.keyRelease(KeyEvent.VK_ESCAPE);\n+        robot.delay(200);\n+    }\n+\n+    static void dragMouse(int x0, int y0, int x1, int y1) {\n+        int curX = x0;\n+        int curY = y0;\n+        int dx = x0 < x1 ? 1 : -1;\n+        int dy = y0 < y1 ? 1 : -1;\n+\n+        while (curX != x1) {\n+            curX += dx;\n+            robot.mouseMove(curX, curY);\n+        }\n+        while (curY != y1) {\n+            curY += dy;\n+            robot.mouseMove(curX, curY);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/ChoiceHandleMouseEvent_2.java","additions":340,"deletions":0,"binary":false,"changes":340,"status":"added"}]}