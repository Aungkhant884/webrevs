{"files":[{"patch":"@@ -179,2 +179,1 @@\n-                                                 alloc.x, (int) x, expander, p0,\n-                                                 justificationData);\n+                (float)alloc.x,  x, expander, p0, justificationData);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/GlyphPainter1.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -401,0 +401,8 @@\n+    static final int getTabbedTextOffset(View view, Segment s, FontMetrics metrics,\n+                                         float x0, float x, TabExpander e,\n+                                         int startOffset,\n+                                         int[] justificationData) {\n+        return getTabbedTextOffset(view, s, metrics, x0, x, e, startOffset, true,\n+                justificationData, true);\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/Utilities.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8232243\n+ * @key headful\n+ * @summary  Verifies caret position in multiline JTextPane\n+ *           in hidpi mode should be in sync with mouse press position.\n+ * @run main\/othervm -Dsun.java2d.uiScale=2 TestCaretPositionJTextPane\n+ *\/\n+\n+import javax.swing.JComboBox;\n+import javax.swing.JTextPane;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.BadLocationException;\n+import javax.swing.text.Caret;\n+import java.awt.Font;\n+import java.awt.BorderLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseListener;\n+import java.awt.geom.Rectangle2D;\n+\n+public class TestCaretPositionJTextPane {\n+    private static JTextPane textPane;\n+    private static JFrame f;\n+\n+    private static void createUI() {\n+        f = new JFrame(\"Test Cursor\/Caret with Java 9\");\n+\n+        textPane = new JTextPane();\n+        textPane.setFont(new java.awt.Font(\"Dialog\", Font.PLAIN, 12));\n+\n+        fillTextPane(textPane);\n+\n+        textPane.addMouseListener(new MouseListener() {\n+            @Override\n+            public void mouseClicked(MouseEvent e) {}\n+\n+            @Override\n+            public void mousePressed(MouseEvent e) {\n+                try {\n+                    Caret caret = textPane.getCaret();\n+                    Rectangle2D rect = textPane.modelToView2D(caret.getDot());\n+\n+                    if (Math.abs(e.getPoint().x - rect.getX()) > 5) {\n+                        System.out.println(\"mouse point \" + e.getPoint());\n+                        System.out.println(\"caret position \" + rect);\n+                        throw new RuntimeException(\" Wrong caret position\");\n+                    }\n+                } catch (BadLocationException ex) {}\n+            }\n+\n+            @Override\n+            public void mouseReleased(MouseEvent e) {}\n+\n+            @Override\n+            public void mouseEntered(MouseEvent e) {}\n+\n+            @Override\n+            public void mouseExited(MouseEvent e) {}\n+        });\n+        f.add(new JScrollPane(textPane), BorderLayout.CENTER);\n+        f.pack();\n+        f.setVisible(true);\n+    }\n+\n+    public static void main(String args[]) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(200);\n+\n+            SwingUtilities.invokeAndWait(() -> createUI());\n+\n+            robot.waitForIdle();\n+            Point p = textPane.getLocationOnScreen();\n+            robot.mouseMove(p.x+ 480, p.y+6);\n+            robot.waitForIdle();\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+        } finally {\n+             SwingUtilities.invokeAndWait(() -> f.dispose());\n+        }\n+    }\n+\n+    private static void fillTextPane(JTextPane textPane) {\n+        StringBuilder buf = new StringBuilder();\n+\n+        for (int i = 0; i < 30; i++) {\n+            StringBuilder row = new StringBuilder();\n+            for (int j = 0; j < 50; j++) {\n+                row.append(j);\n+                if (j % 5 == 0) {\n+                    row.append(\" \");\n+                }\n+            }\n+            buf.append(row).append(System.lineSeparator());\n+        }\n+        textPane.setText(buf.toString());\n+        textPane.setCaretPosition(0);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/Caret\/TestCaretPositionJTextPane.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"}]}