{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @key gc\n+ * @key gc randomness\n","filename":"test\/hotspot\/jtreg\/gc\/TestSoftReferencesBehaviorOnOOME.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -31,0 +31,1 @@\n+ * @library \/test\/lib\n@@ -72,0 +73,1 @@\n+import jdk.test.lib.Utils;\n@@ -74,2 +76,0 @@\n-\n-  static long SEED = Long.getLong(\"seed\", System.nanoTime());\n@@ -81,1 +81,1 @@\n-    Random r = new Random(SEED);\n+    Random r = Utils.getRandomInstance();\n@@ -91,1 +91,1 @@\n-    r = new Random(SEED);\n+    r = new Random(Utils.SEED);\n","filename":"test\/hotspot\/jtreg\/gc\/epsilon\/TestByteArrays.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -31,0 +31,1 @@\n+ * @library \/test\/lib\n@@ -59,0 +60,1 @@\n+import jdk.test.lib.Utils;\n@@ -62,1 +64,0 @@\n-  static long SEED = Long.getLong(\"seed\", System.nanoTime());\n@@ -68,1 +69,1 @@\n-    Random r = new Random(SEED);\n+    Random r = Utils.getRandomInstance();\n@@ -78,1 +79,1 @@\n-    r = new Random(SEED);\n+    r = new Random(Utils.SEED);\n","filename":"test\/hotspot\/jtreg\/gc\/epsilon\/TestElasticTLAB.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -31,0 +31,1 @@\n+ * @library \/test\/lib\n@@ -49,0 +50,1 @@\n+import jdk.test.lib.Utils;\n@@ -51,2 +53,0 @@\n-\n-  static long SEED = Long.getLong(\"seed\", System.nanoTime());\n@@ -58,1 +58,1 @@\n-    Random r = new Random(SEED);\n+    Random r = Utils.getRandomInstance();\n@@ -69,1 +69,1 @@\n-    r = new Random(SEED);\n+    r = new Random(Utils.SEED);\n","filename":"test\/hotspot\/jtreg\/gc\/epsilon\/TestElasticTLABDecay.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -31,0 +31,1 @@\n+ * @library \/test\/lib\n@@ -72,0 +73,1 @@\n+import jdk.test.lib.Utils;\n@@ -74,2 +76,0 @@\n-\n-  static long SEED = Long.getLong(\"seed\", System.nanoTime());\n@@ -81,1 +81,1 @@\n-    Random r = new Random(SEED);\n+    Random r = Utils.getRandomInstance();\n@@ -88,1 +88,1 @@\n-    r = new Random(SEED);\n+    r = new Random(Utils.SEED);\n","filename":"test\/hotspot\/jtreg\/gc\/epsilon\/TestObjects.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -73,0 +73,1 @@\n+import jdk.test.lib.Utils;\n@@ -75,2 +76,0 @@\n-\n-  static long SEED = Long.getLong(\"seed\", System.nanoTime());\n@@ -82,1 +81,1 @@\n-    Random r = new Random(SEED);\n+    Random r = Utils.getRandomInstance();\n@@ -92,1 +91,1 @@\n-    r = new Random(SEED);\n+    r = new Random(Utils.SEED);\n","filename":"test\/hotspot\/jtreg\/gc\/epsilon\/TestRefArrays.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -45,0 +45,1 @@\n+import jdk.test.lib.Utils;\n@@ -78,1 +79,1 @@\n-        Random rnd = new Random();\n+        Random rnd = Utils.getRandomInstance();\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestEagerReclaimHumongousRegionsClearMarkBits.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import jdk.test.lib.Utils;\n@@ -43,0 +44,1 @@\n+import java.util.Random;\n@@ -47,0 +49,1 @@\n+    private static final Random RNG = Utils.getRandomInstance();\n@@ -218,1 +221,1 @@\n-                    payload.get(0)[0] = (byte) (Math.random() * Byte.MAX_VALUE);\n+                    payload.get(0)[0] = (byte) (RNG.nextDouble() * Byte.MAX_VALUE);\n@@ -299,1 +302,1 @@\n-                        regionToLink = (int) (Math.random() * REGIONS_TO_ALLOCATE);\n+                        regionToLink = (int) (RNG.nextDouble() * REGIONS_TO_ALLOCATE);\n@@ -304,1 +307,1 @@\n-                            * NUM_OBJECTS_PER_REGION + (int) (Math.random()\n+                            * NUM_OBJECTS_PER_REGION + (int) (RNG.nextDouble()\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestShrinkAuxiliaryData.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key randomness\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestShrinkAuxiliaryData00.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key randomness\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestShrinkAuxiliaryData05.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key randomness\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestShrinkAuxiliaryData10.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @key randomness\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestShrinkAuxiliaryData15.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key randomness\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestShrinkAuxiliaryData20.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key randomness\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestShrinkAuxiliaryData25.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key randomness\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestShrinkAuxiliaryData30.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+ * @key randomness\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/humongousObjects\/TestHumongousMovement.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+ * @key randomness\n@@ -74,1 +75,1 @@\n-\n+        private final Random random;\n@@ -90,1 +91,1 @@\n-\n+            random = new Random(RND.nextLong());\n@@ -95,1 +96,1 @@\n-                            int arraySize = RND.nextInt(Math.min(maxAllocationMemory - usedMemory,\n+                            int arraySize = random.nextInt(Math.min(maxAllocationMemory - usedMemory,\n@@ -132,1 +133,1 @@\n-                            int elementNum = RND.nextInt(liveObjects.size());\n+                            int elementNum = random.nextInt(liveObjects.size());\n@@ -141,1 +142,1 @@\n-                        int size = RND.nextInt(DEAD_OBJECT_MAX_SIZE);\n+                        int size = random.nextInt(DEAD_OBJECT_MAX_SIZE);\n@@ -166,1 +167,1 @@\n-                actions[RND.nextInt(actions.length)].run();\n+                actions[random.nextInt(actions.length)].run();\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/humongousObjects\/TestNoAllocationsInHRegions.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n- * @key gc stress\n+ * @key gc stress randomness\n@@ -79,1 +79,1 @@\n-    private static final Random RND = Utils.getRandomInstance();\n+    private final Random rnd = new Random(Utils.getRandomInstance().nextLong());\n@@ -92,1 +92,1 @@\n-                    int allocationSize = RND.nextInt((int) (G1_REGION_SIZE * (H_ALLOCATION_REGION_SIZE - 0.5)\n+                    int allocationSize = rnd.nextInt((int) (G1_REGION_SIZE * (H_ALLOCATION_REGION_SIZE - 0.5)\n@@ -101,1 +101,1 @@\n-                    int elementNum = RND.nextInt(liveHObjects.size());\n+                    int elementNum = rnd.nextInt(liveHObjects.size());\n@@ -109,1 +109,1 @@\n-                    int arraySize = RND.nextInt(Math.min(maxSimpleAllocationMemory - usedMemory,\n+                    int arraySize = rnd.nextInt(Math.min(maxSimpleAllocationMemory - usedMemory,\n@@ -121,1 +121,1 @@\n-                    int elementNum = RND.nextInt(liveObjects.size());\n+                    int elementNum = rnd.nextInt(liveObjects.size());\n@@ -130,1 +130,1 @@\n-                int size = RND.nextInt(DEAD_OBJECT_MAX_SIZE);\n+                int size = rnd.nextInt(DEAD_OBJECT_MAX_SIZE);\n@@ -138,1 +138,1 @@\n-            actions[RND.nextInt(actions.length)].run();\n+            actions[rnd.nextInt(actions.length)].run();\n@@ -151,1 +151,1 @@\n-    private final Random RND = Utils.getRandomInstance();\n+    private final Random rnd;\n@@ -161,1 +161,1 @@\n-\n+        this.rnd = new Random(Utils.getRandomInstance().nextLong());\n@@ -170,2 +170,2 @@\n-            int fileNum = RND.nextInt(logCount);\n-            int logLevel = RND.nextInt(LOG_LEVELS.length);\n+            int fileNum = rnd.nextInt(logCount);\n+            int logLevel = rnd.nextInt(LOG_LEVELS.length);\n","filename":"test\/hotspot\/jtreg\/gc\/logging\/TestUnifiedLoggingSwitchStress.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -54,1 +55,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -56,0 +57,1 @@\n+ * @library \/test\/lib\n@@ -119,1 +121,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -121,0 +123,1 @@\n+ * @library \/test\/lib\n@@ -160,1 +163,1 @@\n-import java.util.concurrent.*;\n+import jdk.test.lib.Utils;\n@@ -179,1 +182,1 @@\n-        Random r = new Random();\n+        Random rng = Utils.getRandomInstance();\n@@ -182,1 +185,1 @@\n-                int idx = ThreadLocalRandom.current().nextInt(objects.size());\n+                int idx = rng.nextInt(objects.size());\n@@ -187,1 +190,1 @@\n-            int[] newObj = new int[min + r.nextInt(max - min)];\n+            int[] newObj = new int[min + rng.nextInt(max - min)];\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestAllocHumongousFragment.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -54,1 +55,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -56,0 +57,1 @@\n+ * @library \/test\/lib\n@@ -135,1 +137,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -137,0 +139,1 @@\n+ * @library \/test\/lib\n@@ -180,0 +183,1 @@\n+import jdk.test.lib.Utils;\n@@ -192,1 +196,1 @@\n-        Random r = new Random();\n+        Random r = Utils.getRandomInstance();\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestAllocIntArrays.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -49,0 +50,1 @@\n+ *\/\n@@ -53,1 +55,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -55,0 +57,1 @@\n+ * @library \/test\/lib\n@@ -134,1 +137,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -136,0 +139,1 @@\n+ * @library \/test\/lib\n@@ -179,0 +183,1 @@\n+import jdk.test.lib.Utils;\n@@ -191,1 +196,1 @@\n-        Random r = new Random();\n+        Random r = Utils.getRandomInstance();\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestAllocObjectArrays.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -189,2 +189,0 @@\n-import java.util.Random;\n-\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestAllocObjects.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,2 @@\n-import java.util.concurrent.*;\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n@@ -28,1 +29,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -30,0 +31,1 @@\n+ * @library \/test\/lib\n@@ -59,4 +61,4 @@\n-\n-        int src_idx = ThreadLocalRandom.current().nextInt(0, ARRAY_SIZE);\n-        int dst_idx = ThreadLocalRandom.current().nextInt(0, ARRAY_SIZE);\n-        int len = ThreadLocalRandom.current().nextInt(0, Math.min(ARRAY_SIZE - src_idx, ARRAY_SIZE - dst_idx));\n+        Random rng = Utils.getRandomInstance();\n+        int src_idx = rng.nextInt(ARRAY_SIZE);\n+        int dst_idx = rng.nextInt(ARRAY_SIZE);\n+        int len = rng.nextInt(Math.min(ARRAY_SIZE - src_idx, ARRAY_SIZE - dst_idx));\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestArrayCopyStress.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @key randomness\n@@ -28,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -40,0 +42,1 @@\n+import jdk.test.lib.Utils;\n@@ -52,1 +55,1 @@\n-        Random r = new Random();\n+        Random r = Utils.getRandomInstance();\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestElasticTLAB.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -54,1 +55,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -56,0 +57,1 @@\n+ * @library \/test\/lib\n@@ -87,1 +89,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -89,0 +91,1 @@\n+ * @library \/test\/lib\n@@ -106,1 +109,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -108,0 +111,1 @@\n+ * @library \/test\/lib\n@@ -125,0 +129,1 @@\n+import jdk.test.lib.Utils;\n@@ -137,1 +142,1 @@\n-        Random r = new Random();\n+        Random r = Utils.getRandomInstance();\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestHeapUncommit.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -71,1 +72,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -73,0 +74,1 @@\n+ * @library \/test\/lib\n@@ -108,0 +110,1 @@\n+import jdk.test.lib.Utils;\n@@ -120,1 +123,1 @@\n-        Random r = new Random();\n+        Random r = Utils.getRandomInstance();\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestHumongousThreshold.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -38,1 +39,2 @@\n-import java.util.concurrent.ThreadLocalRandom;\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n@@ -52,0 +54,1 @@\n+        Random rng = Utils.getRandomInstance();\n@@ -53,1 +56,1 @@\n-            objects[ThreadLocalRandom.current().nextInt(SLABS_COUNT)] = createSome();\n+            objects[rng.nextInt(SLABS_COUNT)] = createSome();\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestLargeObjectAlignment.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -54,1 +55,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -56,0 +57,1 @@\n+ * @library \/test\/lib\n@@ -126,1 +128,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -128,0 +130,1 @@\n+ * @library \/test\/lib\n@@ -160,1 +163,2 @@\n-import java.util.concurrent.ThreadLocalRandom;\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n@@ -172,0 +176,1 @@\n+        Random rng = Utils.getRandomInstance();\n@@ -178,1 +183,1 @@\n-                if (ThreadLocalRandom.current().nextInt(1000) > 100) {\n+                if (rng.nextInt(1000) > 100) {\n@@ -182,1 +187,1 @@\n-                if (ThreadLocalRandom.current().nextInt(1000) > 500) {\n+                if (rng.nextInt(1000) > 500) {\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestSieveObjects.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -48,1 +48,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -71,1 +71,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -89,0 +89,1 @@\n+import jdk.test.lib.Utils;\n@@ -138,1 +139,1 @@\n-        Random rn = new Random();\n+        Random rn = Utils.getRandomInstance();\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestStringDedup.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -48,1 +48,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -79,1 +79,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -111,0 +111,1 @@\n+import jdk.test.lib.Utils;\n@@ -165,1 +166,1 @@\n-        Random rn = new Random();\n+        Random rn = Utils.getRandomInstance();\n@@ -202,1 +203,1 @@\n-        Random rn = new Random();\n+        Random rn = Utils.getRandomInstance();\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestStringDedupStress.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -28,0 +28,2 @@\n+ * @library \/test\/lib\n+ *\n@@ -32,0 +34,2 @@\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n@@ -59,0 +63,1 @@\n+        Random r = Utils.getRandomInstance();\n@@ -60,1 +65,1 @@\n-            int val = (int) (Math.random() * Integer.MAX_VALUE);\n+            int val = (int) (r.nextDouble() * Integer.MAX_VALUE);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestC1VectorizedMismatch.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.test.lib.Utils;\n@@ -31,0 +32,2 @@\n+ * @key randomness\n+ * @library \/test\/lib\n@@ -43,2 +46,0 @@\n-    private static Random rand = new Random();\n-\n@@ -84,1 +85,1 @@\n-    static void run_test_case1() {\n+    static void run_test_case1(Random rand) {\n@@ -105,1 +106,1 @@\n-    static void run_test_case2() {\n+    static void run_test_case2(Random rand) {\n@@ -148,0 +149,1 @@\n+        private final Random rand;\n@@ -149,0 +151,1 @@\n+            rand = new Random(Utils.getRandomInstance().nextLong());\n@@ -154,1 +157,1 @@\n-                run_test_case1();\n+                run_test_case1(rand);\n@@ -160,0 +163,1 @@\n+        private final Random rand;\n@@ -161,0 +165,1 @@\n+            rand = new Random(Utils.getRandomInstance().nextLong());\n@@ -166,1 +171,1 @@\n-                run_test_case2();\n+                run_test_case2(rand);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/jni\/CriticalNativeStress.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -34,0 +35,2 @@\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n@@ -67,0 +70,1 @@\n+        Random r = Utils.getRandomInstance();\n@@ -68,1 +72,1 @@\n-            int val = (int) (Math.random() * Integer.MAX_VALUE);\n+            int val = (int) (r.nextDouble() * Integer.MAX_VALUE);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/jni\/TestJNICritical.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -42,1 +43,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -44,0 +45,1 @@\n+ * @library \/test\/lib\n@@ -56,1 +58,2 @@\n-import java.util.concurrent.*;\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n@@ -71,1 +74,1 @@\n-        ThreadLocalRandom rng = ThreadLocalRandom.current();\n+        Random rng = Utils.getRandomInstance();\n@@ -77,1 +80,1 @@\n-    private static void test(ThreadLocalRandom rng) {\n+    private static void test(Random rng) {\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/jni\/TestPinnedGarbage.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -44,0 +45,1 @@\n+import jdk.test.lib.Utils;\n@@ -56,1 +58,1 @@\n-        Random r = new Random();\n+        Random r = Utils.getRandomInstance();\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/options\/TestHumongousMoves.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @key gc\n+ * @key gc randomness\n@@ -32,0 +32,1 @@\n+ * @library \/test\/lib\n@@ -36,0 +37,2 @@\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n@@ -38,0 +41,1 @@\n+    private static final Random rng = Utils.getRandomInstance();\n@@ -61,1 +65,2 @@\n-    public static void warmUp(long warmupEndTime, int size) {\n+    public static void warmUp(long warmupEndTime, int size, long seed) {\n+        Random r = new Random(seed);\n@@ -66,1 +71,1 @@\n-            int index = (int) (Math.random() * roots.length);\n+            int index = (int) (r.nextDouble() * roots.length);\n@@ -76,1 +81,2 @@\n-    public static void runTest(long endTime, int size, double alive) {\n+    public static void runTest(long endTime, int size, double alive, long seed) {\n+        Random r = new Random(seed);\n@@ -91,1 +97,1 @@\n-                if (Math.random() > alive) {\n+                if (r.nextDouble() > alive) {\n@@ -94,1 +100,1 @@\n-                    index = (int) (Math.random() * roots.length);\n+                    index = (int) (r.nextDouble() * roots.length);\n@@ -153,0 +159,1 @@\n+            long seed = rng.nextLong();\n@@ -155,1 +162,1 @@\n-                    warmUp(warmupStartTime + warmupDuration, warmupIterations);\n+                    warmUp(warmupStartTime + warmupDuration, warmupIterations, seed);\n@@ -168,0 +175,1 @@\n+            long seed = rng.nextLong();\n@@ -170,1 +178,1 @@\n-                    runTest(startTime + mainDuration, mainIterations, liveFrac);\n+                    runTest(startTime + mainDuration, mainIterations, liveFrac, seed);\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/TestJNIBlockFullGC\/TestJNIBlockFullGC.java","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import jdk.test.lib.Utils;\n@@ -35,1 +36,1 @@\n- * @key stress\n+ * @key stress randomness\n@@ -60,1 +61,0 @@\n-    private static final Random RND = new Random(2015 * 2016);\n@@ -217,2 +217,2 @@\n-    private Object getRandomObject() {\n-        int index = (windowStart + RND.nextInt(windowSize)) % N;\n+    private Object getRandomObject(Random rnd) {\n+        int index = (windowStart + rnd.nextInt(windowSize)) % N;\n@@ -236,1 +236,1 @@\n-\n+        final Random rnd;\n@@ -247,0 +247,1 @@\n+            this.rnd = new Random(Utils.getRandomInstance().nextLong());\n@@ -256,1 +257,1 @@\n-                        objs[i] = boss.getRandomObject();\n+                        objs[i] = boss.getRandomObject(rnd);\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/TestMultiThreadStressRSet.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import jdk.test.lib.Utils;\n+\n@@ -89,1 +91,1 @@\n-  private static Random rnd = new Random();\n+  private static Random rnd = Utils.getRandomInstance();\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcold\/TestGCOld.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n- * @key gc\n- * @library \/\n+ * @key gc randomness\n+ * @library \/ \/test\/lib\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcold\/TestGCOldWithCMS.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n- * @key gc\n- * @library \/\n+ * @key gc randomness\n+ * @library \/ \/test\/lib\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcold\/TestGCOldWithG1.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n- * @key gc\n- * @library \/\n+ * @key gc randomness\n+ * @library \/ \/test\/lib\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcold\/TestGCOldWithParallel.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n- * @key gc\n- * @library \/\n+ * @key gc randomness\n+ * @library \/ \/test\/lib\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcold\/TestGCOldWithSerial.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,2 @@\n- * @key gc\n- * @key stress\n- * @library \/\n+ * @key gc stress randomness\n+ * @library \/ \/test\/lib\n@@ -57,3 +56,2 @@\n- * @key gc\n- * @key stress\n- * @library \/\n+ * @key gc stress randomness\n+ * @library \/ \/test\/lib\n@@ -109,3 +107,2 @@\n- * @key gc\n- * @key stress\n- * @library \/\n+ * @key gc stress randomness\n+ * @library \/ \/test\/lib\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcold\/TestGCOldWithShenandoah.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n- * @key gc\n- * @library \/\n+ * @key gc randomness\n+ * @library \/ \/test\/lib\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gcold\/TestGCOldWithZ.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @key randomness\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/jfr\/TestStressAllocationGCEventsWithDefNew.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @key randomness\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/jfr\/TestStressAllocationGCEventsWithG1.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @key randomness\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/jfr\/TestStressAllocationGCEventsWithParallel.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @key randomness\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/jfr\/TestStressBigAllocationGCEventsWithDefNew.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @key randomness\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/jfr\/TestStressBigAllocationGCEventsWithG1.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @key randomness\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/jfr\/TestStressBigAllocationGCEventsWithParallel.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @key stress\n+ * @key stress randomness\n@@ -30,2 +30,1 @@\n- * VM testbase keywords: [stress, quick, feature_283, nonconcurrent, exclude]\n- * VM testbase comments: 8208207\n+ * VM testbase keywords: [stress, quick, feature_283, nonconcurrent]\n@@ -40,3 +39,2 @@\n- *    4. Check isCopy == false\n- *    5. Return from native\n- *    6. Check data to be processed correctly\n+ *    4. Return from native\n+ *    5. Check data to be processed correctly\n@@ -50,1 +48,0 @@\n- * @ignore 8208207\n@@ -231,0 +228,1 @@\n+            javaHash += javaHash;\n@@ -264,1 +262,1 @@\n-\n+            javaHash += javaHash;\n@@ -299,1 +297,1 @@\n-\n+            javaHash += javaHash;\n@@ -334,1 +332,1 @@\n-\n+            javaHash += javaHash;\n@@ -367,1 +365,1 @@\n-\n+            javaHash += javaHash;\n@@ -402,1 +400,1 @@\n-\n+            javaHash += javaHash;\n@@ -437,1 +435,1 @@\n-\n+            javaHash += javaHash;\n@@ -471,1 +469,1 @@\n-\n+            javaHash += javaHash;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/jni\/gclocker\/gcl001.java","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -27,1 +28,36 @@\n-extern \"C\" {\n+\/*\n+  basic routine: provide critical sections and calculations\n+    enter array CS\n+    enter first string CS\n+    leave first string CS\n+    enter second string CS\n+    leave array CS\n+    leave second string CS\n+*\/\n+#define BODY(type)                                                          \\\n+  int hash = 0;                                                             \\\n+  jsize i, arraySize, stringSize;                                           \\\n+  jchar *nativeStr = NULL;                                                  \\\n+  type *nativeArray = NULL;                                                 \\\n+                                                                            \\\n+  arraySize = env->GetArrayLength(array); CE                                \\\n+  stringSize = env->GetStringLength(str); CE                                \\\n+                                                                            \\\n+  nativeArray = (type *)env->GetPrimitiveArrayCritical(array, NULL); CE     \\\n+  qsort(nativeArray, arraySize, sizeof(type), *type##comp);                 \\\n+                                                                            \\\n+  nativeStr = (jchar *)env->GetStringCritical(str, NULL); CE                \\\n+                                                                            \\\n+  for (i = 0; i < stringSize; ++i)                                          \\\n+    hash += (int)nativeStr[i];                                              \\\n+  env->ReleaseStringCritical(str, nativeStr); CE                            \\\n+                                                                            \\\n+  nativeStr = (jchar *)env->GetStringCritical(str, NULL); CE                \\\n+                                                                            \\\n+  env->ReleasePrimitiveArrayCritical(array, nativeArray, 0); CE             \\\n+                                                                            \\\n+  for (i = 0; i < stringSize; ++i)                                          \\\n+    hash += (int)nativeStr[i];                                              \\\n+  env->ReleaseStringCritical(str, nativeStr); CE                            \\\n+                                                                            \\\n+  return hash;\n@@ -30,74 +66,11 @@\n-#define COMP(type) \\\n-int type##comp(const void *s1, const void *s2)\\\n-{\\\n-    type st1 = *((type *)s1);\\\n-    type st2 = *((type *)s2);\\\n-    if (st1 < st2)\\\n-        return -1;\\\n-    else if (st1 > st2)\\\n-        return 1;\\\n-    else\\\n-        return 0;\\\n-}\n-\n-\/\/ basic routine: provide critical sections and calculations\n-    \/\/ enter array CS\n-    \/\/ check isCopy for native referencing\n-    \/\/ enter first string CS\n-    \/\/ leave first string CS\n-    \/\/ enter second string CS\n-    \/\/ leave array CS\n-    \/\/ enter second string CS\n-\n-#define BODY(type) \\\n-int hash = 0; int i; jboolean isCopy = JNI_FALSE; jchar *nativeStr; jsize size; type *nativeArray; \\\n-size = env->GetArrayLength(array); CE \\\n-nativeArray = (type *)env->GetPrimitiveArrayCritical(array, &isCopy); CE \\\n-EnterCS(env); \\\n-if (isCopy == JNI_TRUE) return 0;\\\n-qsort(nativeArray, size, sizeof(type), *type##comp);\\\n-\\\n-size = env->GetStringLength(str); CE \\\n-nativeStr = (jchar *)env->GetStringCritical(str, &isCopy); CE \\\n-if (isCopy == JNI_TRUE) return 0;\\\n-for (i = 0; i < size; ++i)\\\n-    hash += (int)nativeStr[i];\\\n-\\\n-env->ReleasePrimitiveArrayCritical(array, nativeArray, 0); CE \\\n-LeaveCS(env); \\\n-env->ReleaseStringCritical(str, nativeStr); CE \\\n-\\\n-hash = 0;\\\n-size = env->GetStringLength(str); CE \\\n-nativeStr = (jchar *)env->GetStringCritical(str, &isCopy); CE \\\n-EnterCS(env); \\\n-if (isCopy == JNI_TRUE) return 0;\\\n-for (i = 0; i < size; ++i)\\\n-    hash += (int)nativeStr[i];\\\n-LeaveCS(env); \\\n-env->ReleaseStringCritical(str, nativeStr); CE \\\n-return hash;\n-\n-static int CSEntered = 0;\n-static int CSLeft = 0;\n-\n-void EnterCS(JNIEnv *env)\n-{\n-    \/\/ unsafe but where are no better ideas\n-    \/\/++CSEntered;\n-    \/\/printf(\"CS Entered -> Entered: %d\\n\", CSEntered);\n-\/\/    jclass trace = 0; jmethodID method = 0;\n-\/\/    trace = env->FindClass(\"nsk\/stress\/jni\/gclocker\/Trace\"); CE\n-\/\/    method = env->GetStaticMethodID(trace, \"EnterCS\", \"()V\"); CE\n-\/\/    env->CallStaticVoidMethod(trace, method); CE\n-}\n-\n-void LeaveCS(JNIEnv *env)\n-{\n-    \/\/ unsafe but where are no better ideas\n-    \/\/++CSLeft;\n-    \/\/printf(\"CS Left -> Completed: %d\\tActive: %d\\n\", CSLeft, CSEntered - CSLeft);\n-\/\/    jclass trace = 0; jmethodID method = 0;\n-\/\/    trace = env->FindClass(\"nsk\/stress\/jni\/gclocker\/Trace\"); CE\n-\/\/    method = env->GetStaticMethodID(trace, \"LeaveCS\", \"()V\"); CE\n-\/\/    env->CallStaticVoidMethod(trace, method); CE\n+#define COMP(type)                                                          \\\n+int type##comp(const void *s1, const void *s2)                              \\\n+{                                                                           \\\n+  type st1 = *((type *)s1);                                                 \\\n+  type st2 = *((type *)s2);                                                 \\\n+  if (st1 < st2)                                                            \\\n+    return -1;                                                              \\\n+  else if (st1 > st2)                                                       \\\n+    return 1;                                                               \\\n+  else                                                                      \\\n+    return 0;                                                               \\\n@@ -115,0 +88,2 @@\n+extern \"C\" {\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/jni\/gclocker\/libgcl001.cpp","additions":51,"deletions":76,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import jdk.test.lib.Utils;\n@@ -108,0 +109,1 @@\n+            this.r = new Random(Utils.getRandomInstance().nextLong());\n@@ -125,1 +127,0 @@\n-                Random r = new Random(startTime);\n@@ -139,0 +140,1 @@\n+        private final Random r;\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/StressAllocationGCEvents.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}