{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n@@ -3215,0 +3216,28 @@\n+\/\/ If a copy of string value should be returned instead\n+static bool should_copy_string_value(oop str) {\n+  return java_lang_String::is_latin1(str) ||\n+    \/\/ To prevent deduplication from replacing the value array while setting up or in\n+    \/\/ the critical section. That would lead to the release operation\n+    \/\/ unpinning the wrong object.\n+    (Universe::heap()->supports_object_pinning() && StringDedup::is_enabled());\n+}\n+\n+static typeArrayOop lock_gc_or_pin_string_value(JavaThread* thread, oop str) {\n+  if (Universe::heap()->supports_object_pinning()) {\n+    typeArrayOop s_value = java_lang_String::value(str);\n+    return (typeArrayOop) Universe::heap()->pin_object(thread, s_value);\n+  } else {\n+    Handle h(thread, str);      \/\/ Handlize across potential safepoint.\n+    GCLocker::lock_critical(thread);\n+    return java_lang_String::value(h());\n+  }\n+}\n+\n+static void unlock_gc_or_unpin_string_value(JavaThread* thread, oop str) {\n+  if (Universe::heap()->supports_object_pinning()) {\n+    typeArrayOop s_value = java_lang_String::value(str);\n+    Universe::heap()->unpin_object(thread, s_value);\n+  } else {\n+    GCLocker::unlock_critical(thread);\n+  }\n+}\n@@ -3219,6 +3248,1 @@\n-  oop s = lock_gc_or_pin_object(thread, string);\n-  typeArrayOop s_value = java_lang_String::value(s);\n-  bool is_latin1 = java_lang_String::is_latin1(s);\n-  if (isCopy != NULL) {\n-    *isCopy = is_latin1 ? JNI_TRUE : JNI_FALSE;\n-  }\n+  oop s = JNIHandles::resolve_non_null(string);\n@@ -3226,4 +3250,2 @@\n-  if (!is_latin1) {\n-    ret = (jchar*) s_value->base(T_CHAR);\n-  } else {\n-    \/\/ Inflate latin1 encoded string to UTF16\n+  if (should_copy_string_value(s)) {\n+    typeArrayOop s_value = java_lang_String::value(s);\n@@ -3234,2 +3256,8 @@\n-      for (int i = 0; i < s_len; i++) {\n-        ret[i] = ((jchar) s_value->byte_at(i)) & 0xff;\n+      bool is_latin1 = java_lang_String::is_latin1(s);\n+      \/\/ Inflate latin1 encoded string to UTF16\n+      if (is_latin1) {\n+        for (int i = 0; i < s_len; i++) {\n+          ret[i] = ((jchar) s_value->byte_at(i)) & 0xff;\n+        }\n+      } else {\n+        memcpy(ret, s_value->char_at_addr(0), s_len * sizeof(jchar));\n@@ -3239,0 +3267,5 @@\n+    if (isCopy != NULL) *isCopy = JNI_TRUE;\n+  } else {\n+    typeArrayOop s_value = lock_gc_or_pin_string_value(thread, s);\n+    ret = (jchar*) s_value->base(T_CHAR);\n+    if (isCopy != NULL) *isCopy = JNI_FALSE;\n@@ -3250,3 +3283,2 @@\n-  bool is_latin1 = java_lang_String::is_latin1(s);\n-  if (is_latin1) {\n-    \/\/ For latin1 string, free jchar array allocated by earlier call to GetStringCritical.\n+  if (should_copy_string_value(s)) {\n+    \/\/ For copied string value, free jchar array allocated by earlier call to GetStringCritical.\n@@ -3255,0 +3287,3 @@\n+  } else {\n+    \/\/ For not copied string value, drop the associated gc-locker\/pin.\n+    unlock_gc_or_unpin_string_value(thread, s);\n@@ -3256,1 +3291,0 @@\n-  unlock_gc_or_unpin_object(thread, str);\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":51,"deletions":17,"binary":false,"changes":68,"status":"modified"}]}