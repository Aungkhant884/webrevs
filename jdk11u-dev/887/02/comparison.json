{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Objects;\n@@ -41,0 +42,1 @@\n+        private T strongReferent;\n@@ -45,0 +47,1 @@\n+            this.strongReferent = referent;\n@@ -50,0 +53,8 @@\n+\n+        T getStrong() {\n+            return strongReferent;\n+        }\n+\n+        void clearStrong() {\n+            strongReferent = null;\n+        }\n@@ -53,1 +64,1 @@\n-    private final ClassValue<SoftReference<T>> map;\n+    private final ClassValue<CacheRef<T>> map;\n@@ -61,2 +72,4 @@\n-            protected SoftReference<T> computeValue(Class<?> type) {\n-                return new CacheRef<>(ClassCache.this.computeValue(type), queue, type);\n+            protected CacheRef<T> computeValue(Class<?> type) {\n+                T v = ClassCache.this.computeValue(type);\n+                Objects.requireNonNull(v);\n+                return new CacheRef<>(v, queue, type);\n@@ -68,7 +81,20 @@\n-        processQueue();\n-        T val;\n-        do {\n-            SoftReference<T> ref = map.get(cl);\n-            val = ref.get();\n-            if (val == null) {\n-                map.remove(cl);\n+        while (true) {\n+            processQueue();\n+\n+            CacheRef<T> ref = map.get(cl);\n+\n+            \/\/ Case 1: A recently created CacheRef.\n+            \/\/ We might still have strong referent, and can return it.\n+            \/\/ This guarantees progress for at least one thread on every CacheRef.\n+            \/\/ Clear the strong referent before returning to make the cache soft.\n+            T strongVal = ref.getStrong();\n+            if (strongVal != null) {\n+                ref.clearStrong();\n+                return strongVal;\n+            }\n+\n+            \/\/ Case 2: Older or recently cleared CacheRef.\n+            \/\/ Check if its soft referent is still available, and return it.\n+            T val = ref.get();\n+            if (val != null) {\n+                return val;\n@@ -76,2 +102,5 @@\n-        } while (val == null);\n-        return val;\n+\n+            \/\/ Case 3: The reference was cleared.\n+            \/\/ Clear the mapping and retry.\n+            map.remove(cl);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/io\/ClassCache.java","additions":41,"deletions":12,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.NameClassCache;\n+\n+\/**\n+ * @test\n+ * @bug 8280041\n+ * @summary Sanity test for ClassCache under continuous GC\n+ * @compile\/module=java.base java\/io\/NameClassCache.java\n+ * @run main ContinuousGCTest\n+ *\/\n+public class ContinuousGCTest {\n+    static final NameClassCache CACHE = new NameClassCache();\n+    static final String VALUE = \"ClassCache-ContinuousGCTest\";\n+\n+    public static void main(String... args) throws Throwable {\n+        for (int c = 0; c < 1000; c++) {\n+            test();\n+            System.gc();\n+        }\n+    }\n+\n+    public static void test() {\n+        String cached = CACHE.get(ContinuousGCTest.class);\n+        if (!cached.equals(VALUE)) {\n+            throw new IllegalStateException(\"Cache failure, got: \" + cached);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/ClassCache\/ContinuousGCTest.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.NullClassCache;\n+\n+\/**\n+ * @test\n+ * @bug 8280041\n+ * @summary Test that ClassCache throws on trying to pass null value\n+ * @compile\/module=java.base java\/io\/NullClassCache.java\n+ * @run main NullValueTest\n+ *\/\n+public class NullValueTest {\n+    public static void main(String... args) throws Throwable {\n+        try {\n+            new NullClassCache().get(Object.class);\n+            throw new IllegalStateException(\"Should have failed\");\n+        } catch (NullPointerException npe) {\n+            \/\/ Expected\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/ClassCache\/NullValueTest.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.io;\n+\n+public class NameClassCache extends ClassCache<String> {\n+    protected String computeValue(Class<?> cl) {\n+        \/\/ Return string that is not interned and specific to class\n+        return \"ClassCache-\" + cl.getName();\n+    }\n+\n+    public String get(Class<?> cl) {\n+        return super.get(cl);\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/ClassCache\/java.base\/java\/io\/NameClassCache.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.io;\n+\n+public class NullClassCache extends ClassCache<Object> {\n+    protected Object computeValue(Class<?> cl) {\n+        return null;\n+    }\n+\n+    public Object get(Class<?> cl) {\n+        return super.get(cl);\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/ClassCache\/java.base\/java\/io\/NullClassCache.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -31,0 +31,2 @@\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertNull;\n@@ -48,2 +50,1 @@\n-        assertFalse(ref.refersTo(null),\n-                    \"Cache lost entry although memory was not under pressure\");\n+        assertNotNull(ref.get(), \"Cache lost entry although memory was not under pressure\");\n@@ -58,2 +59,1 @@\n-        assertTrue(ref.refersTo(null),\n-                   \"Cache still has entry although memory was pressed hard\");\n+        assertNull(ref.get(), \"Cache still has entry although memory was pressed hard\");\n@@ -70,1 +70,1 @@\n-            while (!ref.refersTo(null)) {\n+            while (ref.get() != null) {\n","filename":"test\/jdk\/java\/io\/ObjectStreamClass\/ObjectStreamClassCaching.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}