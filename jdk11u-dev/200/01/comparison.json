{"files":[{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4640520 6354623 7198496\n+ * @summary Unit test for java.util.ServiceLoader\n+ * @library \/lib\/testlibrary \/test\/lib\n+ * @build JarUtils jdk.test.lib.process.*\n+ *        Basic Load FooService FooProvider1 FooProvider2 FooProvider3 BarProvider\n+ * @run testng ServiceLoaderBasicTest\n+ *\/\n+\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import static java.nio.file.StandardOpenOption.CREATE;\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static java.util.Arrays.asList;\n+\n+public class ServiceLoaderBasicTest {\n+\n+    private static final String METAINFO = \"META-INF\/services\/FooService\";\n+    private static final Path XTEST_CONFIG = Path.of(\"x.test\").resolve(METAINFO);\n+    private static final Path XMETA_CONFIG = Path.of(\"x.meta\").resolve(METAINFO);\n+    private static final Path P2JAR = Path.of(\"p2.jar\");\n+    private static final Path P2DUPJAR = Path.of(\"p2dup.jar\");\n+    private static final Path P3JAR = Path.of(\"x.ext\", \"p3.jar\");\n+\n+    private static final String XTEST = File.pathSeparator + \"x.test\";\n+    private static final String XMETA = File.pathSeparator + \"x.meta\";\n+    private static final String P2 = File.pathSeparator + P2JAR.toString();\n+    private static final String P2DUP = File.pathSeparator + P2DUPJAR.toString();\n+    private static final String P3 = File.pathSeparator + P3JAR.toString();\n+\n+    private static final String XTEST_CP = Utils.TEST_CLASS_PATH + XTEST;\n+    private static final String P2_CP = Utils.TEST_CLASS_PATH + P2;\n+    private static final String P2DUP_CP = P2_CP + P2DUP;\n+    private static final String P3P2_CP = Utils.TEST_CLASS_PATH + P3 + P2;\n+    private static final String XTESTP2_CP = XTEST_CP + P2;\n+    private static final String P3XTEST_CP = Utils.TEST_CLASS_PATH + P3 + XTEST;\n+    private static final String P3XTESTP2_CP = P3XTEST_CP + P2;\n+    private static final String XMETA_CP = Utils.TEST_CLASS_PATH + XMETA;\n+    private static final String XMETAXTEST_CP = XMETA_CP + XTEST;\n+    private static final String XTESTXMETA_CP = XTEST_CP + XMETA;\n+    private static final String XTESTXMETAP2_CP = XTESTXMETA_CP + P2;\n+\n+    @BeforeClass\n+    public void initialize() throws Exception {\n+        createProviderConfig(XTEST_CONFIG, \"FooProvider1\");\n+        createProviderConfig(XMETA_CONFIG, \"FooProvider42\");\n+        createJar(P2JAR, \"FooProvider2\", List.of(\"FooProvider2\"));\n+        createJar(P3JAR, \"FooProvider3\", List.of(\"FooProvider3\", \"FooService\"));\n+        Files.copy(P2JAR, P2DUPJAR, REPLACE_EXISTING);\n+    }\n+\n+    @DataProvider\n+    public Object[][] testCases() {\n+        return new Object[][]{\n+            \/\/       CLI options,            Test,       Runtime arguments\n+            \/\/ Success cases\n+            {List.of(\"-cp\", XTESTP2_CP,      \"Basic\")},\n+            {List.of(\"-cp\", XTEST_CP,        \"Load\",     \"FooProvider1\")},\n+            {List.of(\"-cp\", P2_CP,           \"Load\",     \"FooProvider2\")},\n+            {List.of(\"-cp\", P2DUP_CP,        \"Load\",     \"FooProvider2\")},\n+            {List.of(\"-cp\", P3P2_CP,         \"Load\",     \"FooProvider3\", \"FooProvider2\")},\n+            {List.of(\"-cp\", XTESTP2_CP,      \"Load\",     \"FooProvider1\", \"FooProvider2\")},\n+            {List.of(\"-cp\", P3XTEST_CP,      \"Load\",     \"FooProvider3\", \"FooProvider1\")},\n+            {List.of(\"-cp\", P3XTESTP2_CP,    \"Load\",     \"FooProvider3\",\n+                                                         \"FooProvider1\",\n+                                                         \"FooProvider2\")},\n+            \/\/ Failures followed by successes\n+            {List.of(\"-cp\", XTESTXMETA_CP,   \"Load\",     \"FooProvider1\", \"fail\")},\n+            {List.of(\"-cp\", XMETAXTEST_CP,   \"Load\",     \"fail\", \"FooProvider1\")},\n+            {List.of(\"-cp\", XTESTXMETAP2_CP, \"Load\",     \"FooProvider1\", \"fail\", \"FooProvider2\")}\n+        };\n+    }\n+\n+    @DataProvider\n+    public Object[][] negativeTestCases() {\n+        return new Object[][]{\n+            {\"blah blah\"},\n+            {\"9234\"},\n+            {\"X!\"},\n+            {\"BarProvider\"},\n+            {\"FooProvider42\"}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"testCases\")\n+    public void testProvider(List<String> args) throws Throwable {\n+        runJava(args);\n+    }\n+\n+    @Test(dataProvider = \"negativeTestCases\")\n+    public void testBadProvider(String providerName) throws Throwable {\n+        Files.write(XMETA_CONFIG, providerName.getBytes());\n+        runJava(List.of(\"-cp\", XMETA_CP, \"Load\", \"fail\"));\n+    }\n+\n+    private void runJava(List<String> opts) throws Throwable {\n+        List<String> cmds = new ArrayList<>();\n+        cmds.add(JDKToolFinder.getJDKTool(\"java\"));\n+        cmds.addAll(asList(Utils.getTestJavaOpts()));\n+        cmds.addAll(opts);\n+\n+        ProcessTools.executeCommand(cmds.stream()\n+                    .filter(t -> !t.isEmpty())\n+                    .toArray(String[]::new))\n+                    .shouldHaveExitValue(0);\n+    }\n+\n+    private void createProviderConfig(Path config, String providerName) throws Exception {\n+        Files.createDirectories(config.getParent());\n+        Files.write(config, providerName.getBytes(), CREATE);\n+    }\n+\n+    private void createJar(Path jar, String provider, List<String> files) throws Exception {\n+        Path xdir = Path.of(provider);\n+        createProviderConfig(xdir.resolve(METAINFO), provider);\n+\n+        for (String f : files) {\n+            Path source = Path.of(Utils.TEST_CLASSES, f + \".class\");\n+            Path target = xdir.resolve(source.getFileName());\n+            Files.copy(source, target, REPLACE_EXISTING);\n+        }\n+        JarUtils.createJarFile(jar, xdir);\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/ServiceLoader\/basic\/ServiceLoaderBasicTest.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"},{"patch":"@@ -1,156 +0,0 @@\n-#\n-# Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 4640520 6354623 7198496\n-# @summary Unit test for java.util.ServiceLoader\n-#\n-# @build Basic Load FooService FooProvider1 FooProvider2 FooProvider3 BarProvider\n-# @run shell basic.sh\n-\n-# Command-line usage: sh basic.sh \/path\/to\/build\n-\n-if [ -z \"$TESTJAVA\" ]; then\n-  if [ $# -lt 1 ]; then exit 1; fi\n-  TESTJAVA=\"$1\"; shift\n-  COMPILEJAVA=\"${TESTJAVA}\"\n-  TESTSRC=\"`pwd`\"\n-  TESTCLASSES=\"`pwd`\"\n-fi\n-\n-JAVA=\"$TESTJAVA\/bin\/java\"\n-JAR=\"$COMPILEJAVA\/bin\/jar\"\n-\n-OS=`uname -s`\n-case \"$OS\" in\n-    SunOS | Darwin | AIX )\n-      FS='\/'\n-      SEP=':' ;;\n-    Linux )\n-      FS='\/'\n-      SEP=':' ;;\n-    * )\n-      FS='\\\\'\n-      SEP='\\;' ;;\n-esac\n-\n-JARD=x.jar\n-EXTD=x.ext\n-TESTD=x.test\n-P3JAR=${EXTD}${FS}p3.jar\n-\n-if [ \\! -d $EXTD ]; then\n-    # Initialize\n-    echo Initializing...\n-    rm -rf $JARD $EXTD $TESTD\n-    mkdir -p $JARD $EXTD $TESTD\n-\n-    for n in 2 3; do\n-      rm -rf $JARD\/*; mkdir -p $JARD\/META-INF\/services\n-      echo FooProvider$n \\\n-        >$JARD\/META-INF\/services\/FooService\n-      cp $TESTCLASSES\/FooProvider$n.class $JARD\n-      if [ $n = 3 ]; then\n-        cp $TESTCLASSES\/FooService.class $JARD\n-      fi\n-      (cd $JARD; \"$JAR\" ${TESTTOOLVMOPTS} -cf ..\/p$n.jar *)\n-    done\n-\n-    cp p2.jar p2dup.jar\n-    mv p3.jar $EXTD\n-\n-    cp $TESTCLASSES\/Load.class $TESTD\n-    cp $TESTCLASSES\/FooService.class $TESTD\n-    cp $TESTCLASSES\/FooProvider1.class $TESTD\n-    mkdir -p $TESTD\/META-INF\/services\n-    echo FooProvider1 \\\n-      >$TESTD\/META-INF\/services\/FooService\n-\n-    # This gives us:\n-    #   $TESTD: FooProvider1\n-    #   .     : FooProvider2, in p2.jar\n-    #   $EXTD:  FooProvider3, in p3.jar\n-\n-fi\n-\n-failures=0\n-\n-go() {\n-  echo ''\n-  cp=\"$1\"; shift\n-  if [ -z \"$cp\" ]; then cp=\"$TESTCLASSES\"; else cp=\"$TESTCLASSES$SEP$cp\"; fi\n-  vmargs=\"$1\"; shift\n-  sh -xc \"'$JAVA' ${TESTVMOPTS} -cp $cp $vmargs $T $*\" 2>&1\n-  if [ $? != 0 ]; then failures=`expr $failures + 1`; fi\n-}\n-\n-\n-# Java-level tests\n-\n-T=Basic\n-go \".${SEP}$TESTD${SEP}p2.jar\" \"\"\n-\n-# Success cases\n-\n-T=Load\n-\n-go \"$TESTD\" \"\" FooProvider1\n-\n-go \".${SEP}p2.jar\" \"\" FooProvider2\n-\n-go \".${SEP}p2.jar${SEP}p2dup.jar\" \"\" FooProvider2\n-\n-go \"${P3JAR}${SEP}p2.jar\" \"\" FooProvider3 FooProvider2\n-\n-go \"$TESTD${SEP}p2.jar\" \"\" FooProvider1 FooProvider2\n-\n-go \"${P3JAR}${SEP}$TESTD\" \"\" FooProvider3 FooProvider1\n-\n-go \"${P3JAR}${SEP}$TESTD${SEP}p2.jar\" \"\" \\\n-  FooProvider3 FooProvider1 FooProvider2\n-\n-# Failure cases\n-\n-mkdir -p x.meta\/META-INF\/services\n-\n-# Simple failures\n-for p in FooProvider42 'blah blah' 9234 'X!' BarProvider; do\n-  echo $p >x.meta\/META-INF\/services\/FooService\n-  go \".${SEP}x.meta\" \"\" fail\n-done\n-\n-# Failures followed by successes\n-echo FooProvider42 >x.meta\/META-INF\/services\/FooService\n-go \"$TESTD${SEP}x.meta\" \"\" FooProvider1 fail\n-go \"x.meta${SEP}$TESTD\" \"\" fail FooProvider1\n-go \"$TESTD${SEP}x.meta${SEP}${SEP}p2.jar\" \"\" \\\n-  FooProvider1 fail FooProvider2\n-\n-\n-# Summary\n-\n-echo ''\n-if [ $failures -gt 0 ];\n-  then echo \"$failures case(s) failed\";\n-  else echo \"All cases passed\"; fi\n-exit $failures\n","filename":"test\/jdk\/java\/util\/ServiceLoader\/basic\/basic.sh","additions":0,"deletions":156,"binary":false,"changes":156,"status":"deleted"}]}