{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import org.testng.ITestResult;\n+import org.testng.SkipException;\n@@ -53,0 +55,1 @@\n+import java.util.Arrays;\n@@ -66,0 +69,1 @@\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -141,0 +145,11 @@\n+    final AtomicReference<SkipException> skiptests = new AtomicReference<>();\n+    void checkSkip() {\n+        var skip = skiptests.get();\n+        if (skip != null) throw skip;\n+    }\n+    static String name(ITestResult result) {\n+        var params = result.getParameters();\n+        return result.getName()\n+                + (params == null ? \"()\" : Arrays.toString(result.getParameters()));\n+    }\n+\n@@ -144,1 +159,5 @@\n-            throw new RuntimeException(\"some tests failed\");\n+            if (skiptests.get() == null) {\n+                SkipException skip = new SkipException(\"some tests failed\");\n+                skip.setStackTrace(new StackTraceElement[0]);\n+                skiptests.compareAndSet(null, skip);\n+            }\n@@ -149,1 +168,1 @@\n-    static final void printFailedTests() {\n+    static final void printFailedTests(ITestContext context) {\n@@ -152,0 +171,5 @@\n+            \/\/ Exceptions should already have been added to FAILURES\n+            \/\/ var failed = context.getFailedTests().getAllResults().stream()\n+            \/\/        .collect(Collectors.toMap(r -> name(r), ITestResult::getThrowable));\n+            \/\/ FAILURES.putAll(failed);\n+\n@@ -388,0 +412,1 @@\n+        checkSkip();\n","filename":"test\/jdk\/java\/net\/httpclient\/AbstractThrowingPublishers.java","additions":28,"deletions":3,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,2 @@\n+import org.testng.ITestResult;\n+import org.testng.SkipException;\n@@ -70,0 +72,1 @@\n+import java.util.Arrays;\n@@ -81,0 +84,1 @@\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -153,0 +157,11 @@\n+    final AtomicReference<SkipException> skiptests = new AtomicReference<>();\n+    void checkSkip() {\n+        var skip = skiptests.get();\n+        if (skip != null) throw skip;\n+    }\n+    static String name(ITestResult result) {\n+        var params = result.getParameters();\n+        return result.getName()\n+                + (params == null ? \"()\" : Arrays.toString(result.getParameters()));\n+    }\n+\n@@ -156,1 +171,5 @@\n-            throw new RuntimeException(\"some tests failed\");\n+            if (skiptests.get() == null) {\n+                SkipException skip = new SkipException(\"some tests failed\");\n+                skip.setStackTrace(new StackTraceElement[0]);\n+                skiptests.compareAndSet(null, skip);\n+            }\n@@ -161,1 +180,1 @@\n-    static final void printFailedTests() {\n+    static final void printFailedTests(ITestContext context) {\n@@ -164,0 +183,5 @@\n+            \/\/ Exceptions should already have been added to FAILURES\n+            \/\/ var failed = context.getFailedTests().getAllResults().stream()\n+            \/\/        .collect(Collectors.toMap(r -> name(r), ITestResult::getThrowable));\n+            \/\/ FAILURES.putAll(failed);\n+\n@@ -362,0 +386,1 @@\n+        checkSkip();\n","filename":"test\/jdk\/java\/net\/httpclient\/AbstractThrowingPushPromises.java","additions":28,"deletions":3,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import org.testng.ITestResult;\n+import org.testng.SkipException;\n@@ -55,0 +57,1 @@\n+import java.util.Arrays;\n@@ -65,0 +68,1 @@\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -140,0 +144,11 @@\n+    final AtomicReference<SkipException> skiptests = new AtomicReference<>();\n+    void checkSkip() {\n+        var skip = skiptests.get();\n+        if (skip != null) throw skip;\n+    }\n+    static String name(ITestResult result) {\n+        var params = result.getParameters();\n+        return result.getName()\n+                + (params == null ? \"()\" : Arrays.toString(result.getParameters()));\n+    }\n+\n@@ -143,1 +158,5 @@\n-            throw new RuntimeException(\"some tests failed\");\n+            if (skiptests.get() == null) {\n+                SkipException skip = new SkipException(\"some tests failed\");\n+                skip.setStackTrace(new StackTraceElement[0]);\n+                skiptests.compareAndSet(null, skip);\n+            }\n@@ -148,1 +167,1 @@\n-    static final void printFailedTests() {\n+    static final void printFailedTests(ITestContext context) {\n@@ -151,0 +170,5 @@\n+            \/\/ Exceptions should already have been added to FAILURES\n+            \/\/ var failed = context.getFailedTests().getAllResults().stream()\n+            \/\/        .collect(Collectors.toMap(r -> name(r), ITestResult::getThrowable));\n+            \/\/ FAILURES.putAll(failed);\n+\n@@ -382,0 +406,1 @@\n+        checkSkip();\n","filename":"test\/jdk\/java\/net\/httpclient\/AbstractThrowingSubscribers.java","additions":28,"deletions":3,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,2 @@\n+import org.testng.ITestResult;\n+import org.testng.SkipException;\n@@ -75,0 +77,1 @@\n+import java.util.Arrays;\n@@ -83,0 +86,1 @@\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -151,0 +155,11 @@\n+    final AtomicReference<SkipException> skiptests = new AtomicReference<>();\n+    void checkSkip() {\n+        var skip = skiptests.get();\n+        if (skip != null) throw skip;\n+    }\n+    static String name(ITestResult result) {\n+        var params = result.getParameters();\n+        return result.getName()\n+                + (params == null ? \"()\" : Arrays.toString(result.getParameters()));\n+    }\n+\n@@ -154,1 +169,5 @@\n-            throw new RuntimeException(\"some tests failed\");\n+            if (skiptests.get() == null) {\n+                SkipException skip = new SkipException(\"some tests failed\");\n+                skip.setStackTrace(new StackTraceElement[0]);\n+                skiptests.compareAndSet(null, skip);\n+            }\n@@ -159,1 +178,1 @@\n-    static final void printFailedTests() {\n+    static final void printFailedTests(ITestContext context) {\n@@ -162,0 +181,5 @@\n+            \/\/ Exceptions should already have been added to FAILURES\n+            \/\/ var failed = context.getFailedTests().getAllResults().stream()\n+            \/\/        .collect(Collectors.toMap(r -> name(r), ITestResult::getThrowable));\n+            \/\/ FAILURES.putAll(failed);\n+\n@@ -222,0 +246,1 @@\n+        checkSkip();\n","filename":"test\/jdk\/java\/net\/httpclient\/ForbiddenHeadTest.java","additions":28,"deletions":3,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,2 @@\n+import org.testng.ITestResult;\n+import org.testng.SkipException;\n@@ -73,0 +75,1 @@\n+import java.util.Arrays;\n@@ -81,0 +84,2 @@\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n@@ -151,0 +156,11 @@\n+    final AtomicReference<SkipException> skiptests = new AtomicReference<>();\n+    void checkSkip() {\n+        var skip = skiptests.get();\n+        if (skip != null) throw skip;\n+    }\n+    static String name(ITestResult result) {\n+        var params = result.getParameters();\n+        return result.getName()\n+                + (params == null ? \"()\" : Arrays.toString(result.getParameters()));\n+    }\n+\n@@ -154,1 +170,5 @@\n-            throw new RuntimeException(\"some tests failed\");\n+            if (skiptests.get() == null) {\n+                SkipException skip = new SkipException(\"some tests failed\");\n+                skip.setStackTrace(new StackTraceElement[0]);\n+                skiptests.compareAndSet(null, skip);\n+            }\n@@ -162,0 +182,5 @@\n+            \/\/ Exceptions should already have been added to FAILURES\n+            \/\/ var failed = context.getFailedTests().getAllResults().stream()\n+            \/\/        .collect(Collectors.toMap(r -> name(r), ITestResult::getThrowable));\n+            \/\/ FAILURES.putAll(failed);\n+\n@@ -213,0 +238,1 @@\n+        checkSkip();\n","filename":"test\/jdk\/java\/net\/httpclient\/ProxySelectorTest.java","additions":28,"deletions":2,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+import java.util.Arrays;\n@@ -57,0 +58,3 @@\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n@@ -59,0 +63,2 @@\n+import org.testng.ITestResult;\n+import org.testng.SkipException;\n@@ -126,0 +132,11 @@\n+    final AtomicReference<SkipException> skiptests = new AtomicReference<>();\n+    void checkSkip() {\n+        var skip = skiptests.get();\n+        if (skip != null) throw skip;\n+    }\n+    static String name(ITestResult result) {\n+        var params = result.getParameters();\n+        return result.getName()\n+                + (params == null ? \"()\" : Arrays.toString(result.getParameters()));\n+    }\n+\n@@ -129,1 +146,5 @@\n-            throw new RuntimeException(\"some tests failed\");\n+            if (skiptests.get() == null) {\n+                SkipException skip = new SkipException(\"some tests failed\");\n+                skip.setStackTrace(new StackTraceElement[0]);\n+                skiptests.compareAndSet(null, skip);\n+            }\n@@ -134,1 +155,1 @@\n-    static final void printFailedTests() {\n+    static final void printFailedTests(ITestContext context) {\n@@ -137,0 +158,4 @@\n+            var failed = context.getFailedTests().getAllResults().stream()\n+                    .collect(Collectors.toMap(r -> name(r), ITestResult::getThrowable));\n+            FAILURES.putAll(failed);\n+\n@@ -223,0 +248,1 @@\n+        checkSkip();\n","filename":"test\/jdk\/java\/net\/httpclient\/Response204V2Test.java","additions":29,"deletions":3,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,2 @@\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n@@ -60,0 +62,3 @@\n+import org.testng.ITestResult;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n@@ -109,0 +114,11 @@\n+    final AtomicReference<SkipException> skiptests = new AtomicReference<>();\n+    void checkSkip() {\n+        var skip = skiptests.get();\n+        if (skip != null) throw skip;\n+    }\n+    static String name(ITestResult result) {\n+        var params = result.getParameters();\n+        return result.getName()\n+                + (params == null ? \"()\" : Arrays.toString(result.getParameters()));\n+    }\n+\n@@ -112,1 +128,24 @@\n-            throw new RuntimeException(\"some tests failed\");\n+            if (skiptests.get() == null) {\n+                SkipException skip = new SkipException(\"some tests failed\");\n+                skip.setStackTrace(new StackTraceElement[0]);\n+                skiptests.compareAndSet(null, skip);\n+            }\n+        }\n+    }\n+\n+    @AfterClass\n+    static final void printFailedTests(ITestContext context) {\n+        out.println(\"\\n=========================\\n\");\n+        try {\n+            var FAILURES = context.getFailedTests().getAllResults().stream()\n+                    .collect(Collectors.toMap(r -> name(r), ITestResult::getThrowable));\n+\n+            if (FAILURES.isEmpty()) return;\n+            out.println(\"Failed tests: \");\n+            FAILURES.entrySet().forEach((e) -> {\n+                out.printf(\"\\t%s: %s%n\", e.getKey(), e.getValue());\n+                e.getValue().printStackTrace(out);\n+                e.getValue().printStackTrace();\n+            });\n+         } finally {\n+            out.println(\"\\n=========================\\n\");\n@@ -230,0 +269,1 @@\n+        checkSkip();\n@@ -256,0 +296,1 @@\n+        checkSkip();\n@@ -339,0 +380,1 @@\n+        checkSkip();\n@@ -374,0 +416,1 @@\n+        checkSkip();\n","filename":"test\/jdk\/java\/net\/httpclient\/ShortResponseBody.java","additions":45,"deletions":2,"binary":false,"changes":47,"status":"modified"}]}