{"files":[{"patch":"@@ -1,173 +0,0 @@\n-#!\/bin\/ksh\n-# Copyright (c) 1995, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-\n-JAVA:=\"$TESTJAVA\/bin\/java\"\n-JAVA_OPTS:=\"$TESTJAVAOPTS $TESTVMOPTS -cp $TESTCLASSPATH\"\n-\n-# Test JVM startup with different memory options.\n-#\n-# This checks that 64-bit VMs can start with huge values of memory\n-# options. It is intended to be run on machines with more than 4G\n-# available memory\n-#\n-# Based on InitMaxHeapSize, InitNegativeHeapSize, InitMinHeapSize,\n-# InitZeroHeapSize\n-#\n-# TODO: Actually we need to determine amount of virtual memory available\n-\n-\n-# go to the testDir passed as the first command line argument\n-#testDir=$1\n-#shift\n-#cd $testDir\n-\n-\n-java=\"$JAVA $JAVA_OPTS\"\n-\n-# Succeed if we are not running 64-bit\n-$java nsk.share.PrintProperties sun.arch.data.model | grep 64 >> \/dev\/null\n-if [ $? -ne 0 ]; then\n-        echo 'Skipping the test; a 64-bit VM is required.'\n-        exit 0\n-fi\n-\n-# Try to determine available memory\n-os=`uname`;\n-if [ $os = \"SunOS\" ]; then\n-        VMStatSystemMemory=`vmstat 2 2 | awk 'NR == 4 { printf(\"%d\", $5 \/ 1024); }'`\n-        PrtSystemMemory=`\/usr\/sbin\/prtconf 2>&1 | awk '\/^Memory size:\/ { memsize = $3; }END { printf(\"%d\", memsize); }'`\n-\n-        if [ $PrtSystemMemory -lt $VMStatSystemMemory ]; then\n-                # it's running in solaris zone\n-                # vmstat reports free memory available for all kernel not zone\n-                SystemMemory=$(($PrtSystemMemory * 3 \/ 4)) # expectation that free memory greater than 0.75 of total memory\n-                Exact=0\n-        else\n-                SystemMemory=$VMStatSystemMemory\n-                Exact=1\n-        fi\n-\n-        Exact=1\n-elif [ $os = \"Linux\" ]; then\n-        SystemMemory=`awk '\/^(MemFree|SwapFree|Cached):\/ { sum += $2; }END { printf(\"%d\", sum \/ 1024); }' \/proc\/meminfo`\n-        Exact=1\n-elif [ $os = \"Darwin\" ]; then\n-        SystemMemory=`vm_stat  | awk 'NR == 2 { printf(\"%d\",$3 * 4 \/ 1024) }'`\n-        Exact=1\n-else\n-        echo \"Unknown arch: $os\"\n-        SystemMemory=0\n-fi\n-\n-case $m in\n-Win*|CYG*)\n-        echo \"Do not checking ulimit on windows host.\"\n-        ;;\n-*)\n-        ULimitMemory=`ulimit -a | grep virtual | awk '{printf($5)}'`\n-        echo \"ulimit is: $ULimitMemory\"\n-        if [ $ULimitMemory != \"unlimited\" ]; then\n-                ULimitMemory=$(($ULimitMemory \/ 1024 ))\n-                if [ $ULimitMemory -lt $SystemMemory ]; then\n-                        echo \"ulimit is less then system memory.\"\n-                        SystemMemory=$ULimitMemory\n-                fi\n-        fi\n-        ;;\n-esac\n-\n-echo \"Available memory in the system: $SystemMemory (mb)\"\n-if [ $SystemMemory -eq 0 ]; then\n-        echo \"Unable to determine available memory\"\n-        exit 0\n-#We required more than 4096m, because there are Metaspace, codecache, stack, and memory fragmentation\n-elif [ $Exact -eq 1 -a $SystemMemory -lt 5120 ]; then\n-        echo \"Not enough memory in the system to test 64bit functionality\"\n-        exit 0\n-elif [ $Exact -eq 0 -a $SystemMemory -lt 6120 ]; then\n-        echo \"Not enough memory in the system to test 64bit functionality\"\n-        exit 0\n-else\n-        echo \"Heap memory size beyond a 32 bit address range can be allocated for JVM\"\n-fi\n-\n-# Compile the InitMaxHeapSize program\n-error=0\n-\n-test_successful() {\n-        message=$1\n-        cmd=$2\n-        printf \"\\n$message\\n\"\n-        echo \"$cmd\"\n-        $cmd\n-        rc=$?\n-        if [ $rc -ne 0 ]; then\n-                echo \"Exit code: $rc\"\n-                error=1\n-        fi\n-}\n-\n-test_unsuccessful() {\n-        message=$1\n-        cmd=$2\n-        printf \"\\n$message\\n\"\n-        echo \"$cmd\"\n-        $cmd\n-        rc=$?\n-        if [ $rc -eq 0 ]; then\n-                echo \"Exit code: $rc\"\n-                error=1\n-        fi\n-}\n-\n-MemStat=\"gc.huge.quicklook.largeheap.MemOptions.MemStat\"\n-\n-test_successful \"Maximum heap size within 32-bit address range\" \"$java -Xmx2G $MemStat\"\n-test_successful \"Maximum heap size at 32-bit address range\" \"$java -Xmx4G $MemStat\"\n-test_successful \"Maximum heap size outside 32-bit address range\" \"$java -Xmx5G $MemStat\"\n-test_unsuccessful \"Maximum heap size of negative value\" \"$java -Xmx-1m $MemStat\"\n-test_unsuccessful \"Maximum heap size of zero value\" \"$java -Xmx0m $MemStat\"\n-\n-#test_unsuccessful \"Less than minimum required heap size\" \"$java -Xms2176k -Xmx2176k $MemStat\"\n-#test_successful \"Minimum required heap size\" \"$java -Xms2177k -Xmx2177k $MemStat\"\n-\n-test_successful \"Initial heap size within 32-bit address range\" \"$java -Xms2G -Xmx2G $MemStat\"\n-test_successful \"Initial heap size at 32-bit address range\" \"$java -Xms4G  -Xmx4G $MemStat\"\n-test_successful \"Initial heap size outside 32-bit address range\" \"$java -Xms4200M  -Xmx5G $MemStat\"\n-test_unsuccessful \"Initial heap size of negative value\" \"$java -Xms-1m $MemStat\"\n-test_successful \"Initial heap size of zero value\" \"$java -Xms0m $MemStat\"\n-\n-#test_successful \"Initial young generation size within 32-bit range\" \"$java -Xmx3G -XX:NewSize=2G $MemStat\"\n-#test_successful \"Initial young generation size at 32-bit range\" \"$java -Xmx5G -XX:NewSize=4G $MemStat\"\n-#test_successful \"Initial young generation size outside 32-bit range\" \"$java -Xmx5G -XX:NewSize=4G $MemStat\"\n-\n-#test_successful \"Initial old generation size within 32-bit range\" \"$java -Xmx3G -XX:OldSize=2G $MemStat\"\n-#test_successful \"Initial old generation size at 32-bit range\" \"$java -Xmx5G -XX:OldSize=4G $MemStat\"\n-#test_successful \"Initial old generation size outside 32-bit range\" \"$java -Xmx5G -XX:OldSize=4G $MemStat\"\n-\n-printf \"\\n\\n\"\n-if [ $error -eq 0 ]; then\n-        echo Test passed\n-else\n-        echo Test failed\n-        exit 1\n-fi\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/huge\/quicklook\/largeheap\/MemOptions\/MemOptions.sh","additions":0,"deletions":173,"binary":false,"changes":173,"status":"deleted"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @key gc\n+ *\n+ * @summary converted from VM Testbase gc\/huge\/quicklook\/largeheap\/MemOptions.\n+ * @requires vm.bits == 64\n+ * @requires os.maxMemory > 4G\n+ *\n+ * @library \/test\/lib\n+ * @run driver gc.huge.quicklook.largeheap.MemOptions.MemOptionsTest\n+ *\/\n+\n+package gc.huge.quicklook.largeheap.MemOptions;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/*\n+ * Test JVM startup with different memory options.\n+ *\n+ * This checks that 64-bit VMs can start with huge values of memory\n+ * options. It is intended to be run on machines with more than 4G\n+ * available memory\n+ *\n+ * Based on InitMaxHeapSize, InitNegativeHeapSize, InitMinHeapSize,\n+ * InitZeroHeapSize\n+ *\/\n+public class MemOptionsTest {\n+    public static void main(String args[]) throws IOException {\n+        new MemOptionsTest().test();\n+    }\n+\n+    private final ArrayList<String> failed = new ArrayList<>();\n+\n+    public void test() throws IOException {\n+        positive(\"Maximum heap size within 32-bit address range\", \"-Xmx2G\");\n+        positive(\"Maximum heap size at 32-bit address range\", \"-Xmx4G\");\n+        positive(\"Maximum heap size outside 32-bit address range\", \"-Xmx5G\");\n+        negative(\"Maximum heap size of negative value\", \"-Xmx-1m\");\n+        negative(\"Maximum heap size of zero value\", \"-Xmx0m\");\n+\n+        \/\/ negative(\"Less than minimum required heap size\", \"-Xms2176k\", \"-Xmx2176k\");\n+        \/\/ positive(\"Minimum required heap size\", \"-Xms2177k\", \"-Xmx2177k\");\n+\n+        positive(\"Initial heap size within 32-bit address range\", \"-Xms2G\", \"-Xmx2G\");\n+        positive(\"Initial heap size at 32-bit address range\", \"-Xms4G\", \"-Xmx4G\");\n+        positive(\"Initial heap size outside 32-bit address range\", \"-Xms4200M\", \"-Xmx5G\");\n+        negative(\"Initial heap size of negative value\", \"-Xms-1m\");\n+        positive(\"Initial heap size of zero value\", \"-Xms0m\");\n+\n+        \/\/ positive(\"Initial young generation size within 32-bit range\", \"-Xmx3G\", \"-XX:NewSize=2G\");\n+        \/\/ positive(\"Initial young generation size at 32-bit range\", \"-Xmx5G\", \"-XX:NewSize=4G\");\n+        \/\/ positive(\"Initial young generation size outside 32-bit range\", \"-Xmx5G\", \"-XX:NewSize=4G\");\n+\n+        \/\/ positive(\"Initial old generation size within 32-bit range\", \"-Xmx3G\", \"-XX:OldSize=2G\");\n+        \/\/ positive(\"Initial old generation size at 32-bit range\", \"-Xmx5G\", \"-XX:OldSize=4G\");\n+        \/\/ positive(\"Initial old generation size outside 32-bit range\", \"-Xmx5G\", \"-XX:OldSize=4G\");\n+\n+        if (!failed.isEmpty()) {\n+            throw new AssertionError(String.format(\"%d cases failed : %s\", failed.size(), failed));\n+        }\n+    }\n+\n+    private void positive(String name, String... opts) throws IOException {\n+        System.out.println(name);\n+        var cmd = new ArrayList<String>();\n+        Collections.addAll(cmd, opts);\n+        cmd.add(MemStat.class.getName());\n+        var pb = ProcessTools.createJavaProcessBuilder(true,\n+                cmd.toArray(new String[cmd.size()]));\n+        var output = new OutputAnalyzer(pb.start());\n+        if (output.getExitValue() != 0) {\n+            output.reportDiagnosticSummary();\n+            failed.add(name);\n+        }\n+    }\n+\n+    private void negative(String name, String... opts) throws IOException {\n+        System.out.println(name);\n+        var cmd = new ArrayList<String>();\n+        Collections.addAll(cmd, opts);\n+        cmd.add(MemStat.class.getName());\n+        var pb = ProcessTools.createJavaProcessBuilder(true,\n+                cmd.toArray(new String[cmd.size()]));\n+        var output = new OutputAnalyzer(pb.start());\n+        if (output.getExitValue() == 0) {\n+            output.reportDiagnosticSummary();\n+            failed.add(name);\n+        }\n+    }\n+\n+    public static class MemStat {\n+        public static void main(String [] args) {\n+            Runtime runtime = Runtime.getRuntime();\n+            System.out.println(\"Max memory   : \"  + runtime.maxMemory());\n+            System.out.println(\"Total memory : \"  + runtime.totalMemory());\n+            System.out.println(\"Free memory  : \"  + runtime.freeMemory());\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/huge\/quicklook\/largeheap\/MemOptions\/MemOptionsTest.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package gc.huge.quicklook.largeheap.MemOptions;\n-\n-\/**\n- * This program simply prints statistics about JVM memory.\n- *\/\n-public class MemStat {\n-        public static void main(String [] args) {\n-                Runtime runtime = Runtime.getRuntime();\n-                System.out.println(\"Max memory   : \"  + runtime.maxMemory());\n-                System.out.println(\"Total memory : \"  + runtime.totalMemory());\n-                System.out.println(\"Free memory  : \"  + runtime.freeMemory());\n-                System.exit(0);\n-        }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/huge\/quicklook\/largeheap\/MemOptions\/MemStat.java","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-#\n-# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/huge\/quicklook\/largeheap\/MemOptions\/TEST.properties","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,39 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- * @key gc\n- *\n- * @summary converted from VM Testbase gc\/huge\/quicklook\/largeheap\/MemOptions.\n- * VM Testbase keywords: [gc, nonconcurrent]\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- * @run driver jdk.test.lib.FileInstaller . .\n- * @build nsk.share.PrintProperties\n- *        gc.huge.quicklook.largeheap.MemOptions.MemStat\n- * @run shell MemOptions.sh\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/huge\/quicklook\/largeheap\/MemOptions\/TestDescription.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"}]}