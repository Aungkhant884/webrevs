{"files":[{"patch":"@@ -201,54 +201,0 @@\n-    \/**\n-     * Runs jar.\n-     *\n-     * @param args arguments to jar in a single string. The string is\n-     *             converted to be List with makeList.\n-     * @return an {@link OutputAnalyzer} object\n-     * @throws Exception if there is an error\n-     *\/\n-    public static OutputAnalyzer jar(String args) throws Exception {\n-        return execute(getProcessBuilder(\"jar\", makeList(args)));\n-    }\n-\n-    \/**\n-     * Split a line to a list of string. All whitespaces are treated as\n-     * delimiters unless quoted between ` and `.\n-     *\n-     * @param line the input\n-     * @return the list\n-     *\/\n-    public static List<String> makeList(String line) {\n-        List<String> result = new ArrayList<>();\n-        StringBuilder sb = new StringBuilder();\n-        boolean inBackTick = false;\n-        for (char c : line.toCharArray()) {\n-            if (inBackTick) {\n-                if (c == '`') {\n-                    result.add(sb.toString());\n-                    sb.setLength(0);\n-                    inBackTick = false;\n-                } else {\n-                    sb.append(c);\n-                }\n-            } else {\n-                if (sb.length() == 0 && c == '`') {\n-                    \/\/ Allow ` inside a string\n-                    inBackTick = true;\n-                } else {\n-                    if (Character.isWhitespace(c)) {\n-                        if (sb.length() != 0) {\n-                            result.add(sb.toString());\n-                            sb.setLength(0);\n-                        }\n-                    } else {\n-                        sb.append(c);\n-                    }\n-                }\n-            }\n-        }\n-        if (sb.length() != 0) {\n-            result.add(sb.toString());\n-        }\n-        return result;\n-    }\n-\n","filename":"test\/lib\/jdk\/test\/lib\/SecurityTools.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.nio.file.StandardCopyOption;\n@@ -42,0 +43,1 @@\n+import java.util.Set;\n@@ -46,0 +48,1 @@\n+import java.util.stream.Collectors;\n@@ -120,0 +123,55 @@\n+    \/**\n+     * Updates a JAR file.\n+     *\n+     * Equivalent to {@code jar uf <jarfile> -C <dir> file...}\n+     *\n+     * The input files are resolved against the given directory. Any input\n+     * files that are directories are processed recursively.\n+     *\/\n+    public static void updateJarFile(Path jarfile, Path dir, Path... files)\n+            throws IOException\n+    {\n+        List<Path> entries = findAllRegularFiles(dir, files);\n+\n+        Set<String> names = entries.stream()\n+                                   .map(JarUtils::toJarEntryName)\n+                                   .collect(Collectors.toSet());\n+\n+        Path tmpfile = Files.createTempFile(\"jar\", \"jar\");\n+\n+        try (OutputStream out = Files.newOutputStream(tmpfile);\n+             JarOutputStream jos = new JarOutputStream(out)) {\n+            \/\/ copy existing entries from the original JAR file\n+            try (JarFile jf = new JarFile(jarfile.toString())) {\n+                Enumeration<JarEntry> jentries = jf.entries();\n+                while (jentries.hasMoreElements()) {\n+                    JarEntry jentry = jentries.nextElement();\n+                    if (!names.contains(jentry.getName())) {\n+                        jos.putNextEntry(copyEntry(jentry));\n+                        jf.getInputStream(jentry).transferTo(jos);\n+                    }\n+                }\n+            }\n+\n+            \/\/ add the new entries\n+            for (Path entry : entries) {\n+                String name = toJarEntryName(entry);\n+                jos.putNextEntry(new JarEntry(name));\n+                Files.copy(dir.resolve(entry), jos);\n+            }\n+        }\n+\n+        \/\/ replace the original JAR file\n+        Files.move(tmpfile, jarfile, StandardCopyOption.REPLACE_EXISTING);\n+    }\n+\n+    \/**\n+     * Updates a JAR file.\n+     *\n+     * Equivalent to {@code jar uf <jarfile> -C <dir> .}\n+     *\/\n+    public static void updateJarFile(Path jarfile, Path dir) throws IOException {\n+        updateJarFile(jarfile, dir, Paths.get(\".\"));\n+    }\n+\n+\n@@ -292,0 +350,13 @@\n+\n+    private static JarEntry copyEntry(JarEntry e1) {\n+        JarEntry e2 = new JarEntry(e1.getName());\n+        e2.setMethod(e1.getMethod());\n+        e2.setTime(e1.getTime());\n+        e2.setComment(e1.getComment());\n+        e2.setExtra(e1.getExtra());\n+        if (e1.getMethod() == JarEntry.STORED) {\n+            e2.setSize(e1.getSize());\n+            e2.setCrc(e1.getCrc());\n+        }\n+        return e2;\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/util\/JarUtils.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"modified"}]}