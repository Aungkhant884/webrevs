{"files":[{"patch":"@@ -102,0 +102,18 @@\n+#\n+# Allow restricted HTTP request headers\n+#\n+# By default, the following request headers are not allowed to be set by user code\n+# in HttpRequests: \"connection\", \"content-length\", \"expect\", \"host\" and \"upgrade\".\n+# The 'jdk.httpclient.allowRestrictedHeaders' property allows one or more of these\n+# headers to be specified as a comma separated list to override the default restriction.\n+# The names are case-insensitive and white-space is ignored (removed before processing\n+# the list). Note, this capability is mostly intended for testing and isn't expected\n+# to be used in real deployments. Protocol errors or other undefined behavior is likely\n+# to occur when using them. The property is not set by default.\n+# Note also, that there may be other headers that are restricted from being set\n+# depending on the context. This includes the \"Authorization\" header when the\n+# relevant HttpClient has an authenticator set. These restrictions cannot be\n+# overridden by this property.\n+#\n+# jdk.httpclient.allowRestrictedHeaders=host\n+#\n","filename":"src\/java.base\/share\/conf\/net.properties","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -601,0 +601,13 @@\n+        String hostHeader = userHeaders.firstValue(\"Host\").orElse(null);\n+        if (hostHeader != null && !hostHeader.equalsIgnoreCase(u.getHost())) {\n+            \/\/ user has set a Host header different to request URI\n+            \/\/ must check that for URLPermission also\n+            URI u1 = replaceHostInURI(u, hostHeader);\n+            URLPermission p1 = permissionForServer(u1, method, userHeaders.map());\n+            try {\n+                assert acc != null;\n+                sm.checkPermission(p1, acc);\n+            } catch (SecurityException e) {\n+                return e;\n+            }\n+        }\n@@ -618,0 +631,9 @@\n+    private static URI replaceHostInURI(URI u, String hostPort) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(u.getScheme())\n+                .append(\":\/\/\")\n+                .append(hostPort)\n+                .append(u.getRawPath());\n+        return URI.create(sb.toString());\n+    }\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Exchange.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.net.http.HttpClient;\n@@ -68,0 +69,3 @@\n+    HttpClient client() {\n+        return exchange.client();\n+    }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ExchangeImpl.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.net.http.HttpClient;\n@@ -717,0 +718,4 @@\n+    HttpClient client() {\n+        return client;\n+    }\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http1Exchange.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.net.http.HttpClient;\n@@ -62,1 +63,1 @@\n-    private final HttpHeaders userHeaders;\n+    private volatile HttpHeaders userHeaders;\n@@ -94,1 +95,1 @@\n-    private void collectHeaders0(StringBuilder sb) {\n+    public void collectHeaders0(StringBuilder sb) {\n@@ -102,0 +103,9 @@\n+        HttpClient client = http1Exchange.client();\n+\n+        \/\/ Filter overridable headers from userHeaders\n+        userHeaders = HttpHeaders.of(userHeaders.map(), Utils.CONTEXT_RESTRICTED(client));\n+\n+        final HttpHeaders uh = userHeaders;\n+\n+        \/\/ Filter any headers from systemHeaders that are set in userHeaders\n+        systemHeaders = HttpHeaders.of(systemHeaders.map(), (k,v) -> uh.firstValue(k).isEmpty());\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http1Request.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -620,0 +620,4 @@\n+        URI uri = request.uri();\n+        if (uri != null) {\n+            h.setHeader(\"host\", Utils.hostString(request));\n+        }\n@@ -622,0 +626,8 @@\n+        \/\/ Filter context restricted from userHeaders\n+        userh = HttpHeaders.of(userh.map(), Utils.CONTEXT_RESTRICTED(client()));\n+\n+        final HttpHeaders uh = userh;\n+\n+        \/\/ Filter any headers from systemHeaders that are set in userHeaders\n+        sysh = HttpHeaders.of(sysh.map(), (k,v) -> uh.firstValue(k).isEmpty());\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Stream.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import java.net.http.HttpClient;\n@@ -131,1 +132,1 @@\n-    private static final Set<String> DISALLOWED_HEADERS_SET;\n+    private static final Set<String> DISALLOWED_HEADERS_SET = getDisallowedHeaders();\n@@ -133,6 +134,15 @@\n-    static {\n-        \/\/ A case insensitive TreeSet of strings.\n-        TreeSet<String> treeSet = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n-        treeSet.addAll(Set.of(\"connection\", \"content-length\",\n-                \"date\", \"expect\", \"from\", \"host\", \"upgrade\", \"via\", \"warning\"));\n-        DISALLOWED_HEADERS_SET = Collections.unmodifiableSet(treeSet);\n+    private static Set<String> getDisallowedHeaders() {\n+        Set<String> headers = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n+        headers.addAll(Set.of(\"connection\", \"content-length\", \"expect\", \"host\", \"upgrade\"));\n+\n+        String v = getNetProperty(\"jdk.httpclient.allowRestrictedHeaders\");\n+        if (v != null) {\n+            \/\/ any headers found are removed from set.\n+            String[] tokens = v.trim().split(\",\");\n+            for (String token : tokens) {\n+                headers.remove(token);\n+            }\n+            return Collections.unmodifiableSet(headers);\n+        } else {\n+            return Collections.unmodifiableSet(headers);\n+        }\n@@ -161,0 +171,14 @@\n+\n+    \/\/ Headers that are not generally restricted, and can therefore be set by users,\n+    \/\/ but can in some contexts be overridden by the implementation.\n+    \/\/ Currently, only contains \"Authorization\" which will\n+    \/\/ be overridden, when an Authenticator is set on the HttpClient.\n+    \/\/ Needs to be BiPred<String,String> to fit with general form of predicates\n+    \/\/ used by caller.\n+\n+    public static final BiPredicate<String, String> CONTEXT_RESTRICTED(HttpClient client) {\n+        return (k, v) -> client.authenticator() == null ||\n+                ! (k.equalsIgnoreCase(\"Authorization\")\n+                        && k.equalsIgnoreCase(\"Proxy-Authorization\"));\n+    }\n+\n@@ -338,2 +362,2 @@\n-                .append(uri.getAuthority())\n-                .append(uri.getPath()).toString();\n+                .append(uri.getRawAuthority())\n+                .append(uri.getRawPath()).toString();\n@@ -803,0 +827,27 @@\n+    \/**\n+     * Return the host string from a HttpRequestImpl\n+     *\n+     * @param request\n+     * @return\n+     *\/\n+    public static String hostString(HttpRequestImpl request) {\n+        URI uri = request.uri();\n+        int port = uri.getPort();\n+        String host = uri.getHost();\n+\n+        boolean defaultPort;\n+        if (port == -1) {\n+            defaultPort = true;\n+        } else if (uri.getScheme().equalsIgnoreCase(\"https\")) {\n+            defaultPort = port == 443;\n+        } else {\n+            defaultPort = port == 80;\n+        }\n+\n+        if (defaultPort) {\n+            return host;\n+        } else {\n+            return host + \":\" + Integer.toString(port);\n+        }\n+    }\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/Utils.java","additions":60,"deletions":9,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -342,1 +342,1 @@\n-            \"OriGin\", \"Referer\");\n+            \"OriGin\", \"Referer\", \"Date\", \"via\", \"WarnIng\");\n@@ -357,8 +357,3 @@\n-            \"date\", \"expect\", \"from\", \"host\",\n-            \"upgrade\", \"via\", \"warning\",\n-            \"Connection\", \"Content-Length\",\n-            \"DATE\", \"eXpect\", \"frOm\", \"hosT\",\n-            \"upgradE\", \"vIa\", \"Warning\",\n-            \"CONNection\", \"CONTENT-LENGTH\",\n-            \"Date\", \"EXPECT\", \"From\", \"Host\",\n-            \"Upgrade\", \"Via\", \"WARNING\");\n+            \"expect\", \"host\", \"upgrade\", \"Connection\", \"Content-Length\",\n+            \"eXpect\", \"hosT\", \"upgradE\", \"CONNection\", \"CONTENT-LENGTH\",\n+            \"EXPECT\", \"Host\", \"Upgrade\");\n","filename":"test\/jdk\/java\/net\/httpclient\/RequestBuilderTest.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8178699\n+ * @modules java.net.http\n+ * @run main\/othervm RestrictedHeadersTest\n+ * @run main\/othervm -Djdk.httpclient.allowRestrictedHeaders=content-length,connection RestrictedHeadersTest content-length connection\n+ * @run main\/othervm -Djdk.httpclient.allowRestrictedHeaders=host,upgrade RestrictedHeadersTest host upgrade\n+ * @run main\/othervm -Djdk.httpclient.allowRestrictedHeaders=via RestrictedHeadersTest via\n+ *\/\n+\n+import java.net.URI;\n+import java.net.http.HttpRequest;\n+import java.util.Set;\n+\n+public class RestrictedHeadersTest {\n+    public static void main(String[] args) {\n+        if (args.length == 0) {\n+            runDefaultTest();\n+        } else {\n+            runTest(Set.of(args));\n+        }\n+    }\n+\n+    \/\/ This list must be same as impl\n+\n+    static Set<String> defaultRestrictedHeaders =\n+            Set.of(\"connection\", \"content-length\", \"expect\", \"host\", \"upgrade\");\n+\n+    private static void runDefaultTest() {\n+        System.out.println(\"DEFAULT TEST: no property set\");\n+        for (String header : defaultRestrictedHeaders) {\n+            checkHeader(header, \"foo\", false);\n+        }\n+        \/\/ miscellaneous others that should succeed\n+        checkHeader(\"foobar\", \"barfoo\", true);\n+        checkHeader(\"date\", \"today\", true);\n+    }\n+\n+    private static void checkHeader(String name, String value, boolean succeed) {\n+        try {\n+            HttpRequest request = HttpRequest.newBuilder(URI.create(\"https:\/\/foo.com\/\"))\n+                    .header(name, value)\n+                    .GET()\n+                    .build();\n+            if (!succeed) {\n+                String s = name+\"\/\"+value+\" should have failed\";\n+                throw new RuntimeException(s);\n+            }\n+            System.out.printf(\"%s = %s succeeded as expected\\n\", name, value);\n+        } catch (IllegalArgumentException iae) {\n+            if (succeed) {\n+                String s = name+\"\/\"+value+\" should have succeeded\";\n+                throw new RuntimeException(s);\n+            }\n+            System.out.printf(\"%s = %s failed as expected\\n\", name, value);\n+        }\n+    }\n+\n+    \/\/ args is the Set of allowed restricted headers\n+    private static void runTest(Set<String> args) {\n+        System.out.print(\"RUNTEST: allowed headers set in property: \");\n+        for (String arg : args) System.out.printf(\"%s \", arg);\n+        System.out.println(\"\");\n+\n+        for (String header : args) {\n+            checkHeader(header, \"val\", true);\n+        }\n+        for (String header : defaultRestrictedHeaders) {\n+            if (!args.contains(header)) {\n+                checkHeader(header, \"foo\", false);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/RestrictedHeadersTest.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -41,0 +41,3 @@\n+ * @run testng\/othervm -Djdk.httpclient.allowRestrictedHeaders=Host\n+ *       -Djdk.httpclient.HttpClient.log=requests,headers,errors\n+ *       SpecialHeadersTest\n@@ -73,0 +76,1 @@\n+import java.util.function.Function;\n@@ -107,0 +111,8 @@\n+    \/\/ Needs net.property enabled for this part of test\n+    static final String[][] headerNamesAndValues1 = new String[][]{\n+            {\"Host: <DEFAULT>\"},\n+            {\"Host: camel-cased\"},\n+            {\"host: all-lower-case\"},\n+            {\"hoSt: mixed\"}\n+    };\n+\n@@ -109,0 +121,4 @@\n+        String prop = System.getProperty(\"jdk.httpclient.allowRestrictedHeaders\");\n+        boolean hostTest = prop != null && prop.equalsIgnoreCase(\"host\");\n+        final String[][] testInput = hostTest ? headerNamesAndValues1 : headerNamesAndValues;\n+\n@@ -112,1 +128,1 @@\n-            Arrays.asList(headerNamesAndValues).stream()\n+            Arrays.asList(testInput).stream()\n@@ -115,1 +131,1 @@\n-            Arrays.asList(headerNamesAndValues).stream()\n+            Arrays.asList(testInput).stream()\n@@ -118,1 +134,1 @@\n-            Arrays.asList(headerNamesAndValues).stream()\n+            Arrays.asList(testInput).stream()\n@@ -121,1 +137,1 @@\n-            Arrays.asList(headerNamesAndValues).stream()\n+            Arrays.asList(testInput).stream()\n@@ -134,1 +150,2 @@\n-    static final Map<String, String> DEFAULTS = Map.of(\"USER-AGENT\", userAgent());\n+    static final Map<String, Function<URI,String>> DEFAULTS = Map.of(\n+        \"USER-AGENT\", u -> userAgent(), \"HOST\", u -> u.getRawAuthority());\n@@ -145,1 +162,0 @@\n-        String value =  useDefault ? DEFAULTS.get(key) : v;\n@@ -148,0 +164,1 @@\n+        String value =  useDefault ? DEFAULTS.get(key).apply(uri) : v;\n@@ -213,1 +230,1 @@\n-                Map<String, List<String>> map = Map.of(\"via\", List.of(\"http:\/\/foo.com\"));\n+                Map<String, List<String>> map = Map.of(\"upgrade\", List.of(\"http:\/\/foo.com\"));\n@@ -234,1 +251,0 @@\n-        String value =  useDefault ? DEFAULTS.get(key) : v;\n@@ -237,0 +253,1 @@\n+        String value =  useDefault ? DEFAULTS.get(key).apply(uri) : v;\n","filename":"test\/jdk\/java\/net\/httpclient\/SpecialHeadersTest.java","additions":25,"deletions":8,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -0,0 +1,45 @@\n+\/\/\n+\/\/ Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\/\/\n+\/\/ This code is free software; you can redistribute it and\/or modify it\n+\/\/ under the terms of the GNU General Public License version 2 only, as\n+\/\/ published by the Free Software Foundation.\n+\/\/\n+\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n+\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+\/\/ FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License\n+\/\/ version 2 for more details (a copy is included in the LICENSE file that\n+\/\/ accompanied this code).\n+\/\/\n+\/\/ You should have received a copy of the GNU General Public License version\n+\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n+\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\/\/\n+\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+\/\/ or visit www.oracle.com if you need additional information or have any\n+\/\/ questions.\n+\/\/\n+\n+\/\/ Policy 16: Test tries to set Host header to localhost:123 but there is no permission\n+\n+grant {\n+    \/\/ permissions common to all tests\n+    permission java.util.PropertyPermission \"*\", \"read\";\n+    permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n+    permission java.lang.RuntimePermission \"modifyThread\";\n+    permission java.util.logging.LoggingPermission \"control\", \"\";\n+    permission java.net.SocketPermission \"localhost:1024-\", \"accept,listen\";\n+    permission java.io.FilePermission \"${test.src}${\/}docs${\/}-\", \"read\";\n+    permission java.lang.RuntimePermission \"createClassLoader\";\n+\n+\n+    \/\/ permissions specific to this test\n+    permission java.net.URLPermission \"http:\/\/localhost:${port.number}\/files\/foo.txt\", \"GET:Host\";\n+};\n+\n+\/\/ For proxy only. Not being tested\n+grant codebase \"file:${test.classes}\/proxydir\/-\" {\n+    permission java.net.SocketPermission \"localhost:1024-\", \"accept,listen,connect\";\n+    permission java.net.SocketPermission \"localhost:1024-\", \"connect,resolve\";\n+};\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/16.policy","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/\/\n+\/\/ Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\/\/\n+\/\/ This code is free software; you can redistribute it and\/or modify it\n+\/\/ under the terms of the GNU General Public License version 2 only, as\n+\/\/ published by the Free Software Foundation.\n+\/\/\n+\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n+\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+\/\/ FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License\n+\/\/ version 2 for more details (a copy is included in the LICENSE file that\n+\/\/ accompanied this code).\n+\/\/\n+\/\/ You should have received a copy of the GNU General Public License version\n+\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n+\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\/\/\n+\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+\/\/ or visit www.oracle.com if you need additional information or have any\n+\/\/ questions.\n+\/\/\n+\n+\/\/ Policy 17. Grant permission to port 123 (no connect attempt is actually made)\n+grant {\n+    \/\/ permissions common to all tests\n+    permission java.util.PropertyPermission \"*\", \"read\";\n+    permission java.io.FilePermission \"${test.classes}${\/}-\", \"read,write,delete\";\n+    permission java.lang.RuntimePermission \"modifyThread\";\n+    permission java.util.logging.LoggingPermission \"control\", \"\";\n+    permission java.net.SocketPermission \"localhost:1024-\", \"accept,listen\";\n+    permission java.io.FilePermission \"${test.src}${\/}docs${\/}-\", \"read\";\n+    permission java.lang.RuntimePermission \"createClassLoader\";\n+\n+\n+    \/\/ permissions specific to this test\n+    permission java.net.URLPermission \"http:\/\/localhost:${port.number}\/files\/foo.txt\", \"GET:Host\";\n+    permission java.net.URLPermission \"http:\/\/foohost:123\/files\/foo.txt\", \"GET:Host\";\n+};\n+\n+\/\/ For proxy only. Not being tested\n+grant codebase \"file:${test.classes}\/proxydir\/-\" {\n+    permission java.net.SocketPermission \"localhost:1024-\", \"accept,listen,connect\";\n+    permission java.net.SocketPermission \"localhost:1024-\", \"connect,resolve\";\n+};\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/17.policy","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -73,0 +73,2 @@\n+        runtest(\"16.policy\", \"16\", \"-Djdk.httpclient.allowRestrictedHeaders=Host\");\n+        runtest(\"17.policy\", \"17\", \"-Djdk.httpclient.allowRestrictedHeaders=Host\");\n@@ -117,0 +119,3 @@\n+        runtest(policy, testnum, null);\n+    }\n+\n@@ -118,0 +123,1 @@\n+    public static void runtest(String policy, String testnum, String addProp) throws Throwable {\n@@ -139,0 +145,3 @@\n+            if (addProp != null) {\n+                cmd.add(addProp);\n+            }\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/Driver.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -380,0 +380,18 @@\n+            }),\n+            \/\/ (16) allowed to set Host header but does not have permission\n+            TestAndResult.of(true, () -> { \/\/Policy 16\n+                URI u = URI.create(\"http:\/\/localhost:\" + port + \"\/files\/foo.txt\");\n+                HttpRequest request = HttpRequest.newBuilder(u)\n+                        .header(\"Host\", \"foohost:123\")\n+                        .GET().build();\n+                HttpResponse<?> response = client.send(request, ofString());\n+                System.out.println(\"Received response:\" + response);\n+            }),\n+            \/\/ (17) allowed to set Host header and does have permission\n+            TestAndResult.of(false, () -> { \/\/Policy 17\n+                URI u = URI.create(\"http:\/\/localhost:\" + port + \"\/files\/foo.txt\");\n+                HttpRequest request = HttpRequest.newBuilder(u)\n+                        .header(\"Host\", \"foohost:123\")\n+                        .GET().build();\n+                HttpResponse<?> response = client.send(request, ofString());\n+                System.out.println(\"Received response:\" + response);\n","filename":"test\/jdk\/java\/net\/httpclient\/security\/Security.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"}]}