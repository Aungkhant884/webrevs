{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @library \/test\/lib\n@@ -27,0 +28,2 @@\n+ * @run main IllegalCookieNameTest\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true IllegalCookieNameTest\n@@ -32,0 +35,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -34,1 +38,1 @@\n-    public static void main(String[] args) throws IOException {\n+    public static void main(String[] args) throws Exception {\n@@ -37,1 +41,2 @@\n-            InetSocketAddress addr = new InetSocketAddress(0);\n+            InetAddress loopback = InetAddress.getLoopbackAddress();\n+            InetSocketAddress addr = new InetSocketAddress(loopback, 0);\n@@ -41,1 +46,6 @@\n-            String u = \"http:\/\/127.0.0.1:\" + s.getAddress().getPort() + \"\/\";\n+            String u = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(s.getAddress().getPort())\n+                .path(\"\/\")\n+                .build().toString();\n@@ -44,1 +54,1 @@\n-            HttpURLConnection c = (HttpURLConnection) url.openConnection();\n+            HttpURLConnection c = (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);\n","filename":"test\/jdk\/java\/net\/HttpCookie\/IllegalCookieNameTest.java","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -268,1 +268,1 @@\n-                       address.getHostString(),\n+                       address.getAddress().getHostAddress(),\n@@ -273,3 +273,16 @@\n-        return (authType == HttpAuthType.PROXY)\n-               ? new Proxy(Proxy.Type.HTTP, server.getAddress())\n-               : null;\n+        if (authType != HttpAuthType.PROXY) return null;\n+\n+        InetSocketAddress proxyAddress = server.getProxyAddress();\n+        if (!proxyAddress.isUnresolved()) {\n+            \/\/ Forces the proxy to use an unresolved address created\n+            \/\/ from the actual IP address to avoid using the proxy\n+            \/\/ address hostname which would result in resolving to\n+            \/\/ a posibly different address. For instance we want to\n+            \/\/ avoid cases such as:\n+            \/\/    ::1 => \"localhost\" => 127.0.0.1\n+            proxyAddress = InetSocketAddress.\n+                createUnresolved(proxyAddress.getAddress().getHostAddress(),\n+                                 proxyAddress.getPort());\n+        }\n+\n+        return new Proxy(Proxy.Type.HTTP, proxyAddress);\n","filename":"test\/jdk\/java\/net\/HttpURLConnection\/SetAuthenticator\/HTTPTest.java","additions":18,"deletions":5,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -402,0 +402,4 @@\n+    public InetSocketAddress getProxyAddress() {\n+        return serverImpl.getAddress();\n+    }\n+\n@@ -1030,1 +1034,1 @@\n-        public InetSocketAddress getAddress() {\n+        public InetSocketAddress getProxyAddress() {\n@@ -1058,1 +1062,1 @@\n-                    System.out.println(\"Tunnel: Waiting for client\");\n+                    System.out.println(\"Tunnel: Waiting for client at: \" + ss);\n","filename":"test\/jdk\/java\/net\/HttpURLConnection\/SetAuthenticator\/HTTPTestServer.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main FtpURLConnectionLeak\n+ * @run main\/othervm FtpURLConnectionLeak\n","filename":"test\/jdk\/sun\/net\/ftp\/FtpURLConnectionLeak.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws Exception {\n@@ -61,7 +61,3 @@\n-    public RetryPost() {\n-        try {\n-            startHttpServer(shouldRetry);\n-            doClient();\n-        } catch (IOException ioe) {\n-            System.err.println(ioe);\n-        }\n+    public RetryPost() throws Exception {\n+        startHttpServer(shouldRetry);\n+        doClient();\n@@ -70,1 +66,1 @@\n-    void doClient() {\n+    void doClient() throws Exception {\n@@ -90,2 +86,0 @@\n-        } catch (IOException e) {\n-            e.printStackTrace();\n@@ -113,2 +107,2 @@\n-        int callCount = 0;\n-        boolean shouldRetry;\n+        volatile int callCount = 0;\n+        final boolean shouldRetry;\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/RetryPost.java","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -29,0 +30,1 @@\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true B5017051\n@@ -38,0 +40,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -58,1 +61,1 @@\n-    com.sun.net.httpserver.HttpServer httpServer;\n+    HttpServer httpServer;\n@@ -61,2 +64,1 @@\n-    public static void main(String[] args)\n-    {\n+    public static void main(String[] args) throws Exception {\n@@ -66,8 +68,3 @@\n-    public B5017051()\n-    {\n-        try {\n-            startHttpServer();\n-            doClient();\n-        } catch (IOException ioe) {\n-            System.err.println(ioe);\n-        }\n+    public B5017051() throws Exception {\n+        startHttpServer();\n+        doClient();\n@@ -76,1 +73,1 @@\n-    void doClient() {\n+    void doClient() throws Exception {\n@@ -79,0 +76,1 @@\n+        ProxySelector.setDefault(ProxySelector.of(null));\n@@ -84,1 +82,6 @@\n-            URL url = new URL(\"http:\/\/\" + address.getHostName() + \":\" + address.getPort() + \"\/test\/\");\n+            URL url = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .host(address.getAddress())\n+                .port(address.getPort())\n+                .path(\"\/test\/\")\n+                .toURL();\n@@ -88,1 +91,1 @@\n-                throw new RuntimeException(\"Failed: Part 1, Response code is not 200\");\n+                throw new RuntimeException(\"Failed: Part 1, Response code is not 200: \" + resp);\n@@ -93,1 +96,6 @@\n-            URL url2 = new URL(\"http:\/\/\" + address.getHostName() + \":\" + address.getPort() + \"\/test2\/\");\n+            URL url2 = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .host(address.getAddress())\n+                .port(address.getPort())\n+                .path(\"\/test2\/\")\n+                .toURL();\n@@ -109,1 +117,1 @@\n-                throw new RuntimeException(\"Failed: Part 2, Response code is not 200\");\n+                throw new RuntimeException(\"Failed: Part 2, Response code is not 200: \" + resp);\n@@ -113,5 +121,0 @@\n-\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (URISyntaxException ue) {\n-            ue.printStackTrace();\n@@ -128,1 +131,2 @@\n-        httpServer = com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0), 0);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        httpServer = HttpServer.create(new InetSocketAddress(loopback, 0), 0);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/B5017051.java","additions":27,"deletions":23,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true B6296310\n@@ -48,1 +49,1 @@\n-   public static void main(String[] args)\n+   public static void main(String[] args) throws Exception\n@@ -52,1 +53,0 @@\n-\n@@ -56,7 +56,4 @@\n-   public static void startHttpServer() {\n-      try {\n-         httpTrans = new SimpleHttpTransaction();\n-         server = new TestHttpServer(httpTrans, 1, 10, 0);\n-      } catch (IOException e) {\n-         e.printStackTrace();\n-      }\n+   public static void startHttpServer() throws IOException {\n+     httpTrans = new SimpleHttpTransaction();\n+     InetAddress loopback = InetAddress.getLoopbackAddress();\n+     server = new TestHttpServer(httpTrans, 1, 10, loopback, 0);\n@@ -65,1 +62,1 @@\n-   public static void makeHttpCall() {\n+   public static void makeHttpCall() throws IOException {\n@@ -68,1 +65,1 @@\n-         URL url = new URL(\"http\" , InetAddress.getLocalHost().getHostAddress(),\n+         URL url = new URL(\"http\" , InetAddress.getLoopbackAddress().getHostAddress(),\n@@ -70,1 +67,1 @@\n-         HttpURLConnection uc = (HttpURLConnection)url.openConnection();\n+         HttpURLConnection uc = (HttpURLConnection)url.openConnection(Proxy.NO_PROXY);\n@@ -72,2 +69,0 @@\n-      } catch (IOException e) {\n-         e.printStackTrace();\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/B6296310.java","additions":10,"deletions":15,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true B6299712\n@@ -57,0 +58,1 @@\n+        ProxySelector.setDefault(ProxySelector.of(null)); \/\/ no proxy\n@@ -63,1 +65,2 @@\n-        server = HttpServer.create(new InetSocketAddress(0), 0);\n+        InetAddress address = InetAddress.getLocalHost();\n+        server = HttpServer.create(new InetSocketAddress(address, 0), 0);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/B6299712.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true NoNTLM\n@@ -158,2 +159,2 @@\n-\n-        try (ServerSocket ss = new ServerSocket(0)) {\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        try (ServerSocket ss = new ServerSocket(0, 0, loopback)) {\n@@ -201,1 +202,2 @@\n-        try (ServerSocket ss = new ServerSocket(0)) {\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        try (ServerSocket ss = new ServerSocket(0, 0, loopback)) {\n@@ -228,0 +230,1 @@\n+        boolean ntlmSupported = false;\n@@ -233,2 +236,2 @@\n-                System.out.println(\"NTLM is supported. Nothing to do. Exiting.\");\n-                return;\n+                System.out.println(\"NTLM is supported.\");\n+                ntlmSupported = true;\n@@ -250,1 +253,8 @@\n-        test(\"Basic\", \"NTLM\");\n+\n+        if (ntlmSupported) {\n+            System.out.println(\"====================================\");\n+            System.out.println(\"NTLM is supported: client would select NTLM: skipping `test(\\\"Basic\\\", \\\"NTLM\\\")`..\");\n+        } else {\n+            test(\"Basic\", \"NTLM\");\n+        }\n+\n@@ -254,2 +264,7 @@\n-        \/\/ test NTLM only, this should fail with \"401 Unauthorized\"\n-        testNTLM();\n+        if (ntlmSupported) {\n+            System.out.println(\"====================================\");\n+            System.out.println(\"NTLM is supported: client would select NTLM: skipping `testNTLM()`..\");\n+        } else {\n+            \/\/ test NTLM only, this should fail with \"401 Unauthorized\"\n+            testNTLM();\n+        }\n@@ -261,1 +276,0 @@\n-\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/NoNTLM.java","additions":24,"deletions":10,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/RedirectOnPost.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @run main\/othervm -Dhttp.agent=foo -Djava.net.preferIPv6Addresses=true UserAgent\n@@ -90,1 +91,3 @@\n-        ServerSocket server = new ServerSocket (0);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        ServerSocket server = new ServerSocket ();\n+        server.bind(new InetSocketAddress(loopback, 0));\n@@ -100,1 +103,1 @@\n-        URLConnection urlc = url.openConnection ();\n+        URLConnection urlc = url.openConnection (Proxy.NO_PROXY);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/UserAgent.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-        HttpServer server = HttpServer.create(new InetSocketAddress(0), 0);\n+        HttpServer server = HttpServer.create(new InetSocketAddress(address, 0), 0);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/ZoneId.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -29,0 +30,1 @@\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true JavaxHTTPSConnection\n@@ -39,0 +41,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -141,0 +144,2 @@\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        InetSocketAddress serverAddress = new InetSocketAddress(loopback, serverPort);\n@@ -144,1 +149,2 @@\n-            (SSLServerSocket) sslssf.createServerSocket(serverPort);\n+            (SSLServerSocket) sslssf.createServerSocket();\n+        sslServerSocket.bind(serverAddress);\n@@ -207,3 +213,8 @@\n-            URL url = new URL(\"https:\/\/\" + \"localhost:\" + serverPort +\n-                                    \"\/etc\/hosts\");\n-            URLConnection urlc = url.openConnection();\n+            URL url = URIBuilder.newBuilder()\n+                .scheme(\"https\")\n+                .loopback()\n+                .port(serverPort)\n+                .path(\"\/etc\/hosts\")\n+                .toURL();\n+            System.out.println(\"Client opening: \" + url);\n+            URLConnection urlc = url.openConnection(Proxy.NO_PROXY);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/NewImpl\/JavaxHTTPSConnection.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -64,0 +64,6 @@\n+    public URIBuilder host(InetAddress address) {\n+        String hostaddr = address.isAnyLocalAddress()\n+               ? \"localhost\" : address.getHostAddress();\n+        return host(hostaddr);\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/net\/URIBuilder.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}