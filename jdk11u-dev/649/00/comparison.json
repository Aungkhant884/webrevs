{"files":[{"patch":"@@ -24,0 +24,10 @@\n+#include <stdlib.h>\n+\n+\/\/ checked malloc to trap OOM conditions\n+static void* c_malloc(JNIEnv* env, size_t size) {\n+  void* ret = malloc(size);\n+  if (ret == NULL)\n+    env->FatalError(\"malloc failed\");\n+  return ret;\n+}\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/jni\/jnihelper.h","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -71,3 +71,3 @@\n-        element = (CHAR_ARRAY *)malloc(sizeof(CHAR_ARRAY));\n-        element->str = (const char **)malloc(nstr*sizeof(const char *));\n-        element->checkstr = (char **)malloc(nstr*sizeof(char *));\n+        element = (CHAR_ARRAY *)c_malloc(env, sizeof(CHAR_ARRAY));\n+        element->str = (const char **)c_malloc(env, nstr*sizeof(const char *));\n+        element->checkstr = (char **)c_malloc(env, nstr*sizeof(char *));\n@@ -75,1 +75,1 @@\n-            element->checkstr[j] = (char *)malloc(DIGESTLENGTH*sizeof(char));\n+            element->checkstr[j] = (char *)c_malloc(env, DIGESTLENGTH*sizeof(char));\n@@ -153,0 +153,1 @@\n+    int elem_len = -1;\n@@ -165,4 +166,4 @@\n-        javachars = (JCHAR_ARRAY *)malloc(sizeof(JCHAR_ARRAY));\n-        javachars->str = (const jchar **)malloc(nstr*sizeof(const jchar *));\n-        javachars->checkstr = (char **)malloc(nstr*sizeof(char *));\n-        javachars->size = (int *)malloc(nstr*sizeof(int));\n+        javachars = (JCHAR_ARRAY *)c_malloc(env, sizeof(JCHAR_ARRAY));\n+        javachars->str = (const jchar **)c_malloc(env, nstr*sizeof(const jchar *));\n+        javachars->checkstr = (char **)c_malloc(env, nstr*sizeof(char *));\n+        javachars->size = (int *)c_malloc(env, nstr*sizeof(int));\n@@ -170,1 +171,1 @@\n-            javachars->checkstr[j] = (char *)malloc(DIGESTLENGTH*sizeof(char));\n+            javachars->checkstr[j] = (char *)c_malloc(env, DIGESTLENGTH*sizeof(char));\n@@ -177,3 +178,4 @@\n-    len += javachars->size[index];\n-    elem = (char*) malloc(javachars->size[index]*sizeof(char));\n-    for (j=0; j < javachars->size[index]; j++) {\n+    elem_len = javachars->size[index];\n+    len += elem_len;\n+    elem = (char*) c_malloc(env, elem_len*sizeof(char));\n+    for (j=0; j < elem_len; j++) {\n@@ -182,0 +184,1 @@\n+\n@@ -183,1 +186,1 @@\n-    for(j=0;j<javachars->size[index]; j++) {\n+    for(j=0;j<elem_len; j++) {\n@@ -188,1 +191,1 @@\n-        printf(\"Check string sum for thread %s is \",elem);\n+        printf(\"Check string sum for thread %.*s is \", elem_len, elem);\n@@ -196,1 +199,1 @@\n-        tmpstr=env->NewString(javachars->str[index-1],javachars->size[index-1]); CE\n+        tmpstr=env->NewString(javachars->str[index-1],elem_len); CE\n@@ -198,1 +201,1 @@\n-            elem = (char*) malloc(javachars->size[j]*sizeof(char));\n+            elem = (char*) c_malloc(env, javachars->size[j]*sizeof(char));\n@@ -242,1 +245,1 @@\n-    return(env->NewString(javachars->str[index-1],javachars->size[index-1]));\n+    return(env->NewString(javachars->str[index-1],elem_len));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/jni\/libjnistress001.cpp","additions":20,"deletions":17,"binary":false,"changes":37,"status":"modified"}]}