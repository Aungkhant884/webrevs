{"files":[{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 6272965\n+  @summary PIT: Choice triggers MousePressed when pressing mouse outside comp while drop-down is active, XTkt\n+  @key headful\n+*\/\n+\n+import java.awt.Choice;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+public class ChoiceMouseEventOutbounds {\n+\n+    static final int DELAY = 100;\n+    static volatile Choice choice1;\n+    static volatile Frame frame;\n+    static volatile Robot robot;\n+    static volatile boolean mousePressed = false;\n+    static volatile boolean mouseReleased = false;\n+    static volatile boolean mouseClicked = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> createUI());\n+            runTest();\n+        } finally {\n+            if (frame != null) {\n+                EventQueue.invokeAndWait(() -> frame.dispose());\n+            }\n+        }\n+    }\n+\n+    static void createUI() {\n+        choice1 = new Choice();\n+        for (int i = 1; i<10; i++) {\n+            choice1.add(\"item \"+i);\n+        }\n+\n+        choice1.addMouseListener(new MouseAdapter() {\n+            public void mousePressed(MouseEvent me) {\n+                mousePressed = true;\n+                System.out.println(me);\n+            }\n+            public void mouseReleased(MouseEvent me) {\n+                mouseReleased = true;\n+                System.out.println(me);\n+            }\n+            public void mouseClicked(MouseEvent me) {\n+                mouseClicked = true;\n+                System.out.println(me);\n+            }\n+        });\n+\n+        frame = new Frame(\"ChoiceMouseEventOutbounds\");\n+        frame.add(choice1);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+        frame.validate();\n+    }\n+\n+    static void runTest() throws Exception {\n+        \/\/ On Windows, Choice will not close its pop-down menu on a RIGHT\n+        \/\/ MousePress outside of the Choice. So this scenario isn't\n+        \/\/ tested here for that reason.\n+\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(50);\n+        robot.delay(DELAY*10);\n+        testMouseClick(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(DELAY);\n+        testMouseClick(InputEvent.BUTTON2_DOWN_MASK);\n+        robot.delay(DELAY);\n+        testMouseClick(InputEvent.BUTTON3_DOWN_MASK);\n+\n+        System.out.println(\"Test passed: Choice doesn't generate MOUSEPRESS\/CLICK\/RELEASE outside Choice.\");\n+    }\n+\n+    static void testMouseClick(int button) {\n+        Point pt = choice1.getLocationOnScreen();\n+        robot.mouseMove(pt.x + choice1.getWidth()\/2, pt.y + choice1.getHeight()\/2);\n+        robot.delay(DELAY);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(DELAY);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(DELAY*3);\n+\n+        \/\/they are true because we just pressed mouse\n+        mousePressed = false;\n+        mouseReleased = false;\n+        mouseClicked = false;\n+\n+        \/\/move mouse outside Choice\n+        robot.mouseMove(pt.x + choice1.getWidth()\/2, pt.y - choice1.getHeight());\n+        robot.delay(DELAY*3);\n+        robot.mousePress(button);\n+        robot.delay(DELAY);\n+        robot.mouseRelease(button);\n+\n+        if (mousePressed || mouseReleased || mouseClicked) {\n+            System.out.println(\"ERROR: \"+ mousePressed+\",\"+mouseReleased +\",\"+mouseClicked);\n+            throw new RuntimeException(\n+               \"Test failed. Choice shouldn't generate PRESSED, RELEASED, CLICKED events outside \"+ button);\n+        } else {\n+            System.out.println(\n+               \"Test passed. Choice didn't generated MouseDragged PRESSED, RELEASED, CLICKED events outside \"+ button);\n+        }\n+        robot.keyPress(KeyEvent.VK_ESCAPE);\n+        robot.keyRelease(KeyEvent.VK_ESCAPE);\n+        robot.delay(DELAY);\n+        mousePressed = false;\n+        mouseReleased = false;\n+        mouseClicked = false;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/ChoiceMouseEventOutbounds.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4323906\n+  @summary Test that Choice location is not updated erroneously\n+  @key headful\n+*\/\n+\n+\/**\n+ * summary: The test adds a Choice to a Container with BorderLayout, and\n+ *          adds the Container to a Frame with null Layout.  When\n+ *          the Container is moved in the x direction, the Choice should\n+ *          not move in the y direction.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.Container;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+\n+public class ChoiceMoveTest {\n+\n+    static volatile Frame frame;\n+    static volatile Container c;\n+    static volatile Choice ch;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> createUI());\n+            runTest();\n+        } finally {\n+            if (frame != null) {\n+                EventQueue.invokeAndWait(() -> frame.dispose());\n+            }\n+        }\n+    }\n+\n+    static void createUI() {\n+        frame = new Frame(\"Choice Move Test\");\n+        frame.setSize(500, 500);\n+        frame.setLayout(null);\n+\n+        c = new Container();\n+        c.setBackground(Color.green);\n+        frame.add(c);\n+        c.setSize(200, 200);\n+        c.setLocation(100, 100);\n+        c.setLayout(new BorderLayout());\n+\n+        ch = new Choice();\n+        ch.setSize(100, 27);\n+        c.add(ch, BorderLayout.SOUTH);\n+        frame.setVisible(true);\n+        frame.validate();\n+    }\n+\n+    static void runTest () throws Exception {\n+        Thread.sleep(1000);\n+        \/\/ If this test ever gives us problems, try putting getLocation() in a\n+        \/\/ ComponentListener.\n+        int xbefore = ch.getLocation().x;\n+        int ybefore = ch.getLocation().y;\n+        System.out.println(\"Choice location before: \" + xbefore + \", \" + ybefore);\n+\n+        c.setLocation(200, 100);\n+        Thread.sleep(1000);\n+\n+        java.awt.Toolkit.getDefaultToolkit().sync();\n+        Thread.sleep(1000);\n+        int xafter = ch.getLocation().x;\n+        int yafter = ch.getLocation().y;\n+        System.out.println(\"Choice location after: \" + xafter + \", \" + yafter);\n+\n+        if (ybefore != yafter) {\n+            System.out.println(\"Test FAILED\");\n+            throw new RuntimeException(\"Test failed - Choice should not move in the y direction.\");\n+        }\n+        else {\n+            System.out.println(\"Test passed.\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/ChoiceMoveTest.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 6239938\n+  @summary Choice drop-down does not disappear when it loses focus, on XToolkit\n+  @key headful\n+  @requires (os.family == \"linux\")\n+*\/\n+\n+import java.awt.Button;\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+public class ChoiceStaysOpenedOnTAB {\n+\n+    static volatile Robot robot;\n+    static volatile Choice choice1;\n+    static volatile Frame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (!System.getProperty(\"os.name\").toLowerCase().startsWith(\"linux\")) {\n+            System.out.println(\"This test is for Linux only\");\n+            return;\n+        }\n+\n+        try {\n+            EventQueue.invokeAndWait(() -> createUI());\n+            runTest();\n+        } finally {\n+            if (frame != null) {\n+               EventQueue.invokeAndWait(() -> frame.dispose());\n+            }\n+        }\n+    }\n+\n+    static void createUI() {\n+        choice1 = new Choice();\n+        for (int i = 1; i<10; i++) {\n+            choice1.add(\"item-0\"+i);\n+        }\n+        choice1.setForeground(Color.red);\n+        choice1.setBackground(Color.red);\n+        Button b1 = new Button(\"FirstButton\");\n+        Button b2 = new Button(\"SecondButton\");\n+        frame = new Frame(\"ChoiceStaysOpenedOnTAB\");\n+        Panel panel = new Panel();\n+        panel.add(b1);\n+        panel.add(choice1);\n+        panel.add(b2);\n+        frame.add(panel);\n+        frame.setSize(400,400);\n+        frame.setLocationRelativeTo(null);\n+        frame.validate();\n+        frame.setVisible(true);\n+    }\n+\n+    static void runTest() throws Exception {\n+\n+        \/*\n+         * Choice should not lose focus while it is opened with\n+         * TAB\/Shitf-TAB KeyPress on XAWT.\n+         * Should only pass on XAWT.\n+         *\/\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(50);\n+        robot.delay(1000);\n+\n+        testTABKeyPress(InputEvent.BUTTON1_DOWN_MASK, KeyEvent.VK_TAB, false);\n+        testTABKeyPress(InputEvent.BUTTON1_DOWN_MASK, KeyEvent.VK_TAB, true);\n+        System.out.println(\"Passed : Choice should not lose focus on TAB key press while it is opened.\");\n+    }\n+\n+    static void testTABKeyPress(int openButton, int keyButton, boolean isShiftUsed) {\n+        Point pt = choice1.getLocationOnScreen();\n+        robot.mouseMove(pt.x + choice1.getWidth()\/2, pt.y + choice1.getHeight()\/2);\n+        robot.delay(100);\n+        robot.mousePress(openButton);\n+        robot.mouseRelease(openButton);\n+        robot.delay(200);\n+\n+        Color color = robot.getPixelColor(pt.x + choice1.getWidth()\/2,\n+                                          pt.y + 3 * choice1.getHeight());\n+        if (!color.equals(Color.red)) {\n+            throw new RuntimeException(\n+                \"Choice wasn't opened with LEFTMOUSE button\" + openButton +\":\"+keyButton+\":\"+isShiftUsed);\n+        }\n+        robot.delay(200);\n+        if (isShiftUsed) {\n+            robot.keyPress(KeyEvent.VK_SHIFT);\n+        }\n+        robot.keyPress(keyButton);\n+        robot.keyRelease(keyButton);\n+\n+        if (isShiftUsed) {\n+            robot.keyRelease(KeyEvent.VK_SHIFT);\n+        }\n+\n+        robot.delay(200);\n+        if (!choice1.isFocusOwner()) {\n+            System.out.println(\"Choice has focus==\"+choice1.isFocusOwner());\n+            throw new RuntimeException(\n+                \"Choice has no focus after pressing TAB\/Shitf+TAB\" + openButton +\":\"+keyButton+\":\"+isShiftUsed);\n+        }\n+        int px = pt.x + choice1.getWidth()\/2;\n+        int py = pt.y + 3 * choice1.getHeight();\n+        color = robot.getPixelColor(px, py);\n+        \/\/we should take a color on the point on the choice's menu\n+        System.out.println(\"color got \"+color);\n+        if (!color.equals(Color.red)) {\n+            throw new RuntimeException(\n+                \"Choice closed after TAB\/Shift+TAB key press\" + openButton +\":\"+keyButton+\":\"+isShiftUsed);\n+        }\n+\n+        \/\/close opened choice\n+        robot.keyPress(KeyEvent.VK_ESCAPE);\n+        robot.keyRelease(KeyEvent.VK_ESCAPE);\n+        robot.delay(200);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/ChoiceStaysOpenedOnTAB.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4902933\n+  @summary Test that dragging off an unfurled Choice prevents selecting a new item\n+  @key headful\n+*\/\n+\n+import java.awt.Choice;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+\n+public class DragOffNoSelectTest implements WindowListener, Runnable {\n+\n+    static volatile DragOffNoSelectTest testInstance;\n+    static volatile Frame frame;\n+    static volatile Choice theChoice;\n+    static volatile Robot robot;\n+    static final String firstItem = new String(\"First Choice Item\");\n+\n+    static volatile Object lock = new Object();\n+\n+    public static void main(String[] args) throws Exception {\n+        testInstance = new DragOffNoSelectTest();\n+        robot = new Robot();\n+        robot.setAutoDelay(500);\n+        try {\n+            EventQueue.invokeAndWait(() -> createUI());\n+            runTest();\n+        } finally {\n+            if (frame != null) {\n+               EventQueue.invokeAndWait(() -> frame.dispose());\n+            }\n+        }\n+    }\n+\n+    static void createUI() {\n+        frame = new Frame(\"DragOffNoSelectTest\");\n+        theChoice = new Choice();\n+        theChoice.add(firstItem);\n+        for (int i = 0; i < 10; i++) {\n+            theChoice.add(new String(\"Choice Item \" + i));\n+        }\n+        frame.add(theChoice);\n+        frame.addWindowListener(testInstance);\n+        frame.setSize(400, 400);\n+        frame.setLocationRelativeTo(null);\n+\n+        frame.setVisible(true);\n+        frame.validate();\n+    }\n+\n+    static void runTest() throws Exception {\n+        robot.mouseMove(10, 30);\n+        synchronized (lock) {\n+            try {\n+                lock.wait(120000);\n+            }\n+            catch (InterruptedException e) {}\n+        }\n+        robot.waitForIdle();\n+\n+        if (!firstItem.equals(theChoice.getSelectedItem())) {\n+            throw new RuntimeException(\"TEST FAILED - new item was selected\");\n+        }\n+    }\n+\n+    public void run() {\n+        robot.delay(1000);\n+        \/\/ get loc of Choice on screen\n+        Point loc = theChoice.getLocationOnScreen();\n+        \/\/ get bounds of Choice\n+        Dimension size = theChoice.getSize();\n+        robot.mouseMove(loc.x + size.width - 10, loc.y + size.height \/ 2);\n+\n+        robot.setAutoDelay(500);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        robot.mouseMove(loc.x + size.width \/ 2, loc.y + size.height + size.height \/ 2);\n+        robot.mouseMove(loc.x + size.width \/ 2, loc.y + 2*size.height + size.height \/ 2);\n+        robot.mouseMove(loc.x + size.width \/ 2, loc.y + 3*size.height + size.height \/ 2);\n+        robot.mouseMove(loc.x + size.width \/ 2, loc.y + 4*size.height + size.height \/ 2);\n+        robot.mouseMove(loc.x + size.width, loc.y + 4*size.height + size.height \/ 2);\n+        robot.mouseMove(loc.x + 2*size.width, loc.y + 4*size.height + size.height \/ 2);\n+        robot.mouseMove(loc.x + 3*size.width, loc.y + 4*size.height + size.height \/ 2);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        synchronized(lock) {\n+            lock.notify();\n+        }\n+    }\n+\n+    public void windowOpened(WindowEvent e) {\n+        System.out.println(\"windowActivated()\");\n+        Thread testThread = new Thread(testInstance);\n+        testThread.start();\n+    }\n+    public void windowActivated(WindowEvent e) { }\n+    public void windowDeactivated(WindowEvent e) {}\n+    public void windowClosed(WindowEvent e) {}\n+    public void windowClosing(WindowEvent e) {}\n+    public void windowIconified(WindowEvent e) {}\n+    public void windowDeiconified(WindowEvent e) {}\n+\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Choice\/DragOffNoSelectTest.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"}]}