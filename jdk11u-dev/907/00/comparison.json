{"files":[{"patch":"@@ -37,1 +37,0 @@\n-import java.nio.file.DirectoryNotEmptyException;\n@@ -40,1 +39,0 @@\n-import java.nio.file.NoSuchFileException;\n@@ -68,2 +66,0 @@\n-import javax.tools.JavaFileObject.Kind;\n-import javax.tools.JavaFileManager.Location;\n@@ -110,1 +106,1 @@\n-        timeoutFactor = (ttf == null) ? 1.0f : Float.valueOf(ttf);\n+        timeoutFactor = (ttf == null) ? 1.0f : Float.parseFloat(ttf);\n@@ -114,1 +110,1 @@\n-    public static final Path currDir = Paths.get(\".\");\n+    public static final Path currDir = Path.of(\".\");\n@@ -130,0 +126,1 @@\n+     *\n@@ -142,0 +139,1 @@\n+     *\n@@ -168,0 +166,1 @@\n+     *\n@@ -178,0 +177,1 @@\n+     *\n@@ -179,1 +179,1 @@\n-     * @param lines the strings to be filtered\n+     * @param lines   the strings to be filtered\n@@ -194,0 +194,1 @@\n+     *\n@@ -195,1 +196,1 @@\n-     * @param to where to copy the file\n+     * @param to   where to copy the file\n@@ -199,1 +200,1 @@\n-        copyFile(Paths.get(from), Paths.get(to));\n+        copyFile(Path.of(from), Path.of(to));\n@@ -208,0 +209,1 @@\n+     *\n@@ -209,1 +211,1 @@\n-     * @param to where to copy the file\n+     * @param to   where to copy the file\n@@ -226,0 +228,1 @@\n+     *\n@@ -233,1 +236,1 @@\n-            Files.createDirectories(Paths.get(p));\n+            Files.createDirectories(Path.of(p));\n@@ -241,0 +244,1 @@\n+     *\n@@ -255,0 +259,1 @@\n+     *\n@@ -266,0 +271,1 @@\n+     *\n@@ -277,0 +283,1 @@\n+     *\n@@ -296,0 +303,1 @@\n+     *\n@@ -303,1 +311,1 @@\n-        Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n+        Files.walkFileTree(root, new SimpleFileVisitor<>() {\n@@ -306,1 +314,1 @@\n-            private Deque<List<Path>> dirFiles = new LinkedList<>();\n+            private final Deque<List<Path>> dirFiles = new LinkedList<>();\n@@ -309,1 +317,1 @@\n-            public FileVisitResult visitFile(Path file, BasicFileAttributes a) throws IOException {\n+            public FileVisitResult visitFile(Path file, BasicFileAttributes a) {\n@@ -316,1 +324,1 @@\n-            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes a) throws IOException {\n+            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes a) {\n@@ -346,0 +354,1 @@\n+     *\n@@ -347,1 +356,1 @@\n-     * @param ioe the earlier exception, or null\n+     * @param ioe  the earlier exception, or null\n@@ -349,1 +358,1 @@\n-     *  trying to delete the file\n+     * trying to delete the file\n@@ -366,0 +375,1 @@\n+     *\n@@ -378,0 +388,1 @@\n+     *\n@@ -408,0 +419,1 @@\n+     *\n@@ -409,1 +421,1 @@\n-     * @param to where to move the file\n+     * @param to   where to move the file\n@@ -413,1 +425,1 @@\n-        moveFile(Paths.get(from), Paths.get(to));\n+        moveFile(Path.of(from), Path.of(to));\n@@ -422,0 +434,1 @@\n+     *\n@@ -423,1 +436,1 @@\n-     * @param to where to move the file\n+     * @param to   where to move the file\n@@ -438,0 +451,1 @@\n+     *\n@@ -449,0 +463,1 @@\n+     *\n@@ -459,1 +474,2 @@\n-     * @param path the file to be read\n+     *\n+     * @param path     the file to be read\n@@ -465,1 +481,1 @@\n-        return readAllLines(Paths.get(path), encoding);\n+        return readAllLines(Path.of(path), encoding);\n@@ -470,1 +486,2 @@\n-     * @param path the file to be read\n+     *\n+     * @param path     the file to be read\n@@ -486,0 +503,1 @@\n+     *\n@@ -497,0 +515,1 @@\n+     *\n@@ -498,1 +517,1 @@\n-     * @param paths the directories in which to search for files\n+     * @param paths         the directories in which to search for files\n@@ -505,1 +524,1 @@\n-            Files.walkFileTree(p, new SimpleFileVisitor<Path>() {\n+            Files.walkFileTree(p, new SimpleFileVisitor<>() {\n@@ -507,2 +526,1 @@\n-                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)\n-                        throws IOException {\n+                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {\n@@ -516,1 +534,1 @@\n-        return files.toArray(new Path[files.size()]);\n+        return files.toArray(new Path[0]);\n@@ -522,1 +540,2 @@\n-     * @param path where to write the file\n+     *\n+     * @param path    where to write the file\n@@ -527,1 +546,1 @@\n-        writeFile(Paths.get(path), content);\n+        writeFile(Path.of(path), content);\n@@ -533,1 +552,2 @@\n-     * @param path where to write the file\n+     *\n+     * @param path    where to write the file\n@@ -557,1 +577,2 @@\n-     * @param dir the base directory\n+     *\n+     * @param dir      the base directory\n@@ -570,1 +591,2 @@\n-     * Returns the path for the binary of a JDK tool within {@link testJDK}.\n+     * Returns the path for the binary of a JDK tool within {@link #testJDK}.\n+     *\n@@ -575,1 +597,1 @@\n-        return Paths.get(testJDK, \"bin\", tool);\n+        return Path.of(testJDK, \"bin\", tool);\n@@ -580,1 +602,2 @@\n-     * @param <T> the type parameter of the {@code Iterable}\n+     *\n+     * @param <T>   the type parameter of the {@code Iterable}\n@@ -601,0 +624,1 @@\n+         *\n@@ -602,1 +626,1 @@\n-         * @param source the source text\n+         * @param source    the source text\n@@ -612,0 +636,1 @@\n+         *\n@@ -622,0 +647,1 @@\n+         *\n@@ -630,0 +656,1 @@\n+         *\n@@ -646,1 +673,1 @@\n-        private static Pattern commentPattern =\n+        private final static Pattern commentPattern =\n@@ -648,1 +675,1 @@\n-        private static Pattern modulePattern =\n+        private final static Pattern modulePattern =\n@@ -650,3 +677,3 @@\n-        private static Pattern packagePattern =\n-                Pattern.compile(\"package\\\\s+(((?:\\\\w+\\\\.)*)(?:\\\\w+))\");\n-        private static Pattern classPattern =\n+        private final static Pattern packagePattern =\n+                Pattern.compile(\"package\\\\s+(((?:\\\\w+\\\\.)*)\\\\w+)\");\n+        private final static Pattern classPattern =\n@@ -666,1 +693,1 @@\n-                sb.append(source.substring(start, matcher.start()));\n+                sb.append(source, start, matcher.start());\n@@ -702,2 +729,1 @@\n-     * @deprecated This is a legacy method for compatibility with ToolBox v1.\n-     *      Use {@link JavaSource#getName JavaSource.getName} instead.\n+     *\n@@ -706,0 +732,2 @@\n+     * @deprecated This is a legacy method for compatibility with ToolBox v1.\n+     * Use {@link JavaSource#getName JavaSource.getName} instead.\n@@ -718,1 +746,2 @@\n-    \/**Validate if a given name is a valid file name\n+    \/**\n+     * Validates if a given name is a valid file name\n@@ -720,0 +749,3 @@\n+     *\n+     * @param name the name\n+     * @throws IllegalArgumentException if the name is a reserved name\n@@ -722,1 +754,1 @@\n-        for (String part : name.split(\"\\\\.|\/|\\\\\\\\\")) {\n+        for (String part : name.split(\"[.\/\\\\\\\\]\")) {\n@@ -730,6 +762,2 @@\n-    \/**\n-     * A memory file manager, for saving generated files in memory.\n-     * The file manager delegates to a separate file manager for listing and\n-     * reading input files.\n-     *\/\n-    public static class MemoryFileManager extends ForwardingJavaFileManager {\n+\n+    public static class MemoryFileManager extends ForwardingJavaFileManager<JavaFileManager> {\n@@ -747,1 +775,1 @@\n-         * Construct a memory file manager which stores output files in memory,\n+         * Constructs a memory file manager which stores output files in memory,\n@@ -755,1 +783,1 @@\n-         * Construct a memory file manager which stores output files in memory,\n+         * Constructs a memory file manager which stores output files in memory,\n@@ -757,0 +785,1 @@\n+         *\n@@ -776,0 +805,1 @@\n+         *\n@@ -788,0 +818,1 @@\n+         *\n@@ -789,1 +820,1 @@\n-         * @param name the name of the file\n+         * @param name     the name of the file\n@@ -800,0 +831,1 @@\n+         *\n@@ -801,1 +833,1 @@\n-         * @param name the name of the file\n+         * @param name     the name of the file\n@@ -815,4 +847,2 @@\n-            Map<String, Content> filesForLocation = files.get(location);\n-            if (filesForLocation == null)\n-                files.put(location, filesForLocation = new HashMap<>());\n-            filesForLocation.put(name, content);\n+            files.computeIfAbsent(location, k -> new HashMap<>())\n+                    .put(name, content);\n@@ -830,1 +860,4 @@\n-             * @param name binary name of the class to be stored in this file object\n+             *\n+             * @param location the location in which to save the file object\n+             * @param name     binary name of the class to be stored in this file object\n+             * @param kind     the kind of file object\n@@ -867,1 +900,1 @@\n-                        String text = ((StringWriter) out).toString();\n+                        String text = out.toString();\n","filename":"test\/langtools\/tools\/lib\/toolbox\/ToolBox.java","additions":95,"deletions":62,"binary":false,"changes":157,"status":"modified"}]}