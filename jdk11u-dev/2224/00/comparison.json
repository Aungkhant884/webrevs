{"files":[{"patch":"@@ -59,1 +59,1 @@\n-  BUILD_JDK_JTREG_EXCLUDE += libDirectIO.c libInheritedChannel.c\n+  BUILD_JDK_JTREG_EXCLUDE += libDirectIO.c libInheritedChannel.c exelauncher.c\n@@ -69,0 +69,1 @@\n+    BUILD_JDK_JTREG_EXECUTABLES_LIBS_exelauncher := -ldl\n@@ -71,0 +72,1 @@\n+    BUILD_JDK_JTREG_EXECUTABLES_LIBS_exelauncher := -lthread -ldl\n@@ -79,0 +81,1 @@\n+  BUILD_JDK_JTREG_EXCLUDE += exelauncher.c\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,4 +24,4 @@\n-import java.io.File;\n-import java.io.IOException;\n-import java.nio.file.FileSystem;\n-import java.nio.file.FileSystems;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n+\n@@ -29,1 +29,0 @@\n-import java.nio.file.LinkOption;\n@@ -31,4 +30,1 @@\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.attribute.PosixFilePermission;\n-import java.util.HashSet;\n-import java.util.Set;\n+import java.nio.file.Paths;\n@@ -38,2 +34,0 @@\n-import jdk.test.lib.process.ProcessTools;\n-\n@@ -50,0 +44,1 @@\n+ * @requires (os.family == \"linux\" | os.family == \"solaris\")\n@@ -51,1 +46,1 @@\n- * @run main\/othervm CustomLauncherTest\n+ * @run main\/othervm\/native CustomLauncherTest\n@@ -54,3 +49,0 @@\n-    private static final  String TEST_CLASSPATH = System.getProperty(\"test.class.path\");\n-    private static final  String TEST_JDK = System.getProperty(\"test.jdk\");\n-    private static final  String WORK_DIR = System.getProperty(\"user.dir\");\n@@ -58,30 +50,1 @@\n-    private static final  String TEST_SRC = System.getProperty(\"test.src\");\n-    private static final  String OSNAME = System.getProperty(\"os.name\");\n-    private static final  String ARCH;\n-    static {\n-        \/\/ magic with os.arch\n-        String osarch = System.getProperty(\"os.arch\");\n-        switch (osarch) {\n-            case \"i386\":\n-            case \"i486\":\n-            case \"i586\":\n-            case \"i686\":\n-            case \"i786\":\n-            case \"i886\":\n-            case \"i986\": {\n-                ARCH = \"i586\";\n-                break;\n-            }\n-            case \"x86_64\":\n-            case \"amd64\": {\n-                ARCH = \"amd64\";\n-                break;\n-            }\n-            case \"sparc\":\n-                ARCH = \"sparcv9\";\n-                break;\n-            default: {\n-                ARCH = osarch;\n-            }\n-        }\n-    }\n+    public static final String TEST_NATIVE_PATH = System.getProperty(\"test.nativepath\");\n@@ -90,1 +53,1 @@\n-        if (TEST_CLASSPATH == null || TEST_CLASSPATH.isEmpty()) {\n+        if (\".\".equals(Utils.TEST_CLASS_PATH)) {\n@@ -95,13 +58,1 @@\n-        if (getPlatform() == null) {\n-            System.out.println(\"Test not designed to run on this operating \" +\n-                                \"system (\" + OSNAME + \"), skipping...\");\n-            return;\n-        }\n-\n-        final FileSystem FS = FileSystems.getDefault();\n-\n-        Path libjvmPath = findLibjvm(FS);\n-        if (libjvmPath == null) {\n-            throw new Error(\"Unable to locate 'libjvm.so' in \" + TEST_JDK);\n-        }\n-\n+        Path libjvm = Platform.jvmLibDir().resolve(\"libjvm.so\");\n@@ -111,3 +62,1 @@\n-            String[] launcher = getLauncher();\n-\n-            if (launcher == null) return; \/\/ launcher not available for the tested platform; skip\n+            String launcher = getLauncher();\n@@ -117,3 +66,3 @@\n-            System.out.println(\"  launcher  : \" + launcher[0]);\n-            System.out.println(\"  libjvm    : \" + libjvmPath.toString());\n-            System.out.println(\"  classpath : \" + TEST_CLASSPATH);\n+            System.out.println(\"  launcher  : \" + launcher);\n+            System.out.println(\"  libjvm    : \" + libjvm);\n+            System.out.println(\"  classpath : \" + Utils.TEST_CLASS_PATH);\n@@ -121,3 +70,3 @@\n-                launcher[1],\n-                libjvmPath.toString(),\n-                TEST_CLASSPATH,\n+                launcher,\n+                libjvm.toString(),\n+                Utils.TEST_CLASS_PATH,\n@@ -151,1 +100,1 @@\n-                TEST_CLASSPATH,\n+                Utils.TEST_CLASS_PATH,\n@@ -185,82 +134,3 @@\n-    private static Path findLibjvm(FileSystem FS) {\n-        Path libjvmPath = findLibjvm(FS.getPath(TEST_JDK, \"lib\"));\n-        return libjvmPath;\n-    }\n-\n-    private static Path findLibjvm(Path libPath) {\n-        \/\/ libjvm.so -> server\/libjvm.so -> client\/libjvm.so\n-        Path libjvmPath = libPath.resolve(\"libjvm.so\");\n-        if (isFileOk(libjvmPath)) {\n-            return libjvmPath;\n-        }\n-        libjvmPath = libPath.resolve(\"server\/libjvm.so\");\n-        if (isFileOk(libjvmPath)) {\n-            return libjvmPath;\n-        }\n-        libjvmPath = libPath.resolve(\"client\/libjvm.so\");\n-        if (isFileOk(libPath)) {\n-            return libjvmPath;\n-        }\n-\n-        return null;\n-    }\n-\n-    private static boolean isFileOk(Path path) {\n-        return Files.isRegularFile(path) && Files.isReadable(path);\n-    }\n-\n-    private static String getPlatform() {\n-        String platform = null;\n-        switch (OSNAME.toLowerCase()) {\n-            case \"linux\": {\n-                platform = \"linux\";\n-                break;\n-            }\n-            case \"sunos\": {\n-                platform = \"solaris\";\n-                break;\n-            }\n-            default: {\n-                platform = null;\n-            }\n-        }\n-\n-        return platform;\n-    }\n-\n-    private static String[] getLauncher() throws IOException {\n-        String platform = getPlatform();\n-        if (platform == null) {\n-            return null;\n-        }\n-\n-        String launcher = TEST_SRC + File.separator + platform + \"-\" + ARCH +\n-                          File.separator + \"launcher\";\n-\n-        final FileSystem FS = FileSystems.getDefault();\n-        Path launcherPath = FS.getPath(launcher);\n-\n-        final boolean hasLauncher = Files.isRegularFile(launcherPath, LinkOption.NOFOLLOW_LINKS)&&\n-                                    Files.isReadable(launcherPath);\n-        if (!hasLauncher) {\n-            System.out.println(\"Launcher [\" + launcher + \"] does not exist. Skipping the test.\");\n-            return null;\n-        }\n-\n-        \/\/ It is impossible to store an executable file in the source control\n-        \/\/ We need to copy the launcher to the working directory\n-        \/\/ and set the executable flag\n-        Path localLauncherPath = FS.getPath(WORK_DIR, \"launcher\");\n-        Files.copy(launcherPath, localLauncherPath,\n-                   StandardCopyOption.REPLACE_EXISTING);\n-        if (!Files.isExecutable(localLauncherPath)) {\n-            Set<PosixFilePermission> perms = new HashSet<>(\n-                Files.getPosixFilePermissions(\n-                    localLauncherPath,\n-                    LinkOption.NOFOLLOW_LINKS\n-                )\n-            );\n-            perms.add(PosixFilePermission.OWNER_EXECUTE);\n-            Files.setPosixFilePermissions(localLauncherPath, perms);\n-        }\n-        return new String[] {launcher, localLauncherPath.toAbsolutePath().toString()};\n+    private static String getLauncher() {\n+        Path launcherPath = Paths.get(TEST_NATIVE_PATH, \"launcher\");\n+        return launcherPath.toAbsolutePath().toString();\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/CustomLauncherTest.java","additions":22,"deletions":152,"binary":false,"changes":174,"status":"modified"},{"patch":"@@ -1,80 +0,0 @@\n-# Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-\n-#\n-# This Makefile is used to generate versions of the launcher program for\n-# use by the CustomLauncherTest.  The binaries are checked into SCCS\n-# so this Makefile is not used as part of test run.  It is provided to\n-# make rebuilding the launcher binaries a relatively painless activity.\n-#\n-\n-#\n-# Edit the following to reflect the current build environment.\n-#\n-# Architecture being built (initially one of: solaris-sparc, solaris-i586,\n-# linux-i586.\n-#\n-PLATFORM=solaris\n-ARCH=sparc\n-OUTPUT_DIR =$(PLATFORM)-$(ARCH)\n-\n-#\n-# Path to C compiler\n-#\n-# As of 6\/1\/06:\n-#\tSolaris\tCC=\/java\/devtools\/$(ARCH)\/SUNWspro\/SS11\/bin\/cc\n-#\tLinux\tCC=\/usr\/bin\/gcc\n-#\n-CC=\/java\/devtools\/$(ARCH)\/SUNWspro\/SS11\/bin\/cc\n-\n-#\n-# Include directory in JRE or JDK install\n-#\n-JINCLUDE=\/java\/re\/jdk\/1.6.0\/latest\/binaries\/$(OUTPUT_DIR)\/include\n-\n-#\n-# PLATFORM dependent flags\n-#\n-# On pre-Solaris 10, -lthread is required.\n-#\n-ifeq ($(PLATFORM), solaris)\n-\tPLATFORM_LIBS= -lthread\n-else\n-\tPLATFORM_LIBS=\n-endif\n-\n-#\n-# Targets\n-#\n-all: install\n-\n-$(PLATFORM):\n-\tmkdir $(OUTPUT_DIR) $(OUTPUT_DIR)\/SCCS\n-\n-install: $(PLATFORM)\n-\t$(CC) -I$(JINCLUDE) -I$(JINCLUDE)\/$(PLATFORM) \\\n-\t\t-o $(OUTPUT_DIR)\/launcher launcher.c $(PLATFORM_LIBS) -ldl\n-\n-clean:\n-\n-\n-clobber: clean\n-\trm $(OUTPUT_DIR)\/launcher\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/Makefile","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * A minature launcher for use by CustomLauncherTest.sh.  It sets\n+ * A miniature launcher for use by CustomLauncherTest.java test. It sets\n@@ -29,1 +29,1 @@\n-#include <strings.h>\n+#include <string.h>\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/exelauncher.c","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/launcher.c","status":"renamed"},{"filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/linux-amd64\/launcher","binary":true,"status":"deleted"},{"filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/linux-i586\/launcher","binary":true,"status":"deleted"},{"filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/solaris-amd64\/launcher","binary":true,"status":"deleted"},{"filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/solaris-sparcv9\/launcher","binary":true,"status":"deleted"}]}